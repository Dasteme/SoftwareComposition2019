post_link,title,body_question,body_answer,viewcount,tags,score,score_answer,answercount,LastActivityDate,AcceptedAnswerId,CommentCount,FavoriteCount,LastEditorUserId,LastEditorDisplayName,LastEditDate,CreationDate,ClosedDate
"8730927","Convert python long/int to fixed size byte array","I'm trying to implement RC4 and DH key exchange in python. Problem is that I have no idea about how to convert the python long/int from the key exchange to the byte array I need for the RC4 implementation. Is there a simple way to convert a long to the required length byte array?
Update: forgot to mention that the numbers I'm dealing with are 768 bit unsigned integers.
","You can try using struct:
import struct
struct.pack('L',longvalue)

","81465","<python><bytearray><long-integer><diffie-hellman><rc4-cipher>","39","5","10","2019-03-06 02:09:10","14527004","2","10","21234","","2012-05-05 16:16:07","2012-01-04 17:11:09",""
"8730927","Convert python long/int to fixed size byte array","I'm trying to implement RC4 and DH key exchange in python. Problem is that I have no idea about how to convert the python long/int from the key exchange to the byte array I need for the RC4 implementation. Is there a simple way to convert a long to the required length byte array?
Update: forgot to mention that the numbers I'm dealing with are 768 bit unsigned integers.
","long/int to the byte array looks like exact purpose of struct.pack.  For long integers that exceed 4(8) bytes, you can come up with something like the next:
>>> limit = 256*256*256*256 - 1
>>> i = 1234567890987654321
>>> parts = []
>>> while i:
        parts.append(i & limit)
        i >>= 32

>>> struct.pack('>' + 'L'*len(parts), *parts )
'\xb1l\x1c\xb1\x11""\x10\xf4'

>>> struct.unpack('>LL', '\xb1l\x1c\xb1\x11""\x10\xf4')
(2976652465L, 287445236)
>>> (287445236L << 32) + 2976652465L
1234567890987654321L

","81465","<python><bytearray><long-integer><diffie-hellman><rc4-cipher>","39","7","10","2019-03-06 02:09:10","14527004","2","10","21234","","2012-05-05 16:16:07","2012-01-04 17:11:09",""
"8730927","Convert python long/int to fixed size byte array","I'm trying to implement RC4 and DH key exchange in python. Problem is that I have no idea about how to convert the python long/int from the key exchange to the byte array I need for the RC4 implementation. Is there a simple way to convert a long to the required length byte array?
Update: forgot to mention that the numbers I'm dealing with are 768 bit unsigned integers.
","Basically what you need to do is convert the int/long into its base 256 representation -- i.e. a number whose ""digits"" range from 0-255. Here's a fairly efficient way to do something like that:
def base256_encode(n, minwidth=0): # int/long to byte array
    if n > 0:
        arr = []
        while n:
            n, rem = divmod(n, 256)
            arr.append(rem)
        b = bytearray(reversed(arr))
    elif n == 0:
        b = bytearray(b'\x00')
    else:
        raise ValueError

    if minwidth > 0 and len(b) < minwidth: # zero padding needed?
        b = (minwidth-len(b)) * '\x00' + b
    return b

You many not need thereversed()call depending on the endian-ness desired (doing so would require the padding to be done differently as well). Also note that as written it doesn't handle negative numbers.
You might also want to take a look at the similar but highly optimized long_to_bytes() function in thenumber.pymodule which is part of the open source Python Cryptography Toolkit. It actually converts the number into a string, not a byte array, but that's a minor issue.
","81465","<python><bytearray><long-integer><diffie-hellman><rc4-cipher>","39","3","10","2019-03-06 02:09:10","14527004","2","10","21234","","2012-05-05 16:16:07","2012-01-04 17:11:09",""
"8730927","Convert python long/int to fixed size byte array","I'm trying to implement RC4 and DH key exchange in python. Problem is that I have no idea about how to convert the python long/int from the key exchange to the byte array I need for the RC4 implementation. Is there a simple way to convert a long to the required length byte array?
Update: forgot to mention that the numbers I'm dealing with are 768 bit unsigned integers.
","I haven't done any benchmarks, but this recipe ""works for me"".
The short version: use '%x' % val, then unhexlify the result. The devil is in the details, though, as unhexlify requires an even number of hex digits, which %x doesn't guarantee. See the docstring, and the liberal inline comments for details.
from binascii import unhexlify

def long_to_bytes (val, endianness='big'):
    """"""
    Use :ref:`string formatting` and :func:`~binascii.unhexlify` to
    convert ``val``, a :func:`long`, to a byte :func:`str`.

    :param long val: The value to pack

    :param str endianness: The endianness of the result. ``'big'`` for
      big-endian, ``'little'`` for little-endian.

    If you want byte- and word-ordering to differ, you're on your own.

    Using :ref:`string formatting` lets us use Python's C innards.
    """"""

    # one (1) hex digit per four (4) bits
    width = val.bit_length()

    # unhexlify wants an even multiple of eight (8) bits, but we don't
    # want more digits than we need (hence the ternary-ish 'or')
    width += 8 - ((width % 8) or 8)

    # format width specifier: four (4) bits per hex digit
    fmt = '%%0%dx' % (width // 4)

    # prepend zero (0) to the width, to zero-pad the output
    s = unhexlify(fmt % val)

    if endianness == 'little':
        # see http://stackoverflow.com/a/931095/309233
        s = s[::-1]

    return s

...and my nosetest unit tests ;-)
class TestHelpers (object):
    def test_long_to_bytes_big_endian_small_even (self):
        s = long_to_bytes(0x42)
        assert s == '\x42'

        s = long_to_bytes(0xFF)
        assert s == '\xff'

    def test_long_to_bytes_big_endian_small_odd (self):
        s = long_to_bytes(0x1FF)
        assert s == '\x01\xff'

        s = long_to_bytes(0x201FF)
        assert s == '\x02\x01\xff'

    def test_long_to_bytes_big_endian_large_even (self):
        s = long_to_bytes(0xab23456c8901234567)
        assert s == '\xab\x23\x45\x6c\x89\x01\x23\x45\x67'

    def test_long_to_bytes_big_endian_large_odd (self):
        s = long_to_bytes(0x12345678901234567)
        assert s == '\x01\x23\x45\x67\x89\x01\x23\x45\x67'

    def test_long_to_bytes_little_endian_small_even (self):
        s = long_to_bytes(0x42, 'little')
        assert s == '\x42'

        s = long_to_bytes(0xFF, 'little')
        assert s == '\xff'

    def test_long_to_bytes_little_endian_small_odd (self):
        s = long_to_bytes(0x1FF, 'little')
        assert s == '\xff\x01'

        s = long_to_bytes(0x201FF, 'little')
        assert s == '\xff\x01\x02'

    def test_long_to_bytes_little_endian_large_even (self):
        s = long_to_bytes(0xab23456c8901234567, 'little')
        assert s == '\x67\x45\x23\x01\x89\x6c\x45\x23\xab'

    def test_long_to_bytes_little_endian_large_odd (self):
        s = long_to_bytes(0x12345678901234567, 'little')
        assert s == '\x67\x45\x23\x01\x89\x67\x45\x23\x01'

","81465","<python><bytearray><long-integer><diffie-hellman><rc4-cipher>","39","18","10","2019-03-06 02:09:10","14527004","2","10","21234","","2012-05-05 16:16:07","2012-01-04 17:11:09",""
"8730927","Convert python long/int to fixed size byte array","I'm trying to implement RC4 and DH key exchange in python. Problem is that I have no idea about how to convert the python long/int from the key exchange to the byte array I need for the RC4 implementation. Is there a simple way to convert a long to the required length byte array?
Update: forgot to mention that the numbers I'm dealing with are 768 bit unsigned integers.
","Little-endian, reverse the result or the range if you want Big-endian:
def int_to_bytes(val, num_bytes):
    return [(val & (0xff << pos*8)) >> pos*8 for pos in range(num_bytes)]

Big-endian:
def int_to_bytes(val, num_bytes):
    return [(val & (0xff << pos*8)) >> pos*8 for pos in reversed(range(num_bytes))]

","81465","<python><bytearray><long-integer><diffie-hellman><rc4-cipher>","39","6","10","2019-03-06 02:09:10","14527004","2","10","21234","","2012-05-05 16:16:07","2012-01-04 17:11:09",""
"8730927","Convert python long/int to fixed size byte array","I'm trying to implement RC4 and DH key exchange in python. Problem is that I have no idea about how to convert the python long/int from the key exchange to the byte array I need for the RC4 implementation. Is there a simple way to convert a long to the required length byte array?
Update: forgot to mention that the numbers I'm dealing with are 768 bit unsigned integers.
","One-liner:
bytearray.fromhex('{:0192x}'.format(big_int))

The 192 is 768 / 4, because OP wanted 768-bit numbers and there are 4 bits in a hex digit. If you need a bigger bytearray use a format string with a higher number. Example:
>>> big_int = 911085911092802609795174074963333909087482261102921406113936886764014693975052768158290106460018649707059449553895568111944093294751504971131180816868149233377773327312327573120920667381269572962606994373889233844814776702037586419
>>> bytearray.fromhex('{:0192x}'.format(big_int))
bytearray(b'\x96;h^\xdbJ\x8f3obL\x9c\xc2\xb0-\x9e\xa4Sj-\xf6i\xc1\x9e\x97\x94\x85M\x1d\x93\x10\\\x81\xc2\x89\xcd\xe0a\xc0D\x81v\xdf\xed\xa9\xc1\x83p\xdbU\xf1\xd0\xfeR)\xce\x07\xdepM\x88\xcc\x7fv\\\x1c\x8di\x87N\x00\x8d\xa8\xbd[<\xdf\xaf\x13z:H\xed\xc2)\xa4\x1e\x0f\xa7\x92\xa7\xc6\x16\x86\xf1\xf3')
>>> lepi_int = 0x963b685edb4a8f336f624c9cc2b02d9ea4536a2df669c19e9794854d1d93105c81c289cde061c0448176dfeda9c18370db55f1d0fe5229ce07de704d88cc7f765c1c8d69874e008da8bd5b3cdfaf137a3a48edc229a41e0fa792a7c61686f1f
>>> bytearray.fromhex('{:0192x}'.format(lepi_int))
bytearray(b'\tc\xb6\x85\xed\xb4\xa8\xf36\xf6$\xc9\xcc+\x02\xd9\xeaE6\xa2\xdff\x9c\x19\xe9yHT\xd1\xd91\x05\xc8\x1c(\x9c\xde\x06\x1c\x04H\x17m\xfe\xda\x9c\x187\r\xb5_\x1d\x0f\xe5""\x9c\xe0}\xe7\x04\xd8\x8c\xc7\xf7e\xc1\xc8\xd6\x98t\xe0\x08\xda\x8b\xd5\xb3\xcd\xfa\xf17\xa3\xa4\x8e\xdc""\x9aA\xe0\xfay*|aho\x1f')

[My answer had used hex() before. I corrected it with format() in order to handle ints with odd-sized byte expressions. This fixes previous complaints about ValueError.]
","81465","<python><bytearray><long-integer><diffie-hellman><rc4-cipher>","39","14","10","2019-03-06 02:09:10","14527004","2","10","21234","","2012-05-05 16:16:07","2012-01-04 17:11:09",""
"8730927","Convert python long/int to fixed size byte array","I'm trying to implement RC4 and DH key exchange in python. Problem is that I have no idea about how to convert the python long/int from the key exchange to the byte array I need for the RC4 implementation. Is there a simple way to convert a long to the required length byte array?
Update: forgot to mention that the numbers I'm dealing with are 768 bit unsigned integers.
","With Python 3.2 and later, you can use int.to_bytes and int.from_bytes: https://docs.python.org/3/library/stdtypes.html#int.to_bytes
","81465","<python><bytearray><long-integer><diffie-hellman><rc4-cipher>","39","44","10","2019-03-06 02:09:10","14527004","2","10","21234","","2012-05-05 16:16:07","2012-01-04 17:11:09",""
"8730927","Convert python long/int to fixed size byte array","I'm trying to implement RC4 and DH key exchange in python. Problem is that I have no idea about how to convert the python long/int from the key exchange to the byte array I need for the RC4 implementation. Is there a simple way to convert a long to the required length byte array?
Update: forgot to mention that the numbers I'm dealing with are 768 bit unsigned integers.
","Everyone has overcomplicated this answer:
some_int = <256 bit integer>
some_bytes = some_int.to_bytes(32, sys.byteorder)
my_bytearray = bytearray(some_bytes)

You just need to know the number of bytes that you are trying to convert. In my use cases, normally I only use this large of numbers for crypto, and at that point I have to worry about modulus and what-not, so I don't think this is a big problem to be required to know the max number of bytes to return.
Since you are doing it as 768-bit math, then instead of 32 as the argument it would be 96.
","81465","<python><bytearray><long-integer><diffie-hellman><rc4-cipher>","39","13","10","2019-03-06 02:09:10","14527004","2","10","21234","","2012-05-05 16:16:07","2012-01-04 17:11:09",""
"8730927","Convert python long/int to fixed size byte array","I'm trying to implement RC4 and DH key exchange in python. Problem is that I have no idea about how to convert the python long/int from the key exchange to the byte array I need for the RC4 implementation. Is there a simple way to convert a long to the required length byte array?
Update: forgot to mention that the numbers I'm dealing with are 768 bit unsigned integers.
","Python 2.7 does not implement the int.to- very slow_bytes() method.
I tried 3 methods:

hex unpack/pack : very slow
byte shifting 8 bits at a time: significantly faster.
using a ""C"" module and packing into the lower (7 ia64 or 3 i32) bytes.
This was about twice as fast as 2/ . It is the fastest option, but still too slow.

All these methods are very inefficient for two reasons: 

Python 2.7 does not support this useful operation.
c does not support extended precision arithmetic using the carry/borrow/overflow flags available on most platforms.

","81465","<python><bytearray><long-integer><diffie-hellman><rc4-cipher>","39","2","10","2019-03-06 02:09:10","14527004","2","10","21234","","2012-05-05 16:16:07","2012-01-04 17:11:09",""
"8730927","Convert python long/int to fixed size byte array","I'm trying to implement RC4 and DH key exchange in python. Problem is that I have no idea about how to convert the python long/int from the key exchange to the byte array I need for the RC4 implementation. Is there a simple way to convert a long to the required length byte array?
Update: forgot to mention that the numbers I'm dealing with are 768 bit unsigned integers.
","i = 0x12345678
s = struct.pack('<I',i)
b = struct.unpack('BBBB',s)

","81465","<python><bytearray><long-integer><diffie-hellman><rc4-cipher>","39","0","10","2019-03-06 02:09:10","14527004","2","10","21234","","2012-05-05 16:16:07","2012-01-04 17:11:09",""
"10471009","How does the man in the middle attack work in Diffie–Hellman?","I'm having doubts about the mechanics of a man in the middle attack during a Diffie–Hellman key exchange. I have heard that it can happen during the key agreement communication. But in the presence of CA (Certificate Authority) the receiver can authenticate the sender as he received the sender's public key. Therefore, how is a man in the middle attack possible?
","I think you're confusing the basic Diffe-Hellman, which is a key exchange protocol, with the 'authenticated version' which uses a certificate authority (CA).
Nice explanation of how the basic Diffe-Hellman is vulnerable to man-in-the-middle from RSA Labs.

""The Diffie-Hellman key exchange is vulnerable to a man-in-the-middle
  attack. In this attack, an opponent Carol intercepts Alice's public
  value and sends her own public value to Bob. When Bob transmits his
  public value, Carol substitutes it with her own and sends it to Alice.
  Carol and Alice thus agree on one shared key and Carol and Bob agree
  on another shared key. After this exchange, Carol simply decrypts any
  messages sent out by Alice or Bob, and then reads and possibly
  modifies them before re-encrypting with the appropriate key and
  transmitting them to the other party. This vulnerability is present
  because Diffie-Hellman key exchange does not authenticate the
  participants. Possible solutions include the use of digital signatures
  and other protocol variants.""

and it follows with the authenticated version, also known as the Station-to-Station protocol:

""Roughly speaking, the basic idea is as follows. Prior to execution of
  the protocol, the two parties Alice and Bob each obtain a
  public/private key pair and a certificate for the public key. During
  the protocol, Alice computes a signature on certain messages, covering
  the public value ga mod p. Bob proceeds in a similar way. Even though
  Carol is still able to intercept messages between Alice and Bob, she
  cannot forge signatures without Alice's private key and Bob's private
  key. Hence, the enhanced protocol defeats the man-in-the-middle
  attack.""

So the basic version is susceptible to a man-in-the-middle attack, the authenticated version that uses public key certificates is not.
","55469","<public-key-encryption><diffie-hellman>","26","73","2","2018-08-12 22:54:03","10496684","0","9","104223","","2012-05-25 12:34:20","2012-05-06 13:48:18",""
"10471009","How does the man in the middle attack work in Diffie–Hellman?","I'm having doubts about the mechanics of a man in the middle attack during a Diffie–Hellman key exchange. I have heard that it can happen during the key agreement communication. But in the presence of CA (Certificate Authority) the receiver can authenticate the sender as he received the sender's public key. Therefore, how is a man in the middle attack possible?
","This is how Diffie-Hellman works:

And this is how the man-in-the-middle attack works in Diffie-Hellman:

There are two D-H key exchange, Alice and Attacker share the same key with k1, while Bob and Attacker share the other same key with k2. 
Because Alice and Bob had no prior knowledge of each other. 
But the Attacker must keep listening and forwarding.  
","55469","<public-key-encryption><diffie-hellman>","26","26","2","2018-08-12 22:54:03","10496684","0","9","104223","","2012-05-25 12:34:20","2012-05-06 13:48:18",""
"14034508","DH vs. DHE and ECDHE and perfect forward secrecy","Does Diffie-Hellman (DH) provide perfect forward secrecy? or is it a feature for Ephemeral Diffie-Hellman (DHE) only ?
Is Elliptic Curve Ephemeral diffie-Hellman (ECDHE) is better than DHE ? 
","It's the ephemeral aspect of DHE and ECDHE that provides perfect forward secrecy.
The idea is that even if someone records traffic and compromises the server to get its private key, they won't be able to decipher that traffic, because they'll be missing the ephemeral DH parameters that won't have been saved. With fixed DH, the private DH parameters are effectively the private key: they would also be compromised in the same way and allow the attacker to decipher past traffic too.
(Note that support for fixed DH, non-anonymous cipher suites is quite rare in practice anyway.)
The perfect forward secrecy offered by DHE comes at a price: more computation. The ECDHE variants uses elliptic curve cryptography to reduce this computational cost. You may find further details and benchmarks in Vincent Bernat's SSL/TLS & Perfect Forward Secrecy article.
","41788","<ssl><public-key-encryption><diffie-hellman>","37","44","1","2012-12-26 13:08:41","14041040","0","16","1810868","","2012-12-25 23:41:22","2012-12-25 22:43:05",""
"30931692","Diffie-Hellman public key error with Tomcat 7","I successfully set up two Ubuntu machines with Tomcat and SSL certificates. 
I followed exactly the same procedure with Centos 6, but I'm getting this when I'm trying to connect to the Server (using Opera):

Server has a weak, ephemeral Diffie-Hellman public key

The connector is the following, and there are no errors in catalina.log:
<Connector port=""some port number""  
           protocol=""org.apache.coyote.http11.Http11Protocol"" 
           SSLEnabled=""true""
           maxThreads=""150"" scheme=""https"" secure=""true""
           clientAuth=""false"" sslProtocol=""TLS""
           keystoreFile=""path to jks""
           keystoreType=""JKS""
           keystorePass=""mypass1""
           keyPass=""mypass2""  /> 

With Firefox, I get the untrusted communication error.
","For me it worked after adding a list of allowed ciphers to the Tomcat configuration in conf/server.xml to disable the weak Diffie-Hellman ciphers:
    <Connector
        ...
        ciphers=""TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA""
        ...

","31987","<tomcat><ssl><centos><certificate><diffie-hellman>","14","30","5","2015-11-24 09:40:29","31044451","0","5","4996088","","2015-06-19 06:58:09","2015-06-19 06:48:09",""
"30931692","Diffie-Hellman public key error with Tomcat 7","I successfully set up two Ubuntu machines with Tomcat and SSL certificates. 
I followed exactly the same procedure with Centos 6, but I'm getting this when I'm trying to connect to the Server (using Opera):

Server has a weak, ephemeral Diffie-Hellman public key

The connector is the following, and there are no errors in catalina.log:
<Connector port=""some port number""  
           protocol=""org.apache.coyote.http11.Http11Protocol"" 
           SSLEnabled=""true""
           maxThreads=""150"" scheme=""https"" secure=""true""
           clientAuth=""false"" sslProtocol=""TLS""
           keystoreFile=""path to jks""
           keystoreType=""JKS""
           keystorePass=""mypass1""
           keyPass=""mypass2""  /> 

With Firefox, I get the untrusted communication error.
","It works with Google Chrome ver.44 and Thanks to Jason Scroggins for suggesting:

In a new tab, type or paste about:config in the address bar and press Enter. Click the button promising to be careful.
In the search box above the list, type or paste dhe and pause while the list is filtered.
Double-click the security.ssl3.dhe_rsa_aes_128_sha preference to switch it from true to false (disable Firefox from using this cipher).
Double-click the security.ssl3.dhe_rsa_aes_256_sha preference to switch it from true to false (disable Firefox from using this cipher).

","31987","<tomcat><ssl><centos><certificate><diffie-hellman>","14","2","5","2015-11-24 09:40:29","31044451","0","5","4996088","","2015-06-19 06:58:09","2015-06-19 06:48:09",""
"30931692","Diffie-Hellman public key error with Tomcat 7","I successfully set up two Ubuntu machines with Tomcat and SSL certificates. 
I followed exactly the same procedure with Centos 6, but I'm getting this when I'm trying to connect to the Server (using Opera):

Server has a weak, ephemeral Diffie-Hellman public key

The connector is the following, and there are no errors in catalina.log:
<Connector port=""some port number""  
           protocol=""org.apache.coyote.http11.Http11Protocol"" 
           SSLEnabled=""true""
           maxThreads=""150"" scheme=""https"" secure=""true""
           clientAuth=""false"" sslProtocol=""TLS""
           keystoreFile=""path to jks""
           keystoreType=""JKS""
           keystorePass=""mypass1""
           keyPass=""mypass2""  /> 

With Firefox, I get the untrusted communication error.
","This is due to the fact that new browser versions have started to either issue warning/errors when accessing web sites which are configured with weak DH ciphers for SSL. For more information about issue follow below links
https://weakdh.org
logjam issue 
To fix this either you can find a way around this at browser side or server side. Servers side is the best as it will fix the issue for all users , if they are accessing server from different browsers/locations. 
Fix the issue we have to make sure our server (in this case tomcat) use strong ciphers for SSL.
In tomcat, there are two different implementations of SSL. Defautl is JSSE implementation provided as part of the Java runtime. Other being APR implementation, which uses the OpenSSL engine by default. 
JSSE since it's dependent on the Java runtime, we have to first find out which Java version we are using with tomcat. Tomcat 7 supports java 1.6 upwards. Then we have to find the respective cipher suites supported by relevant java version of JSSE. Weak ones are which which has 'DHE', so pick ones which does not contain 'DHE'. Few of stronger suites for java 1.6 JSSE is listed below. 
TLS_RSA_WITH_AES_128_CBC_SHA
TLS_RSA_WITH_AES_256_CBC_SHA
TLS_ECDH_ECDSA_WITH_RC4_128_SHA
TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA
TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA
TLS_ECDH_RSA_WITH_RC4_128_SHA
TLS_ECDH_RSA_WITH_AES_128_CBC_SHA
TLS_ECDH_RSA_WITH_AES_256_CBC_SHA
TLS_ECDHE_ECDSA_WITH_RC4_128_SHA
TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
TLS_ECDHE_RSA_WITH_RC4_128_SHA
TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA
TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA
TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA
TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA
TLS_ECDH_ECDSA_WITH_NULL_SHA
TLS_ECDH_RSA_WITH_NULL_SHA
TLS_ECDHE_ECDSA_WITH_NULL_SHA
TLS_ECDHE_RSA_WITH_NULL_SHA
...

Compile a list of strong cipher suits and add it to the connector ciphers in conf/server.xml in your tomcat
<Connector
...
ciphers=""TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_ECDH_ECDSA_WITH_RC4_128_SHA,TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDH_RSA_WITH_RC4_128_SHA,TLS_ECDH_RSA_WITH_AES_128_CBC_SHA,TLS_ECDH_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_RC4_128_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_RC4_128_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDH_ECDSA_WITH_NULL_SHA,TLS_ECDH_RSA_WITH_NULL_SHA,TLS_ECDHE_ECDSA_WITH_NULL_SHA,TLS_ECDHE_RSA_WITH_NULL_SHA""
...
/>

Restart the server and error/warning should go away. Remember if Java version is different copy/pasting above might not work. So refer to correct version and supported cipher suites.
Note: To be able to use the 256 bit AES Ciphers, it is necessary to install the JCE Unlimited Strength Jurisdiction Policy Files
If Tomcat is configured to use APR instead of JSSE, above configuration will not work. You can enable strong cipher suites by following tomcat ssl configuration guide for APR  and logjam admin guide .
","31987","<tomcat><ssl><centos><certificate><diffie-hellman>","14","7","5","2015-11-24 09:40:29","31044451","0","5","4996088","","2015-06-19 06:58:09","2015-06-19 06:48:09",""
"30931692","Diffie-Hellman public key error with Tomcat 7","I successfully set up two Ubuntu machines with Tomcat and SSL certificates. 
I followed exactly the same procedure with Centos 6, but I'm getting this when I'm trying to connect to the Server (using Opera):

Server has a weak, ephemeral Diffie-Hellman public key

The connector is the following, and there are no errors in catalina.log:
<Connector port=""some port number""  
           protocol=""org.apache.coyote.http11.Http11Protocol"" 
           SSLEnabled=""true""
           maxThreads=""150"" scheme=""https"" secure=""true""
           clientAuth=""false"" sslProtocol=""TLS""
           keystoreFile=""path to jks""
           keystoreType=""JKS""
           keystorePass=""mypass1""
           keyPass=""mypass2""  /> 

With Firefox, I get the untrusted communication error.
","For me,It was the issue of java version being used by tomcat.
I changed the version from JDK 6 to JDK 1.7_080 and the error vanished.
When I said I changed the JAVA version,I meant I modified the environment variable ""JAVA_HOME"".
","31987","<tomcat><ssl><centos><certificate><diffie-hellman>","14","0","5","2015-11-24 09:40:29","31044451","0","5","4996088","","2015-06-19 06:58:09","2015-06-19 06:48:09",""
"30931692","Diffie-Hellman public key error with Tomcat 7","I successfully set up two Ubuntu machines with Tomcat and SSL certificates. 
I followed exactly the same procedure with Centos 6, but I'm getting this when I'm trying to connect to the Server (using Opera):

Server has a weak, ephemeral Diffie-Hellman public key

The connector is the following, and there are no errors in catalina.log:
<Connector port=""some port number""  
           protocol=""org.apache.coyote.http11.Http11Protocol"" 
           SSLEnabled=""true""
           maxThreads=""150"" scheme=""https"" secure=""true""
           clientAuth=""false"" sslProtocol=""TLS""
           keystoreFile=""path to jks""
           keystoreType=""JKS""
           keystorePass=""mypass1""
           keyPass=""mypass2""  /> 

With Firefox, I get the untrusted communication error.
","Add this into the server.xml file and restart the server 
<Connector port=""8443"" protocol=""HTTP/1.1"" SSLEnabled=""true""
       maxThreads=""150"" scheme=""https"" secure=""true""
       keystoreFile=""keystorePath""
       keystorePass=""keystorepass""
       ciphers=""TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA""
       clientAuth=""false"" sslProtocol=""TLS""/>

Try to browse with https://localhost:8443
","31987","<tomcat><ssl><centos><certificate><diffie-hellman>","14","2","5","2015-11-24 09:40:29","31044451","0","5","4996088","","2015-06-19 06:58:09","2015-06-19 06:48:09",""
"4413023","AES encryption: InvalidKeyException: Key length not 128/192/256 bits","I'm trying to encrypt a string on Android with AES. The symmetric key is determined previously with the Diffie-Hellman algorithm and seems to be ok (Key Length is 128 Bit, see below).
Nevertheless, I get a  InvalidKeyException: ""Key length not 128/192/256 bits.""
Code:
KeyAgreement keyAgree = KeyAgreement.getInstance(""DH"", ""BC"");
keyAgree.init(this.smartphonePrivKey);
keyAgree.doPhase(serverPubKey, true);
SecretKey key = keyAgree.generateSecret(""AES"");
System.out.println(""Key Length: "" + key.getEncoded().length);
System.out.println(""Key Algorithm: ""+ key.getAlgorithm());
System.out.println(""Key Format: ""+ key.getFormat());

byte[] encrypted = null;
  Cipher cipher;
  try {
   cipher = Cipher.getInstance(""AES/ECB/PKCS5Padding"");
   System.out.println(""Allowed Key Length: ""
     + cipher.getMaxAllowedKeyLength(""AES""));
   cipher.init(Cipher.ENCRYPT_MODE, key);
   encrypted = cipher.doFinal(""YEAH"".getBytes(""UTF8""));
  } catch (NoSuchAlgorithmException e) {
   e.printStackTrace();
  } catch (NoSuchPaddingException e) {
   e.printStackTrace();
  } catch (InvalidKeyException e) {
   e.printStackTrace();
  } catch (IllegalBlockSizeException e) {
   e.printStackTrace();
  } catch (BadPaddingException e) {
   e.printStackTrace();
  } catch (UnsupportedEncodingException e) {
   e.printStackTrace();
  }

The above Code leads to the following output:  
_12-10 20:24:53.119: INFO/System.out(757): Key Length: 128_  
_12-10 20:24:53.119: INFO/System.out(757): Key Algorithm: AES_   
_12-10 20:24:53.119: INFO/System.out(757): Key Format: RAW_  
_12-10 20:24:53.470: INFO/System.out(757): Allowed Key Length: 2147483647_ 

After that, I get the InvalidKeyException: Key length not 128/192/256 bits. But as you can see, the SecretKey has a length of 128 Bits!  
Any ideas?
","The key you generated is 128 bytes, not 128 bits. ""Key Length"" should be 16.
","20039","<android><encryption><aes><diffie-hellman>","13","24","2","2017-11-02 17:15:30","4413290","0","5","663604","","2017-11-02 17:15:30","2010-12-10 20:29:52",""
"4413023","AES encryption: InvalidKeyException: Key length not 128/192/256 bits","I'm trying to encrypt a string on Android with AES. The symmetric key is determined previously with the Diffie-Hellman algorithm and seems to be ok (Key Length is 128 Bit, see below).
Nevertheless, I get a  InvalidKeyException: ""Key length not 128/192/256 bits.""
Code:
KeyAgreement keyAgree = KeyAgreement.getInstance(""DH"", ""BC"");
keyAgree.init(this.smartphonePrivKey);
keyAgree.doPhase(serverPubKey, true);
SecretKey key = keyAgree.generateSecret(""AES"");
System.out.println(""Key Length: "" + key.getEncoded().length);
System.out.println(""Key Algorithm: ""+ key.getAlgorithm());
System.out.println(""Key Format: ""+ key.getFormat());

byte[] encrypted = null;
  Cipher cipher;
  try {
   cipher = Cipher.getInstance(""AES/ECB/PKCS5Padding"");
   System.out.println(""Allowed Key Length: ""
     + cipher.getMaxAllowedKeyLength(""AES""));
   cipher.init(Cipher.ENCRYPT_MODE, key);
   encrypted = cipher.doFinal(""YEAH"".getBytes(""UTF8""));
  } catch (NoSuchAlgorithmException e) {
   e.printStackTrace();
  } catch (NoSuchPaddingException e) {
   e.printStackTrace();
  } catch (InvalidKeyException e) {
   e.printStackTrace();
  } catch (IllegalBlockSizeException e) {
   e.printStackTrace();
  } catch (BadPaddingException e) {
   e.printStackTrace();
  } catch (UnsupportedEncodingException e) {
   e.printStackTrace();
  }

The above Code leads to the following output:  
_12-10 20:24:53.119: INFO/System.out(757): Key Length: 128_  
_12-10 20:24:53.119: INFO/System.out(757): Key Algorithm: AES_   
_12-10 20:24:53.119: INFO/System.out(757): Key Format: RAW_  
_12-10 20:24:53.470: INFO/System.out(757): Allowed Key Length: 2147483647_ 

After that, I get the InvalidKeyException: Key length not 128/192/256 bits. But as you can see, the SecretKey has a length of 128 Bits!  
Any ideas?
","This exception basically occur due to length of key that you hava passed for encryption.If you are using AES encryption then the number of characters must be in length of 128/192/256 bits.
For example you can use the key of 16 character,24 character or 32 character.
String encrypted_data=AES.encrypt(""HELLO"",""ASDFGHJKLASDFGHJ"");

Hope this help...
","20039","<android><encryption><aes><diffie-hellman>","13","7","2","2017-11-02 17:15:30","4413290","0","5","663604","","2017-11-02 17:15:30","2010-12-10 20:29:52",""
"22479508","Java Diffie-Hellman key exchange","I'm trying to execute code to perform the Diffie-Hellman key exchange. I sourced the code from an example online (forget where now).
I had to import the bouncycastle.jar, which I assumed worked up until execution.

my code:
package testproject;

import java.math.BigInteger;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.SecureRandom;
import java.security.Security;
import javax.crypto.KeyAgreement;
import javax.crypto.spec.DHParameterSpec;

public class KeyGen {

  private static BigInteger g512 = new BigInteger(""1234567890"", 16);
  //generates a random, non-negative integer for Base

  private static BigInteger p512 = new BigInteger(""1234567890"", 16);
  //generates a random, non-negative integer for Prime

  public static void main(String[] args) throws Exception {
    Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
    DHParameterSpec dhParams = new DHParameterSpec(p512, g512);
    //Specify parameters to use for the algorithm
    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""DH"", ""BC"");
    //Define specific algorithm to use ""diffie-hellman"", with provider ""bc""

    keyGen.initialize(dhParams, new SecureRandom());
    //initialize with parameters & secure random seed

    KeyAgreement aKeyAgree = KeyAgreement.getInstance(""DH"", ""BC"");
    //define algorithm for A's key agreement
    KeyPair aPair = keyGen.generateKeyPair();
    //generate keyPair for A

    KeyAgreement bKeyAgree = KeyAgreement.getInstance(""DH"", ""BC"");
    //define algorithm for B's key agreement
    KeyPair bPair = keyGen.generateKeyPair();
    //generate keyPair for B

    aKeyAgree.init(aPair.getPrivate());
    //initialize A's keyAgreement with A's private key
    bKeyAgree.init(bPair.getPrivate());
    //initialize B's keyAgreement with B's private key

    aKeyAgree.doPhase(bPair.getPublic(), true);
    //do last phase of A's keyAgreement with B's public key
    bKeyAgree.doPhase(aPair.getPublic(), true);
    //do last phase of B's keyAgreement with A's public key

    MessageDigest hash = MessageDigest.getInstance(""SHA1"", ""BC"");

    System.out.println(new String(hash.digest(aKeyAgree.generateSecret())));
    //generate secret key for A, hash it.
    System.out.println(new String(hash.digest(bKeyAgree.generateSecret())));
    //generate secret key for B, hash it.
  }
}

This is the line causing the problem:
KeyPair aPair = keyGen.generateKeyPair();

I'm confused as to what the error is, as I've found each of the methods it's returning 'unknown source' for.
Any light shed on this would be much appreciated.
Continued(Edit):
Java - Diffie-Hellman Encryption - Wrong Output
","This comment is simply wrong:
private static BigInteger g512 = new BigInteger(""1234567890"", 16);
//generates a random, non-negative integer for Base

All you are doing there is creating the number 0x1234567890 every time.  There is nothing random about it.
It looks like you copied from http://www.java2s.com/Tutorial/Java/0490__Security/DiffieHellmanKeyAgreement.htm.  As this answer agrees, the code there does not make sense.
You could try the actual key exchange example on that site.
","13466","<java><bouncycastle><diffie-hellman>","5","4","3","2019-02-25 14:53:00","","0","3","-1","","2017-05-23 11:54:07","2014-03-18 12:32:33",""
"22479508","Java Diffie-Hellman key exchange","I'm trying to execute code to perform the Diffie-Hellman key exchange. I sourced the code from an example online (forget where now).
I had to import the bouncycastle.jar, which I assumed worked up until execution.

my code:
package testproject;

import java.math.BigInteger;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.SecureRandom;
import java.security.Security;
import javax.crypto.KeyAgreement;
import javax.crypto.spec.DHParameterSpec;

public class KeyGen {

  private static BigInteger g512 = new BigInteger(""1234567890"", 16);
  //generates a random, non-negative integer for Base

  private static BigInteger p512 = new BigInteger(""1234567890"", 16);
  //generates a random, non-negative integer for Prime

  public static void main(String[] args) throws Exception {
    Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
    DHParameterSpec dhParams = new DHParameterSpec(p512, g512);
    //Specify parameters to use for the algorithm
    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""DH"", ""BC"");
    //Define specific algorithm to use ""diffie-hellman"", with provider ""bc""

    keyGen.initialize(dhParams, new SecureRandom());
    //initialize with parameters & secure random seed

    KeyAgreement aKeyAgree = KeyAgreement.getInstance(""DH"", ""BC"");
    //define algorithm for A's key agreement
    KeyPair aPair = keyGen.generateKeyPair();
    //generate keyPair for A

    KeyAgreement bKeyAgree = KeyAgreement.getInstance(""DH"", ""BC"");
    //define algorithm for B's key agreement
    KeyPair bPair = keyGen.generateKeyPair();
    //generate keyPair for B

    aKeyAgree.init(aPair.getPrivate());
    //initialize A's keyAgreement with A's private key
    bKeyAgree.init(bPair.getPrivate());
    //initialize B's keyAgreement with B's private key

    aKeyAgree.doPhase(bPair.getPublic(), true);
    //do last phase of A's keyAgreement with B's public key
    bKeyAgree.doPhase(aPair.getPublic(), true);
    //do last phase of B's keyAgreement with A's public key

    MessageDigest hash = MessageDigest.getInstance(""SHA1"", ""BC"");

    System.out.println(new String(hash.digest(aKeyAgree.generateSecret())));
    //generate secret key for A, hash it.
    System.out.println(new String(hash.digest(bKeyAgree.generateSecret())));
    //generate secret key for B, hash it.
  }
}

This is the line causing the problem:
KeyPair aPair = keyGen.generateKeyPair();

I'm confused as to what the error is, as I've found each of the methods it's returning 'unknown source' for.
Any light shed on this would be much appreciated.
Continued(Edit):
Java - Diffie-Hellman Encryption - Wrong Output
","Instead of the code:
private static BigInteger g512 = new BigInteger(""1234567890"", 16);
   //generates a random, non-negative integer for Base

   private static BigInteger p512 = new BigInteger(""1234567890"", 16);
   //generates a random, non-negative integer for Prime

you need to use:
// The base used with the SKIP 1024 bit modulus
private static final BigInteger g512 = BigInteger.valueOf(2);

// The 1024 bit Diffie-Hellman modulus values used by SKIP
private static final byte skip1024ModulusBytes[] = { (byte) 0xF4,
    (byte) 0x88, (byte) 0xFD, (byte) 0x58, (byte) 0x4E, (byte) 0x49,
    (byte) 0xDB, (byte) 0xCD, (byte) 0x20, (byte) 0xB4, (byte) 0x9D,
    (byte) 0xE4, (byte) 0x91, (byte) 0x07, (byte) 0x36, (byte) 0x6B,
    (byte) 0x33, (byte) 0x6C, (byte) 0x38, (byte) 0x0D, (byte) 0x45,
    (byte) 0x1D, (byte) 0x0F, (byte) 0x7C, (byte) 0x88, (byte) 0xB3,
    (byte) 0x1C, (byte) 0x7C, (byte) 0x5B, (byte) 0x2D, (byte) 0x8E,
    (byte) 0xF6, (byte) 0xF3, (byte) 0xC9, (byte) 0x23, (byte) 0xC0,
    (byte) 0x43, (byte) 0xF0, (byte) 0xA5, (byte) 0x5B, (byte) 0x18,
    (byte) 0x8D, (byte) 0x8E, (byte) 0xBB, (byte) 0x55, (byte) 0x8C,
    (byte) 0xB8, (byte) 0x5D, (byte) 0x38, (byte) 0xD3, (byte) 0x34,
    (byte) 0xFD, (byte) 0x7C, (byte) 0x17, (byte) 0x57, (byte) 0x43,
    (byte) 0xA3, (byte) 0x1D, (byte) 0x18, (byte) 0x6C, (byte) 0xDE,
    (byte) 0x33, (byte) 0x21, (byte) 0x2C, (byte) 0xB5, (byte) 0x2A,
    (byte) 0xFF, (byte) 0x3C, (byte) 0xE1, (byte) 0xB1, (byte) 0x29,
    (byte) 0x40, (byte) 0x18, (byte) 0x11, (byte) 0x8D, (byte) 0x7C,
    (byte) 0x84, (byte) 0xA7, (byte) 0x0A, (byte) 0x72, (byte) 0xD6,
    (byte) 0x86, (byte) 0xC4, (byte) 0x03, (byte) 0x19, (byte) 0xC8,
    (byte) 0x07, (byte) 0x29, (byte) 0x7A, (byte) 0xCA, (byte) 0x95,
    (byte) 0x0C, (byte) 0xD9, (byte) 0x96, (byte) 0x9F, (byte) 0xAB,
    (byte) 0xD0, (byte) 0x0A, (byte) 0x50, (byte) 0x9B, (byte) 0x02,
    (byte) 0x46, (byte) 0xD3, (byte) 0x08, (byte) 0x3D, (byte) 0x66,
    (byte) 0xA4, (byte) 0x5D, (byte) 0x41, (byte) 0x9F, (byte) 0x9C,
    (byte) 0x7C, (byte) 0xBD, (byte) 0x89, (byte) 0x4B, (byte) 0x22,
    (byte) 0x19, (byte) 0x26, (byte) 0xBA, (byte) 0xAB, (byte) 0xA2,
    (byte) 0x5E, (byte) 0xC3, (byte) 0x55, (byte) 0xE9, (byte) 0x2F,
    (byte) 0x78, (byte) 0xC7 };

// The SKIP 1024 bit modulus
private static final BigInteger p512 = new BigInteger(1, skip1024ModulusBytes);

","13466","<java><bouncycastle><diffie-hellman>","5","0","3","2019-02-25 14:53:00","","0","3","-1","","2017-05-23 11:54:07","2014-03-18 12:32:33",""
"22479508","Java Diffie-Hellman key exchange","I'm trying to execute code to perform the Diffie-Hellman key exchange. I sourced the code from an example online (forget where now).
I had to import the bouncycastle.jar, which I assumed worked up until execution.

my code:
package testproject;

import java.math.BigInteger;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.SecureRandom;
import java.security.Security;
import javax.crypto.KeyAgreement;
import javax.crypto.spec.DHParameterSpec;

public class KeyGen {

  private static BigInteger g512 = new BigInteger(""1234567890"", 16);
  //generates a random, non-negative integer for Base

  private static BigInteger p512 = new BigInteger(""1234567890"", 16);
  //generates a random, non-negative integer for Prime

  public static void main(String[] args) throws Exception {
    Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
    DHParameterSpec dhParams = new DHParameterSpec(p512, g512);
    //Specify parameters to use for the algorithm
    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""DH"", ""BC"");
    //Define specific algorithm to use ""diffie-hellman"", with provider ""bc""

    keyGen.initialize(dhParams, new SecureRandom());
    //initialize with parameters & secure random seed

    KeyAgreement aKeyAgree = KeyAgreement.getInstance(""DH"", ""BC"");
    //define algorithm for A's key agreement
    KeyPair aPair = keyGen.generateKeyPair();
    //generate keyPair for A

    KeyAgreement bKeyAgree = KeyAgreement.getInstance(""DH"", ""BC"");
    //define algorithm for B's key agreement
    KeyPair bPair = keyGen.generateKeyPair();
    //generate keyPair for B

    aKeyAgree.init(aPair.getPrivate());
    //initialize A's keyAgreement with A's private key
    bKeyAgree.init(bPair.getPrivate());
    //initialize B's keyAgreement with B's private key

    aKeyAgree.doPhase(bPair.getPublic(), true);
    //do last phase of A's keyAgreement with B's public key
    bKeyAgree.doPhase(aPair.getPublic(), true);
    //do last phase of B's keyAgreement with A's public key

    MessageDigest hash = MessageDigest.getInstance(""SHA1"", ""BC"");

    System.out.println(new String(hash.digest(aKeyAgree.generateSecret())));
    //generate secret key for A, hash it.
    System.out.println(new String(hash.digest(bKeyAgree.generateSecret())));
    //generate secret key for B, hash it.
  }
}

This is the line causing the problem:
KeyPair aPair = keyGen.generateKeyPair();

I'm confused as to what the error is, as I've found each of the methods it's returning 'unknown source' for.
Any light shed on this would be much appreciated.
Continued(Edit):
Java - Diffie-Hellman Encryption - Wrong Output
","You already preferred bouncycastle version. But I implemented a little helloworld version of it for learning purposes. Maybe it can be helpful for those who simply wants to use Diffie-Hellman in pure Java without dependencies:
// 1. ------------------------------------------------------------------
// This is Alice and Bob
// Alice and Bob want to chat securely. But how?

final Person alice = new Person();
final Person bob   = new Person();

//    ?                                        ?
//
//    O                                        O
//   /|\                                      /|\
//   / \                                      / \
//
//  ALICE                                     BOB

// 2. ------------------------------------------------------------------
// Alice and Bob generate public and private keys.

alice.generateKeys();
bob.generateKeys();

//
//    O                                        O
//   /|\                                      /|\
//   / \                                      / \
//
//  ALICE                                     BOB
//  _ PUBLIC KEY                              _ PUBLIC KEY
//  _ PRIVATE KEY                             _ PRIVATE KEY

// 3. ------------------------------------------------------------------
// Alice and Bob exchange public keys with each other.

alice.receivePublicKeyFrom(bob);
bob.receivePublicKeyFrom(alice);

//
//    O                                        O
//   /|\                                      /|\
//   / \                                      / \
//
//  ALICE                                     BOB
//  + public key                              + public key
//  + private key                             + private key
//  _ PUBLIC KEY <------------------------->  _ PUBLIC KEY

// 4. ------------------------------------------------------------------
// Alice generates common secret key via using her private key and Bob's public key.
// Bob generates common secret key via using his private key and Alice's public key.
// Both secret keys are equal without TRANSFERRING. This is the magic of Diffie-Helman algorithm.

alice.generateCommonSecretKey();
bob.generateCommonSecretKey();

//
//    O                                        O
//   /|\                                      /|\
//   / \                                      / \
//
//  ALICE                                     BOB
//  + public key                              + public key
//  + private key                             + private key
//  + public key                              + public key
//  _ SECRET KEY                              _ SECRET KEY

// 5. ------------------------------------------------------------------
// Alice encrypts message using the secret key and sends to Bob

alice.encryptAndSendMessage(""Bob! Guess Who I am."", bob);

//
//    O                                        O
//   /|\ []-------------------------------->  /|\
//   / \                                      / \
//
//  ALICE                                     BOB
//  + public key                              + public key
//  + private key                             + private key
//  + public key                              + public key
//  + secret key                              + secret key
//  + message                                 _ MESSAGE

// 6. ------------------------------------------------------------------
// Bob receives the important message and decrypts with secret key.

bob.whisperTheSecretMessage();

//
//    O                     (((   (((   (((   \O/   )))
//   /|\                                       |
//   / \                                      / \
//
//  ALICE                                     BOB
//  + public key                              + public key
//  + private key                             + private key
//  + public key                              + public key
//  + secret key                              + secret key
//  + message                                 + message

https://github.com/firatkucuk/diffie-hellman-helloworld
","13466","<java><bouncycastle><diffie-hellman>","5","6","3","2019-02-25 14:53:00","","0","3","-1","","2017-05-23 11:54:07","2014-03-18 12:32:33",""
"24502672","How to expand DH key size to 2048 in java 8","I read a lot of posts saying that in java 8 it is possible to expand the DH key size to 2048. They say it is possible from the system property by changing the value of:
jdk.tls.ephemeralDHKeySize to 2048. I tried to figure out where and how to do this and could not find. Where can I find this variable or property? which file? path? I am using windows.
","This is a system property, so you could set it via -Djdk.tls.ephemeralDHKeySize=2048 as a JVM argument or via System.setProperty within the code. (I haven't checked for this property, but some properties are read only once by the library that uses them, and then cached permanently during the execution time of the JVM, so you'd generally want to set that setting early enough if you set it within the code.)
The acceptable values are documented in the JSSE reference guide: ""Customizing Size of Ephemeral Diffie-Hellman Keys"".
","12921","<java><security><ssl><diffie-hellman>","6","10","1","2014-07-01 11:12:30","24508841","0","4","","","","2014-07-01 04:51:55",""
"9833527","Client-side encryption over HTTP with Diffie-Hellman Key Exchange and AES","After watching a YouTube video on the Diffie-Hellman Key Exchange, I wanted to try an implementation in JavaScript (Atwood's law).
I sketched up an cipher on Node.js with the following rules:

Step 1: Client and server agree on a shared key:

Client & server start with a 512bit prime public key pK
Client generates a 512bit prime private key kC and sends powMod(3, kC, pK)
Server generates a 512bit prime private key kS and sends powMod(3, kS, pK)
Client & Server use powMod(response, privatekey, pK) as the shared key

Step 2: Communication

Before a client sends data it is encrypted with the shared key using the Stanford Javascript Crypto Library (256bit AES, HMAC authentication, PBKDF2 password strengthening, and CCM authenticated-encryption.)
Once the server decrypts the data with the shared key, it generates a new 512bit prime private key and sends it as a SJCL encrypted response.
The client and server switch to a new shared key using powMod(3, prevSharedKey, newPrivKey)


Now I have a few questions..
How secure would such a system be in comparison with HTTPS or other algorithms?  What are the weakest points of such a system?
In terms of security / practicality, would it be better to use 1024 bit keys for stronger security?  Are the HMAC/PBKDF2/CCM options overkill?  Is it worth modulating the shared key?  Thanks for reading!
","I've seen questions like this before – this is completely insecure for a number of reasons, foremost of which is the fact that it is impossible for a JavaScript client to verify that the server's key is authentic.
In a nutshell, without SSL, you are vulnerable to man-in-the-middle attacks.  No browser-based JavaScript crypto implementation can overcome this fact.
","12758","<javascript><node.js><encryption><aes><diffie-hellman>","10","8","3","2014-03-28 13:22:08","9833722","0","5","479947","","2012-03-23 06:14:03","2012-03-23 02:50:05",""
"9833527","Client-side encryption over HTTP with Diffie-Hellman Key Exchange and AES","After watching a YouTube video on the Diffie-Hellman Key Exchange, I wanted to try an implementation in JavaScript (Atwood's law).
I sketched up an cipher on Node.js with the following rules:

Step 1: Client and server agree on a shared key:

Client & server start with a 512bit prime public key pK
Client generates a 512bit prime private key kC and sends powMod(3, kC, pK)
Server generates a 512bit prime private key kS and sends powMod(3, kS, pK)
Client & Server use powMod(response, privatekey, pK) as the shared key

Step 2: Communication

Before a client sends data it is encrypted with the shared key using the Stanford Javascript Crypto Library (256bit AES, HMAC authentication, PBKDF2 password strengthening, and CCM authenticated-encryption.)
Once the server decrypts the data with the shared key, it generates a new 512bit prime private key and sends it as a SJCL encrypted response.
The client and server switch to a new shared key using powMod(3, prevSharedKey, newPrivKey)


Now I have a few questions..
How secure would such a system be in comparison with HTTPS or other algorithms?  What are the weakest points of such a system?
In terms of security / practicality, would it be better to use 1024 bit keys for stronger security?  Are the HMAC/PBKDF2/CCM options overkill?  Is it worth modulating the shared key?  Thanks for reading!
","Your system is massively insecure, but I'm not trying to dissuade you or anyone from playing around with stuff like this. You should continue to. But it is vital that you consider anything you create to be a ""toy"" system that should never be considered or advertised as ""secure"".
Let's break down the security question into two parts.

How secure is the key exchange?
How secure is the encryption you use once you've got a shared key?

Let me answer (2) first as that will be the simplest. It will be terribly insecure unless you are smarter than all of the people who've worked on and studied TLS over the years. TLS before version 1.2 (which few sites use) is vulnerable to Chosen Ciphertext Attacks (CCAs) in principle and to the BEAST attack in practice depending on cipher suit choice.  And SSL 2.0 is more badly broken.
The point is that very very smart people, working on these protocols over years, got some things wrong. There is every reason to believe that you are I working on these sorts of things on our own will make huge mistakes. The basic encryption algorithms are fine. They aren't broken. But the protocols are.
So if you haven't studied and fully understood all of the details of SSL, why they are there and how they have gone wrong in some cases, then it is almost certain that any protocol you devise will be terrible.
Now to question (2). There are two issues with this. (a) Diffie-Hellman is not designed to provide the sorts of security you probably need; and (b) I don't think that you've implemented DH correctly. 
2.a:
Diffie-Hellman Key exchange, when done right, is secure for key exchange, but it does nothing for authentication. This is why the question ""is it secure"" is often the wrong question. It is secure for some purposes, but massively insecure for others as it isn't designed for those other purposes.
As Josh3737 pointed out, there is no way for the client and the server to know that they are talking to the right party. If Sam is the server and Charlie is the Client, there is nothing that stops Mallory from setting up her own server that masquerades as Sam. So Cathy can go through the key exchange with Mallory, thinking that she is talking to Sam. Mallory can pretend to be Charlie when talking to Sam.
Once set up this way, Mallory can act as a Man In The Middle between Sam and Charlie. When Charlie sends data intended to Sam, Mallory will decrypt it using the shared key between C and M, read it (and possibly change it), and then re-encrypt it the the shared key between M and S and send that off to S.
To solve the authentication problem, you need some sort of Public Key Infrastructure (PKI) and these are really a pain. The system of Certificate Authorities and such that we have with SSL/TLS is fraught with problems, but it remains the best system out there.
2.b:
A 512 bit public modulus along with 512 bit private keys are not strong enough. DH keys need to be bigger. I wouldn't go with anything less than 2048 bits. You might get away with 1024 bits you aren't worried about someone being able to break today's secrets five years from now.
You didn't give enough information on how your primes were selected. Not every prime will work. You need to use a ""safe prime"" for your modulus, otherwise there are shortcuts available for an attacker to compute the discrete logarithm. 
","12758","<javascript><node.js><encryption><aes><diffie-hellman>","10","16","3","2014-03-28 13:22:08","9833722","0","5","479947","","2012-03-23 06:14:03","2012-03-23 02:50:05",""
"9833527","Client-side encryption over HTTP with Diffie-Hellman Key Exchange and AES","After watching a YouTube video on the Diffie-Hellman Key Exchange, I wanted to try an implementation in JavaScript (Atwood's law).
I sketched up an cipher on Node.js with the following rules:

Step 1: Client and server agree on a shared key:

Client & server start with a 512bit prime public key pK
Client generates a 512bit prime private key kC and sends powMod(3, kC, pK)
Server generates a 512bit prime private key kS and sends powMod(3, kS, pK)
Client & Server use powMod(response, privatekey, pK) as the shared key

Step 2: Communication

Before a client sends data it is encrypted with the shared key using the Stanford Javascript Crypto Library (256bit AES, HMAC authentication, PBKDF2 password strengthening, and CCM authenticated-encryption.)
Once the server decrypts the data with the shared key, it generates a new 512bit prime private key and sends it as a SJCL encrypted response.
The client and server switch to a new shared key using powMod(3, prevSharedKey, newPrivKey)


Now I have a few questions..
How secure would such a system be in comparison with HTTPS or other algorithms?  What are the weakest points of such a system?
In terms of security / practicality, would it be better to use 1024 bit keys for stronger security?  Are the HMAC/PBKDF2/CCM options overkill?  Is it worth modulating the shared key?  Thanks for reading!
","If you want to get around the SSL cert and man in the middle problem, you can use the bitcoin blockchain. (Or an altcoin blockchain.)
The Huge Caveat: the client has to either download or maintain an entire file of the blockchain.
There are two public/private key pairs:
CERTpublic     CERTprivate
CLIENTpublic   CLIENTprivate
NAME REGISTRATION:
Server -> CERTpublic and name_to_register -> Bitcoin Blockchain

AUTHENTICATED CONNECTION:
Client <- CERTpublic <- Bitcoin Blockchain
Client -> CERTpublic(CLIENTpublic) -> Server or Adversary
Client <- No_response_or_incorrect <- Adversary 
Client <- CLIENTpublic(CERTprivate(content)) <- Server

","12758","<javascript><node.js><encryption><aes><diffie-hellman>","10","0","3","2014-03-28 13:22:08","9833722","0","5","479947","","2012-03-23 06:14:03","2012-03-23 02:50:05",""
"1633046","Diffie-Hellman in place of SSL?","Can a Diffie-Hellman key exchange algorithm be used to encrypt client-server communication on a web-page in place of SSL?  If it can, what are the disadvantages (i.e. why does the standard use SSL which requires a certificate authority)?  My understanding is that Diffie-Hellman can be used to secretly establish a shared key which then can be use to encrypt any further communication.
","Actually Diffie-Hellman is a part of SSL.
But one part does not replace others.
From here SSL Diffie-Helman is used for:

This a Diffie-Hellman key exchange in
  which the server's certificate
  contains the Diffie-Hellman public
  parameters signed by the certificate
  authority (CA). That is, the
  public-key certificate contains the
  Diffie-Hellman public-key parameters.
  The client provides its Diffie-Hellman
  public key parameters either in a
  certificate, if client authentication
  is required, or in a key exchange
  message. This method results in a
  fixed secret key between two peers,
  based on the Diffie-Hellman
  calculation using the fixed public
  keys.

","10936","<encryption><ssl><diffie-hellman>","15","9","5","2019-03-28 15:40:55","","0","2","15168","","2009-10-27 19:26:39","2009-10-27 19:13:57",""
"1633046","Diffie-Hellman in place of SSL?","Can a Diffie-Hellman key exchange algorithm be used to encrypt client-server communication on a web-page in place of SSL?  If it can, what are the disadvantages (i.e. why does the standard use SSL which requires a certificate authority)?  My understanding is that Diffie-Hellman can be used to secretly establish a shared key which then can be use to encrypt any further communication.
","The two aren't really comparable. DH is a key-exchange algorithm, nothing more and nothing less. SSL attempts to establish that the server you're connecting to is really who it says it is. To do that, it uses a certificate that can be traced back to somebody you (are supposed to be able to) trust.
DH, by itself, only keeps others from reading the transmitted data. SSL is intended to establish considerably more than that (but can use DH to keep others from reading the stream).
Just for an obvious example, using DH (by itself) a Man in the middle attack is fairly simple. If I can get you to connect to my server instead of the one you intended to, I can use DH to establish a ""secure"" session with you. I then connect to the server you originally intended to. Every packet I get from you, I decrypt, re-encrypt with a key I used to connect to that server, and send on to that server. I do the same with all its response packets. To you, everything looks like it came directly from the original server, and the purchase you made (for example) works just like normal. The only thing that changes is that I also store your credit card number, and when you try to fill your car with fuel the next day, the charge is declined, because in the meantime I've spent all your credit.
The authentication in SSL is at least intended to prevent that from happening. If your browser tried to connect to (for example) www.amazon.com, it should give you a warning if my SSL certificate doesn't specify that it was issued to www.amazon.com -- and a CA shouldn't issue such a certificate to anybody but Amazon.
DH, by itself, doesn't really even guarantee most of what I've said above. By itself, DH is just a way to exchange a key (or, perhaps it could be phrased as ""exchange information necessary for both parties to create identical keys, without ever exchanging the key itself in the clear""). After both parties have the key, they can (and presumably will) use it to encrypt/decrypt data -- but that encryption is actually separate from DH itself.
","10936","<encryption><ssl><diffie-hellman>","15","23","5","2019-03-28 15:40:55","","0","2","15168","","2009-10-27 19:26:39","2009-10-27 19:13:57",""
"1633046","Diffie-Hellman in place of SSL?","Can a Diffie-Hellman key exchange algorithm be used to encrypt client-server communication on a web-page in place of SSL?  If it can, what are the disadvantages (i.e. why does the standard use SSL which requires a certificate authority)?  My understanding is that Diffie-Hellman can be used to secretly establish a shared key which then can be use to encrypt any further communication.
","You can use anonymous Diffie-Hellman key agreement with SSL. This provides privacy on the channel, but no authentication.
Of course, without authentication, you really can't have privacy, because your private channel could be connected to a ""man-in-the-middle"". That's why the anonymous DH cipher suites are discouraged.
If the lack of a certificate is stopping you from using SSL where it's really needed, get a free one from startcom.org.
","10936","<encryption><ssl><diffie-hellman>","15","4","5","2019-03-28 15:40:55","","0","2","15168","","2009-10-27 19:26:39","2009-10-27 19:13:57",""
"1633046","Diffie-Hellman in place of SSL?","Can a Diffie-Hellman key exchange algorithm be used to encrypt client-server communication on a web-page in place of SSL?  If it can, what are the disadvantages (i.e. why does the standard use SSL which requires a certificate authority)?  My understanding is that Diffie-Hellman can be used to secretly establish a shared key which then can be use to encrypt any further communication.
","Diffie-Hellman key exchange is only for keyexchange. It does not give you authenticitation (who you're talking to), you need certificates and a PKI for that.
So yes you can do encryption, but you dont know with who you're talking to
","10936","<encryption><ssl><diffie-hellman>","15","2","5","2019-03-28 15:40:55","","0","2","15168","","2009-10-27 19:26:39","2009-10-27 19:13:57",""
"1633046","Diffie-Hellman in place of SSL?","Can a Diffie-Hellman key exchange algorithm be used to encrypt client-server communication on a web-page in place of SSL?  If it can, what are the disadvantages (i.e. why does the standard use SSL which requires a certificate authority)?  My understanding is that Diffie-Hellman can be used to secretly establish a shared key which then can be use to encrypt any further communication.
","The DH key exchange cannot, of itself, do encryption.  It is used to establish a session key, but not to do the encryption.   So, at this level, the question is mis-stated or reveals either lack of precision or lack of understanding (I suspect precision is the problem this time).
The question is:

Do you want to encrypt data with anybody at all?
Do you want to be sure who you are talking to?

As already pointed out, SSL uses a DH key exchange to establish a session key.  However, it also ensures that the program on the other end is someone you trust (directly or indirectly).  If you don't need to worry about whether the other person is trustworthy, you could just use a simple DH key exchange and then send encrypted data without needing certificates.  But you won't be sure who you are talking to unless you validate that - and the certificates used by SSL etc helps with that validation.
","10936","<encryption><ssl><diffie-hellman>","15","1","5","2019-03-28 15:40:55","","0","2","15168","","2009-10-27 19:26:39","2009-10-27 19:13:57",""
"9953187","How to exploit Diffie-hellman to perform a man in the middle attack","Im doing a project where Alice and Bob send each other messages using the Diffie-Hellman key-exchange. What is throwing me for a loop is how to incorporate the certificate they are using in this so i can obtain their secret messages. 
From what I understand about MIM attakcs, the MIM acts as an imposter as seen on this diagram:

Below are the details for my project. I understand that they both have g and p agreed upon before communicating, but how would I be able to implement this with they both having a certificate to verify their signatures?
Alice prepares ⟨signA(NA, Bob), pkA, certA⟩ where signA is the digital signature algorithm used by Alice, “Bob” is Bob’s name, pkA is the public-key of Alice which equals gx mod p encoded according to X.509 for a fixed g, p as specified in the Diffie-Hellman key- exchange and certA is the certificate of Alice that contains Alice’s public-key that verifies the signature; Finally, NA is a nonce (random string) that is 8 bytes long.
Bob checks Alice's signature, and response with ⟨signB{NA,NB,Alice},pkB,certB⟩. Alice gets the message she checks her nonce NA and calculates the joint key based on pkA, pkB according to the Diffie-Hellman key exchange. Then Alice submits the message ⟨signA{NA,NB,Bob},EK(MA),certA⟩ to Bob and Bobrespondswith⟨SignB{NA,NB,Alice},EK(MB),certB⟩.
where MA and MB are their corresponding secret messages.
","The internet can help!

The Diffie-Hellman key exchange is vulnerable to a man-in-the-middle
  attack. In this attack, an opponent Carol intercepts Alice's public
  value and sends her own public value to Bob. When Bob transmits his
  public value, Carol substitutes it with her own and sends it to Alice.
  Carol and Alice thus agree on one shared key and Carol and Bob agree
  on another shared key. After this exchange, Carol simply decrypts any
  messages sent out by Alice or Bob, and then reads and possibly
  modifies them before re-encrypting with the appropriate key and
  transmitting them to the other party. This vulnerability is present
  because Diffie-Hellman key exchange does not authenticate the
  participants. Possible solutions include the use of digital signatures
  and other protocol variants.

So you have your own value for A, and you just swap the message contents and recompute signatures and forward along.
","9710","<diffie-hellman><man-in-the-middle>","4","4","2","2014-06-02 16:29:53","9953242","0","1","","","","2012-03-31 05:07:51",""
"9953187","How to exploit Diffie-hellman to perform a man in the middle attack","Im doing a project where Alice and Bob send each other messages using the Diffie-Hellman key-exchange. What is throwing me for a loop is how to incorporate the certificate they are using in this so i can obtain their secret messages. 
From what I understand about MIM attakcs, the MIM acts as an imposter as seen on this diagram:

Below are the details for my project. I understand that they both have g and p agreed upon before communicating, but how would I be able to implement this with they both having a certificate to verify their signatures?
Alice prepares ⟨signA(NA, Bob), pkA, certA⟩ where signA is the digital signature algorithm used by Alice, “Bob” is Bob’s name, pkA is the public-key of Alice which equals gx mod p encoded according to X.509 for a fixed g, p as specified in the Diffie-Hellman key- exchange and certA is the certificate of Alice that contains Alice’s public-key that verifies the signature; Finally, NA is a nonce (random string) that is 8 bytes long.
Bob checks Alice's signature, and response with ⟨signB{NA,NB,Alice},pkB,certB⟩. Alice gets the message she checks her nonce NA and calculates the joint key based on pkA, pkB according to the Diffie-Hellman key exchange. Then Alice submits the message ⟨signA{NA,NB,Bob},EK(MA),certA⟩ to Bob and Bobrespondswith⟨SignB{NA,NB,Alice},EK(MB),certB⟩.
where MA and MB are their corresponding secret messages.
","Offering the Wikipedia answer:

In the original description, the Diffie–Hellman exchange by itself
  does not provide authentication of the communicating parties and is
  thus vulnerable to a man-in-the-middle attack. A person in the middle
  may establish two distinct Diffie–Hellman key exchanges, one with
  Alice and the other with Bob, effectively masquerading as Alice to
  Bob, and vice versa, allowing the attacker to decrypt (and read or
  store) then re-encrypt the messages passed between them. 
A method to
  authenticate the communicating parties to each other is generally
  needed to prevent this type of attack. Variants of Diffie-Hellman,
  such as STS, may be used instead to avoid these types of attacks.

You may consider impressing your professor by discussing the variants of Diffie-Hellman that are more secure. For now, given you've noted the original implementation, this will do.
Best of luck!
","9710","<diffie-hellman><man-in-the-middle>","4","6","2","2014-06-02 16:29:53","9953242","0","1","","","","2012-03-31 05:07:51",""
"35228063","Encrypt message for Web Push API in Java","I'm trying to create a server capable of sending push messages using the Push API: https://developer.mozilla.org/en-US/docs/Web/API/Push_API
I've got the client side working but now I want to be able to send messages with a payload from a Java server.
I saw the nodejs web-push example (https://www.npmjs.com/package/web-push) but I couldn't translate that correctly to Java.
I tried following the example to use the DH key exchange found here: http://docs.oracle.com/javase/7/docs/technotes/guides/security/crypto/CryptoSpec.html#DH2Ex
With the help of sheltond below I was able to figure out some code that should be working but isn't. 
When I post the encrypted message to the Push service, I get back the expected 201 status code but the push never reaches Firefox. If I remove the payload and headers and simply send a POST request to the same URL the message successfully arrives in Firefox with no data. I suspect it may have something to do with the way I'm encrypting the data with Cipher.getInstance(""AES/GCM/NoPadding"");
This is the code I'm using currently:
try {
    final byte[] alicePubKeyEnc = Util.fromBase64(""BASE_64_PUBLIC_KEY_FROM_PUSH_SUBSCRIPTION"");
    KeyPairGenerator kpg = KeyPairGenerator.getInstance(""EC"");
    ECGenParameterSpec kpgparams = new ECGenParameterSpec(""secp256r1"");
    kpg.initialize(kpgparams);

    ECParameterSpec params = ((ECPublicKey) kpg.generateKeyPair().getPublic()).getParams();
    final ECPublicKey alicePubKey = fromUncompressedPoint(alicePubKeyEnc, params);
    KeyPairGenerator bobKpairGen = KeyPairGenerator.getInstance(""EC"");
    bobKpairGen.initialize(params);

    KeyPair bobKpair = bobKpairGen.generateKeyPair();
    KeyAgreement bobKeyAgree = KeyAgreement.getInstance(""ECDH"");
    bobKeyAgree.init(bobKpair.getPrivate());


    byte[] bobPubKeyEnc = toUncompressedPoint((ECPublicKey) bobKpair.getPublic());


    bobKeyAgree.doPhase(alicePubKey, true);
    Cipher bobCipher = Cipher.getInstance(""AES/GCM/NoPadding"");
    SecretKey bobDesKey = bobKeyAgree.generateSecret(""AES"");
    byte[] saltBytes = new byte[16];
    new SecureRandom().nextBytes(saltBytes);
    Mac extract = Mac.getInstance(""HmacSHA256"");
    extract.init(new SecretKeySpec(saltBytes, ""HmacSHA256""));
    final byte[] prk = extract.doFinal(bobDesKey.getEncoded());

    // Expand
    Mac expand = Mac.getInstance(""HmacSHA256"");
    expand.init(new SecretKeySpec(prk, ""HmacSHA256""));
    String info = ""Content-Encoding: aesgcm128"";
    expand.update(info.getBytes(StandardCharsets.US_ASCII));
    expand.update((byte) 1);
    final byte[] key_bytes = expand.doFinal();

    // Use the result
    SecretKeySpec key = new SecretKeySpec(key_bytes, 0, 16, ""AES"");
    bobCipher.init(Cipher.ENCRYPT_MODE, key);

    byte[] cleartext = ""{\""this\"":\""is a test that is supposed to be working but it is not\""}"".getBytes();
    byte[] ciphertext = bobCipher.doFinal(cleartext);

    URL url = new URL(""PUSH_ENDPOINT_URL"");
    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
    urlConnection.setRequestMethod(""POST"");
    urlConnection.setRequestProperty(""Content-Length"", ciphertext.length + """");
    urlConnection.setRequestProperty(""Content-Type"", ""application/octet-stream"");
    urlConnection.setRequestProperty(""Encryption-Key"", ""keyid=p256dh;dh="" + Util.toBase64UrlSafe(bobPubKeyEnc));
    urlConnection.setRequestProperty(""Encryption"", ""keyid=p256dh;salt="" + Util.toBase64UrlSafe(saltBytes));
    urlConnection.setRequestProperty(""Content-Encoding"", ""aesgcm128"");
    urlConnection.setDoInput(true);
    urlConnection.setDoOutput(true);
    final OutputStream outputStream = urlConnection.getOutputStream();
    outputStream.write(ciphertext);
    outputStream.flush();
    outputStream.close();
    if (urlConnection.getResponseCode() == 201) {
        String result = Util.readStream(urlConnection.getInputStream());
        Log.v(""PUSH"", ""OK: "" + result);
    } else {
        InputStream errorStream = urlConnection.getErrorStream();
        String error = Util.readStream(errorStream);
        Log.v(""PUSH"", ""Not OK: "" + error);
    }
} catch (Exception e) {
    Log.v(""PUSH"", ""Not OK: "" + e.toString());
}

where ""BASE_64_PUBLIC_KEY_FROM_PUSH_SUBSCRIPTION"" is the key the Push API subscription method in the browser provided and ""PUSH_ENDPOINT_URL"" is the push endpoint the browser provided.
If I get values (ciphertext, base64 bobPubKeyEnc and salt) from a successful nodejs web-push request and hard-code them in Java, it works. If I use the code above with dynamic values it does not work.
I did notice that the ciphertext that worked in the nodejs implementation is always 1 byte bigger then the Java ciphertext with the code above. The example I used here always produces a 81 byte cipher text but in nodejs it's always 82 bytes for example. Does this give us a clue on what might be wrong?
How do I correctly encrypt the payload so that it reaches Firefox?
Thanks in advance for any help
","See https://tools.ietf.org/html/draft-ietf-webpush-encryption-01#section-5 and https://w3c.github.io/push-api/#widl-PushSubscription-getKey-ArrayBuffer-PushEncryptionKeyName-name (point 4).
The key is encoded using the uncompressed format defined in ANSI X9.62, so you can't use x509EncodedKeySpec.
You could use BouncyCastle, that should support the X9.62 encoding.
","7278","<java><encryption><diffie-hellman><push-api>","17","3","4","2016-08-30 08:55:11","36129174","3","10","1002963","","2016-03-03 14:58:17","2016-02-05 15:43:15",""
"35228063","Encrypt message for Web Push API in Java","I'm trying to create a server capable of sending push messages using the Push API: https://developer.mozilla.org/en-US/docs/Web/API/Push_API
I've got the client side working but now I want to be able to send messages with a payload from a Java server.
I saw the nodejs web-push example (https://www.npmjs.com/package/web-push) but I couldn't translate that correctly to Java.
I tried following the example to use the DH key exchange found here: http://docs.oracle.com/javase/7/docs/technotes/guides/security/crypto/CryptoSpec.html#DH2Ex
With the help of sheltond below I was able to figure out some code that should be working but isn't. 
When I post the encrypted message to the Push service, I get back the expected 201 status code but the push never reaches Firefox. If I remove the payload and headers and simply send a POST request to the same URL the message successfully arrives in Firefox with no data. I suspect it may have something to do with the way I'm encrypting the data with Cipher.getInstance(""AES/GCM/NoPadding"");
This is the code I'm using currently:
try {
    final byte[] alicePubKeyEnc = Util.fromBase64(""BASE_64_PUBLIC_KEY_FROM_PUSH_SUBSCRIPTION"");
    KeyPairGenerator kpg = KeyPairGenerator.getInstance(""EC"");
    ECGenParameterSpec kpgparams = new ECGenParameterSpec(""secp256r1"");
    kpg.initialize(kpgparams);

    ECParameterSpec params = ((ECPublicKey) kpg.generateKeyPair().getPublic()).getParams();
    final ECPublicKey alicePubKey = fromUncompressedPoint(alicePubKeyEnc, params);
    KeyPairGenerator bobKpairGen = KeyPairGenerator.getInstance(""EC"");
    bobKpairGen.initialize(params);

    KeyPair bobKpair = bobKpairGen.generateKeyPair();
    KeyAgreement bobKeyAgree = KeyAgreement.getInstance(""ECDH"");
    bobKeyAgree.init(bobKpair.getPrivate());


    byte[] bobPubKeyEnc = toUncompressedPoint((ECPublicKey) bobKpair.getPublic());


    bobKeyAgree.doPhase(alicePubKey, true);
    Cipher bobCipher = Cipher.getInstance(""AES/GCM/NoPadding"");
    SecretKey bobDesKey = bobKeyAgree.generateSecret(""AES"");
    byte[] saltBytes = new byte[16];
    new SecureRandom().nextBytes(saltBytes);
    Mac extract = Mac.getInstance(""HmacSHA256"");
    extract.init(new SecretKeySpec(saltBytes, ""HmacSHA256""));
    final byte[] prk = extract.doFinal(bobDesKey.getEncoded());

    // Expand
    Mac expand = Mac.getInstance(""HmacSHA256"");
    expand.init(new SecretKeySpec(prk, ""HmacSHA256""));
    String info = ""Content-Encoding: aesgcm128"";
    expand.update(info.getBytes(StandardCharsets.US_ASCII));
    expand.update((byte) 1);
    final byte[] key_bytes = expand.doFinal();

    // Use the result
    SecretKeySpec key = new SecretKeySpec(key_bytes, 0, 16, ""AES"");
    bobCipher.init(Cipher.ENCRYPT_MODE, key);

    byte[] cleartext = ""{\""this\"":\""is a test that is supposed to be working but it is not\""}"".getBytes();
    byte[] ciphertext = bobCipher.doFinal(cleartext);

    URL url = new URL(""PUSH_ENDPOINT_URL"");
    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
    urlConnection.setRequestMethod(""POST"");
    urlConnection.setRequestProperty(""Content-Length"", ciphertext.length + """");
    urlConnection.setRequestProperty(""Content-Type"", ""application/octet-stream"");
    urlConnection.setRequestProperty(""Encryption-Key"", ""keyid=p256dh;dh="" + Util.toBase64UrlSafe(bobPubKeyEnc));
    urlConnection.setRequestProperty(""Encryption"", ""keyid=p256dh;salt="" + Util.toBase64UrlSafe(saltBytes));
    urlConnection.setRequestProperty(""Content-Encoding"", ""aesgcm128"");
    urlConnection.setDoInput(true);
    urlConnection.setDoOutput(true);
    final OutputStream outputStream = urlConnection.getOutputStream();
    outputStream.write(ciphertext);
    outputStream.flush();
    outputStream.close();
    if (urlConnection.getResponseCode() == 201) {
        String result = Util.readStream(urlConnection.getInputStream());
        Log.v(""PUSH"", ""OK: "" + result);
    } else {
        InputStream errorStream = urlConnection.getErrorStream();
        String error = Util.readStream(errorStream);
        Log.v(""PUSH"", ""Not OK: "" + error);
    }
} catch (Exception e) {
    Log.v(""PUSH"", ""Not OK: "" + e.toString());
}

where ""BASE_64_PUBLIC_KEY_FROM_PUSH_SUBSCRIPTION"" is the key the Push API subscription method in the browser provided and ""PUSH_ENDPOINT_URL"" is the push endpoint the browser provided.
If I get values (ciphertext, base64 bobPubKeyEnc and salt) from a successful nodejs web-push request and hard-code them in Java, it works. If I use the code above with dynamic values it does not work.
I did notice that the ciphertext that worked in the nodejs implementation is always 1 byte bigger then the Java ciphertext with the code above. The example I used here always produces a 81 byte cipher text but in nodejs it's always 82 bytes for example. Does this give us a clue on what might be wrong?
How do I correctly encrypt the payload so that it reaches Firefox?
Thanks in advance for any help
","Have a look at the answer from Maarten Bodewes in this question.
He gives Java source for encoding/decoding from the X9.62 uncompressed format into an ECPublicKey, which I think should be suitable for what you're trying to do.
== Update 1 ==
The spec says ""User Agents that enforce encryption MUST expose an elliptic curve Diffie-Hellman share on the P-256 curve"".
The P-256 curve is a standard curve approved by NIST for use in US government encryption applications. The definition, parameter values and rationale for choosing this particular curve (along with a few others) are given here.
There is support for this curve in the standard library using the name ""secp256r1"", but for reasons that I haven't been able to fully work out (I think it's to do with the separation of cryptography providers from the JDK itself), you seem to have to jump through some very inefficient hoops to get one of these ECParameterSpec values from this name:
KeyPairGenerator kpg = KeyPairGenerator.getInstance(""EC"");
ECGenParameterSpec kpgparams = new ECGenParameterSpec(""secp256r1"");
kpg.initialize(kpgparams);
ECParameterSpec params = ((ECPublicKey) kpg.generateKeyPair().getPublic()).getParams();

This is pretty heavyweight because it actually generates a keypair using the named ECGenParameterSpec object, then extracts the ECParameterSpec from it. You should then be able to use this to decode (I'd recommend caching this value somewhere to avoid having to do this key-generation frequently).
Alternatively, you can just take the numbers from page 8 of the NIST document and plug them in directly to the ECParameterSpec constructor.
There is some code here which looks like it does exactly that (around line 124). That code is Apache licensed. I haven't used that code myself, but it looks like the constants match what's in the NIST document.
== Update 2 ==
The actual encryption key is derived from the salt (randomly generated) and the shared secret (agreed by the DH key exchange), using the HMAC-based key derivation function (HKDF) described in section 3.2 of Encrypted Content-Encoding for HTTP.
That document references RFC 5869 and specifies the use of SHA-256 as the hash used in the HKDF.
This RFC describes a two stage process: Extract and Expand. The Extract phase is defined as:
PRK = HMAC-Hash(salt, IKM)

In the case of web-push, this should be an HMAC-SHA-256 operation, the salt value should be the ""saltBytes"" value that you already have, and as far as I can see the IKM value should be the shared secret (the webpush document just says ""These values are used to calculate the content encryption key"" without specifically stating that the shared secret is the IKM).
The Expand phase takes the value produced by the Extract phase plus an 'info' value, and repeatedly HMACs them until it has produced enough key data for the encryption algorithm that you're using (the output of each HMAC is fed into the next one - see the RFC for details).
In this case, the algorithm is AEAD_AES_128_GCM which requires a 128-bit key, which is smaller than the output of SHA-256, so you only need to do one hash in the Expand stage.
The 'info' value in this case has to be ""Content-Encoding: aesgcm128"" (specified in Encrypted Content-Encoding for HTTP), so the operation that you need is:
HMAC-SHA-256(PRK, ""Content-Encoding: aesgcm128"" | 0x01)

where the '|' is concatenation. You then take the first 16 bytes of the result, and that should be the encryption key.
In Java terms, that would look something like:
// Extract
Mac extract = Mac.getInstance(""HmacSHA256"");
extract.init(new SecretKeySpec(saltBytes, ""HmacSHA256""));
final byte[] prk = extract.doFinal(bobDesKey.getEncoded());

// Expand
Mac expand = Mac.getInstance(""HmacSHA256"");
expand.init(new SecretKeySpec(prk, ""HmacSHA256""));
String info = ""Content-Encoding: aesgcm128"";
expand.update(info.getBytes(StandardCharsets.US_ASCII));
expand.update((byte)1);
final byte[] key_bytes = expand.doFinal();

// Use the result
SecretKeySpec key = new SecretKeySpec(key_bytes, 0, 16, ""AES"");
bobCipher.init(Cipher.ENCRYPT_MODE, key);

For reference, here's a link to the part of the BouncyCastle library that does this stuff.
Finally, I just noticed this part in the webpush document: 

Public keys, such as are encoded into the ""dh"" parameter, MUST be in
  the form of an uncompressed point

so it looks like you will need to use something like this:
byte[] bobPubKeyEnc = toUncompressedPoint((ECPublicKey)bobKpair.getPublic());

instead of using the standard getEncoded() method.
== Update 3 ==
First, I should point out that there is a more recent draft of the spec for http content encryption than the one that I have previous linked to: draft-ietf-httpbis-encryption-encoding-00. People who want to use this system should make sure that they are using the latest available draft of the spec - this is work in progress and seems to be changing slightly every few months.
Second, in section 2 of that document, it specifies that some padding must be added to the plaintext before encryption (and removed after decryption).
This would account for the one byte difference in length between what you mentioned that you're getting and what the Node.js example produces.
The document says:

Each record contains between 1 and 256 octets of padding, inserted
  into a record before the enciphered content.  Padding consists of a
  length byte, followed that number of zero-valued octets.  A receiver
  MUST fail to decrypt if any padding octet other than the first is
  non-zero, or a record has more padding than the record size can
  accommodate.

So I think what you need to do is to push a single '0' byte into the cipher before your plaintext. You could add more padding than that - I couldn't see anything that specified that the padding must be the minimum amount possible, but a single '0' byte is the simplest (anyone reading this who is trying to decode these messages from the other end should make sure that they support any legal amount of padding).
In general for http content encryption, the mechanism is a bit more complicated than that (since you have to split up the input into records and add padding to each one), but the webpush spec says that the encrypted message must fit into a single record, so you don't need to worry about that.
Note the following text in the webpush encryption spec:

Note that a push service is not required to support more than 4096
  octets of payload body, which equates to 4080 octets of cleartext

The 4080 octets of cleartext here includes the 1 byte of padding, so there effectively seems to be a limit of 4079 bytes. You can specify a larger record size using the ""rs"" parameter in the ""Encryption"" header, but according to the text quoted above, the recipient isn't required to support that.
One warning: some of the code that I've seen to do this seems to be changing to using 2 bytes of padding, presumably as a result of some proposed spec change, but I haven't been able to track down where this is coming from. At the moment 1 byte of padding should be ok, but if this stops working in the future, you may need to go to 2 bytes - as I mentioned above this spec is a work in progress and browser support is experimental right now.
","7278","<java><encryption><diffie-hellman><push-api>","17","2","4","2016-08-30 08:55:11","36129174","3","10","1002963","","2016-03-03 14:58:17","2016-02-05 15:43:15",""
"35228063","Encrypt message for Web Push API in Java","I'm trying to create a server capable of sending push messages using the Push API: https://developer.mozilla.org/en-US/docs/Web/API/Push_API
I've got the client side working but now I want to be able to send messages with a payload from a Java server.
I saw the nodejs web-push example (https://www.npmjs.com/package/web-push) but I couldn't translate that correctly to Java.
I tried following the example to use the DH key exchange found here: http://docs.oracle.com/javase/7/docs/technotes/guides/security/crypto/CryptoSpec.html#DH2Ex
With the help of sheltond below I was able to figure out some code that should be working but isn't. 
When I post the encrypted message to the Push service, I get back the expected 201 status code but the push never reaches Firefox. If I remove the payload and headers and simply send a POST request to the same URL the message successfully arrives in Firefox with no data. I suspect it may have something to do with the way I'm encrypting the data with Cipher.getInstance(""AES/GCM/NoPadding"");
This is the code I'm using currently:
try {
    final byte[] alicePubKeyEnc = Util.fromBase64(""BASE_64_PUBLIC_KEY_FROM_PUSH_SUBSCRIPTION"");
    KeyPairGenerator kpg = KeyPairGenerator.getInstance(""EC"");
    ECGenParameterSpec kpgparams = new ECGenParameterSpec(""secp256r1"");
    kpg.initialize(kpgparams);

    ECParameterSpec params = ((ECPublicKey) kpg.generateKeyPair().getPublic()).getParams();
    final ECPublicKey alicePubKey = fromUncompressedPoint(alicePubKeyEnc, params);
    KeyPairGenerator bobKpairGen = KeyPairGenerator.getInstance(""EC"");
    bobKpairGen.initialize(params);

    KeyPair bobKpair = bobKpairGen.generateKeyPair();
    KeyAgreement bobKeyAgree = KeyAgreement.getInstance(""ECDH"");
    bobKeyAgree.init(bobKpair.getPrivate());


    byte[] bobPubKeyEnc = toUncompressedPoint((ECPublicKey) bobKpair.getPublic());


    bobKeyAgree.doPhase(alicePubKey, true);
    Cipher bobCipher = Cipher.getInstance(""AES/GCM/NoPadding"");
    SecretKey bobDesKey = bobKeyAgree.generateSecret(""AES"");
    byte[] saltBytes = new byte[16];
    new SecureRandom().nextBytes(saltBytes);
    Mac extract = Mac.getInstance(""HmacSHA256"");
    extract.init(new SecretKeySpec(saltBytes, ""HmacSHA256""));
    final byte[] prk = extract.doFinal(bobDesKey.getEncoded());

    // Expand
    Mac expand = Mac.getInstance(""HmacSHA256"");
    expand.init(new SecretKeySpec(prk, ""HmacSHA256""));
    String info = ""Content-Encoding: aesgcm128"";
    expand.update(info.getBytes(StandardCharsets.US_ASCII));
    expand.update((byte) 1);
    final byte[] key_bytes = expand.doFinal();

    // Use the result
    SecretKeySpec key = new SecretKeySpec(key_bytes, 0, 16, ""AES"");
    bobCipher.init(Cipher.ENCRYPT_MODE, key);

    byte[] cleartext = ""{\""this\"":\""is a test that is supposed to be working but it is not\""}"".getBytes();
    byte[] ciphertext = bobCipher.doFinal(cleartext);

    URL url = new URL(""PUSH_ENDPOINT_URL"");
    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
    urlConnection.setRequestMethod(""POST"");
    urlConnection.setRequestProperty(""Content-Length"", ciphertext.length + """");
    urlConnection.setRequestProperty(""Content-Type"", ""application/octet-stream"");
    urlConnection.setRequestProperty(""Encryption-Key"", ""keyid=p256dh;dh="" + Util.toBase64UrlSafe(bobPubKeyEnc));
    urlConnection.setRequestProperty(""Encryption"", ""keyid=p256dh;salt="" + Util.toBase64UrlSafe(saltBytes));
    urlConnection.setRequestProperty(""Content-Encoding"", ""aesgcm128"");
    urlConnection.setDoInput(true);
    urlConnection.setDoOutput(true);
    final OutputStream outputStream = urlConnection.getOutputStream();
    outputStream.write(ciphertext);
    outputStream.flush();
    outputStream.close();
    if (urlConnection.getResponseCode() == 201) {
        String result = Util.readStream(urlConnection.getInputStream());
        Log.v(""PUSH"", ""OK: "" + result);
    } else {
        InputStream errorStream = urlConnection.getErrorStream();
        String error = Util.readStream(errorStream);
        Log.v(""PUSH"", ""Not OK: "" + error);
    }
} catch (Exception e) {
    Log.v(""PUSH"", ""Not OK: "" + e.toString());
}

where ""BASE_64_PUBLIC_KEY_FROM_PUSH_SUBSCRIPTION"" is the key the Push API subscription method in the browser provided and ""PUSH_ENDPOINT_URL"" is the push endpoint the browser provided.
If I get values (ciphertext, base64 bobPubKeyEnc and salt) from a successful nodejs web-push request and hard-code them in Java, it works. If I use the code above with dynamic values it does not work.
I did notice that the ciphertext that worked in the nodejs implementation is always 1 byte bigger then the Java ciphertext with the code above. The example I used here always produces a 81 byte cipher text but in nodejs it's always 82 bytes for example. Does this give us a clue on what might be wrong?
How do I correctly encrypt the payload so that it reaches Firefox?
Thanks in advance for any help
","Able to receive notifications after changing code as per https://jrconlin.github.io/WebPushDataTestPage/
Find the modified code below :
 
import com.sun.org.apache.xerces.internal.impl.dv.util.Base64;
import java.io.BufferedInputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.math.BigInteger;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.Security;
import java.security.interfaces.ECPublicKey;
import java.security.spec.ECFieldFp;
import java.security.spec.ECParameterSpec;
import java.security.spec.ECPoint;
import java.security.spec.ECPublicKeySpec;
import java.security.spec.EllipticCurve;
import java.util.Arrays;
import javax.crypto.Cipher;
import javax.crypto.KeyAgreement;
import javax.crypto.Mac;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import org.bouncycastle.jce.provider.BouncyCastleProvider;


public class WebPushEncryption {

    private static final byte UNCOMPRESSED_POINT_INDICATOR = 0x04;
    private static final ECParameterSpec params = new ECParameterSpec(
            new EllipticCurve(new ECFieldFp(new BigInteger(
                                    ""FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF"",
                                    16)), new BigInteger(
                            ""FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC"",
                            16), new BigInteger(
                            ""5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B"",
                            16)), new ECPoint(new BigInteger(
                            ""6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296"",
                            16), new BigInteger(
                            ""4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5"",
                            16)), new BigInteger(
                    ""FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551"",
                    16), 1);

    public static void main(String[] args) throws Exception {
        Security.addProvider(new BouncyCastleProvider());
        String endpoint = ""https://updates.push.services.mozilla.com/push/v1/xxx"";
        final byte[] alicePubKeyEnc = Base64.decode(""base64 encoded public key "");

        KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""ECDH"", ""BC"");
        keyGen.initialize(params);

        KeyPair bobKpair = keyGen.generateKeyPair();
        PrivateKey localPrivateKey = bobKpair.getPrivate();
        PublicKey localpublickey = bobKpair.getPublic();

        final ECPublicKey remoteKey = fromUncompressedPoint(alicePubKeyEnc, params);

        KeyAgreement bobKeyAgree = KeyAgreement.getInstance(""ECDH"", ""BC"");
        bobKeyAgree.init(localPrivateKey);

        byte[] bobPubKeyEnc = toUncompressedPoint((ECPublicKey) bobKpair.getPublic());

        bobKeyAgree.doPhase(remoteKey, true);

        SecretKey bobDesKey = bobKeyAgree.generateSecret(""AES"");

        byte[] saltBytes = new byte[16];
        new SecureRandom().nextBytes(saltBytes);

        Mac extract = Mac.getInstance(""HmacSHA256"", ""BC"");
        extract.init(new SecretKeySpec(saltBytes, ""HmacSHA256""));
        final byte[] prk = extract.doFinal(bobDesKey.getEncoded());

        // Expand
        Mac expand = Mac.getInstance(""HmacSHA256"", ""BC"");
        expand.init(new SecretKeySpec(prk, ""HmacSHA256""));

        //aes algorithm
        String info = ""Content-Encoding: aesgcm128"";
        expand.update(info.getBytes(StandardCharsets.US_ASCII));
        expand.update((byte) 1);
        final byte[] key_bytes = expand.doFinal();
        byte[] key_bytes16 = Arrays.copyOf(key_bytes, 16);
        SecretKeySpec key = new SecretKeySpec(key_bytes16, 0, 16, ""AES-GCM"");

        //nonce
        expand.reset();
        expand.init(new SecretKeySpec(prk, ""HmacSHA256""));
        String nonceinfo = ""Content-Encoding: nonce"";
        expand.update(nonceinfo.getBytes(StandardCharsets.US_ASCII));
        expand.update((byte) 1);
        final byte[] nonce_bytes = expand.doFinal();
        byte[] nonce_bytes12 = Arrays.copyOf(nonce_bytes, 12);

        Cipher bobCipher = Cipher.getInstance(""AES/GCM/NoPadding"", ""BC"");

        byte[] iv = generateNonce(nonce_bytes12, 0);

        bobCipher.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(iv));

        byte[] cleartext = (""{\n""
                + ""      \""message\"" : \""great match41eeee!\"",\n""
                + ""      \""title\"" : \""Portugal vs. Denmark4255\"",\n""
                + ""      \""icon\"" : \""http://icons.iconarchive.com/icons/artdesigner/tweet-my-web/256/single-bird-icon.png\"",\n""
                + ""   \""tag\"" : \""testtag1\"",\n""
                + ""   \""url\"" : \""http://www.yahoo.com\""\n""
                + ""    }"").getBytes();

        byte[] cc = new byte[cleartext.length + 1];
        cc[0] = 0;

        for (int i = 0; i < cleartext.length; i++) {
            cc[i + 1] = cleartext[i];
        }

        cleartext = cc;
        byte[] ciphertext = bobCipher.doFinal(cleartext);

        URL url = new URL(endpoint);
        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
        urlConnection.setRequestMethod(""POST"");
        urlConnection.setRequestProperty(""Content-Length"", ciphertext.length + """");
        urlConnection.setRequestProperty(""Content-Type"", ""application/octet-stream"");
        urlConnection.setRequestProperty(""encryption-key"", ""keyid=p256dh;dh="" + Base64.encode(bobPubKeyEnc));
        urlConnection.setRequestProperty(""encryption"", ""keyid=p256dh;salt="" + Base64.encode(saltBytes));
        urlConnection.setRequestProperty(""content-encoding"", ""aesgcm128"");
        urlConnection.setRequestProperty(""ttl"", ""60"");
        urlConnection.setDoInput(true);
        urlConnection.setDoOutput(true);
        final OutputStream outputStream = urlConnection.getOutputStream();
        outputStream.write(ciphertext);
        outputStream.flush();
        outputStream.close();
        if (urlConnection.getResponseCode() == 201) {
            String result = readStream(urlConnection.getInputStream());
            System.out.println(""PUSH OK: "" + result);
        } else {
            InputStream errorStream = urlConnection.getErrorStream();
            String error = readStream(errorStream);
            System.out.println(""PUSH"" + ""Not OK: "" + error);
        }
    }

    static byte[] generateNonce(byte[] base, int index) {
        byte[] nonce = Arrays.copyOfRange(base, 0, 12);

        for (int i = 0; i < 6; ++i) {
            nonce[nonce.length - 1 - i] ^= (byte) ((index / Math.pow(256, i))) & (0xff);
        }
        return nonce;
    }

    private static String readStream(InputStream errorStream) throws Exception {
        BufferedInputStream bs = new BufferedInputStream(errorStream);
        int i = 0;
        byte[] b = new byte[1024];
        StringBuilder sb = new StringBuilder();
        while ((i = bs.read(b)) != -1) {
            sb.append(new String(b, 0, i));
        }

        return sb.toString();
    }

    public static ECPublicKey fromUncompressedPoint(
            final byte[] uncompressedPoint, final ECParameterSpec params)
            throws Exception {

        int offset = 0;
        if (uncompressedPoint[offset++] != UNCOMPRESSED_POINT_INDICATOR) {
            throw new IllegalArgumentException(
                    ""Invalid uncompressedPoint encoding, no uncompressed point indicator"");
        }

        int keySizeBytes = (params.getOrder().bitLength() + Byte.SIZE - 1)
                / Byte.SIZE;

        if (uncompressedPoint.length != 1 + 2 * keySizeBytes) {
            throw new IllegalArgumentException(
                    ""Invalid uncompressedPoint encoding, not the correct size"");
        }

        final BigInteger x = new BigInteger(1, Arrays.copyOfRange(
                uncompressedPoint, offset, offset + keySizeBytes));
        offset += keySizeBytes;
        final BigInteger y = new BigInteger(1, Arrays.copyOfRange(
                uncompressedPoint, offset, offset + keySizeBytes));
        final ECPoint w = new ECPoint(x, y);
        final ECPublicKeySpec ecPublicKeySpec = new ECPublicKeySpec(w, params);
        final KeyFactory keyFactory = KeyFactory.getInstance(""EC"");
        return (ECPublicKey) keyFactory.generatePublic(ecPublicKeySpec);
    }

    public static byte[] toUncompressedPoint(final ECPublicKey publicKey) {

        int keySizeBytes = (publicKey.getParams().getOrder().bitLength() + Byte.SIZE - 1)
                / Byte.SIZE;

        final byte[] uncompressedPoint = new byte[1 + 2 * keySizeBytes];
        int offset = 0;
        uncompressedPoint[offset++] = 0x04;

        final byte[] x = publicKey.getW().getAffineX().toByteArray();
        if (x.length <= keySizeBytes) {
            System.arraycopy(x, 0, uncompressedPoint, offset + keySizeBytes
                    - x.length, x.length);
        } else if (x.length == keySizeBytes + 1 && x[0] == 0) {
            System.arraycopy(x, 1, uncompressedPoint, offset, keySizeBytes);
        } else {
            throw new IllegalStateException(""x value is too large"");
        }
        offset += keySizeBytes;

        final byte[] y = publicKey.getW().getAffineY().toByteArray();
        if (y.length <= keySizeBytes) {
            System.arraycopy(y, 0, uncompressedPoint, offset + keySizeBytes
                    - y.length, y.length);
        } else if (y.length == keySizeBytes + 1 && y[0] == 0) {
            System.arraycopy(y, 1, uncompressedPoint, offset, keySizeBytes);
        } else {
            throw new IllegalStateException(""y value is too large"");
        }

        return uncompressedPoint;
    }
}

","7278","<java><encryption><diffie-hellman><push-api>","17","5","4","2016-08-30 08:55:11","36129174","3","10","1002963","","2016-03-03 14:58:17","2016-02-05 15:43:15",""
"35228063","Encrypt message for Web Push API in Java","I'm trying to create a server capable of sending push messages using the Push API: https://developer.mozilla.org/en-US/docs/Web/API/Push_API
I've got the client side working but now I want to be able to send messages with a payload from a Java server.
I saw the nodejs web-push example (https://www.npmjs.com/package/web-push) but I couldn't translate that correctly to Java.
I tried following the example to use the DH key exchange found here: http://docs.oracle.com/javase/7/docs/technotes/guides/security/crypto/CryptoSpec.html#DH2Ex
With the help of sheltond below I was able to figure out some code that should be working but isn't. 
When I post the encrypted message to the Push service, I get back the expected 201 status code but the push never reaches Firefox. If I remove the payload and headers and simply send a POST request to the same URL the message successfully arrives in Firefox with no data. I suspect it may have something to do with the way I'm encrypting the data with Cipher.getInstance(""AES/GCM/NoPadding"");
This is the code I'm using currently:
try {
    final byte[] alicePubKeyEnc = Util.fromBase64(""BASE_64_PUBLIC_KEY_FROM_PUSH_SUBSCRIPTION"");
    KeyPairGenerator kpg = KeyPairGenerator.getInstance(""EC"");
    ECGenParameterSpec kpgparams = new ECGenParameterSpec(""secp256r1"");
    kpg.initialize(kpgparams);

    ECParameterSpec params = ((ECPublicKey) kpg.generateKeyPair().getPublic()).getParams();
    final ECPublicKey alicePubKey = fromUncompressedPoint(alicePubKeyEnc, params);
    KeyPairGenerator bobKpairGen = KeyPairGenerator.getInstance(""EC"");
    bobKpairGen.initialize(params);

    KeyPair bobKpair = bobKpairGen.generateKeyPair();
    KeyAgreement bobKeyAgree = KeyAgreement.getInstance(""ECDH"");
    bobKeyAgree.init(bobKpair.getPrivate());


    byte[] bobPubKeyEnc = toUncompressedPoint((ECPublicKey) bobKpair.getPublic());


    bobKeyAgree.doPhase(alicePubKey, true);
    Cipher bobCipher = Cipher.getInstance(""AES/GCM/NoPadding"");
    SecretKey bobDesKey = bobKeyAgree.generateSecret(""AES"");
    byte[] saltBytes = new byte[16];
    new SecureRandom().nextBytes(saltBytes);
    Mac extract = Mac.getInstance(""HmacSHA256"");
    extract.init(new SecretKeySpec(saltBytes, ""HmacSHA256""));
    final byte[] prk = extract.doFinal(bobDesKey.getEncoded());

    // Expand
    Mac expand = Mac.getInstance(""HmacSHA256"");
    expand.init(new SecretKeySpec(prk, ""HmacSHA256""));
    String info = ""Content-Encoding: aesgcm128"";
    expand.update(info.getBytes(StandardCharsets.US_ASCII));
    expand.update((byte) 1);
    final byte[] key_bytes = expand.doFinal();

    // Use the result
    SecretKeySpec key = new SecretKeySpec(key_bytes, 0, 16, ""AES"");
    bobCipher.init(Cipher.ENCRYPT_MODE, key);

    byte[] cleartext = ""{\""this\"":\""is a test that is supposed to be working but it is not\""}"".getBytes();
    byte[] ciphertext = bobCipher.doFinal(cleartext);

    URL url = new URL(""PUSH_ENDPOINT_URL"");
    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
    urlConnection.setRequestMethod(""POST"");
    urlConnection.setRequestProperty(""Content-Length"", ciphertext.length + """");
    urlConnection.setRequestProperty(""Content-Type"", ""application/octet-stream"");
    urlConnection.setRequestProperty(""Encryption-Key"", ""keyid=p256dh;dh="" + Util.toBase64UrlSafe(bobPubKeyEnc));
    urlConnection.setRequestProperty(""Encryption"", ""keyid=p256dh;salt="" + Util.toBase64UrlSafe(saltBytes));
    urlConnection.setRequestProperty(""Content-Encoding"", ""aesgcm128"");
    urlConnection.setDoInput(true);
    urlConnection.setDoOutput(true);
    final OutputStream outputStream = urlConnection.getOutputStream();
    outputStream.write(ciphertext);
    outputStream.flush();
    outputStream.close();
    if (urlConnection.getResponseCode() == 201) {
        String result = Util.readStream(urlConnection.getInputStream());
        Log.v(""PUSH"", ""OK: "" + result);
    } else {
        InputStream errorStream = urlConnection.getErrorStream();
        String error = Util.readStream(errorStream);
        Log.v(""PUSH"", ""Not OK: "" + error);
    }
} catch (Exception e) {
    Log.v(""PUSH"", ""Not OK: "" + e.toString());
}

where ""BASE_64_PUBLIC_KEY_FROM_PUSH_SUBSCRIPTION"" is the key the Push API subscription method in the browser provided and ""PUSH_ENDPOINT_URL"" is the push endpoint the browser provided.
If I get values (ciphertext, base64 bobPubKeyEnc and salt) from a successful nodejs web-push request and hard-code them in Java, it works. If I use the code above with dynamic values it does not work.
I did notice that the ciphertext that worked in the nodejs implementation is always 1 byte bigger then the Java ciphertext with the code above. The example I used here always produces a 81 byte cipher text but in nodejs it's always 82 bytes for example. Does this give us a clue on what might be wrong?
How do I correctly encrypt the payload so that it reaches Firefox?
Thanks in advance for any help
","The solution of santosh kumar works with one modification:
I added a 1-byte cipher padding right before defining the cleartext byte[].
Cipher bobCipher = Cipher.getInstance(""AES/GCM/NoPadding"", ""BC"");
byte[] iv = generateNonce(nonce_bytes12, 0);
bobCipher.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(iv));

// adding firefox padding:
bobCipher.update(new byte[1]);

byte[] cleartext = {...};

","7278","<java><encryption><diffie-hellman><push-api>","17","0","4","2016-08-30 08:55:11","36129174","3","10","1002963","","2016-03-03 14:58:17","2016-02-05 15:43:15",""
"6912219","Diffie Hellman and AES on Android","I am trying to use Diffie Hellman for key exchange and AES to encrypt data with keys. Can anyone provide me a suitable work sample for android ?
","I've actually been working on a similar problem lately myself. I don't have a working sample, but here are some points you should be aware of:

Android uses a partial Bouncy Castle package to handle most of its cryptography, but some people prefer to user their own cryptographic package (Spongy Castle is a commonly cited alternative) since Android's is incomplete. See the discussion in here.
If you choose to use Android's existing tools, you can access them through Cipher. Here is a useful list of algorithms Android supports.
Be aware that if you choose to use some non-Android Java crypto library, Android does not support all Java packages your library may need. See my (currently unanswered) question about how to deal with that in Spongy Castle.

Hope these help!
","7207","<android><encryption><aes><diffie-hellman>","3","3","1","2011-08-02 15:49:38","","0","5","517247","","2011-08-02 12:44:24","2011-08-02 12:40:38",""
"17248095","Diffie Hellman Key Exchange","i am currently trying to do a diffie hellman key exchange using the java crypto libray, I have succeeded in finding a safe prime and also a generator for it. However i seem to have trouble creating a DH key with the values that i have found. It gives me the following exception 
Exception in thread ""main"" java.security.InvalidAlgorithmParameterException: Prime size must be multiple of 64, and can only range from 512 to 1024 (inclusive)
    at com.sun.crypto.provider.DHKeyPairGenerator.initialize(DHKeyPairGenerator.java:120)
    at java.security.KeyPairGenerator$Delegate.initialize(Unknown Source)
    at java.security.KeyPairGenerator.initialize(Unknown Source)
    at DH.createSpecificKey(DH.java:35)
    at DH.main(DH.java:166)
As you all know, in cryptography we cannot let our primes be small. How do i cater my safe primes and generator to fit the criteria of the DH library.
Below is my source code
public static void createKey()throws Exception
{
    KeyPairGenerator kpg = KeyPairGenerator.getInstance(""DiffieHellman"");
    kpg.initialize(512);
    KeyPair kp = kpg.generateKeyPair();
    KeyFactory kfactory = KeyFactory.getInstance(""DiffieHellman"");

    DHPublicKeySpec kspec = (DHPublicKeySpec) kfactory.getKeySpec(kp.getPublic(), DHPublicKeySpec.class);

}

public static void createSpecificKey(BigInteger p,BigInteger g)throws Exception
{
    KeyPairGenerator kpg = KeyPairGenerator.getInstance(""DiffieHellman"");
    DHParameterSpec param = new DHParameterSpec(p,g);
    kpg.initialize(param);

    KeyPair kp = kpg.generateKeyPair();

    KeyFactory kfactory = KeyFactory.getInstance(""DiffieHellman"");

    DHPublicKeySpec kspec = (DHPublicKeySpec) kfactory.getKeySpec(kp.getPublic(), DHPublicKeySpec.class);

}


static boolean isPrime(long n)
{
    if (n%2 == 0)
    {
        return false;
    }

    for(int i = 3 ; i*i<=n;i+=2)
    {
        if(n%i==0)
            return false;
    }
    return true;
}


public static void main(String [] args) throws Exception
{

    Random randomGenerator = new Random();

    long pValue = randomGenerator.nextInt(1000000);
    long gValue = randomGenerator.nextInt(100000);
    long correctPValue;

    boolean checkPrime = isPrime(pValue);
    System.out.println(""the number generated is ""+pValue);
    System.out.println(checkPrime);

    while(checkPrime == false)

    {
        long pValue2 = randomGenerator.nextInt(1000000);
        boolean checkPrimeInLoop = isPrime(pValue2);
        //System.out.println(""value in loop is ""+pValue2);
        if(checkPrimeInLoop == true)
        {
            pValue=pValue2;
            break;
        }
    }


    long checkSP = (pValue*2)+1;
    boolean checkSafePrime = isPrime(checkSP);
    //System.out.println(checkSafePrime);
    while(checkSafePrime==false)
    {
        long pValue3=randomGenerator.nextInt(1000000);
        boolean checkPrimeInLoop = isPrime(pValue3);
        long pValue5=(pValue3*2)+1;
        //boolean checkSafePrimeInLoop = isPrime(pValue4);
        boolean checkSafePrime2InLoop = isPrime(pValue5);

        if(checkSafePrime2InLoop == true && checkPrimeInLoop == true)
        {
            pValue=pValue3;
            break;
        }

    }

    System.out.println(""the safe prime is""+pValue);//safe prime

    while(gValue>pValue)
    {
        long gValue2=randomGenerator.nextInt(100000);

        if(gValue2<pValue)
        {
            gValue=gValue2;
            break;
        }
    }

    long getDivisor = (pValue-1)/2;
    BigInteger bi1,bi2,bi3,bi4;

    bi1=BigInteger.valueOf(getDivisor);

    bi2 = BigInteger.valueOf(pValue);

    bi3 = BigInteger.valueOf(gValue);

    bi4= bi3.modPow(bi1,bi2);

    long calculatedValue = bi4.longValue();


    while(calculatedValue == 1)
    {
        long gValue3=randomGenerator.nextInt(100000);
        long getDivisorInLoop = (pValue-1)/2;
        BigInteger bi5,bi6,bi7,bi8;

        bi5=BigInteger.valueOf(getDivisorInLoop);

        bi6 = BigInteger.valueOf(pValue);

        bi7 = BigInteger.valueOf(gValue3);

        bi8= bi7.modPow(bi5,bi6);

        long calculatedValueInLoop = bi8.longValue();
        System.out.println(calculatedValueInLoop);
        if(calculatedValueInLoop!=1)
        {
            gValue=gValue3;
            break;
        }
    }

    BigInteger generatorValue,primeValue;

    generatorValue = BigInteger.valueOf(gValue);
    primeValue = BigInteger.valueOf(pValue);

    createKey();

    int bitLength=512;

    createSpecificKey(generatorValue,primeValue);


}

Hope you guys can help me with this. Thanks in advance! 
","You aim to go for 512 bit length:
kpg.initialize(512);
You can generate p and g of such length like this:
int bitLength = 1024;
SecureRandom rnd = new SecureRandom();
BigInteger p = BigInteger.probablePrime(bitLength, rnd);
BigInteger g = BigInteger.probablePrime(bitLength, rnd);

The probablePrime probably use Rabin-Miller or Solovay-Strassen test which gives only 2^-100 chance (virtually no chance) that the resulting integer is not prime. Since 2002 a there's a polinomial-time algorithm called AKS (Agrawal–Kayal–Saxena) to test primes for 100% certainty (but I haven't seen it used so far, probably 2^-100 is good for anyone).
","7079","<java><security><diffie-hellman>","1","2","2","2014-03-11 08:28:23","","0","1","","","","2013-06-22 06:45:35",""
"17248095","Diffie Hellman Key Exchange","i am currently trying to do a diffie hellman key exchange using the java crypto libray, I have succeeded in finding a safe prime and also a generator for it. However i seem to have trouble creating a DH key with the values that i have found. It gives me the following exception 
Exception in thread ""main"" java.security.InvalidAlgorithmParameterException: Prime size must be multiple of 64, and can only range from 512 to 1024 (inclusive)
    at com.sun.crypto.provider.DHKeyPairGenerator.initialize(DHKeyPairGenerator.java:120)
    at java.security.KeyPairGenerator$Delegate.initialize(Unknown Source)
    at java.security.KeyPairGenerator.initialize(Unknown Source)
    at DH.createSpecificKey(DH.java:35)
    at DH.main(DH.java:166)
As you all know, in cryptography we cannot let our primes be small. How do i cater my safe primes and generator to fit the criteria of the DH library.
Below is my source code
public static void createKey()throws Exception
{
    KeyPairGenerator kpg = KeyPairGenerator.getInstance(""DiffieHellman"");
    kpg.initialize(512);
    KeyPair kp = kpg.generateKeyPair();
    KeyFactory kfactory = KeyFactory.getInstance(""DiffieHellman"");

    DHPublicKeySpec kspec = (DHPublicKeySpec) kfactory.getKeySpec(kp.getPublic(), DHPublicKeySpec.class);

}

public static void createSpecificKey(BigInteger p,BigInteger g)throws Exception
{
    KeyPairGenerator kpg = KeyPairGenerator.getInstance(""DiffieHellman"");
    DHParameterSpec param = new DHParameterSpec(p,g);
    kpg.initialize(param);

    KeyPair kp = kpg.generateKeyPair();

    KeyFactory kfactory = KeyFactory.getInstance(""DiffieHellman"");

    DHPublicKeySpec kspec = (DHPublicKeySpec) kfactory.getKeySpec(kp.getPublic(), DHPublicKeySpec.class);

}


static boolean isPrime(long n)
{
    if (n%2 == 0)
    {
        return false;
    }

    for(int i = 3 ; i*i<=n;i+=2)
    {
        if(n%i==0)
            return false;
    }
    return true;
}


public static void main(String [] args) throws Exception
{

    Random randomGenerator = new Random();

    long pValue = randomGenerator.nextInt(1000000);
    long gValue = randomGenerator.nextInt(100000);
    long correctPValue;

    boolean checkPrime = isPrime(pValue);
    System.out.println(""the number generated is ""+pValue);
    System.out.println(checkPrime);

    while(checkPrime == false)

    {
        long pValue2 = randomGenerator.nextInt(1000000);
        boolean checkPrimeInLoop = isPrime(pValue2);
        //System.out.println(""value in loop is ""+pValue2);
        if(checkPrimeInLoop == true)
        {
            pValue=pValue2;
            break;
        }
    }


    long checkSP = (pValue*2)+1;
    boolean checkSafePrime = isPrime(checkSP);
    //System.out.println(checkSafePrime);
    while(checkSafePrime==false)
    {
        long pValue3=randomGenerator.nextInt(1000000);
        boolean checkPrimeInLoop = isPrime(pValue3);
        long pValue5=(pValue3*2)+1;
        //boolean checkSafePrimeInLoop = isPrime(pValue4);
        boolean checkSafePrime2InLoop = isPrime(pValue5);

        if(checkSafePrime2InLoop == true && checkPrimeInLoop == true)
        {
            pValue=pValue3;
            break;
        }

    }

    System.out.println(""the safe prime is""+pValue);//safe prime

    while(gValue>pValue)
    {
        long gValue2=randomGenerator.nextInt(100000);

        if(gValue2<pValue)
        {
            gValue=gValue2;
            break;
        }
    }

    long getDivisor = (pValue-1)/2;
    BigInteger bi1,bi2,bi3,bi4;

    bi1=BigInteger.valueOf(getDivisor);

    bi2 = BigInteger.valueOf(pValue);

    bi3 = BigInteger.valueOf(gValue);

    bi4= bi3.modPow(bi1,bi2);

    long calculatedValue = bi4.longValue();


    while(calculatedValue == 1)
    {
        long gValue3=randomGenerator.nextInt(100000);
        long getDivisorInLoop = (pValue-1)/2;
        BigInteger bi5,bi6,bi7,bi8;

        bi5=BigInteger.valueOf(getDivisorInLoop);

        bi6 = BigInteger.valueOf(pValue);

        bi7 = BigInteger.valueOf(gValue3);

        bi8= bi7.modPow(bi5,bi6);

        long calculatedValueInLoop = bi8.longValue();
        System.out.println(calculatedValueInLoop);
        if(calculatedValueInLoop!=1)
        {
            gValue=gValue3;
            break;
        }
    }

    BigInteger generatorValue,primeValue;

    generatorValue = BigInteger.valueOf(gValue);
    primeValue = BigInteger.valueOf(pValue);

    createKey();

    int bitLength=512;

    createSpecificKey(generatorValue,primeValue);


}

Hope you guys can help me with this. Thanks in advance! 
","I assume your question is why you can only create primes from 512 to 1024 bits, while 2048 bits is recommended?! The answer is simple: the 2048 bits do not relate to the primes, but to the size of the modulus which is the product of the two primes. Two primes with 1024 bit each will give you a modulus of 2048 bit. That's why it's safe to use 1024 bit for the DH primes.
Regarding your exception: Csaba Toth is right: your primes are too small and the way to generate them is suboptimal. Just use your createKey() method and you are fine.
","7079","<java><security><diffie-hellman>","1","0","2","2014-03-11 08:28:23","","0","1","","","","2013-06-22 06:45:35",""
"18155559","How does one access the raw ECDH public key, private key and params inside OpenSSL's EVP_PKEY structure?","I'm using OpenSSL's c library to generate an elliptic curve Diffie-Hellman (ECDH) key pair, following the first code sample here. It glosses over the actual exchange of public keys with this line:
peerkey = get_peerkey(pkey);

The pkey variable and the return value are both of type EVP *. pkey contains the public key, private key, and params generated earlier, and the return value only contains the peer's public key. So this raises three questions:

How would get_peerkey() actually extract just the public key from pkey for sending to the peer?
How would the code extract the private key and params from pKey to store them for later use after the key exchange?
How would get_peerkey() generate a new EVP_PKEY structure from the peer's raw public key?

I've seen the OpenSSL functions EVP_PKEY_print_public(), EVP_PKEY_print_private(), and EVP_PKEY_print_params() but these are for generating human-readable output. And I haven't found any equivalent for converting a human-readable public key back into an EVP_PKEY structure.
","To answer my own question, there's a different path for the private key and the public key.
To serialize the public key:

Pass the EVP_PKEY to EVP_PKEY_get1_EC_KEY() to get an EC_KEY.
Pass the EC_KEY to EC_KEY_get0_public_key() to get an EC_POINT.
Pass the EC_POINT to EC_POINT_point2oct() to get octets, which are just unsigned char *.

To deserialize the public key:

Pass the octets to EC_POINT_oct2point() to get an EC_POINT.
Pass the EC_POINT to EC_KEY_set_public_key() to get an EC_KEY.
Pass the EC_KEY to EVP_PKEY_set1_EC_KEY to get an EVP_KEY.

To serialize the private key:

Pass the EVP_PKEY to EVP_PKEY_get1_EC_KEY() to get an EC_KEY.
Pass the EC_KEY to EC_KEY_get0_private_key() to get a BIGNUM. 
Pass the BIGNUM to BN_bn2mpi() to get an mpi, which is a format written to
unsigned char *.

To deserialize the private key:

Pass the mpi to BN_mpi2bn() to get a BIGNUM.
Pass the BIGNUM to EC_KEY_set_private_key() to get an EC_KEY.
Pass the EC_KEY to EVP_PKEY_set1_EC_KEY to get an EVP_KEY.

It is also possible to convert the BIGNUM to hex, decimal, or ""bin"", although I think that mpi used the fewest bytes.
","6926","<c><openssl><pki><elliptic-curve><diffie-hellman>","17","36","1","2015-07-26 01:22:57","18603667","0","7","","","","2013-08-09 20:58:23",""
"32486811","Chrome error ""Server has a weak ephemeral Diffie-Hellman public key"" for internal sites","Chrome seems to have released an update over the past week. This has caused at least 50 of our internal applications to throw the exception shown below. The solutions I have researched over the Internet, talk about updating the application server with a stronger cipher. However, our applications are spread out over IIS, tomcat, jboss, weblogic and websphere. Its not practical to expect all of these application servers to be updated. Is there no way to get Chrome to allow an ""exception"" for these sites ? Since these sites are all internal, the security is not really a concern.  
Apparently, Firefox throws the same exception but there is a documented fix for that (by changing some settings in Firefox). Is anyone aware of a similar fix in Chrome.
Error
Server has a weak ephemeral Diffie-Hellman public key

ERR_SSL_WEAK_SERVER_EPHEMERAL_DH_KEY

","I found a temporary workaround that should disable the security check in Chrome that is causing that error. It goes without saying that you do NOT want to use this while browsing the open web.
Try adding the following command argument to Chrome when you start it up:
--cipher-suite-blacklist=0x0088,0x0087,0x0039,0x0038,0x0044,0x0045,0x0066,0x0032,0x0033,0x0016,0x0013

I found this solution at this google forum post. Hopefully it will help!
","6670","<google-chrome><ssl><ssl-certificate><diffie-hellman>","3","3","4","2016-11-22 13:44:44","32487067","0","","2234742","","2015-09-12 00:05:24","2015-09-09 18:30:56",""
"32486811","Chrome error ""Server has a weak ephemeral Diffie-Hellman public key"" for internal sites","Chrome seems to have released an update over the past week. This has caused at least 50 of our internal applications to throw the exception shown below. The solutions I have researched over the Internet, talk about updating the application server with a stronger cipher. However, our applications are spread out over IIS, tomcat, jboss, weblogic and websphere. Its not practical to expect all of these application servers to be updated. Is there no way to get Chrome to allow an ""exception"" for these sites ? Since these sites are all internal, the security is not really a concern.  
Apparently, Firefox throws the same exception but there is a documented fix for that (by changing some settings in Firefox). Is anyone aware of a similar fix in Chrome.
Error
Server has a weak ephemeral Diffie-Hellman public key

ERR_SSL_WEAK_SERVER_EPHEMERAL_DH_KEY

","While Maximillian's workaround might work for you at the moment, there is no supported way to add an exception.
The only safe solution is to upgrade the servers, and a less fragile workaround might be to put better proxies right in front of some of the servers.
","6670","<google-chrome><ssl><ssl-certificate><diffie-hellman>","3","1","4","2016-11-22 13:44:44","32487067","0","","2234742","","2015-09-12 00:05:24","2015-09-09 18:30:56",""
"32486811","Chrome error ""Server has a weak ephemeral Diffie-Hellman public key"" for internal sites","Chrome seems to have released an update over the past week. This has caused at least 50 of our internal applications to throw the exception shown below. The solutions I have researched over the Internet, talk about updating the application server with a stronger cipher. However, our applications are spread out over IIS, tomcat, jboss, weblogic and websphere. Its not practical to expect all of these application servers to be updated. Is there no way to get Chrome to allow an ""exception"" for these sites ? Since these sites are all internal, the security is not really a concern.  
Apparently, Firefox throws the same exception but there is a documented fix for that (by changing some settings in Firefox). Is anyone aware of a similar fix in Chrome.
Error
Server has a weak ephemeral Diffie-Hellman public key

ERR_SSL_WEAK_SERVER_EPHEMERAL_DH_KEY

","This problem I found because of the JDK version running on App Server.
If your weblogic/apache server running on java JRockit version ""1.6.0_33""  & ""1.6.0_45"" or below you will face this issue.
A solution is to upgrade java to higher version like ""1.6.0_101"" and higher and restart app server.
","6670","<google-chrome><ssl><ssl-certificate><diffie-hellman>","3","0","4","2016-11-22 13:44:44","32487067","0","","2234742","","2015-09-12 00:05:24","2015-09-09 18:30:56",""
"32486811","Chrome error ""Server has a weak ephemeral Diffie-Hellman public key"" for internal sites","Chrome seems to have released an update over the past week. This has caused at least 50 of our internal applications to throw the exception shown below. The solutions I have researched over the Internet, talk about updating the application server with a stronger cipher. However, our applications are spread out over IIS, tomcat, jboss, weblogic and websphere. Its not practical to expect all of these application servers to be updated. Is there no way to get Chrome to allow an ""exception"" for these sites ? Since these sites are all internal, the security is not really a concern.  
Apparently, Firefox throws the same exception but there is a documented fix for that (by changing some settings in Firefox). Is anyone aware of a similar fix in Chrome.
Error
Server has a weak ephemeral Diffie-Hellman public key

ERR_SSL_WEAK_SERVER_EPHEMERAL_DH_KEY

","I've solved this problem without upgrading jrockit but configuring the ssl section like this
<ssl>
    <enabled>true</enabled>
    <hostname-verifier xsi:nil=""true""></hostname-verifier>
    <hostname-verification-ignored>false</hostname-verification-ignored>
    <export-key-lifespan>500</export-key-lifespan>
    <client-certificate-enforced>false</client-certificate-enforced>
    <two-way-ssl-enabled>false</two-way-ssl-enabled>
    <ssl-rejection-logging-enabled>true</ssl-rejection-logging-enabled>
    <inbound-certificate-validation>BuiltinSSLValidationOnly</inbound-certificate-validation>
    <outbound-certificate-validation>BuiltinSSLValidationOnly</outbound-certificate-validation>
    <allow-unencrypted-null-cipher>false</allow-unencrypted-null-cipher>
    <use-server-certs>false</use-server-certs>
    <jsse-enabled>true</jsse-enabled>
</ssl>

Can't tell you exactly whats makes the difference but it solved many different problems on SSL with chrome
","6670","<google-chrome><ssl><ssl-certificate><diffie-hellman>","3","0","4","2016-11-22 13:44:44","32487067","0","","2234742","","2015-09-12 00:05:24","2015-09-09 18:30:56",""
"8788736","Diffie-Hellman implementation for iOS?","This is my first question here as before I found all workarounds from another questions.
The question is very short: Does anyone know if there is any Diffie-Hellman implementation for iOS? I mean...the idea is to share between 2 devices (one is iOS and the other a java web service) a secret key, and I think the best idea should be that method.
If not, can anyone suggest me another option?
I'm not an advanced developer, that's why i'm trying to check for a framework for this.
Thanks in advance everyone!
","A quick google gives;
http://www.chilkatsoft.com/dh-objc.asp
You should really look into just using SSL though instead of inventing your own security protocol.
","4743","<ios><diffie-hellman>","5","1","5","2017-12-12 04:30:53","","1","","","","","2012-01-09 12:55:26",""
"8788736","Diffie-Hellman implementation for iOS?","This is my first question here as before I found all workarounds from another questions.
The question is very short: Does anyone know if there is any Diffie-Hellman implementation for iOS? I mean...the idea is to share between 2 devices (one is iOS and the other a java web service) a secret key, and I think the best idea should be that method.
If not, can anyone suggest me another option?
I'm not an advanced developer, that's why i'm trying to check for a framework for this.
Thanks in advance everyone!
","You can include openssl as a static library in your app project and use its Diffie-Hellman functions. As Joachim rightly says though, if you're communicating to a web service the easiest and best approach is to use SSL.
","4743","<ios><diffie-hellman>","5","0","5","2017-12-12 04:30:53","","1","","","","","2012-01-09 12:55:26",""
"8788736","Diffie-Hellman implementation for iOS?","This is my first question here as before I found all workarounds from another questions.
The question is very short: Does anyone know if there is any Diffie-Hellman implementation for iOS? I mean...the idea is to share between 2 devices (one is iOS and the other a java web service) a secret key, and I think the best idea should be that method.
If not, can anyone suggest me another option?
I'm not an advanced developer, that's why i'm trying to check for a framework for this.
Thanks in advance everyone!
","There is a Diffie-Hellman implementation for iOS in github.
You can use it.
https://github.com/benjholla/Diffie-Hellman-iOS
Also you can use openssl with ios. Considering openssl is a proven library, it is better to use openssl for this purpose.
","4743","<ios><diffie-hellman>","5","0","5","2017-12-12 04:30:53","","1","","","","","2012-01-09 12:55:26",""
"8788736","Diffie-Hellman implementation for iOS?","This is my first question here as before I found all workarounds from another questions.
The question is very short: Does anyone know if there is any Diffie-Hellman implementation for iOS? I mean...the idea is to share between 2 devices (one is iOS and the other a java web service) a secret key, and I think the best idea should be that method.
If not, can anyone suggest me another option?
I'm not an advanced developer, that's why i'm trying to check for a framework for this.
Thanks in advance everyone!
","Apple has an implementation of Diffie-Hellman in iOS as part of Secure Transport. Here is the Secure Transport Reference
I'm posting this answer on a very old question because it's still relevant and other questions might link to this one. Improving this question's completeness may help answer newer questions.
","4743","<ios><diffie-hellman>","5","4","5","2017-12-12 04:30:53","","1","","","","","2012-01-09 12:55:26",""
"8788736","Diffie-Hellman implementation for iOS?","This is my first question here as before I found all workarounds from another questions.
The question is very short: Does anyone know if there is any Diffie-Hellman implementation for iOS? I mean...the idea is to share between 2 devices (one is iOS and the other a java web service) a secret key, and I think the best idea should be that method.
If not, can anyone suggest me another option?
I'm not an advanced developer, that's why i'm trying to check for a framework for this.
Thanks in advance everyone!
","There is a Diffie-Hellman implementation for iOS SWIFT-4 on github with complete example code. You can use it. https://github.com/raoarafat/DeffieHelmanKeyExchange-Swift. Just download & use it.
SWIFT-4 Compatible.
Enjoy...
","4743","<ios><diffie-hellman>","5","0","5","2017-12-12 04:30:53","","1","","","","","2012-01-09 12:55:26",""
"36869631","DHGEX failing with 2048-bit key under Java 8, but succeeding with 1024-bit key","I'm using JSCH 0.1.53 to connect to a remote SSH server, which uses a 1024-bit RSA key.  We are able to connect successfully to the remote server when we also use a 1024-bit RSA key, but when we generated stronger 2048-bit keys we stopped being able to connect.  We got an error message that reads ""prime size must be multiple of 64, and can only range from 512 to 2048"" and that originates from a call to DHGEX.java (Diffie-Hellman Group EXchange).
We're running Java 1.8, and the error message correctly specifies a max bit size of 2048, so the problem is not the JCE key limitation of 1024 bits in Java 1.6 and 1.7.  And we've confirmed that both our private and our public key are in fact 2048 bits, via openssl rsa -text -noout -in id_rsa and ssh-keygen -lf id_rsa.pub.
Since everything looked fine on our end, I started adding debugging lines to the JSCH code and recompiling the JAR, and I was eventually able to determine that the modulus being passed to us during the key exchange was in fact 2047 bits long.  Now, 2047 bits in length doesn't inherently mean that you didn't generate a 2048-bit key or that it's any less strong than a key that actually contains 2048 bits, it just means that you happened to get two primes that multiplied together to something whose first bit was a 0. So it's expected behavior (some of the time) and the JCE check should probably be (n % 64 == 0 || n % 64 == 63).  But JCE is a stickler on the point, so it rejects this key for not being of a length it considers valid.
Based on that, I thought I'd found the problem: the remote server had generated a 2048-bit key that only contained 2047 bits, so they just needed to generate a new one (and keep doing it till they got one that really was 2048 bits).  But when I asked their administrators about it, they were insistent that they were using a 1024-bit key, and indeed that's what you get in the known_hosts file when you SSH over.  So that doesn't appear to be the cause after all.
So I started logging the contents of the buffer that contained what they sent us and pulling out the p and g values (modulus and group), and I discovered that in just a few short periods of testing over a couple of days, there were 33 different modulus values, and all of them differed by only the last few characters when encoded in either base 64 or base 10.  Modulii values were reused, sometimes only once and sometimes a dozen times, but there were lots of distinct values, so the keys are neither generated for one-time use nor generated once and reused forever.
Is this (having the server send many different keys that are very close numerically, with some reuse but many unique values) expected behavior under any conditions, and especially is this expected behavior when the client uses a 2048-bit key but the server uses a 1024-bit key?  I know nothing about Diffie-Hellman group exchange besides what I've read since I started investigating last week, so maybe this is just how it works, but it seems strange to me.
Also, does the SSH standard specify anything about how keys should be generated in cases like these?  I haven't yet found out what SSH server the far side is using (I suspect OpenSSH, but don't know for sure and don't know what version), but I'm hopeful that there might be some standard that forces the use of keys that are of the same size as was requested (between 1^(n-1) and 1^n - 1), and that the remote server might have an option to force this or that I can submit a bug against them to get them to change the behavior.  I'll probably also submit a bug against the JDK to allow keys of n-1 bits, with 0-padding for the first bit.
Any guidance that anyone can give would be greatly appreciated.
I've also posted this question to the JSCH mailing list: https://sourceforge.net/p/jsch/mailman/message/35042955/
UPDATE:
After further reading, I believe that Diffie-Hellman's forward secrecy characteristic means that different primes (often from a pre-generated set stored somewhere like /etc/ssl/moduli) would be used for each session (source: https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange#Forward_secrecy) and that the prime used is not actually the RSA key (source: https://stackoverflow.com/a/23346185/1247705), so the fact that many different p values are seen no longer seems like a concern.  I'm still surprised that they're so close in value, but maybe that's expected as well.
The far side is using Solaris SSH 1.1.4 (which as I understand it is based on OpenSSH) as the SSH daemon.  Is it expected that that daemon would pass 2047-bit primes as part of the Diffie-Hellman key exchange, and is there anything that can be done to get it to send 2048-bit primes instead?
","We fixed similar symptoms with:
Security.insertProviderAt(new BouncyCastleProvider(), 1)

we were using Jsch 0.1.54 and saw:

java.security.InvalidAlgorithmParameterException: DH key size must be multiple of 64, and can only range from 512 to 4096 (inclusive). The specific key size 2047 is not supported

possibly related is JDK-8164963: InvalidAlgorithmParameterException prime size issue after JDK upgrade with JSCH libraries
","4723","<java><public-key-encryption><jsch><diffie-hellman>","3","4","2","2017-04-02 03:34:46","","5","1","-1","","2017-05-23 12:32:29","2016-04-26 15:39:31",""
"36869631","DHGEX failing with 2048-bit key under Java 8, but succeeding with 1024-bit key","I'm using JSCH 0.1.53 to connect to a remote SSH server, which uses a 1024-bit RSA key.  We are able to connect successfully to the remote server when we also use a 1024-bit RSA key, but when we generated stronger 2048-bit keys we stopped being able to connect.  We got an error message that reads ""prime size must be multiple of 64, and can only range from 512 to 2048"" and that originates from a call to DHGEX.java (Diffie-Hellman Group EXchange).
We're running Java 1.8, and the error message correctly specifies a max bit size of 2048, so the problem is not the JCE key limitation of 1024 bits in Java 1.6 and 1.7.  And we've confirmed that both our private and our public key are in fact 2048 bits, via openssl rsa -text -noout -in id_rsa and ssh-keygen -lf id_rsa.pub.
Since everything looked fine on our end, I started adding debugging lines to the JSCH code and recompiling the JAR, and I was eventually able to determine that the modulus being passed to us during the key exchange was in fact 2047 bits long.  Now, 2047 bits in length doesn't inherently mean that you didn't generate a 2048-bit key or that it's any less strong than a key that actually contains 2048 bits, it just means that you happened to get two primes that multiplied together to something whose first bit was a 0. So it's expected behavior (some of the time) and the JCE check should probably be (n % 64 == 0 || n % 64 == 63).  But JCE is a stickler on the point, so it rejects this key for not being of a length it considers valid.
Based on that, I thought I'd found the problem: the remote server had generated a 2048-bit key that only contained 2047 bits, so they just needed to generate a new one (and keep doing it till they got one that really was 2048 bits).  But when I asked their administrators about it, they were insistent that they were using a 1024-bit key, and indeed that's what you get in the known_hosts file when you SSH over.  So that doesn't appear to be the cause after all.
So I started logging the contents of the buffer that contained what they sent us and pulling out the p and g values (modulus and group), and I discovered that in just a few short periods of testing over a couple of days, there were 33 different modulus values, and all of them differed by only the last few characters when encoded in either base 64 or base 10.  Modulii values were reused, sometimes only once and sometimes a dozen times, but there were lots of distinct values, so the keys are neither generated for one-time use nor generated once and reused forever.
Is this (having the server send many different keys that are very close numerically, with some reuse but many unique values) expected behavior under any conditions, and especially is this expected behavior when the client uses a 2048-bit key but the server uses a 1024-bit key?  I know nothing about Diffie-Hellman group exchange besides what I've read since I started investigating last week, so maybe this is just how it works, but it seems strange to me.
Also, does the SSH standard specify anything about how keys should be generated in cases like these?  I haven't yet found out what SSH server the far side is using (I suspect OpenSSH, but don't know for sure and don't know what version), but I'm hopeful that there might be some standard that forces the use of keys that are of the same size as was requested (between 1^(n-1) and 1^n - 1), and that the remote server might have an option to force this or that I can submit a bug against them to get them to change the behavior.  I'll probably also submit a bug against the JDK to allow keys of n-1 bits, with 0-padding for the first bit.
Any guidance that anyone can give would be greatly appreciated.
I've also posted this question to the JSCH mailing list: https://sourceforge.net/p/jsch/mailman/message/35042955/
UPDATE:
After further reading, I believe that Diffie-Hellman's forward secrecy characteristic means that different primes (often from a pre-generated set stored somewhere like /etc/ssl/moduli) would be used for each session (source: https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange#Forward_secrecy) and that the prime used is not actually the RSA key (source: https://stackoverflow.com/a/23346185/1247705), so the fact that many different p values are seen no longer seems like a concern.  I'm still surprised that they're so close in value, but maybe that's expected as well.
The far side is using Solaris SSH 1.1.4 (which as I understand it is based on OpenSSH) as the SSH daemon.  Is it expected that that daemon would pass 2047-bit primes as part of the Diffie-Hellman key exchange, and is there anything that can be done to get it to send 2048-bit primes instead?
","I ended up working around this issue by disabling the key-exchange algorithms that used a variant of Diffie-Hellman Group key exchange.  @Brian Low appears to have worked around it by using BouncyCastle instead of the JDK's built-in security provider.
I consider both of those to be workarounds that don't solve the underlying problem (which appears to be a bug in either the JDK for what key sizes they accept or in OpenSSH for what key sizes they generate), but neither I nor my project cared enough to spend time and money trying to force one or the other to take ownership of the issue.
","4723","<java><public-key-encryption><jsch><diffie-hellman>","3","0","2","2017-04-02 03:34:46","","5","1","-1","","2017-05-23 12:32:29","2016-04-26 15:39:31",""
"20505325","How to Export Private Key For ECDiffieHellmanCng","I am trying to export the keys from a new instance of a ECDiffieHellmanCng object so I can create an instance of it later with the same keys. But I am getting an error when trying to export it.
//Create new ECDiffieHellmanCng which automatically creates new keys
var ecdh = new ECDiffieHellmanCng();
//Export the keys
var privateKey = ecdh.Key.Export(CngKeyBlobFormat.EccPrivateBlob);

I am getting a CryptographicException when I call the Export method with the message ""The requested operation is not supported.""  After putting some breakpoints in the code it looks like it is throwing the exception before even executing the method. Looking at the definition of the Export method it is adorned with a SecuritySafeCriticalAttribute so I am suspicious that this attribute is actually throwing the exception. What is causing this exception? How can I save the keys so I can create an instance of the same ECDiffieHellmanCng object at a later time?
","I believe you are specifying the wrong BLOB format. Try:
var privateKey = ecdh.Key.Export(CngKeyBlobFormat.Pkcs8PrivateBlob);

If that fails, you need to set up a key policy that allows private key export. See this answer: https://stackoverflow.com/a/10274270/2420979 for more details on your problem.
","4683","<c#><security><public-key-encryption><diffie-hellman><cng>","4","1","2","2013-12-13 13:26:41","20505976","0","1","","","","2013-12-10 21:11:36",""
"20505325","How to Export Private Key For ECDiffieHellmanCng","I am trying to export the keys from a new instance of a ECDiffieHellmanCng object so I can create an instance of it later with the same keys. But I am getting an error when trying to export it.
//Create new ECDiffieHellmanCng which automatically creates new keys
var ecdh = new ECDiffieHellmanCng();
//Export the keys
var privateKey = ecdh.Key.Export(CngKeyBlobFormat.EccPrivateBlob);

I am getting a CryptographicException when I call the Export method with the message ""The requested operation is not supported.""  After putting some breakpoints in the code it looks like it is throwing the exception before even executing the method. Looking at the definition of the Export method it is adorned with a SecuritySafeCriticalAttribute so I am suspicious that this attribute is actually throwing the exception. What is causing this exception? How can I save the keys so I can create an instance of the same ECDiffieHellmanCng object at a later time?
","By default, keys aren't exportable - they are securely stored in the KSP. When creating the key, it needs to be marked allowed for export. Example:
var ecdh = new ECDiffieHellmanCng(CngKey.Create(CngAlgorithm.ECDiffieHellmanP256, null, new CngKeyCreationParameters {ExportPolicy = CngExportPolicies.AllowPlaintextExport}));
//Export the keys
var privateKey = ecdh.Key.Export(CngKeyBlobFormat.EccPrivateBlob);

To make this simpler, we can just export it from the CngKey directly and not use the algorithm if all you want to do is create a new key and export the private key.
var cngKey = CngKey.Create(CngAlgorithm.ECDiffieHellmanP256, null, new CngKeyCreationParameters {ExportPolicy = CngExportPolicies.AllowPlaintextExport});
var privateKey = cngKey.Export(CngKeyBlobFormat.EccPrivateBlob);

You can re-create the CngKey from the exported blob by using CngKey.Import(yourBlob, CngKeyBlobFormat.EccPrivateBlob) and passing that to the constructor of ECDiffieHellmanCng.

SecuritySafeCriticalAttribute is part of the .NET Security Transparency model. It is not the source of your errors. 
","4683","<c#><security><public-key-encryption><diffie-hellman><cng>","4","11","2","2013-12-13 13:26:41","20505976","0","1","","","","2013-12-10 21:11:36",""
"9483897","1024-bit Diffie-Hellman in C#","So I'm working on a project to interface a C# client with an existing server technology. One of the requirements is a key exchange using Diffie-Hellman.
We have known public P and G and I need to generate a 1024-bit public key to send to the server.
The following is used on the server side in C++ with OpenSSL. Currently I am using the same code in a native DLL called via P/Invoke, and it works as well. I would prefer to eliminate the native DLL dependency if possible.
char publicKey[128];
char P[128]; //this is set to a static 128-byte value, omitting for brevity
unsigned long G = 2;

DH* dh = DH_new();
dh->p = BN_new();
dh->g = BN_new();

BN_set_word(dh->g, G);
BN_bin2bn(P, 128, dh->p);
if(DH_generate_key(dh))
{
   BN_bn2bin(dh->pub_key, publicKey);
}

This generates a 1024-bit public key.
I've tried using the DH classes in BouncyCastle, but for whatever reason I can't get it to give me a 1024-bit key, it wants to give me a 960 bit key instead. Possibly because I don't really know what I'm doing. I couldn't find much in the way of actual explanations of how the classes are supposed to be used.
Is it possible to use BouncyCastle DH classes to work the same as the OpenSSL DH code posted above? If not, is there another C# implementation that would work better?
","Here is a working code example + article on CodeProject with an excellent rating:
http://www.codeproject.com/Articles/24632/Shared-Key-Generation-using-Diffie-Hellman
","4139","<c#><bouncycastle><diffie-hellman>","5","3","1","2014-01-15 12:44:20","9484092","0","1","","","","2012-02-28 14:39:08",""
"2701294","How does the elliptic-curve version of Diffie-Hellman cryptography work?","Does the Elliptic curve diffie hellman calculation look any different from the standard one defined here:
            /*
             * The basic Diffie-Hellman Key Agreement Equation 
             * 
             * The client initiates
             * A = g^a mod p
             * 
             * Sends (g p A) to the server
             * 
             * The server calculates B
             * B = g^b mod p
             * 
             * Sends B back to client
             * 
             * The client calculates K
             * K = B^a mod p
             * 
             * The server calucaltes K
             * K = A^b mod p
             * 
             */

Or is it just a specific way of selecting g, a, p and b? How are g,a,p and b selected anyway?
","The basic principle is the same, but the selection of the private key and how the public key are computed are significantly different. In addition, everyone has to agree beforehand on the elliptic curve to use.
As noted, in the elliptic-curve version of Diffie-Hellman, you first decide which elliptic curve you're using. That determines a number of independent parameters called the domain parameters. Without getting too technical, it turns out that some curves are better than others for cryptographic purposes, so the parameters are actually chosen carefully rather than at random. This is somewhat analogous to picking good prime factors.
There are two sets of domain parameters:

E, the elliptic curve itself.
G, a point on E that is called the base point.

E and G are necessary and sufficient to describe all the information you need.
In ECC-DH, the private key d is computed by taking a randomly selected number on the interval [1, n-1], where n is the order of G. The public key Q is computed by taking Q = dG. After that the general idea is the same, except that instead of trying to solve a hard integer factorization problem, you're trying to solve a hard discrete logarithm problem.
","3953","<elliptic-curve><diffie-hellman>","3","7","1","2010-04-23 19:51:32","2701449","0","1","75170","","2010-04-23 19:51:32","2010-04-23 19:06:48",""
"10891119","Diffie Hellman key agreement generates different key every time JAVA","I am experiencing a problem with Diffie Hellman implementation. I am using this code 
http://www.java2s.com/Tutorial/Java/0490__Security/DiffieHellmanKeyAgreement.htm
It is actually an example from one book I am reading. But I can't understand why generateSecret() creates a different key for every KeyAgreement. I have noticed the function creates different keys even if I call it with the same KeyAgreement twice!
If someone has something to suggest I will be really glad!
Thanks for your time! 
","I think the part of the example
private static BigInteger g512 = new BigInteger(""1234567890"", 16);
private static BigInteger p512 = new BigInteger(""1234567890"", 16);

is completely bogus.  p needs to be prime and gneeds to be a generator.  When I try running the example I get an exception.
This seems to be a more reasonable example (but I haven't tested it myself yet).
Basically the interesting input to the DH exchange is that (p,g) pair which needs to be generated and must have some unique properties.  Clearly, the example above shows just place holder values which will not produce a correctly functioning algorithm (p can not be equal to g and p should be prime, while in the example it is clearly divisible by 10).  The example I linked to shows how to use the libraries to generate a correct (p, g) pair. 
It is also worth noting that DH parameter generation is usually a separate step from generating the secret key.  While DH parameters are somewhat private, they are not as sensitive as your private key and can be generated once and then reused.
(Edit: Example)
AlgorithmParameterGenerator paramGen = AlgorithmParameterGenerator.getInstance(""DH"");
paramGen.init(512); // number of bits
AlgorithmParameters params = paramGen.generateParameters();
DHParameterSpec dhSpec = params.getParameterSpec(DHParameterSpec.class);

BigInteger p512 = dhSpec.getP();
BigInteger g512 = dhSpec.getG();
int l = dhSpec.getL();
...

","3933","<java><bouncycastle><diffie-hellman>","1","6","1","2016-02-08 10:37:18","","3","2","104223","","2012-06-06 03:47:42","2012-06-05 03:17:05",""
"4767125","SSL key exchange encryption techniques","what are the differences between the three key exchange algortihms namely Anonymous DH, Ephermal DH and fixed DH?
","From Cisco's docs:

Fixed Diffie-Hellman: 
  This a Diffie-Hellman key exchange in which
  the server's certificate contains the
  Diffie-Hellman public parameters
  signed by the certificate authority
  (CA). That is, the public-key
  certificate contains the
  Diffie-Hellman public-key parameters.
  The client provides its Diffie-Hellman
  public key parameters either in a
  certificate, if client authentication
  is required, or in a key exchange
  message. This method results in a
  fixed secret key between two peers,
  based on the Diffie-Hellman
  calculation using the fixed public
  keys.
Ephemeral Diffie-Hellman: 
  This technique is used to create ephemeral
  (temporary, one-time) secret keys. In
  this case, the Diffie-Hellman public
  keys are exchanged, and signed using
  the sender's private RSA or DSS key.
  The receiver can use the corresponding
  public key to verify the signature.
  Certificates are used to authenticate
  the public keys. This option appears
  to be the most secure of the three
  Diffie-Hellman options because it
  results in a temporary, authenticated
  key.
Anonymous Diffie-Hellman: 
  The base Diffie-Hellman algorithm is used, with
  no authentication. That is, each side
  sends its public Diffie-Hellman
  parameters to the other, with no
  authentication. This approach is
  vulnerable to man-in-the-middle
  attacks, in which the attacker
  conducts anonymous Diffie-Hellman
  exchanges with both parties.

","3896","<security><encryption><ssl><diffie-hellman>","4","9","1","2011-08-05 21:57:06","","1","1","600500","","2011-08-05 21:57:06","2011-01-22 09:33:07","2011-08-05 22:01:55"
"6003705","C++ tutorial on Diffie Hellman","Is there a C++ tutorial for Diffie Hellman key exchange using OpenSSL? I keep searching and I can't find anything. If you know of a tutorial, I would be grateful for a link to it.  Thank you.
","","3853","<c++><diffie-hellman>","4","","0","2011-10-26 06:36:49","","1","2","733798","","2011-06-22 04:49:31","2011-05-14 17:46:59","2014-08-07 15:02:30"
"27773086","How to decrypt HTTPS (ECDHE) data?","I am trying to understand how exactly HTTPS works and doing a little practical tests.
I have a data captured from HTTPS communication encrypted by TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA.
If I understood it right, client during the TLS handshake creates a master key, which is then encrypted using server's public key and sent to server. This master key (as a plain text) is then used as a symmetric key for encrypting ongoing communication. Is this correct?
If yes, how to decrypt the data, if I know the master key?
It sounded pretty easy to me at first, so I just wrote this script
$masterKey = '8ef36f0eb2c10ea6142693374f6c5c7ae65eee5f6bd45bd1990b08e6c144227382726496b795d62284bd8c6c0cadbbdb';

$someRandomEncryptedData = '170303001D314A69C7DF95E07AAF51FBDA01C178D45330BC902308DF8C418FA5B02B';

$sDecrypted = mcrypt_decrypt(MCRYPT_RIJNDAEL_256, pack('H*', $masterKey), pack('H*', $someRandomEncryptedData), MCRYPT_MODE_CBC);

echo $sDecrypted;

Then I notice that master key is 96 byte long (48 as binary string), which results to PHP warning as the key should be 256 bit (32 byte) long. Am I missing something?
","
client during the request creates a master key, which is then encrypted using server's public key and sent to server. This master key (as a plain text) is then used as a symmetric key for encrypting ongoing communication. Is this correct?

Well, all-in-all, No.
Because you are asking about DH and ECDH, which are Key Agreement protocols: the client does not generate a random key, encrypt it under the server's public key and then send it to the server. That's Key Transport (like RSA Key Transport), and not DH or ECDH. Key transport is going away in TLS 1.3.
There are two phases to TLS: key agreement and bulk transfer. The phases are not as well defined as in IPSec. When the client and server use DH or ECDH, they arrive at a premaster_secret. That's the shared secret drops out of Diffie-Hellman or Elliptic Curve  Diffie-Hellman.
They take the premaster_secret, they add a client random, a server random, and arrive at a master_secret. Then they take the master_secret and derive 6 symmetric keys from it:

Client initial IV
Client encryption key
Client mac key
Server initial IV
Server encryption key
Server mac key

Those keys are used to key a block or stream cipher.
If you notice, each side contributes to the premaster_secret - the client contributes g^a and the server contributes g^b. Then each side contributes to the master_secret through nonces - the client random and the server random.
The reason there's two contributions from both sides is transport schemes, like RSA Key Transport, don't allow the server to contribute to the premaster_secret. The server has to wait until the derivation of the master_secret to contribute to the key material via a nonce.
So the progression is premaster_secret to master_secret to 6 session keys. I'm not sure where the master key is...


If yes, how to decrypt the data, if I know the master key?

I think its usually easier to just plug it into Wireshark if you have the master key. The Wireshark wiki talks about a master key (though I don't know what it is - there's a premaster_secret and master_secret). See the Wireshark wiki for Secure Socket Layer (SSL).


It sounded pretty easy to me at first, so I just wrote this script

Yeah... :) Check out RFC 5246. That's Transport Layer Security (TLS) Protocol Version 1.2. Then let's talk about easy :)


Then I notice that master key is 96 byte long (48 as binary string)

96 bytes is the output of the PseudoRandom Function (PRF). Check out RFC 5246, page 13.
","3829","<php><encryption><https><elliptic-curve><diffie-hellman>","5","3","1","2015-01-05 04:21:03","27773283","0","1","1322616","","2015-01-05 03:56:29","2015-01-05 03:38:37",""
"19714334","java.security.NoSuchProviderException: JCE cannot authenticate the provider BC in servelets","I am implementing Elliptic Curve Diffie Hellman using bouncy castle. I am using bcprov-jdk15on-149.jar. But

java.security.NoSuchProviderException: JCE cannot authenticate the
  provider BC

exception is thrown. It happens in the following line KeyAgreement.getInstance(""ECDHC"", ""BC"");
KeyAgreement aKeyAgree = null;
try {
     //exception occur here
     aKeyAgree = KeyAgreement.getInstance(""ECDHC"", ""BC"");
}

The exception is

java.security.NoSuchProviderException: JCE cannot authenticate the
  provider BC   at
  javax.crypto.JceSecurity.getInstance(JceSecurity.java:101)    at
  javax.crypto.KeyAgreement.getInstance(KeyAgreement.java:223)

I added the Bouncy castle provider to the java.security file in the JRE. But it did not help. I want to know the solution for this situation. 
Also this problem only occurs with servelets. I tested with a J2SE project and the code works fine. Exception is thrown only when I put this in a servelet.
","So, possible reasons: 

You repacked bcprovider.jar in some way, for example, with maven shade plugin. It made invalid BC signature.
You added/removed BC provider more then once. For example: How do I get javax.crypto classes such as javax.crypto.Cipher to work on a servlet with jboss?
Your jre installation or some jars US_export_policy.jar, local_policy.jar is corrupted or has invalid signature. Try to make some crypto operation with different provider to check this. For example, create 2K RSA key.
Problem with export JCE restrictions: download and install UnlimitedJCEPolicy https://edelivery.oracle.com/otn-pub/java/jce/7/UnlimitedJCEPolicyJDK7.zip

","3786","<java><diffie-hellman>","0","1","1","2013-11-01 07:14:58","","4","1","1035054","","2013-11-01 07:14:58","2013-10-31 16:04:59",""
"2904292","diffie-hellman ssh keyxchange","I've set out to make a primitive SSH client in C#; you might remember me from posts such as primitive ssh connection (lowlevel) hehe.
Anyway, things are great up until the time when I initiate a DH key exchange.
I've compared the traffic when I establish a ssh connection (from openssh client to openssh server), to the traffic when my client connects to the same openssh server.
OpenSSH client -> OpenSSH server (S for server, C for client):
S: SSH-2.0-OpenSSH_5.1p1 Debian-6ubuntu2\r (saying hello)
C: SSH-2.0-OpenSSH_5.2\r (introducing myself)
C: Key Exchange Init (0x14 = 20)
S: Key Exchange Init
C: Diffie-Hellman GEX Request (0x22 = 34) (with DH GEX min, number of bits and max)
S: Diffie-Hellman Key Exchange Reply (with P, G, etc.)
C: Diffie-Hellman GEX Init
S: Diffie-Hellman GEX Reply
My client -> OpenSSH server:
S: SSH-2.0-OpenSSH_5.1p1 Debian-6ubuntu2\r (saying hello)
C: SSH-2.0-Some_Name\r (introducing myself)
C: Key Exchange Init (0x14 = 20)
S: Key Exchange Init
C: Diffie-Hellman GEX Request (0x22 = 34) (with DH GEX min, number of bits and max)
and then a bogus TCP packet as reply (probably the server connection has been terminated after/upon GEX Request.
I have yet to use AES128 (which I think is the encryption chosen, but I'm not sure how to verify this...), and I'm still sending in a non-compressed format, looking to get the P, G etc. values to make the DH calculations.
So where I'm stranded is:
RFC 4419 page 3 http://www.ietf.org/rfc/rfc4419.txt
I've send SSH_MSG_KEY_DH_GEX_REQUEST, but the server does not respond SSH_MSG_KEX_DH_GEX_GROUP.
Can anyone give me a little advice on what I'm not understanding here? Does the server not understand my GEX request (due to it expecting encryption, or?)?
Any help is very much appreciated, thanks :)
","I'm pretty sure the problem is that after the key exchange init, the keys aren't being taking into (correct) use.
","3768","<ssh><rfc><diffie-hellman>","3","0","2","2010-05-25 12:41:12","","0","","-1","","2017-05-23 12:30:45","2010-05-25 11:56:36",""
"2904292","diffie-hellman ssh keyxchange","I've set out to make a primitive SSH client in C#; you might remember me from posts such as primitive ssh connection (lowlevel) hehe.
Anyway, things are great up until the time when I initiate a DH key exchange.
I've compared the traffic when I establish a ssh connection (from openssh client to openssh server), to the traffic when my client connects to the same openssh server.
OpenSSH client -> OpenSSH server (S for server, C for client):
S: SSH-2.0-OpenSSH_5.1p1 Debian-6ubuntu2\r (saying hello)
C: SSH-2.0-OpenSSH_5.2\r (introducing myself)
C: Key Exchange Init (0x14 = 20)
S: Key Exchange Init
C: Diffie-Hellman GEX Request (0x22 = 34) (with DH GEX min, number of bits and max)
S: Diffie-Hellman Key Exchange Reply (with P, G, etc.)
C: Diffie-Hellman GEX Init
S: Diffie-Hellman GEX Reply
My client -> OpenSSH server:
S: SSH-2.0-OpenSSH_5.1p1 Debian-6ubuntu2\r (saying hello)
C: SSH-2.0-Some_Name\r (introducing myself)
C: Key Exchange Init (0x14 = 20)
S: Key Exchange Init
C: Diffie-Hellman GEX Request (0x22 = 34) (with DH GEX min, number of bits and max)
and then a bogus TCP packet as reply (probably the server connection has been terminated after/upon GEX Request.
I have yet to use AES128 (which I think is the encryption chosen, but I'm not sure how to verify this...), and I'm still sending in a non-compressed format, looking to get the P, G etc. values to make the DH calculations.
So where I'm stranded is:
RFC 4419 page 3 http://www.ietf.org/rfc/rfc4419.txt
I've send SSH_MSG_KEY_DH_GEX_REQUEST, but the server does not respond SSH_MSG_KEX_DH_GEX_GROUP.
Can anyone give me a little advice on what I'm not understanding here? Does the server not understand my GEX request (due to it expecting encryption, or?)?
Any help is very much appreciated, thanks :)
","My best guess would be that the key exchange are mutually exclusive, i.e. the openssh server does not have the algorithm that the client is looking for or the client does not have the algorithm to exchange with the openssh server. You could verify it by running wireshark on the putty to openssh server and monitor the exchanges and compare it with your own client. 
I would gauge a guess that is how putty works, if the exchange fails, fall back to another algorithm after 'querying the openssh server' for the algorithm it uses... since putty is open source, it might be worth your while to look at the code to see how putty accomplishes it.
","3768","<ssh><rfc><diffie-hellman>","3","0","2","2010-05-25 12:41:12","","0","","-1","","2017-05-23 12:30:45","2010-05-25 11:56:36",""
"19890075","Diffie-Hellman Method in C# not working","So, after all, i want to explain the method:
The ideia is to two persons exchange one value through a public channel of comunication without really sending it.
This is how this works:
https://en.wikipedia.org/wiki/Diffie-Hellman

This is my C# code:
    double primemodulus = 251;
    double generator = 11;

    public string TestarGamaValores()
    {
        Random R = new Random();
        double Alice = R.Next(1, 100); //alice exp
        double AliceCalculado = DefaultMod(Alice);

        double Bob = R.Next(1, 100); //bob exp
        double BobCalculado = DefaultMod(Bob);

        //Trocar os calculados entre eles

        double ChaveFinalAlice = CalcularAposTroca(Alice, BobCalculado);
        double ChaveFinalBob = CalcularAposTroca(Bob, AliceCalculado);

        return (""Chave Final Alice: "" + ChaveFinalAlice + "" Chave Final Bob: "" + ChaveFinalBob);
    }
                  //Calculate after exchange
    public double CalcularAposTroca(double MyExp, double HisResultFromHisModulus)
    {
        double genrt = Math.Pow(HisResultFromHisModulus, MyExp);
        double Chave = genrt % primemodulus;
        return Chave;
    }

    public double DefaultMod(double MyExp)
    {
        double genrt = Math.Pow(generator, MyExp);
        double Chave = genrt % primemodulus;
        return Chave;
    }

the only problem is, i cant get the values to be the same.
ive reaserched if the formula is ok, and i think i didnt get it wrong, but the C# code seems not to be agreeing.
the results are indeed between 0 and 251 but are always different.
so what am i doing wrong?
is the C# code ok?
","I think your problem is that you are using double instead of long (integer values), since doubles are stored only as approximations to the real number you might get rounding errors. See also this post Why is modulus operator not working for double in c#?
If you are dealing with larger values you will have to use a Structure with arbitrary size like BigInteger.
","3563","<c#><public-key-encryption><diffie-hellman>","0","2","3","2014-11-20 23:30:32","19890110","0","","","","","2013-11-10 13:09:42",""
"19890075","Diffie-Hellman Method in C# not working","So, after all, i want to explain the method:
The ideia is to two persons exchange one value through a public channel of comunication without really sending it.
This is how this works:
https://en.wikipedia.org/wiki/Diffie-Hellman

This is my C# code:
    double primemodulus = 251;
    double generator = 11;

    public string TestarGamaValores()
    {
        Random R = new Random();
        double Alice = R.Next(1, 100); //alice exp
        double AliceCalculado = DefaultMod(Alice);

        double Bob = R.Next(1, 100); //bob exp
        double BobCalculado = DefaultMod(Bob);

        //Trocar os calculados entre eles

        double ChaveFinalAlice = CalcularAposTroca(Alice, BobCalculado);
        double ChaveFinalBob = CalcularAposTroca(Bob, AliceCalculado);

        return (""Chave Final Alice: "" + ChaveFinalAlice + "" Chave Final Bob: "" + ChaveFinalBob);
    }
                  //Calculate after exchange
    public double CalcularAposTroca(double MyExp, double HisResultFromHisModulus)
    {
        double genrt = Math.Pow(HisResultFromHisModulus, MyExp);
        double Chave = genrt % primemodulus;
        return Chave;
    }

    public double DefaultMod(double MyExp)
    {
        double genrt = Math.Pow(generator, MyExp);
        double Chave = genrt % primemodulus;
        return Chave;
    }

the only problem is, i cant get the values to be the same.
ive reaserched if the formula is ok, and i think i didnt get it wrong, but the C# code seems not to be agreeing.
the results are indeed between 0 and 251 but are always different.
so what am i doing wrong?
is the C# code ok?
","you are using double which is a floating point number for something that is mathematicaly not defined for floating point numbers ... the modulo operator ...
i suggest using arbitrary precision integers like BigInteger
","3563","<c#><public-key-encryption><diffie-hellman>","0","2","3","2014-11-20 23:30:32","19890110","0","","","","","2013-11-10 13:09:42",""
"19890075","Diffie-Hellman Method in C# not working","So, after all, i want to explain the method:
The ideia is to two persons exchange one value through a public channel of comunication without really sending it.
This is how this works:
https://en.wikipedia.org/wiki/Diffie-Hellman

This is my C# code:
    double primemodulus = 251;
    double generator = 11;

    public string TestarGamaValores()
    {
        Random R = new Random();
        double Alice = R.Next(1, 100); //alice exp
        double AliceCalculado = DefaultMod(Alice);

        double Bob = R.Next(1, 100); //bob exp
        double BobCalculado = DefaultMod(Bob);

        //Trocar os calculados entre eles

        double ChaveFinalAlice = CalcularAposTroca(Alice, BobCalculado);
        double ChaveFinalBob = CalcularAposTroca(Bob, AliceCalculado);

        return (""Chave Final Alice: "" + ChaveFinalAlice + "" Chave Final Bob: "" + ChaveFinalBob);
    }
                  //Calculate after exchange
    public double CalcularAposTroca(double MyExp, double HisResultFromHisModulus)
    {
        double genrt = Math.Pow(HisResultFromHisModulus, MyExp);
        double Chave = genrt % primemodulus;
        return Chave;
    }

    public double DefaultMod(double MyExp)
    {
        double genrt = Math.Pow(generator, MyExp);
        double Chave = genrt % primemodulus;
        return Chave;
    }

the only problem is, i cant get the values to be the same.
ive reaserched if the formula is ok, and i think i didnt get it wrong, but the C# code seems not to be agreeing.
the results are indeed between 0 and 251 but are always different.
so what am i doing wrong?
is the C# code ok?
","I appreciate that You are going to implement the Diffie-Hellman algorithm idea, but for everyone who are looking for a solution I can tell that there is no need to discover the circle again.
The Diffie-Hellman secret key exchange protocol is already implemented here:
System.Security.Cryptography.ECDiffieHellmanCng 

and there is a link to great example of usage:
http://msdn.microsoft.com/en-us/library/system.security.cryptography.ecdiffiehellmancng(v=vs.110).aspx
Pay attention to measure the performance of the solution in Your environment before deploy. Process of generation PublicKey takes up to 40ms on my Intel Core I5. :-(
","3563","<c#><public-key-encryption><diffie-hellman>","0","1","3","2014-11-20 23:30:32","19890110","0","","","","","2013-11-10 13:09:42",""
"2823881","How To Generate Parameter Set for the Diffie-Hellman Key Agreement Algorithm in Android","I am working on mobile/server security related project. I am now stuck in generating a Diffie-Hellman key agreement part. It works fine in server side program but it is not working in mobile side. Thus, I assume that it is not compactible with Android.
I used the following class to get the parameters. It returns a comma-separated string of 3 values. The first number is the prime modulus P. The second number is the base generator G. The third number is bit size of the random exponent L.  
My question is is there anything wrong with the code or it is not compactible for android?What kind of changes should I do?
Your suggestion and guidance would be very much help for me. Thanks a lot in advance.
public static String genDhParams() {
 try {
// Create the parameter generator for a 1024-bit DH key pair
AlgorithmParameterGenerator paramGen = AlgorithmParameterGenerator.getInstance(""DH"");
paramGen.init(1024);
// Generate the parameters
AlgorithmParameters params = paramGen.generateParameters();
DHParameterSpec dhSpec = (DHParameterSpec)params.getParameterSpec(DHParameterSpec.class);
// Return the three values in a string
return """"+dhSpec.getP()+"",""+dhSpec.getG()+"",""+dhSpec.getL();
} catch (NoSuchAlgorithmException e) {
} catch (InvalidParameterSpecException e) {
}
return null;
}

Regards,
Sebby
","As revealed by this question DH parameter generation is incredibly slow on Android.  (That asker thought the culprit was generating a new SecureRandom(), but I find the slowness in DHParametersGenerator.generateParameters(), specifically its call to java.math.BigInt.generatePrimeDefault().)  
Moreover, that asker shows how to use pre-generated parameters.  The parameters can be fixed, and the key pair generator will still generate a new keypair each time.
","3362","<java><android><diffie-hellman>","0","0","1","2011-02-04 18:44:48","","5","2","290167","","2010-05-13 01:36:50","2010-05-13 01:14:01",""
"2469235","DH Keypair generation time on Android","This is the code that I'm using to generate a DH keypair:
KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""DH"");
keyGen.initialize(1024, new SecureRandom());
KeyPair ackp = keyGen.generateKeyPair();

(without the needed try/catch, of course).
I've done some tests running such code iteratively and varying the key size (in particular ramping up from 128 with a 128 step up to 1024. 1024 would be the desired size.
First of all, running each size generation 10 times to have some minimal std deviation on the results gives HIGH fluctuation of results, on average, anyway, the time needed for creating the keys (1024 bit) is: 683027ms, which rounds up to around 11 minutes for creating a key.
The questions are: 

Is anyone else getting the same results? 
Is there some optimization to be run in order to achieve lower times?
What is the high fluctuation dependent of? (i.e. for generating a 1024bit key it can take from 18 seconds to 30 minutes...)

Tests have been run on a Nexus-One phone
Thanks in advance for shedding some light on the ""issue""
Regards
","I did some further coding/research and apparently the call that's the most time (battery?) consuming is:
new SecureRandom()

In particular, though, since for DH the parameters (g, p, l) can be pre-computed and hard-coded it's a wise suggestion to do so beforehand and use the generated values to generate the key pair (which will be almost instantaneous).
Example code:
KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""DH"");
keyGen.initialize(new DHParameterSpec(p, g, l));
KeyPair ackp = keyGen.generateKeyPair();

Where p, g, and l are:
final BigInteger p = new BigInteger(""X"");
final BigInteger g = new BigInteger(""Y"");
final int l = 1023;

And X and Y can be generated offline with:
AlgorithmParameterGenerator paramGen = AlgorithmParameterGenerator.getInstance(""DH"");
paramGen.init(1024, new SecureRandom());
AlgorithmParameters params = paramGen.generateParameters();
DHParameterSpec dhSpec = (DHParameterSpec)params.getParameterSpec(DHParameterSpec.class);
System.out.println(""p: "" + dhSpec.getP() + ""\ng: "" + dhSpec.getG() + "" \nl: "" + dhSpec.getL());

","3259","<android><time><nexus-one><diffie-hellman>","3","7","1","2010-10-26 09:32:33","2510173","0","6","","","","2010-03-18 11:01:56",""
"19605954","Getting ECPoint/ECPublicKeyParameters from byte[] in Bouncy Castle","So far I've managed to generate a ECDHE pair in bouncy castle's lightweight API. However I have issues trying to recreate the public key from an byte[].
Since the ECPublicKeyParameters object only has one method getQ() I am assuming thats all that is required to reconstruct the key. The other parameters such as the curve used (P-521) are kept constant.
I am doing the following:
AsymmetricCipherKeyPair kp = kpgen.generateKeyPair(); //ECDHE Key Generator

ECPublicKeyParameters pubKey = (ECPublicKeyParameters)kp.getPublic();
byte[] aPubKeybytes = pubKey.getQ().getEncoded(false); //Should I set to true or false?

Unless there is another way to get the raw bytes of the public key pubKey, I don't see a way to get the bytes without invoking method getQ() which returns an ECPoint object.
My question is how to reconstruct the byte[] into a ECPoint object using bouncy castle's lightweight API. Or, better yet, how to reconstruct the whole ECPublicKeyParameter object using an byte array somehow derived from the original pubKey object.
","To whomever it may concern I resolved this issue by using the PublicKeyFactory and SubjectPublicKeyInfoFactory to encode and decode the key.
Using:
byte[] key = SubjectPublicKeyInfoFactory.createSubjectPublicKeyInfo(pubKey).getEncoded();

I was able to get the raw bytes of the key.
and using:
ECPublicKeyParameters bpubKey = (ECPublicKeyParameters)PublicKeyFactory.createKey(key);

I was able to recreate the public key.
","3157","<java><bouncycastle><public-key-encryption><elliptic-curve><diffie-hellman>","3","8","1","2013-12-05 21:31:29","19614887","0","","","","","2013-10-26 11:06:49",""
"27440450","javax.net.ssl.SSLException: java.lang.RuntimeException: Could not generate DH keypair","I am getting below error while hitting HTTPS URL with Java code develoed in JDK1.6
    javax.net.ssl.SSLException: java.lang.RuntimeException: Could not generate DH keypair
        at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:190)
        at com.sun.net.ssl.internal.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1649)
        at com.sun.net.ssl.internal.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1612)
        at com.sun.net.ssl.internal.ssl.SSLSocketImpl.handleException(SSLSocketImpl.java:1595)
        at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1172)
        at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1149)
        at sun.net.www.protocol.https.HttpsClient.afterConnect(HttpsClient.java:434)
    at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:166)
    at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1019)
    at 
sun.net.www.protocol.https.HttpsURLConnectionImpl.getOutputStream(HttpsURLConnectionImpl.java:230)
        at testHTTP.main(testHTTP.java:70)
Caused by: java.lang.RuntimeException: Could not generate DH keypair
        at com.sun.net.ssl.internal.ssl.DHCrypt.<init>(DHCrypt.java:106)
        at com.sun.net.ssl.internal.ssl.ClientHandshaker.serverKeyExchange(ClientHandshaker.java:556)
        at com.sun.net.ssl.internal.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:183)
        at com.sun.net.ssl.internal.ssl.Handshaker.processLoop(Handshaker.java:593)
        at com.sun.net.ssl.internal.ssl.Handshaker.process_record(Handshaker.java:529)
        at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:893)
        at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1138)
        at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1165)
        ... 6 more
Caused by: java.security.InvalidAlgorithmParameterException: Prime size must be multiple of 64, and can only range from 512 to 1024 (inclusive)
        at com.sun.crypto.provider.DHKeyPairGenerator.initialize(DashoA13*..)
        at java.security.KeyPairGenerator$Delegate.initialize(KeyPairGenerator.java:627)
        at com.sun.net.ssl.internal.ssl.DHCrypt.<init>(DHCrypt.java:100)
        ... 13 more


What should be done in this case if I want to use JDK1.6 only..

Please suggest
","When I have started using Java7, my issue was resolved but DH issue couldn't work with Java6
","2945","<java><url><ssl><jdk1.6><diffie-hellman>","0","0","1","2014-12-24 10:27:18","","0","","","","","2014-12-12 09:24:27",""
"14230096","Java security init Cipher from SecretKeySpec properly","I'm testing Diffie-Hellman KeyAgreement Algorithm. And use it to generate a secret key. But after I get the SecretKeySpec, I'm confronted with problem about using it to initialize a Cipher. Here's my code:
DiffieHellmanModule
package ggicci.infosec;

import java.math.BigInteger;
import java.security.InvalidAlgorithmParameterException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;

import javax.crypto.KeyAgreement;
import javax.crypto.spec.DHParameterSpec;
import javax.crypto.spec.SecretKeySpec;

/**
 * Diffie-Hellman module for demonstrating KeyAgreement Algorithm
 * @author Ggicci
 * @since 2013.01.09
 */
public class DiffieHellmanModule {
    private static final byte[] skip1024ModulusBytes = { (byte) 0xF4,
            (byte) 0x88, (byte) 0xFD, (byte) 0x58, (byte) 0x4E, (byte) 0x49,
            (byte) 0xDB, (byte) 0xCD, (byte) 0x20, (byte) 0xB4, (byte) 0x9D,
            (byte) 0xE4, (byte) 0x91, (byte) 0x07, (byte) 0x36, (byte) 0x6B,
            (byte) 0x33, (byte) 0x6C, (byte) 0x38, (byte) 0x0D, (byte) 0x45,
            (byte) 0x1D, (byte) 0x0F, (byte) 0x7C, (byte) 0x88, (byte) 0xB3,
            (byte) 0x1C, (byte) 0x7C, (byte) 0x5B, (byte) 0x2D, (byte) 0x8E,
            (byte) 0xF6, (byte) 0xF3, (byte) 0xC9, (byte) 0x23, (byte) 0xC0,
            (byte) 0x43, (byte) 0xF0, (byte) 0xA5, (byte) 0x5B, (byte) 0x18,
            (byte) 0x8D, (byte) 0x8E, (byte) 0xBB, (byte) 0x55, (byte) 0x8C,
            (byte) 0xB8, (byte) 0x5D, (byte) 0x38, (byte) 0xD3, (byte) 0x34,
            (byte) 0xFD, (byte) 0x7C, (byte) 0x17, (byte) 0x57, (byte) 0x43,
            (byte) 0xA3, (byte) 0x1D, (byte) 0x18, (byte) 0x6C, (byte) 0xDE,
            (byte) 0x33, (byte) 0x21, (byte) 0x2C, (byte) 0xB5, (byte) 0x2A,
            (byte) 0xFF, (byte) 0x3C, (byte) 0xE1, (byte) 0xB1, (byte) 0x29,
            (byte) 0x40, (byte) 0x18, (byte) 0x11, (byte) 0x8D, (byte) 0x7C,
            (byte) 0x84, (byte) 0xA7, (byte) 0x0A, (byte) 0x72, (byte) 0xD6,
            (byte) 0x86, (byte) 0xC4, (byte) 0x03, (byte) 0x19, (byte) 0xC8,
            (byte) 0x07, (byte) 0x29, (byte) 0x7A, (byte) 0xCA, (byte) 0x95,
            (byte) 0x0C, (byte) 0xD9, (byte) 0x96, (byte) 0x9F, (byte) 0xAB,
            (byte) 0xD0, (byte) 0x0A, (byte) 0x50, (byte) 0x9B, (byte) 0x02,
            (byte) 0x46, (byte) 0xD3, (byte) 0x08, (byte) 0x3D, (byte) 0x66,
            (byte) 0xA4, (byte) 0x5D, (byte) 0x41, (byte) 0x9F, (byte) 0x9C,
            (byte) 0x7C, (byte) 0xBD, (byte) 0x89, (byte) 0x4B, (byte) 0x22,
            (byte) 0x19, (byte) 0x26, (byte) 0xBA, (byte) 0xAB, (byte) 0xA2,
            (byte) 0x5E, (byte) 0xC3, (byte) 0x55, (byte) 0xE9, (byte) 0x2F,
            (byte) 0x78, (byte) 0xC7 };
    private static final BigInteger skip1024Modulus;
    private static final BigInteger skip1024Base;
    private static KeyPairGenerator kpg;
    static {
        skip1024Modulus = new BigInteger(1, skip1024ModulusBytes);
        skip1024Base = BigInteger.valueOf(2);
        try {
            kpg = KeyPairGenerator.getInstance(""DH"");
            DHParameterSpec dhp = new DHParameterSpec(skip1024Modulus,
                    skip1024Base);
            kpg.initialize(dhp);
        } catch (NoSuchAlgorithmException | InvalidAlgorithmParameterException e) {
            e.printStackTrace();
        }
    }

    /**
     * Create KeyAgreement and generate secret key
     * 
     * @param prk_self
     *            the private key from the user who wants to generate the secret
     *            key
     * @param pbk_peer
     *            the public key from the user whom is to be agree on the secret
     *            key with
     * @param lastPhase
     *            flag which indicates whether or not this is the last phase of
     *            this key agreement
     * @return the secret key
     */
    public static SecretKeySpec agreeSecretKey(PrivateKey prk_self,
            PublicKey pbk_peer, boolean lastPhase) throws Exception {
        KeyAgreement ka = KeyAgreement.getInstance(""DH"");
        ka.init(prk_self);
        ka.doPhase(pbk_peer, lastPhase);
        byte[] bkey = ka.generateSecret();
        return new SecretKeySpec(bkey, ""AES"");
    }

    /**
     * Generate a key pair of algorithm ""DiffieHellman""
     * 
     * @return the public and private key pair
     */
    public static KeyPair genDHKeyPair() {
        return kpg.genKeyPair();
    }
}

DHTest
import java.security.KeyPair;
import java.security.PrivateKey;
import java.security.PublicKey;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import ggicci.infosec.DiffieHellmanModule;

public class DHTest {

    public static void main(String[] args) {
        KeyPair kp1 = DiffieHellmanModule.genDHKeyPair();
        KeyPair kp2 = DiffieHellmanModule.genDHKeyPair();
        PublicKey pbk1 = kp1.getPublic();
        PublicKey pbk2 = kp2.getPublic();
        PrivateKey prk1 = kp1.getPrivate();
        PrivateKey prk2 = kp2.getPrivate();
        try {
            SecretKeySpec sk1 = DiffieHellmanModule.agreeSecretKey(prk1, pbk2, true);
            SecretKeySpec sk2 = DiffieHellmanModule.agreeSecretKey(prk2, pbk1, true);
            Cipher cipher = Cipher.getInstance(sk1.getAlgorithm());
            cipher.init(Cipher.ENCRYPT_MODE, sk1); //-->Exception here:Invalid AES key length: 128 bytes
            byte[] ciphertext = cipher.doFinal(""Hello World"".getBytes(""utf-8""));
            cipher.init(Cipher.DECRYPT_MODE, sk2);
            System.out.println(""Decrypted: "" + new String(cipher.doFinal(ciphertext), ""utf-8""));
            System.out.println(""Done"");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}

","You are generating key data for a DiffieHellman key of 128 bytes with the statement:     byte[] bkey = ka.generateSecret();, but then use it as input for a AES keyspec with     new SecretKeySpec(bkey, ""AES""); 
This later trigger the exception you see when trying to initialize a cipher with cipher.init(Cipher.ENCRYPT_MODE, sk1); as an AES key is expected to have 16, 24 or 32 bytes (128, 192 or 256 bits) of key data and not 128 bytes.
","2932","<java><jce><diffie-hellman>","1","0","1","2013-03-23 02:00:23","15582575","0","3","1592264","","2013-01-10 05:58:55","2013-01-09 07:16:05",""
"5682137","Difference between Bouncy Castle ECDH and the .net4 native ECDiffieHellmanCNG","I've been able to generate a private key using the ECDiffieHellmanCNG in .net4 and I've also used the Bouncy Castle C# library to successfully generate private keys. I want to know why the .net 4 version generates a byte array of chars and the ECDHBasicAgreement from Bouncy Castle generates a type of BigInteger (manually implemented). I would like to be able to use these libraries interchangeably. Thanks!
","Eachy Diffie-Hellman implementation uses unique set of constants to derive the shared secret from the public+private key. So neither implementation may derive the exact same shared secret from the very same key pairs. You are better off testing it for yourself or asking it on the BouncyCastle mailing lists.
Note: ECDiffieHellmanCNG is only available on Windows Vista/Windows 7 and above. On the other hand, you can use BouncyCastle on .net 1.1 and above and older Windows versions (2000, XP etc.)
","2378","<c#><bouncycastle><elliptic-curve><diffie-hellman>","3","2","2","2012-02-02 07:12:15","5682706","0","","628273","","2011-04-17 11:14:31","2011-04-15 20:40:29",""
"5682137","Difference between Bouncy Castle ECDH and the .net4 native ECDiffieHellmanCNG","I've been able to generate a private key using the ECDiffieHellmanCNG in .net4 and I've also used the Bouncy Castle C# library to successfully generate private keys. I want to know why the .net 4 version generates a byte array of chars and the ECDHBasicAgreement from Bouncy Castle generates a type of BigInteger (manually implemented). I would like to be able to use these libraries interchangeably. Thanks!
","You're probably in the wrong area of the BouncyCastle class hierarchy for what you want to do.  (I stumbled around in the same place, for probably the same reasons.)  If you're looking to implement ECDH that must be interoperable, you're definitely in the wrong place.
Why is it structured so unintuitively?  Well, the reason is that the abstractions in BouncyCastle are where they focus their attention and provide their value.  Instead of gearing for people saying ""I'm going to use ECDH key-encrypting keys"" and wanting to deal with low-level crypto details, BC expects you to use manager-level abstractions like ""public key"", ""private key"", and ""certificate"", and fill in the security parameters like ""kind"" and ""bitstrength"" in the middle of it.
var _keypair = new ECKeyPairGenerator(""EC"").Init(
    new KeyGenerationParameters(_SecureRandomSingleton, 256)).GenerateKeyPair();
// For the love of all that's holy don't do this in production, encrypt your keys!
var pkcs8gen = new Pkcs8Generator(_keypair.Private);
Stream pkcs8stream = new MemoryStream();
using(System.IO.TextWriter pkcs8writer = new StreamWriter(pkcs8stream))
{
    var mywriter = new Org.BouncyCastle.OpenSsl.PemWriter(pkcs8writer);
    mywriter.WriteObject(pkcs8gen.Generate());
    mywriter.Writer.Flush();
}

BouncyCastle will quite happily waste time and electricity recalculating the public key every time you load this, unless you take care to save _keypair.Public in something like a self-signed X509Certificate.
var _cgen = new X509V3CertificateGenerator();
_cgen.Reset();
_cgen.SetNotBefore(DateTime.Now);
_cgen.SetNotAfter(new DateTime(2999, 12, 31, 23, 59, 59, DateTimeKind.Utc));
var DN = new X509Name(""CN=Self Signed Certificate"");
_cgen.SetIssuerDN(DN);
_cgen.SetSubjectDN(DN);
_cgen.SetPublicKey(_keypair.Public);
_cgen.SetSignatureAlgorithm(             // Can be anything ECDsaWith*
    Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.ECDsaWithSha256.ToString());
_cgen.SetSerialNumber(                   // Serial number collisions suck
     new Org.BouncyCastle.Math.BigInteger(
         8 * 8 - 1,                      // number of bits to generate
         _SecureRandomSingleton));       // source to generate from
var _cert = _cgen.Generate(_keypair.Private);
try
{
    _cert.Verify(_keypair.Public);
} catch (Org.BouncyCastle.Security.Certificates.CertificateException E)
{
    // error-handling code for Verify failure
    // Ridiculous here because we know that _keypair is correct, but good practice
    // to ensure that your keypair is correct and intact
}
Stream certStream = new MemoryStream();
TextWriter certWriter = new StreamWriter(certStream);
var pemWriter = new Org.BouncyCastle.OpenSsl.PemWriter(certWriter);
pemWriter.WriteObject(_cert);
pemWriter.Writer.Flush();

And here's how to load the keypair from the two structures.
AsymmetricKeyParameter privateKey;
AsymmetricKeyParameter publicKey;
AsymmetricKeyPair reconstitutedPair;
certStream.Position = 0;
pkcs8Stream.Position = 0;
using (TextReader pkcs8reader = new StreamReader(pkcs8stream))
{
    PemReader pemreader = new PemReader(pkcs8reader);
    var privateKey = pemreader.ReadObject() as ECPrivateKeyParameters;
    if (thisprivate == null)
        throw new GeneralSecurityException(""failed to read private key"");
    }
}
var certificate = new Org.BouncyCastle.X509.X509CertificateParser()
    .ReadCertificate(certStream);
var publicKey = certificate.GetPublicKey();
reconstitutedPair = new AsymmetricKeyPair(publicKey,privateKey);

Now, that all said, here's the answer your actual question.
.NET 4 provides a byte[] because it's calling OLE platform-native code which does all of the abstraction for you.  It's the most efficient representation for this purpose, because it doesn't parse what it gets back from CNG, performing the least amount of object boxing back into the CLR object space and relying on the programmer to deal with what's essentially an opaque blob.  
BouncyCastle uses its BigInteger class because it's how it implements bignum calculations with 64-bit longs.  It is the most efficient representation for this purpose, because the overhead of processing 8-bit byte by 8-bit byte is far more than 8 times the cost of processing 64-bit long by 64-bit long.  Either way, it requires iteratively calling BitConverter on a different section of the input byte[].  Those iterations and method calls add up, so BigInteger is the ""internal representation of a number"".
These are not even remotely comparable uses, so this is probably not what you want to do.
If you want to get a byte[] from BigInteger, use its ToByteArray() method.  If you want to transform a byte[] to a BigInteger, construct a new BigInteger object with the byte[] containing the bit string you want to calculate with.  new BigInteger(oldBigInteger.ToByteArray()) works as you'd expect (a new BigInteger object which has the same value as the old one).  Directly working with them is usually inappropriate, because EC public keys are made up of two numbers.  Also, ToByteArray() only dumps the value of the integer, it doesn't include any DER encoding information to identify it as an integer of whatever length.
(Also, in C#, 'byte' and 'char' are different things with different sizes.  'byte' is 8 bits long.  'char' is a Unicode code point, and those are potentially larger than 8 bits.  'char' (along with 'string', which is conceptually a sequence of chars) requires encoding/decoding before it'll fit into byte-sized pieces.)
","2378","<c#><bouncycastle><elliptic-curve><diffie-hellman>","3","3","2","2012-02-02 07:12:15","5682706","0","","628273","","2011-04-17 11:14:31","2011-04-15 20:40:29",""
"2835959","Diffie-Hellman -- Primitive root mod n -- cryptography question","In the below snippet, please explain starting with the first ""for"" loop what is happening and why. Why is 0 added, why is 1 added in the second loop. What is going on in the ""if"" statement under bigi. Finally explain the modPow method. Thank you in advance for meaningful replies. 
public static boolean isPrimitive(BigInteger m, BigInteger n) {

    BigInteger bigi, vectorint;
    Vector<BigInteger> v = new Vector<BigInteger>(m.intValue());
    int i;

    for (i=0;i<m.intValue();i++)
        v.add(new BigInteger(""0""));

    for (i=1;i<m.intValue();i++)
    {
        bigi = new BigInteger("""" + i);

        if (m.gcd(bigi).intValue() == 1)
            v.setElementAt(new BigInteger(""1""), n.modPow(bigi,m).intValue());
    }

    for (i=0;i<m.intValue();i++)
    {
        bigi = new BigInteger("""" + i);

        if (m.gcd(bigi).intValue() == 1)
        {
            vectorint = v.elementAt(bigi.intValue());
            if ( vectorint.intValue() == 0)
                i = m.intValue() + 1;
        }
    }

    if (i == m.intValue() + 2)
        return false;
    else
        return true;

}

","
Treat the vector as a list of booleans, with one boolean for each number 0 to m.  When you view it that way, it becomes obvious that each value is set to 0 to initialize it to false, and then set to 1 later to set it to true.
The last for loop is testing all the booleans.  If any of them are 0 (indicating false), then the function returns false.  If all are true, then the function returns true.
Explaining the if statement you asked about would require explaining what a primitive root mod n is, which is the whole point of the function.  I think if your goal is to understand this program, you should first understand what it implements.  If you read Wikipedia's article on it, you'll see this in the first paragraph:


In modular arithmetic, a branch of
  number theory, a primitive root modulo
  n is any number g with the property
  that any number coprime to n is
  congruent to a power of g (mod n).
  That is, if g is a primitive root (mod
  n), then for every integer a that has
  gcd(a, n) = 1, there is an integer k
  such that gk ≡ a (mod n). k is called
  the index of a. That is, g is a
  generator of the multiplicative group
  of integers modulo n.


The function modPow implements modular exponentiation.  Once you understand how to find a primitive root mod n, you'll understand it.

Perhaps the final piece of the puzzle for you is to know that two numbers are coprime if their greatest common divisor is 1.  And so you see these checks in the algorithm you pasted.
Bonus link:  This paper has some nice background, including how to test for primitive roots near the end.
","2321","<vector><root><primitive><diffie-hellman>","-2","1","1","2010-12-17 10:42:12","","1","1","309308","","2010-05-14 17:23:45","2010-05-14 16:46:57",""
"28521374","Possibility of Man in the Middle Attack during TLS handshake","I have read through the previous discussion on the same topic here, here and a few other places. While I understand that during the course of TLS communication, a MiTM is quite not possible, what are the chances of MiTM attack during TLS handshake?
I realize that TLS client hello, server hello and the following packets sent before establishing the key cannot be encrypted. For establishing the key, TLS uses Diffie Hellman protocol. SO will the traditional Man in the Middle attack still work here? 
","High level view:
At the end of the handshake a signature is done covering the whole handshake. This signature implicitly includes that only the server knows the private key of the certificate. Thus the signature can not be faked by a man-in-the-middle as long as the certificate was properly validated by the client.
If you need a more detailed view on how this process really works you will find lots of information on the internet.
","2288","<ssl><diffie-hellman><man-in-the-middle>","0","1","2","2018-04-02 11:04:46","28523502","3","1","-1","","2017-05-23 11:56:59","2015-02-14 23:18:41",""
"28521374","Possibility of Man in the Middle Attack during TLS handshake","I have read through the previous discussion on the same topic here, here and a few other places. While I understand that during the course of TLS communication, a MiTM is quite not possible, what are the chances of MiTM attack during TLS handshake?
I realize that TLS client hello, server hello and the following packets sent before establishing the key cannot be encrypted. For establishing the key, TLS uses Diffie Hellman protocol. SO will the traditional Man in the Middle attack still work here? 
","Just a remark, DH exchange is just a way to exchange keys without knowing the private keys for encryption.   There is nothing inside it to prevent MITM attack.   But if the public key (for both client and server) is validated through some exchange with third party like certification authority, then now MITM attack is not possible, as end-to-end the public key has be verified, so modification in between is mathematically infeasible.
Reference:
http://slideplayer.com/slide/5938889/

","2288","<ssl><diffie-hellman><man-in-the-middle>","0","0","2","2018-04-02 11:04:46","28523502","3","1","-1","","2017-05-23 11:56:59","2015-02-14 23:18:41",""
"3868881","Choosing a encryption key from Diffie-Hellman output","I implemented Diffie–Hellman key exchange in Java with some large groups from RFC 3526. My output is a fairly large array of bytes. Is it safe to use the first 448 bits (56 bytes) of the output for a blowfish key? Should I transform the bytes in any way, or pick any specific bytes for the key?
","From a theoretical point of view, no, it is not safe. Not that I could pinpoint an actual attack; but the output of a Diffie-Hellman key exchange is an element of a group consisting in q elements and offering sqrt(q) security at most. Truncating parts of the encoding of that element does not look like a good idea...
The ""proper"" way is to use a one-way key derivation function. In simple words, process the Diffie-Hellman output with a good hash function such as SHA-256 and use the hash result as key. Hashing time will be negligible with regards to the Diffie-Hellman step. Java already includes fine implementations of SHA-256 and SHA-512, and if you are after compatibility with very old Java implementations (e.g. the Microsoft JVM which was coming with Internet Explorer 5.5) then you can use an independent Java implementation of SHA-2 such as the one in sphlib. Or possibly reimplement it from the spec (that's not hard): FIPS 180-3 (a PDF file).
If you need more than 128 bits for your key then this means that you are a time-traveler from year 2050 or so; 128 bits are (much) more than enough to protect you for the time being, assuming that you use a proper symmetric encryption scheme.
Speaking of which: Blowfish is not really recommended anymore. It has 64-bit blocks, which implies trouble when the encrypted data length reaches a few gigabytes, a size which is not that big nowadays. You would be better off using a 128-bit block cipher such as the AES. Also, in any serious symmetric encryption system you will need a keyed integrity check. This can be done with a MAC (Message Authentication Code) such as HMAC, itself built over a hash function (then again, easy to implement, and there is a Java implementation in sphlib). Or, even better, use the AES in a combined encryption/MAC mode which will handle the tricky details for you (because using a block cipher properly is not easy); lookup CWC and GCM (both are patent-free; the latter has been approved by NIST).
","2212","<java><encryption><blowfish><diffie-hellman>","5","3","2","2010-10-13 08:56:20","3872182","0","","","","","2010-10-06 01:10:07",""
"3868881","Choosing a encryption key from Diffie-Hellman output","I implemented Diffie–Hellman key exchange in Java with some large groups from RFC 3526. My output is a fairly large array of bytes. Is it safe to use the first 448 bits (56 bytes) of the output for a blowfish key? Should I transform the bytes in any way, or pick any specific bytes for the key?
","The solution that you propose depends on whether the most significant bits of a Diffie-Hellman exchange are hard core. There are some small results known that show that the most significant bits are unpredictable, but I'm not aware of a paper that is strong enough to show that your approach is correct.
However, there are several proposals for a key derivation from Diffie-Hellman keys.
E.g. a nice paper is NIST SP 800-135. So far this is only a draft and can be found here. However, it reviews some existing standards. Of course, using a standard is always preferable to develop it yourself.
While Thomas Pornin's proposal looks reasonable it is nonetheless an ad hoc solution. And to be on the safe side you should probably not use it. Rather I'd use something that has been analyzed (e.g. the key derivation scheme use in TLS version 1.2).
","2212","<java><encryption><blowfish><diffie-hellman>","5","0","2","2010-10-13 08:56:20","3872182","0","","","","","2010-10-06 01:10:07",""
"24919173","Generate EC Diffie-Hellman public and private key pair","I need to generate an EC Diffie Hellman key pair. I am using the secp256r1 named curve, and OpenSSL. This is what I have with me so far:
unsigned char *ecdh(size_t *secret_len)
{
    EVP_PKEY_CTX *pctx, *kctx;
    EVP_PKEY_CTX *ctx;
    unsigned char *secret;
    EVP_PKEY *pkey = NULL, *peerkey, *params = NULL;
    /* NB: assumes pkey, peerkey have been already set up */

    /* Create the context for parameter generation */
    if(NULL == (pctx = EVP_PKEY_CTX_new_id(EVP_PKEY_EC, NULL))) 
        printf(""Error in EC key generation\n"");

    /* Initialise the parameter generation */
    if(1 != EVP_PKEY_paramgen_init(pctx)) 
        printf(""Error in EC key generation\n"");

    /* We're going to use the ANSI X9.62 Prime 256v1 curve */
    if(1 != EVP_PKEY_CTX_set_ec_paramgen_curve_nid(pctx, NID_X9_62_prime256v1)) 
        printf(""Error in EC key generation\n"");

    /* Create the parameter object params */
    if (!EVP_PKEY_paramgen(pctx, &params)) 
        printf(""Error in EC key generation\n"");

    /* Create the context for the key generation */
    if(NULL == (kctx = EVP_PKEY_CTX_new(params, NULL))) 
        printf(""Error in EC key generation\n"");

    /* Generate the key */
    if(1 != EVP_PKEY_keygen_init(kctx)) 
        printf(""Error in EC key generation\n"");

    if (1 != EVP_PKEY_keygen(kctx, &pkey)) 
        printf(""Error in EC key generation\n"");

    /* Get the peer's public key, and provide the peer with our public key -
     * how this is done will be specific to your circumstances */
    peerkey = get_peerkey(pkey);

    /* Create the context for the shared secret derivation */
    if(NULL == (ctx = EVP_PKEY_CTX_new(pkey, NULL))) 
        printf(""Error in EC key generation\n"");

    /* Initialise */
    if(1 != EVP_PKEY_derive_init(ctx)) 
        printf(""Error in EC key generation\n"");

    /* Provide the peer public key */
    if(1 != EVP_PKEY_derive_set_peer(ctx, peerkey)) 
        printf(""Error in EC key generation\n"");

    /* Determine buffer length for shared secret */
    if(1 != EVP_PKEY_derive(ctx, NULL, secret_len)) 
        printf(""Error in EC key generation\n"");

    /* Create the buffer */
    if(NULL == (secret = OPENSSL_malloc(*secret_len))) 
        printf(""Error in EC key generation\n"");

    /* Derive the shared secret */
    if(1 != (EVP_PKEY_derive(ctx, secret, secret_len))) 
        printf(""Error in EC key generation\n"");

    EVP_PKEY_CTX_free(ctx);
    EVP_PKEY_free(peerkey);
    EVP_PKEY_free(pkey);
    EVP_PKEY_CTX_free(kctx);
    EVP_PKEY_free(params);
    EVP_PKEY_CTX_free(pctx);

    /* Never use a derived secret directly. Typically it is passed
     * through some hash function to produce a key */
    return secret;
} 

I figured out that for this function to work, i need a EVP_KEY object with the second party's public key. I have this public key in a byte array, and also its length. How do I convert it to the required type? And also I could not find the secp256r1 curve in OpenSSL, but I used the one in the code after doing some research. Is it correct?
Thanks !
","The peer's public key is a point on the curve. From crypto\ec\ec_lcl.h:
struct ec_key_st {
    int version;

    EC_GROUP *group;

    EC_POINT *pub_key;
    BIGNUM   *priv_key;

    unsigned int enc_flag;
    point_conversion_form_t conv_form;

    int     references;
    int flags;

    EC_EXTRA_DATA *method_data;
} /* EC_KEY */;

I believe you need to call EC_POINT_new (c_lcl.h is a private header, so you won't have access to the structure).
Luckily, there's a lot of functions to manipulate them. From the EC_POINT_new(3) docs:

EC_POINTs can be converted to and from various external
  representations. Supported representations are octet strings, BIGNUMs
  and hexadecimal. The format of the external representation is
  described by the point_conversion_form. See EC_GROUP_copy(3) for a
  description of point_conversion_form. Octet strings are stored in a
  buffer along with an associated buffer length. A point held in a
  BIGNUM is calculated by converting the point to an octet string and
  then converting that octet string into a BIGNUM integer. Points in
  hexadecimal format are stored in a NULL terminated character string
  where each character is one of the printable values 0-9 or A-F (or
  a-f).

Also see EC_POINT_set_affine_coordinates_GFp, EC_POINT_set_affine_coordinates_GF2m and EC_KEY_set_public_key:
$ grep -R EC_KEY_set_public_key *
crypto/ec/ec.h:int EC_KEY_set_public_key(EC_KEY *key, const EC_POINT *pub);
...

You can see an example of how to set the point on the OpenSSL wiki at Elliptic Curve Cryptography.
","2182","<c><openssl><encryption-asymmetric><elliptic-curve><diffie-hellman>","3","1","1","2014-07-24 14:32:48","","3","1","","","","2014-07-23 19:23:28",""
"29089311","How to use BouncyCastle's Diffie-Hellman in C#?","I'm writing an app that'll exchange data between a phone and a Windows PC, and I want to protect the data sent with  key generated with a Diffie-Hellman exchange.
I'm trying to use BouncyCastle for that, but the almost non-existant documentation for the C# implementation has me stumped.
What I want to know is: what's the workflow for generating a DH key and computing a shared key when the other side's key is received? (I'm assuming I can send my key as a string and I can work with the other side's key as a string.) What objects/methods do I use in C# for that?
","Alright, after a lot of trial, I got it working. Posting answer in case someone else needs it.
I'll assume the reader (1) knows what Diffie-Hellman is and what it's useful for (read here for details) and (2) already imported Bouncycastle to a .NET project via NuGet.
Imports you'll need:
using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Crypto.Generators;
using Org.BouncyCastle.Crypto.Parameters;
using Org.BouncyCastle.Security;

How to generate g and p:
public DHParameters GenerateParameters()
{
    var generator = new DHParametersGenerator();
    generator.Init(BitSize, DefaultPrimeProbability, new SecureRandom());
    return generator.GenerateParameters();
}

Wanna get g and p as strings?
public string GetG(DHParameters parameters)
    {
        return parameters.G.ToString();
    }

public string GetP(DHParameters parameters)
    {
        return parameters.P.ToString();
    }

How to generate a and A:
public AsymmetricCipherKeyPair GenerateKeys(DHParameters parameters)
    {
    var keyGen = GeneratorUtilities.GetKeyPairGenerator(""DH"");
    var kgp = new DHKeyGenerationParameters(new SecureRandom(), parameters);
    keyGen.Init(kgp);
    return keyGen.GenerateKeyPair();
}

Wanna read a and A as a string?
// This returns A
public string GetPublicKey(AsymmetricCipherKeyPair keyPair)
{
    var dhPublicKeyParameters = _generatedKey.Public as DHPublicKeyParameters;
    if (dhPublicKeyParameters != null)
    {
        return dhPublicKeyParameters.Y.ToString();
    }
    throw new NullReferenceException(""The key pair provided is not a valid DH keypair."");
}

// This returns a
public string GetPrivateKey(AsymmetricCipherKeyPair keyPair)
{
    var dhPrivateKeyParameters = _generatedKey.Private as DHPrivateKeyParameters;
    if (dhPrivateKeyParameters != null)
    {
        return dhPrivateKeyParameters.X.ToString();
    }
    throw new NullReferenceException(""The key pair provided is not a valid DH keypair."");
}

To import the parameters from strings just do:
var importedParameters = new DHParameters(p, g);

To generate b and B just use GenerateKeys() with importedParameters instead of the generated parameters.
Let's say you generated b and B and already got p, g and A. To compute the shared secret:
public BigInteger ComputeSharedSecret(string A, AsymmetricKeyParameter bPrivateKey, DHParameters internalParameters)
{
    var importedKey = new DHPublicKeyParameters(new BigInteger(A), internalParameters);
    var internalKeyAgree = AgreementUtilities.GetBasicAgreement(""DH"");
    internalKeyAgree.Init(bPrivateKey);
    return internalKeyAgree.CalculateAgreement(importedKey);
}

Repeat for A and now you have a shared secret between 2 clients, ready to be used to encrypt communications.
Hope this is useful.
","2115","<c#><bouncycastle><diffie-hellman>","4","8","1","2015-05-01 01:41:47","29980483","0","1","","","","2015-03-17 00:24:57",""
"29052620","How do I enable diffie-hellman-group-exchange-sha1 as the type of key exchange in Twisted Python framework (Kippo HoneyPot Related)?","I have an application that is an SSH client that supports the following key algorithms for negotiation.
diffie-hellman-group-exchange-sha1
diffie-hellman-group14-sha1
diffie-hellman-group-exchange-sha256
I don't have the option of changing the SSH client, so I am trying to solve the problem on the SSH server, which is utilizing Twisted. The SSH server is actually implemented in the Kippo Honeypot, but the underlying problem is with Twisted. 
I see that Twisted supports diffie-hellman-group-exchange-sha1 and diffie-hellman-group1-sha1 in line 221 here:  https://github.com/twisted/twisted/blob/38421d6fcffa1ddb590e51df0e1c6cba6f29d052/twisted/conch/ssh/transport.py
I see that diffie-hellman-group-exchange-sha1 is being disabled in line 60 here:  ​https://github.com/twisted/twisted/blob/38421d6fcffa1ddb590e51df0e1c6cba6f29d052/twisted/conch/ssh/factory.py
The diffie-hellman-group-exchange-sha1 supported but then later disabled. My application's SSH client cannot negotiate a key to establish an SSH connection to the SSH server that is utilizing Twisted.
I see this note in the code prior to disabling it ""log.msg('disabling diffie-hellman-group-exchange because we cannot find moduli file')"" If I try to force Twisted to use diffie-hellman-group-exchange-sha1 I get the following error.
   Traceback (most recent call last):
      File ""/usr/lib/python2.7/dist-packages/twisted/python/log.py"", line 84, in callWithLogger
        return callWithContext({""system"": lp}, func, *args, **kw)
      File ""/usr/lib/python2.7/dist-packages/twisted/python/log.py"", line 69, in callWithContext
        return context.call({ILogContext: newCtx}, func, *args, **kw)
      File ""/usr/lib/python2.7/dist-packages/twisted/python/context.py"", line 118, in callWithContext
        return self.currentContext().callWithContext(ctx, func, *args, **kw)
      File ""/usr/lib/python2.7/dist-packages/twisted/python/context.py"", line 81, in callWithContext
        return func(*args,**kw)
    --- <exception caught here> ---
      File ""/usr/lib/python2.7/dist-packages/twisted/internet/posixbase.py"", line 586, in _doReadOrWrite
        why = selectable.doRead()
      File ""/usr/lib/python2.7/dist-packages/twisted/internet/tcp.py"", line 199, in doRead
        rval = self.protocol.dataReceived(data)
      File ""/home/sudopwn/kippo-master/kippo/core/ssh.py"", line 150, in dataReceived
        transport.SSHServerTransport.dataReceived(self, data)
      File ""/usr/lib/python2.7/dist-packages/twisted/conch/ssh/transport.py"", line 438, in dataReceived
        self.dispatchMessage(messageNum, packet[1:])
      File ""/usr/lib/python2.7/dist-packages/twisted/conch/ssh/transport.py"", line 453, in dispatchMessage
        f(payload)
      File ""/usr/lib/python2.7/dist-packages/twisted/conch/ssh/transport.py"", line 950, in ssh_KEX_DH_GEX_REQUEST
        self.g, self.p = self.factory.getDHPrime(ideal)
      File ""/usr/lib/python2.7/dist-packages/twisted/conch/ssh/factory.py"", line 126, in getDHPrime
        primesKeys = self.primes.keys()
    exceptions.AttributeError: 'NoneType' object has no attribute ‘keys'

Is there a workaround or a solution to allow diffie-hellman-group-exchange-sha1 to be enabled?
","There is no ""workaround"" to the fact that DH key exchange requires moduli.  That's how the math works.  If you look in openssh_compat.py you will see that the getPrimes has a parser for openssh's primes format, and if you have moduli at /path/to/moduli then twistd -n conch --data=/path/to will parse them.  You can generate these with ssh-keygen -G.  You need to implement something similar on HoneyPotSSHFactory, implemented here: https://github.com/desaster/kippo/blob/master/kippo/core/ssh.py#L53
Remember that generating moduli takes a while so you will want to do it in advance.
","2091","<python><ssh><twisted><diffie-hellman><honeypot>","1","1","1","2015-04-30 16:55:34","","0","","","","","2015-03-14 18:28:43",""
"13319109","Performance of Bouncy Castle in Java","I'm having some problems with performance using the Bouncy Castle Provider when generating DH parameters. Anyone knows why the Bouncy Castle example below is about 50 times slower than using the standard provider?
Using Bouncy Castle provider:
Security.addProvider(new BouncyCastleProvider());
AlgorithmParameterGenerator generator = AlgorithmParameterGenerator.getInstance(""DH"", ""BC"");
for (int i = 0; i < 3; i++) {
    generator.init(1024, new SecureRandom());
    AlgorithmParameters params = generator.generateParameters();
    DHParameterSpec dhSpec = (DHParameterSpec) params.getParameterSpec(DHParameterSpec.class);
    System.out.println(""P: "" + dhSpec.getP() + "", G:"" + dhSpec.getG());
}

Using standard provider:
AlgorithmParameterGenerator generator = AlgorithmParameterGenerator.getInstance(""DH"");
for (int i = 0; i < 3; i++) {
    generator.init(1024, new SecureRandom());
    AlgorithmParameters params = generator.generateParameters();
    DHParameterSpec dhSpec = (DHParameterSpec) params.getParameterSpec(DHParameterSpec.class);
    System.out.println(""P: "" + dhSpec.getP() + "", G:"" + dhSpec.getG());
}

","The reason for the speed difference is that the BC provider is searching for a ""Safe Prime"", i.e. a prime p: p = 2q + 1, where q is also prime.
As you noticed, this is a lot slower than just finding a prime. The standard provider is not doing that, as can easily be verified.
Looking for a safe prime might be overkill, as it may suffice to have p = 2Rq + 1 for some R, which admits of a considerably faster implementation, while still ensuring a large prime factor of (p - 1).
It shouldn't be necessary to generate these parameters yourself often (if at all). A single set can be used for many key pairs, and there are standardized sets of parameters around that you may be better off using.
","2008","<java><performance><bouncycastle><diffie-hellman>","3","4","1","2012-11-13 10:40:12","13359253","0","","","","","2012-11-10 03:56:58",""
"33079925","AsymmetricKeyParameter as byte[]","I'm trying to do an ECDH key exchange using C# BouncyCastle. 
I have been successful in creating the necessary AsymmetricCipherKeyPair objects and I'm also able to generate the shared key of the other partys public key.
However, to actually exchange the public key, I need it as a byte[] or at least anything I can turn into raw data, since the protocol I'm using to transport the keys between the parties wont take any BouncyCastle object.
   X9ECParameters ecPars = NistNamedCurves.GetByName(""P-521"");
  ECDomainParameters ecDomPars = new ECDomainParameters(ecPars.Curve, ecPars.G, ecPars.N, ecPars.H, ecPars.GetSeed());
  IAsymmetricCipherKeyPairGenerator gen = GeneratorUtilities.GetKeyPairGenerator(""ECDH"");
  gen.Init(new ECKeyGenerationParameters(ecDomPars, new SecureRandom()));

  AsymmetricCipherKeyPair keyPair = gen.GenerateKeyPair();
  IBasicAgreement keyAgreement = AgreementUtilities.GetBasicAgreement(""ECDH"");
  keyAgreement.Init(keyPair.Private);

So what I'm needing here is the key value of keyPair.Public as a byte[].
I hope you understand where I'm heading and can help me.
","If you have only an ECPublicKeyParameter 'pub' (i.e. from keyPair.Public), you can get the public point encoding:
byte[] data = pub.Q.GetEncoded();

At the receiving end:
ECCurve curve = ecDomPars.Curve;
ECPoint q = curve.DecodePoint(data);
ECPublicKeyParameter peerPub = new ECPublicKeyParameter(q, ecDomPars);

It's more typical to exchange certificates, or else you will have no assurance of whom you're ""agreeing"" with.
I'm a bit concerned that you might be ""rolling your own crypto protocol""; if this is for a real application, please consider using an existing protocol, maybe just TLS. 
","1992","<c#><bouncycastle><public-key><elliptic-curve><diffie-hellman>","1","1","1","2015-10-19 15:39:47","33218568","0","1","1364007","","2015-10-12 11:29:38","2015-10-12 11:25:46",""
"14757108","How to force the use of Diffie Hellman Key Exchange","I want to create a TLS Socket connection. I know TLS has a few ways to exchange the key eg. RSA, Diffie-Hellman, etc. How can I force the use of Diffie-Hellman key exchange instead of other forms of key exchange?
I know that if using Diffie-Hellman key exchange, it is vulnerable to man-in-middle attack. When using RSA, we have server authentication which prevents MITM. But one concern I have is that using RSA prohibits the forward secrecy.
What should I do?
","Specifying the key exchange method is done by choosing a cipher suite that supports that key exchange method.
You can the cipher suite on an SSLSocket (or SSLEngine) using setEnabledCipherSuites.
The tables of supported cipher suites and those enabled by default with the Oracle JRE are available in the SunJSSE provider documentation.
The anonymous cipher suites (_DH_anon_) are the ones that are vulnerable to MITM attacks. 
The _DH_RSA_ or _DH_DSA_ cipher suites also use RSA or DSA for the authentication of the DH key exchange (not for the key exchange itself), to prevent MITM attacks. In addition, the Ephemeral DH cipher suites (those that contain _DHE_, or _ECDHE_ for the elliptic curve variant) provide Perfect Forward Secrecy. (The non-ephemeral _DH_RSA_ or _DH_DSA_ cipher suites are not supported by the Sun JSSE provider anyway.)
","1976","<java><ssl><diffie-hellman>","0","3","1","2016-09-18 11:25:51","14759695","2","","276232","","2016-09-18 11:25:51","2013-02-07 17:21:17","2013-02-08 00:44:21"
"22149271","ECDH secrets generated by BouncyCastle Java API and by OpenSSL are different","I'm trying to make use of elliptic curve crypto. I need two implementations of the same thing, one in Java and one in C. I'm testing them using two key pairs which were generated using the curve secp256k1. When I generate the derived secret in Java I always get a different number from what I get from OpenSSL.
Java code:
/* privateKey and peerPublicKey are generated with the following parameters */
ECParameterSpec paramSpec = ECNamedCurveTable.getParameterSpec(""secp256k1"");
/* ... */
Provider BC = new BouncyCastleProvider();
KeyAgreement agr = KeyAgreement.getInstance(""ECDH"", BC);
agr.init(privateKey);
agr.doPhase(peerPublicKey, true);
byte[] secret = agr.generateSecret();

C code
/* pkey and peerkey are generated using EC_KEY_new_by_curve_name(NID_secp256k1) */
/* and than wrapped in an EVP_PKEY */
EVP_PKEY_CTX *ctx = EVP_PKEY_CTX_new(pkey, NULL);
uint8_t *secret = NULL;
size_t secret_len;
EVP_PKEY_derive_init(ctx);
EVP_PKEY_derive_set_peer(ctx, peerkey);
EVP_PKEY_derive(ctx, NULL, &secret_len);
secret = malloc(secret_len);
EVP_PKEY_derive(ctx, secret, &secret_len);

I'm sure that the keys are valid and that they are the same both in C and in Java code, but I don't understand why the derived secret is different. Am I missing something?
Thanks
","EVP_PKEY_CTX *ctx = EVP_PKEY_CTX_new(pkey, NULL);
uint8_t *secret = NULL;
size_t secret_len;
EVP_PKEY_derive_init(ctx);
EVP_PKEY_derive_set_peer(ctx, peerkey);
EVP_PKEY_derive(ctx, NULL, &secret_len);
secret = malloc(secret_len);
EVP_PKEY_derive(ctx, secret, &secret_len);

This code looks like its missing a few steps. For example, EVP_PKEY_paramgen_init is not present.
The OpenSSL wiki has an example at Elliptic Curve Diffie-Hellman. I'm going to copy/paste it below to avoid the link-only answer, but I believe its the work of Matt Caswell.
EVP_PKEY_CTX *pctx, *kctx;
EVP_PKEY_CTX *ctx;
unsigned char *secret;
EVP_PKEY *pkey = NULL, *peerkey, *params = NULL;

/* Create the context for parameter generation */
if(NULL == (pctx = EVP_PKEY_CTX_new_id(EVP_PKEY_EC, NULL))) handleErrors();

/* Initialise the parameter generation */
if(1 != EVP_PKEY_paramgen_init(pctx)) handleErrors();

/* We're going to use the ANSI X9.62 Prime 256v1 curve */
if(1 != EVP_PKEY_CTX_set_ec_paramgen_curve_nid(pctx, NID_X9_62_prime256v1)) handleErrors();

/* Create the parameter object params */
if (!EVP_PKEY_paramgen(pctx, &params)) handleErrors();

/* Create the context for the key generation */
if(NULL == (kctx = EVP_PKEY_CTX_new(params, NULL))) handleErrors();

/* Generate the key */
if(1 != EVP_PKEY_keygen_init(kctx)) handleErrors();
if (1 != EVP_PKEY_keygen(kctx, &pkey)) handleErrors();

/* Get the peer's public key, and provide the peer with our public key -
 * how this is done will be specific to your circumstances */
peerkey = get_peerkey(pkey);

/* Create the context for the shared secret derivation */
if(NULL == (ctx = EVP_PKEY_CTX_new(pkey, NULL))) handleErrors();

/* Initialise */
if(1 != EVP_PKEY_derive_init(ctx)) handleErrors();

/* Provide the peer public key */
if(1 != EVP_PKEY_derive_set_peer(ctx, peerkey)) handleErrors();

/* Determine buffer length for shared secret */
if(1 != EVP_PKEY_derive(ctx, NULL, secret_len)) handleErrors();

/* Create the buffer */
if(NULL == (secret = OPENSSL_malloc(*secret_len))) handleErrors();

/* Derive the shared secret */
if(1 != (EVP_PKEY_derive(ctx, secret, secret_len))) handleErrors();

EVP_PKEY_CTX_free(ctx);
EVP_PKEY_free(peerkey);
EVP_PKEY_free(pkey);
EVP_PKEY_CTX_free(kctx);
EVP_PKEY_free(params);
EVP_PKEY_CTX_free(pctx);

/* Never use a derived secret directly. Typically it is passed
 * through some hash function to produce a key */
return secret;



When I generate the derived secret in Java I always get a different number from what I get from OpenSSL.

Each run of the protocol will produce different results. That's because each party picks a random value for each run of the protocol. That is, the a in g^a is random and different for each run, so the public key A = g^a is different for each run. 
If everything is working correctly, you'll never see the parties use the same values, or one party to reuse a past value. Independent executions will never produce the same result. It does not matter if its OpenSSL ↔ OpenSSL, OpenSSL ↔ Java, or Java ↔ Java. They will always produce different results.
","1975","<java><openssl><bouncycastle><elliptic-curve><diffie-hellman>","1","2","1","2014-03-04 13:23:47","","1","","","","","2014-03-03 14:27:12",""
"14531113","How to use Diffie-Hellman key exchange to secure data transfer between a client and server?","I am a beginner programmer. I have been asked to secure data transfer between a client and a server by using a Diffie-Hellman key exchange. I have searched a lot on this issue, but I have just found some example codes that find big integers p and g. 
The problem is I don't know how to use these numbers to secure a transfer of information. I would like to transfer ""strings"" over the connection between the client and the server, not integers. How can these numbers be useful to me? I'm approaching the deadline for this project for the course I`m taking and could really use some help.
","I'd suggest reading and undertanding this: http://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange
And here is a PHP code snippet that will help...
GENERATOR=2 and PRIME (300 digit prime) are constants 
        // generate server secret
        $privateKey = 0;

        for ($i=0; $i<100; $i++) {
            if ($i==0) {
                $privateKey = mt_rand(1, 9);
            } else {
                $privateKey .= mt_rand(0, 9);
            }
        }

        // output server public key
        echo gmp_strval(gmp_powm(GENERATOR, $privateKey, PRIME));

        // calculate server secret key
        $secretKey = md5(
            gmp_strval(
                gmp_powm($_POST['public_key'], $privateKey, PRIME)
            )
        );

","1887","<java><diffie-hellman>","0","0","1","2013-03-18 18:16:41","","2","","104223","","2013-03-18 18:16:41","2013-01-25 22:07:56",""
"17931487","Load certificate keys into CngKey class for use with DiffieHellman (ECDiffieHellmanCng class)","This is related to .NET / C#. Lets assume there is a certificate + private key (P521 ECC one) inside a PFX or a PKCS#12 file. We have loaded this certificate and it's private key into the Windows certificate store by installing it (either double clicking the PFX or running certutil -f -p myPfxPassword -importPFX MY SomeEcCert.pfx). I have noted that if the certificate is compatible (eg. p521 curve), it is automatically installed as a CNG certificate/key.
Now, how can I load the private key into a CngKey so I can then use it inside the ECDiffieHellmanCng class? I would also like to load the X509 (CNG) certificate to read it's serial #, issuer, common name etc for some bookkeeping. 
var myCngKey = SomehowLoadTheCngKey(""my ecc certificate""); // <== ??
var myDH = new ECDiffieHellmanCng(myCngKey);

","Well, .NET's doesn't have a good API into CNG. If you even scratch the surface of their API you immediately see it's kinda ridiculous, especially considering both are from Microsoft and CNG is the most serious of all Crypto APIs on the entire windows platform.
So you need to use CLRSecurity which provides C# interfaces (via P/Invoke) into the C++ CNG API. Even with that it's not the nicest of API designs; but it helps.
// Load the cert, many ways, one implementation
var store = new X509Store(StoreName.My, StoreLocation.LocalMachine);
store.Open(OpenFlags.OpenExistingOnly | OpenFlags.ReadOnly);
var certs = store.Certificates.Find(X509FindType.FindBySubjectName, ""My cert subject name"", true);
store.Close();

if (certs.Count > 0)
    cert = certs[0];
else
    return;

// Magic happens here! We load the private CngKey (if it exists)
// You need CLR Security for this, it manages the P/Invoke
// into the C++ api behind the scenes. 
var pvtCngKey = cert.GetCngPrivateKey(); 

// Create the DiffieHellman helper
var ecDh = new ECDiffieHellmanCng(ourPvtEcCngKey)
{
   KeyDerivationFunction = ECDiffieHellmanKeyDerivationFunction.Hash,
   HashAlgorithm = CngAlgorithm.Sha256
};

ECDiffieHellmanCngPublicKey theirPubCngKey = LoadOtherPartiesCngPublicKey(theirCert);
byte[] symKey = ecDh.DeriveKeyMaterial(theirPubCngKey);

","1857","<c#><encryption><public-key-encryption><diffie-hellman><cng>","3","1","1","2014-04-02 18:23:25","","0","","862563","","2013-08-09 01:28:36","2013-07-29 18:27:31",""
"29745760","Does JDK 1.8 support Cipher suites with Diffie-Hellman (DH) keys of size 4096 bits","I want to know if JDK 1.8 supports DH key length of 4096 bits. 
Everywhere I searched, I found that jdk.tls.ephemeralDHKeySize can accept only between 1024 and 2048 bits. 
I have to connect to a site which supports 

""TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 (0x9e)   DH 4096 bits (p: 512, g:
  1, Ys: 512)"".

But I am getting 
""Could not generate DH keypair"" Exception. 
EDIT:
Adding a bit additional info,
I am using Apache httpclient-4.2.5 for connecting to the site. 
The server also supports 

""TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 (0x9f) - 4096 bits"". 

When I use JDK 1.8 and try to connect the cipher suite is getting selected by the Server but JDK 1.8 is supporting only 2048 bits and my connection is failing. 
EDIT:
Bouncy castle can be used as a workaround to support 4096 bits.
http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6521495
","Apparently it works on Windows and OS X, but not on Linux. Don't ask why, all I know is Windows and OS X clients can connect via Java to servers with 4096 key size while Linux clients can't.
https://bugzilla.redhat.com/show_bug.cgi?id=1163501
It's not even fixed in Fedora yet, so it may take quite a while before it makes it into CentOS/RHEL.
","1840","<ssl><java-8><apache-httpclient-4.x><diffie-hellman>","7","0","1","2015-06-25 07:30:58","","2","5","4809941","","2015-06-25 07:30:58","2015-04-20 10:47:40",""
"48436300","Disable Diffie-Hellman (DH) key in Ubuntu 16 and Nginx","For website hosted in Ubuntu 16 with Nginx, SSL tests always shows B grade. Below  is the reason shown. See also the attached image.  Current SSL cipher settings are below.  I have noticed the same thing in around 8 to 10 servers I have with ubuntu 16 and Nginx. 
ssl_protocols TLSv1.2 TLSv1.1 TLSv1;
ssl_ciphers 'AES256+EECDH:AES256+EDH::!EECDH+aRSA+RC4:!RC4:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS';
ssl_session_cache shared:SSL:10m;


Diffie-Hellman (DH) key exchange parameters. Grade capped to B


","The Mozilla SSL Configuration Generator is the best way to properly configure your TLS setup.
","1746","<ssl><nginx><ssl-certificate><ubuntu-16.04><diffie-hellman>","3","-2","2","2018-01-26 17:49:30","","0","1","3961903","","2018-01-25 06:09:04","2018-01-25 05:37:26",""
"48436300","Disable Diffie-Hellman (DH) key in Ubuntu 16 and Nginx","For website hosted in Ubuntu 16 with Nginx, SSL tests always shows B grade. Below  is the reason shown. See also the attached image.  Current SSL cipher settings are below.  I have noticed the same thing in around 8 to 10 servers I have with ubuntu 16 and Nginx. 
ssl_protocols TLSv1.2 TLSv1.1 TLSv1;
ssl_ciphers 'AES256+EECDH:AES256+EDH::!EECDH+aRSA+RC4:!RC4:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS';
ssl_session_cache shared:SSL:10m;


Diffie-Hellman (DH) key exchange parameters. Grade capped to B


","Finally I found the solution.  By default Linux  uses inbuilt DH provided by openssl. This uses weak key.  The solution is to generate our own.  Use the below to generate new one. I used 2048, you can also try 4096.

openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048

Then add it to nginx main conf and reload.  Here we go. We now have A grade. 

ssl_dhparam /etc/nginx/ssl/dhparam.pem;


Reference urls:- 
https://michael.lustfield.net/nginx/getting-a-perfect-ssl-labs-score
https://geekflare.com/nginx-webserver-security-hardening-guide/
","1746","<ssl><nginx><ssl-certificate><ubuntu-16.04><diffie-hellman>","3","5","2","2018-01-26 17:49:30","","0","1","3961903","","2018-01-25 06:09:04","2018-01-25 05:37:26",""
"35616770","Derive Key with ECDiffieHellmanP256","I am working on a project to integrate with the new Push API that exists in Firefox and is being developed as a W3C standard.
Part of this is encrypting the data. The server will receive a Diffie Hellman P256 Curve (Generated in JS using var key = subscription.getKey('p256dh');)
An example of this when converted to a .NET base64 is 

BOAiqZO6ucAzDlZKKhF1aLjNpU8+R2Pfsz4bQzNpV145D+agNxvLqyu5Q2tLalK2w31RpoDHE8Sipo0m2jiX4WA=

However I ran into issues generating the Derived Material.
var key1 = Convert.FromBase64String(""<stringFromAbove>"").ToList() // You can criticize my .toList inefficiencies later

// .NET doesn't like the key without these prefixes. See here
// http://stackoverflow.com/questions/24251336/import-a-public-key-from-somewhere-else-to-cngkey
// I know the bytes don't match that post, but that is because the key type is different between their example and mine.
var keyType = new byte[] { 0x45, 0x43, 0x4B, 0x31 };
var keyLength = new byte[] { 0x20, 0x00, 0x00, 0x00 };
key1.RemoveAt(0);
key1 = keyType.Concat(keyLength).Concat(key1).ToList();

ECDiffieHellmanCng a = new ECDiffieHellmanCng();
a.KeyDerivationFunction = ECDiffieHellmanKeyDerivationFunction.Hash;
// If I set this as CngAlgorithm.Sha256 it works, but that's not what Firefox gives me.
a.HashAlgorithm = CngAlgorithm.ECDiffieHellmanP256; 
a.KeySize = 256; // It complains if I don't add this since keys are different lengths.

// Now time to actually import the key
CngKey k = CngKey.Import(key1.ToArray(), CngKeyBlobFormat.EccPublicBlob); // Works successfully
byte[] derivedMaterial = a.DeriveKeyMaterial(k); // Exception Here


System.Security.Cryptography.CryptographicException: The requested operation is not supported.

What do I not understand correctly (or on the more sad side, what is not implemented correctly (or at all) in windows/.NET)?
As an alternative, if somebody could explain how to port this Node JS library to .NET that'd work too (I think that's a bit of a reach) 
Update
I needed to keep working through the rest of the problem and not be held up by the encryption, so I used a Node.JS Wrapper to allow for further development on the .NET side. The node code simply generates the local public key and the Shared secret and returns those values to me. I still need to get this working without the Node wrapper.
Because of this test I can confirm that the rest of the code (not included here) works, so the issue definitely lies in the code above (and my inability to generate the derived key material if the HashAlgorithm is specified as CngAlgorithm.ECDiffieHellmanP256
","This solution is only confirmed working on Windows 10 64-bit. It is confirmed not working on Windows 8.1 64 bit, and is untested on other platforms.
The problem is that ECDiffieHellmanP256 is not a hash algorithm, but you are specifying to use a hash key derivation function. Your KeyDerivationFunction should be set to ECDiffieHellmanKeyDerivationFunction.Tls, and you need to specify the seed and label for the KDF.
Your fixed code looks like this:
var key1 = Convert.FromBase64String(""BOAiqZO6ucAzDlZKKhF1aLjNpU8+R2Pfsz4bQzNpV145D+agNxvLqyu5Q2tLalK2w31RpoDHE8Sipo0m2jiX4WA="").ToList();
var keyType = new byte[] { 0x45, 0x43, 0x4B, 0x31 };
var keyLength = new byte[] { 0x20, 0x00, 0x00, 0x00 };
key1.RemoveAt(0);
key1 = keyType.Concat(keyLength).Concat(key1).ToList();

ECDiffieHellmanCng a = new ECDiffieHellmanCng();
a.KeyDerivationFunction = ECDiffieHellmanKeyDerivationFunction.Tls;

byte[] label = new byte[32];
string labelStr = ""The purpose"";
Encoding.ASCII.GetBytes(labelStr, 0, labelStr.Length, label, 0);
a.Label = label;

byte[] seed = new byte[32];
RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
rng.GetBytes(seed);
a.Seed = seed;

a.HashAlgorithm = CngAlgorithm.ECDiffieHellmanP256;
a.KeySize = 256;

CngKey k = CngKey.Import(key1.ToArray(), CngKeyBlobFormat.EccPublicBlob);
byte[] derivedMaterial = a.DeriveKeyMaterial(k);

Note that I set a nonsense value to the a.Label property.
The NIST SP 800-108 publication defines the label as:

Label – A string that identifies the purpose for the derived keying material, which is encoded as a binary string.

I'm not sure what the purpose should be set to in your specific context. If anyone has a better understanding what this string should be, please leave a comment.
Also note that if you're going to call this function repeatedly, you should probably keep a persistent copy of the RNGCryptoServiceProvider and use that.
Thanks to a comment by Simon Mourier which got me on the right track.
","1736","<c#><elliptic-curve><diffie-hellman>","15","5","1","2016-03-04 00:08:32","35783393","13","1","2106228","","2016-02-27 21:31:36","2016-02-25 01:50:08",""
"6681549","Determining a Private Key (Diffie-Hellman)","I've been given a challenge and it has to do with testing a friend's encryption process.
It's a Diffie-Hellman exchange process, and here are the known variables / constants: 

P, G 
my generated private key (variable)
my generated public key(variable)
the recipients public key (constant). 

When looking at my private key - P and G are both within it. For example, the first 'x' bytes seem to have no relation to anything, then the next 'y' bytes are P, the next two bytes are static, and the next 'z' bytes are G, the remainder are variable.
The process is to encrypt a file, and send it to a device, which will in turn decrypt it - my ideas of attack are this:

try to duplicate the secret shared key. The problem here is that is fine as long as I know my generated private key, at which case - I don't for the files he's given me.
Try to find the recipients private key. Here, I could brute force my way in - but would take forever unless I had some sort of supercomputer.

Are there any other options to look at when trying to attack this?
","I probably should keep my mouth shut, but it is also an opportunity for those interested in Diffie-Hellman to learn something:

Simple implementation of Diffie-Hellman to generate the shared key is vulnerable to man-in-the-middle attacks. However, most implementation of DH tackle this issue properly by adding authentication between Alice and Bob.
If your implementation of DH allows declaring a new set of PQG, you could request the other peer to use a new weak set. If Bob does not verify the quality of this set, then it is vulnerable to attacks.
DH requires Alice to send X = g^x, if Bob does not check the quality of X, he is vulnerable, since the space of possible values of the secret key can significantly be reduced by Eve in the middle.
If your implementation does not remember compromised keys, they can be re-used by Eve.
If your implementation does not remember compromised certificates, they can be re-used by Eve.
If your implementation does not check certificates, Eve will have fun for sure.

","1726","<java><diffie-hellman>","4","2","1","2011-08-05 17:15:27","","2","","419","","2011-07-14 23:16:01","2011-07-13 15:37:39",""
"36353025","Java JVM Hotspot ephemeralDHKeySize","I am trying to increase the DH key size from 1024 bits to 2048 bits, as per this question: How to expand DH key size to 2048 in java 8.
However, it does not seem to work. Relevant information:
java -version
java version ""1.8.0_45"" 
Java(TM) SE Runtime Environment (build 1.8.0_45-b14) 
Java HotSpot(TM) 64-Bit Server VM (build 25.45-b02, mixed mode)

And
System.out.println(Security.getProperty(""jdk.tls.ephemeralDHKeySize""));
2048

However, if I connect to that server from a client, it uses 1024-bit:
openssl s_client -connect server:port -cipher ""EDH"" 2>/dev/null | grep -ie ""Server .* key""
Server Temp Key: DH, 1024 bits

Any idea what else I can do?
","I'm concerned that you're calling Security.getProperty(""jdk.tls.ephemeralDHKeySize"") to check the DH key size. The jdk.tls.ephemeralDHKeySize property is not a Security property, it's a System property, which leads me to suspect that you're not setting it properly. If you're setting it like this:
Security.setProperty(""jdk.tls.ephemeralDHKeySize"", ""2048""); // don't do this

then that's not going to work. Try either passing:
-Djdk.tls.ephemeralDHKeySize=2048

in the command-line of your program, or set it like this:
System.setProperty(""jdk.tls.ephemeralDHKeySize"", ""2048"");

in code. 
","1685","<java><diffie-hellman>","4","1","1","2016-04-03 17:54:51","36388986","7","","-1","","2017-05-23 10:27:27","2016-04-01 09:44:48",""
"17491812","Man in the middle attack in LAN","I am pretty new in this kind of things.
I have a local area network, accessed by some users via cable some and via wifi others.
I have developed a local application in php which receives only some of the LAN clients as authentic users; they can be identified by the system with an algorithm of key exchange similar to Diffie–Hellman's, to estabilish a secret key. The client then asks to be identified throug such a channel.
The problem is, MITM attack is possible in this kind of situation. I read wikipedia about how such an attack is executed: somebody listens the messages of the two, and puts himself between them creating two different secret keys for the client and server.
This attack is reality, so it must be possible; but I do not understand how it happens in a LAN: 
the attacker can listen to the messages, and inject message of his own, impersoning the two subjects of the communications by forging https' IP fields if necessary... 
But he can't prevent the original unforged message to reach, concurrently (but also later, because of forging process taking the attacker computer some time) with his malevolent forged one, the recipient! Especially in a wifi connection, which cannot be cut off for a single user, for example cutting his cable.
So, client and server receive two different http requests from each other, a true and a forged one; isn't this a way for them to recognize that such an attack is in progress?
Maybe this question is newby-ous; as I said, I am pretty new at this.
","I think that is a scenario where you would use a digital signature (which also uses the idea that asymmetric encryption/Diffie-Hellman uses, that is ""public and private key"") to sign your messages. 
The MITM attacker can not forge a message with a bad ""from"" and then sign it with the private signature of the original sender. The recipient uses the public part of the signature/certificate to validate the message. So that way he will not only know he is being attacked but also which message is genuine.
","1612","<security><diffie-hellman><man-in-the-middle>","2","1","1","2013-07-05 15:22:24","17491948","1","","","","","2013-07-05 14:59:11",""
"18143476","Diffie-Hellman Library for c++ and java","I want to exchange a public key between a c++ application and and android application.
I decided to use Diffie-Hellman. On the C++ side this library looks promising for generating the keys with c++. Now I am looking for an implementation for java to generate the keys on the android smartphone. 
What libraries would you suggest, also on the c++ side?
In the end i want to share the public key as a string via UDP.
kind regards 
","A long time ago I used Crypto++ for the C++ which worked well for me and has support for many different algorithms.
http://www.cryptopp.com/
For android the KeyAgreement class can be used on some JavaVM, it is initialized with a String to choose the algorithm. You could try to instantiate it with ""DiffieHellman"" and see if you get an instance.
According to Java7 docs, http://docs.oracle.com/javase/7/docs/api/javax/crypto/KeyAgreement.html - 
""Every implementation of the Java platform is required to support the following standard KeyAgreement algorithm:
DiffieHellman""
Test it and see if that includes dalvik or not.
","1582","<java><android><c++><diffie-hellman>","1","2","1","2013-08-09 09:42:16","18143804","1","1","","","","2013-08-09 09:24:05",""
"12993410","Why does iOS 5 fail to connect to a server running JDK 1.6, but not JDK 1.5","We have a Java Socket Server listening on an SSLSocket (port 443) and an iOS application that connects with it.  When running on iOS 5.1, the application stopped working when we upgraded the Java version of the server from JDK 1.5 to 1.6 (or 1.7). The app connects just fine to JDK 5 and 6 when running on iOS 6.
The iOS app is reporting an error:  -9809 = errSSLCrypto.  On the Java side, we get javax.net.ssl.SSLException: Received fatal alert: close_notify.  
On the Java server side, we have enabled all the available cipher suites.  On the client side we have tested enabling several different suites, although we have yet to complete a test involving each one individually enabled.  Right now, it is failing when we use TLS_DH_anon_WITH_AES_128_CBC_SHA although it has failed with others and we are starting to think it's not the suite. 
Here is the debug output.  It makes it all the way to ServerHelloDone and then fails shortly thereafter:
Is secure renegotiation: false
[Raw read]: length = 5
0000: 16 03 03 00 41                                     ....A
[Raw read]: length = 65
0000: 01 00 00 3D 03 03 50 83   1E 0B 56 19 25 65 C8 F2  ...=..P...V.%e..
0010: AF 02 AD 48 FE E2 92 CF   B8 D7 A6 A3 EA C5 FF 5D  ...H...........]
0020: 74 0F 1B C1 99 18 00 00   08 00 FF 00 34 00 1B 00  t...........4...
0030: 18 01 00 00 0C 00 0D 00   08 00 06 05 01 04 01 02  ................
0040: 01                                                 .
URT-, READ: Unknown-3.3 Handshake, length = 65
*** ClientHello, Unknown-3.3
RandomCookie:  GMT: 1333992971 bytes = { 86, 25, 37, 101, 200, 242, 175, 2, 173, 72, 254, 226, 146, 207, 184, 215, 166, 163, 234, 197, 255, 93, 116, 15, 27, 193, 153, 24 }
Session ID:  {}
Cipher Suites: [TLS_EMPTY_RENEGOTIATION_INFO_SCSV, TLS_DH_anon_WITH_AES_128_CBC_SHA, SSL_DH_anon_WITH_3DES_EDE_CBC_SHA, SSL_DH_anon_WITH_RC4_128_MD5]
Compression Methods:  { 0 }
Unsupported extension signature_algorithms, data: 00:06:05:01:04:01:02:01
***
[read] MD5 and SHA1 hashes:  len = 65
0000: 01 00 00 3D 03 03 50 83   1E 0B 56 19 25 65 C8 F2  ...=..P...V.%e..
0010: AF 02 AD 48 FE E2 92 CF   B8 D7 A6 A3 EA C5 FF 5D  ...H...........]
0020: 74 0F 1B C1 99 18 00 00   08 00 FF 00 34 00 1B 00  t...........4...
0030: 18 01 00 00 0C 00 0D 00   08 00 06 05 01 04 01 02  ................
0040: 01                                                 .
%% Created:  [Session-1, TLS_DH_anon_WITH_AES_128_CBC_SHA]
*** ServerHello, TLSv1
RandomCookie:  GMT: 1333992972 bytes = { 100, 3, 56, 153, 7, 2, 251, 64, 41, 32, 66, 240, 227, 181, 55, 190, 2, 237, 146, 0, 73, 119, 70, 0, 160, 9, 28, 207 }
Session ID:  {80, 131, 30, 12, 241, 73, 52, 38, 46, 41, 237, 226, 199, 246, 156, 45, 3, 247, 182, 43, 223, 8, 49, 169, 188, 63, 160, 41, 102, 199, 50, 190}
Cipher Suite: TLS_DH_anon_WITH_AES_128_CBC_SHA
Compression Method: 0
Extension renegotiation_info, renegotiated_connection: <empty>
***
Cipher suite:  TLS_DH_anon_WITH_AES_128_CBC_SHA
*** Diffie-Hellman ServerKeyExchange
DH Modulus:  { 233, 230, 66, 89, 157, 53, 95, 55, 201, 127, 253, 53, 103, 18, 11, 142, 37, 201, 205, 67, 233, 39, 179, 169, 103, 15, 190, 197, 216, 144, 20, 25, 34, 210, 195, 179, 173, 36, 128, 9, 55, 153, 134, 157, 30, 132, 106, 171, 73, 250, 176, 173, 38, 210, 206, 106, 34, 33, 157, 71, 11, 206, 125, 119, 125, 74, 33, 251, 233, 194, 112, 181, 127, 96, 112, 2, 243, 206, 248, 57, 54, 148, 207, 69, 238, 54, 136, 193, 26, 140, 86, 171, 18, 122, 61, 175 }
DH Base:  { 48, 71, 10, 213, 160, 5, 251, 20, 206, 45, 157, 205, 135, 227, 139, 199, 209, 177, 197, 250, 203, 174, 203, 233, 95, 25, 10, 167, 163, 29, 35, 196, 219, 188, 190, 6, 23, 69, 68, 64, 26, 91, 44, 2, 9, 101, 216, 194, 189, 33, 113, 211, 102, 132, 69, 119, 31, 116, 186, 8, 77, 32, 41, 216, 60, 28, 21, 133, 71, 243, 169, 241, 162, 113, 91, 226, 61, 81, 174, 77, 62, 90, 31, 106, 112, 100, 243, 22, 147, 58, 52, 109, 63, 82, 146, 82 }
Server DH Public Key:  { 8, 60, 59, 13, 224, 110, 32, 168, 116, 139, 246, 146, 15, 12, 216, 107, 82, 182, 140, 80, 193, 237, 159, 189, 87, 34, 18, 197, 181, 252, 26, 27, 94, 160, 188, 162, 30, 29, 165, 165, 68, 152, 11, 204, 251, 187, 14, 233, 239, 103, 134, 168, 181, 173, 206, 151, 197, 128, 65, 239, 233, 191, 29, 196, 93, 80, 217, 55, 81, 240, 101, 31, 119, 98, 188, 211, 52, 146, 168, 127, 127, 66, 63, 111, 198, 134, 70, 213, 31, 162, 146, 25, 178, 79, 56, 116 }
Anonymous
*** ServerHelloDone
[write] MD5 and SHA1 hashes:  len = 383
0000: 02 00 00 4D 03 01 50 83   1E 0C 64 03 38 99 07 02  ...M..P...d.8...
0010: FB 40 29 20 42 F0 E3 B5   37 BE 02 ED 92 00 49 77  .@) B...7.....Iw
0020: 46 00 A0 09 1C CF 20 50   83 1E 0C F1 49 34 26 2E  F..... P....I4&.
0030: 29 ED E2 C7 F6 9C 2D 03   F7 B6 2B DF 08 31 A9 BC  ).....-...+..1..
0040: 3F A0 29 66 C7 32 BE 00   34 00 00 05 FF 01 00 01  ?.)f.2..4.......
0050: 00 0C 00 01 26 00 60 E9   E6 42 59 9D 35 5F 37 C9  ....&.`..BY.5_7.
0060: 7F FD 35 67 12 0B 8E 25   C9 CD 43 E9 27 B3 A9 67  ..5g...%..C.'..g
0070: 0F BE C5 D8 90 14 19 22   D2 C3 B3 AD 24 80 09 37  .......""....$..7
0080: 99 86 9D 1E 84 6A AB 49   FA B0 AD 26 D2 CE 6A 22  .....j.I...&..j""
0090: 21 9D 47 0B CE 7D 77 7D   4A 21 FB E9 C2 70 B5 7F  !.G...w.J!...p..
00A0: 60 70 02 F3 CE F8 39 36   94 CF 45 EE 36 88 C1 1A  `p....96..E.6...
00B0: 8C 56 AB 12 7A 3D AF 00   60 30 47 0A D5 A0 05 FB  .V..z=..`0G.....
00C0: 14 CE 2D 9D CD 87 E3 8B   C7 D1 B1 C5 FA CB AE CB  ..-.............
00D0: E9 5F 19 0A A7 A3 1D 23   C4 DB BC BE 06 17 45 44  ._.....#......ED
00E0: 40 1A 5B 2C 02 09 65 D8   C2 BD 21 71 D3 66 84 45  @.[,..e...!q.f.E
00F0: 77 1F 74 BA 08 4D 20 29   D8 3C 1C 15 85 47 F3 A9  w.t..M ).<...G..
0100: F1 A2 71 5B E2 3D 51 AE   4D 3E 5A 1F 6A 70 64 F3  ..q[.=Q.M>Z.jpd.
0110: 16 93 3A 34 6D 3F 52 92   52 00 60 08 3C 3B 0D E0  ..:4m?R.R.`.<;..
0120: 6E 20 A8 74 8B F6 92 0F   0C D8 6B 52 B6 8C 50 C1  n .t......kR..P.
0130: ED 9F BD 57 22 12 C5 B5   FC 1A 1B 5E A0 BC A2 1E  ...W""......^....
0140: 1D A5 A5 44 98 0B CC FB   BB 0E E9 EF 67 86 A8 B5  ...D........g...
0150: AD CE 97 C5 80 41 EF E9   BF 1D C4 5D 50 D9 37 51  .....A.....]P.7Q
0160: F0 65 1F 77 62 BC D3 34   92 A8 7F 7F 42 3F 6F C6  .e.wb..4....B?o.
0170: 86 46 D5 1F A2 92 19 B2   4F 38 74 0E 00 00 00     .F......O8t....
URT-, WRITE: TLSv1 Handshake, length = 383
[Raw write]: length = 388
0000: 16 03 01 01 7F 02 00 00   4D 03 01 50 83 1E 0C 64  ........M..P...d
0010: 03 38 99 07 02 FB 40 29   20 42 F0 E3 B5 37 BE 02  .8....@) B...7..
0020: ED 92 00 49 77 46 00 A0   09 1C CF 20 50 83 1E 0C  ...IwF..... P...
0030: F1 49 34 26 2E 29 ED E2   C7 F6 9C 2D 03 F7 B6 2B  .I4&.).....-...+
0040: DF 08 31 A9 BC 3F A0 29   66 C7 32 BE 00 34 00 00  ..1..?.)f.2..4..
0050: 05 FF 01 00 01 00 0C 00   01 26 00 60 E9 E6 42 59  .........&.`..BY
0060: 9D 35 5F 37 C9 7F FD 35   67 12 0B 8E 25 C9 CD 43  .5_7...5g...%..C
0070: E9 27 B3 A9 67 0F BE C5   D8 90 14 19 22 D2 C3 B3  .'..g.......""...
0080: AD 24 80 09 37 99 86 9D   1E 84 6A AB 49 FA B0 AD  .$..7.....j.I...
0090: 26 D2 CE 6A 22 21 9D 47   0B CE 7D 77 7D 4A 21 FB  &..j""!.G...w.J!.
00A0: E9 C2 70 B5 7F 60 70 02   F3 CE F8 39 36 94 CF 45  ..p..`p....96..E
00B0: EE 36 88 C1 1A 8C 56 AB   12 7A 3D AF 00 60 30 47  .6....V..z=..`0G
00C0: 0A D5 A0 05 FB 14 CE 2D   9D CD 87 E3 8B C7 D1 B1  .......-........
00D0: C5 FA CB AE CB E9 5F 19   0A A7 A3 1D 23 C4 DB BC  ......_.....#...
00E0: BE 06 17 45 44 40 1A 5B   2C 02 09 65 D8 C2 BD 21  ...ED@.[,..e...!
00F0: 71 D3 66 84 45 77 1F 74   BA 08 4D 20 29 D8 3C 1C  q.f.Ew.t..M ).<.
0100: 15 85 47 F3 A9 F1 A2 71   5B E2 3D 51 AE 4D 3E 5A  ..G....q[.=Q.M>Z
0110: 1F 6A 70 64 F3 16 93 3A   34 6D 3F 52 92 52 00 60  .jpd...:4m?R.R.`
0120: 08 3C 3B 0D E0 6E 20 A8   74 8B F6 92 0F 0C D8 6B  .<;..n .t......k
0130: 52 B6 8C 50 C1 ED 9F BD   57 22 12 C5 B5 FC 1A 1B  R..P....W""......
0140: 5E A0 BC A2 1E 1D A5 A5   44 98 0B CC FB BB 0E E9  ^.......D.......
0150: EF 67 86 A8 B5 AD CE 97   C5 80 41 EF E9 BF 1D C4  .g........A.....
0160: 5D 50 D9 37 51 F0 65 1F   77 62 BC D3 34 92 A8 7F  ]P.7Q.e.wb..4...
0170: 7F 42 3F 6F C6 86 46 D5   1F A2 92 19 B2 4F 38 74  .B?o..F......O8t
0180: 0E 00 00 00                                        ....
[Raw read]: length = 5
0000: 15 03 01 00 02                                     .....
[Raw read]: length = 2
0000: 02 00                                              ..
URT-, READ: TLSv1 Alert, length = 2
URT-, RECV TLSv1 ALERT:  fatal, close_notify
URT-, called closeSocket()
URT-, handling exception: javax.net.ssl.SSLException: Received fatal alert: close_notify

FYI, this works in iOS 6.0
","Have you tried exporting a ""new"" self signed certificate from the Java server and import to the trust store of your app/OS?
","1537","<java><ios5><ssl><jsse><diffie-hellman>","21","1","3","2013-12-14 02:13:24","","7","1","1262634","","2013-06-25 16:04:00","2012-10-20 22:54:09",""
"12993410","Why does iOS 5 fail to connect to a server running JDK 1.6, but not JDK 1.5","We have a Java Socket Server listening on an SSLSocket (port 443) and an iOS application that connects with it.  When running on iOS 5.1, the application stopped working when we upgraded the Java version of the server from JDK 1.5 to 1.6 (or 1.7). The app connects just fine to JDK 5 and 6 when running on iOS 6.
The iOS app is reporting an error:  -9809 = errSSLCrypto.  On the Java side, we get javax.net.ssl.SSLException: Received fatal alert: close_notify.  
On the Java server side, we have enabled all the available cipher suites.  On the client side we have tested enabling several different suites, although we have yet to complete a test involving each one individually enabled.  Right now, it is failing when we use TLS_DH_anon_WITH_AES_128_CBC_SHA although it has failed with others and we are starting to think it's not the suite. 
Here is the debug output.  It makes it all the way to ServerHelloDone and then fails shortly thereafter:
Is secure renegotiation: false
[Raw read]: length = 5
0000: 16 03 03 00 41                                     ....A
[Raw read]: length = 65
0000: 01 00 00 3D 03 03 50 83   1E 0B 56 19 25 65 C8 F2  ...=..P...V.%e..
0010: AF 02 AD 48 FE E2 92 CF   B8 D7 A6 A3 EA C5 FF 5D  ...H...........]
0020: 74 0F 1B C1 99 18 00 00   08 00 FF 00 34 00 1B 00  t...........4...
0030: 18 01 00 00 0C 00 0D 00   08 00 06 05 01 04 01 02  ................
0040: 01                                                 .
URT-, READ: Unknown-3.3 Handshake, length = 65
*** ClientHello, Unknown-3.3
RandomCookie:  GMT: 1333992971 bytes = { 86, 25, 37, 101, 200, 242, 175, 2, 173, 72, 254, 226, 146, 207, 184, 215, 166, 163, 234, 197, 255, 93, 116, 15, 27, 193, 153, 24 }
Session ID:  {}
Cipher Suites: [TLS_EMPTY_RENEGOTIATION_INFO_SCSV, TLS_DH_anon_WITH_AES_128_CBC_SHA, SSL_DH_anon_WITH_3DES_EDE_CBC_SHA, SSL_DH_anon_WITH_RC4_128_MD5]
Compression Methods:  { 0 }
Unsupported extension signature_algorithms, data: 00:06:05:01:04:01:02:01
***
[read] MD5 and SHA1 hashes:  len = 65
0000: 01 00 00 3D 03 03 50 83   1E 0B 56 19 25 65 C8 F2  ...=..P...V.%e..
0010: AF 02 AD 48 FE E2 92 CF   B8 D7 A6 A3 EA C5 FF 5D  ...H...........]
0020: 74 0F 1B C1 99 18 00 00   08 00 FF 00 34 00 1B 00  t...........4...
0030: 18 01 00 00 0C 00 0D 00   08 00 06 05 01 04 01 02  ................
0040: 01                                                 .
%% Created:  [Session-1, TLS_DH_anon_WITH_AES_128_CBC_SHA]
*** ServerHello, TLSv1
RandomCookie:  GMT: 1333992972 bytes = { 100, 3, 56, 153, 7, 2, 251, 64, 41, 32, 66, 240, 227, 181, 55, 190, 2, 237, 146, 0, 73, 119, 70, 0, 160, 9, 28, 207 }
Session ID:  {80, 131, 30, 12, 241, 73, 52, 38, 46, 41, 237, 226, 199, 246, 156, 45, 3, 247, 182, 43, 223, 8, 49, 169, 188, 63, 160, 41, 102, 199, 50, 190}
Cipher Suite: TLS_DH_anon_WITH_AES_128_CBC_SHA
Compression Method: 0
Extension renegotiation_info, renegotiated_connection: <empty>
***
Cipher suite:  TLS_DH_anon_WITH_AES_128_CBC_SHA
*** Diffie-Hellman ServerKeyExchange
DH Modulus:  { 233, 230, 66, 89, 157, 53, 95, 55, 201, 127, 253, 53, 103, 18, 11, 142, 37, 201, 205, 67, 233, 39, 179, 169, 103, 15, 190, 197, 216, 144, 20, 25, 34, 210, 195, 179, 173, 36, 128, 9, 55, 153, 134, 157, 30, 132, 106, 171, 73, 250, 176, 173, 38, 210, 206, 106, 34, 33, 157, 71, 11, 206, 125, 119, 125, 74, 33, 251, 233, 194, 112, 181, 127, 96, 112, 2, 243, 206, 248, 57, 54, 148, 207, 69, 238, 54, 136, 193, 26, 140, 86, 171, 18, 122, 61, 175 }
DH Base:  { 48, 71, 10, 213, 160, 5, 251, 20, 206, 45, 157, 205, 135, 227, 139, 199, 209, 177, 197, 250, 203, 174, 203, 233, 95, 25, 10, 167, 163, 29, 35, 196, 219, 188, 190, 6, 23, 69, 68, 64, 26, 91, 44, 2, 9, 101, 216, 194, 189, 33, 113, 211, 102, 132, 69, 119, 31, 116, 186, 8, 77, 32, 41, 216, 60, 28, 21, 133, 71, 243, 169, 241, 162, 113, 91, 226, 61, 81, 174, 77, 62, 90, 31, 106, 112, 100, 243, 22, 147, 58, 52, 109, 63, 82, 146, 82 }
Server DH Public Key:  { 8, 60, 59, 13, 224, 110, 32, 168, 116, 139, 246, 146, 15, 12, 216, 107, 82, 182, 140, 80, 193, 237, 159, 189, 87, 34, 18, 197, 181, 252, 26, 27, 94, 160, 188, 162, 30, 29, 165, 165, 68, 152, 11, 204, 251, 187, 14, 233, 239, 103, 134, 168, 181, 173, 206, 151, 197, 128, 65, 239, 233, 191, 29, 196, 93, 80, 217, 55, 81, 240, 101, 31, 119, 98, 188, 211, 52, 146, 168, 127, 127, 66, 63, 111, 198, 134, 70, 213, 31, 162, 146, 25, 178, 79, 56, 116 }
Anonymous
*** ServerHelloDone
[write] MD5 and SHA1 hashes:  len = 383
0000: 02 00 00 4D 03 01 50 83   1E 0C 64 03 38 99 07 02  ...M..P...d.8...
0010: FB 40 29 20 42 F0 E3 B5   37 BE 02 ED 92 00 49 77  .@) B...7.....Iw
0020: 46 00 A0 09 1C CF 20 50   83 1E 0C F1 49 34 26 2E  F..... P....I4&.
0030: 29 ED E2 C7 F6 9C 2D 03   F7 B6 2B DF 08 31 A9 BC  ).....-...+..1..
0040: 3F A0 29 66 C7 32 BE 00   34 00 00 05 FF 01 00 01  ?.)f.2..4.......
0050: 00 0C 00 01 26 00 60 E9   E6 42 59 9D 35 5F 37 C9  ....&.`..BY.5_7.
0060: 7F FD 35 67 12 0B 8E 25   C9 CD 43 E9 27 B3 A9 67  ..5g...%..C.'..g
0070: 0F BE C5 D8 90 14 19 22   D2 C3 B3 AD 24 80 09 37  .......""....$..7
0080: 99 86 9D 1E 84 6A AB 49   FA B0 AD 26 D2 CE 6A 22  .....j.I...&..j""
0090: 21 9D 47 0B CE 7D 77 7D   4A 21 FB E9 C2 70 B5 7F  !.G...w.J!...p..
00A0: 60 70 02 F3 CE F8 39 36   94 CF 45 EE 36 88 C1 1A  `p....96..E.6...
00B0: 8C 56 AB 12 7A 3D AF 00   60 30 47 0A D5 A0 05 FB  .V..z=..`0G.....
00C0: 14 CE 2D 9D CD 87 E3 8B   C7 D1 B1 C5 FA CB AE CB  ..-.............
00D0: E9 5F 19 0A A7 A3 1D 23   C4 DB BC BE 06 17 45 44  ._.....#......ED
00E0: 40 1A 5B 2C 02 09 65 D8   C2 BD 21 71 D3 66 84 45  @.[,..e...!q.f.E
00F0: 77 1F 74 BA 08 4D 20 29   D8 3C 1C 15 85 47 F3 A9  w.t..M ).<...G..
0100: F1 A2 71 5B E2 3D 51 AE   4D 3E 5A 1F 6A 70 64 F3  ..q[.=Q.M>Z.jpd.
0110: 16 93 3A 34 6D 3F 52 92   52 00 60 08 3C 3B 0D E0  ..:4m?R.R.`.<;..
0120: 6E 20 A8 74 8B F6 92 0F   0C D8 6B 52 B6 8C 50 C1  n .t......kR..P.
0130: ED 9F BD 57 22 12 C5 B5   FC 1A 1B 5E A0 BC A2 1E  ...W""......^....
0140: 1D A5 A5 44 98 0B CC FB   BB 0E E9 EF 67 86 A8 B5  ...D........g...
0150: AD CE 97 C5 80 41 EF E9   BF 1D C4 5D 50 D9 37 51  .....A.....]P.7Q
0160: F0 65 1F 77 62 BC D3 34   92 A8 7F 7F 42 3F 6F C6  .e.wb..4....B?o.
0170: 86 46 D5 1F A2 92 19 B2   4F 38 74 0E 00 00 00     .F......O8t....
URT-, WRITE: TLSv1 Handshake, length = 383
[Raw write]: length = 388
0000: 16 03 01 01 7F 02 00 00   4D 03 01 50 83 1E 0C 64  ........M..P...d
0010: 03 38 99 07 02 FB 40 29   20 42 F0 E3 B5 37 BE 02  .8....@) B...7..
0020: ED 92 00 49 77 46 00 A0   09 1C CF 20 50 83 1E 0C  ...IwF..... P...
0030: F1 49 34 26 2E 29 ED E2   C7 F6 9C 2D 03 F7 B6 2B  .I4&.).....-...+
0040: DF 08 31 A9 BC 3F A0 29   66 C7 32 BE 00 34 00 00  ..1..?.)f.2..4..
0050: 05 FF 01 00 01 00 0C 00   01 26 00 60 E9 E6 42 59  .........&.`..BY
0060: 9D 35 5F 37 C9 7F FD 35   67 12 0B 8E 25 C9 CD 43  .5_7...5g...%..C
0070: E9 27 B3 A9 67 0F BE C5   D8 90 14 19 22 D2 C3 B3  .'..g.......""...
0080: AD 24 80 09 37 99 86 9D   1E 84 6A AB 49 FA B0 AD  .$..7.....j.I...
0090: 26 D2 CE 6A 22 21 9D 47   0B CE 7D 77 7D 4A 21 FB  &..j""!.G...w.J!.
00A0: E9 C2 70 B5 7F 60 70 02   F3 CE F8 39 36 94 CF 45  ..p..`p....96..E
00B0: EE 36 88 C1 1A 8C 56 AB   12 7A 3D AF 00 60 30 47  .6....V..z=..`0G
00C0: 0A D5 A0 05 FB 14 CE 2D   9D CD 87 E3 8B C7 D1 B1  .......-........
00D0: C5 FA CB AE CB E9 5F 19   0A A7 A3 1D 23 C4 DB BC  ......_.....#...
00E0: BE 06 17 45 44 40 1A 5B   2C 02 09 65 D8 C2 BD 21  ...ED@.[,..e...!
00F0: 71 D3 66 84 45 77 1F 74   BA 08 4D 20 29 D8 3C 1C  q.f.Ew.t..M ).<.
0100: 15 85 47 F3 A9 F1 A2 71   5B E2 3D 51 AE 4D 3E 5A  ..G....q[.=Q.M>Z
0110: 1F 6A 70 64 F3 16 93 3A   34 6D 3F 52 92 52 00 60  .jpd...:4m?R.R.`
0120: 08 3C 3B 0D E0 6E 20 A8   74 8B F6 92 0F 0C D8 6B  .<;..n .t......k
0130: 52 B6 8C 50 C1 ED 9F BD   57 22 12 C5 B5 FC 1A 1B  R..P....W""......
0140: 5E A0 BC A2 1E 1D A5 A5   44 98 0B CC FB BB 0E E9  ^.......D.......
0150: EF 67 86 A8 B5 AD CE 97   C5 80 41 EF E9 BF 1D C4  .g........A.....
0160: 5D 50 D9 37 51 F0 65 1F   77 62 BC D3 34 92 A8 7F  ]P.7Q.e.wb..4...
0170: 7F 42 3F 6F C6 86 46 D5   1F A2 92 19 B2 4F 38 74  .B?o..F......O8t
0180: 0E 00 00 00                                        ....
[Raw read]: length = 5
0000: 15 03 01 00 02                                     .....
[Raw read]: length = 2
0000: 02 00                                              ..
URT-, READ: TLSv1 Alert, length = 2
URT-, RECV TLSv1 ALERT:  fatal, close_notify
URT-, called closeSocket()
URT-, handling exception: javax.net.ssl.SSLException: Received fatal alert: close_notify

FYI, this works in iOS 6.0
","May I suggest to use Apache or another HTTP(S) Server in front of your Java application Server? Just thinking into the future perhaps your application will not have Java serving directly all requests anyway (think about TLS security fixes, load balancing, failover etc). My two cents.
","1537","<java><ios5><ssl><jsse><diffie-hellman>","21","0","3","2013-12-14 02:13:24","","7","1","1262634","","2013-06-25 16:04:00","2012-10-20 22:54:09",""
"12993410","Why does iOS 5 fail to connect to a server running JDK 1.6, but not JDK 1.5","We have a Java Socket Server listening on an SSLSocket (port 443) and an iOS application that connects with it.  When running on iOS 5.1, the application stopped working when we upgraded the Java version of the server from JDK 1.5 to 1.6 (or 1.7). The app connects just fine to JDK 5 and 6 when running on iOS 6.
The iOS app is reporting an error:  -9809 = errSSLCrypto.  On the Java side, we get javax.net.ssl.SSLException: Received fatal alert: close_notify.  
On the Java server side, we have enabled all the available cipher suites.  On the client side we have tested enabling several different suites, although we have yet to complete a test involving each one individually enabled.  Right now, it is failing when we use TLS_DH_anon_WITH_AES_128_CBC_SHA although it has failed with others and we are starting to think it's not the suite. 
Here is the debug output.  It makes it all the way to ServerHelloDone and then fails shortly thereafter:
Is secure renegotiation: false
[Raw read]: length = 5
0000: 16 03 03 00 41                                     ....A
[Raw read]: length = 65
0000: 01 00 00 3D 03 03 50 83   1E 0B 56 19 25 65 C8 F2  ...=..P...V.%e..
0010: AF 02 AD 48 FE E2 92 CF   B8 D7 A6 A3 EA C5 FF 5D  ...H...........]
0020: 74 0F 1B C1 99 18 00 00   08 00 FF 00 34 00 1B 00  t...........4...
0030: 18 01 00 00 0C 00 0D 00   08 00 06 05 01 04 01 02  ................
0040: 01                                                 .
URT-, READ: Unknown-3.3 Handshake, length = 65
*** ClientHello, Unknown-3.3
RandomCookie:  GMT: 1333992971 bytes = { 86, 25, 37, 101, 200, 242, 175, 2, 173, 72, 254, 226, 146, 207, 184, 215, 166, 163, 234, 197, 255, 93, 116, 15, 27, 193, 153, 24 }
Session ID:  {}
Cipher Suites: [TLS_EMPTY_RENEGOTIATION_INFO_SCSV, TLS_DH_anon_WITH_AES_128_CBC_SHA, SSL_DH_anon_WITH_3DES_EDE_CBC_SHA, SSL_DH_anon_WITH_RC4_128_MD5]
Compression Methods:  { 0 }
Unsupported extension signature_algorithms, data: 00:06:05:01:04:01:02:01
***
[read] MD5 and SHA1 hashes:  len = 65
0000: 01 00 00 3D 03 03 50 83   1E 0B 56 19 25 65 C8 F2  ...=..P...V.%e..
0010: AF 02 AD 48 FE E2 92 CF   B8 D7 A6 A3 EA C5 FF 5D  ...H...........]
0020: 74 0F 1B C1 99 18 00 00   08 00 FF 00 34 00 1B 00  t...........4...
0030: 18 01 00 00 0C 00 0D 00   08 00 06 05 01 04 01 02  ................
0040: 01                                                 .
%% Created:  [Session-1, TLS_DH_anon_WITH_AES_128_CBC_SHA]
*** ServerHello, TLSv1
RandomCookie:  GMT: 1333992972 bytes = { 100, 3, 56, 153, 7, 2, 251, 64, 41, 32, 66, 240, 227, 181, 55, 190, 2, 237, 146, 0, 73, 119, 70, 0, 160, 9, 28, 207 }
Session ID:  {80, 131, 30, 12, 241, 73, 52, 38, 46, 41, 237, 226, 199, 246, 156, 45, 3, 247, 182, 43, 223, 8, 49, 169, 188, 63, 160, 41, 102, 199, 50, 190}
Cipher Suite: TLS_DH_anon_WITH_AES_128_CBC_SHA
Compression Method: 0
Extension renegotiation_info, renegotiated_connection: <empty>
***
Cipher suite:  TLS_DH_anon_WITH_AES_128_CBC_SHA
*** Diffie-Hellman ServerKeyExchange
DH Modulus:  { 233, 230, 66, 89, 157, 53, 95, 55, 201, 127, 253, 53, 103, 18, 11, 142, 37, 201, 205, 67, 233, 39, 179, 169, 103, 15, 190, 197, 216, 144, 20, 25, 34, 210, 195, 179, 173, 36, 128, 9, 55, 153, 134, 157, 30, 132, 106, 171, 73, 250, 176, 173, 38, 210, 206, 106, 34, 33, 157, 71, 11, 206, 125, 119, 125, 74, 33, 251, 233, 194, 112, 181, 127, 96, 112, 2, 243, 206, 248, 57, 54, 148, 207, 69, 238, 54, 136, 193, 26, 140, 86, 171, 18, 122, 61, 175 }
DH Base:  { 48, 71, 10, 213, 160, 5, 251, 20, 206, 45, 157, 205, 135, 227, 139, 199, 209, 177, 197, 250, 203, 174, 203, 233, 95, 25, 10, 167, 163, 29, 35, 196, 219, 188, 190, 6, 23, 69, 68, 64, 26, 91, 44, 2, 9, 101, 216, 194, 189, 33, 113, 211, 102, 132, 69, 119, 31, 116, 186, 8, 77, 32, 41, 216, 60, 28, 21, 133, 71, 243, 169, 241, 162, 113, 91, 226, 61, 81, 174, 77, 62, 90, 31, 106, 112, 100, 243, 22, 147, 58, 52, 109, 63, 82, 146, 82 }
Server DH Public Key:  { 8, 60, 59, 13, 224, 110, 32, 168, 116, 139, 246, 146, 15, 12, 216, 107, 82, 182, 140, 80, 193, 237, 159, 189, 87, 34, 18, 197, 181, 252, 26, 27, 94, 160, 188, 162, 30, 29, 165, 165, 68, 152, 11, 204, 251, 187, 14, 233, 239, 103, 134, 168, 181, 173, 206, 151, 197, 128, 65, 239, 233, 191, 29, 196, 93, 80, 217, 55, 81, 240, 101, 31, 119, 98, 188, 211, 52, 146, 168, 127, 127, 66, 63, 111, 198, 134, 70, 213, 31, 162, 146, 25, 178, 79, 56, 116 }
Anonymous
*** ServerHelloDone
[write] MD5 and SHA1 hashes:  len = 383
0000: 02 00 00 4D 03 01 50 83   1E 0C 64 03 38 99 07 02  ...M..P...d.8...
0010: FB 40 29 20 42 F0 E3 B5   37 BE 02 ED 92 00 49 77  .@) B...7.....Iw
0020: 46 00 A0 09 1C CF 20 50   83 1E 0C F1 49 34 26 2E  F..... P....I4&.
0030: 29 ED E2 C7 F6 9C 2D 03   F7 B6 2B DF 08 31 A9 BC  ).....-...+..1..
0040: 3F A0 29 66 C7 32 BE 00   34 00 00 05 FF 01 00 01  ?.)f.2..4.......
0050: 00 0C 00 01 26 00 60 E9   E6 42 59 9D 35 5F 37 C9  ....&.`..BY.5_7.
0060: 7F FD 35 67 12 0B 8E 25   C9 CD 43 E9 27 B3 A9 67  ..5g...%..C.'..g
0070: 0F BE C5 D8 90 14 19 22   D2 C3 B3 AD 24 80 09 37  .......""....$..7
0080: 99 86 9D 1E 84 6A AB 49   FA B0 AD 26 D2 CE 6A 22  .....j.I...&..j""
0090: 21 9D 47 0B CE 7D 77 7D   4A 21 FB E9 C2 70 B5 7F  !.G...w.J!...p..
00A0: 60 70 02 F3 CE F8 39 36   94 CF 45 EE 36 88 C1 1A  `p....96..E.6...
00B0: 8C 56 AB 12 7A 3D AF 00   60 30 47 0A D5 A0 05 FB  .V..z=..`0G.....
00C0: 14 CE 2D 9D CD 87 E3 8B   C7 D1 B1 C5 FA CB AE CB  ..-.............
00D0: E9 5F 19 0A A7 A3 1D 23   C4 DB BC BE 06 17 45 44  ._.....#......ED
00E0: 40 1A 5B 2C 02 09 65 D8   C2 BD 21 71 D3 66 84 45  @.[,..e...!q.f.E
00F0: 77 1F 74 BA 08 4D 20 29   D8 3C 1C 15 85 47 F3 A9  w.t..M ).<...G..
0100: F1 A2 71 5B E2 3D 51 AE   4D 3E 5A 1F 6A 70 64 F3  ..q[.=Q.M>Z.jpd.
0110: 16 93 3A 34 6D 3F 52 92   52 00 60 08 3C 3B 0D E0  ..:4m?R.R.`.<;..
0120: 6E 20 A8 74 8B F6 92 0F   0C D8 6B 52 B6 8C 50 C1  n .t......kR..P.
0130: ED 9F BD 57 22 12 C5 B5   FC 1A 1B 5E A0 BC A2 1E  ...W""......^....
0140: 1D A5 A5 44 98 0B CC FB   BB 0E E9 EF 67 86 A8 B5  ...D........g...
0150: AD CE 97 C5 80 41 EF E9   BF 1D C4 5D 50 D9 37 51  .....A.....]P.7Q
0160: F0 65 1F 77 62 BC D3 34   92 A8 7F 7F 42 3F 6F C6  .e.wb..4....B?o.
0170: 86 46 D5 1F A2 92 19 B2   4F 38 74 0E 00 00 00     .F......O8t....
URT-, WRITE: TLSv1 Handshake, length = 383
[Raw write]: length = 388
0000: 16 03 01 01 7F 02 00 00   4D 03 01 50 83 1E 0C 64  ........M..P...d
0010: 03 38 99 07 02 FB 40 29   20 42 F0 E3 B5 37 BE 02  .8....@) B...7..
0020: ED 92 00 49 77 46 00 A0   09 1C CF 20 50 83 1E 0C  ...IwF..... P...
0030: F1 49 34 26 2E 29 ED E2   C7 F6 9C 2D 03 F7 B6 2B  .I4&.).....-...+
0040: DF 08 31 A9 BC 3F A0 29   66 C7 32 BE 00 34 00 00  ..1..?.)f.2..4..
0050: 05 FF 01 00 01 00 0C 00   01 26 00 60 E9 E6 42 59  .........&.`..BY
0060: 9D 35 5F 37 C9 7F FD 35   67 12 0B 8E 25 C9 CD 43  .5_7...5g...%..C
0070: E9 27 B3 A9 67 0F BE C5   D8 90 14 19 22 D2 C3 B3  .'..g.......""...
0080: AD 24 80 09 37 99 86 9D   1E 84 6A AB 49 FA B0 AD  .$..7.....j.I...
0090: 26 D2 CE 6A 22 21 9D 47   0B CE 7D 77 7D 4A 21 FB  &..j""!.G...w.J!.
00A0: E9 C2 70 B5 7F 60 70 02   F3 CE F8 39 36 94 CF 45  ..p..`p....96..E
00B0: EE 36 88 C1 1A 8C 56 AB   12 7A 3D AF 00 60 30 47  .6....V..z=..`0G
00C0: 0A D5 A0 05 FB 14 CE 2D   9D CD 87 E3 8B C7 D1 B1  .......-........
00D0: C5 FA CB AE CB E9 5F 19   0A A7 A3 1D 23 C4 DB BC  ......_.....#...
00E0: BE 06 17 45 44 40 1A 5B   2C 02 09 65 D8 C2 BD 21  ...ED@.[,..e...!
00F0: 71 D3 66 84 45 77 1F 74   BA 08 4D 20 29 D8 3C 1C  q.f.Ew.t..M ).<.
0100: 15 85 47 F3 A9 F1 A2 71   5B E2 3D 51 AE 4D 3E 5A  ..G....q[.=Q.M>Z
0110: 1F 6A 70 64 F3 16 93 3A   34 6D 3F 52 92 52 00 60  .jpd...:4m?R.R.`
0120: 08 3C 3B 0D E0 6E 20 A8   74 8B F6 92 0F 0C D8 6B  .<;..n .t......k
0130: 52 B6 8C 50 C1 ED 9F BD   57 22 12 C5 B5 FC 1A 1B  R..P....W""......
0140: 5E A0 BC A2 1E 1D A5 A5   44 98 0B CC FB BB 0E E9  ^.......D.......
0150: EF 67 86 A8 B5 AD CE 97   C5 80 41 EF E9 BF 1D C4  .g........A.....
0160: 5D 50 D9 37 51 F0 65 1F   77 62 BC D3 34 92 A8 7F  ]P.7Q.e.wb..4...
0170: 7F 42 3F 6F C6 86 46 D5   1F A2 92 19 B2 4F 38 74  .B?o..F......O8t
0180: 0E 00 00 00                                        ....
[Raw read]: length = 5
0000: 15 03 01 00 02                                     .....
[Raw read]: length = 2
0000: 02 00                                              ..
URT-, READ: TLSv1 Alert, length = 2
URT-, RECV TLSv1 ALERT:  fatal, close_notify
URT-, called closeSocket()
URT-, handling exception: javax.net.ssl.SSLException: Received fatal alert: close_notify

FYI, this works in iOS 6.0
","If the app works with JDK5, I suggest to repeat the same test with JDK6 and compare the two log files: it should then be clear where the real differences are.
Inspecting your debug log, the server is saying that the client is sending a fatal close_notify message, and because of this the server closes the connection immediately, and that is the right server behavior.

7.2.1.  Closure Alerts
The client and the server must share knowledge that the connection is ending in order to avoid a truncation attack.  Either party may initiate the exchange of closing messages.
close_notify This message notifies the recipient that the sender will not send any more messages on this connection.  Note that as of TLS 1.1, failure to properly close a connection no longer requires that a session not be resumed.  This is a change from TLS 1.0 to conform with widespread implementation practice.
Either party may initiate a close by sending a close_notify alert. Any data received after a closure alert is ignored. Unless some other fatal alert has been transmitted, each party is required to send a close_notify alert before closing the write side of the connection.  The other party MUST respond with a close_notify alert of its own and close down the connection immediately, discarding any pending writes.  It is not required for the initiator of the close to wait for the responding close_notify alert before closing the read side of the connection.

About TLS_DH_anon_WITH_AES_128_CBC_SHA, please note there was a REGRESSION fix in JDK6u29 that broke SSL connectivity using TLS_DH_anon_WITH_AES_128_CBC_SHA. More info here:
http://www.oracle.com/technetwork/java/javase/documentation/overview-137139.html
http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7103725
","1537","<java><ios5><ssl><jsse><diffie-hellman>","21","1","3","2013-12-14 02:13:24","","7","1","1262634","","2013-06-25 16:04:00","2012-10-20 22:54:09",""
"14589735","Implement full Diffie-Helllman key exchange encryption in java","I have a chat program that uses sockets for sending and receiving data. Now, I want to encrypt the data transfers via sockets with Diffie-Hellman key exchange system.
What is the easiest way to do that?
","
What is the easiest way to do that?

Use JSSE and configure to use Diffie Hellman.
JSSE is Java's socket extension for SSL. Using the SecureSocket classes which provide the same interface as regular sockets (so your current code does not need to change) but operate over SSL you can achieve encryption in your network connectivity.
You should study the link provided to see how to configure to do what you need.
","1477","<java><encryption><diffie-hellman>","1","3","1","2013-01-29 19:32:01","14589923","5","","","","","2013-01-29 18:30:00",""
"29201387","How to generate an ECDHE public key with OpenSSL?","I'm trying to generate an ECDHE key using OpenSSL 1.0.2a on Windows and have the following sample code:
#include <openssl/crypto.h>
#include <openssl/evp.h>
#include <openssl/err.h>
#include <openssl/pem.h>
#include <openssl/ecdh.h>

int main()
{
    OpenSSL_add_all_algorithms(); ERR_load_crypto_strings();

    EVP_PKEY_CTX* parameters_context = EVP_PKEY_CTX_new_id(EVP_PKEY_EC, NULL);
    EVP_PKEY* cparameters = nullptr;
    EVP_PKEY* private_key = nullptr;

    if (EVP_PKEY_paramgen_init(parameters_context) != 1) { return 1; }
    if (EVP_PKEY_CTX_set_ec_paramgen_curve_nid(parameters_context, NID_sect571k1) != 1) { return 1; }
    if (EVP_PKEY_paramgen(parameters_context, &cparameters) != 1) { return 1; }

    EVP_PKEY_CTX* key_generation_context = EVP_PKEY_CTX_new(cparameters, NULL);

    if (!key_generation_context) { return 1; }
    if (EVP_PKEY_keygen_init(key_generation_context) != 1) { return 1; }        
    if (EVP_PKEY_keygen(key_generation_context, &private_key) != 1) { return 1; }

    BIO* bio = BIO_new(BIO_s_mem());
    PEM_write_bio_PUBKEY(bio, private_key); // <== This is where things go wrong.

    ERR_free_strings(); EVP_cleanup(); CRYPTO_cleanup_all_ex_data();
}

I tested the said code on other platforms (OSX and Debian Linux, using gcc) and it seems works fine (no errors reported under valgrind).
When I run it on Windows, it always fails on this line:
PEM_write_bio_PUBKEY(bio, private_key);

And I get this ""nice"" error screen:

I'm at loss figuring out what is wrong: from the many tutorials and documentation pages I could find, this seems to be the right way of doing things.
Before I spend another day trying to figure out what's wrong, I figured it might smarter to ask the community: is this the right way of generating and writing an ECDHE key as PEM format with OpenSSL ?
","It was indeed a bug in OpenSSL.
From the OpenSSL-dev mailing-list:

On Tue, Mar 31, 2015, ****** ******* wrote:
>

if (!combine)
        *pval = NULL;

I'd suggest deleting the two lines above. The structure should be
  cleared without this and the above line is wrong for non pointer
  fields anyway.
Steve.
  -- Dr Stephen N. Henson. OpenSSL project core developer. Commercial tech support now available see: http://www.openssl.org

See also this other question for details.
","1431","<c><openssl><elliptic-curve><diffie-hellman>","1","0","1","2015-04-01 23:09:52","29402408","6","","","","","2015-03-22 23:59:23",""
"39374024","Determine Diffie-Hellman ""Parameters"" Length for a TLS handshake in Java","I'd like to make an HTTPS connection to a server and, if I'm using
non-ephemeral DH key exchange, I'd like to know what the parameters
are for that connection. Actually, I don't really care if it's
ephemeral or not.
What I'm looking for is the ability to make a connection and then warn
if the connection is using ""weak"" DH parameters. Is that something I
can check at connection-time? Or is the set of DH parameters (or, more
specifically, the length of those parameters, in bits) defined by
the cipher suite itself?
For example, the Qualys community thread has an illustration of the
cipher suites that SSLLabs considers ""weak"" (well, everyone considers
them weak... they just have a public tool which complains about them):
https://community.qualys.com/thread/14821
They specifically mention e.g. TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
which is cipher suite 0x9f and mention the DH parameters. Are those
parameters' parameters baked-into the cipher suite (meaning they are
always 1024-bit) or is this a configuration of the server that makes
those cipher suites weak due to the specific DH parameter choice?
In either case, I'd like to be able to sniff that information from the
connection if at all possible. Does anyone know if this can be done,
and how?
I've written some code to attempt to get this information about the handshake, but I keep getting null for the object I was hoping would contain this data.
SSLSocketFactory sf = ...;
Socket sock = new Socket();
sock.connect(address, timeout);

SSLSocket socket = (SSLSocket)sf.createSocket(sock, host, port, true);
socket.startHandshake();
SSLSession sess = socket.getHandshakeSession();

I was hoping that sess at this point would contain some interesting information about the handshake, but it's null. The javadoc for startHandshake indicates that it will notify an event listener when the handshake is completed. So I tried this:
SSLSocketFactory sf = ...;
Socket sock = new Socket();
sock.connect(address, timeout);

SSLSocket socket = (SSLSocket)sf.createSocket(sock, host, port, true);
socket.startHandshake();
// SSLSession sess = socket.getHandshakeSession();
SSLSession sess = socket.getSession(); // This forces the handshake to complete
sess = socket.getHandshakeSession();

... but sess is still null at this point. The ""real"" SSLSession does exist and gives me information about the connection, but the ""handshake session"" seems to always be null.
So I tried writing an HandshakeCompletedListener, and I do in fact get an SSLSession, but it appears to be the same one that I can get from the SSLSocket already, so the ""handshake"" session seems to be unhelpful.
How can I get those parameters from the SSLSession?
","For most cipher algorithms, the length is determined by the name cypher name, as also mentioned here How to get the actual block cipher key size for Java SSL connection _in code_? .
Instead of trying to warn people when they are using unsecure cyphers, I'd recommend to disable those ciphers by selecting only the cyphers you want to support. You can do this on a jvm level or on the SSLSocket, e.g.
String pickedCipher[] ={""TLS_RSA_WITH_AES_128_CBC_SHA""}; 
socket.setEnabledCipherSuites(pickedCipher);

You can also set the desired key size, see here
https://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/JSSERefGuide.html#customizing_dh_keys
You can see defaults and classes used in Java security here https://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html
If you are curious and want to investigate this in more detail, I'd recommend to turn on ssl logging, as described here.
","1429","<java><ssl><handshake><diffie-hellman>","3","0","2","2017-01-03 17:05:35","","4","1","","","","2016-09-07 15:32:15",""
"39374024","Determine Diffie-Hellman ""Parameters"" Length for a TLS handshake in Java","I'd like to make an HTTPS connection to a server and, if I'm using
non-ephemeral DH key exchange, I'd like to know what the parameters
are for that connection. Actually, I don't really care if it's
ephemeral or not.
What I'm looking for is the ability to make a connection and then warn
if the connection is using ""weak"" DH parameters. Is that something I
can check at connection-time? Or is the set of DH parameters (or, more
specifically, the length of those parameters, in bits) defined by
the cipher suite itself?
For example, the Qualys community thread has an illustration of the
cipher suites that SSLLabs considers ""weak"" (well, everyone considers
them weak... they just have a public tool which complains about them):
https://community.qualys.com/thread/14821
They specifically mention e.g. TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
which is cipher suite 0x9f and mention the DH parameters. Are those
parameters' parameters baked-into the cipher suite (meaning they are
always 1024-bit) or is this a configuration of the server that makes
those cipher suites weak due to the specific DH parameter choice?
In either case, I'd like to be able to sniff that information from the
connection if at all possible. Does anyone know if this can be done,
and how?
I've written some code to attempt to get this information about the handshake, but I keep getting null for the object I was hoping would contain this data.
SSLSocketFactory sf = ...;
Socket sock = new Socket();
sock.connect(address, timeout);

SSLSocket socket = (SSLSocket)sf.createSocket(sock, host, port, true);
socket.startHandshake();
SSLSession sess = socket.getHandshakeSession();

I was hoping that sess at this point would contain some interesting information about the handshake, but it's null. The javadoc for startHandshake indicates that it will notify an event listener when the handshake is completed. So I tried this:
SSLSocketFactory sf = ...;
Socket sock = new Socket();
sock.connect(address, timeout);

SSLSocket socket = (SSLSocket)sf.createSocket(sock, host, port, true);
socket.startHandshake();
// SSLSession sess = socket.getHandshakeSession();
SSLSession sess = socket.getSession(); // This forces the handshake to complete
sess = socket.getHandshakeSession();

... but sess is still null at this point. The ""real"" SSLSession does exist and gives me information about the connection, but the ""handshake session"" seems to always be null.
So I tried writing an HandshakeCompletedListener, and I do in fact get an SSLSession, but it appears to be the same one that I can get from the SSLSocket already, so the ""handshake"" session seems to be unhelpful.
How can I get those parameters from the SSLSession?
","
Are those parameters' parameters baked-into the cipher suite (meaning they are always 1024-bit) or is this a configuration of the server that makes those cipher suites weak due to the specific DH parameter choice?

No, this is a configuration parameter for the protocol. There is a default of 1024 bits for Java but that may be changed globally for JSSE (the Java TLS implementation) using a system property: jdk.tls.ephemeralDHKeySize. Best set this during startup with a -D option for the Java VM.
For static DH key pairs (that are used for authentication) you would have to look into the DH certificate. But I don't think you'll find any, everybody uses RSA for authentication.

In either case, I'd like to be able to sniff that information from the connection if at all possible. Does anyone know if this can be done, and how?

Well, for sniffing tools such as WireShark would suffice. Undoubtedly you can parse things like DH parameters from a TLS connection (if they are used in the first place of course).
You can also debug connections using -Djavax.net.debug
For Java applications / libraries you could look up the cipher suite and then, if it contains DHE_ look up the aforementioned system property (keeping in mind its default values).

The Java JSSE API was not written with deep packet inspection in mind. It's (literally) a service oriented implementation for servers and client applications. Although you could of course use the OpenJDK code itself (it's GPL'ed, right?) you are better off using a separate implementation, possibly with an even more permissive license.
For a sniffer however I would rather use C/C++ (or at least a C/C++ frontend) than Java.
","1429","<java><ssl><handshake><diffie-hellman>","3","1","2","2017-01-03 17:05:35","","4","1","","","","2016-09-07 15:32:15",""
"15483736","Diffie-Hellman Private Key","I have the line of code below to generate a private key:
int Xa = randomNo.nextInt(10000);
int Ya = (int) Math.pow(G, Xa) % P;

G and P are static numbers. Whereas Xa is randomly generated. Every time I run the program, it gives me the same result for Ya. Is this correct for Diffie-Hellman? I thought the private key had to be changed every time the algorithm was run.
","The problem is that the Random class in Java has a constructor with one long argument (called seed) that allows you to start the pseudorandom number sequence in a particular way.
If you always use the same seed, you will always obtain the same sequence. 
To solve the problem, try this:
Random randomNo = new Random(System.nanoTime());
int Xa = randomNo.nextInt(10000);

In this way, the seed is always different, and the sequence changes everytime you call the above line.
","1371","<java><diffie-hellman>","4","3","4","2013-03-19 16:51:54","15483941","8","2","104223","","2013-03-18 18:13:57","2013-03-18 18:02:39",""
"15483736","Diffie-Hellman Private Key","I have the line of code below to generate a private key:
int Xa = randomNo.nextInt(10000);
int Ya = (int) Math.pow(G, Xa) % P;

G and P are static numbers. Whereas Xa is randomly generated. Every time I run the program, it gives me the same result for Ya. Is this correct for Diffie-Hellman? I thought the private key had to be changed every time the algorithm was run.
","This can only give different results if Xa is different. How did you generate the value of Xa? Chances are you've used a pseudo-random generator that typically need to be seeded. If you take the default seed each time (same seed each time) it will always return the same sequence of random numbers.
Try seeding your generator with System.currentTimeMillis();
","1371","<java><diffie-hellman>","4","1","4","2013-03-19 16:51:54","15483941","8","2","104223","","2013-03-18 18:13:57","2013-03-18 18:02:39",""
"15483736","Diffie-Hellman Private Key","I have the line of code below to generate a private key:
int Xa = randomNo.nextInt(10000);
int Ya = (int) Math.pow(G, Xa) % P;

G and P are static numbers. Whereas Xa is randomly generated. Every time I run the program, it gives me the same result for Ya. Is this correct for Diffie-Hellman? I thought the private key had to be changed every time the algorithm was run.
","I think the problem may be that you are overflowing double with your exponentiation, resulting in infinity, resulting in the same value every time (unless you are lucky enough to end up with a very low number returned for your exponent).
Also, be sure to use secure random to get your random value:
Random random = new SecureRandom();

// If you use more than 100 here, then
// with your value of 486 for G you will
// end up with infinity when doing Math.pow(G,Xa).
// Of course, this does not provide enough possible
// values to be cryptographically secure.
int Xa = random.nextInt(100);
int Ya = (int) (Math.pow(G, Xa) % P);

Edit:  Code with debugging (the below works for me):
double G = 42;
int P = 26;


Random random = new SecureRandom();
int Xa = random.nextInt(100);
double val = Math.pow(G, Xa);
System.out.println(""Xa: "" + Xa);
System.out.println(""(double) Math.pow: "" + val + "" (int): "" + (int) val);
int Ya = (int) (val % P);
System.out.println(""Ya: "" + Ya);

","1371","<java><diffie-hellman>","4","2","4","2013-03-19 16:51:54","15483941","8","2","104223","","2013-03-18 18:13:57","2013-03-18 18:02:39",""
"15483736","Diffie-Hellman Private Key","I have the line of code below to generate a private key:
int Xa = randomNo.nextInt(10000);
int Ya = (int) Math.pow(G, Xa) % P;

G and P are static numbers. Whereas Xa is randomly generated. Every time I run the program, it gives me the same result for Ya. Is this correct for Diffie-Hellman? I thought the private key had to be changed every time the algorithm was run.
","Other people seem to have given good answers on the issue with your generation of random numbers, so I'll respond to your question ""Is this correct for Diffie-Hellman?""
Your understanding of Diffie-Helman is a bit off I think. For one thing, you keep using the term 'private key' as though there is also a 'public key'. Diffie-Hellman key exchange is a technique used for exchanging one symmetric key. There isn't a private key and a public key, there is just a key that both parties are going to use to encrypt their messages. Moreover, you said that this is code for 'generating' a key. With Diffie-Hellman, it takes two to tango. This code isn't enough to generate the final product of the key. You'll need to send Ya to a 2nd party and get something back from that second party to finish the process. See below for more info.
Your formula for generating Ya is correct, assuming that Xa is what it is supposed to be. I'm a little concerned about your understanding of what you're supposed to do with Xa because you're reassigning it to a random value after you've generated Ya. You will need to hang on to Xa in order to create the final version of the key. 
After you've generated Ya, you should be sending that to the other party. The other party will send you back some number in return (let's call that R). In order for you to create the final version of the symmetric key (let's call it SK), you will need to calculate it as 
SK = (int)Math.pow(R, Xa) % P;

So in a nutshell, don't recalculate Xa after you've calculated Ya, otherwise you won't be able to generate the key. The process goes:

Generate Ya (I'm just using this variable name because it's what you used).
Send Ya to some person.
Receive some number from the person you sent Ya to (called this number R in example above).
Calculate what the symmetric-key should be that you'll be using for encryption using R, Xa, and P. (See formula above for SK)

","1371","<java><diffie-hellman>","4","3","4","2013-03-19 16:51:54","15483941","8","2","104223","","2013-03-18 18:13:57","2013-03-18 18:02:39",""
"46644481","How to enforce DH key size in the OpenSSL client?","In our Application, we use OpenSSL for secure connections and we use DH for key exchange.  With the recent OpenSSL versions, minimum key length that can be used is 768 and 1024 is recommended. 
Our application is peer-peer application and to comply with this requirement, all our application instances need to be updated to start using 1024 DH keys. As on today, our application uses 512 key by default. They can be configured via configuration file to specify 102/2048/4096 lengths but this requires manual change on all systems. 
To my understanding, server side will decides DH key length always. So, we will not be able to update the OpenSSL version on client side without updating server side. 
Is there any way to enforce the minimum DH key length from client side so that server will generate DH key with minimum length specified by client?
","","1334","<openssl><diffie-hellman>","3","","0","2017-10-09 10:38:44","","2","1","","","","2017-10-09 10:38:44",""
"32452904","Weak DH ssl_error_bad_cert_alert Firefox but Chrome is OK","Problem:
We have difficulty trying to connect to our server using a browser.
Google Chrome can connect, but Mozilla Firefox cannot.
This problem is related to the ""Weak Diffie-Hellman and the Logjam Attack"" (https://weakdh.org/)
Activity log, sequence of actions we have conducted to try and fix the problem, and things we already know:

Everything was fine
Firefox complained about the Weak Diffie-Hellman ephemeral key
Firefox can no longer access our server
But, Google Chrome CAN STILL access
Found out about ""Weak Diffie-Hellman and the Logjam Attack""
(https://weakdh.org/)
Tested Firefox using their website, and responded ""Good News! Your browser is safe against the Logjam attack.""
Tested Chrome using their website, and it responded that Chrome was vulnerable.
This explained why we could still access our server using Chrome
Updated Chrome to the latest version.
Tested Chrome using weakdh.org, and responded ""Good News! Your
 browser is safe against the Logjam attack.""
Tried accessing our site using Chrome, and it has the same error
 with Firefox.
Both Chrome and Firefox can no longer access the site at this
 point.
We followed the instruction located at
 https://weakdh.org/sysadmin.html for Apache Tomcat servers.    
Fix did not work both for Chrome and Firefox, still the same error.
We followed the instruction at
 Diffie-Hellman public key error with Tomcat 7
Fix WORKED for Chrome BUT NOT for Firefox.
Firefox has error code: ssl_error_bad_cert_alert
We experimented on lesser number of ciphers but none worked
Same error for Firefox, still OK for Chrome.

TECHNICAL DETAILS
Certificate:
Signature algorithm: sha256RSA
Signature hash algorithm: sha256
Public key: RSA (2048 Bits)
Thumbprint algorithm: sha1

Environment:
Apache Tomcat 6.0
Java 1.6.0_34

Current server configuration:
<Connector port=""443"" SSLEnabled=""true"" maxThreads=""150"" scheme=""https"" 
secure=""true"" clientAuth=""true"" sslProtocol=""TLS"" 
keystoreFile=""********.pfx"" 
keystoreType=""PKCS12"" 
keystorePass=""********"" 
ciphers=""TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA""/>

","Basically, you'll need to upgrade your java version. More details in here: ApacheJMeterTemporaryRootCA.crt not generated
[]'s
","1295","<google-chrome><tomcat><firefox><openssl><diffie-hellman>","1","0","1","2015-12-17 12:28:39","","0","","-1","","2017-05-23 11:52:17","2015-09-08 08:30:53",""
"24677932","Diffie-Hellman Key Exchange with Javascript sometimes wrong","After watching this video
http://youtu.be/3QnD2c4Xovk
I've been trying to follow it step by step, and haven't been able to produce the same results.
Notably, when I try to do Math.pow(3, 54)%17, I get 7.  While the speaker gets 15.
I wrote a method that is supposed to simulate Diffie Hellman's key exchange using exactly what I found on http://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange
This is my code:
function diffieHellman(generator, prime, alice_secret, bob_secret){
  var alice_public = Math.pow(generator, alice_secret)%prime
    , bob_public = Math.pow(generator, bob_secret)%prime
    , alice_private = Math.pow(bob_public, alice_secret)%prime
    , bob_private = Math.pow(alice_public, bob_secret)%prime;
  console.log(""alice""
  , ""\n\t"", ""secret -- "", alice_secret
  , ""\n\t"", ""public -- "", alice_public
  , ""\n\t"", ""private -- "", alice_private
  )
  console.log(""bob""
  , ""\n\t"", ""secret -- "", bob_secret
  , ""\n\t"", ""public -- "", bob_public
  , ""\n\t"", ""private -- "", bob_private
  )
  return {
    alice:{
      secret: alice_secret
    , public: alice_public
    , private: alice_private
    },
    bob:{
      secret: bob_secret
    , public: bob_public
    , private: bob_private
    }
  }
};

These examples work:
diffieHellman(3, 17, 4, 12) // 1, 1
diffieHellman(3, 23, 6, 19) // 12, 12
diffieHellman(3, 13, 8, 4) // 9, 9

However, some numbers don't work
diffieHellman(3, 17, 40, 120) // 13, 0
diffieHellman(3, 23, 16, 129) // 21, 2
diffieHellman(3, 13, 44, 11) // 9, 1

What am I doing wrong?
Edit -- I'm not trying to implement Diffie-Hellman's Key Exchange in Javascript for a project.  It's just the language I'm most comfortable with, but I am afraid if this could be a javascript limitation.
","The problem is the limited precision of Javascript numbers that causes rounding errors in your code where you first exponentiate and then calculate the modulus. For your example numbers, you could fix this by periodically calculating the modulus inside the exponentiation, e.g. by never calculating more than a square before taking the modulus. But for actual cryptography your calculations will involve numbers too big to be handled as Javascript numbers (and most programming languages pose the same problem). The usual approach is to use a large integer (or even arbitrary precision) library. If you do end up implementing your own cryptography, please watch out for side channels, e.g. by calling library functions that are not constant time or allow cache-based attacks by using data dependent array indices.
","1266","<javascript><public-key-encryption><diffie-hellman>","3","4","2","2017-07-08 08:57:46","24787581","2","2","2628234","","2014-07-10 13:39:36","2014-07-10 13:33:16",""
"24677932","Diffie-Hellman Key Exchange with Javascript sometimes wrong","After watching this video
http://youtu.be/3QnD2c4Xovk
I've been trying to follow it step by step, and haven't been able to produce the same results.
Notably, when I try to do Math.pow(3, 54)%17, I get 7.  While the speaker gets 15.
I wrote a method that is supposed to simulate Diffie Hellman's key exchange using exactly what I found on http://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange
This is my code:
function diffieHellman(generator, prime, alice_secret, bob_secret){
  var alice_public = Math.pow(generator, alice_secret)%prime
    , bob_public = Math.pow(generator, bob_secret)%prime
    , alice_private = Math.pow(bob_public, alice_secret)%prime
    , bob_private = Math.pow(alice_public, bob_secret)%prime;
  console.log(""alice""
  , ""\n\t"", ""secret -- "", alice_secret
  , ""\n\t"", ""public -- "", alice_public
  , ""\n\t"", ""private -- "", alice_private
  )
  console.log(""bob""
  , ""\n\t"", ""secret -- "", bob_secret
  , ""\n\t"", ""public -- "", bob_public
  , ""\n\t"", ""private -- "", bob_private
  )
  return {
    alice:{
      secret: alice_secret
    , public: alice_public
    , private: alice_private
    },
    bob:{
      secret: bob_secret
    , public: bob_public
    , private: bob_private
    }
  }
};

These examples work:
diffieHellman(3, 17, 4, 12) // 1, 1
diffieHellman(3, 23, 6, 19) // 12, 12
diffieHellman(3, 13, 8, 4) // 9, 9

However, some numbers don't work
diffieHellman(3, 17, 40, 120) // 13, 0
diffieHellman(3, 23, 16, 129) // 21, 2
diffieHellman(3, 13, 44, 11) // 9, 1

What am I doing wrong?
Edit -- I'm not trying to implement Diffie-Hellman's Key Exchange in Javascript for a project.  It's just the language I'm most comfortable with, but I am afraid if this could be a javascript limitation.
","3^54 is 58149737003040059690390169. It causes an overflow, therefore you should implement modular exponentation, since i don't know javascript too well i have written a c code which should be easy to implement in javascript :
int power(int a, int b, int prime){
      int result;
      if(b == 0){
           result = 1;
      }else if(b == 1){
           result = a % prime;
      }else if(b % 2 == 0){
           result = power((a*a) % prime, b/2, prime);
           result = result % prime;
      }else{
           result = power((a*a) % prime, b/2, prime);
           result = (result * a) % prime;
      }
  return result;
  }

Now you can call this function :
int value = power(3, 54, 17);

and it should work.
Edit: added javascript version
function power(a, b, prime) {
    if (b <= 0) {
        return 1;
    } else if (b === 1) {
        return a % prime;
    } else if (b % 2 === 0) {
        return power((a * a) % prime, b / 2 | 0, prime) % prime;
    } else {
        return (power((a * a) % prime, b / 2 | 0, prime) * a) % prime;
    }
}

","1266","<javascript><public-key-encryption><diffie-hellman>","3","3","2","2017-07-08 08:57:46","24787581","2","2","2628234","","2014-07-10 13:39:36","2014-07-10 13:33:16",""
"39448142","getting Algorithm negotiation fail when creating jsch connection to an sftp server","I am trying to connect to an sftp server from using Jsch.  For some reason, I am getting the following error. 
com.jcraft.jsch.JSchException: Algorithm negotiation fail
at com.jcraft.jsch.Session.receive_kexinit(Session.java:590)
at com.jcraft.jsch.Session.connect(Session.java:320)
at com.jcraft.jsch.Session.connect(Session.java:183)
at Test.main(test.java:65)

My verbose output of the session connection log looks like this:
Connecting to xx.xx.xx.xx port 22
Connection established
Remote version string: SSH-2.0-6.4.5.90 SSH Tectia Server
Local version string: SSH-2.0-JSCH-0.1.54
CheckCiphers: aes256-ctr,aes192-ctr,aes128-ctr,aes256-cbc,aes192-cbc,aes128-cbc,3des-ctr,arcfour,arcfour128,arcfour256
CheckKexes: diffie-hellman-group14-sha1,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521
diffie-hellman-group14-sha1 is not available.
CheckSignatures: ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521
SSH_MSG_KEXINIT sent
SSH_MSG_KEXINIT received
kex: server: diffie-hellman-group14-sha1,diffie-hellman-group14-sha256@ssh.com,diffie-hellman-group15-sha256@ssh.com,diffie-hellman-group15-sha384@ssh.com,diffie-hellman=group16-sha384@ssh.com,diffie-hellman-group16-sha512@ssh.com,diffie-hellman-group18-sha512@ssh.com
kex: server: ssh-rsa,ssh-rsa-sha256@ssh.com
kex: server: crypticore128@ssh.com,aes128-cbc,aes128-ctr,aes192-cbc,aes192-ctr,aes256-cbc,aes256-ctr,3des-cbc
kex: server: crypticore128@ssh.com,aes128-cbc,aes128-ctr,aes192-cbc,aes192-ctr,aes256-cbc,aes256-ctr,3des-cbc
kex: server: hmac-sha1,hmac-sha256-2@ssh.com,hmac-sha224@ssh.com,hmac-sha256@ssh.com,hmac-sha384@ssh.com
kex: server: hmac-sha1,hmac-sha256-2@ssh.com,hmac-sha224@ssh.com,hmac-sha256@ssh.com,hmac-sha384@ssh.com
kex: server: none,zlib
kex: server: none,zlib
kex: server: 
kex: server: 
kex: client: diffie-hellman-group1-sha1,diffie-hellman-group-exchange-sha1,diffie-hellman-group-exchange-sha256
kex: client: ssh-rsa,ssh-dss,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521
kex: client: aes128-ctr,aes128-cbc,3des-ctr,3des-cbc,blowfish-cbc,aes192-ctr,aes192-cbc,aes256-ctr,aes256-cbc
kex: client: aes128-ctr,aes128-cbc,3des-ctr,3des-cbc,blowfish-cbc,aes192-ctr,aes192-cbc,aes256-ctr,aes256-cbc
kex: client: hmac-md5,hmac-sha1,hmac-sha2-256,hmac-sha1-96,hmac-md5-96
kex: client: hmac-md5,hmac-sha1,hmac-sha2-256,hmac-sha1-96,hmac-md5-96
kex: client: none
kex: client: none
kex: client: 
kex: client: 
Disconnecting from xx.xx.xx.xx port 22

From other answers on this forum, it seems as if the usual cause of this is one of the following:

Java Cryptography Extension (JCE) not installed
Old version of Jsch

Here is the test code I used to generate this error, and I have enabled the cryptography extension.
import javax.crypto.Cipher;
import java.security.*;
import java.security.Provider.Service;
import com.jcraft.jsch.*;
import java.util.Properties;


class Test {
  public static void main(String[] args) {

    Logger jschLogger = new Logger() {

            @Override
            public boolean isEnabled(int arg0) {
                return true;
             }

            @Override
            public void log(int arg0, String arg1) {
                   System.out.println(Integer.toString(arg0)+"" - ""+arg1);
            }
        };


  JSch jsch = new JSch();
  Session session = null;

    try {
    Properties config = new Properties();
    config.put(""kex"", ""diffie-hellman-group1-sha1,diffie-hellman-group14-sha1,diffie-hellman-group-exchange-sha1,diffie-hellman-group-exchange-sha256"");
    config.put(""StrictHostKeyChecking"", ""no"");

        jsch.setLogger(jschLogger);
    session = jsch.getSession(""*****"", ""******"", 22);
    session.setConfig(""StrictHostKeyChecking"", ""no"");
    session.setPassword(""******"");
        session.setConfig(config);
        System.out.println(session.getConfig(""kex""));
    session.connect();

    Channel channel = session.openChannel(""sftp"");
    channel.connect();
    ChannelSftp sftpChannel = (ChannelSftp) channel;
    sftpChannel.get(""remotefile.txt"", ""localfile.txt"");
    sftpChannel.exit();
    session.disconnect();
        } catch (JSchException e) {
            e.printStackTrace();
                System.out.println(e.getMessage());
                System.out.println(e.getCause().toString());
        } catch (Exception  e) {
                e.printStackTrace();
                System.out.println(e.getMessage());
                System.out.println(e.getCause().toString());
        }
 }

}

Can anyone point me in the right direction? I have no control over the server.
","","1172","<java><encryption><ssh><jsch><diffie-hellman>","1","","0","2016-09-12 11:12:23","","2","","1601474","","2016-09-12 11:12:23","2016-09-12 10:21:58",""
"38274214","TLS 1.2 ECDHE_RSA signature","I'm currently working on a Java TLS server. I'm trying to get the following CipherSuite to work : TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
When I test it using openssl s_client I get the following error after the ServerKeyExchange message : 

140735242416208:error:1414D172:SSL
  routines:tls12_check_peer_sigalg:wrong signature type:t1_lib.c:1130:

Here is the TLS message as seen in Wireshark

The Handshake fails on a decode_error fatal error.
So I guess the client doesn't like the signature algorithm chosen. 
But I am only using the default SignatureAndHashAlgorithm for now as per RFC 5246 Section-7.4.1.4.1

If the negotiated key exchange algorithm is one of (RSA, DHE_RSA,
  DH_RSA, RSA_PSK, ECDH_RSA, ECDHE_RSA), behave as if client had sent
  the value {sha1,rsa}.

(I'm still checking if the client do offer theses default values though)
Since I'm doing ECDHE_RSA I believe I should hash and sign the serverECDHparams as per RFC 4492 Section 5.4 (First post here so only 2 links sorry :) )
ServerKeyExchange.signed_params.sha_hash
        SHA(ClientHello.random + ServerHello.random +
                                          ServerKeyExchange.params);
struct {
    select (KeyExchangeAlgorithm) {
        case ec_diffie_hellman:
            ServerECDHParams params;
            Signature signed_params;
    };
} ServerKeyExchange;

And I should do this as per RFC 2246 Section 7.4.3 
select (SignatureAlgorithm) {   
    case rsa:
        digitally-signed struct {
            opaque md5_hash[16];
            opaque sha_hash[20];
        };
} Signature;


md5_hash
MD5(ClientHello.random + ServerHello.random + ServerParams);

sha_hash
SHA(ClientHello.random + ServerHello.random + ServerParams);

My Java code regarding signing the serverParams : 
private byte[] getSignedParams(ChannelBuffer params)
        throws NoSuchAlgorithmException, DigestException, 
        SignatureException, InvalidKeyException {
    byte[] signedParams = null;
    ChannelBuffer signAlg = ChannelBuffers.buffer(2);
    MessageDigest md5 = MessageDigest.getInstance(""MD5"");
    MessageDigest sha = MessageDigest.getInstance(""SHA-1"");
    switch (session.cipherSuite.sign) {
        case rsa:
            signAlg.writeByte(2); // 2 for SHA1
            sha.update(clientRandom);
            sha.update(serverRandom);
            sha.update(params.toByteBuffer());
            md5.update(clientRandom);
            md5.update(serverRandom);
            md5.update(params.toByteBuffer());
            signedParams = concat(md5.digest(), sha.digest());
        break;
    }
    signAlg.writeByte(session.cipherSuite.sign.value); // for RSA he byte is one
    ChannelBuffer signLength = ChannelBuffers.buffer(2);
    signLength.writeShort(signedParams.length);
    return concat(signAlg.array(),concat(signLength.array(),signedParams));
}

So my question is basically : Am I wrong about all this ? and if so, what am I doing wrong ?
Thank you for your time ! :)
","It's me again, I seem to have fixed my particular problem 2 things I noted  : 

Regarding my Java code, the MessageDigest class only does hashing no signing so I now use the Signature class instead.
It seems I only need to sign using SHA1 in TLS1.2 I don't need to do MD5 at all.

The second item is what I should have found in the RFC but didn't (maybe it is written somewhere, I don't know) I think this could be useful for people even if they're not doing Java ;)
How my code looks now : 
private byte[] getSignedParams(ChannelBuffer params)
        throws NoSuchAlgorithmException, DigestException, 
        SignatureException, InvalidKeyException {
    byte[] signedParams = null;
    Signature signature = Signature.getInstance(selectedSignAndHash.toString());
    ChannelBuffer signAlg = ChannelBuffers.buffer(2);
    signAlg.writeByte(selectedSignAndHash.hash.value);
    signature.initSign(privateKey);

    signature.update(clientRandom);
    signature.update(serverRandom);
    signature.update(params.toByteBuffer());

    signedParams = signature.sign();

    signAlg.writeByte(session.cipherSuite.sign.value);
    ChannelBuffer signLength = ChannelBuffers.buffer(2);
    signLength.writeShort(signedParams.length);
    return concat(signAlg.array(), concat(signLength.array(), signedParams));
}

The code is different because in between I added a function to choose the SignatureAndHashAlgorithm to use from the list the client provides. But you could modify this to only respond using SHA1withRSA as this seems to be the default HashAndSignatureAlgorithm.
","1164","<ssl><java><digital-signature><rsa><diffie-hellman>","3","0","1","2016-07-08 19:37:48","38274215","5","4","","","","2016-07-07 08:10:09",""
"7284010","Protecting ECDH against MITM attacks","I am working on a project that requires an ECDH key exchange. I am trying to understand how to protect against MITM attacks. I can sign the public key and send a signature along with the public key transfer to ensure that the key has not been tampered with but that doesn't stop a MITM attack from just doing the same thing. I understand that the key exchange must be verified somehow by a third party but I'm having a hard time understanding how it is that a third party can be the solution assuming that someone can do an MITM attack. Why couldn't they just do an MITM on the third party verification too? Is there really a fail proof way of completely eliminating all possible MITM attacks without some kind of pre-known by both parties?
","You need a¹ trusted third party to sign both keys.
Without any knowledge or assertions about the identity of the intended partner, there's simply no way to distinguish him² from anyone else.
¹ one or multiple
² Bob
","1149","<security><diffie-hellman>","1","1","3","2011-09-09 03:51:38","","0","","","","","2011-09-02 13:19:02",""
"7284010","Protecting ECDH against MITM attacks","I am working on a project that requires an ECDH key exchange. I am trying to understand how to protect against MITM attacks. I can sign the public key and send a signature along with the public key transfer to ensure that the key has not been tampered with but that doesn't stop a MITM attack from just doing the same thing. I understand that the key exchange must be verified somehow by a third party but I'm having a hard time understanding how it is that a third party can be the solution assuming that someone can do an MITM attack. Why couldn't they just do an MITM on the third party verification too? Is there really a fail proof way of completely eliminating all possible MITM attacks without some kind of pre-known by both parties?
","In a PKI system, ""certifying authorities"" are an important part of the infrastructure. Certifying authorities sign the public key and the identifying information, so that you know the corresponding private really belongs to the purported identity. This is true for EC keys just as it is for RSA.
By the way, I've looked for CAs that issue EC certificates, and apparently they aren't in practical use.
Most people obtain certificates for their certifying authorities as part of their operating system or security application. They trust these certificates implicitly. There are several dangers here, though.
First, most users don't have an effective way to verify the integrity of these certificates. This is a pretty hard problem, because, at the root of it, you have to have a 100% trustworthy channel for the verification—channel between the authority and the user with which an attacker cannot tamper. When a user downloads a new browser with an collection of root certificates, he can't know that the software wasn't tampered with in transit, or even built with a bogus CA certificate in the collection.
Even if the certificate collection is received intact as the provider intended, there have been questions raised about the integrity of many certifying authorities included by default in popular software. For example, some have pointed out that telecommunications companies in states that have been linked to terror sponsorship have their certificates included in popular browsers. Any trusted authority can issue a certificate for any domain name, and a browser will accept it without question.
In short, no, there is no way to establish a secure channel without first sharing some information on a secure channel. The benefit of PKI and asymmetric cryptography is that one exchange on a secure channel (the receipt of a trusted authority's certificate) permits the establishment of secure channels with many parties. But you have to bootstrap the system somehow.
","1149","<security><diffie-hellman>","1","0","3","2011-09-09 03:51:38","","0","","","","","2011-09-02 13:19:02",""
"7284010","Protecting ECDH against MITM attacks","I am working on a project that requires an ECDH key exchange. I am trying to understand how to protect against MITM attacks. I can sign the public key and send a signature along with the public key transfer to ensure that the key has not been tampered with but that doesn't stop a MITM attack from just doing the same thing. I understand that the key exchange must be verified somehow by a third party but I'm having a hard time understanding how it is that a third party can be the solution assuming that someone can do an MITM attack. Why couldn't they just do an MITM on the third party verification too? Is there really a fail proof way of completely eliminating all possible MITM attacks without some kind of pre-known by both parties?
","It sounds like you are heading down a path of rolling your own crypto protocol.  Don't do that.  It's a bad idea.  It leads to insecure systems.
Instead, use SSL or TLS.  That is designed to take care of the subtle issues in designing this kind of crypto protocol -- and it has been well-vetted.  You'll need a way to verify the other endpoint's certificate.  You could use a certification authority, or in some cases it might be feasible to hardcode the public key of the entity you expect to talk to.
You may get better answers if you ask on the Crypto stack exchange.
","1149","<security><diffie-hellman>","1","0","3","2011-09-09 03:51:38","","0","","","","","2011-09-02 13:19:02",""
"2706506","RSA encrypted Diffie-Hellman handshake","Would a RSA encrypted Diffie-Hellman handshake enable secure communication?
I'm encrypting communication from a silverlight client to a php webservice.
The silverlight client initiates they key agreement by sending the RSA public key encrypted DH parameters to the webservice. Only the webservice has the private key, so a MITM attack is not possible. The webservice sends plain text answer back to the client, and a key is agreed upon. This key is then used to encrypt communication between the webservice and silverlight client with AES, which is also encrypted with the RSA public key.
Does anyone see a flaw? 
","There is no way to store a ""private"" key in your application securely.  
","1101","<silverlight><rsa><diffie-hellman>","0","0","2","2010-04-25 23:39:27","2710401","1","","","","","2010-04-24 23:11:43",""
"2706506","RSA encrypted Diffie-Hellman handshake","Would a RSA encrypted Diffie-Hellman handshake enable secure communication?
I'm encrypting communication from a silverlight client to a php webservice.
The silverlight client initiates they key agreement by sending the RSA public key encrypted DH parameters to the webservice. Only the webservice has the private key, so a MITM attack is not possible. The webservice sends plain text answer back to the client, and a key is agreed upon. This key is then used to encrypt communication between the webservice and silverlight client with AES, which is also encrypted with the RSA public key.
Does anyone see a flaw? 
","This gains you nothing over just using SSL with a server certificate that's embedded in the client, and a cipher suite that uses DH key exchange.
","1101","<silverlight><rsa><diffie-hellman>","0","0","2","2010-04-25 23:39:27","2710401","1","","","","","2010-04-24 23:11:43",""
"22676620","String to PublicKey using Diffie-Hellman algorithm","I have a Public key string (128 bytes byte to hex processed) given by my client. I need to generate shared key using the private key and Public key given by client. I'm getting below exception while converting the String to Public key. I tried decoding/encoding the bytes, no improvement. I have the following code.
// This is a sample key.
private static final String PUB_KEY = ""0DC1B7102DE3F6785A284ABFCA1822A6B59C947B5F2FAAE"" + ""672D8EE29C3D801BC153777CD3AF5478FD25C234C50BBABF8CD5215A8F1CB19B0B4A24FD5E9"" + ""412264646E2A06FCB5929FFBE196A1BD58B9927424C3B3D0388FDDA15FD1FF1C3E7600A629E"" + 
""B3F0B38B85CCCE03D44CF8D53B2E4E5EFD54E991CE92E55B10FCCD79F04"";

public static void main(String[] argv) throws Exception {   
    PublicKey key = getKey(h2b(PUB_KEY));
}

private static PublicKey getKey(final byte[] pubKey) throws Exception {
    final KeyFactory keyFactory = KeyFactory.getInstance(""DH"");  
    final X509EncodedKeySpec keySpec = new X509EncodedKeySpec(pubKey);
    return keyFactory.generatePublic(keySpec); // THROWS EXCEPTION
}

private static byte[] h2b(String hex) {
    if ((hex.length() & 0x01) == 0x01)
        throw new IllegalArgumentException();
    byte[] bytes = new byte[hex.length() / 2];
    for (int idx = 0; idx < bytes.length; ++idx) {
        int hi = Character.digit((int) hex.charAt(idx * 2), 16);
        int lo = Character.digit((int) hex.charAt(idx * 2 + 1), 16);
        if ((hi < 0) || (lo < 0))
            throw new IllegalArgumentException();
        bytes[idx] = (byte) ((hi << 4) | lo);
    }
    return bytes;
}

Throws follwoing excetpion. Any help to solve this?
Exception in thread ""main"" java.security.spec.InvalidKeySpecException: Inappropriate key specification
    at com.sun.crypto.provider.DHKeyFactory.engineGeneratePublic(DHKeyFactory.java:87)
","The X509EncodedKeySpec is expected to contain an array of bytes with the ASN.1 SubjectPublicKeyInfo structure.
The PUB_KEY in your example is probably the raw key value (y in the terms of javax.crypto.spec.DHPublicKeySpec) which is not enough to create the keyspec.
You should ask your client eother for the proper public key in the ASN.1 form to be used as input for X509EncodedKeySpec (this is preferable) or for p and g parameters required for DHPublicKeySpec.
","1047","<java><encryption><public-key-encryption><diffie-hellman>","0","0","1","2014-03-27 05:46:48","","1","","3085625","","2014-03-27 01:59:11","2014-03-27 01:35:01",""
"33642100","Generating 64-byte public key for DH key exchange using Bouncy Castle","I need to generate a key pair for Diffie-Hellman key exchange using the secp256r1 curve using Bouncy Castle in C#. The public key should be 64 bytes (I'm not sure which format this is (compressed?), but I can find out).
I have the following code, but the lack of Bouncy Castle documentation has me lost.
X9ECParameters ecParams = SecNamedCurves.GetByName(""secp256r1"");
var spec = new ECDomainParameters(ecParams.Curve, ecParams.G, ecParams.N, ecParams.H, ecParams.GetSeed());
var keyGenParams = new ECKeyGenerationParameters(spec, new SecureRandom());

var keyGen = new ECKeyPairGenerator(""ECDH"");
keyGen.Init(keyGenParams);
AsymmetricCipherKeyPair keyPair = keyGen.GenerateKeyPair();
var pubKeyInfo = SubjectPublicKeyInfoFactory.CreateSubjectPublicKeyInfo(keyPair.Public);

// pubKeyInfo.GetDerEncoded()
// pubKeyInfo.GetEncoded()
// pubKeyInfo.PublicKey
// pubKeyInfo.ToAsn1Object()

From here, I have access to a lot of different export formats (seen above), but most values end up being 335 bytes long. pubKeyInfo.PublicKeyData.GetBytes() gives 65 bytes, but I'm not sure why.
I must have some basic misunderstanding here. What am I missing?
If it helps, another client uses the uECC_make_key function to generate the key pair.
","I believe the data  is provided by pubKeyInfo.PublicKeyData.GetBytes(). It's 65 bytes long because it has a prefix 0x04 byte indicating that the remaining 64 bytes describe the public key in uncompressed format (vs. 0x02 indicating compressed format).
See here for some discussion.
","1042","<c#><.net><diffie-hellman>","3","1","1","2015-11-11 00:21:35","","0","","1364007","","2015-11-11 00:21:35","2015-11-10 23:30:21",""
"7949471","Windows CNG ECDH Secret Agreement structure","I've spent a few days by searching what structure does ECDH secret agreement have, but no success. I found in MSDN that the NCryptSecretAgreement function sets a pointer to an NCRYPT_SECRET_HANDLE variable that receives a handle that represents the secret agreement value. I'm not familar with WinAPI at all so I simply can't do anything but reading docs.
I need to exchange keys between a Windows-based desktop app and a web app. What I need to know is how exactly CNG's KDF uses (hashes in my case) the secret agreement value. I'm using the SHA-256 algorithm as KDF and trying to hash X and Y of the secret agreement but result doesn't match to the one CNG computes. Any ideas?
Thank you.
","I cannot vouch for what Microsoft found fit to implement, but there is a standard on ECDH called X9.63. In that standard, ECDH works like this:

You run the DH thing, yielding the common curve point (X, Y) (that's the point you got from the peer, multiplied by your secret DH value).
You convert X (and only X; Y is discarded) into a sequence of bytes which we will call Z. Conversion is unsigned big-endian, and uses the field size: if X lives in field Fq, then the conversion yields exactly ceil(ceil(log q)/8). E.g. if you use the NIST P-521 curve, you work modulo a prime q which is such that 2520 < q < 2521, so ceil(log q) = 521 and the resulting byte sequence consists in exactly 66 bytes, whatever the value X. With the most commonly used elliptic curve (known as ""P-256""), that's 32 bytes.
To derive Z into a key, with a hash function H which has an output length of n bytes (e.g. n = 32 with SHA-256), you compute the potentially infinite string H1||H2||H3||... where ""||"" denotes concatenation, and Hi = H(Z||i) where ""i"" is represented as four bytes, using big-endian convention. In plain words, you hash Z along with a 32-bit counter, and do so again and again until you have enough bytes for your intended key length.

","1035","<windows><elliptic-curve><diffie-hellman><cng>","2","1","1","2019-08-19 10:32:44","7953736","0","1","608639","","2019-08-19 10:32:44","2011-10-31 02:32:03",""
"44224561","Generate Derived Key from Shared Secret (ECDH-ES) - ConcatKDF","I have used the https://github.com/ricmoo/GMEllipticCurveCrypto to generate a Shared Secret using ECDH Algorithm.
I now have to Generate a Derived Key using the ECDH-ES algorithm as mentioned here: https://tools.ietf.org/html/rfc7518#section-4.6
I had highly appreciate if someone could guide me in the direction of generating a Derived Key
","You need to read about KDF in general and HKDF as common example. BTW KDF was mentioned in link you provided.
","1033","<ios><objective-c><encryption><diffie-hellman><kdf>","12","2","1","2019-05-15 15:46:59","","0","2","942966","","2017-10-13 10:47:05","2017-05-28 06:47:28",""
"32947040","How to reject weak DH parameters in an OpenSSL client?","Currently OpenSSL in client mode stops handshake only if the keylength of server selected DH parameters is less than 768 bit (hardcoded in source).
In my client I want to stop handshake if the keylength of Server selected DH parameters is less than 2048-bit. The preferred way would be to set via API, e.g. option setting exposed by OpenSSL.
Is there any way to set the minimum key length using public APIs?
","
Is there any way to set the minimum key length using public APIs?

Yes (or maybe I should say, ""I believe so""). Use your Diffie-Hellman callback. The callback is set with SSL_CTX_set_tmp_dh_callback and SSL_set_tmp_dh_callback.
Usually the Diffie-Hellman callback is used on the server to generate its keys. But according to OpenSSL's SSL_CTX_set_tmp_dh_callback(3) man page, its ""... to be used when a DH parameters are required for tmp_dh_callback..."".
For an example of using the callback in the context of a server (which should be similar to using it in a client), see 'No Shared Cipher' Error with EDH-RSA-DES-CBC3-SHA. It performs key length checks.
","1020","<openssl><diffie-hellman>","2","1","1","2015-10-05 13:52:25","","2","","608639","","2015-10-05 13:52:25","2015-10-05 11:04:23",""
"28005253","Diffie-Hellman with BIGNUM (OpenSSL) vs. BigInteger (C#)","I'm implementing a Diffie-Hellman key exchange algorithm between an embedded device which uses OpenSSL libraries for BIGNUM operations and a C# software which uses System.Numerics.BigInteger methods to calculate the secret shared key generation. 
But after Alice and Bob exchange keys, they calculate different shared secrets.
The keys are printed out on each side (PubA, PrivA, PubB, PrivB, DHPrime, DHGenerator) and I can see that they are the same.
I suspect there is an issue about little/big endianness, or maybe openssl doesn't care about negative numbers for the exponent, and I don't know how to debug those operations. I don't have the code with me right now, but all the operations are kept simple, like this. 
C# side
BigInteger bintA = new BigInteger(baByteArrayReceived);
BigInteger bintb = new BigInteger(baRandomBobSecret);
BigInteger bintDHPrime = new BigInteger(baDHPrime2048);

BigInteger bintSharedSecret = bintA.ModPow(bintb,bintDHPrime);

C side
BIGNUM *bnB = BN_new();
BIGNUM *bna = BN_new();
BIGNUM *bnDHPrime = BN_new();
BIGNUM *bnResult = BN_new();
BN_CTX *bnctx = BN_CTX_new();

BN_bin2bn(baBReceived, 256,bnB);
BN_bin2bn(baRandomAliceSecret, 256,bna);
BN_bin2bn(baDHPrime2048, 256,bnDHPrime);

BN_mod_exp(bnResult,bnB,bna,bnDHPrime,bnctx);

Some additional info for C methods of OpenSSL:
>

BIGNUM *BN_bin2bn(const uint8_t *in, size_t len, BIGNUM *ret);

BN_bin2bn sets |*ret| to the value of |len| bytes from |in|, interpreted as a big-endian number, and returns |ret|. If |ret| is NULL then a fresh |BIGNUM| is allocated and returned. It returns NULL on allocation failure.
 int BN_mod_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, 
     const BIGNUM *m, BN_CTX *ctx);

BN_mod_exp sets |r| equal to |a|^{|p|} mod |m|. It does so with the best algorithm for the values provided and can run in constant time if |BN_FLG_CONSTTIME| is set for |p|. It returns one on success or zero otherwise.

And they produce different results. 
What should I do about this? What would be your next thing to check? 
Thanks in advance.
","Solved by using BouncyCastle Crypto Library's BigInteger methods. Couldn't tell System.Numerics.BigInteger that we are using big endian unsigned chars for initialization.
","970","<c#><c><openssl><biginteger><diffie-hellman>","5","1","1","2015-01-21 15:09:38","28070459","4","","916000","","2015-01-18 15:55:09","2015-01-17 22:57:02",""
"48643291","Change KexAlgorithms on OpenSSH","I would like to disable 'diffie-hellman-group1-sha1' and 'diffie-hellman-group-exchange-sha1' key exchange algorithms on my OpenSSH.
I edited /etc/ssh/sshd_config and added this line:
KexAlgorithms ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group14-sha1,diffie-hellman-group-exchange-sha256
After this I restarted SSH by command -> 'service sshd restart'
Now, when I run command 'ssh -Q kex', the output is still:
diffie-hellman-group1-sha1
diffie-hellman-group14-sha1
diffie-hellman-group14-sha256
diffie-hellman-group16-sha512
diffie-hellman-group18-sha512
diffie-hellman-group-exchange-sha1
diffie-hellman-group-exchange-sha256
ecdh-sha2-nistp256
ecdh-sha2-nistp384
ecdh-sha2-nistp521
curve25519-sha256
curve25519-sha256@libssh.org
gss-gex-sha1-
gss-group1-sha1-
gss-group14-sha1-
Why didn't do any changes? Did I do something wrong?
","","969","<openssh><diffie-hellman><sshd>","0","","0","2018-02-28 10:31:52","","1","","","","","2018-02-06 12:39:07",""
"22492417","Java - Diffie-Hellman Encryption - Wrong Output","I'm attempting to implement Diffie-Hellman key exchange. I am a little confused with how to use the secret key once generated.
As seen in the output, the 2 secret keys are generated using the same prime & base as normal in the key exchange, and trade public keys when generating the secret keys, however they are not outputting the same value as I expected.
I'm getting very confused with how to implement this encryption method and would be very grateful for some direction.  My overall aim for this is to implement an encrypted SMS Android application.

    (The screenshot was unable to capture the entire length of a & b's base & prime)
AlgorithmParameterGenerator paramGen = AlgorithmParameterGenerator.getInstance(""DH"");
paramGen.init(512); // number of bits
AlgorithmParameters params = paramGen.generateParameters();
DHParameterSpec dhSpec = (DHParameterSpec)params.getParameterSpec(DHParameterSpec.class); 

BigInteger p512 = dhSpec.getP();
BigInteger g512 = dhSpec.getG();

//A  
KeyPairGenerator akpg = KeyPairGenerator.getInstance(""DiffieHellman"");

DHParameterSpec param = new DHParameterSpec(p512, g512);
System.out.println(""Prime: "" + p512);
System.out.println(""Base: "" + g512);
akpg.initialize(param);
KeyPair kp = akpg.generateKeyPair();

//B
KeyPairGenerator bkpg = KeyPairGenerator.getInstance(""DiffieHellman"");

DHParameterSpec param2 = new DHParameterSpec(p512, g512);
System.out.println(""Prime: "" + p512);
System.out.println(""Base: "" + g512);
bkpg.initialize(param2);
KeyPair kp2 = bkpg.generateKeyPair();


KeyAgreement aKeyAgree = KeyAgreement.getInstance(""DiffieHellman"");
KeyAgreement bKeyAgree = KeyAgreement.getInstance(""DiffieHellman"");

aKeyAgree.init(kp.getPrivate());
bKeyAgree.init(kp2.getPrivate());

aKeyAgree.doPhase(kp2.getPublic(), true);
bKeyAgree.doPhase(kp.getPublic(), true);

//System.out.println(""Alice Secret Key: "" + aKeyAgree.generateSecret());
//System.out.println(""Bob's Secret Key: "" + bKeyAgree.generateSecret());

MessageDigest hash = MessageDigest.getInstance(""SHA-256"");

byte[] ASharedSecret = hash.digest(aKeyAgree.generateSecret());
byte[] BSharedSecret = hash.digest(bKeyAgree.generateSecret());

System.out.println(""Alice's Shared Secret: "" + ASharedSecret.toString());
System.out.println(""Bob's Shared Secret: "" + BSharedSecret.toString());

","byte[].toString() doesn't print the contents. Try Arrays.toString().
","964","<java><android><public-key-encryption><diffie-hellman>","0","2","1","2015-04-24 19:15:26","","2","4","701303","","2015-04-24 19:15:26","2014-03-18 22:30:11",""
"2695907","Diffie-Hellman in Silverlight","I am trying to devise a security scheme for encrypting the application level data between a silverlight client, and a php webservice that I created. Since I am dealing with a public website the information I am pulling from the service is public, but the information I'm submitting to the webservice is not public. There is also a back end to the website for administration, so naturally all application data being pushed and pulled from the webservice to the silverlight administration back end must also be encrypted. 
Silverlight does not support asymmetric encryption, which would work for the public website. Symmetric encryption would only work on the back end because users do not log in to the public website, so no password based keys could be derived. Still symmetric encryption would be great, but I cannot securely save the private key in the silverlight client. Because it would either have to be hardcoded or read from some kind of config file. None of that is considered secure. So... plan B.
My final alternative would be then to implement the Diffie-Hellman algorithm, which supports symmetric encryption by means of key agreement. However Diffie-Hellman is vulnerable to man-in-the-middle attacks. In other words, there is no guarantee that either side is sure of each others identity, making it possible for communication to be intercepted and altered without the receiving party knowing about it. It is thus recommended to use a private shared key to encrypt the key agreement handshaking, so that the identity of either party is confirmed.
This brings me back to my initial problem that resulted in me needing to use Diffie-Hellman, how can I use a private key in a silverlight client without hardcoding it either in the code or an xml file.
I'm all out of love on this one... is there any answer to this?
EDIT:
Remember that this is about a custom PHP web service that I rolled out on my own.
I found an RSA implementation i can use in Silverlight. It seems pretty safe to use this to encrypt the handshake for the  DiffieHellman key agreement between the Silverlight client and PHP web service, and subsequently also use it to encrypt the symmetric key that was agreed upon (which is itself generated from the result of the key exchange by hashing it). 
After this I'm pretty much guaranteed that all communication going to the web service has not been intercepted, modified and then retransmitted (MITM). However I believe it is still possible; technically, for an attacker to impersonate the silverlight client and send messages to the webservice (assuming they discover the url). 
Security from unauthorized access is provided since the attacker does not know the ""secret api"" of my custom webservice, hence they are unable to communicate with it. 
The only way to break this would be to brute force the webservice with whatever strings an attacker may suspect to be valid to try and get a response from the web service. I don't think you can brute force a variable length string. It sounds impractical.
Does anyone see a problem with this approach?
","The obvious solution would be to use WCF to establish an SSL or TLS connection instead of attempting to build that into the application.
","957","<silverlight><diffie-hellman><encryption-symmetric>","3","1","3","2010-05-04 03:16:30","2695983","1","","134485","","2010-04-23 16:29:14","2010-04-23 02:54:55",""
"2695907","Diffie-Hellman in Silverlight","I am trying to devise a security scheme for encrypting the application level data between a silverlight client, and a php webservice that I created. Since I am dealing with a public website the information I am pulling from the service is public, but the information I'm submitting to the webservice is not public. There is also a back end to the website for administration, so naturally all application data being pushed and pulled from the webservice to the silverlight administration back end must also be encrypted. 
Silverlight does not support asymmetric encryption, which would work for the public website. Symmetric encryption would only work on the back end because users do not log in to the public website, so no password based keys could be derived. Still symmetric encryption would be great, but I cannot securely save the private key in the silverlight client. Because it would either have to be hardcoded or read from some kind of config file. None of that is considered secure. So... plan B.
My final alternative would be then to implement the Diffie-Hellman algorithm, which supports symmetric encryption by means of key agreement. However Diffie-Hellman is vulnerable to man-in-the-middle attacks. In other words, there is no guarantee that either side is sure of each others identity, making it possible for communication to be intercepted and altered without the receiving party knowing about it. It is thus recommended to use a private shared key to encrypt the key agreement handshaking, so that the identity of either party is confirmed.
This brings me back to my initial problem that resulted in me needing to use Diffie-Hellman, how can I use a private key in a silverlight client without hardcoding it either in the code or an xml file.
I'm all out of love on this one... is there any answer to this?
EDIT:
Remember that this is about a custom PHP web service that I rolled out on my own.
I found an RSA implementation i can use in Silverlight. It seems pretty safe to use this to encrypt the handshake for the  DiffieHellman key agreement between the Silverlight client and PHP web service, and subsequently also use it to encrypt the symmetric key that was agreed upon (which is itself generated from the result of the key exchange by hashing it). 
After this I'm pretty much guaranteed that all communication going to the web service has not been intercepted, modified and then retransmitted (MITM). However I believe it is still possible; technically, for an attacker to impersonate the silverlight client and send messages to the webservice (assuming they discover the url). 
Security from unauthorized access is provided since the attacker does not know the ""secret api"" of my custom webservice, hence they are unable to communicate with it. 
The only way to break this would be to brute force the webservice with whatever strings an attacker may suspect to be valid to try and get a response from the web service. I don't think you can brute force a variable length string. It sounds impractical.
Does anyone see a problem with this approach?
","SSL/TLS suffers from the same problem that any Diffie-Hellman-based implementation you come up with would have, in that it can still be broken by a man-in-the-middle attack.
The reason TLS is secure and trusted is because the client, when receiving the server's certificate, authenticates it by checking that it is signed with another certificate from a known trusted identity - say, VeriSign. Thus far, this makes it impossible to enact a man-in-the-middle attack without having VeriSign's private key - when the interloper sends a fake certificate proclaiming to be the server, the client would easily detect that this certificate is not signed using the trusted identity's certificate, and bails out of the connection, displaying a warning to the user.
For your purposes, it's likely easiest to use TLS. To make it secure, you would generate a certificate for your server, and then embed in your client the public key for that certificate. The client can then verify that it is talking to your server, without having to expose the private key, which you don't have to distribute.
EDIT: In response to your comment on Jerry's answer, if your hosting provider doesn't allow SSL/TLS connections at all, preventing a man-in-the-middle attack will be tricky. If this is your only reason for avoiding TLS, I would suggest getting your provider to turn it on, or finding a provider that allows for it.
EDIT: In response to your edited question: even if you're now using RSA in your Silverlight client to send data to your web service, you cannot guarantee that the client itself has not been modified. It's quite possible for an attacker to dig into your client, determine the algorithm you're using to perform the encryption/handshake, and then write code to impersonate your client (or indeed, modify the client to include their code). Once they've done that, they can start analyzing your API and use it to make calls to your web service.
It's the same with SSL/TLS - the client can validate the identity of the host using the host's certificate, and as long as the host's server is secured, the client can trust the output from the host; however, there is no mechanism in which the host can 100% validate that the client is who they say they are, as the client will be run on a machine which does not have a controlled execution environment.
However - despite the above being true, and that it's possible that an attacker can compromise your system in this way, it's likely not probable -- unless you're working on a public-facing system that attracts a lot of attention/use, or a system that deals directly with money in some form, the attacker needs to make some effort before being able to send their own input to your web service.
Your best bet is to validate the input received by your web service thoroughly, and don't leave dangling APIs accessible that your regular client would never use.
","957","<silverlight><diffie-hellman><encryption-symmetric>","3","3","3","2010-05-04 03:16:30","2695983","1","","134485","","2010-04-23 16:29:14","2010-04-23 02:54:55",""
"2695907","Diffie-Hellman in Silverlight","I am trying to devise a security scheme for encrypting the application level data between a silverlight client, and a php webservice that I created. Since I am dealing with a public website the information I am pulling from the service is public, but the information I'm submitting to the webservice is not public. There is also a back end to the website for administration, so naturally all application data being pushed and pulled from the webservice to the silverlight administration back end must also be encrypted. 
Silverlight does not support asymmetric encryption, which would work for the public website. Symmetric encryption would only work on the back end because users do not log in to the public website, so no password based keys could be derived. Still symmetric encryption would be great, but I cannot securely save the private key in the silverlight client. Because it would either have to be hardcoded or read from some kind of config file. None of that is considered secure. So... plan B.
My final alternative would be then to implement the Diffie-Hellman algorithm, which supports symmetric encryption by means of key agreement. However Diffie-Hellman is vulnerable to man-in-the-middle attacks. In other words, there is no guarantee that either side is sure of each others identity, making it possible for communication to be intercepted and altered without the receiving party knowing about it. It is thus recommended to use a private shared key to encrypt the key agreement handshaking, so that the identity of either party is confirmed.
This brings me back to my initial problem that resulted in me needing to use Diffie-Hellman, how can I use a private key in a silverlight client without hardcoding it either in the code or an xml file.
I'm all out of love on this one... is there any answer to this?
EDIT:
Remember that this is about a custom PHP web service that I rolled out on my own.
I found an RSA implementation i can use in Silverlight. It seems pretty safe to use this to encrypt the handshake for the  DiffieHellman key agreement between the Silverlight client and PHP web service, and subsequently also use it to encrypt the symmetric key that was agreed upon (which is itself generated from the result of the key exchange by hashing it). 
After this I'm pretty much guaranteed that all communication going to the web service has not been intercepted, modified and then retransmitted (MITM). However I believe it is still possible; technically, for an attacker to impersonate the silverlight client and send messages to the webservice (assuming they discover the url). 
Security from unauthorized access is provided since the attacker does not know the ""secret api"" of my custom webservice, hence they are unable to communicate with it. 
The only way to break this would be to brute force the webservice with whatever strings an attacker may suspect to be valid to try and get a response from the web service. I don't think you can brute force a variable length string. It sounds impractical.
Does anyone see a problem with this approach?
","I recommend starting with this JavaScript+PHP DH key Exchange protocol:
http://enanocms.org/News:Article/2008/02/20/Diffie_Hellman_key_exchange_implemented
You can then re-write the javascript in silverlight.  I recommend using Wireshark to dump packets then you can use Meld or whatever to diff the packets to see where your implementation is differs from the original. 
Good Luck!
(Disclaimer:  I totally agree with the Enano dev team,  this is not a full replacement of SSL and SSL should be used whenever possible.)
","957","<silverlight><diffie-hellman><encryption-symmetric>","3","0","3","2010-05-04 03:16:30","2695983","1","","134485","","2010-04-23 16:29:14","2010-04-23 02:54:55",""
"33813108","BouncyCastle Diffie Hellman","I want to write a complete diffie Hellman example for bouncy castle that includes key generation, key exchange, encryption, and decryption. I also want to verify that if Alice is initiating a connection to Bob, that she should send her public key, Parameter P, and Parameter G.
I posted a Code Review. However, that is more about style, syntax, and grammar. I'm still trying to make sure my logic is correct.
This is also a good reference.
Namespaces:
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

using Org.BouncyCastle.Asn1;
using Org.BouncyCastle.Asn1.X9;
using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Crypto.Engines;
using Org.BouncyCastle.Crypto.Agreement;
using Org.BouncyCastle.Crypto.Agreement.Kdf;
using Org.BouncyCastle.Crypto.Digests;
using Org.BouncyCastle.Crypto.Modes;
using Org.BouncyCastle.Crypto.Generators;
using Org.BouncyCastle.Crypto.Parameters;
using Org.BouncyCastle.Utilities;
using Org.BouncyCastle.Security;
using Org.BouncyCastle.Math;
using Org.BouncyCastle.Asn1.X509;
using System.Diagnostics;
using Org.BouncyCastle.OpenSsl;

Some constants for this test case:
const string Algorithm = ""ECDH""; //What do you think about the other algorithms?
const int KeyBitSize = 256;
const int NonceBitSize = 128;
const int MacBitSize = 128;
const int DefaultPrimeProbability = 30;

Main method that starts the pairing and handles verifying encryption:
public static void TestMethod() {
    //BEGIN SETUP ALICE
    IAsymmetricCipherKeyPairGenerator aliceKeyGen = GeneratorUtilities.GetKeyPairGenerator (Algorithm);
    DHParametersGenerator aliceGenerator = new DHParametersGenerator ();
    aliceGenerator.Init (KeyBitSize, DefaultPrimeProbability, new SecureRandom ());
    DHParameters aliceParameters = aliceGenerator.GenerateParameters ();

    KeyGenerationParameters aliceKGP = new DHKeyGenerationParameters (new SecureRandom (), aliceParameters);
    aliceKeyGen.Init (aliceKGP);

    AsymmetricCipherKeyPair aliceKeyPair = aliceKeyGen.GenerateKeyPair ();
    IBasicAgreement aliceKeyAgree = AgreementUtilities.GetBasicAgreement (Algorithm);
    aliceKeyAgree.Init (aliceKeyPair.Private);

    //END SETUP ALICE

    /////AT THIS POINT, Alice's Public Key, Alice's Parameter P and Alice's Parameter G are sent unsecure to BOB

    //BEGIN SETUP BOB
    IAsymmetricCipherKeyPairGenerator bobKeyGen = GeneratorUtilities.GetKeyPairGenerator (Algorithm);
    DHParameters bobParameters = new DHParameters( aliceParameters.P, aliceParameters.G );

    KeyGenerationParameters bobKGP = new DHKeyGenerationParameters (new SecureRandom (), bobParameters);
    bobKeyGen.Init (bobKGP);

    AsymmetricCipherKeyPair bobKeyPair = bobKeyGen.GenerateKeyPair ();
    IBasicAgreement bobKeyAgree = AgreementUtilities.GetBasicAgreement (Algorithm);
    bobKeyAgree.Init (bobKeyPair.Private);
    //END SETUP BOB

    BigInteger aliceAgree = aliceKeyAgree.CalculateAgreement (bobKeyPair.Public);
    BigInteger bobAgree = bobKeyAgree.CalculateAgreement (aliceKeyPair.Public);

    if (!aliceAgree.Equals (bobAgree)) {
        throw new Exception (""Keys do not match."");
    }

    byte[] nonSecretMessage = GetBytes (""HeaderMessageForASDF"");
    byte[] secretMessage = GetBytes (""Secret message contents"");
    byte[] decNonSecretBytes;

    KeyParameter sharedKey = new KeyParameter (aliceAgree.ToByteArrayUnsigned ());

    var encMessage = EncryptMessage( sharedKey, nonSecretMessage, secretMessage );
    var decMessage = DecryptMessage( sharedKey, encMessage, out decNonSecretBytes );

    var decNonSecretMessage = GetString( decNonSecretBytes );
    var decSecretMessage = GetString( decMessage );

    Debug.WriteLine( decNonSecretMessage + "" - "" + decSecretMessage );

    return;
}

Wrapper method to Encrypt a message with given data:
public static byte[] EncryptMessage (string sharedKey, string nonSecretMessage, string secretMessage)
{
    return EncryptMessage( new KeyParameter( Convert.FromBase64String( sharedKey ) ), GetBytes( nonSecretMessage ), GetBytes( secretMessage ) );
}

Helper method to Encrypt a message with given data
public static byte[] EncryptMessage( KeyParameter sharedKey, byte[] nonSecretMessage, byte[] secretMessage ) {
    if( nonSecretMessage != null && nonSecretMessage.Length > 255 ) throw new Exception( ""Non Secret Message Too Long!"" );
    byte nonSecretLength = nonSecretMessage == null ? (byte)0 : (byte)nonSecretMessage.Length;

    var nonce = new byte[NonceBitSize / 8];
    var rand = new SecureRandom();
    rand.NextBytes(nonce, 0, nonce.Length);

    var cipher = new GcmBlockCipher(new AesFastEngine());
    var aeadParameters = new AeadParameters(sharedKey, MacBitSize, nonce, nonSecretMessage );
    cipher.Init(true, aeadParameters);

    //Generate Cipher Text With Auth Tag
    var cipherText = new byte[cipher.GetOutputSize(secretMessage.Length)];
    var len = cipher.ProcessBytes(secretMessage, 0, secretMessage.Length, cipherText, 0);
    cipher.DoFinal(cipherText, len);

    using (var combinedStream = new MemoryStream())
    {
        using (var binaryWriter = new BinaryWriter(combinedStream))
        {
            //Prepend Authenticated Payload
            binaryWriter.Write(nonSecretLength);
            binaryWriter.Write(nonSecretMessage);

            //Prepend Nonce
            binaryWriter.Write(nonce);
            //Write Cipher Text
            binaryWriter.Write(cipherText);
        }
        return combinedStream.ToArray();
    }
}        

Wrapper method to Decrypt a message
public static string DecryptMessage (string sharedKey, byte[] encryptedMessage, out string nonSecretPayload)
{
    byte[] nonSecretPayloadBytes;
    byte[] payload = DecryptMessage( new KeyParameter( Convert.FromBase64String( sharedKey ) ), encryptedMessage, out nonSecretPayloadBytes );

    nonSecretPayload = GetString( nonSecretPayloadBytes );
    return GetString( payload );
}

Helper method to decrypt a message
public static byte[] DecryptMessage( KeyParameter sharedKey, byte[] encryptedMessage, out byte[] nonSecretPayloadBytes )
{
    using (var cipherStream = new MemoryStream(encryptedMessage))
    using (var cipherReader = new BinaryReader(cipherStream))
    {
        //Grab Payload
        int nonSecretLength = (int)cipherReader.ReadByte();
        nonSecretPayloadBytes = cipherReader.ReadBytes(nonSecretLength);

        //Grab Nonce
        var nonce = cipherReader.ReadBytes(NonceBitSize / 8);

        var cipher = new GcmBlockCipher(new AesFastEngine());
        var parameters = new AeadParameters(sharedKey, MacBitSize, nonce, nonSecretPayloadBytes);
        cipher.Init(false, parameters);

        //Decrypt Cipher Text
        var cipherText = cipherReader.ReadBytes(encryptedMessage.Length - nonSecretLength - nonce.Length);
        var plainText = new byte[cipher.GetOutputSize(cipherText.Length)];  

        try
        {
            var len = cipher.ProcessBytes(cipherText, 0, cipherText.Length, plainText, 0);
            cipher.DoFinal(plainText, len);
        }
        catch (InvalidCipherTextException)
        {
            //Return null if it doesn't authenticate
            return null;
        }

        return plainText;
    }
}

Returns byte data for a given string:
static byte[] GetBytes(string str)
{
    if( str == null ) return null;
    return System.Text.Encoding.Unicode.GetBytes( str );
}

Returns a string for given byte data:
static string GetString(byte[] bytes)
{
    if( bytes == null ) return null;
    return System.Text.Encoding.Unicode.GetString( bytes, 0, bytes.Length );
}

","","946","<c#><encryption><bouncycastle><diffie-hellman>","2","","0","2015-11-19 19:50:36","","3","1","-1","","2017-05-23 10:30:54","2015-11-19 19:50:36",""
"32734700","Is there a way to bypass ""ERR_SSL_WEAK_SERVER_EPHEMERAL_DH_KEY"" on Chrome","I have an application which used to work fine on Chrome before the update. But since the update I keep getting this error ""ERR_SSL_WEAK_SERVER_EPHEMERAL_DH_KEY""
I have been searching how to get rid of this error on Chrome
People have figured a way to do this on Mozilla and that's what I found on SO too. But is there a way to do it on Chrome as well. 
I don't want all the unsecured websites to open in my browser, but at least my localhost. I cannot add any more ciphers to my application. 
Thanks in advance. 
Is there a way I can add exception for my localhost to bypass this. 
","I found a solution, just add the appropriate ciphers to the domain.xml or server.xml
ciphers=""TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA""

There was actually a solution on SO. This link might help you too.. 
Diffie-Hellman public key error with Tomcat 7
","938","<google-chrome><diffie-hellman>","1","0","1","2015-09-24 06:45:25","","0","","","","","2015-09-23 08:36:49",""
"18418727","ssh2 how base 'G' and modulus 'P' are negociated, unknown field","(first at all i'm sorry for my English because it is not my native language)
I try to understand ssh2 with wireshark(you can find the wireshark record here : https://dl.dropboxusercontent.com/s/e9ut8z6v8oldg7g/ssh_wireshark.pcap?token_hash=AAGtkPMwKLt4IIr1Rlrht5_21HpMwQZBfeEFjGoRA85cjQ&dl=1) and rfc 4253 but i have some difficulties:
After SSH_MSG_KEXINIT messages there is SSH_MSG_KEXDH_INIT (30) and SSH_MSG_KEXDH_REPLY (31).
my problem is the understanding of SSH_MSG_KEXDH_INIT and SSH_MSG_KEXDH_REPLY.
According to the rfc4253:
First, the client sends the following:

  byte      SSH_MSG_KEXDH_INIT
  mpint     e

The server then responds with the following:

  byte      SSH_MSG_KEXDH_REPLY
  string    server public host key and certificates (K_S)
  mpint     f
  string    signature of H

but with wireshark i see:
from Client:

-SSH Version 2 (encryption:aes128-ctr mac:hmac-md5 compression:none)
    Packet Length: 76
    Padding Length: 5
    -Key Exchange
            Msg Code: Diffie-Hellman Key Exchange Init (30)
            Payload: 0000004104e2d6ad26e76531efa9ea(...)
            Padding String: 0000000000




from Server:
-SSH Version 2 (encryption:aes128-ctr mac:hmac-md5 compression:none)
    Packet Length: 292
    Padding Length: 8
    -Key Exchange
            Msg Code: Diffie-Hellman Key Exchange Reply (31)
            Multi Precision Integer Length: 104
            DH modulus (P): 0000001365636473612d73686(...)
            Multi Precision Integer Length: 65
            DH base (G): 04ead7f3936361df10c39d7d(...)
            Payload: 000000650000001365636473612d(...)
            Padding String: 0000000000000000

what are 'payload' fields? how base 'G' and modulus 'P' are negociated? an ecdsa public key is prime or composite number?
this is my analyze:
a)wireshark is wrong.
If rfc is right, payloads field are 'e' and 'f'!
But there is a problem : if rfc is right, modulus p and base g have to be known BEFORE SSH_MSG_KEXDH_INIT because we need them to compute 'e'; so the wireshark decoding is wrong because wireshark tell me that P and G are transmit AFTER SSH_MSG_KEXDH_INIT.
and there is something else telling me wireshark is wrong : if i decode the base64 that i can find in the /etc/....pub file, i can see the value of wireshark DH_modulus field.
So DH_modulus field is not really DH_modulus but server public host key : rfc is right, wireshark is wrong!
In this case base and modulus are not transmit by ""Diffie-Hellman Key Exchange Reply"" so how 'g' and 'p' are transmitted??are they ""prefixed"" in all ssh client/server and never transmitted?
b)wireshark is right
if we suppose server public host key is a prime number it can be DH_modulus and rfc AND wireshark are right.
but in this, there is again a problem : payload from client can't be 'e' because payload is transmit before DH_modulus and DH_base...
so what are the payload field? 
when 'e' and 'f' are sent? because just after ""Diffie-Hellman Key Exchange Reply"" i have ""Newkeys messages"" which indicate the end of key exchange
but on other hand i have 4 packets to/from port 22 which are not decoded as ssh but it is maybe ""e"" and ""f""??
first two packet are 48 bytes length and the 2 others are 64bytes length.
are 'e' and 'f' transmitted in these 4 tcp packets ? maybe e and f are 64+48=112 bytes length?
as you can see i'm in confusion. can you help me (maybe not for all question but some indications can help)
thank you.
","In this case it's Wireshark incorrectly interpreting the public key algorithm.  Packet number 13 which came from the server is properly formatted according to RFC5656 (http://tools.ietf.org/html/rfc5656).  It's using the ecdsa-sha2-nistp256 algorithm which is an elliptic curve algorithm with 2 variables: q and r.
Wireshark is improperly parsing this packet using a different RFC (although not strictly 4253).  RFC5656 section 3.1 will give you the information you need to get on the right track.  For your information I'll post variables r and s in this response.
In reality, the information contained is:
Server's public host key (string K_S):
    string  ""ecdsa-sha2-nistp256"" (where ""nistp256"" is the [identifier])
    byte[n]  ecc_key_blob
               string  ""nistp256"" (repeated again as [identifier] portion of blob)
               string   Q (where Q is as follows)
Q (0073-00b3):
         04 bb e6 6e 8e   b6 b4 f8 29 8f e2 b1 ba
a0 2f 24 a2 d6 33 74 d4   17 ce b2 17 73 da 95 1a
ac c4 4b d7 a8 fc 92 6d   c6 c1 38 95 a6 5b 1f da
ec d2 29 df 2c 68 5c dc   de 36 bc 8b 34 16 24 28
0c 57 e1 7e
Server's ephemeral public key octet string (string Q_S):
Q_S (00b8-00f8):
                          04 ea d7 f3 93 63 61 df
10 c3 9d 7d bb ff 4d 38   0d 78 53 ea 00 97 30 b9
f5 cb a0 ea 1f 59 68 5b   c6 c6 de fb a8 16 f6 a9
e2 88 96 d8 e9 48 c4 c3   4a 24 bc 58 7f cd 6e b3
2f 4a 18 ac d7 68 d7 df   0b
Signature on the exchange hash (string):
    string  ""ecdsa-sha2-nistp256"" (again where nistp256 is the [identifier])
    string   ecdsa_signature_blob
               mpint r (011c-013c):
                                      00 84 0a a1
08 cf e8 2b a9 77 80 f2   82 99 59 e4 bb e4 f0 e8
bf 56 f2 ca 70 7a 4d 53   b0 6e b1 fc 0a
           mpint s (0141-0161):

00 bb 2a 08 c1 3e 41   ec 27 db 24 e8 1f 57 06
db 55 9f 5d e9 fa 48 87   b2 2e 97 3c 46 59 7a 14
c9 40
Hopefully this helps clear up the confusion.  You'll still have a bit of research to do with RFC5656 and possibly referring back to RFC4253 to fill in the blanks but that is the breakdown of the packet.
Good luck!
Scott in New York, USA
","937","<ssh><wireshark><public-key-encryption><diffie-hellman>","0","2","1","2013-09-16 20:42:45","","1","","","","","2013-08-24 12:46:02",""
"7935890","continued encryption with diffie-hellman shared key","I'm currently working on a protocol, which uses Diffie-Hellman for an key exchange.
I receive a packet, which consists of an aes-128 encrypted part and a 128 Bit DH Public Key.
In a very last step in the protocol, the aes key is sent to another peer in the network.
This aes-key should be encrypted with a cipher using a 128 bit strong secretkey.
I plan to use Blowfish (can also be another cipher, doesn't really matter for the problem)
Now to encrypt the aes-key, with lets say blowfish, I have to build a secretkey for the encryption  with a class called SecretKeySpec (I'm using javax.crypto stuff), which takes an byteArray in the constructor to build the secretKey.
The sharedkey from DH is a 128 Bit BigInteger.
Well, now I can interpret my shared-key as a byteArray (wich gives me still 128 Bit in 16Bytes [where the numbers are interpreted as frames of 8 Bit data])
So my question is, how strong is my key really?
Is there any impact because I only use numbers as input for the byteArray (so does this limit the keyspace in any way?)
I think this is not the case, but I'm not 100% sure.
Maybe someone can do the math and proof me right or wrong.
If I'm wrong what keysize for the shared key give me piece of mind to finally get to the 128Bit SecretKey for the encryption?
","Not an expert in DH here, but to me it seems that DH's keyspace for the shared key represented in n bits is somewhat smaller than 2^n. 
","914","<java><security><key><theory><diffie-hellman>","3","1","2","2011-10-30 00:37:02","7941750","2","","","","","2011-10-28 23:28:15",""
"7935890","continued encryption with diffie-hellman shared key","I'm currently working on a protocol, which uses Diffie-Hellman for an key exchange.
I receive a packet, which consists of an aes-128 encrypted part and a 128 Bit DH Public Key.
In a very last step in the protocol, the aes key is sent to another peer in the network.
This aes-key should be encrypted with a cipher using a 128 bit strong secretkey.
I plan to use Blowfish (can also be another cipher, doesn't really matter for the problem)
Now to encrypt the aes-key, with lets say blowfish, I have to build a secretkey for the encryption  with a class called SecretKeySpec (I'm using javax.crypto stuff), which takes an byteArray in the constructor to build the secretKey.
The sharedkey from DH is a 128 Bit BigInteger.
Well, now I can interpret my shared-key as a byteArray (wich gives me still 128 Bit in 16Bytes [where the numbers are interpreted as frames of 8 Bit data])
So my question is, how strong is my key really?
Is there any impact because I only use numbers as input for the byteArray (so does this limit the keyspace in any way?)
I think this is not the case, but I'm not 100% sure.
Maybe someone can do the math and proof me right or wrong.
If I'm wrong what keysize for the shared key give me piece of mind to finally get to the 128Bit SecretKey for the encryption?
","The Crypto++ website suggests using a minimum p of 3072 bits (or 256 bits for an ECC implementation) to transport a 128 bit AES key.
You might wish to study the references provided at http://www.keylength.com/en/compare/ for further information about comparing key lengths among different algorithms.
","914","<java><security><key><theory><diffie-hellman>","3","2","2","2011-10-30 00:37:02","7941750","2","","","","","2011-10-28 23:28:15",""
"28222970","SSL jdbc connection fails with Diffie-Hellman (DH_ANON) cipher suites","I am trying create an SSL enabled connection to the Oracle database 11g (Release 11.2.0.1.0) using jdbc. I just want to use SSL for encryption only and not authentication, which is why I am using the Diffie-Hellman anonymous cipher suites, but it is failing. 
I totally understand that anonymous cipher suites are not advisable and inherently insecure against man-in-the-middle attacks and probably I will not use it in production. But I would still like to find out what is wrong with my implementation that is preventing the ssl connection. Following is the excerpt of the code
    String url = ""jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS=(PROTOCOL=tcps)(HOST=<IP>)(PORT=2484))(CONNECT_DATA=(SERVICE_NAME=<service_name>)) )"";
    Properties props = new Properties();
    props.setProperty(""user"", ""hr"");
    props.setProperty(""password"", ""hr"");
    props.setProperty(""oracle.net.ssl_cipher_suites"",    ""(SSL_DH_anon_WITH_3DES_EDE_CBC_SHA, SSL_DH_anon_WITH_RC4_128_MD5, SSL_DH_anon_WITH_DES_CBC_SHA)"");

    // commented out since Diffie-Hellman cipher suite should not require trust store or key-store, but the connection works only if I uncomment it.
    //props.setProperty(""javax.net.ssl.trustStore"", ""/truststore/cwallet.sso"");
    //props.setProperty(""javax.net.ssl.trustStoreType"", ""SSO"");

    Connection conn = null;
    try {
        //Security.insertProviderAt(new oracle.security.pki.OraclePKIProvider(),3);
        Class.forName(""oracle.jdbc.OracleDriver"");
        conn = DriverManager.getConnection(url, props);
        System.out.println(""conn "" + conn);
    } catch (Exception e) {
        e.printStackTrace();
    }

IN sqlnet.ora I added the following to make sure client is not authenticated and client server uses the same cipher suite:
SSL_CLIENT_AUTHENTICATION = FALSE
SSL_CIPHER_SUITES=(SSL_DH_anon_WITH_3DES_EDE_CBC_SHA,SSL_DH_anon_WITH_RC4_128_MD5,SSL_DH_anon_WITH_DES_CBC_SHA)

However when I run the code I get the following error:
java.sql.SQLRecoverableException: IO Error: The Network Adapter could not establish the connection
  at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:419)
  at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:538)
  at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:228)
  at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:32)
  at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:521)
  at java.sql.DriverManager.getConnection(DriverManager.java:582)
  at java.sql.DriverManager.getConnection(DriverManager.java:154)
  at oracle.bi.modeling.Test.createConnection(Test.java:50)
  at oracle.bi.modeling.Test.main(Test.java:18)
    Caused by: oracle.net.ns.NetException: The Network Adapter could not establish the connection
  at oracle.net.nt.ConnStrategy.execute(ConnStrategy.java:375)
  at oracle.net.resolver.AddrResolution.resolveAndExecute(AddrResolution.java:422)
  at oracle.net.ns.NSProtocol.establishConnection(NSProtocol.java:686)
  at oracle.net.ns.NSProtocol.connect(NSProtocol.java:246)
  at oracle.jdbc.driver.T4CConnection.connect(T4CConnection.java:1056)
  at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:308)
  ... 8 more
    Caused by: oracle.net.ns.NetException: Unable to initialize ssl context.
  at oracle.net.nt.CustomSSLSocketFactory.getSSLSocketFactory(CustomSSLSocketFactory.java:327)
  at oracle.net.nt.TcpsNTAdapter.connect(TcpsNTAdapter.java:110)
  at oracle.net.nt.ConnOption.connect(ConnOption.java:130)
  at oracle.net.nt.ConnStrategy.execute(ConnStrategy.java:353)
  ... 13 more
Caused by: oracle.net.ns.NetException: Unable to initialize the trust store.
  at oracle.net.nt.CustomSSLSocketFactory.getTrustManagerArray(CustomSSLSocketFactory.java:415)
  at oracle.net.nt.CustomSSLSocketFactory.getSSLSocketFactory(CustomSSLSocketFactory.java:311)
  ... 16 more
Caused by: java.io.IOException: Keystore was tampered with, or password was incorrect
  at sun.security.provider.JavaKeyStore.engineLoad(JavaKeyStore.java:771)
  at sun.security.provider.JavaKeyStore$JKS.engineLoad(JavaKeyStore.java:38)
  at java.security.KeyStore.load(KeyStore.java:1185)
  at oracle.net.nt.CustomSSLSocketFactory.getTrustManagerArray(CustomSSLSocketFactory.java:406)
  ... 17 more
    Caused by: java.security.UnrecoverableKeyException: Password verification failed
  at sun.security.provider.JavaKeyStore.engineLoad(JavaKeyStore.java:769)
  ... 20 more

If do specify the trust store, then the connection works fine when I uncomment the following lines:
props.setProperty(""javax.net.ssl.trustStore"", ""/truststore/cwallet.sso"");
props.setProperty(""javax.net.ssl.trustStoreType"", ""SSO"");

But Diffie-Hellman cipher suite should not require truststore or keystore. So what am I doing wrong?
I do see the following in one of oracle docs:
http://docs.oracle.com/cd/B28359_01/network.111/b28530/asossl.htm#i1009717
""There is a known bug in which an OCI client requires a wallet even when using a cipher suite with DH_ANON, which does not authenticate the client.""
However I am not using OCI client. Instead I am using JDBC (ojdbc6.jar). Does the same exist even in JDBC? If so what is the work around to use Diffie-Hellman cipher suite?
Thanks
Joyjit
","","908","<ssl><encryption><jdbc><oracle11g><diffie-hellman>","1","","0","2015-01-29 19:28:03","","2","","","","","2015-01-29 19:28:03",""
"17110723","why is the secret not the same for both parties?","I'm trying to understand how the diffie hellman key exchange works and wrote a simple node.js program to make a test:
var crypto = require(""crypto"");

//create a public & private key for alice
var Alice = crypto.createDiffieHellman(512);
Alice.generateKeys();

//create a public & private key for bob
var Bob = crypto.createDiffieHellman(512);
Bob.generateKeys();

//let bob and alice compute the shared secret
console.log(Alice.computeSecret(Bob.getPublicKey()).toString(""hex""));
console.log(Bob.computeSecret(Alice.getPublicKey()).toString(""hex""));

If i understood the right graphics on this wikipedia article right, then both secrets should be the same. But they never are, why?
","Ah well I already found the solution:
var crypto = require(""crypto"");

var prime = crypto.createDiffieHellman(512).getPrime();

//create a public & private key for alice
var Alice = crypto.createDiffieHellman(prime);
Alice.generateKeys();

//create a public & private key for bob
var Bob = crypto.createDiffieHellman(prime);
Bob.generateKeys();

//let bob and alice compute the shared secret
console.log(Alice.computeSecret(Bob.getPublicKey()).toString(""hex""));
console.log(Bob.computeSecret(Alice.getPublicKey()).toString(""hex""));

","899","<node.js><diffie-hellman>","0","0","1","2013-06-14 14:30:48","17110871","0","1","","","","2013-06-14 14:22:39",""
"17587249","Diffie Hellman Key exchange with Android applications","i am currently trying to do diffie hellman key exchange with an android application.
I got my codes out for the diffie hellman as shown below.
However i am just lost on how do i implement it on the server side and the client side in order for them to communicate to each other.
My codes are shown below
DH.java
public class DH 
{
static boolean isPrime(long n)
{
    if (n%2 == 0)
    {
        return false;
    }

    for(int i = 3 ; i*i<=n;i+=2)
    {
        if(n%i==0)
            return false;
    }
    return true;
}


public static void main(String [] args) throws Exception
{

    Random randomGenerator = new Random();

    long pValue = randomGenerator.nextInt(1000000);
    long gValue = randomGenerator.nextInt(100000);
    long correctPValue;

    boolean checkPrime = isPrime(pValue);
    System.out.println(""the number generated is ""+pValue);
    System.out.println(checkPrime);

    while(checkPrime == false)

    {
        long pValue2 = randomGenerator.nextInt(1000000);
        boolean checkPrimeInLoop = isPrime(pValue2);
        //System.out.println(""value in loop is ""+pValue2);
        if(checkPrimeInLoop == true)
        {
            pValue=pValue2;
            break;
        }
    }


    long checkSP = (pValue*2)+1;
    boolean checkSafePrime = isPrime(checkSP);
    //System.out.println(checkSafePrime);
    while(checkSafePrime==false)
    {
        long pValue3=randomGenerator.nextInt(1000000);
        boolean checkPrimeInLoop = isPrime(pValue3);
        long pValue5=(pValue3*2)+1;
        //boolean checkSafePrimeInLoop = isPrime(pValue4);
        boolean checkSafePrime2InLoop = isPrime(pValue5);

        if(checkSafePrime2InLoop == true && checkPrimeInLoop == true)
        {
            pValue=pValue3;
            break;
        }

    }

    //System.out.println(""the safe prime is""+pValue);//safe prime

    while(gValue>pValue)
    {
        long gValue2=randomGenerator.nextInt(100000);

        if(gValue2<pValue)
        {
            gValue=gValue2;
            break;
        }
    }

    long getDivisor = (pValue-1)/2;
    BigInteger bi1,bi2,bi3,bi4,bi10,bi11,bi12,bi13;

    bi1=BigInteger.valueOf(getDivisor);

    bi2 = BigInteger.valueOf(pValue);

    bi3 = BigInteger.valueOf(gValue);

    bi4= bi3.modPow(bi1,bi2);

    String getBi1 = bi1.toString();

    String getBi2 = bi2.toString();

    String getBi3 = bi3.toString();

    String getBi4 = bi4.toString();


    //bi10 = new BigInteger(getBi1,64); // divisor
    //bi11 = new BigInteger(getBi2,64); // safe prime value
    //bi12 = new BigInteger(getBi3,64); // generator value
    //bi13 = new BigInteger(getBi4,64); // modular value




    long calculatedValue = bi4.longValue();


    while(calculatedValue == 1)
    {
        long gValue3=randomGenerator.nextInt(100000);
        long getDivisorInLoop = (pValue-1)/2;
        BigInteger bi5,bi6,bi7,bi8,bi14,bi15,bi16,bi17,bi18;

        bi5=BigInteger.valueOf(getDivisorInLoop);

        bi6 = BigInteger.valueOf(pValue);

        bi7 = BigInteger.valueOf(gValue3);

        bi8= bi7.modPow(bi5,bi6);


        String getBi5 = bi5.toString();

        String getBi6 = bi6.toString();

        String getBi7 = bi7.toString();

        String getBi8 = bi8.toString();


        //bi14 = new BigInteger(getBi1,64); // divisor
        //bi15 = new BigInteger(getBi2,64); // safe prime value
        //bi16 = new BigInteger(getBi3,64); // generator value
        //bi17 = new BigInteger(getBi4,64); // modular value


        long calculatedValueInLoop = bi8.longValue();
        System.out.println(""the proof that it is  a generator is ""+calculatedValueInLoop);
        if(calculatedValueInLoop!=1)
        {
            gValue=gValue3;
            break;
        }
    }

    BigInteger generatorValue,primeValue,biA,biB,skA,skB,sharedKeyA,sharedKeyB;

    generatorValue = BigInteger.valueOf(gValue);
    primeValue = BigInteger.valueOf(pValue);
    long SecretKeyA=generateSKA();
    long SecretKeyB=generateSKB();
    skA = BigInteger.valueOf(SecretKeyA);
    skB = BigInteger.valueOf(SecretKeyB);
    biA=generatePkA(generatorValue,primeValue,SecretKeyA);
    biB=generatePkB(generatorValue,primeValue,SecretKeyB);
    sharedKeyA = calculateSharedKey(biB,skA,primeValue);
    sharedKeyB = calculateSharedKey(biA,skB,primeValue);

    System.out.println(""the safe prime is""+primeValue);
    System.out.println(""the generator of the safe prime is ""+generatorValue);
    System.out.println(""the public key of A is ""+generatePkA(generatorValue,primeValue,SecretKeyA));
    System.out.println(""the public key of B is ""+generatePkB(generatorValue,primeValue,SecretKeyB));
    System.out.println(""the shared key for A is""+calculateSharedKey(biB,skA,primeValue));
    System.out.println(""the shared key for B is""+calculateSharedKey(biA,skB,primeValue));
    System.out.println(""The secret key for A is""+generateSKA());

    //createKey();
    String getAValue=sharedKeyA.toString();
    String getBValue=sharedKeyB.toString();

    MessageDigest md = MessageDigest.getInstance(""SHA-256"");
    md.update(getAValue.getBytes());

    byte byteData[] = md.digest();
    StringBuffer sb = new StringBuffer();

    for(int i=0;i<byteData.length;i++)
    {
        sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
    }

    String getHexValue = sb.toString();
    System.out.println(""hex format in SHA-256 is ""+getHexValue);

    //createSpecificKey(biG,biP);

    byte [] key = getAValue.getBytes(""UTF-8"");

    MessageDigest sha = MessageDigest.getInstance(""SHA-256"");

    key =  sha.digest(key);
    key = Arrays.copyOf(key, 16);
    SecretKeySpec secretKeySpec =  new SecretKeySpec(key,""AES"");

    Cipher cipher = Cipher.getInstance(""AES"");
    cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);

    CipherInputStream cipt = new CipherInputStream(new FileInputStream(new File(""C:\\Users\\Larry\\Desktop\\Java\\diffie hellman\\src\\jessica.jpg"")),cipher); // enter your filename here
    FileOutputStream fop=new FileOutputStream(new File(""C:\\Users\\Larry\\Desktop\\Java\\diffie hellman\\src\\testEncrypt.jpg""));



    int i;
    while((i=cipt.read())!= -1)
    {
        fop.write(i);
    }

    cipher.init(Cipher.DECRYPT_MODE,secretKeySpec);

    CipherInputStream cipt2 = new CipherInputStream(new FileInputStream(new File(""C:\\Users\\Larry\\Desktop\\Java\\diffie hellman\\src\\testEncrypt.jpg"")),cipher); // encryption of image
    FileOutputStream fop2 = new FileOutputStream(new File(""C:\\Users\\Larry\\Desktop\\Java\\diffie hellman\\src\\testDecrypt.jpg""));//decryption of images

    int j;
    while((j=cipt2.read())!=-1)
    {
        fop2.write(j);
    }





}

public static BigInteger calculateSharedKey(BigInteger pk , BigInteger sk, BigInteger safePrime)
{
    BigInteger sharedKey;

    sharedKey = pk.modPow(sk, safePrime);

    return sharedKey;
}


public static long generateSKA()
{
    Random randomGenerator2=new Random();
    long SKa = randomGenerator2.nextInt(1000000000);

    return SKa;
}

public static long generateSKB()
{
    Random randomGenerator3=new Random();
    long SKb = randomGenerator3.nextInt(10000000);

    return SKb;
}


public static BigInteger generatePkA(BigInteger g,BigInteger p,long skA)
{
    BigInteger Pka,SK;
    long secretKeyA = skA;

    SK = BigInteger.valueOf(secretKeyA);

    Pka=g.modPow(SK, p);

    return Pka;
}


public static BigInteger generatePkB(BigInteger g,BigInteger p,long skB)
{
    BigInteger Pkb,SK;
    long secretKeyB = skB;
    SK = BigInteger.valueOf(secretKeyB);
    Pkb=g.modPow(SK, p);
    return Pkb;
}

My question is how do i incoporate the DH algorithms that i coded in a servlet that is on a server that is hosted an apache tomcat.
I hope you guys can enlighten me with some example codes as i am really lost on this.
My servlet code is as follows below 
LoginServlet.java
>    public class LoginServlet extends HttpServlet {



protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType(""text/html;charset=UTF-8"");
        PrintWriter out = response.getWriter();
        try {
        String un,pw;
        un=request.getParameter(""username"");
        pw=request.getParameter(""password"");
        if(un.equalsIgnoreCase(""hello"") && pw.equals(""world""))
        {
            out.print(1);
            System.out.println(un);
            System.out.println(pw);
        }
        else
        {
            out.print(0);
            System.out.println(un);
            System.out.println(pw);
        }
        } finally {            
            out.close();
        }
    }


    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);


    }


    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }


    @Override
    public String getServletInfo() {
        return ""Short description"";
    }
}

Hope you guys can enlighten me on this issue. Thanks in advance! =)
","","883","<java><android><diffie-hellman>","2","","0","2017-04-16 18:51:35","","0","3","","","","2013-07-11 07:16:32",""
"34237971","Conducting Diffie Hellman between Java and Crypto++ (C++)","I want to encrypt some data between a c++ client and a java server. Searching the web I found crypto++ to use on the client and on the java side to use the KeyAgreement built in java class(btw, I already have bouncycastle jar in my project, I can use it if it's somehow better than the built in one).
I was able to perform DH on on every side with itself as an example, but due to key sizes I cannot make them to agree on a secret key.
My C++ code:
// g++ -g3 -ggdb -O0 -I. -I/usr/include/cryptopp dh-agree.cpp -o dh-agree.exe -lcryptopp -lpthread
// g++ -g -O2 -I. -I/usr/include/cryptopp dh-agree.cpp -o dh-agree.exe -lcryptopp -lpthread

#include <iostream>
using std::cout;
using std::cerr;
using std::endl;

#include <sys/socket.h>
#include <sys/types.h>
#include <stdio.h>
#include <errno.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#include <string>
using std::string;

#include <stdexcept>
using std::runtime_error;

#include ""osrng.h""
using CryptoPP::AutoSeededRandomPool;

#include ""integer.h""
using CryptoPP::Integer;

#include ""nbtheory.h""
using CryptoPP::ModularExponentiation;

#include ""dh.h""
using CryptoPP::DH;

#include ""secblock.h""
using CryptoPP::SecByteBlock;

#include <hex.h>
using CryptoPP::HexEncoder;

#include <filters.h>
using CryptoPP::StringSink;
int main(int argc, char** argv)
{
    try
    {
        // RFC 5114, 1024-bit MODP Group with 160-bit Prime Order Subgroup
        // http://tools.ietf.org/html/rfc5114#section-2.1
        Integer p(""0xB10B8F96A080E01DDE92DE5EAE5D54EC52C99FBCFB06A3C6""
            ""9A6A9DCA52D23B616073E28675A23D189838EF1E2EE652C0""
            ""13ECB4AEA906112324975C3CD49B83BFACCBDD7D90C4BD70""
            ""98488E9C219A73724EFFD6FAE5644738FAA31A4FF55BCCC0""
            ""A151AF5F0DC8B4BD45BF37DF365C1A65E68CFDA76D4DA708""
            ""DF1FB2BC2E4A4371"");

        Integer g(""0xA4D1CBD5C3FD34126765A442EFB99905F8104DD258AC507F""
            ""D6406CFF14266D31266FEA1E5C41564B777E690F5504F213""
            ""160217B4B01B886A5E91547F9E2749F4D7FBD7D3B9A92EE1""
            ""909D0D2263F80A76A6A24C087A091F531DBF0A0169B6A28A""
            ""D662A4D18E73AFA32D779D5918D08BC8858F4DCEF97C2A24""
            ""855E6EEB22B3B2E5"");

        Integer q(""0xF518AA8781A8DF278ABA4E7D64B7CB9D49462353"");        

        // Schnorr Group primes are of the form p = rq + 1, p and q prime. They
        // provide a subgroup order. In the case of 1024-bit MODP Group, the
        // security level is 80 bits (based on the 160-bit prime order subgroup).       

        // For a compare/contrast of using the maximum security level, see
        // dh-agree.zip. Also see http://www.cryptopp.com/wiki/Diffie-Hellman
        // and http://www.cryptopp.com/wiki/Security_level .

        DH dh;
        AutoSeededRandomPool rnd;

        dh.AccessGroupParameters().Initialize(p, q, g);

        if(!dh.GetGroupParameters().ValidateGroup(rnd, 3)) 
            throw runtime_error(""Failed to validate prime and generator"");

        size_t count = 0;

        p = dh.GetGroupParameters().GetModulus();
        q = dh.GetGroupParameters().GetSubgroupOrder();
        g = dh.GetGroupParameters().GetGenerator();

        // http://groups.google.com/group/sci.crypt/browse_thread/thread/7dc7eeb04a09f0ce
        Integer v = ModularExponentiation(g, q, p);
        if(v != Integer::One())
            throw runtime_error(""Failed to verify order of the subgroup"");

        //////////////////////////////////////////////////////////////

        SecByteBlock priv(dh.PrivateKeyLength());
        SecByteBlock pub(dh.PublicKeyLength());
        dh.GenerateKeyPair(rnd, priv, pub);
        printf(""lengths: %d %d\n"",dh.PrivateKeyLength(),dh.PublicKeyLength());
        byte* pubData = pub.data();     
        for(int j = 0; j < pub.size()-1; j++)
            printf(""%02X:"", pubData[j]);    
        printf(""%02X\n"", pubData[pub.size()-1]);    
        // Send pub to Java
        sendData(pub.data(),pub.size());
        // Read pubB from Java
        byte pubBbytes[10000];
        int n = readData(pubBbytes,sizeof(pubBbytes));
        SecByteBlock pubB(pubBbytes,n);
        //////////////////////////////////////////////////////////////

        SecByteBlock sharedA(dh.AgreedValueLength());

        if(!dh.Agree(sharedA, priv, pubB))
            throw runtime_error(""Failed to reach shared secret (1A)"");


        //////////////////////////////////////////////////////////////

        Integer a;

        a.Decode(sharedA.BytePtr(), sharedA.SizeInBytes());
        cout << ""Shared secret (A): "" << std::hex << a << endl;
    }

    catch(const CryptoPP::Exception& e)
    {
        cerr << e.what() << endl;
        return -2;
    }

    catch(const std::exception& e)
    {
        cerr << e.what() << endl;
        return -1;
    }

    return 0;
}

Server code in Java:
package test;
/*
 * Copyright (c) 1997, 2001, Oracle and/or its affiliates. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   - Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 *   - Neither the name of Oracle nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS
 * IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigInteger;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PublicKey;
import java.security.spec.X509EncodedKeySpec;

import javax.crypto.KeyAgreement;
import javax.crypto.spec.DHParameterSpec;

/**
 * This program executes the Diffie-Hellman key agreement protocol
 * between 2 parties: Alice and Bob.
 *
 * By default, preconfigured parameters (1024-bit prime modulus and base
 * generator used by SKIP) are used.
 * If this program is called with the ""-gen"" option, a new set of
 * parameters is created.
 */

public class DHKeyAgreement2 {

    private DHKeyAgreement2() {}

    public final static String sP = ""B10B8F96A080E01DDE92DE5EAE5D54EC52C99FBCFB06A3C6"" +
            ""9A6A9DCA52D23B616073E28675A23D189838EF1E2EE652C0"" +
            ""13ECB4AEA906112324975C3CD49B83BFACCBDD7D90C4BD70"" +
            ""98488E9C219A73724EFFD6FAE5644738FAA31A4FF55BCCC0"" +
            ""A151AF5F0DC8B4BD45BF37DF365C1A65E68CFDA76D4DA708"" +
            ""DF1FB2BC2E4A4371"";

    public final static String sG = ""A4D1CBD5C3FD34126765A442EFB99905F8104DD258AC507F"" +
            ""D6406CFF14266D31266FEA1E5C41564B777E690F5504F213"" +
            ""160217B4B01B886A5E91547F9E2749F4D7FBD7D3B9A92EE1"" +
            ""909D0D2263F80A76A6A24C087A091F531DBF0A0169B6A28A"" +
            ""D662A4D18E73AFA32D779D5918D08BC8858F4DCEF97C2A24"" +
            ""855E6EEB22B3B2E5"";


    public static void main(String argv[]) {
        try {
            DHKeyAgreement2 keyAgree = new DHKeyAgreement2();
            keyAgree.run();
        } catch (Exception e) {
            System.err.println(""Error: "" + e);
            System.exit(1);
        }
    }

    private void run() throws Exception {

        DHParameterSpec dhSkipParamSpec;

        // use some pre-generated, default DH parameters
        System.out.println(""Using SKIP Diffie-Hellman parameters"");
        BigInteger p = new BigInteger(sP,16);
        BigInteger g = new BigInteger(sG,16);
        System.out.println(""P "" + sP.length() + "" is: "" + toHexString(p.toByteArray()));
        System.out.println(""G "" + sG.length() + "" is: "" + toHexString(g.toByteArray()));
        dhSkipParamSpec = new DHParameterSpec(p,g);
        /*
         * Alice creates her own DH key pair, using the DH parameters from
         * above
         */
        System.out.println(""ALICE: Generate DH keypair ..."");
        KeyPairGenerator aliceKpairGen = KeyPairGenerator.getInstance(""DH"");
        aliceKpairGen.initialize(dhSkipParamSpec);
        KeyPair aliceKpair = aliceKpairGen.generateKeyPair();

        // Alice creates and initializes her DH KeyAgreement object
        System.out.println(""ALICE: Initialization ..."");
        KeyAgreement aliceKeyAgree = KeyAgreement.getInstance(""DH"");
        aliceKeyAgree.init(aliceKpair.getPrivate());

        // Alice encodes her public key, and sends it over to Bob.
        byte[] alicePubKeyEnc = aliceKpair.getPublic().getEncoded();
        byte[] alicePrivKeyEnc = aliceKpair.getPrivate().getEncoded();
        System.out.println(""Alice pub key size: "" + alicePubKeyEnc.length);
        System.out.println(""Alice pub key: "" + toHexString(alicePubKeyEnc));
        System.out.println(""Alice priv key size: "" + alicePrivKeyEnc.length);
        System.out.println(""Alice priv key: "" + toHexString(alicePrivKeyEnc));
        ServerSocket ss = new ServerSocket(5454);
        Socket accept = ss.accept();
        byte[] bobPubKeyEnc = readByteArrayFromSocket(accept);
        System.out.println(""Read bob's pubkey: "" + toHexString(bobPubKeyEnc));
        sendByteArrayToBob(alicePubKeyEnc);
        System.out.println(""Sent Alice's pubkey"");

        /*
         * Alice uses Bob's public key for the first (and only) phase
         * of her version of the DH
         * protocol.
         * Before she can do so, she has to instantiate a DH public key
         * from Bob's encoded key material.
         */
        KeyFactory aliceKeyFac = KeyFactory.getInstance(""DH"");
        X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(bobPubKeyEnc);
        PublicKey bobPubKey = aliceKeyFac.generatePublic(x509KeySpec);
        System.out.println(""ALICE: Execute PHASE1 ..."");
        aliceKeyAgree.doPhase(bobPubKey, true);

        /*
         * At this stage, both Alice and Bob have completed the DH key
         * agreement protocol.
         * Both generate the (same) shared secret.
         */
        byte[] aliceSharedSecret = aliceKeyAgree.generateSecret();
        int aliceLen = aliceSharedSecret.length;

        System.out.println(""Alice secret: "" +
          toHexString(aliceSharedSecret));
    }
}

My output from C++:
lengths: 20 128
77:61:FD:93:D9:23:38:41:6D:B0:9B:F8:7A:FB:CE:CA:0E:DF:7D:0A:95:F6:B4:55:FF:64:32:03:2C:B5:9C:47:05:06:FF:1B:72:F3:C6:8A:91:68:13:98:DE:56:0C:D6:02:30:C2:4B:DB:AD:0A:B3:7D:2A:7E:DD:13:A8:7C:97:4A:46:79:6A:85:C7:5B:79:29:D8:E5:2B:F4:59:21:B3:29:EA:6A:2F:FB:70:A1:C8:FD:5C:31:E1:92:A9:B0:67:74:65:3D:C1:1B:33:4B:DE:1C:EB:1E:A1:3A:36:29:0F:DF:A2:FA:5D:DA:69:DC:6D:00:D7:76:95:3A:FD:7D:76
sent 128 bytes, remaining 0
Failed to reach shared secret (1A)

And output from Java:
Using SKIP Diffie-Hellman parameters
P 256 is: 00:B1:0B:8F:96:A0:80:E0:1D:DE:92:DE:5E:AE:5D:54:EC:52:C9:9F:BC:FB:06:A3:C6:9A:6A:9D:CA:52:D2:3B:61:60:73:E2:86:75:A2:3D:18:98:38:EF:1E:2E:E6:52:C0:13:EC:B4:AE:A9:06:11:23:24:97:5C:3C:D4:9B:83:BF:AC:CB:DD:7D:90:C4:BD:70:98:48:8E:9C:21:9A:73:72:4E:FF:D6:FA:E5:64:47:38:FA:A3:1A:4F:F5:5B:CC:C0:A1:51:AF:5F:0D:C8:B4:BD:45:BF:37:DF:36:5C:1A:65:E6:8C:FD:A7:6D:4D:A7:08:DF:1F:B2:BC:2E:4A:43:71
G 256 is: 00:A4:D1:CB:D5:C3:FD:34:12:67:65:A4:42:EF:B9:99:05:F8:10:4D:D2:58:AC:50:7F:D6:40:6C:FF:14:26:6D:31:26:6F:EA:1E:5C:41:56:4B:77:7E:69:0F:55:04:F2:13:16:02:17:B4:B0:1B:88:6A:5E:91:54:7F:9E:27:49:F4:D7:FB:D7:D3:B9:A9:2E:E1:90:9D:0D:22:63:F8:0A:76:A6:A2:4C:08:7A:09:1F:53:1D:BF:0A:01:69:B6:A2:8A:D6:62:A4:D1:8E:73:AF:A3:2D:77:9D:59:18:D0:8B:C8:85:8F:4D:CE:F9:7C:2A:24:85:5E:6E:EB:22:B3:B2:E5
ALICE: Generate DH keypair ...
ALICE: Initialization ...
Alice pub key size: 426
Alice pub key: 30:82:01:A6:30:82:01:1B:06:09:2A:86:48:86:F7:0D:01:03:01:30:82:01:0C:02:81:81:00:B1:0B:8F:96:A0:80:E0:1D:DE:92:DE:5E:AE:5D:54:EC:52:C9:9F:BC:FB:06:A3:C6:9A:6A:9D:CA:52:D2:3B:61:60:73:E2:86:75:A2:3D:18:98:38:EF:1E:2E:E6:52:C0:13:EC:B4:AE:A9:06:11:23:24:97:5C:3C:D4:9B:83:BF:AC:CB:DD:7D:90:C4:BD:70:98:48:8E:9C:21:9A:73:72:4E:FF:D6:FA:E5:64:47:38:FA:A3:1A:4F:F5:5B:CC:C0:A1:51:AF:5F:0D:C8:B4:BD:45:BF:37:DF:36:5C:1A:65:E6:8C:FD:A7:6D:4D:A7:08:DF:1F:B2:BC:2E:4A:43:71:02:81:81:00:A4:D1:CB:D5:C3:FD:34:12:67:65:A4:42:EF:B9:99:05:F8:10:4D:D2:58:AC:50:7F:D6:40:6C:FF:14:26:6D:31:26:6F:EA:1E:5C:41:56:4B:77:7E:69:0F:55:04:F2:13:16:02:17:B4:B0:1B:88:6A:5E:91:54:7F:9E:27:49:F4:D7:FB:D7:D3:B9:A9:2E:E1:90:9D:0D:22:63:F8:0A:76:A6:A2:4C:08:7A:09:1F:53:1D:BF:0A:01:69:B6:A2:8A:D6:62:A4:D1:8E:73:AF:A3:2D:77:9D:59:18:D0:8B:C8:85:8F:4D:CE:F9:7C:2A:24:85:5E:6E:EB:22:B3:B2:E5:02:02:02:00:03:81:84:00:02:81:80:25:E7:BD:24:57:C9:59:EE:E0:EC:7A:F3:D6:22:1C:84:68:52:D9:19:40:5F:1B:C6:CB:A9:3A:42:BF:AB:3C:C2:EC:6F:BC:F9:F9:B2:70:AC:A2:E5:CE:36:FC:06:4F:2D:B3:4F:B5:25:D9:59:AD:D6:AD:B6:17:FA:09:76:AE:89:99:91:52:9B:E0:10:1D:9F:AC:50:AF:02:6D:25:F6:E8:DD:B8:6C:51:17:44:59:98:52:4B:E9:75:E1:D1:26:FE:EA:73:EF:C7:89:7F:70:A8:ED:6F:57:28:A4:0F:1B:F8:21:7D:A5:A2:59:B9:74:42:42:45:BA:EC:E2:53:B3:C4
Alice priv key size: 362
Alice priv key: 30:82:01:66:02:01:00:30:82:01:1B:06:09:2A:86:48:86:F7:0D:01:03:01:30:82:01:0C:02:81:81:00:B1:0B:8F:96:A0:80:E0:1D:DE:92:DE:5E:AE:5D:54:EC:52:C9:9F:BC:FB:06:A3:C6:9A:6A:9D:CA:52:D2:3B:61:60:73:E2:86:75:A2:3D:18:98:38:EF:1E:2E:E6:52:C0:13:EC:B4:AE:A9:06:11:23:24:97:5C:3C:D4:9B:83:BF:AC:CB:DD:7D:90:C4:BD:70:98:48:8E:9C:21:9A:73:72:4E:FF:D6:FA:E5:64:47:38:FA:A3:1A:4F:F5:5B:CC:C0:A1:51:AF:5F:0D:C8:B4:BD:45:BF:37:DF:36:5C:1A:65:E6:8C:FD:A7:6D:4D:A7:08:DF:1F:B2:BC:2E:4A:43:71:02:81:81:00:A4:D1:CB:D5:C3:FD:34:12:67:65:A4:42:EF:B9:99:05:F8:10:4D:D2:58:AC:50:7F:D6:40:6C:FF:14:26:6D:31:26:6F:EA:1E:5C:41:56:4B:77:7E:69:0F:55:04:F2:13:16:02:17:B4:B0:1B:88:6A:5E:91:54:7F:9E:27:49:F4:D7:FB:D7:D3:B9:A9:2E:E1:90:9D:0D:22:63:F8:0A:76:A6:A2:4C:08:7A:09:1F:53:1D:BF:0A:01:69:B6:A2:8A:D6:62:A4:D1:8E:73:AF:A3:2D:77:9D:59:18:D0:8B:C8:85:8F:4D:CE:F9:7C:2A:24:85:5E:6E:EB:22:B3:B2:E5:02:02:02:00:04:42:02:40:3C:16:B6:8F:73:CD:9D:0F:19:D5:A7:54:61:FC:A9:AF:3E:79:78:B8:5E:3E:3D:58:52:2F:95:5E:0D:3F:E0:19:92:17:22:B4:06:9A:E4:ED:9D:55:54:3F:1F:DE:20:36:31:5A:AC:58:FB:A3:C2:7E:65:31:A4:F0:43:37:A2:37
Read 128 bytes
Read bob's pubkey: 77:61:FD:93:D9:23:38:41:6D:B0:9B:F8:7A:FB:CE:CA:0E:DF:7D:0A:95:F6:B4:55:FF:64:32:03:2C:B5:9C:47:05:06:FF:1B:72:F3:C6:8A:91:68:13:98:DE:56:0C:D6:02:30:C2:4B:DB:AD:0A:B3:7D:2A:7E:DD:13:A8:7C:97:4A:46:79:6A:85:C7:5B:79:29:D8:E5:2B:F4:59:21:B3:29:EA:6A:2F:FB:70:A1:C8:FD:5C:31:E1:92:A9:B0:67:74:65:3D:C1:1B:33:4B:DE:1C:EB:1E:A1:3A:36:29:0F:DF:A2:FA:5D:DA:69:DC:6D:00:D7:76:95:3A:FD:7D:76
Sent Alice's pubkey
Error: java.security.spec.InvalidKeySpecException: Inappropriate key specification

Seems like altough I use the same G and P in both programs, the keys generated in C++ are 128\20 byte long (public\private) while in java they are 426\362 byte long. I was wondering where I can set the desired key length in crypto++ but yet to discover that. Also I removed some helper function from the codes above, so I guess copy-paste and trying to compile them won't work. If anyone will actually want to do that I will submit my complete code.
Thanks
","","879","<java><c++><crypto++><diffie-hellman><java-security>","2","","0","2015-12-12 08:45:30","","4","","","","","2015-12-12 08:45:30",""
"4011440","Unknown value in SSH2 Diffie-Hellman Group Exchange Reply packet","I'm trying to understand more about how SSH works. I'm using Wireshark to grab the packets going between my machines (OpenSSH running on both ends). I'm stuck at the Diffie-Hellman Group Exchange Reply packet. There seems to be a length (4 Bytes) and value (1 Byte) not accounted for or not described by RFC 4419, just after the encryption algorithm name. The RFC says that the first chunk of data sent in this packet will be the server's public key and certificates, but I don't know where to look for certificate formats to try and decode this data.
Here is the packet received from the server (TCP, IP, and Ethernet packet information not included). I've spread it out for readability. I've also indicated values and field purposes as I understand them. The 'host key', 'f', and 'hash signature' are indicated to be in these positions by RFC 4419. The line marked with a ""->"" has the data that is confusing me. I can't see anything that the value 0x23 (35) would correlate to.

Packet Length: 444
Padding Length: 10
  Key Exchange
    Msg code: Diffie-Hellman GEX Reply (33)
    Payload:
  00000095                                         Value = 149 bytes
  00000007 7373682d727361                          Value =   7 bytes ; ""ssh-rsa""
->00000001 23                                      Value =   1 byte  ; 35
  00000081 00dca412f58b8d7bea991901652857b3        Value = 129 bytes ; host key
           ...
           ... Total of 129 bytes
           ...

  00000080 420b85197d902a986c7c67b2c4f72336        Value = 128 bytes ; f
         ...
         ... Total of 128 bytes
         ...

  0000008f                                         Value = 143 bytes
  00000007 7373682d727361                          Value =   7 bytes ; ""ssh-rsa""
  00000080 0c9f8b1a7f59c25f279fcc8199ea1ffe        Value = 128 bytes ; hash signature
           ...
           ... Total of 128 bytes
           ...
    Padding String: 
    MAC String: 

I've read through RFCs 4250-4254 and 4419 to try to find some clue for this code 0x23, but I have been unsuccessful so far. It is entirely possible that I missed an explanation in the RFCs, so feel free to point one out to me if that's the case. Any hints or explanation will be helpful.
Thank You
","If you look at RFC 4253, 6.6. Public Key Algorithms, where the key format is described, immediately after the ssh-rsa string comes the key's exponent (mpint e) which in your case is 35.
","876","<ssh><diffie-hellman>","1","1","1","2011-07-16 21:59:09","","0","","","","","2010-10-25 02:04:29",""
"41356625","Can someone tell me how to make a server choose a ECDH_* cipher over ECDHE_*?","I am using RSA cipher for signing the certificate and  SSL_CTX_set_tmp_ecdh_callback() api to set the ECDH parameters for key-exchange. The server always ends up choosing TLS_ECDHE_RSA_* cipher suite. If i make the client send only TLS_ECDH_* cipher suites in the clientHello, the server breaks the connection stating ""no shared cipher"".
Can someone tell me how to make a server choose a ECDH_* cipher over ECDHE_* ?
How is it that the server decides I should choose ECDH_* cipher over ECDHE_* ciphers ?
","Now that this is moved where it's ontopic, and clarified enough, and the partying is over:
Ephemeral ECDH suites: TLS suites that use ephemeral ECDH key exchange (ECDHE-*) use at least nominally ephemeral ECDH keys, which OpenSSL calls 'temporary'. OpenSSL through 1.0.2 has 4-6 ways of setting these keys:
SSL_CTX_set_tmp_ecdh or SSL_set_tmp_ecdh set (only) the 'curve' to be used; to be exact this is an EC_GROUP or formally 'parameter set' that consists of an actual curve defined by a curve equation on an underlying field, plus a specified base point which generates a subgroup on the curve of sufficiently high order and low cofactor, but most of the time we ignore this detail and just call it a 'curve'. OpenSSL then generates a random key on that curve for and during each handshake.
SSL_CTX_set_tmp_ecdh_callback or SSL_set_tmp_ecdh_callback sets a function that is called during each handshake and can either set a specific key, or set a curve and OpenSSL generates a random key on that curve.
SSL_CTX_set_ecdh_auto or SSL_set_ecdh_auto new in 1.0.2 causes OpenSSL during each handshake to choose a curve based on the client hello, and generate a random key on that curve.
Note that each ciphersuite using ECDHE also defines the type of key with matching certificate chain the server must use to authenticate: ECDHE-RSA must use an RSA key&cert while ECDHE-ECDSA must use an ECDSA key&cert (or to be precise EC key and ECDSA cert, since the same EC key can be used for ECDSA, ECDH, ECIES, and more, but usually shouldn't). OpenSSL library can be configured with multiple key&cert pairs, one of each type, and commandline s_server can do two static pairs using -cert -key -dcert -dkey plus one for SNI -cert2 -key2, but other programs may or may not.
However, in 1.1.0 these functions are removed and it appears OpenSSL always does what was formerly ecdh_auto.
Static ECDH suites: TLS suites that use static aka fixed ECDH key exchange (ECDH-*) use a static ECDH key and do not use an ephemeral or temporary ECDH key. Since they do not use a temporary key, the functions involved in setting a temporary curve or key are irrelevant and have no useful effect. Instead the static ECDH key must be in the server's configured key and certificate pair, and the certificate must allow ECDH i.e. it must not have keyUsage that excludes keyAgreement. In addition, in TLS 1.0 and 1.1 the configured certificate must be signed by a CA using a signature algorithm matching the ciphersuite: ECDH-ECDSA ciphersuites must use an ECDH cert signed by an ECDSA CA, and ECDH-RSA ciphersuites must use an ECDH cert signed by an RSA CA; see rfc4492 section 5.3. For TLS 1.2 rfc 5246 section 7.4.2 and A.7 for ECC relaxes this requirement and allows the CA cert to be any algorithm permitted by the client's signature_algorithms extension. However on checking I found OpenSSL doesn't implement this relaxation, so part of my earlier comment is wrong; even for 1.2 it requires the CA signature algorithm match the ciphersuite. 
In addition for all protocol versions the key and (EE) cert must use a curve supported by the client in supported_curves extension, and the cert must express that key in 'named' form (using an OID to identify the curve rather than explicit parameters) and a point format supported by the client in supported_formats extension. With OpenSSL client this is never an issue because it supports all named curves and point formats, and in practice certificates don't use explicit curve parameters.
Thus to get static ECDH with OpenSSL:

configure the server with an EC key (SSL_[CTX_]use_PrivateKey*) and matching certificate (SSL_[CTX_]use_certificate[_chain]*) that allows keyAgreement and is signed by a CA using RSA or ECDSA -- and like all PK-based ciphersuites also configure any chain certs needed by the client(s) to validate the cert
configure both ends to allow (which is true by default) and at least one end to require or the preference end to prefer ciphersuite(s) using ECDH-xyz where xyz is RSA or ECDSA to match the CA signature on the server cert
ignore ecdh_tmp and ecdh_auto entirely

... except in 1.1.0, which on checking I found no longer implements any static-ECDH or static-DH ciphersuites -- even though the static-DH suites are still in the manpage for ciphers. This is not in the CHANGES file that I can find, and I haven't had time to go through the code yet.
","857","<diffie-hellman><openssl>","1","3","2","2019-10-18 12:44:53","41430543","4","","","","","2016-12-27 15:58:21",""
"41356625","Can someone tell me how to make a server choose a ECDH_* cipher over ECDHE_*?","I am using RSA cipher for signing the certificate and  SSL_CTX_set_tmp_ecdh_callback() api to set the ECDH parameters for key-exchange. The server always ends up choosing TLS_ECDHE_RSA_* cipher suite. If i make the client send only TLS_ECDH_* cipher suites in the clientHello, the server breaks the connection stating ""no shared cipher"".
Can someone tell me how to make a server choose a ECDH_* cipher over ECDHE_* ?
How is it that the server decides I should choose ECDH_* cipher over ECDHE_* ciphers ?
","
... except in 1.1.0, which on checking I found no longer implements
  any static-ECDH or static-DH ciphersuites -- even though the static-DH
  suites are still in the manpage for ciphers. This is not in the
  CHANGES file that I can find, and I haven't had time to go through the
  code yet.

https://github.com/openssl/openssl/commit/ce0c1f2bb2fd296f10a2847844205df0ed95fb8e
","857","<diffie-hellman><openssl>","1","0","2","2019-10-18 12:44:53","41430543","4","","","","","2016-12-27 15:58:21",""
"20774631","ftp server with diffie-hellman in java","i have only server side code in java and i want to use diffie-hellman encryption for my server so can anyone help me with this I'm new to programming and I'm just starting to learn so it's my homework and deadline is very close so can anyone help me that would be great...
so far i got this code and i have no idea how i can merge it with my server code
import java.util.*;
import java.math.BigInteger;

public class DiffieHellmanBigInt {

final static BigInteger one = new BigInteger(""1"");

public static void main(String args[]) {

    Scanner stdin = new Scanner(System.in);
    BigInteger p;

    // Get a start spot to pick a prime from the user.
    System.out.println(""Enter the approximate value of p you want."");
    String ans = stdin.next();
    p = getNextPrime(ans);
    System.out.println(""Your prime is ""+p+""."");

    // Get the base for exponentiation from the user.
    System.out.println(""Now, enter a number in between 2 and p-1."");
    BigInteger g = new BigInteger(stdin.next());

    // Get A's secret number.
    System.out.println(""Person A: enter your secret number now."");
    BigInteger a = new BigInteger(stdin.next());

    // Make A's calculation.
    BigInteger resulta = g.modPow(a,p);

    System.out.println(""Person A sends to person B ""+resulta+""."");

    // Get B's secret number.
    System.out.println(""Person B: enter your secret number now."");
    BigInteger b = new BigInteger(stdin.next());

    // Make B's calculation.
    BigInteger resultb = g.modPow(b,p);

    System.out.println(""Person B sends to person A ""+resultb+""."");

    BigInteger KeyACalculates = resultb.modPow(a,p);
    BigInteger KeyBCalculates = resulta.modPow(b,p);

    // Print out the Key A calculates.
    System.out.println(""A takes ""+resultb+"" raises it to the power ""+a+"" mod ""+p);
    System.out.println(""The Key A calculates is ""+KeyACalculates+""."");

    // Print out the Key B calculates.
    System.out.println(""B takes ""+resulta+"" raises it to the power ""+b+"" mod ""+p);
    System.out.println(""The Key B calculates is ""+KeyBCalculates+""."");

}

public static BigInteger getNextPrime(String ans) {

    BigInteger test = new BigInteger(ans);
    while (!test.isProbablePrime(99))
        test = test.add(one);
    return test;        
}

}

","As the comment got too long...
Diffie-hellman is just for key exchange over an unprotected connection, using a prime number math problem. It is used to initialize asynchronous encryption with public and private keys (as used early for SSL/TLS).
Unless required as an exercise (for which you should add a homework or exercise tag), DO NOT implement such security stuff yourself, use existing, well tested libraries. Java has builtin support for SSL (perhaps using other key exchange methods): SSLContext
Despite that, you could use those numbers to derive public and private keys, however, you must assure, that they're really large (and not just isProbablePrime) prime numbers, what can get slow with BigInteger.
To connect client and server, start with Socket. But again a disclaimer, if this is not an exercise, you WILL most probably be attacked (hacked, DDOSed,...), you're best using an existing, well tested and hardened server.
","825","<java><diffie-hellman>","0","2","1","2016-03-15 12:41:14","","1","","573032","","2016-03-15 12:41:14","2013-12-25 16:11:10","2013-12-25 21:13:56"
"48550872","Ignore Weak SSL Algorithm in PHP streamcontext/curl/soap","Statement: At the beginning I would like to state, that I'm well aware (and want to inform others) that this is not the proper way of doing things. If soultion is found, use it as last resort.
My problem is Weak Algorithm. And can't find a way to skip checks.
Company which exposes me endpoint states it is secure and they're not going to upgrade SSL Certificate. I know it's insecure, but can't do anything and must obey their decision.
Error i get file_get_contents(): SSL operation failed with code 1. OpenSSL Error messages: error:14082174:SSL routines:ssl3_check_cert_and_algorithm:dh key too small
and file_get_contents(): Failed to enable crypto in...
My code is:
$context = stream_context_create([
    'http' => [
        'timeout' => 5,
    ],
    'ssl' => [
        // set some SSL/TLS specific options
        'verify_peer' => false,
        'verify_peer_name' => false,
        'allow_self_signed' => true
    ]
]);
var_dump(file_get_contents($wsdl, false, $context));

In browser i ge SSL_ERROR_WEAK_SERVER_EPHEMERAL_DH_KEY and information about weak Diffie Hellman key.
I'm looking for a way to disable this check.
Most preferably via streamContext which I can use in SoapClient
","","784","<php><ssl><soap><diffie-hellman>","0","","0","2018-01-31 20:25:47","","12","","","","","2018-01-31 20:25:47",""
"39534456","How to generate Diffie Hellman parameters in Python?","I need to generate a PEM encoded string in Python which contains DH parameters, something like the following:
openssl dhparam -out dhparam.pem 1024

With the difference I would like to get a string object instead of writing to disk.
How to accomplish this?
While digging I found the following code:
from OpenSSL._util import ffi as _ffi, lib as _lib

dh = _lib.DH_new()
_lib.DH_generate_parameters_ex(dh, 2048, 2, _ffi.NULL)
_lib.DHparams_print_fp(dhfile, dh)
with open('dh.pem', 'w') as dhfile:
    _lib.DHparams_print_fp(dhfile, dh)

But this code writes to disk and uses a different format than PEM.
","","773","<python><diffie-hellman>","0","","0","2017-11-06 06:38:20","","3","1","462707","","2016-09-16 15:00:58","2016-09-16 14:53:24",""
"2403855","Selection of parameters in Diffie-Hellman","maybe it's not so proper to ask this question here... anyway, I'm trying to use the gmp library for the implementation of DH, but the problem here I got is:
Once, when I was doing the tests to observe the output, although big values of prime and the private keys were selected: 

p was about more than 300 digits long in decimal
a, b were about 100 digits long

finally I got a shared secret key which was extremely small, perhaps smaller than 10^8 in decimal... 
This problem didn't show up many times, in fact, during all the observation, it appeared just once...but still, this was not so good at all. 
So I wonder if there are some methods which can avoid this... Thanx a lot
","The Diffie-Hellman key exchange is designed to generate a secret shared key.
By using large values of p, a and b, you ensure that the pool of potential shared keys is a very large one.
However, the actual value of the shared key can be any value within that pool. As a result, it could range from zero to (p - 1)... that's because, the Key is
G^(ab) mod p
Hence, you haven't discovered a problem here... your just seeing the instances when G^(ab) is close in value to a multiple of p, and hence the mod is a low number.
","752","<c><gmp><diffie-hellman>","3","2","2","2010-03-08 19:05:39","2403909","1","","26227","","2010-03-08 19:01:55","2010-03-08 18:55:18",""
"2403855","Selection of parameters in Diffie-Hellman","maybe it's not so proper to ask this question here... anyway, I'm trying to use the gmp library for the implementation of DH, but the problem here I got is:
Once, when I was doing the tests to observe the output, although big values of prime and the private keys were selected: 

p was about more than 300 digits long in decimal
a, b were about 100 digits long

finally I got a shared secret key which was extremely small, perhaps smaller than 10^8 in decimal... 
This problem didn't show up many times, in fact, during all the observation, it appeared just once...but still, this was not so good at all. 
So I wonder if there are some methods which can avoid this... Thanx a lot
","Part of the point of D-H is that the secret key could be any value within the range specified by p. At least in theory, eliminating some of those possibilities would make it less secure, not more so (realistically, as long as you leave a sufficiently large pool of keys, it makes little real difference).
It is true that if an attacker decided to try key-exhaustion (brute-force) attack, and started from 0 and just counted up, they'd hit this one relatively soon. Then again, if you decided on some other lower bound and (for example) re-negotiated the key if it was below that bound, it wouldn't do any real good -- instead of starting at 0, the attacker would start at the specified lower bound, and you'd have gained nothing.
","752","<c><gmp><diffie-hellman>","3","1","2","2010-03-08 19:05:39","2403909","1","","26227","","2010-03-08 19:01:55","2010-03-08 18:55:18",""
"46446456","How to disable diffie-hellman-group1-sha1 in ganymed-ssh2-build210.jar","In Java we are using ganymed-ssh2-build210.jar for connecting to the server via ssh. I need to restrict the weaker algorithm "" diffie-hellman-group1-sha1 "" specifically.
Is there any customizable settings in ganymed-ssh2-build210.jar that allows to restrict this ?
Is there any java.security setting available for restricting the same ?
","You want to change allowed ciphers on the server rather than in your client, otherwise anyone can bypass this easily.
Check answer: https://unix.stackexchange.com/questions/333728/ssh-how-to-disable-weak-ciphers
","748","<java><ssh><diffie-hellman><java-security><ganymede>","0","1","2","2017-09-29 11:06:44","","2","","2169951","","2017-09-27 13:01:59","2017-09-27 11:12:45",""
"46446456","How to disable diffie-hellman-group1-sha1 in ganymed-ssh2-build210.jar","In Java we are using ganymed-ssh2-build210.jar for connecting to the server via ssh. I need to restrict the weaker algorithm "" diffie-hellman-group1-sha1 "" specifically.
Is there any customizable settings in ganymed-ssh2-build210.jar that allows to restrict this ?
Is there any java.security setting available for restricting the same ?
","If you cannot control the server but the library on the client.
Following might be an option

get the source of the library ganymed-ssh2-build210-sources.jar
amend ch/ethz/ssh2/transport/KexManager.java to not support anymore diffie-hellman-group1-sha1
compile the amended code
create the patched library as ganymed-ssh2-build210_1.jar and use this one with the client application

edit Find a step-by-step instruction to verify the above.
Assume following structure
bin/
apache-sshd-1.6.0.tar.gz
ganymed-ssh2-build210.jar
ganymed-ssh2-build210-sources.jar
SshClientDemo.java
SshServerDemo.java


download the archiveschoose a mirror for apache-sshd-1.6.0.tar.gzganymed-ssh2-build210.jarganymed-ssh2-build210-sources.jar

SshServerDemo.java
package sub.optimal;

import java.nio.file.Paths;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.sshd.common.NamedFactory;
import org.apache.sshd.common.kex.KeyExchange;
import org.apache.sshd.common.util.GenericUtils;
import org.apache.sshd.server.SshServer;
import org.apache.sshd.server.keyprovider.SimpleGeneratorHostKeyProvider;
import org.apache.sshd.server.scp.ScpCommandFactory;
import org.apache.sshd.server.shell.InteractiveProcessShellFactory;
import org.apache.sshd.server.shell.ProcessShellFactory;

public class SshServerDemo extends Thread {

    public static void main(String[] args) throws Exception {
        Logger.getGlobal().setLevel(Level.FINEST);
        SshServer sshd = SshServer.setUpDefaultServer();
        sshd.setPort(2222);
        sshd.setKeyPairProvider(
                new SimpleGeneratorHostKeyProvider(Paths.get(""hostkey.ser""))
        );
        sshd.setShellFactory(InteractiveProcessShellFactory.INSTANCE);
        sshd.setCommandFactory(
                new ScpCommandFactory.Builder().withDelegate(
                        cmd -> new ProcessShellFactory(
                                GenericUtils.split(cmd, ' ')
                        ).create()
                ).build()
        );

        List<NamedFactory<KeyExchange>> keyExchangeFactories;
        keyExchangeFactories = sshd.getKeyExchangeFactories();
        keyExchangeFactories.removeIf(
                e -> !e.getName().equals(""diffie-hellman-group1-sha1"")
        );

        sshd.setKeyExchangeFactories(keyExchangeFactories);
        sshd.setPasswordAuthenticator(
                (username, password, session) -> username.equals(password)
        );

        sshd.start();
        Thread.sleep(Long.MAX_VALUE);
    }
}

SshClientDemo.java
package sub.optimal;

import ch.ethz.ssh2.Connection;
import ch.ethz.ssh2.Session;
import ch.ethz.ssh2.StreamGobbler;
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;

public class SshClientDemo {

    public static void main(String[] args) throws Exception {
        Connection conn = new Connection(""localhost"", 2222);
        conn.connect();
        boolean isAuthenticated = conn.authenticateWithPassword(""foo"", ""foo"");
        Session sess = conn.openSession();
        System.out.println(""session is authenticated: "" + isAuthenticated);

        sess.execCommand(""echo I'm there..."");

        InputStream stdout = new StreamGobbler(sess.getStdout());
        BufferedReader br = new BufferedReader(new InputStreamReader(stdout));

        while (true) {
            String line = br.readLine();
            if (line == null) {
                break;
            }
            System.out.println(line);
        }

        sess.close();
        conn.close();
    }
}


extract the Apache server
tar xzf apache-sshd-1.6.0.tar.gz

compile the demo classes
javac -cp ""apache-sshd-1.6.0/lib/*"" -d bin/ SshServerDemo.java
javac -cp ganymed-ssh2-build210.jar -d bin/ SshClientDemo.java

extract the KexManager.java
jar vxf ganymed-ssh2-build210-sources.jar \
    ch/ethz/ssh2/transport/KexManager.java

modify the file KexManager.java
public static final String[] getDefaultKexAlgorithmList() {
    return new String[] { 
        ""diffie-hellman-group-exchange-sha1"", 
        ""diffie-hellman-group14-sha1""// ,
        // ""diffie-hellman-group1-sha1""
    };
}
...
public static final void checkKexAlgorithmList(String[] algos)
    ...
    if (""diffie-hellman-group14-sha1"".equals(algos[i]))
        continue;

    // if (""diffie-hellman-group1-sha1"".equals(algos[i]))
    //    continue;
    ...

compile the patched KexManager.java
javac -cp ganymed-ssh2-build210.jar ch/ethz/ssh2/transport/KexManager.java

create a patched library
cp ganymed-ssh2-build210.jar ganymed-ssh2-build210-patched.jar
jar vuf ganymed-ssh2-build210-patched.jar \
    ch/ethz/ssh2/transport/KexManager.class 


in command line session ONE

start the server
java -cp ""bin/:apache-sshd-1.6.0/lib/*"" sub.optimal.SshServerDemo


in command line session TWO

check first the key exchange algos supported by the server
ssh -vv foo@localhost -p 2222

in the output only the diffie-hellman-group1-sha1 is reported
debug2: peer server KEXINIT proposal
debug2: KEX algorithms: diffie-hellman-group1-sha1

run the client with the un-patched library
java -cp bin/:ganymed-ssh2-build210.jar sub.optimal.SshClientDemo

output
session is authenticated: true
I'm there...

run the client with the patched library
java -cp bin/:ganymed-ssh2-build210-patched.jar sub.optimal.SshClientDemo

output
Caused by: java.io.IOException: Cannot negotiate, proposals do not match.

on the server log
Unable to negotiate key exchange for kex algorithms \
   (client: diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1 \
   / server: diffie-hellman-group1-sha1)


That proves that the SshClientDemo with the patched library cannot use the key exchange algorithm diffie-hellman-group1-sha1 to connect to the server (which for the PoC only support this one).
","748","<java><ssh><diffie-hellman><java-security><ganymede>","0","2","2","2017-09-29 11:06:44","","2","","2169951","","2017-09-27 13:01:59","2017-09-27 11:12:45",""
"47504844","How to generalize the Diffie-Hellman key exchange to three or more parties?","I know how to do a key exchange between 2 parties, but I need to be able to have a key agreement between 3 or more parties.
","It may be a bit more complex than two.
Consider a loop with N people. Each is numbered 1, 2, 3, ..., N. They share the same P and G. Everyone has his own ai number. Now everyone computes Ga for themselves, and send the result to the next one. Then everyone computes the value G1a where G1 is the value that the previous person gives. Repeat the procedure for N times and everyone has the same number GN = Ga1a2...aN.
Pseudocode:
import G, P from public
generate a
send pair{pow(G, a, P), 1} to next person
for i = 1 to N-1:
  receive pair{Gx, x} from previous person
  if x = N:
    key = Gx
  else
    send pair{pow(Gx, a, P), x+1} to next person
return key

","742","<diffie-hellman>","0","1","1","2017-11-27 11:09:09","47504979","4","1","472495","","2017-11-27 11:07:51","2017-11-27 06:06:24",""
"15838381","OpenSSL Diffie Hellman DER Encoding in C","I have a problem and spent the last two days searching for an answers.
I generated a DH Object with OpenSSL in C (more specific Objective-C, but I think there isn't something like that) and now can access the p,q and publickey values that are Bignums. I need to send these values as ASN.1 DER Encoding to a server as one base64 string.
On the Android Client the important step is .getPublic().getEncoded() followed by a base64 Encoding. ( is something with a keyagreement or so)
How can I do that on c or objective-c? Code examples would be very very great.
","For DER encoding, you can i2d_DHParams may solve your purpose.
Suppose you have DH parameters in dh, then you can call
  int len;
  len  = i2d_DHParams (dh, &buf);
  //It should write encoded dh to buf and len should be number of bytes written.

You can see DH methods here.
","733","<objective-c><c><openssl><asn.1><diffie-hellman>","3","1","1","2016-02-26 13:29:17","15851875","0","","","","","2013-04-05 15:58:26",""
"16455365","How Ephemeral Diffie Hellman works?","can anybody please provide link which will clearly explains how ephemeral  Diffie hellman algorithm works (TLS_DHE_RSA_DES_256_CBC)?
","It is described in TSL 1.0 and 1.1 RFCs, see RFC 2246 and RFC 4346.
","727","<openssl><encryption><diffie-hellman>","1","1","1","2013-05-09 07:45:16","16456925","1","","","","","2013-05-09 05:59:17","2013-05-09 11:42:36"
"47190886","certbot using weak diffie hellman encryption","I was reading here
https://weakdh.org/
If I verify security on
https://www.ssllabs.com/ssltest/analyze.html
of one of my sites using certbot I get rated B because of that

is there a solution?
certbot basically is the implementation of https://letsencrypt.org/ for many systems.
","I just ran into the same problem.  The core issue is described here:
https://weakdh.org/
As I understand it, most web servers start Diffie-Hellman with the same default set of prime numbers, and this was later found to be a security flaw.  The fix is to generate new primes for your site's Diffie-Hellman key negotiation.  This page has details: https://weakdh.org/sysadmin.html
In short, run openssl dhparam -out dhparams.pem 2048, and then add the path to the resulting file in your nginx server config block:
ssl_dhparam {path to dhparams.pem};

For example, I put mine in /etc/letsencrypt, so I ran
sudo openssl /etc/letsencrypt/dhparam -out dhparams.pem 2048

and added
ssl_dhparam /etc/letsencrypt/dhparams.pem;

under the other Certbot config lines in my server block.
After restarting nginx with sudo service nginx restart I got an A grade on ssllabs.com.
I hope this helps.
","718","<ssl><lets-encrypt><diffie-hellman><starttls><certbot>","2","2","1","2018-01-15 17:34:32","48268046","3","","","","","2017-11-08 22:36:05",""
"47944301","Diffie-Hellman crack with partial info known","This is school work.
I'm given the problem of finding the private keys of both parties in a DH exchange. The numbers involved in the tests aren't big enough and the task is basically brute-force.
In the task, I can get the prime p, generator g and Alice's public key A.
I'm also given the methods to encrypt a message and decrypt a message with a custom key.
Right now I've only gotten a by simply looping through integers i=1...p and checking if g^i mod p == g^A mod p and promptly returning the first value that meets the requirement.
However, my solution isn't always true according to automated tests.
Anyone know how or even if it's possible to fins a and b with the given info?
","Thanks to a third party, I managed to crack the DH code:
public Integer crackAlice() {
        // TODO
        Integer alicePrivate = 0;

        int p = session.getP();
        int g = session.getG();
        int A = session.getAlicesPublicKey();
        // A = g^a mod p


        System.out.println(""Alice public A: ""+A);
        String message = String.valueOf(156215);

        for (int i = 1; i < p; i++) {
            if (BigInteger.valueOf(g).pow(i).mod(BigInteger.valueOf(p)).equals(BigInteger.valueOf(A))) {
                //System.out.println(""\t\t\t\t""+BigInteger.valueOf(g).pow(i));
                alicePrivate = i;
                System.out.println(""Potential Alice private a: ""+i);
                //break;
            }
        }
        return alicePrivate;
    }

and
public Integer crackBob() {
        // TODO

        Integer bobPrivate = 0;
        Integer a = crackAlice();
        int p = session.getP();
        int g = session.getG();
        int A = session.getAlicesPublicKey();
        String mainMessage = ""teade"";

        String msg = null;
        try {
            msg = session.getEncrypted(mainMessage);
        } catch (Exception e) {
            e.printStackTrace();
        }

        for (int i = 1; i < p; i++) {
            int ai = a*i;
            int Ai = A*i;
            //System.out.println(""a*b = ""+ai);
            BigInteger bigintP = BigInteger.valueOf(p);
            if (((BigInteger.valueOf(g).pow(a).mod(bigintP)).pow(i)).mod(bigintP)
                    .equals(((BigInteger.valueOf(g).pow(i).mod(bigintP)).pow(a)).mod(bigintP))) {
                String decrypt = null;
                try {
                    decrypt = session.getDecryptedWithCustomKey(msg, BigInteger.valueOf(g).pow(a*i).mod(bigintP).intValue());
                } catch (Exception e) {
                    e.printStackTrace();
                }
                if (decrypt != null && decrypt.trim().equals(mainMessage)) {
                    bobPrivate = i;
                    break;
                }
            }
        }
        return bobPrivate;
    }

I hope this will help out other with a similar problem.
","709","<java><algorithm><diffie-hellman>","-1","0","1","2017-12-22 18:42:27","47945970","1","","","","","2017-12-22 16:05:32",""
"36260101","BlueZ: LE secure pairing using Elliptical Curve Diffie-Hellman from command line","One of the main features of Bluetooth v4.2 is LE secure connections, where Elliptic Curve Diffie Helman (ECDH) is used for the key agreement protocol. As of BlueZ v5.26, support for LE secure connections has been added as follows:-
""BlueZ 5.26 is the first release with support for Blueooth 4.2 features. Perhaps the most notable one of these is Low Energy Secure Connections which will require a 3.19 or newer kernel.""[1]
Is there a way to test ECDH pairing through the command line? if not, what is the easiest way to test this?
I'm using BlueZ v5.38 on kernel 3.19 but I can't figure out how to do this. 
[1] http://www.bluez.org/release-of-bluez-5-26/
","In Linux, the secure connections feature using ECDH can be verified by performing pairing (using bluetoothctl) between two Bluetooth v4.2 devices and observing the output through btmon. Look for HCI Event: Link Key Notification and observe the Key type. If it shows P-256, then Secure Connections feature is verified. If it shows P-192, then it is using Secure Simple Pairing (SSP).
Additional background on this can be found in the Bluetooth Core Specification v4.2 in Vol 1, Part A, Section 5.1: Security Architecture.
I hope this helps.
","690","<linux><bluetooth-lowenergy><bluez><diffie-hellman>","2","1","1","2017-02-03 02:19:53","42015695","0","2","","","","2016-03-28 10:07:53",""
"38105010","Extract the shared secret from class ECDiffieHellmanCng","I am currently developing an SSH client and it is necessary that said client is able to exchange keys with the server via ECDH KEX (NIST-256, 384 and 521).
I did some (actually a lot) of research, found the .NET class ECDiffieHellmanCng, and was able to extract and import the public key of the server into the class. 
The problem, however, is that I can't extract the shared secret without deriving it (ECDiffieHellmanCng.DeriveKeyMaterial(CngKey otherpartyPublicKey)).
Is there a way to directly access the shared secret (""k"" as it's called in the RFC papers)?
Here is page 7 from the RFC of the ECDH implementation and why I need the shared secret:

The exchange hash H is computed as the hash of the concatenation of
  the following.
string V_C, client's identification string (CR and LF excluded)
string   V_S, server's identification string (CR and LF excluded)
string   I_C, payload of the client's SSH_MSG_KEXINIT
string   I_S, payload of the server's SSH_MSG_KEXINIT
string   K_S, server's public host key
string   Q_C, client's ephemeral public key octet string
string   Q_S, server's ephemeral public key octet string
mpint    K,   shared secret <-- this is why I need the pure secret
  before any derivation

Thanks for any solutions or hints!
","Even after a lot of research i couldn't find a way to do it so the answer is no - you can not extract the secret.
My solution for the big picture was to discard the ECDiffieHellmanCng class altogether and instead wrap the OpenSSH library in C#.
Hope this at least helps someone else with the same idea.
","681","<c#><.net><ssh><elliptic-curve><diffie-hellman>","0","0","2","2016-07-17 01:00:05","38182858","0","","1636276","","2016-06-29 16:48:13","2016-06-29 16:13:15",""
"38105010","Extract the shared secret from class ECDiffieHellmanCng","I am currently developing an SSH client and it is necessary that said client is able to exchange keys with the server via ECDH KEX (NIST-256, 384 and 521).
I did some (actually a lot) of research, found the .NET class ECDiffieHellmanCng, and was able to extract and import the public key of the server into the class. 
The problem, however, is that I can't extract the shared secret without deriving it (ECDiffieHellmanCng.DeriveKeyMaterial(CngKey otherpartyPublicKey)).
Is there a way to directly access the shared secret (""k"" as it's called in the RFC papers)?
Here is page 7 from the RFC of the ECDH implementation and why I need the shared secret:

The exchange hash H is computed as the hash of the concatenation of
  the following.
string V_C, client's identification string (CR and LF excluded)
string   V_S, server's identification string (CR and LF excluded)
string   I_C, payload of the client's SSH_MSG_KEXINIT
string   I_S, payload of the server's SSH_MSG_KEXINIT
string   K_S, server's public host key
string   Q_C, client's ephemeral public key octet string
string   Q_S, server's ephemeral public key octet string
mpint    K,   shared secret <-- this is why I need the pure secret
  before any derivation

Thanks for any solutions or hints!
","You don't actually need k, then, you just need to compute H.  The ECDiffieHellman class allows you to do that.
byte[] prepend = Concat(V_C, V_S, I_C, I_S, K_S, Q_C, Q_S);
byte[] exchangeHash = ecdh.DeriveKeyFromHash(otherPublic, new HashAlgorithmName(""whatever your hash algorithm is""), prepend, null);

Though that is using .NET 4.6.2 (currently in preview) API: DeriveKeyFromHash
If you are on an older framework it's still possible, but requires using the ECDiffieHellmanCng type specifically:
ecdhCng.SecretPrepend = prepend;
ecdhCng.SecretAppend = null;
ecdhCng.HashAlgorithm = new CngAlgorithm(""whatever your hash algorithm is"");
ecdhCng.KeyDerivationFunction = ECDiffieHellmanKeyDerivationFunction.Hash;
byte[] exchangeHash = ecdhCng.DeriveKeyMaterial(otherPublic);

","681","<c#><.net><ssh><elliptic-curve><diffie-hellman>","0","1","2","2016-07-17 01:00:05","38182858","0","","1636276","","2016-06-29 16:48:13","2016-06-29 16:13:15",""
"31736118","How do you create an EVP_KEY for a peer key given the Base64 encoding?","Using OpenSSL, I've created my Diffie-Hellman Private/Public keys and received my peer's public key.  I can decode my peer's key from Base64 string to byte array, but how do I poke that into my original Public/Private Key EVP_KEY structure so it can be used with the EVP_PKEY_derive() to produce the shared key?
It's very unclear exactly what one should do to create the ""peerkey"" EVP_PKEY, but here's my code that takes a shot at it.
void CreateSharedKey(string &peerKey64)
{
    EVP_PKEY *publicKey;  // Created earlier
    EVP_PKEY *peerKey;

    // Decode peer key
    unsigned char *pBuff;
    int buffLen = base64Decode(peerKey64, &pBuff);
    const unsigned char *pConst = pBuff;

    // Create peer key
    peerKey = d2i_PUBKEY(NULL, &pConst, buffLen);
    if (peerKey == NULL)
        return;

    // Create shared key context
    EVP_PKEY_CTX *ctxShared;
    ctxShared = EVP_PKEY_CTX_new(publicKey, NULL);
    if (ctxShared == NULL)
        return;

    // Initialize for deriving shared key
    if (EVP_PKEY_derive_init(ctxShared) <= 0)
        return;

    // Add peer key to context
    if (int rc = EVP_PKEY_derive_set_peer(ctxShared, peerKey) <= 0)
        return;

    // Determine buffer length for shared key
    size_t sharedKeyBufferSize;
    if (EVP_PKEY_derive(ctxShared, NULL, &sharedKeyBufferSize) <= 0)
        return;

    // Allocate buffer for shared key
    unsigned char *sharedKeyBuffer = new unsigned char[sharedKeyBufferSize];
    if (sharedKeyBuffer == NULL)
        return;

    // Derive the shared key
    if (EVP_PKEY_derive(ctxShared, sharedKeyBuffer, &sharedKeyBufferSize) <= 0)
    {
        unsigned long error = ERR_get_error();
        cout << ""Failed to derive shared key. Error code = "" << error << std::endl;
        cout << ERR_reason_error_string(error) << std::endl;

        return;
    }

    // Free shared key context
    EVP_PKEY_CTX_free(ctxShared);

    // Create Base64 shared key string
    base64Encode(sharedKeyStr, sharedKeyBuffer, sharedKeyBufferSize);
}

The OpenSSL error output is as follows:
Failed to add peer to shared key context. Error code = 101298329
different parameters
How can it have different parameters when it was derived from a Context that was BASED on the parameters already existing in the original publicKey?
","","669","<c++><openssl><diffie-hellman>","3","","0","2015-07-31 20:25:17","","1","2","1340021","","2015-07-31 20:25:17","2015-07-31 00:11:51",""
"43871026","C# and PHP ECDH not matching","I'm trying to generate a shared secret between a web server running PHP and a C# desktop application. I'm aware of the BouncyCastle library, but I'd prefer not having to use it since it's pretty huge.
I'm using phpecc and ECDiffieHellmanCng and trying to generate a shared secret between the two parties but I'm having issues with exporting/importing in C#.
It seems phpecc requires der/pem format in order to import a key, and ECDiffieHellmanCng doesn't seem to have any easy way to export in a compatible format.
Would I need to write my own pem/der encoder and decoder in order to do this or is there some alternative easier way?
Currently I'm doing the following in C#:
using (var ecdh = new ECDiffieHellmanCng())
        {
            ecdh.HashAlgorithm = CngAlgorithm.ECDiffieHellmanP384;
            ecdh.KeyDerivationFunction = ECDiffieHellmanKeyDerivationFunction.Hash;

            var encoded = EncodePem(ecdh.PublicKey.ToByteArray()); 
            //... do something with encoded
        }

private static string EncodePem(byte[] data)
    {
        var pemDat = new StringBuilder();
        var chunk = new char[64];

        pemDat.AppendLine(""-----BEGIN PUBLIC KEY-----"");

        var encodedData = Convert.ToBase64String(data);
        for (var i = 0; i < encodedData.Length; i += chunk.Length)
        {
            var index = 0;
            while (index != chunk.Length && i + index < encodedData.Length)
            {
                chunk[index] = encodedData[i + index];
                index++;
            }
            pemDat.AppendLine(new string(chunk));
        }

        pemDat.AppendLine(""-----END PUBLIC KEY-----"");
        return pemDat.ToString();
    }

Obviously the above is only doing the pem encoding, so on the php side it returns an error when it's trying to parse it:

Type: Runtime
Exception Message: Invalid data.
File: /.../vendor/mdanter/ecc/src/Serializer/PublicKey/Der/Parser.php
Line: 49

",".NET Core 1.0 and .NET Framework 4.7 have the ECParameters struct to import/export keys.  The ToByteArray() method you called is producing a CNG EccPublicBlob which has very little to do with the SEC-1 ECParameters format.
I'm going to assume that you wanted to use secp384r1/NIST P-384, even though you specified that as a hash algorithm.  If you want some other curve, you'll need to do some translations.
The (.NET) ECParameters struct will only help you get started.  Turning that into a file requires translating it into a PEM-encoded DER-encoded ASN.1-based structure. (But if you're sticking with NIST P-256/384/521, you can do it with the byte[] you currently have)
In SEC 1 v2.0 we get the following structures:
SubjectPublicKeyInfo ::= SEQUENCE {
  algorithm AlgorithmIdentifier {{ECPKAlgorithms}} (WITH COMPONENTS {algorithm, parameters}),
  subjectPublicKey BIT STRING
}

ECPKAlgorithms ALGORITHM ::= {
  ecPublicKeyType |
  ecPublicKeyTypeRestricted |
  ecPublicKeyTypeSupplemented |
  {OID ecdh PARMS ECDomainParameters {{SECGCurveNames}}} |
  {OID ecmqv PARMS ECDomainParameters {{SECGCurveNames}}},
  ...
}

ecPublicKeyType ALGORITHM ::= {
  OID id-ecPublicKey PARMS ECDomainParameters {{SECGCurveNames}}
}

ECDomainParameters{ECDOMAIN:IOSet} ::= CHOICE {
  specified SpecifiedECDomain,
  named ECDOMAIN.&id({IOSet}),
  implicitCA NULL
}

An elliptic curve point itself is represented by the following type
  ECPoint ::= OCTET STRING
whose value is the octet string obtained from the conversion routines given in Section 2.3.3.

Distilling this down to the relevant parts, you need to write
SEQUENCE (SubjectPublicKeyInfo)
  SEQUENCE (AlgorithmIdentifier)
    OBJECT IDENTIFIER id-ecPublicKey
    OBJECT IDENTIFIER secp384r1 (or whatever named curve you're using)
  BIT STRING
    public key encoded as ECPoint

The AlgorithmIdentifier contains data that's fixed given you don't change the curve:
SEQUENCE (AlgorithmIdentifier)
30 xx [yy [zz]]
   OBJECT IDENTIFIER id-ecPublicKey (1.2.840.10045.2.1)
   06 07 2A 86 48 CE 3D 02 01
   OBJECT IDENTIFIER secp384r1 (1.3.132.0.34)
   06 05 2B 81 04 00 22

and we can now count how many bytes were in the payload: 16 (0x10), so we fill in the length:
30 10 06 07  2A 86 48 CE   3D 02 01 06  05 2B 81 04
00 22

The public key encoding that everyone understands is ""uncompressed point"", which is
04 th eb yt es of x. th eb yt es of y.

Turns out, that has a fixed size for a given curve, too, so unlike most things that are DER encoded, you can do this in one pass :).  For secp384r1 the x and y coordinate are each 384 bit values, or (384 + 7)/8 == 48 bytes, so the ECPoint is 48 + 48 + 1 == 97 (0x61) bytes. Then it needs to be wrapped in a BIT STRING, which adds one payload byte and the length and tag. So, we get:
private static byte[] s_secp384r1PublicPrefix = {
    // SEQUENCE (SubjectPublicKeyInfo, 0x76 bytes)
    0x30, 0x76,
    // SEQUENCE (AlgorithmIdentifier, 0x10 bytes)
    0x30, 0x10,
    // OBJECT IDENTIFIER (id-ecPublicKey)
    0x06, 0x07, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x02, 0x01,
    // OBJECT IDENTIFIER (secp384r1)
    0x06, 0x05, 0x2B, 0x81, 0x04, 0x00, 0x22,
    // BIT STRING, 0x61 content bytes, 0 unused bits.
    0x03, 0x62, 0x00,
    // Uncompressed EC point
    0x04,
}

...

using (ECDiffieHellman ecdh = ECDiffieHellman.Create())
{
    ecdh.KeySize = 384;

    byte[] prefix = s_secp384r1PublicPrefix;
    byte[] derPublicKey = new byte[120];
    Buffer.BlockCopy(prefix, 0, derPublicKey, 0, prefix.Length);

    byte[] cngBlob = ecdh.PublicKey.ToByteArray();
    Debug.Assert(cngBlob.Length == 104);

    Buffer.BlockCopy(cngBlob, 8, derPublicKey, prefix.Length, cngBlob.Length - 8);

    // Now move it to PEM
    StringBuilder builder = new StringBuilder();
    builder.AppendLine(""-----BEGIN PUBLIC KEY-----"");
    builder.AppendLine(
        Convert.ToBase64String(derPublicKey, Base64FormattingOptions.InsertLineBreaks));
    builder.AppendLine(""-----END PUBLIC KEY-----"");

    Console.WriteLine(builder.ToString());
}

Running the output I got from that into OpenSSL:
$ openssl ec -pubin -text -noout
read EC key
(paste)
-----BEGIN PUBLIC KEY-----
MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEwpbxYmcsNvr14D8k+0VQCkSY4WCV/3V10AiIq7sFdmUX
9+0DMuuLDmcKjL1ZFEFk0yHCPpY+pdkYtzPwE+dsApCPT3Ljk0AxHQBTSo4yjwsElMoA4Mtp8Qdo
LZD1Nx6v
-----END PUBLIC KEY-----
Private-Key: (384 bit)
pub:
    04:c2:96:f1:62:67:2c:36:fa:f5:e0:3f:24:fb:45:
    50:0a:44:98:e1:60:95:ff:75:75:d0:08:88:ab:bb:
    05:76:65:17:f7:ed:03:32:eb:8b:0e:67:0a:8c:bd:
    59:14:41:64:d3:21:c2:3e:96:3e:a5:d9:18:b7:33:
    f0:13:e7:6c:02:90:8f:4f:72:e3:93:40:31:1d:00:
    53:4a:8e:32:8f:0b:04:94:ca:00:e0:cb:69:f1:07:
    68:2d:90:f5:37:1e:af
ASN1 OID: secp384r1
NIST CURVE: P-384

","649","<c#><php><diffie-hellman>","0","1","1","2017-05-10 15:52:02","43897367","0","","2654057","","2017-05-09 13:25:46","2017-05-09 13:20:36",""
"48130343","elliptic curve routines:o2i_ECPublicKey:passed a null parameter:ec_asn1.c:1271:","I'm creating ECDH using openssl EVP method that is explained by openssl elliptic curve diffie helman
Everything works expect where I get the other peer's public key and generate EVP_PKEY* based on it. 
In the given link, it ignores implementation details of decoding other peer's public key and has used get_peerkey pseudo function:
/* Get the peer's public key, and provide the peer with our public key -
 * how this is done will be specific to your circumstances */
peerkey = get_peerkey(pkey);

In my implementation the other peer's public key is received and stored in publickey2 and its size is stored in pub_len2 
size_t pub_len2 = 0;
const unsigned char *publickey2 = get_public_key(&pub_len2);

then I try to create EVP_PKEY* using following code:
EVP_PKEY *pkey3=NULL;

pkey3 = d2i_PublicKey(EVP_PKEY_EC, &pkey3, (const unsigned char **)&publickey2, pub_len2);

if(pkey3 == NULL) {

    ERR_print_errors_fp(stderr);
}

but pkey3 is always null and gives me following error!
139898837907104:error:10098043:elliptic curve routines:o2i_ECPublicKey:passed a null parameter:ec_asn1.c:1389:
139898837907104:error:0D09B00D:asn1 encoding routines:d2i_PublicKey:ASN1 lib:d2i_pu.c:123:

passed a null parameter error.
Do you guys have any idea?
Edit:
I've managed to solve this by using 
    pkey3 = d2i_PUBKEY(NULL, (const unsigned char **)&publickey2, pub_len2);
But I faced another problems, The main problem is that calculated derived secret from these public keys is different in both peers!
Here is my secret derivation procedure which is the same in both peers and exactly copy and pasted (with some modification) from provided link, I made some comments for the modifications reason: 
unsigned char *derive_secret(EVP_PKEY *pkey, 
const unsigned char *peer_key, 
size_t peerkey_len, size_t *secret_len)
{
    EVP_PKEY_CTX *ctx;
    unsigned char *secret;
    //MY modification to get peer key of peer_key buffer.
    //peer_key is created by i2d_PUBKEY at peer side and 
    //received by network and is passed here
    EVP_PKEY *peerkey = d2i_PUBKEY(NULL, &peer_key, peerkey_len);

    //I also set the group of newly created EC
    EC_KEY_set_group(EVP_PKEY_get1_EC_KEY(peer_key),
        EC_GROUP_new_by_curve_name(NID_X9_62_prime256v1));

    //I also set the CONVERSION format to make sure!
    EC_KEY_set_conv_form(EVP_PKEY_get1_EC_KEY(peer_key), POINT_CONVERSION_COMPRESSED);

    /* Create the context for the shared secret derivation */
    if(NULL == (ctx = EVP_PKEY_CTX_new(pkey, NULL))) handleErrors();

    /* Initialise */
    if(1 != EVP_PKEY_derive_init(ctx)) handleErrors();

    /* Provide the peer public key */
    if(1 != EVP_PKEY_derive_set_peer(ctx, peerkey)) handleErrors();

    /* Determine buffer length for shared secret */
    if(1 != EVP_PKEY_derive(ctx, NULL, secret_len)) handleErrors();

    /* Create the buffer */
    if(NULL == (secret = OPENSSL_malloc(*secret_len))) handleErrors();

    /* Derive the shared secret */
    if(1 != (EVP_PKEY_derive(ctx, secret, secret_len))) handleErrors();

    EVP_PKEY_CTX_free(ctx);
    EVP_PKEY_free(peerkey);
    EVP_PKEY_free(pkey);

    /* Never use a derived secret directly. Typically it is passed
     * through some hash function to produce a key */
    return secret;
}

I also printed out sent and received public keys on both side and made sure public keys are being received in one piece and exactly the same as they created and sent!
There is also some minor problem an that is when I figured that a long bytes of public keys are the same for both peers! Is that normal for a public key of EC diffie-helman?
Here are the public keys shown in HEX format
Peer1:


Peer2:



","some bytes (prefix) the same: all public keys in X.509-format (more exactly, SubjectPublicKeyInfo) have at least an 'object identifier' (OID), which is the same for all keys of a given algorithm (like EC), and EC keys also have 'parameters' specifying a group/curve, which is the same for all keys on the same curve -- and keys for an ECDH agreement must be on the same curve. This identical data, combined with the fact that the actual pubkeys have different values but same size, results in the ASN.1 DER encodings starting with the same bytes.
The pubkey encodings you posted use the mostly-obsolete explicit curve specification, see rfc3279 sec 2.3.5 (equivalent to X9.62 or SEC1) which is much longer than the now-preferred and often required 'named' specification. At a guess, you used OpenSSL library below 1.1.0 to generate these keys and didn't set asn1_flag in the EC_GROUP object (or group subobject of EC_KEY) before serializing (aka encoding) with i2d (or PEM_write).
The wiki page you referenced sort of covers this in section 3 ""ECDH and Named Curves"" although it only mentions private keys when this also applies to public keys and certificates -- but public key and (then) certificate are derived from private key, so setting asn1_flag on private key is sufficient. And it doesn't say that 'named' is now the default in 1.1.0 and no longer needs to be explicitly set.
your newly-posted code: point_format is meaningful only when serializing (i2d or PEM_write) so setting it on a deserialized key that will only be used and free'd (not reserialized) is useless. OTOH setting the EC group to its existing value (which was set from deserialization) is useless, but setting it to any other value will cause chaos. EC public keys are points on a specific curve and different curves have entirely different points -- a value that is a point on one curve is not a point on another curve. Also, using a get1 function and not free'ing the result leaks memory.
derivation result different: that's quite wrong for (EC)DH, and I can't reproduce it. Below is your deriviation code with the few fixes indicated above and some tiny changes to match my coding style, plus the generation code from the wiki and a trivial main to drive them, and when I run this I get pubkeys with a common prefix (shorter due to using named form) but as expected the same derivation result:
$ cat SO48130343.c 
/* SO48130343 */
#include <stdio.h>
#include <openssl/opensslv.h>
#include <openssl/evp.h>
#include <openssl/x509.h>
#include <openssl/ec.h>
#include <openssl/err.h>

void hex (unsigned char *p, size_t n){ while(n--) printf(""%02x"", *p++); }

void err (const char * msg){ fprintf(stderr, ""%s:\n"", msg); ERR_print_errors_fp(stderr); exit(1); }

EVP_PKEY * gen (void) {
  EVP_PKEY_CTX *pctx, *kctx;
  EVP_PKEY *params = NULL, *pkey = NULL;
  if( NULL == (pctx = EVP_PKEY_CTX_new_id(EVP_PKEY_EC, NULL)) ) err(""CTX1_new"");
  if( 1 != EVP_PKEY_paramgen_init(pctx) ) err(""pg_init"");
  if( 1 != EVP_PKEY_CTX_set_ec_paramgen_curve_nid(pctx, NID_X9_62_prime256v1) ) err(""pg_curve"");
  if( 1 != EVP_PKEY_paramgen(pctx, &params) ) err(""pg"");
  if( NULL == (kctx = EVP_PKEY_CTX_new(params, NULL)) ) err(""CTX2_new"");
  if( 1 != EVP_PKEY_keygen_init(kctx) ) err(""kg_init"");
  if( 1 != EVP_PKEY_keygen(kctx, &pkey) ) err(""kg"");
#if OPENSSL_VERSION_NUMBER < 0x1010000fL
  EC_KEY_set_asn1_flag (pkey->pkey.ec, OPENSSL_EC_NAMED_CURVE);
  /* point format needed before 'sending' and this is convenient */
  EC_KEY_set_conv_form (pkey->pkey.ec, POINT_CONVERSION_COMPRESSED);
#else
  /* asn1_flag now default but point format still needed */
  EC_KEY_set_conv_form (EVP_PKEY_get0_EC_KEY (pkey), POINT_CONVERSION_COMPRESSED);
#endif
  EVP_PKEY_CTX_free(pctx);
  EVP_PKEY_CTX_free(kctx);
  EVP_PKEY_free(params);
  return pkey;
}
unsigned char * derive (EVP_PKEY * self,
    const unsigned char * peer_ptr, size_t peer_len, size_t *len_ptr){
  EVP_PKEY * peer = d2i_PUBKEY (NULL, &peer_ptr, peer_len);
  /* DON'T change EC_GROUP; point_format not needed on 'receive' */

  EVP_PKEY_CTX *ctx; unsigned char * buf_ptr;
  if( !(ctx = EVP_PKEY_CTX_new (self, NULL)) ) err(""CTX_new"");
  if( 1 != EVP_PKEY_derive_init(ctx) ) err(""derive_init"");
  if( 1 != EVP_PKEY_derive_set_peer(ctx, peer) ) err(""derive_peer"");
  if( 1 != EVP_PKEY_derive (ctx, NULL, len_ptr) ) err(""derive1"");
  if( !(buf_ptr = OPENSSL_malloc (*len_ptr)) ) err(""malloc"");
  if( 1 != EVP_PKEY_derive (ctx, buf_ptr, len_ptr) ) err(""derive2"");
  EVP_PKEY_CTX_free(ctx);
  EVP_PKEY_free(peer);
  return buf_ptr;
}

int main (void){
  EVP_PKEY * pkey1 = gen(), * pkey2 = gen();
  unsigned char pub1 [100], pub2 [100], *ptr1 = &pub1[0], *ptr2 = &pub2[0];
  size_t publen1 = i2d_PUBKEY (pkey1, &ptr1), publen2 = i2d_PUBKEY (pkey2, &ptr2);
  printf (""pub1=""); hex(pub1, publen1); putchar('\n');
  printf (""pub2=""); hex(pub2, publen2); putchar('\n');

  size_t len1, len2;
  unsigned char * out1 = derive (pkey1, pub2, publen2, &len1);
  unsigned char * out2 = derive (pkey2, pub1, publen1, &len2);
  printf (""prv1/pub2=""); hex(out1, len1); putchar('\n');
  printf (""prv2/pub1=""); hex(out2, len2); putchar('\n');
  /* don't bother freeing for Q&D test code */
  return 0;
}
$ gcc [details for my system redacted]
$ ./SO48130343.exe 
pub1=3039301306072a8648ce3d020106082a8648ce3d03010703220003302c6f990445ddd27b2c0ecd3a0cd33109eec44dea0edd538c6bfc98796885e3
pub2=3039301306072a8648ce3d020106082a8648ce3d0301070322000311940ba32c0b4d71f8785a884f7ea74cebed17e841e93a0fb1ccbeac32b2eb3b
prv1/pub2=84b7a84249f1e88741a751a05d34a43e4cb131e012181967e4f465c1f4bf3b35
prv2/pub1=84b7a84249f1e88741a751a05d34a43e4cb131e012181967e4f465c1f4bf3b35

","648","<c><openssl><elliptic-curve><diffie-hellman>","1","2","1","2018-01-11 09:09:42","48203295","2","","2556354","","2018-01-09 23:36:33","2018-01-06 18:11:01",""
"47004063","How can I calculate private key in algorithm Diffie-Hellman with known public key using openssl ?","I have the next formula:
2^x mod p = m;

I know the value p and m, how can I calculate x using openssl library ? 
","","589","<openssl><diffie-hellman><mod>","0","","0","2017-10-29 18:57:56","","5","","","","","2017-10-29 18:57:56",""
"28953344","Javacard KeyAgreement differs from BouncyCastle KeyAgreement","My problem looks like this. I have generated keys on the card and the terminal sides. I have on the terminal side the card public and private keys and the terminals public and private keys, and the same on the card side (i'm doing tests so thats why i have all of them on the terminal and on the card). When i generate KeyAgreement (terminal side) for the card as private and for the terminal as private the secters are the same, so the generation is OK and i get a 24 bytes (192 bit) secret. When i generate the the secrets on the card (2 cases like on the terminal) the secrets are also the same, but they ale shorter - 20 bytes (160 bit). Here are the generation codes. the terminal:
ECPublicKey publicKey;
ECPrivateKey privateKey;

...
KeyAgreement aKeyAgree = KeyAgreement.getInstance(""ECDH"", ""BC"");
aKeyAgree.init(privateKey);
aKeyAgree.doPhase(publicKey, true);
byte[] aSecret = aKeyAgree.generateSecret();

and the card side:
eyAgreement = KeyAgreement.getInstance(KeyAgreement.ALG_EC_SVDP_DH, false);
short length = terminalEcPublicKey.getW(array, (short) 0);

keyAgreement.init(cardEcPrivateKey);
short secretlength = keyAgreement.generateSecret(array, (short)0, length, buffer, (short)0);

","There is a problem in your implementation of KeyAgreement.ALG_EC_SVDP_DH in the terminal side. The correct length of output of the this method of key agreement should always be 20 bytes since SHA-1 is being performed on the derived output.
So in your terminal side, you should perform SHA-1 after generating the secret data.
","580","<bouncycastle><javacard><elliptic-curve><diffie-hellman>","2","5","1","2015-03-10 00:33:50","28954235","0","","","","","2015-03-09 23:02:55",""
"27914464","Storing very large numbers in Java","I'd like to store a long integer in Java, specifically the 6144-bit MODP Group (Group 17) from RFC 3526. However this number does not seem to fit to a BigInteger. Is there a way to use this prime number in Java?
EDIT: I tried
BigInteger p = new BigInteger(Integer.toString(pValue));
p = 33751521821438561184518523159967412330064897805741846548173890474429429901326672445203235101919165483964194359460994881062089387893762814044257438204432573941083014827006090258925875161018096327732335800595831915976014208822304007327848132734933297885803213675261564962603340457220776826322500058091310967253976619973988033663666385188155212656268079501726223369693427999804134467810120772356498596945532366527400517575471969335854905274504119509592366013711954148258884879224599915203456315881034776553083676995718335598586395591169999570824515035017543533352697525287753332500527176569576894926734950469293596134095086603716860086302051544539652689091299099784588919052383463057789440565460681441902442399956419060521629604697347879024654313800186078316526964529288062740879011035175920059192178561473199006205896719435014765345518490882366607110905303449152556221163232127426440691921134648766635695850239231304591744215610985029636895406718880766308249227315984267542266259489684372223916445411015900506239419267909716320331208988978180868987431623710347617992356201449023892203230133009421463914291201346063125219636964261683591541014344239275340735690997732222069758773963390876360546515755280517042160525487302898122311669799679447530453600399342697032714458549591285939453949034981248114322322367238645042515984447890788917823576330019151696568654314153058547592091366014550143819685170068343700104677609041166369760080933413605498962382077778845599834907475953430787446201384567328530675275792962354883770806900827183685718353469574731680520621944540947734619035177180057973022652571032196598229259194875709994709721793154158686515748507274224181316948797104601068212015232921691482496346854413698719750190601102705274481050543239815130686073601076304512284549218459846046082253596762433827419060089029417044871218316020923109988915707117567;

","That number will easily fit into a Java BigInteger, but both methods you're using to get it are using an intermediate form into which it cannot fit:
BigInteger p = new BigInteger(Integer.toString(pValue));
p = 337515218214385611845185231599674123300648978057418465481...7117567;

The former won't work because the Integer class cannot hold a number that big. The latter won't work because a ""naked"" number in your source code is treated as an int.
With the actual hex value taken from RFC3526, the following program shows how to do it:
import java.math.BigInteger;

public class Test
{
    public static void main(String[] args) {
        BigInteger num = new BigInteger(
            ""FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E08"" +
            ""8A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B"" +
            ""302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9"" +
            ""A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE6"" +
            ""49286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8"" +
            ""FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D"" +
            ""670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C"" +
            ""180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF695581718"" +
            ""3995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D"" +
            ""04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7D"" +
            ""B3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D226"" +
            ""1AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200C"" +
            ""BBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFC"" +
            ""E0FD108E4B82D120A92108011A723C12A787E6D788719A10BDBA5B26"" +
            ""99C327186AF4E23C1A946834B6150BDA2583E9CA2AD44CE8DBBBC2DB"" +
            ""04DE8EF92E8EFC141FBECAA6287C59474E6BC05D99B2964FA090C3A2"" +
            ""233BA186515BE7ED1F612970CEE2D7AFB81BDD762170481CD0069127"" +
            ""D5B05AA993B4EA988D8FDDC186FFB7DC90A6C08F4DF435C934028492"" +
            ""36C3FAB4D27C7026C1D4DCB2602646DEC9751E763DBA37BDF8FF9406"" +
            ""AD9E530EE5DB382F413001AEB06A53ED9027D831179727B0865A8918"" +
            ""DA3EDBEBCF9B14ED44CE6CBACED4BB1BDB7F1447E6CC254B33205151"" +
            ""2BD7AF426FB8F401378CD2BF5983CA01C64B92ECF032EA15D1721D03"" +
            ""F482D7CE6E74FEF6D55E702F46980C82B5A84031900B1C9E59E7C97F"" +
            ""BEC7E8F323A97A7E36CC88BE0F1D45B7FF585AC54BD407B22B4154AA"" +
            ""CC8F6D7EBF48E1D814CC5ED20F8037E0A79715EEF29BE32806A1D58B"" +
            ""B7C5DA76F550AA3D8A1FBFF0EB19CCB1A313D55CDA56C9EC2EF29632"" +
            ""387FE8D76E3C0468043E8F663F4860EE12BF2D5B0B7474D6E694F91E"" +
            ""6DCC4024FFFFFFFFFFFFFFFF"", 16);
        System.out.println(num);
    }
}

The output of that program is:
33751521821438561184518523159...8915707117567

","564","<java><diffie-hellman>","-1","12","2","2015-01-13 03:47:41","27914482","5","","1397215","","2015-01-13 03:34:19","2015-01-13 03:29:00",""
"27914464","Storing very large numbers in Java","I'd like to store a long integer in Java, specifically the 6144-bit MODP Group (Group 17) from RFC 3526. However this number does not seem to fit to a BigInteger. Is there a way to use this prime number in Java?
EDIT: I tried
BigInteger p = new BigInteger(Integer.toString(pValue));
p = 33751521821438561184518523159967412330064897805741846548173890474429429901326672445203235101919165483964194359460994881062089387893762814044257438204432573941083014827006090258925875161018096327732335800595831915976014208822304007327848132734933297885803213675261564962603340457220776826322500058091310967253976619973988033663666385188155212656268079501726223369693427999804134467810120772356498596945532366527400517575471969335854905274504119509592366013711954148258884879224599915203456315881034776553083676995718335598586395591169999570824515035017543533352697525287753332500527176569576894926734950469293596134095086603716860086302051544539652689091299099784588919052383463057789440565460681441902442399956419060521629604697347879024654313800186078316526964529288062740879011035175920059192178561473199006205896719435014765345518490882366607110905303449152556221163232127426440691921134648766635695850239231304591744215610985029636895406718880766308249227315984267542266259489684372223916445411015900506239419267909716320331208988978180868987431623710347617992356201449023892203230133009421463914291201346063125219636964261683591541014344239275340735690997732222069758773963390876360546515755280517042160525487302898122311669799679447530453600399342697032714458549591285939453949034981248114322322367238645042515984447890788917823576330019151696568654314153058547592091366014550143819685170068343700104677609041166369760080933413605498962382077778845599834907475953430787446201384567328530675275792962354883770806900827183685718353469574731680520621944540947734619035177180057973022652571032196598229259194875709994709721793154158686515748507274224181316948797104601068212015232921691482496346854413698719750190601102705274481050543239815130686073601076304512284549218459846046082253596762433827419060089029417044871218316020923109988915707117567;

","Use the BigInteger(String val) constructor to create the number, that is: pass the number as a String. The BigInteger class implements an arbitrary-precision integer data type, any integer can fit - as long as there's enough physical memory to represent it:
BigInteger p = new BigInteger(""33751521821438561184518523159967412330064897805741846548173890474429429901326672445203235101919165483964194359460994881062089387893762814044257438204432573941083014827006090258925875161018096327732335800595831915976014208822304007327848132734933297885803213675261564962603340457220776826322500058091310967253976619973988033663666385188155212656268079501726223369693427999804134467810120772356498596945532366527400517575471969335854905274504119509592366013711954148258884879224599915203456315881034776553083676995718335598586395591169999570824515035017543533352697525287753332500527176569576894926734950469293596134095086603716860086302051544539652689091299099784588919052383463057789440565460681441902442399956419060521629604697347879024654313800186078316526964529288062740879011035175920059192178561473199006205896719435014765345518490882366607110905303449152556221163232127426440691921134648766635695850239231304591744215610985029636895406718880766308249227315984267542266259489684372223916445411015900506239419267909716320331208988978180868987431623710347617992356201449023892203230133009421463914291201346063125219636964261683591541014344239275340735690997732222069758773963390876360546515755280517042160525487302898122311669799679447530453600399342697032714458549591285939453949034981248114322322367238645042515984447890788917823576330019151696568654314153058547592091366014550143819685170068343700104677609041166369760080933413605498962382077778845599834907475953430787446201384567328530675275792962354883770806900827183685718353469574731680520621944540947734619035177180057973022652571032196598229259194875709994709721793154158686515748507274224181316948797104601068212015232921691482496346854413698719750190601102705274481050543239815130686073601076304512284549218459846046082253596762433827419060089029417044871218316020923109988915707117567"");

","564","<java><diffie-hellman>","-1","12","2","2015-01-13 03:47:41","27914482","5","","1397215","","2015-01-13 03:34:19","2015-01-13 03:29:00",""
"48783559","Diffie-Hellman key exchange between Crypto++ and Python","Consider the Diffie-Hellman key exchange between client and server, where the client application is written in c++ and the back-end is written in python.
The client application uses Crypto++ lib for crypto stuff and Python uses cryptography.
Here client application part where private and public key generate 
//domain parameters
OID CURVE = secp256k1();
AutoSeededX917RNG<AES> rng;
ECDH < ECP >::Domain dhA(CURVE);

// application private and publik key
SecByteBlock privA(dhA.PrivateKeyLength()), pubA(dhA.PublicKeyLength());
std::string privB64(R""(P3VfVpnSYcKQWX+6EZOly2XKy6no4UAB0cQhjBfyBD4=)"");
privA.Assign(reinterpret_cast<const byte*>(FromB64(privB64).c_str()), dhA.PrivateKeyLength());
dhA.GeneratePublicKey(rng, privA, pubA);

// serializa public key into integer
Integer intPub;
intPub.Decode(pubA.BytePtr(), pubA.SizeInBytes());
std::string ret;
intPub.DEREncode(CryptoPP::StringSink(ret));
std::cout << ToB64(ret);// the output is loaded into python

Now the question is that I don't know how to deserialize the public key into python EllipticCurvePublicKey. When I use cryptography.hazmat.primitives.serialization.load_der_public_key()
I'm getting 
ValueError: Could not deserialize key data

Does anyone try to implement Diffie-Hellman key exchange between Crypto++ and Python using those two libraries?
","The issue was when serialized data in some way was transferred to backend how to recover it with Python EllipticCurvePublicKey type interface. Even if I decide to use protobuf the same question would arise.
But now I found the solution I'll put it here if anyone also will encounter this issue.
As I find out there is no interface to directly load Python EllipticCurvePublicKey object from Crypto++ SecByteBlock serialized object (which is representing the Diffie-Hellman public key in this scope).
To do this we need to convert public key into elliptic curve point and the serialize each coordinate of point (which is a big integer) in the way as you can see in this code snipped:
CryptoPP::DL_GroupParameters_EC<ECP> params(CURVE);    
CryptoPP::ECPPoint p = params.DecodeElement(pubA.BytePtr(), true);
std::cout << CryptoPP::IntToString(p.x) << std::endl;// this will be send to backend
std::cout << CryptoPP::IntToString(p.y) <<std::endl;

To recover the two integers (x and y coordinates of the point) in the Python code as a DH public key you need to do the following 
# assuming that the x and y values are from client side 
x = 109064308162845536717682288676453496629093274218806834681903624047410153913758
y = 63162707562199639283552673289102028849183508196715869820627148926667819088660
peer_public_key =cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers(x, y, ec.SECP256K1()).public_key(default_backend())

","533","<python><c++><crypto++><diffie-hellman><python-cryptography>","2","2","1","2018-02-17 15:21:42","48807366","0","","608639","","2018-02-15 00:51:42","2018-02-14 09:23:10",""
"51305689","Dart - secret key generation based on elliptic curve 25519","I am looking for a dart package in order to implement key exchange protocol (Elliptic-curve Diffie–Hellman) in a Flutter application. So the flow will be like this:

app generates a key pair during login and sends the public key to
server (so a new key pair is generated for every login)
server sends back its public key that it just generated
app generates a secret key from its private key and server's public
key
app includes the hmac of all subsequent messages sent to the server

I tried using the ed25519_dart package for the key generation, but it doesn't work. My app doesn't even start due to integer literal can't be represented in 64 bits error, which is also pointed out by the dart analyzer.
I also took a look at pointycastle, but it doesn't seem to support Diffie–Hellman. 
The Diffie–Hellman package also doesn't work for me. Provided example throws this exception in the first line: 
FormatException: Invalid radix-16 number
FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B1...

Any idea how I could achieve what I want to do in a Flutter application?
","The error I am assuming is connected to BigNum and Dart 2. Pointy Castle has a branch on GitHub where they are switching to Dart 2.0. 
Here are some ways you could get a keypair:

Use a native SDK (Java, Kotlin, or C++) and use a platform channel
Use the pointy castle Dart 2.0 branch
Try flutter_sodium package. It works with Dart 2 but is a work in progress.

Hopefully, this helps. I am trying to figure out the best way as well!
","519","<dart><flutter><diffie-hellman><ed25519>","0","0","1","2019-09-07 12:25:20","","5","","5277240","","2018-07-12 12:28:17","2018-07-12 12:26:50",""
"37562264","How does Elliptic Curve Diffie Hellman work on JavaCard, in combination with Java?","I'm trying to get Elliptic Curve Diffie Hellman to work on a JavaCard (version 2.2.1).
On the JavaCard, I have the following code right now:
byte temp[] = new byte[100];
byte secret[] = new byte[100];
byte size = buf[ISO7816.OFFSET_LC];

Util.arrayCopy(buf, ISO7816.OFFSET_CDATA, temp, (byte) 0, size);

// the public key is in temp
short len = dh.generateSecret(temp, (byte) 0, size, secret, (byte) 0);

Util.arrayCopy(temp, (byte) 0, buf, ISO7816.OFFSET_CDATA, size);
//Util.arrayCopy(secret, (byte) 0, buf, ISO7816.OFFSET_CDATA, len);
apdu.setOutgoingAndSend(ISO7816.OFFSET_CDATA, size);

And I initialize dh as follows:
keyPair = new KeyPair(KeyPair.ALG_EC_FP, KeyBuilder.LENGTH_EC_F2M_163);
keyPair.genKeyPair();
dh = KeyAgreement.getInstance(KeyAgreement.ALG_EC_SVDP_DH, false);
dh.init(keyPair.getPrivate());

All of this seems to work, except for the dh.generateSecret call, where the applet simply seems to crash. If I leave the call out, and return other data, that works nicely. In which I import the data that is sent by the terminal. In the terminal, I have the following:
// generate an ecdh keypair
KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""EC"");
keyGen.initialize(163);
KeyPair keyPair = keyGen.generateKeyPair();

// initialize DH
KeyAgreement dh = KeyAgreement.getInstance(""ECDH"");
dh.init(keyPair.getPrivate());

//byte encKey[] = keyPair.getPublic().getEncoded();

// X9.62 encoding, no compression
int qLength = (163+7)/8;
byte[] xArr = ((ECPublicKey) keyPair.getPublic()).getW().getAffineX().toByteArray();
byte[] yArr = ((ECPublicKey) keyPair.getPublic()).getW().getAffineY().toByteArray();
byte[] enc2 = new byte[1+2*qLength];
enc2[0] = (byte) 0x04;
System.arraycopy(xArr, 0, enc2, qLength - xArr.length, xArr.length);
System.arraycopy(yArr, 0, enc2, 2* qLength - yArr.length, yArr.length);

byte res[] =send((byte) 0x00, enc2).getData();

I have tried several things. Right now, the code that sends the public key tries to encode it in X9.62 encoding (uncompressed) as specified by the JavaCard docs. However, I've also tried the default encode method, which gives exactly the same result.
I don't seem to be able to get any error out of the JavaCard about what is going wrong. Does anyone know what is going wrong? Or does anyone have a working example on how to do a key-exchange on a JavaCard?
","As vojta already indicated:
keyPair = new KeyPair(KeyPair.ALG_EC_FP, KeyBuilder.LENGTH_EC_F2M_163);

just tries to generate a key pair, and it probably works up to a point. But an Fp curve is different from a F2m curve, and to my knowledge there are no 163 bit Fp curves (to my knowledge anyway).
This means that you never actually installed the domain parameters, unless you generated your own, and I would call that unlikely.
Use a Fp curve with a known key length and set the parameters, at least for the public key (for JCOP cards you may have to set them for the private key as well). You'd normally use a 224 bit key size or higher to be secure.
","518","<java><javacard><elliptic-curve><diffie-hellman>","4","0","1","2016-08-20 22:28:02","","2","1","","","","2016-06-01 07:35:51",""
"46052701","How to use Crypto++ to perfom DH key exchange (CryptoPP::DH::Agree returns false)","I'm trying to use Crypto++ to perform Diffie-Hellman key exchange. I have written a simple program to check if this is working. As you can guess, it is not.
This program was written based on wiki article: https://www.cryptopp.com/wiki/Diffie-Hellman It is generating public and private keys and then uses them to cal function CryptoPP::DH::Agree. It was working when I was using the same pair of keys for both sides like it is on the wiki. This does not have much practical sense though. However, when I trying to use different keys, CryptoPP::DH::Agree returns false.
I suspect that I'm doing something incorrectly but I have no idea what.
#include <crypto++/cryptlib.h>
#include <crypto++/dh.h>
#include <cryptopp/dh2.h>
#include <crypto++/osrng.h>
#include <crypto++/integer.h>
#include <crypto++/nbtheory.h>
#include <iostream>


static CryptoPP::AutoSeededRandomPool rnd;
static CryptoPP::DH dhA, dhB;
static CryptoPP::SecByteBlock privKeyA, pubKeyA, privKeyB, pubKeyB;


static void createDomainParameters(CryptoPP::DH &dh)
{
    CryptoPP::PrimeAndGenerator pg;
    pg.Generate(1, rnd, 512, 511);
    const CryptoPP::Integer p = pg.Prime();
    const CryptoPP::Integer q = pg.SubPrime();
    const CryptoPP::Integer g = pg.Generator();

    std::cout << ""P: "" << p << '\n';
    std::cout << ""Q: "" << q << '\n';
    std::cout << ""G: "" << g << '\n';

    dh = CryptoPP::DH(p, q, g);
}

static void createAsymetricKey(const CryptoPP::DH &dh, CryptoPP::SecByteBlock &privKey, CryptoPP::SecByteBlock &pubKey)
{
    privKey = CryptoPP::SecByteBlock(dh.PrivateKeyLength());
    pubKey = CryptoPP::SecByteBlock(dh.PublicKeyLength());
    dh.GenerateKeyPair(rnd, privKey, pubKey);

    CryptoPP::Integer a, b;

    a.Decode(privKey.BytePtr(), privKey.SizeInBytes());
    std::cout << ""privKey: "" << a << std::endl;

    b.Decode(pubKey.BytePtr(), pubKey.SizeInBytes());
    std::cout << ""pubKey:  "" << b << std::endl;
}

static void createSymetricKey(const CryptoPP::DH &dh, const CryptoPP::SecByteBlock &privKey, const CryptoPP::SecByteBlock &pubKey)
{
    CryptoPP::SecByteBlock shared(dh.AgreedValueLength());
    if(!dh.Agree(shared, privKey, pubKey))
        throw std::runtime_error(""Failed to reach shared secret"");

    CryptoPP::Integer x;
    x.Decode(shared.BytePtr(), shared.SizeInBytes());
    std::cout << ""shared: "" << x << std::endl;
}

int main()
{
    std::cout << std::hex;

    createDomainParameters(dhA);
    std::cout << std::endl;
    createDomainParameters(dhB);

    std::cout << ""\n------------------------------\n"" << std::endl;
    createAsymetricKey(dhA, privKeyA, pubKeyA);
    std::cout << std::endl;
    createAsymetricKey(dhB, privKeyB, pubKeyB);

    if(dhA.AgreedValueLength() != dhB.AgreedValueLength())
        throw std::runtime_error(""Shared secret size mismatch"");

    std::cout << ""\n------------------------------\n"" << std::endl;
    createSymetricKey(dhA, privKeyA, pubKeyB);
    std::cout << std::endl;
    createSymetricKey(dhB, privKeyB, pubKeyA);

    return 0;
}

When you change calls of createSymetricKey so it uses key from the same pair, it works.
createSymetricKey(dhA, privKeyA, pubKeyA);
std::cout << std::endl;
createSymetricKey(dhB, privKeyB, pubKeyB);

AFAIK this has no sense though. What is the correct way to use CryptoPP::DH::Agree?
","","502","<crypto++><diffie-hellman>","1","","0","2017-09-05 10:25:05","","3","1","","","","2017-09-05 10:25:05",""
"22410765","How to Format OpenSSL Keys to Match Online Sample (JSBN-ECC)","I want to be able to format the public key of Elliptic Curve Diffie-Hellman in OpenSSL - Ruby into something like this online example (link), as I have been using that JS library.
My code below generates an OpenSSL::PKey::EC public and private keys
#Ruby
ec = OpenSSL::PKey::EC.new('secp128r1')
ec.generate_key

ec.private_key
#--> 205607153615223513963863936713567041725

ec.public_key.to_bn
#--> 499599043529551953518354858381998373780459818901085313561109939106744612770290

Try copying the private key above 205607153615223513963863936713567041725 and pasting it on the online (link) as Alices' Private value. But click the secp1284r1 button first to have same curve parameters, and then click Compute Public button.
That will generate a public key from the inputted private key. However, the Ruby OpenSSL documentation isn't really helpful, and I am stuck on figuring out how to convert the generated public key above:
499599043529551953518354858381998373780459818901085313561109939106744612770290

Into something like this (as seen from the online site):
x: 107060165679262225845922473865530329196
y: 109296969851421346147544217212275741170

I've assumed that by properly converting one, it can somehow become equal to the other since they have same curve parameters. Or am I wrong? (And also because the default format of point_conversion_form is :uncompressed, as I just have tested) Please help.
P.S. You might wonder why I need to convert the public key into the other. No, I don't really have to. I just want to learn how to convert it as I'll be using that method to convert something similar. And this is the simplified question for your testing-convenience.
","ec.public_key.to_bn
#--> 499599043529551953518354858381998373780459818901085313561109939106744612770290

It would probably be better to print that in hex.
The public key is a point on the curve. That is, its an (x,y) coordinate. So that value probably needs to be split (hence the reason for printing in hex). Taking a guess:
x = 499599043529551953518354858381998373780
y = 459818901085313561109939106744612770290

The public key is a point because its derived from the base point G, which is also a point. G is sometimes expanded as (g_x, g_y). The private exponent is a (or b), which is a scalar or integer. So the public key is A=G^a or A=(g_x, g_y)^a, which is a point.


And also because the default format of point_conversion_form is :uncompressed, as I just have tested

Point conversion/compression is just a presentation layer optimization trick. It omits the y portion of the coordinate because you can solve for it given x. Because its a curve, sometimes you need to send +1 or -1 to specify the quadrant the y coordinate lies in. But again, its just an optimization and only matters for interop'ing. After you read the point into a library, both x and y are available.


You might wonder why I need to convert the public key into the other...

Nope :)
But one thing you might want to be aware of is OpenSSL's ""named curve"" flag. If you want to load an EC key into an OpenSSL based server, you will want to ensure the private key and resulting certificate have the OPENSSL_EC_NAMED_CURVE flag. Otherwise, you'll get bizarre errors like ""no shared ciphers"" when trying to connect to the server. See ECDH and Named Curves on the OpenSSL wiki for details.
","489","<javascript><ruby><openssl><elliptic-curve><diffie-hellman>","2","0","3","2015-01-04 04:48:09","22436799","0","","3073313","","2014-03-14 16:41:18","2014-03-14 16:31:17",""
"22410765","How to Format OpenSSL Keys to Match Online Sample (JSBN-ECC)","I want to be able to format the public key of Elliptic Curve Diffie-Hellman in OpenSSL - Ruby into something like this online example (link), as I have been using that JS library.
My code below generates an OpenSSL::PKey::EC public and private keys
#Ruby
ec = OpenSSL::PKey::EC.new('secp128r1')
ec.generate_key

ec.private_key
#--> 205607153615223513963863936713567041725

ec.public_key.to_bn
#--> 499599043529551953518354858381998373780459818901085313561109939106744612770290

Try copying the private key above 205607153615223513963863936713567041725 and pasting it on the online (link) as Alices' Private value. But click the secp1284r1 button first to have same curve parameters, and then click Compute Public button.
That will generate a public key from the inputted private key. However, the Ruby OpenSSL documentation isn't really helpful, and I am stuck on figuring out how to convert the generated public key above:
499599043529551953518354858381998373780459818901085313561109939106744612770290

Into something like this (as seen from the online site):
x: 107060165679262225845922473865530329196
y: 109296969851421346147544217212275741170

I've assumed that by properly converting one, it can somehow become equal to the other since they have same curve parameters. Or am I wrong? (And also because the default format of point_conversion_form is :uncompressed, as I just have tested) Please help.
P.S. You might wonder why I need to convert the public key into the other. No, I don't really have to. I just want to learn how to convert it as I'll be using that method to convert something similar. And this is the simplified question for your testing-convenience.
","Finally! I somehow managed to convert it properly but it's somehow weird.
#From above code
c.public_key.to_bn
#--> 499599043529551953518354858381998373780459818901085313561109939106744612770290

#irb:
require 'openssl'

key_int = '499599043529551953518354858381998373780459818901085313561109939106744612770290'
key_bn = OpenSSL::BN.new(key_int, 10) #Convert to OpenSSL::BN (Big Number, with 10=Decimal as base)
key_hex = key_bn.to_s(16) #Convert to Hex String (16=Hexadecimal)
#--> ""04508B09B35FA8C21820BE19C16B38486C5239D4A932D081DD56B90F91120551F2""

#I don't really know why, but removing '04' above will finally convert it properly
key_hex = key_hex[2..-1] #Remove first 2 chars: '04'
#--> ""508B09B35FA8C21820BE19C16B38486C5239D4A932D081DD56B90F91120551F2""

#Split key_hex into halves
key_hexarr = key_hex.chars.each_slice( (key_hex.length/2.0).round ).map(&:join)
#--> [""508B09B35FA8C21820BE19C16B38486C"", ""5239D4A932D081DD56B90F91120551F2""]

#Convert first value into BN (input: 16=hexadecimal), then convert to string(output: 10=decimal)
key_x_int = OpenSSL::BN.new(key_hexarr[0], 16).to_s(10)
#--> ""107060165679262225845922473865530329196""

#Convert second value into BN (input: 16=hexadecimal), then convert to string(output: 10=decimal)
key_y_int = OpenSSL::BN.new(key_hexarr[1], 16).to_s(10)
#--> ""109296969851421346147544217212275741170""

Finally, key_x_int and key_y_int now matches the result from the online link
","489","<javascript><ruby><openssl><elliptic-curve><diffie-hellman>","2","0","3","2015-01-04 04:48:09","22436799","0","","3073313","","2014-03-14 16:41:18","2014-03-14 16:31:17",""
"22410765","How to Format OpenSSL Keys to Match Online Sample (JSBN-ECC)","I want to be able to format the public key of Elliptic Curve Diffie-Hellman in OpenSSL - Ruby into something like this online example (link), as I have been using that JS library.
My code below generates an OpenSSL::PKey::EC public and private keys
#Ruby
ec = OpenSSL::PKey::EC.new('secp128r1')
ec.generate_key

ec.private_key
#--> 205607153615223513963863936713567041725

ec.public_key.to_bn
#--> 499599043529551953518354858381998373780459818901085313561109939106744612770290

Try copying the private key above 205607153615223513963863936713567041725 and pasting it on the online (link) as Alices' Private value. But click the secp1284r1 button first to have same curve parameters, and then click Compute Public button.
That will generate a public key from the inputted private key. However, the Ruby OpenSSL documentation isn't really helpful, and I am stuck on figuring out how to convert the generated public key above:
499599043529551953518354858381998373780459818901085313561109939106744612770290

Into something like this (as seen from the online site):
x: 107060165679262225845922473865530329196
y: 109296969851421346147544217212275741170

I've assumed that by properly converting one, it can somehow become equal to the other since they have same curve parameters. Or am I wrong? (And also because the default format of point_conversion_form is :uncompressed, as I just have tested) Please help.
P.S. You might wonder why I need to convert the public key into the other. No, I don't really have to. I just want to learn how to convert it as I'll be using that method to convert something similar. And this is the simplified question for your testing-convenience.
","Jay-Ar, 
You shouldn't find your solution weird as I think the call to ec.public_key.to_bn might be adhering to rfc5480 section 2.2 re: Subject Public Keys which states:

2.2.  Subject Public Key

The first octet of the OCTET STRING indicates whether the key is
      compressed or uncompressed.  The uncompressed form is indicated
      by 0x04 and the compressed form is indicated by either 0x02 or
      0x03 (see 2.3.3 in [SEC1]).  The public key MUST be rejected if
      any other value is included in the first octet.


Assuming this is the case and since you stated the format is :uncompressed, your own answer makes total sense to me.  Thanks for posting it! :) 
","489","<javascript><ruby><openssl><elliptic-curve><diffie-hellman>","2","2","3","2015-01-04 04:48:09","22436799","0","","3073313","","2014-03-14 16:41:18","2014-03-14 16:31:17",""
"55247051","Python: ValueError: invalid literal for int() with base 10:'\x00","I am making a client-server program implementing the Diffie-Hellman algorithm
Client:
from __future__ import print_function
import math
import socket

host = ""localhost""
port = 1200
s = socket.socket(socket.AF_INET,   socket.SOCK_STREAM)
s.connect((host, port))

print(""Connected with Server"")

sharedPrime = 23    # p
sharedBase = 5      # g

aliceSecret = 6     # a

s.send(bytes(aliceSecret))
bobSecret=s.recv(1024)

# Alice Sends Bob A = g^a mod p
A = (sharedBase**aliceSecret) % sharedPrime

s.send(bytes(A))
B=s.recv(1024)

B=B.decode()
# Alice Computes Shared Secret: s = B^a mod p
aliceSharedSecret = (int(B)** aliceSecret) % sharedPrime
print( ""Alice Shared Secret: "", aliceSharedSecret )

The server code is basically the same, except it handles ""Bob's"" side of the algorithm. My problem starts at this line:
aliceSharedSecret = (int(B)** aliceSecret) % sharedPrime

Which gives me this error:
invalid literal for int() with base 10: '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

I've gone back to see what ""B"" actually is and it's just blank. What am I doing wrong?
","Look at this line:
s.send(bytes(aliceSecret))

You convert int value to bytes here. This produces result like b'\x00\x00\x00\x00\x00\x00' that later cannot be directly casted to int even after decoding because it's not number in decimal form. There are 2 possible solutions:
1) Properly decode value, this line will interpret bytes object as int splitted into bytes:
B = int.from_bytes(B, byteorder='big', signed=False)  # instead of B = B.decode()

2) Convert your original int value to str before converting to bytes so back convertation will work
","488","<python-3.x><client-server><diffie-hellman>","0","0","1","2019-03-19 18:16:27","","1","","","","","2019-03-19 17:43:47",""
"43236522","Convert P-256 DH java string to java PublicKey","I'm trying to send web push notifications to my browser and am able to subscribe successfully. I get a subscription object with ""an elliptic curve Diffie–Hellman public key on P-256 curve"".
I want to convert this string to a public key in Java but keep getting a invalid key format exception.
Here's the code that I'm trying:
  String publicK = ""BBoN_OkTfE_0uObues82qHr96z8x3nepYoUwCBoftFDS_Vgx2MUHN1vAFxc1eDiyDrvmZ2bQ4sJq3F8Qz71RWI0="";
  byte[] publicBytes = publicK.getBytes();
  X509EncodedKeySpec keySpec = new X509EncodedKeySpec(publicBytes);
  KeyFactory keyFactory = KeyFactory.getInstance(""DiffieHellman"");
  PublicKey pubKey = keyFactory.generatePublic(keySpec);

Could someone help me with this please? Encryption noob here :/
","For my code, I used java 1.7 and BouncyCastle library. If you use maven, just add to your pom.xml:
<dependency>
    <groupId>org.bouncycastle</groupId>
    <artifactId>bcprov-jdk16</artifactId>
    <version>1.46</version>
</dependency>

Or download the jars in BouncyCastle site. This is a cryptography API for java, with lots of useful stuff (including classes to handle elliptic curves keys).
The code for reading the public key and converting to an object is:
import java.security.KeyFactory;
import java.security.Security;
import java.security.interfaces.ECPublicKey;
import java.security.spec.ECPoint;
import java.security.spec.ECPublicKeySpec;

import org.bouncycastle.jce.ECNamedCurveTable;
import org.bouncycastle.jce.ECPointUtil;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.jce.spec.ECNamedCurveParameterSpec;
import org.bouncycastle.jce.spec.ECNamedCurveSpec;
import org.bouncycastle.util.encoders.Base64;


// you need to add the BouncyCastle provider to use its functionalities
Security.addProvider(new BouncyCastleProvider());

String publicK = ""BBoN_OkTfE_0uObues82qHr96z8x3nepYoUwCBoftFDS_Vgx2MUHN1vAFxc1eDiyDrvmZ2bQ4sJq3F8Qz71RWI0="";
// publicK is encoded in base64, so you need to decode it first
byte[] publicBytes = Base64.decode(publicK.getBytes());

// spec for P-256 curve
ECNamedCurveParameterSpec spec = ECNamedCurveTable.getParameterSpec(""prime256v1"");
// create a KeyFactory with ECDSA (Elliptic Curve Diffie-Hellman) algorithm and use BouncyCastle as the provider
KeyFactory kf = KeyFactory.getInstance(""ECDSA"", BouncyCastleProvider.PROVIDER_NAME);

// code below just creates the public key from the bytes contained in publicK
// using the curve parameters (spec variable)
ECNamedCurveSpec params = new ECNamedCurveSpec(""prime256v1"", spec.getCurve(), spec.getG(), spec.getN());
ECPoint point = ECPointUtil.decodePoint(params.getCurve(), publicBytes);
ECPublicKeySpec pubKeySpec = new ECPublicKeySpec(point, params);
ECPublicKey pk = (ECPublicKey) kf.generatePublic(pubKeySpec);

System.out.println(pk.toString());

Output:
EC Public Key
            X: 1a0d00e9137c4034b8e6ee7acf36a87afdeb3f31de77a9628530081a1fb450d2
            Y: 15831d8c507375bc01717357838b20ebbe66766d0e2c26adc5f10cfbd51588d


Notes:

I'm not aware of all the math behind elliptic curve keys, just the basic idea. I know that a curve has parameters like G and n (which are obtained via getG() and getN() methods) and that there are some ""standard pre-defined"" curves (like P-256) that you can get using ECNamedCurveTable.getParameterSpec().
You can take a look at all the math details if you want. There is also a list of different standard curves and which ones are considered secure.
ECPublicKey extends PublicKey, so you can use it just like a PublicKey

","486","<java><diffie-hellman>","2","1","1","2017-04-05 19:15:34","43237307","0","","","","","2017-04-05 16:15:37",""
"47221029","weird result using EC_POINT_mul from OpenSSL","I am trying to implement a Private Set Intersection (PSI) protocol that is based on the Diffie Hellman protocol.
The PSI protocol is the one mentioned in Section 2.2 of [Kiss et al. 2017],,
there is already a Java implementation here:
https://github.com/encryptogroup/MobilePSI/blob/master/PSIServer/src/PSIDH.java
I want to implement it in C++, so I thought of using OpenSSL
What I am trying to do
Here is roughly how it works:
let G be a generator for diffie hellman;
alice has a DH secret a and an element x,
bob has a DH secret b and an element y;
h is some function that takes any (bitstring) element and map it to an DH scalar.

alice sends G*a*h(x) (call it alice's side)
bob replies with (G*a*h(x))*b (call it final alice's side)
bob sends G*b*h(y) (call it bob's side)
alice computes (G*b*h(y))*a

Alice then compares both final values to learn whether x == y or not.
The code
(minimal working example)
Using the fact that G*a is what is ""Alice's public key"" regarding Diffie-Hellman.
#include <stdlib.h>
#include <stdio.h>
#include <string>
#include <iostream>

#include <openssl/obj_mac.h>
#include <openssl/ec.h>

// list of possible curve names here:
// https://git.openssl.org/gitweb/?p=openssl.git;a=blob;f=crypto/objects/obj_mac.h;h=b5ea7cdab4f84b90280f0a3aae1478a8d715c7a7;hb=46ebd9e3bb623d3c15ef2203038956f3f7213620#l385
// also here:
// https://github.com/openssl/openssl/blob/67e247fad12308e34817e60c9242113c285fb00c/include/openssl/obj_mac.h#L261
#define CURVE_NAME NID_X9_62_prime256v1

class PSIEntity {
  public:
    BN_CTX* bn_ctx;
    const EC_GROUP* ec_group;
    EC_KEY* key;

    PSIEntity(BN_CTX* c, const EC_GROUP* g){
      bn_ctx = c;

      ec_group = g;
      key = EC_KEY_new();
      EC_KEY_set_group(key, ec_group);
      EC_KEY_generate_key(key);
    }

    EC_POINT* encode_and_mask(const unsigned char* x_data){
      BIGNUM* x = BN_bin2bn(x_data, 28, NULL);

      const EC_POINT* pubkey = EC_KEY_get0_public_key(key);
      EC_POINT* result = EC_POINT_dup(pubkey, ec_group);

      EC_POINT_mul(ec_group, result, x, NULL, NULL, bn_ctx);

      return result;
    }

    EC_POINT* mask(EC_POINT* p){
      EC_POINT* result = EC_POINT_dup(p, ec_group);
      const BIGNUM *priv_key = EC_KEY_get0_private_key(key);
      EC_POINT_mul(ec_group, result, priv_key, NULL, NULL, bn_ctx);

      return result;
    }
};



int main(){
  EC_GROUP *ec_group = EC_GROUP_new_by_curve_name(CURVE_NAME);
  BN_CTX *bn_ctx = BN_CTX_new();

  PSIEntity alice(bn_ctx, ec_group);
  PSIEntity bob(bn_ctx, ec_group);

  // taken from ""a_bin"" in
  // https://wiki.openssl.org/index.php/Elliptic_Curve_Cryptography#Defining_Curves
  unsigned char x_data[28] =
          {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
           0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0xFF,0xFF,
           0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE};

  EC_POINT* alice_side = alice.encode_and_mask(x_data);
  EC_POINT* alice_side_final = bob.mask(alice_side);

  EC_POINT* bob_side = bob.encode_and_mask(x_data);
  EC_POINT* bob_side_final = alice.mask(bob_side);

  int final_points_are_different = EC_POINT_cmp(ec_group,
                                                alice_side_final, bob_side_final,
                                                bn_ctx);
  if(final_points_are_different==-1){
    std::cout << ""comparison of final points failed"" << std::endl;
  }else if(final_points_are_different==1){
    std::cout << ""final points are different"" << std::endl;
  }else if(final_points_are_different==0){
    std::cout << ""final points are equal"" << std::endl;
  }

  int temp_points_are_different = EC_POINT_cmp(ec_group,
                                                alice_side, bob_side,
                                                bn_ctx);
  if(temp_points_are_different==-1){
    std::cout << ""comparison of temp points failed"" << std::endl;
  }else if(temp_points_are_different==1){
    std::cout << ""temp points are different"" << std::endl;
  }else if(temp_points_are_different==0){
    std::cout << ""temp points are equal"" << std::endl;
  }
  return 0;
}

Code Result and Problem
The result is:
final points are different
temp points are equal

I would expect the opposite:
final points should be equal because it's the same x on both sides
As to ""temp points are equal"", this is very disturbing:
it means that we have G*a*x == G*b*x ?
If you compare G*a with G*b (the public keys) the answer is that they are different, so what seems to happen is that multiplication by x with EC_POINT_mul just ""messes things up"".
Any idea what is happening ?
","The following code should do the job. The problem is passing wrong parameters to EC_POINT_mul(). See here for documentation of EC_POINT_mul().
EC_POINT* encode_and_mask(const unsigned char* x_data){
    ...
    EC_POINT_mul(ec_group, result, NULL, result, x, bn_ctx);

    return result;
}

EC_POINT* mask(EC_POINT* p){
    ...
    EC_POINT_mul(ec_group, result, NULL, result, priv_key, bn_ctx);

    return result;
}

","485","<c++><openssl><diffie-hellman>","0","1","1","2018-09-20 09:07:03","","0","","","","","2017-11-10 10:48:17",""
"51344351","Node.js crypto.publicEncrypt: 'Error: error:0906D06C:PEM routines:PEM_read_bio:no start line'","I'm trying to use the public key encryption in crypto.js, I want to encrypt some message using publicEncrypt, and decrypt it with privateDecrypt.
const crypto=require('crypto');
let alice=crypto.getDiffieHellman('modp14');
alice.generateKeys();
let enc=crypto.publicEncrypt(alice.getPublicKey(),Buffer.from('hello'));

However, the crypto.publicEncrypt line is causing the following error:
""Error: error:0906D06C:PEM routines:PEM_read_bio:no start line""
","The public key value returned by crypto.DiffieHellman.getPublicKey() is just the raw DH number, optionally encoded in base64 or hex. It is not in (any) PEM format or even ASN.1/DER format (which could easily be turned into PEM). Similarly crypto.ECDH.getPublicKey() is only the point (in conventional X9.62 format), not any PEM or DER format.
Moreover, DH and ECDH are not encryption algorithms, they are key-agreement (or secret-agreement) algorithms, and that operation is performed by DiffieHellman.computeSecret() or ECDH.computeSecret() respectively. Although not clearly documented, publicEncrypt actually calls OpenSSL's EVP_PKEY_encrypt{_init,} which doesn't support DH or ECDH, only RSA (with several choices of padding) and possibly GOST-wrap (I can't easily verify that and it may well be version dependent because upstream OpenSSL as of 1.1.0 a few years ago dropped the GOST algorithms).
In short, you can't do that.
","481","<node.js><encryption><public-key-encryption><diffie-hellman>","0","1","1","2018-07-15 10:57:45","51347719","0","","10044403","","2018-07-15 00:21:04","2018-07-15 00:16:00",""
"46379624","C++ GMP random number generation for Diffie-Hellman Key Exchange","I need to calculate a private key (privateKey) for Diffie-Hellman key exchange. I have given a big prime prime and now I just need to choose a number that is less than p. This is my code:
        mpz_class privateKey;
        unsigned long seed;
        mpz_init(privateKey.get_mpz_t());

        gmp_randstate_t rstate;
        gmp_randinit_mt(rstate);
        gmp_randseed_ui(rstate, seed);

        mpz_urandomm(privateKey.get_mpz_t(), rstate, prime.get_mpz_t());

I don't really understand why I'm always getting the same ""random"" number. 
","You never initialize the seed variable, so your program is obviously wrong and your compiler should have warned you about this. If it didn't, look up how to configure your compiler correctly (e.g. for GCC make sure you pass at least -O -Wall).
You'll always get the same random number if you initialize the RNG with the same seed. That's probably what's happening in your program: seed is not initialized, so its value is whatever was on the stack at this address previously, and that turns out to be always the same if you're calling this function in the same way.
Since this is a cryptographic application, you need to seed the random number generator with a high-entropy source. Ask your operating system for it (there's no way to generate entropy inside a program): read from /dev/urandom on Linux, call CryptGenRandom on Windows.
Also, since this is a cryptographic application, don't call gmp_randinit_mt. This creates a Mersenne twister, which is fast and good enough for a physics simulation, but not suitable for cryptography because its state can be reconstructed from its outputs. I'm not familiar with GMP, but looking at the documentation, I see that it offers several algorithms for random number generation but none are suitable for security applications. You can use the OS source like /dev/urandom or CryptGenRandom directly as a source of random bits, but then you'd need to use that to implement the gmp_randstate_t interface in order to hook it up with mpz_urandomm. I don't know how difficult that is.
If this is a school exercise, do whatever your teacher tells you. If this is for an actual application, use an existing cryptography library such as libtom, which comes with all you need to generate cryptographic-quality random numbers and to perform the Diffie-Hellman computations, is very easy to integrate into a project, and has a license that allows it to be integrated into any project.
","463","<c++><gmp><diffie-hellman>","2","2","1","2017-09-23 12:51:52","46379781","0","","","","","2017-09-23 12:34:08",""
"48118420","Server Side SSL using Diffie-Hellman in Python","I'm trying to set up a socket using Diffie-Hellman SSL, but can't seem find any documentation on how to do this. I notice that SSLContext in Python 3.3+ supports load_dh_params and set_ecdh_curve which suggests that using DH is possible.
I'm fairly new to using SSL so perhaps missing something obvious, but here's the code I'm using:
sock = socket.socket()
sock.bind((HOST, PORT))
sock.listen()
context = ssl.SSLContext(protocol=ssl.PROTOCOL_TLS)
context.set_ecdh_curve('prime256v1')
ssock, address = self._server.accept()
ssock= context.wrap_socket(ssock, server_side=True)

When using this code, I get the error:
ssl.SSLError: [SSL: NO_SHARED_CIPHER] no shared cipher
I've tried setting the ciphers like the following:
context.set_ciphers('ECDHE-RSA-AES256-GCM-SHA384')

but all the ciphers I've tried still throw up the same exception.
If anyone could point out where I'm going wrong or provide a working example of using DH SSL, it'd be much appreciated!
","A TLS cipher defines the key exchange, the authentication method, the symmetric encryption algorithm and the HMAC. The authentication method in the cipher you explicitly try to use is RSA, i.e. using a certificate with an RSA public key. If you instead use the default cipher set the authentication methods are either RSA or ECDSA. 
Both of these authentication methods need an appropriate certificate on the server side, i.e. with RSA or ECC public key. Since you have not configured any certificates these ciphers can not be used. This means in essence that from the ciphers the client has offered (which commonly also require certificate based authentication) none can be used for the connection, ergo NO_SHARED_CIPHER.
What you need to do: 

The recommended way is to setup a certificate on the server which is trusted by the client. See SSLContext.load_cert_chain.
Or you could use ciphers which don't require authentication, for example ADH-AES256-GCM-SHA384. Note that you would need to explicitly configure the cipher in the client too since by default TLS stacks don't use ciphers without authentication for security reasons since man in the middle attacks will not be detected this way.

","455","<python><ssl><python-3.6><diffie-hellman>","0","0","1","2018-01-05 18:13:18","48119028","0","","","","","2018-01-05 17:25:07",""
"22483036","Why is the ECC-DH Symmetric Key Of This Site Different From OpenSSL","I am using (this site's) Javascript library and OpenSSL Ruby to compute the symmetric key of Elliptic Curve Diffie Hellman. 
However, from my results, OpenSSL Ruby only generated one key unlike that on the site which has X and Y symmetric keys. I am baffled as my OpenSSL symmetric key doesn't match either one of those x and y on the site.
The symmetric(shared secret) keys I got using secp224r1 curve:
Ruby OpenSSL
   13506351678569412185536677668115375188438201041599149052762191980775

Using Site's JS Library
x: 26210366144026557327555572210249241206666031403062020900473236895358
y: 19676808255388748321882118528911150828003358302170965920476006073155

My questions are:
1) Why does OpenSSL Ruby yields only one key while that size yields two keys: x and y (as I've assumed x and y won't be concatenated with each other since the bitsize will be too long when compared to the Ruby symmetric key)
2) Is there a way to convert the two symmetric keys (OpenSSL and JSBN-EC library above) from one another? All my attempts to convert failed.
I've been struggling for a week now implementing Ruby OpenSSL with that JSBN-EC library. I've also tried (SJCL library) but similar results (symmetric keys don't match). Please help.
","I've managed to work it out now with working symmetric keys on client (JSBN-EC) and on server OpenSSL Ruby
I found out that my problem actually lies in the code itself. After fixing it, I've ended up with a symmetric key on OpenSSL Ruby as follows:
#Ruby: OpenSSL
...
...
symm_key = ec.dh_compute_key(point)
symm_key.unpack('B*').first.to_i(2) #Converts to binary, then to integer
#--> 6922380353406615622038660570577625762884344085425862813095878420328

While on the client side using JSBN-EC
#Javascript: JSBN-EC
...
...
var curve = get_curve();
var P = new ECPointFp(curve,
curve.fromBigInteger(server_pub_key_x),
curve.fromBigInteger(server_pub_key_y));
var a = client_priv_key;
var S = P.multiply(a);

console.log('SYMM_KEY X: '+S.getX().toBigInteger().toString());
//--> 6922380353406615622038660570577625762884344085425862813095878420328
console.log('SYMM_KEY Y: '+S.getY().toBigInteger().toString());
//--> 14426877769799867628378883482085635535383864283889042780773103726343

Therefore from the looks of it, the symmetric key that matches the Ruby OpenSSL value is the  X value of the JSBN-EC symmetric key
6922380353406615622038660570577625762884344085425862813095878420328
==
6922380353406615622038660570577625762884344085425862813095878420328

I don't know what the Y value is now for. Looks like I won't need it. Cheers! :)
","451","<javascript><ruby><openssl><elliptic-curve><diffie-hellman>","1","1","1","2014-03-19 15:31:21","22510720","0","2","3073313","","2014-03-18 15:03:57","2014-03-18 14:56:24",""
"39671926","openssl_dh_compute_key returns false","I'm trying to compute the shared secret for ECDH (elliptic-curve Diffie Hellman) using PHP.
Assume I have someone's public key:
$clientPublickey=""BOLcHOg4ajSHR6BjbSBeX_6aXjMu1V5RrUYXqyV_FqtQSd8RzdU1gkMv1DlRPDIUtFK6Nd16Jql0eSzyZh4V2uc"";

I generate my keys using openssl:
exec('openssl ecparam -genkey -name prime256v1 -noout -out example-ecc.pem');
$private = openssl_pkey_get_private(""file://example-ecc.pem"");

Then I call:
$sharedSecret=openssl_dh_compute_key(base64_decode($clientPublickey), $private);

... and I get false.
Calling openssl_error_string() returns nothing, no error.
I've var_dumped openssl_pkey_get_details($private) and verified it was created properly.
Any advice anyone? There doesn't seem to be much info on this function.
http://php.net/manual/en/function.openssl-dh-compute-key.php
","https://www.openssl.org/docs/manmaster/crypto/DH_compute_key.html describes that function as being for (non-EC) Diffie Hellman.  You would need ECDH_compute_key (which I don't know if PHP exposes).
Though https://wiki.openssl.org/index.php/Elliptic_Curve_Diffie_Hellman recommends using the EVP_PKEY wrappers instead of the low level routines. But, again, I can't say what support PHP has.
","447","<php><diffie-hellman><php-openssl>","0","1","2","2019-06-29 15:45:29","","1","","608639","","2016-09-24 03:56:11","2016-09-24 02:31:58",""
"39671926","openssl_dh_compute_key returns false","I'm trying to compute the shared secret for ECDH (elliptic-curve Diffie Hellman) using PHP.
Assume I have someone's public key:
$clientPublickey=""BOLcHOg4ajSHR6BjbSBeX_6aXjMu1V5RrUYXqyV_FqtQSd8RzdU1gkMv1DlRPDIUtFK6Nd16Jql0eSzyZh4V2uc"";

I generate my keys using openssl:
exec('openssl ecparam -genkey -name prime256v1 -noout -out example-ecc.pem');
$private = openssl_pkey_get_private(""file://example-ecc.pem"");

Then I call:
$sharedSecret=openssl_dh_compute_key(base64_decode($clientPublickey), $private);

... and I get false.
Calling openssl_error_string() returns nothing, no error.
I've var_dumped openssl_pkey_get_details($private) and verified it was created properly.
Any advice anyone? There doesn't seem to be much info on this function.
http://php.net/manual/en/function.openssl-dh-compute-key.php
","Quite an old post, but still..
I think your public key is not formatted in Base64, but in URL-safe-Base64.
See: https://en.wikipedia.org/wiki/Base64#URL_applications
Furthermore, you can create the keys also from PHP now. Using openssl_pkey_new().
See: https://www.php.net/manual/en/function.openssl-pkey-new.php
","447","<php><diffie-hellman><php-openssl>","0","0","2","2019-06-29 15:45:29","","1","","608639","","2016-09-24 03:56:11","2016-09-24 02:31:58",""
"7364804","Securing an android application","I have 'secured' the communication between my android application and a tls server providing a financial transaction service, currently in development.
The security credentials are stored in a BKS keystore included in the Android apk.  The password to the keystore is visible in plain text in the application source:

keyStore.load(is, ""passwd"".toCharArray());

I am concerned that if someone was to reverse engineer the app, they would be able to impersonate another user and compromise the security of the service.
I was wondering whether there is a fault in my implementation, if anyone else has this concern, and what the best method of securing against this possibility is.
","currently programming for a Processing company-
their are a set of rules and regulations for a transaction application -OR- a POS APP(Point Of Sale application)
the rules are listed online as PCI validation, a certain amount of security has to be issued or it will be a law suit from Visa,inc or Many other Company's.
about your Question, it doesn't follow PCI compliance as that is a security issue.
please read the PCI compliance so that their is a complete understanding of Security, its not good to compromise Cardholder Data.
:)
","439","<android><ssl><diffie-hellman>","3","0","4","2011-11-23 16:25:05","8245623","0","1","736033","","2011-11-23 16:25:05","2011-09-09 16:37:06",""
"7364804","Securing an android application","I have 'secured' the communication between my android application and a tls server providing a financial transaction service, currently in development.
The security credentials are stored in a BKS keystore included in the Android apk.  The password to the keystore is visible in plain text in the application source:

keyStore.load(is, ""passwd"".toCharArray());

I am concerned that if someone was to reverse engineer the app, they would be able to impersonate another user and compromise the security of the service.
I was wondering whether there is a fault in my implementation, if anyone else has this concern, and what the best method of securing against this possibility is.
","Whenever you store security data on the client it can be compromised by reverse engineering. You may try to obscure it in the code but determined hacker will figure it anyway. So the only way to make it more secure is not to have the password openly in the code. May be you can just ask user for some pin code at the start of the application and use it to decrypt the password?
","439","<android><ssl><diffie-hellman>","3","2","4","2011-11-23 16:25:05","8245623","0","1","736033","","2011-11-23 16:25:05","2011-09-09 16:37:06",""
"7364804","Securing an android application","I have 'secured' the communication between my android application and a tls server providing a financial transaction service, currently in development.
The security credentials are stored in a BKS keystore included in the Android apk.  The password to the keystore is visible in plain text in the application source:

keyStore.load(is, ""passwd"".toCharArray());

I am concerned that if someone was to reverse engineer the app, they would be able to impersonate another user and compromise the security of the service.
I was wondering whether there is a fault in my implementation, if anyone else has this concern, and what the best method of securing against this possibility is.
","Are credentials stored in your app unique per user, i.e. every user gets it own apk with unique credentials? If you only have one apk with same credentials then this is as good as no security. Even worse, it gives false feeling of security.
You (your employer) should really hire a security expert to design your system from security point of view.
Here's what I'd do:

App comes without security credentials. 
Every user is generated security credentials on server.
Every user gets secret activation code which is generated in secure environment and delivered via alternative channel. Preferably via snail mail. Activation codes are time-limited and can be used only one time.
On first use user types into app the activation code which enables a one-time download of credentials over a secure (https) channel.
User provides password to encrypt the credentials while stored on device.
Every time the app is used user must provide this paswword. If app is not used for some time the app must timeout the session and ask for password again when user wants access.

But don't take my word for granted. You still need a security expert if there are financial transactions involved.
","439","<android><ssl><diffie-hellman>","3","2","4","2011-11-23 16:25:05","8245623","0","1","736033","","2011-11-23 16:25:05","2011-09-09 16:37:06",""
"7364804","Securing an android application","I have 'secured' the communication between my android application and a tls server providing a financial transaction service, currently in development.
The security credentials are stored in a BKS keystore included in the Android apk.  The password to the keystore is visible in plain text in the application source:

keyStore.load(is, ""passwd"".toCharArray());

I am concerned that if someone was to reverse engineer the app, they would be able to impersonate another user and compromise the security of the service.
I was wondering whether there is a fault in my implementation, if anyone else has this concern, and what the best method of securing against this possibility is.
","I believe that Diffie-Hellman Key Exchange is what I was looking for.  I'd rather not have to re-implement my own version of DH using a complicated process which involves the user.
","439","<android><ssl><diffie-hellman>","3","1","4","2011-11-23 16:25:05","8245623","0","1","736033","","2011-11-23 16:25:05","2011-09-09 16:37:06",""
"35357457","How can I fetch an SSL page using Diffie-Hellman with a 480-bit key length?","I'm trying to fetch page that is using DH with a 480-bit key length but I cannot do so using the Apache HTTP Client. I can successfully fetch the page if I use Async HTTP Client with the JDK Provider. 
I know that the JDK has limitations around the max size but this issue seems to be the other way around. The key size is too small and not a multiple of 64. 
I've written a SSCCE to illustrate this behaviour and after two days of hunting, I'm at my wit's end.
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;

import javax.net.ssl.SSLContext;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.config.Registry;
import org.apache.http.config.RegistryBuilder;
import org.apache.http.conn.HttpClientConnectionManager;
import org.apache.http.conn.socket.ConnectionSocketFactory;
import org.apache.http.conn.socket.PlainConnectionSocketFactory;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.impl.conn.BasicHttpClientConnectionManager;
import org.apache.http.util.EntityUtils;
import org.junit.Assert;
import org.junit.Test;

import com.ning.http.client.AsyncHttpClient;
import com.ning.http.client.AsyncHttpClientConfig;
import com.ning.http.client.providers.jdk.JDKAsyncHttpProvider;

public class DH480Test extends Assert {

    private final String URL = ""https://dh480.badssl.com/"";

    @Test
    public void testNingHTTPClientWithJDKProvider() {
        AsyncHttpClientConfig config = new AsyncHttpClientConfig.Builder().build();
        AsyncHttpClient client = new AsyncHttpClient(new JDKAsyncHttpProvider(config), config);

        try {
            client.prepareGet(URL).execute().get();
        } catch (Exception e) {
            e.printStackTrace();
            fail();
        }
    }

    @Test
    public void testApacheHTTClient() throws NoSuchAlgorithmException, KeyManagementException {
        SSLContext sslContext = SSLContext.getInstance(""SSL"");
        sslContext.init(null, null, null);

        Registry<ConnectionSocketFactory> registry = RegistryBuilder.<ConnectionSocketFactory>create()
                .register(""https"", new SSLConnectionSocketFactory(sslContext))
                .register(""http"", new PlainConnectionSocketFactory())
                .build();
        HttpClientConnectionManager ccm = new BasicHttpClientConnectionManager(registry);
        HttpClientBuilder builder = HttpClientBuilder.create();
        builder.setConnectionManager(ccm);

        HttpClient client = builder.build();

        try {
            HttpGet get = new HttpGet(URL);
            HttpResponse r = client.execute(get);
            EntityUtils.consume(r.getEntity());
        } catch (Exception e) {
            e.printStackTrace();
            fail();
        }
    }
}

Here's the stack trace of the the failing test.
javax.net.ssl.SSLException: java.lang.RuntimeException: Could not generate DH keypair
    at sun.security.ssl.Alerts.getSSLException(Alerts.java:208)
    at sun.security.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1949)
    at sun.security.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1906)
    at sun.security.ssl.SSLSocketImpl.handleException(SSLSocketImpl.java:1889)
    at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1410)
    at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1387)
    at org.apache.http.conn.ssl.SSLConnectionSocketFactory.createLayeredSocket(SSLConnectionSocketFactory.java:290)
    at org.apache.http.conn.ssl.SSLConnectionSocketFactory.connectSocket(SSLConnectionSocketFactory.java:259)
    at org.apache.http.impl.conn.HttpClientConnectionOperator.connect(HttpClientConnectionOperator.java:125)
    at org.apache.http.impl.conn.BasicHttpClientConnectionManager.connect(BasicHttpClientConnectionManager.java:318)
    at org.apache.http.impl.execchain.MainClientExec.establishRoute(MainClientExec.java:363)
    at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:219)
    at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:195)
    at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:86)
    at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:108)
    at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
    at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
    at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:106)
    at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:57)
    at DH480Test.testApacheHTTClient(DH480Test.java:59)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:497)
    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
    at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
    at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
    at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)
    at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:234)
    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:74)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:497)
    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)
Caused by: java.lang.RuntimeException: Could not generate DH keypair
    at sun.security.ssl.DHCrypt.<init>(DHCrypt.java:142)
    at sun.security.ssl.DHCrypt.<init>(DHCrypt.java:114)
    at sun.security.ssl.ClientHandshaker.serverKeyExchange(ClientHandshaker.java:708)
    at sun.security.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:268)
    at sun.security.ssl.Handshaker.processLoop(Handshaker.java:979)
    at sun.security.ssl.Handshaker.process_record(Handshaker.java:914)
    at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:1062)
    at sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1375)
    at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1403)
    ... 41 more
Caused by: java.security.InvalidAlgorithmParameterException: Prime size must be multiple of 64, and can only range from 512 to 2048 (inclusive)
    at com.sun.crypto.provider.DHKeyPairGenerator.initialize(DHKeyPairGenerator.java:120)
    at java.security.KeyPairGenerator$Delegate.initialize(KeyPairGenerator.java:674)
    at sun.security.ssl.DHCrypt.<init>(DHCrypt.java:128)
    ... 49 more

java.lang.AssertionError
    ...


Here's another standalone test that showcases that I am able to fetch the page using the default JDK networking libs. This is the underlying networking implementation used by the async http client. Here are my JVM details
➜  ~  java -version
java version ""1.8.0_66""
Java(TM) SE Runtime Environment (build 1.8.0_66-b17)
Java HotSpot(TM) 64-Bit Server VM (build 25.66-b17, mixed mode)

@Test
public void testHTTPURLConnection() throws IOException {
    try {
        java.net.URL url = new URL(URL);
        HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
        connection.setHostnameVerifier((s, sslSession) -> true);
        connection.setRequestMethod(""GET"");
        connection.setReadTimeout(15 * 1000);
        connection.connect();
        System.out.println(IOUtils.toString(connection.getInputStream()));
    } catch (Exception e) {
        fail();
    }
}

","I am not an expert and never worked with DH in java but after seeing your logs and little exploration of the code at DHKeyPairGenerator Grepcode it is really very clear in both the initialize function that it will always throw exception if Prime size < 512 as it is in written in code,
83         if ((keysize < 512) || (keysize > 1024) || (keysize % 64 != 0)) {
84             throw new InvalidParameterException(""Keysize must be multiple ""
85                                                 + ""of 64, and can only range ""
86                                                 + ""from 512 to 1024 ""
87                                                 + ""(inclusive)"");
88         }

and    
118    if ((pSize < 512) || (pSize > 1024) ||
119            (pSize % 64 != 0)) {
120            throw new InvalidAlgorithmParameterException
121                (""Prime size must be multiple of 64, and can only range ""
122                 + ""from 512 to 1024 (inclusive)"");
123        }

So it's for sure that you can not use these standard libraries for 480-bit key length.
It might be available in some other libraries which you need to explore, we used bouncycastle libraries to do some encryption stuff that might have those capabilities. 
I little researched and found the same DHKeyPairGenerator class in bouncycastle package with no constraints and checks on key size.
","430","<java><ssl><apache-httpclient-4.x><diffie-hellman><asynchttpclient>","1","0","2","2016-02-12 12:09:34","35358480","3","2","304151","","2016-02-12 11:05:11","2016-02-12 07:58:24",""
"35357457","How can I fetch an SSL page using Diffie-Hellman with a 480-bit key length?","I'm trying to fetch page that is using DH with a 480-bit key length but I cannot do so using the Apache HTTP Client. I can successfully fetch the page if I use Async HTTP Client with the JDK Provider. 
I know that the JDK has limitations around the max size but this issue seems to be the other way around. The key size is too small and not a multiple of 64. 
I've written a SSCCE to illustrate this behaviour and after two days of hunting, I'm at my wit's end.
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;

import javax.net.ssl.SSLContext;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.config.Registry;
import org.apache.http.config.RegistryBuilder;
import org.apache.http.conn.HttpClientConnectionManager;
import org.apache.http.conn.socket.ConnectionSocketFactory;
import org.apache.http.conn.socket.PlainConnectionSocketFactory;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.impl.conn.BasicHttpClientConnectionManager;
import org.apache.http.util.EntityUtils;
import org.junit.Assert;
import org.junit.Test;

import com.ning.http.client.AsyncHttpClient;
import com.ning.http.client.AsyncHttpClientConfig;
import com.ning.http.client.providers.jdk.JDKAsyncHttpProvider;

public class DH480Test extends Assert {

    private final String URL = ""https://dh480.badssl.com/"";

    @Test
    public void testNingHTTPClientWithJDKProvider() {
        AsyncHttpClientConfig config = new AsyncHttpClientConfig.Builder().build();
        AsyncHttpClient client = new AsyncHttpClient(new JDKAsyncHttpProvider(config), config);

        try {
            client.prepareGet(URL).execute().get();
        } catch (Exception e) {
            e.printStackTrace();
            fail();
        }
    }

    @Test
    public void testApacheHTTClient() throws NoSuchAlgorithmException, KeyManagementException {
        SSLContext sslContext = SSLContext.getInstance(""SSL"");
        sslContext.init(null, null, null);

        Registry<ConnectionSocketFactory> registry = RegistryBuilder.<ConnectionSocketFactory>create()
                .register(""https"", new SSLConnectionSocketFactory(sslContext))
                .register(""http"", new PlainConnectionSocketFactory())
                .build();
        HttpClientConnectionManager ccm = new BasicHttpClientConnectionManager(registry);
        HttpClientBuilder builder = HttpClientBuilder.create();
        builder.setConnectionManager(ccm);

        HttpClient client = builder.build();

        try {
            HttpGet get = new HttpGet(URL);
            HttpResponse r = client.execute(get);
            EntityUtils.consume(r.getEntity());
        } catch (Exception e) {
            e.printStackTrace();
            fail();
        }
    }
}

Here's the stack trace of the the failing test.
javax.net.ssl.SSLException: java.lang.RuntimeException: Could not generate DH keypair
    at sun.security.ssl.Alerts.getSSLException(Alerts.java:208)
    at sun.security.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1949)
    at sun.security.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1906)
    at sun.security.ssl.SSLSocketImpl.handleException(SSLSocketImpl.java:1889)
    at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1410)
    at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1387)
    at org.apache.http.conn.ssl.SSLConnectionSocketFactory.createLayeredSocket(SSLConnectionSocketFactory.java:290)
    at org.apache.http.conn.ssl.SSLConnectionSocketFactory.connectSocket(SSLConnectionSocketFactory.java:259)
    at org.apache.http.impl.conn.HttpClientConnectionOperator.connect(HttpClientConnectionOperator.java:125)
    at org.apache.http.impl.conn.BasicHttpClientConnectionManager.connect(BasicHttpClientConnectionManager.java:318)
    at org.apache.http.impl.execchain.MainClientExec.establishRoute(MainClientExec.java:363)
    at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:219)
    at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:195)
    at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:86)
    at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:108)
    at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
    at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
    at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:106)
    at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:57)
    at DH480Test.testApacheHTTClient(DH480Test.java:59)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:497)
    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
    at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
    at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
    at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)
    at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:234)
    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:74)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:497)
    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)
Caused by: java.lang.RuntimeException: Could not generate DH keypair
    at sun.security.ssl.DHCrypt.<init>(DHCrypt.java:142)
    at sun.security.ssl.DHCrypt.<init>(DHCrypt.java:114)
    at sun.security.ssl.ClientHandshaker.serverKeyExchange(ClientHandshaker.java:708)
    at sun.security.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:268)
    at sun.security.ssl.Handshaker.processLoop(Handshaker.java:979)
    at sun.security.ssl.Handshaker.process_record(Handshaker.java:914)
    at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:1062)
    at sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1375)
    at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1403)
    ... 41 more
Caused by: java.security.InvalidAlgorithmParameterException: Prime size must be multiple of 64, and can only range from 512 to 2048 (inclusive)
    at com.sun.crypto.provider.DHKeyPairGenerator.initialize(DHKeyPairGenerator.java:120)
    at java.security.KeyPairGenerator$Delegate.initialize(KeyPairGenerator.java:674)
    at sun.security.ssl.DHCrypt.<init>(DHCrypt.java:128)
    ... 49 more

java.lang.AssertionError
    ...


Here's another standalone test that showcases that I am able to fetch the page using the default JDK networking libs. This is the underlying networking implementation used by the async http client. Here are my JVM details
➜  ~  java -version
java version ""1.8.0_66""
Java(TM) SE Runtime Environment (build 1.8.0_66-b17)
Java HotSpot(TM) 64-Bit Server VM (build 25.66-b17, mixed mode)

@Test
public void testHTTPURLConnection() throws IOException {
    try {
        java.net.URL url = new URL(URL);
        HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
        connection.setHostnameVerifier((s, sslSession) -> true);
        connection.setRequestMethod(""GET"");
        connection.setReadTimeout(15 * 1000);
        connection.connect();
        System.out.println(IOUtils.toString(connection.getInputStream()));
    } catch (Exception e) {
        fail();
    }
}

","Disclaimer: I'm the maintainer of AsyncHttpClient (please, don't call it Ning).
Fun fact: this does work with AHC's JDK provider when running with JDK8, but not with JDK7!
Now: AHC JDK provider (which is a mere toy that is going away in AHC2, you shouldn't use it) boils down to Http(s)UrlConnection, so it's expected to get the same results.
Then, NIO based clients such as the other AHC providers, and Apache HttpComponents can't use the underlying HTTPS components that are being used by HttpsUrlConnection, because they are not public!
So they have to directly use javax.net.ssl.SSLEngine. But, this API was intended for generic TLS, not for the protocols built on top of it such as HTTPS.
For example, before JDK7, this cause a huge security issue on all Java NIO based HTTP clients, because they didn't have a way to properly perform hostname verification. Hostname verification is specific to HTTPS, so you can pass a HostnameVerifier to HttpsUrlConnection (HTTPS specific), but not to SSLEngine (generic TLS).
Now, since JDK7, we can finally configure a protocol (HTTPS or LDAP) on the SSLEngine so it takes care of the HTTPS specific behavior. But still, you have way less control than with HttpsUrlConnection.
Here, it seems that you found a JDK bug, and that HttpsUrlConnection and SSLEngine w/ HTTPS protocol enabled don't behave the same way.
For example, whatever I do (whatever cyphersuites I enable), I can't manage to get the BadSSL.com server pick TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, which is the one HttpsUrlConnection picks. It always pick TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 instead (no elliptic curve). See ServerHello when enabling TLS debug (-Djavax.net.debug=all).
","430","<java><ssl><apache-httpclient-4.x><diffie-hellman><asynchttpclient>","1","1","2","2016-02-12 12:09:34","35358480","3","2","304151","","2016-02-12 11:05:11","2016-02-12 07:58:24",""
"50518826","MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED","im trying to code a Diffie-Hellman key Exchange (client side) into a XMC4500 and I'm using ARMmbed lib.
This is the code I got (based on dh_client.c):  
int dhm (void)
{
int ret;
size_t n, buflen;

unsigned char *p, *end;
unsigned char buf[512];
unsigned char hash[32];
const char *pers = ""dh_client"";

mbedtls_entropy_context entropy;
mbedtls_ctr_drbg_context ctr_drbg;
mbedtls_rsa_context rsa;
mbedtls_dhm_context dhm;
mbedtls_aes_context aes;

mbedtls_rsa_init( &rsa, MBEDTLS_RSA_PKCS_V15, MBEDTLS_MD_SHA256 );
mbedtls_dhm_init( &dhm );
mbedtls_aes_init( &aes );
mbedtls_ctr_drbg_init( &ctr_drbg );

/*
 * 1. Setup the RNG
 */

mbedtls_entropy_init( &entropy );
ret = mbedtls_ctr_drbg_seed( &ctr_drbg,
                            mbedtls_entropy_func,
                            &entropy,
                            (const unsigned char *) pers,
                            strlen( pers ) );

mbedtls_aes_free( &aes );
mbedtls_rsa_free( &rsa );
mbedtls_dhm_free( &dhm );
mbedtls_ctr_drbg_free( &ctr_drbg );
mbedtls_entropy_free( &entropy );

return ret;}

I did not try to go further this, because it is not working and it is the very beginning of dhm algorithm. The function mbedtls_ctr_drbg_seed is returning MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED.
Also in the ctr_drbg.h I had to edit the MBEDTLS_CTR_DRBG_MAX_SEED_INPUT from 384(default) to 336, otherwise the code would crash. Everything else is default.
Someone knows why is returning this error?
Thanks in advance.
Note: Im calling this function in main. Running the code gives me no errors.
","This error is returned when your entropy function(mbedtls_entropy_func) fails. Do you have an entropy source enabled? You probably don't have any strong entropy source configured in your platform, thus causing this failure.
","430","<c><random><diffie-hellman><mbed><mbedtls>","0","0","1","2018-06-07 14:49:49","","0","","9215780","","2018-05-24 22:09:08","2018-05-24 22:04:15",""
"33507213","Diffie-Hellman Computing with VERY large numbers","I am trying to compute some values for a Diffie-Hellman key exchange. I understand the concepts, but the data that I'm working with makes me question the method.
I have been given 5 values to work with p and g:
    // p and g
    BigInteger p = new BigInteger(DH_PRIME, 16);
    BigInteger g = new BigInteger(DH_GEN, 16);

    // My Private Key
    BigInteger a = new BigInteger(
            ""5E8B02F2B2E9C96E0C359ECD14EB1B29EBDD61E70A61E4"" +
            ""2F0836A5974963E96D91F1462B699C222BC92BC068E9DC"" +
            ""E5C78E4349D28DDCB6D0ED2C41F7CD8AF2418C8AE27B69"" +
            ""09484DED7F0C5B4C286D9C36518FA5953974741B3A6F75"" +
            ""7B59A41A5CA0B74EFD919BB7ED8CCEC9CB3BC4B4F8D15D"" +
            ""16DC4642E54691904B2F35B969"", 16);

    // My Public Key
    BigInteger A = new BigInteger(
            ""85F04DD00345642AD12B65BD1A7C38728BFF0B8E281DDB"" +
            ""6AC4F2739E82A02145DAABF23D173C933913B1F8440597"" +
            ""10E9125591569DE427EAE1D269ACCBFA3305069DEB7622"" +
            ""D1DA3AD9820D11BD24FDCCE5381D2DF99BDA314394738D"" +
            ""FCBE210EAE247B1303E79297FF746CD919E189F6A5776E"" +
            ""6ECC24C8900DE0F38F159072DE"", 16);

    // Their Private Key
    BigInteger b = new BigInteger(
            ""42111D3A7ECAA6A83E503825F38629AD9754D93370D681"" +
            ""AEFEE152329D8DAE6C20732C5A7B6393DEDDB62753CEEF"" +
            ""AE0A5E1BD037A5A32364CE1375442E58997C2918563EE5"" +
            ""D7452373847AABAD5A5D02DF289B3A0B9096A375AE509F"" +
            ""16363B4573A5CCCDFFF2B60459D52C0E5280853000CE62"" +
            ""68560A95111723AF5916CC8376"", 16);

    // Their Public Key
    BigInteger B = new BigInteger(
            ""71257BA7758CDE21480706CA55861F5FE6122E5B879420"" +
            ""80F3E384890284FD62341B90A1B60FB44ADD61031D6AAC"" +
            ""3D5B267F1435B0765AC289040B63B242EED82863FD18BB"" +
            ""637757EDF44BA4589E0CE99D192E902C16EF1A89E7E7C1"" +
            ""C2EB5A6A8AB3E3E4F6B8A9CACCA4B8F6C4E20D12626797"" +
            ""5406CF9151D57BEEAE32C33CD8"", 16);

    // The Shared Secret
    BigInteger secret = new BigInteger(
            ""834A9D0434D817735589F22A4633FB6DD3E530DBA1EA2B"" +
            ""BB9E1ACCB438084513087F5DA00EA86ED53164D8893B81"" +
            ""A9C8DF65BC189CF6830D271E1A3E504CBCB25714164B51"" +
            ""9C75F6E0ADF41BB07E7F8C4FB7B9960D813E6577A73252"" +
            ""EEA9C139CDDA606D51122170E71636E7849149618C8238"" +
            ""A226128821F0B668490BDCA82F"", 16);

Using this post as a guide:
https://security.stackexchange.com/questions/45963/diffie-hellman-key-exchange-in-plain-english
1) Are my assumptions correct that 'a' is the secret number on my side and 'b' is the secret number on their side?
2) Given the example data, am I correct in transforming the hex representation to a decimal value? Here are my results:
 a = 66390362007035946406218401401207761013475548285294105112105139639190607639308478292266684826306137190981682856073453566963077570668348041252633322979431955395580457467551843233313476557017872071709128383858840166213588753166690401421078658676432871207970713843501321433541674906101053126631545366776741476713
 A = 94054944803568781365809132293092437685411466113799940774655767034465070801688227674438324625217997304495304798217968020105674208988107083532555808216365925310845077730469696561179874023824545031639895643922574243862372138887930362438243722132412662233732339999845565810626073575967836399703588412025249755870
 b = 46393721373616931425713842738733091490641584087681350012011014830147740618840619997608221051635856275110730538390991643443828273505863608898989702862901548035408503167446323013096534700981785904886213090032981937144110592283933751272337196723467356342510104910060731712678136878986285012929934142772165247862
 B = 79454116791030243835993774846060329772022864579356590515844871048029546733381452221063689783318067017491406528317462838099472851672248798338610594948647929971365872809557181659701202351270701590108182485073251154126367917793952098022309258299793944660722596621675214128052755659890352643244396810687568100568
 secret = 92195997420654412005403859326763427963568159942225029128672319592580542441945382083896651021886036463236361034857638584808142466991971457292885469363097913358292550515467126779618590503912963769256823553075620480922531451229861911226149279841977690852350735509236250226638964983746622786925283953012622796847

3) Do these values make sense when it comes to computing the result? I am having a hard time getting this function to work with such large numbers:
A = g^a mod p 
Given that 'a' is some 308 digits long, it seems too large to make any sense. I cannot set such a large number as the exponent on the BigInteger as it will only allow me to pass an int value, where my 'a' is most definitely out of range. 
","You are correct on your first two questions.
For the 3rd one, use the modPow(BigInteger exponent, BigInteger modulo), so
BigInteger A = g.modPow(a,p);

","428","<java><math><diffie-hellman>","3","3","1","2015-11-03 19:23:20","33507360","0","","-1","","2017-03-17 13:14:46","2015-11-03 19:14:17",""
"16731693","SSL Decryption programmatically","I want to decrypt the packets which is using the ciphersuite TLS-DHE-RSA-WITH-AES-256-CBC-SHA.Using Master keys I am able to decrypt the data in wireshark.Still I can't save decrypted wireshark file so I am doing it programmatically.I am having Keyblock which includes client mac,server mac,client write,server write and both client and server iv's .So how can I decrypt encrypted data programmatically?
","Your best bet is probably to fork Wireshark and make a patch which allows you to save decrypted data (then give them the patch to incorporate if they so desire).
They've already done all the hard work, all you need to do is add some basic file I/O, and it also contributes back to the development of a program you're using.
","427","<openssl><wireshark><encryption><diffie-hellman>","-1","0","1","2013-05-26 06:12:05","16756708","3","","952374","","2013-05-24 09:35:32","2013-05-24 09:27:22",""
"54311617","JSch: How to configure diffie-hellman-group14-sha256?","I am trying to connect to a ssh server with diffie-hellman-group14-sha256@ssh.com, diffie-hellman-group-exchange-sha256 algorithm.
But my JSch client always encrypts with diffie-hellman-group14-sha1.
What can I do to setup the sha256 algorithm?
The problem occurs on our test environment only. The settings there are same as prod environments. Just OpenSSH version differs - it is newer on test.
Java version: 1.8.0_151
Server logs: ""The JCE Unlimited Strength Jurisdiction Policy File was found""
Available in server lib: jce_policy-8/US_export_policy.jar, jce_policy-8/local_policy.jar
My code looks like:
        JSch jsch = new JSch(); 
        Session session = null;
        Channel channel = null;
        ChannelSftp c = null;

        //Now connect and SFTP to the SFTP Server
        try {
            //Create a session sending through our username and password
            session = jsch.getSession(ftpUserName, ftpHost, ftpPort);    
            session.setPassword(ftpPassword);

            Properties config = new Properties();
            config.put(""StrictHostKeyChecking"", ""no"");
            session.setConfig(config);
            session.connect();
            //
            //Open the SFTP channel
            //
            channel = session.openChannel(""sftp"");
            channel.connect();
            c = (ChannelSftp)channel;
            status = ""OK"";
        }
        catch (Exception e) {
            status = ""Unable to connect to FTP server. ""+e.toString();
        }

Log out is:
INFO: Connecting to X.X.X.X port 22
INFO: Connection established
INFO: Remote version string: SSH-2.0-6.4.13.36 SSH Tectia Server
INFO: Local version string: SSH-2.0-JSCH-0.1.53
INFO: CheckCiphers: aes256-ctr,aes192-ctr,aes128-ctr,aes256-cbc,aes192-cbc,aes128-cbc,3des-ctr,arcfour,arcfour128,arcfour256
**INFO**:   CheckKexes: diffie-hellman-group14-sha1,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521
        CheckKexes: diffie-hellman-group14-sha1,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521
INFO: CheckSignatures: ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521
INFO: SSH_MSG_KEXINIT sent
INFO: SSH_MSG_KEXINIT received
**INFO: kex: server**: diffie-hellman-group14-sha256@ssh.com,diffie-hellman-group-exchange-sha256,diffie-hellman-group1-sha1,diffie-hellman-group14-sha1,diffie-hellman-group-exchange-sha1
INFO: kex: server: ssh-rsa,ssh-rsa-sha256@ssh.com
INFO: kex: server: aes128-ctr,aes192-ctr,aes256-ctr,3des-cbc,crypticore128@ssh.com
INFO: kex: server: aes128-ctr,aes192-ctr,aes256-ctr,3des-cbc,crypticore128@ssh.com
INFO: kex: server: hmac-sha2-256,hmac-sha2-512,hmac-md5,hmac-sha256-2@ssh.com,hmac-sha224@ssh.com,hmac-sha256@ssh.com,hmac-sha384@ssh.com,hmac-sha512@ssh.com,crypticore-mac@ssh.com
INFO: kex: server: hmac-sha2-256,hmac-sha2-512,hmac-md5,hmac-sha256-2@ssh.com,hmac-sha224@ssh.com,hmac-sha256@ssh.com,hmac-sha384@ssh.com,hmac-sha512@ssh.com,crypticore-mac@ssh.com
INFO: kex: server: none,zlib
INFO: kex: server: none,zlib
INFO: kex: server: 
INFO: kex: server: 
**INFO: kex: client**: ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group14-sha1,diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group1-sha1
INFO: kex: client: ssh-rsa,ssh-dss,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521
INFO: kex: client: aes256-ctr,aes192-ctr,arcfour,arcfour128,arcfour256,aes128-ctr,aes128-cbc,3des-ctr,3des-cbc,blowfish-cbc,aes192-cbc,aes256-cbc
INFO: kex: client: aes256-ctr,aes192-ctr,arcfour,arcfour128,arcfour256,aes128-ctr,aes128-cbc,3des-ctr,3des-cbc,blowfish-cbc,aes192-cbc,aes256-cbc
INFO: kex: client: hmac-md5,hmac-sha1,hmac-sha2-256,hmac-sha1-96,hmac-md5-96
INFO: kex: client: hmac-md5,hmac-sha1,hmac-sha2-256,hmac-sha1-96,hmac-md5-96
INFO: kex: client: none
INFO: kex: client: none
INFO: kex: client: 
INFO: kex: client: 
INFO: kex: server->client aes256-ctr hmac-md5 none
INFO: kex: client->server aes256-ctr hmac-md5 none
INFO: SSH_MSG_KEXDH_INIT sent
INFO: expecting SSH_MSG_KEXDH_REPLY
INFO: ssh_rsa_verify: signature true
INFO: Permanently added '160.58.9.72' (RSA) to the list of known hosts.
INFO: SSH_MSG_NEWKEYS sent
INFO: SSH_MSG_NEWKEYS received
INFO: SSH_MSG_SERVICE_REQUEST sent
INFO: SSH_MSG_SERVICE_ACCEPT received
INFO: Authentications that can continue: publickey,keyboard-interactive,password
INFO: Next authentication method: publickey
INFO: Authentications that can continue: keyboard-interactive,password
INFO: Next authentication method: keyboard-interactive
INFO: Authentication succeeded (keyboard-interactive).

I've tried to set the SHA256 algorithm by putting the same algorithms in the same order as the server logs without success:
config.put(""kex"", ""diffie-hellman-group14-sha256@ssh.com,diffie-hellman-group-exchange-sha256,diffie-hellman-group1-sha1,diffie-hellman-group14-sha1,diffie-hellman-group-exchange-sha1"");

Log when algorithm order is the same
INFO: Connecting to X.X.X.X port 22
INFO: Connection established
INFO: Remote version string: SSH-2.0-6.4.13.36 SSH Tectia Server
INFO: Local version string: SSH-2.0-JSCH-0.1.53
INFO: CheckCiphers: aes256-ctr,aes192-ctr,aes128-ctr,aes256-cbc,aes192-cbc,aes128-cbc,3des-ctr,arcfour,arcfour128,arcfour256
INFO: CheckKexes: diffie-hellman-group14-sha1,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521
INFO: CheckSignatures: ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521
INFO: SSH_MSG_KEXINIT sent
INFO: SSH_MSG_KEXINIT received
INFO: kex: server: diffie-hellman-group14-sha256@ssh.com,diffie-hellman-group-exchange-sha256,diffie-hellman-group1-sha1,diffie-hellman-group14-sha1,diffie-hellman-group-exchange-sha1
INFO: kex: server: ssh-rsa,ssh-rsa-sha256@ssh.com
INFO: kex: server: aes128-ctr,aes192-ctr,aes256-ctr,3des-cbc,crypticore128@ssh.com
INFO: kex: server: aes128-ctr,aes192-ctr,aes256-ctr,3des-cbc,crypticore128@ssh.com
INFO: kex: server: hmac-sha2-256,hmac-sha2-512,hmac-md5,hmac-sha256-2@ssh.com,hmac-sha224@ssh.com,hmac-sha256@ssh.com,hmac-sha384@ssh.com,hmac-sha512@ssh.com,crypticore-mac@ssh.com
INFO: kex: server: hmac-sha2-256,hmac-sha2-512,hmac-md5,hmac-sha256-2@ssh.com,hmac-sha224@ssh.com,hmac-sha256@ssh.com,hmac-sha384@ssh.com,hmac-sha512@ssh.com,crypticore-mac@ssh.com
INFO: kex: server: none,zlib
INFO: kex: server: none,zlib
INFO: kex: server:   
INFO: kex: server:   
INFO: kex: client: ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group14-sha1,diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group1-sha1
INFO: kex: client: ssh-rsa,ssh-dss,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521
INFO: kex: client: aes256-ctr,aes192-ctr,arcfour,arcfour128,arcfour256,aes128-ctr,aes128-cbc,3des-ctr,3des-cbc,blowfish-cbc,aes192-cbc,aes256-cbc
INFO: kex: client: aes256-ctr,aes192-ctr,arcfour,arcfour128,arcfour256,aes128-ctr,aes128-cbc,3des-ctr,3des-cbc,blowfish-cbc,aes192-cbc,aes256-cbc
INFO: kex: client: hmac-md5,hmac-sha1,hmac-sha2-256,hmac-sha1-96,hmac-md5-96
INFO: kex: client: hmac-md5,hmac-sha1,hmac-sha2-256,hmac-sha1-96,hmac-md5-96
INFO: kex: client: none
INFO: kex: client: none
INFO: kex: client:   
INFO: kex: client:   
INFO: kex: server->client aes256-ctr hmac-md5 none
INFO: kex: client->server aes256-ctr hmac-md5 none
INFO: SSH_MSG_KEXDH_INIT sent
INFO: expecting SSH_MSG_KEXDH_REPLY
INFO: ssh_rsa_verify: signature true
INFO: Permanently added 'X.X.X.X' (RSA) to the list of known hosts.
INFO: SSH_MSG_NEWKEYS sent
INFO: SSH_MSG_NEWKEYS received
INFO: SSH_MSG_SERVICE_REQUEST sent
INFO: SSH_MSG_SERVICE_ACCEPT received
INFO: Authentications that can continue: publickey,keyboard-interactive,password
INFO: Next authentication method: publickey
INFO: Authentications that can continue: keyboard-interactive,password
INFO: Next authentication method: keyboard-interactive
INFO: Authentication succeeded (keyboard-interactive).
INFO: Disconnecting from X.X.X.X port 22
INFO: Caught an exception, leaving main loop due to Socket closed

","","398","<sftp><jsch><diffie-hellman>","0","","0","2019-01-31 12:14:03","","2","1","10950778","","2019-01-31 12:14:03","2019-01-22 15:34:48",""
"41861378","InitializeSecurityContext returned code= -2146892963","I have an asmx webservice that consumes hundreds of other webservices from other companies. Each webservice is expected to return data in a very specific format (we provide a wsdl for the companies to use). I recently started encountering an error with two companies we communicate with. The error ended up being the very generic ""The request was aborted: Could not create SSL/TLS secure channel.."", so I turned on logging in our webservice.
Here is the portion of the log around the error:
System.Net.Sockets Verbose: 0 : [10564] Data from Socket#39875033::Receive
System.Net.Sockets Verbose: 0 : [10564] 00000000 : 16 03 01 16  86                                  : .....
System.Net.Sockets Verbose: 0 : [10564] Exiting Socket#39875033::Receive()  -> Int32#5
System.Net.Sockets Verbose: 0 : [10564] Socket#39875033::Receive()
System.Net.Sockets Verbose: 0 : [10564] Data from Socket#39875033::Receive
System.Net.Sockets Verbose: 0 : [10564] (printing 1024 out of 1375)
System.Net.Sockets Verbose: 0 : [10564] 00000005 : 02 00 00 4D 03 01 58 6F-CE 68 54 44 73 EB F6 F5 : ...M..Xo.hTDs...
System.Net.Sockets Verbose: 0 : [10564] 00000015 : BC E0 22 AF C8 A2 52 CA-86 CD F7 6D BA 97 33 CD : ..""...R....m..3.
System.Net.Sockets Verbose: 0 : [10564] 00000025 : B6 50 E0 0A 59 4C 20 58-6F CE 68 8A FB B6 30 54 : .P..YL Xo.h...0T
System.Net.Sockets Verbose: 0 : [10564] 00000035 : 9A 23 CE 4D 5A A3 2A 75-DF A2 4C A7 16 36 DD FA : .#.MZ.*u..L..6..
System.Net.Sockets Verbose: 0 : [10564] 00000045 : 26 64 5E 64 FF 7B 97 00-39 00 00 05 FF 01 00 01 : &d^d.{..9.......
System.Net.Sockets Verbose: 0 : [10564] 00000055 : 00 0B 00 13 F8 00 13 F5-00 05 4A 30 82 05 46 30 : ..........J0..F0
System.Net.Sockets Verbose: 0 : [10564] 00000065 : 82 04 2E A0 03 02 01 02-02 04 50 D3 24 53 30 0D : ..........P.$S0.
System.Net.Sockets Verbose: 0 : [10564] 00000075 : 06 09 2A 86 48 86 F7 0D-01 01 0B 05 00 30 81 BA : ..*.H........0..
System.Net.Sockets Verbose: 0 : [10564] 00000085 : 31 0B 30 09 06 03 55 04-06 13 02 55 53 31 16 30 : 1.0...U....US1.0
System.Net.Sockets Verbose: 0 : [10564] 00000095 : 14 06 03 55 04 0A 13 0D-45 6E 74 72 75 73 74 2C : ...U....Entrust,
System.Net.Sockets Verbose: 0 : [10564] 000000A5 : 20 49 6E 63 2E 31 28 30-26 06 03 55 04 0B 13 1F :  Inc.1(0&..U....
System.Net.Sockets Verbose: 0 : [10564] 000000B5 : 53 65 65 20 77 77 77 2E-65 6E 74 72 75 73 74 2E : See www.entrust.
System.Net.Sockets Verbose: 0 : [10564] 000000C5 : 6E 65 74 2F 6C 65 67 61-6C 2D 74 65 72 6D 73 31 : net/legal-terms1
System.Net.Sockets Verbose: 0 : [10564] 000000D5 : 39 30 37 06 03 55 04 0B-13 30 28 63 29 20 32 30 : 907..U...0(c) 20
System.Net.Sockets Verbose: 0 : [10564] 000000E5 : 31 32 20 45 6E 74 72 75-73 74 2C 20 49 6E 63 2E : 12 Entrust, Inc.
System.Net.Sockets Verbose: 0 : [10564] 000000F5 : 20 2D 20 66 6F 72 20 61-75 74 68 6F 72 69 7A 65 :  - for authorize
System.Net.Sockets Verbose: 0 : [10564] 00000105 : 64 20 75 73 65 20 6F 6E-6C 79 31 2E 30 2C 06 03 : d use only1.0,..
System.Net.Sockets Verbose: 0 : [10564] 00000115 : 55 04 03 13 25 45 6E 74-72 75 73 74 20 43 65 72 : U...%Entrust Cer
System.Net.Sockets Verbose: 0 : [10564] 00000125 : 74 69 66 69 63 61 74 69-6F 6E 20 41 75 74 68 6F : tification Autho
System.Net.Sockets Verbose: 0 : [10564] 00000135 : 72 69 74 79 20 2D 20 4C-31 4B 30 1E 17 0D 31 35 : rity - L1K0...15
System.Net.Sockets Verbose: 0 : [10564] 00000145 : 30 31 33 30 31 31 33 30-34 33 5A 17 0D 31 38 30 : 0130113043Z..180
System.Net.Sockets Verbose: 0 : [10564] 00000155 : 34 32 39 31 38 30 35 33-37 5A 30 7E 31 0B 30 09 : 429180537Z0~1.0.
System.Net.Sockets Verbose: 0 : [10564] 00000165 : 06 03 55 04 06 13 02 55-53 31 11 30 0F 06 03 55 : ..U....US1.0...U
System.Net.Sockets Verbose: 0 : [10564] 00000175 : 04 08 13 08 49 6C 6C 69-6E 6F 69 73 31 13 30 11 : ....Illinois1.0.
System.Net.Sockets Verbose: 0 : [10564] 00000185 : 06 03 55 04 07 13 0A 4E-6F 72 74 68 62 72 6F 6F : ..U....Northbroo
System.Net.Sockets Verbose: 0 : [10564] 00000195 : FF FF FF FF FF FF FF 55-04 FF FF FF FF FF FF FF : k1#0!..U....Goog
System.Net.Sockets Verbose: 0 : [10564] 000001A5 : FF FF FF FF FF FF FF 73-75 FF FF FF FF FF FF FF : le12 SafesearchC
System.Net.Sockets Verbose: 0 : [10564] 000001B5 : FF FF FF FF FF FF FF 22-30 FF FF FF FF FF FF FF : ompany1""0 ..U...
System.Net.Sockets Verbose: 0 : [10564] 000001C5 : FF FF FF FF FF FF FF 64-34 FF FF FF FF FF FF FF : .bot-gad4-c6c.go
System.Net.Sockets Verbose: 0 : [10564] 000001D5 : FF FF FF FF FF FF FF 63-6F 6D 30 82 01 22 30 0D : ogle12.com0..""0.
System.Net.Sockets Verbose: 0 : [10564] 000001E5 : 06 09 2A 86 48 86 F7 0D-01 01 01 05 00 03 82 01 : ..*.H...........
System.Net.Sockets Verbose: 0 : [10564] 000001F5 : 0F 00 30 82 01 0A 02 82-01 01 00 B2 52 E7 42 40 : ..0.........R.B@
System.Net.Sockets Verbose: 0 : [10564] 00000205 : 49 91 1D D3 F2 F5 D3 60-3B A8 32 A1 CF A9 6A F0 : I......`;.2...j.
System.Net.Sockets Verbose: 0 : [10564] 00000215 : B8 29 2B EF 5E B9 66 9B-9A 6A 39 19 86 54 1C 56 : .)+.^.f..j9..T.V
System.Net.Sockets Verbose: 0 : [10564] 00000225 : E9 14 7E 1C BB D1 A2 B3-8B C5 BE 27 10 EE 38 DB : ..~........'..8.
System.Net.Sockets Verbose: 0 : [10564] 00000235 : DC AC 89 F2 81 FC 96 8A-B0 8E D6 98 F5 96 5D 1C : ..............].
System.Net.Sockets Verbose: 0 : [10564] 00000245 : B6 79 E0 1D 2D C3 75 38-3B F1 20 FB 07 3A 9A B3 : .y..-.u8;. ..:..
System.Net.Sockets Verbose: 0 : [10564] 00000255 : 41 5E DC 8F 32 04 D1 46-07 06 89 DB 4D 32 DB B7 : A^..2..F....M2..
System.Net.Sockets Verbose: 0 : [10564] 00000265 : 8A 16 70 FD 90 74 92 B7-05 73 E7 AD B4 72 CC 4C : ..p..t...s...r.L
System.Net.Sockets Verbose: 0 : [10564] 00000275 : A4 49 35 31 8D 8E 53 68-2A 4B 4E 7A D8 5D EF 1A : .I51..Sh*KNz.]..
System.Net.Sockets Verbose: 0 : [10564] 00000285 : 4D 0C F6 83 51 CC 5C 65-1C A5 D0 6D 71 AC C9 62 : M...Q.\e...mq..b
System.Net.Sockets Verbose: 0 : [10564] 00000295 : 6C F8 82 90 02 63 27 BE-65 F5 BF 55 68 38 9C 6A : l....c'.e..Uh8.j
System.Net.Sockets Verbose: 0 : [10564] 000002A5 : 04 7A 35 C6 BC 69 12 84-6C 5E BF 3A 32 84 F6 E4 : .z5..i..l^.:2...
System.Net.Sockets Verbose: 0 : [10564] 000002B5 : 14 6D 8E 4E D0 FC B9 72-90 D2 06 76 6A 4B 8A 81 : .m.N...r...vjK..
System.Net.Sockets Verbose: 0 : [10564] 000002C5 : DB 14 B2 5B DE EE 9C A2-B2 81 84 EB 4C D7 13 0E : ...[........L...
System.Net.Sockets Verbose: 0 : [10564] 000002D5 : C3 2E 69 40 6C BC FE E7-BC 97 FC 87 7A 61 6B C1 : ..i@l.......zak.
System.Net.Sockets Verbose: 0 : [10564] 000002E5 : A7 A1 68 9F 71 4C 6B C3-98 6B 2C 6F E5 C1 64 14 : ..h.qLk..k,o..d.
System.Net.Sockets Verbose: 0 : [10564] 000002F5 : 0C 63 DE 17 71 58 7A C8-4E D7 4D 02 03 01 00 01 : .c..qXz.N.M.....
System.Net.Sockets Verbose: 0 : [10564] 00000305 : A3 82 01 8D 30 82 01 89-30 0B 06 03 55 1D 0F 04 : ....0...0...U...
System.Net.Sockets Verbose: 0 : [10564] 00000315 : 04 03 02 05 A0 30 1D 06-03 55 1D 25 04 16 30 14 : .....0...U.%..0.
System.Net.Sockets Verbose: 0 : [10564] 00000325 : 06 08 2B 06 01 05 05 07-03 01 06 08 2B 06 01 05 : ..+.........+...
System.Net.Sockets Verbose: 0 : [10564] 00000335 : 05 07 03 02 30 33 06 03-55 1D 1F 04 2C 30 2A 30 : ....03..U...,0*0
System.Net.Sockets Verbose: 0 : [10564] 00000345 : 28 A0 26 A0 24 86 22 68-74 74 70 3A 2F 2F 63 72 : (.&.$.""http://cr
System.Net.Sockets Verbose: 0 : [10564] 00000355 : 6C 2E 65 6E 74 72 75 73-74 2E 6E 65 74 2F 6C 65 : l.entrust.net/le
System.Net.Sockets Verbose: 0 : [10564] 00000365 : 76 65 6C 31 6B 2E 63 72-6C 30 4B 06 03 55 1D 20 : vel1k.crl0K..U. 
System.Net.Sockets Verbose: 0 : [10564] 00000375 : 04 44 30 42 30 36 06 0A-60 86 48 01 86 FA 6C 0A : .D0B06..`.H...l.
System.Net.Sockets Verbose: 0 : [10564] 00000385 : 01 05 30 28 30 26 06 08-2B 06 01 05 05 07 02 01 : ..0(0&..+.......
System.Net.Sockets Verbose: 0 : [10564] 00000395 : 16 1A 68 74 74 70 3A 2F-2F 77 77 77 2E 65 6E 74 : ..http://www.ent
System.Net.Sockets Verbose: 0 : [10564] 000003A5 : 72 75 73 74 2E 6E 65 74-2F 72 70 61 30 08 06 06 : rust.net/rpa0...
System.Net.Sockets Verbose: 0 : [10564] 000003B5 : 67 81 0C 01 02 02 30 68-06 08 2B 06 01 05 05 07 : g.....0h..+.....
System.Net.Sockets Verbose: 0 : [10564] 000003C5 : 01 01 04 5C 30 5A 30 23-06 08 2B 06 01 05 05 07 : ...\0Z0#..+.....
System.Net.Sockets Verbose: 0 : [10564] 000003D5 : 30 01 86 17 68 74 74 70-3A 2F 2F 6F 63 73 70 2E : 0...http://ocsp.
System.Net.Sockets Verbose: 0 : [10564] 000003E5 : 65 6E 74 72 75 73 74 2E-6E 65 74 30 33 06 08 2B : entrust.net03..+
System.Net.Sockets Verbose: 0 : [10564] 000003F5 : 06 01 05 05 07 30 02 86-27 68 74 74 70 3A 2F 2F : .....0..'http://
System.Net.Sockets Verbose: 0 : [10564] Exiting Socket#39875033::Receive()  -> Int32#1375
System.Net.Sockets Verbose: 0 : [10564] Socket#39875033::Receive()
System.Net.Sockets Verbose: 0 : [10564] Data from Socket#39875033::Receive
System.Net.Sockets Verbose: 0 : [10564] (printing 1024 out of 4391)
System.Net.Sockets Verbose: 0 : [10564] 00000564 : BB F6 5B 28 01 80 2C DE-DA 84 E1 3F 50 19 CA 7A : ..[(..,....?P..z
System.Net.Sockets Verbose: 0 : [10564] 00000574 : 75 41 AA 4B A7 D5 F9 94-81 EE 68 E9 72 E4 47 6A : uA.K......h.r.Gj
System.Net.Sockets Verbose: 0 : [10564] 00000584 : 60 CF 92 1F 7B 34 E8 B3-2B 49 B8 CD 19 01 44 BC : `...{4..+I....D.
System.Net.Sockets Verbose: 0 : [10564] 00000594 : D7 5D 2A BF 95 A5 F3 7F-A3 6D CA C0 D4 E7 D7 87 : .]*......m......
System.Net.Sockets Verbose: 0 : [10564] 000005A4 : 09 69 07 FE F2 47 00 05-07 30 82 05 03 30 82 03 : .i...G...0...0..
System.Net.Sockets Verbose: 0 : [10564] 000005B4 : EB A0 03 02 01 02 02 04-51 D3 60 EE 30 0D 06 09 : ........Q.`.0...
System.Net.Sockets Verbose: 0 : [10564] 000005C4 : 2A 86 48 86 F7 0D 01 01-0B 05 00 30 81 BE 31 0B : *.H........0..1.
System.Net.Sockets Verbose: 0 : [10564] 000005D4 : 30 09 06 03 55 04 06 13-02 55 53 31 16 30 14 06 : 0...U....US1.0..
System.Net.Sockets Verbose: 0 : [10564] 000005E4 : 03 55 04 0A 13 0D 45 6E-74 72 75 73 74 2C 20 49 : .U....Entrust, I    
System.Net.Sockets Verbose: 0 : [10564] 000005F4 : 6E 63 2E 31 28 30 26 06-03 55 04 0B 13 1F 53 65 : nc.1(0&..U....Se
System.Net.Sockets Verbose: 0 : [10564] 00000604 : 65 20 77 77 77 2E 65 6E-74 72 75 73 74 2E 6E 65 : e www.entrust.ne
System.Net.Sockets Verbose: 0 : [10564] 00000614 : 74 2F 6C 65 67 61 6C 2D-74 65 72 6D 73 31 39 30 : t/legal-terms190
System.Net.Sockets Verbose: 0 : [10564] 00000624 : 37 06 03 55 04 0B 13 30-28 63 29 20 32 30 30 39 : 7..U...0(c) 2009
System.Net.Sockets Verbose: 0 : [10564] 00000634 : 20 45 6E 74 72 75 73 74-2C 20 49 6E 63 2E 20 2D :  Entrust, Inc. -
System.Net.Sockets Verbose: 0 : [10564] 00000644 : 20 66 6F 72 20 61 75 74-68 6F 72 69 7A 65 64 20 :  for authorized 
System.Net.Sockets Verbose: 0 : [10564] 00000654 : 75 73 65 20 6F 6E 6C 79-31 32 30 30 06 03 55 04 : use only1200..U.
System.Net.Sockets Verbose: 0 : [10564] 00000664 : 03 13 29 45 6E 74 72 75-73 74 20 52 6F 6F 74 20 : ..)Entrust Root 
System.Net.Sockets Verbose: 0 : [10564] 00000674 : 43 65 72 74 69 66 69 63-61 74 69 6F 6E 20 41 75 : Certification Au
System.Net.Sockets Verbose: 0 : [10564] 00000684 : 74 68 6F 72 69 74 79 20-2D 20 47 32 30 1E 17 0D : thority - G20...
System.Net.Sockets Verbose: 0 : [10564] 00000694 : 31 34 31 30 32 32 31 37-30 35 31 34 5A 17 0D 32 : 141022170514Z..2
System.Net.Sockets Verbose: 0 : [10564] 000006A4 : 34 31 30 32 33 30 37 33-33 32 32 5A 30 81 BA 31 : 41023073322Z0..1
System.Net.Sockets Verbose: 0 : [10564] 000006B4 : 0B 30 09 06 03 55 04 06-13 02 55 53 31 16 30 14 : .0...U....US1.0.
System.Net.Sockets Verbose: 0 : [10564] 000006C4 : 06 03 55 04 0A 13 0D 45-6E 74 72 75 73 74 2C 20 : ..U....Entrust, 
System.Net.Sockets Verbose: 0 : [10564] 000006D4 : 49 6E 63 2E 31 28 30 26-06 03 55 04 0B 13 1F 53 : Inc.1(0&..U....S
System.Net.Sockets Verbose: 0 : [10564] 000006E4 : 65 65 20 77 77 77 2E 65-6E 74 72 75 73 74 2E 6E : ee www.entrust.n
System.Net.Sockets Verbose: 0 : [10564] 000006F4 : 65 74 2F 6C 65 67 61 6C-2D 74 65 72 6D 73 31 39 : et/legal-terms19
System.Net.Sockets Verbose: 0 : [10564] 00000704 : 30 37 06 03 55 04 0B 13-30 28 63 29 20 32 30 31 : 07..U...0(c) 201
System.Net.Sockets Verbose: 0 : [10564] 00000714 : 32 20 45 6E 74 72 75 73-74 2C 20 49 6E 63 2E 20 : 2 Entrust, Inc. 
System.Net.Sockets Verbose: 0 : [10564] 00000724 : 2D 20 66 6F 72 20 61 75-74 68 6F 72 69 7A 65 64 : - for authorized
System.Net.Sockets Verbose: 0 : [10564] 00000734 : 20 75 73 65 20 6F 6E 6C-79 31 2E 30 2C 06 03 55 :  use only1.0,..U
System.Net.Sockets Verbose: 0 : [10564] 00000744 : 04 03 13 25 45 6E 74 72-75 73 74 20 43 65 72 74 : ...%Entrust Cert
System.Net.Sockets Verbose: 0 : [10564] 00000754 : 69 66 69 63 61 74 69 6F-6E 20 41 75 74 68 6F 72 : ification Author
System.Net.Sockets Verbose: 0 : [10564] 00000764 : 69 74 79 20 2D 20 4C 31-4B 30 82 01 22 30 0D 06 : ity - L1K0..""0..
System.Net.Sockets Verbose: 0 : [10564] 00000774 : 09 2A 86 48 86 F7 0D 01-01 01 05 00 03 82 01 0F : .*.H............
System.Net.Sockets Verbose: 0 : [10564] 00000784 : 00 30 82 01 0A 02 82 01-01 00 DA 3F 96 D0 4D B9 : .0.........?..M.
System.Net.Sockets Verbose: 0 : [10564] 00000794 : 2F 44 E7 DB 39 5E 9B 50-EE 5C A5 61 DA 41 67 53 : /D..9^.P.\.a.AgS
System.Net.Sockets Verbose: 0 : [10564] 000007A4 : 09 AA 00 9A 8E 57 7F 29-6B DB C7 E1 21 24 AA 3A : .....W.)k...!$.:
System.Net.Sockets Verbose: 0 : [10564] 000007B4 : D0 8D 47 23 D2 ED 72 16-F0 91 21 D2 5D B7 B8 4B : ..G#..r...!.]..K
System.Net.Sockets Verbose: 0 : [10564] 000007C4 : A8 83 8F B7 91 32 68 CF-CE 25 93 2C B2 7D 97 C8 : .....2h..%.,.}..
System.Net.Sockets Verbose: 0 : [10564] 000007D4 : FE C1 B4 17 BA 09 9E 03-90 93 7B 7C 49 83 22 68 : ..........{|I.""h
System.Net.Sockets Verbose: 0 : [10564] 000007E4 : 8A 9B DE 47 C3 31 98 7A-2E 7D 40 0B D2 EF 3E D3 : ...G.1.z.}@...>.
System.Net.Sockets Verbose: 0 : [10564] 000007F4 : B2 8C AA 8F 48 A9 FF 00-E8 29 58 06 F7 B6 93 5A : ....H....)X....Z
System.Net.Sockets Verbose: 0 : [10564] 00000804 : 94 73 26 26 AD 58 0E E5-42 B8 D5 EA 73 79 64 68 : .s&&.X..B...sydh
System.Net.Sockets Verbose: 0 : [10564] 00000814 : 53 25 B8 84 CF 94 7A AE-06 45 0C A3 6B 4D D0 C6 : S%....z..E..kM..
System.Net.Sockets Verbose: 0 : [10564] 00000824 : BE EA 18 A4 36 F0 92 B2-BA 1C 88 8F 3A 52 7F F7 : ....6.......:R..
System.Net.Sockets Verbose: 0 : [10564] 00000834 : 5E 6D 83 1C 9D F0 1F E5-C3 D6 DD A5 78 92 3D B0 : ^m..........x.=.
System.Net.Sockets Verbose: 0 : [10564] 00000844 : 6D 2C EA C9 CF 94 41 19-71 44 68 BA 47 3C 04 E9 : m,....A.qDh.G<..
System.Net.Sockets Verbose: 0 : [10564] 00000854 : 5D BA 3E F0 35 F7 15 B6-9E F2 2E 15 1E 3F 47 C8 : ].>.5........?G.
System.Net.Sockets Verbose: 0 : [10564] 00000864 : C8 38 A7 73 45 5D 4D B0-3B B1 8E 17 29 37 EA DD : .8.sE]M.;...)7..
System.Net.Sockets Verbose: 0 : [10564] 00000874 : 05 01 22 BB 94 36 2A 8D-5B 35 FE 53 19 2F 08 46 : ..""..6*.[5.S./.F
System.Net.Sockets Verbose: 0 : [10564] 00000884 : C1 2A B3 1A 62 1D 4E 2B-D9 1B 02 03 01 00 01 A3 : .*..b.N+........
System.Net.Sockets Verbose: 0 : [10564] 00000894 : 82 01 09 30 82 01 05 30-0E 06 03 55 1D 0F 01 01 : ...0...0...U....
System.Net.Sockets Verbose: 0 : [10564] 000008A4 : FF 04 04 03 02 01 06 30-0F 06 03 55 1D 13 04 08 : .......0...U....
System.Net.Sockets Verbose: 0 : [10564] 000008B4 : 30 06 01 01 FF 02 01 00-30 33 06 08 2B 06 01 05 : 0.......03..+...
System.Net.Sockets Verbose: 0 : [10564] 000008C4 : 05 07 01 01 04 27 30 25-30 23 06 08 2B 06 01 05 : .....'0%0#..+...
System.Net.Sockets Verbose: 0 : [10564] 000008D4 : 05 07 30 01 86 17 68 74-74 70 3A 2F 2F 6F 63 73 : ..0...http://ocs
System.Net.Sockets Verbose: 0 : [10564] 000008E4 : 70 2E 65 6E 74 72 75 73-74 2E 6E 65 74 30 30 06 : p.entrust.net00.
System.Net.Sockets Verbose: 0 : [10564] 000008F4 : 03 55 1D 1F 04 29 30 27-30 25 A0 23 A0 21 86 1F : .U...)0'0%.#.!..
System.Net.Sockets Verbose: 0 : [10564] 00000904 : 68 74 74 70 3A 2F 2F 63-72 6C 2E 65 6E 74 72 75 : http://crl.entru
System.Net.Sockets Verbose: 0 : [10564] 00000914 : 73 74 2E 6E 65 74 2F 67-32 63 61 2E 63 72 6C 30 : st.net/g2ca.crl0
System.Net.Sockets Verbose: 0 : [10564] 00000924 : 3B 06 03 55 1D 20 04 34-30 32 30 30 06 04 55 1D : ;..U. .40200..U.
System.Net.Sockets Verbose: 0 : [10564] 00000934 : 20 00 30 28 30 26 06 08-2B 06 01 05 05 07 02 01 :  .0(0&..+.......
System.Net.Sockets Verbose: 0 : [10564] 00000944 : 16 1A 68 74 74 70 3A 2F-2F 77 77 77 2E 65 6E 74 : ..http://www.ent
System.Net.Sockets Verbose: 0 : [10564] 00000954 : 72 75 73 74 2E 6E 65 74-2F 72 70 61 30 1D 06 03 : rust.net/rpa0...
System.Net.Sockets Verbose: 0 : [10564] Exiting Socket#39875033::Receive()  -> Int32#4391
System.Net Information: 0 : [10564] InitializeSecurityContext(credential = System.Net.SafeFreeCredential_SECURITY, context = 1d73b60:1c191a0, targetName = bot-gad4-c6c.google12.com, inFlags = ReplayDetect, SequenceDetect, Confidentiality, AllocateMemory, InitManualCredValidation)
System.Net Information: 0 : [10564] InitializeSecurityContext(In-Buffers count=2, Out-Buffer length=0, returned code=-2146892963).
System.Net.Sockets Verbose: 0 : [10564] Socket#39875033::Dispose()
System.Net Error: 0 : [10564] Exception in HttpWebRequest#54487120:: - The request was aborted: Could not create SSL/TLS secure channel..
System.Net Error: 0 : [10564] Exception in HttpWebRequest#54487120::GetResponse - The request was aborted: Could not create SSL/TLS secure channel..

The returned code of -2146892963 is not in the list of enumerated returned codes for the InitializeSecurityContext method. Any idea what this means and how to fix it?
","So, after weeks of searching, I found out what the error code is.
My problem is the method was returning the code in decimal form and I should have been searching for the hex code, which is 8009035D. Searching for that error code resulted in this article: https://www.nsoftware.com/kb/xml/06101501.rst#8009035D, indicating that this particular error code could be related to Windows blocking weak security. 
In my case, this is exactly what my problem was. I made the registry entry change given by the article, allowing for DHE Key length of 512 instead of the default 1024. After restarting the webserver, I was able to consume the company's webservice. 
It turns out that this particular company was using a DHE key length of 768, resulting in the error. 
As for fixing the problem, I feel the registry entry change should only be used to verify that this is the problem. I am currently in the process of updating this webservice to use TLS1.2, which seems to force the company to use a different algorithm.
","396","<.net><web-services><diffie-hellman>","1","1","1","2017-01-25 20:47:12","41861379","0","","","","","2017-01-25 20:47:12",""
"29315955","Diffie-Hellman Parameters and safety","I Want to create my own safe connection for a VOIP app.
Now I am looking into key exchange which seems to be much more Tricky than encrypting/decrypting.
Are there any better approaches than Diffie-Hellman in practice ?
I understand the concept of Diffie-Hellman but I think it needs the right values to be safe since with natural numbers it could be easily be guessed. How can I get those values using python, what are they and is it really safe from key guessing?
Please help me with some background informations / inspiring.
","Diffie-Hellman key exchange, also called exponential key exchange, is a method of digital encryption that uses numbers raised to specific powers to produce decryption keys on the basis of components that are never directly transmitted, making the task of a would-be code breaker mathematically overwhelming.
The most serious limitation of Diffie-Hellman in its basic or ""pure"" form is the lack of authentication. Communications using Diffie-Hellman all by itself are vulnerable to man in the middle attacks. Ideally, Diffie-Hellman should be used in conjunction with a recognized authentication method such as digital signatures to verify the identities of the users over the public communications medium.
More light on the topic is available below:
1 link 1
2 link 2
3 link 3
","395","<python><diffie-hellman>","0","1","3","2017-11-15 08:34:46","","1","","3051961","","2015-03-28 10:48:16","2015-03-28 10:16:30",""
"29315955","Diffie-Hellman Parameters and safety","I Want to create my own safe connection for a VOIP app.
Now I am looking into key exchange which seems to be much more Tricky than encrypting/decrypting.
Are there any better approaches than Diffie-Hellman in practice ?
I understand the concept of Diffie-Hellman but I think it needs the right values to be safe since with natural numbers it could be easily be guessed. How can I get those values using python, what are they and is it really safe from key guessing?
Please help me with some background informations / inspiring.
","DH is fine for this purpose, just make to sure to use 2048 bit keys or more.
However for VoIP the standards are TLS with SRTP/zrtp so it would be better if you would implement these. With DH you loose compatibility and will introduce a lot of complications. Also note that DH is only for key exchange, so you will need something also for the encryption itself. With TLS you could handle all these in one step by using a well know implementation instead to write your own encryption stack from scratch.
","395","<python><diffie-hellman>","0","0","3","2017-11-15 08:34:46","","1","","3051961","","2015-03-28 10:48:16","2015-03-28 10:16:30",""
"29315955","Diffie-Hellman Parameters and safety","I Want to create my own safe connection for a VOIP app.
Now I am looking into key exchange which seems to be much more Tricky than encrypting/decrypting.
Are there any better approaches than Diffie-Hellman in practice ?
I understand the concept of Diffie-Hellman but I think it needs the right values to be safe since with natural numbers it could be easily be guessed. How can I get those values using python, what are they and is it really safe from key guessing?
Please help me with some background informations / inspiring.
","Diffie-Hellman is a key exchange algorithm. So Anyone can access your public parameters. You can use safety except declassified private parameters. It's so important create sharedkey safety. If you want to more secure system, try forward-secrecy
","395","<python><diffie-hellman>","0","0","3","2017-11-15 08:34:46","","1","","3051961","","2015-03-28 10:48:16","2015-03-28 10:16:30",""
"33851539","Can KeyAgreement be used without AlgorithmParameterSpec?","In my Android application working with SpongyCastle, I want to perform ECDH Key Exchange using a specific elliptic curve (prime192v1) and I am using this code to generate byte[] representation of private and public params:
        try{
            KeyPairGenerator g = KeyPairGenerator.getInstance(""ECDH"", ""SC"");

            org.spongycastle.jce.spec.ECParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec(""prime192v1"");
            g.initialize(ecSpec, new SecureRandom());

            KeyPair kp1 = g.generateKeyPair();
            KeyPair kp2 = g.generateKeyPair();

            // Alice generated this
            byte[] privK1 = kp1.getPrivate().getEncoded();
            byte[] pubK1= kp1.getPrivate().getEncoded();

            // Bob generated this
            byte[] privK2 = kp2.getPrivate().getEncoded();
            byte[] pubK2= kp2.getPrivate().getEncoded();

        }catch(Exception e)
        {
            Log.e(LOGTAG, ""Exception caught in ECDHInit function"");
        }

now lets assume Alice and Bob save their private keys locally, exchange pubK1 and pubK2 and want to proceed with setting a shared secret (they have both keys now in byte[] format). I will describe only case of Alice, as for Bob this is identical:
KeyAgreement keyAgreement = KeyAgreement.getInstance(""ECDH"", ""SC"");

PrivateKey privateKey = KeyFactory.getInstance(""ECDH"", ""SC"").generatePrivate(new PKCS8EncodedKeySpec(privK1));
PublicKey publicKey = KeyFactory.getInstance(""ECDH"", ""SC"").generatePublic(new X509EncodedKeySpec(pubK2));

Here comes my question - 
using the following code, I manage to get same shared secret for both Alice and Bob                 
keyAgreement.init(privateKey);
keyAgreement.doPhase(publicKey, true);

byte[] sharedSecret = SHA256(keyAgreement.generateSecret());

but I specify nowhere my special curve prime192v1
If I try to supply this in this way:
org.spongycastle.jce.spec.ECParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec(""prime192v1"");

keyAgreement.init(privateKey, ecSpec);
keyAgreement.doPhase(publicKey, true);

byte[] sharedSecret = SHA256(keyAgreement.generateSecret());

an Exception is thrown saying
java.security.InvalidAlgorithmParameterException: No algorithm parameters supported

Why can't I supply my desired parameter? Does the KeyAgreement somehow deduce this from the private key?
Thanks!
","So it turns out I had the answer right there in front of me in the Android Studio debugger. Upon inspecting PrivateKey object I found internal member privateKey.ecSpec which contains all the details of selected curve. So passing arguments is unnecessary and throws an error, use the code without providing additional ecSpec
","381","<java><android><elliptic-curve><diffie-hellman><spongycastle>","1","1","1","2015-11-22 04:22:07","33851560","0","1","","","","2015-11-22 04:18:12",""
"19180835","How to generate certificate or key store for server using annoymous diffie-hellmen algorithm","I want to create certificate using Anonymous diffie Hellman algorithms as need to create HTTPS web service with no authentication to perform.
Need help how can i configure certificate for Server and also steps to set up tomcat server.
","By definition, anonymous DH cipher suites don't require authentication of either parties. Hence, they don't use a certificate at all. You don't need to set a keystore in this case. It doesn't make any sense to create a certificate for anonymous DH.
(The lack of keystore is in fact one of the cause for the ""no cipher suites in common"" message when you're not using anonymous DH cipher suites, which are sensibly disabled by default.)
If you want to use anonymous DH cipher suites, it's the cipher suites you need to configure (see the names with anon in the list of cipher suites disabled by default).
Note that they're disabled by default for a good reason: they make the connection vulnerable to MITM attacks. If you want the connection to be secure, you should always at least have the client verify the identity of the server (by configuring a certificate on the server).
","377","<tomcat><soap><ssl><wsdl><diffie-hellman>","0","1","1","2013-10-04 13:47:39","","0","","","","","2013-10-04 12:10:13",""
"47169665","How to compute a shared secret for 2 users in algorithm Diffie Hellman using openssl lib c language?","I need some help with algorithm Diffie Hellman in openssl
I have prime number (p), generator (g), private key of user A and public key of user B. I need to compute the shared key. I wrote this code, but the code is executed till this line
 int dhSize = DH_size(dh->priv_key);

Here is the full code:
#include <stdio.h>
#include <openssl/dh.h>

const char* userA_PrivateKey = ""90ff0"";
const char* userB_PublicKey = ""9d1a59"";
const char* p = ""66c2fa"";
const char* g = ""2"";

int main(void)
{
    DH *dh = DH_new();

    BN_dec2bn(&dh->g, g);
    BN_hex2bn(&dh->p, p);
    BN_hex2bn(&dh->priv_key, userA_PrivateKey);

    BIGNUM *pubKeyUserB = NULL;
    BN_dec2bn(&pubKeyUserB, userB_PublicKey);

    //Compute the shared secret
    int secret_size;
    unsigned char *secret;
    printf("" Compute DH_size \n"");
    int dhSize = DH_size(dh->priv_key);
    printf("" dhSize = %d \n""); //NOT EXECUTED 
    secret = OPENSSL_malloc(sizeof(unsigned char) * dhSize);

    if(0 > (secret_size = DH_compute_key(secret, pubKeyUserB, dh->priv_key)))
    {
        printf(""error \n"");
    }

    return 0;
}

I have two problems:
1) printf, that prints dhSize is not executed at all
2) I am not sure if I set values g, p, priv key correctly ? Will the function DH_compute_key use my g and p ? 
","You are making silly mistakes:

dhSize should be typed as DH_size (~line 24)
and DH_size function calculates size of struct DH given a const struct DH * you are passing it dh->priv_key instead of passing it dh (~line 28)
Similar mistake in use of DH_compute_key (~line 28) third argument should be dh not dh->priv_key. 

Please fix accordingly and try again
","376","<c><algorithm><openssl><diffie-hellman>","1","0","1","2017-11-08 03:05:51","47170927","3","","","","","2017-11-08 00:31:28",""
"28896164","Diffie-Hellman Server and Client Mismatch Computed Shared Key","I am trying to implement a Diffie-Hellman key sharing between Linux (client side) using openssl, and Win 7 (server side) using Mentalis DiffieHellman C# package (downloaded from http://www.mentalis.org)
Client side:
    DH *client_key = DH_new();
int rc = DH_generate_parameters_ex(client_key, 1024, DH_GENERATOR_2, NULL);

rc = DH_generate_key(client_key) code:

// Example of the client->pub_key (128 bytes):

//""0E9948EB9B589678805A0CCD46FAF6D834478571F9C8046AB67C06B2B091DD63E752B4B48565F87CBED02E1B150064636C36BDFC3
//570CD7EC6D90BC1CEA1AC303F335592286B30BD6D42714EF50C78649A2E5F6C41BD9CE625C2CF20DF89F762253C0954CBFCCDE4ED
//728330C1378545EBE746FB04F4935E2251B17F577C87FE""

int generated_key_length = BN_num_bytes(client_key->pub_key);

unsigned char *share_key = (unsigned char *)calloc(DH_size(client_key));

// Share the client public key to the server

char *pub_key_string = BN_bn2hex(client_key->pub_key);

// Example of the server_pubkey (128 bytes):
//""3D69F1371BAD271518D5D51978CBEBAD463E743F450937600F15037BA9B134F7008065A337DDBACD9C7DE58188F0DCE4D546FA8591
//18A2C791EBABA751A2774E57831A5AE9F3C5FAA192A11AA170EC4B5BF23CF70354A865AA5CDDFCC50A364B6835AA0652C1D498A079
//F994C8004E0FC9C3727EFAAD8AFF7786EDD5B945454F""         

rc = DH_compute_key(share_key, server_pubkey, client_key):

// Example of the computed share_key (128 bytes):
 //""6B1387C957BBC5BE7EFA8B44E2DA2306CBD54838A94EB187532FEFC2EAE0D19EFA42DAA1330F9D32676E986959DC18DC98EBCD1703
//2B2B4B034E88E8270EAB766B0479469E2C1CA2B49D2DB47194D606038958CA683297B1982A571825631B55BCED80B9599DE64D7DA7
//CD7CECDB6D1B522641C95DAA1C859380A3D623515A44""         

free(secret_key);

DH_free(client_key);

// **End of Client side code!**

**Server side (C#) code:**

using Org.Mentalis.Security.Cryptography;

// Create a new DH instance
DiffieHellman dhServer = new DiffieHellmanManaged();

// Generate the public key of the first DH instance
byte[] server_pubkey = dhServer.CreateKeyExchange();
// And, hex encode server_pubkey and send it to the client side

// Decode the hex-encoded client_pubkey to get the share_key
byte[] sharedKey = dhServer.DecryptKeyExchange(client_pubkey); 

// **End of Server side code!**

Based on the above implementations, I never success in getting the computed share_keys (one from the client side, 
and the other from the server side) the same! What am I missing or doing wrong?
I would also like to ask whether there is other ""c# packages""/methods that can be used at the Server side to do DH key sharing with openssl? Many many thanks.
","","371","<c#><openssl><diffie-hellman>","1","","0","2015-03-06 19:13:33","","2","","608639","","2015-03-06 19:13:33","2015-03-06 09:49:13",""
"15851134","Java.Security.Key.getEncoded() OpenSSL DH Equivalent","How can I achieve the same result in C with OpenSSL as the getEncoded() Method produces? 
It is required for a Diffie-Hellman Key Agreement and I have to send my public key to a java server (But I think the getEncoded() Method not only encodes the Public Key but also the parameters which should be also required for my case)
My current status is that I have a OpenSSL DH Object which contains the PublicKey and p&g as BigNums.
Would bey very great if anyone knows how to do that.
","If encoded DH object means DER encoded, then i2d_DHParams can help you. It is given here.
","366","<java><c><openssl><diffie-hellman>","1","1","1","2013-04-06 13:59:08","15851840","2","","","","","2013-04-06 12:46:44",""
"33010209","Java 1.8 Diffie Hellman Group 14 returns InvalidAlgorithmException","I am trying to use RFC-3526 parameters for Diffie Hellman Group 14 (2048 bit key) with default generator from the RFC set to 2.
Attached is the codes I am trying out:
KeyPairGenerator hostKeyGen = KeyPairGenerator.getInstance(""DH"");
DHParameterSpec dhGrp14KeySpec = new DHParameterSpec(new BigInteger(DH_GRP_14_P), BigInteger.valueOf(DH_GRP_14_G));
System.out.println(""\tP ("" + DH_GRP_14_P.length + ""): "" + dhGrp14KeySpec.getP());
System.out.println(""\tG: "" + dhGrp14KeySpec.getG());
hostKeyGen.initialize(dhGrp14KeySpec);
System.out.println(""Creating Host DH private key..."");
KeyPair hostKey = hostKeyGen.generateKeyPair();
System.out.println(""Initiating host side Schannel..."");
KeyAgreement schannel = KeyAgreement.getInstance(""DH"");
schannel.init(hostKey.getPrivate());

The error I am getting is:
java.security.InvalidAlgorithmParameterException: Prime size must be multiple of 64, and can only range from 512 to 2048 (inclusive)
    at com.sun.crypto.provider.DHKeyPairGenerator.initialize(DHKeyPairGenerator.java:120)
    at java.security.KeyPairGenerator$Delegate.initialize(KeyPairGenerator.java:657)
    at java.security.KeyPairGenerator.initialize(KeyPairGenerator.java:399)
    at dhtest.SchannelDHTest.main(SchannelDHTest.java:124)

The DH_GRP_14_P byte array (as per RFC-3526 Grp 14 specs):
(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,
(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xC9, (byte) 0x0F,
(byte) 0xDA, (byte) 0xA2, (byte) 0x21, (byte) 0x68, (byte) 0xC2,
(byte) 0x34, (byte) 0xC4, (byte) 0xC6, (byte) 0x62, (byte) 0x8B,
(byte) 0x80, (byte) 0xDC, (byte) 0x1C, (byte) 0xD1, (byte) 0x29,
(byte) 0x02, (byte) 0x4E, (byte) 0x08, (byte) 0x8A, (byte) 0x67,
(byte) 0xCC, (byte) 0x74, (byte) 0x02, (byte) 0x0B, (byte) 0xBE,
(byte) 0xA6, (byte) 0x3B, (byte) 0x13, (byte) 0x9B, (byte) 0x22,
(byte) 0x51, (byte) 0x4A, (byte) 0x08, (byte) 0x79, (byte) 0x8E,
(byte) 0x34, (byte) 0x04, (byte) 0xDD, (byte) 0xEF, (byte) 0x95,
(byte) 0x19, (byte) 0xB3, (byte) 0xCD, (byte) 0x3A, (byte) 0x43,
(byte) 0x1B, (byte) 0x30, (byte) 0x2B, (byte) 0x0A, (byte) 0x6D,
(byte) 0xF2, (byte) 0x5F, (byte) 0x14, (byte) 0x37, (byte) 0x4F,
(byte) 0xE1, (byte) 0x35, (byte) 0x6D, (byte) 0x6D, (byte) 0x51,
(byte) 0xC2, (byte) 0x45, (byte) 0xE4, (byte) 0x85, (byte) 0xB5,
(byte) 0x76, (byte) 0x62, (byte) 0x5E, (byte) 0x7E, (byte) 0xC6,
(byte) 0xF4, (byte) 0x4C, (byte) 0x42, (byte) 0xE9, (byte) 0xA6,
(byte) 0x37, (byte) 0xED, (byte) 0x6B, (byte) 0x0B, (byte) 0xFF,
(byte) 0x5C, (byte) 0xB6, (byte) 0xF4, (byte) 0x06, (byte) 0xB7,
(byte) 0xED, (byte) 0xEE, (byte) 0x38, (byte) 0x6B, (byte) 0xFB,
(byte) 0x5A, (byte) 0x89, (byte) 0x9F, (byte) 0xA5, (byte) 0xAE,
(byte) 0x9F, (byte) 0x24, (byte) 0x11, (byte) 0x7C, (byte) 0x4B,
(byte) 0x1F, (byte) 0xE6, (byte) 0x49, (byte) 0x28, (byte) 0x66,
(byte) 0x51, (byte) 0xEC, (byte) 0xE4, (byte) 0x5B, (byte) 0x3D,
(byte) 0xC2, (byte) 0x00, (byte) 0x7C, (byte) 0xB8, (byte) 0xA1,
(byte) 0x63, (byte) 0xBF, (byte) 0x05, (byte) 0x98, (byte) 0xDA,
(byte) 0x48, (byte) 0x36, (byte) 0x1C, (byte) 0x55, (byte) 0xD3,
(byte) 0x9A, (byte) 0x69, (byte) 0x16, (byte) 0x3F, (byte) 0xA8,
(byte) 0xFD, (byte) 0x24, (byte) 0xCF, (byte) 0x5F, (byte) 0x83,
(byte) 0x65, (byte) 0x5D, (byte) 0x23, (byte) 0xDC, (byte) 0xA3,
(byte) 0xAD, (byte) 0x96, (byte) 0x1C, (byte) 0x62, (byte) 0xF3,
(byte) 0x56, (byte) 0x20, (byte) 0x85, (byte) 0x52, (byte) 0xBB,
(byte) 0x9E, (byte) 0xD5, (byte) 0x29, (byte) 0x07, (byte) 0x70,
(byte) 0x96, (byte) 0x96, (byte) 0x6D, (byte) 0x67, (byte) 0x0C,
(byte) 0x35, (byte) 0x4E, (byte) 0x4A, (byte) 0xBC, (byte) 0x98,
(byte) 0x04, (byte) 0xF1, (byte) 0x74, (byte) 0x6C, (byte) 0x08,
(byte) 0xCA, (byte) 0x18, (byte) 0x21, (byte) 0x7C, (byte) 0x32,
(byte) 0x90, (byte) 0x5E, (byte) 0x46, (byte) 0x2E, (byte) 0x36,
(byte) 0xCE, (byte) 0x3B, (byte) 0xE3, (byte) 0x9E, (byte) 0x77,
(byte) 0x2C, (byte) 0x18, (byte) 0x0E, (byte) 0x86, (byte) 0x03,
(byte) 0x9B, (byte) 0x27, (byte) 0x83, (byte) 0xA2, (byte) 0xEC,
(byte) 0x07, (byte) 0xA2, (byte) 0x8F, (byte) 0xB5, (byte) 0xC5,
(byte) 0x5D, (byte) 0xF0, (byte) 0x6F, (byte) 0x4C, (byte) 0x52,
(byte) 0xC9, (byte) 0xDE, (byte) 0x2B, (byte) 0xCB, (byte) 0xF6,
(byte) 0x95, (byte) 0x58, (byte) 0x17, (byte) 0x18, (byte) 0x39,
(byte) 0x95, (byte) 0x49, (byte) 0x7C, (byte) 0xEA, (byte) 0x95,
(byte) 0x6A, (byte) 0xE5, (byte) 0x15, (byte) 0xD2, (byte) 0x26,
(byte) 0x18, (byte) 0x98, (byte) 0xFA, (byte) 0x05, (byte) 0x10,
(byte) 0x15, (byte) 0x72, (byte) 0x8E, (byte) 0x5A, (byte) 0x8A,
(byte) 0xAC, (byte) 0xAA, (byte) 0x68, (byte) 0xFF, (byte) 0xFF,
(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,
(byte) 0xFF

I counted the bytes and they were exactly256 bytes (2048 bit) Prime. How do I resolve this ?
","new BigInteger(DH_GRP_14_P).bitLength() was 1982. Thats not how you construct a BigInteger from hexadecimal numbers.
This should work for you:
import java.math.BigInteger;
import java.security.KeyPair;
import java.security.KeyPairGenerator;

import javax.crypto.KeyAgreement;
import javax.crypto.spec.DHParameterSpec;

public class Main {

    public static void main(String[] args) throws Exception {
        KeyPairGenerator hostKeyGen = KeyPairGenerator.getInstance(""DH"");
        BigInteger p = new BigInteger(modp2048, 16);
        BigInteger g = BigInteger.valueOf(2L);

        System.out.println(""p bits: ""+p.bitLength());
        System.out.println(""g bits: ""+g.bitLength());

        DHParameterSpec dhGrp14KeySpec = new DHParameterSpec(p, p);
        hostKeyGen.initialize(dhGrp14KeySpec);
        System.out.println(""Creating Host DH private key..."");
        KeyPair hostKey = hostKeyGen.generateKeyPair();
        System.out.println(""Initiating host side Schannel..."");
        KeyAgreement schannel = KeyAgreement.getInstance(""DH"");
        schannel.init(hostKey.getPrivate());
    }


    private static final String modp2048 = (
            ""FFFFFFFF FFFFFFFF C90FDAA2 2168C234 C4C6628B 80DC1CD1"" +
            ""29024E08 8A67CC74 020BBEA6 3B139B22 514A0879 8E3404DD"" +
            ""EF9519B3 CD3A431B 302B0A6D F25F1437 4FE1356D 6D51C245"" +
            ""E485B576 625E7EC6 F44C42E9 A637ED6B 0BFF5CB6 F406B7ED"" +
            ""EE386BFB 5A899FA5 AE9F2411 7C4B1FE6 49286651 ECE45B3D"" +
            ""C2007CB8 A163BF05 98DA4836 1C55D39A 69163FA8 FD24CF5F"" +
            ""83655D23 DCA3AD96 1C62F356 208552BB 9ED52907 7096966D"" +
            ""670C354E 4ABC9804 F1746C08 CA18217C 32905E46 2E36CE3B"" +
            ""E39E772C 180E8603 9B2783A2 EC07A28F B5C55DF0 6F4C52C9"" +
            ""DE2BCBF6 95581718 3995497C EA956AE5 15D22618 98FA0510"" +
            ""15728E5A 8AACAA68 FFFFFFFF FFFFFFFF"")
            .replaceAll(""\\s"", """");

}

","364","<java><diffie-hellman>","1","4","2","2015-10-09 19:19:46","33011923","1","2","","","","2015-10-08 08:13:27",""
"33010209","Java 1.8 Diffie Hellman Group 14 returns InvalidAlgorithmException","I am trying to use RFC-3526 parameters for Diffie Hellman Group 14 (2048 bit key) with default generator from the RFC set to 2.
Attached is the codes I am trying out:
KeyPairGenerator hostKeyGen = KeyPairGenerator.getInstance(""DH"");
DHParameterSpec dhGrp14KeySpec = new DHParameterSpec(new BigInteger(DH_GRP_14_P), BigInteger.valueOf(DH_GRP_14_G));
System.out.println(""\tP ("" + DH_GRP_14_P.length + ""): "" + dhGrp14KeySpec.getP());
System.out.println(""\tG: "" + dhGrp14KeySpec.getG());
hostKeyGen.initialize(dhGrp14KeySpec);
System.out.println(""Creating Host DH private key..."");
KeyPair hostKey = hostKeyGen.generateKeyPair();
System.out.println(""Initiating host side Schannel..."");
KeyAgreement schannel = KeyAgreement.getInstance(""DH"");
schannel.init(hostKey.getPrivate());

The error I am getting is:
java.security.InvalidAlgorithmParameterException: Prime size must be multiple of 64, and can only range from 512 to 2048 (inclusive)
    at com.sun.crypto.provider.DHKeyPairGenerator.initialize(DHKeyPairGenerator.java:120)
    at java.security.KeyPairGenerator$Delegate.initialize(KeyPairGenerator.java:657)
    at java.security.KeyPairGenerator.initialize(KeyPairGenerator.java:399)
    at dhtest.SchannelDHTest.main(SchannelDHTest.java:124)

The DH_GRP_14_P byte array (as per RFC-3526 Grp 14 specs):
(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,
(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xC9, (byte) 0x0F,
(byte) 0xDA, (byte) 0xA2, (byte) 0x21, (byte) 0x68, (byte) 0xC2,
(byte) 0x34, (byte) 0xC4, (byte) 0xC6, (byte) 0x62, (byte) 0x8B,
(byte) 0x80, (byte) 0xDC, (byte) 0x1C, (byte) 0xD1, (byte) 0x29,
(byte) 0x02, (byte) 0x4E, (byte) 0x08, (byte) 0x8A, (byte) 0x67,
(byte) 0xCC, (byte) 0x74, (byte) 0x02, (byte) 0x0B, (byte) 0xBE,
(byte) 0xA6, (byte) 0x3B, (byte) 0x13, (byte) 0x9B, (byte) 0x22,
(byte) 0x51, (byte) 0x4A, (byte) 0x08, (byte) 0x79, (byte) 0x8E,
(byte) 0x34, (byte) 0x04, (byte) 0xDD, (byte) 0xEF, (byte) 0x95,
(byte) 0x19, (byte) 0xB3, (byte) 0xCD, (byte) 0x3A, (byte) 0x43,
(byte) 0x1B, (byte) 0x30, (byte) 0x2B, (byte) 0x0A, (byte) 0x6D,
(byte) 0xF2, (byte) 0x5F, (byte) 0x14, (byte) 0x37, (byte) 0x4F,
(byte) 0xE1, (byte) 0x35, (byte) 0x6D, (byte) 0x6D, (byte) 0x51,
(byte) 0xC2, (byte) 0x45, (byte) 0xE4, (byte) 0x85, (byte) 0xB5,
(byte) 0x76, (byte) 0x62, (byte) 0x5E, (byte) 0x7E, (byte) 0xC6,
(byte) 0xF4, (byte) 0x4C, (byte) 0x42, (byte) 0xE9, (byte) 0xA6,
(byte) 0x37, (byte) 0xED, (byte) 0x6B, (byte) 0x0B, (byte) 0xFF,
(byte) 0x5C, (byte) 0xB6, (byte) 0xF4, (byte) 0x06, (byte) 0xB7,
(byte) 0xED, (byte) 0xEE, (byte) 0x38, (byte) 0x6B, (byte) 0xFB,
(byte) 0x5A, (byte) 0x89, (byte) 0x9F, (byte) 0xA5, (byte) 0xAE,
(byte) 0x9F, (byte) 0x24, (byte) 0x11, (byte) 0x7C, (byte) 0x4B,
(byte) 0x1F, (byte) 0xE6, (byte) 0x49, (byte) 0x28, (byte) 0x66,
(byte) 0x51, (byte) 0xEC, (byte) 0xE4, (byte) 0x5B, (byte) 0x3D,
(byte) 0xC2, (byte) 0x00, (byte) 0x7C, (byte) 0xB8, (byte) 0xA1,
(byte) 0x63, (byte) 0xBF, (byte) 0x05, (byte) 0x98, (byte) 0xDA,
(byte) 0x48, (byte) 0x36, (byte) 0x1C, (byte) 0x55, (byte) 0xD3,
(byte) 0x9A, (byte) 0x69, (byte) 0x16, (byte) 0x3F, (byte) 0xA8,
(byte) 0xFD, (byte) 0x24, (byte) 0xCF, (byte) 0x5F, (byte) 0x83,
(byte) 0x65, (byte) 0x5D, (byte) 0x23, (byte) 0xDC, (byte) 0xA3,
(byte) 0xAD, (byte) 0x96, (byte) 0x1C, (byte) 0x62, (byte) 0xF3,
(byte) 0x56, (byte) 0x20, (byte) 0x85, (byte) 0x52, (byte) 0xBB,
(byte) 0x9E, (byte) 0xD5, (byte) 0x29, (byte) 0x07, (byte) 0x70,
(byte) 0x96, (byte) 0x96, (byte) 0x6D, (byte) 0x67, (byte) 0x0C,
(byte) 0x35, (byte) 0x4E, (byte) 0x4A, (byte) 0xBC, (byte) 0x98,
(byte) 0x04, (byte) 0xF1, (byte) 0x74, (byte) 0x6C, (byte) 0x08,
(byte) 0xCA, (byte) 0x18, (byte) 0x21, (byte) 0x7C, (byte) 0x32,
(byte) 0x90, (byte) 0x5E, (byte) 0x46, (byte) 0x2E, (byte) 0x36,
(byte) 0xCE, (byte) 0x3B, (byte) 0xE3, (byte) 0x9E, (byte) 0x77,
(byte) 0x2C, (byte) 0x18, (byte) 0x0E, (byte) 0x86, (byte) 0x03,
(byte) 0x9B, (byte) 0x27, (byte) 0x83, (byte) 0xA2, (byte) 0xEC,
(byte) 0x07, (byte) 0xA2, (byte) 0x8F, (byte) 0xB5, (byte) 0xC5,
(byte) 0x5D, (byte) 0xF0, (byte) 0x6F, (byte) 0x4C, (byte) 0x52,
(byte) 0xC9, (byte) 0xDE, (byte) 0x2B, (byte) 0xCB, (byte) 0xF6,
(byte) 0x95, (byte) 0x58, (byte) 0x17, (byte) 0x18, (byte) 0x39,
(byte) 0x95, (byte) 0x49, (byte) 0x7C, (byte) 0xEA, (byte) 0x95,
(byte) 0x6A, (byte) 0xE5, (byte) 0x15, (byte) 0xD2, (byte) 0x26,
(byte) 0x18, (byte) 0x98, (byte) 0xFA, (byte) 0x05, (byte) 0x10,
(byte) 0x15, (byte) 0x72, (byte) 0x8E, (byte) 0x5A, (byte) 0x8A,
(byte) 0xAC, (byte) 0xAA, (byte) 0x68, (byte) 0xFF, (byte) 0xFF,
(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,
(byte) 0xFF

I counted the bytes and they were exactly256 bytes (2048 bit) Prime. How do I resolve this ?
","The problem is that you are not using the correct BigInteger constructor. The BigInteger byte array constructor is designed to reconstruct a BigInteger from the output of BigInteger.toByteArray(). Java represents BigIntegers in byte arrays using something similar to a twos-complement scheme. As a result, a negative BigInteger is represented by a byte array whose high order byte (the 0'th byte of the array) is >= 128. A positive BigInteger is always represented by a byte array whose high-order byte is < 128. If the true high-order byte of a positive BigInteger would be >= 128 then BigInteger.toByteArray() emits a byte array with a leading 0 byte.
Thus you have two ways to solve your problem. You can prepend a zero byte to your array and use the same BigInteger constructor you have been using, or you can instead use the BigInteger sign-magnitude constructor with your byte array as is.
Here is an example using your byte array showing the differences.
import java.math.BigInteger;

public class DhGroup14Toy {

    private static final byte[] DH_GRP_14_P = 
        {(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,
            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xC9, (byte) 0x0F,
            (byte) 0xDA, (byte) 0xA2, (byte) 0x21, (byte) 0x68, (byte) 0xC2,
            (byte) 0x34, (byte) 0xC4, (byte) 0xC6, (byte) 0x62, (byte) 0x8B,
            (byte) 0x80, (byte) 0xDC, (byte) 0x1C, (byte) 0xD1, (byte) 0x29,
            (byte) 0x02, (byte) 0x4E, (byte) 0x08, (byte) 0x8A, (byte) 0x67,
            (byte) 0xCC, (byte) 0x74, (byte) 0x02, (byte) 0x0B, (byte) 0xBE,
            (byte) 0xA6, (byte) 0x3B, (byte) 0x13, (byte) 0x9B, (byte) 0x22,
            (byte) 0x51, (byte) 0x4A, (byte) 0x08, (byte) 0x79, (byte) 0x8E,
            (byte) 0x34, (byte) 0x04, (byte) 0xDD, (byte) 0xEF, (byte) 0x95,
            (byte) 0x19, (byte) 0xB3, (byte) 0xCD, (byte) 0x3A, (byte) 0x43,
            (byte) 0x1B, (byte) 0x30, (byte) 0x2B, (byte) 0x0A, (byte) 0x6D,
            (byte) 0xF2, (byte) 0x5F, (byte) 0x14, (byte) 0x37, (byte) 0x4F,
            (byte) 0xE1, (byte) 0x35, (byte) 0x6D, (byte) 0x6D, (byte) 0x51,
            (byte) 0xC2, (byte) 0x45, (byte) 0xE4, (byte) 0x85, (byte) 0xB5,
            (byte) 0x76, (byte) 0x62, (byte) 0x5E, (byte) 0x7E, (byte) 0xC6,
            (byte) 0xF4, (byte) 0x4C, (byte) 0x42, (byte) 0xE9, (byte) 0xA6,
            (byte) 0x37, (byte) 0xED, (byte) 0x6B, (byte) 0x0B, (byte) 0xFF,
            (byte) 0x5C, (byte) 0xB6, (byte) 0xF4, (byte) 0x06, (byte) 0xB7,
            (byte) 0xED, (byte) 0xEE, (byte) 0x38, (byte) 0x6B, (byte) 0xFB,
            (byte) 0x5A, (byte) 0x89, (byte) 0x9F, (byte) 0xA5, (byte) 0xAE,
            (byte) 0x9F, (byte) 0x24, (byte) 0x11, (byte) 0x7C, (byte) 0x4B,
            (byte) 0x1F, (byte) 0xE6, (byte) 0x49, (byte) 0x28, (byte) 0x66,
            (byte) 0x51, (byte) 0xEC, (byte) 0xE4, (byte) 0x5B, (byte) 0x3D,
            (byte) 0xC2, (byte) 0x00, (byte) 0x7C, (byte) 0xB8, (byte) 0xA1,
            (byte) 0x63, (byte) 0xBF, (byte) 0x05, (byte) 0x98, (byte) 0xDA,
            (byte) 0x48, (byte) 0x36, (byte) 0x1C, (byte) 0x55, (byte) 0xD3,
            (byte) 0x9A, (byte) 0x69, (byte) 0x16, (byte) 0x3F, (byte) 0xA8,
            (byte) 0xFD, (byte) 0x24, (byte) 0xCF, (byte) 0x5F, (byte) 0x83,
            (byte) 0x65, (byte) 0x5D, (byte) 0x23, (byte) 0xDC, (byte) 0xA3,
            (byte) 0xAD, (byte) 0x96, (byte) 0x1C, (byte) 0x62, (byte) 0xF3,
            (byte) 0x56, (byte) 0x20, (byte) 0x85, (byte) 0x52, (byte) 0xBB,
            (byte) 0x9E, (byte) 0xD5, (byte) 0x29, (byte) 0x07, (byte) 0x70,
            (byte) 0x96, (byte) 0x96, (byte) 0x6D, (byte) 0x67, (byte) 0x0C,
            (byte) 0x35, (byte) 0x4E, (byte) 0x4A, (byte) 0xBC, (byte) 0x98,
            (byte) 0x04, (byte) 0xF1, (byte) 0x74, (byte) 0x6C, (byte) 0x08,
            (byte) 0xCA, (byte) 0x18, (byte) 0x21, (byte) 0x7C, (byte) 0x32,
            (byte) 0x90, (byte) 0x5E, (byte) 0x46, (byte) 0x2E, (byte) 0x36,
            (byte) 0xCE, (byte) 0x3B, (byte) 0xE3, (byte) 0x9E, (byte) 0x77,
            (byte) 0x2C, (byte) 0x18, (byte) 0x0E, (byte) 0x86, (byte) 0x03,
            (byte) 0x9B, (byte) 0x27, (byte) 0x83, (byte) 0xA2, (byte) 0xEC,
            (byte) 0x07, (byte) 0xA2, (byte) 0x8F, (byte) 0xB5, (byte) 0xC5,
            (byte) 0x5D, (byte) 0xF0, (byte) 0x6F, (byte) 0x4C, (byte) 0x52,
            (byte) 0xC9, (byte) 0xDE, (byte) 0x2B, (byte) 0xCB, (byte) 0xF6,
            (byte) 0x95, (byte) 0x58, (byte) 0x17, (byte) 0x18, (byte) 0x39,
            (byte) 0x95, (byte) 0x49, (byte) 0x7C, (byte) 0xEA, (byte) 0x95,
            (byte) 0x6A, (byte) 0xE5, (byte) 0x15, (byte) 0xD2, (byte) 0x26,
            (byte) 0x18, (byte) 0x98, (byte) 0xFA, (byte) 0x05, (byte) 0x10,
            (byte) 0x15, (byte) 0x72, (byte) 0x8E, (byte) 0x5A, (byte) 0x8A,
            (byte) 0xAC, (byte) 0xAA, (byte) 0x68, (byte) 0xFF, (byte) 0xFF,
            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,
            (byte) 0xFF};

    public static void main(String[] args) throws Exception {

        BigInteger bad1 = new BigInteger(DH_GRP_14_P);
        BigInteger good1 = new BigInteger(1, DH_GRP_14_P);
        byte [] augmentedBytes = new byte[DH_GRP_14_P.length + 1];
        System.arraycopy(DH_GRP_14_P, 0, augmentedBytes, 1, DH_GRP_14_P.length);
        BigInteger good2 = new BigInteger(augmentedBytes);
        System.out.println(bad1);
        System.out.println(good1);
        System.out.println(good1.equals(good2));
        System.out.println(good1.isProbablePrime(50));

    }

}

The output is:
-375962762246123711626161428575244919288335676123913432233536670577511994159344116570816223012193827739513685941295892241329166200826129908455464852399221571479961954311415857911811448906479927170863572543208032916411471816282939929662608171512069523761896175670948807549496521472891523674634075413613438850952413260397488155494376493989845498917437341434297119530075724469618920963199914531774956492590825946261921832765452432767164403516209782999137096145451001079860465649681054514172614217905576760949024270284588083855940299806145693407383904354238605196666010342535176157644001104014235140097
32317006071311007300338913926423828248817941241140239112842009751400741706634354222619689417363569347117901737909704191754605873209195028853758986185622153212175412514901774520270235796078236248884246189477587641105928646099411723245426622522193230540919037680524235519125679715870117001058055877651038861847280257976054903569732561526167081339361799541336476559160368317896729073178384589680639671900977202194168647225871031411336429319536193471636533209717077448227988588565369208645296636077250268955505928362751121174096972998068410554359584866583291642136218231078990999448652468262416972035911852507045361090559
true
true

","364","<java><diffie-hellman>","1","2","2","2015-10-09 19:19:46","33011923","1","2","","","","2015-10-08 08:13:27",""
"33215740","Glassfish v2 can't find all ciphersuites","I have 2 seemingly identical glassfish installations (installed using the same installer, same OS - SLES 11 SP2 - with the same installed packages and updates, same JRE/ JDK, same web applications deployed in the same way, similar keystores - different PKs, same method of getting/ signing, etc.), however, the two installations have 2 different sets of available ciphersuites. I believe that this is causing Server A to give a ""Server has a weak, ephemeral Diffie-Hellman public key"" error when visiting the application. 
Server A:
Available Common Ciphersuites:
        SSL_RSA_WITH_RC4_128_MD5
        SSL_RSA_WITH_RC4_128_SHA
        TLS_RSA_WITH_AES_128_SHA
        SSL_RSA_WITH_3DES_EDE_CBC_SHA

    Available Ephemeral Diffie-Hellman Ciphersuites:
        TLS_DHE_RSA_WITH_AES_128_CBC_SHA
        SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA
        TLS_DHE_DSS_WITH_AES_128_CBC_SHA
        SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA

    Available 40 bit and 56 bit Ciphersuites:
        SSL_WITH_DES_CBC_SHA
        SSL_DHE_RSA_WITH_DES_CBC_SHA
        SSL_DHE_DES_WITH_DES_CBC_SHA
        SSL_RSA_EXPORT_WITH_RC4_40_MD5
        SSL_RSA_EXPORT_WITH_DES40_CBC_SHA
        SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA
        SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA

    Available ECC Ciphersuites:
    none

Server B:
Available Common Ciphersuites:
        TLS_RSA_WITH_AES_128_CBC_SHA
        SSL_RSA_WITH_RC4_128_SHA
        SSL_RSA_WITH_3DES_EDE_CBC_SHA
        SSL_RSA_WITH_RC4_128_MD5

    Available Ephemeral Diffie-Hellman Ciphersuites:
        TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
        TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
        TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
        TLS_DHE_RSA_WITH_AES_128_CBC_SHA
        TLS_ECDHE_RSA_WITH_RC4_128_SHA
        TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA
        SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA
        TLS_DHE_DSS_WITH_AES_128_CBC_SHA256
        TLS_DHE_DSS_WITH_AES_128_CBC_SHA
        SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA

    Available 40 bit and 56 bit Ciphersuites:
        none

    Available ECC Ciphersuites:
        TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
        TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
        TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256
        TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256
        TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
        TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
        TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA
        TLS_ECDH_RSA_WITH_AES_128_CBC_SHA
        TLS_ECDHE_ECDSA_WITH_RC4_128_SHA
        TLS_ECDHE_RSA_WITH_RC4_128_SHA
        TLS_ECDH_ECDSA_WITH_RC4_128_SHA
        TLS_ECDH_RSA_WITH_RC4_128_SHA
        TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA
        TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA
        TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA
        TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA
        TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
        TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
        TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
        TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
        TLS_ECDHE_ECDSA_WITH_RC4_128_SHA
        TLS_ECDHE_RSA_WITH_RC4_128_SHA
        TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA
        TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA

What could be causing this difference in available ciphersuites?
","It turns out that asenv.conf ({glassfish installation}/config/asenv.conf) was defining AS_JAVA=... and glassfish was using this instead of the version of java defined in the path and JAVA_HOME. Pointing AS_JAVA to the correct jre solved the issue.
","363","<glassfish><certificate><suse><diffie-hellman><glassfish-2.x>","2","1","1","2015-10-27 19:17:00","33376684","0","","2852339","","2015-10-19 14:34:02","2015-10-19 13:29:18",""
"53153749","How to generate Diffie-Hellman parameters in golang","Is there a Golang equivalent to the following openssl command?
openssl dhparam -out dh.pem 2048
I would like to be able to generate Diffie-Hellman parameters with golang and not need to invoke openssl.
","","363","<go><diffie-hellman>","2","","0","2018-11-05 11:44:37","","1","","","","","2018-11-05 11:44:37",""
"9428342","node.js diffie-hellman-group1-sha1 error","I'm trying to implement a diffie-hellman-group1-sha1 key exchange for my node.js implemenation of the SSH protocol.
I want to use the built in crypto module for this. My code:
var hellman = crypto.createDiffieHellman(
""FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1""+
""29024E088A67CC74020BBEA63B139B22514A08798E3404DD""+
""EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245""+
""E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED""+
""EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE65381""+
""FFFFFFFFFFFFFFFF"",""hex"");
hellman.setPrivateKey(crypto.randomBytes(20));
hellman.generateKeys(); 

But node.js can't execute it. It throws the following error:
""Error: Not initialized""
Does anyone know what's going wrong?
","It seems to be a bug of node.js:
https://github.com/joyent/node/issues/2338
Node version 7.5 has included a solution to this, where one can get predefined diffieHellmans using crypto.getDiffieHellman(""modp2"");
It was added in the following push request:
https://github.com/joyent/node/pull/2638
All predefined diffie hellmans can be watched here:
https://gist.github.com/1899353
","361","<node.js><diffie-hellman>","0","0","1","2012-02-24 10:19:45","9429027","0","","","","","2012-02-24 09:29:42",""
"10573344","Can we use Diffie-Hellman public key encrytion algorithm with asp.net login control?","I am trying to find out the internals of login control in asp.net.
Does it uses some Public key encryption algorithm to exchange a key and then uses it for further communication as a symmetric key.
Also do we have our say in choosing the encryption algorithms like for ex i want to specifically use Diffie Hellman with login control. Is it possible and how can i achieve this?
","Disclaimer: I'm no cryptographer...

The Login controls use ASP.Net Membership along with Forms Authentication by default. 
You can create your own auth mechanism
The default hash algorithm used in ASP.net Membership is SHA1. Yes, you have a choice. I've had to use MD5 in a migration project (if memory serves from phpBB to ASP.net) more than a few years back...
(see disclaimer) Elliptic Curve Diffie-Hellman (ECDiffieHellman) info

In config
ECDiffieHellman


hth...
","360","<asp.net><login-control><diffie-hellman>","0","0","1","2012-05-13 19:31:21","10574573","0","","","","","2012-05-13 16:31:33",""
"33198362","Using public key coordinate with Crypto++'s ECDH class","I'm using crypto++ for ECDH key agreement
ECDH.Agree(key, privateKey, outherpublicKey);

Given that for public key I have only X and Y coordinates. How to generate publicKey from this values ?
ECDH.Agree(key,privateKey, getPublicKey(X,Y))

Thanks in advance
","
Given that for public key I have only X and Y coordinates. How to generate publicKey from this values?
ECDH.Agree(key,privateKey, getPublicKey(X,Y))

{x,y} is a point on the curve, but its never been easy to work with it directly.
This is all we really want to do but it does not work. The problem is ECDH::Domain are only domain parameters. The public point and the private exponent are layered on top.
OID curve = ASN1::secp256r1();
DL_GroupParameters_EC<ECP> params(curve);

Integer x(""..."");
Integer y(""..."");
ECP::Point q(x, y);

DL_PublicKey_EC<ECP> pubKey;
pubKey.Initialize(params, q);

ECDH < ECP >::Domain theirs(pubKey);

To further complicate matters, the keys produced by the ECDH protocol are temporary or ephemeral. They are not meant to be persisted; rather, they are meant to be used once and discarded. So Crypto++ does not make it easy to persist them (by, say, providing a DEREncode).
Analysis
To use the {x,y} coordinate, we need to figure out how the library is using it. The ephemeral public and private keys are created in pubkey.h around line 1380. The code for them is below:
void GeneratePrivateKey(RandomNumberGenerator &rng, byte *privateKey)
{
    Integer x(rng, Integer::One(), GetAbstractGroupParameters().GetMaxExponent());
    x.Encode(privateKey, PrivateKeyLength());
}

void GeneratePublicKey(RandomNumberGenerator &rng, const byte *privateKey, byte *publicKey)
{
    const DL_GroupParameters<T> &params = GetAbstractGroupParameters();
    Integer x(privateKey, PrivateKeyLength());
    Element y = params.ExponentiateBase(x);
    params.EncodeElement(true, y, publicKey);
}

The line of interest above is the params.EncodeElement(true, y, publicKey). To see what's going on there, we need to look at eccrypto.h around line 70, and note that reversible is true:
void EncodeElement(bool reversible, const Element &element, byte *encoded)
{
    if (reversible)
        GetCurve().EncodePoint(encoded, element, m_compress);
    else
        element.x.Encode(encoded, GetEncodedElementSize(false));
}

params.EncodeElement calls ECP::EncodePoint. To see what that does we can examine ecp.cpp around line 120. The routine writes a uncompressed point, but blocks x and y on the maximum size of the public element, which should be the field size or the subgroup order.
void ECP::EncodePoint(BufferedTransformation &bt, const Point &P, bool compressed)
{
    if (P.identity)
        NullStore().TransferTo(bt, EncodedPointSize(compressed));
    else if (compressed)
    {
        bt.Put(2 + P.y.GetBit(0));
        P.x.Encode(bt, GetField().MaxElementByteLength());
    }
    else
    {
        unsigned int len = GetField().MaxElementByteLength();
        bt.Put(4);      // uncompressed
        P.x.Encode(bt, len);
        P.y.Encode(bt, len);
    }
}

Don't worry too much about the BufferedTransformation. There are ways to turn a byte[] into one, and it happened before the code shown above. If you trace the code, you will see its transformed via an ArraySource:
byte myArray[PublicEphemeralKeyLength()];
ArraySource as(myArray, COUNTOF(myArray));

Above, as is a BufferedTransformation that wraps the byte[] you passed into the function.
The final open question is the maximum size of the field element. That appears to be the modulus size less one, in bytes:
$ grep -I -A 1 MaxElementByteLength modarith.h 
    unsigned int MaxElementByteLength() const
        {return (m_modulus-1).ByteCount();}

Agreement
Given the above information, here's what you should do. You need to supply the values for x and y in ECP::Point q(x,y). They are just Crypto++ Integers.
OID curve = ASN1::secp256r1();
DL_GroupParameters_EC<ECP> params(curve);

size_t size = params.GetEncodedElementSize(true);
vector<byte> othersPublicKey(size);

ECP::Point q(x,y);
params.EncodeElement(true, q, &othersPublicKey[0]);

Then you can call:
ecdh.Agree(key, myPrivateKey, &othersPublicKey[0]);

One note: params.GetEncodedElementSize(true) should equal PublicEphemeralKeyLength(). If they are not equal, then something is wrong.

If you need to modify compression, then you can:
params.SetPointCompression(true);


I'll get this added to Crypto++'s Elliptic Curve Diffie-Hellman wiki page so others don't have to go rummaging for it.
","348","<c++><crypto++><elliptic-curve><diffie-hellman>","1","0","1","2015-10-19 17:46:49","33206001","3","","608639","","2015-10-19 17:46:49","2015-10-18 13:19:28",""
"33505223","Diffie Helman key agreement on do phase, incompatible parameters","I send a Diffie Helman public key in a byte array through a socket and store it in a file, when I need the key I transform it using the key factory but when I'm going to combine my private key and the public key of my partner on key agreement, doPhase function it give me a exception of incompatible parameters.
public byte[] createMac(byte[] fileBytes, String nick){
    byte[] mac = null;
    byte[] digest;
    try {
        MessageDigest md = MessageDigest.getInstance(""SHA-256"");
        md.update(fileBytes);
        digest = md.digest();

        KeyFactory keyFactory = KeyFactory.getInstance(""DH"");

        byte[] myPrivateKey = Files.readAllBytes(Paths.get(dirMyKeys+""//dhPrivateKey.txt""));
        PrivateKey dhPrivKey = keyFactory.generatePrivate(new PKCS8EncodedKeySpec(myPrivateKey));


        byte[] myPublicKey = Files.readAllBytes(Paths.get(dirKeys+""/""+nick+""DhPublicKey.txt""));
        System.out.println(dirKeys+""/""+nick+""DhPublicKey.txt"");
        PublicKey dhPubKey = keyFactory.generatePublic(new X509EncodedKeySpec(myPublicKey));

        SecretKey secretKey = combine(dhPrivKey, dhPubKey);

        Cipher cipher = Cipher.getInstance(""AES"");
        System.out.println( ""\nStart decryption"" );
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);
        mac = cipher.doFinal(digest);
        System.out.println( ""Finish decryption: "" );

        return mac;

    } catch (NoSuchAlgorithmException | IOException | InvalidKeySpecException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException | NoSuchPaddingException ex) {
        Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
    }
    return mac;
}

private static SecretKey combine(PrivateKey private1, PublicKey public1) throws NoSuchAlgorithmException, InvalidKeyException  {
    KeyAgreement ka = KeyAgreement.getInstance(""DH"");
    ka.init(private1);
    //error on this line
    ka.doPhase(public1, true);
    SecretKey secretKey = ka.generateSecret(""DES"");
    return secretKey;
}

This is the exception:
java.security.InvalidKeyException: Incompatible parameters
        at com.sun.crypto.provider.DHKeyAgreement.engineDoPhase(DHKeyAgreement.java:199)
        at javax.crypto.KeyAgreement.doPhase(KeyAgreement.java:567)
        at safetalk_client.Client.combine(Client.java:279)
        at safetalk_client.Client.createMac(Client.java:260)
        at safetalk_client.Client.sendFile(Client.java:234)
        ...

","I don't have experience with the api, but it sounds like its expecting a different input type. There is a specific type of private and public key class for diffie-Hellman, maybe its needs those instead of the more generic sounding publickey and privatekey classes: 
https://docs.oracle.com/javase/7/docs/api/javax/crypto/interfaces/DHPublicKey.html
https://docs.oracle.com/javase/7/docs/api/javax/crypto/interfaces/DHPrivateKey.html
let me know if it works. 
","348","<java><diffie-hellman>","2","0","1","2018-04-17 01:31:57","","0","","1033581","","2018-04-17 01:31:57","2015-11-03 17:15:05",""
"48699428","Doing ECDHE key exchange using C#","I am trying to do ECDHE key exchange over TLS 1.2 using .net. The server is responding with a server_key_exchange message, which begins with 04, so I guess it is unencrypted. From my understanding the first 32 bits of the message are considered as a value X, and the next 32 bits are considered as a value Y. Using these, and the elliptic curve (say secp256r1), the value of public key of server is created. I am referring to the following python code from OpenTLS:
class ECDHE_RSA_Key_Exchange: 
    def __init__(self, server_key_exchange): 
        curve_code = bytes_to_hex(server_key_exchange[5:7]) 
        print('Elliptic curve: ' + elliptic_curves[curve_code]) 
        self.curve = reg.get_curve(elliptic_curves[curve_code]) 
        x = bytes_to_int(server_key_exchange[9:9+32]) 
        y = bytes_to_int(server_key_exchange[9+32:9+64]) 
        self.server_pubKey = ec.Point(self.curve, x, y) 

Was looking at C# resources for achieving the same. Below is some of the porting that I could do:
int skeLen = this.sKeyExch_hs[7];
skeLen = skeLen - 1;

byte[] sPubKey = new byte[skeLen];
Buffer.BlockCopy(this.sKeyExch_hs, 9, sPubKey, 0, skeLen);

ECDiffieHellmanCng ecdhCngClient = new ECDiffieHellmanCng(256);

this.client_pub_key = ecdhCngClient.PublicKey.ToByteArray();

byte[] i = {0x04};

this.client_pub_key = this.client_pub_key.Skip(8).ToArray();

this.client_pub_key = i.Concat(this.client_pub_key).ToArray();

byte[] x = {0x45, 0x43, 0x4B, 0x31, 0x20, 0, 0, 0};

sPubKey = x.Concat(sPubKey).ToArray();

ECDiffieHellmanPublicKey serverKey = ECDiffieHellmanCngPublicKey.FromByteArray(sPubKey, CngKeyBlobFormat.EccPublicBlob);

byte[] symmKey = ecdhCngClient.DeriveKeyMaterial(serverKey);

this.pre_master_secret = symmKey;

this.pre_master_secret_list = new List<byte>(this.pre_master_secret);

byte client_pub_key_len = (byte) this.client_pub_key.Length;

this.ckeMessage = new List<byte>();
this.ckeMessage.Add(client_pub_key_len);
this.ckeMessage.AddRange(this.client_pub_key);

return this.ckeMessage;

","","344","<c#><diffie-hellman>","3","","0","2018-02-18 11:29:04","","5","1","9293518","","2018-02-18 11:29:04","2018-02-09 05:43:55",""
"43661747","I have general questions about Diffie Hellman parameters","I am currently working on Diffie-Hellman Key exchange and use the key pairs for AES.
Q1) When I choose prime for Diffie-Hellman from RFC 3526 such as 1536, 2048, 3072 MODP groups, is bigger prime safer? could you explain me about it?
Q2) Each group all has generator of 2, should I always use 2 as generator if I use standard prime group from RFC3526??
Q3) I am using the key pairs from Diffie-Helman for AES. I understand that AES's key length can be 128, 192 or 256 bits. Should I choose specific prime or generator in Diffie-Hellman to meet the key lengths of 128, 192 or 256 bit for AES??
Sorry ask three questions in a single post but I believe that they are all related questions. Thanks!!
","In RFC 3528, they address your questions in section 8, Security Considerations. I will attempt to restate/explain the answers here:

In short, yes, the bigger prime is ""safer"". Assuming that Diffie-Hellman is not fundamentally broken, the difficulty of ""cracking"" the exchange, i.e. finding out the shared key the exchange establishes, scales directly with the size of the primes used. However, one additional bit of prime does not equal one additional bit of ""key strength"" in AES terms. This is because, simply, not every number is prime. In AES-128, for example, we expect the key to be a string of 128 random bits, meaning that the key could be any one of 2^128 possibilities. Yet we would never use a 128-bit prime in Diffie-Hellman (or RSA, or anything else that requires primes) simply because there are much fewer than 2^128 primes that are 128 bits in length. So if we used a 128-bit prime, an attacker wouldn't have to try all of the 2^128 possibilities, they would only have to try the much smaller number of 128-bit primes. Therefore, in order to say we have the same ""key-strength"" as AES-x, we need to use much, much larger primes, so that we have a number of possible primes in the range of 2^x.
I would say yes. When in doubt, follow the reference implementation; in this case, use 2 as the generator.
The table in section 8 shows the ""strength estimate"" of the various prime groups provided; I would always take the lower estimate of their strength. So for AES-128, use at least the 3072-bit group; for AES-192, at least the 8192-bit group. 

","339","<security><aes><diffie-hellman>","0","1","1","2017-04-27 16:31:23","","0","","","","","2017-04-27 15:16:34",""
"20476365","Need to create DHPublicKey from y, p, g as BigIntegers","I need a DHPublicKey to encrypt some data.
Therefore I have been provided with all the needed parameters as BigIntegers (y, p, g).
Unfortunately I don't see a straight way for creating a public key object from these parameters that would fit the DHPublicKey interface.
Any idea?
","    KeyFactory keyFactory;
    KeyPairGenerator kpg;
    DHPublicKey originalDhPubKey, fromSpecsDhPubKey;
    DHPublicKeySpec dhPubKeySpecs;
    KeyPair kp;
    BigInteger p, g, y;

    // generate a DH key pair
    kpg = KeyPairGenerator.getInstance(""DH"");
    kp = kpg.generateKeyPair();

    // get the DH public key
    originalDhPubKey = (DHPublicKey) kp.getPublic();
    // get P, G and Y specs
    p = originalDhPubKey.getParams().getP();
    g = originalDhPubKey.getParams().getG();
    y = originalDhPubKey.getY();

    // get a DH KeyFactory
    keyFactory = KeyFactory.getInstance(""DH"");

    // create a DHPublicKeySpec with the specs you have
    dhPubKeySpecs = new DHPublicKeySpec(y, p, g);

    // get the DHPublicKey
    fromSpecsDhPubKey = (DHPublicKey) keyFactory.generatePublic(dhPubKeySpecs);

    // Check that the DH public values are equal
    System.out.println(originalDhPubKey.getY().equals(fromSpecsDhPubKey.getY()));

","338","<java><public-key-encryption><diffie-hellman>","1","2","1","2014-03-28 15:48:25","22717472","0","1","","","","2013-12-09 17:06:21",""
"29483924","Is there any way to specify the range for the Diffie-Hellman prime using javax.net.ssl.SSLServerSocket?","I'm trying to reproduce the issue that was raised in Java: Why does SSL handshake give 'Could not generate DH keypair' exception?.
I have a log that shows an exception with this cause:
Caused by: javax.net.ssl.SSLException: java.lang.RuntimeException: Could not generate DH keypair
    at sun.security.ssl.Alerts.getSSLException(Alerts.java:208)
    at sun.security.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1886)
    at sun.security.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1844)
    at sun.security.ssl.SSLSocketImpl.handleException(SSLSocketImpl.java:1827)
    at sun.security.ssl.SSLSocketImpl.handleException(SSLSocketImpl.java:1753)
    at sun.security.ssl.AppOutputStream.write(AppOutputStream.java:127)
    at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82)
    at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:140)
    at org.apache.axis2.transport.http.AxisRequestEntity.writeRequest(AxisRequestEntity.java:94)
    ... 27 more
Caused by: java.lang.RuntimeException: Could not generate DH keypair
    at sun.security.ssl.DHCrypt.<init>(DHCrypt.java:136)
    at sun.security.ssl.ClientHandshaker.serverKeyExchange(ClientHandshaker.java:621)
    at sun.security.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:205)
    at sun.security.ssl.Handshaker.processLoop(Handshaker.java:868)
    at sun.security.ssl.Handshaker.process_record(Handshaker.java:804)
    at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:1016)
    at sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1312)
    at sun.security.ssl.SSLSocketImpl.writeRecord(SSLSocketImpl.java:702)
    at sun.security.ssl.AppOutputStream.write(AppOutputStream.java:122)
    ... 30 more
Caused by: java.security.InvalidAlgorithmParameterException: Prime size must be multiple of 64, and can only range from 512 to 1024 (inclusive)
    at com.sun.crypto.provider.DHKeyPairGenerator.initialize(DHKeyPairGenerator.java:120)
    at java.security.KeyPairGenerator$Delegate.initialize(KeyPairGenerator.java:658)
    at sun.security.ssl.DHCrypt.<init>(DHCrypt.java:127)
    ... 38 more

I'm using Axis2 to call a web service. I also have the ""Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files"" in jre/lib/security (but as someone mentioned on the other post this didn't work for them).
For reproducing this issue I'm trying to host a web service in a separate deployment with a similar environment (also using Axis2). This has a custom SSLServerSocketFactory which is creating and configuring the SSLServerSocket.
Using Wireshark (and also javax.net.debug JVM argument) I can see that the cipher suite that is negotiated is TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA but the Prime DH Server Param in the ServerKeyExchange is only 96 bytes (768 bits).
Is there any way I can configure the SSLServerSocket to use a larger prime during the handshake?
I'm guessing the key is being generated by the security provider for RSA from the JRE. Do I need to add my own provider and add it to jre/lib/security/java.security?
Appologies if this is a silly question, I'm new to DHE an Cipher Suites in general. I just need to know enough to get the server test to work (I'm not touching the client implementation).
","So with the push in the right direction from EJP I eventually managed to track down exactly where the strength (and subsequently the DH parameters) is determined. It is indeed in the JRE (specifically in the ServerHandshaker).
Using the security providers with an older JRE with the strength limitation (as mentioned in the original post) will not work here. While using other security providers will probably prevent this error client side the strength is already determined before the implementation of the KeyPairGenerator is initialized.
As a side note I didn't bother upgrading the JRE to reproduce this. I just added the BouncyCastle JCE provider with debug info, put a breakpoint in the org.bouncycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi.initialize(int, SecureRandom) method and manually changed the strength. This was good enough for my tests.
","330","<java><ssl><rsa><diffie-hellman><public-key-exchange>","0","0","1","2015-04-08 00:59:41","","5","0","-1","","2017-05-23 12:22:11","2015-04-07 04:44:51",""
"21157722","how to get Diffie–Hellman key exchange parameters?","I want to decrypt https stream in my https server. I have succeeded in decrypting it which used RSA secret exchange when i have private key. But I dont know how to descryt it when it uses DHE for secret exchange   because I dont have any parameters.how to get Diffie–Hellman key exchange parameters?
","This should not be possible. The whole idea behind forward secrecy is that you use Diffie-Hellman key exchange because this way a captured session cannot be decrypted later, even if an attacker gets access to the private key of the certificate.
","322","<ssl><encryption><diffie-hellman>","1","3","2","2014-01-16 20:17:38","","0","1","1395034","","2014-01-16 09:34:19","2014-01-16 09:19:34",""
"21157722","how to get Diffie–Hellman key exchange parameters?","I want to decrypt https stream in my https server. I have succeeded in decrypting it which used RSA secret exchange when i have private key. But I dont know how to descryt it when it uses DHE for secret exchange   because I dont have any parameters.how to get Diffie–Hellman key exchange parameters?
","The ""E"" in DHE is for ephemeral. It means transient, fleeting, or temporary. The key material that you need to decrypt the conversation is not permanently stored anywhere. It's generated for a single TLS session and then discarded, ensuring that no one, even the original parties, can retroactively decrypt the conversation.
","322","<ssl><encryption><diffie-hellman>","1","3","2","2014-01-16 20:17:38","","0","1","1395034","","2014-01-16 09:34:19","2014-01-16 09:19:34",""
"50268041","Diffie-Hellman key exchange using OpenSSL in Delphi","I want to implement Diffie-Hellman key exchange into my existing protocol. I've searched quite a few sites on this topic and most I could get is ""you exchange the DH parameters between parties and that's all"". It was clearly not enough information on the topic or I was looking for at a wrong place.
After a couple of days of work I found good OpenSSL header files for Delphi (https://github.com/Arvur/OpenSSL-Delphi). Using this headers, source code from OpenSSL and a couple of example programs I've created a full Diffie-Hellman key exchange from generating DH parameters and public keys to getting a shared secret. For exchange itself I used simple files, but it can be used in any way (like sockets).
procedure CommonSecretKeyGeneration;
var parameters_context:PEVP_PKEY_CTX;
key_generation_context:PEVP_PKEY_CTX;
key_generation_context2:PEVP_PKEY_CTX;
shared_context1:PEVP_PKEY_CTX;
shared_context2:PEVP_PKEY_CTX;
parameters:PEVP_PKEY;
parameters2:PEVP_PKEY;
private_key:PEVP_PKEY;
private_key2:PEVP_PKEY;
public_key:PEVP_PKEY;
public_key2:PEVP_PKEY;
bio_file:PBIO;
keylen:cardinal;
arr:array of byte;
str:string;
i:integer;
begin
  SSL_InitEVP;
  SSL_InitBIO;
  SSL_InitPEM;

  Log('-------------Generating parameters---------------');
  parameters_context:=EVP_PKEY_CTX_new_id(EVP_PKEY_DH, nil);
  if parameters_context<>nil then Log('Context for parameters created')
  else
  begin
    Log('Failed to generate parameters context');
    exit;
  end;

  i:=EVP_PKEY_paramgen_init(parameters_context);
  if i=1 then Log('Parameter context init done')
  else
  begin
    Log('Error initializing parameter context, return='+inttostr(i));
    exit;
  end;

  //equal to EVP_PKEY_CTX_set_dh_paramgen_prime_len(parameters_context, 1024)
  i:=EVP_PKEY_CTX_ctrl(parameters_context, EVP_PKEY_DH, EVP_PKEY_OP_PARAMGEN, EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN, 1024, nil);
  if i=1 then Log('Setting prime length done')
  else
  begin
    Log('Error setting prime length, return='+inttostr(i));
    exit;
  end;

  i:=EVP_PKEY_paramgen(parameters_context,@parameters);
  if i=1 then Log('Generation of parameters sucsessful')
  else
  begin
    Log('Error while generating parameters, return='+inttostr(i));
    exit;
  end;

  Log('-------------Output parameters to file---------------');
  //writing parameters to file
  bio_file:=BIO_new_file('C:\DH_parameters_test.pem', 'w');
  i:=PEM_write_bio_Parameters(bio_file,parameters);
  Log('PEM write return='+inttostr(i));
  BIO_free_all(bio_file);

  Log('-------------Client reading parameters---------------');
  //sending parameters via sockets
  //reading parameters
  bio_file:=BIO_new_file('C:\DH_parameters_test.pem', 'r');
  parameters2:=PEM_read_bio_Parameters(bio_file,nil);
  BIO_free_all(bio_file);
  if parameters2<>nil then Log('Readed parameters sucsess for client')
  else
  begin
    Log('Error reading parameters');
    exit;
  end;

  Log('-------------Generating private/public keys on server---------------');
  //making a key on server
  key_generation_context:=EVP_PKEY_CTX_new(parameters, nil);
  if key_generation_context<>nil then Log('Created key generation context')
  else
  begin
    Log('Error creating key generation context');
    exit;
  end;

  i:=EVP_PKEY_keygen_init(key_generation_context);
  if i=1 then Log('Initialized key generation sucsessfully')
  else
  begin
    Log('Error initializing key generation, return='+inttostr(i));
    exit;
  end;

  i:=EVP_PKEY_keygen(key_generation_context, @private_key);
  if i=1 then Log('Generated keys')
  else
  begin
    Log('Error generating keys, return='+inttostr(i));
    exit;
  end;

  Log('-------------Generating private/public keys on client---------------');
  //making key on client
  key_generation_context2:=EVP_PKEY_CTX_new(parameters2, nil);
  if key_generation_context<>nil then Log('Created key generation context on client')
  else
  begin
    Log('Error creating key generation context on client');
    exit;
  end;

  i:=EVP_PKEY_keygen_init(key_generation_context2);
  if i=1 then Log('Initialized key generation sucsessfully on client')
  else
  begin
    Log('Error initializing key generation on client, return='+inttostr(i));
    exit;
  end;

  i:=EVP_PKEY_keygen(key_generation_context2, @private_key2);
  if i=1 then Log('Generated keys on client')
  else
  begin
    Log('Error generating keys, return='+inttostr(i));
    exit;
  end;

  Log('-------------Public key exchange---------------');
  Log('-------------Outputing public key on server---------------');
  //outputing public keys
  bio_file:=BIO_new_file('C:\public_key1.pem', 'w');
  i:=PEM_write_bio_PUBKEY(bio_file,private_key);
  Log('PEM write return='+inttostr(i));
  BIO_free_all(bio_file);

  Log('-------------Outputing public key on client---------------');
  bio_file:=BIO_new_file('C:\public_key2.pem', 'w');
  i:=PEM_write_bio_PUBKEY(bio_file,private_key2);
  Log('PEM write return='+inttostr(i));
  BIO_free_all(bio_file);

  //public key exchange

  Log('-------------Reading public key1 (for client)---------------');
  //reading public keys
  bio_file:=BIO_new_file('C:\public_key1.pem', 'r');
  public_key:=PEM_read_bio_PUBKEY(bio_file,nil,nil,nil);
  BIO_free_all(bio_file);
  if public_key<>nil then Log('Readed public key1 sucsessfully')
  else
  begin
    Log('Error reading public key1');
    exit;
  end;

  Log('-------------Reading public key2 (for server)---------------');
  bio_file:=BIO_new_file('C:\public_key2.pem', 'r');
  public_key2:=PEM_read_bio_PUBKEY(bio_file,nil,nil,nil);
  BIO_free_all(bio_file);
  if public_key2<>nil then Log('Readed public key2 sucsessfully')
  else
  begin
    Log('Error reading public key2');
    exit;
  end;

  Log('-------------Calculating secret on server---------------');
  shared_context1:=EVP_PKEY_CTX_new(private_key,nil);
  if shared_context1<>nil then Log('Created shared context for key1')
  else
  begin
    Log('Error creating shared context for key1');
    exit;
  end;

  i:=EVP_PKEY_derive_init(shared_context1);
  if i=1 then Log('Derive init sucsessful on server')
  else
  begin
    Log('Error while initializing derive on server, return='+inttostr(i));
    exit;
  end;

  i:=EVP_PKEY_derive_set_peer(shared_context1,public_key2);
  if i=1 then Log('Set peer on server done')
  else
  begin
    Log('Error setting peer on server');
    exit;
  end;

  keylen:=0;
  Log('Before query secret key length='+inttostr(keylen));
  i:=EVP_PKEY_derive(shared_context1,nil,cardinal(@keylen));
  if i=1 then Log('Query secret key length sucsessful, len='+inttostr(keylen))
  else
  begin
    Log('Error query secret key length');
    exit;
  end;

  setlength(arr,keylen);
  FillChar(arr[0],length(arr),0);
  i:=EVP_PKEY_derive(shared_context1,@arr[0],cardinal(@keylen));
  if i=1 then
  begin
    Log('Output secret key sucsessful, len='+inttostr(keylen));
    str:='';
    for i:=0 to length(arr)-1 do
      str:=str+inttohex(arr[i],2);
    Log('Secret on server='+str);
  end
  else
  begin
    Log('Error query secret key');
    exit;
  end;

  Log('-------------Calculating secret on client---------------');
  shared_context2:=EVP_PKEY_CTX_new(private_key2,nil);
  if shared_context1<>nil then Log('Created shared context for key2')
  else
  begin
    Log('Error creating shared context for key2');
    exit;
  end;

  i:=EVP_PKEY_derive_init(shared_context2);
  if i=1 then Log('Derive init sucsessful on client')
  else
  begin
    Log('Error while initializing derive on client, return='+inttostr(i));
    exit;
  end;

  i:=EVP_PKEY_derive_set_peer(shared_context2,public_key);
  if i=1 then Log('Set peer on client done')
  else
  begin
    Log('Error setting peer on client');
    exit;
  end;

  keylen:=0;
  Log('Before query secret key length='+inttostr(keylen));
  i:=EVP_PKEY_derive(shared_context2,nil,cardinal(@keylen));
  if i=1 then Log('Query secret key length sucsessful, len='+inttostr(keylen))
  else
  begin
    Log('Error query secret key length');
    exit;
  end;

  setlength(arr,keylen);
  FillChar(arr[0],length(arr),0);
  i:=EVP_PKEY_derive(shared_context2,@arr[0],cardinal(@keylen));
  if i=1 then
  begin
    Log('Output secret key sucsessful, len='+inttostr(keylen));
    str:='';
    for i:=0 to length(arr)-1 do
      str:=str+inttohex(arr[i],2);
    Log('Secret on client='+str);
  end
  else
  begin
    Log('Error query secret key');
    exit;
  end;

  Log('===============DONE================');
end;

The question is:  

Did I miss any essential part of DH key exchange? Is this enought to guarantee that both parties will have same secret key?  

","","316","<delphi><openssl><diffie-hellman>","0","","0","2018-05-10 10:10:20","","4","","9769024","","2018-05-10 10:10:20","2018-05-10 07:46:24",""
"9372424","Prime's notation in RFC3526 about Diffie Hellman Key Exchange","In RFC3526, the prime is presented by
2^1536 - 2^1472 - 1 + 2^64 * { [2^1406 pi] + 741804 } form
I wanna know the ""[2^1406 pi]"" part means what
THKS
","The [] notation represents the greatest integer or floor function. Therefore [2^1406 pi] means multiply pi (3.141...) by 2^1406 and throw away the fractional part. Enter Floor[2^1406 * Pi] into Wolfram Alpha to see the result.
","310","<diffie-hellman>","0","0","1","2012-02-22 13:05:35","9395341","0","","","","","2012-02-21 05:00:35",""
"3637995","ColdFusion 8 Diffie-Helman Encryption","I am integrating with a 3rd party that requires I use the Diffie-Hellman encryption algorithm. The CF docs indicate that this is a supported algorithm.
When I attempt to call Encrypt() with either ""Diffie-Helman"" or ""DH"" I get the error message: ""The Diffie-Hellman algorithm is not supported by the Security Provider you have chosen.""
Is it possible to configure CF to use a different Security Provider that would include DH? Or, Is it possible to use java objects directly to accomplish this?
","The Diffie-Hellman algorithm is only supported by Enterprise edition.
(this is documented in the page you linked to, but it's not entirely clear)
If you only have Standard edition then you'll need to find an existing Java implementation you can use with createObject('java','...'), or maybe reimplement one with pure CFML.
If you do the latter, it would be great to share the code on riaforge/github/wherever, so other CFML users can benefit.
","307","<java><encryption><coldfusion><coldfusion-8><diffie-hellman>","2","4","1","2010-09-05 20:13:51","","0","","751","","2010-09-05 20:13:51","2010-09-03 17:12:01",""
"49805714","Using DER key from Java in mbedtls Diffie-Hellman","I have a Java application that is producing keys for a Diffie-Hellman key exchange. These keys are generated, and the public key is exported as follows:
/*
 * Alice creates her own DH key pair with 2048-bit key size
 */
System.out.println(""ALICE: Generate DH keypair ..."");
KeyPairGenerator aliceKpairGen = KeyPairGenerator.getInstance(""DH"");
aliceKpairGen.initialize(2048);
KeyPair aliceKpair = aliceKpairGen.generateKeyPair();

// Alice creates and initializes her DH KeyAgreement object
System.out.println(""ALICE: Initialization ..."");
KeyAgreement aliceKeyAgree = KeyAgreement.getInstance(""DH"");
aliceKeyAgree.init(aliceKpair.getPrivate());

// Alice encodes her public key, and sends it over to Bob.
byte[] alicePubKeyEnc = aliceKpair.getPublic().getEncoded();

Contained in alicePubKeyEnc is the public key I am sending over to my C++ application. As I understand it, this data is an encoded DER key for my DHE parameters. On the other side I am attempting to use this key with mbedtls as follows:
// An example DER (?) key from Java.
unsigned char buf[] = {
    0x30, 0x82, 0x02, 0x28, 0x30, 0x82, 0x01, 0x1b, 0x06, 0x09, 0x2a, 0x86,
    0x48, 0x86, 0xf7, 0x0d, 0x01, 0x03, 0x01, 0x30, 0x82, 0x01, 0x0c, 0x02,
    0x82, 0x01, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xc9, 0x0f, 0xda, 0xa2, 0x21, 0x68, 0xc2, 0x34, 0xc4, 0xc6, 0x62, 0x8b,
    0x80, 0xdc, 0x1c, 0xd1, 0x29, 0x02, 0x4e, 0x08, 0x8a, 0x67, 0xcc, 0x74,
    0x02, 0x0b, 0xbe, 0xa6, 0x3b, 0x13, 0x9b, 0x22, 0x51, 0x4a, 0x08, 0x79,
    0x8e, 0x34, 0x04, 0xdd, 0xef, 0x95, 0x19, 0xb3, 0xcd, 0x3a, 0x43, 0x1b,
    0x30, 0x2b, 0x0a, 0x6d, 0xf2, 0x5f, 0x14, 0x37, 0x4f, 0xe1, 0x35, 0x6d,
    0x6d, 0x51, 0xc2, 0x45, 0xe4, 0x85, 0xb5, 0x76, 0x62, 0x5e, 0x7e, 0xc6,
    0xf4, 0x4c, 0x42, 0xe9, 0xa6, 0x37, 0xed, 0x6b, 0x0b, 0xff, 0x5c, 0xb6,
    0xf4, 0x06, 0xb7, 0xed, 0xee, 0x38, 0x6b, 0xfb, 0x5a, 0x89, 0x9f, 0xa5,
    0xae, 0x9f, 0x24, 0x11, 0x7c, 0x4b, 0x1f, 0xe6, 0x49, 0x28, 0x66, 0x51,
    0xec, 0xe4, 0x5b, 0x3d, 0xc2, 0x00, 0x7c, 0xb8, 0xa1, 0x63, 0xbf, 0x05,
    0x98, 0xda, 0x48, 0x36, 0x1c, 0x55, 0xd3, 0x9a, 0x69, 0x16, 0x3f, 0xa8,
    0xfd, 0x24, 0xcf, 0x5f, 0x83, 0x65, 0x5d, 0x23, 0xdc, 0xa3, 0xad, 0x96,
    0x1c, 0x62, 0xf3, 0x56, 0x20, 0x85, 0x52, 0xbb, 0x9e, 0xd5, 0x29, 0x07,
    0x70, 0x96, 0x96, 0x6d, 0x67, 0x0c, 0x35, 0x4e, 0x4a, 0xbc, 0x98, 0x04,
    0xf1, 0x74, 0x6c, 0x08, 0xca, 0x18, 0x21, 0x7c, 0x32, 0x90, 0x5e, 0x46,
    0x2e, 0x36, 0xce, 0x3b, 0xe3, 0x9e, 0x77, 0x2c, 0x18, 0x0e, 0x86, 0x03,
    0x9b, 0x27, 0x83, 0xa2, 0xec, 0x07, 0xa2, 0x8f, 0xb5, 0xc5, 0x5d, 0xf0,
    0x6f, 0x4c, 0x52, 0xc9, 0xde, 0x2b, 0xcb, 0xf6, 0x95, 0x58, 0x17, 0x18,
    0x39, 0x95, 0x49, 0x7c, 0xea, 0x95, 0x6a, 0xe5, 0x15, 0xd2, 0x26, 0x18,
    0x98, 0xfa, 0x05, 0x10, 0x15, 0x72, 0x8e, 0x5a, 0x8a, 0xac, 0xaa, 0x68,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0x01, 0x02, 0x02,
    0x02, 0x04, 0x00, 0x03, 0x82, 0x01, 0x05, 0x00, 0x02, 0x82, 0x01, 0x00,
    0x2f, 0x6e, 0xa3, 0xd8, 0x5c, 0xca, 0x06, 0x99, 0xbd, 0x35, 0x90, 0xb5,
    0xc3, 0x11, 0xa6, 0x48, 0x5b, 0x5a, 0xe9, 0x14, 0xac, 0x4a, 0xed, 0x2d,
    0x46, 0xb1, 0x6b, 0xc7, 0x5b, 0x88, 0xc6, 0xa7, 0x51, 0x07, 0xa0, 0x4d,
    0x5f, 0xc0, 0x32, 0x54, 0x9d, 0x63, 0x35, 0xa2, 0x3b, 0x6a, 0x9a, 0x0a,
    0xb9, 0x46, 0xff, 0x0b, 0x78, 0x5d, 0xa7, 0x17, 0x94, 0x58, 0x28, 0x28,
    0xf2, 0xa0, 0xea, 0x3a, 0xf0, 0xe8, 0x8f, 0xc2, 0xa1, 0x7c, 0xb1, 0x50,
    0x38, 0xb7, 0x01, 0xe1, 0x69, 0x42, 0x30, 0x1e, 0x06, 0x06, 0x06, 0x17,
    0x46, 0xc8, 0x1f, 0xb1, 0xb4, 0xd2, 0xff, 0xf1, 0x32, 0xdc, 0xc2, 0xfc,
    0x2c, 0x15, 0xe4, 0xfe, 0xae, 0xb2, 0x1f, 0x8b, 0x20, 0x29, 0x87, 0xbe,
    0x31, 0x8c, 0xf2, 0x01, 0x95, 0x51, 0x35, 0x76, 0x4c, 0x83, 0xe4, 0x06,
    0x46, 0x96, 0x62, 0x42, 0x2f, 0x23, 0xb4, 0xb7, 0xc7, 0x41, 0x4b, 0x4e,
    0xf5, 0xab, 0x20, 0xb0, 0x45, 0x27, 0x52, 0x64, 0x63, 0x18, 0x87, 0x72,
    0xa7, 0x41, 0x80, 0xbd, 0x15, 0x4d, 0xa8, 0x48, 0x69, 0x69, 0x8b, 0x64,
    0x38, 0x03, 0xa7, 0x72, 0xf7, 0xeb, 0x2b, 0xdd, 0x19, 0x2d, 0x63, 0x3a,
    0xa6, 0x1b, 0x6f, 0xcc, 0x81, 0x14, 0xde, 0x29, 0xd9, 0x55, 0x66, 0xd1,
    0x95, 0x8d, 0x2f, 0x15, 0x5e, 0x29, 0xad, 0xf8, 0x82, 0xf0, 0x68, 0xac,
    0x65, 0xf7, 0x54, 0x4f, 0x3e, 0x52, 0x64, 0xe8, 0x28, 0x52, 0x0f, 0x7c,
    0xbe, 0xc4, 0xf2, 0x20, 0x40, 0x97, 0xfa, 0x0a, 0x78, 0x5b, 0x1d, 0xf8,
    0xdb, 0x15, 0x02, 0xbe, 0xc3, 0xf0, 0xb0, 0x3a, 0xda, 0x6a, 0xe6, 0x5f,
    0x74, 0x48, 0x74, 0x0e, 0xe9, 0x1d, 0x02, 0xda, 0x25, 0x37, 0x4f, 0x41,
    0x11, 0x63, 0x32, 0x93, 0x44, 0xfe, 0x5b, 0x3a, 0x7e, 0x25, 0xcc, 0x9f,
    0xd5, 0x99, 0x41, 0x9f, 0x00
};

size_t size = 557; // 556 + NULL terminating byte per the docs.

mbedtls_dhm_context ctx;
mbedtls_dhm_init(&ctx);
int res = mbedtls_dhm_parse_dhm(&ctx, buf, size);

if (res != 0) {
    printf(""FAIL\n"", -res);
}

res results in a negative, non-zero value (0xffffcc1e). I've checked the error codes for x509 parsing in mbedtls, but can't find a matching error code.
Any idea why I can't load this certificate? 
Update
I updated my C code to print out the associated error message for mbedtls:
0x0000023c4f9fb2b0 ""DHM - The ASN.1 data is not formatted correctly : ASN1 - ASN1 tag was of an unexpected value""

So I took the hex values from my key and ran it through http://lapo.it/asn1js/ (<-- That links the the actual output from the key) which indicates some structure to my key and seems to parse the key just fine. Perhaps it's an issue with how I'm passing the key to mbedtls?
","You are passing the wrong thing to mbed TLS's mbedtls_dhm_parse_dhm. That function expects the DER (or PEM) encoded DH parameters, not the key.
Using BouncyCastle's DHParameter you can get the DER encoded parameters like this:
DHParameterSpec dhParams = ((DHPublicKey) aliceKeyPair.getPublic()).getParams();
DHParameter dhP = new DHParameter(dhParams.getP(), dhParams.getG(), 0);
byte[] encodedParams = dhP.getEncoded(ASN1Encodable.DER);

This will give you the bytes that you can then pass into mbedtls_dhm_parse_dhm, either as raw bytes as you are doing now or PEM encoded as that function will accept that as well. Note that I'm passing 0 for L as mbed TLS discards it anyway. Also note that getEncoded throws so make sure to handle the exception.
Steps to complete a key exchange:
In Java:
KeyPairGenerator aliceKpairGen = KeyPairGenerator.getInstance(""DH"");
aliceKpairGen.initialize(2048);
KeyPair aliceKpair = aliceKpairGen.generateKeyPair();
KeyAgreement aliceKeyAgree = KeyAgreement.getInstance(""DH"");
aliceKeyAgree.init(aliceKpair.getPrivate());
DHParameterSpec dhParams = ((DHPublicKey) aliceKpair.getPublic()).getParams();
DHParameter dhP = new DHParameter(dhParams.getP(), dhParams.getG(), 0);
byte[] encodedParams = dhP.getEncoded(ASN1Encodable.DER);
byte[] javaPub = ((DHPublicKey)aliceKeyPair.getPublic()).getY().toByteArray();

Then in C++:
mbedtls_dhm_context ctx;
mbedtls_dhm_init(&ctx);
...
mbedtls_dhm_parse_dhm(&ctx, encodedParams, encodedParamsLen);
...
uint_8t mbedtlspub[128];
mbedtls_dhm_make_public(&ctx, 128, mbedtlspub, sizeof(mbedtlspub), mbedtls_ctr_drbg_random, &rnd_info);
...
mbedtls_dhm_read_public(&ctx, javaPub, javaPubLen);
...
uint_8t mbedtlssecret[128];
mbedtls_dhm_calc_secret(&ctx, mbedtlssecret, (size_t)secret_len, &olen, mbedtls_ctr_drbg_random, &rnd_info);

And back in Java (assuming you encoded mbedtlspub from the previous steps in Base64, but you can do it however you want):
byte[] yBinary = Base64.decodeBase64(mbedtlspub.getBytes()); 
BigInteger y = new BigInteger(yBinary); 
DHPublicKeySpec dhPublicKeySpec = new DHPublicKeySpec(y, dhParams.getP(), dhParams.getG()); 
KeyFactory keyFactory = KeyFactory.getInstance(ALGORITHM); 
DHPublicKey mbedtlsPubKey = (DHPublicKey) KeyFactory.generatePublic(dhPublicKeySpec);
aliceKeyAgree.doPhase(mbedtlsPubKey, true);
byte[] javaSecretKey = aliceKeyAgree.generateSecret();

That completes the key exchange and at this point mbedtlssecret and javaSecretKey should match. So the data passing hands is encodedParams and javaPub (from Java) and mbedtlspub (from C++). I omitted some detail to focus on the core steps. Also note that a lot of these functions either return an error code or throw, so please take care using them.
","306","<java><c++><c><diffie-hellman><mbedtls>","1","2","1","2018-04-20 15:38:24","49842820","2","","309706","","2018-04-20 15:38:24","2018-04-12 20:55:52",""
"51831922","SSL handshake failure with Linux server, but not with Windows","I've found some related questions, but mine is a little different.
Client app running on Windows, using Java 1.7 (71) with bouncycastle connecting to a tomcat 8.5.xx server running Java 1.8 (161) on either Linux RH or Windows 10. The Linux and Windows server installations should be identical (other than being Linux and Windows). We control the software on both sides.
Client app works correctly when connecting to Windows. When connecting to Linux it fails the SSL handshake with:
java.security.InvalidAlgorithmParameterException: Prime size must be multiple of 64, and can only range from 512 to 1024 (inclusive)
  at com.sun.crypto.provider.DHKeyPairGenerator.initialize(DHKeyPairGenerator.java:120)
  at java.security.KeyPairGenerator$Delegate.initialize(Unknown Source)

This isn't totally surprising, because Java 7 can't handle large DH keys. But
when the client connects to the Windows server (same version of tomcat, same version of Java), the SSL handshake works flawlessly and the connection goes through.
Setting javax.net.debug appropriately shows that, yes, the Linux server is sending a 2048 bit DH key and Windows is sending 1024. I have no idea why.
The java.security files are the same for the Windows and Linux server (except windows has sun.security.mscapi.SunMSCAPI provider). crypto.policy=unlimited is commented out on both.
Two part question:

Where else can I look to find out why the two systems behave differently? Is this an OS crypto library difference?
Is there a way to resolve this problem without changing the client code (it's legacy code and we'd rather not patch)?

","","305","<java><linux><ssl><diffie-hellman>","2","","0","2018-08-14 00:42:19","","3","","608639","","2018-08-14 00:42:19","2018-08-13 23:43:13",""
"52800998",".NET ECDiffieHellmanCng and BouncyCastle Core compatible agreement","I have to make a Diffie Hellman agreement with a third party that communicates the  public keys in the .NET ECDiffieHellmanCng XmlString format. I cannot change their code.
What they send looks like this:
<ECDHKeyValue xmlns=""http://www.w3.org/2001/04/xmldsig-more#"">
  <DomainParameters>
    <NamedCurve URN=""urn:oid:1.3.132.0.35"" />
  </DomainParameters>
  <PublicKey>
    <X Value=""11"" xsi:type=""PrimeFieldElemType"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" />
    <Y Value=""17"" xsi:type=""PrimeFieldElemType"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" />
  </PublicKey>
</ECDHKeyValue>

They generate that using typical .NET Framework code like this:
using (ECDiffieHellmanCng dhKey = new ECDiffieHellmanCng())
{
    dhKey.KeyDerivationFunction = ECDiffieHellmanKeyDerivationFunction.Hash;
    dhKey.HashAlgorithm = CngAlgorithm.Sha256;

    Console.WriteLine(dhKey.PublicKey.ToXmlString());
}

They expect to receive my public key in the same format.
They use my public key like this:
ECDiffieHellmanCngPublicKey pbkey = ECDiffieHellmanCngPublicKey.FromXmlString(xmlHere);

I work in .NET core 2.1. Unfortunately the ECDiffieHellmanCng classes and the like are currently not implemented in .NET core.
I thought I could use the BouncyCastle for .NET Core package for this: https://www.nuget.org/packages/BouncyCastle.NetCore/
I would assume these both implement the same standard and they would be compatible.
I know how to do the agreement completely with the bouncy castle, however it's not clear to me how to do that starting with the X and Y values in the xml that come out of the .NET ECDiffieHellmanCng and how to make sure I use compatible parameters.
It's also not clear to me how I get the X and Y values from the bouncy castle public key that I generate to send back to them.
It doesn't help that the bouncy castle for .net api is not exactly the same as the java api and the documentation is limited.
Update 1:
After reading some comments below, it appears indeed that the ECDiffieHellmanCng are partially implemented in .NET Core. Most of the logic works but only ToXmlString and FromXmlString don't work. That's ok, I can work around that.
However I'm now running into a different problem. The curve that the other side uses is oid:1.3.132.0.35.
However when I try to use this in .NET core, even with a basic example like this:
    using (ECDiffieHellman dhBob = ECDiffieHellman.Create(ECCurve.CreateFromValue(""1.3.132.0.35"")))
    {
        using (ECDiffieHellman dhAlice = ECDiffieHellman.Create(ECCurve.CreateFromValue(""1.3.132.0.35"")))
        {
            byte[] b = dhAlice.DeriveKeyMaterial(dhBob.PublicKey);

            byte[] b2 = dhBob.DeriveKeyMaterial(dhAlice.PublicKey);

            Console.WriteLine(b.SequenceEqual(b2));
        }
    }

Then I get this error:
Unhandled Exception: System.PlatformNotSupportedException: The specified curve 'ECDSA_P521' or its parameters are not valid for this platform. ---> Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException: The parameter is incorrect
   at System.Security.Cryptography.CngKeyLite.SetProperty(SafeNCryptHandle ncryptHandle, String propertyName, Byte[] value)
   at System.Security.Cryptography.CngKeyLite.SetCurveName(SafeNCryptHandle keyHandle, String curveName)
   at System.Security.Cryptography.CngKeyLite.GenerateNewExportableKey(String algorithm, String curveName)
   at System.Security.Cryptography.ECCngKey.GenerateKey(ECCurve curve)
   --- End of inner exception stack trace ---
   at System.Security.Cryptography.ECCngKey.GenerateKey(ECCurve curve)
   at System.Security.Cryptography.ECDiffieHellman.Create(ECCurve curve)
   at TestCore.Program.Main(String[] args) 

The error message is not clear to me. Is that curve really not supported? Or is something wrong in the parameters, but then what exactly?
It would surprise me if the curve is not supported because nistP521 curve is supported and according to this IBM document I found online they are the same: https://www.ibm.com/support/knowledgecenter/en/linuxonibm/com.ibm.linux.z.wskc.doc/wskc_r_ecckt.html
","It looks like there's just an equivalence problem with the handling of these OIDs with ECDH (it's turning it into the Windows ECDSA name instead of the Windows ECDH name).  You can solve it with something like
private static ECCurve GetCurveByOid(string oidValue)
{
    switch (oidValue)
    {
        case ""1.2.840.10045.3.1.7"":
            return ECCurve.NamedCurves.nistP256;
        case ""1.3.132.0.34"":
            return ECCurve.NamedCurves.nistP384;
        case ""1.3.132.0.35"":
            return ECCurve.NamedCurves.nistP521;
    }

    return ECCurve.CreateFromValue(oidValue);
}

","304","<c#><.net><.net-core><bouncycastle><diffie-hellman>","4","0","2","2018-10-30 20:28:11","53072408","4","1","968698","","2018-10-18 11:21:11","2018-10-14 08:50:45",""
"52800998",".NET ECDiffieHellmanCng and BouncyCastle Core compatible agreement","I have to make a Diffie Hellman agreement with a third party that communicates the  public keys in the .NET ECDiffieHellmanCng XmlString format. I cannot change their code.
What they send looks like this:
<ECDHKeyValue xmlns=""http://www.w3.org/2001/04/xmldsig-more#"">
  <DomainParameters>
    <NamedCurve URN=""urn:oid:1.3.132.0.35"" />
  </DomainParameters>
  <PublicKey>
    <X Value=""11"" xsi:type=""PrimeFieldElemType"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" />
    <Y Value=""17"" xsi:type=""PrimeFieldElemType"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" />
  </PublicKey>
</ECDHKeyValue>

They generate that using typical .NET Framework code like this:
using (ECDiffieHellmanCng dhKey = new ECDiffieHellmanCng())
{
    dhKey.KeyDerivationFunction = ECDiffieHellmanKeyDerivationFunction.Hash;
    dhKey.HashAlgorithm = CngAlgorithm.Sha256;

    Console.WriteLine(dhKey.PublicKey.ToXmlString());
}

They expect to receive my public key in the same format.
They use my public key like this:
ECDiffieHellmanCngPublicKey pbkey = ECDiffieHellmanCngPublicKey.FromXmlString(xmlHere);

I work in .NET core 2.1. Unfortunately the ECDiffieHellmanCng classes and the like are currently not implemented in .NET core.
I thought I could use the BouncyCastle for .NET Core package for this: https://www.nuget.org/packages/BouncyCastle.NetCore/
I would assume these both implement the same standard and they would be compatible.
I know how to do the agreement completely with the bouncy castle, however it's not clear to me how to do that starting with the X and Y values in the xml that come out of the .NET ECDiffieHellmanCng and how to make sure I use compatible parameters.
It's also not clear to me how I get the X and Y values from the bouncy castle public key that I generate to send back to them.
It doesn't help that the bouncy castle for .net api is not exactly the same as the java api and the documentation is limited.
Update 1:
After reading some comments below, it appears indeed that the ECDiffieHellmanCng are partially implemented in .NET Core. Most of the logic works but only ToXmlString and FromXmlString don't work. That's ok, I can work around that.
However I'm now running into a different problem. The curve that the other side uses is oid:1.3.132.0.35.
However when I try to use this in .NET core, even with a basic example like this:
    using (ECDiffieHellman dhBob = ECDiffieHellman.Create(ECCurve.CreateFromValue(""1.3.132.0.35"")))
    {
        using (ECDiffieHellman dhAlice = ECDiffieHellman.Create(ECCurve.CreateFromValue(""1.3.132.0.35"")))
        {
            byte[] b = dhAlice.DeriveKeyMaterial(dhBob.PublicKey);

            byte[] b2 = dhBob.DeriveKeyMaterial(dhAlice.PublicKey);

            Console.WriteLine(b.SequenceEqual(b2));
        }
    }

Then I get this error:
Unhandled Exception: System.PlatformNotSupportedException: The specified curve 'ECDSA_P521' or its parameters are not valid for this platform. ---> Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException: The parameter is incorrect
   at System.Security.Cryptography.CngKeyLite.SetProperty(SafeNCryptHandle ncryptHandle, String propertyName, Byte[] value)
   at System.Security.Cryptography.CngKeyLite.SetCurveName(SafeNCryptHandle keyHandle, String curveName)
   at System.Security.Cryptography.CngKeyLite.GenerateNewExportableKey(String algorithm, String curveName)
   at System.Security.Cryptography.ECCngKey.GenerateKey(ECCurve curve)
   --- End of inner exception stack trace ---
   at System.Security.Cryptography.ECCngKey.GenerateKey(ECCurve curve)
   at System.Security.Cryptography.ECDiffieHellman.Create(ECCurve curve)
   at TestCore.Program.Main(String[] args) 

The error message is not clear to me. Is that curve really not supported? Or is something wrong in the parameters, but then what exactly?
It would surprise me if the curve is not supported because nistP521 curve is supported and according to this IBM document I found online they are the same: https://www.ibm.com/support/knowledgecenter/en/linuxonibm/com.ibm.linux.z.wskc.doc/wskc_r_ecckt.html
","Thanks all for your help. Eventually I wrote this code which works on .Net Core 2.1 and which is compatible with the .Net Framework To/FromXmlString:
        using (ECDiffieHellmanCng dhBob = new ECDiffieHellmanCng())
        {
            dhBob.KeyDerivationFunction = ECDiffieHellmanKeyDerivationFunction.Hash;
            dhBob.HashAlgorithm = CngAlgorithm.Sha256;
            string xmlBob = ToXmlString(dhBob.PublicKey);
            //Console.WriteLine(xmlBob);

            using (ECDiffieHellmanCng dhAlice = new ECDiffieHellmanCng())
            {
                dhAlice.KeyDerivationFunction = ECDiffieHellmanKeyDerivationFunction.Hash;
                dhAlice.HashAlgorithm = CngAlgorithm.Sha256;
                ECDiffieHellmanPublicKey keyBob = FromXmlString(xmlBob, dhAlice.KeySize);
                byte[] b = dhAlice.DeriveKeyMaterial(keyBob);


                string xmlAlice = ToXmlString(dhAlice.PublicKey);
                ECDiffieHellmanPublicKey keyAlice = FromXmlString(xmlAlice, dhBob.KeySize);
                byte[] b2 = dhBob.DeriveKeyMaterial(keyAlice);

                Console.WriteLine(b.SequenceEqual(b2));
            }
        }

public static string ToXmlString(ECDiffieHellmanPublicKey key)
{
    // the regular ToXmlString from ECDiffieHellmanPublicKey throws PlatformNotSupportedException on .net core 2.1
    ECParameters parameters = key.ExportParameters();
    return string.Format(""<ECDHKeyValue xmlns='http://www.w3.org/2001/04/xmldsig-more#'><DomainParameters><NamedCurve URN='urn:oid:{0}' />"" +
                         ""</DomainParameters><PublicKey><X Value='{1}' xsi:type='PrimeFieldElemType' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' />"" +
                         ""<Y Value='{2}' xsi:type='PrimeFieldElemType' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' /></PublicKey></ECDHKeyValue>"",
        GetOid(parameters.Curve),
        new BigInteger(parameters.Q.X.Reverse().ToArray().Concat(new byte[] { 0 }).ToArray()).ToString(System.Globalization.CultureInfo.InvariantCulture), // watch out for big endian - little endian
        new BigInteger(parameters.Q.Y.Reverse().ToArray().Concat(new byte[] { 0 }).ToArray()).ToString(System.Globalization.CultureInfo.InvariantCulture));
}

public static ECDiffieHellmanPublicKey FromXmlString(string xml, int keySize)
{
    // the regular FromXmlString from ECDiffieHellmanPublicKey throws PlatformNotSupportedException on .net core 2.1
    XDocument doc = XDocument.Parse(xml);
    XNamespace nsSys = ""http://www.w3.org/2001/04/xmldsig-more#"";
    string xString = doc.Element(nsSys + ""ECDHKeyValue"").Element(nsSys + ""PublicKey"").Element(nsSys + ""X"").Attribute(""Value"").Value;
    string yString = doc.Element(nsSys + ""ECDHKeyValue"").Element(nsSys + ""PublicKey"").Element(nsSys + ""Y"").Attribute(""Value"").Value;
    string curve = doc.Element(nsSys + ""ECDHKeyValue"").Element(nsSys + ""DomainParameters"").Element(nsSys + ""NamedCurve"").Attribute(""URN"").Value;
    curve = curve.Replace(""urn:"", """").Replace(""oid:"", """");

    byte[] arrayX = BigInteger.Parse(xString, System.Globalization.CultureInfo.InvariantCulture).ToByteArray(false, true); // watch out for big endian - little endian
    byte[] arrayY = BigInteger.Parse(yString, System.Globalization.CultureInfo.InvariantCulture).ToByteArray(false, true);

    // make sure each part has the correct and same size
    int partSize = (int) Math.Ceiling(keySize / 8.0);
    ResizeRight(ref arrayX, partSize);
    ResizeRight(ref arrayY, partSize);

    ECParameters parameters = new ECParameters() { Q = new ECPoint() { X = arrayX, Y = arrayY }, Curve = GetCurveByOid(curve) };
    ECDiffieHellman dh = ECDiffieHellman.Create(parameters);
    return dh.PublicKey;
}

/// <summary>
/// Resize but pad zeroes to the left instead of to the right like Array.Resize
/// </summary>
public static void ResizeRight(ref byte[] b, int length)
{
    if (b.Length == length)
        return;
    if (b.Length > length)
        throw new NotSupportedException();

    byte[] newB = new byte[length];
    Array.Copy(b, 0, newB, length - b.Length, b.Length);
    b = newB;
}

private static ECCurve GetCurveByOid(string oidValue)
{
    // there are strange bugs in .net core 2.1 where the createfromvalue doesn't work for the named curves
    switch (oidValue)
    {
        case ""1.2.840.10045.3.1.7"":
            return ECCurve.NamedCurves.nistP256;
        case ""1.3.132.0.34"":
            return ECCurve.NamedCurves.nistP384;
        case ""1.3.132.0.35"":
            return ECCurve.NamedCurves.nistP521;
        default:
            return ECCurve.CreateFromValue(oidValue);
    }
}

private static string GetOid(ECCurve curve)
{
    // there are strange bugs in .net core 2.1 where the value of the oid of the named curves is empty
    if (curve.Oid.FriendlyName == ECCurve.NamedCurves.nistP256.Oid.FriendlyName)
        return ""1.2.840.10045.3.1.7"";
    else if (curve.Oid.FriendlyName == ECCurve.NamedCurves.nistP384.Oid.FriendlyName)
        return ""1.3.132.0.34"";
    else if (curve.Oid.FriendlyName == ECCurve.NamedCurves.nistP521.Oid.FriendlyName)
        return ""1.3.132.0.35"";
    else
        return curve.Oid.Value;
}

","304","<c#><.net><.net-core><bouncycastle><diffie-hellman>","4","1","2","2018-10-30 20:28:11","53072408","4","1","968698","","2018-10-18 11:21:11","2018-10-14 08:50:45",""
"28140068","Ephemeral Diffie-Hellman requires certificate?","In Ephemeral Diffie-Hellman, the key pair is generated every time. 
In practice, does this mean I never need a certificate? Or that means I need a new cert every single time? 
","
In practice, does this mean I never need a certificate? Or that means I need a new cert every single time?

It means that the generation of the key is independent of the certificate.
You could use DH without certificate (anonymous DH), but than the connection would be open to man-in-the-middle attacks. Thus in practices DH is used for key generation but the certificate is still used to make sure we talk to the right peer (identification).
","297","<security><ssl><diffie-hellman><public-key-exchange>","0","0","1","2015-01-25 18:57:11","28140192","1","","","","","2015-01-25 18:46:06",""
"39389156","How the set the SFTP config to download/upload files? I got some troubles about the DiffieHellMan.dll","I strongly-named all the tree packages (DiffieHellman.dll, Org.Mentalis.Security.dll, Tamir.SharpSSH.dll), and I already invoked the packages to my application which has to be strongly-named.
But there is an exception which I cannot fix. I wrote another demo with no strongly-name packages which works OK, though.
Connect Exception: Tamir.SharpSsh.jsch.JSchException: Session.connect: System.IO.FileLoadException: Could not load file or assembly 'DiffieHellman, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. A strongly-named assembly is required. (Exception from HRESULT: 0x80131044)
File name: 'DiffieHellman, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'
   at Tamir.SharpSsh.jsch.jce.DH.getE()
   at Tamir.SharpSsh.jsch.DHG1.init(Session session, Byte[] V_S, Byte[] V_C, Byte[] I_S, Byte[] I_C)
   at Tamir.SharpSsh.jsch.Session.receive_kexinit(Buffer buf)
   at Tamir.SharpSsh.jsch.Session.connect(Int32 connectTimeout)

","I finally fixed this problem. 
The Tamir.SharpSSH.dll call the DiffieHellman.dll's version is 1.0.0.11, and I call the DiffieHellman.dll's version is 0.0.0.0. 
This is why I can not load the package. 
My solution likes this:
Download the DiffieHellman's source code to recompiled it to the 1.0.0.11 version and strong named it. 
","290","<c#><sftp><diffie-hellman>","0","0","1","2016-09-09 06:48:44","","0","0","45816","","2016-09-08 12:36:24","2016-09-08 10:58:04",""
"43860956","How to get Prime and Generator value from dhparam.pem?","I use command in openssl to create a dhparam.pem.
    openssl dhparam -outform PEM 2048 -out dhparam.pem

I need to calculate A = g^a mod p. With g is generator value and p is prime value from dhparam.pem file.
I am using C#, so How do I get value of g and p from dhparam.pem ?
Here is example of dhparam.pem
    -----BEGIN DH PARAMETERS-----
    MIIBCAKCAQEAwJuVT+cebJvz0CSiOrdTA41St5XU+NcmE6decZxTcs449IO7rv4U
    Tts07i8RMqWQbDpqB7al9TU68QPDvG/0AzLfz9otzafS8GFr3WAsEt76oYB35j+m
    mwXlLorcA6RtZyq5mmoXLOxy03uGB/mXcWNvHjrps8nDcH439/TDlu4ZHKVxuEkc
    zWHssdqBMSNK0cMPnS1p8ECmnf6qNeP0gIRkLKrMTeY9vf7G0mR2phnyqGsFvgNy
    MSpa6X8vxJM0NzQ2uYyXqfFcXqEjIVQYoDSTaoeGvoNRIrzJc2xu0r2U7QjPHzVV
    6WA4yCfVE+M9Xgjyt/5cjYKz1CyE51+gcwIBAg==
    -----END DH PARAMETERS-----

","","285","<c#><.net><pem><diffie-hellman>","2","","0","2017-05-09 04:09:25","","2","","","","","2017-05-09 04:09:25",""
"10908227","Is there a way to view the ECDH Shared Secret generated within microsoft CNG?","I am trying to perform a ECDH key exchange between MS CNG and another device.  In order to debug things, I would like to see what shared secret is being generated in CNG so i can compare it with the secret generated by my other device. Anybody know of a way to do this? 
","Take a look at CNG documentation at MSDN: NCryptSecretAgreement function. The same function is accessible from .NET.
","274","<encryption><encryption-asymmetric><diffie-hellman><cng>","1","-1","1","2012-07-25 23:59:55","","2","1","","","","2012-06-06 04:37:29",""
"31565562","Key Exchange between SQL Servers","I have to implement ""secure communication"" between two Microsoft SQL servers. ""Communication"" in this case is an asynchronous high-latency operation and I have to work with the least possible amount of round trips. There is no shared secret available between the two servers, and no secure channel. The communication equipment does not support secure transmission.
(I know that under these circumstances I can't prevent against active MitM attacks, but that's above my paygrade, I just want to get everything else right.)
SQL Server allows for builtin AES256 encryption/decryption which I want to use, just that I have to make a key exchange beforehand.
I thought to use some builtin DHKE, since it is always better not to implement anything security-related by myself. Has SQL Server builtin DHKE functions, or can I setup SQL server to reliably support DHKE? Is there any other option I should look for?
","","270","<sql-server><security><diffie-hellman>","1","","0","2015-07-22 14:09:14","","6","","","","","2015-07-22 14:09:14",""
"42007978","Qt Android error: Diffie-Hellman parameters are not valid","In a Qt app I make a GET request to https://www.google.es using QNetworkRequest. In Linux desktop this works fine, I get the page's content, but when I run it in my Android device I get the following error in my QNetworkReply:

Diffie-Hellman parameters are not valid

Qt version is 5.8, device is Samsung S6 running Android 6.0.1. The problem happens with any https URL.
Anyone knows the meaning of this message? I've been googling for two hours with no result... Thanks a lot!!
Update: I'm not using any custom SSL configuration, just a QNetworkAccessManager and a QNetworkRequest. Calling QSslConfiguration::defaultConfiguration().diffieHellmanParameters().error() returns 2 (UnsafeParametersError) and QSslConfiguration::defaultConfiguration().diffieHellmanParameters().isValid() returns false.
","","266","<android><qt><ssl><diffie-hellman>","3","","0","2017-04-03 09:39:48","","2","2","1406158","","2017-03-13 09:21:53","2017-02-02 16:56:51",""
"26176759","Self signed SSL key generation for a specific application","I am trying to generate the re-generate the expired keys in this article.
I followed the steps in this link, but the certificates did not work. 
The required certificates are as follows:
client.pem
dh1024.pem
root.pem
server.pem

In my understanding dh is a diffie-hellman key. root.pem is used to sign client and server certificates. Anybody know's a good tutorial on generating the keys in the above manner so I can regenerate they keys for the example in this article.
","","264","<ssl><openssl><client-server><ca><diffie-hellman>","0","","0","2014-10-03 10:06:59","","4","","207421","","2014-10-03 10:06:59","2014-10-03 09:48:19",""
"6017615","Encrpytion between iPhone and a php page with Key exchange","I need to send data to and from a php-page from my iPhone application and now I have a couple of questions to get it right the first time, and the best result:)
Lets start with the transfer of data.
Which is the best way to get the data from a php-page?
Option 1: Use NSString in a background thread
[[NSString alloc] initWithContentsOfURL:url];

Or Option 2: Use NSURLConnection with delegates?
Then we have the encryption part. I have google a little bit but haven't found so much. I need to be able to encrypt and decrypt on both sides (both in the iPhone app and on the php-page). What encryption is best for this? Are there any implementations of any good encryption?
And last, for key-exchange. I thinking of using diffie-hellman, which ""require"" large prime-numbers. Are there any easy way to generate such thing (on both the iPhone and the php-page)?
","Have you considered using HTTPS? SSL/TLS seems to match what you're looking for in terms of encryption, key exchange, etc. HTTP on top of this will get you to transfer data to the PHP page.
","254","<php><iphone><encryption><public-key-encryption><diffie-hellman>","0","1","1","2011-05-16 12:54:34","","1","","","","","2011-05-16 12:48:28",""
"32593249","Weak ethereal DH key Activemq","I'm trying a set up a secure websocket in activemq using CA certs, but I keep getting this message in the browser:

SSL received a weak ephemeral Diffie-Hellman key in Server Key Exchange handshake message. (Error code: ssl_error_weak_server_ephemeral_dh_key)

I believe this is related to the cipher suite, but I'm A) not finding using the right cipher suite or B) configuring it in the wrong area of Apache Activemq.  Currently, I've been adjusting the configuration of ssl in transport connector in activemq.xml( http://activemq.apache.org/ssl-transport-reference.html).  However, I know that activemq uses a jetty server and i'm wondering if I should be configuring the suite in jetty.xml a la How to config local Jetty ssl to avoid weak phermeral DH key error?.
So, my questions are, is this the right approach?  If so, what's the correct cipher suite for activemq?  
The Java JDK version 1.7.0_79
","Alright, I was able to create a work around by reading the activemq-apollo guide and then matching it to closed JIRA's in activemq:
http://activemq.apache.org/apollo/documentation/user-manual.html#Working_Around_Java_7_SSL_Bugs
https://issues.apache.org/jira/browse/AMQ-4520
","245","<ssl><activemq><wss><diffie-hellman>","1","0","1","2015-09-16 22:17:22","32619704","0","1","-1","","2017-05-23 11:51:49","2015-09-15 18:37:12",""
"45107060","TOTP and Diffie-Hellman key exchange using Java","I would like to ask how do I carry out a client server application that could do the operations of one time password and diffie hellman key exchange at the same time using java? The scenario is that the one time password is to be encrypted using the diffie hellman shared keys. The client will then send the encrypted OTP to the server and the server checks if it matches with the one it generates. I am not sure if the operations can be carried out together 
","first of all you need to execute hellman key exchange and generate shared secret key between server and client. then after client take the key and perform encryption using shared secret key with some encryption algorithm and send it to server server decrypt the data. so you can generate shared secrete key one time for all encryption or you can generate all time. but i can suggest you use asymmetric key cryptography(RSA, ECC) it will reduce overhead of  hellman key exchange. and it will more secure as compare with symmetric key cryptography.   
","237","<java><authentication><diffie-hellman><one-time-password>","0","0","1","2017-07-19 16:19:54","","0","","409228","","2017-07-19 16:19:54","2017-07-14 15:49:27",""
"32567478","Processing BigInteger issues","Assume the following Diffie-Hellman info which can also be found on this page
1)P
string givenp = ""00e655cc9e04f3bebae76ecca77143ef5c4451876615a9f8b4f712b8f3bdf47ee7f717c09bb5b2b66450831367d9dcf85f9f0528bcd5318fb1dab2f23ce77c48b6b7381eed13e80a14cca6b30b5e37ffe53db15e2d6b727a2efcee51893678d50e9a89166a359e574c4c3ca5e59fae79924fe6f186b36a2ebde9bf09fe4de50453"";
        BigInteger p = new BigInteger(HexToBytesv2(givenp));

2)G
BigInteger g = new BigInteger(2);

3)Merchant  private key
string merchantPrivateKeyHEX = ""48887dfd090d175e33beea29e7b38334299289069f9ab492b67807905faa98d96d22d79205bef03f14af093f1797b904734132c34a388fdc79e20497bfa1465fec2aac4fabdf3bb0c9be8685d20f7bfe0346a9abdf7fa89838c3fa9ca6abdb70bea66795ab6699cc154db59490e4159f142f7bddff603c1d3d6c4fff8177e11d"";
        BigInteger a = new BigInteger(HexToBytesv2(merchantPrivateKeyHEX));

Using the formula publickey = g ^ a mod p I should get the public key provided in the initial link, yet when executing
BigInteger A = BigInteger.ModPow(g, a, p);
ToHex(A.ToByteArray())

the result I get is
00f85c41e84446ecfe43c9911df31d3cf60d83642afd496b741363290139badf75f8b8c5c010dda2446dd483dc553b6c2698c16c9d082391677785f81d54bc9c7c45f8b6d5bdb3e49fec7f5522b880c8c753fb7d3ff2c81e47dcb27d52842def40a812dc95cc679575baf237a955ee9944bd0797326f2a0a58c6c087f9b0b9e82c

instead of
00d9abd78c93dfddeb920d57d6513126d8f1118c9237a45101408dbffe6cfd95b011a016e4e0ab8aef0601e836a452b8bb88be7ca71e4f22f97aa65f8358ee69348d1227d65db6e53641d1a6542aa4be4b4adc75fac816af79a8e3f5097f8313e7b725df37eadc8c774e2033dfa99c95ccef333bf402b066198c30481e2a83875c

Any ideas? I must be missing pretty obvious but I am not sure what that might be.
P.S. Adding the function being used:
 public static byte[] HexToBytesv2(this string hex)
    {
        if (hex.Length % 2 == 1)
            hex = '0' + hex;

        byte[] ret = new byte[hex.Length / 2];

        for (int i = 0; i < ret.Length; i++)
            ret[i] = Convert.ToByte(hex.Substring(i * 2, 2), 16);

        return ret;

    }

  public static string ToHex(byte[] ba)
    {
        StringBuilder hex = new StringBuilder(ba.Length * 2);
        foreach (byte b in ba)
            hex.AppendFormat(""{0:x2}"", b);
        return hex.ToString();

    }

","It's an endian problem.
I've adjusted your encoding and decoding and now get the answer you're looking for:
public static byte[] HexToBytesv2(string hex)
{
    if (hex.Length % 2 == 1)
        hex = '0' + hex;

    byte[] ret = new byte[hex.Length / 2];

    for (int i = 0; i < ret.Length; i++)
        ret[i] = Convert.ToByte(hex.Substring(hex.Length - (i+1) * 2, 2), 16);

    return ret;

}

public static string ToHex( byte[] bytes)
{
    var sb = new StringBuilder();
    foreach (var b in bytes.Reverse())
    {
        sb.AppendFormat(""{0:x2}"", b);
    }
    return sb.ToString();
}

FYI I used LinqPad and the main method is your code from the question (as adjusted) with checks that the data has not lost anything on the way:
void Main()
{
    string givenp = ""00e655cc9e04f3bebae76ecca77143ef5c4451876615a9f8b4f712b8f3bdf47ee7f717c09bb5b2b66450831367d9dcf85f9f0528bcd5318fb1dab2f23ce77c48b6b7381eed13e80a14cca6b30b5e37ffe53db15e2d6b727a2efcee51893678d50e9a89166a359e574c4c3ca5e59fae79924fe6f186b36a2ebde9bf09fe4de50453"";
    BigInteger p = new BigInteger(HexToBytesv2(givenp));
    (ToHex(p.ToByteArray()) == ""00e655cc9e04f3bebae76ecca77143ef5c4451876615a9f8b4f712b8f3bdf47ee7f717c09bb5b2b66450831367d9dcf85f9f0528bcd5318fb1dab2f23ce77c48b6b7381eed13e80a14cca6b30b5e37ffe53db15e2d6b727a2efcee51893678d50e9a89166a359e574c4c3ca5e59fae79924fe6f186b36a2ebde9bf09fe4de50453"").Dump();
    BigInteger g = new BigInteger(2);
    string merchantPrivateKeyHEX = ""48887dfd090d175e33beea29e7b38334299289069f9ab492b67807905faa98d96d22d79205bef03f14af093f1797b904734132c34a388fdc79e20497bfa1465fec2aac4fabdf3bb0c9be8685d20f7bfe0346a9abdf7fa89838c3fa9ca6abdb70bea66795ab6699cc154db59490e4159f142f7bddff603c1d3d6c4fff8177e11d"";
    BigInteger a = new BigInteger(HexToBytesv2(merchantPrivateKeyHEX));
    (ToHex(a.ToByteArray()) == ""48887dfd090d175e33beea29e7b38334299289069f9ab492b67807905faa98d96d22d79205bef03f14af093f1797b904734132c34a388fdc79e20497bfa1465fec2aac4fabdf3bb0c9be8685d20f7bfe0346a9abdf7fa89838c3fa9ca6abdb70bea66795ab6699cc154db59490e4159f142f7bddff603c1d3d6c4fff8177e11d"").Dump();
    BigInteger A = BigInteger.ModPow(g, a, p);
    (ToHex(A.ToByteArray()) == ""00f85c41e84446ecfe43c9911df31d3cf60d83642afd496b741363290139badf75f8b8c5c010dda2446dd483dc553b6c2698c16c9d082391677785f81d54bc9c7c45f8b6d5bdb3e49fec7f5522b880c8c753fb7d3ff2c81e47dcb27d52842def40a812dc95cc679575baf237a955ee9944bd0797326f2a0a58c6c087f9b0b9e82c"").Dump();
    (ToHex(A.ToByteArray()) == ""00d9abd78c93dfddeb920d57d6513126d8f1118c9237a45101408dbffe6cfd95b011a016e4e0ab8aef0601e836a452b8bb88be7ca71e4f22f97aa65f8358ee69348d1227d65db6e53641d1a6542aa4be4b4adc75fac816af79a8e3f5097f8313e7b725df37eadc8c774e2033dfa99c95ccef333bf402b066198c30481e2a83875c"").Dump();
}

Before I swapped the ordering, and included the .Concat(new byte[] { 0 }).ToArray() from your original question, the output was:
True
True
True
False

And now it's:
True
True
False
True

The other issue you're seeing is BigInteger.Parse and the Byte[] constructor always expect the top bit of the first nibble or last byte respectively to be the sign bit. So you need to include the extra 0 character or byte respectively to avoid that.
","228","<c#><.net><biginteger><diffie-hellman>","3","3","2","2016-08-26 12:21:51","32568073","3","","256431","","2016-08-26 12:21:51","2015-09-14 14:33:30",""
"32567478","Processing BigInteger issues","Assume the following Diffie-Hellman info which can also be found on this page
1)P
string givenp = ""00e655cc9e04f3bebae76ecca77143ef5c4451876615a9f8b4f712b8f3bdf47ee7f717c09bb5b2b66450831367d9dcf85f9f0528bcd5318fb1dab2f23ce77c48b6b7381eed13e80a14cca6b30b5e37ffe53db15e2d6b727a2efcee51893678d50e9a89166a359e574c4c3ca5e59fae79924fe6f186b36a2ebde9bf09fe4de50453"";
        BigInteger p = new BigInteger(HexToBytesv2(givenp));

2)G
BigInteger g = new BigInteger(2);

3)Merchant  private key
string merchantPrivateKeyHEX = ""48887dfd090d175e33beea29e7b38334299289069f9ab492b67807905faa98d96d22d79205bef03f14af093f1797b904734132c34a388fdc79e20497bfa1465fec2aac4fabdf3bb0c9be8685d20f7bfe0346a9abdf7fa89838c3fa9ca6abdb70bea66795ab6699cc154db59490e4159f142f7bddff603c1d3d6c4fff8177e11d"";
        BigInteger a = new BigInteger(HexToBytesv2(merchantPrivateKeyHEX));

Using the formula publickey = g ^ a mod p I should get the public key provided in the initial link, yet when executing
BigInteger A = BigInteger.ModPow(g, a, p);
ToHex(A.ToByteArray())

the result I get is
00f85c41e84446ecfe43c9911df31d3cf60d83642afd496b741363290139badf75f8b8c5c010dda2446dd483dc553b6c2698c16c9d082391677785f81d54bc9c7c45f8b6d5bdb3e49fec7f5522b880c8c753fb7d3ff2c81e47dcb27d52842def40a812dc95cc679575baf237a955ee9944bd0797326f2a0a58c6c087f9b0b9e82c

instead of
00d9abd78c93dfddeb920d57d6513126d8f1118c9237a45101408dbffe6cfd95b011a016e4e0ab8aef0601e836a452b8bb88be7ca71e4f22f97aa65f8358ee69348d1227d65db6e53641d1a6542aa4be4b4adc75fac816af79a8e3f5097f8313e7b725df37eadc8c774e2033dfa99c95ccef333bf402b066198c30481e2a83875c

Any ideas? I must be missing pretty obvious but I am not sure what that might be.
P.S. Adding the function being used:
 public static byte[] HexToBytesv2(this string hex)
    {
        if (hex.Length % 2 == 1)
            hex = '0' + hex;

        byte[] ret = new byte[hex.Length / 2];

        for (int i = 0; i < ret.Length; i++)
            ret[i] = Convert.ToByte(hex.Substring(i * 2, 2), 16);

        return ret;

    }

  public static string ToHex(byte[] ba)
    {
        StringBuilder hex = new StringBuilder(ba.Length * 2);
        foreach (byte b in ba)
            hex.AppendFormat(""{0:x2}"", b);
        return hex.ToString();

    }

","You're doing a number of unnecessary conversions and they're introducing an error somewhere.
If you remove the broken string-byte[]-BigInteger-byte[]-string steps and let BigInteger itself do the work for you then you'll generate the expected result:
string givenp = ""00e655cc9e04f3bebae76ecca77143ef5c4451876615a9f8b4f712b8f3bdf47ee7f717c09bb5b2b66450831367d9dcf85f9f0528bcd5318fb1dab2f23ce77c48b6b7381eed13e80a14cca6b30b5e37ffe53db15e2d6b727a2efcee51893678d50e9a89166a359e574c4c3ca5e59fae79924fe6f186b36a2ebde9bf09fe4de50453"";
var p = BigInteger.Parse(givenp, NumberStyles.HexNumber);

var g = new BigInteger(2);

var merchantPrivateKeyHEX = ""48887dfd090d175e33beea29e7b38334299289069f9ab492b67807905faa98d96d22d79205bef03f14af093f1797b904734132c34a388fdc79e20497bfa1465fec2aac4fabdf3bb0c9be8685d20f7bfe0346a9abdf7fa89838c3fa9ca6abdb70bea66795ab6699cc154db59490e4159f142f7bddff603c1d3d6c4fff8177e11d"";
var a = BigInteger.Parse(merchantPrivateKeyHEX, NumberStyles.HexNumber);

var publicKey = BigInteger.ModPow(g, a, p);
Console.WriteLine(publicKey.ToString(""x""));  // displays 0d9abd7...

","228","<c#><.net><biginteger><diffie-hellman>","3","3","2","2016-08-26 12:21:51","32568073","3","","256431","","2016-08-26 12:21:51","2015-09-14 14:33:30",""
"47614199","c++ openssl EVP_PKEY_Derive_set_peer returns 0","Using OpenSSL, I've created my Diffie-Hellman Private/Public keys and am trying to derive the shared secret key. But, the function EVP_PKEY_derive_set_peer() always fails. Below is the function that should derive the key. I based the code off of the code found at https://github.com/cfairweather/ec-diffie-hellman-openssl/wiki.  Any help would be appreciated. 
unsigned char* deriveSecretKey(key* k, const char *peerPublicKey, int peerPublicKeyLength, int *sharedSecretLength)
{
    unsigned char* sharedSecret;
    //We can reconstruct an EVP_PKEY on this side to represent the peer key by parsing their public key we received from them.
    //New memory buffer that we can allocate using OpenSSL's method
    BUF_MEM *bptr = BUF_MEM_new();
    BUF_MEM_grow(bptr, peerPublicKeyLength);
    //Create a new BIO method, again, memory
    BIO* bp = BIO_new(BIO_s_mem());

    memcpy(bptr->data, peerPublicKey, peerPublicKeyLength);

    BIO_set_mem_buf(bp, bptr, BIO_NOCLOSE);

    k->peerkey = PEM_read_bio_PUBKEY(bp, NULL, NULL, NULL);

    if (k->peerkey == NULL)
    {
        printf(""Peer Key is null.\n"");
    }

    //Memory cleanup from read/copy operation
    BIO_free(bp);
    BUF_MEM_free(bptr);

    //Now, let's derive the shared secret

    size_t secret_len = 0;

    /* Create the context for the shared secret derivation */
    if(NULL == (k->ctx_derive = EVP_PKEY_CTX_new(k->privkey, NULL)))
    {
        printf(""Could not create the context for the shared secret derivation\n"");
        return NULL;
    }

    /* Initialise */
    if(1 != EVP_PKEY_derive_init(k->ctx_derive))
    {
        printf(""Could not init derivation context\n"");
        return NULL;
    }

    /* Provide the peer public key */
    // This call fails
    if(1 != EVP_PKEY_derive_set_peer(k->ctx_derive, k->peerkey))
    {
        printf(""Could not set the peer key into derivation context\n"");
        return NULL;
    }

    /* Determine buffer length for shared secret */
    if(1 != EVP_PKEY_derive(k->ctx_derive, NULL, &secret_len))
    {
        printf(""Could not determine buffer length for shared secret\n"");
        return NULL;
    }

    /* Create the buffer */
    if(NULL == (sharedSecret = (unsigned char*) OPENSSL_malloc(secret_len)))
    {
        printf(""Could not create the sharedSecret buffer\n"");
        return NULL;
    }

    /* Dervive the shared secret */
    if(1 != (EVP_PKEY_derive(k->ctx_derive, sharedSecret, &secret_len)))
    {
        printf(""Could not dervive the shared secret\n"");
        return NULL;
    }

    (*sharedSecretLength) = (int)secret_len;

    // Hash the secret
    unsigned char key[] = ""df2677fbc0ddd3b4e059b82207e7840fbe7fd91a64b68935135b4f42b36899c2"";
    unsigned char iv[] = ""17620daa95f8cd7dfef9af3a516a1970"";

    int secretLength = encrypt(sharedSecret (*sharedSecretLength),key,iv,sharedSecret);

    return sharedSecret;
}

","","227","<c++><openssl><key><diffie-hellman>","1","","0","2017-12-03 00:55:25","","1","","","","","2017-12-03 00:55:25",""
"34300276","ruby openssl diffie hellman implementation","I'm having some trouble implementing some security measures over a network for one of my school projects. We already have a full network running using Ruby. We're trying to use AES 256 CBC using the OpenSSL library. We have experimented with using Diffie Hellman, but this is where we're having trouble:
node 1 runs:
require 'openssl'
dh1 = OpenSSL::PKey::DH(256)
der = dh1.public_key.to_der
###we would send der to n2 here

Apparently it's alright to send der over to n2, so n2 would have this portion of code:
require 'openssl'
dh2 = OpenSSL::PKey::DH(der)

and now they have each others' information. However wouldn't a node which was listening to traffic be able to pick this message up and be able to have dh1's key? Having trouble wrapping my head around this.
","Yes a listening node could have dh1's public key. That is how Diffie Hellman works. The eavesdropper does not know either private key and does not know the shared private key. Without knowing one of the private keys it cannot solve for the shared key.
The modulo equations are setup such that when dh2 raises dh1's public key to the value of its own private key (dh1_public_key^dh2_private_key) the result of the equation is the shared key, and vice versa. 
","222","<ruby><openssl><diffie-hellman>","-1","0","1","2015-12-15 22:32:00","","1","","","","","2015-12-15 22:03:26",""
"39536405","Details of TLS server key exchange message","This is essentially the same as my other question about DH parameters (which didn't get any answers), but I'm interested in getting information about the TLS server key exchange message(s) that are sent during the TLS handshake.
Are these messages -- or the information that comes from them like the negotiated ephemeral keys -- available at all through the Java API? I'm using Java SSLSocketFactory to obtain an SSLSocket and then connecting using that; there are no other APIs layered on top of it (like Apache http-client) that I have to break-through in order to get down to this level.
I'm just not sure if Java exposes this information at all. I tried using a HandshakeCompletedListener but that doesn't seem to provide me with any of the information I seek.
Does anyone know if/how this can be done?
","The Messages are not available through the API, however you can use libpcap to capture packets and then parse through the handshake data that comes through it and store it in your program.  
Following the reference from here http://download.java.net/jdk7/archive/b123/docs/api/javax/net/ssl/SSLSocket.html
I do not think it is possible to  print the DH parameters from the API. 
","212","<java><ssl><diffie-hellman><public-key-exchange>","0","0","1","2016-09-17 17:08:04","","2","","-1","","2017-05-23 10:27:25","2016-09-16 16:40:14",""
"47590499","Concept TLS Handshake Diffie Hellman","I try to understand the TLS Handshake with DH. I googled the concepts and I think I understood the basics. But there are somethings I'm still struggeling with.
Client and Server have to agree on the DH Params g and p. Who makes the suggestion for these parameters, always the server?
On various images I saw, that the first step is the exchange of a client random/server random. What are they used for? 
To calculate the pre-master-secret client and server only need to exchange g, p and their calculated public-value (client-public-value -> g,p and clients-Secret-Value; server-public-value -> g,p and server-secret-value. 
Why these client random and server random as a first step?
see: Image1; Image2
What did I missunderstood?
Thank you guys
","","207","<ssl><handshake><diffie-hellman>","0","","0","2017-12-01 09:40:04","","3","","","","","2017-12-01 09:40:04",""
"34430295","Android Diffie hellman BN_mod_inverse 0306E06C error","I am trying to implement Diffie Hellman Algo between client and server. For that I am using below code to generate Public key
Shared p,g and public key from server end
DH p:E1C66AFAB0E8518914EE1E58DDD9B337
DH g:05
DH public key(95D1FAFBFE8096BFF6C528A571B307B4)

Android code below
final BigInteger p = new
BigInteger(""E1C66AFAB0E8518914EE1E58DDD9B337"", 16);//convert hex to BigInteger
final BigInteger g = new BigInteger(""05"", 16);//convert hex to BigInteger
final int l = 128;

KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""DH"");
keyGen.initialize(new DHParameterSpec(p, g, l));
KeyPair ackp = keyGen.generateKeyPair(); 
PrivateKey priKey = ackp.getPrivate();
PublicKey pubKey = ackp.getPublic();

Output: pubKey value 
OpenSSLDHPublicKey{
        Y=8d664db67d53602ef3f2eb5dce616fb9,
        P=b7f51eb91d787dbcd74ab1d752abf207,
        G=5}

So far, so good but when I am using public key(95D1FAFBFE8096BFF6C528A571B307B4 shared by server end) to generate symmetric/final key 
Code:
final BigInteger p = new
    BigInteger(""95D1FAFBFE8096BFF6C528A571B307B4"", 16);//convert hex to BigInteger
    final BigInteger g = new BigInteger(""05"", 16);//convert hex to BigInteger
    final int l = 128;

    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""DH"");
    keyGen.initialize(new DHParameterSpec(p, g, l));
    KeyPair ackp = keyGen.generateKeyPair(); 
    PrivateKey priKey = ackp.getPrivate();
    PublicKey pubKey = ackp.getPublic();

I am getting following error:
12-23 12:16:35.801: W/System.err(12512): java.lang.RuntimeException: error:0306E06C:bignum routines:BN_mod_inverse:no inverse

What am I doing wrong. Any help will be appreciated :)
","","206","<android><algorithm><security><public-key-encryption><diffie-hellman>","1","","0","2015-12-23 06:59:59","","0","1","","","","2015-12-23 06:59:59",""
"48032215","Explanation of Diffie-Hellman Key Exchange using colors?","I was checking this explanation of Diffie-Hellman algorithm using colors.
Alice and Bob want to communicate privately.

A Common Color C is agreed upon by Alice and Bob.
Eve knows about the C because it is communicated over the Network.
Alice mixes her Private Color A to C and sends Alice's Mixture AC over the Network.
Bob mixes his Private Color B to Yellow and sends Bob' Mixture BC over the Network.
Alice and Bob add their own color to the other's mixture BCA = ACB.
They arrive at a common, color.

However, I have the following question?
If Eve knows that the common color is C, and Alice's Mixture AC, can't she deduce Alice's secret color using AC - C? At-least in RGB color space, this is easy to calculate right?
In summary, will this algorithm work if the common color C is shared over the network?
PS: I am assuming that volume of the colors is the same as the video doesn't talk about quantity.
","Short answer: Yes, it will work. That is kind of the whole point of this concept. 
As for that particular explanation (using paint as an example), it is just that - a simplified example to make the higher level concept understandable. 
That higher level concept is in this case, that certain known pieces of data (the known color) can be combined with private / unknown pieces of data (the two ""private"" colors that are added by Alice and Bob) in such a way that only the intended parties (Alice and Bob) can make use of the resulting product. 
In this simplified example, that resulting product is a secret color. In actual cryptography, the result is a secret message of some kind. 
The paint is a metaphor. You should not try to over-analyze it. If you are thinking about RGB-codes and volumes of colored liquids, I'm afraid you're missing the point.

Addition/ update: For a slightly more technical description of the Diffie-Hellman exchange, see this answer provided at security.stackexchange.com. As an answer to this current question, I'd like to quote a comment posted below the answer in the link: 

I think it's worth mentioning that the reason this is secure is that,
  unlike normal log(x), the modular log(x) is thought to be hard to
  compute.

That ""hard to compute"" part is what is alluded to with the metaphor of paint that is ""hard to separate once it is mixed"".
","203","<security><diffie-hellman>","0","2","1","2018-01-03 08:38:54","48062612","5","","452102","","2017-12-30 11:45:22","2017-12-30 08:22:28",""
"54220584","How to import private key from X509Certificate2 into CngKey on NET 4.5.1","The version of .NET that I am using (4.5.1) has no GetCngPrivateKey() method in X509Certificate2. Nothing I have found works.
The .NET version I am using is, unfortunately, not negotiable.
I'm trying to pull something like this off:
X509Certificate2 cert = new X509Certificate2(@""alice.p12"", ""password"", X509KeyStorageFlags.MachineKeySet | X509KeyStorageFlags.Exportable);
CngKey ck = CngKey.Import(cert.PrivateKey) // Fake line - not possible this way
using (var alice = new ECDiffieHellmanCng(ck))
{
    // ...
}

Again, there are no methods available to me such as GetCngPrivateKey(), HasCngKey(), GetRSAPrivateKey(), and so on.
* UPDATE *
All of these Import attempts fail with exceptions:
RSACryptoServiceProvider rsa = cert.PrivateKey as RSACryptoServiceProvider;
var cspBlob = rsa.ExportCspBlob(true);
CngKey a = CngKey.Import(cspBlob, CngKeyBlobFormat.EccPrivateBlob);
CngKey a = CngKey.Import(cspBlob, CngKeyBlobFormat.GenericPrivateBlob);
cspBlob = rsa.ExportCspBlob(false);
CngKey a = CngKey.Import(cspBlob, CngKeyBlobFormat.EccPrivateBlob);
CngKey a = CngKey.Import(cspBlob, CngKeyBlobFormat.GenericPrivateBlob);

","","189","<c#><pkcs#12><diffie-hellman><ecdh>","0","","0","2019-01-16 16:35:05","","3","","5861178","","2019-01-16 16:35:05","2019-01-16 15:43:00",""
"30580533","In java SSL why is Diffie Hellman Key Exchange always using the same modulus and base?","I wrote a test client in java using the HttpsURLConnection class and connected to Tomcat 8.
I ran with the following settings
-Dhttps.cipherSuites=TLS_DH_anon_WITH_AES_256_CBC_SHA
-Dhttps.cipherSuites=TLS_DHE_RSA_WITH_AES_128_CBC_SHA
From the SSL debugging a see the DH Modulus and DH Base are always the same.  I thought the DHE would cause the modulus and base to change for each connection.
Are these values hard coded into the JVM?  Why do they stay the same even for DHE?
","Consider having a look at the Sample program in the Oracle documentation for Diffie Hellman Key Exchange. 
As long as the run(String mode) method is invoked with ""GENERATE_DH_PARAMS"", the base and modulus parameters are generated.
","183","<java><ssl><diffie-hellman>","1","0","1","2015-06-01 19:00:01","","0","","","","","2015-06-01 18:23:32",""
"53265077","Java 8 Diffie Hellman key size issues with 32 bit linux","after upgrading our java from 1.7 to 1.8 on an old 32 bit linux system, we receive the following error message while communicating with a webservice:

Caused by: java.security.InvalidAlgorithmParameterException: DH key size must be multiple of 64, and can only range from 512 to 2048 (inclusive). The specific key size 4096 is not supported

The linux distribution is:

uname -a 
Linux XXX-XXX-S018 2.6.16.21-0.8-default #1 Mon Jul 3
  18:25:39 UTC 2006 i686  i686 i386 GNU/Linux

The distribution:

cat /etc/*release
LSB_VERSION=""core-2.0-noarch:core-3.0-noarch:core-2.0-ia32:core-3.0-ia32""
  SUSE Linux Enterprise Server 10 (i586)
  VERSION = 10

The Java Version we are using (32 bit and 64 bit the same releases)

Java Version:
jdk1.8.0_151

The strange thing is, after downgrading to java 1.7 it works without any problems. 
Also the same application runs on a different 64 bit system (with java 1.8) - so we assume that this might be an issue with os architecture (32 bit), the age of the os (in this case from 2006) and java.
We found some bug reports regarding the open JDK that the maximum length was 2048 - but we are using the regular JDK from oracle in the moment.
Thanks for your help,
Hauke
","please read https://www.oracle.com/technetwork/java/javase/8u151-relnotes-3850493.html
in Oracle JRE 8u151 you shall find java.security file and set set the crypto.policy to a value of 'unlimited'. 
I assume your JRE7 has the Unlimited JRE strength policy already installed
Newer versions (8u161, ..) are having the unlimited strength enabled by default.
Please note Oracle JRE 8u151 has a serious issue with decoding gzip stream. When using with a web/application server such as Tomcat, .. you have to disable stream compression or upgrade to a little bit higher https://bugs.java.com/view_bug.do?bug_id=JDK-8189789
","180","<java><linux><encryption><diffie-hellman>","0","0","1","2018-11-12 15:28:26","","2","","846507","","2018-11-12 15:22:48","2018-11-12 15:15:52",""
"51462932","Java / Erlang: Diffie Hellman Key Exchange not Working","I wanted to implement my own encryption for my application. I did a major overhaul of this post. I really didn't have much time until today to address it. Hopefully this being the more useful than my original. Spent a ridiculous amount of time on this issue. Hopefully can save others that time.
I encountered several issues while doing this. I did not realize what was happening until the very end. I was getting different shared secrets and later some exceptions.
This is what I tried:

Used the built in facilities provided by both languages. Couldn't figure out how to get the raw public key into a form Java could use.
Scratched that and went with the simple formulas to calculate the public and private keys for each party. (This statistically could've worked ~25% of the time... luckily for me it didn't.) 
Dived into ASN.1 documentation from the ITU and sent the Erlang public key encoded in a similar manner to Java's keys. Determined this by saving the Java key to a file and using a hex editor. I didn't go back and test at great length. It did get rid of java.security.spec.InvalidKeySpecException: Inappropriate key specification. Think statistics didn't work in my favor here either. The secrets still did not match.
Sent all numbers from Java to the Erlang-side to compute keys, shared secret using Java numbers... Same numbers. There is hope!!!
Started carefully examining the data they were communicating. This was a bit time consuming as Erlang has the data organized in unsigned bytes. The Eclipse IDE (maybe there's a setting somewhere to change) uses signed bytes in byte arrays and a signed integer array within BigInteger.

This is where I began to see things. This all was manually entered over many iterations to make sure I found the correct pattern of events. In Erlang I see my public key beginning with <<215, 101, 208, 153,. The first element of the BigInteger on the Java-side is 681193318. The buffer the byte data was read into reads: [-41, 101, -48, -103. (Same as Erlang's). However taking the time convert the 1st four elements of the binary string to an integer...
<<I:32/signed-integer>> = <<215,101,208,153>>.
That yields -681193319 versus the big integer's 681193318
The code I was using was some what simple:
Erlang ""Server"":
-module(echo).
-export([start/0]).

start() ->
    crypto:start(),
    spawn(fun () -> {ok, Sock} = gen_tcp:listen(12321, [binary, {packet, raw}]),
    echo_loop(Sock)
    end).

echo_loop(Sock) ->
    {ok, Conn} = gen_tcp:accept(Sock),
    io:format(""Got connection: ~p~n"", [Conn]),
    Handler = spawn(fun () -> handle(Conn) end),
    gen_tcp:controlling_process(Conn, Handler),
    echo_loop(Sock).

p() ->
    16#ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff.

g() ->
    2.

handle(Conn) ->
    receive
        {tcp, Conn, Yc} ->
            Xs = crypto:strong_rand_bytes(64),
            Ys = crypto:mod_pow(g(),Xs,p()),
            S = crypto:mod_pow(Yc, Xs, p()),

            AESKey = crypto:hash(sha256, S),

            gen_tcp:send(Conn, Ys),%KeyCert),
            handle(Conn);
        {tcp_closed, Conn} ->
            io:format(""Connection closed: ~p~n"", [Conn])
    end.

Java ""Client"":
public class MyProgram {
    private static Socket s;
    private static OutputStream out;
    private static InputStream in;
    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        MessageDigest hash;
        byte buffer[] = new byte[1024];
        byte buf2[];
        int len = 0;
        byte[] aeskey;

        try {
            hash = MessageDigest.getInstance(""SHA-256"");
            byte    keybuffer[] = new byte[64];
            SecureRandom srnd = SecureRandom.getInstance(""SHA1PRNG"");
            BigInteger Xc, Yc, Sc, Ys;

            srnd.nextBytes(keybuffer);
            Xc = new BigInteger(keybuffer);
            Yc = new BigInteger(""2"").modPow(Xc, DiffieHellman.Group2.P);

            s = new Socket(""localhost"",12321);
            out = s.getOutputStream();
            in = s.getInputStream();

            out.write(Yc.toByteArray());
            out.flush();

            len = in.read(buffer);
            buf2 = new byte[len];
            System.arraycopy(buffer, 0, buf2, 0, len);

            Ys = new BigInteger(buf2);          
            Sc = Ys.modPow(Xc, DiffieHellman.Group2.P);
            aeskey = hash.digest(Sc.toByteArray());

            out.close();
            in.close();
            s.close();
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }       
    }
}

What was wrong?
","The issue is reading but not understanding the documentation. I spend a lot of time in reference pages because I don't code very often. I did not think much of this particular detail in the documentation for BigInteger:  

All operations behave as if Bigintegers were represented in
  two's-complement notation...

There are two spots in my original code where this presents an issue:
       Ys = new BigInteger(buf2);          
       Sc = Ys.modPow(Xc, DiffieHellman.Group2.P);

The issue with the first line is that if bit 8 is set in the first byte the entire buf2 array needs to be prepended with a 0x00 byte. There is an issue with the second line as well... it does not become evident until the following line is executed: aeskey = hash.digest(Sc.toByteArray());
The issue here is if bit 8 is set in the first byte of the result... 0x00 is prepended to it. This is forwarded to the digest() function but needs to be omitted.
My code changed to what is below and works: :)
    len = in.read(buffer);
    buf2 = new byte[len+1];
    System.arraycopy(buffer, 0, buf2, 1, len);
    buf2[0] = 0;

    if(buf2[1] < 0)
        Ys = new BigInteger(buf2);
    else
        Ys = new BigInteger(Arrays.copyOfRange(buf2, 1, buf2.length));

    Sc = Ys.modPow(Xc, DiffieHellman.Group2.P);
    buffer = Sc.toByteArray();
    if(buffer[0] == 0)
        aeskey = hash.digest(Arrays.copyOfRange(buffer, 1, buffer.length));
    else
        aeskey = hash.digest(buffer);

These two lines were left as is:
    Xc = new BigInteger(keybuffer);
    Yc = new BigInteger(""2"").modPow(Xc, DiffieHellman.Group2.P);

This is because the private key can be ""any random number."" The 0x00 byte is prepended if necessary to the public key of the client in the second line. However Erlang interprets integers as big-endian and any leading 0x00 bytes end up being irrelevant as it does not affect the numerical value and hence the result when conducting a crypto:mod_pow().
Comments on how to improve code very welcome.
","172","<java><erlang><x509><diffie-hellman>","2","2","1","2018-11-26 22:42:58","51853823","3","","479836","","2018-11-26 22:42:58","2018-07-22 07:25:50",""
"24228603","Cannot sign with DH key, cannot perform KeyAgreement with others","I would like to know whether there exists a public/private key specification (preferrably in Java itself, no external libs) that can do both a KeyAgreement and Signature.
","Try elliptic curves:
KeyPairGenerator eckpg = KeyPairGenerator.getInstance(""EC"");
ECGenParameterSpec p256 = new ECGenParameterSpec(""secp256r1"");
eckpg.initialize(p256);
KeyPair doubleUseKeyPair = eckpg.generateKeyPair();
KeyAgreement ecdh = KeyAgreement.getInstance(""ECDH"");
ecdh.init(doubleUseKeyPair.getPrivate());
// ...

Signature ecdsa = Signature.getInstance(""SHA256withECDSA"");
ecdsa.initSign(doubleUseKeyPair.getPrivate());
// ...

System.out.println(eckpg.getProvider());
System.out.println(ecdh.getProvider());
System.out.println(ecdsa.getProvider());

Should return:

SunEC version 1.7
SunEC version 1.7
SunEC version 1.7

This is on Java 7 from Sun/Oracle of course.
Note that using the same key (pair) two different purposes is considered bad key management by most. It may allow for attacks that uses vulnerabilities in either or a combination in both the algorithms and the protocol. Using the same key type / strength is of course fine.
","171","<java><encryption><rsa><digital-signature><diffie-hellman>","1","0","1","2014-06-15 12:24:30","24229557","0","2","","","","2014-06-15 10:15:22",""
"43746590","Diffie Hellman JavaCard","I have a problem with DiffieHellman on JavaCard. I have this class:
https://pastebin.com/2F2sQ2Pe (https://github.com/ASKGLab/DHApplet) ( its bigger file so I uplouded to pastebin not sure if its a problem )
And then I create 2 instance of it and call it like this ( show only one instance ):
DiffieHellman dh = new DiffieHellman();
dh.init();
dh.getY(hostY, (short)0);
dh.setY(cardY, (short) 0, (short) cardY.length, (short) 0); 
AESKey encKey = (AESKey) KeyBuilder.buildKey(KeyBuilder.TYPE_AES_TRANSIENT_RESET, KeyBuilder.LENGTH_AES_128, false);
dh.doFinal(encKey);

hostY and cardY are public values. I tried it on desktop App so I have guarance that there is no probleme with Communication with JavaCard. So my question is that after all of this SharedSecret differ and I have no idea why because I execute Y = G^bobPrivKey mod P via RSA's decrypt to get Y's transfer them and then execute S = Y^a mod p via RSA's decrypt. 
Thank's for any answer in advance.
","(Assuming you are using jCardSim for Java Card API emulation on desktop)
There is a problem with jCardSim that it always uses CRT private keys (as used RSAKeyPairGenerator always generates CRT private keys which always implement RSAPrivateCrtKeyParameters -- see here and here).
So every jCardSim RSA private key (even that generated with ALG_RSA) is implemented by RSAPrivateCrtKeyImpl (you can check yourself with .getClass().getCanonicalName()).
The real problem is that RSAPrivateCrtKeyImpl class ignores the value of modulus when doing the actual crypto:
AssymetricCipherImpl.init():
// ...some code above skipped...
KeyWithParameters key = (KeyWithParameters) theKey;
engine.init(theMode == MODE_ENCRYPT, key.getParameters());
// ...some code below skipped...

RSAPrivateCrtKeyImpl.getParameters() -- there is no use of modulus field:
public CipherParameters getParameters() {
    if (!isInitialized()) {
        CryptoException.throwIt(CryptoException.UNINITIALIZED_KEY);
    }
    // modulus = p * q;
    return new RSAPrivateCrtKeyParameters(p.getBigInteger().multiply(q.getBigInteger()), null,
            null, p.getBigInteger(), q.getBigInteger(),
            dp1.getBigInteger(), dq1.getBigInteger(), pq.getBigInteger());
}

So the setModulus() call used to set the desired DH Group prime has no effect and the original (generated) modulus is used.
Good luck!
","169","<java><javacard><diffie-hellman>","0","2","1","2017-05-03 16:21:10","43765349","4","","","","","2017-05-02 20:22:11",""
"31681758","Diffie Hellman+AES on C# to Android data encryption","Anyone know how to implement data exchange between Android app and c# Webservice and vice versa by using DH key exchange with AES encryption. Because writing hard-coded encryption key in Andoird is not secure that anyone can do re-engineering and collect the private hard-coded key..
","","164","<c#><android><aes><diffie-hellman>","0","","0","2018-12-15 13:05:20","","2","","1033581","","2018-12-15 13:05:20","2015-07-28 16:10:40",""
"30698894","Diffie Hellman with authentication","in this link:
http://docstore.mik.ua/orelly/java-ent/security/ch13_07.htm
I found the implementation of Diffie Hellman exchange, but I don't undersand why it use X509EncodedKeySpec object;
Morover, how can I modify the program to avoid the ""man in the middle"" attack?
Thanks.
","","153","<java><security><network-programming><diffie-hellman><network-security>","0","","0","2015-06-07 22:01:59","","2","","","","","2015-06-07 22:01:59",""
"50874329","How to Encode nodejs ecdh public key as pem","Unable to sign a file with nodejs crypto
I am trying to verify a signed document created like in this thread using the method verify.verify() with the ECDH public key. Therefore, i guess, i have to format the raw public key into valid PEM.
How would i do that using the ans1.js and bn.js module?
","","153","<node.js><sign><cryptojs><verify><diffie-hellman>","2","","0","2018-06-15 11:06:57","","0","","","","","2018-06-15 11:06:57",""
"31864533","SonarQube: weak ephemeral Diffie-Hellman key issue with SSL","How do we by pass this issue with SonarQube server v5.1 and firefox? Chrome & IE are working fine but firefox is not allowing to access the server in https mode. I looked at https://weakdh.org/sysadmin.html but I am not sure what server SonarQube uses and how to implement fix for this problem. Any help is appreciated. Thanks.
","When a user wants to enable (or restrict) access to a SonarQube instance over HTTPS, the recommended way is to put it behind another WebServer she configures at will.
So, the way to go here, is to add an Apache, Nginx or whatever in front of the SQ instance and configure it according to the recommendations in the link you provided and generate a ""safe"" server certificate.
","149","<ssl><sonarqube><diffie-hellman>","1","0","2","2015-11-25 17:51:23","31874178","0","","","","","2015-08-06 19:48:39",""
"31864533","SonarQube: weak ephemeral Diffie-Hellman key issue with SSL","How do we by pass this issue with SonarQube server v5.1 and firefox? Chrome & IE are working fine but firefox is not allowing to access the server in https mode. I looked at https://weakdh.org/sysadmin.html but I am not sure what server SonarQube uses and how to implement fix for this problem. Any help is appreciated. Thanks.
","I fixed it by setting the following property in sonar.properties file. 
sonar.web.https.ciphers=TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA
","149","<ssl><sonarqube><diffie-hellman>","1","0","2","2015-11-25 17:51:23","31874178","0","","","","","2015-08-06 19:48:39",""
"17187964","OpenId 2.0: session type vs. association type","The OpenID 2.0 specification says very little about the relation between the session type and association type in OpenID association requests.  My questions: (1) Is a combination of session type ""DH-SHA1"" and association type ""HMAC-SHA256"" valid?  (2) How about the reverse, i.e. ""DH-SHA256"" and ""HMAC-SHA1""?
I don't think these mixed combinations are explicitly forbidden by the spec, but section 8.2.3 describes the process of encrypting the MAC key for transport as follows:
enc_mac_key

     Value: base64(H(btwoc(g ^ (xa * xb) mod p)) XOR MAC key)

     Description: The MAC key (shared secret), encrypted with the
     secret Diffie-Hellman value.  H is either ""SHA1"" or ""SHA256""
     depending on the session type.

Does this imply that the MAC key length must be 20 bytes for session type DH-SHA1 and 32 byte for session type DH-SHA256?  Section 6.2 of the spec states
OpenID Authentication supports two signature algorithms:
o  HMAC-SHA1 - 160 bit key length ([RFC2104] and [RFC3174])
o  HMAC-SHA256 - 256 bit key length ([RFC2104] and [FIPS180-2]

Does this then imply that DH-SHA1 always must be paired with HMAC-SHA1 and the same for the ...256 versions?
Another data point: the OpenId provider at https://me.yahoo.com/ seems to accept association requests with session type DH-SHA1 and association type HMAC-SHA256, returning a 20 byte MAC key.
","","148","<openid><diffie-hellman><openid-provider>","2","","0","2013-06-19 09:41:35","","3","","","","","2013-06-19 09:41:35",""
"54536057","OpenSSL used fixed Values for Diffie Hellman Key generation","According to that piece of documentation: https://wiki.openssl.org/index.php/Diffie_Hellman#Using_the_Low_Level_APIs
Using the Low level API's for Diffie Hellman (need to perform a group Key agreement). 
For simplicity I need to provide fixed values for Diffie Hellman p and g values for now I use the function DH_generate_parameters_ex but any solution using these options may add a communication overhead and there are fixed values for p and g for Diffie Hellman offering good security.
So using the approach convention over configuration, how I can set fixed values especially the ones specified in this RFC to openssl low-level api fore diffie hellman instyead of generating ones on the fly?
PS I use the OpenSSL version 1.0.2g.
","The (outer) primes for the RFC3526 and RFC2409 groups are builtin, per this man page (should also be on your system under those names if 1.1.0+) -- they are actually in the code back to before 1.0.0 but without the BN_ prefix (though in the bn.h header) and previously undocumented. (In 1.1.0+ the old names are additionally #define'd if compatibility is set.) 
AFAICS you must add the generator yourself, something like:
DH *dh = DH_new(); BIGNUM *two = BN_new(); 
if( !dh || !two ) /* error */;
BN_set_word(two,2); 

// corrected AGAIN!
DH_set0_pqg (dh, BN_dup(BN_get_rfc3526_prime_2048(NULL)), NULL, two);

// added: below 1.1.0 many API structs were not opaque, just
dh->p = BN_dup(/*not BN_*/ get_rfc3526_prime_2048(NULL));
dh->g = two; 
// leave q as unspecified

Note RFC5114 modp parameters are available prebuilt in DH* form but only in 1.1.0+. 
","147","<c><openssl><diffie-hellman>","2","2","1","2019-02-17 04:50:55","","0","1","4706711","","2019-02-05 20:56:09","2019-02-05 13:57:09",""
"50985879","Failed to unwrap key exception android O on Diffie-Hellman encryption","I am using Diffie-Hellman encryption and decryption algorithm for my app username and password.I am using my keystore to store information and retrieving It is working properly working in below android O.Recently i am facing this issue please help me
java.security.InvalidKeyException: Failed to unwrap key
java.security.InvalidKeyException: Failed to unwrap key\n
Caused by: com.sample.example.sdk.manager.utils.CustomException: java.security.InvalidKeyException: Failed to unwrap key\n\tat 
com.sample.example.sdk.manager.KeyPairHelper.getDevicePrivatekKey(KeyPairHelper.java:60)\n\tat 
com.sample.example.sdk.manager.SampleTask.buildAesKey(SampleTask.java:100)\n\tat 
com.sample.example.sdk.manager.SampleTask.call(SampleTask.java:186)\n\tat 
com.sample.example.sdk.manager.SampleTask.call(SampleTask.java:66)\n\tat 
io.reactivex.internal.operators.observable.ObservableFromCallable.subscribeActual(ObservableFromCallable.java:42)\n\tat 
io.reactivex.Observable.subscribe(Observable.java:10842)\n\tat 
io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeTask.run(ObservableSubscribeOn.java:96)\n\tat 
io.reactivex.internal.schedulers.ScheduledDirectTask.call(ScheduledDirectTask.java:38)\n\tat io.reactivex.internal.
schedulers.ScheduledDirectTask.call(ScheduledDirectTask.java:26)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat 
java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:301)\n\tat 
java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1162)\n\tat 
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:636)\n\tat 
java.lang.Thread.run(Thread.java:764)\n
Caused by: java.security.InvalidKeyException: Failed to unwrap key\n\tat 
android.security.keystore.AndroidKeyStoreCipherSpiBase.engineUnwrap(AndroidKeyStoreCipherSpiBase.java:682)\n\tat 
javax.crypto.Cipher.unwrap(Cipher.java:2121)\n\tat 
com.sample.example.sdk.manager.utils.Custom.getEncryptionKey(Custom.java:312)\n\tat 
com.sample.example.sdk.manager.utils.Custom.\u003cinit\u003e(Custom.java:108)\n\t
... 15 more\nCaused by: javax.crypto.IllegalBlockSizeException\n\tat 
android.security.keystore.AndroidKeyStoreCipherSpiBase.engineDoFinal(AndroidKeyStoreCipherSpiBase.java:519)\n\tat 
android.security.keystore.AndroidKeyStoreCipherSpiBase.engineUnwrap(AndroidKeyStoreCipherSpiBase.java:680)\n\t... 18 more\n
Caused by: android.security.KeyStoreException: Unknown error\n\tat 
android.security.KeyStore.getKeyStoreException(KeyStore.java:1137)\n\tat android.security.keystore.KeyStoreCryptoOp

","","147","<android><android-8.0-oreo><android-keystore><diffie-hellman>","3","","0","2018-06-22 11:51:08","","0","1","2991069","","2018-06-22 11:51:08","2018-06-22 10:24:04",""
"55536893","How to convert hex public key to ASN.1 SubjectPublicKeyInfo structure for Diffie-Hellman key exchange?","I am trying to implement Diffie-Hellman key exchange to generate the symmetric key for encryption/decryption using JAVA cryptography packages. This requires a public key exchange between the two parties. 
The public key shared by the client is 1024 bit hexadecimal string, which should be used to calculate the shared secret key. How to convert this string into an encoded key format (ASN.1 SubjectPublicKeyInfo structure) to create a PublicKey object.
Considering a sample public key string. Parameters p and g are fed into inputDHParameterSpec object.
Sample implementation:
AutoGen keypair:
    KeyPairGenerator clientKpairGen = keyPairGenerator.getInstance(""DiffieHellman"");
    clientKpairGen.initialize(inputDHParameterSpec);
    KeyPair clientKpair = clientKpairGen.generateKeyPair();
    byte[] clientPubKeyEnc = clientKpair.getPublic().getEncoded();

    X509EncodedKeySpec testPubKeySpec = new X509EncodedKeySpec(clientPubKeyEnc);
    KeyFactory keyFactory = KeyFactory.getInstance(""DiffieHellman"");
    PublicKey clientPubKey = keyFactory.generatePublic(testPubKeySpec);

Hex PublicKey - failing:
    String testPublicKey = ""85f04dd00345642ad12b65bd1a7c38728bff0b8e281ddb6ac4f2739e82a02145daabf23d173c933913b1f844059710e9125591569de427eae1d269accbfa3305069deb7622d1da3ad9820d11bd24fdcce5381d2df99bda314394738dfcbe210eae247b1303e79297ff746cd919e189f6a5776e6ecc24c8900de0f38f159072de"";
    X509EncodedKeySpec testPubKeySpec = new X509EncodedKeySpec(hexStringToByteArray(testPublicKey));
    KeyFactory keyFactory = KeyFactory.getInstance(""DiffieHellman"");
    PublicKey clientPubKey = keyFactory.generatePublic(testPubKeySpec);//Failing here

byte[] created in first code block has public key in ASN.1 encoded format, but hexStringToByteArray(testPublicKey) merely converts the hex to byte[]. Getting the below error on the marked line, due to this. 
Exception in thread ""main"" java.security.spec.InvalidKeySpecException: Inappropriate key specification
    at com.sun.crypto.provider.DHKeyFactory.engineGeneratePublic(DHKeyFactory.java:85)
    at java.security.KeyFactory.generatePublic(KeyFactory.java:334)
    at MWK_DHGen.main(MWK_DHGen.java:87)
Caused by: java.security.InvalidKeyException: Error parsing key encoding
    at com.sun.crypto.provider.DHPublicKey.<init>(DHPublicKey.java:178)
    at com.sun.crypto.provider.DHKeyFactory.engineGeneratePublic(DHKeyFactory.java:78)
    ... 2 more

Can someone help on how to convert this hex to the requried format here? A different implementation that would use this hex string to arrive at the secret key is also encouraged.
","If you already have the domain parameters (p, g) and just the integer value of the public key then a DHPublicKeySpec rather than an X509EncodedKeySpec is the way to go:
String testPublicKey = ""85f04dd00345642ad12b65bd1a7c38728bff0b8e281ddb6ac4f2739e82a02145daabf23d173c933913b1f844059710e9125591569de427eae1d269accbfa3305069deb7622d1da3ad9820d11bd24fdcce5381d2df99bda314394738dfcbe210eae247b1303e79297ff746cd919e189f6a5776e6ecc24c8900de0f38f159072de"";
BigInteger publicKeyInteger = new BigInteger(testPublicKey, 16);
KeyFactory keyFactory = KeyFactory.getInstance(""DiffieHellman"");
PublicKey clientPubKey = keyFactory.generatePublic(new DHPublicKeySpec(publicKeyInteger, g, p));

","147","<java><public-key><asn.1><diffie-hellman><public-key-exchange>","1","1","1","2019-04-05 16:00:10","55539379","0","","","","","2019-04-05 13:49:57",""
"53669673","Diffie Hellman Key Exchange using ECDSA x509 certificates","I am trying to perform a Diffie-Hellman key exchange using 2 ECDSA x509 certificates.
Here is the method where I extract the keys from the certificates for computation of the derived key.
private byte[] GetDerivedKey(X509Certificate2 publicCertificate, X509Certificate2 privateCertificate)
    {
        byte[] derivedKey;

        using (var privateKey = privateCertificate.GetECDsaPrivateKey())
        using (var publicKey = publicCertificate.GetECDsaPublicKey())
        {
            var privateParams = privateKey.ExportParameters(true);  //This line is failing
            var publicParams = publicKey.ExportParameters(false);

            using (var privateCng = ECDiffieHellmanCng.Create(privateParams))
            using (var publicCng = ECDiffieHellmanCng.Create(publicParams))
            {
                derivedKey = privateCng.DeriveKeyMaterial(publicCng.PublicKey);
            }
        }


        return derivedKey;
    }

I've commented on the line that is failing privateKey.ExportParameters(true) with the error:

System.Security.Cryptography.CryptographicException : The requested operation is not supported.  
at System.Security.Cryptography.NCryptNative.ExportKey(SafeNCryptKeyHandle key, String format)
     at System.Security.Cryptography.CngKey.Export(CngKeyBlobFormat format)
     at System.Security.Cryptography.ECCng.ExportParameters(CngKey key, Boolean includePrivateParameters, ECParameters& ecparams)
     at System.Security.Cryptography.ECDsaCng.ExportParameters(Boolean includePrivateParameters)

Because this is a self signed certificate that I am generating, I assume I am doing something wrong.
I first create a root CA certificate and pass in the private key to sign my certificate.
private X509Certificate2 CreateECSDACertificate(string certificateName,
        string issuerCertificateName,
        TimeSpan lifetime,
        AsymmetricKeyParameter issuerPrivateKey,
        string certificateFriendlyName = null)
    {
        // Generating Random Numbers
        var randomGenerator = new CryptoApiRandomGenerator();
        var random = new SecureRandom(randomGenerator);

        var signatureFactory = new Asn1SignatureFactory(""SHA256WithECDSA"", issuerPrivateKey, random);

        // The Certificate Generator
        var certificateGenerator = new X509V3CertificateGenerator();

        // Serial Number
        var serialNumber = BigIntegers.CreateRandomInRange(BigInteger.One, BigInteger.ValueOf(Int64.MaxValue), random);
        certificateGenerator.SetSerialNumber(serialNumber);

        // Issuer and Subject Name
        var subjectDistinguishedName = new X509Name($""CN={certificateName}"");
        var issuerDistinguishedName = new X509Name($""CN={issuerCertificateName}"");
        certificateGenerator.SetSubjectDN(subjectDistinguishedName);
        certificateGenerator.SetIssuerDN(issuerDistinguishedName);

        // Valid For
        var notBefore = DateTime.UtcNow.Date;
        var notAfter = notBefore.Add(lifetime);

        certificateGenerator.SetNotBefore(notBefore);
        certificateGenerator.SetNotAfter(notAfter);

        //key generation
        var keyGenerationParameters = new KeyGenerationParameters(random, _keyStrength);
        var keyPairGenerator = new ECKeyPairGenerator();
        keyPairGenerator.Init(keyGenerationParameters);
        var subjectKeyPair = keyPairGenerator.GenerateKeyPair();

        certificateGenerator.SetPublicKey(subjectKeyPair.Public);

        var certificate = certificateGenerator.Generate(signatureFactory);

        var store = new Pkcs12Store();
        var certificateEntry = new X509CertificateEntry(certificate);
        store.SetCertificateEntry(certificateName, certificateEntry);
        store.SetKeyEntry(certificateName, new AsymmetricKeyEntry(subjectKeyPair.Private), new[] { certificateEntry });

        X509Certificate2 x509;

        using (var pfxStream = new MemoryStream())
        {
            store.Save(pfxStream, null, new SecureRandom());
            pfxStream.Seek(0, SeekOrigin.Begin);
            x509 = new X509Certificate2(pfxStream.ToArray());
        }

        x509.FriendlyName = certificateFriendlyName;

        return x509;
    }

The .HasPrivateKey() method returns true, which I've read can return a false positive.  
When I add my certificates to the store, I can verify the cert chain.
    [Test]
    public void CreateSelfSignedCertificate_AfterAddingToStore_CanBuildChain()
    {
        var result = _target.CreateSelfSignedCertificate(_subject, _issuer, TimeSpan.FromDays(356), _certificateFriendlyName, _issuerFriendlyName);

        _store.TryAddCertificateToStore(result.CertificateAuthority, _caStoreName, _location);
        _store.TryAddCertificateToStore(result.Certificate, _certStoreName, _location);

        var chain = new X509Chain
        {
            ChainPolicy =
            {
                RevocationMode = X509RevocationMode.NoCheck
            }
        };

        var chainBuilt = chain.Build(result.Certificate);

        if (!chainBuilt)
        {
            foreach (var status in chain.ChainStatus)
            {
                Assert.Warn(string.Format(""Chain error: {0} {1}"", status.Status, status.StatusInformation));
            }
        }

        Assert.IsTrue(chainBuilt, ""Chain"");
    }

I thought at first that maybe the private cert had to come from the cert store, so I imported it and then pulled it back out, but I get the same error, which is another reason I believe I'm not doing something quite right.
EDIT:
I have another class generating RSA x509's using the same code for putting the private key into the certificate.  It allows me to export the RSA private key.  
The variable _keyStrength is 384 and my signature factory is using ""SHA256withECDSA"".  I have also tried using ""SHA384withECDSA"" but I get the same error.
","OK. It's a blind shot but after looking at your code I noticed two things:

When you create PFX you set null password. But when you load the PFX into X509Certificate2 class you are using wrong constructor. You should use one with a password parameter and give a null into it
When you load PFX into X509Certificate2 class you do not specify, if the private key should be exportable. I think that this is the reason why privateKey.ExportParameters(true) gives you an exception. You should use this constructor and specify null as password


Made it working
I thought it was a bug. It's possible that it is. We clearly stated in X509Constructor that the private key should be exportable. I used X509KeyStorageFlags.EphemeralKeySet | X509KeyStorageFlags.Exportable flags too. But when I looked at the CngKey it had ExportPolicy set to AllowExport but not AllowPlaintextExport. 
It was exportable in some way. privateKey.Key.Export(CngKeyBlobFormat.OpaqueTransportBlob) worked. But privateKey.ExportParameters(true) did not.
I've searched for a solution how to change ExportPolicy of CngKey. I found this SO question that helped me to change it. After that the ExportParameters worked.
The fixed version of your GetDerivedKey method is
private byte[] GetDerivedKey(X509Certificate2 publicCertificate, X509Certificate2 privateCertificate)
{
    byte[] derivedKey;

    using (var privateKey = privateCertificate.GetECDsaPrivateKey())
    using (var publicKey = privateCertificate.GetECDsaPublicKey())
    {
        var myPrivateKeyToMessWith = privateKey as ECDsaCng;

        // start - taken from https://stackoverflow.com/q/48542233/3245057 
        // make private key exportable:
        byte[] bytes = BitConverter.GetBytes((int)(CngExportPolicies.AllowExport | CngExportPolicies.AllowPlaintextExport));
        CngProperty pty = new CngProperty(NCryptExportPolicyProperty, bytes, CngPropertyOptions.Persist);
        myPrivateKeyToMessWith.Key.SetProperty(pty);
        // end - taken from https://stackoverflow.com/q/48542233/3245057

        var privateParams = myPrivateKeyToMessWith.ExportParameters(true);  //This line is NOT failing anymore
        var publicParams = publicKey.ExportParameters(false);

        using (var privateCng = ECDiffieHellmanCng.Create(privateParams))
        using (var publicCng = ECDiffieHellmanCng.Create(publicParams))
        {
            derivedKey = privateCng.DeriveKeyMaterial(publicCng.PublicKey);
        }
    }

    return derivedKey;
}

","146","<c#><bouncycastle><x509certificate2><ecdsa><diffie-hellman>","1","2","2","2018-12-07 16:34:19","53670577","0","","107455","","2018-12-07 14:27:20","2018-12-07 12:35:42",""
"53669673","Diffie Hellman Key Exchange using ECDSA x509 certificates","I am trying to perform a Diffie-Hellman key exchange using 2 ECDSA x509 certificates.
Here is the method where I extract the keys from the certificates for computation of the derived key.
private byte[] GetDerivedKey(X509Certificate2 publicCertificate, X509Certificate2 privateCertificate)
    {
        byte[] derivedKey;

        using (var privateKey = privateCertificate.GetECDsaPrivateKey())
        using (var publicKey = publicCertificate.GetECDsaPublicKey())
        {
            var privateParams = privateKey.ExportParameters(true);  //This line is failing
            var publicParams = publicKey.ExportParameters(false);

            using (var privateCng = ECDiffieHellmanCng.Create(privateParams))
            using (var publicCng = ECDiffieHellmanCng.Create(publicParams))
            {
                derivedKey = privateCng.DeriveKeyMaterial(publicCng.PublicKey);
            }
        }


        return derivedKey;
    }

I've commented on the line that is failing privateKey.ExportParameters(true) with the error:

System.Security.Cryptography.CryptographicException : The requested operation is not supported.  
at System.Security.Cryptography.NCryptNative.ExportKey(SafeNCryptKeyHandle key, String format)
     at System.Security.Cryptography.CngKey.Export(CngKeyBlobFormat format)
     at System.Security.Cryptography.ECCng.ExportParameters(CngKey key, Boolean includePrivateParameters, ECParameters& ecparams)
     at System.Security.Cryptography.ECDsaCng.ExportParameters(Boolean includePrivateParameters)

Because this is a self signed certificate that I am generating, I assume I am doing something wrong.
I first create a root CA certificate and pass in the private key to sign my certificate.
private X509Certificate2 CreateECSDACertificate(string certificateName,
        string issuerCertificateName,
        TimeSpan lifetime,
        AsymmetricKeyParameter issuerPrivateKey,
        string certificateFriendlyName = null)
    {
        // Generating Random Numbers
        var randomGenerator = new CryptoApiRandomGenerator();
        var random = new SecureRandom(randomGenerator);

        var signatureFactory = new Asn1SignatureFactory(""SHA256WithECDSA"", issuerPrivateKey, random);

        // The Certificate Generator
        var certificateGenerator = new X509V3CertificateGenerator();

        // Serial Number
        var serialNumber = BigIntegers.CreateRandomInRange(BigInteger.One, BigInteger.ValueOf(Int64.MaxValue), random);
        certificateGenerator.SetSerialNumber(serialNumber);

        // Issuer and Subject Name
        var subjectDistinguishedName = new X509Name($""CN={certificateName}"");
        var issuerDistinguishedName = new X509Name($""CN={issuerCertificateName}"");
        certificateGenerator.SetSubjectDN(subjectDistinguishedName);
        certificateGenerator.SetIssuerDN(issuerDistinguishedName);

        // Valid For
        var notBefore = DateTime.UtcNow.Date;
        var notAfter = notBefore.Add(lifetime);

        certificateGenerator.SetNotBefore(notBefore);
        certificateGenerator.SetNotAfter(notAfter);

        //key generation
        var keyGenerationParameters = new KeyGenerationParameters(random, _keyStrength);
        var keyPairGenerator = new ECKeyPairGenerator();
        keyPairGenerator.Init(keyGenerationParameters);
        var subjectKeyPair = keyPairGenerator.GenerateKeyPair();

        certificateGenerator.SetPublicKey(subjectKeyPair.Public);

        var certificate = certificateGenerator.Generate(signatureFactory);

        var store = new Pkcs12Store();
        var certificateEntry = new X509CertificateEntry(certificate);
        store.SetCertificateEntry(certificateName, certificateEntry);
        store.SetKeyEntry(certificateName, new AsymmetricKeyEntry(subjectKeyPair.Private), new[] { certificateEntry });

        X509Certificate2 x509;

        using (var pfxStream = new MemoryStream())
        {
            store.Save(pfxStream, null, new SecureRandom());
            pfxStream.Seek(0, SeekOrigin.Begin);
            x509 = new X509Certificate2(pfxStream.ToArray());
        }

        x509.FriendlyName = certificateFriendlyName;

        return x509;
    }

The .HasPrivateKey() method returns true, which I've read can return a false positive.  
When I add my certificates to the store, I can verify the cert chain.
    [Test]
    public void CreateSelfSignedCertificate_AfterAddingToStore_CanBuildChain()
    {
        var result = _target.CreateSelfSignedCertificate(_subject, _issuer, TimeSpan.FromDays(356), _certificateFriendlyName, _issuerFriendlyName);

        _store.TryAddCertificateToStore(result.CertificateAuthority, _caStoreName, _location);
        _store.TryAddCertificateToStore(result.Certificate, _certStoreName, _location);

        var chain = new X509Chain
        {
            ChainPolicy =
            {
                RevocationMode = X509RevocationMode.NoCheck
            }
        };

        var chainBuilt = chain.Build(result.Certificate);

        if (!chainBuilt)
        {
            foreach (var status in chain.ChainStatus)
            {
                Assert.Warn(string.Format(""Chain error: {0} {1}"", status.Status, status.StatusInformation));
            }
        }

        Assert.IsTrue(chainBuilt, ""Chain"");
    }

I thought at first that maybe the private cert had to come from the cert store, so I imported it and then pulled it back out, but I get the same error, which is another reason I believe I'm not doing something quite right.
EDIT:
I have another class generating RSA x509's using the same code for putting the private key into the certificate.  It allows me to export the RSA private key.  
The variable _keyStrength is 384 and my signature factory is using ""SHA256withECDSA"".  I have also tried using ""SHA384withECDSA"" but I get the same error.
","I started using the solution @pepo posted which lead me to discover 'GetECDsaPrivateKey' does not return an ECDsa object but an ECDsaCng.  I simplified the key derivation to this.
byte[] derivedKey;

using (var privateKey = (ECDsaCng)certificate.GetECDsaPrivateKey())
using (var publicKey = (ECDsaCng)certificate.GetECDsaPublicKey())
{
    var publicParams = publicKey.ExportParameters(false);

    using (var publicCng = ECDiffieHellmanCng.Create(publicParams))
    using (var diffieHellman = new ECDiffieHellmanCng(privateKey.Key))
    {
        derivedKey = diffieHellman.DeriveKeyMaterial(publicCng.PublicKey);
    }
}

return derivedKey;

","146","<c#><bouncycastle><x509certificate2><ecdsa><diffie-hellman>","1","0","2","2018-12-07 16:34:19","53670577","0","","107455","","2018-12-07 14:27:20","2018-12-07 12:35:42",""
"18166053","Is the code I wrote for my exercise efficient?","I've learned to write code implementing the Diffie-Hellman key exchange algorithm below, but I feel that my code isn't at its most efficient. Can anyone correct my code please...?
import java.math.BigInteger;
import java.security.SecureRandom;
import java.security.spec.AlgorithmParameterSpec;
import java.util.Random;;

    public class DH_key {
        static class DHGenParameterSpec implements AlgorithmParameterSpec{
            static BigInteger p;
            static BigInteger g;
            static int a,b;
            static BigInteger A,B;
        static BigInteger getPrimeP_G() {
            Random rand1= new Random(System.currentTimeMillis());
            Random rand2= new Random(System.currentTimeMillis()*10);

            p= BigInteger.probablePrime(32, rand1);
            g= BigInteger.probablePrime(32, rand2);
            System.out.println(""""+p+"",""+g);
            return null;
        }
        static int getExponent() {
            SecureRandom ranGen1 = new SecureRandom();

            a= ranGen1.nextInt(1000);
            b= ranGen1.nextInt(1000);
            System.out.println(a+""__""+b);
            return 0 ;

        }
        public static Object pow (){
            //g.pow(a);
            A = g.pow(getExponent()).mod(getPrimeP_G());
            B = g.pow(b).mod(p);

            return null;        
        }



    public static void main(String[]args){
        //System.out.println(DHGenParameterSpec.getPrimeP_G());
        DHGenParameterSpec.getPrimeP_G();
        DHGenParameterSpec.getExponent();
        A = g.pow(a).mod(p);
        B = g.pow(b).mod(p);

        BigInteger Sa,Sb;
        Sa=B.pow(a).mod(p);
        Sb=A.pow(b).mod(p);

            System.out.println(""""+A+""__""+B);
                System.out.println(""""+Sa+""__""+Sb);
        }

        }

    }

Was the code above appropriate with java rules??
","You have written modular exponentiation as:
        A = g.pow(getExponent()).mod(getPrimeP_G());
        B = g.pow(b).mod(p);

This is inefficient because the intermediate result from the exponentiation can be a large number. You should use the modPow method instead, which does the two operations with an efficient algorithm:
        A = g.modPow(getExponent(), getPrimeP_G());
        B = g.modPow(b, p);

","132","<java><performance><diffie-hellman>","0","1","1","2013-08-11 00:42:39","18166137","1","1","485864","","2013-08-11 00:42:39","2013-08-10 20:27:10","2013-08-11 06:56:45"
"41080700","What does cracking a Diffie-Helman prime number mean?","I am doing a project on the Diffie-Helman key exchange and this isn't necessary for my project but I am very interested in how you 'crack' a prime number.  
","You crack a Diffie-Hellman semi-prime by factoring it into its two constituent prime factors. The security of Diffie-Hellman comes from the fact that it is not possible, with current technology, to factor semi-primes of the size that are used in cryptography.
","130","<primes><diffie-hellman>","-3","0","1","2019-08-26 13:01:51","","3","","225647","","2019-08-26 13:01:51","2016-12-10 21:52:15",""
"54976616","Java generate DH public key size is not the same size as sample that documentation have","One of my documentation said 

Generate the private and public keys using the Diffie-Hellman parameters (‘p’ and ‘g’). The result is
  ‘Pub_key’and ‘Priv_key’ (1024-bit/128 bytes).

where P and G are giving by following:

Diffie-Hellman-Parameters: (1024 bit)
  Prime (p):
  e5:16:e4:3e:54:57:b2:f6:6f:6c:a3:67:b3:35:ea:
  d8:31:99:39:fa:4d:f6:c1:b7:f8:6e:73:e9:22:a6:
  d1:93:93:25:5e:41:90:96:66:81:74:e3:5c:81:8a:
  66:11:7f:79:9e:86:66:c8:05:0e:e4:36:f9:80:13:
  51:60:6c:55:d4:5f:ab:a0:3f:39:e2:92:3b:a9:26:
  a9:cd:75:d4:bd:bc:a9:de:78:b6:2a:9b:84:7a:78:
  1c:69:2c:06:3e:aa:cb:43:a3:96:f0:1d:12:1d:04:
  27:55:d0:b7:c0:b2:df:a8:b4:98:a5:7e:4d:90:c3:
  0c:a0:49:a7:ac:2b:7f:73
generator (g): 5 (0x5)

The sample data that documentation gave about the public key is following:

85:f0:4d:d0:03:45:64:2a:d1:2b:65:bd:1a:7c:38:72:8b:ff:0b:8e:28:1d:db:
  6a:c4:f2:73:9e:82:a0:21:45:da:ab:f2:3d:17:3c:93:39:13:b1:f8:44:05:97:
  10:e9:12:55:91:56:9d:e4:27:ea:e1:d2:69:ac:cb:fa:33:05:06:9d:eb:76:22:
  d1:da:3a:d9:82:0d:11:bd:24:fd:cc:e5:38:1d:2d:f9:9b:da:31:43:94:73:8d:
  fc:be:21:0e:ae:24:7b:13:03:e7:92:97:ff:74:6c:d9:19:e1:89:f6:a5:77:6e:
  6e:cc:24:c8:90:0d:e0:f3:8f:15:90:72:de

However, when I try my self using Java to generate the DH public key using the parameter, I get something following like this:

30:82:01:24:30:81:99:06:09:2A:86:48:86:F7:0D:01:03:01:30:81:8B:02:81:81:00:E5:16:E4:3E:54:57:B2:F6:6F:6C:A3:67:B3:35:EA:D8:31:99:39:FA:4D:F6:C1:B7:F8:6E:73:E9:22:A6:D1:93:93:25:5E:41:90:96:66:81:74:E3:5C:81:8A:66:11:7F:79:9E:86:66:C8:05:0E:E4:36:F9:80:13:51:60:6C:55:D4:5F:AB:A0:3F:39:E2:92:3B:A9:26:A9:CD:75:D4:BD:BC:A9:DE:78:B6:2A:9B:84:7A:78:1C:69:2C:06:3E:AA:CB:43:A3:96:F0:1D:12:1D:04:27:55:D0:B7:C0:B2:DF:A8:B4:98:A5:7E:4D:90:C3:0C:A0:49:A7:AC:2B:7F:73:02:01:05:02:02:02:00:03:81:85:00:02:81:81:00:A9:AF:1C:F3:45:77:8C:BA:BC:32:59:52:7B:EA:90:80:74:9A:1D:A7:01:D4:C4:10:74:4C:6E:E9:35:36:49:6D:0D:03:F5:2D:EC:FA:C5:CE:CD:C9:23:D3:F5:2F:C2:E0:3E:54:3C:A1:20:6B:ED:CC:6C:1F:52:26:7D:CD:E7:0D:14:F8:34:B0:36:B7:F9:FD:AC:97:4C:C0:7D:50:7E:DC:E0:D4:62:52:27:7B:FE:0B:16:62:34:81:2A:E1:8B:6A:54:EE:55:6D:C3:D0:F4:89:A1:E8:11:F0:67:3E:17:AB:BF:C3:6C:B7:37:51:29:36:45:BA:26:BF:CB:90:AE:A7

As you can see, it is way longer...
Here is the coding part I have
import java.math.BigInteger;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import javax.crypto.KeyAgreement;
import javax.crypto.spec.DHParameterSpec;

public class DHKeyAgreement {

  // The 1024 bit Diffie-Hellman modulus values used by SKIP
  private static final byte skip1024ModulusBytes[] = {(byte) 0xe5, (byte) 0x16, (byte) 0xe4,
      (byte) 0x3e, (byte) 0x54, (byte) 0x57, (byte) 0xb2, (byte) 0xf6, (byte) 0x6f, (byte) 0x6c,
      (byte) 0xa3, (byte) 0x67, (byte) 0xb3, (byte) 0x35, (byte) 0xea, (byte) 0xd8, (byte) 0x31,
      (byte) 0x99, (byte) 0x39, (byte) 0xfa, (byte) 0x4d, (byte) 0xf6, (byte) 0xc1, (byte) 0xb7,
      (byte) 0xf8, (byte) 0x6e, (byte) 0x73, (byte) 0xe9, (byte) 0x22, (byte) 0xa6, (byte) 0xd1,
      (byte) 0x93, (byte) 0x93, (byte) 0x25, (byte) 0x5e, (byte) 0x41, (byte) 0x90, (byte) 0x96,
      (byte) 0x66, (byte) 0x81, (byte) 0x74, (byte) 0xe3, (byte) 0x5c, (byte) 0x81, (byte) 0x8a,
      (byte) 0x66, (byte) 0x11, (byte) 0x7f, (byte) 0x79, (byte) 0x9e, (byte) 0x86, (byte) 0x66,
      (byte) 0xc8, (byte) 0x05, (byte) 0x0e, (byte) 0xe4, (byte) 0x36, (byte) 0xf9, (byte) 0x80,
      (byte) 0x13, (byte) 0x51, (byte) 0x60, (byte) 0x6c, (byte) 0x55, (byte) 0xd4, (byte) 0x5f,
      (byte) 0xab, (byte) 0xa0, (byte) 0x3f, (byte) 0x39, (byte) 0xe2, (byte) 0x92, (byte) 0x3b,
      (byte) 0xa9, (byte) 0x26, (byte) 0xa9, (byte) 0xcd, (byte) 0x75, (byte) 0xd4, (byte) 0xbd,
      (byte) 0xbc, (byte) 0xa9, (byte) 0xde, (byte) 0x78, (byte) 0xb6, (byte) 0x2a, (byte) 0x9b,
      (byte) 0x84, (byte) 0x7a, (byte) 0x78, (byte) 0x1c, (byte) 0x69, (byte) 0x2c, (byte) 0x06,
      (byte) 0x3e, (byte) 0xaa, (byte) 0xcb, (byte) 0x43, (byte) 0xa3, (byte) 0x96, (byte) 0xf0,
      (byte) 0x1d, (byte) 0x12, (byte) 0x1d, (byte) 0x04, (byte) 0x27, (byte) 0x55, (byte) 0xd0,
      (byte) 0xb7, (byte) 0xc0, (byte) 0xb2, (byte) 0xdf, (byte) 0xa8, (byte) 0xb4, (byte) 0x98,
      (byte) 0xa5, (byte) 0x7e, (byte) 0x4d, (byte) 0x90, (byte) 0xc3, (byte) 0x0c, (byte) 0xa0,
      (byte) 0x49, (byte) 0xa7, (byte) 0xac, (byte) 0x2b, (byte) 0x7f, (byte) 0x73};


  // The SKIP 1024 bit modulus
  private static final BigInteger skip1024Modulus = new BigInteger(1, skip1024ModulusBytes);

  // The base used with the SKIP 1024 bit modulus
  private static final BigInteger skip1024Base = BigInteger.valueOf(5);

  public static void main(String[] args) throws Exception {
    DHParameterSpec dhSkipParamSpec;
    dhSkipParamSpec = new DHParameterSpec(skip1024Modulus, skip1024Base);
    System.out.println(""ALICE: Generate DH keypair ..."");
    KeyPairGenerator aliceKpairGen = KeyPairGenerator.getInstance(""DH"");
    aliceKpairGen.initialize(dhSkipParamSpec);
    KeyPair aliceKpair = aliceKpairGen.generateKeyPair();
    System.out.println(""ALICE: Initialization ..."");
    KeyAgreement aliceKeyAgree = KeyAgreement.getInstance(""DH"");
    aliceKeyAgree.init(aliceKpair.getPrivate());

    // Alice encodes her public key, and sends it over to Bob.
    byte[] alicePubKeyEnc = aliceKpair.getPublic().getEncoded();
    byte[] alicePrivKeyEnc = aliceKpair.getPrivate().getEncoded();


    System.out.println(""ALICE public key: "" + toHexString(alicePubKeyEnc));
    System.out.println(""Alice private key: "" + toHexString(alicePrivKeyEnc));

  }

  /*
   * Converts a byte to hex digit and writes to the supplied buffer
   */
  private static void byte2hex(byte b, StringBuffer buf) {
    char[] hexChars =
        {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
    int high = ((b & 0xf0) >> 4);
    int low = (b & 0x0f);
    buf.append(hexChars[high]);
    buf.append(hexChars[low]);
  }

  /*
   * Converts a byte array to hex string
   */
  private static String toHexString(byte[] block) {
    StringBuffer buf = new StringBuffer();

    int len = block.length;

    for (int i = 0; i < len; i++) {
      byte2hex(block[i], buf);
      if (i < len - 1) {
        buf.append("":"");
      }
    }
    return buf.toString();
  }
}

Is it something I misunderstanding or the documentation is wrong?
","The final hex string which you see as a result of the aliceKpair.getPublic().getEncoded() is the ASN.1 DER encoded string. The hex string of the public key (removed :) that you have is
3082012430819906092A864886F70D01030130818B02818100E516E43E5457B2F66F6CA367B335EAD8319939FA4DF6C1B7F86E73E922A6D19393255E419096668174E35C818A66117F799E8666C8050EE436F9801351606C55D45FABA03F39E2923BA926A9CD75D4BDBCA9DE78B62A9B847A781C692C063EAACB43A396F01D121D042755D0B7C0B2DFA8B498A57E4D90C30CA049A7AC2B7F73020105020202000381850002818100A9AF1CF345778CBABC3259527BEA9080749A1DA701D4C410744C6EE93536496D0D03F52DECFAC5CECDC923D3F52FC2E03E543CA1206BEDCC6C1F52267DCDE70D14F834B036B7F9FDAC974CC07D507EDCE0D46252277BFE0B166234812AE18B6A54EE556DC3D0F489A1E811F0673E17ABBFC36CB73751293645BA26BFCB90AEA7

which follows the following format below. The ASN.1 format is used to serialize and deserialize the data structures in a platform independent manner.
SEQUENCE (2 elem)
  SEQUENCE (2 elem)
    OBJECT IDENTIFIER 1.2.840.113549.1.3.1 dhKeyAgreement (PKCS #3)
    SEQUENCE (3 elem)
      INTEGER (1024 bit) 160872061717711572653317052595503399048868038241656045229773297825253…
      INTEGER 5
      INTEGER 512
  BIT STRING (1 elem)
    INTEGER (1024 bit) 119156181916892940910396680345482295722468357006826527903397802475513…

The 3 elemenet sequence contains the prime (p) as the first element of the structure and the generator (g) as the second element. IN JDK each PublicKey types (EC/DH/RSA etc..,) contains corresponding getEncoded() implementation which creates an ASN.1 encoded DER string. Here's such an implementation from JDK for the DHPublicKey. There'll be a similar implementation for the DHPrivateKey.
In your case, the prime value in is 1024 bit and is what you're looking for and the public key value you're interested in is the 1024 bit BIT STRING value.
The sample public key you provided is 256 character hex encoded i.e. 128 byte array i.e. 1024 bit value. This is the first value of the 3 element sequence in the encoded public key structure.
","128","<java><encryption><diffie-hellman>","0","1","1","2019-03-04 06:42:03","54976962","0","","","","","2019-03-04 04:24:56",""
"34994926","Are hashes and MACs vulnerable to bit-flipping attacks?","Suppose there is an encrypted communication between A and B, through an unsecure medium, such that A and B shared a secret key with DH protocol.
If A sends an encrypted message and the hash/MAC/HMAC of this message to B, wouldn't it be easy for an eavesdropper to just intercept the hash/MAC/HMAC, change some bits in it, and send it to B?
B wouldn't be able to check the integrity of all messages sent by A and thus will destroy them everytime he gets a message from A, right?
B will then become non available ???
Thank you
","The process you describe is just a very specific form of corrupting the data. If an attacker can corrupt the data, then of course the attacker can prevent A from speaking to B. The attacker could just drop the packets on the ground. That would also prevent A from speaking to B.
Any data corruption, not just modifying the HMAC, will cause this same situation. If I modify the authenticated stream, then the (unmodified) HMAC won't match and it will be discarded.
The point of an HMAC is to ensure integrity. It has nothing to do with availability. Any Man-in-the-Middle can always trivially destroy availability in any system as long as the connection goes through them. (If they can't, they're not a MitM.)
","128","<encryption><aes><private-key><diffie-hellman>","1","1","1","2016-01-25 14:39:16","34995203","2","","","","","2016-01-25 14:24:06",""
"48663500","SGX DH key exchange","I'm trying to create a key exchange app using intel's sgx technology.
I used this - https://software.intel.com/en-us/node/709011 page as guidance ,I send all the messages as this site shows but I don't know how to get the key!.
In the end of DH key exchange I should have a mutual key for the site and the server but I'm not sure where he is.
In the function sgx_dh_initiator_proc_msg3(as shown in the buttom of the site) there is a key called 'aek', is this the mutual key?
thanks
","The agreed DH Key is on both Msg2 and Msg3. 
The last executed methods on a DH session establishment on SGX are:

sgx_dh_responder_proc_msg2 on the responder side, and 
sgx_dh_initiator_proc_msg3 on the initiator side. 

Therefore, they extract the Agreed Key from the message they are processing.
The output of these methods is:

the AEK key: sgx_key_128bit_t, and 
the Peer identity: sgx_dh_session_enclave_identity_t.

","123","<diffie-hellman><sgx>","0","0","1","2018-05-15 15:03:09","50236057","0","1","","","","2018-02-07 12:12:02",""
"56062594","OpenSSL ECDH setting peer's public key in C","I'm trying to integrate ECDH using OpenSSL in my C-SDK (which we will refer to as client) which is running on Ubuntu and needed some help regarding how to set the peer's (server) public key on the client side and eventually generating the shared secret.
Some details:

I am successfully generating a public key and can also generate a shared secret on the server side which has an embedded microcontroller using the mbedTLS library.
The public key I receive from the server is in the form of a uint8_t array of size 32 bytes.
I now want to use OpenSSL's ECDH to generate the public key for server and the shared secret on the client side.

I found a sample code on the OpenSSL wiki website which is as below:
#include <openssl/evp.h>
#include <openssl/ec.h>


unsigned char *ecdh(size_t *secret_len)
{
    EVP_PKEY_CTX *pctx, *kctx;
    EVP_PKEY_CTX *ctx;
    unsigned char *secret;
    EVP_PKEY *pkey = NULL, *peerkey, *params = NULL;
    /* NB: assumes pkey, peerkey have been already set up */

    /* Create the context for parameter generation */
    if(NULL == (pctx = EVP_PKEY_CTX_new_id(EVP_PKEY_EC, NULL))) handleErrors();

    /* Initialise the parameter generation */
    if(1 != EVP_PKEY_paramgen_init(pctx)) handleErrors();

    /* We're going to use the ANSI X9.62 Prime 256v1 curve */
    if(1 != EVP_PKEY_CTX_set_ec_paramgen_curve_nid(pctx, NID_X9_62_prime256v1)) handleErrors();

    /* Create the parameter object params */
    if (!EVP_PKEY_paramgen(pctx, &params)) handleErrors();

    /* Create the context for the key generation */
    if(NULL == (kctx = EVP_PKEY_CTX_new(params, NULL))) handleErrors();

    /* Generate the key */
    if(1 != EVP_PKEY_keygen_init(kctx)) handleErrors();
    if (1 != EVP_PKEY_keygen(kctx, &pkey)) handleErrors();

    /* Get the peer's public key, and provide the peer with our public key -
     * how this is done will be specific to your circumstances */
    peerkey = get_peerkey(pkey);

    /* Create the context for the shared secret derivation */
    if(NULL == (ctx = EVP_PKEY_CTX_new(pkey, NULL))) handleErrors();

    /* Initialise */
    if(1 != EVP_PKEY_derive_init(ctx)) handleErrors();

    /* Provide the peer public key */
    if(1 != EVP_PKEY_derive_set_peer(ctx, peerkey)) handleErrors();

    /* Determine buffer length for shared secret */
    if(1 != EVP_PKEY_derive(ctx, NULL, secret_len)) handleErrors();

    /* Create the buffer */
    if(NULL == (secret = OPENSSL_malloc(*secret_len))) handleErrors();

    /* Derive the shared secret */
    if(1 != (EVP_PKEY_derive(ctx, secret, secret_len))) handleErrors();

    EVP_PKEY_CTX_free(ctx);
    EVP_PKEY_free(peerkey);
    EVP_PKEY_free(pkey);
    EVP_PKEY_CTX_free(kctx);
    EVP_PKEY_free(params);
    EVP_PKEY_CTX_free(pctx);

    /* Never use a derived secret directly. Typically it is passed
     * through some hash function to produce a key */
    return secret;
}

The example has a peerkey = get_peerkey(pkey); line where it sets the peerkey and basically leaves it on the user to implement this function. I would imagine it would be straightforward if I was using OpenSSL on the server side as well.
My question:
Referring to the above code,and keeping in mind that I'm receiving the server's public key as a uint8_t array, how do I set the EVP_PKEY *peerkey context so that it contains the server's public key?
If there's another straight-forward crypto library in C that I can use on Ubuntu then please do suggest!
Really appreciate any help.
Thank you!
","","122","<public-key><diffie-hellman><openssl>","1","","0","2019-05-09 15:15:42","","4","","","","","2019-05-09 15:14:15",""
"43844654","Elliptic Curve Cryptography PHP: catchable fatal error argument 1 passed to __construct()","I am trying to use Elliptic Curve Cryptography using Matyas Danter's phpecc libraries available in 1 . However, I am getting the following error when I create the variable Alice , although the passed argument is a Point.. please help..

Catchable fatal error: Argument 1 passed to EcDH::__construct() must be an instance of Point, string given, called in C:\xampp\htdocs\ECC-example.php on line 31 and defined in C:\xampp\htdocs\classes\EcDH.php on line 39

         include 'autoload.inc.php';
         include 'classes/EcDH.php';
         include 'classes/PHPECC.class.php';
         include 'classes/SECurve.class.php';
         $keypair = PHPECC::hex_keypair_genorate();

         $g = NISTcurve::generator_192();
         echo $g;
         $Alice = new EcDH(g);

..........................................
NISTcurve.php has the below function:
         public static function generator_192() {
         // NIST Curve P-192:
        if (extension_loaded('gmp') && USE_EXT == 'GMP') {
        $_p = '6277101735386680763835789423207666416083908700390324961279';
        $_r = '6277101735386680763835789423176059013767194773182842284081';
        $_b = gmp_Utils::gmp_hexdec('0x64210519e59c80e70fa7e9ab72243049feb8deecc146b9b1');
        $_Gx = gmp_Utils::gmp_hexdec('0x188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012');
        $_Gy = gmp_Utils::gmp_hexdec('0x07192b95ffc8da78631011ed6b24cdd573f977a11e794811');

        $curve_192 = new CurveFp($_p, -3, $_b);
        $generator_192 = new Point($curve_192, $_Gx, $_Gy, $_r);
    } else if (extension_loaded('bcmath') && USE_EXT == 'BCMATH') {
        $_p = '6277101735386680763835789423207666416083908700390324961279';
        $_r = '6277101735386680763835789423176059013767194773182842284081';
        $_b = bcmath_Utils::bchexdec('0x64210519e59c80e70fa7e9ab72243049feb8deecc146b9b1');
        $_Gx = bcmath_Utils::bchexdec('0x188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012');
        $_Gy = bcmath_Utils::bchexdec('0x07192b95ffc8da78631011ed6b24cdd573f977a11e794811');

        $curve_192 = new CurveFp($_p, -3, $_b);
        $generator_192 = new Point($curve_192, $_Gx, $_Gy, $_r);
    }
    return $generator_192;
}

","The error was in the last line
$Alice = new EcDH(g) -> wrong
$Alice = new EcDH($g) -> correct
A sily mistake that caused a huge error..
","111","<php><encryption><public-key-encryption><elliptic-curve><diffie-hellman>","0","0","1","2017-05-22 08:34:47","","0","","","","","2017-05-08 09:54:28",""
"45926946","NTE_BAD_DATA in CryptSetKeyParam while setting KP_P in wincrypt","I am having the below code. I am setting a prime for diffie-hellman algorithm using char *. 
I am getting bad data after i set the prime. Where am i doing wrong?
I followed the same example in this link.
https://msdn.microsoft.com/en-us/library/aa381969(VS.85).aspx#exchanging_diffie-hellman_keys
What is the correct way to set prime in diffie-hellman using wincrypt?
#define DHKEYSIZE 1024
int fld_sz = 256;
BYTE* g_rgbPrime = new BYTE[DHKEYSIZE/8];   
char * prime = ""A1BD60EBD2D43C53FA78D938C1EF8C9AD231F9862FC402739302DEF1B6BEB01E5BE59848A04C48B0069A8FB56143688678F7CC1097B921EA3E13E1EF9B9EB5381BEFDE7BBF614C13827493A1CA31DA76B4083B62C5073451D6B1F06A2F1049C291464AC68CBB2F69474470BBAD374073392696B6447C82BF55F20B2D015EB97B"";
string s_prime(prime, fld_sz);
vector<std::string> res;
// split the string two charactes for converting into hex format
for (size_t i = 0; i < fld_sz; i += 2)
    res.push_back(s_prime.substr(i, 2));
for(int i = 0; i < res.size(); i++) {
    BYTE b = static_cast<BYTE>(std::stoi(res[i], 0, 16));
    g_rgbPrime[i] = b;
}
BYTE g_rgbGenerator[128] = 
{
    0x02
};
BOOL fReturn;
HCRYPTPROV hProvParty1 = NULL; 
HCRYPTPROV hProvParty2 = NULL; 
CRYPT_DATA_BLOB P;
CRYPT_DATA_BLOB G;
HCRYPTKEY hPrivateKey1 = NULL;
HCRYPTKEY hPrivateKey2 = NULL;
PBYTE pbKeyBlob1 = NULL;
PBYTE pbKeyBlob2 = NULL;
HCRYPTKEY hSessionKey1 = NULL;
HCRYPTKEY hSessionKey2 = NULL;
PBYTE pbData = NULL;

/************************
Construct data BLOBs for the prime and generator. The P and G 
values, represented by the g_rgbPrime and g_rgbGenerator arrays 
respectively, are shared values that have been agreed to by both 
parties.
************************/
P.cbData = DHKEYSIZE / 8;
P.pbData = (BYTE*)(g_rgbPrime);

G.cbData = DHKEYSIZE / 8;
G.pbData = (BYTE*)(g_rgbGenerator);

/************************
Create the private Diffie-Hellman key for party 1. 
************************/
// Acquire a provider handle for party 1.
fReturn = CryptAcquireContext(
    &hProvParty1, 
    NULL,
    MS_ENH_DSS_DH_PROV,
    PROV_DSS_DH, 
    CRYPT_VERIFYCONTEXT);
if(!fReturn)
{
    goto ErrorExit;
}

// Create an ephemeral private key for party 1.
fReturn = CryptGenKey(
    hProvParty1, 
    CALG_DH_EPHEM, 
    DHKEYSIZE << 16 | CRYPT_EXPORTABLE | CRYPT_PREGEN,
    &hPrivateKey1);
if(!fReturn)
{
    goto ErrorExit;
}

// Set the prime for party 1's private key.
fReturn = CryptSetKeyParam(
    hPrivateKey1,
    KP_P,
    (PBYTE)&P,
    0);
if(!fReturn)
{
    std::cout << GetLastError() << endl;
    goto ErrorExit;
}

// Set the generator for party 1's private key.
fReturn = CryptSetKeyParam(
    hPrivateKey1,
    KP_G,
    (PBYTE)&G,
    0);
if(!fReturn)
{
    std::cout << GetLastError() << endl;
    goto ErrorExit;
}

Thanks in advance. 
Update 1:
Thanks to @RbMm I was able to set the prime. The problem was with DHKEYSize. However i am getting an error in while setting KP_X. updated the code above to reflect the new code. 
Here i converted the string to hex bytes array.
","size of prime KP_P (and KP_G) and DH key size hard connected. must be cbKey == 8*cbP. look for example Diffie-Hellman Client Code for Creating the Master Key:
as key size if used cbP * 8 where cbP size of prime P. in your link also P.cbData = DHKEYSIZE/8;
also in code instead hard-code size of P (and G) you can get it in runtime:
ULONG dwDataLen;
CryptGetKeyParam(hPrivateKey1, KP_P, 0, &(dwDataLen = 0), 0);
CryptGetKeyParam(hPrivateKey1, KP_G, 0, &(dwDataLen = 0), 0);

and you can sure that dwDataLen == DHKEYSIZE / 8 where DHKEYSIZE is key size.
because you use  512 as key size, the length of data for P and G must be 512/8=64. but you use 256 (for P) and 1 (for G). as result and error.
","109","<c++><windows><winapi><diffie-hellman><wincrypt>","0","1","1","2017-08-29 18:28:20","45928073","0","","1294545","","2017-08-29 18:28:20","2017-08-28 20:33:21",""
"52475881","Diffie-Hellman in swift can work with JAVA","I am trying to develop key-exchange diffe-Hellman between swift and java server .
I read all link about Diffie hetlman and in all of them told I should use (g^a mod p)^b mod p = g^ab mod p for making PublicKey.
But when I started to share my PublicKey with server I faced with this exception
java.security.spec.InvalidKeySpecException: Inappropriate key specification
  at com.sun.crypto.provider.DHKeyFactory.engineGeneratePublic(DHKeyFactory.java:85)
  at java.security.KeyFactory.generatePublic(KeyFactory.java:334)
  at com.pushro.server.managers.server.RequestsHandler.processKeyExchange(RequestsHandler.java:867)
  at com.pushro.server.managers.server.RequestsHandler.processPacket(RequestsHandler.java:275)
  at com.pushro.server.managers.server.RequestsHandler.processPacket(RequestsHandler.java:1315)
  at com.pushro.server.managers.server.RequestsHandler.access$000(RequestsHandler.java:40)
  at com.pushro.server.managers.server.RequestsHandler$1.handleEvent(RequestsHandler.java:96)
  at com.pushro.server.managers.queue.DisruptorManager$WriteEventHandler.onEvent(DisruptorManager.java:37)
  at com.pushro.server.managers.queue.DisruptorManager$WriteEventHandler.onEvent(DisruptorManager.java:34)
  at com.lmax.disruptor.BatchEventProcessor.run(BatchEventProcessor.java:129)
  at java.lang.Thread.run(Thread.java:748)
Caused by: java.security.InvalidKeyException: Invalid key format
  at com.sun.crypto.provider.DHPublicKey.<init>(DHPublicKey.java:127)
  at com.sun.crypto.provider.DHKeyFactory.engineGeneratePublic(DHKeyFactory.java:78)
  ... 10 more

I used standard X509EncodedKeySpec for get key and generate Secret code in java. 
X509EncodedKeySpec ks = new X509EncodedKeySpec(PublicKey_byte);
KeyFactory keyFactory = KeyFactory.getInstance(""DH"");
PublicKey clientPublicKey = keyFactory.generatePublic(ks);

I'm read all of this link but they didn't help me.

https://github.com/gsurma/diffie_hellman_key_exchange
https://gist.github.com/jmcd/b9a212df5dfa88b6d8dcb52c51b6be6b
https://developer.apple.com/documentation/security/1643701-seckeycreatewithdata
https://developer.apple.com/documentation/security/seckey
https://developer.apple.com/documentation/security/secure_transport#//apple_ref/doc/uid/TP30000155

","","109","<java><swift4><diffie-hellman><public-key-exchange>","1","","0","2019-01-02 07:57:55","","1","","2862860","","2019-01-02 07:57:55","2018-09-24 09:05:02",""
"34889422","Diffie Hellman in actionscript","I'm not a mathematician and haven't been able to create a procedure myself. Googled for a day and read a lot of posts, but there seems to be no working example around in AS: is anyone willing to share some working source to get me up and running??
","The Hurlant Crypto library has an implementation of BigInteger class. It does not have DH directly, but you can use the BigInteger class to roll your own 
var g:BigInteger = new BigInteger(""5"");
var x:ByteArray = new ByteArray;
var rnd:Random = new Random();
rnd.nextBytes(x, (512>>3));
x.position = 0;
var p:BigInteger = new BigInteger(x);
p.primify(512, 1);
x = new ByteArray;
rnd = new Random();
rnd.nextBytes(x, (512>>3));
x.position = 0;
var b:BigInteger = new BigInteger(x);
b.primify(512, 1);
var B:BigInteger = g.modPow(b,p);

send g,p,B to the other end and when A comes back do the calcs for s
","107","<encryption><actionscript><diffie-hellman>","0","0","1","2016-03-04 15:11:39","","0","","","","","2016-01-20 00:25:31",""
"45698520","ECDH Generating Public key causes the point to not be on the curve VB.net","I am not sure whether this question was relevant for stackoverflow or cryptography stackexchange, but I thought that I would ask it here as the question might go into programming.
I am trying to generate a public and private keypair using elliptic curve diffie-hellman, I successfully generate a private key that is smaller than the order of the curve but when I calculate the public key by multiplying the base point by the private key I calculate a point that is not on the curve.
The code I am using to generate the keys looks like this:
Public Shared Function generate_Keys(ByVal Param As Domain_Parameters) As Keys
        Dim __PrivateKey As BigInteger
        Dim __PublicKey As ECPoint
        Dim d As BigInteger
        Dim rng As New RNGCryptoServiceProvider
        Dim bytes(Param.n.ToByteArray.Length) As Byte
        Do
            rng.GetBytes(bytes)
            d = New BigInteger(bytes)
            If d.Sign = -1 Then
                d = d * -1
            End If
        Loop While d >= Param.n
        __PrivateKey = d
        __PublicKey = Point_Operations.Scalar_Mult(Param.Base, Param, d)
        Dim Ret As Keys
        Ret.PublicKey = __PublicKey
        Ret.PrivateKey = __PrivateKey
        __PrivateKey = BigInteger.Zero()
        d = BigInteger.Zero()
        bytes = {0}
        Return Ret
    End Function

And the code that I have tested and works fine to multiply the base point by the private key looks like this:
Public Class Point_Operations
''' <summary>
''' A structure that contains data returned from Extended_GCD function
''' </summary>
Friend Structure RetGCD
    Public x As BigInteger
    Public y As BigInteger
    Public GCD As BigInteger
End Structure
''' <summary>
''' Perfomrs addition of two points
''' </summary>
Public Shared Function Addition(ByVal P1 As ECPoint, ByVal P2 As ECPoint) As ECPoint
    'Details about the maths was found on https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication
    'Tested with the site http://christelbach.com/ECCalculator.aspx
    If P1.IsPointInfinity() Then
        Return P2
    End If
    If P2.IsPointInfinity() Then
        Return P1
    End If
    If P1.p <> P2.p Then
        Return New ECPoint(-99, -99, -99) 'Add custom errors with ENUM
    End If
    If P1.x = P2.x And P1.y = P2.y Then
        Return New ECPoint(-99, -99, -99)
    End If
    Dim P3 As New ECPoint(P1)
    Dim l, z As BigInteger
    z = Inverse((P2.x - P1.x), P1.p)
    l = ((P2.y - P1.y) * z) Mod P1.p
    P3.x = ((l * l) Mod P1.p - P2.x - P1.x) Mod P1.p
    P3.y = (l * (P1.x - P3.x) Mod P1.p - P1.y) Mod P1.p
    If P3.x < 0 Then 'Tested the code without the peice below and found that the input (10,10,47) and (20,20,47) returned wrong values found out that the difference between each was the prime number so if its less than zero we add the prime whcih seems to work
        P3.x += P1.p
    End If
    If P3.y < 0 Then
        P3.y += P1.p
    End If
    Return P3
End Function
''' <summary>
''' A way of doubling a EC Point
''' </summary>
Public Shared Function PDouble(ByVal P As ECPoint, ByVal a As Domain_Parameters) As ECPoint
    'Details about the maths was found on https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication
    'Tested with the site http://christelbach.com/ECCalculator.aspx
    If P.p = 0 And a.Fp.p = 0 Then
        Return New ECPoint(-99, -99, -99)
    End If
    'If a.a = 0 Then
    '    Return New ECPoint(-99, -99, -99)
    'End If
    If P.IsPointInfinity() Then
        Return P
    End If
    Dim prime As BigInteger
    If P.p = 0 Then
        prime = a.Fp.p
    Else
        prime = P.p
    End If
    Dim Q As New ECPoint(P)
    Dim l, z As BigInteger
    z = Inverse(2 * P.y, P.p)
    l = ((((3 * P.x * P.x) Mod P.p + a.a) Mod P.p) * z) Mod P.p
    Q.x = ((l * l) Mod P.p - 2 * P.x) Mod P.p     'accidental set (2 * p.x) to (2 * P.p)
    Q.y = (l * (P.x - Q.x) Mod P.p - P.y) Mod P.p
    If Q.x < 0 Then 'This code was tested and the same problem again with negative values for x and y so we must add the prime to p to correct that
        Q.x += P.p
    End If
    If Q.y < 0 Then
        Q.y += P.p
    End If
    Return Q
End Function
''' <summary>
''' Performs point multiplication with a scalar
''' </summary>
Public Shared Function Scalar_Mult(ByVal P As ECPoint, ByVal a As Domain_Parameters, ByVal Scalar As BigInteger) As ECPoint
    'Details about the maths was found on https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication
    'Tested with the site http://christelbach.com/ECCalculator.aspx
    If P.p = 0 And a.Fp.p = 0 Then
        Return New ECPoint(-99, -99, -99)
    End If
    'If a.a = 0 Then
    '    Return New ECPoint(-99, -99, -99)
    'End If
    If P.IsPointInfinity Then
        Return P
    End If
    Dim prime As BigInteger
    If P.p = 0 Then
        prime = a.Fp.p
    Else
        prime = P.p
    End If
    'Dim k As New BigInteger(Scalar.ToByteArray)
    Dim N, S As New ECPoint(P)
    S = New ECPoint(0, 0, prime)                      'Accidentally set S.y = 1 was causing a bad value
    'Dim sc As New BigInteger(k.ToByteArray)        'Depreciated as now we can use bits.lenght
    'Dim bitlenght As Integer
    'While sc / 2 <> 0
    '    bitlenght += 1
    '    sc /= 2
    'End While
    Dim bits As New BitArray(Scalar.ToByteArray)
    For i = 0 To bits.Length - 1
        If bits(i) = True Then                      'Fixed error where BitArray uses True/False instead of 1/0
            S = Addition(S, N)
        End If
        N = PDouble(N, a)
    Next
    Return S
End Function
''' <summary>
''' Calcualtes the Greatest Common Divisor of two numbers
''' </summary>
Private Shared Function Extended_GCD(ByVal a As BigInteger, b As BigInteger) As RetGCD
    'The pseudocode was found on https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm#Pseudocode
    'Tested with the site http://planetcalc.com/3298/
    Dim r, o_r As BigInteger
    Dim t, o_t As BigInteger
    Dim s, o_s As BigInteger
    Dim p, q As BigInteger
    Dim ret As RetGCD
    s = 0
    t = 1
    r = b
    o_s = 1
    o_t = 0
    o_r = a
    While r <> 0
        q = o_r / r
        p = r
        r = o_r - q * p
        o_r = p
        p = s
        s = o_s - q * p
        o_s = p
        p = t
        t = o_t - q * p
        o_t = p
    End While
    ret.x = o_s
    ret.y = o_t
    ret.GCD = o_r
    Return ret
End Function
''' <summary>
''' Performs the modular multiplitcative inverse of a number so we can use multiplication instead of division in our arithmetic
''' </summary>
Public Shared Function Inverse(ByVal a As BigInteger, ByVal p As BigInteger) As BigInteger
    'Not tested but works
    Dim ret As RetGCD
    ret = Extended_GCD(a, p)
    If ret.GCD <> 1 Then
        Return 0
    End If
    Return ret.x Mod p
End Function

I have a feeling that it is possibly the way I am generating a private key or that I am using the wrong operation when calculating G.d .
Any help would really be appreciated thanks.
===EDIT===
After spending some time check values I have found the problem to be caused by the scalar_mult function not returning the right value. Is this function written correctly because i am unsure I have tested it with values from a site and it has been adapted from the pseudocode on wikipedia. Is that the correct method for adding a point to itself x number of time?
","","106","<vb.net><elliptic-curve><diffie-hellman>","2","","0","2017-08-15 19:53:06","","2","0","6656310","","2017-08-15 19:53:06","2017-08-15 17:47:43",""
"24253343","DH_free precise behavior","I'm using openssl, specifically the DH and BIGNUM libraries, to implement my own Diffie Hellman key exchange process, and I have some concerns about how it works.
The documentation I've been able to find, mostly here, hasn't been as accurate as I might have hoped.  My question is about how DH_free works.  Is it more or less a wrapper on free, or does openssl have its own internal functions that handle memory management?  What happens when DH_free gets called on a null pointer?
","
My question is about how DH_free works. Is it more or less a wrapper on free, or does openssl have its own internal functions that handle memory management? What happens when DH_free gets called on a null pointer?

When all else fails, go to the source.
$ cd openssl-1.0.1h
$ grep -R DH_free * | grep void
crypto/dh/dh.h:void DH_free(DH *dh);
crypto/dh/dh_lib.c:void DH_free(DH *r)
doc/crypto/dh.pod: void DH_free(DH *dh);
doc/crypto/DH_new.pod: void DH_free(DH *dh);

The implementation is located in dh_lib.c. Below is the cleaned up version (some #defines were removed, and the source code was formatted):
void DH_free(DH *r)
{
    int i;
    if(r == NULL) return;

    i = CRYPTO_add(&r->references, -1, CRYPTO_LOCK_DH);
    if (i > 0) return;

    if (r->meth->finish)
        r->meth->finish(r);

#ifndef OPENSSL_NO_ENGINE
    if (r->engine)
        ENGINE_finish(r->engine);
#endif

    CRYPTO_free_ex_data(CRYPTO_EX_INDEX_DH, r, &r->ex_data);

    if (r->p != NULL) BN_clear_free(r->p);
    if (r->g != NULL) BN_clear_free(r->g);
    if (r->q != NULL) BN_clear_free(r->q);
    if (r->j != NULL) BN_clear_free(r->j);
    if (r->seed) OPENSSL_free(r->seed);
    if (r->counter != NULL) BN_clear_free(r->counter);
    if (r->pub_key != NULL) BN_clear_free(r->pub_key);
    if (r->priv_key != NULL) BN_clear_free(r->priv_key);
    OPENSSL_free(r);
}

","106","<c++><memory-management><openssl><diffie-hellman>","1","1","1","2014-06-17 06:43:55","24253444","2","","","","","2014-06-16 22:46:56",""
"31666643","Why does EVP_PKEY_keygen() fail?","From what I have gathered reading the OpenSSL wiki page, my code to generate a Diffie-Hellman key is correct.  But it fails on the last step -- EVP_PKEY_keygen().
Is there a way to get more detailed information besides pass/fail?  Perhaps even the reason it failed?
","Here's how to get more detailed information out of OpenSSL errors.  It's minimal but generally helpful.
#include <openssl/err.h>

// Do this during construction or initialization
ERR_load_crypto_strings();

// Do this when an error occurs
unsigned long error = ERR_get_error();
cout << ""Error code = "" << error << std::endl;
cout << ERR_reason_error_string(error) << std::endl;

// Do this when shutting down
ERR_free_strings();

","105","<c++><openssl><diffie-hellman>","0","0","1","2015-07-31 19:22:27","","1","","","","","2015-07-28 02:59:53",""
"17486710","Java XpowYmodN function, DiffieHellman","I need for the Diffie Hellman protocol to create a function XpowYmodN. I have found online the following function:
    public long XpowYmodN(long x, long y, long N) {
    long result = 1;
    final long oneShift63 = ((long) 1) << 63;

    for (int i = 0; i < 64; y <<= 1, i++) {
        result = result * result % N;
        if ((y & oneShift63) != 0)
            result = result * x % N;
    }
    return result;
}

For this example: XpowYmodN(29,83,53) the result is 43. According to the manufacturer of the device calculations the result should be 50. Could anyone point me where i am doing it wrong?
I have tried with Math.pow(X,Y) % N, for this example and i get result 28. Im condused and would like some tips on how to fix it. Thank you.
","Why don't you use the class java.math.BigInteger? This class has a method called modPow() which is designed for cryptography usage.
The usage would be
BigInteger result = BigInteger.valueOf(x).modPow(BigInteger.valueof(y), BigInteger.valueOf(n));

By the way variables a named with lower case letters (n in my case).
","105","<java><function><math><diffie-hellman>","0","0","3","2013-07-06 15:41:06","","1","","","","","2013-07-05 10:29:41",""
"17486710","Java XpowYmodN function, DiffieHellman","I need for the Diffie Hellman protocol to create a function XpowYmodN. I have found online the following function:
    public long XpowYmodN(long x, long y, long N) {
    long result = 1;
    final long oneShift63 = ((long) 1) << 63;

    for (int i = 0; i < 64; y <<= 1, i++) {
        result = result * result % N;
        if ((y & oneShift63) != 0)
            result = result * x % N;
    }
    return result;
}

For this example: XpowYmodN(29,83,53) the result is 43. According to the manufacturer of the device calculations the result should be 50. Could anyone point me where i am doing it wrong?
I have tried with Math.pow(X,Y) % N, for this example and i get result 28. Im condused and would like some tips on how to fix it. Thank you.
","Your answer is correct. But the value the calculator provides is not the calculation but the exchanged key. And your answer refers to the public value as seen by the sender or receiver
","105","<java><function><math><diffie-hellman>","0","0","3","2013-07-06 15:41:06","","1","","","","","2013-07-05 10:29:41",""
"17486710","Java XpowYmodN function, DiffieHellman","I need for the Diffie Hellman protocol to create a function XpowYmodN. I have found online the following function:
    public long XpowYmodN(long x, long y, long N) {
    long result = 1;
    final long oneShift63 = ((long) 1) << 63;

    for (int i = 0; i < 64; y <<= 1, i++) {
        result = result * result % N;
        if ((y & oneShift63) != 0)
            result = result * x % N;
    }
    return result;
}

For this example: XpowYmodN(29,83,53) the result is 43. According to the manufacturer of the device calculations the result should be 50. Could anyone point me where i am doing it wrong?
I have tried with Math.pow(X,Y) % N, for this example and i get result 28. Im condused and would like some tips on how to fix it. Thank you.
","I tested various numbers into that function and it worked great. I then created a duplicate function that used the following code based on Uwe Plonus' answer:
public long XpowYmodN(long x, long y, long N) {
    return BigInteger.valueOf(x).modPow(BigInteger.valueOf(y), BigInteger.valueOf(N)).longValue();
}

I tested your numbers into it and got 43, just like that function; so that function seems to be working perfectly. The person that posted 29,83,53 numbers as resulting in 50 appears to be wrong. The correct answer for 29,83,53 is 43.
Here's the complete code I used:
public class Main {
    public static long XpowYmodN_(long x, long y, long N) {
        long result = 1;
        final long oneShift63 = ((long) 1) << 63;

        for (int i = 0; i < 64; y <<= 1, i++) {
            result = result * result % N;
            if ((y & oneShift63) != 0)
                result = result * x % N;
        }
        return result;
    }

    public static long XpowYmodN(long x, long y, long N) {
        return BigInteger.valueOf(x).modPow(BigInteger.valueOf(y), BigInteger.valueOf(N)).longValue();
    }

    public static void main(String[] args)
    {
        System.out.println(""BEGIN main"");


        System.out.println(Main.XpowYmodN_(29,83,53));
        System.out.println(Main.XpowYmodN(29,83,53));
    }
}

which gave the output of:

BEGIN main
43
43

","105","<java><function><math><diffie-hellman>","0","0","3","2013-07-06 15:41:06","","1","","","","","2013-07-05 10:29:41",""
"24652007","PHP - Glitchy mod (%) operator","For some reason: the display looks like this:
3 to the power of x mod 17 is 19. This is called v.

Shared person a (v):
19 

and in the script, it looks like this (this script is used to describe Diffie-Hellman key exchange algorithm.):
$p=""17"";
$g=""3"";
$px=gmp_nextprime(rand());
$x=gmp_strval($px);
$a=$g^$x%$p;
echo ""$g to the power of x mod $p is $a. This is called v.<br>"";
echo ""<br>Shared person a (v):<br>"";
echo ""$a <br>"";

Wondering if this is kind of a PHP glitch, because: 
if{x mod y=z}, z<y

Now my questions: 
How to fix this? 
Had I done anything wrong? 
Is this a PHP glitch?
(The code needs a clean up, I know.)
Additional notes:
$x = 2047401017
","Well, ^ is not the power operator and modulo precedes both of them; besides, GMP has a function for power-modulo already:
$p=""17"";
$g=""3"";
$px=gmp_nextprime(rand());

$a = gmp_powm($g, $px, $p);

echo ""$g to the power of x mod $p is $a. This is called v.<br>"";
echo ""<br>Shared person a (v):<br>"";
echo ""$a <br>"";

","98","<php><operators><modulo><diffie-hellman>","-2","0","2","2014-07-09 11:33:57","24652164","3","0","","","","2014-07-09 11:05:47",""
"24652007","PHP - Glitchy mod (%) operator","For some reason: the display looks like this:
3 to the power of x mod 17 is 19. This is called v.

Shared person a (v):
19 

and in the script, it looks like this (this script is used to describe Diffie-Hellman key exchange algorithm.):
$p=""17"";
$g=""3"";
$px=gmp_nextprime(rand());
$x=gmp_strval($px);
$a=$g^$x%$p;
echo ""$g to the power of x mod $p is $a. This is called v.<br>"";
echo ""<br>Shared person a (v):<br>"";
echo ""$a <br>"";

Wondering if this is kind of a PHP glitch, because: 
if{x mod y=z}, z<y

Now my questions: 
How to fix this? 
Had I done anything wrong? 
Is this a PHP glitch?
(The code needs a clean up, I know.)
Additional notes:
$x = 2047401017
","^ is not the exponent operator, it's the bitwise XOR operator. As of PHP 5.6, the exponent operator is **. So it should be either
$a = ($g ** $x) % $p;

or
$a = $g ** ($x % $p);

The exponent operator was added in PHP 5.6. Prior to this, you need to use the pow() function:
$a = pow($g, $x) % $p;

","98","<php><operators><modulo><diffie-hellman>","-2","0","2","2014-07-09 11:33:57","24652164","3","0","","","","2014-07-09 11:05:47",""
"55609785","Unable to resolve ssl3_check_cert_and_algorithm:dh key too small issue in nodejs https request","I'm trying to invoke a webservice using https request in my node.js code. But Im getting SSL routines:ssl3_check_cert_and_algorithm:dh key too small:../deps/openssl/openssl/ssl/s3_clnt.c error. 
Even tried downloading the full certificate chain from the host website and added the certificate to the https request while invoking the URL but still got the same error.
Here is the https request code that I'm using to invoke the service.
var https = require(""https"");

let fs = require('fs');

exports.connect = function (param, callback) {
  try {
  const options = {
      protocol: 'https',
      host: 'hostname',
      path: 'fullpath',
      method: 'GET',
      cert = fs.readFileSync(cert.cer)
    };
    let jsonObj = """";
    var req = https.request(options, function (res, error) {
      var chunks = [];
      console.log(res);
      res.on('data', function (chunk) {
        chunks.push(chunk);
      });
      res.on(""end"", function () {
        var body = Buffer.concat(chunks);
        try {
          jsonObj=body.toString();
          console.log(""Response is "" + jsonObj);
          return(null, jsonObj);
        } catch (error) {
          console.log(error);
          return callback(error, null)
        }
      });
    });
    req.end();
  } catch (err) {
    console.log(err);
    return callback(err, null)
  }
}

","","96","<node.js><ssl-certificate><httprequest><diffie-hellman>","0","","0","2019-04-10 10:00:14","","0","","","","","2019-04-10 10:00:14",""
"55531544","SOLVED : Android, Generate Diffie Hellman Public Key received as BigInteger (error : invalid DH public key)","I have one application android in kotlin and one Python on raspberry-Pi.
In my android application, I receive the PublicKey from my raspberry-Pi as a Big Integer String and I need to convert it to PublicKey to continue my Diffie Hellman.
With an Android 5.0 API 21 that's works very well but not with Android 8.0 API 26, 
I have the following error on generatePublic: Caused by "" com.android.org.bouncycastle.jcajce.provider.asymmetric.util.ExtendedInvalidKeySpecException: invalid DH public key""
fun setReceivePublicKey(PublicKey: String?){
        if(PublicKey != null) {
            receivePublickeyInteger = PublicKey.toBigInteger(10)
            val kf : KeyFactory  = KeyFactory.getInstance(algorithm)
            val spec = DHPublicKeySpec(receivePublickeyInteger,p, g)
            receivePublicKey = kf.generatePublic(spec)
        }
    }

Receive PublicKey : ""1186077227678271540134862509873546604676586024525309469618216434360152823434999056481566892156846842514101786948011297818911589672275028242935710062913875151954912314844969895542136815935639151551824495652302435339103572121293460269849673020899573708935559027341320000586684514537431365310888999481071742463382911267789320258863598830395069544603326989392097657769707348691804224452973533413701448224774045051066571001832939497012508127767764295590745468802146946779724762449738116225105818944048461975843796127501652102207854858881733445450269991549328843268527039094247517538751801284281148484990234735369353511299021673752336297213365909273938355910119789784912925756917470664241207684485528488651231599946627996206087756203382782153653973676758525394929513362198592517449044771216536426414806442100590541816453615234374853999116975727517908588868986511359049342004004550720151991928954078445791206686994303438508485508357012971719850862634083256955999083221834362950792135463522604929254266546089700839060745995960677398""
P : 5809605995369958062791915965639201402176612226902900533702900882779736177890990861472094774477339581147373410185646378328043729800750470098210924487866935059164371588168047540943981644516632755067501626434556398193186628990071248660819361205119793693985433297036118232914410171876807536457391277857011849897410207519105333355801121109356897459426271845471397952675959440793493071628394122780510124618488232602464649876850458861245784240929258426287699705312584509625419513463605155428017165714465363094021609290561084025893662561222573202082865797821865270991145082200656978177192827024538990239969175546190770645685893438011714430426409338676314743571154537142031573004276428701433036381801705308659830751190352946025482059931306571004727362479688415574702596946457770284148435989129632853918392117997472632693078113129886487399347796982772784615865232621289656944284216824611318709764535152507354116344703769998514148343807
G : 2
algorithm : ""DH""
","Later versions do more and better validation. One of the checks is to make sure that 2 < y < p-2, where y is the received public key, and you fail that check, hence the exception. As you can see, your received public key is much larger than p, suggesting that there is a bug somewhere in your system.
","90","<android><kotlin><public-key><diffie-hellman>","0","0","1","2019-06-04 13:27:41","55539187","0","","11316010","","2019-04-08 19:53:51","2019-04-05 08:47:54",""
"55451757","Efficient way to do payload signing in HTML5 SPA","I'm looking to implement some efficient (i.e. with good performance) logic that does payload signing in our web application. The goal is for the HTML5 client to have a guarantee that the contents of a received payload are indeed those that were generated by our backend.
We don't want to do payload hash generation with shared salt because the user can easily open the HTML5 source and find the salt phrase.
We have implemented RSA signing for now where our backend adds a payload signature using its Private Key and our HTML5 client validates it using its baked in Public Key. However the signature generation process takes 250ms (for a relatively small payload) and due to the nature of the signed request this amount of time is unacceptable.
The only other idea is to generate a shared secret at runtime every time a client initializes its session with the backend. The secret however can't be sent in plaintext form so it seems we're going to have to implement a Diffie-Hellman exchange mechanism, something we'd like to avoid if possible or automate with existing libraries.
Remember that the secrecy and encryption need to be done at the Application layer, due to the nature of how we sell our product. We're not looking to encrypt our traffic, this is something that our customers might or might not implement (since it's an intranet application). However, we have to avoid exposing stuff that are related to our licensing checking mechanisms etc to them. The backend is not cloud based and is not controlled by us, but installed on the customers' machines, on premises.
Frontend is Javascript and backend is Java.
","Note that Diffie-Hellman exchange mechanism is not protected against MITM attack, therefore not encrypting traffic means that you need to authenticate the DH data coming from the server. This is why a web server using a DH-based cipher suite signs the DH elements sent over the network with the private key of its server certificate, for the client to check that those elements are really from the server that he wants to connect to. Those elements are public but need to be signed.
What you call ""payload hash generation with shared salt"" is a keyed-hash message authentication code, so it is based on a shared secret, as you noticed, and since you do not want to use this mechanism, it means that you do not trust the client. Therefore, you have to use asymetric cryptography to sign your payload.
Signing a server payload with an asymetric algorithm means that you first need to let the server share a public key with the client. Since you do not encrypt data between the client and the server, you need to deploy the server public key inside the client source code.
You talk about the signature generation process, but the signature check process on the client side is also very important in your case, because the total time the user has to wait for the result is the addition of the time to sign and the time to check the signature (moreover, the signature can often be anticipated on the server, if the data to sign is not dynamically generated, but the verification can never be anticipated). So you need a rapid way of checking a signature on the client side. First, sign a hash, not the whole payload. Then choose the fastest asymetric signature algorithm that is available in your development environment, on the client side. Note that checking an RSA signature is faster that checking a DSA or ECDSA one, for respective keys length corresponding to the same security level. So you should stay with RSA.
All of this until this line may not help you so much! Now there is a way to increase the performances using RSA to sign and verify signatures, and this way is rather the same that SSL/TLS implements to increase browser performances when downloading multiple pages or other objects from the same server: use a session cache. You share a common secret for a specific session with one specific user. Never use this common secret for other sessions. When the user is connecting for the first time, use RSA only once, to exchange an ephemeral shared secret or exchange DH material to create this shared secret. Then, each time the server needs to sign an object, it creates a keyed-hash message authentication code with this specific secret. Therefore, if the user finds the secret, for instance using the debug mode of his browser, it's not a problem: this secret is only here to help him know that something that comes from the server has not been altered. So the user can not use this secret to alter data exchanges between the server and other users.
","89","<javascript><java><single-page-application><diffie-hellman><shared-secret>","0","0","2","2019-04-09 15:06:56","55595934","0","","","","","2019-04-01 09:20:02",""
"55451757","Efficient way to do payload signing in HTML5 SPA","I'm looking to implement some efficient (i.e. with good performance) logic that does payload signing in our web application. The goal is for the HTML5 client to have a guarantee that the contents of a received payload are indeed those that were generated by our backend.
We don't want to do payload hash generation with shared salt because the user can easily open the HTML5 source and find the salt phrase.
We have implemented RSA signing for now where our backend adds a payload signature using its Private Key and our HTML5 client validates it using its baked in Public Key. However the signature generation process takes 250ms (for a relatively small payload) and due to the nature of the signed request this amount of time is unacceptable.
The only other idea is to generate a shared secret at runtime every time a client initializes its session with the backend. The secret however can't be sent in plaintext form so it seems we're going to have to implement a Diffie-Hellman exchange mechanism, something we'd like to avoid if possible or automate with existing libraries.
Remember that the secrecy and encryption need to be done at the Application layer, due to the nature of how we sell our product. We're not looking to encrypt our traffic, this is something that our customers might or might not implement (since it's an intranet application). However, we have to avoid exposing stuff that are related to our licensing checking mechanisms etc to them. The backend is not cloud based and is not controlled by us, but installed on the customers' machines, on premises.
Frontend is Javascript and backend is Java.
","We ended up by using TweetNaCl both on the client and on the server side. The library provides a every easy and fast way to do DH-like shared secret exchange without going through a custom implementation. With an ephemeral shared secret we can easily generate hashes instead of signatures for our payloads dropping from 250ms to 10μs. Also RSA signing the initial DH exchange is important and the only place we use RSA.
Please read @AlexandreFenyo answer for proper theory on how to usually handle such cases.
","89","<javascript><java><single-page-application><diffie-hellman><shared-secret>","0","0","2","2019-04-09 15:06:56","55595934","0","","","","","2019-04-01 09:20:02",""
"54559829","What checks should I perform when I create a Diffie Hellman Key agreement keys from fixed p and g values using OpenSSL1.1.0g?","Hello I attempt to make a Diffie Hellman Keys using fixes p and g parameters via this piece of code base upon this answer:
#include <openssl/dh.h>
#include <openssl/bn.h>

int generateKeys(DH *encryptionInfo) {
 int codes;
 BIGNUM *two = BN_new(), *p=NULL;

 puts(""Select fixed p and g parameters\n"");

 if(two == NULL) {
   return -1;
 };

 if(p=NULL){
    BN_free(two);
    return -1;
 }

 BN_set_word(two,2);
 if( 1 != DH_set0_pqg (encryptionInfo, get_rfc3526_prime_2048(p), NULL, two)) return -1;

//  if(1 != DH_generate_parameters_ex(encryptionInfo, 2048, DH_GENERATOR_2, NULL)) return -1;
 puts(""Checking for codes\n"");
 if(1 != DH_check(encryptionInfo, &codes)) return -1;
 printf(""Codes values %d\n"", codes);
 switch(codes){
    case DH_CHECK_P_NOT_PRIME:
      puts(""DH_CHECK_P_NOT_PRIME\n"");
      break;
    case DH_CHECK_P_NOT_SAFE_PRIME:
      puts(""DH_CHECK_P_NOT_SAFE_PRIME\n"");
      break;
    case DH_UNABLE_TO_CHECK_GENERATOR:
      puts(""DH_UNABLE_TO_CHECK_GENERATOR\n"");
      break;
    case DH_NOT_SUITABLE_GENERATOR:
      puts(""DH_NOT_SUITABLE_GENERATOR\n"");
      break;
    case DH_CHECK_Q_NOT_PRIME:
      puts(""DH_CHECK_Q_NOT_PRIME\n"");
      break;
    case DH_CHECK_INVALID_Q_VALUE:
      puts(""DH_CHECK_INVALID_Q_VALUE\n"");
      break;
    case DH_CHECK_INVALID_J_VALUE:
      puts(""DH_CHECK_INVALID_J_VALUE\n"");
      break;
 }
 if(codes != 0) return -1;
 puts(""Generating Keys \n"");
 if(1 != DH_generate_key(encryptionInfo)) return -1;

 BN_free(two);
 BN_free(p);
 return 0;
}

But when I try to run this piece of code I get the following error:

Codes values 8
DH_NOT_SUITABLE_GENERATOR

By omitting the DH_check check seems to work: 
#include <openssl/dh.h>
#include <openssl/bn.h>

int generateKeys(DH *encryptionInfo) {
 int codes;
 BIGNUM *two = BN_new(), *p=NULL;

 puts(""Select fixed p and g parameters\n"");

 if(two == NULL) {
   return -1;
 };

 if(p=NULL){
    BN_free(two);
    return -1;
 }

 BN_set_word(two,2);
 if( 1 != DH_set0_pqg (encryptionInfo, get_rfc3526_prime_2048(p), NULL, two)) return -1;

//  if(1 != DH_generate_parameters_ex(encryptionInfo, 2048, DH_GENERATOR_2, NULL)) return -1;
 puts(""Checking for codes\n"");
 puts(""Generating Keys \n"");
 if(1 != DH_generate_key(encryptionInfo)) return -1;

 BN_free(two);
 BN_free(p);
 return 0;
}

But I am not sure whether I should do that, what is the recommended way in my case? What checks are required in my case?
","","86","<c><openssl><diffie-hellman>","1","","0","2019-10-30 15:56:38","","4","1","4706711","","2019-10-30 15:56:38","2019-02-06 17:58:23",""
"17087895","is client based online encryption practical?","I'm wondering whether a mechanism exists that allows client to client encryption. For example, when enabled, any information that is entered on one client can only be decrypted using a specific key.
Similar to how regular public key transactions work, but server agnostic.
A use case:
Everything on my Facebook profile is encrypted, and no body would be able to view that information (not even facebook). The users that I give the key would be able to decrypt that information.
This would allow complete control of data stored online.
The same idea can be applied for pictures uploaded to the internet.
One issue that I see is to have a practical mechanism to manage keys and a secure way to distribute keys to other users.
Has anyone done something like this before?
","In case of Facebook I can imagine encrypting the data with OpenPGP keys into armored (text) format. Then you can place encrypted block to facebook or anywhere else. Other users would take the block, decrypt it on the client side and see it.
The same applies with other social networks and places where you can store some text block. 
You can easily do encryption in some client application and even in Javascript (if you manage to make JavaScript load local user's keys somehow). 
","83","<security><encryption><public-key-encryption><diffie-hellman>","1","1","1","2013-06-13 13:35:01","17088451","0","","","","","2013-06-13 13:09:08",""
"55677357","Decode Diffie Hellman p,g,A given","Decode Text encrypted with DH coded with Caesar Cipher.
We have to decode following text: FKXSQBQZACKFAHRSCAN DFYZSYQBSFN.
I have tried to ""guess"" the private Key for Alice with a for loop and think I got the right one but now I'm stuck.
p,g and A are given.
p = 23
g = 15
A = 6 #exchangeKey Alice

I think the problem could be that I don't know how the text is coded. Did the teacher use an array like?:
alphabet = [""A"",""B"",""C"",""D"",""E"",""F"",""G"",""H"",""I"",""J"",""K"",""L"",""M"",""N"",""O"",""P"",""Q"",""R"",""S"",""T"",""U"",""V"",""W"",""X"",""Y"",""Z""]

Or did she use the ASCII table.
But is it even possible to decode this text without any information about ""Bob"".
My research brought only information about MITM attacks where the hacker got p,g,A and B
Get Alicekey
for getkeyalice in range(p):
    if (g**getkeyalice)%p == A:
        keyalice = getkeyalice

Decode
for char in message:
    #index=(alphabet.index(char)-j)
    #decryptedlst.append(alphabet[index])
    decryptedlst.append(chr(ord(char)-i))
    decrypted = ''.join(decryptedlst)
    print(""decrypted message:\t""+str(decrypted))

I'm looking for the decryption key. I don't expect this should be a very high number. But even bruteforcing all numbers from 1-4096 didn't help. So back to the top.... perhaps the kind of decryption I'm using is different to the encryption of the teacher.
","This problem can not be resolved due to a lack of input.
Even if you can easily brute-force Alice's private key, that is 14 (15¹⁴[23]≡6[23]), you have not any information about Bob's choice of key values, so you have no information that could help you find the DH shared secret between Alice and Bob. This is because the shared secret depends both on informations chosen from Alice and on informations chosen by Bob. Therefore, you can not cryptanalyze this problem.
","73","<python-3.x><caesar-cipher><diffie-hellman>","1","0","1","2019-04-23 10:45:43","","0","","","","","2019-04-14 16:10:20",""
"16335576","Exposing Diffie Hellman shared key in the logs for openssl lib","In the openssl libarary there is a function called DH_Compute_key which will create the shared key.can we use it and expose it in the log for debugging purpose?
","Yes. OpenSSL is opensource as you know - so just add some printfs there, rebuild it, and expose everything you need.
","73","<encryption><wireshark><diffie-hellman>","0","1","1","2013-05-02 13:29:42","16339314","0","","","","","2013-05-02 10:20:45",""
"57789276","How to integrate tcp-modbus with diffie hellman?","I have a simple modbus client-server code and also have a diffie-hellman client-server key exchange. My aim is to integrate the two so that when modbus client initiates request to modbus server, first step is do a key exchange and then encrypt the data transmission from modbus client to server and vice versa.
I know that in python socketserver the class BaseRequestHandler the handle() method is overridden for communication between client and server which I have done for diffie-hellman key exchange.
dh-server.py
import socketserver

# request handler
class Dh_Handler(socketserver.BaseRequestHandler):

    # instantiate request handler, one per connection
    def __init__(self, request, client_addr, server):
        self.params = load_dh_params()  # store DH parameters
        self.state = 0  # tracking state
        socketserver.BaseRequestHandler.__init__(self, request, client_addr, server)    # pass variables to BaseRequestHandler

    # must override handle() to implement communication to client
    def handle(self):
        # calculate shared secret
        shared_key = dh_key_exchange()

        # key derivation used for symmetric encryption
        key = key_derivation(shared_key)

def main():
    host, port = '10.8.8.11', 502

    # instance of TCP server class, params: ip_address, request_handler
    dh_server = socketserver.TCPServer((host, port), Dh_Handler)

    # stop server via keyboard interrupt
    try:
        # infinite loop listen
        dh_server.serve_forever()
    except KeyboardInterrupt:
        dh_server.shutdown()


dh-client.py
import socket

def main():
    # we specify the server's address or hostname and port
    host, port = '10.8.8.11', 502

    # create a tcp socket for IPv4
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # connect to the tcp socket
    sock.connect((host, port))

    # key exchange from server
    shared_key = dh_key_exchange(sock)

    # key derivation for symmetric encryption
    key = key_derivation(shared_key)

modbus-client.py
import socket

from umodbus import conf
from umodbus.client import tcp
import binascii

# Enable values to be signed (default is False).
conf.SIGNED_VALUES = True

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect(('10.8.8.11', 502))

# Returns a message or Application Data Unit (ADU) specific for doing
# Modbus TCP/IP.
message = tcp.write_multiple_coils(slave_id=1, starting_address=1, values=[1, 0, 1, 0])

# Response depends on Modbus function code. This particular returns the
# amount of coils written, in this case it is.

response = tcp.send_message(message, sock)

message = tcp.read_coils(slave_id=1, starting_address=1, quantity=4)
# message=b"""".join([message,b'\x64'])
print(binascii.b2a_hex(message))
responce = tcp.send_message(message, sock)
print(responce)
sock.close()

modbus-server.py
import logging
from socketserver import TCPServer
from collections import defaultdict

from umodbus import conf
from umodbus.server.tcp import RequestHandler, get_server
from umodbus.utils import log_to_stream

# Add stream handler to logger 'uModbus'.
log_to_stream(level=logging.DEBUG)

# A very simple data store which maps addresses against their values.
data_store = defaultdict(int)

# Enable values to be signed (default is False).
conf.SIGNED_VALUES = True

TCPServer.allow_reuse_address = True
app = get_server(TCPServer, ('10.8.8.11', 502), RequestHandler)


@app.route(slave_ids=[1], function_codes=[1, 2], addresses=list(range(0, 10)))
def read_data_store(slave_id, function_code, address):
    """""""" Return value of address. """"""
    return data_store[address]


@app.route(slave_ids=[1], function_codes=[5, 15], addresses=list(range(0, 10)))
def write_data_store(slave_id, function_code, address, value):
    """""""" Set value for address. """"""
    data_store[address] = value


if __name__ == '__main__':
    try:
        app.serve_forever()
    finally:
        app.shutdown()
        app.server_close()

What would be the best way to approach this? Can I create a server that listens on two different ports? One for key exchange and the other for encrypted modbus transmission or use threading in socketserver. What about using selectors to handle each connection.
Any help is much appreciated.
","","69","<python-3.x><encryption><diffie-hellman><socketserver><modbus-tcp>","1","","0","2019-09-04 13:17:39","","0","","","","","2019-09-04 13:17:39",""
"18817911","Diffie-Hellman using Casper","I have an assignment to model the Diffie-Hellman Key exchange protocol using Casper (in a .spl file).  I got the basics down and am finding it really hard to come up with the correct protocol desciption (#Protocol description).  I searched everywhere and tries everything(as far as my knowledge of Casper can take me) and no solution.  I'm very surprised that there is so little documentation on this.
If anyone could help me get started on this, it would be greatly appreciated.
Thanks in advanced!
","here it is! ( done by Gavin Low)
I am doing a research in these stuff, and you are right it hard to fine. Copy this code to new file and save it as .spl  
-- Diffie Hellman

#Free variables  
datatype Field = Gen | Exp(Field,Num)  unwinding 2  
A, B : Agent  
x, y : Num  
expx, expy, k : Field  
text : TEXT  

InverseKeys =  (k,k), (Exp,Exp), (Gen,Gen)  

#Processes  
INITIATOR(A, x, text)   
RESPONDER(B, y)   

#Protocol description  
0.    -> A : B  
[A != B]  
1.  A -> B : Exp(Gen,x) % expx  
[A != B and expx!=Gen]  
<k := Exp(expx, y)>  
2.  B -> A : Exp(Gen,y) % expy  
<k := Exp(expy, x)>  
3.  A -> B : {text}{k}  

#Specification  
Secret(A, text, [B])  
Secret(B, text, [A])  

#Actual variables  
Alice, Bob, Mallory : Agent  
X, Y, Z : Num  
Text1, Text2 : TEXT  

#Equivalences  
forall x, y : Num . Exp ( Exp(Gen,x), y ) = Exp( Exp(Gen,y), x )  

#System  
INITIATOR(Alice, X, Text1)  
RESPONDER(Bob,  Y)  

#Intruder Information
Intruder = Mallory
IntruderKnowledge = {Alice, Bob, Mallory, Z, Text2}

","68","<model><key><protocols><spl><diffie-hellman>","0","0","1","2013-10-03 11:21:05","","0","","","","","2013-09-15 21:58:41",""
"40471439","JS Diffie Hellman SSL with blockchain auth","I'm trying to figure out if the security quality of SSL can be mimicked without the need for a centralized CA.
There are many questions on here about setting up pure-JS diffie hellman in place of SSL. All of them are roundly refuted, and I think I understand why (although I completely disagree that there's no value in DH-keyed symmetric encryption for the millions of sites which are not going to be implementing full SSL anytime soon either way).
Anyway, question is this: it seems as though the only preventative reason JS DH wouldn't work is that you lose authentication so you're still subject to man-in-the-middle. All the myriad other issues flow from attempts to resolve this one. 
But what if you used a blockchain as a certificate authority? The process would then be 

Form DH key
encrypt any handshake string with known public key from blockchain
encrypt this verify string with DH key
if handshake string received back, authentication verifies and DH is as secure as SSL DH

Edit: didn't mean to imply DH was symmetric, adjusted for clarity
","","68","<javascript><encryption><blockchain><diffie-hellman>","0","","0","2016-11-08 16:11:33","","2","","5937695","","2016-11-08 16:11:33","2016-11-07 17:52:22",""
"52827550","Bouncy Castle - Diffie Hellman Secrets do not match","I am using Bouncy castle library to use DH key exchange. So far i have tried this much but keys seem to not match. What am i doing wrong? PLEASE HELP!
        var p = Org.BouncyCastle.Math.BigInteger.ProbablePrime(1024, new Random());
        var g = new Org.BouncyCastle.Math.BigInteger(""5"");

        var importedParameters = new Org.BouncyCastle.Crypto.Parameters.DHParameters(p, g);

        //---------------------bob---------------------------------------------------
        var scrnd = new SecureRandom();
        var bobkeyGen = GeneratorUtilities.GetKeyPairGenerator(""DH"");
        var kgp = new DHKeyGenerationParameters(scrnd, importedParameters);
        bobkeyGen.Init(kgp);
        var bobasypair = bobkeyGen.GenerateKeyPair();

        var dhPublicKeyParameters = bobasypair.Public as DHPublicKeyParameters;
        var dhPrivateKeyParameters = bobasypair.Private as DHPrivateKeyParameters;

        var internalKeyAgree = AgreementUtilities.GetBasicAgreement(""DH"");
        internalKeyAgree.Init(dhPrivateKeyParameters);
        var secret = internalKeyAgree.CalculateAgreement(dhPublicKeyParameters);

        //-----------------------------alice--------------------------------------------------------------------------------
        var alicekeyGen = GeneratorUtilities.GetKeyPairGenerator(""DH"");
        var allkgp = new DHKeyGenerationParameters(scrnd, importedParameters);
        alicekeyGen.Init(allkgp);
        var aliceasypair = alicekeyGen.GenerateKeyPair();

        var alicedhPublicKeyParameters = aliceasypair.Public as DHPublicKeyParameters;
        var alicedhPrivateKeyParameters = aliceasypair.Private as DHPrivateKeyParameters;

        var allinternalKeyAgree = AgreementUtilities.GetBasicAgreement(""DH"");
        allinternalKeyAgree.Init(alicedhPrivateKeyParameters);
        var tobesamesecret = allinternalKeyAgree.CalculateAgreement(alicedhPublicKeyParameters);

        if (!secret.Equals(tobesamesecret))
            throw new Exception();

","","61","<c#><bouncycastle><diffie-hellman>","0","","0","2018-10-16 03:25:05","","2","","","","","2018-10-16 03:25:05",""
"36699103","Diffie Hellman key exchange for VM","Here's a simpler model:
I'm planning to put 3 VM on VirtualBox - Alice, Bob and an intermediate node and implement Diffie Hellman key exchange between the three. Will this work? Is there any better way to do this? I plan to code the entire thing in JAVA.
Previous Question: 
I am working on building a smaller version of TOR network in JAVA. In the model, two people Alice and Bob interact with each other, but indirectly through a fixed amount of intermediate nodes(3 for now). The path is pre-defined as of now, but later I wish to make it dynamic.
Can anyone guide me how do I go about it? I want to use Java for its extensive support for networking. Should I use multiple VM's for the Alice, Bob and the three servers? If yes, how will they communicate?
","","57","<java><client-server><virtual-machine><tor><diffie-hellman>","0","","0","2016-04-19 03:58:58","","3","0","4818900","","2016-04-19 03:58:58","2016-04-18 16:07:58",""
"48915842","Does Thrift support Diffie Hellman ciphers for TLS?","Looking at this file it seems Thrift doesn't include openssl functions for supporting Diffie Hellman.
https://github.com/apache/thrift/blob/master/lib/cpp/src/thrift/transport/TSSLSocket.cpp
Is it implemented somewhere else?
Is there any special reason if it is not used on purpose?
Thanks in advance!
","","57","<networking><openssl><diffie-hellman><thrift-protocol>","0","","0","2018-02-21 21:33:20","","7","","","","","2018-02-21 21:33:20",""
"40818024","Determine DH params from remote server","is it possible to determine the SSL DH parameter bit size via Python?
I searched for days, but there is not single answer in the whole Internet.
The native OpenSSL can do this. Why not with Python?
","","56","<python><diffie-hellman><pyopenssl>","1","","0","2016-11-26 16:29:00","","1","","608639","","2016-11-26 16:29:00","2016-11-26 11:49:02",""
"32439736","Load/Export RandomNumber","In the frame of an home-made ECDHE application, both the client and the server have to send a randomly generated numbers (rng), in order to build later the MasterSecret during the handshake (TLS-like)...
With crypto++, it's easy to create these numbers, thanks to :
AutoSeededRandomPool rng;

My problem is 1) to export them to a string or equivalent, and 2) to load them from a string.
I must put these numbers within a frame, and nor the Class definition, nor the examples precise that.
On the web I haven't been able to find Save/Load examples (like the ones for RSA::PublicKeys).
Apparently I'm the first to want this, as their examples generate the client and the server in the same program, and thus don't need to transmit the numbers.
And, as part of this handshake, I also try to do the same with curvesID...
","This question was a misunderstanding from my part, so I'll explain it, in case of anyone having the same interrogations. It's largely inspired from the crypto++ wiki...
There are 2 distinct objects : 
AutoSeededRandomPool prng;

prng.GenerateBlock( scratch, scratch.size() );

AutoSeededRandomPool prng; is the generator of random numbers (that will be auto-seeded)
prng.GenerateBlock is the command that will extract bits from this random number to build the std::string scratch of the desired length.
And as the scratch is a string, we can do what we want with it, to use it anywhere... So please refer to the string import/export.
","56","<c++><ssl><crypto++><diffie-hellman>","0","0","1","2015-09-08 11:52:54","32457123","4","","3494633","","2015-09-07 14:40:59","2015-09-07 13:19:36",""
"57943056","Java Diffie hellman initialize ECDHKeyAgreement","I have a Diffie–Hellman security class like this: 
public class AESSecurityCap {

    private PublicKey publicKey;
    KeyAgreement keyAgreement;
    byte[] sharedsecret;

    AESSecurityCap() {
        makeKeyExchangeParams();
    }

    private void makeKeyExchangeParams() {
        KeyPairGenerator kpg = null;
        try {
            kpg = KeyPairGenerator.getInstance(""EC"");
            kpg.initialize(128);
            KeyPair kp = kpg.generateKeyPair();
            publicKey = kp.getPublic();
            keyAgreement = KeyAgreement.getInstance(""ECDH"");
            keyAgreement.init(kp.getPrivate());

        } catch (NoSuchAlgorithmException | InvalidKeyException e) {
            e.printStackTrace();
        }
    }

    public void setReceiverPublicKey(PublicKey publickey) {
        try {
            keyAgreement.doPhase(publickey, false);  // <--- Error on this line
            sharedsecret = keyAgreement.generateSecret();
        } catch (InvalidKeyException e) {
            e.printStackTrace();
        }
    }
} 

and implemented this class:    
public class Node extends AESSecurityCap {
}

Sometimes I need to reinitialize DH keyAgreement:    
public class TestMainClass {
    public static void main(String[] args) {
        Node server = new Node();
        Node client = new Node();

        server.setReceiverPublicKey(client.getPublicKey());
        client.setReceiverPublicKey(server.getPublicKey());

        // My problem is this line ,
        // Second time result exception
        server.setReceiverPublicKey(client.getPublicKey()); 
    }
}

but receive this exception:     
Exception in thread ""main"" java.lang.IllegalStateException: Phase already executed
    at jdk.crypto.ec/sun.security.ec.ECDHKeyAgreement.engineDoPhase(ECDHKeyAgreement.java:91)
    at java.base/javax.crypto.KeyAgreement.doPhase(KeyAgreement.java:579)
    at ir.moke.AESSecurityCap.setReceiverPublicKey(AESSecurityCap.java:37)
    at ir.moke.TestMainClass.main(TestMainClass.java:13)

Is there any way to reinitialize ECDH KeyAgreement multiple time?
This is my test case:

Client initialize DH and generate public key.
Client sent public key to server.
Cerver initialize DH with client key and generate own public key and generate shared secret key.
Server send public key to client.
Client generate shared secret key with server public key.
In this step client and server has public keys and shared secret.

My problem is client disconnected() and KeyAgreement initialized by singleton object and don't reinitialized second time.
Sometimes I need to do this subject.
Please guide me to fix this problem.
","The IllegalStateException (Phase already executed) seems to be especially caused by the ECDH-implementation of the SunEC-provider. The exception doesn't occur if an (additional) init is executed immediately before the doPhase. However, this init-call shouldn't be necessary, since after the doPhase-call generateSecret is executed, which should reset the KeyAgreement-instance to the state after the init-call, at least according to the generateSecret-documentation: 

This method resets this KeyAgreement object to the state that it was in after the most recent call to one of the init methods...

Possibly it's a bug in the SunEC-provider. If DH is used instead of ECDH (and the SunJCE-provider instead of the SunEC-provider) the behavior is as expected, i.e. repeated doPhase-calls are possible (without additional init-calls). The same applies to ECDH using the BouncyCastle-provider. Therefore, you could take the BouncyCastle-provider instead of the SunEC-provider to run ECDH with your code.
Note: The second parameter (lastPhase) in doPhase should be set to true, otherwise an IllegalStateException (Only two party agreement supported, lastPhase must be true) is generated (at least for ECDH).
EDIT:
The bug is already known and fixed in JDK 12, see JDK-8205476: KeyAgreement#generateSecret is not reset for ECDH based algorithmm.
","56","<java><java-ee><diffie-hellman>","2","1","1","2019-09-15 17:04:12","57945019","0","","1744774","","2019-09-15 10:15:53","2019-09-15 10:05:22",""
"55533670","Computing ECDH (secp256k1) shared secret gives wrong result","I am trying to compute ECDH (secp256k1) shared secret based on private key ""5785cb919db4984453826032a411248184536c632096c647f72db4e66a8bd091"" and public key ""0425a4ef791d8d855077c4d5dd6ca87cbda2f3296939a350e4ea57b3f0235fe1ba4d02cb29f6391675e866944065f9905a30a3e472c45c7ad7afa06143d87efa13""
I use secp256k1 with swift. 
    let myPrKeyBytes: [UInt8] = [87, 133, 203, 145, 157, 180, 152, 68,
                                 83, 130, 96, 50, 164, 17, 36, 129, 132,
                                 83, 108, 99, 32, 150, 198, 71, 247, 45,
                                 180, 230, 106, 139 ,208, 145]

    let myPubKeyBytes: [UInt8] = [4, 37, 164, 239, 121, 29, 141, 133,
                                  80, 119, 196, 213, 221, 108, 168, 124,
                                  189, 162, 243, 41, 105, 57, 163, 80,
                                  228, 234, 87, 179, 240, 35, 95, 225,
                                  186, 77, 2, 203, 41, 246, 57, 22, 117,
                                  232, 102, 148, 64, 101, 249, 144, 90,
                                  48, 163, 228, 114, 196, 92, 122, 215,
                                  175, 160, 97, 67, 216, 126, 250, 19]

    let ctx = secp256k1_context_create(UInt32(SECP256K1_CONTEXT_SIGN))

    var publicKeyParsed = secp256k1_pubkey()

    let publicKeyParseStatus = secp256k1_ec_pubkey_parse(
        ctx!,
        &publicKeyParsed,
        myPubKeyBytes,
        myPubKeyBytes.count
    )

    guard publicKeyParseStatus == 1 else {

        fatalError(""Couldn't parse the public key"")
    }


    let sharedSecretLength = 32
    let sharedSecret = UnsafeMutablePointer<UInt8>
        .allocate(capacity: sharedSecretLength)

    let sharedSecretComputeStatus = secp256k1_ecdh(
        ctx!,
        sharedSecret,
        &publicKeyParsed,
        myPrKeyBytes
    )

    guard sharedSecretComputeStatus == 1 else {

        fatalError(""Couldn't compute shared secret"")
    }

    var sharedSecretBytes: [UInt8] = []
    for i in 0..<sharedSecretLength {

        sharedSecretBytes.append(sharedSecret[i])
    }

    let sharedSecretStr = sharedSecretBytes
        .map { String(format: ""%02x"", $0) }
        .joined()

    print(""Shared secret: \(sharedSecretStr)"")
    // Shared secret: 4d6f4351d68351c419408621efddfcfcc0bc10270669af822093fcf22c9ca26c

I've got ""4d6f4351d68351c419408621efddfcfcc0bc10270669af822093fcf22c9ca26c"" shared secret, but correct secret should be ""ccf231a0ce74e92d9a94265ab27aa4616a3683af5df5aa65f4a011ad83673b49""
","","54","<swift><encryption><diffie-hellman><ecdh>","0","","0","2019-04-05 10:47:58","","5","","3100312","","2019-04-05 10:47:58","2019-04-05 10:43:38",""
"56884666","What are the ways to implement Diffie Hellman to generate public and private key in iOS swift/Objective C?(Other than Chilkat)","The requirement is, there would be two devices(alice and bob)generates public and private keys using diffie hellman. public keys would get exchanged bewteen both the devices (alice and bob) and generate a secret key with their private keys. 
This is for iOS, either in Objective C or Swift. I have tried with raorafat(GitHub code) and other source codes; however, no solution was really drawn for my requirement.
One thing if I share my public key to server how would server deal with my public key to generate symmetric key.
","You can use Apple's CommonCrypto library from Swift. For example of using CCDH, see  https://opensource.apple.com/source/CommonCrypto/CommonCrypto-60118.50.1/test/CommonCrypto/CommonDHtest.c.auto.html
You can import it using 
import CommonCrypto

in your Swift project.
","52","<ios><objective-c><openssl><diffie-hellman><commoncrypto>","0","0","1","2019-07-15 11:31:47","","0","","9651313","","2019-07-15 11:31:47","2019-07-04 09:20:51",""
"56072214","How to deal with 128bit variable in MinGM32 bit compiler for Encryption (Diffie Hellman Algorithm) in Qt","I want to use the below equation in one of the code
A = g^a mod p; //g raise to a modulus p.
(something like 2^5 % 3) = 32%3 = 2
(This equation looks like Diffie Hellman algorithm for security)
Where:

^ is (power)
g is fixed number 0x05
a is 128bit(16bytes) randomly generated number,
p is fixed hex number of 128bit(16bytes). Something like (0x0xD4A283974897234CE908B3478387A3).

I am using:

Qt 4.8.7
Compiler MinGW32 (checked with boost library boost 1.70)

The solutions which I found which didn`t work for me are listed below:

one can use __int128 but to support that one should have used
latest GCC compiler or MinGW64 bit compiler, neither of that I am using now.
I found one latest version of Qt has QSslDiffieHellmanParameters class,
but again not supported in our Qt version.
I found some libraries like  boost/multiprecision/cpp_int.hpp (boost 1.70))
that does have data type such as int128_t and int256_t, but due to 
our compiler isssue or something else, we are not able to store
128bit number, meaning
if I do: 

    int128_t ptval128 = 0xAB1232423243434343BAE3453345E34B;
    cout << ""ptval128 = "" << std::hex << ptval128 << endl;
    //will print only 0xAB12324232434343;//half digits only,


I tried using Bigint which much more useful, but again
5^(128bit number) is way too big, it takes hours to compute things,
(I waited till 1 hour  and 16 mins and kill the application).

    int myGval = 0x05;
    128_bit_data_type myPVal= 0xD4A283974897234CE908B3478387A3; 

    128_bit_data_type 128_bit_variable = 128_bit_random_data;
    myVal = (myGval)^(128_bit_variable) % (myPVal);

","That is not how to do modular exponentiation! The first problem is that 5 ^ 128_bit_variable is huge, so big that it won't fit into memory in any computers available today. To keep the required storage space within bounds, you have to take the remainder % myPVal after every operation.
The second problem is that you can't compute 5 ^ 128_bit_variable simply by multiplying by 5 by itself 128_bit_variable times -- that would take longer than the age of the universe. You need to use an exponentiation ladder, which requires just 128 squarings and at most 128 multiplications. See this Wikipedia article for the details. In the end, the operation 5 ^ 128_bit_number should take a fraction of a second.
","52","<c++><qt><boost><bigint><diffie-hellman>","-1","0","1","2019-05-10 11:27:00","56076752","1","","2110683","","2019-05-10 09:17:37","2019-05-10 06:51:12",""
"26658862","Exchange key between two clients through a server","I have a problem about exchange a key between two clients through a server.
But I don't want the server being able to intercept the key or make a MitM.
What method can I use to avoid this problem?
","","52","<security><protocols><diffie-hellman>","0","","0","2015-05-19 21:02:03","","2","","3906760","","2015-05-19 21:02:03","2014-10-30 16:52:47",""
"54334633","LibCrypt how to get my generated public key using low level apis","In my project in order to implement a Group key agreement I decided to use the low-level apis of OpenSSl for Diffie Hellman (code snippet taken from documentation )
#include <libssl/dh.h>
// Some code here

DH *privkey;
int codes;
int secret_size;

/* Generate the parameters to be used */
if(NULL == (privkey = DH_new())) handleErrors();
if(1 != DH_generate_parameters_ex(privkey, 2048, DH_GENERATOR_2, NULL)) handleErrors();

if(1 != DH_check(privkey, &codes)) handleErrors();
if(codes != 0)
{
    /* Problems have been found with the generated parameters */
    /* Handle these here - we'll just abort for this example */
    printf(""DH_check failed\n"");
    abort();
}

/* Generate the public and private key pair */
if(1 != DH_generate_key(privkey)) handleErrors();

/* Send the public key to the peer.
 * How this occurs will be specific to your situation (see main text below)
 */

// Another code here

//Cleanups
OPENSSL_free(secret);
BN_free(pubkey);
DH_free(privkey);

But from a generated DH struct how I can generate a public key?
","If you read the documentation for DH_generate_key, it does (as the comment says).

DH_generate_key() expects dh to contain the shared parameters dh->p and dh->g. It generates a random private DH value unless dh->priv_key is already set, and computes the corresponding public value dh->pub_key, which can then be published.

So the public ""key"" part of the Diffie Hellman exchange is in ""privkey->pub_key"" and you publish that along with your shared parameters ""privkey->p"" and ""privkey->g"" to the other side.
","51","<c><openssl><diffie-hellman><libcrypto>","1","1","1","2019-01-25 12:43:00","54337740","0","1","4706711","","2019-01-25 12:43:00","2019-01-23 19:49:05",""
"53307899","Get a cryptographically secure random numder as an integer in python","I try to perform some modular exponentiation in order to perform some chained Diffie Hellman key agreement (for research puproce).
Thus I generate the random key like that:
priv_value=Random.get_random_bytes(128)

And I generate the Diffie Hellman public value like that:
def dh_public(secret):
    g=2

    p=""""""FFFFFFFF FFFFFFFF C90FDAA2 2168C234 C4C6628B 80DC1CD1
      29024E08 8A67CC74 020BBEA6 3B139B22 514A0879 8E3404DD
      EF9519B3 CD3A431B 302B0A6D F25F1437 4FE1356D 6D51C245
      E485B576 625E7EC6 F44C42E9 A637ED6B 0BFF5CB6 F406B7ED
      EE386BFB 5A899FA5 AE9F2411 7C4B1FE6 49286651 ECE45B3D
      C2007CB8 A163BF05 98DA4836 1C55D39A 69163FA8 FD24CF5F
      83655D23 DCA3AD96 1C62F356 208552BB 9ED52907 7096966D
      670C354E 4ABC9804 F1746C08 CA18217C 32905E46 2E36CE3B
      E39E772C 180E8603 9B2783A2 EC07A28F B5C55DF0 6F4C52C9
      DE2BCBF6 95581718 3995497C EA956AE5 15D22618 98FA0510
      15728E5A 8AACAA68 FFFFFFFF FFFFFFFF""""""
    p=re.sub(r""[\n\t\s]*"", """", p)
    p=int(p,16)
    return pow(g,secret,p)

So my script that does the calculation is:
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# -*- Mode: python; c-basic-offset: 4 -*-

from Crypto import Random
import re

priv=Random.get_random_bytes(128)

def dh_public(secret):
    g=2

    p=""""""FFFFFFFF FFFFFFFF C90FDAA2 2168C234 C4C6628B 80DC1CD1
      29024E08 8A67CC74 020BBEA6 3B139B22 514A0879 8E3404DD
      EF9519B3 CD3A431B 302B0A6D F25F1437 4FE1356D 6D51C245
      E485B576 625E7EC6 F44C42E9 A637ED6B 0BFF5CB6 F406B7ED
      EE386BFB 5A899FA5 AE9F2411 7C4B1FE6 49286651 ECE45B3D
      C2007CB8 A163BF05 98DA4836 1C55D39A 69163FA8 FD24CF5F
      83655D23 DCA3AD96 1C62F356 208552BB 9ED52907 7096966D
      670C354E 4ABC9804 F1746C08 CA18217C 32905E46 2E36CE3B
      E39E772C 180E8603 9B2783A2 EC07A28F B5C55DF0 6F4C52C9
      DE2BCBF6 95581718 3995497C EA956AE5 15D22618 98FA0510
      15728E5A 8AACAA68 FFFFFFFF FFFFFFFF""""""
    p=re.sub(r""[\n\t\s]*"", """", p)
    p=int(p,16)
    return pow(g,secret,p)

print dh_public(priv)

With g and p values that are based upon RFC3526.
But when I try to run it I get the following error:
Traceback (most recent call last):
  File ""/home/pcmagas/Kwdikas/python/DHKeylist/dh_demo.py"", line 28, in <module>
    print dh_public(priv)
  File ""/home/pcmagas/Kwdikas/python/DHKeylist/dh_demo.py"", line 26, in dh_public
    return pow(g,secret,p)
TypeError: unsupported operand type(s) for pow(): 'int', 'str', 'long'

So my problem is on how to convert the Random.get_random_bytes value to integer. (I do not know the base to convert them with python's int method.)
","The key to your solution is the following...
Replace
return pow(g,secret,p)

with (for python 3)
return pow(g, int.from_bytes(secret, byteorder='big'), p)

or (for python 2.7)
return pow(g, int(secret.encode('hex'), 16), p)

","47","<python><python-2.7><diffie-hellman>","-1","1","1","2018-11-14 20:22:57","53308197","2","","4706711","","2018-11-14 20:06:05","2018-11-14 19:58:37",""
"58167034","ECDiffieHellman - mbedTLS vs C#","I need to use elliptic curve Diffie Hellman between a ARM cortex M3 and the PC.
On the ARM, I use mbed TLS. On the PC side I want to us C# and the ECDiffieHellman(Cng) class.
I can do the ECDH on ARM vs ARM, but I do have trouble when I try to replace one side with the PC.

Problem was the key exchange.
I found out, that the key is exported by mbed TLS as <LEN><0x04><X><Y>.

Thus, In C# I am importing the public key using
private static EC
DiffieHellmanPublicKey ToPublicKey(byte[] publicKey)
{
    var keyLength = 32;

    if (publicKey[0] != (2 + 2 * keyLength) - 1)
        throw new ArgumentException(""Invalid key length"", nameof(publicKey));
    if (publicKey[1] != 0x04)
        throw new ArgumentException(""Invalid key format"", nameof(publicKey));

    var parameters = new ECParameters()
    {
        Curve = ECCurve.NamedCurves.brainpoolP256r1,
        Q = new ECPoint()
        {
            X = publicKey.Skip(2).Take(keyLength).ToArray(),
            Y = publicKey.Skip(2 + keyLength).Take(keyLength).ToArray()
        }
    };

    using (var tmp = ECDiffieHellman.Create(parameters))
    {
        return tmp.PublicKey;
    }
}


To generate the key I tried

var ecdh = new ECDiffieHellmanCng(ECCurve.NamedCurves.brainpoolP256r1);
ecdh.KeyDerivationFunction = ECDiffieHellmanKeyDerivationFunction.Tls;
ecdh.Seed = new byte[32];
ecdh.Label = Encoding.ASCII.GetBytes(""ECDiffieHellman"");

new RNGCryptoServiceProvider().GetBytes(ecdh.Seed);

// ...

var sharedSecret = ecdh.DeriveKeyMaterial(peersPublicKey);

My problem is that the generated shared secret is of different length compared to the one generated by mbed TLS and does not match.
Did someone already solve this problem?
Thanks!
EDIT 1:
I forgot to mention, that I use bare ECDH on ARM. So I don't think there is any key derivation function executing. Is it sufficient to hash (SHA256) the result to match the C# side (when configuring SHA256 as KDF there)?
","I solved the problem. In short: just hash the ECDH result.
C/C++ side:

EC Diffie Hellman

mbedtls_ecdh_init(...);
mbedtls_ecdh_setup(...);
mbedtls_ecdh_make_public(...); //make own public key and send it to peer
mbedtls_ecdh_read_public(...); //reed peers public key
mbedtls_ecdh_calc_secret(...); //note: i pass in my own RND func because of no OS
mbedtls_ecdh_free(...);


SHA256

mbedtls_sha256_init(...);
mbedtls_sha256_starts_ret(...);
mbedtls_sha256_update_ret(...);
mbedtls_sha256_finish_ret(...);
mbedtls_sha256_free(...);

C# side:
private void EllipticCurveDiffieHellman()
{
    var ecdh = new ECDiffieHellmanCng(ECCurve.NamedCurves.brainpoolP256r1);

    ecdh.KeyDerivationFunction = ECDiffieHellmanKeyDerivationFunction.Hash;
    ecdh.HashAlgorithm = CngAlgorithm.Sha256;

    //get relevant point from own public key
    var ownPublicKey = ecdh.PublicKey.ExportExplicitParameters().Q;

    var peersPublicKey = SendPublicKey(ownPublicKey); //key exchange
    var sharedSecret = ecdh.DeriveKeyMaterial(peersPublicKey);

    Console.WriteLine(""Key: "" + HexValue.Parse(sharedSecret.ToArray()));
}

DiffieHellmanPublicKey ToPublicKey(byte[] publicKey)
{
    var keyLength = 32;

    if (publicKey[0] != (2 + 2 * keyLength) - 1)
        throw new ArgumentException(""Invalid key length"", nameof(publicKey));
    if (publicKey[1] != 0x04)
        throw new ArgumentException(""Invalid key format"", nameof(publicKey));

    var parameters = new ECParameters()
    {
        Curve = ECCurve.NamedCurves.brainpoolP256r1,
        Q = new ECPoint()
        {
            X = publicKey.Skip(2).Take(keyLength).ToArray(),
            Y = publicKey.Skip(2 + keyLength).Take(keyLength).ToArray()
        }
    };

    using (var tmp = ECDiffieHellman.Create(parameters))
    {
        return tmp.PublicKey;
    }
}

","47","<c#><c><elliptic-curve><diffie-hellman><mbedtls>","1","0","1","2019-09-30 13:03:48","58168239","0","","1083111","","2019-09-30 12:15:12","2019-09-30 11:29:52",""
"58086169","Ephemeral Diffie-Hellman Java Key Exchange","This is my first post on stackoverflow. I've always found what I needed but today I have to ask a question.
I am writing a program in which I want to connect to the server. The server encrypts data with the Diffie-Hellman algorithm.
And here the server code [C++]
///// SEND KEY
Integer p(""0xB10B8F96A080E01DDE92DE5EAE5D54EC52C99FBCFB06A3C6""
""9A6A9DCA52D23B616073E28675A23D189838EF1E2EE652C0""
""13ECB4AEA906112324975C3CD49B83BFACCBDD7D90C4BD70""
""98488E9C219A73724EFFD6FAE5644738FAA31A4FF55BCCC0""
""A151AF5F0DC8B4BD45BF37DF365C1A65E68CFDA76D4DA708""
""DF1FB2BC2E4A4371"");

Integer g(""0xA4D1CBD5C3FD34126765A442EFB99905F8104DD258AC507F""
""D6406CFF14266D31266FEA1E5C41564B777E690F5504F213""
""160217B4B01B886A5E91547F9E2749F4D7FBD7D3B9A92EE1""
""909D0D2263F80A76A6A24C087A091F531DBF0A0169B6A28A""
""D662A4D18E73AFA32D779D5918D08BC8858F4DCEF97C2A24""
""855E6EEB22B3B2E5"");

Integer q(""0xF518AA8781A8DF278ABA4E7D64B7CB9D49462353"");

AutoSeededRandomPool asrp;

dh_.AccessGroupParameters().Initialize(p, q, g);

p = dh_.GetGroupParameters().GetModulus();
q = dh_.GetGroupParameters().GetSubgroupOrder();
g = dh_.GetGroupParameters().GetGenerator();

Integer v = ModularExponentiation(g, q, p);

SecByteBlock spubkey(dh2_.StaticPublicKeyLength());
SecByteBlock epubkey(dh2_.EphemeralPublicKeyLength());

sprivkey.New(dh2_.StaticPrivateKeyLength());
eprivkey.New(dh2_.EphemeralPrivateKeyLength());

dh2_.GenerateStaticKeyPair(asrp, sprivkey, spubkey);
dh2_.GenerateEphemeralKeyPair(asrp, eprivkey, epubkey);

send(spubkey, epubkey);


///////// KEY AGREE
//buf = recived keys [spubkey+epubkey]
const size_t spub_key_length = dh2_.StaticPublicKeyLength();
shared_.New(dh2_.AgreedValueLength());
dh2_.Agree(shared_, sprivkey, eprivkey, buf, buf + spub_key_length)

I now want to exchange keys with the program in JAVA.
I don't really understand how to do it. And all examples in JAVA do not include the parameter q and Ephemeral Key.
Stackoverflow. I hope you will help me! 
I'm sitting on it a few good days...
Thank you
","","45","<java><diffie-hellman>","2","","0","2019-09-24 18:21:58","","0","1","","","","2019-09-24 18:21:58",""
"54969309","How to check whether a number is prime or not and ask the user again if it's not prime without exiting the program?","I'm trying to check whether a number is prime or not as a part of Diffie Hellman algorithm and if it's not a prime number ask the user again to input another number without exiting the program.
Here's my code:
def prime(p):
    for i in range(2,p):
        if (p % i) == 0:
            return(False)
            break
        else:
            return(True)


    def primRoots(p):
        roots = []
        required_set = set(num for num in range (1, p))

        for g in range(1, p):
            actual_set = set(pow(g, powers) % p for powers in range (1, p))
            if required_set == actual_set:
                roots.append(g)           
        return roots

    p=int(input(""enter any prime no:""))
    check=prime(p)
    if(check==True):

        primitive_roots = primRoots(p)

        g=primitive_roots[0]
        print(g)
        x=int(input(""Alice chooses value of X as:""))
        y=int(input(""Bob chooses value of y as:""))
        r1=(g**x) % p
        r2=(g**y) % p

        print(""value of r1 is"",r1)
        print(""value of r2 is"",r2)

        a=x*y

        k1=(r2**x) % p
        print(""k1 is"",k1)
        k2=(r1**y)% p
        print(""k2 is"",k2)
        k=(g**a)%p
        print(""shared key is"",k)    
    else:
        print(""It is not a prime num,enter again"")
        prime(p)

","user_input = int(input(""Enter an integer !  ""))

def prime(n):
    isPrime = True
    for num in range(2, int(n/2)):
        if n % num == 0:
            isPrime = False
    return isPrime


while (prime(user_input)== False):
    user_input = int(input(""==> Your input is incorrect, please enter  an other integer !""))
print(""{} is prime "".format(user_input))

","41","<python><primes><diffie-hellman>","0","0","1","2019-03-05 20:42:21","","4","","11143706","","2019-03-05 20:42:21","2019-03-03 13:29:00",""
"53043510","How to encrypt a txt file after obtaining a public key shared between a client/server in Java","I finally figured out how to perform a Diffie-Hellman key exchange in Java, the problem now is that I have to encrypt a txt file using the shared key. I do not know how to even start to do that. The txt file is just simply  the integers 1 2 3 4 5 each on a new line. Is there a simple line of code I do not know about that can perform this function? The shared key that I have is 18.0.
","
encrypt a txt file after obtaining a public key shared between a client/server in Java

Let's assume you are working on a learning or toy project, otherwise there's no point of (re)inventing your own secure communication. If you want to take the security seriously, just use TLS/SSL (optionally with 2-way client auth ssl) for online content transmission. 
I really hope for your own sake you are just learning or playing with this.

to encrypt a txt file using the shared key. I do not know how to even start to do that.

For encryption in rest (encrypting the file itself) - assuming from the question that the sender and receiver are having their own keypairs. 
I suggest to create a random data encryption key to encrypt the content. Then you could simply use receiver's public key to encrypt the data encryption key and sign the content's hash using sender's private key. Never use plain (textbook) RSA, use propper padding.
I made a few notes about encryption for myself, you can take some inspiration. 

The shared key that I have is 18.0.

Apprently you are using not long enough or not random enough public keys. Symmetric ciphers require keys of fixed length (e.g. AES requires 128, 192 or 256 bit keys). You could generate longer keys using any key derivation function or hash. If you want to use two-way communication, you need a separate key for each direction.
Regardless that - short key seed (small shared key, short public keys) would be feasible for brute-forcing. There are many ways how you could shoot yourself in your leg when dealing with crypto, so use some industrial standard when possible (e.g. TLS).
","40","<java><encryption><diffie-hellman>","-2","-1","1","2018-10-29 15:26:24","","4","","","","","2018-10-29 10:29:07",""
"54128604","Generate Diffie Hellman Object using npm `threads` module: getPrime is undefined","Using from npm threads library I try to create a diffie hellman in a non-blocking manner using a seperate thread instead of the main one:
const spawn = require('threads').spawn;

const thread = spawn(function(input, done) {
  const cryptot = require('crypto');
  const dh = cryptot.createDiffieHellman(2048);
  done({dh});
});

thread.send({p:null, g:null}).on('message', (response) => {
  console.log(response.dh.getPrime(), response.dh.getGenerator());
  thread.kill();
}).on('error', (err)=>{
  console.error(err);
}).on('exit', function() {
  console.log('Worker has been terminated.');
});

But I get the following error:
/home/pcmagas/Kwdikas/master_thesis/custom_xmpp/dummy_src/thread_dh.js:10
  console.log(response.dh.getPrime(), response.dh.getGenerator());
                          ^

TypeError: response.dh.getPrime is not a function
    at Worker.thread.send.on (/home/pcmagas/Kwdikas/master_thesis/custom_xmpp/dummy_src/thread_dh.js:10:27)
    at Worker.emit (/home/pcmagas/Kwdikas/master_thesis/custom_xmpp/node_modules/eventemitter3/index.js:129:35)
    at Worker.handleMessage (/home/pcmagas/Kwdikas/master_thesis/custom_xmpp/node_modules/threads/lib/worker.node/worker.js:148:17)
    at ChildProcess.emit (events.js:182:13)
    at emit (internal/child_process.js:812:12)

Do you know why the received dh object does not contain the method getPrime and via an assumption the getGenerator as well?
","Well its it true that without proviting generator and prime the key generation is slow on the implementation provided in node.js. But what it makes it slow is the creation of the correct prime and generator where the prime will be 2048 bits.
So you can do the following:

Generate the prime and the generator inside the thread
Pass the prime abd generator via done callback to the message event
Re-create a diffie-hellman object there with the generated prime and generator.

These steps will be resulted from this code:
const spawn = require('threads').spawn;

const thread = spawn(function(input, done) {
  const cryptot = require('crypto');
  console.time('dh-thread');
  const dh = cryptot.createDiffieHellman(2048);
  console.timeEnd('dh-thread');
  done({prime: dh.getPrime().toString('hex'), generator: dh.getGenerator().toString('hex')});
});

thread.send({p:null, g:null}).on('message', (response) => {
  const cryptot = require('crypto');
  const dh =  cryptot.createDiffieHellman(response.prime, response.generator);
  // Do whatever you want there
  thread.kill();
}).on('error', (err)=>{
  console.error(err);
}).on('exit', function() {
  console.log('Worker has been terminated.');
});

Also to justify my statement above let me modify the code a bit using timers:
const spawn = require('threads').spawn;

const thread = spawn(function(input, done) {
  const cryptot = require('crypto');
  console.time('dh-thread');
  const dh = cryptot.createDiffieHellman(2048);
  console.timeEnd('dh-thread');
  done({prime: dh.getPrime().toString('hex'), generator: dh.getGenerator().toString('hex')});
});

thread.send({p:null, g:null}).on('message', (response) => {
  console.time('dh');
  const cryptot = require('crypto');
  const dh =  cryptot.createDiffieHellman(response.prime, response.generator);
  console.timeEnd('dh');
  thread.kill();
}).on('error', (err)=>{
  console.error(err);
}).on('exit', function() {
  console.log('Worker has been terminated.');
});

The execution of the code above will result:
dh-thread: 12815.747ms
dh: 6.733ms
Worker has been terminated.

As you can see the diffie hellman generation without prime and generator takes WAY too long instead of provided prime and generator.
","37","<node.js><multithreading><diffie-hellman>","0","0","1","2019-01-10 13:31:54","54129628","0","","","","","2019-01-10 12:20:46",""
"26546158","How to best to secure data over HTTPS","My aim is to have an (iOS) app in which the user would login, then on sucsessful login, gain access to additional information over an  encrypted webservice (undecided).

From research, i understanding encryption techniques of diffie-hellman key exchange, and 'signatures' using HMAC with secret key (from the diffie-hellman).
Further research lead me to HTTPS to ensure no-eavesdropping.

However i'm now a little confused as to what i would need to do over the HTTPS connection to ensure that the login data is secured between app & server.
1), is HTTPS enough security to pass POST 'username' & 'password' data down the line to the server on its own? or would an additional security such as a hash of the password be needed?
or
2, would i need to implement a full key exchange + request signature (and at some point an Access Token), over a HTTPS connection?
I'm unsure where to draw the line with encrypting. 
","","36","<ssl><encryption><hash><https><diffie-hellman>","0","","0","2014-10-24 10:27:03","","2","","","","","2014-10-24 10:27:03",""
"58749844","Why does my GUI freeze, brefore reading from Network stream, but works fine with - MessageBox.Sow(""""); before reading it?","I am a Computer Science student and this is my second project in c#, so I am not used to it yet and this is my second question on stackoverflow... 
I need to create a program with server and client, but their communication must be safe(I used Diffie-Hellman and AES).
My program freezes when I'm trying to read sent message through NetworkStream, program works fine, if I add show any message with MessageBox, before reading from stream. Also is there any way for client and server to generate the same AES.IV, besides my implementation of global IV?
using System;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using System.IO;
using System.Security.Cryptography;
using System.Linq;

namespace Kodiranje
{
public partial class Form1 : Form
{
    const int port = 22222;
    const string ip = ""127.0.0.1"";
    IPAddress ipServer = IPAddress.Parse(ip);
    TcpListener server = null;
    TcpClient client = null;
    Thread thServer = null;
    NetworkStream dataStream = null;
    string receivedMessage = """";
    bool? izbira = null;
    Aes myAes = Aes.Create();

    byte[] iv = null;


    public Form1()
    {
        InitializeComponent();
        iv = myAes.IV;
        thServer = new Thread(new ThreadStart(startServer));
        thServer.IsBackground = true;
        thServer.Start();
        myAes.Padding = PaddingMode.PKCS7;
        iv = myAes.IV;
    }

    void startServer() {

        server = new TcpListener(ipServer, port);
        server.Start();
        textBox4.Invoke(new Action(() => textBox4.AppendText(""Strežnik: zagnan na: IP: "" + ip + "", port:"" + port)));
        client = new TcpClient();
        client = server.AcceptTcpClient();
        NetworkStream dataStream = client.GetStream();
        textBox4.Invoke(new Action(() => textBox4.AppendText(Environment.NewLine + ""Strežnik: Sprejet nov uporabnik"")));


        if (izbira == true)
        {
            byte[] serverPublicKey;
            ECDiffieHellmanCng serverDH = new ECDiffieHellmanCng();
            serverDH.KeyDerivationFunction = ECDiffieHellmanKeyDerivationFunction.Hash;
            serverDH.HashAlgorithm = CngAlgorithm.Sha256;
            serverPublicKey = serverDH.PublicKey.ToByteArray();



            byte[] message = new byte[1024];
            while (!dataStream.DataAvailable) { }
            if (dataStream.DataAvailable)
                dataStream.Read(message, 0, message.Length);


            byte[] serverCommoneKey = serverDH.DeriveKeyMaterial(CngKey.Import(message, CngKeyBlobFormat.EccPublicBlob));
            textBox4.Invoke(new Action(() => textBox4.AppendText(Environment.NewLine + ""Strežnik: Dobil sem sporočilo: "" + receivedMessage)));


            dataStream.Write(serverPublicKey, 0, serverPublicKey.Length);

            message = new byte[1024];

            myAes = Aes.Create();
            myAes.Padding = PaddingMode.PKCS7;
            myAes.Key = serverCommoneKey;
            myAes.IV = iv;
            ICryptoTransform encryptor = myAes.CreateEncryptor(myAes.Key, iv);
            byte[] encrypted;
            // Create the streams used for encryption.
            using (MemoryStream msEncrypt = new MemoryStream())
            {
                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                {
                    using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                    {
                        //Write all data to the stream.
                        swEncrypt.Write(""Serbus deda"");

                    }
                    encrypted = msEncrypt.ToArray();
                    int s = encrypted.Length;
                    MessageBox.Show(""""); // freezes without message
                    dataStream.Write(encrypted, 0, encrypted.Length);

                } 
            }
        }


        else {
            byte[] message = new byte[1024];
            message = Encoding.UTF8.GetBytes(""serbus"");
            dataStream.Write(message, 0, message.Length);


        }


    }

    void button1_Click(object sender, EventArgs e) { // happens when client connects to the server
        if (izbira == null) {
            textBox4.Invoke(new Action(() => textBox4.AppendText(Environment.NewLine + ""Izbrati morate ali boste datoteko prenesli ali poslali!"")));
            return;
        }
        this.button1.Enabled = false;
        client = new TcpClient();
        IPAddress insertedIp = IPAddress.Parse(textBox1.Text);


        byte[] clientPublicKey;
        ECDiffieHellmanCng clientDH = new ECDiffieHellmanCng();
        clientDH.KeyDerivationFunction = ECDiffieHellmanKeyDerivationFunction.Hash;
        clientDH.HashAlgorithm = CngAlgorithm.Sha256;
        clientPublicKey = clientDH.PublicKey.ToByteArray();


        client.Connect(insertedIp, Convert.ToInt32(textBox3.Text));
        dataStream = client.GetStream();


        if (izbira == true)
        {

            dataStream.Write(clientPublicKey, 0, clientPublicKey.Length);

            byte[] message = new byte[1024];

            MessageBox.Show(""""); // freezes without message
            while (true)
            {
                if (dataStream.DataAvailable)
                {

                    dataStream.Read(message, 0, message.Length);
                    textBox4.Invoke(new Action(() => textBox4.AppendText(Environment.NewLine + ""Client: Dobil sem sporočilo: "" + receivedMessage)));
                    break;
                }
            }
            byte[] clientCommoneKey = clientDH.DeriveKeyMaterial(CngKey.Import(message, CngKeyBlobFormat.EccPublicBlob));




            byte[] encryptedMessage = new byte[16];
            while (!dataStream.DataAvailable) { }
            MessageBox.Show(""""); // freezes without message
            dataStream.Read(encryptedMessage, 0, encryptedMessage.Length);
            myAes = Aes.Create();
            myAes.Padding = PaddingMode.PKCS7;
            myAes.Key = clientCommoneKey;
            // Create a decryptor to perform the stream transform.
            ICryptoTransform decryptor = myAes.CreateDecryptor(myAes.Key, iv);

            // Create the streams used for decryption.
            using (MemoryStream msDecrypt = new MemoryStream(encryptedMessage))
            {
                using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                {
                    using (StreamReader srDecrypt = new StreamReader(csDecrypt))
                    {

                        // Read the decrypted bytes from the decrypting stream
                        // and place them in a string.
                        string plaintext;
                        plaintext = srDecrypt.ReadToEnd();
                        MessageBox.Show(""Sprejeto sporočilo "" + plaintext);

                    }
                }
            }


        }
        else {

            byte[] message = new byte[1024];
            //MessageBox.Show(""Serbus"");
            while (!dataStream.DataAvailable)
            { }
            dataStream.Read(message, 0, message.Length);

            receivedMessage = Encoding.UTF8.GetString(message);
            textBox4.Invoke(new Action(() => textBox4.AppendText(Environment.NewLine + ""Strežnik: Dobil sem sporočilo: "" + receivedMessage)));
        }
    }

    void buttonUpload_Click(object sender, EventArgs e) {
        izbira = true;
        this.buttonDownload.Enabled = false;
    }
    void buttonDownload_Click(object sender, EventArgs e) {
        izbira = false;
        this.buttonUpload.Enabled = false;
        this.button2.Text = ""Prenesi"";
    }



}

}
","","34","<c#><aes><networkstream><diffie-hellman>","0","","0","2019-11-07 13:31:42","","2","","","","","2019-11-07 13:31:42",""
"57632352","OverflowErro cannot fit 'int' into an index-sized integer","I am trying to convert an int of size n bits to bytes. This returns an overflow error
Trying to convert the int to bytes to be used later with TCP
def diffie_hellman():
    global a,g,n
    a = random.randint(1,5000)
    g = random.getrandbits(4000)
    n = sympy.randprime(1, 100)
    #print(a,g,n)

def diffie_send(a,g,n):
    clientsocket.send(bytes(a))
    clientsocket.send(bytes(g))
    clientsocket.send(bytes(n))


I expect it to just convert to bytes but again all i get is an overflow error.
","I tried something that some may see as ""hacky"" but it worked for me so... I converted the int to a string before converting to bytes
g = random.getrandbits(4000)
val = str(g) + ' '

","33","<python><random><sympy><diffie-hellman>","1","0","1","2019-08-23 21:04:42","","1","","11912714","","2019-08-23 20:07:47","2019-08-23 19:59:36",""
"16857075","Can a user apply for another public key based on its pseudonym and use the obtained public key in DH key exchange?","I have a scenario in which there are three parties: one user,one content provider and a proxy. The data is to be transferred between user and content provider anonymously though the proxy.  I have two questions.
1. If the user has a pseudonym based on its public key, can it apply for another public key?
2. For data confidentiality between user and content provider such that proxy cannot read the transferred contents, Diffie-Hellman key exchange can be used. But can I use the public key obtained in part 1 to get the encrypted data between user and content provider?
Best Regards
Alexandera
","Diffie-Hellman is a method for establishing a shared secret between two entities.
So, that's a part of secret key cryptography.
No number of public keys, unless you manage to generate the current shared secret, will get you the information shared between two parties using secret key crypto.  A public key should be matched to, and used with, a private key.  That's public key cryptography.
For part 1, I guess I don't understand what you want to do with the public key other than generate a pseudonym with it, I don't see why not.
Maybe I'm misunderstanding your question but I believe the answer for part 2 is no.
","33","<public-key-encryption><diffie-hellman>","0","0","1","2013-05-31 12:30:13","","0","","","","","2013-05-31 12:17:42",""
"58274946","How to extract DH parameters from a DH key in PEM format","I have generated a Diffie-Hellman key using certain g and p parameters, like this:
$ cat dhparam.pem
-----BEGIN DH PARAMETERS-----
MIIBCAKCAQEAnc5+uXl2K09Nrp1oxN/KbIcIYLg8HXCu9UNW7gFknkHil7OVAKHR
Km0Dc8IjqhJpDfoNKFoDo2Vd0KB9moSkDmhFmidcXO7Q8zSq0Z4BXFTO61OMukdd
dul1ovbleqfH4DcbCjH4LiZGICFUyGseiBakt3e2BORyjSA3IEg4hm9WvdCevWPW
Njc9reFgL6Vua8HkOGkLB+EvRP1YT4v5hGGP/6A7WxRevx5EjF9VgojyDLMPN26C
3c17KY2jNV0W1GEcKEciWS61QInUDBDPYNuQzTl0LucbOpJyV3BFr6pokRBaO3bI
ZYUPhjA2WSxJUeeJboJfisr+CQa9kc1dYwIBAg==
-----END DH PARAMETERS-----
$ openssl genpkey -paramfile dhparam.pem -out dh.pem
$ cat dh.pem
-----BEGIN PRIVATE KEY-----
MIICJgIBADCCARcGCSqGSIb3DQEDATCCAQgCggEBAJ3Ofrl5ditPTa6daMTfymyH
CGC4PB1wrvVDVu4BZJ5B4pezlQCh0SptA3PCI6oSaQ36DShaA6NlXdCgfZqEpA5o
RZonXFzu0PM0qtGeAVxUzutTjLpHXXbpdaL25Xqnx+A3Gwox+C4mRiAhVMhrHogW
pLd3tgTkco0gNyBIOIZvVr3Qnr1j1jY3Pa3hYC+lbmvB5DhpCwfhL0T9WE+L+YRh
j/+gO1sUXr8eRIxfVYKI8gyzDzdugt3NeymNozVdFtRhHChHIlkutUCJ1AwQz2Db
kM05dC7nGzqScldwRa+qaJEQWjt2yGWFD4YwNlksSVHniW6CX4rK/gkGvZHNXWMC
AQIEggEEAoIBAGJBY5qzXPRi62hzho+ebCeZMdVqGQrlc9h/1hmrlzXlna8Mu8WF
0hp/ol8s3AAvuG2w8sMHH/D0kHj2Ptf92khH2WObWAzyybf3IubpVumw6d2KSe1j
LhW0cJum/lbyhyGJNgdNrVlwyNcId2Z53K9TK1BQnb3/gJjM+cRZ1yyoPDTXZpLl
1dmLz3lw+kmowyNXtl/wgzDclR16/w7JSvM+tOFCs4X1ZZF9TbQi7czc0ov101gP
bJjbUaYNOLUQrI/vVEDmCzYIL3PDLV07gQu0FeLHnRChgdjal3xVIsp0oV+2cN7K
/UX4xqCSBXp8ieAoJ+r7zZD44JqhMVF+d5A=
-----END PRIVATE KEY-----

My understanding is that the key file dh.pem includes not only the secret part of the key, but also the non-secret g and p parameters with which it was generated — i.e., dh.pem is a superset of dhparam.pem.
I would like to reconstruct dhparam.pem, given only dh.pem. That is, given a DH key file, dump its parameters in PEM format.
It seems like openssl itself might not support this directly, but maybe there's some not-too-horrible way to extract the info with a shell script or something? The man page for openssl dhparam says:

This program manipulates DH parameters not keys.
  BUGS: There should be a way to generate and manipulate DH keys.

Related: OpenSSL: Display DH Parameters — but in that question they're starting with a certificate, not a private key. (And I don't know the incantation to turn my key into a certificate.)
","PEM files are base64-encoded DER serialised ASN.1 files with a header and footer guard. A ASN.1 parser with the right schema can decode them. It so happens that openssl has this helpfully built in:
$ openssl asn1parse <dhparam.pem
    0:d=0  hl=4 l= 264 cons: SEQUENCE
    4:d=1  hl=4 l= 257 prim: INTEGER           :9DCE7EB979762B4F4DAE9D68C4DFCA6C870860B83C1D70AEF54356EE01649E41E297B39500A1D12A6D0373C223AA12690DFA0D285A03A3655DD0A07D9A84A40E68459A275C5CEED0F334AAD19E015C54CEEB538CBA475D76E975A2F6E57AA7C7E0371B0A31F82E2646202154C86B1E8816A4B777B604E4728D2037204838866F56BDD09EBD63D636373DADE1602FA56E6BC1E438690B07E12F44FD584F8BF984618FFFA03B5B145EBF1E448C5F558288F20CB30F376E82DDCD7B298DA3355D16D4611C284722592EB54089D40C10CF60DB90CD39742EE71B3A9272577045AFAA6891105A3B76C865850F863036592C4951E7896E825F8ACAFE0906BD91CD5D63
  265:d=1  hl=2 l=   1 prim: INTEGER           :02

$ openssl asn1parse <dh.pem
    0:d=0  hl=4 l= 550 cons: SEQUENCE
    4:d=1  hl=2 l=   1 prim: INTEGER           :00
    7:d=1  hl=4 l= 279 cons: SEQUENCE
   11:d=2  hl=2 l=   9 prim: OBJECT            :dhKeyAgreement
   22:d=2  hl=4 l= 264 cons: SEQUENCE
   26:d=3  hl=4 l= 257 prim: INTEGER           :9DCE7EB979762B4F4DAE9D68C4DFCA6C870860B83C1D70AEF54356EE01649E41E297B39500A1D12A6D0373C223AA12690DFA0D285A03A3655DD0A07D9A84A40E68459A275C5CEED0F334AAD19E015C54CEEB538CBA475D76E975A2F6E57AA7C7E0371B0A31F82E2646202154C86B1E8816A4B777B604E4728D2037204838866F56BDD09EBD63D636373DADE1602FA56E6BC1E438690B07E12F44FD584F8BF984618FFFA03B5B145EBF1E448C5F558288F20CB30F376E82DDCD7B298DA3355D16D4611C284722592EB54089D40C10CF60DB90CD39742EE71B3A9272577045AFAA6891105A3B76C865850F863036592C4951E7896E825F8ACAFE0906BD91CD5D63
  287:d=3  hl=2 l=   1 prim: INTEGER           :02
  290:d=1  hl=4 l= 260 prim: OCTET STRING      [HEX DUMP]:028201006241639AB35CF462EB6873868F9E6C279931D56A190AE573D87FD619AB9735E59DAF0CBBC585D21A7FA25F2CDC002FB86DB0F2C3071FF0F49078F63ED7FDDA4847D9639B580CF2C9B7F722E6E956E9B0E9DD8A49ED632E15B4709BA6FE56F287218936074DAD5970C8D708776679DCAF532B50509DBDFF8098CCF9C459D72CA83C34D76692E5D5D98BCF7970FA49A8C32357B65FF08330DC951D7AFF0EC94AF33EB4E142B385F565917D4DB422EDCCDCD28BF5D3580F6C98DB51A60D38B510AC8FEF5440E60B36082F73C32D5D3B810BB415E2C79D10A181D8DA977C5522CA74A15FB670DECAFD45F8C6A092057A7C89E02827EAFBCD90F8E09AA131517E7790

And Bob’s your uncle.
","32","<openssl><pem><diffie-hellman>","1","0","1","2019-11-08 14:49:46","","0","1","","","","2019-10-07 18:07:46",""
"54962611","Calculating s in ECDSA over GF(2m)","I tried to calculate s over GF(m) as integer, but it is not working since the integer in vhdl has limit size, especially since you're working with 2^163.
","","29","<diffie-hellman><bignum>","0","","0","2019-03-03 01:31:47","","3","","1940850","","2019-03-03 01:31:47","2019-03-02 09:16:01",""
"58765697","How many bytes do I need to read from NetworkStream, when message incoming is encrypted with AES?","I am a student and I am not used to c# or ""network programing"". We need to make a client server program, that supports file transfering.
I'm trying to send some information about the file to server, but if server reads more or less bytes, than client sent, program gives exception. I am asking how can the server side in advance know, the byte size of incoming encrypted message.
For example: if encrypted sent messages size is 48 bytes and on the server side I read 1024 (and not the exact same size - in this example 48) bytes from stream, program chrashes... The problem is, that the server doesn't know encrypted message size in advance...
My program is not even near the final product and I have many other issues too(with GUI freezing without MessageBox.Show("""") messages before reading/writing to NetworkStream), but this is my current question. I also don't know how to set the same IV on server and client side in AES ecncryption, without declaring global IV.
Here is the whole code:
    using System;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using System.IO;
using System.Security.Cryptography;
using System.Linq;

namespace Kodiranje
{
    public partial class Form1 : Form
    {
        const int port = 22222;
        const string ip = ""127.0.0.1"";
        IPAddress ipServer = IPAddress.Parse(ip);
        TcpListener server = null;
        TcpClient client = null;
        Thread thServer = null;
        NetworkStream dataStream = null;
        string receivedMessage = """";
        bool? izbira = null;
        Aes myAes = Aes.Create();
        bool serverRunning = true;
        bool datotekaIzbrana = false;
        byte[] iv = null;
        string filePath, fileName, fileExtension;
        OpenFileDialog openFileDialog;
        long fileSize;
        long kolicnik;
        long ostanek;


        public Form1()
        {
            InitializeComponent();
            iv = myAes.IV;
            thServer = new Thread(new ThreadStart(startServer));
            thServer.IsBackground = true;
            thServer.Start();
            myAes.Padding = PaddingMode.PKCS7;
            iv = myAes.IV;  // global IV set - how to avoid that?
        }

        void startServer()
        {

            server = new TcpListener(ipServer, port);
            server.Start();
            textBox4.Invoke(new Action(() => textBox4.AppendText(""Strežnik: zagnan na: IP: "" + ip + "", port:"" + port)));
            client = new TcpClient();
            client = server.AcceptTcpClient();

            NetworkStream dataStream = client.GetStream();
            textBox4.Invoke(new Action(() => textBox4.AppendText(Environment.NewLine + ""Strežnik: Sprejet nov uporabnik"")));


            if (izbira == true)
            {
                byte[] serverPublicKey;
                ECDiffieHellmanCng serverDH = new ECDiffieHellmanCng();
                serverDH.KeyDerivationFunction = ECDiffieHellmanKeyDerivationFunction.Hash;
                serverDH.HashAlgorithm = CngAlgorithm.Sha256;
                serverPublicKey = serverDH.PublicKey.ToByteArray();



                byte[] message = new byte[1024];
                while (!dataStream.DataAvailable) { }
                if (dataStream.DataAvailable)
                    try
                    {
                        dataStream.Read(message, 0, message.Length);
                    }
                    catch (Exception e)
                    {
                        MessageBox.Show(e.ToString());
                    }

                byte[] serverCommoneKey = serverDH.DeriveKeyMaterial(CngKey.Import(message, CngKeyBlobFormat.EccPublicBlob));
                textBox4.Invoke(new Action(() => textBox4.AppendText(Environment.NewLine + ""Strežnik: Dobil sem sporočilo: "" + receivedMessage)));


                dataStream.Write(serverPublicKey, 0, serverPublicKey.Length);


                // Here I'm reading sent message and I decrypt it, but if the size of new byte[] is 
                not the same as the size of recieved message my program chrashes... how can i avoid               
                chrasing wihtout knowing the message size, and if I for instance set reading size to 
                1024 bytes?                   

                byte[] encryptedMessage = new byte[48]; // for this file i know the sent size from 
                client but in reality, I wouldn't know the exact size...

                while (!dataStream.DataAvailable) { }
                MessageBox.Show(""""); // GUI freezes without this message
                dataStream.Read(encryptedMessage, 0, encryptedMessage.Length);
                string prejetoSporocilo = odkodirajString(serverCommoneKey, encryptedMessage);
                MessageBox.Show(""Odkodirano prejeto sporočilo:"" + prejetoSporocilo);

            }


            else // irrelevant
            {
                byte[] message = new byte[1024];
                message = Encoding.UTF8.GetBytes(""serbus"");
                dataStream.Write(message, 0, message.Length);


            }
            while (serverRunning) { }

        }



        void button1_Click(object sender, EventArgs e)
        {
            if (izbira == null)
            {
                this.textBox4.AppendText(Environment.NewLine + ""Izbrati morate ali boste datoteko prenesli ali poslali!"");
                return;
            }
            if (!datotekaIzbrana)
            {
                MessageBox.Show(""Izberite datoteko!"");
                return;
            }

            this.button2.Enabled = true;
            this.button4.Enabled = false;

            this.button1.Enabled = false;
            this.button3.Enabled = true;
            client = new TcpClient();
            IPAddress insertedIp = IPAddress.Parse(textBox1.Text);


            byte[] clientPublicKey;
            ECDiffieHellmanCng clientDH = new ECDiffieHellmanCng();
            clientDH.KeyDerivationFunction = ECDiffieHellmanKeyDerivationFunction.Hash;
            clientDH.HashAlgorithm = CngAlgorithm.Sha256;
            clientPublicKey = clientDH.PublicKey.ToByteArray();


            client.Connect(insertedIp, Convert.ToInt32(textBox3.Text));
            dataStream = client.GetStream();


            if (izbira == true)
            {

                dataStream.Write(clientPublicKey, 0, clientPublicKey.Length);

                byte[] message = new byte[1024];

                MessageBox.Show(""""); // GUI freezes without this message
                while (true)
                {
                    if (dataStream.DataAvailable)
                    {

                        dataStream.Read(message, 0, message.Length);
                        this.textBox4.AppendText(Environment.NewLine + ""Client: Dobil sem sporočilo: "" + receivedMessage);
                        break;
                    }
                }
                byte[] clientCommoneKey = clientDH.DeriveKeyMaterial(CngKey.Import(message, CngKeyBlobFormat.EccPublicBlob));


                message = new byte[1024];

                /// here I'm trying to send file information, then encrypt it and send it to server

                kolicnik = fileSize / 1024;
                ostanek = fileSize % 1024;
                string glava = fileName + ""|"" + fileExtension + ""|"" + fileSize.ToString() + ""|"" + kolicnik.ToString() + ""|"" + ostanek + ""|"";

                //MessageBox.Show(glava);
                message = Encoding.UTF8.GetBytes(glava);
                MessageBox.Show(""velikost stringa: "" + glava.Length + "" velikost bitov: "" + message.Length);
                message = kodirajString(clientCommoneKey,glava);
                MessageBox.Show(""Zakodiran size: "" + message.Length);
                dataStream.Write(message, 0, message.Length);





                ///


            }


            else // irrelevant
            {

                byte[] message = new byte[1024];
                while (!dataStream.DataAvailable)
                { }
                dataStream.Read(message, 0, message.Length);

                receivedMessage = Encoding.UTF8.GetString(message);
                this.textBox4.AppendText(Environment.NewLine + ""Strežnik: Dobil sem sporočilo: "" + receivedMessage);
            }
        }



        void buttonUpload_Click(object sender, EventArgs e)
        {
            izbira = true;
            this.buttonDownload.Enabled = false;
            this.button4.Enabled = true;
        }
        void buttonDownload_Click(object sender, EventArgs e) // irrelevant
        {
            izbira = false;
            this.buttonUpload.Enabled = false;
            this.button2.Text = ""Prenesi"";
        }

        void button3_Click(object sender, EventArgs e)
        {
            serverRunning = false;
        }

        void button4_Click(object sender, EventArgs e) // choose file
        {
            openFileDialog = new OpenFileDialog();
            openFileDialog.Title = ""IZBERI DATOTEKO"";
            openFileDialog.Filter = ""GIF Image|*.gif|text file|*.txt|PDF file|*.pdf"";
                if (openFileDialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                {
                //break;
                datotekaIzbrana = true;
                filePath = openFileDialog.FileName;
                this.textBox4.AppendText(Environment.NewLine + ""Pot do datoteke:"" + filePath);
                fileName = openFileDialog.SafeFileName;
                fileExtension = Path.GetExtension(filePath);
                string getPath = @filePath;
                FileInfo info = new FileInfo(getPath);

                Stream file = File.OpenRead(filePath);
                fileSize = info.Length;
                fileName = Path.GetFileNameWithoutExtension(info.Name);



            }
            else {
                    MessageBox.Show(""IZBERITE DATOTEKO!"");
                }


        }

        void button2_Click(object sender, EventArgs e)
        {

        }

        byte[] kodirajString(byte[] commonKey, string messageToEncrypt)  // encrypt message
        {
            myAes = Aes.Create();
            myAes.Padding = PaddingMode.PKCS7;
            myAes.Key = commonKey;
            myAes.IV = iv;
            ICryptoTransform encryptor = myAes.CreateEncryptor(myAes.Key, iv);
            byte[] encrypted;
            // Create the streams used for encryption.
            using (MemoryStream msEncrypt = new MemoryStream())
            {
                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                {
                    using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                    {
                        //Write all data to the stream.
                        swEncrypt.Write(messageToEncrypt);

                    }
                    encrypted = msEncrypt.ToArray();
                    int s = encrypted.Length;
                    MessageBox.Show(""Velikost "" + s.ToString());
                    return encrypted;

                }
            }
        }


        string odkodirajString(byte[] commonKey, byte[] encryptedMessage) {  // decrypt message
            myAes = Aes.Create();
            myAes.Padding = PaddingMode.PKCS7;
            myAes.Key = commonKey;
            // Create a decryptor to perform the stream transform.
            ICryptoTransform decryptor = myAes.CreateDecryptor(myAes.Key, iv);

            // Create the streams used for decryption.
            using (MemoryStream msDecrypt = new MemoryStream(encryptedMessage))
            {
                using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                {
                    using (StreamReader srDecrypt = new StreamReader(csDecrypt))
                    {

                        // Read the decrypted bytes from the decrypting stream
                        // and place them in a string.
                        string plaintext;
                        plaintext = srDecrypt.ReadToEnd();
                        MessageBox.Show(""Sprejeto sporočilo "" + plaintext);
                        return plaintext;
                    }
                }
            }
        }

    }
}

I thank you in advance!
","","24","<c#><encryption><aes><networkstream><diffie-hellman>","0","","0","2019-11-08 11:28:11","","1","","","","","2019-11-08 11:28:11",""
"53819812","Would you expect two bluetooth devices to arrive at different values for DHKey when attempting pairing?","I've been trying to get two Bluetooth devices to pair in BLE Secure Connections mode, and it isn't cooperating. During pairing, after the bluetooth devices ask the user to confirm their 6 digit numbers (i'm using Numeric Comparison for this test), the authentication process always fails. I didn't have a compelling explanation for why, but today I dug up the following from bluez's btmon... it seems like the two devices are calculating different Diffie Hellman keys?
< ACL Data TX: Handle 5 flags 0x00 dlen 21 //I interpret this as transmitting a Diffie Hellman key to the respondant
      SMP: Pairing DHKey Check (0x0d) len 16
        E: 9b6628f5e7a44dc1ce482b7d5d162dfc

@ MGMT Event: Command Complete (0x0001) plen 10 //irrelevant
      User Confirmation Reply (0x001c) plen 7                                            
        Status: Success (0x00)                                                                           
        LE Address: 00:16:A4:4A:3A:60 (Ezurio Ltd)                                      
> HCI Event: Number of Completed Packets (0x13) plen 5                     
        Num handles: 1                                                                                       
        Handle: 5                                                                                                  
        Count: 1                                                                                                    

> ACL Data RX: Handle 5 flags 0x02 dlen 21 //this is the respondant replying with it's own Diffie Hellman
      SMP: Pairing DHKey Check (0x0d) len 16
        E: ad2d6f48721273b576958623d7b008b2 //different than the previous DHKey?!

I'm reading here that DHKey is supposed to be a shared secret; they speak of it using singular pronouns. This says to me that DHKey is part of the symmetric cryptography that's supposed to encrypt traffic going forward, rather than the asymmetric cryptography that we've been using to pair up until this point. 
If that analysis is correct, then fact that the two keys do not agree is relevant and should be investigated. But if I'm wrong, and these entries refer to trading keys in preparation for asymmetric cryptography, that these two DHKeys differ would not surprise me. Given the name and the context, what would everybody expect?
","","23","<bluetooth><diffie-hellman>","0","","0","2018-12-17 16:59:11","","0","","","","","2018-12-17 16:59:11",""
"58375440","How to verify Logjam issue with openssl command?","My application is being reported that having vulnerability issue, which is the SSL/TLS Diffie-Hellman Modulus <= 1024 bits (Logjam) CVE-2015-4000. 
Based on this link, there is a solution to edit the java.security file to solve this issue.
I would like to test on it, but I am not sure how to verify it. I would like to see the different before my changes and after my changes. 
I found a command from this link, 
openssl s_client -connect www.example.com:443

I run this command and I get some info, but I am not sure how to verify my website is having Logjam issue or not. (SSL/TLS Diffie-Hellman Modulus <= 1024 bits). And how to check If my changes have overcome this.
","I guess you can use Qualys SSL Labs tools, an example can be found At Oracle Blog.
The test for a server can be found on this link and the User Agent Capabilities is very useful.
","20","<java><ssl><jboss><owasp><diffie-hellman>","0","0","1","2019-10-23 17:23:12","","0","","4420967","","2019-10-14 11:47:49","2019-10-14 11:03:48",""
"55675697","Diffie-Helman Program in C lanugage","I have written a program for Diffie Hellman Program in C language i am getting following error while compiling the code. I am getting following error:
$gcc Diffie-Helman.c -o Diffie-Helman
/usr/bin/ld: /tmp/ccedcUj8.o: in function `power':
Diffie-Helman.c:(.text+0x2e): undefined reference to `pow'
collect2: error: ld returned 1 exit status

Machine Spec : Linux Ubuntu 18.10
The Program is as bellow........
/* This program calculates the Key for two persons 
using the Diffie-Hellman Key exchange algorithm */
#include<stdio.h> 
#include<math.h> 

// Power function to return value of a ^ b mod P 
long long int power(long long int a, long long int b, long long 
int P) 
{ 
if (b == 1) 
    return a; 

else
    return (((long long int)pow(a, b)) % P); 
} 

//Driver program 
int main() 
{ 
long long int P, G, x, a, y, b, ka, kb; 

// Both the persons will be agreed upon the 
    // public keys G and P 
P = 23; // A prime number P is taken 
printf(""The value of P : %lld\n"", P); 

G = 9; // A primitve root for P, G is taken 
printf(""The value of G : %lld\n\n"", G); 

// Alice will choose the private key a 
a = 4; // a is the chosen private key 
printf(""The private key a for Alice : %lld\n"", a); 
x = power(G, a, P); // gets the generated key 

// Bob will choose the private key b 
b = 3; // b is the chosen private key 
printf(""The private key b for Bob : %lld\n\n"", b); 
y = power(G, b, P); // gets the generated key 

// Generating the secret key after the exchange 
    // of keys 
ka = power(y, a, P); // Secret key for Alice 
kb = power(x, b, P); // Secret key for Bob 

printf(""Secret key for the Alice is : %lld\n"", ka); 
printf(""Secret Key for the Bob is : %lld\n"", kb); 

return 0; 
} 

","","12","<c><diffie-hellman>","1","","0","2019-04-14 13:15:32","","3","1","","","","2019-04-14 13:15:32","2019-04-14 13:21:36"
