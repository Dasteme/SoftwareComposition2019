post_link,title,body_question,body_answer,viewcount,tags,score,score_answer,answercount,LastActivityDate,AcceptedAnswerId,CommentCount,FavoriteCount,LastEditorUserId,LastEditorDisplayName,LastEditDate,CreationDate,ClosedDate
"2138429","Hash and salt passwords in C#","I was just going through one of DavidHayden's articles on Hashing User Passwords.
Really I can't get what he is trying to achieve.
Here is his code:
private static string CreateSalt(int size)
{
    //Generate a cryptographic random number.
    RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
    byte[] buff = new byte[size];
    rng.GetBytes(buff);

    // Return a Base64 string representation of the random number.
    return Convert.ToBase64String(buff);
}

private static string CreatePasswordHash(string pwd, string salt)
{
    string saltAndPwd = String.Concat(pwd, salt);
    string hashedPwd =
        FormsAuthentication.HashPasswordForStoringInConfigFile(
        saltAndPwd, ""sha1"");
    return hashedPwd;
}

Is there any other C# method for hashing passwords and adding salt to it?
","Salt is used to add an extra level of complexity to the hash, to make it harder to brute-force crack.
From an article on Sitepoint:

A hacker can still perform
  what's called a dictionary attack.
  Malicious parties may make a
  dictionary attack by taking, for
  instance, 100,000 passwords that they
  know people use frequently (e.g. city
  names, sports teams, etc.), hash them,
  and then compare each entry in the
  dictionary against each row in the
  database table. If the hackers find a
  match, bingo! They have your password.
  To solve this problem, however, we
  need only salt the hash.
To salt a hash, we simply come up with
  a random-looking string of text,
  concatenate it with the password
  supplied by the user, then hash both
  the randomly generated string and
  password together as one value. We
  then save both the hash and the salt
  as separate fields within the Users
  table.
In this scenario, not only would a
  hacker need to guess the password,
  they'd have to guess the salt as well.
  Adding salt to the clear text improves
  security: now, if a hacker tries a
  dictionary attack, he must hash his
  100,000 entries with the salt of every
  user row. Although it's still
  possible, the chances of hacking
  success diminish radically.

There is no method automatically doing this in .NET, so you'll have go with the solution above.
","201214","<c#><hash><passwords><salt>","174","24","13","2019-07-23 09:22:44","2138588","3","136","29152","","2014-07-24 21:37:57","2010-01-26 09:20:19",""
"2138429","Hash and salt passwords in C#","I was just going through one of DavidHayden's articles on Hashing User Passwords.
Really I can't get what he is trying to achieve.
Here is his code:
private static string CreateSalt(int size)
{
    //Generate a cryptographic random number.
    RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
    byte[] buff = new byte[size];
    rng.GetBytes(buff);

    // Return a Base64 string representation of the random number.
    return Convert.ToBase64String(buff);
}

private static string CreatePasswordHash(string pwd, string salt)
{
    string saltAndPwd = String.Concat(pwd, salt);
    string hashedPwd =
        FormsAuthentication.HashPasswordForStoringInConfigFile(
        saltAndPwd, ""sha1"");
    return hashedPwd;
}

Is there any other C# method for hashing passwords and adding salt to it?
","Actually this is kind of strange, with the string conversions - which the membership provider does to put them into config files. Hashes and salts are binary blobs, you don't need to convert them to strings unless you want to put them into text files. 
In my book, Beginning ASP.NET Security, (oh finally, an excuse to pimp the book) I do the following
static byte[] GenerateSaltedHash(byte[] plainText, byte[] salt)
{
  HashAlgorithm algorithm = new SHA256Managed();

  byte[] plainTextWithSaltBytes = 
    new byte[plainText.Length + salt.Length];

  for (int i = 0; i < plainText.Length; i++)
  {
    plainTextWithSaltBytes[i] = plainText[i];
  }
  for (int i = 0; i < salt.Length; i++)
  {
    plainTextWithSaltBytes[plainText.Length + i] = salt[i];
  }

  return algorithm.ComputeHash(plainTextWithSaltBytes);            
}

The salt generation is as the example in the question. You can convert text to byte arrays using Encoding.UTF8.GetBytes(string). If you must convert a hash to its string representation you can use Convert.ToBase64String and Convert.FromBase64String to convert it back.
You should note that you cannot use the equality operator on byte arrays, it checks references and so you should simply loop through both arrays checking each byte thus
public static bool CompareByteArrays(byte[] array1, byte[] array2)
{
  if (array1.Length != array2.Length)
  {
    return false;
  }

  for (int i = 0; i < array1.Length; i++)
  {
    if (array1[i] != array2[i])
    {
      return false;
    }
  }

  return true;
}

Always use a new salt per password. Salts do not have to be kept secret and can be stored alongside the hash itself.
","201214","<c#><hash><passwords><salt>","174","240","13","2019-07-23 09:22:44","2138588","3","136","29152","","2014-07-24 21:37:57","2010-01-26 09:20:19",""
"2138429","Hash and salt passwords in C#","I was just going through one of DavidHayden's articles on Hashing User Passwords.
Really I can't get what he is trying to achieve.
Here is his code:
private static string CreateSalt(int size)
{
    //Generate a cryptographic random number.
    RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
    byte[] buff = new byte[size];
    rng.GetBytes(buff);

    // Return a Base64 string representation of the random number.
    return Convert.ToBase64String(buff);
}

private static string CreatePasswordHash(string pwd, string salt)
{
    string saltAndPwd = String.Concat(pwd, salt);
    string hashedPwd =
        FormsAuthentication.HashPasswordForStoringInConfigFile(
        saltAndPwd, ""sha1"");
    return hashedPwd;
}

Is there any other C# method for hashing passwords and adding salt to it?
","What blowdart said, but with a little less code. Use Linq or CopyTo to concatenate arrays.
public static byte[] Hash(string value, byte[] salt)
{
    return Hash(Encoding.UTF8.GetBytes(value), salt);
}

public static byte[] Hash(byte[] value, byte[] salt)
{
    byte[] saltedValue = value.Concat(salt).ToArray();
    // Alternatively use CopyTo.
    //var saltedValue = new byte[value.Length + salt.Length];
    //value.CopyTo(saltedValue, 0);
    //salt.CopyTo(saltedValue, value.Length);

    return new SHA256Managed().ComputeHash(saltedValue);
}

Linq has an easy way to compare your byte arrays too.
public bool ConfirmPassword(string password)
{
    byte[] passwordHash = Hash(password, _passwordSalt);

    return _passwordHash.SequenceEqual(passwordHash);
}

Before implementing any of this however, check out this post. For password hashing you may want a slow hash algorithm, not a fast one.
To that end there is the Rfc2898DeriveBytes class which is slow (and can be made slower), and may answer the second part of the original question in that it can take a password and salt and return a hash. See this question for more information. Note, Stack Exchange is using Rfc2898DeriveBytes for password hashing (source code here).
","201214","<c#><hash><passwords><salt>","174","44","13","2019-07-23 09:22:44","2138588","3","136","29152","","2014-07-24 21:37:57","2010-01-26 09:20:19",""
"2138429","Hash and salt passwords in C#","I was just going through one of DavidHayden's articles on Hashing User Passwords.
Really I can't get what he is trying to achieve.
Here is his code:
private static string CreateSalt(int size)
{
    //Generate a cryptographic random number.
    RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
    byte[] buff = new byte[size];
    rng.GetBytes(buff);

    // Return a Base64 string representation of the random number.
    return Convert.ToBase64String(buff);
}

private static string CreatePasswordHash(string pwd, string salt)
{
    string saltAndPwd = String.Concat(pwd, salt);
    string hashedPwd =
        FormsAuthentication.HashPasswordForStoringInConfigFile(
        saltAndPwd, ""sha1"");
    return hashedPwd;
}

Is there any other C# method for hashing passwords and adding salt to it?
","I've been reading that hashing functions like SHA256 weren't really intended for use with storing passwords:
https://patrickmn.com/security/storing-passwords-securely/#notpasswordhashes
Instead adaptive key derivation functions like PBKDF2, bcrypt or scrypt were. Here is a PBKDF2 based one that Microsoft wrote for PasswordHasher in their Microsoft.AspNet.Identity library:
/* =======================
 * HASHED PASSWORD FORMATS
 * =======================
 * 
 * Version 3:
 * PBKDF2 with HMAC-SHA256, 128-bit salt, 256-bit subkey, 10000 iterations.
 * Format: { 0x01, prf (UInt32), iter count (UInt32), salt length (UInt32), salt, subkey }
 * (All UInt32s are stored big-endian.)
 */

public string HashPassword(string password)
{
    var prf = KeyDerivationPrf.HMACSHA256;
    var rng = RandomNumberGenerator.Create();
    const int iterCount = 10000;
    const int saltSize = 128 / 8;
    const int numBytesRequested = 256 / 8;

    // Produce a version 3 (see comment above) text hash.
    var salt = new byte[saltSize];
    rng.GetBytes(salt);
    var subkey = KeyDerivation.Pbkdf2(password, salt, prf, iterCount, numBytesRequested);

    var outputBytes = new byte[13 + salt.Length + subkey.Length];
    outputBytes[0] = 0x01; // format marker
    WriteNetworkByteOrder(outputBytes, 1, (uint)prf);
    WriteNetworkByteOrder(outputBytes, 5, iterCount);
    WriteNetworkByteOrder(outputBytes, 9, saltSize);
    Buffer.BlockCopy(salt, 0, outputBytes, 13, salt.Length);
    Buffer.BlockCopy(subkey, 0, outputBytes, 13 + saltSize, subkey.Length);
    return Convert.ToBase64String(outputBytes);
}

public bool VerifyHashedPassword(string hashedPassword, string providedPassword)
{
    var decodedHashedPassword = Convert.FromBase64String(hashedPassword);

    // Wrong version
    if (decodedHashedPassword[0] != 0x01)
        return false;

    // Read header information
    var prf = (KeyDerivationPrf)ReadNetworkByteOrder(decodedHashedPassword, 1);
    var iterCount = (int)ReadNetworkByteOrder(decodedHashedPassword, 5);
    var saltLength = (int)ReadNetworkByteOrder(decodedHashedPassword, 9);

    // Read the salt: must be >= 128 bits
    if (saltLength < 128 / 8)
    {
        return false;
    }
    var salt = new byte[saltLength];
    Buffer.BlockCopy(decodedHashedPassword, 13, salt, 0, salt.Length);

    // Read the subkey (the rest of the payload): must be >= 128 bits
    var subkeyLength = decodedHashedPassword.Length - 13 - salt.Length;
    if (subkeyLength < 128 / 8)
    {
        return false;
    }
    var expectedSubkey = new byte[subkeyLength];
    Buffer.BlockCopy(decodedHashedPassword, 13 + salt.Length, expectedSubkey, 0, expectedSubkey.Length);

    // Hash the incoming password and verify it
    var actualSubkey = KeyDerivation.Pbkdf2(providedPassword, salt, prf, iterCount, subkeyLength);
    return actualSubkey.SequenceEqual(expectedSubkey);
}

private static void WriteNetworkByteOrder(byte[] buffer, int offset, uint value)
{
    buffer[offset + 0] = (byte)(value >> 24);
    buffer[offset + 1] = (byte)(value >> 16);
    buffer[offset + 2] = (byte)(value >> 8);
    buffer[offset + 3] = (byte)(value >> 0);
}

private static uint ReadNetworkByteOrder(byte[] buffer, int offset)
{
    return ((uint)(buffer[offset + 0]) << 24)
        | ((uint)(buffer[offset + 1]) << 16)
        | ((uint)(buffer[offset + 2]) << 8)
        | ((uint)(buffer[offset + 3]));
}

Note this requires Microsoft.AspNetCore.Cryptography.KeyDerivation nuget package installed which requires .NET Standard 2.0 (.NET 4.6.1 or higher). For earlier versions of .NET see the Crypto class from Microsoft's System.Web.Helpers library.
Update Nov 2015
Updated answer to use an implementation from a different Microsoft library which uses PBKDF2-HMAC-SHA256 hashing instead of PBKDF2-HMAC-SHA1 (note PBKDF2-HMAC-SHA1 is still secure if iterCount is high enough). You can check out the source the simplified code was copied from as it actually handles validating and upgrading hashes implemented from previous answer, useful if you need to increase iterCount in the future.
","201214","<c#><hash><passwords><salt>","174","32","13","2019-07-23 09:22:44","2138588","3","136","29152","","2014-07-24 21:37:57","2010-01-26 09:20:19",""
"2138429","Hash and salt passwords in C#","I was just going through one of DavidHayden's articles on Hashing User Passwords.
Really I can't get what he is trying to achieve.
Here is his code:
private static string CreateSalt(int size)
{
    //Generate a cryptographic random number.
    RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
    byte[] buff = new byte[size];
    rng.GetBytes(buff);

    // Return a Base64 string representation of the random number.
    return Convert.ToBase64String(buff);
}

private static string CreatePasswordHash(string pwd, string salt)
{
    string saltAndPwd = String.Concat(pwd, salt);
    string hashedPwd =
        FormsAuthentication.HashPasswordForStoringInConfigFile(
        saltAndPwd, ""sha1"");
    return hashedPwd;
}

Is there any other C# method for hashing passwords and adding salt to it?
","Bah, this is better! http://sourceforge.net/projects/pwdtknet/ and it is better because ..... it performs Key Stretching AND uses HMACSHA512 :)
","201214","<c#><hash><passwords><salt>","174","5","13","2019-07-23 09:22:44","2138588","3","136","29152","","2014-07-24 21:37:57","2010-01-26 09:20:19",""
"2138429","Hash and salt passwords in C#","I was just going through one of DavidHayden's articles on Hashing User Passwords.
Really I can't get what he is trying to achieve.
Here is his code:
private static string CreateSalt(int size)
{
    //Generate a cryptographic random number.
    RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
    byte[] buff = new byte[size];
    rng.GetBytes(buff);

    // Return a Base64 string representation of the random number.
    return Convert.ToBase64String(buff);
}

private static string CreatePasswordHash(string pwd, string salt)
{
    string saltAndPwd = String.Concat(pwd, salt);
    string hashedPwd =
        FormsAuthentication.HashPasswordForStoringInConfigFile(
        saltAndPwd, ""sha1"");
    return hashedPwd;
}

Is there any other C# method for hashing passwords and adding salt to it?
","This is how I do it.. I create the hash and store it using the ProtectedData api:
    public static string GenerateKeyHash(string Password)
    {
        if (string.IsNullOrEmpty(Password)) return null;
        if (Password.Length < 1) return null;

        byte[] salt = new byte[20];
        byte[] key = new byte[20];
        byte[] ret = new byte[40];

        try
        {
            using (RNGCryptoServiceProvider randomBytes = new RNGCryptoServiceProvider())
            {
                randomBytes.GetBytes(salt);

                using (var hashBytes = new Rfc2898DeriveBytes(Password, salt, 10000))
                {
                    key = hashBytes.GetBytes(20);
                    Buffer.BlockCopy(salt, 0, ret, 0, 20);
                    Buffer.BlockCopy(key, 0, ret, 20, 20);
                }
            }
            // returns salt/key pair
            return Convert.ToBase64String(ret);
        }
        finally
        {
            if (salt != null)
                Array.Clear(salt, 0, salt.Length);
            if (key != null)
                Array.Clear(key, 0, key.Length);
            if (ret != null)
                Array.Clear(ret, 0, ret.Length);
        } 
    }

    public static bool ComparePasswords(string PasswordHash, string Password)
    {
        if (string.IsNullOrEmpty(PasswordHash) || string.IsNullOrEmpty(Password)) return false;
        if (PasswordHash.Length < 40 || Password.Length < 1) return false;

        byte[] salt = new byte[20];
        byte[] key = new byte[20];
        byte[] hash = Convert.FromBase64String(PasswordHash);

        try
        {
            Buffer.BlockCopy(hash, 0, salt, 0, 20);
            Buffer.BlockCopy(hash, 20, key, 0, 20);

            using (var hashBytes = new Rfc2898DeriveBytes(Password, salt, 10000))
            {
                byte[] newKey = hashBytes.GetBytes(20);

                if (newKey != null)
                    if (newKey.SequenceEqual(key))
                        return true;
            }
            return false;
        }
        finally
        {
            if (salt != null)
                Array.Clear(salt, 0, salt.Length);
            if (key != null)
                Array.Clear(key, 0, key.Length);
            if (hash != null)
                Array.Clear(hash, 0, hash.Length);
        }
    }

    public static byte[] DecryptData(string Data, byte[] Salt)
    {
        if (string.IsNullOrEmpty(Data)) return null;

        byte[] btData = Convert.FromBase64String(Data);

        try
        {
            return ProtectedData.Unprotect(btData, Salt, DataProtectionScope.CurrentUser);
        }
        finally
        {
            if (btData != null)
                Array.Clear(btData, 0, btData.Length);
        }
    }

    public static string EncryptData(byte[] Data, byte[] Salt)
    {
        if (Data == null) return null;
        if (Data.Length < 1) return null;

        byte[] buffer = new byte[Data.Length];

        try
        {
            Buffer.BlockCopy(Data, 0, buffer, 0, Data.Length);
            return System.Convert.ToBase64String(ProtectedData.Protect(buffer, Salt, DataProtectionScope.CurrentUser));
        }
        finally
        {
            if (buffer != null)
                Array.Clear(buffer, 0, buffer.Length);
        }
    }

","201214","<c#><hash><passwords><salt>","174","2","13","2019-07-23 09:22:44","2138588","3","136","29152","","2014-07-24 21:37:57","2010-01-26 09:20:19",""
"2138429","Hash and salt passwords in C#","I was just going through one of DavidHayden's articles on Hashing User Passwords.
Really I can't get what he is trying to achieve.
Here is his code:
private static string CreateSalt(int size)
{
    //Generate a cryptographic random number.
    RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
    byte[] buff = new byte[size];
    rng.GetBytes(buff);

    // Return a Base64 string representation of the random number.
    return Convert.ToBase64String(buff);
}

private static string CreatePasswordHash(string pwd, string salt)
{
    string saltAndPwd = String.Concat(pwd, salt);
    string hashedPwd =
        FormsAuthentication.HashPasswordForStoringInConfigFile(
        saltAndPwd, ""sha1"");
    return hashedPwd;
}

Is there any other C# method for hashing passwords and adding salt to it?
","create proc [dbo].[hash_pass] @family nvarchar(50), @username nvarchar(50), @pass nvarchar(Max),``` @semat nvarchar(50), @tell nvarchar(50)

as insert into tbl_karbar values (@family,@username,(select HASHBYTES('SHA1' ,@pass)),@semat,@tell)

","201214","<c#><hash><passwords><salt>","174","-4","13","2019-07-23 09:22:44","2138588","3","136","29152","","2014-07-24 21:37:57","2010-01-26 09:20:19",""
"2138429","Hash and salt passwords in C#","I was just going through one of DavidHayden's articles on Hashing User Passwords.
Really I can't get what he is trying to achieve.
Here is his code:
private static string CreateSalt(int size)
{
    //Generate a cryptographic random number.
    RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
    byte[] buff = new byte[size];
    rng.GetBytes(buff);

    // Return a Base64 string representation of the random number.
    return Convert.ToBase64String(buff);
}

private static string CreatePasswordHash(string pwd, string salt)
{
    string saltAndPwd = String.Concat(pwd, salt);
    string hashedPwd =
        FormsAuthentication.HashPasswordForStoringInConfigFile(
        saltAndPwd, ""sha1"");
    return hashedPwd;
}

Is there any other C# method for hashing passwords and adding salt to it?
","In answer to this part of the original question ""Is there any other C# method for hashing passwords"" You can achieve this using ASP.NET Identity v3.0 https://www.nuget.org/packages/Microsoft.AspNet.Identity.EntityFramework/3.0.0-rc1-final
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.AspNet.Identity;
using System.Security.Principal;

namespace HashTest{


    class Program
    {
        static void Main(string[] args)
        {

            WindowsIdentity wi = WindowsIdentity.GetCurrent();

            var ph = new PasswordHasher<WindowsIdentity>();

            Console.WriteLine(ph.HashPassword(wi,""test""));

            Console.WriteLine(ph.VerifyHashedPassword(wi,""AQAAAAEAACcQAAAAEA5S5X7dmbx/NzTk6ixCX+bi8zbKqBUjBhID3Dg1teh+TRZMkAy3CZC5yIfbLqwk2A=="",""test""));

        }
    }


}

","201214","<c#><hash><passwords><salt>","174","-1","13","2019-07-23 09:22:44","2138588","3","136","29152","","2014-07-24 21:37:57","2010-01-26 09:20:19",""
"2138429","Hash and salt passwords in C#","I was just going through one of DavidHayden's articles on Hashing User Passwords.
Really I can't get what he is trying to achieve.
Here is his code:
private static string CreateSalt(int size)
{
    //Generate a cryptographic random number.
    RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
    byte[] buff = new byte[size];
    rng.GetBytes(buff);

    // Return a Base64 string representation of the random number.
    return Convert.ToBase64String(buff);
}

private static string CreatePasswordHash(string pwd, string salt)
{
    string saltAndPwd = String.Concat(pwd, salt);
    string hashedPwd =
        FormsAuthentication.HashPasswordForStoringInConfigFile(
        saltAndPwd, ""sha1"");
    return hashedPwd;
}

Is there any other C# method for hashing passwords and adding salt to it?
","I have made a library SimpleHashing.Net to make the process of hashing easy with basic classes provided by Microsoft. Ordinary SHA is not really enough to have passwords stored securely anymore.
The library use the idea of hash format from Bcrypt, but since there is no official MS implementation I prefer to use what's available in the framework (i.e. PBKDF2), but it's a bit too hard out of the box.
This is a quick example how to use the library:
ISimpleHash simpleHash = new SimpleHash();

// Creating a user hash, hashedPassword can be stored in a database
// hashedPassword contains the number of iterations and salt inside it similar to bcrypt format
string hashedPassword = simpleHash.Compute(""Password123"");

// Validating user's password by first loading it from database by username
string storedHash = _repository.GetUserPasswordHash(username);
isPasswordValid = simpleHash.Verify(""Password123"", storedHash);

","201214","<c#><hash><passwords><salt>","174","3","13","2019-07-23 09:22:44","2138588","3","136","29152","","2014-07-24 21:37:57","2010-01-26 09:20:19",""
"2138429","Hash and salt passwords in C#","I was just going through one of DavidHayden's articles on Hashing User Passwords.
Really I can't get what he is trying to achieve.
Here is his code:
private static string CreateSalt(int size)
{
    //Generate a cryptographic random number.
    RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
    byte[] buff = new byte[size];
    rng.GetBytes(buff);

    // Return a Base64 string representation of the random number.
    return Convert.ToBase64String(buff);
}

private static string CreatePasswordHash(string pwd, string salt)
{
    string saltAndPwd = String.Concat(pwd, salt);
    string hashedPwd =
        FormsAuthentication.HashPasswordForStoringInConfigFile(
        saltAndPwd, ""sha1"");
    return hashedPwd;
}

Is there any other C# method for hashing passwords and adding salt to it?
"," protected void m_GenerateSHA256_Button1_Click(objectSender, EventArgs e)
{
string salt =createSalt(10);
string hashedPassword=GenerateSHA256Hash(m_UserInput_TextBox.Text,Salt);
m_SaltHash_TextBox.Text=Salt;
 m_SaltSHA256Hash_TextBox.Text=hashedPassword;

}
 public string createSalt(int size)
{
 var rng= new System.Security.Cyptography.RNGCyptoServiceProvider();
 var buff= new byte[size];
rng.GetBytes(buff);
 return Convert.ToBase64String(buff);
}


 public string GenerateSHA256Hash(string input,string salt)
{
 byte[]bytes=System.Text.Encoding.UTF8.GetBytes(input+salt);
 new System.Security.Cyptography.SHA256Managed();
 byte[]hash=sha256hashString.ComputedHash(bytes);
 return bytesArrayToHexString(hash);
  }

","201214","<c#><hash><passwords><salt>","174","0","13","2019-07-23 09:22:44","2138588","3","136","29152","","2014-07-24 21:37:57","2010-01-26 09:20:19",""
"2138429","Hash and salt passwords in C#","I was just going through one of DavidHayden's articles on Hashing User Passwords.
Really I can't get what he is trying to achieve.
Here is his code:
private static string CreateSalt(int size)
{
    //Generate a cryptographic random number.
    RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
    byte[] buff = new byte[size];
    rng.GetBytes(buff);

    // Return a Base64 string representation of the random number.
    return Convert.ToBase64String(buff);
}

private static string CreatePasswordHash(string pwd, string salt)
{
    string saltAndPwd = String.Concat(pwd, salt);
    string hashedPwd =
        FormsAuthentication.HashPasswordForStoringInConfigFile(
        saltAndPwd, ""sha1"");
    return hashedPwd;
}

Is there any other C# method for hashing passwords and adding salt to it?
","I read all answers and I think those enough, specially @Michael articles with slow hashing and @CodesInChaos good comments, but I decided to share my code snippet for hashing/validating that may be useful and it does not require [Microsoft.AspNet.Cryptography.KeyDerivation].
    private static bool SlowEquals(byte[] a, byte[] b)
            {
                uint diff = (uint)a.Length ^ (uint)b.Length;
                for (int i = 0; i < a.Length && i < b.Length; i++)
                    diff |= (uint)(a[i] ^ b[i]);
                return diff == 0;
            }

    private static byte[] PBKDF2(string password, byte[] salt, int iterations, int outputBytes)
            {
                Rfc2898DeriveBytes pbkdf2 = new Rfc2898DeriveBytes(password, salt);
                pbkdf2.IterationCount = iterations;
                return pbkdf2.GetBytes(outputBytes);
            }

    private static string CreateHash(string value, int salt_bytes, int hash_bytes, int pbkdf2_iterations)
            {
                // Generate a random salt
                RNGCryptoServiceProvider csprng = new RNGCryptoServiceProvider();
                byte[] salt = new byte[salt_bytes];
                csprng.GetBytes(salt);

                // Hash the value and encode the parameters
                byte[] hash = PBKDF2(value, salt, pbkdf2_iterations, hash_bytes);

                //You need to return the salt value too for the validation process
                return Convert.ToBase64String(hash) + "":"" + 
                       Convert.ToBase64String(hash);
            }

    private static bool ValidateHash(string pureVal, string saltVal, string hashVal, int pbkdf2_iterations)
            {
                try
                {
                    byte[] salt = Convert.FromBase64String(saltVal);
                    byte[] hash = Convert.FromBase64String(hashVal);

                    byte[] testHash = PBKDF2(pureVal, salt, pbkdf2_iterations, hash.Length);
                    return SlowEquals(hash, testHash);
                }
                catch (Exception ex)
                {
                    return false;
                }
            }

Please pay attention SlowEquals function that is so important, Finally, I hope this help and Please don't hesitate to advise me about better approaches.
","201214","<c#><hash><passwords><salt>","174","1","13","2019-07-23 09:22:44","2138588","3","136","29152","","2014-07-24 21:37:57","2010-01-26 09:20:19",""
"2138429","Hash and salt passwords in C#","I was just going through one of DavidHayden's articles on Hashing User Passwords.
Really I can't get what he is trying to achieve.
Here is his code:
private static string CreateSalt(int size)
{
    //Generate a cryptographic random number.
    RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
    byte[] buff = new byte[size];
    rng.GetBytes(buff);

    // Return a Base64 string representation of the random number.
    return Convert.ToBase64String(buff);
}

private static string CreatePasswordHash(string pwd, string salt)
{
    string saltAndPwd = String.Concat(pwd, salt);
    string hashedPwd =
        FormsAuthentication.HashPasswordForStoringInConfigFile(
        saltAndPwd, ""sha1"");
    return hashedPwd;
}

Is there any other C# method for hashing passwords and adding salt to it?
","I created a class that  has the following method:

Create Salt
Hash Input
Validate input
public class CryptographyProcessor
{
    public string CreateSalt(int size)
    {
        //Generate a cryptographic random number.
          RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
         byte[] buff = new byte[size];
         rng.GetBytes(buff);
         return Convert.ToBase64String(buff);
    }


      public string GenerateHash(string input, string salt)
      { 
         byte[] bytes = Encoding.UTF8.GetBytes(input + salt);
         SHA256Managed sHA256ManagedString = new SHA256Managed();
         byte[] hash = sHA256ManagedString.ComputeHash(bytes);
         return Convert.ToBase64String(hash);
      }

      public bool AreEqual(string plainTextInput, string hashedInput, string salt)
      {
           string newHashedPin = GenerateHash(plainTextInput, salt);
           return newHashedPin.Equals(hashedInput); 
      }
 }

`

","201214","<c#><hash><passwords><salt>","174","8","13","2019-07-23 09:22:44","2138588","3","136","29152","","2014-07-24 21:37:57","2010-01-26 09:20:19",""
"2138429","Hash and salt passwords in C#","I was just going through one of DavidHayden's articles on Hashing User Passwords.
Really I can't get what he is trying to achieve.
Here is his code:
private static string CreateSalt(int size)
{
    //Generate a cryptographic random number.
    RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
    byte[] buff = new byte[size];
    rng.GetBytes(buff);

    // Return a Base64 string representation of the random number.
    return Convert.ToBase64String(buff);
}

private static string CreatePasswordHash(string pwd, string salt)
{
    string saltAndPwd = String.Concat(pwd, salt);
    string hashedPwd =
        FormsAuthentication.HashPasswordForStoringInConfigFile(
        saltAndPwd, ""sha1"");
    return hashedPwd;
}

Is there any other C# method for hashing passwords and adding salt to it?
","Use the System.Web.Helpers.Crypto NuGet package from Microsoft. It automatically adds salt to the hash.
You hash a password like this: var hash = Crypto.HashPassword(""foo"");
You verify a password like this: var verified = Crypto.VerifyHashedPassword(hash, ""foo"");
","201214","<c#><hash><passwords><salt>","174","1","13","2019-07-23 09:22:44","2138588","3","136","29152","","2014-07-24 21:37:57","2010-01-26 09:20:19",""
"30279321","How to use password_hash","Recently I have been trying to implement my own security on a log in script I stumbled upon on the internet. After struggling of trying to learn how to make my own script to generate a salt for each user, I stumbled upon password_hash. 
From what I understand (based off of the reading on this page: http://php.net/manual/en/faq.passwords.php), salt is already generated in the row when you use password_hash. Is this true? 
Another question I had was, wouldn't it be smart to have 2 salts? One directly in the file and one in the DB? That way, if someone compromises your salt in the DB, you still have the one directly in the file? I read on here that storing salts is never a smart idea, but it always confused me what people meant by that. 
","Yes, it's true. Why do you doubt the php faq on the function? :)
The result of running password_hash() has has four parts:

the algorithm used
parameters
salt
actual password hash

So as you can see, the hash is a part of it.
Sure, you could have an additional salt for an added layer of security, but I honestly think that's overkill in a regular php application. The default bcrypt algorithm is good, and the optional blowfish one is arguably even better.
","110116","<php><salt><password-hash><php-password-hash>","70","5","7","2019-09-22 19:46:02","30279440","1","36","575765","","2015-05-16 18:56:07","2015-05-16 18:32:46",""
"30279321","How to use password_hash","Recently I have been trying to implement my own security on a log in script I stumbled upon on the internet. After struggling of trying to learn how to make my own script to generate a salt for each user, I stumbled upon password_hash. 
From what I understand (based off of the reading on this page: http://php.net/manual/en/faq.passwords.php), salt is already generated in the row when you use password_hash. Is this true? 
Another question I had was, wouldn't it be smart to have 2 salts? One directly in the file and one in the DB? That way, if someone compromises your salt in the DB, you still have the one directly in the file? I read on here that storing salts is never a smart idea, but it always confused me what people meant by that. 
","Yes you understood it correctly, the function password_hash() will generate a salt on its own, and includes it in the resulting hash-value. Storing the salt in the database is absolutely correct, it does its job even if known.
// Hash a new password for storing in the database.
// The function automatically generates a cryptographically safe salt.
$hashToStoreInDb = password_hash($_POST['password'], PASSWORD_DEFAULT);

// Check if the hash of the entered login password, matches the stored hash.
// The salt and the cost factor will be extracted from $existingHashFromDb.
$isPasswordCorrect = password_verify($_POST['password'], $existingHashFromDb);

The second salt you mentioned (the one stored in a file), is actually a pepper or a server side key. If you add it before hashing (like the salt), then you add a pepper. There is a better way though, you could first calculate the hash, and afterwards encrypt (two-way) the hash with a server-side key. This gives you the possibility to change the key when necessary.
In contrast to the salt, this key should be kept secret. People often mix it up and try to hide the salt, but it is better to let the salt do its job and add the secret with a key.
","110116","<php><salt><password-hash><php-password-hash>","70","19","7","2019-09-22 19:46:02","30279440","1","36","575765","","2015-05-16 18:56:07","2015-05-16 18:32:46",""
"30279321","How to use password_hash","Recently I have been trying to implement my own security on a log in script I stumbled upon on the internet. After struggling of trying to learn how to make my own script to generate a salt for each user, I stumbled upon password_hash. 
From what I understand (based off of the reading on this page: http://php.net/manual/en/faq.passwords.php), salt is already generated in the row when you use password_hash. Is this true? 
Another question I had was, wouldn't it be smart to have 2 salts? One directly in the file and one in the DB? That way, if someone compromises your salt in the DB, you still have the one directly in the file? I read on here that storing salts is never a smart idea, but it always confused me what people meant by that. 
","Using password_hash is the recommended way to store passwords. Don't  separate them to DB and files.
Let's say we have the following input: 
$password = $_POST['password'];

I don't validate the input just for the sake of understanding the concept.
You first hash the password by doing this:
$hashed_password = password_hash($password, PASSWORD_DEFAULT);

Then see the output:
var_dump($hashed_password);

As you can see it's hashed. (I assume you did those steps).
Now you store this hashed_password in your database, And then let's say when a user asks to log them in. You check the password input with this hash value in the database, by doing this:
// Query the database for username and password
// ...

if(password_verify($password, $hashed_password)) {
    // If the password inputs matched the hashed password in the database
    // Do something, you know... log them in.
} 

// Else, Redirect them back to the login page.

Official Reference
","110116","<php><salt><password-hash><php-password-hash>","70","129","7","2019-09-22 19:46:02","30279440","1","36","575765","","2015-05-16 18:56:07","2015-05-16 18:32:46",""
"30279321","How to use password_hash","Recently I have been trying to implement my own security on a log in script I stumbled upon on the internet. After struggling of trying to learn how to make my own script to generate a salt for each user, I stumbled upon password_hash. 
From what I understand (based off of the reading on this page: http://php.net/manual/en/faq.passwords.php), salt is already generated in the row when you use password_hash. Is this true? 
Another question I had was, wouldn't it be smart to have 2 salts? One directly in the file and one in the DB? That way, if someone compromises your salt in the DB, you still have the one directly in the file? I read on here that storing salts is never a smart idea, but it always confused me what people meant by that. 
","Never use md5() for securing your password, even with salt, it is always dangerous!!
Make your password secured with latest hashing algorithms as below.
<?php

// Your original Password
$password = '121@121';

//PASSWORD_BCRYPT or PASSWORD_DEFAULT use any in the 2nd parameter
/*
PASSWORD_BCRYPT always results 60 characters long string.
PASSWORD_DEFAULT capacity is beyond 60 characters
*/
$password_encrypted = password_hash($password, PASSWORD_BCRYPT);

?>

For matching with database's encrypted password and user inputted password use the below function.
<?php 

if (password_verify($password_inputted_by_user, $password_encrypted)) {
    // Success!
    echo 'Password Matches';
}else {
    // Invalid credentials
    echo 'Password Mismatch';
}

?>

If you want to use your own salt, use your custom generated function for the same, just follow below, but I not recommend this as It is found deprecated in latest versions of PHP.
read this http://php.net/manual/en/function.password-hash.php before use below code.
<?php

$options = [
    'salt' => your_custom_function_for_salt(), 
    //write your own code to generate a suitable & secured salt
    'cost' => 12 // the default cost is 10
];

$hash = password_hash($your_password, PASSWORD_DEFAULT, $options);

?>

Hope these all helps!!
","110116","<php><salt><password-hash><php-password-hash>","70","4","7","2019-09-22 19:46:02","30279440","1","36","575765","","2015-05-16 18:56:07","2015-05-16 18:32:46",""
"30279321","How to use password_hash","Recently I have been trying to implement my own security on a log in script I stumbled upon on the internet. After struggling of trying to learn how to make my own script to generate a salt for each user, I stumbled upon password_hash. 
From what I understand (based off of the reading on this page: http://php.net/manual/en/faq.passwords.php), salt is already generated in the row when you use password_hash. Is this true? 
Another question I had was, wouldn't it be smart to have 2 salts? One directly in the file and one in the DB? That way, if someone compromises your salt in the DB, you still have the one directly in the file? I read on here that storing salts is never a smart idea, but it always confused me what people meant by that. 
","I’ve built a function I use all the time for password validation and to create passwords, e.g. to store them in a MySQL database. It uses a randomly generated salt which is way more secure than using a static salt.
function secure_password($user_pwd, $multi) {

/*
    secure_password ( string $user_pwd, boolean/string $multi ) 

    *** Description: 
        This function verifies a password against a (database-) stored password's hash or
        returns $hash for a given password if $multi is set to either true or false

    *** Examples:
        // To check a password against its hash
        if(secure_password($user_password, $row['user_password'])) {
            login_function();
        } 
        // To create a password-hash
        $my_password = 'uber_sEcUrE_pass';
        $hash = secure_password($my_password, true);
        echo $hash;
*/

// Set options for encryption and build unique random hash
$crypt_options = ['cost' => 11, 'salt' => mcrypt_create_iv(22, MCRYPT_DEV_URANDOM)];
$hash = password_hash($user_pwd, PASSWORD_BCRYPT, $crypt_options);

// If $multi is not boolean check password and return validation state true/false
if($multi!==true && $multi!==false) {
    if (password_verify($user_pwd, $table_pwd = $multi)) {
        return true; // valid password
    } else {
        return false; // invalid password
    }
// If $multi is boolean return $hash
} else return $hash;

}

","110116","<php><salt><password-hash><php-password-hash>","70","-1","7","2019-09-22 19:46:02","30279440","1","36","575765","","2015-05-16 18:56:07","2015-05-16 18:32:46",""
"30279321","How to use password_hash","Recently I have been trying to implement my own security on a log in script I stumbled upon on the internet. After struggling of trying to learn how to make my own script to generate a salt for each user, I stumbled upon password_hash. 
From what I understand (based off of the reading on this page: http://php.net/manual/en/faq.passwords.php), salt is already generated in the row when you use password_hash. Is this true? 
Another question I had was, wouldn't it be smart to have 2 salts? One directly in the file and one in the DB? That way, if someone compromises your salt in the DB, you still have the one directly in the file? I read on here that storing salts is never a smart idea, but it always confused me what people meant by that. 
","There is a distinct lack of discussion on backwards and forwards compatibility that is built in to PHP's password functions. Notably:

Backwards Compatibility: The password functions are essentially a well-written wrapper around crypt(), and are inherently backwards-compatible with crypt()-format hashes, even if they use obsolete and/or insecure hash algorithms.
Forwards Compatibilty: Inserting password_needs_rehash() and a bit of logic into your authentication workflow can keep you your hashes up to date with current and future algorithms with potentially zero future changes to the workflow. Note: Any string that does not match the specified algorithm will be flagged for needing a rehash, including non-crypt-compatible hashes.

Eg:
class FakeDB {
    public function __call($name, $args) {
        printf(""%s::%s(%s)\n"", __CLASS__, $name, json_encode($args));
        return $this;
    }
}

class MyAuth {
    protected $dbh;
    protected $fakeUsers = [
        // old crypt-md5 format
        1 => ['password' => '$1$AVbfJOzY$oIHHCHlD76Aw1xmjfTpm5.'],
        // old salted md5 format
        2 => ['password' => '3858f62230ac3c915f300c664312c63f', 'salt' => 'bar'],
        // current bcrypt format
        3 => ['password' => '$2y$10$3eUn9Rnf04DR.aj8R3WbHuBO9EdoceH9uKf6vMiD7tz766rMNOyTO']
    ];

    public function __construct($dbh) {
        $this->dbh = $dbh;
    }

    protected function getuser($id) {
        // just pretend these are coming from the DB
        return $this->fakeUsers[$id];
    }

    public function authUser($id, $password) {
        $userInfo = $this->getUser($id);

        // Do you have old, turbo-legacy, non-crypt hashes?
        if( strpos( $userInfo['password'], '$' ) !== 0 ) {
            printf(""%s::legacy_hash\n"", __METHOD__);
            $res = $userInfo['password'] === md5($password . $userInfo['salt']);
        } else {
            printf(""%s::password_verify\n"", __METHOD__);
            $res = password_verify($password, $userInfo['password']);
        }

        // once we've passed validation we can check if the hash needs updating.
        if( $res && password_needs_rehash($userInfo['password'], PASSWORD_DEFAULT) ) {
            printf(""%s::rehash\n"", __METHOD__);
            $stmt = $this->dbh->prepare('UPDATE users SET pass = ? WHERE user_id = ?');
            $stmt->execute([password_hash($password, PASSWORD_DEFAULT), $id]);
        }

        return $res;
    }
}

$auth = new MyAuth(new FakeDB());

for( $i=1; $i<=3; $i++) {
    var_dump($auth->authuser($i, 'foo'));
    echo PHP_EOL;
}

Output:
MyAuth::authUser::password_verify
MyAuth::authUser::rehash
FakeDB::prepare([""UPDATE users SET pass = ? WHERE user_id = ?""])
FakeDB::execute([[""$2y$10$zNjPwqQX\/RxjHiwkeUEzwOpkucNw49yN4jjiRY70viZpAx5x69kv."",1]])
bool(true)

MyAuth::authUser::legacy_hash
MyAuth::authUser::rehash
FakeDB::prepare([""UPDATE users SET pass = ? WHERE user_id = ?""])
FakeDB::execute([[""$2y$10$VRTu4pgIkGUvilTDRTXYeOQSEYqe2GjsPoWvDUeYdV2x\/\/StjZYHu"",2]])
bool(true)

MyAuth::authUser::password_verify
bool(true)

As a final note, given that you can only re-hash a user's password on login you should consider ""sunsetting"" insecure legacy hashes to protect your users. By this I mean that after a certain grace period you remove all insecure [eg: bare MD5/SHA/otherwise weak] hashes and have your users rely on your application's password reset mechanisms.
","110116","<php><salt><password-hash><php-password-hash>","70","4","7","2019-09-22 19:46:02","30279440","1","36","575765","","2015-05-16 18:56:07","2015-05-16 18:32:46",""
"30279321","How to use password_hash","Recently I have been trying to implement my own security on a log in script I stumbled upon on the internet. After struggling of trying to learn how to make my own script to generate a salt for each user, I stumbled upon password_hash. 
From what I understand (based off of the reading on this page: http://php.net/manual/en/faq.passwords.php), salt is already generated in the row when you use password_hash. Is this true? 
Another question I had was, wouldn't it be smart to have 2 salts? One directly in the file and one in the DB? That way, if someone compromises your salt in the DB, you still have the one directly in the file? I read on here that storing salts is never a smart idea, but it always confused me what people meant by that. 
","Class Password full code:
Class Password {

    public function __construct() {}


    /**
     * Hash the password using the specified algorithm
     *
     * @param string $password The password to hash
     * @param int    $algo     The algorithm to use (Defined by PASSWORD_* constants)
     * @param array  $options  The options for the algorithm to use
     *
     * @return string|false The hashed password, or false on error.
     */
    function password_hash($password, $algo, array $options = array()) {
        if (!function_exists('crypt')) {
            trigger_error(""Crypt must be loaded for password_hash to function"", E_USER_WARNING);
            return null;
        }
        if (!is_string($password)) {
            trigger_error(""password_hash(): Password must be a string"", E_USER_WARNING);
            return null;
        }
        if (!is_int($algo)) {
            trigger_error(""password_hash() expects parameter 2 to be long, "" . gettype($algo) . "" given"", E_USER_WARNING);
            return null;
        }
        switch ($algo) {
            case PASSWORD_BCRYPT :
                // Note that this is a C constant, but not exposed to PHP, so we don't define it here.
                $cost = 10;
                if (isset($options['cost'])) {
                    $cost = $options['cost'];
                    if ($cost < 4 || $cost > 31) {
                        trigger_error(sprintf(""password_hash(): Invalid bcrypt cost parameter specified: %d"", $cost), E_USER_WARNING);
                        return null;
                    }
                }
                // The length of salt to generate
                $raw_salt_len = 16;
                // The length required in the final serialization
                $required_salt_len = 22;
                $hash_format = sprintf(""$2y$%02d$"", $cost);
                break;
            default :
                trigger_error(sprintf(""password_hash(): Unknown password hashing algorithm: %s"", $algo), E_USER_WARNING);
                return null;
        }
        if (isset($options['salt'])) {
            switch (gettype($options['salt'])) {
                case 'NULL' :
                case 'boolean' :
                case 'integer' :
                case 'double' :
                case 'string' :
                    $salt = (string)$options['salt'];
                    break;
                case 'object' :
                    if (method_exists($options['salt'], '__tostring')) {
                        $salt = (string)$options['salt'];
                        break;
                    }
                case 'array' :
                case 'resource' :
                default :
                    trigger_error('password_hash(): Non-string salt parameter supplied', E_USER_WARNING);
                    return null;
            }
            if (strlen($salt) < $required_salt_len) {
                trigger_error(sprintf(""password_hash(): Provided salt is too short: %d expecting %d"", strlen($salt), $required_salt_len), E_USER_WARNING);
                return null;
            } elseif (0 == preg_match('#^[a-zA-Z0-9./]+$#D', $salt)) {
                $salt = str_replace('+', '.', base64_encode($salt));
            }
        } else {
            $salt = str_replace('+', '.', base64_encode($this->generate_entropy($required_salt_len)));
        }
        $salt = substr($salt, 0, $required_salt_len);

        $hash = $hash_format . $salt;

        $ret = crypt($password, $hash);

        if (!is_string($ret) || strlen($ret) <= 13) {
            return false;
        }

        return $ret;
    }


    /**
     * Generates Entropy using the safest available method, falling back to less preferred methods depending on support
     *
     * @param int $bytes
     *
     * @return string Returns raw bytes
     */
    function generate_entropy($bytes){
        $buffer = '';
        $buffer_valid = false;
        if (function_exists('mcrypt_create_iv') && !defined('PHALANGER')) {
            $buffer = mcrypt_create_iv($bytes, MCRYPT_DEV_URANDOM);
            if ($buffer) {
                $buffer_valid = true;
            }
        }
        if (!$buffer_valid && function_exists('openssl_random_pseudo_bytes')) {
            $buffer = openssl_random_pseudo_bytes($bytes);
            if ($buffer) {
                $buffer_valid = true;
            }
        }
        if (!$buffer_valid && is_readable('/dev/urandom')) {
            $f = fopen('/dev/urandom', 'r');
            $read = strlen($buffer);
            while ($read < $bytes) {
                $buffer .= fread($f, $bytes - $read);
                $read = strlen($buffer);
            }
            fclose($f);
            if ($read >= $bytes) {
                $buffer_valid = true;
            }
        }
        if (!$buffer_valid || strlen($buffer) < $bytes) {
            $bl = strlen($buffer);
            for ($i = 0; $i < $bytes; $i++) {
                if ($i < $bl) {
                    $buffer[$i] = $buffer[$i] ^ chr(mt_rand(0, 255));
                } else {
                    $buffer .= chr(mt_rand(0, 255));
                }
            }
        }
        return $buffer;
    }

    /**
     * Get information about the password hash. Returns an array of the information
     * that was used to generate the password hash.
     *
     * array(
     *    'algo' => 1,
     *    'algoName' => 'bcrypt',
     *    'options' => array(
     *        'cost' => 10,
     *    ),
     * )
     *
     * @param string $hash The password hash to extract info from
     *
     * @return array The array of information about the hash.
     */
    function password_get_info($hash) {
        $return = array('algo' => 0, 'algoName' => 'unknown', 'options' => array(), );
        if (substr($hash, 0, 4) == '$2y$' && strlen($hash) == 60) {
            $return['algo'] = PASSWORD_BCRYPT;
            $return['algoName'] = 'bcrypt';
            list($cost) = sscanf($hash, ""$2y$%d$"");
            $return['options']['cost'] = $cost;
        }
        return $return;
    }

    /**
     * Determine if the password hash needs to be rehashed according to the options provided
     *
     * If the answer is true, after validating the password using password_verify, rehash it.
     *
     * @param string $hash    The hash to test
     * @param int    $algo    The algorithm used for new password hashes
     * @param array  $options The options array passed to password_hash
     *
     * @return boolean True if the password needs to be rehashed.
     */
    function password_needs_rehash($hash, $algo, array $options = array()) {
        $info = password_get_info($hash);
        if ($info['algo'] != $algo) {
            return true;
        }
        switch ($algo) {
            case PASSWORD_BCRYPT :
                $cost = isset($options['cost']) ? $options['cost'] : 10;
                if ($cost != $info['options']['cost']) {
                    return true;
                }
                break;
        }
        return false;
    }

    /**
     * Verify a password against a hash using a timing attack resistant approach
     *
     * @param string $password The password to verify
     * @param string $hash     The hash to verify against
     *
     * @return boolean If the password matches the hash
     */
    public function password_verify($password, $hash) {
        if (!function_exists('crypt')) {
            trigger_error(""Crypt must be loaded for password_verify to function"", E_USER_WARNING);
            return false;
        }
        $ret = crypt($password, $hash);
        if (!is_string($ret) || strlen($ret) != strlen($hash) || strlen($ret) <= 13) {
            return false;
        }

        $status = 0;
        for ($i = 0; $i < strlen($ret); $i++) {
            $status |= (ord($ret[$i]) ^ ord($hash[$i]));
        }

        return $status === 0;
    }

}

","110116","<php><salt><password-hash><php-password-hash>","70","1","7","2019-09-22 19:46:02","30279440","1","36","575765","","2015-05-16 18:56:07","2015-05-16 18:32:46",""
"20764031","PHP salt and hash SHA256 for login password","I've made encrypting of the password in my register script and they are stored in the database, and I have to use them to login, so I would want to use the unencrypted ones to login. I've read some of the threads in here but nothing is helping me. How can I add it in my login.php? The salt is also stored in the database.
This is my register.php script for encrypting
$hash = hash('sha256', $password1);

function createSalt()
{
    $text = md5(uniqid(rand(), TRUE));
    return substr($text, 0, 3);
}

$salt = createSalt();
$password = hash('sha256', $salt . $hash);

and this is my login.php with season
//Create query
$qry=""SELECT * FROM member WHERE username='$username' AND password='$password'"";
$result=mysql_query($qry);

//Check whether the query was successful or not
if($result) {
    if(mysql_num_rows($result) > 0) {
        //Login Successful
        session_regenerate_id();
        $member = mysql_fetch_assoc($result);
        $_SESSION['SESS_MEMBER_ID'] = $member['id'];
        $_SESSION['SESS_FIRST_NAME'] = $member['username'];
        $_SESSION['SESS_LAST_NAME'] = $member['password'];
        session_write_close();
        header(""location: profile.php"");
        exit();
    }
    else {
        //Login failed
        //error message 
    }
else {
    die(""Query failed"");
}

","You can't do that because you can not know the salt at a precise time. Below, a code who works in theory (not tested for the syntaxe)
<?php
$password1 = $_POST['password'];
$salt      = 'hello_1m_@_SaLT';
$hashed    = hash('sha256', $password1 . $salt);
?>

When you insert :
$qry=""INSERT INTO member VALUES('$username', '$hashed')"";

And for retrieving user : 
$qry=""SELECT * FROM member WHERE username='$username' AND password='$hashed'"";

","100899","<php><mysql><hash><salt><sha256>","22","-2","6","2019-08-08 19:11:39","20764228","14","11","3127992","","2017-04-15 19:06:02","2013-12-24 16:34:37",""
"20764031","PHP salt and hash SHA256 for login password","I've made encrypting of the password in my register script and they are stored in the database, and I have to use them to login, so I would want to use the unencrypted ones to login. I've read some of the threads in here but nothing is helping me. How can I add it in my login.php? The salt is also stored in the database.
This is my register.php script for encrypting
$hash = hash('sha256', $password1);

function createSalt()
{
    $text = md5(uniqid(rand(), TRUE));
    return substr($text, 0, 3);
}

$salt = createSalt();
$password = hash('sha256', $salt . $hash);

and this is my login.php with season
//Create query
$qry=""SELECT * FROM member WHERE username='$username' AND password='$password'"";
$result=mysql_query($qry);

//Check whether the query was successful or not
if($result) {
    if(mysql_num_rows($result) > 0) {
        //Login Successful
        session_regenerate_id();
        $member = mysql_fetch_assoc($result);
        $_SESSION['SESS_MEMBER_ID'] = $member['id'];
        $_SESSION['SESS_FIRST_NAME'] = $member['username'];
        $_SESSION['SESS_LAST_NAME'] = $member['password'];
        session_write_close();
        header(""location: profile.php"");
        exit();
    }
    else {
        //Login failed
        //error message 
    }
else {
    die(""Query failed"");
}

","These examples are from php.net. Thanks to you, I also just learned about the new php hashing functions.
Read the php documentation to find out about the possibilities and best practices:
http://www.php.net/manual/en/function.password-hash.php
Save a password hash:
$options = [
    'cost' => 11,
];
// Get the password from post
$passwordFromPost = $_POST['password'];

$hash = password_hash($passwordFromPost, PASSWORD_BCRYPT, $options);

// Now insert it (with login or whatever) into your database, use mysqli or pdo!

Get the password hash:
// Get the password from the database and compare it to a variable (for example post)
$passwordFromPost = $_POST['password'];
$hashedPasswordFromDB = ...;

if (password_verify($passwordFromPost, $hashedPasswordFromDB)) {
    echo 'Password is valid!';
} else {
    echo 'Invalid password.';
}

","100899","<php><mysql><hash><salt><sha256>","22","42","6","2019-08-08 19:11:39","20764228","14","11","3127992","","2017-04-15 19:06:02","2013-12-24 16:34:37",""
"20764031","PHP salt and hash SHA256 for login password","I've made encrypting of the password in my register script and they are stored in the database, and I have to use them to login, so I would want to use the unencrypted ones to login. I've read some of the threads in here but nothing is helping me. How can I add it in my login.php? The salt is also stored in the database.
This is my register.php script for encrypting
$hash = hash('sha256', $password1);

function createSalt()
{
    $text = md5(uniqid(rand(), TRUE));
    return substr($text, 0, 3);
}

$salt = createSalt();
$password = hash('sha256', $salt . $hash);

and this is my login.php with season
//Create query
$qry=""SELECT * FROM member WHERE username='$username' AND password='$password'"";
$result=mysql_query($qry);

//Check whether the query was successful or not
if($result) {
    if(mysql_num_rows($result) > 0) {
        //Login Successful
        session_regenerate_id();
        $member = mysql_fetch_assoc($result);
        $_SESSION['SESS_MEMBER_ID'] = $member['id'];
        $_SESSION['SESS_FIRST_NAME'] = $member['username'];
        $_SESSION['SESS_LAST_NAME'] = $member['password'];
        session_write_close();
        header(""location: profile.php"");
        exit();
    }
    else {
        //Login failed
        //error message 
    }
else {
    die(""Query failed"");
}

","You couldn't login because you did't get proper solt text at login time.
There are two options, first is define static salt, second is if you want create dynamic salt than you have to store the salt somewhere (means in database) with associate with user.
Than you concatenate  user solt+password_hash string now with this you fire query with username in your database table.
","100899","<php><mysql><hash><salt><sha256>","22","0","6","2019-08-08 19:11:39","20764228","14","11","3127992","","2017-04-15 19:06:02","2013-12-24 16:34:37",""
"20764031","PHP salt and hash SHA256 for login password","I've made encrypting of the password in my register script and they are stored in the database, and I have to use them to login, so I would want to use the unencrypted ones to login. I've read some of the threads in here but nothing is helping me. How can I add it in my login.php? The salt is also stored in the database.
This is my register.php script for encrypting
$hash = hash('sha256', $password1);

function createSalt()
{
    $text = md5(uniqid(rand(), TRUE));
    return substr($text, 0, 3);
}

$salt = createSalt();
$password = hash('sha256', $salt . $hash);

and this is my login.php with season
//Create query
$qry=""SELECT * FROM member WHERE username='$username' AND password='$password'"";
$result=mysql_query($qry);

//Check whether the query was successful or not
if($result) {
    if(mysql_num_rows($result) > 0) {
        //Login Successful
        session_regenerate_id();
        $member = mysql_fetch_assoc($result);
        $_SESSION['SESS_MEMBER_ID'] = $member['id'];
        $_SESSION['SESS_FIRST_NAME'] = $member['username'];
        $_SESSION['SESS_LAST_NAME'] = $member['password'];
        session_write_close();
        header(""location: profile.php"");
        exit();
    }
    else {
        //Login failed
        //error message 
    }
else {
    die(""Query failed"");
}

","array hash_algos(void)

echo hash('sha384', 'Message to be hashed'.'salt');

Here is a link to reference http://php.net/manual/en/function.hash.php
","100899","<php><mysql><hash><salt><sha256>","22","1","6","2019-08-08 19:11:39","20764228","14","11","3127992","","2017-04-15 19:06:02","2013-12-24 16:34:37",""
"20764031","PHP salt and hash SHA256 for login password","I've made encrypting of the password in my register script and they are stored in the database, and I have to use them to login, so I would want to use the unencrypted ones to login. I've read some of the threads in here but nothing is helping me. How can I add it in my login.php? The salt is also stored in the database.
This is my register.php script for encrypting
$hash = hash('sha256', $password1);

function createSalt()
{
    $text = md5(uniqid(rand(), TRUE));
    return substr($text, 0, 3);
}

$salt = createSalt();
$password = hash('sha256', $salt . $hash);

and this is my login.php with season
//Create query
$qry=""SELECT * FROM member WHERE username='$username' AND password='$password'"";
$result=mysql_query($qry);

//Check whether the query was successful or not
if($result) {
    if(mysql_num_rows($result) > 0) {
        //Login Successful
        session_regenerate_id();
        $member = mysql_fetch_assoc($result);
        $_SESSION['SESS_MEMBER_ID'] = $member['id'];
        $_SESSION['SESS_FIRST_NAME'] = $member['username'];
        $_SESSION['SESS_LAST_NAME'] = $member['password'];
        session_write_close();
        header(""location: profile.php"");
        exit();
    }
    else {
        //Login failed
        //error message 
    }
else {
    die(""Query failed"");
}

","According to php.net the Salt option has been deprecated as of PHP 7.0.0, so you should use the salt that is generated by default and is far more simpler
Example for store the password:
$hashPassword = password_hash(""password"", PASSWORD_BCRYPT);
Example to verify the password:
$passwordCorrect = password_verify(""password"", $hashPassword);
","100899","<php><mysql><hash><salt><sha256>","22","3","6","2019-08-08 19:11:39","20764228","14","11","3127992","","2017-04-15 19:06:02","2013-12-24 16:34:37",""
"20764031","PHP salt and hash SHA256 for login password","I've made encrypting of the password in my register script and they are stored in the database, and I have to use them to login, so I would want to use the unencrypted ones to login. I've read some of the threads in here but nothing is helping me. How can I add it in my login.php? The salt is also stored in the database.
This is my register.php script for encrypting
$hash = hash('sha256', $password1);

function createSalt()
{
    $text = md5(uniqid(rand(), TRUE));
    return substr($text, 0, 3);
}

$salt = createSalt();
$password = hash('sha256', $salt . $hash);

and this is my login.php with season
//Create query
$qry=""SELECT * FROM member WHERE username='$username' AND password='$password'"";
$result=mysql_query($qry);

//Check whether the query was successful or not
if($result) {
    if(mysql_num_rows($result) > 0) {
        //Login Successful
        session_regenerate_id();
        $member = mysql_fetch_assoc($result);
        $_SESSION['SESS_MEMBER_ID'] = $member['id'];
        $_SESSION['SESS_FIRST_NAME'] = $member['username'];
        $_SESSION['SESS_LAST_NAME'] = $member['password'];
        session_write_close();
        header(""location: profile.php"");
        exit();
    }
    else {
        //Login failed
        //error message 
    }
else {
    die(""Query failed"");
}

","I think @Flo254 chained $salt to $password1and stored them to $hashed variable. $hashed variable goes inside INSERT query with $salt.
","100899","<php><mysql><hash><salt><sha256>","22","0","6","2019-08-08 19:11:39","20764228","14","11","3127992","","2017-04-15 19:06:02","2013-12-24 16:34:37",""
"9594125","Salt and hash a password in Python","This code is supposed to hash a password with a salt.  The salt and hashed password are being saved in the database.  The password itself is not.
Given the sensitive nature of the operation, I wanted to make sure everything was kosher.  
import hashlib
import base64
import uuid

password = 'test_password'
salt     = base64.urlsafe_b64encode(uuid.uuid4().bytes)


t_sha = hashlib.sha512()
t_sha.update(password+salt)
hashed_password =  base64.urlsafe_b64encode(t_sha.digest())

","EDIT: This answer is wrong. A single iteration of SHA512 is fast, which makes it inappropriate for use as a password hashing function. Use one of the other answers here instead.

Looks fine by me. However, I'm pretty sure you don't actually need base64. You could just do this:
import hashlib, uuid
salt = uuid.uuid4().hex
hashed_password = hashlib.sha512(password + salt).hexdigest()

If it doesn't create difficulties, you can get slightly more efficient storage in your database by storing the salt and hashed password as raw bytes rather than hex strings. To do so, replace hex with bytes and hexdigest with digest.
","98191","<python><authentication><hash><passwords><salt>","75","39","8","2019-10-17 10:36:23","9595108","5","31","1709587","","2019-10-17 10:36:23","2012-03-07 00:34:03",""
"9594125","Salt and hash a password in Python","This code is supposed to hash a password with a salt.  The salt and hashed password are being saved in the database.  The password itself is not.
Given the sensitive nature of the operation, I wanted to make sure everything was kosher.  
import hashlib
import base64
import uuid

password = 'test_password'
salt     = base64.urlsafe_b64encode(uuid.uuid4().bytes)


t_sha = hashlib.sha512()
t_sha.update(password+salt)
hashed_password =  base64.urlsafe_b64encode(t_sha.digest())

","The smart thing is not to write the crypto yourself but to use something like passlib: https://bitbucket.org/ecollins/passlib/wiki/Home
It is easy to mess up writing your crypto code in a secure way. The nasty thing is that with non crypto code you often immediately notice it when it is not working since your program crashes. While with crypto code you often only find out after it is to late and your data has been compromised. Therefor I think it is better to use a package written by someone else who is knowledgable about the subject and which is based on battle tested protocols.
Also passlib has some nice features which make it easy to use and also easy to upgrade to a newer password hashing protocol if an old protocol turns out to be broken.
Also just a single round of sha512 is more vulnerable to dictionary attacks. sha512 is designed to be fast and this is actually a bad thing when trying to store passwords securely. Other people have thought long and hard about all this sort issues so you better take advantage of this.
","98191","<python><authentication><hash><passwords><salt>","75","47","8","2019-10-17 10:36:23","9595108","5","31","1709587","","2019-10-17 10:36:23","2012-03-07 00:34:03",""
"9594125","Salt and hash a password in Python","This code is supposed to hash a password with a salt.  The salt and hashed password are being saved in the database.  The password itself is not.
Given the sensitive nature of the operation, I wanted to make sure everything was kosher.  
import hashlib
import base64
import uuid

password = 'test_password'
salt     = base64.urlsafe_b64encode(uuid.uuid4().bytes)


t_sha = hashlib.sha512()
t_sha.update(password+salt)
hashed_password =  base64.urlsafe_b64encode(t_sha.digest())

","For this to work in Python 3 you'll need to UTF-8 encode for example:
hashed_password = hashlib.sha512(password.encode('utf-8') + salt.encode('utf-8')).hexdigest()

Otherwise you'll get: 

Traceback (most recent call last):
    File """", line 1, in 
      hashed_password = hashlib.sha512(password + salt).hexdigest()
  TypeError: Unicode-objects must be encoded before hashing

","98191","<python><authentication><hash><passwords><salt>","75","19","8","2019-10-17 10:36:23","9595108","5","31","1709587","","2019-10-17 10:36:23","2012-03-07 00:34:03",""
"9594125","Salt and hash a password in Python","This code is supposed to hash a password with a salt.  The salt and hashed password are being saved in the database.  The password itself is not.
Given the sensitive nature of the operation, I wanted to make sure everything was kosher.  
import hashlib
import base64
import uuid

password = 'test_password'
salt     = base64.urlsafe_b64encode(uuid.uuid4().bytes)


t_sha = hashlib.sha512()
t_sha.update(password+salt)
hashed_password =  base64.urlsafe_b64encode(t_sha.digest())

","passlib seems to be useful if you need to use hashes stored by an existing system. If you have control of the format, use a modern hash like bcrypt or scrypt.  At this time, bcrypt seems to be much easier to use from python.
passlib supports bcrypt, and it recommends installing py-bcrypt as a backend: http://pythonhosted.org/passlib/lib/passlib.hash.bcrypt.html 
You could also use py-bcrypt directly if you don't want to install passlib. The readme has examples of basic use.
see also: How to use scrypt to generate hash for password and salt in Python
","98191","<python><authentication><hash><passwords><salt>","75","10","8","2019-10-17 10:36:23","9595108","5","31","1709587","","2019-10-17 10:36:23","2012-03-07 00:34:03",""
"9594125","Salt and hash a password in Python","This code is supposed to hash a password with a salt.  The salt and hashed password are being saved in the database.  The password itself is not.
Given the sensitive nature of the operation, I wanted to make sure everything was kosher.  
import hashlib
import base64
import uuid

password = 'test_password'
salt     = base64.urlsafe_b64encode(uuid.uuid4().bytes)


t_sha = hashlib.sha512()
t_sha.update(password+salt)
hashed_password =  base64.urlsafe_b64encode(t_sha.digest())

","Based on the other answers to this question, I've implemented a new approach using bcrypt.
Why use bcrypt
If I understand correctly, the argument to use bcrypt over SHA512 is that bcrypt is designed to be slow. bcrypt also has an option to adjust how slow you want it to be when generating the hashed password for the first time:
# The '12' is the number that dictates the 'slowness'
bcrypt.hashpw(password, bcrypt.gensalt( 12 ))

Slow is desirable because if a malicious party gets their hands on the table containing hashed passwords, then it is much more difficult to brute force them. 
Implementation
def get_hashed_password(plain_text_password):
    # Hash a password for the first time
    #   (Using bcrypt, the salt is saved into the hash itself)
    return bcrypt.hashpw(plain_text_password, bcrypt.gensalt())

def check_password(plain_text_password, hashed_password):
    # Check hashed password. Using bcrypt, the salt is saved into the hash itself
    return bcrypt.checkpw(plain_text_password, hashed_password)

Notes
I was able to install the library pretty easily in a linux system using:
pip install py-bcrypt

However, I had more trouble installing it on my windows systems. It appears to need a patch. See this Stack Overflow question: py-bcrypt installing on win 7 64bit python
","98191","<python><authentication><hash><passwords><salt>","75","52","8","2019-10-17 10:36:23","9595108","5","31","1709587","","2019-10-17 10:36:23","2012-03-07 00:34:03",""
"9594125","Salt and hash a password in Python","This code is supposed to hash a password with a salt.  The salt and hashed password are being saved in the database.  The password itself is not.
Given the sensitive nature of the operation, I wanted to make sure everything was kosher.  
import hashlib
import base64
import uuid

password = 'test_password'
salt     = base64.urlsafe_b64encode(uuid.uuid4().bytes)


t_sha = hashlib.sha512()
t_sha.update(password+salt)
hashed_password =  base64.urlsafe_b64encode(t_sha.digest())

","I don' want to resurrect an old thread, but... anyone who wants to use a modern up to date secure solution, use argon2.
https://pypi.python.org/pypi/argon2_cffi
It won the the password hashing competition. ( https://password-hashing.net/ ) It is easier to use than bcrypt, and it is more secure than bcrypt.
","98191","<python><authentication><hash><passwords><salt>","75","6","8","2019-10-17 10:36:23","9595108","5","31","1709587","","2019-10-17 10:36:23","2012-03-07 00:34:03",""
"9594125","Salt and hash a password in Python","This code is supposed to hash a password with a salt.  The salt and hashed password are being saved in the database.  The password itself is not.
Given the sensitive nature of the operation, I wanted to make sure everything was kosher.  
import hashlib
import base64
import uuid

password = 'test_password'
salt     = base64.urlsafe_b64encode(uuid.uuid4().bytes)


t_sha = hashlib.sha512()
t_sha.update(password+salt)
hashed_password =  base64.urlsafe_b64encode(t_sha.digest())

","Firstly import:-
import hashlib, uuid

Then change your code according to this in your method:
uname = request.form[""uname""]
pwd=request.form[""pwd""]
salt = hashlib.md5(pwd.encode())

Then pass this salt and uname in your database sql query, below login is a table name:
sql = ""insert into login values ('""+uname+""','""+email+""','""+salt.hexdigest()+""')""

","98191","<python><authentication><hash><passwords><salt>","75","0","8","2019-10-17 10:36:23","9595108","5","31","1709587","","2019-10-17 10:36:23","2012-03-07 00:34:03",""
"9594125","Salt and hash a password in Python","This code is supposed to hash a password with a salt.  The salt and hashed password are being saved in the database.  The password itself is not.
Given the sensitive nature of the operation, I wanted to make sure everything was kosher.  
import hashlib
import base64
import uuid

password = 'test_password'
salt     = base64.urlsafe_b64encode(uuid.uuid4().bytes)


t_sha = hashlib.sha512()
t_sha.update(password+salt)
hashed_password =  base64.urlsafe_b64encode(t_sha.digest())

","As of Python 3.4, the hashlib module in the standard library contains key derivation functions which are ""designed for secure password hashing"".
So use one of those, like hashlib.pbkdf2_hmac, with a salt generated using os.urandom:
from typing import Tuple
import os
import hashlib
import hmac

def hash_new_password(password: str) -> Tuple[bytes, bytes]:
    """"""
    Hash the provided password with a randomly-generated salt and return the
    salt and hash to store in the database.
    """"""
    salt = os.urandom(16)
    pw_hash = hashlib.pbkdf2_hmac('sha256', password.encode(), salt, 100000)
    return salt, pw_hash

def is_correct_password(salt: bytes, pw_hash: bytes, password: str) -> bool:
    """"""
    Given a previously-stored salt and hash, and a password provided by a user
    trying to log in, check whether the password is correct.
    """"""
    return hmac.compare_digest(
        pw_hash,
        hashlib.pbkdf2_hmac('sha256', password.encode(), salt, 100000)
    )

# Example usage:
salt, pw_hash = hash_new_password('correct horse battery staple')
assert is_correct_password(salt, pw_hash, 'correct horse battery staple')
assert not is_correct_password(salt, pw_hash, 'Tr0ub4dor&3')
assert not is_correct_password(salt, pw_hash, 'rosebud')

Note that:

The use of a 16-byte salt and 100000 iterations of PBKDF2 match the minimum numbers recommended in the Python docs. Further increasing the number of iterations will make your hashes slower to compute, and therefore more secure.
os.urandom always uses a cryptographically secure source of randomness
hmac.compare_digest, used in is_correct_password, is basically just the == operator for strings but without the ability to short-circuit, which makes it immune to timing attacks. That probably doesn't really provide any extra security value, but it doesn't hurt, either, so I've gone ahead and used it.

For theory on what makes a good password hash and a list of other functions appropriate for hashing passwords with, see https://security.stackexchange.com/q/211/29805.
","98191","<python><authentication><hash><passwords><salt>","75","4","8","2019-10-17 10:36:23","9595108","5","31","1709587","","2019-10-17 10:36:23","2012-03-07 00:34:03",""
"18142745","How do I generate a SALT in Java for Salted-Hash?","I've been looking around and the closest answer is : How to generate a random alpha-numeric string?
I want to follow this workflow according to this CrackStation tutorial: 

To Store a Password

Generate a long random salt using a CSPRNG.
Prepend the salt to the password and hash it with a standard cryptographic hash function such as SHA256.
Save both the salt and the hash in the user's database record.

To Validate a Password

Retrieve the user's salt and hash from the database.
Prepend the salt to the given password and hash it using the same hash function.
Compare the hash of the given password with the hash from the database. If they match, the password is correct. Otherwise, the password is incorrect.


I don't know how to generate a SALT. I figured out how to generate a hash using the MessageDigest. I tried using SecureRandom but nextByte method produces garbled code.
Edit: I don't know which answer to choose, they're too complicated for me, I have decided to use jBCrypt; jBCript is easy to use, does all the complex stuff behind the scenes. so I'll let the community vote up for the best answer.
","You were right regarding how you want to generate salt i.e. its nothing but a random number. For this particular case it would protect your system from possible Dictionary attacks. Now, for the second problem what you could do is instead of using UTF-8 encoding you may want to use Base64. Here, is a sample for generating a hash. I am using Apache Common Codecs for doing the base64 encoding you may select one of your own
public byte[] generateSalt() {
        SecureRandom random = new SecureRandom();
        byte bytes[] = new byte[20];
        random.nextBytes(bytes);
        return bytes;
    }

public String bytetoString(byte[] input) {
        return org.apache.commons.codec.binary.Base64.encodeBase64String(input);
    }

public byte[] getHashWithSalt(String input, HashingTechqniue technique, byte[] salt) throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance(technique.value);
        digest.reset();
        digest.update(salt);
        byte[] hashedBytes = digest.digest(stringToByte(input));
        return hashedBytes;
    }
public byte[] stringToByte(String input) {
        if (Base64.isBase64(input)) {
            return Base64.decodeBase64(input);

        } else {
            return Base64.encodeBase64(input.getBytes());
        }
    }

Here is some additional reference of the standard practice in password hashing directly from OWASP
","82211","<java><security><encryption><hash><salt>","41","11","4","2019-03-24 21:31:09","","8","34","-1","","2017-05-23 12:18:17","2013-08-09 08:24:15",""
"18142745","How do I generate a SALT in Java for Salted-Hash?","I've been looking around and the closest answer is : How to generate a random alpha-numeric string?
I want to follow this workflow according to this CrackStation tutorial: 

To Store a Password

Generate a long random salt using a CSPRNG.
Prepend the salt to the password and hash it with a standard cryptographic hash function such as SHA256.
Save both the salt and the hash in the user's database record.

To Validate a Password

Retrieve the user's salt and hash from the database.
Prepend the salt to the given password and hash it using the same hash function.
Compare the hash of the given password with the hash from the database. If they match, the password is correct. Otherwise, the password is incorrect.


I don't know how to generate a SALT. I figured out how to generate a hash using the MessageDigest. I tried using SecureRandom but nextByte method produces garbled code.
Edit: I don't know which answer to choose, they're too complicated for me, I have decided to use jBCrypt; jBCript is easy to use, does all the complex stuff behind the scenes. so I'll let the community vote up for the best answer.
","Inspired from this post and that post, I use this code to generate and verify hashed salted passwords. It only uses JDK provided classes, no external dependency.
The process is:

you create a salt with getNextSalt
you ask the user his password and use the hash method to generate a salted and hashed password. The method returns a byte[] which you can save as is in a database with the salt
to authenticate a user, you ask his password, retrieve the salt and hashed password from the database and use the isExpectedPassword method to check that the details match

/**
 * A utility class to hash passwords and check passwords vs hashed values. It uses a combination of hashing and unique
 * salt. The algorithm used is PBKDF2WithHmacSHA1 which, although not the best for hashing password (vs. bcrypt) is
 * still considered robust and <a href=""https://security.stackexchange.com/a/6415/12614""> recommended by NIST </a>.
 * The hashed value has 256 bits.
 */
public class Passwords {

  private static final Random RANDOM = new SecureRandom();
  private static final int ITERATIONS = 10000;
  private static final int KEY_LENGTH = 256;

  /**
   * static utility class
   */
  private Passwords() { }

  /**
   * Returns a random salt to be used to hash a password.
   *
   * @return a 16 bytes random salt
   */
  public static byte[] getNextSalt() {
    byte[] salt = new byte[16];
    RANDOM.nextBytes(salt);
    return salt;
  }

  /**
   * Returns a salted and hashed password using the provided hash.<br>
   * Note - side effect: the password is destroyed (the char[] is filled with zeros)
   *
   * @param password the password to be hashed
   * @param salt     a 16 bytes salt, ideally obtained with the getNextSalt method
   *
   * @return the hashed password with a pinch of salt
   */
  public static byte[] hash(char[] password, byte[] salt) {
    PBEKeySpec spec = new PBEKeySpec(password, salt, ITERATIONS, KEY_LENGTH);
    Arrays.fill(password, Character.MIN_VALUE);
    try {
      SecretKeyFactory skf = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
      return skf.generateSecret(spec).getEncoded();
    } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
      throw new AssertionError(""Error while hashing a password: "" + e.getMessage(), e);
    } finally {
      spec.clearPassword();
    }
  }

  /**
   * Returns true if the given password and salt match the hashed value, false otherwise.<br>
   * Note - side effect: the password is destroyed (the char[] is filled with zeros)
   *
   * @param password     the password to check
   * @param salt         the salt used to hash the password
   * @param expectedHash the expected hashed value of the password
   *
   * @return true if the given password and salt match the hashed value, false otherwise
   */
  public static boolean isExpectedPassword(char[] password, byte[] salt, byte[] expectedHash) {
    byte[] pwdHash = hash(password, salt);
    Arrays.fill(password, Character.MIN_VALUE);
    if (pwdHash.length != expectedHash.length) return false;
    for (int i = 0; i < pwdHash.length; i++) {
      if (pwdHash[i] != expectedHash[i]) return false;
    }
    return true;
  }

  /**
   * Generates a random password of a given length, using letters and digits.
   *
   * @param length the length of the password
   *
   * @return a random password
   */
  public static String generateRandomPassword(int length) {
    StringBuilder sb = new StringBuilder(length);
    for (int i = 0; i < length; i++) {
      int c = RANDOM.nextInt(62);
      if (c <= 9) {
        sb.append(String.valueOf(c));
      } else if (c < 36) {
        sb.append((char) ('a' + c - 10));
      } else {
        sb.append((char) ('A' + c - 36));
      }
    }
    return sb.toString();
  }
}

","82211","<java><security><encryption><hash><salt>","41","49","4","2019-03-24 21:31:09","","8","34","-1","","2017-05-23 12:18:17","2013-08-09 08:24:15",""
"18142745","How do I generate a SALT in Java for Salted-Hash?","I've been looking around and the closest answer is : How to generate a random alpha-numeric string?
I want to follow this workflow according to this CrackStation tutorial: 

To Store a Password

Generate a long random salt using a CSPRNG.
Prepend the salt to the password and hash it with a standard cryptographic hash function such as SHA256.
Save both the salt and the hash in the user's database record.

To Validate a Password

Retrieve the user's salt and hash from the database.
Prepend the salt to the given password and hash it using the same hash function.
Compare the hash of the given password with the hash from the database. If they match, the password is correct. Otherwise, the password is incorrect.


I don't know how to generate a SALT. I figured out how to generate a hash using the MessageDigest. I tried using SecureRandom but nextByte method produces garbled code.
Edit: I don't know which answer to choose, they're too complicated for me, I have decided to use jBCrypt; jBCript is easy to use, does all the complex stuff behind the scenes. so I'll let the community vote up for the best answer.
","Another version using SHA-3, I am using bouncycastle:
The interface:
public interface IPasswords {

    /**
     * Generates a random salt.
     *
     * @return a byte array with a 64 byte length salt.
     */
    byte[] getSalt64();

    /**
     * Generates a random salt
     *
     * @return a byte array with a 32 byte length salt.
     */
    byte[] getSalt32();

    /**
     * Generates a new salt, minimum must be 32 bytes long, 64 bytes even better.
     *
     * @param size the size of the salt
     * @return a random salt.
     */
    byte[] getSalt(final int size);

    /**
     * Generates a new hashed password
     *
     * @param password to be hashed
     * @param salt the randomly generated salt
     * @return a hashed password
     */
    byte[] hash(final String password, final byte[] salt);

    /**
     * Expected password
     *
     * @param password to be verified
     * @param salt the generated salt (coming from database)
     * @param hash the generated hash (coming from database)
     * @return true if password matches, false otherwise
     */
    boolean isExpectedPassword(final String password, final byte[] salt, final byte[] hash);

    /**
     * Generates a random password
     *
     * @param length desired password length
     * @return a random password
     */
    String generateRandomPassword(final int length);
}

The implementation:
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.Validate;
import org.apache.log4j.Logger;
import org.bouncycastle.jcajce.provider.digest.SHA3;

import java.io.Serializable;
import java.io.UnsupportedEncodingException;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

public final class Passwords implements IPasswords, Serializable {

    /*serialVersionUID*/
    private static final long serialVersionUID = 8036397974428641579L;
    private static final Logger LOGGER = Logger.getLogger(Passwords.class);
    private static final Random RANDOM = new SecureRandom();
    private static final int DEFAULT_SIZE = 64;
    private static final char[] symbols;

    static {
            final StringBuilder tmp = new StringBuilder();
            for (char ch = '0'; ch <= '9'; ++ch) {
                    tmp.append(ch);
            }
            for (char ch = 'a'; ch <= 'z'; ++ch) {
                    tmp.append(ch);
            }
            symbols = tmp.toString().toCharArray();
    }

    @Override public byte[] getSalt64() {
            return getSalt(DEFAULT_SIZE);
    }

    @Override public byte[] getSalt32() {
            return getSalt(32);
    }

    @Override public byte[] getSalt(int size) {
            final byte[] salt;
            if (size < 32) {
                    final String message = String.format(""Size < 32, using default of: %d"", DEFAULT_SIZE);
                    LOGGER.warn(message);
                    salt = new byte[DEFAULT_SIZE];
            } else {
                    salt = new byte[size];
            }
            RANDOM.nextBytes(salt);
            return salt;
    }

    @Override public byte[] hash(String password, byte[] salt) {

            Validate.notNull(password, ""Password must not be null"");
            Validate.notNull(salt, ""Salt must not be null"");

            try {
                    final byte[] passwordBytes = password.getBytes(""UTF-8"");
                    final byte[] all = ArrayUtils.addAll(passwordBytes, salt);
                    SHA3.DigestSHA3 md = new SHA3.Digest512();
                    md.update(all);
                    return md.digest();
            } catch (UnsupportedEncodingException e) {
                    final String message = String
                            .format(""Caught UnsupportedEncodingException e: <%s>"", e.getMessage());
                    LOGGER.error(message);
            }
            return new byte[0];
    }

    @Override public boolean isExpectedPassword(final String password, final byte[] salt, final byte[] hash) {

            Validate.notNull(password, ""Password must not be null"");
            Validate.notNull(salt, ""Salt must not be null"");
            Validate.notNull(hash, ""Hash must not be null"");

            try {
                    final byte[] passwordBytes = password.getBytes(""UTF-8"");
                    final byte[] all = ArrayUtils.addAll(passwordBytes, salt);

                    SHA3.DigestSHA3 md = new SHA3.Digest512();
                    md.update(all);
                    final byte[] digest = md.digest();
                    return Arrays.equals(digest, hash);
            }catch(UnsupportedEncodingException e){
                    final String message =
                            String.format(""Caught UnsupportedEncodingException e: <%s>"", e.getMessage());
                    LOGGER.error(message);
            }
            return false;


    }

    @Override public String generateRandomPassword(final int length) {

            if (length < 1) {
                    throw new IllegalArgumentException(""length must be greater than 0"");
            }

            final char[] buf = new char[length];
            for (int idx = 0; idx < buf.length; ++idx) {
                    buf[idx] = symbols[RANDOM.nextInt(symbols.length)];
            }
            return shuffle(new String(buf));
    }


    private String shuffle(final String input){
            final List<Character> characters = new ArrayList<Character>();
            for(char c:input.toCharArray()){
                    characters.add(c);
            }
            final StringBuilder output = new StringBuilder(input.length());
            while(characters.size()!=0){
                    int randPicker = (int)(Math.random()*characters.size());
                    output.append(characters.remove(randPicker));
            }
            return output.toString();
    }
}

The test cases:
public class PasswordsTest {

    private static final Logger LOGGER = Logger.getLogger(PasswordsTest.class);

    @Before
    public void setup(){
            BasicConfigurator.configure();
    }

    @Test
    public void testGeSalt() throws Exception {

            IPasswords passwords = new Passwords();
            final byte[] bytes = passwords.getSalt(0);
            int arrayLength = bytes.length;

            assertThat(""Expected length is"", arrayLength, is(64));
    }

    @Test
    public void testGeSalt32() throws Exception {
            IPasswords passwords = new Passwords();
            final byte[] bytes = passwords.getSalt32();
            int arrayLength = bytes.length;
            assertThat(""Expected length is"", arrayLength, is(32));
    }

    @Test
    public void testGeSalt64() throws Exception {
            IPasswords passwords = new Passwords();
            final byte[] bytes = passwords.getSalt64();
            int arrayLength = bytes.length;
            assertThat(""Expected length is"", arrayLength, is(64));
    }

    @Test
    public void testHash() throws Exception {
            IPasswords passwords = new Passwords();
            final byte[] hash = passwords.hash(""holacomoestas"", passwords.getSalt64());
            assertThat(""Array is not null"", hash, Matchers.notNullValue());
    }


    @Test
    public void testSHA3() throws UnsupportedEncodingException {
            SHA3.DigestSHA3 md = new SHA3.Digest256();
            md.update(""holasa"".getBytes(""UTF-8""));
            final byte[] digest = md.digest();
             assertThat(""expected digest is:"",digest,Matchers.notNullValue());
    }

    @Test
    public void testIsExpectedPasswordIncorrect() throws Exception {

            String password = ""givemebeer"";
            IPasswords passwords = new Passwords();

            final byte[] salt64 = passwords.getSalt64();
            final byte[] hash = passwords.hash(password, salt64);
            //The salt and the hash go to database.

            final boolean isPasswordCorrect = passwords.isExpectedPassword(""jfjdsjfsd"", salt64, hash);

            assertThat(""Password is not correct"", isPasswordCorrect, is(false));

    }

    @Test
    public void testIsExpectedPasswordCorrect() throws Exception {
            String password = ""givemebeer"";
            IPasswords passwords = new Passwords();
            final byte[] salt64 = passwords.getSalt64();
            final byte[] hash = passwords.hash(password, salt64);
            //The salt and the hash go to database.
            final boolean isPasswordCorrect = passwords.isExpectedPassword(""givemebeer"", salt64, hash);
            assertThat(""Password is correct"", isPasswordCorrect, is(true));
    }

    @Test
    public void testGenerateRandomPassword() throws Exception {
            IPasswords passwords = new Passwords();
            final String randomPassword = passwords.generateRandomPassword(10);
            LOGGER.info(randomPassword);
            assertThat(""Random password is not null"", randomPassword, Matchers.notNullValue());
    }
}

pom.xml (only dependencies):
<dependencies>
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.12</version>
        <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>org.testng</groupId>
        <artifactId>testng</artifactId>
        <version>6.1.1</version>
        <scope>test</scope>
    </dependency>

    <dependency>
        <groupId>org.hamcrest</groupId>
        <artifactId>hamcrest-all</artifactId>
        <version>1.3</version>
        <scope>test</scope>
    </dependency>

    <dependency>
        <groupId>log4j</groupId>
        <artifactId>log4j</artifactId>
        <version>1.2.17</version>
    </dependency>

    <dependency>
        <groupId>org.bouncycastle</groupId>
        <artifactId>bcprov-jdk15on</artifactId>
        <version>1.51</version>
        <type>jar</type>
    </dependency>


    <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-lang3</artifactId>
        <version>3.3.2</version>
    </dependency>


</dependencies>

","82211","<java><security><encryption><hash><salt>","41","4","4","2019-03-24 21:31:09","","8","34","-1","","2017-05-23 12:18:17","2013-08-09 08:24:15",""
"18142745","How do I generate a SALT in Java for Salted-Hash?","I've been looking around and the closest answer is : How to generate a random alpha-numeric string?
I want to follow this workflow according to this CrackStation tutorial: 

To Store a Password

Generate a long random salt using a CSPRNG.
Prepend the salt to the password and hash it with a standard cryptographic hash function such as SHA256.
Save both the salt and the hash in the user's database record.

To Validate a Password

Retrieve the user's salt and hash from the database.
Prepend the salt to the given password and hash it using the same hash function.
Compare the hash of the given password with the hash from the database. If they match, the password is correct. Otherwise, the password is incorrect.


I don't know how to generate a SALT. I figured out how to generate a hash using the MessageDigest. I tried using SecureRandom but nextByte method produces garbled code.
Edit: I don't know which answer to choose, they're too complicated for me, I have decided to use jBCrypt; jBCript is easy to use, does all the complex stuff behind the scenes. so I'll let the community vote up for the best answer.
","Here's my solution, i would love anyone's opinion on this, it's simple for beginners
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import java.util.Base64;
import java.util.Base64.Encoder;
import java.util.Scanner;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;

public class Cryptography {

    public static void main(String[] args) throws NoSuchAlgorithmException, InvalidKeySpecException {
        Encoder encoder = Base64.getUrlEncoder().withoutPadding();
        System.out.print(""Password: "");
        String strPassword = new Scanner(System.in).nextLine();
        byte[] bSalt = Salt();
        String strSalt = encoder.encodeToString(bSalt); // Byte to String
        System.out.println(""Salt: "" + strSalt);
        System.out.println(""String to be hashed: "" + strPassword + strSalt);
        String strHash = encoder.encodeToString(Hash(strPassword, bSalt)); // Byte to String
        System.out.println(""Hashed value (Password + Salt value): "" + strHash);
    }

    private static byte[] Salt() {
        SecureRandom random = new SecureRandom();
        byte salt[] = new byte[6];
        random.nextBytes(salt);
        return salt;
    }

    private static byte[] Hash(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
        KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 65536, 128);
        SecretKeyFactory factory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
        byte[] hash = factory.generateSecret(spec).getEncoded();
        return hash;
    }

}

You can validate by just decoding the strSalt and using the same hash method:
public static void main(String[] args) throws NoSuchAlgorithmException, InvalidKeySpecException {
        Encoder encoder = Base64.getUrlEncoder().withoutPadding();
        Decoder decoder = Base64.getUrlDecoder();
        System.out.print(""Password: "");
        String strPassword = new Scanner(System.in).nextLine();
        String strSalt = ""Your Salt String Here"";
        byte[] bSalt = decoder.decode(strSalt); // String to Byte
        System.out.println(""Salt: "" + strSalt);
        System.out.println(""String to be hashed: "" + strPassword + strSalt);
        String strHash = encoder.encodeToString(Hash(strPassword, bSalt)); // Byte to String
        System.out.println(""Hashed value (Password + Salt value): "" + strHash);
    }

","82211","<java><security><encryption><hash><salt>","41","-1","4","2019-03-24 21:31:09","","8","34","-1","","2017-05-23 12:18:17","2013-08-09 08:24:15",""
"1581610","How can I store my users' passwords safely?","How much more safe is this than plain MD5? I've just started looking into password security. I'm pretty new to PHP.
$salt = 'csdnfgksdgojnmfnb';

$password = md5($salt.$_POST['password']);
$result = mysql_query(""SELECT id FROM users
                       WHERE username = '"".mysql_real_escape_string($_POST['username']).""'
                       AND password = '$password'"");

if (mysql_num_rows($result) < 1) {
    /* Access denied */
    echo ""The username or password you entered is incorrect."";
} 
else {
    $_SESSION['id'] = mysql_result($result, 0, 'id');
    #header(""Location: ./"");
    echo ""Hello $_SESSION[id]!"";
}

","Your users will be much safer if you used parameterized queries instead of concatenating SQL statements. And the salt should be unique for each user and should be stored along with the password hash.
","62607","<php><security><passwords><salt><password-hash>","168","28","6","2019-10-28 18:58:07","","3","163","2224584","","2016-02-15 08:23:13","2009-10-17 06:54:22",""
"1581610","How can I store my users' passwords safely?","How much more safe is this than plain MD5? I've just started looking into password security. I'm pretty new to PHP.
$salt = 'csdnfgksdgojnmfnb';

$password = md5($salt.$_POST['password']);
$result = mysql_query(""SELECT id FROM users
                       WHERE username = '"".mysql_real_escape_string($_POST['username']).""'
                       AND password = '$password'"");

if (mysql_num_rows($result) < 1) {
    /* Access denied */
    echo ""The username or password you entered is incorrect."";
} 
else {
    $_SESSION['id'] = mysql_result($result, 0, 'id');
    #header(""Location: ./"");
    echo ""Hello $_SESSION[id]!"";
}

","That's fine with me. Mr Atwood wrote about the strength of MD5 against rainbow tables, and basically with a long salt like that you're sitting pretty (though some random punctuation/numbers, it could improve it).
You could also look at SHA-1, which seems to be getting more popular these days.
","62607","<php><security><passwords><salt><password-hash>","168","0","6","2019-10-28 18:58:07","","3","163","2224584","","2016-02-15 08:23:13","2009-10-17 06:54:22",""
"1581610","How can I store my users' passwords safely?","How much more safe is this than plain MD5? I've just started looking into password security. I'm pretty new to PHP.
$salt = 'csdnfgksdgojnmfnb';

$password = md5($salt.$_POST['password']);
$result = mysql_query(""SELECT id FROM users
                       WHERE username = '"".mysql_real_escape_string($_POST['username']).""'
                       AND password = '$password'"");

if (mysql_num_rows($result) < 1) {
    /* Access denied */
    echo ""The username or password you entered is incorrect."";
} 
else {
    $_SESSION['id'] = mysql_result($result, 0, 'id');
    #header(""Location: ./"");
    echo ""Hello $_SESSION[id]!"";
}

","A better way would be for each user to have a unique salt.
The benefit of having a salt is that it makes it harder for an attacker to pre-generate the MD5 signature of every dictionary word.  But if an attacker learns that you have a fixed salt, they could then pre-generate the MD5 signature of every dictionary word prefixed by your fixed salt.
A better way is each time a user changes their password, your system generate a random salt and store that salt along with the user record.  It makes it a bit more expensive to check the password (since you need to look up the salt before you can generate the MD5 signature) but it makes it much more difficult for an attacker to pre-generate MD5's.
","62607","<php><security><passwords><salt><password-hash>","168","11","6","2019-10-28 18:58:07","","3","163","2224584","","2016-02-15 08:23:13","2009-10-17 06:54:22",""
"1581610","How can I store my users' passwords safely?","How much more safe is this than plain MD5? I've just started looking into password security. I'm pretty new to PHP.
$salt = 'csdnfgksdgojnmfnb';

$password = md5($salt.$_POST['password']);
$result = mysql_query(""SELECT id FROM users
                       WHERE username = '"".mysql_real_escape_string($_POST['username']).""'
                       AND password = '$password'"");

if (mysql_num_rows($result) < 1) {
    /* Access denied */
    echo ""The username or password you entered is incorrect."";
} 
else {
    $_SESSION['id'] = mysql_result($result, 0, 'id');
    #header(""Location: ./"");
    echo ""Hello $_SESSION[id]!"";
}

","The easiest way to get your password storage scheme secure is by using a standard library.
Because security tends to be a lot more complicated and with more invisible screw up possibilities than most programmers could tackle alone, using a standard library is almost always easiest and most secure (if not the only) available option.

The new PHP password API (5.5.0+)
If you are using PHP version 5.5.0 or newer, you can use the new simplified password hashing API
Example of code using PHP's password API:
<?php
// $hash is what you would store in your database
$hash = password_hash($_POST['password'], PASSWORD_DEFAULT, ['cost' => 12]);

// $hash would be the $hash (above) stored in your database for this user
$checked = password_verify($_POST['password'], $hash);
if ($checked) {
    echo 'password correct';
} else {
    echo 'wrong credentials';
}

(In case you are still using legacy 5.3.7 or newer you can install ircmaxell/password_compat to have access to the build-in functions)

Improving upon salted hashes: add pepper
If you want extra security, the security folks now (2017) recommend adding a 'pepper' to the (automatically) salted password hashes. 
There is a simple, drop in class that securely implements this pattern, I recommend: 
Netsilik/PepperedPasswords 
(github).
It comes with a MIT License, so you can use it however you want, even in proprietary projects.
Example of code using Netsilik/PepperedPasswords:
<?php
use Netsilik/Lib/PepperedPasswords;

// Some long, random, binary string, encoded as hexadecimal; stored in your configuration (NOT in your Database, as that would defeat the entire purpose of the pepper).
$config['pepper'] = hex2bin('012345679ABCDEF012345679ABCDEF012345679ABCDEF012345679ABCDEF');

$hasher = new PepperedPasswords($config['pepper']);

// $hash is what you would store in your database
$hash = $hasher->hash($_POST['password']);

// $hash would be the $hash (above) stored in your database for this user
$checked = $hasher->verify($_POST['password'], $hash);
if ($checked) {
    echo 'password correct';
} else {
    echo 'wrong credentials';
}


The OLD standard library

Please note: you should not be needing this anymore! This is only here for historical purposes.

Take a look at: Portable PHP password hashing framework: phpass and make sure you use the CRYPT_BLOWFISH algorithm if at all possible.
Example of code using phpass (v0.2):
<?php
require('PasswordHash.php');

$pwdHasher = new PasswordHash(8, FALSE);

// $hash is what you would store in your database
$hash = $pwdHasher->HashPassword( $password );

// $hash would be the $hash (above) stored in your database for this user
$checked = $pwdHasher->CheckPassword($password, $hash);
if ($checked) {
    echo 'password correct';
} else {
    echo 'wrong credentials';
}

PHPass has been implemented in some quite well known projects:

phpBB3
WordPress 2.5+ as well as bbPress
the Drupal 7 release, (module available for Drupal 5 & 6)
others

The good thing is that you do not need to worry about the details, those details have been programmed by people with experience and reviewed by many folks on the internet.
For more information on password storage schemes, read Jeff`s blog post: You're Probably Storing Passwords Incorrectly
Whatever you do if you go for the 'I'll do it myself, thank you' approach, do not use MD5 or SHA1 anymore. They are nice hashing algorithm, but considered broken for security purposes.
Currently, using crypt, with CRYPT_BLOWFISH is the best practice.
CRYPT_BLOWFISH in PHP is an implementation of the Bcrypt hash. Bcrypt is based on the Blowfish block cipher, making use of it's expensive key setup to slow the algorithm down.
","62607","<php><security><passwords><salt><password-hash>","168","266","6","2019-10-28 18:58:07","","3","163","2224584","","2016-02-15 08:23:13","2009-10-17 06:54:22",""
"1581610","How can I store my users' passwords safely?","How much more safe is this than plain MD5? I've just started looking into password security. I'm pretty new to PHP.
$salt = 'csdnfgksdgojnmfnb';

$password = md5($salt.$_POST['password']);
$result = mysql_query(""SELECT id FROM users
                       WHERE username = '"".mysql_real_escape_string($_POST['username']).""'
                       AND password = '$password'"");

if (mysql_num_rows($result) < 1) {
    /* Access denied */
    echo ""The username or password you entered is incorrect."";
} 
else {
    $_SESSION['id'] = mysql_result($result, 0, 'id');
    #header(""Location: ./"");
    echo ""Hello $_SESSION[id]!"";
}

","With PHP 5.5 (what I describe is available to even earlier versions, see below) around the corner I'd like to suggest to use its new, built-in solution: password_hash() and password_verify(). It provides several options in order to achieve the level of password security you need (for example by specifying a ""cost"" parameter through the $options array)
<?php
var_dump(password_hash(""my-secret-password"", PASSWORD_DEFAULT));

$options = array(
    'cost' => 7, // this is the number of rounds for bcrypt
    // 'salt' => 'TphfsM82o1uEKlfP9vf1f', // you could specify a salt but it is not recommended
);
var_dump(password_hash(""my-secret-password"", PASSWORD_BCRYPT, $options));
?>

will return
string(60) ""$2y$10$w2LxXdIcqJpD6idFTNn.eeZbKesdu5y41ksL22iI8C4/6EweI7OK.""
string(60) ""$2y$07$TphfsM82o1uEKlfP9vf1fOKohBqGVXOJEmnUtQu7Y1UMft1R4D3d.""

As you might see, the string contains the salt as well as the cost that was specified in the options. It also contains the algorithm used.
Therefore, when checking the password (for example when the user logs in), when using the complimentary password_verify() function it will extract the necessary crypto parameters from the password hash itself.
When not specifying a salt, the generated password hash will be different upon every call of password_hash() because the salt is generated randomly. Therefore comparing a previous hash with a newly generated one will fail, even for a correct password.
Verifying works like this:
var_dump(password_verify(""my-secret-password"", '$2y$10$BjHJbMCNWIJq7xiAeyFaHOGaO0jjNoE11e0YAer6Zu01OZHN/gk6K'));
var_dump(password_verify(""wrong-password"", '$2y$10$BjHJbMCNWIJq7xiAeyFaHOGaO0jjNoE11e0YAer6Zu01OZHN/gk6K'));

var_dump(password_verify(""my-secret-password"", '$2y$07$TphfsM82o1uEKlfP9vf1fOKohBqGVXOJEmnUtQu7Y1UMft1R4D3d.'));
var_dump(password_verify(""wrong-password"", '$2y$07$TphfsM82o1uEKlfP9vf1fOKohBqGVXOJEmnUtQu7Y1UMft1R4D3d.'));

I hope that providing these built-in functions will soon provide better password security in case of data theft, as it reduces the amount of thought the programmer has to put into a proper implementation.
There is a small library (one PHP file) that will give you PHP 5.5's password_hash in PHP 5.3.7+: https://github.com/ircmaxell/password_compat
","62607","<php><security><passwords><salt><password-hash>","168","11","6","2019-10-28 18:58:07","","3","163","2224584","","2016-02-15 08:23:13","2009-10-17 06:54:22",""
"1581610","How can I store my users' passwords safely?","How much more safe is this than plain MD5? I've just started looking into password security. I'm pretty new to PHP.
$salt = 'csdnfgksdgojnmfnb';

$password = md5($salt.$_POST['password']);
$result = mysql_query(""SELECT id FROM users
                       WHERE username = '"".mysql_real_escape_string($_POST['username']).""'
                       AND password = '$password'"");

if (mysql_num_rows($result) < 1) {
    /* Access denied */
    echo ""The username or password you entered is incorrect."";
} 
else {
    $_SESSION['id'] = mysql_result($result, 0, 'id');
    #header(""Location: ./"");
    echo ""Hello $_SESSION[id]!"";
}

","I want to add:

Don't limit users passwords by length

For compatibility with old systems often set a limit for the maximum length of the password. This is a bad security policy: if you set restriction, set it only for the minimum length of passwords.

Don't send user passwords via email

For recovering a forgotten password you should send the address by which user can change the password.

Update the hashes of users passwords

The password hash may be out of date (parameters of the algorithm may be updated). By using the function password_needs_rehash() you can check it out.
","62607","<php><security><passwords><salt><password-hash>","168","0","6","2019-10-28 18:58:07","","3","163","2224584","","2016-02-15 08:23:13","2009-10-17 06:54:22",""
"184112","What is the optimal length for user password salt?","Any salt at all will obviously help when salting and hashing a user's password.  Are there any best practices for how long the salt should be?  I'll be storing the salt in my user table, so I would like the best tradeoff between storage size and security.  Is a random 10 character salt enough? Or do I need something longer?
","Currently accepted standards for hashing passwords create a new 16 character long salt for every password and store the salt with the password hash.
Of course proper cryptographic care to create really random salt should be taken.
","61436","<encryption><hash><salt>","125","34","5","2016-09-27 18:26:09","","5","31","37298","","2011-02-03 21:04:56","2008-10-08 18:20:25","2018-06-04 08:13:19"
"184112","What is the optimal length for user password salt?","Any salt at all will obviously help when salting and hashing a user's password.  Are there any best practices for how long the salt should be?  I'll be storing the salt in my user table, so I would like the best tradeoff between storage size and security.  Is a random 10 character salt enough? Or do I need something longer?
","Edit: My below answer answers the question as asked, but the ""real"" answer is: just use bcrypt, scrypt, or Argon2. If you're asking questions like this, you're almost certainly using tools at too low a level.
Honestly, there's no defensible reason not to have the salt be the same exact length as the hashed password. If you're using SHA-256, then you have a 256-bit hash. There's no reason not to use a 256-bit salt.
More than 256 bits won't net you any improvement in security, mathematically. But going with a shorter salt may always end up with a situation where a rainbow table catches up to your salt length -- especially with shorter salts.
","61436","<encryption><hash><salt>","125","24","5","2016-09-27 18:26:09","","5","31","37298","","2011-02-03 21:04:56","2008-10-08 18:20:25","2018-06-04 08:13:19"
"184112","What is the optimal length for user password salt?","Any salt at all will obviously help when salting and hashing a user's password.  Are there any best practices for how long the salt should be?  I'll be storing the salt in my user table, so I would like the best tradeoff between storage size and security.  Is a random 10 character salt enough? Or do I need something longer?
","Most of these answers are a bit misguided and demonstrate a confusion between salts and cryptographic keys. The purpose of including salts is to modify the function used to hash each user's password so that each stored password hash will have to be attacked individually. The only security requirement is that they are unique per user, there is no benefit in them being unpredictable or difficult to guess. 
Salts only need to be long enough so that each user's salt will be unique. Random 64-bit salts are very unlikely to ever repeat even with a billion registered users, so this should be fine. A singly repeated salt is a relatively minor security concern, it allows an attacker to search two accounts at once but in the aggregate won't speed up the search much on the whole database. Even 32-bit salts are acceptable for most purposes, it will in the worst case speed an attacker's search by about 58%. The cost of increasing salts beyond 64 bits isn't high but there is no security reason to do so.
There is some benefit to also using a site-wide salt on top of the per-user salt, this will prevent possible collisions with password hashes stored at other sites, and prevent the use of general-purpose rainbow tables, although even 32 bits of salt is enough to make rainbow tables an impractical attack.
Even simpler-and developers always overlook this-if you have unique user IDs or login names, those serve perfectly fine as a salt. If you do this, you should add a site-wide salt to ensure you don't overlap with users of another system who had the same bright idea.
","61436","<encryption><hash><salt>","125","67","5","2016-09-27 18:26:09","","5","31","37298","","2011-02-03 21:04:56","2008-10-08 18:20:25","2018-06-04 08:13:19"
"184112","What is the optimal length for user password salt?","Any salt at all will obviously help when salting and hashing a user's password.  Are there any best practices for how long the salt should be?  I'll be storing the salt in my user table, so I would like the best tradeoff between storage size and security.  Is a random 10 character salt enough? Or do I need something longer?
","Wikipedia:

The SHA2-crypt and bcrypt methods—used in Linux, BSD Unixes, and
  Solaris—have salts of 128 bits. These larger salt values make
  precomputation attacks for almost any length of password infeasible
  against these systems for the foreseeable future.

128-bit (16-byte) salt will be enough. You can represent it as a sequence of 128 / 4 = 32 hexadecimal digits.
","61436","<encryption><hash><salt>","125","7","5","2016-09-27 18:26:09","","5","31","37298","","2011-02-03 21:04:56","2008-10-08 18:20:25","2018-06-04 08:13:19"
"184112","What is the optimal length for user password salt?","Any salt at all will obviously help when salting and hashing a user's password.  Are there any best practices for how long the salt should be?  I'll be storing the salt in my user table, so I would like the best tradeoff between storage size and security.  Is a random 10 character salt enough? Or do I need something longer?
","One answer might be to use as size of salt the value that the hash you are going to use provides in term of security. 
E.g. If you are going to use SHA-512 use 256 bit salt since the security provided by SHA-512 is 256 bit.
","61436","<encryption><hash><salt>","125","2","5","2016-09-27 18:26:09","","5","31","37298","","2011-02-03 21:04:56","2008-10-08 18:20:25","2018-06-04 08:13:19"
"4099333","How to generate a good salt - Is my function secure enough?","Here's the function I'm using to generate random salts:
function generateRandomString($nbLetters){
    $randString="""";
    $charUniverse=""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"";
    for($i=0; $i<$nbLetters; $i++){
       $randInt=rand(0,61);
        $randChar=$charUniverse[$randInt];
        $randString=$randomString.$randChar;
    }
    return $randomString;
}

This is for a non commercial website.  It's only used to generate the salt (to be stored in the db and used along with the user submitted pw for hashing).
Is this appropriate?  Should I use a larger subset of characters, and if so is there an easy way to do that in PHP?
","If you are hashing passwords, you should use a modern hashing algorithm that does not require you to generate your own salt. Using weak hashing algorithms presents a danger to both you and your users. My original answer was written eight years ago. Times have changed, and password hashing is a lot easier now. 
You should always use built in functions to hash/check passwords. Using your own algorithms at any point introduces a huge amount of unnecessary risk.
For PHP, consider using password_hash(), with the PASSWORD_BCRYPT algorithm. There is no need to provide your own salt.
Below is my original answer, for posterity:


Warning: The following implementation does not produce an unpredictable salt, as per the documentation for uniqid.

From the php sha1 page:
$salt = uniqid(mt_rand(), true);

This looks simpler, and more effective (since each is unique) than what you have proposed.

","54930","<php><security><salt>","38","43","11","2018-05-30 09:50:43","4099349","0","8","229044","","2010-11-04 17:44:57","2010-11-04 17:18:35",""
"4099333","How to generate a good salt - Is my function secure enough?","Here's the function I'm using to generate random salts:
function generateRandomString($nbLetters){
    $randString="""";
    $charUniverse=""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"";
    for($i=0; $i<$nbLetters; $i++){
       $randInt=rand(0,61);
        $randChar=$charUniverse[$randInt];
        $randString=$randomString.$randChar;
    }
    return $randomString;
}

This is for a non commercial website.  It's only used to generate the salt (to be stored in the db and used along with the user submitted pw for hashing).
Is this appropriate?  Should I use a larger subset of characters, and if so is there an easy way to do that in PHP?
","Replace rand(0,61) with mt_rand(0, 61) and you should be fine (Since mt_rand is better at producing random numbers)...  
But more important than strength of the salt is the way you hash it.  If you have a great salt routine, but only do md5($pass.$salt), you're throwing away the salt.  I personally recommend stretching the hash... For example:
function getSaltedHash($password, $salt) {
    $hash = $password . $salt;
    for ($i = 0; $i < 50; $i++) {
        $hash = hash('sha512', $password . $hash . $salt);
    }
    return $hash;
}

For more information on hash stretching, check out this SO answer...
","54930","<php><security><salt>","38","4","11","2018-05-30 09:50:43","4099349","0","8","229044","","2010-11-04 17:44:57","2010-11-04 17:18:35",""
"4099333","How to generate a good salt - Is my function secure enough?","Here's the function I'm using to generate random salts:
function generateRandomString($nbLetters){
    $randString="""";
    $charUniverse=""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"";
    for($i=0; $i<$nbLetters; $i++){
       $randInt=rand(0,61);
        $randChar=$charUniverse[$randInt];
        $randString=$randomString.$randChar;
    }
    return $randomString;
}

This is for a non commercial website.  It's only used to generate the salt (to be stored in the db and used along with the user submitted pw for hashing).
Is this appropriate?  Should I use a larger subset of characters, and if so is there an easy way to do that in PHP?
","If you're on Linux, /dev/urandom is probably your best source of randomness. It's supplied by the OS itself, so it's guaranteed to be much more reliable than any PHP built-in function.
$fp = fopen('/dev/urandom', 'r');
$randomString = fread($fp, 32);
fclose($fp);

This will give you 32 bytes of random blob. You'll probably want to pass this through something like base64_encode() to make it legible. No need to juggle characters yourself.
Edit 2014: In PHP 5.3 and above, openssl_random_pseudo_bytes() is the easiest way to get a bunch of random bytes. On *nix systems, it uses /dev/urandom behind the scenes. On Windows systems, it uses a different algorithm that is built into the OpenSSL library.
Related: https://security.stackexchange.com/questions/26206
Related: should i use urandom or openssl_random_pseudo_bytes?
","54930","<php><security><salt>","38","18","11","2018-05-30 09:50:43","4099349","0","8","229044","","2010-11-04 17:44:57","2010-11-04 17:18:35",""
"4099333","How to generate a good salt - Is my function secure enough?","Here's the function I'm using to generate random salts:
function generateRandomString($nbLetters){
    $randString="""";
    $charUniverse=""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"";
    for($i=0; $i<$nbLetters; $i++){
       $randInt=rand(0,61);
        $randChar=$charUniverse[$randInt];
        $randString=$randomString.$randChar;
    }
    return $randomString;
}

This is for a non commercial website.  It's only used to generate the salt (to be stored in the db and used along with the user submitted pw for hashing).
Is this appropriate?  Should I use a larger subset of characters, and if so is there an easy way to do that in PHP?
","I think that a very good salt for example is the user name (if you are talking about pw hashing and the user name doesn't change.)
You don't need to generate anything and don't need to store further data.
","54930","<php><security><salt>","38","1","11","2018-05-30 09:50:43","4099349","0","8","229044","","2010-11-04 17:44:57","2010-11-04 17:18:35",""
"4099333","How to generate a good salt - Is my function secure enough?","Here's the function I'm using to generate random salts:
function generateRandomString($nbLetters){
    $randString="""";
    $charUniverse=""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"";
    for($i=0; $i<$nbLetters; $i++){
       $randInt=rand(0,61);
        $randChar=$charUniverse[$randInt];
        $randString=$randomString.$randChar;
    }
    return $randomString;
}

This is for a non commercial website.  It's only used to generate the salt (to be stored in the db and used along with the user submitted pw for hashing).
Is this appropriate?  Should I use a larger subset of characters, and if so is there an easy way to do that in PHP?
","I would take advice from another answer and use mt_rand(0, 61), because the Mersenne Twister produces better entropy.
Additionally, your function is really two parts: generating random $nbLetters digits and encoding that in base62.  This will make things much clearer to a maintenance programmer (maybe you!) who stumbles across it a few years down the road:
// In a class somewhere
private $chars = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"";

private function getBase62Char($num) {
    return $chars[$num];
}

public function generateRandomString($nbLetters){
    $randString="""";

    for($i=0; $i < $nbLetters; $i++){
        $randChar = getBase62Char(mt_rand(0,61));
        $randString .= $randChar;
    }

    return $randomString;
}

","54930","<php><security><salt>","38","4","11","2018-05-30 09:50:43","4099349","0","8","229044","","2010-11-04 17:44:57","2010-11-04 17:18:35",""
"4099333","How to generate a good salt - Is my function secure enough?","Here's the function I'm using to generate random salts:
function generateRandomString($nbLetters){
    $randString="""";
    $charUniverse=""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"";
    for($i=0; $i<$nbLetters; $i++){
       $randInt=rand(0,61);
        $randChar=$charUniverse[$randInt];
        $randString=$randomString.$randChar;
    }
    return $randomString;
}

This is for a non commercial website.  It's only used to generate the salt (to be stored in the db and used along with the user submitted pw for hashing).
Is this appropriate?  Should I use a larger subset of characters, and if so is there an easy way to do that in PHP?
","A fairly simple technique:
$a = array('a', 'b', ...., 'A', 'B', ..., '9');
shuffle($a);
$salt = substr(implode($a), 0, 2);  // or whatever sized salt is wanted

Unlike uniqid() it generates a random result.
","54930","<php><security><salt>","38","1","11","2018-05-30 09:50:43","4099349","0","8","229044","","2010-11-04 17:44:57","2010-11-04 17:18:35",""
"4099333","How to generate a good salt - Is my function secure enough?","Here's the function I'm using to generate random salts:
function generateRandomString($nbLetters){
    $randString="""";
    $charUniverse=""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"";
    for($i=0; $i<$nbLetters; $i++){
       $randInt=rand(0,61);
        $randChar=$charUniverse[$randInt];
        $randString=$randomString.$randChar;
    }
    return $randomString;
}

This is for a non commercial website.  It's only used to generate the salt (to be stored in the db and used along with the user submitted pw for hashing).
Is this appropriate?  Should I use a larger subset of characters, and if so is there an easy way to do that in PHP?
","I use this: 
$salt = base64_encode(mcrypt_create_iv(PBKDF2_SALT_BYTES, MCRYPT_DEV_URANDOM));

","54930","<php><security><salt>","38","1","11","2018-05-30 09:50:43","4099349","0","8","229044","","2010-11-04 17:44:57","2010-11-04 17:18:35",""
"4099333","How to generate a good salt - Is my function secure enough?","Here's the function I'm using to generate random salts:
function generateRandomString($nbLetters){
    $randString="""";
    $charUniverse=""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"";
    for($i=0; $i<$nbLetters; $i++){
       $randInt=rand(0,61);
        $randChar=$charUniverse[$randInt];
        $randString=$randomString.$randChar;
    }
    return $randomString;
}

This is for a non commercial website.  It's only used to generate the salt (to be stored in the db and used along with the user submitted pw for hashing).
Is this appropriate?  Should I use a larger subset of characters, and if so is there an easy way to do that in PHP?
","If you want ultimate unique salt you should use a unique value entered and required by the user such as the email or the username, then hashing it using sha1 and then merge it - concatenate -  with the salt value generated by your code.
Another, you have to extend $charUniverse by the mean of some special characters such as @,!#- etc. 
","54930","<php><security><salt>","38","0","11","2018-05-30 09:50:43","4099349","0","8","229044","","2010-11-04 17:44:57","2010-11-04 17:18:35",""
"4099333","How to generate a good salt - Is my function secure enough?","Here's the function I'm using to generate random salts:
function generateRandomString($nbLetters){
    $randString="""";
    $charUniverse=""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"";
    for($i=0; $i<$nbLetters; $i++){
       $randInt=rand(0,61);
        $randChar=$charUniverse[$randInt];
        $randString=$randomString.$randChar;
    }
    return $randomString;
}

This is for a non commercial website.  It's only used to generate the salt (to be stored in the db and used along with the user submitted pw for hashing).
Is this appropriate?  Should I use a larger subset of characters, and if so is there an easy way to do that in PHP?
","This is my method, It uses truly random numbers from atmospheric noise. It is all mixed in with pseudo-random values and strings. Shuffled and hashed. Here is my code: I call it overkill.
<?php
function generateRandomString($length = 10) {
    $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    $randomString = '';
    for ($i = 0; $i < $length; $i++) {
        $randomString .= $characters[rand(0, strlen($characters) - 1)];
    }
    return $randomString;
}

function get_true_random_number($min = 1, $max = 100) {
    $max = ((int) $max >= 1) ? (int) $max : 100;
    $min = ((int) $min < $max) ? (int) $min : 1;
    $options = array(
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_HEADER => false,
        CURLOPT_FOLLOWLOCATION => true,
        CURLOPT_ENCODING => '',
        CURLOPT_USERAGENT => 'PHP',
        CURLOPT_AUTOREFERER => true,
        CURLOPT_CONNECTTIMEOUT => 120,
        CURLOPT_TIMEOUT => 120,
        CURLOPT_MAXREDIRS => 10,
    );

    $ch = curl_init('http://www.random.org/integers/?num=1&min='
        . $min . '&max=' . $max . '&col=1&base=10&format=plain&rnd=new');
    curl_setopt_array($ch, $options);
    $content = curl_exec($ch);
    curl_close($ch);

    if(is_numeric($content)) {
        return trim($content);
    } else {
        return rand(-10,127);
    }
}

function generateSalt() {
    $string = generateRandomString(10);
    $int = get_true_random_number(-2,123);
    $shuffled_mixture = str_shuffle(Time().$int.$string);
    return $salt = md5($shuffled_mixture);
}

echo generateSalt();
?>

The atmospheric noise is provided by random.org. I have also seen truly random generation from images of lava lamps that are interpreted via hue and location. (Hue is location)
","54930","<php><security><salt>","38","2","11","2018-05-30 09:50:43","4099349","0","8","229044","","2010-11-04 17:44:57","2010-11-04 17:18:35",""
"4099333","How to generate a good salt - Is my function secure enough?","Here's the function I'm using to generate random salts:
function generateRandomString($nbLetters){
    $randString="""";
    $charUniverse=""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"";
    for($i=0; $i<$nbLetters; $i++){
       $randInt=rand(0,61);
        $randChar=$charUniverse[$randInt];
        $randString=$randomString.$randChar;
    }
    return $randomString;
}

This is for a non commercial website.  It's only used to generate the salt (to be stored in the db and used along with the user submitted pw for hashing).
Is this appropriate?  Should I use a larger subset of characters, and if so is there an easy way to do that in PHP?
","Here is a much better way if you have windows and cant do /dev/random.
//Key generator
$salt = base64_encode(openssl_random_pseudo_bytes(128, $secure));
//The variable $secure is given by openssl_random_ps... and it will give a true or false if its tru then it means that the salt is secure for cryptologic.
while(!$secure){
    $salt = base64_encode(openssl_random_pseudo_bytes(128, $secure));
}

","54930","<php><security><salt>","38","2","11","2018-05-30 09:50:43","4099349","0","8","229044","","2010-11-04 17:44:57","2010-11-04 17:18:35",""
"4099333","How to generate a good salt - Is my function secure enough?","Here's the function I'm using to generate random salts:
function generateRandomString($nbLetters){
    $randString="""";
    $charUniverse=""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"";
    for($i=0; $i<$nbLetters; $i++){
       $randInt=rand(0,61);
        $randChar=$charUniverse[$randInt];
        $randString=$randomString.$randChar;
    }
    return $randomString;
}

This is for a non commercial website.  It's only used to generate the salt (to be stored in the db and used along with the user submitted pw for hashing).
Is this appropriate?  Should I use a larger subset of characters, and if so is there an easy way to do that in PHP?
","password_hash() is availble in PHP 5.5 and newer. I am surprised to learn it is not mentioned here.
With password_hash() there is no need to generate a salt as the salt is automatically being generated using the bcrypt algorithm -- and therefore no need to make up a set of characters. 
Instead, the user-submitted password is compared to the unique password hash stored in the database using password_verify(). Just store Username and Password hash in the user database table, you will then be able to compare it to a user-submitted password using password_verify().
How password hash()'ing works:
The password_hash() function outputs a unique password hash, when storing the string in a database -- it is recommended that the column allows up to 255 characters.
$password = ""goat"";
echo password_hash($password, PASSWORD_DEFAULT);
echo password_hash($password, PASSWORD_DEFAULT);
echo password_hash($password, PASSWORD_DEFAULT);

// Output example (store this in the database)
$2y$10$GBIQaf6gEeU9im8RTKhIgOZ5q5haDA.A5GzocSr5CR.sU8OUsCUwq  <- This hash changes.
$2y$10$7.y.lLyEHKfpxTRnT4HmweDKWojTLo1Ra0hXXlAC4ra1pfneAbj0K
$2y$10$5m8sFNEpJLBfMt/3A0BI5uH4CKep2hiNI1/BnDIG0PpLXpQzIHG8y 

To verify a hashed password, you use password_verify():
$password_enc = password_hash(""goat"", PASSWORD_DEFAULT);
dump(password_verify('goat', $password_enc)); // TRUE
dump(password_verify('fish', $password_enc)); // FALSE

If you prefer, salt can be added manually as an option, like so:
$password = 'MyPassword';
$salt = 'MySaltThatUsesALongAndImpossibleToRememberSentence+NumbersSuch@7913';
$hash = password_hash($password, PASSWORD_DEFAULT, ['salt'=>$salt]);
// Output: $2y$10$TXlTYWx0VGhhdFVzZXNBT.ApoIjIiwyhEvKC9Ok5qzVcSal7T8CTu  <- This password hash not change.

","54930","<php><security><salt>","38","8","11","2018-05-30 09:50:43","4099349","0","8","229044","","2010-11-04 17:44:57","2010-11-04 17:18:35",""
"2898685","Hashing in SHA512 using a salt? - Python","I have been looking through ths hashlib documentation but haven't found anything talking about using salt when hashing data.
Help would be great.
","Salting isn't a magical process that the library needs to help you with—it's just additional data provided to stop rainbow tables from working.
>>> import hashlib
>>> m = hashlib.sha512()
>>> m.update(b""Nobody inspects"")
>>> m.update(b"" the spammish repetition"")
>>> m.digest()
b'\xd0\xf4\xc1LH\xadH7\x90^\xa7R\x0c\xc4\xafp\x0fd3\xce\t\x85\xe6\xbb\x87\xb6\xb4a|\xb9D\xab\xf8\x14\xbdS\x96M\xdb\xf5[A\xe5\x81+:\xfe\x90\x89\x0c\nM\xb7\\\xb0Cg\xe19\xfdb\xea\xb2\xe1'
>>> m.update(b""My super-secret salt."")
>>> m.digest()
b'\xcd\xd7K\xd9!~\xa8\x1d6\x9b\xa6\xde\x06\t\x02\xa1+}\xaeNA\x94a`\xaa\xf4\xe9\xb5\xff\x1f\x9cE\x84m\xbb\x98U\xb4z\x92\x9e\xe8\xc9\xc2\xc8\x8f\x068e\xb0\r\xed\xb7\xde\x80\xa6,\n\x111w{\xa2\x9b'

","53268","<python><salt><sha><hashlib><saltedhash>","38","8","6","2013-11-14 19:48:05","2898780","1","11","","","","2010-05-24 16:58:28",""
"2898685","Hashing in SHA512 using a salt? - Python","I have been looking through ths hashlib documentation but haven't found anything talking about using salt when hashing data.
Help would be great.
","Samir's answer is correct but somewhat cryptic. Basically, the salt is just a randomly derived bit of data that you prefix or postfix your data with to dramatically increase the complexity of a dictionary attack on your hashed value. So given a salt s and data d you'd just do the following to generate a salted hash of the data:
import hashlib
hashlib.sha512( s + d ).hexdigest()

See this wikipedia article for more details
","53268","<python><salt><sha><hashlib><saltedhash>","38","72","6","2013-11-14 19:48:05","2898780","1","11","","","","2010-05-24 16:58:28",""
"2898685","Hashing in SHA512 using a salt? - Python","I have been looking through ths hashlib documentation but haven't found anything talking about using salt when hashing data.
Help would be great.
","Just add the salt to your sensitive data:
>>> import hashlib
>>> m = hashlib.sha512()
>>> m.update('salt')
>>> m.update('sensitive data')
>>> m.hexdigest()
'70197a4d3a5cd29b62d4239007b1c5c3c0009d42d190308fd855fc459b107f40a03bd427cb6d87de18911f21ae9fdfc24dadb0163741559719669c7668d7d587'
>>> n = hashlib.sha512()
>>> n.update('%ssensitive data' % 'salt')
>>> n.hexdigest()
'70197a4d3a5cd29b62d4239007b1c5c3c0009d42d190308fd855fc459b107f40a03bd427cb6d87de18911f21ae9fdfc24dadb0163741559719669c7668d7d587'
>>> hashlib.sha512('salt' + 'sensitive data').hexdigest()
'70197a4d3a5cd29b62d4239007b1c5c3c0009d42d190308fd855fc459b107f40a03bd427cb6d87de18911f21ae9fdfc24dadb0163741559719669c7668d7d587'

","53268","<python><salt><sha><hashlib><saltedhash>","38","18","6","2013-11-14 19:48:05","2898780","1","11","","","","2010-05-24 16:58:28",""
"2898685","Hashing in SHA512 using a salt? - Python","I have been looking through ths hashlib documentation but haven't found anything talking about using salt when hashing data.
Help would be great.
","If you're looking for a replacement for crypt(), newer versions of glibc have SHA-512-based ""$6$"" with a variable iteration count (see Ulrich Drepper's page, which has a description and links to a complete C implementation of sha512_crypt_r()).
Writing your own crypto is highly unadvisable — the above sha512(salt+password) doesn't help against a brute-force attack.
For generating salt, use something like os.urandom(16) for random bytes or ''.join(map(lambda x:'./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'[ord(x)%64], os.urandom(16))) for random base64-alike chars (for use with crypt()-alikes).
(I say base64-alike it's not the same as the Base64 in PEM/MIME.)
","53268","<python><salt><sha><hashlib><saltedhash>","38","7","6","2013-11-14 19:48:05","2898780","1","11","","","","2010-05-24 16:58:28",""
"2898685","Hashing in SHA512 using a salt? - Python","I have been looking through ths hashlib documentation but haven't found anything talking about using salt when hashing data.
Help would be great.
","use passlib, writing your own password crypto is an almost sure way to failure.
","53268","<python><salt><sha><hashlib><saltedhash>","38","3","6","2013-11-14 19:48:05","2898780","1","11","","","","2010-05-24 16:58:28",""
"2898685","Hashing in SHA512 using a salt? - Python","I have been looking through ths hashlib documentation but haven't found anything talking about using salt when hashing data.
Help would be great.
","SHA512 isn't a great way to store hashed passwords these days.  You should be using bcrypt or something similar.  What's important is that salting is built in and that the algorithm has a significant work factor.
If you salt your SHA512 passwords by simply appending (or prepending) the salt to the plaintext, anyone who gets their hands on a set of your hashed passwords and applies a modern cracking tool (http://arstechnica.com/security/2013/05/how-crackers-make-minced-meat-out-of-your-passwords/) will be able to see the concatenated password+salt values and will probably, through trivial pattern matching, be able to separate the password portion from the salt portion for most if not all of the accounts in question.
I haven't thought this through all the way, and I am by no means a security expert, but it seems to me that if you were to encrypt (using, for example, AES256) the password using the salt as the key, and then hash that with SHA512, you'd be safe from the vulnerability I described above.
However, at that point you've put in more effort than it would have taken to switch to bcrypt and you still wouldn't have the protection of a work factor, so I would only recommend an approach like that if the environment you're working in does not offer that option.
","53268","<python><salt><sha><hashlib><saltedhash>","38","2","6","2013-11-14 19:48:05","2898780","1","11","","","","2010-05-24 16:58:28",""
"5584620","What is SALT and how do i use it?","I have been searching around and I am still unsure of what a ""salt"" is and how to use/implement it. Sorry for the noobish question, I am self learning php.
","Well its in the comments, thanks ceejayoz
http://en.wikipedia.org/wiki/Salt_(cryptography)
A salt is something you add to a string before you hash it, it adds another layer of security to passwords and the like.
","44984","<php><salt>","41","6","6","2014-12-31 04:37:02","5584941","3","16","281460","","2014-12-31 04:37:02","2011-04-07 16:46:20",""
"5584620","What is SALT and how do i use it?","I have been searching around and I am still unsure of what a ""salt"" is and how to use/implement it. Sorry for the noobish question, I am self learning php.
","For some reason.  Salts are usually hard for people new to cryptography to grasp. Once it clicks though, the concept is extremely simple.  Have a look at this article. I think it explains the concept better than most.
http://cryptodox.com/Salt_%28cryptography%29
","44984","<php><salt>","41","0","6","2014-12-31 04:37:02","5584941","3","16","281460","","2014-12-31 04:37:02","2011-04-07 16:46:20",""
"5584620","What is SALT and how do i use it?","I have been searching around and I am still unsure of what a ""salt"" is and how to use/implement it. Sorry for the noobish question, I am self learning php.
","A salt is a (short) string that is added to the string you want to encrypt or hash. An Example:
<?php
 $password = 'abcdefg';
 $salt = 'anythingyouwant_';
 $pw_hash = md5($salt.$password);
?>

This adds security to the hash, as it's unlikely that ""anythingyouwant_abcdefg"" is already stored in a hash-database ( http://en.wikipedia.org/wiki/Rainbow_tables )
","44984","<php><salt>","41","6","6","2014-12-31 04:37:02","5584941","3","16","281460","","2014-12-31 04:37:02","2011-04-07 16:46:20",""
"5584620","What is SALT and how do i use it?","I have been searching around and I am still unsure of what a ""salt"" is and how to use/implement it. Sorry for the noobish question, I am self learning php.
","When I first asked this question, many years ago, I was asked in response, ""What does salt do for food?"" The answer is that it adds variety to food. The idea behind cryptographic salt is that it's something you add to the end or beginning of a string in order that two passwords that are identical don't hash to the same cryptographic value. 
Consider this - if I had a password that was really common, like 'hello123', and then it hashed to the exact same cryptographic hash as all other 'hello123' passwords, couldn't I just look in the list of hashed passwords to see who else had the same cryptographic hash, and use my password on their account?
","44984","<php><salt>","41","25","6","2014-12-31 04:37:02","5584941","3","16","281460","","2014-12-31 04:37:02","2011-04-07 16:46:20",""
"5584620","What is SALT and how do i use it?","I have been searching around and I am still unsure of what a ""salt"" is and how to use/implement it. Sorry for the noobish question, I am self learning php.
","I am definitely not an expert, but the really short answer is that ""salting"" a line of text means to stick a few extra characters on the end of it. You could salt ""salt"" with ""abcdefg"" to get ""saltabcdefg"". This might be useful if ""salt"" happens to be a password that you'd like to make more difficult to guess. 
Typically, the password+salt are transformed ('hashed') by some difficult-to-reverse process into a completely different string. This transformed string is then stored as the password, together with the plaintext of the salt, and the original plain text of the password proper is tossed away. When you want to check that someone has input the correct password, you combine whatever they've typed in with the salt that's listed in the password file and then hash the result. If the result matches the password hash you have on record, then you know that they've put in the right password. 
Implementing a salt can be as easy as picking a string to serve as the salt and then making sure you keep track of it. But, you could vary the salt with each password, and then you'll have to have a way of keeping track of password+salt combinations as well as generating the variations. Of course, you'll probably also want to hash the password rather than saving the password's plain text, and so you'll have to pick a hash function. At this point, the problem has proceeded from salting proper to implementing a password security scheme. 
For PHP, you might want to look at how some of the frameworks have implemented this. Two quick links, for CakePHP and Zend, respectively:
http://www.jotlab.com/2010/04/18/cakephp-rainbow-table-protection-behaviour/
http://www.zimuel.it/blog/2009/07/build-a-secure-login-with-zend-framework/ 
","44984","<php><salt>","41","43","6","2014-12-31 04:37:02","5584941","3","16","281460","","2014-12-31 04:37:02","2011-04-07 16:46:20",""
"5584620","What is SALT and how do i use it?","I have been searching around and I am still unsure of what a ""salt"" is and how to use/implement it. Sorry for the noobish question, I am self learning php.
","Let us spice up things a little by combining several algorithms for hashing, making a double hashing algorithm:
$password = ""myPassword"";
$salt = sha1(md5($password)).'k32duem01vZsQ2lB8g0s'; 
$password = md5($password.$salt);

As you can see, we first hashed the password using double hashing algorithm (md5 and sha1) and concatenating with a key created salt value. After that, we combined real password with generated salt value and hashed it again with md5. The advantage is that this way alt value is random and it changes, making it nearly impossible to break. I mean, if you can wait for a million years and have a super computer on your hands, try to break it.
","44984","<php><salt>","41","0","6","2014-12-31 04:37:02","5584941","3","16","281460","","2014-12-31 04:37:02","2011-04-07 16:46:20",""
"16891729","Best Practices: Salting & peppering passwords?","I came across a discussion in which I learned that what I'd been doing wasn't in fact salting passwords but peppering them, and I've since begun doing both with a function like:
hash_function($salt.hash_function($pepper.$password)) [multiple iterations]

Ignoring the chosen hash algorithm (I want this to be a discussion of salts & peppers and not specific algorithms but I'm using a secure one), is this a secure option or should I be doing something different? For those unfamiliar with the terms:

A salt is a randomly generated value usually stored with the string in the database designed to make it impossible to use hash tables to crack passwords. As each password has its own salt, they must all be brute-forced individually in order to crack them; however, as the salt is stored in the database with the password hash, a database compromise means losing both.
A pepper is a site-wide static value stored separately from the database (usually hard-coded in the application's source code) which is intended to be secret. It is used so that a compromise of the database would not cause the entire application's password table to be brute-forceable.

Is there anything I'm missing and is salting & peppering my passwords the best option to protect my user's security? Is there any potential security flaw to doing it this way?
Note: Assume for the purpose of the discussion that the application & database are stored on separate machines, do not share passwords etc. so a breach of the database server does not automatically mean a breach of the application server.
","Can't see storing a hardcoded value in your source code as having any security relevance. It's security through obscurity. 
If a hacker acquires your database, he will be able to start brute forcing your user passwords. It won't take long for that hacker to identify your pepper if he manages to crack a few passwords.
","39427","<security><hash><passwords><salt><password-hash>","141","1","4","2015-03-28 02:08:06","16896216","2","108","168868","","2013-06-03 09:39:38","2013-06-03 07:15:47",""
"16891729","Best Practices: Salting & peppering passwords?","I came across a discussion in which I learned that what I'd been doing wasn't in fact salting passwords but peppering them, and I've since begun doing both with a function like:
hash_function($salt.hash_function($pepper.$password)) [multiple iterations]

Ignoring the chosen hash algorithm (I want this to be a discussion of salts & peppers and not specific algorithms but I'm using a secure one), is this a secure option or should I be doing something different? For those unfamiliar with the terms:

A salt is a randomly generated value usually stored with the string in the database designed to make it impossible to use hash tables to crack passwords. As each password has its own salt, they must all be brute-forced individually in order to crack them; however, as the salt is stored in the database with the password hash, a database compromise means losing both.
A pepper is a site-wide static value stored separately from the database (usually hard-coded in the application's source code) which is intended to be secret. It is used so that a compromise of the database would not cause the entire application's password table to be brute-forceable.

Is there anything I'm missing and is salting & peppering my passwords the best option to protect my user's security? Is there any potential security flaw to doing it this way?
Note: Assume for the purpose of the discussion that the application & database are stored on separate machines, do not share passwords etc. so a breach of the database server does not automatically mean a breach of the application server.
","The point of salt and pepper is to increase the cost of a pre-computed password lookup, called a rainbow table.
In general trying to find a collision for a single hash is hard (assuming the hash is secure). However, with short hashes, it is possible to use computer to generate all possible hashes into a lookup onto a hard disk. This is called a Rainbow Table. If you create a rainbow table you can then go out into the world and quickly find plausable passwords for any (unsalted unpeppered) hash.
The point of a pepper is to make the rainbow table needed to hack your password list unique. Thus wasting more time on the attacker to construct the rainbow table.
The point of the salt however is to make the rainbow table for each user be unique to the user, further increasing the complexity of the attack.
Really the point of computer security is almost never to make it (mathematically) impossible, just mathematically and physically impractical (for example in secure systems it would take all the entropy in the universe (and more) to compute a single user's password).
","39427","<security><hash><passwords><salt><password-hash>","141","2","4","2015-03-28 02:08:06","16896216","2","108","168868","","2013-06-03 09:39:38","2013-06-03 07:15:47",""
"16891729","Best Practices: Salting & peppering passwords?","I came across a discussion in which I learned that what I'd been doing wasn't in fact salting passwords but peppering them, and I've since begun doing both with a function like:
hash_function($salt.hash_function($pepper.$password)) [multiple iterations]

Ignoring the chosen hash algorithm (I want this to be a discussion of salts & peppers and not specific algorithms but I'm using a secure one), is this a secure option or should I be doing something different? For those unfamiliar with the terms:

A salt is a randomly generated value usually stored with the string in the database designed to make it impossible to use hash tables to crack passwords. As each password has its own salt, they must all be brute-forced individually in order to crack them; however, as the salt is stored in the database with the password hash, a database compromise means losing both.
A pepper is a site-wide static value stored separately from the database (usually hard-coded in the application's source code) which is intended to be secret. It is used so that a compromise of the database would not cause the entire application's password table to be brute-forceable.

Is there anything I'm missing and is salting & peppering my passwords the best option to protect my user's security? Is there any potential security flaw to doing it this way?
Note: Assume for the purpose of the discussion that the application & database are stored on separate machines, do not share passwords etc. so a breach of the database server does not automatically mean a breach of the application server.
","Fist we should talk about the exact advantage of a pepper:

The pepper can protect weak passwords from a dictionary attack, in the special case, where the attacker has read-access to the database (containing the hashes) but does not have access to the source code with the pepper.

A typical scenario would be SQL-injection, thrown away backups, discarded servers... These situations are not as uncommon as it sounds, and often not under your control (server-hosting). If you use...

A unique salt per password
A slow hashing algorithm like BCrypt

...strong passwords are well protected. It's nearly impossible to brute force a strong password under those conditions, even when the salt is known. The problem are the weak passwords, that are part of a brute-force dictionary or are derivations of them. A dictionary attack will reveal those very fast, because you test only the most common passwords.
The second question is how to apply the pepper ?
An often recommended way to apply a pepper, is to combine the password and the pepper before passing it to the hash function:
$pepperedPassword = hash_hmac('sha512', $password, $pepper);
$passwordHash = bcrypt($pepperedPassword);

There is another even better way though:
$passwordHash = bcrypt($password);
$encryptedHash = encrypt($passwordHash, $serverSideKey);

This not only allows to add a server side secret, it also allows to exchange the $serverSideKey, should this be necessary. This method involves a bit more work, but if the code once exists (library) there is no reason not to use it.
","39427","<security><hash><passwords><salt><password-hash>","141","23","4","2015-03-28 02:08:06","16896216","2","108","168868","","2013-06-03 09:39:38","2013-06-03 07:15:47",""
"16891729","Best Practices: Salting & peppering passwords?","I came across a discussion in which I learned that what I'd been doing wasn't in fact salting passwords but peppering them, and I've since begun doing both with a function like:
hash_function($salt.hash_function($pepper.$password)) [multiple iterations]

Ignoring the chosen hash algorithm (I want this to be a discussion of salts & peppers and not specific algorithms but I'm using a secure one), is this a secure option or should I be doing something different? For those unfamiliar with the terms:

A salt is a randomly generated value usually stored with the string in the database designed to make it impossible to use hash tables to crack passwords. As each password has its own salt, they must all be brute-forced individually in order to crack them; however, as the salt is stored in the database with the password hash, a database compromise means losing both.
A pepper is a site-wide static value stored separately from the database (usually hard-coded in the application's source code) which is intended to be secret. It is used so that a compromise of the database would not cause the entire application's password table to be brute-forceable.

Is there anything I'm missing and is salting & peppering my passwords the best option to protect my user's security? Is there any potential security flaw to doing it this way?
Note: Assume for the purpose of the discussion that the application & database are stored on separate machines, do not share passwords etc. so a breach of the database server does not automatically mean a breach of the application server.
","Ok. Seeing as I need to write about this over and over, I'll do one last canonical answer on pepper alone.
The Apparent Upside Of Peppers
It seems quite obvious that peppers should make hash functions more secure. I mean, if the attacker only gets your database, then your users passwords should be secure, right? Seems logical, right?
That's why so many people believe that peppers are a good idea. It ""makes sense"". 
The Reality Of Peppers
In the security and cryptography realms, ""make sense"" isn't enough. Something has to be provable and make sense in order for it to be considered secure. Additionally, it has to be implementable in a maintainable way. The most secure system that can't be maintained is considered insecure (because if any part of that security breaks down, the entire system falls apart).
And peppers fit neither the provable or the maintainable models...
Theoretical Problems With Peppers
Now that we've set the stage, let's look at what's wrong with peppers.

Feeding one hash into another can be dangerous.
In your example, you do hash_function($salt . hash_function($pepper . $password)).
We know from past experience that ""just feeding"" one hash result into another hash function can decrease the overall security. The reason is that both hash functions can become a target of attack. 
That's why algorithms like PBKDF2 use special operations to combine them (hmac in that case).
The point is that while it's not a big deal, it is also not a trivial thing to just throw around. Crypto systems are designed to avoid ""should work"" cases, and instead focus on ""designed to work"" cases.
While this may seem purely theoretical, it's in fact not. For example, Bcrypt cannot accept arbitrary passwords. So passing bcrypt(hash(pw), salt) can indeed result in a far weaker hash than bcrypt(pw, salt) if hash() returns a binary string.
Working Against Design
The way bcrypt (and other password hashing algorithms) were designed is to work with a salt. The concept of a pepper was never introduced. This may seem like a triviality, but it's not. The reason is that a salt is not a secret. It is just a value that can be known to an attacker. A pepper on the other hand, by very definition is a cryptographic secret.
The current password hashing algorithms (bcrypt, pbkdf2, etc) all are designed to only take in one secret value (the password). Adding in another secret into the algorithm hasn't been studied at all.
That doesn't mean it is not safe. It means we don't know if it is safe. And the general recommendation with security and cryptography is that if we don't know, it isn't.
So until algorithms are designed and vetted by cryptographers for use with secret values (peppers), current algorithms shouldn't be used with them.
Complexity Is The Enemy Of Security
Believe it or not, Complexity Is The Enemy Of Security. Making an algorithm that looks complex may be secure, or it may be not. But the chances are quite significant that it's not secure. 

Significant Problems With Peppers

It's Not Maintainable
Your implementation of peppers precludes the ability to rotate the pepper key. Since the pepper is used at the input to the one way function, you can never change the pepper for the lifetime of the value. This means that you'd need to come up with some wonky hacks to get it to support key rotation.
This is extremely important as it's required whenever you store cryptographic secrets. Not having a mechanism to rotate keys (periodically, and after a breach) is a huge security vulnerability.
And your current pepper approach would require every user to either have their password completely invalidated by a rotation, or wait until their next login to rotate (which may be never)...
Which basically makes your approach an immediate no-go.
It Requires You To Roll Your Own Crypto
Since no current algorithm supports the concept of a pepper, it requires you to either compose algorithms or invent new ones to support a pepper. And if you can't immediately see why that's a really bad thing:

Anyone, from the most clueless amateur to the best cryptographer, can create an algorithm that he himself can't break.


Bruce Schneier

NEVER roll your own crypto...

The Better Way
So, out of all the problems detailed above, there are two ways of handling the situation. 

Just Use The Algorithms As They Exist
If you use bcrypt or scrypt correctly (with a high cost), all but the weakest dictionary passwords should be statistically safe. The current record for hashing bcrypt at cost 5 is 71k hashes per second. At that rate even a 6 character random password would take years to crack. And considering my minimum recommended cost is 10, that reduces the hashes per second by a factor of 32. So we'd be talking only about 2200 hashes per second. At that rate, even some dictionary phrases or modificaitons may be safe.
Additionally, we should be checking for those weak classes of passwords at the door and not allowing them in. As password cracking gets more advanced, so should password quality requirements. It's still a statistical game, but with a proper storage technique, and strong passwords, everyone should be practically very safe...
Encrypt The Output Hash Prior To Storage
There exists in the security realm an algorithm designed to handle everything we've said above. It's a block cipher. It's good, because it's reversible, so we can rotate keys (yay! maintainability!). It's good because it's being used as designed. It's good because it gives the user no information.
Let's look at that line again. Let's say that an attacker knows your algorithm (which is required for security, otherwise it's security through obscurity). With a traditional pepper approach, the attacker can create a sentinel password, and since he knows the salt and the output, he can brute force the pepper. Ok, that's a long shot, but it's possible. With a cipher, the attacker gets nothing. And since the salt is randomized, a sentinel password won't even help him/her. So the best they are left with is to attack the encrypted form. Which means that they first have to attack your encrypted hash to recover the encryption key, and then attack the hashes. But there's a lot of research into the attacking of ciphers, so we want to rely on that.

TL/DR
Don't use peppers. There are a host of problems with them, and there are two better ways: not using any server-side secret (yes, it's ok) and encrypting the output hash using a block cipher prior to storage.
","39427","<security><hash><passwords><salt><password-hash>","141","298","4","2015-03-28 02:08:06","16896216","2","108","168868","","2013-06-03 09:39:38","2013-06-03 07:15:47",""
"7658853","Spring Security Custom Authentication and Password Encoding","Is there a tutorial out there or does anyone have pointers on how to do the following with Spring-Security?
Task:
I need to get the salt from my database for the authenticating username and use it to encrypt the provided password (from the login page) to compare it to the stored encrypted password (a.k.a. authenticate the user).
additional information:
I use a custom database structure. A UserDetails object is created via a custom UserDetailsService which in turn uses a custom DAOProvider to get the information from the database.
my security.xml file so far:
<authentication-manager>
    <authentication-provider user-service-ref=""userDetailsService"">
    </authentication-provider>
</authentication-manager>

now I guess I'll need 
        <password-encoder hash=""sha"" />

but what else? How do I tell spring security to use the databaseprovided salt in order to encode the password? 

edit:
I found This SO post to be informatative but not sufficient: If I define a salt source in my xml to be used by the password encoder, like so:
        <password-encoder ref=""passwordEncoder"">                
            <salt-source ref=""saltSource""/>
        </password-encoder>

I'll have to write a custom SaltSource to use my custom salt. But that's not to be found inside the UserDetails object. So...
Alternative 1:
Can I use a custom Implementation of UserDetails which might then have the salt property?
<beans:bean id=""saltSource"" class=""path.to.MySaltSource""
    p:userPropertyToUse=""salt""/>

and
@Service(""userDetailsService"") 
public class UserDetailsServiceImpl implements UserDetailsService {
    public UserDetails loadUserByUsername(String username)
            throws UsernameNotFoundException, DataAccessException {

        // ...
        return buildUserFromAccount(account);
    }

    @Transactional(readOnly = true)

    UserDetailsImpl buildUserFromAccount(Account account){

        // ... build User object that contains salt property
}

custom User Class:
public class UserDetailsImpl extends User{

    // ...

    private String salt;

    public String getSalt() { return salt; }

    public void setSalt(String salt) { this.salt = salt; }
}

security.xml:
<authentication-manager>
    <authentication-provider user-service-ref=""userDetailsService"">
        <password-encoder hash=""sha"">                
        <salt-source ref=""saltSource""/>
    </password-encoder>
    </authentication-provider>
</authentication-manager>

<beans:bean id=""saltSource"" class=""org.springframework.security.authentication.dao.ReflectionSaltSource"" p:userPropertyToUse=""salt""/>


Alternative 2:
Otherwise I'd have to inject my accountDAO into the SaltSource to extract the salt for a given userName from the database. 
BUT: How does Spring Security call the SaltSource? Always with saltSource.getSalt(userDetails)? 
Then I'd just have to make sure my SaltSource uses userDetails.accountName on my accountDAO to retrieve the salt. 

Edit2:
Just learned that my approach is.. legacy.. :( So I guess I'll just use the StandardPasswordEncoder (which I still have to figure out how to use exactly).
BTW: I implemented the first option with a custom UserDetails class extending the User class and just adding a salt property which an then be passed to the SaltSource as a userPropertyToUse just like it has been proposed in the SO post mentioned in Edit 1...

EDIT 3:
Just got the StandardPasswordEncoder working, so I'll leave some pointers here:
Use the StandardPasswordEncoder for Authentication:
<beans:bean id=""encoder"" 
    class=""org.springframework.security.crypto.password.StandardPasswordEncoder"">
</beans:bean>


<authentication-manager>
    <authentication-provider user-service-ref=""userDetailsService"">
        <password-encoder ref=""encoder"" />         
    </authentication-provider>
</authentication-manager>

This requires the spring-security-crypto module in version 3.1.0.RC? as far as I know. Couldn't find any repository that has a 3.0. version (even though somewhere it had the versions listed that included 3.0.6 and so on). Also the documentations talks about spring security 3.1 so I figured, I'll just go with that. 
When creating a user (for me only an admin can do that), I just use 
        StandardPasswordEncoder encoder = new StandardPasswordEncoder();
        String result = encoder.encode(password);

and I'm done.
Spring security will randomly create a salt and add it to the password string before storing it in the database so no salt column is needed anymore.
One can however also provide a global salt as a constructor argument (new StandardPasswordEncoder(""12345"");), but I didn't know how to set up my security configuration to retrieve that value from a bean instead of supplying a static string with <constructor-arg name=""secret"" value ""12345"" />. But I don't know how much that is needed anyway.
","I'll mark this as answered, as I solved my problem and no other comments or answers were given:
Edit 1 - Alternative 1 answers the original question
BUT I had to learn that customized password salting is a legacy approach that is not needed in Spring Security 3.1 any more, as I describe in 
Edit 3 where I left some pointers on how to use the StandardPasswordEncoder for automated Salts that are stored with the password.
","37816","<authentication><passwords><spring-security><salt>","52","34","3","2013-06-02 12:19:40","7803238","0","20","-1","","2017-05-23 12:33:21","2011-10-05 08:56:43",""
"7658853","Spring Security Custom Authentication and Password Encoding","Is there a tutorial out there or does anyone have pointers on how to do the following with Spring-Security?
Task:
I need to get the salt from my database for the authenticating username and use it to encrypt the provided password (from the login page) to compare it to the stored encrypted password (a.k.a. authenticate the user).
additional information:
I use a custom database structure. A UserDetails object is created via a custom UserDetailsService which in turn uses a custom DAOProvider to get the information from the database.
my security.xml file so far:
<authentication-manager>
    <authentication-provider user-service-ref=""userDetailsService"">
    </authentication-provider>
</authentication-manager>

now I guess I'll need 
        <password-encoder hash=""sha"" />

but what else? How do I tell spring security to use the databaseprovided salt in order to encode the password? 

edit:
I found This SO post to be informatative but not sufficient: If I define a salt source in my xml to be used by the password encoder, like so:
        <password-encoder ref=""passwordEncoder"">                
            <salt-source ref=""saltSource""/>
        </password-encoder>

I'll have to write a custom SaltSource to use my custom salt. But that's not to be found inside the UserDetails object. So...
Alternative 1:
Can I use a custom Implementation of UserDetails which might then have the salt property?
<beans:bean id=""saltSource"" class=""path.to.MySaltSource""
    p:userPropertyToUse=""salt""/>

and
@Service(""userDetailsService"") 
public class UserDetailsServiceImpl implements UserDetailsService {
    public UserDetails loadUserByUsername(String username)
            throws UsernameNotFoundException, DataAccessException {

        // ...
        return buildUserFromAccount(account);
    }

    @Transactional(readOnly = true)

    UserDetailsImpl buildUserFromAccount(Account account){

        // ... build User object that contains salt property
}

custom User Class:
public class UserDetailsImpl extends User{

    // ...

    private String salt;

    public String getSalt() { return salt; }

    public void setSalt(String salt) { this.salt = salt; }
}

security.xml:
<authentication-manager>
    <authentication-provider user-service-ref=""userDetailsService"">
        <password-encoder hash=""sha"">                
        <salt-source ref=""saltSource""/>
    </password-encoder>
    </authentication-provider>
</authentication-manager>

<beans:bean id=""saltSource"" class=""org.springframework.security.authentication.dao.ReflectionSaltSource"" p:userPropertyToUse=""salt""/>


Alternative 2:
Otherwise I'd have to inject my accountDAO into the SaltSource to extract the salt for a given userName from the database. 
BUT: How does Spring Security call the SaltSource? Always with saltSource.getSalt(userDetails)? 
Then I'd just have to make sure my SaltSource uses userDetails.accountName on my accountDAO to retrieve the salt. 

Edit2:
Just learned that my approach is.. legacy.. :( So I guess I'll just use the StandardPasswordEncoder (which I still have to figure out how to use exactly).
BTW: I implemented the first option with a custom UserDetails class extending the User class and just adding a salt property which an then be passed to the SaltSource as a userPropertyToUse just like it has been proposed in the SO post mentioned in Edit 1...

EDIT 3:
Just got the StandardPasswordEncoder working, so I'll leave some pointers here:
Use the StandardPasswordEncoder for Authentication:
<beans:bean id=""encoder"" 
    class=""org.springframework.security.crypto.password.StandardPasswordEncoder"">
</beans:bean>


<authentication-manager>
    <authentication-provider user-service-ref=""userDetailsService"">
        <password-encoder ref=""encoder"" />         
    </authentication-provider>
</authentication-manager>

This requires the spring-security-crypto module in version 3.1.0.RC? as far as I know. Couldn't find any repository that has a 3.0. version (even though somewhere it had the versions listed that included 3.0.6 and so on). Also the documentations talks about spring security 3.1 so I figured, I'll just go with that. 
When creating a user (for me only an admin can do that), I just use 
        StandardPasswordEncoder encoder = new StandardPasswordEncoder();
        String result = encoder.encode(password);

and I'm done.
Spring security will randomly create a salt and add it to the password string before storing it in the database so no salt column is needed anymore.
One can however also provide a global salt as a constructor argument (new StandardPasswordEncoder(""12345"");), but I didn't know how to set up my security configuration to retrieve that value from a bean instead of supplying a static string with <constructor-arg name=""secret"" value ""12345"" />. But I don't know how much that is needed anyway.
","For what it's worth, I wrote this blog post detailing what you've described:
http://rtimothy.tumblr.com/post/26527448708/spring-3-1-security-and-salting-passwords
","37816","<authentication><passwords><spring-security><salt>","52","4","3","2013-06-02 12:19:40","7803238","0","20","-1","","2017-05-23 12:33:21","2011-10-05 08:56:43",""
"7658853","Spring Security Custom Authentication and Password Encoding","Is there a tutorial out there or does anyone have pointers on how to do the following with Spring-Security?
Task:
I need to get the salt from my database for the authenticating username and use it to encrypt the provided password (from the login page) to compare it to the stored encrypted password (a.k.a. authenticate the user).
additional information:
I use a custom database structure. A UserDetails object is created via a custom UserDetailsService which in turn uses a custom DAOProvider to get the information from the database.
my security.xml file so far:
<authentication-manager>
    <authentication-provider user-service-ref=""userDetailsService"">
    </authentication-provider>
</authentication-manager>

now I guess I'll need 
        <password-encoder hash=""sha"" />

but what else? How do I tell spring security to use the databaseprovided salt in order to encode the password? 

edit:
I found This SO post to be informatative but not sufficient: If I define a salt source in my xml to be used by the password encoder, like so:
        <password-encoder ref=""passwordEncoder"">                
            <salt-source ref=""saltSource""/>
        </password-encoder>

I'll have to write a custom SaltSource to use my custom salt. But that's not to be found inside the UserDetails object. So...
Alternative 1:
Can I use a custom Implementation of UserDetails which might then have the salt property?
<beans:bean id=""saltSource"" class=""path.to.MySaltSource""
    p:userPropertyToUse=""salt""/>

and
@Service(""userDetailsService"") 
public class UserDetailsServiceImpl implements UserDetailsService {
    public UserDetails loadUserByUsername(String username)
            throws UsernameNotFoundException, DataAccessException {

        // ...
        return buildUserFromAccount(account);
    }

    @Transactional(readOnly = true)

    UserDetailsImpl buildUserFromAccount(Account account){

        // ... build User object that contains salt property
}

custom User Class:
public class UserDetailsImpl extends User{

    // ...

    private String salt;

    public String getSalt() { return salt; }

    public void setSalt(String salt) { this.salt = salt; }
}

security.xml:
<authentication-manager>
    <authentication-provider user-service-ref=""userDetailsService"">
        <password-encoder hash=""sha"">                
        <salt-source ref=""saltSource""/>
    </password-encoder>
    </authentication-provider>
</authentication-manager>

<beans:bean id=""saltSource"" class=""org.springframework.security.authentication.dao.ReflectionSaltSource"" p:userPropertyToUse=""salt""/>


Alternative 2:
Otherwise I'd have to inject my accountDAO into the SaltSource to extract the salt for a given userName from the database. 
BUT: How does Spring Security call the SaltSource? Always with saltSource.getSalt(userDetails)? 
Then I'd just have to make sure my SaltSource uses userDetails.accountName on my accountDAO to retrieve the salt. 

Edit2:
Just learned that my approach is.. legacy.. :( So I guess I'll just use the StandardPasswordEncoder (which I still have to figure out how to use exactly).
BTW: I implemented the first option with a custom UserDetails class extending the User class and just adding a salt property which an then be passed to the SaltSource as a userPropertyToUse just like it has been proposed in the SO post mentioned in Edit 1...

EDIT 3:
Just got the StandardPasswordEncoder working, so I'll leave some pointers here:
Use the StandardPasswordEncoder for Authentication:
<beans:bean id=""encoder"" 
    class=""org.springframework.security.crypto.password.StandardPasswordEncoder"">
</beans:bean>


<authentication-manager>
    <authentication-provider user-service-ref=""userDetailsService"">
        <password-encoder ref=""encoder"" />         
    </authentication-provider>
</authentication-manager>

This requires the spring-security-crypto module in version 3.1.0.RC? as far as I know. Couldn't find any repository that has a 3.0. version (even though somewhere it had the versions listed that included 3.0.6 and so on). Also the documentations talks about spring security 3.1 so I figured, I'll just go with that. 
When creating a user (for me only an admin can do that), I just use 
        StandardPasswordEncoder encoder = new StandardPasswordEncoder();
        String result = encoder.encode(password);

and I'm done.
Spring security will randomly create a salt and add it to the password string before storing it in the database so no salt column is needed anymore.
One can however also provide a global salt as a constructor argument (new StandardPasswordEncoder(""12345"");), but I didn't know how to set up my security configuration to retrieve that value from a bean instead of supplying a static string with <constructor-arg name=""secret"" value ""12345"" />. But I don't know how much that is needed anyway.
","To retrieve the global salt from a bean, use the Spring Expression Language or SpEL.
<beans:bean id=""encoder"" 
        class=""org.springframework.security.crypto.password.StandardPasswordEncoder"">
    <constructor-arg value=""#{someotherBean.somePropertyWithAGetterMethod""/>
</beans:bean>

","37816","<authentication><passwords><spring-security><salt>","52","0","3","2013-06-02 12:19:40","7803238","0","20","-1","","2017-05-23 12:33:21","2011-10-05 08:56:43",""
"11731547","How do you turn on password hashing (SSHA) in openLDAP","For the life of me, I cannot seem to find this anywhere and if anyone can even just give me a link I would be very appreciative.
We are trying to turn on SSHA hashing in openLDAP. By default it stores passwords in plaintext, which I think is criminal but hey I am an AD guy so what do I know. But you would think that they would make it easy to find the information needed to turn on hashing if you so choose. And wouldn't you choose?
","OpenLDAP supports a variety of storage schemes for the administrator to choose from. The tool you use to create accounts has to be configured to do the hashing. The server will store passwords in the format the client requests. If hashing is done properly, ldapsearch will show the hashed passwords like this:
userPassword: {SSHA}d0Q0626PSH9VUld7yWpR0k6BlpQmtczb

See http://www.openldap.org/doc/admin24/security.html for details.
When it comes to administrative tools I would personally recommend http://phpldapadmin.sourceforge.net
","33994","<hash><passwords><salt><openldap><ssha>","8","1","5","2019-10-30 13:13:55","11748013","2","3","","","","2012-07-31 00:30:01",""
"11731547","How do you turn on password hashing (SSHA) in openLDAP","For the life of me, I cannot seem to find this anywhere and if anyone can even just give me a link I would be very appreciative.
We are trying to turn on SSHA hashing in openLDAP. By default it stores passwords in plaintext, which I think is criminal but hey I am an AD guy so what do I know. But you would think that they would make it easy to find the information needed to turn on hashing if you so choose. And wouldn't you choose?
","The LDAP spec requires plaintext passwords for interoperability. The link given above on security will give you the option for default hash types that the server can enforce, but do consider the implications.
","33994","<hash><passwords><salt><openldap><ssha>","8","2","5","2019-10-30 13:13:55","11748013","2","3","","","","2012-07-31 00:30:01",""
"11731547","How do you turn on password hashing (SSHA) in openLDAP","For the life of me, I cannot seem to find this anywhere and if anyone can even just give me a link I would be very appreciative.
We are trying to turn on SSHA hashing in openLDAP. By default it stores passwords in plaintext, which I think is criminal but hey I am an AD guy so what do I know. But you would think that they would make it easy to find the information needed to turn on hashing if you so choose. And wouldn't you choose?
","You can use 'password-hash ' to change the hashing algorithm, the default one is SSHA (not clear text).
Note that, slapd uses the above only if the password sent by clients are in plain text, if your client is sending a hashed password, it'll be stored as it is. 
for eg: with pam_ldap, use pam_password exop (or clear) 


how is password strength tests run at the server if the password is coming in hashed and I know that is a feature openLDAP touts?


If you sent hashed passwords, slapd cant perform strength tests, so the clients must sent passwords in clear text(ppolicy has option to accept/reject hashed password).
Note: 

make sure your clients use ssl/tls (so the passwds are not sent in clear text)
userpassword attribute contains special characters ({}) so you have to do a base64 -d to identify the hashing algorithm used.

eg: normally the attributes are returned in the following format (:: indicate the result is base64 encoded) 
userPassword:: e1NTSEF9QjU0VXNmQWhJN1dQZ3FvbDVSQ1l5RHUzTlVqa1luVVhYV2ljbmc9PQ=
 =

$ echo e1NTSEF9QjU0VXNmQWhJN1dQZ3FvbDVSQ1l5RHUzTlVqa1luVVhYV2ljbmc9PQ==|openssl base64 -d
{SSHA}B54UsfAhI7WPgqol5RCYyDu3NUjkYnUXXWicng==

","33994","<hash><passwords><salt><openldap><ssha>","8","9","5","2019-10-30 13:13:55","11748013","2","3","","","","2012-07-31 00:30:01",""
"11731547","How do you turn on password hashing (SSHA) in openLDAP","For the life of me, I cannot seem to find this anywhere and if anyone can even just give me a link I would be very appreciative.
We are trying to turn on SSHA hashing in openLDAP. By default it stores passwords in plaintext, which I think is criminal but hey I am an AD guy so what do I know. But you would think that they would make it easy to find the information needed to turn on hashing if you so choose. And wouldn't you choose?
","When you tried to store userPassword attribute in add/modify LDAP operations,   userPassword value is stored as plain text.  But you can override this behavior using ppolicy_hash_cleartext option in  ppolicy overlay module in OpenLDAP.  Once you enable it,  when client sends a plain text password, it is stored as SSHA by default. You can find more details on enabling hash password in OpenLADP from here
","33994","<hash><passwords><salt><openldap><ssha>","8","2","5","2019-10-30 13:13:55","11748013","2","3","","","","2012-07-31 00:30:01",""
"11731547","How do you turn on password hashing (SSHA) in openLDAP","For the life of me, I cannot seem to find this anywhere and if anyone can even just give me a link I would be very appreciative.
We are trying to turn on SSHA hashing in openLDAP. By default it stores passwords in plaintext, which I think is criminal but hey I am an AD guy so what do I know. But you would think that they would make it easy to find the information needed to turn on hashing if you so choose. And wouldn't you choose?
","This is an old question, but still relevant. It's no longer recommended to use SSHA (ie. SHA-1) due to its relatively easy brute-forcing. 
A more secure hashing algorithm is SHA-512. A stronger hash can be generated on the client side with OpenSSL 1.1 like this:
_generate_password_hash() {
  local plaintext; plaintext=""$1""

  command printf ""{CRYPT}%s"" ""$(openssl passwd -6 -stdin <<< ""${plaintext}"")""
}

This will output a string such as:
{CRYPT}$6$SGIWzAbjh.3WoQQJ$vEFlcRBQpd2fJ8dxcbojr83pjQcXcJ.InRMzNRryTQ//fMYJoCRFWAPn22EvJyDikG.MNuUqRYqQtI97Clj2F0

Notice the {CRYPT} instead of {SSHA} in the beginning.
You may apply the password for example with ldapmodify:
ldapmodify -h ""${LDAP_HOST}"" -D cn=user,dc=example,dc=com -W <<EOF
dn: cn=user,dc=example,dc=com
changetype: modify
replace: userPassword
userPassword: $(_generate_password_hash NEW_PASSWORD_HERE)
EOF

Notice that LibreSSL has a different set of hashing algorithms available. Check your actual OpenSSL version with openssl version if openssl passwd --help doesn't show the -6 option.
","33994","<hash><passwords><salt><openldap><ssha>","8","0","5","2019-10-30 13:13:55","11748013","2","3","","","","2012-07-31 00:30:01",""
"277044","Do I need to store the salt with bcrypt?","bCrypt's javadoc has this code for how to encrypt a password:
String pw_hash = BCrypt.hashpw(plain_password, BCrypt.gensalt()); 

To check whether a plaintext password matches one that has been hashed previously, use the checkpw method:
if (BCrypt.checkpw(candidate_password, stored_hash))
    System.out.println(""It matches"");
else
    System.out.println(""It does not match"");

These code snippets imply to me that the randomly generated salt is thrown away. Is this the case, or is this just a misleading code snippet?
","The salt is incorporated into the hash (encoded in a base64-style format).
For example, in traditional Unix passwords the salt was stored as the first two characters of the password. The remaining characters represented the hash value. The checker function knows this, and pulls the hash apart to get the salt back out.
","31782","<java><encryption><passwords><salt><bcrypt>","183","210","1","2013-06-21 16:46:24","277057","0","36","","","","2008-11-10 04:14:55",""
"15884248","How to create two way encode/decode methods using use-specific key - PHP?","I need two functions/methods, one to encode, one to decode. This is not for storing passwords. Each user will have a specific key/salt to encode the data.
This is how I would like it to work:
function encode($str, $key) {
    // something fancy
}

function decode($str, $key) {
    // something fancy
}

$key = $logged_in_user->get_key();
$plain = 'abc abc 123 123';
$encoded_data = encode($plain, $key);
// some_fancy_encrypted_data_that_is_really_cooooool
$decoded_data = decode($encoded_data, $key);
// abc abc 123 123

Another thing is that every time I use this function it needs to return the same thing every time I use the encode function with the same user key.
How would I do this??
","$myVarIWantToEncodeAndDecode

Define key (salt, broth etc..): $key = ""#&$sdfdfs789fs7d"";
To encode:
$encoded = base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_256, md5($key), $myVarIWantToEncodeAndDecode, MCRYPT_MODE_CBC, md5(md5($key))));

To decode:
$decoded = rtrim(mcrypt_decrypt(MCRYPT_RIJNDAEL_256, md5($key), base64_decode($encoded), MCRYPT_MODE_CBC, md5(md5($key))), ""\0"");

Note: mcrypt_decrypt has been DEPRECATED as of PHP 7.1.0. Relying on this function is highly discouraged.
","29055","<php><encryption><encode><salt>","14","47","1","2017-10-16 04:10:41","15884537","5","6","2153758","","2013-04-08 16:38:30","2013-04-08 16:25:34",""
"7303103","Java AES Encryption with salt","Alright, turns out I suck at Encryption/Decryption. I just dont get it.
How can I make Java encrypt String message1 = ""hello world""; with String salt = ""mySalt""; using AES encryption? also how can I decrypt it once encrypted?
If you have the time to provide the most basic code, it would help me a lot.
Also 1 general question about AES encryption, using the same salt, will the same message always have the same encryption?
Thanks in advance.
","AES doesn't have a concept of a salt.  It just takes data, and a key.  For the same input, it will always generate the same output.
How you combine your message with your salt is up to you.  String concatenation is probably sufficient.  But note that salts don't really make a lot of sense for something like AES, because it's not a hash algorithm.
","26924","<java><encryption><aes><salt>","9","6","4","2018-02-07 15:50:40","7303118","3","1","129570","","2011-09-05 01:16:25","2011-09-05 01:00:45",""
"7303103","Java AES Encryption with salt","Alright, turns out I suck at Encryption/Decryption. I just dont get it.
How can I make Java encrypt String message1 = ""hello world""; with String salt = ""mySalt""; using AES encryption? also how can I decrypt it once encrypted?
If you have the time to provide the most basic code, it would help me a lot.
Also 1 general question about AES encryption, using the same salt, will the same message always have the same encryption?
Thanks in advance.
","When you use AES with a salt value, salt value differs from the text to encrypt - but the key remains the same - in that case you need to also store the salt value as well..
Here is a good example...
","26924","<java><encryption><aes><salt>","9","1","4","2018-02-07 15:50:40","7303118","3","1","129570","","2011-09-05 01:16:25","2011-09-05 01:00:45",""
"7303103","Java AES Encryption with salt","Alright, turns out I suck at Encryption/Decryption. I just dont get it.
How can I make Java encrypt String message1 = ""hello world""; with String salt = ""mySalt""; using AES encryption? also how can I decrypt it once encrypted?
If you have the time to provide the most basic code, it would help me a lot.
Also 1 general question about AES encryption, using the same salt, will the same message always have the same encryption?
Thanks in advance.
","Always salt your AES files. The reason for this is say you have a directory of JPEG files that are cipher encrypted with the same password but don't have a salt. If somebody gets hold of those files they will see all the files start with the same bytes (as that is the JPEG header and the same passphrase will be always encrypt to the same values until the bytes start to differ, at least with a CBC), they will also know what the first blocks of the file will look like unencrypted. Even if they don't know what type of files they are, they can probably guess the type from the length of the lead in that are similar and the various file formats out there.
Knowing this, they can reverse engineer your password in a manner similar to rainbow tables/brute force. Salting won't stop this happening, but will make it really hard to crack as every file (after the salt) will be different so file type identification is difficult, plus they would have to generate a rainbow table for each salt or the computational overhead of creating an Initialization Vector for the salt.
OpenSSL stores the salt in the file
e.g. I created a file using this command with a password of 'password':
echo ""randomprhase"" | openssl aes-128-cbc -out message.enc
Here is the hexdump of the resulting file:-

[james@web openssltest]$ hexdump message.enc
  0000000 6153 746c 6465 5f5f 7eaa c4fd 63d8 8c8c
  0000010 9519 75c9 0497 d449 27f5 2c91 0d34 5ceb
  0000020

And the same data when I ran the encryption again:-

[james@web openssltest]$ hexdump message1.enc
  0000000 6153 746c 6465 5f5f a876 5394 53f1 bf1a
  0000010 adcb e1cd dba9 8034 cf13 8b3f c37c 5048
  0000020

The first 4 bytes say that the file is salted (6153 746c 6465 5f5f) and will always be the same.
The next 4 bytes is the random salt (7eaa c4fd 63d8 8c8 for first file & a876 5394 53f1 bf1a for the second file)
OpenSSL will take this salt and build the Initialization Vector (IV), being an MD5 hash of the password + salt repeated 3 times. This IV is then used to encrypt the file. 
Note the payload of the last 8 bytes in each case is different.
If we ran the same command while not salting:
[james@web openssltest]$ echo ""randomprhase"" | openssl aes-128-cbc -nosalt -out nosalt.enc
[james@web openssltest]$ echo ""randomprhase"" | openssl aes-128-cbc -nosalt -out nosalt1.enc

[james@web openssltest]$ hexdump nosalt.enc
  0000000 947e f4ab 6dd7 c548 89e4 b587 82f4 5136
  0000010
[james@web openssltest]$ hexdump nosalt1.enc
  0000000 947e f4ab 6dd7 c548 89e4 b587 82f4 5136
  0000010

Notice that when I repeated it using the same password and specified not to salt the payloads are identical.
In a Java implementation you can store your salt separately but worth spending your time writing something that emulates the OpenSSL implementation so you don't have to rely on your own code to decrypt a file (especially if you lose your code at some point in the future, encryption can thwart you as much as it can thwart an attacker).
","26924","<java><encryption><aes><salt>","9","3","4","2018-02-07 15:50:40","7303118","3","1","129570","","2011-09-05 01:16:25","2011-09-05 01:00:45",""
"7303103","Java AES Encryption with salt","Alright, turns out I suck at Encryption/Decryption. I just dont get it.
How can I make Java encrypt String message1 = ""hello world""; with String salt = ""mySalt""; using AES encryption? also how can I decrypt it once encrypted?
If you have the time to provide the most basic code, it would help me a lot.
Also 1 general question about AES encryption, using the same salt, will the same message always have the same encryption?
Thanks in advance.
","With Spring Security Crypto, it is simplified (mainly because they default to the password based encryption rather than other forms):
final String password = ""A private password that you need to keep secret."";  
final String salt = KeyGenerators.string().generateKey();
TextEncryptor encryptor = Encryptors.text(password, salt);

String cipherText = encryptor.encrypt(textToEncrypt);

String decryptedText = encryptor.decrypt(cipherText);

AES is just a cipher, and you can use an IV with the text you are encrypting.
With symmetric encryption, the salt is used for the key/secret that you encrypt with, as you can see above.
In the real world you will have to deal with distributed systems, shared keys and salts across the cluster, etc, etc. Lots of fun.
Spring Security is a thin abstraction over JCE, so it's easy to adapt if you don't use Spring itself.
","26924","<java><encryption><aes><salt>","9","2","4","2018-02-07 15:50:40","7303118","3","1","129570","","2011-09-05 01:16:25","2011-09-05 01:00:45",""
"693288","how do I create a mySQL user with hash('sha256', $salt . $password)?","I must be missing something.
I want to set up a database user account for select-only transactions but mysql is not letting me choose the hash method for a password on creating a user account.
this fails:
GRANT SELECT ON myDB.* TO 'selectuser'@'localhost' 
IDENTIFIED BY hash('sha256', 'salted-myfakelongrandompasswordstring');

ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'hash('sha256', 'salted-myfakelongrandompasswordstring')' at line 1
this passes:
GRANT SELECT ON myDB.* TO 'selectuser'@'localhost' 
IDENTIFIED BY 'salted-myfakelongrandompasswordstring';

I checked the phpinfo page and the sha256 hash engine is already enabled.
is there a way to change the default hashing algorithm for mysql, or is the syntax just incorrect on my SQL?
","This documentation page seems to indicate that sha256 is not implemented in MySQL:

Also, regarding the mentioned exploit
  of sha1, there are stronger versions
  like sha256, sha384, sha512 etc. but
  mysql does not implement them; they
  would have to be implemented in code.

","24934","<mysql><hash><passwords><salt>","4","1","2","2009-05-25 17:42:25","693326","0","1","70870","42","2009-03-28 18:50:04","2009-03-28 18:44:04",""
"693288","how do I create a mySQL user with hash('sha256', $salt . $password)?","I must be missing something.
I want to set up a database user account for select-only transactions but mysql is not letting me choose the hash method for a password on creating a user account.
this fails:
GRANT SELECT ON myDB.* TO 'selectuser'@'localhost' 
IDENTIFIED BY hash('sha256', 'salted-myfakelongrandompasswordstring');

ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'hash('sha256', 'salted-myfakelongrandompasswordstring')' at line 1
this passes:
GRANT SELECT ON myDB.* TO 'selectuser'@'localhost' 
IDENTIFIED BY 'salted-myfakelongrandompasswordstring';

I checked the phpinfo page and the sha256 hash engine is already enabled.
is there a way to change the default hashing algorithm for mysql, or is the syntax just incorrect on my SQL?
","No, you shouldn't use your own password-hashing for MySQL authentication.  
MySQL uses its own password-hashing function (PASSWORD()), which produces a 41-byte hex string (based on applying SHA1 to the input twice).  Unfortunately, a salt is not used.
If you were able to use GRANT in the manner you show in your question, then MySQL would apply its PASSWORD() function to the string output of the hash() function.  Subsequently, when you want to log in, you would have to enter the 256-bit hash of your password, for it to match what is in the MySQL authentication database.
Also, MySQL supports the SHA2() family of hash functions as of MySQL 6.0.5.  
The hash() function is something you're probably remembering from PHP.  It is not part of MySQL.

update: I attended the MySQL Conference this week and found out that they are totally changing their roadmap for future product version numbers.  The SHA2() function is currently part of the MySQL source, but it's undetermined what product version that corresponds to.  Also, you need MySQL built with OpenSSL/YaSSL support, for SHA2() to work.

Re your comment:  Typically MySQL authentication is totally separate from user account authentication in a given web app (this is best practice for several reasons).
Yes, you need to hardcode the username/password for MySQL authentication for your web app.  Could be in, but even better would be a config file.  Of course, put these outside the web root.
When a user needs to log in, compute the hash() of their input password, combined with the salt value on record for their account.  Then compare this to the hash stored in the database for that user.  In pseudocode:
$salt = $db->query(""SELECT salt FROM Accounts WHERE account_name = ?"", 
    $input_account_name);

$password_hash = hash('sha256', $salt + $input_password)

$is_password_correct = $db->query(""SELECT password_hash = ? 
    FROM Accounts WHERE account_name = ?"",
    $password_hash, $input_account_name);

","24934","<mysql><hash><passwords><salt>","4","4","2","2009-05-25 17:42:25","693326","0","1","70870","42","2009-03-28 18:50:04","2009-03-28 18:44:04",""
"18268502","How to generate SALT value in Java?","What's the best way to produce a SALT value in Java as a String that's at least 32 bytes long?
","final Random r = new SecureRandom();
byte[] salt = new byte[32];
r.nextBytes(salt);
/** String encodedSalt = Base64.encodeBase64String(salt); */

","23143","<java><spring-security><salt>","30","44","2","2014-03-31 12:30:53","18268562","2","11","","","","2013-08-16 07:56:18",""
"18268502","How to generate SALT value in Java?","What's the best way to produce a SALT value in Java as a String that's at least 32 bytes long?
","In SpringSecurity you can use org.springframework.security.crypto.keygen.KeyGenerators
http://static.springsource.org/spring-security/site/docs/3.1.x/apidocs/org/springframework/security/crypto/keygen/KeyGenerators.html
http://docs.spring.io/spring-security/site/docs/3.2.x/reference/htmlsingle/#spring-security-crypto-keygenerators
","23143","<java><spring-security><salt>","30","2","2","2014-03-31 12:30:53","18268562","2","11","","","","2013-08-16 07:56:18",""
"1645161","Salt Generation and open source software","As I understand it, the best practice for generating salts is to use some cryptic formula (or even magic constant) stored in your source code.
I'm working on a project that we plan on releasing as open source, but the problem is that with the source comes the secret formula for generating salts, and therefore the ability to run rainbow table attacks on our site.
I figure that lots of people have contemplated this problem before me, and I'm wondering what the best practice is. It seems to me that there is no point having a salt at all if the code is open source, because salts can be easily reverse-engineered.
Thoughts?
","Really salts just need to be unique for each entry.  Even if the attacker can calculate what the salt is, it makes the rainbow table extremely difficult to create.  This is because the salt is added to the password before it is hashed, so it effectively adds to the total number of entries the rainbow table must contain to have a list of all possible values for a password field. 
","22778","<security><open-source><encryption><salt><rainbowtable>","70","18","6","2013-09-14 02:52:18","1645183","0","90","97000","","2009-10-30 15:12:00","2009-10-29 17:00:59",""
"1645161","Salt Generation and open source software","As I understand it, the best practice for generating salts is to use some cryptic formula (or even magic constant) stored in your source code.
I'm working on a project that we plan on releasing as open source, but the problem is that with the source comes the secret formula for generating salts, and therefore the ability to run rainbow table attacks on our site.
I figure that lots of people have contemplated this problem before me, and I'm wondering what the best practice is. It seems to me that there is no point having a salt at all if the code is open source, because salts can be easily reverse-engineered.
Thoughts?
","Since questions about salting hashes come along on a quite regular basis and there seems to be quite some confusion about the subject, I extended this answer.

What is a salt?
A salt is a random set of bytes of a fixed length that is added to the input of a hash algorithm.

Why is salting (or seeding) a hash useful?
Adding a random salt to a hash ensures that the same password will produce many different hashes. The salt is usually stored in the database, together with the result of the hash function.
Salting a hash is good for a number of reasons:

Salting greatly increases the difficulty/cost of precomputated attacks (including rainbow tables)
Salting makes sure that the same password does not result in the same hash. 
This makes sure you cannot determine if two users have the same password. And, even more important, you cannot determine if the same person uses the same password across different systems.
Salting increases the complexity of passwords, thereby greatly decreasing the effectiveness of both Dictionary- and Birthday attacks. (This is only true if the salt is stored separate from the hash).
Proper salting greatly increases the storage need for precomputation attacks, up to the point where they are no longer practical. (8 character case-sensitive alpha-numeric passwords with 16 bit salt, hashed to a 128 bit value, would take up just under 200 exabytes without rainbow reduction).


There is no need for the salt to be secret.
A salt is not a secret key, instead a salt 'works' by making the hash function specific to each instance. With salted hash, there is not one hash function, but one for every possible salt value. This prevent the attacker from attacking N hashed passwords for less than N times the cost of attacking one password. This is the point of the salt.
A ""secret salt"" is not a salt, it is called a ""key"", and it means that you are no longer computing a hash, but a Message Authentication Code (MAC). Computing MAC is tricky business (much trickier than simply slapping together a key and a value into a hash function) and it is a very different subject altogether.
The salt must be random for every instance in which it is used. This ensures that an attacker has to attack every salted hash separately.
If you rely on your salt (or salting algorithm) being secret, you enter the realms of Security Through Obscurity (won't work). Most probably, you do not get additional security from the salt secrecy; you just get the warm fuzzy feeling of security. So instead of making your system more secure, it just distracts you from reality.

So, why does the salt have to be random?
Technically, the salt should be unique. The point of the salt is to be distinct for each hashed password. This is meant worldwide. Since there is no central organization which distributes unique salts on demand, we have to rely on the next best thing, which is random selection with an unpredictable random generator, preferably within a salt space large enough to make collisions improbable (two instances using the same salt value).
It is tempting to try to derive a salt from some data which is ""presumably unique"", such as the user ID, but such schemes often fail due to some nasty details:

If you use for example the user ID, some bad guys, attacking distinct systems, may just pool their resources and create precomputed tables for user IDs 1 to 50. A user ID is unique system-wide but not worldwide.
The same applies to the username: there is one ""root"" per Unix system, but there are many roots in the world. A rainbow table for ""root"" would be worth the effort, since it could be applied to millions of systems. Worse yet, there are also many ""bob"" out there, and many do not have sysadmin training: their passwords could be quite weak.
Uniqueness is also temporal. Sometimes, users change their password. For each new password, a new salt must be selected. Otherwise, an attacker obtained the hash of the old password and the hash of the new could try to attack both simultaneously.

Using a random salt obtained from a cryptographically secure, unpredictable PRNG may be some kind of overkill, but at least it provably protects you against all those hazards. It's not about preventing the attacker from knowing what an individual salt is, it's about not giving them the big, fat target that will be used on a substantial number of potential targets. Random selection makes the targets as thin as is practical.

In conclusion:
Use a random, evenly distributed, high entropy salt. Use a new salt whenever you create a new password or change a password. Store the salt along with the hashed password. Favor big salts (at least 10 bytes, preferably 16 or more).
A salt does not turn a bad password into a good password. It just makes sure that the attacker will at least pay the dictionary attack price for each bad password he breaks.

Usefull sources:
stackoverflow.com: Non-random salt for password hashes
Bruce Schneier: Practical Cryptography (book)
Matasano Security: Enough with the Rainbow Tables
usenix.org: Unix crypt used salt since 1976
owasp.org: Why add salt
openwall.com: Salts 
Disclaimer:
I'm not a security expert. (Although this answer was reviewed by Thomas Pornin)
If any of the security professionals out there find something wrong, please do comment or edit this wiki answer.
","22778","<security><open-source><encryption><salt><rainbowtable>","70","226","6","2013-09-14 02:52:18","1645183","0","90","97000","","2009-10-30 15:12:00","2009-10-29 17:00:59",""
"1645161","Salt Generation and open source software","As I understand it, the best practice for generating salts is to use some cryptic formula (or even magic constant) stored in your source code.
I'm working on a project that we plan on releasing as open source, but the problem is that with the source comes the secret formula for generating salts, and therefore the ability to run rainbow table attacks on our site.
I figure that lots of people have contemplated this problem before me, and I'm wondering what the best practice is. It seems to me that there is no point having a salt at all if the code is open source, because salts can be easily reverse-engineered.
Thoughts?
","You can just generate a random salt for each record at runtime. For example, say you're storing hashed user passwords in a database. You can generate an 8-character random string of lower- and uppercase alphanumeric characters at runtime, prepend that to the password, hash that string, and store it in the database. Since there are 628 possible salts, generating rainbow tables (for every possible salt) will be prohibitively expensive; and since you're using a unique salt for each password record, even if an attacker has generated a couple matching rainbow tables, he still won't be able to crack every password.
You can change the parameters of your salt generation based on your security needs; for example, you could use a longer salt, or you could generate a random string that also contains punctuation marks, to increase the number of possible salts.
","22778","<security><open-source><encryption><salt><rainbowtable>","70","1","6","2013-09-14 02:52:18","1645183","0","90","97000","","2009-10-30 15:12:00","2009-10-29 17:00:59",""
"1645161","Salt Generation and open source software","As I understand it, the best practice for generating salts is to use some cryptic formula (or even magic constant) stored in your source code.
I'm working on a project that we plan on releasing as open source, but the problem is that with the source comes the secret formula for generating salts, and therefore the ability to run rainbow table attacks on our site.
I figure that lots of people have contemplated this problem before me, and I'm wondering what the best practice is. It seems to me that there is no point having a salt at all if the code is open source, because salts can be easily reverse-engineered.
Thoughts?
","Use a random function generator to generate the salt, and store it in the database, make salt one per row, and store it in the database.
I like how salt is generated in django-registration. Reference: http://bitbucket.org/ubernostrum/django-registration/src/tip/registration/models.py#cl-85
salt = sha_constructor(str(random.random())).hexdigest()[:5]
activation_key = sha_constructor(salt+user.username).hexdigest()
return self.create(user=user,
           activation_key=activation_key)

He uses a combination of sha generated by a random number and the username to generate a hash. 
Sha itself is well known for being strong and unbreakable. Add multiple dimensions to generate the salt itself, with random number, sha and the user specific component, you have  unbreakable security!
","22778","<security><open-source><encryption><salt><rainbowtable>","70","0","6","2013-09-14 02:52:18","1645183","0","90","97000","","2009-10-30 15:12:00","2009-10-29 17:00:59",""
"1645161","Salt Generation and open source software","As I understand it, the best practice for generating salts is to use some cryptic formula (or even magic constant) stored in your source code.
I'm working on a project that we plan on releasing as open source, but the problem is that with the source comes the secret formula for generating salts, and therefore the ability to run rainbow table attacks on our site.
I figure that lots of people have contemplated this problem before me, and I'm wondering what the best practice is. It seems to me that there is no point having a salt at all if the code is open source, because salts can be easily reverse-engineered.
Thoughts?
","Since Unix became popular, the right way to store a password has been to append a random value (the salt) and hash it.  Save the salt away where you can get to it later, but where you hope the bad guys won't get it.
This has some good effects.  First, the bad guys can't just make a list of expected passwords like ""Password1"", hash them into a rainbow table, and go through your password file looking for matches.  If you've got a good two-byte salt, they have to generate 65,536 values for each expected password, and that makes the rainbow table a lot less practical.  Second, if you can keep the salt from the bad guys who are looking at your password file, you've made it much harder to calculate possible values.  Third, you've made it impossible for the bad guys to determine if a given person uses the same password on different sites.
In order to do this, you generate a random salt.  This should generate every number in the desired range with uniform probability.  This isn't difficult; a simple linear congruential random number generator will do nicely.
If you've got complicated calculations to make the salt, you're doing it wrong.  If you calculate it based on the password, you're doing it WAY wrong.  In that case, all you're doing is complicating the hash, and not functionally adding any salt.
Nobody good at security would rely on concealing an algorithm.  Modern cryptography is based on algorithms that have been extensively tested, and in order to be extensively tested they have to be well known.  Generally, it's been found to be safer to use standard algorithms rather than rolling one's own and hoping it's good.  It doesn't matter if the code is open source or not, it's still often possible for the bad guys to analyze what a program does.
","22778","<security><open-source><encryption><salt><rainbowtable>","70","7","6","2013-09-14 02:52:18","1645183","0","90","97000","","2009-10-30 15:12:00","2009-10-29 17:00:59",""
"1645161","Salt Generation and open source software","As I understand it, the best practice for generating salts is to use some cryptic formula (or even magic constant) stored in your source code.
I'm working on a project that we plan on releasing as open source, but the problem is that with the source comes the secret formula for generating salts, and therefore the ability to run rainbow table attacks on our site.
I figure that lots of people have contemplated this problem before me, and I'm wondering what the best practice is. It seems to me that there is no point having a salt at all if the code is open source, because salts can be easily reverse-engineered.
Thoughts?
","In the case of a desktop application that encrypts data and send it on a remote server, how do you consider using a different salt each time?
Using PKCS#5 with the user's password, it needs a salt to generate an encryption key, to encrypt the data. I know that keep the salt hardcoded (obfuscated) in the desktop application is not a good idea. 
If the remote server must NEVER know the user's password, is it possible to user different salt each time? If the user use the desktop application on another computer, how will it be able to decrypt the data on the remote server if he does not have the key (it is not hardcoded in the software) ?
","22778","<security><open-source><encryption><salt><rainbowtable>","70","0","6","2013-09-14 02:52:18","1645183","0","90","97000","","2009-10-30 15:12:00","2009-10-29 17:00:59",""
"4351702","What is ""salt"" when relating to MYSQL sha1?","What is ""salt"" when relating to MYSQL sha1? I have no idea what salt is when relating to sha1 password encryptions? Can someone please explain what it is?
","A salt is appended to the plaintext (or vice versa) before hashing in order to make dictionary lookups more expensive.
","22713","<mysql><sha1><salt>","8","5","3","2012-03-11 20:06:28","4351749","0","4","","","","2010-12-04 03:05:03",""
"4351702","What is ""salt"" when relating to MYSQL sha1?","What is ""salt"" when relating to MYSQL sha1? I have no idea what salt is when relating to sha1 password encryptions? Can someone please explain what it is?
","salt is nothing but an string you attach to the password, either as a constant or through a algorithm 
which makes it harder for anyone who breached your security and gain access to your stored password, which in return makes in next to impossible for him to use rainbow dictionaries to unlock what the real password is, which in a hacker point of view can be usefull since alot of people use the same password in alot of diffrent sites
$salt = ""this is a salt"";
$password = 'this is an password';
$hash = sha1($salt.$password);

That's how you basically could salt a password
","22713","<mysql><sha1><salt>","8","9","3","2012-03-11 20:06:28","4351749","0","4","","","","2010-12-04 03:05:03",""
"4351702","What is ""salt"" when relating to MYSQL sha1?","What is ""salt"" when relating to MYSQL sha1? I have no idea what salt is when relating to sha1 password encryptions? Can someone please explain what it is?
","A salt is a value that is added to a password (or other secret) which you want to hash one way.  This means it could be before, after, or somewhere inside the password, as long as its position and value is consistent for a given supplied password.
What this does is it mitigates dictionary attacks - basically dictionaries of common passwords pre-hashed with no salt - from being used to ""guess"" a one way password as long as the attacker does not know the hash.  If every password has a different hash then it makes it very difficult for an attacker to create a dictionary optimized for cracking your passwords (they would need a dictionary for each separate salt and they would also need to know where the salt was placed in each password).
Of course for all of this to be applicable an attacker must have the hashes of your passwords in the first place.  This has nothing to do with attacking passwords by guessing them through some input prompt.
Regarding MySQL specifically if you provide a salt when hashing a password, make sure you record what that salt was somewhere.  Then when a user attempts authentication you combine that recorded salt value with the password (during the call to crypt for example) and if the resulting hash matches then they have entered the correct password.  (Note that at no time is the hashing of a password reversed; thus one way.)
","22713","<mysql><sha1><salt>","8","14","3","2012-03-11 20:06:28","4351749","0","4","","","","2010-12-04 03:05:03",""
"2863034","[Sql-Server]what data type to use for password salt and hash values and what length?","I am generating salt and hash values from my passwords by using,
string salt = CreateSalt(TxtPassword.Text.Length);
string hash = CreatePasswordHash(TxtPassword.Text, salt);

private static string CreateSalt(int size)
{
    //Generate a cryptographic random number.
    RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
    byte[] buff = new byte[size];
    rng.GetBytes(buff);

    // Return a Base64 string representation of the random number.
    return Convert.ToBase64String(buff);
}

private static string CreatePasswordHash(string pwd, string salt)
{
    string saltAndPwd = String.Concat(pwd, salt);
    string hashedPwd =
     FormsAuthentication.HashPasswordForStoringInConfigFile(
     saltAndPwd, ""sha1"");

    return hashedPwd;
}

What datatype you would suggest for storing these values in sql server? Any suggestion...
Salt:9GsPWpFD
Hash:E778AF0DC5F2953A00B35B35D80F6262CDBB8567
","ASPNET_DB says this - can't go wrong.
Password nvarchar(128) NOT NULL,
PasswordSalt nvarchar(128) NOT NULL,

while 128 may seem like a lot, various types of encryption can result in larger strings than you started out with. There is absolutely no reason not to follow the lead of the very smart people who have spend thousands of man hours developing the asp.net membership system.
","22613","<sql-server-2005><hash><types><passwords><salt>","15","8","2","2010-05-19 05:50:37","2863060","1","6","","","","2010-05-19 05:19:34",""
"2863034","[Sql-Server]what data type to use for password salt and hash values and what length?","I am generating salt and hash values from my passwords by using,
string salt = CreateSalt(TxtPassword.Text.Length);
string hash = CreatePasswordHash(TxtPassword.Text, salt);

private static string CreateSalt(int size)
{
    //Generate a cryptographic random number.
    RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
    byte[] buff = new byte[size];
    rng.GetBytes(buff);

    // Return a Base64 string representation of the random number.
    return Convert.ToBase64String(buff);
}

private static string CreatePasswordHash(string pwd, string salt)
{
    string saltAndPwd = String.Concat(pwd, salt);
    string hashedPwd =
     FormsAuthentication.HashPasswordForStoringInConfigFile(
     saltAndPwd, ""sha1"");

    return hashedPwd;
}

What datatype you would suggest for storing these values in sql server? Any suggestion...
Salt:9GsPWpFD
Hash:E778AF0DC5F2953A00B35B35D80F6262CDBB8567
","We store our passwords as a binary SHA512 hash
","22613","<sql-server-2005><hash><types><passwords><salt>","15","1","2","2010-05-19 05:50:37","2863060","1","6","","","","2010-05-19 05:19:34",""
"8067564","Spring Security Salt","I'm trying to add a salt when adding a new user/pwd, but the docs seem to be missing how to do this.
Here's a basic example:
<authentication-manager>
    <authentication-provider user-service-ref=""userDetailsService"">
        <password-encoder hash=""md5"">
            <salt-source user-property=""username""/>
        </password-encoder>
    </authentication-provider>
</authentication-manager>

You can see by the example that neither a custom salt or custom password encoder is used.
So, how would I wire the Salt in when adding a new user/pwd?  I'd assume it would be something along the lines of:
@Autowired SaltSource saltSource;
protected void foo(final CustomUser user) {
    final PasswordEncoder encoder = new Md5PasswordEncoder();
    user.setPassword(encoder.encodePassword(user.getPassword(), saltSource));
}

However, since I am using the default salt/password encoders and I don't have a custom salt bean the autowire would fail.
Any clue how to make this work?
","You don't autowire the SaltSource when adding user. The SaltSource is an abstraction used by Spring to provide the source of the salt for password checking only.
To create a properly encoded password hash You just past the salt itself to the PasswordEncoder - the value of username property, not the SaltSource:
private PasswordEncoder encoder = new Md5PasswordEncoder();

public User createUser(String username, String plainTextPassword) {
    User u = new User();
    u.setUsername(username);
    u.setPassword(encoder.encodePassword(plainTextPassword, username));
    getEntityManager().persist(u); // optional
    return u;
}


Moreover the autowire of SaltSource won't work until it's defined as an inner bean. You could define the ReflectionSaltSource as top level bean and pass it's ID to the password-encoder, i.e.:
<bean id=""saltSource""
    class=""org.springframework.security.authentication.dao.ReflectionSaltSource""
    p:userPropertyToUse=""username"" />

<bean id=""passwordEncoder"" 
    class=""org.springframework.security.authentication.encoding.Md5PasswordEncoder"" />

<bean id=""daoAuthenticationProvider""
    class=""org.springframework.security.authentication.dao.DaoAuthenticationProvider""
    p:passwordEncoder-ref=""passwordEncoder""
    p:saltSource-ref=""saltSource""
    p:userDetailsService-ref=""userDetailsService"" />

<authentication-manager>
    <authentication-provider ref=""daoAuthenticationProvider"" />
</authentication-manager>

And then:
@Autowired private PasswordEncoder passwordEncoder;
@Autowired private SaltSource saltSource;

public CustomUserDetails createUser(String username, String plainTextPassword) {
    CustomUserDetails u = new CustomUserDetails();
    u.setUsername(username);
    u.setPassword(passwordEncoder.encodePassword(
            plainTextPassword, saltSource.getSalt(u)));
    getEntityNamager().persist(u); // optional
    return u;
} 

","21953","<security><spring><salt>","23","34","1","2012-05-01 13:53:19","8068064","0","14","","","","2011-11-09 15:47:14",""
"7044785","What is the safest way to store a password using Code Igniter?","I am using Code Igniter for my current project.
As of now, I am using MD5 for password hashing, but I have read at a lot of places, that it is not a good practice to do so.
What should I go with?

Using a salt
Or should I use bcrypt

Also, if bcrypt is recommended, then how to use it with Code Igniter?
EDIT
I have put these files in application/libraries

PasswordHash.php
c/Makefile
c/crypt_private.c

In my controller, I am using this code -
$params = array(
       'phpass_hash_strength' => 8,
           'phpass_hash_portable' => FALSE
       );
$this->load->library('PasswordHash', $params);
$password = $this->passwordhash->HashPassword($pwd);

I am getting these errors -
A PHP Error was encountered

Severity: Notice

Message: Uninitialized string offset: 3

Filename: libraries/PasswordHash.php

Line Number: 116


A PHP Error was encountered

Severity: Warning

Message: strpos() [function.strpos]: Empty delimiter

Filename: libraries/PasswordHash.php

Line Number: 116


Update
Removed PasswordHash.php, using SimpleLoginSecure now.
","why use md5() when it is just as easy to use sha1() ?
Also salting the passwords is always a good idea as it effectively removes the threat of a Rainbow Table attack
In my experience a salted SHA1 hash is pleanty secure for 99% of web application situations.
","20586","<codeigniter><password-protection><salt><bcrypt><password-hash>","12","5","3","2016-08-08 17:13:54","7045061","0","7","3425536","","2015-07-15 01:09:23","2011-08-12 18:39:06",""
"7044785","What is the safest way to store a password using Code Igniter?","I am using Code Igniter for my current project.
As of now, I am using MD5 for password hashing, but I have read at a lot of places, that it is not a good practice to do so.
What should I go with?

Using a salt
Or should I use bcrypt

Also, if bcrypt is recommended, then how to use it with Code Igniter?
EDIT
I have put these files in application/libraries

PasswordHash.php
c/Makefile
c/crypt_private.c

In my controller, I am using this code -
$params = array(
       'phpass_hash_strength' => 8,
           'phpass_hash_portable' => FALSE
       );
$this->load->library('PasswordHash', $params);
$password = $this->passwordhash->HashPassword($pwd);

I am getting these errors -
A PHP Error was encountered

Severity: Notice

Message: Uninitialized string offset: 3

Filename: libraries/PasswordHash.php

Line Number: 116


A PHP Error was encountered

Severity: Warning

Message: strpos() [function.strpos]: Empty delimiter

Filename: libraries/PasswordHash.php

Line Number: 116


Update
Removed PasswordHash.php, using SimpleLoginSecure now.
","Use bcrypt.  This discussion came up here in the comments to my answer.  You can use a library such as phppass to really simplify the password encryption.
On the matter of salt.  Use it!  Otherwise somebody can simply go to this site and download the rainbow tables that will cover the large majority of passwords the average users chooses.  Especially with all the security leaks in the last few months, now is not the time to be saying you won't use something as simple to implement as random salt.
UPDATE
To use PHPPass with CI, download and extract the files from the phppass website, linked above.  Put the PasswordHash.php file into your CI application/libraries directory.
In your code, you then load the library via: $this->load->library('PasswordHash',array(8, FALSE));
Hashing passwords is then as simple as $this->PasswordHash->HashPassword($password);
To later check if a password is correct, it is as simple as:
$password = $_POST['password'];
$actualPassword = /*Get the hashed password from your db*/;

$check = $this->PasswordHash->CheckPassword($password, $actualPassword);

I've taken this demo from http://dev.myunv.com/articles/secure-passwords-with-phpass/ which gives you a lot more informations.  I've modified that tutorial slightly to utilize CI's loader which is why you don't need the include or new statements.
","20586","<codeigniter><password-protection><salt><bcrypt><password-hash>","12","16","3","2016-08-08 17:13:54","7045061","0","7","3425536","","2015-07-15 01:09:23","2011-08-12 18:39:06",""
"7044785","What is the safest way to store a password using Code Igniter?","I am using Code Igniter for my current project.
As of now, I am using MD5 for password hashing, but I have read at a lot of places, that it is not a good practice to do so.
What should I go with?

Using a salt
Or should I use bcrypt

Also, if bcrypt is recommended, then how to use it with Code Igniter?
EDIT
I have put these files in application/libraries

PasswordHash.php
c/Makefile
c/crypt_private.c

In my controller, I am using this code -
$params = array(
       'phpass_hash_strength' => 8,
           'phpass_hash_portable' => FALSE
       );
$this->load->library('PasswordHash', $params);
$password = $this->passwordhash->HashPassword($pwd);

I am getting these errors -
A PHP Error was encountered

Severity: Notice

Message: Uninitialized string offset: 3

Filename: libraries/PasswordHash.php

Line Number: 116


A PHP Error was encountered

Severity: Warning

Message: strpos() [function.strpos]: Empty delimiter

Filename: libraries/PasswordHash.php

Line Number: 116


Update
Removed PasswordHash.php, using SimpleLoginSecure now.
","Code Igniter has changed since the time this question was asked. But for the benefit of some who may not have come across the extensive documentation of CI or haven't seen this before, CI has an encryption class which provides a two-way data encryption using the Mcrypt library of PHP.
After initializing the class using:
$this->load->library('encrypt');

You can encrypt as follows:
$msg = 'My secret message';
$encrypted_string = $this->encrypt->encode($msg);

and decrypt as follows:
$encrypted_string = 'APANtByIGI1BpVXZTJgcsAG8GZl8pdwwa84';
$plaintext_string = $this->encrypt->decode($encrypted_string);

CI also has a non-decodable 1-way hashing:
$hash = $this->encrypt->sha1('Some string');

For more information see:
http://www.codeigniter.com/user_guide/libraries/encryption.html
","20586","<codeigniter><password-protection><salt><bcrypt><password-hash>","12","3","3","2016-08-08 17:13:54","7045061","0","7","3425536","","2015-07-15 01:09:23","2011-08-12 18:39:06",""
"1191112","Password hashing, salt and storage of hashed values","Suppose you were at liberty to decide how hashed passwords were to be stored in a DBMS.  Are there obvious weaknesses in a scheme like this one?
To create the hash value stored in the DBMS, take:

A value that is unique to the DBMS server instance as part of the salt,
And the username as a second part of the salt,
And create the concatenation of the salt with the actual password,
And hash the whole string using the SHA-256 algorithm,
And store the result in the DBMS.

This would mean that anyone wanting to come up with a collision should have to do the work separately for each user name and each DBMS server instance separately.  I'd plan to keep the actual hash mechanism somewhat flexible to allow for the use of the new NIST standard hash algorithm (SHA-3) that is still being worked on.
The 'value that is unique to the DBMS server instance' need not be secret - though it wouldn't be divulged casually.  The intention is to ensure that if someone uses the same password in different DBMS server instances, the recorded hashes would be different. Likewise, the user name would not be secret - just the password proper.
Would there be any advantage to having the password first and the user name and 'unique value' second, or any other permutation of the three sources of data?  Or what about interleaving the strings?
Do I need to add (and record) a random salt value (per password) as well as the information above?  (Advantage: the user can re-use a password and still, probably, get a different hash recorded in the database.  Disadvantage: the salt has to be recorded.  I suspect the advantage considerably outweighs the disadvantage.)
There are quite a lot of related SO questions - this list is unlikely to be comprehensive:

Encrypting/Hashing plain text passwords in database
Secure hash and salt for PHP passwords
The necessity of hiding the salt for a hash
Clients-side MD5 hash with time salt
Simple password encryption
Salt generation and Open Source software
Password hashes: fixed-length binary fields or single string field?

I think that the answers to these questions support my algorithm (though if you simply use a random salt, then the 'unique value per server' and username components are less important).
","Why not add a random salt to the password and hash that combination. Next concatenate the hash and salt to a single byte[] and store that in the db?
The advantage of a random salt is that the user is free to change it's username. The Salt doesn't have to be secret, since it's used to prevent dictionary attacks.
","19432","<security><encryption><hash><salt>","38","6","4","2019-04-10 16:39:05","1191124","8","29","-1","","2017-05-23 12:17:57","2009-07-27 23:01:43",""
"1191112","Password hashing, salt and storage of hashed values","Suppose you were at liberty to decide how hashed passwords were to be stored in a DBMS.  Are there obvious weaknesses in a scheme like this one?
To create the hash value stored in the DBMS, take:

A value that is unique to the DBMS server instance as part of the salt,
And the username as a second part of the salt,
And create the concatenation of the salt with the actual password,
And hash the whole string using the SHA-256 algorithm,
And store the result in the DBMS.

This would mean that anyone wanting to come up with a collision should have to do the work separately for each user name and each DBMS server instance separately.  I'd plan to keep the actual hash mechanism somewhat flexible to allow for the use of the new NIST standard hash algorithm (SHA-3) that is still being worked on.
The 'value that is unique to the DBMS server instance' need not be secret - though it wouldn't be divulged casually.  The intention is to ensure that if someone uses the same password in different DBMS server instances, the recorded hashes would be different. Likewise, the user name would not be secret - just the password proper.
Would there be any advantage to having the password first and the user name and 'unique value' second, or any other permutation of the three sources of data?  Or what about interleaving the strings?
Do I need to add (and record) a random salt value (per password) as well as the information above?  (Advantage: the user can re-use a password and still, probably, get a different hash recorded in the database.  Disadvantage: the salt has to be recorded.  I suspect the advantage considerably outweighs the disadvantage.)
There are quite a lot of related SO questions - this list is unlikely to be comprehensive:

Encrypting/Hashing plain text passwords in database
Secure hash and salt for PHP passwords
The necessity of hiding the salt for a hash
Clients-side MD5 hash with time salt
Simple password encryption
Salt generation and Open Source software
Password hashes: fixed-length binary fields or single string field?

I think that the answers to these questions support my algorithm (though if you simply use a random salt, then the 'unique value per server' and username components are less important).
","The salt just needs to be random and unique. It can be freely known as it doesn't help an attacker. Many systems will store the plain text salt in the database in the column right next to the hashed password.
The salt helps to ensure that if two people (User A and User B) happen to share the same password it isn't obvious. Without the random and unique salt for each password the hash values would be the same and obviously if the password for User A is cracked then User B must have the same password.
It also helps protect from attacks where a dictionary of hashes can be matched against known passwords. e.g. rainbow tables.
Also using an algorithm with a ""work factor"" built in also means that as computational power increases the work an algorithm has to go through to create the hash can also be increased. For example, bcrypt. This means that the economics of brute force attacks become untenable. Presumably it becomes much more difficult to create tables of known hashes because they take longer to create; the variations in ""work factor"" will mean more tables would have to be built.
","19432","<security><encryption><hash><salt>","38","31","4","2019-04-10 16:39:05","1191124","8","29","-1","","2017-05-23 12:17:57","2009-07-27 23:01:43",""
"1191112","Password hashing, salt and storage of hashed values","Suppose you were at liberty to decide how hashed passwords were to be stored in a DBMS.  Are there obvious weaknesses in a scheme like this one?
To create the hash value stored in the DBMS, take:

A value that is unique to the DBMS server instance as part of the salt,
And the username as a second part of the salt,
And create the concatenation of the salt with the actual password,
And hash the whole string using the SHA-256 algorithm,
And store the result in the DBMS.

This would mean that anyone wanting to come up with a collision should have to do the work separately for each user name and each DBMS server instance separately.  I'd plan to keep the actual hash mechanism somewhat flexible to allow for the use of the new NIST standard hash algorithm (SHA-3) that is still being worked on.
The 'value that is unique to the DBMS server instance' need not be secret - though it wouldn't be divulged casually.  The intention is to ensure that if someone uses the same password in different DBMS server instances, the recorded hashes would be different. Likewise, the user name would not be secret - just the password proper.
Would there be any advantage to having the password first and the user name and 'unique value' second, or any other permutation of the three sources of data?  Or what about interleaving the strings?
Do I need to add (and record) a random salt value (per password) as well as the information above?  (Advantage: the user can re-use a password and still, probably, get a different hash recorded in the database.  Disadvantage: the salt has to be recorded.  I suspect the advantage considerably outweighs the disadvantage.)
There are quite a lot of related SO questions - this list is unlikely to be comprehensive:

Encrypting/Hashing plain text passwords in database
Secure hash and salt for PHP passwords
The necessity of hiding the salt for a hash
Clients-side MD5 hash with time salt
Simple password encryption
Salt generation and Open Source software
Password hashes: fixed-length binary fields or single string field?

I think that the answers to these questions support my algorithm (though if you simply use a random salt, then the 'unique value per server' and username components are less important).
","I think you are over-complicating the problem. 
Start with the problem: 

Are you trying to protect weak passwords? 
Are you trying to mitigate against rainbow attacks? 

The mechanism you propose does protect against a simple rainbow attack, cause even if user A and user B have the SAME password, the hashed password will be different. It does, seem like a rather elaborate method to be salting a password which is overly complicated. 

What happens when you migrate the DB to another server? 


Can you change the unique, per DB value, if so then a global rainbow table can be generated, if not then you can not restore your DB. 


Instead I would just add the extra column and store a proper random salt. This would protect against any kind of rainbow attack. Across multiple deployments. 
However, it will not protect you against a brute force attack. So if you are trying to protect users that have crappy passwords, you will need to look elsewhere. For example if your users have 4 letter passwords, it could probably be cracked in seconds even with a salt and the newest hash algorithm. 
","19432","<security><encryption><hash><salt>","38","19","4","2019-04-10 16:39:05","1191124","8","29","-1","","2017-05-23 12:17:57","2009-07-27 23:01:43",""
"1191112","Password hashing, salt and storage of hashed values","Suppose you were at liberty to decide how hashed passwords were to be stored in a DBMS.  Are there obvious weaknesses in a scheme like this one?
To create the hash value stored in the DBMS, take:

A value that is unique to the DBMS server instance as part of the salt,
And the username as a second part of the salt,
And create the concatenation of the salt with the actual password,
And hash the whole string using the SHA-256 algorithm,
And store the result in the DBMS.

This would mean that anyone wanting to come up with a collision should have to do the work separately for each user name and each DBMS server instance separately.  I'd plan to keep the actual hash mechanism somewhat flexible to allow for the use of the new NIST standard hash algorithm (SHA-3) that is still being worked on.
The 'value that is unique to the DBMS server instance' need not be secret - though it wouldn't be divulged casually.  The intention is to ensure that if someone uses the same password in different DBMS server instances, the recorded hashes would be different. Likewise, the user name would not be secret - just the password proper.
Would there be any advantage to having the password first and the user name and 'unique value' second, or any other permutation of the three sources of data?  Or what about interleaving the strings?
Do I need to add (and record) a random salt value (per password) as well as the information above?  (Advantage: the user can re-use a password and still, probably, get a different hash recorded in the database.  Disadvantage: the salt has to be recorded.  I suspect the advantage considerably outweighs the disadvantage.)
There are quite a lot of related SO questions - this list is unlikely to be comprehensive:

Encrypting/Hashing plain text passwords in database
Secure hash and salt for PHP passwords
The necessity of hiding the salt for a hash
Clients-side MD5 hash with time salt
Simple password encryption
Salt generation and Open Source software
Password hashes: fixed-length binary fields or single string field?

I think that the answers to these questions support my algorithm (though if you simply use a random salt, then the 'unique value per server' and username components are less important).
","I think you need to ask yourself ""What are you hoping to gain by making this more complicated than just generating a random salt value and storing it?""   The more complicated you make your algorithm, the more likely you are to introduce a weakness inadvertently.  This will probably sound snarky no matter how I say it, but it's meant helpfully - what is so special about your app that it needs a fancy new password hashing algorithm?
","19432","<security><encryption><hash><salt>","38","7","4","2019-04-10 16:39:05","1191124","8","29","-1","","2017-05-23 12:17:57","2009-07-27 23:01:43",""
"9771212","How to use PKCS5_PBKDF2_HMAC_SHA1()","I am trying to use PKCS5_PBKDF2_HMAC_SHA1() and below is my sample program. I wanted to make sure if my result of PKCS5_PBKDF2_HMAC_SHA1() is correct so I verified the same with the website http://anandam.name/pbkdf2/ and I see a different result.  Am I using the API correctly? 
I am having doubts if I am passing salt value correctly.
I have pasted my result and website result after the program.
Please help me understand this.
#include <stdio.h>     
#include <types.h> 
#include <string.h> 
#include <stdio.h> 
#include <stdlib.h> 

#include <malloc.h> 

#include <openssl/hmac.h> 
#include <openssl/evp.h> 
#include <openssl/engine.h> 
#include <openssl/aes.h>
#include <openssl/rand.h> 

#include <proto.h> 
#define KEY_LEN    32// 32 bytes - 256 bits 
#define KEK_KEY_LEN   5 
#define ITERATION   1000 

unsigned char salt_value[KEY_LEN]; 
unsigned char AESkey[KEY_LEN]; 
unsigned char XTSkey[KEY_LEN]; 
u8 fuse_key[KEY_LEN]; 

void main() 
{ 
    s32 i=0; 
    s32 len =0; 
    u8 *out; 
    u8 *rspHMAC; 
    const s8 pwd[] = ""test""; 
    s8 rspPKCS5[KEK_KEY_LEN * 2]; 
    s32 ret; 

    rspHMAC = (unsigned char *) malloc(sizeof(char) * KEY_LEN); 
    out = (unsigned char *) malloc(sizeof(char) * KEK_KEY_LEN); 

    RAND_bytes(salt_value, KEY_LEN); 

    printf(""\n salt_value[0] = %x; salt_value[31]= %x"", salt_value[0], salt_value[31]); 
    printf(""\n strlen(salt_value) = %d; sizeof(salt_value) = %d\n"", strlen(salt_value), sizeof(salt_value));  

    for(i = 0; i < KEY_LEN; i++) { 
        printf(""%02x"", salt_value[i]); 
    } 

    ret = PKCS5_PBKDF2_HMAC_SHA1(pwd, strlen(pwd), salt_value, strlen(salt_value), ITERATION, KEK_KEY_LEN, out); 
    printf(""\n PKCS#5 :""); 

    for(len = 0; len < KEK_KEY_LEN; len++){ 
        printf(""%02x"", out[len]);

        sprintf(&rspPKCS5[len * 2], ""%02x"", out[len]); 
    } 

    printf(""\n""); 
} 

Sample Output:
salt_value[0] = e2; salt_value[31]= 12 
strlen(salt_value) = 32; sizeof(salt_value) = 32 
e258017933f3e629a4166cece78f3162a3b0b7edb2e94c93d76fe6c38198ea12 
PKCS#5 :7d7ec9f411 

Website result: 
The derived 40-bit key is: a5caf6a0d3 

","First, let's look at an official test vector for PBKDF2 HMAC-SHA1:
Input:
   P = ""password"" (8 octets)
   S = ""salt"" (4 octets)
   c = 1
   dkLen = 20

 Output:
   DK = 0c 60 c8 0f 96 1f 0e 71
        f3 a9 b5 24 af 60 12 06
        2f e0 37 a6             (20 octets)

So now we know what we're shooting for both on the web and in your program.  So using that info, we find out that the web site wants your salt as an ASCII string, which it will then convert to bytes.  This is important because you'll never be able to match the web page's output if you use RAND_bytes to generate a salt.
password
salt
1
20
0c60c80f961f0e71f3a9b524af6012062fe037a6

And you are using the salt incorrectly.  In your commented line, you're generating a string with ASCII characters.  If you want to use that salt, you'd have to declare it as an array of bytes.  Plus, you're missing a digit.
unsigned char salt_value[]= { 0x5d, 0x85, 0x94, 0x7b, … /* and so on */ };

And in the uncommented code, you're generating an array of bytes but treating it as a string.  You don't call strlen on an array of bytes because arrays of bytes can contain 0, which strlen will interpret as a null terminator.  So you either track the size manually (e.g., your KEK_KEY_LEN define for the array you malloc) or you use sizeof when appropriate.
PKCS5_PBKDF2_HMAC_SHA1(pwd, strlen(pwd), salt_value, sizeof(salt_value), ITERATION, KEK_KEY_LEN, out);

So now that we know all these things, we can put together a full program that matches the output of both the web site and the official test vector.
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <openssl/evp.h>

#define KEY_LEN      32
#define KEK_KEY_LEN  20
#define ITERATION     1 

int main()
{
    size_t i;
    unsigned char *out;
    const char pwd[] = ""password"";
    unsigned char salt_value[] = {'s','a','l','t'};

    out = (unsigned char *) malloc(sizeof(unsigned char) * KEK_KEY_LEN);

    printf(""pass: %s\n"", pwd);
    printf(""ITERATION: %u\n"", ITERATION);
    printf(""salt: ""); for(i=0;i<sizeof(salt_value);i++) { printf(""%02x"", salt_value[i]); } printf(""\n"");

    if( PKCS5_PBKDF2_HMAC_SHA1(pwd, strlen(pwd), salt_value, sizeof(salt_value), ITERATION, KEK_KEY_LEN, out) != 0 )
    {
        printf(""out: ""); for(i=0;i<KEK_KEY_LEN;i++) { printf(""%02x"", out[i]); } printf(""\n"");
    }
    else
    {
        fprintf(stderr, ""PKCS5_PBKDF2_HMAC_SHA1 failed\n"");
    }

    free(out);

    return 0;
}

(and note that main needs to return an int and you should free your allocated memory)
gcc pkcs5.c -o pkcs5 -g -lcrypto -Wall
./pkcs5
pass: password
ITERATION: 1
salt: 73616c74
out: 0c60c80f961f0e71f3a9b524af6012062fe037a6

","18807","<openssl><salt><pbkdf2>","12","18","1","2015-06-07 12:23:56","","1","10","608639","","2015-06-07 12:21:10","2012-03-19 13:37:26",""
"5293959","Creating a salt in python","How would I create a random, 16-character base-62 salt in python? I need it for a protocol and I'm not sure where to start. Thanks.
",">>> import random
>>> ALPHABET = ""0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ""
>>> chars=[]
>>> for i in range(16):
    chars.append(random.choice(ALPHABET))

>>> """".join(chars)
'wE9mg9pu2KSmp5lh'

This should work.
","18529","<python><salt><base62>","25","30","7","2018-06-13 16:31:43","5293983","0","8","","","","2011-03-14 01:52:08",""
"5293959","Creating a salt in python","How would I create a random, 16-character base-62 salt in python? I need it for a protocol and I'm not sure where to start. Thanks.
","I kind of like:
import md5, uuid
m = md5.md5()
m.update(uuid.uuid4())
print m.digest()[:16]

That will be very, very random.
","18529","<python><salt><base62>","25","-1","7","2018-06-13 16:31:43","5293983","0","8","","","","2011-03-14 01:52:08",""
"5293959","Creating a salt in python","How would I create a random, 16-character base-62 salt in python? I need it for a protocol and I'm not sure where to start. Thanks.
","You shouldn't use UUIDs, they are unique, not random: Is using a CreateUUID() function as salt a good idea?
Your salts should use a cryptographically secure random numbers, in python 2.4+, os.urandom is the source of these (if you have a good timing source).
# for some given b62encode function

salt = b62encode(os.urandom(16))

you could also use a generator from bcrypt or other awesome crypto/hashing library that is well known and vetted by the people much more expert than I am.
import bcrypt
salt = bcrypt.gensalt()
# will be 29 chars you can then encode it however you want.

","18529","<python><salt><base62>","25","24","7","2018-06-13 16:31:43","5293983","0","8","","","","2011-03-14 01:52:08",""
"5293959","Creating a salt in python","How would I create a random, 16-character base-62 salt in python? I need it for a protocol and I'm not sure where to start. Thanks.
","in base64:
import random, base64, struct
rand_float = random.SystemRandom().random()
salt = base64.b64encode((struct.pack('!d', rand_float)))

this will be 12 chars
","18529","<python><salt><base62>","25","0","7","2018-06-13 16:31:43","5293983","0","8","","","","2011-03-14 01:52:08",""
"5293959","Creating a salt in python","How would I create a random, 16-character base-62 salt in python? I need it for a protocol and I'm not sure where to start. Thanks.
","These days there is an official mksalt method in the crypt module.
It does not give you a simple 16 char long string but adds $digit$ in front required by most hashing functions anyway. If you are hashing passwords this is probably much safer to use.
import crypt
crypt.mksalt(crypt.METHOD_SHA512)

Generates outputs like the following:
$6$wpg9lx1sVFNFSCrP

","18529","<python><salt><base62>","25","5","7","2018-06-13 16:31:43","5293983","0","8","","","","2011-03-14 01:52:08",""
"5293959","Creating a salt in python","How would I create a random, 16-character base-62 salt in python? I need it for a protocol and I'm not sure where to start. Thanks.
","import random
import string

def get_salt(size=16, chars=None):
    if not chars:
        chars = ''.join(
            [string.ascii_uppercase, 
             string.ascii_lowercase, 
             string.digits]
        )
    return ''.join(random.choice(chars) for x in range(size))

","18529","<python><salt><base62>","25","0","7","2018-06-13 16:31:43","5293983","0","8","","","","2011-03-14 01:52:08",""
"5293959","Creating a salt in python","How would I create a random, 16-character base-62 salt in python? I need it for a protocol and I'm not sure where to start. Thanks.
","old question, new solution with secrets
import secrets

random_string = secrets.token_hex(8)

will produce a 16-character random string
","18529","<python><salt><base62>","25","7","7","2018-06-13 16:31:43","5293983","0","8","","","","2011-03-14 01:52:08",""
"2547397","How to create a asp.net membership provider hashed password manually?","I'm using a website as a frontend and all users are authenticated with the standard ASP.NET Membership-Provider. Passwords are saved ""hashed"" within a SQL-Database.
Now I want to write a desktop-client with administrative functions. Among other things there should be a method to reset a users password. I can access the database with the saved membership-data, but how can I manually create the password-salt and -hash? Using the System.Web.Membership Namespace seems to be inappropriate so I need to know how to create the salt and hash of the new password manually.
Experts step up! :)
","Quick dirty method
Public Shared Function GetSaltKey() As String
            Dim saltBytes() As Byte
            Dim minSaltSize As Integer = 4
            Dim maxSaltSize As Integer = 8

            ' Generate a random number for the size of the salt.
            Dim random As Random
            random = New Random()

            Dim saltSize As Integer
            saltSize = random.Next(minSaltSize, maxSaltSize)

            ' Allocate a byte array, which will hold the salt.
            saltBytes = New Byte(saltSize - 1) {}

            ' Initialize a random number generator.
            Dim rng As RNGCryptoServiceProvider
            rng = New RNGCryptoServiceProvider()

            ' Fill the salt with cryptographically strong byte values.
            rng.GetNonZeroBytes(saltBytes)

            ' Convert plain text into a byte array.
            Return Convert.ToBase64String(saltBytes)
        End Function

        Public Shared Function ComputeHash(ByVal password As String, ByVal salt As String) As String

            Return System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile(salt & password, _
                System.Web.Configuration.FormsAuthPasswordFormat.SHA1.ToString)
        End Function

Although, the membership namespace has stuff built in for this as well, as stated by Forgotten Semicolon
","17662","<asp.net><asp.net-membership><hash><password-protection><salt>","13","1","4","2010-03-31 20:18:46","2556173","2","9","","","","2010-03-30 17:54:30",""
"2547397","How to create a asp.net membership provider hashed password manually?","I'm using a website as a frontend and all users are authenticated with the standard ASP.NET Membership-Provider. Passwords are saved ""hashed"" within a SQL-Database.
Now I want to write a desktop-client with administrative functions. Among other things there should be a method to reset a users password. I can access the database with the saved membership-data, but how can I manually create the password-salt and -hash? Using the System.Web.Membership Namespace seems to be inappropriate so I need to know how to create the salt and hash of the new password manually.
Experts step up! :)
","It's been some time since I've tinkered with ASP.Net membership, but do remember dealing with something a bit related to it (needed to customize things due to an existing database of users). In that effort I overrode the methods (the existing user db had md5 hashed pwds). 
So in the same ""line of thought"":
Expose the Membership API via a web service that your desktop app can reference. This way, you're not ""re-creating"" things, you're re-using them. You don't have to override anything, you're just exposing the existing methods via a web service for your desktop app. 
Goes without saying that you'd have to secure this endpoint....
If the above is too sketchy for your taste, here's a link to the asp.net forums regarding some attempts to recreate the hashing....I can't confirm the accuracy, but it should be easy to test it out:
http://forums.asp.net/p/1336657/2899172.aspx
","17662","<asp.net><asp.net-membership><hash><password-protection><salt>","13","1","4","2010-03-31 20:18:46","2556173","2","9","","","","2010-03-30 17:54:30",""
"2547397","How to create a asp.net membership provider hashed password manually?","I'm using a website as a frontend and all users are authenticated with the standard ASP.NET Membership-Provider. Passwords are saved ""hashed"" within a SQL-Database.
Now I want to write a desktop-client with administrative functions. Among other things there should be a method to reset a users password. I can access the database with the saved membership-data, but how can I manually create the password-salt and -hash? Using the System.Web.Membership Namespace seems to be inappropriate so I need to know how to create the salt and hash of the new password manually.
Experts step up! :)
","I used reflector to take a look at those methods the .NET-Framework is using internal. Maybe there are public methods available for this but I did not find them - if you know how to query those internal methods as a user please left a comment! :)
Here is the simplified source-code without unnecessary conditions because I only want to encode the password as a SHA1-Hash:
private string GenerateSalt() {
  var buf = new byte[16];
  (new RNGCryptoServiceProvider()).GetBytes(buf);
  return Convert.ToBase64String(buf);
}

private string EncodePassword(string pass, string salt) {
    byte[] bytes = Encoding.Unicode.GetBytes(pass);
    byte[] src = Convert.FromBase64String(salt);
    byte[] dst = new byte[src.Length + bytes.Length];
    byte[] inArray = null;
    Buffer.BlockCopy(src, 0, dst, 0, src.Length);
    Buffer.BlockCopy(bytes, 0, dst, src.Length, bytes.Length);
    HashAlgorithm algorithm = HashAlgorithm.Create(""SHA1"");
    inArray = algorithm.ComputeHash(dst);
    return Convert.ToBase64String(inArray);
}

","17662","<asp.net><asp.net-membership><hash><password-protection><salt>","13","15","4","2010-03-31 20:18:46","2556173","2","9","","","","2010-03-30 17:54:30",""
"2547397","How to create a asp.net membership provider hashed password manually?","I'm using a website as a frontend and all users are authenticated with the standard ASP.NET Membership-Provider. Passwords are saved ""hashed"" within a SQL-Database.
Now I want to write a desktop-client with administrative functions. Among other things there should be a method to reset a users password. I can access the database with the saved membership-data, but how can I manually create the password-salt and -hash? Using the System.Web.Membership Namespace seems to be inappropriate so I need to know how to create the salt and hash of the new password manually.
Experts step up! :)
","You can absolutely use System.Web.Security within a console or winforms app.
Here's a simple console application:
static void Main(string[] args)
{
    MembershipProvider provider = Membership.Provider;

    MembershipUser myUser = provider.GetUser(""myUser"", false);

    if( myUser != null ) provider.DeleteUser(""myUser"", true);

    MembershipCreateStatus status;

    myUser = provider.CreateUser(""myUser"", ""password"", ""user@example.com"", null, null, true, null, out status);

    if (status != MembershipCreateStatus.Success)
    {
        Console.WriteLine(""Could not create user.  Reason: "" + status.ToString());
        Console.ReadLine();
        return;
    }

    Console.WriteLine(""Authenticating with \""password\"": "" + provider.ValidateUser(""myUser"", ""password"").ToString());

    string newPassword = myUser.ResetPassword();

    Console.WriteLine(""Authenticating with \""password\"": "" + provider.ValidateUser(""myUser"", ""password"").ToString());
    Console.WriteLine(""Authenticating with new password: "" + provider.ValidateUser(""myUser"", newPassword).ToString());

    Console.ReadLine();
}

And the app.config:
<?xml version=""1.0"" encoding=""utf-8"" ?>
<configuration>
    <connectionStrings>
        <add name=""MyConnectionString"" connectionString=""Data Source=localhost;Initial Catalog=MyDatabase;Integrated Security=True"" providerName=""System.Data.SqlClient"" />
    </connectionStrings>
    <system.web>
        <membership defaultProvider=""MyMembershipProvider"">
            <providers>
                <clear />
                <add name=""MyMembershipProvider""
                     type=""System.Web.Security.SqlMembershipProvider""
                     connectionStringName=""MyConnectionString""
                     applicationName=""MyApplication""
                     minRequiredPasswordLength=""5""
                     minRequiredNonalphanumericCharacters=""0""
                     requiresQuestionAndAnswer=""false"" />
            </providers>
        </membership>
    </system.web>
</configuration>

","17662","<asp.net><asp.net-membership><hash><password-protection><salt>","13","13","4","2010-03-31 20:18:46","2556173","2","9","","","","2010-03-30 17:54:30",""
"3820977","Am I using PHP's crypt() function correctly?","I've been using PHP's crypt() as a way to store and verify passwords in my database. I use hashing for other things, but crypt() for passwords. The documentation isn't that good and there seems to be a lot of debate. I'm using blowfish and two salts to crypt a password and store it in the database. Before I would store the salt and the encrypted password, (like a salted hash) but realized its redundant because the salt is part of the encrypted password string.
I'm a little confused on how rainbow table attacks would work on crypt(), anyway does this look correct from a security standpoint. I use a second salt to append to the password to increase the entropy of short passwords, probably overkill but why not?
function crypt_password($password) {
if ($password) {
    //find the longest valid salt allowed by server
    $max_salt = CRYPT_SALT_LENGTH;

    //blowfish hashing with a salt as follows: ""$2a$"", a two digit cost parameter, ""$"", and 22 base 64
    $blowfish = '$2a$10$';

    //get the longest salt, could set to 22 crypt ignores extra data
    $salt = get_salt ( $max_salt );

    //get a second salt to strengthen password
    $salt2 = get_salt ( 30 ); //set to whatever


    //append salt2 data to the password, and crypt using salt, results in a 60 char output
    $crypt_pass = crypt ( $password . $salt2, $blowfish . $salt );

    //insert crypt pass along with salt2 into database.
    $sql = ""insert into database...."";

    return true;
    }
}  


function get_salt($length) {
$options = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789./';

$salt = '';

for($i = 0; $i <= $length; $i ++) {
    $options = str_shuffle ( $options );
    $salt .= $options [rand ( 0, 63 )];
}
return $salt;
}

function verify_password($input_password)
{
if($input_password)
{
    //get stored crypt pass,and salt2 from the database
    $stored_password = 'somethingfromdatabase';
    $stored_salt2 = 'somethingelsefromdatabase';

    //compare the crypt of input+stored_salt2 to the stored crypt password
    if (crypt($input_password . $stored_salt2, $stored_password) == $stored_password) {
        //authenticated
        return true;
    }
    else return false;
}
else return false;
}

","The idea of a rainbow table is that an attacker can make a table with all possible passwords and their hashes at home.
E.g.
PASSWORD HASH
iloveSO  gjroewjgo
password knbnogjwm
secret   gjroehghe
jbieber  rewgroewj

etc.
With this table, the attacker can quickly convert any hash to a password. Rainbow table uses some tricks so that not all hashes have to be stored, but it still computes all hashes beforehand.
By using a salt, even when storing it with the password, you make this much harder. Instead of hashing every word in a dictionary, the attacker would now have to hash every word with every salt. With a long enough salt, this gives enough combinations to make it unfeasible to compute all these hashes.
So a salt is not meant to be an extra password, known only to the application, it is meant to change the hash function so that it is non-standard.
","17171","<php><security><encryption><hash><salt>","17","3","5","2013-10-01 17:24:16","3821676","1","7","419","","2010-09-29 11:10:10","2010-09-29 11:03:55",""
"3820977","Am I using PHP's crypt() function correctly?","I've been using PHP's crypt() as a way to store and verify passwords in my database. I use hashing for other things, but crypt() for passwords. The documentation isn't that good and there seems to be a lot of debate. I'm using blowfish and two salts to crypt a password and store it in the database. Before I would store the salt and the encrypted password, (like a salted hash) but realized its redundant because the salt is part of the encrypted password string.
I'm a little confused on how rainbow table attacks would work on crypt(), anyway does this look correct from a security standpoint. I use a second salt to append to the password to increase the entropy of short passwords, probably overkill but why not?
function crypt_password($password) {
if ($password) {
    //find the longest valid salt allowed by server
    $max_salt = CRYPT_SALT_LENGTH;

    //blowfish hashing with a salt as follows: ""$2a$"", a two digit cost parameter, ""$"", and 22 base 64
    $blowfish = '$2a$10$';

    //get the longest salt, could set to 22 crypt ignores extra data
    $salt = get_salt ( $max_salt );

    //get a second salt to strengthen password
    $salt2 = get_salt ( 30 ); //set to whatever


    //append salt2 data to the password, and crypt using salt, results in a 60 char output
    $crypt_pass = crypt ( $password . $salt2, $blowfish . $salt );

    //insert crypt pass along with salt2 into database.
    $sql = ""insert into database...."";

    return true;
    }
}  


function get_salt($length) {
$options = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789./';

$salt = '';

for($i = 0; $i <= $length; $i ++) {
    $options = str_shuffle ( $options );
    $salt .= $options [rand ( 0, 63 )];
}
return $salt;
}

function verify_password($input_password)
{
if($input_password)
{
    //get stored crypt pass,and salt2 from the database
    $stored_password = 'somethingfromdatabase';
    $stored_salt2 = 'somethingelsefromdatabase';

    //compare the crypt of input+stored_salt2 to the stored crypt password
    if (crypt($input_password . $stored_salt2, $stored_password) == $stored_password) {
        //authenticated
        return true;
    }
    else return false;
}
else return false;
}

","You really should have a look at PHPASS: http://www.openwall.com/phpass/ It's a password hashing framework using crypt() which is used in projects like Wordpress and phpBB.
There is also an excellent article on this website about password hashing, salting and stretching using crypt(): http://www.openwall.com/articles/PHP-Users-Passwords
UPDATE: 
Currently there's an alternative for the PHPASS library. In the next version of PHP there are special functions for hashing and verifying passwords (using bcrypt): http://www.php.net/manual/en/ref.password.php. There is a compatibility library that implements these functions for PHP 5.3.7+: https://github.com/ircmaxell/password_compat
","17171","<php><security><encryption><hash><salt>","17","15","5","2013-10-01 17:24:16","3821676","1","7","419","","2010-09-29 11:10:10","2010-09-29 11:03:55",""
"3820977","Am I using PHP's crypt() function correctly?","I've been using PHP's crypt() as a way to store and verify passwords in my database. I use hashing for other things, but crypt() for passwords. The documentation isn't that good and there seems to be a lot of debate. I'm using blowfish and two salts to crypt a password and store it in the database. Before I would store the salt and the encrypted password, (like a salted hash) but realized its redundant because the salt is part of the encrypted password string.
I'm a little confused on how rainbow table attacks would work on crypt(), anyway does this look correct from a security standpoint. I use a second salt to append to the password to increase the entropy of short passwords, probably overkill but why not?
function crypt_password($password) {
if ($password) {
    //find the longest valid salt allowed by server
    $max_salt = CRYPT_SALT_LENGTH;

    //blowfish hashing with a salt as follows: ""$2a$"", a two digit cost parameter, ""$"", and 22 base 64
    $blowfish = '$2a$10$';

    //get the longest salt, could set to 22 crypt ignores extra data
    $salt = get_salt ( $max_salt );

    //get a second salt to strengthen password
    $salt2 = get_salt ( 30 ); //set to whatever


    //append salt2 data to the password, and crypt using salt, results in a 60 char output
    $crypt_pass = crypt ( $password . $salt2, $blowfish . $salt );

    //insert crypt pass along with salt2 into database.
    $sql = ""insert into database...."";

    return true;
    }
}  


function get_salt($length) {
$options = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789./';

$salt = '';

for($i = 0; $i <= $length; $i ++) {
    $options = str_shuffle ( $options );
    $salt .= $options [rand ( 0, 63 )];
}
return $salt;
}

function verify_password($input_password)
{
if($input_password)
{
    //get stored crypt pass,and salt2 from the database
    $stored_password = 'somethingfromdatabase';
    $stored_salt2 = 'somethingelsefromdatabase';

    //compare the crypt of input+stored_salt2 to the stored crypt password
    if (crypt($input_password . $stored_salt2, $stored_password) == $stored_password) {
        //authenticated
        return true;
    }
    else return false;
}
else return false;
}

","This is a misuse of crypt() because you are using a deprecated primitive. Blowfish is very old, twofish is the replacement and even that is old because threefish is almost finalized.   You should be using a member of the sha2 family,  sha256 or sha512 are both good choices.   crypt() can be used with sha256 or sha512,  you should use the CRYPT_SHA256 CRYPT_SHA512 parameters respectively. 
Also your salts have a very small entropy/size ratio,  you are only using an alphanumeric set which is a joke because alphanumeric rainbow tables are the most common.  You should be using a full byte which base256, and I recommend a salt that is 256 bytes long.   Keep in mind all hash functions are binary safe by definition thus you shouldn't have to worry about null bytes and the like. 
","17171","<php><security><encryption><hash><salt>","17","2","5","2013-10-01 17:24:16","3821676","1","7","419","","2010-09-29 11:10:10","2010-09-29 11:03:55",""
"3820977","Am I using PHP's crypt() function correctly?","I've been using PHP's crypt() as a way to store and verify passwords in my database. I use hashing for other things, but crypt() for passwords. The documentation isn't that good and there seems to be a lot of debate. I'm using blowfish and two salts to crypt a password and store it in the database. Before I would store the salt and the encrypted password, (like a salted hash) but realized its redundant because the salt is part of the encrypted password string.
I'm a little confused on how rainbow table attacks would work on crypt(), anyway does this look correct from a security standpoint. I use a second salt to append to the password to increase the entropy of short passwords, probably overkill but why not?
function crypt_password($password) {
if ($password) {
    //find the longest valid salt allowed by server
    $max_salt = CRYPT_SALT_LENGTH;

    //blowfish hashing with a salt as follows: ""$2a$"", a two digit cost parameter, ""$"", and 22 base 64
    $blowfish = '$2a$10$';

    //get the longest salt, could set to 22 crypt ignores extra data
    $salt = get_salt ( $max_salt );

    //get a second salt to strengthen password
    $salt2 = get_salt ( 30 ); //set to whatever


    //append salt2 data to the password, and crypt using salt, results in a 60 char output
    $crypt_pass = crypt ( $password . $salt2, $blowfish . $salt );

    //insert crypt pass along with salt2 into database.
    $sql = ""insert into database...."";

    return true;
    }
}  


function get_salt($length) {
$options = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789./';

$salt = '';

for($i = 0; $i <= $length; $i ++) {
    $options = str_shuffle ( $options );
    $salt .= $options [rand ( 0, 63 )];
}
return $salt;
}

function verify_password($input_password)
{
if($input_password)
{
    //get stored crypt pass,and salt2 from the database
    $stored_password = 'somethingfromdatabase';
    $stored_salt2 = 'somethingelsefromdatabase';

    //compare the crypt of input+stored_salt2 to the stored crypt password
    if (crypt($input_password . $stored_salt2, $stored_password) == $stored_password) {
        //authenticated
        return true;
    }
    else return false;
}
else return false;
}

","Your use of crypt() is fine.  crypt($input, $stored) == $stored is the way it is designed to be used.
Your get_salt() function is not great, since it is using the often-poor rand() function.  You should consider using a stronger random function, like openssl_random_pseudo_bytes(), instead.
","17171","<php><security><encryption><hash><salt>","17","11","5","2013-10-01 17:24:16","3821676","1","7","419","","2010-09-29 11:10:10","2010-09-29 11:03:55",""
"3820977","Am I using PHP's crypt() function correctly?","I've been using PHP's crypt() as a way to store and verify passwords in my database. I use hashing for other things, but crypt() for passwords. The documentation isn't that good and there seems to be a lot of debate. I'm using blowfish and two salts to crypt a password and store it in the database. Before I would store the salt and the encrypted password, (like a salted hash) but realized its redundant because the salt is part of the encrypted password string.
I'm a little confused on how rainbow table attacks would work on crypt(), anyway does this look correct from a security standpoint. I use a second salt to append to the password to increase the entropy of short passwords, probably overkill but why not?
function crypt_password($password) {
if ($password) {
    //find the longest valid salt allowed by server
    $max_salt = CRYPT_SALT_LENGTH;

    //blowfish hashing with a salt as follows: ""$2a$"", a two digit cost parameter, ""$"", and 22 base 64
    $blowfish = '$2a$10$';

    //get the longest salt, could set to 22 crypt ignores extra data
    $salt = get_salt ( $max_salt );

    //get a second salt to strengthen password
    $salt2 = get_salt ( 30 ); //set to whatever


    //append salt2 data to the password, and crypt using salt, results in a 60 char output
    $crypt_pass = crypt ( $password . $salt2, $blowfish . $salt );

    //insert crypt pass along with salt2 into database.
    $sql = ""insert into database...."";

    return true;
    }
}  


function get_salt($length) {
$options = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789./';

$salt = '';

for($i = 0; $i <= $length; $i ++) {
    $options = str_shuffle ( $options );
    $salt .= $options [rand ( 0, 63 )];
}
return $salt;
}

function verify_password($input_password)
{
if($input_password)
{
    //get stored crypt pass,and salt2 from the database
    $stored_password = 'somethingfromdatabase';
    $stored_salt2 = 'somethingelsefromdatabase';

    //compare the crypt of input+stored_salt2 to the stored crypt password
    if (crypt($input_password . $stored_salt2, $stored_password) == $stored_password) {
        //authenticated
        return true;
    }
    else return false;
}
else return false;
}

","Use SHA-512 (if available) with a salt which includes time() and openssl_random_pseudo_bytes().  Crypt is consolidated / efficient because it returns the salt inserted with the hashed string.
","17171","<php><security><encryption><hash><salt>","17","0","5","2013-10-01 17:24:16","3821676","1","7","419","","2010-09-29 11:10:10","2010-09-29 11:03:55",""
"16012314","How do I encrypt a password in Wordpress using Wordpress salt?","I want to encrypt the password being sent into the database, with the standard Wordpress salt, just like Wordpress does it when you create a new user. I know I can find my salt in the wp-config.php. So I don't need to generate the salt; I just need to encrypt the password.
So that when I create mypassword0, what is sent to the database is the string of text encrypted by my Wordpress salt.
Here is my original code that works. (thank you Yadav Chetan for your help!) Now I just need to add the salt encryption code.
  <?php
        if(isset($_POST['submit'])){

        $query = ""INSERT INTO mytable_one
          (user, pass)
          VALUES
          ('"".$_POST['user'].""', '"".$_POST['pass'].""')"";

        $query = ""INSERT INTO mytable_two
          (fname, lname)
          VALUES
          ('"".$_POST['fname'].""', '"".$_POST['lname'].""')"";

        mysql_query($query);

         }else{
    ?>
    <div class=""content"">
        <form method=""post"">
            <div><strong>First Name:</strong><span class=""errortext"">*</span></div>
            <div><input id=""first-name"" name=""fname"" type=""text"" /></div>

            <div><strong>Last Name:</strong><span class=""errortext"">*</span></div>
            <div><input id=""last-name"" name=""lname"" type=""text"" /></div>

            <div><strong>User:</strong><span class=""errortext"">*</span></div>
            <div><input id=""user-login"" name=""user"" type=""text"" /></div>

            <div><strong>Password:</strong><span class=""errortext"">*</span></div>
            <div><input id=""user-pass"" name=""pass"" type=""text"" /></div>

            <div><input id=""submit-button"" value=""submit"" type=""submit"" />
        </div>          
        </form>
    <?php }?>


UPDATED:
RRikesh suggested I change the mysql_* to WPDB code. So I tried to change it over to wpdb, and also I need to integrate it in with the other code. So can you help me fix this updated code?
<?php
    if(isset($_POST['submit'])){


    $firstname = $_POST['fname'];
    $lastname = $_POST['lname'];
    $username = $_POST['user'];
    $password = $_POST['pass'];

    $wpdb->query( 
        $wpdb->prepare( 
           ""INSERT INTO  mytable_one
          (user, pass) VALUES (%s, %s)"",
             $username,
             wp_hash_password($password)
      )
    );
    $wpdb->query( 
        $wpdb->prepare( 
            ""INSERT INTO  mytable_two
            (fname, lname) VALUES (%s, %s)"",
               $firstname,
               $lastname,
        )
    );

    }else{
?>
<div class=""content"">
    <form method=""post"">
                <div><strong>First Name:</strong><span class=""errortext"">*</span></div>
                <div><input id=""first-name"" name=""fname"" type=""text"" /></div>

                <div><strong>Last Name:</strong><span class=""errortext"">*</span></div>
                <div><input id=""last-name"" name=""lname"" type=""text"" /></div>

                <div><strong>Username:</strong><span class=""errortext"">*</span></div>
                <div><input id=""user-login"" name=""user"" type=""text"" /></div>

                <div>Password:</div>
                <div><input id=""user-pass"" name=""pass"" type=""text"" /></div>

        <div><input id=""submit-button"" value=""submit"" name=""submit"" type=""submit"" /></div>          
    </form>
<?php }?>



UPDATE2
I was unable to get the WPDB method to work. however, using my otd method I was able to has the password. Here is the working code:
    <?php
        if(isset($_POST['submit'])){

            $password = $_POST['user_pass'];
            $hash = wp_hash_password('$password');

            $query = ""INSERT INTO wp_users
              (fname, lname, user, pass) VALUES ('"".$_POST['fname'].""', '"".$_POST['lname'].""', '"".$_POST['user'].""', '"".$hash.""')"";

            mysql_query($query);

        }else{
    ?>

Perhaps I should open a new question about the WPDB because this question was about hashing the password, which is solved.
","you should use bcrypt for securing passwords
here is an example class that use for my projects. 
<?php

    // How to use it

    // $bcrypt = new Bcrypt(15);
    // $hash = $bcrypt->hash('password');
    // $isGood = $bcrypt->verify('password', $hash);

    class Bcrypt {
      private $rounds;
      public function __construct($rounds = 12) {
        if(CRYPT_BLOWFISH != 1) {
          throw new Exception(""bcrypt not supported in this installation. See http://php.net/crypt"");
        }

        $this->rounds = $rounds;
      }

      public function hash($input) {
        $hash = crypt($input, $this->getSalt());

        if(strlen($hash) > 13)
          return $hash;

        return false;
      }

      public function verify($input, $existingHash) {
        $hash = crypt($input, $existingHash);

        return $hash === $existingHash;
      }

      private function getSalt() {
        $salt = sprintf('$2a$%02d$', $this->rounds);

        $bytes = $this->getRandomBytes(16);

        $salt .= $this->encodeBytes($bytes);

        return $salt;
      }

      private $randomState;
      private function getRandomBytes($count) {
        $bytes = '';

        if(function_exists('openssl_random_pseudo_bytes') &&
            (strtoupper(substr(PHP_OS, 0, 3)) !== 'WIN')) { // OpenSSL slow on Win
          $bytes = openssl_random_pseudo_bytes($count);
        }

        if($bytes === '' && is_readable('/dev/urandom') &&
           ($hRand = @fopen('/dev/urandom', 'rb')) !== FALSE) {
          $bytes = fread($hRand, $count);
          fclose($hRand);
        }

        if(strlen($bytes) < $count) {
          $bytes = '';

          if($this->randomState === null) {
            $this->randomState = microtime();
            if(function_exists('getmypid')) {
              $this->randomState .= getmypid();
            }
          }

          for($i = 0; $i < $count; $i += 16) {
            $this->randomState = md5(microtime() . $this->randomState);

            if (PHP_VERSION >= '5') {
              $bytes .= md5($this->randomState, true);
            } else {
              $bytes .= pack('H*', md5($this->randomState));
            }
          }

          $bytes = substr($bytes, 0, $count);
        }

        return $bytes;
      }

      private function encodeBytes($input) {
        // The following is code from the PHP Password Hashing Framework
        $itoa64 = './ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';

        $output = '';
        $i = 0;
        do {
          $c1 = ord($input[$i++]);
          $output .= $itoa64[$c1 >> 2];
          $c1 = ($c1 & 0x03) << 4;
          if ($i >= 16) {
            $output .= $itoa64[$c1];
            break;
          }

          $c2 = ord($input[$i++]);
          $c1 |= $c2 >> 4;
          $output .= $itoa64[$c1];
          $c1 = ($c2 & 0x0f) << 2;

          $c2 = ord($input[$i++]);
          $c1 |= $c2 >> 6;
          $output .= $itoa64[$c1];
          $output .= $itoa64[$c2 & 0x3f];
        } while (1);

        return $output;
      }
    }



    ?>

","15394","<php><sql><wordpress><passwords><salt>","4","2","2","2018-04-19 07:28:23","16013488","6","1","-1","user2281674","2017-05-23 12:30:59","2013-04-15 09:55:13",""
"16012314","How do I encrypt a password in Wordpress using Wordpress salt?","I want to encrypt the password being sent into the database, with the standard Wordpress salt, just like Wordpress does it when you create a new user. I know I can find my salt in the wp-config.php. So I don't need to generate the salt; I just need to encrypt the password.
So that when I create mypassword0, what is sent to the database is the string of text encrypted by my Wordpress salt.
Here is my original code that works. (thank you Yadav Chetan for your help!) Now I just need to add the salt encryption code.
  <?php
        if(isset($_POST['submit'])){

        $query = ""INSERT INTO mytable_one
          (user, pass)
          VALUES
          ('"".$_POST['user'].""', '"".$_POST['pass'].""')"";

        $query = ""INSERT INTO mytable_two
          (fname, lname)
          VALUES
          ('"".$_POST['fname'].""', '"".$_POST['lname'].""')"";

        mysql_query($query);

         }else{
    ?>
    <div class=""content"">
        <form method=""post"">
            <div><strong>First Name:</strong><span class=""errortext"">*</span></div>
            <div><input id=""first-name"" name=""fname"" type=""text"" /></div>

            <div><strong>Last Name:</strong><span class=""errortext"">*</span></div>
            <div><input id=""last-name"" name=""lname"" type=""text"" /></div>

            <div><strong>User:</strong><span class=""errortext"">*</span></div>
            <div><input id=""user-login"" name=""user"" type=""text"" /></div>

            <div><strong>Password:</strong><span class=""errortext"">*</span></div>
            <div><input id=""user-pass"" name=""pass"" type=""text"" /></div>

            <div><input id=""submit-button"" value=""submit"" type=""submit"" />
        </div>          
        </form>
    <?php }?>


UPDATED:
RRikesh suggested I change the mysql_* to WPDB code. So I tried to change it over to wpdb, and also I need to integrate it in with the other code. So can you help me fix this updated code?
<?php
    if(isset($_POST['submit'])){


    $firstname = $_POST['fname'];
    $lastname = $_POST['lname'];
    $username = $_POST['user'];
    $password = $_POST['pass'];

    $wpdb->query( 
        $wpdb->prepare( 
           ""INSERT INTO  mytable_one
          (user, pass) VALUES (%s, %s)"",
             $username,
             wp_hash_password($password)
      )
    );
    $wpdb->query( 
        $wpdb->prepare( 
            ""INSERT INTO  mytable_two
            (fname, lname) VALUES (%s, %s)"",
               $firstname,
               $lastname,
        )
    );

    }else{
?>
<div class=""content"">
    <form method=""post"">
                <div><strong>First Name:</strong><span class=""errortext"">*</span></div>
                <div><input id=""first-name"" name=""fname"" type=""text"" /></div>

                <div><strong>Last Name:</strong><span class=""errortext"">*</span></div>
                <div><input id=""last-name"" name=""lname"" type=""text"" /></div>

                <div><strong>Username:</strong><span class=""errortext"">*</span></div>
                <div><input id=""user-login"" name=""user"" type=""text"" /></div>

                <div>Password:</div>
                <div><input id=""user-pass"" name=""pass"" type=""text"" /></div>

        <div><input id=""submit-button"" value=""submit"" name=""submit"" type=""submit"" /></div>          
    </form>
<?php }?>



UPDATE2
I was unable to get the WPDB method to work. however, using my otd method I was able to has the password. Here is the working code:
    <?php
        if(isset($_POST['submit'])){

            $password = $_POST['user_pass'];
            $hash = wp_hash_password('$password');

            $query = ""INSERT INTO wp_users
              (fname, lname, user, pass) VALUES ('"".$_POST['fname'].""', '"".$_POST['lname'].""', '"".$_POST['user'].""', '"".$hash.""')"";

            mysql_query($query);

        }else{
    ?>

Perhaps I should open a new question about the WPDB because this question was about hashing the password, which is solved.
","Use wp_hash_password() to hash your password.
Don't use mysql_* functions as they were deprecated in PHP 5.5.0, and were removed in PHP 7.0.0.
Use the WPDB Class instead.
$wpdb->query( 
    $wpdb->prepare( 
        ""
        INSERT INTO  mytable_one
        ( fname, lname, user, pass )
        VALUES ( %s, %s, %s, %s )
        "",
           $firstname,
           $lastname,
           $username,
           wp_hash_password( $password )
        )
);

","15394","<php><sql><wordpress><passwords><salt>","4","6","2","2018-04-19 07:28:23","16013488","6","1","-1","user2281674","2017-05-23 12:30:59","2013-04-15 09:55:13",""
"25372636","password_hash equivalent for php 5.4?","I developed my site using XAMPP with php 5.5 installed. I just realize that my host only has php 5.4 (cannot update to 5.5 yet). My problem is that I cannot use the new php 5.5 password_hash() feature. Is there an equivalent method for hashing with salt for php 5.4?
Is there a way to get this equivalent code (below) to work in php 5.4?
$options = [
  'salt' => uniqid(mt_rand(), true),
  'cost' => 12 
];
$hash = password_hash($mypassword, PASSWORD_DEFAULT, $options);

","Use password_compat. It's a backward compatible library to emulate password_hash() in older versions of PHP (5.3.7+).
","15025","<php><hash><passwords><salt>","10","19","2","2014-08-19 19:03:11","25372685","1","2","","","","2014-08-18 21:53:49","2014-08-18 22:41:06"
"25372636","password_hash equivalent for php 5.4?","I developed my site using XAMPP with php 5.5 installed. I just realize that my host only has php 5.4 (cannot update to 5.5 yet). My problem is that I cannot use the new php 5.5 password_hash() feature. Is there an equivalent method for hashing with salt for php 5.4?
Is there a way to get this equivalent code (below) to work in php 5.4?
$options = [
  'salt' => uniqid(mt_rand(), true),
  'cost' => 12 
];
$hash = password_hash($mypassword, PASSWORD_DEFAULT, $options);

","When I was using PHP 5.4 I used php's crypt function with CRYPT_BLOWFISH hash type. I played a bit with parameters to match your case, and concluded that your blowfish Pre should be $2y$12$ to match your cost = 12 parameter.
You can run this script in your command line to verify the result matches (I will keep your insecure mt_rand salt in this part. More on this later)
<?php

$salt= uniqid(mt_rand(), true);
$options=['salt'=>$salt, 'cost'=>12];
$mypassword=$argv[1];

$cryptpwd=crypt($mypassword,'$2y$12$'.$salt.'$'); // PHP 5.4 style

$pwdhash=password_hash($mypassword, PASSWORD_DEFAULT, $options);  // PHP 5.5+

echo ""\n"";
echo 'CRYPT    :'. $cryptpwd;
echo ""\n"";
echo 'PWD HASH :'. $pwdhash;
echo ""\n"";

if($cryptpwd===$pwdhash) {
    echo 'Hashes match!';
} else {
    echo 'Hashes do not match';
}
echo ""\n"";

For example
php pwd.php 1q2w3e4r5t

outputs
CRYPT    :$2y$12$22253563353f27f9b3292ereZv98r1iFQhItfYT0UbKaejMSJThBi
PWD HASH :$2y$12$22253563353f27f9b3292ereZv98r1iFQhItfYT0UbKaejMSJThBi
Hashes match!

@JohnConde's answer is better because is safer using a well tested library. I just wanted to see what was going below the trunk.
PD: You asked

Is there a way to get this equivalent code (below) to work in php 5.4?

Now, your code has a major weakness. You are generating salts with mt_rand. Don't ever do that. Trust the system with the salt generation and, if you really want to generate it yourself, use something like the following salt generator (I used thisone when my apps were PHP 5.4)
$Allowed_Chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789./';
$Chars_Len = 63;
$Salt_Length = 21;
$salt = """";
$Blowfish_Pre='$2y$12$';
$Blowfish_End='$';

for ($i = 0; $i < $Salt_Length; $i++) {
    $salt.= $Allowed_Chars[mt_rand(0, $Chars_Len) ];
}

$bcrypt_salt = $Blowfish_Pre . $salt . $Blowfish_End;

To be honest I was sure the salt had 18 characters, but looking at my old code, it's done with 21 :)
","15025","<php><hash><passwords><salt>","10","5","2","2014-08-19 19:03:11","25372685","1","2","","","","2014-08-18 21:53:49","2014-08-18 22:41:06"
"5606728","Rails 3 / Devise: Password salt no longer being created?","I've been working on a project for a while now which uses Devise for user authentication. Whenever a user was created, it would generate a password salt for them along with their encrypted password.
As I'm coming to the tail end of this project, I was testing user registration and noticed that my new roles were not creating a password salt in the database for these new users, whereas my older users all had salts. The new users can sign in fine, yet I'm concerned why Devise is no longer creating salts.
The only oddity with Devise I encountered had to do when I upgraded the module and remember the logs saying something about removing encryptable as bcrypt is now the default encryption, or something to that effect. Which I did so...not sure if this has anything to do with the current issue.
In addition, thinking maybe it was my project that was pooched, I created a brand new Rails application from scratch and added Devise to it, and even that new project isn't creating salts for users.
Is there a new way in Devise to set up password salts, or does anyone know why the salts aren't being created anymore? Unfortunately the Devise wiki doesn't have a whole lot to say on the subject, and Google has been a fruitless search so far.
Or...is it even necessary to have salts in the first place? Seems more secure to have them, I would think.
My config of users/devise is below.
config/initializers/devise.rb
Devise.setup do |config|

  config.mailer_sender = ""mail@domain.com""

  require 'devise/orm/active_record'

  config.authentication_keys = [ :login ]

  config.stretches = 10

  config.encryptor = :bcrypt

  # Setup a pepper to generate the encrypted password.
  config.pepper = ""79c2bf3b[...]""

end

app/models/user.rb
  devise :database_authenticatable, :registerable, :confirmable,
         :recoverable, :rememberable, :trackable, :validatable

UPDATE
I was able to locate the notice from after Devise was upgraded, which reads...
[DEVISE] From version 1.2, there is no need to set your encryptor to bcrypt since encryptors are only enabled if you include :encryptable in your models. To update your app, please:

1) Remove config.encryptor from your initializer;
2) Add t.encryptable to your old migrations;
3) [Optional] Remove password_salt in a new recent migration. Bcrypt does not require it anymore.

So it appears that the password_salt is deprecated if you stick with bcrypt, which explains why it's not created anymore. So that answers that, but the other part of my question still remains...is this a good enough practice or should I go with another encryption besides bcrypt?
","Per José Valim:

Devise 1.2.1 does not require a
  password_salt column anymore if you
  are using bcrypt. If you need a kind
  of salt, I believe there is a method
  called authentication_salt you could
  use to retrieve such values.
  (Source)

","14661","<ruby-on-rails><authentication><encryption><devise><salt>","25","15","2","2012-06-18 23:57:49","5607590","1","2","627349","","2011-04-09 20:15:50","2011-04-09 17:47:10",""
"5606728","Rails 3 / Devise: Password salt no longer being created?","I've been working on a project for a while now which uses Devise for user authentication. Whenever a user was created, it would generate a password salt for them along with their encrypted password.
As I'm coming to the tail end of this project, I was testing user registration and noticed that my new roles were not creating a password salt in the database for these new users, whereas my older users all had salts. The new users can sign in fine, yet I'm concerned why Devise is no longer creating salts.
The only oddity with Devise I encountered had to do when I upgraded the module and remember the logs saying something about removing encryptable as bcrypt is now the default encryption, or something to that effect. Which I did so...not sure if this has anything to do with the current issue.
In addition, thinking maybe it was my project that was pooched, I created a brand new Rails application from scratch and added Devise to it, and even that new project isn't creating salts for users.
Is there a new way in Devise to set up password salts, or does anyone know why the salts aren't being created anymore? Unfortunately the Devise wiki doesn't have a whole lot to say on the subject, and Google has been a fruitless search so far.
Or...is it even necessary to have salts in the first place? Seems more secure to have them, I would think.
My config of users/devise is below.
config/initializers/devise.rb
Devise.setup do |config|

  config.mailer_sender = ""mail@domain.com""

  require 'devise/orm/active_record'

  config.authentication_keys = [ :login ]

  config.stretches = 10

  config.encryptor = :bcrypt

  # Setup a pepper to generate the encrypted password.
  config.pepper = ""79c2bf3b[...]""

end

app/models/user.rb
  devise :database_authenticatable, :registerable, :confirmable,
         :recoverable, :rememberable, :trackable, :validatable

UPDATE
I was able to locate the notice from after Devise was upgraded, which reads...
[DEVISE] From version 1.2, there is no need to set your encryptor to bcrypt since encryptors are only enabled if you include :encryptable in your models. To update your app, please:

1) Remove config.encryptor from your initializer;
2) Add t.encryptable to your old migrations;
3) [Optional] Remove password_salt in a new recent migration. Bcrypt does not require it anymore.

So it appears that the password_salt is deprecated if you stick with bcrypt, which explains why it's not created anymore. So that answers that, but the other part of my question still remains...is this a good enough practice or should I go with another encryption besides bcrypt?
","The new version of devise uses characters 0 to 29 of the encrypted password field as the salt and the remaining characters in that database field for the encrypted password.  So your passwords are actually still salted with BCrypt.
","14661","<ruby-on-rails><authentication><encryption><devise><salt>","25","32","2","2012-06-18 23:57:49","5607590","1","2","627349","","2011-04-09 20:15:50","2011-04-09 17:47:10",""
"17733040","How can I retrieve a salt from LDAP?","The organization that I work for uses PPolicy (an OpenLDAP module) to automatically salt and hash passwords. Unfortunately, I don't have access to the machine running the OpenLDAP server, so i can't look at the config file. From what I've seen though, pretty much everything appears to be setup using the default settings.
I'd like to be able to retrieve the salt for a specific user. If I look at the user's attributes, userPassword is the SSHA password. I don't see anything about a salt for that specific user. I ended up looking at the LDAP schema and I see nothing about salts there either.
If you were to guess where the salt were being stored for each user, where would it be? I understand this is vague and probably not a lot of information, but I can't find anywhere in the OpenLDAP docs that explain where exactly the unique salts are stored. Perhaps someone who has configured an OpenLDAP server before would know where the default location is.
Thank you.
","With SSHA, normally the salt is appended to the SHA1 hash and then the whole thing is Base64 encoded (I've never seen an LDAP that didn't do SSHA this way). You should be able to tell this by looking at the userPassword attribute. If it's 28 character long with a = at the end, it's only the hash.
If the Base64 value is 32 character long or greater, it contains both the hash and the salt. Base64 decode the value and strip off the first 20 bytes, this is the SHA1 hash. The remaining bytes are the salt.
Example:
                     Base64 encoded hash with salt
userPassword: {SSHA}MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0

Base64 decoded value
     SHA1 Hash      Salt
--------------------++++
123456789012345678901234

Edit: After double checking, it seems that variable length salts are sometimes supported. Corrected the encoding description to account for this.
","13964","<sha1><salt><openldap><ssha>","11","19","3","2017-10-29 21:55:55","17847163","2","6","","","","2013-07-18 20:15:00",""
"17733040","How can I retrieve a salt from LDAP?","The organization that I work for uses PPolicy (an OpenLDAP module) to automatically salt and hash passwords. Unfortunately, I don't have access to the machine running the OpenLDAP server, so i can't look at the config file. From what I've seen though, pretty much everything appears to be setup using the default settings.
I'd like to be able to retrieve the salt for a specific user. If I look at the user's attributes, userPassword is the SSHA password. I don't see anything about a salt for that specific user. I ended up looking at the LDAP schema and I see nothing about salts there either.
If you were to guess where the salt were being stored for each user, where would it be? I understand this is vague and probably not a lot of information, but I can't find anywhere in the OpenLDAP docs that explain where exactly the unique salts are stored. Perhaps someone who has configured an OpenLDAP server before would know where the default location is.
Thank you.
","The post of Syon did help me a lot, thanks for that! I thought a working test would be a nice extra for someone else struggling with this topic ;).
public class SshaPasswordVerifyTest {
    private final static int SIZE_SHA1_HASH = 20;

    @Test
    public void itShouldVerifyPassword() throws Exception{
        String password = ""YouNeverGuess!"";
        String encodedPasswordWithSSHA = ""{SSHA}M6HeeJAbwUCzuLwXbq00Fc3n3XcxFI8KjQkqeg=="";
        Assert.assertEquals(encodedPasswordWithSSHA, getSshaDigestFor(password, getSalt(encodedPasswordWithSSHA)));
    }

    // The salt is the remaining part after the SHA1_hash
    private byte[] getSalt(String encodedPasswordWithSSHA){
        byte[] data = Base64.getMimeDecoder().decode(encodedPasswordWithSSHA.substring(6));
        return Arrays.copyOfRange(data, SIZE_SHA1_HASH, data.length);
    }

    private String getSshaDigestFor(String password, byte[] salt) throws Exception{
        // create a SHA1 digest of the password + salt
        MessageDigest crypt = MessageDigest.getInstance(""SHA-1"");
        crypt.reset();
        crypt.update(password.getBytes(Charset.forName(""UTF-8"")));
        crypt.update(salt);
        byte[] hash = crypt.digest();

        // concatenate the hash with the salt
        byte[] hashPlusSalt = new byte[hash.length + salt.length];
        System.arraycopy(hash, 0, hashPlusSalt, 0, hash.length);
        System.arraycopy(salt, 0, hashPlusSalt, hash.length, salt.length);

        // prepend the SSHA tag + base64 encode the result
        return ""{SSHA}"" + Base64.getEncoder().encodeToString(hashPlusSalt);
    }
}

","13964","<sha1><salt><openldap><ssha>","11","0","3","2017-10-29 21:55:55","17847163","2","6","","","","2013-07-18 20:15:00",""
"17733040","How can I retrieve a salt from LDAP?","The organization that I work for uses PPolicy (an OpenLDAP module) to automatically salt and hash passwords. Unfortunately, I don't have access to the machine running the OpenLDAP server, so i can't look at the config file. From what I've seen though, pretty much everything appears to be setup using the default settings.
I'd like to be able to retrieve the salt for a specific user. If I look at the user's attributes, userPassword is the SSHA password. I don't see anything about a salt for that specific user. I ended up looking at the LDAP schema and I see nothing about salts there either.
If you were to guess where the salt were being stored for each user, where would it be? I understand this is vague and probably not a lot of information, but I can't find anywhere in the OpenLDAP docs that explain where exactly the unique salts are stored. Perhaps someone who has configured an OpenLDAP server before would know where the default location is.
Thank you.
","In PHP, this compares a plain text password (usually entered by a user) to a given ssha hash (usually stored in your db):
private function checkSshaPassword($encrypted_password, $password)
{
    //  get hash and salt from encrypted_password
    $base_64_hash_with_salt = substr($encrypted_password, 6);
    $hash_with_salt = base64_decode($base_64_hash_with_salt);
    $hash = substr($hash_with_salt, 0, 20);
    $salt = substr($hash_with_salt, 20);

    //  hash given password
    $hash_given = sha1($password . $salt, true);

    return ($hash == $hash_given);
}

","13964","<sha1><salt><openldap><ssha>","11","0","3","2017-10-29 21:55:55","17847163","2","6","","","","2013-07-18 20:15:00",""
"244903","Why is a password salt called a ""salt""?","Is there a significance to the word ""salt"" for a password salt?
","The only meaning is that you are adding something to your password before you hash it, similarly to adding salt to your meal :-)
","13848","<passwords><salt>","58","24","8","2010-03-24 03:15:40","244919","1","8","","","","2008-10-28 21:18:41","2011-07-07 23:24:52"
"244903","Why is a password salt called a ""salt""?","Is there a significance to the word ""salt"" for a password salt?
","Because before you hash the password, you add a random text to it. So, it looks like as if you add some ""salt"" to the original ""food"" ... password :)
","13848","<passwords><salt>","58","1","8","2010-03-24 03:15:40","244919","1","8","","","","2008-10-28 21:18:41","2011-07-07 23:24:52"
"244903","Why is a password salt called a ""salt""?","Is there a significance to the word ""salt"" for a password salt?
","http://www.derkeiler.com/Newsgroups/comp.security.misc/2003-05/0154.html

The use of the word ""salt"" is probably a reference to warfare in
  ancient times, when people would salt the wells or farmland to make it less
  hospitable. The Romans are sometimes supposed to have done this to
  Carthage in 146 BC. In the context of passwords, a ""salted"" password
  is harder to crack.

Apparently, there's no strong evidence even for the original ""salting"" of Carthage (http://en.wikipedia.org/wiki/Salting_the_earth) claim, but an interesting hypothesis nonetheless.
","13848","<passwords><salt>","58","43","8","2010-03-24 03:15:40","244919","1","8","","","","2008-10-28 21:18:41","2011-07-07 23:24:52"
"244903","Why is a password salt called a ""salt""?","Is there a significance to the word ""salt"" for a password salt?
","Maybe because salt goes well with hash?
","13848","<passwords><salt>","58","42","8","2010-03-24 03:15:40","244919","1","8","","","","2008-10-28 21:18:41","2011-07-07 23:24:52"
"244903","Why is a password salt called a ""salt""?","Is there a significance to the word ""salt"" for a password salt?
","I would guess because it's easy to add ""salt"" (NaCl or a fixed string). But once you do, the output is irrevocably changed (food, encrypted password).
","13848","<passwords><salt>","58","6","8","2010-03-24 03:15:40","244919","1","8","","","","2008-10-28 21:18:41","2011-07-07 23:24:52"
"244903","Why is a password salt called a ""salt""?","Is there a significance to the word ""salt"" for a password salt?
","According to Ken Thompson, one of the first people to use the term in a book, it's related to the term ""salting a mine"", referring to gold mines. Whether that is ""correct"" or not who knows? I doubt there's an actual correct answer to this, it's just one of those terms that doesn't really have to have a reason as long as what it means is understood.
","13848","<passwords><salt>","58","13","8","2010-03-24 03:15:40","244919","1","8","","","","2008-10-28 21:18:41","2011-07-07 23:24:52"
"244903","Why is a password salt called a ""salt""?","Is there a significance to the word ""salt"" for a password salt?
","Once you add salt to food the real taste is no longer visible. So basically this is a figurative saying; add a little salt and it changes the original dish.
","13848","<passwords><salt>","58","1","8","2010-03-24 03:15:40","244919","1","8","","","","2008-10-28 21:18:41","2011-07-07 23:24:52"
"244903","Why is a password salt called a ""salt""?","Is there a significance to the word ""salt"" for a password salt?
","I had thought it related to the verb salt ...
(salt away) informal put by (money) secretly. 

-- http://www.askoxford.com/concise_oed/saltx?view=uk
","13848","<passwords><salt>","58","4","8","2010-03-24 03:15:40","244919","1","8","","","","2008-10-28 21:18:41","2011-07-07 23:24:52"
"2225720","Why does crypt/blowfish generate the same hash with two different salts?","This question has to do with PHP's implementation of crypt().  For this question, the first 7 characters of the salt are not counted, so a salt '$2a$07$a' would be said to have a length of 1, as it is only 1 character of salt and seven characters of meta-data.
When using salt strings longer than 22 characters, there is no change in the hash generated (i.e., truncation), and when using strings shorter than 21 characters the salt will automatically be padded (with '$' characters, apparently); this is fairly straightforward.  However, if given a salt 20 characters and a salt 21 characters, where the two are identical except for the final character of the 21-length salt, both hashed strings will be identical.  A salt 22 characters long, which is identical to the 21 length salt except for the final character, the hash will be different again.  
Example In Code:
$foo = 'bar';
$salt_xx = '$2a$07$';
$salt_19 = $salt_xx . 'b1b2ee48991281a439d';
$salt_20 = $salt_19 . 'a';
$salt_21 = $salt_20 . '2';
$salt_22 = $salt_21 . 'b';

var_dump(
    crypt($foo, $salt_19), 
    crypt($foo, $salt_20), 
    crypt($foo, $salt_21), 
    crypt($foo, $salt_22)
);

Will produce:
string(60) ""$2a$07$b1b2ee48991281a439d$$.dEUdhUoQXVqUieLTCp0cFVolhFcbuNi""
string(60) ""$2a$07$b1b2ee48991281a439da$.UxGYN739wLkV5PGoR1XA4EvNVPjwylG""
string(60) ""$2a$07$b1b2ee48991281a439da2.UxGYN739wLkV5PGoR1XA4EvNVPjwylG""
string(60) ""$2a$07$b1b2ee48991281a439da2O4AH0.y/AsOuzMpI.f4sBs8E2hQjPUQq""

Why is this?
EDIT:
Some users are noting that there is a difference in the overall string, which is true.  In salt_20, offset (28, 4) is da$., while in salt_21, offset (28, 4) is da2.; however, it is important to note that the string generated includes the hash, the salt, as well as instructions to generate the salt (i.e. $2a$07$); the part in which the difference occurs is, in fact, still the salt.  The actual hash is unchanged as UxGYN739wLkV5PGoR1XA4EvNVPjwylG.
Thus, this is in fact not a difference in the hash produced, but a difference in the salt used to store the hash, which is precisely the problem at hand: two salts are generating the same hash.
Rembmer: the output will be in the following format:
""$2a$##$saltsaltsaltsaltsaltsaHASHhashHASHhashHASHhashHASHhash""
//                            ^ Hash Starts Here, offset 28,32

where ## is the log-base-2 determining the number of iterations the algorithm runs for
Edit 2:
In the comments, it was requested that I post some additional info, as the user could not reproduce my output.  Execution of the following code:
var_dump(
    PHP_VERSION, 
    PHP_OS, 
    CRYPT_SALT_LENGTH, 
    CRYPT_STD_DES, 
    CRYPT_EXT_DES, 
    CRYPT_MD5, 
    CRYPT_BLOWFISH
);

Produces the following output:
string(5) ""5.3.0""
string(5) ""WINNT""
int(60)
int(1)
int(1)
int(1)
int(1)

Hope this helps.
","Looks like the outputs are actually different. (da$, vs da2) for result of salt_20 and salt_21.
","13354","<php><hash><salt><blowfish><crypt>","30","3","4","2012-06-26 04:25:29","2237009","3","16","173925","","2010-02-10 00:30:18","2010-02-08 23:39:56",""
"2225720","Why does crypt/blowfish generate the same hash with two different salts?","This question has to do with PHP's implementation of crypt().  For this question, the first 7 characters of the salt are not counted, so a salt '$2a$07$a' would be said to have a length of 1, as it is only 1 character of salt and seven characters of meta-data.
When using salt strings longer than 22 characters, there is no change in the hash generated (i.e., truncation), and when using strings shorter than 21 characters the salt will automatically be padded (with '$' characters, apparently); this is fairly straightforward.  However, if given a salt 20 characters and a salt 21 characters, where the two are identical except for the final character of the 21-length salt, both hashed strings will be identical.  A salt 22 characters long, which is identical to the 21 length salt except for the final character, the hash will be different again.  
Example In Code:
$foo = 'bar';
$salt_xx = '$2a$07$';
$salt_19 = $salt_xx . 'b1b2ee48991281a439d';
$salt_20 = $salt_19 . 'a';
$salt_21 = $salt_20 . '2';
$salt_22 = $salt_21 . 'b';

var_dump(
    crypt($foo, $salt_19), 
    crypt($foo, $salt_20), 
    crypt($foo, $salt_21), 
    crypt($foo, $salt_22)
);

Will produce:
string(60) ""$2a$07$b1b2ee48991281a439d$$.dEUdhUoQXVqUieLTCp0cFVolhFcbuNi""
string(60) ""$2a$07$b1b2ee48991281a439da$.UxGYN739wLkV5PGoR1XA4EvNVPjwylG""
string(60) ""$2a$07$b1b2ee48991281a439da2.UxGYN739wLkV5PGoR1XA4EvNVPjwylG""
string(60) ""$2a$07$b1b2ee48991281a439da2O4AH0.y/AsOuzMpI.f4sBs8E2hQjPUQq""

Why is this?
EDIT:
Some users are noting that there is a difference in the overall string, which is true.  In salt_20, offset (28, 4) is da$., while in salt_21, offset (28, 4) is da2.; however, it is important to note that the string generated includes the hash, the salt, as well as instructions to generate the salt (i.e. $2a$07$); the part in which the difference occurs is, in fact, still the salt.  The actual hash is unchanged as UxGYN739wLkV5PGoR1XA4EvNVPjwylG.
Thus, this is in fact not a difference in the hash produced, but a difference in the salt used to store the hash, which is precisely the problem at hand: two salts are generating the same hash.
Rembmer: the output will be in the following format:
""$2a$##$saltsaltsaltsaltsaltsaHASHhashHASHhashHASHhashHASHhash""
//                            ^ Hash Starts Here, offset 28,32

where ## is the log-base-2 determining the number of iterations the algorithm runs for
Edit 2:
In the comments, it was requested that I post some additional info, as the user could not reproduce my output.  Execution of the following code:
var_dump(
    PHP_VERSION, 
    PHP_OS, 
    CRYPT_SALT_LENGTH, 
    CRYPT_STD_DES, 
    CRYPT_EXT_DES, 
    CRYPT_MD5, 
    CRYPT_BLOWFISH
);

Produces the following output:
string(5) ""5.3.0""
string(5) ""WINNT""
int(60)
int(1)
int(1)
int(1)
int(1)

Hope this helps.
","After some experimentation, I have come to the conclusion that this is due to the way the salt is treated.  The salt is not considered to be literal text, but rather to be a base64 encoded string, such that 22 bytes of salt data would actually represent a 16 byte string (floor(22 * 24 / 32) == 16) of salt.  The ""Gotcha!"" with this implementation, though, is that, like Unix crypt, it uses a ""non-standard"" base64 alphabet.  To be exact, it uses this alphabet:
./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789$

The 65th character, '$', is the padding character.
Now, the crypt() function appears to be capable of taking a salt of any length less than or equal to its maximum, and silently handling any inconsistencies in the base64 by discarding any data that doesn't make up another full byte.  The crypt function will fail completely if you pass it characters in the salt that are not part of its base64 alphabet, which just confirms this theory of its operation.
Take an imaginary salt '1234'.  This is perfectly base64 consistent in that it represents 24 bits of data, so 3 bytes, and does not carry any data that needs to be discarded.  This is a salt whose Len Mod 4 is zero.  Append any character to that salt, and it becomes a 5 character salt, and Len Mod 4 is now 1.  However, this additional character represents only six bits of data, and therefore cannot be transformed into another full byte, so it is discarded.
Thus, for any two salts A and B, where 
   Len A Mod 4 == 0 
&& Len B Mod 4 == 1  // these two lines mean the same thing
&& Len B = Len A + 1 // but are semantically important separately
&& A == substr B, 0, Len A

The actual salt used by crypt() to calculate the hash will, in fact, be identical.  As proof, I'm including some example PHP code that can be used to show this.  The salt constantly rotates in a seminon-random way (based on a randomish segment of the whirlpool hash of the current time to the microsecond), and the data to be hashed (herein called $seed) is simply the current Unix-Epoch time.
$salt = substr(hash('whirlpool',microtime()),rand(0,105),22);
$seed = time();
for ($i = 0, $j = strlen($salt); $i <= $j; ++$i) {
    printf('%02d = %s%s%c',
        $i,
        crypt($seed,'$2a$07$' . substr($salt, 0, $i)),
        $i%4 == 0 || $i % 4 == 1 ? ' <-' : '',
        0x0A
    );
}

And this produces output similar to the following
00 = $2a$07$$$$$$$$$$$$$$$$$$$$$$.rBxL4x0LvuUp8rhGfnEKSOevBKB5V2. <-
01 = $2a$07$e$$$$$$$$$$$$$$$$$$$$.rBxL4x0LvuUp8rhGfnEKSOevBKB5V2. <-
02 = $2a$07$e8$$$$$$$$$$$$$$$$$$$.WEimjvvOvQ.lGh/V6HFkts7Rq5rpXZG
03 = $2a$07$e89$$$$$$$$$$$$$$$$$$.Ww5p352lsfQCWarRIWWGGbKa074K4/.
04 = $2a$07$e895$$$$$$$$$$$$$$$$$.ZGSPawtL.pOeNI74nhhnHowYrJBrLuW <-
05 = $2a$07$e8955$$$$$$$$$$$$$$$$.ZGSPawtL.pOeNI74nhhnHowYrJBrLuW <-
06 = $2a$07$e8955b$$$$$$$$$$$$$$$.2UumGVfyc4SgAZBs5P6IKlUYma7sxqa
07 = $2a$07$e8955be$$$$$$$$$$$$$$.gb6deOAckxHP/WIZOGPZ6/P3oUSQkPm
08 = $2a$07$e8955be6$$$$$$$$$$$$$.5gox0YOqQMfF6FBU9weAz5RmcIKZoki <-
09 = $2a$07$e8955be61$$$$$$$$$$$$.5gox0YOqQMfF6FBU9weAz5RmcIKZoki <-
10 = $2a$07$e8955be616$$$$$$$$$$$.hWHhdkS9Z3m7/PMKn1Ko7Qf2S7H4ttK
11 = $2a$07$e8955be6162$$$$$$$$$$.meHPOa25CYG2G8JrbC8dPQuWf9yw0Iy
12 = $2a$07$e8955be61624$$$$$$$$$.vcp/UGtAwLJWvtKTndM7w1/30NuYdYa <-
13 = $2a$07$e8955be616246$$$$$$$$.vcp/UGtAwLJWvtKTndM7w1/30NuYdYa <-
14 = $2a$07$e8955be6162468$$$$$$$.OTzcPMwrtXxx6YHKtaX0mypWvqJK5Ye
15 = $2a$07$e8955be6162468d$$$$$$.pDcOFp68WnHqU8tZJxuf2V0nqUqwc0W
16 = $2a$07$e8955be6162468de$$$$$.YDv5tkOeXkOECJmjl1R8zXVRMlU0rJi <-
17 = $2a$07$e8955be6162468deb$$$$.YDv5tkOeXkOECJmjl1R8zXVRMlU0rJi <-
18 = $2a$07$e8955be6162468deb0$$$.aNZIHogUlCn8H7W3naR50pzEsQgnakq
19 = $2a$07$e8955be6162468deb0d$$.ytfAwRL.czZr/K3hGPmbgJlheoZUyL2
20 = $2a$07$e8955be6162468deb0da$.0xhS8VgxJOn4skeI02VNI6jI6324EPe <-
21 = $2a$07$e8955be6162468deb0da3.0xhS8VgxJOn4skeI02VNI6jI6324EPe <-
22 = $2a$07$e8955be6162468deb0da3ucYVpET7X/5YddEeJxVqqUIxs3COrdym

The conclusion?  Twofold.  First, it's working as intended, and second, know your own salt or don't roll your own salt.
","13354","<php><hash><salt><blowfish><crypt>","30","35","4","2012-06-26 04:25:29","2237009","3","16","173925","","2010-02-10 00:30:18","2010-02-08 23:39:56",""
"2225720","Why does crypt/blowfish generate the same hash with two different salts?","This question has to do with PHP's implementation of crypt().  For this question, the first 7 characters of the salt are not counted, so a salt '$2a$07$a' would be said to have a length of 1, as it is only 1 character of salt and seven characters of meta-data.
When using salt strings longer than 22 characters, there is no change in the hash generated (i.e., truncation), and when using strings shorter than 21 characters the salt will automatically be padded (with '$' characters, apparently); this is fairly straightforward.  However, if given a salt 20 characters and a salt 21 characters, where the two are identical except for the final character of the 21-length salt, both hashed strings will be identical.  A salt 22 characters long, which is identical to the 21 length salt except for the final character, the hash will be different again.  
Example In Code:
$foo = 'bar';
$salt_xx = '$2a$07$';
$salt_19 = $salt_xx . 'b1b2ee48991281a439d';
$salt_20 = $salt_19 . 'a';
$salt_21 = $salt_20 . '2';
$salt_22 = $salt_21 . 'b';

var_dump(
    crypt($foo, $salt_19), 
    crypt($foo, $salt_20), 
    crypt($foo, $salt_21), 
    crypt($foo, $salt_22)
);

Will produce:
string(60) ""$2a$07$b1b2ee48991281a439d$$.dEUdhUoQXVqUieLTCp0cFVolhFcbuNi""
string(60) ""$2a$07$b1b2ee48991281a439da$.UxGYN739wLkV5PGoR1XA4EvNVPjwylG""
string(60) ""$2a$07$b1b2ee48991281a439da2.UxGYN739wLkV5PGoR1XA4EvNVPjwylG""
string(60) ""$2a$07$b1b2ee48991281a439da2O4AH0.y/AsOuzMpI.f4sBs8E2hQjPUQq""

Why is this?
EDIT:
Some users are noting that there is a difference in the overall string, which is true.  In salt_20, offset (28, 4) is da$., while in salt_21, offset (28, 4) is da2.; however, it is important to note that the string generated includes the hash, the salt, as well as instructions to generate the salt (i.e. $2a$07$); the part in which the difference occurs is, in fact, still the salt.  The actual hash is unchanged as UxGYN739wLkV5PGoR1XA4EvNVPjwylG.
Thus, this is in fact not a difference in the hash produced, but a difference in the salt used to store the hash, which is precisely the problem at hand: two salts are generating the same hash.
Rembmer: the output will be in the following format:
""$2a$##$saltsaltsaltsaltsaltsaHASHhashHASHhashHASHhashHASHhash""
//                            ^ Hash Starts Here, offset 28,32

where ## is the log-base-2 determining the number of iterations the algorithm runs for
Edit 2:
In the comments, it was requested that I post some additional info, as the user could not reproduce my output.  Execution of the following code:
var_dump(
    PHP_VERSION, 
    PHP_OS, 
    CRYPT_SALT_LENGTH, 
    CRYPT_STD_DES, 
    CRYPT_EXT_DES, 
    CRYPT_MD5, 
    CRYPT_BLOWFISH
);

Produces the following output:
string(5) ""5.3.0""
string(5) ""WINNT""
int(60)
int(1)
int(1)
int(1)
int(1)

Hope this helps.
","Great answer, and clear explanation.  But it seems to me there is either a bug in the implementation or some further explanation of the intent is needed {the comments to the post explain why there is not a bug}.  The current php documentation states:

CRYPT_BLOWFISH - Blowfish hashing with a salt as follows: ""$2a$"", a two digit cost parameter, ""$"", and 22 base 64 digits from the alphabet ""./0-9A-Za-z"". Using characters outside of this range in the salt will cause crypt() to return a zero-length string. The two digit cost parameter is the base-2 logarithm of the iteration count for the underlying Blowfish-based hashing algorithmeter and must be in range 04-31, values outside this range will cause crypt() to fail.

This is consistent with what's been stated and demonstrated here.  Unfortunately the documentation doesn't describe the return value very usefully:

Returns the hashed string or a string that is shorter than 13 characters and is guaranteed to differ from the salt on failure.

But as shown  in the reply by Dereleased, if the input salt string is valid, the output consists of the input salt padded out to a fixed length with '$' characters, with the 32-character computed hash value appended to it.  Unfortunately, the salt in the result is padded out to only 21 base64 digits, not 22!  This is shown by the last three lines in that reply, where we see one '$' for 20 digits, no '$' for 21, and when there are 22 base64 digits in the salt, the first character of the hash result replaces the 22nd digit of the input salt.  The function is still usable, because the complete value it computes is available to the caller as substr(crypt($pw,$salt), 28, 32), and the caller already knows the complete salt value because it passed that string as an argument.  But it's very difficult to understand why the return value is designed so that it can only give you 126 bits of the 128-bit salt value.  In fact, it's hard to understand why it includes the input salt at all; but omitting 2 bits of it is really unfathomable.
Here's a little snippet showing that the 22nd base64 digit contributes just two more bits to the salt actually used in the computation (there are only 4 distinct hashes produced):
$alphabet = './ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
$lim = strlen($alphabet);
$saltprefix = '$2a$04$123456789012345678901'; // 21 base64 digits


for ($i = 0; $i < $lim; ++$i ) {
  if ($i = 16 || $i == 32 || $i == 48) echo ""\n"";
  $salt = $saltprefix . substr($alphabet, $i, 1);
  $crypt = crypt($password, $salt);
  echo ""salt ='$salt'\ncrypt='$crypt'\n"";
}

salt ='$2a$04$123456789012345678901.'
crypt='$2a$04$123456789012345678901.YpaB4l25IJ3b3F3H8trjHXj5SC1UbUW'
salt ='$2a$04$123456789012345678901/'
crypt='$2a$04$123456789012345678901.YpaB4l25IJ3b3F3H8trjHXj5SC1UbUW'
salt ='$2a$04$123456789012345678901A'
crypt='$2a$04$123456789012345678901.YpaB4l25IJ3b3F3H8trjHXj5SC1UbUW'
salt ='$2a$04$123456789012345678901B'
crypt='$2a$04$123456789012345678901.YpaB4l25IJ3b3F3H8trjHXj5SC1UbUW'
salt ='$2a$04$123456789012345678901C'
crypt='$2a$04$123456789012345678901.YpaB4l25IJ3b3F3H8trjHXj5SC1UbUW'
salt ='$2a$04$123456789012345678901D'
crypt='$2a$04$123456789012345678901.YpaB4l25IJ3b3F3H8trjHXj5SC1UbUW'
salt ='$2a$04$123456789012345678901E'
crypt='$2a$04$123456789012345678901.YpaB4l25IJ3b3F3H8trjHXj5SC1UbUW'
salt ='$2a$04$123456789012345678901F'
crypt='$2a$04$123456789012345678901.YpaB4l25IJ3b3F3H8trjHXj5SC1UbUW'
salt ='$2a$04$123456789012345678901G'
crypt='$2a$04$123456789012345678901.YpaB4l25IJ3b3F3H8trjHXj5SC1UbUW'
salt ='$2a$04$123456789012345678901H'
crypt='$2a$04$123456789012345678901.YpaB4l25IJ3b3F3H8trjHXj5SC1UbUW'
salt ='$2a$04$123456789012345678901I'
crypt='$2a$04$123456789012345678901.YpaB4l25IJ3b3F3H8trjHXj5SC1UbUW'
salt ='$2a$04$123456789012345678901J'
crypt='$2a$04$123456789012345678901.YpaB4l25IJ3b3F3H8trjHXj5SC1UbUW'
salt ='$2a$04$123456789012345678901K'
crypt='$2a$04$123456789012345678901.YpaB4l25IJ3b3F3H8trjHXj5SC1UbUW'
salt ='$2a$04$123456789012345678901L'
crypt='$2a$04$123456789012345678901.YpaB4l25IJ3b3F3H8trjHXj5SC1UbUW'
salt ='$2a$04$123456789012345678901M'
crypt='$2a$04$123456789012345678901.YpaB4l25IJ3b3F3H8trjHXj5SC1UbUW'
salt ='$2a$04$123456789012345678901N'
crypt='$2a$04$123456789012345678901.YpaB4l25IJ3b3F3H8trjHXj5SC1UbUW'

salt ='$2a$04$123456789012345678901O'
crypt='$2a$04$123456789012345678901Ots44xXtSV0f6zMrHerQ2IANdsJ.2ioG'
salty='$2a$04$123456789012345678901P'
crypt='$2a$04$123456789012345678901Ots44xXtSV0f6zMrHerQ2IANdsJ.2ioG'
salty='$2a$04$123456789012345678901Q'
crypt='$2a$04$123456789012345678901Ots44xXtSV0f6zMrHerQ2IANdsJ.2ioG'
  ... 13 more pairs of output lines with same hash

salt ='$2a$04$123456789012345678901e'
crypt='$2a$04$123456789012345678901e.1cixwQ2qnBqwFeEcMfNfXApRK0ktqm'
  ... 15 more pairs of output lines with same hash

salt ='$2a$04$123456789012345678901u'
crypt='$2a$04$123456789012345678901u5yLyHIE2JetWU67zG7qvtusQ2KIZhAa'
  ... 15 more pairs of output lines with same hash

The grouping of the identical hash values also shows that the mapping of the alphabet actually used is most likely as written here, rather then in the order shown in the other reply.
Perhaps the interface was designed this way for some kind of compatibility, and perhaps because it has already shipped this way it can't be changed.  {the first comment to the post explains why the interface is this way}. But certainly the documentation ought to explain what's going on.  Just in case the bug might get fixed some day, perhaps it would be safest to obtain the hash value with:
substr(crypt($pw,$salt), -32)

As a final note, while the explanation of why the hash value repeats when the number of base64 digits specified mod 4 == 1 makes sense in terms of why code might behave that way, it doesn't explain why writing the code that way was a good idea.  The code could and arguably should include the bits from a base64 digit that makes up a partial byte when computing the hash, instead of just discarding them.  If the code had been written that way, then it seems likely the problem with losing the 22nd digit of the salt in the output would not have appeared, either. {As the comments to the post explain, even though the 22nd digit is overwritten, the digit of the hash that overwrites it will be only one of the four possible values [.Oeu], and these are the only significant values for the 22nd digit.  If the 22nd digit is not one of those four values, it will be replaced by the one of those four that produces the same hash.}
In light of the comments, it seems clear there is no bug, just incredibly taciturn documentation :-)  Since I'm not a cryptographer, I can't say this with any authority, but it seems to me that it's a weakness of the algorithm that a 21-digit salt apparently can produce all possible hash values, while a 22-digit salt limits the first digit of the hash to only one of four values.
","13354","<php><hash><salt><blowfish><crypt>","30","7","4","2012-06-26 04:25:29","2237009","3","16","173925","","2010-02-10 00:30:18","2010-02-08 23:39:56",""
"2225720","Why does crypt/blowfish generate the same hash with two different salts?","This question has to do with PHP's implementation of crypt().  For this question, the first 7 characters of the salt are not counted, so a salt '$2a$07$a' would be said to have a length of 1, as it is only 1 character of salt and seven characters of meta-data.
When using salt strings longer than 22 characters, there is no change in the hash generated (i.e., truncation), and when using strings shorter than 21 characters the salt will automatically be padded (with '$' characters, apparently); this is fairly straightforward.  However, if given a salt 20 characters and a salt 21 characters, where the two are identical except for the final character of the 21-length salt, both hashed strings will be identical.  A salt 22 characters long, which is identical to the 21 length salt except for the final character, the hash will be different again.  
Example In Code:
$foo = 'bar';
$salt_xx = '$2a$07$';
$salt_19 = $salt_xx . 'b1b2ee48991281a439d';
$salt_20 = $salt_19 . 'a';
$salt_21 = $salt_20 . '2';
$salt_22 = $salt_21 . 'b';

var_dump(
    crypt($foo, $salt_19), 
    crypt($foo, $salt_20), 
    crypt($foo, $salt_21), 
    crypt($foo, $salt_22)
);

Will produce:
string(60) ""$2a$07$b1b2ee48991281a439d$$.dEUdhUoQXVqUieLTCp0cFVolhFcbuNi""
string(60) ""$2a$07$b1b2ee48991281a439da$.UxGYN739wLkV5PGoR1XA4EvNVPjwylG""
string(60) ""$2a$07$b1b2ee48991281a439da2.UxGYN739wLkV5PGoR1XA4EvNVPjwylG""
string(60) ""$2a$07$b1b2ee48991281a439da2O4AH0.y/AsOuzMpI.f4sBs8E2hQjPUQq""

Why is this?
EDIT:
Some users are noting that there is a difference in the overall string, which is true.  In salt_20, offset (28, 4) is da$., while in salt_21, offset (28, 4) is da2.; however, it is important to note that the string generated includes the hash, the salt, as well as instructions to generate the salt (i.e. $2a$07$); the part in which the difference occurs is, in fact, still the salt.  The actual hash is unchanged as UxGYN739wLkV5PGoR1XA4EvNVPjwylG.
Thus, this is in fact not a difference in the hash produced, but a difference in the salt used to store the hash, which is precisely the problem at hand: two salts are generating the same hash.
Rembmer: the output will be in the following format:
""$2a$##$saltsaltsaltsaltsaltsaHASHhashHASHhashHASHhashHASHhash""
//                            ^ Hash Starts Here, offset 28,32

where ## is the log-base-2 determining the number of iterations the algorithm runs for
Edit 2:
In the comments, it was requested that I post some additional info, as the user could not reproduce my output.  Execution of the following code:
var_dump(
    PHP_VERSION, 
    PHP_OS, 
    CRYPT_SALT_LENGTH, 
    CRYPT_STD_DES, 
    CRYPT_EXT_DES, 
    CRYPT_MD5, 
    CRYPT_BLOWFISH
);

Produces the following output:
string(5) ""5.3.0""
string(5) ""WINNT""
int(60)
int(1)
int(1)
int(1)
int(1)

Hope this helps.
","From my investigation it seemed that the salt is always 22 characters and the hash offset is 29, not 28, making it 31 characters in length, not 32. I ran this code:
$pass = 'foobarbazqux';
$salt = 'cmfh./TCmc3m0X.MnmHGO';
$cost = 8;
$crypt_salt = sprintf('$2a$%02d$%s', $cost, $salt);
$chars = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
for ($i = 0; $i < strlen($chars); $i++) {
    $hash = crypt($pass, $crypt_salt . $chars[$i]);
    var_dump($crypt_salt . $chars[$i], $hash, crypt($pass, $hash));
}

The results were:
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGO.""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGO.t0NzWGmKpRimP4RhjFMg3F020kVKG9S""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGO.t0NzWGmKpRimP4RhjFMg3F020kVKG9S""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGO/""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGO.t0NzWGmKpRimP4RhjFMg3F020kVKG9S""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGO.t0NzWGmKpRimP4RhjFMg3F020kVKG9S""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGO0""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOutgqolF/BikhkbIM1yMA7HQpkbDxULoG""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOutgqolF/BikhkbIM1yMA7HQpkbDxULoG""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGO1""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOutgqolF/BikhkbIM1yMA7HQpkbDxULoG""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOutgqolF/BikhkbIM1yMA7HQpkbDxULoG""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGO2""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOutgqolF/BikhkbIM1yMA7HQpkbDxULoG""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOutgqolF/BikhkbIM1yMA7HQpkbDxULoG""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGO3""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOutgqolF/BikhkbIM1yMA7HQpkbDxULoG""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOutgqolF/BikhkbIM1yMA7HQpkbDxULoG""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGO4""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOutgqolF/BikhkbIM1yMA7HQpkbDxULoG""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOutgqolF/BikhkbIM1yMA7HQpkbDxULoG""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGO5""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOutgqolF/BikhkbIM1yMA7HQpkbDxULoG""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOutgqolF/BikhkbIM1yMA7HQpkbDxULoG""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGO6""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOutgqolF/BikhkbIM1yMA7HQpkbDxULoG""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOutgqolF/BikhkbIM1yMA7HQpkbDxULoG""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGO7""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOutgqolF/BikhkbIM1yMA7HQpkbDxULoG""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOutgqolF/BikhkbIM1yMA7HQpkbDxULoG""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGO8""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOutgqolF/BikhkbIM1yMA7HQpkbDxULoG""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOutgqolF/BikhkbIM1yMA7HQpkbDxULoG""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGO9""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOutgqolF/BikhkbIM1yMA7HQpkbDxULoG""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOutgqolF/BikhkbIM1yMA7HQpkbDxULoG""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOA""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGO.t0NzWGmKpRimP4RhjFMg3F020kVKG9S""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGO.t0NzWGmKpRimP4RhjFMg3F020kVKG9S""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOB""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGO.t0NzWGmKpRimP4RhjFMg3F020kVKG9S""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGO.t0NzWGmKpRimP4RhjFMg3F020kVKG9S""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOC""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGO.t0NzWGmKpRimP4RhjFMg3F020kVKG9S""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGO.t0NzWGmKpRimP4RhjFMg3F020kVKG9S""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOD""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGO.t0NzWGmKpRimP4RhjFMg3F020kVKG9S""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGO.t0NzWGmKpRimP4RhjFMg3F020kVKG9S""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOE""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGO.t0NzWGmKpRimP4RhjFMg3F020kVKG9S""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGO.t0NzWGmKpRimP4RhjFMg3F020kVKG9S""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOF""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGO.t0NzWGmKpRimP4RhjFMg3F020kVKG9S""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGO.t0NzWGmKpRimP4RhjFMg3F020kVKG9S""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOG""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGO.t0NzWGmKpRimP4RhjFMg3F020kVKG9S""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGO.t0NzWGmKpRimP4RhjFMg3F020kVKG9S""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOH""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGO.t0NzWGmKpRimP4RhjFMg3F020kVKG9S""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGO.t0NzWGmKpRimP4RhjFMg3F020kVKG9S""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOI""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGO.t0NzWGmKpRimP4RhjFMg3F020kVKG9S""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGO.t0NzWGmKpRimP4RhjFMg3F020kVKG9S""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOJ""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGO.t0NzWGmKpRimP4RhjFMg3F020kVKG9S""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGO.t0NzWGmKpRimP4RhjFMg3F020kVKG9S""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOK""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGO.t0NzWGmKpRimP4RhjFMg3F020kVKG9S""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGO.t0NzWGmKpRimP4RhjFMg3F020kVKG9S""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOL""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGO.t0NzWGmKpRimP4RhjFMg3F020kVKG9S""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGO.t0NzWGmKpRimP4RhjFMg3F020kVKG9S""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOM""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGO.t0NzWGmKpRimP4RhjFMg3F020kVKG9S""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGO.t0NzWGmKpRimP4RhjFMg3F020kVKG9S""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGON""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGO.t0NzWGmKpRimP4RhjFMg3F020kVKG9S""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGO.t0NzWGmKpRimP4RhjFMg3F020kVKG9S""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOO""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOOSYI2wLIE3NElcU7itPPQnj8iW922mwy""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOOSYI2wLIE3NElcU7itPPQnj8iW922mwy""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOP""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOOSYI2wLIE3NElcU7itPPQnj8iW922mwy""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOOSYI2wLIE3NElcU7itPPQnj8iW922mwy""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOQ""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOOSYI2wLIE3NElcU7itPPQnj8iW922mwy""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOOSYI2wLIE3NElcU7itPPQnj8iW922mwy""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOR""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOOSYI2wLIE3NElcU7itPPQnj8iW922mwy""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOOSYI2wLIE3NElcU7itPPQnj8iW922mwy""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOS""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOOSYI2wLIE3NElcU7itPPQnj8iW922mwy""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOOSYI2wLIE3NElcU7itPPQnj8iW922mwy""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOT""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOOSYI2wLIE3NElcU7itPPQnj8iW922mwy""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOOSYI2wLIE3NElcU7itPPQnj8iW922mwy""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOU""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOOSYI2wLIE3NElcU7itPPQnj8iW922mwy""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOOSYI2wLIE3NElcU7itPPQnj8iW922mwy""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOV""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOOSYI2wLIE3NElcU7itPPQnj8iW922mwy""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOOSYI2wLIE3NElcU7itPPQnj8iW922mwy""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOW""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOOSYI2wLIE3NElcU7itPPQnj8iW922mwy""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOOSYI2wLIE3NElcU7itPPQnj8iW922mwy""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOX""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOOSYI2wLIE3NElcU7itPPQnj8iW922mwy""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOOSYI2wLIE3NElcU7itPPQnj8iW922mwy""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOY""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOOSYI2wLIE3NElcU7itPPQnj8iW922mwy""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOOSYI2wLIE3NElcU7itPPQnj8iW922mwy""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOZ""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOOSYI2wLIE3NElcU7itPPQnj8iW922mwy""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOOSYI2wLIE3NElcU7itPPQnj8iW922mwy""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOa""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOOSYI2wLIE3NElcU7itPPQnj8iW922mwy""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOOSYI2wLIE3NElcU7itPPQnj8iW922mwy""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOb""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOOSYI2wLIE3NElcU7itPPQnj8iW922mwy""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOOSYI2wLIE3NElcU7itPPQnj8iW922mwy""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOc""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOOSYI2wLIE3NElcU7itPPQnj8iW922mwy""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOOSYI2wLIE3NElcU7itPPQnj8iW922mwy""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOd""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOOSYI2wLIE3NElcU7itPPQnj8iW922mwy""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOOSYI2wLIE3NElcU7itPPQnj8iW922mwy""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOe""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOeLcyQf2JnDryc7eA43zx3qi1uJKZUtPK""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOeLcyQf2JnDryc7eA43zx3qi1uJKZUtPK""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOf""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOeLcyQf2JnDryc7eA43zx3qi1uJKZUtPK""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOeLcyQf2JnDryc7eA43zx3qi1uJKZUtPK""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOg""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOeLcyQf2JnDryc7eA43zx3qi1uJKZUtPK""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOeLcyQf2JnDryc7eA43zx3qi1uJKZUtPK""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOh""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOeLcyQf2JnDryc7eA43zx3qi1uJKZUtPK""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOeLcyQf2JnDryc7eA43zx3qi1uJKZUtPK""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOi""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOeLcyQf2JnDryc7eA43zx3qi1uJKZUtPK""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOeLcyQf2JnDryc7eA43zx3qi1uJKZUtPK""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOj""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOeLcyQf2JnDryc7eA43zx3qi1uJKZUtPK""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOeLcyQf2JnDryc7eA43zx3qi1uJKZUtPK""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOk""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOeLcyQf2JnDryc7eA43zx3qi1uJKZUtPK""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOeLcyQf2JnDryc7eA43zx3qi1uJKZUtPK""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOl""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOeLcyQf2JnDryc7eA43zx3qi1uJKZUtPK""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOeLcyQf2JnDryc7eA43zx3qi1uJKZUtPK""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOm""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOeLcyQf2JnDryc7eA43zx3qi1uJKZUtPK""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOeLcyQf2JnDryc7eA43zx3qi1uJKZUtPK""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOn""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOeLcyQf2JnDryc7eA43zx3qi1uJKZUtPK""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOeLcyQf2JnDryc7eA43zx3qi1uJKZUtPK""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOo""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOeLcyQf2JnDryc7eA43zx3qi1uJKZUtPK""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOeLcyQf2JnDryc7eA43zx3qi1uJKZUtPK""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOp""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOeLcyQf2JnDryc7eA43zx3qi1uJKZUtPK""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOeLcyQf2JnDryc7eA43zx3qi1uJKZUtPK""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOq""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOeLcyQf2JnDryc7eA43zx3qi1uJKZUtPK""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOeLcyQf2JnDryc7eA43zx3qi1uJKZUtPK""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOr""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOeLcyQf2JnDryc7eA43zx3qi1uJKZUtPK""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOeLcyQf2JnDryc7eA43zx3qi1uJKZUtPK""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOs""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOeLcyQf2JnDryc7eA43zx3qi1uJKZUtPK""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOeLcyQf2JnDryc7eA43zx3qi1uJKZUtPK""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOt""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOeLcyQf2JnDryc7eA43zx3qi1uJKZUtPK""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOeLcyQf2JnDryc7eA43zx3qi1uJKZUtPK""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOu""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOutgqolF/BikhkbIM1yMA7HQpkbDxULoG""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOutgqolF/BikhkbIM1yMA7HQpkbDxULoG""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOv""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOutgqolF/BikhkbIM1yMA7HQpkbDxULoG""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOutgqolF/BikhkbIM1yMA7HQpkbDxULoG""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOw""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOutgqolF/BikhkbIM1yMA7HQpkbDxULoG""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOutgqolF/BikhkbIM1yMA7HQpkbDxULoG""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOx""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOutgqolF/BikhkbIM1yMA7HQpkbDxULoG""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOutgqolF/BikhkbIM1yMA7HQpkbDxULoG""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOy""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOutgqolF/BikhkbIM1yMA7HQpkbDxULoG""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOutgqolF/BikhkbIM1yMA7HQpkbDxULoG""
string(29) ""$2a$08$cmfh./TCmc3m0X.MnmHGOz""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOutgqolF/BikhkbIM1yMA7HQpkbDxULoG""
string(60) ""$2a$08$cmfh./TCmc3m0X.MnmHGOutgqolF/BikhkbIM1yMA7HQpkbDxULoG""

This suggests that the salt portion of the returned hash is storing only significant bits so it may not always match your input salt. The benefit is that the hash can be used unaltered as the salt when verifying. Thus, you're better off only storing the complete hash returned by crypt(), and never the input salt you use initially. In practical terms:
$hash_to_store = crypt($new_password, $formatted_salt);

and
$verified = $stored_hash == crypt($entered_password, $stored_hash);

Rolling your own salts is not a problem, and knowing them (by this, I assume you meant store them separately to the hash) is not necessary if you're storing crypt()'s output as-is.
","13354","<php><hash><salt><blowfish><crypt>","30","0","4","2012-06-26 04:25:29","2237009","3","16","173925","","2010-02-10 00:30:18","2010-02-08 23:39:56",""
"7303266","Difference between SALT and KEY. Encryption","Alright, so im trying to learn a little about Encrypting messages in my java application. I just found out that SALT and KEY aren't the same.
Can someone help me understand what the difference between the two is?
","The key is, crudely, the equivalent of a password; you use it to encrypt a message, and then the same key gets used to decrypt it back to the original plaintext.  (Well, it gets a little more complex, once you have public and private keys, and so on.)
A salt is most typically encountered with cryptographic hash functions, not encryption functions.  The idea is that rather than hashing just your data (e.g. a password), you hash data+salt, where salt is typically a randomly-generated string.  They have (at least) two purposes:

To foil an attacker who has access to the hashed data from identifying a collision using a rainbow table.
To slow down an attacker who's trying a brute-force attack.

","12969","<java><encryption><key><salt>","17","18","2","2011-09-05 01:58:58","7303273","1","3","552532","","2011-09-05 01:52:06","2011-09-05 01:47:06",""
"7303266","Difference between SALT and KEY. Encryption","Alright, so im trying to learn a little about Encrypting messages in my java application. I just found out that SALT and KEY aren't the same.
Can someone help me understand what the difference between the two is?
","The key is essentially the password with which you lock the original content.
To make the password more difficult to reverse engineer, you can add a salt to the produced encryption.

To give an obviously simple example, lets say you want to encrypt a character string. Your encryption routine is to reverse the word.
So, for the string ""Hello, World"", after running encryption, your string would be ""dlroW ,olleH"".
You could then add a salt to it. In this example, the salt will be ""foo"", so the result after salting would be ""dlroW ,olleHfoo"".
Now, if someone managed to reverse engineer your encryption algorithm, they'd get ""oofHello World"", which is not the original message, and thus your information is still safe!
This really comes into use when you iteratively encrypt, eg,
result = salt + encrypt(salt+encrypt(salt+encrypt(message))).
","12969","<java><encryption><key><salt>","17","3","2","2011-09-05 01:58:58","7303273","1","3","552532","","2011-09-05 01:52:06","2011-09-05 01:47:06",""
"3566504","Why do salts make dictionary attacks 'impossible'?","Update: Please note I am not asking what a salt is, what a rainbow table is, what a dictionary attack is, or what the purpose of a salt is. I am querying: If you know the users salt and hash, isn't it quite easy to calculate their password?
I understand the process, and implement it myself in some of my projects.
s =  random salt
storedPassword = sha1(password + s)

In the database you store:
username | hashed_password | salt

Every implementation of salting I have seen adds the salt either at the end of the password, or beginning:
hashed_Password = sha1(s + password )
hashed_Password = sha1(password + s)

Therfore, a dictionary attack from a hacker who is worth his salt (ha ha) would simply run each keyword against the stored salts in the common combinations listed above.
Surely the implementation described above simply adds another step for the hacker, without actually solving the underlying issue?  What alternatives are there to step around this issue, or am I misunderstanding the problem?
The only thing I can think to do is have a secret blending algorithm that laces the salt and password together in a random pattern, or adds other user fields to the hashing process meaning the hacker would have to have access to the database AND code to lace them for a dictionary attack to prove fruitful. (Update, as pointed out in comments it's best to assume the hacker has access to all your information so this probably isn't best).
Let me give an example of how I propose a hacker would hack a user database with a list of passwords and hashes:
Data from our hacked database:
RawPassword (not stored)  |  Hashed   |     Salt
--------------------------------------------------------
letmein                       WEFLS...       WEFOJFOFO...

Common password dictionary:
   Common Password
   --------------
   letmein
   12345
   ...

For each user record, loop the common passwords and hash them:
for each user in hacked_DB

    salt = users_salt
    hashed_pw = users_hashed_password

    for each common_password

        testhash = sha1(common_password + salt)
        if testhash = hashed_pw then
           //Match!  Users password = common_password
           //Lets visit the webpage and login now.
        end if

    next

next

I hope this illustrates my point a lot better.
Given 10,000 common passwords, and 10,000 user records, we would need to calculate 100,000,000 hashes to discover as many user passwords as possible.  It might take a few hours, but it's not really an issue.
Update on Cracking Theory
We will assume we are a corrupt webhost, that has access to a database of SHA1 hashes and salts, along with your algorithm to blend them.  The database has 10,000 user records.
This site claims to be able to calculate 2,300,000,000 SHA1 hashes per second using the GPU.  (In real world situation probably will be slower, but for now we will use that quoted figure).

(((95^4)/2300000000)/2)*10000 = 177
  seconds

Given a full range of 95 printable ASCII characters, with a maximum length of 4 characters, divided by the rate of calculation (variable), divided by 2 (assuming the average time to discover password will on average require 50% of permutations) for 10,000 users it would take 177 seconds to work out all users passwords where the length is <= 4.
Let's adjust it a bit for realism.

(((36^7)/1000000000)/2)*10000 = 2 days

Assuming non case sensitivity, with a password length <= 7, only alphanumeric chars, it would take 4 days to solve for 10,000 user records, and I've halved the speed of the algorithm to reflect overhead and non ideal circumstance.
It is important to recognise that this is a linear brute force attack, all calculations are independant of one another, therfore it's a perfect task for multiple systems to solve.  (IE easy to set up 2 computers running attack from different ends that would half the exectution time).
Given the case of recursively hashing a password 1,000 times to make this task more computationally expensive:

(((36^7) / 1 000 000 000) / 2) * 1000
  seconds = 10.8839117 hours

This represents a maximum length of 7 alpha-numeric characters, at a less than half speed execution from quoted figure for one user.
Recursively hashing 1,000 times effectively blocks a blanket attack, but targetted attacks on user data are still vulnerable.
","To be more precise, a dictionary attack, i.e. an attack where all words in an exhaustive list are tried, gets not ""impossible"", but it gets impractical: each bit of salt doubles the amount of storage and computation required. 
This is different from pre-computed dictionary attacks like attacks involving rainbow tables where it does not matter whether the salt is secret or not.
Example: With a 64-bit salt (i.e. 8 bytes) you need to check 264 additional password combinations in your dictionary attack. With a dictionary containing 200,000 words you will have to make

200,000 * 264 = 3.69 * 1024

tests in the worst case - instead of 200,000 tests without salt.
An additional benefit of using salt is that an attacker cannot pre-compute the password hashes from his dictionary. It would simply take too much time and/or space.
Update
Your update assumes that an attacker already knows the salt (or has stolen it). This is of course a different situation. Still it is not possible for the attacker to use a pre-computed rainbow table. What matters here a lot is the speed of the hashing function. To make an attack impractical, the hashing function needs to be slow. MD5 or SHA are not good candidates here because they are designed to be fast, better candidates for hashing algorithms are Blowfish or some variations of it.
Update 2
A good read on the matter of securing your password hashes in general (going much beyond the original question but still interesting):

Enough With The Rainbow Tables: What You Need To Know About Secure Password Schemes

Corollary of the article: Use salted hashes created with bcrypt (based on Blowfish) or Eksblowfish that allows you to use a configurable setup time to make hashing slow.
","12952","<security><hash><salt><dictionary-attack>","85","30","11","2018-07-10 13:47:18","3567255","26","44","1033581","","2018-07-10 13:47:18","2010-08-25 13:50:01",""
"3566504","Why do salts make dictionary attacks 'impossible'?","Update: Please note I am not asking what a salt is, what a rainbow table is, what a dictionary attack is, or what the purpose of a salt is. I am querying: If you know the users salt and hash, isn't it quite easy to calculate their password?
I understand the process, and implement it myself in some of my projects.
s =  random salt
storedPassword = sha1(password + s)

In the database you store:
username | hashed_password | salt

Every implementation of salting I have seen adds the salt either at the end of the password, or beginning:
hashed_Password = sha1(s + password )
hashed_Password = sha1(password + s)

Therfore, a dictionary attack from a hacker who is worth his salt (ha ha) would simply run each keyword against the stored salts in the common combinations listed above.
Surely the implementation described above simply adds another step for the hacker, without actually solving the underlying issue?  What alternatives are there to step around this issue, or am I misunderstanding the problem?
The only thing I can think to do is have a secret blending algorithm that laces the salt and password together in a random pattern, or adds other user fields to the hashing process meaning the hacker would have to have access to the database AND code to lace them for a dictionary attack to prove fruitful. (Update, as pointed out in comments it's best to assume the hacker has access to all your information so this probably isn't best).
Let me give an example of how I propose a hacker would hack a user database with a list of passwords and hashes:
Data from our hacked database:
RawPassword (not stored)  |  Hashed   |     Salt
--------------------------------------------------------
letmein                       WEFLS...       WEFOJFOFO...

Common password dictionary:
   Common Password
   --------------
   letmein
   12345
   ...

For each user record, loop the common passwords and hash them:
for each user in hacked_DB

    salt = users_salt
    hashed_pw = users_hashed_password

    for each common_password

        testhash = sha1(common_password + salt)
        if testhash = hashed_pw then
           //Match!  Users password = common_password
           //Lets visit the webpage and login now.
        end if

    next

next

I hope this illustrates my point a lot better.
Given 10,000 common passwords, and 10,000 user records, we would need to calculate 100,000,000 hashes to discover as many user passwords as possible.  It might take a few hours, but it's not really an issue.
Update on Cracking Theory
We will assume we are a corrupt webhost, that has access to a database of SHA1 hashes and salts, along with your algorithm to blend them.  The database has 10,000 user records.
This site claims to be able to calculate 2,300,000,000 SHA1 hashes per second using the GPU.  (In real world situation probably will be slower, but for now we will use that quoted figure).

(((95^4)/2300000000)/2)*10000 = 177
  seconds

Given a full range of 95 printable ASCII characters, with a maximum length of 4 characters, divided by the rate of calculation (variable), divided by 2 (assuming the average time to discover password will on average require 50% of permutations) for 10,000 users it would take 177 seconds to work out all users passwords where the length is <= 4.
Let's adjust it a bit for realism.

(((36^7)/1000000000)/2)*10000 = 2 days

Assuming non case sensitivity, with a password length <= 7, only alphanumeric chars, it would take 4 days to solve for 10,000 user records, and I've halved the speed of the algorithm to reflect overhead and non ideal circumstance.
It is important to recognise that this is a linear brute force attack, all calculations are independant of one another, therfore it's a perfect task for multiple systems to solve.  (IE easy to set up 2 computers running attack from different ends that would half the exectution time).
Given the case of recursively hashing a password 1,000 times to make this task more computationally expensive:

(((36^7) / 1 000 000 000) / 2) * 1000
  seconds = 10.8839117 hours

This represents a maximum length of 7 alpha-numeric characters, at a less than half speed execution from quoted figure for one user.
Recursively hashing 1,000 times effectively blocks a blanket attack, but targetted attacks on user data are still vulnerable.
","The idea behind dictionary attack is that you take a hash and find the password, from which this hash was calculated, without hash calculation. Now do the same with salted password - you can't. 
Not using a salt makes password search as easy as lookup in the database. Adding a salt make attacker perform hash calculation of all possible passwords (even for dictionary attach this significantly increases time of attack). 
","12952","<security><hash><salt><dictionary-attack>","85","3","11","2018-07-10 13:47:18","3567255","26","44","1033581","","2018-07-10 13:47:18","2010-08-25 13:50:01",""
"3566504","Why do salts make dictionary attacks 'impossible'?","Update: Please note I am not asking what a salt is, what a rainbow table is, what a dictionary attack is, or what the purpose of a salt is. I am querying: If you know the users salt and hash, isn't it quite easy to calculate their password?
I understand the process, and implement it myself in some of my projects.
s =  random salt
storedPassword = sha1(password + s)

In the database you store:
username | hashed_password | salt

Every implementation of salting I have seen adds the salt either at the end of the password, or beginning:
hashed_Password = sha1(s + password )
hashed_Password = sha1(password + s)

Therfore, a dictionary attack from a hacker who is worth his salt (ha ha) would simply run each keyword against the stored salts in the common combinations listed above.
Surely the implementation described above simply adds another step for the hacker, without actually solving the underlying issue?  What alternatives are there to step around this issue, or am I misunderstanding the problem?
The only thing I can think to do is have a secret blending algorithm that laces the salt and password together in a random pattern, or adds other user fields to the hashing process meaning the hacker would have to have access to the database AND code to lace them for a dictionary attack to prove fruitful. (Update, as pointed out in comments it's best to assume the hacker has access to all your information so this probably isn't best).
Let me give an example of how I propose a hacker would hack a user database with a list of passwords and hashes:
Data from our hacked database:
RawPassword (not stored)  |  Hashed   |     Salt
--------------------------------------------------------
letmein                       WEFLS...       WEFOJFOFO...

Common password dictionary:
   Common Password
   --------------
   letmein
   12345
   ...

For each user record, loop the common passwords and hash them:
for each user in hacked_DB

    salt = users_salt
    hashed_pw = users_hashed_password

    for each common_password

        testhash = sha1(common_password + salt)
        if testhash = hashed_pw then
           //Match!  Users password = common_password
           //Lets visit the webpage and login now.
        end if

    next

next

I hope this illustrates my point a lot better.
Given 10,000 common passwords, and 10,000 user records, we would need to calculate 100,000,000 hashes to discover as many user passwords as possible.  It might take a few hours, but it's not really an issue.
Update on Cracking Theory
We will assume we are a corrupt webhost, that has access to a database of SHA1 hashes and salts, along with your algorithm to blend them.  The database has 10,000 user records.
This site claims to be able to calculate 2,300,000,000 SHA1 hashes per second using the GPU.  (In real world situation probably will be slower, but for now we will use that quoted figure).

(((95^4)/2300000000)/2)*10000 = 177
  seconds

Given a full range of 95 printable ASCII characters, with a maximum length of 4 characters, divided by the rate of calculation (variable), divided by 2 (assuming the average time to discover password will on average require 50% of permutations) for 10,000 users it would take 177 seconds to work out all users passwords where the length is <= 4.
Let's adjust it a bit for realism.

(((36^7)/1000000000)/2)*10000 = 2 days

Assuming non case sensitivity, with a password length <= 7, only alphanumeric chars, it would take 4 days to solve for 10,000 user records, and I've halved the speed of the algorithm to reflect overhead and non ideal circumstance.
It is important to recognise that this is a linear brute force attack, all calculations are independant of one another, therfore it's a perfect task for multiple systems to solve.  (IE easy to set up 2 computers running attack from different ends that would half the exectution time).
Given the case of recursively hashing a password 1,000 times to make this task more computationally expensive:

(((36^7) / 1 000 000 000) / 2) * 1000
  seconds = 10.8839117 hours

This represents a maximum length of 7 alpha-numeric characters, at a less than half speed execution from quoted figure for one user.
Recursively hashing 1,000 times effectively blocks a blanket attack, but targetted attacks on user data are still vulnerable.
","A dictionary is a structure where values are indexed by keys. In the case of a pre-computed dictionary attack, each key is a hash, and the corresponding value is a password that results in the hash. With a pre-computed dictionary in hand, an attacker can ""instantly"" lookup a password that will produce the necessary hash to log in.
With salt, the space required to store the dictionary grows rapidly… so rapidly, that trying to pre-compute a password dictionary soon becomes pointless.
The best salts are randomly chosen from a cryptographic random number generator. Eight bytes is a practical size, and more than 16 bytes serves no purpose.

Salt does much more than just ""make an attacker's job more irritating."" It eliminates an entire class of attack—the use of precomputed dictionaries.
Another element is necessary to completely secure passwords, and that is ""key-strengthening."" One round of SHA-1 is not good enough: a safe password hashing algorithm should be very slow computationally. 
Many people use PBKDF2, a key derivation function, that feeds back results to the hash function thousands of times. The ""bcrypt"" algorithm is similar, using an iterative key derivation that is slow.
When the hashing operation is very slow, a precomputed table becomes more and more desirable to an attacker. But proper salt defeats that approach.

Comments
Below are the comments I made on the question.

Without salt, an attacker wouldn't use the method demonstrated in ""Update 2"". He'd simply do a lookup in a pre-computed table and get the password in O(1) or O(log n) time (n being the number of candidate passwords). Salt is what prevents that and forces him to use the O(n) approach shown in ""Update 2"". 
Once reduced to an O(n) attack, we have to consider how long each attempt takes. Key-strengthening can cause each attempt in the loop to take a full second, meaning that the time needed to test 10k passwords on 10k users will stretch from 3 days to 3 years… and with only 10k passwords, you're likely to crack zero passwords in that time. 
You have to consider that an attacker is going to use the fastest tools he can, not PHP, so thousands of iterations, rather than 100, would be a good parameter for key-strengthening. It should take a large fraction of a second to compute the hash for a single password. 
Key-strengthening is part of the standard key derivation algorithms PBKDF1 and PBKDF2, from PKCS #5, which make great password obfuscation algorithms (the ""derived key"" is the ""hash"").
A lot of users on StackOverflow refer to this article because it was a response to Jeff Atwood's post about the dangers of rainbow tables. It's not my favorite article, but it does discuss these concepts in more detail.

Of course you assume the attacker has everything: salt, hash, user name. Assume the attacker is a corrupt hosting company employee who dumped the user table on your myprettypony.com fansite. He's trying recover these passwords because he's going to turn around and see if your pony fans used the same password on their citibank.com accounts. 
With a well-designed password scheme, it will be impossible for this guy to recover any passwords.
","12952","<security><hash><salt><dictionary-attack>","85","17","11","2018-07-10 13:47:18","3567255","26","44","1033581","","2018-07-10 13:47:18","2010-08-25 13:50:01",""
"3566504","Why do salts make dictionary attacks 'impossible'?","Update: Please note I am not asking what a salt is, what a rainbow table is, what a dictionary attack is, or what the purpose of a salt is. I am querying: If you know the users salt and hash, isn't it quite easy to calculate their password?
I understand the process, and implement it myself in some of my projects.
s =  random salt
storedPassword = sha1(password + s)

In the database you store:
username | hashed_password | salt

Every implementation of salting I have seen adds the salt either at the end of the password, or beginning:
hashed_Password = sha1(s + password )
hashed_Password = sha1(password + s)

Therfore, a dictionary attack from a hacker who is worth his salt (ha ha) would simply run each keyword against the stored salts in the common combinations listed above.
Surely the implementation described above simply adds another step for the hacker, without actually solving the underlying issue?  What alternatives are there to step around this issue, or am I misunderstanding the problem?
The only thing I can think to do is have a secret blending algorithm that laces the salt and password together in a random pattern, or adds other user fields to the hashing process meaning the hacker would have to have access to the database AND code to lace them for a dictionary attack to prove fruitful. (Update, as pointed out in comments it's best to assume the hacker has access to all your information so this probably isn't best).
Let me give an example of how I propose a hacker would hack a user database with a list of passwords and hashes:
Data from our hacked database:
RawPassword (not stored)  |  Hashed   |     Salt
--------------------------------------------------------
letmein                       WEFLS...       WEFOJFOFO...

Common password dictionary:
   Common Password
   --------------
   letmein
   12345
   ...

For each user record, loop the common passwords and hash them:
for each user in hacked_DB

    salt = users_salt
    hashed_pw = users_hashed_password

    for each common_password

        testhash = sha1(common_password + salt)
        if testhash = hashed_pw then
           //Match!  Users password = common_password
           //Lets visit the webpage and login now.
        end if

    next

next

I hope this illustrates my point a lot better.
Given 10,000 common passwords, and 10,000 user records, we would need to calculate 100,000,000 hashes to discover as many user passwords as possible.  It might take a few hours, but it's not really an issue.
Update on Cracking Theory
We will assume we are a corrupt webhost, that has access to a database of SHA1 hashes and salts, along with your algorithm to blend them.  The database has 10,000 user records.
This site claims to be able to calculate 2,300,000,000 SHA1 hashes per second using the GPU.  (In real world situation probably will be slower, but for now we will use that quoted figure).

(((95^4)/2300000000)/2)*10000 = 177
  seconds

Given a full range of 95 printable ASCII characters, with a maximum length of 4 characters, divided by the rate of calculation (variable), divided by 2 (assuming the average time to discover password will on average require 50% of permutations) for 10,000 users it would take 177 seconds to work out all users passwords where the length is <= 4.
Let's adjust it a bit for realism.

(((36^7)/1000000000)/2)*10000 = 2 days

Assuming non case sensitivity, with a password length <= 7, only alphanumeric chars, it would take 4 days to solve for 10,000 user records, and I've halved the speed of the algorithm to reflect overhead and non ideal circumstance.
It is important to recognise that this is a linear brute force attack, all calculations are independant of one another, therfore it's a perfect task for multiple systems to solve.  (IE easy to set up 2 computers running attack from different ends that would half the exectution time).
Given the case of recursively hashing a password 1,000 times to make this task more computationally expensive:

(((36^7) / 1 000 000 000) / 2) * 1000
  seconds = 10.8839117 hours

This represents a maximum length of 7 alpha-numeric characters, at a less than half speed execution from quoted figure for one user.
Recursively hashing 1,000 times effectively blocks a blanket attack, but targetted attacks on user data are still vulnerable.
","It doesn't stop dictionary attacks.
What it does is stop someone who manages to get a copy of your password file from using a rainbow table to figure out what the passwords are from the hashes.
Eventually, it can be brute-forced, though.  The answer to that part is to force your users to not use dictionary words as passwords (minimum requirements of at least one number or special character, for example).
Update:
I should have mentioned this earlier, but some (most?) password systems use a different salt for each password, likely stored with the password itself.  This makes a single rainbow table useless.  This is how the UNIX crypt library works, and modern UNIX-like OSes have extended this library with new hash algorithms.
I know for a fact that support for SHA-256 and SHA-512 were added in newer versions of GNU crypt.
","12952","<security><hash><salt><dictionary-attack>","85","62","11","2018-07-10 13:47:18","3567255","26","44","1033581","","2018-07-10 13:47:18","2010-08-25 13:50:01",""
"3566504","Why do salts make dictionary attacks 'impossible'?","Update: Please note I am not asking what a salt is, what a rainbow table is, what a dictionary attack is, or what the purpose of a salt is. I am querying: If you know the users salt and hash, isn't it quite easy to calculate their password?
I understand the process, and implement it myself in some of my projects.
s =  random salt
storedPassword = sha1(password + s)

In the database you store:
username | hashed_password | salt

Every implementation of salting I have seen adds the salt either at the end of the password, or beginning:
hashed_Password = sha1(s + password )
hashed_Password = sha1(password + s)

Therfore, a dictionary attack from a hacker who is worth his salt (ha ha) would simply run each keyword against the stored salts in the common combinations listed above.
Surely the implementation described above simply adds another step for the hacker, without actually solving the underlying issue?  What alternatives are there to step around this issue, or am I misunderstanding the problem?
The only thing I can think to do is have a secret blending algorithm that laces the salt and password together in a random pattern, or adds other user fields to the hashing process meaning the hacker would have to have access to the database AND code to lace them for a dictionary attack to prove fruitful. (Update, as pointed out in comments it's best to assume the hacker has access to all your information so this probably isn't best).
Let me give an example of how I propose a hacker would hack a user database with a list of passwords and hashes:
Data from our hacked database:
RawPassword (not stored)  |  Hashed   |     Salt
--------------------------------------------------------
letmein                       WEFLS...       WEFOJFOFO...

Common password dictionary:
   Common Password
   --------------
   letmein
   12345
   ...

For each user record, loop the common passwords and hash them:
for each user in hacked_DB

    salt = users_salt
    hashed_pw = users_hashed_password

    for each common_password

        testhash = sha1(common_password + salt)
        if testhash = hashed_pw then
           //Match!  Users password = common_password
           //Lets visit the webpage and login now.
        end if

    next

next

I hope this illustrates my point a lot better.
Given 10,000 common passwords, and 10,000 user records, we would need to calculate 100,000,000 hashes to discover as many user passwords as possible.  It might take a few hours, but it's not really an issue.
Update on Cracking Theory
We will assume we are a corrupt webhost, that has access to a database of SHA1 hashes and salts, along with your algorithm to blend them.  The database has 10,000 user records.
This site claims to be able to calculate 2,300,000,000 SHA1 hashes per second using the GPU.  (In real world situation probably will be slower, but for now we will use that quoted figure).

(((95^4)/2300000000)/2)*10000 = 177
  seconds

Given a full range of 95 printable ASCII characters, with a maximum length of 4 characters, divided by the rate of calculation (variable), divided by 2 (assuming the average time to discover password will on average require 50% of permutations) for 10,000 users it would take 177 seconds to work out all users passwords where the length is <= 4.
Let's adjust it a bit for realism.

(((36^7)/1000000000)/2)*10000 = 2 days

Assuming non case sensitivity, with a password length <= 7, only alphanumeric chars, it would take 4 days to solve for 10,000 user records, and I've halved the speed of the algorithm to reflect overhead and non ideal circumstance.
It is important to recognise that this is a linear brute force attack, all calculations are independant of one another, therfore it's a perfect task for multiple systems to solve.  (IE easy to set up 2 computers running attack from different ends that would half the exectution time).
Given the case of recursively hashing a password 1,000 times to make this task more computationally expensive:

(((36^7) / 1 000 000 000) / 2) * 1000
  seconds = 10.8839117 hours

This represents a maximum length of 7 alpha-numeric characters, at a less than half speed execution from quoted figure for one user.
Recursively hashing 1,000 times effectively blocks a blanket attack, but targetted attacks on user data are still vulnerable.
","Salt makes Rainbow table attacks much more difficult since it makes a single password hash much harder to crack. Imagine you have a horrid password of just the number 1. A rainbow table attack would crack this immediately. 
Now imagine each password in the db is salted with a long random value of many random characters. Now your lousy password of ""1"" is stored in the db as a hash of 1 plus a bunch of random characters (the salt), so in this example the rainbow table needs to have the hash for something like: 1. 
So assuming your salt is something secure and random, say ()%ISLDGHASKLU(%#%#, the hacker's rainbow table would need to have an entry for 1*()%ISLDGHASKLU(*%#%#. Now using a rainbow table on even this simple password is no longer practical. 
","12952","<security><hash><salt><dictionary-attack>","85","1","11","2018-07-10 13:47:18","3567255","26","44","1033581","","2018-07-10 13:47:18","2010-08-25 13:50:01",""
"3566504","Why do salts make dictionary attacks 'impossible'?","Update: Please note I am not asking what a salt is, what a rainbow table is, what a dictionary attack is, or what the purpose of a salt is. I am querying: If you know the users salt and hash, isn't it quite easy to calculate their password?
I understand the process, and implement it myself in some of my projects.
s =  random salt
storedPassword = sha1(password + s)

In the database you store:
username | hashed_password | salt

Every implementation of salting I have seen adds the salt either at the end of the password, or beginning:
hashed_Password = sha1(s + password )
hashed_Password = sha1(password + s)

Therfore, a dictionary attack from a hacker who is worth his salt (ha ha) would simply run each keyword against the stored salts in the common combinations listed above.
Surely the implementation described above simply adds another step for the hacker, without actually solving the underlying issue?  What alternatives are there to step around this issue, or am I misunderstanding the problem?
The only thing I can think to do is have a secret blending algorithm that laces the salt and password together in a random pattern, or adds other user fields to the hashing process meaning the hacker would have to have access to the database AND code to lace them for a dictionary attack to prove fruitful. (Update, as pointed out in comments it's best to assume the hacker has access to all your information so this probably isn't best).
Let me give an example of how I propose a hacker would hack a user database with a list of passwords and hashes:
Data from our hacked database:
RawPassword (not stored)  |  Hashed   |     Salt
--------------------------------------------------------
letmein                       WEFLS...       WEFOJFOFO...

Common password dictionary:
   Common Password
   --------------
   letmein
   12345
   ...

For each user record, loop the common passwords and hash them:
for each user in hacked_DB

    salt = users_salt
    hashed_pw = users_hashed_password

    for each common_password

        testhash = sha1(common_password + salt)
        if testhash = hashed_pw then
           //Match!  Users password = common_password
           //Lets visit the webpage and login now.
        end if

    next

next

I hope this illustrates my point a lot better.
Given 10,000 common passwords, and 10,000 user records, we would need to calculate 100,000,000 hashes to discover as many user passwords as possible.  It might take a few hours, but it's not really an issue.
Update on Cracking Theory
We will assume we are a corrupt webhost, that has access to a database of SHA1 hashes and salts, along with your algorithm to blend them.  The database has 10,000 user records.
This site claims to be able to calculate 2,300,000,000 SHA1 hashes per second using the GPU.  (In real world situation probably will be slower, but for now we will use that quoted figure).

(((95^4)/2300000000)/2)*10000 = 177
  seconds

Given a full range of 95 printable ASCII characters, with a maximum length of 4 characters, divided by the rate of calculation (variable), divided by 2 (assuming the average time to discover password will on average require 50% of permutations) for 10,000 users it would take 177 seconds to work out all users passwords where the length is <= 4.
Let's adjust it a bit for realism.

(((36^7)/1000000000)/2)*10000 = 2 days

Assuming non case sensitivity, with a password length <= 7, only alphanumeric chars, it would take 4 days to solve for 10,000 user records, and I've halved the speed of the algorithm to reflect overhead and non ideal circumstance.
It is important to recognise that this is a linear brute force attack, all calculations are independant of one another, therfore it's a perfect task for multiple systems to solve.  (IE easy to set up 2 computers running attack from different ends that would half the exectution time).
Given the case of recursively hashing a password 1,000 times to make this task more computationally expensive:

(((36^7) / 1 000 000 000) / 2) * 1000
  seconds = 10.8839117 hours

This represents a maximum length of 7 alpha-numeric characters, at a less than half speed execution from quoted figure for one user.
Recursively hashing 1,000 times effectively blocks a blanket attack, but targetted attacks on user data are still vulnerable.
","Yes, you need just 3 days for sha1(salt | password). That's why good password storage algorithms use 1000-iteration hashing: you will need 8 years.
","12952","<security><hash><salt><dictionary-attack>","85","30","11","2018-07-10 13:47:18","3567255","26","44","1033581","","2018-07-10 13:47:18","2010-08-25 13:50:01",""
"3566504","Why do salts make dictionary attacks 'impossible'?","Update: Please note I am not asking what a salt is, what a rainbow table is, what a dictionary attack is, or what the purpose of a salt is. I am querying: If you know the users salt and hash, isn't it quite easy to calculate their password?
I understand the process, and implement it myself in some of my projects.
s =  random salt
storedPassword = sha1(password + s)

In the database you store:
username | hashed_password | salt

Every implementation of salting I have seen adds the salt either at the end of the password, or beginning:
hashed_Password = sha1(s + password )
hashed_Password = sha1(password + s)

Therfore, a dictionary attack from a hacker who is worth his salt (ha ha) would simply run each keyword against the stored salts in the common combinations listed above.
Surely the implementation described above simply adds another step for the hacker, without actually solving the underlying issue?  What alternatives are there to step around this issue, or am I misunderstanding the problem?
The only thing I can think to do is have a secret blending algorithm that laces the salt and password together in a random pattern, or adds other user fields to the hashing process meaning the hacker would have to have access to the database AND code to lace them for a dictionary attack to prove fruitful. (Update, as pointed out in comments it's best to assume the hacker has access to all your information so this probably isn't best).
Let me give an example of how I propose a hacker would hack a user database with a list of passwords and hashes:
Data from our hacked database:
RawPassword (not stored)  |  Hashed   |     Salt
--------------------------------------------------------
letmein                       WEFLS...       WEFOJFOFO...

Common password dictionary:
   Common Password
   --------------
   letmein
   12345
   ...

For each user record, loop the common passwords and hash them:
for each user in hacked_DB

    salt = users_salt
    hashed_pw = users_hashed_password

    for each common_password

        testhash = sha1(common_password + salt)
        if testhash = hashed_pw then
           //Match!  Users password = common_password
           //Lets visit the webpage and login now.
        end if

    next

next

I hope this illustrates my point a lot better.
Given 10,000 common passwords, and 10,000 user records, we would need to calculate 100,000,000 hashes to discover as many user passwords as possible.  It might take a few hours, but it's not really an issue.
Update on Cracking Theory
We will assume we are a corrupt webhost, that has access to a database of SHA1 hashes and salts, along with your algorithm to blend them.  The database has 10,000 user records.
This site claims to be able to calculate 2,300,000,000 SHA1 hashes per second using the GPU.  (In real world situation probably will be slower, but for now we will use that quoted figure).

(((95^4)/2300000000)/2)*10000 = 177
  seconds

Given a full range of 95 printable ASCII characters, with a maximum length of 4 characters, divided by the rate of calculation (variable), divided by 2 (assuming the average time to discover password will on average require 50% of permutations) for 10,000 users it would take 177 seconds to work out all users passwords where the length is <= 4.
Let's adjust it a bit for realism.

(((36^7)/1000000000)/2)*10000 = 2 days

Assuming non case sensitivity, with a password length <= 7, only alphanumeric chars, it would take 4 days to solve for 10,000 user records, and I've halved the speed of the algorithm to reflect overhead and non ideal circumstance.
It is important to recognise that this is a linear brute force attack, all calculations are independant of one another, therfore it's a perfect task for multiple systems to solve.  (IE easy to set up 2 computers running attack from different ends that would half the exectution time).
Given the case of recursively hashing a password 1,000 times to make this task more computationally expensive:

(((36^7) / 1 000 000 000) / 2) * 1000
  seconds = 10.8839117 hours

This represents a maximum length of 7 alpha-numeric characters, at a less than half speed execution from quoted figure for one user.
Recursively hashing 1,000 times effectively blocks a blanket attack, but targetted attacks on user data are still vulnerable.
","In simplest terms: without salting, each candidate password need only be hashed once to check it against every user, anywhere in the ""known universe"" (collection of compromised databases), whose password is hashed via the same algorithm.  With salting, if the number of possible salt values substantially exceeds the number of users in the ""known universe"", each candidate password must be hashed separately for each user against whom it will be tested.
","12952","<security><hash><salt><dictionary-attack>","85","2","11","2018-07-10 13:47:18","3567255","26","44","1033581","","2018-07-10 13:47:18","2010-08-25 13:50:01",""
"3566504","Why do salts make dictionary attacks 'impossible'?","Update: Please note I am not asking what a salt is, what a rainbow table is, what a dictionary attack is, or what the purpose of a salt is. I am querying: If you know the users salt and hash, isn't it quite easy to calculate their password?
I understand the process, and implement it myself in some of my projects.
s =  random salt
storedPassword = sha1(password + s)

In the database you store:
username | hashed_password | salt

Every implementation of salting I have seen adds the salt either at the end of the password, or beginning:
hashed_Password = sha1(s + password )
hashed_Password = sha1(password + s)

Therfore, a dictionary attack from a hacker who is worth his salt (ha ha) would simply run each keyword against the stored salts in the common combinations listed above.
Surely the implementation described above simply adds another step for the hacker, without actually solving the underlying issue?  What alternatives are there to step around this issue, or am I misunderstanding the problem?
The only thing I can think to do is have a secret blending algorithm that laces the salt and password together in a random pattern, or adds other user fields to the hashing process meaning the hacker would have to have access to the database AND code to lace them for a dictionary attack to prove fruitful. (Update, as pointed out in comments it's best to assume the hacker has access to all your information so this probably isn't best).
Let me give an example of how I propose a hacker would hack a user database with a list of passwords and hashes:
Data from our hacked database:
RawPassword (not stored)  |  Hashed   |     Salt
--------------------------------------------------------
letmein                       WEFLS...       WEFOJFOFO...

Common password dictionary:
   Common Password
   --------------
   letmein
   12345
   ...

For each user record, loop the common passwords and hash them:
for each user in hacked_DB

    salt = users_salt
    hashed_pw = users_hashed_password

    for each common_password

        testhash = sha1(common_password + salt)
        if testhash = hashed_pw then
           //Match!  Users password = common_password
           //Lets visit the webpage and login now.
        end if

    next

next

I hope this illustrates my point a lot better.
Given 10,000 common passwords, and 10,000 user records, we would need to calculate 100,000,000 hashes to discover as many user passwords as possible.  It might take a few hours, but it's not really an issue.
Update on Cracking Theory
We will assume we are a corrupt webhost, that has access to a database of SHA1 hashes and salts, along with your algorithm to blend them.  The database has 10,000 user records.
This site claims to be able to calculate 2,300,000,000 SHA1 hashes per second using the GPU.  (In real world situation probably will be slower, but for now we will use that quoted figure).

(((95^4)/2300000000)/2)*10000 = 177
  seconds

Given a full range of 95 printable ASCII characters, with a maximum length of 4 characters, divided by the rate of calculation (variable), divided by 2 (assuming the average time to discover password will on average require 50% of permutations) for 10,000 users it would take 177 seconds to work out all users passwords where the length is <= 4.
Let's adjust it a bit for realism.

(((36^7)/1000000000)/2)*10000 = 2 days

Assuming non case sensitivity, with a password length <= 7, only alphanumeric chars, it would take 4 days to solve for 10,000 user records, and I've halved the speed of the algorithm to reflect overhead and non ideal circumstance.
It is important to recognise that this is a linear brute force attack, all calculations are independant of one another, therfore it's a perfect task for multiple systems to solve.  (IE easy to set up 2 computers running attack from different ends that would half the exectution time).
Given the case of recursively hashing a password 1,000 times to make this task more computationally expensive:

(((36^7) / 1 000 000 000) / 2) * 1000
  seconds = 10.8839117 hours

This represents a maximum length of 7 alpha-numeric characters, at a less than half speed execution from quoted figure for one user.
Recursively hashing 1,000 times effectively blocks a blanket attack, but targetted attacks on user data are still vulnerable.
","The point of salting is to prevent the amortization of the attacker's effort.
With no salt, a single table of precomputed hash-password entries (e.g. MD5 of all alphanumeric 5 character strings, easy to find online) can be used on every user in every database in the world.
With a site-specific salt, the attacker has to compute the table himself and can then use it on all users of the site.
With a per-user salt, the attacker has to expend this effort for every user separately.
Of course, this doesn't do much to protect really weak passwords straight out of a dictionary, but it protects reasonably strong passwords against this amortization.
","12952","<security><hash><salt><dictionary-attack>","85","7","11","2018-07-10 13:47:18","3567255","26","44","1033581","","2018-07-10 13:47:18","2010-08-25 13:50:01",""
"3566504","Why do salts make dictionary attacks 'impossible'?","Update: Please note I am not asking what a salt is, what a rainbow table is, what a dictionary attack is, or what the purpose of a salt is. I am querying: If you know the users salt and hash, isn't it quite easy to calculate their password?
I understand the process, and implement it myself in some of my projects.
s =  random salt
storedPassword = sha1(password + s)

In the database you store:
username | hashed_password | salt

Every implementation of salting I have seen adds the salt either at the end of the password, or beginning:
hashed_Password = sha1(s + password )
hashed_Password = sha1(password + s)

Therfore, a dictionary attack from a hacker who is worth his salt (ha ha) would simply run each keyword against the stored salts in the common combinations listed above.
Surely the implementation described above simply adds another step for the hacker, without actually solving the underlying issue?  What alternatives are there to step around this issue, or am I misunderstanding the problem?
The only thing I can think to do is have a secret blending algorithm that laces the salt and password together in a random pattern, or adds other user fields to the hashing process meaning the hacker would have to have access to the database AND code to lace them for a dictionary attack to prove fruitful. (Update, as pointed out in comments it's best to assume the hacker has access to all your information so this probably isn't best).
Let me give an example of how I propose a hacker would hack a user database with a list of passwords and hashes:
Data from our hacked database:
RawPassword (not stored)  |  Hashed   |     Salt
--------------------------------------------------------
letmein                       WEFLS...       WEFOJFOFO...

Common password dictionary:
   Common Password
   --------------
   letmein
   12345
   ...

For each user record, loop the common passwords and hash them:
for each user in hacked_DB

    salt = users_salt
    hashed_pw = users_hashed_password

    for each common_password

        testhash = sha1(common_password + salt)
        if testhash = hashed_pw then
           //Match!  Users password = common_password
           //Lets visit the webpage and login now.
        end if

    next

next

I hope this illustrates my point a lot better.
Given 10,000 common passwords, and 10,000 user records, we would need to calculate 100,000,000 hashes to discover as many user passwords as possible.  It might take a few hours, but it's not really an issue.
Update on Cracking Theory
We will assume we are a corrupt webhost, that has access to a database of SHA1 hashes and salts, along with your algorithm to blend them.  The database has 10,000 user records.
This site claims to be able to calculate 2,300,000,000 SHA1 hashes per second using the GPU.  (In real world situation probably will be slower, but for now we will use that quoted figure).

(((95^4)/2300000000)/2)*10000 = 177
  seconds

Given a full range of 95 printable ASCII characters, with a maximum length of 4 characters, divided by the rate of calculation (variable), divided by 2 (assuming the average time to discover password will on average require 50% of permutations) for 10,000 users it would take 177 seconds to work out all users passwords where the length is <= 4.
Let's adjust it a bit for realism.

(((36^7)/1000000000)/2)*10000 = 2 days

Assuming non case sensitivity, with a password length <= 7, only alphanumeric chars, it would take 4 days to solve for 10,000 user records, and I've halved the speed of the algorithm to reflect overhead and non ideal circumstance.
It is important to recognise that this is a linear brute force attack, all calculations are independant of one another, therfore it's a perfect task for multiple systems to solve.  (IE easy to set up 2 computers running attack from different ends that would half the exectution time).
Given the case of recursively hashing a password 1,000 times to make this task more computationally expensive:

(((36^7) / 1 000 000 000) / 2) * 1000
  seconds = 10.8839117 hours

This represents a maximum length of 7 alpha-numeric characters, at a less than half speed execution from quoted figure for one user.
Recursively hashing 1,000 times effectively blocks a blanket attack, but targetted attacks on user data are still vulnerable.
","Salts are implemented to prevent rainbow table attacks. A rainbow table is a list of pre-calculated hashes, which makes translating a hash into it's phrase much more simple. You need to understand that salting isn't effective as a modern prevention to cracking a password unless we have a modern hashing algo. 
So lets say we're working with SHA1, taking advantage of recent exploits discovered with this algo, and lets say we have a computer running at 1,000,000 hashes/second, it would take 5.3 million million million years to find a collision, so yeah php can work 300 a second, big woop, doesn't really matter. The reason we salt is because if someone did bother to generate all common dictionary phrases,  (2^160 people, welcome to 2007 era exploits).
So here's an actual database, with 2 users I use for testing and admin purposes.
RegistrationTime        UserName        UserPass    
1280185359.365591       briang      a50b63e927b3aebfc20cd783e0fc5321b0e5e8b5
1281546174.065087       test        5872548f2abfef8cb729cac14bc979462798d023

In fact, the salting scheme is your sha1(registration time + user name). Go ahead, tell me my password, these are real passwords in production. You can even sit there and hash out a word list in php. Go wild.
I'm not crazy, I just know that this is secure. For fun sake, test's password is test. 
sha1(sha1(1281546174.065087 + test) + test) = 5872548f2abfef8cb729cac14bc979462798d023
You would need to generate an entire rainbow table perpended with 27662aee8eee1cb5ab4917b09bdba31d091ab732 for just this user. That means I can actually allow my passwords to not all be compromised by a single rainbow table, the hacker needs to generate an entire rainbow table for 27662aee8eee1cb5ab4917b09bdba31d091ab732 for test, and again f3f7735311217529f2e020468004a2aa5b3dee7f for briang. Think back to the 5.3 million million million years for all hashes. Think of the size of storing just the 2^80 hashes (that's well over 20 yottabytes), it's not going to happen. 
Don't confuse salting as a means of making a hash something you can't ever decode, it's a means of preventing a rainbow table from translating all your user passwords. It's imposable at this level of technology.
","12952","<security><hash><salt><dictionary-attack>","85","5","11","2018-07-10 13:47:18","3567255","26","44","1033581","","2018-07-10 13:47:18","2010-08-25 13:50:01",""
"3566504","Why do salts make dictionary attacks 'impossible'?","Update: Please note I am not asking what a salt is, what a rainbow table is, what a dictionary attack is, or what the purpose of a salt is. I am querying: If you know the users salt and hash, isn't it quite easy to calculate their password?
I understand the process, and implement it myself in some of my projects.
s =  random salt
storedPassword = sha1(password + s)

In the database you store:
username | hashed_password | salt

Every implementation of salting I have seen adds the salt either at the end of the password, or beginning:
hashed_Password = sha1(s + password )
hashed_Password = sha1(password + s)

Therfore, a dictionary attack from a hacker who is worth his salt (ha ha) would simply run each keyword against the stored salts in the common combinations listed above.
Surely the implementation described above simply adds another step for the hacker, without actually solving the underlying issue?  What alternatives are there to step around this issue, or am I misunderstanding the problem?
The only thing I can think to do is have a secret blending algorithm that laces the salt and password together in a random pattern, or adds other user fields to the hashing process meaning the hacker would have to have access to the database AND code to lace them for a dictionary attack to prove fruitful. (Update, as pointed out in comments it's best to assume the hacker has access to all your information so this probably isn't best).
Let me give an example of how I propose a hacker would hack a user database with a list of passwords and hashes:
Data from our hacked database:
RawPassword (not stored)  |  Hashed   |     Salt
--------------------------------------------------------
letmein                       WEFLS...       WEFOJFOFO...

Common password dictionary:
   Common Password
   --------------
   letmein
   12345
   ...

For each user record, loop the common passwords and hash them:
for each user in hacked_DB

    salt = users_salt
    hashed_pw = users_hashed_password

    for each common_password

        testhash = sha1(common_password + salt)
        if testhash = hashed_pw then
           //Match!  Users password = common_password
           //Lets visit the webpage and login now.
        end if

    next

next

I hope this illustrates my point a lot better.
Given 10,000 common passwords, and 10,000 user records, we would need to calculate 100,000,000 hashes to discover as many user passwords as possible.  It might take a few hours, but it's not really an issue.
Update on Cracking Theory
We will assume we are a corrupt webhost, that has access to a database of SHA1 hashes and salts, along with your algorithm to blend them.  The database has 10,000 user records.
This site claims to be able to calculate 2,300,000,000 SHA1 hashes per second using the GPU.  (In real world situation probably will be slower, but for now we will use that quoted figure).

(((95^4)/2300000000)/2)*10000 = 177
  seconds

Given a full range of 95 printable ASCII characters, with a maximum length of 4 characters, divided by the rate of calculation (variable), divided by 2 (assuming the average time to discover password will on average require 50% of permutations) for 10,000 users it would take 177 seconds to work out all users passwords where the length is <= 4.
Let's adjust it a bit for realism.

(((36^7)/1000000000)/2)*10000 = 2 days

Assuming non case sensitivity, with a password length <= 7, only alphanumeric chars, it would take 4 days to solve for 10,000 user records, and I've halved the speed of the algorithm to reflect overhead and non ideal circumstance.
It is important to recognise that this is a linear brute force attack, all calculations are independant of one another, therfore it's a perfect task for multiple systems to solve.  (IE easy to set up 2 computers running attack from different ends that would half the exectution time).
Given the case of recursively hashing a password 1,000 times to make this task more computationally expensive:

(((36^7) / 1 000 000 000) / 2) * 1000
  seconds = 10.8839117 hours

This represents a maximum length of 7 alpha-numeric characters, at a less than half speed execution from quoted figure for one user.
Recursively hashing 1,000 times effectively blocks a blanket attack, but targetted attacks on user data are still vulnerable.
","Also - one more imporatant point - using a USER-specific salt prevents the detection of two users with the SAME password - their hashes would match. That's why many times the hash is hash(salt + username + password) 
If you try and keep the hash secret the attacker also can not verify the hashes. 
Edit- just noticed the main point was made in a comment above.
","12952","<security><hash><salt><dictionary-attack>","85","6","11","2018-07-10 13:47:18","3567255","26","44","1033581","","2018-07-10 13:47:18","2010-08-25 13:50:01",""
"3566504","Why do salts make dictionary attacks 'impossible'?","Update: Please note I am not asking what a salt is, what a rainbow table is, what a dictionary attack is, or what the purpose of a salt is. I am querying: If you know the users salt and hash, isn't it quite easy to calculate their password?
I understand the process, and implement it myself in some of my projects.
s =  random salt
storedPassword = sha1(password + s)

In the database you store:
username | hashed_password | salt

Every implementation of salting I have seen adds the salt either at the end of the password, or beginning:
hashed_Password = sha1(s + password )
hashed_Password = sha1(password + s)

Therfore, a dictionary attack from a hacker who is worth his salt (ha ha) would simply run each keyword against the stored salts in the common combinations listed above.
Surely the implementation described above simply adds another step for the hacker, without actually solving the underlying issue?  What alternatives are there to step around this issue, or am I misunderstanding the problem?
The only thing I can think to do is have a secret blending algorithm that laces the salt and password together in a random pattern, or adds other user fields to the hashing process meaning the hacker would have to have access to the database AND code to lace them for a dictionary attack to prove fruitful. (Update, as pointed out in comments it's best to assume the hacker has access to all your information so this probably isn't best).
Let me give an example of how I propose a hacker would hack a user database with a list of passwords and hashes:
Data from our hacked database:
RawPassword (not stored)  |  Hashed   |     Salt
--------------------------------------------------------
letmein                       WEFLS...       WEFOJFOFO...

Common password dictionary:
   Common Password
   --------------
   letmein
   12345
   ...

For each user record, loop the common passwords and hash them:
for each user in hacked_DB

    salt = users_salt
    hashed_pw = users_hashed_password

    for each common_password

        testhash = sha1(common_password + salt)
        if testhash = hashed_pw then
           //Match!  Users password = common_password
           //Lets visit the webpage and login now.
        end if

    next

next

I hope this illustrates my point a lot better.
Given 10,000 common passwords, and 10,000 user records, we would need to calculate 100,000,000 hashes to discover as many user passwords as possible.  It might take a few hours, but it's not really an issue.
Update on Cracking Theory
We will assume we are a corrupt webhost, that has access to a database of SHA1 hashes and salts, along with your algorithm to blend them.  The database has 10,000 user records.
This site claims to be able to calculate 2,300,000,000 SHA1 hashes per second using the GPU.  (In real world situation probably will be slower, but for now we will use that quoted figure).

(((95^4)/2300000000)/2)*10000 = 177
  seconds

Given a full range of 95 printable ASCII characters, with a maximum length of 4 characters, divided by the rate of calculation (variable), divided by 2 (assuming the average time to discover password will on average require 50% of permutations) for 10,000 users it would take 177 seconds to work out all users passwords where the length is <= 4.
Let's adjust it a bit for realism.

(((36^7)/1000000000)/2)*10000 = 2 days

Assuming non case sensitivity, with a password length <= 7, only alphanumeric chars, it would take 4 days to solve for 10,000 user records, and I've halved the speed of the algorithm to reflect overhead and non ideal circumstance.
It is important to recognise that this is a linear brute force attack, all calculations are independant of one another, therfore it's a perfect task for multiple systems to solve.  (IE easy to set up 2 computers running attack from different ends that would half the exectution time).
Given the case of recursively hashing a password 1,000 times to make this task more computationally expensive:

(((36^7) / 1 000 000 000) / 2) * 1000
  seconds = 10.8839117 hours

This represents a maximum length of 7 alpha-numeric characters, at a less than half speed execution from quoted figure for one user.
Recursively hashing 1,000 times effectively blocks a blanket attack, but targetted attacks on user data are still vulnerable.
","Simply put salting does not prevent a hash from attack (bruteforce or dictionary), it only makes it harder; the attacker will either need to find the salting algorithm (which if implemented properly will make use of more iterations) or bruteforce the algo, which unless very simple, is nearly impossible. Salting also almost completely discards the option of rainbow table lookups...
","12952","<security><hash><salt><dictionary-attack>","85","2","11","2018-07-10 13:47:18","3567255","26","44","1033581","","2018-07-10 13:47:18","2010-08-25 13:50:01",""
"20893790","Using mcrypt_create_iv to create salt?","I'm currently in the process of learning how hashing + salting works, I'm currently using this code on PHP to generate 'salt'
function calculateSalt(){
$iv = mcrypt_create_iv(16, MCRYPT_DEV_URANDOM);
return $iv;
}

In theory this should return a good salt for hashing my passwords with. When I applied it to my small database of test passwords It seem'd like it looked pretty secure and unique although as this is a very low amount of test passwords I was wondering If this is an acceptable way to generate a good, unique salt or if mcrypt_create_iv was bad practice. From what I can tell it's main purpose isn't for salting but would It be bad If I used it for this purpose?
Note this database is not of public passwords, just test cases. Here is the salt + hashes using the above technique.

","I'll give you a copy of my RandomBytes function. It uses the most random source available on your system.
$count is how many bytes you want.
$base64 is true to output base64, false to output a binary string.
$sessionIdSafe is true to modify the base64 in such a way that it is still valid for using as a sessionid in PHP. It changes the base64 character set from A-Za-z0-9+/ to A-Za-z0-9,- , and strips any '=' padding characters from the end of the string.
function randomBytes($count, $base64 = false, $sessionIdSafe = false)
{
    $bytes = '';

    if(is_readable('/dev/urandom') && ($urandom = fopen('/dev/urandom', 'rb')) !== false)
    {
        $bytes = fread($urandom, $count);
        fclose($urandom);
    }

    if((strlen($bytes) < $count) && function_exists('mcrypt_create_iv'))
    {
        // Use MCRYPT_RAND on Windows hosts with PHP < 5.3.7, otherwise use MCRYPT_DEV_URANDOM
        // (http://bugs.php.net/55169).
        $flag = (version_compare(PHP_VERSION, '5.3.7', '<') && strncasecmp(PHP_OS, 'WIN', 3) == 0) ? MCRYPT_RAND : MCRYPT_DEV_URANDOM ;
        $bytes = mcrypt_create_iv($count,$flag);
    }

    if((strlen($bytes) < $count) && function_exists('openssl_random_pseudo_bytes'))
    {
        $bytes = openssl_random_pseudo_bytes($count);
    }

    if ((strlen($bytes) < $count) && class_exists('COM'))
    {
        // Officially deprecated in Windows 7
        // http://msdn.microsoft.com/en-us/library/aa388182%28v=vs.85%29.aspx
        try
        {
            /** @noinspection PhpUndefinedClassInspection */
            $CAPI_Util = new COM('CAPICOM.Utilities.1');
            if(is_callable(array($CAPI_Util,'GetRandom')))
            {
                /** @noinspection PhpUndefinedMethodInspection */
                $bytes = $CAPI_Util->GetRandom(16,0);
                $bytes = base64_decode($bytes);
            }
        }
        catch (Exception $e)
        {
        }
    }

    if (strlen($bytes) < $count)
    {
        mt_srand(microtime(true)*1000000);
        $bytes = '';
        $random_state = microtime();
        if (function_exists('getmypid'))
            $random_state .= getmypid();

        // for every 16 bytes that we need
        for ($i = 0; $i < $count; $i += 16)
        {
            // generate 16 bytes at a time in hexadecimal
            $random_state =
                md5(microtime() . $random_state . mt_rand());
            // convert the hex into binary. using pack so that the code is backwards
            // compatible with pre php-5 since md5(data,raw) is only available in 5
            $bytes .=
                pack('H*', md5($random_state));
        }
        $bytes = substr($bytes, 0, $count);
    }

    if ($base64)
    {
        $result = base64_encode($bytes);
        if($sessionIdSafe)
        {
            $result = str_replace(array('+','/','='),array('-',','),$result);
        }
        return $result;
    }
    else
    {
        return $bytes;
    }
}

","12901","<php><salt>","1","1","4","2015-01-29 17:48:49","20894039","4","2","2998107","","2014-01-02 23:27:35","2014-01-02 23:21:50",""
"20893790","Using mcrypt_create_iv to create salt?","I'm currently in the process of learning how hashing + salting works, I'm currently using this code on PHP to generate 'salt'
function calculateSalt(){
$iv = mcrypt_create_iv(16, MCRYPT_DEV_URANDOM);
return $iv;
}

In theory this should return a good salt for hashing my passwords with. When I applied it to my small database of test passwords It seem'd like it looked pretty secure and unique although as this is a very low amount of test passwords I was wondering If this is an acceptable way to generate a good, unique salt or if mcrypt_create_iv was bad practice. From what I can tell it's main purpose isn't for salting but would It be bad If I used it for this purpose?
Note this database is not of public passwords, just test cases. Here is the salt + hashes using the above technique.

","Although mcrypt_create_iv() is technically meant to create initialisation vectors for symmetric encryption, it can be used to generate random salts just as well.
However, for passwords, you should be using a password hashing function instead:
$hash = password_hash('my difficult password');

It uses crypt() internally and, depending on the platform, will either read from /dev/urandom directly or use php_win32_get_random_bytes() to generate a salt if none is provided.
One advantage in terms of storage is that both the hash and salt are stored in a single opaque string.
See also: password_hash()
","12901","<php><salt>","1","3","4","2015-01-29 17:48:49","20894039","4","2","2998107","","2014-01-02 23:27:35","2014-01-02 23:21:50",""
"20893790","Using mcrypt_create_iv to create salt?","I'm currently in the process of learning how hashing + salting works, I'm currently using this code on PHP to generate 'salt'
function calculateSalt(){
$iv = mcrypt_create_iv(16, MCRYPT_DEV_URANDOM);
return $iv;
}

In theory this should return a good salt for hashing my passwords with. When I applied it to my small database of test passwords It seem'd like it looked pretty secure and unique although as this is a very low amount of test passwords I was wondering If this is an acceptable way to generate a good, unique salt or if mcrypt_create_iv was bad practice. From what I can tell it's main purpose isn't for salting but would It be bad If I used it for this purpose?
Note this database is not of public passwords, just test cases. Here is the salt + hashes using the above technique.

","I would comment on @Jack's answer if I had enough rep but I don't so... following his answer you can look at Password Compat for generating password which is using the password_* functions being worked on for PHP 5.5.
","12901","<php><salt>","1","0","4","2015-01-29 17:48:49","20894039","4","2","2998107","","2014-01-02 23:27:35","2014-01-02 23:21:50",""
"20893790","Using mcrypt_create_iv to create salt?","I'm currently in the process of learning how hashing + salting works, I'm currently using this code on PHP to generate 'salt'
function calculateSalt(){
$iv = mcrypt_create_iv(16, MCRYPT_DEV_URANDOM);
return $iv;
}

In theory this should return a good salt for hashing my passwords with. When I applied it to my small database of test passwords It seem'd like it looked pretty secure and unique although as this is a very low amount of test passwords I was wondering If this is an acceptable way to generate a good, unique salt or if mcrypt_create_iv was bad practice. From what I can tell it's main purpose isn't for salting but would It be bad If I used it for this purpose?
Note this database is not of public passwords, just test cases. Here is the salt + hashes using the above technique.

","If you're implementing your own user login system it is very important to follow well-established guidelines and not to attempt to reinvent the wheel concerning the crypto. Here's a very good article on how to do password hashing and salting.
It also comes with the following PHP example:
(I'll copy it here in case the original source goes down.)
<?php
/*
 * Password Hashing With PBKDF2 (http://crackstation.net/hashing-security.htm).
 * Copyright (c) 2013, Taylor Hornby
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, 
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation 
 * and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
 */

// These constants may be changed without breaking existing hashes.
define(""PBKDF2_HASH_ALGORITHM"", ""sha256"");
define(""PBKDF2_ITERATIONS"", 1000);
define(""PBKDF2_SALT_BYTE_SIZE"", 24);
define(""PBKDF2_HASH_BYTE_SIZE"", 24);

define(""HASH_SECTIONS"", 4);
define(""HASH_ALGORITHM_INDEX"", 0);
define(""HASH_ITERATION_INDEX"", 1);
define(""HASH_SALT_INDEX"", 2);
define(""HASH_PBKDF2_INDEX"", 3);

function create_hash($password)
{
    // format: algorithm:iterations:salt:hash
    $salt = base64_encode(mcrypt_create_iv(PBKDF2_SALT_BYTE_SIZE, MCRYPT_DEV_URANDOM));
    return PBKDF2_HASH_ALGORITHM . "":"" . PBKDF2_ITERATIONS . "":"" .  $salt . "":"" .
        base64_encode(pbkdf2(
            PBKDF2_HASH_ALGORITHM,
            $password,
            $salt,
            PBKDF2_ITERATIONS,
            PBKDF2_HASH_BYTE_SIZE,
            true
        ));
}

function validate_password($password, $correct_hash)
{
    $params = explode("":"", $correct_hash);
    if(count($params) < HASH_SECTIONS)
       return false;
    $pbkdf2 = base64_decode($params[HASH_PBKDF2_INDEX]);
    return slow_equals(
        $pbkdf2,
        pbkdf2(
            $params[HASH_ALGORITHM_INDEX],
            $password,
            $params[HASH_SALT_INDEX],
            (int)$params[HASH_ITERATION_INDEX],
            strlen($pbkdf2),
            true
        )
    );
}

// Compares two strings $a and $b in length-constant time.
function slow_equals($a, $b)
{
    $diff = strlen($a) ^ strlen($b);
    for($i = 0; $i < strlen($a) && $i < strlen($b); $i++)
    {
        $diff |= ord($a[$i]) ^ ord($b[$i]);
    }
    return $diff === 0;
}

/*
 * PBKDF2 key derivation function as defined by RSA's PKCS #5: https://www.ietf.org/rfc/rfc2898.txt
 * $algorithm - The hash algorithm to use. Recommended: SHA256
 * $password - The password.
 * $salt - A salt that is unique to the password.
 * $count - Iteration count. Higher is better, but slower. Recommended: At least 1000.
 * $key_length - The length of the derived key in bytes.
 * $raw_output - If true, the key is returned in raw binary format. Hex encoded otherwise.
 * Returns: A $key_length-byte key derived from the password and salt.
 *
 * Test vectors can be found here: https://www.ietf.org/rfc/rfc6070.txt
 *
 * This implementation of PBKDF2 was originally created by https://defuse.ca
 * With improvements by http://www.variations-of-shadow.com
 */
function pbkdf2($algorithm, $password, $salt, $count, $key_length, $raw_output = false)
{
    $algorithm = strtolower($algorithm);
    if(!in_array($algorithm, hash_algos(), true))
        trigger_error('PBKDF2 ERROR: Invalid hash algorithm.', E_USER_ERROR);
    if($count <= 0 || $key_length <= 0)
        trigger_error('PBKDF2 ERROR: Invalid parameters.', E_USER_ERROR);

    if (function_exists(""hash_pbkdf2"")) {
        // The output length is in NIBBLES (4-bits) if $raw_output is false!
        if (!$raw_output) {
            $key_length = $key_length * 2;
        }
        return hash_pbkdf2($algorithm, $password, $salt, $count, $key_length, $raw_output);
    }

    $hash_length = strlen(hash($algorithm, """", true));
    $block_count = ceil($key_length / $hash_length);

    $output = """";
    for($i = 1; $i <= $block_count; $i++) {
        // $i encoded as 4 bytes, big endian.
        $last = $salt . pack(""N"", $i);
        // first iteration
        $last = $xorsum = hash_hmac($algorithm, $last, $password, true);
        // perform the other $count - 1 iterations
        for ($j = 1; $j < $count; $j++) {
            $xorsum ^= ($last = hash_hmac($algorithm, $last, $password, true));
        }
        $output .= $xorsum;
    }

    if($raw_output)
        return substr($output, 0, $key_length);
    else
        return bin2hex(substr($output, 0, $key_length));
}
?>

","12901","<php><salt>","1","0","4","2015-01-29 17:48:49","20894039","4","2","2998107","","2014-01-02 23:27:35","2014-01-02 23:21:50",""
"13115242","Storing passwords with sha1 and salt","I have a simple registration script done in php and I was just curious if the way I am doing it is secure enough to store user passwords. I am generating a 32bit random salt and appending it to an sha1 hashed password. 
//create new validator object
    $validator = new data_validation();
    //validate user input
    $firstName = $validator->validate_fname($firstName); //is the first name a string?
    $lastName = $validator->validate_lname($lastName); // is the last name a string?
    $username = $validator->validate_username($username); // is the username a string?
    $email = $validator->validate_email($email); //is the email in valid format?

    //make sure there isn't duplicate emails
    $valQuery = $link->query(""SELECT email FROM users WHERE email = '"" .$email. ""'"");

    if ($valQuery->num_rows == 1) {
        echo ""An email is already registered with that address"";
        return false;
    }

    // generate a random salt for converting passwords into sha1
    $salt = $link->real_escape_string(bin2hex(mcrypt_create_iv(32, MCRYPT_DEV_URANDOM)));
    $saltedPW =  $password . $salt;
    $hashedPW = sha1($saltedPW);

    mysqli_connect($db_host, $db_user, $db_pass) OR DIE (mysqli_error());
    // select the db
    mysqli_select_db ($link, $db_name) OR DIE (""Unable to select db"".mysqli_error($db_name));

     // our sql query
    $sql = ""INSERT INTO users (first_name, last_name, username, email, password, salt) VALUES ('$firstName', '$lastName', '$username', '$email', '$hashedPW', '$salt');"";

    //save the updated information to the database          
    $result = mysqli_query($link, $sql) or die(""Error in Query: "" . mysqli_error($link));

    if (!mysqli_error($link)) 
    {
        $row = mysqli_fetch_assoc($result);
        $_SESSION['user_id'] = $row['user_id'];
        $_SESSION['loggedin'] = TRUE;
        header(""Location: ../home"");
    }

Also, I am using a combination of procedural and oop php. Most of it is done in procedural, but there are a few oop classes such as the validation class you see used in the above script. Will this cause any performance issues using both styles?
","Switching between procedural and OO in itself will not affect performance.  The overhead of loading and instantiating classes is negligable.  However, the managing a non-OO codebase that grow can be a non-negligible task--especially juggling everything in global namespace.
Adding an additional field to your insert (the salt) also will not affect anything.  Using the salt does not add overhead to the sha1 algorithm by tacking it to the end of the password.
I am a little confused at how you choose to generate the random salt, but it doesn't look very system intensive either.
","12656","<php><hash><mysqli><sha1><salt>","3","2","2","2014-07-19 17:21:07","13115263","5","3","","","","2012-10-29 02:38:00",""
"13115242","Storing passwords with sha1 and salt","I have a simple registration script done in php and I was just curious if the way I am doing it is secure enough to store user passwords. I am generating a 32bit random salt and appending it to an sha1 hashed password. 
//create new validator object
    $validator = new data_validation();
    //validate user input
    $firstName = $validator->validate_fname($firstName); //is the first name a string?
    $lastName = $validator->validate_lname($lastName); // is the last name a string?
    $username = $validator->validate_username($username); // is the username a string?
    $email = $validator->validate_email($email); //is the email in valid format?

    //make sure there isn't duplicate emails
    $valQuery = $link->query(""SELECT email FROM users WHERE email = '"" .$email. ""'"");

    if ($valQuery->num_rows == 1) {
        echo ""An email is already registered with that address"";
        return false;
    }

    // generate a random salt for converting passwords into sha1
    $salt = $link->real_escape_string(bin2hex(mcrypt_create_iv(32, MCRYPT_DEV_URANDOM)));
    $saltedPW =  $password . $salt;
    $hashedPW = sha1($saltedPW);

    mysqli_connect($db_host, $db_user, $db_pass) OR DIE (mysqli_error());
    // select the db
    mysqli_select_db ($link, $db_name) OR DIE (""Unable to select db"".mysqli_error($db_name));

     // our sql query
    $sql = ""INSERT INTO users (first_name, last_name, username, email, password, salt) VALUES ('$firstName', '$lastName', '$username', '$email', '$hashedPW', '$salt');"";

    //save the updated information to the database          
    $result = mysqli_query($link, $sql) or die(""Error in Query: "" . mysqli_error($link));

    if (!mysqli_error($link)) 
    {
        $row = mysqli_fetch_assoc($result);
        $_SESSION['user_id'] = $row['user_id'];
        $_SESSION['loggedin'] = TRUE;
        header(""Location: ../home"");
    }

Also, I am using a combination of procedural and oop php. Most of it is done in procedural, but there are a few oop classes such as the validation class you see used in the above script. Will this cause any performance issues using both styles?
","No. Stop what you're doing, read How to securely hash passwords, then read Secure hash and salt for PHP passwords:
Most importantly:


Use scrypt when you can; bcrypt if you cannot.
Use PBKDF2 if you cannot use either bcrypt or scrypt.


See this answer for a comparison of PBKDF2, bcrypt and scrypt.
Also refer to the often-linked article How To Safely Store A Password:

[MD5, SHA1, SHA256, SHA512, SHA-3, etc] are all general purpose hash functions, designed to calculate a digest of huge amounts of data in as short a time as possible. This means that they are fantastic for ensuring the integrity of data and utterly rubbish for storing passwords.

PHPass is probably the easiest way to do bcrypt hashing in PHP. You can also do it the hard way using the crypt function and CRYPT_BLOWFISH if you want, but be aware that there's a lot of ways to get it wrong, and the interface is fairly arcane (like how you specify salt values).
","12656","<php><hash><mysqli><sha1><salt>","3","6","2","2014-07-19 17:21:07","13115263","5","3","","","","2012-10-29 02:38:00",""
"4134672","Authenticate a user login with salt","I'm using salt to encrypt my users' passwords.
I'm using PHP, and here's a quick sample of what happens during a users registers.
Here it is:
PHP code:
    // Gives me my random key. My salt generator.
    $salt = uniqid(mt_rand());

    // My password via what users inputs.
    $userpwd;

    // Then the encryption. I use a HMAC hash.
    $encrypted = hmac_hash(""sha256"", $userpwd, $salt);
?>

Now that all works for me in my script. But my question is, how do I authenticate a user logging in? The new encrypted password is random, so I can't compare the password from the login form to the saved encrypted password in the database.
I've searched and can't find a solution. Maybe I haven't searched hard enough, but is there a way to decrypt the password? What can I do to authenticate the user with my script?
","You hash the user's inputted password the same way, then compare if the hash is the same as the one you stored.
if (hmac_hash(""sha256"", $_POST['password'], $saltFromDatabase) === $hashFromDatabase)
    $login = true;

You also have to store the salt since it's different for each user. I would also recommend using a second salt that is constant across the application (stored on a hard config file, so that even if the database is compromised, the passwords are still safe).
Note: Hashing is not the same as encryption; It is an irreversible process.
","11903","<php><security><login><salt>","1","3","6","2011-03-08 20:46:05","4134712","0","4","63550","","2011-03-08 20:45:03","2010-11-09 14:21:42",""
"4134672","Authenticate a user login with salt","I'm using salt to encrypt my users' passwords.
I'm using PHP, and here's a quick sample of what happens during a users registers.
Here it is:
PHP code:
    // Gives me my random key. My salt generator.
    $salt = uniqid(mt_rand());

    // My password via what users inputs.
    $userpwd;

    // Then the encryption. I use a HMAC hash.
    $encrypted = hmac_hash(""sha256"", $userpwd, $salt);
?>

Now that all works for me in my script. But my question is, how do I authenticate a user logging in? The new encrypted password is random, so I can't compare the password from the login form to the saved encrypted password in the database.
I've searched and can't find a solution. Maybe I haven't searched hard enough, but is there a way to decrypt the password? What can I do to authenticate the user with my script?
","You don't decrypt what you've stored. You hash the entered password and compare it with what was stored at registration. This is because if two hashes match then (to all intents and purposes) you can be confident that the source data matches.
","11903","<php><security><login><salt>","1","0","6","2011-03-08 20:46:05","4134712","0","4","63550","","2011-03-08 20:45:03","2010-11-09 14:21:42",""
"4134672","Authenticate a user login with salt","I'm using salt to encrypt my users' passwords.
I'm using PHP, and here's a quick sample of what happens during a users registers.
Here it is:
PHP code:
    // Gives me my random key. My salt generator.
    $salt = uniqid(mt_rand());

    // My password via what users inputs.
    $userpwd;

    // Then the encryption. I use a HMAC hash.
    $encrypted = hmac_hash(""sha256"", $userpwd, $salt);
?>

Now that all works for me in my script. But my question is, how do I authenticate a user logging in? The new encrypted password is random, so I can't compare the password from the login form to the saved encrypted password in the database.
I've searched and can't find a solution. Maybe I haven't searched hard enough, but is there a way to decrypt the password? What can I do to authenticate the user with my script?
","Your salt needs to be constant, and not random. That way when you are checking the password against the hash, all you have to do is hash the input with the salt again, and the resulting hash should be the same as what came out before.
","11903","<php><security><login><salt>","1","-2","6","2011-03-08 20:46:05","4134712","0","4","63550","","2011-03-08 20:45:03","2010-11-09 14:21:42",""
"4134672","Authenticate a user login with salt","I'm using salt to encrypt my users' passwords.
I'm using PHP, and here's a quick sample of what happens during a users registers.
Here it is:
PHP code:
    // Gives me my random key. My salt generator.
    $salt = uniqid(mt_rand());

    // My password via what users inputs.
    $userpwd;

    // Then the encryption. I use a HMAC hash.
    $encrypted = hmac_hash(""sha256"", $userpwd, $salt);
?>

Now that all works for me in my script. But my question is, how do I authenticate a user logging in? The new encrypted password is random, so I can't compare the password from the login form to the saved encrypted password in the database.
I've searched and can't find a solution. Maybe I haven't searched hard enough, but is there a way to decrypt the password? What can I do to authenticate the user with my script?
","You need to generate a unique salt for each user's password, and then store the value of the salt somewhere you can retrieve it. For example, by saving the salt to a user table along with the username and hashed password. That way you can extract the known salt and run it through your function when you go to authenticate a user.
Here is an article that contains more information: Storing Passwords - done right!
And for more information about salts: salt-generation-and-open-source-software
","11903","<php><security><login><salt>","1","8","6","2011-03-08 20:46:05","4134712","0","4","63550","","2011-03-08 20:45:03","2010-11-09 14:21:42",""
"4134672","Authenticate a user login with salt","I'm using salt to encrypt my users' passwords.
I'm using PHP, and here's a quick sample of what happens during a users registers.
Here it is:
PHP code:
    // Gives me my random key. My salt generator.
    $salt = uniqid(mt_rand());

    // My password via what users inputs.
    $userpwd;

    // Then the encryption. I use a HMAC hash.
    $encrypted = hmac_hash(""sha256"", $userpwd, $salt);
?>

Now that all works for me in my script. But my question is, how do I authenticate a user logging in? The new encrypted password is random, so I can't compare the password from the login form to the saved encrypted password in the database.
I've searched and can't find a solution. Maybe I haven't searched hard enough, but is there a way to decrypt the password? What can I do to authenticate the user with my script?
","You encrypt the password used to log in and compare it with the encrypted password in your database. :)
","11903","<php><security><login><salt>","1","0","6","2011-03-08 20:46:05","4134712","0","4","63550","","2011-03-08 20:45:03","2010-11-09 14:21:42",""
"4134672","Authenticate a user login with salt","I'm using salt to encrypt my users' passwords.
I'm using PHP, and here's a quick sample of what happens during a users registers.
Here it is:
PHP code:
    // Gives me my random key. My salt generator.
    $salt = uniqid(mt_rand());

    // My password via what users inputs.
    $userpwd;

    // Then the encryption. I use a HMAC hash.
    $encrypted = hmac_hash(""sha256"", $userpwd, $salt);
?>

Now that all works for me in my script. But my question is, how do I authenticate a user logging in? The new encrypted password is random, so I can't compare the password from the login form to the saved encrypted password in the database.
I've searched and can't find a solution. Maybe I haven't searched hard enough, but is there a way to decrypt the password? What can I do to authenticate the user with my script?
","You compute the hash of the password user has entered, just as you do when registering them. Note that the code is semi-pseudo code, you need to adapt it to your libraries or functions.
$res = db('SELECT etc FROM users WHERE user=? AND pass=?',
    $_POST['user'], hmac_hash(""sha256"", $_POST['pass'], $salt));
if(numRows($res) > 0) {
    // continue with authentication
}

If the salt is stored in the db, then you have to either fetch it first, or do the comparison in the db.
","11903","<php><security><login><salt>","1","0","6","2011-03-08 20:46:05","4134712","0","4","63550","","2011-03-08 20:45:03","2010-11-09 14:21:42",""
"46693430","What are Salt Rounds and how are Salts stored in Bcrypt?","I'm trying to configure Bcrypt for a node app that I'm making and have several questions about salts that I hope someone here can help kindly answer.

What is a salt 'round'? For example, in the github docs (https://github.com/kelektiv/node.bcrypt.js/) it uses a salt round of 10. What does that mean exactly?
Is the salt generated by Bcrypt always the same? For example, if I am saving user's hashed passwords to a DB, is the salt that it used to hash the password the same for every password?
How is the salt stored? Is it secure from potential attacks?

","
With ""salt round"" they actually mean the cost factor. The cost factor controls how much time is needed to calculate a single BCrypt hash. The higher the cost factor, the more hashing rounds are done. Increasing the cost factor by 1 doubles the necessary time. The more time is necessary, the more difficult is brute-forcing. 
The salt is a random value, and should differ for each calculation, so the result should hardly ever be the same, even for equal passwords.
The salt is usually included in the resulting hash-string in readable form. So with storing the hash-string you also store the salt. Have a look at this answer for more details.

","11698","<hash><passwords><password-protection><bcrypt><salt>","24","28","1","2018-11-25 23:25:09","46713082","0","7","","","","2017-10-11 16:37:01",""
"11140510","Codeigniter ion auth password issue","I ran in to a problem with ion auth what i cant really solve.
I use sha1 encryption, salt is turnd off in config.
Checked if the input post posts the correct input and it does.
I type in for password 12345, and that should be 8cb2237d0679ca88db6464eac60da96345513964 whit sha1 encryption.
But when it sends it into the database its totally different every time, like it would create a random string each time
Here is my signup function
// signup
function signup()
{
     loggedIn();

     $this->load->view('partials/header');

     $this->form_validation->set_rules('username', 'Username', 'required');
     $this->form_validation->set_rules('password', 'Password', 'required|min_length[4]');
     $this->form_validation->set_rules('repassword', 'Retype Your Password', 'required|min_length[4]|matches[password]');

     if($this->form_validation->run() !== FALSE)
     {
          $username = $this->input->post('username');
          $password = $this->input->post('password');
          $email = $this->input->post('email');
          $additional_data = array('name' => $this->input->post('name'));    

          $group = array('2');
          $this->ion_auth->register($username, $password, $email, $additional_data, $group);
     }

     $this->load->view('user/user_signup_view');
     $this->load->view('partials/footer');
} 

Could please someone give me a hint? or if anybody ran in to a similar problem and got it fixed, please provide some help
EDIT
config file
<?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed');

/*
| -------------------------------------------------------------------------
| Database Type
| -------------------------------------------------------------------------
| If set to TRUE, Ion Auth will use MongoDB as its database backend.
|
| If you use MongoDB there are two external dependencies that have to be 
| integrated with your project:
|   CodeIgniter MongoDB Active Record Library - http://github.com/alexbilbie/codeigniter-mongodb-library/tree/v2
|   CodeIgniter MongoDB Session Library - http://github.com/sepehr/ci-mongodb-session
*/
$config['use_mongodb'] = FALSE;

/*
| -------------------------------------------------------------------------
| MongoDB Collection.
| -------------------------------------------------------------------------
| Setup the mongodb docs using the following command: 
| $ mongorestore sql/mongo
|
| Ion Auth uses a simplified schema when using MongoDB as backend, here they are:
|
| groups: {
|   _id: GROUP_ID,
|   name,
|   description
| }
|
| login_attempts: {
|   _id: LOGIN_ATTEMPT_ID,
|   ip_address,
|   login,
|   time
| }
|
| users: {
|   _id: USER_ID,
|   ip_address,
|   username, (ensureIndex)
|   password,
|   salt,
|   email, (ensureIndex)
|   activation_code,
|   forgotten_password_code, (ensureIndex)
|   forgotten_password_time,
|   remember_code,
|   created_on, (ensureIndex)
|   last_login,
|   active, (ensureIndex)
|   first_name,
|   last_name,
|   company,
|   phone,
|   groups: [GROUP_ID_1, GROUP_ID_2, ...], (ensureIndex)
| }
|
*/
$config['collections']['users']          = 'users';
$config['collections']['groups']         = 'groups';
$config['collections']['login_attempts'] = 'login_attempts';

/*
| -------------------------------------------------------------------------
| Tables.
| -------------------------------------------------------------------------
| Database table names.
*/
$config['tables']['users']           = 'job_users';
$config['tables']['groups']          = 'job_groups';
$config['tables']['users_groups']    = 'job_users_groups';
$config['tables']['login_attempts']  = 'job_ogin_attempts';

/*
 | Users table column and Group table column you want to join WITH.
 |
 | Joins from users.id
 | Joins from groups.id
 */
$config['join']['users']  = 'user_id';
$config['join']['groups'] = 'group_id';

/*
 | -------------------------------------------------------------------------
 | Hash Method (sha1 or bcrypt)
 | -------------------------------------------------------------------------
 | Bcrypt is available in PHP 5.3+
 |
 | IMPORTANT: Based on the recommendation by many professionals, it is highly recommended to use
 | bcrypt instead of sha1.
 |
 | NOTE: If you use bcrypt you will need to increase your password column character limit to (80)
 |
 | Below there is ""default_rounds"" setting.  This defines how strong the encryption will be,
 | but remember the more rounds you set the longer it will take to hash (CPU usage) So adjust
 | this based on your server hardware.
 |
 | If you are using Bcrypt the Admin password field also needs to be changed in order login as admin:
 | $2a$07$SeBknntpZror9uyftVopmu61qg0ms8Qv1yV6FG.kQOSM.9QhmTo36
 |
 | Becareful how high you set max_rounds, I would do your own testing on how long it takes
 | to encrypt with x rounds.
 */
$config['hash_method']    = 'sha1'; // IMPORTANT: Make sure this is set to either sha1 or bcrypt
$config['default_rounds'] = 8;      // This does not apply if random_rounds is set to true
$config['random_rounds']  = FALSE;
$config['min_rounds']     = 5;
$config['max_rounds']     = 9;

/*
 | -------------------------------------------------------------------------
 | Authentication options.
 | -------------------------------------------------------------------------
 | maximum_login_attempts: This maximum is not enforced by the library, but is
 | used by $this->ion_auth->is_max_login_attempts_exceeded().
 | The controller should check this function and act
 | appropriately. If this variable set to 0, there is no maximum.
 */
$config['site_title']           = ""Example.com"";        // Site Title, example.com
$config['admin_email']          = ""admin@example.com"";  // Admin Email, admin@example.com
$config['default_group']        = 'members';            // Default group, use name
$config['admin_group']          = 'admin';              // Default administrators group, use name
$config['identity']             = 'email';              // A database column which is used to login with
$config['min_password_length']  = 7;                    // Minimum Required Length of Password
$config['max_password_length']  = 20;                   // Maximum Allowed Length of Password
$config['email_activation']     = FALSE;                // Email Activation for registration
$config['manual_activation']    = FALSE;                // Manual Activation for registration
$config['remember_users']       = TRUE;                 // Allow users to be remembered and enable auto-login
$config['user_expire']          = 86500;                // How long to remember the user (seconds)
$config['user_extend_on_login'] = FALSE;                // Extend the users cookies everytime they auto-login
$config['track_login_attempts'] = FALSE;                // Track the number of failed login attempts for each user or ip.
$config['maximum_login_attempts']     = 3;              // The maximum number of failed login attempts.
$config['forgot_password_expiration'] = 0;              // The number of seconds after which a forgot password request will expire. If set to 0, forgot password requests will not expire.


/*
 | -------------------------------------------------------------------------
 | Email options.
 | -------------------------------------------------------------------------
 | email_config:
 |    'file' = Use the default CI config or use from a config file
 |    array  = Manually set your email config settings
 */
$config['use_ci_email'] = FALSE; // Send Email using the builtin CI email class, if false it will return the code and the identity
$config['email_config'] = array(
    'mailtype' => 'html',
);

/*
 | -------------------------------------------------------------------------
 | Email templates.
 | -------------------------------------------------------------------------
 | Folder where email templates are stored.
 | Default: auth/
 */
$config['email_templates'] = 'auth/email/';

/*
 | -------------------------------------------------------------------------
 | Activate Account Email Template
 | -------------------------------------------------------------------------
 | Default: activate.tpl.php
 */
$config['email_activate'] = 'activate.tpl.php';

/*
 | -------------------------------------------------------------------------
 | Forgot Password Email Template
 | -------------------------------------------------------------------------
 | Default: forgot_password.tpl.php
 */
$config['email_forgot_password'] = 'forgot_password.tpl.php';

/*
 | -------------------------------------------------------------------------
 | Forgot Password Complete Email Template
 | -------------------------------------------------------------------------
 | Default: new_password.tpl.php
 */
$config['email_forgot_password_complete'] = 'new_password.tpl.php';

/*
 | -------------------------------------------------------------------------
 | Salt options
 | -------------------------------------------------------------------------
 | salt_length Default: 10
 |
 | store_salt: Should the salt be stored in the database?
 | This will change your password encryption algorithm,
 | default password, 'password', changes to
 | fbaa5e216d163a02ae630ab1a43372635dd374c0 with default salt.
 */
$config['salt_length'] = 10;
$config['store_salt']  = FALSE;

/*
 | -------------------------------------------------------------------------
 | Message Delimiters.
 | -------------------------------------------------------------------------
 */
$config['message_start_delimiter'] = '<p>';     // Message start delimiter
$config['message_end_delimiter']   = '</p>';    // Message end delimiter
$config['error_start_delimiter']   = '<p>';     // Error mesage start delimiter
$config['error_end_delimiter']     = '</p>';    // Error mesage end delimiter

/* End of file ion_auth.php */
/* Location: ./application/config/ion_auth.php */

","ion_auth does use a salt and its random..
See the configs:

'salt_length' - Length of the encryption salt. DEFAULT is '10'.
'store_salt' - TRUE or FALSE. Store the salt in a separate database
  column or not. This can be useful for integrating with existing apps.
  DEFAULT is 'false'. 

You should create a controller to create the user.
<?php

function register(){
  //$this->ion_auth->register($username, $password, $email, $additional_data, $group)
    $this->ion_auth->register('robert', '123456', 'robert@robert.com', array( 'first_name' => 'Robert', 'last_name' => 'Roberts' ), array('1') );
}

Edit
Just noticed you are doing this.. I was under the impression you were trying to manually add the user to the table.
Couple questions

What is loggedIn();
did you use the provided sql file to import/create the tables and data for ion_auth
what does your config look like?
group id #2 is not required as the user thats registering will ALWAYS be assigned to group 2

You're defining $additional_data incorrectly as there are first_name, last_name, phone fields and no name field. 
","11535","<codeigniter><authentication><salt>","4","1","2","2017-01-13 18:19:51","11140868","2","2","4311","","2012-11-12 03:36:29","2012-06-21 14:34:31",""
"11140510","Codeigniter ion auth password issue","I ran in to a problem with ion auth what i cant really solve.
I use sha1 encryption, salt is turnd off in config.
Checked if the input post posts the correct input and it does.
I type in for password 12345, and that should be 8cb2237d0679ca88db6464eac60da96345513964 whit sha1 encryption.
But when it sends it into the database its totally different every time, like it would create a random string each time
Here is my signup function
// signup
function signup()
{
     loggedIn();

     $this->load->view('partials/header');

     $this->form_validation->set_rules('username', 'Username', 'required');
     $this->form_validation->set_rules('password', 'Password', 'required|min_length[4]');
     $this->form_validation->set_rules('repassword', 'Retype Your Password', 'required|min_length[4]|matches[password]');

     if($this->form_validation->run() !== FALSE)
     {
          $username = $this->input->post('username');
          $password = $this->input->post('password');
          $email = $this->input->post('email');
          $additional_data = array('name' => $this->input->post('name'));    

          $group = array('2');
          $this->ion_auth->register($username, $password, $email, $additional_data, $group);
     }

     $this->load->view('user/user_signup_view');
     $this->load->view('partials/footer');
} 

Could please someone give me a hint? or if anybody ran in to a similar problem and got it fixed, please provide some help
EDIT
config file
<?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed');

/*
| -------------------------------------------------------------------------
| Database Type
| -------------------------------------------------------------------------
| If set to TRUE, Ion Auth will use MongoDB as its database backend.
|
| If you use MongoDB there are two external dependencies that have to be 
| integrated with your project:
|   CodeIgniter MongoDB Active Record Library - http://github.com/alexbilbie/codeigniter-mongodb-library/tree/v2
|   CodeIgniter MongoDB Session Library - http://github.com/sepehr/ci-mongodb-session
*/
$config['use_mongodb'] = FALSE;

/*
| -------------------------------------------------------------------------
| MongoDB Collection.
| -------------------------------------------------------------------------
| Setup the mongodb docs using the following command: 
| $ mongorestore sql/mongo
|
| Ion Auth uses a simplified schema when using MongoDB as backend, here they are:
|
| groups: {
|   _id: GROUP_ID,
|   name,
|   description
| }
|
| login_attempts: {
|   _id: LOGIN_ATTEMPT_ID,
|   ip_address,
|   login,
|   time
| }
|
| users: {
|   _id: USER_ID,
|   ip_address,
|   username, (ensureIndex)
|   password,
|   salt,
|   email, (ensureIndex)
|   activation_code,
|   forgotten_password_code, (ensureIndex)
|   forgotten_password_time,
|   remember_code,
|   created_on, (ensureIndex)
|   last_login,
|   active, (ensureIndex)
|   first_name,
|   last_name,
|   company,
|   phone,
|   groups: [GROUP_ID_1, GROUP_ID_2, ...], (ensureIndex)
| }
|
*/
$config['collections']['users']          = 'users';
$config['collections']['groups']         = 'groups';
$config['collections']['login_attempts'] = 'login_attempts';

/*
| -------------------------------------------------------------------------
| Tables.
| -------------------------------------------------------------------------
| Database table names.
*/
$config['tables']['users']           = 'job_users';
$config['tables']['groups']          = 'job_groups';
$config['tables']['users_groups']    = 'job_users_groups';
$config['tables']['login_attempts']  = 'job_ogin_attempts';

/*
 | Users table column and Group table column you want to join WITH.
 |
 | Joins from users.id
 | Joins from groups.id
 */
$config['join']['users']  = 'user_id';
$config['join']['groups'] = 'group_id';

/*
 | -------------------------------------------------------------------------
 | Hash Method (sha1 or bcrypt)
 | -------------------------------------------------------------------------
 | Bcrypt is available in PHP 5.3+
 |
 | IMPORTANT: Based on the recommendation by many professionals, it is highly recommended to use
 | bcrypt instead of sha1.
 |
 | NOTE: If you use bcrypt you will need to increase your password column character limit to (80)
 |
 | Below there is ""default_rounds"" setting.  This defines how strong the encryption will be,
 | but remember the more rounds you set the longer it will take to hash (CPU usage) So adjust
 | this based on your server hardware.
 |
 | If you are using Bcrypt the Admin password field also needs to be changed in order login as admin:
 | $2a$07$SeBknntpZror9uyftVopmu61qg0ms8Qv1yV6FG.kQOSM.9QhmTo36
 |
 | Becareful how high you set max_rounds, I would do your own testing on how long it takes
 | to encrypt with x rounds.
 */
$config['hash_method']    = 'sha1'; // IMPORTANT: Make sure this is set to either sha1 or bcrypt
$config['default_rounds'] = 8;      // This does not apply if random_rounds is set to true
$config['random_rounds']  = FALSE;
$config['min_rounds']     = 5;
$config['max_rounds']     = 9;

/*
 | -------------------------------------------------------------------------
 | Authentication options.
 | -------------------------------------------------------------------------
 | maximum_login_attempts: This maximum is not enforced by the library, but is
 | used by $this->ion_auth->is_max_login_attempts_exceeded().
 | The controller should check this function and act
 | appropriately. If this variable set to 0, there is no maximum.
 */
$config['site_title']           = ""Example.com"";        // Site Title, example.com
$config['admin_email']          = ""admin@example.com"";  // Admin Email, admin@example.com
$config['default_group']        = 'members';            // Default group, use name
$config['admin_group']          = 'admin';              // Default administrators group, use name
$config['identity']             = 'email';              // A database column which is used to login with
$config['min_password_length']  = 7;                    // Minimum Required Length of Password
$config['max_password_length']  = 20;                   // Maximum Allowed Length of Password
$config['email_activation']     = FALSE;                // Email Activation for registration
$config['manual_activation']    = FALSE;                // Manual Activation for registration
$config['remember_users']       = TRUE;                 // Allow users to be remembered and enable auto-login
$config['user_expire']          = 86500;                // How long to remember the user (seconds)
$config['user_extend_on_login'] = FALSE;                // Extend the users cookies everytime they auto-login
$config['track_login_attempts'] = FALSE;                // Track the number of failed login attempts for each user or ip.
$config['maximum_login_attempts']     = 3;              // The maximum number of failed login attempts.
$config['forgot_password_expiration'] = 0;              // The number of seconds after which a forgot password request will expire. If set to 0, forgot password requests will not expire.


/*
 | -------------------------------------------------------------------------
 | Email options.
 | -------------------------------------------------------------------------
 | email_config:
 |    'file' = Use the default CI config or use from a config file
 |    array  = Manually set your email config settings
 */
$config['use_ci_email'] = FALSE; // Send Email using the builtin CI email class, if false it will return the code and the identity
$config['email_config'] = array(
    'mailtype' => 'html',
);

/*
 | -------------------------------------------------------------------------
 | Email templates.
 | -------------------------------------------------------------------------
 | Folder where email templates are stored.
 | Default: auth/
 */
$config['email_templates'] = 'auth/email/';

/*
 | -------------------------------------------------------------------------
 | Activate Account Email Template
 | -------------------------------------------------------------------------
 | Default: activate.tpl.php
 */
$config['email_activate'] = 'activate.tpl.php';

/*
 | -------------------------------------------------------------------------
 | Forgot Password Email Template
 | -------------------------------------------------------------------------
 | Default: forgot_password.tpl.php
 */
$config['email_forgot_password'] = 'forgot_password.tpl.php';

/*
 | -------------------------------------------------------------------------
 | Forgot Password Complete Email Template
 | -------------------------------------------------------------------------
 | Default: new_password.tpl.php
 */
$config['email_forgot_password_complete'] = 'new_password.tpl.php';

/*
 | -------------------------------------------------------------------------
 | Salt options
 | -------------------------------------------------------------------------
 | salt_length Default: 10
 |
 | store_salt: Should the salt be stored in the database?
 | This will change your password encryption algorithm,
 | default password, 'password', changes to
 | fbaa5e216d163a02ae630ab1a43372635dd374c0 with default salt.
 */
$config['salt_length'] = 10;
$config['store_salt']  = FALSE;

/*
 | -------------------------------------------------------------------------
 | Message Delimiters.
 | -------------------------------------------------------------------------
 */
$config['message_start_delimiter'] = '<p>';     // Message start delimiter
$config['message_end_delimiter']   = '</p>';    // Message end delimiter
$config['error_start_delimiter']   = '<p>';     // Error mesage start delimiter
$config['error_end_delimiter']     = '</p>';    // Error mesage end delimiter

/* End of file ion_auth.php */
/* Location: ./application/config/ion_auth.php */

","First thanks for Mike for his help out.
I managed to make it, and I feel a bit stupid.
The problem was with identity. I was checking the identity with name, instead of email.
Now it works like a charm.
And thanks Again Mike
","11535","<codeigniter><authentication><salt>","4","1","2","2017-01-13 18:19:51","11140868","2","2","4311","","2012-11-12 03:36:29","2012-06-21 14:34:31",""
"32030933","Where are laravel password salts stored?","Laravel uses bcrypt to hash passwords. 
According to this article, at some point in the process, the Hash::make function creates and uses a 22-length random string as a salt to generate the password. 
For a single distinct password, Hash::make does return unique hashes, hinting that it does use some kind of salting somewhere in the process. 
But these salts are not stored in the users table, where I would expect them. How does laravel know the appropriate hash to use to verify the password? 
Laravel Hash Explained
","The article that you linked seems to contain the answer.
https://mnshankar.wordpress.com/2014/03/29/laravel-hash-make-explained/

The cleverness of this is that the algorithm, salt and cost are
  embedded into the hash and so can be easily parsed out into 
  individual components for reconstruction/verification (Please see
  relevant sections of the php crypt source code at
  https://github.com/php/php-src/blob/master/ext/standard/crypt.c#L258).
  Because of this, you don’t need to store the salt/cost separately in a
  database table.

","11527","<php><laravel><hash><passwords><salt>","13","16","1","2015-08-16 02:17:08","32031241","0","2","1270996","","2015-08-16 01:28:59","2015-08-16 01:12:17",""
"5565040","Salt and hashing, why not use username?","I must confess to being largely ignorant on most of the high-tech security issues relevant for web applications, but there is one thing I at least thought I could ask because it is a direct question with (hopefully) a concrete answer.
Take this website: http://www.15seconds.com/issue/000217.htm
It shows a bit down that they store the salt value in the table, I understand the principles and the math behind using a salt, but I'm wondering this:

Why did they not just use the username as a salt value instead of generating one?

","Because user names have lower entropy than a random salt, so they spread your hashes around less than a proper salt does.
Not that the example on that page is very spectacular anyway.  I always just generate a GUID and use that.
I suspect it's all down in the noise as far as real-life security is concern, and even quite small amounts of per-user salt make a big difference to security, with very small improvements as the salt gets more complex.
","11468","<hash><passwords><username><salt>","35","28","3","2017-10-19 09:11:44","5565071","0","4","","","","2011-04-06 10:42:54",""
"5565040","Salt and hashing, why not use username?","I must confess to being largely ignorant on most of the high-tech security issues relevant for web applications, but there is one thing I at least thought I could ask because it is a direct question with (hopefully) a concrete answer.
Take this website: http://www.15seconds.com/issue/000217.htm
It shows a bit down that they store the salt value in the table, I understand the principles and the math behind using a salt, but I'm wondering this:

Why did they not just use the username as a salt value instead of generating one?

","The point of the salt is to be unique. The salt is meant to prevent attack cost sharing, i.e. an attacker trying to attack two hashed passwords for less than the twice the cost of attacking one.
One solution to ensure uniqueness is to generate a random salt in a wide enough space. Therefore, getting twice the same salt for two distinct password instances is sufficiently improbable that it will not happen in practice.
The user name is not adequately unique:

The user name does not change when the user changes his password. An attacker seeing the old hashed password and the new hashed password may attack both at a cost less than twice the cost of attacking one.
At a given time, user names are unique system-wide, not world-wide. There are many ""bob""s out there (in a Unix system, consider ""root""). Using the user name may allow an attacker to attack several systems simultaneously.

Salt entropy is not really important, except in so much as it ensures uniqueness in a random generation setting.
","11468","<hash><passwords><username><salt>","35","41","3","2017-10-19 09:11:44","5565071","0","4","","","","2011-04-06 10:42:54",""
"5565040","Salt and hashing, why not use username?","I must confess to being largely ignorant on most of the high-tech security issues relevant for web applications, but there is one thing I at least thought I could ask because it is a direct question with (hopefully) a concrete answer.
Take this website: http://www.15seconds.com/issue/000217.htm
It shows a bit down that they store the salt value in the table, I understand the principles and the math behind using a salt, but I'm wondering this:

Why did they not just use the username as a salt value instead of generating one?

","How about: 
Salt = CryptoHash( CryptoHash(SubmittedEmailOrUsername) . CryptoHash(SubmittedPasswd) ) ?

That would seemingly 

have the advantage of not needing to store the salt as it can be dynamically calculated, 
while still having good entropy (hash-based instead of plaintext), and 
provides a salt that's as long as a cryptographic hash eg 128-512 bits?

One problem would be if the system allowed two user to have the username and password (wouldnt happen with email addr though), but are there any other problems with this scheme?
","11468","<hash><passwords><username><salt>","35","1","3","2017-10-19 09:11:44","5565071","0","4","","","","2011-04-06 10:42:54",""
"4175707","Adding a salt to .htpasswd?","Is it possible to add a salt to passwords in .hpasswd files? I assume not since the server would need the salt for each user in order to verify the password and I can't think of how it would get them, but otherwise if the list was to be obtained it would be rather vulnerable. Is there a solution?
Many thanks for your help,
Ben
","By default htpasswd uses the standard crypt function and thus passwords are already salted - note in this example that both users have the same password yet the hashes are different:

simon@diablo:~$ htpasswd -b -c htpasswd simon abcd
Adding password for user simon
simon@diablo:~$ htpasswd -b htpasswd simon2 abcd
Adding password for user simon2
simon@diablo:~$ cat htpasswd 
simon:NWvm/LCCxQ64E
simon2:2I.LBzsRqULN6

(note: the -b flag is normally discouraged because other users can see your command line arguments and hence the password)
The first two characters of the hash are the salt; passwords are verified by calling crypt() again. Entering the wrong password produces a string that's unequal to the hashed password:
>>> from crypt import crypt
>>> crypt(""wrongpass"", ""NWvm/LCCxQ64E"")
'NWbxQgX1unvso'

whereas the correct password produces the expected hash:
>>> crypt(""abcd"", ""NWvm/LCCxQ64E"")
'NWvm/LCCxQ64E'

htpasswd -m uses a different algorithm that's MD5-based and uses a longer salt:

simon@diablo:~$ htpasswd -m -b -c htpasswd simon abcd
Adding password for user simon
simon@diablo:~$ cat htpasswd
simon:$apr1$mfvnBVmG$iIHIHOaH9vcImG5G.8eVa/

Here, the salt is the 8 characters between the second and third $.
htpasswd -s stores a SHA-1 digest with no salt; this appears to be for compatibility with Netscape/LDIF:

simon@diablo:~$ htpasswd -s -b -c htpasswd simon abcd
Adding password for user simon
simon@diablo:~$ htpasswd -s -b htpasswd simon2 abcd
Adding password for user simon2
simon@diablo:~$ cat htpasswd 
simon:{SHA}gf6L/odXbD7LIkJvjleEc4KRes8=
simon2:{SHA}gf6L/odXbD7LIkJvjleEc4KRes8=

These can easily be reversed - convert into a hex digest:
>>> """".join(""%02x"" % ord(c)
...      for c in ""gf6L/odXbD7LIkJvjleEc4KRes8="".decode(""base64""))
'81fe8bfe87576c3ecb22426f8e57847382917acf'

then use an online hash database.
","10782","<encryption><hash><salt><.htpasswd>","3","8","2","2014-07-27 15:02:41","4175789","2","","","","","2010-11-14 01:36:10",""
"4175707","Adding a salt to .htpasswd?","Is it possible to add a salt to passwords in .hpasswd files? I assume not since the server would need the salt for each user in order to verify the password and I can't think of how it would get them, but otherwise if the list was to be obtained it would be rather vulnerable. Is there a solution?
Many thanks for your help,
Ben
","The htpasswd utility already does use salts in most cases:
The crypt() and MD5 formats permute the representation by prepending a random salt string, to make dictionary attacks against the passwords more difficult.
And that's (sort of) the purpose of salts in password files. While salts have to be included in the server's .htpasswd file for the server to be able to check passwords, it is the numerous different possibilities of what a salt could be that defends against such attack techniques as rainbow tables.
However, if your users pick weak or common passwords, password cracking is a problem anyways, since the attacker (presumed to have access to the password file) will try those first, very quickly in fact (not limited by the speed of the server and Internet connection), by guessing in the normal way. The best advice I can give is that users should always pick strong passwords.
","10782","<encryption><hash><salt><.htpasswd>","3","2","2","2014-07-27 15:02:41","4175789","2","","","","","2010-11-14 01:36:10",""
"11667480","Why PBE generates same key with different salt and iteration count?","I am trying to test PBE encryption/decryption. I found that PBE generates same key with different salt and iteration count. Of course, the password used is same.
As what I understand, same password and different salt/iteration should get different keys.
Below is my test code:
import java.security.Key;
import java.security.SecureRandom;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;

public class PBETest
{
    public static void main(String[] args)
        throws Exception
    {
        String algo = ""PBEWithSHA1andDESede"";
        System.out.println(""====== "" + algo + "" ======"");

        char[] password = ""password"".toCharArray();
        SecureRandom rand = new SecureRandom();
        byte[] salt = new byte[32];
        rand.nextBytes(salt);
        int iterationCount = rand.nextInt(2048);

        //encryption key
        PBEKeySpec          encPBESpec = new PBEKeySpec(password, salt, iterationCount);
        SecretKeyFactory    encKeyFact = SecretKeyFactory.getInstance(algo);
        Key encKey = encKeyFact.generateSecret(encPBESpec);
        System.out.println(""encryptioin iteration: "" + iterationCount);

        //decryption key
        rand.nextBytes(salt);
        iterationCount = rand.nextInt(2048);
        PBEKeySpec          decPBESpec = new PBEKeySpec(password, salt, iterationCount);
        SecretKeyFactory    decKeyFact = SecretKeyFactory.getInstance(algo);
        Key decKey = decKeyFact.generateSecret(decPBESpec);
        System.out.println(""decryptioin iteration: "" + iterationCount);

        System.out.println(""encryption key is same as decryption key? "" + encKey.equals(decKey));

    }

}

I am expecting the final output is a false.
Did I do anything wrong?
","You got spectacularly lucky, and your random salts and iteration counts just happened to match. Go directly to Las Vegas. Now. ;)
I googled for PBEWithSHA1andDESede and tracked down this example: http://cryptofreek.org/2010/06/04/encrypting-and-decrypting-files-with-java wherein he specifies the key alone with new PBEKeySpec(password)  and creates a separate PBEParameterSpec using the salt and iteration count which is then passed to Cipher.init().
So, no, you did nothing wrong, you just stopped before the salt and count got stuffed into the cipher.
","10778","<passwords><key><iteration><salt>","7","4","2","2016-03-05 21:04:45","11684345","0","2","31493","","2012-09-21 17:18:31","2012-07-26 10:36:10",""
"11667480","Why PBE generates same key with different salt and iteration count?","I am trying to test PBE encryption/decryption. I found that PBE generates same key with different salt and iteration count. Of course, the password used is same.
As what I understand, same password and different salt/iteration should get different keys.
Below is my test code:
import java.security.Key;
import java.security.SecureRandom;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;

public class PBETest
{
    public static void main(String[] args)
        throws Exception
    {
        String algo = ""PBEWithSHA1andDESede"";
        System.out.println(""====== "" + algo + "" ======"");

        char[] password = ""password"".toCharArray();
        SecureRandom rand = new SecureRandom();
        byte[] salt = new byte[32];
        rand.nextBytes(salt);
        int iterationCount = rand.nextInt(2048);

        //encryption key
        PBEKeySpec          encPBESpec = new PBEKeySpec(password, salt, iterationCount);
        SecretKeyFactory    encKeyFact = SecretKeyFactory.getInstance(algo);
        Key encKey = encKeyFact.generateSecret(encPBESpec);
        System.out.println(""encryptioin iteration: "" + iterationCount);

        //decryption key
        rand.nextBytes(salt);
        iterationCount = rand.nextInt(2048);
        PBEKeySpec          decPBESpec = new PBEKeySpec(password, salt, iterationCount);
        SecretKeyFactory    decKeyFact = SecretKeyFactory.getInstance(algo);
        Key decKey = decKeyFact.generateSecret(decPBESpec);
        System.out.println(""decryptioin iteration: "" + iterationCount);

        System.out.println(""encryption key is same as decryption key? "" + encKey.equals(decKey));

    }

}

I am expecting the final output is a false.
Did I do anything wrong?
","If you use PBKDF2WithHmacSHA1 instead of PBEWithSHA1andDESede your assumption works as it supports salt. You just need to add a the keyLength parameter to PBEKeySpec:
        String algo = ""PBKDF2WithHmacSHA1"";

...
        PBEKeySpec decPBESpec = new PBEKeySpec( password, salt, iterationCount, 128 );

I have run a test and the result is: false.
However, note that for encryption and decryption to work properly you need to use the same salt and iteration count when generating the key.
","10778","<passwords><key><iteration><salt>","7","3","2","2016-03-05 21:04:45","11684345","0","2","31493","","2012-09-21 17:18:31","2012-07-26 10:36:10",""
"1067882","SHA salt in MySQL query","I am setting a cookie. Something like:
$_COOKIE['test'] = SHA1('124'.'mysalt');

Now 124 is my id which I want. So in my MySQL table, I am trying to run a query like:
$sql = (""SELECT * FROM users WHERE SHA1(`id`) = '"".mysql_real_escape_string($_COOKIE['test']).""'"");

How to add the ""mysalt"" to the SQL query? Because else I want get the correct id.
","Use can use Concat() for that.
SELECT ... Sha1( Concat(`id`, 'mysalt') )=...

","10710","<mysql><sha1><salt>","0","4","4","2011-03-08 20:38:00","1067888","0","1","63550","","2011-03-08 20:38:00","2009-07-01 08:09:09",""
"1067882","SHA salt in MySQL query","I am setting a cookie. Something like:
$_COOKIE['test'] = SHA1('124'.'mysalt');

Now 124 is my id which I want. So in my MySQL table, I am trying to run a query like:
$sql = (""SELECT * FROM users WHERE SHA1(`id`) = '"".mysql_real_escape_string($_COOKIE['test']).""'"");

How to add the ""mysalt"" to the SQL query? Because else I want get the correct id.
","The query should be:
$sql = (""SELECT * FROM users WHERE SHA1(CONCAT(`id`,`mysalt`)) = '"".mysql_real_escape_string($_COOKIE['test']).""'"");

if I understand correctly what you're trying to do.
","10710","<mysql><sha1><salt>","0","1","4","2011-03-08 20:38:00","1067888","0","1","63550","","2011-03-08 20:38:00","2009-07-01 08:09:09",""
"1067882","SHA salt in MySQL query","I am setting a cookie. Something like:
$_COOKIE['test'] = SHA1('124'.'mysalt');

Now 124 is my id which I want. So in my MySQL table, I am trying to run a query like:
$sql = (""SELECT * FROM users WHERE SHA1(`id`) = '"".mysql_real_escape_string($_COOKIE['test']).""'"");

How to add the ""mysalt"" to the SQL query? Because else I want get the correct id.
","Use CONCAT:
$sql = (""SELECT * FROM users WHERE SHA1(CONCAT(`id`,'mysalt')) = '"".mysql_real_escape_string($_COOKIE[''test'']).""'"");

","10710","<mysql><sha1><salt>","0","0","4","2011-03-08 20:38:00","1067888","0","1","63550","","2011-03-08 20:38:00","2009-07-01 08:09:09",""
"1067882","SHA salt in MySQL query","I am setting a cookie. Something like:
$_COOKIE['test'] = SHA1('124'.'mysalt');

Now 124 is my id which I want. So in my MySQL table, I am trying to run a query like:
$sql = (""SELECT * FROM users WHERE SHA1(`id`) = '"".mysql_real_escape_string($_COOKIE['test']).""'"");

How to add the ""mysalt"" to the SQL query? Because else I want get the correct id.
","The solutions already provided probably will work just fine, however are you certain you want to do this? If the field ""id"" is really a distinct identification you can use ""LIMIT 1"" to stop mysql from searching thru all your items. Another thing is, why don't you use a separate precomputed field for this? I mean in every query mysql unnecessarily needs to compute all these sha1 values.. One last thing. I'm uncertain why you are using your approach, but my best guess is to implement some sort of session key. I thing this is a bad idea for a couple of reasons: If someone gets holds on your salt, he has access to all your accounts. If someone sniffs one ""session"" he can reuse it whenever he wants to. Choosing a weak salt could have serious consequences. HTH.
","10710","<mysql><sha1><salt>","0","1","4","2011-03-08 20:38:00","1067888","0","1","63550","","2011-03-08 20:38:00","2009-07-01 08:09:09",""
"2188507","How do I implement salt into my login for passwords?","I want to implement a salt into my login system but am a bit confused on how this is supposed to work. I can't understand the logic behind it. I understand md5 is a one-way algorithm and all of the functions that I have come across seem to hash everything together. If this is the case, how does one get the password back out for comparison? My biggest question is, how is salting a users' password safer than just hashing the password? If a database was ever to be compromised, the hash along with the salt is in the database. Isn't this all that a hacker would need?
I also found another post here on SO where another developer said :

""Ensure your salt and algorithm are
  stored separately from the database""

I would like to store the salt in the database. Is this really a problem if I do?
I'm looking for some help on understanding how this works and also what the best practice might be. Any help is greatly appreciated.

EDIT:
I want to thank everyone for their responses and ideas. Even though I may be more confused now, it has certainly been a learning experience for me. Thanks again guys.
","You don't get the password out for comparison.  You encrypt the password when they attempt a login and compare the stored value with the newly encrypted value.
","10524","<security><hash><password-protection><salt>","55","5","8","2015-05-08 20:04:52","2188556","3","22","1558269","","2015-05-08 20:04:52","2010-02-02 23:16:53",""
"2188507","How do I implement salt into my login for passwords?","I want to implement a salt into my login system but am a bit confused on how this is supposed to work. I can't understand the logic behind it. I understand md5 is a one-way algorithm and all of the functions that I have come across seem to hash everything together. If this is the case, how does one get the password back out for comparison? My biggest question is, how is salting a users' password safer than just hashing the password? If a database was ever to be compromised, the hash along with the salt is in the database. Isn't this all that a hacker would need?
I also found another post here on SO where another developer said :

""Ensure your salt and algorithm are
  stored separately from the database""

I would like to store the salt in the database. Is this really a problem if I do?
I'm looking for some help on understanding how this works and also what the best practice might be. Any help is greatly appreciated.

EDIT:
I want to thank everyone for their responses and ideas. Even though I may be more confused now, it has certainly been a learning experience for me. Thanks again guys.
","Forget about using salts (partly for the reason you mention), use bcrypt instead:
For a good explanation see: http://codahale.com/how-to-safely-store-a-password/
","10524","<security><hash><password-protection><salt>","55","15","8","2015-05-08 20:04:52","2188556","3","22","1558269","","2015-05-08 20:04:52","2010-02-02 23:16:53",""
"2188507","How do I implement salt into my login for passwords?","I want to implement a salt into my login system but am a bit confused on how this is supposed to work. I can't understand the logic behind it. I understand md5 is a one-way algorithm and all of the functions that I have come across seem to hash everything together. If this is the case, how does one get the password back out for comparison? My biggest question is, how is salting a users' password safer than just hashing the password? If a database was ever to be compromised, the hash along with the salt is in the database. Isn't this all that a hacker would need?
I also found another post here on SO where another developer said :

""Ensure your salt and algorithm are
  stored separately from the database""

I would like to store the salt in the database. Is this really a problem if I do?
I'm looking for some help on understanding how this works and also what the best practice might be. Any help is greatly appreciated.

EDIT:
I want to thank everyone for their responses and ideas. Even though I may be more confused now, it has certainly been a learning experience for me. Thanks again guys.
","An hash function always return the same value for the same input string. Let's say my user (Alice) has the password secret. Hashing secret using md5() leads to the following hash
5ebe2294ecd0e0f08eab7690d2a6ee69

Using a dictionary (a list of common words and password) or one of the various sites that offer you that service, the attacker (Mallory) can easily find out the password is secret when he sees in his dictionary that 5ebe2294ecd0e0f08eab7690d2a6ee69 = secret.
The process of salting before hashing makes it harder to use a dictionary attack without knowing your salt. Consider the following:
<?php
$salt = '@!#%$@#$@SADLkwod,sdaDwqksjaoidjwq@#@!';
$hash = md5($salt . 'secret');

The resulting hash is now b58ad809eece17322de5024d79299f8a but Alice's password is still secret. Now if Mallory gets her hands on the salted hash, chances are she will not find the answer in her dictionary. If she does, the dictionary will give her the wrong answer.
Never store a static salt in your database. Preferably store it with your application's configuration (which by the way should not be available from the web).
If you are going to use a dynamic salt, you are going to need to use the database. Use a non-null column of existing valid data to build your salt on (blowfish-encrypted string of username based on a secret encryption key is usually cryptographically secure). Do not use a separate column for the salt. If you cannot use an existing column, incorporate your salt in the same column than your hash. For example, use the first 32 characters for your 128-bits salt and then the last 40 for your 160-bits hash. The following function will generate such an hash:
function seeded_sha1($string, $seed_bits) {
    if(($seed_bits % 8) != 0) {
        throw new Exception('bits must be divisible by 8');
    }

    $salt = '';
    for($i = 0; $i < $seed_bits; $i+=8) {
        $salt .= pack('c', mt_rand());
    }

    $hexsalt = unpack('h*hex', $salt);

    return $hexsalt['hex'] . sha1($salt . $string);
}

function compare_seeded_sha1($plain, $hash) {
    $sha1 = substr($hash, -40);
    $salt = pack('h*', substr($hash, 0, -40));

    $plain_hash = sha1($salt . $plain);
    return ($plain_hash == $sha1);
}

If an attacker gets in your database using SQL injection, at least the hashes he/she retrieves won't be useful since he/she won't have access to your application configuration. If your server gets rooted, it's pretty much game-over no matter what you do.
Note: There are other types of attack possible on md5() which is why you use more secure hashing algorithm, sha1() for example. Or, even better, use the Portable PHP password hashing framework, which has been designed with security in mind and is backwards compatible with pretty much any PHP version.
require('PasswordHash.php');

$pwdHasher = new PasswordHash(8, FALSE);

// $hash is what you would store in your database
$hash = $pwdHasher->HashPassword( $password );

// $hash would be the $hashed stored in your database for this user
$checked = $pwdHasher->CheckPassword($password, $hash);
if ($checked) {
    echo 'password correct';
} else {
    echo 'wrong credentials';
}

","10524","<security><hash><password-protection><salt>","55","19","8","2015-05-08 20:04:52","2188556","3","22","1558269","","2015-05-08 20:04:52","2010-02-02 23:16:53",""
"2188507","How do I implement salt into my login for passwords?","I want to implement a salt into my login system but am a bit confused on how this is supposed to work. I can't understand the logic behind it. I understand md5 is a one-way algorithm and all of the functions that I have come across seem to hash everything together. If this is the case, how does one get the password back out for comparison? My biggest question is, how is salting a users' password safer than just hashing the password? If a database was ever to be compromised, the hash along with the salt is in the database. Isn't this all that a hacker would need?
I also found another post here on SO where another developer said :

""Ensure your salt and algorithm are
  stored separately from the database""

I would like to store the salt in the database. Is this really a problem if I do?
I'm looking for some help on understanding how this works and also what the best practice might be. Any help is greatly appreciated.

EDIT:
I want to thank everyone for their responses and ideas. Even though I may be more confused now, it has certainly been a learning experience for me. Thanks again guys.
","Salting a user's password is possibly safer than just hashing the password because it can protect against precomputation attacks.
For instance, if a hacker gets access to your database, and the passwords are not salted, then he can look up the hashes in his database of hashes (see http://en.wikipedia.org/wiki/Rainbow_table) to get the original passwords.
","10524","<security><hash><password-protection><salt>","55","1","8","2015-05-08 20:04:52","2188556","3","22","1558269","","2015-05-08 20:04:52","2010-02-02 23:16:53",""
"2188507","How do I implement salt into my login for passwords?","I want to implement a salt into my login system but am a bit confused on how this is supposed to work. I can't understand the logic behind it. I understand md5 is a one-way algorithm and all of the functions that I have come across seem to hash everything together. If this is the case, how does one get the password back out for comparison? My biggest question is, how is salting a users' password safer than just hashing the password? If a database was ever to be compromised, the hash along with the salt is in the database. Isn't this all that a hacker would need?
I also found another post here on SO where another developer said :

""Ensure your salt and algorithm are
  stored separately from the database""

I would like to store the salt in the database. Is this really a problem if I do?
I'm looking for some help on understanding how this works and also what the best practice might be. Any help is greatly appreciated.

EDIT:
I want to thank everyone for their responses and ideas. Even though I may be more confused now, it has certainly been a learning experience for me. Thanks again guys.
","As you mentioned, hashing algorithms work only one-way (or only if they are strong enough :-D)
For your question about salting I would recommend to hash a password with a static salt string and some dynamic data from database, which should not change after once created
This is a very secure way of storing passwords, as even if database is compromised, hackers/crackers still need to get your static string hash and need to guess how you applied all the salting..
For example let's say you have a users table with these columns:
id
username
password
created_at

columns id and created_at after once filled should never be changed..
so when you are hashing user's password you can do as simple as:
<?php
    $staticSalt = '!241@kadl;ap][';
    $userPass = 'my new pass';
    // assuming $user variable is already populated with DB data
    // we will generate new hash from columns and static salt:
    $genPass = sha1($user['id'] . $userPass . $user['created_at'] . $staticSalt);
?>

I hope this one helps :) cheers
","10524","<security><hash><password-protection><salt>","55","2","8","2015-05-08 20:04:52","2188556","3","22","1558269","","2015-05-08 20:04:52","2010-02-02 23:16:53",""
"2188507","How do I implement salt into my login for passwords?","I want to implement a salt into my login system but am a bit confused on how this is supposed to work. I can't understand the logic behind it. I understand md5 is a one-way algorithm and all of the functions that I have come across seem to hash everything together. If this is the case, how does one get the password back out for comparison? My biggest question is, how is salting a users' password safer than just hashing the password? If a database was ever to be compromised, the hash along with the salt is in the database. Isn't this all that a hacker would need?
I also found another post here on SO where another developer said :

""Ensure your salt and algorithm are
  stored separately from the database""

I would like to store the salt in the database. Is this really a problem if I do?
I'm looking for some help on understanding how this works and also what the best practice might be. Any help is greatly appreciated.

EDIT:
I want to thank everyone for their responses and ideas. Even though I may be more confused now, it has certainly been a learning experience for me. Thanks again guys.
","The point of a salt is to prevent attackers from amortizing the cost of a brute force attack across sites (or better yet, when using a different salt for each user: all users of a site) through precomputed rainbow tables. 
With plain hashing, an attacker can compute such a table once (a very long, costly operation) and then use it to quickly find passwords for any site. When a site uses one fixed salt, the attacker has to compute a new table specifically for that site. When a site uses a different salt for each user, the attacker can stop bothering with rainbow tables - he'll have to brute-force each single password separately.
Storing the salts separately is not necessary to gain this advantage. In theory it would be even more secure because it would neutralize the weakness of dictionary or short passwords. In practice, it's not worth bothering with because at the end of the day, you need access to the salts somewhere to check passwords. Also, trying to separate them would lead to more complex systems - and the more complex a system is, the more opportunities for security holes there are.
Edit: My concrete recommendations:

Generate long pseudorandom salt for each user and store in in the DB
Use a bcrypt-based hash
ideally, don't implement it yourself, use an existing library instead

","10524","<security><hash><password-protection><salt>","55","31","8","2015-05-08 20:04:52","2188556","3","22","1558269","","2015-05-08 20:04:52","2010-02-02 23:16:53",""
"2188507","How do I implement salt into my login for passwords?","I want to implement a salt into my login system but am a bit confused on how this is supposed to work. I can't understand the logic behind it. I understand md5 is a one-way algorithm and all of the functions that I have come across seem to hash everything together. If this is the case, how does one get the password back out for comparison? My biggest question is, how is salting a users' password safer than just hashing the password? If a database was ever to be compromised, the hash along with the salt is in the database. Isn't this all that a hacker would need?
I also found another post here on SO where another developer said :

""Ensure your salt and algorithm are
  stored separately from the database""

I would like to store the salt in the database. Is this really a problem if I do?
I'm looking for some help on understanding how this works and also what the best practice might be. Any help is greatly appreciated.

EDIT:
I want to thank everyone for their responses and ideas. Even though I may be more confused now, it has certainly been a learning experience for me. Thanks again guys.
","The other answers are good, so I'll just throw in a minor point that nobody else has mentioned.  You don't want to use the same salt for every password because then if two people have the same password, they'll have the same hash.  That's exposing information that an attacker can exploit.
You could use the same salt for every user along with Juraj's good idea to combine the password with other non-changing database fields (unique to a user).  But watch out because this information gets tied to the password.  If you were to hash the username + password together to guarantee a unique hash, you wouldn't be able to change the username without creating a new user and requiring them to set a new password.
As an example of having a unique salt per user and storing it alongside the password hash, I'll point out /etc/shadow on your typical Linux system.
root@linux:/root# cat /etc/shadow | grep root
root:$1$oL5TTZxL$RhfGUZSbFwQN6jnX5D.Ck/:12139:0:99999:7:::

Here, the oL5TTZxL is the salt and RhfGUZSbFwQN6jnX5D.Ck/ is the hash.  The plain-text password is root in this case, and the hash algorithm my system uses is the MD5-based BSD password algorithm.  (newer systems than mine have better hash algorithms)
","10524","<security><hash><password-protection><salt>","55","7","8","2015-05-08 20:04:52","2188556","3","22","1558269","","2015-05-08 20:04:52","2010-02-02 23:16:53",""
"2188507","How do I implement salt into my login for passwords?","I want to implement a salt into my login system but am a bit confused on how this is supposed to work. I can't understand the logic behind it. I understand md5 is a one-way algorithm and all of the functions that I have come across seem to hash everything together. If this is the case, how does one get the password back out for comparison? My biggest question is, how is salting a users' password safer than just hashing the password? If a database was ever to be compromised, the hash along with the salt is in the database. Isn't this all that a hacker would need?
I also found another post here on SO where another developer said :

""Ensure your salt and algorithm are
  stored separately from the database""

I would like to store the salt in the database. Is this really a problem if I do?
I'm looking for some help on understanding how this works and also what the best practice might be. Any help is greatly appreciated.

EDIT:
I want to thank everyone for their responses and ideas. Even though I may be more confused now, it has certainly been a learning experience for me. Thanks again guys.
","Hashing passwords is meant to keep those passwords secret from your own administrator(s).  
1) Keeping plain text passwords in your database would be fine except your passwords may be used by the administrator to gain access to some other system.  
2) You can use a single global salt, which is combined with the passwords (by prepending or XORing them) and then hashing for storage in the database.  But that is vulnerable to a malicious administrator AND a rainbow table designed for that one salt.
3) You can have a separate salt for each user:  The database will be used to store the salt, and the hash derived from the password/salt combination.  This will prevent a rainbow attack, but brute force attacks will still be possible.
4) Finally, you can keep your hash function a secret by using a velocity-limited hardware hashing solution.
That is as good as you can do.  Because of human nature, passwords have a limited domain and are vulnerable to brute force attacks.  We are trying to prevent administrators getting a hold of user passwords, and then using them on other systems they should not have access to.
Some other notes:
a) You can use bcrypt on the password/salt combination to slow down the attacker’s brute force attack.  But since we are assuming administrators, they can be patient.
b) Keeping the salt separate from the password hash is not an effective defense, we are assuming administrators after all.  
c) Using existing data as a salt is a little better, but I doubt existing data has as much entropy a random salt has.    
","10524","<security><hash><password-protection><salt>","55","2","8","2015-05-08 20:04:52","2188556","3","22","1558269","","2015-05-08 20:04:52","2010-02-02 23:16:53",""
"7305500","How to build a secure captcha using jQuery UI Slider?","I'd like to build a fancy and easy to use captcha for my registration by using a slider on which the user can proof he is a human and no script.
So far I implemented the slider with jQuery UI Slider, if the value is 100 the submit-button will be appear. Looks good and I'm satified with the behaviour.
BUT since JS is executed by the client everyone is able to see my code and can trigger the same actions by using a script. For scripts there is no difference if the button is available or not. Scripts only post data to submit forms and my slider-captcha is useless.
My simple JS-code:
$(function() {
        $( ""#slider"" ).slider({
            value:0,
            min: 0,
            max: 100,
            step: 50,
            slide: function( event, ui ) {
                if(ui.value == 100){
                    $( ""#amount"" ).val( ""human"" );
                    $(""#regButton"").slideDown();
                } else if (ui.value == 50) {
                    $( ""#amount"" ).val( ""nerd"" );
                    $(""#regButton"").slideUp();
                } else {
                    $( ""#amount"" ).val( ""script"" );
                    $(""#regButton"").slideUp();
                }
            }
        });
        $(""#regButton"").hide();
        $( ""#amount"" ).val( ""Script"" );
    });

HTML:
<label for=""amount"" style=""text-align:right;"">I'm a:</label>
        <input type=""text"" id=""amount"" style=""border:0; color:#f6931f; font-weight:bold; width: 197px;"" />
        <div id=""slider""></div>

Are there possibilities to build the captcha saver? Using serverside hashes? Setting flags? what are practises to archive security with a fancy UI and a little more user experince than entering letters.
I'm using Java EE with Spring MVC on the serverside. Whould be nice to use a slider instead of reCaptcha eg.

EDIT: I added a hash value to the slider logic. At the begin the server rendering a hidden-field with the date on which the registration started, the server build a md5-hash based on this date. Was the slider moved a function is called which reads the value of the hiddenfield and build an md5-hash, too. The hashvalue will be send to the server and before submitting the registration compared against the servervalue of the hash. Not as save as text-captchas but even more effective than doing nothing at all.
I found this: https://code.google.com/p/slidelock/
What do you thing? How do this guy build a ""safe"" slider? How he manage the serverside validation and the SALT? Is it safe or also only more expensive for scripter to crack it?
","Why don't you use an existing captcha component instead of writing own?
There are plenty of them out there. I would recommend http://www.google.com/recaptcha, which is free and helps with books digitalization.
","10467","<jquery><jquery-ui><captcha><salt>","2","1","2","2014-03-26 08:37:08","","2","","799216","","2014-03-26 08:37:08","2011-09-05 08:21:24",""
"7305500","How to build a secure captcha using jQuery UI Slider?","I'd like to build a fancy and easy to use captcha for my registration by using a slider on which the user can proof he is a human and no script.
So far I implemented the slider with jQuery UI Slider, if the value is 100 the submit-button will be appear. Looks good and I'm satified with the behaviour.
BUT since JS is executed by the client everyone is able to see my code and can trigger the same actions by using a script. For scripts there is no difference if the button is available or not. Scripts only post data to submit forms and my slider-captcha is useless.
My simple JS-code:
$(function() {
        $( ""#slider"" ).slider({
            value:0,
            min: 0,
            max: 100,
            step: 50,
            slide: function( event, ui ) {
                if(ui.value == 100){
                    $( ""#amount"" ).val( ""human"" );
                    $(""#regButton"").slideDown();
                } else if (ui.value == 50) {
                    $( ""#amount"" ).val( ""nerd"" );
                    $(""#regButton"").slideUp();
                } else {
                    $( ""#amount"" ).val( ""script"" );
                    $(""#regButton"").slideUp();
                }
            }
        });
        $(""#regButton"").hide();
        $( ""#amount"" ).val( ""Script"" );
    });

HTML:
<label for=""amount"" style=""text-align:right;"">I'm a:</label>
        <input type=""text"" id=""amount"" style=""border:0; color:#f6931f; font-weight:bold; width: 197px;"" />
        <div id=""slider""></div>

Are there possibilities to build the captcha saver? Using serverside hashes? Setting flags? what are practises to archive security with a fancy UI and a little more user experince than entering letters.
I'm using Java EE with Spring MVC on the serverside. Whould be nice to use a slider instead of reCaptcha eg.

EDIT: I added a hash value to the slider logic. At the begin the server rendering a hidden-field with the date on which the registration started, the server build a md5-hash based on this date. Was the slider moved a function is called which reads the value of the hiddenfield and build an md5-hash, too. The hashvalue will be send to the server and before submitting the registration compared against the servervalue of the hash. Not as save as text-captchas but even more effective than doing nothing at all.
I found this: https://code.google.com/p/slidelock/
What do you thing? How do this guy build a ""safe"" slider? How he manage the serverside validation and the SALT? Is it safe or also only more expensive for scripter to crack it?
","Jumped to conclusions and posted what I shouldn't, sorry.
I completely understand your desire to have it custom built, especially when it is so easy to do. But I don't see anything inherently wrong with using a slider captcha so long as it is not the only means of securing a form/application. I think it can easily be augmented to have unique identifiers, and I think it's far superior in ease of use. I plan to use it in my future applications after I test it and research more.
","10467","<jquery><jquery-ui><captcha><salt>","2","0","2","2014-03-26 08:37:08","","2","","799216","","2014-03-26 08:37:08","2011-09-05 08:21:24",""
"8461740","convert plain-text password to MD5 salted hash","For example under FreeBSD passwords are stored in /etc/master.passwd like this:
$1$7wtGfwgp$772bEQInetnJKUNtLM0Xt/

The password I used was ""Test11"". As I understand, $1$ means that it's a hashed MD5 crypt? How can one come up with the final hash ""772bEQInetnJKUNtLM0Xt/"" if he is aware of salt and password and uses md5sum? As I understand, it should be something like:
$ echo -n $(echo -n 7wtGfwgp)$(echo -n Test11) | md5sum

..but this doesn't quite match up. What am I doing wrong?
PS I'm asking this in order to understand the password hashing system under UNIX-like operating systems.
","I'm on Linux and I am not sure whether FreeBSD actually uses the same algorithm, but you can take a look at these sources of information (hope the same is on FreeBSD):

man 3 crypt
https://unix.stackexchange.com/questions/21897/grub-md5-crypt-algorithm
http://s23.org/wiki/Crypt

Based on the last page, this PHP script will produce the output you expect (given your password and salt):
<?php
$password = 'Test11';
$salt = '$1$7wtGfwgp$';
echo 'Crypt hash: ' . crypt($password, $salt) . ""\n""
?>

You can do the same using e.g. Python:
import crypt

password = 'Test11'
salt = '$1$7wtGfwgp$'
print(crypt.crypt(password, salt))

based on this Python doc page:

http://docs.python.org/library/crypt.html

Based on the Wikipedia article:

http://en.wikipedia.org/wiki/Crypt_(Unix)

you can see the source of crypt function e.g. here:

http://google.com/codesearch/p#ZWtxA-fyzBo/UnixArchive/PDP-11/Distributions/research/Henry_Spencer_v7/v7.tar.gz%7C118goTAkg2o/usr/src/libc/gen/crypt.c

As a side note, here's a nice online hash generator:

http://insidepro.com/hashes.php?lang=eng

Hope this helps.
","10128","<salt><md5sum>","2","3","2","2014-01-16 20:46:45","8461884","2","","","","","2011-12-11 03:21:46",""
"8461740","convert plain-text password to MD5 salted hash","For example under FreeBSD passwords are stored in /etc/master.passwd like this:
$1$7wtGfwgp$772bEQInetnJKUNtLM0Xt/

The password I used was ""Test11"". As I understand, $1$ means that it's a hashed MD5 crypt? How can one come up with the final hash ""772bEQInetnJKUNtLM0Xt/"" if he is aware of salt and password and uses md5sum? As I understand, it should be something like:
$ echo -n $(echo -n 7wtGfwgp)$(echo -n Test11) | md5sum

..but this doesn't quite match up. What am I doing wrong?
PS I'm asking this in order to understand the password hashing system under UNIX-like operating systems.
","Hashing and crypting is something different, even if hashing is a part of crypting ;)
So if you want to crypt it, do it like icyrock posted. md5sum (gmd5sum in freebsd coreutils) does only create a hash sum (RFC 1321) about some input. It's not using this hash to crypt in a further step as (several) crypt codes does.
That's why your code gives you something completely different as result.
","10128","<salt><md5sum>","2","0","2","2014-01-16 20:46:45","8461884","2","","","","","2011-12-11 03:21:46",""
"878837","Salting a C# MD5 ComputeHash on a stream","I can't see any way to salt a MD5.ComputeHash(Stream).
Am I missing some way of injecting bytes into the HashAlgorithm?
I tried performing a ComputeHash(byte[]) before performing the stream compute, but, unsurprisingly, it had no effect.  Any ideas (apart from modifying the file)?
Thanks for your time.
addendum
Just to be a little more specific, I want to use a stream to get a hash on a large file that I don't want to load into memory.
FileInfo myFI= new FileInfo(""bigfile.dat"");
FileStream myIFS = piFile.OpenRead();
MD5 md5 = MD5.Create();
byte[] hash = md5.ComputeHash ( myIFS );
myIFS.Close ();

","I think you can use a syntax like:
byte[] saltedBytes;
//TODO: fill the saltedBytes;
var hasher=new MD5CryptoServiceProvider();
var memoryStream=new MemoryStream(saltedBytes);
hasher.ComputeHash(memoryStream);
memoryStream.Close;

","10112","<c#><hash><stream><md5><salt>","3","1","5","2015-01-16 13:03:43","","2","3","75066","","2009-05-18 19:15:29","2009-05-18 17:23:11",""
"878837","Salting a C# MD5 ComputeHash on a stream","I can't see any way to salt a MD5.ComputeHash(Stream).
Am I missing some way of injecting bytes into the HashAlgorithm?
I tried performing a ComputeHash(byte[]) before performing the stream compute, but, unsurprisingly, it had no effect.  Any ideas (apart from modifying the file)?
Thanks for your time.
addendum
Just to be a little more specific, I want to use a stream to get a hash on a large file that I don't want to load into memory.
FileInfo myFI= new FileInfo(""bigfile.dat"");
FileStream myIFS = piFile.OpenRead();
MD5 md5 = MD5.Create();
byte[] hash = md5.ComputeHash ( myIFS );
myIFS.Close ();

","The answer to the lack of examples is in my opinion: you don't really need to salt it.
The hash algorithm like MD5 takes a table of bytes of arbitrary length and converts it to a table of bytes of known length - the operation is not easily reversible and small changes to the input table cause unpredictable changes in the output table:
input => MD5 => output
The purpose of salting is protection against attacks where user has already precomputed table of hash results (rainbow tables). By introducing small changes in the input, the results are change drastically, so even if attacker knows the hash result and the salt, it is very difficult to guess the input:
input + salt => MD5 => output
The reason for hashing files is to compute a checksum. E.g. you publish a file on your web page along with the hash result. User then downloads a file, runs it through MD5 and compares the result with your published result. It would be very difficult to tamper with the file, because each manipulation would change the resulting hash.
Salting is not necessary here, because you would have to publish the salt with the resulting hash, so that the user can repeat the hashing operation.
If you really need to introduce salting, just change the input stream in the repeatable way, e.g. add one (with overflow) to each byte.
","10112","<c#><hash><stream><md5><salt>","3","6","5","2015-01-16 13:03:43","","2","3","75066","","2009-05-18 19:15:29","2009-05-18 17:23:11",""
"878837","Salting a C# MD5 ComputeHash on a stream","I can't see any way to salt a MD5.ComputeHash(Stream).
Am I missing some way of injecting bytes into the HashAlgorithm?
I tried performing a ComputeHash(byte[]) before performing the stream compute, but, unsurprisingly, it had no effect.  Any ideas (apart from modifying the file)?
Thanks for your time.
addendum
Just to be a little more specific, I want to use a stream to get a hash on a large file that I don't want to load into memory.
FileInfo myFI= new FileInfo(""bigfile.dat"");
FileStream myIFS = piFile.OpenRead();
MD5 md5 = MD5.Create();
byte[] hash = md5.ComputeHash ( myIFS );
myIFS.Close ();

","To avoid pull all the file into memory like Dabblernl's solution you'll want to use a FileStream as is discussed in this SO question Computing MD5SUM of large files in C#, but the MD5CryptoServiceProvider does not allow you to add extra data to the end.
Thus you need a merged stream like this:
public class MergedStream : Stream, IDisposable
{
    Stream s1;
    Stream s2;

    public MergedStream(Stream first, Stream second)
    {
        s1 = first;
        s2 = second;
    }

    public override int Read(byte[] buffer, int offset, int count)
    {
        int s1count = (int)Math.Min((long)count, s1.Length - s1.Position);
        int bytesRead = 0;

        if (s1count > 0)
        {
            bytesRead += s1.Read(buffer, offset, s1count);
        }

        if (s1count < count)
        {
            bytesRead += s2.Read(buffer, offset + s1count, count - s1count);
        }

        return bytesRead;
    }

    public override void Write(byte[] buffer, int offset, int count)
    {
        throw new NotImplementedException();
    }

    public override bool CanRead
    {
        get { return s1.CanRead && s2.CanRead; }
    }

    public override bool CanSeek
    {
        get { return s1.CanSeek && s2.CanSeek; }
    }

    public override bool CanWrite
    {
        get { return s1.CanWrite && s2.CanWrite; }
    }

    public override void Flush()
    {
        s1.Flush();
        s2.Flush();
    }

    public override long Length
    {
        get { return s1.Length + s2.Length; }
    }

    public override long Position
    {
        get
        {
            return s1.Position + s2.Position;
        }
        set
        {
            throw new NotImplementedException();
        }
    }

    public override long Seek(long offset, SeekOrigin origin)
    {
        throw new NotImplementedException();
    }

    public override void SetLength(long value)
    {
        throw new NotImplementedException();
    }

    void IDisposable.Dispose()
    {
        s1.Dispose();
        s2.Dispose();
    }
}

Which you can then use like this to salt you file hash
        FileStream fs = new FileStream(@""c:\text.txt"", FileMode.Open);
        var m = new MemoryStream(ToAnsiiBytes(""SALT""), false);
        var ms = new MergedStream(fs, m);

        var C = hasher.ComputeHash(ms);
        PrintHash(Console.Out, C);

with ToAnsiiBytes and PrintHash just being utility functions as such:
    static void HashAndPrint(TextWriter op, string text)
    {
        MD5 md5 = new MD5CryptoServiceProvider();

        byte[] bytes = ToAnsiiBytes(text);

        byte[] hash = md5.ComputeHash(bytes);

        PrintHash(Console.Out, hash);
        Console.Out.WriteLine( "" = {0}"", text);
    }

and 
    public static void PrintHash(TextWriter op, byte[] hash)
    {
        foreach (byte b in hash)
        {
            op.Write(""{0:X2}"", b);
        }
    }

when the file c:\text.txt contains the text toto you can run this code to see that the file + salt equals the same as the text ""totoSALT""
        FileStream fs = new FileStream(@""c:\text.txt"", FileMode.Open);

        var hasher = new MD5CryptoServiceProvider();
        var A = hasher.ComputeHash(fs);
        PrintHash(Console.Out, A);
        Console.Out.WriteLine();

        var salt = new byte[] { 0x53, 0x41, 0x4C, 0x54 };

        var B = hasher.ComputeHash(ToAnsiiBytes(""SALT""));
        PrintHash(Console.Out, B);
        Console.Out.WriteLine();

        var m = new MemoryStream(ToAnsiiBytes(""SALT""), false);

        fs.Seek(0, SeekOrigin.Begin);
        var ms = new MergedStream(fs, m);

        var C = hasher.ComputeHash(ms);
        PrintHash(Console.Out, C);
        Console.Out.WriteLine();


        HashAndPrint(Console.Out, ""toto"");
        HashAndPrint(Console.Out, ""totoSALT"");
        HashAndPrint(Console.Out, ""SALT"");

with this output
F71DBE52628A3F83A77AB494817525C6
8C4F4370C53E0C1E1AE9ACD577DDDBED
308DB2451D6580FEEB09FCF2DC1CEE19
F71DBE52628A3F83A77AB494817525C6 = toto
308DB2451D6580FEEB09FCF2DC1CEE19 = totoSALT
8C4F4370C53E0C1E1AE9ACD577DDDBED = SALT

","10112","<c#><hash><stream><md5><salt>","3","0","5","2015-01-16 13:03:43","","2","3","75066","","2009-05-18 19:15:29","2009-05-18 17:23:11",""
"878837","Salting a C# MD5 ComputeHash on a stream","I can't see any way to salt a MD5.ComputeHash(Stream).
Am I missing some way of injecting bytes into the HashAlgorithm?
I tried performing a ComputeHash(byte[]) before performing the stream compute, but, unsurprisingly, it had no effect.  Any ideas (apart from modifying the file)?
Thanks for your time.
addendum
Just to be a little more specific, I want to use a stream to get a hash on a large file that I don't want to load into memory.
FileInfo myFI= new FileInfo(""bigfile.dat"");
FileStream myIFS = piFile.OpenRead();
MD5 md5 = MD5.Create();
byte[] hash = md5.ComputeHash ( myIFS );
myIFS.Close ();

","You might consider using the HMACMD5 class and setting the Key property instead. In general, I'd go with an HMAC rather than the standard hash function since they offer a bit better security.
","10112","<c#><hash><stream><md5><salt>","3","3","5","2015-01-16 13:03:43","","2","3","75066","","2009-05-18 19:15:29","2009-05-18 17:23:11",""
"878837","Salting a C# MD5 ComputeHash on a stream","I can't see any way to salt a MD5.ComputeHash(Stream).
Am I missing some way of injecting bytes into the HashAlgorithm?
I tried performing a ComputeHash(byte[]) before performing the stream compute, but, unsurprisingly, it had no effect.  Any ideas (apart from modifying the file)?
Thanks for your time.
addendum
Just to be a little more specific, I want to use a stream to get a hash on a large file that I don't want to load into memory.
FileInfo myFI= new FileInfo(""bigfile.dat"");
FileStream myIFS = piFile.OpenRead();
MD5 md5 = MD5.Create();
byte[] hash = md5.ComputeHash ( myIFS );
myIFS.Close ();

","this is the right way to do it:
    private static byte[] _emptyBuffer = new byte[0];

    public static byte[] CalculateMD5(Stream stream)
    {
        return CalculateMD5(stream, 64 * 1024);
    }

    public static byte[] CalculateMD5(Stream stream, int bufferSize)
    {
        MD5 md5Hasher = MD5.Create();

        byte[] buffer = new byte[bufferSize];
        int readBytes;

        while ((readBytes = stream.Read(buffer, 0, bufferSize)) > 0)
        {
            md5Hasher.TransformBlock(buffer, 0, readBytes, buffer, 0);
        }

        md5Hasher.TransformFinalBlock(_emptyBuffer, 0, 0);

        return md5Hasher.Hash;
    }

","10112","<c#><hash><stream><md5><salt>","3","4","5","2015-01-16 13:03:43","","2","3","75066","","2009-05-18 19:15:29","2009-05-18 17:23:11",""
"1516528","How can I generate a vBulletin password salt for the md5 hash while importing user data?","I'm transferring users from my old database to a vBulletin database.
I want a script to do this as it'll take forever otherwise.
I have all the user's passwords stored just like md5(password)
But of course, this doesn't work with vBulletin due to salts etc.
So my code is this:
<?Php
mydatabase_connect();
$select=mysql_query(""SELECT * from `users`"");
while($user=mysql_fetch_array($select)) {

    forum_connect();
    $check=mysql_query(""SELECT * from `user` where `username` = '{$user[username]}'"");
    if(mysql_num_rows($check)>=""1"") {
        echo ""fail"";
        }else{
        $insert=mysql_query(""INSERT into `user` SET `username` = '{$user[username]}', `password` = '{$user[password]}', `email` = '{$user[email]}'"");
        if($insert) {
            echo 'success';
            }else{
            echo 'fail';
        }
    }
    mydatabase_connect();
}
?>

How would I change it to work with vBulletin - so I can set a vBulletin user.password field and vBulletin user.salt correctly. Bearing in mind that my $user[password] or users.password is stored as an md5 hash of their real, text password.
Thanks!
","If your old system used unsalted hashes, and vBulletin uses salted ones, then if you want users to keep their passwords you will have to modify vBulletin to use unsalted ones too. I'm not familiar with the vBulletin code, but if each user has their own salt value, perhaps just setting this to an empty string will suffice.
Failing that, write a page to enable a user to transition to the new system. You can direct users to a page when their login fails, and it would check their credentials against the old system, and create a new salt and hash for the new system.
","10058","<passwords><password-protection><salt><vbulletin>","2","1","4","2012-06-22 07:15:50","","1","1","751619","","2012-06-22 07:15:50","2009-10-04 14:22:48",""
"1516528","How can I generate a vBulletin password salt for the md5 hash while importing user data?","I'm transferring users from my old database to a vBulletin database.
I want a script to do this as it'll take forever otherwise.
I have all the user's passwords stored just like md5(password)
But of course, this doesn't work with vBulletin due to salts etc.
So my code is this:
<?Php
mydatabase_connect();
$select=mysql_query(""SELECT * from `users`"");
while($user=mysql_fetch_array($select)) {

    forum_connect();
    $check=mysql_query(""SELECT * from `user` where `username` = '{$user[username]}'"");
    if(mysql_num_rows($check)>=""1"") {
        echo ""fail"";
        }else{
        $insert=mysql_query(""INSERT into `user` SET `username` = '{$user[username]}', `password` = '{$user[password]}', `email` = '{$user[email]}'"");
        if($insert) {
            echo 'success';
            }else{
            echo 'fail';
        }
    }
    mydatabase_connect();
}
?>

How would I change it to work with vBulletin - so I can set a vBulletin user.password field and vBulletin user.salt correctly. Bearing in mind that my $user[password] or users.password is stored as an md5 hash of their real, text password.
Thanks!
","I don't know if this answer is too late, but you should be able to automatically transfer your passwords into vBulletin.
vBulletin generates its hashes this way:
$hash = md5(md5($plaintext) . $salt);

So, to transfer the users over, do roughly the following:
$salt = /* generate salt */;
$vb_hash = md5($your_old_hash . $salt);

To make it easy on yourself, use vBulletin's salt generation method. It's in the vB_DataManager_User class.
","10058","<passwords><password-protection><salt><vbulletin>","2","4","4","2012-06-22 07:15:50","","1","1","751619","","2012-06-22 07:15:50","2009-10-04 14:22:48",""
"1516528","How can I generate a vBulletin password salt for the md5 hash while importing user data?","I'm transferring users from my old database to a vBulletin database.
I want a script to do this as it'll take forever otherwise.
I have all the user's passwords stored just like md5(password)
But of course, this doesn't work with vBulletin due to salts etc.
So my code is this:
<?Php
mydatabase_connect();
$select=mysql_query(""SELECT * from `users`"");
while($user=mysql_fetch_array($select)) {

    forum_connect();
    $check=mysql_query(""SELECT * from `user` where `username` = '{$user[username]}'"");
    if(mysql_num_rows($check)>=""1"") {
        echo ""fail"";
        }else{
        $insert=mysql_query(""INSERT into `user` SET `username` = '{$user[username]}', `password` = '{$user[password]}', `email` = '{$user[email]}'"");
        if($insert) {
            echo 'success';
            }else{
            echo 'fail';
        }
    }
    mydatabase_connect();
}
?>

How would I change it to work with vBulletin - so I can set a vBulletin user.password field and vBulletin user.salt correctly. Bearing in mind that my $user[password] or users.password is stored as an md5 hash of their real, text password.
Thanks!
","this worked for me
md5(md5(passowrd).salt);

","10058","<passwords><password-protection><salt><vbulletin>","2","0","4","2012-06-22 07:15:50","","1","1","751619","","2012-06-22 07:15:50","2009-10-04 14:22:48",""
"1516528","How can I generate a vBulletin password salt for the md5 hash while importing user data?","I'm transferring users from my old database to a vBulletin database.
I want a script to do this as it'll take forever otherwise.
I have all the user's passwords stored just like md5(password)
But of course, this doesn't work with vBulletin due to salts etc.
So my code is this:
<?Php
mydatabase_connect();
$select=mysql_query(""SELECT * from `users`"");
while($user=mysql_fetch_array($select)) {

    forum_connect();
    $check=mysql_query(""SELECT * from `user` where `username` = '{$user[username]}'"");
    if(mysql_num_rows($check)>=""1"") {
        echo ""fail"";
        }else{
        $insert=mysql_query(""INSERT into `user` SET `username` = '{$user[username]}', `password` = '{$user[password]}', `email` = '{$user[email]}'"");
        if($insert) {
            echo 'success';
            }else{
            echo 'fail';
        }
    }
    mydatabase_connect();
}
?>

How would I change it to work with vBulletin - so I can set a vBulletin user.password field and vBulletin user.salt correctly. Bearing in mind that my $user[password] or users.password is stored as an md5 hash of their real, text password.
Thanks!
","I've adapted the process I used to transfer the user information from an existing database to the vbulletin database. It uses database queries entered through the MySQL command line client, no PHP processing is required.
It works for the scenario outlined: that passwords in the existing database were stored using md5(password). 
Both databases are on the same server, vBulletin 4.x
Three stored functions will be created:
vbulletin.userTitle() // Convert user type from current db to a user title

vbulletin.groupId() // Convert current user type into permission group ID

vbulletin.randomSalt() // Create salt using same approach as used by vbulletin


Log in through the MySQL client:
  mysql --user=xxx -p vbulletin
Create the stored functions:
  delimiter //
  CREATE FUNCTION vbulletin.userTitle(mtype VARCHAR(255))
  RETURNS CHAR(250)
  NO SQL

  BEGIN
    DECLARE userTypeTitle CHAR(250) DEFAULT """";

    CASE mtype
      WHEN 'user' THEN SET userTypeTitle = 'Member';
      WHEN 'admin' THEN SET userTypeTitle = 'Administrator';
      WHEN 'moderator' THEN SET userTypeTitle = 'Regional Moderator';
      ELSE
        SET userTypeTitle = 'Member';
    END CASE;

  RETURN userTypeTitle;
  END//

  CREATE FUNCTION vbulletin.groupId(mtype VARCHAR(255))
  RETURNS smallint(5)
  NO SQL

  BEGIN
    DECLARE groupTypeId smallint(5) DEFAULT 0;

    CASE mtype
      WHEN 'user' THEN SET groupTypeId = 2;
      WHEN 'admin' THEN SET groupTypeId = 6;
      WHEN 'moderator' THEN SET groupTypeId = 11;
      ELSE
         SET groupTypeId = 12;
    END CASE;

  RETURN groupTypeId;
  END//

  CREATE FUNCTION vbulletin.randomSalt()
  RETURNS CHAR(30)
  READS SQL DATA

  BEGIN
    DECLARE count INT DEFAULT 0;
    DECLARE rn1 CHAR;
    DECLARE saltout VARCHAR(30) DEFAULT """";

    WHILE count<30 DO
      SET count = count+1;
      SET rn1 = CHAR(FLOOR(33 + (RAND() * 93)));
      SELECT CONCAT(saltout, rn1) INTO saltout;
    END WHILE;

  RETURN saltout;
  END//
  delimiter ;


Back up the databases before transferring the user information.
The vbulletin database has all of the information used during set up and testing, so empty the three tables that we'll be updating.
  TRUNCATE `vbulletin`.`user`;
  TRUNCATE `vbulletin`.`userfield`;
  TRUNCATE `vbulletin`.`usertextfield`;


Modify the following queries to use your existing database and it's related fields.
Fill the main user table.
The salt is generated via the stored function for each row in the existing user table.
The hashed password from the existing database is hashed with the salt when it is inserted into the vbulletin database like this:
MD5(current_hashed_password + new_salt)
Main query:
  INSERT INTO `vbulletin`.`user` (
  `userid`, `username`, `salt`, `password`, `email`, `passworddate`, `styleid`, `showvbcode`, `joindate`, `lastvisit`, `lastactivity`, `reputationlevelid`, `timezoneoffset`, `usergroupid`, `usertitle`
  )
  SELECT
  `current_userid`, `current_username`, vbulletin.randomSalt() as new_salt, MD5(current_hashed_password + new_salt), `current_email`, CURDATE(), 5, 2, UNIX_TIMESTAMP(), UNIX_TIMESTAMP(), UNIX_TIMESTAMP(), 5, 0, vbulletin.groupId(current_type), vbulletin.userTitle(current_type)
   from `current_database`.`user`;


The following queries add default entries for each user.
If you've added any customized profile fields, you'll want to transfer that information into the userfield table:
  INSERT INTO `vbulletin`.`userfield` (
  `userid`, `field5`, `field6`
  )
  SELECT
  `current_userid`, `firstname`, `lastname`
   from `current_database`.`user`;


  INSERT INTO `vbulletin`.`usertextfield` (
  `userid`
  )
  SELECT `current_userid`
   from `current_database`.`user`;


Set the reputation level for your admin group users:
  UPDATE `vbulletin`.`user` SET `reputationlevelid` = 1 WHERE `usergroupid` = 6;

Remove the stored functions, they won't be used again:
  DROP FUNCTION vbulletin.userTitle;
  DROP FUNCTION vbulletin.groupId;
  DROP FUNCTION vbulletin.randomSalt;

","10058","<passwords><password-protection><salt><vbulletin>","2","0","4","2012-06-22 07:15:50","","1","1","751619","","2012-06-22 07:15:50","2009-10-04 14:22:48",""
"4968704","Spring Security 3: Salting password issue","I have got an simple application made in which I am able to register users and authenticate them. I've got the passwords encoded using and successfully able to authenticate them. I am using Spring 3, Spring Security 3 and Hibernate 3 in my application.
Now I want to salt their passwords with the ID of the user but I am not able to achieve this functionality. Could someone help me achieve it? I've been trying to do it for quite some time but ain't able to get it done.
Here is the code I've got for salting users with their ID and authenticating them.
xyz-security.xml
<http auto-config=""true"" use-expressions=""true"">
    <intercept-url pattern=""/welcome.do"" access=""hasRole('ROLE_USER')"" /> 
    <form-login login-page=""/login.do"" authentication-failure-url=""/login.do?login_error=1""/>       
    <logout invalidate-session=""true"" logout-url=""/logout"" logout-success-url=""/""/>
</http>

<beans:bean id=""daoAuthenticationProvider""  class=""org.springframework.security.authentication.dao.DaoAuthenticationProvider"">
    <beans:property name=""userDetailsService"" ref=""userDetailsService""/>
</beans:bean>

<beans:bean id=""authenticationManager"" class=""org.springframework.security.authentication.ProviderManager"">
    <beans:property name=""providers"">
        <beans:list>
            <beans:ref local=""daoAuthenticationProvider"" />
        </beans:list>
    </beans:property>
</beans:bean>

<authentication-manager>
    <authentication-provider user-service-ref=""userDetailsService"">
        <password-encoder ref=""passwordEncoder"">                
            <salt-source ref=""saltSource""/>
            </password-encoder>
    </authentication-provider>
</authentication-manager>

<!-- For hashing and salting user passwords -->
<beans:bean id=""passwordEncoder"" class=""org.springframework.security.authentication.encoding.ShaPasswordEncoder""/>
<beans:bean id=""saltSource"" class=""org.springframework.security.authentication.dao.ReflectionSaltSource""
    p:userPropertyToUse=""id""/>

UserDetailsAdapter.java
@Service(""userDetailsAdapter"")
public class UserDetailsAdapter {   

    private Long id;

    org.springframework.security.core.userdetails.User buildUserFromUserEntity(User userEntity) {
        String username = userEntity.getUsername();
        String password = userEntity.getPassword();
        boolean enabled = userEntity.isEnabled();
        boolean accountNonExpired = true;
        boolean credentialsNonExpired = true;
        boolean accountNonLocked = true;

        Collection<GrantedAuthority> authorities = new ArrayList<GrantedAuthority>();
        for (String authority: userEntity.getAuthorities()) {

            authorities.add(new GrantedAuthorityImpl(authority));
        }

        this.id = userEntity.getId();

        org.springframework.security.core.userdetails.User user = new org.springframework.security.core.userdetails.User(username, password, enabled, accountNonExpired, credentialsNonExpired, accountNonLocked, authorities);
        return user;
    }

    public Long getId() {
        return id;
    }

}

UserDetailsServiceImpl
@Service(""userDetailsService"")
public class UserDetailsServiceImpl implements UserDetailsService {

    @Autowired
    private UserDao userDao;

    @Autowired
    private UserDetailsAdapter userDetailsAdapter;

    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException, DataAccessException {
        UserDetails userDetails = null;
        User userEntity = userDao.findByUsername(username);

        if (userEntity == null) {
          throw new UsernameNotFoundException(""user not found"");
        }
        userDetails = userDetailsAdapter.buildUserFromUserEntity(userEntity);

        return userDetails;
    }
}

UserServiceImpl
@Service
public class UserServiceImpl implements UserService {

    @Autowired
    private UserDao userDao;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Autowired
    private SaltSource saltSource;

    public User getByUsername(String username) {
        return userDao.findByUsername(username);
    }

    public User getByEmail(String email) {
        return userDao.findByEmail(email);
    }

    public void createUser(User user) {
        userDao.create(user);

        UserDetailsAdapter userDetailsAdapter = new UserDetailsAdapter();
        org.springframework.security.core.userdetails.User userDetails =  userDetailsAdapter.buildUserFromUserEntity(user);
        String password = userDetails.getPassword();
        Object salt = saltSource.getSalt(userDetails);
        user.setPassword(passwordEncoder.encodePassword(password, salt));
        userDao.update(user);

    }

    public void updateUser(User user) {
        userDao.update(user);
    }
}

Could someone help me understand what am I missing here?
Many thanks.
","ReflectionSaltSource extracts a salt from the instance of UserDetails. But you use org.springframework.security.core.userdetails.User as an implementation of UserDetails, and it doesn't have a property named id (instead of that you have this property in UserDetailsAdapter, that doesn't make sense, since UserDetailsAdapter is a singleton).
So, you need to create a subclass of org.springframework.security.core.userdetails.User with id property, and return it from your UserDetailsAdapter.
","9808","<hibernate><spring-security><salt>","9","7","2","2011-03-26 23:13:31","4969370","1","3","21234","","2011-02-11 13:14:02","2011-02-11 11:55:51",""
"4968704","Spring Security 3: Salting password issue","I have got an simple application made in which I am able to register users and authenticate them. I've got the passwords encoded using and successfully able to authenticate them. I am using Spring 3, Spring Security 3 and Hibernate 3 in my application.
Now I want to salt their passwords with the ID of the user but I am not able to achieve this functionality. Could someone help me achieve it? I've been trying to do it for quite some time but ain't able to get it done.
Here is the code I've got for salting users with their ID and authenticating them.
xyz-security.xml
<http auto-config=""true"" use-expressions=""true"">
    <intercept-url pattern=""/welcome.do"" access=""hasRole('ROLE_USER')"" /> 
    <form-login login-page=""/login.do"" authentication-failure-url=""/login.do?login_error=1""/>       
    <logout invalidate-session=""true"" logout-url=""/logout"" logout-success-url=""/""/>
</http>

<beans:bean id=""daoAuthenticationProvider""  class=""org.springframework.security.authentication.dao.DaoAuthenticationProvider"">
    <beans:property name=""userDetailsService"" ref=""userDetailsService""/>
</beans:bean>

<beans:bean id=""authenticationManager"" class=""org.springframework.security.authentication.ProviderManager"">
    <beans:property name=""providers"">
        <beans:list>
            <beans:ref local=""daoAuthenticationProvider"" />
        </beans:list>
    </beans:property>
</beans:bean>

<authentication-manager>
    <authentication-provider user-service-ref=""userDetailsService"">
        <password-encoder ref=""passwordEncoder"">                
            <salt-source ref=""saltSource""/>
            </password-encoder>
    </authentication-provider>
</authentication-manager>

<!-- For hashing and salting user passwords -->
<beans:bean id=""passwordEncoder"" class=""org.springframework.security.authentication.encoding.ShaPasswordEncoder""/>
<beans:bean id=""saltSource"" class=""org.springframework.security.authentication.dao.ReflectionSaltSource""
    p:userPropertyToUse=""id""/>

UserDetailsAdapter.java
@Service(""userDetailsAdapter"")
public class UserDetailsAdapter {   

    private Long id;

    org.springframework.security.core.userdetails.User buildUserFromUserEntity(User userEntity) {
        String username = userEntity.getUsername();
        String password = userEntity.getPassword();
        boolean enabled = userEntity.isEnabled();
        boolean accountNonExpired = true;
        boolean credentialsNonExpired = true;
        boolean accountNonLocked = true;

        Collection<GrantedAuthority> authorities = new ArrayList<GrantedAuthority>();
        for (String authority: userEntity.getAuthorities()) {

            authorities.add(new GrantedAuthorityImpl(authority));
        }

        this.id = userEntity.getId();

        org.springframework.security.core.userdetails.User user = new org.springframework.security.core.userdetails.User(username, password, enabled, accountNonExpired, credentialsNonExpired, accountNonLocked, authorities);
        return user;
    }

    public Long getId() {
        return id;
    }

}

UserDetailsServiceImpl
@Service(""userDetailsService"")
public class UserDetailsServiceImpl implements UserDetailsService {

    @Autowired
    private UserDao userDao;

    @Autowired
    private UserDetailsAdapter userDetailsAdapter;

    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException, DataAccessException {
        UserDetails userDetails = null;
        User userEntity = userDao.findByUsername(username);

        if (userEntity == null) {
          throw new UsernameNotFoundException(""user not found"");
        }
        userDetails = userDetailsAdapter.buildUserFromUserEntity(userEntity);

        return userDetails;
    }
}

UserServiceImpl
@Service
public class UserServiceImpl implements UserService {

    @Autowired
    private UserDao userDao;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Autowired
    private SaltSource saltSource;

    public User getByUsername(String username) {
        return userDao.findByUsername(username);
    }

    public User getByEmail(String email) {
        return userDao.findByEmail(email);
    }

    public void createUser(User user) {
        userDao.create(user);

        UserDetailsAdapter userDetailsAdapter = new UserDetailsAdapter();
        org.springframework.security.core.userdetails.User userDetails =  userDetailsAdapter.buildUserFromUserEntity(user);
        String password = userDetails.getPassword();
        Object salt = saltSource.getSalt(userDetails);
        user.setPassword(passwordEncoder.encodePassword(password, salt));
        userDao.update(user);

    }

    public void updateUser(User user) {
        userDao.update(user);
    }
}

Could someone help me understand what am I missing here?
Many thanks.
","Here are the updated files that made it working:
UserDetailsAdapter.java
public class UserDetailsAdapter extends org.springframework.security.core.userdetails.User {
    private final Long id;
    public UserDetailsAdapter(User userEntity) {

        super(userEntity.getUsername(), userEntity.getPassword(), userEntity.isEnabled(), true, true, true, toAuthorities(userEntity.getAuthorities()));
        this.id = userEntity.getId();
    }

    private static Collection<GrantedAuthority> toAuthorities(List<String> authorities) {
        Collection<GrantedAuthority> authorityList = new ArrayList<GrantedAuthority>();
        for (String authority: authorities) {
            authorityList.add(new GrantedAuthorityImpl(authority));
        }
        return authorityList;
    }

    public Long getId() {
        return id;
    }

}

UserDetailsServiceImpl.java
@Service(""userDetailsService"")
public class UserDetailsServiceImpl implements UserDetailsService {

    @Autowired
    private UserDao userDao;

    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException, DataAccessException {
        UserDetails userDetails = null;
        User userEntity = userDao.findByUsername(username);

        if (userEntity == null) {
          throw new UsernameNotFoundException(""user not found"");
        }
        userDetails = new UserDetailsAdapter(userEntity);

        return userDetails;
    }
}

UserServiceImpl.java
@Service
public class UserServiceImpl implements UserService {
...
    public void createUser(User user) {
        userDao.create(user);

        UserDetailsAdapter userDetails = new UserDetailsAdapter(user);
        String password = userDetails.getPassword();
        Object salt = saltSource.getSalt(userDetails);
        user.setPassword(passwordEncoder.encodePassword(password, salt));
        userDao.update(user);

    }
...
}

Thanks :)
","9808","<hibernate><spring-security><salt>","9","7","2","2011-03-26 23:13:31","4969370","1","3","21234","","2011-02-11 13:14:02","2011-02-11 11:55:51",""
"14089516","should i use urandom or openssl_random_pseudo_bytes?","I am developing a site in php 5.4 and i was wondering which is better to use to gen a random salt for password security?
$salt = sha1(openssl_random_pseudo_bytes(23));

or
$seed = '';
$a = @fopen('/dev/urandom','rb');
$seed .= @fread($a,23);
$salt = sha1(seed);

or should i just go with:
$salt =  openssl_random_pseudo_bytes(40);

or
$salt = '';
$a = @fopen('/dev/urandom','rb');
$salt .= @fread($a,23);

","For security purposes you are better off using openssl_random_pseudo_bytes. OpenSSL takes care of gathering enough entropy to serve you good randomness. /dev/urandom is devised to never block and could be tricked into giving you not so random bytes.
With random bytes you do not need to run them through SHA1.
To sum it all, do:
$salt = openssl_random_pseudo_bytes(40, $cstrong);
if (! $cstrong) {
    exit('This should not happen');
}

","9561","<php><random><salt>","9","10","2","2015-11-04 13:19:59","14089555","2","2","","","","2012-12-30 08:55:23",""
"14089516","should i use urandom or openssl_random_pseudo_bytes?","I am developing a site in php 5.4 and i was wondering which is better to use to gen a random salt for password security?
$salt = sha1(openssl_random_pseudo_bytes(23));

or
$seed = '';
$a = @fopen('/dev/urandom','rb');
$seed .= @fread($a,23);
$salt = sha1(seed);

or should i just go with:
$salt =  openssl_random_pseudo_bytes(40);

or
$salt = '';
$a = @fopen('/dev/urandom','rb');
$salt .= @fread($a,23);

","In practice, there is almost certainly no difference.
Both openssl_random_pseudo_bytes and /dev/urandom provide a cryptographically secure source of pseudorandom bytes.  Neither is guaranteed to be truly random, but in practice, both are expected to be indistinguishable from true randomness by any known or foreseeable techniques.
Kmkaplan is technically correct in noting that /dev/urandom could return theoretically predictable output under certain conditions, as noted in man unrandom:

""A read from the /dev/urandom device will not block waiting for more entropy. As a result, if there is not sufficient entropy in the entropy pool, the returned values are theoretically vulnerable to a cryptographic attack on the algorithms used by the driver. Knowledge of how to do this is not available in the current unclassified literature, but it is theoretically possible that such an attack may exist. If this is a concern in your application, use /dev/random instead.""

However, the same is actually true of openssl_random_pseudo_bytes (which calls the OpenSSL function RAND_pseudo_bytes internally), as noted in the OpenSSL documentation:

""RAND_pseudo_bytes() puts num pseudo-random bytes into buf. Pseudo-random byte sequences generated by RAND_pseudo_bytes() will be unique if they are of sufficient length, but are not necessarily unpredictable. They can be used for non-cryptographic purposes and for certain purposes in cryptographic protocols, but usually not for key generation etc.""

Neither of these warnings should actually scare you from using these methods — the weaknesses they describe are only theoretical, except possibly under certain contrived circumstances (such as on a diskless embedded device with no hardware RNG immediately after boot-up), and should not be of practical concern in situations where PHP is normally deployed.
The upshot is, neither of these random number generation methods is going to be the weakest link in your cryptosystem, so you can safely choose either one.  If you're feeling paranoid, you could even use both.

Ps. One advantage of openssl_random_pseudo_bytes is that it works on Windows, too.  On the other hand, /dev/urandom is available on Unix even if the OpenSSL PHP extension is not installed.  Thus, for maximum portability, you should indeed implement support for both.
Also, always check that you indeed received as many bytes as you expected; for example, the /dev/urandom based code in your question above could silently return an empty string on systems like Windows where /dev/urandom does not exist.
","9561","<php><random><salt>","9","9","2","2015-11-04 13:19:59","14089555","2","2","","","","2012-12-30 08:55:23",""
"3063116","How to easily salt a password in a C# windows form application?","How can I easily salt a password from a Textbox.Text?
Are there some built in wizardry in the .NET framework?
","Here's a nice article and another one (which is more adapted to ASP.NET applications).
","9479","<c#><.net><winforms><passwords><salt>","7","2","5","2010-07-11 00:42:30","3063267","1","3","75500","","2010-07-11 00:40:20","2010-06-17 15:29:47",""
"3063116","How to easily salt a password in a C# windows form application?","How can I easily salt a password from a Textbox.Text?
Are there some built in wizardry in the .NET framework?
","There is no wizardry, a salt is simply some random text appended to a password to defeat dictionary attacks - make up your own jibberish.
","9479","<c#><.net><winforms><passwords><salt>","7","0","5","2010-07-11 00:42:30","3063267","1","3","75500","","2010-07-11 00:40:20","2010-06-17 15:29:47",""
"3063116","How to easily salt a password in a C# windows form application?","How can I easily salt a password from a Textbox.Text?
Are there some built in wizardry in the .NET framework?
","Have a look at the hmac functions like hmacdm5, hmacsha1 or hmacsha256.
Look at the System.Security.Cryptography namespace, too.
","9479","<c#><.net><winforms><passwords><salt>","7","0","5","2010-07-11 00:42:30","3063267","1","3","75500","","2010-07-11 00:40:20","2010-06-17 15:29:47",""
"3063116","How to easily salt a password in a C# windows form application?","How can I easily salt a password from a Textbox.Text?
Are there some built in wizardry in the .NET framework?
","We had a great discussion a while ago about best practices when salting a password, you might find some great ideas there:
Salting Your Password: Best Practices?
I've found that one of the easiest, while still being fairly secure, is to use a GUID as your salt. It's random and sufficiently long. It works best if you include the string formatting of the GUID (the '{' and '-' characters), but you don't have to. 
Remember that the salt has to be unique per item salted and that to be most secure, you should use a cryptographically secure random number generator. Remember also that you have to store your salt along with the password, or you won't be able to check the plaintext version against the hashed version! You can store the salt un-encrypted if you like;  I typically put it in a field on the same table as the password. The purpose of the salt isn't to remain hidden, it's to make rainbow tables difficult (hopefully impossible) to compute in a timely manner. 
Here's a quick snippet that will work in C#:
RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
byte[] buffer = new byte[1024];

rng.GetBytes(buffer);
string salt = BitConverter.ToString(buffer);
var saltedPassword = password + salt;

or...
var salt = Guid.NewGuid().ToString();
var saltedPassword = password + salt;

","9479","<c#><.net><winforms><passwords><salt>","7","11","5","2010-07-11 00:42:30","3063267","1","3","75500","","2010-07-11 00:40:20","2010-06-17 15:29:47",""
"3063116","How to easily salt a password in a C# windows form application?","How can I easily salt a password from a Textbox.Text?
Are there some built in wizardry in the .NET framework?
","I suppose you are asking for a username along with the password?
In some systems username is used as a salt. (And I think it is OK to do that.)
Otherwise you'll need to have your salt stored somewhere and retrieve it before hashing (in case of random-created salt) or have an algorithm which will return the same salt for the same user (and it is not better that just using a plain username).
Personally use the following code:
byte[] GetSaltedPasswordHash(string username, string password)
{
    byte[] pwdBytes = Encoding.UTF8.GetBytes(password);
    // byte[] salt = BitConverter.GetBytes(userId);
    byte[] salt = Encoding.UTF8.GetBytes(username);
    byte[] saltedPassword = new byte[pwdBytes.Length + salt.Length];

    Buffer.BlockCopy(pwdBytes, 0, saltedPassword, 0, pwdBytes.Length);
    Buffer.BlockCopy(salt, 0, saltedPassword, pwdBytes.Length, salt.Length);

    SHA1 sha = SHA1.Create();

    return sha.ComputeHash(saltedPassword);
}

","9479","<c#><.net><winforms><passwords><salt>","7","4","5","2010-07-11 00:42:30","3063267","1","3","75500","","2010-07-11 00:40:20","2010-06-17 15:29:47",""
"17297637","OpenSSL - Password vs Salt Purpose","When encrypting a file with OpenSSL, it is possible to use -pass pass:mySillyPassword, where mySillyPassword is the password used in encryption.  In addition, it is possible to use a salt, where -salt -s (hex string) is used to specify the salt.
Why would someone want to use a password instead of the salt or in conjunction with a salt?  Also, I understand just using the -salt command will cause OpenSSL to generate a salt.  How is this better than a user-defined salt?  If OpenSSL randomly generates a salt, how will the user know what the salt is to decrypt the file in the future?
","In OpenSSL, the salt will be prepended to the front of the encrypted data, which will allow it to be decrypted. The purpose of the salt is to prevent dictionary attacks, rainbow tables, etc. The following is from the OpenSSL documentation:

Without the -salt option it is possible to perform efficient
  dictionary attacks on the password and to attack stream cipher
  encrypted data. The reason for this is that without the salt the same
  password always generates the same encryption key. When the salt is
  being used the first eight bytes of the encrypted data are reserved
  for the salt: it is generated at random when encrypting a file and
  read from the encrypted file when it is decrypted.

The documentation suggests that a salt always be used with a password, except if compatibility with earlier versions that do not support a salt is neccessary.
","9350","<encryption><passwords><openssl><salt>","8","6","2","2019-03-27 03:40:16","17297740","0","1","","","","2013-06-25 12:41:18",""
"17297637","OpenSSL - Password vs Salt Purpose","When encrypting a file with OpenSSL, it is possible to use -pass pass:mySillyPassword, where mySillyPassword is the password used in encryption.  In addition, it is possible to use a salt, where -salt -s (hex string) is used to specify the salt.
Why would someone want to use a password instead of the salt or in conjunction with a salt?  Also, I understand just using the -salt command will cause OpenSSL to generate a salt.  How is this better than a user-defined salt?  If OpenSSL randomly generates a salt, how will the user know what the salt is to decrypt the file in the future?
","Password and SALT are two different things. You have to have a password with or without salt (password is mandatory while salt is optional but recommended). 
The actual key which is used for encryption is driven from the password and the SALT, if provided. Hence, even if the same password used to encrypt two files, if SALT is used, then the key will be different and the ciphertext of course. 
The password is never appended or encoded into the ciphertext. In contrast, the salt is added to the beginning of the ciphertext. But it can't be used to decrypt the ciphertext without the password. 
Why SALT is important? Imagine you are using the same password without SALT to encrypt ten files. An adversary can generate keys dictionary for potential passwords then once one key successfully decrypt one file, it can decrypt all files. With SALT he has to create ten different dictionaries one for each SALT, which make things more expensive for him and secure for us. 
Let's do practical things, I will use openssl 1.1.1:
Password without SALT:
echo ""secret data in my file"" > plaintext.txt

openssl enc -aes-128-cbc -nosalt -k ""mySecretPassword"" -in plaintext.txt -out enc1.nosalt.bin
openssl enc -aes-128-cbc -nosalt -k ""mySecretPassword"" -in plaintext.txt -out enc2.nosalt.bin

Both ciphertexts should be the same because the encryption key only depends on the password which is the same in both cases. 
xxd enc1.nosalt.bin
00000000: 576e a82c 0dac 92d8 5e45 5ef4 3f6f db6a  Wn.,....^E^.?o.j
00000010: 5630 554f 3f28 a0de ae96 91d9 1024 d5ca  V0UO?(.......$..

xxd enc2.nosalt.bin
00000000: 576e a82c 0dac 92d8 5e45 5ef4 3f6f db6a  Wn.,....^E^.?o.j
00000010: 5630 554f 3f28 a0de ae96 91d9 1024 d5ca  V0UO?(.......$..

Password and SALT: 
openssl enc -aes-128-cbc -k ""mySecretPassword"" -in plaintext.txt -out enc2.salted.bin
 openssl enc -aes-128-cbc -k ""mySecretPassword"" -in plaintext.txt -out enc1.salted.bin

The ciphertext should be different due to the SALT, even though we use the same password. Note that the Salt is appended to the beginning of the ciphertext. 
xxd enc2.salted.bin
00000000: 5361 6c74 6564 5f5f 9cfe 2d62 a2d4 70b8  Salted__..-b..p.
00000010: aee4 afb5 85c9 76a2 cb04 7e1d 27d9 94d4  ......v...~.'...
00000020: a1b3 c4d6 39b8 f5a8 c300 81b5 b6ed 4cca  ....9.........L.

xxd enc1.salted.bin
00000000: 5361 6c74 6564 5f5f e73c ee5b 701b bba8  Salted__.<.[p...
00000010: fa25 c54e befa 26dc ddb1 3a2d 2bd7 a95b  .%.N..&...:-+..[
00000020: bda9 56f0 4445 f229 3398 4076 1044 dad6  ..V.DE.)3.@v.D..

","9350","<encryption><passwords><openssl><salt>","8","1","2","2019-03-27 03:40:16","17297740","0","1","","","","2013-06-25 12:41:18",""
"22368674","""No Top file or external nodes data matches found"" with salt","New to salt,and i add first server(wx-1),it works ,but when i add a differnt server, test.ping is ok,but when execute salt 'qing' state.highstate, it fails,the error info is:
No Top file or external nodes data matches found

Here is my top.sls:
base:
  'wx-1':
    - bin.nginx
    - git
    - web
    - mongo
    - redis
  'qing':
    - bin.nginx

qing is a new server and it's config is different to wx-1,don't know if this is ok,thanks for your help:)
","You didn't give much information. But here are a few things to check:

test if salt qing state.sls bin.nginx works, if not continue reading
make sure file_roots:base in master config points to /srv/salt
use salt-master/minion --version to check salt versions, make sure they are the same. Because different versions might diff

Give further info if you tried all the above.
","9197","<salt>","4","8","2","2015-01-03 15:54:48","22628288","0","","","","","2014-03-13 03:48:36",""
"22368674","""No Top file or external nodes data matches found"" with salt","New to salt,and i add first server(wx-1),it works ,but when i add a differnt server, test.ping is ok,but when execute salt 'qing' state.highstate, it fails,the error info is:
No Top file or external nodes data matches found

Here is my top.sls:
base:
  'wx-1':
    - bin.nginx
    - git
    - web
    - mongo
    - redis
  'qing':
    - bin.nginx

qing is a new server and it's config is different to wx-1,don't know if this is ok,thanks for your help:)
","If you make changes to your sls files. Make sure that you restart the master in order for it to update. This solved my problem when receiving the same error...
","9197","<salt>","4","9","2","2015-01-03 15:54:48","22628288","0","","","","","2014-03-13 03:48:36",""
"2225644","What is the correct format for a blowfish salt using PHP's crypt?","I have read the information provided on the PHP Manual Entry for crypt(), but I find myself still unsure of the format for a salt to trigger the Blowfish algorithm.
According manual entry, I should use '$2$' or '$2a$' as the start of a 16 character string.  However, in the example given later, they use a much longer string: '$2a$07$usesomesillystringforsalt$', which indicates to me that whatever string I provide will be sliced and diced to fit the model.
The problem I am encountering is actually triggering the Blowfish algo vs STD_DES.  Example:
$foo = 'foo';
$salt = '$2a$' . hash('whirlpool', $foo); // 128 characters, will be truncated
$hash = crypt($foo, $salt); 
// $hash = $26HdMTpoODt6

That hash is obviously not whirlpool, and is in fact STD_DES with only the first two characters of the salt being used for the salt.  However, in the PHP Manual's example, their salt starts with '$2a$07$', so if I add those three characters to the same code I get the following:
$foo = 'foo';
$salt = '$2a$' . hash('whirlpool', $foo); // 128 characters, will be truncated
$hash = crypt($foo, $salt); 
// $hash = $2a$07$b1b2ee48991281a439da2OHi1vZF8Z2zIA.8njYZKR.9iBehxLoIC

I've noticed I can provide some variance in the characters which are here shown as '07$', for example 04$ and 15$ both work, but 01$ through 03$ don't work (generates a blank string), and values such as 99$ and 85$ cause it to revert to STD_DES again.
The Question:
What is the significance of those three characters following the '$2a$' string which, as I am lead to believe by the manual, instruct the crypt function to use the blowfish method.  
According to the manual, '$2a$' should be enough to instruct crypt() to use the blowfish method; what, then, is the significance of the following three characters?  What then, is the correct format for a salt, if these three characters are so significant?
","The number following the 2a specifies the log2 of the number of rounds to perform. For example, 10 means do 1024 rounds. Usually, 10 is normal. Don't use numbers that are too big, or your password will take forever to verify.
See Why does BCrypt.net GenerateSalt(31) return straight away? for something related. :-)
","8622","<php><hash><salt><blowfish><crypt>","15","15","1","2010-02-08 23:40:27","2225675","0","9","173925","","2010-02-08 23:40:27","2010-02-08 23:21:24",""
"10963209","Web app passwords: bcrypt and SHA256 (and scrypt)","With all the recent (e.g. LinkedIn) discussions of passwords I'm looking at password hashing implementations.  After two cups of coffee and a morning reading I'm no more a cryptographer than when I started.  And I really don't want to pretend that I am.
Specific Questions

Does using a integer unique user ID fail as an effective salt?  (crypt() uses only 16 bits?)
If I simply run sha256() on a hash over and over until a second is used up does that defeat the brute-force attacks?
If I have to ask these questions should I be using bcrypt?

Discussion/Explanation:
The goal is simply if my user's hashed passwords were leaked they: 

would not be ""easy"" to crack, 
cracking one password would not expose other users that use the same password).

What I've read for #1 is the the hash computation must be expensive -- taking, say, a second or two to calculate and maybe requiring a bit or memory (to thwart hardware decryption).
bcrypt has this built in, and scrypt, if I understand correctly, is more future-proof and includes a minimum memory usage requirement. 
But, is it an equally effective approach to eat time by ""rehashing"" the result of sha256() as many times as needed to use up a few seconds and then store the final loop count with the hash for later checking a provided password?
For #2, using a unique salt for every password is important.  What's not been clear is how random (or large) the salt must be.  If the goal is to avoid everyone that uses ""mypassword"" as their password from having the same hash is it not enough to simply do this?:
hash = sha256_hex( unique_user_id + user_supplied_password );

or even this, although I'm not sure it buys me anything:
hash = sha256_hex( sha256( unique_user_id ) + user_supplied_password );

The only benefit I can see from using the user's ID, besides I know it is unique, is avoiding having to save the salt along with the hash.  Not much of an advantage.   Is there a real problem with using a user's ID as the salt?  Does it not accomplish #2?
I assume if someone can steal my user's hashed passwords then I must assume they can get whatever they want -- including the source code that generates the hash.  So, is there any benefit to adding an extra random string (the same string) to the password before hashing?  That is:
# app_wide_string = one-time generated, random 64 7-bit *character* string.
hash = sha256_hex( unique_user_id + app_wide_string + user_supplied_password );

I have seen that suggested, but I don't understand what I gain from that over the per-user salt.  If someone wanted to brute-force the attack they would know that ""app_wide_string"" and use that when running their dictionary attack, right?
Is there a good reason to use bcrypt over rolling my own as described above?  Maybe the fact that I'm asking these questions is reason enough?
BTW -- I just timed an existing hashing function I have and on my laptop and I can generate about 7000 hashes a second.  Not quite the one or two seconds that are often suggested.
Some related links:
using sha256 as hashing and salting with user's ID
SHA512 vs. Blowfish and Bcrypt
What is the optimal length for user password salt?
","Bcrypt is great because you can tune the work factor from 4 to 31, each increment creates an exponentional required time, I've actually graphed it, at a work factor of 14 it's already taking over a second, so as computers get faster and faster you only need to change one parameter, and of course update your password hashes ...
My main concern with bcrypt is that if the work factor is set to high, then it may overload your system as multiple users are trying to login so you have tune it, depending on the number of of concurrent logins and the resources of your system ...
Salts are still required, their main purpose is to deterred off-line attacks, if the salt space is to large, then the adversary won't be able to generate the look up table, 64 bit salt seems a bit low, bcrypt has 128 bit salts coupled with the work factor makes it quite a challenge for offline attacks ... and yes the salt should be random for each password, bcrypt will generate one for you, if you use the same salt for each password then you have made it eassier for the adversary to comprimised all the passwords using an online attack.
Bcrypt really shines for online attacks, if you have set the work factor properly, because even if I get the hash, meant to say if the 'adversary' gets the hash, the work factor makes it really painful to go through an entire dictionary, taking multiple days and if the password isn't in the dictionary, then I'm really in trouble cause a brute force attack will be epic, the password bit space for bcrypt is quite large though finite :)
Sha256 may be taking a bit of time now, but eventually computers will get faster and faster and it'll be fairly easy for attacks, the unix guys thought crypt was so slow it would have never being an issue, and today I have done an online attack in seconds,  offline attack in days, a brute force attack (going through the entire password bit space) in weeks ...

you want the salt to be as large and random as possible using only numbers makes it easier for me to iterate over all the possible ids.
multiple sha256 may take a second now but down the road it won't be effective any more, computers processing power grows exponentially and so you want an algorithm that can be configured as such.
you are doing the right thing by asking questions and doing your homework if more people did this we wouldn't have so many breaches

","8433","<encryption><passwords><hash><salt><bcrypt>","13","8","2","2012-08-11 19:06:00","","0","4","-1","","2017-05-23 12:16:51","2012-06-09 17:47:42",""
"10963209","Web app passwords: bcrypt and SHA256 (and scrypt)","With all the recent (e.g. LinkedIn) discussions of passwords I'm looking at password hashing implementations.  After two cups of coffee and a morning reading I'm no more a cryptographer than when I started.  And I really don't want to pretend that I am.
Specific Questions

Does using a integer unique user ID fail as an effective salt?  (crypt() uses only 16 bits?)
If I simply run sha256() on a hash over and over until a second is used up does that defeat the brute-force attacks?
If I have to ask these questions should I be using bcrypt?

Discussion/Explanation:
The goal is simply if my user's hashed passwords were leaked they: 

would not be ""easy"" to crack, 
cracking one password would not expose other users that use the same password).

What I've read for #1 is the the hash computation must be expensive -- taking, say, a second or two to calculate and maybe requiring a bit or memory (to thwart hardware decryption).
bcrypt has this built in, and scrypt, if I understand correctly, is more future-proof and includes a minimum memory usage requirement. 
But, is it an equally effective approach to eat time by ""rehashing"" the result of sha256() as many times as needed to use up a few seconds and then store the final loop count with the hash for later checking a provided password?
For #2, using a unique salt for every password is important.  What's not been clear is how random (or large) the salt must be.  If the goal is to avoid everyone that uses ""mypassword"" as their password from having the same hash is it not enough to simply do this?:
hash = sha256_hex( unique_user_id + user_supplied_password );

or even this, although I'm not sure it buys me anything:
hash = sha256_hex( sha256( unique_user_id ) + user_supplied_password );

The only benefit I can see from using the user's ID, besides I know it is unique, is avoiding having to save the salt along with the hash.  Not much of an advantage.   Is there a real problem with using a user's ID as the salt?  Does it not accomplish #2?
I assume if someone can steal my user's hashed passwords then I must assume they can get whatever they want -- including the source code that generates the hash.  So, is there any benefit to adding an extra random string (the same string) to the password before hashing?  That is:
# app_wide_string = one-time generated, random 64 7-bit *character* string.
hash = sha256_hex( unique_user_id + app_wide_string + user_supplied_password );

I have seen that suggested, but I don't understand what I gain from that over the per-user salt.  If someone wanted to brute-force the attack they would know that ""app_wide_string"" and use that when running their dictionary attack, right?
Is there a good reason to use bcrypt over rolling my own as described above?  Maybe the fact that I'm asking these questions is reason enough?
BTW -- I just timed an existing hashing function I have and on my laptop and I can generate about 7000 hashes a second.  Not quite the one or two seconds that are often suggested.
Some related links:
using sha256 as hashing and salting with user's ID
SHA512 vs. Blowfish and Bcrypt
What is the optimal length for user password salt?
","
Does using a integer unique user ID fail as an effective salt? (crypt() uses only 16 bits?)

You'd normally use a random generated salt and then store that hash along with the encrypted password. It doesn't matter that the attacker also gets access to the salt - the purpose of it is to prevent a lookup table to be used, thereby forcing the attacker to brute force each hash individually.
crypt just stores the salt and hash into a single string, along with the algoritm to use.
","8433","<encryption><passwords><hash><salt><bcrypt>","13","0","2","2012-08-11 19:06:00","","0","4","-1","","2017-05-23 12:16:51","2012-06-09 17:47:42",""
"2999197","Do I need a ""random salt"" once per password or only once per database?","Further to my previous question about salted passwords in PHP/MySQL, I have another question regarding salts.
When someone says ""use a random salt"" to pre/append to a password, does this mean:

Creating a static a 1 time randomly generated string of characters, or 
Creating a string of characters that changes at random every time a
password is created?

If the salt is random for every user and stored along with the hashed password, how is the original salt ever retrieved back for verification?
","The salt has to be stored with the hash for verification to be possible. Best practice would be to use a different salt each time a password is created or changed.
","8383","<security><passwords><hash><salt>","31","4","4","2011-09-14 16:16:50","2999247","1","29","-1","","2017-05-23 12:17:57","2010-06-08 16:19:17",""
"2999197","Do I need a ""random salt"" once per password or only once per database?","Further to my previous question about salted passwords in PHP/MySQL, I have another question regarding salts.
When someone says ""use a random salt"" to pre/append to a password, does this mean:

Creating a static a 1 time randomly generated string of characters, or 
Creating a string of characters that changes at random every time a
password is created?

If the salt is random for every user and stored along with the hashed password, how is the original salt ever retrieved back for verification?
","Dynamically changing the salt is a lot more secure than having a one off static salt.
Also make the salts unique per user and not one global salt.  Change them every time a user logs in for example.
Concatanating the salt to the end of the password then hashing it is OK, but is an easily guessable formula.  Best come up with your own one, i.e. weave the salt and password to create a new string then hash, as md5(password + salt) is vulnerable to dictionary attack still.
","8383","<security><passwords><hash><salt>","31","2","4","2011-09-14 16:16:50","2999247","1","29","-1","","2017-05-23 12:17:57","2010-06-08 16:19:17",""
"2999197","Do I need a ""random salt"" once per password or only once per database?","Further to my previous question about salted passwords in PHP/MySQL, I have another question regarding salts.
When someone says ""use a random salt"" to pre/append to a password, does this mean:

Creating a static a 1 time randomly generated string of characters, or 
Creating a string of characters that changes at random every time a
password is created?

If the salt is random for every user and stored along with the hashed password, how is the original salt ever retrieved back for verification?
","The second alternative is the correct one.
Traditionally, the salt is stored alongside with the hashed password, but non encrypted (typically preappended, for example in unix passwords)
Update: the method used in most newer Unix system is this one.
","8383","<security><passwords><hash><salt>","31","4","4","2011-09-14 16:16:50","2999247","1","29","-1","","2017-05-23 12:17:57","2010-06-08 16:19:17",""
"2999197","Do I need a ""random salt"" once per password or only once per database?","Further to my previous question about salted passwords in PHP/MySQL, I have another question regarding salts.
When someone says ""use a random salt"" to pre/append to a password, does this mean:

Creating a static a 1 time randomly generated string of characters, or 
Creating a string of characters that changes at random every time a
password is created?

If the salt is random for every user and stored along with the hashed password, how is the original salt ever retrieved back for verification?
","A new salt should be randomly generated for each user and each time they change their password as a minimum. Don't just rely on a site wide salt for example, as that defeats the point of using a salt in the first place.
Using a unique salt for each user is so that if two users have the same password they won't get the same resultant hash. It also means a brute force attack would need to be mounted against each user individually rather then being able to pre-compute a rainbow table for the site.
You then store the result of hashing the salt and password in the database hash(salt + password), along with the salt for each user. You can store these in separate columns, or all in one column (separated by some character not used in the hashes, so ; for example). As long as you can retrieve both you'll be fine. 
However, if your database is compromised, either due to someone gaining local access or via SQL injection attacks, then both the salt and final hash will be available, which means a brute force attack on the users' passwords would be trivial. To combat this, as suggested by The Rook you can also use a sitewide secret key stored in a file locally as another input of your hashing method so that an attacker would also need to know this to mount an effective attack. Which means your DB would have to be compromised AND the attacker would need access to local files. So using hash(hash(salt + secret) + password), etc.
While in most algorithms you aim to make things as fast as possible, for password hashing you want to slow it down, this is called Key Strengthening (or sometimes Key Stretching). If it takes 0.00001 seconds for your hash function to return, someone can try brute forcing 100,000 passwords a second until they find a match. If it takes 1 second for your hash function to spit out the result, it's not a big deal as far as someone logging into your application is concerned, but for cracking the password it's a bigger deal since each attempt will now take 1 second to get a result, meaning it would take 100,000 times as long to test each brute forced password than it would using your original hash function. 
To make your hash function slower, you just need to run it multiple times. For example, you could do new_hash = salt + password + previous_hash 100,000 times. You may need to adjust the number of iterations to a higher value if it's too quick. If you want to be able to change the value later, make sure to store the number of iterations with the user record so that you don't affect any passwords previous stored.
Your user record should now have a field formatted something like this ""$<algorithm>$<iterations>$<salt>$<hash>"" (or as separate fields if you want).
When the user enters their password you can retrieve the salt and number-of-iterations from the DB and the sitewide secret from a local file and validate that when you run the same number of iterations with the salt and password, the resulting hash matches what you have stored.
If the user changes their password, then you should generate a new salt. 
The hashing method you use doesn't matter (but the hashing algorithm does*). Above I suggested hash(hash(salt + secret) + password) but equally it could be hash(hash(salt) + hash(secret) + hash(password)). The method you use doesn't change the effectiveness of your password storage, one is not really any more secure than the other. Relying on the design of how you hash the password and salt together to provide security is called security through obscurity and should be avoided.
*You should not use MD5 or SHA-1 as these are considered insecure. Use the SHA-2 family instead (SHA256, SHA512, etc). (Ref)
","8383","<security><passwords><hash><salt>","31","65","4","2011-09-14 16:16:50","2999247","1","29","-1","","2017-05-23 12:17:57","2010-06-08 16:19:17",""
"4983915","Is time() a good salt?","I'm looking at some code that I have not written myself. The code tries to hash a password with SHA512 and uses just time() as the salt. Is time() too simple a salt for this or is this code safe?
Thanks for the answers and comments. I will sum it up here for the new readers:

salt should be different for each user, so if 2 users register at the same time, their salts won't be unique. This is a problem, but not a big one. 
but salt shouldn't be in any way related to the user, so time() is not a good salt. 
""Use a random, evenly distributed, high entropy salt."" -- That's a mouthful, so what code could possibly generate a random, evenly distributed, high entropy salt?

Ok, so how about I replace time() with a random string 32 char long. The random string could be generated from looping 32 times over a set of alphabet chars. Does that sound good?
","The user name should be sufficient enough and perhaps the registration time stamp, but you should store it somewhere in the database. Anyway every value you use to salt your password hash, should be stored some way, so you can recalculate the hash.
Is salting with user name + a time stamp secure enough? It should be. For cracking SHA512 Hashes normally Rainbow Tables are used. A user name + a time stamp should be a salt which is uniquq enough, so there is no way there is some Rainbow Table on the net which contains precalculated hashes with passwords, which are salted this way.
","8152","<php><security><hash><passwords><salt>","56","-2","9","2014-06-27 17:04:29","4984044","3","31","1438393","","2014-03-09 12:13:05","2011-02-13 11:45:07",""
"4983915","Is time() a good salt?","I'm looking at some code that I have not written myself. The code tries to hash a password with SHA512 and uses just time() as the salt. Is time() too simple a salt for this or is this code safe?
Thanks for the answers and comments. I will sum it up here for the new readers:

salt should be different for each user, so if 2 users register at the same time, their salts won't be unique. This is a problem, but not a big one. 
but salt shouldn't be in any way related to the user, so time() is not a good salt. 
""Use a random, evenly distributed, high entropy salt."" -- That's a mouthful, so what code could possibly generate a random, evenly distributed, high entropy salt?

Ok, so how about I replace time() with a random string 32 char long. The random string could be generated from looping 32 times over a set of alphabet chars. Does that sound good?
","Updated
It's not a really good salt, but probably good enough to defeat all but the most determined and resourceful attackers. The requirements for a good salt are:

Different for each user
long enough (at the very least alphanumeric 8 characters) to make the concatenation of salt and (potentially weak) password too long for a brute force attack.

time() values are not really long enough, since they have 10 characters, but only digits. 
Also, sometimes two users may get the same value when they are created within the same second. But that's only a problem if you have situations where many users are automatically created within the same second.
In any case, far more important than a perfect salt is using a good hash function, and SHA512 is one of the best we have available right now.
","8152","<php><security><hash><passwords><salt>","56","2","9","2014-06-27 17:04:29","4984044","3","31","1438393","","2014-03-09 12:13:05","2011-02-13 11:45:07",""
"4983915","Is time() a good salt?","I'm looking at some code that I have not written myself. The code tries to hash a password with SHA512 and uses just time() as the salt. Is time() too simple a salt for this or is this code safe?
Thanks for the answers and comments. I will sum it up here for the new readers:

salt should be different for each user, so if 2 users register at the same time, their salts won't be unique. This is a problem, but not a big one. 
but salt shouldn't be in any way related to the user, so time() is not a good salt. 
""Use a random, evenly distributed, high entropy salt."" -- That's a mouthful, so what code could possibly generate a random, evenly distributed, high entropy salt?

Ok, so how about I replace time() with a random string 32 char long. The random string could be generated from looping 32 times over a set of alphabet chars. Does that sound good?
","Salt is use to prevent rainbow attacks by breaking the match between the password and precomputed hash. So the main task for a salt is to be different for each user/password record. Quality of randomization of the salt doesn't matter much as long as the salt is different for different users. 
","8152","<php><security><hash><passwords><salt>","56","0","9","2014-06-27 17:04:29","4984044","3","31","1438393","","2014-03-09 12:13:05","2011-02-13 11:45:07",""
"4983915","Is time() a good salt?","I'm looking at some code that I have not written myself. The code tries to hash a password with SHA512 and uses just time() as the salt. Is time() too simple a salt for this or is this code safe?
Thanks for the answers and comments. I will sum it up here for the new readers:

salt should be different for each user, so if 2 users register at the same time, their salts won't be unique. This is a problem, but not a big one. 
but salt shouldn't be in any way related to the user, so time() is not a good salt. 
""Use a random, evenly distributed, high entropy salt."" -- That's a mouthful, so what code could possibly generate a random, evenly distributed, high entropy salt?

Ok, so how about I replace time() with a random string 32 char long. The random string could be generated from looping 32 times over a set of alphabet chars. Does that sound good?
","Short answer:
No, time() is not a good salt.
Long answer:
copied from my answer to Salt Generation and open source software

What is a salt?
A salt is a random set of bytes of a fixed length that is added to the input of a hash algorithm.

Why is salting (or seeding) a hash useful?
Adding a random salt to a hash ensures that the same password will produce many different hashes. The salt is usually stored in the database, together with the result of the hash function.
  Salting a hash is good for a number of reasons:

Salting greatly increases the difficulty/cost of precomputated attacks (including rainbow tables)
Salting makes sure that the same password does not result in the same hash. 
  This makes sure you cannot determine if two users have the same password. And, even more important, you cannot determine if the same person uses the same password across different systems.
Salting increases the complexity of passwords, thereby greatly decreasing the effectiveness of both Dictionary- and Birthday attacks. (This is only true if the salt is stored separate from the hash).
Proper salting greatly increases the storage need for precomputation attacks, up to the point where they are no longer practical. (8 character case-sensitive alpha-numeric passwords with 16 bit salt, hashed to a 128 bit value, would take up just under 200 exabytes without rainbow reduction).


There is no need for the salt to be secret.
A salt is not a secret key, instead a salt 'works' by making the hash function specific to each instance. With salted hash, there is not one hash function, but one for every possible salt value. This prevent the attacker from attacking N hashed passwords for less than N times the cost of attacking one password. This is the point of the salt.
  A ""secret salt"" is not a salt, it is called a ""key"", and it means that you are no longer computing a hash, but a Message Authentication Code (MAC). Computing MAC is tricky business (much trickier than simply slapping together a key and a value into a hash function) and it is a very different subject altogether.
The salt must be random for every instance in which it is used. This ensures that an attacker has to attack every salted hash separately.
  If you rely on your salt (or salting algorithm) being secret, you enter the realms of Security Through Obscurity (won't work). Most probably, you do not get additional security from the salt secrecy; you just get the warm fuzzy feeling of security. So instead of making your system more secure, it just distracts you from reality.

So, why does the salt have to be random?
Technically, the salt should be unique. The point of the salt is to be distinct for each hashed password. This is meant worldwide. Since there is no central organization which distributes unique salts on demand, we have to rely on the next best thing, which is random selection with an unpredictable random generator, preferably within a salt space large enough to make collisions improbable (two instances using the same salt value).
It is tempting to try to derive a salt from some data which is ""presumably unique"", such as the user ID, but such schemes often fail due to some nasty details:

If you use for example the user ID, some bad guys, attacking distinct systems, may just pool their resources and create precomputed tables for user IDs 1 to 50. A user ID is unique system-wide but not worldwide.
The same applies to the username: there is one ""root"" per Unix system, but there are many roots in the world. A rainbow table for ""root"" would be worth the effort, since it could be applied to millions of systems. Worse yet, there are also many ""bob"" out there, and many do not have sysadmin training: their passwords could be quite weak.
Uniqueness is also temporal. Sometimes, users change their password. For each new password, a new salt must be selected. Otherwise, an attacker obtained the hash of the old password and the hash of the new could try to attack both simultaneously.

Using a random salt obtained from a cryptographically secure, unpredictable PRNG may be some kind of overkill, but at least it provably protects you against all those hazards. It's not about preventing the attacker from knowing what an individual salt is, it's about not giving them the big, fat target that will be used on a substantial number of potential targets. Random selection makes the targets as thin as is practical.

In conclusion:
Use a random, evenly distributed, high entropy salt. Use a new salt whenever you create a new password or change a password. Store the salt along with the hashed password. Favor big salts (at least 10 bytes, preferably 16 or more).
A salt does not turn a bad password into a good password. It just makes sure that the attacker will at least pay the dictionary attack price for each bad password he breaks.

Usefull sources:
stackoverflow.com: Non-random salt for password hashes
Bruce Schneier: Practical Cryptography (book)
Matasano Security: Enough with the Rainbow Tables
usenix.org: Unix crypt used salt since 1976
owasp.org: Why add salt
openwall.com: Salts 
Disclaimer:
  I'm not a security expert. (Although this answer was reviewed by Thomas Pornin)
  If any of the security professionals out there find something wrong, please do comment or edit this wiki answer.


As for what seems to be a good source for your random salt
Also read: What is the most secure seed for random number generation?
In the absence of dedicated, hardware based, random generators, the best way of obtaining random data is to ask the operating system (on Linux, this is called /dev/random or /dev/urandom [both have advantages and problems, choose your poison]; on Windows, call CryptGenRandom())  
If for some reason you do not have access to the above mentioned sources of random, in PHP you could use the following function:
From the source of phpass v0.3 
<?php
/**
 * Generate pseudo random bits
 * @copyright: public domain
 * @link http://www.openwall.com/phpass/
 * @param int $length number of bits to generate
 * @return string A string with the hexadecimal number
 * @note don't try to improve this, you will likely just ruin it
 */
function random_bits($entropy) {
    $entropy /= 8;
    $state = uniqid();
    $str = '';
    for ($i = 0; $i < $entropy; $i += 16) {
        $state = md5(microtime().$state);
        $str .= md5($state, true);
    }
    $str = unpack('H*', substr($str, 0, $entropy));
    // for some weird reason, on some machines 32 bits binary data comes out as 65! hex characters!?
    // so, added the substr
    return substr(str_pad($str[1], $entropy*2, '0'), 0, $entropy*2);
}
?>

","8152","<php><security><hash><passwords><salt>","56","83","9","2014-06-27 17:04:29","4984044","3","31","1438393","","2014-03-09 12:13:05","2011-02-13 11:45:07",""
"4983915","Is time() a good salt?","I'm looking at some code that I have not written myself. The code tries to hash a password with SHA512 and uses just time() as the salt. Is time() too simple a salt for this or is this code safe?
Thanks for the answers and comments. I will sum it up here for the new readers:

salt should be different for each user, so if 2 users register at the same time, their salts won't be unique. This is a problem, but not a big one. 
but salt shouldn't be in any way related to the user, so time() is not a good salt. 
""Use a random, evenly distributed, high entropy salt."" -- That's a mouthful, so what code could possibly generate a random, evenly distributed, high entropy salt?

Ok, so how about I replace time() with a random string 32 char long. The random string could be generated from looping 32 times over a set of alphabet chars. Does that sound good?
","Yes.
It seems that a unix timestamp, stored in the user database as a ""Member since"" field going to be decent salt.
However, salt question is most negligible one.
There are much more important things you have to pay attention to:

Most likely not a password nor salt or hashing algorithm going to be weakest part of your site. Some lame file injection or XSS or CSRF surely is. So, don't make a too big deal of it.
Speaking of a true random string of 32 char long in the typical web-application is like speaking about 32-inch armored door in the wooden barn. 
Speaking of passwords, most ever important thing is password complexity. With weak password no salt nor hashing algorithm, even super-ingenious-incredible-hard one, could help. It's a pain to ask users to use complex password, but without it everything else becomes a piece of crap.
So, your first concern should be password complexity. 12-16 characters of different case, including numbers and punctuation is a requirement. 
As for the salt, I see no benefit in using time, as you have to store it along with other user data. Better use a email - it's random enough and you have it already anyway. Don't forget to rehash a password if user changes their email.  it seems that unix timstamp going to be a decent salt, no need to use email or anything else.

Update
As I can see, many people still unable to get the point.
Like that guy from the comments, saying

Many users use weak passwords (we should educate them, or at least keep trying), but that is no excuse; they still deserve good security

They deserve, no doubt. But with weak password the mission. is. impossible.
If your password is weak, then no salt will protect it.
While salt is not that important to spend a 10-kilobyte text on the topic. 
","8152","<php><security><hash><passwords><salt>","56","1","9","2014-06-27 17:04:29","4984044","3","31","1438393","","2014-03-09 12:13:05","2011-02-13 11:45:07",""
"4983915","Is time() a good salt?","I'm looking at some code that I have not written myself. The code tries to hash a password with SHA512 and uses just time() as the salt. Is time() too simple a salt for this or is this code safe?
Thanks for the answers and comments. I will sum it up here for the new readers:

salt should be different for each user, so if 2 users register at the same time, their salts won't be unique. This is a problem, but not a big one. 
but salt shouldn't be in any way related to the user, so time() is not a good salt. 
""Use a random, evenly distributed, high entropy salt."" -- That's a mouthful, so what code could possibly generate a random, evenly distributed, high entropy salt?

Ok, so how about I replace time() with a random string 32 char long. The random string could be generated from looping 32 times over a set of alphabet chars. Does that sound good?
","the date when a member joins a forum/website is generally openly access able , which would be same as time() hence making your salt useless. 
","8152","<php><security><hash><passwords><salt>","56","0","9","2014-06-27 17:04:29","4984044","3","31","1438393","","2014-03-09 12:13:05","2011-02-13 11:45:07",""
"4983915","Is time() a good salt?","I'm looking at some code that I have not written myself. The code tries to hash a password with SHA512 and uses just time() as the salt. Is time() too simple a salt for this or is this code safe?
Thanks for the answers and comments. I will sum it up here for the new readers:

salt should be different for each user, so if 2 users register at the same time, their salts won't be unique. This is a problem, but not a big one. 
but salt shouldn't be in any way related to the user, so time() is not a good salt. 
""Use a random, evenly distributed, high entropy salt."" -- That's a mouthful, so what code could possibly generate a random, evenly distributed, high entropy salt?

Ok, so how about I replace time() with a random string 32 char long. The random string could be generated from looping 32 times over a set of alphabet chars. Does that sound good?
","This post may veer a little too far away from your original question, but I hope you find it useful;
Security is about raising barriers and hurdles; defence in depth. There is no truly secure hashing solution, just ones that are hard to break. It's like putting in a burglar alarm and window locks in your house - make your site less attractive to break into than someone else's. 
Salt for a crypt algorithm is only a small part of the security problem. A single salt simply means that there is one less thing to figure out when trying to break the password for multiple users. A low-entropy salt (such as the server's time) makes it a little bit harder, and a high-entropy salt makes it harder still. Which of these to use, and whether it's something you need to worry about primarily depends upon both the sensitivity of the data you're protecting, but also what other security measures you have in place. A site that just gives a personalised weather forecast for a selected city obviously has less sensitive data than one which has your home address, mother's maiden name, date of birth and other info which could be used for identification purposes.
So here's the rub; a high entropy salt is still a bad salt if it's easily obtainable.
In the real world, storing a salt in the database (random or not) is probably less secure than using a constant salt and burying it away from private eyes in a file inaccessible via the web browser. Whilst a unique and high entropy salt is harder to guess, if you've allowed root login from any server on MySql and set the password to 'password' it doesn't really matter! Constrast how easy it is to crack the database versus getting a valid login to your server - which is possibly more difficult to do discretely as you can put fail2ban and a plethora of other attack vector watchers in place depending upon your setup. 
You can combine the two approaches by storing the location of a file containing a user-specific salt in the database, rather than the salt itself. Whether having to crack both the file system and the database is warranted depends whether the sensitivity of the data you are trying to protect warrants this overhead. 
Another, alternative, recommendation from security experts is to store the username in a separate database (and ideally different technology) to the password, and reference between the two using a UUID. E.g. use both MySQL and SQLite. This means that both databases have to be cracked (and is also why, to go down a separate rabbit hole for the sake of an example, you should not store user details and credit card numbers in the same database since one is of no use without the other).
Note that Algorithms like SHA-512 and Blowfish can return the salt as part of their hash. Be careful with these as if you store the complete hash you give away the algorithm, which means there's two less thing for the hackers to figure out (the salt also gives away the algorithm).
Make sure you enforce strong passwords and usernames, so dictionary attacks will fail; I know of dictionaries for all 6-alphanumeric combinations of username/ password entries for MD5 and I suspect that there are more than this available for all sorts of algorithms. With the explosion of low-cost cloud and CPGPU computing, the size and complexity of available dictionaries is going to explode.
Ultimately, the most secure way is never to programatically generate a salt but require a user to enter it along with their username and password over a SSL link (so can't be snooped), but never store it. This is the approach taken by credit card companies; i.e. the 3-digit CSV security key on your credit card which you have to enter each and every time you buy online, since it should never be stored in any database. If you really want to generate the salt, send it to them separately (e.g. via SMS message or Email) and still make them enter it manually each time. With this approach, although more secure, you need to contrast the complexity against whether users will just stop using the site as you've made it too difficult for them to be bothered with it. 
All of the above still relies on the fact that you also have protection in place against session hijacking, cross-site scripting, etc., etc. The world's strongest password algorithm is irrelevant if all I need to do is to calculate a valid PHPSESSID for a logged-in user and hijack it!
I am not a security expert, but have read up on this as much as I reasonably can do. The fact that there are so many books on the subject indicates how big the answer to your question really is.
A couple of really great books you might like to try which I've found invaluable are;
Web Application Vulnerabilities Detect, Exploit, Prevent - ISBN-13: 978-1-59749-209-6
Preventing Web Attacks with Apache - ISBN-13: 978-0-321-32128-2
","8152","<php><security><hash><passwords><salt>","56","2","9","2014-06-27 17:04:29","4984044","3","31","1438393","","2014-03-09 12:13:05","2011-02-13 11:45:07",""
"4983915","Is time() a good salt?","I'm looking at some code that I have not written myself. The code tries to hash a password with SHA512 and uses just time() as the salt. Is time() too simple a salt for this or is this code safe?
Thanks for the answers and comments. I will sum it up here for the new readers:

salt should be different for each user, so if 2 users register at the same time, their salts won't be unique. This is a problem, but not a big one. 
but salt shouldn't be in any way related to the user, so time() is not a good salt. 
""Use a random, evenly distributed, high entropy salt."" -- That's a mouthful, so what code could possibly generate a random, evenly distributed, high entropy salt?

Ok, so how about I replace time() with a random string 32 char long. The random string could be generated from looping 32 times over a set of alphabet chars. Does that sound good?
","No, time() is not a good salt
It's best not to reinvent the wheel when it comes to authentication, but to answer your question, no. The problem with time():

It's predictable and it correlates to potentially discoverable things. These issues make it easier to cross-match different hashed results.
There aren't very many possible values. Since the high-order bits don't change, it's an even narrower salt than it first appears.
Using it repeats previous mistakes. If this app were the first one to use time() as a salt, at least it would require a new attack.

","8152","<php><security><hash><passwords><salt>","56","1","9","2014-06-27 17:04:29","4984044","3","31","1438393","","2014-03-09 12:13:05","2011-02-13 11:45:07",""
"4983915","Is time() a good salt?","I'm looking at some code that I have not written myself. The code tries to hash a password with SHA512 and uses just time() as the salt. Is time() too simple a salt for this or is this code safe?
Thanks for the answers and comments. I will sum it up here for the new readers:

salt should be different for each user, so if 2 users register at the same time, their salts won't be unique. This is a problem, but not a big one. 
but salt shouldn't be in any way related to the user, so time() is not a good salt. 
""Use a random, evenly distributed, high entropy salt."" -- That's a mouthful, so what code could possibly generate a random, evenly distributed, high entropy salt?

Ok, so how about I replace time() with a random string 32 char long. The random string could be generated from looping 32 times over a set of alphabet chars. Does that sound good?
","No! Never use the current time as the salt. You can use something like 'SecureRandom' in java to generate a random salt that is secure. Always use an unpredictable random number as the salt. Using time as the salt will help you to remove collisions only upto a certain extent(because two users can sypply the same passwords at the same time), but still make the passwords recoverable.
","8152","<php><security><hash><passwords><salt>","56","0","9","2014-06-27 17:04:29","4984044","3","31","1438393","","2014-03-09 12:13:05","2011-02-13 11:45:07",""
"12068821","Understanding and cracking salted sha512 hashes","On Ubuntu 12.04 I created several users and passwords, then promptly proceeded to try to crack those passwords with John the ripper.  One password is very strong, but the others are in my wordlists.
John is still running, but I've got two cracked so far in about 20 minutes.
Everything I read talks about whether the salt is known or not.  Take this hash for example:
john:$6$YiP34XiXdXyh9fZn$JrbLMb.VGncFzEyBlz5YsKUim.UE5JLPvFhfcgAH4lz.usOrh.lic8IrQx0PRMIvIIIK4KnaTs9fiEXwNOLJ1/:1003:1003:John,,,:/

The salt is:  
YiP34XiXdXyh9fZn   

, right?  I mean, isn't it always known?  So a salt really doesn't do anything but protect against using rainbow tables, right?
Also, there is this post:
How long to brute force a salted SHA-512 hash? (salt provided)
According to that, a sha512 essentially cannot be cracked at all unless the password is in a wordlist.  That post is about a year old, anyone have any new insights?  I'm finding it difficult to find good resources about cracking hashes; all the information out there is about generating hashes and protecting passwords.
","
In your example the salt is YiP34XiXdXyh9fZn (base-64 encoded).
Yes, in this case salt protects only against rainbow tables.
SHA512 still secure now. Attacker need a password list.

","8088","<ubuntu><hash><salt><password-hash>","1","1","2","2014-02-27 21:50:58","","3","1","-1","","2017-05-23 11:44:08","2012-08-22 08:07:31",""
"12068821","Understanding and cracking salted sha512 hashes","On Ubuntu 12.04 I created several users and passwords, then promptly proceeded to try to crack those passwords with John the ripper.  One password is very strong, but the others are in my wordlists.
John is still running, but I've got two cracked so far in about 20 minutes.
Everything I read talks about whether the salt is known or not.  Take this hash for example:
john:$6$YiP34XiXdXyh9fZn$JrbLMb.VGncFzEyBlz5YsKUim.UE5JLPvFhfcgAH4lz.usOrh.lic8IrQx0PRMIvIIIK4KnaTs9fiEXwNOLJ1/:1003:1003:John,,,:/

The salt is:  
YiP34XiXdXyh9fZn   

, right?  I mean, isn't it always known?  So a salt really doesn't do anything but protect against using rainbow tables, right?
Also, there is this post:
How long to brute force a salted SHA-512 hash? (salt provided)
According to that, a sha512 essentially cannot be cracked at all unless the password is in a wordlist.  That post is about a year old, anyone have any new insights?  I'm finding it difficult to find good resources about cracking hashes; all the information out there is about generating hashes and protecting passwords.
","this post is really old but i want to correct this anyway.
Its not only for rainbow table attack but also for common attacks against  whole databases.
an attacker who capture an pw database wouldn't be so dumb and attack every hash separately.
He will attack them all at once.so he has to calc for example while doing a dictionary attack every hash only one time and can then compare it with all the hashes from the db. with random salt he has to calc every hash for every pw individually.
this would be slower almost by a factor of the number of hashes.
salted big databases are much harder to attack then plain hash dbs.
","8088","<ubuntu><hash><salt><password-hash>","1","1","2","2014-02-27 21:50:58","","3","1","-1","","2017-05-23 11:44:08","2012-08-22 08:07:31",""
"8658584","Spring Security salt for custom UserDetails","I would like to add salt like:
PasswordEncoder encoder = new ShaPasswordEncoder();
        userDetails.setPassword(encoder.encodePassword(userDetails.getPassword(),saltSource.getSalt(userDetails));

as far userDetails is instance of my custom UserDetail class,i obliged to cast it to this spring class:UserDetails
,but as it's logically expected i got in Runtime:
java.lang.ClassCastException: model.UserDetails cannot be cast to org.springframework.security.core.userdetails.UserDetails

config:
<beans:bean id=""saultSource"" class=""org.springframework.security.authentication.dao.ReflectionSaltSource"">
        <beans:property name=""userPropertyToUse"" value=""username""/>
</beans:bean>

<authentication-manager alias=""authenticationManager"">
<authentication-provider>
<password-encoder hash=""sha"">
    <salt-source user-property=""username""/>
</password-encoder>
    <jdbc-user-service data-source-ref=""dataSource""/>
</authentication-provider>
</authentication-manager>

How can I configure salt correctly in this case?
","ReflectionSaltSource only works with a UserDetails object (I'm assuming that's where you get the class-cast exception?), so you would have to either implement UserDetails or create your own SaltSource implementation which works with your object. 
However, I wouldn't use a property of the user as the salt unless you are working with a legacy system which already does this. The username is not a very good salt value. It's much better to use a random salt which is stored with the password. A good example is the BCrypt algorithm. See my answer to this question for an example of using it with Spring Security 3.1. As explained there, BCrypt automatically generates a random salt which it stores in the same string as the hashed password.
Note that there is actually a new PasswordEncoder interface in the Spring Security 3.1 ""crypto"" package (in org.springframework.security.crypto.password). This doesn't include a salt in the API methods, since it assumes the salt is internally generated (as it is with the BCrypt implementation). The framework will generally accept one of these or the legacy org.springframework.security.authentication.encoding.PasswordEncoder.
","8039","<configuration><spring-security><salt><details>","6","3","3","2012-07-05 01:11:20","8662496","0","1","","","","2011-12-28 16:32:38",""
"8658584","Spring Security salt for custom UserDetails","I would like to add salt like:
PasswordEncoder encoder = new ShaPasswordEncoder();
        userDetails.setPassword(encoder.encodePassword(userDetails.getPassword(),saltSource.getSalt(userDetails));

as far userDetails is instance of my custom UserDetail class,i obliged to cast it to this spring class:UserDetails
,but as it's logically expected i got in Runtime:
java.lang.ClassCastException: model.UserDetails cannot be cast to org.springframework.security.core.userdetails.UserDetails

config:
<beans:bean id=""saultSource"" class=""org.springframework.security.authentication.dao.ReflectionSaltSource"">
        <beans:property name=""userPropertyToUse"" value=""username""/>
</beans:bean>

<authentication-manager alias=""authenticationManager"">
<authentication-provider>
<password-encoder hash=""sha"">
    <salt-source user-property=""username""/>
</password-encoder>
    <jdbc-user-service data-source-ref=""dataSource""/>
</authentication-provider>
</authentication-manager>

How can I configure salt correctly in this case?
","Your model.UserDetails class must implement the interface org.springframework.security.core.userdetails.UserDetails - it does not need to be a class org.springframework.security.core.userdetails.User.
You can also have a look at this answer to see how to set up a ReflectionSaltSource for both encoding and decoding passwords, or help You get the bigger picture to follow Luke's great tip on BCryptPasswordEncoder.
","8039","<configuration><spring-security><salt><details>","6","1","3","2012-07-05 01:11:20","8662496","0","1","","","","2011-12-28 16:32:38",""
"8658584","Spring Security salt for custom UserDetails","I would like to add salt like:
PasswordEncoder encoder = new ShaPasswordEncoder();
        userDetails.setPassword(encoder.encodePassword(userDetails.getPassword(),saltSource.getSalt(userDetails));

as far userDetails is instance of my custom UserDetail class,i obliged to cast it to this spring class:UserDetails
,but as it's logically expected i got in Runtime:
java.lang.ClassCastException: model.UserDetails cannot be cast to org.springframework.security.core.userdetails.UserDetails

config:
<beans:bean id=""saultSource"" class=""org.springframework.security.authentication.dao.ReflectionSaltSource"">
        <beans:property name=""userPropertyToUse"" value=""username""/>
</beans:bean>

<authentication-manager alias=""authenticationManager"">
<authentication-provider>
<password-encoder hash=""sha"">
    <salt-source user-property=""username""/>
</password-encoder>
    <jdbc-user-service data-source-ref=""dataSource""/>
</authentication-provider>
</authentication-manager>

How can I configure salt correctly in this case?
","I've written a blog post about some of these details here: http://rtimothy.tumblr.com/post/26527448708/spring-3-1-security-and-salting-passwords
Luke wrote the code so he certainly knows what he's talking about, but I see a number of people including myself having a hard time groking this information, hopefully that like will help. 
","8039","<configuration><spring-security><salt><details>","6","0","3","2012-07-05 01:11:20","8662496","0","1","","","","2011-12-28 16:32:38",""
"32375360","Hash param is missing in payU payment gateway android integration","I need to integrate payU payment gateway in my android app. But when app is trying to to get hash key it gives me error saying that 
Hash param is missing 
In demo app there are two option to generate hash 
if(null == salt) 
        generateHashFromServer(mPaymentParams);
    else 
        generateHashFromSDK(mPaymentParams, intent.getStringExtra(PayuConstants.SALT));

In demo app there are note saying that hash key generation should be done 
on server side 
so I am passing salt as null
but Now the question is Which server url I have to use to generate hash? 
Demo app is using this url 
https://payu.herokuapp.com/get_hash
","PayU money doesn't give any kind of API, So, people use a webview instead.
","7981","<android><hash><payment-gateway><salt><payu>","1","0","4","2017-09-29 18:28:55","32500376","0","0","3247264","","2015-09-04 11:11:53","2015-09-03 12:15:49",""
"32375360","Hash param is missing in payU payment gateway android integration","I need to integrate payU payment gateway in my android app. But when app is trying to to get hash key it gives me error saying that 
Hash param is missing 
In demo app there are two option to generate hash 
if(null == salt) 
        generateHashFromServer(mPaymentParams);
    else 
        generateHashFromSDK(mPaymentParams, intent.getStringExtra(PayuConstants.SALT));

In demo app there are note saying that hash key generation should be done 
on server side 
so I am passing salt as null
but Now the question is Which server url I have to use to generate hash? 
Demo app is using this url 
https://payu.herokuapp.com/get_hash
","I got solution by doing little search. 
Just generate all required hashes using own server. 
After getting all required hashes we need to make PayuHashes Obj using this hashes
and pass this Obj in intent like this
Intent intent= new Intent(this, PayUBaseActivity.class);
intent.putExtra(PayuConstants.PAYU_CONFIG, payuConfig);
intent.putExtra(PayuConstants.PAYMENT_PARAMS, mPaymentParams);
intent.putExtra(PayuConstants.PAYU_HASHES, payuHashes);
intent.putExtra(PayuConstants.SALT, salt);

PayU SDK will take care of rest
","7981","<android><hash><payment-gateway><salt><payu>","1","0","4","2017-09-29 18:28:55","32500376","0","0","3247264","","2015-09-04 11:11:53","2015-09-03 12:15:49",""
"32375360","Hash param is missing in payU payment gateway android integration","I need to integrate payU payment gateway in my android app. But when app is trying to to get hash key it gives me error saying that 
Hash param is missing 
In demo app there are two option to generate hash 
if(null == salt) 
        generateHashFromServer(mPaymentParams);
    else 
        generateHashFromSDK(mPaymentParams, intent.getStringExtra(PayuConstants.SALT));

In demo app there are note saying that hash key generation should be done 
on server side 
so I am passing salt as null
but Now the question is Which server url I have to use to generate hash? 
Demo app is using this url 
https://payu.herokuapp.com/get_hash
","You have to use your own server URL to generate hash keys.
In android app there are 3 mandatory hash keys you have to set else you will get error ""mandatory hash key is missing"".
Make sure you have set this 3 keys to payuHashes object.

payuHashes.setPaymentHash(response.getString(""payment_hash""));
payuHashes.setVasForMobileSdkHash(response.getString(""vas_for_mobile_sdk_hash""));
payuHashes.setPaymentRelatedDetailsForMobileSdkHash(response.getString(""payment_related_details_for_mobile_sdk_hash""));

Below three hashes are mandatory for payment flow and needs to be generated at merchant server:
1. Payment hash is one of the mandatory hashes that needs to be generated from merchant's server side.
Below is formula for generating payment_hash -
                                             sha512(key|txnid|amount|productinfo|firstname|email|udf1|udf2|udf3|udf4|udf5||||||SALT)

vas_for_mobile_sdk_hash is one of the mandatory hashes that needs to be generated from merchant's server side.
Below is formula for generating vas_for_mobile_sdk_hash -

sha512(key|command|var1|salt)
here, var1 will be ""default""

payment_related_details_for_mobile_sdk_hash is one of the mandatory hashes that needs to be generated from merchant's server side.
Below is formula for generating payment_related_details_for_mobile_sdk_hash -

sha512(key|command|var1|salt)
here, var1 will be user credentials. If you are not using user_credentials then use ""default"".
Refer sample sdk from here: 
https://github.com/payu-intrepos/Android-SDK-Sample-App/releases/
For server side code refer this:
https://github.com/payu-intrepos/Documentations/wiki/4.-Server-Side
","7981","<android><hash><payment-gateway><salt><payu>","1","0","4","2017-09-29 18:28:55","32500376","0","0","3247264","","2015-09-04 11:11:53","2015-09-03 12:15:49",""
"32375360","Hash param is missing in payU payment gateway android integration","I need to integrate payU payment gateway in my android app. But when app is trying to to get hash key it gives me error saying that 
Hash param is missing 
In demo app there are two option to generate hash 
if(null == salt) 
        generateHashFromServer(mPaymentParams);
    else 
        generateHashFromSDK(mPaymentParams, intent.getStringExtra(PayuConstants.SALT));

In demo app there are note saying that hash key generation should be done 
on server side 
so I am passing salt as null
but Now the question is Which server url I have to use to generate hash? 
Demo app is using this url 
https://payu.herokuapp.com/get_hash
","i hope its useful to others i found a php script for generating hash in below link
https://docs.google.com/document/d/1wby1TStudKuOtIRmUIc3ZqDVOg20mks8q5mT40i60qw/edit
<?php

function getHashes($txnid, $amount, $productinfo, $firstname, $email, $user_credentials, $udf1, $udf2, $udf3, $udf4, $udf5,$offerKey,$cardBin)
{
      // $firstname, $email can be """", i.e empty string if needed. Same should be sent to PayU server (in request params) also.
      $key = 'XXXXXX';
      $salt = 'YYYYY';

      $payhash_str = $key . '|' . checkNull($txnid) . '|' .checkNull($amount)  . '|' .checkNull($productinfo)  . '|' . checkNull($firstname) . '|' . checkNull($email) . '|' . checkNull($udf1) . '|' . checkNull($udf2) . '|' . checkNull($udf3) . '|' . checkNull($udf4) . '|' . checkNull($udf5) . '||||||' . $salt;
      $paymentHash = strtolower(hash('sha512', $payhash_str));
      $arr['payment_hash'] = $paymentHash;

      $cmnNameMerchantCodes = 'get_merchant_ibibo_codes';
      $merchantCodesHash_str = $key . '|' . $cmnNameMerchantCodes . '|default|' . $salt ;
      $merchantCodesHash = strtolower(hash('sha512', $merchantCodesHash_str));
      $arr['get_merchant_ibibo_codes_hash'] = $merchantCodesHash;

      $cmnMobileSdk = 'vas_for_mobile_sdk';
      $mobileSdk_str = $key . '|' . $cmnMobileSdk . '|default|' . $salt;
      $mobileSdk = strtolower(hash('sha512', $mobileSdk_str));
      $arr['vas_for_mobile_sdk_hash'] = $mobileSdk;

// added code for EMI hash
      $cmnEmiAmountAccordingToInterest= 'getEmiAmountAccordingToInterest';
      $emi_str = $key . '|' . $cmnEmiAmountAccordingToInterest . '|'.checkNull($amount).'|' . $salt;
      $mobileEmiString = strtolower(hash('sha512', $emi_str));
     $arr['emi_hash'] = $mobileEmiString;


      $cmnPaymentRelatedDetailsForMobileSdk1 = 'payment_related_details_for_mobile_sdk';
      $detailsForMobileSdk_str1 = $key  . '|' . $cmnPaymentRelatedDetailsForMobileSdk1 . '|default|' . $salt ;
      $detailsForMobileSdk1 = strtolower(hash('sha512', $detailsForMobileSdk_str1));
      $arr['payment_related_details_for_mobile_sdk_hash'] = $detailsForMobileSdk1;

      //used for verifying payment(optional)
      $cmnVerifyPayment = 'verify_payment';
      $verifyPayment_str = $key . '|' . $cmnVerifyPayment . '|'.$txnid .'|' . $salt;
      $verifyPayment = strtolower(hash('sha512', $verifyPayment_str));
      $arr['verify_payment_hash'] = $verifyPayment;

      if($user_credentials != NULL && $user_credentials != '')
      {
            $cmnNameDeleteCard = 'delete_user_card';
            $deleteHash_str = $key  . '|' . $cmnNameDeleteCard . '|' . $user_credentials . '|' . $salt ;
            $deleteHash = strtolower(hash('sha512', $deleteHash_str));
            $arr['delete_user_card_hash'] = $deleteHash;

            $cmnNameGetUserCard = 'get_user_cards';
            $getUserCardHash_str = $key  . '|' . $cmnNameGetUserCard . '|' . $user_credentials . '|' . $salt ;
            $getUserCardHash = strtolower(hash('sha512', $getUserCardHash_str));
            $arr['get_user_cards_hash'] = $getUserCardHash;

            $cmnNameEditUserCard = 'edit_user_card';
            $editUserCardHash_str = $key  . '|' . $cmnNameEditUserCard . '|' . $user_credentials . '|' . $salt ;
            $editUserCardHash = strtolower(hash('sha512', $editUserCardHash_str));
            $arr['edit_user_card_hash'] = $editUserCardHash;

            $cmnNameSaveUserCard = 'save_user_card';
            $saveUserCardHash_str = $key  . '|' . $cmnNameSaveUserCard . '|' . $user_credentials . '|' . $salt ;
            $saveUserCardHash = strtolower(hash('sha512', $saveUserCardHash_str));
            $arr['save_user_card_hash'] = $saveUserCardHash;

            $cmnPaymentRelatedDetailsForMobileSdk = 'payment_related_details_for_mobile_sdk';
            $detailsForMobileSdk_str = $key  . '|' . $cmnPaymentRelatedDetailsForMobileSdk . '|' . $user_credentials . '|' . $salt ;
            $detailsForMobileSdk = strtolower(hash('sha512', $detailsForMobileSdk_str));
            $arr['payment_related_details_for_mobile_sdk_hash'] = $detailsForMobileSdk;
      }


      // if($udf3!=NULL && !empty($udf3)){
            $cmnSend_Sms='send_sms';
            $sendsms_str=$key . '|' . $cmnSend_Sms . '|' . $udf3 . '|' . $salt;
            $send_sms = strtolower(hash('sha512',$sendsms_str));
            $arr['send_sms_hash']=$send_sms;
      // }


      if ($offerKey!=NULL && !empty($offerKey)) {
                  $cmnCheckOfferStatus = 'check_offer_status';
                        $checkOfferStatus_str = $key  . '|' . $cmnCheckOfferStatus . '|' . $offerKey . '|' . $salt ;
                  $checkOfferStatus = strtolower(hash('sha512', $checkOfferStatus_str));
                  $arr['check_offer_status_hash']=$checkOfferStatus;
            }


            if ($cardBin!=NULL && !empty($cardBin)) {
                  $cmnCheckIsDomestic = 'check_isDomestic';
                        $checkIsDomestic_str = $key  . '|' . $cmnCheckIsDomestic . '|' . $cardBin . '|' . $salt ;
                  $checkIsDomestic = strtolower(hash('sha512', $checkIsDomestic_str));
                  $arr['check_isDomestic_hash']=$checkIsDomestic;
            }



    return $arr;
}

function checkNull($value) {
            if ($value == null) {
                  return '';
            } else {
                  return $value;
            }
      }

$output=getHashes($_POST[""txnid""], $_POST[""amount""], $_POST[""productinfo""], $_POST[""firstname""], $_POST[""email""], $_POST[""user_credentials""], $_POST[""udf1""], $_POST[""udf2""], $_POST[""udf3""], $_POST[""udf4""], $_POST[""udf5""],$_POST[""offerKey""],$_POST[""cardBin""]);

echo json_encode($output);

?>

copy the php code and edit key and salt.
","7981","<android><hash><payment-gateway><salt><payu>","1","0","4","2017-09-29 18:28:55","32500376","0","0","3247264","","2015-09-04 11:11:53","2015-09-03 12:15:49",""
"616545","PHP Sessions + Useragent with salt","It keeps running in my mind the last couple of days, but I read some articles about how to make your PHP sessions more secure. Almost all of these articles say that you need to save the useragent in the session WITH an additional salt. Something like this:
$fingerprint = md5('SECRET-SALT'.$_SERVER['HTTP_USER_AGENT']);

The salt would make it harder for an attacker to hijack or whatever the session. But WHY add a salt every time you would check it like this:
md5('SECRET-SALT'.$_SERVER['HTTP_USER_AGENT']) == $_SESSION [ 'fingerprint' ]

So WHY would a salt make it more secure, since the attacker still only needs the useragent (which is relativly a small set of different useragents) and the sessionid?
Probably something small I'm overlooking, but can't figure it out, drives me crazy haha
Thanks!
","I do that as well to partially protect from session impersonation attacks. You need to include the IP address as well.
Keep in mind that when the client's browser auto updates the user agent changes and you'll think that his session has been hijacked ;)
","7973","<php><user-agent><salt><session-hijacking>","4","0","8","2018-07-19 18:11:00","","0","5","425738","Gumbo","2018-07-19 18:11:00","2009-03-05 20:49:26",""
"616545","PHP Sessions + Useragent with salt","It keeps running in my mind the last couple of days, but I read some articles about how to make your PHP sessions more secure. Almost all of these articles say that you need to save the useragent in the session WITH an additional salt. Something like this:
$fingerprint = md5('SECRET-SALT'.$_SERVER['HTTP_USER_AGENT']);

The salt would make it harder for an attacker to hijack or whatever the session. But WHY add a salt every time you would check it like this:
md5('SECRET-SALT'.$_SERVER['HTTP_USER_AGENT']) == $_SESSION [ 'fingerprint' ]

So WHY would a salt make it more secure, since the attacker still only needs the useragent (which is relativly a small set of different useragents) and the sessionid?
Probably something small I'm overlooking, but can't figure it out, drives me crazy haha
Thanks!
","As the fingerprint is stored on the server side, you don’t need to use a salted hash. A “normal” hash is enough to reduce the data.
","7973","<php><user-agent><salt><session-hijacking>","4","0","8","2018-07-19 18:11:00","","0","5","425738","Gumbo","2018-07-19 18:11:00","2009-03-05 20:49:26",""
"616545","PHP Sessions + Useragent with salt","It keeps running in my mind the last couple of days, but I read some articles about how to make your PHP sessions more secure. Almost all of these articles say that you need to save the useragent in the session WITH an additional salt. Something like this:
$fingerprint = md5('SECRET-SALT'.$_SERVER['HTTP_USER_AGENT']);

The salt would make it harder for an attacker to hijack or whatever the session. But WHY add a salt every time you would check it like this:
md5('SECRET-SALT'.$_SERVER['HTTP_USER_AGENT']) == $_SESSION [ 'fingerprint' ]

So WHY would a salt make it more secure, since the attacker still only needs the useragent (which is relativly a small set of different useragents) and the sessionid?
Probably something small I'm overlooking, but can't figure it out, drives me crazy haha
Thanks!
","Bear in mind that if you do that you're forcing people to login again if they upgrade their browser.  This can be OK but just make sure it's your intent.
Using the user's remote address is not without problems either.  Many people use the same computer from different locations.  Mobile devices, laptops being used at home and work, laptops being used at Wifi hotspots and so on.  IMHO it's a bad idea to use IP address in such a way that a new IP address requires a login unless you're dealing with highly sensitive information such as online banking.  Is that the case?
What are you concerned about?  External attack?  Or in a shared host situation that someone can read your session information?
If it's the latter, the solution is simple: just don't store anything sensitive in the session.  Anything sensitive should be stored in the database.
In terms of creating a secret salt, you need to use something that isn't guessable.  I would go for something like a random string that's created when the user is created.  If necessary recreate it each time the session is invalidated.
As for what it would make it more secure, you said it yourself: there are limited user agent strings (less than a hundred will probably cover 99.99% of users).  A salt simply increases the number of possibilities.  That being said, if you use the same salt for all sessions then it's only a matter of time before it's found with brute force.
","7973","<php><user-agent><salt><session-hijacking>","4","0","8","2018-07-19 18:11:00","","0","5","425738","Gumbo","2018-07-19 18:11:00","2009-03-05 20:49:26",""
"616545","PHP Sessions + Useragent with salt","It keeps running in my mind the last couple of days, but I read some articles about how to make your PHP sessions more secure. Almost all of these articles say that you need to save the useragent in the session WITH an additional salt. Something like this:
$fingerprint = md5('SECRET-SALT'.$_SERVER['HTTP_USER_AGENT']);

The salt would make it harder for an attacker to hijack or whatever the session. But WHY add a salt every time you would check it like this:
md5('SECRET-SALT'.$_SERVER['HTTP_USER_AGENT']) == $_SESSION [ 'fingerprint' ]

So WHY would a salt make it more secure, since the attacker still only needs the useragent (which is relativly a small set of different useragents) and the sessionid?
Probably something small I'm overlooking, but can't figure it out, drives me crazy haha
Thanks!
","The reason that it's suggested to add a salt is simple. Generally, when you're creating this ""fingerprint"" - if you're using only one item of data, which has a limited dataset, then it makes it easier for an outside hacker to generate this, and hijack the session.
In your example above, yes, if the attacker has both the ""fingerprint"" and the User agent, then they will be able to hijack the session.
Adding a salt only makes it harder for an attacker to generate the fingerprint, it's a case of ""if they have all but one piece of information, then the last piece of information is rendered useless)
I'd suggest that you add some more things in, for example, within vBulletin (a project I used to work on) the session ID hash (which is basically the same as the fingerprint) is generated with the following code.
define('SESSION_IDHASH', md5($_SERVER['HTTP_USER_AGENT'] . $this->fetch_substr_ip($registry->alt_ip))); // this should *never* change during a session

Also, a session hash is generated using
md5(uniqid(microtime(), true));

These are both checked when trying to identify the session
So, to hijack the session, the person would need to know the following

The time (exactly) on the server when the session was created
The users Browser agent string
The user's IP address

They would also have to spoof the IP address (or at least the first 2/3 octets) to be able to do this.
If they're actually at a point where they've managed to get the above information, then they're probably likely to be able to attack in other ways than just session hijacking.
vBulletin don't actually use a ""salt"" per se, but, in your above example, the salt is just adding a limited amount of entropy, it's always best to find as much entropy as possible.
For example, in something I'm currently writing in python, I generate a hash for usage with XSRF protection. The following is what I use.
    self.key = sha1(
        self.user.username +
        self.user.password +
        settings.SECRET_KEY +
        strftime(""%a, %d %b %Y %H:%M:%S +0000"", gmtime())
    ).hexdigest()

Which takes the user's username and password, the current time, and a preset salt to generate this. This would be hard for an attacker to generate due to the salt, and the time (though, do note that this is only made secure by the fact that it changes once it's used, with time, it wouldn't take much for someone to crack this for a particular user if it wasnt changing)
","7973","<php><user-agent><salt><session-hijacking>","4","7","8","2018-07-19 18:11:00","","0","5","425738","Gumbo","2018-07-19 18:11:00","2009-03-05 20:49:26",""
"616545","PHP Sessions + Useragent with salt","It keeps running in my mind the last couple of days, but I read some articles about how to make your PHP sessions more secure. Almost all of these articles say that you need to save the useragent in the session WITH an additional salt. Something like this:
$fingerprint = md5('SECRET-SALT'.$_SERVER['HTTP_USER_AGENT']);

The salt would make it harder for an attacker to hijack or whatever the session. But WHY add a salt every time you would check it like this:
md5('SECRET-SALT'.$_SERVER['HTTP_USER_AGENT']) == $_SESSION [ 'fingerprint' ]

So WHY would a salt make it more secure, since the attacker still only needs the useragent (which is relativly a small set of different useragents) and the sessionid?
Probably something small I'm overlooking, but can't figure it out, drives me crazy haha
Thanks!
","If I understand correctly, you want to prevent session hijacking by a remote attacker that guesses session IDs?
If this is not the case, then you are seriously out of your depth - an attacker that can snoop the traffic can also mimic the user agent, and an attacker that gains access to your session storage has you by the balls anyway.
If you store the user agent string to ""lock"" the session to the current user agent, then there is really no point in hashing it - string comparison on the full user agent string is faster (then hashing and then comparing) and not significantly more expensive in terms of storage.
I don't believe storing the user agent is providing enough differentiation - something better would be to generate a larger ID (with more bits) at session start time (maybe sha1 the current time stamp + user name + user agent + something), then store that in a cookie as well as in the session and match it up on each additional request. This doesn't change the attack vector much (you still need to guess some number), but its easy to significantly increase the number of bits that must be guess for a successful attack there by massively increasing the difficulty of the attack.
","7973","<php><user-agent><salt><session-hijacking>","4","2","8","2018-07-19 18:11:00","","0","5","425738","Gumbo","2018-07-19 18:11:00","2009-03-05 20:49:26",""
"616545","PHP Sessions + Useragent with salt","It keeps running in my mind the last couple of days, but I read some articles about how to make your PHP sessions more secure. Almost all of these articles say that you need to save the useragent in the session WITH an additional salt. Something like this:
$fingerprint = md5('SECRET-SALT'.$_SERVER['HTTP_USER_AGENT']);

The salt would make it harder for an attacker to hijack or whatever the session. But WHY add a salt every time you would check it like this:
md5('SECRET-SALT'.$_SERVER['HTTP_USER_AGENT']) == $_SESSION [ 'fingerprint' ]

So WHY would a salt make it more secure, since the attacker still only needs the useragent (which is relativly a small set of different useragents) and the sessionid?
Probably something small I'm overlooking, but can't figure it out, drives me crazy haha
Thanks!
","Okay, for example I'm using the following fictional code:
<?php

// The sessionid cookie is now a certain hash
if ( array_key_exists ( $_COOKIE [ 'sessionid' ] ) )
{
    // Get the session from database
    $db_sessid = $pdo -> getStuff ( 'session_database', $_COOKIE [ 'sessionid' ] );

    if ( $db_sessid !== null && $db_sessid [ 'fingerprint' ] == sha1 ( 'SOMESALT' . $_SERVER [ 'HTTP_USER_AGENT' ] ) )
    {
        set_cookie ( ... ); // New sessionid and write also to DB

        // User is now logged in, execute some user stuff
    }
    else
    {
        // Session doesn't exist, or the fingerprint does not match
    }
}

Now the attacker only still needs the sessionid, which is in the cookie (sent along HTTP headers) and the useragent. So what's still the point of the additional salt?
Checking for IP's is also in my opinion not such a good option, some providers or proxy's change them every single request.
Thanks so far (-:
","7973","<php><user-agent><salt><session-hijacking>","4","0","8","2018-07-19 18:11:00","","0","5","425738","Gumbo","2018-07-19 18:11:00","2009-03-05 20:49:26",""
"616545","PHP Sessions + Useragent with salt","It keeps running in my mind the last couple of days, but I read some articles about how to make your PHP sessions more secure. Almost all of these articles say that you need to save the useragent in the session WITH an additional salt. Something like this:
$fingerprint = md5('SECRET-SALT'.$_SERVER['HTTP_USER_AGENT']);

The salt would make it harder for an attacker to hijack or whatever the session. But WHY add a salt every time you would check it like this:
md5('SECRET-SALT'.$_SERVER['HTTP_USER_AGENT']) == $_SESSION [ 'fingerprint' ]

So WHY would a salt make it more secure, since the attacker still only needs the useragent (which is relativly a small set of different useragents) and the sessionid?
Probably something small I'm overlooking, but can't figure it out, drives me crazy haha
Thanks!
","If you are on your own server, encrypting session variables is pointless, because they don't get out of the server. See Linead answer to What do I need to store in the php session when user logged in? for more info. If you are in a shared server, you may need to encrypt every session variables, besides the session ID, because they are stored on temp files readable by the same web server all your neighbours are using. 
Anyway, if you are really worried about security, you are better with your own (virtual or not) server, so danger will only come from outside your server.
Some examples of risk to your sessions:

Your server sends the session ID in the URL, and your user follows a link to badguys.com They will get in server variables the referer (complete URL, including your session ID), the browser and the IP address of your user. If you are not checking IPs, or your user uses an open proxy, they only have to install same browser version, paste the URL, and they're done.
User go to a public PC, logins, and leave without closing his session (hey, he's human after all). Next guy in the row opens the browser, check history and finds an open session. Yuck.

So, some measures you can take, by my usual preference:

Don't send the session ID in the URL; enable session.use_only_cookies in PHP. Cons: User needs to enable cookies.


On dangerous actions (change password, make an order...), ask user for password again. You can do it periodically too. Cons: Annoying. 
Timeout sessions fast. Cons: In most sites, this will force users to login often, annoying them.
Use SSL (only way to avoid 'man in the middle' attacks). Cons: Slow. Stupid browser messages. Need SSL on server.
Check the IP. Cons: Inneffective for visitors using a public proxy. Annoying for dynamic IPs.
Check the User Agent (browser). Cons: pretty much useless, UA is easy to get and trivial to imitate.


(I take for granted you have yet PHP configured for maximum security).
Some more extreme measures:

Maintain a permanent connection between server and browser, e.g. using a Java applet. No connection, no session. Cons: User needs Java, ActiveX or whatever you use. Session closes with browser (this can be good). Doesn't work on very slow connections. Higher load on server. You need to open ports, have a special server for the applet.
The same, but using asynchronous requests (e.g. AJAX) to refresh very frequently the session, and a very short timeout. Or refreshing a hidden IFRAME. Cons: User needs JavaScript. Doesn't work on very slow connections. Higher load on server.
The same, but reloading the whole page. Cons: User needs JavaScript. An automatic reload while you are reading a page is very annoying.

In some corner cases, you can forget about sessions and use Apache authentication instead. Simplest solution, but a lot of limitations.
","7973","<php><user-agent><salt><session-hijacking>","4","3","8","2018-07-19 18:11:00","","0","5","425738","Gumbo","2018-07-19 18:11:00","2009-03-05 20:49:26",""
"616545","PHP Sessions + Useragent with salt","It keeps running in my mind the last couple of days, but I read some articles about how to make your PHP sessions more secure. Almost all of these articles say that you need to save the useragent in the session WITH an additional salt. Something like this:
$fingerprint = md5('SECRET-SALT'.$_SERVER['HTTP_USER_AGENT']);

The salt would make it harder for an attacker to hijack or whatever the session. But WHY add a salt every time you would check it like this:
md5('SECRET-SALT'.$_SERVER['HTTP_USER_AGENT']) == $_SESSION [ 'fingerprint' ]

So WHY would a salt make it more secure, since the attacker still only needs the useragent (which is relativly a small set of different useragents) and the sessionid?
Probably something small I'm overlooking, but can't figure it out, drives me crazy haha
Thanks!
","I see one purpose in salting your fingerprint. If a bad guy gets hold of your session-db (god knows why) but not of your code he couldnt ""guess"" your fingerprinting method by trying the common user-agents against it.
","7973","<php><user-agent><salt><session-hijacking>","4","1","8","2018-07-19 18:11:00","","0","5","425738","Gumbo","2018-07-19 18:11:00","2009-03-05 20:49:26",""
"1201685","How would you add salt to your existing password hashes?","I have a database of hashed passwords that had no salt added before they were hashed.  I want to add salt to new passwords.  Obviously I can't re-hash the existing ones.
How would you migrate to a new hashing system?
","Sure you can. Just add a salt to the existing hash and hash it again. Of course this will require any future logins to go through the same process meaning two hash functions will need to be called but lots of legitimate patterns do this anyway so it doesn't smell as bad as you might think.
Salting a password is an effort to defend against rainbow tables. In this case the salt does not need to be a secret.
http://en.wikipedia.org/wiki/Rainbow_tables#Defense_against_rainbow_tables
You can actually see in the article 
hash = MD5 (MD5 (password) . salt)

Which is the same exact method you would be using. (Except a different hashing function.)
","7758","<security><migration><passwords><salt>","12","31","8","2010-02-03 17:39:09","1201711","2","4","","","","2009-07-29 17:01:49",""
"1201685","How would you add salt to your existing password hashes?","I have a database of hashed passwords that had no salt added before they were hashed.  I want to add salt to new passwords.  Obviously I can't re-hash the existing ones.
How would you migrate to a new hashing system?
","You could add a column, consisting of a flag showing whether the user has an old (no salt) or a new (with salt) hash.
A good idea is, at that point, to force all users to change their passwords upon sign in. This way you can get rid of that column eventually.
","7758","<security><migration><passwords><salt>","12","2","8","2010-02-03 17:39:09","1201711","2","4","","","","2009-07-29 17:01:49",""
"1201685","How would you add salt to your existing password hashes?","I have a database of hashed passwords that had no salt added before they were hashed.  I want to add salt to new passwords.  Obviously I can't re-hash the existing ones.
How would you migrate to a new hashing system?
","As a quick fix, you could create a salt column in the database, and when a user logs in correctly matching the old hash, you can then use that password that they entered with a salt and create a new hash.
","7758","<security><migration><passwords><salt>","12","14","8","2010-02-03 17:39:09","1201711","2","4","","","","2009-07-29 17:01:49",""
"1201685","How would you add salt to your existing password hashes?","I have a database of hashed passwords that had no salt added before they were hashed.  I want to add salt to new passwords.  Obviously I can't re-hash the existing ones.
How would you migrate to a new hashing system?
","There are some ways here that may work for you.
Remember, any constant pattern you add into the existing hash is useless (one of the tricks on that link is suggesting something like that). There should be no identifiable pattern that can be used to isolate the salt.
Of course, the best way would be to migrate to a salted hash table.
","7758","<security><migration><passwords><salt>","12","0","8","2010-02-03 17:39:09","1201711","2","4","","","","2009-07-29 17:01:49",""
"1201685","How would you add salt to your existing password hashes?","I have a database of hashed passwords that had no salt added before they were hashed.  I want to add salt to new passwords.  Obviously I can't re-hash the existing ones.
How would you migrate to a new hashing system?
","Create a new field in you're database named ""salted"" with a type of true/false (or whatever the equivalent is in your DBMS). Set all the values to false for the existing hashes. Whenever a new, salted, hash is added, set the ""salted"" field to true.
Then, all you have to do is handle the two types of hashes differently in your code.
This is more of a general solution than a specific one, but it should solve your problem.
","7758","<security><migration><passwords><salt>","12","0","8","2010-02-03 17:39:09","1201711","2","4","","","","2009-07-29 17:01:49",""
"1201685","How would you add salt to your existing password hashes?","I have a database of hashed passwords that had no salt added before they were hashed.  I want to add salt to new passwords.  Obviously I can't re-hash the existing ones.
How would you migrate to a new hashing system?
","If you are storing the salt inside the hash, it should be fairly straight forward to determine if a salt is included by checking the length of the hash.  If there isn't a salt, just hash the password, if there is a salt, hash the password + salt.
You shouldn't need a boolean column in your database.
","7758","<security><migration><passwords><salt>","12","0","8","2010-02-03 17:39:09","1201711","2","4","","","","2009-07-29 17:01:49",""
"1201685","How would you add salt to your existing password hashes?","I have a database of hashed passwords that had no salt added before they were hashed.  I want to add salt to new passwords.  Obviously I can't re-hash the existing ones.
How would you migrate to a new hashing system?
","The best way I store my salt is that I embed the salt value within the password hash + salt I have just created.  I don't append the salt string to the beginning or end of the hash, I literally embed the salt into the hash.
","7758","<security><migration><passwords><salt>","12","0","8","2010-02-03 17:39:09","1201711","2","4","","","","2009-07-29 17:01:49",""
"1201685","How would you add salt to your existing password hashes?","I have a database of hashed passwords that had no salt added before they were hashed.  I want to add salt to new passwords.  Obviously I can't re-hash the existing ones.
How would you migrate to a new hashing system?
","I dealt with a similar issue involving multiple hashing techniques. I used the approach of encoding a hash method type in the database as well (i.e. 'alpha', 'beta', 'gamma', 'delta'). I marked all current hashes with the appropriate level. As users logged in, I validated their passwords and re-hashed them using the updated methods. Our passwords expire after 90 days, so it was just a matter of holding on for 3 months until all passwords using the old methods could be reset.
","7758","<security><migration><passwords><salt>","12","1","8","2010-02-03 17:39:09","1201711","2","4","","","","2009-07-29 17:01:49",""
"24181822","How to hash with salt then unhash in asp.net C#","I have this asp.net project that I need to hash the password (preferably with salt) and save it in sql database then unhash it for comparing with the login password or sth like that....
the thing is I'm not sure what is the best way to do it in a most secure way and how can I code this in C#?
","You do not unhash. That's the point of hashing: it cannot be reversed.
You look up the salt, then you hash the password that they entered together with the salt. If the hash is the same as the hash in the database, it's a valid login.
Maybe take a look here:
Salted password hashing
","7251","<c#><asp.net><hash><salt>","-1","4","2","2014-06-12 12:04:00","24182014","2","","","","","2014-06-12 10:11:05","2014-08-11 18:22:31"
"24181822","How to hash with salt then unhash in asp.net C#","I have this asp.net project that I need to hash the password (preferably with salt) and save it in sql database then unhash it for comparing with the login password or sth like that....
the thing is I'm not sure what is the best way to do it in a most secure way and how can I code this in C#?
","First of all you cannot recover the hashed data. Its one way process. But you can match hashed data. To do so check the code given below :
Do this inside your button click event 
string salt = GetSalt(10); // 10 is the size of Salt 
string hashedPass = HashPassword(salt, Password.Text);

This are the functions that will help your to hash the password
const string alphanumeric = ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890"";

     public static string GetSalt(int saltSize)
            {
                Random r = new Random();
                StringBuilder strB = new StringBuilder("""");

                while ((saltSize--) > 0)
                    strB.Append(alphanumeric[(int)(r.NextDouble() * alphanumeric.Length)]);
                return strB.ToString();
            }

    public static string HashPassword(string salt, string password)
            {
                string mergedPass = string.Concat(salt, password);
                return EncryptUsingMD5(mergedPass);
            }

    public static string EncryptUsingMD5(string inputStr)
            {
                using (MD5 md5Hash = MD5.Create())
                {
                    // Convert the input string to a byte array and compute the hash.
                    byte[] data = md5Hash.ComputeHash(Encoding.UTF8.GetBytes(inputStr));

                    // Create a new Stringbuilder to collect the bytes
                    // and create a string.
                    StringBuilder sBuilder = new StringBuilder();

                    // Loop through each byte of the hashed data 
                    // and format each one as a hexadecimal string.
                    for (int i = 0; i < data.Length; i++)
                        sBuilder.Append(data[i].ToString(""x2""));

                    // Return the hexadecimal string.
                    return sBuilder.ToString();
                }
            }

Similarly, when you try to match the password to authenticate the user, perform the same method just fetch your hashed password from your database and compare them. If the entered hashed password matches the database hashed password, its an authorized user.
Updated :


When you hash the password of the user for the first time and then store into database in the same table store the salt for that user. 
Next time when you try to compare the password, fetch that salt of the user from the database and hash it using to compare with the
  hashed password in the database.


Hope that answers your Question. 
","7251","<c#><asp.net><hash><salt>","-1","3","2","2014-06-12 12:04:00","24182014","2","","","","","2014-06-12 10:11:05","2014-08-11 18:22:31"
"10139954","Does has_secure_password use any form of salting?","I want to use has_secure_password to store encrypted passwords in the database. I can't find on the the internet if has_secure_password uses any form of salting. If it uses salting, how does it works? Can anyone clarify this for me?
Thijs
","has_secure_password uses bcrypt-ruby. bcrypt-ruby automatically handles the storage and generation of salts for you. A typical hash from bcrypt-ruby looks like this: $2a$10$4wXszTTd7ass8j5ZLpK/7.ywXXgDh7XPNmzfIWeZC1dMGpFghd92e. This hash is split internally using the following function:
def split_hash(h)
  _, v, c, mash = h.split('$')
  return v, c.to_i, h[0, 29].to_str, mash[-31, 31].to_str
end

For the example hash this function yields:

version: 2a
cost: 10
salt: $2a$10$4wXszTTd7ass8j5ZLpK/7.
hash: ywXXgDh7XPNmzfIWeZC1dMGpFghd92e

The ==-function of BCrypt::Password extracts the salt and applies it to the passed string:
BCrypt::Password.create('bla') == 'bla' # => true

","7225","<ruby-on-rails><encryption><passwords><salt>","67","87","1","2017-08-15 17:35:07","10143302","0","6","380301","","2012-11-24 19:09:11","2012-04-13 11:27:39",""
"10662834","How to change SHA1 and SALT encrypted passwords in table","I have table in mysql which contain fields id, username, password and salt:
Example:
id :       1
username : admin  
password : 11ca8949f9462890f2535c9a43ac52b8c10a9342 
salt :     8d17f0de29daed0f3b4cd38f980683d01ec50729
There are no. of records like this.
My question is : How can I change the passwords of all the users in that table.
I want to create a new password for each user. Which means I need a new SHA1 hash and salt. How can I do this.
Thanks
","If you don't have the original passwords in plaintext in the DB (and you certainly shouldn't!), it's not going to be a one-step process.
What you'll need to do is add another column, and give it a name like ""hashtype"" - this name indicates whether or not an entry has been upgraded from the old hash to the new one.
Then in your login code, after the user submits their password and it hashes correctly against the stored db hash, use the user-entered password to generate a new hash per your new method, update the hash in the db, and set hashtype to new. 
Otherwise, you can do something crazy like clear all users passwords and force a password reset via email or something.
","7188","<php><zend-framework><sha1><salt>","0","1","3","2012-06-05 05:28:22","10892053","2","0","","","","2012-05-19 06:18:45",""
"10662834","How to change SHA1 and SALT encrypted passwords in table","I have table in mysql which contain fields id, username, password and salt:
Example:
id :       1
username : admin  
password : 11ca8949f9462890f2535c9a43ac52b8c10a9342 
salt :     8d17f0de29daed0f3b4cd38f980683d01ec50729
There are no. of records like this.
My question is : How can I change the passwords of all the users in that table.
I want to create a new password for each user. Which means I need a new SHA1 hash and salt. How can I do this.
Thanks
","Assuming that you want everyone to have the same fixed password, and the hash consists just of the SHA1 checksum of the concatenated password and salt, this would be all it takes:
UPDATE users SET password = SHA1(CONCAT('newpassword', salt));

This keeps the original salt (which is not really a problem), but of course it's horridly insecure to give everyone the same password. If you want to generate a different password for every user, you'll need code to generate and send it to them individually, and that code might as well update each individual user's hashed password entry as well. 
Alternatively, you could temporarily add a column 'newpassword', use an UPDATE command similar to the above which uses that column, then drop it. But that doesn't solve the question of how to get the new password to the users.
","7188","<php><zend-framework><sha1><salt>","0","3","3","2012-06-05 05:28:22","10892053","2","0","","","","2012-05-19 06:18:45",""
"10662834","How to change SHA1 and SALT encrypted passwords in table","I have table in mysql which contain fields id, username, password and salt:
Example:
id :       1
username : admin  
password : 11ca8949f9462890f2535c9a43ac52b8c10a9342 
salt :     8d17f0de29daed0f3b4cd38f980683d01ec50729
There are no. of records like this.
My question is : How can I change the passwords of all the users in that table.
I want to create a new password for each user. Which means I need a new SHA1 hash and salt. How can I do this.
Thanks
","If you have login code then you can debug it and check it how it's working. Create appropriate script for it and update the password using following query.
update be_users set password=SHA1( CONCAT(  '$sha1',  '$newsalt' )), salt='your salt' where username='your username';

Try this
","7188","<php><zend-framework><sha1><salt>","0","1","3","2012-06-05 05:28:22","10892053","2","0","","","","2012-05-19 06:18:45",""
"11006895","How does salt work in Rails' has_secure_password","From what I understand from salting to make an encrypted password more secure, I would generate a random number (the salt) and store it along side the hashed password, in the user record (for example.) I would concatenate the salt with the plaintext password and then encrypt it (hash). The resulting hash would be much more difficult to crack. This process would be repeated to verify the password.
Looking at has_secure_password and bcrypt_ruby (disclosure: I am not a security expert) I don't see how that is done, as the only thing stored in the user record is the hashed password. Where's the salt?
","The password hash and salt are saved in a string column called password_digest in the database. See this question.
","7008","<ruby-on-rails><ruby><security><salt>","13","8","1","2013-01-24 20:13:05","","3","1","377270","","2012-06-13 01:08:08","2012-06-13 00:58:11",""
"21996192","PHP salt encrypt/decrypt password","I'm trying to make register and log in forms having salt encryption, and I'm not really familiar with it. So everything is working except that log in can't recognize password so I'm pretty sure it's encryption problem. These are lines for register:
$hash = hash('sha256', $password1);
function createSalt()
{
$text = md5(uniqid(rand(), true));
return substr($text, 0, 3);
}
$salt = createSalt();
$password = hash('sha256', $salt . $hash);

and these are for login:
$userData = mysql_fetch_array($result, MYSQL_ASSOC);
$hash = hash('sha256', $userData['salt'] . hash('sha256', $password) );
if($hash != $userData['password'])
{
echo ""Incorrect password"";
}

Can anybody point the problem. Thanks!
","There are quite a few things wrong with this. For starters: Are you storing the salt with the password? If not, then passwords become unverifiable.
Security considerations:
hash('sha256', ... is insufficient; consider bcrypt, scrypt, or pbkdf2

https://github.com/DomBlack/php-scrypt
http://us2.php.net/password_hash
https://defuse.ca/php-pbkdf2.htm

$text = md5(uniqid(rand(), true)); Ever heard of openssl_random_pseudo_bytes()?
(Also, you shouldn't seek to decrypt passwords, only verify them.)
If you're not familiar with these concepts, play it safe and use a tried and true library.
","6795","<php><encryption><login><salt>","0","0","2","2014-05-08 16:20:45","","0","","","","","2014-02-24 18:40:16",""
"21996192","PHP salt encrypt/decrypt password","I'm trying to make register and log in forms having salt encryption, and I'm not really familiar with it. So everything is working except that log in can't recognize password so I'm pretty sure it's encryption problem. These are lines for register:
$hash = hash('sha256', $password1);
function createSalt()
{
$text = md5(uniqid(rand(), true));
return substr($text, 0, 3);
}
$salt = createSalt();
$password = hash('sha256', $salt . $hash);

and these are for login:
$userData = mysql_fetch_array($result, MYSQL_ASSOC);
$hash = hash('sha256', $userData['salt'] . hash('sha256', $password) );
if($hash != $userData['password'])
{
echo ""Incorrect password"";
}

Can anybody point the problem. Thanks!
","Actually your code should work as far as i can see, though it is very unsafe!

Problem: SHA256 is not appropriate to hash passwords, because it is ways too fast. Use a slow key-derivation function like BCrypt.
Problem: A three character salt with only letters is nearly no protection.

Maybe your database field is smaller than 64 characters, or you are comparing different passwords. In every case there is an easier and safer way to hash passwords, just use the new functions password_hash() and password_verify(). There exists also a compatibility pack for earlier PHP versions.
// Hash a new password for storing in the database.
// The function automatically generates a cryptographically safe salt.
$hashToStoreInDb = password_hash($password, PASSWORD_BCRYPT);

// Check if the hash of the entered login password, matches the stored hash.
// The salt and the cost factor will be extracted from $existingHashFromDb.
$isPasswordCorrect = password_verify($password, $existingHashFromDb);

","6795","<php><encryption><login><salt>","0","2","2","2014-05-08 16:20:45","","0","","","","","2014-02-24 18:40:16",""
"21565369","How to encrypt and salt the password using BouncyCastle API in Java?","I am fairly new to cryptography and I am using BouncyCasetle API to encrypt password and store it in the database. For encryption I am using SHA-1 algorithm and I want to salt the password to prevent it agains dictionary attacks.
Any help would be appreciated.
","Well what you could do is get a:
StringBuilder salt=new StringBuilder();
salt.append(""MySuperSecretSalt"");
MessageDigest md = MessageDigest.getInstance(""SHA-256"");
String text = ""This is text to hash"";
salt.append(text);    
md.update(salt.toString().getBytes(""UTF-8"")); // Change this to ""UTF-16"" if needed
byte[] digest = md.digest();

Your, digest now contains the hash of your string+salt so it help with protecting against rainbow tables.
","6734","<java><encryption><bouncycastle><salt>","2","1","2","2014-02-04 23:40:15","21565874","4","8","1628280","","2014-02-04 23:07:52","2014-02-04 23:00:22",""
"21565369","How to encrypt and salt the password using BouncyCastle API in Java?","I am fairly new to cryptography and I am using BouncyCasetle API to encrypt password and store it in the database. For encryption I am using SHA-1 algorithm and I want to salt the password to prevent it agains dictionary attacks.
Any help would be appreciated.
","I'd recommend use of a Password-Based Key Derivation Function instead of a basic hash function for this.  Something like this:
// tuning parameters

// these sizes are relatively arbitrary
int seedBytes = 20;
int hashBytes = 20;

// increase iterations as high as your performance can tolerate
// since this increases computational cost of password guessing
// which should help security
int iterations = 1000;

// to save a new password:

SecureRandom rng = new SecureRandom();
byte[] salt = rng.generateSeed(seedBytes);

Pkcs5S2ParametersGenerator kdf = new Pkcs5S2ParametersGenerator();
kdf.init(passwordToSave.getBytes(""UTF-8""), salt, iterations);

byte[] hash =
    ((KeyParameter) kdf.generateDerivedMacParameters(8*hashBytes)).getKey();

// now save salt and hash

// to check a password, given the known previous salt and hash:

kdf = new Pkcs5S2ParametersGenerator();
kdf.init(passwordToCheck.getBytes(""UTF-8""), salt, iterations);

byte[] hashToCheck =
    ((KeyParameter) kdf.generateDerivedMacParameters(8*hashBytes)).getKey();

// if the bytes of hashToCheck don't match the bytes of hash
// that means the password is invalid

","6734","<java><encryption><bouncycastle><salt>","2","8","2","2014-02-04 23:40:15","21565874","4","8","1628280","","2014-02-04 23:07:52","2014-02-04 23:00:22",""
"4573392","AES Cipher not picking up IV","I am trying to use an IV with AES so that the encrypted text is unpredictable. However, the encrypted hex string is always the same.
I have actually tried a few methods of attempting to add some randomness by passing some additional parameters to the cipher init call:
1) Manual IV generation
byte[] iv = generateIv();
IvParameterSpec ivspec = new IvParameterSpec(iv);

2) Asking cipher to generate IV
AlgorithmParameters params = cipher.getParameters();
params.getParameterSpec(IvParameterSpec.class);

3) Using a PBEParameterSpec
byte[] encryptionSalt = generateSalt();
PBEParameterSpec pbeParamSpec = new PBEParameterSpec(encryptionSalt, 1000);

All of these seem to have no influence on the encrypted text.... help!!!
My code:
package com.citc.testencryption;

import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;

import android.app.Activity;
import android.os.Bundle;
import android.util.Log;

public class Main extends Activity {

 public static final int SALT_LENGTH = 20;
 public static final int PBE_ITERATION_COUNT = 1000;

 private static final String RANDOM_ALGORITHM = ""SHA1PRNG"";
 private static final String PBE_ALGORITHM = ""PBEWithSHA256And256BitAES-CBC-BC"";
 private static final String CIPHER_ALGORITHM = ""PBEWithSHA256And256BitAES-CBC-BC"";

 private static final String TAG = Main.class.getSimpleName();

 @Override
 public void onCreate(Bundle savedInstanceState) {

  super.onCreate(savedInstanceState);
  setContentView(R.layout.main);

  try {

   String password = ""password"";
   String plainText = ""plaintext message to be encrypted"";

   // byte[] salt = generateSalt();
   byte[] salt = ""dfghjklpoiuytgftgyhj"".getBytes();
   Log.i(TAG, ""Salt: "" + salt.length + "" "" + HexEncoder.toHex(salt));
   PBEKeySpec pbeKeySpec = new PBEKeySpec(password.toCharArray(), salt, PBE_ITERATION_COUNT);
   SecretKeyFactory keyFac = SecretKeyFactory.getInstance(PBE_ALGORITHM);
   SecretKey secretKey = keyFac.generateSecret(pbeKeySpec);
   byte[] key = secretKey.getEncoded();
   Log.i(TAG, ""Key: "" + HexEncoder.toHex(key));

   // PBEParameterSpec pbeParamSpec = new PBEParameterSpec(salt, ITERATION_COUNT);

   Cipher encryptionCipher = Cipher.getInstance(CIPHER_ALGORITHM);

   // byte[] encryptionSalt = generateSalt();
   // Log.i(TAG, ""Encrypted Salt: "" + encryptionSalt.length + "" "" + HexEncoder.toHex(encryptionSalt));
   // PBEParameterSpec pbeParamSpec = new PBEParameterSpec(encryptionSalt, 1000);
   // byte[] iv = params.getParameterSpec(IvParameterSpec.class).getIV();
   // Log.i(TAG, encryptionCipher.getParameters() + "" "");
   byte[] iv = generateIv();
   IvParameterSpec ivspec = new IvParameterSpec(iv);

   encryptionCipher.init(Cipher.ENCRYPT_MODE, secretKey, ivspec);
   byte[] encryptedText = encryptionCipher.doFinal(plainText.getBytes());
   Log.i(TAG, ""Encrypted: "" + HexEncoder.toHex(encryptedText)); // <== Why is this always the same :(

   Cipher decryptionCipher = Cipher.getInstance(CIPHER_ALGORITHM);
   decryptionCipher.init(Cipher.DECRYPT_MODE, secretKey, ivspec);
   byte[] decryptedText = decryptionCipher.doFinal(encryptedText);
   Log.i(TAG, ""Decrypted: "" + new String(decryptedText));

  } catch (Exception e) {
   e.printStackTrace();
  }

 }

 private byte[] generateSalt() throws NoSuchAlgorithmException {
  SecureRandom random = SecureRandom.getInstance(RANDOM_ALGORITHM);
  byte[] salt = new byte[SALT_LENGTH];
  random.nextBytes(salt);
  return salt;
 }

 private byte[] generateIv() throws NoSuchAlgorithmException {
  SecureRandom random = SecureRandom.getInstance(RANDOM_ALGORITHM);
  byte[] iv = new byte[16];
  random.nextBytes(iv);
  return iv;
 }

}

","I changed the way I was generating the secret key... fixed now. 
package com.citc.testencryption;

import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;

import android.app.Activity;
import android.os.Bundle;
import android.util.Log;

public class Main extends Activity {

    public static final int SALT_LENGTH = 20;
    public static final int PBE_ITERATION_COUNT = 1000;

    private static final String RANDOM_ALGORITHM = ""SHA1PRNG"";
    private static final String PBE_ALGORITHM = ""PBEWithSHA256And256BitAES-CBC-BC"";
    private static final String CIPHER_ALGORITHM = ""AES/CBC/PKCS5Padding"";

    private static final String TAG = Main.class.getSimpleName();

    @Override
    public void onCreate(Bundle savedInstanceState) {

        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);

        try {

            String password = ""password"";
            String plainText = ""plaintext message to be encrypted"";

            // byte[] salt = generateSalt();
            byte[] salt = ""dfghjklpoiuytgftgyhj"".getBytes();
            Log.i(TAG, ""Salt: "" + salt.length + "" "" + HexEncoder.toHex(salt));
            PBEKeySpec pbeKeySpec = new PBEKeySpec(password.toCharArray(), salt, PBE_ITERATION_COUNT, 256);
            SecretKeyFactory factory = SecretKeyFactory.getInstance(PBE_ALGORITHM);
            SecretKey tmp = factory.generateSecret(pbeKeySpec);
            SecretKey secret = new SecretKeySpec(tmp.getEncoded(), ""AES"");
            byte[] key = secret.getEncoded();
            Log.i(TAG, ""Key: "" + HexEncoder.toHex(key));

            // PBEParameterSpec pbeParamSpec = new PBEParameterSpec(salt, ITERATION_COUNT);

            Cipher encryptionCipher = Cipher.getInstance(CIPHER_ALGORITHM);

            // byte[] encryptionSalt = generateSalt();
            // Log.i(TAG, ""Encrypted Salt: "" + encryptionSalt.length + "" "" + HexEncoder.toHex(encryptionSalt));
            // PBEParameterSpec pbeParamSpec = new PBEParameterSpec(encryptionSalt, 1000);
            // byte[] iv = params.getParameterSpec(IvParameterSpec.class).getIV();
            Log.i(TAG, encryptionCipher.getParameters() + "" "");
            byte[] iv = generateIv();
            IvParameterSpec ivspec = new IvParameterSpec(iv);

            encryptionCipher.init(Cipher.ENCRYPT_MODE, secret, ivspec);
            byte[] encryptedText = encryptionCipher.doFinal(plainText.getBytes());
            Log.i(TAG, ""Encrypted: "" + HexEncoder.toHex(encryptedText));

            Cipher decryptionCipher = Cipher.getInstance(CIPHER_ALGORITHM);
            decryptionCipher.init(Cipher.DECRYPT_MODE, secret, ivspec);
            byte[] decryptedText = decryptionCipher.doFinal(encryptedText);
            Log.i(TAG, ""Decrypted: "" + new String(decryptedText));

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private byte[] generateSalt() throws NoSuchAlgorithmException {
        SecureRandom random = SecureRandom.getInstance(RANDOM_ALGORITHM);
        byte[] salt = new byte[SALT_LENGTH];
        random.nextBytes(salt);
        return salt;
    }

    private byte[] generateIv() throws NoSuchAlgorithmException {
        SecureRandom random = SecureRandom.getInstance(RANDOM_ALGORITHM);
        byte[] iv = new byte[16];
        random.nextBytes(iv);
        return iv;
    }

}

","6721","<android><aes><salt><initialization-vector>","5","3","1","2013-02-21 09:41:55","4573447","1","7","","","","2011-01-01 06:48:22",""
"8992955","Spring security password hash + salt","I am working with a legacy application that stored passwords in plaintext. I have ported the application to spring 3 mvc + security. I have also successfully gotten spring security handling the authentication and authorization using sha256 + a salt based on the username. This all works great, however as part of the deployment, I will need to migrate the existing database to use the new password schema. I am not sure how spring security does it's password hashing with a salt, so i am unable to write a sql script that can be used to migrate the old plaintext passwords to the new sha256+salt schema. Is there any documentation or resources that I can use to figure this out?
","
If you are using the default password encode then the source seems useful. (Pick the branch appropiate for the version you are using).
You can implement your own PasswordEncoder and define the way the salt is used.

","6645","<java><spring><spring-security><salt><saltedhash>","2","0","2","2013-08-07 09:39:48","8993193","2","1","605744","","2012-01-24 19:59:49","2012-01-24 19:36:36",""
"8992955","Spring security password hash + salt","I am working with a legacy application that stored passwords in plaintext. I have ported the application to spring 3 mvc + security. I have also successfully gotten spring security handling the authentication and authorization using sha256 + a salt based on the username. This all works great, however as part of the deployment, I will need to migrate the existing database to use the new password schema. I am not sure how spring security does it's password hashing with a salt, so i am unable to write a sql script that can be used to migrate the old plaintext passwords to the new sha256+salt schema. Is there any documentation or resources that I can use to figure this out?
","This is documented in BasePasswordEncoder:

The generated password will be in the form of password{salt}.

So in your case you can compute the salted password using this simple code:
new ShaPasswordEncoder(256).encodePassword(oldPassword, randomSalt)

Note: ShaPasswordEncoder extends BasePasswordEncoder.
","6645","<java><spring><spring-security><salt><saltedhash>","2","9","2","2013-08-07 09:39:48","8993193","2","1","605744","","2012-01-24 19:59:49","2012-01-24 19:36:36",""
"13902035","Login authorization, how to check if the password matches a SALT + HASH - PHP + MySQL","I am currently working on a school project and I have recently made no progress towards completing the login authorization. I am using a HASH and a SALT to register the new users. I can not find any resources that make seance to me so I decided to make an account here to ask my very own question. 
This is my register script : 
    $username = $_POST['username'];
    $email = $_POST['email'];
    $first = $_POST['fname'];
    $last = $_POST['lname'];
    $salt = crypt(""sha512"", false);
    $pass = $_POST['password'];
    $password = hash(""sha512"", $salt . $pass . $salt, false);

$sql = ""INSERT INTO `users` (`username`, `email`, `fname`, `lname`, `salt`, `password`) VALUES ('$username', '$email', '$first', '$last', '$salt', '$password')"";

Then I have a checklogin.php script that is the action=""checklogin.php"" on my index page which is the login page. This is the full script : http://pastebin.com/tKrsHaFU (paste bin)
My question is how do I validate my users that come to index.php page (login form) with the the users that are already in the database keep in mind I have a salt and Hash on the passwords. 
","You need not worry so much !!
Now the basic idea behind any login script and also behind a database storing user info is that, we need minimum 1 value to be a primary key, which will uniquely identify each user.
Now in your case, its apt the username seems to be the primary key.
So all you need to do is simply execute a $data = mysql_query(""SELECT * FROM table_name"") or die(mysql_error());
Here table_name will be the name of the table that stores all the user info. 
Now a $info = mysql_fetch_array( $data ); will put all the user info into an array.
A simple var_dump($info) will list you all the usernames along with other details of the users (Simply for testing purpose... u donot want to display dis info to users when they register :P )
Just loop through this array and match the username supplied by the new_user with that already existing in the array. If matches then you can stop him by saying User already exists !!. Else welcome him to your website.
","6558","<php><mysql><hash><login><salt>","4","0","3","2012-12-16 14:39:15","13902334","1","2","1338292","","2012-12-16 14:30:25","2012-12-16 14:02:15",""
"13902035","Login authorization, how to check if the password matches a SALT + HASH - PHP + MySQL","I am currently working on a school project and I have recently made no progress towards completing the login authorization. I am using a HASH and a SALT to register the new users. I can not find any resources that make seance to me so I decided to make an account here to ask my very own question. 
This is my register script : 
    $username = $_POST['username'];
    $email = $_POST['email'];
    $first = $_POST['fname'];
    $last = $_POST['lname'];
    $salt = crypt(""sha512"", false);
    $pass = $_POST['password'];
    $password = hash(""sha512"", $salt . $pass . $salt, false);

$sql = ""INSERT INTO `users` (`username`, `email`, `fname`, `lname`, `salt`, `password`) VALUES ('$username', '$email', '$first', '$last', '$salt', '$password')"";

Then I have a checklogin.php script that is the action=""checklogin.php"" on my index page which is the login page. This is the full script : http://pastebin.com/tKrsHaFU (paste bin)
My question is how do I validate my users that come to index.php page (login form) with the the users that are already in the database keep in mind I have a salt and Hash on the passwords. 
","Please see if you can read this article.  It shows the general design pattern.
http://www.experts-exchange.com/Web_Development/Web_Languages-Standards/PHP/A_2391-PHP-login-logout-and-easy-access-control.html
If you can get that much working, the next step will be to obscure the passwords in your data base.  You can use php md5() to make a one-way encoding of the password.  Apply md5() to the password when the client registers and store the encoded password.  Apply md5() to the clear-text password that the client enters into the login form.  Use the encoded password in your SELECT query.  You can concatenate a salt string into the md5() function call.  Just be sure to use the same salt every time.
http://php.net/manual/en/function.md5.php
Best regards, ~Ray
","6558","<php><mysql><hash><login><salt>","4","0","3","2012-12-16 14:39:15","13902334","1","2","1338292","","2012-12-16 14:30:25","2012-12-16 14:02:15",""
"13902035","Login authorization, how to check if the password matches a SALT + HASH - PHP + MySQL","I am currently working on a school project and I have recently made no progress towards completing the login authorization. I am using a HASH and a SALT to register the new users. I can not find any resources that make seance to me so I decided to make an account here to ask my very own question. 
This is my register script : 
    $username = $_POST['username'];
    $email = $_POST['email'];
    $first = $_POST['fname'];
    $last = $_POST['lname'];
    $salt = crypt(""sha512"", false);
    $pass = $_POST['password'];
    $password = hash(""sha512"", $salt . $pass . $salt, false);

$sql = ""INSERT INTO `users` (`username`, `email`, `fname`, `lname`, `salt`, `password`) VALUES ('$username', '$email', '$first', '$last', '$salt', '$password')"";

Then I have a checklogin.php script that is the action=""checklogin.php"" on my index page which is the login page. This is the full script : http://pastebin.com/tKrsHaFU (paste bin)
My question is how do I validate my users that come to index.php page (login form) with the the users that are already in the database keep in mind I have a salt and Hash on the passwords. 
","First of all:
$salt = crypt(""sha512"", false);

That generates a static salt, i.e. no variation. To generate a better one:
$salt = uniqid(mt_rand(), true); // the paranoid use openssl_random_pseudo_bytes()

To validate the record, your SQL becomes:
$sql=""SELECT * FROM $tbl_name WHERE username='$myusername'"";
$result=mysql_query($sql);
// ...
if ($count==1) {
    $row = mysql_fetch_assoc($result);
    if (hash('sha512', $row['salt'] . $_POST['mypassword'] . $row['salt']) == $row['password']) {
        // validation passed, rejoice!
    }
}

However, you should look here: How do you use bcrypt for hashing passwords in PHP?
","6558","<php><mysql><hash><login><salt>","4","5","3","2012-12-16 14:39:15","13902334","1","2","1338292","","2012-12-16 14:30:25","2012-12-16 14:02:15",""
"11869428","How to generate random string to salt passowrd in sql?","Got a question salting passwords in sql:
The code below salts a particular password by randomly generating a 10 character string:
Update Teacher 
SET    TeacherSalt = SUBSTRING(MD5(RAND()), -10), 
       TeacherPassword = SHA1(CONCAT('009b9b624aaecc4b3217dcd4bfee15ab704745d7',SUBSTRING(MD5(RAND()), -10)))
WHERE TeacherPassword = '009b9b624aaecc4b3217dcd4bfee15ab704745d7'

But what my question is that I want to change the salt so that the string it is generating comes from all of these characters:
./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789
There are 63 characters. The php way of doing this is below:
$salt = """"; 
for ($i = 0; $i < 40; $i++) { 
   $salt .= substr(
     ""./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"", 
     mt_rand(0, 63), 
     1); 
}

But how can I write this in the sql way above?
","If you really want to salt randomly than it can be done only by generating the random salt with php and encrypting the password with that salt and storing both salt key and password in two fields of the table. Table must have salt field and password field. However if you just want to use mysql to do encryption than have a look in here http://dev.mysql.com/doc/refman/5.5/en//encryption-functions.html
When we validate a user's login credentials we follow the same process, only this time we use the salt from our database instead of generating a new random one. We add the user supplied password to it, run our hashing algorithm, then compare the result with the hash stored in that user's profile.
The links below may give you some more ideas.
How do you securely store a user's password and salt in MySQL?
Where do you store your salt strings?
How insecure is a salted SHA1 compared to a salted SHA512
Salt Generation and open source software
I hope you got the idea now.
","6518","<php><mysql><sql><database><salt>","5","2","3","2012-11-02 01:06:20","13004541","9","","","","","2012-08-08 16:54:16",""
"11869428","How to generate random string to salt passowrd in sql?","Got a question salting passwords in sql:
The code below salts a particular password by randomly generating a 10 character string:
Update Teacher 
SET    TeacherSalt = SUBSTRING(MD5(RAND()), -10), 
       TeacherPassword = SHA1(CONCAT('009b9b624aaecc4b3217dcd4bfee15ab704745d7',SUBSTRING(MD5(RAND()), -10)))
WHERE TeacherPassword = '009b9b624aaecc4b3217dcd4bfee15ab704745d7'

But what my question is that I want to change the salt so that the string it is generating comes from all of these characters:
./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789
There are 63 characters. The php way of doing this is below:
$salt = """"; 
for ($i = 0; $i < 40; $i++) { 
   $salt .= substr(
     ""./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"", 
     mt_rand(0, 63), 
     1); 
}

But how can I write this in the sql way above?
","To put it simply, work it out in php. First grab the information from your table (note, use auto-incrementing IDs rather than the password - which might not be unique - to pick your row)
     function makeMeASalt($max=40){
         $i = 0;
         $salt = """";
         $characterList = ""./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789""
         while ($i < $max) {
            $salt .= $characterList{mt_rand(0, (strlen($characterList) - 1))};
            $i++;
         }
         return $salt;
     }

     $hash=crypt($password.makeMeASalt(40))

     $query=""Update Teacher 
         SET TeacherSalt = '"".$salt.""', TeacherPassword = "".$hash.""
         WHERE TeacherID = '"".$teacherid.""'"";
     mysql_query($query) or die(mysql_error())

This also gets rid of the problem that's already been mentioned where your salt was not the same between fields!
","6518","<php><mysql><sql><database><salt>","5","1","3","2012-11-02 01:06:20","13004541","9","","","","","2012-08-08 16:54:16",""
"11869428","How to generate random string to salt passowrd in sql?","Got a question salting passwords in sql:
The code below salts a particular password by randomly generating a 10 character string:
Update Teacher 
SET    TeacherSalt = SUBSTRING(MD5(RAND()), -10), 
       TeacherPassword = SHA1(CONCAT('009b9b624aaecc4b3217dcd4bfee15ab704745d7',SUBSTRING(MD5(RAND()), -10)))
WHERE TeacherPassword = '009b9b624aaecc4b3217dcd4bfee15ab704745d7'

But what my question is that I want to change the salt so that the string it is generating comes from all of these characters:
./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789
There are 63 characters. The php way of doing this is below:
$salt = """"; 
for ($i = 0; $i < 40; $i++) { 
   $salt .= substr(
     ""./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"", 
     mt_rand(0, 63), 
     1); 
}

But how can I write this in the sql way above?
","It can be done in MySQL.  The random word generation is not as pretty though.  Regarding generating and applying the salts, that part isn't hard.
Use 2 statements to first generate salts for everyone, then apply them.  (Note: if you really only want to apply it to one account, then add a WHERE clause.)
mysql> select * from salty;
+------+------+------+
| id   | pw   | salt |
+------+------+------+
|    1 | fish | NULL |
|    2 | bird | NULL |
|    3 | fish | NULL |
+------+------+------+

(Note that user 1 & 3 happen to have the same password.  But you don't want them to be the same once salted and hashed.)
mysql> update salty set salt=SUBSTRING(MD5(RAND()), -10);

mysql> select * from salty;
+------+------+------------+
| id   | pw   | salt       |
+------+------+------------+
|    1 | fish | 00fe747c35 |
|    2 | bird | ee4a049076 |
|    3 | fish | 6a8285f03c |
+------+------+------------+

(Note: I'll show the specific-alphabet version later)
mysql> update salty set pw=sha1(concat(pw,salt));

mysql> select * from salty;
+------+------------------------------------------+------------+
| id   | pw                                       | salt       |
+------+------------------------------------------+------------+
|    1 | ac1b74c36b4d2426460562e8710bd467bd034fc8 | 00fe747c35 |
|    2 | d63d035f9cac1ac7c237774613b8b702d8c227df | ee4a049076 |
|    3 | 6a0b1e36f489ef959badf91b3daca87d207fb5de | 6a8285f03c |
+------+------------------------------------------+------------+

There you have in two statements, each row uniquely salted and hashed.
Now for randomly generating words of a specified alphabet, there's an ugly trick with ELT().  For a 10-letter word of a 64-character alphabet:
UPDATE salty SET salt=CONCAT(
  ELT(1+FLOOR(RAND()*64), 
  '.','/',
  'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
  'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',
  '0','1','2','3','4','5','6','7','8','9'),
  ELT(1+FLOOR(RAND()*64), 
  '.','/',
  'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
  'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',
  '0','1','2','3','4','5','6','7','8','9'),
  ELT(1+FLOOR(RAND()*64), 
  '.','/',
  'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
  'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',
  '0','1','2','3','4','5','6','7','8','9'),
  ELT(1+FLOOR(RAND()*64),  
  '.','/',
  'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
  'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',
  '0','1','2','3','4','5','6','7','8','9'),
  ELT(1+FLOOR(RAND()*64), 
  '.','/',
  'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
  'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',
  '0','1','2','3','4','5','6','7','8','9'),
  ELT(1+FLOOR(RAND()*64), 
  '.','/',
  'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
  'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',
  '0','1','2','3','4','5','6','7','8','9'),
  ELT(1+FLOOR(RAND()*64), 
  '.','/',
  'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
  'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',
  '0','1','2','3','4','5','6','7','8','9'),
  ELT(1+FLOOR(RAND()*64), 
  '.','/',
  'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
  'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',
  '0','1','2','3','4','5','6','7','8','9'),
  ELT(1+FLOOR(RAND()*64), 
  '.','/',
  'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
  'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',
  '0','1','2','3','4','5','6','7','8','9'),
  ELT(1+FLOOR(RAND()*64), 
  '.','/',
  'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
  'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',
  '0','1','2','3','4','5','6','7','8','9')
)

mysql> select * from salty;
+------+------+------------+
| id   | pw   | salt       |
+------+------+------------+
|    1 | fish | TzHO0e5I/k |
|    2 | bird | 65xLptoDZ3 |
|    3 | fish | JNok/SfmkG |
+------+------+------------+    

Hideous, isn't it?  But doing that in a single MySQL statement may be much quicker than looping through in PHP and making one (or two) queries per row, especially if you have to apply it to a table with millions of records; a single ugly query vs making millions of queries one at a time.
But as the others say, SHA1 really isn't a good enough hash anymore.  
If you do have a lot of records, it might make sense to use a couple of MySQL queries like that to update all the records to use SHA2 as an interim solution, then individually update them to stronger hashes over the course of time using PHP.  You'd need some way to know which hash a given record used, of course.
As a side note, if you are only updating a single row (as in your example), then you could perhaps use a MySQL variable to temporarily hold the random generated string long enough to update two columns of the row:
mysql> SET @salt=SUBSTRING(MD5(RAND()), -10); UPDATE salty SET salt=@salt,pw=SHA1(CONCAT(pw,@salt)) WHERE id=2; SET @salt=NULL;

That way the same value in @salt is used for both setting salt and in the pw calculation.  It won't work for an update of multiple rows though (they'd all end up with the same salt).
","6518","<php><mysql><sql><database><salt>","5","5","3","2012-11-02 01:06:20","13004541","9","","","","","2012-08-08 16:54:16",""
"2994550","runtime loading of ValidateAntiForgeryToken Salt value","Consider an ASP.NET MVC application using the Salt parameter in the [ValidateAntiForgeryToken] directive.
The scenario is such that the app will be used by many customers. It's not terribly desirable to have the Salt known at compile time. 
The current strategy is to locate the Salt value in the web.config.
[ValidateAntiForgeryToken(Salt = Config.AppSalt)]
//Config.AppSalt is a static property that reads the web.config.

This leads to a compile-time exception suggesting that the Salt must be a const at compile time.

An attribute argument must be a constant expression, typeof expression or array creation expression of an attribute parameter type

How can I modify the application to allow for a runtime loading of the Salt so that the app doesn't have to be re-salted and recompiled for each customer?
Consider that the Salt won't change frequently, if at all, thereby removing the possibility of invalidating form
","The Salt property is meant to be a compile-time constant.  It's simply a way to link a particular form to a particular action method.  For example, if you have a login form, you may wish to use the salt ""Login"" for this form so that a token that was valid for the login form can't be used for the change password form, etc.
In all cases, the app's machine key is automatically used as an additional salt value.  So an anti-XSRF token for one application can't be used for another application, even if both salt values read ""Login"".  The machine key is settable in the Web.config <machineKey> section.
","6448","<asp.net-mvc><csrf><salt>","2","6","2","2010-07-21 15:32:50","3301046","1","2","","","","2010-06-08 03:03:50",""
"2994550","runtime loading of ValidateAntiForgeryToken Salt value","Consider an ASP.NET MVC application using the Salt parameter in the [ValidateAntiForgeryToken] directive.
The scenario is such that the app will be used by many customers. It's not terribly desirable to have the Salt known at compile time. 
The current strategy is to locate the Salt value in the web.config.
[ValidateAntiForgeryToken(Salt = Config.AppSalt)]
//Config.AppSalt is a static property that reads the web.config.

This leads to a compile-time exception suggesting that the Salt must be a const at compile time.

An attribute argument must be a constant expression, typeof expression or array creation expression of an attribute parameter type

How can I modify the application to allow for a runtime loading of the Salt so that the app doesn't have to be re-salted and recompiled for each customer?
Consider that the Salt won't change frequently, if at all, thereby removing the possibility of invalidating form
","I had the requirement to have different salts for different customers. In this case, I used Dixin's solution for injecting the salt at runtime.
Anti Forgery Request Recipes For ASP.NET MVC and AJAX at the section titled ""Specify non-constant salt in runtime"".
Decorate your Controllers with a new attribute:
[ValidateAntiForgeryTokenWrapper(HttpVerbs.Post)]
public class ProductController : Controller
{     
    // Only HTTP POST requests are validated.
}

This new attribute is defined as:
public class ValidateAntiForgeryTokenWrapperAttribute : FilterAttribute, IAuthorizationFilter
{
    public ValidateAntiForgeryTokenWrapperAttribute(HttpVerbs verbs)
    {
        this._verbs = new AcceptVerbsAttribute(verbs);
        this._validator = new ValidateAntiForgeryTokenAttribute()
            {
                //load from web.config or anywhere else
                Salt = Configurations.AntiForgeryTokenSalt
            };
    }

    // Other members.
}

","6448","<asp.net-mvc><csrf><salt>","2","6","2","2010-07-21 15:32:50","3301046","1","2","","","","2010-06-08 03:03:50",""
"1648464","Is it okay to store salts with hashes?","My understanding is that a salt is not intended to be secret, it is merely intended to be different from any centralized standard so that you can't develop a rainbow table or similar attack to break all hashes that use the algorithm, since the salt breaks the rainbow table.  My understanding here might not be completely correct, so correct me if I'm wrong.
In a widely-used piece of open-source software, the salt would be widely known, and this opens you up to attacks because now they can simply attack the salted version of your hash and create rainbow tables that include the salt data.
As I see it, there are two options to deal with this.  The first is to change the salt with every new version of the software, but this is no good because new versions of the software would no longer be able to test against old password hashes.
The second solution I thought of was to have a salt per password stored; in other words, each password gets a different salt.  The downside is that the salts have to be associated with the password hashes in some way, probably just by sticking them right next to the password in the database.  It might be even okay to use the username (it might not, though, probably usernames are too short).
My question is, is this acceptable?  Is there any extra risk associated with storing the salt directly with the password it hashes?  It seems to me that storing the salt in the source code is no different, so there's no security loss by storing the salt with the password.
DISCLAIMER: I'm not using this for any real life security system.  In fact, I have never designed a password system of any kind.  I'm just keeping myself vaguely educated about security issues.
","You actually already have a salt value stored in the user table: the pkey of the table.
You don't have to invent a new column for storing the salt. Just use the pkey. This idea of course presumes that you do have a pkey associated with a user name. e.g. the user name is not the pkey in the table.
This is a near dup wtb: Password hashing, salt and storage of hashed values
","6212","<security><hash><salt>","23","-1","7","2014-02-14 16:11:45","1648532","9","8","","","","2009-10-30 07:25:34",""
"1648464","Is it okay to store salts with hashes?","My understanding is that a salt is not intended to be secret, it is merely intended to be different from any centralized standard so that you can't develop a rainbow table or similar attack to break all hashes that use the algorithm, since the salt breaks the rainbow table.  My understanding here might not be completely correct, so correct me if I'm wrong.
In a widely-used piece of open-source software, the salt would be widely known, and this opens you up to attacks because now they can simply attack the salted version of your hash and create rainbow tables that include the salt data.
As I see it, there are two options to deal with this.  The first is to change the salt with every new version of the software, but this is no good because new versions of the software would no longer be able to test against old password hashes.
The second solution I thought of was to have a salt per password stored; in other words, each password gets a different salt.  The downside is that the salts have to be associated with the password hashes in some way, probably just by sticking them right next to the password in the database.  It might be even okay to use the username (it might not, though, probably usernames are too short).
My question is, is this acceptable?  Is there any extra risk associated with storing the salt directly with the password it hashes?  It seems to me that storing the salt in the source code is no different, so there's no security loss by storing the salt with the password.
DISCLAIMER: I'm not using this for any real life security system.  In fact, I have never designed a password system of any kind.  I'm just keeping myself vaguely educated about security issues.
","The salt, by definition, must be random to be effective. Don't use any deterministic value for this. This of course implies that you need to store it in the database along with the hashed password. UNIX systems traditionally even store the hash in the same field as the password (the salt is a fixed-length prefix of the password). In a database, you can have additional column in the users table.
","6212","<security><hash><salt>","23","1","7","2014-02-14 16:11:45","1648532","9","8","","","","2009-10-30 07:25:34",""
"1648464","Is it okay to store salts with hashes?","My understanding is that a salt is not intended to be secret, it is merely intended to be different from any centralized standard so that you can't develop a rainbow table or similar attack to break all hashes that use the algorithm, since the salt breaks the rainbow table.  My understanding here might not be completely correct, so correct me if I'm wrong.
In a widely-used piece of open-source software, the salt would be widely known, and this opens you up to attacks because now they can simply attack the salted version of your hash and create rainbow tables that include the salt data.
As I see it, there are two options to deal with this.  The first is to change the salt with every new version of the software, but this is no good because new versions of the software would no longer be able to test against old password hashes.
The second solution I thought of was to have a salt per password stored; in other words, each password gets a different salt.  The downside is that the salts have to be associated with the password hashes in some way, probably just by sticking them right next to the password in the database.  It might be even okay to use the username (it might not, though, probably usernames are too short).
My question is, is this acceptable?  Is there any extra risk associated with storing the salt directly with the password it hashes?  It seems to me that storing the salt in the source code is no different, so there's no security loss by storing the salt with the password.
DISCLAIMER: I'm not using this for any real life security system.  In fact, I have never designed a password system of any kind.  I'm just keeping myself vaguely educated about security issues.
","It's perfectly normal to generate a unique salt for each password.  The salt may be a product of existing material (such as a UserID, et-al.) or randomly generated.  The advantage is that an attack against the encrypted information becomes more impractical as the strength of the salt grows.
Remember: Every cryptographic algorithm is breakable.  Information may only be considered ""safe"" if cracking the protection (via a rainbow table or otherwise) is more costly than the information is worth.
edit:
Presuming you're very new to cryptography, here's a few more tips:

Longer salts are better than short ones.
The more possible values for a salt, the better.  An alpha-numeric salt is better than an numeric one.  A binary salt is better than an alpha-numeric one.
Salts wont make brute-force attacks less likely against a single password.

","6212","<security><hash><salt>","23","0","7","2014-02-14 16:11:45","1648532","9","8","","","","2009-10-30 07:25:34",""
"1648464","Is it okay to store salts with hashes?","My understanding is that a salt is not intended to be secret, it is merely intended to be different from any centralized standard so that you can't develop a rainbow table or similar attack to break all hashes that use the algorithm, since the salt breaks the rainbow table.  My understanding here might not be completely correct, so correct me if I'm wrong.
In a widely-used piece of open-source software, the salt would be widely known, and this opens you up to attacks because now they can simply attack the salted version of your hash and create rainbow tables that include the salt data.
As I see it, there are two options to deal with this.  The first is to change the salt with every new version of the software, but this is no good because new versions of the software would no longer be able to test against old password hashes.
The second solution I thought of was to have a salt per password stored; in other words, each password gets a different salt.  The downside is that the salts have to be associated with the password hashes in some way, probably just by sticking them right next to the password in the database.  It might be even okay to use the username (it might not, though, probably usernames are too short).
My question is, is this acceptable?  Is there any extra risk associated with storing the salt directly with the password it hashes?  It seems to me that storing the salt in the source code is no different, so there's no security loss by storing the salt with the password.
DISCLAIMER: I'm not using this for any real life security system.  In fact, I have never designed a password system of any kind.  I'm just keeping myself vaguely educated about security issues.
","update: use a competent library e.g. passlib for Python.
These take care of generating a per-password salt and they use a proper hashing algorithm (its not enough to just use a cryptographic hash such as SHA1; you have to apply it in a way that makes it very slow to reverse e.g. looping 1000 or more times over it etc.  This is how password hash functions like bcrypt work.  Password storing libraries do all this properly; they typically produce a string that is delimited so they can determine the hash system and work factor used; you just store the string without needing to know this.

You can store the salt in 'plain-text' in the table.

The salt does not need to be secret to be effective
it just needs to be random.

The salt strengthens a password by making the hashed value incomparable to the same password in the same or other database, and invalidating large pre-generated lists of common password to hash lookups (e.g. 'rainbow tables').
So it's critical that the salt is unique per user and is some random value stored with the password; the alternatives outlined in the question (using the username as the salt, using a single salt value for the whole application) each fail:

if systems use the user-name or other trivia, then the password can be compared to other users with the same name in other systems (imagine how often the 'administrator' or 'root' user account uses the same password in different systems...)
if the system uses a single random salt for all users in the same system, then two users who by chance have the same password would have the same hash, and guessing one user's password would trivially compromise the other.

","6212","<security><hash><salt>","23","19","7","2014-02-14 16:11:45","1648532","9","8","","","","2009-10-30 07:25:34",""
"1648464","Is it okay to store salts with hashes?","My understanding is that a salt is not intended to be secret, it is merely intended to be different from any centralized standard so that you can't develop a rainbow table or similar attack to break all hashes that use the algorithm, since the salt breaks the rainbow table.  My understanding here might not be completely correct, so correct me if I'm wrong.
In a widely-used piece of open-source software, the salt would be widely known, and this opens you up to attacks because now they can simply attack the salted version of your hash and create rainbow tables that include the salt data.
As I see it, there are two options to deal with this.  The first is to change the salt with every new version of the software, but this is no good because new versions of the software would no longer be able to test against old password hashes.
The second solution I thought of was to have a salt per password stored; in other words, each password gets a different salt.  The downside is that the salts have to be associated with the password hashes in some way, probably just by sticking them right next to the password in the database.  It might be even okay to use the username (it might not, though, probably usernames are too short).
My question is, is this acceptable?  Is there any extra risk associated with storing the salt directly with the password it hashes?  It seems to me that storing the salt in the source code is no different, so there's no security loss by storing the salt with the password.
DISCLAIMER: I'm not using this for any real life security system.  In fact, I have never designed a password system of any kind.  I'm just keeping myself vaguely educated about security issues.
","Your second solution ""Have a salt per password stored"" is the right one and typically used.
The ""Salt"" is primarily there to make it difficult to detect when two users have the same password - so you mix a known ""Salt"" into the password. The salt needs to be gettable at password check time.
So typically either you generate a random salt and store it with the password OR you use some other identifier (user ID, username etc) as the salt.
","6212","<security><hash><salt>","23","0","7","2014-02-14 16:11:45","1648532","9","8","","","","2009-10-30 07:25:34",""
"1648464","Is it okay to store salts with hashes?","My understanding is that a salt is not intended to be secret, it is merely intended to be different from any centralized standard so that you can't develop a rainbow table or similar attack to break all hashes that use the algorithm, since the salt breaks the rainbow table.  My understanding here might not be completely correct, so correct me if I'm wrong.
In a widely-used piece of open-source software, the salt would be widely known, and this opens you up to attacks because now they can simply attack the salted version of your hash and create rainbow tables that include the salt data.
As I see it, there are two options to deal with this.  The first is to change the salt with every new version of the software, but this is no good because new versions of the software would no longer be able to test against old password hashes.
The second solution I thought of was to have a salt per password stored; in other words, each password gets a different salt.  The downside is that the salts have to be associated with the password hashes in some way, probably just by sticking them right next to the password in the database.  It might be even okay to use the username (it might not, though, probably usernames are too short).
My question is, is this acceptable?  Is there any extra risk associated with storing the salt directly with the password it hashes?  It seems to me that storing the salt in the source code is no different, so there's no security loss by storing the salt with the password.
DISCLAIMER: I'm not using this for any real life security system.  In fact, I have never designed a password system of any kind.  I'm just keeping myself vaguely educated about security issues.
","Trying to keep the salt secret is pointless, because the entire practice of salting and hashing passwords exists only because we know from experience that we can't even keep our databases secret with complete reliability. You can at most store the salt separately and hope that an attacker who gets access to your DB does not find it, but if you used a good hashing algorithm and long enough individual salts, you should be safe either way.
The point of a salt is solely to ensure that you cannot amortize the cost of a brute force attack across an entire database or even multiple databases.

The first is to change the salt with
  every new version of the software, but
  this is no good because new versions
  of the software would no longer be
  able to test against old password
  hashes.

A variation of this that I have seen is to generate a random salt during installation (and of course keep this across versions) so that each running instance has a different one. Of course, having a different salt for each password (perhaps in addition to the above) is better yet.
","6212","<security><hash><salt>","23","9","7","2014-02-14 16:11:45","1648532","9","8","","","","2009-10-30 07:25:34",""
"1648464","Is it okay to store salts with hashes?","My understanding is that a salt is not intended to be secret, it is merely intended to be different from any centralized standard so that you can't develop a rainbow table or similar attack to break all hashes that use the algorithm, since the salt breaks the rainbow table.  My understanding here might not be completely correct, so correct me if I'm wrong.
In a widely-used piece of open-source software, the salt would be widely known, and this opens you up to attacks because now they can simply attack the salted version of your hash and create rainbow tables that include the salt data.
As I see it, there are two options to deal with this.  The first is to change the salt with every new version of the software, but this is no good because new versions of the software would no longer be able to test against old password hashes.
The second solution I thought of was to have a salt per password stored; in other words, each password gets a different salt.  The downside is that the salts have to be associated with the password hashes in some way, probably just by sticking them right next to the password in the database.  It might be even okay to use the username (it might not, though, probably usernames are too short).
My question is, is this acceptable?  Is there any extra risk associated with storing the salt directly with the password it hashes?  It seems to me that storing the salt in the source code is no different, so there's no security loss by storing the salt with the password.
DISCLAIMER: I'm not using this for any real life security system.  In fact, I have never designed a password system of any kind.  I'm just keeping myself vaguely educated about security issues.
","Using a single salt for all passwords in the database is helpful, but much less secure than giving each user a unique salt.
Basically: a longer (in bytes) password+salt increases the search space, and thus makes it harder to use ""stock-standard"" rainbow tables.
However, if the same salt is used for all entries, then it is possible to create a rainbow table specifically to attack your software. If your userbase is large then someone might decide to make such a rainbow table.
For example, if you simply add "" and a lot of salt"" to the end of each password before hashing, an attacker could construct a table of hash values generated by lots of strings, all those strings ending with "" and a lot of salt"".
For this reason, a per-user salt is the best way to go. However, remember that you also want the password+salt to be ""long"".
If you want to use the primary key, it's probably a good idea to take the hash of the primary key rather than using the primary key itself, because if the password+salt for user 43 looks like ""myPassword00000000043"" then an attacker could build a table with the assumption that there are a lot of zeroes in the middle. Creation timestamps and random string are probably better options though, as PKeys can sometimes be easily found or guessed.
Note: I'm not a true encryption expert, don't use this advice in a real system.
","6212","<security><hash><salt>","23","0","7","2014-02-14 16:11:45","1648532","9","8","","","","2009-10-30 07:25:34",""
"6479262","php salt my passwords per user sha512 - am I doing this right?","I'm trying to correctly do a per user and site wide salt for my passwords. Here's what I've got:
require('../../salt.php'); //this is above the web root and provides $salt variable
$pw = mysql_real_escape_string($_POST['pw']);
$per_user_salt = uniqid(mt_rand());
$site_salt = $salt //from salt.php that was required on first line
$combine = $pw . $per_user_salt . $site_salt;
$pw_to_put_in_db = hash(""sha512"", $combine);

Is this right? Thanks
","often people use a unique salt concatenated with the password, then use hmac method to add the sitewide hashing key:
http://www.php.net/manual/en/function.hash-hmac.php
$password = hash_hmac('sha512', $password . $salt, $sitewide_key);

","6169","<php><salt><sha512><password-storage>","9","0","4","2013-06-13 18:12:34","6543830","15","1","607569","","2011-07-01 05:13:08","2011-06-25 17:06:15",""
"6479262","php salt my passwords per user sha512 - am I doing this right?","I'm trying to correctly do a per user and site wide salt for my passwords. Here's what I've got:
require('../../salt.php'); //this is above the web root and provides $salt variable
$pw = mysql_real_escape_string($_POST['pw']);
$per_user_salt = uniqid(mt_rand());
$site_salt = $salt //from salt.php that was required on first line
$combine = $pw . $per_user_salt . $site_salt;
$pw_to_put_in_db = hash(""sha512"", $combine);

Is this right? Thanks
","Based on comments here is what I'm going to do:
Change my $combine to something that is unique per user but not stored in db. So something like: $combine = $pw . md5($pw) . 'PoniesAreMagical' . $site_salt . md5($pw);, etc etc etc... Thanks for the help...
So - for those of you trying to figure out how to do this for the first time (like me)... its all about the algorithm... make something obscure, unique, difficult to figure out; because if someone wants to get into your system, they are going to have to figure this out. Thanks to all for awesome comments.
","6169","<php><salt><sha512><password-storage>","9","-2","4","2013-06-13 18:12:34","6543830","15","1","607569","","2011-07-01 05:13:08","2011-06-25 17:06:15",""
"6479262","php salt my passwords per user sha512 - am I doing this right?","I'm trying to correctly do a per user and site wide salt for my passwords. Here's what I've got:
require('../../salt.php'); //this is above the web root and provides $salt variable
$pw = mysql_real_escape_string($_POST['pw']);
$per_user_salt = uniqid(mt_rand());
$site_salt = $salt //from salt.php that was required on first line
$combine = $pw . $per_user_salt . $site_salt;
$pw_to_put_in_db = hash(""sha512"", $combine);

Is this right? Thanks
","This is fine just removed """" from ""sha512"" :)
$pw = $_POST['pw'];
$per_user_salt = uniqid(mt_rand());
$site_salt = $salt //from salt.php that was required on first line
$combine = $pw . $per_user_salt . $site_salt;
$pw_to_put_in_db = hash(sha512, $combine);

dont have to use md5 sha512 is secure enough it self
","6169","<php><salt><sha512><password-storage>","9","0","4","2013-06-13 18:12:34","6543830","15","1","607569","","2011-07-01 05:13:08","2011-06-25 17:06:15",""
"6479262","php salt my passwords per user sha512 - am I doing this right?","I'm trying to correctly do a per user and site wide salt for my passwords. Here's what I've got:
require('../../salt.php'); //this is above the web root and provides $salt variable
$pw = mysql_real_escape_string($_POST['pw']);
$per_user_salt = uniqid(mt_rand());
$site_salt = $salt //from salt.php that was required on first line
$combine = $pw . $per_user_salt . $site_salt;
$pw_to_put_in_db = hash(""sha512"", $combine);

Is this right? Thanks
","Use crypt, it's available in all languages and your password hashes will be useable by other programs as well:
$hash = crypt(""secret"", ""$6$randomsalt$"");

","6169","<php><salt><sha512><password-storage>","9","0","4","2013-06-13 18:12:34","6543830","15","1","607569","","2011-07-01 05:13:08","2011-06-25 17:06:15",""
"20368038","Crypt() salt generation and password encryption, well executed?","these are some functions I am using for password encryption and password verification. Was wondering if this is a good way to handle it. I am using the codeigniter framework.
This is the function to 'encrypt' :
function crypt_pass( $input ){
    $salt = substr(sha1(date('r')), rand(0, 17), 22);
    $cost = 10;
    $hash = '$2y$' . $cost . '$' . $salt;

    $pw_and_salt['pw'] = crypt($input, ""$hash"");
    $pw_and_salt['salt'] = $salt;

    return $pw_and_salt;
}

I store both the password and the salt in my DB. Here is the login function:
function login(){

    $this->db->select('salt');
    $salt = $this->db->get_where('users', array('username' => $this->input->post('username') ) )->row();



    $where = array(
        'username' => $this->input->post('username'),
        'password' => crypt( $this->input->post('password'), '$2y$10$' . $salt->salt),
    );


    $user = $this->db->get_where('users', $where)->first_row();

    if (!$user) {
        return FALSE;
    }else{
        if(!empty($user->activation)){

            return 2;

        }else if($user && empty($user->activation)){
            $this->session->set_userdata('id',$user->id);
            $this->session->set_userdata('username',$user->username);
            $this->session->set_userdata('first_name',$user->first_name);   

            return 1;
        }
    }
}

Am I implementing this the right way? Is this enough security?
VERSION 2 : NOT STORING SALT, EXTRACTING FROM PASSWORD IN DB INSTEAD :
function login(){

    $this->db->select('password');

    $pw = $this->db->get_where('users', array('username' => $this->input->post('username') ) )->row();


    $where = array(
        'username' => $this->input->post('username'),
        'password' => crypt( $this->input->post('password'), $pw->password),
    );

    $user = $this->db->get_where('users', $where)->first_row();

    if (!$user) {

        return FALSE;

    }else{

        if(!empty($user->activation)){

            return 2;

        }else if($user && empty($user->activation)){

            $this->session->set_userdata('id',$user->id);
            $this->session->set_userdata('username',$user->username);
            $this->session->set_userdata('first_name',$user->first_name);   

            return 1;
        }
    }
}

","There are some points that can be improved, but first i would recommend to use PHP's new function password_hash(). This function will generate a safe salt and includes it in the resulting hash-value, so you can store it in a single database field. There exists also a compatibility pack for earlier versions.
// Hash a new password for storing in the database.
// The function automatically generates a cryptographically safe salt.
$hashToStoreInDb = password_hash($password, PASSWORD_BCRYPT);

// Check if the hash of the entered login password, matches the stored hash.
// The salt and the cost factor will be extracted from $existingHashFromDb.
$isPasswordCorrect = password_verify($password, $existingHashFromDb);

Some thoughts about your code:

You generate a BCrypt hash with crypt(), so the salt will be part of the resulting hash. There is no need to store it separately.
The generation of the salt can be improved, use the random source of the operating system MCRYPT_DEV_URANDOM.
If you would change the cost factor to 9, the format would become invalid, because crypt expects two digits.

","6049","<php><mysql><codeigniter><salt><crypt>","4","6","1","2014-10-12 01:52:39","20370991","3","1","608639","","2014-10-12 01:52:39","2013-12-04 05:56:56",""
"854961","Password hash and salting - is this a good method?","I was doing a little research or googling for different methods of handling password hashing and salting and came across this interesting link:
http://phix.me/salt/
Now, essentially what this proposes is the creation of two user functions, one for hashing and one for checking the hash. 
The salt is pseudo random but is in actual fact based upon the password (strikes me as bad?).
The hashing function also pseudo randomly ""sprinkles"" the salt amongst the hash string.
The hash checking function reverses the salt sprinkling and then the actual hash check takes place.
Now, I'm aware that unique salts for each password hash = good, but also that having the logic to hash the passwords and create the salt stored in a db function might = bad.
I like the idea that the salt isn't obvious and that it also needn't be based on some hopefully consistent value such as username, userid, date of birth etc, but as I said I do have my doubts as to the implementation.
So, what are people's opinions and ideas of ""best approach solutions""?
","(Edited answer because I misread the article initially and thought he was just mixing the salt together with an unsalted hash)
His techniques do seem fine, they'll work, but they're not really any ""better"" than normal salting methods. It's just an attempt to do security by obscurity, it's no better than making up your own random ""hash scrambling"" method and hoping that the attacker doesn't figure it out.
In fact, it could actually be quite easy for the attacker to figure these functions out, in many cases. If the site is one with public registration, the attacker could repeatedly register accounts with known passwords, then use the known md5 hashes for those passwords to reverse-engineer the password scrambling algorithm. I'd be able to do this very easily, even looking at the result of his ""Attempt 4"".
If you want to store your passwords really securely, get away from MD5 and even SHA1, and move towards a salted, slower hash function. This is a great article about the topic: Enough With The Rainbow Tables: What You Need To Know About Secure Password Schemes
","6036","<mysql><encryption><hash><passwords><salt>","7","4","8","2015-02-18 08:32:33","855014","1","1","55637","","2015-02-18 08:32:33","2009-05-12 21:31:25",""
"854961","Password hash and salting - is this a good method?","I was doing a little research or googling for different methods of handling password hashing and salting and came across this interesting link:
http://phix.me/salt/
Now, essentially what this proposes is the creation of two user functions, one for hashing and one for checking the hash. 
The salt is pseudo random but is in actual fact based upon the password (strikes me as bad?).
The hashing function also pseudo randomly ""sprinkles"" the salt amongst the hash string.
The hash checking function reverses the salt sprinkling and then the actual hash check takes place.
Now, I'm aware that unique salts for each password hash = good, but also that having the logic to hash the passwords and create the salt stored in a db function might = bad.
I like the idea that the salt isn't obvious and that it also needn't be based on some hopefully consistent value such as username, userid, date of birth etc, but as I said I do have my doubts as to the implementation.
So, what are people's opinions and ideas of ""best approach solutions""?
","There have been many similar questions asked before:

Secure hash and salt for PHP passwords
Is “double hashing” a password less secure than just hashing it once?
What algorithm should I use to hash passwords into my database?

That should get you an idea of how to hash passwords.
","6036","<mysql><encryption><hash><passwords><salt>","7","4","8","2015-02-18 08:32:33","855014","1","1","55637","","2015-02-18 08:32:33","2009-05-12 21:31:25",""
"854961","Password hash and salting - is this a good method?","I was doing a little research or googling for different methods of handling password hashing and salting and came across this interesting link:
http://phix.me/salt/
Now, essentially what this proposes is the creation of two user functions, one for hashing and one for checking the hash. 
The salt is pseudo random but is in actual fact based upon the password (strikes me as bad?).
The hashing function also pseudo randomly ""sprinkles"" the salt amongst the hash string.
The hash checking function reverses the salt sprinkling and then the actual hash check takes place.
Now, I'm aware that unique salts for each password hash = good, but also that having the logic to hash the passwords and create the salt stored in a db function might = bad.
I like the idea that the salt isn't obvious and that it also needn't be based on some hopefully consistent value such as username, userid, date of birth etc, but as I said I do have my doubts as to the implementation.
So, what are people's opinions and ideas of ""best approach solutions""?
","This seems for me to just add obfuscation, not any more security, to the (as Chad Birch pointed out misunderstood) salted hash method.
","6036","<mysql><encryption><hash><passwords><salt>","7","3","8","2015-02-18 08:32:33","855014","1","1","55637","","2015-02-18 08:32:33","2009-05-12 21:31:25",""
"854961","Password hash and salting - is this a good method?","I was doing a little research or googling for different methods of handling password hashing and salting and came across this interesting link:
http://phix.me/salt/
Now, essentially what this proposes is the creation of two user functions, one for hashing and one for checking the hash. 
The salt is pseudo random but is in actual fact based upon the password (strikes me as bad?).
The hashing function also pseudo randomly ""sprinkles"" the salt amongst the hash string.
The hash checking function reverses the salt sprinkling and then the actual hash check takes place.
Now, I'm aware that unique salts for each password hash = good, but also that having the logic to hash the passwords and create the salt stored in a db function might = bad.
I like the idea that the salt isn't obvious and that it also needn't be based on some hopefully consistent value such as username, userid, date of birth etc, but as I said I do have my doubts as to the implementation.
So, what are people's opinions and ideas of ""best approach solutions""?
","The purpose of a salt is to make the use of a rainbow table prohibitively expensive, so Attempt 1 pretty much solves the problem correctly.  Basing the salt on the password eliminates the variability that defeats rainbow tables, and trying to hide it in the hashed password field is just pointless.
","6036","<mysql><encryption><hash><passwords><salt>","7","11","8","2015-02-18 08:32:33","855014","1","1","55637","","2015-02-18 08:32:33","2009-05-12 21:31:25",""
"854961","Password hash and salting - is this a good method?","I was doing a little research or googling for different methods of handling password hashing and salting and came across this interesting link:
http://phix.me/salt/
Now, essentially what this proposes is the creation of two user functions, one for hashing and one for checking the hash. 
The salt is pseudo random but is in actual fact based upon the password (strikes me as bad?).
The hashing function also pseudo randomly ""sprinkles"" the salt amongst the hash string.
The hash checking function reverses the salt sprinkling and then the actual hash check takes place.
Now, I'm aware that unique salts for each password hash = good, but also that having the logic to hash the passwords and create the salt stored in a db function might = bad.
I like the idea that the salt isn't obvious and that it also needn't be based on some hopefully consistent value such as username, userid, date of birth etc, but as I said I do have my doubts as to the implementation.
So, what are people's opinions and ideas of ""best approach solutions""?
","The salt doesn't need to be secret. It does need to be unpredictable for a given password. 
Deriving the salt from the password completely misses the point.
","6036","<mysql><encryption><hash><passwords><salt>","7","14","8","2015-02-18 08:32:33","855014","1","1","55637","","2015-02-18 08:32:33","2009-05-12 21:31:25",""
"854961","Password hash and salting - is this a good method?","I was doing a little research or googling for different methods of handling password hashing and salting and came across this interesting link:
http://phix.me/salt/
Now, essentially what this proposes is the creation of two user functions, one for hashing and one for checking the hash. 
The salt is pseudo random but is in actual fact based upon the password (strikes me as bad?).
The hashing function also pseudo randomly ""sprinkles"" the salt amongst the hash string.
The hash checking function reverses the salt sprinkling and then the actual hash check takes place.
Now, I'm aware that unique salts for each password hash = good, but also that having the logic to hash the passwords and create the salt stored in a db function might = bad.
I like the idea that the salt isn't obvious and that it also needn't be based on some hopefully consistent value such as username, userid, date of birth etc, but as I said I do have my doubts as to the implementation.
So, what are people's opinions and ideas of ""best approach solutions""?
","I asked a similar question earlier. The consensus was this:
It doesn't matter how you salt, so long as you:

Salt before you hash
Use a random salt unique per password
Use a large enough salt to make rainbow tables prohibitive.

You can even store your salt right next to your hashed passwords and feel pretty darn confident. 
Personally, I find GUIDs (in string format) work great for Salts. They take a line of code to generate and in string format are more than large enough to make rainbow tables take millennia to compute. 
","6036","<mysql><encryption><hash><passwords><salt>","7","7","8","2015-02-18 08:32:33","855014","1","1","55637","","2015-02-18 08:32:33","2009-05-12 21:31:25",""
"854961","Password hash and salting - is this a good method?","I was doing a little research or googling for different methods of handling password hashing and salting and came across this interesting link:
http://phix.me/salt/
Now, essentially what this proposes is the creation of two user functions, one for hashing and one for checking the hash. 
The salt is pseudo random but is in actual fact based upon the password (strikes me as bad?).
The hashing function also pseudo randomly ""sprinkles"" the salt amongst the hash string.
The hash checking function reverses the salt sprinkling and then the actual hash check takes place.
Now, I'm aware that unique salts for each password hash = good, but also that having the logic to hash the passwords and create the salt stored in a db function might = bad.
I like the idea that the salt isn't obvious and that it also needn't be based on some hopefully consistent value such as username, userid, date of birth etc, but as I said I do have my doubts as to the implementation.
So, what are people's opinions and ideas of ""best approach solutions""?
","Interestingly, this is not just obfuscation, not any more security but actually obfuscation, less security because ""Attempt 4"" is only as good as the CRC32 function it uses (CRC32 is passed ONLY the password, not password+salt) - this is the downfall.
As per Chad's post, to crack ""Attempt 4"", all one has to do is CRC32 loads of passwords and then reverse the function he's coded up, leaving you with a salted md5 hash and the salt (which you would then test for validity). Simply test this pair by calculating md5(password+salt) (where password is the password you are trying) and salt is the salt you have calculated by reversing the algorithm. If the md5 equals the first 32 characters of the hash, you've cracked the password.
""Attempt 4"" is worse than ""Attempt 1"", in some respects, as it as only as good as the worst function called in the entire routine, in this case, CRC32(password).
","6036","<mysql><encryption><hash><passwords><salt>","7","1","8","2015-02-18 08:32:33","855014","1","1","55637","","2015-02-18 08:32:33","2009-05-12 21:31:25",""
"854961","Password hash and salting - is this a good method?","I was doing a little research or googling for different methods of handling password hashing and salting and came across this interesting link:
http://phix.me/salt/
Now, essentially what this proposes is the creation of two user functions, one for hashing and one for checking the hash. 
The salt is pseudo random but is in actual fact based upon the password (strikes me as bad?).
The hashing function also pseudo randomly ""sprinkles"" the salt amongst the hash string.
The hash checking function reverses the salt sprinkling and then the actual hash check takes place.
Now, I'm aware that unique salts for each password hash = good, but also that having the logic to hash the passwords and create the salt stored in a db function might = bad.
I like the idea that the salt isn't obvious and that it also needn't be based on some hopefully consistent value such as username, userid, date of birth etc, but as I said I do have my doubts as to the implementation.
So, what are people's opinions and ideas of ""best approach solutions""?
","I can't view the link in the original question (the website just returns a 404 not found error), but the method described in the question is not really using a salted hash.
In essence, this method is just using a non-standard hash: given a specific password, there is one unique value that will be stored in the database. This is all that is needed to make a rainbow tables attack work: I can precompute the hash value for a dictionary of likely passwords and look for any matches. Now, I will have to precompute rainbow tables specifically for this non-standard hash function. 
In a proper implementation of salted hashes, when the passord is created, a random salt is combined with the password and hashed. Then random salt used and the hash are stored. Even if I know the password, I cannot predict what the hash will be since there will be a different hash for each of the many possible salt values. Now an attacker needs to precompute a rainbow table for each possible salt value: this takes a much larger effort.
","6036","<mysql><encryption><hash><passwords><salt>","7","1","8","2015-02-18 08:32:33","855014","1","1","55637","","2015-02-18 08:32:33","2009-05-12 21:31:25",""
"12496600","How to stock and use a shiro's salt from database","I use shiro in application for the authenticate. I use hashed password with a salt and I store them in my database like this :
    private User createUserWithHashedPassword(String inName, String inFirstName, String inLastName, String inPassword){

    ByteSource salt  = randomNumberGenerator.nextBytes(32);

    byte[] byteTabSalt  = salt.getBytes();

    String strSalt = byteArrayToHexString(byteTabSalt);

    String hashedPasswordBase64 = new Sha256Hash(inPassword, salt, 1024).toBase64();

    return new User(inName,inFirstName,inLastName,hashedPasswordBase64,strSalt);
}

I store the salt with a String in my database. Now in my realm I want to get back my datas from the database, I use a transactionnal service for this. But my salt is a Strong so I want it to turn back as ByteSource type with the static method :
ByteSource byteSourceSalt = Util.bytes(salt); //where the salt is a String

But when I create my SaltedAuthenticationInfo it doesn't auth.
I think my problem is from my convert method :
private String byteArrayToHexString(byte[] bArray){

        StringBuffer buffer = new StringBuffer();

        for(byte b : bArray) {
            buffer.append(Integer.toHexString(b));
            buffer.append("" "");
        }

 return buffer.toString().toUpperCase();    
}

Thanks for your help.
","Have you looked at PasswordMatcher / PasswordService?
This already has all of the encoding/decoding/compare logic built-in.  To use it:
Storing password in database:
PasswordService service = new DefaultPasswordService(); // or use injection or shiro.ini to populate this

private User createUserWithHashedPassword(String inName, String inFirstName, String inLastName, String inPassword){

  String hashedPasswordBase64 = service.encryptPassword(inPassword);

  return new User(inName,inFirstName,inLastName,hashedPasswordBase64,strSalt);
}

Then you can simply use PasswordMatcher as the matcher in your realm.
realm.setCredentialsMatcher(new PasswordMatcher());

or in shiro.ini:
matcher = org.apache.shiro.authc.credential.PasswordMatcher
realm.credentialsMatcher = $matcher

","5919","<java><database><salt><shiro>","8","4","4","2015-08-08 07:55:38","21741390","0","5","1269325","","2012-09-19 15:31:59","2012-09-19 14:13:25",""
"12496600","How to stock and use a shiro's salt from database","I use shiro in application for the authenticate. I use hashed password with a salt and I store them in my database like this :
    private User createUserWithHashedPassword(String inName, String inFirstName, String inLastName, String inPassword){

    ByteSource salt  = randomNumberGenerator.nextBytes(32);

    byte[] byteTabSalt  = salt.getBytes();

    String strSalt = byteArrayToHexString(byteTabSalt);

    String hashedPasswordBase64 = new Sha256Hash(inPassword, salt, 1024).toBase64();

    return new User(inName,inFirstName,inLastName,hashedPasswordBase64,strSalt);
}

I store the salt with a String in my database. Now in my realm I want to get back my datas from the database, I use a transactionnal service for this. But my salt is a Strong so I want it to turn back as ByteSource type with the static method :
ByteSource byteSourceSalt = Util.bytes(salt); //where the salt is a String

But when I create my SaltedAuthenticationInfo it doesn't auth.
I think my problem is from my convert method :
private String byteArrayToHexString(byte[] bArray){

        StringBuffer buffer = new StringBuffer();

        for(byte b : bArray) {
            buffer.append(Integer.toHexString(b));
            buffer.append("" "");
        }

 return buffer.toString().toUpperCase();    
}

Thanks for your help.
","I change my type for the save of my salt. Now I'm using a byte[] instead of a String.
ByteSource salt  = randomNumberGenerator.nextBytes(32);

byte[] byteTabSalt  = salt.getBytes();

And I stock the byteTabSalt in my database.
","5919","<java><database><salt><shiro>","8","1","4","2015-08-08 07:55:38","21741390","0","5","1269325","","2012-09-19 15:31:59","2012-09-19 14:13:25",""
"12496600","How to stock and use a shiro's salt from database","I use shiro in application for the authenticate. I use hashed password with a salt and I store them in my database like this :
    private User createUserWithHashedPassword(String inName, String inFirstName, String inLastName, String inPassword){

    ByteSource salt  = randomNumberGenerator.nextBytes(32);

    byte[] byteTabSalt  = salt.getBytes();

    String strSalt = byteArrayToHexString(byteTabSalt);

    String hashedPasswordBase64 = new Sha256Hash(inPassword, salt, 1024).toBase64();

    return new User(inName,inFirstName,inLastName,hashedPasswordBase64,strSalt);
}

I store the salt with a String in my database. Now in my realm I want to get back my datas from the database, I use a transactionnal service for this. But my salt is a Strong so I want it to turn back as ByteSource type with the static method :
ByteSource byteSourceSalt = Util.bytes(salt); //where the salt is a String

But when I create my SaltedAuthenticationInfo it doesn't auth.
I think my problem is from my convert method :
private String byteArrayToHexString(byte[] bArray){

        StringBuffer buffer = new StringBuffer();

        for(byte b : bArray) {
            buffer.append(Integer.toHexString(b));
            buffer.append("" "");
        }

 return buffer.toString().toUpperCase();    
}

Thanks for your help.
","The DefaultPasswordService implementation automatically adds a random salt to each encryptPassword call. That ""public"" salt will be stored within the ""hashedPasswordBase64"" that you receive from ""encryptPassword"".
Because the ""public"" salt is individually generated for each hashed password one cannot ""simply"" generate a rainbow table and brute-force all your hashed passwords at once. For each hashed password the attacker would have to generate an own, unique rainbow table because of the unique ""public"" salt. So far you do not need to put an extra salt into the database.
To make your stored hashed passwords even more secure you can furthermore add a ""private"" salt that should be stored anywhere else - as long as not in the database. By using a ""private"" salt you could protect the hashed passwords against a brute-force rainbow-table attack, because the attacker does not know the ""private"" salt and cannot gain the ""private"" salt from the database entries.
This is a very basic example how to create a PasswordService that utilizes a ""private"" salt provided as a constant string and that works as CredentialsMatcher:
public class MyPrivateSaltingPasswortService extends DefaultPasswordService
{
   public MyPrivateSaltingPasswortService()
   {
      super();
      HashService service = getHashService();
      if (service instanceof DefaultHashService)
      {
         ((DefaultHashService) service).setPrivateSalt(
             new SimpleByteSource(""MySuperSecretPrivateSalt""));
      }
   }
}

you then could use your own implementation in shiro.ini:
[main]
saltedService = com.mycompany.MyPrivateSaltingPasswortService
matcher = org.apache.shiro.authc.credential.PasswordMatcher
matcher.passwordService = $saltedService
realm.credentialsMatcher = $matcher

This example was created using shiro-1.2.2
","5919","<java><database><salt><shiro>","8","4","4","2015-08-08 07:55:38","21741390","0","5","1269325","","2012-09-19 15:31:59","2012-09-19 14:13:25",""
"12496600","How to stock and use a shiro's salt from database","I use shiro in application for the authenticate. I use hashed password with a salt and I store them in my database like this :
    private User createUserWithHashedPassword(String inName, String inFirstName, String inLastName, String inPassword){

    ByteSource salt  = randomNumberGenerator.nextBytes(32);

    byte[] byteTabSalt  = salt.getBytes();

    String strSalt = byteArrayToHexString(byteTabSalt);

    String hashedPasswordBase64 = new Sha256Hash(inPassword, salt, 1024).toBase64();

    return new User(inName,inFirstName,inLastName,hashedPasswordBase64,strSalt);
}

I store the salt with a String in my database. Now in my realm I want to get back my datas from the database, I use a transactionnal service for this. But my salt is a Strong so I want it to turn back as ByteSource type with the static method :
ByteSource byteSourceSalt = Util.bytes(salt); //where the salt is a String

But when I create my SaltedAuthenticationInfo it doesn't auth.
I think my problem is from my convert method :
private String byteArrayToHexString(byte[] bArray){

        StringBuffer buffer = new StringBuffer();

        for(byte b : bArray) {
            buffer.append(Integer.toHexString(b));
            buffer.append("" "");
        }

 return buffer.toString().toUpperCase();    
}

Thanks for your help.
","As mentioned in the excellent answer https://stackoverflow.com/a/20206115/603901, Shiro's DefaultPasswordService already generates unique salts for each password.
However, there is no need to implement a custom PasswordService to add a private salt (sometimes called ""pepper"") to the per-user salts. Private salt can be configured in shiro.ini:
[main]
hashService = org.apache.shiro.crypto.hash.DefaultHashService
hashService.hashIterations = 500000
hashService.hashAlgorithmName = SHA-256
hashService.generatePublicSalt = true
# privateSalt needs to be base64-encoded in shiro.ini but not in the Java code
hashService.privateSalt = myVERYSECRETBase64EncodedSalt
passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher

passwordService = org.apache.shiro.authc.credential.DefaultPasswordService
passwordService.hashService = $hashService
passwordMatcher.passwordService = $passwordService

Java code for generating a matching password hash:
DefaultHashService hashService = new DefaultHashService();
hashService.setHashIterations(HASH_ITERATIONS); // 500000
hashService.setHashAlgorithmName(Sha256Hash.ALGORITHM_NAME);
hashService.setPrivateSalt(new SimpleByteSource(PRIVATE_SALT)); // Same salt as in shiro.ini, but NOT base64-encoded.
hashService.setGeneratePublicSalt(true);

DefaultPasswordService passwordService = new DefaultPasswordService();
passwordService.setHashService(hashService);
String encryptedPassword = passwordService.encryptPassword(""PasswordForThisUser"");

The resulting hash looks like this:
$shiro1$SHA-256$500000$An4HRyqMJlZ58utACtyGDQ==$nKbIY9Nd9vC89G4SjdnDfka49mZiesjWgDsO/4Ly4Qs=

The private salt is not stored in the database, which makes it harder to crack the passwords if an adversary gains access to a database dump.
This example was created using shiro-1.2.2
Thanks to https://github.com/Multifarious/shiro-jdbi-realm/blob/master/src/test/resources/shiro.ini for help with the syntax for shiro.ini
","5919","<java><database><salt><shiro>","8","13","4","2015-08-08 07:55:38","21741390","0","5","1269325","","2012-09-19 15:31:59","2012-09-19 14:13:25",""
"15367867","How Spring encodePassword with salt","I introduce Spring security for a web application. First I have my authentication manager as follows.
<authentication-manager>
    <authentication-provider>
        <password-encoder hash='md5'>
        </password-encoder> 
        <jdbc-user-service data-source-ref=""dataSource""/>
    </authentication-provider>
</authentication-manager>

For tesing I'm going to use '1' as both username and password. I use a online md5 hash generator and I got 'c4ca4238a0b923820dcc509a6f75849b' for md5(1). Login works fine with this configuration. The I wanted to try salt and I modify authentication manager as follows.
<authentication-manager>
    <authentication-provider>
        <password-encoder hash='md5'>
            <salt-source user-property=""username""/>
        </password-encoder> 
        <jdbc-user-service data-source-ref=""dataSource""/>
    </authentication-provider>
</authentication-manager>

So as I read in web how salt used is like hash(salt + password). So using the same tool I hash '11' then got hash value '6512bd43d9caa6e02c990b0a82652dca'. I update the database with that value. But now login fail with error thrown 'Caused : Bad credentials'. Which means password didn't match with the database. So my question is does that mean Spring use a different way for salting?
","Damn anyway Spring salting method is different. User following Java code to calculate hash with salt. 
public static void main(String[] args) {
    Md5PasswordEncoder md5 = new Md5PasswordEncoder();
    String hash = md5.encodePassword(""1"", ""1"");
    System.out.println(hash);
}

I got '6a8a1f634e38d30e87b450899b31f810' as encrypted password(Different right??). Then I insert it to the database and try my application login. Vola!!! login succeed. 
","5860","<spring><spring-security><md5><salt>","0","0","2","2013-03-12 17:49:20","","2","","","","","2013-03-12 17:20:11",""
"15367867","How Spring encodePassword with salt","I introduce Spring security for a web application. First I have my authentication manager as follows.
<authentication-manager>
    <authentication-provider>
        <password-encoder hash='md5'>
        </password-encoder> 
        <jdbc-user-service data-source-ref=""dataSource""/>
    </authentication-provider>
</authentication-manager>

For tesing I'm going to use '1' as both username and password. I use a online md5 hash generator and I got 'c4ca4238a0b923820dcc509a6f75849b' for md5(1). Login works fine with this configuration. The I wanted to try salt and I modify authentication manager as follows.
<authentication-manager>
    <authentication-provider>
        <password-encoder hash='md5'>
            <salt-source user-property=""username""/>
        </password-encoder> 
        <jdbc-user-service data-source-ref=""dataSource""/>
    </authentication-provider>
</authentication-manager>

So as I read in web how salt used is like hash(salt + password). So using the same tool I hash '11' then got hash value '6512bd43d9caa6e02c990b0a82652dca'. I update the database with that value. But now login fail with error thrown 'Caused : Bad credentials'. Which means password didn't match with the database. So my question is does that mean Spring use a different way for salting?
","Since you are using spring security, you can think of using PasswordEncoder bean. 
<beans:bean id=""passwordEncoder"" class=""org.springframework.security.authentication.encoding.ShaPasswordEncoder"">
</beans:bean>

And your authentication manager would be something like (change code ) : 
<authentication-manager>
    <authentication-provider>
        <password-encoder ref=""passwordEncoder"">
            <salt-source user-property=""username""/>
        <password-encoder/>
        <jdbc-user-service data-source-ref=""dataSource""/>
    </authentication-provider>
 </authentication-manager>

Visit Spring Security Custom Authentication and Password Encoding & Spring Security:password encoding in DB and in applicationContext to know more.
","5860","<spring><spring-security><md5><salt>","0","2","2","2013-03-12 17:49:20","","2","","","","","2013-03-12 17:20:11",""
"20394137","yii CPasswordHelper: hashPassword and verifyPassword","I think I'm missing something critical here. In the CPasswordHelper::hashPassword function we have lines:
$salt=self::generateSalt($cost);  
$hash=crypt($password,$salt);  

return $hash;

And in the CPasswordHelper::verifyPassword there is this line:
$test=crypt($password,$hash);  

return self::same($test, $hash);

What about the salt? To my understanding its not even beeing kept, but it doesn't make any sense, so I'm guessing I didn't understand it completely.
","The salt is being stored as part of the hash.
","5831","<hash><yii><passwords><salt>","5","2","2","2015-03-04 15:15:10","20399775","0","4","1469208","","2015-03-04 15:15:10","2013-12-05 07:39:35",""
"20394137","yii CPasswordHelper: hashPassword and verifyPassword","I think I'm missing something critical here. In the CPasswordHelper::hashPassword function we have lines:
$salt=self::generateSalt($cost);  
$hash=crypt($password,$salt);  

return $hash;

And in the CPasswordHelper::verifyPassword there is this line:
$test=crypt($password,$hash);  

return self::same($test, $hash);

What about the salt? To my understanding its not even beeing kept, but it doesn't make any sense, so I'm guessing I didn't understand it completely.
","CPasswordHelper works like PHP's functions password_hash() and password_verify(), they are wrappers around the crypt() function. When you generate a BCrypt hash, you will get a string of 60 characters, containing the salt.
// Hash a new password for storing in the database.
$hashToStoreInDb = password_hash($password, PASSWORD_BCRYPT);

The variable $hashToStoreInDb will now contain a hash-value like this:
$2y$10$nOUIs5kJ7naTuTFkBy1veuK0kSxUFXfuaOKdOKf9xYT0KKIGSJwFa
 |  |  |                     |
 |  |  |                     hash-value = K0kSxUFXfuaOKdOKf9xYT0KKIGSJwFa
 |  |  |
 |  |  salt = nOUIs5kJ7naTuTFkBy1veu
 |  |
 |  cost-factor = 10 = 2^10 iterations
 |
 hash-algorithm = 2y = BCrypt

The salt you can find after the third $, it is generated automatically by password_hash() using the random source of the operating system. Because the salt is included in the resulting string, the function password_verify(), or actually the wrapped crypt function, can extract it from there, and can calculate a hash with the same salt (and the same cost factor). Those two hashes are then comparable.
// Check if the hash of the entered login password, matches the stored hash.
// The salt and the cost factor will be extracted from $existingHashFromDb.
$isPasswordCorrect = password_verify($password, $existingHashFromDb);

","5831","<hash><yii><passwords><salt>","5","22","2","2015-03-04 15:15:10","20399775","0","4","1469208","","2015-03-04 15:15:10","2013-12-05 07:39:35",""
"2222383","Why does BCrypt.net GenerateSalt(31) return straight away?","I stumbled across BCrypt.net after reading Jeff Atwood's post about storing passwords which led me to Thomas Ptacek's recommendation to use BCrypt to store passwords. Which finally led me to this C# implementation of BCrypt
In the comments on the last link above someone asked ""Why do GenerateSalt(30) take for ever, but GenerateSalt(31) seems to take no time at all?""
I ran BCrypt.HashPassword(password, BCrypt.GenerateSalt(31)) and got my result in 0 milliseconds.
I've been running BCrypt.HashPassword(""password"", BCrypt.GenerateSalt(30)) for over 5 minutes now and still do not have a result.
I realize we'll probably not need a randomly generated 30 character salt to create our password hashes (or irreversible encryption in BCrypt's case) for years. EDIT I should have read the code a bit, logRounds doesn't have anything to do with the salt length. Thanks Aaronaught.
So, why does GenerateSalt(31) return a value almost instantly (when it should take about twice as long as GenerateSalt(30)?
UPDATE
here is the fix:
private byte[] CryptRaw(byte[] password, byte[] salt, int logRounds) {
    // ... snip ...
    uint rounds = 1U << logRounds;
    // ... snip
}

","If hashing with GenerateSalt(31) returns almost instantly, that's a bug. You should report that upstream (I have, for jBCrypt). :-)
By default, the log-rounds is 10. This means that (if I remember correctly), 1024 rounds is used. Each time you increment the log-rounds, the number of rounds is doubled.
At 30 log-rounds, you're doing 1073741824 rounds. That rightfully takes a long time. At 31 log-rounds, 2147483648 rounds should be being done, but I suspect that the particular implementation you're using overflows instead. :-(
","5821","<c#><salt><bcrypt><bcrypt.net>","22","10","2","2011-04-12 19:00:51","2222492","0","7","-1","","2017-05-23 12:17:43","2010-02-08 14:55:32",""
"2222383","Why does BCrypt.net GenerateSalt(31) return straight away?","I stumbled across BCrypt.net after reading Jeff Atwood's post about storing passwords which led me to Thomas Ptacek's recommendation to use BCrypt to store passwords. Which finally led me to this C# implementation of BCrypt
In the comments on the last link above someone asked ""Why do GenerateSalt(30) take for ever, but GenerateSalt(31) seems to take no time at all?""
I ran BCrypt.HashPassword(password, BCrypt.GenerateSalt(31)) and got my result in 0 milliseconds.
I've been running BCrypt.HashPassword(""password"", BCrypt.GenerateSalt(30)) for over 5 minutes now and still do not have a result.
I realize we'll probably not need a randomly generated 30 character salt to create our password hashes (or irreversible encryption in BCrypt's case) for years. EDIT I should have read the code a bit, logRounds doesn't have anything to do with the salt length. Thanks Aaronaught.
So, why does GenerateSalt(31) return a value almost instantly (when it should take about twice as long as GenerateSalt(30)?
UPDATE
here is the fix:
private byte[] CryptRaw(byte[] password, byte[] salt, int logRounds) {
    // ... snip ...
    uint rounds = 1U << logRounds;
    // ... snip
}

","I suspect that the bug is here:
private byte[] CryptRaw(byte[] password, byte[] salt, int logRounds) {
    // ... snip ...
    int rounds = 1 << logRounds;
    // ... snip
}

When you specify 31 for the logRounds, it computes that as 2^32, which can't fit in an int and overflows, so the hash is actually done in... er, zero passes.  The author should have used uint instead.  Easy to fix!

Also wanted to comment on this:

I realize we'll probably not need a randomly generated 30 characters salt to create our password hashes...

Note that the logRounds parameter does not refer to the number of characters/bytes in the salt, which is always 16.  It refers to the logarithmic base of the number of passes that the hash will take to compute; in other words it's a way to make bcrypt scale with Moore's Law, making the function several orders of magnitude more expensive to compute if computers ever get fast enough to crack existing hashes.
","5821","<c#><salt><bcrypt><bcrypt.net>","22","25","2","2011-04-12 19:00:51","2222492","0","7","-1","","2017-05-23 12:17:43","2010-02-08 14:55:32",""
"21915978","how does password hash+salt work","I though I understood hashing and salting passwords but it seems I have some misconceptions. I am creating a user account system for my website in nodejs.
The way I understood it was that when a user creates a password we generate a random salt, append it to the password and then hash that string. We can also add a work factor to make the hash work slowly and defend against brute force attacks. We store the salt along with the hash in our database and to validate a login attempt we repeat the above process (on the server) with the stored salt and the attempted password and check to see if the hashes match.
It seems that the bcrypt module in nodejs is not consistent with my interpretation of hashing. This is from an example at http://codetheory.in/using-the-node-js-bcrypt-module-to-hash-and-safely-store-passwords/
var salt = bcrypt.genSaltSync(10);
var hash = bcrypt.hashSync(""my password"", salt);

First off why is the work factor applied to the salt rather than the hash? If someone is attacking by brute force they would run the hash function correct? Isn't the hash the function we need to be slow?
I'm also confused by validation with bcrypt:
bcrypt.compareSync(""my password"", hash);

We need the hashes to be unique even if two users select the same password, this is the point of salt right? So why don't we do this?
bcrypt.compareSync(""my password""+salt, hash);

","salt contains number of rounds so bcrypt.hash(Sync) function knows how many rounds it has to do.
So does hash is not a simple hash, but a container with embedded salt.
","5619","<node.js><hash><salt><bcrypt>","11","3","2","2017-01-25 13:36:16","21916883","1","5","2399903","","2014-02-20 18:10:43","2014-02-20 18:03:34",""
"21915978","how does password hash+salt work","I though I understood hashing and salting passwords but it seems I have some misconceptions. I am creating a user account system for my website in nodejs.
The way I understood it was that when a user creates a password we generate a random salt, append it to the password and then hash that string. We can also add a work factor to make the hash work slowly and defend against brute force attacks. We store the salt along with the hash in our database and to validate a login attempt we repeat the above process (on the server) with the stored salt and the attempted password and check to see if the hashes match.
It seems that the bcrypt module in nodejs is not consistent with my interpretation of hashing. This is from an example at http://codetheory.in/using-the-node-js-bcrypt-module-to-hash-and-safely-store-passwords/
var salt = bcrypt.genSaltSync(10);
var hash = bcrypt.hashSync(""my password"", salt);

First off why is the work factor applied to the salt rather than the hash? If someone is attacking by brute force they would run the hash function correct? Isn't the hash the function we need to be slow?
I'm also confused by validation with bcrypt:
bcrypt.compareSync(""my password"", hash);

We need the hashes to be unique even if two users select the same password, this is the point of salt right? So why don't we do this?
bcrypt.compareSync(""my password""+salt, hash);

","SALT is degree of 2 number (from 4 to 31) - circles of iteration working of function creating hash. bcrypt take the salt, multiply 2 by itself salt times. And take this value to implement decode function to our string the total amount times. It's ""rounder"" of loop in bcrypt function.
Every time when you do:
bcrypt.hashSync(""my password"", salt)

bcrypt create NEW ""random"" string, every time use same input string and use the same salt we take the different output string, it's key idea of working bcrypt function, and this total result we'll save to our base.
Then we use:
bcrypt.compareSync(""my password"", hash);

And compareSync calculate if hash was created from string ""my password"". And if we into function compareSync add salt to our string (""my password"") we'll change the started string and never take true in this way. Because bcrypt will compare hash like if that was created this way:
bcrypt.hashSync(""my password""+salt, salt);

That's way we should use this construction:

create hash during create user data:

var salt = bcrypt.genSaltSync(10);
var hash = bcrypt.hashSync(""my password"", salt);

saving hash to db
next step authentication user during login like:
bcrypt.compareSync(""my password"", hash);

without any salt or parameters.
","5619","<node.js><hash><salt><bcrypt>","11","3","2","2017-01-25 13:36:16","21916883","1","5","2399903","","2014-02-20 18:10:43","2014-02-20 18:03:34",""
"23574005","FOSUserBundle - how is password salt applied?","For reasons I can't explain (NDA... and yeah, I know that sounds sketchy), I need to be able to log users into my system outside of the normal Symfony/FOSUserBundle login flow.  In order to do this, I need to know how FOSUserBundle applies its salt to the plain password, and I haven't found it yet.  So, a nudge in the right direction would be greatly appreciated.
My encoder is currently set as:
security:
    encoders:
        FOS\UserBundle\Model\UserInterface: sha512

","Your question can not get a precise answer because there is not only one encoder for passwords in Symfony. It mainly depends on the configuration you use but to give you the direct direction, you should take a look to the encoders located under the Symfony\Component\Security\Core\Encoder namespace and read the code. Then, you should understand how salt and password are combined together.
","5572","<symfony><fosuserbundle><salt>","2","3","2","2018-01-18 16:13:00","23580860","0","","399584","","2014-05-09 21:23:20","2014-05-09 21:09:24",""
"23574005","FOSUserBundle - how is password salt applied?","For reasons I can't explain (NDA... and yeah, I know that sounds sketchy), I need to be able to log users into my system outside of the normal Symfony/FOSUserBundle login flow.  In order to do this, I need to know how FOSUserBundle applies its salt to the plain password, and I haven't found it yet.  So, a nudge in the right direction would be greatly appreciated.
My encoder is currently set as:
security:
    encoders:
        FOS\UserBundle\Model\UserInterface: sha512

","You may be looking for this:
http://symfony.com/doc/current/book/security.html#determining-the-hashed-password
$factory = $this->get('security.encoder_factory');
$user = new Acme\UserBundle\Entity\User();   

$encoder = $factory->getEncoder($user);
$password = $encoder->encodePassword('plainpassword', $user->getSalt());
$user->setPassword($password);

","5572","<symfony><fosuserbundle><salt>","2","1","2","2018-01-18 16:13:00","23580860","0","","399584","","2014-05-09 21:23:20","2014-05-09 21:09:24",""
"30617791","How to get wordpress password using hash and salt key?","I forgot my wordpress admin password but i am able to get into my DB and have the hashed password and also i have salt key from my wp-config.php file.
Does anyone know how can i get my password back from above details.
I tried doing forgot password thing but i never got email to reset password.
","You can reset your password using database password field.
goto your database users table.
find password field. It can be seen as hash.
Generate new hash using this generator, http://www.danstools.com/md5-hash-generator/
replace new hash.
","5521","<wordpress><passwords><salt>","2","3","3","2018-07-25 07:41:10","30618279","3","","1463701","","2015-06-03 10:54:15","2015-06-03 10:42:25",""
"30617791","How to get wordpress password using hash and salt key?","I forgot my wordpress admin password but i am able to get into my DB and have the hashed password and also i have salt key from my wp-config.php file.
Does anyone know how can i get my password back from above details.
I tried doing forgot password thing but i never got email to reset password.
","
Open localhost/phpmyadmin
Open the database then table wp_users
Edit the corresponding row of user
Copy and keep the old password (for backup) 
Edit field `user_pass' and type value
Change Type to MD5 and then update the row. 

","5521","<wordpress><passwords><salt>","2","11","3","2018-07-25 07:41:10","30618279","3","","1463701","","2015-06-03 10:54:15","2015-06-03 10:42:25",""
"30617791","How to get wordpress password using hash and salt key?","I forgot my wordpress admin password but i am able to get into my DB and have the hashed password and also i have salt key from my wp-config.php file.
Does anyone know how can i get my password back from above details.
I tried doing forgot password thing but i never got email to reset password.
","Input a new password and generate its hash.
Then update password column in the user table through MySQL database with the new generated hash.
After that you can log in to the backend using the new password.
","5521","<wordpress><passwords><salt>","2","0","3","2018-07-25 07:41:10","30618279","3","","1463701","","2015-06-03 10:54:15","2015-06-03 10:42:25",""
"43861189","What is the best practice to salt a password with spring security in spring boot?","I'm creating a REST API in java for an online store with Spring Boot, I want to securely store user passwords in the database, 
for this I am using BCrypt that comes included with spring security, I use MySQL and JPA-Hibernate for persistence.
And I am implementing it as follows:
This is the user entity:
@Entity
@SelectBeforeUpdate
@DynamicUpdate
@Table (name = ""USER"")
public class User {

    @Id
    @GeneratedValue
    @Column(name = ""USER_ID"")
    private Long userId;

    @Column(name = ""ALIAS"")
    private String alias;

    @Column(name = ""NAME"")
    private String name;

    @Column(name = ""LAST_NAME"")
    private String lastName;

    @Column(name = ""TYPE"")
    private String type;

    @Column(name = ""PASSWORD"")
    private String password;

    public String getPassword() {
        return password;
    }

    /**
    * When adding the password to the user class the setter asks if it is necessary or not to add the salt, 
    * if this is necessary the method uses the method BCrypt.hashpw (password, salt), 
    * if it is not necessary to add the salt the string That arrives is added intact
    */
    public void setPassword(String password, boolean salt) {
        if (salt) {
            this.password = BCrypt.hashpw(password, BCrypt.gensalt());
        } else {
            this.password = password;
        }
    }

//Setters and Getters and etc.

}

This is the repository of the user class:
@Repository
public interface UserRepository extends JpaRepository<User, Long> {
}

This is the service of the user class:
@Service
public class UserService{
    private UserRepository userRepository;
    @Autowired
    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    public User addEntity(User user) {
      //Here we tell the password setter to generate the salt
        user.setPassword(user.getPassword(), true);
        return userRepository.save(user);
    }

    public User updateEntity(User user) {
        User oldUser = userRepository.findOne(user.getUserId());
        /*
        *This step is necessary to maintain the same password since if we do not do this 
        *in the database a null is generated in the password field, 
        *this happens since the JSON that arrives from the client application does not 
        *contain the password field, This is because to carry out the modification of 
        *the password a different procedure has to be performed
        */
        user.setPassword(oldUser.getPassword(), false);

        return userRepository.save(user);
    }

    /**
     * By means of this method I verify if the password provided by the client application 
     * is the same as the password that is stored in the database which is already saved with the salt, 
     * returning a true or false boolean depending on the case
     */
    public boolean isPassword(Object password, Long id) {
        User user = userRepository.findOne(id);
        //To not create an entity that only has a field that says password, I perform this mapping operation
        String stringPassword = (String)((Map)password).get(""password"");
        //This method generates boolean
        return BCrypt.checkpw(stringPassword, user.getPassword());
    }

    /**
     *This method is used to update the password in the database
     */
    public boolean updatePassword(Object passwords, Long id) {
        User user = userRepository.findOne(id);
        //Here it receive a JSON with two parameters old password and new password, which are transformed into strings
        String oldPassword = (String)((Map)passwords).get(""oldPassword"");
        String newPassword = (String)((Map)passwords).get(""newPassword"");

        if (BCrypt.checkpw(oldPassword, user.getPassword())){
            //If the old password is the same as the one currently stored in the database then the new password is updated 
            //in the database for this a new salt is generated
            user.setPassword(newPassword, true);
            //We use the update method, passing the selected user
            updateEntity(user);
            //We return a true boolean
            return true;
        }else {
            //If the old password check fails then we return a false boolean
            return false;
        }
    }

    //CRUD basic methods omitted because it has no case for the question 
}

This is the controller that exposes the API endpoints:
@RestController
@CrossOrigin
@RequestMapping(""/api/users"")
public class UserController implements{
    UserService userService;
    @Autowired
    public UserController(UserService userService) {
        this.userService = userService;
    }

    @RequestMapping( value = """", method = RequestMethod.POST )
    public User addEntity(@RequestBody User user) {
        return userService.addEntity(user);
    }

    @RequestMapping( value = """", method = RequestMethod.PUT )
    public User updateEntity(@RequestBody User user) {
        return userService.updateEntity(user);
    }

    @RequestMapping( value = ""/{id}/checkPassword"", method = RequestMethod.POST )
    public boolean isPassword(@PathVariable(value=""id"") Long id, @RequestBody Object password) {
        return userService.isPassword(password, id);
    }

    @RequestMapping( value = ""/{id}/updatePassword"", method = RequestMethod.POST )
    public boolean updatePassword(@PathVariable(value=""id"") Long id, @RequestBody Object password) {
        return userService.updatePassword(password, id);
    }
}

This is where my question comes, my method is working but I feel it is not the best way, I do not feel comfortable changing the password setter I would prefer to keep the standard form of a setter, as in the user service I think there is Opportunity to handle the user and password update differently, so try to use the @DynamicUpdate annotation in the entity but it simply does not work properly since the fields not provided in the update instead of leaving them as they were are saved Like nulls.
What I'm looking for is a better way to handle the security of passwords using Spring Boot.
","First of all you would like to have a unique field for each user in your online store (f.e. alias, or email), to use it as an identifier, without exposing id value to the end users.
Also, as I understand, you want to use Spring Security to secure your web application. Spring security uses ROLEs to indicate user authorities (f.e. ROLE_USER, ROLE_ADMIN). So it would be nice to have a field (a list, a separate UserRole entity) to keep track of user roles.
Let's assume, that you added unique constraint to User field alias (private String alias;) and added simple private String role; field. Now you want to set up Spring Security to keep '/shop' and all sub-resources (f.e. '/shop/search') open to everyone, unsecured, resource '/discounts' available only for registered users and resource '/admin' available for administrator only.
To implement it, you need to define several classes. Let's start with implementation of UserDetailsService (needed by Spring Security to get user information):
@Service
public class UserDetailsServiceImpl implements UserDetailsService {

private final UserRepository repository;

@Autowired
public UserDetailsServiceImpl(UserRepository repository) {
    this.repository = repository;
}

@Override
public UserDetails loadUserByUsername(String alias) {
    User user = repository.findByAlias(alias);
    if (user == null) {
        //Do something about it :) AFAIK this method must not return null in any case, so an un-/ checked exception might be a good option
        throw new RuntimeException(String.format(""User, identified by '%s', not found"", alias));
    }
    return new org.springframework.security.core.userdetails.User(
                           user.getAlias(), user.getPassword(),
                           AuthorityUtils.createAuthorityList(user.getRole()));
  }
}

Then, the main class for configuring Spring Security is one, that extends WebSecurityConfigurerAdapter (the example was taken from the application with a form based authentication, but you can adjust it for your needs):
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

@Autowired
private UserDetailsService userDetailsService;


@Override
protected void configure(HttpSecurity http) throws Exception {
    http
                .authorizeRequests()
                .antMatchers(""/"", ""/shop/**"").permitAll()
                .antMatchers(""/discounts/**"").hasRole(""USER"")
                .antMatchers(""/admin/**"").hasRole(""ADMIN"")
            .and()
                .formLogin()
                .usernameParameter(""alias"")
                .passwordParameter(""password"")
                .loginPage(""/login"").failureUrl(""/login?error"").defaultSuccessUrl(""/"")
                .permitAll()
            .and()
                .logout()
                .logoutUrl(""/logout"")
                .clearAuthentication(true)
                .invalidateHttpSession(true)
                .deleteCookies(""JSESSIONID"", ""remember-me"")
                .logoutSuccessUrl(""/"")
                .permitAll();
}


@Autowired
public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
    auth
            .userDetailsService(userDetailsService)
            .passwordEncoder(passwordEncoder());
}

@Bean
public PasswordEncoder passwordEncoder() {
    return new BCryptPasswordEncoder();
}

}

Then, in your UserService you can use something like:
...
@Autowired
private PasswordEncoder passwordEncoder;

public User addEntity(User user) {
...
    user.setPassword(passwordEncoder.encode(user.getPassword()))
...
}

All other checks (f.e. for login attempt or for accessing resource) Spring Security will do automatically, according to the configuration. There are many more things to setup and consider, but I hope I was able to explain the overall idea.
EDIT
Define bean as follows within any spring Component or Configuration
@Bean
public PasswordEncoder passwordEncoder() {
    return new BCryptPasswordEncoder();
}

Then autowire it in your UserService class
@Service
public class UserService {

    private final UserRepository userRepository;

    private final PasswordEncoder passwordEncoder;

    @Autowired
    public UserService(UserRepository userRepository, PasswordEncoder passwordEncoder) {
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
    }

    public User addEntity(User user) {
        user.setPassword(passwordEncoder.encode(user.getPassword());
        return userRepository.save(user);
    }

   ...

    public boolean isPassword(Object password, Long id) {
        User user = userRepository.findOne(id);
        String stringPassword = (String)((Map)password).get(""password"");
        return passwordEncoder.matches(stringPassword, user.getPassword());
    }

    public boolean updatePassword(Object passwords, Long id) {
        User user = userRepository.findOne(id);
        String oldPassword = (String)((Map)passwords).get(""oldPassword"");
        String newPassword = (String)((Map)passwords).get(""newPassword"");

        if (!passwordEncoder.matches(oldPassword, newPassword)) {
             return false;
        }
            user.setPassword(passwordEncoder.encode(newPassword));
            updateEntity(user);
            return true;

    }

    ...
}

After that you can keep simple setter in User class.
","5516","<java><jpa><spring-boot><spring-security><salt>","1","3","1","2017-05-12 08:10:20","43875887","0","0","","","","2017-05-09 04:32:47",""
"1734213","create random sha1 salt with javascript","can anyone recommend a good method to create a sha1 salt using javascript ?
","Check out this jQuery Plugin: http://plugins.jquery.com/project/sha1
","5486","<javascript><sha1><salt>","1","1","3","2013-01-01 00:11:54","1734230","0","1","","","","2009-11-14 13:21:34",""
"1734213","create random sha1 salt with javascript","can anyone recommend a good method to create a sha1 salt using javascript ?
","First, read up on what a salt is for to make sure you understand it. This and this will get you started, but you should read more.
Essentially, any random data of appropriate size will work for your purpose. Generally speaking, the fact that you are using SHA1 is irrelevant.
Just make sure it is large enough to prevent realistic rainbow table attacks.
","5486","<javascript><sha1><salt>","1","4","3","2013-01-01 00:11:54","1734230","0","1","","","","2009-11-14 13:21:34",""
"1734213","create random sha1 salt with javascript","can anyone recommend a good method to create a sha1 salt using javascript ?
","Although this is an older post, it still appears at the top of the results for a search on ""sha1 javascript"". (Excluding a question on how to Decode SHA1 using javascript?)
For anyone simply looking for a js encryption library, the following link might be helpful:
crypto-js
At this time, there's no built-in javascript mechanism for handling (en/de)cryption so it's likely your best bet unless you prefer using the jQuery plugin above.
","5486","<javascript><sha1><salt>","1","2","3","2013-01-01 00:11:54","1734230","0","1","","","","2009-11-14 13:21:34",""
"27413248","Why can bcrypt.hashpw be used both for hashing and verifying passwords?","Using bcrypt with Python 2.7, I can see that the example uses the bcrypt.hashpw to both hash a password for storage and verify that the given password matches a hashed one, like so:
Hashing
import bcrypt
password = b""somepassword""
hashed = bcrypt.hashpw(password, bcrypt.gensalt())

Ok, so far so good.  The given password is now hashed using bcrypt, so it is a string of hashed bytes.

Verifying
Now, here's the part that confuses me: to check that a plaintext password matches a hashed password, the same function is used, using the hashed password as a salt:
if bcrypt.hashpw(password, hashed) == hashed:
    print(""It Matches!"")
else:
    print(""It Does not Match :("")


What's happening?
Shouldn't the results of both bcrypt.hashpw calls be different, since the input salts are different?  
The only reasonable answer I can think of is that the salt is truncated to a fixed length before being prepended to the hashed password.  That way, when using the result of the hash, only the generated salt is left (after stripping off the trailing hashed password), and the result of hashing the password with the truncated salt is the same as the original.  I don't have any evidence to support this, though.
Why does this work? 
","In the expression bcrypt.hashpw(password, hashed) only the first couple of characters of hashed are used for the salt, not the entire string.
For instance, in this example how the output of hashpw() begins with the salt:
salt1 = b""$2a$12$w40nlebw3XyoZ5Cqke14M.""

print ""salt1:"", salt1
print ""hash1:"", bcrypt.hashpw(password, salt1)

prints:
salt1: $2a$12$w40nlebw3XyoZ5Cqke14M.
hash1: $2a$12$w40nlebw3XyoZ5Cqke14M.d.7cdO2wJhr/K6ZSDjODIxLrPmYzY/a

so there is a convention where the salt only goes up the first period or the first 29 characters.
","5459","<python><hash><salt><bcrypt>","6","8","2","2014-12-11 00:41:33","27413325","0","2","","","","2014-12-11 00:15:00",""
"27413248","Why can bcrypt.hashpw be used both for hashing and verifying passwords?","Using bcrypt with Python 2.7, I can see that the example uses the bcrypt.hashpw to both hash a password for storage and verify that the given password matches a hashed one, like so:
Hashing
import bcrypt
password = b""somepassword""
hashed = bcrypt.hashpw(password, bcrypt.gensalt())

Ok, so far so good.  The given password is now hashed using bcrypt, so it is a string of hashed bytes.

Verifying
Now, here's the part that confuses me: to check that a plaintext password matches a hashed password, the same function is used, using the hashed password as a salt:
if bcrypt.hashpw(password, hashed) == hashed:
    print(""It Matches!"")
else:
    print(""It Does not Match :("")


What's happening?
Shouldn't the results of both bcrypt.hashpw calls be different, since the input salts are different?  
The only reasonable answer I can think of is that the salt is truncated to a fixed length before being prepended to the hashed password.  That way, when using the result of the hash, only the generated salt is left (after stripping off the trailing hashed password), and the result of hashing the password with the truncated salt is the same as the original.  I don't have any evidence to support this, though.
Why does this work? 
","The hashpw function returns the salted hash (iterated many times, following bcyrpt spec), preceeded by the salt used (and with a dot as seperator).
In : salt = bcrypt.gensalt()
In : all(salt == bcrypt.hashpw(pw,salt)[:len(salt)] for pw in ('','12345','asdfgh'))
Out: True

If the second argument to bcrypt.hashpw is recognized as of the form VALID_SALT.VALID_HASH, then the salt is automagically set to VALID_SALT, thus producing the same salt-hash-pair as the original password on identical pw input.
","5459","<python><hash><salt><bcrypt>","6","5","2","2014-12-11 00:41:33","27413325","0","2","","","","2014-12-11 00:15:00",""
"12355231","How to use the Shiro's SaltedAuthenticationInfo?","I work on an authentication component for my application. I'm using the Apache Shiro API with salted password.
I create a new user with the salt like in this example :
ByteSource salt = randomNumberGenerator.nextBytes(32);      
byte[] byteTabSalt = salt.getBytes();   
String strSalt = byteArrayToHexString(byteTabSalt);         
String hashedPasswordBase64 = new Sha256Hash(inPassword, salt, 512).toBase64();

But I'dont understand how I am suppose to use the salt to auhtenticate a user in the doGetAuthenticationInfo method. My method must return a SaltedAuthenticatedInfo but I don't understand how I'm suppose to create it.
I don't understand the link between the Credential Matcher and the SaltedAuthenticateInfo.
Do I have to inform a credential matcher when I create password salts ?
Thanks for your help.
","SaltedAuthenticationInfo
SaltedAuthenticationInfo is an interface. The Shiro API provides a number of default implementations for convenience. As much as possible try to use one of the default implementations; avoid creating your own.
I suggest SimpleAuthenticationInfo which implements more than just SaltedAuthenticationInfo but will probably suffice for your purposes.
See org.apache.shiro.authc.SimpleAuthenticationInfo for more information.  
If you absolutely need to implement your own SaltedAuthenticationInfo, you should follow the documentation carefully.
See org.apache.shiro.authc.AuthenticationInfo and org.apache.shiro.authc.SaltedAuthenticationInfo for more information.  
HashedCredentialMatcher
boolean doCredentialsMatch(AuthenticationToken, AuthenticationInfo) actually takes care of the authentication logic.
This method takes the user-submitted credentials in the form of an AuthenticationToken and compares them to the previously stored credentials in the form of AuthenticationInfo.
You have to make sure that you pass all the necessary information to HashCredentialMatcher first though  (iterations, algorithm, and a salt in the SaltedAuthenticationInfo).  
pseudo-example use,
final int iterations = 50000;

AuthenticationToken authToken = ...;
SaltedAuthenticationInfo saltedAuthInfo = ...;

HashedCredentialsMatcher authenticator = 
     new HashedCredentialsMatcher(Sha256Hash.ALGORITHM_NAME);
authenticator.setHashIterations(iterations);

final boolean successfulAuthentication = 
     authenticator.doCredentialsMatch(authToken, saltedAuthInfo);

See org.apache.shiro.authc.credential.HashedCredentialsMatcher for more information.
Other security notes

Salt length
256-bit salt looks good. With a salt that large you minimize the risk of any two users sharing the same salt. Keep in mind when picking a salt length that the Birthday Paradox comes into play.  
Number of iterations
As a rule of thumb you should never use less than 10,000. You currently use 512,  
String hashedPasswordBase64 = new Sha256Hash(inPassword, salt, 512).toBase64();

Most hashing algorithms are extremely fast (sha256 included), you don't want to do any would-be hackers any favors. The more iterations you use the slower authentication will be, but it directly slows down cracking attempts as well. 
You will want to set the number of iterations as high as possible while still maintaining an acceptable responsiveness for your application. You may be surprised how high you can go.
Personally I tend to use millions; but I am paranoid and don't mind a slight delay
See Key Stretching for more information.
Personally I would avoid hard coding any of the hashing parameters (hashing algorithm, salt size, iteration count, ect)
By hard coding these values you limit your immediate ability to adapt and respond.  
Storing these values with the hashed credentials allows you to make a more dynamic authentication where you can configure and roll out stronger algorithms in the future with relatively little effort.  
For example your default hashing algorithm may be sha256 using 50,000 iterations and a 256-bit salt. In the future though 50,000 iterations may not be enough.
Without much fuss you would be able to change the preferred algorithm configuration to iterate 100,000 times for all new passwords. You don't have to worry about breaking old passwords because you are not changing the algorithm parameters that you stored with existing credentials.
You can also use this to change the salt-size or even the algorithm altogether.  
If desired you can then make everyone to change their password; forcing users pick up the new (hopefully stronger) preferred algorithm setup.
The Unix operating system has done this for years with /etc/shadow.  
It takes a bit more effort up front, but it's worth the investment. Strong authentication controls are critical.  

","5381","<java><salt><shiro>","6","7","2","2012-09-12 11:49:23","12375092","2","1","1269325","","2012-09-11 15:18:46","2012-09-10 15:54:26",""
"12355231","How to use the Shiro's SaltedAuthenticationInfo?","I work on an authentication component for my application. I'm using the Apache Shiro API with salted password.
I create a new user with the salt like in this example :
ByteSource salt = randomNumberGenerator.nextBytes(32);      
byte[] byteTabSalt = salt.getBytes();   
String strSalt = byteArrayToHexString(byteTabSalt);         
String hashedPasswordBase64 = new Sha256Hash(inPassword, salt, 512).toBase64();

But I'dont understand how I am suppose to use the salt to auhtenticate a user in the doGetAuthenticationInfo method. My method must return a SaltedAuthenticatedInfo but I don't understand how I'm suppose to create it.
I don't understand the link between the Credential Matcher and the SaltedAuthenticateInfo.
Do I have to inform a credential matcher when I create password salts ?
Thanks for your help.
","My error was to not create correctly the AuthenticationInfo which was compare the AuthenticationToken. So in the doGetAuthenticationInfo method of my own realm I do this :
Object principal   = arg0.getPrincipal();
Object credentials = arg0.getCredentials();
String realmName   = this.getName(); // to get the realm name

SimpleAuthenticationInfo simpleAuthenticationInfo = new SimpleAuthenticationInfo(principal, credentials, realmName);

CredentialsMatcher credentialsMatcher = this.getCredentialsMatcher();
boolean successfulAuthentication = credentialsMatcher.doCredentialsMatch(arg0, simpleAuthenticationInfo);

And so the boolean successfulAuthentication is true.
But I don't understand what's the difference between CredentialsMatcher and HashedCredentialsMatcher because that one was to false. I have to read Javadoc.
","5381","<java><salt><shiro>","6","0","2","2012-09-12 11:49:23","12375092","2","1","1269325","","2012-09-11 15:18:46","2012-09-10 15:54:26",""
"2192354","PHP crypt and salt - more clarification please","I was here yesterday and got some really great answers. I took what I got and put together, what I think will be a fairly secure algorithm. I'm having a problem using blowfish with a for loop that generates the salt.
I'm using base64 characters and a for loop to get a random string. I want to take this generated string and insert it into the crypt function as the salt.
Because the documentation about blowfish is so sparse and the PHP docs don't really even mention it, I'm sort of stabbing in the dark here.
The really strange thing is if you run this code the way it is now, it will not fail. Remove either the '$2a$07$' from above the for loop or from the crypt function and it will intermittently return an encrypted string. My understanding of blowfish is that the encrypted string must begin with '$2a$07$' and end in ""$' hence the concatenation in the crypt function. I really don't need the beginning string above the for loop and just wanted to get rid of it.
I also would like clarification about the best practice on storing the random salt, either in the database or by storing the output of the crypt function in the database?
Yesterday, there was no real code being thrown around, just discussion. I'd like to put some code together today and have something that is fairly secure in place. If anyone can come up with a better algorithm, I'm always open.
$base64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
$salt = '$2a$07$';

for($i=0; $i<60; $i++)
{
    $salt .= $base64[rand(0,63)];
}

return crypt('password', '$2a$07$'.$salt.'$');

","It seems that the crypt() dislikes + char in the salt, and a lot of other special chars as well (*, % etc). If you filter them out it should work on every try (and no need repeating the salt id string).
","5377","<php><encryption><salt><mcrypt>","9","3","2","2010-11-02 18:10:09","2192525","7","1","","","","2010-02-03 13:54:32",""
"2192354","PHP crypt and salt - more clarification please","I was here yesterday and got some really great answers. I took what I got and put together, what I think will be a fairly secure algorithm. I'm having a problem using blowfish with a for loop that generates the salt.
I'm using base64 characters and a for loop to get a random string. I want to take this generated string and insert it into the crypt function as the salt.
Because the documentation about blowfish is so sparse and the PHP docs don't really even mention it, I'm sort of stabbing in the dark here.
The really strange thing is if you run this code the way it is now, it will not fail. Remove either the '$2a$07$' from above the for loop or from the crypt function and it will intermittently return an encrypted string. My understanding of blowfish is that the encrypted string must begin with '$2a$07$' and end in ""$' hence the concatenation in the crypt function. I really don't need the beginning string above the for loop and just wanted to get rid of it.
I also would like clarification about the best practice on storing the random salt, either in the database or by storing the output of the crypt function in the database?
Yesterday, there was no real code being thrown around, just discussion. I'd like to put some code together today and have something that is fairly secure in place. If anyone can come up with a better algorithm, I'm always open.
$base64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
$salt = '$2a$07$';

for($i=0; $i<60; $i++)
{
    $salt .= $base64[rand(0,63)];
}

return crypt('password', '$2a$07$'.$salt.'$');

","I know this question is practically ancient history now, but for the benefit of anyone who finds it by searching google, there is a pretty detailed description of how the bcrypt/EksBlowfish salts work in the answer to this question: 
Why does crypt/blowfish generate the same hash with two different salts?
The short answer is, as caf said, it uses a base64 alphabet composed of [a-zA-Z0-9./], with $ as the null (NOT 0) terminating/padding character.  If you use any characters outside of that range, or a $ too early, it will either error out or not interpret the entirety of the salt.
","5377","<php><encryption><salt><mcrypt>","9","3","2","2010-11-02 18:10:09","2192525","7","1","","","","2010-02-03 13:54:32",""
"3566176","Salting passwords 101","Could someone please help me understand how salting works?
So far I understand the following:

Validate password
Generate a random string
Hash the password and the random string and concat them, then store them in the password field...

How do we store the salt, or know what it is when a user logs in? Do we store it in its own field? If we don't, how does the application figure out what the salt is? And if we do store it, doesn't it defeat the whole purpose?
","salt <- random
hash <- hash(password + salt)
store hash:salt

Later
input password
look up hash:salt
hash(password+salt)
compare with stored hash

Got it?
","5348","<salt><password-hash>","18","12","5","2014-01-30 09:44:22","3566375","1","7","445517","","2014-01-30 09:44:22","2010-08-25 13:15:20",""
"3566176","Salting passwords 101","Could someone please help me understand how salting works?
So far I understand the following:

Validate password
Generate a random string
Hash the password and the random string and concat them, then store them in the password field...

How do we store the salt, or know what it is when a user logs in? Do we store it in its own field? If we don't, how does the application figure out what the salt is? And if we do store it, doesn't it defeat the whole purpose?
","If you're using a well-known hashing algorithm, someone could have a list of a lot of possible passwords already hashed using that algorithm and compare the items from that list with a hashed password they want to crack (dictionary attack).
If you ""salt"" all passwords before hashing them, these dictionaries are useless, because they'd have to be created using your salt. 
","5348","<salt><password-hash>","18","1","5","2014-01-30 09:44:22","3566375","1","7","445517","","2014-01-30 09:44:22","2010-08-25 13:15:20",""
"3566176","Salting passwords 101","Could someone please help me understand how salting works?
So far I understand the following:

Validate password
Generate a random string
Hash the password and the random string and concat them, then store them in the password field...

How do we store the salt, or know what it is when a user logs in? Do we store it in its own field? If we don't, how does the application figure out what the salt is? And if we do store it, doesn't it defeat the whole purpose?
","Salt is combined with the password before hashing.  the password and salt clear values are concatenated and the resulting string is hashed.  this guarantees that even if two people were to have the same password you would have different resulting hashes. (also makes attacks known as dictionary attacks using rainbow tables much more difficult).
The salt is then stored in original/clear format along with the hash result.  Then later, when you want to verify the password you would do the original process again.  Combine the salt from the record with the password the user provided, hash the result, compare the hash.
You probably already know this.  but it's important to remember.  the salt must be generated randomly each time.  It must be different for each protected hash.  Often times the RNG is used to generate the salt.
So..for example:
user-password: ""mypassword""
random salt: ""abcdefg12345""
resulting-cleartext: ""mypassword:abcdefg12345"" (how you combine them is up to you.  as long as you use the same combination format every time).
hash the resulting cleartext: ""somestandardlengthhashbasedonalgorithm""  
In your database now you would store the hash and salt used.  I've seen it two ways:
method 1:
field1 - salt = ""abcdefg12345""
field2 - password_hash = ""somestandardlengthhashbasedonalgorithm""  
method 2:
field1 - password_hash = ""abcdefg12345:somestandardlengthhashbasedonalgorithm""  
In either case you have to load the salt and password hash out of your database and redo the hash for comparison
","5348","<salt><password-hash>","18","29","5","2014-01-30 09:44:22","3566375","1","7","445517","","2014-01-30 09:44:22","2010-08-25 13:15:20",""
"3566176","Salting passwords 101","Could someone please help me understand how salting works?
So far I understand the following:

Validate password
Generate a random string
Hash the password and the random string and concat them, then store them in the password field...

How do we store the salt, or know what it is when a user logs in? Do we store it in its own field? If we don't, how does the application figure out what the salt is? And if we do store it, doesn't it defeat the whole purpose?
","
How do we store the salt, or know what it is when a user logs in? Do we store it in its own field? 

Yes.

And if we do store it, doesn't it defeat the whole purpose?

No. The purpose of a salt is not being secret, but merely to prevent an attacker from amortizing the cost of computing rainbow tables over all sites in the world (not salt) or all users in your site (single salt used for all users).
","5348","<salt><password-hash>","18","3","5","2014-01-30 09:44:22","3566375","1","7","445517","","2014-01-30 09:44:22","2010-08-25 13:15:20",""
"3566176","Salting passwords 101","Could someone please help me understand how salting works?
So far I understand the following:

Validate password
Generate a random string
Hash the password and the random string and concat them, then store them in the password field...

How do we store the salt, or know what it is when a user logs in? Do we store it in its own field? If we don't, how does the application figure out what the salt is? And if we do store it, doesn't it defeat the whole purpose?
","According to Practical Cryptography (Neils Ferguson and Bruce Schneier), you should use salted, stretched hashes for maximum security.
x[0] := 0
x[i] := h(x[i-1] || p || s)  for i = 1, ..., r
K := x[r]

where
   h is the hash (SHA-1, SHA-256, etc.)
   K is the generated hashed password
   p is the plaintext password
   r is the number of rounds
   s is the randomly generated salt
   || is the concatenation operator

The salt value is a random number that is stored with the encrypted password. It does not need to remain secret.
Stretching is the act of performing the hash multiple times to make it computationally more difficult for a attacker to test many permutations of passwords. r should be chosen so that the computation takes about 200-1000ms on the user's computer. r may need to be increased as computers get faster.
","5348","<salt><password-hash>","18","2","5","2014-01-30 09:44:22","3566375","1","7","445517","","2014-01-30 09:44:22","2010-08-25 13:15:20",""
"17551419","Where to store password salt and how to get it","I'm in charge of doing the authentication in our .Net MVC 4 Web Application and I have hit a bump concerning password hashing, storing and authenticating.
Plan is to currently use 2 Salts, 1 Dynamic (Per User) and 1 Static (Web App Constant) and a strong Hashing function.
Given a simple User table that contains a username and password:

Do I store the per user salt in a column in the User Table?

My worries is that by doing so, I will have to get the user from the database in the web application memory with its username only. Is there some sort of attack where that could be problematic? 
Ideally I'd like to have this be a one step/one SQL Request authentication.
Am I worrying too much? Is there an alternative to a ""Per User"" salt where I can still do a one step authentication?
","The salt can be stored together with the password-hash, so you can create a salt per password instead of per user. It is a common practice for password hash functions (slow key-derivation function like BCrypt or PBKDF2), to return the salt cleartext as part of the password hash, what means that you can store salt and hash together in a single database field.
To verificate an entered password, you first have to search for the password-hash (using the username or email), and then the function can extract the used salt from the stored password-hash and use it to compare the hashes. That should actually answer your question, databases usually don't have appropriate functions to hash passwords, so you cannot do the verification within an SQL-query, the verification will be done in the code.
The second salt is actually called a pepper, the best way to add this server-side secret is, to encrypt the already hashed password with this secret. In contrast to the hash, this will be a two-way encryption, what allows to exchange the key should this once be necessary.
","5202","<database><security><salt><password-hash>","7","3","2","2014-01-30 09:50:39","17553470","1","1","445517","","2014-01-30 09:50:39","2013-07-09 14:51:46",""
"17551419","Where to store password salt and how to get it","I'm in charge of doing the authentication in our .Net MVC 4 Web Application and I have hit a bump concerning password hashing, storing and authenticating.
Plan is to currently use 2 Salts, 1 Dynamic (Per User) and 1 Static (Web App Constant) and a strong Hashing function.
Given a simple User table that contains a username and password:

Do I store the per user salt in a column in the User Table?

My worries is that by doing so, I will have to get the user from the database in the web application memory with its username only. Is there some sort of attack where that could be problematic? 
Ideally I'd like to have this be a one step/one SQL Request authentication.
Am I worrying too much? Is there an alternative to a ""Per User"" salt where I can still do a one step authentication?
","You don't need an external library for doing this. The framework has its own PBKDF2 implementation built in. I prefer storing the salt in a separate field in the database but that's just a matter of taste I guess.
I've written up my thoughts about password hashing here
","5202","<database><security><salt><password-hash>","7","1","2","2014-01-30 09:50:39","17553470","1","1","445517","","2014-01-30 09:50:39","2013-07-09 14:51:46",""
"25170063","Salt/Hash for Firebase Simple Login?","Firebase offers 'Simple Login' in which email/password is used for authentication. Does anyone know if firebase salts and hashes the password before storing it? I imagine that firebase would know enough to do so, but I just wanted to make sure, because I could not find anything on this after an hour of searching.
Anticipated follow up: If firebase in fact does not salt+hash the passwords, would the Simple Login work if I took the user's password, salted+hashed, and passed it onto firebase to store/check?
Thanks in advance!
","As of 2016
As of 2016, Firebase uses a modified version of scrypt to encrypt passwords. A library to perform the encryption was released on GitHub here. 
It uses both salt and hashes as shown in the sample:
# Params from the project's password hash parameters
base64_signer_key=""jxspr8Ki0RYycVU8zykbdLGjFQ3McFUH0uiiTvC8pVMXAn210wjLNmdZJzxUECKbm0QsEmYUSDzZvpjeJ9WmXA==""
base64_salt_separator=""Bw==""
rounds=8
memcost=14

# Params from the exported account
base64_salt=""42xEC+ixf3L2lw==""

# The users raw text password
password=""user1password""

# Generate the hash
# Expected output:
# lSrfV15cpx95/sZS2W9c9Kp6i/LVgQNDNC/qzrCnh1SAyZvqmZqAjTdn3aoItz+VHjoZilo78198JAdRuid5lQ==
echo `./scrypt ""$base64_signer_key"" ""$base64_salt"" ""$base64_salt_separator"" ""$rounds"" ""$memcost"" -P <<< ""$password""`

Pre-2016
According to this page (http://firebase.com/docs/web/guide/simple-login/password.html) Firebase uses bcrypt. 
According to the wiki page on bcrypt (http://en.wikipedia.org/wiki/Bcrypt), it both hashes and uses salt with that. 
","4944","<hash><firebase><salt><firebase-security><firebasesimplelogin>","4","7","1","2018-05-03 15:04:34","25181223","2","","","","","2014-08-06 20:58:30",""
"41214557","create md5 hash (salt+value)","How could I create the following PHP code in C# ?
Php code:
<?php
    $salt = ""salt"";
    $value = ""hello"";
    $password_hashed = md5($salt.$value);
?>

I would appreciate any kind of help. Been testing the following: 
https://stackoverflow.com/a/1300927/7312781
But it would only return a wrong string.
        var salt = System.Text.Encoding.UTF8.GetBytes(""salt"");
        var value = System.Text.Encoding.UTF8.GetBytes(""hello"");

        var hmacMD5 = new HMACMD5(salt);
        var saltedHash = hmacMD5.ComputeHash(value);

        string hex = BitConverter.ToString(saltedHash);
        MessageBox.Show(hex.Replace(""-"", """"));

Response: https://gyazo.com/340fe77979c1b0b531d07a8050ce66d1
The response should look like: 06decc8b095724f80103712c235586be
","Hope this will help, it's some modification from given link
class Program {
    static void Main(string[] args) {
        var provider = MD5.Create();
        string salt = ""S0m3R@nd0mSalt"";
        string password = ""SecretPassword"";
        byte[] bytes = provider.ComputeHash(Encoding.ASCII.GetBytes(salt + password));
        string computedHash = BitConverter.ToString(bytes);

        Console.WriteLine(computedHash.Replace(""-"", """"));
    }
}

","4912","<c#><md5><salt>","3","5","1","2016-12-19 01:23:06","41214644","3","","-1","","2017-05-23 12:25:45","2016-12-19 01:08:31",""
"348704","Client Side MD5 Hash with Time Salt","I want to salt a hashed username and password (submitted via http POST) in JS on the client-side with a higher-order time value (< 1 minute resolution) to avoid sending the username and password hash as a constant value that could be used for a log-in attempt via POST fabrication by an unauthorized user (i.e. a sniffer).
This will impose a short expiry on the usefulness of the passed hash.
If they inspect the JS and see that it uses this time salt, how much easier will it make the job of breaking the MD5 if they know what the salt is?
Stephen
","Their job will become infeasible, since you can't use a rainbow table at all if the hash is salted correctly, and you can't break MD5 in less than a minute, by which time the hash is invalidated anyway.
","4850","<time><hash><md5><salt>","4","1","4","2012-03-03 02:19:35","348801","0","","98117","","2012-02-05 21:21:18","2008-12-08 05:19:56",""
"348704","Client Side MD5 Hash with Time Salt","I want to salt a hashed username and password (submitted via http POST) in JS on the client-side with a higher-order time value (< 1 minute resolution) to avoid sending the username and password hash as a constant value that could be used for a log-in attempt via POST fabrication by an unauthorized user (i.e. a sniffer).
This will impose a short expiry on the usefulness of the passed hash.
If they inspect the JS and see that it uses this time salt, how much easier will it make the job of breaking the MD5 if they know what the salt is?
Stephen
","The salt doesn't need to be secret. In that sense, your solution is okay. 
MD5 is broken in some applications; this one might be alright, but why not use a hash from the SHA-2 family? For that matter, why not use SSL to provide a confidential channel, and better security?
","4850","<time><hash><md5><salt>","4","3","4","2012-03-03 02:19:35","348801","0","","98117","","2012-02-05 21:21:18","2008-12-08 05:19:56",""
"348704","Client Side MD5 Hash with Time Salt","I want to salt a hashed username and password (submitted via http POST) in JS on the client-side with a higher-order time value (< 1 minute resolution) to avoid sending the username and password hash as a constant value that could be used for a log-in attempt via POST fabrication by an unauthorized user (i.e. a sniffer).
This will impose a short expiry on the usefulness of the passed hash.
If they inspect the JS and see that it uses this time salt, how much easier will it make the job of breaking the MD5 if they know what the salt is?
Stephen
","The time-based salt will not make MD5 any easier to break. You're still relying on 1) the user having a good password to defeat brute force calculations, and 2) MD5 being a decent hash. That's the basic answer to your question. However, this may not be a good idea anyway. Some comments--
Unless you can ensure the client or server's time are synchronized (or you use Javascript to fake a synchronization), the client would have to send the time it used as salt. The server would have to decide if the time used was close enough to the server's time. 
Even if synchronized, you'd probably have to accept hashes plus or minus a minute or so because of latency on the Internet. Another problem is that if I'm sniffing I could immediately reuse this hash as long as I'm still within this time window.
Because of the problems above a better idea is to use a one-time server-assigned salt with the hash since it sounds like you don't want to use SSL. In other words, everytime a login form is sent to the client, the server would generate a random, unique salt string, sending it to the client and keep track that this is an acceptable salt. Then the client uses that as salt with the password. After this is submitted once, the server discards this as an acceptable salt string. No two hashes should ever be the same. The downside of this is you have to keep track of these acceptable salt strings.
","4850","<time><hash><md5><salt>","4","2","4","2012-03-03 02:19:35","348801","0","","98117","","2012-02-05 21:21:18","2008-12-08 05:19:56",""
"348704","Client Side MD5 Hash with Time Salt","I want to salt a hashed username and password (submitted via http POST) in JS on the client-side with a higher-order time value (< 1 minute resolution) to avoid sending the username and password hash as a constant value that could be used for a log-in attempt via POST fabrication by an unauthorized user (i.e. a sniffer).
This will impose a short expiry on the usefulness of the passed hash.
If they inspect the JS and see that it uses this time salt, how much easier will it make the job of breaking the MD5 if they know what the salt is?
Stephen
","you could use code obfuscation to make the salt harder to find
","4850","<time><hash><md5><salt>","4","-2","4","2012-03-03 02:19:35","348801","0","","98117","","2012-02-05 21:21:18","2008-12-08 05:19:56",""
"5117464","WebMatrix WebSecurity PasswordSalt","I am using WebMatrix and have built a website based on the ""StarterSite"". In this starter site you get a nice basic layout - including registration, login, forgot password pages etc...
I've noticed that in the database that the ""webpages_Membership"" table has a column named ""PasswordSalt"". After creating a few new user accounts, this column always remains blank. So I'm assuming that no password salt (not even a default one) is in use.
Obviously this is not the best practice, however I cannot seem to find any documentation that tells me how to set or manage the password salt. 
How can I set the password salt with the WebSecurity Helper?
","As of the RTM release of WebMatrix/ASP.NET Web Pages, the salt feature/column is unused.
If you open up the Web Pages source, you'll see the db classes littered with references like
INSERT INTO ["" + MembershipTableName + ""] (UserId, [Password], PasswordSalt

...
VALUES (uid, hashedPassword,String.Empty /* salt column is unused */

shortened for emphasis
There are definately ways to override and implement this behavior, first being:

override System.WebData.SimpleMembershipProvider.CreateAccount()

or

extend with System.WebData.SimpleMembershipProvider.CreateAccountWithPasswordSalt()

not going to go into detail there though unless you request, as your usage of WebMatrix and a template suggests you probably don't wanna mess with rewriting a ton of your own C#/ASP code for this project.
","4834","<c#><asp.net-mvc><passwords><webmatrix><salt>","27","4","2","2013-03-01 19:42:25","10416811","0","2","227294","","2013-03-01 19:42:25","2011-02-25 12:53:09",""
"5117464","WebMatrix WebSecurity PasswordSalt","I am using WebMatrix and have built a website based on the ""StarterSite"". In this starter site you get a nice basic layout - including registration, login, forgot password pages etc...
I've noticed that in the database that the ""webpages_Membership"" table has a column named ""PasswordSalt"". After creating a few new user accounts, this column always remains blank. So I'm assuming that no password salt (not even a default one) is in use.
Obviously this is not the best practice, however I cannot seem to find any documentation that tells me how to set or manage the password salt. 
How can I set the password salt with the WebSecurity Helper?
","The above answer gives the impression that there is no salting applied when using WebSecurity SimpleMembershipProvider. 
That is not true. Indeed the database salt field is not used, however this does not indicate that there is no salt generated when hashing the password. 
In WebSecuritys SimpleMembershipProvider the PBKDF2 algo is used, the random salt is generated by the StaticRandomNumberGenerator and stored in the password field with the hash:
byte[] outputBytes = new byte[1 + SALT_SIZE + PBKDF2_SUBKEY_LENGTH];
Buffer.BlockCopy(salt, 0, outputBytes, 1, SALT_SIZE); 
Buffer.BlockCopy(subkey, 0, outputBytes, 1 + SALT_SIZE, PBKDF2_SUBKEY_LENGTH);
return Convert.ToBase64String(outputBytes);

","4834","<c#><asp.net-mvc><passwords><webmatrix><salt>","27","36","2","2013-03-01 19:42:25","10416811","0","2","227294","","2013-03-01 19:42:25","2011-02-25 12:53:09",""
"2177796","Am I misunderstanding what a hash salt is?","I am working on adding hash digest generating functionality to our code base.  I wanted to use a String as a hash salt so that a pre-known key/passphrase could be prepended to whatever it was that needed to be hashed.  Am I misunderstanding this concept?
","You are understanding the concept perfectly.  Just make sure the prepended salt is repeatable each and every time.
","4773","<hash><salt>","12","3","5","2015-05-04 07:07:36","2178251","2","4","","","","2010-02-01 15:34:49",""
"2177796","Am I misunderstanding what a hash salt is?","I am working on adding hash digest generating functionality to our code base.  I wanted to use a String as a hash salt so that a pre-known key/passphrase could be prepended to whatever it was that needed to be hashed.  Am I misunderstanding this concept?
","If I'm understanding you correctly, it sounds like you've got it right. The psuedocode for the process looks something like:
string saltedValue = plainTextValue + saltString;
// or string saltedalue = saltString + plainTextValue;

Hash(saltedValue);

The Salt just adds another level of complexity for people trying to get at your information.
","4773","<hash><salt>","12","2","5","2015-05-04 07:07:36","2178251","2","4","","","","2010-02-01 15:34:49",""
"2177796","Am I misunderstanding what a hash salt is?","I am working on adding hash digest generating functionality to our code base.  I wanted to use a String as a hash salt so that a pre-known key/passphrase could be prepended to whatever it was that needed to be hashed.  Am I misunderstanding this concept?
","And it's even better if the salt is different for each encrypted phrase since each salt requires its own rainbow table.
","4773","<hash><salt>","12","0","5","2015-05-04 07:07:36","2178251","2","4","","","","2010-02-01 15:34:49",""
"2177796","Am I misunderstanding what a hash salt is?","I am working on adding hash digest generating functionality to our code base.  I wanted to use a String as a hash salt so that a pre-known key/passphrase could be prepended to whatever it was that needed to be hashed.  Am I misunderstanding this concept?
","A salt is a random element which is added to the input of a cryptographic function, with the goal of impacting the processing and output in a distinct way upon each invocation. The salt, as opposed to a ""key"", is not meant to be confidential.
One century ago, cryptographic methods for encryption or authentication were ""secret"". Then, with the advent of computers, people realized that keeping a method completely secret was difficult, because this meant keeping software itself confidential. Something which is regularly written to a disk, or incarnated as some dedicated hardware, has trouble being kept confidential. So the researchers split the ""method"" into two distinct concepts: the algorithm (which is public and becomes software and hardware) and the key (a parameter to the algorithm, present in volatile RAM only during processing). The key concentrates the secret and is pure data. When the key is stored in the brain of a human being, it is often called a ""password"" because humans are better at memorizing words than bits.
Then the key itself was split later on. It turned out that, for proper cryptographic security, we needed two things: a confidential parameter, and a variable parameter. Basically, reusing the same key for distinct usages tends to create trouble; it often leaks information. In some cases (especially stream ciphers, but also for hashing passwords), it leaks too much and leads to successful attacks. So there is often a need for variability, something which changes every time the cryptographic method runs. Now the good part is that most of the time, variability and secret need not be merged. That is, we can separate the confidential from the variable. So the key was split into:

the secret key, often called ""the key"";
a variable element, usually chosen at random, and called ""salt"" or ""IV"" (as ""Initial Value"") depending on the algorithm type.

Only the key needs to be secret. The variable element needs to be known by all involved parties but it can be public. This is a blessing because sharing a secret key is difficult; systems used to distribute such a secret would find it expensive to accommodate a variable part which changes every time the algorithm runs.
In the context of storing hashed passwords, the explanation above becomes the following:

""Reusing the key"" means that two users happen to choose the same password. If passwords are simply hashed, then both users will get the same hash value, and this will show. Here is the leakage.
Similarly, without a hash, an attacker could use precomputed tables for fast lookup; he could also attack thousands of passwords in parallel. This still uses the same leak, only in a way which demonstrates why this leak is bad.
Salting means adding some variable data to the hash function input. That variable data is the salt. The point of the salt is that two distinct users should use, as much as possible, distinct salts. But password verifiers need to be able to recompute the same hash from the password, hence they must have access to the salt.

Since the salt must be accessible to verifiers but needs not be secret, it is customary to store the salt value along with the hash value. For instance, on a Linux system, I may use this command:
openssl passwd -1 -salt ""zap"" ""blah""

This computes a hashed password, with the hash function MD5, suitable for usage in the /etc/password or /etc/shadow file, for the password ""blah"" and the salt ""zap"" (here, I choose the salt explicitly, but under practical conditions it should be selected randomly). The output is then:
$1$zap$t3KZajBWMA7dVxwut6y921

in which the dollar signs serve as separators. The initial ""1"" identifies the hashing method (MD5). The salt is in there, in cleartext notation. The last part is the hash function output.
There is a specification (somewhere) on how the salt and password are sent as input to the hash function (at least in the glibc source code, possibly elsewhere).
Edit: in a ""login-and-password"" user authentication system, the ""login"" could act as a passable salt (two distinct users will have distinct logins) but this does not capture the situation of a given user changing his password (whether the new password is identical to an older password will leak).
","4773","<hash><salt>","12","19","5","2015-05-04 07:07:36","2178251","2","4","","","","2010-02-01 15:34:49",""
"2177796","Am I misunderstanding what a hash salt is?","I am working on adding hash digest generating functionality to our code base.  I wanted to use a String as a hash salt so that a pre-known key/passphrase could be prepended to whatever it was that needed to be hashed.  Am I misunderstanding this concept?
","Its worth mentioning that even though the salt should be different for each password usage, your salt should in NO WAY be computed FROM the password itself!  This sort of thing has the practical upshot of completely invalidating your security.
","4773","<hash><salt>","12","0","5","2015-05-04 07:07:36","2178251","2","4","","","","2010-02-01 15:34:49",""
"5549102","Problems with Python MD5, SHA512 (+salt) encryption","I'm trying to understand how does Linux encrypt our password on the etc/shadow file, so I've dont a new virtual 'test' user to make some test:
user: newuser
password: usrpw123
Generated salt: Ii4CGbr7
So the OS makes me the following line on the etc/shadow file, using a SHA512 encryptation system ($6$):    newuser:$6$Ii4CGbr7$IOua8/oPV79Yp.BwzpxlSHjmCvRfTomZ.bhEvjZV2x5qhrvk82lZVrEtWQQej2pOWMdN7hvKwNgvCXKFQm5CB/:15069:0:99999:7:::
Now, I take the SHA512 module from python and try this:
import hashlib
m = hashlib.sha512()
m.update('Ii4CGbr7'+'usrpw123')
print m.hexdigest

This gives me the following hash as a result:
c73156daca3e31125ce457f1343201cc8a26400b2974440af2cc72687922b48b6631d21c186796ea2756ad987a996d2b261fe9ff3af4cc81e14c3029eac5df55
As you can see, it's different than the other one on the /etc/shadow file, and I dont know why if I'm using the same salt+password to generate the hash.
Can someone give me a hand and explain me more or less why this happens?
And also, why does the /etc/shadow files generates a hash with some dots (.)?
Thanks
","The fields in /etc/shadow are not built or interpreted the way you think they are.  You'll want to read the man page for details, but the most obvious difference is that it uses an unusual base64 encoding for both the salt and the hash.
","4768","<python><md5><salt><sha><sha512>","6","6","3","2014-02-26 18:25:23","5549309","3","2","168352","","2011-04-05 08:46:34","2011-04-05 08:22:11",""
"5549102","Problems with Python MD5, SHA512 (+salt) encryption","I'm trying to understand how does Linux encrypt our password on the etc/shadow file, so I've dont a new virtual 'test' user to make some test:
user: newuser
password: usrpw123
Generated salt: Ii4CGbr7
So the OS makes me the following line on the etc/shadow file, using a SHA512 encryptation system ($6$):    newuser:$6$Ii4CGbr7$IOua8/oPV79Yp.BwzpxlSHjmCvRfTomZ.bhEvjZV2x5qhrvk82lZVrEtWQQej2pOWMdN7hvKwNgvCXKFQm5CB/:15069:0:99999:7:::
Now, I take the SHA512 module from python and try this:
import hashlib
m = hashlib.sha512()
m.update('Ii4CGbr7'+'usrpw123')
print m.hexdigest

This gives me the following hash as a result:
c73156daca3e31125ce457f1343201cc8a26400b2974440af2cc72687922b48b6631d21c186796ea2756ad987a996d2b261fe9ff3af4cc81e14c3029eac5df55
As you can see, it's different than the other one on the /etc/shadow file, and I dont know why if I'm using the same salt+password to generate the hash.
Can someone give me a hand and explain me more or less why this happens?
And also, why does the /etc/shadow files generates a hash with some dots (.)?
Thanks
","There is an algorithm for generating the password hashes found in /etc/shadow.
See this document for an explanation:
http://www.akkadia.org/drepper/SHA-crypt.txt
There's an implementation of this in python here:
http://packages.python.org/passlib/lib/passlib.hash.sha512_crypt.html
","4768","<python><md5><salt><sha><sha512>","6","6","3","2014-02-26 18:25:23","5549309","3","2","168352","","2011-04-05 08:46:34","2011-04-05 08:22:11",""
"5549102","Problems with Python MD5, SHA512 (+salt) encryption","I'm trying to understand how does Linux encrypt our password on the etc/shadow file, so I've dont a new virtual 'test' user to make some test:
user: newuser
password: usrpw123
Generated salt: Ii4CGbr7
So the OS makes me the following line on the etc/shadow file, using a SHA512 encryptation system ($6$):    newuser:$6$Ii4CGbr7$IOua8/oPV79Yp.BwzpxlSHjmCvRfTomZ.bhEvjZV2x5qhrvk82lZVrEtWQQej2pOWMdN7hvKwNgvCXKFQm5CB/:15069:0:99999:7:::
Now, I take the SHA512 module from python and try this:
import hashlib
m = hashlib.sha512()
m.update('Ii4CGbr7'+'usrpw123')
print m.hexdigest

This gives me the following hash as a result:
c73156daca3e31125ce457f1343201cc8a26400b2974440af2cc72687922b48b6631d21c186796ea2756ad987a996d2b261fe9ff3af4cc81e14c3029eac5df55
As you can see, it's different than the other one on the /etc/shadow file, and I dont know why if I'm using the same salt+password to generate the hash.
Can someone give me a hand and explain me more or less why this happens?
And also, why does the /etc/shadow files generates a hash with some dots (.)?
Thanks
","I fell into the same trap as everything that I read lead me to believe you could retrieve the results the same way you have it written.
I was able to determine the password by using the salt and password using crypt.crypt()
import crypt
crypt.crypt(password, salt)

salt: $6$Ii4CGbr7
password: usrpw123
doesn't exactly use the hashlib library but it works.
","4768","<python><md5><salt><sha><sha512>","6","2","3","2014-02-26 18:25:23","5549309","3","2","168352","","2011-04-05 08:46:34","2011-04-05 08:22:11",""
"1194318","is a GUID a good salt? is my register/login process got any flaw?","If my table inside the database look like:
 userid uniqueidentifier
 username varchar(20)
 password varbinary(max)

When the user submit(to register), I send the user/pass to a stored procedure.
The stored procedure create a new GUID(Using NEWID()) then I use the HashBytes(sha1) function of SQL Server to create the password based on the GUID+password provided then I insert the values into the table above.
When the user submit(to login), I send the user/pass to a stored procedure.
The stored procedure look for the username and grab the userid to compare the hashbyte(sha1) of guid+password with the password field.
do you see any flaw inside that logic? 
","That's pretty standard - a guid would be fine for a salt. The point of a salt is to prevent Rainbow attacks, and pretty much any value that's random (or even if not random, then at the very least, different) for each user will do the trick.
","4573","<sql-server-2005><hash><guid><salt>","16","11","5","2009-07-28 20:45:44","1194353","0","4","40868","","2009-07-28 15:07:28","2009-07-28 14:05:08",""
"1194318","is a GUID a good salt? is my register/login process got any flaw?","If my table inside the database look like:
 userid uniqueidentifier
 username varchar(20)
 password varbinary(max)

When the user submit(to register), I send the user/pass to a stored procedure.
The stored procedure create a new GUID(Using NEWID()) then I use the HashBytes(sha1) function of SQL Server to create the password based on the GUID+password provided then I insert the values into the table above.
When the user submit(to login), I send the user/pass to a stored procedure.
The stored procedure look for the username and grab the userid to compare the hashbyte(sha1) of guid+password with the password field.
do you see any flaw inside that logic? 
","Why are you re-inventing login when you don't understand nonces? 

Doing anything crypto-related is hard. Experts make mistakes which are missed by other experts for decades. The rest of us are even worse.
There are a large number of off-the-shelf authentication systems available for free. Nearly all of them will be better implemented and more flexible than something you roll yourself.

Update based on new details of question from comments. For a Windows GUI app talking to SQL Server, my authentication choices would start with:

Domain authentication (easy, but requires domains).
Cardspace. Not hard, very flexible, but requires client infrastructure.
SQL Server mixed mode authentication (easy, but inflexible). 
Kerberos via SSPI (harder, but very configurable). 

","4573","<sql-server-2005><hash><guid><salt>","16","-1","5","2009-07-28 20:45:44","1194353","0","4","40868","","2009-07-28 15:07:28","2009-07-28 14:05:08",""
"1194318","is a GUID a good salt? is my register/login process got any flaw?","If my table inside the database look like:
 userid uniqueidentifier
 username varchar(20)
 password varbinary(max)

When the user submit(to register), I send the user/pass to a stored procedure.
The stored procedure create a new GUID(Using NEWID()) then I use the HashBytes(sha1) function of SQL Server to create the password based on the GUID+password provided then I insert the values into the table above.
When the user submit(to login), I send the user/pass to a stored procedure.
The stored procedure look for the username and grab the userid to compare the hashbyte(sha1) of guid+password with the password field.
do you see any flaw inside that logic? 
","As describe, it's not clear how the mechanism works - I assume the userid field contains the generated GUID (otherwise I don't see how you retrieve it for comparison).
There are different types of GUID, not all of them random. But then, randomness is not really required for password salting. All in all, your approach looks fine, though you might consider performing the hashing multiple times (""key strengthening"") to improve security further.
","4573","<sql-server-2005><hash><guid><salt>","16","0","5","2009-07-28 20:45:44","1194353","0","4","40868","","2009-07-28 15:07:28","2009-07-28 14:05:08",""
"1194318","is a GUID a good salt? is my register/login process got any flaw?","If my table inside the database look like:
 userid uniqueidentifier
 username varchar(20)
 password varbinary(max)

When the user submit(to register), I send the user/pass to a stored procedure.
The stored procedure create a new GUID(Using NEWID()) then I use the HashBytes(sha1) function of SQL Server to create the password based on the GUID+password provided then I insert the values into the table above.
When the user submit(to login), I send the user/pass to a stored procedure.
The stored procedure look for the username and grab the userid to compare the hashbyte(sha1) of guid+password with the password field.
do you see any flaw inside that logic? 
","As Craig Stuntz noted, you should not be trying to do crypto on your own.  The defition of salt is here.  As it says, this should be random, and your GUID may not be random, and therefore you may have information leekage, and decreased security.  That being said, it depends on how much security you want for your system.  If this is not a large application, then you may be able to get away with your current system.
","4573","<sql-server-2005><hash><guid><salt>","16","0","5","2009-07-28 20:45:44","1194353","0","4","40868","","2009-07-28 15:07:28","2009-07-28 14:05:08",""
"1194318","is a GUID a good salt? is my register/login process got any flaw?","If my table inside the database look like:
 userid uniqueidentifier
 username varchar(20)
 password varbinary(max)

When the user submit(to register), I send the user/pass to a stored procedure.
The stored procedure create a new GUID(Using NEWID()) then I use the HashBytes(sha1) function of SQL Server to create the password based on the GUID+password provided then I insert the values into the table above.
When the user submit(to login), I send the user/pass to a stored procedure.
The stored procedure look for the username and grab the userid to compare the hashbyte(sha1) of guid+password with the password field.
do you see any flaw inside that logic? 
","If security is the primary concern, I'd rather NOT use a GUID for the salt value.
GUID's come in different ""types"", with some being more ""random"" than others.  However, even the best type of GUID (this would be V4-type GUID's from a ""randomness"" perspective) are not really suitable for cryptographic functions.
From the Wikipedia article on GUID's:

V4 GUIDs use the later algorithm,
  which is a pseudo-random number. These
  have a ""4"" in the same position, for
  example
  {38a52be4-9352-453e-af97-5c3b448652f0}.
  More specifically, the 'data3' bit
  pattern would be 0001xxxxxxxxxxxx in
  the first case, and 0100xxxxxxxxxxxx
  in the second. Cryptanalysis of the
  WinAPI GUID generator shows that,
  since the sequence of V4 GUIDs is
  pseudo-random, given the initial state
  one can predict up to next 250 000
  GUIDs returned by the function
  UuidCreate. This is why GUIDs
  should not be used in cryptography, e.
  g., as random keys.

","4573","<sql-server-2005><hash><guid><salt>","16","4","5","2009-07-28 20:45:44","1194353","0","4","40868","","2009-07-28 15:07:28","2009-07-28 14:05:08",""
"13398246","Validate a salted hash","I am new to C# and this is my first question here so I apologize in advance for any faux pas.
Context:
When a user registers I call the CreateSaltedHash() method and pass it the user inputted password from the text field. This method salts and hashes the password before storing it in the Password column of my User table.
Question:
How should I validate the password when a user tries to log in?
If I call the CreateSaltedHash() method again it will not match because of the random salt.
Should I be storing the salts in a separate column? Should I be using a delimiter when generating the salted hash? What is the most secure way of validating the input password against the salted and hashed password?
Code:
This is what I have so far.
public class PasswordHash
{
    public const int SALT_BYTES = 32;

    /*
     * Method to create a salted hash
     */
    public static byte[] CreateSaltedHash(string password)
    {
        RNGCryptoServiceProvider randromNumberGenerator = new RNGCryptoServiceProvider();
        byte[] salt = new byte[SALT_BYTES];
        randromNumberGenerator.GetBytes(salt);
        HashAlgorithm hashAlgorithm = new SHA256Managed();
        byte[] passwordByteArray = Encoding.UTF8.GetBytes(password);
        byte[] passwordAndSalt = new byte[passwordByteArray.Length + SALT_BYTES];
        for (int i = 0; i < passwordByteArray.Length; i++)
        {
            passwordAndSalt[i] = passwordByteArray[i];
        }
        for (int i = 0; i < salt.Length; i++)
        {
            passwordAndSalt[passwordByteArray.Length + i] = salt[i];
        }
        return hashAlgorithm.ComputeHash(passwordAndSalt);
    }

    public static bool OkPassword(string password)
    {
        //This is where I want to validate the password before logging in.
    }
}


Calling the method in the Register class.
User user= new User();
user.password = PasswordHash.CreateSaltedHash(TextBoxUserPassword.Text);

","When you first generate the hash, you need to store both the salt and the final hash - then re-use that same salt for future comparisons.
So you'd change your CreateSaltedHash method to take a password and a salt, and write a new CreateSalt method to generate the salt when a password is created/changed which is stored alongside the final hash.
","4564","<c#><hash><salt><password-hash>","9","2","10","2014-01-30 09:40:52","13398306","4","1","445517","","2014-01-30 09:40:52","2012-11-15 13:17:10",""
"13398246","Validate a salted hash","I am new to C# and this is my first question here so I apologize in advance for any faux pas.
Context:
When a user registers I call the CreateSaltedHash() method and pass it the user inputted password from the text field. This method salts and hashes the password before storing it in the Password column of my User table.
Question:
How should I validate the password when a user tries to log in?
If I call the CreateSaltedHash() method again it will not match because of the random salt.
Should I be storing the salts in a separate column? Should I be using a delimiter when generating the salted hash? What is the most secure way of validating the input password against the salted and hashed password?
Code:
This is what I have so far.
public class PasswordHash
{
    public const int SALT_BYTES = 32;

    /*
     * Method to create a salted hash
     */
    public static byte[] CreateSaltedHash(string password)
    {
        RNGCryptoServiceProvider randromNumberGenerator = new RNGCryptoServiceProvider();
        byte[] salt = new byte[SALT_BYTES];
        randromNumberGenerator.GetBytes(salt);
        HashAlgorithm hashAlgorithm = new SHA256Managed();
        byte[] passwordByteArray = Encoding.UTF8.GetBytes(password);
        byte[] passwordAndSalt = new byte[passwordByteArray.Length + SALT_BYTES];
        for (int i = 0; i < passwordByteArray.Length; i++)
        {
            passwordAndSalt[i] = passwordByteArray[i];
        }
        for (int i = 0; i < salt.Length; i++)
        {
            passwordAndSalt[passwordByteArray.Length + i] = salt[i];
        }
        return hashAlgorithm.ComputeHash(passwordAndSalt);
    }

    public static bool OkPassword(string password)
    {
        //This is where I want to validate the password before logging in.
    }
}


Calling the method in the Register class.
User user= new User();
user.password = PasswordHash.CreateSaltedHash(TextBoxUserPassword.Text);

","
Should I be storing the salts in a separate column?

Yes.

Should I be using a delimiter when generating the salted hash?

Not necessary, but it also won't hurt as long as you include the same delimiter when validating.

What is the most secure way of validating the input password against the salted and hashed password?

SHA512, SHA-2 or -3 would be more secure than SHA256, but do you need that much more security?
","4564","<c#><hash><salt><password-hash>","9","0","10","2014-01-30 09:40:52","13398306","4","1","445517","","2014-01-30 09:40:52","2012-11-15 13:17:10",""
"13398246","Validate a salted hash","I am new to C# and this is my first question here so I apologize in advance for any faux pas.
Context:
When a user registers I call the CreateSaltedHash() method and pass it the user inputted password from the text field. This method salts and hashes the password before storing it in the Password column of my User table.
Question:
How should I validate the password when a user tries to log in?
If I call the CreateSaltedHash() method again it will not match because of the random salt.
Should I be storing the salts in a separate column? Should I be using a delimiter when generating the salted hash? What is the most secure way of validating the input password against the salted and hashed password?
Code:
This is what I have so far.
public class PasswordHash
{
    public const int SALT_BYTES = 32;

    /*
     * Method to create a salted hash
     */
    public static byte[] CreateSaltedHash(string password)
    {
        RNGCryptoServiceProvider randromNumberGenerator = new RNGCryptoServiceProvider();
        byte[] salt = new byte[SALT_BYTES];
        randromNumberGenerator.GetBytes(salt);
        HashAlgorithm hashAlgorithm = new SHA256Managed();
        byte[] passwordByteArray = Encoding.UTF8.GetBytes(password);
        byte[] passwordAndSalt = new byte[passwordByteArray.Length + SALT_BYTES];
        for (int i = 0; i < passwordByteArray.Length; i++)
        {
            passwordAndSalt[i] = passwordByteArray[i];
        }
        for (int i = 0; i < salt.Length; i++)
        {
            passwordAndSalt[passwordByteArray.Length + i] = salt[i];
        }
        return hashAlgorithm.ComputeHash(passwordAndSalt);
    }

    public static bool OkPassword(string password)
    {
        //This is where I want to validate the password before logging in.
    }
}


Calling the method in the Register class.
User user= new User();
user.password = PasswordHash.CreateSaltedHash(TextBoxUserPassword.Text);

","You will have to store the salt along with the hash.
Refer to this article to get some background information:
http://www.h-online.com/security/features/Storing-passwords-in-uncrackable-form-1255576.html
","4564","<c#><hash><salt><password-hash>","9","1","10","2014-01-30 09:40:52","13398306","4","1","445517","","2014-01-30 09:40:52","2012-11-15 13:17:10",""
"13398246","Validate a salted hash","I am new to C# and this is my first question here so I apologize in advance for any faux pas.
Context:
When a user registers I call the CreateSaltedHash() method and pass it the user inputted password from the text field. This method salts and hashes the password before storing it in the Password column of my User table.
Question:
How should I validate the password when a user tries to log in?
If I call the CreateSaltedHash() method again it will not match because of the random salt.
Should I be storing the salts in a separate column? Should I be using a delimiter when generating the salted hash? What is the most secure way of validating the input password against the salted and hashed password?
Code:
This is what I have so far.
public class PasswordHash
{
    public const int SALT_BYTES = 32;

    /*
     * Method to create a salted hash
     */
    public static byte[] CreateSaltedHash(string password)
    {
        RNGCryptoServiceProvider randromNumberGenerator = new RNGCryptoServiceProvider();
        byte[] salt = new byte[SALT_BYTES];
        randromNumberGenerator.GetBytes(salt);
        HashAlgorithm hashAlgorithm = new SHA256Managed();
        byte[] passwordByteArray = Encoding.UTF8.GetBytes(password);
        byte[] passwordAndSalt = new byte[passwordByteArray.Length + SALT_BYTES];
        for (int i = 0; i < passwordByteArray.Length; i++)
        {
            passwordAndSalt[i] = passwordByteArray[i];
        }
        for (int i = 0; i < salt.Length; i++)
        {
            passwordAndSalt[passwordByteArray.Length + i] = salt[i];
        }
        return hashAlgorithm.ComputeHash(passwordAndSalt);
    }

    public static bool OkPassword(string password)
    {
        //This is where I want to validate the password before logging in.
    }
}


Calling the method in the Register class.
User user= new User();
user.password = PasswordHash.CreateSaltedHash(TextBoxUserPassword.Text);

","You can either store the salt, or use the same salt every time. I recommend storing the salt as it is more secure than using the same salt across all users.
Most of my tables have a column with the date time of when the row was created. I use the Ticks property of the DateTime struct of this value to salt the hash, but you can use anything you like, as long as you use the same salt for the user each time. One thing to watch out for is if  you use this method, and you are using the SQL type DateTime (and not DateTime2), then there is a precision issue. If you create the DateTime in code, you will need to truncate it (I believe to hundredths of a second).
","4564","<c#><hash><salt><password-hash>","9","0","10","2014-01-30 09:40:52","13398306","4","1","445517","","2014-01-30 09:40:52","2012-11-15 13:17:10",""
"13398246","Validate a salted hash","I am new to C# and this is my first question here so I apologize in advance for any faux pas.
Context:
When a user registers I call the CreateSaltedHash() method and pass it the user inputted password from the text field. This method salts and hashes the password before storing it in the Password column of my User table.
Question:
How should I validate the password when a user tries to log in?
If I call the CreateSaltedHash() method again it will not match because of the random salt.
Should I be storing the salts in a separate column? Should I be using a delimiter when generating the salted hash? What is the most secure way of validating the input password against the salted and hashed password?
Code:
This is what I have so far.
public class PasswordHash
{
    public const int SALT_BYTES = 32;

    /*
     * Method to create a salted hash
     */
    public static byte[] CreateSaltedHash(string password)
    {
        RNGCryptoServiceProvider randromNumberGenerator = new RNGCryptoServiceProvider();
        byte[] salt = new byte[SALT_BYTES];
        randromNumberGenerator.GetBytes(salt);
        HashAlgorithm hashAlgorithm = new SHA256Managed();
        byte[] passwordByteArray = Encoding.UTF8.GetBytes(password);
        byte[] passwordAndSalt = new byte[passwordByteArray.Length + SALT_BYTES];
        for (int i = 0; i < passwordByteArray.Length; i++)
        {
            passwordAndSalt[i] = passwordByteArray[i];
        }
        for (int i = 0; i < salt.Length; i++)
        {
            passwordAndSalt[passwordByteArray.Length + i] = salt[i];
        }
        return hashAlgorithm.ComputeHash(passwordAndSalt);
    }

    public static bool OkPassword(string password)
    {
        //This is where I want to validate the password before logging in.
    }
}


Calling the method in the Register class.
User user= new User();
user.password = PasswordHash.CreateSaltedHash(TextBoxUserPassword.Text);

","And for the longer answer -
The has should be random with every password created. This will make it unique in itself. Due to this 'randomness', you will almost never be able to programatically find the hash associated to the file.
The way you encrypted the password (without the hash) should be the same, so using a reverse of this method will be sufficient every time.
PS: (A more secure way o validating) You can either reverse the encrypted password to its original [Hard], or encrypt the validating password with the hash, and make sure that encrypted password matches that stored in the DB [Preferred]. 
So, you will need to store the encrypted password, as well as the hash associated to it, in the database.
This will be the way to gather all the information needed to validate the password. 
","4564","<c#><hash><salt><password-hash>","9","0","10","2014-01-30 09:40:52","13398306","4","1","445517","","2014-01-30 09:40:52","2012-11-15 13:17:10",""
"13398246","Validate a salted hash","I am new to C# and this is my first question here so I apologize in advance for any faux pas.
Context:
When a user registers I call the CreateSaltedHash() method and pass it the user inputted password from the text field. This method salts and hashes the password before storing it in the Password column of my User table.
Question:
How should I validate the password when a user tries to log in?
If I call the CreateSaltedHash() method again it will not match because of the random salt.
Should I be storing the salts in a separate column? Should I be using a delimiter when generating the salted hash? What is the most secure way of validating the input password against the salted and hashed password?
Code:
This is what I have so far.
public class PasswordHash
{
    public const int SALT_BYTES = 32;

    /*
     * Method to create a salted hash
     */
    public static byte[] CreateSaltedHash(string password)
    {
        RNGCryptoServiceProvider randromNumberGenerator = new RNGCryptoServiceProvider();
        byte[] salt = new byte[SALT_BYTES];
        randromNumberGenerator.GetBytes(salt);
        HashAlgorithm hashAlgorithm = new SHA256Managed();
        byte[] passwordByteArray = Encoding.UTF8.GetBytes(password);
        byte[] passwordAndSalt = new byte[passwordByteArray.Length + SALT_BYTES];
        for (int i = 0; i < passwordByteArray.Length; i++)
        {
            passwordAndSalt[i] = passwordByteArray[i];
        }
        for (int i = 0; i < salt.Length; i++)
        {
            passwordAndSalt[passwordByteArray.Length + i] = salt[i];
        }
        return hashAlgorithm.ComputeHash(passwordAndSalt);
    }

    public static bool OkPassword(string password)
    {
        //This is where I want to validate the password before logging in.
    }
}


Calling the method in the Register class.
User user= new User();
user.password = PasswordHash.CreateSaltedHash(TextBoxUserPassword.Text);

","Because you are generating a random salt you would need to store the salt on the database.  The problem with that is that if your database becomes compromised, the attacker will have the salt and the hashed password, so they can more easily determine the real password.  Ideally you should have a static salt in your code so that if your database is compromised they still don't have the salt and if your code is compromised, they don't have the database just yet.
Another solution could be to use pepper.  Pepper is similar to salt but you don't store it the database with the salt and hashed password. It would be stored in the code.  This way you have a random salt that is generated and a constant which is stored separate. To make the pepper more random, you could create a sub-string of a larger string that you are using for a pepper which is offset based on some variable, such as the user id.  This again is an internal thing that an attack would not know of if they managed to get your data.
","4564","<c#><hash><salt><password-hash>","9","0","10","2014-01-30 09:40:52","13398306","4","1","445517","","2014-01-30 09:40:52","2012-11-15 13:17:10",""
"13398246","Validate a salted hash","I am new to C# and this is my first question here so I apologize in advance for any faux pas.
Context:
When a user registers I call the CreateSaltedHash() method and pass it the user inputted password from the text field. This method salts and hashes the password before storing it in the Password column of my User table.
Question:
How should I validate the password when a user tries to log in?
If I call the CreateSaltedHash() method again it will not match because of the random salt.
Should I be storing the salts in a separate column? Should I be using a delimiter when generating the salted hash? What is the most secure way of validating the input password against the salted and hashed password?
Code:
This is what I have so far.
public class PasswordHash
{
    public const int SALT_BYTES = 32;

    /*
     * Method to create a salted hash
     */
    public static byte[] CreateSaltedHash(string password)
    {
        RNGCryptoServiceProvider randromNumberGenerator = new RNGCryptoServiceProvider();
        byte[] salt = new byte[SALT_BYTES];
        randromNumberGenerator.GetBytes(salt);
        HashAlgorithm hashAlgorithm = new SHA256Managed();
        byte[] passwordByteArray = Encoding.UTF8.GetBytes(password);
        byte[] passwordAndSalt = new byte[passwordByteArray.Length + SALT_BYTES];
        for (int i = 0; i < passwordByteArray.Length; i++)
        {
            passwordAndSalt[i] = passwordByteArray[i];
        }
        for (int i = 0; i < salt.Length; i++)
        {
            passwordAndSalt[passwordByteArray.Length + i] = salt[i];
        }
        return hashAlgorithm.ComputeHash(passwordAndSalt);
    }

    public static bool OkPassword(string password)
    {
        //This is where I want to validate the password before logging in.
    }
}


Calling the method in the Register class.
User user= new User();
user.password = PasswordHash.CreateSaltedHash(TextBoxUserPassword.Text);

","As the other answers states; yes you should store the salt or derive it from for example the username.
You should also use Rfc2898DeriveBytes to make it more secure.
Here is a good article on that topic:
Password salt and hashing in C#
","4564","<c#><hash><salt><password-hash>","9","1","10","2014-01-30 09:40:52","13398306","4","1","445517","","2014-01-30 09:40:52","2012-11-15 13:17:10",""
"13398246","Validate a salted hash","I am new to C# and this is my first question here so I apologize in advance for any faux pas.
Context:
When a user registers I call the CreateSaltedHash() method and pass it the user inputted password from the text field. This method salts and hashes the password before storing it in the Password column of my User table.
Question:
How should I validate the password when a user tries to log in?
If I call the CreateSaltedHash() method again it will not match because of the random salt.
Should I be storing the salts in a separate column? Should I be using a delimiter when generating the salted hash? What is the most secure way of validating the input password against the salted and hashed password?
Code:
This is what I have so far.
public class PasswordHash
{
    public const int SALT_BYTES = 32;

    /*
     * Method to create a salted hash
     */
    public static byte[] CreateSaltedHash(string password)
    {
        RNGCryptoServiceProvider randromNumberGenerator = new RNGCryptoServiceProvider();
        byte[] salt = new byte[SALT_BYTES];
        randromNumberGenerator.GetBytes(salt);
        HashAlgorithm hashAlgorithm = new SHA256Managed();
        byte[] passwordByteArray = Encoding.UTF8.GetBytes(password);
        byte[] passwordAndSalt = new byte[passwordByteArray.Length + SALT_BYTES];
        for (int i = 0; i < passwordByteArray.Length; i++)
        {
            passwordAndSalt[i] = passwordByteArray[i];
        }
        for (int i = 0; i < salt.Length; i++)
        {
            passwordAndSalt[passwordByteArray.Length + i] = salt[i];
        }
        return hashAlgorithm.ComputeHash(passwordAndSalt);
    }

    public static bool OkPassword(string password)
    {
        //This is where I want to validate the password before logging in.
    }
}


Calling the method in the Register class.
User user= new User();
user.password = PasswordHash.CreateSaltedHash(TextBoxUserPassword.Text);

","You could use Bcrypt.Net; it has a lot of recommendations for being really secure, plus it is very easy to use. As I understand it, when you create the password it automatically generates a unique salt for you, which is then stored in the hashed password string; so you do not store the salt separately, but in the same field as the hashed password. The point is each password has it own salt, which makes it much more difficult (time consuming) for a hacker to crack multiple passwords. The algorithm Bcrypt uses is also CPU intensive, so it requires a lot of computational power (=money) to crack.
Jeff Atwood (stackoverflow moderator) recommends Bcrypt.
","4564","<c#><hash><salt><password-hash>","9","3","10","2014-01-30 09:40:52","13398306","4","1","445517","","2014-01-30 09:40:52","2012-11-15 13:17:10",""
"13398246","Validate a salted hash","I am new to C# and this is my first question here so I apologize in advance for any faux pas.
Context:
When a user registers I call the CreateSaltedHash() method and pass it the user inputted password from the text field. This method salts and hashes the password before storing it in the Password column of my User table.
Question:
How should I validate the password when a user tries to log in?
If I call the CreateSaltedHash() method again it will not match because of the random salt.
Should I be storing the salts in a separate column? Should I be using a delimiter when generating the salted hash? What is the most secure way of validating the input password against the salted and hashed password?
Code:
This is what I have so far.
public class PasswordHash
{
    public const int SALT_BYTES = 32;

    /*
     * Method to create a salted hash
     */
    public static byte[] CreateSaltedHash(string password)
    {
        RNGCryptoServiceProvider randromNumberGenerator = new RNGCryptoServiceProvider();
        byte[] salt = new byte[SALT_BYTES];
        randromNumberGenerator.GetBytes(salt);
        HashAlgorithm hashAlgorithm = new SHA256Managed();
        byte[] passwordByteArray = Encoding.UTF8.GetBytes(password);
        byte[] passwordAndSalt = new byte[passwordByteArray.Length + SALT_BYTES];
        for (int i = 0; i < passwordByteArray.Length; i++)
        {
            passwordAndSalt[i] = passwordByteArray[i];
        }
        for (int i = 0; i < salt.Length; i++)
        {
            passwordAndSalt[passwordByteArray.Length + i] = salt[i];
        }
        return hashAlgorithm.ComputeHash(passwordAndSalt);
    }

    public static bool OkPassword(string password)
    {
        //This is where I want to validate the password before logging in.
    }
}


Calling the method in the Register class.
User user= new User();
user.password = PasswordHash.CreateSaltedHash(TextBoxUserPassword.Text);

","You should save the digest and salt. The iterations and digestLength values can be constants in your application.
byte[] getNewSalt(Int32 size)
{
    RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
    byte[] salt = new byte[size];
    rng.GetBytes(salt);
    return salt;
}


byte[] getPasswordDigest(byte[] value, byte[] salt, Int32 iterations, Int32 digestLength)
{
    Rfc2898DeriveBytes deriveBytes = new Rfc2898DeriveBytes(value, salt, iterations);
    return deriveBytes.GetBytes(digestLength);
}

Recent articles suggest that to further secure passwords, you can split up the password into parts, hash the individual parts, then store them in separate tables in the DB.
","4564","<c#><hash><salt><password-hash>","9","0","10","2014-01-30 09:40:52","13398306","4","1","445517","","2014-01-30 09:40:52","2012-11-15 13:17:10",""
"13398246","Validate a salted hash","I am new to C# and this is my first question here so I apologize in advance for any faux pas.
Context:
When a user registers I call the CreateSaltedHash() method and pass it the user inputted password from the text field. This method salts and hashes the password before storing it in the Password column of my User table.
Question:
How should I validate the password when a user tries to log in?
If I call the CreateSaltedHash() method again it will not match because of the random salt.
Should I be storing the salts in a separate column? Should I be using a delimiter when generating the salted hash? What is the most secure way of validating the input password against the salted and hashed password?
Code:
This is what I have so far.
public class PasswordHash
{
    public const int SALT_BYTES = 32;

    /*
     * Method to create a salted hash
     */
    public static byte[] CreateSaltedHash(string password)
    {
        RNGCryptoServiceProvider randromNumberGenerator = new RNGCryptoServiceProvider();
        byte[] salt = new byte[SALT_BYTES];
        randromNumberGenerator.GetBytes(salt);
        HashAlgorithm hashAlgorithm = new SHA256Managed();
        byte[] passwordByteArray = Encoding.UTF8.GetBytes(password);
        byte[] passwordAndSalt = new byte[passwordByteArray.Length + SALT_BYTES];
        for (int i = 0; i < passwordByteArray.Length; i++)
        {
            passwordAndSalt[i] = passwordByteArray[i];
        }
        for (int i = 0; i < salt.Length; i++)
        {
            passwordAndSalt[passwordByteArray.Length + i] = salt[i];
        }
        return hashAlgorithm.ComputeHash(passwordAndSalt);
    }

    public static bool OkPassword(string password)
    {
        //This is where I want to validate the password before logging in.
    }
}


Calling the method in the Register class.
User user= new User();
user.password = PasswordHash.CreateSaltedHash(TextBoxUserPassword.Text);

","I Suggest you to use SaltedHash of ServiceStack which you can install it from your Nuget.
Simply Enter Install-Package ServiceStack in your Nuget Console, then you'll be able to use the following imports in your code.
using ServiceStack.ServiceInterface.Auth;

And then you would generate your salt and hash so much easier and absolutely faster than before.
Just enter the following codes:
class Security
{
   ...
   public void generate(string Password)
   {
   string hash, salt;
   new SaltedHash().GetHashAndSaltString(Password,out hash,out salt);
   //Store the hash and salt
   }
   ...
}

And yes, You must store the hash and salt to be able to run your OkPassword Method.
public bool OkPassword(string Password)
{
   var hash = //getStoredHash
   var salt = //getStoredSalt
   bool verify = new SaltedHash().VerifyHashString(Password, hash , salt);
   return verify ;
}

","4564","<c#><hash><salt><password-hash>","9","2","10","2014-01-30 09:40:52","13398306","4","1","445517","","2014-01-30 09:40:52","2012-11-15 13:17:10",""
"6186540","Are bcrypt salts accessible separately?","When using has_secure_password in Rails 3.1, bcrypt randomly generates a salt for each user's password. Based on this response, I understand the salt is stored as part of the password hash. Is there a method or attribute available to access that salt separately, for example to use in writing secure cookies?
","You'll be able to get the salt and checksum if you need it. 
gem install bcrypt-ruby
irb
require 'bcrypt'

hash = BCrypt::Password.create 'superpass'
=> ""$2a$10$DtjuZD6nJtrBRLEySlSVm.bJyBMhEhVRAeiVk/GjmQdBNf7WhmDWi""
hash.salt
=> ""$2a$10$DtjuZD6nJtrBRLEySlSVm.""
hash.checksum
""bJyBMhEhVRAeiVk/GjmQdBNf7WhmDWi""
hash == ""starbucks""
=> false
hash == ""superpass""
=> true

Your salt and checksum will vary.
More info: https://github.com/codahale/bcrypt-ruby
","4473","<ruby-on-rails><salt><bcrypt>","10","15","1","2011-05-31 17:07:06","6189241","0","3","-1","","2017-05-23 12:16:00","2011-05-31 10:59:55",""
"22156286","Hashed password register / login","I'v googled around for way to do this properly and there's just a lot of variations on how to do so. So i've come up with this and wouldn't mind some critique and links to better practices.
// Register Form - User providese username(email) password(text) //
So i grab the data:
$user = mysql_real_escape_string($_POST['user']);
$pswd = mysql_real_escape_string($_POST['pass']);
$salt = hash( 'sha256', microtime() . rand() );
$encrypt = hash( 'sha256', $pswd . $salt );

Then insert into database user_email | encrypted_pass | salt
// Login Form - User providese username(email) password(text) //
So first based on user(email) i grab encrypted_pass and salt info. Then,
$user = mysql_real_escape_string($_POST['user']);
$pswd = mysql_real_escape_string($_POST['pass']);

$encrypted_pass_fromDB = $var['encrypted_pass'];
$salt_fromDB = $var['salt'];

if (hash( 'sha256', $passwrd . $salt_fromDB) === $encrypted_pass_fromDB)
     {
      echo ""GOT IT!"";
     }

I've read bcrypt is a better option, but for now i want to understand the SALT method better. Also, when i use $options = ['cost' => 11,]; i get an error Parse error: syntax error, unexpected '[' but that's a separate issue i guess. Used code based on PHP salt and hash SHA256 for login password
Any comments are appreciated! Thanks!
","The only thing that you are protected against when adding a salt to your hash is the use of huge tables of pre-computed hashes called ""Rainbow Tables"". These have not been a major problem in quite some time, though because:

Rainbow tables containing extended character sets are massive, some requiring upwards of 16GB of RAM to search.
Parallelized bruteforce cracking across multiple computers, or offloaded to cloud services like AWS are faster, cheaper, and makes the addition of simple salts virtually inconsequential.

Better algorithms hash the password thousands of times and apply the given salt in a cryptographically ""proper"" way to make it more difficult to crack. However, the hashing algorithms that they are based on like SHA and MD5 are designed to be small and fast, and bruteforcing them requires large amounts of CPU time, which is cheap and easy to parallelize.
Bcrypt is different. It uses the Blowfish algorithm which requires relatively large amounts of RAM, which is expensive, and thus difficult to parallelize. This is why everyone recommends it so strongly.
TL;DR Hashing is better than plaintext, salted is better than unsalted, bcrypt is miles better than pretty much everything else out there so frickin use it.
","4390","<php><salt><sha256>","-1","3","3","2014-03-04 20:15:53","22156638","3","","-1","","2017-05-23 12:16:36","2014-03-03 20:06:24",""
"22156286","Hashed password register / login","I'v googled around for way to do this properly and there's just a lot of variations on how to do so. So i've come up with this and wouldn't mind some critique and links to better practices.
// Register Form - User providese username(email) password(text) //
So i grab the data:
$user = mysql_real_escape_string($_POST['user']);
$pswd = mysql_real_escape_string($_POST['pass']);
$salt = hash( 'sha256', microtime() . rand() );
$encrypt = hash( 'sha256', $pswd . $salt );

Then insert into database user_email | encrypted_pass | salt
// Login Form - User providese username(email) password(text) //
So first based on user(email) i grab encrypted_pass and salt info. Then,
$user = mysql_real_escape_string($_POST['user']);
$pswd = mysql_real_escape_string($_POST['pass']);

$encrypted_pass_fromDB = $var['encrypted_pass'];
$salt_fromDB = $var['salt'];

if (hash( 'sha256', $passwrd . $salt_fromDB) === $encrypted_pass_fromDB)
     {
      echo ""GOT IT!"";
     }

I've read bcrypt is a better option, but for now i want to understand the SALT method better. Also, when i use $options = ['cost' => 11,]; i get an error Parse error: syntax error, unexpected '[' but that's a separate issue i guess. Used code based on PHP salt and hash SHA256 for login password
Any comments are appreciated! Thanks!
","You should use the built in crypt function:
http://php.net/crypt
You have two options:
Let PHP Crypt generate the salt
$user = mysql_real_escape_string($_POST['user']);
$pswd = mysql_real_escape_string($_POST['pass']);

//Salt is generated automatically
$encrypt = crypt( $pswd );

Generate the Salt yourself
$user = mysql_real_escape_string($_POST['user']);
$pswd = mysql_real_escape_string($_POST['pass']);

//These are the settings for the salt (Separated so you can understand it)
$algorithm = ""2a"";
$length = ""12"";

//Start the salt by specifying the algorithm and length
$salt = ""$"" . $algorithm . ""$"" . $length . ""$"";

//Add on random salt and make base64 adjusted for bcrypt's version
$salt .= substr( str_replace( ""+"", ""."", base64_encode( mcrypt_create_iv( 128, MCRYPT_DEV_URANDOM ) ) ), 0, 22 );

//Encrypt with your generated salt
$encrypt = crypt( $pswd, $salt );

Verifying it is easy:
if ( $encrypted_pass_fromDB_with_salt === crypt( $passwrd, $encrypted_pass_fromDB_with_salt ) ) echo ""ok"";

","4390","<php><salt><sha256>","-1","1","3","2014-03-04 20:15:53","22156638","3","","-1","","2017-05-23 12:16:36","2014-03-03 20:06:24",""
"22156286","Hashed password register / login","I'v googled around for way to do this properly and there's just a lot of variations on how to do so. So i've come up with this and wouldn't mind some critique and links to better practices.
// Register Form - User providese username(email) password(text) //
So i grab the data:
$user = mysql_real_escape_string($_POST['user']);
$pswd = mysql_real_escape_string($_POST['pass']);
$salt = hash( 'sha256', microtime() . rand() );
$encrypt = hash( 'sha256', $pswd . $salt );

Then insert into database user_email | encrypted_pass | salt
// Login Form - User providese username(email) password(text) //
So first based on user(email) i grab encrypted_pass and salt info. Then,
$user = mysql_real_escape_string($_POST['user']);
$pswd = mysql_real_escape_string($_POST['pass']);

$encrypted_pass_fromDB = $var['encrypted_pass'];
$salt_fromDB = $var['salt'];

if (hash( 'sha256', $passwrd . $salt_fromDB) === $encrypted_pass_fromDB)
     {
      echo ""GOT IT!"";
     }

I've read bcrypt is a better option, but for now i want to understand the SALT method better. Also, when i use $options = ['cost' => 11,]; i get an error Parse error: syntax error, unexpected '[' but that's a separate issue i guess. Used code based on PHP salt and hash SHA256 for login password
Any comments are appreciated! Thanks!
","PHP offers now such an easy way to generate safe password hashes, that we should use it, have a look at the function password_hash().
// Hash a new password for storing in the database.
// The function automatically generates a cryptographically safe salt.
$hashToStoreInDb = password_hash($password, PASSWORD_BCRYPT);

// Check if the hash of the entered login password, matches the stored hash.
// The salt and the cost factor will be extracted from $existingHashFromDb.
$isPasswordCorrect = password_verify($password, $existingHashFromDb);

Of course it is good to understand how a salt works (and how difficult it is to handle it correctly), so try it out but use the function above for your life system.
","4390","<php><salt><sha256>","-1","1","3","2014-03-04 20:15:53","22156638","3","","-1","","2017-05-23 12:16:36","2014-03-03 20:06:24",""
"28192265","Java - Generating a random salt isn't random","I'm trying to generate a salt in Java to use with a hashing algorithm for secure password storage. I'm using the following code to create the random salt:
private static String getSalt() throws NoSuchAlgorithmException {
    SecureRandom sr = SecureRandom.getInstance(""SHA1PRNG"");
    byte[] salt = new byte[16];
    sr.nextBytes(salt);
    System.out.println(salt.toString());
    return salt.toString();
}

Which should generate a completely secure, randomly generated salt to use in my hashing algorithm. When I run the code however, it keeps outputting the same salt every time... Indicating that the salt being generated isn't random at all.
For obvious security purposes, each user needs a unique salt however if I use this code each time a new account is created then every user will have the same salt, defeating the purpose of having it in the first place.
My question is this: Why does this keep giving me the same salt and what can I do to ensure the salt generated is completely random each time the code is run?
EDIT:
Thought I'd include the source code of the entire hashing program that has now been fixed and works properly. This is a simple prototype to simulate generating the hash upon creation of the account then checking the password when logging into the system.
package hashingwstest;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Random;
import java.util.Scanner;


public class HashingWSTest {

    public static void main(String[] args) throws NoSuchAlgorithmException {
        Scanner sc = new Scanner(System.in);
        System.out.print(""Enter Password: "");
        String passwordToHash = sc.nextLine();

        byte[] bytes = getBytes();
        String salt = new String(bytes);

        String securePassword = hash256(passwordToHash, salt);
        System.out.println(""Hash successfully generated"");

        System.out.print(""Enter your password again: "");
        String checkPassword = sc.nextLine();
        String checkHash = hash256(checkPassword,salt);
        if (checkHash.equals(securePassword)) {
            System.out.println(""MATCH"");
        }
        else {
            System.out.println(""NO MATCH"");
        }
    }

    private static String hash256(String passwordToHash, String salt) {
        String generatedPassword = null;
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-256"");
            md.update(salt.getBytes());
            byte[] bytes = md.digest(passwordToHash.getBytes());
            StringBuilder sb = new StringBuilder();

            for (int i=0; i<bytes.length; i++) {
                sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));
            }
            generatedPassword = sb.toString();
        }
        catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return generatedPassword;
    }

    private static byte[] getBytes() throws NoSuchAlgorithmException {
        SecureRandom sr = SecureRandom.getInstance(""SHA1PRNG"");
        byte[] bytes = new byte[16];
        sr.nextBytes(bytes);
        return bytes;
    }
}

","From the javadoc of java.security.SecureRandom.getInstance(String):

The returned SecureRandom object has not been seeded. To seed the returned object, call the setSeed method.

So the obvious answer is to call setSeed. However this may have it's problems when just using the time, because the seed can be guessed easily.
Another approach would be to share the secure random instance (as it is thread safe)
","4267","<java><random><hash><salt><salt-creation>","1","0","4","2015-01-28 14:42:39","28192506","1","4","3528771","","2015-01-28 14:42:39","2015-01-28 12:28:18",""
"28192265","Java - Generating a random salt isn't random","I'm trying to generate a salt in Java to use with a hashing algorithm for secure password storage. I'm using the following code to create the random salt:
private static String getSalt() throws NoSuchAlgorithmException {
    SecureRandom sr = SecureRandom.getInstance(""SHA1PRNG"");
    byte[] salt = new byte[16];
    sr.nextBytes(salt);
    System.out.println(salt.toString());
    return salt.toString();
}

Which should generate a completely secure, randomly generated salt to use in my hashing algorithm. When I run the code however, it keeps outputting the same salt every time... Indicating that the salt being generated isn't random at all.
For obvious security purposes, each user needs a unique salt however if I use this code each time a new account is created then every user will have the same salt, defeating the purpose of having it in the first place.
My question is this: Why does this keep giving me the same salt and what can I do to ensure the salt generated is completely random each time the code is run?
EDIT:
Thought I'd include the source code of the entire hashing program that has now been fixed and works properly. This is a simple prototype to simulate generating the hash upon creation of the account then checking the password when logging into the system.
package hashingwstest;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Random;
import java.util.Scanner;


public class HashingWSTest {

    public static void main(String[] args) throws NoSuchAlgorithmException {
        Scanner sc = new Scanner(System.in);
        System.out.print(""Enter Password: "");
        String passwordToHash = sc.nextLine();

        byte[] bytes = getBytes();
        String salt = new String(bytes);

        String securePassword = hash256(passwordToHash, salt);
        System.out.println(""Hash successfully generated"");

        System.out.print(""Enter your password again: "");
        String checkPassword = sc.nextLine();
        String checkHash = hash256(checkPassword,salt);
        if (checkHash.equals(securePassword)) {
            System.out.println(""MATCH"");
        }
        else {
            System.out.println(""NO MATCH"");
        }
    }

    private static String hash256(String passwordToHash, String salt) {
        String generatedPassword = null;
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-256"");
            md.update(salt.getBytes());
            byte[] bytes = md.digest(passwordToHash.getBytes());
            StringBuilder sb = new StringBuilder();

            for (int i=0; i<bytes.length; i++) {
                sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));
            }
            generatedPassword = sb.toString();
        }
        catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return generatedPassword;
    }

    private static byte[] getBytes() throws NoSuchAlgorithmException {
        SecureRandom sr = SecureRandom.getInstance(""SHA1PRNG"");
        byte[] bytes = new byte[16];
        sr.nextBytes(bytes);
        return bytes;
    }
}

","You can use method
/**
 * Reseeds this random object, using the eight bytes contained
 * in the given <code>long seed</code>. The given seed supplements,
 * rather than replaces, the existing seed. Thus, repeated calls
 * are guaranteed never to reduce randomness.
 *
 * <p>This method is defined for compatibility with
 * <code>java.util.Random</code>.
 *
 * @param seed the seed.
 *
 * @see #getSeed
 */
public void setSeed(long seed)

passing e.g. current time
","4267","<java><random><hash><salt><salt-creation>","1","0","4","2015-01-28 14:42:39","28192506","1","4","3528771","","2015-01-28 14:42:39","2015-01-28 12:28:18",""
"28192265","Java - Generating a random salt isn't random","I'm trying to generate a salt in Java to use with a hashing algorithm for secure password storage. I'm using the following code to create the random salt:
private static String getSalt() throws NoSuchAlgorithmException {
    SecureRandom sr = SecureRandom.getInstance(""SHA1PRNG"");
    byte[] salt = new byte[16];
    sr.nextBytes(salt);
    System.out.println(salt.toString());
    return salt.toString();
}

Which should generate a completely secure, randomly generated salt to use in my hashing algorithm. When I run the code however, it keeps outputting the same salt every time... Indicating that the salt being generated isn't random at all.
For obvious security purposes, each user needs a unique salt however if I use this code each time a new account is created then every user will have the same salt, defeating the purpose of having it in the first place.
My question is this: Why does this keep giving me the same salt and what can I do to ensure the salt generated is completely random each time the code is run?
EDIT:
Thought I'd include the source code of the entire hashing program that has now been fixed and works properly. This is a simple prototype to simulate generating the hash upon creation of the account then checking the password when logging into the system.
package hashingwstest;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Random;
import java.util.Scanner;


public class HashingWSTest {

    public static void main(String[] args) throws NoSuchAlgorithmException {
        Scanner sc = new Scanner(System.in);
        System.out.print(""Enter Password: "");
        String passwordToHash = sc.nextLine();

        byte[] bytes = getBytes();
        String salt = new String(bytes);

        String securePassword = hash256(passwordToHash, salt);
        System.out.println(""Hash successfully generated"");

        System.out.print(""Enter your password again: "");
        String checkPassword = sc.nextLine();
        String checkHash = hash256(checkPassword,salt);
        if (checkHash.equals(securePassword)) {
            System.out.println(""MATCH"");
        }
        else {
            System.out.println(""NO MATCH"");
        }
    }

    private static String hash256(String passwordToHash, String salt) {
        String generatedPassword = null;
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-256"");
            md.update(salt.getBytes());
            byte[] bytes = md.digest(passwordToHash.getBytes());
            StringBuilder sb = new StringBuilder();

            for (int i=0; i<bytes.length; i++) {
                sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));
            }
            generatedPassword = sb.toString();
        }
        catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return generatedPassword;
    }

    private static byte[] getBytes() throws NoSuchAlgorithmException {
        SecureRandom sr = SecureRandom.getInstance(""SHA1PRNG"");
        byte[] bytes = new byte[16];
        sr.nextBytes(bytes);
        return bytes;
    }
}

","salt.toString is not returning content of the byte array but hashCode
If you replace to the sr.nextInt() on every request you will receive different value. 
If you print content of the byte array you will notice difference
","4267","<java><random><hash><salt><salt-creation>","1","2","4","2015-01-28 14:42:39","28192506","1","4","3528771","","2015-01-28 14:42:39","2015-01-28 12:28:18",""
"28192265","Java - Generating a random salt isn't random","I'm trying to generate a salt in Java to use with a hashing algorithm for secure password storage. I'm using the following code to create the random salt:
private static String getSalt() throws NoSuchAlgorithmException {
    SecureRandom sr = SecureRandom.getInstance(""SHA1PRNG"");
    byte[] salt = new byte[16];
    sr.nextBytes(salt);
    System.out.println(salt.toString());
    return salt.toString();
}

Which should generate a completely secure, randomly generated salt to use in my hashing algorithm. When I run the code however, it keeps outputting the same salt every time... Indicating that the salt being generated isn't random at all.
For obvious security purposes, each user needs a unique salt however if I use this code each time a new account is created then every user will have the same salt, defeating the purpose of having it in the first place.
My question is this: Why does this keep giving me the same salt and what can I do to ensure the salt generated is completely random each time the code is run?
EDIT:
Thought I'd include the source code of the entire hashing program that has now been fixed and works properly. This is a simple prototype to simulate generating the hash upon creation of the account then checking the password when logging into the system.
package hashingwstest;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Random;
import java.util.Scanner;


public class HashingWSTest {

    public static void main(String[] args) throws NoSuchAlgorithmException {
        Scanner sc = new Scanner(System.in);
        System.out.print(""Enter Password: "");
        String passwordToHash = sc.nextLine();

        byte[] bytes = getBytes();
        String salt = new String(bytes);

        String securePassword = hash256(passwordToHash, salt);
        System.out.println(""Hash successfully generated"");

        System.out.print(""Enter your password again: "");
        String checkPassword = sc.nextLine();
        String checkHash = hash256(checkPassword,salt);
        if (checkHash.equals(securePassword)) {
            System.out.println(""MATCH"");
        }
        else {
            System.out.println(""NO MATCH"");
        }
    }

    private static String hash256(String passwordToHash, String salt) {
        String generatedPassword = null;
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-256"");
            md.update(salt.getBytes());
            byte[] bytes = md.digest(passwordToHash.getBytes());
            StringBuilder sb = new StringBuilder();

            for (int i=0; i<bytes.length; i++) {
                sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));
            }
            generatedPassword = sb.toString();
        }
        catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return generatedPassword;
    }

    private static byte[] getBytes() throws NoSuchAlgorithmException {
        SecureRandom sr = SecureRandom.getInstance(""SHA1PRNG"");
        byte[] bytes = new byte[16];
        sr.nextBytes(bytes);
        return bytes;
    }
}

","You are printing out the byte array itself, not its contents.  You need to loop through the array to see what it contains.
Edit:
Also changed getSalt to return a byte array.  It is not safe to return a String constructed from the byte array (with new String(salt)) as the byte sequence may not form a valid String.
import java.security.*;

public class Salt {
    public static void main(String[] args) throws NoSuchAlgorithmException {
        getSalt();
    }
    private static byte[] getSalt() throws NoSuchAlgorithmException {
        SecureRandom sr = SecureRandom.getInstance(""SHA1PRNG"");
        byte[] salt = new byte[16];
        sr.nextBytes(salt);
        for(int i = 0; i<16; i++) {
            System.out.print(salt[i] & 0x00FF);
            System.out.print("" "");
        }
        return salt;
    }
}

","4267","<java><random><hash><salt><salt-creation>","1","3","4","2015-01-28 14:42:39","28192506","1","4","3528771","","2015-01-28 14:42:39","2015-01-28 12:28:18",""
"8890902","C#: comparing the password hash with the user input different sizes , when Authenticating the user","I have made a user registration where I have salted the user password and hashed it using SHA256. 
later, when the user needs to log into my system I need to have his password salted and hashed, so I :
1.retrieved the salt ""string"" from Database
2. converted the salt into bytes 
3. created a new byte[] = [inputPassword.length + salt.length]
4. and hashed that.
now the new hash is shorter than Original hash ...(using same hashing functions)
given these information what do you think the problem might be ...
is storing the salt as CHAR on my database wrong , if yes what or how should I save it ?
Note: both hashes are compared on byte level.
Note: all user information are stored in the database password and salt as CHAR
thank you in advance 
","You could generate a salt from a Guid converted into a base 64 string, then save that in the database as char. I use nvarchar to maximise my options using a .NET string.
Then you can implement something like this for generating the original password hash, and comparing the hash when the user logs in:
    public static byte[] GetHash(string password, string salt)
    {
        byte[] unhashedBytes = Encoding.Unicode.GetBytes(String.Concat(salt, password));

        SHA256Managed sha256 = new SHA256Managed();
        byte[] hashedBytes = sha256.ComputeHash(unhashedBytes);

        return hashedBytes;
    }

    public static bool CompareHash(string attemptedPassword, byte[] hash, string salt)
    {
        string base64Hash = Convert.ToBase64String(hash);
        string base64AttemptedHash = Convert.ToBase64String(GetHash(attemptedPassword, salt));

        return base64Hash == base64AttemptedHash;
    }

","3970","<c#><authentication><hash><passwords><salt>","1","1","2","2012-01-17 07:40:34","8891097","2","3","","","","2012-01-17 07:13:34",""
"8890902","C#: comparing the password hash with the user input different sizes , when Authenticating the user","I have made a user registration where I have salted the user password and hashed it using SHA256. 
later, when the user needs to log into my system I need to have his password salted and hashed, so I :
1.retrieved the salt ""string"" from Database
2. converted the salt into bytes 
3. created a new byte[] = [inputPassword.length + salt.length]
4. and hashed that.
now the new hash is shorter than Original hash ...(using same hashing functions)
given these information what do you think the problem might be ...
is storing the salt as CHAR on my database wrong , if yes what or how should I save it ?
Note: both hashes are compared on byte level.
Note: all user information are stored in the database password and salt as CHAR
thank you in advance 
","Usually hash functions return fixed size hash, so if you tell that new hash is shorter I think problem might be in your hash function.
","3970","<c#><authentication><hash><passwords><salt>","1","1","2","2012-01-17 07:40:34","8891097","2","3","","","","2012-01-17 07:13:34",""
"17911355","How can ProFTPD read a password encrypted with the MySQL ENCRYPT() function?","I have set up ProFTPD so that it uses the mod_sql_mysql backend. Everything works fine up until I inserted the users in the SQL database. I used the following query to do so:
INSERT INTO `auth`.`users` (`userid`, `passwd`, `uid`, `gid`, `homedir`, `shell`)
 VALUES ('username', ENCRYPT('bluefish'), '999', '999', '/dev/zero', '/bin/laden');

I can login into my account just fine, but I really don't understand how ProFTPD reads the encrypted password ""bluefish"" as MySQL uses a random salt if there's no salt provided. That should lead to a different output of ENCRYPT('bluefish') everytime ProFTPD uses the MySQL backend to check if the password matches one entry in the database.
It works just fine though. How can ProFTPD know what salt has been used?
","ProFTPD does not need to know what the salt is.
Per the MySQL documentation, ENCRYPT uses the Unix crypt() implementation of DES. As you pointed out, if no salt is provided, a random salt is chosen. According to the man pages:

The returned value points to the encrypted password, a series of 13
  printable ASCII characters (the first two characters represent the
  salt itself).

You can verify this for yourself, by running e.g.:
SELECT ENCRYPT ('blowfish');

which returns:
201GDb8Aj8RGU

If you then run 
select ENCRYPT ('blowfish', '201GDb8Aj8RGU');

You'll get the same result 201GDb8Aj8RGU. Only the first two characters are used as salt.
It becomes a little clearer if you provide your own salt, such as :
SELECT ENCRYPT ('blowfish', 'rb');

The returned value is:
rbMle0EHJVXcI
^^

Your provided salt is now much more evident.
","3834","<mysql><encryption><ftp><passwords><salt>","4","2","1","2013-08-05 21:13:05","18039924","0","2","61605","","2013-08-05 21:13:05","2013-07-28 18:21:55",""
"6372103","Is It okay to save user's salt in the same table as password hash?","Is it okay and isn't useless? It could be saved in another table or even another database.
What do you think?
P.S. For higher security, I have the constant salt ""peanuts"" too. It's constant value saved in configuration file (not in database). So if hacker want to somehow hack password, he need access to file server and database as well.
","You want to store 1) the per-user salt and 2) the result of hashing password+salt).  You do not want to store the password itself.
","3775","<hash><passwords><password-protection><salt>","10","3","2","2011-06-22 10:08:58","6372281","5","4","368821","","2011-06-22 10:08:58","2011-06-16 12:49:49",""
"6372103","Is It okay to save user's salt in the same table as password hash?","Is it okay and isn't useless? It could be saved in another table or even another database.
What do you think?
P.S. For higher security, I have the constant salt ""peanuts"" too. It's constant value saved in configuration file (not in database). So if hacker want to somehow hack password, he need access to file server and database as well.
","Yes, it's okay to store the per-user salt in the same table which stores the password hash (not the password itself) - even if the adversary gets access to the raw database data, he'd still need to try each user's salt+password separately; storing the salt in another table is not really adding any significant security (if you assume the adversary has access to the database, it doesn't make much sense to me to assume he only has access to one part of it).
If you're using salt+peanuts+password to create the password hash, then I'd say that your design is safer than 80% of the systems out there - which is to say, reasonably safe without going overboard with paranoia.

Note however, that if you're actually storing the password in recoverable form (encrypted or plaintext), you're throwing any security out of the window - the whole point of salts and hashing is that you are not storing the password in recoverable form. If you do store the password, that is the weakest link of your system, which is then completely insecure. To make things clear: the user table should only contain the salt and hash of salt+peanuts+password, never the password itself.
","3775","<hash><passwords><password-protection><salt>","10","23","2","2011-06-22 10:08:58","6372281","5","4","368821","","2011-06-22 10:08:58","2011-06-16 12:49:49",""
"5235058","password security in PHP","What method would you call safest and most secure? I took these snippets off php.net.  I'm just wondering because people posted their own and I just couldn't catch on to understand why some are the way they are... Can someone help me out and tell me a little more about these? Which would be the most secure and why?
1.
<?php
$hash = md5($salt1.$password.$salt2);
?>

2.
<?php
function eliteEncrypt($string) {
    // Create a salt
    $salt = md5($string.""%*4!#$;\.k~'(_@"");

    // Hash the string
    $string = md5(""$salt$string$salt"");

    return $string;
}
?>

3.
<?php
define ('SALT_ONE', 'some_random_123_collection_&$^%_of_stuff');
define ('SALT_TWO', 'another_random_%*!_collection_ANbu_of_stuff');

$password = 'dragon';

function generate_encrypted_password($str) {
$new_pword = '';

if( defined('SALT_ONE') ):
   $new_pword .= md5(SALT_ONE);
endif;

$new_pword .= md5($str);

if( defined('SALT_TWO') ):
   $new_pword .= md5(SALT_TWO);
endif;

return substr($new_pword, strlen($str), 40);
}

echo generate_encrypted_password($password);
?>

4.
<?
function enchsetenev($toencode,$times)
{
    $salt = 's+(_a*';
    for($zo=0;$zo<$times;$zo=$zo+1)
    {
        $toencode = hash('sha512',salt.$toencode);
        $toencode = md5($toencode.$salt);
    }
    return $toencode;
}

?>

5.
<?php
$hash = $password . $salt;

for ( $i = 0; $i < 10000; $i++ ) {
  $hash = md5( $hash );
}

echo $hash;
?>

","A better option is to use something other than md5, check here for a previously answered question relating to this.
","3750","<php><md5><salt>","7","0","5","2013-03-23 01:27:42","5235195","6","3","","","","2011-03-08 16:09:08",""
"5235058","password security in PHP","What method would you call safest and most secure? I took these snippets off php.net.  I'm just wondering because people posted their own and I just couldn't catch on to understand why some are the way they are... Can someone help me out and tell me a little more about these? Which would be the most secure and why?
1.
<?php
$hash = md5($salt1.$password.$salt2);
?>

2.
<?php
function eliteEncrypt($string) {
    // Create a salt
    $salt = md5($string.""%*4!#$;\.k~'(_@"");

    // Hash the string
    $string = md5(""$salt$string$salt"");

    return $string;
}
?>

3.
<?php
define ('SALT_ONE', 'some_random_123_collection_&$^%_of_stuff');
define ('SALT_TWO', 'another_random_%*!_collection_ANbu_of_stuff');

$password = 'dragon';

function generate_encrypted_password($str) {
$new_pword = '';

if( defined('SALT_ONE') ):
   $new_pword .= md5(SALT_ONE);
endif;

$new_pword .= md5($str);

if( defined('SALT_TWO') ):
   $new_pword .= md5(SALT_TWO);
endif;

return substr($new_pword, strlen($str), 40);
}

echo generate_encrypted_password($password);
?>

4.
<?
function enchsetenev($toencode,$times)
{
    $salt = 's+(_a*';
    for($zo=0;$zo<$times;$zo=$zo+1)
    {
        $toencode = hash('sha512',salt.$toencode);
        $toencode = md5($toencode.$salt);
    }
    return $toencode;
}

?>

5.
<?php
$hash = $password . $salt;

for ( $i = 0; $i < 10000; $i++ ) {
  $hash = md5( $hash );
}

echo $hash;
?>

","Is it just 5 different ways to do almost the same? I think the learning objective here is to understand the importance of salting passwords. The best way to salt is to use as much salt as possible and the salt string includes as many crazy characters as possible. 
","3750","<php><md5><salt>","7","-1","5","2013-03-23 01:27:42","5235195","6","3","","","","2011-03-08 16:09:08",""
"5235058","password security in PHP","What method would you call safest and most secure? I took these snippets off php.net.  I'm just wondering because people posted their own and I just couldn't catch on to understand why some are the way they are... Can someone help me out and tell me a little more about these? Which would be the most secure and why?
1.
<?php
$hash = md5($salt1.$password.$salt2);
?>

2.
<?php
function eliteEncrypt($string) {
    // Create a salt
    $salt = md5($string.""%*4!#$;\.k~'(_@"");

    // Hash the string
    $string = md5(""$salt$string$salt"");

    return $string;
}
?>

3.
<?php
define ('SALT_ONE', 'some_random_123_collection_&$^%_of_stuff');
define ('SALT_TWO', 'another_random_%*!_collection_ANbu_of_stuff');

$password = 'dragon';

function generate_encrypted_password($str) {
$new_pword = '';

if( defined('SALT_ONE') ):
   $new_pword .= md5(SALT_ONE);
endif;

$new_pword .= md5($str);

if( defined('SALT_TWO') ):
   $new_pword .= md5(SALT_TWO);
endif;

return substr($new_pword, strlen($str), 40);
}

echo generate_encrypted_password($password);
?>

4.
<?
function enchsetenev($toencode,$times)
{
    $salt = 's+(_a*';
    for($zo=0;$zo<$times;$zo=$zo+1)
    {
        $toencode = hash('sha512',salt.$toencode);
        $toencode = md5($toencode.$salt);
    }
    return $toencode;
}

?>

5.
<?php
$hash = $password . $salt;

for ( $i = 0; $i < 10000; $i++ ) {
  $hash = md5( $hash );
}

echo $hash;
?>

","there is no standard good answer for this. What I do know is that security and speed has to be balanced. You could AES encrypt every information but would that be feasible? To answer your question MD5 (which is one way encrypt) plus SALT (a really random string) is considered a good standard of security. It just happens to be fastest and secure enough. 
If you try to implement your own encryption and what not it will be like that magic trick where you entangle the wire too many times and yet it comes undone with wrist slap. So go for SALT+MD5 unless you want to theorize and thesis-fy the idea. 
","3750","<php><md5><salt>","7","0","5","2013-03-23 01:27:42","5235195","6","3","","","","2011-03-08 16:09:08",""
"5235058","password security in PHP","What method would you call safest and most secure? I took these snippets off php.net.  I'm just wondering because people posted their own and I just couldn't catch on to understand why some are the way they are... Can someone help me out and tell me a little more about these? Which would be the most secure and why?
1.
<?php
$hash = md5($salt1.$password.$salt2);
?>

2.
<?php
function eliteEncrypt($string) {
    // Create a salt
    $salt = md5($string.""%*4!#$;\.k~'(_@"");

    // Hash the string
    $string = md5(""$salt$string$salt"");

    return $string;
}
?>

3.
<?php
define ('SALT_ONE', 'some_random_123_collection_&$^%_of_stuff');
define ('SALT_TWO', 'another_random_%*!_collection_ANbu_of_stuff');

$password = 'dragon';

function generate_encrypted_password($str) {
$new_pword = '';

if( defined('SALT_ONE') ):
   $new_pword .= md5(SALT_ONE);
endif;

$new_pword .= md5($str);

if( defined('SALT_TWO') ):
   $new_pword .= md5(SALT_TWO);
endif;

return substr($new_pword, strlen($str), 40);
}

echo generate_encrypted_password($password);
?>

4.
<?
function enchsetenev($toencode,$times)
{
    $salt = 's+(_a*';
    for($zo=0;$zo<$times;$zo=$zo+1)
    {
        $toencode = hash('sha512',salt.$toencode);
        $toencode = md5($toencode.$salt);
    }
    return $toencode;
}

?>

5.
<?php
$hash = $password . $salt;

for ( $i = 0; $i < 10000; $i++ ) {
  $hash = md5( $hash );
}

echo $hash;
?>

","<?php
$hash = md5($salt1.$password.$salt2);
?>

This one I think suits most of the purpose so I will explain it . Reason there are two salt are because lets say $salt1 is unique to every username hence its an column in the user table (a random string generated when user registers), $salt2 is stored on filesystem somewhere in config.ini file which was created when the application was installed and its same for all users . Now to guess the password hacker will need $salt1 and $salt1 , he can have access to salt1 through sql injection , but not have access to filesystem where salt2 is sotred inside config.ini hence double protection .
","3750","<php><md5><salt>","7","0","5","2013-03-23 01:27:42","5235195","6","3","","","","2011-03-08 16:09:08",""
"5235058","password security in PHP","What method would you call safest and most secure? I took these snippets off php.net.  I'm just wondering because people posted their own and I just couldn't catch on to understand why some are the way they are... Can someone help me out and tell me a little more about these? Which would be the most secure and why?
1.
<?php
$hash = md5($salt1.$password.$salt2);
?>

2.
<?php
function eliteEncrypt($string) {
    // Create a salt
    $salt = md5($string.""%*4!#$;\.k~'(_@"");

    // Hash the string
    $string = md5(""$salt$string$salt"");

    return $string;
}
?>

3.
<?php
define ('SALT_ONE', 'some_random_123_collection_&$^%_of_stuff');
define ('SALT_TWO', 'another_random_%*!_collection_ANbu_of_stuff');

$password = 'dragon';

function generate_encrypted_password($str) {
$new_pword = '';

if( defined('SALT_ONE') ):
   $new_pword .= md5(SALT_ONE);
endif;

$new_pword .= md5($str);

if( defined('SALT_TWO') ):
   $new_pword .= md5(SALT_TWO);
endif;

return substr($new_pword, strlen($str), 40);
}

echo generate_encrypted_password($password);
?>

4.
<?
function enchsetenev($toencode,$times)
{
    $salt = 's+(_a*';
    for($zo=0;$zo<$times;$zo=$zo+1)
    {
        $toencode = hash('sha512',salt.$toencode);
        $toencode = md5($toencode.$salt);
    }
    return $toencode;
}

?>

5.
<?php
$hash = $password . $salt;

for ( $i = 0; $i < 10000; $i++ ) {
  $hash = md5( $hash );
}

echo $hash;
?>

","
It is a basic example of what we want, a salt added to the password
It is the same example but with the salt generation part.
A different method for salting, but still pretty equivalent
There's absolutely no point in this over complicated example, hashing with two different hash method many times absolutely don't improve security.
Like already said, there's absolutely no point to perform 10000 times a hash.

If you change the first example to :
<?php
  $hash = hash('sha256', $salt1.$password.$salt2);
?>

this will be secure enough for 99% of the application.
The only question is how to generate the salt. I recommend a fixed salt ($salt2) and on salt generated for each user ($salt1) which is stored in the database along the password.
This way you're pretty secure against rainbow table attack even if someone retrieves the content of your database.
","3750","<php><md5><salt>","7","5","5","2013-03-23 01:27:42","5235195","6","3","","","","2011-03-08 16:09:08",""
"3273293","Salting my hashes with PHP and MySQL","Like most users, I'm simply trying to figure out a secure way to store passwords. What I haven't found here (or maybe it's my lack of understanding) is how to retrieve a salted hash in my database and separate the salt from the hashed password, especially with unique salts to each password while maintaining the salt+password in a single column.
I'm finding all these cool ways to encrypt passwords (SHA-256, but does MySQL only support SHA/1 and MD5?) and other things from the PHP manual, but not sure how store and retrieve the passwords.
So, far this is all I understand:
SHA('$salt'.'$password') // My query sends the password and salt 
                         // (Should the $salt be a hash itself?)

After that I'm lost with salts.
Retrieving the password without a salt is easy, but the salt confuses me. Where do I get the value from $salt again, especially if it's unique and secure? Do I hide them in another database? Constant (seems unsafe)?
EDIT: Is the key variable in HMAC supposed to be salt or is this something else?
","This seems covered in-depth in a previous post:
Secure hash and salt for PHP passwords
","3652","<php><mysql><security><salt>","10","3","3","2010-07-18 04:03:41","3273392","2","","385811","","2010-07-18 01:31:41","2010-07-17 21:10:54",""
"3273293","Salting my hashes with PHP and MySQL","Like most users, I'm simply trying to figure out a secure way to store passwords. What I haven't found here (or maybe it's my lack of understanding) is how to retrieve a salted hash in my database and separate the salt from the hashed password, especially with unique salts to each password while maintaining the salt+password in a single column.
I'm finding all these cool ways to encrypt passwords (SHA-256, but does MySQL only support SHA/1 and MD5?) and other things from the PHP manual, but not sure how store and retrieve the passwords.
So, far this is all I understand:
SHA('$salt'.'$password') // My query sends the password and salt 
                         // (Should the $salt be a hash itself?)

After that I'm lost with salts.
Retrieving the password without a salt is easy, but the salt confuses me. Where do I get the value from $salt again, especially if it's unique and secure? Do I hide them in another database? Constant (seems unsafe)?
EDIT: Is the key variable in HMAC supposed to be salt or is this something else?
","First of all, your DBMS (MySQL) does not need to have any support for cryptographic hashes. You can do all of that on the PHP side, and that's also what you should do.
If you want to store salt and hash in the same column you need to concatenate them.
// the plaintext password
$password = (string) $_GET['password'];

// you'll want better RNG in reality
// make sure number is 4 chars long
$salt = str_pad((string) rand(1, 1000), 4, '0', STR_PAD_LEFT);

// you may want to use more measures here too
// concatenate hash with salt
$user_password = sha512($password . $salt) . $salt;

Now, if you want to verify a password you do:
// the plaintext password
$password = (string) $_GET['password'];

// the hash from the db
$user_password = $row['user_password'];

// extract the salt
// just cut off the last 4 chars
$salt = substr($user_password, -4);
$hash = substr($user_password, 0, -4);

// verify
if (sha512($password . $salt) == $hash) {
  echo 'match';
}

You might want to take a look at phpass, which also uses this technique. It is a PHP hashing solution which uses salting amongst some other things.
You should definitely take a look at the answer to the question WolfOdrade linked to.
","3652","<php><mysql><security><salt>","10","5","3","2010-07-18 04:03:41","3273392","2","","385811","","2010-07-18 01:31:41","2010-07-17 21:10:54",""
"3273293","Salting my hashes with PHP and MySQL","Like most users, I'm simply trying to figure out a secure way to store passwords. What I haven't found here (or maybe it's my lack of understanding) is how to retrieve a salted hash in my database and separate the salt from the hashed password, especially with unique salts to each password while maintaining the salt+password in a single column.
I'm finding all these cool ways to encrypt passwords (SHA-256, but does MySQL only support SHA/1 and MD5?) and other things from the PHP manual, but not sure how store and retrieve the passwords.
So, far this is all I understand:
SHA('$salt'.'$password') // My query sends the password and salt 
                         // (Should the $salt be a hash itself?)

After that I'm lost with salts.
Retrieving the password without a salt is easy, but the salt confuses me. Where do I get the value from $salt again, especially if it's unique and secure? Do I hide them in another database? Constant (seems unsafe)?
EDIT: Is the key variable in HMAC supposed to be salt or is this something else?
","Personally I recommend letting MySQL do this with its built in functions.
They way I do this is to create a function in my database config file which returns a key string. The config file should be outside your sites root so that the webserver can access the file but not others. so for example:
function enc_key(){
     return ""aXfDs0DgssATa023GSEpxV"";
}

Then in your script use it with the sql query and AES_ENCRYPT and AES_DECRYPT functions in MySQL like this:
require_once('dbconf.inc.php');

$key = enc_key();

//When creating a new user
$sql = ""INSERT INTO users (username, password) VALUES ('bob', AES_ENCRYPT('{$key}', {$password}))"";

//When retrieving users password
$sql = ""SELECT AES_DECRYPT('{$key}', password) AS password FROM users WHERE username like 'bob'"";

","3652","<php><mysql><security><salt>","10","0","3","2010-07-18 04:03:41","3273392","2","","385811","","2010-07-18 01:31:41","2010-07-17 21:10:54",""
"8305893","What is the advantage of salting a password hash?","I have just read many, many articles on SO about hashing passwords with salt but I just cannot find an answer to the particular query/confusion I have.
Let's say I have just done this method for adding a password and salt to the DB:

Create a random salt
Hash the users password + salt together
Store the hash output as the password in column 'password'
Store the random salt in column 'salt'

If this is correct, what happens when an attacker gets access to my DB? Surely if they can read what the salt value is for that hashed password, they can work out what the hashed password is without the salt and then use a rainbow table? Or is it a good idea to encrypt the salt value too with something that is reversible?
If the salt value is stored in plain-text, I just cannot see the point of it. Please enlighten me?
","If the attacker gets to the database then all bets are off, but as far as salt ...
The point of a salt is not to be secret but rather to thwart rainbow attacks -- a rainbow attack is one which is done through a rainbow table. And a rainbow table is just pre-generated hashes of millions and millions of passwords (it's a space-time tradeoff). The introduction of a salt invalidates these precomputed hashes: a rainbow table must be made for each unique salt.
So...

Make a salt random, and;
Make a salt large

Now, if the attacker is assumed to have the database then there is another problem: the attack speed is not limited, and this is why a password hashing scheme like bcrypt or multiple-rounds is valuable. It can slow down the attack-speed from hundreds of millions of hashes per second (MD/SHA and friends were made to be fast) to, say, a few hundred per second (on the same hardware)... Also consider an HMAC approach, which also incorporates a server-secret (making it effectively password+salt+secret).
(I would just use an existing system that already addresses all these issues, and more :-)
Happy coding.
","3602","<database><encryption><hash><salt>","3","6","3","2014-08-30 23:09:49","8305943","0","3","3366929","","2014-08-30 23:09:49","2011-11-29 04:33:42",""
"8305893","What is the advantage of salting a password hash?","I have just read many, many articles on SO about hashing passwords with salt but I just cannot find an answer to the particular query/confusion I have.
Let's say I have just done this method for adding a password and salt to the DB:

Create a random salt
Hash the users password + salt together
Store the hash output as the password in column 'password'
Store the random salt in column 'salt'

If this is correct, what happens when an attacker gets access to my DB? Surely if they can read what the salt value is for that hashed password, they can work out what the hashed password is without the salt and then use a rainbow table? Or is it a good idea to encrypt the salt value too with something that is reversible?
If the salt value is stored in plain-text, I just cannot see the point of it. Please enlighten me?
","The steps you outline are correct.
If the attacker accesses your database, he has to do a brute force search of the possible passwords plus the random salt.  If you use a 64-bit reasonably random salt, then there won't be two entries using the same salt, so any rainbow table attack only works for (at most) one salt value at a time, which makes the rainbow table attack too expensive to be worthwhile.  (You can even check to ensure that there is no other password using a given salt when you establish the salt for a user.)
The point of the salted hashed password process is to make it computationally infeasible to precompute possible password hashes, because the random salt screws up the precomputation process.
It also means that if the same password is used at different sites, it won't be obvious by simply looking at the (salted hashed) password values - because the salts will be different at the different sites, so the resulting hash value will be different.  (Of course, if the password is discovered for one site, then the attacker will try that password first at the next site; it is still best not to use the same password in multiple locations.  But the fact that the same password is in use is hidden.)
","3602","<database><encryption><hash><salt>","3","4","3","2014-08-30 23:09:49","8305943","0","3","3366929","","2014-08-30 23:09:49","2011-11-29 04:33:42",""
"8305893","What is the advantage of salting a password hash?","I have just read many, many articles on SO about hashing passwords with salt but I just cannot find an answer to the particular query/confusion I have.
Let's say I have just done this method for adding a password and salt to the DB:

Create a random salt
Hash the users password + salt together
Store the hash output as the password in column 'password'
Store the random salt in column 'salt'

If this is correct, what happens when an attacker gets access to my DB? Surely if they can read what the salt value is for that hashed password, they can work out what the hashed password is without the salt and then use a rainbow table? Or is it a good idea to encrypt the salt value too with something that is reversible?
If the salt value is stored in plain-text, I just cannot see the point of it. Please enlighten me?
","Let's say you didn't use a salt and an attacker got your hashes.  All she'd need to do to is compare the hashes to a lookup table and see if any of the hashes are for known passwords.  Let's say the table has a million passwords in it.  She can very efficiently check all your hashes against a million possible passwords.
Now let's say the same attacker got your hashes, but they are salted.  For each hash she wants to examine, she'll need to take the candidate password, apply the salt, compute a new hash, and compare it to the hash you have stored.  Now she has to do a ton of calculations and it's not as efficient.  (Alternatively, she could have a lookup table with every possible salt in it, but OK, then she needs to have a lookup table that is orders of magnitude larger than the one without salts.)
It's all about making the amount of resources required to crack the hashes more than it's worth to the attacker.
","3602","<database><encryption><hash><salt>","3","3","3","2014-08-30 23:09:49","8305943","0","3","3366929","","2014-08-30 23:09:49","2011-11-29 04:33:42",""
"4248068","Generate password hashes for user registration on Kohana","I can't register new users, or modify user passwords, on our Kohana built website app. I do have access to our database and can change passwords there but I need a way to generate password hashes from strings which will be accepted by the system. 
How can I use hash_password(passwordstring, FALSE) to display the hash I should insert into the DB?
Is there anything in the modules/auth/classes/kohana/auth.php file that I should be looking at?
","Kohana is just a framework, its not a user system. You will need to provide the code for the hash_password function as this looks like a library of some sort.
","3597","<php><passwords><kohana><salt>","0","1","2","2011-07-16 20:55:49","4253347","0","","9314","","2011-07-16 20:55:49","2010-11-22 17:07:12",""
"4248068","Generate password hashes for user registration on Kohana","I can't register new users, or modify user passwords, on our Kohana built website app. I do have access to our database and can change passwords there but I need a way to generate password hashes from strings which will be accepted by the system. 
How can I use hash_password(passwordstring, FALSE) to display the hash I should insert into the DB?
Is there anything in the modules/auth/classes/kohana/auth.php file that I should be looking at?
","Use echo Auth::instance()->hash_password('new password'). You dont need pass $salt value because it will be generated automatically.
","3597","<php><passwords><kohana><salt>","0","4","2","2011-07-16 20:55:49","4253347","0","","9314","","2011-07-16 20:55:49","2010-11-22 17:07:12",""
"478105","Difference between 'character' and 'octet' in hashing","I see the term 'octet' popping up in literature about nonces for hashing, and it seems to be synonymous with 'character', although there is a kind of pattern to how the words are used.
This leads me to believe that there is a formal distinction between the two. If anyone could enlighten me to what it is, I'd appreciate it.
(and please, no lectures about octal character codes or octal (base 8) numbers; I'm talking about the noun 'octet', not the adjective)
EDIT: as it turns out, the word I was looking for, is 'octet'.
","You are probably thinking about the term octet that is often used to be synonymous with a single-byte (non-unicode) character.  Octet in this instance means eight bits.  A character can be eight or sixteen or even more bits, but an octet is always eight bits.
","3579","<hash><character-encoding><character><salt><octal>","7","23","3","2011-10-14 10:46:01","478115","0","1","57068","Bill the Lizard","2011-10-14 10:46:01","2009-01-25 19:31:42",""
"478105","Difference between 'character' and 'octet' in hashing","I see the term 'octet' popping up in literature about nonces for hashing, and it seems to be synonymous with 'character', although there is a kind of pattern to how the words are used.
This leads me to believe that there is a formal distinction between the two. If anyone could enlighten me to what it is, I'd appreciate it.
(and please, no lectures about octal character codes or octal (base 8) numbers; I'm talking about the noun 'octet', not the adjective)
EDIT: as it turns out, the word I was looking for, is 'octet'.
","Octet is the french word for a byte, it is called octet because it contains eight bits.
The term is used mainly in telecommunications, probably due to the heavy french influence in e.g. CCITT.
","3579","<hash><character-encoding><character><salt><octal>","7","2","3","2011-10-14 10:46:01","478115","0","1","57068","Bill the Lizard","2011-10-14 10:46:01","2009-01-25 19:31:42",""
"478105","Difference between 'character' and 'octet' in hashing","I see the term 'octet' popping up in literature about nonces for hashing, and it seems to be synonymous with 'character', although there is a kind of pattern to how the words are used.
This leads me to believe that there is a formal distinction between the two. If anyone could enlighten me to what it is, I'd appreciate it.
(and please, no lectures about octal character codes or octal (base 8) numbers; I'm talking about the noun 'octet', not the adjective)
EDIT: as it turns out, the word I was looking for, is 'octet'.
","An octet is an 8-bit piece of data, a byte (though bytes don't necessarily have 8 bits). A character is the smallest unit of text. They are completely separate concepts, and using them interchangeably betrays serious ignorance of the complexity of text encodings. Unfortunately, this particular element of ignorance is far too common, and that the C standard explicitly defines a char to have a size of 1 byte does not help.
In particular, I'd be very wary of any cryptographic text that uses ""character"" to mean ""byte"" (or ""octet"").
","3579","<hash><character-encoding><character><salt><octal>","7","5","3","2011-10-14 10:46:01","478115","0","1","57068","Bill the Lizard","2011-10-14 10:46:01","2009-01-25 19:31:42",""
"14648244","Do I need base64 encode my salt (for hashing passwords)?","Excuse me for this very odd question. I understand the purpose of base64 encoding for transmitting data (i.e. MIME's Base64 encoding), but I don't know if I need to base64 encode my salts.
I wrote an utility class (a base abstract class indeed):
use Symfony\Component\Security\Core\Encoder\BasePasswordEncoder;

abstract class AbstractCryptPasswordEncoder extends BasePasswordEncoder
{
    /**
     * @return string
     */
    protected abstract function getSaltPrefix();

    /**
     * @return string
     */
    protected abstract function getSalt();

    /**
     * {@inheritdoc}
     */
    public function encodePassword($raw, $salt = null)
    {
        return crypt($raw, $this->getSaltPrefix().$this->getSalt());
    }

    /**
     * {@inheritdoc}
     */
    public function isPasswordValid($encoded, $raw, $salt = null)
    {
        return $encoded === crypt($raw, $encoded);
    }
}

A real implementation class would be:
class Sha512CryptPasswordEncoder extends AbstractCryptPasswordEncoder
{
    /**
     * @var string
     */
    private $rounds;

    /**
     * @param null|int $rounds The number of hashing loops
     */
    public function __construct($rounds = null)
    {
        $this->rounds = $rounds;
    }

    /**
     * {@inheritdoc}
     */
    protected  function getSaltPrefix()
    {
        return sprintf('$6$%s', $this->rounds ? ""rounds={$this->rounds}$"" : '');
    }

    /**
     * {@inheritdoc}
     */
    protected function getSalt()
    {
        return base64_encode(openssl_random_pseudo_bytes(12));
    }
}

The key part is the salt generation, which will be embedded in the password: do I need base64_encode for any reason (storing), assuming that it will be never sent over the wire?
","BASE64 is used to encode binary data into text representation. It allow to transfer binary data using text channels. If you want to store hashed password in DB you don't have to encode it - it is already in text format.
","3506","<php><passwords><base64><salt><crypt>","1","1","2","2013-02-01 15:42:48","14649283","1","","220180","","2013-02-01 14:52:50","2013-02-01 14:15:48",""
"14648244","Do I need base64 encode my salt (for hashing passwords)?","Excuse me for this very odd question. I understand the purpose of base64 encoding for transmitting data (i.e. MIME's Base64 encoding), but I don't know if I need to base64 encode my salts.
I wrote an utility class (a base abstract class indeed):
use Symfony\Component\Security\Core\Encoder\BasePasswordEncoder;

abstract class AbstractCryptPasswordEncoder extends BasePasswordEncoder
{
    /**
     * @return string
     */
    protected abstract function getSaltPrefix();

    /**
     * @return string
     */
    protected abstract function getSalt();

    /**
     * {@inheritdoc}
     */
    public function encodePassword($raw, $salt = null)
    {
        return crypt($raw, $this->getSaltPrefix().$this->getSalt());
    }

    /**
     * {@inheritdoc}
     */
    public function isPasswordValid($encoded, $raw, $salt = null)
    {
        return $encoded === crypt($raw, $encoded);
    }
}

A real implementation class would be:
class Sha512CryptPasswordEncoder extends AbstractCryptPasswordEncoder
{
    /**
     * @var string
     */
    private $rounds;

    /**
     * @param null|int $rounds The number of hashing loops
     */
    public function __construct($rounds = null)
    {
        $this->rounds = $rounds;
    }

    /**
     * {@inheritdoc}
     */
    protected  function getSaltPrefix()
    {
        return sprintf('$6$%s', $this->rounds ? ""rounds={$this->rounds}$"" : '');
    }

    /**
     * {@inheritdoc}
     */
    protected function getSalt()
    {
        return base64_encode(openssl_random_pseudo_bytes(12));
    }
}

The key part is the salt generation, which will be embedded in the password: do I need base64_encode for any reason (storing), assuming that it will be never sent over the wire?
","Each hash algorithm expects a salt in a given alphabet, that means using base64_encode() can be the right thing, but often it does either not use the full alphabet or returns characters that are not in this alphabet.
Take BCrypt for example, this is a good hash algorithm for passwords (SHA-512 is not appropriate because it is too fast), it accepts all characters of a base64-encoded string except the '+' character. On the other side it accepts '.' characters that are not part of a base64-encoded string.
PHP 5.5 will have the functions password_hash() and password_verify() ready, to make the usage of BCrypt easier, i really can recommend them. There is also a compatibility pack available for older PHP versions, on line 121 you can see that base64_encode() is indeed used, but afterwards all invalid '+' characters are replaced with allowed '.' characters:
Encoding a salt for BCrypt:
$salt = str_replace('+', '.', base64_encode($buffer));

","3506","<php><passwords><base64><salt><crypt>","1","3","2","2013-02-01 15:42:48","14649283","1","","220180","","2013-02-01 14:52:50","2013-02-01 14:15:48",""
"6464662","Web Application - Storing a Password","Have I missed anything? Are there any additional steps storing passwords to the DB?
Storing the Password:
    After as much research on the subject as possible I've come to the conclusion that the best way to store user passwords in a web application DB (in my case MySQL+PHP) is as follows:

Assign a sitewide static salt. (16 rand chars incl 0-9,a-z,A-Z,[]/*-')
Assign a per user random salt (stored in the DB).
Store the result hash_function($userPassword + $sitewideSalt + $randomSalt)
Store the $randomSalt alongside the resulting hash.
Use bcrypt adjustable workload
hashing



Attack #1: Attacker dumps the DB via SQL Injection.
    DB results of
our hash_function and the random per
user salt. 
After the dump the attacker could
obtain $userPassword and
$randomSalt by looking up his own account. Then by guessing the hash
function such as md5 he could start a
rainbow attack on the
$sitewideSalt. But that could take up to 1.41 hundred million
centuries[1].
By using this type of security does not allow a dump of the DB to compromise stored passwords. The user still has to find the $sitewideSalt through another method.
Attack #2: Attacker finds a Local File Inclusion (LFI) vector.
    Attacker could obtain the raw code for our web application.
      After exploiting the web application    through a possible LFI
or RFI[2] the    attacker reads the
source code for    our web
application and obtains our    simple
algorithm and the stored
$sitewideSalt.


Where to next?
    Now the attacker has both of the salts he can begin to rainbow to obtain the actual passwords. Except he must make 1 rainbow table for each user as each user has a different random user specific salt ($randomSalt). 

""A modern server can calculate the MD5
  hash of about 330MB every second. If
  your users have passwords which are
  lowercase, alphanumeric, and 6
  characters long, you can try every
  single possible password of that size
  in around 40 seconds."" ""...CUDA, you can put together your own little supercomputer cluster which will let you try around 700,000,000 passwords a second...""[3]

    What we need to do now is extend the hashing function by using a time consuming algorithm such as bcrypt. bcrypt's work load factor can be 5-6 orders of magnitude that of the simpler hashing functions. Cracking just one password can take years instead of minutes. And as a bonus bcrypt already generates a random salt for each hash and stores it in the resulting hash.

http://www.grc.com/haystack.htm 
http://www.wildcardsecurity.com/security101/index.php?title=Local_File_Inclusion

","Using BCrypt to handle passwords is the only step, or rather, encompasses the following:

Take password, provide it to BCrypt library.
Store resulting hash.
Compare password to hash.

You also forgot this link: http://codahale.com/how-to-safely-store-a-password/ which is what you reference with the quote.
","3486","<passwords><security><hash><salt>","9","1","2","2011-06-26 03:14:03","6481914","0","7","","","","2011-06-24 07:21:46",""
"6464662","Web Application - Storing a Password","Have I missed anything? Are there any additional steps storing passwords to the DB?
Storing the Password:
    After as much research on the subject as possible I've come to the conclusion that the best way to store user passwords in a web application DB (in my case MySQL+PHP) is as follows:

Assign a sitewide static salt. (16 rand chars incl 0-9,a-z,A-Z,[]/*-')
Assign a per user random salt (stored in the DB).
Store the result hash_function($userPassword + $sitewideSalt + $randomSalt)
Store the $randomSalt alongside the resulting hash.
Use bcrypt adjustable workload
hashing



Attack #1: Attacker dumps the DB via SQL Injection.
    DB results of
our hash_function and the random per
user salt. 
After the dump the attacker could
obtain $userPassword and
$randomSalt by looking up his own account. Then by guessing the hash
function such as md5 he could start a
rainbow attack on the
$sitewideSalt. But that could take up to 1.41 hundred million
centuries[1].
By using this type of security does not allow a dump of the DB to compromise stored passwords. The user still has to find the $sitewideSalt through another method.
Attack #2: Attacker finds a Local File Inclusion (LFI) vector.
    Attacker could obtain the raw code for our web application.
      After exploiting the web application    through a possible LFI
or RFI[2] the    attacker reads the
source code for    our web
application and obtains our    simple
algorithm and the stored
$sitewideSalt.


Where to next?
    Now the attacker has both of the salts he can begin to rainbow to obtain the actual passwords. Except he must make 1 rainbow table for each user as each user has a different random user specific salt ($randomSalt). 

""A modern server can calculate the MD5
  hash of about 330MB every second. If
  your users have passwords which are
  lowercase, alphanumeric, and 6
  characters long, you can try every
  single possible password of that size
  in around 40 seconds."" ""...CUDA, you can put together your own little supercomputer cluster which will let you try around 700,000,000 passwords a second...""[3]

    What we need to do now is extend the hashing function by using a time consuming algorithm such as bcrypt. bcrypt's work load factor can be 5-6 orders of magnitude that of the simpler hashing functions. Cracking just one password can take years instead of minutes. And as a bonus bcrypt already generates a random salt for each hash and stores it in the resulting hash.

http://www.grc.com/haystack.htm 
http://www.wildcardsecurity.com/security101/index.php?title=Local_File_Inclusion

","Nice work! Looks very complete to me.
Only suggestions I would have are:
Rotate the service salt.
Design a method to periodically rotate the service-wide salt, and exercise it regularly.
For example, after generating a new service salt, use it for all new accounts & any password changes. When an existing user tries to log in, authenticate them with the old service salt. If successful, update their hash with the new service salt (and optionally a new user-specific salt). For users who don't log in for 'some time', randomly generate a new password on their behalf. This will 'keep up' security for users who've abandoned your site, forcing those that return to use the password reset facilities. ('some time' = whatever period you're comfortable with).
Don't hard-code your service salt.
Don't allow a LFI attack to compromise your service salt. Feed the service-salt to your application at start up, and keep it in memory. To compromise the service salt, an attacker would need to be able to execute code to read the salt from memory. If an attacker can do that, you're pretty well hosed anyway. =)
Don't reuse a users salt.
Look for opportunities to give users new salts. User changes his password? Generate a new random salt. This further hampers brute forcing your server-wide salt should an attacker be able to obtain his hash whenever he feels like it. Couple this with regularly rotating your service-salt, and I'd wager you've got a strong deterrent against brute-forcing.
(Marking this as a community wiki should others have additional ideas).
","3486","<passwords><security><hash><salt>","9","4","2","2011-06-26 03:14:03","6481914","0","7","","","","2011-06-24 07:21:46",""
"1111494","Are hashed and salted passwords secure against dictionary attacks?","I understand that salts make the same password hash to different values.  However, salts are usually stored in the database with the password.  So let's say I am attacker, here is how I might use a dictionary attack against a salt (note in this example i don't write out 128 bit hashes or salts for the sake of brevity):
user_pw = 'blowfish'

Given:
email = 'blah@blah.com'
hash = '1234567890'
salt = '0987654321'

function attack(){
  for each(word in dictionary)
    md5( word * salt ) == hash ? cracked_one(email, word)
}

I understand this prevents hackers from using rainbow tables...but doesn't seem to prevent dictionary attacks.  I guess you could add something else to the hash algorithm, but with security we must assume that the method of attack is known.
So it seems that salting prevents hackers from figuring out which passwords are likely to be dictionary passwords (ones that multiple users have) and prevents rainbow attacks...but does not prevent dictionary attacks.
Is this a correct analysis? Any suggestions for better security?
Thanks!
","That's correct. If someone got the password material, a dictionary attack would be effective.
To guard against this:

Make sure your passwords aren't subject to dictionary attacks.
Make sure your password file (/etc/shadow) is readable only by root.

","3474","<security><authentication><hash><salt>","9","1","5","2009-11-01 21:04:44","1111516","0","","","","","2009-07-10 19:25:12",""
"1111494","Are hashed and salted passwords secure against dictionary attacks?","I understand that salts make the same password hash to different values.  However, salts are usually stored in the database with the password.  So let's say I am attacker, here is how I might use a dictionary attack against a salt (note in this example i don't write out 128 bit hashes or salts for the sake of brevity):
user_pw = 'blowfish'

Given:
email = 'blah@blah.com'
hash = '1234567890'
salt = '0987654321'

function attack(){
  for each(word in dictionary)
    md5( word * salt ) == hash ? cracked_one(email, word)
}

I understand this prevents hackers from using rainbow tables...but doesn't seem to prevent dictionary attacks.  I guess you could add something else to the hash algorithm, but with security we must assume that the method of attack is known.
So it seems that salting prevents hackers from figuring out which passwords are likely to be dictionary passwords (ones that multiple users have) and prevents rainbow attacks...but does not prevent dictionary attacks.
Is this a correct analysis? Any suggestions for better security?
Thanks!
","Your logic is sound, but in reality, with enough computing power and time, there is no protection against dictionary/brute-force attacks. 
","3474","<security><authentication><hash><salt>","9","0","5","2009-11-01 21:04:44","1111516","0","","","","","2009-07-10 19:25:12",""
"1111494","Are hashed and salted passwords secure against dictionary attacks?","I understand that salts make the same password hash to different values.  However, salts are usually stored in the database with the password.  So let's say I am attacker, here is how I might use a dictionary attack against a salt (note in this example i don't write out 128 bit hashes or salts for the sake of brevity):
user_pw = 'blowfish'

Given:
email = 'blah@blah.com'
hash = '1234567890'
salt = '0987654321'

function attack(){
  for each(word in dictionary)
    md5( word * salt ) == hash ? cracked_one(email, word)
}

I understand this prevents hackers from using rainbow tables...but doesn't seem to prevent dictionary attacks.  I guess you could add something else to the hash algorithm, but with security we must assume that the method of attack is known.
So it seems that salting prevents hackers from figuring out which passwords are likely to be dictionary passwords (ones that multiple users have) and prevents rainbow attacks...but does not prevent dictionary attacks.
Is this a correct analysis? Any suggestions for better security?
Thanks!
","Salt doesn't prevent dictionary attacks, just precalculated dictionary attacks.  In particular, it protects against rainbow tables (http://en.wikipedia.org/wiki/Rainbow_table) and also ensures that cracking one user's password doesn't automatically let you crack any user who shares that password.
The article I linked to mentions some ways to improve upon salting, incudling key strengthening (http://en.wikipedia.org/wiki/Key_strengthening).
","3474","<security><authentication><hash><salt>","9","10","5","2009-11-01 21:04:44","1111516","0","","","","","2009-07-10 19:25:12",""
"1111494","Are hashed and salted passwords secure against dictionary attacks?","I understand that salts make the same password hash to different values.  However, salts are usually stored in the database with the password.  So let's say I am attacker, here is how I might use a dictionary attack against a salt (note in this example i don't write out 128 bit hashes or salts for the sake of brevity):
user_pw = 'blowfish'

Given:
email = 'blah@blah.com'
hash = '1234567890'
salt = '0987654321'

function attack(){
  for each(word in dictionary)
    md5( word * salt ) == hash ? cracked_one(email, word)
}

I understand this prevents hackers from using rainbow tables...but doesn't seem to prevent dictionary attacks.  I guess you could add something else to the hash algorithm, but with security we must assume that the method of attack is known.
So it seems that salting prevents hackers from figuring out which passwords are likely to be dictionary passwords (ones that multiple users have) and prevents rainbow attacks...but does not prevent dictionary attacks.
Is this a correct analysis? Any suggestions for better security?
Thanks!
","Without salt, the attacker can generate hashes for every word in his dictionnary then run the new dictionnary against your passwords list
With salt, each password is hashed with a random string so even with the prior hashed dictionnary knowledge, he still have to re-create a new hashed dictionnary containing the salt for every different salt in your database.
Just think of dictionnaries tables as a subset (small portion) of the rainbow tables. While rainbow tables can contain billions of entries, dictionnaries contain ""known words"", so maybe a few million entries at most.
The reason why rainbow tables fail against salt is because the re-creation process would be ""billions of entries"" of recalculation while dictionnary attacks are still ""few millions of entries"". The salt just blocks precomputed values
","3474","<security><authentication><hash><salt>","9","1","5","2009-11-01 21:04:44","1111516","0","","","","","2009-07-10 19:25:12",""
"1111494","Are hashed and salted passwords secure against dictionary attacks?","I understand that salts make the same password hash to different values.  However, salts are usually stored in the database with the password.  So let's say I am attacker, here is how I might use a dictionary attack against a salt (note in this example i don't write out 128 bit hashes or salts for the sake of brevity):
user_pw = 'blowfish'

Given:
email = 'blah@blah.com'
hash = '1234567890'
salt = '0987654321'

function attack(){
  for each(word in dictionary)
    md5( word * salt ) == hash ? cracked_one(email, word)
}

I understand this prevents hackers from using rainbow tables...but doesn't seem to prevent dictionary attacks.  I guess you could add something else to the hash algorithm, but with security we must assume that the method of attack is known.
So it seems that salting prevents hackers from figuring out which passwords are likely to be dictionary passwords (ones that multiple users have) and prevents rainbow attacks...but does not prevent dictionary attacks.
Is this a correct analysis? Any suggestions for better security?
Thanks!
","Nothing keeps an attacker from just guessing the password.  
Salts just make it harder by forcing an attacker to hash the dictionary on a per-user (effectively, per-salt) basis.
To improve security, a tunable hash function is your best bet.  Crank the time-per-hash up, making dictionary attacks impractical on whatever hardware your attacker is likely to have available.
Basically, read this.
","3474","<security><authentication><hash><salt>","9","4","5","2009-11-01 21:04:44","1111516","0","","","","","2009-07-10 19:25:12",""
"9338730","Getting Password Salt when Using Jasypt","I want to use Jasypt to encrypt user passwords using a random Salt. Is it possible to get random slat from Jasypt? How could I get it?
Thanks,
Feras
","Never used Jasypt, but from their documentation:

A salt of the specified size is generated (see org.jasypt.salt.SaltGenerator). If salt size is zero, no salt will be used. It is advisable that you use a random salt generator like org.jasypt.salt.RandomSaltGenerator (which is the default) for higher security.

you can use RandomSaltGenerator.
","3460","<java><encryption><salt><jasypt>","2","0","2","2012-02-18 16:58:31","9343158","0","1","","","","2012-02-18 05:02:22",""
"9338730","Getting Password Salt when Using Jasypt","I want to use Jasypt to encrypt user passwords using a random Salt. Is it possible to get random slat from Jasypt? How could I get it?
Thanks,
Feras
","Using a random salt is in fact the default behaviour of all jasypt encryption artifacts, and this salt is generated securely (using SHA1PRNG).
Please read http://www.jasypt.org/howtoencryptuserpasswords.html in order to know more about the way passwords are processed in jasypt.
","3460","<java><encryption><salt><jasypt>","2","3","2","2012-02-18 16:58:31","9343158","0","1","","","","2012-02-18 05:02:22",""
"17711342","Salt: Can I use an argument from the command line as a jinja variable?","Given a file called package-list, I want to do something like:
salt state.sls install-packages list_to_install=package-list

...and then in the sls:
packages:
    pkg.installed:
        - names:
            {% include list_to_install %}

","You can do this using Pillar:
packages:
  pkg:
    - installed
    - pkgs: {{ salt['pillar.get']('packages') }}

Then pass the pillar argument containing valid YAML:
salt '*' state.sls package-list pillar='{packages: [foo, bar, baz]}'

","3385","<salt><jinja2>","8","11","1","2013-07-18 18:32:43","17731315","1","3","","","","2013-07-17 22:25:27",""
"13156274","Symfony 2 using salt login always returns Bad credentials","if I'am using salt to decode my password using, the login always returns ""Bad credentials"".
I'am using Fixture to create some testdata:
public function load(ObjectManager $manager)
{
    $encodeFactory = $this->container->get('security.encoder_factory');

    $user = new User();
    $user->setUsername('admin');
    $user->setEmail('webmaster@aranox.de');

    $encoder = $encodeFactory->getEncoder($user);
    $user->setPassword($encoder->encodePassword('admin', $user->getSalt()));

    $user->setIsEnabled(true);

    $manager->persist($user);
    $manager->flush();

    $this->addReference('user-admin', $user);
}

I set up the encoding in security.yml:
security:
    encoders:
        Aranox\UserBundle\Entity\User:
            algorithm: sha512

creating salt in my user-entity using:
...
/**
 * @ORM\Column(type=""string"", length=255)
 */
private $password;
/**
 * @ORM\Column(type=""string"", length=255)
 */
private $salt;

...
function __construct()
{
    $this->groups               = new ArrayCollection();
    $this->salt                 = md5(uniqid(null, true)); 
...

If creating no salt ($this->salt = """"), all works fine.
How can this happens? 
","Please check your password field length in entity file and increase it to 255 if less because sha512 contain long string .
","3330","<php><security><symfony><login><salt>","3","5","1","2012-10-31 12:05:28","","0","1","1029598","","2012-10-31 12:05:28","2012-10-31 10:54:50",""
"5051007","What is the purpose of salt?","In a Linux system, passwords are stored using an MD5 hash. Why can the usage of ""salt"" protect the system more? Particularly, I want to make clear the following two

The salt is said to be stored in
clear text with the hash, then how
it can prevent the attacker when the
attacker knows the salt value.
(Attacker can be the system
administrator himself who can check
/etc/shadow.
If the salt is generated randomly
everytime, how can the system
compare the hash to authenticate the
user?

For example, User A has user salt s1 and generate h1; h1 = md5(password.s1);. 
The next time, it uses salt s2 and the system must generate a different hash, h2 = md5(password.s2). Since h1 is not equal to h2, how can the system authenticate the user?
","You can reverse a simple hash algorithm by brute force.
If you are using a common word for passwords, some prebuild tables (like rainbow ones) might contain them. That's why most algorithms call the hash function several times:
md5(md5(md5(password)));

Using salt gives a lot more of randomness to the generated password and thus make it less guessable. It consists of adding a random piece of string in the process
md5(md5(md5(password+string)+string)+string);

","3330","<security><md5><salt>","8","5","4","2011-05-15 14:02:11","5051078","5","6","227466","","2011-02-26 21:05:42","2011-02-19 13:24:30",""
"5051007","What is the purpose of salt?","In a Linux system, passwords are stored using an MD5 hash. Why can the usage of ""salt"" protect the system more? Particularly, I want to make clear the following two

The salt is said to be stored in
clear text with the hash, then how
it can prevent the attacker when the
attacker knows the salt value.
(Attacker can be the system
administrator himself who can check
/etc/shadow.
If the salt is generated randomly
everytime, how can the system
compare the hash to authenticate the
user?

For example, User A has user salt s1 and generate h1; h1 = md5(password.s1);. 
The next time, it uses salt s2 and the system must generate a different hash, h2 = md5(password.s2). Since h1 is not equal to h2, how can the system authenticate the user?
","When you encrypt data it can be still attacked by bruce-force attacks and rainbow attacks. In salting, at the end of the encrypted data you add some additional bits. So the attacker cannot get the original data properly.
","3330","<security><md5><salt>","8","0","4","2011-05-15 14:02:11","5051078","5","6","227466","","2011-02-26 21:05:42","2011-02-19 13:24:30",""
"5051007","What is the purpose of salt?","In a Linux system, passwords are stored using an MD5 hash. Why can the usage of ""salt"" protect the system more? Particularly, I want to make clear the following two

The salt is said to be stored in
clear text with the hash, then how
it can prevent the attacker when the
attacker knows the salt value.
(Attacker can be the system
administrator himself who can check
/etc/shadow.
If the salt is generated randomly
everytime, how can the system
compare the hash to authenticate the
user?

For example, User A has user salt s1 and generate h1; h1 = md5(password.s1);. 
The next time, it uses salt s2 and the system must generate a different hash, h2 = md5(password.s2). Since h1 is not equal to h2, how can the system authenticate the user?
","One reason could be, if two people use same password unknowingly they will generate same MD5. One of them can just see /etc/shadow and guess other guys password.
Now with salt added to each password, even same passwords generate different hashes.
","3330","<security><md5><salt>","8","2","4","2011-05-15 14:02:11","5051078","5","6","227466","","2011-02-26 21:05:42","2011-02-19 13:24:30",""
"5051007","What is the purpose of salt?","In a Linux system, passwords are stored using an MD5 hash. Why can the usage of ""salt"" protect the system more? Particularly, I want to make clear the following two

The salt is said to be stored in
clear text with the hash, then how
it can prevent the attacker when the
attacker knows the salt value.
(Attacker can be the system
administrator himself who can check
/etc/shadow.
If the salt is generated randomly
everytime, how can the system
compare the hash to authenticate the
user?

For example, User A has user salt s1 and generate h1; h1 = md5(password.s1);. 
The next time, it uses salt s2 and the system must generate a different hash, h2 = md5(password.s2). Since h1 is not equal to h2, how can the system authenticate the user?
","MD5 is a hash as you know, so if you give it an input, like 'PASSWORD', you get a unique (hopefully - however MD5 has collisions these days) output, like '3DE2AF...'.
Now, as you know, it's quite hard to directly reverse that, until somebody thought... wait, why don't I pre-generate all the possible combinations of hashable values until I can reverse the hash. This is called a rainbow table.
The purpose of a salt is to add arbitrary random data to the string being hashed, such that you increase the length of input to hash. This means general rainbow tables that expect to reverse just a password input to a hash won't work. Of course, rainbow tables being just reverse lookups, you could simply generate a rainbow table to compensate for all the possible password+salt outputs. This is where the increase in length comes into its own; because of the nature of reversing hashes, the disk space to generate reverses for very long hash inputs soon becomes infeasible. Alphanumeric rainbow tables for 6-8 characters are already a couple of Gigabytes; increase the length and character classes and you start to talk in multiples of 10GB.
Of course, if you're salting with 'PASSWORD' and you hash 'PASSWORD' you're hashing 'PASSWORDPASSWORD' which isn't that much more secure, so the choice of salt is important too. Ideally, you should use a random salt with each hashed string, but of course, you need to know what it is. A common technique is to derive a salt from the username or some other property unique to this case. Adding arbitrary data isn't in itself useful; having user-determined salt data now adds an additional level of complexity, meaning rainbow tables are needed with specialised searches for each user. The more you make this difficult, the more computational power is needed. That's where the battle is.
However, there are some modern techniques. I am not an expert, so I can't tell you how secure these are, but they are worth a mention. The concept is slow hashing. Basically, through compound hash functions you make it take a while to compute each hash. As such, the ability for each user to check the password now has a constant amount of time added for each password you wish to check. If you're bruteforcing, that is Bad News(tm). Similarly, if the system is well designed, if there are no shortcuts (which probably equate to weaknesses) then generating a rainbow table for a slow hash function should also take a while.
Edit more detail here. See crypt() for the first example of this. @CodeInChaos has referenced PBKDF2 which forms part of PKCS#5. A newer development is scrypt. 
As I say, I'm not an expert cryptanalyst. On the latter example, I have no particular specialist knowledge as to its suitability, I'm merely showing you where things are headed.
Edit 2 Clarified my write up of salt - I think I danced around the key issue of disk space before.
","3330","<security><md5><salt>","8","13","4","2011-05-15 14:02:11","5051078","5","6","227466","","2011-02-26 21:05:42","2011-02-19 13:24:30",""
"36955261","Accepted Method to Generate Salt for a password-hash function - C++","I am in the process of programming a password manager(for educational purposes only!) in C++. To generate the master key, my program will run the
previously inputed master password through the password hashing function argon2 to generate a master key. I have 1 problem. I need a way to generate salt for use with that hash function. From my previous research(Google search: ""generate salt c++"", and searching StackOverflow), I have seen people do various things similar to this:
#include <iostream>
#include <string>
#include <cstdlib>
#include <ctime>
using namespace std;

static const char alphanum[] =
""0123456789""
""!@#$%^&*""
""ABCDEFGHIJKLMNOPQRSTUVWXYZ""
""abcdefghijklmnopqrstuvwxyz"";

int stringLength = sizeof(alphanum) - 1;

char genRandom()  // Random string generator function.
{

    return alphanum[rand() % stringLength];
}

int main()
{
    srand(time(0));
    for(int z=0; z < 21; z++)
    {
        cout << genRandom();

    }
    return 0;

}

My question is: Will generating a random string with rand() be enough, or is there a more accepted method of generating salt, or a library that can do it for me?
P.S When I searched StackOverflow, I could really only find articles on PHP and C#.
","If you really just need a salt, i.e., something you can hash with a password to make the hash unique, then it just needs to be unique.  In particular it doesn't need to be random or unguessable in any way.
I would concatenate the real time system clock with a counter.  
Using the system clock guarantees that values will be unique for different runs of my program, and using the counter guarantees that values will be unique within the same run of my program.
This is appropriate for server-type scenarios where the same process handles lots of passwords.  If your program might run many times per second, or have many instances running in parallel, add the process ID too.  If your process is distributed, include the server IP address or MAC.
It's also fine to call whatever version of uuidgen() your system has, OR to use a real cryptographic random number generator.
Note that lot of implementations use really short salts, even though keeping the salt short is completely unnecessary.  Don't do that, because it makes it hard to make sure they're unique.
","3311","<c++><key><salt><password-hash>","0","1","1","2016-04-30 20:21:55","36956216","4","0","5717197","","2016-04-30 14:27:44","2016-04-30 13:04:43",""
"9355361","A required anti-forgery token was not supplied or was invalid","@using (Html.BeginForm(""Create"", ""Posts"", FormMethod.Post, new { id = ""publish"" }))
{
    @Html.AntiForgeryToken(""Posts/Create"")
    <input type=""text"" id=""url"" name=""url"" />
    <input type=""submit"" value=""@Html.Resource(""Publish"")"" />
}

[HttpPost]
[ValidateAntiForgeryToken]
public JsonResult Create(string url)
{
    // stuff that's never reached
}

I can't realize what's making this simple form fail on validating the CSRF token.
How can I debug this?
Update
If I remove the Salt, it works; the strange thing is it used to work with the Salt, and I can't figure out why it doesn't anymore.
","If you want to use a salt you have to pass it to the  ValidateAntiForgeryToken filter too:
[HttpPost]
[ValidateAntiForgeryToken(Salt = ""Posts/Create"")]
public JsonResult Create(string url)
{ 
  ...

","3303","<asp.net-mvc-3><csrf><salt><antiforgerytoken>","3","5","1","2012-07-02 20:21:36","9355557","0","","786489","","2012-07-02 20:21:36","2012-02-20 02:07:31",""
"17839950","Change a hashed password on PHPMyAdmin","I want to change the password of an account through PHPMyAdmin, but the passwords are all encrypted. I get an error when trying to change the password of the account through the applicaiton so I will do it here instead if possible.
Here is the code for the password:
$salt = $this->create_salt_password($username);
                $hash = $salt . $password;
                for ( $i = 0; $i < 100000; $i ++ ) 
                {
                    $hash = hash('sha256', $hash);
                }
                $hash = $salt . $hash;

And: 
define('AUTH_SALT','wcRwGxDzULe?s3J%R^W@9)r}xfXpESul5hC,z^ze.oz*1E|ys,Bk,:Q/z_I&M9..');

I am trying to use sha1-online.com to first of all re-create the hash which is stored on the database at the moment.
The password is stored as:
6b68f3c4d174fa0a8163db9fc9abdd81a75f9186a95c686039acaa4ac1d99f75dd0f838e6eb30412121e228bc4008d446d4ad24b3748beed7a28de3d78999122
and as a string is just password123
salt method:
public function create_salt_password($username)
        {
        /** Creates a hash value for the password using 
            a prefixed random unique identifier value with a static characters and the username
        */
            $salt = hash('sha256', uniqid(mt_rand(), true) .AUTH_SALT .strtolower($username));
            return $salt;
        }

","The following will probably (if we're not missing any code) help you recreate a working pass:
$username = 'sweetest_viv';
$password = 'password123';
$staticsalt = 'wcRwGxDzULe?s3J%R^W@9)r}xfXpESul5hC,z^ze.oz*1E|ys,Bk,:Q/z_I&M9..';

$salt = hash('sha256', uniqid(mt_rand(), true) .$staticsalt.strtolower($username));

$hash = $salt . $password;
for ( $i = 0; $i < 100000; $i ++ ) 
{
$hash = hash('sha256', $hash);
}
$hash = $salt . $hash;

echo 'Salt: ' . PHP_EOL . $salt;
echo PHP_EOL.PHP_EOL;
echo 'Hash: ' . PHP_EOL . $hash ;

Try storing the hash from http://codepad.org/rBfS6wEJ.
","3301","<php><hash><phpmyadmin><salt>","0","0","1","2013-07-24 17:11:11","17840276","12","","1828314","","2013-07-24 16:47:23","2013-07-24 16:39:12",""
"25942092","Unique Salt per User using Flask-Security","After reading here a bit about salting passwords, it seems that it's best to use a unique salt for each user. I'm working on implementing Flask-Security atm, and from the documentation it appears you can only set a global salt: ie SECURITY_PASSWORD_SALT = 'thesalt'
Question: How would one go about making a unique salt for each password? 
Thanks!
edit: from the docs on Flask-Security, I found this, which seems to again suggest that this module only uses a single salt for all passwords out of the box. 
flask_security.utils.get_hmac(password)
    Returns a Base64 encoded HMAC+SHA512 of the password signed with the salt 
    specified by SECURITY_PASSWORD_SALT.

","Turns out that if you use bcrypt, it takes care of the salting and stores it with the hash. So I'll go that route!
Thanks to this topic which lead me to this discovery:
Do I need to store the salt with bcrypt?
","3295","<python><encryption><flask><salt><flask-security>","7","7","2","2014-12-22 10:08:27","27596919","3","1","2917993","","2014-09-19 21:53:10","2014-09-19 20:41:38",""
"25942092","Unique Salt per User using Flask-Security","After reading here a bit about salting passwords, it seems that it's best to use a unique salt for each user. I'm working on implementing Flask-Security atm, and from the documentation it appears you can only set a global salt: ie SECURITY_PASSWORD_SALT = 'thesalt'
Question: How would one go about making a unique salt for each password? 
Thanks!
edit: from the docs on Flask-Security, I found this, which seems to again suggest that this module only uses a single salt for all passwords out of the box. 
flask_security.utils.get_hmac(password)
    Returns a Base64 encoded HMAC+SHA512 of the password signed with the salt 
    specified by SECURITY_PASSWORD_SALT.

","Yes, Flask-Security does use per-user salts by design if using bcrypt (and other schemes such as des_crypt, pbkdf2_sha256,   pbkdf2_sha512, sha256_crypt, sha512_crypt).
The config for 'SECURITY_PASSWORD_SALT' is only used for HMAC encryption.  If you are using bcrypt as the hashing algorithm Flask-Security uses passlib for hashing and it generates a random salt during hashing.  This confustion is noted in issue 268: https://github.com/mattupstate/flask-security/issues/268
It can be verified in the code, walking from encrypt to passlib:
flask_security/utils.py (lines 143-151, 39, and 269)
def encrypt_password(password):
   ...
   return _pwd_context.encrypt(signed)

_pwd_context = LocalProxy(lambda: _security.pwd_context)

flask_security/core.py (269, 244-251, and 18)
pwd_context=_get_pwd_context(app)

def _get_pwd_context(app):
    ...
    return CryptContext(schemes=schemes, default=pw_hash, deprecated=deprecated)

from passlib.context import CryptContext

and finally from: https://pythonhosted.org/passlib/password_hash_api.html#passlib.ifc.PasswordHash.encrypt

note that each call to encrypt() generates a new salt,

","3295","<python><encryption><flask><salt><flask-security>","7","15","2","2014-12-22 10:08:27","27596919","3","1","2917993","","2014-09-19 21:53:10","2014-09-19 20:41:38",""
"21318526","How to get salt from a password and use it to validate user?","I have read tons of questions and tutorials about encrypting a password, and while I've learned a lot, nowhere did I find an answer to this.
I want to use crypt() for hashing a password that I will store on Database. I also know I need to use a salt so it works properly, and I've read that the best way to generate a random salt is by using this or something similar.
If I understood correctly the process is this:

User enters a password
Random create a salt
Hash password and salt
Store result in database

But then how do I recover the salt when user tries to login?

User enters his password
I somehow add his own unique randomly generated salt
Hash both of them together
Compare it to hashed salted password stored in Database.

In a few questions I've found, one of the answers was to store the randomly generated salt on the database. But I thought the whole purpose of salting was to be more secure, if an attacker got access to my DB he would see the 'salt' fields and even if my passwords are encrypted he would gain easy access to accounts. 
Other answers said that the 'salt' is prepended to the password when using crypt() so there is no need to store it in a separate field. My question is, how do I get access to it? Is there some function that does this and I'm totally missing?
","You store the salt in your db, along with the hashed password, i.e. hash(salt+password).
If your database gets compromised and someone gets all the hashes and the salts, they cannot run a rainbow table attack against your hashes - they will need to brute force each hash. With a good hashing algorithm, the brute force attack is unfeasible. 
What is a rainbow table attack?
Lets assume a generic hashing algorithm, hash(f).
I, as an attacker, precalculate common passwords (f) and their hashes (hash(f)). Now, when I get your unsalted database of hashes, I just need to look through your database for hashes that match my precalculated table (rainbow table).
For example, if my rainbow table stores that for f = qwerty, hash(f) = someRandomHash, I look through your database for someRandomHash and as soon as I find it, I know that user's password is qwerty.
However, if you salted your passwords, when a user set his password as qwerty, you calculated his hash as hash('saltqwerty), which means, you did not calculate his hash as someRandomHash but instead as someRandomSaltedHash. This renders my rainbow table completely useless.
I am left with no choice but to brute force your table. I know the salt, but I don't know the password, so I have to calculate hash(salt+password) for every possible permutation and combination of password. With a slow enough hashing algorithm, this can take centuries (worst case).
How do you login a user?
User submit his user_id and password. You query the database for the salt for that user. Then you compute hash(salt+password) and compare against the hash stored in your database.
","3285","<php><security><salt><crypt><password-hash>","2","3","3","2014-01-30 09:44:56","21318623","20","1","445517","","2014-01-30 09:44:56","2014-01-23 20:22:41","2014-03-04 01:28:37"
"21318526","How to get salt from a password and use it to validate user?","I have read tons of questions and tutorials about encrypting a password, and while I've learned a lot, nowhere did I find an answer to this.
I want to use crypt() for hashing a password that I will store on Database. I also know I need to use a salt so it works properly, and I've read that the best way to generate a random salt is by using this or something similar.
If I understood correctly the process is this:

User enters a password
Random create a salt
Hash password and salt
Store result in database

But then how do I recover the salt when user tries to login?

User enters his password
I somehow add his own unique randomly generated salt
Hash both of them together
Compare it to hashed salted password stored in Database.

In a few questions I've found, one of the answers was to store the randomly generated salt on the database. But I thought the whole purpose of salting was to be more secure, if an attacker got access to my DB he would see the 'salt' fields and even if my passwords are encrypted he would gain easy access to accounts. 
Other answers said that the 'salt' is prepended to the password when using crypt() so there is no need to store it in a separate field. My question is, how do I get access to it? Is there some function that does this and I'm totally missing?
","You can safely store a hashed password and a salt in the same database - the idea is that since the salt is different every time, even the exact same passwords will be stored differently in the database, which virtually eliminates brute-force lookup weaknesses associated with things like md5-encoded passwords.
Out of an obvious mass confusion, if you're able to use PHP v5.5.0 or higher, password storage has become remarkably easier with the use of password_hash and password_verify.
As an additional benefit, these functions don't require you to have separate password and salt fields in your database - you can simply store the returned password_hash value and use password_verify with the clear-text password to validate.
","3285","<php><security><salt><crypt><password-hash>","2","3","3","2014-01-30 09:44:56","21318623","20","1","445517","","2014-01-30 09:44:56","2014-01-23 20:22:41","2014-03-04 01:28:37"
"21318526","How to get salt from a password and use it to validate user?","I have read tons of questions and tutorials about encrypting a password, and while I've learned a lot, nowhere did I find an answer to this.
I want to use crypt() for hashing a password that I will store on Database. I also know I need to use a salt so it works properly, and I've read that the best way to generate a random salt is by using this or something similar.
If I understood correctly the process is this:

User enters a password
Random create a salt
Hash password and salt
Store result in database

But then how do I recover the salt when user tries to login?

User enters his password
I somehow add his own unique randomly generated salt
Hash both of them together
Compare it to hashed salted password stored in Database.

In a few questions I've found, one of the answers was to store the randomly generated salt on the database. But I thought the whole purpose of salting was to be more secure, if an attacker got access to my DB he would see the 'salt' fields and even if my passwords are encrypted he would gain easy access to accounts. 
Other answers said that the 'salt' is prepended to the password when using crypt() so there is no need to store it in a separate field. My question is, how do I get access to it? Is there some function that does this and I'm totally missing?
","I don't know a lot about high level security DB, but how about this?:
hashedPassword = hash(UsurID+GivenPassword)

So, at logon time, youget first the User Login, and his ID, and then the given password to compare with the hashedPassword tha is already in DB.
As I said, I dont know if this will increase security, but at least it makes all passwords differents, doesn't?
Anyway, I'm still learning too.
","3285","<php><security><salt><crypt><password-hash>","2","0","3","2014-01-30 09:44:56","21318623","20","1","445517","","2014-01-30 09:44:56","2014-01-23 20:22:41","2014-03-04 01:28:37"
"6444119","What's the proper way of setting the salt for cookies in Kohana 3?","I could just dive into the Kohana_Cookie class and set
public static $salt = 'blah';

But this doesn't seem like a very elegant solution... is there a propper way to set it in a config or such? Tried Googling around, but no luck...
","It can be done by creating a cookie.php file in application/classes with the following contents:
class Cookie extends Kohana_Cookie
{
    public static $salt = 'foobar';
} // End Cookie

I would advise going with zombor's approach below though.
","3271","<php><cookies><kohana><kohana-3><salt>","3","2","2","2012-08-09 17:34:21","6444295","0","","","","","2011-06-22 17:36:36",""
"6444119","What's the proper way of setting the salt for cookies in Kohana 3?","I could just dive into the Kohana_Cookie class and set
public static $salt = 'blah';

But this doesn't seem like a very elegant solution... is there a propper way to set it in a config or such? Tried Googling around, but no luck...
","Either set it in bootstrap:
Cookie::$salt = 'foobar';

Or extend the cookie class like @davgothic says.
Don't modify code in your system folder. There's never a need to do that.
","3271","<php><cookies><kohana><kohana-3><salt>","3","18","2","2012-08-09 17:34:21","6444295","0","","","","","2011-06-22 17:36:36",""
"5032341","Where is the best place to store the password salt for the website?","I have two salts, each user has a unique salt that is stored with the user info in the database. The second salt is one that is specific to the website. Both are needed to hash the passwords. 
Problem is I don't know where I should keep my website salt. Right now it resides in the PHP method that runs the hashing algorithm. Should I keep it in a file outside the /var/www/ and have PHP open and read the file? I don't want to store it in the database because that would defeat the purpose of having two salts should my database be compromised. 
Any suggestions? 
","Yes, keep it in a PHP config file somewhere, preferably in a folder above the directory that is the web root.
","3261","<php><security><passwords><storage><salt>","6","5","5","2013-06-24 15:41:04","5032555","1","2","338665","","2013-06-24 15:41:04","2011-02-17 17:26:54",""
"5032341","Where is the best place to store the password salt for the website?","I have two salts, each user has a unique salt that is stored with the user info in the database. The second salt is one that is specific to the website. Both are needed to hash the passwords. 
Problem is I don't know where I should keep my website salt. Right now it resides in the PHP method that runs the hashing algorithm. Should I keep it in a file outside the /var/www/ and have PHP open and read the file? I don't want to store it in the database because that would defeat the purpose of having two salts should my database be compromised. 
Any suggestions? 
","Storing the website salt in a file that can never be served is your best option here. There's no point in encrypting the salt, or keeping it with the others as you pointed out. Just make sure the file you store it in cannot be served if requested (outside the root www works) and ensure it has proper permissions set.
","3261","<php><security><passwords><storage><salt>","6","0","5","2013-06-24 15:41:04","5032555","1","2","338665","","2013-06-24 15:41:04","2011-02-17 17:26:54",""
"5032341","Where is the best place to store the password salt for the website?","I have two salts, each user has a unique salt that is stored with the user info in the database. The second salt is one that is specific to the website. Both are needed to hash the passwords. 
Problem is I don't know where I should keep my website salt. Right now it resides in the PHP method that runs the hashing algorithm. Should I keep it in a file outside the /var/www/ and have PHP open and read the file? I don't want to store it in the database because that would defeat the purpose of having two salts should my database be compromised. 
Any suggestions? 
","Just stick it in a variable inside a .php file. For a minor bit of added security-by-obscurity, you can store it in (say) base64-encoded format, and name the variable something completely innocuous, like
$this_is_not_the_salt_you_are_looking_for = base64_decode(.... encoded salt string here ...);

For an extra-extra bit of security, place the .php file somewhere outside the webroot, so that if for some reason the webserver's config goes belly up and starts serving up raw PHP code, the file containing the salt info isn't directly accessible.
","3261","<php><security><passwords><storage><salt>","6","0","5","2013-06-24 15:41:04","5032555","1","2","338665","","2013-06-24 15:41:04","2011-02-17 17:26:54",""
"5032341","Where is the best place to store the password salt for the website?","I have two salts, each user has a unique salt that is stored with the user info in the database. The second salt is one that is specific to the website. Both are needed to hash the passwords. 
Problem is I don't know where I should keep my website salt. Right now it resides in the PHP method that runs the hashing algorithm. Should I keep it in a file outside the /var/www/ and have PHP open and read the file? I don't want to store it in the database because that would defeat the purpose of having two salts should my database be compromised. 
Any suggestions? 
","One option not mentioned yet?  An environmental variable served by the server.  You can do it in httpd.conf, or in a .htaccess.  Since Apache doesn't serve .htaccess files, you don't need to worry about hiding it as much...
SetEnv WEBSITE_SALT 232lhsdfjaweufha32i4fv4239tauvkjn

That way, all you need to do in your application is $salt = getenv('WEBSITE_SALT');.  The benefit here is that it's transparent to the application...
","3261","<php><security><passwords><storage><salt>","6","11","5","2013-06-24 15:41:04","5032555","1","2","338665","","2013-06-24 15:41:04","2011-02-17 17:26:54",""
"5032341","Where is the best place to store the password salt for the website?","I have two salts, each user has a unique salt that is stored with the user info in the database. The second salt is one that is specific to the website. Both are needed to hash the passwords. 
Problem is I don't know where I should keep my website salt. Right now it resides in the PHP method that runs the hashing algorithm. Should I keep it in a file outside the /var/www/ and have PHP open and read the file? I don't want to store it in the database because that would defeat the purpose of having two salts should my database be compromised. 
Any suggestions? 
","Most people will store a constant salt in a configuration file. This is fine, but the whole point of using a SALT is to ensure your data is not readable by an outside source.
I've seen a lot of people actually store the salt in database in the accounts field. Here's the twist though. It was uniquely generated upon account creation so every user has a unique salt.
It's not about the salt though--it's about how you're encrypting the data.
sha1($password.md5(md5($password.md5($salt))))

Even with the salt you would likely never be able to crack this. So never worry about storing it in your database if you decide to go unique per account. Just ensure that your encryption process is strong! 
","3261","<php><security><passwords><storage><salt>","6","-3","5","2013-06-24 15:41:04","5032555","1","2","338665","","2013-06-24 15:41:04","2011-02-17 17:26:54",""
"16736119","bcrypt and randomly generated salts","So I was experimenting with bcrypt. I have a class(shown below, which I got from http://www.firedartstudios.com/articles/read/php-security-how-to-safely-store-your-passwords) in which there are 3 functions. 1st one is to generate a random Salt, the 2nd to generate a hash using the 1st generated Salt and the last one is to verify the supplied password by comparing it with the hashed password.
<?php
/* Bcrypt Example */
class bcrypt {
    private $rounds;
    public function __construct($rounds = 12) {
        if(CRYPT_BLOWFISH != 1) {
            throw new Exception(""Bcrypt is not supported on this server, please see the following to learn more: http://php.net/crypt"");
        }
        $this->rounds = $rounds;
    }

    /* Gen Salt */
    public function genSalt() {
        /* openssl_random_pseudo_bytes(16) Fallback */
        $seed = '';
        for($i = 0; $i < 16; $i++) {
            $seed .= chr(mt_rand(0, 255));
        }
        /* GenSalt */
        $salt = substr(strtr(base64_encode($seed), '+', '.'), 0, 22);
        /* Return */
        return $salt;
    }

    /* Gen Hash */
    public function genHash($password) {
        /* Explain '$2y$' . $this->rounds . '$' */
            /* 2a selects bcrypt algorithm */
            /* $this->rounds is the workload factor */
        /* GenHash */
        $hash = crypt($password, '$2y$' . $this->rounds . '$' . $this->genSalt());
        /* Return */
        return $hash;
    }

    /* Verify Password */
    public function verify($password, $existingHash) {
        /* Hash new password with old hash */
        $hash = crypt($password, $existingHash);

        /* Do Hashs match? */
        if($hash === $existingHash) {
            return true;
        } else {
            return false;
        }
    }
}
/* Next the Usage */
/* Start Instance */
$bcrypt = new bcrypt(12);

/* Two create a Hash you do */
echo 'Bcrypt Password: ' . $bcrypt->genHash('password');

/* Two verify a hash you do */
$HashFromDB = $bcrypt->genHash('password'); /* This is an example you would draw the hash from your db */
echo 'Verify Password: ' . $bcrypt->verify('password', $HashFromDB);
?>

Now if I generate a hash with 'password' for example, I get a hashed password, which took the randmonly generated Salt. Next if I enter 'password' again and use the verify function ,I get true meaning that the passwords match. If I enter wrong password, I get false. My question is how is this possible? What about the randomly generated Salt? How come that is not having any effect?
","Have a good look at the values you're dealing with. The random salt generated will be, say:
abcdefg...

What is fed into crypt looks like this:
crypt($password, '$2y$10$abcdefg...')
                   |  |    |
                   |  |    +- the salt
                   |  +- the cost parameter
                   +- the algorithm type

The result looks like:
$2y$10$abcdefg...123456789...
 |  |    |        |
 |  |    |        +- the password hash
 |  |    +- the salt
 |  +- the cost parameter
 +- the algorithm type

In other words, the first part of the resulting hash is the same as the original input into the crypt function; it contains the algorithm type and parameters, the random salt and the hash result.
Input:  $password + $2y$10$abcdefg...
Output:             $2y$10$abcdefg...123456789...
                    ^^^^^^^^^^^^^^^^^
                   first part identical

When you confirm a password, you need the same, original salt again. Only with the same salt will the same password hash to the same hash. And it's still there in the hash, in a format that can be passed to crypt as is to repeat the same operation as when the hash was generated. That's why you need to feed both the password and hash into the validation function:
crypt($passwordToCheck, '$2y$10$abcdefg...123456789...')

crypt takes the first defined number of characters, up to and including abcdefg... and throws the rest away (that's why the salt needs to be a fixed number of characters). Therefore it equals the same operation as before:
crypt($passwordToCheck, '$2y$10$abcdefg...')

And will generate the same hash, if and only if $passwordToCheck is the same.
","3248","<php><salt><bcrypt><password-encryption>","5","14","1","2013-05-24 13:47:44","16736254","1","2","","","","2013-05-24 13:26:46",""
"5328642","ASP.NET password hashing and password salt","I'm creating a custom ""add user"" page in ASP.Net web forms and have hit a problem. I can insert all the data into the membership table but the passwords are stored in plain text and the password salt has been hardcoded.
How do i go about hashing the passwords so that users can log in (as the membership framework checks for a password hash and not a clear text password). Also, is the salt completely random or is it linked to the password hash somehow? 
Any help would be greatly appreciated,
Marc
","<membership defaultProvider=""SqlProvider"" userIsOnlineTimeWindow=""15"">
      <providers>
        <clear />
        <add 
          name=""SqlProvider"" 
          type=""System.Web.Security.SqlMembershipProvider"" 
          connectionStringName=""MySqlConnection""
          applicationName=""MyApplication""
          enablePasswordRetrieval=""false""
          enablePasswordReset=""true""
          requiresQuestionAndAnswer=""true""
          requiresUniqueEmail=""true""
          passwordFormat=""Hashed"" />
      </providers>
    </membership>

See the line where passwordFormat=""Hashed"" is mentioned. You need to work out this setting to have the password hashed. PasswordFormat has three values. You chose which one you want and configure your application accordingly.
","3215","<asp.net><webforms><asp.net-membership><hash><salt>","0","1","1","2011-03-16 19:26:53","5328747","0","2","149264","","2011-03-16 19:26:53","2011-03-16 16:43:58",""
"3787346","Email address as password salt?","Is it a bad idea to use an email address as the salt for a password?
","To increase security, it would be better to use a random salt. Email addresses can be found out quite easily, thus reducing the effectiveness of the salt. (Clarified in comments)
","3209","<php><passwords><salt>","9","4","6","2015-01-21 07:07:28","3787414","6","7","63550","","2011-03-08 20:39:28","2010-09-24 13:07:29",""
"3787346","Email address as password salt?","Is it a bad idea to use an email address as the salt for a password?
","EDIT:
Let me refer you to this answer on Security StackExchange which explains a lot of details about password hashing and key derivation.
Bottom line: Use a secure established password hashing scheme that is somehow resource-intensive to protect against brute-force attacks, but limit the number of permitted invocations to prevent denial-of-service (DoS) attacks.
If your language library has a function for it, verify on upgrades that it does what it is supposed to do, especially if it's PHP.
The answer below is left for historical reasons.
You could use the user's login name as a salt which might be less likely to change than an e-mail address (EDIT: 0xA3 correctly pointed out, this is less secure than using the e-mail address because login names tend to be easier to guess, and some are quite commonly used such that rainbow tables may already exist for them, or could be reused for other sites).
Alternatively, have a database column where you save the salt for the password.
But then, you could as well use a random user-specific salt just as well which is harder to guess.
For better security, you could use two salts: A user-specific one and a system-wide one (concat them, then hash the salts with the password).  
By the way, simple concatenation of salt and passwords might be less secure than using HMAC. In PHP 5, there's the hash_hmac() function you can use for this:
$salt = $systemSalt.$userSalt;
hash_hmac('sha1', $password, $salt);

EDIT: Rationale for a system-wide salt: It can and should be stored outside the database (but back it up. You won't be able to authenticate your users if you lose it). If an attacker somehow gets to read your database records, he still cannot effectively crack your password hashes until he knows the system-wide salt.
EDIT (slightly off-topic):
A further note on the security of password hashes: You might also want to read Why do salts make dictionary attacks 'impossible'? on hashing multiple times for additional protection against brute-forcing and rainbow table attacks (though I think that repeated hashing may introduce additional opportunities for denial-of-service attacks unless you limit the number of login attempts per time).
NOTE
Considering the rise of multi-purpose multi-core systems (graphics cards, programmable micro-controllers etc.), it may be worth using algorithms with high computation effort along with salts to counter brute-force cracking, e.g. using multiple hashing like PBKDF2. However, you should limit the number of authentication attempts per time unit to prevent DDoS attacks.
One more thing: Another main rationale for using a ""custom"" hashing built on widely-used standards rather than a widely-used pre-built function was PHP itself which has proven itself to be not trustworthy at all when it comes to implementing security-related stuff, be it the not-so-random random number generators or a crypt() function that does not work at all under certain circumstances, thereby totally bypassing any benefits that a compute- or memory-intensive password hashing function ought to bring.
Due to their deterministic outcomes, simple hash functions are more likely to be tested properly than the outputs of a key derivation function, but your mileage may vary.
","3209","<php><passwords><salt>","9","20","6","2015-01-21 07:07:28","3787414","6","7","63550","","2011-03-08 20:39:28","2010-09-24 13:07:29",""
"3787346","Email address as password salt?","Is it a bad idea to use an email address as the salt for a password?
","I'm not a cryptography expert, however there are 3 things in particular that strike me as possibles issues with this suggestion.

As Mark points out, the email may change, however the salt needs to remain the same for a given password (otherwise you won't be able to check the validity of the password).
The size of email addresses is variable, and I imagine that it is important that the salt be larger than a certain size.
Using an email address makes the salt much more predictable, which is usually a bad thing in cryptography.

I don't know if any of these is an issue or not, however the thing about cryptography is that often nobody knows until someone has devised an exploit (and by then its too late) - so my advice would be to err on the side of caution and not use email addresses as salt.
","3209","<php><passwords><salt>","9","6","6","2015-01-21 07:07:28","3787414","6","7","63550","","2011-03-08 20:39:28","2010-09-24 13:07:29",""
"3787346","Email address as password salt?","Is it a bad idea to use an email address as the salt for a password?
","As others already mentioned, salt should best be random. The purpose of a salt is to prevent rainbow table attacks using pre-computed hash dictionaries.
Assuming an attacker gets to know the hashed passwords and salts from your database, if the salt is ""a74kd%$QaU"" and the password is ""12345"", will he be able to crack it using a rainbow table? No, even if the password is weak, the attacker won't have a pre-computed hash dictionary at hand for your random salt.
If you however use a non-random salt like the user id or email it is somewhat more likely that someone already created a rainbow table for that salt, hoping to find a user with username ""john"" or the email ""john.doe@example.com""1
1WPA security for WLANs uses the SSID of the access point as a salt. Too bad, someone already pre-computed hashes for the most frequent SSID names.
","3209","<php><passwords><salt>","9","1","6","2015-01-21 07:07:28","3787414","6","7","63550","","2011-03-08 20:39:28","2010-09-24 13:07:29",""
"3787346","Email address as password salt?","Is it a bad idea to use an email address as the salt for a password?
","Ophcrack (which is what most attackers would probably use, depending on your encryption function) doesn't contain tables with special characters like '.' or '@' unless you get to the biggest (""extended"") tables. So using an email would probably be better than many other salts.
","3209","<php><passwords><salt>","9","1","6","2015-01-21 07:07:28","3787414","6","7","63550","","2011-03-08 20:39:28","2010-09-24 13:07:29",""
"3787346","Email address as password salt?","Is it a bad idea to use an email address as the salt for a password?
","Like all things security-related, the answer depends on the question, which didn't include information on how secure you want the system to be. The most secure building is one with no windows or doors; it's also the most useless building.
From the highest level: no it's not a bad idea. It's not a great idea either. However, it may be good enough -- or more than good enough -- for your application.
If someone has a rainbow table for a specific email address, are you going to be able to stop them by hashing a password with a random salt? Good hackers take the path of least resistance, which may include getting root access to your system and downloading the salt and user tables. (Are they separately secured?) If so, they have until a password change to match a hash, regardless of the system-enforced consecutively failed login attempt limit or what you chose for salt.
How much more complexity arises from random salt in your application? How determined a hacker are you trying to thwart? What other measures -- maximum consecutive failure lockout, forced password expiration periods, ingress and DoS alerts, firewalls, etc. -- do you have in place? The answer lies somewhere in the convergence between the answers to those questions and maybe others as well.
","3209","<php><passwords><salt>","9","1","6","2015-01-21 07:07:28","3787414","6","7","63550","","2011-03-08 20:39:28","2010-09-24 13:07:29",""
"40993645","Understanding bcrypt salt as used by PHP password_hash","I have some trouble to understand how bcrypt uses the salt. I know what the salt is good for but I do not understand how the salt value is used exactly.
Problem 1: What is the correct salt length?
All sources I found say, that the salt has a length of 22 and that it is stored together with the algorithm, the costs and the actual hash value in the result string.

However, all implementations I found, use a salt with length 32. For example the FOSUserBundle used by Symfony used the following code to creat the salt:
$this->salt = base_convert(sha1(uniqid(mt_rand(), true)), 16, 36)

Since a sha1 hash is 32 chars long, the generated salt also has a length of 32. Is this just a lazy implementation, skipping the code to trim the string to a length of 22 because this is done by bcrypt it self? Or are 32 chars necessary for some reason?
Problem 2: Is a salt length of 22 really correct?
In the following example it seems, that only the first 21 chars of the salt are saved in the result string. Passing these 21 chars as salt to password_hash will result in an error, but padding a 0 will work:
$s = 'password';
$salt        = 'salt5678901234567890123456789012';
$salt_prefix = 'salt567890123456789010'; // first 21 chars of salt + 0

$h1 = password_hash($s, PASSWORD_BCRYPT, array('salt' => $salt));
$h2 = password_hash($s, PASSWORD_BCRYPT, array('salt' => $salt_prefix));

echo $h1 . PHP_EOL;
echo $h2 . PHP_EOL;

//Result
$2y$10$salt56789012345678901uTWNlUnhu5K/xBrtKYTo7oDy8zMr/csu
$2y$10$salt56789012345678901uTWNlUnhu5K/xBrtKYTo7oDy8zMr/csu

So, one needs to pass a salt with at least 22 chars to the algorithm but the 22nd chars seems to be useless. Is that correct? What is the sense of the 22nd char if it is not used at all?  
Problem 3: Why not specify the salt manually?
In the PHP function password_hash using a manual hash is deprecated. Instead one is encouraged to let password_hash automatically, since would be safer.
I understand that using a ""weak"" salt or the same salt for all passwords can lead to risks due to rainbow tables. But why is it safer to use the auto-generated salt in general?
Why is it safer to use the auto-generated salt instead of manual salt, that is generated like this:
$this->salt = base_convert(sha1(uniqid(mt_rand(), true)), 16, 36)

Problem 4: Is there any replacement for password_hash that still allows the usage of a custom salt?
Due to the implementation of project I am working on, I need to control the salt, that is used to generate a password hash. This can be changed in the future, but right know it is necessary to set the salt manually. Since this feature is deprecated in password_hash, I need some alternative to generate the hash. How to do this?
EDIT:
Just a short explanation why I need to control the salt: The password is not only used to login into the web app directly, but also to connect to the app via a REST API. The client requests the salt from the server and uses it (algorithm and costs are known) to hash the password, the user entered on the client side.
The hashed password then send back to the server for authentication. The purpose is to not send the password in plain text. To be able to generate the same hash on the client as on the server, the client needs to know which salt the server used. 
I know that a hashed password does not add any real security, since the communication is already uses HTTPS only. However this the way the clients currently operate: Authentication is granted if the client send back the correct password hash.
I cannot change the server side without breaking thousands of existing clients. The clients can be updated sometime in the future, but this will be a long process. 
Since this is done, I need to follow the old process, which means I need to be able to tell the clients the salt.
However I do not need to generate the salt myself. I am totally fine if PHP knows the most secure way how to do this. But I do need to get/extract the salt someway, to send it to the clients.
If I understood everything correctly, I could just let password_hash do the work and then extract the chars 7-29 from result string. Is this correct?
","
Problem 1: What is the correct salt length?
All sources I found say, that the salt has a length of 22 and that it is stored together with the algorithm, the costs and the actual hash value in the result string.

If all sources say it, there's shouldn't be a reason for you to question that ...
There's no universal salt size, it depends on the algorithm and for bcrypt, it is 22 ... although there's a catch. The necessary size is actually 16 bytes, but that is actually Base64-encoded (*).
When you Base64-encode 16 bytes of data, that will result in a 24-character length ASCII string, with the last 2 characters being irrelevant - that becomes 22 when you trim those 2 irrelevant ones.
Why are they irrelevant? Your question is broad enough already ... read the Wikipedia page for Base64.
* There are actually a few Base64 ""dialects"" and the one used by bcrypt is not quite the same as PHP's base64_encode().

However, all implementations I found, use a salt with length 32. For example the FOSUserBundle used by Symfony used the following code to creat the salt:
$this->salt = base_convert(sha1(uniqid(mt_rand(), true)), 16, 36)
Since a sha1 hash is 32 chars long, the generated salt also has a length of 32. Is this just a lazy implementation, skipping the code to trim the string to a length of 22 because this is done by bcrypt it self? Or are 32 chars necessary for some reason?

That line will result in a 31-character string, not 32, but that's not actually relevant. If you provide a longer string, only the necessary part of it will be used - those last characters will be ignored.
You can test this yourself:
php > var_dump(password_hash('foo', PASSWORD_DEFAULT, ['salt' => str_repeat('a', 22).'b']));
string(60) ""$2y$10$aaaaaaaaaaaaaaaaaaaaaO8Q0BjhyjLkn5wwHyGGWhEnrex6ji3Qm""
php > var_dump(password_hash('foo', PASSWORD_DEFAULT, ['salt' => str_repeat('a', 22).'c']));
string(60) ""$2y$10$aaaaaaaaaaaaaaaaaaaaaO8Q0BjhyjLkn5wwHyGGWhEnrex6ji3Qm""
php > var_dump(password_hash('foo', PASSWORD_DEFAULT, ['salt' => str_repeat('a', 22).'d']));
string(60) ""$2y$10$aaaaaaaaaaaaaaaaaaaaaO8Q0BjhyjLkn5wwHyGGWhEnrex6ji3Qm""

(if the extra characters were used, the resulting hashes would differ)
I'm not familiar with that FOSUserBundle, but yes - it does look like it's just doing something lazy, and incorrect.

Problem 2: Is a salt length of 22 really correct?
In the following example it seems, that only the first 21 chars of the salt are saved in the result string. Passing these 21 chars as salt to password_hash will result in an error, but padding a 0 will work:

$s = 'password';
$salt        = 'salt5678901234567890123456789012';
$salt_prefix = 'salt567890123456789010'; // first 21 chars of salt + 0

$h1 = password_hash($s, PASSWORD_BCRYPT, array('salt' => $salt));
$h2 = password_hash($s, PASSWORD_BCRYPT, array('salt' => $salt_prefix));

echo $h1 . PHP_EOL;
echo $h2 . PHP_EOL;

//Result
$2y$10$salt56789012345678901uTWNlUnhu5K/xBrtKYTo7oDy8zMr/csu
$2y$10$salt56789012345678901uTWNlUnhu5K/xBrtKYTo7oDy8zMr/csu

So, one needs to pass a salt with at least 22 chars to the algorithm but the 22nd chars seems to be useless. Is that correct? What is the sense of the 22nd char if it is not used at all?

It's not really irrelevant ... pad it with e.g. an 'A' and you'll see a different result.  
I can't explain this properly to be honest, but it is again caused by how Base64 works and because in the resulting hash, you actually see something similar to this (pseudo-code):
base64_encode(  base64_decode($salt) . $actualHashInBinary  )

That is, the (supposedly) Base64-encoded salt is first de-coded to raw binary, used to create the actual hash (again in raw binary), the two are concatenated and then that whole thing is Base64-encoded.
Since the input salt is actually the 22 relevant out of a 24-size full length, we actually have an incomplete block at the end, which is completed (filled?) by the beginning of the raw hash ...
It is a different thing to concatenate 2 separate Base64-encoded values, and to concatenate the raw values before Base64-encoding them.

Problem 3: Why not specify the salt manually?
In the PHP function password_hash using a manual hash is deprecated. Instead one is encouraged to let password_hash automatically, since would be saver.
I understand that using a ""weak"" salt or the same salt for all passwords can lead to risks due to rainbow tables. But why is it saver to use the auto-generated salt in general?

Simply put - the salt needs to be cryptographically secure (i.e. unpredictable), and PHP already knows how to do that, while chances are (overwhelmingly) that you don't.  
Unless you have an actual hardware CSPRNG (that PHP isn't already configured to use), the best thing you can do is to leave PHP to automatically generate the salt anyway.
Yet, here we are, you obviously wanting to do the opposite (for whatever reason) and making it less secure in the process - a lot of people do that.
This is why the salt option is deprecated - to protect you from yourself. :)

Why is it saver to use the auto-generated salt instead of manual salt, that is generated like this:
$this->salt = base_convert(sha1(uniqid(mt_rand(), true)), 16, 36)

As I said, the salt needs to be unpredictable. In this specific example - none of the functions used are unpredictable, even mt_rand().
Yes, mt_rand() is not actually random, despite what its name implies.

Problem 4: Is there any replacement for password_hash that still allows the usage of a custom salt?
Due to the implementation of project I am working on, I need to control the salt, that is used to generate a password hash. This can be changed in the future, but right know it is necessary to set the salt manually. Since this feature is deprecated in password_hash, I need some alternative to generate the hash. How to do this?

You don't.
There's absolutely zero reason for your project to dictate how the password_hash() salt is generated. I don't know why you think it is necessary, but it 100% isn't - it would make no sense.
Though, ultimately - this is why deprecations are put in place before something is removed. Now you know the salt option will be removed in the future, and you have plenty of time to refactor your application.
Use it wisely, don't try to replicate deprecated functionality. You should be working in the opposite direction - ask how to separate the two without breaking your application.
","3168","<php><bcrypt><salt><php-password-hash>","6","8","1","2018-05-17 05:21:40","40995551","7","3","777861","","2018-05-17 05:21:40","2016-12-06 10:56:31",""
"17177124","How to use GWT with Apache Shiro hashed and salted","In this small tutorial I show you how to build a GWT Module which is responsible for registration and login.
The password gets hashed with Sha256 and salted.
","Download and Installation
Download for Apache Shiro: http://shiro.apache.org/download.html ;
I have used Shrio-All (1.2.2 Binary Distribution) http://tweedo.com/mirror/apache/shiro/1.2.2/shiro-root-1.2.2-source-release.zip
After the download include shiro-all-1.2.2.jar in your lib folder.

We can also include other .jar files which we will need later on.

MySQL Driver: http://www.java2s.com/Code/Jar/c/Downloadcommysqljdbc515jar.htm (com.mysql.jdbc_5.1.5.jar)
SLF4J Logging: http://www.slf4j.org/download.html (slf4j-api-1.7.5.jar, slf4j-simple-1.7.5.jar)
Apache Commons Beanutils: http://repo2.maven.org/maven2/commons-beanutils/commons-beanutils/1.7.0/ (commons-beanutils-1.7.0.jar)

Don't forget to add your jars to your build path.
web.xml
Add this to your web.xml
<!-- Apache Shero -->
<listener>
  <listener-class>org.apache.shiro.web.env.EnvironmentLoaderListener</listener-class>
</listener>
<filter>
    <filter-name>ShiroFilter</filter-name>
    <filter-class>org.apache.shiro.web.servlet.ShiroFilter</filter-class>
</filter>
<!-- Make sure any request you want accessible to Shiro is filtered. /* catches all -->
<!-- requests. Usually this filter mapping is defined first (before all others) to -->
<!-- ensure that Shiro works in subsequent filters in the filter chain: -->
<filter-mapping>
    <filter-name>ShiroFilter</filter-name>
    <url-pattern>/*</url-pattern>
    <dispatcher>REQUEST</dispatcher>
    <dispatcher>FORWARD</dispatcher>
    <dispatcher>INCLUDE</dispatcher>
    <dispatcher>ERROR</dispatcher>
</filter-mapping> 

shiro.ini
Put your  shiro.ini into WEB-INF:
[main]
authc.loginUrl = /Login.html?gwt.codesvr=127.0.0.1:9997
authc.successUrl  = /Leitfaden.html
logout.redirectUrl = /login.html

# ------------------------
# Database

# Own Realm
jdbcRealm = leitfaden.login.server.MyRealm

# Sha256
sha256Matcher = org.apache.shiro.authc.credential.Sha256CredentialsMatcher
# base64 encoding, not hex in this example:
sha256Matcher.storedCredentialsHexEncoded = false
sha256Matcher.hashIterations = 1024

jdbcRealm.credentialsMatcher = $sha256Matcher

# User Query
# default is ""select password from users where username = ?""
jdbcRealm.authenticationQuery = SELECT password, salt FROM USER WHERE email = ?

# Connection 
ds = com.mysql.jdbc.jdbc2.optional.MysqlDataSource
ds.serverName = localhost
ds.user = root
ds.password = root
ds.databaseName = leitfaden
jdbcRealm.dataSource=$ds

authc.usernameParam = email
authc.passwordParam = password
authc.failureKeyAttribute = shiroLoginFailure

# Use Built-in Chache Manager
builtInCacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager
securityManager.cacheManager = $builtInCacheManager

# -----------------------------------------------------------------------------
[urls]
/yourMainUrl.html = authc

GWT Module
Create a module for login. Module name “Login” and Package name “leitfaden.login”:
Add this to your web.xml
<servlet>
  <servlet-name>LoginService</servlet-name>
  <servlet-class>leitfaden.login.server.LoginServiceImpl</servlet-class>
</servlet>
<servlet-mapping>
  <servlet-name>LoginService</servlet-name>
  <url-pattern>/leitfaden.login.Login/LoginService</url-pattern>
</servlet-mapping> 

LoginService.java
@RemoteServiceRelativePath(""LoginService"")
public interface LoginService extends RemoteService {
    public Boolean isLoggedIn();
    public Boolean tryLogin(String email, String password, Boolean rememberMe);
    public void logout();
    public void registrate(String email, String password);
}

LoginServiceAsync.java
public interface LoginServiceAsync {
    public void isLoggedIn(AsyncCallback<Boolean> callback);
    public void tryLogin(String email, String password, Boolean rememberMe, AsyncCallback<Boolean> callback);
    public void logout(AsyncCallback<Void> callback);
    public void registrate(String email, String password, AsyncCallback<Void> callback);
}

LoginServiceImpl
public class LoginServiceImpl extends RemoteServiceServlet implements LoginService {

    private static final long serialVersionUID = -4051026136441981243L;
    private static final transient Logger log = LoggerFactory
            .getLogger(LoginServiceImpl.class);

    private org.apache.shiro.subject.Subject currentUser;

    public LoginServiceImpl() {
        Factory<SecurityManager> factory = new IniSecurityManagerFactory();
        SecurityManager securityManager = factory.getInstance();
        SecurityUtils.setSecurityManager(securityManager);
    }

    @Override
    public Boolean isLoggedIn() {
        currentUser = SecurityUtils.getSubject();

        if (currentUser.isAuthenticated()) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public Boolean tryLogin(String username, String password, Boolean rememberMe) {
        // get the currently executing user:
        currentUser = SecurityUtils.getSubject();

        // let's login the current user so we can check against roles and
        // permissions:
        if (!currentUser.isAuthenticated()) {
             //collect user principals and credentials in a gui specific manner 
            //such as username/password html form, X509 certificate, OpenID, etc.
            //We'll use the username/password example here since it is the most common.
            UsernamePasswordToken token = new UsernamePasswordToken(username,password);
             //this is all you have to do to support 'remember me' (no config - built in!):
            token.setRememberMe(rememberMe);

            try {
                currentUser.login(token);
                log.info(""User ["" + currentUser.getPrincipal().toString() + ""] logged in successfully."");
                return true;
            } catch (UnknownAccountException uae) {
                log.info(""There is no user with username of ""
                        + token.getPrincipal());
            } catch (IncorrectCredentialsException ice) {
                log.info(""Password for account "" + token.getPrincipal()
                        + "" was incorrect!"");
            } catch (LockedAccountException lae) {
                log.info(""The account for username "" + token.getPrincipal()
                        + "" is locked.  ""
                        + ""Please contact your administrator to unlock it."");
            } catch (AuthenticationException ae) {
                log.error(ae.getLocalizedMessage());
            }
        }

        return false;
    }

    @Override
    public void logout() {
        currentUser = SecurityUtils.getSubject();
        currentUser.logout();
    }

    @Override
    public void registrate(String email, String plainTextPassword) {
        RandomNumberGenerator rng = new SecureRandomNumberGenerator();
        Object salt = rng.nextBytes();

        // Now hash the plain-text password with the random salt and multiple
        // iterations and then Base64-encode the value (requires less space than Hex):
        String hashedPasswordBase64 = new Sha256Hash(plainTextPassword, salt,1024).toBase64();

        User user = new User(email, hashedPasswordBase64, salt.toString(), 0);
        this.createUser(user);
    }

    private void createUser(User user) {
        UserDAL.connect();

        UserDAL.beginTransaction();
        new UserDAL().createUser(user);
        log.info(""User with email:"" + user.getEmail() + "" hashedPassword:""+ user.getPassword() + "" salt:"" + user.getSalt());
        UserDAL.commitTransaction();

        UserDAL.disconnect();
    }

}

MyRealm.java
Users can now register at this application. But Shiro does not know how to compare salted passwords with the given user input. For that we need to implement our own Realm. A Realm is essentially a security-specific DAO.
MyRealm.java gets the user with the given email and returns a SaltedAuthenticationInfo. With that SaltedAuthenticationInfo Shiro knows how to compare the user input with the user from the database.
public class MyRealm extends JdbcRealm {
    private static final Logger log = LoggerFactory.getLogger(MyRealm.class);

    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {
        // identify account to log to
        UsernamePasswordToken userPassToken = (UsernamePasswordToken) token;
        final String username = userPassToken.getUsername();

        if (username == null) {
            log.debug(""Username is null."");
            return null;
        }

        // read password hash and salt from db
        final PasswdSalt passwdSalt = getPasswordForUser(username);

        if (passwdSalt == null) {
            log.debug(""No account found for user ["" + username + ""]"");
            return null;
        }

        // return salted credentials
        SaltedAuthenticationInfo info = new MySaltedAuthentificationInfo(username, passwdSalt.password, passwdSalt.salt);

        return info;
    }

    private PasswdSalt getPasswordForUser(String username) {
        User user = getUserByEmail(username);
        if (user == null) {
            return null;
        }
        return new PasswdSalt(user.getPassword(), user.getSalt());
    }

    private User getUserByEmail(String email) {
        UserDAL.connect();
        User user = new UserDAL().getUserByEmail(email);
        UserDAL.disconnect();
        return user;
    }

    class PasswdSalt {
        public String password;
        public String salt;

        public PasswdSalt(String password, String salt) {
            super();
            this.password = password;
            this.salt = salt;
        }
    }

}

MySaltedAuthentificationInfo
Important is that you decode the salt correctly in getCredentialsSalt().I have used Base64.
public class MySaltedAuthentificationInfo implements SaltedAuthenticationInfo {

    private static final long serialVersionUID = -2342452442602696063L;

    private String username;
    private String password;
    private String salt;

    public MySaltedAuthentificationInfo(String username, String password, String salt) {
        this.username = username;
        this.password = password;
        this.salt = salt;
    }

    @Override
    public PrincipalCollection getPrincipals() {
        PrincipalCollection coll = new SimplePrincipalCollection(username, username);
        return coll;
    }

    @Override
    public Object getCredentials() {
        return password;
    }

    @Override
    public ByteSource getCredentialsSalt() {
        return  new SimpleByteSource(Base64.decode(salt)); 
    }

}

Users can now register and login. You would only need to code views in your login module that call the LoginService.
","3165","<mysql><gwt><salt><shiro>","4","6","1","2013-09-16 07:46:36","17177125","5","1","1702958","","2013-09-16 07:46:36","2013-06-18 19:20:43","2013-06-20 13:23:55"
"5064105","Is it possible to attack a user password with known salt","I've been told that email is a bad salt, because it's not unique and connected to the user.
And if a user uses the same password on 2 sites, there will be equal hash. 
So, what's wrong with it? what is attack scenario?
Suppose we have both hash and salt. So, other site has the same hash in their database. 
How can we do any harm to this user on the other site? Can we at all?
I don't see any possibility, but I am not an expert in security, so, I'd like to hear from ones who are, with practical and concrete answers, of course.
I am not going to break anything. I am asking this question in the context of this one: is email or (registration timestamp) a good salt?
Certain and practical answers, please. 
","Can't really help you in terms of security, but if you look at vBulletin for example, each user gets their own generated salt, which they use the encrypt the password like this:
$password = md5(md5($clear_password) + $salt);

So the salt will be different for each user and any site where vBulletin is running (at least a pretty good chance that it will be different), so the stored password, in turn will be different for each site.
It's not what you were asking for, but something to meditate on :)
","3148","<php><security><passwords><salt>","18","0","7","2011-02-21 18:42:39","","2","7","","","","2011-02-21 09:13:58",""
"5064105","Is it possible to attack a user password with known salt","I've been told that email is a bad salt, because it's not unique and connected to the user.
And if a user uses the same password on 2 sites, there will be equal hash. 
So, what's wrong with it? what is attack scenario?
Suppose we have both hash and salt. So, other site has the same hash in their database. 
How can we do any harm to this user on the other site? Can we at all?
I don't see any possibility, but I am not an expert in security, so, I'd like to hear from ones who are, with practical and concrete answers, of course.
I am not going to break anything. I am asking this question in the context of this one: is email or (registration timestamp) a good salt?
Certain and practical answers, please. 
","This is mostly a theoretical question. So, how does ""cracking a hashed value"" work? There are so called ""rainbow tables"", that are just list with common words and theire hash value. For salted hashes an attacker needs such tables also with salted hashes. So in theory with unique salts for every user an attacker needs one table for every salt (=> user). If you have a static salt, he ""just"" needs one table for your db. Its quite expensive to create such tables, so in most cases its not worth to create it just for a single page.
Conclusion: Its (of course) safer, to use unique salts for every user, but on a veeery high level. A static salts is usually ""safe enough"".
","3148","<php><security><passwords><salt>","18","4","7","2011-02-21 18:42:39","","2","7","","","","2011-02-21 09:13:58",""
"5064105","Is it possible to attack a user password with known salt","I've been told that email is a bad salt, because it's not unique and connected to the user.
And if a user uses the same password on 2 sites, there will be equal hash. 
So, what's wrong with it? what is attack scenario?
Suppose we have both hash and salt. So, other site has the same hash in their database. 
How can we do any harm to this user on the other site? Can we at all?
I don't see any possibility, but I am not an expert in security, so, I'd like to hear from ones who are, with practical and concrete answers, of course.
I am not going to break anything. I am asking this question in the context of this one: is email or (registration timestamp) a good salt?
Certain and practical answers, please. 
","The point of a salt is not to be unknown, it is to prevent attackers from amortizing the cost of a brute force or dictionary attack across all users of a site (or even all users of many sites).
Thus, the problem of using a non-random salt like the email address is that it would show an attacker which users are using the same password on several sites, and which would therefore yield access to several accounts at once if cracked via brute force or dictionary attack. For the email address (and everything that is unique per user), this is a rather hypothetical problem since it assumes the attacker has the account data of several sites with considerable overlap in users.
Another problem with using the email address is that users will want to change it - which would be impossible if you use it as salt unless you store it in a separate salt column as well or require people to always change their password together with their email. 
","3148","<php><security><passwords><salt>","18","28","7","2011-02-21 18:42:39","","2","7","","","","2011-02-21 09:13:58",""
"5064105","Is it possible to attack a user password with known salt","I've been told that email is a bad salt, because it's not unique and connected to the user.
And if a user uses the same password on 2 sites, there will be equal hash. 
So, what's wrong with it? what is attack scenario?
Suppose we have both hash and salt. So, other site has the same hash in their database. 
How can we do any harm to this user on the other site? Can we at all?
I don't see any possibility, but I am not an expert in security, so, I'd like to hear from ones who are, with practical and concrete answers, of course.
I am not going to break anything. I am asking this question in the context of this one: is email or (registration timestamp) a good salt?
Certain and practical answers, please. 
","The first attack I can think of is:

a user has the same salt and password at two sites
both sites have a flaw to allow reading the salted passwords
one site makes reading a password or brute-force guessing a password easy

An attacker could quickly look at identical salted passwords on both sites and find users with identical passwords at both sites. Then read the password or guess the password on the weaker site, and use it on the more secure site.
Granted, different salts wouldn't make the problem significantly better because all million passwords can be tried eventually. But knowing which users have identical passwords would be much 'quieter' than just blindly trying all the users' passwords on the stronger site.
","3148","<php><security><passwords><salt>","18","3","7","2011-02-21 18:42:39","","2","7","","","","2011-02-21 09:13:58",""
"5064105","Is it possible to attack a user password with known salt","I've been told that email is a bad salt, because it's not unique and connected to the user.
And if a user uses the same password on 2 sites, there will be equal hash. 
So, what's wrong with it? what is attack scenario?
Suppose we have both hash and salt. So, other site has the same hash in their database. 
How can we do any harm to this user on the other site? Can we at all?
I don't see any possibility, but I am not an expert in security, so, I'd like to hear from ones who are, with practical and concrete answers, of course.
I am not going to break anything. I am asking this question in the context of this one: is email or (registration timestamp) a good salt?
Certain and practical answers, please. 
","If the salt is already known, then you have bigger problems on your hands.
http://en.wikipedia.org/wiki/Rainbow_attack
","3148","<php><security><passwords><salt>","18","-3","7","2011-02-21 18:42:39","","2","7","","","","2011-02-21 09:13:58",""
"5064105","Is it possible to attack a user password with known salt","I've been told that email is a bad salt, because it's not unique and connected to the user.
And if a user uses the same password on 2 sites, there will be equal hash. 
So, what's wrong with it? what is attack scenario?
Suppose we have both hash and salt. So, other site has the same hash in their database. 
How can we do any harm to this user on the other site? Can we at all?
I don't see any possibility, but I am not an expert in security, so, I'd like to hear from ones who are, with practical and concrete answers, of course.
I am not going to break anything. I am asking this question in the context of this one: is email or (registration timestamp) a good salt?
Certain and practical answers, please. 
","Think of the web sites you've programmed - I bet the most powerful users in these systems have very common usernames like admin, root, etc. As an attacker I can generate a precomputed hash list containing the most common usernames with the weakest and most common passwords - that is, if a web programmer is naive enough to salt their passwords with usernames, my job as an attacker has become much, much easier - the collisions are very predictable. 
Using an email address as a salt is better, but the same principle applies. Assuming I've cracked one database that uses an email-based salt I'll have a much easier time cracking every other database that does the same - at least, for email/password combinations that exist across databases. (Given the amount of login reuse, that's a very likely). It's not as simple as with the username salts, but the collisions are out there, waiting to be discovered. 
As a programmer what I really want is a password hash that won't collide - ever. A universally unique hash for each user that can't be found in any other database in the world. That's a tall order, but it's doable with a sufficiently long, randomly generated salt.  
There's a herd immunity effect in play - using a bad salt makes it easier for attackers to attack similar systems after they've compromised your database. A strong salt will always protect your users and help other userbases from being compromised. 
","3148","<php><security><passwords><salt>","18","1","7","2011-02-21 18:42:39","","2","7","","","","2011-02-21 09:13:58",""
"5064105","Is it possible to attack a user password with known salt","I've been told that email is a bad salt, because it's not unique and connected to the user.
And if a user uses the same password on 2 sites, there will be equal hash. 
So, what's wrong with it? what is attack scenario?
Suppose we have both hash and salt. So, other site has the same hash in their database. 
How can we do any harm to this user on the other site? Can we at all?
I don't see any possibility, but I am not an expert in security, so, I'd like to hear from ones who are, with practical and concrete answers, of course.
I am not going to break anything. I am asking this question in the context of this one: is email or (registration timestamp) a good salt?
Certain and practical answers, please. 
","Assume the hacker has both password and salt, AND access to your hashing formula.
This will NOT prevent a dictionary attack, contrary to popular beleif.  It will stop a simple dictionary attack, but iterating the dictionary with the salts per user account is perfectly possible.
See: Why do salts make dictionary attacks 'impossible'? for more related information.
This is why when you generate the hash of the password, instead of hashing once with salt, IE:
hashedPW = sha1(rawPassword + salt)

You would do:
hashedPW = sha1(rawPassword + salt)
for i = 0; i < 2000; i++){
    hashedPW = sha1(hashedPW + salt)
}

The multi hash function should take a significant fraction of a second to calculate.  This means when the hacker gains access to the database, the dictionary attack then becomes exponentially more time consuming only allowing him to crack a very small % of user accounts.
","3148","<php><security><passwords><salt>","18","0","7","2011-02-21 18:42:39","","2","7","","","","2011-02-21 09:13:58",""
"14825477","basic php pbkdf2 hashing","I am relatively new to php, and just beginning to grasp the point of salt when it comes to hashing passwords (I think?). Anyways, here's my problem...
Right now I have a mysql database with a username, password, salt field. The password field length is 64 chars, the salt field is 3 chars. Upon registry, each username is assigned a random salt. I am not having any issues with this (I believe). First, the user's desired password is hashed via:
$hashedinput = hash ('sha256', $input);

The user's desired password is then hashed with the salt included with pbkdf2 by the following procedure, and entered in the database:
$password = pbkdf2('sha256', $hashedinput, $salt, 10000, 64);

My problem is the log in. When comparing the hashed password in the database to the password the user inputs, it always comes back !=. Here is what I do to validate login:
$userData = mysql_fetch_array($search, MYSQL_ASSOC);
$inputhash = hash('sha256', $input); // From Form
$salt = $userData['salt']; // Salt from DB
$password = pbkdf2('sha256', $inputhash, $salt, 10000, 64);
$knownpassword = $userData['password']; // Known password from DB

So, to troubleshoot I echo'd all the outputs and this is what it looks like when I enter the CORRECT password (and it doesn't log me in):
Input password: 3d8bc905668c1a1cca5b53a78941d3ca4673e12df6ac5e98e19fa47b153406f6e66913e43bf60478907ca07429b0cf90c808ce2097e0544cc44d298bfb7b85ad
DB password: 3d8bc905668c1a1cca5b53a78941d3ca4673e12df6ac5e98e19fa47b153406f6
Note that the input password has the first 64 characters correct, but it continues to go on for 128 chars total. The DB password is just 64.
Thanks ahead of time!
","Thomas Ptacek wrote a great article a while back explaining - in some detail - what salt is, why it's useful, and gave the #1 rule you need to memorize regarding password hashing systems:

Use someone else’s password system. Don’t build your own.

If you are going to be using PHP 5.5 in your application, use the new password_hash API; if you're not, make sure you're using at least PHP 5.3 and use the password_hash userland compatability library. They are designed to take all the pain out of this for you.
","3142","<php><hash><salt><pbkdf2>","1","1","1","2013-02-12 04:44:19","14825516","0","1","","","","2013-02-12 04:39:49",""
"7004271","Can you hack a hashed password when the salt is stored next to the hash?","Ok, so I've been reading (a lot!) about security and the whole deal about hashing, salting, encrypting, etc. and something I keep seeing is really bugging me.  It seems a lot of people that really seem to know their stuff keeps saying it's OK to store the salt with the hashed password in the DB.
I can't help but to wonder, why?  What if your DB is dumped?  They have access to everything which, to me, means they can look at any one record and voila(!) there's the hashed password and the plain text salt right next to it.  That gives them the info they need to run it against rainbow tables and/or dictionary attacks doesn't it?
I must be missing something (yeah, that's never happened before!!) and would really enjoy some enlightenment on the matter.
","Rainbow tables are ineffective against a collection of differently-salted passwords, even if the salt is known; you would have to build a different table for each salt, and that defeats the entire purpose of rainbow tables.  It will be faster for an attacker to brute-force each password individually.  This is the purpose of having per-user salt.
In other words, rainbow tables are only effective when you are trying to break many passwords that were all digested the same way, using the same digest algorithm.  Throwing in different salt for each password means that the passwords are not all digested the same way.
","3097","<passwords><hash><salt>","8","13","1","2016-03-10 14:25:55","7004294","0","3","329700","","2011-10-09 19:53:52","2011-08-09 23:30:25",""
"8553557","How to salt and hash a password","The code below allows a user to enter user name and password to log in to enter marks of students. SQL data reader verifies the user credentials from the database before authentication takes place. I would be grateful if someone could modify the code by salting and hashing the password.
Dim frm As New MarksEntryFrm
    Dim flag As Boolean
    flag = False
    If cboForm.Text = """" Or cboAcadYear.Text = """" Or cboSubjCode.Text = """" Or txtUserName.Text = """" Or txtPassword.Text = """" Then
        MessageBox.Show(""Please any of the fields cannot be left blank"", ""Blank fields"", MessageBoxButtons.OK, MessageBoxIcon.Error)
    Else
        cmd = New SqlCommand(""Select a.Form,a.AcademicYear,b.SubjectID,b.UserID,b.Password,c.Term from StudentDetails.Programmes a, StudentDetails.Subjects b,RegistrationDetails.Registration c where b.SubjectID='"" & cboSubjCode.SelectedItem & ""' and b.UserID='"" & txtUserName.Text & ""' and b.Password='"" & txtPassword.Text & ""' collate Latin1_General_CS_AS"", cn)
        cmd.Parameters.AddWithValue(""@UserID"", txtUserName.Text) 'protects the database from SQL Injection
        cmd.Parameters.AddWithValue(""@Password"", txtPassword.Text) 'protects the database from SQL Injection

        dr1 = cmd.ExecuteReader
        ctr = ctr + 1
        If dr1.Read Then
            frm.Show()
            ctr = 0
            Hide()
        ElseIf ctr < 3 Then
            MessageBox.Show(""Incorrect Subject Code,User Name or Password. Please try again."", ""Wrong data entered"", MessageBoxButtons.OK, MessageBoxIcon.Asterisk)
        Else
            MsgBox(""Unathorized access. Aborting..."")
            Close()
        End If
        dr1.Close()
    End If
End Sub

","Use a parametrized query
    Dim cmdText As String = _
                    ""INSERT INTO Customer(UserName, [Password]) VALUES (@UserName,@Password)""
    Dim cmd As SqlCommand = New SqlCommand(cmdText, con)
    With cmd.Parameters
        .Add(New SqlParameter(""@UserName"", txtUserName.Text))
        .Add(New SqlParameter(""@Password"", txtPassword.Text))
    End With

","3074","<vb.net><tsql><security><hash><salt>","1","1","3","2013-08-29 12:22:26","8554951","2","","1031312","","2013-08-29 12:22:26","2011-12-18 17:50:36",""
"8553557","How to salt and hash a password","The code below allows a user to enter user name and password to log in to enter marks of students. SQL data reader verifies the user credentials from the database before authentication takes place. I would be grateful if someone could modify the code by salting and hashing the password.
Dim frm As New MarksEntryFrm
    Dim flag As Boolean
    flag = False
    If cboForm.Text = """" Or cboAcadYear.Text = """" Or cboSubjCode.Text = """" Or txtUserName.Text = """" Or txtPassword.Text = """" Then
        MessageBox.Show(""Please any of the fields cannot be left blank"", ""Blank fields"", MessageBoxButtons.OK, MessageBoxIcon.Error)
    Else
        cmd = New SqlCommand(""Select a.Form,a.AcademicYear,b.SubjectID,b.UserID,b.Password,c.Term from StudentDetails.Programmes a, StudentDetails.Subjects b,RegistrationDetails.Registration c where b.SubjectID='"" & cboSubjCode.SelectedItem & ""' and b.UserID='"" & txtUserName.Text & ""' and b.Password='"" & txtPassword.Text & ""' collate Latin1_General_CS_AS"", cn)
        cmd.Parameters.AddWithValue(""@UserID"", txtUserName.Text) 'protects the database from SQL Injection
        cmd.Parameters.AddWithValue(""@Password"", txtPassword.Text) 'protects the database from SQL Injection

        dr1 = cmd.ExecuteReader
        ctr = ctr + 1
        If dr1.Read Then
            frm.Show()
            ctr = 0
            Hide()
        ElseIf ctr < 3 Then
            MessageBox.Show(""Incorrect Subject Code,User Name or Password. Please try again."", ""Wrong data entered"", MessageBoxButtons.OK, MessageBoxIcon.Asterisk)
        Else
            MsgBox(""Unathorized access. Aborting..."")
            Close()
        End If
        dr1.Close()
    End If
End Sub

","P.S. Akaglo, a better way to check if any fields were left empty is to use the String.IsNullOrEmpty() method. Your method will not detect any null or space characters.
","3074","<vb.net><tsql><security><hash><salt>","1","1","3","2013-08-29 12:22:26","8554951","2","","1031312","","2013-08-29 12:22:26","2011-12-18 17:50:36",""
"8553557","How to salt and hash a password","The code below allows a user to enter user name and password to log in to enter marks of students. SQL data reader verifies the user credentials from the database before authentication takes place. I would be grateful if someone could modify the code by salting and hashing the password.
Dim frm As New MarksEntryFrm
    Dim flag As Boolean
    flag = False
    If cboForm.Text = """" Or cboAcadYear.Text = """" Or cboSubjCode.Text = """" Or txtUserName.Text = """" Or txtPassword.Text = """" Then
        MessageBox.Show(""Please any of the fields cannot be left blank"", ""Blank fields"", MessageBoxButtons.OK, MessageBoxIcon.Error)
    Else
        cmd = New SqlCommand(""Select a.Form,a.AcademicYear,b.SubjectID,b.UserID,b.Password,c.Term from StudentDetails.Programmes a, StudentDetails.Subjects b,RegistrationDetails.Registration c where b.SubjectID='"" & cboSubjCode.SelectedItem & ""' and b.UserID='"" & txtUserName.Text & ""' and b.Password='"" & txtPassword.Text & ""' collate Latin1_General_CS_AS"", cn)
        cmd.Parameters.AddWithValue(""@UserID"", txtUserName.Text) 'protects the database from SQL Injection
        cmd.Parameters.AddWithValue(""@Password"", txtPassword.Text) 'protects the database from SQL Injection

        dr1 = cmd.ExecuteReader
        ctr = ctr + 1
        If dr1.Read Then
            frm.Show()
            ctr = 0
            Hide()
        ElseIf ctr < 3 Then
            MessageBox.Show(""Incorrect Subject Code,User Name or Password. Please try again."", ""Wrong data entered"", MessageBoxButtons.OK, MessageBoxIcon.Asterisk)
        Else
            MsgBox(""Unathorized access. Aborting..."")
            Close()
        End If
        dr1.Close()
    End If
End Sub

","In the .NET membership providers you will get hashing and seeding given by the .NET library which should be implemented correctly. This IMHO is much to prefer for rolling your own solution. There is an introduction to membership here
IF you prefer to make your implementation the seeding and hashing part is not overtly complex. The seeding could be as simple as adding a random string to the original password prior to hashing it. You then store the hash and the seed in the database. When the user provides the password you then simply readd the seed and compare the hashes. Note that when you make random strings for cryptographic purposes you should not rely on Random, but rather go for some  cryptographically secure random generator. The System.Security.Cryptography also contains implementations of many suitable hashing algorithms (sha1, sha256 or similar).
Again: In my opinion you should go for a solution using the SqlMembershipProvider to avoid reimplementing security critical stuff.
","3074","<vb.net><tsql><security><hash><salt>","1","0","3","2013-08-29 12:22:26","8554951","2","","1031312","","2013-08-29 12:22:26","2011-12-18 17:50:36",""
"855933","Salts and Passwords - prefix or postfix","This is a question about salting phrases that need to be hashed.
I was wondering if it more secure to prefix the salt to a phrase or postfix it?
salt + phrase or
phrase + salt
My question comes from this comment on this post on MD5s. I am not sure I understand the reasoning behind the author's comment.
","Whether the salt is appended to the front or the back makes no difference. 
The following factors will affect security though

Is your salt private (if so how private is it?). The more private the better. This means that if you can avoid storing your salt in your db you can make your system safe against brute force attacks even if your db is compromised. 
Is your salt random per value salted? This helps defend against rainbow table attacks if say your db is compromised and your salt is stored in the db. Note: if passwords being stored are long enough they can be immune to brute force attacks. 
Is your salt long enough? The longer your salt the more secure you are.

","3027","<security><encryption><passwords><salt>","2","4","5","2019-02-25 13:38:13","855939","4","0","","","","2009-05-13 03:32:01",""
"855933","Salts and Passwords - prefix or postfix","This is a question about salting phrases that need to be hashed.
I was wondering if it more secure to prefix the salt to a phrase or postfix it?
salt + phrase or
phrase + salt
My question comes from this comment on this post on MD5s. I am not sure I understand the reasoning behind the author's comment.
","Technically it doesn't matter, so long as the salt is unique and not easily guessable. Just don't make the mistake of storing the salt, like I did.
The purpose of ""salting"" a string is to scramble it in a way a bit more personal and unique than an MD5 hash will do. There's no right or wrong way to do it, just so long as you're the only one that knows how it works. It will achieve the result either way, which is to make the MD5 hashes generated not correspond with a rainbow table for easy cracking of passwords.
","3027","<security><encryption><passwords><salt>","2","-2","5","2019-02-25 13:38:13","855939","4","0","","","","2009-05-13 03:32:01",""
"855933","Salts and Passwords - prefix or postfix","This is a question about salting phrases that need to be hashed.
I was wondering if it more secure to prefix the salt to a phrase or postfix it?
salt + phrase or
phrase + salt
My question comes from this comment on this post on MD5s. I am not sure I understand the reasoning behind the author's comment.
","It doesn't matter when you digest the salt: prefix, postfix, infix all produce different hashes, but achieve the same purpose of defeating rainbow tables or other pre-hashed dictionary attacks.
I think that the comment has to do specifically with a vulnerability in MD5, not hashing in general. I don't understand the details, but it has to do with finding two prefixes that produce the same hash.
","3027","<security><encryption><passwords><salt>","2","1","5","2019-02-25 13:38:13","855939","4","0","","","","2009-05-13 03:32:01",""
"855933","Salts and Passwords - prefix or postfix","This is a question about salting phrases that need to be hashed.
I was wondering if it more secure to prefix the salt to a phrase or postfix it?
salt + phrase or
phrase + salt
My question comes from this comment on this post on MD5s. I am not sure I understand the reasoning behind the author's comment.
","When someone has a question about the use of salts I fear it is because they are busy (re)inventing things they really shouldn't be in the first place.  Based on the question my recommendation is to use an HMAC.
","3027","<security><encryption><passwords><salt>","2","1","5","2019-02-25 13:38:13","855939","4","0","","","","2009-05-13 03:32:01",""
"855933","Salts and Passwords - prefix or postfix","This is a question about salting phrases that need to be hashed.
I was wondering if it more secure to prefix the salt to a phrase or postfix it?
salt + phrase or
phrase + salt
My question comes from this comment on this post on MD5s. I am not sure I understand the reasoning behind the author's comment.
","unlike what others said, it does matter! and as @einstein if you care use HMAC.
why prefix is bad, because one can calculate the intermediate state of the checksum up to the given fixed salt prefix. then start calculating the rest in parallel. In summary phrase+salt is more secure than salt+phrase, but HMAC(salt, phrase) is even better.
related reading
","3027","<security><encryption><passwords><salt>","2","0","5","2019-02-25 13:38:13","855939","4","0","","","","2009-05-13 03:32:01",""
"10346429","Retrieving salt+hash from DB for validation","So I'm in the process of learning PHP and am working on a login page. I already figured out how to register a new user using a SHA256 to hash $salt+$password. I know there are slower encryption methods like bcrypt but for learning purposes I'm just using SHA256. My question is, after using this to encrypt:
function HashPassword($password) {
  $salt = bin2hex(mcrypt_create_iv(32, MCRYPT_DEV_URANDOM)); 
  $hash = hash(""sha256"", $salt . $password); column
  $final = $salt . $hash;
  return $final;
}

using prepared statements, what is the best way to retrieve the hash password from the database so I can validate it using a function like this?
function ValidatePassword($password, $hash_pass) {

  $salt = substr($hash_pass, 0, 64); 
  $trueHash = substr($hash_pass, 64, 64); 
  $reHash = hash(""sha256"" , $salt . $password); 

  return $reHash == $trueHash;
}

","The principle is that you cant retrieve the password; instead, you use the same HashPassword function to calculate a hash of the password attempt and then query the database for matching records.

EDIT
Looking again at your HashPassword function, I realise that you don't want to generate the random salt therein, but rather take $salt as an argument; you will either pass in the value from your existing database record, or pass in a randomly generated one, as appropriate.
","3024","<php><mysql><hash><salt>","0","5","2","2012-04-27 07:37:57","10346586","0","0","1169798","","2012-04-27 07:27:06","2012-04-27 07:22:36",""
"10346429","Retrieving salt+hash from DB for validation","So I'm in the process of learning PHP and am working on a login page. I already figured out how to register a new user using a SHA256 to hash $salt+$password. I know there are slower encryption methods like bcrypt but for learning purposes I'm just using SHA256. My question is, after using this to encrypt:
function HashPassword($password) {
  $salt = bin2hex(mcrypt_create_iv(32, MCRYPT_DEV_URANDOM)); 
  $hash = hash(""sha256"", $salt . $password); column
  $final = $salt . $hash;
  return $final;
}

using prepared statements, what is the best way to retrieve the hash password from the database so I can validate it using a function like this?
function ValidatePassword($password, $hash_pass) {

  $salt = substr($hash_pass, 0, 64); 
  $trueHash = substr($hash_pass, 64, 64); 
  $reHash = hash(""sha256"" , $salt . $password); 

  return $reHash == $trueHash;
}

","You basically save the password hashed with a salt to make it not recognizable.
In case your database gets hacked at some point, the hacker can't read the password directly. Instead he will have to recreate the hashed value.
If you don't use a different (random) salt for each user, the hacker will only have to create one table with all possible hash values and compare that to your saved hashed passwords.
If each password, however, has a different salt added to the password, before hashing, the hacker has to create a new table for each single password, thus increasing the effort needed to get the real passwords a lot. One hopes that this will make in inefficient or too costly for the hacker.
For you as a coder that wants to validate login credentials you have to follow the following pattern:

Get the salt saved in the database. 
Compute the has value of the concatenated hash = salt + password 
Compare the computed has with the saved one hash === savedHash 
If they are the same, it was the valid password. If not, it was a wrong password.

","3024","<php><mysql><hash><salt>","0","1","2","2012-04-27 07:37:57","10346586","0","0","1169798","","2012-04-27 07:27:06","2012-04-27 07:22:36",""
"22152178","Correct way to store and retrieve SHA-256 hashed and salted passwords","This is my first attempt in securely storing passwords and I would like to make sure that everything is done correctly. I was advised to use SHA-256 hashing alongside salt.
Assuming user submitted their password thorough form, we get the password via
$password = $_POST[""password""];

What is correct way to salt $password and use SHA-256 hashing on it, so it can than be stored in a password field ""password CHAR(64)"" in a database?
Once done and stored how would I than compare value stored in a database to one user entered in a login form? Lets assume $loginPassword = $_POST[""loginPassword""]; is what user entered.
","Instead of using SHA family methods, you can use the crypt() function to salt it for you.
Here is an example script (save and login) using PDO.
Save password in DB
<?php
// Set the password
$password = 'mypassword';

// Get the hash, letting the salt be automatically generated
$hash = crypt($password);

echo $hash; // for testing purposes only

$mysql_username = 'username'; // for DB
$mysql_password = 'password'; // for DB

$dbh = new PDO('mysql:host=localhost;dbname=database_name', $mysql_username, $mysql_password);

$stmt = $dbh->prepare(""INSERT INTO table_name (name,pass) VALUES (:name,:pass)"");
$stmt->bindParam(':name', $name);
$stmt->bindParam(':pass', $pass);

// insert rows
// $name = $_POST['name'];
// $name = $_POST['pass'];

$name = ""username"";
$pass = $hash;
$stmt->execute();

Login script
<?php
$mysql_username = 'username'; // for DB
$mysql_password = 'password'; // for DB

$dbh = new PDO('mysql:host=localhost;dbname=database_name', $mysql_username, $mysql_password);

/*
$username = $_POST['username'];
$password = $_POST['password'];
*/

$username = ""username"";
$password = ""mypassword"";

$sql = ""SELECT * FROM table_name WHERE name=:username"";
$statement = $dbh->prepare($sql);
$statement->bindValue(':username',$username,PDO::PARAM_STR);

if($statement->execute())
{
    if($statement->rowCount() == 1)
    {
        $row = $statement->fetch(PDO::FETCH_ASSOC);

 if (crypt($password, $row['pass']) === $row['pass'])

        {
            $username = $row['name'];
            $email = $row['email'];

echo ""Stage 1"";

echo ""<hr noshade size=\""1\"">"";

echo ""Hello "" .$username;

            exit;
        }
        else
        {
            // include ""error_login.php"";

echo ""Stage 2 - ERROR"";

        }
    }
    else
    {
       // include ""error_login.php"";

echo ""Stage 3 error"";
    }
}

","3012","<php><security><hash><passwords><salt>","0","2","2","2014-03-04 05:50:55","22152805","6","2","","","","2014-03-03 16:37:44",""
"22152178","Correct way to store and retrieve SHA-256 hashed and salted passwords","This is my first attempt in securely storing passwords and I would like to make sure that everything is done correctly. I was advised to use SHA-256 hashing alongside salt.
Assuming user submitted their password thorough form, we get the password via
$password = $_POST[""password""];

What is correct way to salt $password and use SHA-256 hashing on it, so it can than be stored in a password field ""password CHAR(64)"" in a database?
Once done and stored how would I than compare value stored in a database to one user entered in a login form? Lets assume $loginPassword = $_POST[""loginPassword""]; is what user entered.
","If you're on PHP 5.5 or later, there's the built-in password_hash() and password_verify() with Bcrypt - if you're on PHP 5.3.7 or later, there's the password_compat compatibility library; all this is per the PHP.net Safe Password Hashing FAQ entry.
Essentially, on PHP 5.3.7 and above, replace the old crypt() with password_hash() and password_verify().
See my answer to PHP Secure password generation and storage for some more details on cost choice, but it boils down to the very simple:
<?php
/**
 * In this case, we want to increase the default cost for BCRYPT to 12.
 * Note that we also switched to BCRYPT, which will always be 60 characters.
 */
$options = [
    'cost' => 12,
];
echo password_hash(""rasmuslerdorf"", PASSWORD_BCRYPT, $options).""\n"";
?>

to generate the hash, then you store the output string, and then verify with:
<?php
// See the password_hash() example to see where this came from.
$hash = '$2y$07$BCryptRequires22Chrcte/VlQH0piJtjXl.0t1XkA8pw9dMXTpOq';

if (password_verify('rasmuslerdorf', $hash)) {
    echo 'Password is valid!';
} else {
    echo 'Invalid password.';
}
?>

Both examples come from the PHP.net Password Hashing page.
","3012","<php><security><hash><passwords><salt>","0","2","2","2014-03-04 05:50:55","22152805","6","2","","","","2014-03-03 16:37:44",""
"23156005","how to correctly suspend vagrant vm on Mac OS X to be able to resume it without trubbles?","I'am using vagrant + virtualBox on Mac OS X for some python development with multi vm environment with use of salt
When I end my work I am suspending the machine. with vagrant suspend
But when I try to vagrant resume then it alwyas crashes and I have to go through whole time consuming process of vagrant destroy, vagrant up, and salt.
How to deal with it?
(please do not provide replacment of virtual box with wmware fusion as a solution I must stay open source)

UPDATE
It looks like this when called vagrant resume:
➜  four  vagrant resume
==> default: Waiting for machine to boot. This may take a few minutes...
    default: SSH address: 127.0.0.1:2200
    default: SSH username: vagrant
    default: SSH auth method: private key
    default: Error: Connection refused. Retrying...
    default: Error: Connection refused. Retrying...
    default: Error: Connection refused. Retrying...
    default: Error: Connection refused. Retrying...
    default: Error: Connection refused. Retrying...
The guest machine entered an invalid state while waiting for it
to boot. Valid states are 'restoring, running'. The machine is in the
'aborted' state. Please verify everything is configured
properly and try again.

If the provider you're using has a GUI that comes with it,
it is often helpful to open that and watch the machine, since the
GUI often has more helpful error messages than Vagrant can retrieve.
For example, if you're using VirtualBox, run `vagrant up` while the
VirtualBox GUI is open.


UPDATE:
I strongly recommend using reload instead of resume. 
","Make sure you are using the latest VirtualBox 4.3.10 and Vagrant 1.5.4, install VirtualBox Guest Additions (or upgrade it to the latest available, manually or use vagrant-vbguest etc).
When vagrant commands like reload, suspend, resume doesn't work. Try to use more native VBoxManage commands to control the VM.
For example, if it cannot be resumed (from pause in VirtualBox terminology) or crashes when running vagrant resume, try to get the UUID or VM_NAME and use VBoxManage to resume it OR do a hard reboot.

NOTE: Normally there is NO need to destroy and spin-up a new box from the base box to fix this kind of issue.

To get the VM name or UUID
VBoxManage list runningvms or VBoxManage list vms
To get the state of the VM
VBoxManage showvminfo UUID_OR_NAME | grep -i state
To resume from pause (vagrant suspend)
VBoxManage controlvm UUID_OR_NAME resume

NOTE: if it is in Saved state, use VBoxManage startvm UUID to start it.

If the above doesn't work, shut it down and restart
VBoxManage controlvm UUID_OR_NAME poweroff
and then do a vagrant up
HTH
","2981","<macos><virtualbox><vagrant><osx-mavericks><salt>","3","2","2","2015-04-02 00:38:40","23233626","1","","953553","","2014-04-24 11:46:52","2014-04-18 14:17:56",""
"23156005","how to correctly suspend vagrant vm on Mac OS X to be able to resume it without trubbles?","I'am using vagrant + virtualBox on Mac OS X for some python development with multi vm environment with use of salt
When I end my work I am suspending the machine. with vagrant suspend
But when I try to vagrant resume then it alwyas crashes and I have to go through whole time consuming process of vagrant destroy, vagrant up, and salt.
How to deal with it?
(please do not provide replacment of virtual box with wmware fusion as a solution I must stay open source)

UPDATE
It looks like this when called vagrant resume:
➜  four  vagrant resume
==> default: Waiting for machine to boot. This may take a few minutes...
    default: SSH address: 127.0.0.1:2200
    default: SSH username: vagrant
    default: SSH auth method: private key
    default: Error: Connection refused. Retrying...
    default: Error: Connection refused. Retrying...
    default: Error: Connection refused. Retrying...
    default: Error: Connection refused. Retrying...
    default: Error: Connection refused. Retrying...
The guest machine entered an invalid state while waiting for it
to boot. Valid states are 'restoring, running'. The machine is in the
'aborted' state. Please verify everything is configured
properly and try again.

If the provider you're using has a GUI that comes with it,
it is often helpful to open that and watch the machine, since the
GUI often has more helpful error messages than Vagrant can retrieve.
For example, if you're using VirtualBox, run `vagrant up` while the
VirtualBox GUI is open.


UPDATE:
I strongly recommend using reload instead of resume. 
","In my case, this was happening because Grub was offering a choice of boot modes after the unexpected restart.  You can see this if you set v.gui = true in your Vagrantfile (and re-provision the VM).  
I think the best course of action in the future would be to disable this boot menu, but I was not able to accomplish that successfully.  
What does work for me is the following sequence for sending an Enter key code to the VM (this is what was needed to select the normal boot mode):
VBoxManage list runningvms
VBoxManage controlvm VM_ID_FROM_PREVIOUS_COMMAND keyboardputscancode 1c

If you know you only have one VirtualBox VM running on your machine, you can use the following one-liner (I recommend putting it in a script and adding the script to your path):
VBoxManage controlvm `VBoxManage list runningvms | sed 's/{.*//' | sed 's/""//g'` keyboardputscancode 1c

","2981","<macos><virtualbox><vagrant><osx-mavericks><salt>","3","0","2","2015-04-02 00:38:40","23233626","1","","953553","","2014-04-24 11:46:52","2014-04-18 14:17:56",""
"15003988","PHP storing password with blowfish & salt & pepper","I want to store secure user passwords in a MySQL database with PHP.
How can I make it better?
My Class:
private static $algo = '$2a';
private static $cost = '$10';
private static $pepper = 'eMI8MHpEByw/M4c9o7sN3d';

public static function generateSalt($length) {
    $randomBinaryString = mcrypt_create_iv($length, MCRYPT_DEV_URANDOM);
    $randomEncodedString = str_replace('+', '.', base64_encode($randomBinaryString));
    return substr($randomEncodedString, 0, $length);
}

public static function generateHash($password) {
    if (!defined('CRYPT_BLOWFISH'))
        die('The CRYPT_BLOWFISH algorithm is required (PHP 5.3).');
    $password = hash_hmac('sha256', $password, self::$pepper, false);
    return crypt($password, self::$algo . self::$cost . '$' . self::generateSalt(22));
}

public static function checkPassword($hash, $password) {
    $salt = substr($hash, 0, 29);
    $password = hash_hmac('sha256', $password, self::$pepper, false);
    $new_hash = crypt($password, $salt);
    return ($hash == $new_hash);
}

","Either use this answer's suggestions (for PHP >= 5.5), or the following class. Thanks to martinstoeckli for pointing out the password_hash functions. I read the code over, and the only different thing in password_hash that I can see is error-checking and DEV_URANDOM usage from the OS to generate a more random salt.
class PassHash {
    public static function rand_str($length) {
        $chars = ""0123456789./qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM"";
        //only allowed chars in the blowfish salt.
        $size = strlen($chars);
        $str = """";
        for ($i = 0; $i < $length; $i++)
            $str .= $chars[rand(0, $size - 1)]; // hello zend and C.
        return $str;
    }
    public static function hash($input) {
        return crypt($input, ""$2y$13$"" . self::rand_str(22));
        // 2y is an exploit fix, and an improvement over 2a. Only available in 5.4.0+
    }
    public static function hash_weak($input) {
        return crypt($input, ""$2a$13$"" . self::rand_str(22)); }
        // legacy support, Add exception handling and fall back to <= 5.3.0
    public static function compare($input, $hash) {
        return (crypt($input, $hash) === $hash);
    }
}

It's what I've always used. A suggestion is also PHPass. It's tried and tested.

The only downfall in this script is that I generate random numbers from rand(), and not the source from the OS, but that's easily changed.
Also, there is no real reason to be using SHA256 hashing on top of bcrypt. SHA256 is weak, and can be broken with relatively little effort3.
In addition, hashing passwords is essential practice, but for true security, run all input through at least John the Ripper's wordlist1 to remove the most common passwords and inform a user to use a different password. Wordlists are used far more effectively than any bruteforce due to terribly weak passwords.

And as a final note, do not force your users to use symbols, uppercase and numbers, force them to use a long password2.
Length is everything (no humour intended) when it comes to bruteforcing passwords. Pretty much any preset cracker will be set to not go over 12 characters unless a config is edited. If you ever see a site with a ""maximum length"" on passwords, make sure to never re-use a password there, because they have no security whatsoever4.


1. Arbitrary choice of cracker; pick what you find to work best
2. http://xkcd.com/936/
3. Comparatively (it's several orders of magnitude faster and is technically security through obscurity)
4. I have even seen banks do this. Having a maximum length on their passwords made me switch banks.

","2980","<php><hash><salt><blowfish><crypt>","1","3","1","2013-02-21 18:22:03","15004146","6","2","","","","2013-02-21 13:52:17",""
"48835037","Best practice for storing password in database?","I'm creating new login system for my single page app. This system will require administrator to create account for the users. Once they setup account for the user I will send them an email where they have to enter their Information like Security Question and Password. So I have done some research and looked over our existing system. There is hash function that is used together with salt. I read few articles and there is a lot of debate on hash being vulnerable.  Also I see that in this case hashed password is stored as well as salt. They are in separate columns. Is this good practice to store salt in DB? Also is there better way to store password in database? Here is example of the logic that I found:
<cfset password = trim(FORM.password)>
<cfset salt = randomSalt()> //This is function that generates random salt.
<cfset totPW = password & salt>
<cfset hashedPW = hash(totPW,""SHA-256"")>

I'm currently using Cold Fusion 2016. I'm not sure if there is some better way to encrypt the password in CF. If anyone can provide some useful resource or example please let me know. Thanks. 
","Generally speaking, hashing is still fine these days. The thing that matters here is what hashing algorithm you use (and how many iterations). In case of database leaks, you want to make it as difficult as possible to match inputs (commmon password/dictionary based attack). Salting does help a little bit, so does having an irregular pattern salt or a hidden number of iterations based on the username etc. Having different hashing strategies helps as long as the attacker doesn't know how your hashing is implemented. (Accessing the database server is one thing, accessing your source code another.) It's about causing effort to the attacker.
Now about hashing algorithms: SHA-2 is easier to attack than for example bcrypt due to being targetable by GPUs. The number of iterations on the hash will take the attacker more time for each password. bcrypt isn't supported by hash(), but at least SHA-512 is. hash() supports iterations (see docs). Rule of thumb is having an iteration count that takes at least a second to process on your server hardware.
On a side note: Don't trim the password input, people might intend to use leading/trailing whitespaces.
","2961","<hash><coldfusion><passwords><salt><coldfusion-2016>","0","4","1","2018-02-16 21:46:20","","3","","3023588","","2018-02-16 21:38:53","2018-02-16 21:21:30",""
"4599255","Hashing & Salting - Validating login w/ cookies","So this is basically a reassurance that I'm doing the whole registration/login process right as far as hashing/salting goes.
I have a users table with the fields password, salt, token (obviously there are others but this is the most important). Upon registration it generate a random salt, and a random token, and it puts in the password field this:
hash(""sha256"", $theirpostpassword.$randomgeneratedsalt);

That random generated salt and token are stored in their respective fields in that users row in the table.
So upon login I select the salt ONLY from the users row with the username they specified. I then do a count query of how many rows have their post password concatenated with their specific salt, and then I log them in. Pretty sure I have that part down.
Now I was thinking to validate their login on every page I would have a function ran every page that checks their cookie to see if the format of id-username-token matches the row in the database. Meaning that every login it sets their cookie with those credentials.
Now the only thing I can think of to make it better is change the token every valid login? 
Thanks for the insight guys.
","
checks their cookie to see if the format of id-username-token matches the row in the database

You could but this is rather expensive and you're not addressing the problem of session management - setting a cookie expiry time in the past does not always cause cookies to be deleted. By all means consider this for a remember me type of function (but use an offset path to avoid presenting the cookie every time).
You're not gaining anything over storing the authenticated user name in the session. But do change the session id when you authenticate a user and do use SSL for passing authentication tokens.
","2950","<php><authentication><cookies><hash><salt>","7","1","3","2011-01-04 23:07:47","4599314","5","4","","","","2011-01-04 22:48:18",""
"4599255","Hashing & Salting - Validating login w/ cookies","So this is basically a reassurance that I'm doing the whole registration/login process right as far as hashing/salting goes.
I have a users table with the fields password, salt, token (obviously there are others but this is the most important). Upon registration it generate a random salt, and a random token, and it puts in the password field this:
hash(""sha256"", $theirpostpassword.$randomgeneratedsalt);

That random generated salt and token are stored in their respective fields in that users row in the table.
So upon login I select the salt ONLY from the users row with the username they specified. I then do a count query of how many rows have their post password concatenated with their specific salt, and then I log them in. Pretty sure I have that part down.
Now I was thinking to validate their login on every page I would have a function ran every page that checks their cookie to see if the format of id-username-token matches the row in the database. Meaning that every login it sets their cookie with those credentials.
Now the only thing I can think of to make it better is change the token every valid login? 
Thanks for the insight guys.
","Yes, you should definitely be changing tokens with every login. Otherwise a token stolen once is an account stolen forever. Users expect that logging off secures their session from attack by invalidating their cookies or other data.
Rather than the token being random, you can make it serve as a signature, by generating it from a hash of the user id, session expiry time, and whatever else you want in the cookie, plus a salt (just like the login system). This salt doesn't have to come from the database, but it can. It could be a hardcoded string (sometimes called a ""pepper"" I think). Remember to treat the cookie as invalid if it's past the expiry time. That's why the token should be a signature, to make sure they didn't spoof that data.
","2950","<php><authentication><cookies><hash><salt>","7","4","3","2011-01-04 23:07:47","4599314","5","4","","","","2011-01-04 22:48:18",""
"4599255","Hashing & Salting - Validating login w/ cookies","So this is basically a reassurance that I'm doing the whole registration/login process right as far as hashing/salting goes.
I have a users table with the fields password, salt, token (obviously there are others but this is the most important). Upon registration it generate a random salt, and a random token, and it puts in the password field this:
hash(""sha256"", $theirpostpassword.$randomgeneratedsalt);

That random generated salt and token are stored in their respective fields in that users row in the table.
So upon login I select the salt ONLY from the users row with the username they specified. I then do a count query of how many rows have their post password concatenated with their specific salt, and then I log them in. Pretty sure I have that part down.
Now I was thinking to validate their login on every page I would have a function ran every page that checks their cookie to see if the format of id-username-token matches the row in the database. Meaning that every login it sets their cookie with those credentials.
Now the only thing I can think of to make it better is change the token every valid login? 
Thanks for the insight guys.
","Sounds pretty good to me, but you should be aware of a couple of things:
To make your password database resistant to brute-force attacks you could iterate the hash:
$hash = $password;
for ($i = 0; $i < 1000; ++$i) {
    $hash = hash(""sha256"", $hash . $salt);
}

Second, make sure you use SSL all the time. Without it, it's pretty trivial for an attacker to steal the login cookie. See firesheep for a good example of how trivial it is.
Definitely change the token every login and consider changing it for every request to prevent session fixation and replay attacks.
You could also select the salt and the hash from the database and do the hash comparison server-side (rather than on the DB) to reduce the number of round-trips to the database.
I'd suggest that the token be entirely random. You want it to be unguessable and the best way to do that is random. You could tie the token to a particular IP address as well but this should be in addition to a random token, not a replacement.
That's all that springs to mind. Good on you for asking for advice rather than just MD5-ing the password and sticking it in the database!
","2950","<php><authentication><cookies><hash><salt>","7","2","3","2011-01-04 23:07:47","4599314","5","4","","","","2011-01-04 22:48:18",""
"9266539","how to get/set the salt for a JdbcRealm","I am attempting to use the Shiro JdbcRealm and SHA256 hashedcredentialsMatcher.   I need to update a legacy database and assign the appropriate salt for each user (via a batch routine).  
how do I get/set the salt for a given account using the Shiro framework?
","Maybe a bit late:
Have a look at this tutorial.
Meri, the guy who owns the blog, describes exactly how to create an own salted JDBC Realm.
This is also an acknowledged improvement in the community for version 1.3.0 .
Hope this helpes, have Fun!
","2949","<java><shiro><salt><jdbcrealm>","3","1","2","2018-09-20 01:30:18","","0","1","280965","","2018-09-20 01:30:18","2012-02-13 19:19:07",""
"9266539","how to get/set the salt for a JdbcRealm","I am attempting to use the Shiro JdbcRealm and SHA256 hashedcredentialsMatcher.   I need to update a legacy database and assign the appropriate salt for each user (via a batch routine).  
how do I get/set the salt for a given account using the Shiro framework?
","With Shiro 1.2.3 all you need to do is:

Extend JdbcRealm and set salt style.
public class JdbcSaltRealm extends JdbcRealm {
    public JdbcSaltRealm() {
        setSaltStyle(SaltStyle.COLUMN);
    }
}

Update shiro.ini to use extended realm and to get salt column from DB
credentialsMatcher = org.apache.shiro.authc.credential.HashedCredentialsMatcher
credentialsMatcher.hashAlgorithmName = SHA-256
jdbcRealm = com.mypackage.JdbcSaltRealm
jdbcRealm.authenticationQuery = SELECT password, salt FROM user WHERE username = ?
jdbcRealm.credentialsMatcher = $credentialsMatcher

Hash & salt current / new user passwords. This should be done for all existing users as well as on new user registrations.
private void saltHashPassword(String password) {

    String salt = new BigInteger(250, new SecureRandom()).toString(32);

    //TODO: save salt value to ""salt"" column in user table

    Sha256Hash hash = new Sha256Hash(password, 
                          (new SimpleByteSource(salt)).getBytes());
    String saltedHashedPassword = hash.toHex();

    //TODO: save saltedHashedPassword value to ""password"" column in user table
}


I hope my answer is clear and understandable.
","2949","<java><shiro><salt><jdbcrealm>","3","8","2","2018-09-20 01:30:18","","0","1","280965","","2018-09-20 01:30:18","2012-02-13 19:19:07",""
"6141537","How store salt in distributed environment","I dont know how to use the ""salt concept"" in my scenario.
Suppose I have a client desktop application that encrypts data for specific users and send it to a remote server. The client application generate a key with PKCS#5, with the user's password and a SALT. The remote desktop must NEVER be in contact with the user's password.
Suppose we generate a random salt for an encryption. The client application can encrypt the data, and sent it to the remote server. If the user try to access his data on another computer, how will it be able to decrypt it since the salt is unknown?
I think that using the same salt all the time (hardcoded in the application) is not a good idea (security by obfuscation is bad).
How can I solve my problem ?
","If you include the salt with the encrypted data, then the client application on another computer can successfully compute the password hash.
","2932","<encryption><salt><pkcs#5>","4","0","3","2017-07-13 17:01:50","6141693","0","2","","","","2011-05-26 16:02:10",""
"6141537","How store salt in distributed environment","I dont know how to use the ""salt concept"" in my scenario.
Suppose I have a client desktop application that encrypts data for specific users and send it to a remote server. The client application generate a key with PKCS#5, with the user's password and a SALT. The remote desktop must NEVER be in contact with the user's password.
Suppose we generate a random salt for an encryption. The client application can encrypt the data, and sent it to the remote server. If the user try to access his data on another computer, how will it be able to decrypt it since the salt is unknown?
I think that using the same salt all the time (hardcoded in the application) is not a good idea (security by obfuscation is bad).
How can I solve my problem ?
","The salt is stored unencrypted along with the encrypted data.
The purpose of a salt is to prevent an attacker from precomputing a dictionary of encrypted passwords.  (As in, the attacker spends a year or whatever generating the encrypted form of every word in every language.)
The other purpose of a salt is to make sure that two users will have different encrypted passwords even if their unencrypted passwords are the same.
Neither purpose requires that the salt remain secret.
[update, to elaborate]
See the Wikipedia entry for Salt (cryptography).  In particular, read the introductory paragraphs.
The purpose of a salt is to take a non-random input (e.g., user-provided data) and make it random before passing it through a cryptographic function.  For this to work, the salt must be randomly generated for each input.
The traditional example is storing encrypted passwords.  Most users reliably choose non-random passwords, so without a salt, everyone who chooses ""SEKRIT"" as a password will wind up with the same encrypted password in the password DB.  The solution is to add a random salt before encrypting the password, and then to store it (in plaintext) along with the encrypted password.
","2932","<encryption><salt><pkcs#5>","4","8","3","2017-07-13 17:01:50","6141693","0","2","","","","2011-05-26 16:02:10",""
"6141537","How store salt in distributed environment","I dont know how to use the ""salt concept"" in my scenario.
Suppose I have a client desktop application that encrypts data for specific users and send it to a remote server. The client application generate a key with PKCS#5, with the user's password and a SALT. The remote desktop must NEVER be in contact with the user's password.
Suppose we generate a random salt for an encryption. The client application can encrypt the data, and sent it to the remote server. If the user try to access his data on another computer, how will it be able to decrypt it since the salt is unknown?
I think that using the same salt all the time (hardcoded in the application) is not a good idea (security by obfuscation is bad).
How can I solve my problem ?
","There is an aspect of salting in a distributed environment which is not being covered by any of the answers I have seen thus far.   If one's site has multiple databases which need to be kept in sync, how does one guard against a race condition in which a random salt generated on two or more sites near-simultaneously.   When the databases are reconciled, how's one to know which salt column for a given row is the correct one?
IMHO, the case for the idea that a salt value needs to be a constantly recalculated random string has not been made against using something like the primary key (PK) for the user row.   Before you reply aghast, hear me out.

Any reasonable hash function will produce a completely different hash no matter how much the plain text is changes (one or 100 characters added).
If you use the PK then the value is independent of all user-provided information.
Just like any salting action, the PK-as-salt can be inserted anywhere in the plain text by the algorithm.  It does not need to be at the start or end.
In a distributed environment, there is no race condition about the salt column because there is no salt column.
Using an implied salt like the PK still makes each hash look different even if two folks use the same password.  Thus the PK-as-salt idea does what a salt should do without the complications of reconciliations.

","2932","<encryption><salt><pkcs#5>","4","0","3","2017-07-13 17:01:50","6141693","0","2","","","","2011-05-26 16:02:10",""
"4171859","Password salts: prepending vs. appending","I just looked at the implementation of password hashing in Django and noticed that it prepends the salt, so the hash is created like sha1(salt + password), for example.
In my opinion, salts are good for two purposes

Preventing rainbow table lookups
Alright, prepending/appending the salt doesn't really make a difference for rainbow tables.
Hardening against brute-force/dictionary attacks
This is what my question is about. If someone wants to attack a single password from a stolen password database, he needs to try a lot of passwords (e.g. dictionary words or [A-Za-z0-9] permutations).
Let's assume my password is ""abcdef"", the salt is ""salt"" and the attacker tries all [a-z]{6} passwords.
With a prepended salt, one must calculate hash(""salt""), store the hash algorithm's state and then go on from that point for each permutation. That is, going through all permutations would take 26^6 copy-hash-algorithm's-state-struct operations and 26^6 hash(permutation of [a-z]{6}) operations. As copying the hash algorithm's state is freakin fast, the salt hardly adds any complexity here, no matter how long it is.
But, with an appended salt, the attacker must calculate hash(permutation of [a-z]{6} + salt) for each permutation, leading to 26^10 hash operations. So obviously, appending salts adds complexity depending on the salt length.

I don't believe this is for historical reasons because Django is rather new. So what's the sense in prepending salts?
","Do neither, use a standard Key derivation function like PBKDF2. Never roll your own crypto. It's much too easy to get it wrong. PBKDF2 uses many iterations to protect against bruteforce which is a much bigger improvement than the simple ordering.
And your trick pre-calculating the internal state of the hash-function after processing the salt probably isn't that easy to pull off unless the length of the salt corresponds to the block-length of the underlying block-cypher.
","2928","<security><hash><password-protection><salt>","10","10","3","2010-11-18 07:56:14","4171883","1","3","106224","","2010-11-13 09:37:09","2010-11-13 09:33:23",""
"4171859","Password salts: prepending vs. appending","I just looked at the implementation of password hashing in Django and noticed that it prepends the salt, so the hash is created like sha1(salt + password), for example.
In my opinion, salts are good for two purposes

Preventing rainbow table lookups
Alright, prepending/appending the salt doesn't really make a difference for rainbow tables.
Hardening against brute-force/dictionary attacks
This is what my question is about. If someone wants to attack a single password from a stolen password database, he needs to try a lot of passwords (e.g. dictionary words or [A-Za-z0-9] permutations).
Let's assume my password is ""abcdef"", the salt is ""salt"" and the attacker tries all [a-z]{6} passwords.
With a prepended salt, one must calculate hash(""salt""), store the hash algorithm's state and then go on from that point for each permutation. That is, going through all permutations would take 26^6 copy-hash-algorithm's-state-struct operations and 26^6 hash(permutation of [a-z]{6}) operations. As copying the hash algorithm's state is freakin fast, the salt hardly adds any complexity here, no matter how long it is.
But, with an appended salt, the attacker must calculate hash(permutation of [a-z]{6} + salt) for each permutation, leading to 26^10 hash operations. So obviously, appending salts adds complexity depending on the salt length.

I don't believe this is for historical reasons because Django is rather new. So what's the sense in prepending salts?
","You are making a valid point, of course; but , really, if you want to increase time it takes to calculate hash, just use longer hash. SHA256 instead of SHA1, for example.
","2928","<security><hash><password-protection><salt>","10","0","3","2010-11-18 07:56:14","4171883","1","3","106224","","2010-11-13 09:37:09","2010-11-13 09:33:23",""
"4171859","Password salts: prepending vs. appending","I just looked at the implementation of password hashing in Django and noticed that it prepends the salt, so the hash is created like sha1(salt + password), for example.
In my opinion, salts are good for two purposes

Preventing rainbow table lookups
Alright, prepending/appending the salt doesn't really make a difference for rainbow tables.
Hardening against brute-force/dictionary attacks
This is what my question is about. If someone wants to attack a single password from a stolen password database, he needs to try a lot of passwords (e.g. dictionary words or [A-Za-z0-9] permutations).
Let's assume my password is ""abcdef"", the salt is ""salt"" and the attacker tries all [a-z]{6} passwords.
With a prepended salt, one must calculate hash(""salt""), store the hash algorithm's state and then go on from that point for each permutation. That is, going through all permutations would take 26^6 copy-hash-algorithm's-state-struct operations and 26^6 hash(permutation of [a-z]{6}) operations. As copying the hash algorithm's state is freakin fast, the salt hardly adds any complexity here, no matter how long it is.
But, with an appended salt, the attacker must calculate hash(permutation of [a-z]{6} + salt) for each permutation, leading to 26^10 hash operations. So obviously, appending salts adds complexity depending on the salt length.

I don't believe this is for historical reasons because Django is rather new. So what's the sense in prepending salts?
","If salt is prepended, attacker can make hash state database for salts (assuming salt is long enough to make a hashing step) and then run dictionary attack.
But if salt is appended, attacker can make such database for password dictionary and additionally compute only salt's hash. Given that salt is usually shorter than password (like 4 chars salt and 8 char password), it will be faster attack.
","2928","<security><hash><password-protection><salt>","10","1","3","2010-11-18 07:56:14","4171883","1","3","106224","","2010-11-13 09:37:09","2010-11-13 09:33:23",""
"2065558","Double salt for hashing passwords?","I'm thinking of hashing user passwords with two different salt strings, one stored in the code which is the same for all users and another stored in the database for which each user has their own unique value.
Would this be more effective than simply storing the values in the database?
Any advice, opinions appreiated.
Thanks
","The effect is miniscule if anything at all.  Consider that a static, hard coded salt can be viewed as nothing more than an alteration to the hashing algorithm - it happens exactly the same way every time, so it may as well be considered part of the algorithm.
But the purpose of the salt is to create some randomness that is similar to extending the (minimum) strength of the password, for the purpose of making offline cracking (including rainbow tables) more resource intensive (non-rainbow-table cracking will require more CPU time, and rainbow tables will require all salts for all strings).
The only way that you'd get any value from this is while the static salt is unknown - the equivalent to the algorithm being unknown.  If your binary or your source is available to the attacker, then reverse engineering will demonstrate the algorithm and the hard coded salt.
And if this issue goes public, you will probably have to deal with flack from many security enthusiasts who believe that anything not perfect is completely broken, even though your product already does the right thing and the additional step is just useless.
And, of course, you'll have to deal with maintenance issues of having a static salt - backwards compatibility and bug fixes around the hashing code can be a pain.
The very small benefit of static keys (or salts) is simply not worth the cost.  Always make keys and salts dynamic.
","2903","<passwords><salt>","9","20","1","2010-01-14 16:25:09","","2","","","","","2010-01-14 16:13:38",""
"2594328","Unique text field in MySQL and php","I've created a salt using; md5(rand(0,10000000)); (there is probably a better way?)
There doesn't seem to be possible to make a text field unique in MYSQL. So how do I check if the salt has already been used for a previous user?
Or should I generate the salt based on the current date/time? as it is impossible for 2 users to register at exactly the same time correct?
","md5() is a broken algorithm and should never be touched.
rand() is slightly broken because it is based on the system clock.
A better method is:
function generateRandomKey()
{
    return base_convert(uniqid(mt_rand(), true), 16, 36);
}

Edit: If there is a better way or I'm wrong, please show me your way of doing it. I'm genuinely interested, and would like to know if I'm being insecure.
","2880","<php><mysql><unique><salt>","5","0","6","2010-04-07 18:08:53","2594379","1","","","","","2010-04-07 16:50:36",""
"2594328","Unique text field in MySQL and php","I've created a salt using; md5(rand(0,10000000)); (there is probably a better way?)
There doesn't seem to be possible to make a text field unique in MYSQL. So how do I check if the salt has already been used for a previous user?
Or should I generate the salt based on the current date/time? as it is impossible for 2 users to register at exactly the same time correct?
","you can use something like http://php.net/manual/en/function.uniqid.php to generate a UUID. or the timestamp is also a good one - maybe even timestamp and ip address or similar.
","2880","<php><mysql><unique><salt>","5","0","6","2010-04-07 18:08:53","2594379","1","","","","","2010-04-07 16:50:36",""
"2594328","Unique text field in MySQL and php","I've created a salt using; md5(rand(0,10000000)); (there is probably a better way?)
There doesn't seem to be possible to make a text field unique in MYSQL. So how do I check if the salt has already been used for a previous user?
Or should I generate the salt based on the current date/time? as it is impossible for 2 users to register at exactly the same time correct?
","Generate the salt with SHA1 using user id and datetime.
","2880","<php><mysql><unique><salt>","5","0","6","2010-04-07 18:08:53","2594379","1","","","","","2010-04-07 16:50:36",""
"2594328","Unique text field in MySQL and php","I've created a salt using; md5(rand(0,10000000)); (there is probably a better way?)
There doesn't seem to be possible to make a text field unique in MYSQL. So how do I check if the salt has already been used for a previous user?
Or should I generate the salt based on the current date/time? as it is impossible for 2 users to register at exactly the same time correct?
","For a salt, uniqueness is more important than length and predictability. You assume the attacker has the salt.
A universally unique identifier (UUID) would be best, and there are examples that generate universally unique identifiers on the doc page for the php uniqueid() function. A UUID has the advantage over a random string in that it's human readable and a fixed length, therefore you can store it in a varchar field and use a unique index to ensure there aren't ever duplicates.
Hashing the time with MD5 is a common method to generate unique values because it has a fixed length and is human readable. However, it makes more sense just to generate a fixed length random string and encode it into hex yourself. Hashes aren't designed for uniqueness so much as they're designed not to be reversible. Using a hashing function guarantees collisions, though there will be less collisions with SHA1 than MD5.
The length of the salt is really only a factor because the longer the salt, the more likely it is to be universally unique.
","2880","<php><mysql><unique><salt>","5","1","6","2010-04-07 18:08:53","2594379","1","","","","","2010-04-07 16:50:36",""
"2594328","Unique text field in MySQL and php","I've created a salt using; md5(rand(0,10000000)); (there is probably a better way?)
There doesn't seem to be possible to make a text field unique in MYSQL. So how do I check if the salt has already been used for a previous user?
Or should I generate the salt based on the current date/time? as it is impossible for 2 users to register at exactly the same time correct?
","MySQL's indexes are length-limited on text fields, they don't go whole-field automatically like they do on char/varchar fields, so there's no practical way to use a 'unique' key on text fields.
But if you're storing hashes generated by MySQL, then you don't need text - the has results are plain-text, so just use a fixed-length char field:
mysql> select length(md5('a')), length(sha1('a'));
+------------------+-------------------+
| length(md5('a')) | length(sha1('a')) |
+------------------+-------------------+
|               32 |                40 | 
+------------------+-------------------+

and then you CAN apply a unique constraint to that field.
","2880","<php><mysql><unique><salt>","5","1","6","2010-04-07 18:08:53","2594379","1","","","","","2010-04-07 16:50:36",""
"2594328","Unique text field in MySQL and php","I've created a salt using; md5(rand(0,10000000)); (there is probably a better way?)
There doesn't seem to be possible to make a text field unique in MYSQL. So how do I check if the salt has already been used for a previous user?
Or should I generate the salt based on the current date/time? as it is impossible for 2 users to register at exactly the same time correct?
","You generally dont generate salt strings often. So when you first generate them, you should do a good job. Longer and more random strings are better.
function generateSalt($length = null)
{
  if (!is_int($length) || ($length < 1)) $length = 250;
  do {
    $salt[] = chr(mt_rand(0, 255));
  } while (--$length);
  return implode('', $salt);
}

update query for new password
update user set salt = :salt, password = sha1(concat(:password, :salt)) where id = :id limit 1;

you can check if the password is correct and get the user data at the same time.
select * from user where id = :id and password = sha1(concat(:password, salt)) limit 1;

","2880","<php><mysql><unique><salt>","5","0","6","2010-04-07 18:08:53","2594379","1","","","","","2010-04-07 16:50:36",""
"14223170","Checking username and hashed/salted password in mysql database using PHP","When validating user logins, is it safe to first search for the username and THEN if found, retrieve the hashed password and salt and compare it with the user input?
Or, should the salt for the user-inputed username be retrieved by itself, then be hashed with the inputed password and compared with the final hash in the database?
In essence, is it safe to store a password for an inputed username from a database before knowing whether the password the user entered is valid?
","You may check both loginname and password at the same time. Get the raw password; salt it, then check if salted password and username combination exist.  Ofcourse, password in db should have been salted and hashed before.
 if($loginname AND $loginpass){
  $loginpass=sha1($salt1.$loginpass.$salt2,$raw_output=false );

    $userinfo_query=""SELECT * FROM users WHERE user_name='$loginname' AND user_pass='$loginpass' LIMIT 1"";

  }

","2849","<php><mysql><login><passwords><salt>","2","1","2","2013-01-08 20:50:10","","0","1","","","","2013-01-08 20:08:02",""
"14223170","Checking username and hashed/salted password in mysql database using PHP","When validating user logins, is it safe to first search for the username and THEN if found, retrieve the hashed password and salt and compare it with the user input?
Or, should the salt for the user-inputed username be retrieved by itself, then be hashed with the inputed password and compared with the final hash in the database?
In essence, is it safe to store a password for an inputed username from a database before knowing whether the password the user entered is valid?
","If you look at the examples of the PHP Password Hashing API https://github.com/ircmaxell/password_compat the answer is: No, you read the user from the database and compare the stored password hash with the password you just got from the login form.
And please try to use this library - PHP 5.5 will support the functions natively, and if you are on PHP 5.3.7 and later, it sounds like a very good idea not to reinvent the wheel and simply use these functions. Doing your own thing is more likely to be attackable.
","2849","<php><mysql><login><passwords><salt>","2","2","2","2013-01-08 20:50:10","","0","1","","","","2013-01-08 20:08:02",""
"17288686","Generating SALT for Android Licensing","I would like to implement licensing in my app and need some help here.
The sample app has this:
// REPLACE WITH YOUR OWN SALT , THIS IS FROM EXAMPLE
    private static final byte[] SALT = new byte[]{
            -46, 65, 30, -128, -103, -57, 74, -64, 51, 88, -95, -45, 77, -117, -36, -113, -11, 32, -64,
            89
    };

I would like to know do I just change the numbers to some random number or do I have to generate it using SecureRandom?
I came across this code, do I have to set the SALT variable from the clipboard?
Also, does SALT have to be different for every device or same?
","A non random salt isn't going to be very secure, in theory someone can generate every combo for your app (however thats unlikely). 
I suggest you take a look RSA public key cryptography. You may want to have a look at How to use public encryption to manage licensing on android applications? .
Edit: I was a bit unclear on you question at first, Android: Do the random SALT bytes passed to AESObfuscator need to stay the same? i think is a duplicate that has an answer.
","2830","<android><salt><android-lvl>","4","2","2","2013-09-28 14:40:59","17288783","0","2","","","","2013-06-25 03:28:43",""
"17288686","Generating SALT for Android Licensing","I would like to implement licensing in my app and need some help here.
The sample app has this:
// REPLACE WITH YOUR OWN SALT , THIS IS FROM EXAMPLE
    private static final byte[] SALT = new byte[]{
            -46, 65, 30, -128, -103, -57, 74, -64, 51, 88, -95, -45, 77, -117, -36, -113, -11, 32, -64,
            89
    };

I would like to know do I just change the numbers to some random number or do I have to generate it using SecureRandom?
I came across this code, do I have to set the SALT variable from the clipboard?
Also, does SALT have to be different for every device or same?
","You can put any 20 randomly generated bytes
I think you can use the following Generator for this purpose: 
http://www.random.org/integers/?num=20&min=0&max=255&col=5&base=10&format=html&rnd=new
","2830","<android><salt><android-lvl>","4","1","2","2013-09-28 14:40:59","17288783","0","2","","","","2013-06-25 03:28:43",""
"6273718","protocol to use password hashing with salt","I am trying to understand what information are needed to be sent in a web application . Basically I have a web app running on a web server , a database which has a user table with hashed password and salt , and of course the web client with javascript enabled. 
When a user login at the login , the user name and password are entered on the client side. I want to know what information are sent . Does the web client sent the password in plain text ,or does it use javascript to hash the password WITHOUT the salt and sent the hased result ? Or does the client fetch the salt in plain text from the server , and then the client sent the hased password+salt ?
What is the best way to hash , and to hash with salt ?
Is MD5 ok as a hash ?  How does  hash( password_plain_text + salt ) vs. hash(hash( password_plain_text ) + salt ) , where + is a string concatenation ?
","JavaScript sends whatever you tell it to send. If you aren't explicitly hashing the passwords via JavaScript, then they are being sent in plaintext to the server which is hashing them.
I don't think it would be a great idea to hash on the client side, though, as that would be revealing your salt to anyone who looks at your JavaScript. Also, users without JavaScript enabled won't be able to log in.
Hash on the serverside.
As for the security, it doesn't make a difference. The second solution makes it twice as hard for a bruteforce hacker to find your passwords (as they would have to generate two hashes instead of one), but as long as nobody knows your hashes, you don't have to worry about that.
But if you are really worried about security, hash with SHA256. Google ""md5 collisions"" to see why MD5 is not the best hashing function to use (it is one of the fastest).
","2822","<javascript><hash><salt><message-digest>","3","3","3","2011-06-08 03:12:49","6273797","0","1","","","","2011-06-08 02:55:06",""
"6273718","protocol to use password hashing with salt","I am trying to understand what information are needed to be sent in a web application . Basically I have a web app running on a web server , a database which has a user table with hashed password and salt , and of course the web client with javascript enabled. 
When a user login at the login , the user name and password are entered on the client side. I want to know what information are sent . Does the web client sent the password in plain text ,or does it use javascript to hash the password WITHOUT the salt and sent the hased result ? Or does the client fetch the salt in plain text from the server , and then the client sent the hased password+salt ?
What is the best way to hash , and to hash with salt ?
Is MD5 ok as a hash ?  How does  hash( password_plain_text + salt ) vs. hash(hash( password_plain_text ) + salt ) , where + is a string concatenation ?
","If you want your connection really secure use SSL. If your data isn't critical hash your password on the server. You can hash it on client but your hashed password and salt might be compromised anyway, so easy password can be bruted.
","2822","<javascript><hash><salt><message-digest>","3","3","3","2011-06-08 03:12:49","6273797","0","1","","","","2011-06-08 02:55:06",""
"6273718","protocol to use password hashing with salt","I am trying to understand what information are needed to be sent in a web application . Basically I have a web app running on a web server , a database which has a user table with hashed password and salt , and of course the web client with javascript enabled. 
When a user login at the login , the user name and password are entered on the client side. I want to know what information are sent . Does the web client sent the password in plain text ,or does it use javascript to hash the password WITHOUT the salt and sent the hased result ? Or does the client fetch the salt in plain text from the server , and then the client sent the hased password+salt ?
What is the best way to hash , and to hash with salt ?
Is MD5 ok as a hash ?  How does  hash( password_plain_text + salt ) vs. hash(hash( password_plain_text ) + salt ) , where + is a string concatenation ?
","When the browser sends over the data you provided it sends it over in a format which most likely matches the requirements of the RFC(s) for the protocol it is communicating with the server over.
In the case of an HTTP connection, the user name and password are sent in the clear (that is, in plain text) to your webserver. 
In the case of an HTTPS connection, everything sent to the HTTPS-enabled server by the client (after the handshake) is encrypted - once it arrives at the server it is decrypted.  Whatever software stack you are using on the server side should handle this transparently for you - so you will be dealing with data in the clear again.
In either case, you should always hash passwords that you are storing.  The reason is not to keep the password as it goes over the wire (i.e. between the client and the server).  The reason is to keep the password safe in your database -- the safest way to keep a secret is to not have one to keep.
Hashing on the client side is not safe at all, as it exposes not only your chosen hash method, but also your salting mechanism (and, for a compromised client, the actual salt value.)
As to the best way to hash ... choose a decently secure hashing algorithm (one of the SHA family should do the trick nicely) and a dynamic salt (one that is different for each user, such as date of join and every other letter of their email address).  If you want to make it more secure, hash the hash a few (thousand) times.  This way, even if you should have your entire database stolen, it will take a significant amount of work to expose even a small percentage of your passwords, thus saving people who reuse passwords some serious headaches.
","2822","<javascript><hash><salt><message-digest>","3","6","3","2011-06-08 03:12:49","6273797","0","1","","","","2011-06-08 02:55:06",""
"22294513","Hashed format in windows 7 or above","I need to find some materials about how Security Accounts Manager(SAM) works in windows 7+. I am confused with the storage format of hashed value. 
Many materials (such as, 1) tells me that it uses NTLM(or NTLM v2). However, as far as I understand, the security level of NTLM is very low. Most OS(such as unix) will provide random salt to enhance basic security level. For NTML, we can break it easily with brute force in several days(even several hours with great device). Also, if we use rainbow table, we can achieve perfect result. 
Some other materials (such as, 2) tells me that Windows Vista or above has replaced NTLM with Kerberos. Does it affect SAM? If so, in default, which hash algorithm does it use in Windows 7 or above?
To make my question clearly, I want to list them below.

Does NTLM or NTLMv2 use salt?
Which algorithm does windows 7 or windows 8 use for SAM?
Whether kerberos affects the hashed format of SAM?

","1) Algorithms for LM, NTLM and NTLMv2 Session Security you can find at: http://davenport.sourceforge.net/ntlm.html.
2) Which protocol is chosen depends on configuration (http://technet.microsoft.com/en-us/library/cc738867%28v=ws.10%29.aspx). Very often it's set to the highest level: Send NTLMv2 response only\refuse LM & NTLM.
3) No. There's no correlation or dependence between LM/NTLM/NTLMv2 Session Security and Kerberos. They're completely different protocols, independent from each other. 
","2781","<windows><hash><kerberos><ntlm><salt>","-1","0","1","2014-03-16 14:06:28","","0","","","","","2014-03-10 07:37:49",""
"7276109","Hash from ""email+salt "" as a token to verify email","I'm verifying user email address. 
The way most people tell  is to create some unique token store it in db and 
send to user.
I'm doing it with just hashing (sha256) email addres with sitewide salt
and sending this hash to user.
Am i missing something or is this enough to verify?
","You can do that and if nobody gets the serverside salt, it's save. In the end it's email validation, and if you don't need to do it for legal reasons, there is no need to make it more complicated.
But it depends on your goals. Do want it to be extra safe? Do you want to be easy to implement? Do you want it easy to maintain? Are you thinking about execution time of your scripts?
BTW: One very nasty thing when having a long link in an email: There may be email cients which break your link, so maybe add the code along with the link and if the code is not completly transfered through the link, have a form where the user can add the code.
","2713","<salt><email-validation><sha256><sha><saltedhash>","2","1","2","2011-11-11 21:55:54","7276292","3","1","631619","","2011-11-11 21:55:54","2011-09-01 20:28:15",""
"7276109","Hash from ""email+salt "" as a token to verify email","I'm verifying user email address. 
The way most people tell  is to create some unique token store it in db and 
send to user.
I'm doing it with just hashing (sha256) email addres with sitewide salt
and sending this hash to user.
Am i missing something or is this enough to verify?
","A couple of things that might be worth a look (or not).
If someone finds out your salt, then they can reconstruct your hashes and flood your system.  In this case you'd want to make sure that a user requested addition of their e-mail address to whatever you're creating.  (That is, I wouldn't get rid of storing the hash in the DB altogether.)
Also, if the salt is the same, the hash will be the same if they request again from that same e-mail address.  Do you want a different hash each time a request is made, even for the same e-mail address?  You could concatenate the server date/time to the e-mail address before you hash it to make it different each time.
","2713","<salt><email-validation><sha256><sha><saltedhash>","2","2","2","2011-11-11 21:55:54","7276292","3","1","631619","","2011-11-11 21:55:54","2011-09-01 20:28:15",""
"16016197","Using encryption and salt with Zend Framework 2's Authentication","I'm sort of a beginner, but I've been trying to learn to work with Zend Framework 2. I'm using a module I cloned from a public repo to authenticate users. It uses MD5, like so:
$dbAdapter      = $sm->get('Zend\Db\Adapter\Adapter');
$dbAuthAdapter  = new DbAuthAdapter($dbAdapter, 'user','username','password', 'MD5(?)');

However, first of all I'd like to use something other than MD5 (like SHA-2?), since I've read on several occasions that MD5 isn't secure anymore, and I'd also like to use a salt value. I want to generate a random salt value for each user and store it in their table row in a seperate column, and store their password as the hashed salt + password. That part shouldn't be a problem.
The problem I have with this is how to validate it using the adapter I have set up in the module. I want to get the salt value from the database, prepend it to the password given by the user through the login form, encrypt that, and compare it to the stored password. How do I get the user's salt value from the database? How do I use a different encryption instead of MD5? 
","I suggest you do a couple of things:

Add another column to your users table, called salt or something similar. When a user registers, create a salt and store it into this column.
Store a static salt for your site in a configuration file.
When a user registers, use a hashing function (sha2 if you like) and concatenate the password, static salt, and custom salt into one string which is hashed.
Store the hash and ensure you use the same method for checking the password on login.

Here is more information: http://framework.zend.com/manual/2.0/en/modules/zend.crypt.key.derivation.html
The docs hint at this implementation as well: http://framework.zend.com/manual/2.1/en/modules/zend.authentication.adapter.dbtable.html
","2697","<php><encryption><passwords><zend-framework2><salt>","0","2","1","2013-04-15 14:05:54","16017296","0","","","","","2013-04-15 13:18:56",""
"3596598","Is using a CreateUUID() function as salt a good idea?","I'm using coldfusion and I would like to generate a random salt field for my passwords. I was wondering if a CreateUUID() function is useful here. I found many examples which use a seperate function to create the salt string; but why do this when you could use rand() or CreateUUID() functions instead? I'm not sure.
Is it an overkill or a good idea? Or should I use rand() or a timestamp instead?
","This is not a good idea - CreateUUID guarantees uniqueness, not randomness; if you did a statistical analysis of CreateUUID, it most likely wouldn't be a distribution considered sufficiently random for cryptography, because it wasn't explicitly designed that way. 
For example, the first n bytes of CreateUUID is your MAC address - i.e. always the same for every salt. By doing that, you've significantly decreased the amount of entropy that your salts have, thereby making them easier to crack. Use libraries to handle the whole auth scenario if at all possible, and if not, use a real rand() function.
","2672","<uuid><password-protection><salt>","8","8","1","2019-10-21 21:18:01","3596660","1","","","","","2010-08-29 21:08:28",""
"29390385","node.js how to repreduce PHP MD5 encryption","I'm converting an existing php based website to a node.js app, and I need to reproduce this encryption method from php to js.
private static $_passwordSalt = 'd2g6IOP(U(&Â§)%UÂ§VUIPU(HN%V/Â§Â§URerjh0Ã¼rfqw4zoÃ¶qe54gÃŸ0Ã¤Q""LOU$3wer';
public static function getCryptedPassword($password = 'password') {
    return sha1(md5(self::$_passwordSalt.$password));
}

So far I've tried this but it does not return the same results:
UserSchema.methods.hashPassword = function(password) {
        var salt = 'd2g6IOP(U(&Â§)%UÂ§VUIPU(HN%V/Â§Â§URerjh0Ã¼rfqw4zoÃ¶qe54gÃŸ0Ã¤Q""LOU$3wer'
        var md5Hash = md5(password + salt);
        var hash = sha1(md5Hash);
        return hash;
};

","Try this using crypto module:
var crypto = require('crypto');

UserSchema.methods.hashPassword = function(password) {
    var salt = 'd2g6IOP(U(&Â§)%UÂ§VUIPU(HN%V/Â§Â§URerjh0Ã¼rfqw4zoÃ¶qe54gÃŸ0Ã¤Q""LOU$3wer';
    var hashStr = password + salt;
    var md5Hash = crypto.createHash('md5').update(hashStr).digest('hex');
    var sha1 = crypto.createHash('sha1').update(md5Hash).digest('hex');
    console.log(sha1); 
    return sha1;
};

","2655","<php><node.js><md5><salt><password-encryption>","4","0","5","2015-05-13 09:44:05","29826868","4","1","77501","","2015-05-09 00:06:37","2015-04-01 12:07:05",""
"29390385","node.js how to repreduce PHP MD5 encryption","I'm converting an existing php based website to a node.js app, and I need to reproduce this encryption method from php to js.
private static $_passwordSalt = 'd2g6IOP(U(&Â§)%UÂ§VUIPU(HN%V/Â§Â§URerjh0Ã¼rfqw4zoÃ¶qe54gÃŸ0Ã¤Q""LOU$3wer';
public static function getCryptedPassword($password = 'password') {
    return sha1(md5(self::$_passwordSalt.$password));
}

So far I've tried this but it does not return the same results:
UserSchema.methods.hashPassword = function(password) {
        var salt = 'd2g6IOP(U(&Â§)%UÂ§VUIPU(HN%V/Â§Â§URerjh0Ã¼rfqw4zoÃ¶qe54gÃŸ0Ã¤Q""LOU$3wer'
        var md5Hash = md5(password + salt);
        var hash = sha1(md5Hash);
        return hash;
};

","You need to consider that a hash algorithm works on byte values, and you are using string values. This means that encoding will come in to play here, and from what I know PHP uses latin1 by default, while node.js uses utf-8.
crypto.createHash('md5').update(hashStr, 'ascii').digest('hex')

I'm not sure if ascii only handles 7-bit ascii or actual extended charsets like latin1, but it seems to be the only one supported directly in the update() method. If you need to control the extended charset, you should create a Buffer from the correct encoding, and use that as parameter to update() instead. The built in support in node.js is rather limited:
Buffer.isEncoding = function(encoding) {
  switch ((encoding + '').toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
    case 'raw':
      return true;

    default:
      return false;
  }
};

And you should consider using some other tool to convert it. This thread (List of encodings that Node.js supports) suggests using iconv or iconv-lite. 
Of course, the same applies to SHA1, but since you are using SHA1 on a hex representation of an MD5, it would never fall out of 7-bit ascii (where latin1 and utf-8 would produce the same byte sequence).
","2655","<php><node.js><md5><salt><password-encryption>","4","0","5","2015-05-13 09:44:05","29826868","4","1","77501","","2015-05-09 00:06:37","2015-04-01 12:07:05",""
"29390385","node.js how to repreduce PHP MD5 encryption","I'm converting an existing php based website to a node.js app, and I need to reproduce this encryption method from php to js.
private static $_passwordSalt = 'd2g6IOP(U(&Â§)%UÂ§VUIPU(HN%V/Â§Â§URerjh0Ã¼rfqw4zoÃ¶qe54gÃŸ0Ã¤Q""LOU$3wer';
public static function getCryptedPassword($password = 'password') {
    return sha1(md5(self::$_passwordSalt.$password));
}

So far I've tried this but it does not return the same results:
UserSchema.methods.hashPassword = function(password) {
        var salt = 'd2g6IOP(U(&Â§)%UÂ§VUIPU(HN%V/Â§Â§URerjh0Ã¼rfqw4zoÃ¶qe54gÃŸ0Ã¤Q""LOU$3wer'
        var md5Hash = md5(password + salt);
        var hash = sha1(md5Hash);
        return hash;
};

","please try these:
    var crypto = require('crypto');
var salt = 'd2g6IOP(U(&Â§)%UÂ§VUIPU(HN%V/Â§Â§URerjh0Ã¼rfqw4zoÃ¶qe54gÃŸ0Ã¤Q""LOU$3wer'
var password = 'pass';

var hashMd5 = crypto.createHash('md5').update(salt + password).digest(""hex"");
var hasSha1 = crypto.createHash('sha1').update(hasMd5).digest(""hex"");
console.log(hashSha1);

as file: hash.js
And as hash.php these code:
<?php

$_passwordSalt = 'd2g6IOP(U(&Â§)%UÂ§VUIPU(HN%V/Â§Â§URerjh0Ã¼rfqw4zoÃ¶qe54gÃŸ0Ã¤Q""LOU$3wer';
$password = 'pass';

//echo md5(""phinware"");
echo sha1(md5($_passwordSalt.$password));
echo ""\n"";

And than execute both files:

> php hash.php
> node hash.js

My results:
both: 3cbd1242e8e510a16f39d7e0bfd18a0e03d0de3f
","2655","<php><node.js><md5><salt><password-encryption>","4","3","5","2015-05-13 09:44:05","29826868","4","1","77501","","2015-05-09 00:06:37","2015-04-01 12:07:05",""
"29390385","node.js how to repreduce PHP MD5 encryption","I'm converting an existing php based website to a node.js app, and I need to reproduce this encryption method from php to js.
private static $_passwordSalt = 'd2g6IOP(U(&Â§)%UÂ§VUIPU(HN%V/Â§Â§URerjh0Ã¼rfqw4zoÃ¶qe54gÃŸ0Ã¤Q""LOU$3wer';
public static function getCryptedPassword($password = 'password') {
    return sha1(md5(self::$_passwordSalt.$password));
}

So far I've tried this but it does not return the same results:
UserSchema.methods.hashPassword = function(password) {
        var salt = 'd2g6IOP(U(&Â§)%UÂ§VUIPU(HN%V/Â§Â§URerjh0Ã¼rfqw4zoÃ¶qe54gÃŸ0Ã¤Q""LOU$3wer'
        var md5Hash = md5(password + salt);
        var hash = sha1(md5Hash);
        return hash;
};

","here is the currect solution
var md5 = require('MD5'),
    sha1 = require('sha1');

var salt = 'd2g6IOP(U(&Â§)%UÂ§VUIPU(HN%V/Â§Â§URerjh0Ã¼rfqw4zoÃ¶qe54gÃŸ0Ã¤Q""LOU$3wer';
var hash = sha1(md5(salt+password));
return hash;

","2655","<php><node.js><md5><salt><password-encryption>","4","0","5","2015-05-13 09:44:05","29826868","4","1","77501","","2015-05-09 00:06:37","2015-04-01 12:07:05",""
"29390385","node.js how to repreduce PHP MD5 encryption","I'm converting an existing php based website to a node.js app, and I need to reproduce this encryption method from php to js.
private static $_passwordSalt = 'd2g6IOP(U(&Â§)%UÂ§VUIPU(HN%V/Â§Â§URerjh0Ã¼rfqw4zoÃ¶qe54gÃŸ0Ã¤Q""LOU$3wer';
public static function getCryptedPassword($password = 'password') {
    return sha1(md5(self::$_passwordSalt.$password));
}

So far I've tried this but it does not return the same results:
UserSchema.methods.hashPassword = function(password) {
        var salt = 'd2g6IOP(U(&Â§)%UÂ§VUIPU(HN%V/Â§Â§URerjh0Ã¼rfqw4zoÃ¶qe54gÃŸ0Ã¤Q""LOU$3wer'
        var md5Hash = md5(password + salt);
        var hash = sha1(md5Hash);
        return hash;
};

","php:
$a = 'a';
$b = 'b';
echo md5($a.$b);

equals to node.js: 
var crypto = require('crypto');
var a = 'b', b = 'b';
var md5 = crypto.createHash('md5');
md5.update(xml, 'utf8');
md5.update(config.secret, 'utf8');
console.log(md5.digest('hex'));

","2655","<php><node.js><md5><salt><password-encryption>","4","1","5","2015-05-13 09:44:05","29826868","4","1","77501","","2015-05-09 00:06:37","2015-04-01 12:07:05",""
"43513880","Comparing hashed passwords with salt (bcrypt) always returns false","While doing an exercise for school I was required to store passwords properly (hashed in a database) using bcrypt. When comparing them the method always returns false. My code looks like that:
Register:
String username = editTextUsername.getText().toString();
String password = editTextPassword.getText().toString();
String hashedPW = BCrypt.hashpw(password, BCrypt.gensalt());
User user = new User(username, hashedPW);
user.save();

Login:
String username = editTextUsername.getText().toString();
String enteredPassword = editTextPassword.getText().toString();

String hashedPW = BCrypt.hashpw(enteredPassword, BCrypt.gensalt());

User u = usercontroller.getUser(username); //gets user object
String password = u.getPassword;

BCrypt.checkpw(password, hashedPW); //always returns false

I hope there are any BCrypt pros out there that could possibly help me.
Thank you in advance!
","change 
BCrypt.checkpw(password, hashedPW);

to
BCrypt.checkpw(enteredPassword, password);

Then it will evaluate properly .
It's doesn't  matter if password is appended with salt and hash is generated . 
Hashes of same password with different salts , when evaluated against the password from which it was generated ,will evaluate to true .
Hashing is one way algorithm this means that We cannot recompute the password by having hash. We can only compare  Password with password's Hash using hashing algorithm .Hashing algorithm typically is used to generated the Hash and to compare it with whatever it was generated from.  We use   Hashing to store password securely 
","2653","<java><android><hash><bcrypt><salt>","1","5","1","2019-01-09 07:35:20","43514491","2","1","","","","2017-04-20 08:15:06",""
"10183103","Security of generating hash salts using PHP's mt_rand()?","I'm trying to generate blowfish hashes and I was wondering if it's safe enough to count on mt_rand() to generate my salts for me?
function blowfish($string, $salt = NULL, $iterations = '08')
{
    if( ! $salt)
    {
        $seed = ""./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"";
        for ($i = 0; $i < 22; $i++)
        {
            $salt .= $seed{mt_rand(0, 63)};
        }
        $salt = '$2a$' . $iterations . '$' . $salt;
    }

    return crypt($string, $salt);
}

The character $seed above is the allowed 64-character blowfish-salt alphabet. I plan on using this to generate and compare passwords.
$password = 'my^$%#password';
$hash = blowfish($password);

if($hash = blowfish($password, $hash))
{
    print ""Matches\n"";
    print $hash . ""\n"";
}

Edit
I never realized this, but what @zerkms says is true. Salts are only to prevent reusable  precomputed attacks since the salt is known at the same point that they have access to the hash. So the goal isn't a non-reversible salt - it's a random salt.
So, anything wrong with this?
function blowfish($string, $salt = NULL, $iterations = '12')
{
    return crypt($string, $salt ?: ""$2a\$$iterations$"" . md5(uniqid('', true)));
}

Also, as noted in the title and above code, I'm not implementing my own hashing algorithm.
Update 2
Using the mcrypt extension if loaded leads to the following, which is actually faster probably because uniqid (u)sleeps or something.
function blowfish($string, $salt = NULL, $iterations = '12')
{
    return crypt($string, $salt ?: ""$2a\$$iterations$"" . base64_encode(mcrypt_create_iv(22, MCRYPT_DEV_URANDOM)));
}

Update 3
base64_encode is faster than md5 - but it has invalid blowfish characters in it like +. So changed to md5 now.
function blowfish($string, $salt = NULL, $iterations = '12')
{
    return crypt($string, $salt ?: ""$2a\$$iterations$"" . md5(mcrypt_create_iv(22, MCRYPT_DEV_URANDOM)));
}

","Use mcrypt to create a salt.
","2612","<php><hash><salt><prng>","6","6","2","2012-04-17 15:55:03","10183178","13","1","99923","","2012-04-17 15:55:03","2012-04-16 23:30:35",""
"10183103","Security of generating hash salts using PHP's mt_rand()?","I'm trying to generate blowfish hashes and I was wondering if it's safe enough to count on mt_rand() to generate my salts for me?
function blowfish($string, $salt = NULL, $iterations = '08')
{
    if( ! $salt)
    {
        $seed = ""./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"";
        for ($i = 0; $i < 22; $i++)
        {
            $salt .= $seed{mt_rand(0, 63)};
        }
        $salt = '$2a$' . $iterations . '$' . $salt;
    }

    return crypt($string, $salt);
}

The character $seed above is the allowed 64-character blowfish-salt alphabet. I plan on using this to generate and compare passwords.
$password = 'my^$%#password';
$hash = blowfish($password);

if($hash = blowfish($password, $hash))
{
    print ""Matches\n"";
    print $hash . ""\n"";
}

Edit
I never realized this, but what @zerkms says is true. Salts are only to prevent reusable  precomputed attacks since the salt is known at the same point that they have access to the hash. So the goal isn't a non-reversible salt - it's a random salt.
So, anything wrong with this?
function blowfish($string, $salt = NULL, $iterations = '12')
{
    return crypt($string, $salt ?: ""$2a\$$iterations$"" . md5(uniqid('', true)));
}

Also, as noted in the title and above code, I'm not implementing my own hashing algorithm.
Update 2
Using the mcrypt extension if loaded leads to the following, which is actually faster probably because uniqid (u)sleeps or something.
function blowfish($string, $salt = NULL, $iterations = '12')
{
    return crypt($string, $salt ?: ""$2a\$$iterations$"" . base64_encode(mcrypt_create_iv(22, MCRYPT_DEV_URANDOM)));
}

Update 3
base64_encode is faster than md5 - but it has invalid blowfish characters in it like +. So changed to md5 now.
function blowfish($string, $salt = NULL, $iterations = '12')
{
    return crypt($string, $salt ?: ""$2a\$$iterations$"" . md5(mcrypt_create_iv(22, MCRYPT_DEV_URANDOM)));
}

","Using mt_rand for your salt, is secure enough; provided obviously that you utilize a per password different random salt. 
However, with that said; nearly any self-implemented password hashing system is insecure. Few individuals are well versed enough to generate and maintain a secure password hashing system. For reference I implore you to read over a few SO threads:
Php/Password best practices
Salt generation and PHP
Do not roll your own
I suggest DO NOT ROLL YOUR OWN. Period. Please look into using the established library of PhPass of password hashing for PHP if possible. Benefits include real-world application testing, highly secure implementation, and extreme ease of use.  
","2612","<php><hash><salt><prng>","6","4","2","2012-04-17 15:55:03","10183178","13","1","99923","","2012-04-17 15:55:03","2012-04-16 23:30:35",""
"5468168","Random salt md5 implementation, including new registration / change password","I am trying to implement random salt md5 algorithm on an existing application. User passwords are stored in database as md5 hash. For existing users the following steps are followed
On client side (javascript)
client_password = md5(md5(plain_password) + random_salt)

On server side
server_password = md5(md5_password + same_random_salt),
check client_password to server_password

I am struggling to find solution to store user md5 password without salt in database for the case of change password.
Thanks
","First off : Do not use MD5 : It is not strong enough.
Excellent suggestion by @Shaggy Frog, use bycrypt. These posts should help you out:
https://stackoverflow.com/questions/2299434/bcrypt-implementation-in-javascript
Do I need to store the salt with bcrypt?
JS implementation of Bcrypt on Google Code

See th bCrypt JavaDoc.
What you would do is on the server when someone saves a password:
BCrypt.hashpw(plain_password, salt);

When someone tries to login:
if(BCrypt.checkpw(password_typed_by_user, stored_hash)
{
  //itmatches.. log him/her in.
} 

What you could do is use the username (or maybe a few letters from the username) for the salt, so you don't have to store that somewhere too.
When the password changes you need to take the plain text password again (on the server) and hash it again just like you would do when you saved it initially. If you are thinking of retrieval, there is no way, thats the point of hashing. Like most websites, you can change the password to some random numbers and then email this off to the requested address. 
","2560","<java><passwords><struts><md5><salt>","0","3","2","2011-03-29 07:40:51","5468198","2","","368070","","2011-03-29 07:40:51","2011-03-29 05:13:39",""
"5468168","Random salt md5 implementation, including new registration / change password","I am trying to implement random salt md5 algorithm on an existing application. User passwords are stored in database as md5 hash. For existing users the following steps are followed
On client side (javascript)
client_password = md5(md5(plain_password) + random_salt)

On server side
server_password = md5(md5_password + same_random_salt),
check client_password to server_password

I am struggling to find solution to store user md5 password without salt in database for the case of change password.
Thanks
","Client-side encryption is useless since you ultimately can't control the result. Only server-side encryption works.
Storing passwords as MD5 hashes is not a best practice. This is how websites get easily hacked. Salts will not help you.
Use bcrypt.
","2560","<java><passwords><struts><md5><salt>","0","2","2","2011-03-29 07:40:51","5468198","2","","368070","","2011-03-29 07:40:51","2011-03-29 05:13:39",""
"14473836","which algorithm preferred for hashing passwords C#?","
Possible Duplicate:
What algorithm should I use to hash passwords into my database? 

I am new to this hashing on password. I read the hashing + salt make passwords really safe. But still confused which hashing algorithm should I use as there are many like.
MD5CryptoServiceProvider
SHA1Managed
SHA256Managedetc. 
How can I decide which one is good for me or all are equal. Can I pick up anyone blindly?
","MD5 is considered crackable.  SHA1 is good but maybe crackable.  SHA256 is good.
https://security.stackexchange.com/questions/5586/why-do-people-think-that-this-is-bad-way-to-hash-passwords
SHA1 vs md5 vs SHA256: which to use for a PHP login?
Is SHA-1 secure for password storage?
","2559","<c#><hash><passwords><salt>","3","2","3","2013-01-23 11:30:55","14473968","1","2","-1","","2017-05-23 12:32:06","2013-01-23 06:38:47","2013-01-23 11:02:20"
"14473836","which algorithm preferred for hashing passwords C#?","
Possible Duplicate:
What algorithm should I use to hash passwords into my database? 

I am new to this hashing on password. I read the hashing + salt make passwords really safe. But still confused which hashing algorithm should I use as there are many like.
MD5CryptoServiceProvider
SHA1Managed
SHA256Managedetc. 
How can I decide which one is good for me or all are equal. Can I pick up anyone blindly?
","MD5:

In 1996, a flaw was found with the design of MD5, and while it was
  not a clearly fatal weakness, cryptographers began recommending the
  use of other algorithms, such as SHA-1—which has since been found to
  be vulnerable as well.

SHA1:

In 2005, cryptanalysts found attacks on SHA-1 suggesting that the
  algorithm might not be secure enough for ongoing use

SHA2 which SHA256 is a type of does not have a known vulnerability as of the moment of writing.
","2559","<c#><hash><passwords><salt>","3","4","3","2013-01-23 11:30:55","14473968","1","2","-1","","2017-05-23 12:32:06","2013-01-23 06:38:47","2013-01-23 11:02:20"
"14473836","which algorithm preferred for hashing passwords C#?","
Possible Duplicate:
What algorithm should I use to hash passwords into my database? 

I am new to this hashing on password. I read the hashing + salt make passwords really safe. But still confused which hashing algorithm should I use as there are many like.
MD5CryptoServiceProvider
SHA1Managed
SHA256Managedetc. 
How can I decide which one is good for me or all are equal. Can I pick up anyone blindly?
","Fast hash algorithms like MD5, SHA-1 or even SHA-256 are not good choices to hash passwords, because they are much too fast and can be brute-forced too easily. One can calculate about 3 Giga SHA-1 values per second with common hardware in 2013.
Instead you can use a slow key-derivation function like BCrypt or PBKDF2. CSharp has native support for PBKDF2, it can be implemented with the Rfc2898DeriveBytes class, an example you can find here.
Also easy to use is this BCrypt library. Often people are not sure if it is safe to use such libraries, but i don't think there are arguments against using it. As long as the library returns the correct value and generates the salt correctly, it should be fine, because the security comes from the algorithm and not from the implementation.
","2559","<c#><hash><passwords><salt>","3","3","3","2013-01-23 11:30:55","14473968","1","2","-1","","2017-05-23 12:32:06","2013-01-23 06:38:47","2013-01-23 11:02:20"
"7858454","Android: Do the random SALT bytes passed to AESObfuscator need to stay the same?","I'm implementing licensing in my Android application, and there is an array of 20 bytes that need to be passed into the AESObfuscator that is passed to the ServerManagedPolicy object. Can this array be generated randomly every time the code is ran, or does it have to be hardcoded?
Right now I'm randomly generating the salt like this:
private static final byte[] SALT;

static {
    Random random = new Random();
    random.setSeed(System.currentTimeMillis());
    byte[] buf = new byte[20];
    random.nextBytes(buf);
    SALT = buf;
}

","A bit late, but yes: the salt must remain the same to be able to decrypt the stored values again.
Basically Salting means randomizing a passphrase to make dictionary attacks a lot harder. How does a salt protect against a dictionary attack? 
Update (one year later :) By the way: use a SecureRandom generator for the bytes in stead of a Random generator - it's better (I could go into detail, but you can find that elsewhere as well. http://docs.oracle.com/javase/7/docs/api/java/security/SecureRandom.html)
","2528","<android><obfuscation><salt>","7","6","1","2013-04-16 09:27:27","8152040","0","2","413414","","2011-10-22 09:09:30","2011-10-22 09:03:04",""
"33125624","How to use salt with md5 technique","I have coded md5 technique to store the password in hash but I want to implement it with salt.
here is my register form php with md5 function which is working perfectly.
<?php
require(""common.php"");
if (! empty ( $_POST )) {
    if (empty ( $_POST ['username'] )) {
        die ( ""Please enter a username."" );
    }
    if (empty ( $_POST ['password'] )) {
        die ( ""Please enter a password."" );
    }
    $query = ""SELECT 1 FROM User WHERE username = :username"";
    $query_params = array (
            ':username' => $_POST ['username'] 
    );
    try {
        $stmt = $db->prepare ( $query );
        $result = $stmt->execute ( $query_params );
    } catch ( PDOException $ex ) {
        die ( ""Failed to run query: "" . $ex->getMessage () );
    }
    $row = $stmt->fetch ();
    if ($row) {
        die ( ""This user name is already registered"" );
    }
    $password = md5($_POST['password']);
    $query = ""INSERT INTO User (username, password) VALUES (:username, :password)"";
    $query_params = array (
            ':username' => $_POST ['username'],
            ':password' => $password 
    );
    try {
        $stmt = $db->prepare ( $query );
        $result = $stmt->execute ( $query_params );
    } catch ( PDOException $ex ) {
        die ( ""Failed to run query: "" . $ex->getMessage () );
    }
    header ( ""Location: login.php"" );
    die ( ""Redirecting to login.php"" );
}
?>

","Md5 is the old method for storing passwords.Please have a look at the below links for Hashing password using salt
https://crackstation.net/hashing-security.htm
http://www.sitepoint.com/hashing-passwords-php-5-5-password-hashing-api/
","2518","<php><hash><md5><salt>","0","0","3","2015-10-14 13:03:57","33126096","5","","1011527","","2015-10-14 13:02:23","2015-10-14 12:41:51",""
"33125624","How to use salt with md5 technique","I have coded md5 technique to store the password in hash but I want to implement it with salt.
here is my register form php with md5 function which is working perfectly.
<?php
require(""common.php"");
if (! empty ( $_POST )) {
    if (empty ( $_POST ['username'] )) {
        die ( ""Please enter a username."" );
    }
    if (empty ( $_POST ['password'] )) {
        die ( ""Please enter a password."" );
    }
    $query = ""SELECT 1 FROM User WHERE username = :username"";
    $query_params = array (
            ':username' => $_POST ['username'] 
    );
    try {
        $stmt = $db->prepare ( $query );
        $result = $stmt->execute ( $query_params );
    } catch ( PDOException $ex ) {
        die ( ""Failed to run query: "" . $ex->getMessage () );
    }
    $row = $stmt->fetch ();
    if ($row) {
        die ( ""This user name is already registered"" );
    }
    $password = md5($_POST['password']);
    $query = ""INSERT INTO User (username, password) VALUES (:username, :password)"";
    $query_params = array (
            ':username' => $_POST ['username'],
            ':password' => $password 
    );
    try {
        $stmt = $db->prepare ( $query );
        $result = $stmt->execute ( $query_params );
    } catch ( PDOException $ex ) {
        die ( ""Failed to run query: "" . $ex->getMessage () );
    }
    header ( ""Location: login.php"" );
    die ( ""Redirecting to login.php"" );
}
?>

","Md5 is considered insecure and is no more used, You can use password_hash which uses salt by default to generate strong password hashing. It's easier to use just couple of lines and it's done. Remember do not use your own salt with password_hash salt option has been deprecated as of PHP 7.0.0. now it is preferred to use the salt that is generated by default. 
","2518","<php><hash><md5><salt>","0","1","3","2015-10-14 13:03:57","33126096","5","","1011527","","2015-10-14 13:02:23","2015-10-14 12:41:51",""
"33125624","How to use salt with md5 technique","I have coded md5 technique to store the password in hash but I want to implement it with salt.
here is my register form php with md5 function which is working perfectly.
<?php
require(""common.php"");
if (! empty ( $_POST )) {
    if (empty ( $_POST ['username'] )) {
        die ( ""Please enter a username."" );
    }
    if (empty ( $_POST ['password'] )) {
        die ( ""Please enter a password."" );
    }
    $query = ""SELECT 1 FROM User WHERE username = :username"";
    $query_params = array (
            ':username' => $_POST ['username'] 
    );
    try {
        $stmt = $db->prepare ( $query );
        $result = $stmt->execute ( $query_params );
    } catch ( PDOException $ex ) {
        die ( ""Failed to run query: "" . $ex->getMessage () );
    }
    $row = $stmt->fetch ();
    if ($row) {
        die ( ""This user name is already registered"" );
    }
    $password = md5($_POST['password']);
    $query = ""INSERT INTO User (username, password) VALUES (:username, :password)"";
    $query_params = array (
            ':username' => $_POST ['username'],
            ':password' => $password 
    );
    try {
        $stmt = $db->prepare ( $query );
        $result = $stmt->execute ( $query_params );
    } catch ( PDOException $ex ) {
        die ( ""Failed to run query: "" . $ex->getMessage () );
    }
    header ( ""Location: login.php"" );
    die ( ""Redirecting to login.php"" );
}
?>

","You should not use MD5 or SHA1 for hashing (even with a salt) as they are proven to be insecure. 

Using salted md5 for passwords is a bad idea. Not because of MD5's cryptographic weaknesses, but because it's fast. This means that an attacker can try billions of candidate passwords per second on a single GPU.

PHP now provides a simple way to use the far more secure bcrypt hash through the password_hash function, which not only generates a strong hash, but generates a random salt as well
$password = password_hash($_POST['password'], PASSWORD_DEFAULT);

","2518","<php><hash><md5><salt>","0","1","3","2015-10-14 13:03:57","33126096","5","","1011527","","2015-10-14 13:02:23","2015-10-14 12:41:51",""
"16265046","Login with custom Java EE Realm","I've created a Java EE Application with glassfish and netbeans.
I installed the custom flexible jdbc Realm from here. 
I followed all the instructions and used the properties which are shown below(both to default and server-config)
datasource.jndi =    jdbc/e-health
sql.seed   = select salt from users where username = ?
sql.groups = select groupname from groups where username =  ?
sql.password = select password from users where username = ?
password.encoding = BASE64
password.digest = SHA-256
jaas.context = myRealm

My first question is where should i create the realm, in default-config or in server-config?
I also created the database(E-Health) with tables: users, groups
users: username, password, salt
groups: groupname, username(fk->users.username)

The reason that i want to use this realm is that i want to encrypt password with salt and with jdbc realm i don't have this option!
My problem is i cant login.
I use net beans IDE and created the login and loginError pages:
LOGIN.JSP :
<%@page contentType=""text/html"" pageEncoding=""UTF-8""%>
<!DOCTYPE html>
<html>
<head>
<meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8"">
<title>Login Page</title>
</head>
<body>
<form action=""j_security_check"" method=""POST"">
Username:<input type=""text"" name=""j_username""><br>
Password:<input type=""password"" name=""j_password"">
<input type=""submit"" value=""Login"">
</form>
</body>
</html>    

I've created a user using this code in the servlet:
if(userPath.equals(""/createUser""))
      {

            String Type = request.getParameter(""user_type"");

            String Id = request.getParameter(""amka"");
            String Name = request.getParameter(""name"");
            String Surname = request.getParameter(""surname"");
            String Nickname = request.getParameter(""nickname"");
            String Pass = request.getParameter(""password"");
            String Email = request.getParameter(""e-mail"");
            String City = request.getParameter(""city"");
            String Street = request.getParameter(""street"");
            String Phone = request.getParameter(""phone"");
            String At = request.getParameter(""at"");
            String Spec = request.getParameter(""spec"");


            //byte[] b_pass = Pass.getBytes(""UTF-8"");                //Κρυπτογράφηση password
            String salt = null;
            String hash=null;

           if (""doctor"".equals(Type))

           {

        //   ID = Integer.parseInt(Id);
               MessageDigest md;
    try {

            Random r = SecureRandom.getInstance(""SHA1PRNG""); 
            salt=new BigInteger(130, r).toString(32);  
            md = MessageDigest.getInstance(""SHA-256""); 
            md.update(salt.getBytes(""UTF-8"")); 
            byte[] digest = md.digest();
            salt=Base64.encodeBase64String(digest);

            md.update(Pass.concat(salt).getBytes(""UTF-8"")); 
            digest = md.digest();
            hash=Base64.encodeBase64String(digest); // μετατροπή σε Base64



            } 
              catch (NoSuchAlgorithmException ex) {
                Logger.getLogger(Servlet.class.getName()).log(Level.SEVERE, null, ex);
            }

           currentUser.setPassword(hash);
           currentUser.setUsername(Nickname);
           currentUser.setSalt(salt);
           UsersFacade.create(currentUser);

           currentGroup.setUsername(currentUser);
           currentGroup.setGroupname(Type);
           GroupsFacade.create(currentGroup);

           /*
           currentDoc.setIddoctors(ID);
           currentDoc.setName(Name);
            currentDoc.setSurname(Surname);
            currentDoc.setNickname(Nickname);
            currentDoc.setEmail(Email);
            currentDoc.setCity(City);
            currentDoc.setStreet(Street);
            currentDoc.setPhone(Phone);
            currentDoc.setSpec(Spec);
            DoctorsFacade.create(currentDoc);
             */

          }

The groups and roles i have created are doctors,pharms,micros,patients,admins.
I've created the roles in the web.xml and glassfish-web.xml:
WEB.XML
<session-config>
    <session-timeout>
        1
    </session-timeout>
</session-config>
<error-page>
    <error-code>500</error-code>
    <location>/WEB-INF/view/error.jsp</location>
</error-page>
<security-constraint>
    <display-name>AdminOnly</display-name>
    <web-resource-collection>
        <web-resource-name>admin</web-resource-name>
        <description/>
        <url-pattern>/admin/*</url-pattern>
    </web-resource-collection>
    <auth-constraint>
        <role-name>admins</role-name>
    </auth-constraint>
</security-constraint>
<security-constraint>
    <display-name>DocOnly</display-name>
    <web-resource-collection>
        <web-resource-name>doctor1</web-resource-name>
        <url-pattern>/view/doc_index.jsp</url-pattern>
    </web-resource-collection>
    <web-resource-collection>
        <web-resource-name>doctor2</web-resource-name>
        <description/>
        <url-pattern>/view/doctor.jsp</url-pattern>
    </web-resource-collection>
    <web-resource-collection>
        <web-resource-name>doctor3</web-resource-name>
        <description/>
        <url-pattern>/view/history.jsp</url-pattern>
    </web-resource-collection>
    <auth-constraint>
        <description/>
        <role-name>doctors</role-name>
    </auth-constraint>
</security-constraint>
<security-constraint>
    <display-name>PharmOnly</display-name>
    <web-resource-collection>
        <web-resource-name>pharm</web-resource-name>
        <description/>
        <url-pattern>/view/pharm.jsp</url-pattern>
    </web-resource-collection>
    <auth-constraint>
        <description/>
        <role-name>pharms</role-name>
    </auth-constraint>
</security-constraint>
<security-constraint>
    <display-name>MicroOnly</display-name>
    <web-resource-collection>
        <web-resource-name>micro</web-resource-name>
        <description/>
        <url-pattern>/view/micro.jsp</url-pattern>
    </web-resource-collection>
    <auth-constraint>
        <description/>
        <role-name>micros</role-name>
    </auth-constraint>
</security-constraint>
<security-constraint>
    <display-name>PatOnly</display-name>
    <web-resource-collection>
        <web-resource-name>patient</web-resource-name>
        <description/>
        <url-pattern>/view/patient.jsp</url-pattern>
    </web-resource-collection>
    <auth-constraint>
        <description/>
        <role-name>patients</role-name>
    </auth-constraint>
</security-constraint>
<login-config>
    <auth-method>FORM</auth-method>
    <realm-name>myRealm</realm-name>
    <form-login-config>
        <form-login-page>/login.jsp</form-login-page>
        <form-error-page>/loginError.html</form-error-page>
    </form-login-config>
</login-config>
<security-role>
    <description/>
    <role-name>admins</role-name>
</security-role>
<security-role>
    <description/>
    <role-name>doctors</role-name>
</security-role>
<security-role>
    <description/>
    <role-name>pharms</role-name>
</security-role>
<security-role>
    <description/>
    <role-name>micros</role-name>
</security-role>
<security-role>
    <description/>
    <role-name>patients</role-name>
</security-role>
<resource-ref>
    <res-ref-name>jdbc/e-health</res-ref-name>
    <res-type>javax.sql.DataSource</res-type>
    <res-auth>Container</res-auth>
    <res-sharing-scope>Shareable</res-sharing-scope>
</resource-ref>
</web-app>

GLASSFISH-WEB.XML
<glassfish-web-app error-url="""">
<security-role-mapping>
<role-name>doctors</role-name>
<group-name>doctors</group-name>
</security-role-mapping>
<security-role-mapping>
<role-name>micros</role-name>
<group-name>micros</group-name>
</security-role-mapping>
<security-role-mapping>
<role-name>pharms</role-name>
<group-name>pharms</group-name>
</security-role-mapping>
 <security-role-mapping>
<role-name>patients</role-name>
<group-name>patients</group-name>
</security-role-mapping>
<security-role-mapping>
<role-name>admins</role-name>
<group-name>admins</group-name>
</security-role-mapping>
<class-loader delegate=""true""/>
<jsp-config>
<property name=""keepgenerated"" value=""true"">
  <description>Keep a copy of the generated servlet class' java code.</description>
</property>
</jsp-config>
</glassfish-web-app>

For start i've created this annotation in the servlet:
@ServletSecurity(
@HttpConstraint(rolesAllowed = {""doctors""}) 
)             

And here's the credentials:
Username:John
Password(with salt):kwkBo2sKjPHPvqFTQReMGS8Cbj8PbAoFxvuk
Salt:4b8mHanRWrI9HitaES4s8x5F05WWFz3IN3+Hjp7XtRg=
and
Username: John
Groupname: doctors 
The encrypted password is: 12345
What have i done wrong?
I put in the form the credentials: John/12345 and error page is shown.
Do i have to decrypt some way the password? Doesn't this work by the realm itself?
","","2500","<java-ee><glassfish><salt><sha256><jdbcrealm>","0","","0","2013-04-30 14:27:38","","6","4","","","","2013-04-28 16:30:54",""
"7311183","Salt a key for secure encryption Cocoa?","I was reading a tutorial on how to salt a key to make your encryption secure, but couldn't make much of it. I don't know a lot about cryptography, and need some help. I am using commoncrypto to encrypt files, and am done, except for the fact that it isn't secure... 
This is what I have:
- (NSData *)AES256EncryptWithKey:(NSString *)key
{
   // 'key' should be 32 bytes for AES256, will be null-padded otherwise
   char keyPtr[kCCKeySizeAES256 + 1]; // room for terminator (unused)
   bzero( keyPtr, sizeof( keyPtr ) ); // fill with zeroes (for padding)

    NSLog(@""You are encrypting something..."");

   // fetch key data
   [key getCString:keyPtr maxLength:sizeof( keyPtr ) encoding:NSUTF8StringEncoding];

   NSUInteger dataLength = [self length];

   //See the doc: For block ciphers, the output size will always be less than or 
   //equal to the input size plus the size of one block.
   //That's why we need to add the size of one block here
   size_t bufferSize = dataLength + kCCBlockSizeAES128;
   void *buffer = malloc( bufferSize );

   size_t numBytesEncrypted = 0;
   CCCryptorStatus cryptStatus = CCCrypt( kCCEncrypt, kCCAlgorithmAES128,     kCCOptionPKCS7Padding,
                                      keyPtr, kCCKeySizeAES256,
                                      NULL /* initialization vector (optional) */,
                                      [self bytes], dataLength, /* input */
                                      buffer, bufferSize, /* output */
                                      &numBytesEncrypted );
   if( cryptStatus == kCCSuccess )
   {
      //the returned NSData takes ownership of the buffer and will free it on deallocation
  return [NSData dataWithBytesNoCopy:buffer length:numBytesEncrypted];

   }

   free( buffer ); //free the buffer
   return nil;
}

If someone can help me out, and show me exactly how I would implement salt, that would be great! Thanks again!
","Salting just involves adding a random string to the end of the input key.
So generate a random string of some length:
Generate a random alphanumeric string in cocoa
And then just append it to the key using:
NSString *saltedKey = [key stringByAppendingString:salt];

Unless salt is being used in a different way in the article you read this should be correct.
","2497","<cocoa><encryption><key><aes><salt>","7","1","3","2013-10-05 10:47:28","7539689","9","3","","","","2011-09-05 17:35:00",""
"7311183","Salt a key for secure encryption Cocoa?","I was reading a tutorial on how to salt a key to make your encryption secure, but couldn't make much of it. I don't know a lot about cryptography, and need some help. I am using commoncrypto to encrypt files, and am done, except for the fact that it isn't secure... 
This is what I have:
- (NSData *)AES256EncryptWithKey:(NSString *)key
{
   // 'key' should be 32 bytes for AES256, will be null-padded otherwise
   char keyPtr[kCCKeySizeAES256 + 1]; // room for terminator (unused)
   bzero( keyPtr, sizeof( keyPtr ) ); // fill with zeroes (for padding)

    NSLog(@""You are encrypting something..."");

   // fetch key data
   [key getCString:keyPtr maxLength:sizeof( keyPtr ) encoding:NSUTF8StringEncoding];

   NSUInteger dataLength = [self length];

   //See the doc: For block ciphers, the output size will always be less than or 
   //equal to the input size plus the size of one block.
   //That's why we need to add the size of one block here
   size_t bufferSize = dataLength + kCCBlockSizeAES128;
   void *buffer = malloc( bufferSize );

   size_t numBytesEncrypted = 0;
   CCCryptorStatus cryptStatus = CCCrypt( kCCEncrypt, kCCAlgorithmAES128,     kCCOptionPKCS7Padding,
                                      keyPtr, kCCKeySizeAES256,
                                      NULL /* initialization vector (optional) */,
                                      [self bytes], dataLength, /* input */
                                      buffer, bufferSize, /* output */
                                      &numBytesEncrypted );
   if( cryptStatus == kCCSuccess )
   {
      //the returned NSData takes ownership of the buffer and will free it on deallocation
  return [NSData dataWithBytesNoCopy:buffer length:numBytesEncrypted];

   }

   free( buffer ); //free the buffer
   return nil;
}

If someone can help me out, and show me exactly how I would implement salt, that would be great! Thanks again!
","How a random salt is normally used:
@Ca1icoJack is completely correct in saying that all you have to do is generate some random data and append it to the end.  The data is usually binary as opposed to alphanumeric though.  The salt is then stored unencrypted alongside each hashed password, and gets concatenated with the user's plaintext password in order to check the hash every time the password gets entered.
What the is the point of a SALT if it's stored unencrypted next to the hashed password?
Suppose someone gets access to your hashed passwords.  Human chosen passwords are fairly vulnerable to being discovered via rainbow tables.  Adding a hash means the rainbow table needs to not only include the values having any possible combination of alphanumeric characters a person might use, but also the random binary salt, which is fairly impractical at this point in time.  So, basically adding a salt means that a brute force attacker who has access to both the hashed password and the salt needs to both figure how how the salt was concatenated to the password (before or after, normally)  and brute force each password individually, since readily available rainbow tables don't include any random binary data.
Edit: But I said encrypted, not hashed:
Okay, I didn't read very carefully, ignore me.  Someone is going to have to brute-force the key whether it's salted or not with encryption.  The only discernable benefit I can see would be as that article says to avoid having the same key (from the user's perspective) used to encrypt the same data produce the same result.  That is useful in encryption for different reasons (encrypted messages tend to have repeating parts which could be used to help break the encryption more easily) but the commenters are correct in noting that it is normally not called an salt in this instance.
Regardless, the trick is to concatenate the salt, and store it alongside each bit of encrypted data.
","2497","<cocoa><encryption><key><aes><salt>","7","1","3","2013-10-05 10:47:28","7539689","9","3","","","","2011-09-05 17:35:00",""
"7311183","Salt a key for secure encryption Cocoa?","I was reading a tutorial on how to salt a key to make your encryption secure, but couldn't make much of it. I don't know a lot about cryptography, and need some help. I am using commoncrypto to encrypt files, and am done, except for the fact that it isn't secure... 
This is what I have:
- (NSData *)AES256EncryptWithKey:(NSString *)key
{
   // 'key' should be 32 bytes for AES256, will be null-padded otherwise
   char keyPtr[kCCKeySizeAES256 + 1]; // room for terminator (unused)
   bzero( keyPtr, sizeof( keyPtr ) ); // fill with zeroes (for padding)

    NSLog(@""You are encrypting something..."");

   // fetch key data
   [key getCString:keyPtr maxLength:sizeof( keyPtr ) encoding:NSUTF8StringEncoding];

   NSUInteger dataLength = [self length];

   //See the doc: For block ciphers, the output size will always be less than or 
   //equal to the input size plus the size of one block.
   //That's why we need to add the size of one block here
   size_t bufferSize = dataLength + kCCBlockSizeAES128;
   void *buffer = malloc( bufferSize );

   size_t numBytesEncrypted = 0;
   CCCryptorStatus cryptStatus = CCCrypt( kCCEncrypt, kCCAlgorithmAES128,     kCCOptionPKCS7Padding,
                                      keyPtr, kCCKeySizeAES256,
                                      NULL /* initialization vector (optional) */,
                                      [self bytes], dataLength, /* input */
                                      buffer, bufferSize, /* output */
                                      &numBytesEncrypted );
   if( cryptStatus == kCCSuccess )
   {
      //the returned NSData takes ownership of the buffer and will free it on deallocation
  return [NSData dataWithBytesNoCopy:buffer length:numBytesEncrypted];

   }

   free( buffer ); //free the buffer
   return nil;
}

If someone can help me out, and show me exactly how I would implement salt, that would be great! Thanks again!
","dYhG9pQ1qyJfIxfs2guVoU7jr9oniR2GF8MbC9mi
Enciphering text
AKA jumbling it around, to try and make it indecipherable. This is the game you play in cryptography. To do this, you use deterministic functions.
Encrypting involves using a function which takes two parameters: usually a short, fixed length one, and an arbitrary length one. It produces output the same size as the second parameter.
We call the first parameter the key; the second, the plaintext; and the output, the ciphertext.
This will have an inverse function (which is sometimes the same one), which has the same signature, but given instead ciphertext will return the plaintext (when using the same key).
Obviously the property of a good encryption function is that the plaintext is not easily determinable from the ciphertext, without knowing the key. An even better one will produce ciphertext that is indistinguishable from random noise.
Hashing involves a function which takes one parameter, of arbitrary size, and returns an output of fixed size. Here, the goal is that given a particular output, it should be hard to find any input that will produce it. It is a one-way function, so it has no inverse. Again, it's awesome if the output looks completely random.
The problem with determinism
The above is all very well and good, but we have a problem with our ultimate goals of indecipherability when designing implementations of these functions: they're deterministic! That's no good for producing random output.
While we can design functions that still produce very random-looking output, thanks to confusion and diffusion, they're still going to give the same output given the same input. We both need this, and don't like it. We would never be able to decipher anything with a non-deterministic crypto system, but we don't like repeatable results! Repeatable means analysable... determinable (huh.). We don't want the enemy to see the same two ciphertexts and know that they came from the same input, that would be giving them information (and useful techniques for breaking crypto-systems, like rainbow tables). How do we solve this problem?
Enter: some random stuff inserted at the start.
That's how we defeat it! We prepend (or sometimes better, append), some unique random input with our actual input, everytime we use our functions. This makes our deterministic functions give different output even when we give the same input. We send the unique random input (when hashing, called a salt; when encrypting, called an Initialisation Vector, or IV) along with the ciphertext. It's not important whether the enemy sees this random input; our real input is already protected by our key (or the one-way hash). All that we were actually worried about is that our output is different all the time, so that it's non-analysable; and we've achieved this.
How do I apply this knowledge?
OK. So everybody has their app, and within it their cryptosystem protecting parts of the app.
Now we don't want to go reinventing the wheel with cryptosystems (Worst. Idea. Ever.), so some really knowledgable people have already come up with good components that can build any system (i.e, AES, RSA, SHA2, HMAC, PBKDF2). But if everyone is using the same components, then that still introduces some repeatability! Fortunately, if everyone uses different keys, and unique initial random inputs, in their own cryptosytem, they should be fine.
Enough already! Talk about implementation!
Let's talk about your example. You're wanting to do some simple encryption. What do we want for that? Well, A) we want a good random key, and B) we want a good random IV. This will make our ciphertext as secure as it can get. I can see you haven't supplied a random IV - it's better practice to do so. Get some bytes from a [secure/crypto]-random source, and chuck it in. You store/send those bytes along with the ciphertext. Yes, this does mean that the ciphertext is a constant length bigger than the plaintext, but it's a small price to pay.
Now what about that key? Sometimes we want a remember-able key (like.. a password), rather than a nice random one that computers like (if you have the option to just use a random key - do that instead). Can we get a compromise? Yes! Should we translate ASCII character passwords into bytes to make the key? HELL NO!
ASCII characters aren't very random at all (heck, they generally only use about 6-7 bits out of 8). If anything, what we want to do is make our key at least look random. How do we do this? Well, hashing happens to be good for this. What if we want to reuse our key? We'll get the same hash... repeatability again!
Luckily, we use the other form of unique random input - a salt. Make a unique random salt, and append that to your key. Then hash it. Then use the bytes to encrypt your data. Add the salt AND the IV along with your ciphertext when you send it, and you should be able to decrypt on the end.
Almost done? NO! You see the hashing solution I described in the paragraph above? Real cryptographers would call it amateurish. Would you trust a system which is amateurish? No! Am I going to discuss why it's amateurish? No, 'cus you don't need to know. Basically, it's just not REALLY-SUPER-SCRAMBLED enough for their liking.
What you need to know is that they've already devised a better system for this very problem. It's called PBKDF2. Find an implementation of it, and [learn to] use that instead.
Now all your data is secure.
","2497","<cocoa><encryption><key><aes><salt>","7","15","3","2013-10-05 10:47:28","7539689","9","3","","","","2011-09-05 17:35:00",""
"46380704","Rendering exception occurred: Jinja variable 'dict object' has no attribute 'data'","Getting error while changing content in nginx.conf
/etc/salt/master.d/reactor.conf
reactor:
  - 'salt/beacon/*/inotify//etc/nginx/nginx.conf':
    - /srv/reactor/web-remediate.sls

/srv/reactor/web-remediate.sls
{% if data['data']['id'] %}
  web_state_run:
    local.state.apply:
      - tgt: {{ data['data']['id'] }}
      - arg:
        - webserver.nginx
{% endif %}

salt-master -l debug
log
[DEBUG   ] Initializing new IPCClient for path: /var/run/salt/master/master_event_pull.ipc
[DEBUG   ] Sending event: tag = salt/beacon/minion1.vagrant.net/inotify//etc/nginx/nginx.conf; data = {'path': '/etc/nginx/nginx.conf', '_stamp': '2017-09-23T12:21:17.586647', 'id': 'minion1.vagrant.net', 'change': 'IN_MODIFY'}
[DEBUG   ] Gathering reactors for tag salt/beacon/minion1.vagrant.net/inotify//etc/nginx/nginx.conf
[DEBUG   ] Compiling reactions for tag salt/beacon/minion1.vagrant.net/inotify//etc/nginx/nginx.conf
[DEBUG   ] compile template: /srv/reactor/web-remediate.sls
[DEBUG   ] Jinja search path: ['/var/cache/salt/master/files/base']
[ERROR   ] Rendering exception occurred: Jinja variable 'dict object' has no attribute 'data'
[ERROR   ] Failed to render ""/srv/reactor/web-remediate.sls"": 
Traceback (most recent call last):
  File ""/usr/lib/python2.7/dist-packages/salt/utils/reactor.py"", line 71, in render_reaction
    data=data)
  File ""/usr/lib/python2.7/dist-packages/salt/state.py"", line 329, in render_template
    **kwargs)
  File ""/usr/lib/python2.7/dist-packages/salt/template.py"", line 95, in compile_template
    ret = render(input_data, saltenv, sls, **render_kwargs)

  File ""/usr/lib/python2.7/dist-packages/salt/renderers/jinja.py"", line 70, in render
    **kws)
  File ""/usr/lib/python2.7/dist-packages/salt/utils/templates.py"", line 164, in render_tmpl
    output = render_str(tmplstr, context, tmplpath)
  File ""/usr/lib/python2.7/dist-packages/salt/utils/templates.py"", line 428, in render_jinja_tmpl
    buf=tmplstr)
SaltRenderError: Jinja variable 'dict object' has no attribute 'data'

","I have modified the reactor configuration file's condition line from {% if data['data']['id'] %} to {% if data['id'] %} in /srv/reactor/web-remediate.sls and now the reactor is working fine.
just i assumed that the below line's data dictionary has contain 'id' key only, so i skipped ['data']
 [DEBUG   ] Sending event: tag = salt/beacon/minion1.vagrant.net/inotify//etc/nginx/nginx.conf; data = {'path': '/etc/nginx/nginx.conf', '_stamp': '2017-09-23T12:21:17.586647', 'id': 'minion1.vagrant.net', 'change': 'IN_MODIFY'}

modification:
 From:

  {% if data['data']['id'] %}
   web_state_run:
     local.state.apply:
       - tgt: {{ data['data']['id'] }}
       - arg:
         - webserver.nginx
 {% endif %}


 To:

 {% if data['id'] %}
 web_state_run:
   local.state.apply:
     - tgt: {{ data['id'] }}
     - arg:
       - webserver.nginx
 {% endif %}

output:
 Sending event: tag = salt/beacon/ranjith3.salt.az/inotify//etc/nginx            /nginx.conf; data = {'path': '/etc/nginx/nginx.conf', '_stamp': '2017-09-28T11:03:55.261016', 'id': 'ranjith3.salt.az', 'change': 'IN_IGNORED'}
 [DEBUG   ] Gathering reactors for tag salt/beacon/ranjith3.salt.az/inotify//etc/nginx/nginx.conf
 [DEBUG   ] Compiling reactions for tag salt/beacon/ranjith3.salt.az/inotify//etc/nginx/nginx.conf
 [DEBUG   ] compile template: /srv/reactor/web-remediate.sls
 [DEBUG   ] Jinja search path: ['/var/cache/salt/master/files/base']
 [PROFILE ] Time (in seconds) to render '/srv/reactor/web-remediate.sls' using 'jinja' renderer: 0.00302600860596
 [DEBUG   ] Rendered data from file: /srv/reactor/web-remediate.sls:

 web_state_run:
   local.state.apply:
     - tgt: ranjith3.salt.az
     - arg:
       - webserver.nginx

","2495","<nginx><jinja2><salt>","0","1","1","2017-09-28 12:17:29","","0","","2830850","","2017-09-24 05:48:35","2017-09-23 14:36:05",""
"20729137","MD5/ SHA1 hash with salt using openssl in c programming","I need a sample code that show me how to hash a string with salt using openssl library.
I should mention that I know how to do this without salt, as you can see in this code:
#include <openssl/sha.h>

bool simpleSHA256(void* input, unsigned long length, unsigned char* md)
{
    SHA256_CTX context;
    if(!SHA256_Init(&context))
        return false;

    if(!SHA256_Update(&context, (unsigned char*)input, length))
        return false;

    if(!SHA256_Final(md, &context))
        return false;

    return true;
}

and my question is about adding salt to the hash function, something like this, but using openssl library:
char salt[2];  /* Salt for the crypt() function  */
const char *salt_chars = ""abcdefghijklmnopqrstuvwxyz"" /* Range of character supported   */
                         ""ABCDEFGHIJKLMNOPQRSTUVWXYZ""  /* as a value for salt in crypt() */
                         ""0123456789"";
char password1[BUFSIZ], *buf;

/* Build salt */
srand(time(NULL));
salt[0] = salt_chars[rand() % 62];
salt[1] = salt_chars[rand() % 62];

buf = crypt(password, salt);

Thanks
","Salting is just concatenating salt to data in before applying hash function.
Salt should be random and never twice the same, goal is to defeat precomputed rainbow tables. Salt should be stored together with the hash when checking of data ( password ) is done.
Based on your code, concanating salt in front of data is (untested whatsoever) :
bool simpleSHA256(void * salt, unsigned long salt_length, void* input, unsigned long length, unsigned char* md) 
{
    SHA256_CTX context;
    if(!SHA256_Init(&context))
        return false;

    // first apply salt
    if(!SHA256_Update(&context, (unsigned char*)salt, salt_length))
        return false;

    // continue with data...
    if(!SHA256_Update(&context, (unsigned char*)input, length))
        return false;

    if(!SHA256_Final(md, &context))
        return false;

    return true; 
}

","2486","<c><hash><openssl><salt>","0","1","1","2013-12-22 13:40:59","20730058","1","","892568","","2013-12-22 12:55:33","2013-12-22 11:57:20",""
"5818517","Do I change salt value when changing a user password?","Suppose I store a random salt value for each user. Do I have to generate a new salt value when that user password is changed or do I use the same value for the whole lifetime of that user account?
","If the password wasn't weak (and the attacker doesn't know the salt), using a different salt value won't improve your password security if the password is changed, so you can keep the same.
The purpose of salt value is to ensure that different user with the same password don't have the same password hash.
Anyway, suppose that an attacker has previously cracked the user password and knows the salt value. If you change only the password, the attacker could do less computation to break it again, because he already knows the salt.
So maybe it's a good idea changing the salt while setting a new password.
","2482","<security><hash><salt><password-hash>","14","2","2","2014-01-30 09:43:12","5819704","0","3","445517","","2014-01-30 09:43:12","2011-04-28 12:22:40",""
"5818517","Do I change salt value when changing a user password?","Suppose I store a random salt value for each user. Do I have to generate a new salt value when that user password is changed or do I use the same value for the whole lifetime of that user account?
","You should change the salt. The salt is designed to be unique (as most as possible) for all password instances.
If you use the same salt for the old and the new password, then an attacker who sees the old hashed password and the new hashed password can attack both for a cost which is less than twice the cost of attacking one. This is exactly the kind of thing that the salt was designed to avoid (and the salt has no other usage than that).
Of course, the old password, being old, is no longer a valid way to enter your system, but since users tend to reuse passwords, the old password might still be worthwhile (from the attacker point of view). In particular, the user may reuse that old password when he will change his password again (this is what most users do when faced with a system which requires regular password changing: they alternate between two passwords).
","2482","<security><hash><salt><password-hash>","14","23","2","2014-01-30 09:43:12","5819704","0","3","445517","","2014-01-30 09:43:12","2011-04-28 12:22:40",""
"14372183","How to generate a random salt for hashing passwords","
Possible Duplicate:
Secure hash and salt for PHP passwords 

I want to generate a random salt and then store it along with the password in the user database.  So something like this I think.
$salt = //random salt code
$hpassword = crypt($password,$salt)

","Try Hashing an existing field (such as username) and use that for the salt.
Try here: http://en.wikipedia.org/wiki/PBKDF2
","2425","<php><hash><passwords><salt><saltedhash>","0","0","2","2013-01-17 08:10:19","","2","","-1","","2017-05-23 12:18:48","2013-01-17 04:23:03","2013-01-17 09:55:13"
"14372183","How to generate a random salt for hashing passwords","
Possible Duplicate:
Secure hash and salt for PHP passwords 

I want to generate a random salt and then store it along with the password in the user database.  So something like this I think.
$salt = //random salt code
$hpassword = crypt($password,$salt)

","Version 5.5 of PHP will have built-in support for BCrypt, the functions password_hash() and password_verify(). For PHP version 5.3.7 and later, there exists a compatibility pack, and there you can find a good implementation of how to create a salt using the function mcrypt_create_iv(), see lines 86 and 121.
Because of this compatibility pack, you should also consider to use this functions directly, instead of writing your own, here you can find an example. Especially the creation of the salt for BCrypt is a tricky thing, and one can make a lot of mistakes.
P.S. A salt should be as random as possible (read from the random source of the operating system), because that's the best way to make it unique and unpredictable on a deterministic computer.
","2425","<php><hash><passwords><salt><saltedhash>","0","1","2","2013-01-17 08:10:19","","2","","-1","","2017-05-23 12:18:48","2013-01-17 04:23:03","2013-01-17 09:55:13"
"27336798","Migrating legacy passwords to CakePHP 3","I'm reading the Auth documentation on Cake 3's website here, and I'm still slightly confused on how to migrate my users' passwords to my new application.
It says to include the FallbackPasswordHasher class, but if that's the case, where do I place the salt for the legacy password (as it's different for the new site)? Other than that, everything seems fairly self-explanatory. 
I have a few different but related sites that I'm consolidating into one website that will provide the same services across multiple businesses, so I need to import users' passwords from a variety of sites with different salts.
","It depends on the old hashing mechanism used
Depending on the mechanism and algorithm used, you may not need the old salt, as it's already attached to the hash, this is for example the case for passwords that were hashed using the Blowfish password hasher, or generally passwords hashed using crypt(), they can be validated by the Default password hasher.
So if that is the case for all your passwords, then you won't need to use the Fallback password hasher at all, but instead you can use just the Default password hasher, and rehash the passwords if necessary as shown in the docs.

Hashes without salt attached
For passwords hashed using mechanisms that do not attach the salt to the hash, like for example md5(), sha1(), mhash(), etc., you may need a custom legacy password hasher that incorporates the salt that has been used for the old passwords.
In most cases the WeakPassword hasher should do the job, which uses the old Cake 2 mechanisms and salt configuration, that is the global Security.salt option and the hashType hasher option.
See Cookbook > Authentication > Changing Hashing Algorithms
In case the weak hasher doesn't work for you because you've for example used a custom hasher in your old app, then you'll need a custom legacy hasher. An example for a legacy password hasher can be found in the docs, incorporating a salt should be as simple as for example
namespace App\Auth;

use Cake\Auth\AbstractPasswordHasher;

class LegacyPasswordHasher extends AbstractPasswordHasher {

    public function hash($password) {
        throw new \LogicException('You really should not use me!');
    }

    public function check($password, $hashedPassword) {
        // compare using the legacy salt
        return sha1($password . 'legacy-salt-here') === $hashedPassword;
    }

}

Note that in case of using the Fallback hasher there is no need for the legacy hasher to implement hash() to actually hash something, as you shouldn't use it for new hashes.

Different salts and/or algorithms per app
Having passwords originating from different sources where individual salts were used, can make things a little more complex.
There are various ways to solve this, and the most obvious one (as this is how the Fallback hasher is intended to work) would be to create a separate custom legacy hasher for every app, where the different hashers will use the appropriate salt and maybe also algorithm for the specific app.
All you need to do then is to rely on the Fallback hasher iterating over all your legacy hashers until one of them successfully validates the password.
'passwordHasher' => [
    'className' => 'Fallback',
    'hashers' => ['Default', 'LegacyApp1', 'LegacyApp2', 'LegacyApp3', /* ... */]
]

And that's all?
Basically, yes, the only problem here might be collisions, ie where the hasher for App X would successfully verify a password that would normally be evaluated as false by the hasher for App Y where the password originates from.
In case this is a scenario that may be likely for whatever reason (it should normally be rather unlikely even for the oh so weak MD5), you'd have to go for a solution that is more strict.
There are probably 10^Cake ways to solve such a problem, so since collisions should be rather unlikely, I'll stick with the in my opinion most basic one, which would be to modify the passwords before merging them so that they have an identifier added that identifies the old application, which can then be used by the legacy password hasher to choose the appropriate salt and algorithm.
An example
If for example the old password of App 1 would be
de1566cc82d9fda1ac39a28a45afe3671d9ef880

prepend app1 (using a unique separator that cannot occur in any of the old as well as the new password hashes) to make the password column contain something like
app1:::de1566cc82d9fda1ac39a28a45afe3671d9ef880

and in your legacy password hasher check for it doing something like
public function check($password, $hashedPassword) {
    if(strpos($hashedPassword, ':::') === false) {
        // this is not the password you are looking for
        return false;
    }
    // separate the identifier from the password
    list($app, $hashedPassword) = explode(':::', $hashedPassword, 2);

    // create comparision hash using app specific legacy algorithms and salts
    switch($app) {
        case 'app1':
            $compare = sha1($password . '375828236784563245364');
            break;

        case 'app2':
            $compare = md5('legacy-salt-for-app-2' . $password);
            break;,

        // etc

        default:
            return false;
    }

    return $compare === $hashedPassword;
}

As mentioned initially, there are a lot of ways to solve this problem, the one shown being only one of them, however this should give a hint what you would generally need to accomplish such a task.

ps, please note that all sample code here is untested!
","2386","<algorithm><hash><passwords><salt><cakephp-3.0>","6","7","2","2014-12-15 22:01:24","27338251","0","2","","","","2014-12-06 21:32:33",""
"27336798","Migrating legacy passwords to CakePHP 3","I'm reading the Auth documentation on Cake 3's website here, and I'm still slightly confused on how to migrate my users' passwords to my new application.
It says to include the FallbackPasswordHasher class, but if that's the case, where do I place the salt for the legacy password (as it's different for the new site)? Other than that, everything seems fairly self-explanatory. 
I have a few different but related sites that I'm consolidating into one website that will provide the same services across multiple businesses, so I need to import users' passwords from a variety of sites with different salts.
","For anybody curious as to how this resolved: here's what I did, based on ndm's answer.

Create a folder in src called 'Auth' (the same directory controller, model, etc. is in)
Inside that folder, create a file called 'LegacyPasswordHasher.php'. Use code analogous to the code below:
namespace App\Auth;

use Cake\Auth\AbstractPasswordHasher;

class LegacyPasswordHasher extends AbstractPasswordHasher {

    public function hash($password) {
        throw new \LogicException('You really should not use me!');
        // shamelessly copied from ndm's result - a 'hash' function is necessary for this class
    }

    public function check($password, $hashedPassword) {
        // compare using the legacy salt
        return sha1('myAwesomeAndStrangeSaltFromPreviousSite'.$password) === $hashedPassword;
    }

}


Keep in mind that some people prepend the salt and others append the salt. Make sure you know which it is or your Legacy login won't work.
After that, go into your src/AppController.php file and add this under your public $components array:
 'authenticate' => [
      'Form' => [
           'passwordHasher' => [
                'className' => 'Fallback',
                'hashers' => ['Default', 'Legacy']
                // 'Default' is your main one - I added 'Legacy' here
                // 'Legacy is called if 'Default' fails - refers to our php file we just made
            ]
       ]
 ]

After this, I built a function that redirects the user to a password reset page if their password is expired. I imported all of the old users to my website, mass set all of their password expiration dates to years ago, then tested one out by logging in with a password encrypted using my old site's salt. It logged me in perfectly, detected my expired password, redirected me to my 'set new password' page, and after they set their new password it encrypted it using the current encryption method for CakePHP 3 (sha256, I think).
Perfect! Thanks again to StackOverflow, ndm, and the internet.
","2386","<algorithm><hash><passwords><salt><cakephp-3.0>","6","2","2","2014-12-15 22:01:24","27338251","0","2","","","","2014-12-06 21:32:33",""
"3390105","Best way to store hashed passwords and salt values in the database - varchar or binary?","Once I've generated a salt and hashed the password (using bcrypt, etc) would it be best to store the results as a string or as a byte array in the database?  Are there any benefits either way?  Or is it a more subjective decision?
","VARCHAR should be sufficient. In my opinion VARCHAR data will be easier to consume and work with vs. binary.
The built in ASP.NET membership providers also store hashed passwords as VARCHAR fields.
","2325","<c#><hash><password-protection><salt>","3","2","3","2010-08-02 18:35:34","3390143","1","2","","","","2010-08-02 17:13:00",""
"3390105","Best way to store hashed passwords and salt values in the database - varchar or binary?","Once I've generated a salt and hashed the password (using bcrypt, etc) would it be best to store the results as a string or as a byte array in the database?  Are there any benefits either way?  Or is it a more subjective decision?
","If you use VARCHAR either make sure the bytes are either valid characters or force the bytes to ASCII before you save the hash and salt.  To make is safer from data corruption you may want to either encode the bytes in Base64 or Hexadecimal before you store them in the VARCHAR field.
For example, if you store the byte[] output from MD5 or SHA1 some of the byte values may be removed or replaced when the byte[] is converted to text is they are not valid UTF-8/Unicode.   This should not be as much of a problem if you are using ASCII but it could still cause data corruption.
If you don't want to deal with Hex you could use this base64 method Convert.ToBase64String that is built into the framework.
If you use VARBINARY and don't try to use and text encoding methods this issue should not exist, but could make comparing hashes more difficult.
...Note that if you use NVARCHAR this data corruption could still occur...
static void Main(string[] args)
{
    var salt = ""MySalt"";
    var password = ""MyPassword"";

    var saltedKey = CalculateHash(salt, password);

    Console.WriteLine(saltedKey);
    // MySalt$teGOpFi57nENIRifSW3m1RQndiU=

    var checkHash = CheckHash(saltedKey, password);
    Console.WriteLine(checkHash);
    // True
}

private static string CalculateHash(string saltOrSaltedKey, string password)
{
    var salt =
        saltOrSaltedKey.Contains('$')
        ? saltOrSaltedKey.Substring(0, saltOrSaltedKey.IndexOf('$') + 1)
        : saltOrSaltedKey + '$';

    var newKey = Encoding.UTF8.GetBytes(salt + password);

    var sha1 = SHA1.Create();
    sha1.Initialize();
    var result = sha1.ComputeHash(newKey);

    // if you replace this base64 version with one of the encoding 
    //   classes this will become corrupt due to nulls and other 
    //   control character values in the byte[]
    var outval = salt + Convert.ToBase64String(result);

    return outval;
}

private static bool CheckHash(string saltedKey, string password)
{
    var outval = CalculateHash(saltedKey, password);
    return outval == saltedKey;
}

","2325","<c#><hash><password-protection><salt>","3","2","3","2010-08-02 18:35:34","3390143","1","2","","","","2010-08-02 17:13:00",""
"3390105","Best way to store hashed passwords and salt values in the database - varchar or binary?","Once I've generated a salt and hashed the password (using bcrypt, etc) would it be best to store the results as a string or as a byte array in the database?  Are there any benefits either way?  Or is it a more subjective decision?
","most md5/sha1 libraries return hashes base64 encoded in which case varchar would suffice
","2325","<c#><hash><password-protection><salt>","3","1","3","2010-08-02 18:35:34","3390143","1","2","","","","2010-08-02 17:13:00",""
"17786670","What does MessageDigest.update(byte[]) do?","What exactly does this do? I tried to look it up but didn't find anything.
Reason for asking is I want to incorporate a SALT byte[] into a value which is then hashed. So should it be done like this (Pseudo code):
MessageDigest.update(SALT);
MessageDigest.update(value);
digestValue = MessageDigest.digest();
// Where SALT, value and digestValue are array bytes, byte[]

Does this add both SALT and value to the final digest or should I combine both variables into one and then update it once?
I couldn't find an answer for this in any documentation, any clarification would be appreciated.
Thank you, cheers.
","MessageDigest is statefull, calls of MessageDigest.update(byte[] input) accumulate digest updates until we call MessageDigest.digest. Run this test to make sure:
    MessageDigest md1 = MessageDigest.getInstance(""MD5"");
    md1.update(new byte[] {1, 2});
    md1.update(new byte[] {3, 4});
    System.out.println(Arrays.toString(md1.digest()));

    MessageDigest md2 = MessageDigest.getInstance(""MD5"");
    md2.update(new byte[] {1, 2, 3, 4});
    System.out.println(Arrays.toString(md2.digest()));

output
[8, -42, -64, 90, 33, 81, 42, 121, -95, -33, -21, -99, 42, -113, 38, 47]
[8, -42, -64, 90, 33, 81, 42, 121, -95, -33, -21, -99, 42, -113, 38, 47]

","2314","<java><android><hash><salt><message-digest>","7","8","1","2017-07-29 18:49:43","17786856","4","6","","","","2013-07-22 11:41:38",""
"6179563","jBCrypt serious issue with checkpw (return true when it shouldn't?)","EDIT: Ok so I've somewhat found an answer here BCrypt says long, similar passwords are equivalent - problem with me, the gem, or the field of cryptography?
New question though, how can someone recommend using bCrypt for hashing if you have to limit the user's password length in a world where we are trying to educate the users to pick increasingly complex passwords, even passphrase, saying your password must be shorter than n characters seems like a way to end up in thedailywtf.com Friday's screenshots :)
Original question below:
I'm refactoring an old login page for an application and decided to give bCrypt a whirl using the JAVA implementation jBCrypt (http://www.mindrot.org/projects/jBCrypt/) and ran into one major  show stopper.
Problem is with the checkpw method which always seem to return true when using a very long seed.  I was going to salt the password of the user with {InternalSalt}{username}{password} and then hash that with bCrypt.
So I have the following code (stripped it down as much as possible to isolate checkpw).
public class Test {
public static void main(String[] args) {
    String plaintext = ""jw~ct/f61y1m7q458GiLVQpiqDK|8kG=d368Id:D@$^_80I{qrn1HM6423{FtestAccountO1nu3jKN"";

    String pw_hash = BCrypt.hashpw(plaintext, BCrypt.gensalt());

    if (BCrypt.checkpw(""jw~ct/f61y1m7q458GiLVQpiqDK|8kG=d368Id:D@$^_80I{qrn1HM6423{FtestAccountO1nu3jKN"", pw_hash))
        System.out.println(""It matches"");
    else
        System.out.println(""It does not match"");

}

}
This will, as it should, print ""It matches"".
Problem I am having is that say you add say aaa to the password you pass to checkpw making it
BCrypt.checkpw(""jw~ct/f61y1m7q458GiLVQpiqDK|8kG=d368Id:D@$^_80I{qrn1HM6423{FtestAccountO1nu3jKNaaa"", pw_hash)
It still return true! Not exactly what I was expecting.  I don't see any password length limitation in the doc but I can't reproduce it with smaller password seed, also it looks like if I modify anything else than the end of the string it works as expected returning false.  
Did I miss something major? I know I must not be the only one using jBcrypt on these forum as I have seen BCrypt recommended in many post while doing some research.
EDIT: Windows 7 64 bits - Java(TM) SE Runtime Environment (build 1.6.0_24-b07)
","Ok, so wording the question gave me enough to actually figure out what I was looking for (hurray for rubber ducking).  The field of cryptography is safe for now!
BCrypt implementation XOR using P_orig which is 18 4 bytes integer until it gets to the end, which limits your encryption ""key"" to 72 bytes.  Eveyrything after 72 bytes is ignored (a warning would have been nice).
What appears to be the accepted compromise is not to limit the user's password to 72 characters or less but simply let it pass silently.  The idea behind this being that a 72 characters bCrypted password is better than the fast hashing alternative anyway.
Source: BCrypt says long, similar passwords are equivalent - problem with me, the gem, or the field of cryptography?
","2313","<security><encryption><passwords><salt><blowfish>","6","5","2","2014-11-08 14:51:25","6180209","0","1","-1","","2017-05-23 12:23:23","2011-05-30 18:24:32",""
"6179563","jBCrypt serious issue with checkpw (return true when it shouldn't?)","EDIT: Ok so I've somewhat found an answer here BCrypt says long, similar passwords are equivalent - problem with me, the gem, or the field of cryptography?
New question though, how can someone recommend using bCrypt for hashing if you have to limit the user's password length in a world where we are trying to educate the users to pick increasingly complex passwords, even passphrase, saying your password must be shorter than n characters seems like a way to end up in thedailywtf.com Friday's screenshots :)
Original question below:
I'm refactoring an old login page for an application and decided to give bCrypt a whirl using the JAVA implementation jBCrypt (http://www.mindrot.org/projects/jBCrypt/) and ran into one major  show stopper.
Problem is with the checkpw method which always seem to return true when using a very long seed.  I was going to salt the password of the user with {InternalSalt}{username}{password} and then hash that with bCrypt.
So I have the following code (stripped it down as much as possible to isolate checkpw).
public class Test {
public static void main(String[] args) {
    String plaintext = ""jw~ct/f61y1m7q458GiLVQpiqDK|8kG=d368Id:D@$^_80I{qrn1HM6423{FtestAccountO1nu3jKN"";

    String pw_hash = BCrypt.hashpw(plaintext, BCrypt.gensalt());

    if (BCrypt.checkpw(""jw~ct/f61y1m7q458GiLVQpiqDK|8kG=d368Id:D@$^_80I{qrn1HM6423{FtestAccountO1nu3jKN"", pw_hash))
        System.out.println(""It matches"");
    else
        System.out.println(""It does not match"");

}

}
This will, as it should, print ""It matches"".
Problem I am having is that say you add say aaa to the password you pass to checkpw making it
BCrypt.checkpw(""jw~ct/f61y1m7q458GiLVQpiqDK|8kG=d368Id:D@$^_80I{qrn1HM6423{FtestAccountO1nu3jKNaaa"", pw_hash)
It still return true! Not exactly what I was expecting.  I don't see any password length limitation in the doc but I can't reproduce it with smaller password seed, also it looks like if I modify anything else than the end of the string it works as expected returning false.  
Did I miss something major? I know I must not be the only one using jBcrypt on these forum as I have seen BCrypt recommended in many post while doing some research.
EDIT: Windows 7 64 bits - Java(TM) SE Runtime Environment (build 1.6.0_24-b07)
","Actually your own answer is great and helped me to find annoying issue ;) there is some tip for people who adds some kind of app's secret to plain  before hashing (even if they limits the password length): include the app secret at the end especially if app's secret is 72 chars long - otherwise every hit will return true!
so instead:
String hashed = BCrypt.hashpw(APP_SECRET + plain, BCrypt.gensalt())
use:
String hashed = BCrypt.hashpw(plain + APP_SECRET, BCrypt.gensalt())
Even if Bcrypt's cropping will occur the checkpw result will be valid!
","2313","<security><encryption><passwords><salt><blowfish>","6","2","2","2014-11-08 14:51:25","6180209","0","1","-1","","2017-05-23 12:23:23","2011-05-30 18:24:32",""
"4483160","hash(hash()) vs salted hash","Since the introduction of Rainbow tables, and using only hashed passwords (e.x: MD5) to stored passwords in database is not the best secured way.
When people talk about salted hashes, the always use it in this way hash(password . salt) or even hash(hash(password) . salt).
I don't know why to use salt, and add extra entry for each password to store the salt?
Why don't we just use hash(hash(password)), or even hash(hash(hash(password)))?
Is it more secure to put salt? or just the sense of being more complex?
","The point of the salt is to make dictionary attacks moot. Now no matter how much you rehash a hash, the same input is always going to yield the same output hash, and therefore one can build a dictionary for that. So while multiple hashing may make it more difficult for brute-force attacks, it doesn't do anything for dictionary attacks.
","2302","<security><hash><salt><password-hash>","3","0","8","2014-01-30 09:43:31","4483187","3","2","445517","","2014-01-30 09:43:31","2010-12-19 13:37:01",""
"4483160","hash(hash()) vs salted hash","Since the introduction of Rainbow tables, and using only hashed passwords (e.x: MD5) to stored passwords in database is not the best secured way.
When people talk about salted hashes, the always use it in this way hash(password . salt) or even hash(hash(password) . salt).
I don't know why to use salt, and add extra entry for each password to store the salt?
Why don't we just use hash(hash(password)), or even hash(hash(hash(password)))?
Is it more secure to put salt? or just the sense of being more complex?
","Nothing stops anyone for building a Rainbow table for doubly hashed passwords.
","2302","<security><hash><salt><password-hash>","3","0","8","2014-01-30 09:43:31","4483187","3","2","445517","","2014-01-30 09:43:31","2010-12-19 13:37:01",""
"4483160","hash(hash()) vs salted hash","Since the introduction of Rainbow tables, and using only hashed passwords (e.x: MD5) to stored passwords in database is not the best secured way.
When people talk about salted hashes, the always use it in this way hash(password . salt) or even hash(hash(password) . salt).
I don't know why to use salt, and add extra entry for each password to store the salt?
Why don't we just use hash(hash(password)), or even hash(hash(hash(password)))?
Is it more secure to put salt? or just the sense of being more complex?
","The salt is a site- or user-specific value.
That means that in order to retrieve the passwords, an attacker must have both access to the database AND know the salt.
In addition, the attacker could additionally generate a table once and then use it against multiple sites. However, with salts, attackers must generate one table per site or even once per user(making the attacks slower).
Site-specific salts add very little to the security of a website. As said in comments, having a combination of site-specific and user-specific salts can significantly improve security over just a site-specific salt. 
A few years ago I asked here on stackoverflow a question about password storage which might be helpful to you. See Secure hash and salt for PHP passwords.
","2302","<security><hash><salt><password-hash>","3","-1","8","2014-01-30 09:43:31","4483187","3","2","445517","","2014-01-30 09:43:31","2010-12-19 13:37:01",""
"4483160","hash(hash()) vs salted hash","Since the introduction of Rainbow tables, and using only hashed passwords (e.x: MD5) to stored passwords in database is not the best secured way.
When people talk about salted hashes, the always use it in this way hash(password . salt) or even hash(hash(password) . salt).
I don't know why to use salt, and add extra entry for each password to store the salt?
Why don't we just use hash(hash(password)), or even hash(hash(hash(password)))?
Is it more secure to put salt? or just the sense of being more complex?
","To keep things simple, let's imagine everyone uses digits as their passwords.
If everyone uses 8 digits as their password, that's 100,000,000 possibilities. If you're trying to break the system, you need to hash all those possibilities. If you have a ""hash of hash of hash"", you still just need to hash those 100,000,000 possibilities - just in a slightly more complicated way.
Now let's pretend we have a 4 digit salt as well. Now, instead of 100,000,000 possibilities there are 1,000,000,000,000... we've given a potential attacker 10,000 times the work to do, instead of just 3 times as much work to do.
Basically, think of a salt as a way of artificially making everyone's password longer, and thus extending the space that a dictionary attack has to work on.
EDIT: Just to be clear, given that the salt is provided in plain-text as well, you would still only have 100,000,000 possibilities to try to attack any one hash. However, it means that after trying those possibilities for one password, the attacker wouldn't have any useful information for attacking another password. Without a salt, an attacker could create a dictionary of 100,000,000 possibilities and then know all the passwords in a database, given only their hashes. In other words, salts help to prevent bulk attacks. They also mean that you can't pregenerate the dictionary: in order to attack a single password effectively, you have to know the salt beforehand. Without a salt, you could compute the hash of every possible password before you get access to the hashes themselves.
","2302","<security><hash><salt><password-hash>","3","12","8","2014-01-30 09:43:31","4483187","3","2","445517","","2014-01-30 09:43:31","2010-12-19 13:37:01",""
"4483160","hash(hash()) vs salted hash","Since the introduction of Rainbow tables, and using only hashed passwords (e.x: MD5) to stored passwords in database is not the best secured way.
When people talk about salted hashes, the always use it in this way hash(password . salt) or even hash(hash(password) . salt).
I don't know why to use salt, and add extra entry for each password to store the salt?
Why don't we just use hash(hash(password)), or even hash(hash(hash(password)))?
Is it more secure to put salt? or just the sense of being more complex?
","You can build a rainbow table based on a dictionary for hash(hash(pwd)) in just twice the time as for hash(pwd) (even less because performance is mainly about disc writes) and it wouldn't even be larger. Using salt greatly expands the size needed for the table up to the amount where it becomes impractical.
Also (even more important), users often have the same password. Without an individual salt per user, if you've broken one users password, you've broken all other users that have the same password.
","2302","<security><hash><salt><password-hash>","3","23","8","2014-01-30 09:43:31","4483187","3","2","445517","","2014-01-30 09:43:31","2010-12-19 13:37:01",""
"4483160","hash(hash()) vs salted hash","Since the introduction of Rainbow tables, and using only hashed passwords (e.x: MD5) to stored passwords in database is not the best secured way.
When people talk about salted hashes, the always use it in this way hash(password . salt) or even hash(hash(password) . salt).
I don't know why to use salt, and add extra entry for each password to store the salt?
Why don't we just use hash(hash(password)), or even hash(hash(hash(password)))?
Is it more secure to put salt? or just the sense of being more complex?
","If you don't use a salt then an attacker can build a single rainbow table can be used to attack every password in your database. Hashing multiple times does not protect you without a salt, because rainbow tables work by chaining hashes together in exactly the way you describe: hash(hash(password)).
If you add a random salt for each user then the attacker cannot re-use the same table to crack two passwords so their work becomes much harder. As an added benefit, two users with the same password will hash to different values if a salt is used.
Your idea of iterating the hash is still good, but you need the salt too. If you do this:
function hashPassword(password, salt) {
    result = hash(salt . password)
    for (i = 0; i < 1000; i++) {
        result = hash(salt . result)
    }
    return result
}

then you make the attacker's work 1000 times harder with a negligible effect on legitimate users. Note that attackers can test millions of candidate passwords each second on a single, low-end computer - hash functions are designed to be fast. This 1000 iteration loop can change a feasible attack into one that will take 100 years or more. When computers speed up in 18 months time just change the number of iterations to 2000.
The salt, hashing algorithm and iteration count do not need to be secret and can be stored in your database alongside the computed hash. You can choose a fixed iteration count and hash algorithm, but the salt must be randomly generated for each user.
","2302","<security><hash><salt><password-hash>","3","6","8","2014-01-30 09:43:31","4483187","3","2","445517","","2014-01-30 09:43:31","2010-12-19 13:37:01",""
"4483160","hash(hash()) vs salted hash","Since the introduction of Rainbow tables, and using only hashed passwords (e.x: MD5) to stored passwords in database is not the best secured way.
When people talk about salted hashes, the always use it in this way hash(password . salt) or even hash(hash(password) . salt).
I don't know why to use salt, and add extra entry for each password to store the salt?
Why don't we just use hash(hash(password)), or even hash(hash(hash(password)))?
Is it more secure to put salt? or just the sense of being more complex?
","Both iterating the hash and using a salt increase the security of password hashing. But they protect against completely different attacks.
Iterating the hash increases the work required for brute-force attacks. But you shouldn't use a naive iteration as you suggest, but an algorithm designed for it, such as PBKDF2
A salt protects against pre-calculated tables, so it should be different for every website and user.
","2302","<security><hash><salt><password-hash>","3","3","8","2014-01-30 09:43:31","4483187","3","2","445517","","2014-01-30 09:43:31","2010-12-19 13:37:01",""
"4483160","hash(hash()) vs salted hash","Since the introduction of Rainbow tables, and using only hashed passwords (e.x: MD5) to stored passwords in database is not the best secured way.
When people talk about salted hashes, the always use it in this way hash(password . salt) or even hash(hash(password) . salt).
I don't know why to use salt, and add extra entry for each password to store the salt?
Why don't we just use hash(hash(password)), or even hash(hash(hash(password)))?
Is it more secure to put salt? or just the sense of being more complex?
","I use a comparible method to hash passwords for users that login. A salt (random value) is generated in the session and is sent to the client. The user enters their password, which is then hashed with the salt and sent back. This makes sure that the value sent from the server is different each time, making it harder to break in using a man in the middle attack.
","2302","<security><hash><salt><password-hash>","3","0","8","2014-01-30 09:43:31","4483187","3","2","445517","","2014-01-30 09:43:31","2010-12-19 13:37:01",""
"5751817","What comes first, the salt or the hash?","Okay, I know this is probably dead simple, but I can't seem to find a straight answer anywhere.  Let's say I have the following:
Password: ""mypassword""
Salt: 1234567

Is the idea of salting to do something like hash(password + salt) or hash(password) + salt?  My guess is that only the former makes any sense at all, but I just want to make sure I'm not missing something.
Please forgive my ignorance.
","You've got it, it's the former.
If you just concatenated the salt and the hash, then an attacker can simply remove the ""salt"" and use a rainbow table. By hashing the plaintext + salt, the salt cannot be factored out.
","2297","<hash><salt>","14","17","5","2016-10-15 09:43:36","5751827","0","5","","","","2011-04-22 02:46:18",""
"5751817","What comes first, the salt or the hash?","Okay, I know this is probably dead simple, but I can't seem to find a straight answer anywhere.  Let's say I have the following:
Password: ""mypassword""
Salt: 1234567

Is the idea of salting to do something like hash(password + salt) or hash(password) + salt?  My guess is that only the former makes any sense at all, but I just want to make sure I'm not missing something.
Please forgive my ignorance.
","The salt should be part of the hash calculation
","2297","<hash><salt>","14","0","5","2016-10-15 09:43:36","5751827","0","5","","","","2011-04-22 02:46:18",""
"5751817","What comes first, the salt or the hash?","Okay, I know this is probably dead simple, but I can't seem to find a straight answer anywhere.  Let's say I have the following:
Password: ""mypassword""
Salt: 1234567

Is the idea of salting to do something like hash(password + salt) or hash(password) + salt?  My guess is that only the former makes any sense at all, but I just want to make sure I'm not missing something.
Please forgive my ignorance.
","hash(password + salt). If you concatenate the salt after the hashing, the concatenation is easily reversible and doesn't add any difficulty in reversing the hash on the password (with rainbow tables).
That said, some systems do both, e.g. Django stores salt$hash(salt+password) in database. This is simply so that every piece of data needed to check the password against the hash is available in one place.
","2297","<hash><salt>","14","6","5","2016-10-15 09:43:36","5751827","0","5","","","","2011-04-22 02:46:18",""
"5751817","What comes first, the salt or the hash?","Okay, I know this is probably dead simple, but I can't seem to find a straight answer anywhere.  Let's say I have the following:
Password: ""mypassword""
Salt: 1234567

Is the idea of salting to do something like hash(password + salt) or hash(password) + salt?  My guess is that only the former makes any sense at all, but I just want to make sure I'm not missing something.
Please forgive my ignorance.
","Actually, it's salt + hash(salt+password) (Salt is part of the hash computation - but you must also keep it in the clear)
","2297","<hash><salt>","14","12","5","2016-10-15 09:43:36","5751827","0","5","","","","2011-04-22 02:46:18",""
"5751817","What comes first, the salt or the hash?","Okay, I know this is probably dead simple, but I can't seem to find a straight answer anywhere.  Let's say I have the following:
Password: ""mypassword""
Salt: 1234567

Is the idea of salting to do something like hash(password + salt) or hash(password) + salt?  My guess is that only the former makes any sense at all, but I just want to make sure I'm not missing something.
Please forgive my ignorance.
","I'm adding these links into this question for completeness - this topic of salty hashing requires a broad understanding of the topics feeding into it to avoid costly mistakes.
A key point not quite expressed in the answers here is the necessity of using a unique salt for each password. For details on why, read the linked items.
Why make each salt unique : Salting Your Password: Best Practices?
Broad overview on the topic : Salt Generation and open source software
","2297","<hash><salt>","14","3","5","2016-10-15 09:43:36","5751827","0","5","","","","2011-04-22 02:46:18",""
"10951583","How do I check for a salted password in Spring Security?","I am using Spring 3 and grabbing users from a MySQL database.
Right now, in testing, I have a user with a MD5 password.  And I can authenticate just fine using that.
However, we want to be a little more secure in how we hash the passwords.  We want to:
MD5(username + salt + password)

The salt is a random string stored in the user record.  But I can't seem to figure out where/how to do this.  This is what I have so far:
UserDao
public class UserDao {

    public static Users findUserByUsername(String paUsername) {
        String hql = ""from Users where username = :username"";

        List<Users> list = null;
        Users user = null;

        try {
            IO io = new IO(""web"");   // custom Hibernate framework
            IOQuery query = new IOQuery();
            query.setStatement(hql);
            query.setParameter(new IOParameter(""username"", paUsername));

            list = io.runQuery(query);

            if (list.isEmpty()) {
                return null;
            }

            return list.get(0);

        } catch (Exception ex) {
            return null;
        }
    }
}

UserDetailsServiceImpl
@Service(""userDetailsService"")
public class UserDetailsServiceImpl implements UserDetailsService {

    @Autowired
    private UserDao userDao;

    @Override
    public UserDetails loadUserByUsername(String paUsername) throws UsernameNotFoundException {
        Users user = userDao.findUserByUsername(paUsername);

        if(user == null) {
            throw new UsernameNotFoundException(""User not found"");
        }

        return new User(
                user.getUsername(),
                user.getPassword(),
                user.getEnabled(),
                true,
                true,
                true,
                getAuthorities(Enums.UserRoles.IT));
    }

    private Collection<? extends GrantedAuthority> getAuthorities(Enums.UserRoles paRole) {
        List<GrantedAuthority> authList = getGrantedAuthorities(getRoles(paRole));
        return authList;
    }

    private List<String> getRoles(Enums.UserRoles paRole) {
        List<String> roles = new ArrayList<>();

        if (paRole.equals(Enums.UserRoles.USER)) {
            roles.add(Enums.UserRoles.USER.name());
        } else if (paRole.equals(Enums.UserRoles.IT)) {
            roles.add(Enums.UserRoles.USER.name());
            roles.add(Enums.UserRoles.IT.name());
        }

        return roles;
    }

    private static List<GrantedAuthority> getGrantedAuthorities(List<String> paRoles) {
        List<GrantedAuthority> authorities = new ArrayList<>();
        for (String role : paRoles) {
            authorities.add(new SimpleGrantedAuthority(role));
        }
        return authorities;
    }
}

UserDetailsService
public class UserDetailService implements UserDetailsService {

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        return new UserDetailsServiceImpl().loadUserByUsername(username);        
    }
}

security-app-context


<beans:bean id=""loginSuccessHandler"" class=""com.myapp.security.LoginSuccessHandler"" />
<beans:bean id=""loginFailureHandler"" class=""com.myapp.security.LoginFailureHandler"" />
<beans:bean id=""detailsService"" class=""com.myapp.security.UserDetailService"" />

Any ideas on what I need to do?
Thanks
","This is a fragment of the security config my app uses to set password encoding:
<sec:authentication-manager alias=""authenticationManager"">
    <sec:authentication-provider ref=""authenticationProvider"" />
</sec:authentication-manager>


<bean id=""authenticationProvider"" class=""org.springframework.security.authentication.dao.DaoAuthenticationProvider"">
    <property name=""userDetailsService"" ref=""userDetailsServiceImpl""/>
    <property name=""passwordEncoder"" ref=""cryptoPasswordEncoder"" />
</bean>


<bean id=""cryptoPasswordEncoder"" class=""org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"" />

We don't need to set a Salt source in the DaoAuthenticationProvider because the BCryptPasswordEncoder uses its own.
","2271","<java><authentication><spring-security><salt>","3","1","2","2012-06-08 15:27:28","10951693","0","1","","","","2012-06-08 15:17:20",""
"10951583","How do I check for a salted password in Spring Security?","I am using Spring 3 and grabbing users from a MySQL database.
Right now, in testing, I have a user with a MD5 password.  And I can authenticate just fine using that.
However, we want to be a little more secure in how we hash the passwords.  We want to:
MD5(username + salt + password)

The salt is a random string stored in the user record.  But I can't seem to figure out where/how to do this.  This is what I have so far:
UserDao
public class UserDao {

    public static Users findUserByUsername(String paUsername) {
        String hql = ""from Users where username = :username"";

        List<Users> list = null;
        Users user = null;

        try {
            IO io = new IO(""web"");   // custom Hibernate framework
            IOQuery query = new IOQuery();
            query.setStatement(hql);
            query.setParameter(new IOParameter(""username"", paUsername));

            list = io.runQuery(query);

            if (list.isEmpty()) {
                return null;
            }

            return list.get(0);

        } catch (Exception ex) {
            return null;
        }
    }
}

UserDetailsServiceImpl
@Service(""userDetailsService"")
public class UserDetailsServiceImpl implements UserDetailsService {

    @Autowired
    private UserDao userDao;

    @Override
    public UserDetails loadUserByUsername(String paUsername) throws UsernameNotFoundException {
        Users user = userDao.findUserByUsername(paUsername);

        if(user == null) {
            throw new UsernameNotFoundException(""User not found"");
        }

        return new User(
                user.getUsername(),
                user.getPassword(),
                user.getEnabled(),
                true,
                true,
                true,
                getAuthorities(Enums.UserRoles.IT));
    }

    private Collection<? extends GrantedAuthority> getAuthorities(Enums.UserRoles paRole) {
        List<GrantedAuthority> authList = getGrantedAuthorities(getRoles(paRole));
        return authList;
    }

    private List<String> getRoles(Enums.UserRoles paRole) {
        List<String> roles = new ArrayList<>();

        if (paRole.equals(Enums.UserRoles.USER)) {
            roles.add(Enums.UserRoles.USER.name());
        } else if (paRole.equals(Enums.UserRoles.IT)) {
            roles.add(Enums.UserRoles.USER.name());
            roles.add(Enums.UserRoles.IT.name());
        }

        return roles;
    }

    private static List<GrantedAuthority> getGrantedAuthorities(List<String> paRoles) {
        List<GrantedAuthority> authorities = new ArrayList<>();
        for (String role : paRoles) {
            authorities.add(new SimpleGrantedAuthority(role));
        }
        return authorities;
    }
}

UserDetailsService
public class UserDetailService implements UserDetailsService {

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        return new UserDetailsServiceImpl().loadUserByUsername(username);        
    }
}

security-app-context


<beans:bean id=""loginSuccessHandler"" class=""com.myapp.security.LoginSuccessHandler"" />
<beans:bean id=""loginFailureHandler"" class=""com.myapp.security.LoginFailureHandler"" />
<beans:bean id=""detailsService"" class=""com.myapp.security.UserDetailService"" />

Any ideas on what I need to do?
Thanks
","Use :
public class PasswordEncoder extends org.springframework.security.authentication.encoding.MessageDigestPasswordEncoder{             

    public PasswordEncoder() {
        super(""MD5"");
    }

    @Override
    public String encodePassword(String originalPassword, Object salt) {
            // here supply salt = username + saltString
        String encryptedPassword =  super.encodePassword(originalPassword, salt);           
        return encryptedPassword;
    }

}

","2271","<java><authentication><spring-security><salt>","3","0","2","2012-06-08 15:27:28","10951693","0","1","","","","2012-06-08 15:17:20",""
"10078197","bcrypt with salt how?","I'm kind of new when it comes to security, I've been reading up on php crypt and searching for good advice though no one really goes into detail about ""how"" you go about doing it in the most effective way.
I made a test login which uses something like this:
 //verify login from user input
$username = mysql_real_escape_string($_POST['username']);
$salt = '$2a$10$cdDegHjJLPUvVXYz23679.MOetNHBk9NTStpY9YjJWiL5ECfhHlSm';
$password = crypt(mysql_real_escape_string($_POST['password']), $salt);

(I'm sure there's lots I need to change to make it fully secure (e.g restrict password string length) please enlighten me with anything else you think would be of good practice)
I read somewhere that it's ideal to make a random salt and store it with the password, (I don't fully understand that concept of checking a number that doesn't relate to the password)
Then I read somewhere that it's pointless to do a random salt because it won't increase the security, and that a static salt would do pretty much the same. 
I saw this tutorial usinga random salt with $_GET. (Tell me this is not right)
Can someone point me in the right direction of making my bcrypt as effective as possible. 
Thanks
","See my old answer on this thread over here. There is one interesting article and a link to phpass.
","2266","<php><salt><crypt><bcrypt>","1","1","2","2012-04-09 21:02:18","","2","","618794","","2012-04-09 19:11:43","2012-04-09 18:55:14",""
"10078197","bcrypt with salt how?","I'm kind of new when it comes to security, I've been reading up on php crypt and searching for good advice though no one really goes into detail about ""how"" you go about doing it in the most effective way.
I made a test login which uses something like this:
 //verify login from user input
$username = mysql_real_escape_string($_POST['username']);
$salt = '$2a$10$cdDegHjJLPUvVXYz23679.MOetNHBk9NTStpY9YjJWiL5ECfhHlSm';
$password = crypt(mysql_real_escape_string($_POST['password']), $salt);

(I'm sure there's lots I need to change to make it fully secure (e.g restrict password string length) please enlighten me with anything else you think would be of good practice)
I read somewhere that it's ideal to make a random salt and store it with the password, (I don't fully understand that concept of checking a number that doesn't relate to the password)
Then I read somewhere that it's pointless to do a random salt because it won't increase the security, and that a static salt would do pretty much the same. 
I saw this tutorial usinga random salt with $_GET. (Tell me this is not right)
Can someone point me in the right direction of making my bcrypt as effective as possible. 
Thanks
","Using a random salt for each password is important. PHP's implementation of the crypt() function will include it automatically in the resulting hash value so there is no problem where to store it, but it should be generated correctly from a random source.
I wrote a small article about bcrypt in PHP, because i think it's important that one understands how the function works. As soon as we understand it, we can use a well established library like phpass.
","2266","<php><salt><crypt><bcrypt>","1","1","2","2012-04-09 21:02:18","","2","","618794","","2012-04-09 19:11:43","2012-04-09 18:55:14",""
"43478038","random salt string in Python 3","I'm trying to migrate the following to Python 3.
def mkhash(password, salt=None):
    """"""
    Compute SHA256 hash of password with pbkdf2 algorithm.
    Call with salt=None for creating hash. To compute verification
    hash, supply salt stored in the user's row in auth_user.
    Args:
        password :
        salt=None :
    Returns: tuple (hash, salt)
    Raises:  Nothing
    """"""
    if salt is None:
        ## use a 16 char random string
        randchars = [random.choice(string.ascii_lowercase) for _ in range(16)]
        #salt = b''.join(randchars)# works in 2 but not 3
        salt = ''.join(randchars)  # works in 3 but result fails in hashlib call

    # See https://docs.python.org/2/library/hashlib.html
    dk = hashlib.pbkdf2_hmac('sha256', password, salt, 10000)
    pwhash = binascii.hexlify(dk)
    return (pwhash, salt)        

Here's a traceback of the failure in Python 3.
Traceback (most recent call last):
  File ""auth.py"", line 451, in <module>
    _ = mkhash('badpassword')
  File ""auth.py"", line 146, in mkhash
    dk = hashlib.pbkdf2_hmac('sha256', password, salt, 10000)
TypeError: a bytes-like object is required, not 'str'

What's the right way, in Python 3, to generate a salt of length N that's compatible with hashlib functions?
EDIT: Working version using accepted answer:
def mkhash(password, salt=None):
    """"""
    Compute SHA256 hash of password with pbkdf2 algorithm.
    Call with salt=None for creating hash. To compute verification
    hash, supply salt stored in the user's row in auth_user.
    Args:
        password :
        salt=None :
    Returns: tuple (hash, salt)
    Raises:  Nothing
    """"""
    if salt is None:
        salt = os.urandom(16)
    elif type(salt) is not bytes:
        salt = salt.encode('utf-8')

    # See https://docs.python.org/3/library/hashlib.html
    dk = hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), salt, 10000)
    pwhash = binascii.hexlify(dk)
    return (pwhash, salt)                   

","You can use .encode() to turn a string object into bytes.
salt = salt.encode('utf-8')

But you shouldn't.
The random module doesn't produce cryptographically secure random numbers. That leaves a vulnerability in your code. If you're using Python 3.6, the secrets module is better.
salt = secrets.token_bytes(16)

If not, os.urandom() is also documented to be ""unpredictable enough for cryptographic applications"".
salt = os.urandom(16)

","2257","<python><python-3.x><salt><hashlib>","1","3","1","2017-04-18 18:05:50","43478157","0","2","426853","","2017-04-18 18:05:50","2017-04-18 16:55:53",""
"20975780","Powershell and AES: If the Salt and IV are both fixed or known, is the encryption inherently unsafe or easier to crack?","I have recently been using this script to do some data encryption for a different script that I will later on be passing to other users, and I'm currently using a fixed IV and Salt. The reason I am currently using a fixed Salt and IV is that the data I have encrypted only needs to be encrypted once, but will need to be decrypted every time my script is run. As such, having everything fixed means that only the password needs to be known to other users of my script.
From reading around, it seems that having the Salt known does not make too much difference to the ease at which the data can be maliciously decrypted if it is unique, however I assume that by using a fixed Salt I am currently mooting the point of applying it. 
My Password that I am passing into this script is entered at the point of encryption/decryption, and is not stored anywhere. 
By keeping the Password completely secret, does this strengthen the encryption somewhat? 
In addition, does anyone have any advice for a potentially safer implementation? 
Many thanks for all help.
","Salts and IV's serve the same purpose, preventing the re-use of work by starting at a random starting point. When you are hashing you call it a Salt, when you are encrypting you call it a IV.
Having a fixed Salt and VI is the same affect as having no Salt or IV, the entire point of those two things is they are different every time so if I crack the key on File A I can't reuse the work for File B, I have to start from scratch again.
Normally the Salt and IV are just prepended to the front of the file or are in the file header. When you go to decrypt the file you read in the IV/Salt first then start reading your encrypted data. 
What I would do is instead of using a fixed salt and fixed IV I would just let the program generate the Salt and IV.
$r = new-Object System.Security.Cryptography.RijndaelManaged
$r.GenerateIV();

#generate a new instance of our KDF with a random 32 bit salt. 
$deriveBytes = new-Object Security.Cryptography.Rfc2898DeriveBytes($Passphrase, 32)

$r.Key =$deriveBytes.GetBytes(32) #generate a 32 bit key based off of $Passphrase


#store $r.IV.Length, $r.IV, $deriveBytes.Salt at the front of your file ($deriveBytes.Salt we know will be 32 bytes big because we set it)

Further reading:
 - Is it safe to have the salt equal to IV?
 - Secret vs. Non-secret Initialization Vector
 - Why would you need a salt [...] when IV is already randomly generated and stored with the encrypted data?
","2237","<powershell><encryption><salt><rijndaelmanaged>","2","2","1","2014-01-08 14:05:20","20979367","0","","","","","2014-01-07 15:41:35",""
"7457734","How does Unix SALT help protect passwords?","I was in class the other day and we were talking about Unix SALT and how it makes the passwords much harder to guess.  My issue is that the SALT is stored in plaintext right next to the hashed password so how could this make it more secure? I mean if the SALT is right there so you append it and then hash your guess.  Also, the issue about precomputing the guesses in a rainbow table doesn't make sense to me either.  You would just look at the SALT and first only precompute it with the given SALT.  The only argument I can think of is that the malicious user cannot access /etc/password file but then how would the hacker know the hashes of the password.  I would really appreciate it if someone could point me in the right direction.
Thanks!
","Without using a salt, you can precompute a rainbow table for any password. A salt would make the attacker have to precompute a rainbow table for every different salt.
For more information, see You're Probably Storing Passwords Incorrectly.
","2231","<unix><salt><saltedhash>","2","4","2","2011-09-17 21:12:31","","0","","","","","2011-09-17 20:58:02",""
"7457734","How does Unix SALT help protect passwords?","I was in class the other day and we were talking about Unix SALT and how it makes the passwords much harder to guess.  My issue is that the SALT is stored in plaintext right next to the hashed password so how could this make it more secure? I mean if the SALT is right there so you append it and then hash your guess.  Also, the issue about precomputing the guesses in a rainbow table doesn't make sense to me either.  You would just look at the SALT and first only precompute it with the given SALT.  The only argument I can think of is that the malicious user cannot access /etc/password file but then how would the hacker know the hashes of the password.  I would really appreciate it if someone could point me in the right direction.
Thanks!
","Read all about password hacking using rainbow-tables in this post by Jeff Atwood.
Contains information regarding ""salting"" as well as links to deep-dive into the subject.
","2231","<unix><salt><saltedhash>","2","1","2","2011-09-17 21:12:31","","0","","","","","2011-09-17 20:58:02",""
"24160989","Password encryption in Java using MD5 and Salt","I am using same MySQL table to store password from different program. One is written in Java and another is written in PHP. 
I am saving password via PHP using this script:
encrypted_password= md5(md5('added_salt').md5(md5('plain_password')));

I need to encrypt password in Java using MD5 and salt like above. I write code in Java but it's output is different:
       MessageDigest md = MessageDigest.getInstance(""MD5"");


       String salts = ""a,d,d,e,d,_,s,a,l,t"";

        String salttmps[] = salts.split("","");
        byte salt[] = new byte[salttmps.length];

        for (int i = 0; i < salt.length; i++) {
          salt[i] = Byte.parseByte(salttmps[i]);
        }
        md.update(salt); 
        md.update(password.getBytes());

        byte byteData[] = md.digest();


        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
         sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
        } 
        password = sb.toString();

I need to correct Java code and generate output same as PHP. 
","If you could post an example of output in your question, it would be better to reproduce the algorithm.
I guess you should do something like this:
public static void main(String[] args) {

    try {
        System.out.println(md5(md5(""added_salt""), md5(""plain_password"")));
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    }
}

public static String md5(String plainText) throws NoSuchAlgorithmException {
    return md5(null, plainText);
}

public static String md5(String salt, String plainText)
        throws NoSuchAlgorithmException {
    MessageDigest md = MessageDigest.getInstance(""MD5"");

    if (salt != null) {
        md.update(salt.getBytes());
    }
    md.update(plainText.getBytes());

    byte byteData[] = md.digest();

    StringBuffer sb = new StringBuffer();
    for (int i = 0; i < byteData.length; i++) {
        sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16)
                .substring(1));
    }
    return sb.toString();
}

md5(md5(""added_salt""), md5(""plain_password"")) returns 3bd9e544ab1a3d3485f07af38cc1b415
","2229","<java><php><encryption><md5><salt>","0","2","1","2014-06-11 10:58:28","24161197","6","3","","","","2014-06-11 10:47:53",""
"13522054","php encrypt/decrypt function using salt - how to?","I am using php for a basic application to login into the system, be able to edit account information, and delete account. I have a mysql database. I need to encrypt/decrypt password  using salt. How do I do it? Just need to make sure data is secure.
","You don't want to encrypt passwords. You want to hash them. 
Some reading:
http://php.net/manual/en/faq.passwords.php 
Related SO post: how to hash the password and get it back
","2156","<php><salt><password-encryption>","1","5","2","2012-11-23 09:45:56","","1","","","","","2012-11-23 01:18:47",""
"13522054","php encrypt/decrypt function using salt - how to?","I am using php for a basic application to login into the system, be able to edit account information, and delete account. I have a mysql database. I need to encrypt/decrypt password  using salt. How do I do it? Just need to make sure data is secure.
","Passwords should be hashed, in contrast to encryption this is a one-way function, that should make it impossible to get back the original password.

Store only the hash-value in the database, and compare against this value for login.
Use a unique salt per password, it can be stored plaintext in the same database field as your hash-value.
Use a slow key-derivation function like Bcrypt, to prevent brute-force attacks.

It's recommended to use a well established library like phpass to build the hashes. For further reading have a look at this tutorial.
","2156","<php><salt><password-encryption>","1","2","2","2012-11-23 09:45:56","","1","","","","","2012-11-23 01:18:47",""
"9332968","Encrypting passwords in ASP.NET MVC 3","I'm trying to create a custom membership system in ASP.NET MVC3. 
I know there are many free and open source providers, but I'm doing this to learn more. My question is about encrypting passwords. 
Which algorithm do you suggest I use: SHA1, SHA256, MD5, BCrypt, or something else? Also, which way do you suggest to create a password salt?
","Most of those algorithms are hashing algorithms, they don't encrypt they create a hash (checksum) and usually this is the best way to store passwords, unless you have a really good reason to want a way to restore passwords (and I don't think there are many reasons for that).
I tipically use sha256. About the salt, a random 6 or more characters string is enough. But the salt can be anything, it depends on your imagination how to generate it.
","2152","<asp.net-mvc-3><security><c#-4.0><passwords><salt>","1","1","2","2012-02-17 18:07:50","9333219","0","","495041","","2012-02-17 17:55:16","2012-02-17 17:46:40",""
"9332968","Encrypting passwords in ASP.NET MVC 3","I'm trying to create a custom membership system in ASP.NET MVC3. 
I know there are many free and open source providers, but I'm doing this to learn more. My question is about encrypting passwords. 
Which algorithm do you suggest I use: SHA1, SHA256, MD5, BCrypt, or something else? Also, which way do you suggest to create a password salt?
","BCrypt if you need really strong hash. As far as generating the salt is concerned, you could use the RNGCryptoServiceProvider class. Here's an article that you may checkout. Just replace the SHA1 algorithm used there with BCrypt.
","2152","<asp.net-mvc-3><security><c#-4.0><passwords><salt>","1","1","2","2012-02-17 18:07:50","9333219","0","","495041","","2012-02-17 17:55:16","2012-02-17 17:46:40",""
"15056866","How to change a SALT password in a database using PHP?","I am using a HTTP POST from android to some php script in order to update a users password in the database.
I am using the same SALT hash as is done when the user creates the account and the database update is running and changing the values of SALT however when I try to log in with the new password it is coming as incorrect.
The initial code for creating the password is:
public function storeUser($name, $email, $password, $rand) {
    $uuid = uniqid('', true);
    $hash = $this->hashSSHA($password);
    $encrypted_password = $hash[""encrypted""]; // encrypted password
    $salt = $hash[""salt""]; // salt
    $auth = 0;
    $result = mysql_query(""INSERT INTO users(unique_id, authorized, auth_code, name, email, encrypted_password, salt, created_at) VALUES('$uuid', '$auth', '$rand', '$name', '$email', '$encrypted_password', '$salt', NOW())"");
    // check for successful store
    if ($result) {
        // get user details 
        $uid = mysql_insert_id(); // last inserted id
        $result = mysql_query(""SELECT * FROM users WHERE uid = $uid"");
        // return user details
        return mysql_fetch_array($result);
    } else {
        return false;
    }
}

The hashing functions are:
 /**
 * Encrypting password
 * @param password
 * returns salt and encrypted password
 */
public function hashSSHA($password) {

    $salt = sha1(rand());
    $salt = substr($salt, 0, 10);
    $encrypted = base64_encode(sha1($password . $salt, true) . $salt);
    $hash = array(""salt"" => $salt, ""encrypted"" => $encrypted);
    return $hash;
}

/**
 * Decrypting password
 * @param salt, password
 * returns hash string
 */
public function checkhashSSHA($salt, $password) {

    $hash = base64_encode(sha1($password . $salt, true) . $salt);

    return $hash;
}

And finally the update function (where the problem is):
 /**
 * Updating a users
 * password
 */
public function updatePassword($email, $password) {
    $uuid = uniqid('', true);
    $hash = $this->hashSSHA($password);
    $encrypted_password = $hash[""encrypted""]; // encrypted password
    $salt = $hash[""salt""]; // salt

    $result = mysql_query(""UPDATE users SET encrypted_password='$encrypted_password',  updated_at = NOW() WHERE email='$email'"");
    $result = mysql_query(""UPDATE users SET salt='$salt',  updated_at = NOW() WHERE email='$email'"");


    // check for successful store
    if ($result) {
        // get user details
        $uid = mysql_insert_id(); // last inserted id
        $result = mysql_query(""SELECT * FROM users WHERE email = '$email'"");
        // return user details
        return mysql_fetch_array($result);
    } else {
        return false;
    }
}

As always any help greatly appreciated.
EDIT:
Login function as requested:
 /**
 * Get user by email and password
 */
public function getUserByEmailAndPassword($email, $password) {
    $result = mysql_query(""SELECT * FROM users WHERE email = '$email'"") or die(mysql_error());
    // check for result
    $no_of_rows = mysql_num_rows($result);
    if ($no_of_rows > 0) {
        $result = mysql_fetch_array($result);
        $salt = $result['salt'];
        $encrypted_password = $result['encrypted_password'];
        $hash = $this->checkhashSSHA($salt, $password);
        // check for password equality
        if ($encrypted_password == $hash) {
            // user authentication details are correct
            return $result;
        }
    } else {
        // user not found
        return false;
    }
}

","You have built a weak scheme to hash your passwords, because you use a single iteration of SHA1 as hash function, and because the salt is truncated to 10 characters and is generated with the cryptographically unsafe rand() function. Then you make your life harder than necessary with storing the salt in a separate field.
In your case i would strongly recommend to use the new functions password_hash() and password_verify() of PHP to get a strong BCrypt hash. They take care of the generation of a safe random salt, and the resulting string contains the hash-value as well the salt, so you can store it in a single field in your database. There exists a compatibilty pack for earlier PHP versions.
The easiest way to use this functions will be:
$hashToStoreInDb = password_hash($password, PASSWORD_BCRYPT);
$isPasswordCorrect = password_verify($password, $existingHashFromDb);

To answer your question: I couldn't see an obvious reason why it doesn't work, often the problem is a database field that is too short. In your case you need place for a binary SHA1 with a 10 character salt added, that is base64_encoded (difficult to predict the necessary size). It can also be dangerous to combine the binary string from SHA1 (null bytes) with a normal string.
","2148","<php><sql><passwords><sql-update><salt>","1","0","1","2013-02-26 10:50:59","","5","","951137","","2013-02-24 21:42:42","2013-02-24 21:27:53",""
"22635719","salted to unsalted password md5 php","I'm moving to a other shopping cart and want to import the customers. However the new shopping cart uses a other password system. I would like to convert the old passwords + salt to a single md5.
This is the code for the old shopping cart:
if (md5(md5($password) . md5($salt)) == $hash) {}

This is the code for the new shopping cart:
password = SHA1(CONCAT(salt, SHA1(CONCAT(salt, SHA1('"" . $this->db->escape($password) . ""'

Is it possible to convert it into a single md5 string?
","No. You would need the original value (the password) to recreate the hash using a different algorithm. Since you don't have the password and a hash is purposefully not reversible, you cannot get the ""single MD5"" value.
You'll have to adapt the code in your new system to work with the old hash values.
And you should use something better than MD5 while you're at it, it's entirely inadequate for secure password hashing. password_hash is the PHP state-of-the-art.
","2141","<php><passwords><md5><salt>","-1","3","1","2014-03-25 13:56:20","22635834","3","1","1399491","","2014-03-25 13:56:20","2014-03-25 13:13:13",""
"4537052","MD5 password twice","I know MD5's safety is under question lately and this is the reason a lot of people are using salt (I dont understand this at all btw) but I was wondering if you wanted to easily implement a safe system in php can you just md5 something twice? 
like test > 098f6bcd4621d373cade4e832627b4f6 > fb469d7ef430b0baf0cab6c436e70375
So basically:
$val = 'test';
$val = md5($val);
$val = md5($val);

Would that solve the whole rainbow security stuff? Is there an easy/noob proof way of making secure database passwords in php? 
","Whether or not you use the MD5 algorithm...
No, an attacker can always have two rainbow tables (one for the extra level of hashes, and one for the passwords). And from another answer of mine:

[...] it still just requires the password and nothing more to crack. In other words, you are just applying the hashing functions to the same thing a few times more.

You use a salt to make it more difficult for the attacker to get at your passwords, because then he would need to know the salt so that he can use it in computing the hashes for your passwords.
","2118","<php><security><hash><md5><salt>","1","3","5","2016-02-02 18:30:35","4537082","6","4","106224","","2010-12-27 06:48:05","2010-12-27 06:46:27",""
"4537052","MD5 password twice","I know MD5's safety is under question lately and this is the reason a lot of people are using salt (I dont understand this at all btw) but I was wondering if you wanted to easily implement a safe system in php can you just md5 something twice? 
like test > 098f6bcd4621d373cade4e832627b4f6 > fb469d7ef430b0baf0cab6c436e70375
So basically:
$val = 'test';
$val = md5($val);
$val = md5($val);

Would that solve the whole rainbow security stuff? Is there an easy/noob proof way of making secure database passwords in php? 
","If you don't believe in MD5, you can try a higher algorithm by using the hash() function:
$hash1 = hash('sha1', 'The string to hash by SHA-1');
$hash2 = hash('sha256', 'The string to hash by SHA-256');
$hash3 = hash('sha512', 'The string to hash by SHA-512');
$hash4 = hash('ripemd160', 'The string to hash by RIPEMD-160');

In my opinion it does not make sense to hash twice.
EDIT: Fixed typo in last line of code.
","2118","<php><security><hash><md5><salt>","1","4","5","2016-02-02 18:30:35","4537082","6","4","106224","","2010-12-27 06:48:05","2010-12-27 06:46:27",""
"4537052","MD5 password twice","I know MD5's safety is under question lately and this is the reason a lot of people are using salt (I dont understand this at all btw) but I was wondering if you wanted to easily implement a safe system in php can you just md5 something twice? 
like test > 098f6bcd4621d373cade4e832627b4f6 > fb469d7ef430b0baf0cab6c436e70375
So basically:
$val = 'test';
$val = md5($val);
$val = md5($val);

Would that solve the whole rainbow security stuff? Is there an easy/noob proof way of making secure database passwords in php? 
","Hashing twice makes little real sense and doesn't accomplish much. In general, however, multiple hashing can make some sense. For example, if you hash enough times to take something like 100 ms (or so, depending on hardware) it can help a little. The basic idea of it is pretty simple: adding 100 ms to a normal login is a barely noticeable delay -- but if you're trying to build something like a table for a dictionary attack, multiplying the time by something like a thousand (or whatever exactly it works out to) starts to make a real difference -- a table that you could normally compute in (say) a day, takes a few years instead. That's enough difference that anything but really serious attackers will often give up (or just get bored) long before they finish the job.
Salt is an entirely separate tool. Using it does not make up for weakness in the underlying hash function. The idea here is that the size of a table for a dictionary attack becomes substantially larger (e.g., for a one-byte salt, 256 times larger). The salt is not normally kept secret, but it's relatively random, so an attacker who's doing a dictionary attack can't just hash each word as-is, but has to take each possible salt value into account. At the risk of repetition: it deals with a weakness in how (most) people pick passwords, not any weakness in the hash function itself.
","2118","<php><security><hash><md5><salt>","1","9","5","2016-02-02 18:30:35","4537082","6","4","106224","","2010-12-27 06:48:05","2010-12-27 06:46:27",""
"4537052","MD5 password twice","I know MD5's safety is under question lately and this is the reason a lot of people are using salt (I dont understand this at all btw) but I was wondering if you wanted to easily implement a safe system in php can you just md5 something twice? 
like test > 098f6bcd4621d373cade4e832627b4f6 > fb469d7ef430b0baf0cab6c436e70375
So basically:
$val = 'test';
$val = md5($val);
$val = md5($val);

Would that solve the whole rainbow security stuff? Is there an easy/noob proof way of making secure database passwords in php? 
","Storing passwords securely is tricky, most the advice posted here is not accurate. So I will defer to Thomas Ptacek's widely cited post on the subject: http://chargen.matasano.com/chargen/2007/9/7/enough-with-the-rainbow-tables-what-you-need-to-know-about-s.html
","2118","<php><security><hash><md5><salt>","1","1","5","2016-02-02 18:30:35","4537082","6","4","106224","","2010-12-27 06:48:05","2010-12-27 06:46:27",""
"4537052","MD5 password twice","I know MD5's safety is under question lately and this is the reason a lot of people are using salt (I dont understand this at all btw) but I was wondering if you wanted to easily implement a safe system in php can you just md5 something twice? 
like test > 098f6bcd4621d373cade4e832627b4f6 > fb469d7ef430b0baf0cab6c436e70375
So basically:
$val = 'test';
$val = md5($val);
$val = md5($val);

Would that solve the whole rainbow security stuff? Is there an easy/noob proof way of making secure database passwords in php? 
","For the record, I evaluated that
$val = 'test';
$salt='somerandom!!aa##9900';
$val = md5($salt.$val);
$val = md5($val);

Its pretty safe.  The secret is in the salt.
However, md5 is short so the chances of concurrences are ""high"" (one in 1.208.925.819.614.629.174.706.176 = 32^16, 32 words with an hexadecimal each one)
","2118","<php><security><hash><md5><salt>","1","0","5","2016-02-02 18:30:35","4537082","6","4","106224","","2010-12-27 06:48:05","2010-12-27 06:46:27",""
"26295266","PHP password_hash function salt length 21 or 22?","Code:
echo password_hash(""stackoverflow"", PASSWORD_DEFAULT, ['salt' => 'twenty-one-characters'] );

Result:
Warning: password_hash(): Provided salt is too short: 21 expecting 22 

code: 
echo password_hash(""stackoverflow"", PASSWORD_DEFAULT, ['salt' => 'twenty-one-charactersA'] );

Result:
$2y$10$dHdlbnR5LW9uZS1jaGFyYOVyX13hK9eb4/KXMAkHsAJX..YR7t/32

code: 
echo password_hash(""stackoverflow"", PASSWORD_DEFAULT, ['salt' => 'twenty-one-charactersB'] );

$2y$10$dHdlbnR5LW9uZS1jaGFyYOVyX13hK9eb4/KXMAkHsAJX..YR7t/32

Question:
As you see, by appending A and B to 21 character strings we created two different salts of 22 characters, but, the HASHES are same! That is the 22nd character is ignored? If it is ignored then why does it ask for 22 character salt? 

","BCrypt expects a salt of a given alphabet: ./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz. As you can see the '-' is not in it and that's why your salt is invalid. A valid salt you could see plaintext in the hash-value.
In most cases it is best to omit the salt parameter. Without this parameter, the function will generate a cryptographically safe salt, from the random source of the operating system.
password_hash(""stackoverflow"", PASSWORD_DEFAULT);

Nevertheless you are right, when you say that BCrypt does not use the full 22 characters. It seems that BCrypt only uses 126 bits of the salt instead of the 128bits you get with 22 base64 encoded characters. For more information you can have a look at this discussion Why does crypt/blowfish generate the same hash....
","2111","<php><salt><bcrypt><password-hash><php-password-hash>","4","3","2","2014-12-20 14:53:06","27581346","2","1","978866","","2014-10-10 09:16:25","2014-10-10 08:41:22",""
"26295266","PHP password_hash function salt length 21 or 22?","Code:
echo password_hash(""stackoverflow"", PASSWORD_DEFAULT, ['salt' => 'twenty-one-characters'] );

Result:
Warning: password_hash(): Provided salt is too short: 21 expecting 22 

code: 
echo password_hash(""stackoverflow"", PASSWORD_DEFAULT, ['salt' => 'twenty-one-charactersA'] );

Result:
$2y$10$dHdlbnR5LW9uZS1jaGFyYOVyX13hK9eb4/KXMAkHsAJX..YR7t/32

code: 
echo password_hash(""stackoverflow"", PASSWORD_DEFAULT, ['salt' => 'twenty-one-charactersB'] );

$2y$10$dHdlbnR5LW9uZS1jaGFyYOVyX13hK9eb4/KXMAkHsAJX..YR7t/32

Question:
As you see, by appending A and B to 21 character strings we created two different salts of 22 characters, but, the HASHES are same! That is the 22nd character is ignored? If it is ignored then why does it ask for 22 character salt? 

","First, please don't provide your own salt. You're not going to do a better job generating it than the library does. And using static salts (like you did in the example) will compromise security. Just let it generate its own salt (incidentally, I believe letting a salt in is the biggest mistake I made in that API).
As far as 21 vs 22 characters, give this answer a read.
Basically, the salt is base64 encoded. This means that every 6 bits of the salt is encoded into 8 bits. So every byte of encoded salt is 6 bits.
21 characters is 126 bits. That means that only part of the 22nd character is used (the first 2 decoded bits). The reason you get the same hash with A and B, is that the leading 2 bits are the same for both characters.
In fact, there are only 4 unique hashes for the 22nd byte. 
","2111","<php><salt><bcrypt><password-hash><php-password-hash>","4","1","2","2014-12-20 14:53:06","27581346","2","1","978866","","2014-10-10 09:16:25","2014-10-10 08:41:22",""
"328711","How best to generate a random salt for a Web Site?","i'm wanting to generate a random salt value and put it into the Application state.
Now, i'm using a web farm, so the Application state will be different per machine. I don't want to purchase distributed state farm apps, either.
So .. what are some solutions for this? I thought i could hard-code it in the code OR the web.config file .. but that means the same salt for eva .. not very safe.
Anyone have any suggestions?
Remember - i'm after a unique key (eg a guid) that is the same across all machines. Maybe a config file is the only way?
","If I understand correctly, you want the machines to share a value, and you don't want the value to be the same forever. Ideally you'd prefer not to store it.
So, have the ""first"" machine generate a random value at startup, (using whatever entropy it can such as /dev/random. If you don't need a secure value, and don't have enough entropy at startup to create one anyway, use the time or whatever), and communicate it to all the others. As new machines join the cluster, they need to be able to find the value from one machine already in the cluster. Machines dropping out make no difference.
Which machine is the ""first""? Well, if you can always boot one machine before any others, and give it time to get to the point of generating a value, then you can use the trivial algorithm:
1) Look for other machines. If you find one, ask it the value.
2) If you don't find one, generate the value yourself.
If multiple machines are starting up at once then they need to decide amongst themselves which is the ""leader"". You could do this by choosing one yourself (e.g. a machine declares itself ""leader"" as soon as it receives a particular connection via the admin interface: on startup each machine waits until it either gets this connection, or hears from another machine that the other machine is the leader). It's trivial to do automatically on a token ring: the machine with the least MAC address or whatever is leader. But nobody uses token ring any more...
At the opposite extreme of an unreliable network I'm not sure it's even possible, unless all the machines know how many there will be in total (in which case it's just like the token ring, except that they all talk to each other until they've figured out who's the leader). With reliable broadcast, which is what you can assume within reasonable bounds on ethernet, I'm sure there's an optimal algorithm published somewhere, but I forget what it is (if I ever knew). I'd guess that everyone broadcasts who they think the leader is at regular intervals (including their own claim if they've not yet seen a better one). Once you've been listening to that for long enough (approx one interval), you'll know who the leader is, and you can start using the seed.
If the value is a secret, then obviously communication within the cluster must be secure. You might get that for free, depending on the network architecture.
","2097","<salt><web-farm><application-state>","5","4","3","2008-11-30 21:54:17","","2","","30674","Pure.Krome","2008-11-30 10:47:43","2008-11-30 10:35:11",""
"328711","How best to generate a random salt for a Web Site?","i'm wanting to generate a random salt value and put it into the Application state.
Now, i'm using a web farm, so the Application state will be different per machine. I don't want to purchase distributed state farm apps, either.
So .. what are some solutions for this? I thought i could hard-code it in the code OR the web.config file .. but that means the same salt for eva .. not very safe.
Anyone have any suggestions?
Remember - i'm after a unique key (eg a guid) that is the same across all machines. Maybe a config file is the only way?
","In a web farm scenario the machine key stored in machine.config might be what you are looking for. It is a randomly generated hash that must be the same across machines in the web farm.
","2097","<salt><web-farm><application-state>","5","2","3","2008-11-30 21:54:17","","2","","30674","Pure.Krome","2008-11-30 10:47:43","2008-11-30 10:35:11",""
"328711","How best to generate a random salt for a Web Site?","i'm wanting to generate a random salt value and put it into the Application state.
Now, i'm using a web farm, so the Application state will be different per machine. I don't want to purchase distributed state farm apps, either.
So .. what are some solutions for this? I thought i could hard-code it in the code OR the web.config file .. but that means the same salt for eva .. not very safe.
Anyone have any suggestions?
Remember - i'm after a unique key (eg a guid) that is the same across all machines. Maybe a config file is the only way?
","Here's a fun/interesting way: 
At the start of each day, i.e., after 00:00, lookup twitter or digg or friendfeed or anything that has frequently changing data for a detail just before/at 00:00. All the machines would get this same data AND it's guaranteed to be changing. In order to make it a secret, combine this detail with some secret key or the MAC of the DNS server or some such thing. 
I think this is simple enough and a fun thing. Of course, this would mean your website would depend on this external website for a trivial thing and might be difficult if the site is down. But in such cases you can retain and continue with previous day's data. 
Just wanted to write about it as a fun/interesting way :)
","2097","<salt><web-farm><application-state>","5","0","3","2008-11-30 21:54:17","","2","","30674","Pure.Krome","2008-11-30 10:47:43","2008-11-30 10:35:11",""
"16381098","How to configure 'cookie::$salt' in kohana","In this part of the Kohana documentation: (http://kohanaframework.org/3.1/guide/kohana/cookies) it says I can find 
Cookie::$salt = 'foobar';

In bootstrap.php.  
I don't see it there.  Am I just being thick, or is there a better way?
","It's not in the bootstrap.php file by default. I've added it to the file, after Kohana::modules and before the routes.
","2095","<cookies><kohana><salt>","1","2","2","2016-01-05 10:32:52","16383146","0","0","1472743","","2013-05-05 03:32:55","2013-05-05 03:27:51",""
"16381098","How to configure 'cookie::$salt' in kohana","In this part of the Kohana documentation: (http://kohanaframework.org/3.1/guide/kohana/cookies) it says I can find 
Cookie::$salt = 'foobar';

In bootstrap.php.  
I don't see it there.  Am I just being thick, or is there a better way?
","Looks like config updated in the latest version 3.3.4 (at the time of writing)
134 /**
135  * Cookie Salt
136  * @see  http://kohanaframework.org/3.3/guide/kohana/cookies
137  * 
138  * If you have not defined a cookie salt in your Cookie class then
139  * uncomment the line below and define a preferrably long salt.
140  */
141 // Cookie::$salt = NULL;
142 Cookie::$salt = 'LOASWnL7A1WKQMk1JALCP1H5BMelyIPQNVdXiGsbEEVhVtyApGsFC6LyINUsDHl1';

","2095","<cookies><kohana><salt>","1","0","2","2016-01-05 10:32:52","16383146","0","0","1472743","","2013-05-05 03:32:55","2013-05-05 03:27:51",""
"6155851","Secure way of exchanging email addresses (hashing) to allow matching for overlap on another list, but not reveal those for which there is no overlap?","I'm with an organization (Company A) that has a large email list.  I'm sending a 10,000 email subset of this list to another organization (Company B) to test for overlap (discover which email addresses are on both lists).  I want to send the list in a way that is easy for Company B to test for overlap, but difficult (ideally impossible) for Company B to ""decode"" the email addresses which are NOT already on their list.  Secondarily, I want to ensure that if the list I send winds up in the wrong hands (some 3rd party), it would be difficult for anyone else to learn the actual email addresses on the list.
My current solution is to simply pull the emails from our database as
SHA1(email + a_long_random_salt)

Using the same salt for each email address.
To do the match, I send the list of hashes and the salt (securely, separately) to Company B, and they simply search their database using
SELECT email FROM members WHERE SHA1(email + the_salt) IN(hash1, hash2, hash3....)

(Or they pre-compute the SHA1 hash for each address and store it in the DB with the email address so the hashing doesn't need to happen as the query is run)
A sufficiently long/random salt prevents against use of a precomputed rainbow table to crack the hashes.  I assume it to be rather unlikely that anyone has a rainbow table of millions upon millions of plausible email addresses salted with whatever 100 character random string I use as my salt. As long as the salt is kept secret, no 3rd party is going to decode this list with a rainbow table or brute force.  (Please, correct me if I'm somehow wrong here.)
The issue that I'm struggling with is there are obviously easily-obtained lists of millions upon millions of email addresses harvested from the web.  It would be pretty easy for Company B to obtain one of these lists, compute the hashes using the salt I've provided, and recover some significant portion of emails on the list I've sent (certainly not all, but a significant portion).
Is there some strategy to accomplish this match that I'm failing to come up with?  The only thing I can think of is to use a more complex hashing method (i.e. multiple iterations) to make it slower to match against a list of hundreds of millions of email addresses (that theoretical list scraped from the web).  The key is that it would really only be slower -- not really even difficult.  Also, I know that Company B's own email list is in the range of 1 million addresses, so I can't give them a hashing scheme that would take many seconds to compute for each address on that list of 1 million.  Simply making it slower doesn't solve the issue -- I think I need a completely different approach.
Honestly, this particular case this is more of an academic exercise for me than a real security concern.  I trust Company B is not going to try to do this (we work together often), and even if they did it would be no huge loss.  All they could possibly learn is email addresses of 10,000 people on our mailing list -- we're not talking about passwords, credit card numbers, etc.  If we were dealing with passwords or credit card numbers, I wouldn't even be considering developing some scheme of my own.  And, yes, of course I realize that SHA-256 or some other newer algorithm might be a bit preferable to SHA1, but only to some very limited extent.  It's not a brute force crack of the hash that I'm worried about here.
","You can conduct the exchange as a Secure Multi-Party Computation problem - with the goal of computing the unique email addresses.  
Quoting Wikipedia 

Secure multi-party computation (also
  known as secure computation or
  multi-party computation (MPC)) is a
  sub field of cryptography. The goal of
  methods for secure multi-party
  computation is to enable parties to
  jointly compute a function over their
  inputs, while at the same time keeping
  these inputs private.

If you visit the page http://en.wikipedia.org/wiki/Secure_multiparty_computation
There ""external links"" section contains libraries and references to get you started.
","2090","<security><encryption><sha1><salt>","1","1","3","2011-05-30 07:14:14","","1","1","","","","2011-05-27 17:41:50",""
"6155851","Secure way of exchanging email addresses (hashing) to allow matching for overlap on another list, but not reveal those for which there is no overlap?","I'm with an organization (Company A) that has a large email list.  I'm sending a 10,000 email subset of this list to another organization (Company B) to test for overlap (discover which email addresses are on both lists).  I want to send the list in a way that is easy for Company B to test for overlap, but difficult (ideally impossible) for Company B to ""decode"" the email addresses which are NOT already on their list.  Secondarily, I want to ensure that if the list I send winds up in the wrong hands (some 3rd party), it would be difficult for anyone else to learn the actual email addresses on the list.
My current solution is to simply pull the emails from our database as
SHA1(email + a_long_random_salt)

Using the same salt for each email address.
To do the match, I send the list of hashes and the salt (securely, separately) to Company B, and they simply search their database using
SELECT email FROM members WHERE SHA1(email + the_salt) IN(hash1, hash2, hash3....)

(Or they pre-compute the SHA1 hash for each address and store it in the DB with the email address so the hashing doesn't need to happen as the query is run)
A sufficiently long/random salt prevents against use of a precomputed rainbow table to crack the hashes.  I assume it to be rather unlikely that anyone has a rainbow table of millions upon millions of plausible email addresses salted with whatever 100 character random string I use as my salt. As long as the salt is kept secret, no 3rd party is going to decode this list with a rainbow table or brute force.  (Please, correct me if I'm somehow wrong here.)
The issue that I'm struggling with is there are obviously easily-obtained lists of millions upon millions of email addresses harvested from the web.  It would be pretty easy for Company B to obtain one of these lists, compute the hashes using the salt I've provided, and recover some significant portion of emails on the list I've sent (certainly not all, but a significant portion).
Is there some strategy to accomplish this match that I'm failing to come up with?  The only thing I can think of is to use a more complex hashing method (i.e. multiple iterations) to make it slower to match against a list of hundreds of millions of email addresses (that theoretical list scraped from the web).  The key is that it would really only be slower -- not really even difficult.  Also, I know that Company B's own email list is in the range of 1 million addresses, so I can't give them a hashing scheme that would take many seconds to compute for each address on that list of 1 million.  Simply making it slower doesn't solve the issue -- I think I need a completely different approach.
Honestly, this particular case this is more of an academic exercise for me than a real security concern.  I trust Company B is not going to try to do this (we work together often), and even if they did it would be no huge loss.  All they could possibly learn is email addresses of 10,000 people on our mailing list -- we're not talking about passwords, credit card numbers, etc.  If we were dealing with passwords or credit card numbers, I wouldn't even be considering developing some scheme of my own.  And, yes, of course I realize that SHA-256 or some other newer algorithm might be a bit preferable to SHA1, but only to some very limited extent.  It's not a brute force crack of the hash that I'm worried about here.
","One thing I can think of is a brute force attack on known domains. Consider the following factors:

@hotmail.com, @gmail.com and @yahoo.com have a great share of the market
the list of last names is finite and not too long. The same for the list of first names

Taking the combination of the name John and surname Doe, we can construct a set of addresses like JDoe@hotmail.com, DoeJ@yahoo.com, JohnDow@hotmail.com etc. The set won't be very extensive. 
Depending on how important / benefitial such data mining is (i.e. how much will B gain from knowing that John Doe is in your list), attack that I described can still be profitable. Yes, I remember about salts, but still the number of name/domain combinations is not too large to be unbreakable for good parallel brute force attack. 
","2090","<security><encryption><sha1><salt>","1","0","3","2011-05-30 07:14:14","","1","1","","","","2011-05-27 17:41:50",""
"6155851","Secure way of exchanging email addresses (hashing) to allow matching for overlap on another list, but not reveal those for which there is no overlap?","I'm with an organization (Company A) that has a large email list.  I'm sending a 10,000 email subset of this list to another organization (Company B) to test for overlap (discover which email addresses are on both lists).  I want to send the list in a way that is easy for Company B to test for overlap, but difficult (ideally impossible) for Company B to ""decode"" the email addresses which are NOT already on their list.  Secondarily, I want to ensure that if the list I send winds up in the wrong hands (some 3rd party), it would be difficult for anyone else to learn the actual email addresses on the list.
My current solution is to simply pull the emails from our database as
SHA1(email + a_long_random_salt)

Using the same salt for each email address.
To do the match, I send the list of hashes and the salt (securely, separately) to Company B, and they simply search their database using
SELECT email FROM members WHERE SHA1(email + the_salt) IN(hash1, hash2, hash3....)

(Or they pre-compute the SHA1 hash for each address and store it in the DB with the email address so the hashing doesn't need to happen as the query is run)
A sufficiently long/random salt prevents against use of a precomputed rainbow table to crack the hashes.  I assume it to be rather unlikely that anyone has a rainbow table of millions upon millions of plausible email addresses salted with whatever 100 character random string I use as my salt. As long as the salt is kept secret, no 3rd party is going to decode this list with a rainbow table or brute force.  (Please, correct me if I'm somehow wrong here.)
The issue that I'm struggling with is there are obviously easily-obtained lists of millions upon millions of email addresses harvested from the web.  It would be pretty easy for Company B to obtain one of these lists, compute the hashes using the salt I've provided, and recover some significant portion of emails on the list I've sent (certainly not all, but a significant portion).
Is there some strategy to accomplish this match that I'm failing to come up with?  The only thing I can think of is to use a more complex hashing method (i.e. multiple iterations) to make it slower to match against a list of hundreds of millions of email addresses (that theoretical list scraped from the web).  The key is that it would really only be slower -- not really even difficult.  Also, I know that Company B's own email list is in the range of 1 million addresses, so I can't give them a hashing scheme that would take many seconds to compute for each address on that list of 1 million.  Simply making it slower doesn't solve the issue -- I think I need a completely different approach.
Honestly, this particular case this is more of an academic exercise for me than a real security concern.  I trust Company B is not going to try to do this (we work together often), and even if they did it would be no huge loss.  All they could possibly learn is email addresses of 10,000 people on our mailing list -- we're not talking about passwords, credit card numbers, etc.  If we were dealing with passwords or credit card numbers, I wouldn't even be considering developing some scheme of my own.  And, yes, of course I realize that SHA-256 or some other newer algorithm might be a bit preferable to SHA1, but only to some very limited extent.  It's not a brute force crack of the hash that I'm worried about here.
","It appears to me that your problem can be restated as:

Company B has access to a list of 1
  million email address, List A.  They
  also have access to different list of
  several million email addresses, List
  B.  I would like Company B to be able
  to run an algorithm to be able to
  determine which of the email addresses
  in List A is also on our list, but
  not be able to run that algorithm against List B.

Re-stated like that, it appears to be a logical impossibility - there is really no difference between their customer database and a list of email addresses they may have downloaded elsewhere.
","2090","<security><encryption><sha1><salt>","1","0","3","2011-05-30 07:14:14","","1","1","","","","2011-05-27 17:41:50",""
"9201529","Authenticating plain text password against md5 hash","Hello and thank you for reading,
I have a task to authenticate a un / pw pair against a password stored in a MySQL database which has joomla serving as the CMS / frontend.
The joomla web application supports storing usernames and passwords in said database and it would appear that it goes through the following steps when storing a new user -
$salt  = JUserHelper::genRandomPassword(32);
$crypt = JUserHelper::getCryptedPassword($array['password'], $salt);
$array['password'] = $crypt.':'.$salt;

genRandomPassword looks like - 
/**
 * Generate a random password
 *
 * @static
 * @param   int     $length Length of the password to generate
 * @return  string          Random Password
 * @since   1.5
 */
public static function genRandomPassword($length = 8)
{
    $salt = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"";
    $len = strlen($salt);
    $makepass = '';

    $stat = @stat(__FILE__);
    if (empty($stat) || !is_array($stat)) $stat = array(php_uname());

    mt_srand(crc32(microtime() . implode('|', $stat)));

    for ($i = 0; $i < $length; $i ++) {
        $makepass .= $salt[mt_rand(0, $len -1)];
    }

    return $makepass;
}

Finally, getCryptedPassword  and getSalt look like - 
/**
 * Formats a password using the current encryption.
 *
 * @access  public
 * @param   string  $plaintext  The plaintext password to encrypt.
 * @param   string  $salt       The salt to use to encrypt the password. []
 *                              If not present, a new salt will be
 *                              generated.
 * @param   string  $encryption The kind of pasword encryption to use.
 *                              Defaults to md5-hex.
 * @param   boolean $show_encrypt  Some password systems prepend the kind of
 *                              encryption to the crypted password ({SHA},
 *                              etc). Defaults to false.
 *
 * @return string  The encrypted password.
 */
public static function getCryptedPassword($plaintext, $salt = '', $encryption = 'md5-hex', $show_encrypt = false)
{
    // Get the salt to use.
    $salt = JUserHelper::getSalt($encryption, $salt, $plaintext);

    // Encrypt the password.
    switch ($encryption)
    {
        case 'plain' :
            return $plaintext;

        case 'sha' :
            $encrypted = base64_encode(mhash(MHASH_SHA1, $plaintext));
            return ($show_encrypt) ? '{SHA}'.$encrypted : $encrypted;

        case 'crypt' :
        case 'crypt-des' :
        case 'crypt-md5' :
        case 'crypt-blowfish' :
            return ($show_encrypt ? '{crypt}' : '').crypt($plaintext, $salt);

        case 'md5-base64' :
            $encrypted = base64_encode(mhash(MHASH_MD5, $plaintext));
            return ($show_encrypt) ? '{MD5}'.$encrypted : $encrypted;

        case 'ssha' :
            $encrypted = base64_encode(mhash(MHASH_SHA1, $plaintext.$salt).$salt);
            return ($show_encrypt) ? '{SSHA}'.$encrypted : $encrypted;

        case 'smd5' :
            $encrypted = base64_encode(mhash(MHASH_MD5, $plaintext.$salt).$salt);
            return ($show_encrypt) ? '{SMD5}'.$encrypted : $encrypted;

        case 'aprmd5' :
            $length = strlen($plaintext);
            $context = $plaintext.'$apr1$'.$salt;
            $binary = JUserHelper::_bin(md5($plaintext.$salt.$plaintext));

            for ($i = $length; $i > 0; $i -= 16) {
                $context .= substr($binary, 0, ($i > 16 ? 16 : $i));
            }
            for ($i = $length; $i > 0; $i >>= 1) {
                $context .= ($i & 1) ? chr(0) : $plaintext[0];
            }

            $binary = JUserHelper::_bin(md5($context));

            for ($i = 0; $i < 1000; $i ++) {
                $new = ($i & 1) ? $plaintext : substr($binary, 0, 16);
                if ($i % 3) {
                    $new .= $salt;
                }
                if ($i % 7) {
                    $new .= $plaintext;
                }
                $new .= ($i & 1) ? substr($binary, 0, 16) : $plaintext;
                $binary = JUserHelper::_bin(md5($new));
            }

            $p = array ();
            for ($i = 0; $i < 5; $i ++) {
                $k = $i +6;
                $j = $i +12;
                if ($j == 16) {
                    $j = 5;
                }
                $p[] = JUserHelper::_toAPRMD5((ord($binary[$i]) << 16) | (ord($binary[$k]) << 8) | (ord($binary[$j])), 5);
            }

            return '$apr1$'.$salt.'$'.implode('', $p).JUserHelper::_toAPRMD5(ord($binary[11]), 3);

        case 'md5-hex' :
        default :
            $encrypted = ($salt) ? md5($plaintext.$salt) : md5($plaintext);
            return ($show_encrypt) ? '{MD5}'.$encrypted : $encrypted;
    }
}

/**
 * Returns a salt for the appropriate kind of password encryption.
 * Optionally takes a seed and a plaintext password, to extract the seed
 * of an existing password, or for encryption types that use the plaintext
 * in the generation of the salt.
 *
 * @access public
 * @param string $encryption  The kind of pasword encryption to use.
 *                          Defaults to md5-hex.
 * @param string $seed      The seed to get the salt from (probably a
 *                          previously generated password). Defaults to
 *                          generating a new seed.
 * @param string $plaintext The plaintext password that we're generating
 *                          a salt for. Defaults to none.
 *
 * @return string  The generated or extracted salt.
 */
public static function getSalt($encryption = 'md5-hex', $seed = '', $plaintext = '')
{
    // Encrypt the password.
    switch ($encryption)
    {
        case 'crypt' :
        case 'crypt-des' :
            if ($seed) {
                return substr(preg_replace('|^{crypt}|i', '', $seed), 0, 2);
            } else {
                return substr(md5(mt_rand()), 0, 2);
            }
            break;

        case 'crypt-md5' :
            if ($seed) {
                return substr(preg_replace('|^{crypt}|i', '', $seed), 0, 12);
            } else {
                return '$1$'.substr(md5(mt_rand()), 0, 8).'$';
            }
            break;

        case 'crypt-blowfish' :
            if ($seed) {
                return substr(preg_replace('|^{crypt}|i', '', $seed), 0, 16);
            } else {
                return '$2$'.substr(md5(mt_rand()), 0, 12).'$';
            }
            break;

        case 'ssha' :
            if ($seed) {
                return substr(preg_replace('|^{SSHA}|', '', $seed), -20);
            } else {
                return mhash_keygen_s2k(MHASH_SHA1, $plaintext, substr(pack('h*', md5(mt_rand())), 0, 8), 4);
            }
            break;

        case 'smd5' :
            if ($seed) {
                return substr(preg_replace('|^{SMD5}|', '', $seed), -16);
            } else {
                return mhash_keygen_s2k(MHASH_MD5, $plaintext, substr(pack('h*', md5(mt_rand())), 0, 8), 4);
            }
            break;

        case 'aprmd5' :
            /* 64 characters that are valid for APRMD5 passwords. */
            $APRMD5 = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';

            if ($seed) {
                return substr(preg_replace('/^\$apr1\$(.{8}).*/', '\\1', $seed), 0, 8);
            } else {
                $salt = '';
                for ($i = 0; $i < 8; $i ++) {
                    $salt .= $APRMD5 {
                        rand(0, 63)
                        };
                }
                return $salt;
            }
            break;

        default :
            $salt = '';
            if ($seed) {
                $salt = $seed;
            }
            return $salt;
            break;
    }
}

I'm no PHP or Joomla expert but I understand to a certain extent what is going on. I believe as far as an encryption algorithm goes, md5 is being used.
My question is -
What do I need to do to authenticate a un / pw combo against a password stored like this? Presently the salt isn't being stored along with the PW so what do I need to do here exactly? I don't need any code or pseudo-code I just need a clear list of steps to take. If you do feel like providing code I'm writing my application in Java.
EDIT - 
Okay I've gotten further supplying the salt / crypto password to the authentication library I'm using however it is saying that they don't matched even after going through all the hasing / decryption. I guess I'll have to play around with this a bit more.
Using that example PW I supplied in the comment below, here's what my java code looks like :
SimpleAuthenticationInfo info = new SimpleAuthenticationInfo(""TestUser"",
            ""564c6d2c10a7135fe0ddf0b21d1a1226"", getName());
    info.setCredentialsSalt(new SimpleByteSource(""B9YEkhvnV8pZ8BU7fvVlIVTbEux5N17J""));


    return info;

And this is the response I get - 
Submitted credentials for token [org.apache.shiro.authc.UsernamePasswordToken - TestUser, rememberMe=false] did not match the expected credentials.

I guess I'm close but I'm still not there. Since we're not passing an algorithm name into the getCryptedPassword PHP function, I'm guessing that it's using the default which appears to be MD5. I wonder why this isn't working.
Thank you,
-Zachary Carter 
","Try this.
Given a user name $un and a plain text password $pw:
jimport( 'joomla.user.helper' );
$userId = JUserHelper::getUserId( $un );
$user = JUser::getInstance( $userId );

$existingPasswordParts = explode( ':', $user->password );
$salt = $existingPasswordParts[1];
$crypt = JUserHelper::getCryptedPassword( $pw, $salt );
$password = $crypt . ':' . $salt;

if ( $user->password == $password )
{
  /* match */
}

The user is fetched, and the used salt is re-used to encrypt the plain text password. After that, both encrypted passwords can be compared against each other.
This should work on J1.6, J1.7 and J2.5.
","2086","<authentication><encryption><joomla><md5><salt>","1","1","2","2013-09-25 03:27:04","9213601","9","","271955","","2012-02-08 22:02:35","2012-02-08 21:15:20",""
"9201529","Authenticating plain text password against md5 hash","Hello and thank you for reading,
I have a task to authenticate a un / pw pair against a password stored in a MySQL database which has joomla serving as the CMS / frontend.
The joomla web application supports storing usernames and passwords in said database and it would appear that it goes through the following steps when storing a new user -
$salt  = JUserHelper::genRandomPassword(32);
$crypt = JUserHelper::getCryptedPassword($array['password'], $salt);
$array['password'] = $crypt.':'.$salt;

genRandomPassword looks like - 
/**
 * Generate a random password
 *
 * @static
 * @param   int     $length Length of the password to generate
 * @return  string          Random Password
 * @since   1.5
 */
public static function genRandomPassword($length = 8)
{
    $salt = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"";
    $len = strlen($salt);
    $makepass = '';

    $stat = @stat(__FILE__);
    if (empty($stat) || !is_array($stat)) $stat = array(php_uname());

    mt_srand(crc32(microtime() . implode('|', $stat)));

    for ($i = 0; $i < $length; $i ++) {
        $makepass .= $salt[mt_rand(0, $len -1)];
    }

    return $makepass;
}

Finally, getCryptedPassword  and getSalt look like - 
/**
 * Formats a password using the current encryption.
 *
 * @access  public
 * @param   string  $plaintext  The plaintext password to encrypt.
 * @param   string  $salt       The salt to use to encrypt the password. []
 *                              If not present, a new salt will be
 *                              generated.
 * @param   string  $encryption The kind of pasword encryption to use.
 *                              Defaults to md5-hex.
 * @param   boolean $show_encrypt  Some password systems prepend the kind of
 *                              encryption to the crypted password ({SHA},
 *                              etc). Defaults to false.
 *
 * @return string  The encrypted password.
 */
public static function getCryptedPassword($plaintext, $salt = '', $encryption = 'md5-hex', $show_encrypt = false)
{
    // Get the salt to use.
    $salt = JUserHelper::getSalt($encryption, $salt, $plaintext);

    // Encrypt the password.
    switch ($encryption)
    {
        case 'plain' :
            return $plaintext;

        case 'sha' :
            $encrypted = base64_encode(mhash(MHASH_SHA1, $plaintext));
            return ($show_encrypt) ? '{SHA}'.$encrypted : $encrypted;

        case 'crypt' :
        case 'crypt-des' :
        case 'crypt-md5' :
        case 'crypt-blowfish' :
            return ($show_encrypt ? '{crypt}' : '').crypt($plaintext, $salt);

        case 'md5-base64' :
            $encrypted = base64_encode(mhash(MHASH_MD5, $plaintext));
            return ($show_encrypt) ? '{MD5}'.$encrypted : $encrypted;

        case 'ssha' :
            $encrypted = base64_encode(mhash(MHASH_SHA1, $plaintext.$salt).$salt);
            return ($show_encrypt) ? '{SSHA}'.$encrypted : $encrypted;

        case 'smd5' :
            $encrypted = base64_encode(mhash(MHASH_MD5, $plaintext.$salt).$salt);
            return ($show_encrypt) ? '{SMD5}'.$encrypted : $encrypted;

        case 'aprmd5' :
            $length = strlen($plaintext);
            $context = $plaintext.'$apr1$'.$salt;
            $binary = JUserHelper::_bin(md5($plaintext.$salt.$plaintext));

            for ($i = $length; $i > 0; $i -= 16) {
                $context .= substr($binary, 0, ($i > 16 ? 16 : $i));
            }
            for ($i = $length; $i > 0; $i >>= 1) {
                $context .= ($i & 1) ? chr(0) : $plaintext[0];
            }

            $binary = JUserHelper::_bin(md5($context));

            for ($i = 0; $i < 1000; $i ++) {
                $new = ($i & 1) ? $plaintext : substr($binary, 0, 16);
                if ($i % 3) {
                    $new .= $salt;
                }
                if ($i % 7) {
                    $new .= $plaintext;
                }
                $new .= ($i & 1) ? substr($binary, 0, 16) : $plaintext;
                $binary = JUserHelper::_bin(md5($new));
            }

            $p = array ();
            for ($i = 0; $i < 5; $i ++) {
                $k = $i +6;
                $j = $i +12;
                if ($j == 16) {
                    $j = 5;
                }
                $p[] = JUserHelper::_toAPRMD5((ord($binary[$i]) << 16) | (ord($binary[$k]) << 8) | (ord($binary[$j])), 5);
            }

            return '$apr1$'.$salt.'$'.implode('', $p).JUserHelper::_toAPRMD5(ord($binary[11]), 3);

        case 'md5-hex' :
        default :
            $encrypted = ($salt) ? md5($plaintext.$salt) : md5($plaintext);
            return ($show_encrypt) ? '{MD5}'.$encrypted : $encrypted;
    }
}

/**
 * Returns a salt for the appropriate kind of password encryption.
 * Optionally takes a seed and a plaintext password, to extract the seed
 * of an existing password, or for encryption types that use the plaintext
 * in the generation of the salt.
 *
 * @access public
 * @param string $encryption  The kind of pasword encryption to use.
 *                          Defaults to md5-hex.
 * @param string $seed      The seed to get the salt from (probably a
 *                          previously generated password). Defaults to
 *                          generating a new seed.
 * @param string $plaintext The plaintext password that we're generating
 *                          a salt for. Defaults to none.
 *
 * @return string  The generated or extracted salt.
 */
public static function getSalt($encryption = 'md5-hex', $seed = '', $plaintext = '')
{
    // Encrypt the password.
    switch ($encryption)
    {
        case 'crypt' :
        case 'crypt-des' :
            if ($seed) {
                return substr(preg_replace('|^{crypt}|i', '', $seed), 0, 2);
            } else {
                return substr(md5(mt_rand()), 0, 2);
            }
            break;

        case 'crypt-md5' :
            if ($seed) {
                return substr(preg_replace('|^{crypt}|i', '', $seed), 0, 12);
            } else {
                return '$1$'.substr(md5(mt_rand()), 0, 8).'$';
            }
            break;

        case 'crypt-blowfish' :
            if ($seed) {
                return substr(preg_replace('|^{crypt}|i', '', $seed), 0, 16);
            } else {
                return '$2$'.substr(md5(mt_rand()), 0, 12).'$';
            }
            break;

        case 'ssha' :
            if ($seed) {
                return substr(preg_replace('|^{SSHA}|', '', $seed), -20);
            } else {
                return mhash_keygen_s2k(MHASH_SHA1, $plaintext, substr(pack('h*', md5(mt_rand())), 0, 8), 4);
            }
            break;

        case 'smd5' :
            if ($seed) {
                return substr(preg_replace('|^{SMD5}|', '', $seed), -16);
            } else {
                return mhash_keygen_s2k(MHASH_MD5, $plaintext, substr(pack('h*', md5(mt_rand())), 0, 8), 4);
            }
            break;

        case 'aprmd5' :
            /* 64 characters that are valid for APRMD5 passwords. */
            $APRMD5 = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';

            if ($seed) {
                return substr(preg_replace('/^\$apr1\$(.{8}).*/', '\\1', $seed), 0, 8);
            } else {
                $salt = '';
                for ($i = 0; $i < 8; $i ++) {
                    $salt .= $APRMD5 {
                        rand(0, 63)
                        };
                }
                return $salt;
            }
            break;

        default :
            $salt = '';
            if ($seed) {
                $salt = $seed;
            }
            return $salt;
            break;
    }
}

I'm no PHP or Joomla expert but I understand to a certain extent what is going on. I believe as far as an encryption algorithm goes, md5 is being used.
My question is -
What do I need to do to authenticate a un / pw combo against a password stored like this? Presently the salt isn't being stored along with the PW so what do I need to do here exactly? I don't need any code or pseudo-code I just need a clear list of steps to take. If you do feel like providing code I'm writing my application in Java.
EDIT - 
Okay I've gotten further supplying the salt / crypto password to the authentication library I'm using however it is saying that they don't matched even after going through all the hasing / decryption. I guess I'll have to play around with this a bit more.
Using that example PW I supplied in the comment below, here's what my java code looks like :
SimpleAuthenticationInfo info = new SimpleAuthenticationInfo(""TestUser"",
            ""564c6d2c10a7135fe0ddf0b21d1a1226"", getName());
    info.setCredentialsSalt(new SimpleByteSource(""B9YEkhvnV8pZ8BU7fvVlIVTbEux5N17J""));


    return info;

And this is the response I get - 
Submitted credentials for token [org.apache.shiro.authc.UsernamePasswordToken - TestUser, rememberMe=false] did not match the expected credentials.

I guess I'm close but I'm still not there. Since we're not passing an algorithm name into the getCryptedPassword PHP function, I'm guessing that it's using the default which appears to be MD5. I wonder why this isn't working.
Thank you,
-Zachary Carter 
","Joomla was building the hash as plain-text pw + salt but when Shiro is authenticating it builds the hash as salt + plain-text pw. The solution was subclassing SimpleCredentialsMatcher and AbstractHash. I couldn't override the methods in the existing subclasses because they were all protected.
","2086","<authentication><encryption><joomla><md5><salt>","1","1","2","2013-09-25 03:27:04","9213601","9","","271955","","2012-02-08 22:02:35","2012-02-08 21:15:20",""
"11712750","Is storing a salt in the MySQL table secure?","
Possible Duplicate:
Best way to prevent SQL Injection in PHP
The necessity of hiding the salt for a hash 

I'm very new to MySQL and PHP, and have started self-learning it over the past couple of days and today I was looking at encryption for passwords etc. I've been looking through many webpages with information on the topic and most of them are saying to generate a random salt for every entry in the table (which I understand, you don't want the same salt for every entry) and this salt should then be stored in the table alongside the entry.
From what I've understood (correct me if I'm wrong), the encryption of the password doesn't prevent hackers from accessing it, rather just masks the true value if they do get access to the database. Surely if this is the case, you wouldn't want to store the salt in the table too - if the hacker has accessed the database and can see the encrypted data, showing him the salt just makes his job of decrypting infinitely easier?
","The salt isn't used to encrypt. Instead, it goes (together with the password) into a hash function. That way, nobody (not even your application) can determine the password, but you can verify a password.
The salt is then used to require the attacker to attack each password hash individually (if the attacker wants just one password, the salt doesn't help in any way). Thanks to rainbow tables, it is fairly easy to compute the outputs of the hash function for common passwords.
The salt value is not secret, and can be safely stored in a MySQL database (or even published).
","2080","<php><mysql><encryption><salt>","1","3","4","2012-07-29 20:52:59","11712797","12","1","-1","","2017-05-23 12:00:40","2012-07-29 20:39:20","2012-07-29 21:25:03"
"11712750","Is storing a salt in the MySQL table secure?","
Possible Duplicate:
Best way to prevent SQL Injection in PHP
The necessity of hiding the salt for a hash 

I'm very new to MySQL and PHP, and have started self-learning it over the past couple of days and today I was looking at encryption for passwords etc. I've been looking through many webpages with information on the topic and most of them are saying to generate a random salt for every entry in the table (which I understand, you don't want the same salt for every entry) and this salt should then be stored in the table alongside the entry.
From what I've understood (correct me if I'm wrong), the encryption of the password doesn't prevent hackers from accessing it, rather just masks the true value if they do get access to the database. Surely if this is the case, you wouldn't want to store the salt in the table too - if the hacker has accessed the database and can see the encrypted data, showing him the salt just makes his job of decrypting infinitely easier?
","The purpose of the salt is to prevent the use of Rainbow tables.These would allow a hacker to have generated a large number of pre generated hashes for certain passwords. By appending the salt to the password before it is hashed the hash is completely different than the original password. 
password => 5f4dcc3b5aa765d61d8327deb882cf99
password+saltvalue => 1d7dc54c316b11f3a38cc24fa68e2b6a

thus they would need to recreate the hash for each salt value which is unpractical.
","2080","<php><mysql><encryption><salt>","1","2","4","2012-07-29 20:52:59","11712797","12","1","-1","","2017-05-23 12:00:40","2012-07-29 20:39:20","2012-07-29 21:25:03"
"11712750","Is storing a salt in the MySQL table secure?","
Possible Duplicate:
Best way to prevent SQL Injection in PHP
The necessity of hiding the salt for a hash 

I'm very new to MySQL and PHP, and have started self-learning it over the past couple of days and today I was looking at encryption for passwords etc. I've been looking through many webpages with information on the topic and most of them are saying to generate a random salt for every entry in the table (which I understand, you don't want the same salt for every entry) and this salt should then be stored in the table alongside the entry.
From what I've understood (correct me if I'm wrong), the encryption of the password doesn't prevent hackers from accessing it, rather just masks the true value if they do get access to the database. Surely if this is the case, you wouldn't want to store the salt in the table too - if the hacker has accessed the database and can see the encrypted data, showing him the salt just makes his job of decrypting infinitely easier?
","It is perfectly fine to store the salt in the way that you are planning to.  In fact it is fine to allow the attacker to see the salts.  The purpose of the salt is to prevent people from being able to use prebuilt look up tables called rainbow tables by extending the size of the message space.  All the salt does is make them throw out any precomputation and solve the whole problem which is time consuming but certainly possible (especially for hashes like md5 -- you should move to sha256)
You want to use different salts for each user so that an attacker would have to do the full amount of work for each password they recover rather than just generate a new table based on a single salt.
","2080","<php><mysql><encryption><salt>","1","2","4","2012-07-29 20:52:59","11712797","12","1","-1","","2017-05-23 12:00:40","2012-07-29 20:39:20","2012-07-29 21:25:03"
"11712750","Is storing a salt in the MySQL table secure?","
Possible Duplicate:
Best way to prevent SQL Injection in PHP
The necessity of hiding the salt for a hash 

I'm very new to MySQL and PHP, and have started self-learning it over the past couple of days and today I was looking at encryption for passwords etc. I've been looking through many webpages with information on the topic and most of them are saying to generate a random salt for every entry in the table (which I understand, you don't want the same salt for every entry) and this salt should then be stored in the table alongside the entry.
From what I've understood (correct me if I'm wrong), the encryption of the password doesn't prevent hackers from accessing it, rather just masks the true value if they do get access to the database. Surely if this is the case, you wouldn't want to store the salt in the table too - if the hacker has accessed the database and can see the encrypted data, showing him the salt just makes his job of decrypting infinitely easier?
","You can consider salt as something 'semi unique', it really does not have to be additional  column called salt. Username, user email is also a kind of salt. So they are actually stored in db, next to hashed password. One problem with this approach occur when user decide to change a username or email.
","2080","<php><mysql><encryption><salt>","1","-1","4","2012-07-29 20:52:59","11712797","12","1","-1","","2017-05-23 12:00:40","2012-07-29 20:39:20","2012-07-29 21:25:03"
"16069974","Jasypt encrypted String not being able to decrypt on another machine","Our security department wants us to use 256-bit encryption to encrypt SSN, Names of Users etc, so we decided to go with JASYPT with the sample code below:
encryptor = new StandardPBEStringEncryptor();
encryptor.setProvider(new BouncyCastleProvider());
encryptor.setAlgorithm(""PBEWITHSHA256AND256BITAES-CBC-BC"");
encryptor.setPassword(OUR_KEY)
encryptor.encrypt(""TEXT TO ECNCRYPT"")

The problem we noticed is when our application creates an encrypted record from our local machine, the application on the app-dev server cannot decrypt it and vice versa even though the key is same. It seems like JASYPT is adding some machine specific information in the salt (Mac address etc).
Even using FixedStringSaltGenerator or ZeroSaltGenerator does not help. This creates a problem for us because if we ever migrated our production server to another machine, or refreshed pre-prod data with the prod data, we may need a couple of million years to recover the information.
The security department wants us to use a well know library and not brew an in-house solution. Can someone please throw some light on this issue on how we can generate encrypted string that can be decrypted across different machines using jasypt 256 bit encryption, or when we refresh pre-prod database with prod data, how we would be able to recover names etc that were encrypted through a different server?
Any useful insights will be greatly appreciated.
","I know this is a pretty old question but I recently experienced this issue and the resolution for me had nothing to do with the differences in machine operating system endianness. 
It had to do with a character in the password itself, the dollar sign character ($), that was somehow considered to be a special character in Linux vs not being considered special in Windows. So everything worked fine encrypting the values in Windows, but when I swapped over to Linux and tried to decrypt the values with the same password using the jasypt command line decrypt.sh script, I got the error message ""Operation not possible (Bad input or parameters)"" and noticed that the password in the jasypt decrypt output arguments list was different than the one I had typed in (the script apparently chopped off the part of the password from the special character until the end of the password string). 
Anyway, my solution was to change the password to not use a special character and then it worked. Hope this helps some poor soul who happens to run across this same issue in future, because I wasted 2 days on it.
","2072","<java><encryption><salt><jasypt>","1","0","3","2018-03-28 01:39:05","","5","3","474189","","2013-04-18 11:56:20","2013-04-17 20:47:27",""
"16069974","Jasypt encrypted String not being able to decrypt on another machine","Our security department wants us to use 256-bit encryption to encrypt SSN, Names of Users etc, so we decided to go with JASYPT with the sample code below:
encryptor = new StandardPBEStringEncryptor();
encryptor.setProvider(new BouncyCastleProvider());
encryptor.setAlgorithm(""PBEWITHSHA256AND256BITAES-CBC-BC"");
encryptor.setPassword(OUR_KEY)
encryptor.encrypt(""TEXT TO ECNCRYPT"")

The problem we noticed is when our application creates an encrypted record from our local machine, the application on the app-dev server cannot decrypt it and vice versa even though the key is same. It seems like JASYPT is adding some machine specific information in the salt (Mac address etc).
Even using FixedStringSaltGenerator or ZeroSaltGenerator does not help. This creates a problem for us because if we ever migrated our production server to another machine, or refreshed pre-prod data with the prod data, we may need a couple of million years to recover the information.
The security department wants us to use a well know library and not brew an in-house solution. Can someone please throw some light on this issue on how we can generate encrypted string that can be decrypted across different machines using jasypt 256 bit encryption, or when we refresh pre-prod database with prod data, how we would be able to recover names etc that were encrypted through a different server?
Any useful insights will be greatly appreciated.
","use single quotes instead of double quotes to wrap your input string. This solution worked when i had a issue with encryption and decryption of string with $.
","2072","<java><encryption><salt><jasypt>","1","0","3","2018-03-28 01:39:05","","5","3","474189","","2013-04-18 11:56:20","2013-04-17 20:47:27",""
"16069974","Jasypt encrypted String not being able to decrypt on another machine","Our security department wants us to use 256-bit encryption to encrypt SSN, Names of Users etc, so we decided to go with JASYPT with the sample code below:
encryptor = new StandardPBEStringEncryptor();
encryptor.setProvider(new BouncyCastleProvider());
encryptor.setAlgorithm(""PBEWITHSHA256AND256BITAES-CBC-BC"");
encryptor.setPassword(OUR_KEY)
encryptor.encrypt(""TEXT TO ECNCRYPT"")

The problem we noticed is when our application creates an encrypted record from our local machine, the application on the app-dev server cannot decrypt it and vice versa even though the key is same. It seems like JASYPT is adding some machine specific information in the salt (Mac address etc).
Even using FixedStringSaltGenerator or ZeroSaltGenerator does not help. This creates a problem for us because if we ever migrated our production server to another machine, or refreshed pre-prod data with the prod data, we may need a couple of million years to recover the information.
The security department wants us to use a well know library and not brew an in-house solution. Can someone please throw some light on this issue on how we can generate encrypted string that can be decrypted across different machines using jasypt 256 bit encryption, or when we refresh pre-prod database with prod data, how we would be able to recover names etc that were encrypted through a different server?
Any useful insights will be greatly appreciated.
","your key might be containing some special characters which shell substitute with something else.
do a echo ""yourkey"" > file
and check the content of this file. 
then use this content as a key to decrypt; it should be able to decrypt the encrypted string.
","2072","<java><encryption><salt><jasypt>","1","0","3","2018-03-28 01:39:05","","5","3","474189","","2013-04-18 11:56:20","2013-04-17 20:47:27",""
"4975231","Password Encription (SHA1) by Oracle Weblogic 10.3.2","Weblogic 10.3.2 uses SHA-1 (and others) for pass encryption. For example the following password: 

abcdefg

with SHA-1 encryption results:

teshjSf9GOUIvRHljjMafld8YsWTlQ4=

I have tried various websites that do SHA-! encryption, but none that result with the above answer. There is a possibility Salt is being utilized. Basically, what steps were taken to get the result.
Any help is appreciated.
","Passwords should be salted. Hopefully even Oracle knows that. If so, you'll need the salt for a particular password.
You'll also need to know the number of times the hash function was applied, and how the salt was combined with the password. I doubt this is considered a published interface, so WebLogic is unlikely to document this.
","2064","<encryption><weblogic><sha1><weblogic-10.x><salt>","0","1","2","2015-02-06 09:27:19","4975309","0","2","","","","2011-02-11 23:53:00",""
"4975231","Password Encription (SHA1) by Oracle Weblogic 10.3.2","Weblogic 10.3.2 uses SHA-1 (and others) for pass encryption. For example the following password: 

abcdefg

with SHA-1 encryption results:

teshjSf9GOUIvRHljjMafld8YsWTlQ4=

I have tried various websites that do SHA-! encryption, but none that result with the above answer. There is a possibility Salt is being utilized. Basically, what steps were taken to get the result.
Any help is appreciated.
","try this, it works for weblogic SQL Authenticator
public static void main(String args[]) throws NoSuchAlgorithmException {
String password=""abcdef""; 
System.out.println(""{SHA-1}"" 
                 + new sun.misc.BASE64Encoder()
                .encode(java.security.MessageDigest.getInstance(""SHA1"")
                .digest(password.getBytes())));
}

","2064","<encryption><weblogic><sha1><weblogic-10.x><salt>","0","1","2","2015-02-06 09:27:19","4975309","0","2","","","","2011-02-11 23:53:00",""
"7273060","When using HMAC for message signing, is it wise to salt the key, message, or both?","Say I'm designing a library to sign/verify messages with SHA-256 HMAC. If the end user uses a weak shared key and sends a lot of short messages, I assume there would be risk of an attacker discovering the key.
My intuition says I should append a unique (per message) salt to the key to make reverse-engineering the key harder.
How much would key salting help, and would I gain anything by also salting the messages?
","Normally people salt the key. It does increase security, both because it makes reverse-engineering the key harder, and because the same message does not always have the same MAC, so an attacker can't simply re-send a message that was sent earlier with the same MAC. I don't see what salting the message as well would get you.
","2061","<hash><digital-signature><salt><hmac>","6","3","1","2011-09-01 16:19:08","7273257","0","0","","","","2011-09-01 16:01:53",""
"2863352","comparing salt and hashed passwords during login doesn't seem work right","I stored salt and hash values of password during user registration... But during their login i then salt and hash the password given by the user, what happens is a new salt and a new hash is generated.... 
string password = collection[""Password""];
reg.PasswordSalt = CreateSalt(6);
reg.PasswordHash = CreatePasswordHash(password, reg.PasswordSalt);

These statements are in both registration and login.... 
salt and hash during registration was eVSJE84W and 18DE22FED8C378DB7716B0E4B6C0BA54167315A2
During login it was 4YDIeARH and 12E3C1F4F4CFE04EA973D7C65A09A78E2D80AAC7..... Any suggestion....
    public static string CreateSalt(int size)
    {
        //Generate a cryptographic random number.
        RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
        byte[] buff = new byte[size];
        rng.GetBytes(buff);

        // Return a Base64 string representation of the random number.
        return Convert.ToBase64String(buff);
    }

    public static string CreatePasswordHash(string pwd, string salt)
    {
        string saltAndPwd = String.Concat(pwd, salt);
        string hashedPwd =
         FormsAuthentication.HashPasswordForStoringInConfigFile(
         saltAndPwd, ""sha1"");

        return hashedPwd;
    }

","Right now you are generating a different salt upon registration and login. You need to use the same salt for hashing or you will get different hashes. That is to say you need store the salt into the database along with the password and reuse it to hash when the user tries to login later.
Steps:

User registers and provides a plain text password
You generate a new random salt and use it to hash the plain text
You store the salt and the hash into the database
Later the user tries to login by providing a new plain text password. You fetch the hash and the salt from database
You use the salt to hash the plain text
Compare the two hashes

","2052","<asp.net-mvc><hash><comparison><passwords><salt>","0","5","1","2010-05-19 06:43:51","2863369","0","2","","","","2010-05-19 06:35:26",""
"7048785","How to recover a password forgotten by the user if the password is saltedhash?","I just learned to use salt and hash to secure the passwords in my database. Now, I need to create a module that will allow the user to recover the password if they forgot it. How can I do that if the password is irreversible?
","You don't need to try to recover their old password, you just make a new one for them or have them do it.
You can generate a temporary password for them, salt and hash that password for them and email them the new password, or you send them an email link to reset their password.
","2045","<hash><salt><password-hash>","2","3","3","2014-01-30 09:42:52","7048801","2","","445517","","2014-01-30 09:42:52","2011-08-13 05:32:33",""
"7048785","How to recover a password forgotten by the user if the password is saltedhash?","I just learned to use salt and hash to secure the passwords in my database. Now, I need to create a module that will allow the user to recover the password if they forgot it. How can I do that if the password is irreversible?
","only changing the password using other supplied credentials. 
you can store passwords in plain text in database, but encrypt them when validate. Web solution woud be -> 
1. Get passord from user
2. Get, for example md5 hash from it 
3. Send md5 to server to validate. 
I do not advise storing plain text passwords :)
","2045","<hash><salt><password-hash>","2","0","3","2014-01-30 09:42:52","7048801","2","","445517","","2014-01-30 09:42:52","2011-08-13 05:32:33",""
"7048785","How to recover a password forgotten by the user if the password is saltedhash?","I just learned to use salt and hash to secure the passwords in my database. Now, I need to create a module that will allow the user to recover the password if they forgot it. How can I do that if the password is irreversible?
","Hashing the password is a security measure that protects you the password holder. If you had stored plain text and Mr uses's bank account was accesses by a third party, since you only know the hash of his password you probably weren't the one to access his bank.
That being said, md5 even with salt isn't terribly unbreakable so it can be reversed http://www.stottmeister.com/blog/2009/04/14/how-to-crack-md5-passwords/
","2045","<hash><salt><password-hash>","2","3","3","2014-01-30 09:42:52","7048801","2","","445517","","2014-01-30 09:42:52","2011-08-13 05:32:33",""
"25550014","Get passwords from Joomla user tables and use them in a codeigniter application","On my server I have a website running Joomla. Inside public_html I have created a new directory and, inside this directory, there's my Codeigniter application. Altough I'm new to Codeigniter and Joomla, I'm trying to build a login form using Codeigniter. 
I don't want to create a new table to store user information, since I have already such information in Joomla. I want to retrieve user information (usernames and passwords) from a Joomla table called #_users, but the problem is that the password is stored in a different way in Joomla. It uses md5 and a salt string. 
Here's my model in Codeigniter:
<?php
Class User extends CI_Model{

function login($username, $password){
  $dbjoomla = $this->load->database('my_joomla_db');
  $dbjoomla-> select('id, username, password');
  $dbjoomla-> from('users');
  $dbjoomla-> where('username', $username);
  $dbjoomla-> where('password', md5($password));
  $dbjoomla-> limit(1);

  $query = $dbjoomla-> get();

    if($query -> num_rows() == 1){
     return $query->result();
    }
    else{
     return false;
    }
  }
 }

I'm able to connect to the user table of Joomla (because $dbjoomla is not empty and is set), but the code is not working yet because of the password format stored in Joomla. I can retrieve it by using only md5($password). 
How can I get the Joomla passwords and have them verified on my Codeigniter application? Is that possible?
","I don't know how Joomla encrypt their passwords, but they probably have the salt in the database.
First you select ->where('username', $username);
Then since you should be getting 1 row, You'll be using ->row() method instead of ->result()
$dbjoomla = $this->load->database('my_joomla_db');
$q = $dbjoomla
           ->select('id, username, password, salt')
           ->from('users')
           ->where('username', $username)
           ->get();
$row = $q->row();

Now You have the row that contains the encrypted password & the salt, lets make sure the password entered by the user is correct (You'll have to review Joomla to make sure how the encrypt the password -- This is just an example)
$JoomlaEncryptedPassword = md5($PasswordGivenByUser.$row->salt);
if ( $JoomlaEncryptedPassword === $row->password ) {
   return $row;
}else{
   return FALSE;
}

As shown above we're replicating the encryption done by Joomla & comparing it to the stored password in the database, if the information are OK we return the row, otherwise we return FALSE
Now the concept is clear to you, all you have to do is dig through Joomla files to see how they encrypt the password so you can implement it.
","2034","<codeigniter><joomla><login><md5><salt>","1","0","1","2014-08-28 15:14:50","25552352","2","","","","","2014-08-28 13:29:17",""
"2583203","Salt, passwords and security","I've read through many of the questions on SO about this, but many answers contradict each other or I don't understand.
You should always store a password as a hash, never as plain text.
But should you store the salt (unique for each user) next to the hashed password+salt in the database. This doesn't seem very clever to me as couldn't someone gain access to the database, look for says the account called Admin or whatever and then work out the password from that?
","The salt is meant to disturb existing rainbowtables. It's no security threat to know the salt. If you know the salt, you would still need to know the password. 
","2025","<security><passwords><salt>","12","3","6","2016-02-02 21:02:11","2677143","1","9","","","","2010-04-06 07:09:42",""
"2583203","Salt, passwords and security","I've read through many of the questions on SO about this, but many answers contradict each other or I don't understand.
You should always store a password as a hash, never as plain text.
But should you store the salt (unique for each user) next to the hashed password+salt in the database. This doesn't seem very clever to me as couldn't someone gain access to the database, look for says the account called Admin or whatever and then work out the password from that?
","Well first of all, the primary purpose of the salt is to disable brute-forcing of the passwords, for example it prevents the usage of rainbow tables for quick compromising of a password.
Even if an attacker gains access to a database, it's not that easy to work out the real passwords from the salts (especially if you don't have the code and don't know how the password is hashed). However what I like to do for additional security is to also hash a password with a static hash that is specified in the code. This way it's not enough that you compromise the database. An example of such method (in PHP):
$hashed_password = sha1($user_password . $user_salt . $static_salt);

$user_salt is the salt in the database unique to each user, $static_salt is the salt specified in your code's settings somewhere.
","2025","<security><passwords><salt>","12","2","6","2016-02-02 21:02:11","2677143","1","9","","","","2010-04-06 07:09:42",""
"2583203","Salt, passwords and security","I've read through many of the questions on SO about this, but many answers contradict each other or I don't understand.
You should always store a password as a hash, never as plain text.
But should you store the salt (unique for each user) next to the hashed password+salt in the database. This doesn't seem very clever to me as couldn't someone gain access to the database, look for says the account called Admin or whatever and then work out the password from that?
","If you don't store the salt, how will you check if the correct password was provided?
","2025","<security><passwords><salt>","12","1","6","2016-02-02 21:02:11","2677143","1","9","","","","2010-04-06 07:09:42",""
"2583203","Salt, passwords and security","I've read through many of the questions on SO about this, but many answers contradict each other or I don't understand.
You should always store a password as a hash, never as plain text.
But should you store the salt (unique for each user) next to the hashed password+salt in the database. This doesn't seem very clever to me as couldn't someone gain access to the database, look for says the account called Admin or whatever and then work out the password from that?
","Salt is used to increase the time that an attacker would have to spend to find a password matching the hash stored in database. Typically lookup table such as rainbow table (see http://en.wikipedia.org/wiki/Rainbow_table) is used to achieve this.
What costs time is not the lookup itself, but the time to compute the rainbow table. Adding a salt forces the attacker to recompute a new rainbow table, even if it is known by the attacker who would compromise the database
","2025","<security><passwords><salt>","12","6","6","2016-02-02 21:02:11","2677143","1","9","","","","2010-04-06 07:09:42",""
"2583203","Salt, passwords and security","I've read through many of the questions on SO about this, but many answers contradict each other or I don't understand.
You should always store a password as a hash, never as plain text.
But should you store the salt (unique for each user) next to the hashed password+salt in the database. This doesn't seem very clever to me as couldn't someone gain access to the database, look for says the account called Admin or whatever and then work out the password from that?
","A lot of people are saying ""to stop rainbow tables"" without explaining what rainbow tables do or why this stops them.
Rainbow tables are a clever way of precomputing a large number of hashes and storing them in less memory than would naively be required, and you can use them to very quickly reverse a hash. Tables for bare functions such as hash = md5(password) and hash = sha1(password) are common.
However, they can be generated for ANY hash function which can be described as output = f(input). If you use a site-wide salt for all user passwords, for example hash = md5(salt+password), you could construct a function f, f(password) = md5(salt+password). Therefore you could generate rainbow tables for this function, which would take a long time, but would then let you crack every single password in the database very rapidly.
If the salt is different for each password, you can't generate a rainbow table that will crack all passwords in the database. You could generate a new one for every user but that would be pointless - naive brute-forcing would be no slower. So having a seperate salt for each user stops the rainbow tables attack.
There are several ways to do accomplish this. Popular ways include:

A separate salt for each user, stored alongside their other details in the database: hash = hashfunction(salt + password)
A global salt and some unique value per user: hash = hashfunction(salt + password + user_id) for example
A global salt and a per-user salt: hash = hashfunction(global_salt + user_salt + password)

Having a global salt could add a little extra complexity to cracking the passwords, as it could be stored outside of the database (in the code, for example) which attackers may not gain access to in the event of a database breach. Cryptographically I don't think it adds much, but in practice it could slow them down.
Finally, to answer your actual question:
Storing the salt alongside the user data does not weaken the hash. Hash functions are one-way: Given the hash of a password, even an unsalted one, it is very difficult to find that password. The motivation behind salting is not to make an individual hash more secure, but to make the collection of multiple hashes more secure. There are several vectors of attack for a collection of unsalted hashes:

Rainbow tables
Hashing common passwords (123, password, god) and seeing if any exist in the database, and then compromise those accounts
Look for identical hashes in the database, which means identical passwords (probably)

","2025","<security><passwords><salt>","12","25","6","2016-02-02 21:02:11","2677143","1","9","","","","2010-04-06 07:09:42",""
"2583203","Salt, passwords and security","I've read through many of the questions on SO about this, but many answers contradict each other or I don't understand.
You should always store a password as a hash, never as plain text.
But should you store the salt (unique for each user) next to the hashed password+salt in the database. This doesn't seem very clever to me as couldn't someone gain access to the database, look for says the account called Admin or whatever and then work out the password from that?
","Well well well .. so many discussions ... so much information. so many questions ...  i see that after all the questions are answers here is the summary.

Why Salt?
Why Salt is stored alongwith the hash of (password + salt).

Here is my understanding.

Hackers have rainbow table for all the dictionary words which he made with great great effort. Every rainbow table making gets the hell out of the hacker. In simple words its very tough.
As by point 1, if we make the hacker compute rainbow table for each user then he'll be getting old by the time he knows the password. And if the user frequently changes the password, then even hacker's grand children will get old by the time they know the password. 
Ok. So use different salt for each user. This makes the hacker use seperate attack to know the password of every single user.
I see that various readers pointed out , that instead of banging head on every single user a great hacker will put all his effort towards admin account and then he is done :). So in this case, we will go a step ahead and then use some different method to compute the hash. Lets say the salt is not exactly what is stored. It may be half of the actual hash. The other half is stored somewhere else in some other way (computed in some other way). This is just an extra security measure. And we know thwt in current times, the calculation power of computers is increasing. So ethical people know that worlds fastest super computer will take 1 year to crack admin password (just an example). So they force a policy which says change admin password every 3 months. by the time hacker knows the old password , the new one is in effect. Or say the database is compromised, then good guys come to know of it by the time hacker cracks the password. And the good guys changs the things by then ( remember upgrade of alogorithms ..sha1 sha2 and now sha3 ).....

Ok..though not fully complete, but my point is bad guys take lot of time .... but good guys are a step ahead to ensure that they know the technology which bad guys will be using to crack. So just devise a better technology by time.
Take care ....
","2025","<security><passwords><salt>","12","2","6","2016-02-02 21:02:11","2677143","1","9","","","","2010-04-06 07:09:42",""
"10961528","Does storing the salt along with the encrypted file break security?","I am writing an Android application which aims to encrypt and decrypt files using AES 256. I am using AES-CBC mode and PBKDF2 for deriving the AES key from a user entered password. Also, I am generating a secure, pseudo random salt for every file's encryption key. I am storing the IV and salt with the encrypted file, so I can reread them and regenerate key later to be able to decrypt the file. 
My question: Does storing the salt along with the encrypted file break security and any meaning of the salt itself? Can't an attacker knowing the salt and the IV make an offline brute force attack against the encrypted file to find out the encryption key?
","Salt is used for one-way functions such as hashing a password.
Random IV is used for two-way functions such as encrypting data that can later be decrypted.
They both are random bytes and are used to prevent the same piece of information from producing the same result after being applied by the function. So if two people choose the same password to store their data and store the same piece of information the encrypted bytes will be different.
You can store them along side the encrypted file.
Also use more than 1 iteration with PBKDF2 or else it's fairly useless. According to Wikipedia iOS 3 uses 2,000 iterations and iOS 4 uses 10,000.
","1990","<android><security><aes><salt>","7","2","2","2013-01-16 12:48:31","10962570","0","4","210336","","2013-01-16 12:48:31","2012-06-09 13:43:50",""
"10961528","Does storing the salt along with the encrypted file break security?","I am writing an Android application which aims to encrypt and decrypt files using AES 256. I am using AES-CBC mode and PBKDF2 for deriving the AES key from a user entered password. Also, I am generating a secure, pseudo random salt for every file's encryption key. I am storing the IV and salt with the encrypted file, so I can reread them and regenerate key later to be able to decrypt the file. 
My question: Does storing the salt along with the encrypted file break security and any meaning of the salt itself? Can't an attacker knowing the salt and the IV make an offline brute force attack against the encrypted file to find out the encryption key?
","The main purpose of the salt is not to be secret, but to make sure an attacker can't use shortcuts when trying to brute-force the password, like using rainbow tables (i.e. one existing table, or a new one to be used for multiple encrypted files), or brute-forcing multiple collected files (which should have different salts) at once.
As long as your password has enough entropy and the number of iterations in your key derivation function is high enough, storing the salt with the ciphertext is no problem.
The salt alone will not allow anyone to decrypt the file.
Also, if you want to keep the salt secret (it then is usually called ""pepper"" instead of salt), you'll have to think of some mechanism to get the right salt to the one legitimately doing the decryption.
","1990","<android><security><aes><salt>","7","10","2","2013-01-16 12:48:31","10962570","0","4","210336","","2013-01-16 12:48:31","2012-06-09 13:43:50",""
"19951065","How does password salt increase security","I'm trying to understand how a password salt increase security. Basically, for each user password a random string is generated, added to the password and then hashed. When the user logs on, the system fetch the salt for that specific user, adds it to the password, hash and compare to the stored hash value.
Now. I understand how this makes a much longer password/hash value. What I do not understand is what hinders an automated function to chose a username and just make a lot of login attempts on - for example - a web site, with different password each time. To me it would seem that the salt has no function in that scenario?
I feel quite certain that I have misunderstood this and would be glad if someone could help me understand.
","For example hashing algorithms like MD5 are no longer useful because there are databases with full discretionary hashed so if someone get access to ur hashed password (without salt). they can just search and find that word for the hash. if u add salt that becomes difficult to do. but that will only slow the hacker. if they get access to your code then salt wont help. But always add some salt its good.
Security of data in database
","1988","<hash><salt><password-hash>","2","0","3","2014-01-30 09:39:38","19951781","2","","445517","","2014-01-30 09:39:38","2013-11-13 10:16:50",""
"19951065","How does password salt increase security","I'm trying to understand how a password salt increase security. Basically, for each user password a random string is generated, added to the password and then hashed. When the user logs on, the system fetch the salt for that specific user, adds it to the password, hash and compare to the stored hash value.
Now. I understand how this makes a much longer password/hash value. What I do not understand is what hinders an automated function to chose a username and just make a lot of login attempts on - for example - a web site, with different password each time. To me it would seem that the salt has no function in that scenario?
I feel quite certain that I have misunderstood this and would be glad if someone could help me understand.
","Salts are used to  reduce the threat of using Brute-Force-attacks on your hashes. If your passwords are ""unsalted"" one could easily use a dictionary of say 1 million hashes and run them against your database (dictionary attack). A Salt is a random sequence which is concatenated with your password just before generating the hash. Your database then saves the salt and the hash. If you choose the number of possible salts high enough brute-force-attacks are considerably harder to carry out because the attacker has to generate every possible salt in combination with his password-dictionary.
","1988","<hash><salt><password-hash>","2","2","3","2014-01-30 09:39:38","19951781","2","","445517","","2014-01-30 09:39:38","2013-11-13 10:16:50",""
"19951065","How does password salt increase security","I'm trying to understand how a password salt increase security. Basically, for each user password a random string is generated, added to the password and then hashed. When the user logs on, the system fetch the salt for that specific user, adds it to the password, hash and compare to the stored hash value.
Now. I understand how this makes a much longer password/hash value. What I do not understand is what hinders an automated function to chose a username and just make a lot of login attempts on - for example - a web site, with different password each time. To me it would seem that the salt has no function in that scenario?
I feel quite certain that I have misunderstood this and would be glad if someone could help me understand.
","
What I do not understand is what hinders an automated function to chose a username and just make a lot of login attempts on - for example - a web site, with different password each time. To me it would seem that the salt has no function in that scenario?

Correct. Hashing and salting do not prevent against brute-force login attempts. (For that, you want to limit the number of login attempts per unit of time, or to ban after X-failed attempts). 
Hashing and salting are used to prevent a stolen password list being cracked (or, to increase the amount of time needed to crack said list). 
When storing passwords, you have 3 options: plain text, hashed, or hashed+salted. If I steal your password list:

Plain text: I now have the login details for all your users. I can impersonate them. (That's bad). 
Hashed: I can use a rainbow table to determine the password from the hash reasonably quickly. (That's also bad). 
Hashed + salted: Now the rainbow tables don't work. I have to spend considerably more time cracking each password. It's still possible, but it is a lot harder (and, unless you're actually important, I'm probably not going to bother). Note that this also gives you time to notice the security breech and inform your customers their passwords were stolen, and ask them to change it (so even when I eventually crack the hashed+salted list, I can't use it). 

So: hashing + salting is used to prevent (or slow) attempts to crack a password from a stolen hash using brute force methods. 
","1988","<hash><salt><password-hash>","2","9","3","2014-01-30 09:39:38","19951781","2","","445517","","2014-01-30 09:39:38","2013-11-13 10:16:50",""
"28314564","How to replicate ASP Classic SHA512 Hash function in PHP","I'm currently rewriting an asp classic site in PHP, everything so far has been simple until I reached the password hashing function. In PHP I've used hash_hmac and hash, but I seem unable to replicate this functions results using a static salt in PHP. Please could someone help guide me as to how to produce the same result in PHP?
<%  Function Hash(strPassword, strIndividualSalt)

  Const strSiteWideSalt = ""Bacon and HASH is best served with a good Salt!""
  Hash = HashSHA512Managed(strSiteWideSalt & strPassword & strIndividualSalt)

End Function

Function HashSHA512Managed(saltedPassword)

  Dim objMD5, objUTF8
  Dim arrByte
  Dim strHash
  Set objUnicode = CreateObject(""System.Text.UnicodeEncoding"")
  Set objSHA512 = Server.CreateObject(""System.Security.Cryptography.SHA512Managed"")

  arrByte = objUnicode.GetBytes_4(saltedPassword)
  strHash = objSHA512.ComputeHash_2((arrByte))

  HashSHA512Managed = ToBase64(strHash)

End Function

Function ToBase64(rabyt)
    Dim xml: Set xml = CreateObject(""MSXML2.DOMDocument.3.0"")
    xml.LoadXml ""<root />""
    xml.documentElement.dataType = ""bin.base64""
    xml.documentElement.nodeTypedValue = rabyt
    ToBase64 = xml.documentElement.Text
End Function
response.write  Hash(""mypassword"", ""mysalt"")%>

This outputs...

1Asf3PuLZetBni4laI7jDKG3fbhlzKzB41G2694oZdH6nELLXklqtvY8Tniqjf3/2/gGg01fzs4w67l1Tfs20A==

Should I be using hash_hmac? Or do I need to replicate the function in PHP using hash()? Any help would be appreciated.
","","1984","<php><hash><asp-classic><salt><sha512>","3","","0","2015-02-04 11:37:43","","16","","692942","","2015-02-04 11:37:43","2015-02-04 06:08:26",""
"205153","How would you implement salted passwords in Tomcat 5.5","My web application is relying on container-managed security and I'm wondering if it's possible to use salted passwords at all. As far as I can tell it's easy enough to store digested passwords in a database by just configuring a JDBC or DataSource Realm, but there's no way to add a salt to those digest. 
Any suggestions?
Edit: it seems I just need to think some more before asking questions ;-)
It's just a matter of choosing who's doing the digest calculation (client or server) and configure Tomcat accordingly.
","Passord-based encryption in JCE uses salt as per PKCS#5.  See http://java.sun.com/j2se/1.4.2/docs/guide/security/jce/JCERefGuide.html#PBEEx for an example.  
","1954","<security><authentication><tomcat><passwords><salt>","2","0","3","2008-11-13 20:47:59","210135","0","","6069","agnul","2008-10-17 22:15:36","2008-10-15 15:24:56",""
"205153","How would you implement salted passwords in Tomcat 5.5","My web application is relying on container-managed security and I'm wondering if it's possible to use salted passwords at all. As far as I can tell it's easy enough to store digested passwords in a database by just configuring a JDBC or DataSource Realm, but there's no way to add a salt to those digest. 
Any suggestions?
Edit: it seems I just need to think some more before asking questions ;-)
It's just a matter of choosing who's doing the digest calculation (client or server) and configure Tomcat accordingly.
","If you're creating and storing the digests you can create and store the salts at the same time.
Your auth table would contain 
....
pwdDigest varchar(64), -- or int256 if you have one
hashSalt int64,
....
Then depending on the auth protocol you're using you either send the hashSalt to the client when you get the username for client side encryption or use it to hash the password if you receive it in clear.
I'm not familiar with the database access technologies you're talking about, so I apologise if I've missed the point and oversimplified the answer.
","1954","<security><authentication><tomcat><passwords><salt>","2","3","3","2008-11-13 20:47:59","210135","0","","6069","agnul","2008-10-17 22:15:36","2008-10-15 15:24:56",""
"205153","How would you implement salted passwords in Tomcat 5.5","My web application is relying on container-managed security and I'm wondering if it's possible to use salted passwords at all. As far as I can tell it's easy enough to store digested passwords in a database by just configuring a JDBC or DataSource Realm, but there's no way to add a salt to those digest. 
Any suggestions?
Edit: it seems I just need to think some more before asking questions ;-)
It's just a matter of choosing who's doing the digest calculation (client or server) and configure Tomcat accordingly.
","Tomcat 5.5 and 6.0 don't support salted passwords in JDBCRealms and DataSourceRealms. It's a known bug, and the suggested patch seems to work fine, but it wasn't accepted yet.
If you don't want to apply the patch you can at least use it as an implementation example:
Bug 45871 - Support for salted and digested patches in DataSourceRealm
","1954","<security><authentication><tomcat><passwords><salt>","2","3","3","2008-11-13 20:47:59","210135","0","","6069","agnul","2008-10-17 22:15:36","2008-10-15 15:24:56",""
"31752992","How to generate a salted SHA-512 password hash for Dovecot with PHP","I am getting stuck by creating a working salted SHA-512 hash for Dovecot using PHP. When create a non-salted hex-formated hash everthing works fine. add a salt to the hash, I am not able to verify the hash with ""doveadm pw"" anymore.
Here's my code:
    $password       = 'test';
    $salt           = '2fec1ee0940e7c436ef2037e89e4c06ca20b281a90dbb2d6cbd3534aa4ce7e19';

    // Create non-salted hashes
    $hash_hex       = ""{SHA512.hex}"" . hash('sha512', $password);
    $hash_b64       = ""{SHA512.b64}"" . base64_encode(hash('sha512', $password));

    // Create salted hashes
    $salted_hash_hex= ""{SSHA512.hex}"" . hash('sha512', $password . $salt) . $salt;
    $salted_hash_b64= ""{SSHA512.b64}"" . base64_encode(hash('sha512', $password . $salt) . $salt);

    // Output
    var_dump($hash_hex);
    var_dump($hash_b64);
    var_dump($salted_hash_hex);
    var_dump($salted_hash_b64);

The output of the var_dumps() are as follows:
string '{SHA512.hex}ee26b0dd4af7e749aa1a8ee3c10ae9923f618980772e473f8819a5d4940e0db27ac185f8a0e1d5f84f88bc887fd67b143732c304cc5fa9ad8e6f57f50028a8ff' (length=140)
string '{SHA512.b64}ZWUyNmIwZGQ0YWY3ZTc0OWFhMWE4ZWUzYzEwYWU5OTIzZjYxODk4MDc3MmU0NzNmODgxOWE1ZDQ5NDBlMGRiMjdhYzE4NWY4YTBlMWQ1Zjg0Zjg4YmM4ODdmZDY3YjE0MzczMmMzMDRjYzVmYTlhZDhlNmY1N2Y1MDAyOGE4ZmY=' (length=184)
string '{SSHA512.hex}4a1e8a61780f449ef6cbc883b5cf57279d32fd004cb7298ddb6f8c46bf246187c03f1bf9447044708767a826e65f977e5c95a490abf8f2c3ca90c7a0ea2b89e82fec1ee0940e7c436ef2037e89e4c06ca20b281a90dbb2d6cbd3534aa4ce7e19' (length=205)
string '{SSHA512.b64}NGExZThhNjE3ODBmNDQ5ZWY2Y2JjODgzYjVjZjU3Mjc5ZDMyZmQwMDRjYjcyOThkZGI2ZjhjNDZiZjI0NjE4N2MwM2YxYmY5NDQ3MDQ0NzA4NzY3YTgyNmU2NWY5NzdlNWM5NWE0OTBhYmY4ZjJjM2NhOTBjN2EwZWEyYjg5ZTgyZmVjMWVlMDk0MGU3YzQzNmVmMjAzN2U4OWU0YzA2Y2EyMGIyODFhOTBkYmIyZDZjYmQzNTM0YWE0Y2U3ZTE5' (length=269)

Now when I try to verify the hashes against doveadm, only the first hash (non-salted in hex-format) works. The second one gives me an error regarding the length of the string (Input length isn't valid (128 instead of 64)). The third and fourth tells that the password isn't matching:
root@jupiter[0][75]:/etc/dovecot# dovecot pw -t {SHA512.hex}ee26b0dd4af7e749aa1a8ee3c10ae9923f618980772e473f8819a5d4940e0db27ac185f8a0e1d5f84f88bc887fd67b143732c304cc5fa9ad8e6f57f50028a8ff -p test
{SHA512.hex}ee26b0dd4af7e749aa1a8ee3c10ae9923f618980772e473f8819a5d4940e0db27ac185f8a0e1d5f84f88bc887fd67b143732c304cc5fa9ad8e6f57f50028a8ff (verified)

root@jupiter[0][0]:/etc/dovecot# dovecot pw -t {SHA512.b64}ZWUyNmIwZGQ0YWY3ZTc0OWFhMWE4ZWUzYzEwYWU5OTIzZjYxODk4MDc3MmU0NzNmODgxOWE1ZDQ5NDBlMGRiMjdhYzE4NWY4YTBlMWQ1Zjg0Zjg4YmM4ODdmZDY3YjE0MzczMmMzMDRjYzVmYTlhZDhlNmY1N2Y1MDAyOGE4ZmY= -p test
doveadm(root): Fatal: reverse decode check failed: Input length isn't valid (128 instead of 64)

root@jupiter[0][75]:/etc/dovecot# dovecot pw -t {SSHA512.hex}4a1e8a61780f449ef6cbc883b5cf57279d32fd004cb7298ddb6f8c46bf246187c03f1bf9447044708767a826e65f977e5c95a490abf8f2c3ca90c7a0ea2b89e82fec1ee0940e7c436ef2037e89e4c06ca20b281a90dbb2d6cbd3534aa4ce7e19 -p test
doveadm(root): Fatal: reverse password verification check failed: Password mismatch

root@jupiter[0][75]:/etc/dovecot# dovecot pw -t {SSHA512.b64}NGExZThhNjE3ODBmNDQ5ZWY2Y2JjODgzYjVjZjU3Mjc5ZDMyZmQwMDRjYjcyOThkZGI2ZjhjNDZiZjI0NjE4N2MwM2YxYmY5NDQ3MDQ0NzA4NzY3YTgyNmU2NWY5NzdlNWM5NWE0OTBhYmY4ZjJjM2NhOTBjN2EwZWEyYjg5ZTgyZmVjMWVlMDk0MGU3YzQzNmVmMjAzN2U4OWU0YzA2Y2EyMGIyODFhOTBkYmIyZDZjYmQzNTM0YWE0Y2U3ZTE5 -p test
doveadm(root): Fatal: reverse password verification check failed: Password mismatch

I tried to find out how that works by reading several pages like

http://wiki2.dovecot.org/Authentication/PasswordSchemes
http://www.tunnelsup.com/using-salted-sha-hashes-with-dovecot-authentication
How to securely generate SSHA256 or SSHA512 hashes in PHP?

and thought that I am doing it right. But: No no ;-)
Can anyone pinpoint me to my mistake, please?
Thank you very much!
","hash('sha512', $password, true)

Since you are base64 encoding
","1951","<php><hash><salt><dovecot>","0","0","1","2015-08-04 12:48:17","31809763","2","","","","","2015-07-31 18:40:42",""
"17211877","Vagrant Port Forwarding on Mac OS X Lion","I've been struggling trying to connect to a centos 6.4 vm using Vagrant.
I'm using salt as a provisioning agent and I have installed apache,php,mysql packages successfully.
When i ssh into the box apache is running fine.  I added an index.html file in /var/www and I get the contents back when I  curl localhost:80
Vagrant.configure(""2"") do |config|
  ## Chose your base box
  config.vm.box = ""centos63""
  config.vm.box_url = """"

  ## For masterless, mount your salt file root
  config.vm.synced_folder ""salt/roots/"", ""/srv/""


  ## Use all the defaults:
  config.vm.provision :salt do |salt|
    salt.verbose = true
    salt.run_highstate = true
    salt.minion_config = ""salt/minion""
 end
end

Vagrant::Config.run do |config|
 config.vm.forward_port 80, 8080
 config.vm.share_folder ""mypath"", ""/var/www/leo"", "".""
end

I ran sudo lsof -i :8080 on my local machine and gave me no results. I also cleared the iptable config in the guest machine with iptables -F. When I curl the guest machine
 curl -v 'localhost:8080'                            
* About to connect() to localhost port 8080 (#0)
*   Trying ::1...
* Connection refused
*   Trying 127.0.0.1...
* Connection refused
*   Trying fe80::1...
* Connection refused
* couldn't connect to host
* Closing connection #0
curl: (7) couldn't connect to host

Do I need guest additions installed? I looked around on how to install this but I'm not sure if it has to be installed on the host or the guest. Not sure what else to try.
","I changed the guest port to 5656 and it worked. When running lsof -i :8080 I didn't see any results so i figured nothing was using that port maybe I was wrong.
","1949","<port><vagrant><salt><portforwarding>","4","0","2","2015-08-20 13:16:50","","0","3","96571","","2015-08-20 13:16:50","2013-06-20 10:57:40",""
"17211877","Vagrant Port Forwarding on Mac OS X Lion","I've been struggling trying to connect to a centos 6.4 vm using Vagrant.
I'm using salt as a provisioning agent and I have installed apache,php,mysql packages successfully.
When i ssh into the box apache is running fine.  I added an index.html file in /var/www and I get the contents back when I  curl localhost:80
Vagrant.configure(""2"") do |config|
  ## Chose your base box
  config.vm.box = ""centos63""
  config.vm.box_url = """"

  ## For masterless, mount your salt file root
  config.vm.synced_folder ""salt/roots/"", ""/srv/""


  ## Use all the defaults:
  config.vm.provision :salt do |salt|
    salt.verbose = true
    salt.run_highstate = true
    salt.minion_config = ""salt/minion""
 end
end

Vagrant::Config.run do |config|
 config.vm.forward_port 80, 8080
 config.vm.share_folder ""mypath"", ""/var/www/leo"", "".""
end

I ran sudo lsof -i :8080 on my local machine and gave me no results. I also cleared the iptable config in the guest machine with iptables -F. When I curl the guest machine
 curl -v 'localhost:8080'                            
* About to connect() to localhost port 8080 (#0)
*   Trying ::1...
* Connection refused
*   Trying 127.0.0.1...
* Connection refused
*   Trying fe80::1...
* Connection refused
* couldn't connect to host
* Closing connection #0
curl: (7) couldn't connect to host

Do I need guest additions installed? I looked around on how to install this but I'm not sure if it has to be installed on the host or the guest. Not sure what else to try.
","What you are trying to do here isn't possible just using vagrant without running vagrant as root. You can run Vagrant as root i believe but VirtualBox won't agree with that. You can continue to use a port number or if you want or need to use port 80 there is a way. 
I had this issue when a client of mine asked me to do a Wordpress Multisite setup. With Wordpress MS you can't have port numbers in the URL b/c some of the URL mapping will not work correctly. I was surprised when I found that out and didn't want to go back to using a program like MAMP. 
Anyway here are two ways to achieve this goal (neither are very hard). I'm a Mac user so these are Mac specific Answers, I will see if there is a Windows version and update my answer when I can test it to make sure (see below, there is a way).
Way #1 (Mac IP Firewall Utility):
In your vagrant file
config.vm.forward_port 80, 8080
config.vm.forward_port 443, 8443

Thats pretty normal.
Now open up terminal and you can use the ipfw utility
sudo ipfw add 100 fwd 127.0.0.1,8080 tcp from any to me 80
sudo ipfw add 101 fwd 127.0.0.1,8443 tcp from any to me 443

Now that cmd is not permanent so you would have to re-run the cmd if you restarted your machine. You can make it permanent though and I am including a link below that will explain the rest of way #1.
Web Development on Port 80 and 443 in Vagrant
Way #2 (Mac POW and Anvil):
If you don't have Pow yet, get it! It's a really cool app. 
Install Pow and Anvil, you can find Anvil there and you can find Pow there. 
You can read the docs on how to set those up but don't pay attention to the ""static"" and ""rack"" sites part, you need this part. 
You will be using Port Proxying through Pow to take the incoming traffic from mycoolsite.dev and forward it to the virtual machine like mycoolsite.dev:8080 and then the virtual machine will forward 8080 to 80 and back up the line your content will come.
After you install Anvil/Pow and get them set up run this line:
echo 8080 > ~/.pow/mycoolsite

Then click Anvil in the task bar (you may have to refresh it or close and reopen) and turn the site on, thats it, what?? Really? Pow and Anvil rock!!
So there are two ways I have found, I'm sure that there are some things you can do with your Hosts file and I used to do that a bunch. However, these other ways that are available really make it easy to forget about that pesky hosts file.
Note for Windows Users (and Mac users that don't like the first 2 ways): You can use Vagrant Host Manager, you can find out how to set it up here on github. It is a vagrant plugin and basically will edit your hosts file for you, all you do is your vagrantfile config and you are good to go after that. I just tested it on Windows 7 and it worked there so it should be good, if you have any issues just look through the docs on github or file an issue for the Vagrant Host Manager team to review.
","1949","<port><vagrant><salt><portforwarding>","4","3","2","2015-08-20 13:16:50","","0","3","96571","","2015-08-20 13:16:50","2013-06-20 10:57:40",""
"33378374","Compare Entered Password with Hashed password, Validation Error C# MVC","I am trying to make a form to register new user and save data into Entity Framework using MVC pattern; the thing is that I am trying to compare the entered password as following (code is written in the the model)
[Required(ErrorMessage = ""Enter Password!"")]
[StringLength(100, ErrorMessage = ""The {0} must be at least {2} characters long."", MinimumLength = 6)]
[DataType(DataType.Password)]
public string tPassword { get; set; }

[DataType(DataType.Password)]
[Compare(""tPassword"", ErrorMessage = ""The password and confirmation password does not match."")]
public string Confirmpassword { get; set; }

The next step is to hash the password and save it (I created a new class called Security with the following method, and other methods to verify the password), following is the code: 
public static void HashAndSavePassword(string password, RegisterTable usr)
{
    var v = new Rfc2898DeriveBytes(password, 16, 3987);
    usr.tPassword = Convert.ToBase64String(v.GetBytes(25), Base64FormattingOptions.None);
    usr.Salt = Convert.ToBase64String(v.Salt, Base64FormattingOptions.None);
}

Then in the controller I used following to call the method that is responsible of password hashing and then save user data into Entity Framework: 
public ActionResult Register(RegisterTable user)
{
    if (ModelState.IsValid)
    {
         // To check if username already exist
         var searchUserName = db.RegisterTables.Where(x => x.tUserName.Equals(user.tUserName)).FirstOrDefault();

         if (searchUserName == null)
         {
             Security.HashAndSavePassword(user.tPassword, user);

             db.RegisterTables.Add(user);
             db.SaveChanges();
             ModelState.Clear();
             return RedirectToAction(""Login"");
         }
         else ModelState.AddModelError("""", ""User is already Registred."");            
     }

     return View(user);
 }

The problem is that I am getting the following error when I run the code:

But the code will work normally if I delete this line: 
[Compare(""tPassword"", ErrorMessage = ""The password and confirmation password does not match."")]

Can anyone explain to me why this is happening and how to solve this problem?
","You have ValidateOnSaveEnabled set to true on your DbContext
context.Configuration.ValidateOnSaveEnabled = true;

This means that your validation will be executed twice. First by the model binder (done by MVC) - this will not throw error, because both passwords are same. But then in your HashAndSavePassword you have ConfirmPassword in plain text and tPassword in hash form. So EF will throw error when you call save.
You can:

turn off EF model validation by setting ValidateOnSaveEnabled  to false.
in HashAndSavePassword function also hash ConfirmPassword property (this is hack)
use different model in action and then convert to model used in EF. (this is referred)


Your DB model
public class RegisterTable
{
    public int Id { get; set; }
    public string tPassword { get; set; }
    public string tUserName { get; set; }
    public string Salt { get; set; }

    ...
}


Your view model:
public class RegisterModel
{
    // put username validation rules here
    public string UserName { get; set; }

    [Required(ErrorMessage = ""Enter Password!"")]
    [StringLength(100, ErrorMessage = ""The {0} must be at least {2} characters long."", MinimumLength = 6)]
    [DataType(DataType.Password)]
    public string Password { get; set; }

    [DataType(DataType.Password)]
    [Compare(""Password"", ErrorMessage = ""The password and confirmation password does not match."")]
    public string Confirmpassword { get; set; }

    ...

    public RegisterTable Map()
    {
        var v = new Rfc2898DeriveBytes(this.Password, 16, 3987);
        return new RegisterTable()
        {

            Salt = Convert.ToBase64String(v.Salt, Base64FormattingOptions.None),
            tPassword = Convert.ToBase64String(v.GetBytes(25), Base64FormattingOptions.None),
            tUserName = this.UserName
        };
    }
}


Your action
public ActionResult Register(RegisterModel user)
{
    if (ModelState.IsValid)
    {
        // To check if username already exist
        var searchUserName = db.RegisterTables.Where(x => x.tUserName.Equals(user.UserName)).FirstOrDefault();

        if (searchUserName == null)
        {
            var dbUser = user.Map();

            db.RegisterTables.Add(user);
            db.SaveChanges();
            ModelState.Clear();
            return RedirectToAction(""Login"");
        }
        else ModelState.AddModelError("""", ""User is already Registred."");
    }

    return View(user);
}

","1925","<c#><model-view-controller><hash><passwords><salt>","1","1","1","2015-10-28 00:23:20","33379184","0","","13302","","2015-10-27 22:03:33","2015-10-27 20:59:23",""
"13652817","SHA-256 hashing yields the wrong result in Android","I am trying to encrypt 12345 using 1111 as salt using SHA-256 encoding and the answer I get is: 010def5ed854d162aa19309479f3ca44dc7563232ff072d1c87bd85943d0e930
which is not same as the value returned by this site.
Here's the code snippet:
public String getHashValue(String entity, String salt){
    byte[] hashValue = null;
    try {
        MessageDigest digest =  MessageDigest.getInstance(""SHA-256"");
        digest.update(entity.getBytes(""UTF-8""));
        digest.update(salt.getBytes(""UTF-8""));
        hashValue = digest.digest();
    } catch (NoSuchAlgorithmException e) {
        Log.i(TAG, ""Exception ""+e.getMessage());
    } catch (UnsupportedEncodingException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
    return BasicUtil.byteArrayToHexString(hashValue);
}

I have verified my printing method with a sample from SO and result is fine. Can someone tell me what's wrong here?
And just to clarify - when I encrypt same value & salt in iOS code, the returned value is same as the value given by the converting site.
","If you fill optional part for hmac secret in that site, HmacSHA256 algorithm will be used. 
Same result can be produced with this function:
public static String getHmac(String entity, String salt) throws Exception{
    Mac mac = Mac.getInstance(""HmacSHA256"");
    mac.init(new SecretKeySpec(salt.getBytes(), ""HmacSHA1""));
    byte[] bs = mac.doFinal(entity.getBytes());
    return new HexDumpEncoder().encode(bs); // use your favorite hex converter
}

If you want to get the same output from that site, try to hash this value ""123451111"" without hmac secret.
As obvious, calling MessageDigest.update twice is equivalent to calling it once with concatenated value.    
","1916","<android><hash><salt><sha256>","3","2","1","2016-02-29 01:32:04","13664633","2","6","4924793","","2016-02-29 01:32:04","2012-11-30 20:38:12",""
"23605750","Side-by-side configuration error on Windows","I have installed Salt (version 2014.1.3) on Windows (Server 2008 R2). 
When I tried to launch salt-minion.exe I have This error :
the application has failed to start because its side-by-side configuration incorrect.
I have installed Microsoft Visual C++ 2008 SP1 Redistributable, but I don't fix the problem.
What is the problem ?
Thanks,
Sam
","My problem is resolved. 
I have downloaded Microsoft Visual C++ 2008 Redistributable Package (x86). The link is here.
","1915","<windows><salt>","3","3","1","2017-08-01 01:24:07","23608735","0","","","","","2014-05-12 09:44:19",""
"48000477","Encrypt/Decrypt string with salt using php7","I have a string and I want to store this string securely in a database.
So, what came up to my mind is to encrypt this string using a user password as the encryption key.
And when the user needs to use this string we decrypt it using that key.
Is there some algorithm that helps to store these strings in a database securely, preventing anyone accessing it even the team?
","You want to use some type of shared secret encryption algorithm like AES.  Both openssl and mcrypt should support this.  I would recommend openssl as mcrypt is EOL.
The following example comes directly from php.net.  You probably don't need the hmac as you want to retrieve the original data.
<?php
//$key previously generated safely, ie: openssl_random_pseudo_bytes
$plaintext = ""message to be encrypted"";
$ivlen = openssl_cipher_iv_length($cipher=""AES-128-CBC"");
$iv = openssl_random_pseudo_bytes($ivlen);
$ciphertext_raw = openssl_encrypt($plaintext, $cipher, $key, $options=OPENSSL_RAW_DATA, $iv);
//$hmac = hash_hmac('sha256', $ciphertext_raw, $key, $as_binary=true);
$ciphertext = base64_encode( $iv./*$hmac.*/$ciphertext_raw );

//decrypt later....
$c = base64_decode($ciphertext);
$ivlen = openssl_cipher_iv_length($cipher=""AES-128-CBC"");
$iv = substr($c, 0, $ivlen);
//$hmac = substr($c, $ivlen, $sha2len=32);
$ciphertext_raw = substr($c, $ivlen/*+$sha2len*/);
$original_plaintext = openssl_decrypt($ciphertext_raw, $cipher, $key, $options=OPENSSL_RAW_DATA, $iv);
/*
$calcmac = hash_hmac('sha256', $ciphertext_raw, $key, $as_binary=true);
if (hash_equals($hmac, $calcmac))//PHP 5.6+ timing attack safe comparison
{
    echo $original_plaintext.""\n"";
}
*/

","1914","<php><encryption><php-7><salt><password-hash>","0","3","1","2018-04-01 11:39:54","48000652","3","","8829161","","2018-04-01 11:39:54","2017-12-28 01:14:47","2017-12-28 01:47:37"
"4060294","Do I have to keep my salt in the same column as my hash?","So, I'm cool with using a per-user salt to hash my users' passwords. However, there's one piece of advice in the accepted answer: 

Do not use a separate column for the salt.

This doesn't make sense to me. If I'm just catenating the hash and salt and putting them in the same column, surely that's semantically equivalent to two separate columns? In which case, that's just security-by-obscurity, no?
It's easier to use a separate column to store the salt (as long as it's per-user). Why shouldn't I?
","I think the second part of the first answer (the part about ""dynamic salt"") in that thread gives you an answer like you expect:  Generate a random, per-user salt and store that with the hashed password.  This is exactly what UNIX passwd (and later shadow) files have done for decades.
There's some confusion in that thread about what exactly salt is.  Some replies take a very general definition along the lines of ""any known text mixed into a password before performing a one-way hash"".  There are lots of reasons to mix known text and secret text before performing a one-way hash, and obviously the treatment of the known text in such cases would depend on the algorithm.  For an example, look at http://en.wikipedia.org/wiki/CRAM-MD5 which avoids having the user send their password over the network at all by having them hash it with a ""salt"" specified by the server.
","1912","<security><passwords><salt>","2","1","3","2010-11-20 14:54:47","4185181","1","1","-1","","2017-05-23 12:22:04","2010-10-30 19:21:59",""
"4060294","Do I have to keep my salt in the same column as my hash?","So, I'm cool with using a per-user salt to hash my users' passwords. However, there's one piece of advice in the accepted answer: 

Do not use a separate column for the salt.

This doesn't make sense to me. If I'm just catenating the hash and salt and putting them in the same column, surely that's semantically equivalent to two separate columns? In which case, that's just security-by-obscurity, no?
It's easier to use a separate column to store the salt (as long as it's per-user). Why shouldn't I?
","If you are going to store a random per user salt it doesn't really matter.  Store salt+hash in one column or store salt and hash in two columns.  Personally I would store it as a single column because it is unlikely you will ever be retrieving just salt or just the hash.  Also if you update the salt then hash needs to be updated also and when updating the hash you might as well update the salt.  Still either method of storage is equally valid from a cryptography standpoint.
I think what that comment was indicating (although poorly) is that an alternative solution is to derive the salt from another piece of per-user data, a derived salt.  
As an example take username and pass it through 1000+ iterations of PBKDF2 (actually picking a unique and unusual number of iterations is better - say 2137).  This would require attacker to gain access to not only the database but also your source code to defeat the system.
Now if the attacker has complete access to both password table & source code you have gained no security however if the attack has only access to the database (limited intrusion) you have stopped an attack or at least make it much more difficult.
Another aspect to consider in a derived salt implementation is if your attacker will be able to make a user account (open registration system). If anyone (including your attacker) can make an account (like say on stackoverflow) a derived salt is of less value.  Why?  Attacker can reverse engineer the salt and thus salt source with only access to the database via a plaintext attack (attacker knows his own password, and other details).
","1912","<security><passwords><salt>","2","3","3","2010-11-20 14:54:47","4185181","1","1","-1","","2017-05-23 12:22:04","2010-10-30 19:21:59",""
"4060294","Do I have to keep my salt in the same column as my hash?","So, I'm cool with using a per-user salt to hash my users' passwords. However, there's one piece of advice in the accepted answer: 

Do not use a separate column for the salt.

This doesn't make sense to me. If I'm just catenating the hash and salt and putting them in the same column, surely that's semantically equivalent to two separate columns? In which case, that's just security-by-obscurity, no?
It's easier to use a separate column to store the salt (as long as it's per-user). Why shouldn't I?
","The security answer is that it doesn't matter.
The database answer is that the salt and the hash are different quantities, and so you should ideally store them in different columns. If you do this then the database can be said to be normalized.
However, it is not uncommon to denormalize a database to improve access speed - concatenating the hash and salt in the same column would be an example of denormalization.
One reason to keep the salt and hash separate would be that you envisage searching for one or other of them. It seems to me unlikely that this is something that you'd want to do, so go ahead and store them concatenated.
","1912","<security><passwords><salt>","2","1","3","2010-11-20 14:54:47","4185181","1","1","-1","","2017-05-23 12:22:04","2010-10-30 19:21:59",""
"27737710","why does compareSync not need salt string?","I am trying to use bcryptjs to generate hash of user passwords. However I am a bit confused in one matter. 
Conventionally, according to this article, we need to:

keep the salt of our password hash relatively long and unique,
hash the user password salted with this salt
store the salted hashed password along with the salt

So when we are comparing the hash while authenticating the user, we append the stored salt to user inputed password, and compare it with hash from database.
However using hashSync and compareSync of bcryptjs as follows:
//hashSync to generate hash
var bcrypt = require('bcryptjs');
var password = ""abc"";
var hash = bcrypt.hashSync( <some string>, < integer length of salt>) // the salt of mentioned length(4-31) is self-generated which is random and fairly unique

//compareSYnc to compare hash
var testString=""abc"";
console.log(bcrypt.compareSync(testString, hash)) // compares with previously generated hash returns ""true"" in this case.

What I am confused is, if we dont need the salt while authenticating, what is significance of generating it? compareSync returns true without the access of salt. So wouldnt it make bruteforce attack for comparatively small password easy? All of the following returns true regardless of salt size:
console.log(bcrypt.compareSync(""abc"", bcrypt.hashSync(""abc""))); // consoles true. by default, if salt size is not mentioned, size is 10.
console.log(bcrypt.compareSync(""abc"", bcrypt.hashSync(""abc"", 4))); //consoles true
console.log(bcrypt.compareSync(""abc"", bcrypt.hashSync(""abc"", 8))); //consoles true
console.log(bcrypt.compareSync(""abc"", bcrypt.hashSync(""abc"", 32))); //consoles true
console.log(bcrypt.compareSync(""ab"", bcrypt.hashSync(""abc"", 4))); //consoles false

I hope I am clear enough in explaining my confusion.
","The bcrypt standard makes storing salts easy - everything it needs to check a password is stored in the output string.

The prefix ""$2a$"" or ""2y"" in a hash string in a shadow password file indicates that hash string is a bcrypt hash in modular crypt format. The rest of the hash string includes the cost parameter, a 128-bit salt (base-64 encoded as 22 characters), and the 192-bit[dubious – discuss] hash value (base-64 encoded as 31 characters).

That's from the Wikipedia page on bcrypt.
","1903","<node.js><hash><salt><bcrypt><saltedhash>","7","8","1","2015-01-02 06:38:29","27738352","0","2","","","","2015-01-02 05:23:36",""
"44797213","bcrypt node.js (auto-gen a salt and hash)","I am using the following code to hash (and hopefully salt) user passwords before I store them in my DB. 
// hash the password before the user is saved
ConsultantSchema.pre('save', function(next) {
  var user = this;

  // hash the password only if the password has been changed or user is new
  if (!user.isModified('password')) return next();

  // generate the hash
  bcrypt.hash(user.password, null, null, function(err, hash) {

    if (err) {
      logger.error(""bcrypt.hash ""+err);
      return next(err);
    } 

    // change the password to the hashed version
    user.password = hash;
    next();
  });
});

What I am confused about, is the part 
bcrypt.hash(user.password, null, null, function(err, hash) {

I got this code from a tutorial and I have seen it quite often searching for an answer.
Based on the documentation (https://www.npmjs.com/package/bcrypt) for bcrypt I would have expected the following code  
const saltrounds = 10;
bcrypt.hash(user.password, saltRounds, function(err, hash) {

To be working but this breaks my program without an error.
My questions are:
Why are there two ""null"" arguments? What are they for?
Is the hash salted based on the code with the two nulls?
Thank you in advance for you help!
","The following syntax is from the (abandoned?) bcrypt-nodejs module 1
bcrypt.hash(user.password, null, null, function(err, hash) {

You refer to the docs of the bcrypt module 2.
Make sure you're using the right module.
","1881","<node.js><hash><bcrypt><salt><saltedhash>","1","0","3","2017-06-28 08:39:41","44797597","1","","","","","2017-06-28 08:21:20",""
"44797213","bcrypt node.js (auto-gen a salt and hash)","I am using the following code to hash (and hopefully salt) user passwords before I store them in my DB. 
// hash the password before the user is saved
ConsultantSchema.pre('save', function(next) {
  var user = this;

  // hash the password only if the password has been changed or user is new
  if (!user.isModified('password')) return next();

  // generate the hash
  bcrypt.hash(user.password, null, null, function(err, hash) {

    if (err) {
      logger.error(""bcrypt.hash ""+err);
      return next(err);
    } 

    // change the password to the hashed version
    user.password = hash;
    next();
  });
});

What I am confused about, is the part 
bcrypt.hash(user.password, null, null, function(err, hash) {

I got this code from a tutorial and I have seen it quite often searching for an answer.
Based on the documentation (https://www.npmjs.com/package/bcrypt) for bcrypt I would have expected the following code  
const saltrounds = 10;
bcrypt.hash(user.password, saltRounds, function(err, hash) {

To be working but this breaks my program without an error.
My questions are:
Why are there two ""null"" arguments? What are they for?
Is the hash salted based on the code with the two nulls?
Thank you in advance for you help!
","I have used crypto library for hashing and it works great. Here is my code snippet


var salt = crypto.randomBytes(128).toString('base64');
var iterations = 10;
var keylen = 20;
crypto.pbkdf2(args.password, salt, iterations, keylen, function(succes, bcryptedPassword) {
                    console.log(bcryptedPassword.toString());
                    //Do actions here

                });



Please check if it helps you or not
","1881","<node.js><hash><bcrypt><salt><saltedhash>","1","0","3","2017-06-28 08:39:41","44797597","1","","","","","2017-06-28 08:21:20",""
"44797213","bcrypt node.js (auto-gen a salt and hash)","I am using the following code to hash (and hopefully salt) user passwords before I store them in my DB. 
// hash the password before the user is saved
ConsultantSchema.pre('save', function(next) {
  var user = this;

  // hash the password only if the password has been changed or user is new
  if (!user.isModified('password')) return next();

  // generate the hash
  bcrypt.hash(user.password, null, null, function(err, hash) {

    if (err) {
      logger.error(""bcrypt.hash ""+err);
      return next(err);
    } 

    // change the password to the hashed version
    user.password = hash;
    next();
  });
});

What I am confused about, is the part 
bcrypt.hash(user.password, null, null, function(err, hash) {

I got this code from a tutorial and I have seen it quite often searching for an answer.
Based on the documentation (https://www.npmjs.com/package/bcrypt) for bcrypt I would have expected the following code  
const saltrounds = 10;
bcrypt.hash(user.password, saltRounds, function(err, hash) {

To be working but this breaks my program without an error.
My questions are:
Why are there two ""null"" arguments? What are they for?
Is the hash salted based on the code with the two nulls?
Thank you in advance for you help!
","There is a difference between bcrypt and bcrypt-nodejs.  The following code is from their docs at npmjs.com.
bcrypt hashing
bcrypt.hash(myPlaintextPassword, salt, function(err, hash)

or
bcrypt.hash(myPlaintextPassword, saltRounds, function(err, hash)

bcrypt-nodejs hashing
bcrypt.hash(myPlaintextPassword, null, null, function(err, hash)

Explanation
You are looking at the docs for bcrypt, not bcrypt-nodejs.  If you are using node.js, you'll most likely want to use bcrypt-nodejs.  I have multiple projects utilizing its features.  The two null fields are for the salt and progress:

salt - [REQUIRED] - the salt to be used to hash the password.
progress - a callback to be called during the hash calculation to signify progress

","1881","<node.js><hash><bcrypt><salt><saltedhash>","1","0","3","2017-06-28 08:39:41","44797597","1","","","","","2017-06-28 08:21:20",""
"45972686","Scrypt hash algorithm for password hashing in Swift 3.0 (iOS)","I am trying to find a library to implement password hashing(with salt) using Scrypt algorithm.
My question is similar to one already asked in stackoverflow (Hash password in Swift application)
I have found following two libraries in swift and objective c respectively but the hash string generated from these is not matching with the one generated at server.

Swift-Sodium (https://github.com/jedisct1/swift-sodium)
NAChloride (https://github.com/gabriel/NAChloride)

Can someone please help in finding library which can be used for Swift 3.0 iOS application for password hashing with salt.
Thank you.
Regards,
Nagraj Wadgire  
","Common  Crypto contains PBKDF2 which is the NIST recommended password hashing function.
Example:
Password Based Key Derivation 2 (Swift 3)
Password Based Key Derivation can be used both for deriving an encryption key from password text and saving a password for authentication purposes.
There are several hash algorithms that can be used including SHA1, SHA256, SHA512 which are provided by this example code.
The rounds parameter is used to make the calculation slow so that an attacker will have to spend substantial time on each attempt. Typical delay values fall in the 100ms to 500ms, shorter values can be used if there is unacceptable performance. 
This example requires Common Crypto
It is necessary to have a bridging header to the project:
#import <CommonCrypto/CommonCrypto.h>
    Add the Security.framework to the project.
Parameters:  
password     password String  
salt         salt Data  
keyByteCount number of key bytes to generate
rounds       Iteration rounds

returns      Derived key


func pbkdf2SHA1(password: String, salt: Data, keyByteCount: Int, rounds: Int) -> Data? {
    return pbkdf2(hash:CCPBKDFAlgorithm(kCCPRFHmacAlgSHA1), password:password, salt:salt, keyByteCount:keyByteCount, rounds:rounds)
}

func pbkdf2SHA256(password: String, salt: Data, keyByteCount: Int, rounds: Int) -> Data? {
    return pbkdf2(hash:CCPBKDFAlgorithm(kCCPRFHmacAlgSHA256), password:password, salt:salt, keyByteCount:keyByteCount, rounds:rounds)
}

func pbkdf2SHA512(password: String, salt: Data, keyByteCount: Int, rounds: Int) -> Data? {
    return pbkdf2(hash:CCPBKDFAlgorithm(kCCPRFHmacAlgSHA512), password:password, salt:salt, keyByteCount:keyByteCount, rounds:rounds)
}

func pbkdf2(hash :CCPBKDFAlgorithm, password: String, salt: Data, keyByteCount: Int, rounds: Int) -> Data? {
    let passwordData = password.data(using:String.Encoding.utf8)!
    var derivedKeyData = Data(repeating:0, count:keyByteCount)

    let derivationStatus = derivedKeyData.withUnsafeMutableBytes {derivedKeyBytes in
        salt.withUnsafeBytes { saltBytes in

            CCKeyDerivationPBKDF(
                CCPBKDFAlgorithm(kCCPBKDF2),
                password, passwordData.count,
                saltBytes, salt.count,
                hash,
                UInt32(rounds),
                derivedKeyBytes, derivedKeyData.count)
        }
    }
    if (derivationStatus != 0) {
        print(""Error: \(derivationStatus)"")
        return nil;
    }

    return derivedKeyData
}

Example usage:
let password     = ""password""
//let salt       = ""saltData"".data(using: String.Encoding.utf8)!
let salt         = Data(bytes: [0x73, 0x61, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61])
let keyByteCount = 16
let rounds       = 100000

let derivedKey = pbkdf2SHA1(password:password, salt:salt, keyByteCount:keyByteCount, rounds:rounds)
print(""derivedKey (SHA1): \(derivedKey! as NSData)"")

Example Output:
derivedKey (SHA1): <6b9d4fa3 0385d128 f6d196ee 3f1d6dbf>

","1880","<ios><swift><hash><salt><scrypt>","2","0","2","2017-09-01 06:11:25","","0","2","","","","2017-08-31 03:21:44",""
"45972686","Scrypt hash algorithm for password hashing in Swift 3.0 (iOS)","I am trying to find a library to implement password hashing(with salt) using Scrypt algorithm.
My question is similar to one already asked in stackoverflow (Hash password in Swift application)
I have found following two libraries in swift and objective c respectively but the hash string generated from these is not matching with the one generated at server.

Swift-Sodium (https://github.com/jedisct1/swift-sodium)
NAChloride (https://github.com/gabriel/NAChloride)

Can someone please help in finding library which can be used for Swift 3.0 iOS application for password hashing with salt.
Thank you.
Regards,
Nagraj Wadgire  
","I had found answer for my own question, thought of sharing as it will be useful for others.
The server team was using Scrypt library (https://github.com/wg/scrypt) to generate hash string for given password and salt. 
After analysing the server side library we came to know that the generated hash string contains following components.
1) Scrypt version ($s0$)
2) params 
(This is calculated using below formula: 
String params = Long.toString(log2(N) << 16L | r << 8 | p, 16))
3) Salt in base64 string format
4) Generated derived key in base64 string format
The Format of final hash string is $s0$params$salt$key 
(Refer to this question for more information What's the is maximum length of scrypt output?)
As stated in the question  I have used NAChloride library at the client side to generate hash string. 
This class contains below method for generating hash string:
open class func scrypt(_ password: Data!, salt: Data!, n N: UInt64, r: UInt32, p: UInt32, length: Int) throws -> Data
In our example we have passed below values:
n= 16,
r= 16,
p= 16,
length (bytes) = 32,
salt = Data(bytes:[0x73, 0x61, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61,0x73, 0x61, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61,0x73, 0x61, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61,0x73, 0x61, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61])
This method will generate only derived key in 'Data' format, thus I was thinking that it is different when compared to the key generated at server side.
I had to write a logic after generating the derived key to match to the format of the hash string (server side hash string format) generated at the server.
Below is the code written in Swift 3.0 to generate hash string for given password using NAChloride library which internally uses Scrypt hash algorithm:
    func passwordHashingUsingScrypt(password: String) -> String{
    let N = 16
    let r = 16
    let p = 16

    let term1 = Int(log2(Double(N))) << 16
    let term2 = r << 8
    let paramsDecimal = term1 | term2 | p

    let params = String(format:""%2X"", paramsDecimal)
    print(params)

    let message = password.data(using:.utf8)!
    let salt = Data(bytes:[0x73, 0x61, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61,0x73, 0x61, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61,0x73, 0x61, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61,0x73, 0x61, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61])

    let saltBase64String = salt.base64EncodedString()
    print(saltBase64String)

    let hashData = try! NAScrypt.scrypt(message, salt: salt, n: 16, r: 16, p: 16, length: 32)
    let hashBase64String = hashData.base64EncodedString()
    print(hashBase64String)
    let result = saltBase64String+""$""+hashBase64String
    print(result)

    var hashString = String()
    hashString.append(""$s0$"")
    hashString.append(params)
    hashString.append(""$"")
    hashString.append(saltBase64String)
    hashString.append(""$"")
    hashString.append(hashBase64String)
    print(hashString)
    return hashString
}

You can also generate the random salt using below method:
func randomBytes(numberOfBytes:Int) -> [UInt8] {
    var randomBytes = [UInt8](repeating: 0, count: numberOfBytes) // array to hold randoms bytes
    let result = SecRandomCopyBytes(kSecRandomDefault, numberOfBytes, &randomBytes)
    print(result)
    return randomBytes
}

Result:
Password: 
admin1234<
Hash String: $s0$41010$c2FsdERhdGFzYWx0RGF0YXNhbHREYXRhc2FsdERhdGE=$GrMF1P3VH8YrgUEaOJDVSc4as/XTSWhCbbp4DLie00I=
","1880","<ios><swift><hash><salt><scrypt>","2","1","2","2017-09-01 06:11:25","","0","2","","","","2017-08-31 03:21:44",""
"4404253","How can I use salting+hashing on my ASP.Net application?","I'm building a project from the ground up and I want to do things the Right Way™. I've read online about hashes and that's basically turning a password in 64 letters of mumbo jumbo, correct?
What about salting?
My questions are:

How do I hash a string using C#?
What would the field declaration type be in MSSQL? nvarchar(64)?
What is salting and do I need to save that somewhere in my database?
If I intend to let people use Facebook Connect, do I need to worry about creating a hash/salt?

Code examples are preferred. Thanks!
","I will skip question 1 as I'm not a C# person.
Question 3:
Salting is adding a string of random data to the password before hashing. Salts are essential because without them it is possible for an attacker to pre-generate a rainbow table of known password hashes. Salting means that rainbow tables cannot be pre-built, and it means each password must be brute-forced separately.
It is important to generate a new salt for each password.
Salt values are not secret and can be stored alongside the hashed password in your database.
Pseudocode for generating and checking a password are as follows:
generatePassword(String user, String password) {
    String salt = generateRandomSalt();
    String salted = salt + password;
    String hash = hexEncode(hash(salted));
    store(user, hash, salt);
}

checkPassword(String user, String testPassword) {
    String salt = lookupSalt(user);
    String salted = salt + testPassword;
    String testHash = hexEncode(hash(salted));
    return testHash.equals(lookupHash(user));
}

Question 2:
The length of the database field depends on the hash algorithm. SHA1 generates 160-bit output, so that will be 40 characters if hex-encoded. A good rule of thumb is to use a salt that is the same size as the hash output, so you'll have two 40-character columns: one for salt, and one for the hash.
Question 4:
No idea how Facebook Connect works, sorry. I hope the other two answers are helpful.
","1866","<c#><sql-server><hash><salt>","2","1","4","2010-12-10 00:07:34","","0","","","","","2010-12-09 23:37:04",""
"4404253","How can I use salting+hashing on my ASP.Net application?","I'm building a project from the ground up and I want to do things the Right Way™. I've read online about hashes and that's basically turning a password in 64 letters of mumbo jumbo, correct?
What about salting?
My questions are:

How do I hash a string using C#?
What would the field declaration type be in MSSQL? nvarchar(64)?
What is salting and do I need to save that somewhere in my database?
If I intend to let people use Facebook Connect, do I need to worry about creating a hash/salt?

Code examples are preferred. Thanks!
","1) Code
   public static string HashStringSha1(string plainText, string salt)
        {
            using (SHA1CryptoServiceProvider sha1 = new SHA1CryptoServiceProvider())
            {
                byte[] bb = sha1.ComputeHash(Encoding.UTF8.GetBytes(salt + plainText + plainText));
                return Convert.ToBase64String(bb);
            }
        }

2) Store base64 string in SQLserver varchar
3) Store the salt in a different field with the hash. Salt as plain text.
4) Not sure what you mean. If you use OpenId, you do not need to store passwords.
","1866","<c#><sql-server><hash><salt>","2","1","4","2010-12-10 00:07:34","","0","","","","","2010-12-09 23:37:04",""
"4404253","How can I use salting+hashing on my ASP.Net application?","I'm building a project from the ground up and I want to do things the Right Way™. I've read online about hashes and that's basically turning a password in 64 letters of mumbo jumbo, correct?
What about salting?
My questions are:

How do I hash a string using C#?
What would the field declaration type be in MSSQL? nvarchar(64)?
What is salting and do I need to save that somewhere in my database?
If I intend to let people use Facebook Connect, do I need to worry about creating a hash/salt?

Code examples are preferred. Thanks!
","Hash & salt are used to keep your users password safe. MD5 hash is the most popular algorithm used. Hash functions are irreversible -> you cannot get the password from the hash, but somebody somewhere thought - hey! let's generate a a table that contains example passwords and their hashes then sort that and do simple lookup to check the password. This is why salt was introduced - salt is added to the user password and then hashed. Salt is randomly generated thus should be kept in the db for each hash.
For the details of implementation I suggest you look at live examples like nopCommerce which is open source e-commerce solution. http://www.nopcommerce.com
(this one is very useful because it has a custom membership provider implemented which utilizes the ideas of salt & hash)
","1866","<c#><sql-server><hash><salt>","2","0","4","2010-12-10 00:07:34","","0","","","","","2010-12-09 23:37:04",""
"4404253","How can I use salting+hashing on my ASP.Net application?","I'm building a project from the ground up and I want to do things the Right Way™. I've read online about hashes and that's basically turning a password in 64 letters of mumbo jumbo, correct?
What about salting?
My questions are:

How do I hash a string using C#?
What would the field declaration type be in MSSQL? nvarchar(64)?
What is salting and do I need to save that somewhere in my database?
If I intend to let people use Facebook Connect, do I need to worry about creating a hash/salt?

Code examples are preferred. Thanks!
","How do I hash a string using C#? 
Take a look here: 
http://support.microsoft.com/kb/307020
What would the field declaration type be in MSSQL? nvarchar(64)? 
It is binary data. You might want to format it as string, but thats ""extra work""
What is salting and do I need to save that somewhere in my database? 
You should use a unique salt per entry. The salt is there to make it impossible to know if 2 times the same password was used. usually a slat is constructed from 2 components... A ""shared secret"" (Needs to be resonably complex, so it can defeat lookup lists) and a unique part (for example a ID value of the user in the DB or something else.... Just make sure that ""shared"" + ""Unique"" + Password is unique
If I intend to let people use Facebook Connect, do I need to worry about creating a hash/salt?
If you can use a 3rd party API, then you dont have to care about hashing salting. As long as you dont save the passwords, there is no need to hash. Hashing is a one way function, so there is no ""good"" way (Hint: Rainbow tables) to reconstruct the original password. If you let facebook handle the authentication, you wont have to worry about all that base plumbing, since you dont store the passwords.
Hashing is used if you want some information so secure, that even someone that steals your DB cannot access it. BTW: That includes yourself... There is no way to recreate the original password...
","1866","<c#><sql-server><hash><salt>","2","0","4","2010-12-10 00:07:34","","0","","","","","2010-12-09 23:37:04",""
"28788367","WildFly: randomly salted passwords in Java EE application","What is the WildFly (8.2) way to work with randomly salted passwords stored in a database?
Is an implementation of org.jboss.crypto.digest.DigestCallback (in the password validation process) meant to have access to the salt part from the database?
Or should I simply hash and salt passwords by my self before handing them over to the login method of HttpServletRequest?
","It looks to me like the 'WildFly way' to deal with passwords is to do what most containers do and deliver a non-secure solution out-of-the-box. I don't know why, but every standard JDBC realm implementation I've seen so far just hashes the passwords without salt... Which is totally insecure. 
Open Source solution
EDIT: I found an out-of-the box solution that works on WildFly. I ended up using it myself and it works well. I can recommend it:
m9aertner/PBKDF2
Here is how I configured it:
First add a module to WildFly by creating a folder below modules/, like this:
C:\WildFly\v8.2.0\modules\de\rtner\PBKDF2\main
Place the PBKDF2-1.1.0.jar file in it along with a module.xml with these contents:
<?xml version=""1.0"" encoding=""UTF-8""?>
<module xmlns=""urn:jboss:module:1.1"" name=""de.rtner.PBKDF2"">
  <resources>
    <resource-root path=""PBKDF2-1.1.0.jar""/>
  </resources>
  <dependencies>
    <module name=""org.picketbox""/>
    <module name=""javax.api""/>
  </dependencies>
</module>`

Then, add a realm configuration to standalone.xml:
<subsystem xmlns=""urn:jboss:domain:security:1.2"">
  <security-domains>
    <!-- .... -->

    <security-domain name=""MyRealm"">
      <authentication>
        <login-module code=""de.rtner.security.auth.spi.SaltedDatabaseServerLoginModule"" flag=""required"" module=""de.rtner.PBKDF2"">
          <module-option name=""dsJndiName"" value=""java:/jdbc/MyDS""/>
          <module-option name=""principalsQuery"" value=""SELECT password FROM users WHERE username = ?""/>
          <module-option name=""rolesQuery"" value=""SELECT roles.name AS groupid, 'Roles' FROM roles INNER JOIN user_roles ON roles.name = users.username WHERE users.username = ?""/>
          <module-option name=""unauthenticatedIdentity"" value=""guest""/>
          <!-- DEFAULT HASHING OPTIONS:
          <module-option name=""hmacAlgorithm"" value=""HMacSHA1"" />
          <module-option name=""hashCharset"" value=""UTF-8"" />
          <module-option name=""formatter"" value=""de.rtner.security.auth.spi.PBKDF2HexFormatter"" />
          <module-option name=""engine"" value=""de.rtner.security.auth.spi.PBKDF2Engine"" />
          <module-option name=""engine-parameters"" value=""de.rtner.security.auth.spi.PBKDF2Parameters"" />
          -->
        </login-module>
      </authentication>
    </security-domain>

    <!-- .... -->
  </security-domains>
</subsystem>

The SQL queries are the same as for the standard DatabaseLoginModule. The default hashing options need not be specified (as they are default) but you do need to be aware of them (and set them correctly) when creating new users in order to hash their password correctly with the same parameters.
Example use
Here is what I am doing in my code to create a new password hash (including salt) based on a given plaintext:
public static String hash(String plainText, String storedPassword) {
    if (plainText == null) return null;
    SimplePBKDF2 crypto = new SimplePBKDF2();
    PBKDF2Parameters params = crypto.getParameters();
    params.setHashCharset(""UTF-8"");
    params.setHashAlgorithm(""HmacSHA1"");
    params.setIterationCount(1000);
    if (storedPassword != null) {
        new PBKDF2HexFormatter().fromString(params, storedPassword);
    }
    return crypto.deriveKeyFormatted(plainText);
}

When creating a new password, you would call this function passing null as the storedPassword:
String password = hash('MySecretPassword', null);

password would end up looking something like this: 
""192EAEB3B7AA40B1:1000:4C137AF7AD0F3999D18E2B9E6FB726D5C07DE7D5""

When comparing passwords, you call the same function, passing the original password and then compare the results:
String enteredPassword = hash(userInput, password);
if (enteredPassword.equals(password)) {
    // Ok!
}

The reason you need to pass the original password is that the hashing parameters and salt are stored in the password hash, so the algorithm needs the stored password to get these parameters and use them for the new hash. However you don't usually need to compare passwords yourself as this is already done in the login module.
Or, roll your own
This blog post gives some explanation on how to roll your own Realm implementation that does add salt. He has source code on GitHub so maybe use that. 
It's for Glassfish, but I think it doesn't matter as far as the Realm implementation code goes.
","1863","<security><salt><java-ee-7><wildfly-8>","4","5","1","2015-10-28 16:10:17","29295914","1","5","1725096","","2015-03-02 18:22:27","2015-02-28 23:49:19",""
"31374461","get string value of password from hash value","I have created a hash value for password using the below code.. I am storing the value which is returned from the below method.
public static string CreateHash(string password)
{
    // Generate a random salt
    RNGCryptoServiceProvider csprng = new RNGCryptoServiceProvider();
    byte[] salt = new byte[24];
    csprng.GetBytes(salt);
    HashAlgorithm hashAlg = new SHA256CryptoServiceProvider();
    byte[] bytValue = System.Text.Encoding.UTF8.GetBytes(salt + "":"" + password);
    // Hash the password and encode the parameters
    byte[] bytHash = hashAlg.ComputeHash(bytValue);
    return
        Convert.ToBase64String(bytHash);
}

Now i want to decode the value of the above created hash.. 
I need the string value of the password.. How do i do that..? 
","SHA-256 is a one-way hash algorithm. You can't get the original text back from the hash, short of brute-force guessing.
","1858","<c#><asp.net><security><salt><hashalgorithm>","0","4","1","2015-07-13 02:06:57","31374515","4","1","","","","2015-07-13 02:00:05",""
"10947694","java SecretKeyFactory password hashing doesn't work properly","I've got a web application and I want to store password hashes in a remote database. I wrote a simple class, which generates a password hash. Two public methods are available:
1. encrypt - encrypts the password and creates hash
2. checkPassword - calls encrypt to create hash, then compares two hashes
I made a simple test with two password checks, one should pass, another shouldn't.
Sometimes it works, sometimes don't.
Correct output:
password: abcdefg, hash: fd9927e15150bd01713115a761d1dea18b7da4aa
password: abcdefg, salt: 3595ac1baff6aa5e0097520593c7ac74
password: abcdefg, hash: fd9927e15150bd01713115a761d1dea18b7da4aa
password: abcdefg, salt: 3595ac1baff6aa5e0097520593c7ac74
passwords: abcdefg and abcdefg matched: true
password: abcdefgh, hash: a64a2958f3999d8ecdeb03326a151e786435ea4
password: abcdefgh, salt: 3595ac1baff6aa5e0097520593c7ac74
passwords: abcdefg and abcdefgh matched: false

Wrong output:
password: abcdefg, hash: 4913fe5cdea3346690463f76f73c1336ae976674
password: abcdefg, salt: 8e2aa1ec28d84fbaf78a6df260a7c707
password: abcdefg, hash: 97abd26927bf96076019b932bf6ab5494a8b0979
password: abcdefg, salt: 8e2aa1ec28d84fbaf78a6df260a7c707
passwords: abcdefg and abcdefg matched: false
password: abcdefgh, hash: 70594cd854bd60e07dfe14f72f01aa1f50de9aa2
password: abcdefgh, salt: 8e2aa1ec28d84fbaf78a6df260a7c707
passwords: abcdefg and abcdefgh matched: false

Source:
import java.math.BigInteger;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import java.util.Random;

import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;

public class CryptoUtils {

    /***************************************************************************
    * @param password
    * 
    * @return String[2] { hashed password, salt }
    * 
    * @throws NoSuchAlgorithmException
    * @throws InvalidKeySpecException
    ***************************************************************************/
    public static String[] encrypt(String password) throws NoSuchAlgorithmException, InvalidKeySpecException {
        byte[] salt = new byte[16];
        new Random().nextBytes(salt);

        return encrypt(password, salt);
    }

    private static String[] encrypt(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
        KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 2048, 160);
        SecretKeyFactory f = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
        byte[] hash = f.generateSecret(spec).getEncoded();

        String passHash = new BigInteger(1, hash).toString(16);
        String saltString = new BigInteger(1, salt).toString(16);

        System.out.println(""password: "" + password + "", hash: "" + passHash);// DEBUG
        System.out.println(""password: "" + password + "", salt: "" + saltString);

        return new String[] { passHash, saltString };
    }

    public static boolean checkPassword(String password, String hash, String salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
        String[] encrypted = encrypt(password, new BigInteger(salt, 16).toByteArray());

        return encrypted[0].equals(hash);
    }

    public static void main(String[] args) throws NoSuchAlgorithmException, InvalidKeySpecException {
        String pass1 = ""abcdefg"";
        String pass2 = pass1;
        String pass3 = pass1 + ""h"";

        String[] result = encrypt(pass1);
        String hash = result[0];
        String salt = result[1];

        System.out.println(""passwords: "" + pass1 + "" and "" + pass2 + "" matched: "" + checkPassword(pass2, hash, salt));
        System.out.println(""passwords: "" + pass1 + "" and "" + pass3 + "" matched: "" + checkPassword(pass3, hash, salt));
    }
}

Can anybody help?
","The problem is your conversion of salt string to bytes using BigInteger. If your salt string is negative and doesn't start with a zero bit, this code works. If your salt string is positive, BigInteger.toByteArray() has to sign extend by adding one more zero byte to the beginning, so it ends up 17 bytes long. Also, if your salt string has a zero as its highest-order byte, BigInteger.toByteArray() doesn't need 16 bytes to represent it so again your salt ends up the wrong length. You can probably write logic to reformat BigInteger's output to always contain 16 bytes, but it might be easier to simply parse the input string two characters at a time, adding byte values to an array yourself.
","1856","<java><security><hash><passwords><salt>","1","2","2","2012-06-08 12:50:38","10948639","0","","","","","2012-06-08 11:09:32",""
"10947694","java SecretKeyFactory password hashing doesn't work properly","I've got a web application and I want to store password hashes in a remote database. I wrote a simple class, which generates a password hash. Two public methods are available:
1. encrypt - encrypts the password and creates hash
2. checkPassword - calls encrypt to create hash, then compares two hashes
I made a simple test with two password checks, one should pass, another shouldn't.
Sometimes it works, sometimes don't.
Correct output:
password: abcdefg, hash: fd9927e15150bd01713115a761d1dea18b7da4aa
password: abcdefg, salt: 3595ac1baff6aa5e0097520593c7ac74
password: abcdefg, hash: fd9927e15150bd01713115a761d1dea18b7da4aa
password: abcdefg, salt: 3595ac1baff6aa5e0097520593c7ac74
passwords: abcdefg and abcdefg matched: true
password: abcdefgh, hash: a64a2958f3999d8ecdeb03326a151e786435ea4
password: abcdefgh, salt: 3595ac1baff6aa5e0097520593c7ac74
passwords: abcdefg and abcdefgh matched: false

Wrong output:
password: abcdefg, hash: 4913fe5cdea3346690463f76f73c1336ae976674
password: abcdefg, salt: 8e2aa1ec28d84fbaf78a6df260a7c707
password: abcdefg, hash: 97abd26927bf96076019b932bf6ab5494a8b0979
password: abcdefg, salt: 8e2aa1ec28d84fbaf78a6df260a7c707
passwords: abcdefg and abcdefg matched: false
password: abcdefgh, hash: 70594cd854bd60e07dfe14f72f01aa1f50de9aa2
password: abcdefgh, salt: 8e2aa1ec28d84fbaf78a6df260a7c707
passwords: abcdefg and abcdefgh matched: false

Source:
import java.math.BigInteger;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import java.util.Random;

import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;

public class CryptoUtils {

    /***************************************************************************
    * @param password
    * 
    * @return String[2] { hashed password, salt }
    * 
    * @throws NoSuchAlgorithmException
    * @throws InvalidKeySpecException
    ***************************************************************************/
    public static String[] encrypt(String password) throws NoSuchAlgorithmException, InvalidKeySpecException {
        byte[] salt = new byte[16];
        new Random().nextBytes(salt);

        return encrypt(password, salt);
    }

    private static String[] encrypt(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
        KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 2048, 160);
        SecretKeyFactory f = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
        byte[] hash = f.generateSecret(spec).getEncoded();

        String passHash = new BigInteger(1, hash).toString(16);
        String saltString = new BigInteger(1, salt).toString(16);

        System.out.println(""password: "" + password + "", hash: "" + passHash);// DEBUG
        System.out.println(""password: "" + password + "", salt: "" + saltString);

        return new String[] { passHash, saltString };
    }

    public static boolean checkPassword(String password, String hash, String salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
        String[] encrypted = encrypt(password, new BigInteger(salt, 16).toByteArray());

        return encrypted[0].equals(hash);
    }

    public static void main(String[] args) throws NoSuchAlgorithmException, InvalidKeySpecException {
        String pass1 = ""abcdefg"";
        String pass2 = pass1;
        String pass3 = pass1 + ""h"";

        String[] result = encrypt(pass1);
        String hash = result[0];
        String salt = result[1];

        System.out.println(""passwords: "" + pass1 + "" and "" + pass2 + "" matched: "" + checkPassword(pass2, hash, salt));
        System.out.println(""passwords: "" + pass1 + "" and "" + pass3 + "" matched: "" + checkPassword(pass3, hash, salt));
    }
}

Can anybody help?
","The problem was in String to byte array and back conversion. Now I use Base64.encode() and Base64.decode() methods and it works.
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import java.util.Random;

import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;

import com.sun.org.apache.xerces.internal.impl.dv.util.Base64;

public class CryptoUtils {

    /***************************************************************************
    * @param password
    * 
    * @return String[2] { hashed password, salt }
    * 
    * @throws NoSuchAlgorithmException
    * @throws InvalidKeySpecException
    ***************************************************************************/
    public static String[] encrypt(String password) throws NoSuchAlgorithmException, InvalidKeySpecException {
        byte[] salt = new byte[16];
        new Random().nextBytes(salt);

        return encrypt(password, salt);
    }

    private static String[] encrypt(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
        KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 2048, 160);
        SecretKeyFactory f = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
        byte[] hash = f.generateSecret(spec).getEncoded();

        String passHash = Base64.encode(hash);
        String saltString = Base64.encode(salt);

        System.out.println(""password: "" + password + "", hash: "" + passHash);// DEBUG
        System.out.println(""password: "" + password + "", salt: "" + saltString);

        return new String[] { passHash, saltString };
    }

    public static boolean checkPassword(String password, String hash, String salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
        String[] encrypted = encrypt(password, Base64.decode(salt));

        return encrypted[0].equals(hash);
    }

    public static void main(String[] args) throws NoSuchAlgorithmException, InvalidKeySpecException {
        String pass1 = ""abcdefg"";
        String pass2 = pass1;
        String pass3 = pass1 + ""h"";

        String[] result = encrypt(pass1);
        String hash = result[0];
        String salt = result[1];

        System.out.println(""passwords: "" + pass1 + "" and "" + pass2 + "" matched: "" + checkPassword(pass2, hash, salt));
        System.out.println(""passwords: "" + pass1 + "" and "" + pass3 + "" matched: "" + checkPassword(pass3, hash, salt));
    }
}

","1856","<java><security><hash><passwords><salt>","1","0","2","2012-06-08 12:50:38","10948639","0","","","","","2012-06-08 11:09:32",""
"12724935","Salt and passwords","
Possible Duplicate:
Secure hash and salt for PHP passwords 

WARNING Don't use MD5 for passwords, use an alternative like bcrypt

For my passwords should I use salt like this (the salt will be unique to each user and not stored directly with the password)...
$salt = sha1(md5(""coders gonna code""));
$password = md5($salt.$password);

or would it be okay if I just used:
$password = md5($password);

because if I used salt, even if the user makes up a bad password like password it won't matter because the salt (in this case) would be 145ac26ff093c6e1317f7d5fb4c9fd11c77be975 so the entry for there password would be 145ac26ff093c6e1317f7d5fb4c9fd11c77be975password which according to http://howsecureismypassword.net/ it would take 3 octodecillion years to crack.... so opinions? Or should I be even worse and go 
$password = md5($salt.$password.md5($salt));

If the person has gone far enough to get the salt hash, would anything be able to stop then going futher? < More of a statement this last password

To everyone who said I should do it per user... I know, this is just an example. 
","You are using the salt totally incorrectly. Salts should be unpredictable; your salt is the exact opposite of that (fixed). Since a fixed hash is of absolutely no benefit, it also seems that you are counting on the salt not being known by the attacker. This is the definition of security through obscurity, which is another bad practice.
What you should be doing is:

Use an unpredictable string of reasonable length as the salt. Randomly generated 8-character strings from a pool such as lower/upper case letters and digits are fine.
Use a different salt for each user, and change it every time they change their password.
Move from MD5 (which is considered broken) to another hash function better suited to this application. SHA-1 is better because it's not considered broken; bcrypt is the best because it has a configurable load factor.

","1856","<php><passwords><salt>","22","12","6","2018-06-04 16:44:22","12725009","5","4","1174869","","2018-06-04 16:44:22","2012-10-04 10:06:53","2012-10-04 17:59:49"
"12724935","Salt and passwords","
Possible Duplicate:
Secure hash and salt for PHP passwords 

WARNING Don't use MD5 for passwords, use an alternative like bcrypt

For my passwords should I use salt like this (the salt will be unique to each user and not stored directly with the password)...
$salt = sha1(md5(""coders gonna code""));
$password = md5($salt.$password);

or would it be okay if I just used:
$password = md5($password);

because if I used salt, even if the user makes up a bad password like password it won't matter because the salt (in this case) would be 145ac26ff093c6e1317f7d5fb4c9fd11c77be975 so the entry for there password would be 145ac26ff093c6e1317f7d5fb4c9fd11c77be975password which according to http://howsecureismypassword.net/ it would take 3 octodecillion years to crack.... so opinions? Or should I be even worse and go 
$password = md5($salt.$password.md5($salt));

If the person has gone far enough to get the salt hash, would anything be able to stop then going futher? < More of a statement this last password

To everyone who said I should do it per user... I know, this is just an example. 
","You should change the salt so that it is specific to each user, not a system wide constant. This will make rainbow table attacks against your password hashes much more inconvenient.
There is a good write up on the evolution of salting in this article by Troy Hunt.
Edit
$salt something unique to each password record, which adds much entropy to it. This is usually a random sequence of bytes, stored with the user account.
Hashing is traditionally done on the concatenation of salt + password. 
$passwordHash = hash($salt.$password);

As others have said, don't use MD5 for hashing. It is broken.
Applying additional proprietary algorithms to password or salt prior to hashing is not recommended. Instead, look at an industry strength solution such as PBKDF2, which, in addition to salting, also requires many (typically > 10k) repeated iterations which will further slow down an attacker. 
If you adopt OWASP guidelines, the number of hashes performed should be increased regularly (to counteract Moore's Law). The number of hashes should also be persisted per user, meaning you will need to store the triple of hashed password, salt, and number of iterations.
","1856","<php><passwords><salt>","22","12","6","2018-06-04 16:44:22","12725009","5","4","1174869","","2018-06-04 16:44:22","2012-10-04 10:06:53","2012-10-04 17:59:49"
"12724935","Salt and passwords","
Possible Duplicate:
Secure hash and salt for PHP passwords 

WARNING Don't use MD5 for passwords, use an alternative like bcrypt

For my passwords should I use salt like this (the salt will be unique to each user and not stored directly with the password)...
$salt = sha1(md5(""coders gonna code""));
$password = md5($salt.$password);

or would it be okay if I just used:
$password = md5($password);

because if I used salt, even if the user makes up a bad password like password it won't matter because the salt (in this case) would be 145ac26ff093c6e1317f7d5fb4c9fd11c77be975 so the entry for there password would be 145ac26ff093c6e1317f7d5fb4c9fd11c77be975password which according to http://howsecureismypassword.net/ it would take 3 octodecillion years to crack.... so opinions? Or should I be even worse and go 
$password = md5($salt.$password.md5($salt));

If the person has gone far enough to get the salt hash, would anything be able to stop then going futher? < More of a statement this last password

To everyone who said I should do it per user... I know, this is just an example. 
","
Don't use MD5 as your hashing algorithm, use something more secure such as SHA256 or even bcrypt. 
Definately salt the password, if someone did gain entry to your database they would not be able to reverse the passwords for common hashes or using techniques such as rainbow attacks.

http://michaelwright.me/php-password-storage
http://en.wikipedia.org/wiki/Bcrypt 
","1856","<php><passwords><salt>","22","8","6","2018-06-04 16:44:22","12725009","5","4","1174869","","2018-06-04 16:44:22","2012-10-04 10:06:53","2012-10-04 17:59:49"
"12724935","Salt and passwords","
Possible Duplicate:
Secure hash and salt for PHP passwords 

WARNING Don't use MD5 for passwords, use an alternative like bcrypt

For my passwords should I use salt like this (the salt will be unique to each user and not stored directly with the password)...
$salt = sha1(md5(""coders gonna code""));
$password = md5($salt.$password);

or would it be okay if I just used:
$password = md5($password);

because if I used salt, even if the user makes up a bad password like password it won't matter because the salt (in this case) would be 145ac26ff093c6e1317f7d5fb4c9fd11c77be975 so the entry for there password would be 145ac26ff093c6e1317f7d5fb4c9fd11c77be975password which according to http://howsecureismypassword.net/ it would take 3 octodecillion years to crack.... so opinions? Or should I be even worse and go 
$password = md5($salt.$password.md5($salt));

If the person has gone far enough to get the salt hash, would anything be able to stop then going futher? < More of a statement this last password

To everyone who said I should do it per user... I know, this is just an example. 
","Salts are meant to be completely random, and unrelated to the actual password you are storing a hash of.
What you should really do is generate a completely random salt, then do
$password = md5($salt.$password);

and store the user's username, salt and hashed password.
","1856","<php><passwords><salt>","22","0","6","2018-06-04 16:44:22","12725009","5","4","1174869","","2018-06-04 16:44:22","2012-10-04 10:06:53","2012-10-04 17:59:49"
"12724935","Salt and passwords","
Possible Duplicate:
Secure hash and salt for PHP passwords 

WARNING Don't use MD5 for passwords, use an alternative like bcrypt

For my passwords should I use salt like this (the salt will be unique to each user and not stored directly with the password)...
$salt = sha1(md5(""coders gonna code""));
$password = md5($salt.$password);

or would it be okay if I just used:
$password = md5($password);

because if I used salt, even if the user makes up a bad password like password it won't matter because the salt (in this case) would be 145ac26ff093c6e1317f7d5fb4c9fd11c77be975 so the entry for there password would be 145ac26ff093c6e1317f7d5fb4c9fd11c77be975password which according to http://howsecureismypassword.net/ it would take 3 octodecillion years to crack.... so opinions? Or should I be even worse and go 
$password = md5($salt.$password.md5($salt));

If the person has gone far enough to get the salt hash, would anything be able to stop then going futher? < More of a statement this last password

To everyone who said I should do it per user... I know, this is just an example. 
","I think salt is understood here incorrectly. The idea of salt is that it should be unique per hash. The reason is that when you create hash some different strings may have the same hash.
In your example you're hashing password too so it won't look like: 145ac26ff093c6e1317f7d5fb4c9fd11c77be975password
P.S. Use bcrypt. It's much more reliable.
","1856","<php><passwords><salt>","22","2","6","2018-06-04 16:44:22","12725009","5","4","1174869","","2018-06-04 16:44:22","2012-10-04 10:06:53","2012-10-04 17:59:49"
"12724935","Salt and passwords","
Possible Duplicate:
Secure hash and salt for PHP passwords 

WARNING Don't use MD5 for passwords, use an alternative like bcrypt

For my passwords should I use salt like this (the salt will be unique to each user and not stored directly with the password)...
$salt = sha1(md5(""coders gonna code""));
$password = md5($salt.$password);

or would it be okay if I just used:
$password = md5($password);

because if I used salt, even if the user makes up a bad password like password it won't matter because the salt (in this case) would be 145ac26ff093c6e1317f7d5fb4c9fd11c77be975 so the entry for there password would be 145ac26ff093c6e1317f7d5fb4c9fd11c77be975password which according to http://howsecureismypassword.net/ it would take 3 octodecillion years to crack.... so opinions? Or should I be even worse and go 
$password = md5($salt.$password.md5($salt));

If the person has gone far enough to get the salt hash, would anything be able to stop then going futher? < More of a statement this last password

To everyone who said I should do it per user... I know, this is just an example. 
","First of all you should never store md5 directly, which you regognized already.
PHP 5.5 will bring new methods to easily create and verify passwords in 1 line, until then you can use https://github.com/ircmaxell/password_compat (forward-compatible) to generate & verify safe password hashes.
","1856","<php><passwords><salt>","22","3","6","2018-06-04 16:44:22","12725009","5","4","1174869","","2018-06-04 16:44:22","2012-10-04 10:06:53","2012-10-04 17:59:49"
"29633912","Where is the salt on the OpenSSL RSA algorithm?","I find salting technique for symmetric routines in OpenSSL with the option -salt. But I can't find salt option for the asymmetric RSA algorithm. 
","A salt parameter makes only sense for password-based encryption. The password is used to derive the key to be used for encryption. When ever you pass a password to OpenSSL to encrypt something, you might also specify a salt to increase the input entropy of the whole process.
RSA is not password-based. The keys are generated in advance and used directly. So, there is simply no place to use a salt for RSA.
There is also a difference in the structure of symmetric keys and RSA keys. Keys for symmetric block ciphers are simply binary strings/arrays. They can easily be generated randomly or from a salted password. RSA keys on the other hand have a specific mathematical structure and cannot be purely random.
This is because one RSA key pair is used to encrypt the communication between two parties in one direction. One cannot simply generate the public key without the private key for RSA. They have to be generated at the same time. It wouldn't make sense to let one party generate the public key and the other the private key with a salt, because either

the keys would not be interoperable or
far worse, the public key holder would also be able to generate the private key along the way.

","1854","<openssl><rsa><salt>","0","2","1","2015-04-14 18:05:26","29634005","4","","1816580","","2015-04-14 17:42:55","2015-04-14 17:36:58",""
"1477944","User Login with a single query and per-user password salt","I've decided to implement a user login using a per-user salt, stored in the database.  The salt is prefixed to a password which is hashed with SHA and stored in the databse.
In the past when I wasn't using a salt I would use the typical method of counting the number of rows returned by a query using the user inputted username and password.  With a per user salt however, you need to get the salt before you can compare it with the stored password hash.
So to avoid having two queries (1 to get the salt and another to validate the input credentials) I decided to get the salt AND the hashed password in a single query based on the inputted username.  Something like
SELECT users.salt, users.password
        FROM users   
        WHERE username = ?'

and then in the serverside code (PHP) I concatenate the salt with the inputted password, hash it and compare it with the password already taken from the database.
If that isn't clear, I guess the key difference is that in the latter method I am checking credentials in PHP wheras before this was done in the database.
Are there any drawbacks of this method, in terms security or otherwise
","You could accomplish this in one query like this:
SELECT 
   SHA1(CONCAT(users.salt, ""password-input"")) = users.passwordhash
WHERE 
   username = ""username-input""

","1832","<php><mysql><login><passwords><salt>","3","8","4","2009-09-25 15:38:19","1477965","0","2","12855","","2009-09-25 15:23:36","2009-09-25 15:21:12",""
"1477944","User Login with a single query and per-user password salt","I've decided to implement a user login using a per-user salt, stored in the database.  The salt is prefixed to a password which is hashed with SHA and stored in the databse.
In the past when I wasn't using a salt I would use the typical method of counting the number of rows returned by a query using the user inputted username and password.  With a per user salt however, you need to get the salt before you can compare it with the stored password hash.
So to avoid having two queries (1 to get the salt and another to validate the input credentials) I decided to get the salt AND the hashed password in a single query based on the inputted username.  Something like
SELECT users.salt, users.password
        FROM users   
        WHERE username = ?'

and then in the serverside code (PHP) I concatenate the salt with the inputted password, hash it and compare it with the password already taken from the database.
If that isn't clear, I guess the key difference is that in the latter method I am checking credentials in PHP wheras before this was done in the database.
Are there any drawbacks of this method, in terms security or otherwise
","I see no drawbacks with it. ""gahooa"" gave an excellent answer as well. It'll shift the processing cost from your web server to your database server, but that's just a question for you as to which one is better suited to the load.
","1832","<php><mysql><login><passwords><salt>","3","0","4","2009-09-25 15:38:19","1477965","0","2","12855","","2009-09-25 15:23:36","2009-09-25 15:21:12",""
"1477944","User Login with a single query and per-user password salt","I've decided to implement a user login using a per-user salt, stored in the database.  The salt is prefixed to a password which is hashed with SHA and stored in the databse.
In the past when I wasn't using a salt I would use the typical method of counting the number of rows returned by a query using the user inputted username and password.  With a per user salt however, you need to get the salt before you can compare it with the stored password hash.
So to avoid having two queries (1 to get the salt and another to validate the input credentials) I decided to get the salt AND the hashed password in a single query based on the inputted username.  Something like
SELECT users.salt, users.password
        FROM users   
        WHERE username = ?'

and then in the serverside code (PHP) I concatenate the salt with the inputted password, hash it and compare it with the password already taken from the database.
If that isn't clear, I guess the key difference is that in the latter method I am checking credentials in PHP wheras before this was done in the database.
Are there any drawbacks of this method, in terms security or otherwise
","...and which is the server in 'in the server-side code (PHP)'?  I come from a world where the DBMS is the server and everything else is the client.  I suspect you're looking at a web-server as the 'server-side' and the DBMS as a separate gizmo, not necessarily as a server itself.  Ah well, such is the theory of relativity of viewpoints. (And don't get me started on X11 servers vs clients!)
Yes, it is reasonable to simply collect the salt and the salted, hashed password for the user name in a single operation, and then generate the SHA result of the provided password and the salt in PHP, comparing it with the retrieved hashed password value.  It even means that the password does not travel from the PHP to the database server, so it doesn't matter if that communication is encrypted or not (in the situation where the PHP and the DBMS are not on the same machine).  It also offloads the computation from the DBMS to the PHP; whether this is a benefit depends on the relative workloads of the PHP and the DBMS.
As another answer points out, it is possible to get the answer by sending the user's supplied password to the DBMS and having the DBMS do the hash computation.  Beware of simply quoting the user's input - escape it to prevent SQL injection.  This potentially exposes the password to snooping on the trip from PHP to DBMS.  How much that matters depends on your infrastructure.
","1832","<php><mysql><login><passwords><salt>","3","3","4","2009-09-25 15:38:19","1477965","0","2","12855","","2009-09-25 15:23:36","2009-09-25 15:21:12",""
"1477944","User Login with a single query and per-user password salt","I've decided to implement a user login using a per-user salt, stored in the database.  The salt is prefixed to a password which is hashed with SHA and stored in the databse.
In the past when I wasn't using a salt I would use the typical method of counting the number of rows returned by a query using the user inputted username and password.  With a per user salt however, you need to get the salt before you can compare it with the stored password hash.
So to avoid having two queries (1 to get the salt and another to validate the input credentials) I decided to get the salt AND the hashed password in a single query based on the inputted username.  Something like
SELECT users.salt, users.password
        FROM users   
        WHERE username = ?'

and then in the serverside code (PHP) I concatenate the salt with the inputted password, hash it and compare it with the password already taken from the database.
If that isn't clear, I guess the key difference is that in the latter method I am checking credentials in PHP wheras before this was done in the database.
Are there any drawbacks of this method, in terms security or otherwise
","I think your approach is generally sound. More important than how many queries you use, is whether you are retrieving the valid database password over the wire even when a bad password is input by the user. Your query does this, whereas by making use of an encryption function on your db server, you are avoiding this and making things more secure.
To make it even more secure, use a stored procedure or function that hides the type of encryption (or the fact that any is even being used) from anyone who is sniffing SQL queries over the wire, or through some other means (e.g., causing queries to be visible by using SQL injection vulnerabilities, or by exposing the query in an error message).
","1832","<php><mysql><login><passwords><salt>","3","1","4","2009-09-25 15:38:19","1477965","0","2","12855","","2009-09-25 15:23:36","2009-09-25 15:21:12",""
"4682473","Java and Cryptographically Strong Random Numbers","I have been doing some work with Java's SecureRandom class to generate salts for later encryption and password hashing (I am generating separate salts for each task).  The code I have been using is as follows:
//Init random number generator
secureRandom = SecureRandom.getInstance(""SHA1PRNG"");
secureRandom.setSeed(System.nanoTime());

//Create salts
secureRandom.nextBytes(bytAuthSalt);
secureRandom.nextBytes(bytEncryptionSalt);

Now, all was going fine until I started to actually verify the values that I got.  For several sequential executions of the application my salts were:
[B@43d55dd8
[B@43d55b58
[B@43d55b50
[B@43bd0cc8
[B@43db0b08
[B@43bd0f50

I am disturbed by the fact that the numbers all appear to be roughly sequential.  After some searching on the web, I repeated the runs again without seeding it myself to the same results.
My only guess as to what may be causing this comes from the fact that I am developing for the Android platform.  I know that they have their own cryptographic providers but I do not get any exceptions.  any ideas?
Thanks in advance.
","It looks like you're printing out the reference to the byte array instead of its contents.  This is why they're sequential, the reference is basically giving you the location in the JVM memory.  Convert the byte array to a String before you print it.
String saltContents = Arrays.toString(bytAuthSalt);

Converting the array to a String using Arrays will show you the raw values of the bytes.
","1830","<java><android><encryption><salt>","1","9","4","2014-10-11 21:15:28","4682551","0","1","","","","2011-01-13 16:32:07",""
"4682473","Java and Cryptographically Strong Random Numbers","I have been doing some work with Java's SecureRandom class to generate salts for later encryption and password hashing (I am generating separate salts for each task).  The code I have been using is as follows:
//Init random number generator
secureRandom = SecureRandom.getInstance(""SHA1PRNG"");
secureRandom.setSeed(System.nanoTime());

//Create salts
secureRandom.nextBytes(bytAuthSalt);
secureRandom.nextBytes(bytEncryptionSalt);

Now, all was going fine until I started to actually verify the values that I got.  For several sequential executions of the application my salts were:
[B@43d55dd8
[B@43d55b58
[B@43d55b50
[B@43bd0cc8
[B@43db0b08
[B@43bd0f50

I am disturbed by the fact that the numbers all appear to be roughly sequential.  After some searching on the web, I repeated the runs again without seeding it myself to the same results.
My only guess as to what may be causing this comes from the fact that I am developing for the Android platform.  I know that they have their own cryptographic providers but I do not get any exceptions.  any ideas?
Thanks in advance.
","Seems that you are printing an array, not actual values. ""[B@"" tells you it's a byte array, and everything after it object id.
Try something like this:

System.out.println(""bytAuthSalt"");
  for (byte b : bytAuthSalt) {
    System.out.print(b);
  }
  System.out.println();


Or this:

Arrays.toString(bytAuthSalt);


This would print all values in array.
","1830","<java><android><encryption><salt>","1","4","4","2014-10-11 21:15:28","4682551","0","1","","","","2011-01-13 16:32:07",""
"4682473","Java and Cryptographically Strong Random Numbers","I have been doing some work with Java's SecureRandom class to generate salts for later encryption and password hashing (I am generating separate salts for each task).  The code I have been using is as follows:
//Init random number generator
secureRandom = SecureRandom.getInstance(""SHA1PRNG"");
secureRandom.setSeed(System.nanoTime());

//Create salts
secureRandom.nextBytes(bytAuthSalt);
secureRandom.nextBytes(bytEncryptionSalt);

Now, all was going fine until I started to actually verify the values that I got.  For several sequential executions of the application my salts were:
[B@43d55dd8
[B@43d55b58
[B@43d55b50
[B@43bd0cc8
[B@43db0b08
[B@43bd0f50

I am disturbed by the fact that the numbers all appear to be roughly sequential.  After some searching on the web, I repeated the runs again without seeding it myself to the same results.
My only guess as to what may be causing this comes from the fact that I am developing for the Android platform.  I know that they have their own cryptographic providers but I do not get any exceptions.  any ideas?
Thanks in advance.
","I would also advise not to use for seeding System.nanoTime(), since it's not guaranteed to work properly in all platforms. In some cases it return just 'zero' which I suppose it's not right number for seeding RNG.
","1830","<java><android><encryption><salt>","1","1","4","2014-10-11 21:15:28","4682551","0","1","","","","2011-01-13 16:32:07",""
"4682473","Java and Cryptographically Strong Random Numbers","I have been doing some work with Java's SecureRandom class to generate salts for later encryption and password hashing (I am generating separate salts for each task).  The code I have been using is as follows:
//Init random number generator
secureRandom = SecureRandom.getInstance(""SHA1PRNG"");
secureRandom.setSeed(System.nanoTime());

//Create salts
secureRandom.nextBytes(bytAuthSalt);
secureRandom.nextBytes(bytEncryptionSalt);

Now, all was going fine until I started to actually verify the values that I got.  For several sequential executions of the application my salts were:
[B@43d55dd8
[B@43d55b58
[B@43d55b50
[B@43bd0cc8
[B@43db0b08
[B@43bd0f50

I am disturbed by the fact that the numbers all appear to be roughly sequential.  After some searching on the web, I repeated the runs again without seeding it myself to the same results.
My only guess as to what may be causing this comes from the fact that I am developing for the Android platform.  I know that they have their own cryptographic providers but I do not get any exceptions.  any ideas?
Thanks in advance.
","SHA1PRNG is only as secure as its seed. For this reason, using System.nanoTime() as the seed is a horrible idea. Attacker who can narrow down the time range of the seeding sufficiently can try out all the possible values until he finds the matching sequence. The attacker is aided by the fact that resolution of System.nanoTime() is usually much bigger than 1 nano-second.
It's much better to just do new SecureRandom() to allow JRE to pick the best possible implementation. On most platforms, this would use the OS-native entropy source to seed RNG, such as /dev/random.
","1830","<java><android><encryption><salt>","1","2","4","2014-10-11 21:15:28","4682551","0","1","","","","2011-01-13 16:32:07",""
"8596413","Why does salting a hashed password increase security?","I've been doing some research about securely storing passwords in a database. It is generally suggested that you use a salt. As explained in one of the answers in Secure hash and salt for PHP passwords, this changes the value of hashes, making a password more difficult to compromise.
As part of the verification mechanism, the password entered by the user is combined with the salt and hashed as needed. Given that the salt is transparent to the user, how does using salt provide any added benefit?
As I see it, with or without hashing, the same password will successfully authenticate you, because the plumbing that makes it different will take place behind the scenes. That is why none of the articles I've read so far have clarified things.
","Salted passwords reduce the probability that a rainbow table will already have the salted password's hash contained in it.
","1827","<security><salt>","2","3","2","2011-12-21 21:22:59","8596566","3","","-1","","2017-05-23 11:45:00","2011-12-21 21:12:13",""
"8596413","Why does salting a hashed password increase security?","I've been doing some research about securely storing passwords in a database. It is generally suggested that you use a salt. As explained in one of the answers in Secure hash and salt for PHP passwords, this changes the value of hashes, making a password more difficult to compromise.
As part of the verification mechanism, the password entered by the user is combined with the salt and hashed as needed. Given that the salt is transparent to the user, how does using salt provide any added benefit?
As I see it, with or without hashing, the same password will successfully authenticate you, because the plumbing that makes it different will take place behind the scenes. That is why none of the articles I've read so far have clarified things.
","consider a scenario, where you accept a password from you user and you are sending it over network or storing in database as plain-text.
if your user enters a password say 6-8 characters long. A hacker may have pre-generate hashes for all possible strings of 6-8 characters length and he can possibly deduce the password, by comparing it with your hash.(Matching your hash against all the pre-generates hashes, he can get a set of possible candidates,if collision occurs)
But if you append a salt of say 30 chracters to his plain-text password and then hash it. it becomes very difficult for any hacker to pre-generate all the possible combinations of that range. That is the main reason why we use a salt.
You cant restrict every user to input a 30 character long password for security purposes. if any user chooses a 4 char length password, just add 30 char salt and make it more secure. 
","1827","<security><salt>","2","4","2","2011-12-21 21:22:59","8596566","3","","-1","","2017-05-23 11:45:00","2011-12-21 21:12:13",""
"11156106","PHP best way to salt a password in our time","How to make absolutely original salt for every user?
Is it better to use time() function in PHP?
","Consider using a random salt instead of non-random.. Maybe you will find something useful in this article http://www.gregboggs.com/php-blowfish-random-salted-passwords/
Also take a look at this article http://codahale.com/how-to-safely-store-a-password/
One approach is to generate a unique salt for every user and store that salt in DB also.
Another good approach is that algorithm, which generates hash of your password MUST calculate salt more than second. The more complicated your hashing algorithm would be - the more problems will face a person who wants to hack your DB
","1817","<php><hash><salt><saltedhash>","1","2","4","2012-06-22 12:33:26","11156255","0","","","","","2012-06-22 12:25:12",""
"11156106","PHP best way to salt a password in our time","How to make absolutely original salt for every user?
Is it better to use time() function in PHP?
","use this line to generate strong salt in php
 $salt = bin2hex(mcrypt_create_iv(32, MCRYPT_DEV_URANDOM));

","1817","<php><hash><salt><saltedhash>","1","3","4","2012-06-22 12:33:26","11156255","0","","","","","2012-06-22 12:25:12",""
"11156106","PHP best way to salt a password in our time","How to make absolutely original salt for every user?
Is it better to use time() function in PHP?
","You can use microtime() function in PHP to generate a number based on microsecond, not seconds which makes it almost impossible for a user to have a equal salt with another user. You can also multiply this number with the user's ID.
Maybe a md5(uniqid()) is enough for salt for your application.
Edit: forgot to mention the more_entropy parameter with the uniqid() function. It will lesser the chances of same strings even when the function runs two times at the same microsecond, so the edited function should look like:
$salt = md5(uniqid($user_id, TRUE));

","1817","<php><hash><salt><saltedhash>","1","1","4","2012-06-22 12:33:26","11156255","0","","","","","2012-06-22 12:25:12",""
"11156106","PHP best way to salt a password in our time","How to make absolutely original salt for every user?
Is it better to use time() function in PHP?
","In many cases, a simple uniqid(mt_rand(), true) will do to generate a random salt. Combined with Blowfish should give you a pretty good password hash.
Alternatives are a pseudo random source such as /dev/urandom or openssl_pseudo_random_bytes(). There are also services that generate random data for you (based on radio-active degradation).
","1817","<php><hash><salt><saltedhash>","1","4","4","2012-06-22 12:33:26","11156255","0","","","","","2012-06-22 12:25:12",""
"44131607","how to encrypt / decrypt password with salt using libsodium php","What i am trying to get is

encrypt a password + salt with libsodium
store it to a database
read it and decrypt it (getting the plain password back for authentication)

I got a list of salts that i want to use to encrypt / decrypt my password.
When i encrypt the password i get a hash back so that one seems to work but at decrypting i always get false as return value.
Am i using the wrong methods for encrypt / decrypt with libsodium or am i completely driving in the wrong direction? 
My source for encrypt / decrypt:
function encrypt_libsodium($to_encrypt, $salt_to_use){
        if(!$data || !$salt_to_use){
            return null;
        }

        //get stored salt
        $this->key_ = substr(md5($this->pw_key[$salt_to_use].'_'), 0, $this->ks);

        //some libsodium specific stuff
        $out_len = \Sodium\CRYPTO_SIGN_SEEDBYTES;
        $ops_limit = \Sodium\CRYPTO_PWHASH_SCRYPTSALSA208SHA256_OPSLIMIT_INTERACTIVE;
        $mem_limit =\Sodium\CRYPTO_PWHASH_SCRYPTSALSA208SHA256_MEMLIMIT_INTERACTIVE;

        //create hash using libsodium
        $hash = \Sodium\crypto_pwhash($out_len, $to_encrypt, $this->key_,$ops_limit, $mem_limit);
        return $hash;
    }

    function decrypt_libsodium($hash, $salt_to_use){
        if(!$hash || !$what){
            return null;
        }

        //get stored salt
        $this->key_ = substr(md5($this->pw_key[$salt_to_use].'_'), 0, $this->ks);

        //get verification hash
        $decrypted = \Sodium\crypto_pwhash_scryptsalsa208sha256_str_verify($this->key_, $hash);
        return $decrypted;
    }

I appreciate any help!
regards Dom
","If you dont need specifically use libsodium, with this function you should be able to store the data encrypted in the database and decrypt it.
define(""ENCRYPT_METHOD"", ""AES-256-CBC"");
define(""SECRET_KEY"",""randomtextrandomtextforthesecretkey"");
define(""SECRET_IV"", ""randomtextforthesecretiv"");
function encriptar($action, $string)
{
  $output = false;
  $key    = hash(""sha256"", SECRET_KEY);
  $iv     = substr(hash(""sha256"", SECRET_IV), 0, 16);

  if ($action == ""encrypt"")
  {
    $output = openssl_encrypt($string, ENCRYPT_METHOD, $key, 0, $iv);
    $output = base64_encode($output);
  }
  else if($action == ""decrypt"")
    {
        $output = base64_decode($string);
        $output = openssl_decrypt($output, ENCRYPT_METHOD, $key, 0, $iv);
    }
  return $output;
}

The output will be the data you will store/get to database.
","1800","<php><hash><passwords><salt><libsodium>","0","1","2","2017-05-23 13:16:31","44133110","5","","","","","2017-05-23 09:59:40",""
"44131607","how to encrypt / decrypt password with salt using libsodium php","What i am trying to get is

encrypt a password + salt with libsodium
store it to a database
read it and decrypt it (getting the plain password back for authentication)

I got a list of salts that i want to use to encrypt / decrypt my password.
When i encrypt the password i get a hash back so that one seems to work but at decrypting i always get false as return value.
Am i using the wrong methods for encrypt / decrypt with libsodium or am i completely driving in the wrong direction? 
My source for encrypt / decrypt:
function encrypt_libsodium($to_encrypt, $salt_to_use){
        if(!$data || !$salt_to_use){
            return null;
        }

        //get stored salt
        $this->key_ = substr(md5($this->pw_key[$salt_to_use].'_'), 0, $this->ks);

        //some libsodium specific stuff
        $out_len = \Sodium\CRYPTO_SIGN_SEEDBYTES;
        $ops_limit = \Sodium\CRYPTO_PWHASH_SCRYPTSALSA208SHA256_OPSLIMIT_INTERACTIVE;
        $mem_limit =\Sodium\CRYPTO_PWHASH_SCRYPTSALSA208SHA256_MEMLIMIT_INTERACTIVE;

        //create hash using libsodium
        $hash = \Sodium\crypto_pwhash($out_len, $to_encrypt, $this->key_,$ops_limit, $mem_limit);
        return $hash;
    }

    function decrypt_libsodium($hash, $salt_to_use){
        if(!$hash || !$what){
            return null;
        }

        //get stored salt
        $this->key_ = substr(md5($this->pw_key[$salt_to_use].'_'), 0, $this->ks);

        //get verification hash
        $decrypted = \Sodium\crypto_pwhash_scryptsalsa208sha256_str_verify($this->key_, $hash);
        return $decrypted;
    }

I appreciate any help!
regards Dom
","Looks like you are trying to mix many unrelated things. CRYPTO_SIGN_SEEDBYTES is for signatures, which has nothing to do with password hashing, crypto_pwhash doesn't use the scrypt algorithm, so the CRYPTO_PWHASH_SCRYPTSALSA208SHA256_* constants don't apply, and I'm not sure what md5() does here. And you probably want to hash the password, not to encrypt it.
Anyway, the crypto_pwhash_str() function does everything you need. It creates a salt, hashes the password, and encodes the result (along with the salt, the algorithm and its parameters) as a string that you can directly store into the database:
$password = 'correct horse battery staple';
$h = \Sodium\crypto_pwhash_str($password,                                   
         \Sodium\CRYPTO_PWHASH_OPSLIMIT_INTERACTIVE,
         \Sodium\CRYPTO_PWHASH_MEMLIMIT_INTERACTIVE);

$h is all you need to store in the database.
Then, to verify that what you have in the database is valid for a given password:
if (\Sodium\crypto_pwhash_str_verify($h, $password) === FALSE) {
    // wrong password!
}

","1800","<php><hash><passwords><salt><libsodium>","0","3","2","2017-05-23 13:16:31","44133110","5","","","","","2017-05-23 09:59:40",""
"12007443","Why is crypt() returning different hashes with the same salt?","public static function blowfish($password, $storedpass = false) {
    //if encrypted data is passed, check it against input ($info) 
      if ($storedpass) { 
            if (substr($storedpass, 0, 60) == crypt($password, ""$2a$08$"".substr($storedpass, 60))) { 
                return true; 
            }  else { 
                return false; 
            } 
      }  else { 
            //make a salt and hash it with input, and add salt to end 
            $salt = ""143cd669b02e155c3cca6e"";//substr(bin2hex(openssl_random_pseudo_bytes(22)), 0, 22);
            //for ($i = 0; $i < 22; $i++) { 
                //$salt .= substr(""./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"", mt_rand(0, 63), 1); 
            //} 

            //return 82 char string (60 char hash & 22 char salt) 
            return crypt($password, ""$2a$08$"".$salt).$salt; 
     }
}

print(substr($storedpass, 0, 60).""<br />"");
print(crypt($password, ""$2a$08$"".substr($storedpass, 60)).""<br />"");
print(substr($storedpass, 60));

Produces the result:
$2a$08$143cd669b02e155c3cca6eM3k8s9BdE4jErJXJ8wSxshJDPcJQVPW
$2a$08$143cd669b02e155c3cca6eEiYm6ilW1ZC1PBS07LOh2XSq1NODSKK
143cd669b02e155c3cca6e

You can see I was previously generating a random salt of 22 characters, and I know all about PHPASS, that mt_rand() is not a CSPRNG, etc etc. What confuses/concerns me is simply why crypt() (given $password = 'admin') generates a different hash even using a static salt. You can see I've printed the substr($storedpass, 60) which generates the proper salt, but then running the crypt() function (with the same parameters to create the initial $storedpass) it generates a different result, breaking authentication for a (relatively small and not mission-critical) application of mine...
","it seems that you are sending the $password argument to the function as (undefined). 
that would generate this hash: 
$2a$08$143cd669b02e155c3cca6eM3k8s9BdE4jErJXJ8wSxshJDPcJQVPW

but (for example) if you run this:
$password = 'admin';
echo $storedpass = blowfish($password).""<br />"";

print(substr($storedpass, 0, 60).""<br />"");
print(crypt('admin', '$2a$08$'.substr($storedpass, 60)).""<br />"");
print(substr($storedpass, 60));

if (blowfish($password, $storedpass) == true) {
    echo 1;
}

that would output:
$2a$08$143cd669b02e155c3cca6eEiYm6ilW1ZC1PBS07LOh2XSq1NODSKK143cd669b02e155c3cca6e
$2a$08$143cd669b02e155c3cca6eEiYm6ilW1ZC1PBS07LOh2XSq1NODSKK
$2a$08$143cd669b02e155c3cca6eEiYm6ilW1ZC1PBS07LOh2XSq1NODSKK
143cd669b02e155c3cca6e
1

","1780","<php><encryption><hash><salt><crypt>","1","1","1","2012-08-17 14:55:41","","4","","","","","2012-08-17 14:10:55",""
"12991893","PHP mcrypt_get_iv_size () for Salt Size Generation","I am writing a PHP script to authenticate users. I want to use SHA512 for the hash and use a salt to prepend to the password. To generate the salt, I want to use mcrypt_create_iv. But first, I must figure out the initialization Vector size. For this, I see php has: mcrypt_get_iv_size. But I have a question, please:
For mcrypt_get_iv_size() what do I use for the cipher string and the mode string? Please keep in mind I am using SHA512, so the salt needs to be at LEAST as long as the sha512 hash. For experimenting, I tried "" mcrypt_get_iv_size(CRYPT_SHA512, MCRYPT_MODE_CFB) "" but php complained.
","The length of the salt has nothing to do with the IV size of any cipher. Rather you need to figure out how many bytes of random data are needed for your particular hashing algorithm, taking the salt formatting into account. For examples bcrypt needs 16 bytes with base64-esque encoding.
Anyway, the mere fact that you need to ask this question means that you don't know what you're doing and that's a really bad sign when it comes to password hashing. Please use one of the existing libraries for this purpose instead.
","1759","<php><salt><crypt>","1","0","2","2012-10-20 19:51:00","","3","","","","","2012-10-20 19:29:18",""
"12991893","PHP mcrypt_get_iv_size () for Salt Size Generation","I am writing a PHP script to authenticate users. I want to use SHA512 for the hash and use a salt to prepend to the password. To generate the salt, I want to use mcrypt_create_iv. But first, I must figure out the initialization Vector size. For this, I see php has: mcrypt_get_iv_size. But I have a question, please:
For mcrypt_get_iv_size() what do I use for the cipher string and the mode string? Please keep in mind I am using SHA512, so the salt needs to be at LEAST as long as the sha512 hash. For experimenting, I tried "" mcrypt_get_iv_size(CRYPT_SHA512, MCRYPT_MODE_CFB) "" but php complained.
","Actually mcrypt_create_iv() was designed to generate a random binary string, which can be used for encryption. What you want to do is hashing not encryption, so mcrypt_get_iv_size() does not make sense here.
Since PHP 5.3 it is safe to use mcrypt_create_iv() to generate a random string, but keep in mind that you get a binary output, which does not fit into the alphabet of the hash function.
You can look at this example which shows how to use mcrypt_create_iv() for generating a salt. To hash a password you should not use sha512 though, instead use a key derivation function like BCrypt, which is slow.
","1759","<php><salt><crypt>","1","1","2","2012-10-20 19:51:00","","3","","","","","2012-10-20 19:29:18",""
"6771084","Creating randomly generated, secure token and storing in database","I am trying to generate a unique token for every user on my site. The token is generated when the user registers, and will ideally be as secure as possble. What is the best method of doing so to allow me to display the token to the user?
This token is NOT a password, and the user is not going to create it themselves. If I hash and salt it upon registration, I will not be able to retrieve it obviously, because it's hashed and salted. I want a simple way to do so via PHP and be able to display it to the user easily.
","What about:
md5(uniqid('', true))

","1756","<php><security><hash><salt>","0","1","4","2012-09-04 19:45:36","6771141","1","","","","","2011-07-21 03:52:20",""
"6771084","Creating randomly generated, secure token and storing in database","I am trying to generate a unique token for every user on my site. The token is generated when the user registers, and will ideally be as secure as possble. What is the best method of doing so to allow me to display the token to the user?
This token is NOT a password, and the user is not going to create it themselves. If I hash and salt it upon registration, I will not be able to retrieve it obviously, because it's hashed and salted. I want a simple way to do so via PHP and be able to display it to the user easily.
","Hashes are one-way so the only way to reverse a hash is to store the original value making the hash redundant.
If you only need to display the value once, then store the value into a variable, print it on the page, and don't save it, that's secure for you.
Another option is to just use database encryption to store the token, then decrypt before displaying to the user. Assuming you use MySQL you might find this helpul: MySQL Encryption
","1756","<php><security><hash><salt>","0","0","4","2012-09-04 19:45:36","6771141","1","","","","","2011-07-21 03:52:20",""
"6771084","Creating randomly generated, secure token and storing in database","I am trying to generate a unique token for every user on my site. The token is generated when the user registers, and will ideally be as secure as possble. What is the best method of doing so to allow me to display the token to the user?
This token is NOT a password, and the user is not going to create it themselves. If I hash and salt it upon registration, I will not be able to retrieve it obviously, because it's hashed and salted. I want a simple way to do so via PHP and be able to display it to the user easily.
","not to degrade zerkms' comment. but i would recommend crypt().
what does the non-hashed value do for the user? 
","1756","<php><security><hash><salt>","0","0","4","2012-09-04 19:45:36","6771141","1","","","","","2011-07-21 03:52:20",""
"6771084","Creating randomly generated, secure token and storing in database","I am trying to generate a unique token for every user on my site. The token is generated when the user registers, and will ideally be as secure as possble. What is the best method of doing so to allow me to display the token to the user?
This token is NOT a password, and the user is not going to create it themselves. If I hash and salt it upon registration, I will not be able to retrieve it obviously, because it's hashed and salted. I want a simple way to do so via PHP and be able to display it to the user easily.
","How will the user use this token?
The real question is what do you mean by secure.  I am assuming you mean ""unguessable"", which just means that it has to be long and/or complex.
However that is a problem if the user needs to remember it.
So the real issue is how hard do you want to make it to guess, and how easy do you want it to be recalled?
","1756","<php><security><hash><salt>","0","0","4","2012-09-04 19:45:36","6771141","1","","","","","2011-07-21 03:52:20",""
"5473403","Representing Salt value as String","I am generating an encrypted message using .NET. As part of this process I am generating a salt value that is used in the encryption process and also transmitted to the recipient of the encrypted message so that they may decrypt the message. I want to transmit the salt as a text string but when I try to convert the salt byte array to a String I get each byte separated by a ""dash"". For example ..
45-A1-99-0C-C0-0C-C2-C2

Here is the method that generates the salt ..
Public Shared Function GenerateSalt() As String
  Dim rng As New RNGCryptoServiceProvider()
  Dim buffer As Byte() = New Byte(7) {}

  rng.GetBytes(buffer)
  Return BitConverter.ToString(buffer)
End Function

My question is this. How do I represent the salt as a string that the recipient can use in their decryption process?
","The easiest way is to use Convert.ToBase64String method for converting a byte array to string and Convert.FromBase64String for vise versa, e.g.
var salt = new byte[] { 1, 2, 4, 8, 16, 32, 64, 128, 255 };
var s = Convert.ToBase64String(salt);
var b = Convert.FromBase64String(s);

in this example s variable holds value AQIECBAgQID/, b holds byte array { 1, 2, 4, 8, 16, 32, 64, 128, 255 }, so nothing was lost.
Yes, the length of the s string and the length of the salt array are differs. This is because BASE64 is used here (it has 64 symbol alphabet, although byte may hold 256 different values).
But if you want to convert your byte array to a hexadecimal string and vise versa you could find this question helpful: How do you convert Byte Array to Hexadecimal String, and vice versa, in C#?.
","1741","<.net><encryption><bytearray><salt>","0","3","3","2011-03-29 15:08:27","5473464","4","","","","","2011-03-29 13:35:45",""
"5473403","Representing Salt value as String","I am generating an encrypted message using .NET. As part of this process I am generating a salt value that is used in the encryption process and also transmitted to the recipient of the encrypted message so that they may decrypt the message. I want to transmit the salt as a text string but when I try to convert the salt byte array to a String I get each byte separated by a ""dash"". For example ..
45-A1-99-0C-C0-0C-C2-C2

Here is the method that generates the salt ..
Public Shared Function GenerateSalt() As String
  Dim rng As New RNGCryptoServiceProvider()
  Dim buffer As Byte() = New Byte(7) {}

  rng.GetBytes(buffer)
  Return BitConverter.ToString(buffer)
End Function

My question is this. How do I represent the salt as a string that the recipient can use in their decryption process?
","Maybe System.Convert.ToBase64String is a possible option. System.Convert.FromBase64String converts the encoded string back.
","1741","<.net><encryption><bytearray><salt>","0","2","3","2011-03-29 15:08:27","5473464","4","","","","","2011-03-29 13:35:45",""
"5473403","Representing Salt value as String","I am generating an encrypted message using .NET. As part of this process I am generating a salt value that is used in the encryption process and also transmitted to the recipient of the encrypted message so that they may decrypt the message. I want to transmit the salt as a text string but when I try to convert the salt byte array to a String I get each byte separated by a ""dash"". For example ..
45-A1-99-0C-C0-0C-C2-C2

Here is the method that generates the salt ..
Public Shared Function GenerateSalt() As String
  Dim rng As New RNGCryptoServiceProvider()
  Dim buffer As Byte() = New Byte(7) {}

  rng.GetBytes(buffer)
  Return BitConverter.ToString(buffer)
End Function

My question is this. How do I represent the salt as a string that the recipient can use in their decryption process?
","This may help:
public static string CreateRandomPassword(int PasswordLength)
{
  String _allowedChars = ""abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNOPQRSTUVWXYZ23456789"";
  Byte[] randomBytes = new Byte[PasswordLength];
  RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
  rng.GetBytes(randomBytes);
  char[] chars = new char[PasswordLength];
  int allowedCharCount = _allowedChars.Length;

  for(int i = 0;i<PasswordLength;i++)
  {
    chars[i] = _allowedChars[(int)randomBytes[i] % allowedCharCount];
  }

  return new string(chars);
}

","1741","<.net><encryption><bytearray><salt>","0","1","3","2011-03-29 15:08:27","5473464","4","","","","","2011-03-29 13:35:45",""
"25272722","how does salt works on crypt function in c?","I read the man crypt and didn't understand what the phrase below means: salt is a two-character string chosen from the set [a-zA-Z0-9./]. This string is used to perturb the algorithm in one of 4096 different ways.
","
The primary function of salts is to defend against dictionary attacks versus a list of password hashes and against pre-computed rainbow table attacks.

Salt (cryptography)
Basically adding a little bit of unknown data into the hash prevents an attacker from precomputing all hashes for a given dictionary and then just looking up in the table to find the unhashed value.
","1736","<c><salt><crypt>","1","0","2","2014-08-12 19:56:29","","1","","","","","2014-08-12 19:39:34","2014-08-12 19:58:12"
"25272722","how does salt works on crypt function in c?","I read the man crypt and didn't understand what the phrase below means: salt is a two-character string chosen from the set [a-zA-Z0-9./]. This string is used to perturb the algorithm in one of 4096 different ways.
","Usually to encrypt sensitive data a salt is used.
What this means is your sensitive data (say password) is concatenated with a string(salt), encrypted and then stored.
This protects it against table attacks, in which an attacker, has most dictionary words and their popular algorithm encryption (md5, sha1, etc) Strings in a table. So if he were to have access to the db, he would be able to decipher all of your sensitive data.
Using a salt makes it harder for the attacker since - The attacker needs to know the algorithm used with which the salt was added and would need a specific dictionary for that specific salt, making his life harder.
","1736","<c><salt><crypt>","1","0","2","2014-08-12 19:56:29","","1","","","","","2014-08-12 19:39:34","2014-08-12 19:58:12"
"3354284","Sanity Check: Salt and hashed passwords","I had an idea about hashed passwords and salt values.  Since I'm rather new to hashing and encryption, I thought I'd post this to you.  Would it be more secure to generate a unique salt for each user account, then store the salt and hashed values in the database?  Or, keep a single salt value securely stored and re-use that each time I hashed a password?
For example, 
A user would use the password:
""secret""

My code would generate a salt value of: 
""d1d0e3d4b3d1ed1598a4e77bb614750a2a175e""

Then hash the result to get:
""e8187dcbe8e2eabd4675f3a345fe21c98affb
 5544a9278461535cb67265b6fe09a11dbef572
 ce3a4a8f2275839927625cf0bc7bc46fc45d51
 12d7c0713bb4a3""

The hashed result and salt would then be stored in the database in the users profile when their account was created.  Then, each time the user logged on, a new salt would be generated, the password and salt rehashed and stored in the database.
Any thoughts?  Like I said, this is a sanity check on an idea I had.
","As Adam already mentioned, hashing and storing the password each time a user logs in serves no real purpose.
Rather than rolling your own, you might want to look into using BCrypt.NET, a .NET implementation of a proven password hashing algorithm. 
Usage is very simple:
// When setting password
string hashedPassword = BCrypt.HashPassword(password, BCrypt.GenerateSalt());

// Upon login
bool validPassword = BCrypt.CheckPassword(password, hashedPassword);

It allows you to vary the computational costs of calculating a password hash if you want to, making it more difficult for someone to do a dictionary attack on a database they might have obtained for example. This is done by adding a parameter to the GenerateSalt method call.
The details of the BCrypt algorithm can be found here.
","1735","<c#><hash><password-protection><salt>","5","5","4","2010-07-28 15:51:16","3354677","8","3","","","","2010-07-28 15:11:31",""
"3354284","Sanity Check: Salt and hashed passwords","I had an idea about hashed passwords and salt values.  Since I'm rather new to hashing and encryption, I thought I'd post this to you.  Would it be more secure to generate a unique salt for each user account, then store the salt and hashed values in the database?  Or, keep a single salt value securely stored and re-use that each time I hashed a password?
For example, 
A user would use the password:
""secret""

My code would generate a salt value of: 
""d1d0e3d4b3d1ed1598a4e77bb614750a2a175e""

Then hash the result to get:
""e8187dcbe8e2eabd4675f3a345fe21c98affb
 5544a9278461535cb67265b6fe09a11dbef572
 ce3a4a8f2275839927625cf0bc7bc46fc45d51
 12d7c0713bb4a3""

The hashed result and salt would then be stored in the database in the users profile when their account was created.  Then, each time the user logged on, a new salt would be generated, the password and salt rehashed and stored in the database.
Any thoughts?  Like I said, this is a sanity check on an idea I had.
","The real purpose of a salt is to prevent against precomputation attacks, as the salt itself is NOT supposed to be secret (i.e. it is fine to have it accessible from the outside world).  It is therefore not intended to provide security against brute forcing since it's (almost) as easy to hash(Salt+Password) as it is hash(Password).
If you believe someone will actually build a precomputed table of your one single salt to a database of passwords, then look up the salted password hashes they found in your database with said table, then you should use a unique salt for each password.  Otherwise, don't worry about it.
","1735","<c#><hash><password-protection><salt>","5","1","4","2010-07-28 15:51:16","3354677","8","3","","","","2010-07-28 15:11:31",""
"3354284","Sanity Check: Salt and hashed passwords","I had an idea about hashed passwords and salt values.  Since I'm rather new to hashing and encryption, I thought I'd post this to you.  Would it be more secure to generate a unique salt for each user account, then store the salt and hashed values in the database?  Or, keep a single salt value securely stored and re-use that each time I hashed a password?
For example, 
A user would use the password:
""secret""

My code would generate a salt value of: 
""d1d0e3d4b3d1ed1598a4e77bb614750a2a175e""

Then hash the result to get:
""e8187dcbe8e2eabd4675f3a345fe21c98affb
 5544a9278461535cb67265b6fe09a11dbef572
 ce3a4a8f2275839927625cf0bc7bc46fc45d51
 12d7c0713bb4a3""

The hashed result and salt would then be stored in the database in the users profile when their account was created.  Then, each time the user logged on, a new salt would be generated, the password and salt rehashed and stored in the database.
Any thoughts?  Like I said, this is a sanity check on an idea I had.
","Storing a unique salt per user is a good idea in my opinion. Re-generating the salt/hash combination every time the user logs in is a bit pointless unless you've got CPU cycles to burn. I'd recommend using something like the Rfc2898DeriveBytes class to generate a secure salt/hash combo:
Simple example of generating a hash from a password:
string password = GetPasswordFromInput();

using (var deriveBytes = new Rfc2898DeriveBytes(password, 32))  // 32-byte salt
{
    byte[] salt = deriveBytes.Salt;
    byte[] hash = deriveBytes.GetBytes(32);  // 32-byte hash
    SaveToDatabase(salt, hash);
}

And the corresponding checking of a password:
string password = GetPasswordFromInput();
byte[] salt = GetSaltFromDatabase();
byte[] hash = GetHashFromDatabase();

using (var deriveBytes = new Rfc2898DeriveBytes(password, salt))
{
    if (deriveBytes.GetBytes(32).SequenceEqual(hash))
        Console.WriteLine(""Password matches"");
    else
        throw new Exception(""Bad password"");
}

","1735","<c#><hash><password-protection><salt>","5","7","4","2010-07-28 15:51:16","3354677","8","3","","","","2010-07-28 15:11:31",""
"3354284","Sanity Check: Salt and hashed passwords","I had an idea about hashed passwords and salt values.  Since I'm rather new to hashing and encryption, I thought I'd post this to you.  Would it be more secure to generate a unique salt for each user account, then store the salt and hashed values in the database?  Or, keep a single salt value securely stored and re-use that each time I hashed a password?
For example, 
A user would use the password:
""secret""

My code would generate a salt value of: 
""d1d0e3d4b3d1ed1598a4e77bb614750a2a175e""

Then hash the result to get:
""e8187dcbe8e2eabd4675f3a345fe21c98affb
 5544a9278461535cb67265b6fe09a11dbef572
 ce3a4a8f2275839927625cf0bc7bc46fc45d51
 12d7c0713bb4a3""

The hashed result and salt would then be stored in the database in the users profile when their account was created.  Then, each time the user logged on, a new salt would be generated, the password and salt rehashed and stored in the database.
Any thoughts?  Like I said, this is a sanity check on an idea I had.
","
Each user should have their own unique salt. 
There's no point updating the salt each time a user logs in, this serves no real purpose with regards to security. 
The salt should be randomly generated and not linked to the password in any way.

The purpose of a salt is to protect against pre-computation attacks (such as rainbow tables). So if two users have the same password, they won't have the same final hash. If the salt is system wide and not per user, then this wouldn't be the case and an attacker only need to pre-compute all of the passwords for your system once. If each user has their own salt, then a pre-computation attack would need to be done on each user individually, making the attack infeasible.
Using a salted hash does not protect against brute force dictionary attacks. You would need to use other methods to protect against those.
","1735","<c#><hash><password-protection><salt>","5","3","4","2010-07-28 15:51:16","3354677","8","3","","","","2010-07-28 15:11:31",""
"20381038","how to generate salt in yii?","I'm working on user management in my project and I got to the part where I need to store the passwords in the database. I read that the password should be crypt with the salt and be kept together. However I didn't seem to find out how do I generate a random salt for each new user. 
Anyone? 
","Try something like this
$salt = openssl_random_pseudo_bytes(22);
$salt = '$2a$%13$' . strtr($salt, array('_' => '.', '~' => '/'));
$password_hash = crypt($form->password, $salt);

And
if ($password_hash === crypt($form->password, $password_hash))
    // password is correct
else
    // password is wrong

Source
","1724","<yii><salt>","2","0","6","2013-12-04 21:43:36","20383576","0","1","","","","2013-12-04 16:43:35",""
"20381038","how to generate salt in yii?","I'm working on user management in my project and I got to the part where I need to store the passwords in the database. I read that the password should be crypt with the salt and be kept together. However I didn't seem to find out how do I generate a random salt for each new user. 
Anyone? 
","Not strictly relevant to your answer, but I use this excellent extension Yii extension which takes all the guesswork out of creating and storing passwords in Yii
","1724","<yii><salt>","2","0","6","2013-12-04 21:43:36","20383576","0","1","","","","2013-12-04 16:43:35",""
"20381038","how to generate salt in yii?","I'm working on user management in my project and I got to the part where I need to store the passwords in the database. I read that the password should be crypt with the salt and be kept together. However I didn't seem to find out how do I generate a random salt for each new user. 
Anyone? 
","Joe's answer is pretty good. I'd actually recommend using YiiPassword (https://github.com/phpnode/YiiPassword) as it gives you a lot of flexibility. 
But yes, when it comes to passwords and security, far better not to reinvent the wheel. The likelihood is that you'll end up with security issues unless you are really careful. 
","1724","<yii><salt>","2","0","6","2013-12-04 21:43:36","20383576","0","1","","","","2013-12-04 16:43:35",""
"20381038","how to generate salt in yii?","I'm working on user management in my project and I got to the part where I need to store the passwords in the database. I read that the password should be crypt with the salt and be kept together. However I didn't seem to find out how do I generate a random salt for each new user. 
Anyone? 
","I would seriously suggest you use CPasswordHelper.
","1724","<yii><salt>","2","2","6","2013-12-04 21:43:36","20383576","0","1","","","","2013-12-04 16:43:35",""
"20381038","how to generate salt in yii?","I'm working on user management in my project and I got to the part where I need to store the passwords in the database. I read that the password should be crypt with the salt and be kept together. However I didn't seem to find out how do I generate a random salt for each new user. 
Anyone? 
","try $this -> salt = uniqid('',true); and use $this->password = $this->hashPassword($this->password, $this->salt);} for salt encrypting user`s password
","1724","<yii><salt>","2","0","6","2013-12-04 21:43:36","20383576","0","1","","","","2013-12-04 16:43:35",""
"20381038","how to generate salt in yii?","I'm working on user management in my project and I got to the part where I need to store the passwords in the database. I read that the password should be crypt with the salt and be kept together. However I didn't seem to find out how do I generate a random salt for each new user. 
Anyone? 
","I'm not familiar with Yii, but actually you should be able to use PHP's native function password_hash() to generate the hash, and the function password_verify() to check whether the password matches the hash. This function will handle all the tricky parts like generating a safe salt, and will include the salt in the resulting hash.
// Hash a new password for storing in the database.
// The function automatically generates a cryptographically safe salt.
$hashToStoreInDb = password_hash($password, PASSWORD_BCRYPT);

// Check if the hash of the entered login password, matches the stored hash.
// The salt and the cost factor will be extracted from $existingHashFromDb.
$isPasswordCorrect = password_verify($password, $existingHashFromDb);

","1724","<yii><salt>","2","0","6","2013-12-04 21:43:36","20383576","0","1","","","","2013-12-04 16:43:35",""
"25043220","Generate random Salt using securerandom","I want to generate a random salt...
I am doing this but get the same salt every time even if I restart my program .. i checked using println
    SecureRandom random = SecureRandom.getInstance(""NativePRNGBlocking"");

    byte[] salt = new byte[32];
    random.nextBytes(salt);

    System.out.println(salt);

    return salt;

How to generate a random salt? I want a separate salt for each user.
","The bytes in the salt array will in fact be different, at least unless the NativePRNGBlocking implementation is broken. I think the problem is in your check. The toString method for byte arrays does not print the values in the array, so printing the salt array in that way is useless. Try to print the individual values: 
for(byte b: salt) { 
 System.out.print(b + "" ""); 
} 

Or you could just inspect them in a debugger.
","1717","<random><byte><salt>","3","1","2","2014-08-10 19:12:59","25231966","0","","","","","2014-07-30 17:27:18",""
"25043220","Generate random Salt using securerandom","I want to generate a random salt...
I am doing this but get the same salt every time even if I restart my program .. i checked using println
    SecureRandom random = SecureRandom.getInstance(""NativePRNGBlocking"");

    byte[] salt = new byte[32];
    random.nextBytes(salt);

    System.out.println(salt);

    return salt;

How to generate a random salt? I want a separate salt for each user.
","SecureRandom class supports the “SHA1PRNG” pseudo random number generator algorithm.
Try the below code it works fine for me and getting always unique outptut.
SecureRandom sr = SecureRandom.getInstance(""SHA1PRNG"");
//Create array for salt
byte[] salt = new byte[32];
//Get a random salt
sr.nextBytes(salt);
//return salt
System.out.println( salt.toString());

Hope it will resolve your issue.
","1717","<random><byte><salt>","3","0","2","2014-08-10 19:12:59","25231966","0","","","","","2014-07-30 17:27:18",""
"5498492","PHP - uniqid("""",true) versus uniqid("""")+mt_rand()","What are the key differences between these two approaches to generate sequential-but-somewhat-unique numbers?  I want to use such a number as a unique user ID inside a MySQL db, and also as a salt to salt a password.
My understanding is that for clustering and indexing reasons those IDs should be sequential (I realize that in some cases the random string will make two entries that occurred in the same microsecond non sequential, but hopefully this is negligible.)
","(scratch this, wrong info, sorry)
So yes, as Gumbo pointed out, it's not a hash but indeed a microsecond resolution increasing timer value, optionally concatenated with a random number. So, the values are still not sequential, but at least steady.
The difference between the two approaches would then be very small.
This one still holds: If you need unique sequential numbers, and you use MySQL, use an auto increment field, they do just that.
","1711","<php><mysql><security><salt>","1","2","2","2014-11-18 13:55:17","5498706","0","","","","","2011-03-31 10:34:38",""
"5498492","PHP - uniqid("""",true) versus uniqid("""")+mt_rand()","What are the key differences between these two approaches to generate sequential-but-somewhat-unique numbers?  I want to use such a number as a unique user ID inside a MySQL db, and also as a salt to salt a password.
My understanding is that for clustering and indexing reasons those IDs should be sequential (I realize that in some cases the random string will make two entries that occurred in the same microsecond non sequential, but hopefully this is negligible.)
","Without using more entropy, uniqid does basically the following (see source of uniqid.c):
$time = explode(' ', microtime(false));
return sprintf('%s%08x%05x', $prefix, $time[1], $time[0] * 1000000);

So it basically takes the current time in microseconds and turns them into a hexadecimal representation and appends it to the prefix. This does already provide unique values.
But the values are not quite random. For getting more random values, you should add more entropy by setting the second parameter more_entropy. In that case PHP’s internal linear congruential generator php_combined_lcg (see source of lgc.c) is used to generate a pseudo-random number that is attached at the end, adding circa 30 bits of additional entropy to make them more random.
","1711","<php><mysql><security><salt>","1","5","2","2014-11-18 13:55:17","5498706","0","","","","","2011-03-31 10:34:38",""
"10908957","howto encrypt passwords to the database using the Secured - Security.Authenticato","Im trying to save my passwords with some kind of security into the database.
What is the best way of doing this with the play framework?
Do I encrypt the string in javascript? Wouldnt have thought this was the best way?
or send normal string and then encrypt when saving to database?
","It doesn't matter if you use Play or any other system - encrypting passwords on client side make no sense as it can be re-engineered easily so you can just also store them as plain text (of course it's bad idea)
Instead you should use at least some well known techniques for storing passwords like salted encryption - it can be achieved with jBCrypt and of course it need to be done at the server side.
","1707","<playframework><salt><password-encryption>","4","5","2","2012-06-06 07:35:31","10909563","0","","1066240","","2012-06-06 07:03:26","2012-06-06 06:07:50",""
"10908957","howto encrypt passwords to the database using the Secured - Security.Authenticato","Im trying to save my passwords with some kind of security into the database.
What is the best way of doing this with the play framework?
Do I encrypt the string in javascript? Wouldnt have thought this was the best way?
or send normal string and then encrypt when saving to database?
","Have you looked at the security guide?
It is pretty complete and well explained.
","1707","<playframework><salt><password-encryption>","4","1","2","2012-06-06 07:35:31","10909563","0","","1066240","","2012-06-06 07:03:26","2012-06-06 06:07:50",""
"39567052","How ""dynamic salt"" hashing works?","Well, I don't know what it is really called so I call it dynamic salt hashing. Recently, I have encountered a hashing algorithm which uses dynamic salt(generated randomly). As a result, same string produces different hash values. I wonder how it is works as well as how it is verified. The verify function takes only 2 parameters: the string and the hash value. I want to know how it works.
Edit:
I have seen a similar (but not duplicate) question to mine: https://crypto.stackexchange.com/questions/1770/salts-how-does-the-script-know-what-the-salt-is
Both my question and that one, is not yet answered.
","The main reason for dynamic salt is to prevent ""Rainbow table"" attack.
Therefore, you will have to store the salt somewhere (e.g. in the table).
Then, each time you want to verify password you will have to get this specific salt.
The term ""dynamic salt"" is not that it is changing every time you verify it.
It only means that it is dynamic for each record.
This paper has everything you need to know.
","1703","<hash><salt>","3","2","1","2019-05-04 02:09:52","","4","","-1","","2017-04-13 12:48:18","2016-09-19 06:55:47",""
"31818421","Password Hashing SELECT (PHP)","Is it possible to select a hashed and salted password from MySql DB only using the posted password? If so, how?
If I hash the password this way:
    $password = ""blabla"";
    $hash = password_hash($password, PASSWORD_DEFAULT);

$hash will be, for example, $2y$10$8zzd3lj6oIPlBPnCxsU7nOmtsEFlKw/BdqTXyMgbuojjVpiEe4rVm and it will be stored in the db.
How, during a login, do I check against the hashed password column only, and only table's column, if the passwords match, having only 'blabla' as data?
","I think you mean how to select a hashed and salted password from a database then verify it with a plaintext password?  If so, here is how with bcrypt.
Keep in mind, this requires PHP 5 >= 5.5.0.
Also, I recommend scrypt over bcrypt, but you have to install scrypt manually.
SQL stuff
CREATE DATABASE `example`;
USE `example`;
CREATE TABLE `users` (
    `id` INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    `username` VARCHAR(16),
    `password` VARCHAR(255)
);

Hash Class (classes/Hash.class.php)
<?php
class Hash
{
    public static function make($string)
    {
        $options = array('cost' => 11);
        return password_hash($string, PASSWORD_BCRYPT, $options)
    }

    public static function check($password, $hash)
    {
        return password_verify($password, $hash);
    }
}

Database Class (classes/DB.class.php)
<?php
class DB
{
    private $dbhost = '127.0.0.1';
    private $dbname = 'example';
    private $dbuser = 'root';
    private $dbpass = 'pass';

    public function Connect()
    {
        return new PDO('mysql:host=' . $this->dbhost . ';dbname=' . $this->dbname, $this->dbuser, $this->pass);
    }
}

User Class (classes/User.class.php)
<?php
require_once('DB.class.php');
require_once('Hash.class.php');

class User
{
    private $db;

    public function __construct()
    {
        $this->db = new DB();
        $this->db = $this->db->Connect();
    }

    public function find($username)
    {
        $st = $this->db->prepare('SELECT * FROM `users` WHERE `username` = :username LIMIT 1');
        $st->bindParam(':username', $username, PDO::PARAM_STR);
        $st->execute();

        if($st->rowCount())
        {
            return $st->fetch(PDO::FETCH_ASSOC);
        }

        return false;
    }

    public function create($username, $password)
    {
        $password = Hash::make($password);

        $st = $this->db->prepare('INSERT INTO `users` (`username`, `password`) VALUES (:username, :password)');
        $st->bindParam(':username', $username, PDO::PARAM_STR);
        $st->bindParam(':password', $password, PDO::PARAM_STR);
        $st->execute();
    }

    public function verify($username, $password)
    {
        $user = $this->find($username);

        if($user)
        {
            if(Hash::check($password, $user['password']))
            {
                $_SESSION['isLoggedIn'] = true;
                return true;
            }
        }

        return false;
    }

    public function isLoggedIn()
    {
        if(isset($_SESSION['isLoggedIn']))
        {
            return true;
        }

        return false;
    }
}

Registration (register.php)
<?php
require_once('classes/User.class.php');

$user = new User();

if($user->isLoggedIn())
{
    header('Location: index.php');
    die();
}

if($_SERVER['REQUEST_METHOD'] == 'POST')
{
    $username = $_POST['username'];
    $password = $_POST['password'];

    // Check if username and password exist
    if(!isset($username) || !isset($password))
    {
        die('Username and password required');
    }

    // Check if values are not empty
    if(empty($username) || empty($password))
    {
        die('Blank fields not allowed');
    }


    // Check if username length is in between 4 and 16
    if(strlen($username) < 4 && strlen($username) > 16)
    {
        die('Username must be in between 4 and 16 characters');
    }

    // Check if username is alphanumeric
    if(!ctype_alnum($username))
    {
        die('Username must be alphanumeric');
    }

    // Check password length
    if(strlen($password) < 8)
    {
        die('Passwords should be at least 8 characters long');
    }

    // Check if username exists
    $exists = $user->find($username);

    if($exists)
    {
        die('Username already in use');
    }

    // Create account
    $user->create($username, $password);
    header('Location: login.php');
    die();

}
?>

// HTML goes here

Login (login.php)
<?php
require_once('classes/User.class.php');

$user = new User();

if($user->isLoggedIn())
{
    header('Location: index.php');
    die();
}

if($_SERVER['REQUEST_METHOD'] == 'POST')
{
    $username = $_POST['username'];
    $password = $_POST['password'];

    // Check if username and password exist
    if(!isset($username) || !isset($password))
    {
        die('Username and password required');
    }

    // Check if values are not empty
    if(empty($username) || empty($password))
    {
        die('Blank fields not allowed');
    }


    // Check if username length is in between 4 and 16
    if(strlen($username) < 4 && strlen($username) > 16)
    {
        die('Username must be in between 4 and 16 characters');
    }

    // Check if username is alphanumeric
    if(!ctype_alnum($username))
    {
        die('Username must be alphanumeric');
    }

    // Check password length
    if(strlen($password) < 8)
    {
        die('Passwords should be at least 8 characters long');
    }

    // Try to login
    $verified = $user->verify($username, $password);

    if($verified)
    {
        header('Location: index.php');
        die();
    } else {
        die('Invalid username/password');
    }
}
?>

// HTML goes here

Logout (logout.php)
<?php
require_once('classes/User.class.php');

$user = new User();

if($user->isLoggedIn())
{
    unset($_SESSION['isLoggedIn']);
}

header('Location: login.php');
die();

Index (index.php)
<?php
require_once('classes/User.class.php');

if(!$user->isLoggedIn())
{
    header('Location: login.php');
    die();
}
?>

<!DOCTYPE html>

<html lang=""en"">

<head>

    <title>Welcome</title>

</head>

<body>

    <h1>Menu</h1>
    <ul>
        <li><a href=""logout.php"">Logout?</a></li>
    </ul>

</body>

</html>

","1694","<hash><mysql><salt>","0","0","3","2015-08-05 15:34:26","31832955","10","1","","","","2015-08-04 17:15:01",""
"31818421","Password Hashing SELECT (PHP)","Is it possible to select a hashed and salted password from MySql DB only using the posted password? If so, how?
If I hash the password this way:
    $password = ""blabla"";
    $hash = password_hash($password, PASSWORD_DEFAULT);

$hash will be, for example, $2y$10$8zzd3lj6oIPlBPnCxsU7nOmtsEFlKw/BdqTXyMgbuojjVpiEe4rVm and it will be stored in the db.
How, during a login, do I check against the hashed password column only, and only table's column, if the passwords match, having only 'blabla' as data?
","
How, during a login, do I check against the hashed password column only, and only table's column, if the passwords match, having only 'blabla' as data?

You can't. Password storage is designed to make many operations impossible. If you want to find a match for a password without using the user name or some other key, you will need to call password_verify on every password until you get a match. By design, this will be very slow. 
Being passwords don't need to be in unique, you may have one password that matches many entries. 
My guess is that this is a bad idea and not what you want. 
","1694","<hash><mysql><salt>","0","0","3","2015-08-05 15:34:26","31832955","10","1","","","","2015-08-04 17:15:01",""
"31818421","Password Hashing SELECT (PHP)","Is it possible to select a hashed and salted password from MySql DB only using the posted password? If so, how?
If I hash the password this way:
    $password = ""blabla"";
    $hash = password_hash($password, PASSWORD_DEFAULT);

$hash will be, for example, $2y$10$8zzd3lj6oIPlBPnCxsU7nOmtsEFlKw/BdqTXyMgbuojjVpiEe4rVm and it will be stored in the db.
How, during a login, do I check against the hashed password column only, and only table's column, if the passwords match, having only 'blabla' as data?
","A properly salted and hashed password cannot be searched for with a database query. You will have to search for the hash by username/email/... and afterwards you can verify the entered password with the found hash.
1) First query for the stored hash
SELECT passwordhash FROM users WHERE email = ?

2) Verify the entered password with the found hash
$isPasswordCorrect = password_verify($password, $existingHashFromDb);

It is the salt who makes the search impossible, it must be extracted from the stored hash before you can verify the password. Such a query would have to read each hash, extract its salt and do the hashing. Because the hash function is very slow (on purpose) the query would need ways too long to execute.
","1694","<hash><mysql><salt>","0","0","3","2015-08-05 15:34:26","31832955","10","1","","","","2015-08-04 17:15:01",""
"5000448","How to create md5 hash as the crypt function generates with a md5 salt using the md5 function, not the crypt function?","I prefer using crypt function in php for password encryption and other one way encryption requirements. Because I can use any supported encryption algorithm, by changing the salt and there are few other advantages. Normally, I don't use any salt and it takes a random MD5 salt. I save this encryption string as password hash on the database, and while authenticating the user, I use this as salt to the crypt function. It works fine in php. But when it's needed any other programing language to create a hash, while I am using crypt function in the php part of the function, we were into problem.
I would like to know whether is there any simple way to create a MD5 hash (using PHP md5() function or other), which need to be similar to what crypt function generates while using a MD5 salt. If I can understand how it works in php, without using crypt function, then there may be a good possibility to implement in other programing languages.
","Here's code in Java that implements the same function. This may help you to do the same in other languages. 
For PHP, you may want to look into this code:
    echo 'MD5:          ' . crypt('mypassword', '$1$somesalt$') . ""\n"";
    echo 'MD5:          ' . mycrypt('mypassword', 'somesalt') . ""\n"";

    function to64($s, $n)
    {
        $i64 = ""./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"";
        $r = '';
        while (--$n >= 0) {
            $ss = $s & 0x3f;
            $r .= $i64[$s & 0x3f];
            $s >>= 6;
         }
        return $r;
    }

    function mycrypt($v, $s) {
            $m = hash_init(""md5"");
            hash_update($m, $v);
            hash_update($m, '$1$');
            hash_update($m, $s);

            $m1 = hash_init(""md5"");
            hash_update($m1, $v);
            hash_update($m1, $s);
            hash_update($m1, $v);
            $final = hash_final($m1, true);
            for ($pl = strlen($v); $pl>0; $pl-=16) {
                    hash_update($m, substr($final, 0, $pl > 16? 16:$pl));
            }
            $final = ""\0"";
            for($i=strlen($v);$i!=0;$i>>=1) {
                    if (($i & 1) != 0) {
                            hash_update($m, $final);
                    } else {
                            hash_update($m, $v[0]);
                   }
            }
            $final = hash_final($m, true);
            for($i=0;$i<1000;$i++) {
                $m1 = hash_init(""md5"");

                if(($i&1)) {
                    hash_update($m1, $v);
                } else {
                    hash_update($m1, $final);
                }
                if(($i%3)) {
                    hash_update($m1, $s);
                }
                if(($i%7)) {
                    hash_update($m1, $v);
                }
                if(($i&1)) {
                    hash_update($m1, $final);
                } else {
                    hash_update($m1, $v);
                }
                $final = hash_final($m1, true);
            }
            $l = '$1$'.$s.'$';
            $l .= to64(ord($final[ 0])<<16 | (ord($final[ 6])<<8) | ord($final[12]), 4);
            $l .= to64(ord($final[ 1])<<16 | (ord($final[ 7])<<8) | ord($final[13]), 4);
            $l .= to64(ord($final[ 2])<<16 | (ord($final[ 8])<<8) | ord($final[14]), 4);
            $l .= to64(ord($final[ 3])<<16 | (ord($final[ 9])<<8) | ord($final[15]), 4);
            $l .= to64(ord($final[ 4])<<16 | (ord($final[10])<<8) | ord($final[ 5]), 4);
            $l .= to64(ord($final[11]), 2);

            return $l;
    }

","1693","<php><encryption><md5><salt><crypt>","3","0","1","2011-02-15 07:51:42","","0","","","","","2011-02-15 06:12:03",""
"20855508","Using Bycrypt in Perl","#!/usr/bin/perlml -Tw
use strict;
use CGI;
use CGI::Carp qw(fatalsToBrowser); # show errors in browser
use Authen::Passphrase::BlowfishCrypt;
use Bytes::Random::Secure;

print ""Content-type:text/html\n\n"";

# read the CGI params
my $cgi = CGI->new;
my $username = $cgi->param(""username"");
my $password = $cgi->param(""password"");
if ($username =~ /[^a-zA-Z0-9]/) { die ""Illegal characters"" };
if ($password =~ /[^a-zA-Z0-9]/) { die ""Illegal characters"" };

my $settings = './settings.cnf';

use DBI;
my $dsn =
  ""DBI:mysql:DB;"" . 
  ""mysql_read_default_file=$dbsettings"";    

my $dbh = DBI->connect($dsn, undef, undef,{RaiseError=>1})
                or die ""Could not connect to database: $DBI::errstr"";

# check the username and password in the database
my $statement = qq{SELECT username,password FROM table WHERE username=? and password=?};
my $sth = $dbh->prepare($statement)
  or die $dbh->errstr;
$sth->execute($username, $password)
  or die $sth->errstr;
my ($userID) = $sth->fetchrow_array;

# create a JSON string according to the database result
my $json = ($userID) ? 
  qq{{""success"" : ""login is successful"", ""userid"" : ""$userID""}} : 
  qq{{""error"" : ""username or password is wrong""}};

# return JSON string
print $json;

$dbh->disconnect();

I'm now trying to implement bcrypt, over here... but unable to find any good example to learn from. I am having trouble generating random salts, since the documentation on cpan is so obscure for a perl nobie like me. 
I tried something like this:
my $gen = Authen::Passphrase::SaltedSHA512->new( passphrase => 'Sneaky!' );
my $salt = $gen->salt_hex;

my $hash = bcrypt_hash({
                        key_nul => 1,
                        cost => 8,
                        salt => $salt,
                }, $password);

tried to print $hash, got a ""salt must be 16 octet long exactly"" error
That's just me being lazy, and ignorant.. firing a arrow in the darkness. I really need a nice example, my head hurts, after 5 hours of stray thoughts and googling.  
Would really appreciate the help. 
PS: I have seen 2-3 very vague examples, one here in stackflow, those didn't give me any leads. Something fresh is desired.
","If you're already using Authen::Passphrase, you can let it do all the work for you:
use Authen::Passphrase::BlowfishCrypt;

my $password = ""Sneaky!"";

my $ppr = Authen::Passphrase::BlowfishCrypt->new(
    cost        => 8,
    salt_random => 1,
    passphrase  => $password,
);
my $string = $ppr->as_rfc2307;
print $string, ""\n"";

# Then, to verify the password
$ppr = Authen::Passphrase->from_rfc2307($string);
if ($ppr->match($password)) {
    print ""OK\n"";
}

If you want to work with Crypt::Eksblowfish::Bcrypt directly, note that it expects a 16-byte string as salt:
use Crypt::Eksblowfish::Bcrypt qw(bcrypt bcrypt_hash en_base64);

my $password = ""Sneaky!"";

my $salt = '';
for my $i (0..15) {
    $salt .= chr(rand(256));
}

my $hash = bcrypt_hash({
    key_nul => 1,
    cost    => 8,
    salt    => $salt,
}, $password);

# or

my $salt_base64 = en_base64($salt);
my $string = bcrypt($password, ""\$2a\$08\$$salt_base64"");
print $string, ""\n"";

","1683","<perl><hash><salt><bcrypt><blowfish>","2","4","2","2014-01-01 20:27:54","20855996","0","","2038089","","2014-01-01 20:27:54","2013-12-31 10:04:04",""
"20855508","Using Bycrypt in Perl","#!/usr/bin/perlml -Tw
use strict;
use CGI;
use CGI::Carp qw(fatalsToBrowser); # show errors in browser
use Authen::Passphrase::BlowfishCrypt;
use Bytes::Random::Secure;

print ""Content-type:text/html\n\n"";

# read the CGI params
my $cgi = CGI->new;
my $username = $cgi->param(""username"");
my $password = $cgi->param(""password"");
if ($username =~ /[^a-zA-Z0-9]/) { die ""Illegal characters"" };
if ($password =~ /[^a-zA-Z0-9]/) { die ""Illegal characters"" };

my $settings = './settings.cnf';

use DBI;
my $dsn =
  ""DBI:mysql:DB;"" . 
  ""mysql_read_default_file=$dbsettings"";    

my $dbh = DBI->connect($dsn, undef, undef,{RaiseError=>1})
                or die ""Could not connect to database: $DBI::errstr"";

# check the username and password in the database
my $statement = qq{SELECT username,password FROM table WHERE username=? and password=?};
my $sth = $dbh->prepare($statement)
  or die $dbh->errstr;
$sth->execute($username, $password)
  or die $sth->errstr;
my ($userID) = $sth->fetchrow_array;

# create a JSON string according to the database result
my $json = ($userID) ? 
  qq{{""success"" : ""login is successful"", ""userid"" : ""$userID""}} : 
  qq{{""error"" : ""username or password is wrong""}};

# return JSON string
print $json;

$dbh->disconnect();

I'm now trying to implement bcrypt, over here... but unable to find any good example to learn from. I am having trouble generating random salts, since the documentation on cpan is so obscure for a perl nobie like me. 
I tried something like this:
my $gen = Authen::Passphrase::SaltedSHA512->new( passphrase => 'Sneaky!' );
my $salt = $gen->salt_hex;

my $hash = bcrypt_hash({
                        key_nul => 1,
                        cost => 8,
                        salt => $salt,
                }, $password);

tried to print $hash, got a ""salt must be 16 octet long exactly"" error
That's just me being lazy, and ignorant.. firing a arrow in the darkness. I really need a nice example, my head hurts, after 5 hours of stray thoughts and googling.  
Would really appreciate the help. 
PS: I have seen 2-3 very vague examples, one here in stackflow, those didn't give me any leads. Something fresh is desired.
","I found part of the remaining answer here, incase anyone needs it.
Is there a perl module to validate passwords stored in "{crypt}hashedpassword" "{ssha}hashedpassword" "{md5}hashedpassword"
thanks a lot to nwellnhof for all the help :) 
","1683","<perl><hash><salt><bcrypt><blowfish>","2","0","2","2014-01-01 20:27:54","20855996","0","","2038089","","2014-01-01 20:27:54","2013-12-31 10:04:04",""
"39647123","Salt in PBKDF2 - Python","I'm just learning about securing password while developing using MySQL and Python, following this tutorial.
It's my understanding that the userpassword is stored at the database hashed, and the salt is stored along side unencrypted, so that we can grab the hashed password and the salt, and rehash using the salt the inputted password, then compare the two.
Though, when using PBKDF2 (via the passlib.hash.sha256_crypt() function) I can't set my own salt, only its size. So how can I rehash the password using the same salt so I can compare both?
","The Passlib Password Hash interface either lets you set the salt size, or the salt value itself. From the documentation on pbkdf2_sha256:


salt (bytes) Optional salt bytes. If specified, the length must be between 0-1024 bytes. If not specified, a 16 byte salt will be autogenerated (this is recommended).
salt_size (int) – Optional number of bytes to use when autogenerating new salts. Defaults to 16 bytes, but can be any value between 0 and 1024.


so you can set your own pre-generated salt:
>>> from passlib.hash import pbkdf2_sha256
>>> pbkdf2_sha256.hash(""password"", rounds=200000, salt=b'spamhameggs')
'$pbkdf2-sha256$200000$c3BhbWhhbWVnZ3M$WL9OLVcb3f7HqHeNT./kCJeunydLCi4JykzEuAdewcI'

However, note that the salt is part of the returned string. The string contains not only the resulting hash, but also the algorithm, the number of rounds used and the salt used, delimited by $. The salt is encoded to modified form of base64. You can verify this by decoding the string c3BhbWhhbWVnZ3M again::
>>> from passlib.utils.binary import ab64_decode
>>> ab64_decode(b'c3BhbWhhbWVnZ3M')
b'spamhameggs'

See the Format & Algorithm section for the pbkdf2_sha256 docs.
So when you store the full string pbkdf2_sha256 in the database, everything to validate the string is right there in the value, including the salt. Leaving generating a random salt is best left to that library as it'll use a secure method to generate one.
You may want to read the Passlib tutorial on password hashing, which includes coverage of how to hash passwords when storing in the database, and how to verify them again (e.g. using pdkdf2_sha256.verify(password_user_entered, hash_stored_in_database)), which covers exactly this ground.
","1663","<python><mysql><python-3.x><salt><pbkdf2>","3","3","1","2019-06-02 18:15:41","39660610","13","","100297","","2016-09-23 12:08:27","2016-09-22 19:10:38",""
"30183468","How do i encrypt password in three layers , SHA1, base64 encode and salt","I want to encrypt and decrypt password with high security .
First, the string password with be converted to SHA1 , then i also want to add base64 encode and lastly add SALT to it.
Is this doable in java?
I have sample code to encode in base64 and sha1 but i am not sure how to combine them all.
Here is snippet:
    String password = ""password"";
    BASE64Encoder encoder = new BASE64Encoder();
    encryptedPassword = encoder.encode(password.getBytes());

Using SHA1:
    MessageDigest md = MessageDigest.getInstance(""SHA-1"");
    md.reset();
    md.update(password.getBytes());
    System.out.println(new String(md.digest()));

Please suggest .
","These are the things you have to think of when playing around with salts:  


Generate a long random salt using a CSPRNG.  
Prepend the salt to the
  password and hash it with a standard cryptographic hash function
  such as SHA256.  


You need to append your generated Salt (generated with a Cryptographically Secure Pseudo-Random Number Generator) to the password and then hash it with SHA-1.  
Since SHA-1 is a hash Algorithm, you can't decode it. If you need to encrypt the password, you may read something about AES or RSA
I suggest you reading this article, Salted Password Hashing - Doing it Right, especially the part The RIGHT Way: How to Hash Properly, if you still want to hash your password properly.   
","1652","<java><base64><sha1><salt><password-encryption>","0","1","1","2015-05-12 06:56:46","30183672","9","2","","","","2015-05-12 06:34:36",""
"18834744","How are passwords and salts combined with MD5 in Java and Postgres SQL?","I'm having some trouble using salts with MD5.  I'm using both SQL (with Postgres 9.2) and Java, and I can't figure out how the salt and the unencrypted password are being combined.  Here's the Java code I'm using:
PasswordEncoder encoder = new Md5PasswordEncoder();
System.out.println(encoder.encodePassword(""userP@ss"", ""My_$3cr3t-$4lT""));

Which gives the result:
fac5ed68dd60573a4eb90760f02f5f5c

But then when I use SQL to do the same thing:
insert into account (email_address, account_name, password, phone_number, enabled)
   values ('user@freewheelers.com', 'UserCat', md5(CONCAT('userP@ss','My_$3cr3t-$4lT')), '', true);

Which gives the result:
c7d3665f9d5bebf959b0a890d0b75a9e

It is very important in this case to be able to replicate with the SQL what the Java is doing, or vice versa.  Does anyone know how the SQL and the Java combine the password and the salt?
Also, I know that I should be using BCrypt or some other algorithm, but in this case it is necessary to use MD5 + salt.
Thank you!
","You may have 2 different character encodings (UTF-8, ISO-8859, etc.), which will cause different results for the same encryption.
Is there a reason you need to encrypt in both Java and SQL?
Why not just do the encryption in Java and then just use SQL to store the encryption?
Using SQL to encrypt may present a problem if you have to change db vendors down the road and that new vendor either encrypts differently or not at all. Using Java (or whatever language you're using) to do the encryption gives you control of the implementation of the encryption.  This will make for repeatable/consistent encryptions, and will allow you to change your implementation should a newer encryption algorithm come about.
","1652","<java><postgresql><md5><salt>","0","1","1","2013-09-16 19:14:21","","5","","691288","","2013-09-16 18:42:25","2013-09-16 18:23:48",""
"7850706","clarification for crypt SHA-512 algorithm (c#)","EDIT: Sorry I forgot to mention, I'm not using the implemented sha512 crypt because as far as I can tell it doesn't involve a salt value or a specified number of rounds to compute the hash with.
Okay so I'm coding the sha-512 crypt in c# and I'm following the steps found here...
http://people.redhat.com/drepper/SHA-crypt.txt
This is my first time doing anything encryption related so I want to make sure I'm understanding the steps correctly... I don't understand c code well enough to direct translation from c to c# :/
I have assumed finishing a digest is the same as computing the hash.  In this case, I've also assumed that when the steps refer to a finished digest, they are referring the the computed hash, rather than the pre-hash computed digest bytes. Correct me if I'm wrong please!
Assuming everything has been done correctly for steps 1-8, my doubts start at step 9
9.  For each block of 32 or 64 bytes in the password string (excluding
    the terminating NUL in the C representation), add digest B to digest A
Since I'm using SHA-512, I have block sizes of 64 bytes.
Would the following code produce the desired result?
//FYI, temp = digestA from steps 1-3 (before expanding digestA for step 9)
//alt_result = computed digestB hash (64 byte hash)

for (cnt = key.Length; cnt > 64; cnt -= 64)                         //9
{
    int i = 0;
    ctx.TransformBlock(alt_result, 0, 64, digestA, temp.Length + 64 * i);
    i++;
}

If anyone can clarify that what I've stated is correct, I would appreciate it. Thanks!
","Salting is as simple as appending a fixed byte string on the end of your input string.  Essentially providing a known ""homegrown"" transform to your input.  
About the algorithm itself: you seem to be starting at a disadvantage.  A neophyte, you're making a lot of ""assumptions"" about basic crypting terminology that even need clarification.  If the CLR implementation won't work for you, I think your time would be better spent finding a good C implementation and figuring out how to integrate to that.  Figuring out the interop (extern) calls to that will be far easier than diving into the intracacies of crypting, the results will be more efficient, and the knowledge you gain about native interop will be far more useful/reusable.
","1645","<c#><encryption><salt><crypt><sha512>","2","3","2","2013-02-04 21:05:01","7852216","6","","972024","","2011-10-21 15:04:26","2011-10-21 14:16:28",""
"7850706","clarification for crypt SHA-512 algorithm (c#)","EDIT: Sorry I forgot to mention, I'm not using the implemented sha512 crypt because as far as I can tell it doesn't involve a salt value or a specified number of rounds to compute the hash with.
Okay so I'm coding the sha-512 crypt in c# and I'm following the steps found here...
http://people.redhat.com/drepper/SHA-crypt.txt
This is my first time doing anything encryption related so I want to make sure I'm understanding the steps correctly... I don't understand c code well enough to direct translation from c to c# :/
I have assumed finishing a digest is the same as computing the hash.  In this case, I've also assumed that when the steps refer to a finished digest, they are referring the the computed hash, rather than the pre-hash computed digest bytes. Correct me if I'm wrong please!
Assuming everything has been done correctly for steps 1-8, my doubts start at step 9
9.  For each block of 32 or 64 bytes in the password string (excluding
    the terminating NUL in the C representation), add digest B to digest A
Since I'm using SHA-512, I have block sizes of 64 bytes.
Would the following code produce the desired result?
//FYI, temp = digestA from steps 1-3 (before expanding digestA for step 9)
//alt_result = computed digestB hash (64 byte hash)

for (cnt = key.Length; cnt > 64; cnt -= 64)                         //9
{
    int i = 0;
    ctx.TransformBlock(alt_result, 0, 64, digestA, temp.Length + 64 * i);
    i++;
}

If anyone can clarify that what I've stated is correct, I would appreciate it. Thanks!
","I'll add some important clarification for others who might come across this later.
First:
SHA512 and SHA512Crypt are two distinct algorithms for two different purposes.  SHA512 is a general purpose hashing algorithm (see this).  SHA512Crypt is a password storage or password based key derivation algorithm that uses SHA512 (hash) internally (see this).  SHA512Crypt is based on the earlier Crypt function that used MD5 instead of SHA512.
The password storage/key generation algorithms have been specifically created to make it orders of magnitude more expensive to brute force.  The typical way this is done is by iterating over the underlying hash algorithm in some fashion.  However, you don't want to to this yourself... which brings us to...
Second:
Do NOT write your own cryptography methods. (see this)  There are tons of ways to screw it up, even if you know exactly what you are doing.
If you don't want to use the built in Rfc2898DerviceBytes due to it being based on SHA1, then you could look at bcrypt or some other public, reviewed implementation of a known cryptographic algorithms.
","1645","<c#><encryption><salt><crypt><sha512>","2","3","2","2013-02-04 21:05:01","7852216","6","","972024","","2011-10-21 15:04:26","2011-10-21 14:16:28",""
"9205636","Md5 with salt encoding","I am migrating some data from joomla based cms system to spring based Java EE environment .
During analysis I found that md5 implementation of passwords is not same as joomla ??? Any idea why difference in md5 implementation  ??
For example :
if joomla record had a password field like ""3c57ebfec712312f30c3fd1981979f58:WnvTroeiBmd5bjGmmsVUnNjppadH7giK"" (here 3c57ebfec712312f30c3fd1981979f58 is final md5 hash digest and WnvTroeiBmd5bjGmmsVUnNjppadH7giK is key to be appended with user password input) and when the user tries to login with this record in spring system it fails.
In spring based Java EE system , we use hash encoder as md5 and salt as some variable which is WnvTroeiBmd5bjGmmsVUnNjppadH7giK here.
Junit Code snippet: This test case fails.
@Test
public void testSpringMD5Functionality() {

    String md5MigratedPassword = ""3c57ebfec712312f30c3fd1981979f58:WnvTroeiBmd5bjGmmsVUnNjppadH7giK"";
    String[] m = md5MigratedPassword.split("":"");

    Md5PasswordEncoder passwordEncoder = new Md5PasswordEncoder();
    passwordEncoder.setEncodeHashAsBase64(false);
    boolean value = passwordEncoder.isPasswordValid(m[0], ""password"", m[1]);
    assertTrue(value); //test case fails ?????

}

","Spring's Md5PasswordEncoder never claimed to be compatible with Joomla's salted MD5 passwords.
In short, it can't work. You need Java code doing the same thing than Joomla's does.
http://forum.joomla.org/viewtopic.php?t=207689#p993378 claims to be such a piece of code, you should try it.
If it doesn't work the likest culprit is likely an encoding issue, you must make sure to convert Java string (16 bit wide chars) to a PHP compatible byte representation.
Also you should likely consider a migration path toward a stronger password derivation function such as PBKDF2.
","1622","<spring><authentication><md5><salt>","1","0","2","2012-03-06 05:02:21","9229069","0","2","472792","","2012-02-18 14:55:51","2012-02-09 04:56:05",""
"9205636","Md5 with salt encoding","I am migrating some data from joomla based cms system to spring based Java EE environment .
During analysis I found that md5 implementation of passwords is not same as joomla ??? Any idea why difference in md5 implementation  ??
For example :
if joomla record had a password field like ""3c57ebfec712312f30c3fd1981979f58:WnvTroeiBmd5bjGmmsVUnNjppadH7giK"" (here 3c57ebfec712312f30c3fd1981979f58 is final md5 hash digest and WnvTroeiBmd5bjGmmsVUnNjppadH7giK is key to be appended with user password input) and when the user tries to login with this record in spring system it fails.
In spring based Java EE system , we use hash encoder as md5 and salt as some variable which is WnvTroeiBmd5bjGmmsVUnNjppadH7giK here.
Junit Code snippet: This test case fails.
@Test
public void testSpringMD5Functionality() {

    String md5MigratedPassword = ""3c57ebfec712312f30c3fd1981979f58:WnvTroeiBmd5bjGmmsVUnNjppadH7giK"";
    String[] m = md5MigratedPassword.split("":"");

    Md5PasswordEncoder passwordEncoder = new Md5PasswordEncoder();
    passwordEncoder.setEncodeHashAsBase64(false);
    boolean value = passwordEncoder.isPasswordValid(m[0], ""password"", m[1]);
    assertTrue(value); //test case fails ?????

}

","The above does not work (including comment by challenge). The following code is taken from here - http://forum.joomla.org/viewtopic.php?t=207689#p993378 and confirmed to be working for both salted and non-salted passwords.
public class Joomla15PasswordHash 
{
   public static boolean check(String passwd,String dbEntry) {
      if (passwd==null || dbEntry==null || dbEntry.length()==0)
    throw new IllegalArgumentException();
      String[] arr = dbEntry.split("":"",2);
      if (arr.length==2) {
    // new format as {HASH}:{SALT}
    String cryptpass = arr[0];
    String salt = arr[1];

    return md5(passwd+salt).equals(cryptpass);
      } else {
         // old format as {HASH} just like PHPbb and many other apps
    String cryptpass = dbEntry;

    return md5(passwd).equals(cryptpass); 
      }
   }

   static Random _rnd;

   public static String create(String passwd) {
      StringBuffer saltBuf = new StringBuffer();
      synchronized (Joomla15PasswordHash.class) {
    if (_rnd==null) _rnd=new SecureRandom();
    int i;
    for (i=0;i<32;i++) {
       saltBuf.append(Integer.toString(_rnd.nextInt(36),36));
    }
      }
      String salt = saltBuf.toString();

      return md5(passwd+salt)+"":""+salt;
   }

   /** Takes the MD5 hash of a sequence of ASCII or LATIN1 characters,
    *  and returns it as a 32-character lowercase hex string.
    *
    *  Equivalent to MySQL's MD5() function 
    *  and to perl's Digest::MD5::md5_hex(),
    *  and to PHP's md5().
    *
    *  Does no error-checking of the input,  but only uses the low 8 bits
    *  from each input character.
    */
   private static String md5(String data) {
      byte[] bdata = new byte[data.length()]; int i; byte[] hash;

      for (i=0;i<data.length();i++) bdata[i]=(byte)(data.charAt(i)&0xff );

      try {
         MessageDigest md5er = MessageDigest.getInstance(""MD5"");
         hash = md5er.digest(bdata);
      } catch (GeneralSecurityException e) { throw new RuntimeException(e); }

      StringBuffer r = new StringBuffer(32);
      for (i=0;i<hash.length;i++) {
         String x = Integer.toHexString(hash[i]&0xff);
         if (x.length()<2) r.append(""0"");
         r.append(x);
      }
      return r.toString();      
   }
}

","1622","<spring><authentication><md5><salt>","1","2","2","2012-03-06 05:02:21","9229069","0","2","472792","","2012-02-18 14:55:51","2012-02-09 04:56:05",""
"9881131","using md5 and salt with j security check","Right now I am using j security check and md5 to authenticate my jsp pages. I would like to salt the password before I store it into the database. Due to restricted access at school, I do not have rights to create a trigger to inject some salt. Is there any other way to do this?
here is my realm:
<Realm 
    className=""org.apache.catalina.realm.JDBCRealm"" 
    driverName=""com.mysql.jdbc.Driver"" 
    connectionURL=""jdbc:mysql://someurl""
    connectionName=""name"" 
    connectionPassword=""password"" 
    userTable=""name.users"" 
    userNameCol=""user_name"" 
    userCredCol=""user_password"" 
    userRoleTable=""name.users""
    roleNameCol=""role""
    digest=""MD5""
    />

","Quickly said : ""No, you can't. At least, not Simply""
In fact, digests are handled by public static final Digest(String credentials, String algorithm,String   encoding) method in org.apache.catalina.realm.RealmBase class from which your JDBCRealm class inherits. This Digest method calls directly MessageDigest instance which can be used only with ""MD5"", ""SHA-1"" and ""MD2"" I think. So, you can't do anything to your password before or after applying your MD5 algortihm
But, you can implement a provider to have the algorithm you want. But I warn you, that's not so simple.
And by the way, I'd personnally prefer to have a SHA-1 hashed password than a MD5 one, even if it's salted :-)
","1591","<tomcat><passwords><salt><realm><j-security-check>","3","1","2","2012-04-04 12:44:52","10009273","7","1","3474","","2012-03-29 04:33:49","2012-03-26 23:01:12",""
"9881131","using md5 and salt with j security check","Right now I am using j security check and md5 to authenticate my jsp pages. I would like to salt the password before I store it into the database. Due to restricted access at school, I do not have rights to create a trigger to inject some salt. Is there any other way to do this?
here is my realm:
<Realm 
    className=""org.apache.catalina.realm.JDBCRealm"" 
    driverName=""com.mysql.jdbc.Driver"" 
    connectionURL=""jdbc:mysql://someurl""
    connectionName=""name"" 
    connectionPassword=""password"" 
    userTable=""name.users"" 
    userNameCol=""user_name"" 
    userCredCol=""user_password"" 
    userRoleTable=""name.users""
    roleNameCol=""role""
    digest=""MD5""
    />

","I think that the only way is to make own implementation of few functions (overriding JDBCRealm's methods) such as authenticate.
","1591","<tomcat><passwords><salt><realm><j-security-check>","3","1","2","2012-04-04 12:44:52","10009273","7","1","3474","","2012-03-29 04:33:49","2012-03-26 23:01:12",""
"29235252","password_hash/password_salt vs password_digest","I'm currently going through Michael Hartl's book (Ruby on Rails tutorial 3rd edition) and he uses password_digest with his authentication model, I checked out Pragmatic Studio's Rails course and in their sample video, they use passowrd_hash/password_salt in their authentication model. From wikipediaing, it seems that salt is a standard use in cryptography and has a variety of uses for security. All I could really find on password_digest is it works with a rails method has_secure_password.
Is one preferred over the other or do they serve different purposes ultimately? 
","when using the has_secure_password a lot of the encryption magic is done automatically for you, and a few functions are exposed that make it easier for you to verify the password of a User.
As taken from the has_secure_password documentation:
# Schema: User(name:string, password_digest:string)
class User < ActiveRecord::Base   
  has_secure_password 
end

user = User.new(name: 'david', password: '', password_confirmation: 'nomatch') 
user.save
# => false, password required

user.password = 'mUc3m00RsqyRe'
user.save
# => false, confirmation doesn't match

user.password_confirmation = 'mUc3m00RsqyRe'
user.save                                             
# => true 

user.authenticate('notright')                                   
# => false
user.authenticate('mUc3m00RsqyRe')                              
# => user
User.find_by(name: 'david').try(:authenticate, 'notright')
# => false 
User.find_by(name: 'david').try(:authenticate, 'mUc3m00RsqyRe')
# => user

Both systems you mentioned will work, it just comes down on what you wish to use, what options you  have available etc.
","1586","<ruby-on-rails><ruby><ruby-on-rails-4><salt><digest>","1","2","3","2015-03-24 14:59:09","29235409","0","","","","","2015-03-24 14:29:53",""
"29235252","password_hash/password_salt vs password_digest","I'm currently going through Michael Hartl's book (Ruby on Rails tutorial 3rd edition) and he uses password_digest with his authentication model, I checked out Pragmatic Studio's Rails course and in their sample video, they use passowrd_hash/password_salt in their authentication model. From wikipediaing, it seems that salt is a standard use in cryptography and has a variety of uses for security. All I could really find on password_digest is it works with a rails method has_secure_password.
Is one preferred over the other or do they serve different purposes ultimately? 
","Manually building a salted hash (based on e.g. SHA1) was indeed a long time the default way to store passwords. However, since a couple of years, it became clear that there need to be better (i.e. more secure) ways to store a password which ensure that even if an attacker could gain access to the raw hashes, they could not easily brute-force them.
As such, in newer Rails versions, passwords are by default saved with has_secure_password using the Bcrypt algorithm which is much more suitable for password storage than a simple salted hash. Note that Bcrypt also uses a salt internally. You just don't have to deal with it yourself.
","1586","<ruby-on-rails><ruby><ruby-on-rails-4><salt><digest>","1","1","3","2015-03-24 14:59:09","29235409","0","","","","","2015-03-24 14:29:53",""
"29235252","password_hash/password_salt vs password_digest","I'm currently going through Michael Hartl's book (Ruby on Rails tutorial 3rd edition) and he uses password_digest with his authentication model, I checked out Pragmatic Studio's Rails course and in their sample video, they use passowrd_hash/password_salt in their authentication model. From wikipediaing, it seems that salt is a standard use in cryptography and has a variety of uses for security. All I could really find on password_digest is it works with a rails method has_secure_password.
Is one preferred over the other or do they serve different purposes ultimately? 
","The method Hartl uses, has_secure_password, uses an algorithm called Bcrypt to salt and hash a password, producing a password_digest string that has three components: 

A flag that indicates that the string is a Bcrypt hash
The (unhashed) salt
The result of hashing password+salt

I'm not familiar with the Pragmatic Studio course, but it sounds like they're storing the salt and hash in different attributes.
","1586","<ruby-on-rails><ruby><ruby-on-rails-4><salt><digest>","1","1","3","2015-03-24 14:59:09","29235409","0","","","","","2015-03-24 14:29:53",""
"7745869","Salted password hashes","I am trying to create a login system for a web application, but I am stuck on a couple of points. I am storing the password in my database using a sha2-512 hash with a 128 bit random salt.
However I currently have the password posted in plain text to my application using a html form, both when the account is created and when the user logs in. I know this is wrong.
Do I need to hash the password in the client? If so how do I take into account the salt which is currently generated and stored on the database?
NOTE: I am doing this to learn not to use in a production system
","You really need to be using SSL on any page where you are transmitting passwords. If you try to encrypt them on the client side it will be in javascript and very easily reverse-engineerable.
","1572","<authentication><hash><passwords><salt>","4","0","4","2011-10-26 00:42:29","7745919","0","","","","","2011-10-12 20:04:50",""
"7745869","Salted password hashes","I am trying to create a login system for a web application, but I am stuck on a couple of points. I am storing the password in my database using a sha2-512 hash with a 128 bit random salt.
However I currently have the password posted in plain text to my application using a html form, both when the account is created and when the user logs in. I know this is wrong.
Do I need to hash the password in the client? If so how do I take into account the salt which is currently generated and stored on the database?
NOTE: I am doing this to learn not to use in a production system
","Hashing the password on the client would require the use of the salt on the client. This also exposes your algorithm for very easy hacking on the client side. The best thing to do is to perform this action over SSL (HTTPS) so that the entire transaction is encrypted and the authentication only happens on the server.
I.e.: Your user ID and password are transmitted encrypted from the client. The web server decrypts the data and passes it to your server-side authentication function where you look up the user and associated salt, perform password + salt + hash and compare it to the stored hash for a match. This means that the hash and then salt never need to be transmitted from the server at all.
","1572","<authentication><hash><passwords><salt>","4","1","4","2011-10-26 00:42:29","7745919","0","","","","","2011-10-12 20:04:50",""
"7745869","Salted password hashes","I am trying to create a login system for a web application, but I am stuck on a couple of points. I am storing the password in my database using a sha2-512 hash with a 128 bit random salt.
However I currently have the password posted in plain text to my application using a html form, both when the account is created and when the user logs in. I know this is wrong.
Do I need to hash the password in the client? If so how do I take into account the salt which is currently generated and stored on the database?
NOTE: I am doing this to learn not to use in a production system
","The best bet is generally just to use SSL.  If you did need to hash on the client side, this is how I'd do it:

When you first store the password, hash the password with a stored salt as is commonly done.
When someone needs to login, send them the stored salt, along with a second, randomly generated salt.
The client will hash the plaintext password with the stored salt, then the random salt and send the hash to the server.
The server will hash the stored password with the random used in that request salt and compare.

This is secure because it ensures that the hash being transmitted is unique to the request (it uses a single-request random salt), so a login cannot be faked in the future simply by sending the hash again.  It is not dangerous to send the client their stored salt, as it is assumed that password crackers will have access to the stored salt (if they get access to the db).  Two hashes are required to prevent you from ever having to store the password as plaintext.
","1572","<authentication><hash><passwords><salt>","4","3","4","2011-10-26 00:42:29","7745919","0","","","","","2011-10-12 20:04:50",""
"7745869","Salted password hashes","I am trying to create a login system for a web application, but I am stuck on a couple of points. I am storing the password in my database using a sha2-512 hash with a 128 bit random salt.
However I currently have the password posted in plain text to my application using a html form, both when the account is created and when the user logs in. I know this is wrong.
Do I need to hash the password in the client? If so how do I take into account the salt which is currently generated and stored on the database?
NOTE: I am doing this to learn not to use in a production system
","You should be using SSL to transmit the passwords encrypted so that a man-in-the-middle can't intercept the packets and read off what ever credential is being sent.  Even if you pre-hash the password in the client, a man-in-the-middle can still just use that value to fake identity.
What really concerns me, though, is the use of SHA-512.  A lot of people use cryptographic hashes for password storage, but popular opinion misses a very important point:  These hashes were designed to be fast.  That is, one of the requirements to become an SHA (or similar) hash is to be able to quickly hash large documents on embedded hardware.
This is the exact opposite of what you want for password storage, as it allows specialized routines on high performance GPUs to brute force passwords at a surprising and scary speed! 
This is why some purpose built password storage hashes have been developed.  The one I have been using is Bcrypt, which is slow enough to keep out brute force attacks, adjustable to couneract faster hardware in the future, and has the added bonus of handling the salting for you.
","1572","<authentication><hash><passwords><salt>","4","2","4","2011-10-26 00:42:29","7745919","0","","","","","2011-10-12 20:04:50",""
"43189765","Java decryption of an encrypted file with openssl aes 256 cbc","I have been trying for several days to decrypt in java a message encrypted with openssl. The message was encrypted with the following command:
openssl enc -e -aes-256-cbc -kfile $ file.key -in toto -out toto.enc.
The file file.key contains the symmetric key of 256 bits. No salt has been specified in the command and yet the file begins with Salted__. Here is the class that I coded to try to decrypt the file but impossible to get anything even by removing the 16 characters of the file namely the: Salted__ + the salt encrypted. I understood that openssl did it by default. When I try to decipher, an exception is thrown in relation to the encrypted text.
Could someone help me? a track ? an idea ?
Thank you very much.
The code :
  public class Java {

       private static SecretKey key = null;         
       private static Cipher cipher = null;

       public static void main(String[] args) throws Exception
       {
          String filename = RESOURCES_DIR + ""toto.enc"";

          byte[] key = Base64.decode(""2AxIw+/AzDBj83OILV9GDpOs+izDFJEhD6pve/IPsN9="");
          SecretKeySpec secretKey = new SecretKeySpec(key, ""AES"");
          cipher = Cipher.getInstance(""AES"");

          cipher.init(Cipher.DECRYPT_MODE, secretKey);
          byte[] test = Base64.decode(readFile(filename));
          byte[] decryptedBytes = cipher.doFinal(test);
          String decryptedText = new String(decryptedBytes, ""UTF8"");

          System.out.println(""After decryption: "" + decryptedText);
       }

        public final static String RESOURCES_DIR = ""C:/Users/toto/Desktop/"";

        static String readFile(String filename) throws FileNotFoundException, IOException {
            FileReader fr;
            BufferedReader br;

            fr = new FileReader(new File(filename));
            br = new BufferedReader(fr);
            String str;
            String res = """";
            while ((str = br.readLine()) != null) {
                res += str;
            }
            return res;
        }
    }

The error :
Exception in thread ""main"" javax.crypto.BadPaddingException: Given final block not properly padded
    at com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:811)
    at com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:676)
    at com.sun.crypto.provider.AESCipher.engineDoFinal(AESCipher.java:313)
    at javax.crypto.Cipher.doFinal(Cipher.java:2131)
    at deciphertodeploytest6.Java.main(Java.java:52)

","No, file.key does not contain the key. openssl enc -kfile reads a password which is NOT the key but is used to derive the key and also IV (when applicable, and it is here); see the man page. This key derivation uses random salt by default, and since 2016-08 the default hash depends on OpenSSL version which you didn't state. 
Also, Cipher.getInstance(""AES"") in Java defaults to ECB not CBC as you need. (It also defaults to 'PKCS5' padding, which does match OpenSSL, even though technically it should be called PKCS7 not PKCS5.) 
To match in Java the PBKDF (and thus key and IV) used by openssl enc you can either use BouncyCastle or code the equivalent of OpenSSL's EVP_BytesToKey; see dupe or near-dupe Qs:
Java equivalent of an OpenSSL AES CBC encryption
How to decode a string encoded with openssl aes-128-cbc using java?
How to decrypt AES encrypted file with '-nosalt' param
How to decrypt file in Java encrypted with openssl command using AES?
and my attempt at canonical https://crypto.stackexchange.com/questions/3298/is-there-a-standard-for-openssl-interoperable-aes-encryption/#35614 
","1571","<openssl><aes><java><salt><encryption>","0","1","1","2017-04-03 19:09:12","","2","3","","","","2017-04-03 16:07:05",""
"46072916","How to implement pbkdf2_sha256 in c#","I have made a website, in which on login I am using pbkdf2_sha256 for password hashing. I have used salt also.
I want to make a simple software just for the experience, I want to login into the c# software using same credentials as saved by the website.
I have seen Rfc2898DeriveBytes I guess it only takes 2 arguments (password, salt in integer). But what about iterations I have specified on the website?
Anyone, please guide me how to make a login in c# (WPF) application and use pbkdf2_sha256 to create a hash and to verify the password.
I have seen a code given on stacksoverflow.com.
var salt = ""FbSnXHPo12gb"";
var password = ""geheim"";

var interactions = 12000;


using (var hmac = new HMACSHA256())
{
    var df = new Pbkdf2(hmac, password, salt, interactions);
    Console.WriteLine(Convert.ToBase64String(df.GetBytes(32)));
}

I used this also but it is giving error in var df = new Pbkdf2(hmac, password, salt, interactions);
Pbkdf2 could not found.
my code 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using MySql.Data.MySqlClient;
using System.IO;
using System.Security.Cryptography;


namespace login
{

    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {

        public MainWindow()
        {
            InitializeComponent();
        }

        private void login_Click(object sender, RoutedEventArgs e)
        {

            var salt = ""FbSnXHPo12gb"";
            var password = ""geheim"";
            var interactions = 12000;


            using (var hmac = new HMACSHA256())
            {
                var df = new Pbkdf2(hmac, password, salt, interactions);
                Console.WriteLine(Convert.ToBase64String(df.GetBytes(32)));
            }

            string myConnection = ""datasource=localhost;port=3306;username=root;password=abcde12345 ; database=finalproject"";
            MySqlConnection myConn = new MySqlConnection(myConnection);
            MySqlCommand SelectCommand = new MySqlCommand(""select * from login where Username='"" + this.username.Text + ""' and Password='"" + this.password.Password + ""';"", myConn);
            MySqlDataReader myReader;
            myConn.Open();
            myReader = SelectCommand.ExecuteReader();
            int count = 0;
            while (myReader.Read())
            {
                count = count + 1;
            }
            if (count == 1)
            {
                MessageBox.Show(""Hello"");

            }

            else
            {

                MessageBox.Show(""Wrong username and password"");
            }
            myConn.Close();
        }
    }
}

So please tell me which hashing algorithm I should use on the server which is good for a password.  I have read about bcrypt and scyrpt. Are they good for password hashing?                                                                                                             Actually, I am not decrypting I am only hashing password in software and then comparing hash stored on server with the hash generated in software
please help me.
Sorry for mistakes.
","Well, there is a fully working example here in MSDN.
But, if your purpose is really hash a password, I would not advise you to do it like that.
There is no need to decrypt your passwords.
It's much easier and safer if you just use the SHA256 algorithm. All you need to do is store the hashed password in your database and when someone attempt to login into your website you will hash the given password and compare with the value stored in your database. 
Doing this you have a one way encryption, so there is no way to decrypt your passwords. 
Why? If your application have been hacked, the attackers can't decrypt the stored passwords so they can't login.
There is a example on how to hash using SHA256 here. Really, it's much easier.
","1571","<hash><salt><.net><pbkdf2>","2","0","2","2018-06-30 17:40:30","46079370","5","","","","","2017-09-05 18:49:00",""
"46072916","How to implement pbkdf2_sha256 in c#","I have made a website, in which on login I am using pbkdf2_sha256 for password hashing. I have used salt also.
I want to make a simple software just for the experience, I want to login into the c# software using same credentials as saved by the website.
I have seen Rfc2898DeriveBytes I guess it only takes 2 arguments (password, salt in integer). But what about iterations I have specified on the website?
Anyone, please guide me how to make a login in c# (WPF) application and use pbkdf2_sha256 to create a hash and to verify the password.
I have seen a code given on stacksoverflow.com.
var salt = ""FbSnXHPo12gb"";
var password = ""geheim"";

var interactions = 12000;


using (var hmac = new HMACSHA256())
{
    var df = new Pbkdf2(hmac, password, salt, interactions);
    Console.WriteLine(Convert.ToBase64String(df.GetBytes(32)));
}

I used this also but it is giving error in var df = new Pbkdf2(hmac, password, salt, interactions);
Pbkdf2 could not found.
my code 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using MySql.Data.MySqlClient;
using System.IO;
using System.Security.Cryptography;


namespace login
{

    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {

        public MainWindow()
        {
            InitializeComponent();
        }

        private void login_Click(object sender, RoutedEventArgs e)
        {

            var salt = ""FbSnXHPo12gb"";
            var password = ""geheim"";
            var interactions = 12000;


            using (var hmac = new HMACSHA256())
            {
                var df = new Pbkdf2(hmac, password, salt, interactions);
                Console.WriteLine(Convert.ToBase64String(df.GetBytes(32)));
            }

            string myConnection = ""datasource=localhost;port=3306;username=root;password=abcde12345 ; database=finalproject"";
            MySqlConnection myConn = new MySqlConnection(myConnection);
            MySqlCommand SelectCommand = new MySqlCommand(""select * from login where Username='"" + this.username.Text + ""' and Password='"" + this.password.Password + ""';"", myConn);
            MySqlDataReader myReader;
            myConn.Open();
            myReader = SelectCommand.ExecuteReader();
            int count = 0;
            while (myReader.Read())
            {
                count = count + 1;
            }
            if (count == 1)
            {
                MessageBox.Show(""Hello"");

            }

            else
            {

                MessageBox.Show(""Wrong username and password"");
            }
            myConn.Close();
        }
    }
}

So please tell me which hashing algorithm I should use on the server which is good for a password.  I have read about bcrypt and scyrpt. Are they good for password hashing?                                                                                                             Actually, I am not decrypting I am only hashing password in software and then comparing hash stored on server with the hash generated in software
please help me.
Sorry for mistakes.
","The Pbkdf2 class you found elsewhere on StackOverflow is not part of .NET, so to use it you'd need to obtain the library it's in.
In order to do PBKDF2 with (HMAC-)SHA-2-256, you would need at least .NET Core 2.0 or .NET Framework 4.7.2.
Either way you need to turn your salt into bytes.  Since it's a multiple of 4 characters I'm going to assume it's base64:
byte[] saltBytes = Convert.FromBase64String(salt);
byte[] derived;

.NET Framework (2.0+) (HMAC-SHA-1):
using (var pbkdf2 = new Rfc2898DeriveBytes(password, saltBytes, interactionCount))
{
    derived = pbkdf2.GetBytes(32);
}

.NET Core (2.0+), .NET Framework (4.7.2+) (using HMAC-SHA-2-256):
using (var pbkdf2 = new Rfc2898DeriveBytes(
    password,
    saltBytes,
    interactionCount,
    HashAlgorithmName.SHA256))
{
    derived = pbkdf2.GetBytes(32);
}

If you need to use something other than (HMAC-)SHA-1 in .NET Framework you'll need to upgrade to 4.7.2.
API Docs:

.NET Framework Rfc2898DeriveBytes (4.7)
.NET Framework Rfc2898DeriveBytes (4.7.2)
.NET Core Rfc2898DeriveBytes

","1571","<hash><salt><.net><pbkdf2>","2","2","2","2018-06-30 17:40:30","46079370","5","","","","","2017-09-05 18:49:00",""
"11544587","How to implement customized SHA-256 salt per user login/out with db spring 3.1 security?","I am reading the doc Spring 3.1 security documentation extensively, but I can't find answers to all my questions.
In a spring web application, based on form login (user + pwd), I want to salt user passwords with SHA-256, using a random salt for each user. This means I have to save the salt and the hashed password in my database for each user. No issue so far.

It seems clear that I have to implement my own UserDetailsService to fetch my user information's from my database and configure it in my spring-security.xml. 
It seems like I will have to add an extra getSalt() method on top of my implementation of UserDetails to make it available when checking the login provided by the user against the stored hashed password.

Then the situation becomes unclear. I should intercept login requests. From section 6.4.3, it seems like Spring will map the user submitted credentials to an Authentication object and submit it to an AuthenticationManager.
My questions are:
i) What implementation of Authentication will Spring submit to the AuthenticationManager? How do I retrieve the name and password?
ii) It seems like I would have to implement my own AuthenticationManager. At each call of authenticate(...), I would fetch the login name and password, fetch UserDetails from the database. Then, hash the provided pwd with the corresponding salt and compare with the database hashed item. Correct?
iii) The AuthenticationManager API also has a supports(...) method. How should it be implemented?
iv) How should Authentication and AuthenticationManager be configured?
","I must not be reading your question properly, but Spring Security offers salted passwords out of the box:
http://static.springsource.org/spring-security/site/docs/3.1.x/reference/core-services.html#d0e3021
If an 8-bit salt is insufficient, you are able to inject your own SaltSource into the DaoAuthenticationProvider.  The manual actually strongly recommends this.
","1542","<java><spring><authentication><salt>","2","2","1","2012-07-18 15:49:50","11545321","3","","","","","2012-07-18 15:12:16",""
"12802918","Generate password_hash which matches Magento Go API","I am trying to authenticate a user through the Magento Go SOAP API and having problems generating a matching hash. According to the docs the password_hash contains password:salt however when I md5 it's not matching the password_hash.
Example:
1) I changed my password through admin control panel to 'testtest'
2) Run the following code:
$client     = new SoapClient('http://XXXX.gostorego.com/api/v2_soap/?wsdl');
$session    = $client->login($api_user, $api_pass);

$params     = array('filter'=>array(array('key'=>'email','value'=>'user@domain.com')));

$data       = $client->customerCustomerList($session, $params);     

echo '<pre>CUSTOMER: '.print_r($data, true).'</pre>';

if (count($data)) {
    $hash   = explode(':',$data[0]->password_hash);
    $salt   = $hash[1];
    echo '<pre>HASH PARTS:'.print_r($hash, true).'</pre>';
    echo '<br>' .md5($salt.$password);
}

3) password_hash is  f35604820826428dd7633b91cd6078f4075c9bfa1a37db7bc70f563475ad8495:qK
4) MD5 is 0b04a656c770ba2f10b5918f94529cd8
","I've never done this with with Magento Go (and I'm not sure it's supported/possible) but the hash string
 f35604820826428dd7633b91cd6078f4075c9bfa1a37db7bc70f563475ad8495:qK

is too long to be a MD5 hash of a string. That's a 64 byte hash (plus the :, plus the salt qK).  My guess is it's SHA256, but that's a guess based on character length.  
","1541","<magento><md5><salt>","1","2","2","2013-12-20 19:28:01","12803180","0","","","","","2012-10-09 14:59:41",""
"12802918","Generate password_hash which matches Magento Go API","I am trying to authenticate a user through the Magento Go SOAP API and having problems generating a matching hash. According to the docs the password_hash contains password:salt however when I md5 it's not matching the password_hash.
Example:
1) I changed my password through admin control panel to 'testtest'
2) Run the following code:
$client     = new SoapClient('http://XXXX.gostorego.com/api/v2_soap/?wsdl');
$session    = $client->login($api_user, $api_pass);

$params     = array('filter'=>array(array('key'=>'email','value'=>'user@domain.com')));

$data       = $client->customerCustomerList($session, $params);     

echo '<pre>CUSTOMER: '.print_r($data, true).'</pre>';

if (count($data)) {
    $hash   = explode(':',$data[0]->password_hash);
    $salt   = $hash[1];
    echo '<pre>HASH PARTS:'.print_r($hash, true).'</pre>';
    echo '<br>' .md5($salt.$password);
}

3) password_hash is  f35604820826428dd7633b91cd6078f4075c9bfa1a37db7bc70f563475ad8495:qK
4) MD5 is 0b04a656c770ba2f10b5918f94529cd8
","On the backend, Both Md5 and SHA are being supported, with newer support leaning towards the SHA (in enterprise).
If your password were: 12341234
The DB Hash would infact be similar to: cdb757ce51af9749d2fabea4cf71dc72a1ec7b8721e5f8de83020f574ca3c5f1:TR

And is indeed SHA256.

However, the remote connection should be ""https:"" over SSL for the WSDL file and you should be entering your SOAP API key in normal/plain text. 
ie: 

$username = ""myUsername""; //ie. yourApiUsername
$password = ""myUserPass""; //ie. 12341234

If you want to replicate their hashing for your own internal purposes, you need to look at their methods: class Mage_Core_Model_Encryption
 public function hash($data)
{
    return md5($data);
}

/**
 * Validate hash against hashing method (with or without salt)
 *
 * @param string $password
 * @param string $hash
 * @return bool
 * @throws Exception
 */
public function validateHash($password, $hash)
{
    $hashArr = explode(':', $hash);
    switch (count($hashArr)) {
        case 1:
            return $this->hash($password) === $hash;
        case 2:
            return $this->hash($hashArr[1] . $password) === $hashArr[0];
    }
    Mage::throwException('Invalid hash.');
}

Enterprise:
public function hash($data, $version = self::HASH_VERSION_LATEST)
    {
        if (self::HASH_VERSION_MD5 === $version) {
            return md5($data);
        }
        return hash('sha256', $data);
    }



    /**
     * Validate hash by specified version
     *
     * @param string $password
     * @param string $hash
     * @param int $version
     * @return bool
     */
    public function validateHashByVersion($password, $hash, $version = self::HASH_VERSION_LATEST)
    {
        // look for salt
        $hashArr = explode(':', $hash, 2);
        if (1 === count($hashArr)) {
            return $this->hash($password, $version) === $hash;
        }
        list($hash, $salt) = $hashArr;
        return $this->hash($salt . $password, $version) === $hash;
    }

","1541","<magento><md5><salt>","1","0","2","2013-12-20 19:28:01","12803180","0","","","","","2012-10-09 14:59:41",""
"31386911","Should I store salt on SQL Server as varchar or varbinary and in hex?","I'm working on implementing a hash. I intend to store the salt in a database, specifically SQL Server. The salt will be at least 32 bytes. Should the salt be in hex form or should I convert it to a string, integer, or something else?  Also, what data type should I use to store the salt: varchar, varbinary, or something else?
For security, it really doesn't matter because the salt is not a secret. But in terms of performance and maybe readability, it might.
Thank you very much.
","Any cryptographic alogorithm worth its salt, (please excuse the pun) will be working on binary data. Assuming that the salts you use will be the same length you should use a BINARY column, if the salts are of variable length use VARBINARY.
The salt should be a random, or pseudo-random sequence of bytes. It should be different for each value you are hashing but can be stored in the clear.

Code something like this will give the values you need.
-- obviously, don't store a password in code,
-- this is here to enable subsequent calls.
DECLARE @password NVARCHAR(MAX) = N'Whatever';

---

DECLARE @salt BINARY(64) = CRYPT_GEN_RANDOM(64);

-- There is a limit of 4000 bytes for HASHBYTES so in case the password
-- very long, truncate to 3936 bytes. If you can I'd convert the password
-- to binary before passing to SQL server.
DECLARE @passwordBytes VARBINARY(3936);
SELECT
            @passwordBytes = @passwordBytes + 
                CONVERT(BINARY(2), UNICODE(SUBSTRING([A].[B], [V].[number] + 1, 1)))
    FROM
            (SELECT CAST(@password NVARCHAR(1968)) [B]) [A]
        JOIN
            [master].[dbo].[spt_values] [V]
                ON [V].[number] < LEN([A].[B])
    WHERE
            [V].[type] = 'P';

DECLARE @hash BINARY(64) = HASHBYTES('SHA2_512', @passwordBytes + @salt);

","1529","<sql><sql-server><hash><hex><salt>","1","2","1","2015-07-13 17:12:03","31387942","1","","3621633","","2015-07-13 15:32:04","2015-07-13 15:03:45",""
"14337177","Security for a REST based API","I have been looking at techniques to secure an API for use in an android/iphone app or website application.
I have found one technique which I like but am unsure about if it is a good or what is wrong with it (aside from being a pritty long process).
Processing (users side initially):
First a salt is created by hashing the users password.
Then a signature is created by hashing the requested url (with username appended on the end via a query string) and the salt.
Lastly a token is created by hashing the username and the signature.
The token is passed inside a header to the server (everytime).
First Request:
The first request must be for the validate endpoint and include the device_id as a query string.
The same processing (as above) is done on the server and if the token matches that sent from the user than the device_id is stored in the database and is assigned to that username for future reference (the device id is found in the requested url) and is used to verify the username/device thereafter.
All subsequent requests:
The processing must take place on the users end and servers end for every request now with the token being different everytime (as the requested url changes).
No code is included as it is not written yet.
","Your authentication model is a shared secret authentication. In your case your user's password serves as the shared secret. You need to ensure you have a secure way for getting the password to the user and server ahead of time. In order to sign the request you create a message with all your request headers and data. Then hash that request. Then that hash (token) will be passed with the request. The server will perform the same signing and hashing process on the server and ensure the tokens match.
In your example your sound like you want to create the token with this pseudo code:
Token = hmac-sha1( Hash(Pasword + Salt) + RequestUrl + UserName )

Your way is not bad but I would compare your method to Amazon's REST Auth model and implement a closer version of what they have detailed. http://s3.amazonaws.com/doc/s3-developer-guide/RESTAuthentication.html
Their implementation:
""Authorization: AWS "" + AWSAccessKeyId + "":""  + base64(hmac-sha1(VERB + ""\n"" 
                                 + CONTENT-MD5 + ""\n"" 
                                 + CONTENT-TYPE + ""\n"" 
                                 + DATE + ""\n"" 
                                 + CanonicalizedAmzHeaders + ""\n"" 
                                 + CanonicalizedResource))

They have good reasons for including some fields that you have left out, including but not limited to:

The timestamp is to prevent replay attacks.  
The content-MD5 is to prevent prevents people tampering with the request data (relevant to
POST and PUTS)

","1523","<api><rest><hash><token><salt>","1","4","1","2013-05-01 13:02:06","14340284","3","","","","","2013-01-15 11:56:08",""
"15034422","Crypt returning same hash for two different (similar) passwords","I have an issue using crypt() where if a user has a password (password1 in this example), and they change it to password2, the hashing returns the same result.  You can test that here: OLD LINK
Type password1 as current password, and password2 as new password and confirm password, you will see the results.  If a completely non similar password is entered there is no problem.  I understand there are other ways to go about hashing passwords etc.  I'm more curious than anything.  My code is below:
<?php

$oldpassword=""password1"";

echo ""<form method=\""post\"">
<p>Enter Current Password: <input type=\""password\"" name=\""currentpassword\"" /></p>
<p>Enter New Password: <input type=\""password\"" name=\""password\"" /></p>
<p>Confirm New Password: <input type=\""password\"" name=\""confirmpassword\"" /></p>
<p><input type=\""submit\"" value=\""Change Password\""></p>
</form>"";

$user_id = $_SESSION['user_id'];
$pass=$_POST['password'];
$salt = 'xxxxx';
$currentpassword = crypt($_POST['currentpassword'], $salt);
$oldpassword = crypt($oldpassword, $salt);
if(isset($_POST['password'])) {
    if ($currentpassword !== $oldpassword) {
        echo ""The password you entered for current password does not match our records."";
    }
    else {
        if ($_POST['password'] && $_POST['confirmpassword']) {
            if ($_POST['password'] == $_POST['confirmpassword']) {
            $hash = crypt($pass, $salt);
                if ($hash == $currentpassword) {
                    echo ""Current Password:&nbsp;"";
                    var_dump($_POST['currentpassword']);
                    echo ""<br/>"";
                    echo ""New Password:&nbsp;"";
                    var_dump($_POST['password']);
                    echo ""<br/>"";
                    echo ""New Hash:&nbsp"";
                    var_dump($hash);
                    echo ""<br/>"";
                    echo ""Current Password Hash:&nbsp"";
                    var_dump($currentpassword);
                    echo ""<br/>"";
                    echo ""<hr/>"";
                    echo ""Your new password cannot be the same as your current password."";
                }
                else {
                    echo ""Your password has been changed successfully<br/>"";
                }
            } else {
                echo ""Your passwords do not match. Please try again."";
            }
        }
    }
}

?>

","To use crypt you have to provide proper salt. Every algorithm has its own salt format. My guess is that you are using few random chars as salt, this does no match any advanced algo, so php cuts down your salt to first 2 character and fallbacks to basic DES algorithm. DES algorithm hashes up to 8 characters and both password1 and password2 are 9 character long, so only password is used from both, hence same hash.
Solution: use proper salt format for strongest available algorithm, generate random salt for each password
Recommended solution: https://github.com/ircmaxell/password_compat (for php 5.3.7 - 5.4.x) and after switching to php 5.5: http://php.net/password_hash
","1512","<php><hash><salt><crypt>","5","13","1","2014-04-24 18:58:17","15034971","13","","2002412","","2014-04-24 18:58:17","2013-02-22 22:40:49",""
"11119373","MD5, password hashing and salt position","Before i start, i know the MD5 is compromised (collision attack and speed of hashing) and shouldn't be used 
to hash passwords, but just for the sake of it, bear with me.
My questions are:
How does the salt position when hashing with md5 affects the ""quality"" 
or the ""strength"" of the hash?
Say i have the the following piece of code, which hashes a users
password using parts of his email address as salt:
<?php
    $email = 'user@emailservice.ex';
    $password = 'RandomPassWithChars';

    $segments = explode('@', $email);
    list($saltPart1, $saltPart2, $saltPart3) = $segments;

    $hash = md5($saltPart1.$password.$saltPart3.$saltPart2);
?>

Is that code going to slow down a brute force / dictionary / rainbow table
attack, than say:
<?php
    $password = 'RandomPass';
    $salt     = 'RandomSaltStoredInTheDatabase';
    $hash = md5($password, $salt);
?>

Is it worth trying to salt a password like in the first code or it yelds
the same result as the second code? Are there any benefits from that?
Does the first code delay cracking a list of passwords hashed that way than
the second way of doing it?
Which leads me to a second question: 
Is it secure storing the salt in the database than obtaining a salt
from a user id (say the email address) ?
The way i see it, once an attacker has obtained a copy of the database
which also cantains the salts it makes his life a little easyer trying to crack the hashes. But if the salts are not stored, the attacker would also need the algorithm that creates the salts. PLEASE CORRECT ME IF I'M WRONG.
I hope i made my self clear. Thanks for any answers in advance.
","When you work on password security, always assume that if the attacker has access to your Database then he has access to your code.
So when it comes to salting, just generate a hash of a random value (say, mcirotime()) and use it to salt the password before hashing and store it in the database in a column next to the password.
When it comes to adding the hash to the password, my personal opinion is that it doesn't really matter if you put it first or last or in the middle.
Do you want security? then use a slow hashing algorithm, I highly recommend PHPass as it uses bcrypt (Blowfish-based) as the default hashing algorithm.
","1484","<php><hash><md5><salt>","2","0","3","2012-06-20 12:34:27","11119663","8","","954878","","2012-06-20 12:22:22","2012-06-20 12:16:50",""
"11119373","MD5, password hashing and salt position","Before i start, i know the MD5 is compromised (collision attack and speed of hashing) and shouldn't be used 
to hash passwords, but just for the sake of it, bear with me.
My questions are:
How does the salt position when hashing with md5 affects the ""quality"" 
or the ""strength"" of the hash?
Say i have the the following piece of code, which hashes a users
password using parts of his email address as salt:
<?php
    $email = 'user@emailservice.ex';
    $password = 'RandomPassWithChars';

    $segments = explode('@', $email);
    list($saltPart1, $saltPart2, $saltPart3) = $segments;

    $hash = md5($saltPart1.$password.$saltPart3.$saltPart2);
?>

Is that code going to slow down a brute force / dictionary / rainbow table
attack, than say:
<?php
    $password = 'RandomPass';
    $salt     = 'RandomSaltStoredInTheDatabase';
    $hash = md5($password, $salt);
?>

Is it worth trying to salt a password like in the first code or it yelds
the same result as the second code? Are there any benefits from that?
Does the first code delay cracking a list of passwords hashed that way than
the second way of doing it?
Which leads me to a second question: 
Is it secure storing the salt in the database than obtaining a salt
from a user id (say the email address) ?
The way i see it, once an attacker has obtained a copy of the database
which also cantains the salts it makes his life a little easyer trying to crack the hashes. But if the salts are not stored, the attacker would also need the algorithm that creates the salts. PLEASE CORRECT ME IF I'M WRONG.
I hope i made my self clear. Thanks for any answers in advance.
","It depends on whether the attacker tries to bypass your security or if he tries to find the password.
If the attacker relies on finding a collision with a given hash of your database thanks to the cryptographic weakness of the hashing algorithm , the salt will not have any effect : I have a bunch of bits and I'd like to find some input to the XXX hash algorithm which give me the same bunch of bits in the output.
If he is trying to bruteforce the password by trying each of the possible combinations then any information he could gather on the original password will help :

Length
Composition (alpha-numerics characters, special symbols, ...)
Salt
...

By creating your own salt algorithm you are in fact trying to do security through obfuscation,  which will indeed limit anyone who doesn't know your algorithm from bruteforcing the password, but it doesn't strengthen the hashing algorithm.
","1484","<php><hash><md5><salt>","2","1","3","2012-06-20 12:34:27","11119663","8","","954878","","2012-06-20 12:22:22","2012-06-20 12:16:50",""
"11119373","MD5, password hashing and salt position","Before i start, i know the MD5 is compromised (collision attack and speed of hashing) and shouldn't be used 
to hash passwords, but just for the sake of it, bear with me.
My questions are:
How does the salt position when hashing with md5 affects the ""quality"" 
or the ""strength"" of the hash?
Say i have the the following piece of code, which hashes a users
password using parts of his email address as salt:
<?php
    $email = 'user@emailservice.ex';
    $password = 'RandomPassWithChars';

    $segments = explode('@', $email);
    list($saltPart1, $saltPart2, $saltPart3) = $segments;

    $hash = md5($saltPart1.$password.$saltPart3.$saltPart2);
?>

Is that code going to slow down a brute force / dictionary / rainbow table
attack, than say:
<?php
    $password = 'RandomPass';
    $salt     = 'RandomSaltStoredInTheDatabase';
    $hash = md5($password, $salt);
?>

Is it worth trying to salt a password like in the first code or it yelds
the same result as the second code? Are there any benefits from that?
Does the first code delay cracking a list of passwords hashed that way than
the second way of doing it?
Which leads me to a second question: 
Is it secure storing the salt in the database than obtaining a salt
from a user id (say the email address) ?
The way i see it, once an attacker has obtained a copy of the database
which also cantains the salts it makes his life a little easyer trying to crack the hashes. But if the salts are not stored, the attacker would also need the algorithm that creates the salts. PLEASE CORRECT ME IF I'M WRONG.
I hope i made my self clear. Thanks for any answers in advance.
","First question:
The position of the salt has no impact on the security of a particular hash. A good hash function has perfect entropy, in that for every input bit that changes, each output bit has a 50% chance of changing.
Any possible security benefit from a certain order would be entirely from the relative slowness of the algorithm used to concatenate the salt with the prospective password (e.g. if ""password"" . ""salt"" is slower than ""salt"" . ""password"", use the former). However, most programming languages don't have that kind of performance 'issue'.
Second question:
If the salt is stored explicitly in the database, the attacker will know the salt, and be able to launch a brute-force hashing attack. If the salt is unknown, a brute-force password attack can still be used (though this can easily be rendered ineffective by inserting delays between attempts). Also, the attacker may be able to reverse engineer the program and retrieve the hash field.
As for the security of the hash, if the user has the same email and password two different places, this negates one of the benefits of a random salt, in that the same hash will be visible both places.
Personally, I think the best method for hashing is to use:
""password"" . ""salt"" . ""internalconstantvalue""

This has the benefit of being simple, and no less secure than most other methods of security.
","1484","<php><hash><md5><salt>","2","8","3","2012-06-20 12:34:27","11119663","8","","954878","","2012-06-20 12:22:22","2012-06-20 12:16:50",""
"4952160","Help me understand pack(), openssl_random_pseudo_bytes() and mt_rand() for salting passwords","I'm building an application that will have a user base, and I'm at the point of securing the login. I'm fairly new to programming (and PHP,) but my efforts thus far have pointed to using Crypt() and a Blowfish hashed salt.
Before I go further, let me specify that I am not interested in phpass at this time.
Within the crypt() documentation, a user recently posted this:
<?php 
   $salt = substr(str_replace('+', '.', base64_encode(pack('N4', mt_rand(), mt_rand(), mt_rand(), mt_rand()))), 0, 22); 
?>


It is intended for use on systems
  where mt_getrandmax() == 2147483647.
The salt created will be 128 bits in
  length, padded to 132 bits and then
  expressed in 22 base64 characters. 
  (CRYPT_BLOWFISH only uses 128 bits for
  the salt, even though there are 132
  bits in 22 base64 characters.  If you
  examine the CRYPT_BLOWFISH input and
  output, you can see that it ignores
  the last four bits on input, and sets
  them to zero on output.)
Note that the high-order bits of the
  four 32-bit dwords returned by
  mt_rand() will always be zero (since
  mt_getrandmax == 2^31), so only 124 of
  the 128 bits will be pseudorandom.  I
  found that acceptable for my
  application.

I tested my server, and indeed mt_getrandmax() returns 2147483647.  I tried poking around the documentation to understand what the above code really does--the pack() code N4 is for a 32-bit string (big endian byte order??) repeated 4 times... which I assume is why there's 4 mt_rand() arguments.
What I don't understand is why he replaces + with . and the purpose of 22 base64 characters (not that I fully understand what base64 is.)
It was recommended that I look into openssl_random_pseudo_bytes() for my random salt generation, as the previous method I was looking at was limiting itself to just 1234567890abcdefghijklmnopqrstuvwxyz.
Supposedly there was a bug pre 5.3.4 causing openssl_random_pseudo_bytes() to run painfully slow, occassionally causing timeout errors. I'm not sure if I should try to use openssl_random_pseudo_bytes() with Crypt() or something like the above method using mt_rand() and pack().
I'm trying to understand more how all these elements work, and what they are doing conceptually--rather than just using one without understanding it to achieve my goal; I'm trying to learn :P
Can someone help me understand the different elements at work here, or at least direct me to a knowledge base where I can read about it? I think the most eluding component is understanding the different formats/terminology (base64, ascii, hexdec, bit, byte, etc.) but also in the end, how to achieve a fairly secure salt for use with my passwords.
","Let me start of by saying that there is nothing special about a salt from the standpoint of generation.  It's just another random string.  It's special in how it's used, but not generated.
Your specific questions

Why does he replace + with .?
I have no idea.  Perhaps it's because the + character may be confused with a space in urls.  But a salt should never be in a url, so that's likely not it.
What does base64/hexdec do:
Base64 converts a raw byte stream (each byte having values from 0 to 255) into a base 64 representation.  There are plenty of resources on it, so it's not worth going deep into.  Read the wikipedia article for more information.
hexdec converts a hex number (a-f0-9) into a decimal one.  It converts from base 16 to base 10 (just another way of representing numbers).
What is a bit and byte:
A bit is a single unit of information.  It has 2 states, 0 or 1.  A Byte is a series of 8 bits.  So a byte can have 256 unique combinations. Read Wikipedia...
What is ascii
It's a character set.  It represents a single printable character in a single 8-bit byte.  Again, I'd suggest reading Wikipedia.

Salts in General
The goal of a good salt generation function is large entropy.  That means that the number of possible outputs is as large as possible.  So any method should produce a large set of results.
Now, you need to define what are acceptable characters for the salt (since you'll need to store the salt to verify the hash).  The best possible salts are full-byte numbers and not just displayable characters.  Now, you won't be able to display this in a meaningful manor, but you don't need to display it.  Plus, for storage, you could always use base64_encode it.
Next, you need to choose how big you want the salt to be.  The bigger the salt is, the better.  A 32 character salt is acceptable, but a 128 character salt is better.  The size of the salt, and the number of options per character will dictate the number of possibilities there are.  Some common combinations:
Hex, 32 characters: 2e38 possibilities
Hex, 128 characters: 1e154 possibilities
Full Byte, 32 characters: 1e77 possibilities
Full Byte, 128 characters: 1e308 possibilities

Now, you need to generate the salt.  The key is to do as many random calls as necessary to fill out the entropy.  You can do this a few ways:

System Dependent (only works on *nix but best entropy):
$f = fopen('/dev/urandom', 'r');
$seed = fgets($f, $characters); // note that this will always return full bytes
fclose($f);

Library dependent (good, but requires OpenSSL to be installed)
$seed = openssl_random_pseudo_bytes($characters);

fallback
$seed = '';
for ($i = 0; $i < $characters; $i++) {
    $seed .= chr(mt_rand(0, 255));
}


Now, you need to convert it into the desired output format.

Hex (a-f0-9):
$out = '';
for ($i = 0, $len = strlen($seed); $i < $len; $i++) {
    $num = ord($seed);
    $out .= dechex(floor($num / 16)) . dechex($num % 16);
}

Base36 (a-z0-9):
$out = '';
for ($i = 0, $len = strlen($seed); $i < $len; $i++) {
    $num = ord($seed);
    $out .= base_convert($num, 10, 36);
}

Base64 (a-zA-Z0-9+=):
$out = base64_encode($seed);

Full Byte:
Nothing is necessary since it's already in this format.

","1475","<php><algorithm><random><salt>","7","11","1","2014-06-14 06:09:46","4952376","0","3","338665","","2011-02-10 00:38:50","2011-02-10 00:32:58",""
"11322691","Can salt prevent dictionary or brute force attacks?","I just read an article. And it's said:

So I’m not saying salts are without purpose, I’m saying that they
  don’t prevent dictionary or brute force attacks (which they don’t).

If you have a database dump, with hashed passwords and salts, you can start brute force only if you know crypt algorithm. If you use open source, it can be a problem. But if you change algorithm a little, it's not a problem, until somebody know it. Am I right? 
","Security through obscurity
While it makes the problem of figuring out the password a little harder, relying on this technique is not suggested.
","1474","<encryption><passwords><salt><brute-force>","2","1","2","2012-07-04 05:33:53","11322817","1","","","","","2012-07-04 05:04:20",""
"11322691","Can salt prevent dictionary or brute force attacks?","I just read an article. And it's said:

So I’m not saying salts are without purpose, I’m saying that they
  don’t prevent dictionary or brute force attacks (which they don’t).

If you have a database dump, with hashed passwords and salts, you can start brute force only if you know crypt algorithm. If you use open source, it can be a problem. But if you change algorithm a little, it's not a problem, until somebody know it. Am I right? 
","Troy Hunt recently wrote an excellent article, Our password hashing has no clothes, detailing the evolution of password hashing, including Salts.
Although Salts prevented direct comparisons with pre-hashed rainbow tables, his point is that hardware has improved to the point where applying the salt to an unhashed rainbow password and comparing salted hashes can now be done in a short time due to Moore's law.
As Trickfire states, using a proprietary hashing algorithm is security through obscurity. If the attacker has your database, he will also likely be able to get your app and disassemble it and obtain the algorithm.
","1474","<encryption><passwords><salt><brute-force>","2","5","2","2012-07-04 05:33:53","11322817","1","","","","","2012-07-04 05:04:20",""
"28469602","SHA256 / SHA512: MySQL Code for Password Hashing and Salting","I need some help understanding how to hash and salt passwords for users in SQL using SHA256 or SHA512. I think for each user I have to generate a different salt? How do I check the password at login and update and existing password in MySQL?
I used this resource to do some research on implementation but it only shows Java code, how do I do this in MySQL? Would this be done in a stored procedure?
Thanks
","I am no authority on the security aspects but using SQL Server you could handle the different pieces in the following manner:

For Hashing:

You could use [HASHBYTES] and either of the SHA-2 algorithms based on your requirement. HASHBYTES('SHA2_256', @Password);
Be aware that this function takes only 8000 bytes and works on varchar, nvarchar, or varbinary, which should suffice in your case but just in case. 
You could also write a SQL CLR function in .NET to do the hashing if the input constraints dont work for you.

For the Salt:

Use GUIDs , using a part of the GUID might not give you the entropy required for a salt, so I recommend using the whole string.
or Use the RANDOM() function to generate a unique alphanumeric string with bit of logic. 

Process:

Add the Salt to the Password before hashing (HASHBYTES('SHA2_256', @Password + Salt);and store both the Hashed output and Salt for the user during the registration process.
On a subsequent login attempt, Add the user-entered password with the salt and get Hashed output and then compare it with the store hashed value. If the value matches then the user is legitimate else not. 
","1474","<mysql><sql><hash><salt><sha256>","0","0","1","2015-02-12 09:53:54","28470018","2","1","2386782","","2015-02-12 09:53:54","2015-02-12 04:57:29",""
"18033063","How to add email verification to my PHP register script","I have recently made a login and register script which works fine but I want it to more secure from spammers and I was wondering if anyone know how to make an email verification system.
How could I make this script add email verification to it. I hope this made sense
    <?php 
    require(""php/bp-connection.php""); 

    if(!empty($_POST)) 
    { 
        if(empty($_POST['username'])) 
        { 
            die(""Please enter a username.""); 
        } 

        if(empty($_POST['password'])) 
        { 
            die(""Please enter a password.""); 
        } 

        if(!filter_var($_POST['email'], FILTER_VALIDATE_EMAIL)) 
        { 
            die(""Invalid E-Mail Address""); 
        } 

        $query = "" 
            SELECT 
                1 
            FROM users 
            WHERE 
                username = :username 
        ""; 

        $query_params = array( 
            ':username' => $_POST['username'] 
        ); 

        try 
        { 
            $stmt = $db->prepare($query); 
            $result = $stmt->execute($query_params); 
        } 
        catch(PDOException $ex) 
        { 
            die(""Failed to run query: "" . $ex->getMessage()); 
        } 

        $row = $stmt->fetch(); 

        if($row) 
        { 
            die(""This username is already in use""); 
        } 

        $query = "" 
            SELECT 
                1 
            FROM users 
            WHERE 
                email = :email 
        ""; 

        $query_params = array( 
            ':email' => $_POST['email'] 
        ); 

        try 
        { 
            $stmt = $db->prepare($query); 
            $result = $stmt->execute($query_params); 
        } 
        catch(PDOException $ex) 
        { 
            die(""Failed to run query: "" . $ex->getMessage()); 
        } 

        $row = $stmt->fetch(); 

        if($row) 
        { 
            die(""This email address is already registered""); 
        } 

        $query = "" 
            INSERT INTO users ( 
                username, 
                password, 
                salt, 
                email 
            ) VALUES ( 
                :username, 
                :password, 
                :salt, 
                :email 
            ) 
        ""; 

        $salt = dechex(mt_rand(0, 2147483647)) . dechex(mt_rand(0, 2147483647)); 

        $password = hash('sha256', $_POST['password'] . $salt); 

        for($round = 0; $round < 65536; $round++) 
        { 
            $password = hash('sha256', $password . $salt); 
        } 

        $query_params = array( 
            ':username' => $_POST['username'], 
            ':password' => $password, 
            ':salt' => $salt, 
            ':email' => $_POST['email'] 
        ); 

        try 
        { 
            $stmt = $db->prepare($query); 
            $result = $stmt->execute($query_params); 
        } 
        catch(PDOException $ex) 
        { 

            die(""Failed to run query: "" . $ex->getMessage()); 
        } 

        header(""Location: login.php""); 

        die(""Redirecting to login.php""); 
    } 

?> 
<html lang=""en"">
<head>
    <title>Register | BinaryPaw</title>

    <link rel=""shortcut icon"" href=""favicon.ico"" type=""icon"" />
    <link rel=""stylesheet"" href=""css/bp-grid.css"" type=""text/css"" />
    <link rel=""stylesheet"" href=""css/bp-styles.css"" type=""text/css"" />
</head>

<body>
<?php
    include 'php/bp-siteBar.php';
?>

<div class=""container"">
    <?php
        include 'php/bp-sideBar.php';
    ?>

    <div class=""span4"">
        <h1>User Registration</h1>
    <form action=""register.php"" method=""post""> 
        <div class=""space1"">
            <label>Username</label> 
        </div>

        <div class=""space2"">
            <input type=""text"" name=""username"" class=""username"" value="""" /> 
        </div>

        <div class=""space1"">
            <label>Email</label> 
        </div>

        <div class=""space2"">
            <input type=""text"" name=""email"" class=""email"" value="""" /> 
        </div>

        <div class=""space1"">
            <label>Password</label> 
        </div>

        <div class=""space2"">
            <input type=""password"" name=""password"" class=""password"" value="""" /> 
        </div>

        <div class=""space3"">
            <input type=""submit"" class=""submit"" value=""Register"" />
        </div>
    </form>
    </div>

    <div class=""space3""></div>

    <div class=""span10"" id=""footer"">
        <h6>Created by Mathew Berry &copy2013 </h6>
    </div>
</div>
</body>

","You can add captcha to prevent from spammer on your form. It is more secure than anything else.
","1453","<php><email><salt><verification>","1","0","3","2016-03-16 08:06:00","36029834","3","","","","","2013-08-03 12:51:34",""
"18033063","How to add email verification to my PHP register script","I have recently made a login and register script which works fine but I want it to more secure from spammers and I was wondering if anyone know how to make an email verification system.
How could I make this script add email verification to it. I hope this made sense
    <?php 
    require(""php/bp-connection.php""); 

    if(!empty($_POST)) 
    { 
        if(empty($_POST['username'])) 
        { 
            die(""Please enter a username.""); 
        } 

        if(empty($_POST['password'])) 
        { 
            die(""Please enter a password.""); 
        } 

        if(!filter_var($_POST['email'], FILTER_VALIDATE_EMAIL)) 
        { 
            die(""Invalid E-Mail Address""); 
        } 

        $query = "" 
            SELECT 
                1 
            FROM users 
            WHERE 
                username = :username 
        ""; 

        $query_params = array( 
            ':username' => $_POST['username'] 
        ); 

        try 
        { 
            $stmt = $db->prepare($query); 
            $result = $stmt->execute($query_params); 
        } 
        catch(PDOException $ex) 
        { 
            die(""Failed to run query: "" . $ex->getMessage()); 
        } 

        $row = $stmt->fetch(); 

        if($row) 
        { 
            die(""This username is already in use""); 
        } 

        $query = "" 
            SELECT 
                1 
            FROM users 
            WHERE 
                email = :email 
        ""; 

        $query_params = array( 
            ':email' => $_POST['email'] 
        ); 

        try 
        { 
            $stmt = $db->prepare($query); 
            $result = $stmt->execute($query_params); 
        } 
        catch(PDOException $ex) 
        { 
            die(""Failed to run query: "" . $ex->getMessage()); 
        } 

        $row = $stmt->fetch(); 

        if($row) 
        { 
            die(""This email address is already registered""); 
        } 

        $query = "" 
            INSERT INTO users ( 
                username, 
                password, 
                salt, 
                email 
            ) VALUES ( 
                :username, 
                :password, 
                :salt, 
                :email 
            ) 
        ""; 

        $salt = dechex(mt_rand(0, 2147483647)) . dechex(mt_rand(0, 2147483647)); 

        $password = hash('sha256', $_POST['password'] . $salt); 

        for($round = 0; $round < 65536; $round++) 
        { 
            $password = hash('sha256', $password . $salt); 
        } 

        $query_params = array( 
            ':username' => $_POST['username'], 
            ':password' => $password, 
            ':salt' => $salt, 
            ':email' => $_POST['email'] 
        ); 

        try 
        { 
            $stmt = $db->prepare($query); 
            $result = $stmt->execute($query_params); 
        } 
        catch(PDOException $ex) 
        { 

            die(""Failed to run query: "" . $ex->getMessage()); 
        } 

        header(""Location: login.php""); 

        die(""Redirecting to login.php""); 
    } 

?> 
<html lang=""en"">
<head>
    <title>Register | BinaryPaw</title>

    <link rel=""shortcut icon"" href=""favicon.ico"" type=""icon"" />
    <link rel=""stylesheet"" href=""css/bp-grid.css"" type=""text/css"" />
    <link rel=""stylesheet"" href=""css/bp-styles.css"" type=""text/css"" />
</head>

<body>
<?php
    include 'php/bp-siteBar.php';
?>

<div class=""container"">
    <?php
        include 'php/bp-sideBar.php';
    ?>

    <div class=""span4"">
        <h1>User Registration</h1>
    <form action=""register.php"" method=""post""> 
        <div class=""space1"">
            <label>Username</label> 
        </div>

        <div class=""space2"">
            <input type=""text"" name=""username"" class=""username"" value="""" /> 
        </div>

        <div class=""space1"">
            <label>Email</label> 
        </div>

        <div class=""space2"">
            <input type=""text"" name=""email"" class=""email"" value="""" /> 
        </div>

        <div class=""space1"">
            <label>Password</label> 
        </div>

        <div class=""space2"">
            <input type=""password"" name=""password"" class=""password"" value="""" /> 
        </div>

        <div class=""space3"">
            <input type=""submit"" class=""submit"" value=""Register"" />
        </div>
    </form>
    </div>

    <div class=""space3""></div>

    <div class=""span10"" id=""footer"">
        <h6>Created by Mathew Berry &copy2013 </h6>
    </div>
</div>
</body>

","its simple send a code to user email address and create a page to verify the code and if code verify then register the user
if(isset($_POST['register']))
{
$email_id=$_POST['email'];
$pass=$_POST['password'];
$code=substr(md5(mt_rand()),0,15);
mysql_connect('localhost','root','');
mysql_select_db('sample');

$insert=mysql_query(""insert into verify values('','$email','$pass','$code')"");
$db_id=mysql_insert_id();

$message = ""Your Activation Code is "".$code."""";
$to=$email;
$subject=""Activation Code For Talkerscode.com"";
$from = 'your email';
$body='Your Activation Code is '.$code.' Please Click On This link <a href=""verification.php"">Verify.php?id='.$db_id.'&code='.$code.'</a>to activate your account.';
$headers = ""From:"".$from;
mail($to,$subject,$body,$headers);

echo ""An Activation Code Is Sent To You Check You Emails"";
}

to verify the code
if(isset($_GET['id']) && isset($_GET['code']))
{
$id=$_GET['id'];
$code=$_GET['id'];
mysql_connect('localhost','root','');
mysql_select_db('sample');
$select=mysql_query(""select email,password from verify where id='$id' and code='$code'"");
if(mysql_num_rows($select)==1)
{
    while($row=mysql_fetch_array($select))
    {
        $email=$row['email'];
        $password=$row['password'];
    }
    $insert_user=mysql_query(""insert into verified_user values('','$email','$password')"");
    $delete=mysql_query(""delete from verify where id='$id' and code='$code'"");
}
}

","1453","<php><email><salt><verification>","1","0","3","2016-03-16 08:06:00","36029834","3","","","","","2013-08-03 12:51:34",""
"18033063","How to add email verification to my PHP register script","I have recently made a login and register script which works fine but I want it to more secure from spammers and I was wondering if anyone know how to make an email verification system.
How could I make this script add email verification to it. I hope this made sense
    <?php 
    require(""php/bp-connection.php""); 

    if(!empty($_POST)) 
    { 
        if(empty($_POST['username'])) 
        { 
            die(""Please enter a username.""); 
        } 

        if(empty($_POST['password'])) 
        { 
            die(""Please enter a password.""); 
        } 

        if(!filter_var($_POST['email'], FILTER_VALIDATE_EMAIL)) 
        { 
            die(""Invalid E-Mail Address""); 
        } 

        $query = "" 
            SELECT 
                1 
            FROM users 
            WHERE 
                username = :username 
        ""; 

        $query_params = array( 
            ':username' => $_POST['username'] 
        ); 

        try 
        { 
            $stmt = $db->prepare($query); 
            $result = $stmt->execute($query_params); 
        } 
        catch(PDOException $ex) 
        { 
            die(""Failed to run query: "" . $ex->getMessage()); 
        } 

        $row = $stmt->fetch(); 

        if($row) 
        { 
            die(""This username is already in use""); 
        } 

        $query = "" 
            SELECT 
                1 
            FROM users 
            WHERE 
                email = :email 
        ""; 

        $query_params = array( 
            ':email' => $_POST['email'] 
        ); 

        try 
        { 
            $stmt = $db->prepare($query); 
            $result = $stmt->execute($query_params); 
        } 
        catch(PDOException $ex) 
        { 
            die(""Failed to run query: "" . $ex->getMessage()); 
        } 

        $row = $stmt->fetch(); 

        if($row) 
        { 
            die(""This email address is already registered""); 
        } 

        $query = "" 
            INSERT INTO users ( 
                username, 
                password, 
                salt, 
                email 
            ) VALUES ( 
                :username, 
                :password, 
                :salt, 
                :email 
            ) 
        ""; 

        $salt = dechex(mt_rand(0, 2147483647)) . dechex(mt_rand(0, 2147483647)); 

        $password = hash('sha256', $_POST['password'] . $salt); 

        for($round = 0; $round < 65536; $round++) 
        { 
            $password = hash('sha256', $password . $salt); 
        } 

        $query_params = array( 
            ':username' => $_POST['username'], 
            ':password' => $password, 
            ':salt' => $salt, 
            ':email' => $_POST['email'] 
        ); 

        try 
        { 
            $stmt = $db->prepare($query); 
            $result = $stmt->execute($query_params); 
        } 
        catch(PDOException $ex) 
        { 

            die(""Failed to run query: "" . $ex->getMessage()); 
        } 

        header(""Location: login.php""); 

        die(""Redirecting to login.php""); 
    } 

?> 
<html lang=""en"">
<head>
    <title>Register | BinaryPaw</title>

    <link rel=""shortcut icon"" href=""favicon.ico"" type=""icon"" />
    <link rel=""stylesheet"" href=""css/bp-grid.css"" type=""text/css"" />
    <link rel=""stylesheet"" href=""css/bp-styles.css"" type=""text/css"" />
</head>

<body>
<?php
    include 'php/bp-siteBar.php';
?>

<div class=""container"">
    <?php
        include 'php/bp-sideBar.php';
    ?>

    <div class=""span4"">
        <h1>User Registration</h1>
    <form action=""register.php"" method=""post""> 
        <div class=""space1"">
            <label>Username</label> 
        </div>

        <div class=""space2"">
            <input type=""text"" name=""username"" class=""username"" value="""" /> 
        </div>

        <div class=""space1"">
            <label>Email</label> 
        </div>

        <div class=""space2"">
            <input type=""text"" name=""email"" class=""email"" value="""" /> 
        </div>

        <div class=""space1"">
            <label>Password</label> 
        </div>

        <div class=""space2"">
            <input type=""password"" name=""password"" class=""password"" value="""" /> 
        </div>

        <div class=""space3"">
            <input type=""submit"" class=""submit"" value=""Register"" />
        </div>
    </form>
    </div>

    <div class=""space3""></div>

    <div class=""span10"" id=""footer"">
        <h6>Created by Mathew Berry &copy2013 </h6>
    </div>
</div>
</body>

","its simple send a code to user email address and create a page to verify the code and if code verify then register the user
if(isset($_POST['register']))
{
$email_id=$_POST['email'];
$pass=$_POST['password'];
$code=substr(md5(mt_rand()),0,15);
mysql_connect('localhost','root','');
mysql_select_db('sample');

$insert=mysql_query(""insert into verify values('','$email','$pass','$code')"");
$db_id=mysql_insert_id();

$message = ""Your Activation Code is "".$code."""";
$to=$email;
$subject=""Activation Code For Talkerscode.com"";
$from = 'your email';
$body='Your Activation Code is '.$code.' Please Click On This link <a href=""verification.php"">Verify.php?id='.$db_id.'&code='.$code.'</a>to activate your account.';
$headers = ""From:"".$from;
mail($to,$subject,$body,$headers);

echo ""An Activation Code Is Sent To You Check You Emails"";
}

to verify the code
if(isset($_GET['id']) && isset($_GET['code']))
{
$id=$_GET['id'];
$code=$_GET['id'];
mysql_connect('localhost','root','');
mysql_select_db('sample');
$select=mysql_query(""select email,password from verify where id='$id' and code='$code'"");
if(mysql_num_rows($select)==1)
{
    while($row=mysql_fetch_array($select))
    {
        $email=$row['email'];
        $password=$row['password'];
    }
    $insert_user=mysql_query(""insert into verified_user values('','$email','$password')"");
    $delete=mysql_query(""delete from verify where id='$id' and code='$code'"");
}
}

complete tutorial here http://talkerscode.com/webtricks/account-verification-system-through-email-using-php.php
","1453","<php><email><salt><verification>","1","0","3","2016-03-16 08:06:00","36029834","3","","","","","2013-08-03 12:51:34",""
"47285241","Saltstack cmd.run - if statement and unless","I manage the installation of our workstations with Saltstack. 
In my recipe for the ipa-client-automount installation on clients, I need to:

set the location based on fqdn
check if ipa-client-automount is already configured

Currently, I have the following state:
 ipa-client-automount:
  cmd.run:
    {% if salt['cmd.run']('hostname -f | grep domain1') %}
    - name: ipa-client-automount --location=linkedtodomain1 -U
    {% elif salt['cmd.run']('hostname -f | grep domain2') %}
    - name: ipa-client-automount --location=linkedtodomain2 -U
    {% endif %}
    - unless: python -c ""from ipapython import sysrestore; from ipaplatform.paths import paths; statestore = sysrestore.StateFile(paths.IPA_CLIENT_SYSRESTORE); exit(not statestore.has_state('autofs'))""

The issue is that when adding the if and elif statement, it doesn't consider the unless. It runs directly the command without checking the unless condition.
Also, I'm sure that my unless statement is working, it was all fine with only one location.
How can I write this to have the if and unless working at the same time? 
Thanks
","I have a working solution:
ipa-client-automount:
  cmd.run:
    - names: 
      {% if salt['cmd.run']('hostname -f | grep domain1') %}
      - ipa-client-automount --location=linkedtodomain1 -U
      {% elif salt['cmd.run']('hostname -f | grep domain2') %}
      - ipa-client-automount --location=linkedtodomain2 -U
      {% endif %}
    - unless: condition

It's not the cleanest solution but it worked for me. Don't know why this doesn't work on names but does on name.
","1449","<ipa><salt><salt-stack>","1","0","2","2017-11-19 22:07:15","47287346","3","1","","","","2017-11-14 11:56:31",""
"47285241","Saltstack cmd.run - if statement and unless","I manage the installation of our workstations with Saltstack. 
In my recipe for the ipa-client-automount installation on clients, I need to:

set the location based on fqdn
check if ipa-client-automount is already configured

Currently, I have the following state:
 ipa-client-automount:
  cmd.run:
    {% if salt['cmd.run']('hostname -f | grep domain1') %}
    - name: ipa-client-automount --location=linkedtodomain1 -U
    {% elif salt['cmd.run']('hostname -f | grep domain2') %}
    - name: ipa-client-automount --location=linkedtodomain2 -U
    {% endif %}
    - unless: python -c ""from ipapython import sysrestore; from ipaplatform.paths import paths; statestore = sysrestore.StateFile(paths.IPA_CLIENT_SYSRESTORE); exit(not statestore.has_state('autofs'))""

The issue is that when adding the if and elif statement, it doesn't consider the unless. It runs directly the command without checking the unless condition.
Also, I'm sure that my unless statement is working, it was all fine with only one location.
How can I write this to have the if and unless working at the same time? 
Thanks
","I think the problem is in the if condition. If you use the if salt['cmd.run']() that way the first if will always be true.
In salt, a better approach would be to use the host grain with something like:
{% if grains.get('host') == 'domain1' %}

or, if you really want to use the cmd.run approach, try something like:
{% if salt['cmd.run']('hostname -f') == 'domain1' %}

","1449","<ipa><salt><salt-stack>","1","1","2","2017-11-19 22:07:15","47287346","3","1","","","","2017-11-14 11:56:31",""
"23570655","PHP crypt(pass, salt) alternative in Java - Blowfish algorithm","I'm using on php server function crypt like this:
$hash = crypt($password, '$2y$10$' . $salt);

It makes hash of password by Blowfish method.
I'm looking for java equivalent for crypt password.
I found this code, but I don't know where add $salt. More above:
String key = ""abcd"";
SecretKeySpec keySpec = new SecretKeySpec(key.getBytes(), ""Blowfish"");
Cipher cipher = Cipher.getInstance(""Blowfish"");
cipher.init(cipher.ENCRYPT_MODE, keySpec);
return DatatypeConverter.printBase64Binary(cipher.doFinal(key.getBytes()));

Thank's for every idea or answer.
","Not an answer to your question but maybe it helps:
There is the Apache Commons Codec library that contains a Linux crypt(3) compatible function for at least des,md5,sha256 and sha512 based crypt() algorithms in case you don't really need blowfish but just something stronger than the traditional DES based hashes (use sha512 then):
http://svn.apache.org/viewvc/commons/proper/codec/trunk/src/main/java/org/apache/commons/codec/digest/Md5Crypt.java?view=markup
And there's other source code that implements the Blowfish algorithm but it's in C:
http://doxygen.postgresql.org/crypt-blowfish_8c_source.html
As you can see crypt() uses algorithms that are only based on those encryption ciphers but pipes the input several thousant times through them to get a nice hash value.
","1445","<java><php><salt><blowfish><crypt>","3","0","2","2014-08-02 21:30:19","","0","2","1078583","","2014-08-02 21:30:19","2014-05-09 17:27:06",""
"23570655","PHP crypt(pass, salt) alternative in Java - Blowfish algorithm","I'm using on php server function crypt like this:
$hash = crypt($password, '$2y$10$' . $salt);

It makes hash of password by Blowfish method.
I'm looking for java equivalent for crypt password.
I found this code, but I don't know where add $salt. More above:
String key = ""abcd"";
SecretKeySpec keySpec = new SecretKeySpec(key.getBytes(), ""Blowfish"");
Cipher cipher = Cipher.getInstance(""Blowfish"");
cipher.init(cipher.ENCRYPT_MODE, keySpec);
return DatatypeConverter.printBase64Binary(cipher.doFinal(key.getBytes()));

Thank's for every idea or answer.
","Now I did found some java implementations of crypt(3) with blowfish:
http://www.mindrot.org/projects/jBCrypt/ (last update 2010)
and
http://docs.spring.io/spring-security/site/docs/3.2.3.RELEASE/apidocs/org/springframework/security/crypto/bcrypt/BCrypt.html
","1445","<java><php><salt><blowfish><crypt>","3","0","2","2014-08-02 21:30:19","","0","2","1078583","","2014-08-02 21:30:19","2014-05-09 17:27:06",""
"24447756","Trouble matching login password with stored hashed password in database","I am new to PHP and MYSQL and am working on a registration/login form project to build up my knowledge but I am a bit stuck, so hope you can help.
I have a database on PHPMyAdmin and my registration form searches to see if the email address already exists if not to insert all the information into the database. This works fine. I also have a login form which searched for the email address and password to see if they matched any in the database, if so to log in. This worked fine. 
My issue came when I started to learn about password salts/hashing. I can still register okay but when I try to login with details already in the database it doesn't seem to match the passwords up to allow me to log in. 
register.php
 <?php
error_reporting(E_ALL);
require 'db_connect.php';

// Stores the information submitted from the form via the $_POST variable 
// if the request method in the form is POST then execute the following code (read the                 submitted information - send the email  and redirect to the header location
// if it is NOT POST then it will skip this code block and show blank contact form
if ($_SERVER[""REQUEST_METHOD""] == ""POST"") { 
    $fname = trim($_POST[""fname""]);
    $lname = trim($_POST[""lname""]);
    $cname = trim($_POST[""cname""]);
    $email = trim($_POST[""email""]);
    $pass1 = trim($_POST[""pass1""]);
    $pass2 = trim($_POST[""pass2""]);

// VALIDATIONS


// All required fields must be entered
if ($fname == """" OR $lname == """" OR $email == """" OR $pass1 == """" OR $pass2 == """") {
    $error_message = ""You must fill in all the required fields."";

}

// password must contain 6 characters min
if (strlen($pass1) < 6) {
       $error_message = ""Password must be at least 6 characters long"";

}
//passwords must match each other
if ($pass1 != $pass2) {
   $error_message = ""Passwords do not match"";
}


// hash and salt password - PASSWORD_DEFAULT uses the php default hashing algorithm - 
// cost is the expense used to generate the hash (higher the number the more secure but slower the page load)

$password_save = password_hash($pass1 . SALT , PASSWORD_DEFAULT, array('cost' => 10 ));

// if there's not a previous error message run a database query to look if the email address entered matches any already in the database.
if (!isset ($error_message)){
  $query = ""SELECT * FROM registration_tbl WHERE email = '"".$email.""'"";
  $query_run = mysqli_query($dbc, $query);

  // if the query locates more than 0 (i.e 1+) records with matching email addresses then echo out the error
  // else insert all new form data in to the database and echo a success message      
  if (mysqli_num_rows($query_run)>0) {
       $error_message = ""Email Address "".$email."" is already registered"";
  } else {
    $sql = ""INSERT INTO registration_tbl (first_name,last_name,company_name,email,password,reg_datetime) VALUES ('"".$fname.""','"".$lname.""','"".$cname.""','"".$email.""','"".$password_save.""', NOW())"";
    $query_run = mysqli_query($dbc, $sql);
        echo ""Registration Successful"";
    }
}

login.php
<?php
error_reporting(E_ALL);
require 'db_connect.php';

if ($_SERVER[""REQUEST_METHOD""] == ""POST"") {
$email = trim($_POST[""email""]);
$pass = trim($_POST[""pass""]);

    // VALIDATIONS

// both fields must be entered to log in        
if($email == """" OR $pass == """") {
    $error_message = ""Both fields must be completed "";
}

$hashandsalt = password_hash($pass . SALT, PASSWORD_DEFAULT, array('cost' => 10 ));

// if no error message is set - send a query to the database for all records in the registration_tbl where the email matches one in the database
// if the query returns less than 1 record (i.e no matches in the database) show error message
// else if found in the database save the login details to session variables and then
// redirect to the logged-in.php page   
if (!isset ($error_message)) {
    $query = ""SELECT * FROM registration_tbl WHERE email ='"".$email.""'"";
    $query_run = mysqli_query($dbc, $query);
    if (mysqli_num_rows($query_run)<1 ){
        $error_message = ""Your login details do not match, please double check and try again1"";
    } else {
        while($row = mysqli_fetch_array($query_run)) {
        echo ($row['password']) .""<br>"";
        echo $pass .""<br>"";
        echo $hashandsalt;

            if (password_verify($pass, $hashandsalt)){
                $_SESSION['firstname'] = $row['first_name'];
                $_SESSION['lastname'] = $row['last_name'];
                $_SESSION['email'] = $row['email'];
                $_SESSION['password'] = $row['password'];
                $_SESSION['id'] = $row['ID'];
                header(""location: logged-in.php"");
            } else {
                $error_message = ""Your login details do not match, please double check and try again"";
            }
        }
    }
}
}
?>

<div class=""wrapper"">

<?php
 if(!isset ($error_message)) {
    echo '<p>Please complete the log in details </p>';
    } else {
    echo $error_message;
 }
?>
<form method=""post"" action=""login.php"">
    <table>
        <tr>
            <th>
                <label for=""email""> Email Address </label>
            </th>
            <td>
                <input type=""email"" name=""email"" id=""email"" value=""<?php if(isset($email)) { echo htmlspecialchars($email); } ?>"">
            </td>
        </tr>
        <tr>
            <th>
                <label for=""pass""> Password </label>
            </th>
            <td>
                <input type=""password"" name=""pass"" id=""pass"">
            </td>
        </tr>

    </table>
    <input type=""submit"" value=""Log in"">
</form>

 
The results of the 3 echos I have in the login.php
echo ($row['password']) .""<br>"";

This one will show the hashed password from the database
        echo $pass .""<br>"";

This one will show whatever password is entered 
        echo $hashandsalt;

This one shows a new hashed password which differs each time the page is refreshed 
This is where my query is I am obviously missing something which is not allowing the password entered to match up to the already stored hashed password.
I have scoured the internet including number of stack overflow posts but I can't quite seem to figure out what I have done wrong. This is my first post so I hope I am posting enough information for you.
Any ideas guys?
p.s I know I need to add the mysqli_real_escape_string - this was my next job after figuring this one out :ve
","To verify the password you need to check with the stored password-hash from the database. There is no need to call password_hash() in login.php.
login.php
if (password_verify($pass, $row['password']))

Also there is no need to add a salt before hashing, the function password_hash() will add it automatically.
register.php
$password_save = password_hash($pass1, PASSWORD_DEFAULT, array('cost' => 10 ));

","1440","<php><mysql><hash><salt>","1","2","1","2014-06-27 10:15:44","24448694","0","","3780190","","2014-06-27 10:15:44","2014-06-27 08:53:53",""
"12058933","Hashed and Salt with CAPICOM ? SHA 512 using asp-classic","I would like to know if this method is safe to use for login since this is the only one I found that is easy to understand and that it is in asp-classic so that I a noob can understand and add to the site I have.
Thanks
    <%
    Dim sDigest,sPassword,sSalt
    sDigest=SHA256(sRndStr)


    sPassword = Request.Form(""pass"")
    sSalt = Request.Form(""username"") & ""SomeThingThatisStatic1234567890""

    With CreateObject(""CAPICOM.HashedData"") 
      .Algorithm = 6 '<--- This will use SHA-512
      'CAPICOM_HASH_ALGORITHM_SHA1      = 0 
      'CAPICOM_HASH_ALGORITHM_MD2       = 1 
      'CAPICOM_HASH_ALGORITHM_MD4       = 2 
      'CAPICOM_HASH_ALGORITHM_MD5       = 3 
      'CAPICOM_HASH_ALGORITHM_SHA_256   = 4 - Not supported on Windows XP or 2000 
      'CAPICOM_HASH_ALGORITHM_SHA_384   = 5 - Not supported on Windows XP or 2000 
      'CAPICOM_HASH_ALGORITHM_SHA_512   = 6 - Not supported on Windows XP or 2000 

      .Hash sPassword & sSalt 

'Response.Write ""Here is your hash: "" & .Value 
'---> here i would then check this hash with the hash in the database
'---> and if it's the same let the user login if not go to error: wrong info.
    End With 
%>

","Unless I've missed something fairly crucial, it doesn't look particularly safe. In particular, it looks like you're sending the hash of the salt/password over the connection, and verifying that on the server. If so, it's open to a replay attack -- i.e., somebody taps into the conversation, sees what the user responded with to log in, and then logs in under those credentials by sending the same responses. Hashing/salting the password prevents them from knowing the user's original password, but they don't care -- the know the hash, and that's all the server checks to let them log on.
To avoid that, you usually want to use a challenge/response setup:

The user sends something to say they want to log in
The server generates a random number and sends it to the user
The client encrypts the random number using their hashed/salted password as the key, and sends the result back to the server along with their user name
The server does the same encryption with its idea of that user's hashed/salted password
The server compares the two encrypted numbers

Each time a user tries to log in, the server generates a new/different random number. Even if somebody has the packets from an earlier login, they won't let the spy log in again.
","1437","<asp-classic><hash><salt><sha512>","2","3","1","2012-08-21 16:24:08","12059182","0","","","","","2012-08-21 16:09:00",""
"38146959","MD5 algorithm to hash passwords with salt","Why does getBytes[ ] and insert bytes[ ] give different results ?
Database: Table Definition
CREATE TABLE users (
  `username` VARCHAR(15),
  `password` VARCHAR(32),
  `salt`     VARCHAR(32)
);

Whenever I want to make a new user , I produce a random salt (type: bytes[ ]) and then store it on the database along with the other columns .   
But , when I try to retrieve the salt from the db using rs.getBytes(""Salt"") I won't get the same result.
I know that I can retrieve the salt with rs.getString(""Salt"") BUT I need to get it as byte[] type.
I tried to cast the String to Bytes[] but again not the same results..!!
Code: Insert into Database
String username = ""admin"";
String password = request.getParameter(""password""); 
byte[] salt = SaltedMD5.getSalt(); 
password = SaltedMD5.getSecurePassword(password, salt); 
stmt.executeUpdate(String.format(""INSERT INTO users VALUES('%s', '%s', '%s')"", username, password, salt));

Output: Query Result
byte[] DB_salt = rs.getBytes(""Salt"");

","Do yourself a favor and switch to a secure algorithm. Not only will your passwords be protected properly, you also don't have to care about generation and storage of the salt.
Most BCrypt implementations will include the generated salt as part of the resulting hash, so you need only a single field for password hashes with a minimum length of varchar(60).
// Hash a new password for storing in the database.
// The function automatically generates a cryptographically safe salt.
String hashToStoreInDb = BCrypt.hashpw(password, BCrypt.gensalt());

// Check if the hash of the entered login password, matches the stored hash.
// The salt and the cost factor will be extracted from existingHashFromDb.
Boolean isPasswordCorrect = BCrypt.checkpw(password, existingHashFromDb);

","1424","<java><mysql><hash><md5><salt>","-1","4","1","2016-07-02 21:32:05","38164653","5","","1762224","","2016-07-01 14:07:25","2016-07-01 13:39:45",""
"16743469","Can we use uniqid() to generate a unique Salt in PHP","I'm using bcrypt to hash my passwords. But I would like to use some Salt with it as well. Can I use the uniqid() function to generate a unique Salt for every user? Or may be something with more entropy like 
uniqid('', true);

I do not understand many of the more complex ways of generating Salts. like using for loops and many different functions.
Thank you.
","The purpose of a salt is to make it difficult to match the hash. That being said this depends of the hash you're using and how prone it is to collisions. Bcrypt is pretty strong but it has its drawbacks.
This code should make a 23 character salt according to the manual.
printf(""uniqid('', true): %s\r\n"", uniqid('', true));

This gets you (256 bits) 64 digits:
hash(""sha256"",time());

Check-out crypt as well.
Using a SALT is always good because it makes it harder to find the original password (reverse engineer). That doesn't mean they can't get a hash collision that matches and allows them access if you're doing a match against a database. The longer the hash and the more character potential per position makes a collision that much harder and your system stronger (in theory).
","1415","<php><passwords><salt>","0","2","1","2013-05-24 21:53:16","16743563","2","0","","","","2013-05-24 20:50:07",""
"6156839","Is my C# RSA/AES/salt/IV best practices approach missing anything?","While I'm no cryptographer, I do consider myself mostly up to date on the best practices regarding [a]symmetric encryption, hashes, and crypto random number generation. I've searched, and found, many posts, both here on SO, and elsewhere, relating to the persistance of encrypted data, salt, and IV. What I'm asking for, is a look over of what I'm doing, to make sure that the pieces I'm putting together, are put together correctly, i.e. securely. Here's my plan:
In C#, I'm using RSACryptoServiceProvider to generate a nice, large, keypair of 4096 bits. To persist to disk/database, I'm using the ToXmlString(true) method which includes the private key info. I then encrypt the entire Xml document with AES as described here: http://msdn.microsoft.com/en-us/library/sb7w85t6(v=VS.90).aspx, using a key derived from Rfc2898DeriveBytes using 10,000 rounds and 64 bits of salt generated from RNGCryptoServiceProvider. But now the issues is, storing the salt, as well as the IV. I know the salt can be public, and I'm fairly sure that the IV can be too. So, the most simple way to do things seems to be to shove them into a plain text Xml document, along with the encrypted Xml and be done with it.
Anything at all I'm missing?
Edit0: Yes the IV need not be secret: http://www.w3.org/TR/xmlenc-core/#sec-Nonce.
Edit1: The salt is now produced from the password (still using 10k rounds after padding to a minimum of 64 bits), so it is not persisted separately. The IV is prefixed to the CipherValue automatically.
","The IV and salt should be secure random numbers and may be stored publicly. The iteration count may be stored publicly as well, although it is normally hard coded. Be careful that you keep an upper bound on the iteration count or you may be susceptible to denial of service attacks.
So basically you are doing OK. If encrypting XML I would keep to the XML-encryption specifications, using (the proposed) GCM mode encryption if it is available. Make sure you check all the parameters when decrypting though.
","1409","<rsa><aes><salt><rijndael>","2","0","1","2012-12-30 00:06:47","","7","2","348375","","2011-05-31 16:26:46","2011-05-27 19:29:32",""
"5658987","What is the most appropriate use of StandardPasswordEncoder for salting passwords in spring security 3.1?","I would like to add password salting to a site I am working on, and I discovered that Spring Security 3.1 has some new features to make this very easy to do.
I have a question about the StandardPasswordEncoder class. It operates a little differently than I would expect. It seems simpler to use than coding the salting myself, but I think there's some ""magic"" going on that I don't understand.
StandardPasswordEncoder seems to randomly salt the hash for me, which is fine. But upon matching the original password to the encoded password... how is it able to match the passwords without knowing what the original salt was in the first place? 
It is to my understanding that once you make a salt, you can't go back... so if there's a random salt to generate the encoded hash in the first place... how is StandardPasswordEncoder able to match the password at a later point? I am confused. Shouldn't I have to get the salt, persist the salt in the database and then supply the salt? How is it able to do this without me storing and providing the salt value?
Thanks for clearing up the confusion. I hope my question makes sense.
","It stores hashed password concatenated with the salt, see StandardPasswordEncoder.java, so it knows the salt when checking the password.
","1407","<security><passwords><spring-security><sha1><salt>","7","4","1","2014-04-29 22:11:19","5661238","0","","","","","2011-04-14 05:36:53",""
"41211864","Java encryption with sha256 and salt","I need a little help from you, I have an exercise , to do a login program and to store the password with sha-256 and salt, I made a part, but here it's the hard part. I've read that if you use sha-256 that you can't reverse the operation to determine the password. If it's true then what I need to use to encrypt the password and after I encrypt the password, how can I login if the password is encrypted?
PS: I've searched on google.
","Let's assume your password is 12345678. You are going to hash this password and save it to you program. In your login program you take the input from the user, hash it with the same algorithm and then compare the two hashed strings. If the are equal, the strings are equal, if not, they aren't equal. The person cannot figure out what the correct password is and you have hashed your password.
","1406","<java><encryption><salt>","-5","0","2","2016-12-18 22:35:37","41211967","1","1","7024314","","2016-12-18 22:35:37","2016-12-18 19:08:02",""
"41211864","Java encryption with sha256 and salt","I need a little help from you, I have an exercise , to do a login program and to store the password with sha-256 and salt, I made a part, but here it's the hard part. I've read that if you use sha-256 that you can't reverse the operation to determine the password. If it's true then what I need to use to encrypt the password and after I encrypt the password, how can I login if the password is encrypted?
PS: I've searched on google.
","You should read about how hash functions work. Hash functions only produce a value, that depends on your input. Since the formula to calculate that value is always the same for a particular hash function (i.e. SHA-256), you can always produce it, if you know the input (the password in your case). So, unlike ciphers, a value calculated by the hash function is not supposed to be decrypted.

what I need to use to encrypt the password

You don't have to encrypt the password, since as you said, you cannot reverse the operation by just knowing the hash value, that's stored in you database. You can only gain access, if you know the password in plain text form.
","1406","<java><encryption><salt>","-5","0","2","2016-12-18 22:35:37","41211967","1","1","7024314","","2016-12-18 22:35:37","2016-12-18 19:08:02",""
"27472861","Recover a salted and hashed password in python","I have managed to salt and hash password using this method:
import hashlib, uuid
salt = uuid.uuid4().hex
hashed_password = hashlib.sha512(password + salt).hexdigest()

How do I reverse this process to recover the actual password? 
Update: You are supposed to take a password from the user, apply the same salt and hash method to their password, and then compare it with the originally salted/hashed password to see if they match. That makes perfect sense. 
","You don't. Hashing is a technique which is only one way. This is the whole point of hashing.
You never store raw passwords in order to protect your user if you got a leak of information in your DB.
If you want to implement some ""password recover"" procedure, you need to do as everyone do, send a email to the person with a temporary link to reset password on send a new one randomly generated.
","1393","<python><authentication><hash><passwords><salt>","0","3","3","2014-12-15 17:16:34","27472891","2","1","","","","2014-12-14 18:57:29",""
"27472861","Recover a salted and hashed password in python","I have managed to salt and hash password using this method:
import hashlib, uuid
salt = uuid.uuid4().hex
hashed_password = hashlib.sha512(password + salt).hexdigest()

How do I reverse this process to recover the actual password? 
Update: You are supposed to take a password from the user, apply the same salt and hash method to their password, and then compare it with the originally salted/hashed password to see if they match. That makes perfect sense. 
","Hashing is one way as in you can only encrypt (for example) a string and then compare the user provided hash with the one your app generates.
However, there is simple-crypt and it may be what you're looking for if you want ""2 way"" hashing.
","1393","<python><authentication><hash><passwords><salt>","0","0","3","2014-12-15 17:16:34","27472891","2","1","","","","2014-12-14 18:57:29",""
"27472861","Recover a salted and hashed password in python","I have managed to salt and hash password using this method:
import hashlib, uuid
salt = uuid.uuid4().hex
hashed_password = hashlib.sha512(password + salt).hexdigest()

How do I reverse this process to recover the actual password? 
Update: You are supposed to take a password from the user, apply the same salt and hash method to their password, and then compare it with the originally salted/hashed password to see if they match. That makes perfect sense. 
","Good question.
First off: never send users their passwords in plaintext!!
It's considered a bad security practice for a few reasons.

If anyone gets access to a user's email account (gmail, etc), then they have the password and can hijack the user account.
Second, hashing is a one-way form of encryption where you turn the password into gibberish. The big value in hashing is that the same password will always be turned into the same gibberish: every time. This means you can do password matching without ever storing the raw password. The reason you're supposed to hash a password and not do 2-way encryption like AES-256, is that 2-way encryption requires the creation, management, and securing of encryption keys which can be hard. Hashing is just easier and more secure for the vast majority of developers.

Instead of implementing password reset stuff by sending a user their password, you should instead send a user a link to a secure page where they can reset their password with a one-time token that expires after a certain amount of time.
This way, even if an attacker gets a hold of someone's email account (gmail, etc.) -- there's only a limited amount of time they can do damage.
There are a variety of ways to do this stuff yourself, but an easy approach to getting a one-time use token you don't have to store or manage is to offload user management to a microservice like Stormpath where it takes care of all the user management for you: password reset, password storage, user profiles, authentication, encryption, hashing, etc.
If you wanted to implement something like this in a Flask web app, for instance, you'd use the Flask-Stormpath library like so:
from flask import Flask
from flask.ext.stormpath import StormpathManager

app = Flask(__name__)
app.config['STORMPATH_ENABLE_FORGOT_PASSWORD'] = True

stormpath_manager = StormpathManager(app)

app.listen(3000)

NOTE: I work at Stormpath, but these rules apply regardless of what you're using and help make any application more secure.
","1393","<python><authentication><hash><passwords><salt>","0","0","3","2014-12-15 17:16:34","27472891","2","1","","","","2014-12-14 18:57:29",""
"6877103","What's the meaning of including 'random salt' in password hashing of django framework?","I'm a pretty newbie in Django framework. While just walking around the django's default authentication system, I found that django stores user's password in algorithm$salt$hashed format. And the salt is not same for every single user; django generates every new salt for each user.
I've made several web pages and got many chances using other open source softwares, but there was always only 'one' salt string for hashing.
So, my question is:

Why django uses 'random' salt beside 'one' salt string?
Why django stores it in same column with password hash?

","The practice of salting a password is intended to make it more difficult for an attacker to brute-force crack the passwords you've stored. More info.
","1384","<django><passwords><hash><salt>","2","1","3","2011-07-30 07:04:43","6877660","0","1","366908","","2011-07-29 18:08:10","2011-07-29 18:00:35",""
"6877103","What's the meaning of including 'random salt' in password hashing of django framework?","I'm a pretty newbie in Django framework. While just walking around the django's default authentication system, I found that django stores user's password in algorithm$salt$hashed format. And the salt is not same for every single user; django generates every new salt for each user.
I've made several web pages and got many chances using other open source softwares, but there was always only 'one' salt string for hashing.
So, my question is:

Why django uses 'random' salt beside 'one' salt string?
Why django stores it in same column with password hash?

","The random salt prevents using a rainbow table to quickly decrypt all passwords in the table. Instead they have to do each one separately.
","1384","<django><passwords><hash><salt>","2","3","3","2011-07-30 07:04:43","6877660","0","1","366908","","2011-07-29 18:08:10","2011-07-29 18:00:35",""
"6877103","What's the meaning of including 'random salt' in password hashing of django framework?","I'm a pretty newbie in Django framework. While just walking around the django's default authentication system, I found that django stores user's password in algorithm$salt$hashed format. And the salt is not same for every single user; django generates every new salt for each user.
I've made several web pages and got many chances using other open source softwares, but there was always only 'one' salt string for hashing.
So, my question is:

Why django uses 'random' salt beside 'one' salt string?
Why django stores it in same column with password hash?

","
Why django uses 'random' salt beside 'one' salt string? 

Because if you would have one salt you could generate rainbow tables for your database easier than when there are random salts. 
If you would like to generate rainbow tables to decrypt django hashes you would have to generate tables for each different salt in database. Generating of rainbow tables take very long time, it's just brute force or dictionary attack. 

Why django stores it in same column with password hash? 

I don't know what are you specifically asking about but there are probably 2 answers. 
-It's stored because someone designed it that way. It could be on salt field and it wouldn't matter. 
-When user send password via form django join salt to string and than calculate sha1 and check if it match the one in db.
","1384","<django><passwords><hash><salt>","2","6","3","2011-07-30 07:04:43","6877660","0","1","366908","","2011-07-29 18:08:10","2011-07-29 18:00:35",""
"19083169","Hashing password to SqlServer","I've been reading over and over the code again to see where the error is being made but I'm unable to find it. I've copied this code from stackoverflow an never really checked it or understood it perfectly as to fix it.
I'm receiving passwords from a webservice, hashing, salting and saving it to a SqlServer 2008.
The variables on the SqlServer are declared as mail as nvarchar(64), hash as varbinary(128) and salt as varbinary(128).
The passwords are being saved but when I try to check if the password are correct the method always returns false.
This are my methods.
public int InsertData(string mail,string Password)
    {

        int lineas;
        UserData usuario = HashPassword(Password);
        using (SqlConnection connection = new SqlConnection(Connection))
        using (SqlCommand command = connection.CreateCommand())
        {
            command.CommandText = ""INSERT INTO Usuarios (Mail,Hash,Salt) VALUES (@mail,@hash,@salt)"";

            command.Parameters.AddWithValue(""@mail"", mail);
            command.Parameters.AddWithValue(""@hash"", usuario.Password);
            command.Parameters.AddWithValue(""@salt"", usuario.salt);


            connection.Open();
            lineas=command.ExecuteNonQuery();
        }
        usuario = null;
        return lineas;
    }



private UserData HashPassword(string Password)
    {
        //This method hashes the user password and saves it into the object UserData
        using (var deriveBytes = new Rfc2898DeriveBytes(Password, 20))
        {
            byte[] salt = deriveBytes.Salt;
            byte[] key = deriveBytes.GetBytes(20);  // derive a 20-byte key
            UserData usuario = new UserData();
            usuario.Password = key;
            usuario.salt = salt;
            return usuario;

        }


    }

And the next method is the one I use to validate de password, it always returns false
private bool CheckPassword(string Password, byte[] hash, byte[] salt)
    {


        // load salt and key from database

        using (var deriveBytes = new Rfc2898DeriveBytes(Password, salt))
        {
            byte[] newKey = deriveBytes.GetBytes(20);  // derive a 20-byte key

            if (!newKey.SequenceEqual(hash))
                return false;

            else
                return true;

        }
    }

This method receives the login info
 public bool ValidateLogIn(string mail, string Password)
    {



        using (SqlConnection connection = new SqlConnection(Connection))
        using (SqlCommand command = connection.CreateCommand())
        {
            command.CommandText = ""Select * from Usuarios where Mail=@mail"";
            command.Parameters.AddWithValue(""@mail"",mail);
            connection.Open();
            using (SqlDataReader reader = command.ExecuteReader())
            {
                reader.Read();
                byte[] hash = (byte[])reader[""Hash""];
                byte[] salt = (byte[])reader[""Salt""];
                if(CheckPassword(Password,hash,salt))
                {
                    /
                    UpdateData(mail, Password);
                    return true;
                }
                else
                {
                    return false;
                }

            }

        }

    }

Any ideas what could be wrong?
EDIT: I've found the link where I got the hashing code
https://stackoverflow.com/a/4330586/1861617
","Using your code in a test-project (Windows Forms with textbox+button+label) I added this:
   internal class UserData
    {
        public byte[] Password { get; set; }
        public byte[] Salt { get; set; }
    }

    public string Connection { get; set; }

    private void UpdateData(string mail, string password)
    {
        // not a clue what to do here....
    }

    private void button1_Click(object sender, EventArgs e)
    {
        var password = textBox1.Text;
        var u = HashPassword(password);

        var b = new SqlConnectionStringBuilder {DataSource = ""127.0.0.1"", IntegratedSecurity = true};
        Connection = b.ConnectionString;

        InsertData(""test@domain.com"", password);

        label1.Text = string.Format(""Using direct check: {0}\nVia the database: {1}"", 
            CheckPassword(password, u.Password, u.Salt),
            ValidateLogIn(""test@domain.com"", password));
    }

And it returns true;true without any problems. (VS2010, .Net4 CP, SQL2008R2)
On the database I used this:
CREATE TABLE tempdb..t_hash 
    (
        Mail nvarchar(64) NOT NULL PRIMARY KEY (Mail), 
        Hash varbinary(128), 
        Salt varbinary(128)
     )

My best guess is that your definition for the UserData clas is 'flawed' ? 
","1381","<c#><sql-server><sql-server-2008><hash><salt>","4","0","2","2013-10-03 00:59:40","19149205","4","","-1","","2017-05-23 11:50:02","2013-09-29 20:54:29",""
"19083169","Hashing password to SqlServer","I've been reading over and over the code again to see where the error is being made but I'm unable to find it. I've copied this code from stackoverflow an never really checked it or understood it perfectly as to fix it.
I'm receiving passwords from a webservice, hashing, salting and saving it to a SqlServer 2008.
The variables on the SqlServer are declared as mail as nvarchar(64), hash as varbinary(128) and salt as varbinary(128).
The passwords are being saved but when I try to check if the password are correct the method always returns false.
This are my methods.
public int InsertData(string mail,string Password)
    {

        int lineas;
        UserData usuario = HashPassword(Password);
        using (SqlConnection connection = new SqlConnection(Connection))
        using (SqlCommand command = connection.CreateCommand())
        {
            command.CommandText = ""INSERT INTO Usuarios (Mail,Hash,Salt) VALUES (@mail,@hash,@salt)"";

            command.Parameters.AddWithValue(""@mail"", mail);
            command.Parameters.AddWithValue(""@hash"", usuario.Password);
            command.Parameters.AddWithValue(""@salt"", usuario.salt);


            connection.Open();
            lineas=command.ExecuteNonQuery();
        }
        usuario = null;
        return lineas;
    }



private UserData HashPassword(string Password)
    {
        //This method hashes the user password and saves it into the object UserData
        using (var deriveBytes = new Rfc2898DeriveBytes(Password, 20))
        {
            byte[] salt = deriveBytes.Salt;
            byte[] key = deriveBytes.GetBytes(20);  // derive a 20-byte key
            UserData usuario = new UserData();
            usuario.Password = key;
            usuario.salt = salt;
            return usuario;

        }


    }

And the next method is the one I use to validate de password, it always returns false
private bool CheckPassword(string Password, byte[] hash, byte[] salt)
    {


        // load salt and key from database

        using (var deriveBytes = new Rfc2898DeriveBytes(Password, salt))
        {
            byte[] newKey = deriveBytes.GetBytes(20);  // derive a 20-byte key

            if (!newKey.SequenceEqual(hash))
                return false;

            else
                return true;

        }
    }

This method receives the login info
 public bool ValidateLogIn(string mail, string Password)
    {



        using (SqlConnection connection = new SqlConnection(Connection))
        using (SqlCommand command = connection.CreateCommand())
        {
            command.CommandText = ""Select * from Usuarios where Mail=@mail"";
            command.Parameters.AddWithValue(""@mail"",mail);
            connection.Open();
            using (SqlDataReader reader = command.ExecuteReader())
            {
                reader.Read();
                byte[] hash = (byte[])reader[""Hash""];
                byte[] salt = (byte[])reader[""Salt""];
                if(CheckPassword(Password,hash,salt))
                {
                    /
                    UpdateData(mail, Password);
                    return true;
                }
                else
                {
                    return false;
                }

            }

        }

    }

Any ideas what could be wrong?
EDIT: I've found the link where I got the hashing code
https://stackoverflow.com/a/4330586/1861617
","After checking with deroby's answer and still not getting luck. I rechecked and realized 20 bytes are 120 bits so the varbinary wasn't able to store the whole salt. After increasing it to 256 it worked.
","1381","<c#><sql-server><sql-server-2008><hash><salt>","4","0","2","2013-10-03 00:59:40","19149205","4","","-1","","2017-05-23 11:50:02","2013-09-29 20:54:29",""
"43874392","SaltStack processing json file","Is it possible to process json file by saltstack that is located on minions using states functionality? 
I'm sure that it should be possible to do using jinja's functionality, but can't find any information.
","cp.get_file_str is what you need.
You can add the following line for example at the top of your state file and will load the file from the minion as a json.
First it will load it as string then load_json filter will convert the string to json object so you can handle it like a normal json.
{% set json_data = salt.cp.get_file_str('/path/to/myfile.json') | load_json %}

Note: That line will be compiled before the state modules.
","1380","<json><jinja2><salt><salt-stack>","0","6","1","2017-05-19 07:05:11","43875683","1","","2336650","","2017-05-19 07:05:11","2017-05-09 15:47:36",""
"7618991","Openssl asymmetric encryption without salt (in php)","I need to encrypt a string data with SSH-2 RSA 1024 bit ( with the public key ) then with RMD-160 algorithm. I do it like this:
generate private key:
openssl genrsa -des3 -out privatekey.key 1024

public key:
openssl rsa -in privatekey.key -pubout -out public.pem

encrypt the data:
openssl rsautl -encrypt -inkey public.pem -pubin -in file.txt -out encrypted_data.txt

But , the request is: need to get the same output with the same input!  For example if the input string is ""some data"" and the encrypted string is ""a23c40327a6c5a67a5bb332"" then i need to get the ""a23c40327a6c5a67a5bb332"" output every time when the input is ""some data""
Can i do it with asymmetric encryption?
I know it can be done with symmetric encryption like DES with the -nosalt option
openssl des3 -nosalt -in file.txt -out file.des3

but is it possible with asymmetric encryption?
","Probably not.
The man page for openssl shows that the rsautl sub-command accepts pkcs1 1.5 padding, oaep padding, backwards-compatible SSL padding or no padding. All of these (except no padding) generate random data to pad the message, so no two encryptions will generate that same ciphertext (this is a good thing).
If you can manually pad your data to the right length then you might be able to use no padding but be warned that this will significantly weaken your security.
","1377","<encryption><openssl><salt>","1","1","2","2011-10-06 12:17:05","7619025","1","","635608","","2011-10-01 08:33:20","2011-10-01 07:57:29",""
"7618991","Openssl asymmetric encryption without salt (in php)","I need to encrypt a string data with SSH-2 RSA 1024 bit ( with the public key ) then with RMD-160 algorithm. I do it like this:
generate private key:
openssl genrsa -des3 -out privatekey.key 1024

public key:
openssl rsa -in privatekey.key -pubout -out public.pem

encrypt the data:
openssl rsautl -encrypt -inkey public.pem -pubin -in file.txt -out encrypted_data.txt

But , the request is: need to get the same output with the same input!  For example if the input string is ""some data"" and the encrypted string is ""a23c40327a6c5a67a5bb332"" then i need to get the ""a23c40327a6c5a67a5bb332"" output every time when the input is ""some data""
Can i do it with asymmetric encryption?
I know it can be done with symmetric encryption like DES with the -nosalt option
openssl des3 -nosalt -in file.txt -out file.des3

but is it possible with asymmetric encryption?
","Cameron Skinner is right - you should be making use of randomized padding.
That said, if you don't want to, you can use phpseclib, a pure PHP RSA implementation, to do so, as follows:
$ciphertext = base64_decode('...');
$ciphertext = new Math_BigInteger($ciphertext, 256);
echo $rsa->_exponentiate($ciphertext)->toBytes();

It's a hackish solution since phpseclib doesn't natively let you do RSA encryption without randomized padding but it does get the job done.
","1377","<encryption><openssl><salt>","1","1","2","2011-10-06 12:17:05","7619025","1","","635608","","2011-10-01 08:33:20","2011-10-01 07:57:29",""
"14143860","generate salted wordpress hash","i'm new to wordpress field 
So this is a salted wordpress hash : 
$1$4Dad4CM6$I63lezzBCDjK9RhBwUgZi1 
How can i generate hashes like that? 
Thank you.
","Wordpress uses 4 security keys saved at wp-config, with the additional salt version.
You can generate the 4 security keys pair (With salt each) using the Wordpress hash online generator.
Check this link for more information.
","1372","<wordpress><hash><salt>","0","0","1","2013-01-03 19:13:07","","5","","","","","2013-01-03 17:18:49",""
"14922302","Validate a password against an SSHA256 hash in PHP","For authentification with Dovecot, I use SSHA256 hashes but I have no clue how to validate a given password against the existing hash. The following PHP functions (found them in the web) are used to create the SSHA256 hash:
function ssha256($pw) {
        $salt = make_salt();
        return ""{SSHA256}"" . base64_encode( hash('sha256', $pw . $salt, true ) . $salt );
}

function make_salt() {
        $len   = 4;
        $bytes = array();
        for ($i = 0; $i < $len; $i++ ) {
                $bytes[] = rand(1,255);
        }
        $salt_str = '';
        foreach ($bytes as $b) {
                $salt_str .= pack('C', $b);
        }
        return $salt_str;
}

Example output: {SSHA256}lGq49JTKmBC49AUrk7wLyQVmeZ7cGl/V13A9QbY4RVKchckL
Do I have to extract the salt, but how? 
I totally lost the way for solving the problem, has anyone a hint for this?
Thanks to everyone for helping!
Oh and sorry, I have to use SSHA256, because Dovecot 1.2.15 supports only those schemes:
CRYPT MD5 MD5-CRYPT SHA SHA1 SHA256 SMD5 SSHA SSHA256 PLAIN CLEARTEXT CRAM-MD5 HMAC-MD5 DIGEST-MD5 PLAIN-MD4 PLAIN-MD5 LDAP-MD5 LANMAN NTLM OTP SKEY RPA
","You need to store the salt along with the hashed value.
When you need to validate the password, you simply calculate the hash again with the user input password  + the stored salt. If the hashes match, the user entered the correct password.
For your format, use base64_decode first, the last 4 bytes of the result will be the salt.
","1360","<php><validation><passwords><salt>","2","2","2","2013-04-11 16:33:07","14922395","1","","1626446","","2013-02-17 15:33:37","2013-02-17 14:50:36",""
"14922302","Validate a password against an SSHA256 hash in PHP","For authentification with Dovecot, I use SSHA256 hashes but I have no clue how to validate a given password against the existing hash. The following PHP functions (found them in the web) are used to create the SSHA256 hash:
function ssha256($pw) {
        $salt = make_salt();
        return ""{SSHA256}"" . base64_encode( hash('sha256', $pw . $salt, true ) . $salt );
}

function make_salt() {
        $len   = 4;
        $bytes = array();
        for ($i = 0; $i < $len; $i++ ) {
                $bytes[] = rand(1,255);
        }
        $salt_str = '';
        foreach ($bytes as $b) {
                $salt_str .= pack('C', $b);
        }
        return $salt_str;
}

Example output: {SSHA256}lGq49JTKmBC49AUrk7wLyQVmeZ7cGl/V13A9QbY4RVKchckL
Do I have to extract the salt, but how? 
I totally lost the way for solving the problem, has anyone a hint for this?
Thanks to everyone for helping!
Oh and sorry, I have to use SSHA256, because Dovecot 1.2.15 supports only those schemes:
CRYPT MD5 MD5-CRYPT SHA SHA1 SHA256 SMD5 SSHA SSHA256 PLAIN CLEARTEXT CRAM-MD5 HMAC-MD5 DIGEST-MD5 PLAIN-MD4 PLAIN-MD5 LDAP-MD5 LANMAN NTLM OTP SKEY RPA
","You should not be using the SHA family for password hashing. They are fast and designed for hashing files at speed. You need pashword hashing to be expensive. Use bcrypt, PHPass or just use this class, which I rolled myself (but not until you learn to pick holes in it):
class PassHash {
    public static function rand_str($length) {
        $total = $length % 2;
        $output = """";
        if ($total !== 0) {
            $count = floor($length / 2);
            $output .= ""."";
        } else $count = $length / 2;

        $bytes = openssl_random_pseudo_bytes($count);
        $output .= bin2hex($bytes);

        // warning: prepending with a dot if the length is odd.
        // this can be very dangerous. no clue why you'd want your
        // bcrypt salt to do this, but /shrug

        return $output;
    }
    // 2y is an exploit fix, and an improvement over 2a. Only available in 5.4.0+
    public static function hash($input) {
        return crypt($input, ""$2y$13$"" . self::rand_str(22));

    }

    // legacy support, add exception handling and fall back to <= 5.3.0
    public static function hash_weak($input) {
        return crypt($input, ""$2a$13$"" . self::rand_str(22));
    }

    public static function compare($input, $hash) {
        return (crypt($input, $hash) === $hash);
    }
}

You have to hash the plaintext given and compare that hash against one you have stored. The salts are stored in the hashes, and should be random. If you like, add a pepper. You should also make the workrate variable, so that you can change the workrate at any moment when needed and still have your system work.

If, like you say, you have no way of implementing this, you can unpack the hash as follows:
function unpack_hash($hash) {
        $hash = base64_decode($hash);
        $split = str_split($hash, 64);
        return array(""salt"" => $split[1], ""hash"" => $split[0]);

This is because SHA256 is 256 bits, or 64 hex characters. You can just always assume the first 64 chars are the hash
","1360","<php><validation><passwords><salt>","2","2","2","2013-04-11 16:33:07","14922395","1","","1626446","","2013-02-17 15:33:37","2013-02-17 14:50:36",""
"16342360","Hashing and GetString/GetBytes issue","I have the below code to hash/store/retrieve data for passwords but my first unit test and it fails.
I beleive its the Encoding causing the problem because when GetBytes is called it returns byte[38], byte[36] when it should be 20 I think.
I have to convert to string as I'm storing it in a database.
Any ideas? Thanks
[Fact]
public void EncryptDecryptPasswordShouldMatch()
{
    string password = ""password"";
    string passwordKey = string.Empty;
    string passwordSalt = string.Empty;

    Helpers.CreatePasswordHash(password, out passwordSalt, out passwordKey);

    Assert.True(Helpers.PasswordsMatch(passwordSalt, passwordKey, password));

}


public static bool PasswordsMatch(string passwordSalt, string passwordKey, string password)
{
    byte[] salt = Encoding.UTF8.GetBytes(passwordSalt);
    byte[] key = Encoding.UTF8.GetBytes(passwordKey);

    using (var deriveBytes = new Rfc2898DeriveBytes(password, salt))
    {
        byte[] newKey = deriveBytes.GetBytes(20);  // derive a 20-byte key

        if (!newKey.SequenceEqual(key))
            return false;
    }

    return true;
}

public static void CreatePasswordHash(string password, out string passwordSalt, out string passwordKey)
{
    // specify that we want to randomly generate a 20-byte salt
    using (var deriveBytes = new Rfc2898DeriveBytes(password, 20))
    {
        byte[] salt = deriveBytes.Salt;
        byte[] key = deriveBytes.GetBytes(20);  // derive a 20-byte key

        passwordSalt = Encoding.UTF8.GetString(salt);
        passwordKey = Encoding.UTF8.GetString(key);
    }
}

","Use Base64 to encode binary values to string, it can deal with arbitrary byte sequences. UTF-8 is for transforming between unicode text and bytes and not every valid sequence of bytes is valid for UTF-8. Use Utf-8 to turn the password(which is text) to bytes, but use Base64 for salt and hash.
Convert.ToBase64String and Convert.FromBase64String should do the trick.

Some additional notes:

Your terminology is really weird, don't call the hash key, call it hash.
I'd concatenate the hash and salt in your CreatePasswordHash function, so the caller doesn't have to bother with having two separate values.
Something like return Base64Encode(salt)+""$""+Base64Encode(hash) then use string.Split in the verification function.
It's recommended to use a constant time comparison to verify, but it seems unlikely your timing side-channel can actually be exploited.
Your iteration count is pretty low. I recommend increasing it to 10000.

","1313","<c#><.net><encryption><hash><salt>","2","4","3","2013-05-02 16:02:59","16342482","2","","84539","","2013-05-02 15:50:02","2013-05-02 15:48:04",""
"16342360","Hashing and GetString/GetBytes issue","I have the below code to hash/store/retrieve data for passwords but my first unit test and it fails.
I beleive its the Encoding causing the problem because when GetBytes is called it returns byte[38], byte[36] when it should be 20 I think.
I have to convert to string as I'm storing it in a database.
Any ideas? Thanks
[Fact]
public void EncryptDecryptPasswordShouldMatch()
{
    string password = ""password"";
    string passwordKey = string.Empty;
    string passwordSalt = string.Empty;

    Helpers.CreatePasswordHash(password, out passwordSalt, out passwordKey);

    Assert.True(Helpers.PasswordsMatch(passwordSalt, passwordKey, password));

}


public static bool PasswordsMatch(string passwordSalt, string passwordKey, string password)
{
    byte[] salt = Encoding.UTF8.GetBytes(passwordSalt);
    byte[] key = Encoding.UTF8.GetBytes(passwordKey);

    using (var deriveBytes = new Rfc2898DeriveBytes(password, salt))
    {
        byte[] newKey = deriveBytes.GetBytes(20);  // derive a 20-byte key

        if (!newKey.SequenceEqual(key))
            return false;
    }

    return true;
}

public static void CreatePasswordHash(string password, out string passwordSalt, out string passwordKey)
{
    // specify that we want to randomly generate a 20-byte salt
    using (var deriveBytes = new Rfc2898DeriveBytes(password, 20))
    {
        byte[] salt = deriveBytes.Salt;
        byte[] key = deriveBytes.GetBytes(20);  // derive a 20-byte key

        passwordSalt = Encoding.UTF8.GetString(salt);
        passwordKey = Encoding.UTF8.GetString(key);
    }
}

","Modify your code to use the Convert.FromBase64String method:
byte[] salt = Convert.FromBase64String(passwordSalt);
byte[] key = Convert.FromBase64String(passwordKey);

Modify your code to use the Convert.ToBase64String method:
passwordSalt = Convert.ToBase64String(salt);
passwordKey = Convert.ToBase64String(key);

","1313","<c#><.net><encryption><hash><salt>","2","3","3","2013-05-02 16:02:59","16342482","2","","84539","","2013-05-02 15:50:02","2013-05-02 15:48:04",""
"16342360","Hashing and GetString/GetBytes issue","I have the below code to hash/store/retrieve data for passwords but my first unit test and it fails.
I beleive its the Encoding causing the problem because when GetBytes is called it returns byte[38], byte[36] when it should be 20 I think.
I have to convert to string as I'm storing it in a database.
Any ideas? Thanks
[Fact]
public void EncryptDecryptPasswordShouldMatch()
{
    string password = ""password"";
    string passwordKey = string.Empty;
    string passwordSalt = string.Empty;

    Helpers.CreatePasswordHash(password, out passwordSalt, out passwordKey);

    Assert.True(Helpers.PasswordsMatch(passwordSalt, passwordKey, password));

}


public static bool PasswordsMatch(string passwordSalt, string passwordKey, string password)
{
    byte[] salt = Encoding.UTF8.GetBytes(passwordSalt);
    byte[] key = Encoding.UTF8.GetBytes(passwordKey);

    using (var deriveBytes = new Rfc2898DeriveBytes(password, salt))
    {
        byte[] newKey = deriveBytes.GetBytes(20);  // derive a 20-byte key

        if (!newKey.SequenceEqual(key))
            return false;
    }

    return true;
}

public static void CreatePasswordHash(string password, out string passwordSalt, out string passwordKey)
{
    // specify that we want to randomly generate a 20-byte salt
    using (var deriveBytes = new Rfc2898DeriveBytes(password, 20))
    {
        byte[] salt = deriveBytes.Salt;
        byte[] key = deriveBytes.GetBytes(20);  // derive a 20-byte key

        passwordSalt = Encoding.UTF8.GetString(salt);
        passwordKey = Encoding.UTF8.GetString(key);
    }
}

","UTF8 is not a way to turn any random bytes into a string. It is for encoding text; not just any bytes are valid UTF8 encoded values.  You could use Base64 to and from conversions. Note that base64-encoded strings will take up ~4/3 times the characters of the raw bytes.  Here's an example:
byte[] salt = deriveBytes.Salt;
byte[] key = deriveBytes.GetBytes(20);  // derive a 20-byte key

passwordSalt = Convert.ToBase64String(salt);
passwordKey = Convert.ToBase64String(key);

And later:
byte[] salt = Convert.FromBase64String(passwordSalt);
byte[] key = Convert.FromBase64String(passwordKey);

","1313","<c#><.net><encryption><hash><salt>","2","1","3","2013-05-02 16:02:59","16342482","2","","84539","","2013-05-02 15:50:02","2013-05-02 15:48:04",""
"25526446","PBKDF2 password storage - how to validate?","I am trying to figure out how to validate the password, during login, when using PBKDF2. I am using PHP, so here is a basic password generation code:
$salt = mcrypt_create_iv(16, MCRYPT_DEV_URANDOM);
echo hash_pbkdf2('sha256', 'password', $salt, 1000, 32);

I have stored this hashed password in the database. I don't know how to test this password against a login input since I don't have the salt and the salt is generated randomly for each user. How can I ""extract"" the salt from the stored password, prepend it to the inputted password and test the result against the stored password?
","You need to store the salt together with the hash, for example:
$hash = $salt . '|' . hash_pbkdf2(.., .., $salt, ..);

You can then later extract the salt from it again and feed it back into the validation algorithm. In fact, you should do this with all the relevant input parameters for the hash (except for the password itself, obviously), to allow you to change your algorithm later as needed while still being able to validate already hashed passwords:
$hash = $algo . '|' . $salt . '|' . $rounds . '|' . hash_pbkdf2($algo, .., $salt, $rounds, ..);

In fact, you should use the crypt API, which already does it like this.
But really, you should be using password_hash, which is a user-friendly wrapper around crypt which ensures that you do it right.
","1310","<php><passwords><salt><pbkdf2>","1","3","1","2014-08-27 12:10:01","25526843","2","","","","","2014-08-27 11:51:37",""
"16598410","Salt with using Mcrypt","I'm trying to generate salt using Mcrypt's mcrypt_create_iv(), but it doesn't seems to work and I'm getting errors.
Here is my code:
<?php
$salt= substr(mcrypt_create_iv(16, MCRYPT_DEV_URANDOM))(mt_rand()),0,22);

echo $salt;
?>

","$salt = substr( mcrypt_create_iv(16, MCRYPT_DEV_URANDOM), mt_rand( 0, 22 ) );

you have some syntax errors
","1304","<php><salt>","-3","1","2","2013-05-17 10:45:43","","5","","1076493","","2013-05-16 22:22:01","2013-05-16 22:16:39",""
"16598410","Salt with using Mcrypt","I'm trying to generate salt using Mcrypt's mcrypt_create_iv(), but it doesn't seems to work and I'm getting errors.
Here is my code:
<?php
$salt= substr(mcrypt_create_iv(16, MCRYPT_DEV_URANDOM))(mt_rand()),0,22);

echo $salt;
?>

","This cannot work, you use mcrypt_create_iv() to get random bytes, but those cannot be used for hashing with BCrypt. The problem is, that mcrypt_create_iv returns binary data, while BCrypt expects a salt with characters of a given alphabet. You would have to encode your salt to this alphabet: ./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz. The function mt_rand() is of no use here.
PHP 5.5 will have it's own functions password_hash() and password_verify() ready, to simplify generating BCrypt password hashes. I strongly recommend to use this excellent api, or it's compatibility pack for earlier PHP versions. The usage is very straightforward:
// Hash a new password for storing in the database.
// The function automatically generates a cryptographically safe salt.
$hashToStoreInDb = password_hash($password, PASSWORD_BCRYPT);

// Check if the hash of the entered login password, matches the stored hash.
// The salt and the cost factor will be extracted from $existingHashFromDb.
$isPasswordCorrect = password_verify($password, $existingHashFromDb);

","1304","<php><salt>","-3","1","2","2013-05-17 10:45:43","","5","","1076493","","2013-05-16 22:22:01","2013-05-16 22:16:39",""
"15540433","Why this MD5 result with Salt has ""=="" in the end of result string?","I have java code that use jasypt (Java Simplified Encryption) library:
    StandardStringDigester digester = new StandardStringDigester();
    digester.setAlgorithm(""MD5"");
    digester.setIterations(1);

    FixedStringSaltGenerator saltGenerator = new FixedStringSaltGenerator();
    saltGenerator.setSalt(""justAnotherSalt"");

    digester.setSaltGenerator(saltGenerator);
    digester.setSaltSizeBytes(5);

    String digest = digester.digest(""my_password"");

    System.out.println(digest);

You can see that I used MD5 algorithm with salt.
The result in console is:
I9uMOxDiImtxMXKXkt2EUw==

I want to know why there are ""=="" characters in the end of result string? It's only exist if I used Salt.
","StandardStringDigester.digest API says The result is encoded in BASE64 (default) or HEXADECIMAL and returned as an ASCII String. In your case this is BASE64
","1303","<java><hash><md5><salt><jasypt>","0","2","1","2013-03-21 05:59:36","15540485","1","","","","","2013-03-21 05:54:42","2013-03-21 21:31:07"
"41477844","Securing users passwords using c# - Rfc2898DeriveBytes vs SHA512","I've been reading about securing users passwords in the database (https://crackstation.net/hashing-security.htm). The basic idea is understood - generate a random Salt, append it to the password and hash the password.
So here's what I did (I didn't put here some methods that do conversion to strings):
RandomNumberGenerator randomNumberGenerator = RandomNumberGenerator.Create();
byte[] rndBytes = new byte[512];
randomNumberGenerator.GetBytes(rndBytes);
string salt = ToHexString(rndBytes);

var sha512Hasher = SHA512.Create();
string hashedPwd = ToHexString(sha512Hasher.ComputeHash(GetBytes(pwd + salt)))

According to the article this is secured but can be even more secured by using ""key stretching"" which for my understanding is hashing that done slower (using a parameter) to make brute-force the password harder.
So here's what I did:
RandomNumberGenerator randomNumberGenerator = RandomNumberGenerator.Create();
byte[] salt = new byte[512];
randomNumberGenerator.GetBytes(salt);
Rfc2898DeriveBytes k1 = new Rfc2898DeriveBytes(user.Password, salt, 1000);
byte[] hashBytes = k1.GetBytes(512);
string hash = ToHexString(hashBytes);

Now here are my questions:

What is the difference between SHA512 and Rfc2898DeriveBytes? which is more secure?
Should I have smaller salt with more iterations? Will it make it more secure?
On a 1000 iterations it runs very fast - how slow should it be? half a second? a second? What is the rule of thumb here?
On the database - should I convert the byte array to string and store strings or should I store the byte array in a binary data field?

Edit (another questions)

If I iterate a 1000 times over rehashing SHA512 - does it give the same security?

","
What is the difference between SHA512 and Rfc2898DeriveBytes?

SHA512 is a cryptographic hash function, while Rfc2898DeriveBytes is a key-derivation function. As you already wrote, hash functions are too fast and can be brute-forced too easily, that's why we need functions with a cost factor like BCrypt, SCrypt, PBKDF2 or Argon2. As far as i know, Rfc2898DeriveBytes implements the PBKDF2 using a HMAC with SHA1. This answers your other question that an iterated SHA is less secure than Rfc2898DeriveBytes.

Should I have smaller salt with more iterations?

Salt and cost factor are not related and have different purposes. The salt prevents the usage of rainbow tables, the iterations are a counter measure for brute-force attacks. More infos you can get from my tutorial about safe password storage. So no, don't make the salt shorter.

how slow should it be?

Of course this depends on your server and your requirements for security, slower means harder to brute-force. A rule of thumb is about 50 milliseconds for a single hash.

On the database - should I convert the byte array to string?

This is up to you. Strings are easier to handle for backups, migration and debugging, while byte arrays need less space in the database. Maybe you should also have a look at BCrypt.Net, it generates strings as output which contain the salt and are easy to store in a single database field [string].
","1298","<c#><security><hash><passwords><salt>","3","4","1","2017-01-05 11:10:03","41483244","0","","2652208","","2017-01-05 05:32:11","2017-01-05 05:26:18",""
"34662684","Setting a salt for password_hash()","I'm creating a mass user import script in PHP for owncloud. I read the users from a CSV file, then I'll add them to the owncloud database. I'm having an issue with the passwords though. To my knowledge, owncloud uses password_hash() with BCRYPT. I have the passwordsalt, but I'm not sure how to use that salt with password_hash(). 
Any help there guys?
","Use salt in the option array like this
password_hash(""rasmuslerdorf"", PASSWORD_BCRYPT, array(""cost"" => 7, ""salt"" => ""thisisyoursalt""));

But using your own salt is not a good idea. Let password_hash() create a salt for your password. password_hash() will create different salt for every password. It will increase your password security strength.
","1290","<php><salt><owncloud><php-password-hash>","0","1","2","2016-01-13 15:11:15","34662880","2","","5442132","","2016-01-07 18:47:29","2016-01-07 18:37:27",""
"34662684","Setting a salt for password_hash()","I'm creating a mass user import script in PHP for owncloud. I read the users from a CSV file, then I'll add them to the owncloud database. I'm having an issue with the passwords though. To my knowledge, owncloud uses password_hash() with BCRYPT. I have the passwordsalt, but I'm not sure how to use that salt with password_hash(). 
Any help there guys?
","If the hashes are produced by password_hash() or crypt(), then the salt is included in the resulting hash value. To check a password against this hash, you can use the function password_verify(), this function extracts the salt and other parameters automatically.
// Check if the hash of the entered login password, matches the stored hash.
// The salt and the cost factor will be extracted from $existingHashFromDb.
$isPasswordCorrect = password_verify($password, $existingHashFromDb);

","1290","<php><salt><owncloud><php-password-hash>","0","0","2","2016-01-13 15:11:15","34662880","2","","5442132","","2016-01-07 18:47:29","2016-01-07 18:37:27",""
"14986410","AES Salting iterations, How many required?","I am trying to execute a simple Encrypt and Decrypt AES and I was trying to use salting. These values will be stored in the DB and retrieved from there. (I cannot use hashing) I am using static key and static salt for the time being.
My question is how many iterations of salting should I do? I mean I have to store the value in the DB and I see that at 2 iterations (128bit key, 42bit salt) I get a encrypted string of 152 charaters for 40 characters. For 4 iterations, it's 364 characters for 40 characters, for 8 iterations 1536 characters for 40 characters and for 16 iterations, a ridiculous  19968 characters for 40 characters.
So what should be my optimal number of iterations?
 public static String AESencrypt(String value) throws Exception {
        Key key = generateKey();
        Cipher c = Cipher.getInstance(ALGORITHM);
        c.init(Cipher.ENCRYPT_MODE, key);

        String valueToEnc = null;
        String eValue = value;
        for (int i = 0; i < ITERATIONS; i++) {
            valueToEnc = salt + eValue;
            byte[] encValue = c.doFinal(valueToEnc.getBytes());
            eValue = new BASE64Encoder().encode(encValue);
        }
        return eValue;
    }

    public static String AESdecrypt(String value) throws Exception {
        Key key = generateKey();
        Cipher c = Cipher.getInstance(ALGORITHM);
        c.init(Cipher.DECRYPT_MODE, key);

        String dValue = null;
        String valueToDecrypt = value;
        for (int i = 0; i < ITERATIONS; i++) {
            byte[] decordedValue = new BASE64Decoder().decodeBuffer(valueToDecrypt);
            byte[] decValue = c.doFinal(decordedValue);
            dValue = new String(decValue).substring(salt.length());
            valueToDecrypt = dValue;
        }
        return dValue;
    }

","Salting is used on passwords to derive keys. It is not used on ciphertext, not even if it is base 64 encoded. Salting is used to make it harder for an attacker to find the password using brute force or rainbow tables. It is typically used by a PBKDF such as PBKDF2, bcrypt or scrypt.
In your case it doesn't matter how much you encrypt; if the attacker tries the key, decrypts the ciphertext and then finds base 64, the attacker will know he has found the key, and can simply do the number of iterations again.
In general, it does not make sense to encrypt things multiple times; block ciphers themselves already should contain a sufficient number of ""rounds"".
","1289","<encryption><aes><salt>","0","5","1","2013-02-20 20:57:02","14989391","3","","589259","","2013-02-20 20:57:02","2013-02-20 17:41:08",""
"6919153","Pure-ftpd and Postgreql Auth with password salt","I've recently begun the task of setting up an PureFTP server. At work we use Postgresql 8.4. The schema essentially boils down to,
username        text
password        character(40)
password_salt   text

The password is stored as hash of sha1( password + salt ). Using Postgresql's pgcrypto I can supply a username, and password and find out if the user has auth:
SELECT
 encode( digest( $password ||password_salt, 'sha1' ), 'hex' ) = password
   AS password_correct
 , username
 , password
 , password_salt
FROM contact.person;

Now the issue that I'm having is that such a function would require me getting the password into the query. This doesn't seem possible with Pureftp's current implementation of auth-postgresql. It only supports providing:
\L is replaced by the login of a user trying to authenticate.
\I is replaced by the IP address the client connected to.
\P is replaced by the port number the client connected to.
\R is replaced by the remote IP address the client connected from.
\D is replaced by the remote IPv4 address, as a long decimal number.

Is there another way I can do this? I either need to get the password into the query, or get the salt and password out and find another way to write the code in Pureftp.
Obviously, I have another option of writing a custom authentication module, but I would think this basic salting would be supported by the pg module.
References

Pure FTPd's Postgresql-auth docs
Postgresql 8.4's pgcrypto

","I had the very same problem. However, writing my own custom authentication module would've been an overkill since the available pgsql auth does nearly everything I want..
Here's what changes I made for it to suit my needs:
In log_pgsql_p.h add static char *salting; and static char *sqlreq_getsalt; and extend the static ConfigKeywords pgsql_config_keywords[] with { ""PGSQLSalting"", &salting }, and { ""PGSQLGetSalt"", &sqlreq_getsalt },.
In log_pgsql.h I added #define SALT_SQL_APPEND ""append"", #define SALT_SQL_PREPEND ""prepend"" and #define SALT_SQL_NONE ""none"".
In log_pgsql.c I then made the following changes in the pw_psql_check function:
I declared const char *salt = NULL; and char * salted_password = NULL; at the top.
Directly before spwd gets assigned the result of the query to sqlreq_getpw I added
if (strcasecmp(salting, SALT_SQL_NONE) != 0) {
    salt = pw_pgsql_getquery(id_sql_server, sqlreq_getsalt,
                             escaped_account, escaped_ip,
                             escaped_port, escaped_peer_ip,
                             escaped_decimal_ip);
}

Then, before the encryption takes place:
if (salt != NULL) {
    int salted_pw_size = strlen(salt) + strlen(password) + 1;
    salted_password = (char *) malloc(salted_pw_size);
    if (strcasecmp(salting, SALT_SQL_APPEND) == 0) {
        strcpy(salted_password, password);
        strcat(salted_password, salt);            
    } else if (strcasecmp(salting, SALT_SQL_PREPEND) == 0) {
        strcpy(salted_password, salt);
        strcat(salted_password, password);
    }
} else {
    salted_password = (char *) malloc(strlen(password));
    strcpy(salted_password, password);
}

And then I replaced the password argument in subsequent calls to the crypt-methods (crypt, crypto_hash_md5, crypto_hash_sha1) and the strcasecmp for 'cleartext' with (const char*)salted_password.
Now all that's left to do is tidying up the memory we allocated. Especially the plaintext-password with appended/prepended salt shouldn't remain in memory - call it paranoia if you want. So after the bye: label add
free((void *) salt;
if(strcasecmp(salting, SALT_SQL_NONE) != 0) {
    volatile char *salted_password_ = (volatile char *) salted_password;
    while(*salted_password_ != 0) {
        *salted_password_++ = 0;
    }
    free((void *) salted_password);
}

With these changes you now have two additional parameters in your config file available:

PGSQLSalting: Accepts 'append' (appends the salt to the pw), 'prepend' and 'none' (without the apostrophe)
PGSQLGetSalt: Here you specify the field in your db to fetch the salt from, much like with the crypted password you need to retrieve via PGSQLGetPw.

Edit: Oh, and don't forget to free the allocated memory at the end of the function!
I also can provide a diff file that works for the release 1.0.36.. here you go! Beware though, i added the if around the freeing of salted_password later (because i only later realized how this might lead to an error if salted_password points to password), so this is not in the diff and I'm too lazy to change the diff file :/
","1279","<postgresql><salt><saltedhash><pureftpd>","5","2","1","2012-10-18 21:30:54","","3","1","124486","","2011-08-03 15:04:16","2011-08-02 21:53:30",""
"9764235","How do I get OpenSSL style salted MD5 in Ruby?","I'm talking about this:
$ openssl passwd -1 -salt thesalt thepassword
$1$thesalt$HAWpBmvUCutuyTS4JwevI.

In PHP it would look like this:
crypt('thepassword', ('$1$'.'thesalt')); # this gives the same output as above

I'm trying to achieve the same format in Ruby 1.9. I've been told Ruby's String#crypt will do this but it does not. I've looked everywhere for an answer, but I've come across nothing.
If it helps anything, I'm trying to do this on Windows XP.
Ruby version: ruby 1.9.3p0 (2011-10-30) [i386-mingw32]
Just to keep away the comments telling me to use something other than MD5 or whatever else, I would if I could. This choice isn't up to me.
Thanks.
Edit: I want to do this without shelling out to openssl because that would be too slow for what I need.
","If all else fails, you could call the openssl executable using backticks:
password = ""thepassword""
salt = ""thesalt""
hashed = `openssl passwd -1 -salt #{salt} #{password}`

puts hashed  # => $1$thesalt$HAWpBmvUCutuyTS4JwevI.

","1271","<ruby><openssl><md5><salt><crypt>","0","0","2","2014-01-23 14:28:38","","3","","","user1277672","2012-03-19 03:55:51","2012-03-19 02:25:11",""
"9764235","How do I get OpenSSL style salted MD5 in Ruby?","I'm talking about this:
$ openssl passwd -1 -salt thesalt thepassword
$1$thesalt$HAWpBmvUCutuyTS4JwevI.

In PHP it would look like this:
crypt('thepassword', ('$1$'.'thesalt')); # this gives the same output as above

I'm trying to achieve the same format in Ruby 1.9. I've been told Ruby's String#crypt will do this but it does not. I've looked everywhere for an answer, but I've come across nothing.
If it helps anything, I'm trying to do this on Windows XP.
Ruby version: ruby 1.9.3p0 (2011-10-30) [i386-mingw32]
Just to keep away the comments telling me to use something other than MD5 or whatever else, I would if I could. This choice isn't up to me.
Thanks.
Edit: I want to do this without shelling out to openssl because that would be too slow for what I need.
","Darn. I was hoping for the same thing.
see also Generate openssl password with Ruby for the reason why it is not in ruby.
","1271","<ruby><openssl><md5><salt><crypt>","0","0","2","2014-01-23 14:28:38","","3","","","user1277672","2012-03-19 03:55:51","2012-03-19 02:25:11",""
"44265102","How to use cmd.run in salt-api","curl -skS ""https://xx.xxx.xxx.xxx:8080/run""     -H 'Accept: application/x-yaml'     -H 'Content-type: application/json'     -d '[{
        ""client"": ""local"",
        ""tgt"": ""*"",
        ""fun"": ""cmd.run"",
        ""name"": ""df -h"",
        ""username"": ""ravi"",
        ""password"": ""teledna"",
        ""eauth"": ""pam"" }]'

I want to run a command through the salt-api. But I am getting an error. Where test.ping is working fine. I think I am missing the params in the body. Can anybody point out the documentation or adjust the curl command above here. Thanks.
","You will want to use cmd
curl -skS https://xxx.xxx.xxx.xxx:8080/run \
    -H 'Accept: application/x-yaml' \
    -H 'Content-type: application/json' \
    -d '[{
        ""client"": ""local"",
        ""tgt"": ""*"",
        ""fun"": ""cmd.run"",
        ""kwarg"": {
           ""cmd"": ""df -h""
        },
        ""username"": ""ravi"",
        ""password"": ""teledna"",
        ""eauth"": ""auto""
     }]'

You need to use the name from the function in the modules, not the state.
https://docs.saltstack.com/en/latest/ref/modules/all/salt.modules.cmdmod.html#salt.modules.cmdmod.run
","1263","<salt><salt-stack>","2","2","1","2017-08-22 16:36:31","44425014","0","","","","","2017-05-30 14:31:05",""
"20332479","PHP mcrypt_create_iv returns question marks and incorrect length - CodeIgniter","I'm trying to use mcrypt_create_iv to generate random salts. When I test to see if the salt is generated by echo'ing it out, it checks out but it isn't the required length which I pass as a parameter to it (32), instead its less than that.
When I store it in my database table however, it shows up as something like this K??5P?M???4?o???""?0??
I'm sure it's something to do with the database, but I tried to change the collation of it to correspond with the config settings of CI, which is utf8_general_ci, but it doesn't solve the problem, instead it generates a much smaller salt.
Does anyone know of what may be wrong? Thanks for any feedback/help
","The function mcrypt_create_iv() will return a binary string, containing \0 and other unreadable characters. Depending on how you want to use the salts, you first have to encode those byte strings, to an accepted alphabet. It is also possible to store binary strings in the database, but of course you will have a problem to display them.
Since salts are normally used for password storing, i would recommend to have a look at PHP's function password_hash(), it will generate a salt automatically and includes it in the resulting hash-value, so you don't need a separate database field for the salt.
","1263","<php><codeigniter><salt><mcrypt>","0","1","1","2013-12-03 07:47:12","20345548","3","","","","","2013-12-02 16:00:56",""
"50094264","Salt: Using salt state in jinja if-else state","I'm trying to deploy a django project with saltstack.
I wrote a sls file and It installs packages and run some commands.
It installs django, nginx, etc and I want to run manage.py collectstatic for nginx.
but when I re-apply this formula, It returns an error that /static directory is already exists.
so I modified the sls file
collect_static_files:
{% if not salt['file.exists'][BASEDIR,'myproject/static']|join('') %}
  cmd.run:
    - name: '~~~ collectstatic;'
    - cwd: /path/to/venv/bin
{% else %}
  cmd.run:
    - name: echo ""Static directory exists.""
{% endif %}

but when I run salt '*' state.apply myformula, 
It says: 
minion:
 Data failed to compile:
----------
    Rendering SLS 'base:myproj' failed: Jinja variable 'salt.utils.templates.AliasedLoader object' has no attribute 'file.exists'

How can I solve this problem? Thank you.
","I was a fool...
{% if not salt['file.directory_exists'](BASEDIR + 'myproject/static') %}
worked well.
The problem was I used the state module not execution module of salt.
Now I understand that state module describes ""state"" and execution modules act like a function.
","1258","<django><salt>","1","0","1","2018-05-02 04:06:34","50127014","0","","","","","2018-04-30 05:07:33",""
"6879706","Securely hash passwords - so much conflicting advice!","I'm reading so much conflicting advice as to how to store passwords securely. All I know for sure is not to use MD5! I've seen people advocate using PHP's bcrypt function, which seems like it'd hog the server's processor. I've seen advocates for salts, and advocates for not using salts.
It's all just so unclear. Is there real and credible advice as to how to store passwords securely?
Edit: After a fair amount of research, I found an article from ;login: that deals with the topic in quite some depth: http://www.usenix.org/publications/login/2004-06/pdfs/alexander.pdf
","This is similar to this question: Methods for storing login information in database
Credible advice: Never store your passwords in clear text!
Beyond that you have some choices to make. As I mentioned in the response to the linked question, there are two camps: let some else store your authentication data or do it your self. If you decide to do it your self, then you need to come up with a hashing routine. This should probably include a salting your passwords.
","1251","<php><hash><passwords><md5><salt>","6","0","5","2011-08-02 19:11:32","6879756","14","3","509271","","2011-07-30 17:22:35","2011-07-29 22:34:38",""
"6879706","Securely hash passwords - so much conflicting advice!","I'm reading so much conflicting advice as to how to store passwords securely. All I know for sure is not to use MD5! I've seen people advocate using PHP's bcrypt function, which seems like it'd hog the server's processor. I've seen advocates for salts, and advocates for not using salts.
It's all just so unclear. Is there real and credible advice as to how to store passwords securely?
Edit: After a fair amount of research, I found an article from ;login: that deals with the topic in quite some depth: http://www.usenix.org/publications/login/2004-06/pdfs/alexander.pdf
","First of all you need to use a good hash function, I suggest SHA-256. You can create a SHA-256 hash like this:
$hash = hash('sha256', $password);

In addition you could also use salting like this:
$salt = 'salt here';
$hash = hash('sha256', $salt . $password);

Moreover, you can use HMACs, like this:
$secret = 'your secret';
$hmac = hash_hmac('sha256', $password, $secret);

The best way to create solid hashes is through salting and iteration.
You should loop the above functions until hashing takes 200ms.
You could also go ahead and use encryption, but that would be a bit overkill for most situations.
","1251","<php><hash><passwords><md5><salt>","6","2","5","2011-08-02 19:11:32","6879756","14","3","509271","","2011-07-30 17:22:35","2011-07-29 22:34:38",""
"6879706","Securely hash passwords - so much conflicting advice!","I'm reading so much conflicting advice as to how to store passwords securely. All I know for sure is not to use MD5! I've seen people advocate using PHP's bcrypt function, which seems like it'd hog the server's processor. I've seen advocates for salts, and advocates for not using salts.
It's all just so unclear. Is there real and credible advice as to how to store passwords securely?
Edit: After a fair amount of research, I found an article from ;login: that deals with the topic in quite some depth: http://www.usenix.org/publications/login/2004-06/pdfs/alexander.pdf
","Well, there is several parts to this.

You need to try to make it difficult to get to your db and passwords in the first place, keep them secure. This includes not making your passwords cleartext and not using a symmetric encryption algorithm.
You need to use a salt. Doing this prevents people from using a precomputed lookup table (i.e. rainbow table) or something like http://md5.rednoize.com/. Pick some data for your salt that is both unique and unpredictable. I usually use a random 32 bit value, but I wouldn't go much less.
Some algorithms are stronger than others. This is defined in a couple ways

How fast it can be computed. Longer is better. The faster the attacker can calculate hashes, the better the odds are for a bruteforce attack.
If the algorithm has no known weakness which reduce the search space. For example, the number of bits in an md5 hash is misleading because there are known attacks that reduce the actual search space


As of today I think SHA1 or SHA2 with a salt is reasonably secure for the near future. There is a utility called bcrypt which uses an asymmetric variant of blowfish and has the concepts of salt and computational expense built-in, it might be worth checking out.

Edit: I wanted to clarify what a salt is, as there is a lot of misconception about it on SO and online.
What a Salt is not
A secret, pre-agreed upon string that you hash with the password. This is a secret key, not a salt.
What a Salt is
You include the salt (unique and unpredictable per hash) along with your password when hashing, but you also include a unencrypted copy of it outside of your hash, so that when verifying the hash later you are able to include the same salt when given a test password before hashing it so you can properly compare the hash.
","1251","<php><hash><passwords><md5><salt>","6","6","5","2011-08-02 19:11:32","6879756","14","3","509271","","2011-07-30 17:22:35","2011-07-29 22:34:38",""
"6879706","Securely hash passwords - so much conflicting advice!","I'm reading so much conflicting advice as to how to store passwords securely. All I know for sure is not to use MD5! I've seen people advocate using PHP's bcrypt function, which seems like it'd hog the server's processor. I've seen advocates for salts, and advocates for not using salts.
It's all just so unclear. Is there real and credible advice as to how to store passwords securely?
Edit: After a fair amount of research, I found an article from ;login: that deals with the topic in quite some depth: http://www.usenix.org/publications/login/2004-06/pdfs/alexander.pdf
","You can  use sha256. A good thing to do is to add extra information to the password such as username, userid, or some other data to it. This way, if someone hack your database, it will be impossible to use an existant hash database to find the password. They will have to crack the password starting from zero.
","1251","<php><hash><passwords><md5><salt>","6","0","5","2011-08-02 19:11:32","6879756","14","3","509271","","2011-07-30 17:22:35","2011-07-29 22:34:38",""
"6879706","Securely hash passwords - so much conflicting advice!","I'm reading so much conflicting advice as to how to store passwords securely. All I know for sure is not to use MD5! I've seen people advocate using PHP's bcrypt function, which seems like it'd hog the server's processor. I've seen advocates for salts, and advocates for not using salts.
It's all just so unclear. Is there real and credible advice as to how to store passwords securely?
Edit: After a fair amount of research, I found an article from ;login: that deals with the topic in quite some depth: http://www.usenix.org/publications/login/2004-06/pdfs/alexander.pdf
","The point of bycrpt is to hog the processor! (Relatively speaking.) It is for this reason that it is ""better"" for password hashing than SHA1/2. (This ""better"" assumes that the password hashes are already in the hands of the attacker or otherwise exposed; while it would nice if it were not the case, even big corporations have had security compromises.)
This requirement was explicitly considered for bcrypt -- if you can only process 1k hashes a second (still, that's a good bit of log-in attempts), how long will that take an attacker to brute-force? A good bit longer than if they could process 10 million hashes a second! The target attack space of a brute-force that is only of the allowed password input, which is often much smaller -- esp. in practice with ""simple passwords"" -- than the space of the hash!
And a salt is very much required to avoid rainbow tables which trade time for space :) A rainbow table would effectively need to be created for each unique salt value. (Thus, the more unique salt values, the more space is required and with enough values this becomes impractical for an attacker.)
Happy coding.
","1251","<php><hash><passwords><md5><salt>","6","3","5","2011-08-02 19:11:32","6879756","14","3","509271","","2011-07-30 17:22:35","2011-07-29 22:34:38",""
"126148","What is the salt in Enterprise Library HashProvider ? (SaltEnabled key)","How is the salt generated in HashProvider in Microsoft Enterprise Library when we set SaltEnabled?
Is it random to new machines? Is it some magic number?
(I know what is a salt, the question is what's the actual value of a/the salt in Enterprise Library HashProvider)
","Edit:
See Microsoft.Practices.EnterpriseLibrary.Security.Cryptography.HashAlgorithmProvider for an example implementation. Hashing steps are:

If SaltEnabled, generate random bytes for the salt length using RNGCryptoServiceProvider.
Append the salt to the plaintext.
Hash the salted plaintext.
Then (this is the important step), append the salt again to the hash.

To compare against hashed text, you must use: 
public bool CompareHash(byte[] plaintext, byte[] hashedtext)

versus rehashing and comparing. If you rehash, a new random salt is generated and you're lost.
CompareHash does the following:

Pulls the non-hashed salt off the hashtext. Remember, it was appended at step 4 above.
Uses that salt to compute a hash for the plaintext.
Compares the new hash with the hashedtext minus salt. If they're the same - true, else false.

Original:
""if salt is enabled on a HashProvider, the provider will generate a random sequence of bytes, that will be added to the hash. If you compare a hashed value with a unhashed value, the salt will be extracted from the hashed value and used to hash the unhashed value, prior to comparison.""
and
""As for decoding as hash-value. this cannot be done. after creating a hash there should be no way to reverse this into the original value.
However, what you can do is compare an unhashed-value with a hashed-value by putting it through the same algorithm and comparing the output.""
From http://www.codeplex.com/entlib/Thread/View.aspx?ThreadId=10284
","1247","<.net><enterprise-library><hash><salt>","3","4","4","2014-12-02 11:34:11","","0","1","","DoniDarkok","2008-10-14 11:20:58","2008-09-24 09:11:10",""
"126148","What is the salt in Enterprise Library HashProvider ? (SaltEnabled key)","How is the salt generated in HashProvider in Microsoft Enterprise Library when we set SaltEnabled?
Is it random to new machines? Is it some magic number?
(I know what is a salt, the question is what's the actual value of a/the salt in Enterprise Library HashProvider)
","Slightly offtopic : 
This salt is used to prevent Rainbow attacks. A rainbow attack is a type of attempt to find out what was the string for which this hash has been computed based on a very large (exhaustive / several gigabytes usually) dictionary of precomputed hashes.
'Uncle' Jeff has a blog entry about this.
Additionally you could look up Wikipedia : 
http://en.wikipedia.org/wiki/Rainbow_table
","1247","<.net><enterprise-library><hash><salt>","3","0","4","2014-12-02 11:34:11","","0","1","","DoniDarkok","2008-10-14 11:20:58","2008-09-24 09:11:10",""
"126148","What is the salt in Enterprise Library HashProvider ? (SaltEnabled key)","How is the salt generated in HashProvider in Microsoft Enterprise Library when we set SaltEnabled?
Is it random to new machines? Is it some magic number?
(I know what is a salt, the question is what's the actual value of a/the salt in Enterprise Library HashProvider)
","So I'm a couple years too late, I guess, but my understanding is that a new random salt value is created every time you create a hash.
","1247","<.net><enterprise-library><hash><salt>","3","0","4","2014-12-02 11:34:11","","0","1","","DoniDarkok","2008-10-14 11:20:58","2008-09-24 09:11:10",""
"126148","What is the salt in Enterprise Library HashProvider ? (SaltEnabled key)","How is the salt generated in HashProvider in Microsoft Enterprise Library when we set SaltEnabled?
Is it random to new machines? Is it some magic number?
(I know what is a salt, the question is what's the actual value of a/the salt in Enterprise Library HashProvider)
","I replied to a similar question regarding the Enterprise Library and the salt value it uses for hashing.
You can view it here: https://stackoverflow.com/a/27247012/869376
The highlights:

The salt is a randomly generated 16 byte array.
It is generated via the CryptographyUtility.GetRandomBytes(16); method in the Microsoft.Practices.EnterpriseLibrary.Security.Cryptography namespace. This eventually calls a C library method called [DllImport(""QCall"", CharSet = CharSet.Unicode)]
private static extern void GetBytes(SafeProvHandle hProv, byte[] randomBytes, int count);
The first 16 bytes of the Base64 encoded string is the salt that was used to hash the original value

","1247","<.net><enterprise-library><hash><salt>","3","0","4","2014-12-02 11:34:11","","0","1","","DoniDarkok","2008-10-14 11:20:58","2008-09-24 09:11:10",""
"47199792","mapping values are not allowed in salt","I got 
        Rendering SLS 'base:nginx' failed: mapping values are not allowed here; line 6
when I run this code in ansible. 
parent_dict = [{'nginx-1.13.2.tar.gz':'https://nginx.org/download/nginx-1.13.2.tar.gz'},{'zlib-1.2.11.tar.gz':'https://www.zlib.net/zlib-1.2.11.tar.gz'}]

{% for dict_item in parent_dict %}
   {% for key, value in dict_item.items() %}
  install-zlib:
    cmd.run:
      - name: |
          cd /tmp
          curl -L  {{ value }} -o {{ key }}
          tar xzf {{ key }}
          rm -rf {{ key }}
      - creates: /tmp/{{ key }}
   {% endfor %}
{% endfor %}

","A few things of note:

The assignment to parent_dict isn't enclosed in Jinja2's delimiters {% and }%.
There is an unnecessary indentation of 2 spaces before the entire block of install-zlib, which may make it an invalid YAML if you have any other YAML content in the same template with a different indentation.
With your loop iterated twice, you will end up with duplicating ID of install-zlib. You should make it install-{{ key }} instead.

The error message ""mapping values are not allowed here"" itself is from the YAML parser, which usually indicates that you are using a colon in unexpected places, which I don't see here, but could be the case since it's apparent that you did not simply copy and paste your code here, or you'd be reporting a different error of parent_dict being undefined due to the issue #1 above.
","1244","<linux><automation><jinja2><devops><salt>","0","1","1","2018-06-20 03:17:15","","0","","","","","2017-11-09 10:44:03",""
"22327409","Vagrant: Port forwarding not working (no service iptables started, provisioned by salt)","This is my Vagrantfile.

VAGRANTFILE_API_VERSION = ""2""                                                 
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|                
config.vm.box = ""precise32""
  config.vm.box_url = ""http://files.vagrantup.com/precise32.box""        
config.vm.hostname = ""myapp.dev"" 
config.vm.network :forwarded_port, guest: 9000, host: 9000, auto_correct: true 
config.vm.network :forwarded_port, guest: 8983, host: 8983, auto_correct: true
config.vm.synced_folder ""salt/roots/"", ""/srv/""
   config.vm.provision :salt do |salt|                                   
salt.minion_config = ""salt/minion""                                         
salt.run_highstate = true                                                  
salt.install-type = ""daily""                                                
salt.verbose = true                                                           

end
  config.vm.provider :virtualbox do |v|                                 
v.customize [""modifyvm"", :id, ""--memory"", 1024]

end  
end

From inside the vagrant machine, curl -L localhost:9000|wc returns a lot of words, lines and whatnot, and the answer is a HTTP proper response.
From outside the vagrant machine, curl -L localhost:9000|wc returns 0 lines (and the others), and curl -L localhost:9000 returns the message Connection reset by peer.
The service iptables is running neither in my local machine, nor in my virtual machine.
the services that are running in my virtual vagrant machine are 

[ + ]  apache2
[ + ]  apparmor
[ + ]  memcached
[ + ]  ntp
[ + ]  rabbitmq-server
[ + ]  ssh
[ + ]  supervisor
(i've only listed the ones with '+' status)

The services running on my local machine are

[ + ]  apparmor
[ + ]  redis-server
[ + ]  saned

If any more info is required, i'll supply it.
[EDIT]
I've also tried netcat-ing
on the virtual machine:

$ nc -l 8978

on the local machine
>$ nc localhost 8978
>$ 

At this point the connection initiated from the local machine to the virtual machine is closed, but the virtual machine keeps listening)
HOWEVER, when i start listening with nc -l 65530 on the local machine, and connect to it with nc 65530, i can send packets.
","Got it:
VirtualBox was caussing the issue:
Apparently i had another box started up, which was also listening on port 9000. When i started up my box, i received a message that instead of forwarding from 9000 -> 9000, it was forwarding from 2201 -> 9000. I simply turned off the other box.
This was happening because of the auto_correct parameter set in the Vagrantfile.
","1240","<ubuntu><virtualbox><vagrant><salt><portforwarding>","2","1","1","2014-05-25 08:48:24","22364280","0","","1037251","","2014-03-11 13:51:02","2014-03-11 13:40:21",""
"22623588","Password hashing with true random salt or username salt plus pepper?","Consider the following two methods:
hashedPassword = hash(trulyRandomSalt + password)

Where hashedPassword and the trulyRandomSalt are stored in the database.
hashedPassword = hash(applicationConstantPepper + uniqueUserName + password)

Where the hashedPassword and uniqueUserName are stored in the database and the applicationConstantPepper is stored in the application config.  Here, the uniqueUserName acts as a salt which are usually email addresses.
I have read this question which has a lot of great information but doesn't address an application constant pepper value and how that will improve using usernames as a salt.
I have always used method one with a 32 bit cryptographically random salt.  However, I've just seen method two used in another application.  The first issue I have with method two is  that it ties the username to the hash so that the username can never change without regenerating the hash.
What are the security issues with method two?
Which would be the best method to use?
","
Consider the following two methods:

The first method is terrible because it allows attackers who get your hashes to use something like oclHashcat to make, typically, trillions or quadrillions of guesses per month, and the second is horrific because those same attackers can not only make the same, typically, trillions or quadrillions of guesses per month, if they get ahold of the applicationConstantPepper and usernames before they get ahold of your passwords, they can precompute guesses while they work on getting your passwords.
Please read How to securely hash passwords?, in which Thomas Pornin states ""For peppering to be really applicable, you need to be in a special setup where there is something more than a PC with disks; you need a HSM.""  Please read the entire article for context, but the gist of it is:

Do use PBKDF2 (also known as RFC2898 and PKCS#5v2), BCrypt, or SCrypt.  
Do not use a single pass of a hash algorithm, regardless of how good your seasonings are.
Do use an 8-16 byte cryptographically random salt.
Use as high an iteration count/work factor as your machine can handle at peak load without causing users to complain.
For PBKDF2 in particular, do not request or use more output bytes than the native size of the hash function.


SHA-1 20 bytes
SHA-224 28 bytes
SHA-256 32 bytes
SHA-384 48 bytes
SHA-512 64 bytes

If you're on a 64-bit system, consider using PBKDF2-HMAC-SHA-384 or PBKDF2-HMAC-SHA-512, which will reduce the margin of superiority an attacker with 2014-vintage GPU's will have over you.

If you like the pepper concept anyway, please read Password Hashing add salt + pepper or is salt enough?, again, Thomas Porrin's answer in particular.
","1234","<security><hash><passwords><salt>","4","1","4","2016-10-17 17:39:16","22624547","0","1","-1","","2017-05-23 11:46:27","2014-03-25 01:05:03",""
"22623588","Password hashing with true random salt or username salt plus pepper?","Consider the following two methods:
hashedPassword = hash(trulyRandomSalt + password)

Where hashedPassword and the trulyRandomSalt are stored in the database.
hashedPassword = hash(applicationConstantPepper + uniqueUserName + password)

Where the hashedPassword and uniqueUserName are stored in the database and the applicationConstantPepper is stored in the application config.  Here, the uniqueUserName acts as a salt which are usually email addresses.
I have read this question which has a lot of great information but doesn't address an application constant pepper value and how that will improve using usernames as a salt.
I have always used method one with a 32 bit cryptographically random salt.  However, I've just seen method two used in another application.  The first issue I have with method two is  that it ties the username to the hash so that the username can never change without regenerating the hash.
What are the security issues with method two?
Which would be the best method to use?
","
Consider the following two methods...

Neither are particularly good....


What are the security issues with method two?

John Steven of OWASP provides one of the better write ups related to password hashing and storage. He takes you through the various threats and explains why things are done in certain ways. See

Password Storage Cheat Sheet
Secure Password Storage Threat Model



Which would be the best method to use?

hashedPassword = hash(applicationConstantPepper + uniqueUserName + password) does not provide semantic security. That is, using the constant pepper and the username, the adversary could tell if an oracle answered with a random answer or the real answer.
hashedPassword = hash(trulyRandomSalt + password) is probably equivalent to or mildly better than the other proposed method. The per-user random salt has a lot of desirable properties. But it can be improved upon, too.

Finally, why reinvent the wheel? Go to Openwall's Portable PHP password hashing (phpass) and use it. Its written by the author of John the Ripper. Solar Designer keeps up with the state of the art in password cracking, so the library is probably very useful in practice.
","1234","<security><hash><passwords><salt>","4","1","4","2016-10-17 17:39:16","22624547","0","1","-1","","2017-05-23 11:46:27","2014-03-25 01:05:03",""
"22623588","Password hashing with true random salt or username salt plus pepper?","Consider the following two methods:
hashedPassword = hash(trulyRandomSalt + password)

Where hashedPassword and the trulyRandomSalt are stored in the database.
hashedPassword = hash(applicationConstantPepper + uniqueUserName + password)

Where the hashedPassword and uniqueUserName are stored in the database and the applicationConstantPepper is stored in the application config.  Here, the uniqueUserName acts as a salt which are usually email addresses.
I have read this question which has a lot of great information but doesn't address an application constant pepper value and how that will improve using usernames as a salt.
I have always used method one with a 32 bit cryptographically random salt.  However, I've just seen method two used in another application.  The first issue I have with method two is  that it ties the username to the hash so that the username can never change without regenerating the hash.
What are the security issues with method two?
Which would be the best method to use?
","In addition to Anti-weakpasswords answer, i would like to point out, that both (salt and pepper) have its purposes. If you apply both, then use a random salt and store it in the database (not a derrived one), afterwards encrypt the password-hash with the server-side key (pepper).
I wrote a tutorial in which the pros and cons with the pepper are explained more indepth. Using a server-side key is an advantage, even if the key cannot be protected entirely.
","1234","<security><hash><passwords><salt>","4","1","4","2016-10-17 17:39:16","22624547","0","1","-1","","2017-05-23 11:46:27","2014-03-25 01:05:03",""
"22623588","Password hashing with true random salt or username salt plus pepper?","Consider the following two methods:
hashedPassword = hash(trulyRandomSalt + password)

Where hashedPassword and the trulyRandomSalt are stored in the database.
hashedPassword = hash(applicationConstantPepper + uniqueUserName + password)

Where the hashedPassword and uniqueUserName are stored in the database and the applicationConstantPepper is stored in the application config.  Here, the uniqueUserName acts as a salt which are usually email addresses.
I have read this question which has a lot of great information but doesn't address an application constant pepper value and how that will improve using usernames as a salt.
I have always used method one with a 32 bit cryptographically random salt.  However, I've just seen method two used in another application.  The first issue I have with method two is  that it ties the username to the hash so that the username can never change without regenerating the hash.
What are the security issues with method two?
Which would be the best method to use?
","Both methods are approximately equal and are fine as long as you're using a good hash (see other answers)
Using a username has the issue that the username can be re-used. This can be a huge problem if you don't include an application specific prefix as the username is probably used many places so there might already be a decent rainbow table for that username.
The ""pepper"" helps alleviate this issue by requiring the rainbow table to be specific to your application. Now it only becomes an issue if a user changes their password frequently, as now the attacker could get all the old passwords by generating one rainbow table, instead of getting only one password per search. In my opinion this is a nearly negligible downside, as

most people don't change their passwords frequently
the attacker would still have to access the hash for each password they want to crack, so for a one time database breach there would be no difference.
Anyone who changes their passwords very frequently is likely not reusing the same passwords elsewhere so the additional passwords acquired would be less useful.

Overall, from an attacker's standpoint there's not much gain from a target using usernames as salt if combined with pepper to make them unique.
","1234","<security><hash><passwords><salt>","4","0","4","2016-10-17 17:39:16","22624547","0","1","-1","","2017-05-23 11:46:27","2014-03-25 01:05:03",""
"26620467","Vagrant: Error Installing 'gulp'","I am running vagrant provision and the last step fails with ""Error installing 'gulp'"". See below.
What does it mean and how to resolve it? No one who ran this vagrant script ever had this issue before. 
Stderr from the command:

stdin: is not a tty
[ERROR   ] Command 'npm install --silent --json --global ""gulp""' failed with return code: 1
[ERROR   ] stdout: 
> v8flags@1.0.1 install /usr/local/lib/node_modules/gulp/node_modules/v8flags
> node fetch.js
[ERROR   ] stderr: sh: 1: node: not found
[ERROR   ] Error installing 'gulp': sh: 1: node: not found

I tried installing manually $ sudo npm install --json --global ""gulp"" but it gives me an error:
> v8flags@1.0.1 install /usr/local/lib/node_modules/gulp/node_modules/v8flags
> node fetch.js

sh: 1: node: not found
npm WARN This failure might be due to the use of legacy binary ""node""
npm WARN For further explanations, please read
/usr/share/doc/nodejs/README.Debian

","npm is the package installer for Node.js, and your error message states that node could not be found.

Is node installed as part of the setup?
Is the path to node correctly set?

","1232","<node.js><ssh><vagrant><gulp><salt>","1","0","2","2014-10-30 19:25:32","","1","","634603","","2014-10-29 15:26:21","2014-10-28 23:46:05",""
"26620467","Vagrant: Error Installing 'gulp'","I am running vagrant provision and the last step fails with ""Error installing 'gulp'"". See below.
What does it mean and how to resolve it? No one who ran this vagrant script ever had this issue before. 
Stderr from the command:

stdin: is not a tty
[ERROR   ] Command 'npm install --silent --json --global ""gulp""' failed with return code: 1
[ERROR   ] stdout: 
> v8flags@1.0.1 install /usr/local/lib/node_modules/gulp/node_modules/v8flags
> node fetch.js
[ERROR   ] stderr: sh: 1: node: not found
[ERROR   ] Error installing 'gulp': sh: 1: node: not found

I tried installing manually $ sudo npm install --json --global ""gulp"" but it gives me an error:
> v8flags@1.0.1 install /usr/local/lib/node_modules/gulp/node_modules/v8flags
> node fetch.js

sh: 1: node: not found
npm WARN This failure might be due to the use of legacy binary ""node""
npm WARN For further explanations, please read
/usr/share/doc/nodejs/README.Debian

","The solution to my issue is to install this package directly on VM and rerun vagrant provision:
sudo apt-get install nodejs-legacy

This is the reference that helped me: Cannot install packages using node package manager in Ubuntu
","1232","<node.js><ssh><vagrant><gulp><salt>","1","0","2","2014-10-30 19:25:32","","1","","634603","","2014-10-29 15:26:21","2014-10-28 23:46:05",""
"7492004","Android: Secure connection with a database","I'm developing an Android app.
When the user pushes a button, I wanna add the unique identifier of the Android device and some other data to a database.
The problem is: How can I prevent that other applications / websites etc. can put data into my database.
I was thinking about a SSL connection, but also other apps could use a SSL connection to connect to my database. The next what came up in my mind was creation an extra field, use a salt and encrypt the unique id + other data + salt and check on the db server if the encrypted information matches.
But in theory is it possible to reverse engineer an Android app, so 'they' could find my salt and also send the encrypted information to my db.
How can I make a php script to save information into a db, and make it only usable for just my own application?
","If this data is per-device, then on first run create a ""cookie"", e.g. a long-enough random ID  that you use on subsequent communication with server. And also use SSL so no one can snoop on the traffic.
To generate random string use UUID.
You could use Settings.Secure.ANDROID_ID, but if someone reverses your protocol, they could create an app that piggybacks the exploit. Unlikely but doable.
OTOH, if data is per user, then you need to create a login system.
","1229","<android><database><security><connection><salt>","0","1","1","2011-09-21 06:12:02","7492084","0","1","709619","","2011-09-21 06:12:02","2011-09-20 21:28:05",""
"23021735","pip install salt returns 'clang: error: unknown argument: '-mno-fused-madd' [-Wunused-command-line-argument-hard-error-in-future]","I'm on OSX. I'm installing Salt by following Salt's official guide here and I've ran into a problem. Running 'sudo pip install salt' gives me the following error.
clang: error: unknown argument: '-mno-fused-madd' [-Wunused-command-line-argument-hard-error-in-future]

I put the entire installation text in this gist. I just want to install salt via pip. Any ideas?
Attempted Solutions used from other overflow questions

I've tried export CFLAGS=-Qunused-arguments and export CPPFLAGS=-Qunused-arguments
in sudo bash
I've tried running sudo pip install salt with ARCHFLAGS=""-Wno-error=unused-command-line-argument-hard-error-in-future""
Updating xcode from 5.1 to 5.1.1, as I read this might be an xcode problem.

All of these return the same exact error. I don't know what to do. I've been hitting my head against this wall for about 2 hours with no resolve. Can someone help please?
","Try putting the environmental variable assignment after sudo:
sudo ARCHFLAGS=""-Wno-error=unused-command-line-argument-hard-error-in-future"" pip install gdal

Or, become root, then do the export:
sudo su - 
export ARCHFLAGS=""-Wno-error=unused-command-line-argument-hard-error-in-future"" install gdal
pip install ...

It appears that the sudo command does not inherit the environmental variables, and they certainly aren't saved across multiple runs with sudo: 
$ export  ARCHFLAGS=""-Wno-error=unused-command-line-argument-hard-error-in-future""
$ sudo printenv | grep ARCHFLAGS
$ 

","1213","<python><xcode><macos><pip><salt>","1","3","1","2014-04-11 21:28:32","23022901","0","","","","","2014-04-11 20:10:30",""
"44453092","what's the big difference between execution modules and state modules","Recently, I'm learning salt from its doc. However, I'm quite confused about execution modules and state modules. Why there are two types of module? Why they can't unify? If we have just one type of module that can be used both on command line and in sls file, isn't it simpler and better?
","In short:

Execution modules: execute a task
States module: try to get to a certain state/configuration.

Execution modules:
They are designed to perform tasks on a minion. For example: mysql.query will query a specified database. The execution module does not check if the database needs to be queried or not. It just executes its task.
Have a look at the complete list of modules and you will see that they will just execute a task for you. https://docs.saltstack.com/en/latest/ref/modules/all/index.html
States module:
It's called THE states module.
The states module is a module too. But it's a special one. With the states module you can create states (the sls files under /srv/salt ) for your Minions.
You could for example create a state that ensures the Minion has a web server configured for www.example.com. 
After you have created your state you can apply it with the states module:
salt <minion> state.apply example_webserver
The example_webserver state specifies what the Minion needs to have. If the Minion is already in the correct state, it does nothing. If the Minion is not in the correct state it will try to get there.
The states module can be found here: https://docs.saltstack.com/en/latest/ref/states/all/salt.states.module.html
","1208","<salt><salt-stack>","5","11","1","2018-04-14 09:58:37","44455101","2","1","2869881","","2018-04-14 09:58:37","2017-06-09 08:37:26",""
"9560348","Android obfuscation hide salt value","When following the Application Licensing document on the developer page for Android to use ServerManagedPolicy for licensing, then the section Implementing an Obfuscator says to declare a private static final array of 20 with random bytes called SALT. This is passed to the constructor of AESObfuscator and the description says it's ""an array of random bytes to use for each (un)obfuscation"". I am new to this, but I guess that is for obfuscating preference values.
When later I obfuscate the code itself using the ProGuard option delivered with the Android SDK for Eclipse by exporting the apk I get the final apk. But using a reverse engineer application like apktool on my apk reveals the SALT array in plain bytes. Now, like I said I am new to this and my question might seem a bit naive... but isn't that a bad thing? Shouldn't the byte array be a bit more hidden?
","A salt value is not a secret, so it's not really a problem if it is disclosed. That said, the obfuscator mangles code (mostly variable and method names), not values. So anything you have stored as is (strings, byte arrays, your obfuscation key) will be recoverable by decompilation. 
Obfuscating makes it a bit harder to find, but if you are purposefully looking for a random-looking 16-byte array or a 128-bit key, it not too hard to find. 
BTW, that example doesn't really promote best practices -- you should use a randomly generated 
new salt value for every encryption operation, and store it along with the encrypted data. Not hard-code it your encryption code and use it every time. Then again, that example assumes you will be encrypting (for obfuscation purposes) a single preference only. 
","1205","<android><obfuscation><salt>","1","3","1","2012-03-05 03:48:49","9561415","0","","","","","2012-03-05 00:42:56",""
"25981881","Code blocks in Jinja templates in salt","I have a block that looks like this:
{% if grains['function'] == 'production' %}
{% set conf_src = ""prod.yml.ninja"" %}
{% elif grains['function'] == 'staging'] %}
{% set conf_src = ""staging.yml.ninja"" %}
{% elif grains['function'] == 'dev'] %}
{% set conf_src = ""dev.yml.ninja"" %}
{% endif %}

Is there any way to do something like
{% 
    if grains['function'] == 'production'
        set conf_src = ""prod.yml.ninja""
    elif grains['function'] == 'staging'
        set conf_src = ""staging.yml.ninja""
    elif grains['function'] == 'dev'
        set conf_src = ""dev.yml.ninja""
    endif
%}

So I can just open the block once?
","You can define a look-up dictionary, and only include non-trivial cases:
html = '''
{% set lookup = dict(production='prod') %}
{% set conf_src = lookup.get(grains['function'], grains['function']) 
                + '.yml.ninja' %}
'''

Here, since dev and staging are not modified, you may use dict.get fall-back argument.
","1205","<python><salt><jinja2>","1","1","1","2014-09-22 19:51:32","","0","","","","","2014-09-22 19:37:22",""
"10920365","Login System Hash Salt","I am rewriting a PHP Login system and I just faced this
function createSalt()
{
    $string = md5(uniqid(rand(), true));
    return substr($string, 0, 3);
}
$salt = createSalt();
$hash = hash('sha256', $salt . $hash);

Actualy I never worked with salting before, I searched a bit and found it useful.
But my answer is, Is this a good way to work with salt?
Wouldn't $string = sha1(uniqid(mt_rand(), true)) be better?
And what about returning only 3 characters of the hash? I really don't get it.
What you think?
","I don't agree with the given function createSalt() - mainly for the same reasons as you.
My approach to this would be
define(SALT_LENGTH,32);

function createSalt()
{
  $string='';
  for ($i=0;$i<SALT_LENGTH;$i++) $string.=chr(rand(0,255));
  return $string;
}

A good salt is a random byte sequence - no MD5 or SHA1 makes any sense, as there is nothing to hash!
","1204","<php><security><login><hash><salt>","0","0","4","2012-08-15 01:05:26","10922592","1","","","","","2012-06-06 18:55:36",""
"10920365","Login System Hash Salt","I am rewriting a PHP Login system and I just faced this
function createSalt()
{
    $string = md5(uniqid(rand(), true));
    return substr($string, 0, 3);
}
$salt = createSalt();
$hash = hash('sha256', $salt . $hash);

Actualy I never worked with salting before, I searched a bit and found it useful.
But my answer is, Is this a good way to work with salt?
Wouldn't $string = sha1(uniqid(mt_rand(), true)) be better?
And what about returning only 3 characters of the hash? I really don't get it.
What you think?
","Consider using PHP's crypt() instead of reinventing the wheel. It is specifically designed for password hashing, and offers hash algorithms suited for that purpose.
","1204","<php><security><login><hash><salt>","0","3","4","2012-08-15 01:05:26","10922592","1","","","","","2012-06-06 18:55:36",""
"10920365","Login System Hash Salt","I am rewriting a PHP Login system and I just faced this
function createSalt()
{
    $string = md5(uniqid(rand(), true));
    return substr($string, 0, 3);
}
$salt = createSalt();
$hash = hash('sha256', $salt . $hash);

Actualy I never worked with salting before, I searched a bit and found it useful.
But my answer is, Is this a good way to work with salt?
Wouldn't $string = sha1(uniqid(mt_rand(), true)) be better?
And what about returning only 3 characters of the hash? I really don't get it.
What you think?
","I prefer sha1 or sha256, md5 is super-outdated, the sha-functions are way better. But this is my opinion, choose what you want.
What is really important in this case is the salt. A salt is always stored in plaintext together with the hash and is used to improve the length of a password (if you want to hash the password, might be something else of course) to prevent attacks based on rainbow/lookup tables. This is no protection against cracking the password by using bruteforce (which works quite well against md5, so use sha256 which is harder to crack).
Therefore it is totally unimportant if you use 32 random chars for the hash, or something like md5(mt_rand()) - important is the length. I would use something like
$hash = md5(mt_rand()) . md5(mt_rand());

md5() results in 32 bytes string, based on a random number (mt_rand() is better then uniqueid()). With this simpel line you get a very ""strong"" hash which should secure every password against rainbow tables.
","1204","<php><security><login><hash><salt>","0","1","4","2012-08-15 01:05:26","10922592","1","","","","","2012-06-06 18:55:36",""
"10920365","Login System Hash Salt","I am rewriting a PHP Login system and I just faced this
function createSalt()
{
    $string = md5(uniqid(rand(), true));
    return substr($string, 0, 3);
}
$salt = createSalt();
$hash = hash('sha256', $salt . $hash);

Actualy I never worked with salting before, I searched a bit and found it useful.
But my answer is, Is this a good way to work with salt?
Wouldn't $string = sha1(uniqid(mt_rand(), true)) be better?
And what about returning only 3 characters of the hash? I really don't get it.
What you think?
","I no master PHP programmer but I've been working on the same hash script for a login system. 
Im storing it on GitHub - https://github.com/revitalagency/PHP5-Salt-Super-Admin
I created my hash using...
hash_hmac('sha256', $_POST['pass'], GLOBAL_SALT);

GLOBAL_SALT is defined in a config file not in the DB for extra protection.
","1204","<php><security><login><hash><salt>","0","0","4","2012-08-15 01:05:26","10922592","1","","","","","2012-06-06 18:55:36",""
"24862499","Correct way of creating salted hash password","I am new to storing passwords on databases and from what I read I have created a simple php script below
<?php
  $salt =  openssl_random_pseudo_bytes (16);
  $password = ""test"";
  $hash = hash (""sha512"" , $salt . $password);

  echo $hash;
?>


Am I doing this correctly?
Should the salt be stored in databases as byte datatype?
Should the final hash be stored at String datatype in database?

","If you are running (PHP 5 >= 5.5.0) then you can take advantage of the built-in php password hashing functionality.

http://php.net/manual/en/function.password-hash.php
http://php.net/manual/en/function.password-verify.php 

Simple usage:
$options = [
    'cost' => 11,
    'salt' => mcrypt_create_iv(22, MCRYPT_DEV_URANDOM), // or your own salt here
];

$pass_hash = password_hash(""helloworld"", PASSWORD_BCRYPT, $options);

if (password_verify('helloworld', $pass_hash)) {
    echo 'Password is valid!';
} else {
    echo 'Invalid password.';
}

","1194","<php><security><hash><salt><saltedhash>","2","1","3","2014-07-21 11:16:20","24863744","5","1","","","","2014-07-21 10:07:00",""
"24862499","Correct way of creating salted hash password","I am new to storing passwords on databases and from what I read I have created a simple php script below
<?php
  $salt =  openssl_random_pseudo_bytes (16);
  $password = ""test"";
  $hash = hash (""sha512"" , $salt . $password);

  echo $hash;
?>


Am I doing this correctly?
Should the salt be stored in databases as byte datatype?
Should the final hash be stored at String datatype in database?

","normally I stored the salt with hashed password. I have my own format to recognize the salt form the hashed password. for example, the hashed password is 2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824, and the salt is aaabbb. I append salt to hashed password like 2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824aaabbb. So I can recognize the last 6 word is salt for this hashed password. Even the db has been hacked, they still didn't know the salt and the real password.
","1194","<php><security><hash><salt><saltedhash>","2","-2","3","2014-07-21 11:16:20","24863744","5","1","","","","2014-07-21 10:07:00",""
"24862499","Correct way of creating salted hash password","I am new to storing passwords on databases and from what I read I have created a simple php script below
<?php
  $salt =  openssl_random_pseudo_bytes (16);
  $password = ""test"";
  $hash = hash (""sha512"" , $salt . $password);

  echo $hash;
?>


Am I doing this correctly?
Should the salt be stored in databases as byte datatype?
Should the final hash be stored at String datatype in database?

","The SHA* algorithms are not appropriate to hash passwords, because they are ways too fast, and therefore can be brute-forced too fast. Instead one should use a slow algorithm like BCrypt or PBKDF2 with a cost factor, which controls the necessary time.
PHP supports the BCrypt algorithm with the new function password_hash(). There also exists a compatibility pack for earlier PHP versions.
// Hash a new password for storing in the database.
// The function automatically generates a cryptographically safe salt.
$hashToStoreInDb = password_hash($password, PASSWORD_BCRYPT);

// Check if the hash of the entered login password, matches the stored hash.
// The salt and the cost factor will be extracted from $existingHashFromDb.
$isPasswordCorrect = password_verify($password, $existingHashFromDb);

It is recommended that you do not pass your own salt, instead let the function create a cryptographically safe salt from the random source of the operating system.
The salt will be included in the resulting hash-value, so you don't have to store it separately. Just create a 60 character string field in your database and store the hash-value. The function password_verify() will extract the used salt from the stored hash-value. For more information you can have a look at my tutorial about storing passwords.
","1194","<php><security><hash><salt><saltedhash>","2","1","3","2014-07-21 11:16:20","24863744","5","1","","","","2014-07-21 10:07:00",""
"7848147","AES Encryption using IV, Salt, RFC2898 iteration, Key Generation using SHA1 algorithm in iPhone","I have a problem related to AES Encryption. The problem is I need to encrypt the string using AES encryption technique with Intialization Vector, Salt, RFC2898 iteration and Generate a key using sha1 algorithm.
I used this code 
+(NSString *)stringToSha1:(NSString *)str{
const char *s = [str cStringUsingEncoding:NSASCIIStringEncoding];
NSData *keyData = [NSData dataWithBytes:s length:strlen(s)];

// This is the destination
uint8_t digest[CC_SHA1_DIGEST_LENGTH] = {0};
// This one function does an unkeyed SHA1 hash of your hash data
CC_SHA1(keyData.bytes, keyData.length, digest);

// Now convert to NSData structure to make it usable again
NSData *out = [NSData dataWithBytes:digest length:CC_SHA1_DIGEST_LENGTH];
// description converts to hex but puts <> around it and spaces every 4 bytes
NSString *hash = [out description];
hash = [hash stringByReplacingOccurrencesOfString:@"" "" withString:@""""];
hash = [hash stringByReplacingOccurrencesOfString:@""<"" withString:@""""];
hash = [hash stringByReplacingOccurrencesOfString:@"">"" withString:@""""];

NSLog(@""Hash is %@ for string %@"", hash, str);

return hash;
}

For sha1 key generation but it produces totally different as this technique do in .net and Android.
Android and .net already have classes and library to do this and i left alone so how I can do it in iPhone.
","This should be what you need
+ (NSData *)sha1HashFromString:(NSString *)stringToHash {
    NSData *stringData = [stringToHash dataUsingEncoding:NSASCIIStringEncoding];
    uint8_t digest[CC_SHA1_DIGEST_LENGTH] = {0};
    CC_SHA1([stringData bytes], [stringData length], digest);
    NSData *hashedData = [NSData dataWithBytes:digest length:CC_SHA1_DIGEST_LENGTH];
    return [hashedData autorelease];
}

","1194","<iphone><aes><sha1><salt><initialization-vector>","2","0","1","2017-09-05 12:55:42","","1","","472495","","2017-09-05 12:55:42","2011-10-21 10:29:13",""
"10956989","PHP SECURITY dynamic generated user hash password on every login or hash system changes","I'm knowing this site http://www.openwall.com/phpass/, but idea is on salt on mainly system.
Example, ZEND use system('uname -a') and it's hashed to md5() for using ROW LEVEL user SALT encryption. This is combination of user password, user login name/email address and server name as sha1/md5/...
But, my idea is generate DYNAMIC SALT instead STATIC SALT such as system('uname -a'). Example, every time when user is logged in, SALT has been changed but not user password.
For more security reasons, i'm needing dynamicaly changes salt on database or external file on daily basis or using third-party such as checking data from another server for salting?
What are best method for securing user sensible data on users database table and currents login. Cookie also is very bad secure options for me. It's must works such as PayPal API Tokenize and user id...
I'm using current:

salt from every user
salt from system hashed
hashed combination of user password, user salt and system salt
SHA-512 crypt() or bcrpyt() class
dynamically salt ? idea?

","Changing the salt doesn't improve anything.
The point is: you always need to store salt and hash together somewhere because when you compare the password input with the hash you need to hash the input - obvious, right?
So this is the point: even if you change the salt after every login and do some weird re-hashing of the password it changes nothing because as soon as an attacker gets the database he has both hash and salt (if it's stored there together, which is necessary if you always use a different salt for each user which is something you should do).
A far more better way is extending the hashing by using 1000-10000 rounds of hashing as well as a long salt (you can easy use 512 bytes for the salt). These are better tip's than doing some re-hashing.
But anyway: if you really want to improve your PHP application you should focus on avoiding security issues like SQL injection, XSS, CSRF, RFI, LFI, file disclosure, RCE, etc - if an attacker gets access to the server he can simply backdoor the login script to send him an e-mail containing the plaintext credentials every time someone tries to login. (Well, you can also avoid this if you use a challenge-response authentication implemented in javascript like CRAM-MD5 http://en.wikipedia.org/wiki/Challenge-response_authentication or using RSA (also implemented in JS) to securely send login data).
","1190","<php><security><model-view-controller><passwords><salt>","-1","0","3","2012-06-09 10:04:55","","3","","","","","2012-06-08 23:05:20",""
"10956989","PHP SECURITY dynamic generated user hash password on every login or hash system changes","I'm knowing this site http://www.openwall.com/phpass/, but idea is on salt on mainly system.
Example, ZEND use system('uname -a') and it's hashed to md5() for using ROW LEVEL user SALT encryption. This is combination of user password, user login name/email address and server name as sha1/md5/...
But, my idea is generate DYNAMIC SALT instead STATIC SALT such as system('uname -a'). Example, every time when user is logged in, SALT has been changed but not user password.
For more security reasons, i'm needing dynamicaly changes salt on database or external file on daily basis or using third-party such as checking data from another server for salting?
What are best method for securing user sensible data on users database table and currents login. Cookie also is very bad secure options for me. It's must works such as PayPal API Tokenize and user id...
I'm using current:

salt from every user
salt from system hashed
hashed combination of user password, user salt and system salt
SHA-512 crypt() or bcrpyt() class
dynamically salt ? idea?

","Salt is only used to prevent against precomputation attacks, such as Rainbow Tables. Thus if someone wants to bruteforce the hashes, they actually have to compute them one at a time at runtime. (and not merely do a lookup in a database of pre-computed hashed values)
It's not really clear what the problem is that you're trying to solve. You just say:
""For more security reasons, i'm needing dynamicaly changes salt""
If that problem is precomputation attacks, then just have a normal salt. If it is not a precomputation attack, then salt is almost surely the wrong solution.
","1190","<php><security><model-view-controller><passwords><salt>","-1","0","3","2012-06-09 10:04:55","","3","","","","","2012-06-08 23:05:20",""
"10956989","PHP SECURITY dynamic generated user hash password on every login or hash system changes","I'm knowing this site http://www.openwall.com/phpass/, but idea is on salt on mainly system.
Example, ZEND use system('uname -a') and it's hashed to md5() for using ROW LEVEL user SALT encryption. This is combination of user password, user login name/email address and server name as sha1/md5/...
But, my idea is generate DYNAMIC SALT instead STATIC SALT such as system('uname -a'). Example, every time when user is logged in, SALT has been changed but not user password.
For more security reasons, i'm needing dynamicaly changes salt on database or external file on daily basis or using third-party such as checking data from another server for salting?
What are best method for securing user sensible data on users database table and currents login. Cookie also is very bad secure options for me. It's must works such as PayPal API Tokenize and user id...
I'm using current:

salt from every user
salt from system hashed
hashed combination of user password, user salt and system salt
SHA-512 crypt() or bcrpyt() class
dynamically salt ? idea?

","You are doing it wrong.
I think you are missing a key fact about re-hashing the password. To do it, you would have to store it in a recoverable form. Thus, creating even greater security risk, if system is compromised.
Here is what i would do:

make passwords expire in 60 days (or, you can choose some other number, just not too often). 
each time user sets new password, you generate a random salt 
build hash with crypt(), using CRYPT_SHA512 or CRYPT_BLOWFISH hashing algorithms
set a bit higher amount of rounds .. 20'000 should be enough
store the whole result that crypt() returns in the hash field in db.

Also you might benefit for reading: Properly Salting Passwords, The Case Against Pepper.
","1190","<php><security><model-view-controller><passwords><salt>","-1","1","3","2012-06-09 10:04:55","","3","","","","","2012-06-08 23:05:20",""
"16027983","Junit test case","public static String generateSaltString() {
    SecureRandom random = new SecureRandom();
    byte[] salt = random.generateSeed(12);

    return byteToBase64(salt);
}

Wondering how to write test case using Junit for this method.
Any suggestion?
","I can think of two test cases -

Check that the return is not null.
Check that the return is base64 if you are expecting it to be base64. Although it does not matter if you are expecting any random String.

","1189","<java><junit><salt>","4","0","4","2013-04-17 03:02:11","","2","0","818557","","2013-04-16 03:03:31","2013-04-16 02:50:58",""
"16027983","Junit test case","public static String generateSaltString() {
    SecureRandom random = new SecureRandom();
    byte[] salt = random.generateSeed(12);

    return byteToBase64(salt);
}

Wondering how to write test case using Junit for this method.
Any suggestion?
","First thing is that new SecureRandom() can be potentially very slow so you might want to cache it.
Look at this answer and this one too.
I would refactor your code as follows
public class DoRandomStuff {

private RandomUtil randomUtil;

public DoRandomStuff(RandomUtil randomUtil) {
    this.randomUtil = randomUtil;
}

public String generateSaltString() {
    byte[] salt = randomUtil.generateSeed(12);
    return byteToBase64(salt);
}

public String byteToBase64(byte[] salt) {
    // Do salt generation logic here
    return null;
}

generateSeed looks like a utility method call so it can go into a class RandomUtil which looks like this
class RandomUtil {
    private SecureRandom random = new SecureRandom();
    public byte[] generateSeed(int seed) {
        return random.generateSeed(seed);
    }
}

Now your test class for DoRandomStuff would be easy to write. Inject a mocked randomUtil using some testing framework like Mockito. Make the mockedRandomUtil.generateSeed(int) method return a fixed number. Your test is really for checking whether byteToBase64() method is doing what its supposed to do. Now you have a deterministic number for your test case. You can give all kinds of numbers which can be generated by SecureRandom in your test class as separate test cases to check byteToBase64() result.
As a plus your random number generation code is now decoupled from your base64 code.
Hope it helped.
","1189","<java><junit><salt>","4","3","4","2013-04-17 03:02:11","","2","0","818557","","2013-04-16 03:03:31","2013-04-16 02:50:58",""
"16027983","Junit test case","public static String generateSaltString() {
    SecureRandom random = new SecureRandom();
    byte[] salt = random.generateSeed(12);

    return byteToBase64(salt);
}

Wondering how to write test case using Junit for this method.
Any suggestion?
","i would test if the result is not null and then call the method several times and compare the results to show that each call returns a different value.
But remember: This says nothing about the quality of the randomness of your results!
@Test
public void testGenerateSaltString() {
    String salt1 = YourClass.generateSaltString();
    String salt2 = YourClass.generateSaltString();
    String salt3 = YourClass.generateSaltString();
    String salt4 = YourClass.generateSaltString();

    assertNotNull(salt1);
    assertNotNull(salt2);
    assertNotNull(salt3);
    assertNotNull(salt4);

    assertNotEqual(salt1, salt2);
    assertNotEqual(salt1, salt3);
    assertNotEqual(salt1, salt4);

    assertNotEqual(salt2, salt3);
    assertNotEqual(salt2, salt4);

    assertNotEqual(salt3, salt4);
}

Considering GaborSch's comments i thought of a somewhat fuzzy implementation of the test since it is possible - though unlikely - that two calls of the function will generate the same salt:
@Test
public void testGenerateSaltString() {
    String salt1;
    String salt2;
    int differenceCount = 0;

    for(int i = 0; i < 1000; i++ ) {
        String salt1 = YourClass.generateSaltString();
        String salt2 = YourClass.generateSaltString();

        // null is still inacceptable
        assertNotNull(salt1);
        assertNotNull(salt2);

        if(!salt1.equalsIgnoreCase(salt2)) {
            differenceCount++;
        }
    }

    // check if at least at 95% of all tries resultet in different strings
    // change this value according to your needs
    assertTrue(differenceCount >= 950);
}

","1189","<java><junit><salt>","4","1","4","2013-04-17 03:02:11","","2","0","818557","","2013-04-16 03:03:31","2013-04-16 02:50:58",""
"16027983","Junit test case","public static String generateSaltString() {
    SecureRandom random = new SecureRandom();
    byte[] salt = random.generateSeed(12);

    return byteToBase64(salt);
}

Wondering how to write test case using Junit for this method.
Any suggestion?
","You can check 3 things:

If the result is null or not
If the result meets the formal requirements (is a Base64 String)
If the result is random enough

For example, the following code could work. I generate 100 different random salts, and allow maximum 1 match among them.
@Test
public void testGenerateSaltString() {

    Set<String> salts = new HashSet<String>();
    int countSame = 0;
    BASE64Decoder decoder = new BASE64Decoder();

    for(int i=0; i<100; i++) {
        String salt = YourClass.generateSaltString();
        assertNotNull(salt);
        try {
            decoder.decodeBuffer(encodedBytes);
       } catch (Exception e) {
           fail(""Not Base64"");
       }
       if (salts.contains(salt)) {
            sameCount++;
       }
       salts.add(salt);
    }

    assertTrue(countSame <= 1);
}

","1189","<java><junit><salt>","4","0","4","2013-04-17 03:02:11","","2","0","818557","","2013-04-16 03:03:31","2013-04-16 02:50:58",""
"1464267","Salted hashes and password histories","Wondering whether it matters if a salt is unique for a single given user each time the password is changed, or whether it's not a big deal to reuse the same salt each time.
I currently generate a new random string as the salt each time a given user updates the password. This way each time the user has a new password their is also a salt change. It's easy to do, so why not.
Well... here's why. I need to store the previous X passwords to ensure a password is not reused. In the old days (the last time I wrote code for this), I could just store previous MD5 hashes, and compare new ones to that list. Well, now that I am using salted hashes where the salt is unique each time, those comparisons are no longer possible as the previous salts are no longer known.
To make that system work, I have two choices: store a history of the salts in addition to the final hashes, or reuse the same salt for any one given user with each password update. Either of these would allow me to build values that could be compared to a history.
The latter is less work, but does it lose any strength? From a practical standpoint, I don't see that it does. Thought I'd get a second opinion here. Thanks.
To keep the question ""answerable"" -- would reusing the same salt for any one user have an acceptably minimal reduction of protection in order to maintain a searchable password history (to prevent pswd recycling)?
","Reusing the same salt means that if a user is explicitly targeted by a hacker, they could produce a ""password to hash"" dictionary using ""the user's salt"" - so that even if the user changes their password, the hacker will still immediately know the new password without any extra work.
I'd use a different salt each time.
As for storing the MD5 hash plus salt - presumably you're already storing the salt + hash, in order to validate the user's current password. Why can't you just keep that exact same information for historical checks? That way you can use one piece of code to do the password checking, instead of separating out the current and historical paths. They're doing the same thing, so it makes sense for them to use the same code.
EDIT: To explain what I mean, consider a 4 character salt, prepended to the password... and for the sake of argument, imagine that someone only uses A-Z, a-z and 0-9 in their password (and the salt).
If you don't know the salt ahead of time (when preparing a dictionary attack) then in order to prepare a dictionary for all 8 character ""human"" passwords, you need to hash 62^12 concatenated passwords. If, however, you always know what the first 4 characters of the concatenated password will be (because you know the salt ahead of time) then you can get away with only hashing 62^8 values - all those beginning with the salt. It renders the salt useless against that particular attack.
This only works with a targeted user of course - and only if the attacker can get at the hash list both before and after the password change. It basically makes changing the password less effective as a security measure.
","1183","<passwords><history><salt>","4","6","4","2009-09-23 07:19:23","","0","1","","","","2009-09-23 06:29:28",""
"1464267","Salted hashes and password histories","Wondering whether it matters if a salt is unique for a single given user each time the password is changed, or whether it's not a big deal to reuse the same salt each time.
I currently generate a new random string as the salt each time a given user updates the password. This way each time the user has a new password their is also a salt change. It's easy to do, so why not.
Well... here's why. I need to store the previous X passwords to ensure a password is not reused. In the old days (the last time I wrote code for this), I could just store previous MD5 hashes, and compare new ones to that list. Well, now that I am using salted hashes where the salt is unique each time, those comparisons are no longer possible as the previous salts are no longer known.
To make that system work, I have two choices: store a history of the salts in addition to the final hashes, or reuse the same salt for any one given user with each password update. Either of these would allow me to build values that could be compared to a history.
The latter is less work, but does it lose any strength? From a practical standpoint, I don't see that it does. Thought I'd get a second opinion here. Thanks.
To keep the question ""answerable"" -- would reusing the same salt for any one user have an acceptably minimal reduction of protection in order to maintain a searchable password history (to prevent pswd recycling)?
","Another reason for using salt in password hashes is to hide the fact that two users use the same password (not unusual). With different hashes an attacker won't see that.
","1183","<passwords><history><salt>","4","1","4","2009-09-23 07:19:23","","0","1","","","","2009-09-23 06:29:28",""
"1464267","Salted hashes and password histories","Wondering whether it matters if a salt is unique for a single given user each time the password is changed, or whether it's not a big deal to reuse the same salt each time.
I currently generate a new random string as the salt each time a given user updates the password. This way each time the user has a new password their is also a salt change. It's easy to do, so why not.
Well... here's why. I need to store the previous X passwords to ensure a password is not reused. In the old days (the last time I wrote code for this), I could just store previous MD5 hashes, and compare new ones to that list. Well, now that I am using salted hashes where the salt is unique each time, those comparisons are no longer possible as the previous salts are no longer known.
To make that system work, I have two choices: store a history of the salts in addition to the final hashes, or reuse the same salt for any one given user with each password update. Either of these would allow me to build values that could be compared to a history.
The latter is less work, but does it lose any strength? From a practical standpoint, I don't see that it does. Thought I'd get a second opinion here. Thanks.
To keep the question ""answerable"" -- would reusing the same salt for any one user have an acceptably minimal reduction of protection in order to maintain a searchable password history (to prevent pswd recycling)?
","Firstly, stop using MD5 (if you are using it), and use SHA-2, MD5, SHA-0, and SHA-1, are all dead hashes.
-- Edit:
I now agree with Jon Skeet, and suggest you consider generating a new salt with each password change. It covers a small case where the attacker may get the salt+hash, then not be able to gain access again, but will still allow him (with some guessing of how you combine them), to calculate what the hashes could be for all future passwords. It's very small, and is not so important, because the password sizes will need to be significantly small (say, 8 chars) for even calculating them all offline to be practical. Yet it exists.
Secondly, to consider whether or not it matters, we need to think about the purpose of salts. It is to prevent offline attacks against someone who has a complete listing of only the passwords.
On this basis, if the salt is equally ""difficult"" to obtain before and after password changes, I see no use a new salt (it's just as at-risk as it was before). It adds additional complexity, and in implementing complexity is where most security problems occur.
","1183","<passwords><history><salt>","4","0","4","2009-09-23 07:19:23","","0","1","","","","2009-09-23 06:29:28",""
"1464267","Salted hashes and password histories","Wondering whether it matters if a salt is unique for a single given user each time the password is changed, or whether it's not a big deal to reuse the same salt each time.
I currently generate a new random string as the salt each time a given user updates the password. This way each time the user has a new password their is also a salt change. It's easy to do, so why not.
Well... here's why. I need to store the previous X passwords to ensure a password is not reused. In the old days (the last time I wrote code for this), I could just store previous MD5 hashes, and compare new ones to that list. Well, now that I am using salted hashes where the salt is unique each time, those comparisons are no longer possible as the previous salts are no longer known.
To make that system work, I have two choices: store a history of the salts in addition to the final hashes, or reuse the same salt for any one given user with each password update. Either of these would allow me to build values that could be compared to a history.
The latter is less work, but does it lose any strength? From a practical standpoint, I don't see that it does. Thought I'd get a second opinion here. Thanks.
To keep the question ""answerable"" -- would reusing the same salt for any one user have an acceptably minimal reduction of protection in order to maintain a searchable password history (to prevent pswd recycling)?
","I might be being incredibly dim here, but, where would you store the salt that would be inaccessable to someone with enough access to get the hashed password.
","1183","<passwords><history><salt>","4","0","4","2009-09-23 07:19:23","","0","1","","","","2009-09-23 06:29:28",""
"12537543","PHP salt and hash password not matching","I've created a page that generates a 40-character salt, then takes the inputted password and creates a hash using this PHP code and inserts the salt and hashed password into the database using (this is just the relevant line):
$hashedpassword = sha1($password . $salt);

Then in the login process, I use the inputted password and retrieve the salt from the db to create the has using the same line of code (again, this is just the relevant line):
$hashedpassword = sha1($storedPassword . $storedSalt);

But it doesn't match the hashed password stored, so to see if there was an error, I ""echoed"" the information so I could read what was happening:
$storedSalt = $row_rsSaltLookup['salt'];
$storedPassword = $row_rsSaltLookup['password'];
$storedHashedPassword = $row_rsSaltLookup['hashedpassword'];
    //use the stored salt to hash the user's submitted password
$hashedpassword = sha1($storedPassword . $storedSalt);
echo ""Salt: "" . $storedSalt . ""<br/>"";
echo ""Stored Password: "" . $storedPassword . ""<br/>"";
echo ""Stored Hashed Password: "" . $storedHashedPassword . ""<br/>"";
echo ""Pre-hash: "" . $storedPassword . $storedSalt . ""<br/>"";
echo ""Hashed Password: "" . $hashedpassword . ""<br/>"";
echo ""re-Hashed Password: "" . sha1($storedPassword . $storedSalt) . ""<br/>"";
echo ""re-Hashed Password 2: "" . sha1($storedPassword . $storedSalt) . ""<br/>"";
if($storedHashedPassword != $hashedpassword) {
     echo ""NO MATCH"";
}else{
     echo ""MATCH"";
}
exit();

And I get this as a result:
Salt: 4039505cc4efae2
Stored Password: ujwiervdhyf
Stored Hashed Password: aa27c197dfd88cd2f0d46b84d259016a15bd3954
Pre-hash: ujwiervdhyf4039505cc4efae2
Hashed Password: b06193ed26617c449902ac813376cf0c33bec3d1
re-Hashed Password: b06193ed26617c449902ac813376cf0c33bec3d1
re-Hashed Password 2: b06193ed26617c449902ac813376cf0c33bec3d1
NO MATCH

In this example, the ""salt"" is generated and put together with the password (Stored Password) from when the account is created and hashed (Stored Hashed Password).
When I go to login, I get the salt from the db and add it to the password on the login, then hash that and compare it to the stored hashed password, which should be the same?
So I'm wondering where I went wrong because I can't seem to figure out why the hashes don't match.
","If
$hashedpassword = sha1($storedPassword . $storedSalt);
                       ^^^^^^^^^^^^^^^

is the hash you stored when the account was first created, then you're doing this wrong. You're hashing a hash, which will not work. It should be
$hash_of_attempted_password = sha1($password_from_login_form . $storedSalt);
if ($hash_of_attemped_password == $hash_of_original_password) {
   ... it's a match ...
}

","1163","<php><hash><salt>","-1","2","1","2012-09-22 01:45:24","12538000","4","","366685","","2012-09-22 01:45:24","2012-09-21 20:10:33",""
"18451182","C# MD5 hashing needs to match PHP MD5 hashing (with salt)","I have a string that needs to be hashed using a salt in C# and match what it would in PHP. The C# code is as follows:
        string stringToHash = ""123"";
        string saltToUse = ""321"";
        byte[] stringBytes = ASCIIEncoding.ASCII.GetBytes(stringToHash);
        byte[] saltBytes = ASCIIEncoding.ASCII.GetBytes(saltToUse);

        var hmacMD5 = new HMACMD5(saltBytes);
        var saltedHash = hmacMD5.ComputeHash(stringBytes);
        byte[] hashedBytesNoSalt = MD5CryptoServiceProvider.Create().ComputeHash(stringBytes);

        string hashedString = BitConverter.ToString(hashedBytesNoSalt).Replace(""-"", """").ToLower();
        string saltedString = BitConverter.ToString(saltedHash).Replace(""-"", """").ToLower();

The PHP code to test if the C# is outputting correctly is:
<?php echo md5('123'.'321'); ?>

The C# outputs the correct UNSALTED MD5 hash, which is 202cb962ac59075b964b07152d234b70. However, when I try to salt using C# I get 900011ae860f471561023fba6cc25df6 and with PHP I get c8837b23ff8aaa8a2dde915473ce0991.
I am not sure why it is doing this or if this is even the correct way. The thing to remember is the C# needs to output to what the PHP outputs to.
","The C# code is using a better salting mechanism than the PHP code. To match the PHP, all you need to do is run MD5 on stringToHash + saltToUse instead of using the HMACMD5's key feature. In short, do exactly what you did to produce your unsalted MD5 in C#, but pass in stringToHash + saltToUse instead.
","1161","<c#><php><hash><salt>","2","2","2","2013-08-29 18:36:25","18451367","0","","2213591","","2013-08-29 18:36:25","2013-08-26 19:04:40",""
"18451182","C# MD5 hashing needs to match PHP MD5 hashing (with salt)","I have a string that needs to be hashed using a salt in C# and match what it would in PHP. The C# code is as follows:
        string stringToHash = ""123"";
        string saltToUse = ""321"";
        byte[] stringBytes = ASCIIEncoding.ASCII.GetBytes(stringToHash);
        byte[] saltBytes = ASCIIEncoding.ASCII.GetBytes(saltToUse);

        var hmacMD5 = new HMACMD5(saltBytes);
        var saltedHash = hmacMD5.ComputeHash(stringBytes);
        byte[] hashedBytesNoSalt = MD5CryptoServiceProvider.Create().ComputeHash(stringBytes);

        string hashedString = BitConverter.ToString(hashedBytesNoSalt).Replace(""-"", """").ToLower();
        string saltedString = BitConverter.ToString(saltedHash).Replace(""-"", """").ToLower();

The PHP code to test if the C# is outputting correctly is:
<?php echo md5('123'.'321'); ?>

The C# outputs the correct UNSALTED MD5 hash, which is 202cb962ac59075b964b07152d234b70. However, when I try to salt using C# I get 900011ae860f471561023fba6cc25df6 and with PHP I get c8837b23ff8aaa8a2dde915473ce0991.
I am not sure why it is doing this or if this is even the correct way. The thing to remember is the C# needs to output to what the PHP outputs to.
","A salt is not the same thing as a private key. HMACMD5 uses a private key, when all that you desire is a salted MD5 hash. Just append the salt to the string to generate the correct key... stringToHash + saltToUse.
Read about HMACMD5 here: http://msdn.microsoft.com/en-us/library/yd9e7dt2.aspx
","1161","<c#><php><hash><salt>","2","1","2","2013-08-29 18:36:25","18451367","0","","2213591","","2013-08-29 18:36:25","2013-08-26 19:04:40",""
"42986053","Understanding password_hash and BCRYPT","Cryptography
Recently I have been doing a lot of research into cryptography. It led me to discovering that, not only do we have salt, we also have pepper (yes I really only just found out about pepper).
Hashing passwords
This all started when I inherited a project in which passwords were not hashed. Even as a n00b I know that this is just silly.
I have a basic understanding of hashing, but what I knew was apparently outdated.
Original solution
My original hashes and salts were achieved by:

Getting the user's password
Combining it with a salt
Hashing it using MD5
Storing both, the salt and the hash in a table

This worked well, but I am leaning towards using a better technique
New technique
The new way I wish to try is by using PHP's password_hash and password_verify.
Having created a quick test, I can see that I can return a true value with password_verify on a given hash. The one thing that is puzzling me is where the salt comes in?
On the documentation I can see that there was an option to specify a salt in the options array but that is deprecated as of PHP 7.0.
My attempt
I have created some code (untested) just to demonstrate. See below code.
<?php
$pepper = ""myPepper"";

function register($username, $password)
{
    // add the pepper
    $password .= $pepper;
    // hash the password
    $hash = password_hash($password, PASSWORD_BCRYPT, [""cost"" => 10]);

    // insert into table
    $query = $mysqli->prepare(""INSERT INTO users(username, password) VALUES(?, ?)"");
    $query->bind_param(""ss"", $username, $hash);

    // check the success
    if ($query->execute())
        return true;
    else
        return false;
}

function login($username, $password)
{
    // create the query
    $query = $mysqli->prepare(""SELECT password FROM users WHERE username = ?"");
    $query->bind_param(""s"", $username);

    // check if successful
    if ($query->execute())
    {
        // get password from the database
        $query->store_result();
        $query->bind_result($hash);
        $query->fetch();

        // verify the passwords are the same
        if (password_verify($password . $pepper, $hash))
            return true;
        else
            return false;
    }
}
?>

register function
Both these functions are very basic as I just wanted to show a point.
This function takes some parameters (in this case username and password and adds them to the database.
Now, I know how to add my pepper to the password as that is a simple concatenation, but the salt is randomly generated but never returned meaning I have no idea what it is.
login function
Again, very basic in what it does.
Since I have not used password_verify before I am not entirely sure I know the best approach to use to attain the user's password.
With my old login scripts they looked something like this:
function login($username, $password)
{
    // create the query
    $query = $mysqli->prepare(""SELECT salt FROM users WHERE username = ? AND password = ?"");
    $pass = md5($password);
    $query->bind_param(""ss"", $username, $password);

    // check if successful
    if ($query->execute())
    {
        $query->store_result(); // store result to gain access to num_rows

        // verify if password and usernames match
        if ($query->num_rows == 1)
            return true;
        else
            return false;
    }
}

Where I would just hash the password and pass it as a parameter into the SQL query.
With bcrypt I have to withdraw the password from table and then use it in another query. (At least that is what I believe I have to do currently).
Finally, the question part
Disclaimer
I apologise if I offended anyone with my lack of knowledge and / or my poor explanation of my knowledge.
Your help
I crave knowledge. So what I don't know, I want to know. (Obviously to an extent, I like to learn about computers and systems and programming etc).
Password hashing is essential these days and getting it right is very important and that is why I am writing this essay question.
Question(s)

Is my understanding of bcrypt correct?
Does it really not store a salt?
In my basic example of login and register, have I implemented password_hash and password_verify?

Update 1
Following all the comments, I would just like to post this update.
As stated above I like to learn, so when I came across this function it started confusing me because I didn't know what was happening.
I am going to post some examples to try and effectively get my confusion across to everyone.
Let's take this script for example:
<?php
// everything below is hard coded for simplicity (would actually be extracted from a database)
$password = ""myPassword""; // the password from the database
$salt = ""mySalt""; // I have hard coded this for simplicity
$hash = md5($salt . $password);

// check login status
if (md5($salt . $_POST[""password""]) == $hash)
    return true;
else
    return false;
?>

In this example I understand how the hashing works.
I am storing the password with a salt and hashing it. Then I am checking the posted password with the salt and hashing that. If the two match then I succeed with the login, otherwise the login has failed.
Now, let's take the following example.
<?php
// everything below is hard coded for simplicity (would actually be extracted from a database)
$password = ""myPassword""; // the password from the database
$hash = password_hash($password, PASSWORD_BCRYPT, [""cost"" => 10]); // salt is taken care of

// check login status
// again I am keeping this so simple (it might not work per se but I just want to learn about the functions)
if (password_verify($_POST[""password""], $hash))
    return true;
else
    return false;
?>

Confusion
I start getting confused when I am running password_verify.
I understand that the salt is taken care of by default in password_hash, but in the first example I know the salt and so I can perform a hash with the posted password to check if they match.
Why, then, does password_verify succeed in verifying the posted password without me having given it the salt?
Surely a salt is designed to make each password unique but somehow password_verify will succeed. I have used var_dump to dump the hash made from password_hash and it changes upon refresh. This really is where the confusion comes from. If the hash of ""test"" can change to a different hash each refresh, then how does password_verify know the posted password is correct?
I know that I can write a function to verify the user's password. What I really want to know is how can how PHP's password_verify manage to validate to true every time, despite the fact that my hash will change with each refresh.
Note: I understand that I will be storing the password in a database so the refreshing won't be a problem, but I was doing so to try and understand the function.
Comments
@RiggsFolly I know that the salt is done for me. The question is ""How does the verify function know the random salt created in the hash function in order to validate to true?""
@RiggsFolly I understand the salt option was deprecated. Had it not been (and I was able to pass it a salt), I think I would understand this function a lot more. The whole idea of the verify function successfully validating a password against a hash without knowing the salt is actually blowing my mind.
Perhaps I am just being stupid.
@Alex Howansky How is the salt returned? A string such as $hash = $2y$10$Vaj4ZonpRJjE6kmfQffvOOeIVW3ZV31JJYVY79GtZ3GtioZKtDwku means nothing, yet somehow password_verify(""test"", $hash"") returns true.
@Machavity Having read the link, I can see that the salt is at the start of the hash, but how can the salt be in the final hash? I apologise for my confusion, and apparent stupidness, but I simply wish to understand password hashing so that I am better prepared for future uses.
@Fred -ii- Those custom function were just simple for the example (I didn't want to link an entire page of code). That being said, my current usage is in a self defined Class called User, where I have a private variable called $conn which stores the mysqli connection. Then from that I use $this->conn->prepare(""SELECT * FROM ..."") to access the database.
Is that bad for scoping? What is the preferred way to store the connection within a self defined Class?
","","1150","<php><mysql><hash><salt><pepper>","0","","0","2017-03-23 23:22:16","","7","1","-1","","2017-04-13 12:48:18","2017-03-23 20:09:25","2017-03-23 20:13:49"
"8308558","Can anyone describe the difference between password encryption and hash (sha-256)?","I need to save the password to database.I get confused in encryption,hash using sha-256 ,salt generation method .If any one explains the basic concept behind this then it will be helpful
","In short:
Encryption is a process with an inverse. In other words: If I encrypt some text, there is a process which is able to convert the new text back to the original, called decryption.
Hashing is fundamentally different from encryption, because it does not have such a process. What a hash is meant to do is provide you with a result, which is unique for that given input text (well, almost unique, let's keep it at unique). This way, people can verify if two input texts were equal, without knowing what the actual input text was. So, if people get their hands on your hashed password, they still cannot decrypt it. SHA is a family of methods which provide hashing.
Salts and Peppers are merely additional techniques to hashing, which describe the process of adding something before and after the input text before hashing. This improves the difficulty of brute-force cracking of hashes back to text. 
Brute force cracking means simply trying all possible inputs (aa, ab, ac, etc...) and see if you can generate a hash which matches the hash you have gotten via hacking some website or whatever. You can find more on that here: https://security.stackexchange.com/questions/3272/password-hashing-add-salt-pepper-or-is-salt-enough
","1149","<encryption><password-protection><salt><sha256>","1","1","2","2011-11-29 09:49:21","8308725","0","","","","","2011-11-29 09:39:21",""
"8308558","Can anyone describe the difference between password encryption and hash (sha-256)?","I need to save the password to database.I get confused in encryption,hash using sha-256 ,salt generation method .If any one explains the basic concept behind this then it will be helpful
","The follow is a very basic explanation, anyway...

Encryption is a reversible method to crypt the data. So if you have ""password"" a encryption method convert it into (for example) ""ufmehlejw"" and then you are able to get again ""password"".
An hash function (one of them is the sha-256) is a function that once it's used on a string you have no way to recover the original string.
A salt is a string which usually prorammers (and not only, of course) use to mix the given password. It's usually randomly generated. A salt is used to extend the original data before using an hash function. The goal of the salt is to avoid attackers to discover the original password of a user from a stolen hash using rainbow tables.

","1149","<encryption><password-protection><salt><sha256>","1","2","2","2011-11-29 09:49:21","8308725","0","","","","","2011-11-29 09:39:21",""
"17971107","PHP password_hash error","I have been trying to understand password salting and hashing for a project I am working on. From the responses to a previous question I saw the php manual for password_hash as a good way to start. 
However, when trying out the code on that page, I get an error that I haven't been able to resolve.
Code: 
<?php
/**
 * Note that the salt here is randomly generated.
 * Never use a static salt or one that is not randomly generated.
 *
 * For the VAST majority of use-cases, let password_hash generate the salt randomly for you
 */
$options = [
'cost' => 11,
'salt' => mcrypt_create_iv(22, MCRYPT_DEV_URANDOM),
];
echo password_hash(""rasmuslerdorf"", PASSWORD_BCRYPT, $options).""\n"";
?>

Error:
Parse error: syntax error, unexpected '[' in /home/content/##/######/html/TESTINGFOLDER/HashNSalt.php on line 8
According to the manual - 
The above example will output:
$2y$11$q5MkhSBtlsJcNEVsYh64a.aCluzHnGog7TQAKVmQwO9C8xb.t89F.

Line 8 is 
 $options = [

Can someone here explain why I am getting this error - especially since I have copied and pasted this into my test page from the PHP Manual itself? I am still in the early stages of learning authentication/ php etc and depend on the manual, stackexchange/overflow to understand why things don't work the way they should. I am totally stumped when code I find in the manual doesn't work the way it should!
","Not a security issue, just a syntax one.
The short array syntax:
$options = [ ... ];

is a PHP 5.4 feature... previously you had to say array( ... ).
You probably don't have 5.4 installed. As password_hash is a PHP 5.5 feature you'll need to update your PHP version.
","1144","<passwords><hash><php><salt>","0","3","1","2013-07-31 12:58:52","17971108","0","","-1","","2017-03-17 10:45:55","2013-07-31 09:43:51",""
"35102371","How to get random salt from OpenSSL as std::string","I would like to generate a random string with OpenSSL and use this as a salt in a hashing function afterwards (will be Argon2). Currently I'm generating the random data this way:
if(length < CryptConfig::sMinSaltLen){        
    return 1;
}
if (!sInitialized){
    RAND_poll();
    sInitialized = true;
}

unsigned char * buf = new unsigned char[length];
if (!sInitialized || !RAND_bytes(buf, length)) {      
    return 1;
}

salt = std::string (reinterpret_cast<char*>(buf));
delete buf;

return 0;

But a std::cout of salt doesn't seem to be a proper string (contains control symbols and other stuff). This is most likely only my fault.
Am I using the wrong functions of OpenSSL to generate the random data? 
Or is my conversion from buf to string faulty?
","Random data is random data. That's what you're asking for and that's exactly what you are getting. Your salt variable is a proper string that happens to contain unprintable characters. If you wish to have printable characters, one way of achieving that is using base64 encoding, but that will blow up its length. Another option is to somehow discard non-printable characters, but I don't see any mechanism to force RAND_bytes to do this. I guess you could simply fetch random bytes in a loop until you get length printable characters.
If encoding base64 is acceptable for you, here is an example of how to use the OpenSSL base64 encoder, extracted from Joe Linoff's Cipher library:
string Cipher::encode_base64(uchar* ciphertext,
                 uint   ciphertext_len) const
{
  DBG_FCT(""encode_base64"");
  BIO* b64 = BIO_new(BIO_f_base64());
  BIO* bm  = BIO_new(BIO_s_mem());
  b64 = BIO_push(b64,bm);
  if (BIO_write(b64,ciphertext,ciphertext_len)<2) {
    throw runtime_error(""BIO_write() failed"");
  }
  if (BIO_flush(b64)<1) {
    throw runtime_error(""BIO_flush() failed"");
  }
  BUF_MEM *bptr=0;
  BIO_get_mem_ptr(b64,&bptr);
  uint len=bptr->length;
  char* mimetext = new char[len+1];
  memcpy(mimetext, bptr->data, bptr->length-1);
  mimetext[bptr->length-1]=0;
  BIO_free_all(b64);

  string ret = mimetext;
  delete [] mimetext;
  return ret;
}

To this code, I suggest adding BIO_set_flags(b64, BIO_FLAGS_BASE64_NO_NL), because otherwise you'll get a new line character inserted after every 64 characters. See OpenSSL's -A switch for details.
","1136","<c++><c++11><random><openssl><salt>","0","2","1","2016-01-30 13:57:09","35102633","2","","","","","2016-01-30 13:28:49",""
"15343298","Is there anyway to get string value from md5 hash using some salt?","Let me describe the scenario:
I know the hashed string, and the $salt, but not the $pass. md5 format is:
md5($salt.$pass)

example value = ae10f955a7164ba6905919e7798284ca

here $salt = q)SDs
$pass is unknown.

Now, is there anyway to get md5($pass)?
","While it is possible to recreate the password using a variety of methods, it's really not the purpose of the hash. The hash is supposed to encode the string in question in an irreversible way, so people who somehow get a hold of the hash cannot just reverse the encryption and have the password in their hands.
So no, it really isn't possible...at least not in any easy way.
","1134","<hash><md5><salt>","1","1","2","2013-03-11 16:25:24","15343589","0","","","","","2013-03-11 16:09:53",""
"15343298","Is there anyway to get string value from md5 hash using some salt?","Let me describe the scenario:
I know the hashed string, and the $salt, but not the $pass. md5 format is:
md5($salt.$pass)

example value = ae10f955a7164ba6905919e7798284ca

here $salt = q)SDs
$pass is unknown.

Now, is there anyway to get md5($pass)?
","Short of brute force techniques, no.  However brute force is a valid approach.  Depending on the scope of this problem, you have a few options:

Write a small program to compute MD5 hashes of md5(salt + random string).
Use an existing cracking tool like John the ripper.
Build a rainbow table using the salt, and then use that to find the appropriate password.

A tool like John the Ripper may be the easiest place to start.
","1134","<hash><md5><salt>","1","1","2","2013-03-11 16:25:24","15343589","0","","","","","2013-03-11 16:09:53",""
"17317789","Grails - different passwords for same salt in Spring Security","My web app is using Spring Security plugin for authentication and authorization. I'm building sort of an API, where I need to verify user password.
Spring Security is configured to use BCrypt with 5 logrounds and username property as salt:
grails.plugins.springsecurity.password.algorithm = 'brcypt' 
grails.plugins.springsecurity.password.bcrypt.logrounds = 5
grails.plugins.springsecurity.dao.reflectionSaltSourceProperty = 'username' // password salting

Now, in my controller I'd like to verify user password and login. For this, I call springSecurityService.encodePassword(cmd.password, cmd.username)
where cmd is command object with my params. The thing is, on each request, password encoded with springSecurityService is different and never the  same as user password in databse. I tried also with constant values in encodePassword call, something like this:
springSecurityService.encodePassword('foo', 'bar') and result is the same: on each request encoded password is different. This way I can't verify user password and get valid user instance from databse.
Any ideas how to solve this?
","bcrypt generates a uniq salt each time, and includes it into result hash. Because of it springSecurityService.encodePasswod just ignores second argument, and reflectionSaltSourceProperty option as well (see sources). So, each time you'll get different hash for same input data. 
You can use BCrypt class to validate password, like:
if (BCrypt.checkpw(candidate_password, stored_hash))
    System.out.println(""It matches"");
else
    System.out.println(""It does not match"");

See docs for BCrypt: http://static.springsource.org/autorepo/docs/spring-security/3.1.x/apidocs/org/springframework/security/crypto/bcrypt/BCrypt.html
Btw, as you're using Spring Security, it's already implemented in framework, so you can use passwordEncoder bean:
def passwrodEncoder
...
passwordEncoder.isPasswordValid(user.password, cmd.password, user.username) //user.username will be ignored

","1133","<grails><spring-security><passwords><salt>","3","6","1","2015-11-21 13:10:31","","0","","","","","2013-06-26 10:37:55",""
"6347512","php salt authentication","Thank you for your honest criticism towards my ignorance in php/mysql and I appreciate your help concerning this issue.
After making the corrections suggested below I'm running into the issue where the registered 
sha1(md5($password).$salt) 

is not === when compared to the login authentication  
sha1(md5($password).$row['salt']); 

So I created a script to see what the login script was seeing and it compares the two.  
 $query = ""UPDATE `users` SET `form_password` = '$encrypted'  WHERE `username` = '$username'"";  
     mysql_query($query) or die (mysql_error());

password is registered as ""1fcb4bdeb8a98151f5f74a2af0b5045ec277c501""
and being called back as  ""f2c04d2583f111fcd41288dc75901f6c870cfc6b""
Here is the updated script on login:
else {  

$password = $_POST['password'];
$username = mysql_real_escape_string($_POST['username']);


$sql  =  ""SELECT `password`, `salt` FROM `users` WHERE `username` = '$username' LIMIT 0,1"";
$result = mysql_query($sql) or die(mysql_error());

if (is_resource($result) && mysql_num_rows($result) > 0){
    $row        =   mysql_fetch_array($result);
    $encrypted  =   sha1(md5($password).$row['salt']);

     if($encrypted === $row['password']){
    header('Location: page3.php');
    exit;
     } else{

     $query = ""UPDATE `users` SET `form_password` = '$encrypted'  WHERE `username` = '$username'"";  
     mysql_query($query) or die (mysql_error());

    header('Location: page2.php');
    exit;
     }
} else{
header('Location: page4.php');
exit;
}
}

","a) How large is your password field in the database? SHA1 hashes are 40 characters long, so if you've got a field size less than that, your hashed password will be truncated.
b) Putting or die() on your $sql = ... line is pointless. Creating a string is extraordinarily unlikely to fail. You need to put the or die() on the line where the query is actually executed:
$sql = ""...""
$result = mysql_query($sql) or die(...);

c) Your code is vulnerable to sql injection, as you paste the user-provided username and password directly into your queries without escaping.
d) You don't check if the query to get the user's pw/salt succeeds. If the username is incorrect, the query will retrieve no rows. This isn't an error condition, as the query did what it was supposed to. You need to check, via mysql_num_rows($result) if the query did return a row or not.
","1119","<php><authentication><passwords><salt>","1","2","4","2011-06-18 16:55:05","6347592","2","","798132","","2011-06-18 16:55:05","2011-06-14 17:24:01",""
"6347512","php salt authentication","Thank you for your honest criticism towards my ignorance in php/mysql and I appreciate your help concerning this issue.
After making the corrections suggested below I'm running into the issue where the registered 
sha1(md5($password).$salt) 

is not === when compared to the login authentication  
sha1(md5($password).$row['salt']); 

So I created a script to see what the login script was seeing and it compares the two.  
 $query = ""UPDATE `users` SET `form_password` = '$encrypted'  WHERE `username` = '$username'"";  
     mysql_query($query) or die (mysql_error());

password is registered as ""1fcb4bdeb8a98151f5f74a2af0b5045ec277c501""
and being called back as  ""f2c04d2583f111fcd41288dc75901f6c870cfc6b""
Here is the updated script on login:
else {  

$password = $_POST['password'];
$username = mysql_real_escape_string($_POST['username']);


$sql  =  ""SELECT `password`, `salt` FROM `users` WHERE `username` = '$username' LIMIT 0,1"";
$result = mysql_query($sql) or die(mysql_error());

if (is_resource($result) && mysql_num_rows($result) > 0){
    $row        =   mysql_fetch_array($result);
    $encrypted  =   sha1(md5($password).$row['salt']);

     if($encrypted === $row['password']){
    header('Location: page3.php');
    exit;
     } else{

     $query = ""UPDATE `users` SET `form_password` = '$encrypted'  WHERE `username` = '$username'"";  
     mysql_query($query) or die (mysql_error());

    header('Location: page2.php');
    exit;
     }
} else{
header('Location: page4.php');
exit;
}
}

","You are quoting your column identifiers incorrectly. Use backticks or nothing at all.
SELECT 'salt' FROM table WHERE ....

Will return ""salt"". Use instead:
SELECT `salt` ....

or
SELECT salt ....

Please also consider the points that Marc B made. They are all good and valid.
","1119","<php><authentication><passwords><salt>","1","2","4","2011-06-18 16:55:05","6347592","2","","798132","","2011-06-18 16:55:05","2011-06-14 17:24:01",""
"6347512","php salt authentication","Thank you for your honest criticism towards my ignorance in php/mysql and I appreciate your help concerning this issue.
After making the corrections suggested below I'm running into the issue where the registered 
sha1(md5($password).$salt) 

is not === when compared to the login authentication  
sha1(md5($password).$row['salt']); 

So I created a script to see what the login script was seeing and it compares the two.  
 $query = ""UPDATE `users` SET `form_password` = '$encrypted'  WHERE `username` = '$username'"";  
     mysql_query($query) or die (mysql_error());

password is registered as ""1fcb4bdeb8a98151f5f74a2af0b5045ec277c501""
and being called back as  ""f2c04d2583f111fcd41288dc75901f6c870cfc6b""
Here is the updated script on login:
else {  

$password = $_POST['password'];
$username = mysql_real_escape_string($_POST['username']);


$sql  =  ""SELECT `password`, `salt` FROM `users` WHERE `username` = '$username' LIMIT 0,1"";
$result = mysql_query($sql) or die(mysql_error());

if (is_resource($result) && mysql_num_rows($result) > 0){
    $row        =   mysql_fetch_array($result);
    $encrypted  =   sha1(md5($password).$row['salt']);

     if($encrypted === $row['password']){
    header('Location: page3.php');
    exit;
     } else{

     $query = ""UPDATE `users` SET `form_password` = '$encrypted'  WHERE `username` = '$username'"";  
     mysql_query($query) or die (mysql_error());

    header('Location: page2.php');
    exit;
     }
} else{
header('Location: page4.php');
exit;
}
}

","You have got so many things wrong there.
Here is your working code:
The db password is encrypted as:
<?php
function generateSalt(){
    // Declare $salt
    $salt = '';

    // And create it with random chars
    for ($i = 0; $i < 2; $i++){
        $salt .= chr(rand(48, 57)) . chr(rand(65, 90)) . chr(rand(97, 122));
    }

    return $salt;
}
$salt       =   generateSalt();
$encrypted  =   sha1(md5($password).$salt);
$query      =   ""INSERT INTO `users`(`password`, `salt`) VALUES '$encrypted', '$salt')"";
?>

index. php
<?php
function salt() {
    // Declare $salt
    $salt = '';

    // And create it with random chars
    for ($i = 0; $i < 2; $i++){
        $salt .= chr(rand(48, 57)) . chr(rand(65, 90)) . chr(rand(97, 122));
    }

    return $salt;
 }

$password = $_POST['password'];
$username = mysql_real_escape_string($_POST['username']); 

$sql        =   ""SELECT `password`, `salt` FROM `users` WHERE `username` = '$username' LIMIT 0,1"";
$result     =   mysql_query($sql) or die('Could not access user.');
if(is_resource($result) && mysql_num_rows($result) > 0){
    $row        =   mysql_fetch_array($result);
    $encrypted  =   sha1(md5($password).$row['salt']);

    if($encrypted === $row['password']){
        header('Location: page3.php');
        exit;
    } else{
        header('Location: page2.php');
        exit;
    }
} else{
    header('Location: page2.php');
    exit;
}
?>

","1119","<php><authentication><passwords><salt>","1","1","4","2011-06-18 16:55:05","6347592","2","","798132","","2011-06-18 16:55:05","2011-06-14 17:24:01",""
"6347512","php salt authentication","Thank you for your honest criticism towards my ignorance in php/mysql and I appreciate your help concerning this issue.
After making the corrections suggested below I'm running into the issue where the registered 
sha1(md5($password).$salt) 

is not === when compared to the login authentication  
sha1(md5($password).$row['salt']); 

So I created a script to see what the login script was seeing and it compares the two.  
 $query = ""UPDATE `users` SET `form_password` = '$encrypted'  WHERE `username` = '$username'"";  
     mysql_query($query) or die (mysql_error());

password is registered as ""1fcb4bdeb8a98151f5f74a2af0b5045ec277c501""
and being called back as  ""f2c04d2583f111fcd41288dc75901f6c870cfc6b""
Here is the updated script on login:
else {  

$password = $_POST['password'];
$username = mysql_real_escape_string($_POST['username']);


$sql  =  ""SELECT `password`, `salt` FROM `users` WHERE `username` = '$username' LIMIT 0,1"";
$result = mysql_query($sql) or die(mysql_error());

if (is_resource($result) && mysql_num_rows($result) > 0){
    $row        =   mysql_fetch_array($result);
    $encrypted  =   sha1(md5($password).$row['salt']);

     if($encrypted === $row['password']){
    header('Location: page3.php');
    exit;
     } else{

     $query = ""UPDATE `users` SET `form_password` = '$encrypted'  WHERE `username` = '$username'"";  
     mysql_query($query) or die (mysql_error());

    header('Location: page2.php');
    exit;
     }
} else{
header('Location: page4.php');
exit;
}
}

","i would do this in pseudo-code
$salt='secretword';// that do not change
$encrypted=sha1($password.$salt);

INSERT INTO users (username,password) VALUES($username, $encrypted);

later
//get $username and $password from user input
$encrypted=sha1($password.$salt);
SELECT * FROM users WHERE username='$username' and password='$encrypded' LIMIT 1

note encrypting should be done in php because MySQL will calculate SHA1(..) for each row when matching and is unnecessary waste
","1119","<php><authentication><passwords><salt>","1","1","4","2011-06-18 16:55:05","6347592","2","","798132","","2011-06-18 16:55:05","2011-06-14 17:24:01",""
"15120996","Encryption Comparing Hashed&Salted Password upon Login","I have a simple password encrypter that gives me a hashed/salted password to store in my database when a user registers. Code: 
public static string GenerateHashWithSalt(string enteredPassword, string enteredSalt)
    {
        string sHashWithSalt = enteredPassword + enteredSalt;
        byte[] saltedHashBytes = Encoding.UTF8.GetBytes(sHashWithSalt);
        System.Security.Cryptography.HashAlgorithm algorithm = new System.Security.Cryptography.SHA256Managed();
        byte[] hash = algorithm.ComputeHash(saltedHashBytes);
        return Convert.ToBase64String(hash);
    }

When a user logs in, I presume I can't simply put the entered password back through this code and compare as it would give me a different result. How can I simply compare the stored password against the entered log in password? 
","When the account is created, you would have a password hash column, which would be populated by GenerateHashWithSalt(password, salt); where the password is provided by them and then the salt is randomly generated. The salt would then be stored alongside the password hash. 
Then, when you need to see if a username/password is valid, you'd use storedpassword == GenerateHashWithSalt(providedPassword, saltFromDb) or some such. If they come out the same, then you know they entered the correct password
","1116","<c#><encryption><hash><salt>","1","5","4","2013-02-27 20:38:11","15121060","3","","447156","","2013-02-27 19:48:47","2013-02-27 19:47:41",""
"15120996","Encryption Comparing Hashed&Salted Password upon Login","I have a simple password encrypter that gives me a hashed/salted password to store in my database when a user registers. Code: 
public static string GenerateHashWithSalt(string enteredPassword, string enteredSalt)
    {
        string sHashWithSalt = enteredPassword + enteredSalt;
        byte[] saltedHashBytes = Encoding.UTF8.GetBytes(sHashWithSalt);
        System.Security.Cryptography.HashAlgorithm algorithm = new System.Security.Cryptography.SHA256Managed();
        byte[] hash = algorithm.ComputeHash(saltedHashBytes);
        return Convert.ToBase64String(hash);
    }

When a user logs in, I presume I can't simply put the entered password back through this code and compare as it would give me a different result. How can I simply compare the stored password against the entered log in password? 
","If all you need is a way to compare passwords, maybe this will help: encryption/decryption
","1116","<c#><encryption><hash><salt>","1","0","4","2013-02-27 20:38:11","15121060","3","","447156","","2013-02-27 19:48:47","2013-02-27 19:47:41",""
"15120996","Encryption Comparing Hashed&Salted Password upon Login","I have a simple password encrypter that gives me a hashed/salted password to store in my database when a user registers. Code: 
public static string GenerateHashWithSalt(string enteredPassword, string enteredSalt)
    {
        string sHashWithSalt = enteredPassword + enteredSalt;
        byte[] saltedHashBytes = Encoding.UTF8.GetBytes(sHashWithSalt);
        System.Security.Cryptography.HashAlgorithm algorithm = new System.Security.Cryptography.SHA256Managed();
        byte[] hash = algorithm.ComputeHash(saltedHashBytes);
        return Convert.ToBase64String(hash);
    }

When a user logs in, I presume I can't simply put the entered password back through this code and compare as it would give me a different result. How can I simply compare the stored password against the entered log in password? 
","There are a couple of steps to do this correctly.
First you need 3 things:

A password provided by the user. (let's call it p)
A random string of characters that you create. This is known as the salt (we'll call it s)
A cryptographic hash function (well call it h(x))

With the above three things we can calculate h' which is what we want to store: h' = h( s + p )
The user's password is never stored. We only store s and h' in our database.
The salt doesn't need to be encrypted. It just needs to be be unique for every password in the database.
When the user tries to log in again in the future you will recalculate h' using the original salt that is stored in the database. If the new h' is equal to what is in the database then the user's password is the same.
","1116","<c#><encryption><hash><salt>","1","0","4","2013-02-27 20:38:11","15121060","3","","447156","","2013-02-27 19:48:47","2013-02-27 19:47:41",""
"15120996","Encryption Comparing Hashed&Salted Password upon Login","I have a simple password encrypter that gives me a hashed/salted password to store in my database when a user registers. Code: 
public static string GenerateHashWithSalt(string enteredPassword, string enteredSalt)
    {
        string sHashWithSalt = enteredPassword + enteredSalt;
        byte[] saltedHashBytes = Encoding.UTF8.GetBytes(sHashWithSalt);
        System.Security.Cryptography.HashAlgorithm algorithm = new System.Security.Cryptography.SHA256Managed();
        byte[] hash = algorithm.ComputeHash(saltedHashBytes);
        return Convert.ToBase64String(hash);
    }

When a user logs in, I presume I can't simply put the entered password back through this code and compare as it would give me a different result. How can I simply compare the stored password against the entered log in password? 
","I wrote up a quick tutorial on how salted-hashed-password-equivalent schemes work. However, based on the fact that you are asking the question I should caution you that this is only the first step in ensuring a secure logon process.  You should hire a security expert or purchase an off-the-shelf solution rather than attempting to roll your own if you are a beginner at this. The number of ways to make an inobvious mistake that makes the system insecure is enormous.
http://blogs.msdn.com/b/ericlippert/archive/tags/salt/
","1116","<c#><encryption><hash><salt>","1","2","4","2013-02-27 20:38:11","15121060","3","","447156","","2013-02-27 19:48:47","2013-02-27 19:47:41",""
"12574380","Authenticating user logins from sha1 salted passwords","I have a very simple login/user registration script that stores passwords using sha1 and salt. I have the passwords and user creation working fine and storing everything in the database just fine, but when I try to log in with the credentials, it doesn't work. I can't seem to find anything upon searching this topic.
Here is my add user form:
session_start();
include(""includes/resume.config.php"");

// make sure form fields have a value and strip them
function check_input($data, $problem='')
{
$data = trim($data);
$data = stripslashes($data);
$data = htmlspecialchars($data);
if ($problem && strlen($data) == 0)
{
    die($problem);
}
    return $data;
}

// get form values, escape them and apply the check_input function
$name = $link->real_escape_string(check_input($_POST['name'], ""Please enter a name!""));
$email = $link->real_escape_string(check_input($_POST['email'], ""Please enter an email!""));
$password = $link->real_escape_string(check_input($_POST['password'], ""Please enter a password!""));

// generate a random salt for converting passwords into MD5
$salt = bin2hex(mcrypt_create_iv(32, MCRYPT_DEV_URANDOM));
$saltedPW =  $password . $salt;
$hashedPW = sha1($saltedPW);

mysqli_connect($db_host, $db_user, $db_pass) OR DIE (mysqli_error());
// select the db
mysqli_select_db ($link, $db_name) OR DIE (""Unable to select db"".mysqli_error($db_name));

 // our sql query
$sql = ""INSERT INTO admins (name, email, password, salt) VALUES ('$name', '$email', '$hashedPW', '$salt');"";

//save the updated information to the database          
mysqli_query($link, $sql) or die(""Error in Query: "" . mysqli_error($link));

if (!mysqli_error($link)) 
{
    header(""Location: file_insert.php"");
}   

And here is my login script: This is what is not working 
function check_input($data, $problem='')
{
$data = trim($data);
$data = stripslashes($data);
$data = htmlspecialchars($data);
if ($problem && strlen($data) == 0)
{
    die($problem);
}
    return $data;
}

if(isset($_POST['submitLogin'])) { //form submitted?

// get form values, escape them and apply the check_input function
$name = $link->real_escape_string(check_input($_POST['name'], ""Please enter a name!""));
$password = $link->real_escape_string(check_input($_POST['password'], ""Please enter a password!""));

$saltQuery = $link->query('SELECT salt FROM admins WHERE name = ""'.$name.'""');

$salt = mysqli_fetch_assoc($saltQuery);
$saltedPW =  $password . $salt;
$hashedPW = sha1($saltedPW);

mysqli_connect($db_host, $db_user, $db_pass) OR DIE (mysqli_error());
// select the db
mysqli_select_db ($link, $db_name) OR DIE (""Unable to select db"".mysqli_error($db_name));

$validate_user = $link->query('SELECT id, name, password FROM admins WHERE name = ""'.$name.'"" AND password = ""'.$hashedPW.'""');

if ($validate_user->num_rows == 1) {
    $row = $validate_user->fetch_assoc();
    $_SESSION['id'] = $row['id'];
    $_SESSION['loggedin'] = TRUE;
    Header('Location: file_insert.php');
} else {
    print ""<center><p style='margin-top: 200px; font-weight: bold;'>Invalid Login Information</p>"";
    print ""<a href='admin-login.php'>Click here</a> to return to the login page.</center>"";
}
}

","There may be more going on, but certainly one reason it isn't working is because mysqli_fetch_assoc returns an array, and you are using it like a string.
PHP would complain about an array to string conversion when you call $password . $salt since at this point $salt is an array.  The result is that you get the word Array appended to the password which results in an incorrect hash.  If you have display_errors off and/or error_reporting set to hide notices in php.ini then you wont see this message.
If you change:
$saltedPW =  $password . $salt;

to:
$saltedPW =  $password . $salt['salt'];

then it should work.
In addition, you should escape $salt before you insert it into the database because its possible it could contain null, unprintable, or single/double quotes since its randomly generated.
","1115","<php><hash><passwords><sha1><salt>","4","3","2","2012-09-24 23:47:15","12574430","0","","","","","2012-09-24 23:34:53",""
"12574380","Authenticating user logins from sha1 salted passwords","I have a very simple login/user registration script that stores passwords using sha1 and salt. I have the passwords and user creation working fine and storing everything in the database just fine, but when I try to log in with the credentials, it doesn't work. I can't seem to find anything upon searching this topic.
Here is my add user form:
session_start();
include(""includes/resume.config.php"");

// make sure form fields have a value and strip them
function check_input($data, $problem='')
{
$data = trim($data);
$data = stripslashes($data);
$data = htmlspecialchars($data);
if ($problem && strlen($data) == 0)
{
    die($problem);
}
    return $data;
}

// get form values, escape them and apply the check_input function
$name = $link->real_escape_string(check_input($_POST['name'], ""Please enter a name!""));
$email = $link->real_escape_string(check_input($_POST['email'], ""Please enter an email!""));
$password = $link->real_escape_string(check_input($_POST['password'], ""Please enter a password!""));

// generate a random salt for converting passwords into MD5
$salt = bin2hex(mcrypt_create_iv(32, MCRYPT_DEV_URANDOM));
$saltedPW =  $password . $salt;
$hashedPW = sha1($saltedPW);

mysqli_connect($db_host, $db_user, $db_pass) OR DIE (mysqli_error());
// select the db
mysqli_select_db ($link, $db_name) OR DIE (""Unable to select db"".mysqli_error($db_name));

 // our sql query
$sql = ""INSERT INTO admins (name, email, password, salt) VALUES ('$name', '$email', '$hashedPW', '$salt');"";

//save the updated information to the database          
mysqli_query($link, $sql) or die(""Error in Query: "" . mysqli_error($link));

if (!mysqli_error($link)) 
{
    header(""Location: file_insert.php"");
}   

And here is my login script: This is what is not working 
function check_input($data, $problem='')
{
$data = trim($data);
$data = stripslashes($data);
$data = htmlspecialchars($data);
if ($problem && strlen($data) == 0)
{
    die($problem);
}
    return $data;
}

if(isset($_POST['submitLogin'])) { //form submitted?

// get form values, escape them and apply the check_input function
$name = $link->real_escape_string(check_input($_POST['name'], ""Please enter a name!""));
$password = $link->real_escape_string(check_input($_POST['password'], ""Please enter a password!""));

$saltQuery = $link->query('SELECT salt FROM admins WHERE name = ""'.$name.'""');

$salt = mysqli_fetch_assoc($saltQuery);
$saltedPW =  $password . $salt;
$hashedPW = sha1($saltedPW);

mysqli_connect($db_host, $db_user, $db_pass) OR DIE (mysqli_error());
// select the db
mysqli_select_db ($link, $db_name) OR DIE (""Unable to select db"".mysqli_error($db_name));

$validate_user = $link->query('SELECT id, name, password FROM admins WHERE name = ""'.$name.'"" AND password = ""'.$hashedPW.'""');

if ($validate_user->num_rows == 1) {
    $row = $validate_user->fetch_assoc();
    $_SESSION['id'] = $row['id'];
    $_SESSION['loggedin'] = TRUE;
    Header('Location: file_insert.php');
} else {
    print ""<center><p style='margin-top: 200px; font-weight: bold;'>Invalid Login Information</p>"";
    print ""<a href='admin-login.php'>Click here</a> to return to the login page.</center>"";
}
}

","You didn't said if you get any error message, but from what you post I think it is a connection problem:
if(isset($_POST['submitLogin'])) { //form submitted?

// Here, you didn't connect to database, but you are expecting to fetch salt!
$saltQuery = $link->query('SELECT salt FROM admins WHERE name = ""'.$name.'""');

$salt = mysqli_fetch_assoc($saltQuery);

So, you may have to connect first to database:
if(isset($_POST['submitLogin'])) { //form submitted?

mysqli_connect($db_host, $db_user, $db_pass) OR DIE (mysqli_error());
// select the db
mysqli_select_db ($link, $db_name) OR DIE (""Unable to select db"".mysqli_error($db_name));

// Here, you didn't connect to database, but you are expecting to fetch salt!
$saltQuery = $link->query('SELECT salt FROM admins WHERE name = ""'.$name.'""');

Second, mysqli_fetch_assoc return an array with the key name as field's of what you embed in your SELECT query, the final code should be like this:
if(isset($_POST['submitLogin'])) { //form submitted?

mysqli_connect($db_host, $db_user, $db_pass) OR DIE (mysqli_error());
// select the db
mysqli_select_db ($link, $db_name) OR DIE (""Unable to select db"".mysqli_error($db_name));

// Here, you didn't connect to database, but you are expecting to fetch salt!
$saltQuery = $link->query('SELECT salt FROM admins WHERE name = ""'.$name.'""');
$salt = mysqli_fetch_assoc($saltQuery);
$saltedPW =  $password . $salt[""salt""];
$hashedPW = sha1($saltedPW);

","1115","<php><hash><passwords><sha1><salt>","4","0","2","2012-09-24 23:47:15","12574430","0","","","","","2012-09-24 23:34:53",""
"15605908","Unique generated SALT for each user?","I'd like to ask if it's possible to generate a unique salt for each user and then hash it like
sha1(sha1($password . $salt))
so the $salt is a randomly generated string?.
If yes, how would I encrypt the password on login?
Xenforo uses this, and I am wondering how are they encrypting the passwords if they are using unique salt for each user?.
Many thanks.
","Don't make your own password hashing algorithm. It's going to be easily crackable and your users won't appreciate their passwords being stolen when your database is compromised.
Bcrypt and other well-tested hashes do this already:
>>> bcrypt.generate_password_hash('password', 15)
    '$2a$15$bzaLXuer1C8dtSckDp3AI.eOoL/nOTsSdpjEMyDMcJ3ZQELdRcLzq'
>>> bcrypt.generate_password_hash('password', 15)
    '$2a$15$Ye.cFInKhzo1KvAJGSi6yORV5uEqeW.Z1oAhdfi.163Psz4YPA3CO'

The random salt and the number of rounds are stored within the hash itself, separated by a delimiter, which lets the constant-time password checking function pick the salt out of the resulting hash string.
If for some other reason you need to create secure random strings, use openssl_random_pseudo_bytes():
$bytes = openssl_random_pseudo_bytes(64, true);
$hex = bin2hex($bytes);

","1105","<php><hash><sha1><salt>","0","5","1","2013-03-25 00:49:14","15605988","1","","283366","","2013-03-25 00:34:46","2013-03-25 00:31:57",""
"28798722","Change password script works but doesn't write correct password into database","I have this script for change password :
<?php
/*
Page/Script Created by Shawn Holderfield
*/

//Establish output variable - For displaying Error Messages
$msg = """";

//Check to see if the form has been submitted
if (mysql_real_escape_string($_POST['submit'])):

    //Establish Post form variables
    $username = mysql_real_escape_string($_POST['username']);
    $password = mysql_real_escape_string(md5($_POST['password']));
    $npassword = mysql_real_escape_string(md5($_POST['npassword']));
    $rpassword = mysql_real_escape_string(md5($_POST['rpassword']));

    //Connect to the Database Server
    mysql_connect(""mysql.."", """", """")or die(mysql_error());

    // Connect to the database
    mysql_select_db("""") or die(mysql_error());

    // Query the database - To find which user we're working with
    $sql = ""SELECT * FROM members WHERE username = '$username' "";
    $query = mysql_query($sql);
    $numrows = mysql_num_rows($query);
    //Gather database information
    while ($rows = mysql_fetch_array($query)):

        $username == $rows['username'];
        $password == $rows['password'];


    endwhile;

    //Validate The Form
    if (empty($username) || empty($password) || empty($npassword) || empty($rpassword)):

        $msg = ""All fields are required"";

    elseif ($numrows == 0):

        $msg = ""This username does not exist"";

    elseif ($password != $password):

        $msg = ""The CURRENT password you entered is incorrect."";

    elseif ($npassword != $rpassword):

        $msg = ""Your new passwords do not match"";

    elseif ($npassword == $password):

        $msg = ""Your new password cannot match your old password"";

    else:

        //$msg = ""Your Password has been changed."";
        mysql_query(""UPDATE members SET password = '$npassword' WHERE username = '$username'"");



        endif;
endif;

?>
<html>
    <head>
        <title>Change Password</title>
    </head>
    <body>
            <form method=""POST"" action="""">
                <table border=""0"">
                    <tr>
                        <td align=""right"">Username: </td>
                        <td><input type=""TEXT"" name=""username"" value=""""/></td>
                    </tr>
                    <tr>
                        <td align=""right"">Current Password: </td>
                        <td><input type=""password"" name=""password"" value=""""/></td>
                    </tr>
                    <tr>
                        <td align=""right"">New Password: </td>
                        <td><input type=""password"" name=""npassword"" value=""""/></td>
                    </tr>
                    <tr>
                        <td align=""right"">Repeat New Password: </td>
                        <td><input type=""password"" name=""rpassword"" value=""""/></td>
                    </tr>
                    <tr><td>
                        <input type=""submit"" name=""submit"" value=""Change Password""/>
                        </td>
                    </tr>
                </table>
            </form>
        <br>
<?php echo $msg; ?>
    </body>
</html>

This actually works fine, access databse and overwrite the current password, but it does not hash the password like while registration 
Registration process script:
<?php
include_once 'db_connect.php';
include_once 'psl-config.php';

$error_msg = """";

if (isset($_POST['username'], $_POST['email'], $_POST['p'])) {
    // Sanitize and validate the data passed in
    $username = filter_input(INPUT_POST, 'username', FILTER_SANITIZE_STRING);
    $email = filter_input(INPUT_POST, 'email', FILTER_SANITIZE_EMAIL);
    $email = filter_var($email, FILTER_VALIDATE_EMAIL);
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        // Not a valid email
        $error_msg .= '<p class=""error"">The email address you entered is not valid</p>';
    }

    $password = filter_input(INPUT_POST, 'p', FILTER_SANITIZE_STRING);
    if (strlen($password) != 128) {
        // The hashed pwd should be 128 characters long.
        // If it's not, something really odd has happened
        $error_msg .= '<p class=""error"">Invalid password configuration.</p>';
    }

    // Username validity and password validity have been checked client side.
    // This should should be adequate as nobody gains any advantage from
    // breaking these rules.
    //

    $prep_stmt = ""SELECT id FROM members WHERE email = ? LIMIT 1"";
    $stmt = $mysqli->prepare($prep_stmt);

   // check existing email  
    if ($stmt) {
        $stmt->bind_param('s', $email);
        $stmt->execute();
        $stmt->store_result();

        if ($stmt->num_rows == 1) {
            // A user with this email address already exists
            $error_msg .= '<p class=""error"">A user with this email address already exists.</p>';
                        $stmt->close();
        }
                $stmt->close();
    } else {
        $error_msg .= '<p class=""error"">Database error Line 39</p>';
                $stmt->close();
    }

    // check existing username
    $prep_stmt = ""SELECT id FROM members WHERE username = ? LIMIT 1"";
    $stmt = $mysqli->prepare($prep_stmt);

    if ($stmt) {
        $stmt->bind_param('s', $username);
        $stmt->execute();
        $stmt->store_result();

                if ($stmt->num_rows == 1) {
                        // A user with this username already exists
                        $error_msg .= '<p class=""error"">A user with this username already exists</p>';
                        $stmt->close();
                }
                $stmt->close();
        } else {
                $error_msg .= '<p class=""error"">Database error line 55</p>';
                $stmt->close();
        }

    // TODO: 
    // We'll also have to account for the situation where the user doesn't have
    // rights to do registration, by checking what type of user is attempting to
    // perform the operation.

    if (empty($error_msg)) {
        // Create a random salt
        //$random_salt = hash('sha512', uniqid(openssl_random_pseudo_bytes(16), TRUE)); // Did not work
        $random_salt = hash('sha512', uniqid(mt_rand(1, mt_getrandmax()), true));

        // Create salted password 
        $password = hash('sha512', $password . $random_salt);

        // Insert the new user into the database 
        if ($insert_stmt = $mysqli->prepare(""INSERT INTO members (username, email, password, salt) VALUES (?, ?, ?, ?)"")) {
            $insert_stmt->bind_param('ssss', $username, $email, $password, $random_salt);
            // Execute the prepared query.
            if (! $insert_stmt->execute()) {
                header('Location: ../error.php?err=Registration failure: INSERT');
            }
        }
        header('Location: ./continue.php');
    }
}
?>

What can I do to fix this? I want the password that is changed to be in format like while registration. Because now, when I change password, it's hashed but not + salted so it doesnt work when logging in with new password.
EDIT:
Here is login script:
<?php
include_once 'psl-config.php';

function sec_session_start() {
    $session_name = 'sec_session_id';   // Set a custom session name
    $secure = SECURE;
    // This stops JavaScript being able to access the session id.
    $httponly = true;
    // Forces sessions to only use cookies.
    if (ini_set('session.use_only_cookies', 1) === FALSE) {
        header(""Location: ../error.php?err=Could not initiate a safe session (ini_set)"");
        exit();
    }
    // Gets current cookies params.
    $cookieParams = session_get_cookie_params();
    session_set_cookie_params($cookieParams[""lifetime""],
        $cookieParams[""path""], 
        $cookieParams[""domain""], 
        $secure,
        $httponly);
    // Sets the session name to the one set above.
    session_name($session_name);
    session_start();            // Start the PHP session 
    session_regenerate_id(true);    // regenerated the session, delete the old one. 
}
function login($email, $password, $mysqli) {
    // Using prepared statements means that SQL injection is not possible. 
    if ($stmt = $mysqli->prepare(""SELECT id, username, password 
        FROM members
       WHERE email = ?
        LIMIT 1"")) {
        $stmt->bind_param('s', $email);  // Bind ""$email"" to parameter.
        $stmt->execute();    // Execute the prepared query.
        $stmt->store_result();

        // get variables from result.
        $stmt->bind_result($user_id, $username, $db_password );
        $stmt->fetch();

        // hash the password
        $passwordHash = password_hash($password, PASSWORD_BCRYPT);
        if ($stmt->num_rows == 1) {
            // If the user exists we check if the account is locked
            // from too many login attempts 

            if (checkbrute($user_id, $mysqli) == true) {
                // Account is locked 
                // Send an email to user saying their account is locked
                return false;
            } else {
                // Check if the password in the database matches
                // the password the user submitted.
                if ($db_password == $password) {
                    // Password is correct!
                    // Get the user-agent string of the user.
                    $user_browser = $_SERVER['HTTP_USER_AGENT'];
                    // XSS protection as we might print this value
                    $user_id = preg_replace(""/[^0-9]+/"", """", $user_id);
                    $_SESSION['user_id'] = $user_id;
                    // XSS protection as we might print this value
                    $username = preg_replace(""/[^a-zA-Z0-9_\-]+/"", 
                                                                """", 
                                                                $username);
                    $_SESSION['username'] = $username;
            $_SESSION['email'] = $email;
                    $_SESSION['login_string'] = hash('sha512', 
                              $password . $user_browser);
                    // Login successful.
                    return true;
                } else {
                    // Password is not correct
                    // We record this attempt in the database
                    $now = time();
                    $mysqli->query(""INSERT INTO login_attempts(user_id, time)
                                    VALUES ('$user_id', '$now')"");
                    return false;
                }
            }
        } else {
            // No user exists.
            return false;
        }
    }
}
function checkbrute($user_id, $mysqli) {
    // Get timestamp of current time 
    $now = time();

    // All login attempts are counted from the past 2 hours. 
    $valid_attempts = $now - (2 * 60 * 60);

    if ($stmt = $mysqli->prepare(""SELECT time 
                             FROM login_attempts 
                             WHERE user_id = ? 
                            AND time > '$valid_attempts'"")) {
        $stmt->bind_param('i', $user_id);

        // Execute the prepared query. 
        $stmt->execute();
        $stmt->store_result();

        // If there have been more than 5 failed logins 
        if ($stmt->num_rows > 5) {
            return true;
        } else {
            return false;
        }
    }
}
function login_check($mysqli) {
    // Check if all session variables are set 
    if (isset($_SESSION['user_id'], 
            $_SESSION['email'],
                        $_SESSION['username'], 
                        $_SESSION['login_string'])) {

        $user_id = $_SESSION['user_id'];
    $email = $_SESSION['email'];
        $login_string = $_SESSION['login_string'];
        $username = $_SESSION['username'];

        // Get the user-agent string of the user.
        $user_browser = $_SERVER['HTTP_USER_AGENT'];

        if ($stmt = $mysqli->prepare(""SELECT password 
                                      FROM members 
                                      WHERE id = ? LIMIT 1"")) {
            // Bind ""$user_id"" to parameter. 
            $stmt->bind_param('i', $user_id);
            $stmt->execute();   // Execute the prepared query.
            $stmt->store_result();

            if ($stmt->num_rows == 1) {
                // If the user exists get variables from result.
                $stmt->bind_result($password);
                $stmt->fetch();
                $login_check = hash('sha512', $password . $user_browser);

                if ($login_check == $login_string) {
                    // Logged In!!!! 
                    return true;
                } else {
                    // Not logged in 
                    return false;
                }
            } else {
                // Not logged in 
                return false;
            }
        } else {
            // Not logged in 
            return false;
        }
    } else {
        // Not logged in 
        return false;
    }
}
function esc_url($url) {

    if ('' == $url) {
        return $url;
    }

    $url = preg_replace('|[^a-z0-9-~+_.?#=!&;,/:%@$\|*\'()\\x80-\\xff]|i', '', $url);

    $strip = array('%0d', '%0a', '%0D', '%0A');
    $url = (string) $url;

    $count = 1;
    while ($count) {
        $url = str_replace($strip, '', $url, $count);
    }

    $url = str_replace(';//', '://', $url);

    $url = htmlentities($url);

    $url = str_replace('&amp;', '&#038;', $url);
    $url = str_replace(""'"", '&#039;', $url);

    if ($url[0] !== '/') {
        // We're only interested in relative links from $_SERVER['PHP_SELF']
        return '';
    } else {
        return $url;
    }
}

","There are some more comments in the modified code. Here is how you should do it.
Get the old salt from your database
//Gather database information
while ($rows = mysql_fetch_array($query)):

    $username = $rows['username']; //single equals to assign value
    $password = $rows['password']; 
    $user_salt = $rows['salt']; // here get old salt

endwhile; 

and this part to read and use the old salt 
else:

    //$msg = ""Your Password has been changed.""; 
  $salted_password = hash('sha512', $npassword . $user_salt);// here use old salt  
 mysql_query(""UPDATE members SET password = '$salted_password' WHERE username = '$username'"");


endif;

","1102","<php><mysql><hash><salt>","1","0","2","2015-03-05 13:14:41","28805334","2","","4607627","","2015-03-05 07:38:47","2015-03-01 20:34:09",""
"28798722","Change password script works but doesn't write correct password into database","I have this script for change password :
<?php
/*
Page/Script Created by Shawn Holderfield
*/

//Establish output variable - For displaying Error Messages
$msg = """";

//Check to see if the form has been submitted
if (mysql_real_escape_string($_POST['submit'])):

    //Establish Post form variables
    $username = mysql_real_escape_string($_POST['username']);
    $password = mysql_real_escape_string(md5($_POST['password']));
    $npassword = mysql_real_escape_string(md5($_POST['npassword']));
    $rpassword = mysql_real_escape_string(md5($_POST['rpassword']));

    //Connect to the Database Server
    mysql_connect(""mysql.."", """", """")or die(mysql_error());

    // Connect to the database
    mysql_select_db("""") or die(mysql_error());

    // Query the database - To find which user we're working with
    $sql = ""SELECT * FROM members WHERE username = '$username' "";
    $query = mysql_query($sql);
    $numrows = mysql_num_rows($query);
    //Gather database information
    while ($rows = mysql_fetch_array($query)):

        $username == $rows['username'];
        $password == $rows['password'];


    endwhile;

    //Validate The Form
    if (empty($username) || empty($password) || empty($npassword) || empty($rpassword)):

        $msg = ""All fields are required"";

    elseif ($numrows == 0):

        $msg = ""This username does not exist"";

    elseif ($password != $password):

        $msg = ""The CURRENT password you entered is incorrect."";

    elseif ($npassword != $rpassword):

        $msg = ""Your new passwords do not match"";

    elseif ($npassword == $password):

        $msg = ""Your new password cannot match your old password"";

    else:

        //$msg = ""Your Password has been changed."";
        mysql_query(""UPDATE members SET password = '$npassword' WHERE username = '$username'"");



        endif;
endif;

?>
<html>
    <head>
        <title>Change Password</title>
    </head>
    <body>
            <form method=""POST"" action="""">
                <table border=""0"">
                    <tr>
                        <td align=""right"">Username: </td>
                        <td><input type=""TEXT"" name=""username"" value=""""/></td>
                    </tr>
                    <tr>
                        <td align=""right"">Current Password: </td>
                        <td><input type=""password"" name=""password"" value=""""/></td>
                    </tr>
                    <tr>
                        <td align=""right"">New Password: </td>
                        <td><input type=""password"" name=""npassword"" value=""""/></td>
                    </tr>
                    <tr>
                        <td align=""right"">Repeat New Password: </td>
                        <td><input type=""password"" name=""rpassword"" value=""""/></td>
                    </tr>
                    <tr><td>
                        <input type=""submit"" name=""submit"" value=""Change Password""/>
                        </td>
                    </tr>
                </table>
            </form>
        <br>
<?php echo $msg; ?>
    </body>
</html>

This actually works fine, access databse and overwrite the current password, but it does not hash the password like while registration 
Registration process script:
<?php
include_once 'db_connect.php';
include_once 'psl-config.php';

$error_msg = """";

if (isset($_POST['username'], $_POST['email'], $_POST['p'])) {
    // Sanitize and validate the data passed in
    $username = filter_input(INPUT_POST, 'username', FILTER_SANITIZE_STRING);
    $email = filter_input(INPUT_POST, 'email', FILTER_SANITIZE_EMAIL);
    $email = filter_var($email, FILTER_VALIDATE_EMAIL);
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        // Not a valid email
        $error_msg .= '<p class=""error"">The email address you entered is not valid</p>';
    }

    $password = filter_input(INPUT_POST, 'p', FILTER_SANITIZE_STRING);
    if (strlen($password) != 128) {
        // The hashed pwd should be 128 characters long.
        // If it's not, something really odd has happened
        $error_msg .= '<p class=""error"">Invalid password configuration.</p>';
    }

    // Username validity and password validity have been checked client side.
    // This should should be adequate as nobody gains any advantage from
    // breaking these rules.
    //

    $prep_stmt = ""SELECT id FROM members WHERE email = ? LIMIT 1"";
    $stmt = $mysqli->prepare($prep_stmt);

   // check existing email  
    if ($stmt) {
        $stmt->bind_param('s', $email);
        $stmt->execute();
        $stmt->store_result();

        if ($stmt->num_rows == 1) {
            // A user with this email address already exists
            $error_msg .= '<p class=""error"">A user with this email address already exists.</p>';
                        $stmt->close();
        }
                $stmt->close();
    } else {
        $error_msg .= '<p class=""error"">Database error Line 39</p>';
                $stmt->close();
    }

    // check existing username
    $prep_stmt = ""SELECT id FROM members WHERE username = ? LIMIT 1"";
    $stmt = $mysqli->prepare($prep_stmt);

    if ($stmt) {
        $stmt->bind_param('s', $username);
        $stmt->execute();
        $stmt->store_result();

                if ($stmt->num_rows == 1) {
                        // A user with this username already exists
                        $error_msg .= '<p class=""error"">A user with this username already exists</p>';
                        $stmt->close();
                }
                $stmt->close();
        } else {
                $error_msg .= '<p class=""error"">Database error line 55</p>';
                $stmt->close();
        }

    // TODO: 
    // We'll also have to account for the situation where the user doesn't have
    // rights to do registration, by checking what type of user is attempting to
    // perform the operation.

    if (empty($error_msg)) {
        // Create a random salt
        //$random_salt = hash('sha512', uniqid(openssl_random_pseudo_bytes(16), TRUE)); // Did not work
        $random_salt = hash('sha512', uniqid(mt_rand(1, mt_getrandmax()), true));

        // Create salted password 
        $password = hash('sha512', $password . $random_salt);

        // Insert the new user into the database 
        if ($insert_stmt = $mysqli->prepare(""INSERT INTO members (username, email, password, salt) VALUES (?, ?, ?, ?)"")) {
            $insert_stmt->bind_param('ssss', $username, $email, $password, $random_salt);
            // Execute the prepared query.
            if (! $insert_stmt->execute()) {
                header('Location: ../error.php?err=Registration failure: INSERT');
            }
        }
        header('Location: ./continue.php');
    }
}
?>

What can I do to fix this? I want the password that is changed to be in format like while registration. Because now, when I change password, it's hashed but not + salted so it doesnt work when logging in with new password.
EDIT:
Here is login script:
<?php
include_once 'psl-config.php';

function sec_session_start() {
    $session_name = 'sec_session_id';   // Set a custom session name
    $secure = SECURE;
    // This stops JavaScript being able to access the session id.
    $httponly = true;
    // Forces sessions to only use cookies.
    if (ini_set('session.use_only_cookies', 1) === FALSE) {
        header(""Location: ../error.php?err=Could not initiate a safe session (ini_set)"");
        exit();
    }
    // Gets current cookies params.
    $cookieParams = session_get_cookie_params();
    session_set_cookie_params($cookieParams[""lifetime""],
        $cookieParams[""path""], 
        $cookieParams[""domain""], 
        $secure,
        $httponly);
    // Sets the session name to the one set above.
    session_name($session_name);
    session_start();            // Start the PHP session 
    session_regenerate_id(true);    // regenerated the session, delete the old one. 
}
function login($email, $password, $mysqli) {
    // Using prepared statements means that SQL injection is not possible. 
    if ($stmt = $mysqli->prepare(""SELECT id, username, password 
        FROM members
       WHERE email = ?
        LIMIT 1"")) {
        $stmt->bind_param('s', $email);  // Bind ""$email"" to parameter.
        $stmt->execute();    // Execute the prepared query.
        $stmt->store_result();

        // get variables from result.
        $stmt->bind_result($user_id, $username, $db_password );
        $stmt->fetch();

        // hash the password
        $passwordHash = password_hash($password, PASSWORD_BCRYPT);
        if ($stmt->num_rows == 1) {
            // If the user exists we check if the account is locked
            // from too many login attempts 

            if (checkbrute($user_id, $mysqli) == true) {
                // Account is locked 
                // Send an email to user saying their account is locked
                return false;
            } else {
                // Check if the password in the database matches
                // the password the user submitted.
                if ($db_password == $password) {
                    // Password is correct!
                    // Get the user-agent string of the user.
                    $user_browser = $_SERVER['HTTP_USER_AGENT'];
                    // XSS protection as we might print this value
                    $user_id = preg_replace(""/[^0-9]+/"", """", $user_id);
                    $_SESSION['user_id'] = $user_id;
                    // XSS protection as we might print this value
                    $username = preg_replace(""/[^a-zA-Z0-9_\-]+/"", 
                                                                """", 
                                                                $username);
                    $_SESSION['username'] = $username;
            $_SESSION['email'] = $email;
                    $_SESSION['login_string'] = hash('sha512', 
                              $password . $user_browser);
                    // Login successful.
                    return true;
                } else {
                    // Password is not correct
                    // We record this attempt in the database
                    $now = time();
                    $mysqli->query(""INSERT INTO login_attempts(user_id, time)
                                    VALUES ('$user_id', '$now')"");
                    return false;
                }
            }
        } else {
            // No user exists.
            return false;
        }
    }
}
function checkbrute($user_id, $mysqli) {
    // Get timestamp of current time 
    $now = time();

    // All login attempts are counted from the past 2 hours. 
    $valid_attempts = $now - (2 * 60 * 60);

    if ($stmt = $mysqli->prepare(""SELECT time 
                             FROM login_attempts 
                             WHERE user_id = ? 
                            AND time > '$valid_attempts'"")) {
        $stmt->bind_param('i', $user_id);

        // Execute the prepared query. 
        $stmt->execute();
        $stmt->store_result();

        // If there have been more than 5 failed logins 
        if ($stmt->num_rows > 5) {
            return true;
        } else {
            return false;
        }
    }
}
function login_check($mysqli) {
    // Check if all session variables are set 
    if (isset($_SESSION['user_id'], 
            $_SESSION['email'],
                        $_SESSION['username'], 
                        $_SESSION['login_string'])) {

        $user_id = $_SESSION['user_id'];
    $email = $_SESSION['email'];
        $login_string = $_SESSION['login_string'];
        $username = $_SESSION['username'];

        // Get the user-agent string of the user.
        $user_browser = $_SERVER['HTTP_USER_AGENT'];

        if ($stmt = $mysqli->prepare(""SELECT password 
                                      FROM members 
                                      WHERE id = ? LIMIT 1"")) {
            // Bind ""$user_id"" to parameter. 
            $stmt->bind_param('i', $user_id);
            $stmt->execute();   // Execute the prepared query.
            $stmt->store_result();

            if ($stmt->num_rows == 1) {
                // If the user exists get variables from result.
                $stmt->bind_result($password);
                $stmt->fetch();
                $login_check = hash('sha512', $password . $user_browser);

                if ($login_check == $login_string) {
                    // Logged In!!!! 
                    return true;
                } else {
                    // Not logged in 
                    return false;
                }
            } else {
                // Not logged in 
                return false;
            }
        } else {
            // Not logged in 
            return false;
        }
    } else {
        // Not logged in 
        return false;
    }
}
function esc_url($url) {

    if ('' == $url) {
        return $url;
    }

    $url = preg_replace('|[^a-z0-9-~+_.?#=!&;,/:%@$\|*\'()\\x80-\\xff]|i', '', $url);

    $strip = array('%0d', '%0a', '%0D', '%0A');
    $url = (string) $url;

    $count = 1;
    while ($count) {
        $url = str_replace($strip, '', $url, $count);
    }

    $url = str_replace(';//', '://', $url);

    $url = htmlentities($url);

    $url = str_replace('&amp;', '&#038;', $url);
    $url = str_replace(""'"", '&#039;', $url);

    if ($url[0] !== '/') {
        // We're only interested in relative links from $_SERVER['PHP_SELF']
        return '';
    } else {
        return $url;
    }
}

","Please have a look at the password_hash() and the password_verify() function, MD5 or sha512 are not appropriate to hash passwords, because they are ways too fast and can be brute-forced too easily. The password_hash function will generate the salt on its own, you won't need an extra field in the database to store it.
// Hash a new password for storing in the database.
// The function automatically generates a cryptographically safe salt.
$hashToStoreInDb = password_hash($password, PASSWORD_BCRYPT);

// Check if the hash of the entered login password, matches the stored hash.
// The salt and the cost factor will be extracted from $existingHashFromDb.
$isPasswordCorrect = password_verify($password, $existingHashFromDb);

Note: Using the password_hash function, there is no need to escape the password with mysql_real_escape_string, just use the original user entry.
Edit:
So i will try to point out some problems in your code, to be honest it looks a bit strange. I would try to start anew and use PDO or mysqli instead of the mysql functions, this would make it easier to protect against SQL-injection.
Change-password script
One problem is that you reuse the $password variable, which leads to the wrong comparison, though because you used == instead of = it does nothing:
$password = mysql_real_escape_string(md5($_POST['password']));
...
$password == $rows['password'];
...
elseif ($password != $password):
  $msg = ""The CURRENT password you entered is incorrect."";

I myself spend a lot of time to find descriptive variable names, this helps to prevent such mistakes.
$oldPassword = $_POST['password'];
...
$passwordHashFromDb = $rows['password'];
...
elseif (!password_verify($oldPassword, $passwordHashFromDb))
  $msg = ""The CURRENT password you entered is incorrect."";

Then before you store the new password in the database you calculate the hash:
$username = mysql_real_escape_string($_POST['username']);
$newPassword = $_POST['npassword'];
...
$newPasswordHash = password_hash($newPassword, PASSWORD_BCRYPT);
mysql_query(""UPDATE members SET password = '$newPasswordHash' WHERE username = '$username'"");

Registration-script
In your registration script there are other problems, surely you don't expect the user to enter a 128 character password?
if (strlen($password) != 128) { // looks strange to me

Instead of using a different hash algo, you should use the same as above:
// Create salted password 
$passwordHash = password_hash($password, PASSWORD_BCRYPT);

// Insert the new user into the database 
if ($insert_stmt = $mysqli->prepare(""INSERT INTO members (username, email, password) VALUES (?, ?, ?)"")) {
  $insert_stmt->bind_param('sss', $username, $email, $passwordHash);
...

Login-script
In your login script you check whether the password matches the password stored in the database.
if ($db_password == $password) {
  // Password is correct!

There you should test the hash like this:
if (password_verify($password, $db_password) {
  // Password is correct!

The call to the password_hash() function does not help in a login script and should be removed.
","1102","<php><mysql><hash><salt>","1","2","2","2015-03-05 13:14:41","28805334","2","","4607627","","2015-03-05 07:38:47","2015-03-01 20:34:09",""
"9518541","MD5Decrypter.co.uk reverses md5 hashes?","There is a site called http://www.MD5Decrypter.co.uk where when you give a md5 hash, it gives the original string. How is that possible. As far as I know md5 is an irreversible hash algorithm or is it? Secondly, can salt be used along with md5?
","md5 is a hash algorithme so it allows two words to have the same hashcode. I you do not trust me, I can hash a 5-letter word, 10-letter word, 128-letter word with md5 and it will give me 32 characters every time.
The probleme is that md5 is not cryptographicaly secured. One can analyse it and guess what could have been hash. But the technique used by the site you posted is the rainbow table.
It can also be a dictionary, but it is less common with md5.
If you use a salt with your md5, this generator will not find anything until the rainbow table with your salt is filled.
md5 is usefull to sign a file, a cookie, or the name of a cryptography algorithm. It is not secured to store passwords. Some languages advice you to use whirlpool, bloswfish, salsa20 or sha512 instead of md2/5 sha 1/2/256
","1095","<md5><salt>","0","1","1","2012-03-02 00:04:18","9518895","0","1","1139023","","2012-03-02 00:04:18","2012-03-01 15:04:43",""
"41764725","Authenticating using a Hash password store in the database using ASP.net","Please Need help to check user Authenticating password. When I created the user I used hash + salt to encrypt the password before storage in the database. I want the user to be able to login with the registered password, I am new to Hash.
Html
 <asp:TextBox ID=""txtUsername"" runat=""server"" Width=""267px""   TextMode=""Password""></asp:TextBox>
<asp:TextBox ID=""txtPassword"" runat=""server"" Width=""267px"" TextMode=""Password""></asp:TextBox>
<asp:Button ID=""Login"" runat=""server"" Text=""Login"" onclick=""Login_Click"" 
                Width=""111px"" />

Hash Function used
    public String CreatedSalt(int size)
    {
      var rng = new    System.Security.Cryptography.RNGCryptoServiceProvider();
        var buff = new byte[size];
        rng.GetBytes(buff);
        return Convert.ToBase64String(buff);
    }

    public String GenerateSHA256Hash(String input, String salt)
    {
        byte[] bytes = System.Text.Encoding.UTF8.GetBytes(input + salt);
        System.Security.Cryptography.SHA256Managed sha256hashstring = new System.Security.Cryptography.SHA256Managed();
        byte[] hash = sha256hashstring.ComputeHash(bytes);
        return Convert.ToBase64String(hash);
    }

Login.cs
    SqlConnection con = new SqlConnection(WebConfigurationManager.ConnectionStrings[""MyConn""].ConnectionString);
    con.Open();

    SqlCommand cmd =  con.CreateCommand();
    cmd.CommandText = ""SELECT AdminID FROM   [User]  WHERE  StaffEmail = '"" + txtUsername.Text + ""' AND StaffPassword ='"" + txtPassword.Text + ""'"";
    cmd.ExecuteNonQuery();
    DataTable dt = new DataTable();
    SqlDataAdapter da = new SqlDataAdapter(cmd);
    da.Fill(dt);
    foreach (DataRow dr in dt.Rows)
    {
        Session[""AdminID""] = dr[""AdminID""].ToString();
        Response.Redirect(""AppointmentMenu.aspx"");
    }

    Response.Write(""<script>alert('Please check your Username or Password')</script>"");

","I thing, you need solve some others problems before hashing..
        SqlConnection con = new SqlConnection(WebConfigurationManager.ConnectionStrings[""MyConn""].ConnectionString);
        SqlCommand cmd = con.CreateCommand();
        cmd.CommandText = ""SELECT AdminID FROM   [User]  WHERE  StaffEmail = @userName AND StaffPassword =@pwd"";
        cmd.Parameters.AddWithValue(""@userName"", txtUsername.Text);
        cmd.Parameters.AddWithValue(""@pwd"", txtPassword.Text);
        DataTable dt = new DataTable();
        SqlDataAdapter da = new SqlDataAdapter(cmd);
        da.Fill(dt);
        if (dt != null && dt.Rows.Count >0)
        {
            Session[""AdminID""] = dt.Rows[0][""AdminID""].ToString();
            Response.Redirect(""AppointmentMenu.aspx"");
        }
        else
        {
            Response.Write(""<script>alert('Please check your Username or Password')</script>"");
        }

","1092","<c#><authentication><hash><salt>","0","0","2","2017-01-20 13:51:02","","4","","3088793","","2017-01-20 13:51:02","2017-01-20 13:21:53",""
"41764725","Authenticating using a Hash password store in the database using ASP.net","Please Need help to check user Authenticating password. When I created the user I used hash + salt to encrypt the password before storage in the database. I want the user to be able to login with the registered password, I am new to Hash.
Html
 <asp:TextBox ID=""txtUsername"" runat=""server"" Width=""267px""   TextMode=""Password""></asp:TextBox>
<asp:TextBox ID=""txtPassword"" runat=""server"" Width=""267px"" TextMode=""Password""></asp:TextBox>
<asp:Button ID=""Login"" runat=""server"" Text=""Login"" onclick=""Login_Click"" 
                Width=""111px"" />

Hash Function used
    public String CreatedSalt(int size)
    {
      var rng = new    System.Security.Cryptography.RNGCryptoServiceProvider();
        var buff = new byte[size];
        rng.GetBytes(buff);
        return Convert.ToBase64String(buff);
    }

    public String GenerateSHA256Hash(String input, String salt)
    {
        byte[] bytes = System.Text.Encoding.UTF8.GetBytes(input + salt);
        System.Security.Cryptography.SHA256Managed sha256hashstring = new System.Security.Cryptography.SHA256Managed();
        byte[] hash = sha256hashstring.ComputeHash(bytes);
        return Convert.ToBase64String(hash);
    }

Login.cs
    SqlConnection con = new SqlConnection(WebConfigurationManager.ConnectionStrings[""MyConn""].ConnectionString);
    con.Open();

    SqlCommand cmd =  con.CreateCommand();
    cmd.CommandText = ""SELECT AdminID FROM   [User]  WHERE  StaffEmail = '"" + txtUsername.Text + ""' AND StaffPassword ='"" + txtPassword.Text + ""'"";
    cmd.ExecuteNonQuery();
    DataTable dt = new DataTable();
    SqlDataAdapter da = new SqlDataAdapter(cmd);
    da.Fill(dt);
    foreach (DataRow dr in dt.Rows)
    {
        Session[""AdminID""] = dr[""AdminID""].ToString();
        Response.Redirect(""AppointmentMenu.aspx"");
    }

    Response.Write(""<script>alert('Please check your Username or Password')</script>"");

","You have to hash the input form txtPassword.Text before sending it to the database, with the same methods you used in the sign up:
    string hashedPass = GenerateSHA256Hash(txtPassword.Text, CreatedSalt(128));
    cmd.CommandText = ""SELECT AdminID FROM  [User]  WHERE  StaffEmail = '"" + txtUsername.Text + ""' AND StaffPassword ='"" + hashedPass + ""'"";

Besides that, the CreateSalt method should be private, accessed only by GenerateSHA256Hash, that should get only one string input argument. Then, for any input, the GenerateSHA256Hash should call the CreateSalt method.
","1092","<c#><authentication><hash><salt>","0","0","2","2017-01-20 13:51:02","","4","","3088793","","2017-01-20 13:51:02","2017-01-20 13:21:53",""
"11030426","Password encryption in Sonar","I'm using Yale's CAS to integrate my sonar system and I have problems validating my login username and password, Since I have known that sonar uses crypted_password and salt to store original password, but I can't figure out how sonar generates crypted_password with original password and the random salt. What I need are the encryption algorithm and encryption srategy. 
Any of your reply will be highly appreciated.
","All the encryption-related classes are located in the sonar-plugin-api module. See https://github.com/SonarSource/sonar/tree/master/sonar-plugin-api/src/main/java/org/sonar/api/config
","1090","<encryption><sonarqube><salt>","0","0","1","2012-06-14 11:28:15","","0","","","","","2012-06-14 09:39:29",""
"26996981","Adding salt to hash and generating url...?","I'm finding this a very difficult subject to find a definitive answer for! Hoping you guys can help...
I have the following code
<form action='test2.php?' name ='gen' method='post'>
Text to hash <input type='text' name='pass'><br />
         <input type='submit' value='Go!'>
</form>

<?php
$pass2=$_POST['pass'];
$pass=md5($pass2);
echo $pass;
?>

How would I add a SPECIFIC salt code to the end of the text that the user will input? For example, if the user input PETERPAN, I would like to input ;LivesForever as the salt, which would then obviously return a hash code.
Then I'd like to produce a url using BOTH the input text and the hashed code. This would just need to appear in a div below the input box.
So the url would look like this...
http://www.website.com/+USER_INPUT_VALUE+/randomfolder/+HASH_PRODUCED+
Obviously the produced url won't look exactly like that but you get the idea...
I'm struggling to find an answer to this! 
thanks guys
","You could do a salt by doing something like
$pass = md5($pass2 . $salt)

However, if you want to actually do a secure hash, a function like password_hash is more suitable.
Note that a hash is not just a catch-all security method. Depending on what your use-case is, this may not be very secure. It's worthwhile to look into potential security vectors before using hashes.
","1089","<php><md5><salt>","1","1","3","2014-11-18 15:01:20","26997086","6","","","","","2014-11-18 14:42:49",""
"26996981","Adding salt to hash and generating url...?","I'm finding this a very difficult subject to find a definitive answer for! Hoping you guys can help...
I have the following code
<form action='test2.php?' name ='gen' method='post'>
Text to hash <input type='text' name='pass'><br />
         <input type='submit' value='Go!'>
</form>

<?php
$pass2=$_POST['pass'];
$pass=md5($pass2);
echo $pass;
?>

How would I add a SPECIFIC salt code to the end of the text that the user will input? For example, if the user input PETERPAN, I would like to input ;LivesForever as the salt, which would then obviously return a hash code.
Then I'd like to produce a url using BOTH the input text and the hashed code. This would just need to appear in a div below the input box.
So the url would look like this...
http://www.website.com/+USER_INPUT_VALUE+/randomfolder/+HASH_PRODUCED+
Obviously the produced url won't look exactly like that but you get the idea...
I'm struggling to find an answer to this! 
thanks guys
","from what you describe:
$random = 'dolly'; // specific salt
$pass2 = $_POST['pass'] . $random; // add it to user input

$pass = md5($pass2); // md5() both

$url = 'http://www.website.com/'.$_POST['pass'].'/'.$random.'/'.$pass; // the url you need

echo $pass.'<br>'.$url;

","1089","<php><md5><salt>","1","2","3","2014-11-18 15:01:20","26997086","6","","","","","2014-11-18 14:42:49",""
"26996981","Adding salt to hash and generating url...?","I'm finding this a very difficult subject to find a definitive answer for! Hoping you guys can help...
I have the following code
<form action='test2.php?' name ='gen' method='post'>
Text to hash <input type='text' name='pass'><br />
         <input type='submit' value='Go!'>
</form>

<?php
$pass2=$_POST['pass'];
$pass=md5($pass2);
echo $pass;
?>

How would I add a SPECIFIC salt code to the end of the text that the user will input? For example, if the user input PETERPAN, I would like to input ;LivesForever as the salt, which would then obviously return a hash code.
Then I'd like to produce a url using BOTH the input text and the hashed code. This would just need to appear in a div below the input box.
So the url would look like this...
http://www.website.com/+USER_INPUT_VALUE+/randomfolder/+HASH_PRODUCED+
Obviously the produced url won't look exactly like that but you get the idea...
I'm struggling to find an answer to this! 
thanks guys
","You could just concatenate the salt string to the end of the user inputted string.
<?php
    $pass2=$_POST['pass'] . 'LivesForever';
    $pass=md5($pass2);
    echo $pass;
?>

Then build the url: 
$url = 'http://www.website.com/' . $_POST['pass'] . '/' . $randomfolder . '/' . $pass;

","1089","<php><md5><salt>","1","0","3","2014-11-18 15:01:20","26997086","6","","","","","2014-11-18 14:42:49",""
"43101904","Bcrypt salt treating byte object as string and wont hash password","Answered
I have a Flask web app with a Postgres DB. I'm trying to implement database 
salting with bcrypt, but it seems as though my byte representation is being viewed as a string. To be clear: I'm creating the hashed password with no problem, but when authorizing a login attempt, generating the comparison hash with the passed salt isn't working. Here's the error stack that occurs when I attempt to login:
lost/app/views/login.py"", line 37, in login
authorized = helpers.authorize(username, password)

lost/app/helpers.py"", line 108, in authorize
return _check_hash_for_user(username, password)

lost/app/helpers.py"", line 93, in _check_hash_for_user
generated_hash = _recreate_hash(password, _get_salt_for_user(username))

lost/app/helpers.py"", line 100, in _recreate_hash
hash_pass = bcrypt.hashpw(password.encode('utf-8'), salt)

lost/venv/lib/python3.6/site-packages/bcrypt/__init__.py"", line 62, in hashpw
raise TypeError(""Unicode-objects must be encoded before hashing"")


How my users table is created:
CREATE TABLE users (
    user_pk     SERIAL PRIMARY KEY,
    username    VARCHAR(16) UNIQUE NOT NULL,
    salt        VARCHAR(72) NOT NULL,
    password    VARCHAR(256) NOT NULL


Relevant aspects of my login view
username = request.form.get('username', None)
password = request.form.get('password', None)

# If user exists...
authorized = helpers.authorize(username, password)

if authorized:
    # login...


Here's how I created the user's password and salt
salt = bcrypt.gensalt(12)
password = bcrypt.hashpw(password.encode('utf-8'), salt)


The auth aspect of helpers.py
def _get_hash_for_user(username):
    password = db_query(""SELECT password FROM users WHERE username=%s;"", [username])[0][0]
    return password


def _get_salt_for_user(username):
    salt = db_query(""SELECT salt FROM users WHERE username=%s;"", [username])[0][0]
    return salt


def _create_password_hash(password):
    salt = bcrypt.gensalt(16)
    hashed_pass = bcrypt.hashpw(password, salt)
    return hashed_pass, salt


def _check_hash_for_user(username, password):
    stored_hash = _get_hash_for_user(username)
    generated_hash = _recreate_hash(password, _get_salt_for_user(username))
    return stored_hash == generated_hash


def _recreate_hash(password, salt):
    hash_pass = bcrypt.hashpw(password.encode('utf-8'), salt)
    return hash_pass


def authorize(username, password):
    return _check_hash_for_user(username, password)

edit:
At the behest of somebody trying to help me through this issue, I am now creating the users table with password and salt using BYTEA data type instead of VARCHAR() - other issues ensued, but I'll be working through them.
","As user2357112 indicated: you're getting your salt from the database as a str and it needs to be cast to bytes.
MCVE to reproduce error:
import bcrypt
salt = str(bcrypt.gensalt())
pw = ""Dagg Durneden Co. Mfgrs. Green Hood Shirts""
pw_hash = bcrypt.hashpw(pw.encode('utf-8'), salt)

Fix:
pw_hash = bcrypt.hashpw(pw.encode('utf-8'), bytes(salt))

","1086","<python><postgresql><flask><bcrypt><salt>","2","1","2","2017-03-31 22:20:11","43102474","6","","7304377","","2017-03-29 23:10:08","2017-03-29 18:56:00",""
"43101904","Bcrypt salt treating byte object as string and wont hash password","Answered
I have a Flask web app with a Postgres DB. I'm trying to implement database 
salting with bcrypt, but it seems as though my byte representation is being viewed as a string. To be clear: I'm creating the hashed password with no problem, but when authorizing a login attempt, generating the comparison hash with the passed salt isn't working. Here's the error stack that occurs when I attempt to login:
lost/app/views/login.py"", line 37, in login
authorized = helpers.authorize(username, password)

lost/app/helpers.py"", line 108, in authorize
return _check_hash_for_user(username, password)

lost/app/helpers.py"", line 93, in _check_hash_for_user
generated_hash = _recreate_hash(password, _get_salt_for_user(username))

lost/app/helpers.py"", line 100, in _recreate_hash
hash_pass = bcrypt.hashpw(password.encode('utf-8'), salt)

lost/venv/lib/python3.6/site-packages/bcrypt/__init__.py"", line 62, in hashpw
raise TypeError(""Unicode-objects must be encoded before hashing"")


How my users table is created:
CREATE TABLE users (
    user_pk     SERIAL PRIMARY KEY,
    username    VARCHAR(16) UNIQUE NOT NULL,
    salt        VARCHAR(72) NOT NULL,
    password    VARCHAR(256) NOT NULL


Relevant aspects of my login view
username = request.form.get('username', None)
password = request.form.get('password', None)

# If user exists...
authorized = helpers.authorize(username, password)

if authorized:
    # login...


Here's how I created the user's password and salt
salt = bcrypt.gensalt(12)
password = bcrypt.hashpw(password.encode('utf-8'), salt)


The auth aspect of helpers.py
def _get_hash_for_user(username):
    password = db_query(""SELECT password FROM users WHERE username=%s;"", [username])[0][0]
    return password


def _get_salt_for_user(username):
    salt = db_query(""SELECT salt FROM users WHERE username=%s;"", [username])[0][0]
    return salt


def _create_password_hash(password):
    salt = bcrypt.gensalt(16)
    hashed_pass = bcrypt.hashpw(password, salt)
    return hashed_pass, salt


def _check_hash_for_user(username, password):
    stored_hash = _get_hash_for_user(username)
    generated_hash = _recreate_hash(password, _get_salt_for_user(username))
    return stored_hash == generated_hash


def _recreate_hash(password, salt):
    hash_pass = bcrypt.hashpw(password.encode('utf-8'), salt)
    return hash_pass


def authorize(username, password):
    return _check_hash_for_user(username, password)

edit:
At the behest of somebody trying to help me through this issue, I am now creating the users table with password and salt using BYTEA data type instead of VARCHAR() - other issues ensued, but I'll be working through them.
","OP answering his own question - thanks to everybody's help
It wasn't intelligent to store hashes as varchars in my database and continue flipping them within my code. Instead, I changed the users table to store the hashed password and the salt as BYTEA data types. 
After that, I changed my password and salt getter functions (in auth.py) by casting the return type as byte()
so...
def _get_hash_for_user(username):
    password = byte(db_query(""SELECT password FROM users WHERE username=%s;"", [username])[0][0])
    return password


def _get_salt_for_user(username):
    salt = byte(db_query(""SELECT salt FROM users WHERE username=%s;"", [username])[0][0])
    return salt

","1086","<python><postgresql><flask><bcrypt><salt>","2","0","2","2017-03-31 22:20:11","43102474","6","","7304377","","2017-03-29 23:10:08","2017-03-29 18:56:00",""
"2998999","Can someone point me to a good PHP/MySQL salted hashed password implementation?","After reading about salts password hashing Id like to implement a simple version for an admin area to a site Im building.
If you have any good links with code that have implemented this idea well, I would appreciate it if you could share.
Thanks,
","function encodePwd($salt, $string) {
   return sha1( $salt . $string );
}

think about salt randomization for a minute though. Password encoding specifically. 
If i have salt of ""random"" and a password of ""complex"", my sha1 would be 
e55ec45f2873a04d2b888a5f59dd3f9d3bb25329

that's stored in the database. I want to check against that. 
So when a user supplies me ""complex"" as a password, i tag ""random"" in front of it and encode it to get the same hash. If they equal, then bazinga! i'm set. 
But what if that was random?
salt when it was stored:  ""random""
SHA1: e55ec45f2873a04d2b888a5f59dd3f9d3bb25329

salt when the user put it in: ""apple""
SHA1: e07b207d77a0bd27d321552fc934b186559f9f42

how am i going to match those?
If you are looking for a more secure method, use data that you have and that is constant like the username or id of user or something (preferably something that won't change). You need a pattern you can rely on. 
username would work good (you'd have to make sure to update password if they ever changed the username) that way authentication could look like 
`WHERE `username` = '&username' AND `password` = '"" . encodePwd( $username, $password ) . ""'""`

function encodePwd( $username, $password) {
   // maybe modify username on a non-random basis? - like
   // $username = sha1( substr($username, 2)); // assuming usernames have a min-length requirement
   return sha1( $username  . $password ) ;
}

","1079","<php><hash><passwords><salt>","7","3","8","2014-01-07 12:21:34","2999105","2","5","135152","","2010-06-08 16:17:34","2010-06-08 15:54:14",""
"2998999","Can someone point me to a good PHP/MySQL salted hashed password implementation?","After reading about salts password hashing Id like to implement a simple version for an admin area to a site Im building.
If you have any good links with code that have implemented this idea well, I would appreciate it if you could share.
Thanks,
","I don't have a link to available code, but what I've done in the past is to generate a randomized salt - $salt = rand(1,1000000000); -  and save it in a session.  I pass that salt to a login page and then use JavaScript to create a SHA hash of the salt + password which is submitted rather than a plaintext password.  Since the salt is stored in the session I can then use that to see if the login hash matches the salt + password hash stored in the db.
","1079","<php><hash><passwords><salt>","7","2","8","2014-01-07 12:21:34","2999105","2","5","135152","","2010-06-08 16:17:34","2010-06-08 15:54:14",""
"2998999","Can someone point me to a good PHP/MySQL salted hashed password implementation?","After reading about salts password hashing Id like to implement a simple version for an admin area to a site Im building.
If you have any good links with code that have implemented this idea well, I would appreciate it if you could share.
Thanks,
","Registration process: User enters a password. System generates a salt value from random data (could be a hash of the time & PID or something). Systems generates a hash value of the password & salt value and stores both of these in the registration table.
Login process: User enters a password. System pulls the salt value from the database and hashes it and the password and compares that against the hashed password value put into the database during registration.
The plaintext password is never stored in the database. The salt value is never visible to the client.
","1079","<php><hash><passwords><salt>","7","6","8","2014-01-07 12:21:34","2999105","2","5","135152","","2010-06-08 16:17:34","2010-06-08 15:54:14",""
"2998999","Can someone point me to a good PHP/MySQL salted hashed password implementation?","After reading about salts password hashing Id like to implement a simple version for an admin area to a site Im building.
If you have any good links with code that have implemented this idea well, I would appreciate it if you could share.
Thanks,
","There are so many ways you can create a salt string, but i think you don't need to think a lot about your salt strength.
I hash passwords like this
$hash = sha1(strlen($password) . md5($password) . $salt);

I think its the best performance between speed, and ""security"".
function salt($lenght = 9) {
    $numbers = '0123456789';
    $chars = 'qwertzuiopasdfghjklyxcvbnm';

    $password = '';
    $alt = time() % 2;
    for ($i = 0; $i < $length; $i++) {
        if ($alt == 1) 
        {
            $password .= $chars[(rand() % strlen($chars))];
            $alt = 0;
        } else 
        {
            $password .= $numbers[(rand() % strlen($numbers))];
            $alt = 1;
        }
    }
    return $password;
}

","1079","<php><hash><passwords><salt>","7","0","8","2014-01-07 12:21:34","2999105","2","5","135152","","2010-06-08 16:17:34","2010-06-08 15:54:14",""
"2998999","Can someone point me to a good PHP/MySQL salted hashed password implementation?","After reading about salts password hashing Id like to implement a simple version for an admin area to a site Im building.
If you have any good links with code that have implemented this idea well, I would appreciate it if you could share.
Thanks,
","the code is simple, and dan heberden has already provided it.
a salt is simply a piece of text that you append or prepend to a password before generating a hash. eg, if your password is 'password' and the salt is 'salt' then the hash will be hashFunction('saltpassword') instead of hashFunction('password').
salts are generally used to avoid rainbow password cracks - this is where a large list of passwords and their hashes are checked against the hashed password. eg in the above example, say there is a hash 123456 which corresponds to hashFunction('password'), if the attacker knows your hash is 123456 then they know your password is 'password'.
your salt should be a random string of letters and numbers - eg kjah!!sdf986. it's very very unlikely for someone to have a rainbow table including kjah!!sdf986password so even if someone gets your hashed password then it's kinda useless.
however, you obviously need to use the same salt every time, or at least store the salt as well as the password. because if you pick a random salt every time chances are your hashed salt+password will not be the same :D
","1079","<php><hash><passwords><salt>","7","0","8","2014-01-07 12:21:34","2999105","2","5","135152","","2010-06-08 16:17:34","2010-06-08 15:54:14",""
"2998999","Can someone point me to a good PHP/MySQL salted hashed password implementation?","After reading about salts password hashing Id like to implement a simple version for an admin area to a site Im building.
If you have any good links with code that have implemented this idea well, I would appreciate it if you could share.
Thanks,
","If you need really secure hashes, please use the Portable PHP hashing framework. 
I'd also recommend this Month of PHP security article that deals extensively with password hashing and the security of hashes.
","1079","<php><hash><passwords><salt>","7","1","8","2014-01-07 12:21:34","2999105","2","5","135152","","2010-06-08 16:17:34","2010-06-08 15:54:14",""
"2998999","Can someone point me to a good PHP/MySQL salted hashed password implementation?","After reading about salts password hashing Id like to implement a simple version for an admin area to a site Im building.
If you have any good links with code that have implemented this idea well, I would appreciate it if you could share.
Thanks,
","Well, here's what I would do:
function makeToken($length = 16) {
    if ($length > 16) {
        $ret = '';
        while ($length > 0) {
            $ret .= makeToken(16);
            $length -= 16;
        }
        if ($length < 0) {
            $ret = substr($ret, 0, $length);
        }
        return $ret;
    }
    $stub = '';
    for ($i = 0; $i < 100; $i++) {
        $stub .= chr(mt_rand(1, 254));                
    }
    $hash = sha1($stub);
    $hashLen = strlen($hash);
    $ret = '';
    for ($i = 0; $i < $length; $i++) {
        $ret .= $hash[mt_rand(0, $hashLen - 1)];
    }
    return $ret;
}

function makeSaltedHash($string, $salt = '') {
    if (empty($salt)) { 
        $salt = makeToken();
    }
    $hash = '';
    for ($i = 0; $i < 200; $i++) {
        $hash = sha1($hash . $salt . $string);
    }
    return $hash . ':' . $salt;
}

function verifySaltedHash($string, $hash) {
    if (strpos($string, ':') === false) return false;
    list ($base, $salt) = explode(':', $hash);
    $test = makeSaltedHash($string, $salt);
    return $test === $hash;
}

The rational is this:
First, generate a random salt (this will always return a hex string, so it can be used for tokens etc).  Then loop over a hashing function (sha1 in this case) more than 1 time.  This is so that it becomes more expensive to generate a rainbow table (200x as expensive in this case) while adding relatively little expense to generation.  
Usage:
To generate a hash:
$hash = makeSaltedHash($password);

To verify the hash:
$bool = verifySaltedHash($password, $savedHash);

To generate a token (CSRF protection, session_id, etc), you can do it a few ways:
Fixed Length:
$token = makeToken(32);

Random Length:
$token = makeToken(mt_rand(64,128));

Edit: Increased the repetitions on sha1 in the hashing function.
","1079","<php><hash><passwords><salt>","7","3","8","2014-01-07 12:21:34","2999105","2","5","135152","","2010-06-08 16:17:34","2010-06-08 15:54:14",""
"2998999","Can someone point me to a good PHP/MySQL salted hashed password implementation?","After reading about salts password hashing Id like to implement a simple version for an admin area to a site Im building.
If you have any good links with code that have implemented this idea well, I would appreciate it if you could share.
Thanks,
","Could you use the built in crypt(...) function?
... Usage ...
crypt('rasmuslerdorf', '$1$rasmusle$')

... Result ...
MD5: $1$rasmusle$rISCgZzpwk3UhDidwXvin0

... There are more examples and other hash methods available in the documentation.
","1079","<php><hash><passwords><salt>","7","0","8","2014-01-07 12:21:34","2999105","2","5","135152","","2010-06-08 16:17:34","2010-06-08 15:54:14",""
"14352849","Using BCrypt, and generating salts","SO.
I want to use BCrypt for my user authentication form. 
I can register a user using the code
<?php
$salt = '$2a$07$R.gJb2U2N.FmZ4hPp1y2CN$';
crypt(""secretpassword"", $salt);
?>

Here instead of using a constant salt. I want to generate random salts using 
// Posted Code from http://pastebin.com/wLxDEhD7.
$Allowed_Chars =
'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789./';
$Chars_Len = 63;
$salt = """";
for($i=0;$i<45 ;$i++)
{
    $salt .= $Allowed_Chars[mt_rand(0,$Chars_Len)];
}

And store it into the database. Until this I am clear(I Hope :D)
Next what I need is to check the password when the user logs in.
For that I need the user's input data, the salt used for that user.
crypt(""secretpassword"", $salt);

I can get the user input, but how will I know the salt that has been used?
I am not clear on this.
Codes have been copied from phpmaster.com and http://pastebin.com/wLxDEhD7 (from a question asked on SO, I am unable to find the question again)
This is being used purely for educational purposes. 
","The salt is stored within the hash generated by BCrypt. So just doing this will work:
$passwordIsOk = crypt($password, $hash) === $hash;

","1074","<php><salt><encryption><bcrypt>","1","2","1","2013-01-16 07:06:05","14352900","3","2","","user1744345","2013-01-16 07:06:05","2013-01-16 06:55:38",""
"46251506","CryptoJS PBKDF2 and salt hash method not working","I am trying to use PBKDF2 and salt hashing from CryptoJS to store my password. This is the part where I hash the user password from registration:
var passwordInput = document.getElementById(""txtPasswordInput"").value;
var salt = CryptoJS.lib.WordArray.random(128/8);
var key512Bits1000Iterations = CryptoJS.PBKDF2(passwordInput, salt, { keySize: 512/32, iterations: 1000 });

console.log(salt.toString());
console.log(key512Bits1000Iterations.toString());

With abcd1234 as password, I managed to store these into my database:
Salt: cec16a7e68e0f3e49f729dfd90b0893a
Password: d974b96a494f39aec7f1fa6c495b4783b43e579c070b695...

At my login page, I am trying to compute the hash again based on user input to verify the credential:
var passwordInput = document.getElementById(""txtPassword"").value;
// retrieve from firebase
var password = accountData.password;
var salt = accountData.salt;
var key512Bits1000Iterations = CryptoJS.PBKDF2(passwordInput, salt, { keySize: 512/32, iterations: 1000 });
console.log(salt.toString());
console.log(key512Bits1000Iterations.toString());

if(password != key512Bits1000Iterations){
console.log('wrong');
}else{
console.log('correct');
}

However, it kept returning me 'wrong'. I printed out the hashsed password and both of them are different though.
Also, after I pressed on the register or login button, the hashing algorithm actually took a while to compute before my browser returns to responsive again. Is the algorithm designed to be slow in computing? Any ideas how to overcome this?
Any ideas? Thanks!
","On login page, the salt needs to be parsed as hex. 
Yes, PBKDF2 is designed to be slow.  You can speed it up with fewer iterations  at the cost of security. 
","1063","<javascript><hash><salt><cryptojs>","0","1","1","2017-09-16 07:58:47","","0","","","","","2017-09-16 07:45:45",""
"11738250","PHP crypt function password encoding","The following code returns the same encrypted password whichever way round. Why and how do we stop this.
$pwd = 'shits8888';
$salt = '50153fc193af9';

echo crypt($pwd,$salt)

Obviously something is missing as this is returning the same thing
$pwd = 'shits8888hjhfgnsdkjf8744884';
$salt = '50153fc193af9';

echo crypt($pwd,$salt)

","
The standard DES-based crypt() returns the salt as the first two characters of the output. It also only uses the first eight characters of str, so longer strings that start with the same eight characters will generate the same result (when the same salt is used).

http://php.net/manual/en/function.crypt.php
If you want more control over the algorithm used for hash, I suggest you take a look at mcrypt.
Note also that crypt() (despite the name) does not actually encrypt a string, it just generates a hash. If you are specifying the salt, which you are presumably also storing somewhere, you might do better with something like this:
function my_crypt ($string, $salt) {
  return sha1($string.$salt); // ...or your hashing function of choice
}

","1060","<php><salt><crypt>","2","6","2","2014-03-11 21:02:59","","2","","","","","2012-07-31 10:39:01",""
"11738250","PHP crypt function password encoding","The following code returns the same encrypted password whichever way round. Why and how do we stop this.
$pwd = 'shits8888';
$salt = '50153fc193af9';

echo crypt($pwd,$salt)

Obviously something is missing as this is returning the same thing
$pwd = 'shits8888hjhfgnsdkjf8744884';
$salt = '50153fc193af9';

echo crypt($pwd,$salt)

","Referenced from the manual:
The standard DES-based crypt() returns the salt as the first two characters of the output. It also only uses the first eight characters of str, so longer strings that start with the same eight characters will generate the same result (when the same salt is used). 
Both entries have got the same first 8 characters and the same salt. so it must return the same result.
For example:
echo crypt('12345678xxxxx','50153fc193af9');
echo crypt('12345678yyyyyy','50153fc193af9');

will both return 50gyRGMzn6mi6
because they share the same salt and the same first 8 characters
Every encryption algorithm has got a limit, even md5 gets repeated at some point.
","1060","<php><salt><crypt>","2","0","2","2014-03-11 21:02:59","","2","","","","","2012-07-31 10:39:01",""
"42972212","saltstack: run parallel / wait for other jobs","I have multiple salt states and commands which are executed while other jobs could currently running.
Then I get an error for new jobs, something like:

The function ""state.apply"" is running as PID 3869 and was started at 2017, Mar 23 10:19:32.691177 with jid 20170323101932691177

Is there a way to wait for other jobs to complete first or to run the job in parallel?
","You can queue the execution of salt states:
salt minion_A state.apply some.state queue=True
This will queue the state if any other states are currently running, keep in mind that this option starts a new thread for each queued state run, so use this option sparingly (https://docs.saltstack.com/en/latest/ref/modules/all/salt.modules.state.html).
","1059","<salt><salt-stack>","3","3","3","2017-08-29 18:22:53","44153273","0","2","","","","2017-03-23 09:39:03",""
"42972212","saltstack: run parallel / wait for other jobs","I have multiple salt states and commands which are executed while other jobs could currently running.
Then I get an error for new jobs, something like:

The function ""state.apply"" is running as PID 3869 and was started at 2017, Mar 23 10:19:32.691177 with jid 20170323101932691177

Is there a way to wait for other jobs to complete first or to run the job in parallel?
","You could use the saltutil.running function to check if there is a salt job running on a minion, f.e.
salt 'MINION' saltutil.running
See https://docs.saltstack.com/en/latest/ref/modules/all/salt.modules.saltutil.html#salt.modules.saltutil.running
","1059","<salt><salt-stack>","3","0","3","2017-08-29 18:22:53","44153273","0","2","","","","2017-03-23 09:39:03",""
"42972212","saltstack: run parallel / wait for other jobs","I have multiple salt states and commands which are executed while other jobs could currently running.
Then I get an error for new jobs, something like:

The function ""state.apply"" is running as PID 3869 and was started at 2017, Mar 23 10:19:32.691177 with jid 20170323101932691177

Is there a way to wait for other jobs to complete first or to run the job in parallel?
","As of salt version 2017.7.0, you can add parallel=true to your state command, which will attempt to execute tasks in parallel.
","1059","<salt><salt-stack>","3","0","3","2017-08-29 18:22:53","44153273","0","2","","","","2017-03-23 09:39:03",""
"26632240","Find SALT if password and hash are known","I am a noob to security and I was wondering if it is possible to find the SALT if I know the password and hash?
Is there a function to do this?
Thanks
","The salt is usually stored in front of the password hash. The salt must not be encrypted (it's used to spice the hash function which is used to check the password to prevent rainbow table attacks). The size of the salt depends on the algorithm and its configuration. You need to check the actual implementation to see how many characters/bytes are used for the salt.
","1052","<encryption><salt>","1","1","1","2014-10-30 08:53:19","26633178","0","","","","","2014-10-29 13:56:32",""
"6887299","Can someone explain how to do password hashing + salting","I've read on SO (and from other websites found on Google after I tried to look into it a little bit more) that the correct secure way to store passwords in a database is to store the hashed + salted value of a password. On top of that, the salt should be different for each user so hackers can't do harm even if they have the encrypted values.
I'm not quite sure what salting means. From my understanding, you hash the password, then you use another value that you hash (the salt) and combine those two together so the algorithm to retrieve the original password is different for every user.
So basically, what I'd have to do is hash a password, then use a different hash on a different value for each user (ie: the user name or email address) and then I can do a simple math operation on those two values to get the encoded password.
Is that correct or did I just not understand anything about password hashing + salting?
A simple explanation or example would prove to be helpful as the sites I've found don't quite explain clearly what salting a password is.
Edit: After reading comments and answers left so far, I understand that I didn't really understand what a salt was because I'm missing some key concepts and I was making false assumption.
What I'd like to know is: how do you consistently get the same salt if it is randomly-generated? If the salt is stored in the database like some people have mentioned, then I can see how you keep getting the same salt, but that brings another question: How does it make the passwords more secure if anyone with access to the database have access to the salt? Couldn't they just append the (known) salt to all the passwords they try and the result would be the same (bar some minor time loss) than not having one at all?
","What about Secure hash and salt for PHP passwords? It even has examples in PHP.
","1052","<sql><security><hash><salt>","1","0","7","2011-09-07 04:29:33","6887385","4","","804929","","2011-07-31 03:38:04","2011-07-31 03:06:35",""
"6887299","Can someone explain how to do password hashing + salting","I've read on SO (and from other websites found on Google after I tried to look into it a little bit more) that the correct secure way to store passwords in a database is to store the hashed + salted value of a password. On top of that, the salt should be different for each user so hackers can't do harm even if they have the encrypted values.
I'm not quite sure what salting means. From my understanding, you hash the password, then you use another value that you hash (the salt) and combine those two together so the algorithm to retrieve the original password is different for every user.
So basically, what I'd have to do is hash a password, then use a different hash on a different value for each user (ie: the user name or email address) and then I can do a simple math operation on those two values to get the encoded password.
Is that correct or did I just not understand anything about password hashing + salting?
A simple explanation or example would prove to be helpful as the sites I've found don't quite explain clearly what salting a password is.
Edit: After reading comments and answers left so far, I understand that I didn't really understand what a salt was because I'm missing some key concepts and I was making false assumption.
What I'd like to know is: how do you consistently get the same salt if it is randomly-generated? If the salt is stored in the database like some people have mentioned, then I can see how you keep getting the same salt, but that brings another question: How does it make the passwords more secure if anyone with access to the database have access to the salt? Couldn't they just append the (known) salt to all the passwords they try and the result would be the same (bar some minor time loss) than not having one at all?
","I'd say first of all that security is very hard to do right, and that you really should rely on existing libraries to do as much as possible for you. For basic operations like password storage and validation that's definitely true.
EDIT: Removed erroneous info. I'll stick with the only good advice I had, which was not to roll your own.
","1052","<sql><security><hash><salt>","1","0","7","2011-09-07 04:29:33","6887385","4","","804929","","2011-07-31 03:38:04","2011-07-31 03:06:35",""
"6887299","Can someone explain how to do password hashing + salting","I've read on SO (and from other websites found on Google after I tried to look into it a little bit more) that the correct secure way to store passwords in a database is to store the hashed + salted value of a password. On top of that, the salt should be different for each user so hackers can't do harm even if they have the encrypted values.
I'm not quite sure what salting means. From my understanding, you hash the password, then you use another value that you hash (the salt) and combine those two together so the algorithm to retrieve the original password is different for every user.
So basically, what I'd have to do is hash a password, then use a different hash on a different value for each user (ie: the user name or email address) and then I can do a simple math operation on those two values to get the encoded password.
Is that correct or did I just not understand anything about password hashing + salting?
A simple explanation or example would prove to be helpful as the sites I've found don't quite explain clearly what salting a password is.
Edit: After reading comments and answers left so far, I understand that I didn't really understand what a salt was because I'm missing some key concepts and I was making false assumption.
What I'd like to know is: how do you consistently get the same salt if it is randomly-generated? If the salt is stored in the database like some people have mentioned, then I can see how you keep getting the same salt, but that brings another question: How does it make the passwords more secure if anyone with access to the database have access to the salt? Couldn't they just append the (known) salt to all the passwords they try and the result would be the same (bar some minor time loss) than not having one at all?
","One uses a salt to avoid the attacker creating a rainbow table, e.g. a table containing all (usual) passwords and the corresponding hashes, sorted (or somehow easily accessible) by hash. If the attacker has such a table or can create it, and then gets your password database with unsalted hashes, he can easily look up the passwords, even for all of your users at once.
If the hashes are salted (and the attacker gets the salt with the hashes), he will still be able to do the same attack (with only slightly more work to input the salt) - but now this work of building a rainbow table is useless for the next hash with another salt, which means this will need to be done for each user again. This alone is the goal of the salt. A dictionary attack on your single account still needs the same time as before, just the rainbow table is useless.  (To do something against the dictionary attack, see below.)

How exactly the salt is used depends on the algorithm in use. Some hash algorithms (for example bcrypt, which is specially made for password hashing) have a special salt input parameter (or generate the salt themselves and include it in the output):

H = bcrypt(password, hardness)  or  H = bcrypt(salt, password, hardness)

(The first variant generates the salt itself, while the second takes it from the outside. Both include the hash and the hardness parameter in the output.)
Others need to be used in some special mode to use the salt.
A simple variant which works for most hash algorithms would be using HMAC, with the salt as ""message"" input, the password as key:

HMAC(password, salt) = Hash(password ⊕ opad || Hash(ipad ⊕ password || salt) )

where opad and ipad are some constant padding values.
Then you store the salt together with the hash. (For a slightly higher barrier, you could store the hash in another location than the salt. But you will still need both for login.) For login, you then will give the password and the stored salt to your hash function, and compare the result with the stored hash. (Most bcrypt libraries have a ""password verification"" function build in, which do this.)

For password storage it is important to use a slow hash algorithm, not a fast one, to avoid (or really: slow down) brute force or dictionary attacks on the passwords, as most people will have quite short passwords. bcrypt is an algorithm which was made just for this goal (its slowness is adaptable by a parameter).
If you use a fast hash function, be sure to repeat it often enough to be slow again. (But better, really: use bcrypt.)
","1052","<sql><security><hash><salt>","1","2","7","2011-09-07 04:29:33","6887385","4","","804929","","2011-07-31 03:38:04","2011-07-31 03:06:35",""
"6887299","Can someone explain how to do password hashing + salting","I've read on SO (and from other websites found on Google after I tried to look into it a little bit more) that the correct secure way to store passwords in a database is to store the hashed + salted value of a password. On top of that, the salt should be different for each user so hackers can't do harm even if they have the encrypted values.
I'm not quite sure what salting means. From my understanding, you hash the password, then you use another value that you hash (the salt) and combine those two together so the algorithm to retrieve the original password is different for every user.
So basically, what I'd have to do is hash a password, then use a different hash on a different value for each user (ie: the user name or email address) and then I can do a simple math operation on those two values to get the encoded password.
Is that correct or did I just not understand anything about password hashing + salting?
A simple explanation or example would prove to be helpful as the sites I've found don't quite explain clearly what salting a password is.
Edit: After reading comments and answers left so far, I understand that I didn't really understand what a salt was because I'm missing some key concepts and I was making false assumption.
What I'd like to know is: how do you consistently get the same salt if it is randomly-generated? If the salt is stored in the database like some people have mentioned, then I can see how you keep getting the same salt, but that brings another question: How does it make the passwords more secure if anyone with access to the database have access to the salt? Couldn't they just append the (known) salt to all the passwords they try and the result would be the same (bar some minor time loss) than not having one at all?
","Let me try and clarify a little bit with a somewhat oversimplified example. (md5() is used for example purposes only - you should not use it in practice.)
A salt is just a random string of characters that is appended to the password before it is hashed. Let's say you have the password letmein, and you hash it like this...
 echo md5('letmein')

...you'll get the output 0d107d09f5bbe40cade3de5c71e9e9b7. If you google this, you'll get a number of pages telling you that this is the MD5 hash for letmein. A salt is intended to help prevent this sort of thing.
Let's suppose you have a function, randomStringGenerator() that generates a random $x-character string. To use it to salt a password, you'd do something like this:
 $password = 'letmein';
 $salt = randomStringGenerator(64); //let's pretend this is 747B517C80567D86906CD28443B992209B8EC601A74A2D18E5E80070703C5F49

 $hash = md5($password . $salt);

You'd be then performing md5(letmein747B517C80567D86906CD28443B992209B8EC601A74A2D18E5E80070703C5F49), which returns af7cbbc1eacf780e70344af1a4b16698, which can't be ""looked up"" as easily as letmein without a salt.
You'd then store BOTH the hash and the salt, and when the user types in their password to log in, you'd repeat the process above and see if the password the user entered with the stored salt appended hashes to the same thing as the stored hash.
However! Since general hashing algorithms like MD5 and SHA2 are so fast, you shouldn't use them for storing passwords. Check out phpass for a PHP implementation of bcrypt.
Hope that helps!
","1052","<sql><security><hash><salt>","1","5","7","2011-09-07 04:29:33","6887385","4","","804929","","2011-07-31 03:38:04","2011-07-31 03:06:35",""
"6887299","Can someone explain how to do password hashing + salting","I've read on SO (and from other websites found on Google after I tried to look into it a little bit more) that the correct secure way to store passwords in a database is to store the hashed + salted value of a password. On top of that, the salt should be different for each user so hackers can't do harm even if they have the encrypted values.
I'm not quite sure what salting means. From my understanding, you hash the password, then you use another value that you hash (the salt) and combine those two together so the algorithm to retrieve the original password is different for every user.
So basically, what I'd have to do is hash a password, then use a different hash on a different value for each user (ie: the user name or email address) and then I can do a simple math operation on those two values to get the encoded password.
Is that correct or did I just not understand anything about password hashing + salting?
A simple explanation or example would prove to be helpful as the sites I've found don't quite explain clearly what salting a password is.
Edit: After reading comments and answers left so far, I understand that I didn't really understand what a salt was because I'm missing some key concepts and I was making false assumption.
What I'd like to know is: how do you consistently get the same salt if it is randomly-generated? If the salt is stored in the database like some people have mentioned, then I can see how you keep getting the same salt, but that brings another question: How does it make the passwords more secure if anyone with access to the database have access to the salt? Couldn't they just append the (known) salt to all the passwords they try and the result would be the same (bar some minor time loss) than not having one at all?
","Using salt prevent precomputed rainbow-tables usage, as an example if a user use ""Password"" as a password, MD5(""Password""), SHA1(""Password""), or WhatEver(""Password"") may be well-known results stored in some rainbow tables.
If you use a different salt value per person - called a nonce - you'll get MD5(HMAC(""Password"",""RandomSaltValue"")), SHA1(""Password"",""AnotherRandomSaltValue""), ... that mean two different hashed password values for the same initial password.
Now the question about storing these salts value...i think they can be stored into the database, the idea of salts are to prevent rainbow-style attack, not the database compromised issue.
","1052","<sql><security><hash><salt>","1","1","7","2011-09-07 04:29:33","6887385","4","","804929","","2011-07-31 03:38:04","2011-07-31 03:06:35",""
"6887299","Can someone explain how to do password hashing + salting","I've read on SO (and from other websites found on Google after I tried to look into it a little bit more) that the correct secure way to store passwords in a database is to store the hashed + salted value of a password. On top of that, the salt should be different for each user so hackers can't do harm even if they have the encrypted values.
I'm not quite sure what salting means. From my understanding, you hash the password, then you use another value that you hash (the salt) and combine those two together so the algorithm to retrieve the original password is different for every user.
So basically, what I'd have to do is hash a password, then use a different hash on a different value for each user (ie: the user name or email address) and then I can do a simple math operation on those two values to get the encoded password.
Is that correct or did I just not understand anything about password hashing + salting?
A simple explanation or example would prove to be helpful as the sites I've found don't quite explain clearly what salting a password is.
Edit: After reading comments and answers left so far, I understand that I didn't really understand what a salt was because I'm missing some key concepts and I was making false assumption.
What I'd like to know is: how do you consistently get the same salt if it is randomly-generated? If the salt is stored in the database like some people have mentioned, then I can see how you keep getting the same salt, but that brings another question: How does it make the passwords more secure if anyone with access to the database have access to the salt? Couldn't they just append the (known) salt to all the passwords they try and the result would be the same (bar some minor time loss) than not having one at all?
","Although @Chris and @Pualo have very good answers.  I wanted to add one more thing about salting passwords that hasn't been expressed.
Salting a password is not a real protection mechanism.  It doesn't matter if you are using bcrypt or any other mechanism.  It is simply a delaying tactic, nothing more.
By using a different salt value per password you are forcing the hacker to create a rainbow table per password in order to crack them.  This increases the amount of time it takes, but by no means does it make it impossible.  Bear in mind that with cloud based computing you can spin up a large number of machines to create the rainbow tables and you can see that the delay is pretty small.
Further, most of the zombie machines out there are available for rent...  
That said, the reason why you go through the trouble is to buy time.  Time to notice that you've been breached, repair it and inform your users of the breach.  That's it.  
If an attacker obtained enough access to your database to pull the list of passwords, then it is pretty much guaranteed that they've obtained everything else.  So, by this point you've already lost everything.  The only question is how long does it take you to plug the hole, reset everyone's password and tell them that they should reset the passwords on any other account they may have where they used the same one.  If you're Sony, then this time is apparently measured in months, if not years... ;)  Try to be a little faster than that.
So, although it is the responsible thing to do it is only one part of your defensive tool belt.  If you've been breached then you can bet those usernames and passwords will show up on a site somewhere at some point in the near future.  Hopefully before then you've already cleaned up your house.
","1052","<sql><security><hash><salt>","1","2","7","2011-09-07 04:29:33","6887385","4","","804929","","2011-07-31 03:38:04","2011-07-31 03:06:35",""
"6887299","Can someone explain how to do password hashing + salting","I've read on SO (and from other websites found on Google after I tried to look into it a little bit more) that the correct secure way to store passwords in a database is to store the hashed + salted value of a password. On top of that, the salt should be different for each user so hackers can't do harm even if they have the encrypted values.
I'm not quite sure what salting means. From my understanding, you hash the password, then you use another value that you hash (the salt) and combine those two together so the algorithm to retrieve the original password is different for every user.
So basically, what I'd have to do is hash a password, then use a different hash on a different value for each user (ie: the user name or email address) and then I can do a simple math operation on those two values to get the encoded password.
Is that correct or did I just not understand anything about password hashing + salting?
A simple explanation or example would prove to be helpful as the sites I've found don't quite explain clearly what salting a password is.
Edit: After reading comments and answers left so far, I understand that I didn't really understand what a salt was because I'm missing some key concepts and I was making false assumption.
What I'd like to know is: how do you consistently get the same salt if it is randomly-generated? If the salt is stored in the database like some people have mentioned, then I can see how you keep getting the same salt, but that brings another question: How does it make the passwords more secure if anyone with access to the database have access to the salt? Couldn't they just append the (known) salt to all the passwords they try and the result would be the same (bar some minor time loss) than not having one at all?
","Although bcrypt slows the process significantly down, it still would probably be feasible to attack your scheme if lots of computations can be made in parallel. I know it's unlikely and this would have to be a quite resourceful attacker indeed, but let's imagine the site you protect would contain photos and documents from Area 51 :) In that case, given enough parallelization, you could still be in trouble even if using bcrypt.
That's why I like the approach of scrypt - not only does it involve computational cost, but also it imposes memory constraints, specifically to introduce cost in terms of space and to make these kinds of parallel attacks infeasible. I can only recommend reading the paper that is linked on that site, it illustrates the concept really well. 
Although, it seems that bcrypt and even more scrypt seem to get less attention in terms of cryptanalysis than PBKDF2outlined in RSA's PKCS#5. See this discussion for details. 
","1052","<sql><security><hash><salt>","1","1","7","2011-09-07 04:29:33","6887385","4","","804929","","2011-07-31 03:38:04","2011-07-31 03:06:35",""
"8251105","How to secure HTTP JSON web service in .NET WCF","So, I want to secure a http json web service.
I will have a bunch of users of the system who will all have a username and password.
I only want to store a randomly salted hash of user's passwords in my database so as to avoid all passwords being discovered in the case of the database being compromised, and a salt (per password) to avoid pre-computed rainbow tables / dictionary attacks.
I've been looking at digest authentication as it has the benefit of preventing replay attacks by the use of random 'nonce' provided by the server to the client, like so:
A1 = string.hashMD5 (username + "":"" + realm + "":"" + password)
A2 = string.hashMD5 (paramTable.method + "":"" + paramTable.uri)
requestdigest = string.hashMD5 (A1 + "":"" + nonce + "":"" + A2)

However, in order for the server to re-compute 'requestdigest', it must know 'password', but my server will only have access to a salted hash.
If I was not using a salt, I could add a further step on the client side like so (because on the client side the password is known) -
HashedPword = string.hashMD5(password)
A1 = string.hashMD5 (username + "":"" + realm + "":"" + HashedPword)
A2 = string.hashMD5 (paramTable.method + "":"" + paramTable.uri)
requestdigest = string.hashMD5 (A1 + "":"" + nonce + "":"" + A2)

And then on the server side I could retrieve the Hashed password from the db to perform the re-computation.
Alas, the client would need to know the salt as well in order to do it properly which would be e.g. 
HashedSaltedPword = string.hashMD5(password+salt)
A1 = string.hashMD5 (username + "":"" + realm + "":"" + HashedSaltedPword)
A2 = string.hashMD5 (paramTable.method + "":"" + paramTable.uri)
requestdigest = string.hashMD5 (A1 + "":"" + nonce + "":"" + A2)

So that leaves transmitting the salt to the client without authentication by maybe exposing a web service function that returns the salt, given a username.
But then anyone could get access to the salts.
What i'm wondering though is if giving out the salts is a problem or not.
Because, the salt on it's own is useless without the hash stored in the database, and if the database is compromised, then the attacker would have access to both the hashes and salt anyway.
And following on from that, if I give away the salt for free, then I may as well just use the username itself AS the salt, as that would be unique per user - and thus I wouldn't even need to expose a webservice call to discover the salt in the first place.
What do you guys think? Does exposing salts or having a known salting mechanism matter?
Any other thoughts?
I'm not really worried about the downside to digest authentication - i.e. that the client does not know if it is talking to the 'real' server or not. Because, it's not like the client's password is going to be exposed using this method, and i'm not asking the client for anything confidential over this link like a credit card. I.e. stuff i want to secure resides on my server, and the server won't be asking the client for any of THEIR secure information.
Edit:
hmm, actually i just read this link Salt, passwords and security which does basically confirmed to me that knowing the salt does not matter.
So i'm thinking of implementing some sortof hash like:
HashedSaltedPword = string.hashMD5(password+username+siteWideSaltExistingOnlyInCode)

The addition of the site-wide salt is in case someone has created rainbow tables for common username's.
Does this approach seem secure?
","You must choose how do you want transmit password. Do you want to transmit it only hashed from client side to the server side? In such case server must store passwords otherwise it will not be able to recompute the hash. Do you want server to not store passwords? In such case you must transfer the password in the plain text so that server can compute the hash and compare it with stored one. 
The former case requires stored passwords in database and if you want to secure them you should use some database / application level encryption. The later case requires secured transport (HTTPS, VPN, etc.) because passwords are transmitted in readable form. 
","1046","<wcf><json><http><authentication><salt>","4","0","1","2011-11-24 11:33:20","","1","1","-1","","2017-05-23 11:55:30","2011-11-24 01:03:48",""
"11339958","Passwords do not match when hashing/salting","Okay, so all of the code below is not my own. I've been following a tutorial on the internet, but when I try and run it, no password seems to be matching. I believe there may be an error with salting the password as what is in the database is nowhere near the 64 characters that is described in the login.php script. I have no idea. Code is below:
register.php
// Create a 256 bit (64 characters) long random salt
// Let's add 'something random' and the username
// to the salt as well for added security
$salt = hash('sha256', uniqid(mt_rand(), true) . 'something random' . strtolower($username));

// Prefix the password with the salt
$hash = $salt . $password;

// Hash the salted password a bunch of times
for ( $i = 0; $i < 100000; $i ++ )
{
    $hash = hash('sha256', $hash);
}

// Prefix the hash with the salt so we can find it back later
$hash = $salt . $hash;

// carry on with registration code...

login.php
$email = $_POST['email'];
$password = $_POST['password'];

$con = mysql_connect(""localhost"", ""redacted"", ""redacted"", ""redacted"");

$sql = '
    SELECT
        `password`
    FROM `users`
        WHERE `email` = ""' . mysql_real_escape_string($email) . '""
    LIMIT 1
    ;';

$r = mysql_fetch_assoc(mysql_query($sql));

// The first 64 characters of the hash is the salt
$salt = substr($r['password'], 0, 64);

$hash = $salt . $password;

// Hash the password as we did before
for ( $i = 0; $i < 100000; $i ++ )
{
    $hash = hash('sha256', $hash);
}

$hash = $salt . $hash;

if ( $hash == $r['password'] )
{
    session_start();
    header('Location: /quiz/index.php');
}

if( $hash != $r['password'] ){
    session_start();
    header('Location: /?error=4');
}

// end login script

","It looks like you are adding the salt 2 times:
$hash = $salt . $password;

// Hash the password as we did before
for ( $i = 0; $i < 100000; $i ++ )
{
    $hash = hash('sha256', $hash);
}

//skip the below one
$hash = $salt . $hash;

Update:
Indeed, adding the salt 2 times is needed in this case. 
Although, the salt should be kept in a separate db column, so the code will be much more simplified  - by avoiding all the string concatenations for storing/retrieving the salt. 
Besides that, your db structure will be closer to the 3rd normal form by storing each piece of information in a separate slot.
","1045","<php><mysql><hash><passwords><salt>","1","-1","2","2012-07-05 09:09:05","11340697","4","1","","","","2012-07-05 07:48:26",""
"11339958","Passwords do not match when hashing/salting","Okay, so all of the code below is not my own. I've been following a tutorial on the internet, but when I try and run it, no password seems to be matching. I believe there may be an error with salting the password as what is in the database is nowhere near the 64 characters that is described in the login.php script. I have no idea. Code is below:
register.php
// Create a 256 bit (64 characters) long random salt
// Let's add 'something random' and the username
// to the salt as well for added security
$salt = hash('sha256', uniqid(mt_rand(), true) . 'something random' . strtolower($username));

// Prefix the password with the salt
$hash = $salt . $password;

// Hash the salted password a bunch of times
for ( $i = 0; $i < 100000; $i ++ )
{
    $hash = hash('sha256', $hash);
}

// Prefix the hash with the salt so we can find it back later
$hash = $salt . $hash;

// carry on with registration code...

login.php
$email = $_POST['email'];
$password = $_POST['password'];

$con = mysql_connect(""localhost"", ""redacted"", ""redacted"", ""redacted"");

$sql = '
    SELECT
        `password`
    FROM `users`
        WHERE `email` = ""' . mysql_real_escape_string($email) . '""
    LIMIT 1
    ;';

$r = mysql_fetch_assoc(mysql_query($sql));

// The first 64 characters of the hash is the salt
$salt = substr($r['password'], 0, 64);

$hash = $salt . $password;

// Hash the password as we did before
for ( $i = 0; $i < 100000; $i ++ )
{
    $hash = hash('sha256', $hash);
}

$hash = $salt . $hash;

if ( $hash == $r['password'] )
{
    session_start();
    header('Location: /quiz/index.php');
}

if( $hash != $r['password'] ){
    session_start();
    header('Location: /?error=4');
}

// end login script

","A common error is when database fields are not long enough to store all the characters. The password then will never equal what the user entered.
For this kind of functionality, always write unit tests that check if the function (still) works as expected. One day someone will modify the database, change the hash algorithm, modify the salt... and noone will be able to log in. 
","1045","<php><mysql><hash><passwords><salt>","1","2","2","2012-07-05 09:09:05","11340697","4","1","","","","2012-07-05 07:48:26",""
"3250789","How does a database get hacked? A question about salting, etc","Bear with me, I have been only learning PHP for only a few weeks, so example code may confuse me. I think I finally understand salting! It's to protect passwords inside database, if breached.
What I don't understand is, why would a hacker have to crack hashes if they are trying to figure out a user's password (assuming that's their goal)? Wouldn't this be easier? Is the only defense from password guessing is to implement a limit of password entry X amount of times a day or CAPTCHA?
How would a database get hacked in the first place? Is it more password guessing or can hashes be obtained through MySQL injection?
Thanks!
","The idea of salting and hashing is to protect the passwords in case the database has been compromised, whether it was by SQL injection, buffer overflow attacks or simply by going to the server room and pulling the disk out of your server. Salting won't protect you against password guesses, but help in case the attacker gets to the data.
","1043","<php><security><salt><brute-force>","2","4","4","2016-10-09 01:29:51","3250828","4","","13895","","2010-07-14 21:47:41","2010-07-14 21:44:16",""
"3250789","How does a database get hacked? A question about salting, etc","Bear with me, I have been only learning PHP for only a few weeks, so example code may confuse me. I think I finally understand salting! It's to protect passwords inside database, if breached.
What I don't understand is, why would a hacker have to crack hashes if they are trying to figure out a user's password (assuming that's their goal)? Wouldn't this be easier? Is the only defense from password guessing is to implement a limit of password entry X amount of times a day or CAPTCHA?
How would a database get hacked in the first place? Is it more password guessing or can hashes be obtained through MySQL injection?
Thanks!
","Yes, salting is to protect against the passwords from ever being reversed into plaintext.  It also stops someone from saying ""the encrypted password is the same on site A as on site B, so the user has the same password in both places"".
This isn't just to protect users against hackers; it's also to protect them against you.
Yes, the only defense against password guessing is to slow down or disallow repeated attempts.  Most CAPTCHAs are breakable or broken, and you can't impose a CAPTCHA or guess limit on someone who has a copy of the raw database.  So keep even the encrypted data out of the hands of malicious individuals.  Don't let them at your .htpasswd or /etc/shadow file or your database.
If you are not using salt, generating a rainbow table (in advance) is much easier than guessing a very strong password directly.  The key is that building the reverse mapping hash->password can be done once, and the (unsalted) hash is broken forever to anyone possessing the rainbow table.
The database could be hacked if your provider is compromised, if there is an injection vulnerability in your code, if your DB user account password is guessed, if your provider uses eBay to sell off the (presumed wiped) hard drive that had a three-year-old copy of your database on it...  It can happen many ways.
","1043","<php><security><salt><brute-force>","2","3","4","2016-10-09 01:29:51","3250828","4","","13895","","2010-07-14 21:47:41","2010-07-14 21:44:16",""
"3250789","How does a database get hacked? A question about salting, etc","Bear with me, I have been only learning PHP for only a few weeks, so example code may confuse me. I think I finally understand salting! It's to protect passwords inside database, if breached.
What I don't understand is, why would a hacker have to crack hashes if they are trying to figure out a user's password (assuming that's their goal)? Wouldn't this be easier? Is the only defense from password guessing is to implement a limit of password entry X amount of times a day or CAPTCHA?
How would a database get hacked in the first place? Is it more password guessing or can hashes be obtained through MySQL injection?
Thanks!
","The key here is that they're not trying to get the password of a user to use on your site, though after you fix the hole that might be useful.  It's so that if, for whatever reason, your site is compromised, there isn't damage to you users.  People have a tendency to duplicate passwords; that would be bad.
","1043","<php><security><salt><brute-force>","2","1","4","2016-10-09 01:29:51","3250828","4","","13895","","2010-07-14 21:47:41","2010-07-14 21:44:16",""
"3250789","How does a database get hacked? A question about salting, etc","Bear with me, I have been only learning PHP for only a few weeks, so example code may confuse me. I think I finally understand salting! It's to protect passwords inside database, if breached.
What I don't understand is, why would a hacker have to crack hashes if they are trying to figure out a user's password (assuming that's their goal)? Wouldn't this be easier? Is the only defense from password guessing is to implement a limit of password entry X amount of times a day or CAPTCHA?
How would a database get hacked in the first place? Is it more password guessing or can hashes be obtained through MySQL injection?
Thanks!
","It might be foolish, but many people use the same passwords for different sites. If your database is compromised and the passwords are simply hashed, then there are techniques (e.g. rainbow tables, even a few web sites) that a hacker could use to find a password value that results in the same hash. That password could then be used to try and gain access to other sites where the user has an account.
If the passwords in your database are salted, then this becomes significantly harder... and if other web sites also salt their passwords with different salts to yours, then it becomes impractical for the hacker.
","1043","<php><security><salt><brute-force>","2","1","4","2016-10-09 01:29:51","3250828","4","","13895","","2010-07-14 21:47:41","2010-07-14 21:44:16",""
"14246926","Rails: BCrypt::Errors::InvalidSalt: invalid salt","Loosely following Ryan Bates's How I Test Railscast to implement sending an email confirmation token to users when they sign up.
class User < ActiveRecord::Base
  has_secure_password
  strip_attributes except: [:password, :password_confirmation]
  ...

  def send_email_confirmation
    generate_token(:email_token)
    self.email_token_sent_at = Time.zone.now
    save!
    UserMailer.email_confirmation(self).deliver
  end

  private
    def generate_token(column)
      begin
        self[column] = SecureRandom.urlsafe_base64
      end while User.exists?(column => self[column])
    end
end

This is failing (in feature specs and when manually clicking through sign-up process) with: 
Failures:

  1) UserPages sign up with valid information should create a user
     Failure/Error: expect { click_button submit }.to change(User, :count).by(1)
     BCrypt::Errors::InvalidSalt:
       invalid salt
     # ./app/models/user.rb:70:in `send_email_confirmation'
     # ./app/controllers/users_controller.rb:27:in `create'
     # ./spec/features/user_pages_spec.rb:165:in `block (5 levels) in <top (required)>'
     # ./spec/features/user_pages_spec.rb:165:in `block (4 levels) in <top (required)>'

I've tried reinstalling bcrypt gem (as suggested elsewhere even though it was Devise related and I'm not using Devise): gem uninstall bcrypt-ruby and then gem install bcrypt-ruby but to no avail. ideas?
","Gem strip_attributes is responsible for such behavior.
Solution
Exclude :password_digest attribute from stripping like below:
strip_attributes except: [:password_digest]

","1035","<ruby-on-rails><salt><bcrypt><bcrypt-ruby>","1","0","1","2016-06-29 07:40:34","","5","","-1","","2017-05-23 11:44:15","2013-01-09 21:33:47",""
"13829081","Hashing and salting in a PDO prepared statement","Can someone show me the proper format to use for hashing and salting in a PDO prepared statement? I'm switching from php and trying to get this to work in a simple INSERT statement before worrying about the more complex functions, and nothing that I've seen online has worked. 
In php I was doing this: '"".sha1($salt + $_POST['password']).""'
I've tried:
$password = '123456'; 
$hash = hash('sha1', $password);
$pass1 = hash('sha1', $salt . $hash . $password);

$salt is defined in config.php, referenced correctly, and works properly in php insert statements.
EDIT -
This is the INSERT statement that I'm using:
$stmt = $conn->prepare('INSERT INTO customer_info (fname...) VALUES(:fname...)');
$stmt->bindParam(':fname', $_POST['fname'], PDO::PARAM_STR);
$stmt->execute();   

","Most database systems do not have decent passwort hash functions available, so you cannot generate the hash value with SQL. I'm not sure what you mean with ""switching from PHP"", but let the development language generate the hash, not the database system.
The salt should be different for every password, a global salt cannot fulfill it's purpose. Your ""salt"" is actually a key (or pepper), it is always the same. A salt has to be stored (plaintext) together with the hash-value, you need it to compare the stored hash with the hash of the entered password.
PHP 5.5 will have it's own functions password_hash() and password_verify() ready, to simplify generating BCrypt password hashes. I strongly recommend to use this excellent api, or it's compatibility pack for earlier PHP versions. Then i would invite you to read more about correct password storing with salt and pepper in this tutorial.
Edit:
Normally an insert with PDO looks something like this:
$password = $_POST['password'];
$hashedPassword = sha1($password . $salt);
$sql = 'INSERT INTO user (name, passwordhash) VALUES (?, ?)';
$sth = $pdo->prepare($sql);
$sth->execute(array('Jack Cornfield', $hashedPassword));

Of course your statement will look different, but i don't know your table and fields. In the example, the generation of the hash is done in pure PHP, and the resulting $hash is added parameterized to the sql statement with placeholders.
","1034","<hash><pdo><sha1><salt>","0","1","1","2012-12-12 17:30:57","13836253","2","","1056713","","2012-12-12 17:30:57","2012-12-11 21:50:34",""
"17055222","Generate Same Salt everytime for Same String value","I need to add a salt to a hashed column. This hashed column is also used as an index in one of the tables. I don't want to use the same hard coded salt for all values for obvious reasons. 
What can be the best way to generate a unique SAME salt value every time for the given String so when I hash the value i get the same output back (to help me search with the hashed value). 
Update:
Thanks everyone for the inputs. 
More details - I have to encrypt a column in the database. This column is also used for searching the row in the table and after encrypting we can not use it for searching because there are chances that we can change the encryption keys at later point of time. Now to counter this we thought of adding a Hashed column in the table on which we can perform the search (since we are not going to change the Hashed algorithm we can always use this for searching purpose). To make this hashed column more secure we thought of adding a salt to it. And since Salt should be random we will not be able to generate same hash function every time for same value unless we use the same Salt for all rows. So this is why I was trying to figure out a way where I can generate same salt for same String every time.
But I think after going through all the comments and suggestions by you guys one thing I am sure is that this is not a good design and I should rethink on my approach :(
","Doing this would defeat the purpose of using a salt.  In order to serve its intended purpose, the salt should be as random as possible. 
Think about it -- you could use a hash of the string as the ""salt"", then hash the original string and that ""salt"" together a second time.  But the resulting hash would still be a derivative of only the original string.  While this may provide just a small bit of security against a simple rainbow table, it just isn't enough.
http://en.wikipedia.org/wiki/Rainbow_table#Defense_against_rainbow_tables
","1032","<java><security><encryption><hash><salt>","1","2","4","2014-08-11 20:48:12","","1","","1443055","","2013-06-12 17:33:23","2013-06-11 22:59:31",""
"17055222","Generate Same Salt everytime for Same String value","I need to add a salt to a hashed column. This hashed column is also used as an index in one of the tables. I don't want to use the same hard coded salt for all values for obvious reasons. 
What can be the best way to generate a unique SAME salt value every time for the given String so when I hash the value i get the same output back (to help me search with the hashed value). 
Update:
Thanks everyone for the inputs. 
More details - I have to encrypt a column in the database. This column is also used for searching the row in the table and after encrypting we can not use it for searching because there are chances that we can change the encryption keys at later point of time. Now to counter this we thought of adding a Hashed column in the table on which we can perform the search (since we are not going to change the Hashed algorithm we can always use this for searching purpose). To make this hashed column more secure we thought of adding a salt to it. And since Salt should be random we will not be able to generate same hash function every time for same value unless we use the same Salt for all rows. So this is why I was trying to figure out a way where I can generate same salt for same String every time.
But I think after going through all the comments and suggestions by you guys one thing I am sure is that this is not a good design and I should rethink on my approach :(
","The salt can be stored in the same table as the salted+hashed value. When you insert a new record, generate a new random salt, salt+hash the value, and save both the hashed value and the salt in that record.
","1032","<java><security><encryption><hash><salt>","1","0","4","2014-08-11 20:48:12","","1","","1443055","","2013-06-12 17:33:23","2013-06-11 22:59:31",""
"17055222","Generate Same Salt everytime for Same String value","I need to add a salt to a hashed column. This hashed column is also used as an index in one of the tables. I don't want to use the same hard coded salt for all values for obvious reasons. 
What can be the best way to generate a unique SAME salt value every time for the given String so when I hash the value i get the same output back (to help me search with the hashed value). 
Update:
Thanks everyone for the inputs. 
More details - I have to encrypt a column in the database. This column is also used for searching the row in the table and after encrypting we can not use it for searching because there are chances that we can change the encryption keys at later point of time. Now to counter this we thought of adding a Hashed column in the table on which we can perform the search (since we are not going to change the Hashed algorithm we can always use this for searching purpose). To make this hashed column more secure we thought of adding a salt to it. And since Salt should be random we will not be able to generate same hash function every time for same value unless we use the same Salt for all rows. So this is why I was trying to figure out a way where I can generate same salt for same String every time.
But I think after going through all the comments and suggestions by you guys one thing I am sure is that this is not a good design and I should rethink on my approach :(
","Using the hash-value only as index or as foreign-key should be no problem (just include the salt in the hash-value), but i understand, that you want to refind the row, having only the original (unhashed) value.
This can never work, a column with properly salted hashes can never be used, to find the row. Often this means, that the design is flawed, a hashed value should not be something you have to search for. An example: to validate a password you should instead search for the username and then you can verify the password with the found password-hash.
If you are sure that you need to search for this hash-value, then your only options are to either use no salt (or same salt for all values), or to encrypt the value (two-way-encryption without IV). Of course, both of these options are weaker protections than properly hashing the value.
Update: According to your update, you already have the encrypted value in the database. This means, that you can search for it, without needing a hash-value. Just encrypt the sought-after value, before you do the query.
","1032","<java><security><encryption><hash><salt>","1","4","4","2014-08-11 20:48:12","","1","","1443055","","2013-06-12 17:33:23","2013-06-11 22:59:31",""
"17055222","Generate Same Salt everytime for Same String value","I need to add a salt to a hashed column. This hashed column is also used as an index in one of the tables. I don't want to use the same hard coded salt for all values for obvious reasons. 
What can be the best way to generate a unique SAME salt value every time for the given String so when I hash the value i get the same output back (to help me search with the hashed value). 
Update:
Thanks everyone for the inputs. 
More details - I have to encrypt a column in the database. This column is also used for searching the row in the table and after encrypting we can not use it for searching because there are chances that we can change the encryption keys at later point of time. Now to counter this we thought of adding a Hashed column in the table on which we can perform the search (since we are not going to change the Hashed algorithm we can always use this for searching purpose). To make this hashed column more secure we thought of adding a salt to it. And since Salt should be random we will not be able to generate same hash function every time for same value unless we use the same Salt for all rows. So this is why I was trying to figure out a way where I can generate same salt for same String every time.
But I think after going through all the comments and suggestions by you guys one thing I am sure is that this is not a good design and I should rethink on my approach :(
","Salt does not need to be particularly secure, so you could derive the salt from the string by using a non-crypto hash, perhaps FNV hash.  You can then use a cryptographic hash, like SHA-256, together with the salt to make the secure hashed value.  A non-crypto hash also has the advantage of being faster.
","1032","<java><security><encryption><hash><salt>","1","-1","4","2014-08-11 20:48:12","","1","","1443055","","2013-06-12 17:33:23","2013-06-11 22:59:31",""
"16766282","How much entropy is there in SHA2(RAND(), 256)?","How many bits of entropy will
SELECT SHA2(RAND(), 256);

generate?
(Actual question: Is this a reasonable way of generating a random salt for a password?)
","The hash function SHA2 will not add any entrophy to the resulting salt, it just brings the result of rand() into another form. That means, all depends on the rand() function and it's implementation.
The function rand() is of course not random, if you know the state of the function (the last result), you can predict the next generated value. The state itself is based on a seed, sometimes this seed is set automatically by the application. PHP for example creates a seed from the current time and the process-id. Note that those values are somewhat predictable too, or at least will narrow down the range of possible results.
I don't know the MYSQL implementation of rand, but i would not recommend to use its rand() function to generate a salt. Actually i would never let the database generate the salt or the hash value of a password, because most databases do not provide an appropriate way to hash passwords. Instead use the development environment with a slow key-derivation function like BCrypt, such functions often create a safe salt automatically.
To answer your question, uniqueness is the main purpose of the salt, so there are weaker ways to generate a salt. Better would be a salt that is unpredictable too, so nobody can precalculate the salt (ranges of possible salts), and therefore can prepare an attack. The best way to get a salt is, to use the random source of the operating system (URANDOM).
","1028","<mysql><security><passwords><salt><sha256>","1","2","2","2013-05-28 16:03:00","16796586","3","0","","","","2013-05-27 04:26:52",""
"16766282","How much entropy is there in SHA2(RAND(), 256)?","How many bits of entropy will
SELECT SHA2(RAND(), 256);

generate?
(Actual question: Is this a reasonable way of generating a random salt for a password?)
","Let's break this down.
SHA2 can refer to one of 4 algorithms:

SHA224 - 224 bits of output
SHA256 - 256 bits of output
SHA384 - 384 bits of output
SHA512 - 512 bits of output

So they each take an arbitrary input (0 to 2^64-1 bits of data), and produce an output of a fixed size.
Note that no entropy is actually created here. However, when feeding in more than the output size bits of entropy, some is destroyed. And when we take into account the (small) possibility of collisions, sometimes inputs smaller than the output size can have entropy destroyed. Therefore, we can say that each function places an upper bound of entropy as its output size.
So hashing can't increase entropy. So that means our upper bound on entropy is the lesser of the output size of the hash, and the size of the input.
Now, your input is RAND(). Assuming that you're referring to MySQL's RAND() function, let's look at what's happening. The RAND() function produces a floating point result. Now, MySQL uses a 4-byte floating point value for FLOAT data types. That means that at most, the result contains 32 bits of entropy.
Therefore, the combination is already down to an upper bound of 32 bits of entropy. 
Thanks to the Birthday Paradox, at 32 bits of entropy, we're at a 50% chance of a collision in just 7,000 generations. That's way too low for an effective salt...
And that doesn't even touch the fact that RAND() is predictable (which isn't the end of the world in the case of a salt).
Instead, just use a library to handle the generation for you. In PHP, I'd suggest password-compat or phpass.
In other languages, I am not sure. But seriously, don't reinvent it. Just use a library (preferably one that uses bcrypt or scrypt) and be done with it. 
","1028","<mysql><security><passwords><salt><sha256>","1","5","2","2013-05-28 16:03:00","16796586","3","0","","","","2013-05-27 04:26:52",""
"45688756","Module's function output to variable in saltstack state","I'm trying to develop a simple formula for Saltstack which would flush all iptables rules and apply another formula with updated rules, for that I need to switch INPUT policy to ACCEPT and then flush the rules. I'm trying to verify that in following way:
{% set policy = salt['pillar.get']('iptables.get_policy','') %}
{% if policy == ""ACCEPT"" %}
flush rules:
  iptables.flush:
    require:
      - default to accept
{% endif %}

Full code of my sls looks like:
include:
  - iptables

default to accept:
  iptables.set_policy:
    - chain: INPUT
    - policy: ACCEPT


{% set policy = salt['iptables.get_policy'] %}
{% if policy == ""ACCEPT"" %}
flush rules:
  iptables.flush:
    require:
      - default to accept
{% endif %}

iptables reapply:
  require:
    - sls: iptables

Apparently that doesn't work, could anyone advise what I'm doing wrong and if that's possible at all?

Solved
In case if someone needs similar formula, here's the formula which works for me:
include:
  - iptables

default to accept:
  iptables.set_policy:
    - chain: INPUT
    - policy: ACCEPT
    - order: 1

iptables.flush:
  module.run:
    - name: iptables.flush
    - order: 2

","I haven't tested this, but I think you need to actually call the function.
{% set policy = salt['iptables.get_policy']() %}

Make sure to add the () to actually call the function
","1023","<function><module><iptables><salt><salt-stack>","1","1","3","2018-06-09 02:13:04","","0","","1033581","","2018-06-09 02:13:04","2017-08-15 08:03:29",""
"45688756","Module's function output to variable in saltstack state","I'm trying to develop a simple formula for Saltstack which would flush all iptables rules and apply another formula with updated rules, for that I need to switch INPUT policy to ACCEPT and then flush the rules. I'm trying to verify that in following way:
{% set policy = salt['pillar.get']('iptables.get_policy','') %}
{% if policy == ""ACCEPT"" %}
flush rules:
  iptables.flush:
    require:
      - default to accept
{% endif %}

Full code of my sls looks like:
include:
  - iptables

default to accept:
  iptables.set_policy:
    - chain: INPUT
    - policy: ACCEPT


{% set policy = salt['iptables.get_policy'] %}
{% if policy == ""ACCEPT"" %}
flush rules:
  iptables.flush:
    require:
      - default to accept
{% endif %}

iptables reapply:
  require:
    - sls: iptables

Apparently that doesn't work, could anyone advise what I'm doing wrong and if that's possible at all?

Solved
In case if someone needs similar formula, here's the formula which works for me:
include:
  - iptables

default to accept:
  iptables.set_policy:
    - chain: INPUT
    - policy: ACCEPT
    - order: 1

iptables.flush:
  module.run:
    - name: iptables.flush
    - order: 2

","Looks like following syntax works in my case:
{{ salt.iptables.flush() }}

Other parts of the formula are not working yet, but main issue in this question is solved.
","1023","<function><module><iptables><salt><salt-stack>","1","0","3","2018-06-09 02:13:04","","0","","1033581","","2018-06-09 02:13:04","2017-08-15 08:03:29",""
"45688756","Module's function output to variable in saltstack state","I'm trying to develop a simple formula for Saltstack which would flush all iptables rules and apply another formula with updated rules, for that I need to switch INPUT policy to ACCEPT and then flush the rules. I'm trying to verify that in following way:
{% set policy = salt['pillar.get']('iptables.get_policy','') %}
{% if policy == ""ACCEPT"" %}
flush rules:
  iptables.flush:
    require:
      - default to accept
{% endif %}

Full code of my sls looks like:
include:
  - iptables

default to accept:
  iptables.set_policy:
    - chain: INPUT
    - policy: ACCEPT


{% set policy = salt['iptables.get_policy'] %}
{% if policy == ""ACCEPT"" %}
flush rules:
  iptables.flush:
    require:
      - default to accept
{% endif %}

iptables reapply:
  require:
    - sls: iptables

Apparently that doesn't work, could anyone advise what I'm doing wrong and if that's possible at all?

Solved
In case if someone needs similar formula, here's the formula which works for me:
include:
  - iptables

default to accept:
  iptables.set_policy:
    - chain: INPUT
    - policy: ACCEPT
    - order: 1

iptables.flush:
  module.run:
    - name: iptables.flush
    - order: 2

","There is 1 downside of relying on Salt itself to do that.
If the connection between Salt master and Salt minion is blocked via iptables for any reason (e.g. wrong rules were applied), this not work.
So I think it's better to run system command to do that, my solution is making that done via a at cron which runs as testing mode or so. 
iptables_flush_testing_mode:
  module.run:
    - name: at.at
    - args:
      - ""now +1 min""
      - |
        # IPv4
        iptables -P INPUT ACCEPT;
        iptables -P OUTPUT ACCEPT;
        iptables -P FORWARD ACCEPT;
        iptables -F INPUT;
        iptables -F OUTPUT;
        iptables -F FORWARD;
        # IPv6
        ip6tables -P INPUT ACCEPT;
        ip6tables -P OUTPUT ACCEPT;
        ip6tables -P FORWARD ACCEPT;
        ip6tables -F INPUT;
        ip6tables -F OUTPUT;
        ip6tables -F FORWARD;

The full state is at flush.sls
","1023","<function><module><iptables><salt><salt-stack>","1","0","3","2018-06-09 02:13:04","","0","","1033581","","2018-06-09 02:13:04","2017-08-15 08:03:29",""
"3847138","Importing Joomla! database into Prestashop, but the salting of passwords is different","My boss asked me to import a Joomla! database of about 250 users into a Prestashop database (of users). 
After some analysis, I've found out that Prestashop and Joomla! use different password salting techniques. 
So my question is: ""Are we doomed yet?""
And how can I overcome the import when the password salt of the source won't be compatible to the destination?
","Yes you are for a direct import.  Joomla's salting mechanism is pretty decent, so don't bother try breaking it (you can, but it'll take a while to do it for all 250 users).
Instead, what you could do is import all the records into the other database with the exception of the password column (Leave it blank).
Then, write a plugin that on a successful login into Joomla will check the other DB and update the password there...
I'm not familiar with Prestashop, but you should be able to write some code that would check for a blank password when they login, and present a message to login to Joomla first.
Either that, or write a single-sign-on system so that all authentication goes through Joomla (which is what I would do, since then you only have 1 place to manage users, instead of two)...
","1021","<php><joomla><passwords><salt><prestashop>","1","4","1","2011-03-19 21:24:51","3847154","4","1","9314","","2011-03-19 21:24:51","2010-10-02 19:02:58",""
"40760205","How and when does ktpass set the salt?","A user's password and salt determine the Kerberos keys generated by ktpass. I have noticed that ktpass sometimes changes the user's salt, but other times it does not. I was able to discover the salt by capturing a packet trace of a kinit. The salt appears to be generated based on the Kerberos realm and the userPrincipalName. However, it's not this simple. If the UPN is later updated manually, the salt is not updated. (I suspect that whether the /mapop option is specified may play a role.)

In what circumstances does ktpass set the user's salt?
How is the salt determined?
Is the salt stored in AD, or just in the KDCs?
Is there a straightforward way to read the current value of the salt?
Is there a way to manually change the salt?

","
In Microsoft Windows Active Directory, which has used Kerberos v5 since its inception in Windows 2000, the ktpass command sets the salt automatically. The salt is always used in Kerberos v5.  In Kerberos v4, a salt was never used.
The complete principal name (including the realm) is used as the salt,  e.g., accountname/somedomain.com@SOMEDOMAIN.COM, which is then paired with the encrypted hash of the password to absolutely ensure the result is unique throughout the AD forest.
As mentioned, the salt is the complete principal name (including the realm).  It is stored in the ntds.dit file, which is the Active Directory database.  The KDC get spun up in a process spawned by by kdcsvc.dll - and it relates to the values stored in ntds.dit.  So while the KDC and AD database are not one and the same inside the runtime environment, they are, so to speak, ""joined at the hip"".  I think when the domain controller shuts down, all the important elements within the KDC is persisted inside of ntds.dit.  Microsoft does not provide exact details on how this is done. I have looked extensively, and my partial knowledge is drawn from careful study and inferences made from bits and pieces of articles found on the web.  Note that the ntds.dit database is also the LDAP database.  It is also the DNS database, if DNS is AD-integrated.  All these protocols working together, plus a few more, form ""Active Directory"".
Open up Active Directory Users and Computers, go to the Account tab.  The ""user logon name"" is the most straightforward way to ""read"" the salt.  You don't see the realm name concatenated with it right there but it is implied.    The SPN, if also defined, is listed in a straightforward way like you are looking for under the Attribute Editor tab (look for servicePrincipalName).  Make sure you have View > Advanced Features selected in order to expose this tab.  A corresponding UPN will also be listed lower down in this same section, in the manner that looks exactly like: accountname/somedomain.com@SOMEDOMAIN.COM.
When you change the account name on the AD Account tab, you have just changed the salt.  Note if there is a keytab out there tied to this AD account, you will have just invalidated it, as its secret key inside is a concantaention of the password hash and the salt.  When either the salt or the password changes, then the keys will no longer match between the AD account and that inside the keytab.  You will have to re-generate it at this point.

Makes sense?   This is really a field explanation.  To learn more about Kerberos as it relates to AD, start here:  Kerberos Survival Guide
","1019","<active-directory><kerberos><salt><spn><upn>","0","2","1","2016-11-26 13:51:48","40765169","0","","1983675","","2016-11-26 13:51:48","2016-11-23 09:14:34",""
"26032687","Unable to generate an AES 256 key from password and salt for use with RNCryptor","I want to generate a key with Salt for AES 256 encryption.I am using BBASE lib, referred this link:
Create random 128 bit AES Encryption key in iOS
My code is:
    NSData* salt = [BBAES randomDataWithLength:BBAESSaltDefaultLength];
            NSData *key = [BBAES keyBySaltingPassword:@""password"" salt:salt         keySize:BBAESKeySize256 numberOfIterations:BBAESPBKDF2DefaultIterationsCount];
            NSLog(@""Data ASE Key %@"",key);
            NSString *aString  = [[NSString alloc] initWithData:key encoding:NSUTF8StringEncoding];

I want to use this 'key' into the following code:(here I am using RNCryptor lib)
    NSData *encryptedData = [ RNEncryptor encryptData:bodyData withSettings:kRNCryptorAES256Settings password:aString error:&error];

    NSData *decryptedData = [RNDecryptor decryptData:encryptedData withSettings:kRNCryptorAES256Settings password:aString error:&error];

I need to pass key of type NSString,But when I am converting NSData to NSString it gives NULL value and my application crashes. What should I do?? Is there any solution for this ?? 
","Not all data is a valid UTF-8 string, most random data is not. Basically that is why Base64 exists, to convert 8-bit data to an ASCII string--and back. There are of course other methods.
But as Duncan states, why? Read the RNCryptor code, it already handles converting a password (string) to a secure key.
","1018","<ios><encryption><aes><salt><rncryptor>","0","2","2","2014-09-25 11:19:08","","1","","-1","","2017-05-23 12:30:05","2014-09-25 07:10:06",""
"26032687","Unable to generate an AES 256 key from password and salt for use with RNCryptor","I want to generate a key with Salt for AES 256 encryption.I am using BBASE lib, referred this link:
Create random 128 bit AES Encryption key in iOS
My code is:
    NSData* salt = [BBAES randomDataWithLength:BBAESSaltDefaultLength];
            NSData *key = [BBAES keyBySaltingPassword:@""password"" salt:salt         keySize:BBAESKeySize256 numberOfIterations:BBAESPBKDF2DefaultIterationsCount];
            NSLog(@""Data ASE Key %@"",key);
            NSString *aString  = [[NSString alloc] initWithData:key encoding:NSUTF8StringEncoding];

I want to use this 'key' into the following code:(here I am using RNCryptor lib)
    NSData *encryptedData = [ RNEncryptor encryptData:bodyData withSettings:kRNCryptorAES256Settings password:aString error:&error];

    NSData *decryptedData = [RNDecryptor decryptData:encryptedData withSettings:kRNCryptorAES256Settings password:aString error:&error];

I need to pass key of type NSString,But when I am converting NSData to NSString it gives NULL value and my application crashes. What should I do?? Is there any solution for this ?? 
","Thank you @Duncan & @Zaph :) I found a solution!!
Instead of 
    NSString *aString  = [[NSString alloc] initWithData:key encoding:NSUTF8StringEncoding];

I used this:
    NSString *aString  = [[NSString alloc] initWithData:key encoding:NSASCIIStringEncoding];

","1018","<ios><encryption><aes><salt><rncryptor>","0","-2","2","2014-09-25 11:19:08","","1","","-1","","2017-05-23 12:30:05","2014-09-25 07:10:06",""
"45701907","How to compare version strings in salt sls files","Does saltstack have an equivalent to puppets versioncmp() function?  Or alternatively, is there a way to get the distutils.version or packaging.version.parse methods (as mentioned on Compare version strings in Python) available in a jinja+yaml rendered sls file?
","you can use the module pkg.version_cmp:
# salt-call pkg.version_cmp '1.0.2' '1.1.1'
local:
    -1
# salt-call pkg.version_cmp '0.2.4.1-0ubuntu1' '0.2.4-0ubuntu1'
local:
    1

Inside jinja you can use it in a way similar to:
{% if salt['pkg.version_cmp']('1.1.0','1.0.5') > 0 %}
  ....
{% endif %}

","1015","<salt><salt-stack>","3","3","1","2017-09-03 10:28:53","46022484","0","1","","","","2017-08-15 21:34:05",""
"5502832","Hashing and Salting passwords with shiro","In apache shiro the default hash implementation is as follows: 
MessageDigest digest = getDigest(getAlgorithmName());
        if (salt != null) {
            digest.reset();
            digest.update(salt);
        }
        byte[] hashed = digest.digest(bytes);
        int iterations = hashIterations - 1; //already hashed once above
        //iterate remaining number:
        for (int i = 0; i < iterations; i++) {
            digest.reset();
            hashed = digest.digest(hashed);
        }
        return hashed;

Notice how it puts the salt first.  We are having to authenticate against a legacy system where the hashes were password + salt and not salt+password
I'm currently doing the concat outside this method call and passing null in for the salt. Aside from subclassing and overriding this method is there a better way than what I'm having to do?
","It turns out subclassing SimpleHash and overriding one method did the trick. Just reset the digest, add the salt then the pw and then digest it and it works fine
","1013","<java><hash><salt><shiro>","3","2","1","2011-04-02 19:46:50","5525452","0","","","","","2011-03-31 16:04:51",""
"29068961","The error is incorrect username or password even I've entered the correct credentials","I've created my own way of login.php using hash & salt. When I input new admin account, the password and seems to be working fine on my phpmyadmin but when I calling the hash and salt in my login, the ""User doesn't exist"" seems to be good. The error is always ""Incorrect username & password"" even I've entered the right crendentials. I've already used this script at my previous login system but I don't know why it's now working now.
Here's my login.php
<?php
include_once('config.php');
session_start();
$username = $_POST['username'];
$password = $_POST['password'];

$username = mysqli_real_escape_string($mysqli,$username);

$query = $mysqli->query(""SELECT password,salt FROM admin WHERE username='$username'"");

$numrows = mysqli_num_rows($query);

if($username == """" && $password =="""") {
    echo '<center>';
    echo '<h3>Please Fill in the blank form</h3>';
    echo '<button type=""button"" class=""btn btn-primary"" id=""goback"" >Log In Again</button>';
    echo '</center>';
} else if($numrows!=0) {
    $userData = mysqli_fetch_array($query, MYSQL_ASSOC);
    $hash = hash('sha256', $userData['salt'] . hash('sha256', $password));

    if($hash != $userData['password']) {
        echo '<center>';
        echo '<h3>Incorrent username or password</h3>';
        echo '<button type=""button"" class=""btn btn-primary"" id=""goback"" >Log In Again</button>';
        echo '</center>';
    } else {
        header('Location: firstpagesurvey.html');
    }
} else {
    die('
        <center>
        <h3>Username does\'t exists</h3>
        <button type=""button"" class=""btn btn-primary"" id=""goback"" >Log In Again</button>
        </center>
    ');
}
?>

Here's the create_admin action
<?php
include_once('config.php');
session_start();

$username = $_POST['username'];
$password = $_POST['password'];
$firstname = $_POST['firstname'];
$lastname = $_POST['lastname'];

$hash = hash('sha256', $password);

function createSalt(){
    $text = md5(uniqid(rand(), true));
    return substr($text,0,3);
}

$salt = createSalt();

$password = hash('sha256', $hash.$salt);

$username = $mysqli->real_escape_string($username);

$query = $mysqli->query(""INSERT INTO `admin`(`username`,`password`,`firstname`,`lastname`,`salt`) VALUES('$username','$password','$firstname','$lastname','$salt')"");

$mysqli->close();

header('Location: success.php');

?>

","I think the issue is when you create your password.
$hash = hash('sha256', $password);

IS NOT EQUALS
$hash = hash('sha256', $userData['salt'] . hash('sha256', $password));

Therefore; you need to modify the way how you encrypt the password or modify the way yo are authenticating
","1009","<php><mysql><hash><mysqli><salt>","0","1","4","2016-04-30 16:24:40","29069230","7","","4061157","","2015-03-16 03:24:08","2015-03-16 02:53:27",""
"29068961","The error is incorrect username or password even I've entered the correct credentials","I've created my own way of login.php using hash & salt. When I input new admin account, the password and seems to be working fine on my phpmyadmin but when I calling the hash and salt in my login, the ""User doesn't exist"" seems to be good. The error is always ""Incorrect username & password"" even I've entered the right crendentials. I've already used this script at my previous login system but I don't know why it's now working now.
Here's my login.php
<?php
include_once('config.php');
session_start();
$username = $_POST['username'];
$password = $_POST['password'];

$username = mysqli_real_escape_string($mysqli,$username);

$query = $mysqli->query(""SELECT password,salt FROM admin WHERE username='$username'"");

$numrows = mysqli_num_rows($query);

if($username == """" && $password =="""") {
    echo '<center>';
    echo '<h3>Please Fill in the blank form</h3>';
    echo '<button type=""button"" class=""btn btn-primary"" id=""goback"" >Log In Again</button>';
    echo '</center>';
} else if($numrows!=0) {
    $userData = mysqli_fetch_array($query, MYSQL_ASSOC);
    $hash = hash('sha256', $userData['salt'] . hash('sha256', $password));

    if($hash != $userData['password']) {
        echo '<center>';
        echo '<h3>Incorrent username or password</h3>';
        echo '<button type=""button"" class=""btn btn-primary"" id=""goback"" >Log In Again</button>';
        echo '</center>';
    } else {
        header('Location: firstpagesurvey.html');
    }
} else {
    die('
        <center>
        <h3>Username does\'t exists</h3>
        <button type=""button"" class=""btn btn-primary"" id=""goback"" >Log In Again</button>
        </center>
    ');
}
?>

Here's the create_admin action
<?php
include_once('config.php');
session_start();

$username = $_POST['username'];
$password = $_POST['password'];
$firstname = $_POST['firstname'];
$lastname = $_POST['lastname'];

$hash = hash('sha256', $password);

function createSalt(){
    $text = md5(uniqid(rand(), true));
    return substr($text,0,3);
}

$salt = createSalt();

$password = hash('sha256', $hash.$salt);

$username = $mysqli->real_escape_string($username);

$query = $mysqli->query(""INSERT INTO `admin`(`username`,`password`,`firstname`,`lastname`,`salt`) VALUES('$username','$password','$firstname','$lastname','$salt')"");

$mysqli->close();

header('Location: success.php');

?>

","in create page make hash( hash(password).salt) but login page make hash( salt.password).
in your create_admin action, you make hashed password
your code is 
$password = hash('sha256', $hash.$salt); 
/*and*/
$hash is $hash = hash('sha256', $password);

this mean in create_page your hashing is hash( hash(password), salt)
but your login.php 
your code is 
$hash = hash('sha256', $userData['salt'] . hash('sha256', $password));

this mean in login your hashing is hash( salt, hash(password) )
in short, your hashing order between create_admin and login is wrong.
","1009","<php><mysql><hash><mysqli><salt>","0","0","4","2016-04-30 16:24:40","29069230","7","","4061157","","2015-03-16 03:24:08","2015-03-16 02:53:27",""
"29068961","The error is incorrect username or password even I've entered the correct credentials","I've created my own way of login.php using hash & salt. When I input new admin account, the password and seems to be working fine on my phpmyadmin but when I calling the hash and salt in my login, the ""User doesn't exist"" seems to be good. The error is always ""Incorrect username & password"" even I've entered the right crendentials. I've already used this script at my previous login system but I don't know why it's now working now.
Here's my login.php
<?php
include_once('config.php');
session_start();
$username = $_POST['username'];
$password = $_POST['password'];

$username = mysqli_real_escape_string($mysqli,$username);

$query = $mysqli->query(""SELECT password,salt FROM admin WHERE username='$username'"");

$numrows = mysqli_num_rows($query);

if($username == """" && $password =="""") {
    echo '<center>';
    echo '<h3>Please Fill in the blank form</h3>';
    echo '<button type=""button"" class=""btn btn-primary"" id=""goback"" >Log In Again</button>';
    echo '</center>';
} else if($numrows!=0) {
    $userData = mysqli_fetch_array($query, MYSQL_ASSOC);
    $hash = hash('sha256', $userData['salt'] . hash('sha256', $password));

    if($hash != $userData['password']) {
        echo '<center>';
        echo '<h3>Incorrent username or password</h3>';
        echo '<button type=""button"" class=""btn btn-primary"" id=""goback"" >Log In Again</button>';
        echo '</center>';
    } else {
        header('Location: firstpagesurvey.html');
    }
} else {
    die('
        <center>
        <h3>Username does\'t exists</h3>
        <button type=""button"" class=""btn btn-primary"" id=""goback"" >Log In Again</button>
        </center>
    ');
}
?>

Here's the create_admin action
<?php
include_once('config.php');
session_start();

$username = $_POST['username'];
$password = $_POST['password'];
$firstname = $_POST['firstname'];
$lastname = $_POST['lastname'];

$hash = hash('sha256', $password);

function createSalt(){
    $text = md5(uniqid(rand(), true));
    return substr($text,0,3);
}

$salt = createSalt();

$password = hash('sha256', $hash.$salt);

$username = $mysqli->real_escape_string($username);

$query = $mysqli->query(""INSERT INTO `admin`(`username`,`password`,`firstname`,`lastname`,`salt`) VALUES('$username','$password','$firstname','$lastname','$salt')"");

$mysqli->close();

header('Location: success.php');

?>

","Yeah I've figured it out... Thanks! The sequence should be base on the create_acc.php
$password = hash('sha256', $salt.$hash);

Login.php
$hash = hash('sha256', $userData['salt'] . hash('sha256', $password));

","1009","<php><mysql><hash><mysqli><salt>","0","0","4","2016-04-30 16:24:40","29069230","7","","4061157","","2015-03-16 03:24:08","2015-03-16 02:53:27",""
"29068961","The error is incorrect username or password even I've entered the correct credentials","I've created my own way of login.php using hash & salt. When I input new admin account, the password and seems to be working fine on my phpmyadmin but when I calling the hash and salt in my login, the ""User doesn't exist"" seems to be good. The error is always ""Incorrect username & password"" even I've entered the right crendentials. I've already used this script at my previous login system but I don't know why it's now working now.
Here's my login.php
<?php
include_once('config.php');
session_start();
$username = $_POST['username'];
$password = $_POST['password'];

$username = mysqli_real_escape_string($mysqli,$username);

$query = $mysqli->query(""SELECT password,salt FROM admin WHERE username='$username'"");

$numrows = mysqli_num_rows($query);

if($username == """" && $password =="""") {
    echo '<center>';
    echo '<h3>Please Fill in the blank form</h3>';
    echo '<button type=""button"" class=""btn btn-primary"" id=""goback"" >Log In Again</button>';
    echo '</center>';
} else if($numrows!=0) {
    $userData = mysqli_fetch_array($query, MYSQL_ASSOC);
    $hash = hash('sha256', $userData['salt'] . hash('sha256', $password));

    if($hash != $userData['password']) {
        echo '<center>';
        echo '<h3>Incorrent username or password</h3>';
        echo '<button type=""button"" class=""btn btn-primary"" id=""goback"" >Log In Again</button>';
        echo '</center>';
    } else {
        header('Location: firstpagesurvey.html');
    }
} else {
    die('
        <center>
        <h3>Username does\'t exists</h3>
        <button type=""button"" class=""btn btn-primary"" id=""goback"" >Log In Again</button>
        </center>
    ');
}
?>

Here's the create_admin action
<?php
include_once('config.php');
session_start();

$username = $_POST['username'];
$password = $_POST['password'];
$firstname = $_POST['firstname'];
$lastname = $_POST['lastname'];

$hash = hash('sha256', $password);

function createSalt(){
    $text = md5(uniqid(rand(), true));
    return substr($text,0,3);
}

$salt = createSalt();

$password = hash('sha256', $hash.$salt);

$username = $mysqli->real_escape_string($username);

$query = $mysqli->query(""INSERT INTO `admin`(`username`,`password`,`firstname`,`lastname`,`salt`) VALUES('$username','$password','$firstname','$lastname','$salt')"");

$mysqli->close();

header('Location: success.php');

?>

","It would be much easier and much safer, if you would use the built-in password function password_hash(). Because the salt is included in the resulting hash-value, you could also do without a separate database field for the salt.
// Hash a new password for storing in the database.
// The function automatically generates a cryptographically safe salt.
$hashToStoreInDb = password_hash($password, PASSWORD_BCRYPT);

// Check if the hash of the entered login password, matches the stored hash.
// The salt and the cost factor will be extracted from $existingHashFromDb.
$isPasswordCorrect = password_verify($password, $existingHashFromDb);

This would not only create a cryptographically safe salt, it would also use a hash function with a cost factor (BCrypt). Double hashing is often offered out of the box by password-cracker tools. The SHA-* algorithm is too fast and therefore can be brute-forced too easily.
","1009","<php><mysql><hash><mysqli><salt>","0","0","4","2016-04-30 16:24:40","29069230","7","","4061157","","2015-03-16 03:24:08","2015-03-16 02:53:27",""
"30115583","How to use salt and hash in login?","I want to use salt and hash to create security login. I try to follow this tutorial and write own code but it always return false. Here is my code:
require_once 'application/third_party/Secure-Login/classes/Hashing.php';
require_once 'application/third_party/Secure-Login/classes/Salt.php';
$password = Hashing::create_hash('123456', Salt::random(12));
$old = '$2a$10$zuzycDw3Ack2cCoL3ds1sudJ2WioZ87.75ErLZVcZyh4d1hS2rHFu';

if (Hashing::validate($password, $old, Salt::random(12))) {
    echo true;
} else {
    echo false;
}

And two classes I included:
<?php

class Hashing {

    function __construct() {}

    /**
    * @param string $pass The user submitted password
    * @param string $hashed_pass The hashed password pulled from the database
    * @param string $salt The salt pulled from the database
    * @param string $hash_method The hashing method used to generate the hashed password
    */
    static function validate($pass, $hashed_pass, $salt, $hash_method = 'sha1') {
        if (function_exists('hash') && in_array($hash_method, hash_algos())) {
            return ($hashed_pass === hash($hash_method, $salt . $pass));
        }
        return ($hashed_pass === sha1($salt . $pass));
    }

    /**
     * Generates a secure, pseudo-random password with a safe fallback.
     */
    static function pseudo_rand($length) {
        if (function_exists('openssl_random_pseudo_bytes')) {
            $is_strong = false;
            $rand = openssl_random_pseudo_bytes($length, $is_strong);
            if ($is_strong === true) {
                return $rand;
            }
        }
        $rand = '';
        $sha = '';
        for ($i = 0; $i < $length; $i++) {
            $sha = hash('sha256', $sha . mt_rand());
            $chr = mt_rand(0, 62);
            $rand .= chr(hexdec($sha[$chr] . $sha[$chr + 1]));
        }
        return $rand;
    }

    /**
     * Creates a very secure hash. Uses blowfish by default with a fallback on SHA512.
     */
    static function create_hash($string, $salt = '', $hash_method = 'sha1', $stretch_cost = 10) {
    $salt = Hashing::pseudo_rand(128);
    $salt = substr(str_replace('+', '.', base64_encode($salt)), 0, 22);
    if (function_exists('hash') && in_array($hash_method, hash_algos())) {
            return crypt($string, '$2a$' . $stretch_cost . '$' . $salt);
    }
    return Hashing::_create_hash($string, $salt);
    }

    /**
     * Fall-back SHA512 hashing algorithm with stretching.
     */
    static function _create_hash($password, $salt) {
        $hash = '';
        for ($i = 0; $i < 20000; $i++) {
            $hash = hash('sha512', $hash . $salt . $password);
        }
        return $hash;
    }

}

<?php

class Salt {

    public static function random($len = 8) {
    $chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789`~!@#$%^&*()-=_+';
    $l = strlen($chars) - 1;
    $str = '';
    for ($i = 0; $i < $len; ++$i) {
            $str .= $chars[rand(0, $l)];
    }
    return $str;
    }

}

Please check help me! I don't know where is wrong and how it works. Thank so much!
","One problem in your example is that you use a new salt every time you want to verify a password, instead of using the old salt. In practice, you need to store the salt you used to hash a password in order to verify it.
Try the following code:
$salt = Salt::random(12);
$password = Hashing::create_hash('123456', $salt);

To verify:
if (Hashing::validate('123456', $password, $salt)) {
    echo true;
} else {
    echo false;
}

Of course you will need to generate a NEW salt every time you want to hash a NEW password.
","999","<php><codeigniter><hash><salt>","0","0","3","2015-05-08 11:34:35","30122380","4","1","","","","2015-05-08 04:08:34",""
"30115583","How to use salt and hash in login?","I want to use salt and hash to create security login. I try to follow this tutorial and write own code but it always return false. Here is my code:
require_once 'application/third_party/Secure-Login/classes/Hashing.php';
require_once 'application/third_party/Secure-Login/classes/Salt.php';
$password = Hashing::create_hash('123456', Salt::random(12));
$old = '$2a$10$zuzycDw3Ack2cCoL3ds1sudJ2WioZ87.75ErLZVcZyh4d1hS2rHFu';

if (Hashing::validate($password, $old, Salt::random(12))) {
    echo true;
} else {
    echo false;
}

And two classes I included:
<?php

class Hashing {

    function __construct() {}

    /**
    * @param string $pass The user submitted password
    * @param string $hashed_pass The hashed password pulled from the database
    * @param string $salt The salt pulled from the database
    * @param string $hash_method The hashing method used to generate the hashed password
    */
    static function validate($pass, $hashed_pass, $salt, $hash_method = 'sha1') {
        if (function_exists('hash') && in_array($hash_method, hash_algos())) {
            return ($hashed_pass === hash($hash_method, $salt . $pass));
        }
        return ($hashed_pass === sha1($salt . $pass));
    }

    /**
     * Generates a secure, pseudo-random password with a safe fallback.
     */
    static function pseudo_rand($length) {
        if (function_exists('openssl_random_pseudo_bytes')) {
            $is_strong = false;
            $rand = openssl_random_pseudo_bytes($length, $is_strong);
            if ($is_strong === true) {
                return $rand;
            }
        }
        $rand = '';
        $sha = '';
        for ($i = 0; $i < $length; $i++) {
            $sha = hash('sha256', $sha . mt_rand());
            $chr = mt_rand(0, 62);
            $rand .= chr(hexdec($sha[$chr] . $sha[$chr + 1]));
        }
        return $rand;
    }

    /**
     * Creates a very secure hash. Uses blowfish by default with a fallback on SHA512.
     */
    static function create_hash($string, $salt = '', $hash_method = 'sha1', $stretch_cost = 10) {
    $salt = Hashing::pseudo_rand(128);
    $salt = substr(str_replace('+', '.', base64_encode($salt)), 0, 22);
    if (function_exists('hash') && in_array($hash_method, hash_algos())) {
            return crypt($string, '$2a$' . $stretch_cost . '$' . $salt);
    }
    return Hashing::_create_hash($string, $salt);
    }

    /**
     * Fall-back SHA512 hashing algorithm with stretching.
     */
    static function _create_hash($password, $salt) {
        $hash = '';
        for ($i = 0; $i < 20000; $i++) {
            $hash = hash('sha512', $hash . $salt . $password);
        }
        return $hash;
    }

}

<?php

class Salt {

    public static function random($len = 8) {
    $chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789`~!@#$%^&*()-=_+';
    $l = strlen($chars) - 1;
    $str = '';
    for ($i = 0; $i < $len; ++$i) {
            $str .= $chars[rand(0, $l)];
    }
    return $str;
    }

}

Please check help me! I don't know where is wrong and how it works. Thank so much!
","There are many problems with your code, so i strongly suggest to use the functions password_hash() and password_verify() to do the hashing.
Because you said that you want to understand how it works, here some tips:
static function create_hash($string, $salt = '', $hash_method = 'sha1', $stretch_cost = 10) {
  $salt = Hashing::pseudo_rand(128);
  $salt = substr(str_replace('+', '.', base64_encode($salt)), 0, 22);
  if (function_exists('hash') && in_array($hash_method, hash_algos())) {
    return crypt($string, '$2a$' . $stretch_cost . '$' . $salt);
  }
  return Hashing::_create_hash($string, $salt);
}

This method first tries to use crypt() which is good, because it generates a BCrypt hash. The cost parameter will fail if it is smaller than 10, and the salt can be generated unsafe, and it uses ways too much entropy from the pool. Then it checks whether the hash() functions exists but this function is not at all made to hash passwords and has nothing to do with crypt().
Later for verification you do not use crypt(), instead you check with the hash() function, this is a different algorithm as before. Then the salt cannot be choosen freely to verify a password, instead you need the same salt that was used to generate the hash, the crypt() function actually did include this salt in the hash-value.
static function validate($pass, $hashed_pass, $salt, $hash_method = 'sha1') {
  if (function_exists('hash') && in_array($hash_method, hash_algos())) {
    return ($hashed_pass === hash($hash_method, $salt . $pass));
  }
  return ($hashed_pass === sha1($salt . $pass));
}

If you want to learn a bit more about password hashing, i would invite you to read my tutorial about secure password storing.
","999","<php><codeigniter><hash><salt>","0","1","3","2015-05-08 11:34:35","30122380","4","1","","","","2015-05-08 04:08:34",""
"30115583","How to use salt and hash in login?","I want to use salt and hash to create security login. I try to follow this tutorial and write own code but it always return false. Here is my code:
require_once 'application/third_party/Secure-Login/classes/Hashing.php';
require_once 'application/third_party/Secure-Login/classes/Salt.php';
$password = Hashing::create_hash('123456', Salt::random(12));
$old = '$2a$10$zuzycDw3Ack2cCoL3ds1sudJ2WioZ87.75ErLZVcZyh4d1hS2rHFu';

if (Hashing::validate($password, $old, Salt::random(12))) {
    echo true;
} else {
    echo false;
}

And two classes I included:
<?php

class Hashing {

    function __construct() {}

    /**
    * @param string $pass The user submitted password
    * @param string $hashed_pass The hashed password pulled from the database
    * @param string $salt The salt pulled from the database
    * @param string $hash_method The hashing method used to generate the hashed password
    */
    static function validate($pass, $hashed_pass, $salt, $hash_method = 'sha1') {
        if (function_exists('hash') && in_array($hash_method, hash_algos())) {
            return ($hashed_pass === hash($hash_method, $salt . $pass));
        }
        return ($hashed_pass === sha1($salt . $pass));
    }

    /**
     * Generates a secure, pseudo-random password with a safe fallback.
     */
    static function pseudo_rand($length) {
        if (function_exists('openssl_random_pseudo_bytes')) {
            $is_strong = false;
            $rand = openssl_random_pseudo_bytes($length, $is_strong);
            if ($is_strong === true) {
                return $rand;
            }
        }
        $rand = '';
        $sha = '';
        for ($i = 0; $i < $length; $i++) {
            $sha = hash('sha256', $sha . mt_rand());
            $chr = mt_rand(0, 62);
            $rand .= chr(hexdec($sha[$chr] . $sha[$chr + 1]));
        }
        return $rand;
    }

    /**
     * Creates a very secure hash. Uses blowfish by default with a fallback on SHA512.
     */
    static function create_hash($string, $salt = '', $hash_method = 'sha1', $stretch_cost = 10) {
    $salt = Hashing::pseudo_rand(128);
    $salt = substr(str_replace('+', '.', base64_encode($salt)), 0, 22);
    if (function_exists('hash') && in_array($hash_method, hash_algos())) {
            return crypt($string, '$2a$' . $stretch_cost . '$' . $salt);
    }
    return Hashing::_create_hash($string, $salt);
    }

    /**
     * Fall-back SHA512 hashing algorithm with stretching.
     */
    static function _create_hash($password, $salt) {
        $hash = '';
        for ($i = 0; $i < 20000; $i++) {
            $hash = hash('sha512', $hash . $salt . $password);
        }
        return $hash;
    }

}

<?php

class Salt {

    public static function random($len = 8) {
    $chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789`~!@#$%^&*()-=_+';
    $l = strlen($chars) - 1;
    $str = '';
    for ($i = 0; $i < $len; ++$i) {
            $str .= $chars[rand(0, $l)];
    }
    return $str;
    }

}

Please check help me! I don't know where is wrong and how it works. Thank so much!
","If you really want to make your life easier. You can go for PHPASS library which provides you functions to use. You just need to create an object of the class and use the functions.
Check out these links:
You can download the library from here:
Download PHPASS
You can get some more info from here:
Sample usage of the library
","999","<php><codeigniter><hash><salt>","0","1","3","2015-05-08 11:34:35","30122380","4","1","","","","2015-05-08 04:08:34",""
"11736555","Java autentication of Drupal passwords","I try to mimic the way Drupal 7 is checking for a correct password in Java.
Found some code as a guideline here: https://github.com/CraftFire/AuthDB-Legacy/blob/master/src/main/java/com/authdb/scripts/cms/Drupal.java and extracted the code i needed.
The thing is however that when i give the password and the hashed version (in order to extract the salt and amount of iterations needed), i get different results.
The passwords are generated using the Drupal password-hash script
resulting in:
Expected   value = $S$DxVn7wubSRzoK9X2pkGx4njeDRkLEgdqPphc2ZXkkb8Viy8JEGf3
Calculated value = $S$DxVn7wubSpQ1CpUnBZZHNqIXMp2XMVZHMYBqAs24NsUHMY7HBkYn

Expected   value = $S$DOASeKfBzZoqgSRl/mBnK06GlLESyMHZ81jyUueEBiCrkkxxArpR
Calculated value = $S$DOASeKfBzs.XMVZ1NkYXNmIqMpEHAoEaMYJ1NmUHCZJaBZFnAZFX

Anyone able to help me / tell me what i'm doing wrong here?
Thanks.
Code:
import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

class test {

  public static void main(String args[]) {
   // Passwords and hashes generated by Drupal.
   checkPassword(""test""  , ""$S$DxVn7wubSRzoK9X2pkGx4njeDRkLEgdqPphc2ZXkkb8Viy8JEGf3""); 
   checkPassword(""barbaz"", ""$S$DOASeKfBzZoqgSRl/mBnK06GlLESyMHZ81jyUueEBiCrkkxxArpR"");
  }

  private static String itoa64 = ""./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"";
  private static final int DRUPAL_HASH_LENGTH = 55;
  private static int password_get_count_log2(String setting) { return itoa64.indexOf(setting.charAt(3)); }

  /**
   * Note: taken from the default Drupal 7 password algorithm
   * @param candidate
   *        the clear text password
   * @param saltedEncryptedPassword
   *        the salted encrypted password string to check => NEEDS TO BE THE DEFAULT DRUPAL 7 PASSWORD HASH.
   * @return true if the candidate matches, false otherwise.
   */
  public static boolean checkPassword(String candidate, String saltedEncryptedPassword) {
    if (candidate == null) {
      return false;
    }
    if (saltedEncryptedPassword == null) {
      return false; 
    }

    String hash = password_crypt(candidate, saltedEncryptedPassword);
    System.out.println(""Tested value = "" + saltedEncryptedPassword);
    System.out.println(""Calced value = "" + hash);

    return hash == saltedEncryptedPassword;
  }

  public static String SHA512(String text) {
    byte[] sha1hash = new byte[40];
    try {
      MessageDigest md = MessageDigest.getInstance(""SHA-512"");
      md.update(text.getBytes(""UTF-8""), 0, text.length());
      sha1hash = md.digest();
    } catch (NoSuchAlgorithmException e) {
      e.printStackTrace();
    } catch (UnsupportedEncodingException e) {
      e.printStackTrace();
    }
    return convertToHex(sha1hash);
  }

  private static String convertToHex(byte[] data) {
    StringBuffer buf = new StringBuffer();
    for (int i = 0; i < data.length; i++) {
      int halfbyte = (data[i] >>> 4) & 0x0F;
      int two_halfs = 0;
        do {
          if ((0 <= halfbyte) && (halfbyte <= 9))
            buf.append((char) ('0' + halfbyte));
          else
            buf.append((char) ('a' + (halfbyte - 10)));
            halfbyte = data[i] & 0x0F;
      }
      while(two_halfs++ < 1);
    }
    return buf.toString();
  }

  private static String password_crypt(String password, String setting) {
    // The first 12 characters of an existing hash are its setting string.
    setting = setting.substring(0, 12);
    int count_log2 = password_get_count_log2(setting);

    String salt = setting.substring(4, 12);
    // Hashes must have an 8 character salt.
    if (salt.length() != 8) {
      return null; 
    }

    // Convert the base 2 logarithm into an integer.
    int count = 1 << count_log2;

    String hash;
    try {
      hash = SHA512(salt + password);
      do {
        hash = SHA512(hash + password);
      } while (--count >= 0);
    } catch(Exception e) {
      return null; 
    }

    int len = hash.length();
    String output = setting + password_base64_encode(hash, len);         
    return (output.length() > 0) ? output.substring(0, DRUPAL_HASH_LENGTH) : null;
  }

  private static String password_base64_encode(String input, int count) {
    StringBuffer output = new StringBuffer();
    int i = 0, value;
    do {
      value = input.charAt(i++);
      output.append(itoa64.charAt(value & 0x3f));
      if (i < count) {
        value |= input.charAt(i) << 8;
      }
      output.append(itoa64.charAt((value >> 6) & 0x3f));
      if (i++ >= count) {
        break;
      }
      if (i < count) {
        value |= input.charAt(i) << 16;
      }
      output.append(itoa64.charAt((value >> 12) & 0x3f));
      if (i++ >= count) {
        break;
      }
      output.append(itoa64.charAt((value >> 18) & 0x3f));
    } while (i < count);
    return output.toString();
  }

}

--
ps.
One thing i already see is the following:
Consider these functions:
  public String convertToHex(byte[] data) {
    StringBuffer buf = new StringBuffer();
    for (int i = 0; i < data.length; i++) {
      int halfbyte = (data[i] >>> 4) & 0x0F;
      int two_halfs = 0;
        do {
          if ((0 <= halfbyte) && (halfbyte <= 9))
            buf.append((char) ('0' + halfbyte));
          else
            buf.append((char) ('a' + (halfbyte - 10)));
            halfbyte = data[i] & 0x0F;
      }
      while(two_halfs++ < 1);
    }
    return buf.toString();
  }

and
  public String convertToHex(byte [] raw) {
      StringBuilder hex = new StringBuilder(2 * raw.length);
      for (final byte b : raw) {
         int hiVal = (b & 0xF0) >> 4;
         int loVal = b & 0x0F;
         hex.append((char) ('0' + (hiVal + (hiVal / 10 * 7))));
         hex.append((char) ('0' + (loVal + (loVal / 10 * 7))));
      }
      return hex.toString();
   }

The first function returns the string as a lowercase, the second is returned as higher case string. Don't know which to use, both are returning different results in the end, but neither is satisfying.
-Edit-
Almost there???...
Came a step further, changes the question a bit...
In Drupal the following function is used:
$hash = hash($algo, $salt . $password, TRUE);

that returns
'���Y�emb
ӈ3����4��q����h�osab��V�!IS�uC�*[�

As you see, we do not need the hex version, since you get a total different hash back...
So i altered the code in java:
  public byte[] SHA512(String text) {
    byte[] sha1hash = new byte[50];
    try {
      MessageDigest md = MessageDigest.getInstance(""SHA-512"");
      md.update(text.getBytes(""UTF-8""), 0, text.length());
      sha1hash = md.digest();
    } catch (NoSuchAlgorithmException e) {
      e.printStackTrace();
    } catch (UnsupportedEncodingException e) {
      e.printStackTrace();
    }
    return sha1hash;
  }

 --snip--
  hash = new String(SHA512(salt + password));
  System.out.println(hash);

that returns:
'���Y�emb
ӈ3����4��q���h�osab��V�!IS�uC�*[�

As you see thats ALMOST the same....
php:  ӈ3����4��q����h�osab��V�!IS�uC�*[�
java: ӈ3����4��q���h�osab��V�!IS�uC�*[�

Anyone got a clue how to fix that last part?
The form new String(SHA512(salt + password,'Whatevercodec')); did not help me...
Thanks!
","I suggest that you do something like this:
import java.security.NoSuchAlgorithmException;

public class hash {

private static final int DRUPAL_HASH_LENGTH = 55;

private static String _password_itoa64() {
    return ""./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"";
}

public static void main(String args[]) throws Exception {
    // Passwords and hashes generated by Drupal.
    checkPassword(""adrian"", ""$S$DNbBTrkalsPChLsqajHUQS18pBBxzSTQW0310SzivTy7HDQ.zgyG"");
    checkPassword(""test""  , ""$S$DxVn7wubSRzoK9X2pkGx4njeDRkLEgdqPphc2ZXkkb8Viy8JEGf3"");
    checkPassword(""barbaz"", ""$S$DOASeKfBzZoqgSRl/mBnK06GlLESyMHZ81jyUueEBiCrkkxxArpR"");
}


private static int password_get_count_log2(String setting) {
    return _password_itoa64().indexOf(setting.charAt(3));
}


private static byte[] sha512(String input) {
    try {
        return java.security.MessageDigest.getInstance(""SHA-512"").digest(input.getBytes());
    } catch (NoSuchAlgorithmException ex) {
        ex.printStackTrace();
    }
    return new byte[0];
}

private static byte[] sha512(byte[] input) {
    try {
        return java.security.MessageDigest.getInstance(""SHA-512"").digest(input);
    } catch (NoSuchAlgorithmException ex) {
        ex.printStackTrace();
    }
    return new byte[0];
}

/**
 * Note: taken from the default Drupal 7 password algorithm
 *
 * @param candidate               the clear text password
 * @param saltedEncryptedPassword the salted encrypted password string to check => NEEDS TO BE THE DEFAULT DRUPAL 7 PASSWORD HASH.
 * @return true if the candidate matches, false otherwise.
 */
public static boolean checkPassword(String candidate, String saltedEncryptedPassword) throws Exception {
    if (candidate == null || saltedEncryptedPassword == null) {
        return false;
    }

    String hash = password_crypt(candidate, saltedEncryptedPassword);
    System.out.println(""Expected value = "" + saltedEncryptedPassword);
    System.out.println(""Calced   value = "" + hash);
    System.out.println(""Result Good?   = "" + saltedEncryptedPassword.equalsIgnoreCase(hash));


    return saltedEncryptedPassword.equalsIgnoreCase(hash);
}


private static String password_crypt(String password, String passwordHash) throws Exception {
    // The first 12 characters of an existing hash are its setting string.
    passwordHash = passwordHash.substring(0, 12);
    int count_log2 = password_get_count_log2(passwordHash);
    String salt = passwordHash.substring(4, 12);
    // Hashes must have an 8 character salt.
    if (salt.length() != 8) {
        return null;
    }

    int count = 1 << count_log2;


    byte[] hash;
    try {
        hash = sha512(salt.concat(password));

        do {
            hash = sha512(joinBytes(hash, password.getBytes(""UTF-8"")));
        } while (--count > 0);
    } catch (Exception e) {
        System.out.println(""error "" + e.toString());
        return null;
    }

    String output = passwordHash + _password_base64_encode(hash, hash.length);
    return (output.length() > 0) ? output.substring(0, DRUPAL_HASH_LENGTH) : null;
}

private static byte[] joinBytes(byte[] a, byte[] b) {
    byte[] combined = new byte[a.length + b.length];

    System.arraycopy(a, 0, combined, 0, a.length);
    System.arraycopy(b, 0, combined, a.length, b.length);
    return combined;
}



private static String _password_base64_encode(byte[] input, int count) throws Exception {

    StringBuffer output = new StringBuffer();
    int i = 0;
    CharSequence itoa64 = _password_itoa64();
    do {
        long value = SignedByteToUnsignedLong(input[i++]);

        output.append(itoa64.charAt((int) value & 0x3f));
        if (i < count) {
            value |= SignedByteToUnsignedLong(input[i]) << 8;
        }
        output.append(itoa64.charAt((int) (value >> 6) & 0x3f));
        if (i++ >= count) {
            break;
        }
        if (i < count) {
            value |=  SignedByteToUnsignedLong(input[i]) << 16;
        }

        output.append(itoa64.charAt((int) (value >> 12) & 0x3f));
        if (i++ >= count) {
            break;
        }
        output.append(itoa64.charAt((int) (value >> 18) & 0x3f));
    } while (i < count);

    return output.toString();
}


public static long SignedByteToUnsignedLong(byte b) {
    return b & 0xFF;
}

}

","997","<java><drupal><authentication><salt>","3","7","2","2016-09-13 23:44:00","13331897","0","5","1565128","","2012-07-31 12:23:16","2012-07-31 09:00:31",""
"11736555","Java autentication of Drupal passwords","I try to mimic the way Drupal 7 is checking for a correct password in Java.
Found some code as a guideline here: https://github.com/CraftFire/AuthDB-Legacy/blob/master/src/main/java/com/authdb/scripts/cms/Drupal.java and extracted the code i needed.
The thing is however that when i give the password and the hashed version (in order to extract the salt and amount of iterations needed), i get different results.
The passwords are generated using the Drupal password-hash script
resulting in:
Expected   value = $S$DxVn7wubSRzoK9X2pkGx4njeDRkLEgdqPphc2ZXkkb8Viy8JEGf3
Calculated value = $S$DxVn7wubSpQ1CpUnBZZHNqIXMp2XMVZHMYBqAs24NsUHMY7HBkYn

Expected   value = $S$DOASeKfBzZoqgSRl/mBnK06GlLESyMHZ81jyUueEBiCrkkxxArpR
Calculated value = $S$DOASeKfBzs.XMVZ1NkYXNmIqMpEHAoEaMYJ1NmUHCZJaBZFnAZFX

Anyone able to help me / tell me what i'm doing wrong here?
Thanks.
Code:
import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

class test {

  public static void main(String args[]) {
   // Passwords and hashes generated by Drupal.
   checkPassword(""test""  , ""$S$DxVn7wubSRzoK9X2pkGx4njeDRkLEgdqPphc2ZXkkb8Viy8JEGf3""); 
   checkPassword(""barbaz"", ""$S$DOASeKfBzZoqgSRl/mBnK06GlLESyMHZ81jyUueEBiCrkkxxArpR"");
  }

  private static String itoa64 = ""./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"";
  private static final int DRUPAL_HASH_LENGTH = 55;
  private static int password_get_count_log2(String setting) { return itoa64.indexOf(setting.charAt(3)); }

  /**
   * Note: taken from the default Drupal 7 password algorithm
   * @param candidate
   *        the clear text password
   * @param saltedEncryptedPassword
   *        the salted encrypted password string to check => NEEDS TO BE THE DEFAULT DRUPAL 7 PASSWORD HASH.
   * @return true if the candidate matches, false otherwise.
   */
  public static boolean checkPassword(String candidate, String saltedEncryptedPassword) {
    if (candidate == null) {
      return false;
    }
    if (saltedEncryptedPassword == null) {
      return false; 
    }

    String hash = password_crypt(candidate, saltedEncryptedPassword);
    System.out.println(""Tested value = "" + saltedEncryptedPassword);
    System.out.println(""Calced value = "" + hash);

    return hash == saltedEncryptedPassword;
  }

  public static String SHA512(String text) {
    byte[] sha1hash = new byte[40];
    try {
      MessageDigest md = MessageDigest.getInstance(""SHA-512"");
      md.update(text.getBytes(""UTF-8""), 0, text.length());
      sha1hash = md.digest();
    } catch (NoSuchAlgorithmException e) {
      e.printStackTrace();
    } catch (UnsupportedEncodingException e) {
      e.printStackTrace();
    }
    return convertToHex(sha1hash);
  }

  private static String convertToHex(byte[] data) {
    StringBuffer buf = new StringBuffer();
    for (int i = 0; i < data.length; i++) {
      int halfbyte = (data[i] >>> 4) & 0x0F;
      int two_halfs = 0;
        do {
          if ((0 <= halfbyte) && (halfbyte <= 9))
            buf.append((char) ('0' + halfbyte));
          else
            buf.append((char) ('a' + (halfbyte - 10)));
            halfbyte = data[i] & 0x0F;
      }
      while(two_halfs++ < 1);
    }
    return buf.toString();
  }

  private static String password_crypt(String password, String setting) {
    // The first 12 characters of an existing hash are its setting string.
    setting = setting.substring(0, 12);
    int count_log2 = password_get_count_log2(setting);

    String salt = setting.substring(4, 12);
    // Hashes must have an 8 character salt.
    if (salt.length() != 8) {
      return null; 
    }

    // Convert the base 2 logarithm into an integer.
    int count = 1 << count_log2;

    String hash;
    try {
      hash = SHA512(salt + password);
      do {
        hash = SHA512(hash + password);
      } while (--count >= 0);
    } catch(Exception e) {
      return null; 
    }

    int len = hash.length();
    String output = setting + password_base64_encode(hash, len);         
    return (output.length() > 0) ? output.substring(0, DRUPAL_HASH_LENGTH) : null;
  }

  private static String password_base64_encode(String input, int count) {
    StringBuffer output = new StringBuffer();
    int i = 0, value;
    do {
      value = input.charAt(i++);
      output.append(itoa64.charAt(value & 0x3f));
      if (i < count) {
        value |= input.charAt(i) << 8;
      }
      output.append(itoa64.charAt((value >> 6) & 0x3f));
      if (i++ >= count) {
        break;
      }
      if (i < count) {
        value |= input.charAt(i) << 16;
      }
      output.append(itoa64.charAt((value >> 12) & 0x3f));
      if (i++ >= count) {
        break;
      }
      output.append(itoa64.charAt((value >> 18) & 0x3f));
    } while (i < count);
    return output.toString();
  }

}

--
ps.
One thing i already see is the following:
Consider these functions:
  public String convertToHex(byte[] data) {
    StringBuffer buf = new StringBuffer();
    for (int i = 0; i < data.length; i++) {
      int halfbyte = (data[i] >>> 4) & 0x0F;
      int two_halfs = 0;
        do {
          if ((0 <= halfbyte) && (halfbyte <= 9))
            buf.append((char) ('0' + halfbyte));
          else
            buf.append((char) ('a' + (halfbyte - 10)));
            halfbyte = data[i] & 0x0F;
      }
      while(two_halfs++ < 1);
    }
    return buf.toString();
  }

and
  public String convertToHex(byte [] raw) {
      StringBuilder hex = new StringBuilder(2 * raw.length);
      for (final byte b : raw) {
         int hiVal = (b & 0xF0) >> 4;
         int loVal = b & 0x0F;
         hex.append((char) ('0' + (hiVal + (hiVal / 10 * 7))));
         hex.append((char) ('0' + (loVal + (loVal / 10 * 7))));
      }
      return hex.toString();
   }

The first function returns the string as a lowercase, the second is returned as higher case string. Don't know which to use, both are returning different results in the end, but neither is satisfying.
-Edit-
Almost there???...
Came a step further, changes the question a bit...
In Drupal the following function is used:
$hash = hash($algo, $salt . $password, TRUE);

that returns
'���Y�emb
ӈ3����4��q����h�osab��V�!IS�uC�*[�

As you see, we do not need the hex version, since you get a total different hash back...
So i altered the code in java:
  public byte[] SHA512(String text) {
    byte[] sha1hash = new byte[50];
    try {
      MessageDigest md = MessageDigest.getInstance(""SHA-512"");
      md.update(text.getBytes(""UTF-8""), 0, text.length());
      sha1hash = md.digest();
    } catch (NoSuchAlgorithmException e) {
      e.printStackTrace();
    } catch (UnsupportedEncodingException e) {
      e.printStackTrace();
    }
    return sha1hash;
  }

 --snip--
  hash = new String(SHA512(salt + password));
  System.out.println(hash);

that returns:
'���Y�emb
ӈ3����4��q���h�osab��V�!IS�uC�*[�

As you see thats ALMOST the same....
php:  ӈ3����4��q����h�osab��V�!IS�uC�*[�
java: ӈ3����4��q���h�osab��V�!IS�uC�*[�

Anyone got a clue how to fix that last part?
The form new String(SHA512(salt + password,'Whatevercodec')); did not help me...
Thanks!
","Thank you Adrian for the excellent code.  You saved me a lot of time!  I just wanted to post a follow up that does not squash exceptions, removes main() and console output and properly named Java functions.  A unit test follows too.
import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;

public class PhpassHashedPassword {

    private static final int DRUPAL_HASH_LENGTH = 55;

    private static final String ITOA_64 = ""./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"";

    private static int passwordGetCount(String setting) {
        return ITOA_64.indexOf(setting.charAt(3));
    }

    private static byte[] sha512(byte[] input) throws NoSuchAlgorithmException {
        return java.security.MessageDigest.getInstance(""SHA-512"").digest(input);
    }

    /**
     * Note: taken from the default Drupal 7 password algorithm
     *
     * @param candidate the clear text password
     * @param saltedEncryptedPassword the salted encrypted password string to
     * check => NEEDS TO BE THE DEFAULT DRUPAL 7 PASSWORD HASH.
     * @return true if the candidate matches, false otherwise.
     * @throws java.security.NoSuchAlgorithmException
     * @throws java.io.UnsupportedEncodingException
     */
    public static boolean validatePasswordHash(String candidate, String saltedEncryptedPassword) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        if (candidate == null || saltedEncryptedPassword == null) {
            return false;
        }

        String hash = password_crypt(candidate, saltedEncryptedPassword);
        return saltedEncryptedPassword.equalsIgnoreCase(hash);
    }

    private static String password_crypt(String password, String passwordHash) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        // The first 12 characters of an existing hash are its setting string.
        passwordHash = passwordHash.substring(0, 12);
        int count_log2 = passwordGetCount(passwordHash);
        String salt = passwordHash.substring(4, 12);
        // Hashes must have an 8 character salt.
        if (salt.length() != 8) {
            return null;
        }

        int count = 1 << count_log2;

        byte[] hash = sha512(salt.concat(password).getBytes());

        do {
            hash = sha512(joinBytes(hash, password.getBytes(""UTF-8"")));
        } while (--count > 0);

        String output = passwordHash + passwordBase64Encode(hash, hash.length);
        return (output.length() > 0) ? output.substring(0, DRUPAL_HASH_LENGTH) : null;
    }

    private static byte[] joinBytes(byte[] a, byte[] b) {
        byte[] combined = new byte[a.length + b.length];

        System.arraycopy(a, 0, combined, 0, a.length);
        System.arraycopy(b, 0, combined, a.length, b.length);
        return combined;
    }

    private static String passwordBase64Encode(byte[] input, int count) {

        StringBuilder output = new StringBuilder();
        int i = 0;
        do {
            long value = signedByteToUnsignedLong(input[i++]);

            output.append(ITOA_64.charAt((int) value & 0x3f));
            if (i < count) {
                value |= signedByteToUnsignedLong(input[i]) << 8;
            }
            output.append(ITOA_64.charAt((int) (value >> 6) & 0x3f));
            if (i++ >= count) {
                break;
            }
            if (i < count) {
                value |= signedByteToUnsignedLong(input[i]) << 16;
            }

            output.append(ITOA_64.charAt((int) (value >> 12) & 0x3f));
            if (i++ >= count) {
                break;
            }
            output.append(ITOA_64.charAt((int) (value >> 18) & 0x3f));
        } while (i < count);

        return output.toString();
    }

    private static long signedByteToUnsignedLong(byte b) {
        return b & 0xFF;
    }

}

Here is a unit test:
public class PhpassHashedPasswordTest {

    public PhpassHashedPasswordTest() {
    }

    @BeforeClass
    public static void setUpClass() {
    }

    @AfterClass
    public static void tearDownClass() {
    }

    @Before
    public void setUp() {
    }

    @After
    public void tearDown() {
    }

    @org.junit.Test
    public void testGoodPassword() throws NoSuchAlgorithmException, UnsupportedEncodingException {
        if(!PhpassHashedPassword.validatePasswordHash(""Y0dog!"", ""$S$EU44gErBh91wY1I8eEfEyymUNfFqh8OXLYeAdm.1xVnjgkN9KauF"")) {
            fail(""expected password to match"");
        }
    }

    @org.junit.Test
    public void testMismatchPassword() throws NoSuchAlgorithmException, UnsupportedEncodingException {
        if(PhpassHashedPassword.validatePasswordHash(""THEWRONGPASSWORD"", ""$S$EU44gErBh91wY1I8eEfEyymUNfFqh8OXLYeAdm.1xVnjgkN9KauF"")) {
            fail(""expected password match to fail"");
        }
    }


}

","997","<java><drupal><authentication><salt>","3","0","2","2016-09-13 23:44:00","13331897","0","5","1565128","","2012-07-31 12:23:16","2012-07-31 09:00:31",""
"36015610","How Do You Ensure Data Security of Small Data?","My Question:
What is the Best Approach to Ensure Data Security of Small Data? Below I present a concern around symmetric and asymmetric encryption. I'm curious if there is a way to do asymmetric encryption on small data with an equivalent of some sort of  ""salting"" to actually make it secure? If so, how do you pick a ""salt"" and implement it properly? Or is there a better way to handle this?
Explanation of My Concern:
When encrypting something that has ""bulk"" it seems to me that asymmetric encryption approaches are pretty secure. My concern is around if I have a small field of data, say a credit card number, password, or social security number in a database. Then the data being encrypted is of fixed length and presentation. That being said, a hacker could attempt to encrypt every possible social security numbers (10^9 permutations) with the public key and compare it to values stored in the db. Once they find a match, they know the real number.  Similar attacks can be done for the other data types. Because of this, I decided to avoid symmetric methods like mysql's AES_ENCRYPT() built in function, however now I'm questioning asymmetric as well.
How do we properly protect small data? 
Salting is normally used for hash algorithms, but I need to be able to get the data back after. I thought about maybe having some ""base bulk text"", then append the sensitive data to the end. Do the encrypt on that concatenation. Decryption would reverse the process, by decrypting then stripping off the ""base bulk text"". If the hacker can figure out the base bulk text then I don't see how this would add any additional security.
Picking other data to include as part of encryption, to help act like a salt value derived from other fields in the database(or hash values of those fields, or combination there of yields the same issue) also seems like it is vulnerable. As hackers could be run through combinations similar to the attack mentioned above to try to perform a more intelligent form of ""brute force"". That being said, I'm unsure of how to properly secure the small data and my googles have not helped me.
What is the best approach to ensure data security of small data?
","Asymmetric encryption is most useful for communicating encrypted data between two parties. For example, you have a mobile application that accepts credit card numbers and needs to transmit them to the server for processing. You want the public application (which is inherently insecure) to be able to encrypt the data and only you should be able to decrypt it in your secure environment.
Storage is a completely different matter. You're not communicating anything to or from an insecure party, you are the only one dealing with the data. You don't want to give everyone a way to decrypt things if they breach your storage, you want to make things as difficult as possible. Use a symmetric algorithm for storage and include a unique Initialization Vector with each encrypted value as a hurdle to decryption if the storage is compromised.
PCI-DSS requires that you use Strong Cryptography, which they define as follows.

At the time of publication, examples of industry-tested and accepted standards and algorithms for minimum encryption strength include AES (128 bits and higher), TDES (minimum triple-lengthkeys), RSA (2048 bits and higher), ECC (160 bits and higher), and ElGamal (2048 bits and higher). See NIST Special Publication 800-57 Part 1 (http://csrc.nist.gov/publications/) for more guidance on cryptographic key strengths and algorithms.

Beyond that, they are primarily concerned with key management, and with good reason. Breaching your storage won't help as much as actually having the means to decrypt your data, so ensure that your symmetric key is managed correctly and in accordance with their requirements. 
","986","<security><encryption><aes><salt><pci-compliance>","2","1","4","2016-03-16 17:29:36","36019579","4","","1190934","","2016-03-15 18:44:16","2016-03-15 15:31:05",""
"36015610","How Do You Ensure Data Security of Small Data?","My Question:
What is the Best Approach to Ensure Data Security of Small Data? Below I present a concern around symmetric and asymmetric encryption. I'm curious if there is a way to do asymmetric encryption on small data with an equivalent of some sort of  ""salting"" to actually make it secure? If so, how do you pick a ""salt"" and implement it properly? Or is there a better way to handle this?
Explanation of My Concern:
When encrypting something that has ""bulk"" it seems to me that asymmetric encryption approaches are pretty secure. My concern is around if I have a small field of data, say a credit card number, password, or social security number in a database. Then the data being encrypted is of fixed length and presentation. That being said, a hacker could attempt to encrypt every possible social security numbers (10^9 permutations) with the public key and compare it to values stored in the db. Once they find a match, they know the real number.  Similar attacks can be done for the other data types. Because of this, I decided to avoid symmetric methods like mysql's AES_ENCRYPT() built in function, however now I'm questioning asymmetric as well.
How do we properly protect small data? 
Salting is normally used for hash algorithms, but I need to be able to get the data back after. I thought about maybe having some ""base bulk text"", then append the sensitive data to the end. Do the encrypt on that concatenation. Decryption would reverse the process, by decrypting then stripping off the ""base bulk text"". If the hacker can figure out the base bulk text then I don't see how this would add any additional security.
Picking other data to include as part of encryption, to help act like a salt value derived from other fields in the database(or hash values of those fields, or combination there of yields the same issue) also seems like it is vulnerable. As hackers could be run through combinations similar to the attack mentioned above to try to perform a more intelligent form of ""brute force"". That being said, I'm unsure of how to properly secure the small data and my googles have not helped me.
What is the best approach to ensure data security of small data?
","When I encrypt short messages, I add a relatively long random salt to them before encryption. Edit others suggest prepending the salt to the payload.
So, for example, if I encrypt the fake credit card number 4242 4242 4242 4242. what I actually encrypt is 
   tOH_AN2oi4MkLC3lmxxRWaNqh6--m42424242424242424

the first time, and 
   iQe5xOZPIMjVWfrDDip244ZGhCy2U142424242424242424

the second time, and so forth.
This random salting significantly discourages the lookup table approach you describe.   Many operating systems furnish sources of high-quality random numbers like *nix /dev/rand and Windows' RNGCryptoServiceProvider module. 
It's still not OK to hold payment card data in that way without defense in depth and PCI data security certification.
Edit: Some encryption schemes handle this salting as part of their normal functioning.
","986","<security><encryption><aes><salt><pci-compliance>","2","-1","4","2016-03-16 17:29:36","36019579","4","","1190934","","2016-03-15 18:44:16","2016-03-15 15:31:05",""
"36015610","How Do You Ensure Data Security of Small Data?","My Question:
What is the Best Approach to Ensure Data Security of Small Data? Below I present a concern around symmetric and asymmetric encryption. I'm curious if there is a way to do asymmetric encryption on small data with an equivalent of some sort of  ""salting"" to actually make it secure? If so, how do you pick a ""salt"" and implement it properly? Or is there a better way to handle this?
Explanation of My Concern:
When encrypting something that has ""bulk"" it seems to me that asymmetric encryption approaches are pretty secure. My concern is around if I have a small field of data, say a credit card number, password, or social security number in a database. Then the data being encrypted is of fixed length and presentation. That being said, a hacker could attempt to encrypt every possible social security numbers (10^9 permutations) with the public key and compare it to values stored in the db. Once they find a match, they know the real number.  Similar attacks can be done for the other data types. Because of this, I decided to avoid symmetric methods like mysql's AES_ENCRYPT() built in function, however now I'm questioning asymmetric as well.
How do we properly protect small data? 
Salting is normally used for hash algorithms, but I need to be able to get the data back after. I thought about maybe having some ""base bulk text"", then append the sensitive data to the end. Do the encrypt on that concatenation. Decryption would reverse the process, by decrypting then stripping off the ""base bulk text"". If the hacker can figure out the base bulk text then I don't see how this would add any additional security.
Picking other data to include as part of encryption, to help act like a salt value derived from other fields in the database(or hash values of those fields, or combination there of yields the same issue) also seems like it is vulnerable. As hackers could be run through combinations similar to the attack mentioned above to try to perform a more intelligent form of ""brute force"". That being said, I'm unsure of how to properly secure the small data and my googles have not helped me.
What is the best approach to ensure data security of small data?
","If you are encrypting with an RSA public key, there is no need to salt the small data. Use OAEP padding. The padding introduces the equivalent of random salt. Try it: encrypt the credit card number twice with the same RSA public key, using OAEP padding, and look at the result. You will see two different values, indistinguishable from random data.
If you are encrypting with an AES symmetric key, then you can use a random IV per data, and store the IV in the clear, publicly, next to the ciphertext. Try encrypting the credit number twice with AES CBC mode, for example, with a unique, 16 byte (cryptographically strong) IV each time. You will see two different ciphertexts. Now, assuming a 16-byte AES key, try to brute force those two outputs, without using any knowledge of the key. Use just the ciphertext, and the 16 byte IVs, and try to discover the credit card number.
EDIT: It's beyond the scope of the question, but since I mention it in the comment, if a client can send you arbitrary ciphertext to decrypt (""decrypt this credit card info""), you must not let the client see any difference between a padding error on decryption, vs. any other error on decryption. Look up ""padding oracle"".
","986","<security><encryption><aes><salt><pci-compliance>","2","4","4","2016-03-16 17:29:36","36019579","4","","1190934","","2016-03-15 18:44:16","2016-03-15 15:31:05",""
"36015610","How Do You Ensure Data Security of Small Data?","My Question:
What is the Best Approach to Ensure Data Security of Small Data? Below I present a concern around symmetric and asymmetric encryption. I'm curious if there is a way to do asymmetric encryption on small data with an equivalent of some sort of  ""salting"" to actually make it secure? If so, how do you pick a ""salt"" and implement it properly? Or is there a better way to handle this?
Explanation of My Concern:
When encrypting something that has ""bulk"" it seems to me that asymmetric encryption approaches are pretty secure. My concern is around if I have a small field of data, say a credit card number, password, or social security number in a database. Then the data being encrypted is of fixed length and presentation. That being said, a hacker could attempt to encrypt every possible social security numbers (10^9 permutations) with the public key and compare it to values stored in the db. Once they find a match, they know the real number.  Similar attacks can be done for the other data types. Because of this, I decided to avoid symmetric methods like mysql's AES_ENCRYPT() built in function, however now I'm questioning asymmetric as well.
How do we properly protect small data? 
Salting is normally used for hash algorithms, but I need to be able to get the data back after. I thought about maybe having some ""base bulk text"", then append the sensitive data to the end. Do the encrypt on that concatenation. Decryption would reverse the process, by decrypting then stripping off the ""base bulk text"". If the hacker can figure out the base bulk text then I don't see how this would add any additional security.
Picking other data to include as part of encryption, to help act like a salt value derived from other fields in the database(or hash values of those fields, or combination there of yields the same issue) also seems like it is vulnerable. As hackers could be run through combinations similar to the attack mentioned above to try to perform a more intelligent form of ""brute force"". That being said, I'm unsure of how to properly secure the small data and my googles have not helped me.
What is the best approach to ensure data security of small data?
","If you need to encrypt data use a symmetric key algorithm, AES is a good choice. Use a mode such as CBC and a random IV, this will ensure that encryption the same data will produce different output.
Add PKCS#7 née PKCS#5 for padding.
If there is real value in the data hire a cryptographic domain expert to help with the design and later validation.
","986","<security><encryption><aes><salt><pci-compliance>","2","2","4","2016-03-16 17:29:36","36019579","4","","1190934","","2016-03-15 18:44:16","2016-03-15 15:31:05",""
"27165107","Check HMAC-SHA1 without key in C#","I am generating HMAC-SHA1 without key in C# and it returns every time different hash for same value, how can I match hashes, 
My code is https://dotnetfiddle.net/3a3tiP

is it possible or not to match these hashes?
I think HMAC-SHA1 not possible without key Am I right?
If above 'Yes' then why C# allow to generate without key and how is it doing?

","Yes, because you are using parameterless constructor to build HMACSHA1 instance, and MSDN says
 

HMACSHA1() - Initializes a new instance of the HMACSHA1 class with a randomly generated key.

Just add some constant key and you'll get same hash every time. e.g.
var hmacSha = new HMACSHA1(Encoding.UTF8.GetBytes(""yourConstantKey""));

And answering your questions:

Yes, use same key for 2 generations.
Yes.
It generates random key for you

","984","<c#><salt><hmacsha1>","1","3","2","2014-11-27 07:30:21","27165281","1","","355063","","2014-11-27 07:24:53","2014-11-27 07:19:10",""
"27165107","Check HMAC-SHA1 without key in C#","I am generating HMAC-SHA1 without key in C# and it returns every time different hash for same value, how can I match hashes, 
My code is https://dotnetfiddle.net/3a3tiP

is it possible or not to match these hashes?
I think HMAC-SHA1 not possible without key Am I right?
If above 'Yes' then why C# allow to generate without key and how is it doing?

","From the documentation of HMACSHA1:

A Hash-based Message Authentication Code (HMAC) can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key. 

So yes, you need a key. If you don't specify a key, one will be generated for you, and you can fetch it with the Key property afterwards (e.g. to store it). Or you can specify it in the constructor, or set the Key property, either because you've received it from the other party, or because you want to reuse a previously-generated key.
If you hash the same data using the same key, you should get the same hash as a result.
As noted in comments, you should not then convert the HMAC to a string using Encoding.GetString, because it's arbitrary binary data - it's not encoded text. The simplest approach is probably to use base64 instead:
string base64Hmac = Convert.ToBase64String(hmac);

","984","<c#><salt><hmacsha1>","1","2","2","2014-11-27 07:30:21","27165281","1","","355063","","2014-11-27 07:24:53","2014-11-27 07:19:10",""
"15777143","Can I Expose The Hashed Salt + Password?","I am using a SHA-512 hash 1000 times on a salt + password. Is it safe to return that when querying information about a user or should I secure it and make it available only over HTTPS?
For example, if I make the following request:
GET: http://domain.com/users?id=437

and it returns:
{""firstName"":""Eliot"",""lastName"":""My last name"",""email"":""email@emailplace.com"",""password"":[91,49,-34,77,79,-48,67,-62,-12,84,84,-18,-81,23,-92,-31,74,-28,-80,102,60,35,-102,115,18,-76,20,-90,-8,91,13,23],""authToken"":""33c977b1-5ab6-4a8a-8da9-68c8028eff92"",""id"":179}

does it matter that it is made public?
","Why would you ever return a user's password in response to any public-facing query? It doesn't matter what form the password is returned in -- this is fundamentally insecure!
Passwords can be cracked. Given a hash and knowledge of how the hash was constructed, you can bruteforce the relevant parameters. Even though it takes 1000 times longer, and the salt might have to be bruteforced (if not included in the query response), the possibility still exists (and someone patient enough, with the right resources, might just do it if the value was high enough). Don't take the risk -- just don't disclose the password in any form.
","970","<security><hash><passwords><public><salt>","5","10","2","2013-04-03 01:44:26","15777170","2","0","","","","2013-04-03 01:02:21",""
"15777143","Can I Expose The Hashed Salt + Password?","I am using a SHA-512 hash 1000 times on a salt + password. Is it safe to return that when querying information about a user or should I secure it and make it available only over HTTPS?
For example, if I make the following request:
GET: http://domain.com/users?id=437

and it returns:
{""firstName"":""Eliot"",""lastName"":""My last name"",""email"":""email@emailplace.com"",""password"":[91,49,-34,77,79,-48,67,-62,-12,84,84,-18,-81,23,-92,-31,74,-28,-80,102,60,35,-102,115,18,-76,20,-90,-8,91,13,23],""authToken"":""33c977b1-5ab6-4a8a-8da9-68c8028eff92"",""id"":179}

does it matter that it is made public?
","You shouldn't expose any more information than necessary. Making it only available over HTTPS does nothing - I could just hit the URL via HTTPS and their password hash is still exposed.
Forget the password, you're also exposing the users' email address. Lock down whatever this API is.
","970","<security><hash><passwords><public><salt>","5","3","2","2013-04-03 01:44:26","15777170","2","0","","","","2013-04-03 01:02:21",""
"7056233","Random salt + hashed pass or a random salt + crypt()'ed pass?","I'm trying to make a more or less secure login system for my site, I haven't had much time with securing things so I'm learning as I go along. Wanted to hear some views on which of the following is better and why. (or have I made a mistake somewhere?)
$staticsalt = '$%*#)$*)^A#$#543667ggfdf\#$%x';  
$random = md5(uniqid(mt_rand(), true));
$salt = hash('sha512',$random.$_POST['password'].microtime().$staticsalt);

either (where having the $salt in the database won't be necessary...)
$password = crypt($_POST['password'], '$2a$12$'.$salt);   

or (where I would need the $salt in the database also...)
$password = hash('sha512',$salt.$_POST['password']);

","
SHA512 is quite a fast algorithm, which is usually an undesirable attribute for password hashing algorithms.
Using a predictable value such as microtime as random seed for the salt may open you up to some advanced attacks that a more random value would prevent.

I recommend phpass, which is a good existing implementation of a password hashing system.
http://www.openwall.com/phpass/
","969","<php><security><hash><salt><bcrypt>","2","3","3","2011-08-14 14:16:38","","6","2","893767","","2011-08-14 12:35:11","2011-08-14 10:18:42",""
"7056233","Random salt + hashed pass or a random salt + crypt()'ed pass?","I'm trying to make a more or less secure login system for my site, I haven't had much time with securing things so I'm learning as I go along. Wanted to hear some views on which of the following is better and why. (or have I made a mistake somewhere?)
$staticsalt = '$%*#)$*)^A#$#543667ggfdf\#$%x';  
$random = md5(uniqid(mt_rand(), true));
$salt = hash('sha512',$random.$_POST['password'].microtime().$staticsalt);

either (where having the $salt in the database won't be necessary...)
$password = crypt($_POST['password'], '$2a$12$'.$salt);   

or (where I would need the $salt in the database also...)
$password = hash('sha512',$salt.$_POST['password']);

","Actualy there is no point to ad so much security. You have to know for what your system is made for. If its just some chat, then you will be fine with md5. If its banking system, well then you must have some real authentication system, i mean some of card with salts or code generator.
EDIT: I dont thing that there is one good security policy. Upper answer is great, thought.
","969","<php><security><hash><salt><bcrypt>","2","-2","3","2011-08-14 14:16:38","","6","2","893767","","2011-08-14 12:35:11","2011-08-14 10:18:42",""
"7056233","Random salt + hashed pass or a random salt + crypt()'ed pass?","I'm trying to make a more or less secure login system for my site, I haven't had much time with securing things so I'm learning as I go along. Wanted to hear some views on which of the following is better and why. (or have I made a mistake somewhere?)
$staticsalt = '$%*#)$*)^A#$#543667ggfdf\#$%x';  
$random = md5(uniqid(mt_rand(), true));
$salt = hash('sha512',$random.$_POST['password'].microtime().$staticsalt);

either (where having the $salt in the database won't be necessary...)
$password = crypt($_POST['password'], '$2a$12$'.$salt);   

or (where I would need the $salt in the database also...)
$password = hash('sha512',$salt.$_POST['password']);

","Don't hash your salt like that.
crypt's Blowfish hashing takes a 22-character base64-encoded string (using characters [./0-9A-Za-z]) for a salt, which amounts to 128 bits of entropy.
The SHA-512 hash you're using to create your salt has 512 bits of entropy. But you're throwing away more than 80% of that since crypt will now only use 22 lowercase, hexadecimal characters. That leaves you with only about 85 bits of entropy despite all the fancy randomness-generating you're doing.
And if 85 bits is good enough for you, you might as well just do something like this:
$salt = str_replace(""+"", ""."", base64_encode(md5(uniqid(mt_rand(), true), true)));

I don't really dare to give you any advice on how to generate a salt that does use the full 128 bits, since I'm not a cryptography expert.
","969","<php><security><hash><salt><bcrypt>","2","0","3","2011-08-14 14:16:38","","6","2","893767","","2011-08-14 12:35:11","2011-08-14 10:18:42",""
"30764178","Generate SSHA password in PHP to use ldap_compare for OpenLDAP SSHA passwords","I have an OpenLDAP user with SSHA password. I want to compare his SSHA encoded password with a password specified at php webform.
Unfortunately ldap_compare can only compare plain text passwords:
$check = ldap_compare($ldapconn, $dn, $ldap_password, $php_webform_password);

Is there any way to generate exactly the same SSHA password in PHP based on the plain text password to be able to compare the SSHA password in OpenLDAP ?
Or is there any secure way to compare it ?
I know the '{SSHA}' . base64_encode(pack('H*',sha1($php_webform_password))), but the salt is needed for encoding is random, so I can't generate the same with PHP.
Is there any solution for this ? I don't want to use plain text passwords in OpenLDAP as it is not secure.
Thank you for your help.
","","959","<php><openldap><salt><ssha>","0","","0","2015-06-10 18:14:35","","2","","","","","2015-06-10 18:14:35",""
"15993865","PHP - Sending password salt for hashing","My database stores unique salts for every user.
I'm creating a login script in php for an application where each user has it's own unique salt and here's how I plan to implement the login.

User enters details and sends them
Username is sent and script check if it exists
If it does then returns the salt for that user otherwise general error is returned

I need the script to return the salt for that user because otherwise how would my app verify that the submitted password is correct when it cannot hash the password without the salt and send it back?
Now here's what I'm unsure about. Does it matter whether the salt is encrypted or not because a hacker could just see what it is and see the password hash and maybe could do something with it. Should I encrypt the salt before I send it?
Maybe I'm not understanding/overlooking something in the replies below.
Advice needed please.
","It doesn't matter if your salts are hashed or left as plain strings - the important point is that salting a password prevents the direct use of dictionary/rainbow table attacks to brute-force crack passwords. An added advantage is that each user has a different hashed password as a result.
Salts are randomly generated string that are created server-side and don't involve any kind of transmission to or from the browser.
On your server:
  // Password from form
  $pw = $_GET['password'];

  // Generate salt using unique values
  $salt = (rand(8).$registration_date.$username);

  // Password to be hashed
  $pwthb = ($pw.$salt);

If a hacker gains access to your databases, then your game is over in the majority of cases as you need to store the initial random salt to hash it for comparison.
A simple example:

User enters initial password in browser upon registration
On your server, password is combined with a unique salt, hashed and stored as password in DB
Salt is stored in DB

Note: hashing can be done using PHP or using MySQL/DB functions
When the user returns:

User enters password in browser
Grab salt from DB and combine with the password entered
Hash password+salt and compare with stored/hashed password
If they match: authenticate

In terms of further reading, It's probably worth looking over the following:

Is encrypting a salt value with a password/plaintext a viable alternative to straight up hashing?
The necessity of hiding the salt for a hash
How store salt in distributed environment

","957","<php><send><salt>","1","1","1","2013-04-14 00:47:54","15994223","25","1","1420635","","2013-04-13 23:30:49","2013-04-13 22:59:35",""
"11347261","Hashing (with salts) Username and Password in php","I am creating a user login function but I've seen mixed views on the best way to do this.
Here's what I was thinking of doing...

Hashing the Username using 2 hashed salts which are based on substrings of
the username. 
Hashing the password using 2 randomly generated hashed salts which are held in a
table with the password and username.

Is this overkill, wrong, or even not secure enough??
","I'd say that hashing the username is overkill, as is two salts for the password. One salt would be sufficient.
Be sure to use a secure hashing algorithm, such as SHA-512.
","955","<php><security><hash><salt><saltedhash>","2","2","6","2012-07-05 15:32:31","11347369","3","","457148","","2012-07-05 15:22:07","2012-07-05 15:10:53",""
"11347261","Hashing (with salts) Username and Password in php","I am creating a user login function but I've seen mixed views on the best way to do this.
Here's what I was thinking of doing...

Hashing the Username using 2 hashed salts which are based on substrings of
the username. 
Hashing the password using 2 randomly generated hashed salts which are held in a
table with the password and username.

Is this overkill, wrong, or even not secure enough??
","Salting protects against rainbow tables, so having 2 salts isn't going to be any better than 1. The hacker needs to know the salt in order to crack your password with a rainbow table, the only way they can do that is if they have access to the database table. And if they have that they have both salts anyway.
The longer the password the harder it will be to do it with brute force, so a longer password is going to be better than extra salt.
Salting and hashing your username will add unwanted over-head every time you read the username from database. With the password you only need to salt and hash at log-on.
Ideally use something like BCrypt where the cryptographic hashing function can be adaptively slowed down over time as moore's law continues. This will reduce the chance of a brute force attack.
","955","<php><security><hash><salt><saltedhash>","2","4","6","2012-07-05 15:32:31","11347369","3","","457148","","2012-07-05 15:22:07","2012-07-05 15:10:53",""
"11347261","Hashing (with salts) Username and Password in php","I am creating a user login function but I've seen mixed views on the best way to do this.
Here's what I was thinking of doing...

Hashing the Username using 2 hashed salts which are based on substrings of
the username. 
Hashing the password using 2 randomly generated hashed salts which are held in a
table with the password and username.

Is this overkill, wrong, or even not secure enough??
","Like others said, hashing username is overkill and one salt is enough. Use algorithm which is mathematically slow - it would be slow for the cracker too.
","955","<php><security><hash><salt><saltedhash>","2","1","6","2012-07-05 15:32:31","11347369","3","","457148","","2012-07-05 15:22:07","2012-07-05 15:10:53",""
"11347261","Hashing (with salts) Username and Password in php","I am creating a user login function but I've seen mixed views on the best way to do this.
Here's what I was thinking of doing...

Hashing the Username using 2 hashed salts which are based on substrings of
the username. 
Hashing the password using 2 randomly generated hashed salts which are held in a
table with the password and username.

Is this overkill, wrong, or even not secure enough??
","I just answered another SO question going into great detail on how to handle logins and password security.  It may be worth a read.  (Some tidbits: Username has no need to be salted.  Password definitely should be salted, but once is all you need.  I use SHA-256.)
","955","<php><security><hash><salt><saltedhash>","2","0","6","2012-07-05 15:32:31","11347369","3","","457148","","2012-07-05 15:22:07","2012-07-05 15:10:53",""
"11347261","Hashing (with salts) Username and Password in php","I am creating a user login function but I've seen mixed views on the best way to do this.
Here's what I was thinking of doing...

Hashing the Username using 2 hashed salts which are based on substrings of
the username. 
Hashing the password using 2 randomly generated hashed salts which are held in a
table with the password and username.

Is this overkill, wrong, or even not secure enough??
","Salting your password once is enough. Having two salts is basically equivalent to generating a longer salt.
Hashing usernames will make it more difficult for you to manage your users than making the login more secure. Consider making a list of your current users, but all you have is the hashed versions? Remember that the point of hashing is to an irreversible 'encryption' of your data. 
Consider using crypt() for hashing your password. Especially notice the Blowfish method as this is considered to be the safest hashing method currently. 
","955","<php><security><hash><salt><saltedhash>","2","1","6","2012-07-05 15:32:31","11347369","3","","457148","","2012-07-05 15:22:07","2012-07-05 15:10:53",""
"11347261","Hashing (with salts) Username and Password in php","I am creating a user login function but I've seen mixed views on the best way to do this.
Here's what I was thinking of doing...

Hashing the Username using 2 hashed salts which are based on substrings of
the username. 
Hashing the password using 2 randomly generated hashed salts which are held in a
table with the password and username.

Is this overkill, wrong, or even not secure enough??
","There really is no need to hash you username field, that should be something you are willing to display on the webpage while keeping your system secure. That being said, while it is unnecessary, it can't hurt if your willing to put up with it.
Adding two salts is rather pointless if they both come from and are stored in the same place. Rather than doing this, I would use a permutation of the username as a salt, along with a long random string that you randomly generate and store in your database. If you are still paranoid, (which, I would guess you are by the whole ""hash the usernames"" thing) I would consider adding a third salt which you use throughout your application.
Also, very important:
Make Sure You Use a Strong Hash Function
Make sure you use a secure hash function. whirlpool, sha256 and up, tiger, or whatever else you can use (check hash_algos()). Also, take a look at implementing bcrypt, which is very slow ( How do you use bcrypt for hashing passwords in PHP? ).
","955","<php><security><hash><salt><saltedhash>","2","0","6","2012-07-05 15:32:31","11347369","3","","457148","","2012-07-05 15:22:07","2012-07-05 15:10:53",""
"31680495","sha256/salt password key storage","I have created a registration form processed as follows:
function register_user() {
   global $conn;
   $name      = sanitize($_POST['name']);
   $email     = sanitize($_POST['email']);
   $password = sanitize($_POST['password']);
   $salt      = bin2hex(mcrypt_create_iv(32, MCRYPT_DEV_URANDOM));

   $saltedPW = $password . $salt;
   $hashedPW = hash('sha256', $saltedPW);

   mysqli_query($conn, ""INSERT INTO users (name, email, password, salt) VALUES ('$name', '$email', '$hashedPW', '$salt')"");

The login form is then processed as follows:
    function login($email, $password) {
    global $conn;
    $user_id = user_id_from_username($email);
    $query   = mysqli_query($conn, ""SELECT salt FROM users WHERE email = '$email'"");
    $row1    = mysqli_fetch_assoc($query);
    $salt    = $row1['salt'];

    $saltedPW = $password . $salt;
    $hashedPW = hash('sha256', $saltedPW);

    $result = mysqli_query($conn, ""SELECT COUNT(user_id) FROM users WHERE email = '$email' AND password = '$hashedPW'"");
    $row     = mysqli_fetch_row($result);

    return ($row[0] == 1) ? $user_id : false;
}

The user table is structured as follows:
user_id; name; email; password; salt (additional columns for password recovering, admin rights, etc.). Having submitted the details to my company's IT compliance department, someone with PHP experience (exceeding mine no doubt) has stated that I can't store the key for the encryption in the system - if someone got the file they could decrypt the password. My question is - is this correct? Is my process flawed? All of the research I have carried out indicates that an SHA256 hash with random salt is one of the best ways to go.
","Do not use sha256,md5 etc for password hashing. I think you should use BCrypt for password hashing. This is the most powerful password hashing algorithm at present. password_hash() and password_verify() are used to hash and verify password for BCrypt. PHP 5.5.0 or greater uses BCrypt as default algorithm for password_hash(). Do not use your own salt. Let password_hash() do it for you.
","949","<php><mysql><salt><sha256><password-hash>","0","2","2","2015-09-03 05:51:46","31682093","2","0","2224584","","2015-09-03 05:51:46","2015-07-28 15:15:53",""
"31680495","sha256/salt password key storage","I have created a registration form processed as follows:
function register_user() {
   global $conn;
   $name      = sanitize($_POST['name']);
   $email     = sanitize($_POST['email']);
   $password = sanitize($_POST['password']);
   $salt      = bin2hex(mcrypt_create_iv(32, MCRYPT_DEV_URANDOM));

   $saltedPW = $password . $salt;
   $hashedPW = hash('sha256', $saltedPW);

   mysqli_query($conn, ""INSERT INTO users (name, email, password, salt) VALUES ('$name', '$email', '$hashedPW', '$salt')"");

The login form is then processed as follows:
    function login($email, $password) {
    global $conn;
    $user_id = user_id_from_username($email);
    $query   = mysqli_query($conn, ""SELECT salt FROM users WHERE email = '$email'"");
    $row1    = mysqli_fetch_assoc($query);
    $salt    = $row1['salt'];

    $saltedPW = $password . $salt;
    $hashedPW = hash('sha256', $saltedPW);

    $result = mysqli_query($conn, ""SELECT COUNT(user_id) FROM users WHERE email = '$email' AND password = '$hashedPW'"");
    $row     = mysqli_fetch_row($result);

    return ($row[0] == 1) ? $user_id : false;
}

The user table is structured as follows:
user_id; name; email; password; salt (additional columns for password recovering, admin rights, etc.). Having submitted the details to my company's IT compliance department, someone with PHP experience (exceeding mine no doubt) has stated that I can't store the key for the encryption in the system - if someone got the file they could decrypt the password. My question is - is this correct? Is my process flawed? All of the research I have carried out indicates that an SHA256 hash with random salt is one of the best ways to go.
","
I can't store the key for the encryption in the system

You haven't. You're hashing, you're not encrypting. salt !== key

if someone got the file they could decrypt the password

No. Nothing is encrypted, so there's nothing to decrypt. They'd get only the resulting hash, which they'd still have to brute force.

Is my process flawed? 

Yes, but not because of their comments. It's flawed because you should never use SHA or MD5 or similar for passwords. They're designed to be fast, which is not what you want. You want something that intentionally takes a hunk of CPU, as to make brute force attacks untimely. This is exactly what the password_hash() function is for. Use it.
","949","<php><mysql><salt><sha256><password-hash>","0","5","2","2015-09-03 05:51:46","31682093","2","0","2224584","","2015-09-03 05:51:46","2015-07-28 15:15:53",""
"15527602","Problems with the salt and md5 encryption when login","I have managed to create a basic encryption system so when a user initially signs up to my website the password is stored in my database safely using salt, md5 and sha1.
The problem occurs now when the user is logging in, the string (password) that is sent to the database is different even though I am using the same method. I shall demonstrate below:
This is my basic (for now) add customer to database page using the salt technique.
require ""dbconn.php"";

$username = $_GET['username'];
$email = $_GET['email'];
$pass = $_GET['pwd1'];
$pass2 =$_GET['pwd2'];
$matching = 0;

if($pass == $pass2)
{
echo ""<script type='text/javascript'> window.alert('Your details have been successfully          registered, please proceed to login with your new credentials!')</script>"";
echo '<script>javascript:window.close();</script>';

$salt = sha1(md5($pass));
$pass = md5($pass.$salt);

$query = ""INSERT INTO customer VALUES    ('"".$username.""','"".$email.""','"".$pass.""','face1.jpg')"";   

Again this is my basic (for now) login page again using the same salt technique (i have left out the latter part of this page)
session_start();
require ""dbconn.php"";

$username = $_GET['username'];
$password = $_GET['password'];

$salt = sha1(md5($password));
$password = md5($password.$salt);

$sql = ""SELECT * FROM customer WHERE username ='"".$username.""' AND   password='"".$password.""'"";

I have done some checks and when putting a password into the database
eg using the password name test: it is stored as 34364c859afb02e70306c905374ac2 but when a user logs in the password is: 34364c859afb02e70306c905374ac2d5
","The hash you're storing is too short for a MD5 hash - it's 30 characters long.
You're most likely trimming it. Check the length of your field, it should accommodate 32 characters for the hash.
","937","<php><html><md5><salt>","1","1","4","2013-03-20 15:38:14","15527944","10","","258127","","2013-03-20 15:29:36","2013-03-20 15:20:00","2013-03-28 18:09:07"
"15527602","Problems with the salt and md5 encryption when login","I have managed to create a basic encryption system so when a user initially signs up to my website the password is stored in my database safely using salt, md5 and sha1.
The problem occurs now when the user is logging in, the string (password) that is sent to the database is different even though I am using the same method. I shall demonstrate below:
This is my basic (for now) add customer to database page using the salt technique.
require ""dbconn.php"";

$username = $_GET['username'];
$email = $_GET['email'];
$pass = $_GET['pwd1'];
$pass2 =$_GET['pwd2'];
$matching = 0;

if($pass == $pass2)
{
echo ""<script type='text/javascript'> window.alert('Your details have been successfully          registered, please proceed to login with your new credentials!')</script>"";
echo '<script>javascript:window.close();</script>';

$salt = sha1(md5($pass));
$pass = md5($pass.$salt);

$query = ""INSERT INTO customer VALUES    ('"".$username.""','"".$email.""','"".$pass.""','face1.jpg')"";   

Again this is my basic (for now) login page again using the same salt technique (i have left out the latter part of this page)
session_start();
require ""dbconn.php"";

$username = $_GET['username'];
$password = $_GET['password'];

$salt = sha1(md5($password));
$password = md5($password.$salt);

$sql = ""SELECT * FROM customer WHERE username ='"".$username.""' AND   password='"".$password.""'"";

I have done some checks and when putting a password into the database
eg using the password name test: it is stored as 34364c859afb02e70306c905374ac2 but when a user logs in the password is: 34364c859afb02e70306c905374ac2d5
","There are a few issues here:

You should not build SQL query using raw user input, you should escape it. I would recommend you to use PDO with prepared statements.
Your way to hash/encrypt/store passwords is not secure at all. Try some PHP library that can handle this, it's safer.
In your case the problem seems to be the database field length. As you can see the two hashes you provided are almost the same, except the first one 2 char shorter. You should expand your db password field length.

","937","<php><html><md5><salt>","1","2","4","2013-03-20 15:38:14","15527944","10","","258127","","2013-03-20 15:29:36","2013-03-20 15:20:00","2013-03-28 18:09:07"
"15527602","Problems with the salt and md5 encryption when login","I have managed to create a basic encryption system so when a user initially signs up to my website the password is stored in my database safely using salt, md5 and sha1.
The problem occurs now when the user is logging in, the string (password) that is sent to the database is different even though I am using the same method. I shall demonstrate below:
This is my basic (for now) add customer to database page using the salt technique.
require ""dbconn.php"";

$username = $_GET['username'];
$email = $_GET['email'];
$pass = $_GET['pwd1'];
$pass2 =$_GET['pwd2'];
$matching = 0;

if($pass == $pass2)
{
echo ""<script type='text/javascript'> window.alert('Your details have been successfully          registered, please proceed to login with your new credentials!')</script>"";
echo '<script>javascript:window.close();</script>';

$salt = sha1(md5($pass));
$pass = md5($pass.$salt);

$query = ""INSERT INTO customer VALUES    ('"".$username.""','"".$email.""','"".$pass.""','face1.jpg')"";   

Again this is my basic (for now) login page again using the same salt technique (i have left out the latter part of this page)
session_start();
require ""dbconn.php"";

$username = $_GET['username'];
$password = $_GET['password'];

$salt = sha1(md5($password));
$password = md5($password.$salt);

$sql = ""SELECT * FROM customer WHERE username ='"".$username.""' AND   password='"".$password.""'"";

I have done some checks and when putting a password into the database
eg using the password name test: it is stored as 34364c859afb02e70306c905374ac2 but when a user logs in the password is: 34364c859afb02e70306c905374ac2d5
","There are a ton of things wrong here:

Do NOT transmit passwords in the URL string(GET paramters) because that makes it visible and can leak the password through referrer URLs.
Use prepared statements. Do not use the old mysql_* functions. Instead use MySQLi or PDO. Any parameter you send into the database should be through a prepared statement with one of the two with the parameters injected AFTER the statement is prepared. This allows you to use the MySQL driver to escape your parameters and protect you from SQL injection. 
Stylistically you should use consistent names for your variables. 
Check your column length. It's probably too short. (2 characters missing)
Your salting method doesn't really qualify as a salting method either as it's derived from the original password string. Look into generating a unique salt per user. 

","937","<php><html><md5><salt>","1","4","4","2013-03-20 15:38:14","15527944","10","","258127","","2013-03-20 15:29:36","2013-03-20 15:20:00","2013-03-28 18:09:07"
"15527602","Problems with the salt and md5 encryption when login","I have managed to create a basic encryption system so when a user initially signs up to my website the password is stored in my database safely using salt, md5 and sha1.
The problem occurs now when the user is logging in, the string (password) that is sent to the database is different even though I am using the same method. I shall demonstrate below:
This is my basic (for now) add customer to database page using the salt technique.
require ""dbconn.php"";

$username = $_GET['username'];
$email = $_GET['email'];
$pass = $_GET['pwd1'];
$pass2 =$_GET['pwd2'];
$matching = 0;

if($pass == $pass2)
{
echo ""<script type='text/javascript'> window.alert('Your details have been successfully          registered, please proceed to login with your new credentials!')</script>"";
echo '<script>javascript:window.close();</script>';

$salt = sha1(md5($pass));
$pass = md5($pass.$salt);

$query = ""INSERT INTO customer VALUES    ('"".$username.""','"".$email.""','"".$pass.""','face1.jpg')"";   

Again this is my basic (for now) login page again using the same salt technique (i have left out the latter part of this page)
session_start();
require ""dbconn.php"";

$username = $_GET['username'];
$password = $_GET['password'];

$salt = sha1(md5($password));
$password = md5($password.$salt);

$sql = ""SELECT * FROM customer WHERE username ='"".$username.""' AND   password='"".$password.""'"";

I have done some checks and when putting a password into the database
eg using the password name test: it is stored as 34364c859afb02e70306c905374ac2 but when a user logs in the password is: 34364c859afb02e70306c905374ac2d5
","There are 2 characters missing off your string.
34364c859afb02e70306c905374ac2
34364c859afb02e70306c905374ac2d5

Check your mysql field length.
","937","<php><html><md5><salt>","1","1","4","2013-03-20 15:38:14","15527944","10","","258127","","2013-03-20 15:29:36","2013-03-20 15:20:00","2013-03-28 18:09:07"
"12909087","how to encrypt password at client side when implemented MD5halsh salted algorithm on server side","I have implemented an md5 hash salted algorithm.
Using this algorithm I have saved the hashed password and salt value to the database.
then on login page retrieved the salt value of login user, get the byte of password add the salt value and computed hash and matched the result with the saved password and it is working perfectly but I am still able to see my password value in clear text at client side.
How can I encrypt the password value at client side along with md5 hash salted algorithm?
","You do it right way. You won't be able hash password on client-side without knowing salt (and passing salts to client is not a good idea). If you want that data sent by client was secure, use ssl.
Note: If you use ssl client will still be able to see my password value in clear text because data will be encrypted only before sending.
","937","<c#><md5><salt>","1","1","4","2012-10-16 07:22:03","","1","","18061","","2012-10-16 07:05:54","2012-10-16 06:57:16",""
"12909087","how to encrypt password at client side when implemented MD5halsh salted algorithm on server side","I have implemented an md5 hash salted algorithm.
Using this algorithm I have saved the hashed password and salt value to the database.
then on login page retrieved the salt value of login user, get the byte of password add the salt value and computed hash and matched the result with the saved password and it is working perfectly but I am still able to see my password value in clear text at client side.
How can I encrypt the password value at client side along with md5 hash salted algorithm?
","You can use data protection API (DPAPI) to store password on the client side securely. Use SafeString class, to store password in memory and, as @PLB already mentioned, use encrypted connection.
","937","<c#><md5><salt>","1","0","4","2012-10-16 07:22:03","","1","","18061","","2012-10-16 07:05:54","2012-10-16 06:57:16",""
"12909087","how to encrypt password at client side when implemented MD5halsh salted algorithm on server side","I have implemented an md5 hash salted algorithm.
Using this algorithm I have saved the hashed password and salt value to the database.
then on login page retrieved the salt value of login user, get the byte of password add the salt value and computed hash and matched the result with the saved password and it is working perfectly but I am still able to see my password value in clear text at client side.
How can I encrypt the password value at client side along with md5 hash salted algorithm?
","If you are worry for password which you are typing in text box. 
Then change TextMode of textbox as Password 
Like this 
<asp:TextBox ID=""txtPassword"" runat=""server"" TextMode=""Password""></asp:TextBox>

","937","<c#><md5><salt>","1","0","4","2012-10-16 07:22:03","","1","","18061","","2012-10-16 07:05:54","2012-10-16 06:57:16",""
"12909087","how to encrypt password at client side when implemented MD5halsh salted algorithm on server side","I have implemented an md5 hash salted algorithm.
Using this algorithm I have saved the hashed password and salt value to the database.
then on login page retrieved the salt value of login user, get the byte of password add the salt value and computed hash and matched the result with the saved password and it is working perfectly but I am still able to see my password value in clear text at client side.
How can I encrypt the password value at client side along with md5 hash salted algorithm?
","There are many different ways to solve this, the easiest I can come up with right now is to use some kind of challenge; the server sends a value the client has to use as a salt. The server ensures that the value is unique, hasn't expired, and only used once (this makes sure a replay attack isn't possible.)
This makes sure that a plain text password isn't sent, only a hashed one. The server can trust  (trust as much as when doing plain text auth anyway) the client to not simply resend some old hash since the clear text password is needed to compute the hash with the ""one-time-salt"".
Another, more sophisticated (and secure) way is to generate a RSA-keypair from the password where the server has the public key, and the client the private. The client also has a copy of the servers public key. The user enters the password, and only the correct password will get the correct rsa-key.
The user then encrypts the requests with the server's public key, and then signs the requests with the user's private key. Only the server can then decrypt the requests, and the server can verify that the sender really is the right user by verifying the sign with the user's public key. And the opposite for the response. To add some security you should add some unique ""salt"" as I wrote earlier to ensure replay attacks are impossible.
","937","<c#><md5><salt>","1","0","4","2012-10-16 07:22:03","","1","","18061","","2012-10-16 07:05:54","2012-10-16 06:57:16",""
"16266972","Secure user login using java hash and salt","I have been trying for some time now but can't find an answer.... I am new to this topic so apologize if its a basic question...
How do I store user password securely and let user login?
so first time user signup, I will hash + salt the password and store it to the DB. Now, when user logs in how do I check if the user has entered correct password? 
Decrypting the secure password (from DB) and then comparing it with user entered password doesn't make sense? because if I can decrypt it anyone can... 
securing the password and then comparing the decoded passwords doesn't work as they return different values.
here is my code for user signup:
String salt = ""random232andString"";
byte[] bSalt = base64ToByte(salt);
byte[] pass = null;

// pass should be what will be saved to the DB.
pass = getHash(""pppppp"", bSalt); //user is instance of User class.

private byte[] getHash(String password, byte[] salt) throws NoSuchAlgorithmException,     UnsupportedEncodingException {
MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
    digest.reset();
    digest.update(salt);
    byte[] securePassword = digest.digest(password.getBytes(""UTF-8""));

    return securePassword;
}

public static byte[] base64ToByte(String data){
       BASE64Decoder decoder = new BASE64Decoder();
       byte[] decoded = null;
       try {
        decoded =  decoder.decodeBuffer(data);
    } catch (IOException e) {
        e.printStackTrace();
    }
       return decoded;
}

Every time I pass password ""pppppp"" and the above salt it returns different secure code, something like [B@2430f369. So how do I match user input password with that in DB? hope it makes sense...
thanks in advance
","
Every time I pass password ""pppppp"" and the above salt it returns different secure code, something like [B@2430f369

That isn't a secure code, that's how Java renders an object such as a byte[] that doesn't have a custom toString() method, when you try to print it.
[B means 'array of byte' and the @2430f369 bit is the hashCode of the object, which is different for every individual object. So calling the same function twice will give you two different byte arrays, with different [B representations, despite the contents of the arrays being the same.
If you want to look at what's inside that byte array, a traditional representation would be to hex encode it.

So how do I match user input password with that in DB?

In general you create a random salt for each new password, and you have to store that salt so that when you check the password you can generate the hash from the salt that was originally used instead of a new random one.
However. If you are creating a new account system I would strongly suggest using a strong key derivation function like bcrypt from an existing library instead of custom single-hash method. This is the new baseline for password storage these days.
","924","<security><hash><login><salt><digest>","0","1","1","2013-04-29 01:08:40","","2","3","","","","2013-04-28 19:39:31",""
"12134740","How to include random salt with password variable in php","I have a pssword variable where it contains the user's password which contains some stirngs at the start and end of the password so that it salts the password. Below is the code for this:
$teacherpassword = md5(md5(""j92"".$teacherpassword.""djS""));  

Obviously the characters chosen to salt the password would be the same character for all the passwords.
What I want is to create a random characters generator so that the first 3 characters and the last 3 characters of the salt are all random so each password will have a random salt.
Below is the php generator create to pick out characters at random for the salt:
$salt = """"; 
for ($i = 0; $i < 40; $i++) { 
   $salt .= substr(
     ""./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"", 
     mt_rand(0, 63), 
     1); 
}

My question is that how do I get the generator to pick out 6 random characters for the salt, and then stick 3 of those characters in front of the passowrd and th other 3 at the end of the password?
FOR EXAMPLE:
PASSWORD 1 could be:  $teacherpassword = md5(md5(""jfs"".$teacherpassword.""sfS""));
PASSWORD 2 could be:  $teacherpassword = md5(md5(""4f3"".$teacherpassword.p.S""));
PASSWORD 3 could be:  $teacherpassword = md5(md5(""wpw"".$teacherpassword.""qq2"")); 
As you can see all passwords contain their own salt thanks to the php random generator for the salt 
","A really simple solution would be to use substr()

substr — Return part of a string

$randomSalt = ""abcdef"";

$preSalt = substr($randomSalt, 0,3); // abc
$postSalt = substr($randomSalt, 3,3);  // def

$password = md5(md5($preSalt.$teacherpassword.$postSalt));


One more suggestion for you would be to use PHP's uniqueid() function to generate random salt for your passwords.

uniqid — Generate a unique ID

","922","<php><passwords><password-protection><salt>","0","0","1","2012-08-26 23:40:44","12134746","5","","895378","","2012-08-26 23:40:44","2012-08-26 23:31:47",""
"6452308","PHP Password Hashing in 2011","I'm bringing this up after spending a few hours trawling through a number of posts on SO with regards to the most secure way to handle passwords in PHP/MySQL. Most answers seem to be fairly out of date, as are links that people are directed to. Many recommend md5 and sha-1.
We all know that MD5 and SHA-1 are no longer worth using due to the fact that they have been reversed, and also because there are a number of databases out there that have built up millions of md5/sha1 strings. Now, obviously you get around this with salt, which I intend to do.
I have however recently started playing around with whirlpool, which seems much more secure, and up to date. Would I be right in thinking whirlpool+salt is ample protection for passwords?
I was actually considering something like this:
<?php
    $static_salt = 'some_static_salt_string_hard_coded';
    $password = 'some_password_here';
    $salt = 'unique_salt_generated_here';

    $encoded = hash('whirlpool', $static_salt.$password.$salt);
?>

What do you think? Overkill or sensible?
","This will be enough (however, there is no sense in static hardcoded salt). And, why not to use SHA256? Whirlpool is rarely used.
","920","<security><hash><passwords><salt>","0","1","3","2011-06-23 11:33:13","6452350","2","2","","","","2011-06-23 10:03:25",""
"6452308","PHP Password Hashing in 2011","I'm bringing this up after spending a few hours trawling through a number of posts on SO with regards to the most secure way to handle passwords in PHP/MySQL. Most answers seem to be fairly out of date, as are links that people are directed to. Many recommend md5 and sha-1.
We all know that MD5 and SHA-1 are no longer worth using due to the fact that they have been reversed, and also because there are a number of databases out there that have built up millions of md5/sha1 strings. Now, obviously you get around this with salt, which I intend to do.
I have however recently started playing around with whirlpool, which seems much more secure, and up to date. Would I be right in thinking whirlpool+salt is ample protection for passwords?
I was actually considering something like this:
<?php
    $static_salt = 'some_static_salt_string_hard_coded';
    $password = 'some_password_here';
    $salt = 'unique_salt_generated_here';

    $encoded = hash('whirlpool', $static_salt.$password.$salt);
?>

What do you think? Overkill or sensible?
","This is probably good enough for most applications.
However, salts become (almost) useless if your DB is leaked -- including the static one if your configuration file is leaked too. They are a good protection against rainbow tables, but nowadays it's easier to use a bunch of GPUs to brute-force a given hash.
IMHO, currently the best solution is to use bcrypt. It's apparently supported in PHP 5.3+, and here's an example of how to use it.
","920","<security><hash><passwords><salt>","0","3","3","2011-06-23 11:33:13","6452350","2","2","","","","2011-06-23 10:03:25",""
"6452308","PHP Password Hashing in 2011","I'm bringing this up after spending a few hours trawling through a number of posts on SO with regards to the most secure way to handle passwords in PHP/MySQL. Most answers seem to be fairly out of date, as are links that people are directed to. Many recommend md5 and sha-1.
We all know that MD5 and SHA-1 are no longer worth using due to the fact that they have been reversed, and also because there are a number of databases out there that have built up millions of md5/sha1 strings. Now, obviously you get around this with salt, which I intend to do.
I have however recently started playing around with whirlpool, which seems much more secure, and up to date. Would I be right in thinking whirlpool+salt is ample protection for passwords?
I was actually considering something like this:
<?php
    $static_salt = 'some_static_salt_string_hard_coded';
    $password = 'some_password_here';
    $salt = 'unique_salt_generated_here';

    $encoded = hash('whirlpool', $static_salt.$password.$salt);
?>

What do you think? Overkill or sensible?
","It's particularly meaningless to discuss the merits of particular algorithms without a much wider consideration of the threat models and specifics of implementations.
Yes, whirlpool does appear to have some advantages in terms of how effective it is as a hash, but as Nickolay says that may be deceptive and due to the fact it is less widely used. But there are other considerations too - for some purposes storing a 128 character string for each account may be an unnecessary overhead. For everyone it's a question of what the software supports (and some people might want to use the same account record to control access to different systems).
At the end of the day, it doesn't matter how sophisticated your hashing algorithm is:

given a free choice, users pick bad, guessable passwords
users will use the same password for different services

If it works for you - then great - but there is no universal solution.
","920","<security><hash><passwords><salt>","0","0","3","2011-06-23 11:33:13","6452350","2","2","","","","2011-06-23 10:03:25",""
"15195684","Generating Salts, Silex, Charset?","I've been researching the best way to generate salts. General advice seems to be to use mcrype_create_iv or openssl_random_pseudo_bytes to generate. T
he problem with this is I have trouble using the values retrieved because of the characters involved. I am using RedBean as an ORM and and Silex as a framework. I have trouble setting and retrieving the generated value with RedBean, and I know Silex also has limitations because I received an error once that the salt can not contain brakets ""{}"".
What the best way to generate a salt that uses a standard character set. I figured I might be able to md5 the result, but then that results in a much smaller charset.
","To generate a valid salt, one has to know which algorithm will use this salt. Often you can use the function base64_encode() to retrieve standard characters from a binary salt, it will generate a string with following alphabet:
base64 encoding alphabeth: +/0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz
If Silex uses the salt for a BCrypt hash algoritm, it will expect a salt with following alphabet, note the ""."" instead of ""+"":
BCrypt hash alphabet: ./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz
I think it's best to test out what characters are allowed, or to find out which algorithm will be used, otherwise you will sooner or later generate an invalid salt. An example for generating a BCrypt salt using the function mcrypt_create_iv() could look like this:
/**
 * Generates a random salt for using with the BCrypt algorithm.
 * @param int $length Number of characters the string should have.
 * @return string A random salt.
 */
function sto_generateRandomSalt($length = 22)
{
  if (!defined('MCRYPT_DEV_URANDOM')) die('The MCRYPT_DEV_URANDOM source is required (PHP 5.3).');

  // Generate random bytes, using the operating system's random source.
  // Since PHP 5.3 this also uses the random source on a Windows server.
  // Unlike /dev/random, the /dev/urandom does not block the server, if
  // there is not enough entropy available.
  $randomBinaryString = mcrypt_create_iv($length, MCRYPT_DEV_URANDOM);

  // BCrypt expects nearly the same alphabet as base64_encode returns,
  // but instead of the '+' characters it accepts '.' characters.
  // BCrypt alphabet: ./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz
  $randomEncodedString = str_replace('+', '.', base64_encode($randomBinaryString));
  return substr($randomEncodedString, 0, $length);
}

","917","<php><salt><silex>","0","0","1","2013-03-08 08:45:35","15289930","2","","","","","2013-03-04 06:19:15",""
"19964342","Simple ASP.NET password hashing class troubles","I am attempting to apply some security to a project I'm completing for college. This security is somewhat glancing so I'm tempted to give up, save passwords as plaintext or converted to base64, and do something more user-obvious.
Before I give up, I'm asking SO. This is my first attempt at asking anything here so please be gentle.
I decided that implementing this MSDN code wouldn't be too hard.
http://msdn.microsoft.com/en-us/library/aa545602%28v=cs.70%29.aspx
Turns out, it really is. I'm getting the error

System.FormatException: Input string was not in a correct format.

For code 
binarySaltValue[0] = byte.Parse( salt.Substring( 0, 2 ), System.Globalization.NumberStyles.HexNumber, CultureInfo.InvariantCulture.NumberFormat );

I'm going to be honest, I don't fully understand this code.

What is SaltValueSize supposed to be? The provided code doesn't supply it, neither do any References. Also it's capitalised, so is it an object? Or a field in some object somewhere?
The variable ""hash"" is not defined anywhere, so I just filled it with new MD5CryptoServiceProvider(). Is this a mistake?
If I'm reading it right, the string ""salt"" is supposed to hold binary, but it doesn't at runtime, it has garbled text, meanwhile the line everything crashed at is trying to parse binary from ""salt""? Why?

If anyone can fix this or supply an idiot-proof asynchronous hashing class I'd appreciate it.
( apologies for my random user name, I have no idea how that happened )
","Here's a basic method (no salt) to at least get you started. It just ""hashes"" the string coming in.
    private string GetHashedString(string _PW)
    {
        string _HashedPW = """";
        SHA512 sha = new SHA512CryptoServiceProvider();
        byte[] result;
        StringBuilder strBuilder = new StringBuilder();


        sha.ComputeHash(ASCIIEncoding.ASCII.GetBytes(_PW));
        result = sha.Hash;

        for (int i = 0; i < result.Length; i++)
        {
            strBuilder.Append(result[i].ToString(""x2""));
        }

        _HashedPW = strBuilder.ToString();
        return _HashedPW;
    }

","912","<c#><asp.net><hash><passwords><salt>","0","1","1","2013-11-13 21:16:51","19964516","1","","","","","2013-11-13 21:07:23",""
"1023486","Is my authentication encryption any good?","So I've been reading a lot about encryption in PHP. So much that I am not sure exactly what's a really good method to securely store login information.
However, the following function is what I came up with:
function loginHash($username, $password){
    $salt = str_split($password,(strlen($password)/2)+1);
    $hash = hash('whirlpool', $username.$salt[0].'centerSalt'.$salt[1]);
    return $hash;
}

Am I doing it the right way? It's used for authenticating a password combined with a username, and the ability to compare the generated hash with the one stored in a database to verify a login.
","My advise is to never, never, never write your own encryption and hash functions. Even experts do it wrong all the time, so dont try it yourself.
Ive heared that phpass (Openwall) is a nice hashing framework, i'd suggest you use that.
They use salts in their hashes and have quite some parameters to tweak the hash.
","899","<php><authentication><encryption><hash><salt>","2","6","5","2009-10-25 14:13:23","1023572","0","1","","","","2009-06-21 09:08:19",""
"1023486","Is my authentication encryption any good?","So I've been reading a lot about encryption in PHP. So much that I am not sure exactly what's a really good method to securely store login information.
However, the following function is what I came up with:
function loginHash($username, $password){
    $salt = str_split($password,(strlen($password)/2)+1);
    $hash = hash('whirlpool', $username.$salt[0].'centerSalt'.$salt[1]);
    return $hash;
}

Am I doing it the right way? It's used for authenticating a password combined with a username, and the ability to compare the generated hash with the one stored in a database to verify a login.
","I think the above code checks the two boxes.

Avoiding rainbow table attacks (via Salts)
Secure Login

","899","<php><authentication><encryption><hash><salt>","2","1","5","2009-10-25 14:13:23","1023572","0","1","","","","2009-06-21 09:08:19",""
"1023486","Is my authentication encryption any good?","So I've been reading a lot about encryption in PHP. So much that I am not sure exactly what's a really good method to securely store login information.
However, the following function is what I came up with:
function loginHash($username, $password){
    $salt = str_split($password,(strlen($password)/2)+1);
    $hash = hash('whirlpool', $username.$salt[0].'centerSalt'.$salt[1]);
    return $hash;
}

Am I doing it the right way? It's used for authenticating a password combined with a username, and the ability to compare the generated hash with the one stored in a database to verify a login.
","You're not actually using a salt.
Salt is a randomly generated string that is included in the input for your hash function. As such, it will be different every time.
The idea is that you generate a salt when a user stores a password, and that this salt is included in your data storage. When authenticating, you retrieve the salt and the stored hash, you prefix the given password with the stored salt, and hash the two together. Then compare the result with the stored hash.
","899","<php><authentication><encryption><hash><salt>","2","5","5","2009-10-25 14:13:23","1023572","0","1","","","","2009-06-21 09:08:19",""
"1023486","Is my authentication encryption any good?","So I've been reading a lot about encryption in PHP. So much that I am not sure exactly what's a really good method to securely store login information.
However, the following function is what I came up with:
function loginHash($username, $password){
    $salt = str_split($password,(strlen($password)/2)+1);
    $hash = hash('whirlpool', $username.$salt[0].'centerSalt'.$salt[1]);
    return $hash;
}

Am I doing it the right way? It's used for authenticating a password combined with a username, and the ability to compare the generated hash with the one stored in a database to verify a login.
","Encrypting != Hashing. They both are generally accepted to be in the category of Cryptography, but when something can be encrypted, it can be decrypted, which is not the case in Hashing. Hashing is just hashing, and that's it.
The salt is indeed not properly constructed. It should be x-bytes read from /dev/urandom with a fopen() call. For example, 16 bytes of salt is what I personally use. This prevents rainbow table attacks effectively.
To make things more secure, use a secret key, too. For example:
$hashedPassword = hash_hmac('whirlpool',$password.$salt,$key);

The $key is simply random data. You could generate a 64 kB file, for instance, that is called ""key.bin"" in a hidden folder above the document root and use file_get_contents() before the hash process.
Why to use secret keys? If you store the hashes and salts in a database and the key in the filesystem, then this prevents anyone from cracking your hash if they get their hands on your stored hashes and salts. So, an attacker would need to crack into both the database and the filesystem to crack your hashes, but notice that it's pointless for anyone to crack your hashes anymore if they have already cracked your whole application, which implies that your hashing scheme is good.
","899","<php><authentication><encryption><hash><salt>","2","6","5","2009-10-25 14:13:23","1023572","0","1","","","","2009-06-21 09:08:19",""
"1023486","Is my authentication encryption any good?","So I've been reading a lot about encryption in PHP. So much that I am not sure exactly what's a really good method to securely store login information.
However, the following function is what I came up with:
function loginHash($username, $password){
    $salt = str_split($password,(strlen($password)/2)+1);
    $hash = hash('whirlpool', $username.$salt[0].'centerSalt'.$salt[1]);
    return $hash;
}

Am I doing it the right way? It's used for authenticating a password combined with a username, and the ability to compare the generated hash with the one stored in a database to verify a login.
","using salt solves two problems:

rainbow tables: rainbow tables are just precalculated hashes, stored with the source value. by comparing the hashes, you get the unhashed value (password). by adding salt you got another layer of complexity - the attacker must know the salt for generating a custom hashing table.
difference of hashed values: without salt, the same 2 passwords generate the same 2 hashes. now it's easy to see if two users use the same password (the weak point here is about the same as with the rainbow tables, but still). that may not amount to much, but is still a point of concern.

additionally, you shouldn't use fast algorithms for password hashing. md5 is fast, sha is fast. the slower, the better.
the matsano chargen blog is a good (and funny) resource for hints and pointers regarding security.
","899","<php><authentication><encryption><hash><salt>","2","1","5","2009-10-25 14:13:23","1023572","0","1","","","","2009-06-21 09:08:19",""
"15228134","Passing the salt along with hashed security key in URL","So I'm trying to authenticate against a third party web app. The documentation with this third party web app suggest taking the our security key provided by the third party web app and hashing it with salt. They then want us to pass the generated salt along with the hashed security key which becomes known as the secret in the URL. My understanding is the third party web app would then use the security key and hash it with the salt provided in the URL to see if it matches the secret passed along in the URL. This seems like a major security risk. Could someone explain why this would or would not be a security risk?
Doc
http://wiki.kayako.com/display/DEV/Kayako+REST+API
Sample Request
https://example.domain.com/api/index.php
 ?e=/Module/Controller/Action
 &parameterA=valueA
 &parameterB=valueB
 &parameterC=valueC
 &apikey=d75a00ef-08b6-5b04-5d29-d3b7ca46138a
 &salt=itobgt701t5nat7oor9z4t813edc5t8d
 &signature=MzNiNjk4ZmUyY2FlNjQ5YmRkNjA0YjkyYTQ0NmY5OTQ4MGVkYTIwMzZjMzFkYmJjMzk4MzgzNjNiMzZjYTE4NQ==

","","889","<web-services><security><authentication><salt>","1","","0","2013-03-05 15:58:05","","3","","819662","","2013-03-05 15:58:05","2013-03-05 15:48:33",""
"12715483","Case insensitive usernames and password salts","I have a login system
where, for example, Joe can login with the username joe without any problems.
Currently, I am using a password encryption that uses the username as a salt. This is creating issues for logging in. For example,
SELECT * FROM `users` WHERE LOWER(`username`) = LOWER(`:username`)
$stmt->bindValue(':username', $_POST['user']);

This works fine. THe trouble involves the password:
SELECT * FROM `users` WHERE LOWER(`username`) = LOWER(`:username`)
   AND `password` = :password
$stmt->bindValue(':username', $_POST['user']);
$stmt->bindValue(':password', encrypt($_POST['password'], $_POST['user'])); //encrypt(password, salt)

As you can see, the password encryption wouldn't check with the database because the user has logged in with joe instead of Joe
Is there a workaround to this, or should I use something else as a salt? If so, what should I use as a salt? This is my encrypt function:
function encrypt($password, $salt) {
    return base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_256, md5($salt), $password, MCRYPT_MODE_CBC, md5(md5($salt))));
}

","First off, what's the issue with using strtolower($_POST['user']) as the salt? It looks like it would work.
Now in general, salts should be unpredictable. Usernames aren't really that unpredictable, so although this won't be the end of the world your users' security will be better if you replace the username with a randomly generated string of modest length (it need not be crypto-strength random, just unpredictable).
But the biggest issue here is the use of MD5, which has been considered unsafe for some time. Security would improve if you switched to some other hash function; SHA-1 is not a particularly bad choice (it does have an undesirable property: it's fast to calculate), but the best fit for such applications are hash functions with a variable load factor such as bcrypt.
","888","<php><passwords><case-sensitive><salt>","0","2","4","2012-10-03 19:52:53","12715524","3","","","","","2012-10-03 19:29:58",""
"12715483","Case insensitive usernames and password salts","I have a login system
where, for example, Joe can login with the username joe without any problems.
Currently, I am using a password encryption that uses the username as a salt. This is creating issues for logging in. For example,
SELECT * FROM `users` WHERE LOWER(`username`) = LOWER(`:username`)
$stmt->bindValue(':username', $_POST['user']);

This works fine. THe trouble involves the password:
SELECT * FROM `users` WHERE LOWER(`username`) = LOWER(`:username`)
   AND `password` = :password
$stmt->bindValue(':username', $_POST['user']);
$stmt->bindValue(':password', encrypt($_POST['password'], $_POST['user'])); //encrypt(password, salt)

As you can see, the password encryption wouldn't check with the database because the user has logged in with joe instead of Joe
Is there a workaround to this, or should I use something else as a salt? If so, what should I use as a salt? This is my encrypt function:
function encrypt($password, $salt) {
    return base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_256, md5($salt), $password, MCRYPT_MODE_CBC, md5(md5($salt))));
}

","Skip the SQL lower and use PHP's strtolower().  That way your usernames will be consistent across the board.
","888","<php><passwords><case-sensitive><salt>","0","1","4","2012-10-03 19:52:53","12715524","3","","","","","2012-10-03 19:29:58",""
"12715483","Case insensitive usernames and password salts","I have a login system
where, for example, Joe can login with the username joe without any problems.
Currently, I am using a password encryption that uses the username as a salt. This is creating issues for logging in. For example,
SELECT * FROM `users` WHERE LOWER(`username`) = LOWER(`:username`)
$stmt->bindValue(':username', $_POST['user']);

This works fine. THe trouble involves the password:
SELECT * FROM `users` WHERE LOWER(`username`) = LOWER(`:username`)
   AND `password` = :password
$stmt->bindValue(':username', $_POST['user']);
$stmt->bindValue(':password', encrypt($_POST['password'], $_POST['user'])); //encrypt(password, salt)

As you can see, the password encryption wouldn't check with the database because the user has logged in with joe instead of Joe
Is there a workaround to this, or should I use something else as a salt? If so, what should I use as a salt? This is my encrypt function:
function encrypt($password, $salt) {
    return base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_256, md5($salt), $password, MCRYPT_MODE_CBC, md5(md5($salt))));
}

","The problem you're having is one reason that username's shouldn't be used as the salt.  A better way to hash passwords is with crypt().  You just need to generate a random salt to use with it.  The string it returns contains the hash and the hashing algorithm so you can change the algorithm or difficulty if you want to without having to rewrite code.  As long as your hash is 7-bit safe, the whole string will be, so you don't need to base64_encode() anything.
","888","<php><passwords><case-sensitive><salt>","0","1","4","2012-10-03 19:52:53","12715524","3","","","","","2012-10-03 19:29:58",""
"12715483","Case insensitive usernames and password salts","I have a login system
where, for example, Joe can login with the username joe without any problems.
Currently, I am using a password encryption that uses the username as a salt. This is creating issues for logging in. For example,
SELECT * FROM `users` WHERE LOWER(`username`) = LOWER(`:username`)
$stmt->bindValue(':username', $_POST['user']);

This works fine. THe trouble involves the password:
SELECT * FROM `users` WHERE LOWER(`username`) = LOWER(`:username`)
   AND `password` = :password
$stmt->bindValue(':username', $_POST['user']);
$stmt->bindValue(':password', encrypt($_POST['password'], $_POST['user'])); //encrypt(password, salt)

As you can see, the password encryption wouldn't check with the database because the user has logged in with joe instead of Joe
Is there a workaround to this, or should I use something else as a salt? If so, what should I use as a salt? This is my encrypt function:
function encrypt($password, $salt) {
    return base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_256, md5($salt), $password, MCRYPT_MODE_CBC, md5(md5($salt))));
}

","There are a couple issues here:

The case-sensitivity of your salt
Your method of password ""encryption""

The first issue is what you've asked about, so let's take a look at that.
So your passwords are salted with the user name, and you expect to be able to use the username the user entered during login as the salt. This will work, if you settle on a normalization scheme for your salt. Instead of using it as-entered, convert it to lowercase or uppercase before using it in your function.
The other option is to perform two queries to the database: one to pull the username as it's stored, and the second to actually check the password. This isn't optimal, but it would really be the least of your troubles.

Is there a workaround to this, or should I use something else as a salt? If so, what should I use as a salt?

Since you asked, let's look at the second issue: your method of password ""encryption.""
Trying to invent your own password hashing/encryption scheme is never a good idea, for a number of reasons. Your best option is to use an already widely accepted password hashing scheme, such as bcrypt or some derivative of PBKDF2. These are great because they both include both salting and key stretching. They are designed to be slow (relatively, anyway) so brute-forcing these types of hashes is made very computationally expensive.
Using one of the aforementioned password hashing schemes will solve your first problem as well, as these schemes use built-in per-user salts. Depending on how you choose to implement these schemes, you will not (should not) need to provide your own salt. The top libraries will generate salts for you.
Try taking a look at these libraries for password hashing:

Openwall's PasswordHash class - Written for PHP4, but works on the latest versions as well. Supports bcrypt, but will fall back to its own scheme if bcrypt isn't supported (PHP < 5.3, mostly).
Anthony Ferrara's (ircmaxell's) PHP Password Library - Great library, but requires PHP 5.3+.
My own PHPassLib - Similar to Anthony's library, but implemented differently. The 3.x branch attempts to be more like Python's PassLib. Also requires PHP 5.3+.

","888","<php><passwords><case-sensitive><salt>","0","2","4","2012-10-03 19:52:53","12715524","3","","","","","2012-10-03 19:29:58",""
"21618373","Retrieve salted MD5 password on login PHP MySql","I've been searching around and I can't find the answer to what I think should have been logical. I will include the sections of code that are used to insert upon registration (and proper validation) and that used to select in hopes you have ideas. 
On the registration page I insert the password as an MD5 of the concatenation of a random unique salt and the user desired password. (I am open to suggestions to improve this if this is not sufficient to store passwords).   
$InsertQuery = ""INSERT INTO login (firstname, lastname, username, password, salt, activation) VALUES ('$fnamePost', '$lnamePost', '$usernamePost', MD5('$salt$passwordPost'), '$salt','1')"";

On the login page I have the following code to check the password:
    $saltQuery = ""SELECT * FROM login where username = '$username'"";
$saltResult = mysql_query($saltQuery);
$saltArray = mysql_fetch_array($saltResult);
$saltPass = $saltArray['salt'];
    $query = ""SELECT * FROM login WHERE username = '$username' AND password =   MD5('$saltPass$password')"";


if($result1 = mysql_query($query)) {
    if($success1 = mysql_num_rows($result1) > 0) {

At this ""success1"" point it returns zero rows meaning incorrect username and password. 
Printing the query itself I appear to get an MD5(saltpassword) search, but this does NOT match the password stored in the table.
What am I missing here? 
Thank you in advance. 
Addition : So, the problem is between what the register page says the password is and the select query on the login page is trying to match.
Example: Register password: 5586ef3ede51ef5b41676801d6870574  -- Login Password: f90dacb09ffd1cbf4bdf13b3175da696
This means that somewhere between adding the salt and the MD5 we are getting differing results. 
","Are you sure this line is working ok? 
$InsertQuery = ""INSERT INTO login (firstname, lastname, username, password, salt, activation) VALUES ('$fnamePost', '$lnamePost', '$usernamePost', MD5('$salt$passwordPost'), '$salt','1')"";
Because you put the MD5 function into a string.. I don't think that it'll fix your problem, but have you tried something like
$variable = md5($salt$passwordPost) then insert $variable in the query?
","885","<php><mysql><hash><md5><salt>","0","0","2","2014-02-07 05:28:27","","11","","1949212","","2014-02-07 03:34:23","2014-02-07 02:50:07",""
"21618373","Retrieve salted MD5 password on login PHP MySql","I've been searching around and I can't find the answer to what I think should have been logical. I will include the sections of code that are used to insert upon registration (and proper validation) and that used to select in hopes you have ideas. 
On the registration page I insert the password as an MD5 of the concatenation of a random unique salt and the user desired password. (I am open to suggestions to improve this if this is not sufficient to store passwords).   
$InsertQuery = ""INSERT INTO login (firstname, lastname, username, password, salt, activation) VALUES ('$fnamePost', '$lnamePost', '$usernamePost', MD5('$salt$passwordPost'), '$salt','1')"";

On the login page I have the following code to check the password:
    $saltQuery = ""SELECT * FROM login where username = '$username'"";
$saltResult = mysql_query($saltQuery);
$saltArray = mysql_fetch_array($saltResult);
$saltPass = $saltArray['salt'];
    $query = ""SELECT * FROM login WHERE username = '$username' AND password =   MD5('$saltPass$password')"";


if($result1 = mysql_query($query)) {
    if($success1 = mysql_num_rows($result1) > 0) {

At this ""success1"" point it returns zero rows meaning incorrect username and password. 
Printing the query itself I appear to get an MD5(saltpassword) search, but this does NOT match the password stored in the table.
What am I missing here? 
Thank you in advance. 
Addition : So, the problem is between what the register page says the password is and the select query on the login page is trying to match.
Example: Register password: 5586ef3ede51ef5b41676801d6870574  -- Login Password: f90dacb09ffd1cbf4bdf13b3175da696
This means that somewhere between adding the salt and the MD5 we are getting differing results. 
","The answer was that I had limited my salt to 12 characters on the table but specified it to be longer. Thus, the password field was a concat between the longer version of the salt and the user inputted password, the salt however only being the first 12 characters of the unique id.
Thank you for your help. 
","885","<php><mysql><hash><md5><salt>","0","0","2","2014-02-07 05:28:27","","11","","1949212","","2014-02-07 03:34:23","2014-02-07 02:50:07",""
"32308111","How are salt and password combined","I would like to know how the mkpasswd command in linux adds the salt to the specified password before the SHA-512 hash is performed.
for example if you do the following:
mkpasswd --method=SHA-512 123 abc

where 123 is the password
and abc the salt
is the salt appended to the password like Hash_this(123abc), or how are thes two parameters combined?
thank you in advance.
","I bevlieve this thread has the answer to your question
https://unix.stackexchange.com/questions/160246/sha512-salted-hash-code-question
and its not as easy as just concatenating the two strings
","881","<hash><salt><sha512>","1","0","1","2015-08-31 09:43:54","32308308","0","","","","","2015-08-31 09:34:32",""
"37846621","md5($salt. $password); how to get back the original text?","I have stored a password in database using md5 with salt. I want to retrieve the original password from the md5 value of password.
","The short answer is no. The point of MD5 is that it creates a unique fingerprint for a string. It's not an encryption, so it can't be reversed.
Technically, you could probably run brute-force attacks but that's practically impossible given how many combinations there are. Sure, there are numerous attacks on MD5 such as generating collisions or hash length extension but there is generally no way to get the original password. Sorry.
What reason would you want to retrieve the original password?
","877","<php><encryption><md5><salt>","0","2","1","2016-06-15 22:17:55","","4","","","","","2016-06-15 22:08:07","2016-06-15 22:27:47"
"33517968","Java AES/CBC/PKCS5Padding with salt does not work","I am still searching for a good solution of my encryption needs. I found a solution on the internet that I reworked to fit the program needs but the encryption fails. I don't know why. Any suggestions?
Dear Maarten Bodeswes I tried your solution, but could not get it to work stable. I send the encrypted data via php to a database and get it back via php. I figured I have to exchange the plus-signs with something else, but it still would not work stable.
import java.io.IOException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.InvalidParameterSpecException;
import java.security.spec.KeySpec;
import java.util.Random;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;

public class AESplus 
{

// AES specification
private static final String CIPHER_SPEC = ""AES/CBC/PKCS5Padding"";

// Key derivation specification
private static final String KEYGEN_SPEC = ""PBKDF2WithHmacSHA1"";
private static final int SALT_LENGTH = 16; // in bytes
private static final int ITERATIONS = 32768;
private static final int KEY_LENGTH = 128;

private static final String SPLITCHAR = ""###"";

public static SecretKey makeKey(String kennwort) throws NoSuchAlgorithmException, InvalidKeySpecException
{
    char[] password = kennwort.toCharArray();

    // generate salt
    byte[] salt = generateSalt(SALT_LENGTH);

    SecretKeyFactory factory = SecretKeyFactory.getInstance(KEYGEN_SPEC);

    KeySpec spec = new PBEKeySpec(password, salt, ITERATIONS, KEY_LENGTH);
    SecretKey tmp = factory.generateSecret(spec);

    return tmp;
}

private static byte[] generateSalt(int length) 
{
    Random r = new SecureRandom();
    byte[] salt = new byte[length];
    r.nextBytes(salt);
    return salt;
}

public static String encrypt(String input, SecretKey key) throws InvalidKeyLengthException, StrongEncryptionNotAvailableException,
                        IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, InvalidParameterSpecException,
                        IllegalBlockSizeException, BadPaddingException
{
    StringBuilder output = new StringBuilder(); 

    // initialize AES encryption
    Cipher encrypt = null;
    encrypt = Cipher.getInstance(CIPHER_SPEC);
    encrypt.init(Cipher.ENCRYPT_MODE, key);

    // get initialization vector
    byte[] iv = encrypt.getParameters().getParameterSpec(IvParameterSpec.class).getIV();

    byte[] encrypted = encrypt.update(input.getBytes());
    output.append(HexUtils.toHex(encrypted));

    encrypted = encrypt.doFinal();

    if (encrypted != null)
    {
        // write authentication and AES initialization data
        output.append(HexUtils.toHex(iv) + SPLITCHAR);
        // data
        output.append(HexUtils.toHex(encrypted));
    }

    return output.toString();
}

public static String decrypt(String input, SecretKey schlüssel) throws InvalidPasswordException, InvalidAESStreamException,
                        IOException, StrongEncryptionNotAvailableException, NoSuchAlgorithmException, NoSuchPaddingException,
                        InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException 
{
    String[] inputArray = input.split(SPLITCHAR);

    // initialize AES decryption
    byte[] iv = new byte[16]; // 16-byte I.V. regardless of key size
    iv = HexUtils.toBytes(inputArray[0]);

    Cipher decrypt = Cipher.getInstance(CIPHER_SPEC);
    decrypt.init(Cipher.DECRYPT_MODE, schlüssel, new IvParameterSpec(iv));

    // read data from input into buffer, decrypt and write to output
    byte[] hexInput = HexUtils.toBytes(inputArray[1]);
    byte[] decrypted = decrypt.update(hexInput);

    StringBuilder output = new StringBuilder();
    output.append(new String(decrypted));

    // finish decryption - do final block
    decrypted = decrypt.doFinal();
    if (decrypted != null) 
    {
        output.append(new String(decrypted));
    }

    return output.toString();
}


// ******** EXCEPTIONS thrown by encrypt and decrypt ********

/**
 * Thrown if an attempt is made to decrypt a stream with an incorrect
 * password.
 */
public static class InvalidPasswordException extends Exception 
{
    private static final long serialVersionUID = 1L;
}

/**
 * Thrown if an attempt is made to encrypt a stream with an invalid AES key
 * length.
 */
public static class InvalidKeyLengthException extends Exception 
{
    private static final long serialVersionUID = 1L;

    InvalidKeyLengthException(int length)
    {
        super(""Invalid AES key length: "" + length);
    }
}

/**
 * Thrown if 192- or 256-bit AES encryption or decryption is attempted,
 * but not available on the particular Java platform.
 */
public static class StrongEncryptionNotAvailableException extends Exception
{
    private static final long serialVersionUID = 1L;

    public StrongEncryptionNotAvailableException(int keySize) 
    {
        super(keySize + ""-bit AES encryption is not available on this Java platform."");
    }
}

/**
 * Thrown if an attempt is made to decrypt an invalid AES stream.
 */
public static class InvalidAESStreamException extends Exception
{
    private static final long serialVersionUID = 1L;

    public InvalidAESStreamException() 
    {
        super();
    };

    public InvalidAESStreamException(Exception e)
    {
        super(e);
    }
}
}

","This piece of your code puts the IV into the middle of the output:
byte[] encrypted = encrypt.update(input.getBytes());
output.append(HexUtils.toHex(encrypted));
encrypted = encrypt.doFinal();

if (encrypted != null)
{
    // write authentication and AES initialization data
    output.append(HexUtils.toHex(iv) + SPLITCHAR);
    // data
    output.append(HexUtils.toHex(encrypted));
}

To work with your decryption method it needs to be at the beginning.
","875","<java><encryption><aes><salt>","0","1","1","2015-11-04 10:19:14","","1","","","","","2015-11-04 09:22:19",""
"30551646","How to generate an md5 hash with a plaintext string and a known salt","I have been going crazy trying to figure this out. Is there a simple way in C# to take a string like ""password123"" and a salt ""vfs5%S]m(_*Y+Tk"" and generate a single MD5 Hash. Basically what the website http://free-online-web-tools.com/tool/md5 does but with C#.
","The below given function generates a hash for the given plain text value and returns a base64-encoded result. Before the hash is computed, a random salt is generated and appended to the plain text. This salt is stored at the end of the hash value, so it can be used later for hash verification.

Plaintext value to be hashed. The function does not check whether this parameter is null.

Name of the hash algorithm. Allowed values are: ""MD5"", ""SHA1"",""SHA256"", ""SHA384"", and ""SHA512"" (if any other value is specified MD5 hashing algorithm will be used). This value is case-insensitive.
In your case set hashAlgorithm to ""MD5""

Salt bytes. This parameter can be null, in which case a random salt value will be generated.

Hash value formatted as a base64-encoded string.
public static string ComputeHash(string   plainText,
                                 string   hashAlgorithm,
                                 byte[]   saltBytes)
{
    // If salt is not specified, generate it on the fly.
    if (saltBytes == null)
    {
        // Define min and max salt sizes.
        int minSaltSize = 4;
        int maxSaltSize = 8;

        // Generate a random number for the size of the salt.
        Random  random = new Random();
        int saltSize = random.Next(minSaltSize, maxSaltSize);

        // Allocate a byte array, which will hold the salt.
        saltBytes = new byte[saltSize];

        // Initialize a random number generator.
        RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();

        // Fill the salt with cryptographically strong byte values.
        rng.GetNonZeroBytes(saltBytes); 
    }

    // Convert plain text into a byte array.
    byte[] plainTextBytes = Encoding.UTF8.GetBytes(plainText);

    // Allocate array, which will hold plain text and salt.
    byte[] plainTextWithSaltBytes = 
            new byte[plainTextBytes.Length + saltBytes.Length];

    // Copy plain text bytes into resulting array.
    for (int i=0; i < plainTextBytes.Length; i++)
        plainTextWithSaltBytes[i] = plainTextBytes[i];

    // Append salt bytes to the resulting array.
    for (int i=0; i < saltBytes.Length; i++)
        plainTextWithSaltBytes[plainTextBytes.Length + i] = saltBytes[i];

    // Because we support multiple hashing algorithms, we must define
    // hash object as a common (abstract) base class. We will specify the
    // actual hashing algorithm class later during object creation.
    HashAlgorithm hash;

    // Make sure hashing algorithm name is specified.
    if (hashAlgorithm == null)
        hashAlgorithm = """";

    // Initialize appropriate hashing algorithm class.
    switch (hashAlgorithm.ToUpper())
    {
        case ""SHA1"":
            hash = new SHA1Managed();
            break;

        case ""SHA256"":
            hash = new SHA256Managed();
            break;

        case ""SHA384"":
            hash = new SHA384Managed();
            break;

        case ""SHA512"":
            hash = new SHA512Managed();
            break;

        default:
            hash = new MD5CryptoServiceProvider();
            break;
    }

    // Compute hash value of our plain text with appended salt.
    byte[] hashBytes = hash.ComputeHash(plainTextWithSaltBytes);

    // Create array which will hold hash and original salt bytes.
    byte[] hashWithSaltBytes = new byte[hashBytes.Length + 
                                        saltBytes.Length];

    // Copy hash bytes into resulting array.
    for (int i=0; i < hashBytes.Length; i++)
        hashWithSaltBytes[i] = hashBytes[i];

    // Append salt bytes to the result.
    for (int i=0; i < saltBytes.Length; i++)
        hashWithSaltBytes[hashBytes.Length + i] = saltBytes[i];

    // Convert result into a base64-encoded string.
    string hashValue = Convert.ToBase64String(hashWithSaltBytes);

    // Return the result.
    return hashValue;
}

For more details refer here.
","871","<c#><passwords><md5><salt>","0","0","1","2015-05-30 21:57:00","30551775","4","","","","","2015-05-30 21:39:38","2015-05-31 09:17:30"
"7044444","Should I store my salt along with my hashed password in the database?","I've been reading a bunch of stuff about security and I'm just now starting to try and play around with the code. I want to use MD5 encryption with a salt. I ran across this nifty PHP script with random salt:
substr(str_shuffle(str_repeat('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',5)),0,10);

It randomly generates some characters as salt, but then I was thinking: How would I go about checking logins? Do I remove the salt, or should I store it in the database?
","Store it in database. Otherwise you can't compare password provided by user with hashed one.
Some even regenerate hash (with new salt) upon each successful login of given user, although commenters below argue this is not the best idea (see comments)
","867","<php><security><hash><md5><salt>","1","4","5","2011-08-13 16:23:03","7044463","13","","229044","","2011-08-12 18:13:40","2011-08-12 18:09:43",""
"7044444","Should I store my salt along with my hashed password in the database?","I've been reading a bunch of stuff about security and I'm just now starting to try and play around with the code. I want to use MD5 encryption with a salt. I ran across this nifty PHP script with random salt:
substr(str_shuffle(str_repeat('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',5)),0,10);

It randomly generates some characters as salt, but then I was thinking: How would I go about checking logins? Do I remove the salt, or should I store it in the database?
","You shouldn't be using MD5 for password hashing. See How can I store my users' passwords safely? 
To answer your original question, the salt is stored alongside the HASHED password in the database. The salt is not meant to be secret if the hashed password is discovered. Its purpose is to prevent attackers from using rainbow tables.
","867","<php><security><hash><md5><salt>","1","6","5","2011-08-13 16:23:03","7044463","13","","229044","","2011-08-12 18:13:40","2011-08-12 18:09:43",""
"7044444","Should I store my salt along with my hashed password in the database?","I've been reading a bunch of stuff about security and I'm just now starting to try and play around with the code. I want to use MD5 encryption with a salt. I ran across this nifty PHP script with random salt:
substr(str_shuffle(str_repeat('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',5)),0,10);

It randomly generates some characters as salt, but then I was thinking: How would I go about checking logins? Do I remove the salt, or should I store it in the database?
","You would have to store it in the database, otherwise you would not have anything to compare it to.  The thing to remember with using a salt, is that the complexity can vary and without knowing what the salt is, the likelihood of it being brute forced hack is dramtically decreased.
Example:
$password = ""banana"";
$salt = ""a12dsfg33B1cD2eF3G""; # Can be any assortment of characters
$password = md5($salt.$password);

Then you would just attach the same salt (would have to match to work) and pass the same function to your login script that combines the salt and the supplied password.  You would then check that to the value in your database to authenticate the user.
","867","<php><security><hash><md5><salt>","1","1","5","2011-08-13 16:23:03","7044463","13","","229044","","2011-08-12 18:13:40","2011-08-12 18:09:43",""
"7044444","Should I store my salt along with my hashed password in the database?","I've been reading a bunch of stuff about security and I'm just now starting to try and play around with the code. I want to use MD5 encryption with a salt. I ran across this nifty PHP script with random salt:
substr(str_shuffle(str_repeat('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',5)),0,10);

It randomly generates some characters as salt, but then I was thinking: How would I go about checking logins? Do I remove the salt, or should I store it in the database?
","Okay, so salts are used for both one-way hashes and encryption. They make it harder to reverse the encryption or the hash. I think it's easier to draw the point out with hashes, so I'll write from that point of view, but the principles apply to encryption in general.
Imagine that you're saving passwords. One of your users chooses the word ""kiwi"" as a password. Because storing passwords in plain-text is stupid, you don't want to do that. You want to hash the password.
But, those pesky hackers out there have compiled huge databases of hash look-up tables. (Check this one out!)
So, how do we foil the hackers? By salting the user's input! The salt is a random string (or set of bits, properly) that is cryptographically combined with the user's input to produce a more secure hash.
For example, if the string to be hashed is still ""kiwi"" and our salt is ""5m3d"", a simple salt mechanism might concatenate the two into: ""kiwi5m3d"". The hackers probably have ""kiwi"" in their database, but probably don't have ""kiwi5m3d"". A good salting system will probably perform a much more complicated function than this.
So now the hackers need a new look-up database for each possible salt. Using a random salt means that the hacker will have to do a full-on brute force attack, rather than recycling previous computations or using someone else's look-up table.
You could choose a different salt for everything, or the same salt for all the things on your site. A different salt of each entity necessitates a new brute force attack for each entity, but it can make implementation more difficult because each salt must be saved, rather than having one global salt (which, for data which is already somewhat random, e.g. passwords, should be sufficient).
In the case of encryption, look-up tables are still a possibility, but the data to be encrypted is generally varied enough that they're not feasible. So it becomes a game of playing ""guess the password"". It's easy to guess ""kiwi"" and hard to guess ""kiwi5m3d"".
You will have to save the salt somewhere, because it's the only way to ""know"" what's been hashed or encrypted. In the case of a hashed, you compare the user's original hash against the salted hash of their input. In the case of encryption, you need the salt to decrypt the data.
Where do you go from here?
First, don't use MD5. I gave you a link to an MD5 look-up database above. The function's increasingly considered to be weak. The sha class of algorithms is a better choice.
Second, make sure you choose a good salt. Longer and randomer is better. Computers are kind of bad at generating random data. This site could be one good choice and has a pretty good break-down of how it generates its random numbers.
Third, consider salt algorithms. Simple concatenation should work, but maybe HMAC (something I don't know much about) would be better.
","867","<php><security><hash><md5><salt>","1","2","5","2011-08-13 16:23:03","7044463","13","","229044","","2011-08-12 18:13:40","2011-08-12 18:09:43",""
"7044444","Should I store my salt along with my hashed password in the database?","I've been reading a bunch of stuff about security and I'm just now starting to try and play around with the code. I want to use MD5 encryption with a salt. I ran across this nifty PHP script with random salt:
substr(str_shuffle(str_repeat('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',5)),0,10);

It randomly generates some characters as salt, but then I was thinking: How would I go about checking logins? Do I remove the salt, or should I store it in the database?
","Do not invent your own password-hashing scheme, however nifty it may look. Having a secure system is hard because you cannot really test for security. What you need is the following:

For each password instance, a random salt of sufficient length is created.
The random salt is stored along the hashed value; you will need it to verify the password afterward.
The password hashing process must be (configurably) slow, with many (many) nested invocation of whatever hash function is internally used.
Preferably, the internal hash function should use operations which are efficient on a PC but slow on a parallel architecture (a GPU).

Such a thing exists, it is called bcrypt and you can get it in PHP with the portable PHP password hashing framework.
","867","<php><security><hash><md5><salt>","1","1","5","2011-08-13 16:23:03","7044463","13","","229044","","2011-08-12 18:13:40","2011-08-12 18:09:43",""
"38821149","Simple username and password validation java","I am attempting to create my first login page as a learning exercise.  
My plan was to pre hash the password using a salt of the username for example.  Store that in a text file and then when when the user logs in i would hash the password using the same salt and compare the results to the text file. 
I am a complete beginner with security etc so i dont know if this would be secure or not? What is the norm for small applications? if this method isnt recommended, what is a suitable simple alternative?
EDIT One possible solution if i can get it to work.
String unpwfield;
    unpwfield = userId.getText()+passwordfield.getText();
    if (BCrypt.checkpw(unpwfield, passwordhash))
        System.out.println(""It matches"");
    else
        System.out.println(userId.getText()+passwordfield.getText());

","For password storage, you're going to want to use a slow hashing algorithm. Cryptographic hashes are too fast, and do not slow at attacker down in offline password guessing. For example, bcrypt is often the most suitable algorithm to use.
Bcrypt generates its own salts, so you do not need to worry about a secure way to generate these.
I would avoid using username as the salt. A salt is to avoid the same password ever being stored with the same byte representation if used multiple times.
The reasons are if the user reuses the same password, then it is immediately obvious to any attacker with visibility on the password hash data. Also, if your system is openly available, every instance of your application will have the hashes for the admin user stored in exactly the same way, meaning attackers will be able to pre-build rainbow tables with admin as the salt.
See the OWASP Cheat Sheet on Password Storage for further information and guidance. 
","866","<java><login><md5><salt>","0","1","1","2016-08-09 00:35:17","38829652","4","","4303023","","2016-08-09 00:35:17","2016-08-08 04:07:22",""
"11665828","ASP.NET Membership Provider - Expose the salt","Background
We are using the ASPNET membership provider that stores member login information, along with MongoDB to store a secondary set of information. 
Because MongoDB does not offer built-in encryption we have decided to encrypt some of the data before inserting it into the database using the member's salt that is in the ASPNET membership provider tables.
Objective
How would I go about exposing the salt so that it is accessible in code? I cannot find any methods for this in the default provider classes.
Alternative
Either that or could anybody suggest a better approach? One of the benefits of having the salt saved in a different place is to protect it from ""interlopers"".
Thanks,
Max.
","Here is one approach, you can use the username, e-mail to salt.
public static string hashCalculator(string username, string password)//Use username as salt.
        {
            byte[] stringbytes = System.Text.Encoding.Unicode.GetBytes(username.ToLower() + password);
            return Convert.ToBase64String(new SHA384Managed().ComputeHash(stringbytes));
        }

","855","<c#><asp.net><membership><salt><provider>","0","0","1","2012-07-26 09:04:45","","2","","","","","2012-07-26 09:01:24",""
"13553575","how can I protect against capture during encryption/salt for php ajax login","If a password is encrypted before ajax, what is to stop a hacker from capturing the encrypted password and using it to log in?
Should a unique salt be sent from the backend beforehand?  Wouldn't a hacker be able to capture that too?
background to my question:
I worked through this tutorial
http://www.wikihow.com/Create-a-Secure-Login-Script-in-PHP-and-MySQL
summary of tutorial
browser side encrypts password before sending it to backend where it is stored in db
From that link, the first comment stuck in my mind
""what's to prevent a hacker from capturing the hashed password and logging in?""
","Nothing. Hashing the password on the client is a terrible idea.
Communication between the browser and server should be properly encrypted using SSL (via HTTPS).
Hashing on the client side has two effects:

It provides a false sense of security to the site owner by suggesting that it can substitute for SSL
It adds a dependency on JavaScript

","849","<php><ajax><encryption><login><salt>","0","6","3","2012-11-25 19:12:32","13553611","1","3","","","","2012-11-25 17:36:07",""
"13553575","how can I protect against capture during encryption/salt for php ajax login","If a password is encrypted before ajax, what is to stop a hacker from capturing the encrypted password and using it to log in?
Should a unique salt be sent from the backend beforehand?  Wouldn't a hacker be able to capture that too?
background to my question:
I worked through this tutorial
http://www.wikihow.com/Create-a-Secure-Login-Script-in-PHP-and-MySQL
summary of tutorial
browser side encrypts password before sending it to backend where it is stored in db
From that link, the first comment stuck in my mind
""what's to prevent a hacker from capturing the hashed password and logging in?""
","The tutorial you posted does not only hash on the client side... they hash on the server side as well.
Basically on that registration page, something JavaScript will hash the user's password and send it to the server.  Presumably, this is to stop someone from getting the password in transit.  Once the hashed password is sent to the server side, it is salted and hashed again.
This method is safe... but I'm not sure I see the merits of hashing on the client if you are using HTTPS, which you should be.
","849","<php><ajax><encryption><login><salt>","0","1","3","2012-11-25 19:12:32","13553611","1","3","","","","2012-11-25 17:36:07",""
"13553575","how can I protect against capture during encryption/salt for php ajax login","If a password is encrypted before ajax, what is to stop a hacker from capturing the encrypted password and using it to log in?
Should a unique salt be sent from the backend beforehand?  Wouldn't a hacker be able to capture that too?
background to my question:
I worked through this tutorial
http://www.wikihow.com/Create-a-Secure-Login-Script-in-PHP-and-MySQL
summary of tutorial
browser side encrypts password before sending it to backend where it is stored in db
From that link, the first comment stuck in my mind
""what's to prevent a hacker from capturing the hashed password and logging in?""
","This is a bit silly, really.  As Quentin stated, all you've done at this point is change what the password is, you havent made it any more secure.  Now, instead of the password being 'private string', it is sha1('private string').  Which happens to be '5ee913d43470d39020f15ac10ff9cf7a8761b55a' if you hex-encode it.
All you've done is trade one password for another.
To exchange passwords securely your best option is to use HTTPS.  Hands down.  If for some reason you can't get HTTPS working or you don't want to pay for the certificate then you'll have to get creative.
Your hardest problem to overcome is the at the initial stage where the user sets their password.  Without using public-key cryptography, your best option is to pass a randomly-generated symmetric key in the form, and use that key to encrypt the password at the client end, and decrypt it at the server end.  It can be broken if someone happens to be watching the exchange.  But this is a problem that can't be solved without public key crypto.
Once the password is set logins can be done very securely.  When the server renders the login form for the client, it can generate a nonce as part of the form:
<input type='hidden' name='nonce' value='b45354f5b437c82beeed71d4d56ef3a47d0df2d3'/>
Username: <input type='text' name='username'/><br/>
Password: <input type='password' name='password'/>

Using a Javascript and a crypto library such as crypt-js, the client creates a hashed message.  The message should include a timestamp, the username, and the nonce.  Then create an HMAC.
var ts = Math.round((new Date()).getTime() / 1000);
var message = '' + ts + ':' + username + ':' + nonce;
var hash = CryptoJS.HmacSHA1(message, password);

Long story short, the hash is the message hashed together with the password.
Now send the message and the hash to the server.  The server has to reverse the process:

parse the message into the nonce, date, and username
make sure the nonce was the same one that was given to the client
make sure the date is recent (within the last 5 minutes, say)
retrieve the user's password
perform the HMAC computation, and make sure the outcome equals the hash provided by the client.

","849","<php><ajax><encryption><login><salt>","0","2","3","2012-11-25 19:12:32","13553611","1","3","","","","2012-11-25 17:36:07",""
"43252165","Password storing in 2017","So I'm working on my own website with my login system.
I am working on the password storing part and have been looking at a couple of youtube videos where peoples tell me not to use things like md5 because it's outdated.
I looked at the video Tom Scott made about how NOT to store passwords and he told us to look up a recent tutorial on how to do it properly.
For my project I really need to store the passwords myself and not use anything like Facebook or Google for logins.
I looked at a lot of websites and questions here on Stack Overflow but can't seem to find anything from this year where it is all explained.
So now I'm wondering what is the best way in 2017 to store passwords?
Do I need to use a Salt and a Pepper? Maybe something else? And which hashing algorithm is the best at this moment? If possible I'd like to use this within php.
Can anyone help me out with these questions?
Thank you :)
","I assume that you just want to store passwords for user authentication, and you asked for a PHP solution explicitely, so the answer must be to use the PHP function password_hash(). This function is up to date and handles all the tricky parts of password hashing.
// Hash a new password for storing in the database.
// The function automatically generates a cryptographically safe salt.
$hashToStoreInDb = password_hash($password, PASSWORD_DEFAULT);

// Check if the hash of the entered login password, matches the stored hash.
// The salt and the cost factor will be extracted from $existingHashFromDb.
$isPasswordCorrect = password_verify($password, $existingHashFromDb);

If you are interested in more indept information, you could have a look at my tutorial about safely storing passwords.
","849","<algorithm><hash><salt><storing-information><pepper>","0","2","1","2017-04-08 19:22:31","43299405","2","","","","","2017-04-06 10:12:36",""
"15225694","How to use md5 hashed password (get from external API) to create user in wordpress?","From the WHMCS API I get these data:

email
password

I get the email in normal format (email@example.com). But I get the password in following format:

41bef39ea1086512d8b90b2a3dbc4d3e:jh#sZ (using XML)

Here, jh#sZ is salt and the format is ""md5(salt.pw):salt""
Now my question is, how can I use this password in wp_insert_user() or in wp_create_user() function to insert the user in the wp database? 
","You can insert MD5 hash password into the database using $wpdb, after inserting user. Existing md5 password will work. If someone is looking for the query, here it is:
global $wpdb;

$user_id = wp_insert_user($user_data);

$result = $wpdb->update( 
    $wpdb->users,
    array( 'user_pass' => $user_pass ),
    array( 'ID' => $user_id )
);

","840","<wordpress><passwords><md5><salt><whmcs>","0","0","1","2019-01-29 07:27:09","","6","","","","","2013-03-05 14:00:18",""
"3030758","PHP secure logon script - md5 hash is not matching the hash i wrote to the database in a previous script?","I am trying to cobble together a login script in PHP as a learning project.
This is the code for my database write when the user registers. Both of these values are written to the database.
 $this->salt = md5(uniqid());
 $this->password = md5($password.$salt);

Upon logging in, the following function is fired.
function challengeLogin($submittedPassword, $publicSalt, $storedPassword){
    if(md5($submittedPassword.$publicSalt) == $actualPassword){
        return 0;
    }else{
        return 1;
    };
}

Unfortunately, on stepping through my code, the two values have never equaled. Can someone help me understand why?
","Compare the raw values before it gets hashed with some basic echo statements. Either the salt is wrong, your password is wrong, or the hash somehow got screwed up.
","828","<php><md5><salt><login-script>","0","1","2","2010-06-13 01:50:54","3030772","4","","153110","","2010-06-13 01:50:54","2010-06-13 01:40:25",""
"3030758","PHP secure logon script - md5 hash is not matching the hash i wrote to the database in a previous script?","I am trying to cobble together a login script in PHP as a learning project.
This is the code for my database write when the user registers. Both of these values are written to the database.
 $this->salt = md5(uniqid());
 $this->password = md5($password.$salt);

Upon logging in, the following function is fired.
function challengeLogin($submittedPassword, $publicSalt, $storedPassword){
    if(md5($submittedPassword.$publicSalt) == $actualPassword){
        return 0;
    }else{
        return 1;
    };
}

Unfortunately, on stepping through my code, the two values have never equaled. Can someone help me understand why?
","I think the problem in your code is that the $salt variable is undefined, so it is empty. You should use $this->salt
Change 
$this->password = md5($password.$salt);

to 
$this->password = md5($password.$this->salt);

","828","<php><md5><salt><login-script>","0","5","2","2010-06-13 01:50:54","3030772","4","","153110","","2010-06-13 01:50:54","2010-06-13 01:40:25",""
"3643209","Can someone explain how salts help when storing hashed passwords?","I am having difficulty understanding how a salt which is appended to a hash helps improve the security when a database of passwords or other important information is compromised.
If the salt is, for example, ""hello"", and is appended to the password ""password"" then the salt and password are stored together, ""hellopassword"" and hashed to produce:
94e66f94517d606d5ad6d9191b980408952f2ed2 (sha1) 

with the salt then appended: 
hello$94e66f94517d606d5ad6d9191b980408952f2ed2

How is this more secure? The attacker knows the salt so can now compute the passwords with little extra difficulty... right? Or am I fundamentally misunderstanding something? 
","No, not with ""little extra difficulty"" - with potentially significantly more difficulty.
Imagine there are two billion common passwords. It's easy to hash all of those and store the results. Then if you have an unsalted password hash, you can just check which common passwords match the given hash.
Now compare that with a salted hash... now you have two billion common passwords, but also several billion possible salts. Computing all the possible salt/password combinations will take much, much longer - hopefully becoming infeasible.
Additionally, it means that even if two people have the same password, they are very likely to have different hashes - so carelessness of one user in revealing their password doesn't risk the security of the other.
See the Wikipedia entry (if you haven't already) for more on this.
","826","<hash><sha1><salt>","7","8","3","2010-09-04 17:10:25","3643231","3","1","","","","2010-09-04 17:01:49",""
"3643209","Can someone explain how salts help when storing hashed passwords?","I am having difficulty understanding how a salt which is appended to a hash helps improve the security when a database of passwords or other important information is compromised.
If the salt is, for example, ""hello"", and is appended to the password ""password"" then the salt and password are stored together, ""hellopassword"" and hashed to produce:
94e66f94517d606d5ad6d9191b980408952f2ed2 (sha1) 

with the salt then appended: 
hello$94e66f94517d606d5ad6d9191b980408952f2ed2

How is this more secure? The attacker knows the salt so can now compute the passwords with little extra difficulty... right? Or am I fundamentally misunderstanding something? 
","salt helps in 2 ways:
1) When two (or more) people use the same password, without salt you can see who uses the same password (the hashes are all the same).  So in theory, if that person knows one of those person's passwords he knows everyone's passwords with the same hash.  This is a minor reason.
2) The main reason is to prevent attacks commonly called dictionary attacks or rainbow attacks.  In these attacks someone uses a database of pre-calculated hashes for common passwords.  Often times these databases are gigs in size.  But it is very easy at that point to just do a lookup for the hashes you have (the hashed password) against the list of pre-calculated hashes and see what the associated password is.
By using a salt value (typically you want this to be a random number) the hash won't match the dictionary (the chance of them pre-calculating all passwords with all possible salt values is exponentially more difficult).  So even if your user uses an easily attacked password, say ""Password"", which is pretty much guaranteed to be any in any password dictionary/rainbow table, by pre-pending your random salt value you make the hash pretty much guaranteed to be useless to the attacker.  Meanwhile for you, since the salt is just stored in cleartext, it makes it very easy for you to add it to your cleartext for your comparison of the password the user entered.
","826","<hash><sha1><salt>","7","6","3","2010-09-04 17:10:25","3643231","3","1","","","","2010-09-04 17:01:49",""
"3643209","Can someone explain how salts help when storing hashed passwords?","I am having difficulty understanding how a salt which is appended to a hash helps improve the security when a database of passwords or other important information is compromised.
If the salt is, for example, ""hello"", and is appended to the password ""password"" then the salt and password are stored together, ""hellopassword"" and hashed to produce:
94e66f94517d606d5ad6d9191b980408952f2ed2 (sha1) 

with the salt then appended: 
hello$94e66f94517d606d5ad6d9191b980408952f2ed2

How is this more secure? The attacker knows the salt so can now compute the passwords with little extra difficulty... right? Or am I fundamentally misunderstanding something? 
","The salt isn't appended to the hash, its appended to the password THEN hashed. This is more secure because hackers have to know the salt and the actual password, which you should both protect heavily. :D
","826","<hash><sha1><salt>","7","3","3","2010-09-04 17:10:25","3643231","3","1","","","","2010-09-04 17:01:49",""
"23405759","Retrieving salt, key, IV in java from encrypted bytes","I'm encrypting a file using openssl with the following command:
openssl enc -aes-128-cbc -in text.txt -out text.enc -pass file:key.bin

where key.bin is a key generated with the command
openssl rand 16 -out: key.bin

For retrieving the salt, key and IV derived from key.bin I'm using:
openssl enc -aes-128-cbc -pass file:key.bin -d -P -in text.enc 

Each time I'm running this command I get the same salt, key and iv.
However, I need to do it in java. 
Can you please let me know if it is pe possible to retreive these infos in java just passing the encrypted file and the key file?
","You can decrypt the data in Java with just the encrypted file text.enc and the key file key.bin, but you have two problems:

openssl rand can output the value of a null byte or a newline character at any position, which will effectively truncate your password since the contents of -pass file: are read for just the first line of string data.
The default key derivation is not that good. Read this question and answer over at security.stackexchange.

There is more info about the key derivation in this answer. However, here is Ruby code that decrypts the file, which you can translate into Java:
require 'openssl'

enc = File.read('text.enc', :encoding => 'ASCII-8BIT')

# OpenSSL's own file format
salt = enc[8..15]
ciphertext = enc[16..-1]

k = File.read('key.bin', :encoding => 'ASCII-8BIT')
k = k.split(0.chr)[0] # truncate at null byte like openssl would have done
k = k.split(""\n"")[0] # truncate at newline like openssl would have done

# Key and IV derivation
d = OpenSSL::Digest::MD5.new
d0 = d.digest(k + salt)
d1 = d.digest(d0 + k + salt)

# Compare this to the output when you use the -p argument to openssl enc
puts ""salt=#{salt.unpack('H*')[0].upcase}""
puts ""key=#{d0.unpack('H*')[0].upcase}""
puts ""iv =#{d1.unpack('H*')[0].upcase}""

# Decrypt the ciphertext
cipher = OpenSSL::Cipher.new('AES-128-CBC')
cipher.decrypt
cipher.key = d0
cipher.iv = d1
plaintext = cipher.update(ciphertext) + cipher.final
puts plaintext

","822","<java><key><salt>","0","1","1","2014-05-17 05:59:57","","0","","","","","2014-05-01 10:15:23",""
"28501351","C#,asp.net Passwords are not matching after hashing with salt","I have used hashing with salt for password.Before i implemented hashing, i had a stored procedure which used to check textbox value with the value in Database and the code was working fine .After implementing hashing though the passwords are not matching,i checked the hashed value in database and password that i entered and both are same.I looked up in google and some suggested that manually entering value in Database for password will cause an issue.So i created a user registration form and hashed the password there and stored it in the database.Can anyone please guide me as to where i am going wrong.
My loginpagecode:
 using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Web;
    using System.Web.UI;
    using System.Web.UI.WebControls;
    using System.Configuration;
    using System.Data.SqlClient;
    using System.Data;
    using System.Security.Cryptography;

    namespace taxiservices
    {
        public partial class adminlogin : System.Web.UI.Page
        {
            String Salt;
            String Hash;
            String Pwd;
            protected void Page_Load(object sender, EventArgs e)
            {

            }

            public string SaltedHash(string password)
            {
                Salt = ""salthashtestsalthashtestsalthashtestsalthashtestsalthashtestsalthashtestsalthashtestsalthashtest"";
                Hash = ComputeHash(Salt, password);
                return Hash;

            }

            static string ComputeHash(string salt, string password)
            {
                var saltBytes = Convert.FromBase64String(salt);
                using (var rfc2898DeriveBytes = new Rfc2898DeriveBytes(password, saltBytes, 1000))
                    return Convert.ToBase64String(rfc2898DeriveBytes.GetBytes(256));
            }

            public static bool Verify(string salt, string hash, string password)
            {
                return hash == ComputeHash(salt, password);
            }

            protected void Button1_Click(object sender, EventArgs e)
            {
                Session[""username""] = username.Text.ToString();
                 Pwd=SaltedHash(password.Text.ToString());
                 Response.Write(Pwd);
                string query;
                string ConnectionStringnew = ConfigurationManager.ConnectionStrings[""ConnectionStringName""].ConnectionString;
                using (SqlConnection con = new SqlConnection(ConnectionStringnew))
                {
                    query = ""Emplogin"";   //stored procedure Name
                    SqlCommand com = new SqlCommand(query, con);
                    com.CommandType = CommandType.StoredProcedure;
                    com.Parameters.AddWithValue(""@Usename"", username.Text.ToString());   //for username 
                    com.Parameters.AddWithValue(""@Password"",Pwd);  //for password

                    con.Open();

                    int usercount = (Int32)com.ExecuteScalar();// for taking single value
                    con.Close();
                    if (usercount == 1)  // comparing users from table 
                    {

                        Session[""user""] = ""valid"";

                        Response.Redirect(""adminhomepage.aspx"");  //for sucsseful login
                    }
                    else
                    {

                        Label2.Text = ""Invalid User Name or Password"";  //for invalid login
                    }



                }
            }

            protected void username_TextChanged(object sender, EventArgs e)
            {

            }
        }
    }

Page where user creates a  password:
 using System;
    using System.Collections.Generic;
    using System.Configuration;
    using System.Data.SqlClient;
    using System.Linq;
    using System.Security.Cryptography;
    using System.Web;
    using System.Web.UI;
    using System.Web.UI.WebControls;

namespace taxiservices
{
    public partial class changepassword : System.Web.UI.Page
    {
        String Salt;
        String Hash;
        protected void Page_Load(object sender, EventArgs e)
        {


        }

        protected void TextBox2_TextChanged(object sender, EventArgs e)
        {

        }
        public string SaltedHash(string password)
        {
            Salt=""salthashtestsalthashtestsalthashtestsalthashtestsalthashtestsalthashtestsalthashtestsalthashtest"";
            Hash = ComputeHash(Salt, password);
            return Hash;
        }

        static string ComputeHash(string salt, string password)
        {
            var saltBytes = Convert.FromBase64String(salt);
            using (var rfc2898DeriveBytes = new Rfc2898DeriveBytes(password, saltBytes, 1000))
                return Convert.ToBase64String(rfc2898DeriveBytes.GetBytes(256));
        }

        protected void Button1_Click(object sender, EventArgs e)
        {

            string Pwd = SaltedHash(TextBox2.Text);
            string ConnectionStringn = ConfigurationManager.ConnectionStrings[""ConnectionStringName""].ConnectionString;
            using (SqlConnection con = new SqlConnection(ConnectionStringn))
            {
                using (SqlCommand cmd = new SqlCommand(""INSERT INTO Users(Username,Password) VALUES(@User,@password)""))
                {
                    cmd.Connection = con;
                    cmd.Parameters.AddWithValue(""@User"", TextBox3.Text);
                    cmd.Parameters.AddWithValue(""@password"", Pwd);
                    con.Open();
                    cmd.ExecuteNonQuery();
                    con.Close();

                }
            }
        }
    }
}

The Stored Procedure:
    Create  procedure Emplogin
(
@Usename Varchar (20),
@Password varchar (10)
)
as
Begin
Select COUNT(*)from Users where username=@Usename and password=@Password 
End

","When you pass the details into you Emplogin stored procedure, it is only getting the first 10 characters of your salted password (it truncates away the other 246). When it checks this ten-character string against your Users database, it doesn't find a match.
You should adjust your Emplogin procedure so that the length of the @Password variable matches that of the password column in your Users table.
","817","<c#><asp.net><hash><salt>","0","0","1","2015-02-13 14:15:51","28501572","4","","","","","2015-02-13 14:03:33",""
"15294629","Password encryption in php like web2py","i wont to implement the password hashing done in web2py  in php , now i got some instructions on how to do it from massimo de piero the created of web2py but i am still cant implement it in php  , the instruction as following : 
The logic is very complex because it needs to deal with many options and not-break backward compatibility.
Normally an hashed password looks like
algorithm$salt$hash
algorithm$$hash  (no salt)
hash (legacy)
the hash is computing using the algorithm, the salt, and optionally a user provided key. The key is unique. The salt is different for each password.
Every time you call CRYPT()('password') you get a LazyCrypt object. This object can be serialized into a string. The string you get is always different because it contains a random salt. You cannot compare two of those strings because you always get false, even for the same password. Yet you can compare a LazyObject with a string and the lazy object will use the same algorithm and the same salt from the string to compute the hash and compare it with the hash in the string. Example:
>>> a = CRYPT()('password')
>>> b = CRYPT()('password')
>>> sa = str(a)
>>> sb = str(b)
>>> sa == sb
False
>>> a == sb
True
>>> c = CRYPT()('wrong')
>>> c == sb
False

and the following is the class used in web2py framework to implement that encryption : 
class LazyCrypt(object):
    """"""
    Stores a lazy password hash
    """"""

    def __init__(self, crypt, password):
        """"""
        crypt is an instance of the CRYPT validator,
        password is the password as inserted by the user
        """"""
        self.crypt = crypt
        self.password = password
        self.crypted = None

    def __str__(self):
        """"""
        Encrypted self.password and caches it in self.crypted.
        If self.crypt.salt the output is in the format <algorithm>$<salt>$<hash>
        Try get the digest_alg from the key (if it exists)
        else assume the default digest_alg. If not key at all, set key=''
        If a salt is specified use it, if salt is True, set salt to uuid
        (this should all be backward compatible)
        Options:
        key = 'uuid'
        key = 'md5:uuid'
        key = 'sha512:uuid'
        ...
        key = 'pbkdf2(1000,64,sha512):uuid' 1000 iterations and 64 chars length
        """"""
        if self.crypted:
            return self.crypted
        if self.crypt.key:
            if ':' in self.crypt.key:
                digest_alg, key = self.crypt.key.split(':', 1)
            else:
                digest_alg, key = self.crypt.digest_alg, self.crypt.key
        else:
            digest_alg, key = self.crypt.digest_alg, ''
        if self.crypt.salt:
            if self.crypt.salt == True:
                salt = str(web2py_uuid()).replace('-', '')[-16:]
            else:
                salt = self.crypt.salt
        else:
            salt = ''

        hashed = simple_hash(self.password, key, salt, digest_alg)
        self.crypted = '%s$%s$%s' % (digest_alg, salt, hashed)
        return self.crypted

    def __eq__(self, stored_password):
        """"""
        compares the current lazy crypted password with a stored password
        """"""
        # LazyCrypt objects comparison
        if isinstance(stored_password, self.__class__):
            return ((self is stored_password) or
                   ((self.crypt.key == stored_password.crypt.key) and
                   (self.password == stored_password.password)))

        if self.crypt.key:
            if ':' in self.crypt.key:
                key = self.crypt.key.split(':')[1]
            else:
                key = self.crypt.key
        else:
            key = ''
        if stored_password is None:
            return False
        elif stored_password.count('$') == 2:
            (digest_alg, salt, hash) = stored_password.split('$')
            h = simple_hash(self.password, key, salt, digest_alg)
            temp_pass = '%s$%s$%s' % (digest_alg, salt, h)
        else:  # no salting
            # guess digest_alg
            digest_alg = DIGEST_ALG_BY_SIZE.get(len(stored_password), None)

            if not digest_alg:
                return False
            else:
                temp_pass = simple_hash(self.password, key, '', digest_alg)
        return temp_pass == stored_password


class CRYPT(object):

    """"""
    example::
        INPUT(_type='text', _name='name', requires=CRYPT())
    encodes the value on validation with a digest.
    If no arguments are provided CRYPT uses the MD5 algorithm.
    If the key argument is provided the HMAC+MD5 algorithm is used.
    If the digest_alg is specified this is used to replace the
    MD5 with, for example, SHA512. The digest_alg can be
    the name of a hashlib algorithm as a string or the algorithm itself.
    min_length is the minimal password length (default 4) - IS_STRONG for serious security
    error_message is the message if password is too short

    Notice that an empty password is accepted but invalid. It will not allow login back.

    Stores junk as hashed password.
    Specify an algorithm or by default we will use sha512.
    Typical available algorithms:
      md5, sha1, sha224, sha256, sha384, sha512

    If salt, it hashes a password with a salt.
    If salt is True, this method will automatically generate one.
    Either case it returns an encrypted password string in the following format:

      <algorithm>$<salt>$<hash>

    Important: hashed password is returned as a LazyCrypt object and computed only if needed.
    The LasyCrypt object also knows how to compare itself with an existing salted password

    Supports standard algorithms

    >>> for alg in ('md5','sha1','sha256','sha384','sha512'):

    ...     print str(CRYPT(digest_alg=alg,salt=True)('test')[0])
    md5$...$...
    sha1$...$...
    sha256$...$...
    sha384$...$...
    sha512$...$...

    The syntax is always alg$salt$hash

    Supports for pbkdf2
    >>> alg = 'pbkdf2(1000,20,sha512)'
    >>> print str(CRYPT(digest_alg=alg,salt=True)('test')[0])
    pbkdf2(1000,20,sha512)$...$...

    An optional hmac_key can be specified and it is used as salt prefix
    >>> a = str(CRYPT(digest_alg='md5',key='mykey',salt=True)('test')[0])
    >>> print a
    md5$...$...

    Even if the algorithm changes the hash can still be validated
    >>> CRYPT(digest_alg='sha1',key='mykey',salt=True)('test')[0] == a
    True

    If no salt is specified CRYPT can guess the algorithms from length:
    >>> a = str(CRYPT(digest_alg='sha1',salt=False)('test')[0])
    >>> a
    'sha1$$a94a8fe5ccb19ba61c4c0873d391e987982fbbd3'
    >>> CRYPT(digest_alg='sha1',salt=False)('test')[0] == a
    True
    >>> CRYPT(digest_alg='sha1',salt=False)('test')[0] == a[6:]
    True
    >>> CRYPT(digest_alg='md5',salt=False)('test')[0] == a
    True
    >>> CRYPT(digest_alg='md5',salt=False)('test')[0] == a[6:]
    True
    """"""

    def __init__(self,
                 key=None,
                 digest_alg='pbkdf2(1000,20,sha512)',
                 min_length=0,
                 error_message='too short', salt=True):

        """"""
        important, digest_alg='md5' is not the default hashing algorithm for
        web2py. This is only an example of usage of this function.

        The actual hash algorithm is determined from the key which is
        generated by web2py in tools.py. This defaults to hmac+sha512.
        """"""

        self.key = key
        self.digest_alg = digest_alg
        self.min_length = min_length
        self.error_message = error_message
        self.salt = salt

    def __call__(self, value):
        if len(value) < self.min_length:
            return ('', translate(self.error_message))
        return (LazyCrypt(self, value), None) 

Hope anyone can guide me a little , 
Best Regards,
","You want to use password_hash() and password_verify() instead of working with crypt() directly.
","814","<php><python><web2py><salt><password-hash>","2","0","1","2018-11-01 22:08:35","","4","","2224584","","2018-11-01 22:07:52","2013-03-08 13:02:17",""
"32668050","I need an alternative to WSS which does not require any certificate for signing in","I have ws working for sending user login details through a websocket. However I know that someone sniffing packets could capture the password, so I wanted to use wss instead. However I now understand, through playing around with my back end, that firstly a certificate is required for it to connect properly, and secondly, if i cause the self signed certificate warning to sho0w, afterwards the websockets will work with wss, but that is not good enoyugh for clients. From googling this issue, I have found that A self signed certificate will probalby not be good enough.
And all I want is to provide a user with a safe way to login.....
So anyway I am now thinking it would be better to avoid having to use wss all together. I could use a conventional servlet for login but that will probably require a certificate too for https and I don't want to have to start paying people loads of money for certificates when my business might not even be that successful.
I have been thinking about other ways I could send the users password securely. One way might be to generate a hash in the browser. I know I could use some king of challenge along with a salt sent to the browser but I am not exactly sure how to do this and how safe this would be. I have the conventional login working with a salt, generating a hash with AES. Any suggestions?
I just want the users login details to be safe and I don't want to go down the route of certificates, it's annoying and unreliable. 
","Login should always happen through HTTPS. Not only the POST sending the user and password, but also the GET getting the login form, so the client can be sure is getting the right form and that his information will be posted to the right place.
You can send login details either by HTTPS or WSS if you want security. If you use a self-signed certificate you will provide transport security, but as the certificate is not signed by a CA, the client cannot be sure that the server with which is interacting is the right one, and that is why the browser shows a warning.
So, if you want security for your clients, you should get a signed certificate and use it for HTTPS and WSS (you can get them from 10 bucks per year in some places). Anything that you do in the browser is insecure by default, starting by the user not having certainty of being interacting with the right server and not a spoofed one. 
","803","<websocket><passwords><salt><wss>","0","0","2","2015-09-21 00:06:14","","0","","","user5078091","2015-09-19 12:14:38","2015-09-19 12:09:29",""
"32668050","I need an alternative to WSS which does not require any certificate for signing in","I have ws working for sending user login details through a websocket. However I know that someone sniffing packets could capture the password, so I wanted to use wss instead. However I now understand, through playing around with my back end, that firstly a certificate is required for it to connect properly, and secondly, if i cause the self signed certificate warning to sho0w, afterwards the websockets will work with wss, but that is not good enoyugh for clients. From googling this issue, I have found that A self signed certificate will probalby not be good enough.
And all I want is to provide a user with a safe way to login.....
So anyway I am now thinking it would be better to avoid having to use wss all together. I could use a conventional servlet for login but that will probably require a certificate too for https and I don't want to have to start paying people loads of money for certificates when my business might not even be that successful.
I have been thinking about other ways I could send the users password securely. One way might be to generate a hash in the browser. I know I could use some king of challenge along with a salt sent to the browser but I am not exactly sure how to do this and how safe this would be. I have the conventional login working with a salt, generating a hash with AES. Any suggestions?
I just want the users login details to be safe and I don't want to go down the route of certificates, it's annoying and unreliable. 
","Found this blog helpful even though it's directed to the raspberry pi and python/nodejs. http://simplyautomationized.blogspot.com/2015/09/5-ways-to-secure-websocket-rpi.html
Good concepts on security and authentication.  I would recommend ALWAYS using ssl and not rolling your own crypto.  
","803","<websocket><passwords><salt><wss>","0","0","2","2015-09-21 00:06:14","","0","","","user5078091","2015-09-19 12:14:38","2015-09-19 12:09:29",""
"40836580","PHP Salt password encryption","My client forgot password to login to the backend of the website that was developed by other developer who refused to help. Therefore, I went to SQL database to see if I could retrieve the password directly from there but it seems that password is encrypted. See below

3a0606b25e75eb6c1fed61886844832e

it would be easier if I knew how the password was encrypted so that I could just encrypt new password and add to SQL but when I looked at the code (in password changing PHP gile) there is something called salt_pass that encrypts the password of this website. See below code :
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
$db = new database();
$option_uw = array(
    ""table"" => ""users"",
    ""fields"" => ""password"",
    ""condition"" => ""id='{$_POST['id']}'""
);
$query_uw = $db->select($option_uw);
$rs_uw = $db->get($query_uw);
if ($rs_uw['password'] == trim(salt_pass($_POST['oldpassword']))) {
    $value_pw = array(
        ""password"" => trim(salt_pass($_POST['pass']))
    );
    $query_pw = $db->update(""users"", $value_pw, ""id='{$_POST['id']}'"");

    if ($query_pw == TRUE) {
        header(""location:"" . $baseUrl . ""/back/user"");
    }
}else{
    $_SESSION[_ss . 'msg_result'] = TRUE;
    header(""location:"" . $baseUrl . ""/back/user/changepassword"");
}
mysql_close();
}

Here is the salt_pass function
function salt_pass($pass) { 
     return md5(""supapongherb.com"" . $pass); 
}

Does anybody know how I can regenerate or encrypt the new password according to this code? 
PS. the website is developed with MVC programming and I am really capable of it. Please let me know if you would like to see more file.
Thank you in advance!
","Let's clear a few things up

but it seems that password is encrypted

First, your password is hashed, not encrypted. There is a difference. Namely that hashes are meant to be one-way. There's no way to look at a hash and just regenerate the password from that.
Second, they're using MD5. They're not actually salting anything, they're appending the same string to all passwords and THEN hashing it. MD5 is a terrible way to hash because it's stupid easy to break. This is the equivalent of securing your front door with a rubber band. It's not secure because you can make millions of guesses a minute. Yes it is that bad.
Third, with the function and the ""salt"" known, you can easy make a new password this way (via SQL because I'm not guessing what sort of screwy ORM they're using there)
UPDATE users
SET password = MD5(CONCAT('supapongherb.com', 'new_password_here'))
WHERE id = their_user_id_here

Fourth, switch to password_hash. Like now. Get rid of the rubber band and upgrade to a deadbolt, with rabid pitbulls behind it and a shotgun in your lap. 
","801","<php><mysql><hash><md5><salt>","0","5","1","2016-11-28 03:48:00","","8","","2370483","","2016-11-28 03:34:25","2016-11-28 03:03:16",""
"16622000","php mysql generate,store and match password and salt","I have a file named pbkdf2.php. 
<?php
/*
 * Password hashing with PBKDF2.
 * Author: havoc AT defuse.ca
 * www: https://defuse.ca/php-pbkdf2.htm
 */

// These constants may be changed without breaking existing hashes.
define(""PBKDF2_HASH_ALGORITHM"", ""sha256"");
define(""PBKDF2_ITERATIONS"", 1000);
define(""PBKDF2_SALT_BYTES"", 24);
define(""PBKDF2_HASH_BYTES"", 24);

define(""HASH_SECTIONS"", 4);
define(""HASH_ALGORITHM_INDEX"", 0);
define(""HASH_ITERATION_INDEX"", 1);
define(""HASH_SALT_INDEX"", 2);
define(""HASH_PBKDF2_INDEX"", 3);

function create_hash($password)
{
    // format: algorithm:iterations:salt:hash
    $salt = base64_encode(mcrypt_create_iv(PBKDF2_SALT_BYTES, MCRYPT_DEV_URANDOM));
    return PBKDF2_HASH_ALGORITHM . "":"" . PBKDF2_ITERATIONS . "":"" .  $salt . "":"" . 
        base64_encode(pbkdf2(
            PBKDF2_HASH_ALGORITHM,
            $password,
            $salt,
            PBKDF2_ITERATIONS,
            PBKDF2_HASH_BYTES,
            true
        ));
}

function validate_password($password, $good_hash)
{
    $params = explode("":"", $good_hash);
    if(count($params) < HASH_SECTIONS)
       return false; 
    $pbkdf2 = base64_decode($params[HASH_PBKDF2_INDEX]);
    return slow_equals(
        $pbkdf2,
        pbkdf2(
            $params[HASH_ALGORITHM_INDEX],
            $password,
            $params[HASH_SALT_INDEX],
            (int)$params[HASH_ITERATION_INDEX],
            strlen($pbkdf2),
            true
        )
    );
}

// Compares two strings $a and $b in length-constant time.
function slow_equals($a, $b)
{
    $diff = strlen($a) ^ strlen($b);
    for($i = 0; $i < strlen($a) && $i < strlen($b); $i++)
    {
        $diff |= ord($a[$i]) ^ ord($b[$i]);
    }
    return $diff === 0; 
}

function pbkdf2($algorithm, $password, $salt, $count, $key_length, $raw_output = false)
{
    $algorithm = strtolower($algorithm);
    if(!in_array($algorithm, hash_algos(), true))
        die('PBKDF2 ERROR: Invalid hash algorithm.');
    if($count <= 0 || $key_length <= 0)
        die('PBKDF2 ERROR: Invalid parameters.');

    $hash_length = strlen(hash($algorithm, """", true));
    $block_count = ceil($key_length / $hash_length);

    $output = """";
    for($i = 1; $i <= $block_count; $i++) {
        // $i encoded as 4 bytes, big endian.
        $last = $salt . pack(""N"", $i);
        // first iteration
        $last = $xorsum = hash_hmac($algorithm, $last, $password, true);
        // perform the other $count - 1 iterations
        for ($j = 1; $j < $count; $j++) {
            $xorsum ^= ($last = hash_hmac($algorithm, $last, $password, true));
        }
        $output .= $xorsum;
    }

    if($raw_output)
        return substr($output, 0, $key_length);
    else
        return bin2hex(substr($output, 0, $key_length));
}
?>

that I was downloaded it from here
and I use it as below :
$password = ""mypass"";
$salt = ""K3HtAz[|U8]Of9@?Ppj"";
$hash = pbkdf2(""SHA256"", $password, $salt, 1, 20);

I've read some articles but couldn't help me to write one for me
I need to generate password and salt in user registration level and store them into MySQL and when user want to login , match them with user input in login form..
","should use this code to generate : 
$password = 'my password';
$salt = strtr(base64_encode(openssl_random_pseudo_bytes(18)), '+', '.');
$pwhash = crypt($password, sprintf('$2y$%02d$%s', 13, $salt));

And match it by this method : 
$given_password = $_POST['password']; // the submitted password
$db_hash = $row['Password']; // field with the password hash

$given_hash = crypt($given_password, $db_hash);

if (isEqual($given_hash, $db_hash)) {
    // user password verified
}

// constant time string compare
function isEqual($str1, $str2)
{
    $n1 = strlen($str1);
    if (strlen($str2) != $n1) {
        return false;
    }
    for ($i = 0, $diff = 0; $i != $n1; ++$i) {
        $diff |= ord($str1[$i]) ^ ord($str2[$i]);
    }
    return !$diff;
}

As this tutorial
","789","<php><salt>","0","0","1","2013-05-18 09:49:11","16622891","3","","","","","2013-05-18 07:56:48","2013-05-21 00:13:56"
"14677610","How to Remove Salt from DB?","okay I am trying to make a log in form to my website in C# it has md5 + salt.. the problem is salt. md5 I can make work but salt just won't work. I made a php that gets the user name, user group id's etc. I have removed tons of instances of salt in the db and it either destroyed log in, or just did nothing. I am wondering if there is an easy way to remove salt?
","What do you think is the purpose of the salt? If you could easily remove it, what would have been the reason to add it? You should really take a few minutes to read a tutorial about password hashing.
MD5 is not an appropriate choice to hash passwords, because it is ways too fast. One can calculate 8 Giga MD5 values per second with common hardware nowadays, that makes brute-forcing too easy. Instead use a slow key derivation function like BCrypt or PBKDF2.
To answer your question, you need the stored salt to verify the user entered password. If the user enters the password for login, you calculate a hash with the same salt you used to calculate the stored password in the database, then you can compare the hashes.
","782","<salt>","-3","2","1","2013-02-04 08:05:38","","0","","","","","2013-02-03 21:39:53",""
"6994263","Encryption: do I need to salt the key when not even storing it at all?","I searched all over the Net, including here on SO: There is a lot of discussion on the need to salt passwords before hashing and storing them.
In case the password is used to compute a key used for encryption (""Password Based Encryption""): what if you do not store the password at al?

[Note: I did read SO: Passphrase, Salt and IV, do I need all of these? and Does IV work like salt are certainly a related question: I am not sure how the Initialization Vector discussed there relates to the question here]

Suppose:
For encryption

the users enters a master password
this is SHA256 hashed and the output is used to AES256 encrypt a file
the hash is not stored (and obviously neither is the master password)

For decryption

The users enters the master password
This is SHA256 hashed and the output is used to decrypt the file
If the decryption was successful, the password was - apparently - correct

My question: 
When not storing anything except the encrypted file itself, is there any benefit in salting the master password before hashing it?
Considerations:

it would probably reduce the likelihood of a hash-collision
it would require the salt to be stored.
if the salt were lost/corrupted the user would not be able to decrypt the file anymore
how to check for successful decryption in step3: does this require part of the file contents to be known?
if so, how much of a faux-pas is storing a known value in an encrypted file (this cannot always be prevented - an attacker might guess that for example the users last name is encrypted somewhere in the file - an be correct).

","If you are not storing the master password then there is no need to salt it.  If you are reusing the master password to generate a lot of single-use passwords then it will need to be stored encrypted and decrypted as required.
Salting is for long term storing of user passwords that have to be matched more than once so that people with the same password don't have the same hash, which would help an attacker who stole the file.
Salt is for hashing in long term storage, an IV is for encryption using CBC mode (or CTR mode where it can also be called a nonce).
As to checking that your file has decrypted correctly, just ensure that you use a padding like PKCS7.  When the last block is decrypted the padding will be checked to ensure it is in the right format.  If the decryption failed then the padding will not be correctly formatted and you should get a ""Padding failed"" error.
","781","<encryption><hash><aes><salt><sha>","4","3","1","2011-08-09 12:02:54","6995875","0","1","-1","","2017-05-23 12:04:17","2011-08-09 09:48:42",""
"30887009","salt created by Java SecureRandom has different getBytes() value","I use java SecureRandom to create salt to encrypt user. However, when I tried to match user with salt and password, they failed on different machine. The user is created on a Linux test machine and I copy the database down to my OS X machine. The match succeeded on the test machine but failed on my OS X. 
Same salt get different bytes with the following code, even the length are different:
salt.getBytes()


And here is the salt generation process:
        SecureRandom random = new SecureRandom();
        byte bytes[] = new byte[20];
        random.nextBytes(bytes);
        String salt = new String(bytes);
        user.setSalt(salt);

Is is possible that getBytes() may have different value for the same salt on different machine?
","According to String.getBytes():

getBytes() Encodes this String into a sequence of bytes using the
  platform's default charset, storing the result into a new byte array.

Therefore if you have different charset on the machines result will be different.
","777","<java><security><salt>","0","1","2","2015-06-17 09:09:43","30887101","0","","","","","2015-06-17 09:05:00","2015-06-17 09:23:47"
"30887009","salt created by Java SecureRandom has different getBytes() value","I use java SecureRandom to create salt to encrypt user. However, when I tried to match user with salt and password, they failed on different machine. The user is created on a Linux test machine and I copy the database down to my OS X machine. The match succeeded on the test machine but failed on my OS X. 
Same salt get different bytes with the following code, even the length are different:
salt.getBytes()


And here is the salt generation process:
        SecureRandom random = new SecureRandom();
        byte bytes[] = new byte[20];
        random.nextBytes(bytes);
        String salt = new String(bytes);
        user.setSalt(salt);

Is is possible that getBytes() may have different value for the same salt on different machine?
","Don't do that: String salt = new String(bytes);
You are transforming a series of bytes into a string using the default encoding of the machine. You should keep the byte array as a byte array.
If you store the data in a database you can store it in a binary string column (bytea in postgresql for example - may be blob in other DBs).
","777","<java><security><salt>","0","1","2","2015-06-17 09:09:43","30887101","0","","","","","2015-06-17 09:05:00","2015-06-17 09:23:47"
"27563724","How do I write a salt state to pip install requirements file?","Can't find this written down. I'm trying:
pip.install:
  - requirements: /path/to/requirements.txt

But I'm getting the error that 
ID pip.install in SLS python.python-pip is not a dictionary

Many of the other ways include virtualenvs, but I don't want to use a virtualenv to do this as it's for a virtual machine, so there's no point.
","pip.installed
pip.installed:
  - requirements: /path/to/requirements.txt

","776","<python><virtual-machine><yaml><salt>","3","4","1","2015-03-09 18:25:53","28947349","0","","","","","2014-12-19 10:10:23",""
"18004221","SecureRandom generates values of different length","I have an application which I need to salt passwords.  In order to generate the salts I decided to use SecureRandom.  Everything works great when I am on my windows machine.  Then I tried to run my code on a Linux based machine (Centos 5) and everything broke.
I isolated the problem and created this test case:
public static void main(String[] args)  {
    SecureRandom sr = new SecureRandom();
    byte[] saltBytes = new byte[256];
    sr.nextBytes(saltBytes);
    String salt = new String(saltBytes);
    System.out.println(salt.length());
}

In windows the output is always 256, but on my Linux machine the output changes and is never 256.  It seems to always generate a salt that is smaller in length than 256.
Does anyone know why this occurs?
Solution:
I just changed new String line to new String(saltbytes, ""ASCII"");
","The issue is character encoding. On linux that is usually utf-8, which is a variable length encoding. If you want a string, use base64 for it instead.
","774","<java><salt>","1","5","1","2013-08-02 14:18:53","","2","","1426079","","2013-08-02 14:18:53","2013-08-01 20:46:32",""
"9897817","How should I store a password salt?","Using PHP, I am encoding passwords using the hmac function with the sha256 algorithm. What I'm not sure about is how to properly store the salt. 
The whole point of hashing a password is in case a hacker gets access to the database. If I store the salt in the db within the same row as the hashed password, isn't it just like I am handing the hacker the ""secret code""? I am putting up a door with a lock, and handing the intruder the key.
Can anyone please explain to me how they come about storing their salt?
","Putting the salt into the hands of an attacker who has stolen your database isn't actually a problem.  Combining the salt with the original password into the password hash protects against the attacker using ""rainbow tables"" of millions of known and well-known password hashes to obtain the passwords of some of the stolen user ids.
Having hashed the password and salt together makes it many orders of magnitude more difficult to crack even a single password, on the basis that the salt invalidates the password hashes known in the rainbow table.  So even if the salt is known by the attacker for each of your users, this means that in order to crack any single user, the attacker must compute a whole new rainbow table just for that user alone, which combines the user's salt with the rest of the passwords known in the rainbow table they started with.
Salting the password does not make it impossible to crack a password, but far more difficult.  An attacker could, for example, target a small subset of your users with the hash and salt in hand, and that's another reason to encourage strong passwords which are less likely to appear in a rainbow table.
","773","<php><security><passwords><salt>","11","16","3","2014-01-15 21:37:27","9897894","3","4","541091","","2012-12-13 15:01:49","2012-03-27 21:16:01",""
"9897817","How should I store a password salt?","Using PHP, I am encoding passwords using the hmac function with the sha256 algorithm. What I'm not sure about is how to properly store the salt. 
The whole point of hashing a password is in case a hacker gets access to the database. If I store the salt in the db within the same row as the hashed password, isn't it just like I am handing the hacker the ""secret code""? I am putting up a door with a lock, and handing the intruder the key.
Can anyone please explain to me how they come about storing their salt?
","The salt is intended to be as cleartext and immediately available.  A password hash is perfectly non-reversible, but it is dictionary attackable.  As such, salt enough to add a few orders of magnitude to perturb the dictionary attack.  Making the salt available should not degrade the security of the hashed password.
","773","<php><security><passwords><salt>","11","2","3","2014-01-15 21:37:27","9897894","3","4","541091","","2012-12-13 15:01:49","2012-03-27 21:16:01",""
"9897817","How should I store a password salt?","Using PHP, I am encoding passwords using the hmac function with the sha256 algorithm. What I'm not sure about is how to properly store the salt. 
The whole point of hashing a password is in case a hacker gets access to the database. If I store the salt in the db within the same row as the hashed password, isn't it just like I am handing the hacker the ""secret code""? I am putting up a door with a lock, and handing the intruder the key.
Can anyone please explain to me how they come about storing their salt?
","I would opt for storing salt along with hashing algorithm's identifier and the hash itself. 
Here is why:
Usually the the access to database is limited to localhost or some predefined range of IP addresses. Which means that, for a hacker to gain access to your database, he/she would need to compromise your servers filesystem (either by gaining direct access or injecting a script). Or perform an SQL injection.
In the former case it would mean, that if someone gained access to your salts in DB, he/she could as easily read them from your PHP files source.
The latter cause can be simply prevented by use of prepared statements with either PDO or MySQLi. You shouldn't be using the old mysql_* functions as API anymore. They are not maintained anymore and the process of deprecation has begun already.
Even if someone gets his/her hands on your DB, it is not all that problematic. If you are using crypt() function for creating hashes with good algorithms (recommended would be CRYPT_BLOWFISH), then cracking even a single password can be exceedingly long (in the scale of years). By that time you can easily send out ""change your password"" notifications to users, and lock all the ones, who have not done so.
If you are using PHP 5.5+, you should instead be using the new password API: http://php.net/password
","773","<php><security><passwords><salt>","11","3","3","2014-01-15 21:37:27","9897894","3","4","541091","","2012-12-13 15:01:49","2012-03-27 21:16:01",""
"17012723","How does Secure User authentication work?","When a user registers I take their password and secure it using hash and salt, which is then stored to mysql DB. So when a registered user tries to login how do I check if the password is valid? 
The only method I can think of is to get their password, hash+salt it, then check if the hash+salt is in DB. I am not sure how this is secure though? Because this would mean my code will hash+salt any password and find a match in DB.
I read about generating random salt every time login page is hit but doesn't this mean if a registered user tries to login a new hash will be generated which will be different then the hash which was generated when the same user registered. 
I would appreciate if anyone can shed light on this. I am using Java.
","basically you have to store h(password+salt) and salt in the database. If some user tries to log in, you'll get his plain-text password. Then you get the salt of the user from you database, generate the hash of the password+salt, and if its the same as the stored hash, the authentication was successful.
This is more secure than a basic hashed password, because it makes mass-bruteforcing from the hash a bit harder, because the attacker has to guess both the salt and the actual password. However, this does not make bruteforcing a single password harder, if the salts are public (or known to the attacker). It also makes rainbow-tables useless, which are massive lists of pregenerated hashes for common passwords
To get a deeper explanation, look here or here
","771","<java><security><hash><login><salt>","3","2","2","2018-08-09 03:14:28","17012817","1","","474189","","2013-06-09 18:24:08","2013-06-09 18:18:08",""
"17012723","How does Secure User authentication work?","When a user registers I take their password and secure it using hash and salt, which is then stored to mysql DB. So when a registered user tries to login how do I check if the password is valid? 
The only method I can think of is to get their password, hash+salt it, then check if the hash+salt is in DB. I am not sure how this is secure though? Because this would mean my code will hash+salt any password and find a match in DB.
I read about generating random salt every time login page is hit but doesn't this mean if a registered user tries to login a new hash will be generated which will be different then the hash which was generated when the same user registered. 
I would appreciate if anyone can shed light on this. I am using Java.
","In my case I store the hashed (salt+password) and the salt on the DB, when user provides the login and password, I get the salt, add to the provided password, then hash and compare to the stored hashed password from the DB. If equal/correct I regenerate a new salt and store then add the new salt to the correct password, then hash and store.
","771","<java><security><hash><login><salt>","3","0","2","2018-08-09 03:14:28","17012817","1","","474189","","2013-06-09 18:24:08","2013-06-09 18:18:08",""
"31359963","Better way to change Hash(Encrypt Password) using Email Address","I'm having a trouble about changing login password. I use hash and salt for my password. I can't change it on the phpmyadmin because it's hash type of characters. Here's my
create_acc.php
<?php
include_once('config.php');
$email = $_POST['e-mail'];
$pass = $_POST['pass'];

$hash = hash('sha256',$pass);

function createSalt(){
    $text = md5(uniqid(rand(), true));
    return substr($text,0,3);
}
$salt = createSalt();
$pass = hash('sha256',$salt.$hash);
$email = $mysqli->real_escape_string($email); //$mysqli is located at my config.php

$query = $mysqli->query(""INSERT INTO `login`(`email`,`pass`,`salt`) VALUES('$email','$pass','$salt')"");

$mysqli->close();

header('location: login.html');
?>

Any ideas on how can I create an change password or forgot password just like in modern login system right now. Whenever you forgot your password or you want to change it, the server will send a link on your email regarding on changing your encrypt password?
","No, Using phpmyadmin you just can do some simple encryption like md5 and sha1. But you can do this in a tricky way. encrypt your password from any online service or by php and then put your encrypted password at your phpmyadmin. That's it :)
","767","<php><mysql><hash><salt>","0","0","2","2015-07-12 06:28:00","","2","","4420967","","2015-07-12 06:28:00","2015-07-11 17:38:49",""
"31359963","Better way to change Hash(Encrypt Password) using Email Address","I'm having a trouble about changing login password. I use hash and salt for my password. I can't change it on the phpmyadmin because it's hash type of characters. Here's my
create_acc.php
<?php
include_once('config.php');
$email = $_POST['e-mail'];
$pass = $_POST['pass'];

$hash = hash('sha256',$pass);

function createSalt(){
    $text = md5(uniqid(rand(), true));
    return substr($text,0,3);
}
$salt = createSalt();
$pass = hash('sha256',$salt.$hash);
$email = $mysqli->real_escape_string($email); //$mysqli is located at my config.php

$query = $mysqli->query(""INSERT INTO `login`(`email`,`pass`,`salt`) VALUES('$email','$pass','$salt')"");

$mysqli->close();

header('location: login.html');
?>

Any ideas on how can I create an change password or forgot password just like in modern login system right now. Whenever you forgot your password or you want to change it, the server will send a link on your email regarding on changing your encrypt password?
","You can use this same logic for actually resetting the password/assigning new password. What you can do in the simplest way is create a password reset form and some URL (endpoint) that would accept (POST) requests consisting of e-mail or username as input/data. Once you get that, you would typically send an e-mail to the user's e-mail consisting of the URL that allows user to reset password. This part should create a unique token and should be stored in database of your choice. The e-mail sent to user typically consists of the token as part of the URL and the token should be ideally removed as soon as the user visits but your mileage and choice for deleting/keeping token may vary according to application and users. Once the user visits the URL sent for password reset, you perform a lookup for the token, find which user wanted to reset password if token exists and then just allow user to input password (& confirm password). Once the user hits Submit, you just pass the new password through the same password hashing function you use while creating a new user.
Oh and you can do much better with your code. It looks like it comes from few years back. It can be more secure and better written. I suggest checking php manual for password hashing and prepared statements.
","767","<php><mysql><hash><salt>","0","0","2","2015-07-12 06:28:00","","2","","4420967","","2015-07-12 06:28:00","2015-07-11 17:38:49",""
"44809151","Generating a Random Salt and use it in Bcrypt","I am trying to generate a random salt to be used in hashing a password. 
I am a bit new to password hashing, but form what I understand, when using BCrypt algorithm, you will get as a result a 60 characters long hashed string.
22 characters Out of these 60 characters should the salt value, which is prepended to the resulting hash.
I used a simple code to make sure that the randomly generated salt is the same one that is going to be prepended to the actual hash:
$salt = substr(strtr(base64_encode(openssl_random_pseudo_bytes(22)), '+', '.'), 0, 22);
echo ""Salt Value is: "".$salt . ""\n"";

The output was: Salt Value is: XKFB8DHMiXaYTzRAHtRhX7
Then I encrypted a password using the same generated salt as follows:
$cost = 8; 
$EncryptedPassword = password_hash($Password, PASSWORD_BCRYPT, ['cost' => $cost,'salt' => $salt]);
echo ""Encrypted Password: "" . $EncryptedPassword . ""\n"";

The output was not what I expected: 
Encrypted format: $2y$10$XKFB8DHMiXaYTzRAHtRhXutlLLG8XIZjj5XGeyoUZobEtnkOn/M/S
Where the resulting salt is not exactly the one I used for hashing, i.e. that last character of the salt value is always different. 
The randomly generated salt is: XKFB8DHMiXaYTzRAHtRhX7
The resulting salt value is: XKFB8DHMiXaYTzRAHtRhXu
My question is what could be the problem, and how could I get the same randomly generated salt value embedded in the password hashed string without getting it changed?
","It is simpler and more secure to just use password_hash() and the companion password_verify() for PHP. 
Use the CRYPT_BLOWFISH algorithm to create the hash. This will produce a standard crypt() compatible hash using the ""$2y$"" identifier. 
No salt needs to be supplied and is best not to supply one, in PHP 7.x the salt option has been removed.
Example: password_hash(""aPassword"", PASSWORD_BCRYPT)
","766","<php><random><hash><bcrypt><salt>","0","1","1","2017-06-28 23:13:02","44813947","3","1","","","","2017-06-28 17:32:13","2017-06-29 15:30:26"
"1745114","Comprehensive information about hash salts","There are a lot of questions about salts and best practices, however most of them simply answer very specific questions about them.  I have several questions which feed into one another.
Assuming a database is compromised a per user salt prevents the use of generic rainbow tables to crack passwords.  A separate rainbow table would have to be generated for each and every user who had a unique salt in order to obtain their password.  This would be a time consuming process which is what makes salts effective.  This does not help a tremendous amount against dictionary or brute force attacks.
This leads to a number of questions:

Although a salt is not meant to be security through obscurity wouldn't it still be more secure to place salts in a separate table?  That way even if the 'users' table was to become compromised the salts would not.
Would having a 2nd hard-coded application wide salt add a tremendous amount of security?  This way even if the database is compromised, the actual application would also have to be compromised or both the salts and hashes would be completely useless.
What is the best length for a salt?  Obviously the longer the better, however with larger numbers of users database size does become an issue, so what would be the minimum length for an effective salt be?
Is using a 3rd party source for a ""true random salt"" (random.org, random.irb.hr) really needed?  I understand using a salt based off of server time is ""guessable"" to some extent however taking a random sub-string of a sha1'd random string seems like an effective salt method.

Thank you in advance.
","Regarding #1, you can probably assume that if the users table is compromised, they probably will also compromise the salt table, even if you protected it better somehow. It would only slow them down a bit, like a speed bump would do.
Regarding #2, a hard coded salt value is often easily reverse-engineer-able via decompilation or runtime memory inspection, even with moderate amounts of code obfuscation. This would only help increase security in the case where your application is strictly hosted and nobody is able to get hold of your compiled application.
Regarding #3: What is the optimal length for a password hash? (SO link) - 16 is good!
Regarding #4, it isn't much more work to implement ""more truly"" random numbers, depending on the platform you're working with. For example, if you can tradeoff some performance to generate your seed/random number, you can probably breathe easier over how truly random your salt is.
","753","<database><security><hash><random><salt>","5","4","4","2011-05-11 00:17:14","1745252","0","2","","","","2009-11-16 21:56:51",""
"1745114","Comprehensive information about hash salts","There are a lot of questions about salts and best practices, however most of them simply answer very specific questions about them.  I have several questions which feed into one another.
Assuming a database is compromised a per user salt prevents the use of generic rainbow tables to crack passwords.  A separate rainbow table would have to be generated for each and every user who had a unique salt in order to obtain their password.  This would be a time consuming process which is what makes salts effective.  This does not help a tremendous amount against dictionary or brute force attacks.
This leads to a number of questions:

Although a salt is not meant to be security through obscurity wouldn't it still be more secure to place salts in a separate table?  That way even if the 'users' table was to become compromised the salts would not.
Would having a 2nd hard-coded application wide salt add a tremendous amount of security?  This way even if the database is compromised, the actual application would also have to be compromised or both the salts and hashes would be completely useless.
What is the best length for a salt?  Obviously the longer the better, however with larger numbers of users database size does become an issue, so what would be the minimum length for an effective salt be?
Is using a 3rd party source for a ""true random salt"" (random.org, random.irb.hr) really needed?  I understand using a salt based off of server time is ""guessable"" to some extent however taking a random sub-string of a sha1'd random string seems like an effective salt method.

Thank you in advance.
","
If a hacker has access to your database system, you're fsckd.  Your system has to have access to both tables to run, so the likelihood of ""hiding"" one from a hacker who's already compromised the system is nearly zero.  Not remotely worth the extra complexity, in my opinion.
Having a ""nonce"" added (in addition) to a salt for each password is not a great help, but doesn't really hurt anything either.
Even 16 bits of salt is typically enough to make password cracking infeasible, if done correctly.  I would probably use 64 or 128 bits, why not?
You should use a ""good"" source of randomness, but it doesn't need to be perfect.  If the random values are somehow visible to an attacker, then they may be able to find a way to predict the next random value, but they would have to do this when the password is created and it would only get them that one password.

In short, you need per-user salt and a good hashing function.  MD5 is terrible, and SHA-1 is no longer ""good"".  You should be using a system like bcrypt to force an attacker to spend a considerable fraction of a second on each hash.  0.1s per password check is probably no big deal to you, but it's devastating to any kind of brute-force cracking.
This is required reading for anyone implementing a password security scheme:
http://chargen.matasano.com/chargen/2007/9/7/enough-with-the-rainbow-tables-what-you-need-to-know-about-s.html
","753","<database><security><hash><random><salt>","5","7","4","2011-05-11 00:17:14","1745252","0","2","","","","2009-11-16 21:56:51",""
"1745114","Comprehensive information about hash salts","There are a lot of questions about salts and best practices, however most of them simply answer very specific questions about them.  I have several questions which feed into one another.
Assuming a database is compromised a per user salt prevents the use of generic rainbow tables to crack passwords.  A separate rainbow table would have to be generated for each and every user who had a unique salt in order to obtain their password.  This would be a time consuming process which is what makes salts effective.  This does not help a tremendous amount against dictionary or brute force attacks.
This leads to a number of questions:

Although a salt is not meant to be security through obscurity wouldn't it still be more secure to place salts in a separate table?  That way even if the 'users' table was to become compromised the salts would not.
Would having a 2nd hard-coded application wide salt add a tremendous amount of security?  This way even if the database is compromised, the actual application would also have to be compromised or both the salts and hashes would be completely useless.
What is the best length for a salt?  Obviously the longer the better, however with larger numbers of users database size does become an issue, so what would be the minimum length for an effective salt be?
Is using a 3rd party source for a ""true random salt"" (random.org, random.irb.hr) really needed?  I understand using a salt based off of server time is ""guessable"" to some extent however taking a random sub-string of a sha1'd random string seems like an effective salt method.

Thank you in advance.
","
No. Using salts correctly will multiply the time it takes for an attacker to crack all the passwords in your database by a factor of millions. Putting salts in another table will add 30 seconds to the time it takes for an attacker to get the salts too.
Yes. It is not a bad idea to use both a global key and a per-user salt.
A salt is, or should be, a cryptographic key. Make it long and random. Database size is not an issue. The salt, like any cryptographic key, can be 128 bits or 16 bytes (32 bytes when stored in hex format).
Your computer should have cryptographically strong pseudo-RNG. Check the security or crypto APIs for your language.

","753","<database><security><hash><random><salt>","5","2","4","2011-05-11 00:17:14","1745252","0","2","","","","2009-11-16 21:56:51",""
"1745114","Comprehensive information about hash salts","There are a lot of questions about salts and best practices, however most of them simply answer very specific questions about them.  I have several questions which feed into one another.
Assuming a database is compromised a per user salt prevents the use of generic rainbow tables to crack passwords.  A separate rainbow table would have to be generated for each and every user who had a unique salt in order to obtain their password.  This would be a time consuming process which is what makes salts effective.  This does not help a tremendous amount against dictionary or brute force attacks.
This leads to a number of questions:

Although a salt is not meant to be security through obscurity wouldn't it still be more secure to place salts in a separate table?  That way even if the 'users' table was to become compromised the salts would not.
Would having a 2nd hard-coded application wide salt add a tremendous amount of security?  This way even if the database is compromised, the actual application would also have to be compromised or both the salts and hashes would be completely useless.
What is the best length for a salt?  Obviously the longer the better, however with larger numbers of users database size does become an issue, so what would be the minimum length for an effective salt be?
Is using a 3rd party source for a ""true random salt"" (random.org, random.irb.hr) really needed?  I understand using a salt based off of server time is ""guessable"" to some extent however taking a random sub-string of a sha1'd random string seems like an effective salt method.

Thank you in advance.
","1) No. An attacker will probably dump everything on your system and will find the salts eventually (though this will be annoying).
2) Yes, there is a small benefit-this covers you if another system uses an identical hashing scheme as you, and some of your salts overlap.
3) The only requirement of a salt is that it's unique per user. Length is irrelevant for security-salts are not keys despite widespread confusion. 64 bit random salts will never repeat. You can also use a 32-bit counter, or just use the user IDs if those are unique.
4) The only reason salts even need randomness (if you use random salts) is to ensure uniqueness. This is statistical randomness, not cryptographic randomness (impossibility of guessing). So any random number library will do.
","753","<database><security><hash><random><salt>","5","2","4","2011-05-11 00:17:14","1745252","0","2","","","","2009-11-16 21:56:51",""
"16241484","Passwords MD5 encoded without salt. How to fix it?","I have a system where users can signup by Facebook or by a regular form. If user signup by Facebook, my system generates a random password, just to allow user to log-in without Facebook if he wants. If user signup using regular form, he can type any password he wants. In both ways, password are encoded into a MD5 hash, but without salting. It's is insecure, I know, this is the reason i'm here.
I don't know the best strategy to convert the passwords into secure ones... First i'm thinking to keep the MD5 insecure password, and when user log-in, i can match the password without salt, salt-it, and then update the database. But it doesn't solve my problem, because system will still accept the insecure password. Besides that, user can still log-in using facebook, witch do not allow me to update their password (since he didn't used it).
So, have anybody an idea to minimize the impact instead of just force everyone to update the passwords?
Thanks!
","So, I've done the following actions to solve my problem.

Created a column ""LastPasswordChange"" in users table.
When user changes password, the field is updated with current date, ALSO, an e-mail is sent to user to inform that password was changed, with a link to revert it in case of this is wrong (due to a possible hack).
The e-mail allow user to log in and set a new password without knowing the last used.
When user log-in using the current password, it looks to the LastPasswordChange field, and if it is null, it allow the login without using the salt.
In any way he/she logs in (Facebook or Login/pass), system looks to the LastPasswordChange field, and if it is null, system requires user to change the current password to a different one (not match the old one without salt).

That's it.
","749","<security><md5><salt>","0","0","1","2013-05-02 19:27:28","16346177","3","","2175874","","2013-04-26 17:04:22","2013-04-26 16:52:23",""
"47473479","How to encrypt with AES in Python with no salt?","I want to encrypt some data using AES in Python such that two encryptions of the same data give the same output (using the same key in both encryptions). I tried to use a static IV but I still get two different outputs given one input. 
Here is what I did:
from Crypto.Cipher import AES

iv = 16 * '\x00'
cipher = AES.new(key, AES.MODE_CBC, iv)

I would like to obtain the same cipher if I decide to encrypt the same data multiple times.
Do you know how to prevent the use of a salt?
Thank you!
","The cipher object here is the state and is initialized using the provided key data and initialization vector. Once you start to use this initialized keystate it is modified for each block you encrypt when you use CBC mode. That is the cipher block chaining in action. To have two separate encryptions you need to use two separate keystates. Or, as mentioned, you can use a mode (ECB) that does not affect the keystate when encrypting a block.
A demo (python3):
from Crypto.Cipher import AES
key = 16 * b'\0'
iv = 16 * b'\0'
plaintext = 16 * b'\x41'
a = AES.new(key, AES.MODE_CBC, iv)
b = AES.new(key, AES.MODE_CBC, iv)
ar = a.encrypt(plaintext)
br = b.encrypt(plaintext)
>>> ar
b'\xb4\x9c\xbf\x19\xd3W\xe6\xe1\xf6\x84\\0\xfd[c\xe3'
>>> br
b'\xb4\x9c\xbf\x19\xd3W\xe6\xe1\xf6\x84\\0\xfd[c\xe3'

The disadvantage of ECB mode is everytime we encrypt this plaintext with this key and iv we will get this result. With CBC mode, each time we encrypt another block the keystate is changed and we get a different output which is dependent upon what has been encrypted before.
ECB Mode
>>> ecb = AES.new(16 * b'\0', AES.MODE_ECB)
>>> ecb.encrypt(16 * b'\x41')
b'\xb4\x9c\xbf\x19\xd3W\xe6\xe1\xf6\x84\\0\xfd[c\xe3'
>>> ecb.encrypt(16 * b'\x41')
b'\xb4\x9c\xbf\x19\xd3W\xe6\xe1\xf6\x84\\0\xfd[c\xe3'

Each encryption produces the same result. No iv required.
CBC Mode
>>> cbc = AES.new(16 * b'\0', AES.MODE_CBC, 16 * b'\0')
>>> cbc.encrypt(16 * b'\x41')
b'\xb4\x9c\xbf\x19\xd3W\xe6\xe1\xf6\x84\\0\xfd[c\xe3'
>>> cbc.encrypt(16 * b'\x41')
b'o\x9fv\x9a\x9c\xaa\x03\x13\xba\x17\x8c\x1c.\x0f`v'
>>> cbc.encrypt(16 * b'\x41')
b'\n1\x165\xb5?\x04h\xa8\r>k\xdbK\xbc4'

The first block encrypts the same as ECB mode but subsequent blocks are different.
Futher discussion about modes of operation for block ciphers can be found online.
","749","<python><encryption><aes><salt>","0","2","1","2017-11-24 15:01:39","47475514","3","","","","","2017-11-24 12:36:24",""
"2429220","Convert ASP.NET membership system to secure password storage","I have a potential client that set up their website and membership system in ASP.NET 3.5. When their developer set up the system, it seems he turned off the security/hashing aspect of password storage and everything is stored in the clear.
Is there a process to reinstall/change the secure password storage of ASP.NET membership without changing all of the passwords in the database? The client is worried that they'll lose their customers if they all have to go through a massive password change.
I've always installed with security on by default, thus I don't know the effect of a switchover. Is there a way to convert the entire system to a secure password system without major effects on the users?
","Hopefully there's an automatic way to do this, but I suppose you could do it the hard way if you had to
Run all of the cleartext passwords through the membership system with the hash turned on to get the hashed version of the password, then update the database directly with the hashed version of the password.
","746","<asp.net-membership><md5><hash><password-protection><salt>","2","1","1","2016-01-11 18:58:01","2429266","2","","","","","2010-03-11 22:31:17",""
"20400943","Spring security. How salt-source works?","So, I new with Spring Security. I'm using password hashing with salt.In security xml file, it looks like: 
<beans:bean id=""saltSource"" class=""bla.bla.MyOwnSalt"" scope=""singleton"" />
<password-encoder hash=""md5"" >
<salt-source ref=""saltSource"" />

MyOwnSalt implements SaltSource.
So passwords hash creating with salt.
Sometimes I need to create users and their passwords directly in database.
The main question is: How can I create a hash using only MD5 calculator, if I have password and salt?
","I was trying to create hash from ""passwordsalt"". Spring password-encoder with salt-source works like: PasswordEncoder.encode(""password{salt}"");
So, the problem was with missed{ }
All I had to - is to look at the PasswordEncoder source code.
","741","<hash><spring-security><passwords><md5><salt>","0","0","1","2014-01-27 14:31:11","","0","","686490","","2014-01-27 14:31:11","2013-12-05 13:11:27",""
"13702070","Find if correct password with hash and random salt","I have a database with users and I want to have a random salt for each user that is saved in the column Salt and a hash of their salt+password in the field password.
I can insert them like this:
INSERT INTO users([Username], [Password], [Salt])
VALUES('David', HASHBYTES('SHA1', 'randomgeneratedsalt' + 'theirpw'), 'randomgeneratedsalt')

But how do I select them?
My own try is:
select * 
from users 
where Username = 'David' 
  AND Password = HASHBYTES('SHA1', Salt + 'enteredpw')

Of course I can select the salt for the user that is trying to login, but I'd like to do it without doing so.
","You select them by username, which must be unique. After you locate the user you can compare the presented password hash against the stored one. Only need be careful to display the same error whether username was not found or hash don't match (ie. prevent information disclosure that the username is valid).
","738","<sql-server><hash><salt><password-encryption>","0","3","1","2012-12-04 12:30:07","13702231","0","","13302","","2012-12-04 12:30:07","2012-12-04 11:40:31",""
"13861427","Is it a good idea to update hash salt every login?","I want to make a secure website. Is updating the password salt every time a user logs in a good idea?
Edit: I additionally use a global salt, which is hard coded.
","No, it makes no sense at all.
The purpose of salting hashes is to make them unique even if the original password is the same. This avoids e.g. rainbow table attacks or re-using a stolen hash on another website where the hash is sufficient to login (happens with bad remember-me implementations).
Assume an attacker got the stored password hash from your database. This usually means that he knows both the salt and the final hash. Now he can already brute-force this single password. Assuming there are no collisions he'll end up with the actual password of the user when the brute-force attack succeeds. And that one will work no matter what salt is used at this moment.
For more information about salting I suggest you to read this excellent answer on IT Security
","738","<php><security><hash><salt>","5","14","2","2012-12-13 19:06:45","13861453","4","1","1692777","","2012-12-13 14:25:49","2012-12-13 14:01:36",""
"13861427","Is it a good idea to update hash salt every login?","I want to make a secure website. Is updating the password salt every time a user logs in a good idea?
Edit: I additionally use a global salt, which is hard coded.
","A new salt should be randomly generated for each user and each time they change their password as a minimum. I'm not sure if generating a new one each login is a good idea. It seems overkill and not provide any significant extra security.
You could try using an extra static site wide secret key.
In this case even your DB is  compromised, the hash and salt will be available. But the hacker will need access to local files to gain your static key. 
hash(hash(salt + secret_key) + password)
","738","<php><security><hash><salt>","5","2","2","2012-12-13 19:06:45","13861453","4","1","1692777","","2012-12-13 14:25:49","2012-12-13 14:01:36",""
"42103374","How to change Default Python for Salt in CentOS 7?","I am trying to setup a salt-master/salt-cloud on Centos 7. The issue that I am having is that I need Python 2.7.13 to use salt-cloud to clone vm in vmware vcenter (uses pyvmomi). CentOS comes with Python 2.7.5 which salt has a known issue with (SSL doesn't work).
I have tried to find a configuration file on the machine to change which python version it should use with no luck.
I see two possible fixes here,
somehow overwrite the python 2.7.5 with 2.7.13 so that it is the only python available. 
OR 
If possible change the python path salt uses.
Any Ideas on how to do either of these would be appreciated? 
(Or another solution that I haven't mentioned above?)
","The salt packages are built using the system python and system site-packages directory.  If something doesn't work right, file a bug with salt.  You should avoid overwriting the stock python, as that will result in a broken system in many ways.
","736","<python><python-2.7><salt><salt-stack><salt-cloud>","1","1","1","2017-02-16 02:40:35","","4","1","","","","2017-02-08 01:58:10",""
"14338107","authenticating user using pbkdf2 hash algorithm by https://defuse.ca/php-pbkdf2.htm","i am currently using md5 to authenticate users after they put their login email and password :
if($_POST['submit']=='Login')
{
    // Checking whether the Login form has been submitted

// Will hold our errors
$err = array();


if(!$_POST['email'] || !$_POST['main_password'])
    $err[] = 'All the fields must be filled in!';

if(!count($err))
{
    // Make this an integer.
    $_POST['rememberMe'] = (int)$_POST['rememberMe'];

    try {

        $sql = ""SELECT id,email FROM ld_customers WHERE email = :cust_email AND password = :cust_password"";
        $stmt = $iws_db->prepare($sql);


        $stmt->bindParam(':cust_email', $_POST['email'], PDO::PARAM_STR, 255);
        $stmt->bindParam(':cust_password', md5($_POST['main_password']) , PDO::PARAM_STR, 256);

        $stmt->execute();   
        $row = $stmt->fetch();

    if($row['email'])
    {

        // If everything is OK login and write the users data to the session.
        $_SESSION['email']=$row['email'];
        $_SESSION['id'] = $row['id'];
        $_SESSION['rememberMe'] = $_POST['rememberMe'];

        // Store some data in the session

        setcookie('iwsRemember',$_POST['rememberMe']);
    }

    else $err[]='Wrong email and/or password!';

    /*** close the database connection ***/
    $iws_db = null;
    }
    catch(PDOException $e)
    {
    echo $e->getMessage();
    }
}

if($err)
$_SESSION['msg']['login-err'] = implode('<br />',$err);
// Save the error messages in the session

header(""Location: index.php"");
    exit;
}

but i want to now authenticate using PBKDF2 by https://defuse.ca/php-pbkdf2.htm.Here is the snippet of code by them:
    <?php

define(""PBKDF2_HASH_ALGORITHM"", ""sha256"");
define(""PBKDF2_ITERATIONS"", 10000);
define(""PBKDF2_HASH_BYTES"", 24);
define(""PBKDF2_SALT_BYTES"", 24);

define(""HASH_SECTIONS"", 4);
define(""HASH_ALGORITHM_INDEX"", 0);
define(""HASH_ITERATION_INDEX"", 1);
define(""HASH_SALT_INDEX"", 2);
define(""HASH_PBKDF2_INDEX"", 3);

function create_hash($password)
{
    // format: algorithm:iterations:salt:hash
    $salt = base64_encode(mcrypt_create_iv(PBKDF2_SALT_BYTES, MCRYPT_DEV_URANDOM));     
    return PBKDF2_HASH_ALGORITHM . "":"" . PBKDF2_ITERATIONS . "":"" .  $salt . "":"" . 
        base64_encode(pbkdf2(
            PBKDF2_HASH_ALGORITHM,
            $password,
            $salt,
            PBKDF2_ITERATIONS,
            PBKDF2_HASH_BYTES,
            true
        ));
}

function validate_password($password, $good_hash)
{
    $params = explode("":"", $good_hash);
    if(count($params) < HASH_SECTIONS)
       return false; 
    $pbkdf2 = base64_decode($params[HASH_PBKDF2_INDEX]);
    return slow_equals(
        $pbkdf2,
        pbkdf2(
            $params[HASH_ALGORITHM_INDEX],
            $password,
            $params[HASH_SALT_INDEX],
            (int)$params[HASH_ITERATION_INDEX],
            strlen($pbkdf2),
            true
        )
    );
}




function slow_equals($a, $b)
{
    $diff = strlen($a) ^ strlen($b);
    for($i = 0; $i < strlen($a) && $i < strlen($b); $i++)
    {
        $diff |= ord($a[$i]) ^ ord($b[$i]);
    }
    return $diff === 0; 
}

function pbkdf2($algorithm, $password, $salt, $count, $key_length, $raw_output = false)
{
    $algorithm = strtolower($algorithm);
    if(!in_array($algorithm, hash_algos(), true))
        die('PBKDF2 ERROR: Invalid hash algorithm.');
    if($count <= 0 || $key_length <= 0)
        die('PBKDF2 ERROR: Invalid parameters.');

    $hash_length = strlen(hash($algorithm, """", true));
    $block_count = ceil($key_length / $hash_length);

    $output = """";
    for($i = 1; $i <= $block_count; $i++) {
        // $i encoded as 4 bytes, big endian.
        $last = $salt . pack(""N"", $i);
        // first iteration
        $last = $xorsum = hash_hmac($algorithm, $last, $password, true);
        // perform the other $count - 1 iterations
        for ($j = 1; $j < $count; $j++) {
            $xorsum ^= ($last = hash_hmac($algorithm, $last, $password, true));
        }
        $output .= $xorsum;
    }

    if($raw_output)
        return substr($output, 0, $key_length);
    else
        return bin2hex(substr($output, 0, $key_length));
}
?>

i tried doing implementing this in this way:
  if($_POST['submit']=='Login')
    {
        // Checking whether the Login form has been submitted

    // Will hold our errors
    $err = array();


    if(!$_POST['email'] || !$_POST['main_password'])
        $err[] = 'All the fields must be filled in!';

    if(!count($err))
    {
        // Make this an integer.
        $_POST['rememberMe'] = (int)$_POST['rememberMe'];

        try {

            $sql = ""SELECT id,email FROM ld_customers WHERE email = :cust_email"";
        $stmt = $iws_db->prepare($sql);

        /*** bind the paramaters ***/
        $stmt->bindParam(':cust_email', $_POST['email'], PDO::PARAM_STR, 255);




        $stmt->execute();

        $row = $stmt->fetch();

                    if(!validate_password($_POST['main_password'], $row['password']))
                    {
                     exit(""Password error!"");
                    }
                     else
                    {
                     if($row['email'])
             {
              // If everything is OK login and write the users data to the session.
        $_SESSION['email']=$row['email'];
        $_SESSION['id'] = $row['id'];
        $_SESSION['rememberMe'] = $_POST['rememberMe'];

        // Store some data in the session

        setcookie('iwsRemember',$_POST['rememberMe']);    

        }
                    else
                    {
                    $err[]='Wrong email and/or password!';
                    }
                   }


    /*** close the database connection ***/
    $iws_db = null;
    }
    catch(PDOException $e)
    {
    echo $e->getMessage();
    }
}

if($err)
$_SESSION['msg']['login-err'] = implode('<br />',$err);
// Save the error messages in the session

header(""Location: index.php"");
exit;

i am not successful implementing it, every time it exit saying password error!! i think the problem is fetching the stored encrypted password and comparing it with password input by user.
","I think it should be something like:
    $sql = ""SELECT id,email FROM ld_customers WHERE email = :cust_email"";
    $stmt = $iws_db->prepare($sql);


    $stmt->bindParam(':cust_email', $_POST['email'], PDO::PARAM_STR, 255);

    $stmt->execute();   
    $row = $stmt->fetch();
if($row['email'])
{
  if(!validate_password($_POST['main_password'], $row['password']))
  {
     exit(""Password error!"");
  }
  else
  {
    echo'Logged in!';
  }
}
else
   echo""email doesn't exist"";

You are creating an MD5 hash instead of using the functions of your library.
","733","<php><hash><login><web><salt>","0","0","1","2013-01-15 14:24:57","14338626","6","","1980208","","2013-01-15 14:24:57","2013-01-15 12:48:38",""
"34397535","Moodle External Database Authentication With Salt Hashing","I'm setting up Moodle 3.0 to allow users from my CMS (developed using the framework CakePHP 2.6) to login into Moodle. The two databases are on the same server. I'm using the option ""External Database"" from Moodle, it seems to be the easiest solution to set up.
According to Moodle Docs the script /path/to/moodle/auth/db/cli/sync_users.php imports the users from the external database (CMS) to Moodle, this works perfectly, but the login into Moodle using the credentials (username and password) from the external database doesn't work.
I think the problem might be the ""Format password"" (I'm using SHA-1 hash) in ""External Database"" setup. Because in CakePHP there's password hashing (SHA1 using salt). When I set ""Format password"" to ""Plain text"" it works, but that's not what I want. There's some way to solve this?
https://docs.moodle.org/27/en/External_database_authentication
","I've came up with a solution to my problem, but I had to change just one line of the Moodle's code, something I was trying to avoid. I've tried the ""Format password"" to ""Crypt one-way hashing"" option, but no success. 
CakePHP on my server is hashing the password this way:
$string = $salt_key . $password;
sha1($string);

So in Moodle authentication with ""External Database"" I've changed the file /path/to/moodle/auth/db/auth.php and added the following:
// I've just add this line:
// $extpassword = '<your_salt_key_here>' . $extpassword;

if ($this->config->passtype === 'plaintext') {
    return ($fromdb == $extpassword);
} else if ($this->config->passtype === 'md5') {
    return (strtolower($fromdb) == md5($extpassword));
} else if ($this->config->passtype === 'sha1') {
    $extpassword = '<your_salt_key_here>' . $extpassword; // Add this line
    return (strtolower($fromdb) == sha1($extpassword));
} else if ($this->config->passtype === 'saltedcrypt') {
    require_once($CFG->libdir.'/password_compat/lib/password.php');
    return password_verify($extpassword, $fromdb);
} else {
    return false;
}

","727","<cakephp><hash><moodle><salt><cakephp-2.6>","1","1","1","2015-12-23 15:39:57","","0","","","","","2015-12-21 14:04:02",""
"17384639","Using C# to authenticate against a vBulletin database","I spended all day looking for a solution for my problem and finally decided to make a post asking for help.
I really dont know if this is the best place to post this but maybe someone can help me.
So im trying to create a simple login form in C#
Everything works fine on getting the username,MD5(password) and salt from the database. Now my problem is how to make the compare from the password + salt inputed from my form. I have no idea how vbulleting stores the password when user creates an account on the forum, nor i have idea how he generates a salt, if its random, or username bases, and how many itenerations he takes.
Can anyone help me?
EDIT: -
$vbulletin->userinfo['password'] != iif($password AND !$md5password, md5(md5($password) . $vbulletin->userinfo['salt']), '') AND
            $vbulletin->userinfo['password'] != iif($md5password, md5($md5password . $vbulletin->userinfo['salt']), '') AND
            $vbulletin->userinfo['password'] != iif($md5password_utf, md5($md5password_utf . $vbulletin->userinfo['salt']), '')

found that, but still have no clue how they make it, so ican try to reproduce it in c#
Best Regards,
Magg
","Given the code, formatted (and ignoring this might break the syntax):
    $vbulletin->userinfo['password'] != iif($password AND !$md5password,
        md5(md5($password) . $vbulletin->userinfo['salt']), '')
AND $vbulletin->userinfo['password'] != iif($md5password,
        md5($md5password . $vbulletin->userinfo['salt']), '')
AND $vbulletin->userinfo['password'] != iif($md5password_utf,
        md5($md5password_utf . $vbulletin->userinfo['salt']), '')

This expression detects ""failure of all methods"", but because I find that hard to read, let's rewrite it as a positive match for ""success of any method"" by applying De Morgan's with an implicit outside negation:
    $vbulletin->userinfo['password'] == iif($password AND !$md5password,
        md5(md5($password) . $vbulletin->userinfo['salt']), '')
OR  $vbulletin->userinfo['password'] == iif($md5password,
        md5($md5password . $vbulletin->userinfo['salt']), '')
OR  $vbulletin->userinfo['password'] == iif($md5password_utf,
        md5($md5password_utf . $vbulletin->userinfo['salt']), '')

Now, apply simplification and noting and that iff(x,y,z) works like x?y:z we end up with something about like the following in C#:
   storedPW == password && !md5password ? md5(md5(password) + salt) : ''
|| storedPW == md5password ? md5(md5password + salt) : ''
|| storedPw == md5password_utf ? md5(md5password_utf + salt) : ''

The checks are little bit ugly, but .. not my code. The important bit to realize is the pattern is:
 md5(md5(password) + salt) -> storedPw

Unfortunately, this should have matched md5(md5($pass).$salt) from the insidepro link - when using that tool, make sure you're supplying the plain text password and not the hash from the database.
YMMV.
","717","<c#><login><passwords><salt><vbulletin>","0","0","2","2013-06-30 15:23:09","17391833","7","","2535328","","2013-06-29 21:55:01","2013-06-29 21:01:07",""
"17384639","Using C# to authenticate against a vBulletin database","I spended all day looking for a solution for my problem and finally decided to make a post asking for help.
I really dont know if this is the best place to post this but maybe someone can help me.
So im trying to create a simple login form in C#
Everything works fine on getting the username,MD5(password) and salt from the database. Now my problem is how to make the compare from the password + salt inputed from my form. I have no idea how vbulleting stores the password when user creates an account on the forum, nor i have idea how he generates a salt, if its random, or username bases, and how many itenerations he takes.
Can anyone help me?
EDIT: -
$vbulletin->userinfo['password'] != iif($password AND !$md5password, md5(md5($password) . $vbulletin->userinfo['salt']), '') AND
            $vbulletin->userinfo['password'] != iif($md5password, md5($md5password . $vbulletin->userinfo['salt']), '') AND
            $vbulletin->userinfo['password'] != iif($md5password_utf, md5($md5password_utf . $vbulletin->userinfo['salt']), '')

found that, but still have no clue how they make it, so ican try to reproduce it in c#
Best Regards,
Magg
","So heres the solution to my problem, finally i managed to get it working.
The problem was that C# uses all strings as unicode, and vbulletin uses all strings as UTF8
For the sake of testing, i created a new form, added a new textbox and a button.
This dont connect in anyway to the database, and i provided the salt directly tooken from the database.(for the sake of testing)
Since was already stated vbulleting logins as the following:
md5(md5(password)+salt)
So to reproduce the same in C# but using UTF8 heres the solution:
static public string GetMd5Sum(string str)
    {
        //vBulletin uses UTF8 as strings, so you need to pass the user input string as UTF8 also
        Encoder enc = System.Text.Encoding.UTF8.GetEncoder();

        //Create a byte[] array to store the new UTF8 string
        byte[] utf8text = new byte[str.Length];

        //Pass the string to the byte[] array
        enc.GetBytes(str.ToCharArray(), 0, str.Length, utf8text , 0, true);

        //Hash the byte[] array with our UTF8 string inside
        MD5 md5 = new MD5CryptoServiceProvider();
        byte[] result = md5.ComputeHash(utf8text);

        //Build the final string by converting each byte
        //into hex and appending it to a StringBuilder
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < result.Length; i++)
        {
            sb.Append(result[i].ToString(""x2"")); //x2 here so the outcome result is all in lowercase, couse vbulleting also stores all in lowercase
        }

        //And return it
        return sb.ToString();
    }

    private void button1_Click(object sender, EventArgs e)
    {
        //Get the user input password as plain text
        string pass = textBox1.Text;

        //Here i provided the salt explicit that i took from the database
        string salt = ""N1GOt=>8sdO@E54)PH2@NCm5yI#]3u"";

        //Here we convert the plain text password into the first hash
        string p1 = GetMd5Sum(pass);

        //Here we add the salt to the previous hashed password
        string p2 = p1 + salt;

        //Here we hash again the previous hashed password + the salt string
        string final = GetMd5Sum(p2);

        //this was just to the test to see if it all works as intended
        MessageBox.Show(final);
    }

This will output the exact same hash stored in the database as password.
Thank you user2246647 for all your help on this problem i had.
","717","<c#><login><passwords><salt><vbulletin>","0","0","2","2013-06-30 15:23:09","17391833","7","","2535328","","2013-06-29 21:55:01","2013-06-29 21:01:07",""
"5120908","Spring Security get UserDetails without accessing to Database","i'm trying to apply password encoding and salt using Spring.
All work fine when user login, but i need to apply encoding and salt when user sign up.
Reading the documentation and googling now I'm able to do that but i must create a user on database and commit it, then load data from database
 UserDetails userDetail = userDetailsService.loadUserByUsername(users.getUsername());

and input UserDetails to passwordEncoder
 String encodedPassword = passwordEncoder.encodePassword(users.getPassword(), saltSource.getSalt(userDetail));

Now if something goes wrong during password encryption i have user in database with plaintext password.
I think that this isn't desiderable.
So, there is a solution to load UserDetails without accessing to Database?
Thank you in advance
","","709","<spring-security><md5><password-protection><salt>","0","","0","2011-02-25 18:07:26","","2","","","","","2011-02-25 18:07:26",""
"10620314","Spring Security 3 + Random Salt","So I understand that you can check a password in Spring Security with salt based on a userDetail property and then hash it to compare to a hash in the database, however what if the salt used when creating each user is random (and is stored in the DB), would I need to create my own userDetails class that contains a salt property and then set that as the field spring security uses to salt with in the securityApplicationContext?
If so how would I go about writing my own userDetails class to accomplish that? Sorry still pretty new to Spring/Java.
","
Ok but then how do I tell the securityApplicationContext to use myCustomUserDetails class to store the user instead of the default userDetails class?

Like this:
<b:bean id=""customUserDetailsService"" class=""com.your.company.security.MyUserDetailsService""/>

<s:authentication-provider user-service-ref=""customUserDetailsService"" />

This goes in your security context.
Also this might help.
Writing a custom UserDetailsService.
","708","<spring-security><salt><password-encryption>","2","1","1","2012-05-17 08:10:33","10632017","5","1","","","","2012-05-16 14:07:53",""
"22492365","Salt using openssl_random_pseudo_bytes","I'm working on a basic PHP login for the very first time using a udemy online course.
I'm really struggling already as my code, which is in the tutorial, gives an error when I open the page!
All I have, saved in a file called salt.php is:
<?php

$salt = openssl_random_pseudo_bytes(1024);
var_dump($salt);

?>

Seems pretty basic, and I'm running this with WAMP. But I just get an error message instead of outputting the random characters.
Fatal error: Call to undefined function openssl_random_pseudo_bytes() in C:\wamp\www\login-register\salt.php on line 3

","","708","<php><salt>","0","","0","2014-03-18 22:26:21","","3","","","","","2014-03-18 22:26:21",""
"10486979","php converting all passwords in DB","Hi guys recently I started using 
$salt = $uniqueSalt;

$cryptpassword = md5($salt.$password);

How would I convert all password in my mysql database with this so it doesnt affect the users?
the passwords in my database atm are in plain text, I want to convert all the plain text passwords to md5 with the salt
","I recommend you read more about salts and how to use them. They should not be a constant string, but something unique to each user. For example username. Or my personal favorite: registration date (with the precision of 1 second, of course).
Also, if you store the passwords in your DB as MD5 hashes, there's no way to convert the passwords. MD5 is one way hashing, you can't obtain the original passwords in order to apply the salt and rehash. If you absolutely want to apply this, then the only way you can do this is force each user to change his password and apply the new algorithm when they do. There are 2 problems with this:

most users are not going to like this
you must keep track of which user made the change and which didn't. This is to prevent problems when logging in.

","705","<php><mysql><encryption><md5><salt>","0","3","2","2012-05-08 17:08:53","","4","","1250526","","2012-05-08 17:08:53","2012-05-07 18:15:01",""
"10486979","php converting all passwords in DB","Hi guys recently I started using 
$salt = $uniqueSalt;

$cryptpassword = md5($salt.$password);

How would I convert all password in my mysql database with this so it doesnt affect the users?
the passwords in my database atm are in plain text, I want to convert all the plain text passwords to md5 with the salt
","just like this, but you have to change your login, so you dont check for their password but for md5($salt.$password);
but as my forposters said, its not much securer and if the password isnt already plain in your database you probably wont get it as plain text if it has been hashed
","705","<php><mysql><encryption><md5><salt>","0","0","2","2012-05-08 17:08:53","","4","","1250526","","2012-05-08 17:08:53","2012-05-07 18:15:01",""
"45971800","Generating a secure cookie token to store persistently","I am trying to create a login and register page for my website. I am looking to use cookies in order to track a users session however I'm trying to implement it in the most proper and secure way. I've tried looking at tutorials and forums but most of them are outdated and use techniques that people comment are not secure. I understand tokens needs to be randomly generated and encrypted so I found one response that suggested to use a MessageDigest on UUID. But I found more articles suggesting that this may not be as secure as I think... Any suggestions on a secure way to generate cookie tokens to store in my db?
When I tried using the UUID method I got stuck on how to place it into my db since I'm having trouble finding how to turn it into a string. Here is my code...
UUID uuid = UUID.randomUUID();
MessageDigest salt = MessageDigest.getInstance(""SHA-256"");
salt.update(uuid.toString().getBytes(""UTF-8""));

","There appears to be some misconceptions about what this ""secure"" token actually means.
It can be anything, in theory. You could use a username, or an incremental id counter, or salted hash of the username, or a uuid.
The question is what are you using it for and why?
If you're using it because you just want information on how long requests are taking, a number works just fine (in theory; not saying I recommend it, more on that later). You don't lose anything major if someone fakes the id number and why would they? They don't see an actual benefit from it.
If you're using this token because it determines who a user is for permissions purposes, then obviously your goal is to make it so it can't be faked. If you want it to be faked, then you should make it truly random and unique. So you could, quite easily, just use UUID.randomUUID().toString() - This is highly unlikely to be spoofable as someone would need to know the exact nano-second precision on your machine as well as the ability to know what the state of the random number generator for the other bits of the uuid are. And that simply won't happen.
","705","<java><security><encryption><cookies><salt>","2","2","2","2017-08-31 01:30:44","","0","3","","","","2017-08-31 01:13:28",""
"45971800","Generating a secure cookie token to store persistently","I am trying to create a login and register page for my website. I am looking to use cookies in order to track a users session however I'm trying to implement it in the most proper and secure way. I've tried looking at tutorials and forums but most of them are outdated and use techniques that people comment are not secure. I understand tokens needs to be randomly generated and encrypted so I found one response that suggested to use a MessageDigest on UUID. But I found more articles suggesting that this may not be as secure as I think... Any suggestions on a secure way to generate cookie tokens to store in my db?
When I tried using the UUID method I got stuck on how to place it into my db since I'm having trouble finding how to turn it into a string. Here is my code...
UUID uuid = UUID.randomUUID();
MessageDigest salt = MessageDigest.getInstance(""SHA-256"");
salt.update(uuid.toString().getBytes(""UTF-8""));

","Your current method is, well, rather terrible.  Consider if I, an attacker, learnt that my victims UUID is some value x.  I could then simply take the SHA-256 hash of x and store this as a cookie on your website.  Tada.  I'm now impersonating my victim.
In saying that, a very secure way to produce tokens for login systems is something relatively similar.  Consider the following JSON object:
{ ""expiry"": ""1:30:00 24/10/2012"", ""userID"": ""F68D4A77DC34"" }

If we stored this JSON object as a cookie on the client-side, it would be an excellent way to determine who our user is and when this object expires and the user needs to login again.
But wait, this won't work, because anyone could change the user ID or the expiry and your server won't know!
We can solve this easily by introducing an HMAC.  An HMAC is a Hashed Message Authentication Code.  We first generate (once, ever) a random HMAC key, k, to use on the server.  This key should remain on the server and never be transmitted.
When a user logs in, we create a JSON object similar to the one above and then feed it through an HMAC (say, HMAC-SHA256) with k as the key, and then append the result of this to the JSON object as base64 encoded bytes.  It sometimes helps to use a splitting character too, say ""."".
We then end up with the following:
{ ""expiry"": ""1:30:00 24/10/2012"", ""userID"": ""F68D4A77DC34"" }.ScvlfpUDqgxtDPH4jsK44d+4cMNG+5yCvASJkVEI11o

This token would be fine to use exactly like that, but some people like to base64 encode the JSON too.  We end up with something like this in that case:
eyAiZXhwaXJ5IjogIjE6MzA6MDAgMjQvMTAvMjAxMiIsICJ1c2VySUQiOiAiRjY4RDRBNzdEQzM0IiB9.ScvlfpUDqgxtDPH4jsK44d+4cMNG+5yCvASJkVEI11o

It is easy for us to verify that this token is legitimate by taking the JSON object, performing the same operation again, and then comparing the result of the HMAC with the one that is attached to the token.  If they match, we know that our server generated the token and that it is legitimate.
","705","<java><security><encryption><cookies><salt>","2","3","2","2017-08-31 01:30:44","","0","3","","","","2017-08-31 01:13:28",""
"9742909","Symfony custom user provider / salting password","I'm using DynamoDB for my application so the doctrine ORM isn't an option for me when it comes to authentication. 
I've created a basic user provider and have it working perfectly when using a sha1 hash, however I'm completely stuck / don't understand how to get it working with salt. 
FYI: My code is based on this guide from the manual 
Code:
Once the 'new user' form has been submitted a grab the raw data and do the following then persist to the DB - this works fine:
    $salt = '79fdshjh408hjhgd87r5438ujl';
    $password = base64_encode(sha1($rawPassword.'{'.$salt.'}')); 

When authenticating I have a 'userProvider' that requests the users details based on username from the DB - this also works fine and I'm returned all the details 
//WebserviceUserProvider.php
$username = $userData['userName'];
$password = $userData['password'];
$roles[0] = 'ROLE_ADMIN';
$salt = '79fdshjh408hjhgd87r5438ujl';

return new WebserviceUser($username, $password, $salt, $roles);

the WebserviceUser file is a direct copy of the one in the docs: 
security.yml
    security:
      encoders:
        HvH\SecurityBundle\Security\WebserviceUser: 
          algorithm:   sha1
          iterations: 1
          encode_as_base64: true

If anyone could point me in the right direction, it would be much appreciated. 
Thank you
","","701","<php><authentication><symfony1><salt>","2","","0","2012-03-16 19:18:50","","4","","1062936","","2012-03-16 19:18:50","2012-03-16 18:51:08",""
"6774714","Java library for multiple different types of password encryption","I'm looking for a library (or preferably built into java) that will able to take a password and it's hash, determine what type of encryption was used and validate the password.
Essentially the java version of http://xref.dokuwiki.org/reference/dokuwiki/nav.html?inc/PassHash.class.php.html 
To be honest I've already converted most of it already but I'm not sure how to create a Salted md5 password in java (converting the hash_smd5 function) and DES encryption with a salt (converting the hash_crypt function)
Any help will be very much appreciated.
","Is this what you're trying to achieve? Given

original text (password, or salted password)
encrypted text
a list of encryption/hashing algorithm (MD5, SHA1, etc.)

Figure out which encryption algorithm produced the enrypted text? Presumably this would be achieved by applying each algorithm in turn to the original text until the output matches the encrypted text?
The DigestUtils class from Apache Commons provides a whole bunch of easy-to-use hash functions. Also Bouncy Castle provides a large number of Java implementations of encryption standards.
","698","<java><salt><password-encryption>","0","2","1","2011-07-21 10:50:08","6774860","0","1","","","","2011-07-21 10:37:44","2017-04-18 02:06:01"
"45833409","how to run a shell script on remote using salt-ssh","my web server generates a shell script with more than 100 lines of code based on complex user selections. I need to orchestrate this over several machines using salt-ssh. what I need is to copy this shell script to remote and execute it from there for all devices. how to achieve this with salt-ssh ?. I can not install minions on the remote device.
","Just as with normal minion. Write a state...
add script:
    file.managed:
    - name: file.sh
    - source: /path/to/file.sh

run script:
    cmd.run:
    - name: file.sh

...and apply it
salt-ssh 'minions*' state.apply mystate.sls
","697","<salt><salt-stack><remote-execution>","0","1","1","2017-08-23 12:53:43","","0","","7333443","","2017-08-23 08:57:25","2017-08-23 07:34:39",""
"45509708","salt-ssh : Disable SSH Host Key Checking with python api","I'm working with salt-ssh and with the command line I can use option -i to use 'StrictHostKeyChecking'
(agent) [root@NODE ~]# salt-ssh  'af0abc4b-6980d-4fdd-ba63-192cb3d116be' test.ping
af0abc4b-6980d-4fdd-ba63-192cb3d116be:
    ----------
    retcode:
        254
    stderr:
    stdout:
        The host key needs to be accepted, to auto accept run salt-ssh with the -i flag:
        The authenticity of host '10.10.10.10 (10.10.10.10)' can't be established.
        ECDSA key fingerprint is af:00:b8:ab:7a:3e:cd:06:9a:6c:36:e9:32:f0:a3:a4.
        Are you sure you want to continue connecting (yes/no)? 

(agent) [root@NODE ~]# salt-ssh -i --no-host-keys 'af0abc4b-6980d-4fdd-ba63-192cb3d116be' test.ping
af0abc4b-6980d-4fdd-ba63-192cb3d116be:
    True

but when I want to do the same thing with the python api I didn't find a way to specify the -i option so can it be done.
this is the python code I'm using
from salt.client.ssh.client import SSHClient
salt = SSHClient()
salt.cmd('af0abc4b-6980d-4fdd-ba63-192cb3d116be', 'test.ping')
Out: 
{'af0abc4b-6980d-4fdd-ba63-192cb3d116be': {'retcode': 254,
  'stderr': '',
  'stdout': ""The host key needs to be accepted, to auto accept run salt-ssh with the -i flag:\nThe authenticity of host '10.10.10.10 (10.10.10.10)' can't be established.\nECDSA key fingerprint is af:00:b8:ab:7a:3e:cd:06:9a:6c:36:e9:32:f0:a3:a4.\nAre you sure you want to continue connecting (yes/no)? ""}}

how can I do the same with the python code??
","The only solution I found is to configure StrictHostKeyChecking in $HOME/.ssh/config`.
example of $HOME/.ssh/config
Host *
    StrictHostKeyChecking no

or
Host 10.10.10.15
   StrictHostKeyChecking no

","689","<python><ssh><salt>","0","0","1","2017-08-14 14:02:08","45676331","0","1","","","","2017-08-04 14:45:38",""
"5975010","Should I store the hash function name in the DB when hashing passwords?","In regards to saving a salted hash version of the user's password, I save in the DB the hashed salted password and the salt used before hashing it.
Should I also save in the DB the name of the algorithm used to hash the salted password (e.g. SHA1 or MD5 [I am not going to use MD5!]) so in case of someone finding a breach in the algorithm I use, I could switch to use another algorithm for future users ?
Notice: I'm not talking about the algorithm used to generate the random hash.
","If you use a strong cryptographic hash function in the first place, there will probably be no reason to switch to a stronger hashing function.
There is the website keylength.com that has a summary of the most important recommendations for information security in computing. Currently, the chosen hash function should have a length of 160 bit or more – the more the better.
And if you’re looking for a versatile format, you can use the modular crypt format that does contain an identifier of the hash function, the used salt, the digest, and further information (e.g. cost factor) in the form:
$<id>$[<parameters>$]<salt><digest>

Many suggest to use bcrypt for passwords as its additional cost parameter is to adjust the computational costs of the hashing.
","684","<algorithm><hash><passwords><password-protection><salt>","2","0","3","2019-01-04 18:10:33","6011834","1","","472495","","2019-01-04 18:10:33","2011-05-12 07:58:34",""
"5975010","Should I store the hash function name in the DB when hashing passwords?","In regards to saving a salted hash version of the user's password, I save in the DB the hashed salted password and the salt used before hashing it.
Should I also save in the DB the name of the algorithm used to hash the salted password (e.g. SHA1 or MD5 [I am not going to use MD5!]) so in case of someone finding a breach in the algorithm I use, I could switch to use another algorithm for future users ?
Notice: I'm not talking about the algorithm used to generate the random hash.
","This is one of those personal preference things. In the event that a weakness in an hashing algorithm is found, you will need to alter how user passwords are stored and verified. There are multiple ways to do this and storing the name of the hash is a valid alternative. Assuming that 

You want to switch to a better hashing alternative if a weakness is found
You're not storing plaintext passwords (which if you are, you've got bigger problems)

you will either need to automatically generate new passwords for your users with the new hashing algorithm (and notify them) or have them change or verify their password on next login. The approach of storing the algorithm helps facilitate the second alternative (which I believe is the better option). 
Technically, storing the hash algorithm will not make the passwords any less secure if the database is penetrated, and it allows you greater flexibility when you wish to change algorithms. 
","684","<algorithm><hash><passwords><password-protection><salt>","2","0","3","2019-01-04 18:10:33","6011834","1","","472495","","2019-01-04 18:10:33","2011-05-12 07:58:34",""
"5975010","Should I store the hash function name in the DB when hashing passwords?","In regards to saving a salted hash version of the user's password, I save in the DB the hashed salted password and the salt used before hashing it.
Should I also save in the DB the name of the algorithm used to hash the salted password (e.g. SHA1 or MD5 [I am not going to use MD5!]) so in case of someone finding a breach in the algorithm I use, I could switch to use another algorithm for future users ?
Notice: I'm not talking about the algorithm used to generate the random hash.
","Yes, this is a good idea. It costs you very little (a few bytes per entry), and means that you can change and improve how you store passwords in future. For instance, suppose you'd started using this method with MD5 some years ago - it would now make it a trivial matter to upgrade to SHA1 or something else more secure by updating each user's password hash when they next log in.
Note you should be using something like PBKDF2 to hash your passwords, not just a salted hash.
","684","<algorithm><hash><passwords><password-protection><salt>","2","4","3","2019-01-04 18:10:33","6011834","1","","472495","","2019-01-04 18:10:33","2011-05-12 07:58:34",""
"34377619","Flask Bcrypt TypeError: initializer for ctype 'char *' must be a cdata pointer, not NoneType","Encountered this bug.  Being an amateur coder I'm really struggling to figure out what I'm doing wrong.
File ""C:\Users.virtualenvs\flask\lib\site-packages\bcrypt__init__.py"", line 63, in hashpw
retval = _bcrypt.lib.crypt_rn(password, salt, hashed, len(hashed))
TypeError: initializer for ctype 'char *' must be a cdata pointer, not NoneType
Models.py
class User(db.Model):
    __tablename__ = ""users""
    id = db.Column(db.Integer, primary_key=True)
    nickname = db.Column(db.String(64), index=True, unique=True)
    email = db.Column(db.String(120), index=True, unique=True)
    password = db.Column(db.String(100))
    posts = db.relationship('Post', backref='author', lazy='dynamic',
                            primaryjoin=""User.id==Post.user_id"")
    about_me = db.Column(db.String(140))
    last_seen = db.Column(db.DateTime)
    followed = db.relationship('User',
                                secondary=followers,
                                primaryjoin=(followers.c.follower_id == id),
                                secondaryjoin=(followers.c.followed_id == id),
                                backref=db.backref('followers', lazy='dynamic'),
                                lazy='dynamic')

    #reviews = db.relationship('Review', backref='author', lazy='dynamic') This is the review connectino for the user. 
    @hybrid_property
    def password_hash(self):
        return self.password

    @password_hash.setter
    def set_password(self, plaintext):
        self.password = bcrypt.generate_password_hash(plaintext)

    def is_correct_password(self, plaintext):
        return bcrypt.check_password_hash(self.password, plaintext)

Views.py
@app.route('/login', methods=['GET', 'POST'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(nickname=form.nickname.data).first_or_404()
        if user.is_correct_password(form.password.data):
            login_user(user)
            flash(""you've been logged in!, 'success'"")
            return redirect(url_for('index'))
        else:
            flash('your email or password doesnt match!', 'error')
            return redirect(url_for('login'))
    return render_template('login.html',
                            title='Sign In',
                            form=form)

","","681","<encryption><flask><flask-sqlalchemy><salt><bcrypt>","0","","0","2016-06-22 15:04:15","","3","","","","","2015-12-20 03:14:15",""
"45346170","Jinja2 Loops with Saltstack","I experience a issue with my jinja2 template when using for loops. I guess I'm just to dumb to get the right syntax.
{% for options in salt['pillar.get']('nexus.file.nexus.vmoptions') %}
//trying to access a yaml list (posted below)`
{% for addjavavariables in options %}
//trying to get the lists out of the options
  {{ nexus.file.nexus.vmoptions.addjavavariables[0] }}
//trying to write every single line from my list 
  {{ addjavavariables }}:
  - {{ addjavavariables }}
   {% endfor %} 
{% endfor %}

The YAML looks like this.:

nexus:     
 file:
  nexus:
    vmoptions:
      addjavavariables:
       - 'Xms1200M'
       - 'Xmx1200M'
       - 'XX:MaxDirectMemorySize=2G'
       - 'XX:+UnlockDiagnosticVMOptions'
       - 'XX:+UnsyncloadClass'
       - 'XX:+LogVMOutput'
       - 'XX:LogFile=../sonatype-work/nexus3/log/jvm.log'
       - 'Djava.net.preferIPv4Stack=true'
       - 'Dkaraf.home=.'
       - 'Dkaraf.base=.'
       - 'Dkaraf.etc=etc/karaf'
       - 'Djava.util.logging.config.file=etc/karaf/java.util.logging.properties'
       - 'Dkaraf.data=../sonatype-work/nexus3'
       - 'Djava.io.tmpdir=../sonatype-work/nexus3/tmp'
       - ""Dkaraf.s'tartLocalConsole=false""
       - 'Djava.util.prefs.userRoot=/home/nexus/.java'


Final file should looks like
-Xms1200M
-Xmx1200M
-XX:MaxDirectMemorySize=2G
-XX:+UnlockDiagnosticVMOptions
-XX:+UnsyncloadClass
-XX:+LogVMOutput
-XX:LogFile=../sonatype-work/nexus3/log/jvm.log
-Djava.net.preferIPv4Stack=true
-Dkaraf.home=.
-Dkaraf.base=.
-Dkaraf.etc=etc/karaf
-Djava.util.logging.config.file=etc/karaf/java.util.logging.properties
-Dkaraf.data=../sonatype-work/nexus3
-Djava.io.tmpdir=../sonatype-work/nexus3/tmp
-Dkaraf.s'tartLocalConsole=false
-Djava.util.prefs.userRoot=/home/nexus/.java

my problem is, that I don't get anything into the file. It also won't go into the loop at all. Can anybody give me a hint, how I can put all the items in the list with a starting dash into the file?
","The path separator for pillar.get is :, not ., so you should go with salt['pillar.get']('nexus:file:nexus:vmoptions').
But you could also simply use pillar['nexus']['file']['nexus']['vmoptions']
A weird thing is that you have 2 for loops but only 1 list to iterate over. Is there other keys in the nexus:file:nexus:vmoptions dict?
To get the required result, I would go with:
{% for addjavavariable in salt['pillar.get']('nexus:file:nexus:vmoptions:addjavavariables', []) %}
-{{ addjavavariable }}
{% endfor %}

","673","<python><templates><jinja2><salt>","0","1","1","2017-07-27 12:30:00","45349558","0","","5166677","","2017-07-27 09:39:40","2017-07-27 09:07:17",""
"21253040","How do I generate hash and salt in java and nodejs with the same database","we are using one db(mongo) for our mobile(nodejs) and desktop(java) application.
The problem is, we want to use a different login/signup rest services for both app. Right now, our signup module is implemented only in java(encryption). We create a salt using SecureRandom library of java, put in in the db then use it to generate the password hash. Then when the user logs in, we just get the user's salt(assuming it exist) and then generate again a hash password using the salt from the db then compare the generated hash password in the database.
The problem is in nodejs, I can't find any modules/libraries that will generate an exact salt like the one generated in java.
I need to hash the unencrypted password in nodejs then compare it to the hashed password in the db that was generated in java.
How do I approach this problem? Any help would be much appreciated. Thanks.
","There is no need to create exact the same salt because a salt is only created once and then stored somewhere. All others have to use this salt. So if node.js has a different salt creation (i.e. Math.random())  that is o.k., because

you create the salt normally only on one side of the river
if you create it on both sides the other one has to use it anyway

What you need is the same hashing  mechanism! This should be easy, because there are plenty implementations of various hashing algorythms in Java and node.js that are compatible to each other (i.e. md5 or sha3).
","670","<java><node.js><mongodb><hash><salt>","0","3","2","2014-01-21 09:52:08","","3","","420523","","2014-01-21 09:38:28","2014-01-21 08:41:31",""
"21253040","How do I generate hash and salt in java and nodejs with the same database","we are using one db(mongo) for our mobile(nodejs) and desktop(java) application.
The problem is, we want to use a different login/signup rest services for both app. Right now, our signup module is implemented only in java(encryption). We create a salt using SecureRandom library of java, put in in the db then use it to generate the password hash. Then when the user logs in, we just get the user's salt(assuming it exist) and then generate again a hash password using the salt from the db then compare the generated hash password in the database.
The problem is in nodejs, I can't find any modules/libraries that will generate an exact salt like the one generated in java.
I need to hash the unencrypted password in nodejs then compare it to the hashed password in the db that was generated in java.
How do I approach this problem? Any help would be much appreciated. Thanks.
","
The problem is in nodejs, I can't find any modules/libraries that will generate an exact salt like the one generated in java.

If you would find a way to generate two exactly same salts in different times then it would beat the purpose of salting because best salts are as random as possible. What you need to do is fetch the salt from the database where Java strored it and use the fetched salt to perform hashing.
","670","<java><node.js><mongodb><hash><salt>","0","2","2","2014-01-21 09:52:08","","3","","420523","","2014-01-21 09:38:28","2014-01-21 08:41:31",""
"22252105","PDO Register and Login Password Matching","Okay.. so to start off I only have Php 5.3 so I can't use bcrypt, I am not familiar with salt but an completely willing to do it if someone can help me out. I also would like to know if this script is bad or good for sql injections. My biggest problems is when I use something like crypt and try to get my passwords to match, it won't. I've been working on this for days and can't seem to find the right solution to my problem. the code is not done yet, but its able to run. I'm just doing this on wamp so i dunno if thats a problem? but i cant imagine it is.
REGISTER . PHP
            

            if ((strlen($username)) < 6 || (preg_match(""/[^\w-.]/"", $username)) ) {
                header('Location: Register.php?fail=1');
                die();
            }
            if ((strlen($password)) < 8) {
                header('Location: Register.php?fail=2');
                die();
            }
            if(!filter_var($email, FILTER_VALIDATE_EMAIL)) {
                header('Location: Register.php?fail=3');
                die();
            }

            /*
            TRIED METHODS
        $salt = mcrypt_create_iv(22, MCRYPT_DEV_URANDOM);
        $salt = base64_encode($salt);
        $salt = str_replace('+', '.', $salt);
        $hash = crypt('rasmuslerdorf', '$2y$10$'.$salt.'$');

        $password = $hash;
        echo ""<script>alert('$password');</script>"";



            $salt = '$2a$07$usesomadasdsadsadsadasdasdasdsadesillystringfors';
            $digest = crypt($password, $salt);

            if (crypt($password, $digest) == $digest){
                    echo ""<script>alert('logged in');</script>"";
            }else{
                header('Location: Login.php?fail=3');
                die();
            }


        */

        //PDO CONNECTION
        function pdo_connect() {
            try {
                $db = new PDO(""mysql:host=localhost;dbname=XXX"", ""XXX"", ""XXX"");
                return $db;
            } catch (PDOException $e) {
                //echo $e->getMessage();
                //return false;
                header('Location: Register.php?fail=6');
            }
        }

        //CHECK IF USERNAME EXISTS
        function usernameCheck($username) {
            $con = pdo_connect();
            $ustmt = $con->prepare(""SELECT u_users FROM users WHERE u_users = :name"");
            $ustmt->bindParam(':name', $username);
            $ustmt->execute();
            if($ustmt->rowCount() > 0){
                header('Location: Register.php?fail=4');
                die();
            } 
            $con = null;    
        }
        echo usernameCheck($username);

        //CHECK IF EMAIL EXISTS
        function emailCheck($email) {
            $con = pdo_connect();
            $estmt = $con->prepare(""SELECT u_email FROM users WHERE u_email = :name"");
            $estmt->bindParam(':name', $email);
            $estmt->execute();

            if($estmt->rowCount() > 0){
                header('Location: Register.php?fail=5');
                die();
            } 
            $con = null;
        }
        echo emailCheck($email);

        //INSERT EMAIL TO NEWSLETTER
        function emailnewsletterCheck($email) {
            $con = pdo_connect();
            $nstmt = $con->prepare(""SELECT n_email FROM newsletter WHERE n_email = :email"");
            $nstmt->bindParam(':email', $email);
            $nstmt->execute();

            if($nstmt->rowCount() < 1){
                $addstmt = $con->prepare('INSERT INTO newsletter (n_email) VALUES (:email)');
                $addstmt->bindParam(':email', $email);
                $addstmt->execute();
            } 
            $con = null;
        }
        echo emailnewsletterCheck($email);

        //INSERT
        function insert($username,$password,$email,$type) {  
            $con = pdo_connect();
            $password = md5($password);
            $istmt = $con->prepare('INSERT INTO users (u_users, u_private, u_email, u_type) VALUES (:username, :password, :email, :type)');
            $istmt->execute(array(
                ':username' => $username,
                ':password' => $password,
                ':email' => $email,
                ':type' => $type
                ));
            $con = null;
            header('Location: Login.php?success=1');
        }   
        echo insert($username,$password,$email,$type);

        }//end submit               
        ?>

        <?php
        $page_title = ""NS : Web Development : Register"";
        $page_desc = ""Register with us for great deals on website development."";
        $services = 0;
        include_once 'header.php';
        ?>

        <script type=""text/javascript"">
        // This function checks if the username field is at least 6 characters long.
        function checkUsernameForLength(whatYouTyped) {
            var fieldset = whatYouTyped.parentNode.parentNode.parentNode;
            var txt = whatYouTyped.value;
            if (txt.length > 5) {
                $(""span.hint"").hide();
            }
        }
        // If the password is at least 4 characters long
        function checkPassword(whatYouTyped) {
            var fieldset = whatYouTyped.parentNode.parentNode.parentNode;
            var txt = whatYouTyped.value;
            if (txt.length > 7) {
                $(""span.hint"").hide();
            }
        }
        // This function checks the email address blah@blah.blah
        function checkEmail(whatYouTyped) {
            var fieldset = whatYouTyped.parentNode.parentNode.parentNode;
            var txt = whatYouTyped.value;
            if (/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(txt)) {
                $(""span.hint"").hide();
            } 
        }
        // this part is for the form field hints to display
        // only on the condition that the text input has focus.otherwise, it stays hidden.
        function addLoadEvent(func) {
          var oldonload = window.onload;
          if (typeof window.onload != 'function') {
            window.onload = func;
          } else {
            window.onload = function() {
              oldonload();
              func();
            }
          }
        }
        function prepareInputsForHints() {
          var inputs = document.getElementsByTagName(""input"");
          for (var i=0; i<inputs.length; i++){
            inputs[i].onfocus = function () {
              this.parentNode.getElementsByTagName(""span"")[0].style.display = ""inline"";
            }
            inputs[i].onblur = function () {
              this.parentNode.getElementsByTagName(""span"")[0].style.display = ""none"";
            }
          }
        }
        addLoadEvent(prepareInputsForHints);
        </script>


        <div class=""jumbotron"">
        <div class=""container"">

        <h1>Register for <font color=""fb1576"">great</font> opportunities</h1>
        <p>Get full quotes, package <font color=""fb1576"">deals</font>, news and updates on the latest themes and scripts, and even <font color=""fb1576"">win</font> free prizes<font color=""fb1576"">!</font>

        </div>
        </div>
        <div class=""container"">

        <!-- row of columns -->
        <div class=""row"">

        <?php
        if ( isset($_GET['fail']) && $_GET['fail'] == 1 ){
            echo ""<div class='alert alert-danger'>Username must be at least 6 characters in length and can only contain characters matching (a-z) (A-Z) (0-9) and '_' Please try again. <a href='Register.php'><span class='glyphicon glyphicon-remove'></span> Close</a></div>"";
        }
        if ( isset($_GET['fail']) && $_GET['fail'] == 2 ){
            echo ""<div class='alert alert-danger'>Password must be at least 8 characters in length and cannot exceed 25.  Please try again. <a href='Register.php'><span class='glyphicon glyphicon-remove'></span> Close</a></div>"";
        }
        if ( isset($_GET['fail']) && $_GET['fail'] == 3 ){
            echo ""<div class='alert alert-danger'>E-mail is not valid. Please try again. <a href='Register.php'><span class='glyphicon glyphicon-remove'></span> Close</a></div>"";
        }
        if ( isset($_GET['fail']) && $_GET['fail'] == 4 ){
            echo ""<div class='alert alert-danger'>Username you chose already exists. Please try again. <a href='Register.php'><span class='glyphicon glyphicon-remove'></span> Close</a></div>"";
        }
        if ( isset($_GET['fail']) && $_GET['fail'] == 5 ){
            echo ""<div class='alert alert-danger'>E-mail you entered is already in use. Please try again. <a href='Register.php'><span class='glyphicon glyphicon-remove'></span> Close</a></div>"";
        }
        if ( isset($_GET['fail']) && $_GET['fail'] == 6 ){
            echo ""<div class='alert alert-danger'>Something went wrong, we couldn't submit your registration. Please try again later. <a href='Register.php'><span class='glyphicon glyphicon-remove'></span> Close</a></div>"";
        }
        ?>

        <form name=""basicform"" id=""basicform"" method=""POST"">

        <fieldset>
        <div class=""input-group"">
            <label for=""username"">Choose a Username:</label><br>
            <input type=""text"" id=""username"" name=""username"" onkeyup=""checkUsernameForLength(this);"" required class=""form-control"" maxlength=""25"" pattern="".{6,}""/>
            <span class=""hint"">Usernames must be a least 6 characters in length and cannot exceed 25. Characters must match (a-z) (A-Z) (0-9) and '_'</span>
        </div>
        </fieldset>

        <fieldset>
        <div class=""input-group"">
            <label for=""password"">Enter a password:</label><br>
            <input type=""password"" id=""password"" name=""password"" onkeyup=""checkPassword(this);"" required class=""form-control"" maxlength=""25"" pattern="".{7,}""/>
            <span class=""hint"">The password can be any combination of <strong>characters</strong>, and must be at least 8 characters in length and cannot exceed 25.</span>
        </div>
        </fieldset>

        <fieldset>
        <div class=""input-group"">
            <label for=""email"">Enter your email address:</label><br>
            <input type=""text"" id=""email"" name=""email"" onkeyup=""checkEmail(this);"" required class=""form-control"" maxlength=""30"" />
            <span class=""hint"">Please enter your real email address (ie: you@emailprovider.com)</span>
        </div>
        </fieldset>

        <fieldset>
        <label for=""type"">Pick your position of registration:</label><br>
        <select name=""type"">
        <option name=""type"" value=""Client"">I am a client looking for work to be done</option>
        <option name=""type"" value=""Employer"">I am an employer looking for a potential hire</option>
        <option name=""type"" value=""Employee"">I am an employee looking to be hired</option>
        </select>
        </fieldset>

        <fieldset>
        <button type=""submit"" class=""btn btn-primary"" name=""submit"" value=""submit"">Register Now</button>
        </fieldset>

        </form>

        </div>
        <!-- //row of columns -->
        <?php
        include_once 'footer.php';
        ?>

LOGIN . PHP
            

            $username = $_POST['username'];
            $password = $_POST['password'];

            //before we even bother connecting to the db start validating
            if ( (empty($username)) || (empty($password)) ) {
                header('Location: Login.php?fail=1');
                die();
            }
            if ( ((strlen($username)) >25) || ((strlen($password)) >25) ) {
                header('Location: Login.php?fail=2');
                die();
            }
            if ( (preg_match(""/[^\w-.]/"", $username)) ) {
                header('Location: Login.php?fail=3');
                die();
            }

            /*

            TRIED METHODS
        $salt = mcrypt_create_iv(22, MCRYPT_DEV_URANDOM);
        $salt = base64_encode($salt);
        $salt = str_replace('+', '.', $salt);
        $hash = crypt('rasmuslerdorf', '$2y$10$'.$salt.'$');

        $password = $hash;
        echo ""<script>alert('$password');</script>"";



            $salt = '$2a$07$usesomadasdsadsadsadasdasdasdsadesillystringfors';
            $digest = crypt($password, $salt);

            if (crypt($password, $digest) == $digest){
                    echo ""<script>alert('logged in');</script>"";
            }else{
                header('Location: Login.php?fail=3');
                die();
            }


        */


        //PDO CONNECTION
        function pdo_connect() {
            try {
                $db = new PDO(""mysql:host=localhost;dbname=XXX"", ""XXX"", ""XXX"");
                return $db;
            } catch (PDOException $e) {
                //echo $e->getMessage();
                //return false;
                header('Location: Register.php?fail=6');
            }
        }

        //CHECK IF USERNAME EXISTS
        function checkLogin($username,$password) {
            $con = pdo_connect();
                //$getlogin = $con->query
                $getlogin = $con->prepare(""SELECT u_users,u_private FROM users WHERE u_users = :username AND u_private = :password"");
                $getlogin->bindValue(':username', $username, PDO::PARAM_STR);
                $getlogin->bindValue(':password', $password, PDO::PARAM_STR);
                $getlogin->execute();

            if($getlogin->rowCount() > 0){
            echo ""<script>alert('yes');</script>"";
            } 
            $con = null;    
        }
        echo checkLogin($username,$password);
        echo ""<script>alert('success');</script>"";
        }


        ?>

        <?php
        $page_title = ""NS : Web Development : Register"";
        $page_desc = ""Register with us for great deals on website development."";
        $services = 0;
        include_once 'header.php';
        ?>

        <div class=""jumbotron"">
        <div class=""container"">

        <h1><font color=""fb1576"">Members</font> log in</h1>
        <p> Not yet a member? <a href=""Register.php""><font color=""fb1576"">Sign up today!</font></a>

        </div>
        </div>
        <div class=""container"">


        <?php
        if ( isset($_GET['success']) && $_GET['success'] == 1 ){
            echo ""<div class='alert alert-success'>Registration successful. Please log in.</div>"";
        }
        if ( isset($_GET['fail']) && $_GET['fail'] == 1 ){
            echo ""<div class='alert alert-danger'>Username or Password cannot be left blank.</div>"";
        }
        if ( isset($_GET['fail']) && $_GET['fail'] == 2 ){
            echo ""<div class='alert alert-danger'>Sorry, this is not a valid Username or Password.</div>"";
        }
        if ( isset($_GET['fail']) && $_GET['fail'] == 3 ){
            echo ""<div class='alert alert-danger'>Username or Password incorrect, please try again.</div>"";
        }
        if ( isset($_GET['fail']) && $_GET['fail'] == 5 ){
            echo ""<div class='alert alert-danger'>E-mail you entered is already in use. Please try again. <a href='Register.php'><span class='glyphicon glyphicon-remove'></span> Close</a></div>"";
        }
        if ( isset($_GET['fail']) && $_GET['fail'] == 6 ){
            echo ""<div class='alert alert-danger'>Something went wrong. Please try again later. </div>"";
        }
        ?>

        <form class=""form-signin"" role=""form"" method=""POST"">
        <h2 class=""form-signin-heading"">Please sign in</h2>

        <p>
        <input type=""text"" class=""form-control"" placeholder=""Username"" name=""username"" required autofocus>
        </p>
        <br>
        <p>
        <input type=""password"" class=""form-control"" placeholder=""Password"" name=""password"" required>
        </p>

        <label class=""checkbox"">
        <input type=""checkbox"" value=""remember-me""> Remember me
        </label>

        <button class=""btn btn-lg btn-primary btn-block"" type=""submit"" name=""submit"" value=""submit"">Sign in</button>

        </form>



        <?php
        include_once 'footer.php';
        ?>

I REALLLLLYY need to get it so it is secure for my server on launch and can login a user safely.
","With PHP version 5.3 you can and should use BCrypt.
For PHP version 5.5 and higher it is recommended to use the new password functions password_hash() and password_verify():
// Hash a new password for storing in the database.
// The function automatically generates a cryptographically safe salt.
$hashToStoreInDb = password_hash($password, PASSWORD_BCRYPT);

// Check if the hash of the entered login password, matches the stored hash.
// The salt and the cost factor will be extracted from $existingHashFromDb.
$isPasswordCorrect = password_verify($password, $existingHashFromDb);

For PHP version 5.3.7 and higher there exists a compatibility pack, so you can use the functions above in exactly the same way.
For PHP versions earlier than 5.3.7 you could use the compatibility pack and change the crypt parameter from ""$2y$%02d$"" to ""$2a$%02d$"", this generates a BCrypt hash as well. It is the best you can do with older versions, the hashes will be compatible when you update to a newer PHP version.

When you want to verify the password, you cannot do this in the SQL statement directly. In a first step you have to get the stored password-hash from the database (with the username), then you can use this hash in the function password_verify(). The password_verify() function needs to extract the salt from the stored hash.
","665","<php><login><passwords><salt><crypt>","0","0","1","2014-03-07 20:57:36","","2","","","","","2014-03-07 13:58:15",""
"30300928","Failed to create Javascript analog of Java method for password hashing using SHA-256 and salt","I've been strugling for a while now by trying to complete next goal : 
I have a ""Reset password"" page that supposed to send new password to the server. I would like to hash it with salt, so I could save it in DB eventually. On Server side I have next methods that creates password hash : 
public static String makeHash(String password, String salt) {
    try {
        MessageDigest md = MessageDigest.getInstance(""SHA-256"");
        md.update(password.getBytes(""UTF-8""));

        byte byteData[] = md.digest(makeHash(salt.toLowerCase()));

        return Base64.getEncoder().encodeToString(byteData);
    } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {
        log.error(""Unable to make hash for pass. No hashing."", e);
    }

    return password;
}

private static byte[] makeHash(String val) throws NoSuchAlgorithmException, UnsupportedEncodingException {
    return MessageDigest.getInstance(""SHA-256"").digest(val.getBytes(""UTF-8""));
}

I tried several Javascript libraries - crypto, crypto-js, SJCL , but couldn't manage to create same password as Java methods generates. For example, last working try out was : 
var crypto = require('crypto');
crypto.pbkdf2('123', 'test@gmail.com', 1000, 60, 'sha256', function(err, key) {
  if (err)
    throw err;
  console.log(key.toString('Base64'));  // 'c5e478d...1469e50'
});

And it generated me this hash - Qr2lzotlRWj7BeJeFooMRj64auMPTb3PRhwLmfNcl4DCVAlFFibgOqZiyExZNO5i/icAUYoMjy73jSTd, while Java gives me - /pyQf3JCj5XoczfsYJ4LUb+y0DONGMl/AFzLiBTo8LA=. 
I cannot change backend, since it running already for some time, so I was hoping that maybe someone could help me out with this. 
","You have to use the same algorithm on both sides. In Java you're using simply SHA-256 and in node you're using PBKDF2 with SHA-256. 
Node.js' crypto module provides the createHash(algorithm) function. Where you can specify SHA-256 directly. PBKDF2 is an algorithm that only uses different hashing functions under the hood. 
If you want hash passwords, then it is much safer to use PBKDF2 with a lot of iterations (> 86,000) and a random salt that you store alongside the password hash.
Java has support for PBKDF2 in its standard library.
If you really want to use SHA-256 directly and I strongly advise against it, you can use the following code:
var crypto = require('crypto');
var key = ""123"";
var salt = ""test@gmail.com"";

key = crypto.createHash('sha256')
        .update(key, ""utf8"")
        .update(makeHash(salt))
        .digest(""base64"");

console.log(key);

function makeHash(val) {
    return crypto.createHash('sha256').update(val, ""utf8"").digest();
}

Output: 
/pyQf3JCj5XoczfsYJ4LUb+y0DONGMl/AFzLiBTo8LA=

Note that Hash.digest() takes an optional output encoding and not additional data.
","663","<java><javascript><node.js><salt><pbkdf2>","0","3","1","2015-05-18 11:35:10","30301119","0","3","1816580","","2015-05-18 10:38:13","2015-05-18 10:35:25",""
"37366204","SQL update HashBytes SHA2_512 passwords to HashBytes SHA2_512 SALT","I am currently updating a web site to authenticate from a HashBytes SHA2_512 SALT combination password.
My problem is that once I do this all my current users will no longer be able to login with their existing HashBytes SHA2_512 password.
Is there a way to decrypt(update) via SQL the current HashBytes SHA2_512 password with a HashBytes SHA2_512 SALT combination password.
Here's is an example of my select to verify.
//current which will no longer work once i have updated the page 

SELECT intcustomerid, strUserName, strUserPassword
FROM dbo.tblLoginControl WHERE strUserName = 'Dave' AND strUserPassword =HashBytes('SHA2_512', 'Rice205H*!')


//new one once I have update the page

SELECT [AccountName], [AccountPwd]
FROM [dbo].[SecurityAccounts] WHERE [AccountName]= 'Dave' AND [AccountPwd] =HashBytes('SHA2_512',  [Salt] +  'Rice205H*!')

So I need to take the existing password and update with Salt. 
I'm not sure if this can be done and the only workaround would be to email my users and ask them to request a new password from the site?
Thanks.
","There's no way to ""decrypt"" a hashed password. Why don't you add a column (bit) where you store if the password is encrypted with salt or not.
Then it's just another conditon like:
AND ((isSalted = false 
      AND strUserPassword =HashBytes('SHA2_512', 'Rice205H*!'))
    or [AccountPwd] =HashBytes('SHA2_512',  [Salt] +  'Rice205H*!'))

","660","<sql><encryption><salt><sha2>","1","1","1","2016-05-21 17:58:26","","4","","","","","2016-05-21 17:42:40","2016-05-21 20:40:41"
"15869348","Behavior of PHP's password_hash()","I have been looking into the best way to encrypt passwords for use with my panel, I decided to go ahead and use BCRYPT, simply due to the cost of each encryption and the fact that it is generally regarded as one of the best available at the current time.
I am using two-way salts, so a unique salt that each user has, and then obviously the salt stored within my application, I noticed some rather strange behavior.. and according to the PHP Documentation this behavior is normal?
Anyway, here is the code I use:
$Crypto = new Crypto;
echo $Crypto->encrypt( ""123456789abcdefghijklm"", ""StackOverflow_Is_Awesome!"" ); // First parameter being the ""User Salt"", second being the password.

// Above outputs $2y$13$123456789abcdefghijkleepFY8JLvsf2YbnWolqQyO3DIzrCeNIu

And now, the Crypto class:
<?php
// ASSUMING $this->hashingSalt = HBSNi3y7ruhbVGkhdg83ijdbvghiojkgudL;JP
class Crypto {

private $hashingSalt, $database;

public function __construct( $salt )
{
    $this->hashingSalt = $salt;
    $this->database = new DatabaseFunctions();
}

public function encrypt( $salt, $password )
{
    $options = array(
        'cost' => 13,
        'salt' => $salt //22 chars
    );

    return password_hash( $password . $this->hashingSalt, PASSWORD_BCRYPT, $options);
}
}

So, my interest is, why on earth is this function simply adding the salt set within the options to the start of the outputted string? It really is baffling... because that isn't exactly what I would call secure, rather defeats the object to me.
Can anyone advise, try and explain what I am completely looking past?  Thanks
PHP Doc: http://php.net/manual/en/function.password-hash.php
","The salt is there to prevent the possibility of making a pre-computed table with hashes and it is not meant to stay safe once ""the bad guys"" get their hands on the hashes.
Also what you are doing:

and then obviously the salt stored within my application

is called a pepper (and is really not that obvious to do) and AFAIK it hasn't been proven to be more secure. For more information read this blogpost (also by the author of the password API): http://blog.ircmaxell.com/2012/04/properly-salting-passwords-case-against.html
Also note that your method called encrypt is not encrypting anything. Encryption is two way. What you are doing is called hashing: https://stackoverflow.com/a/4948393/508666
","643","<php><passwords><salt><bcrypt>","3","4","1","2013-04-08 00:19:51","15869382","0","1","","","","2013-04-08 00:05:31",""
"9256389","Beginner PHP learner trying to use Salt encryption","I'm trying to put together a PHP login script and have noticed that storing my database paswords in plain text form is not secure. Is my connect.php file secure? How would I use a salt encryption into my connect.php file below?
Thanks and sorry for a basic question, I am still very new to PHP.
<?php

if(!defined('INCLUDE_CHECK')) die('You are not allowed to execute this file directly');


/* Database config */

$db_host        = 'localhost';
$db_user        = 'randomuser';
$db_pass        = '123456';
$db_database    = 'randomdatabase'; 

/* End config */



$link = mysql_connect($db_host,$db_user,$db_pass) or die('Unable to establish a DB    connection');

mysql_select_db($db_database,$link);
mysql_query(""SET names UTF8"");

?>

","
Is my connect.php file secure? 

To some extent - yes.

How would I use a salt encryption into my connect.php file below?

You can't use whatever ""salt encryption"" with your connect.php. Just leave it as is. 
","639","<php><salt>","1","2","5","2016-09-16 16:49:53","","2","","","","","2012-02-13 06:27:51",""
"9256389","Beginner PHP learner trying to use Salt encryption","I'm trying to put together a PHP login script and have noticed that storing my database paswords in plain text form is not secure. Is my connect.php file secure? How would I use a salt encryption into my connect.php file below?
Thanks and sorry for a basic question, I am still very new to PHP.
<?php

if(!defined('INCLUDE_CHECK')) die('You are not allowed to execute this file directly');


/* Database config */

$db_host        = 'localhost';
$db_user        = 'randomuser';
$db_pass        = '123456';
$db_database    = 'randomdatabase'; 

/* End config */



$link = mysql_connect($db_host,$db_user,$db_pass) or die('Unable to establish a DB    connection');

mysql_select_db($db_database,$link);
mysql_query(""SET names UTF8"");

?>

","First I recommend studying a few articles about encryption, hashing and salting, to get a general feel on what it does and what it doesn't do.
Wikipedia doesn't know it all, but the articles are there cover the most relevant parts.

http://en.wikipedia.org/wiki/Encryption 
http://en.wikipedia.org/wiki/Cryptographic_hash_function
http://en.wikipedia.org/wiki/Salt_(cryptography)

Passwords for php scripts are usually not encrypted. Best practise is to store it in a separate configuration file (p.e. config.php). This way its up to your system administrators to secure this. This doesn't only help your security, such an external configuration file makes it easier to port an application. Most major php applications, from forum engines, CMS, calendars or whatever, use this kind of architecture.
","639","<php><salt>","1","0","5","2016-09-16 16:49:53","","2","","","","","2012-02-13 06:27:51",""
"9256389","Beginner PHP learner trying to use Salt encryption","I'm trying to put together a PHP login script and have noticed that storing my database paswords in plain text form is not secure. Is my connect.php file secure? How would I use a salt encryption into my connect.php file below?
Thanks and sorry for a basic question, I am still very new to PHP.
<?php

if(!defined('INCLUDE_CHECK')) die('You are not allowed to execute this file directly');


/* Database config */

$db_host        = 'localhost';
$db_user        = 'randomuser';
$db_pass        = '123456';
$db_database    = 'randomdatabase'; 

/* End config */



$link = mysql_connect($db_host,$db_user,$db_pass) or die('Unable to establish a DB    connection');

mysql_select_db($db_database,$link);
mysql_query(""SET names UTF8"");

?>

","It's secure.
It depends on your hosting provider and it's setting.
For secure projects I recommend using at least VDS.
","639","<php><salt>","1","0","5","2016-09-16 16:49:53","","2","","","","","2012-02-13 06:27:51",""
"9256389","Beginner PHP learner trying to use Salt encryption","I'm trying to put together a PHP login script and have noticed that storing my database paswords in plain text form is not secure. Is my connect.php file secure? How would I use a salt encryption into my connect.php file below?
Thanks and sorry for a basic question, I am still very new to PHP.
<?php

if(!defined('INCLUDE_CHECK')) die('You are not allowed to execute this file directly');


/* Database config */

$db_host        = 'localhost';
$db_user        = 'randomuser';
$db_pass        = '123456';
$db_database    = 'randomdatabase'; 

/* End config */



$link = mysql_connect($db_host,$db_user,$db_pass) or die('Unable to establish a DB    connection');

mysql_select_db($db_database,$link);
mysql_query(""SET names UTF8"");

?>

","Maybe an additional answer. Yes, as far as I know, there's no other way to store database connection credentials than storing it in plaintext. 
Maybe you can encrypt your credentials using an encryption scheme, but if the attacker have access to your files (and your encryption scheme), they can decrypt your encrypted credentials easily.
Your connect.php is secure as long as you keep it secured. Some suggestions:

Put your connect.php outside webserver's root directory (you still can include it from any other script) to prevent access from HTTP 
Keep it php, don't rename the file to any other extension that will served by the webserver as a viewable text file
If you want, you can protect your connect.php with some .htaccess rules

","639","<php><salt>","1","0","5","2016-09-16 16:49:53","","2","","","","","2012-02-13 06:27:51",""
"9256389","Beginner PHP learner trying to use Salt encryption","I'm trying to put together a PHP login script and have noticed that storing my database paswords in plain text form is not secure. Is my connect.php file secure? How would I use a salt encryption into my connect.php file below?
Thanks and sorry for a basic question, I am still very new to PHP.
<?php

if(!defined('INCLUDE_CHECK')) die('You are not allowed to execute this file directly');


/* Database config */

$db_host        = 'localhost';
$db_user        = 'randomuser';
$db_pass        = '123456';
$db_database    = 'randomdatabase'; 

/* End config */



$link = mysql_connect($db_host,$db_user,$db_pass) or die('Unable to establish a DB    connection');

mysql_select_db($db_database,$link);
mysql_query(""SET names UTF8"");

?>

","
Is my connect.php file secure?

You may want to encrypt your connect.php with ioncube... http://www.ioncube.com/ ...for what it can still protect.  
I like to add stuff like this in my .htaccess : 
<files connect.php>
order allow,deny
deny from all
</files>

","639","<php><salt>","1","0","5","2016-09-16 16:49:53","","2","","","","","2012-02-13 06:27:51",""
"51052632","Bcrypt Hash Returns TypeError(""Unicode-objects must be encoded before hashing"") and Invalid Salt","I've looked at all the StackOverflow questions related to this but I just cannot seem to figure this out. When I hash a password, and check it against itself, it returns the TypeError ""Unicode-objects must be encoded before hashing"" with the current code:
from scripts import tabledef
from flask import session
from sqlalchemy.orm import sessionmaker
from contextlib import contextmanager
import bcrypt

(Unrelated Python code...)

def hash_password(password):
     return bcrypt.hashpw(password.encode('utf8'), bcrypt.gensalt())


def credentials_valid(username, password):
    with session_scope() as s:
        user = s.query(tabledef.User).filter(
            tabledef.User.username.in_([username])).first()
        if user:

            return bcrypt.checkpw(password.encode('utf8'), user.password)
        else:
            return False

When I try and fix this error by setting user.password= user.password.encode('utf8'), I get ""Invalid Salt"". 
What is wrong with this code? 
UPDATE: 
I am storing the passwords through Flask input from the user:
import json
import sys
import os
import plotly
import pandas as pd
import numpy as np
import plotly.graph_objs as go


from scripts import tabledef
from scripts import forms
from scripts import helpers
from flask import Flask, redirect, url_for, render_template, request, session, flash, Markup
from flask_socketio import SocketIO, emit

@app.route('/', methods=['GET', 'POST'])
def login():
    if not session.get('logged_in'):
        form = forms.LoginForm(request.form)
        if request.method == 'POST':
            username = request.form['username'].lower()
            password = request.form['password']
            if form.validate():
                if helpers.credentials_valid(username, password):
                    session['logged_in'] = True
                    session['username'] = username
                    session['email'] = request.form['email']
                    session['password'] = request.form['password']
                    return json.dumps({'status': 'Login successful'})
                return json.dumps({'status': 'Invalid user/pass'})
            return json.dumps({'status': 'Both fields required'})
        return render_template('login.html', form=form)
    user = helpers.get_user()
    return render_template('home.html', user=user)

@app.route('/signup', methods=['GET', 'POST'])
def signup():
    if not session.get('logged_in'):
        form = forms.LoginForm(request.form)
        if request.method == 'POST':
            username = request.form['username'].lower()
            password = helpers.hash_password(request.form['password'])
            email = request.form['email']
            if form.validate():
                if not helpers.username_taken(username):
                    helpers.add_user(username, password, email)
                    session['logged_in'] = True
                    session['username'] = username
                    session['email'] = request.form['email']
                    session['password'] = request.form['password']
                    return json.dumps({'status': 'Signup successful'})
                return json.dumps({'status': 'Username taken'})
            return json.dumps({'status': 'User/Pass required'})
        return render_template('login.html', form=form)
    return redirect(url_for('login'))

This is the error I get:
/lib/python3.5/site-packages/flask/app.py"", line 1718, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File ""/home/suraj/Documents/Programming/current-projects/GW_Dining_Tracker/env/lib/python3.5/site-packages/flask/_compat.py"", line 35, in reraise
    raise value
  File ""/home/suraj/Documents/Programming/current-projects/GW_Dining_Tracker/env/lib/python3.5/site-packages/flask/app.py"", line 1813, in full_dispatch_request
    rv = self.dispatch_request()
  File ""/home/suraj/Documents/Programming/current-projects/GW_Dining_Tracker/env/lib/python3.5/site-packages/flask/app.py"", line 1799, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File ""/home/suraj/Documents/Programming/current-projects/GW_Dining_Tracker/Flaskex-master/app.py"", line 34, in login
    if helpers.credentials_valid(username, password):
  File ""/home/suraj/Documents/Programming/current-projects/GW_Dining_Tracker/Flaskex-master/scripts/helpers.py"", line 64, in credentials_valid
    return bcrypt.checkpw(password.encode('utf8'), user.password)
  File ""/home/suraj/Documents/Programming/current-projects/GW_Dining_Tracker/env/lib/python3.5/site-packages/bcrypt/__init__.py"", line 101, in checkpw
    raise TypeError(""Unicode-objects must be encoded before checking"")
TypeError: Unicode-objects must be encoded before checking

","The problem is that you're taking the value from a SQLAlchemy String column and passing it to bcrypt.checkpw. String is intended for Unicode strings, it provides values as str. But bcrypt only works on byte strings, so it expects a bytes. That's what the TypeError that says ""Unicode-objects must be encoded before hashing"" is telling you.
Depending on what database backend and DB-API library you're using (and, for some backends, on how your database is configured), when you save a bytes value s to a String column, it might save s.decode(), in which case you could just use user.password.encode() to get the same bytes back—but it might not. For example, it could also just save, say, str(s). In which case, if the hash were the bytes value b'abcd', the column value would be the string ""b'abcd'"", so and calling encode on that gets you b""b'abcd'"", not b'abcd'.
The cleanest way to handle this is to use a Binary column1—or, maybe better, Binary(60)2—to store your hashes, instead of a String column. Any DB-API that supports Binary will just store a bytes as-is, and return it as a bytes, which is exactly what you want.

1. Binary is an optional type. If it isn't present for your DB-ABI, the same type may be available as BINARY. If not, look through the list of types and try other types that inherit from _Binary. The ones without ""large"" in their name or acronym will probably be more efficient, but otherwise any of them should work.
2. With the default settings, bcrypt printable digests will always be exactly 60 bytes. Databases can generally store fixed-width fields like BINARY(60) more compactly, and search them more quickly than variable-width fields like VARBINARY. Just using plain BINARY may be fine, but it may also work like VARBINARY, or it may waste space and work like BINARY(255), etc.
","632","<python><flask><bcrypt><salt>","1","1","1","2018-06-27 03:19:15","51054047","10","","2774482","","2018-06-27 00:02:17","2018-06-26 23:26:02",""
"13805130","In Spring Security, how does a random salt get properly generated during password comparison?","I'm using Spring security 3.1.1.RELEASE.  I'm using the StandardPasswordEncoder.encode(password) function to encrypt my user passwords, which relies on a random salt being generated.  From the Spring security source, ultimately this method gets called from ""org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator"" for the salt generation …
public byte[] generateKey() {
    byte[] bytes = new byte[keyLength];
    random.nextBytes(bytes);
    return bytes;
}

My question is, when a password is entered from a login page, how does the same salt used for an encoded-password comparison get generated?  It seems like the above is random so I would figure a new random salt is created when a comparison is done.
","No. If you configured Spring Security for salted hashed passwords, then upon comparision, there is a call for user data lookup. Once user record is found by username, then the salt is extracted from password field, and used to calculate hash of password from page from. And then hashes get compared. 
","623","<spring><security><salt><password-encryption>","2","1","2","2012-12-11 12:45:44","13820528","0","","","","","2012-12-10 16:35:56",""
"13805130","In Spring Security, how does a random salt get properly generated during password comparison?","I'm using Spring security 3.1.1.RELEASE.  I'm using the StandardPasswordEncoder.encode(password) function to encrypt my user passwords, which relies on a random salt being generated.  From the Spring security source, ultimately this method gets called from ""org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator"" for the salt generation …
public byte[] generateKey() {
    byte[] bytes = new byte[keyLength];
    random.nextBytes(bytes);
    return bytes;
}

My question is, when a password is entered from a login page, how does the same salt used for an encoded-password comparison get generated?  It seems like the above is random so I would figure a new random salt is created when a comparison is done.
","The salt gets saved in the database along with the hashed password,
when the user logs in again, the salt is extracted from the database, hashed with the password, and compared with the password hash in the database. If they match, the password was correct.
Salt values just make people with the same password not stand out in the database because the salt key changes the hash. It also makes it harder to brute force the hash as the key also makes the password longer. If the hashed password is found trough brute-force, the key must still be removed from that hash in order to know the real password, making it harder to reverse engineer the password from the hash.
","623","<spring><security><salt><password-encryption>","2","1","2","2012-12-11 12:45:44","13820528","0","","","","","2012-12-10 16:35:56",""
"30269487","How to handle ASP.NET Identity records in node.js?","I want to move from ASP.NET MVC Identity to node.js. I have the following field in my database:

PasswordHash:
  AOCB5TrZGusq9ZUdYd/w/u7GUZTPOMG7JhFd4JgS0gLOulL8QjZRbl4T6sPXwD3lfQ==

The password is asdfgak.
I have no idea how to use this PasswordHash and how to get the hash and salt from it to login users from node.js.
I saw this answer but it didn't help at all, the output from this was the following:

A+w9Dyfupc+dMkViA0eYF4ol7HhdIfVPct6o47a+n5M=

Here is the code that I have in my MVC project, if that helps:
public class ApplicationUser : IdentityUser
{
    public async Task<ClaimsIdentity> GenerateUserIdentityAsync(UserManager<ApplicationUser> manager)
    {
        var userIdentity = await manager.CreateIdentityAsync(this, DefaultAuthenticationTypes.ApplicationCookie);
        // Add custom user claims here
        return userIdentity;
    }

    // my custom fields like username, gender...
}

public class ApplicationDbContext : IdentityDbContext<ApplicationUser>
{
    public ApplicationDbContext()
        : base(""Personal"", throwIfV1Schema: false)
    {
    }

    public static ApplicationDbContext Create()
    {
        return new ApplicationDbContext();
    }
}

","Ok,  I found this module where you can even choose between sync & async, it's awesome:
https://www.npmjs.com/package/aspnet-identity-pw
","623","<asp.net-mvc><node.js><hash><salt>","3","2","1","2015-05-18 19:04:21","30310919","0","","-1","","2017-05-23 12:06:00","2015-05-15 22:09:33",""
"13603437","Hash algorithm with 2048 bits and salt","How to implement an algorithm for storing and comparing hashes in 2048bits for passwords with random salt for each password with PHP?

EDIT 1:
I guess I was not clear enough in my question. What I mean is that I will not make my encryption algorithm. But how could store a password and salt. Being the random salt for each password. Well, it would not be sensible to store the salt along with the password in the database.

EDIT 2:
That would be a good approach?
1) user enters their password,
2) system generates a hash of the password,
3) system generates a password for this salt (I use time ()?)
Being the random salt, how and where could store the salt to the password? Please, I would not want to store the salt along with the password, because I think this is not so sure.
So after the stored password and the salt of the same when the user logs in, I get the password hashes stored along with the salt and compare it to the hash of the password supplied with the salt saved.
Where to save the salt?
This would be a good approach to do this?
","
""Well, it would not be sensible to store the salt along with the password in the database.""
""Because if my database is compromised and someone has access to this data, it will have the salt for each password with each password. And that is not correct. Well I think I just would not make sense to use a salt and give it to brute force along with the password. Because it would be correct?""

These core assumptions are wrong. The point of a salt is to add a unique element to each password so two identical passwords won't hash to the same hash value. The salt is not secret. I repeat: the salt is not secret. The secret is the password, the salt just adds the uniqueness. An attacker will have to brute-force a password by trying every possible combination of characters and comparing the result to the hash value. If he also knows the salt, he will still have to do exactly that.
If the attacker successfully brute-forced the password ""foobar"" without salt, he has brute-forced every password ""foobar"". If you add a unique salt and the attacker successfully brute-forced the password ""foobar"" + salt, he has only brute-forced that one password. He'll have to attack every other password ""foobar"" separately, since they all hash to a different value, thanks to the unique salt.
That is the point of a salt. Yes, it would be even better if you could keep the salt secret as well, since then the attacker would have to essentially brute-force a value many times longer. But that's infeasible, since you need access to the salt to confirm the password as well. If you need to have access to the hash and salt, then an attacker who has access to the hash likely also has the same access to the salt. It also does not detract from the security if the attacker has access to the salt.
","622","<php><security><hash><salt>","0","5","1","2013-09-03 22:48:23","13604327","11","","590852","","2013-09-03 22:48:23","2012-11-28 10:57:55","2013-09-04 01:18:42"
"31854153","How to get Key=>Value in Salt","in pilars i have
...
opt:
  miimon: 100
  updelay: 0
  downdelay: 0
  mode: 802.3ad
...

And i want dynamically change this in sls file
{% for device, args in pillar['machine_id'][grains['machine_id']]['network'].items() %}
{{device}}:
...
    {% if args['type'] == 'bond' %}
        {% if 'opt' in args %}
    - miimon: {{args['opt']['miimon']}}
    - updelay: {{args['opt']['downdelay']}}
    - downdelay: {{args['opt']['downdelay']}}
    - mode: {{args['opt']['mode']}}
        {% endif %}
    {% endif %}
...
{% endfor %}

Here what i'm search completed on php
foreach ($arr as $key => $value) {
    echo ""Key: $key; Value: $value<br />\n"";
}

","I found solution.
{% if args['type'] == 'bond' %}
  {% if 'opt' in args %}
    {% for key, value in args['opt'].iteritems() %}
- {{ key }}: {{ value }}
    {% endfor %}
  {% endif %}
{% endif %}

","621","<foreach><yaml><key-value><salt>","0","0","1","2015-08-06 14:47:23","","0","","","","","2015-08-06 11:07:54",""
"20846643","Is the time complexity to crack a hash of a salted password greater than the time complexity to crack a hash of an unsalted password?","Assuming someone is trying to crack a leaked password through brute force (i.e., not using  rainbow tables or commonly used password lists), is the following true?
O(cracking_salted_password) > O(cracking_just_password)?
If an attacker has managed to get access to my user database, they obviously also have the salt used when hashing my users' passwords, even though it's completely unique for each user. I would like to know if the time complexity also plays a role when someone is trying to crack a salted password through brute force.
","Since salting really only creates a certain number of different values that a particular plaintext hashes to (i.e. instead of the password ""password"" hashing to value X1, with, for example, a 16-bit salt, there are 65536 different possible values that it can hash to), the effect of salting is really only to change the constant multiplicative factor in the equation. In other words, if your hash algorithm is O(n^2), then salting the input makes it k * O(n^2), which is really just the same as O(n^2). Yes, it will take more time to match the hash of a particular password, by a factor of up to however big your salt is, but it really doesn't change the O() complexity measure. The complexity measure isn't about how long it takes to perform a certain problem; it's about how much longer it takes to solve a problem of twice the size compared to the original problem.
","621","<encryption><passwords><time-complexity><salt>","0","1","3","2013-12-30 21:33:03","20847181","3","","","","","2013-12-30 20:04:17",""
"20846643","Is the time complexity to crack a hash of a salted password greater than the time complexity to crack a hash of an unsalted password?","Assuming someone is trying to crack a leaked password through brute force (i.e., not using  rainbow tables or commonly used password lists), is the following true?
O(cracking_salted_password) > O(cracking_just_password)?
If an attacker has managed to get access to my user database, they obviously also have the salt used when hashing my users' passwords, even though it's completely unique for each user. I would like to know if the time complexity also plays a role when someone is trying to crack a salted password through brute force.
","If there is a database with dozens of passwords as hashes and an attack by hashing a (large) set of possible values that make these hashes then the work can be applied to multiple hashes at a time
However, if the passwords are salted then each one is unique and the work needs to be repeated for each one
","621","<encryption><passwords><time-complexity><salt>","0","0","3","2013-12-30 21:33:03","20847181","3","","","","","2013-12-30 20:04:17",""
"20846643","Is the time complexity to crack a hash of a salted password greater than the time complexity to crack a hash of an unsalted password?","Assuming someone is trying to crack a leaked password through brute force (i.e., not using  rainbow tables or commonly used password lists), is the following true?
O(cracking_salted_password) > O(cracking_just_password)?
If an attacker has managed to get access to my user database, they obviously also have the salt used when hashing my users' passwords, even though it's completely unique for each user. I would like to know if the time complexity also plays a role when someone is trying to crack a salted password through brute force.
","
I would like to know if the time complexity plays a role when someone is trying to crack a salted password through brute force.

No, the time complexity for a single password is not greatly increased  by a salt. The salt does add a tiny constant amount to the encryption time, but not enough to cause problems.
That doesn't mean salting is useless. There are two important reasons for salting:
1) Users with the same password will look different. If an attacker sees that several users have the same password, he/she will assume that the password is not random, and attack that password first.
2) It makes Rainbow Tables impractical.
Before, you just needed one lookup table for all your password guesses. You could pre-compute that offline (and even re-use it between some systems!).
But when you add a salt, the attacker needs one Rainbow table per user. That makes the Rainbow Tables exponentially bigger, and can even make it quicker to use brute force rather than use Rainbow Tables!
So the salt may not help if you only have one user, but as you get more users, the salt is essential. It's better to always have the salt, since small systems often turn into big ones.
","621","<encryption><passwords><time-complexity><salt>","0","4","3","2013-12-30 21:33:03","20847181","3","","","","","2013-12-30 20:04:17",""
"52038723","Apache Shiro And JWT Implementation Problems When Using Different Secret Per User","I am working on a application where I have implemented a java Restful Backend Sercvice with Apache Shiro authentication. I can now get a user to register and log in successfully using password and salt backed by my database. Now i want to improve on this by adding JWT authentication.
The scenario would be:

The user tries to login in using username and password
After successfully credentials are sent and shiro logs in user, backend generates a jwt token and sends it back to client
In every new request client sends the jwt token received in previous step to the server for authentication purposes. 
Shiro Filter checks the token contained in request. If valid procceed, else return error message. 

To implement this functionality i followed: 
JSON Web Token with Apache Shiro
The whole job is performed by the  JWTVerifyingFilter:
public class JWTVerifyingFilter extends AccessControlFilter {

    @Override
    protected boolean isAccessAllowed(ServletRequest request, ServletResponse arg1, Object arg2) throws Exception {
        boolean accessAllowed = false;
        HttpServletRequest httpRequest = (HttpServletRequest) request;
        String jwt = httpRequest.getHeader(""Authorization"");
        if (jwt == null || !jwt.startsWith(""Bearer "")) {
            return accessAllowed;
        }
        jwt = jwt.substring(jwt.indexOf("" ""));
        String username = Jwts.parser().setSigningKey(DatatypeConverter.parseBase64Binary(""secret""))
                .parseClaimsJws(jwt).getBody().getSubject();
        String subjectName = (String) SecurityUtils.getSubject().getPrincipal();
        if (username.equals(subjectName)) {
            accessAllowed = true;
        }
        return accessAllowed;
    }

    @Override
    protected boolean onAccessDenied(ServletRequest arg0, ServletResponse arg1) throws Exception {
        HttpServletResponse response = (HttpServletResponse) arg1;
        response.setStatus(HttpServletResponse.SC_FORBIDDEN);
        return false;
    }

}

However, i am facing the following problems:
As you can see the secret used to generate the jwt signature is the same 'secret' for all users. In every example i have found regarding jwt token signature generation and authentication, they use the same secret for all users when generating the jwt signature. 
In my implementation i would like to use the salt stored per user in the database to generate the jwt signature and then verify it. So when generating the jwt per user i use the following function which uses user salt to create the jwt signature.
    public class JWTProvider {

    private JWTProvider() {

    }

    public static String getJWTToken(User user) {

        System.out.println(""JWT Provider FIRED"");
        SignatureAlgorithm sigAlg = SignatureAlgorithm.HS512;

        byte[] apiKeySecretBytes = Base64.decode(user.getSalt());

        Key signingKey = new SecretKeySpec(apiKeySecretBytes, sigAlg.getJcaName());
        Date date = new Date();
        JwtBuilder builder = Jwts.builder()
                .setSubject(user.getUsername())
                .claim(""FirstName"", user.getFirstName())
                .claim(""LastName"", user.getLastName())
                .setIssuedAt(date)
                .setExpiration(new Date(date.getTime() +  24 * 60 * 60 * 1000)) //Expires in One Days
                .signWith(sigAlg, signingKey);

        System.out.println(""Generated JWT: "" + builder.compact());
        return builder.compact();
    }

    }

In my case, in order validate the jwt signature i need get the salt per user. So, i changed the implementation to of JWTVerifyingFilter to the following:
public class JWTVerifyingFilter extends AccessControlFilter {

    @Override
    protected boolean isAccessAllowed(ServletRequest servletRequest, ServletResponse servletResponse, Object o) {
        System.out.println(""JWT Verifier Fired....."");
        HttpServletRequest httpRequest = (HttpServletRequest) servletRequest;
        HttpServletResponse response = (HttpServletResponse) servletResponse;
        String jwt = httpRequest.getHeader(""Authorization"");
        if (jwt == null || !jwt.startsWith(""Bearer "")) {
            System.out.println(""DEn e brika prama: "");
            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
            return false;
        }
        System.out.println(""Found Something"");
        jwt = jwt.substring(jwt.indexOf("" ""));
        System.out.println(""JWT: "" + jwt);

        User user = (User) SecurityUtils.getSubject().getPrincipal();
        System.out.println(""MMMMMMMMMMMMMM "" + user.getUsername() + ""jhhhhhhhhhhhhhh"" + user.getSalt());

        String subjectName = ((User) SecurityUtils.getSubject()).getPrincipal();
        System.out.println(""Subject: "" + subjectName);
        String username = Jwts.parser().setSigningKey(DatatypeConverter.parseBase64Binary(""secret""))
                .parseClaimsJws(jwt).getBody().getSubject();
        System.out.println(""UserNAeme: "" + username);
        System.out.println(""Subject: "" + subjectName);
        if (username.equals(subjectName)) {
            response.setStatus(HttpServletResponse.SC_OK);
            return true;
        }
        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
        return false;
    }

    @Override
    protected boolean onAccessDenied(ServletRequest servletRequest, ServletResponse servletResponse) throws Exception {
        HttpServletResponse response = (HttpServletResponse) servletResponse;
        response.setStatus(HttpServletResponse.SC_FORBIDDEN);
        return false;
    }
}

However calling, Apache Shiro's SecurityUtils.getSubject() returns a null object. I tried to implement a Singleton Class to get always the same subject from SecurityUtils (if there is one subject return it else call SecurityUtils.getSubject()) with no success. In this later implementation only one user can login to system. Using another browser the backend reported user was already logged in with credential those of the user previously logged by a different browser.
Questions:

Is it ok to use always the same secret in jwt authentication for all users??
Where does apache shiro keeps information of logged in users, and how can i access them from restful backend java service??
Any complete example of Apache Shiro using different jwt secret phrases per user?? What is the best way to implement this. 
Do i need a in memory storage like redis to keep the authenticated users with their salt when logged in and get their salt from there in subsequent requests??

Thanks in advance for any answers.
","The problem was at my shiro.ini
I had enabled the option 
securityManager.sessionManager.sessionIdCookieEnabled = false

I commented it out and everything works fine. Now i have access to subject through shiro's SecurityUtils.getSubject();
","620","<rest><jwt><shiro><salt><secret-key>","2","0","1","2019-03-16 08:46:31","52040108","0","","1954636","","2018-08-27 11:59:42","2018-08-27 11:52:09",""
"2371886","salt and hash generation question","I would just like your feedback on something. 
Basically I have a value called $uniqueID which is = ID + First Letter of First Name + First Letter of Last Name + The String ""CAN""
I have then turned $uniqueID into a salt value as followed $salt = sha1($uniqueID);
I have then turned the user's password into a hash value using md5().
I have then stored these two values seperatley in a database using the correct data types.
I was just wondering if this would be a secure way to secure two types of user validation ? The password validation would be done by the user and the $uniqueID would be done via a script.
I won't be offering a service to remind you of your password you will have to create a brand new one.
I have also implmented some secuirty for the sessions.
","I'd recommend using sha1 on both the $uniqueID and the password field.
Also, make sure to salt your password field.
Also, it is worth noting that one way hashes can arrive at the same value from different inputs.  As Gumbo points out, if you are planning on using $uniqueID as a unique ID, you will run into problems. (So don't ;-)
If you want to use uniqueID as a session key, then you will want to at least check for collision before using it.  See Zend.Session, CodeIgniter->session and Kohona::Session
","618","<php><security><hash><salt>","0","0","2","2010-03-03 14:52:10","2372223","3","1","","","","2010-03-03 14:07:59",""
"2371886","salt and hash generation question","I would just like your feedback on something. 
Basically I have a value called $uniqueID which is = ID + First Letter of First Name + First Letter of Last Name + The String ""CAN""
I have then turned $uniqueID into a salt value as followed $salt = sha1($uniqueID);
I have then turned the user's password into a hash value using md5().
I have then stored these two values seperatley in a database using the correct data types.
I was just wondering if this would be a secure way to secure two types of user validation ? The password validation would be done by the user and the $uniqueID would be done via a script.
I won't be offering a service to remind you of your password you will have to create a brand new one.
I have also implmented some secuirty for the sessions.
","In general, a salt is a random value that is unique for each datum it is used for. That means each user should have its own random and unique salt that is used when hashing its password. And don’t use any user information to generate a salt.
You could, for example, use rand and uniqid to generate a random and unique salt for each user:
$salt = uniqid(rand(), true);

This salt would be both unique and random.
","618","<php><security><hash><salt>","0","1","2","2010-03-03 14:52:10","2372223","3","1","","","","2010-03-03 14:07:59",""
"3360223","What is best way to salt password?","can you please tell me what is best way to salt password. Which method best?
Thank you.
","It doesn't really matter how you do it.  It's just a way to get different hashes for the same password.
If you think you need 256 hashes for every password, use one byte of salt.
If you want 4bn hashes for every password, use 4 bytes of salt.
These kind of trade-offs need much more information about the problem domain than you've given us.
Assume that the salt is publicly visible, so you don't need to worry about fancy un-guessable techniques for predicting it - any old PRNG will do.
","618","<passwords><salt>","1","4","2","2010-07-29 07:21:14","","3","","","","","2010-07-29 07:16:03",""
"3360223","What is best way to salt password?","can you please tell me what is best way to salt password. Which method best?
Thank you.
","A salt is just applying some mutation to your raw password before applying a hash (or encryption I guess) so that a rainbow table attack is more difficult. It can be as simple as:
md5(""saltstring"" + password);

","618","<passwords><salt>","1","1","2","2010-07-29 07:21:14","","3","","","","","2010-07-29 07:16:03",""
"6368424","Any simple recommendations for creating a Password Salt and Hashing it?","wondering if anyone has some quick links to code snippets to generate a random salt (that's not easy too easy to guess) and then hashing some plain text password with the generated hash.
Suggestions or links, please?
.NET code, please.
","The salt can be know. Why would you want the salt ""not easy to guess""? It just has to be unique so that if two people share the same password the salt applied to the password ensures that they don't end up with the same hash value and to reduce the effectiveness of Rainbow attacks (where a reverse Hash dictionary is used to see the possible plain text value(s) that can produce a particular hash value)
From a code snippet on MSDN:
private static string CreateSalt(int size)
{
  // Generate a cryptographic random number using the cryptographic
  // service provider
  RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
  byte[] buff = new byte[size];
  rng.GetBytes(buff);
  // Return a Base64 string representation of the random number
  return Convert.ToBase64String(buff);
}

You can then append or prepend this on to the plain text password, then hash it.
","618","<c#><.net><passwords><hash><salt>","0","0","1","2011-06-16 07:53:44","6368518","1","1","","","","2011-06-16 07:23:11",""
"26986241","Salted Password Hashing. Am I doing it right in ASP.NET environment?","I am developing a website by using ASP.NET. I want to implement login authentication for my users. I am using SALT HASH method to securely save users' passwords to the DB. By looking at various codes I wrote a code like below to generate the SALT and the Hashed passwords to store in Database. 
    private string hashedPassword;
    private string Salt;
    private string SaltPlusPassword;
    private const byte saltSize = 24;
    byte[] saltArray;
    byte[] hashedPasswordArray;
    byte[] bytes;

   public void Save_Login(string passWord)
    {
        using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider())
        {
            saltArray = new byte[saltSize];
            rng.GetBytes(saltArray);
        }
        Salt = Convert.ToBase64String(saltArray);
        SaltPlusPassword = String.Format(""{0}{1}"", Salt, passWord);
        using (SHA256 sha = SHA256.Create())
        {
            bytes = Encoding.UTF8.GetBytes(SaltPlusPassword);
            hashedPasswordArray = sha.ComputeHash(bytes);
        }


        hashedPassword = Convert.ToBase64String(hashedPasswordArray);
    }

//Salt will be save to DB
//hashedPassword  will be save to DB.
So I have few questions.
1) I read in an article that saying ""make your salt is at least as long as the hash function's output"" ok. What are the sizes for saltArray, hashedPasswordArray and bytes arrays which are declared in my code? I used saltArray size as 24. Is it ok?
2) What will happen if I use ?
bytes = Encoding.Unicode.GetBytes(SaltPlusPassword);
instead of 
bytes = Encoding.UTF8.GetBytes(SaltPlusPassword);
3) What is the datatype should I use to store salt and the hashed password in the DB? ( My db is MYSQL )
4) Is there any performance difference if I use SHA256Managed instead of SHA256? Which is best?
5) Finally am I doing this in the right way? What are the weaknesses in above code? What are your suggestions?
","Rather than deal with all these issues, why not use the built in identity management tools provided by ASP.NET.  See here
http://www.asp.net/identity/overview/getting-started/introduction-to-aspnet-identity
Much more common and robust.
","616","<asp.net><hash><salt><saltedhash>","1","0","1","2014-11-18 06:10:00","","5","","","","","2014-11-18 03:45:02",""
"42809650","Password hashing - Compare 2 strings","I've just added in a function to hash and salt passwords which are stored in an Access database ""Memo"" field.
The hashing/salting works fine, but I can't find anything on the internet which tells me how to then decrypt them.
I did see somewhere that says you can't, but instead have to get the password from the database, then hash the entered password (for a log on screen) and compare the 2 strings. I've tried this, but the 2 strings are then different, so I cannot log in.
The algorithms for creating the hash/salt are
Public Shared Function createRandomSalt() As String

    Dim mix As String = ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!£$%^&*()-_=+{}][@'~#:;?/>.<,\|""
    Dim salt As String = """"

    Dim rnd As New Random

    Dim sb As New StringBuilder

    For i As Integer = 1 To 50
        Dim x As Integer = rnd.Next(0, mix.Length - 1)
        salt &= (mix.Substring(x, 1))
    Next

    Return salt

End Function

Public Shared Function Hash512(ByVal password As String, ByVal salt As String)

    Dim convertedToBytes As Byte() = Encoding.UTF8.GetBytes(password & salt)
    Dim hashType As HashAlgorithm = New SHA512Managed()
    Dim hashBytes As Byte() = hashType.ComputeHash(convertedToBytes)
    Dim hashedResult As String = Convert.ToBase64String(hashBytes)

    Return hashedResult

End Function

Then, when logging in, I'm trying the following
sql = ""SELECT * FROM [Users] WHERE [User_ID] = ?""
Dim sCmd As New OleDb.OleDbCommand(sql, mainDBconnection)
sCmd.Parameters.Add(""@ID"", OleDb.OleDbType.VarChar).Value = txtUser.Text
mainDBadapter = New OleDb.OleDbDataAdapter(sCmd)
mainDBset = New DataSet
mainDBadapter.Fill(mainDBset)

 For Each userRow In mainDBset.Tables(0).Rows
     Dim password As String = """"
     password = mainDBset.Tables(0).Rows(0).Item(""Password"")

     Dim checkPassword As String = (frmSystemSettings.Hash512(password, frmSystemSettings.createRandomSalt))

      If userRow.Item(""User_ID"") = txtUser.Text And password = checkPassword Then

Am I doing something wrong? How can I compare the entered password to the encrypted password in the database?
","The problem is you are using a random salt when hashing the entered password. Since that is different from the random salt you used when storing the hash to the DB you get different hashes.
You have to do the following:

Before storing the password to the DB create a random salt, hash the password with it and store the salt together with the password in the database
When a user enters his password retrieve that user's salt from the database, use it to hash the entered password and compare the result to the hash from the database.

Oh, and you seem to never use the password the user entered. In your code you retrieve the hash from the DB into password, hash that hash again into checkpassword and compare those.  Of course you have to hash the entered password.
","608","<vb.net><salt><password-encryption><string-hashing>","0","4","1","2017-03-15 14:31:20","42809881","1","","","","","2017-03-15 12:23:17",""
"48866070","PHP Salt and hashing of password","I'm attempting to get my head around password security and salts/hashing, especially relating to PHP (with a view to storing info in MySQL).
With the following basic code, I'd like to know if I've grasped the concept or failed spectacularly!
<?php

$password = ""password"";
$iterations = 59999;
$salt = openssl_random_pseudo_bytes(16);

$hash = hash_pbkdf2(""sha256"", $password, $salt, $iterations, 20);
echo ""hash_pbkdf2 (passord + salt + iteration count) = "", $hash;
echo ""<br>"";
echo ""hash_hmac (above hash + password) ="", hash_hmac('sha256', $hash, $password);

?>

What I'd like to know is;

Is openssl_random_pseudo_bytes the best way of creating a CSPRNG salt?
I realise that the salt and the two generated hashes would need to be stored in MySQL, but are two hashes needed? Is this overkill or a backwards way or combining the iteration aspect I require, along with a secure/recommended HMAC-SHA256 generated hash?
Is any of this secure by 2018 standards?

","

Is openssl_random_pseudo_bytes the best way of creating a CSPRNG salt?


It should be sufficient on most systems, but not always and you're not using it in a way that prevents the bad cases, so no - it's not. The best tool for the job is random_bytes().
However, you shouldn't be generating the salt on your own anyway; read below.


I realise that the salt and the two generated hashes would need to be stored in MySQL, but are two hashes needed? Is this overkill or a backwards way or combining the iteration aspect I require, along with a secure/recommended HMAC-SHA256 generated hash?


You certainly don't need 2 hashes. In particular, I have no idea why you thought you may need the HMAC. The sample code doesn't even show how you'd use that.
In fact, the iterations number in PBKDF2 refers to how many HMAC rounds it does internally, so you're kinda just increasing the iterations count by one with that (although not quite in the same way).
The reason why it needs so many iterations in the first place is because HMAC keys are not like user passwords. A key is supposed to be like a salt - random, unpredictable, raw binary data; a password is commonly easy to remember by a user, so it doesn't have the same level of entropy.


Is any of this secure by 2018 standards?


Technically, the PBKDF2 part on its own is secure when guaranteed a cryptographically secure salt. Note that I say it is technically secure and with a conditional ...
All hash_-prefixed functions are part of a generic hashing extension, yet hash_pbkdf2() is the only function in there that can create a secure password hash, and not without external aid.
Hashing has a lot of appliances and password hashing is only one of them. Creating the hash is one part, the salt - another, validation - a third; etc.
What you should be using is PHP's dedicated Password Hashing extension (refer to How to use password_hash for more info on usage), which is made specifically for what you need and is secure by design for its purpose - meaning it automates absolutely everything possible, from salt and hashing to time-safe validation.
","607","<php><mysql><hash><passwords><salt>","2","2","1","2018-02-19 12:54:04","","5","1","","","","2018-02-19 12:17:46",""
"12753062","Multiple Salts to protect passwords","If you use a salt before hashing a password - it will make the hash more secure. It makes sense, because rainbow table attacks become much more difficult (impossible?).
What if you use multiple salts? For example - you check if the day is Monday, or the Month, the hour, etc (or some combination). Then you have a database which stores the fields: (userid, hash1, hash2, hash3...). 
Would this make the information any more (or less) secure?
Example:
1) User registers with password 'PASS'.
2) System (php in this example) stores values (md5($password.$this_day)) for each day (7 passwords). into table password, column hash_monday, hash_tuesday etc.
3) user logs in, and script checks password where 'hash_'.$this_day matches what is entered. 
","Your system will be no more secure - you end up with several single salt databases instead of one. In principle it may be even less secure, since you helpfully provide the attacker with 7 hashes to the same string to choose from and he only needs to guess one. These multiple hashes of the same plaintext may also lead to implications to cryptographic strength of the encryption used for passwords (not sure on that one and it will depend on the algorithm used).
","604","<security><hash><passwords><salt>","1","6","3","2012-10-07 15:00:54","12757654","1","","205426","","2012-10-07 15:00:54","2012-10-05 19:45:43",""
"12753062","Multiple Salts to protect passwords","If you use a salt before hashing a password - it will make the hash more secure. It makes sense, because rainbow table attacks become much more difficult (impossible?).
What if you use multiple salts? For example - you check if the day is Monday, or the Month, the hour, etc (or some combination). Then you have a database which stores the fields: (userid, hash1, hash2, hash3...). 
Would this make the information any more (or less) secure?
Example:
1) User registers with password 'PASS'.
2) System (php in this example) stores values (md5($password.$this_day)) for each day (7 passwords). into table password, column hash_monday, hash_tuesday etc.
3) user logs in, and script checks password where 'hash_'.$this_day matches what is entered. 
","Maybe you should have a look at this small article. There are several things wrong with your approach.

A salt does not protect against a dictionary attack. It protects against rainbow-tables if correctly used.
Use a unique salt for each password. The salt should be a random value, not derrived from known information. It has to be stored with the password.
Do not use MD5 for hashing passwords. Md5 is considered broken, and it is ways too fast to hash passwords. With an off-the-shelf GPU, you are able to calculate 8 Giga MD5-hashes per second (in 2012). That makes it possible to brute-force a whole english dictionary with about 500000 words, in less than 0.1 milliseconds!
Use Bcrypt for hashing passwords. It is recommended to use a well established library like phpass, and if you want to understand how it can be implemented, you can read the article above.

If you want to add a secret to your hash function (like a hidden key, or a hidden function), you can add a pepper to the password. The pepper should not be stored in the database, and should remain secret. The pepper can protect against dictionary attacks, as long as the attacker has only access to your password-hashes (SQL-Injection), but not to the server with the secret.
","604","<security><hash><passwords><salt>","1","4","3","2012-10-07 15:00:54","12757654","1","","205426","","2012-10-07 15:00:54","2012-10-05 19:45:43",""
"12753062","Multiple Salts to protect passwords","If you use a salt before hashing a password - it will make the hash more secure. It makes sense, because rainbow table attacks become much more difficult (impossible?).
What if you use multiple salts? For example - you check if the day is Monday, or the Month, the hour, etc (or some combination). Then you have a database which stores the fields: (userid, hash1, hash2, hash3...). 
Would this make the information any more (or less) secure?
Example:
1) User registers with password 'PASS'.
2) System (php in this example) stores values (md5($password.$this_day)) for each day (7 passwords). into table password, column hash_monday, hash_tuesday etc.
3) user logs in, and script checks password where 'hash_'.$this_day matches what is entered. 
","I do not believe multiple hashes are going to help you in this scenario, primarily because when someone compromises your database they will notice that you have 7 different salts to go against and may make an educated guess that they are based on days of the week.  There is nothing fundamentally wrong with MD5, as so many people like to jump on that bandwagon.  The types of people that say MD5 is a broken hash have a fundamental misunderstanding between a hash function and a cryptographic hash function, I would recommend ignoring them.  In the event you need a cryptographic hash function, use SHA-2 (or something from that family or greater).  
You will need to salt the user input, as you know, a random value is generally recommended,but it can also be a value you store in a separate application space (outside of the database), you just have to protect that information as well.    I highly recommend making the password hashing function take several thousand iterations for any input. As this will slow down the automated process of matching hashes on the database.
If your users use easy to guess passwords, dictionary attacks will beat you every day, cant protect against stupidity.
","604","<security><hash><passwords><salt>","1","0","3","2012-10-07 15:00:54","12757654","1","","205426","","2012-10-07 15:00:54","2012-10-05 19:45:43",""
"4457097","PHP and MySQL Salt Security Question","What if my server gets hacked and the hacker views my hashed passwords and can see what salt I was using.
Is it something to worry about?
","Yes it is. Now hacker can bruteforce them (if he knows how actually you salted the passwords).
Nothing more to worry - since you're using the salted passwords more intelligent attacks (other than bruteforce) cannot be applied.
","601","<php><mysql><salt>","1","1","8","2010-12-16 04:07:24","4457103","6","","","","","2010-12-16 03:06:33",""
"4457097","PHP and MySQL Salt Security Question","What if my server gets hacked and the hacker views my hashed passwords and can see what salt I was using.
Is it something to worry about?
","It is not supposed to be a problem.  The idea with salt values is that it prevents a rainbow attack (using precomputed values).  So knowing the salt value does not expose a problem.
","601","<php><mysql><salt>","1","2","8","2010-12-16 04:07:24","4457103","6","","","","","2010-12-16 03:06:33",""
"4457097","PHP and MySQL Salt Security Question","What if my server gets hacked and the hacker views my hashed passwords and can see what salt I was using.
Is it something to worry about?
","To see the salt he must have the source code, and when he has it, there are at least some things to worry about - he will see the mechanism responsible of creating password and a way of salting them.
","601","<php><mysql><salt>","1","0","8","2010-12-16 04:07:24","4457103","6","","","","","2010-12-16 03:06:33",""
"4457097","PHP and MySQL Salt Security Question","What if my server gets hacked and the hacker views my hashed passwords and can see what salt I was using.
Is it something to worry about?
","Yes. He'd still need to reverse the hash, which isn't easy by any means, but now he knows a key part of the plaintext. The salt plus a dictionary attack is much more likely to succeed than snooping over the wire (with no knowledge of the salt) would be
","601","<php><mysql><salt>","1","0","8","2010-12-16 04:07:24","4457103","6","","","","","2010-12-16 03:06:33",""
"4457097","PHP and MySQL Salt Security Question","What if my server gets hacked and the hacker views my hashed passwords and can see what salt I was using.
Is it something to worry about?
","Essentially the salt just makes the password stronger. It won't aid in the decryption of individual passwords if he has whatever your passwords are stored in and can run brute force attacks he can just figure out the salt when it ends up being the same in whatever passwords he decodes.
http://pbeblog.wordpress.com/2008/02/12/secure-hashes-in-php-using-salt/
This article has a pretty good explanation... so yes if the hacker can see your source code you should be worried but the salt alone isn't a big deal.
","601","<php><mysql><salt>","1","0","8","2010-12-16 04:07:24","4457103","6","","","","","2010-12-16 03:06:33",""
"4457097","PHP and MySQL Salt Security Question","What if my server gets hacked and the hacker views my hashed passwords and can see what salt I was using.
Is it something to worry about?
","If you're using only one salt for all passwords, a hacker can pre-compute a salted rainbow table, which will give him access to all passwords rather quickly.
You can use a random salt for each individual password, which means a hacker would have to compute such a rainbow table for every salt, in effect brute-forcing every single password, which would slow him down quite significantly.
You can further slow him down by using a deliberately slow hash that will slow down brute-forcing to a point where it may become infeasible. MD5 is the worst choice because it's really fast (and broken to boot). The SHA family was also designed to be fast, but is a better choice. Bcrypt or generally the *fish family is decent, but support among systems and languages varies. Be careful to use a hash variant of *fish, since they are also used for encryption (can be reversed).
See http://blog.phusion.nl/2009/08/13/securely-store-passwords-with-bcrypt-ruby-now-compatible-with-jruby-and-ruby-1-9/.
","601","<php><mysql><salt>","1","0","8","2010-12-16 04:07:24","4457103","6","","","","","2010-12-16 03:06:33",""
"4457097","PHP and MySQL Salt Security Question","What if my server gets hacked and the hacker views my hashed passwords and can see what salt I was using.
Is it something to worry about?
","I am not an expert in this subject, but this is my understanding:
Given a salt, an attacker can build what's known as a ""rainbow table"", that's basically a reverse of the hash function.  With this table, they can lookup an encrypted value in the table and get back an input password such that hash(password + salt) = encrypted value.
However, while lookups are quick, rainbow tables are very time consuming to build.  A simple thing you can do is to generate a salt value randomly on a per-account basis and store it alongside the encrypted password.  That way, if an attacker wanted to get passwords out, they would have to build a rainbow table for each user as opposed to building one site-wide.
(Having a salt is still much better than nothing because that way an attacker has to at least generate his own rainbow table as opposed to just downloading a stock one).
More information, and probably a better answer
","601","<php><mysql><salt>","1","0","8","2010-12-16 04:07:24","4457103","6","","","","","2010-12-16 03:06:33",""
"4457097","PHP and MySQL Salt Security Question","What if my server gets hacked and the hacker views my hashed passwords and can see what salt I was using.
Is it something to worry about?
","If the hacker has gotten into your system and has access to the database then its ""game over"" as far as your users privicy is concerned! The hacker has everything he wants except the users passwords which dont give anything he hasnt got already apart from the opperunity to spoof a user access --> which he can do very simply by putting his own hash and salt in the database!
So yes MD5 plus salt is ""good enough"" security in this case.
","601","<php><mysql><salt>","1","1","8","2010-12-16 04:07:24","4457103","6","","","","","2010-12-16 03:06:33",""
"35260377","How do I store a salt in mysql database for secure password encryption?","I'm using Shiro with Spring MVC to login users. I configure Shiro in applicationContext.xml (no INI file).
This is the realm configuration:
  <bean id=""myRealm"" class=""org.apache.shiro.realm.jdbc.JdbcRealm"">
    <property name=""dataSource"" ref=""dataSource""/>
    <property name=""authenticationQuery"" value=""select password from usuarios where email = ?""/>
    <property name=""credentialsMatcher"">
        <bean class=""org.apache.shiro.authc.credential.HashedCredentialsMatcher"">
              <property name=""storedCredentialsHexEncoded"" value=""false""/>
              <property name=""hashIterations"" value=""1024"" />
        </bean>
    </property>
  </bean>

This is my code generating salt and hash when the user registers:
RandomNumberGenerator rng = new SecureRandomNumberGenerator();
Object salt = rng.nextBytes();

String hashedPasswordBase64 = new Sha256Hash(password, salt, 1024).toBase64();

u.setPassword(hashedPasswordBase64);
u.setSalt(salt.toString());

usuarioDao.saveUsuario(u);

Here saveUsuario(u) calls the DAO to persist the user in MySQL. I guess that the salt.toString() is wrong.
The user table is:
CREATE TABLE usuarios (
  id INTEGER AUTO_INCREMENT,
  nombre VARCHAR(50),
...
  password VARCHAR(50),
  salt VARCHAR(50),
...
  PRIMARY KEY (id)
);

Questions are:
- Which type should be the hash field in the DB? The hash is created by rng.nextBytes and is of type Object.
- How do I declare the field or the query to HashedCredentialsMatcher so it can authenticate properly?
","I have found the answer in this topic: how to get/set the salt for a JdbcRealm
I extended JdbcRealm with:
public class JdbcSaltRealm extends JdbcRealm {

    public JdbcSaltRealm() {
        setSaltStyle(SaltStyle.COLUMN);
    }
}

Then I changed myRealm in applicationContext.xml to:
  <bean id=""myRealm"" class=""ar.com.yojunto.webapp.security.JdbcSaltRealm"">
    <property name=""dataSource"" ref=""dataSource""/>
    <property name=""authenticationQuery"" value=""select password, salt from usuarios where email = ?""/>
    <property name=""credentialsMatcher"">
        <bean class=""org.apache.shiro.authc.credential.HashedCredentialsMatcher"">
              <property name=""hashAlgorithmName"" value=""SHA-256"" />
              <property name=""hashIterations"" value=""1024"" />
        </bean>
    </property>
  </bean>

and finally changed the DB to:
  password VARCHAR(64),
  salt VARCHAR(50),

I don´t know how strong is the salt with this algorithm, but it worked fine.
","598","<spring-mvc><hash><shiro><salt><password-encryption>","0","0","2","2016-02-08 05:50:22","","1","","","","","2016-02-07 23:13:34",""
"35260377","How do I store a salt in mysql database for secure password encryption?","I'm using Shiro with Spring MVC to login users. I configure Shiro in applicationContext.xml (no INI file).
This is the realm configuration:
  <bean id=""myRealm"" class=""org.apache.shiro.realm.jdbc.JdbcRealm"">
    <property name=""dataSource"" ref=""dataSource""/>
    <property name=""authenticationQuery"" value=""select password from usuarios where email = ?""/>
    <property name=""credentialsMatcher"">
        <bean class=""org.apache.shiro.authc.credential.HashedCredentialsMatcher"">
              <property name=""storedCredentialsHexEncoded"" value=""false""/>
              <property name=""hashIterations"" value=""1024"" />
        </bean>
    </property>
  </bean>

This is my code generating salt and hash when the user registers:
RandomNumberGenerator rng = new SecureRandomNumberGenerator();
Object salt = rng.nextBytes();

String hashedPasswordBase64 = new Sha256Hash(password, salt, 1024).toBase64();

u.setPassword(hashedPasswordBase64);
u.setSalt(salt.toString());

usuarioDao.saveUsuario(u);

Here saveUsuario(u) calls the DAO to persist the user in MySQL. I guess that the salt.toString() is wrong.
The user table is:
CREATE TABLE usuarios (
  id INTEGER AUTO_INCREMENT,
  nombre VARCHAR(50),
...
  password VARCHAR(50),
  salt VARCHAR(50),
...
  PRIMARY KEY (id)
);

Questions are:
- Which type should be the hash field in the DB? The hash is created by rng.nextBytes and is of type Object.
- How do I declare the field or the query to HashedCredentialsMatcher so it can authenticate properly?
","First, please read Thomas Pornin's canonical answer to How to securely hash passwords.
Then, note that Java 8 does have PBKDF2-HMAC-SHA-512 available now as PBKDF2WithHmacSHA512 - use that instead.  SHA-512 in particular has 64-bit operations that reduce the advantage GPU based attackers have.  Use more iterations than just 1024, as well - see what your system can handle comfortably under load!
Use those, or BCrypt, or SCrypt.  Use at least a 12 byte cryptographically random salt.
Do not request more than 64 (binary) bytes out of PBKDF2-HMAC-SHA-512, more than 32 (binary) bytes out of PBKDF2-HMAC-SHA-256, or more than 20 (binary) bytes out of PBKDF2-HMAC-SHA-1, or you actively give attackers an advantage.
You can absolutely store both the hash and the salt in the database in BINARY() fields, or you could convert them to Base64 or hexadecimal; that's all up to you.  BINARY() is the smallest, and requires no conversions going in or coming out.
","598","<spring-mvc><hash><shiro><salt><password-encryption>","0","1","2","2016-02-08 05:50:22","","1","","","","","2016-02-07 23:13:34",""
"5832013","Hashed and Salted Password is not always the same","I am using Apache Shiro as my security layer in my Spring app and I am encountering a really weird situation.
Firstly, this is how my security system is set up. When a user registers their password is hashed with a securely generated random salt. The salt and hashed password are then stored in my DB. Everything works 100% when they register and login works great too, but then a couple of days go by and suddenly their hashed passwords aren't matching any longer. Here is my code:
import org.apache.shiro.codec.Base64;
import org.apache.shiro.crypto.hash.Sha256Hash;

public static void main(String[] args) {
        String plainPassword = ""testing"";
        String salt = ""8AFTpriREtydSg39+37rQHNRyvZLuXqyXYgWXI55f1PbhbUQSeFGCLKsHpA6thZKs3uQeNNJHksqcV5oaNcr9lQiXMMyC8Duqr2aQaqyjLKpNMVlB69jJ7emNq0K6ccfBdv/O4JGT2U689LeNg6CqN+9kqW2GBgT2CIVOlapA34="";

        System.out.println(new Sha256Hash(plainPassword.toCharArray(), Base64.decode(salt), 1024).toBase64());
}

The resulting hashed password is:
b8VLt/eKV8F5kwDjRgdkM+PAvQC8sk7Ooflt91juaXA= 

But the password I have in my database, which was working and was generated with the exact same salt a couple of days ago was:
xZNBNlUa8vRQq0qY5bbkETzZtzztGRTH2KZKijQdilU=

So as you can imagine, I am completely stumped. Does anyone know if I am doing something wrong? Or if I have left a step out.
Update 1: After registering a new user in my system, it looks like all the other users in the system have their passwords changed for some reason. So this has nothing to do with the way the password hash is generated and more to do with my database access layer.
","It seems your problem is unrelated to hashing and salting. You are sending improper queries that update unwanted records. 
But I'll throw in an advice about salting - use a different salt for every user. Otherwise your passwords are not as secure. Imagine what happens if someone obtains the salt and your database. In a while (could be weeks, but it's not that much) he will be able to generate a rainbow table and have most of your passwords. While if you use a different salt, he will have to generate as many rainbow tables as the number of your users.
","589","<java><hash><salt><shiro>","3","1","2","2011-04-29 21:21:30","5833427","3","","85371","","2011-04-29 21:21:30","2011-04-29 12:28:03",""
"5832013","Hashed and Salted Password is not always the same","I am using Apache Shiro as my security layer in my Spring app and I am encountering a really weird situation.
Firstly, this is how my security system is set up. When a user registers their password is hashed with a securely generated random salt. The salt and hashed password are then stored in my DB. Everything works 100% when they register and login works great too, but then a couple of days go by and suddenly their hashed passwords aren't matching any longer. Here is my code:
import org.apache.shiro.codec.Base64;
import org.apache.shiro.crypto.hash.Sha256Hash;

public static void main(String[] args) {
        String plainPassword = ""testing"";
        String salt = ""8AFTpriREtydSg39+37rQHNRyvZLuXqyXYgWXI55f1PbhbUQSeFGCLKsHpA6thZKs3uQeNNJHksqcV5oaNcr9lQiXMMyC8Duqr2aQaqyjLKpNMVlB69jJ7emNq0K6ccfBdv/O4JGT2U689LeNg6CqN+9kqW2GBgT2CIVOlapA34="";

        System.out.println(new Sha256Hash(plainPassword.toCharArray(), Base64.decode(salt), 1024).toBase64());
}

The resulting hashed password is:
b8VLt/eKV8F5kwDjRgdkM+PAvQC8sk7Ooflt91juaXA= 

But the password I have in my database, which was working and was generated with the exact same salt a couple of days ago was:
xZNBNlUa8vRQq0qY5bbkETzZtzztGRTH2KZKijQdilU=

So as you can imagine, I am completely stumped. Does anyone know if I am doing something wrong? Or if I have left a step out.
Update 1: After registering a new user in my system, it looks like all the other users in the system have their passwords changed for some reason. So this has nothing to do with the way the password hash is generated and more to do with my database access layer.
","It turns out I had some dodgy code somewhere else that was updating my user object and overwriting their password with a new password. So the password hashing algorithms were working correctly after all.
","589","<java><hash><salt><shiro>","3","0","2","2011-04-29 21:21:30","5833427","3","","85371","","2011-04-29 21:21:30","2011-04-29 12:28:03",""
"25204823","MySQL .NET Connector: How to get ""salt"" from Server Greeting? (need to authenticate with unicode special character '§' inside password)","I searched allover this planet`s internet and I am unable to correctly authenticate to MySQL from a simple WPF application using MySQL Connector/NET.
Problem: Some user has unicode characters in his password, namely the character ""§"".
I am using the following connection string (was initially just plain text, but in my desperation to fix the problem I converted it to MySqlConnectionStringBuilder):
var someMySqlConnectionString = new MySqlConnectionStringBuilder
    {
        CharacterSet = ""utf8"",
        Password = _someModel.SomePassword,
        UserID = _someModel.SomeUserName,
        Database = SomeSettings.SomeDatabaseName,
        Server = SomeSettings.SomeSqlServerAddress,
    }
_someMySqlConnection = new MySqlConnection(someMySqlConnectionString.ToString());

Now, the WPF application is able to connect with regular users (users not having special unicode characters in their passwords), but it is not able to connect with special users (users having special unicode characters in their passwords).
MySQL Workbench, however, is able to connect with this any user and password. This made me curious, so I grabbed the Wireshark, filtered the connection and authenticated with a user having the problematic character in his password.
Here is what I have discovered on my own (thank you, Wireshark!!!):

First, the MySQL Workbench Community Edition authenticates without password;
When receiving ""access denied for user 'xxx'@'asd' using password:no"", I see some ack/syn/syn+ack packages, then...
The MySQL Server responds with some special ""Server Greeting"" package containing ""salt"" variable:


Server Greeting
    Protocol: 10
    Version: 5.6.19-log
    Thread ID: 445
    Salt: ?&?K<)W\
    Server Capabilities: 0xf7ff
    Server Language: utf8 COLLATE utf8_general_ci (33)
    Server Status: 0x0002
    Unused: \177\200\025
    Salt: F,IhSFDdHyLO



The packet itself is called ""Server Greeting"" and contains 2 salts (!!! I was expecting 1 single challenge, not two... whatever, I didn`t get anywhere, maybe ""unused"" means something?)

Later on, while chit-chatt-ing with our good friend Google, I have exhausted the search results and I have not found any way for the MySQL Connector/NET to use/invoke/read this server greeting packet.
Nor have I found any way to login with a user having that ugly unicode character in his password (I am sure other unicode characters do the same). I must however no ask users to change their passwords, as it the very same password is used for other services on the company network.
Now, through Google I have reached to the webpage ""https://www.portcullis-security.com/cracking-mysql-network-authentication-hashes-with-john-the-ripper/"", one of the best sources so far. Anyway, it doesn`t tell anything about the ""MySQL Server Greeting"" or how can that ""salt"" be obtained.
I was very surprised indeed to find out that a very not known MySQL library - namely http://nmap.org/nsedoc/lib/mysql.html#receiveGreeting - has the function ""receiveGreeting"" while the MySQL Connector/NET doesn`t have anything like this in all its documentation...
Any help is much appreciated!
Thank you!
","","589","<mysql><authentication><unicode><salt><connector>","0","","0","2014-08-11 09:31:41","","3","","","","","2014-08-08 13:37:37",""
"24801064","value of salt changing on storing value in mysql database","I'm using the code below to create salt in PHP.
$length=100;
$bool=true;
$salt=openssl_random_pseudo_bytes ( $length, $bool );

when I echo the value it display this value (one instance)
×YOEú ßPŽžJZýr³€žYM½N±~ÄŽ¼D‚ÝÆFÕ`O$I$îÇF    üKøäƒþ¥_5ûù„Ð… Ïq®ùä. ³æ¤ljî¬}Të‚´ù­B#3U96

but on storing in the database it gets changed to
Ñx€gþ‚Î€³€Œ¯´N§Å·.:gºÈá•ïjÇÖ…áf6uIùYbx}û€·iÀ0èFšDö¼6¥qzMéÁi‡±

The field is using latin1_swedish_ci encoding.
signup script
script containing hashing function, salt generator
table structure
","openssl_random_pseudo_bytes returns a raw byte stream, as the name suggests. It doesn't return ""characters"" which are intended to be readable. How those bytes are being displayed as characters depends entirely on the interpreting party; here quite apparently MySQL is interpreting the bytes in a different encoding than the browser/console where you're displaying it from PHP.
If you're storing those bytes in MySQL, you should be storing them in a BLOB type column, because they're a meaningless blob.
If you want to treat them as characters, you need to encode them. The best is probably a simple bin2hex($salt), which encodes the binary data to hex. Alternatively use base64_encode.
Secondarily, the second parameter to openssl_random_pseudo_bytes is not supposed to be passed as a boolean. It's a pass-by-reference variable which allows you to check after the fact whether the bytes were generated with strong security:
$salt = openssl_random_pseudo_bytes($length, $strong);
if ($strong) {
    // $salt is strong
} else {
    // $salt is weak
}

","589","<php><mysql><passwords><salt>","2","2","1","2014-07-17 11:06:20","24801889","8","1","3263192","","2014-07-17 10:52:48","2014-07-17 10:27:16",""
"4742096","Recommendations for encrypted password and email retrieval","I just finished encrypting the passwords in my database using a salted sha1. Naturally I'll need to implement a forgot password link ( email as well ). I have make shift versions of those right now that are no good. 
I am assuming due to the style of encryption, that I will need to prompt the user to reset their password. 
I am just looking for the most secure way to do this. Any suggestions, or links to resources and tutorials, as well as what kinda of method I should use would be greatly appreciated.
thanks and good day. 
","Just to be clear, sha1, salted or cheesy onion flavour, is not encryption, it is called hashing. It's a one way function with unique output for unique. The idea of using a salted hash for passwords in your database is twofold:

The hash is a one way function, so nobody with access to the database can actually determine what those passwords are. Very good practise.
The salted part, assuming you're hashing the username+password+some junk, means that each username + password combination should be a unique hash. It makes dictionary attacks / shortcuts via precomputed hashes difficult, because most people don't have a dictionary of ninefingers:stackoverflow!!:{insertcommonwordhere} lying around. It doesn't stop them generating it, just makes it more inconvenient.

Now we've cleared that up, yes, if the user forgets their password, you can't email it to them because you can't reverse the hash. By design.
Instead, what you're looking to do is allow the user to securely reset their password. The simplest form of this is that, if the user enters their email address, you email them a link to your site including in its parameters a unique, use-once token valid for a short time window.
Other options? Generate them a password and email them that. The Uk Gov't Gateway here in the UK does something quite interesting: the web-page contains half the password, the email the other half. You need both to then log in again.
Now, the million-dollar question: is it secure? No. Nothing's secure. There is no 100% security. Ever. This particular method of storing passwords adds security because:

DBAs can't easily abuse their access to the user table;
Malicious requests that somehow select * from table users; can't easily read those passwords either.

But as soon as you rely on being able to email the user as a method of secure communication, you rely on:

Their email account being secure;
That their email is not being monitored.

The question then becomes - how secure do you really need to be? Implementing the email-out-a-reset-link solution will work for most cases because they're not high-value enough targets, really.
","587","<email><encryption><sha1><salt><forgot-password>","0","2","1","2011-01-20 02:36:05","4742957","2","","","","","2011-01-19 23:47:36",""
"7104060","What is the point of salt and hashing if database is accessible?","I just learned the concept of hashing (""Hey! don't forget the salt!"") and using salt to make the password secured.
Hashing it is a one way encryption (actually not encryption but hashing) so it cannot be reversed engineered. Salting is prefixing or appending randomly created values to the password before hashing 'coz the problem in hashing (just hashing) is, some genius has provided a hash table of words from the dictionary so that they'll just compare the hash from that dictionary to the user's table from the database to login - W-wait? did I say table from the database? So it means somebody can access the database so we have to use salt? If that so, then why would the hacker recover the password if he already has access to the database? If I were him, I'll just get all the details I want from the database, why would I use the key I've stolen from a house to open the door if I can access the house already through the window?
So, why hash? why salt? I don't understand. Please, somebody help me.
Thanks in advance.
Important Note: I'm not against hashing or salting, I just want to clarify things.
","
If that so, then why would the hacker recover the password if he already has access to the database?

Reasons are many. Here are a few:

People reuse their passwords, so not leaking everybodys real passwords does limit the impact of such attack.
Without the real passwords, the hacker will still not be able to log in and, say, post new entries on the hacked system.
Who says all information is stored in the database? What if the database solely consisted of the user name and hashed/salted passwords? Then, knowing the content doesn't help much.

","587","<security><language-agnostic><hash><salt><data-retrieval>","9","11","5","2011-08-18 09:14:24","7104108","1","1","276052","","2011-08-18 08:06:57","2011-08-18 07:50:35",""
"7104060","What is the point of salt and hashing if database is accessible?","I just learned the concept of hashing (""Hey! don't forget the salt!"") and using salt to make the password secured.
Hashing it is a one way encryption (actually not encryption but hashing) so it cannot be reversed engineered. Salting is prefixing or appending randomly created values to the password before hashing 'coz the problem in hashing (just hashing) is, some genius has provided a hash table of words from the dictionary so that they'll just compare the hash from that dictionary to the user's table from the database to login - W-wait? did I say table from the database? So it means somebody can access the database so we have to use salt? If that so, then why would the hacker recover the password if he already has access to the database? If I were him, I'll just get all the details I want from the database, why would I use the key I've stolen from a house to open the door if I can access the house already through the window?
So, why hash? why salt? I don't understand. Please, somebody help me.
Thanks in advance.
Important Note: I'm not against hashing or salting, I just want to clarify things.
","Salt is used so that identical passwords have different hashes, making an attempt at figuring out the passwords harder.
Hashing makes it so that generating the password via brute force methods take a very long time (especially with SHA2) so that it makes it ""unfeasible"" to find out the password.
A hash will do you no good if you don't know the password as typing the hash into a password field will not work (obviously). 
Usually hackers only find users tables and maybe some basic information but if they want to be able to actually access that users info and change something then they need the actual password (since they don't know the whole DB schema changing something could look very suspicious and is easily traceable unless you legitimately login as the person)
One last thing I forgot about is that people do reuse passwords. So maybe you hacked some random site that has no useful information on it but the person used the same user/password combination on their online banking. This could be very bad as you can see so not being able to easily discern the password is key.
","587","<security><language-agnostic><hash><salt><data-retrieval>","9","3","5","2011-08-18 09:14:24","7104108","1","1","276052","","2011-08-18 08:06:57","2011-08-18 07:50:35",""
"7104060","What is the point of salt and hashing if database is accessible?","I just learned the concept of hashing (""Hey! don't forget the salt!"") and using salt to make the password secured.
Hashing it is a one way encryption (actually not encryption but hashing) so it cannot be reversed engineered. Salting is prefixing or appending randomly created values to the password before hashing 'coz the problem in hashing (just hashing) is, some genius has provided a hash table of words from the dictionary so that they'll just compare the hash from that dictionary to the user's table from the database to login - W-wait? did I say table from the database? So it means somebody can access the database so we have to use salt? If that so, then why would the hacker recover the password if he already has access to the database? If I were him, I'll just get all the details I want from the database, why would I use the key I've stolen from a house to open the door if I can access the house already through the window?
So, why hash? why salt? I don't understand. Please, somebody help me.
Thanks in advance.
Important Note: I'm not against hashing or salting, I just want to clarify things.
","If you have the cleartext passwords and e-mail addresses from the database, you can wreak havoc! It's not about getting credentials to the site that is already hacked, it's about getting login information to other sites. 
Most people don't use one password only for one site, so if you have the password for their primary e-mail address, you probably have access to ALL their accounts on every site (through password resetting).  
","587","<security><language-agnostic><hash><salt><data-retrieval>","9","4","5","2011-08-18 09:14:24","7104108","1","1","276052","","2011-08-18 08:06:57","2011-08-18 07:50:35",""
"7104060","What is the point of salt and hashing if database is accessible?","I just learned the concept of hashing (""Hey! don't forget the salt!"") and using salt to make the password secured.
Hashing it is a one way encryption (actually not encryption but hashing) so it cannot be reversed engineered. Salting is prefixing or appending randomly created values to the password before hashing 'coz the problem in hashing (just hashing) is, some genius has provided a hash table of words from the dictionary so that they'll just compare the hash from that dictionary to the user's table from the database to login - W-wait? did I say table from the database? So it means somebody can access the database so we have to use salt? If that so, then why would the hacker recover the password if he already has access to the database? If I were him, I'll just get all the details I want from the database, why would I use the key I've stolen from a house to open the door if I can access the house already through the window?
So, why hash? why salt? I don't understand. Please, somebody help me.
Thanks in advance.
Important Note: I'm not against hashing or salting, I just want to clarify things.
","To be in possession of the user records from the database does not necessarily mean you have access to the database. Through some leak in the website (hello, SQL injection) you may be able to get access to data you shouldn't have access to without necessarily compromising the whole server. Badly handled backups, shared servers, incompetent or malicious employees may all make that possible.
Also and possibly more importantly, you need to protect your customer's passwords on other sites. People unfortunately reuse their passwords all over the place. If your tiny chat room database gets compromised, people's passwords at their banking sites may be compromised with it.
","587","<security><language-agnostic><hash><salt><data-retrieval>","9","4","5","2011-08-18 09:14:24","7104108","1","1","276052","","2011-08-18 08:06:57","2011-08-18 07:50:35",""
"7104060","What is the point of salt and hashing if database is accessible?","I just learned the concept of hashing (""Hey! don't forget the salt!"") and using salt to make the password secured.
Hashing it is a one way encryption (actually not encryption but hashing) so it cannot be reversed engineered. Salting is prefixing or appending randomly created values to the password before hashing 'coz the problem in hashing (just hashing) is, some genius has provided a hash table of words from the dictionary so that they'll just compare the hash from that dictionary to the user's table from the database to login - W-wait? did I say table from the database? So it means somebody can access the database so we have to use salt? If that so, then why would the hacker recover the password if he already has access to the database? If I were him, I'll just get all the details I want from the database, why would I use the key I've stolen from a house to open the door if I can access the house already through the window?
So, why hash? why salt? I don't understand. Please, somebody help me.
Thanks in advance.
Important Note: I'm not against hashing or salting, I just want to clarify things.
","Suppose an attacker somehow gains access to a backup of the database, containing unrecoverable hashed passwords. Then they have all the data that was in there yesterday, which is quite bad. But at least they don't have access to the data that will be in there tomorrow, and they can't delete anything from the real site, deface it, serve malware via its CMS, etc.
Suppose an attacker gets everyone's plaintext passwords, especially if that includes the administrator. Oops.
","587","<security><language-agnostic><hash><salt><data-retrieval>","9","1","5","2011-08-18 09:14:24","7104108","1","1","276052","","2011-08-18 08:06:57","2011-08-18 07:50:35",""
"21155170","Remember me checkbox","I have a winform application that have user login form. I store my users login information in database with 3 parameters: username, hashed password, salt:
salt = random string that will be stored in database for every user
hashed password = MD5(MD5(inputPassword) + MD5(salt))

I want to have check box named Remember me in my login form, that when a user enter the correct information and check it, for the next time user open the program, their user information will be entered automatically, user just need to click login button.
I can't save the entered password directly and next time fill the password textBox with it because i know some softwares that can read textBoxes like this and it's not secure.
Question:

How I can do that without saving user password?
If I need to save some information, How encrypt them?
Is it necessary to change my security policy? 

Note that this is Client/Server application and login form created for client side.
","You can save the hashed value of password in your local database, and you can have a hidden check box, which tells you that you have filled the info from database which is already hashed  and while asking authentication you do not need to hash the password value again.
EDIT If the user tries to enter the password manually then you can clear the text box value and alter the check box checked value, so that you know now the value is not the hashed one.
","584","<c#><winforms><security><hash><salt>","0","1","4","2018-08-23 11:26:42","21155321","1","1","","","","2014-01-16 06:55:06",""
"21155170","Remember me checkbox","I have a winform application that have user login form. I store my users login information in database with 3 parameters: username, hashed password, salt:
salt = random string that will be stored in database for every user
hashed password = MD5(MD5(inputPassword) + MD5(salt))

I want to have check box named Remember me in my login form, that when a user enter the correct information and check it, for the next time user open the program, their user information will be entered automatically, user just need to click login button.
I can't save the entered password directly and next time fill the password textBox with it because i know some softwares that can read textBoxes like this and it's not secure.
Question:

How I can do that without saving user password?
If I need to save some information, How encrypt them?
Is it necessary to change my security policy? 

Note that this is Client/Server application and login form created for client side.
","As per my understand, if you want to have remember me functionality then you should/must have your password stored in any form to authenticate the user.
One way is, have 2 functionality in your product. One to have a Hash and this will be in the database and I think you are doing it currently. Apart from this, also have functionality to Encrypt/Decrypt. When remember me is checked then just save the encrypted value in your app.config file. Now when ever the user opens the application again, check for the encrypted password and decrypt to authenticate user.
User dbw just posted my other approach :)
Hope it helps.
","584","<c#><winforms><security><hash><salt>","0","0","4","2018-08-23 11:26:42","21155321","1","1","","","","2014-01-16 06:55:06",""
"21155170","Remember me checkbox","I have a winform application that have user login form. I store my users login information in database with 3 parameters: username, hashed password, salt:
salt = random string that will be stored in database for every user
hashed password = MD5(MD5(inputPassword) + MD5(salt))

I want to have check box named Remember me in my login form, that when a user enter the correct information and check it, for the next time user open the program, their user information will be entered automatically, user just need to click login button.
I can't save the entered password directly and next time fill the password textBox with it because i know some softwares that can read textBoxes like this and it's not secure.
Question:

How I can do that without saving user password?
If I need to save some information, How encrypt them?
Is it necessary to change my security policy? 

Note that this is Client/Server application and login form created for client side.
","IMHO, this can't be done. If you are encrypting/hashing/salting and saving the password in DB then you can't really get it back in plain text.
Of course, you can trick the user (I will tell you how), but need to define what you want the user to do:

Enter at least password again (every time) even after user has asked to ""remember me"". This can be done easily, just retrieve the user id and keep password box blank. No tricks. Plain and Simple. Even Google do it for their sites.
Now trick time. Let the user enter the application without password but just username. You can just enter some default value in password box (user will think the password is actually retrieved but you will program such a way that whenever ""remember me"" option is selected, you will just auti-fill this info) and let the user go in. But this is not good option because potentially anyone using that system will be able to logon to your app. You will have to take a call as per your security requirement.

","584","<c#><winforms><security><hash><salt>","0","0","4","2018-08-23 11:26:42","21155321","1","1","","","","2014-01-16 06:55:06",""
"21155170","Remember me checkbox","I have a winform application that have user login form. I store my users login information in database with 3 parameters: username, hashed password, salt:
salt = random string that will be stored in database for every user
hashed password = MD5(MD5(inputPassword) + MD5(salt))

I want to have check box named Remember me in my login form, that when a user enter the correct information and check it, for the next time user open the program, their user information will be entered automatically, user just need to click login button.
I can't save the entered password directly and next time fill the password textBox with it because i know some softwares that can read textBoxes like this and it's not secure.
Question:

How I can do that without saving user password?
If I need to save some information, How encrypt them?
Is it necessary to change my security policy? 

Note that this is Client/Server application and login form created for client side.
","There is a functionality for this on windows. DataProtector and ProtectedData classes can be used to encrypt binary data based on machine information. You can specify the scope of the encryption to be User based or System based it can come in handy for this.

If you think it's better you can only serialize the Login Token information not the User credentials.
You just encrypt the serialized information and store that anywhere you want. And decrypt and deserialize it when you want to use it on startup.
I think so, yes.

You can check them out here:
https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.dataprotector?view=netframework-4.7.2
https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.protecteddata?view=netframework-4.7.2
","584","<c#><winforms><security><hash><salt>","0","0","4","2018-08-23 11:26:42","21155321","1","1","","","","2014-01-16 06:55:06",""
"4240861","Does this look like a strong salt for a password","Does this look like a safe salt to use with a password? Any improvements or suggestions or obvious flaws?
$salt = '';
for ($i = 0; $i < 50; $i++) {
   $salt .= chr(rand(33, 126));
}

","I would use mt_rand since it is faster, but this is definitely sufficient for salt.
","580","<php><security><hash><salt>","5","3","4","2010-11-22 18:32:30","4240901","1","2","183528","","2010-11-22 18:32:30","2010-11-21 22:45:47",""
"4240861","Does this look like a strong salt for a password","Does this look like a safe salt to use with a password? Any improvements or suggestions or obvious flaws?
$salt = '';
for ($i = 0; $i < 50; $i++) {
   $salt .= chr(rand(33, 126));
}

","I don't think rand is a good PRNG. If I recall correctly it maps directly to the c PRNG, which in many implementations has a horribly small(like 32bit) internal state.
And it isn't well seeded either. But since the most important role of a salt is preventing pre-calculated rainbow-tables, which this code does, it should be enough.
And I typically split my salt in two parts:

A per random per user part which is stored in the database alongside the hash
A per application salt which is stored in the config file.

That way an attacker who only gains access to the database but not the config file(a probable scenario if the attack uses SQL injection) then he still can't crack the passwords.
","580","<php><security><hash><salt>","5","5","4","2010-11-22 18:32:30","4240901","1","2","183528","","2010-11-22 18:32:30","2010-11-21 22:45:47",""
"4240861","Does this look like a strong salt for a password","Does this look like a safe salt to use with a password? Any improvements or suggestions or obvious flaws?
$salt = '';
for ($i = 0; $i < 50; $i++) {
   $salt .= chr(rand(33, 126));
}

","Length is what mostly makes a salt safe.  Randomness isn't super important, as long as it is different for every user.  You're going to end up storing it in plain-text anyways so you can use it during hashing.
","580","<php><security><hash><salt>","5","3","4","2010-11-22 18:32:30","4240901","1","2","183528","","2010-11-22 18:32:30","2010-11-21 22:45:47",""
"4240861","Does this look like a strong salt for a password","Does this look like a safe salt to use with a password? Any improvements or suggestions or obvious flaws?
$salt = '';
for ($i = 0; $i < 50; $i++) {
   $salt .= chr(rand(33, 126));
}

","You don't need to make salts really long and it's not important that they be cryptographically secure. The point of salts is simply to make rainbow table attacks harder as you no longer have a 1-to-1 mapping between passwords and hashes. (They also keep administrators with wandering eyes from seeing 482c811da5d5b4bc6d497ffa98491e38 in the database and then knowing Joe's password is ""password123"".)
Even a 4-byte salt would be more than sufficient as you'd now have 232 &approx 4 billion potential hashes for any password.
","580","<php><security><hash><salt>","5","8","4","2010-11-22 18:32:30","4240901","1","2","183528","","2010-11-22 18:32:30","2010-11-21 22:45:47",""
"815013","Encrypted passwords of not-encrypted passwords user base","Some time ago I joined new project. It was under development for quite a long time.
The thing that surprised me was that all users' passwords are stored in non-encrypted form.
I explained huge security vulnerabilities of this to our management - it looks like they agree with that and want to make project more secure. Team members agree too.
We have about 20K users in the system.
Actually it is quite stressful to make this work - migrate non-encrypted passwords to encrypted form. If something goes wrong it can lead to project's disaster.
How can I lower this stress?
Backup?
Unit-tests(integrational tests)?
","If possible you can try this: Send out an email to all your users to update their passwords with a time-out period, after which they cannot work if they do not change their passwords. Hash these new passwords and store the hash. This would require some changes on the frontend (i.e. the data it sends back).
","578","<security><encryption><passwords><salt>","2","0","6","2009-05-02 15:35:58","815034","0","1","","","","2009-05-02 15:19:06",""
"815013","Encrypted passwords of not-encrypted passwords user base","Some time ago I joined new project. It was under development for quite a long time.
The thing that surprised me was that all users' passwords are stored in non-encrypted form.
I explained huge security vulnerabilities of this to our management - it looks like they agree with that and want to make project more secure. Team members agree too.
We have about 20K users in the system.
Actually it is quite stressful to make this work - migrate non-encrypted passwords to encrypted form. If something goes wrong it can lead to project's disaster.
How can I lower this stress?
Backup?
Unit-tests(integrational tests)?
","Well, be careful with your backup because it will contain unencrypted user passwords :-)
Assuming that the passwords are stored in a database, an easy solution would go something like this:
1) Make a secure backup of the entire table data
2) Create new column (PasswordEncrypted or similar name)
3) Use an UPDATE query to update each row's new column with an MD5 of the unencrypted password while using a 32 byte or larger salt. Pretty much every database system today has an MD5 function so you won't even have to leave your SQL prompt
4) Keep the plaintext column in the interim and update your application/scripts accordingly to work with the salted password.
5) Rename the plaintext old password column to temporarily take it out of play and test your application- if there are any problems then go back to step 4 and fix your mistakes.
6) When everything is working properly drop the plaintext password column
7) Encourage users to pick a new password now that you have some level of security in place to mitigate the effects of any previous attacks which may have been successful.
","578","<security><encryption><passwords><salt>","2","5","6","2009-05-02 15:35:58","815034","0","1","","","","2009-05-02 15:19:06",""
"815013","Encrypted passwords of not-encrypted passwords user base","Some time ago I joined new project. It was under development for quite a long time.
The thing that surprised me was that all users' passwords are stored in non-encrypted form.
I explained huge security vulnerabilities of this to our management - it looks like they agree with that and want to make project more secure. Team members agree too.
We have about 20K users in the system.
Actually it is quite stressful to make this work - migrate non-encrypted passwords to encrypted form. If something goes wrong it can lead to project's disaster.
How can I lower this stress?
Backup?
Unit-tests(integrational tests)?
","Write lots of tests, that test lots of corner cases (upper and lower case, numbers, symbols, Unicode characters, long passwords, etc). When you're developing and testing, create a system to move back to the old system (by providing the old password list, of course, since once the passwords are hashed you won't be able to convert them back directly). Save a copy of the current password list. Convert the passwords over in a test file or test database, and then use the saved copied of the passwords to test that everything worked. Now move the system into production, and make sure it works for your users. If it does not, you have already tested the plan for migrating back to the old system. Once it has been demonstrated to work for a couple of weeks, you can delete the cleartext password list and you're all set.
","578","<security><encryption><passwords><salt>","2","1","6","2009-05-02 15:35:58","815034","0","1","","","","2009-05-02 15:19:06",""
"815013","Encrypted passwords of not-encrypted passwords user base","Some time ago I joined new project. It was under development for quite a long time.
The thing that surprised me was that all users' passwords are stored in non-encrypted form.
I explained huge security vulnerabilities of this to our management - it looks like they agree with that and want to make project more secure. Team members agree too.
We have about 20K users in the system.
Actually it is quite stressful to make this work - migrate non-encrypted passwords to encrypted form. If something goes wrong it can lead to project's disaster.
How can I lower this stress?
Backup?
Unit-tests(integrational tests)?
","I would just hash the current passwords, store them in a new database field, and begin using that field while deleting the password field. I would then notify my users that now would be a good time to change passwords as you've implemented more security mechanisms to keep their data safe.
To have a backup, just do SELECT * INTO Backup FROM UserData
","578","<security><encryption><passwords><salt>","2","1","6","2009-05-02 15:35:58","815034","0","1","","","","2009-05-02 15:19:06",""
"815013","Encrypted passwords of not-encrypted passwords user base","Some time ago I joined new project. It was under development for quite a long time.
The thing that surprised me was that all users' passwords are stored in non-encrypted form.
I explained huge security vulnerabilities of this to our management - it looks like they agree with that and want to make project more secure. Team members agree too.
We have about 20K users in the system.
Actually it is quite stressful to make this work - migrate non-encrypted passwords to encrypted form. If something goes wrong it can lead to project's disaster.
How can I lower this stress?
Backup?
Unit-tests(integrational tests)?
","You can get extra confidence by running both authentication methods (encrypted and unencrypted) for each login attempt, and if they yield a different outcome, get an alert e-mail sent to you. This change is not visible to your users, so it can run for weeks and even months. Once you see that the old and the new authentication works for a high enough percentage of your users, deactivate the old one.
","578","<security><encryption><passwords><salt>","2","1","6","2009-05-02 15:35:58","815034","0","1","","","","2009-05-02 15:19:06",""
"815013","Encrypted passwords of not-encrypted passwords user base","Some time ago I joined new project. It was under development for quite a long time.
The thing that surprised me was that all users' passwords are stored in non-encrypted form.
I explained huge security vulnerabilities of this to our management - it looks like they agree with that and want to make project more secure. Team members agree too.
We have about 20K users in the system.
Actually it is quite stressful to make this work - migrate non-encrypted passwords to encrypted form. If something goes wrong it can lead to project's disaster.
How can I lower this stress?
Backup?
Unit-tests(integrational tests)?
","What sort of project is this? A web application, desktop application?
If you're going down the refactoring road, is there a reason that the passwords need to be stored in something reversible like encryption? In general, it's good practice to hash your passwords with something like SHA then hash the input with the same algorithm and compare the results. You only store the hashed values, not the actual passwords. This gives you the ability to check that someone has entered the correct password without exposing your users to the possibility of your encryption being broken and their passwords exposed.
Specific information about your approach isn't something I can provide (since I don't know how it works), but your best bet is to create an additional column to store the hashed passwords, hash the existing passwords, then keep them up to date with any password changes.  Use this new column for all new development, then once the move is complete and tested, delete the column with the plaintext passwords.
","578","<security><encryption><passwords><salt>","2","2","6","2009-05-02 15:35:58","815034","0","1","","","","2009-05-02 15:19:06",""
"4830614","Encrypting Database Content","If i am not wrong, when you want to encrypt the content in the database you will use md5.  I use that right now for passwords.  But now i want to add encryption to all personal information, etc for enterprise clients.  Below are my questions:

If I md5 everything, will php display everything the normal way, like without the md5?
When i allow editing of the content, i will have to display the info without the md5 and then add md5 upon submission, correct?
If someone gets access to the database, they will only see md5.  But if they download it and then remove md5, wouldn't they see all the info?

As you can tell i am an amateur under pressure.  Please correct me if i am wrong with my thinking of md5.  If so, how can i encrypt the databases keeping in mind that info will be edited by users anytime.  
Thanks.
","MD5 is a hashing algorithm, not an encryption algorithm. Hashing is one way; that is, you cannot take hashed data and turn it back into the original data. MD5 is used to hash passwords (well, hashing algorithms are used to hash passwords...MD5 is generally regarded as insecure and not suitable for applications involving security...like passwords) because all you care about is whether or not the passwords match, not what the password actually is. This allows you to store a token in your database (the hash) that you can use to compare without actually storing the password. 
If you're going to do application-level encryption of database data (rather than relying on any RDBMS-specific encryption features), you will always have to encrypt the data (in code) before you put it into the database and decrypt the data (in code) whenever you take it out of the database. For systems like this, a symmetric key encryption algorithm like AES is generally used.
","571","<database><encryption><hash><md5><salt>","0","9","5","2011-01-28 16:43:17","4830630","1","1","","","","2011-01-28 16:29:14",""
"4830614","Encrypting Database Content","If i am not wrong, when you want to encrypt the content in the database you will use md5.  I use that right now for passwords.  But now i want to add encryption to all personal information, etc for enterprise clients.  Below are my questions:

If I md5 everything, will php display everything the normal way, like without the md5?
When i allow editing of the content, i will have to display the info without the md5 and then add md5 upon submission, correct?
If someone gets access to the database, they will only see md5.  But if they download it and then remove md5, wouldn't they see all the info?

As you can tell i am an amateur under pressure.  Please correct me if i am wrong with my thinking of md5.  If so, how can i encrypt the databases keeping in mind that info will be edited by users anytime.  
Thanks.
","
If I md5 everything, will php display everything the normal way, like without the md5?

Nope.  Everything will be an md5 digest.  The original data will be (almost) impossible to recover from the digest.

When i allow editing of the content, i will have to display the info without the md5 and then add md5 upon submission, correct?

Since the md5 digest cannot (easily) be decoded into the original data, you'll have to keep the original info somewhere.

If someone gets access to the database, they will only see md5. But if they download it and then remove md5, wouldn't they see all the info?

Nope.  The md5 digest cannot (easily) be reversed to reconstruct any of the original info.
","571","<database><encryption><hash><md5><salt>","0","2","5","2011-01-28 16:43:17","4830630","1","1","","","","2011-01-28 16:29:14",""
"4830614","Encrypting Database Content","If i am not wrong, when you want to encrypt the content in the database you will use md5.  I use that right now for passwords.  But now i want to add encryption to all personal information, etc for enterprise clients.  Below are my questions:

If I md5 everything, will php display everything the normal way, like without the md5?
When i allow editing of the content, i will have to display the info without the md5 and then add md5 upon submission, correct?
If someone gets access to the database, they will only see md5.  But if they download it and then remove md5, wouldn't they see all the info?

As you can tell i am an amateur under pressure.  Please correct me if i am wrong with my thinking of md5.  If so, how can i encrypt the databases keeping in mind that info will be edited by users anytime.  
Thanks.
","As far as I know, MD5 is known not to really be a secure hashing function nowadays. There are places out there on the web offering reverse MD5 services, where they collect a huge database of strings with their MD5 equivalent. Try going for something like SHA-512 and use techniques like iterative hashing to make it more secure. PHP has a crypt() library you might like to checkout, or use SQLite database encryption maybe.
","571","<database><encryption><hash><md5><salt>","0","2","5","2011-01-28 16:43:17","4830630","1","1","","","","2011-01-28 16:29:14",""
"4830614","Encrypting Database Content","If i am not wrong, when you want to encrypt the content in the database you will use md5.  I use that right now for passwords.  But now i want to add encryption to all personal information, etc for enterprise clients.  Below are my questions:

If I md5 everything, will php display everything the normal way, like without the md5?
When i allow editing of the content, i will have to display the info without the md5 and then add md5 upon submission, correct?
If someone gets access to the database, they will only see md5.  But if they download it and then remove md5, wouldn't they see all the info?

As you can tell i am an amateur under pressure.  Please correct me if i am wrong with my thinking of md5.  If so, how can i encrypt the databases keeping in mind that info will be edited by users anytime.  
Thanks.
","MD5 is one way hashing function. It won't be decrypted. JUST ENCRYPTED.
","571","<database><encryption><hash><md5><salt>","0","1","5","2011-01-28 16:43:17","4830630","1","1","","","","2011-01-28 16:29:14",""
"4830614","Encrypting Database Content","If i am not wrong, when you want to encrypt the content in the database you will use md5.  I use that right now for passwords.  But now i want to add encryption to all personal information, etc for enterprise clients.  Below are my questions:

If I md5 everything, will php display everything the normal way, like without the md5?
When i allow editing of the content, i will have to display the info without the md5 and then add md5 upon submission, correct?
If someone gets access to the database, they will only see md5.  But if they download it and then remove md5, wouldn't they see all the info?

As you can tell i am an amateur under pressure.  Please correct me if i am wrong with my thinking of md5.  If so, how can i encrypt the databases keeping in mind that info will be edited by users anytime.  
Thanks.
","MD5 is an hashing function! Is a one-way function.
You cannot decode a MD5 hash ! 
If you encode you content with MD5, you loose the data!!! 
Instead use 3DES, BLOWFISH or other encryption methods! 
Encription depends from DB to DB. More or less every db has an encription module to use (and pay)
","571","<database><encryption><hash><md5><salt>","0","3","5","2011-01-28 16:43:17","4830630","1","1","","","","2011-01-28 16:29:14",""
"28193146","How to encrypt random value using some unique key in java","Hello I want to encrypt a unique random value using a key in Java. I will send this unique random value to each webservices to make system secure so nobody can hit my web services url on rest client.
Please guide me a way to achieve this.
Thanks in advance.
","There are two solutions for that problem:
In summary, the first; you encrypt the data over sockets (by reverse engineering, like brute-force, you can break the password used to encrypt). The second; use a SSL (Security Socket Layer). I had used the first solution, then I can detail for you how to implement. Here you are:
1- There are some API's to help you doing that. I used jasypt a time ago, and I recommend. But there are others too; like bouncy castle.
Usually, they are simple to implement. In jasypt, you can solve this issue like that, just run to test:
public class SecurityUtil {

private static String passEncrypt;

/*
 * Get the message encrypted
 * @param String string to encrypt
 * @return encrypted message
 */
public static String Encryptor(String message){
    SecurityUtil.testEncryptPassSet();
    StandardPBEStringEncryptor encryptor = new StandardPBEStringEncryptor();
    encryptor.setPassword(SecurityUtil.passEncrypt);        
    String encryptedText = encryptor.encrypt(message);
    return encryptedText;
}
/*
 * Get the decrypt message
 * @param encrypted message
 * @return String decrypted message
 * 
 */
public static String Decryptor(String message) {
    SecurityUtil.testEncryptPassSet();
    StandardPBEStringEncryptor decryptor = new StandardPBEStringEncryptor();
    decryptor.setPassword(SecurityUtil.passEncrypt);  
    String decryptedText = decryptor.decrypt(message);
    return decryptedText;
}


/*
 * set the encryption password
*/
public static void setPassEncrypt(String passEncrypt) {
    SecurityUtil.passEncrypt = passEncrypt;
}

public static void testEncryptPassSet() {
    if (SecurityUtil.passEncrypt == null){
        System.out.println(""Must set the password after"");
    }
}

public static void main (String[] args){
    SecurityUtil.setPassEncrypt(""Test""); //here you key
    String encrypted;
    System.out.println(""Encrypted: ""+(encrypted = SecurityUtil.Encryptor(""This is a test message"")));

    System.out.println(""Decryp: ""+SecurityUtil.Decryptor(encrypted));
}

}

OUTPUT:
Encrypted: eESU3c2IzRSl2VvHs4Otyh+Q3aBisiP6XPfyKpbXMdQ=
Decryp: This is a test message
2- You can study how implement SSL over sockets here. Also, here are some examples. And here we have a question of similar subject in StackOverflow.
","570","<java><hash><passwords><salt>","0","1","1","2015-01-30 13:14:03","28193920","2","","2455259","","2015-01-28 13:14:56","2015-01-28 13:09:21",""
"39915446","SHA1 Salted Hash","I'm working on Hashing and have just come across my first salted hash. I can't figure out how to separate or identify the salt from the hash. I have figured out how to get the encrypted message below, but just need this seperation.
I have been up for almost 24 hours working on it. Any help would be appreciated!
74c95cff4b3daa8a65ae413bfab10dc45d1a07b6
","You cannot. The salt is added to the original string before it was hashed.
Its sha1(str + salt) not sha1(str) + salt so you cannot split it from the hash.
","569","<hash><salt>","-1","1","1","2016-10-07 11:14:53","","7","","","","","2016-10-07 10:48:59",""
"26765881","TurboPower Lockbox 3 remove salt","In the answers in this question I found a reply: TurboPower LockBox 3: AES128 and padding ISO 10126

(2) For most chaining modes, TPLB3 will automatically add salt. This is normally a good thing, but if you need it without, you can remove the option for it.

How can I do that? Namely I need encryption which has the same cipher text length as the plain text length.
","Assuming that you are not using ECB, the simplest way would be to remove the first 8 bytes of the ciphertext. The first 8 bytes (64 bits) is the salt nonce. It is also the low 64 bits of the IV. The high 64 bits of the IV are zero.
Please note: Not salting your messages is very bad practice and a security weakness. (Refer to wikipedia for more information). You say you need encryption which has the same ciphertext length as the plaintext length. This is basically saying, you want weak encryption. It's up to you, but my advice is the think about your requirements very carefully before proceeding.
An alternative technique would be to create your own chaining mode and register it in the cryptographic library. For example, if you wanted CBC without salt, create a class descendant from TCBC (unit TPLB3.CBC) and just override the ChainingFeatures() function to add the cfNoNounce feature. Refer to in-line comments in unit TPLB3.BlockCipher. However, my recommendation is the first method.
You might also like to read answers to related questions:

AES Encrypt/Decrypt Delphi & PHP
TPLockBox3 and PHP - AES Encrypt in Delphi, Decrypt in PHP
Turbopower Lockbox3 - Can I control initialization vector and padding for AES-256 encryption?

Also note that if you are using ECB chaining mode, there is no salt, was this mode has the cfNoNounce feature automatically. (ECB is bad. Don't use it, except for testing purposes).
Footnote:
I am the main author of TPLockBox 3, and I maintain the version of the library at:

http://tplockbox.googlecode.com/
http://lockbox.seanbdurkin.id.au/HomePage

I assume that you are using that version, and not the SourceForge one. I am expecting to release version 3.6.0 on 7-Nov-2014.
","561","<encryption><salt><lockbox-3><turbopower>","0","1","1","2014-11-06 01:17:11","26770045","1","","-1","","2017-05-23 10:30:13","2014-11-05 19:53:47",""
"35045663","Is PHP password salt really necessary?","I've asked myself this question a dozen of times.
Is a password salt really necessary?
I couldn't find any good literature on the subject.
From a security perspective, do password salts help?
If a database is breached, isn't the salt lost if the password is anyways?
Also, from a brush force perspective, if i ban IP's is there really any reason to store salts?
","Yes, you should always use salts. fortunately PHP is pretty clever. From this article:

If you use the default options for the password_hash() function PHP will generate a random salt for each password as it is hashed. The random salt is an additional layer of security which makes it exceptionally hard to crack any passwords. Even if two or more users use the same password each of their hashes will be different. 

This gets you away from having to generate a salt and leaves the heavy lifting up to PHP. The verification piece, password_verify(), uses the random salt placed in the hash to be able to test against a given password. 
From the docs for password_verify():

Note that password_hash() returns the algorithm, cost and salt as part of the returned hash. Therefore, all information that's needed to verify the hash is included in it. This allows the verify function to verify the hash without needing separate storage for the salt or algorithm information.

","561","<php><database><hash><passwords><salt>","3","6","4","2016-01-28 10:13:05","35045819","3","","4011315","","2016-01-27 18:55:02","2016-01-27 18:52:41",""
"35045663","Is PHP password salt really necessary?","I've asked myself this question a dozen of times.
Is a password salt really necessary?
I couldn't find any good literature on the subject.
From a security perspective, do password salts help?
If a database is breached, isn't the salt lost if the password is anyways?
Also, from a brush force perspective, if i ban IP's is there really any reason to store salts?
","it does help against 'rainbow tables', which are precompiled hashes for known passwords. when you salt the password, they are useless, because the hash will be different.
","561","<php><database><hash><passwords><salt>","3","1","4","2016-01-28 10:13:05","35045819","3","","4011315","","2016-01-27 18:55:02","2016-01-27 18:52:41",""
"35045663","Is PHP password salt really necessary?","I've asked myself this question a dozen of times.
Is a password salt really necessary?
I couldn't find any good literature on the subject.
From a security perspective, do password salts help?
If a database is breached, isn't the salt lost if the password is anyways?
Also, from a brush force perspective, if i ban IP's is there really any reason to store salts?
","You do need to salt because an unsalted hash is too easy to crack (using rainbow tables).
First, unsalted hashes result in more collisions. If two passwords used baseball as their password, cracking one is enough to crack both. If both are salted, so that one becomes baseball#sd7#$j and one is baseballL4&$h1, that doesn't work.
Second, a password like baseball or even *4kB$l!h_' is going to be easy to reverse using rainbow tables if it isn't salted. This is because it's easy to create a rainbow table covering all passwords up to a certain length. If properly salted, though, *4kB$l!h_' might be turned into *4kB$l!h_'H4Sj$8)@80-+2nm:W[oa}u#*4$lNamA{ or something else absurdly long. Generating a rainbow table for that is much, much harder.
With PHP, make your life easier and just use password_hash(). Whatever you do, do not roll your own security algorithms, especially with respect to password storage. You will get burned.
For lots more information, read Why are salted hashes more secure? You may also want to spend some time with OWASP's Password Storage Cheat Sheet and it's PHP Security Cheat Sheet. 
","561","<php><database><hash><passwords><salt>","3","3","4","2016-01-28 10:13:05","35045819","3","","4011315","","2016-01-27 18:55:02","2016-01-27 18:52:41",""
"35045663","Is PHP password salt really necessary?","I've asked myself this question a dozen of times.
Is a password salt really necessary?
I couldn't find any good literature on the subject.
From a security perspective, do password salts help?
If a database is breached, isn't the salt lost if the password is anyways?
Also, from a brush force perspective, if i ban IP's is there really any reason to store salts?
","I would like to point out the real purpose of using salts. As explained in another answer, different salts lead to different hashes for identical passwords, but this is not the main purpose.
With using different salts for each password, you prevent building one single rainbow table to get all passwords at once.
As you wrote, the salt is not secret. To get a single password, an attacker could still build a rainbow table using this known salt. The problem is, that (s)he would have to build a second rainbow table for the second password, because it used a different salt. In other words, the first rainbow table cannot be reused to find other passwords.
Building a rainbow table to get only a single password doesn't make sense, it is easier to brute-force until you find a match, calculating the rest of the rainbow table is useless since you cannot reuse it. That's why we say, unique salts prevent rainbow table attacks, because brute-forcing is faster than working with rainbow tables.
","561","<php><database><hash><passwords><salt>","3","1","4","2016-01-28 10:13:05","35045819","3","","4011315","","2016-01-27 18:55:02","2016-01-27 18:52:41",""
"48400412","Do we need to use a fixed salt with BCrypt?","Brypt generate a random salt for every password. This is ok to prevent rainbow table attack. But is this ok to prevent brute force attack ? I mean if the user choose a weak common know password, brute force attack can be made on well know password list. So my idea will be to concatenate the user password with a fixed salt and eventually also with a user id salt (ie: user pseudo). If the attacker don't have access to the code of the software (if he hack only the database) then he will not be able to find real password using brute force attack with well know password list. 
so what the good way to do ?
Bcrypt(apassword) 

or
bcrypt(apassword+pseudo)

or
bcrypt(apassword+pseudo+fixedsalt)

","As you wrote, the salt prevents rainbow table attacks and doesn't help against brute-forcing, it's BCrypt's slowness which mitigates brute-forcing. BCrypt offers a cost factor, which controls the time necessary to calculate a single hash.
The additional protection you want can be achieved better by encrypting the calculated hash with a server side key (any algorithm like AES-256). The key doesn't become part of the hash then and can be exchanged whenever this is necessary. The advantage is the same as with your fixed salt (actually called pepper), only an attacker with privileges on the server can start cracking the password hashes. I tried to explain this at the end of my tutorial about safely storing passwords.
So let the salt do its job and do not mix it up with other tasks, instead encrypt the password-hashes afterwards.
","560","<security><hash><passwords><bcrypt><salt>","1","2","1","2018-01-24 07:50:18","48417312","5","","","","","2018-01-23 11:18:09",""
"15046802","Generating unique salt (non-validated example given)","I am redesigning my application where I need to have an unique salt.
I provide the way it is and I look forward to hear if this does not work the correct way or other ways I can improve it.
public function generatesalt($x=0)
{
    $x++;

    $string = md5(uniqid(rand(), true));
    $salt = substr($string, 0, 12);

    $stored = array();
    $qw = $this->registry->dbi->query(""SELECT `salt` FROM `"".PRE.""membership`"")->results();
    foreach ($qw as $k => $v)
        $stored[] = $v['salt'];


    if (in_array($salt,$stored))
        return $this->generatesalt($x);

    return $salt."" /// "".$x;
}   

Thanks. Again, my question is if this looks to work the correct way and you can't see serious disadvantages.
","Doesn't storing salts in a database that also contains the password hashes defeat the purpose of having an unknown string added to your pre-hashed string?
If a hacker gets database access, and only database access, they'll have the salts and hashes. If you have a static salt declared in a PHP define, they'll need server access as well as database access to get the same information.
Also relevant, you should remove the Output privilege from your SQL user if possible, so that a hacker can't put shells on your server with just database access and get your PHP-defined salt.
","560","<php><salt>","1","0","2","2013-02-24 00:01:02","15046859","4","","","","","2013-02-23 23:09:59",""
"15046802","Generating unique salt (non-validated example given)","I am redesigning my application where I need to have an unique salt.
I provide the way it is and I look forward to hear if this does not work the correct way or other ways I can improve it.
public function generatesalt($x=0)
{
    $x++;

    $string = md5(uniqid(rand(), true));
    $salt = substr($string, 0, 12);

    $stored = array();
    $qw = $this->registry->dbi->query(""SELECT `salt` FROM `"".PRE.""membership`"")->results();
    foreach ($qw as $k => $v)
        $stored[] = $v['salt'];


    if (in_array($salt,$stored))
        return $this->generatesalt($x);

    return $salt."" /// "".$x;
}   

Thanks. Again, my question is if this looks to work the correct way and you can't see serious disadvantages.
","Well, theoretically, salts only need to be unique in the sense that no other password should be hashed using that salt. The idea is to make it infeasible for bad guys to crack the hashes. If you use a salt, and you hash the password correctly (i.e. using something like bcrypt, scrypt, pbkdf2, etc.), then it will take a long time to crack just a handful of passwords -- let alone an entire database.
In practice randomly generated salts that are sufficiently long are not likely to occur more than once, so they should be more than fine.
In PHP a simple way of generating salts is to use mcrypt_create_iv(). It generates random bits from the system, which can be encoded for easier storage:
function randomSalt($length = 16) {
    $bits = mcrypt_create_iv($length);
    $encoded = base64_encode($bits);
    return substr($encoded, 0, $length);
}
echo randomSalt(); // Something like: ""Yt5iX/LvdxOyxCiX""

Finally, salts do not have to be a secret. That is not why salts are used. Imagine you want to walk over to the corner shop. It takes 5 minutes. Now, imagine that you are forced to take a 24-hour detour. That is the salt. It is a huge road-bump that bad guys need to get over every time they crack a new hashed password. (Note: the 24 hours are just an example -- how long it takes depends on a few things, but you get the idea.)
","560","<php><salt>","1","3","2","2013-02-24 00:01:02","15046859","4","","","","","2013-02-23 23:09:59",""
"27193461","SHA256 salt with PHP and MySQL - Insert error","I'm using the following code to salt and hash passwords in a MySQL database:
<?php
function make($string, $salt = '') {
    return hash('sha256', $string . $salt);
}
function salt($length) {
    return mcrypt_create_iv($length, MCRYPT_DEV_URANDOM);
}

$salt = salt(32);
$password = make('password', $salt);
?>

However when I attempt to insert the generated salt into the database, there are some cases where this error occurs:
You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'ÜöOòƒ·¡]ŽÖ', 1)' at line 1

I assume that is because of unrecognized characters being generated. What would be a solution for this?
","You're inserting raw binary garbage. That will naturally (and semi-randomly) contain SQL metachatacters, like a '. This means your query is vulnerable to sql injection attacks.
You don't show any of your actual PHP code, but you should either be using a prepared statement, or doing manual escaping, e.g.
$stmt = mysqli_prepare($conn, ""INSERT .... (password_hash) VALUES (?)"");
$stmt->execute(array($raw_hash));

or
$quoted = mysql_real_escape_string($raw_hash);
$sql = ""INSERT ... (password_hash) VALUES ('$quoted')"";

Alternatively, you could encode that hash string, e.g. use base64, so that the encoded hash becomes a relatively harmless string. But even then you should be using proper query construction techniques.
","550","<php><mysql><insert><salt><sha256>","0","3","1","2014-11-28 17:27:44","27193512","1","","","","","2014-11-28 17:23:26",""
"11424921","Implementing password hashing/salting algorithm from crackstation.net","I am trying to implement a password hashing/salting algorithm from crackstation.net, but I am unsure how implement it.
Storing the password upon user registration seems to be as simple as passing the password into create_hash().
$password = create_hash($_POST['Password'];

I'm not following how to validate upon user login. validate_password($password, $good_hash) returns either true or false, and takes $password as parameter, so it seems like a no brainer except for the second parameter $good_hash. Where does this param come from?
It is my understanding that password is turned into a hash value every time its used, and that the hash value is what is stored and compared. So why would I have both the $password and $good_hash values? 
Quick overview of the functions:
function create_hash($password){
    calls pbkdf2()
}

function validate_password($password, $good_hash){ 
    calls pbkdf2() 
    calls slow_equals() 
}

function slow_equals($a, $b){
}

function pbkdf2($algorithm, $password, $salt, $count, $key_length, $raw_output = false){
}

Of course a different, better method for this would also be just as helpful.
Thank you
","good_hash has been stored in the DB at this point and is the known ""good hash.""  Retrieve it from the DB and compare it to the password the user has been submitted that has now been hashed with the same algorithm.
","550","<php><security><passwords><hash><salt>","2","2","1","2012-07-11 03:17:27","11425043","3","","615285","","2012-07-11 03:10:54","2012-07-11 02:59:28",""
"15017368","storage of password in django and rainbow tables","In the django docs,it says django creates password as a string algo$hash
where algo is pbkdf2 by default and hash is the sha256 hash of the  password string .
In some articles, I read that a secure password is created using a random salt which is then stored in the database for each user.This makes it difficult for a malicious user who tries to break the password using rainbow tables.But when I checked the auth_user table for my django project ,I could only find a single string which begins 'pbkdf2_sha256$' for each user.I couldn't find any salt stored.
Does this mean the password stored is vulnerable to attack using raibow table?
","Django documentation explicitly stated that it hashes passwords with a salt here and here:

The password attribute of a User object is a string in this format:
hashtype$salt$hash
That’s hashtype, salt and hash, separated by the dollar-sign
  character.
Hashtype is either sha1 (default), md5 or crypt – the algorithm used
  to perform a one-way hash of the password. Salt is a random string
  used to salt the raw password to create the hash. Note that the crypt
  method is only supported on platforms that have the standard Python
  crypt module available.

so there will be 2 dollar signs, and in between is the salt.
","548","<django><passwords><salt><django-authentication>","1","1","1","2015-04-15 17:14:12","15020037","2","","1628832","","2015-04-15 17:14:12","2013-02-22 05:18:27",""
"38144542","In what form to store salt and how to retrieve it later for password validate","I use MD5 algorithm to hash passwords with salt. After registering a user, I store both hashed password and salt in my SQL database. Unfortunately, when I retrieve them, later, so as to compare them with the user's input I address a problem with the encoding of salt. I store salt as VARCHAR(16) and when I try to retrieve it from my DataBase, it converts in a different form. This is my code :
ResultSet rs = stmt.executeQuery(""SELECT * FROM users"");
String DB_salt1 = rs.getString(""Salt"");
byte [] DB_salt = DB_salt1.getBytes(); 

I used some System.out.println(); functions in order to locate the problem and I found out that byte [] DB_salt = DB_salt1.getBytes(); outputs the wrong salt, while String DB_salt1 = rs.getString(""Salt""); outputs the proper one. My guess is that it happens byte loss. 
EDIT: To clarify, the proper salt and the one stored in my DataBase, let's say is [B@4e25154. String DB_salt1 = rs.getString(""Salt""); stores this salt; the proper one. But when byte [] DB_salt = DB_salt1.getBytes(); is executed, it outputs a different salt, which ruins the whole process.
","The best way to store the passwords in the Database is using Bcrypt. With this you don't need to store the salt.
Below is the sample code that uses Bcrypt.
1) String pw_hash = BCrypt.hashpw(""PLAIN PASSWORD"", BCrypt.gensalt());
2) Store the pw_hash in DB
3) if(BCrypt.checkpw(""PLAIN PASSWORD"", pw_hash)){ System.out.println(""Success Login""); }else{ System.out.println(""Failure Login""); }
Steps 1 and 2 will be followed while user registering the password for the first time. While Step 3 is used if the given password is matching with the encrypted password.
","547","<java><database><hash><md5><salt>","0","-1","1","2016-07-01 12:07:10","","8","","5753592","","2016-07-01 12:07:10","2016-07-01 11:40:15",""
"36236888","Bcrypt, how do you verify with the random salt?","I got this code off the PHP website.  I can make this work without the Salt.  But how do you verify with the salt - or does it have to be stored into a variable then you use that later?  Not sure how to proceed to the next step to verify.  Lots of tutorials on how to make a hash, but to verify is another thing. Thank you.
$options = [
'cost' => 11,
'salt' => mcrypt_create_iv(22, MCRYPT_DEV_URANDOM),
];
echo password_hash(""rasmuslerdorf"", PASSWORD_BCRYPT, $options).""\n"";


// See the password_hash() example to see where this came from.
$hash = '$2y$11$nJp/w0OC41I0m44T9OQKBuWUrQi63PrJuvDc68KI6oDBdnZK01kiW ';

if (password_verify('rasmuslerdorf', $hash)) {
echo 'Password is valid!';
} else {
echo 'Invalid password.';
}

","
Note that password_hash() returns the algorithm, cost and salt as part of the returned hash. Therefore, all information that's needed to verify the hash is included in it. This allows the verify function to verify the hash without needing separate storage for the salt or algorithm information.

Source: http://php.net/manual/en/function.password-verify.php
just use the function as you did above, it will automatically detect the salt.

If omitted, a random salt will be generated by password_hash() for each password hashed. This is the intended mode of operation.

source:http://php.net/manual/en/function.password-hash.php
Even if you don't add a salt, password_hash will automatically add a random generated one, so you shouldn't have any problem verifying a password that has been salted.
Also note that:

The salt option has been deprecated as of PHP 7.0.0. It is now preferred to simply use the salt that is generated by default.

","544","<php><hash><salt><bcrypt>","1","2","1","2016-03-26 16:27:40","36237791","0","","","","","2016-03-26 15:09:00",""
"42801193","how to generate md5 + salt password for salted-hash spring 4","I'm working on migrating legacy system to java web application. now i'm using spring mvc + spring security + spring boot jpa with no xml. But i got problem when log in as spring security 4 using bcyrpt. legacy db password generated using md5 + salted.
","You need configuration similar to this:
@Configuration
@EnableWebMvcSecurity
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
    @Autowired
    Md5PasswordEncoder md5CryptEncoder;

    @Autowired
    UserDetailsService myDetailsService

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {

            DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
            authProvider.setPasswordEncoder(md5CryptEncoder);
            authProvider.setUserDetailsService(myDetailsService);
            ReflectionSaltSource saltSource = new ReflectionSaltSource();
            saltSource.setUserPropertyToUse(""salt"");
            authProvider.setSaltSource(saltSource);
            auth.authenticationProvider(authProvider);
    }
}

But you have to configure Auth with correct encoder.
","541","<spring><spring-security><md5><salt>","0","0","1","2017-03-15 09:01:58","","0","","","","","2017-03-15 04:38:56",""
"44187996","Jinja template list and dict parsing","I'm trying to get this template to work to create an HAProxy config file. It's almost there, but I can't seem to get the lists in here correctly. I want to save the key and prepend that to the list of items, for example:
This:
acl:
  - host_static hdr_beg(host) -i static
  - url_static path_beg static

Should be:
acl host_static hdr_beg(host) -i static
acl url_static path_beg static

This would be any dict key that has a list for their value.
The carryover is there because there could be multiple frontends and backends and those would be a dict under frontend. 
I was able to update it, probably a better way to do this, but seems to work ok:
Edit (Updated Working Code)
{%- set key = 0 -%}
{%- set value = 1 -%}
{%- set carryovers = ['frontend', 'backend','listen'] -%}
{%- macro haproxy_config(data, carryover='', listkey='', recurse=-1, indent=0) -%}
  {%- set recurse = recurse + 1 -%}
  {%- if data is none -%}
    {{- '\n' -}}
  {%- elif data is string or data is number -%}
    {{- '%s %s'|format(listkey,data)|string|indent(indent, True) }}{{ '\n' -}}
  {%- else -%}
    {%- if recurse > 0 -%}
      {{- '\n' -}}
      {%- set indent = indent + 2 -%}
    {%- endif -%}
    {%- if data is mapping -%}
      {%- for item in data|dictsort -%}
        {%- if item[key] in carryovers -%}
          {{- haproxy_config(item[value], carryover=item[key], indent=indent) -}}
        {%- else -%}
          {%- set carryIndent = indent -%}
          {%- set forwardIndent = indent -%}
          {%- if carryover -%}
            {{- carryover|indent(indent, True) }}{{ ' ' -}}
            {%- set carryIndent = 0 -%}
          {%- endif -%}
          {%- if item[value] is string or item[value] is not iterable -%}
            {%- set forwardIndent = 0 -%}
          {%- endif -%}
          {%- if item[value] is not string and item[value] is iterable and item[value] is not mapping -%}
            {%- set forwardIndent = 0 -%}
            {{ haproxy_config(item[value], listkey=item[key], recurse=recurse, indent=forwardIndent) -}}
          {%- else -%}
            {{- item[key]|indent(carryIndent, True) }} {{ haproxy_config(item[value], recurse=recurse, indent=forwardIndent) -}}
          {%- endif -%}
        {%- endif -%}
      {%- endfor -%}
    {%- else -%}
      {%- for item in data -%}
        {{- haproxy_config(item, listkey=listkey, indent=indent) -}}
      {%- endfor -%}
    {%- endif -%}
    {%- if recurse > 0 -%}
      {{ '\n' }}
    {%- endif -%}
  {%- endif -%}
{%- endmacro -%}

=======================================================================
Template:
{%- set key = 0 -%}
{%- set value = 1 -%}
{%- set carryovers = ['frontend', 'backend',
      'listen'] -%}
{%- macro haproxy_config(data, carryover='', recurse=-1, indent=0) -%}
  {%- set recurse = recurse + 1 -%}
  {%- if data is none -%}
    {{- '\n' -}}
  {%- elif data is string or data is number -%}
    {{- data|string|indent(indent, True) }}{{ '\n' -}}
  {%- else -%}
    {%- if recurse > 0 -%}
      {{- '\n' -}}
      {%- set indent = indent + 2 -%}
    {%- endif -%}
    {%- if data is mapping -%}
      {%- for item in data|dictsort -%}
        {%- if item[key] in carryovers -%}
          {{- haproxy_config(item[value], carryover=item[key], indent=indent) -}}
        {%- else -%}
          {%- set carryIndent = indent -%}
          {%- set forwardIndent = indent -%}
          {%- if carryover -%}
            {{- carryover|indent(indent, True) }}{{ ' ' -}}
            {%- set carryIndent = 0 -%}
          {%- endif -%}
          {%- if item[value] is string or item[value] is not iterable -%}
            {%- set forwardIndent = 0 -%}
          {%- endif -%}
          {{- item[key]|indent(carryIndent, True) }} {{ haproxy_config(item[value], recurse=recurse, indent=forwardIndent) -}}
        {%- endif -%}
      {%- endfor -%}
    {%- else -%}
      {%- for item in data -%}
        {{- haproxy_config(item, indent=indent) -}}
      {%- endfor -%}
    {%- endif -%}
    {%- if recurse > 0 -%}
      {{ '\n' }}
    {%- endif -%}
  {%- endif -%}
{%- endmacro -%}

Values
haproxy:
  global:
    stats: socket /var/lib/haproxy/stats mode 660 level admin
    ssl-default-bind-ciphers: ""ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384""
    ssl-default-bind-options: ""no-sslv3 no-tlsv10 no-tlsv11""
    user: haproxy
    group: haproxy
    chroot: /var/lib/haproxy
    tune.something.else: 2048
  frontend:
    http:
      bind: 0.0.0.0:80
      option: http-server-close
      acl:
        - host_static hdr_beg(host) -i static
        - url_static path_beg static
      #use_backend: static if host_static
      #use_backend: static if url_static
      default_backend: www
  backend:
    www:
      balance: roundrobin
      #server: www1 www1 check port 80
      #server: www2 www2 check port 80
#      server: www3 www3 check port 80
#      server: load1 localhost:8080 backup
#    static:
#      server: media1 media1 check port 80
#      server: media2 media2 check port 80
#      server: load1 localhost:8080 backup

Output
backend www
  balance roundrobin

frontend http
  host_static hdr_beg(host) -i static
  url_static path_beg static
  bind 0.0.0.0:80
  default_backend www
  option http-server-close

global
  chroot /var/lib/haproxy
  daemon True
  group haproxy
  log
    /dev/log local0
    /dev/log local1 notice

  ssl-default-bind-ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384
  ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11
  stats socket /var/lib/haproxy/stats mode 660 level admin
  tune.something.else 2048
  user haproxy

What I want
backend www
  balance roundrobin

frontend http
  acl host_static hdr_beg(host) -i static
  acl url_static path_beg static
  bind 0.0.0.0:80
  default_backend www
  option http-server-close

global
  chroot /var/lib/haproxy
  daemon True
  group haproxy
  log /dev/log local0
  log /dev/log local1 notice

  ssl-default-bind-ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384
  ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11
  stats socket /var/lib/haproxy/stats mode 660 level admin
  tune.something.else 2048
  user haproxy

Thanks
","I think you need another section in the if else block {%- if data is mapping -%} that checks if it is a list and uses the following.
{%- for key, value in data.items() %}
{{key}} {{value}}
{%- endfor %}

possibly this
{%- set key = 0 -%}
{%- set value = 1 -%}
{%- set carryovers = ['frontend', 'backend',
      'listen'] -%}
{%- macro haproxy_config(data, carryover='', recurse=-1, indent=0) -%}
  {%- set recurse = recurse + 1 -%}
  {%- if data is none -%}
    {{- '\n' -}}
  {%- elif data is string or data is number -%}
    {{- data|string|indent(indent, True) }}{{ '\n' -}}
  {%- else -%}
    {%- if recurse > 0 -%}
      {{- '\n' -}}
      {%- set indent = indent + 2 -%}
    {%- endif -%}
    {%- if data is mapping -%}
      {%- for item in data|dictsort -%}
        {%- if item[key] in carryovers -%}
          {{- haproxy_config(item[value], carryover=item[key], indent=indent) -}}
        {%- else -%}
          {%- set carryIndent = indent -%}
          {%- set forwardIndent = indent -%}
          {%- if carryover -%}
            {{- carryover|indent(indent, True) }}{{ ' ' -}}
            {%- set carryIndent = 0 -%}
          {%- endif -%}
          {%- if item[value] is string or item[value] is not iterable -%}
            {%- set forwardIndent = 0 -%}
          {%- endif -%}
          {{- item[key]|indent(carryIndent, True) }} {{ haproxy_config(item[value], recurse=recurse, indent=forwardIndent) -}}
        {%- endif -%}
      {%- endfor -%}
    {%- elif data is iterable and data is not string %}
      {%- for key, value in data.items() %}
        {{- '%s %s'|format(key, value)|indent(indent, True) }}
      {%- endfor %}
    {%- else -%}
      {%- for item in data -%}
        {{- haproxy_config(item, indent=indent) -}}
      {%- endfor -%}
    {%- endif -%}
    {%- if recurse > 0 -%}

","537","<jinja2><haproxy><salt><salt-stack>","2","0","1","2017-05-26 16:52:27","","0","","447191","","2017-05-26 16:52:27","2017-05-25 19:03:07",""
"43515689","why salt archive.extracted command create the same nested root directory","I'm trying to extract tar file using salt archive.extracted command
its state skeleton looks like this:
download_extract:
archive.extracted:
    - name: /opt/
    - if_missing: /opt/
    - source: {{ settings.binaries_url }}
    - source_hash: {{ settings.hash_url }}
    - user: {{ settings.env.user }}
    - group: {{ settings.env.user }}
    - enforce_ownership_on: /opt/

the tar contains a root directory ( /foo and files under it).
what I expect is to get:
/opt/foo/*all the content @ foo*

but what I get is: 
/opt/foo/foo/*all the content @ foo*

can u help?
thanks.
","Your tar archive probably has a top-level or leading directory.
You can skip this directory by adding the two items below.
download_extract:
  archive.extracted:
    - name: /opt/
    - if_missing: /opt/
    - source: {{ settings.binaries_url }}
    - source_hash: {{ settings.hash_url }}
    - user: {{ settings.env.user }}
    - group: {{ settings.env.user }}
    - enforce_ownership_on: /opt/
    - enforce_toplevel: False
    - options: --strip-components=1

","527","<salt><salt-stack>","0","1","1","2017-04-20 12:23:30","43519443","0","","","","","2017-04-20 09:34:55",""
"10149134","different encryptions with crypt. what format should the salt be etc","I am building my classes for development and am working on an encryption class. I have been reading up on php's crypt function and the different encryption types but a few areas have been vaguely explained. 
my understanding is there are these encryption options CRYPT_STD_DES, CRYPT_EXT_DES, CRYPT_MD5, CRYPT_BLOWFISH, CRYPT_SHA256, and CRYPT_SHA512. to see if they are enabled you just check 
if(CRYPT_FOO==1)
{
   //is enabled
}

Questions
What are the salt requirements/format for the different encryption other than the.
blowfish requirements which is on SO.
And just for clarification I assume if you use a blowfish salt with crypt() it automatically does the blowfish encryption?
","The official documentation of the crypt function has quite some information about the various modes, and what should be passed as their salt parameter:

CRYPT_STD_DES: two character salt from the alphabet ./0-9A-Za-z, i.e. an 12 bit salt.
CRYPT_EXT_DES: a _ character, then a 4 character iteration count, then a 4 character salt (each using the same alphabet).
CRYPT_MD5: a marker $1$, then 9 more salt characters (using the same alphabet as above, I suppose).
CRYPT_BLOWFISH: a marker $2a$, then a two digit cost parameter in the range 04 to 31 (meaning 24 to 231 iterations), then $ and a 22-digit salt (again, using the same alphabet as above).
CRYPT_SHA256: a marker $5$, an optional round parameter indication of rounds=number$ (with a decimal number between 1000 and 999999999), and a 16-character salt (using the same alphabet as above).
CRYPT_SHA512: a marker $6$, an optional round parameter indication of rounds=number$ (with a decimal number between 1000 and 999999999), and a 16-character salt (using the same alphabet as above).

The start of the salt parameter uniquely identifies which kind of password hash algorithm is to be used here - so yes, if you use a salt in the bcrypt format (starting with $2a$), it will automatically use bcrypt.
","526","<php><encryption><hash><salt><crypt>","1","3","1","2012-04-15 12:42:44","10162108","4","","-1","","2017-05-23 12:07:11","2012-04-13 22:29:46",""
"429006","Why do web applications insist on defining strict password rules?","You've all encountered the various websites that force you to have a password that is 6 characters long, must have 1 number, and must rhyme with 'annoying.'
Obviously there are legacy reasons why sometimes this is necessary but other times it's all for security. I find that it's rather annoying because I have a standard set of passwords that often don't match these peculiar rules so I have to make and remember a new one.
It seems that there are more important things to worry about in terms of security if you're worrying about how complex the user's password is. If someone can actually get a hold of that password then you clearly have larger problems to worry about. Do your part and lock down your end of the system before relying on the user to worry about YOUR security.
My actual question is: What are the alternatives to these complex password rules to mitigate the risk of rainbow tables or brute force hash reversers without relying on the user to carry the weight of remembering something complicated?
Some ideas: salting, ...
","Use KeePass
http://keepass.info/
It sure will minimize the hassle.
","525","<security><passwords><salt>","1","1","6","2009-01-23 17:44:58","","4","","20471","d03boy","2009-01-23 16:53:37","2009-01-09 17:46:33",""
"429006","Why do web applications insist on defining strict password rules?","You've all encountered the various websites that force you to have a password that is 6 characters long, must have 1 number, and must rhyme with 'annoying.'
Obviously there are legacy reasons why sometimes this is necessary but other times it's all for security. I find that it's rather annoying because I have a standard set of passwords that often don't match these peculiar rules so I have to make and remember a new one.
It seems that there are more important things to worry about in terms of security if you're worrying about how complex the user's password is. If someone can actually get a hold of that password then you clearly have larger problems to worry about. Do your part and lock down your end of the system before relying on the user to worry about YOUR security.
My actual question is: What are the alternatives to these complex password rules to mitigate the risk of rainbow tables or brute force hash reversers without relying on the user to carry the weight of remembering something complicated?
Some ideas: salting, ...
","Almost every site will be salting and encrypting your password regardless of what you choose. The issue isn't legacy code, database security on the server side or anything like that, the developers will have that covered in most cases. The problem is dumb users submitting retarded passwords that get broken quite easily. The point of the rules is to FORCE you to not choose too stupid of a password. 
Here's a reference link. http://www.codinghorror.com/blog/archives/001206.html
","525","<security><passwords><salt>","1","8","6","2009-01-23 17:44:58","","4","","20471","d03boy","2009-01-23 16:53:37","2009-01-09 17:46:33",""
"429006","Why do web applications insist on defining strict password rules?","You've all encountered the various websites that force you to have a password that is 6 characters long, must have 1 number, and must rhyme with 'annoying.'
Obviously there are legacy reasons why sometimes this is necessary but other times it's all for security. I find that it's rather annoying because I have a standard set of passwords that often don't match these peculiar rules so I have to make and remember a new one.
It seems that there are more important things to worry about in terms of security if you're worrying about how complex the user's password is. If someone can actually get a hold of that password then you clearly have larger problems to worry about. Do your part and lock down your end of the system before relying on the user to worry about YOUR security.
My actual question is: What are the alternatives to these complex password rules to mitigate the risk of rainbow tables or brute force hash reversers without relying on the user to carry the weight of remembering something complicated?
Some ideas: salting, ...
","The reason for the password rules is to try and ensure a ""stronger"" password, which means, in effect, that it takes more trials on average to find the password with a brute force attack.  Most people, even after the many examples, like the recent Twitter mess, will use a Joe password, or a dictionary word that's vulnerable to a feasible brute-force attack.  
The best thing to do is to ask what the value of the data behind the password is, and then what the cost (effort) of cracking the password would be.  If the value is small, you dn't need complicated rules, and maybe you don't need a password at all.  If the value is high, then you need to make it more difficult.
","525","<security><passwords><salt>","1","5","6","2009-01-23 17:44:58","","4","","20471","d03boy","2009-01-23 16:53:37","2009-01-09 17:46:33",""
"429006","Why do web applications insist on defining strict password rules?","You've all encountered the various websites that force you to have a password that is 6 characters long, must have 1 number, and must rhyme with 'annoying.'
Obviously there are legacy reasons why sometimes this is necessary but other times it's all for security. I find that it's rather annoying because I have a standard set of passwords that often don't match these peculiar rules so I have to make and remember a new one.
It seems that there are more important things to worry about in terms of security if you're worrying about how complex the user's password is. If someone can actually get a hold of that password then you clearly have larger problems to worry about. Do your part and lock down your end of the system before relying on the user to worry about YOUR security.
My actual question is: What are the alternatives to these complex password rules to mitigate the risk of rainbow tables or brute force hash reversers without relying on the user to carry the weight of remembering something complicated?
Some ideas: salting, ...
","Keepass also has the advantage that it will run directly (eg not even have to install it) from a USB flash drive in most cases in windows. Put both keepass and your database file on the USB key and u have a quick and easy portable password reference database. Make sure u secure keepass with a nice strong password though as if u loose your USB drive u don't want all and sundry getting into your password database.
","525","<security><passwords><salt>","1","-1","6","2009-01-23 17:44:58","","4","","20471","d03boy","2009-01-23 16:53:37","2009-01-09 17:46:33",""
"429006","Why do web applications insist on defining strict password rules?","You've all encountered the various websites that force you to have a password that is 6 characters long, must have 1 number, and must rhyme with 'annoying.'
Obviously there are legacy reasons why sometimes this is necessary but other times it's all for security. I find that it's rather annoying because I have a standard set of passwords that often don't match these peculiar rules so I have to make and remember a new one.
It seems that there are more important things to worry about in terms of security if you're worrying about how complex the user's password is. If someone can actually get a hold of that password then you clearly have larger problems to worry about. Do your part and lock down your end of the system before relying on the user to worry about YOUR security.
My actual question is: What are the alternatives to these complex password rules to mitigate the risk of rainbow tables or brute force hash reversers without relying on the user to carry the weight of remembering something complicated?
Some ideas: salting, ...
","Okay, here's the whole story.  
First of all, let's define a measure of the ""goodness"" of a scheme.  With passwords or the like, the measure is the average number of trials it takes a brute force attack to get access.  
Let's say that your passwords are drawn from an alphabet S with n characters, and the password's length is k.  Then the total number of possible passwords is nk.
On average, then, a brute force attack will find a successful password in about nk/2, or nk-1 trials.
For convenience, and because of some information-theoretic considerations I'm not going to go into, we usually express that as a number of bits, which is lg nk where lg denotes the logarithm base 2. Because we're used to thinking of bits as discrete things, we actually usually take the ceiling of that number, ie, the least integer greater than lg nk, but in fact the fractional value is perfectly legitimate.  
For printable characters, 8 character passwords, and no other rules, that number is in  the neighborhood of 1008 or about 1016; that is about 53 bits.  The only thing is those sorts of random passwords are almost impossible to remember; they tend to end up on yellow sticky notes and become vulnerable to that kind of attack.  Still, that is a limiting case.  It takes about 100 trillion tries to guess that by brute force.  If each try costs a penny, then theoretically, your data could be worth as much as $1 trillion before it would be worth a thief's time.
On the other hand, there are only about 50,000 commonly used dictionary words.  That's around 16 bits, or it takes around 25,000 tries by brute force.  Figure each try costs a penny: then your data better not be worth more than $250.00.
Both of these are applications of the rule 
R = P×H
where R is the risk, P is the probability of a bad think happening, and H (the hazard) is the cost of the bad thing happening.
Now, a penny a try is too high, but you now have the tools you need.  Figure out what the data is worth, and you can use this method to decide how extensive a rule set you need.  (But be careful, as if you make the rules too stringent, then the entropy of the set of acceptable passwords gets small, until you get down to the old joke that after much thought Security determined the best password of all is '*8h% Jd!', so all users would now start using that password.)
","525","<security><passwords><salt>","1","1","6","2009-01-23 17:44:58","","4","","20471","d03boy","2009-01-23 16:53:37","2009-01-09 17:46:33",""
"429006","Why do web applications insist on defining strict password rules?","You've all encountered the various websites that force you to have a password that is 6 characters long, must have 1 number, and must rhyme with 'annoying.'
Obviously there are legacy reasons why sometimes this is necessary but other times it's all for security. I find that it's rather annoying because I have a standard set of passwords that often don't match these peculiar rules so I have to make and remember a new one.
It seems that there are more important things to worry about in terms of security if you're worrying about how complex the user's password is. If someone can actually get a hold of that password then you clearly have larger problems to worry about. Do your part and lock down your end of the system before relying on the user to worry about YOUR security.
My actual question is: What are the alternatives to these complex password rules to mitigate the risk of rainbow tables or brute force hash reversers without relying on the user to carry the weight of remembering something complicated?
Some ideas: salting, ...
","Anything an untrained user (the normal type for most web applications) will find natural and easy to remember will be easy to crack.  It doesn't matter what you do to store it, because cracking software can go through all passwords an untrained user is likely to use.  Salting and hashing are effective only when the users have good passwords.
The solution is either to ask the user to remember something more complicated (which you are rejecting) or to base verification on something the user has, rather than what the user can remember.  This can be a written-down password, one of those security fobs that generate unpredictable numbers that change every few seconds, or something more esoteric.
What a website can do is allow all sorts of strong passwords.  I detest sites where I want to use strong passwords (typically financial or medical) that have rules like ""no special characters"".  (Of course, I don't like reusing strong passwords; I don't want anybody who cracks my HMO security to order freely from my Barnes & Noble account.)
This probably isn't the answer you wanted, but the bad guys have capabilities that will overwhelm the sort of casual security most people are comfortable with.
","525","<security><passwords><salt>","1","0","6","2009-01-23 17:44:58","","4","","20471","d03boy","2009-01-23 16:53:37","2009-01-09 17:46:33",""
"11343331","sha1 + salt encryption fails in php","I am trying to secure a password with sha1 hashing to a saltMe() function but the ectrypted password ends up the same no matter what I type in the password field. 
This might lead to a security vulnerability I think.
This is my salt function
**************************************************
* sha1 salt string to make a more secure hash 
***************************************************/
function SaltMe() {
   //Secret keyword encrypted with sha1
   return ""4cefe49883b6dd1a00565e2a80fb035f348da3aa"";
}

and this is my login check
$select_user_sql = $this->db->selectSQL(""*"", ""tdic_users"", ""email = '"". $email .""' AND password = '"". sha1($this->main->SaltMe($password)) .""'"");

No matter what I type in the password field I end up with:
1c2c2961d35148e8dfc83c7b31cf144f0987de9d

Which is also what my encrypted password is. But it is not good that I can type whatever I want to match the password.
The login form's actions is validatelogin.php which contain:
$user = new UserHandling();
$user->UserLogMeIn($_POST[""login_email""], $_POST[""login_password""]);

And the login function:
 /**********************************************************
     * User login function
     * 
     * @param string    | User's email
     * @param string    | User's password
     **********************************************************/
    function UserLogMeIn($email, $password) {

        $select_user_sql = $this->db->selectSQL(""*"", ""tdic_users"", ""email = '"". $email .""' AND password = '"". sha1($this->main->SaltMe($password)) .""'"");
        $select_user_result = $this->db->SQLquery($select_user_sql);

        if(mysql_num_rows($select_user_result) < 1) {
            $this->main->txtOutput(""Wrong email or password"", ""TXT_ERR""); //The user typed something wrong.
        } else { 
            while($row = $this->db->SQLfetch($select_user_result)) {
                /*** We will check if user have activated the profile ***/
                if($row[""activated""] == 0) {
                    $this->main->txtOutput(""Your profile haven't been activated! You need to click on the activation link in the email you recieved upon registration."", ""TXT_ERR""); //The user haven't activated the new profile. This is necessary for security / spamming reasons
                    $this->main->JSredirector(""http://localhost/test/login.php"", 5); //Redirect the user back from where he/she came from
                } else {
                    /*** Everything is in order and we will let the user in ***/

                    $_SESSION[""usr_logged_in""] = 1;
                    $_SESSION[""user_email""] = $row[""email""];
                    $_SESSION[""user_id""] = $row[""user_id""];
                    $_SESSION[""user_name""] = $row[""name""];

                    /*** This will just update the last login field in the user table ***/
                    $fields = array(""user_last_logged_in"" => time());
                    $update_user_sql = $this->db->updateSQL('tdic_users',  'email = ""'. $email .'""', $fields);
                    $this->db->SQLquery($update_user_sql);
                }
            }
        }
    }

I can not figure out where the string is set so it always matches!
","U return a constant string when salting pass. Try
function SaltMe($pass) {
   // Pass salted with Secret keyword encrypted with sha1 
   return ""4cefe49883b6dd1a00565e2a80fb035f348da3aa"" . $pass;
}

Also as SLaks said, u have SQLinj. And it is better to use PDO or mysqli database functions.
","525","<php><encryption><sha1><salt>","0","2","3","2018-06-26 09:12:32","11343407","3","","1033581","","2018-06-26 09:12:32","2012-07-05 11:25:46",""
"11343331","sha1 + salt encryption fails in php","I am trying to secure a password with sha1 hashing to a saltMe() function but the ectrypted password ends up the same no matter what I type in the password field. 
This might lead to a security vulnerability I think.
This is my salt function
**************************************************
* sha1 salt string to make a more secure hash 
***************************************************/
function SaltMe() {
   //Secret keyword encrypted with sha1
   return ""4cefe49883b6dd1a00565e2a80fb035f348da3aa"";
}

and this is my login check
$select_user_sql = $this->db->selectSQL(""*"", ""tdic_users"", ""email = '"". $email .""' AND password = '"". sha1($this->main->SaltMe($password)) .""'"");

No matter what I type in the password field I end up with:
1c2c2961d35148e8dfc83c7b31cf144f0987de9d

Which is also what my encrypted password is. But it is not good that I can type whatever I want to match the password.
The login form's actions is validatelogin.php which contain:
$user = new UserHandling();
$user->UserLogMeIn($_POST[""login_email""], $_POST[""login_password""]);

And the login function:
 /**********************************************************
     * User login function
     * 
     * @param string    | User's email
     * @param string    | User's password
     **********************************************************/
    function UserLogMeIn($email, $password) {

        $select_user_sql = $this->db->selectSQL(""*"", ""tdic_users"", ""email = '"". $email .""' AND password = '"". sha1($this->main->SaltMe($password)) .""'"");
        $select_user_result = $this->db->SQLquery($select_user_sql);

        if(mysql_num_rows($select_user_result) < 1) {
            $this->main->txtOutput(""Wrong email or password"", ""TXT_ERR""); //The user typed something wrong.
        } else { 
            while($row = $this->db->SQLfetch($select_user_result)) {
                /*** We will check if user have activated the profile ***/
                if($row[""activated""] == 0) {
                    $this->main->txtOutput(""Your profile haven't been activated! You need to click on the activation link in the email you recieved upon registration."", ""TXT_ERR""); //The user haven't activated the new profile. This is necessary for security / spamming reasons
                    $this->main->JSredirector(""http://localhost/test/login.php"", 5); //Redirect the user back from where he/she came from
                } else {
                    /*** Everything is in order and we will let the user in ***/

                    $_SESSION[""usr_logged_in""] = 1;
                    $_SESSION[""user_email""] = $row[""email""];
                    $_SESSION[""user_id""] = $row[""user_id""];
                    $_SESSION[""user_name""] = $row[""name""];

                    /*** This will just update the last login field in the user table ***/
                    $fields = array(""user_last_logged_in"" => time());
                    $update_user_sql = $this->db->updateSQL('tdic_users',  'email = ""'. $email .'""', $fields);
                    $this->db->SQLquery($update_user_sql);
                }
            }
        }
    }

I can not figure out where the string is set so it always matches!
","Your SaltMe function doesn't get an argument, it just always returns the same string. So
SaltMe($password)

will not do what you intended.
In all seriousness, though: Stop trying to implement your own password hashing scheme. The very fact that you're here to ask about a mistake in your implementation should be proof enough that you don't understand enough to do so. Use a library, e.g. bcrypt (the Portable PHP Password Hashing Framework has an implementation) and stay far away from ever implementing any crypto code yourself.
","525","<php><encryption><sha1><salt>","0","4","3","2018-06-26 09:12:32","11343407","3","","1033581","","2018-06-26 09:12:32","2012-07-05 11:25:46",""
"11343331","sha1 + salt encryption fails in php","I am trying to secure a password with sha1 hashing to a saltMe() function but the ectrypted password ends up the same no matter what I type in the password field. 
This might lead to a security vulnerability I think.
This is my salt function
**************************************************
* sha1 salt string to make a more secure hash 
***************************************************/
function SaltMe() {
   //Secret keyword encrypted with sha1
   return ""4cefe49883b6dd1a00565e2a80fb035f348da3aa"";
}

and this is my login check
$select_user_sql = $this->db->selectSQL(""*"", ""tdic_users"", ""email = '"". $email .""' AND password = '"". sha1($this->main->SaltMe($password)) .""'"");

No matter what I type in the password field I end up with:
1c2c2961d35148e8dfc83c7b31cf144f0987de9d

Which is also what my encrypted password is. But it is not good that I can type whatever I want to match the password.
The login form's actions is validatelogin.php which contain:
$user = new UserHandling();
$user->UserLogMeIn($_POST[""login_email""], $_POST[""login_password""]);

And the login function:
 /**********************************************************
     * User login function
     * 
     * @param string    | User's email
     * @param string    | User's password
     **********************************************************/
    function UserLogMeIn($email, $password) {

        $select_user_sql = $this->db->selectSQL(""*"", ""tdic_users"", ""email = '"". $email .""' AND password = '"". sha1($this->main->SaltMe($password)) .""'"");
        $select_user_result = $this->db->SQLquery($select_user_sql);

        if(mysql_num_rows($select_user_result) < 1) {
            $this->main->txtOutput(""Wrong email or password"", ""TXT_ERR""); //The user typed something wrong.
        } else { 
            while($row = $this->db->SQLfetch($select_user_result)) {
                /*** We will check if user have activated the profile ***/
                if($row[""activated""] == 0) {
                    $this->main->txtOutput(""Your profile haven't been activated! You need to click on the activation link in the email you recieved upon registration."", ""TXT_ERR""); //The user haven't activated the new profile. This is necessary for security / spamming reasons
                    $this->main->JSredirector(""http://localhost/test/login.php"", 5); //Redirect the user back from where he/she came from
                } else {
                    /*** Everything is in order and we will let the user in ***/

                    $_SESSION[""usr_logged_in""] = 1;
                    $_SESSION[""user_email""] = $row[""email""];
                    $_SESSION[""user_id""] = $row[""user_id""];
                    $_SESSION[""user_name""] = $row[""name""];

                    /*** This will just update the last login field in the user table ***/
                    $fields = array(""user_last_logged_in"" => time());
                    $update_user_sql = $this->db->updateSQL('tdic_users',  'email = ""'. $email .'""', $fields);
                    $this->db->SQLquery($update_user_sql);
                }
            }
        }
    }

I can not figure out where the string is set so it always matches!
","You are only hashing the salt string, you haven't prefixed it to your password. 
""4cefe49883b6dd1a00565e2a80fb035f348da3aa"" -> [SHA-1] -> ""1c2c2961d35148e8dfc83c7b31cf144f0987de9d""

You need to prefix your password with the salt before hashing it.
","525","<php><encryption><sha1><salt>","0","1","3","2018-06-26 09:12:32","11343407","3","","1033581","","2018-06-26 09:12:32","2012-07-05 11:25:46",""
"27092942","Issue with PHP/MYSQLi Password validation using salt","I am having an issue getting the password being stored on in mysql to match the Login password using salt.
Here is the code from my password creation:
        $hash = hash('sha256', $password);

        function createSalt()
        {
        $text = md5(uniqid(rand(), true));
            return substr($text, 0, 3);
        }

        $salt = createSalt();
        $password = hash('sha256', $salt . $hash);

Here is the code in my login page:
        $userData = $result->fetch_array(MYSQL_ASSOC);

        $hash = hash('sha256', $password);

        $password = hash('sha256', $userData['salt'] . $hash);

        //$hash = hash('sha256', $userData['salt'] . hash('sha256', $password) ); 

        if($password != $userData['Password']) // Incorrect password. So, redirect to login_form again.

There are no errors creating the password in mysql (the field is populated with i.e 0d02a88c1e1057a64df6b3fed4c6ad64e228313b803e9f9b36...
While the Login creates something like: 51839f9a15dac1f26825f4cd5d2ecf7ae83ea88d440415b04fb6ae41c3a0566f 
Just not sure where the issue is. Thanks in advance, I am very new to PHP.
","First, you have some confusing variable naming here - you use $password to represent both the plaintext password and the salt-and-hashed representation. That makes it harder to read your code.
Second, let's look at your code as a series of states to find where they might be going wrong:

Password entry. Is the same string being passed in both cases? Have you paid attention to whitespace and capitalization? Use a debugger to verify. If the plaintext password is not byte-for-byte identical, the initial sha256 hash should show differences at this point.
Salt generation/retrieval. Did you save/retrieve the exact same salt, byte-for-byte? Again, watch for whitespace/capitalization and also check that your database isn't silently truncating or changing the encoding for the string.
Compare the strings after they have been concatenated but before the second sha256 hash operation. By definition, since the final output is different, either your plaintext password or salt is not byte-for-byte identical. This will help you tell if one or both are the culprits.

","524","<php><hash><mysqli><salt>","-1","0","2","2014-11-23 20:53:47","","6","","","","","2014-11-23 18:55:42",""
"27092942","Issue with PHP/MYSQLi Password validation using salt","I am having an issue getting the password being stored on in mysql to match the Login password using salt.
Here is the code from my password creation:
        $hash = hash('sha256', $password);

        function createSalt()
        {
        $text = md5(uniqid(rand(), true));
            return substr($text, 0, 3);
        }

        $salt = createSalt();
        $password = hash('sha256', $salt . $hash);

Here is the code in my login page:
        $userData = $result->fetch_array(MYSQL_ASSOC);

        $hash = hash('sha256', $password);

        $password = hash('sha256', $userData['salt'] . $hash);

        //$hash = hash('sha256', $userData['salt'] . hash('sha256', $password) ); 

        if($password != $userData['Password']) // Incorrect password. So, redirect to login_form again.

There are no errors creating the password in mysql (the field is populated with i.e 0d02a88c1e1057a64df6b3fed4c6ad64e228313b803e9f9b36...
While the Login creates something like: 51839f9a15dac1f26825f4cd5d2ecf7ae83ea88d440415b04fb6ae41c3a0566f 
Just not sure where the issue is. Thanks in advance, I am very new to PHP.
","Make your life easier and store your passwords more safe, with the function password_hash().
The SHA-* algorithms are not appropriate for hashing passwords, because they are ways too fast. The function password_hash() will not only calculate a better suited BCrypt hash, it will also take care of the generation of a safe salt, and you won't have to store/retrieve the salt in a separate database field (it will become part of the resulting hash-value).
// Hash a new password for storing in the database.
// The function automatically generates a cryptographically safe salt.
$hashToStoreInDb = password_hash($password, PASSWORD_BCRYPT);

// Check if the hash of the entered login password, matches the stored hash.
// The salt and the cost factor will be extracted from $existingHashFromDb.
$isPasswordCorrect = password_verify($password, $existingHashFromDb);

","524","<php><hash><mysqli><salt>","-1","0","2","2014-11-23 20:53:47","","6","","","","","2014-11-23 18:55:42",""
"18273431","Implementing hash and salt in Spring 3 security","I understand the idea of hash+salt when I create new entry to dtb. If I have some fixed string for the salt it might not be hard to implement it, but how to do it, when I want to use for example user's birthday as a salt? Saving that password to database is easy, but how to hash this during login? I've googled this piece of code for my applicationContext-security.xml file, where they use username value for salt:
<!-- authentication from database -->
<security:authentication-manager>
    <security:authentication-provider>
        <security:jdbc-user-service
            data-source-ref=""dataSource""
            users-by-username-query=""
          select username,password, enabled 
          from users where username=?""authorities-by-username-query=""
          select u.username, ur.authority from users u, user_roles ur 
          where u.user_id = ur.user_id and u.username =?  "" />
    <security:password-encoder hash=""sha-256"">
        <security:salt-source user-property=""username"" />
        </security:password-encoder-->
    </security:authentication-provider>

</security:authentication-manager>

So if I understand it correctly, it means, that if I would like to use user's birthday as salt, I would have to have it stored in my dtb, pull it out from dtb and then use it as a salt? It doesn't make sense to me, because if I have in my users table columns username, password, birthday, then the password can be hashed, but for the possible attacker is it quite clear, that the birthday value will be used as salt. Is there something I'm missing or does it really work so?
","The goal of using salts is to protect user's password in case of a database dump from a hacker. Because a hash is a one way conversion (you can't reverse the conversion to get the plain text password) hackers are using dictionary of hash to guess user's password (using common passphrases). So adding a salt will add an additional protection layer against this type of attack.
From wikipedia:
Dictionary attack
Rainbow table attack
","506","<java><security><spring-security><salt><password-hash>","1","1","2","2014-01-30 09:48:49","18273780","1","1","445517","","2014-01-30 09:48:49","2013-08-16 12:33:39",""
"18273431","Implementing hash and salt in Spring 3 security","I understand the idea of hash+salt when I create new entry to dtb. If I have some fixed string for the salt it might not be hard to implement it, but how to do it, when I want to use for example user's birthday as a salt? Saving that password to database is easy, but how to hash this during login? I've googled this piece of code for my applicationContext-security.xml file, where they use username value for salt:
<!-- authentication from database -->
<security:authentication-manager>
    <security:authentication-provider>
        <security:jdbc-user-service
            data-source-ref=""dataSource""
            users-by-username-query=""
          select username,password, enabled 
          from users where username=?""authorities-by-username-query=""
          select u.username, ur.authority from users u, user_roles ur 
          where u.user_id = ur.user_id and u.username =?  "" />
    <security:password-encoder hash=""sha-256"">
        <security:salt-source user-property=""username"" />
        </security:password-encoder-->
    </security:authentication-provider>

</security:authentication-manager>

So if I understand it correctly, it means, that if I would like to use user's birthday as salt, I would have to have it stored in my dtb, pull it out from dtb and then use it as a salt? It doesn't make sense to me, because if I have in my users table columns username, password, birthday, then the password can be hashed, but for the possible attacker is it quite clear, that the birthday value will be used as salt. Is there something I'm missing or does it really work so?
","The salt is not sensitive information, it doesn't matter if it is disclosed. The salt simply prevents rainbow table attacks on hashes. Note that salt should have a fairly high level of entropy, and the birthday may not be as secure as, say, 32 bytes from SecureRandom.
","506","<java><security><spring-security><salt><password-hash>","1","1","2","2014-01-30 09:48:49","18273780","1","1","445517","","2014-01-30 09:48:49","2013-08-16 12:33:39",""
"8627494","salt and hash encryption/decryption for links","ok, so i have some links that will be generated for some ads on my website via php. Now the problem i have is simply i understand how md5 works and it's not an encryption and it can not be re-rendered in its rarest form..... i have some mysql ids that i want to use as the data to  select witch ad to query the database for , but i do not want my users to have access to the ads id..... so i was hoping someone could show me how to use the hash/salt method in this case.....
Please note: i have been looking through this site for this answer and i see people time and time again say salt/hash is not encryption i understand that but its not as simple to attempt to hack my site if the links were hashed as they would be if they were just simple integers.
php script:
<?
function SuperAd($id){
    $sql = mysql_query(""SELECT * FROM `ads` WHERE `id`= $id"");
    while($ad = mysql_fetch_array($sql)){
        $title = $ad['title'];
        // here is where i want to encrypt 
        $adlink = $ad['id'];
    }
}
?>

","Adding salt is just a securer addition to hashing. And hashing is one way only. It sounds like you want some way of encrypting your $ad['id'], so that instead of users seeing:
/viewad/1/
they see:
/viewad/12lk3jx09c8faf/ 
right?
Just Google for some quick encryption / decryption algorithms.
EDIT: Here is a quick S.O. question that may help you:
Best way to use PHP to encrypt and decrypt passwords?
","505","<php><hash><salt><saltedhash>","-1","2","2","2011-12-25 01:22:33","8627520","7","","125816","","2011-12-24 23:48:46","2011-12-24 23:43:52",""
"8627494","salt and hash encryption/decryption for links","ok, so i have some links that will be generated for some ads on my website via php. Now the problem i have is simply i understand how md5 works and it's not an encryption and it can not be re-rendered in its rarest form..... i have some mysql ids that i want to use as the data to  select witch ad to query the database for , but i do not want my users to have access to the ads id..... so i was hoping someone could show me how to use the hash/salt method in this case.....
Please note: i have been looking through this site for this answer and i see people time and time again say salt/hash is not encryption i understand that but its not as simple to attempt to hack my site if the links were hashed as they would be if they were just simple integers.
php script:
<?
function SuperAd($id){
    $sql = mysql_query(""SELECT * FROM `ads` WHERE `id`= $id"");
    while($ad = mysql_fetch_array($sql)){
        $title = $ad['title'];
        // here is where i want to encrypt 
        $adlink = $ad['id'];
    }
}
?>

","You could solve your problem by using a row guid which would be unique & non guessable without having to do a hash
","505","<php><hash><salt><saltedhash>","-1","1","2","2011-12-25 01:22:33","8627520","7","","125816","","2011-12-24 23:48:46","2011-12-24 23:43:52",""
"9397282","Save password from php form. Which of this is more secure?","$pass = substr(md5($_SERVER['REMOTE_ADDR'].microtime().rand(1,100000)),0,6);
        $insert = mysql_query(""INSERT INTO users(username, password) VALUES( '"".$username.""', '"".md5($pass).""')"");

or
$salt = ""zfgse5tfgHk2jdf4hGiuyeV9trejkewQ5kjujPhysftf7agfd"";
$pass = crypt($password, ""$1$"".$salt);
$insert = mysql_query(""INSERT INTO users (username, password) VALUES ('"".$username.""', '"".$pass.""')"");

I am saving form data from a php registration form. Which of the above codes is secure? Anything better than these?
","Method #1 will totally break everything, you'll never be able to log in again. Pretty secure (unless you're not escaping $username, in which case it's totally worthless), but probably not your intention.
Method #2 will work; but it looks like a little bit of a silly, complicated way of doing something that should be straightforward.
Here's what I usually use:
public static function Hash($value) {
    return hash('sha512', hash('sha512', $value) . Config::HashSalt);
}

where Config::HashSalt is your long, much more random salt string. This needs to be in a class. Here's an example of the structure: https://github.com/minitech/ReTicket/blob/master/config.php
","501","<php><md5><registration><salt>","1","2","2","2012-02-22 15:21:05","9397420","2","1","","","","2012-02-22 15:03:28",""
"9397282","Save password from php form. Which of this is more secure?","$pass = substr(md5($_SERVER['REMOTE_ADDR'].microtime().rand(1,100000)),0,6);
        $insert = mysql_query(""INSERT INTO users(username, password) VALUES( '"".$username.""', '"".md5($pass).""')"");

or
$salt = ""zfgse5tfgHk2jdf4hGiuyeV9trejkewQ5kjujPhysftf7agfd"";
$pass = crypt($password, ""$1$"".$salt);
$insert = mysql_query(""INSERT INTO users (username, password) VALUES ('"".$username.""', '"".$pass.""')"");

I am saving form data from a php registration form. Which of the above codes is secure? Anything better than these?
","Second option(first is totally wrong), but slightly changed:

Use sha512(Never use md5)
Use user salt different for every user, but which is stored in db
Use server salt, best with some special chars that are not on keyboard
Use parameters to insert variables into query(php.net/manual/en/book.pdo.php)

","501","<php><md5><registration><salt>","1","0","2","2012-02-22 15:21:05","9397420","2","1","","","","2012-02-22 15:03:28",""
"25141312","How to test effectiveness of adding a salt for hashing?","I am fairly new with hashing and I have generated hashes for values using SHA-256 and a self made method of generating salts. It involves deterministically finding the seed for each input for the random salt generator. Now I would like to verify the integrity of the hash values and also check the effectiveness of the salt added. However, I do not know how to go about doing this. Can anyone help with this?
","Verifying the correctness of your code is the time for Unit Testing.

...a software testing method by which individual units of source code, sets of one or more computer program modules together with associated control data, usage procedures, and operating procedures are tested to determine if they are fit for use.1 Intuitively, one can view a unit as the smallest testable part of an application.

Unit testing is aided by testing frameworks, which can examine your code base, find anything marked as a test and run it on demand (i.e. when you tell it to) and/or automatically as part of a build or deploy process. The goal is to gain some level of guarantee that changes you've made to the code under test won't break your application. The test should cover combinations of inputs and their expected outputs, thus enforcing behavior.
Popular testing frameworks include JUnit for Java, NUnit for .Net languages and many others.
Anyways, to test the integrity of your hashing scheme, you would hopefully have a single method that encapsulates all the behavior. Your unit test would cover this one method1. Writing this in a Java JUnit syntax (with matchers, which you can see more about here), we might have something like this:
import org.junit.*;
public class PasswordSha256HasherTest {

    // Known inputs and outputs
    // hashes are precomputed with an external SHA256 calculator and verified
    public static final String password = ""thisismypassword"";
    public static final String unsaltedHash = ""1da9133ab9dbd11d2937ec8d312e1e2569857059e73cc72df92e670928983ab5"";
    public static final String salt = ""a19044b439748e23ccbc82c5e2549ece5ceae026340ac6cb1f616549e64020e3"";

    // This is what we want: SHA256(salt+password);
    public static final String saltedHash = ""6c89a97409d598650e458a2040e900abbeca8e697137353fdaae97e382378433""

    // If your hasher has to be instantiated, do it like this
    private PasswordHasher hasher;

    @BeforeClass
    public static void beforeClass() throws Exception {
        hasher = new PasswordHasher();
    }

    @Test
    public void testCorrectPasswordHash() throws Exception {
        String hash = hasher.getPasswordHash(password, salt);
        // If PasswordHasher is a static class, you can skip the instantiation and do this
        String hash = PasswordHasher.getPasswordHash(password, salt);

        assertThat(""Hash should match SHA256(salt + password)"",
            hash, equalTo(saltedHash));
        // You could also test that the hash doesn't match the password or the salt
    }

    @Test(expected= IllegalArgumentException)
    public void testSaltIsRequired() throws Exception {
        // If the exception for an empty salt IS NOT thrown, this test fails.
        String hash = hasher.getPasswordHash(password, """");
    }

}

This is just a start, but this would accomplish the goal of your question - verify the integrity of your hashing utility. There are many other tests you could surely write (verify password complexity requirements, disallow dictionary words, salt length requirements, etc.). Some advocates of testing maintain that writing useful and meaningful tests requires as much thought and dedication as designing the code itself. There is even the philosophy of Test Driven Development, which states you should write tests first (which describe and encapsulate all the requirements of the code), and stop writing code as soon as all the tests pass. Both of these have their merits.
I also encourage you to check out the Google testing blog if you're interested in learning from (probably) some of the best testers on the planet.
Finally, on a related note, I want to drive home my point that salts should be non-deterministic and globally unique. The easiest way to accomplish this is a sufficiently large pseudo-random value that is completely independent of everything to do with your system and your users, such as a GUID. This question tackles the exact topic, as does this question on Security.SE. As the common adage on the internet goes, if you're doing your own thing with cryptography, you are almost certainly wrong.
1: There is some debate over the proper scope of a unit test. Some might say that the lowest meaningful unit of work for a login system is the creation and authorization of a user - specifically, the mechanism of securing the password is only a part of the rest of authorization schema, and therefore it should be tested all together. To them I say that testing each part separately makes the process of finding and correcting specific bugs easier and more straightforward.
","499","<hash><salt>","1","0","3","2014-08-06 09:57:46","","2","","1783163","","2014-08-05 14:28:58","2014-08-05 14:27:44",""
"25141312","How to test effectiveness of adding a salt for hashing?","I am fairly new with hashing and I have generated hashes for values using SHA-256 and a self made method of generating salts. It involves deterministically finding the seed for each input for the random salt generator. Now I would like to verify the integrity of the hash values and also check the effectiveness of the salt added. However, I do not know how to go about doing this. Can anyone help with this?
","Each operating system has a random source and offer methods to get random bytes from this source. Most applications are not able on their own to generate cryptographically safe salts, that's why they read from the random source. Testing this method is done elsewhere, there is no need to test such a salt generator in your application, just call the method of the operating system.
","499","<hash><salt>","1","1","3","2014-08-06 09:57:46","","2","","1783163","","2014-08-05 14:28:58","2014-08-05 14:27:44",""
"25141312","How to test effectiveness of adding a salt for hashing?","I am fairly new with hashing and I have generated hashes for values using SHA-256 and a self made method of generating salts. It involves deterministically finding the seed for each input for the random salt generator. Now I would like to verify the integrity of the hash values and also check the effectiveness of the salt added. However, I do not know how to go about doing this. Can anyone help with this?
","At Martin says, you're best of using an OS-provided pseudo-random value as salt, from a function's that's documented to be appropriate for cryptographic use.
Separately, if you want to to assess your own salt routine, the criterion for quality is that it should produce a vast range of possible outputs - with the levels of grouping, scatter and repetition that you'd get from random numbers, even if the inputs to the salt calculation only differ in a bit or two.  It's pretty much the same criterion for a hash function, but you probably don't need something secure against deriving the original inputs from the salt value.
Separately, if you're regenerating the salt from say a user's address and they change it, you'd want their current password to recalcualte the hash with a new salt, or to save the old salt or address somewhere for ongoing use... otherwise their next login attempt is doomed.
","499","<hash><salt>","1","0","3","2014-08-06 09:57:46","","2","","1783163","","2014-08-05 14:28:58","2014-08-05 14:27:44",""
"18406881","how to append open ports to an already functional iptables?","I'm running what's getting to be a large implementation of salt. I've been using lokkit commands to open ports for my servers, which works for the short term, but I'm running into some scary limitations. The main being that I can't figure out if it's possible to append open ports to ports that are already open in iptables. As far as I can tell, you have to open all of the ports you want with a single command. If you run the command afterwards and you don't include a port you had opened already, it will be closed after the command. I have two questions. The first, is it possible to simply append an open port using lokkit? I couldn't find the option in the docs. The second would be, if that isn't possible, could someone point me in the right direction?  
","The answer I have come up with is specific to Salt, but it works. The answer is not to use lokkit and use salt's native iptables state. 
https://salt.readthedocs.org/en/latest/ref/states/all/salt.states.iptables.html
Simply use this state to append the additional ports you want opened.
","497","<linux><iptables><salt>","0","0","1","2013-08-23 18:28:17","","0","","","","","2013-08-23 15:45:32",""
"31623706","Salting and hashing passwords, Java and PHP compatibility","I'm trying to make a game that will tie into website content, and users' accounts will be shared across the site multiple versions of the client.
The problem is that the password needs to be salt-hashed in PHP, and I need to be able to verify through Java, and I can't find any information on secure cryptos (like PBKDF2) and ensuring that the generation is identical between PHP and Java.
I've seen some info on using PBKDF2 on PHP, OR Hmac with SHA-1, but not combining them as is suggested in the name of Java's ""PBKDF2WithHmacSHA1"". I have a handle now on the individual hashing for PHP or Java.  
How do I set up the methods to be able to generate a salt and hash on PHP, store it in MySQL and be able to verify passwords through Java's hashing functions?  
Would prefer to stick with PBKDF2, if at all possible (unless someone can suggest an equivalent that would work better for cross-compatibility).
P.S. Not particularly sure whether this deserved to be here or on Crypto SE. I figured, since I was asking about specific languages, I'd try here first.
","So, it turns out it wasn't as complicated as I was thinking it was.  I found this question that said that PHP's equivalent to Java's PBKDF2WithHmacSha1 was the hash_pbkdf2 function with the sha1 algorithm.  From there it was just a matter of transferring the salt and hash from the PHP to the Java.  Here's how it ended up:
1) PHP: For this one, I just copied the guy's pbkdf2 function and generated the salt and hash like he did.
2) Java: All that needed to happen was a bit of a change in the bytecode conversion, and it worked just fine.
After that, all I needed to do was modify the Java code to fit into my server/client setup (including secondary session hashing), and work out a few more bugs surrounding more salt and hash encoding and decoding through network transmission, and it works perfectly now.
A slightly more detailed answer is available on that other question.
","495","<java><php><hash><salt><pbkdf2>","1","0","2","2015-07-27 16:07:54","31635199","0","","2580791","","2015-07-27 16:07:54","2015-07-25 06:32:30",""
"31623706","Salting and hashing passwords, Java and PHP compatibility","I'm trying to make a game that will tie into website content, and users' accounts will be shared across the site multiple versions of the client.
The problem is that the password needs to be salt-hashed in PHP, and I need to be able to verify through Java, and I can't find any information on secure cryptos (like PBKDF2) and ensuring that the generation is identical between PHP and Java.
I've seen some info on using PBKDF2 on PHP, OR Hmac with SHA-1, but not combining them as is suggested in the name of Java's ""PBKDF2WithHmacSHA1"". I have a handle now on the individual hashing for PHP or Java.  
How do I set up the methods to be able to generate a salt and hash on PHP, store it in MySQL and be able to verify passwords through Java's hashing functions?  
Would prefer to stick with PBKDF2, if at all possible (unless someone can suggest an equivalent that would work better for cross-compatibility).
P.S. Not particularly sure whether this deserved to be here or on Crypto SE. I figured, since I was asking about specific languages, I'd try here first.
","Try to consider using a pre-built user and password management like JBoss KeyCloak. It is based on standards like OAuth2 and OpenID Connect, and things like password reset, user registration and social login come for free. It includes connectors for Java and JavaScript. Apparently connectors for PHP are available as well.
","495","<java><php><hash><salt><pbkdf2>","1","0","2","2015-07-27 16:07:54","31635199","0","","2580791","","2015-07-27 16:07:54","2015-07-25 06:32:30",""
"50210409","How to convert single quote into double quote in jinja template file?","Hi I have a salt state file who has a "".sls"" extension and it is using jinja template
There I am creating a list in jinja template. Problem is when I run that file then list converts into JSON which convert double quotation around each element into single quotation which causes error.
{%- set opentsdb_hosts = [] -%}
{%- for host in salt['pnda.opentsdb_hosts']() -%}
{%- do opentsdb_hosts.append(""http://%s:%s"" % (host, opentsdb_port)) -%}
{%- endfor -%}

As you can see, I am creating a list whose name is opentsdb_hosts. Each element inside opentsdb_hosts should have a double quotation around. But it is doing single quotation.
Please help.
","You must be outputting opentsdb_hosts directly using {{ opentsdb_hosts }}, which outputs it in a python-friendly format, one that usually prefers single quotes over double quotes (although both quotation marks work in python as valid string literals).
To output opentsdb_hosts as json, simply use the json renderer provided by salt instead, i.e. {{ opentsdb_hosts | json }}.
","495","<json><templates><jinja2><salt>","0","0","1","2018-06-20 03:46:00","","0","","","","","2018-05-07 08:54:37",""
"28065642","How to protect medical data in a web app/database?","I'm working on a small paramedical app (mainly calendar and information about the patients) that will be web hosted. The app will allow multiple accounts (1 for each practitioner) that won't share data.
I want to protect the personal data as much as possible, especially to avoid 2 possible problems :
1/ a programming bug that may lead one practitioner to access data from someone else
2/ if the complete database is stolen, I want the personal information to be safe
I know that the firsts things are to avoid every sql or parameter injection but I want to take an extra steps because I'm human and I know that just one error could lead to a real mess if the data leaks... and I really want to avoid that.

The app is based on PHP and Mysql
the app HAS TO have a way to decrypt the personal data by it's own, because for example it sends in background emails and SMS to the patients to remind them their appointments.
a practitioner often has a secretary that must be able to access the app with it's own login/password and see the practitioner's data (but not all of them, only the ones related to the contact information, appointment date/time...)
of course the practitioner or secretary should be able to make a search in the database to find for example a patient by it's name, phone number... even if it's encrypted in the database.

So... I'm trying to figure out the best way to store, encrypt, decrypt the data. I'm also a little bit scared of performance, for example a search engine on encrypted data...
For now here is the simplest idea I have :
1/ when a new practitioner creates an account I generate a unique key, related to the account, that will never change, and store it in the database... it will be a kind of ""salt""
2/ for every personal data, I encrypt it (for example : a patient's name, phone number) with a key composed of two parts : one which is the same for the whole application (stored in a php config file for example) + the ""salt"" taken from the practitioner account.
This is practical because there is no link between the practitioner's password and the app, so for example no problem for the practitioner's secretary to access the data, my email/SMS tasks to decrypt the data and if the practitioner looses his password (which is more likely to happen than the steal of the database).
I first imagined to encrypt the encryption key with the (clear) password of the practitioner but then it's impossible to access the data with the secretary account or the schedule task.
If I encrypt the encryption key with the hash of the practitioner's password (which is stored in the database) it's a lot more complicated and in fact adds zero security benefit.
Questions :
A/ do you think it's strong enough or am I missing something ?
I know that if the complete server is compromised, the data are potentially not safe (if the hacker is smart enough to locate the key, write a code to decrypt all the data)... but that's not exactly what I fear. And I can't find any better solution which keeps the schedule task able to decrypt the data.
Do you have better suggestions ?
B/ how would you encrypt/decrypt the text data ? (algorithm, key, database...) I'm really new to this in PHP and I fear making mistakes. I read the documentation but it lacks complete real life example (from key generation to text encryption/decryption).
I fear utf8 problems, problems with key lengths (what are the good practices for creating a compound key from a fixed part (php config file) and a variable part stored in the database ?)... 
C/ for the search engine, how would you do ? for example I want to find a person having the name starting by ""ABCD"" do I have a better way to do it than retrieving the whole list of encrypted names, decrypt (php) every name, put them in a list, and then (still php) make a search function inside that list ? Do you think I should encrypt/decrypt the whole data using the MySQL's AES_ENCRYPT/AES_DECRYPT functions instead ?
Thanks in advance
","If your db is mysql for encrypt/decrypt use mysql functions, in my opinion, writing own functions adds zero benefits. 
Program bug - maybe user/pass for aplication same as for db ? (it means aplication connecting to database with user and password provided by practitioner/secretary), mayby even every practictioner has own db with own permission sets.
Ad.C 
Use database motor when possible. 
Own crypto algorithm maybe more secure, but how to other side security - backup/restore, changing something with enviroment - hosting service, db ?
Security it is not only hacker-prof. Use it with attention :)
And most important - check legislation rules about medical data security.
","492","<php><mysql><encryption><salt><data-security>","-1","1","2","2017-02-28 11:03:26","","0","","1819418","","2015-01-21 12:36:00","2015-01-21 11:05:38",""
"28065642","How to protect medical data in a web app/database?","I'm working on a small paramedical app (mainly calendar and information about the patients) that will be web hosted. The app will allow multiple accounts (1 for each practitioner) that won't share data.
I want to protect the personal data as much as possible, especially to avoid 2 possible problems :
1/ a programming bug that may lead one practitioner to access data from someone else
2/ if the complete database is stolen, I want the personal information to be safe
I know that the firsts things are to avoid every sql or parameter injection but I want to take an extra steps because I'm human and I know that just one error could lead to a real mess if the data leaks... and I really want to avoid that.

The app is based on PHP and Mysql
the app HAS TO have a way to decrypt the personal data by it's own, because for example it sends in background emails and SMS to the patients to remind them their appointments.
a practitioner often has a secretary that must be able to access the app with it's own login/password and see the practitioner's data (but not all of them, only the ones related to the contact information, appointment date/time...)
of course the practitioner or secretary should be able to make a search in the database to find for example a patient by it's name, phone number... even if it's encrypted in the database.

So... I'm trying to figure out the best way to store, encrypt, decrypt the data. I'm also a little bit scared of performance, for example a search engine on encrypted data...
For now here is the simplest idea I have :
1/ when a new practitioner creates an account I generate a unique key, related to the account, that will never change, and store it in the database... it will be a kind of ""salt""
2/ for every personal data, I encrypt it (for example : a patient's name, phone number) with a key composed of two parts : one which is the same for the whole application (stored in a php config file for example) + the ""salt"" taken from the practitioner account.
This is practical because there is no link between the practitioner's password and the app, so for example no problem for the practitioner's secretary to access the data, my email/SMS tasks to decrypt the data and if the practitioner looses his password (which is more likely to happen than the steal of the database).
I first imagined to encrypt the encryption key with the (clear) password of the practitioner but then it's impossible to access the data with the secretary account or the schedule task.
If I encrypt the encryption key with the hash of the practitioner's password (which is stored in the database) it's a lot more complicated and in fact adds zero security benefit.
Questions :
A/ do you think it's strong enough or am I missing something ?
I know that if the complete server is compromised, the data are potentially not safe (if the hacker is smart enough to locate the key, write a code to decrypt all the data)... but that's not exactly what I fear. And I can't find any better solution which keeps the schedule task able to decrypt the data.
Do you have better suggestions ?
B/ how would you encrypt/decrypt the text data ? (algorithm, key, database...) I'm really new to this in PHP and I fear making mistakes. I read the documentation but it lacks complete real life example (from key generation to text encryption/decryption).
I fear utf8 problems, problems with key lengths (what are the good practices for creating a compound key from a fixed part (php config file) and a variable part stored in the database ?)... 
C/ for the search engine, how would you do ? for example I want to find a person having the name starting by ""ABCD"" do I have a better way to do it than retrieving the whole list of encrypted names, decrypt (php) every name, put them in a list, and then (still php) make a search function inside that list ? Do you think I should encrypt/decrypt the whole data using the MySQL's AES_ENCRYPT/AES_DECRYPT functions instead ?
Thanks in advance
","You are asking questions here, so I assume that you are not a crypto expert.  You need a crypto expert to look at this.  How well will your liability insurance stand up to a court case if you are sued because your application leaked personal data?
You need a crypto expert to look at this.
","492","<php><mysql><encryption><salt><data-security>","-1","0","2","2017-02-28 11:03:26","","0","","1819418","","2015-01-21 12:36:00","2015-01-21 11:05:38",""
"16786743","Using password salt as IV in password-based encryption","I need to write a simplified encryption API that can easily deal with symmetric encryption, either by using a random generated key or a password-derived key.
The password generation is performed with the PKCS5_PBKDF2_HMAC() function from the OpenSSL library and using EVP_sha256() as hashing algorithm and a random generated 16-byte salt.
The symmetric encryption is performed with the OpenSSL EVP API.
My question is: how (in)secure is it to use the password derivation salt also as the IV for encryption?
The reason behind this question is that this will allow me to simplify the API and the output stream in the following way:

for the encryption routine, a user would have to provide either the password or the secret key; based on whichever is provided, the code can decide if a key needs to be derived from the password or use the provided key as it is;
similarly, for the decryption  routine, a user would have to provide either the password or the secret key; based on whichever is provided, the key could be re-derived from the password and the IV, which is also acting as a password salt (and is put first in the output stream, right before the ciphertext);
the output stream will consist only of the IV concatenated with the ciphertext, eliminating a separate salt;
the output stream will be the same for a random generated key or a password-derived key.

Note: the API automatically takes care of the salt/IV generation, which is randomly generated for each encryption session, so even if a password is reused, the key is guaranteed to be different.
Thank you in advance for your answers.
","As it happens, I've run into pretty much exactly the same scenario while working on one of my own projects (where a message is encrypted in CBC-mode with a random IV, and the user can either specify a key or a textual password).
Similar questions are discused here and here. To summarize: the purpose of an IV is to ensure that ciphertext remains unique even if the key is reused. As long as you're generating a new IV per message like you said you are, the source of the key doesn't matter as much. Which means you're probably safe reusing the salt as the IV, as far as anyone knows right now. It doesn't even seem like it would even make sense for it to be an issue, because the salt gets put through a cryptographic hash before deriving the key in a different way; as long as you use a good hashing function in PBKDF2 (i.e. SHA-256 as mentioned above), a key so derived is indistinguishable from one which was randomly generated, which in this case it might have been.
However, people uncover unexpected things in the world of cryptanalysis all the time, and straight-up reusing the same data in two places is considered A Bad Thing in principle even if we don't know of any practical problems right this minute. Should you actually be worried about this? At my level of knowledge on cryptanalysis, I'm somewhere between ""maybe"" and ""I don't know,"" which is a little too much uncertainty for my tastes, so I'm going with the ""technically safer"" course of action, which is generating separate IV and salt values. Transmitting both the salt and the IV is a perfectly cromulent security practice, and you have nothing to lose if the user directly inputs the key and the salt goes unused.
","490","<salt><encryption-symmetric><initialization-vector>","3","1","1","2015-12-22 00:58:35","34403161","4","0","2427226","","2013-05-29 07:22:09","2013-05-28 07:55:47",""
"17517475","Converting an blowfish encryption algo from php to python","I have this real simple encryption that I used for my site. I am trying to convert all my code from php to python, but I can't figure out how to get python to produce the same output that php did with this code.
function myhash($word){
  $salt = ""$2a$06$"" . substr(sha1($word) , 0, 22) . ""$"";
  return crypt($word, $salt);
}

Seeing as I already have quite a few passwords stored with this encryption, it would be silly to make a new encryption. What to do?
","There is no blowfish built in. If you can use other modules try bcrypt it does exactly what you need. So the function will be:
import hashlib
import brypt
def myhash(word):
    salt = ""$2a$06$"" + hashlib.sha1(word).hexdigest()[0:22] + ""$""
    return bcrypt.hashpw(word, salt)

","489","<php><python><encryption><salt><blowfish>","2","2","1","2018-06-26 10:15:56","17519602","2","","1033581","","2018-06-26 10:15:56","2013-07-07 23:44:14",""
"30315599","Understanding the purpose of a salt in authentication","Based on my research the purpose of a salt is to defeat the use of a rainbow table. This is done because rainbow tables are only created to look up hashes of a sole password(without a salt). I am having a conflict understanding how we can't use rainbow tables in when salts are introduced. Suppose we have the following scenario:
I am a malicious hacker and I want to gain access to a rich person's bank account. I am able to gain access to the bank's database which has the salt and the hashed string in plain sight, which is a function of the user's password and salt (f(password + salt)). The salt is fsd88. Next I get a rainbow table from some hacker on the web. Great, so I am all ready to become rich and move to Switzerland. 
What I do next is I take the the hashed string and look it up on the rainbow table (according to a tutorial online this takes about an hour to do). The rainbow table look up then returns passwfsd88. Since I know the salt is fsd88. I now know what the password is! It's passw!
What is wrong with my mental model of a salt? Thanks for reading.
","The salt is added before the hash is calculated:
$password = 'secret';
$salt = 'kU832hNWQ2122093uiue';
$passwordHash = hash($password + $salt);

In this example not the hash of password 'secret' was calculated, instead it is the hash of 'secretkU832hNWQ2122093uiue'. Nobody will ever create a rainbowtable with such passwords, if you find a precalculated rainbow-table it would contain the hash of 'secret'.
Of course you can build a rainbow-table with a list of possible passwords with this salt (the salt is not secret), but if each password got its unique salt, then you would have to build rainbow-tables for each password separately. That means, the salt prevents to use a single rainbow-table to get all passwords at once.
Good to know that i'm rich now, regards from switzerland :-)
","486","<authentication><salt>","1","0","1","2015-05-19 06:37:58","","5","","","","","2015-05-19 02:06:28",""
"42792079","How to use files within salt directory for cmd.run?","I want to run a command (cmd.run) which uses files within the salt directory, for example:
fly_set_{{ pipeline }}:
  cmd.run:
    - name: |
        fly -t ci set-pipeline -p {{ pipeline }} -c pipeline.yml -l credentials.yml
    - require:
      - cmd: fly_login_{{name}}
        - file: /etc/concourse/teams/builds/{{ pipeline }}/pipeline.yml
        - file: /etc/concourse/teams/builds/{{ pipeline }}/credentials.yml

Is this the correct approach or do I need to do this first?
file:
  managed:
    - source: salt://concourse/teams/builds/{{ pipeline }}/pipeline.yml

","I'm not sure exactly what are you trying to achieve, but if your command is depending on multiple files the right way to do this would be:
/etc/concourse/teams/builds/{{ pipeline }}/pipeline.yml:
  file.managed:
    - source: salt://concourse/teams/builds/{{ pipeline }}/pipeline.yml

/etc/concourse/teams/builds/{{ pipeline }}/credentials.yml:
  file.managed:
    - source: salt://concourse/teams/builds/{{ pipeline }}/credentials.yml

fly_set_{{ pipeline }}:
  cmd.run:
    - name: |
        fly -t ci set-pipeline -p {{ pipeline }} -c pipeline.yml -l credentials.yml
    - require:
      - file: /etc/concourse/teams/builds/{{ pipeline }}/pipeline.yml
      - file: /etc/concourse/teams/builds/{{ pipeline }}/credentials.yml

First two file.managed directive will ensure that both files are present on the minion. The require directive in cmd.run will make sure that files are present on the minion before the execution of the command.
","485","<salt><salt-stack><concourse>","0","3","1","2017-05-13 18:24:42","","1","","561422","","2017-05-13 18:24:42","2017-03-14 16:57:31",""
"35016609","What should be the minimum length of a salt and is it always unique with openssl_random_pseudo_bytes","I'm working on storing the password of my users in my database in a secure way. I read a bit and I was recommanded to use openssl_random_pseudo_bytes to generate my salt. I do:
bin2hex(openssl_random_pseudo_bytes($thenumberIwanttouse, $cstrong));

It works, but I was wandering two things:
-What should be the lenght of my salt and in my database, if my salt have 30 character for exemple, I would just need a varchar field with a length of 30?
-Will openssl_random_pseudo_bytes  always generate a new salt?If not, should it mean that I need to compare my salt to all other existing salt in my database to make sure that there aren't any duplicate?
","The raw format length of the salt is 16 bytes and it is NOT hex-encoded. However, you are not supposed to generate it yourself, nor to have a separate field for salt in the database!
password_hash() will automatically generate a salt (and it will do that better than you could), and then store it in the hash itself - that's just how the algorithm works.
You shouldn't be using anything but password_hash() and password_verify() to make the whole thing work.
In addition, there are better alternatives to openssl_random_pseudo_bytes() for generating random data, such as random_bytes() under PHP7, or it's backport for older PHP versions - the random_compat package.
","482","<php><database><salt>","-1","3","1","2016-01-26 15:08:01","35016935","7","","4313453","","2016-01-26 15:03:32","2016-01-26 14:47:35",""
"19048137","apache authentication with .htpasswd password using salt","I am wondering how the Apache server authenticates me with .htpasswd
I have a .htpasswd file inside a folder. The .htpasswd content is generated with php and the password is encrypted with the crypt() function like this:
crypt($password,mb_substr($password,0,2));

The problem is that no matter which salt I use: mb_substr($password,0,2) or my_private_salt or 'whatever' the server will always authenticate me if I pass the correct username/password combination.
So, what's the point with that salt?
Thanks
","I found the answer.
The php crypt() function generates a unique hash. If the salt is not specified then a random salt will be generated. 
A BIG problem is that only the first 8 characters from the password will be used to generate the hash and only two characters from the salt.
The resulting hash will be composed of the salt + another 11 characters.
For example:
if we do: crypt('1234567','12')
the result will be ""120QBxD1IX.Cw"". 
Notice the first two characters from the hash (12)
This is how the Apache server will know how to encrypt the request and compare it with the saved hash in the .htpasswd file.
For a better explanation please see this link: http://blog.irreverence.co.uk/?p=858
","482","<php><apache><authentication><salt><.htpasswd>","0","0","1","2013-09-28 09:53:18","","3","","1362043","","2013-09-27 11:22:24","2013-09-27 10:08:49",""
"50131840","gunicorn: Is there a better way to reload gunicorn in described situation?","I have a django project with gunicorn and nginx.
I'm deploying this project with saltstack
In this project, I have a config.ini file that django views read.
In case of nginx, I made that if nginx.conf changes, a state cmd.run service nginx restart with - onchanges - file: nginx_conf restarts the service.
but in case of gunicorn, I can detect the change of config.ini, but I don't know how to reload the gunicorn. 
when gunicorn starts, I gave an option --reload but does this option detects change of config.ini not only django project's files'?
If not, what command should I use? (ex: gunicorn reload) ??
thank you.
ps. I saw kill -HUP pid but I think salt wouldn't knows gunicorn's pid..
","The --reload option looks for changes to the source code not config. And --reload shouldn't be used in production anyway.
I would either:
1) Tell gunicorn to write a pid file with --pid /path/to/pid/file and then get salt to kill the pid followed by a restart.
2) Get salt to run a pkill gunicorn followed by a restart.
","479","<django><gunicorn><salt>","1","1","1","2018-05-03 07:35:04","50135051","0","","","","","2018-05-02 09:58:41",""
"45478853","Is there a standard way to generate a salt for crypt syscall?","I need to implement account management for my application, and I would rather not use chpasswd subprocess, or otherwise let the plaintext password out my my application's memory space.
I want to use putspent with a password hash I generate with crypt, but I can't find any standard function to randomize a salt for crypt. An online search only found weird hashing function implementations I'd rather not copy into my code. Is there a standard function that would generate a salt for me?
Otherwise, would it be wise to just re-use the current salt stored in my shadow file? I couldn't think of why it WOULD be a security hazard (it will not weaken my shadow file against a rainbow table attack), it just feels wrong because in systems security a rule of thumb is to always randomize everything... (Users are added with system utilities)
","OpenSSL provides functions for sha512:
https://www.openssl.org/docs/man1.0.2/crypto/SHA512.html
int SHA256_Init(SHA256_CTX *c);
int SHA256_Update(SHA256_CTX *c, const void *data, size_t len);
int SHA256_Final(unsigned char *md, SHA256_CTX *c);
unsigned char *SHA256(const unsigned char *d, size_t n,
      unsigned char *md);

","478","<c><linux><security><salt><crypt>","1","0","2","2017-08-04 20:32:54","","3","1","902109","","2017-08-03 09:25:45","2017-08-03 08:30:38",""
"45478853","Is there a standard way to generate a salt for crypt syscall?","I need to implement account management for my application, and I would rather not use chpasswd subprocess, or otherwise let the plaintext password out my my application's memory space.
I want to use putspent with a password hash I generate with crypt, but I can't find any standard function to randomize a salt for crypt. An online search only found weird hashing function implementations I'd rather not copy into my code. Is there a standard function that would generate a salt for me?
Otherwise, would it be wise to just re-use the current salt stored in my shadow file? I couldn't think of why it WOULD be a security hazard (it will not weaken my shadow file against a rainbow table attack), it just feels wrong because in systems security a rule of thumb is to always randomize everything... (Users are added with system utilities)
","For generating a salt for crypt(), you need 2 random bytes.
For this, you can use openssl:
#include <openssl/rand.h>
int RAND_bytes(unsigned char *buf, int num);
int RAND_pseudo_bytes(unsigned char *buf, int num);

Ref: https://www.openssl.org/docs/man1.0.2/crypto/RAND_bytes.html
Example:
unsigned char salt[2];
RAND_pseudo_bytes(salt, 2);
char *ptr = crypt(password, salt);

","478","<c><linux><security><salt><crypt>","1","-1","2","2017-08-04 20:32:54","","3","1","902109","","2017-08-03 09:25:45","2017-08-03 08:30:38",""
"10992262","Legacy app with md5 hashes: how to add salt and SHA1?","I've a legacy app where passwords are hashed using MD5 without salt. I'd like to switch to SHA1 with salt, but I'd like to keep current users' passwords.
My plan is to change hashing function to sha1(md5(password) + salt). I'll be able to batch process all existing hashes using sha1(<existing_pass> + salt).

Is it safe to keep md5 in this case?
Is it ok to have one single salt for all users?

","
As for question 1 I'm not quite sure but it seems to be OK.
For question 2: It is never OK to have same salt for all users. Salt has two functions. To prevent using pre-generated hashes / rainbow tables to search leaked database, and to prevent generation of dictionary-based hashes and searching databases with them too. Common salt will work in first case making rainbow tables unusable, but won't prevent cracker from dictionary attack. If cracker knows the global salt, he can generate frequent passwords, hash them and grep entire database. If salt is generated per user this scenario isn't possible. 

","474","<hash><md5><salt><sha>","2","1","2","2012-06-12 07:55:15","10992557","0","","","","","2012-06-12 07:32:44",""
"10992262","Legacy app with md5 hashes: how to add salt and SHA1?","I've a legacy app where passwords are hashed using MD5 without salt. I'd like to switch to SHA1 with salt, but I'd like to keep current users' passwords.
My plan is to change hashing function to sha1(md5(password) + salt). I'll be able to batch process all existing hashes using sha1(<existing_pass> + salt).

Is it safe to keep md5 in this case?
Is it ok to have one single salt for all users?

","
It's not a good idea to keep md5, read this question: Use SHA-512 and salt to hash an MD5 hashed password?.
It's better to have one salt for each user. With the same salt, users with the same password will have the same hash, and a rainbow table can be created for all your passwords at the same time.

","474","<hash><md5><salt><sha>","2","1","2","2012-06-12 07:55:15","10992557","0","","","","","2012-06-12 07:32:44",""
"49031065","Cloud execution module - Profile is not defined Salt Stack","I am trying to set up the cloud execution module, and every time I try to bring up a test instance with ""salt-cloud -p ec2_east_nano_prod saltcloud_nano_test"", I get an error:
    [DEBUG   ] Reading configuration from /etc/salt/cloud
[DEBUG   ] Reading configuration from /etc/salt/master
[DEBUG   ] Missing configuration file: /etc/salt/cloud.providers
[DEBUG   ] Including configuration from '/etc/salt/cloud.providers.d/abc.conf'
[DEBUG   ] Reading configuration from /etc/salt/cloud.providers.d/abc.conf
[INFO    ] There's at least one cloud driver under the '-east-2-public' cloud provider alias which does not have the required 'driver' setting. Removing it from the available providers listing.
[DEBUG   ] Missing configuration file: /etc/salt/cloud.profiles
[DEBUG   ] Including configuration from '/etc/salt/cloud.profiles.d/ec2_us_west-2.conf'
[DEBUG   ] Reading configuration from /etc/salt/cloud.profiles.d/ec2_us_west-2.conf
[DEBUG   ] Configuration file path: /etc/salt/cloud
[WARNING ] Insecure logging configuration detected! Sensitive data may be logged.
[INFO    ] salt-cloud starting
[DEBUG   ] Could not LazyLoad parallels.avail_sizes: 'parallels' __virtual__ returned False
[DEBUG   ] LazyLoaded parallels.avail_locations
[DEBUG   ] LazyLoaded proxmox.avail_sizes
[DEBUG   ] Could not LazyLoad saltify.destroy: 'saltify.destroy' is not available.
[DEBUG   ] Could not LazyLoad saltify.avail_sizes: 'saltify.avail_sizes' is not available.
[DEBUG   ] Could not LazyLoad saltify.avail_images: 'saltify.avail_images' is not available.
[DEBUG   ] Could not LazyLoad saltify.avail_locations: 'saltify.avail_locations' is not available.
[DEBUG   ] Could not LazyLoad rackspace.reboot: 'rackspace.reboot' is not available.
[DEBUG   ] LazyLoaded openstack.list_locations
[DEBUG   ] Could not LazyLoad rackspace.list_locations: 'rackspace.list_locations' is not available.
[ERROR   ] Profile ec2 is not defined
[DEBUG   ] LazyLoaded nested.output
Error:
    Profile ec2 is not defined

Setup
/etc/salt/cloud.profiles.d/ec2_us_west-2.conf
ec2:
  provider: ec2-us-east-2-public
  image: ami-41e7cb24
  size: t2.micro
  ssh_username: ubuntu
  tag: {'Environment': 'production'}
  sync_after_install: grains
  minion:
        master: 172.31.17.185

Here is the provider.d file:
ec2-us-east-2-public:
  minion:
    master: master
  id: '**********'
  key: '******+******'
  private_key: /etc/salt/***.pem
  keyname: ***
  ssh_interface: public_ips
  securitygroup: default
  location: us-west-2
  availability_zone: us-west-2a
  provider: ec2
  del_root_vol_on_destroy: True
  del_all_vols_on_destroy: True
  rename_on_destroy: True

Versions Report
Salt Version:
           Salt: 2017.7.4

Dependency Versions:
           cffi: Not Installed
       cherrypy: Not Installed
       dateutil: 2.4.2
      docker-py: Not Installed
          gitdb: 0.6.4
      gitpython: 1.0.1
          ioflo: Not Installed
         Jinja2: 2.8
        libgit2: Not Installed
        libnacl: Not Installed
       M2Crypto: Not Installed
           Mako: 1.0.3
   msgpack-pure: Not Installed
 msgpack-python: 0.4.6
   mysql-python: Not Installed
      pycparser: Not Installed
       pycrypto: 2.6.1
   pycryptodome: Not Installed
         pygit2: Not Installed
         Python: 2.7.12 (default, Dec  4 2017, 14:50:18)
   python-gnupg: Not Installed
         PyYAML: 3.11
          PyZMQ: 15.2.0
           RAET: Not Installed
          smmap: 0.9.0
        timelib: Not Installed
        Tornado: 4.2.1
            ZMQ: 4.1.4

System Versions:
           dist: Ubuntu 16.04 xenial
         locale: UTF-8
        machine: x86_64
        release: 4.4.0-1038-aws
         system: Linux
        version: Ubuntu 16.04 xenial

I am not sure if I need to define ""provider: pillar['cloud'][etc]"".
","In your provider.d file, try using ""driver"" instead of ""provider"", similar to the salt-cloud quick start.
This page notes that this field was changed some years ago.

Changed in version 2015.8.0.
The provider parameter in cloud provider definitions was renamed to
  driver. This change was made to avoid confusion with the provider
  parameter that is used in cloud profile definitions. Cloud provider
  definitions now use driver to refer to the Salt cloud module that
  provides the underlying functionality to connect to a cloud host,
  while cloud profiles continue to use provider to refer to provider
  configurations that you define.

","474","<devops><salt><salt-stack><salt-cloud>","1","1","1","2018-03-28 21:53:58","49544787","4","","4089912","","2018-03-02 13:50:06","2018-02-28 13:46:31",""
"25182805","getting deterministic values with java's securerandom","I am trying to get the same salt value everytime depending on the seed value. Here's the code I have
SecureRandom sr = new SecureRandom(seed.getBytes());
byte[] salt = new byte[32];
sr.nextBytes(salt);

However, I keep getting different values everytime it is run. Am I doing something wrong is there something missing?
Update:
Ok I have tried the using random instead of secureRandom and to get bytes using long seed but I still get different values each time. However, when I change it to try to get nextInt I am able to get the same values. 
Random rand = new Random(Long.parseLong(seed, 36));   
byte[] salt = new byte[32];
rand.nextBytes(salt); 

Is there a work around correctly getting the same bytes?
","This is intentional. SecureRandom tries to use entrophy in order to get true randomness, which by the way can be expensive. It will always return different values no matter what salt you start out with.
If you want deterministic values, use Random instead.
","471","<java><hash><salt>","1","2","1","2014-08-07 16:42:02","25182880","2","","1360706","","2014-08-07 16:42:02","2014-08-07 12:39:44",""
"7837652","converting java sha512crypt to c#","I am trying to duplicate the following JAVA code into C# but I don't think I'm doing it right o_o
(The code is taken from ftp://ftp.arlut.utexas.edu/pub/java_hashes/Sha512Crypt.java)
JAVA variables:
ctx, alt_ctx = MessageDigest
key          = String (the password to hash)
salt         = String (salt to add to the hash)
        /*                  ---JAVA---                    //
        ////////////////////////////////////////////////////
        ctx.reset();

        ctx.update(key, 0, key.length);
        ctx.update(salt, 0, salt.length);

        alt_ctx.reset();
        alt_ctx.update(key, 0, key.length);
        alt_ctx.update(salt, 0, salt.length);
        alt_ctx.update(key, 0, key.length);

        alt_result = alt_ctx.Digest();
        //////////////////////////////////////////////////*/

C# variables:
ctx, alt_ctx = HashAlgorithm (SHA512Managed)
key and salt are same as in JAVA...
 //                       --- C# EQUIV ? ---                    //
        int TESTINGINT;
        ctx = null;
        ctx = new SHA512Managed();
        ctx.TransformBlock(key, 0, key.Length, key, 0);
        ctx.TransformBlock(salt, 0, salt.Length, salt, 0);

        alt_ctx = null;
        alt_ctx = new SHA512Managed();

        alt_ctx.TransformBlock(key, 0, key.Length, key, 0);
        alt_ctx.TransformBlock(salt, 0, salt.Length, salt, 0);
        alt_ctx.TransformBlock(key, 0, key.Length, key, 0);

        alt_result = alt_ctx.TransformFinalBlock(key, 0, key.Length); //most likely wrong here

        //?????????????????????????????????????????????????????????//

Like I said, pretty sure this is wrong... Wondering if anyone knows the exact translation.
I've also been looking at http://www.obviex.com/samples/hash.aspx for some help. This however does not give me the same output and does not have any # rounds to do.
Given the word ""beta"" I'm trying to ultimately replicate the following (one line)
$6$rounds=60000$ZIFtW/dNUcD/k$O57sTkYwuRpQcgpnIdKLShfCVR7.vGzfMhvvWn7Mg8trGJsWADChhs6S5ONybnSBWHEHIQKw66a4i/YrA4y/y1
Thanks for your help
","So after doing some thorough testing, I've fixed my C# to the following which seems to be the equivalent...
ctx = new SHA512Managed();

byte[] digestA = new byte[key.Length + salt.Length];

ctx.TransformBlock(key, 0, key.Length, digestA, 0);
ctx.TransformBlock(salt, 0, salt.Length, digestA, key.Length);

byte[] digestB = new byte[key.Length * 2 + salt.Length];

ctx.TransformBlock(key, 0, key.Length, digestB, 0);
ctx.TransformBlock(salt, 0, salt.Length, digestB, key.Length);
ctx.TransformBlock(key, 0, key.Length, digestB, key.Length + salt.Length);

alt_ctx = new SHA512Managed();

alt_result = alt_ctx.ComputeHash(digestB);  

","471","<c#><java><encryption><salt><sha512>","0","1","1","2012-02-04 17:47:18","7850397","4","","","","","2011-10-20 14:41:16",""
"12135339","Hash Validation","Hello This is my current code I'm working on:
$uname = ""unholybanana"";
$pass = ""choykiller13"";
$salt = salty();
$password = sha1 ( $uname . $pass . $salt );
echo $password;

function salty() {
    mt_srand(microtime(true)*100000 + memory_get_usage(true));
    return md5(uniqid(mt_rand(), true));
}

So far my problem is $password echos $uname+$pass hashed mixed but it doesn't mix with salt anyone can point out a problem with this. I'm currently just using sha1 for learning purposes rather than go straight to scrypt and bcrypt. Also this is what would i do to insert the data into the db:
    $sql= ""INERT into test SET uname='$uname', hashpass='$password', salt='$salt'"";

Would be great if anyone can spot if there is a problem with my insert above.
So far i have no idea how am i able to validate this.(syntax) would appreciate anyone would point me in a good direction.
But i think it should be still thinking how i would go about coding this.
     $checkpass= sha1 ( $uname . $pass . $salt ) == $hashpass;

Also i wanted to add $uname because all of my unames are given to the client so all unames would look like this C-9183102.
Would appreciate any help thanks!
","You almost definitely want
$sql= ""INSERT into test SET uname='$uname', hashpass='$password', salt='$salt'"";

instead of INERT.
","469","<php><sql><hash><salt>","0","2","1","2012-08-27 01:37:39","12135368","0","","451969","","2012-08-27 01:32:50","2012-08-27 01:30:12",""
"1995639","How strong do salts need to be?","How strong do salts need to be? 
At the moment I use this function to generate a ""unique"" salt upon user registration:
$salt = substr(str_shuffle('0123456789abcdefghijklmnopqrstuvwxyz'), 0, 12);

I then hash it with sha1 along with the password.
What do you think?
PS. I'm not planning on getting MySpace big.
","How strong a salt is all depends on how worried you are about security. You could simply salt it with the username (not very strong,) or you could generate a unique salt for each user, as you did.
If you're really worried, you could also create an encryption key, and encrypt each of these.
The more you add to it, the stronger it will, be, obviously. It's all just how worried about security you are.
You could try adding some special characters to that salt and it would be a lot stronger.
","468","<php><encryption><hash><salt>","2","0","6","2010-01-03 20:54:47","1996266","2","","","","","2010-01-03 17:38:16",""
"1995639","How strong do salts need to be?","How strong do salts need to be? 
At the moment I use this function to generate a ""unique"" salt upon user registration:
$salt = substr(str_shuffle('0123456789abcdefghijklmnopqrstuvwxyz'), 0, 12);

I then hash it with sha1 along with the password.
What do you think?
PS. I'm not planning on getting MySpace big.
","Salt lengths of 12 characters or more are difficult to crack but you can easily make your salts stronger by using other characters too i.e. upper case letters and special characters.
You are already salting your hash and ensuring each record has it's own individual salt which is very important. 
","468","<php><encryption><hash><salt>","2","0","6","2010-01-03 20:54:47","1996266","2","","","","","2010-01-03 17:38:16",""
"1995639","How strong do salts need to be?","How strong do salts need to be? 
At the moment I use this function to generate a ""unique"" salt upon user registration:
$salt = substr(str_shuffle('0123456789abcdefghijklmnopqrstuvwxyz'), 0, 12);

I then hash it with sha1 along with the password.
What do you think?
PS. I'm not planning on getting MySpace big.
","When it comes to security it's not really an issue of how strong your salt is, it's an issue of how computationally expensive the hashing function is.  SHA1 and MD5 are cheap.  If you're going to stick with fast (weak) hashing functions - and this may be perfectly acceptable for small sites, I don't mean to imply otherwise - then I wouldn't worry about just how cryptographically-random the salt is.  As long as it's random, it'll serve its purpose of eliminating precisely one attack vector (rainbow tables).
","468","<php><encryption><hash><salt>","2","2","6","2010-01-03 20:54:47","1996266","2","","","","","2010-01-03 17:38:16",""
"1995639","How strong do salts need to be?","How strong do salts need to be? 
At the moment I use this function to generate a ""unique"" salt upon user registration:
$salt = substr(str_shuffle('0123456789abcdefghijklmnopqrstuvwxyz'), 0, 12);

I then hash it with sha1 along with the password.
What do you think?
PS. I'm not planning on getting MySpace big.
","Any sufficiently random salt is strong ""enough"".  The more randomness and more characters your salt has, the better for the hash, but anything that's several characters long and random works.
Here's some interesting links on password security:

http://en.wikipedia.org/wiki/Password_cracking
http://chargen.matasano.com/chargen/2007/9/7/enough-with-the-rainbow-tables-what-you-need-to-know-about-s.html
http://www.codinghorror.com/blog/archives/000953.html

","468","<php><encryption><hash><salt>","2","0","6","2010-01-03 20:54:47","1996266","2","","","","","2010-01-03 17:38:16",""
"1995639","How strong do salts need to be?","How strong do salts need to be? 
At the moment I use this function to generate a ""unique"" salt upon user registration:
$salt = substr(str_shuffle('0123456789abcdefghijklmnopqrstuvwxyz'), 0, 12);

I then hash it with sha1 along with the password.
What do you think?
PS. I'm not planning on getting MySpace big.
","The method of shuffling characters and taking the first 12 is equivalent to picking (without repetitions) 12 characters when the order matters. You have 36!/(36-12)! ~~ 2^59 possible ways of doing this. 
If you pick all 12 elements (with possible repetitions) from the set of 36 letters, there are 36^12 ~~2^62 possible ways of doing it.
So in the method you used you end up with around 59 bits of entropy. I would say it's sufficient for any application and gives only 8 times less combinations that picking elements with repetitions. 
","468","<php><encryption><hash><salt>","2","1","6","2010-01-03 20:54:47","1996266","2","","","","","2010-01-03 17:38:16",""
"1995639","How strong do salts need to be?","How strong do salts need to be? 
At the moment I use this function to generate a ""unique"" salt upon user registration:
$salt = substr(str_shuffle('0123456789abcdefghijklmnopqrstuvwxyz'), 0, 12);

I then hash it with sha1 along with the password.
What do you think?
PS. I'm not planning on getting MySpace big.
","The purpose of random salts is to ensure that a simple rainbow table won't work to decrypt the passwords, should the database table be leaked.  If each record has its own salt, a new rainbow table would be needed for every single row.
Your shuffling approach is fine.  The main point is for the salts to be DIFFERENT for each record, so that a single rainbow table won't compromise the whole table of passwords.  The ""strength"" of the salts isn't as important.
","468","<php><encryption><hash><salt>","2","1","6","2010-01-03 20:54:47","1996266","2","","","","","2010-01-03 17:38:16",""
"50457148","How can I retrieve a list of directories under /srv/salt/projects in the /srv/salt/top.sls","I'm trying to use a for loop like below in my /srv/salt/top.sls file.
   {%- set prjlist = salt['file.find']('/srv/salt/projects',type='d',mindepth=1,maxdepth=1,print='name') %}
   # {{ prjlist }}
   {%- for prj in prjlist %}
      'role:{{ prj }}_server':
        - match: pillar
        - projects.{{ prj }}.server
   {%- endfor %}

When I run ""salt -l debug myhost state.apply test=True"" doesn't match the expected role with the for block above.  However if I replace the prjlist assignment with the hardcoded list that find.file should be returning like with
{%- set prjlist = ['expected'] %}

then salt finds the role as expected ¯\_(⊙︿⊙)_/¯.
If I do a ""salt-call -l debug state.show_highstate"" and look at the rendered top.sls output, when using salt['file.find'] command the comment line is shown as
#[u'expected']

But if I use a hardcoded list the comments becomes
#['expected']

Besides that the rendered blocks look the same.  
I'm using version 2018.3.0 (Oxygen).
Is there anything wrong with the salt['file.find'] line ?  
Is there another, better way I should be using to get a list of the directories under /srv/salt/projects on the salt-master ?
","Use cp.list_master_dirs instead.
{% for path in salt['cp.list_master_dirs']() if salt['file.dirname'](path) == 'projects' %}
  {% set prj = salt['file.basename'](path) %}
  'role:{{ prj }}_server':
    - match: pillar
    - projects.{{ prj }}.server
{% endfor %}

","468","<jinja2><salt><salt-stack>","2","2","1","2018-06-19 18:19:15","50934694","0","1","","","","2018-05-21 22:03:21",""
"30896550","Error Hashing + Salt password","Can you help me to fix this problem:
TypeError: can't concat bytes to str

I am trying to safely store hash + salt passwords.
I think the problem is that my salt is a byte object.
How can I transform it into a string?
Or is there a way to hash it better?
import base64
import hashlib
import os

def getDigest(password, salt=None):
    if not salt:
        salt = base64.b64encode(os.urandom(32))
        digest = hashlib.sha256(salt + password).hexdigest()
        return salt, digest

def isPassword(password, salt, digest):
    return getDigest(password, salt)[1] == digest  


print(getDigest('batman'))

","You can do salt = salt.decode(""utf-8"") after salt is encoded to convert it to string.
","466","<python><authentication><python-3.x><hash><salt>","3","3","1","2016-05-21 09:42:32","30896978","0","2","","user6339740","2016-05-21 09:42:32","2015-06-17 15:53:28",""
"47797205","digest('hex') function not found using CryptoJS","I am using crypto-js.js and creating a sha512 function there for creating a variable hash1. we are successfully creating the hash and then updating hash with password but after that not able to use digest function.
var sha512 = function (password, salt) {

    var hash1 = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA512, salt); /** Hashing algorithm sha512 */

    hash1.update(password);

    var value = hash1.digest('hex');
    return {
        salt: salt,
        passwordHash: value
    };
};

Does anybody know how to fix this?
","digest is an HMAC method in the Node.js crypto module.  The equivalent method in CryptoJS is finalize.  The result of finalize is a CryptoJS WordArray object.  To get a hex string, use the WordArray in a context where it will be treated as a string.  Specifically, replace your:
    var value = hash1.digest('hex');

with:
    var value = '' + hash1.finalize();

","466","<javascript><salt><cryptojs>","0","0","1","2017-12-14 09:17:11","","0","","354577","","2017-12-13 16:29:47","2017-12-13 15:52:32",""
"49004671","Set a variable based on a py.test (testinfra) check output","I am trying to make a testinfra test file more portable, I'd like to use a single file to handle tests for either a prod / dev or test env.
For this I need to get a value from the remote tested machine, which I get by :
def test_ACD_GRAIN(host):
    grain = host.salt(""grains.item"", ""client_NAME"")
    assert grain['client_NAME'] == ""test""

I'd need to use this grain['client_NAME'] value in different part of the test file, therefore I'd like to store it in a variable.
Anyway to do this ?
","There are a lot of ways to share state between tests. To name a few:
Using a session-scoped fixture
Define a fixture with a session scope where the value is calculated. It will executed before the first test that uses it runs and then will be cached for the whole test run:
# conftest.py
@pytest.fixture(scope='session')
def grain():
    host = ...
    return host.salt(""grains.item"", ""client_NAME"")

Just use the fixture as the input argument in tests to access the value:
def test_ACD_GRAIN(grain):
    assert grain['client_NAME'] == ""test""

Using pytest namespace
Define an autouse fixture with a session scope, so it is autoapplied once per session and stores the value in the pytest namespace.
# conftest.py

import pytest


def pytest_namespace():
    return {'grain': None}


@pytest.fixture(scope='session', autouse=True)
def grain():
    host = ...
    pytest.grain = host.salt(""grains.item"", ""client_NAME"")

It will be executed before the first test runs. In tests, just call pytest.grain to get the value:
import pytest

def test_ACD_GRAIN():
    grain = pytest.grain
    assert grain['client_NAME'] == ""test""

pytest cache: reuse values between test runs
If the value does not change between test runs, you can even persist in on disk:
@pytest.fixture
def grain(request):
    grain = request.config.cache.get('grain', None)
    if not grain:
        host = ...
        grain = host.salt(""grains.item"", ""client_NAME"")
        request.config.cache.set('grain', grain)
    return grain

Now the tests won't need to recalculate the value on different test runs unless you clear the cache on disk:
$ pytest
...
$ pytest --cache-show
...
grain contains:
  'spam'

Rerun the tests with the --cache-clear flag to delete the cache and force the value to be recalculated.
","465","<python><testing><pytest><salt>","2","2","1","2018-02-27 22:05:26","49018716","0","","2650249","","2018-02-27 22:05:26","2018-02-27 08:55:55",""
"3284277","Salting in PHP and MySQL","I have been developing a login library for a website using CodeIgniter. The authentication code is as follows:
function signin($username, $password)
{
    $CI =& get_instance();
    $query_auth=$this->db->query('SELECT user_id, banned FROM user WHERE username=? AND password=SHA1(CONCAT(?,salt)) LIMIT 1', array($username, $password));

    if($query_auth->num_rows()!=1)
        return 2;
    else
    {
        if($query_init->row()->banned==1)
            return 3;
        else
        {
            $CI->load->library('session');
            $this->session->set_userdata('gauid', $query_auth->row()->user_id);
            return 1;
        }
    }
}

The return values signifying success, failure or banned. Each user has a unique salt stored in the database.
Originally i grabbed the salt from the database, combined the users inputted password and salt from the database in PHP, then queried the database again with the combined value. I thought that this would speed things up as only one trip to the database is required and there is less code. I also thought that it would be equally secure, however after reading the top reponse to this question
Salting my hashes with PHP and MySQL ...

First of all, your DBMS (MySQL) does
  not need to have any support for
  cryptographic hashes. You can do all
  of that on the PHP side, and that's
  also what you should do.

...I started to wonder if there was a security problem i had neglected to spot.
Is there actually anything wrong this code?
","Not anything wrong per se. Keep in mind any traffic carrying the unencrypted/unhashed password is suspect. So, for instance, when the server is a remote one, and not working with encryption in communicating with that server, it is yet another moment to try to intercept a password. Also, if queries are logged somewhere (either by default, or because they're slow), you have a plain password + the salt you're using sitting in those serverlogs, after all the trouble you went through NOT to store a plaintext password somewhere. If you did it privately in your own code, that wouldn't happen.
It all depends on how paranoid you like to be. There are far easier to abuse and often forgotten evils, like session-fixation. 
","462","<php><mysql><security><salt>","0","2","1","2010-07-19 19:52:24","3284353","6","","-1","","2017-05-23 11:48:44","2010-07-19 19:23:25",""
"39750398","validating password with salt and sha512whirlpool in mysql","What would the SQL statement be to validate a password if the MySql table that looks like this:
user_id   password     salt
-------   --------     ----
 1         23ed2...    m9f3m...

I tried:
select * from password_table 
where user_id = 1 
and password = shal(`salt` + 'password') 
order by id desc 
limit 1

which did not return anything.   The algorithm is sha512 whirlpool.
In php it goes like this:
hash('sha512', hash('whirlpool', $password));
It is possible that it can't be done in an sql statement.
","You cannot securely hash and verify passwords with an SQL-Statement, because salted hashes cannot be searched for, and because most databases do not offer appropriate hash functions.
Instead use a hash function like BCrypt, SCrypt or PBKDF2 from your development language. For verification first search for the hash by username/id only, and afterwards verify the found hash with the development language again.
","462","<mysql><hash><salt><sha512><whirlpool>","0","1","1","2016-09-29 12:48:08","","1","","1816580","","2016-09-28 18:40:08","2016-09-28 14:26:37",""
"17480873","Salting passwords with client-side hash","Given that you really have to perform your password hashing on the client side, how can you implement server-side salting?
The first solution that I can think of is to ask for the user's salt from the server's users table before you perform the hash. But that means you're confirming that the user ""exists"" since you give him the valid salt of the user.
I've also thought that instead of storing the salt in the user's table, you can make the salt something that is available to the user, for example, a variation of his username. But consistency problems might arise because the server and the client needs to remember how exactly the salt is gotten from the provided user data.
What is the best way to do this?
","I'm no expert with regards to the topic but how about using something like a one-time salt along with the solutions you mentioned.
Meaning, you provide the client a salting function that generates a salt based on a random seed for a short time frame. The seed itself is dynamic and changes after some time and must be the same between the server and client. After all, the salt need not be secret.
On the client side generate the salt using the username (or whatever user data is available) assuming it is unique. Then you generate the hash on the concatenated password and salt and send it on the server.
On the server side, you calculate the salt using the same salting function in the client with the username as the input. You then generate the hash just the same and determine if the two values match. You just have to make sure the time window is wide enough to allow successful authentication.
","459","<security><hash><passwords><client-side><salt>","1","1","2","2015-04-19 03:25:43","","2","","","","","2013-07-05 04:02:25",""
"17480873","Salting passwords with client-side hash","Given that you really have to perform your password hashing on the client side, how can you implement server-side salting?
The first solution that I can think of is to ask for the user's salt from the server's users table before you perform the hash. But that means you're confirming that the user ""exists"" since you give him the valid salt of the user.
I've also thought that instead of storing the salt in the user's table, you can make the salt something that is available to the user, for example, a variation of his username. But consistency problems might arise because the server and the client needs to remember how exactly the salt is gotten from the provided user data.
What is the best way to do this?
","Hashing client-side is useful if you don't have HTTPS for logins, but it can have some disadvantages such as revealing your hashing and/or salting methods. That being said, if they have access to your password hash database, they probably already have access to that information.
In order to do only a server side salt, you will need to rehash the password using the salt and password hash. In this scenario you would store only the username, salt (if not using a username and password hash salt) and second hash.
If as from your example you wish to perform the salting on both client and server, I would suggest using a combination of username and the initial password hash to salt. The salt won't be unknown by the client as anyone could check your salting method and even apply it to a password cracker, but it will avoid them using a rainbow table to crack same password users. 
Don't use the username by itself as a salt. If its a common username (eg. admin), then there is probably a table out there already with this salt.
The problem with using nyde1319's answer (sorry didn't have rights to comment on the answer) is that you will need to have an unencrypted version of the password in your database to perform the password+salt hash. Defeating the purpose of the hash. If it was done using a hashed version of the password, you'd have to store the first hash and they could just crack that hash, defeating the purpose of the salt.
","459","<security><hash><passwords><client-side><salt>","1","1","2","2015-04-19 03:25:43","","2","","","","","2013-07-05 04:02:25",""
"37575004","Decrypt data from MySQL database","I have the below code to show all data from a MySQL database in a HTMl database:
<?php
$result = mysqli_query($con,""SELECT * FROM Persons"");
echo ""<table border='1'>"";
$i = 0;
while($row = $result->fetch_assoc())
{
    if ($i == 0) {
      $i++;
      echo ""<tr>"";
      foreach ($row as $key => $value) {
        echo ""<th>"" . $key . ""</th>"";
      }
      echo ""</tr>"";
    }
    echo ""<tr>"";
    foreach ($row as $value) {
      echo ""<td>"" . $value . ""</td>"";
    }
    echo ""</tr>"";
}
echo ""</table>"";

mysqli_close($con);
?>

This code works fine and the data is displayed in the table correctly, my problem is that most of the data in the DB is encrypted (simply)!
For example, here is how someones first name is stored 5cGs+mhdNN/SnHdqEbMk6zlKRu8uW7pR1zRjQHV9DGQ=
Is there a way to decrypt the data before displaying it in the table?
I usually decrpyt the date in the following way:
$name_firstD = simple_decrypt($name_first , ""secured"");

","You need to have an array of columns which are encrypted.
<?php
$result = mysqli_query($con,""SELECT * FROM Persons"");

$encrypted_columns = array('password','code', 'first_name');

echo ""<table border='1'>"";
$i = 0;
while($row = $result->fetch_assoc())
{
    if ($i == 0) {
      $i++;
      echo ""<tr>"";
      foreach ($row as $key => $value) {
        echo ""<th>"" . $key . ""</th>"";
      }
      echo ""</tr>"";
    }
    echo ""<tr>"";
    foreach ($row as $key => $value) {
      echo ""<td>"" . (in_array($key,$encrypted_columns))? simple_decrypt($value , ""secured"") : $value . ""</td>"";
    }
    echo ""</tr>"";
}
echo ""</table>"";

mysqli_close($con);
?>

put the name of your encrypted column inside $encrypted_columns array.
","458","<php><html><mysql><salt>","0","3","1","2016-06-01 17:55:14","37575092","10","","3092953","","2016-06-01 17:18:53","2016-06-01 17:14:45",""
"10391314","Hash in Java with or without salt","I'm trying to make a method for encoding to SHA(128,256,512) with or without salt. The method for no salt is 
private static String crypt(String chain, String method) {
    MessageDigest md;
    try {
        md = MessageDigest.getInstance(method);
        md.update(chain.getBytes(""UTF-8""));
        byte[] mb = md.digest();
        String out = """";
        for (int i = 0; i < mb.length; i++) {
            byte temp = mb[i];
            String s = Integer.toHexString(new Byte(temp));
            while (s.length() < 2) {
                s = ""0"" + s;
            }
            s = s.substring(s.length() - 2);
            out += s;
        }
        return out;

    } catch (Exception e) {
        System.out.println(""ERROR: "" + e.getMessage());
    }
    return null;
}

where the method can be
private final static String MD5=""MD5"";
private final static String SHA_128=""SHA-1"";
private final static String SHA_256=""SHA-256"";
private final static String SHA_384=""SHA-384"";

but I'd like also to have a method crypt(String chain,String salt, String method). I tried changing the line to: 
byte[] mb=md.digest(salt.getBytes(""UTF-8"");

But it doesn't return the correct chain (compared with the php call hash_hmac('sha256','pass','salt')). How can I fix that or where can I find a method with optional salt for those algorithms? Thanks
","See How are these 2 lines of PHP different? for the difference between HMAC and just concatenating with salt.
","455","<java><encryption><salt>","1","2","1","2012-04-30 22:22:44","10391347","0","2","","","","2012-04-30 22:19:18",""
"24799946","php crypt() blowfish salt length backward compatible","I used crypt() to hash password, with a blowfish salt like this:

$2a$, 2 digits, $, 21 chars in [a-zA-Z0-9]

Here I made a mistake that chars length after third $ is 21 not 22. But it worked fine so I didn't find the error.
It works on my desktop which running windows and php 5.4.4 and on AWS ec2 which running Amazon linux with php 5.3.x, with that too short salt.
One day I updated AWS php to 5.5.14. then the problem occurred. crypt() return *0 all the time.
After some try, I added a $ at end of the salt so , it become 22 chars. And it works again and return the same hash string as before. Although it doesn't obey the blowfish rule, chars should be [./a-zA-Z0-9]
But now I duplicate this site to another machine which running openSuSE 13.1 with php 5.5.14, This salt failed again.
I downgrade php to 5.4.20 but not help.
The new site still need old database so I have to make that password hash works.
What is the library or module that effect this blowfish salt length error compatibility issue? Tt seems not PHP's version. AWS 5.5.14
Or is there another magic char can save me again? I tried replace th tail $ to each one in [./a-zA-Z0-9] but no lucky, the hash string is different ....
","First i would strongly recommend to use the new functions password_hash() and password_verify() to generate and verify new hashes. Of course this doesn't solve your actual problem with the old hashes, but it may be a good idea to mark them as old, so they can be updated the next time the user logs in.
For this old hashes i would try to verify them, generating a salt with a valid last character 22. The crypt function does actually use only part of the bits of character 22 (126 bits of the salt instead of 128). So groups of the last character 22 will end up in the same hash-value.
See the answer to this question Why does crypt/blowfish generate the same hash...
If you try out all relevant characters [.Oeu] as the character 22, the chance is good that one combination will generate the same result as your invalid salt.
EDIT:
Since the used salt becomes part of the password-hash, you should be able to see what was used as character 22 (the 22th character after the third $).
","455","<php><salt><blowfish>","5","2","2","2014-07-17 12:40:59","","5","1","2064368","","2014-07-17 10:05:33","2014-07-17 09:39:03",""
"24799946","php crypt() blowfish salt length backward compatible","I used crypt() to hash password, with a blowfish salt like this:

$2a$, 2 digits, $, 21 chars in [a-zA-Z0-9]

Here I made a mistake that chars length after third $ is 21 not 22. But it worked fine so I didn't find the error.
It works on my desktop which running windows and php 5.4.4 and on AWS ec2 which running Amazon linux with php 5.3.x, with that too short salt.
One day I updated AWS php to 5.5.14. then the problem occurred. crypt() return *0 all the time.
After some try, I added a $ at end of the salt so , it become 22 chars. And it works again and return the same hash string as before. Although it doesn't obey the blowfish rule, chars should be [./a-zA-Z0-9]
But now I duplicate this site to another machine which running openSuSE 13.1 with php 5.5.14, This salt failed again.
I downgrade php to 5.4.20 but not help.
The new site still need old database so I have to make that password hash works.
What is the library or module that effect this blowfish salt length error compatibility issue? Tt seems not PHP's version. AWS 5.5.14
Or is there another magic char can save me again? I tried replace th tail $ to each one in [./a-zA-Z0-9] but no lucky, the hash string is different ....
","Using (again) '$' as the last character should make your passwords work if you downgrade to PHP 5.4.
This is however, not a long-term solution. Using '$' as the last character has made all your passwords forward-incompatible, because that's not a valid Base64 character (regardless of whether that's regular or bcrypt-compatible Base64).
For as long as you can use PHP 5.4, and that means as long as PHP 5.4 is officially supported, you should re-hash all old passwords whenever they are used.
After PHP 5.4 support is dropped, you'll have no other choice but to just generate new random passwords for your users who've remained with the old hashing scheme and e-mail them.
I must also suggest that you use the password-compat package for your updated passwords. It will give you the password_*() functions that are otherwise available only on PHP 5.5+. The package's author is the same person who implemented the functions in PHP itself, so you can be sure that it is both safe and 100% compatible, providing you with forward-compatibility when you upgrade to 5.5+.
","455","<php><salt><blowfish>","5","1","2","2014-07-17 12:40:59","","5","1","2064368","","2014-07-17 10:05:33","2014-07-17 09:39:03",""
"48841992","salt stack: how to get multiple grains on command line remote execution?","Using salt on the command line, how can I get multiple grains from remote systems?
For example, I can get os and osrelease individually:
salt '*' grains.get os
salt '*' grains.get osrelease

But I really want to get them both simultaneously, so I don't have to write a parsing script (or something) to first collect all the answers from os, and match them up with the answers from osrelease...
I want something like this, which would get both grains at once:
salt '*' grains.get os,osrelease    (this doesn't work)

","Use grains.item instead.
salt '*' grains.item os osrelease

","448","<salt><remote-execution>","0","1","1","2018-06-20 19:05:44","","0","","","","","2018-02-17 13:48:31",""
"54295504","How to hash and salt passwords for mysql database","I've seen a lot of topics about hashing and salting a password and then comparing them with the hash and salt in a MySQL database, however none of them really helped.
They were either really 'vague' or not in the right coding language.
I am coding in Visual Basic.
So, I'm using a Forum Software called 'MyBB' and it encrypts the user's password to a MD5 Hash and generates a salt alongside it.
I have successfully connected to the MySQL database and I'm able to login with my application using the Username, however because I haven't yet hashed the password and salted it then compared the two.. I'm unable to login using my original password - instead I have to use the MD5 hahsed password from the database.
My question is:
How do you Hash the password then salt it and then compare it the two so that I'm able to login using my original password without having to use the MD5 hash from the database?
Any help would be appreciated.
I have searched and read numerous amounts of topics, however none of them provided how to do it. It briefly mentioned you need to hash it and salt the password then compare the two, however it didn't provide any code or steps of how to do it. Also there is little topics on doing this in Visual basic. Most of them are for php and c# which is not helpful when you don't primarily code in those languages.  
","Hashing and salting fell out of style in the 1990s, and MD5 is such a terrible choice for hashing in general, and passwords in particular, that you should never use it.
The recommended way is to use password_hash to properly hash passwords, and password_verify to verify them.
Both of these use Bcrypt by default, a password-specific hash that's very hard to crack.
You can use Bcrypt in both PHP and other languages, it's a well-defined standard that's supported by .Net applications just the same. MD5, even ""salted"", is completely inadequate and needs to be replaced immediately.
I'd strongly suggest you switch over to Bcrypt-based passwords as soon as you can and migrate all your users over from MD5 to Bcrypt. Each time they log in you can update the password field if you know the MD5 hash matches.
For an example of how utterly useless MD5 is, search for 73868cb1848a216984dca1b6b0ee37bc.
","447","<mysql><vb.net><hash><md5><salt>","-2","0","1","2019-01-21 19:28:04","","7","","1188513","","2019-01-21 19:28:04","2019-01-21 18:00:45",""
"24096111","Is there any PHP Equivalent of the JAVA SecretKeyFactory to make a login system?","(It's my first post here.)
I'm programming a minecraft server website and I want to put a login system.
My minecraft server (BungeeCord) is using ""BungeeAuth"" to ask players to set a password to their accounts.
The BungeeAuth's password is stored in my Mysql server with two main colomns : ""playername"" and ""password"".
I want to be able to log in with this password on my website.
The password is hashed strangly. I decided to decompile ""BungeeAuth"" to see how it works.
This is the librairies :
import java.math.BigInteger;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;

This is the code :
public boolean validatePassword(String originalPassword, String storedPassword)
        throws NoSuchAlgorithmException, InvalidKeySpecException {
    String parts[] = storedPassword.split("":"");
    int iterations = Integer.parseInt(parts[0]);
    byte salt[] = fromHex(parts[1]);
    byte hash[] = fromHex(parts[2]);
    PBEKeySpec spec = new PBEKeySpec(originalPassword.toCharArray(), salt, iterations, hash.length * 8);
    SecretKeyFactory skf = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
    byte testHash[] = skf.generateSecret(spec).getEncoded();
    int diff = hash.length ^ testHash.length;
    for (int i = 0; i < hash.length && i < testHash.length; i++) {
        diff |= hash[i] ^ testHash[i];
    }

    return diff == 0;
}

private static byte[] fromHex(String hex)
        throws NoSuchAlgorithmException {
    byte bytes[] = new byte[hex.length() / 2];
    for (int i = 0; i < bytes.length; i++) {
        bytes[i] = (byte) Integer.parseInt(hex.substring(2 * i, 2 * i + 2), 16);
    }

    return bytes;
}

I understanded that the salt is random and the password is crypted in SHA1 (PBKDF2WithHmacSHA1).
Is there any function in PHP to do the same ?
I've tried hash_hmac('sha1', ..., $salt) but it seems to be different.
","","447","<java><php><mysql><sha1><salt>","2","","0","2014-06-07 10:12:43","","4","","","","","2014-06-07 10:12:43",""
"38935992","Why does this passlib hashing script create a new result every time I run the script?","I'm using the following script from the passlib docs to hash a password:
# import the hash algorithm                                                         
from passlib.hash import sha256_crypt                                               

# generate new salt, and hash a password
hash = sha256_crypt.encrypt(""toomanysecrets"")
print hash  # <== WHY IS THIS ALWAYS A DIFFERENT STRING?
# verifying the password
print sha256_crypt.verify(""toomanysecrets"", hash)  # Outputs ""True""
print sha256_crypt.verify(""joshua"", hash)  # Outputs ""False""

It seems odd that sha256_crypt.verify would be able to verify multiple different hashes as ""toomanysecrets"" - why isn't there just one hash for this password?
","Hash result depends on the input and salt. Where the salt - it is randomly generated value which is included in the output string together with result of hashing. That is why for each call sha256_crypt.encrypt output string looks random, but password verification ability is preserved.
","445","<python><hash><passwords><salt><passlib>","0","3","1","2016-08-13 19:21:59","38936197","1","","","","","2016-08-13 18:58:58",""
"35428609","how is the salt for user password hash created when creating a new user, for use with crypt() after?","currently making a little analysis on the authentication based on password on linux, i understood the following :
users passwords hashes are stored in /etc/shadow, with the salt used to generate them. The id also provide the algorithm used to get the hash. To verify if a password is correct, we pass the id and the salt to the crypt function, generate a temporary hash and compare it to the hash registered. 
However, when you create a new user for example, you need to populate that shadow file with hash and salt. Hash is of course obtained by calling crypt function, but i can't figure out how is the salt generated when invoking that crypt function.
Indeed, from what i have read and understoof of the libc code relative to crypt function, there is nothing relative to generate a random salt. We can provide crypt with a random salt we have created by hand when creating a new user, but we almost always create users without providing salts for their password hashing.
So, how is that salt generated the first time when creating a user? Is /dev/random used?
I would appreciate some code or commands in the answer.
thanks!
","There is no standard function to generate the salt but every good library should generate a random one for you. As written in another comment some salts have to be of a specific alphabet like ""A-Za-z0-9./"" for crypt() while others accept random data.
For Java, look at the Apache Commons Codec project which implements a Unix crypt() compatible function. It's a simple for loop that choses random characters from a given alphabet:
http://grepcode.com/file/repo1.maven.org/maven2/commons-codec/commons-codec/1.10/org/apache/commons/codec/digest/B64.java#B64.getRandomSalt%28int%29
","443","<linux><authentication><salt><crypt>","2","0","1","2016-02-29 16:00:51","35703502","3","","","","","2016-02-16 09:30:05",""
"21253497","How do I implement bcrypt with strength parameter?","I got bcrypt working with spring security 3.2.x. Now, I am trying to implement the strength option. I tried c: namespace but it did not work.
How can I implement this? Thanks
This how I implement bcrypt in two parts.
@This is bean part
private PasswordEncoder passwordEncoder
String encpass=passwordEncoder.encode(rs sql query)

@This is app.xml config part
bean class=o.s.s.c.b.BCryptPasswordEncoder id=bcrypto

","","442","<spring><security><salt><bcrypt><password-hash>","0","","0","2014-01-30 09:47:59","","6","","476716","","2014-01-30 09:47:59","2014-01-21 09:04:26",""
"44682342","Best way to incorporate a password expiration date within the password hash","I wrote a few JS functions that are based off of PHP5s password_hash and password_verify functions. It's basically just an easier way to generate a password which is hashed with a random salt, and verify said password, without having to store the salt separately. 
    function passwordHash ( password ) {
        if( ! password )
            throw new Error('No password was given to hash')

        if( ! _.isString( password ) )
            throw new Error('Must provide a STRING as a password')

        // Generate the salt
        // THIS MUST NOT CHANGE! If this value is not the same as what
        // passwordVerify expects, no hash will be validated
        const salt = randStr( 20 )

        // Return the salted hash with the salt prepended to it
        return salt + makeHash( password, salt )
    }

    function passwordVerify ( password, passwdHash ) {
        if( ! password || ! passwdHash )
            throw new Error('Need to provide both a password and a hash to verify')

        if( ! _.isString( password ) || ! _.isString( passwdHash ) )
            throw new Error('Password and hash both need to be strings')

        // If the hash isn't even the proper length, don't bother checking
        if( passwdHash.length !== 108 )
            return false

        // Get the salt from the password hash - first 20 chars
        const salt = passwdHash.substr( 0, 20 )

        // Get the password hash, everything after the first 20 chars
        const hash = passwdHash.substr( 20 )

        // Check the hash against a hash generated with the same data
        return makeHash( password, salt ) === hash
    }

    function makeHash ( str, salt ) {
        if( ! _.isString( str ) || ! _.isString( salt ))
            throw new Error('_.hash() requires two string parameters, a string to hash and a salt')

        const h = crypto.createHash('sha512')

        h.update(str)
        h.update(salt)

        return h.digest('base64')
    }

Heres an example of it in use:
    <!-- language: lang-js -->
    const hash = _.passwordHash( 'secret' )
    _.passwordVerify( 'secret', hash ) === true
    _.passwordVerify( 'terces', hash ) === false

I was looking for a way to incorporate an expiration date in the hash as well, meaning if a date is provided when the hash is generated, then a deadline would be incorporated within the hash (so not in plain text). Example:
    <!-- language: lang-js -->
    const hash = _.passwordHash({
        'password'   : 'secret',
        'expiration' : new Date(new Date().getTime() + (24 * 60 * 60 * 1000))
    })
    // If ran within 24 hours of when it was generated
    _.passwordVerify( 'secret', hash ) === true
    // If ran later than 24 hours after it was generated
    _.passwordVerify( 'secret', hash ) === false

But I can't find a consistent way to include a date in the hash that will reject the correct password after said date. I was thinking I could store a hashed version of the deadline right next to the password itself,  but that wouldn't be too difficult to exploit.
Any input would be appreciated.
Thanks!
","Simply hash your password with the current time, e.g. :
function passwordHash ( password ) {
    const salt = (+new Date()+""T""+randStr(20)).slice(20);//make shure salt has const length (may increase length due to lowered entropy)
    // Return the salted hash with the salt prepended to it
    return salt + makeHash( password, salt )
}

So now the password is hashed with the current time, so you could validate the hash normally. To check for the time, you can:
 const salt = passwdHash.substr( 0, 20 );
 const time=+salt.split(""T"")[0];
 //range check
 if(time<+new Date()) throw new Error(""Token expired!"");


You might consider storing the time additionally, or creating tokens if you want third-party authentification.
","441","<javascript><hash><ecmascript-6><passwords><salt>","0","-1","1","2017-06-21 17:52:56","","3","","5154806","","2017-06-21 17:16:13","2017-06-21 17:13:20",""
"2368126","Does a hash salt have any other use than to prevent rainbow table attacks?","I have heard that the only purpose of a salt is to prevent rainbow table attacks, but surely it must have more value than this? Would it not prevent a dictionary-based attack too? And what about brute-forcing, would a salt be of any use there? And could you explain why, please?
Second, suppose I had an algorithm that took the microtime, a 128 character salt and a random number between 1 billion and 10 billion, and hashed them together. Would this provide a great level of security? For even if the attacker knew one of those details, it seems to me that it would still be computationally infeasible to calculate the rest. Is that right, though?
Thanks,
Ben
Edit: To clarify, the attacker doesn't have access to the hashing algorithm, so they can't spam any information to the system. All they have is the hash and they have to work out how it was compiled. Surely even if they knew how the hash was generated, trying to brute-force all the combinations with a long salt would make it unrealistic to do?
Also, the hash isn't of the user's password or username, it's just a random set of characters used for authentication. So the salt and random number don't need to be stored, just the resulting hash. In that case would the above system, represented in something like the below code, be a good system to prevent an attacker from being able to realistically guess what a user's hash might be?
$salt = ""some random characters I made up"";
hash('sha256', microtime(true).$salt.mt_rand(1000,9999));

I know that's only 1000-9999 instead of the billions mentioned above.
Thanks again.
","No - It only prevents rainbow table attacks. As a attacker needs to build the rainbow table for each password entry. Because the salt adds a lil spice which differentiates the password hash from all the others. 
Dictionary-based and Brute-forcing attacks are essentially the same thing here. Salting doesn’t stop these as your validation algorithm is something like 
plain-text-passwd = 'secret provided by user'
salt = getSalt(username) //looks the salt value up in database based on the users username
hash-password-in-db = getPassword(username) // looks up hashed password bassed on users username
if(hash(plain-text-passwd + salt) == hash-password-in-db) //if true, password is correct

With Dictionary-based and Brute-forcing attacks the value for plain-text-passwd is spammed by the user which in turn gets hashed with the salt. So salting does nothing

Second, suppose I had an algorithm...

This is pointless, you need to store all this information against the user information table, where a 5 character salt value serves the same purpose. 
","440","<encryption><hash><salt><rainbowtable>","2","5","2","2010-03-03 12:09:39","","1","1","284108","","2010-03-03 12:09:39","2010-03-03 01:04:05",""
"2368126","Does a hash salt have any other use than to prevent rainbow table attacks?","I have heard that the only purpose of a salt is to prevent rainbow table attacks, but surely it must have more value than this? Would it not prevent a dictionary-based attack too? And what about brute-forcing, would a salt be of any use there? And could you explain why, please?
Second, suppose I had an algorithm that took the microtime, a 128 character salt and a random number between 1 billion and 10 billion, and hashed them together. Would this provide a great level of security? For even if the attacker knew one of those details, it seems to me that it would still be computationally infeasible to calculate the rest. Is that right, though?
Thanks,
Ben
Edit: To clarify, the attacker doesn't have access to the hashing algorithm, so they can't spam any information to the system. All they have is the hash and they have to work out how it was compiled. Surely even if they knew how the hash was generated, trying to brute-force all the combinations with a long salt would make it unrealistic to do?
Also, the hash isn't of the user's password or username, it's just a random set of characters used for authentication. So the salt and random number don't need to be stored, just the resulting hash. In that case would the above system, represented in something like the below code, be a good system to prevent an attacker from being able to realistically guess what a user's hash might be?
$salt = ""some random characters I made up"";
hash('sha256', microtime(true).$salt.mt_rand(1000,9999));

I know that's only 1000-9999 instead of the billions mentioned above.
Thanks again.
","A rainbow table is an optimisation method that can be used for both dictionary attacks and brute-force attacks.
A correctly-used salt makes precomputation infeasible for dictionary and brute-force attacks. Since a rainbow table is a kind of precomputation optimisation, so it is one of the optimisations that is neutered by salting.
Your second example is really just a longer salt, with some lower-entropy portions.  It is worrying that you differentiate ""a random number"" and ""a salt"", since a salt should be a random nonce.
","440","<encryption><hash><salt><rainbowtable>","2","3","2","2010-03-03 12:09:39","","1","1","284108","","2010-03-03 12:09:39","2010-03-03 01:04:05",""
"45756502","What is the SALT role in AES128GCM encryption algorithm","I'm trying to implement an aes128gcm encryption algorithm so I can push notifications over the web. However there is something that I'm missing because I don't find the purpose of using the salt anywhere. 
Encryption Content Coding Header must have the salt value, which is 16 bytes long.  Is it used to generate the 128 bit key along the public key provided? Or should I use it somewhere else during the aesgcm encryption?
Thanks beforehand, I'm kinda new to this world and can't seem to find an answer anywhere.
","If you have a completely deterministic encryption algorithm, then it's vulnerable to dictionary attacks.
For example, if ""password"" always encrypts to ""qbttxpse"", then an attacker can look through a list of encrypted passwords, and know that wherever he sees ""qbttxpse"" the plain password is ""password"". 
I've encountered a messaging system in which messages were stored encrypted without a salt. One customer frequently sent identical messages. Although you couldn't tell what the content was, you could tell how many of the messages were identical. An attacker could exploit this.
Of course there are plenty of more subtle ways that this property can be exploited.
To avoid this, we introduce a salt to proceedings.

The input to the encryption contains the plaintext, a key, and a randomly generated salt value.
The payload sent to the intended recipient contains the ciphertext and the salt
The input to the decryption contains the ciphertext, a key and the salt

So, you need to randomly generate your 16 byte salt for each message, and you need to make room in your transmission protocol to communicate it along with the ciphertext. It could be as simple as just prepending it to the ciphertext.
If you hard-code a fixed salt, and use it at both ends, it will ""work"" in the sense that you'll be able to encrypt and decrypt ending up with the same message -- but you'll have the vulnerability I described.

By the way - designing protocols around encryption algorithms is fraught with extremely subtle pitfalls, and is probably best left to real experts (I have 20 years experience working at a fairly low level with secure internet protocols -- and I wouldn't trust myself to design a bulletproof encryption layer). Use something established (e.g. SSL or S/MIME) if at all possible.
","440","<java><encryption><aes><salt><aes-gcm>","0","1","2","2017-08-18 20:03:18","","5","","","","","2017-08-18 12:19:39","2017-08-18 21:25:13"
"45756502","What is the SALT role in AES128GCM encryption algorithm","I'm trying to implement an aes128gcm encryption algorithm so I can push notifications over the web. However there is something that I'm missing because I don't find the purpose of using the salt anywhere. 
Encryption Content Coding Header must have the salt value, which is 16 bytes long.  Is it used to generate the 128 bit key along the public key provided? Or should I use it somewhere else during the aesgcm encryption?
Thanks beforehand, I'm kinda new to this world and can't seem to find an answer anywhere.
","
What is the SALT role in AES128GCM encryption algorithm

None. Salt is commonly use to randomize password hashing, but that would not be a part of AES-GCM which takes a key (not a password!), IV and plaintext to produce a ciphertext and an authentication tag.
It is certainly possible to use a salt along with a password to derive the key, but that is not a part of AES-GCM.
","440","<java><encryption><aes><salt><aes-gcm>","0","0","2","2017-08-18 20:03:18","","5","","","","","2017-08-18 12:19:39","2017-08-18 21:25:13"
"16511763","How secure is storing passwords with a salt and crypt()?","Coding an application that needs to store user's passwords for login.
At the moment, I am using the following code:
<?php
    $password = $_GET['password'];
    $salt = ""pepper"";
    $password = crypt($password,$salt);
?>

Exactly how secure is this method? For instance, if someone managed to get the $salt, how easy would it be for them to decrypt the data?
","I'm no cryptanalist, but that method is rather weak, because the default hash algorithm used is a modified version of DES and DES can be cracked with relatively unexpensive hardware in a short time: given that non-modified DES was cracked in 1998 by EFF Deep Crack in 22 hours, cracking or finding a collision for this modified version shouldn't be that difficult.
Furthermore, crypt manpage (the function PHP is wrapping on *nix systems) reports:

Warning: The key space consists of 2**56 equal 7.2e16 possible  values.
  Exhaustive  searches  of  this  key  space are possible using massively parallel computers.  Software, such as  crack(1),  is  available  which will  search  the  portion  of this key space that is generally used by humans for passwords.  Hence, password selection  should,  at  minimum, avoid  common  words  and  names.

Instead, use SHA-512 and perform multiple hashing rounds with:
// Take advantage of mcrypt extension if it is installed!
// Otherwise, generate $salt in any other way, but don't use a fixed one
$salt = strtr(base64_encode(mcrypt_create_iv(16, MCRYPT_DEV_URANDOM)), '+', '.');
$hash = crypt($password, '$6$rounds=10000$' . $salt . '$');
echo $hash;

SHA-512 with enough rounds is considered an industrial standard for password hashes in the *nix land, with mcrypt_create_iv providing a good (in the sense of entropy) $salt.
Final notice: make sure you use a proper salt and generate a different one for each user.
","439","<php><encryption><passwords><salt><password-encryption>","0","0","1","2013-05-12 21:11:06","","0","1","681865","","2013-05-12 21:02:31","2013-05-12 20:33:01","2013-05-12 21:06:53"
"11937188","Is there any advantage to re-hashing stored passwords at login time?","I'm in the process of updating several projects from using various insecure/horribly insecure MD5-based password hashes. I'm now at least somewhat better informed on best practices, but I still wonder if I'm doing something wrong. I haven't seen the specific process I'm implementing used elsewhere, but at least one SO user seems to want to do something similar. In my case:

Password hashes are generated using bcrypt. (Since the proper options seem to be bcrypt, scrypt, or pbkdf2 and bcrypt was most easily accessible to me in PHP.)
A different, random, salt is used for each hash. (To prevent attackers from generating a custom rainbow table calculated with a single, static salt.)
The hash, algorithm settings, and salt are stored together. (Since that's what PHP's crypt function give me for the hash value.)
After a successful login, the hash is re-calculated with a new random salt.

It's that last step that I'm wondering about. My intention here to to allow updates to the hashing algorithm as time passes so users who regularly log in will have their passwords stored in the most secure format available.
My questions are:

Is this a waste of time?
Are there any dangers in doing this?

","UDPATE
Sorry. Completely missed your point about the use of newer algo's. This is a good thing. :-) But as stated in my original answer below when the algo stays the same it is useless.
ORIGINAL
Rehashing passwords is useless, because if an attacker has already got hold of the hash you aren't preventing anything.
Consider the following:

I am a user on your site with the hash: 1234567890.
Some attacker gets hold of that hash.
I log in again and the hash is changed.
The attacker doesn't care the hash changes because he only needs one hash to try to break.

So nothing has been prevented. The attacker still has the hash and can still try to break it. A possible attacker is only interested in the final result (the password) and not in the hashes.
","438","<security><salt>","10","3","4","2016-08-08 06:22:49","11937376","0","","-1","","2017-05-23 12:13:37","2012-08-13 15:11:49",""
"11937188","Is there any advantage to re-hashing stored passwords at login time?","I'm in the process of updating several projects from using various insecure/horribly insecure MD5-based password hashes. I'm now at least somewhat better informed on best practices, but I still wonder if I'm doing something wrong. I haven't seen the specific process I'm implementing used elsewhere, but at least one SO user seems to want to do something similar. In my case:

Password hashes are generated using bcrypt. (Since the proper options seem to be bcrypt, scrypt, or pbkdf2 and bcrypt was most easily accessible to me in PHP.)
A different, random, salt is used for each hash. (To prevent attackers from generating a custom rainbow table calculated with a single, static salt.)
The hash, algorithm settings, and salt are stored together. (Since that's what PHP's crypt function give me for the hash value.)
After a successful login, the hash is re-calculated with a new random salt.

It's that last step that I'm wondering about. My intention here to to allow updates to the hashing algorithm as time passes so users who regularly log in will have their passwords stored in the most secure format available.
My questions are:

Is this a waste of time?
Are there any dangers in doing this?

","
If someone gain access to the hash changing it every time will not help at all unless the person has access to every update and willingly start over. this isn't going to happen and if it did you would have a much bigger problem then that.
No there is no danger in it only waste of server resources.

","438","<security><salt>","10","0","4","2016-08-08 06:22:49","11937376","0","","-1","","2017-05-23 12:13:37","2012-08-13 15:11:49",""
"11937188","Is there any advantage to re-hashing stored passwords at login time?","I'm in the process of updating several projects from using various insecure/horribly insecure MD5-based password hashes. I'm now at least somewhat better informed on best practices, but I still wonder if I'm doing something wrong. I haven't seen the specific process I'm implementing used elsewhere, but at least one SO user seems to want to do something similar. In my case:

Password hashes are generated using bcrypt. (Since the proper options seem to be bcrypt, scrypt, or pbkdf2 and bcrypt was most easily accessible to me in PHP.)
A different, random, salt is used for each hash. (To prevent attackers from generating a custom rainbow table calculated with a single, static salt.)
The hash, algorithm settings, and salt are stored together. (Since that's what PHP's crypt function give me for the hash value.)
After a successful login, the hash is re-calculated with a new random salt.

It's that last step that I'm wondering about. My intention here to to allow updates to the hashing algorithm as time passes so users who regularly log in will have their passwords stored in the most secure format available.
My questions are:

Is this a waste of time?
Are there any dangers in doing this?

","UPDATE
Re delnan's comment : If you are re-hashing the already hashed password, don't -- You never know what vulnerabilities may occur and be found in chaining up hashes. Obviously the other side of that is you need to compute the entire hash-chain every time you validate the user secret -- so just re-hash the cleartext.
ORIGINAL
I upvoted halfway through reading. It seems like you're someone who's asking the right kind of questions to be doing this kind of work. 

Not a waste of time.
There are always dangers. Someone could obtain your users' passwords by torture or, more likely, social engineering. Someone could have access to vast resources and along with your shadow password file still manage to crack the passwords. Someone could compromise your server secretly insert a trojan that intercepts the users cleartext passwords at successful login.

So there is no guarantee of perfect security. Ever. But I'm sure you know that already. Which is why I'd like to add only one thing:

Encourage users to choose hard to crack passwords. 

And, strictly speaking, if your only reason for rehashing at every login is so that passwords are always stored using the latest update then yes -- your method IS a waste of time, assuming you will not be updating your algorithm at every user's login. So there will be rehashes which use the same algorithm and (presumed) security for two logins in a row. A waste of a few clock cycles on rehashing. Strictly speaking it's not optimized. Why not just include an algo version in your password store, and at login rehash if the system algo is newer than the user's hash algo.
","438","<security><salt>","10","3","4","2016-08-08 06:22:49","11937376","0","","-1","","2017-05-23 12:13:37","2012-08-13 15:11:49",""
"11937188","Is there any advantage to re-hashing stored passwords at login time?","I'm in the process of updating several projects from using various insecure/horribly insecure MD5-based password hashes. I'm now at least somewhat better informed on best practices, but I still wonder if I'm doing something wrong. I haven't seen the specific process I'm implementing used elsewhere, but at least one SO user seems to want to do something similar. In my case:

Password hashes are generated using bcrypt. (Since the proper options seem to be bcrypt, scrypt, or pbkdf2 and bcrypt was most easily accessible to me in PHP.)
A different, random, salt is used for each hash. (To prevent attackers from generating a custom rainbow table calculated with a single, static salt.)
The hash, algorithm settings, and salt are stored together. (Since that's what PHP's crypt function give me for the hash value.)
After a successful login, the hash is re-calculated with a new random salt.

It's that last step that I'm wondering about. My intention here to to allow updates to the hashing algorithm as time passes so users who regularly log in will have their passwords stored in the most secure format available.
My questions are:

Is this a waste of time?
Are there any dangers in doing this?

","Actually, it prevent novice cookie attacker to copy cookie into his browser just to impersonate...so if the owner later login, with a changed hash, it will log the attacker out thereby reducing havoc on the user account.
","438","<security><salt>","10","-1","4","2016-08-08 06:22:49","11937376","0","","-1","","2017-05-23 12:13:37","2012-08-13 15:11:49",""
"2589903","SHA1 Password returns as cleartext after DB query","I have a SHA1 password and PasswordSalt in my aspnet_Membership table. 
but, when I run a query from the server (a Sql Query), the reader reveals
that the pass has returned as its cleartext equivalent. 
I am wondering if my web.config configuration is causing this? 
<membership defaultProvider=""CustomMembershipProvider"" 
                userIsOnlineTimeWindow=""20""
                hashAlgorithmType=""SHA1"">
      <providers>
        <clear/>
        <add  name=""CustomMembershipProvider""
              type=""Custom.Utility.CustomMembershipProvider""
              connectionStringName=""MembershipDB""
              enablePasswordRetrieval=""false""
              enablePasswordReset=""true""
              requiresUniqueEmail=""false""
              requiresQuestionAndAnswer=""false""
              passwordStrengthRegularExpression=""""
              minRequiredPasswordLength=""1""
              minRequiredNonalphanumericCharacters=""0""
              passwordFormat=""Hashed""

thanks in advance...
","OK, I figured this one out. The answer is ""yes, there is a mechanism in web.config for decrypting my SHA1 pwd automatically. Note: 

decryption=""Auto""

<machineKey validationKey=""MY Validateion Key""
            decryptionKey=""My Decryption Key""
            validation=""SHA1"" decryption=""Auto"" />

","438","<sql><passwords><sha1><salt>","2","-3","2","2010-04-08 20:05:24","2603012","1","","","","","2010-04-07 03:56:14",""
"2589903","SHA1 Password returns as cleartext after DB query","I have a SHA1 password and PasswordSalt in my aspnet_Membership table. 
but, when I run a query from the server (a Sql Query), the reader reveals
that the pass has returned as its cleartext equivalent. 
I am wondering if my web.config configuration is causing this? 
<membership defaultProvider=""CustomMembershipProvider"" 
                userIsOnlineTimeWindow=""20""
                hashAlgorithmType=""SHA1"">
      <providers>
        <clear/>
        <add  name=""CustomMembershipProvider""
              type=""Custom.Utility.CustomMembershipProvider""
              connectionStringName=""MembershipDB""
              enablePasswordRetrieval=""false""
              enablePasswordReset=""true""
              requiresUniqueEmail=""false""
              requiresQuestionAndAnswer=""false""
              passwordStrengthRegularExpression=""""
              minRequiredPasswordLength=""1""
              minRequiredNonalphanumericCharacters=""0""
              passwordFormat=""Hashed""

thanks in advance...
","You've used the right settings for the membership provider (specifically passwordFormat=""hashed""), but you also have this line:
type=""Custom.Utility.CustomMembershipProvider""

Setting passwordFormat=""hashed"" only tells whichever membership provider you're using that you want passwords to be hashed. If you use a custom membership provider, that provider has to be coded to honour the passwordFormat setting.
I'm 99% sure that the reason your passwords are being stored in clear text is because that's what the CustomMembershipProvider is programmed to do.
","438","<sql><passwords><sha1><salt>","2","1","2","2010-04-08 20:05:24","2603012","1","","","","","2010-04-07 03:56:14",""
"3347035","Salting: Is it reasonable to use the user name?","I am debating using user-names as a means to salt passwords, instead of storing a random string along with the names. My justification is that the purpose of the salt is to prevent rainbow tables, so what makes this realistically less secure than another set of data in there?
For example, 
hash( md5(johnny_381@example.com), p4ss\/\/0rD)
vs 
hash( md5(some_UUID_value), p4ss\/\/0rD)
Is there a real reason I couldn't just stick with the user name and simplify things? The only thing my web searching resulted was debates as to how a salt should be like a password, but ended without any reasoning behind it, where I'm under the impression this is just to prevent something like a cain-and-able cracker to run against it without being in the range of a million years. Thinking about processing limitations of reality, I don't believe this is a big deal if people know the hash, they still don't know the password, and they've moved into the super-computer range to brute force each individual hash.
Could someone please enlighten me here?
","You'll run into problems, when the username changes (if it can be changed). There's no way you can update the hashed password, because you don't store the unsalted, unhashed password.
","437","<hashtable><salt>","10","13","6","2010-11-15 16:54:06","3347073","1","2","","","","2010-07-27 19:12:56",""
"3347035","Salting: Is it reasonable to use the user name?","I am debating using user-names as a means to salt passwords, instead of storing a random string along with the names. My justification is that the purpose of the salt is to prevent rainbow tables, so what makes this realistically less secure than another set of data in there?
For example, 
hash( md5(johnny_381@example.com), p4ss\/\/0rD)
vs 
hash( md5(some_UUID_value), p4ss\/\/0rD)
Is there a real reason I couldn't just stick with the user name and simplify things? The only thing my web searching resulted was debates as to how a salt should be like a password, but ended without any reasoning behind it, where I'm under the impression this is just to prevent something like a cain-and-able cracker to run against it without being in the range of a million years. Thinking about processing limitations of reality, I don't believe this is a big deal if people know the hash, they still don't know the password, and they've moved into the super-computer range to brute force each individual hash.
Could someone please enlighten me here?
","I don't see a problem with utilizing the username as the salt value.
A more secure way of storing passwords involves using a different salt value for each record anyway.  
If you look at the aspnet_Membership table of the asp.net membership provider you'll see that they have stored the password, passwordsalt, and username fields in pretty much the same record.  So, from that perspective, there's no security difference in just using the username for the salt value.
Note that some systems use a single salt value for all of the passwords, and store that in a config file.  The only difference in security here is that if they gained access to a single salt value, then they can more easily build a rainbow table to crack all of the passwords at once...
But then again, if they have access to the encrypted form of the passwords, then they probably would have access to the salt value stored in the user table right along with it...  Which might mean that they would have a slightly harder time of figuring out the password values.
However, at the end of the day I believe nearly all applications fail on the encryption front because they only encrypt what is ostensibly one of the least important pieces of data: the password.  What should really be encrypted is nearly everything else.
After all, if I have access to your database, why would I care if the password is encrypted?  I already have access to the important things...   
There are obviously other considerations at play, but at the end of the day I wouldn't sweat this one too much as it's a minor issue compared others.
","437","<hashtable><salt>","10","3","6","2010-11-15 16:54:06","3347073","1","2","","","","2010-07-27 19:12:56",""
"3347035","Salting: Is it reasonable to use the user name?","I am debating using user-names as a means to salt passwords, instead of storing a random string along with the names. My justification is that the purpose of the salt is to prevent rainbow tables, so what makes this realistically less secure than another set of data in there?
For example, 
hash( md5(johnny_381@example.com), p4ss\/\/0rD)
vs 
hash( md5(some_UUID_value), p4ss\/\/0rD)
Is there a real reason I couldn't just stick with the user name and simplify things? The only thing my web searching resulted was debates as to how a salt should be like a password, but ended without any reasoning behind it, where I'm under the impression this is just to prevent something like a cain-and-able cracker to run against it without being in the range of a million years. Thinking about processing limitations of reality, I don't believe this is a big deal if people know the hash, they still don't know the password, and they've moved into the super-computer range to brute force each individual hash.
Could someone please enlighten me here?
","This method was deemed secure enough for the working group that created HTTP digest authentication which operates with a hash of the string ""username:realm:password"".
I think you would be fine seeing as this decision is secret. If someone steals your database and source code to see how you actually implemented your hashing, well what are they logging in to access at that point? The website that displays the data in the database that they've already stolen?
In this case a salt buys your user a couple of security benefits. First, if the thief has precomputed values (rainbow tables) they would have to recompute them for every single user in order to do their attack; if the thief is after a single user's password this isn't a big win. 
Second, the hashes for all users will always be different even if they share the same password, so the thief wouldn't get any hash collisions for free (crack one user get 300 passwords).
These two benefits help protect your users that may use the same password at multiple sites even if the thief happens to acquire the databases of other sites.
So while a salt for password hashing is best kept secret (which in your case the exact data used for the salt would be) it does still provide benefits even if it is compromised.
","437","<hashtable><salt>","10","1","6","2010-11-15 16:54:06","3347073","1","2","","","","2010-07-27 19:12:56",""
"3347035","Salting: Is it reasonable to use the user name?","I am debating using user-names as a means to salt passwords, instead of storing a random string along with the names. My justification is that the purpose of the salt is to prevent rainbow tables, so what makes this realistically less secure than another set of data in there?
For example, 
hash( md5(johnny_381@example.com), p4ss\/\/0rD)
vs 
hash( md5(some_UUID_value), p4ss\/\/0rD)
Is there a real reason I couldn't just stick with the user name and simplify things? The only thing my web searching resulted was debates as to how a salt should be like a password, but ended without any reasoning behind it, where I'm under the impression this is just to prevent something like a cain-and-able cracker to run against it without being in the range of a million years. Thinking about processing limitations of reality, I don't believe this is a big deal if people know the hash, they still don't know the password, and they've moved into the super-computer range to brute force each individual hash.
Could someone please enlighten me here?
","Random salting prevents comparison of two independently-computed password hashes for the same username.  Without it, it would be possible to test whether a person's password on one machine matched the one on another, or whether a password matched one that was used in the past, etc., without having to have the actual password.  It would also greatly facilitate searching for criteria like the above even when the password is available (since one could search for the computed hash, rather than computing the hash separately for each old password hash value).
As to whether such prevention is a good thing or a bad thing, who knows.
","437","<hashtable><salt>","10","1","6","2010-11-15 16:54:06","3347073","1","2","","","","2010-07-27 19:12:56",""
"3347035","Salting: Is it reasonable to use the user name?","I am debating using user-names as a means to salt passwords, instead of storing a random string along with the names. My justification is that the purpose of the salt is to prevent rainbow tables, so what makes this realistically less secure than another set of data in there?
For example, 
hash( md5(johnny_381@example.com), p4ss\/\/0rD)
vs 
hash( md5(some_UUID_value), p4ss\/\/0rD)
Is there a real reason I couldn't just stick with the user name and simplify things? The only thing my web searching resulted was debates as to how a salt should be like a password, but ended without any reasoning behind it, where I'm under the impression this is just to prevent something like a cain-and-able cracker to run against it without being in the range of a million years. Thinking about processing limitations of reality, I don't believe this is a big deal if people know the hash, they still don't know the password, and they've moved into the super-computer range to brute force each individual hash.
Could someone please enlighten me here?
","If you use the username as password and there are many instances of your application, people may create rainbow tables for specific users like ""admin"" or ""system"" like it is the case with Oracle databases or with a whole list of common names like they did for WPA (CowPatty)
You better take a really random salt, it is not that difficult and it will not come back haunting you.
","437","<hashtable><salt>","10","3","6","2010-11-15 16:54:06","3347073","1","2","","","","2010-07-27 19:12:56",""
"3347035","Salting: Is it reasonable to use the user name?","I am debating using user-names as a means to salt passwords, instead of storing a random string along with the names. My justification is that the purpose of the salt is to prevent rainbow tables, so what makes this realistically less secure than another set of data in there?
For example, 
hash( md5(johnny_381@example.com), p4ss\/\/0rD)
vs 
hash( md5(some_UUID_value), p4ss\/\/0rD)
Is there a real reason I couldn't just stick with the user name and simplify things? The only thing my web searching resulted was debates as to how a salt should be like a password, but ended without any reasoning behind it, where I'm under the impression this is just to prevent something like a cain-and-able cracker to run against it without being in the range of a million years. Thinking about processing limitations of reality, I don't believe this is a big deal if people know the hash, they still don't know the password, and they've moved into the super-computer range to brute force each individual hash.
Could someone please enlighten me here?
","I know this is an old question but for anyone searching for a solution based on this question.
If you use a derived salt (as opposed to random salt), the salt source should be strengthened by using a key derivation function like PBKDF2.
Thus if your username is ""theunhandledexception"" pass that through PBKDF2 for x iterations to generate a 32 bit (or whatever length salt you need) value.
Make x pseudo random (as opposed to even numbers like 1,000) and pass in a static site specific salt to the PBKDF2 and you make it highly improbable that your username salt will match any other site's username salt.
","437","<hashtable><salt>","10","1","6","2010-11-15 16:54:06","3347073","1","2","","","","2010-07-27 19:12:56",""
"34682497","AesCryptoServiceProvider decrypt creates corrupted file","
I'm writing a web application which allows users to upload files and download files. Files like doc, or jpeg are allowed. The files are encrypted in uploading process and decrypted in downloading process.
I use AES as the algorithm, with one key for all files, but different salt for each file. I also make sure  both encryption and decryption method use the same key and padding method.
However, when the website tries to decrypt a file, it creates a corrupted file which has a bigger size then the original file.
So I'm not sure if the encryption or decryption process messes up the file.
Here is the source code:
    //Encryption method
    private bool SaveEnryptFile(FileUpload fileUp)
        {
            try
            {
                string fName = fileUp.PostedFile.FileName;
                string outputDir = Path.Combine(ConfigurationManager.AppSettings[""clientDocFolder""] + CurrentUser.Name);
                DirectoryInfo di = new DirectoryInfo(outputDir);
                di.Create();
                string outputFile = Path.Combine(outputDir, fName);
                if (File.Exists(outputFile))
                {
                    throw new Exception(""File already exists"");
                }
                else
                {
                    byte[] file = new byte[fileUp.PostedFile.ContentLength];
                    fileUp.PostedFile.InputStream.Read(file, 0, fileUp.PostedFile.ContentLength);
//get the key string from web.config
                    var key = ConfigurationManager.AppSettings[""keyFile""];
//randomly create a salt
                    byte[] salt = new byte[8];
                    var rng = new RNGCryptoServiceProvider();
                    rng.GetBytes(salt);
                    var derivedBytes = new Rfc2898DeriveBytes(key, salt);
                    using (AesCryptoServiceProvider alg = new AesCryptoServiceProvider())
                    {
                        alg.Key = derivedBytes.GetBytes(alg.KeySize / 8);
                        alg.IV = derivedBytes.GetBytes(alg.BlockSize / 8);
                        alg.Padding = PaddingMode.Zeros;
                        // Create a decrytor to perform the stream transform.
                        using (ICryptoTransform encryptor = alg.CreateEncryptor())
                        {
                            using (var fs = File.Create(outputFile))
                            {
//store the salt in the encrypted file
                                fs.Write(salt, 0, 8);
//write encrypted bytes to encrypted file
                                using (CryptoStream cs = new CryptoStream(fs, encryptor, CryptoStreamMode.Write))
                                {
                                    cs.Write(file, 0, file.Length);
                                    cs.FlushFinalBlock();
                                }
                            }
                        }
                    }
                    return true;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

//Decryption method:
var path = Path.Combine(ConfigurationManager.AppSettings[""clientDocFolder""] + CurrentUser.Name + ""\\"" + ((WebControl)sender).Attributes[""DocumentID""]);
                    if (File.Exists(path))
                    {
                        using (FileStream fs = new FileStream(path, FileMode.Open, FileAccess.Read))
                        {
//Get the salt from the encrypted file
                            byte[] salt = new byte[8];
                            fs.Read(salt, 0, salt.Length);
//get key string from web.config file
                            string key = ConfigurationManager.AppSettings[""keyFile""];
                            var derivedBytes = new Rfc2898DeriveBytes(key, salt);
                            AesCryptoServiceProvider alg = new AesCryptoServiceProvider();
                            alg.Key = derivedBytes.GetBytes(alg.KeySize / 8);
                            alg.IV = derivedBytes.GetBytes(alg.BlockSize / 8);
                            alg.Padding = PaddingMode.Zeros;
                            using (ICryptoTransform decryptor = alg.CreateDecryptor())
                            {
//byte array to store encrypted bytes.
//I use fs.Length-8 because first 8 bytes were used to store salt
                                byte[] encryptedBytes = new byte[fs.Length - 8];
                                int encryptedByteCnt = fs.Read(encryptedBytes, 0, encryptedBytes.Length);

                                using (MemoryStream ms = new MemoryStream(encryptedBytes))
                                {
                                    byte[] plainBytes = new byte[encryptedByteCnt];
                                    using (CryptoStream cs = new CryptoStream(ms, decryptor, CryptoStreamMode.Read))
                                    {
//decrypt encrypted bytes into a byte array
                                        int decryptedByteCnt = cs.Read(plainBytes, 0, plainBytes.Length);
                                    }
//Write decrypted bytes in response stream
                                    Response.ContentType = ""application/octet-stream"";
                                    Response.AddHeader(""content-disposition"", ""attachment; filename="" + Path.GetFileName(path));
                                    Response.OutputStream.Write(plainBytes, 0, plainBytes.Length);
                                    Response.Flush();
                                }
                            }
                        }
                    }
                    else
                    {
                        ScriptManager.RegisterStartupScript(this, this.GetType(), ""DownloadDocument"", ""alert('"" + String.Format(""There is no file such as {0} exists. Please contact us if you face this problem.);"", ((WebControl)sender).Attributes[""DocumentID""]) + ""'"", true);
                        return;
                    }

","It turned out the problem is with the http posted file. That causes the input bytes are not read to the array.
It ended up that I need to set the position of the stream before it reads to 0.
So I changed the code a little bit in the encryption method like below:
From
byte[] file = new byte[fileUp.PostedFile.ContentLength];
                fileUp.PostedFile.InputStream.Read(file, 0, fileUp.PostedFile.ContentLength);

To:
byte[] file = new byte[fileUp.PostedFile.ContentLength];
Stream st = fileUp.FileContent;
st.Position = 0;
st.Read(file, 0, file.Length);
st.Close();

However, I ran to the problem with decryption. It will adds extra bytes in the decrypted byte array. Most of them are 0.
Updated: I change the writing decrypted so it won't write trailing zeros. But now the downloaded file sent from the server will contain the html of the page itself.
","430","<c#><encryption><salt><aescryptoserviceprovider>","0","0","1","2016-01-08 18:49:23","","11","","","","","2016-01-08 17:14:10",""
"46684794","Need JSON output in return of Salt-api","   request({
        url: ""https://xx.xxx.xxx.xxx:9999/run"",
        headers: {
            'Accept': 'application/x-yaml',
            'X-Auth-Token': ""41b9539436faae8016c305c2f875b31e47a23d93"",
            'Content-type': 'application/json',
        },
        method: ""POST"",
        json: true,
        body: [{
            ""client"": ""local"",
            ""tgt"": ""master_minion"",
            ""fun"": ""cmd.script"",
            ""kwarg"": {""source"": ""salt://update-diff.py"", ""args"":args},
            ""username"": ""salt"",
            ""password"": ""salt"",
            ""eauth"": ""pam""
        }]
    }

I am passing a request to salt-api to run a script. I need to parse the output.
Sample output:
return:
- master_minion:
    pid: 28796
    retcode: 0
    stderr: ''
    stdout: "" sadfh,smfsdhg\n sfgmsfgmsg\n sfgmsfgmsg\n-dkfadnfklad--->New123\n+dkfadnfklad--->New1232\n\
      \ sdfjhs,dfhn\n sdfjhs,dfhn\n sdfjhs,dfhn""

Can I get these output in JSON??
I want all lines in an array like below:
Expected Output:
[""sadfh,smfsdhg"","" sfgmsfgmsg"","" sfgmsfgmsg"",""-dkfadnfklad--->New123"",""+dkfadnfklad--->New1232"","" sdfjhs,dfhn"","" sdfjhs,dfhn"","" sdfjhs,dfhn""]
Any suggestions?? Thanks in Advance
","To get JSON returned from salt-api you just need to change the Accept-type in your request header:
  request({
        url: ""https://xx.xxx.xxx.xxx:9999/run"",
        headers: {
            'Accept': 'application/json',
  ...

Then you will get something like:
{
    ""return"": [
        {
            ""master_minion"": {
                ""pid"": 28796,
                ""retcode"": 0,
                ""stderr"": """",
                ""stdout"": "" sadfh,smfsdhg\n sfgmsfgmsg\n sfgmsfgmsg\n-dkfadnfklad--->New123\n +dkfadn--->New1232\n  sdfjhs,dfhn\n sdfjhs,dfhn\n sdfjhs,dfhn""
            }
        }
    ]

}

From your expected output, I asume that is not what you want. But your expected output is not JSON. JSON is a key value based datatructure like a python dictionary. You expect something like a list. A list like you expect can be part of JSON but need a key:
{ ""key"": [""sadfh,smfsdhg"","" sfgmsfgmsg"","" sfgmsfgmsg"",""-dkfadnfklad--->New123"",""+dkfadnfklad--->New1232"","" sdfjhs,dfhn"","" sdfjhs,dfhn"","" sdfjhs,dfhn""] }

The salt-api can not format the stdout of a executed script from a arbitrary string to JSON (how should it know that \n is a marker for a list item). You need to do it by yourself by formatting the output in update-diff.py script to json (in the script). Even then you will only get a the a string with JSON in it for the key stdout, but you can easily extract it and continue with you processing.
","426","<json><salt><salt-stack>","0","1","1","2017-10-18 08:06:11","","0","","","","","2017-10-11 09:36:36",""
"17198673","Hashing salting being performed multiple times","In a tutorial about hashing and salting password I saw the hash+salt being performed multiple times by using a for loop. 
    $salt = dechex(mt_rand(0, 2147483647)) . dechex(mt_rand(0, 2147483647)); 

    $password = hash('sha256', $_POST['password'] . $salt); 

    for($round = 0; $round < 65536; $round++) 
    { 
        $password = hash('sha256', $password . $salt); 
    } 

What is the advantage of using such a method? Is it more secure against for example brute force methods?
Also: Should I be considering another hashing algorithm other than sha256? I know there is no clear-cut answer because it's likely to depend on many factors such as degree of safety, speed etc. But are there any recommendations for let's say a fairly simple website?
","http://www.openwall.com/phpass/
is one of the more well used soltuions, I would look at implementing that.
The reason loops like that exist are to slow down the hashing process. Revese lookup tables take longer because there are more calculations in place. 
by having that loop there you have slowed someone scanning for passwords by up to 65536 times.  
","423","<hash><passwords><salt>","2","1","2","2013-06-19 20:33:31","17200770","0","","","","","2013-06-19 18:29:54",""
"17198673","Hashing salting being performed multiple times","In a tutorial about hashing and salting password I saw the hash+salt being performed multiple times by using a for loop. 
    $salt = dechex(mt_rand(0, 2147483647)) . dechex(mt_rand(0, 2147483647)); 

    $password = hash('sha256', $_POST['password'] . $salt); 

    for($round = 0; $round < 65536; $round++) 
    { 
        $password = hash('sha256', $password . $salt); 
    } 

What is the advantage of using such a method? Is it more secure against for example brute force methods?
Also: Should I be considering another hashing algorithm other than sha256? I know there is no clear-cut answer because it's likely to depend on many factors such as degree of safety, speed etc. But are there any recommendations for let's say a fairly simple website?
","The reason to iterate the hashing many times, is to slow down the calculation. Today (in 2013) you can calculate about 1.4 Giga SHA256 hashes per second with common hardware, so you can brute-force a whole english dictionary with about 500'000 words in a fraction of a millisecond.
That's why one should use a slow key-derivation function like BCrypt or PBKDF2 to hash passwords. Using some milliseconds for a login is no problem, but brute-forcing with only 1000 words per second is not practicable.
PHP 5.5 will have it's own functions password_hash() and password_verify() ready, to simplify generating BCrypt hashes. I strongly recommend to use this excellent api, or it's compatibility pack for earlier PHP versions. The usage is very straightforward:
// Hash a new password for storing in the database.
// The function automatically generates a cryptographically safe salt.
$hashToStoreInDb = password_hash($password, PASSWORD_BCRYPT);

// Check if the hash of the entered login password, matches the stored hash.
// The salt and the cost factor will be extracted from $existingHashFromDb.
$isPasswordCorrect = password_verify($password, $existingHashFromDb);

If you are interested in a more detailed answer, you may have a look at my tutorial about safely storing passwords.
","423","<hash><passwords><salt>","2","3","2","2013-06-19 20:33:31","17200770","0","","","","","2013-06-19 18:29:54",""
"4834145","hash salt complexity","Is there any benefit to using:
sha1($long_unpredictable_randomly_generated_salt.$password.$global_salt)

over 
sha1(sha1($username).$password.$global_salt)

The unique salt is obviously stored in the database, while the global salt is in a configuration file on the server.
I know the purpsoe of a salt is just to be unique, and prevent pre-calculated hash tables.. so I see no reason the long hash generated by sha1($username) is not good enough.. but as security is very important, I thought i'd ask for informative advice here from somebody who may know better :-)
","The disadvantage is that the username is mostly known, so when someone knows this 'formula' you made up, he can just calculate sha1(user_to_hack) and this part won't have any additional benefit. In fact, it won't matter much if you use sha1(username) or just username in this case.
In the other case, you're using a value that is not exposed, so even when someone knows your formula (which everybody knows now), he'll still needs the value of that unique salt too before it's any use to them, so they'll need to get to your database. I assume you're making up a unique salt for each user?
You'll probably need to get data anyway, so the unique salt is probably faster too, because you won't need to calculate the hash over username.
But anyway, both are pretty safe, but only if you implement the actual login procedure well. I wouldn't worry about which one to use right now.
","423","<php><security><hash><salt>","1","4","1","2011-01-29 00:17:50","4834231","0","1","594566","","2011-01-29 00:17:50","2011-01-28 23:51:43",""
"43749730","Hashing and salting a password, then trying to get the unhashed password later","I have created a utility class for hashing and salting passwords. Then I store the user's password in a SQL database in the user table. I want to use EL to pull the password from the database, decrypt it and display it in a JSP. How do I decrypt the password that I retrieve back from the database? Here is the utility class:
public class PasswordUtil {
/*  This code uses SHA-256. If this algorithm isn't available to you,
    you can try a weaker level of encryption such as SHA-128.
*/    
public static String hashPassword(String password)
        throws NoSuchAlgorithmException {        
    MessageDigest md = MessageDigest.getInstance(""SHA-256"");
    md.reset();
    md.update(password.getBytes());
    byte[] mdArray = md.digest();
    StringBuilder sb = new StringBuilder(mdArray.length * 2);
    for (byte b : mdArray) {
        int v = b & 0xff;
        if (v < 16) {
            sb.append('0');
        }
        sb.append(Integer.toHexString(v));
    }        
    return sb.toString();        
}

public static String getSalt() {
    Random r = new SecureRandom();
    byte[] saltBytes = new byte[32];
    r.nextBytes(saltBytes);
    return Base64.getEncoder().encodeToString(saltBytes);
}

public static String hashAndSaltPassword(String password)
        throws NoSuchAlgorithmException {
    String salt = getSalt();
    return hashPassword(password + salt);
}

public static void checkPasswordStrength(String password) throws Exception {
    if (password == null || password.trim().isEmpty()) {
        throw new Exception(""Password cannot be empty."");
    } else if (password.length() < 8) {
        throw new Exception(""Password is to short. "" +
                ""Must be at least 8 characters long."");
    }
}

public static boolean validatePassword(String password) {
    try {
        checkPasswordStrength(password);
    } catch (Exception e) {
        System.out.println(e.getMessage());
        return false;
    }
    return true;
}

}
Here is the JSP (just the table from the JSP for brevity) I want to display the decrypted password on:
     <table> 
            <tr>
                <td class=""alignRight"">First Name:</td>
                <td>${user.firstName}</td>
            </tr>
            <tr>
                <td class=""alignRight"">Last Name:</td>
                <td>${user.lastName}</td>
            </tr>
            <tr>
                <td class=""alignRight"">Phone Number:</td>
                <td>${user.phone}</td>
            </tr>
            <tr>
                <td class=""alignRight"">Address:</td>
                <td>${user.address}</td>
            </tr>
            <tr>
                <td class=""alignRight"">City:</td>
                <td>${user.city}</td>
            </tr>
            <tr>
                <td class=""alignRight"">State:</td>
                <td>${user.state}</td>
            </tr>
            <tr>
                <td class=""alignRight"">Zipcode:</td>
                <td>${user.zip}</td>
            </tr>
            <tr>
                <td class=""alignRight"">Email:</td>
                <td>${user.email}</td>
            </tr>
            <tr>
                <td class=""alignRight"">Your user name is:</td>
                <td>${user.userName}</td>
            </tr>
            <tr>
                <td class=""alignRight"">Temporary password:</td>
                <td>${user.password}</td>
            </tr>
        </table>

","You can't.
As I see it, you're using the one-way hash function SHA-256. The idea of a one-way hash function is that it only goes one way; you can't undo the hash.
You'll have to look at a ""two-way hash function"" (encryption/decryption), if you want to be able to revert your ""digested"" password stored in the DB. As Elliott Frisch says, it sounds like a really bad idea to me, though.
","419","<java><jsp><encryption><hash><salt>","0","1","2","2017-05-04 18:36:24","","6","3","","","","2017-05-03 01:40:38",""
"43749730","Hashing and salting a password, then trying to get the unhashed password later","I have created a utility class for hashing and salting passwords. Then I store the user's password in a SQL database in the user table. I want to use EL to pull the password from the database, decrypt it and display it in a JSP. How do I decrypt the password that I retrieve back from the database? Here is the utility class:
public class PasswordUtil {
/*  This code uses SHA-256. If this algorithm isn't available to you,
    you can try a weaker level of encryption such as SHA-128.
*/    
public static String hashPassword(String password)
        throws NoSuchAlgorithmException {        
    MessageDigest md = MessageDigest.getInstance(""SHA-256"");
    md.reset();
    md.update(password.getBytes());
    byte[] mdArray = md.digest();
    StringBuilder sb = new StringBuilder(mdArray.length * 2);
    for (byte b : mdArray) {
        int v = b & 0xff;
        if (v < 16) {
            sb.append('0');
        }
        sb.append(Integer.toHexString(v));
    }        
    return sb.toString();        
}

public static String getSalt() {
    Random r = new SecureRandom();
    byte[] saltBytes = new byte[32];
    r.nextBytes(saltBytes);
    return Base64.getEncoder().encodeToString(saltBytes);
}

public static String hashAndSaltPassword(String password)
        throws NoSuchAlgorithmException {
    String salt = getSalt();
    return hashPassword(password + salt);
}

public static void checkPasswordStrength(String password) throws Exception {
    if (password == null || password.trim().isEmpty()) {
        throw new Exception(""Password cannot be empty."");
    } else if (password.length() < 8) {
        throw new Exception(""Password is to short. "" +
                ""Must be at least 8 characters long."");
    }
}

public static boolean validatePassword(String password) {
    try {
        checkPasswordStrength(password);
    } catch (Exception e) {
        System.out.println(e.getMessage());
        return false;
    }
    return true;
}

}
Here is the JSP (just the table from the JSP for brevity) I want to display the decrypted password on:
     <table> 
            <tr>
                <td class=""alignRight"">First Name:</td>
                <td>${user.firstName}</td>
            </tr>
            <tr>
                <td class=""alignRight"">Last Name:</td>
                <td>${user.lastName}</td>
            </tr>
            <tr>
                <td class=""alignRight"">Phone Number:</td>
                <td>${user.phone}</td>
            </tr>
            <tr>
                <td class=""alignRight"">Address:</td>
                <td>${user.address}</td>
            </tr>
            <tr>
                <td class=""alignRight"">City:</td>
                <td>${user.city}</td>
            </tr>
            <tr>
                <td class=""alignRight"">State:</td>
                <td>${user.state}</td>
            </tr>
            <tr>
                <td class=""alignRight"">Zipcode:</td>
                <td>${user.zip}</td>
            </tr>
            <tr>
                <td class=""alignRight"">Email:</td>
                <td>${user.email}</td>
            </tr>
            <tr>
                <td class=""alignRight"">Your user name is:</td>
                <td>${user.userName}</td>
            </tr>
            <tr>
                <td class=""alignRight"">Temporary password:</td>
                <td>${user.password}</td>
            </tr>
        </table>

","Being unable to do this is the entire point of hashing passwords. (Note that you're not storing the users' passwords; you're storing the hashes.)
But if you're dead-set on it, you could try creating your own rainbow tables using your salt.
","419","<java><jsp><encryption><hash><salt>","0","0","2","2017-05-04 18:36:24","","6","3","","","","2017-05-03 01:40:38",""
"10752615","password salt storing","I want to update my password setup that is currently using just MD5.
Now what I would like to do is use something stronger (maybe sha256) with unique salt per user.
The question is about the salt storage.
Do I go with storing the salt in its own column in the database?
Then hash salt + password and when it comes to login, call the salt and password from the database, to make one.
Or do I go the way of making a salt, by using the username, email and timestamp which would also give me a unique salt per user?
I am wondering, if someone got a hold of the database with salt as a column, they would know the salt for each user, then they could crack the password.
","Just reading on another post and someone says the salt is not a secret and can be stored a database column. So that answers my question
","416","<php><authentication><passwords><hash><salt>","2","0","3","2012-07-12 21:13:38","","0","","677022","","2012-07-12 21:06:31","2012-05-25 10:17:31",""
"10752615","password salt storing","I want to update my password setup that is currently using just MD5.
Now what I would like to do is use something stronger (maybe sha256) with unique salt per user.
The question is about the salt storage.
Do I go with storing the salt in its own column in the database?
Then hash salt + password and when it comes to login, call the salt and password from the database, to make one.
Or do I go the way of making a salt, by using the username, email and timestamp which would also give me a unique salt per user?
I am wondering, if someone got a hold of the database with salt as a column, they would know the salt for each user, then they could crack the password.
","The salt is not a secret, it can be stored plaintext together with the hash. It is not even necessary to have a second field in the database. If you look at PHP's crypt() function, you can see, that the salt will be included in the hash value itself.
It's the job of the salt, to make already existing rainbowtables useless, because a rainbowtable has to be built for one specific salt. Using a different salt for every hash will prevent rainbowtable attacks, because you would have to create a rainbowtable for each hash. That's why it is not necessary to keep the salt secret.
I would recommend, that if you want to improve your password hash system anyway, you do it right, with a hash function that is slow. The article password hashes with bcrypt explains the important points of generating a hash for passwords.

Generate a salt per password, not per user.
Use a random (unique) salt, not one derrived from other parameters.
Use a slow hash function.

Last but not least, don't be afraid of doing it correctly, the code of your application can be as easy as your current implementation with MD5.
","416","<php><authentication><passwords><hash><salt>","2","5","3","2012-07-12 21:13:38","","0","","677022","","2012-07-12 21:06:31","2012-05-25 10:17:31",""
"10752615","password salt storing","I want to update my password setup that is currently using just MD5.
Now what I would like to do is use something stronger (maybe sha256) with unique salt per user.
The question is about the salt storage.
Do I go with storing the salt in its own column in the database?
Then hash salt + password and when it comes to login, call the salt and password from the database, to make one.
Or do I go the way of making a salt, by using the username, email and timestamp which would also give me a unique salt per user?
I am wondering, if someone got a hold of the database with salt as a column, they would know the salt for each user, then they could crack the password.
","Forget MD5 or SHA. Use Bcrypt. (Blow Fish Crypt) Comes native with PHP 5.3 and above. (crypt method 2a) it is more secure and processes slower.
When using Bcrypt the salt is stored together with the hash in the same feild . There is no reason for a seperate one.
http://php.net/manual/en/function.crypt.php

","416","<php><authentication><passwords><hash><salt>","2","2","3","2012-07-12 21:13:38","","0","","677022","","2012-07-12 21:06:31","2012-05-25 10:17:31",""
"17211488","Have some trouble storing hashed and salted passwords with PHP","I'm using this tutorial to help me when salting and hashing users passwords when they create an account and then bringing those passwords back and comparing then when the user enters the password to log in.
In this tut they have two functions that I am suppose to call.
create_hash()

and
validate_hash()

I have subsequently created another function myself that explodes the resulted so I can strip the salted string from the entire has.
function explode_hash($password) {
    return substr( $password, strrpos( $password, ':' ) + 1);
} 

So when I am inserting the data in the database it looks like this
INSERT INTO `users` (`id`, `email`, `passwd`, `passwdhash`)
VALUES
(1,'email@email.com','sha256:1000:mvhkKCAoLgCHb2/Ie0muPIRH0YISriOr:+Ak9g9KV1BPMIRjUorx3/auhU5dgH0lS','+Ak9g9KV1BPMIRjUorx3/auhU5dgH0lS'); 

Note that the last column contains the last part of the string in the third column.
So the last step is when logging in the user will enter their email and password and my system will get the hash from the DB (based on the email) and run it through the function called  
validate_hash()

But the result is always false. 
Would anyone have a couple minutes to look over these steps and attempt to understand the reason I'm not able to get produce a proper comparison?
","I don't know what exactly is your problem but if you want to explode and validate hash it's very simple.
$str = 'sha256:1000:mvhkKCAoLgCHb2/Ie0muPIRH0YISriOr:+Ak9g9KV1BPMIRjUorx3/auhU5dgH0lS'; //str from database
$params = explode(':', $str);
print_r($params);

It will print
 Array ( [0] => sha256 [1] => 1000 [2] => mvhkKCAoLgCHb2/Ie0muPIRH0YISriOr [3] => +Ak9g9KV1BPMIRjUorx3/auhU5dgH0lS )

now you can check $params[1] to get alorithm and other params to get proper values and use proper hashing function.
Hashing with salt looks like
hash_function('string_to_be_hashed' + 'unique random salt');

I don't know why you have 2 hashes in your mysql query instead of one. If you want hash to be salted function should return 1 hash instead of 2.
","416","<php><security><hash><passwords><salt>","0","2","4","2013-06-20 15:29:16","17215111","1","","","","","2013-06-20 10:38:01",""
"17211488","Have some trouble storing hashed and salted passwords with PHP","I'm using this tutorial to help me when salting and hashing users passwords when they create an account and then bringing those passwords back and comparing then when the user enters the password to log in.
In this tut they have two functions that I am suppose to call.
create_hash()

and
validate_hash()

I have subsequently created another function myself that explodes the resulted so I can strip the salted string from the entire has.
function explode_hash($password) {
    return substr( $password, strrpos( $password, ':' ) + 1);
} 

So when I am inserting the data in the database it looks like this
INSERT INTO `users` (`id`, `email`, `passwd`, `passwdhash`)
VALUES
(1,'email@email.com','sha256:1000:mvhkKCAoLgCHb2/Ie0muPIRH0YISriOr:+Ak9g9KV1BPMIRjUorx3/auhU5dgH0lS','+Ak9g9KV1BPMIRjUorx3/auhU5dgH0lS'); 

Note that the last column contains the last part of the string in the third column.
So the last step is when logging in the user will enter their email and password and my system will get the hash from the DB (based on the email) and run it through the function called  
validate_hash()

But the result is always false. 
Would anyone have a couple minutes to look over these steps and attempt to understand the reason I'm not able to get produce a proper comparison?
","PHP 5.5 will have it's own functions password_hash() and password_verify() ready, to simplify generating BCrypt hashes. They work very similar to the functions you proposed. I recommend to use this excellent api, or it's compatibility pack for earlier PHP versions. The usage is very straightforward:
// Hash a new password for storing in the database.
// The function automatically generates a cryptographically safe salt.
$hashToStoreInDb = password_hash($password, PASSWORD_BCRYPT);

// Check if the hash of the entered login password, matches the stored hash.
// The salt and the cost factor will be extracted from $existingHashFromDb.
$isPasswordCorrect = password_verify($password, $existingHashFromDb);

As you already saw, the salt is included in the resulting hash-value and can be extracted from there to verify the password. The function above will extract this information (salt and cost factor) automatically from the hash-value, there is no need to store the salt separately.
","416","<php><security><hash><passwords><salt>","0","4","4","2013-06-20 15:29:16","17215111","1","","","","","2013-06-20 10:38:01",""
"17211488","Have some trouble storing hashed and salted passwords with PHP","I'm using this tutorial to help me when salting and hashing users passwords when they create an account and then bringing those passwords back and comparing then when the user enters the password to log in.
In this tut they have two functions that I am suppose to call.
create_hash()

and
validate_hash()

I have subsequently created another function myself that explodes the resulted so I can strip the salted string from the entire has.
function explode_hash($password) {
    return substr( $password, strrpos( $password, ':' ) + 1);
} 

So when I am inserting the data in the database it looks like this
INSERT INTO `users` (`id`, `email`, `passwd`, `passwdhash`)
VALUES
(1,'email@email.com','sha256:1000:mvhkKCAoLgCHb2/Ie0muPIRH0YISriOr:+Ak9g9KV1BPMIRjUorx3/auhU5dgH0lS','+Ak9g9KV1BPMIRjUorx3/auhU5dgH0lS'); 

Note that the last column contains the last part of the string in the third column.
So the last step is when logging in the user will enter their email and password and my system will get the hash from the DB (based on the email) and run it through the function called  
validate_hash()

But the result is always false. 
Would anyone have a couple minutes to look over these steps and attempt to understand the reason I'm not able to get produce a proper comparison?
","EDIT: DO NOT USE THIS SORT OF FUNCTION, EXPLANATION IN COMMENTS
I will leave this answer hear because I have seen many examples of this method, but never seen an explanation of why this is the wrong way to do it. Credit to ircmaxell for pointing this out
Original Post
I currently use these functions to hash and check my passwords
function createPassHash($uname, $pass){
    $salt = hash('sha256', uniqid(mt_rand(), true) . 'yourPersonalStringHere' . strtolower($uname));
    $hash = $salt . $pass;
    for ( $i = 0; $i < 100000; $i ++ ) {
        $hash = hash('sha256', $hash);
    }
    $hash = $salt . $hash;  
    return $hash;
}
function checkPassHash($input, $stored){
    $salt = substr($stored, 0, 64);
    $hash = $salt . $input;
    for ( $i = 0; $i < 100000; $i ++ ) {
        $hash = hash('sha256', $hash);
    }
    $hash = $salt . $hash;
    if ( $hash == $stored ) {
        return true;
    }
    else{
        return false;
    }
}

This adds an extra degree of entropy by using a random number, a secret string and the username hashed together as the salt. It is also recommended that the salt is at least as long as the hash, which this also ensures.
","416","<php><security><hash><passwords><salt>","0","-1","4","2013-06-20 15:29:16","17215111","1","","","","","2013-06-20 10:38:01",""
"17211488","Have some trouble storing hashed and salted passwords with PHP","I'm using this tutorial to help me when salting and hashing users passwords when they create an account and then bringing those passwords back and comparing then when the user enters the password to log in.
In this tut they have two functions that I am suppose to call.
create_hash()

and
validate_hash()

I have subsequently created another function myself that explodes the resulted so I can strip the salted string from the entire has.
function explode_hash($password) {
    return substr( $password, strrpos( $password, ':' ) + 1);
} 

So when I am inserting the data in the database it looks like this
INSERT INTO `users` (`id`, `email`, `passwd`, `passwdhash`)
VALUES
(1,'email@email.com','sha256:1000:mvhkKCAoLgCHb2/Ie0muPIRH0YISriOr:+Ak9g9KV1BPMIRjUorx3/auhU5dgH0lS','+Ak9g9KV1BPMIRjUorx3/auhU5dgH0lS'); 

Note that the last column contains the last part of the string in the third column.
So the last step is when logging in the user will enter their email and password and my system will get the hash from the DB (based on the email) and run it through the function called  
validate_hash()

But the result is always false. 
Would anyone have a couple minutes to look over these steps and attempt to understand the reason I'm not able to get produce a proper comparison?
","I took a quick look at the tutorial you posted. The usage should be pretty straight forward. You should not need to do any exploding or anything:

Put the password you get from the user into create_hash($password) and store the result from that function in your database. No exploding, no anything.
When the user no logs in and presents you with a password, just call validate_password($user_password, $password_from_database) and let the user in if the function returns true and deny entry otherwise.

The functions do all the splitting and exploding for you, you do not need to care for that.
","416","<php><security><hash><passwords><salt>","0","2","4","2013-06-20 15:29:16","17215111","1","","","","","2013-06-20 10:38:01",""
"25651757","What about using salt to avoid hash table collision?","If a key collides in a hash table, I want to find another position by salting the key, recursively, until I find a free position (always using the same salt).
For example:

""bee"" and ""ant"" hash to 7
I insert ""bee"" in the table.
Then when I insert ""ant"", it collides, I salt ""ant"" with ""!23"" (resulting in ""!23ant"") and call insert again (I store the original key, but use the salted key to get an index).

I searched for hash tables with this method, but did't find any material on it.
What are the downsides of this approach to collision handling?
","From a performance perspective, each hash collision requires you to build a new string, which can take a long time if your input string is long. Also note that the cost of building this string increases as you get more and more hash collisions, so the price of a successful lookup ends up depending quadratically on how many collisions you had.
Comparing this salt based approach to other hashing approaches, I'd suspect that this extra cost would make your system slower in practice than other techniques like linear probing or double hashing, which might not have as good a distribution as your approach but don't have to do as much work to compute hash codes and construct auxiliary strings.
","416","<string><hash><hashmap><hashtable><salt>","1","0","2","2015-08-14 15:08:37","","4","","501557","","2015-08-12 18:23:33","2014-09-03 18:59:12",""
"25651757","What about using salt to avoid hash table collision?","If a key collides in a hash table, I want to find another position by salting the key, recursively, until I find a free position (always using the same salt).
For example:

""bee"" and ""ant"" hash to 7
I insert ""bee"" in the table.
Then when I insert ""ant"", it collides, I salt ""ant"" with ""!23"" (resulting in ""!23ant"") and call insert again (I store the original key, but use the salted key to get an index).

I searched for hash tables with this method, but did't find any material on it.
What are the downsides of this approach to collision handling?
","I cannot see how this solves any problem. Let's play a bit with such collisions:
// Here you would store ""bee"" and ""bug"" with the hashes 7 and 8:
""bee"" = 7
""bug"" = 8

// Here you get a collision and add a ""salt"":
""bee"" = 7
""ant"" = 7 -> ""!23ant"" -> 8

// Depending on the adding order, you can end up with ""bug""=8 or with ""!23bug=9""
""bee"" = 7
""!23ant"" = 8
""bug"" = 8 -> ""!23bug"" -> 9

So how would you know whether you have to search with ""bug"" or with ""!23bug"" to get the hash. Storing this information would negate the advantage of a fast hashmap.
","416","<string><hash><hashmap><hashtable><salt>","1","0","2","2015-08-14 15:08:37","","4","","501557","","2015-08-12 18:23:33","2014-09-03 18:59:12",""
"45576837","set config on salt minion from salt master","I need to set the saltstack configuration of a salt minion from a salt master. The salt.modules.config only appears to support getting configuration from the minion. 
https://docs.saltstack.com/en/latest/ref/modules/all/salt.modules.config.html
salt '*' config.get file_roots

returns the file_roots from each minion, but surprisingly you can't execute
salt '*' config.set file_roots <custom configuration>

The only solution I can think of is to edit the /etc/salt/minion file using the salt.states.file module (https://docs.saltstack.com/en/latest/ref/states/all/salt.states.file.html)  and restart the salt-minion service. However, I have a hunch there is a better solution. 
","
Yes, Salt can Salt itself!

We use the salt-formula to salt minions. The master might also be salted using this formula.
","414","<salt><salt-stack>","0","0","1","2017-08-11 08:32:39","","0","1","","","","2017-08-08 19:42:51",""
"43402982","SALT Hash Passwords in Visual Studio","I know there are many questions on SALT and hashing passwords, but I have yet to find a tutorial to walk me through this in VS using the MVC pattern. 
I currently have a DB created with a user table containing three columns:

userID(PK, int, not null)
password(varchar(45), not null)
loginID(varchar(8), null)

The password is saved as a visible string in the DB. After researching the issue, I assume password is easiest as binary instead of varchar. Does anyone know of a good tutorial to implement hashing and SALT into my program? One that clearly defines this in terms of the MVC pattern is preferred.
","MVC doesn't have anything to do with salting your passwords, although someone might point to the proper libraries that might be used with your tech stack.
Salting involves using a specific sequence, and appending that to the end of user passwords, and then hashing that data.
The reason this is done is because a hash algorithm applies on a well known string is easily reversible.  A person could, for example, use well known hash algorithms against a whole dictionary, and compare to user passwords to determine what it was hashed from.  While a good hash function is a one way function (aka can't find the input based on the output), if you had a dictionary to map you could easily do it for well known strings/ string combinations.  
For example, the password password has a well known hash.  When you attach a random sequence to the end (or start) and then hash that, it's a significantly less common hash as a result, and then it's significantly harder to reverse.
Sorry for not having the specific technologies related, but I wanted to communicate the general higher level concept of it since the over-focus on the technologies loses the bigger picture.   
","408","<hash><passwords><salt>","-2","0","1","2017-04-14 18:27:20","","1","","4032703","","2017-04-14 18:27:20","2017-04-13 23:02:39",""
"16703703","PDO Fetching Bcrypted password?","I have been a lot of troubles with my code since I first started learning something about hashing and salting passwords. First, I learn how to ""hash"" passwords with MD5 (Yeah, don't do that anymore), then with hash and SHA256 and finally now with bcrypt (Or at least i thinks it is bcrypt). Here's my registration code for now:
register.php
<html>
<head>
<title>PDO - hashing algorithm</title>
</head>
<body>
    <?php
        if(isset($_POST['submit'])) {
            define( ""DB_DSN"", ""mysql:host=localhost;dbname=test"" );
            define ( ""DB_USER"", ""root"" );
            define ( ""DB_PASS"", """" );

            try {
            $connect = new PDO (DB_DSN, DB_USER, DB_PASS);
            $query = ""CREATE TABLE IF NOT EXISTS `users` (
                    `id` INT(11) PRIMARY KEY AUTO_INCREMENT NOT NULL,
                    `username` VARCHAR(100) NOT NULL,
                    `password` VARCHAR(500) NOT NULL
            )ENGINE=InnoDB DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_swedish_ci;"";
            $stmt = $connect->prepare($query);
            $stmt->execute();

            } catch (PDOException $e) {
                echo $e->getMessage();
            }
            // Let's hash the password
            $salt = substr(str_replace('+', '.', base64_encode(sha1(microtime(true), true))), 0, 22);
            $hashedpassword = crypt($_POST['password']. '$2a$12$' .$salt);
        try {
        $query = ""INSERT INTO `users` (`username`, `password`) VALUES (:username, :password)"";
        $stmt = $connect->prepare($query);
        $stmt->execute(array(
                            ':username' => $_POST['username'],
                            ':password' => $hashedpassword
                        ));
                if ($stmt->rowCount() == 1) {
                    echo ""Well done, user has registered successfully"";

                } else {
                    echo ""An error occured.. Please try again"";
                }
        } catch (PDOException $e) {
            echo $e->getMessage();  
        }
    }
    ?>
    <form action=""<?php echo $_SERVER['PHP_SELF'];?>"" method=""post"">
    <p>Username: <input type=""text"" name=""username""/></p>
    <p>Password: <input type=""password"" name=""password"" /></p>
    <input type=""submit"" name=""submit"" />
    </form>
</body>
</html>

This code does work and will crypt the password, so that was not my main question. My main question is, how do I compare the user inputted password and the password stored in db when I want to create a login page?
here's my login.php atm. Tell me if you see something that I don't but I cannot get this to work, it won't output username and password from the database.
<?php
        try {
        define( ""DB_DSN"", ""mysql:host=localhost;dbname=test"" );
        define ( ""DB_USER"", ""root"" );
        define ( ""DB_PASS"", """" );

            $connect = new PDO (DB_DSN, DB_USER, DB_PASS);

        } catch (PDOException $e) {

            echo $e->getMessage();
        }

        if(isset($_POST['submit'])) {

        $query = ""SELECT * FROM `users` WHERE (username) = :username"";
        $stmt = $connect->prepare($query);
        $stmt->execute(array(
                        ':username' => $_POST['username']
                        ));
            if($stmt->rowCount() == 0) {
                echo ""User doesn't exist"";
            } 
                $row = $stmt->fetch();

                if (crypt($_POST['password'], $row['password']) == $row['password']) {
                    echo $row['username']. $row['password'];
                } else {
                    return false;
                }
        }
    ?>

","Please see this link for a tutorial on how to do it: Using bcrypt to store passwords
EDIT: 
I found some of my working code that I will post here to hopefully help.
First, I use a custom function:
function better_crypt($input, $rounds = 7){
    $salt = """";
    $salt_chars = array_merge(range('A','Z'), range('a','z'), range(0,9));
    for($i=0; $i < 22; $i++) {
        $salt .= $salt_chars[array_rand($salt_chars)];
    }

    return crypt($input, sprintf('$2a$%02d$', $rounds) . $salt);
}

Then when the account is first created, store the $password_hash in the database:
$password_hash = better_crypt($_POST['password']);

Then when logging in, compare the submitted password versus the password hash in the database:
// $password = submitted login form password
// $row['password'] = the password hash in the database
if(crypt($password, $row['password']) == $row['password']) {
//Success!

","406","<php><mysql><pdo><fetch><salt>","1","1","1","2013-05-23 00:47:43","16703772","2","","2411636","","2013-05-23 00:47:43","2013-05-23 00:23:21",""
"5330997","phpass FRAMEWORK- ERROR","I test the phpass framework, and in the examples [one to four in the demo], they work without any problem.
But in the example 5 and 6 I receive an error ""An error occurred (Bad passphrase (check failed))."" when I attempt to create a new user
I just test the demos, I don't do any alteration
What is the problem?
http://www.openwall.com/phpass/
","You seem to be following the bizarre stand-alone so-called ""tutorial"" article that the phpass authors wrote a bit ago.  I say ""so-called"" because it's not a tutorial at all, but a lengthy article on best practices when setting up an authentication system in PHP.
The tutorial code is not part of the library, and following it will not help you use the library more effectively.  Nevertheless, it's a good article and is actually worth reading and understanding.
The error Bad passphrase (check failed) is coming from the pwqcheck function, which attempts to find an external binary by that name.  The error can be triggered either by providing a low-quality password or by failing to have the program execute.  This is a rather poor design because it's not clear what's going on.
Please go back to the article and re-read it from the top.  If you missed the detail on what's going on in that function (or having it explained to you here did not immediately tell you what you must do to resolve the problem), then you're going to want to dive back in from the beginning to ensure that you have not missed any other details.
","404","<php><database><encryption><hash><salt>","-1","1","1","2011-03-17 06:30:54","5335671","2","","452274","","2011-03-16 19:57:27","2011-03-16 19:54:41",""
"5594767","How can I hide the salt code in Flash or Java?","I need to be able to transmit data from a Flash browser application to a PHP file on a web server, both securing and validating the data whilst and at the same time trying to prevent unauthorised creation of the message. (I want to try and ensure that the message comes from the application, not a user sending a message via another means).
In a C++ application I would Salt the data, and send the hash of the data along with it, and then validate the hash against the data to ensure integrity and source.
However, in Flash (& Java), applications can be decompiled so that the source code is viewable. So if I used this method, someone could (relatively) easily find the salt, and then create a 'valid' message of their own to send outside of the application.
Is there any way I can 'hide' this salt code to help secure the transmission? Yes, I know there are code obfuscators, but they don't fully hide the code, just add another layer.
Or is there another method entirely that could be used to transmit data and validate the source & content at the PHP end?
","There's no truly secure way to protect programs that run on the client. (C++ can also be decompiled by the way.) It's always going to be possible for users to run clients that have been hacked, and any encryption key will have to be present in the code in some form. You may be able to make it more difficult for casual hackers but that's it. Whatever you implement will amount to another form of obfuscation; you may as well look at the off-the-shelf obfuscators.
","404","<java><flash><security><hash><salt>","0","1","3","2011-04-08 12:30:34","5594965","3","","","","","2011-04-08 12:02:30",""
"5594767","How can I hide the salt code in Flash or Java?","I need to be able to transmit data from a Flash browser application to a PHP file on a web server, both securing and validating the data whilst and at the same time trying to prevent unauthorised creation of the message. (I want to try and ensure that the message comes from the application, not a user sending a message via another means).
In a C++ application I would Salt the data, and send the hash of the data along with it, and then validate the hash against the data to ensure integrity and source.
However, in Flash (& Java), applications can be decompiled so that the source code is viewable. So if I used this method, someone could (relatively) easily find the salt, and then create a 'valid' message of their own to send outside of the application.
Is there any way I can 'hide' this salt code to help secure the transmission? Yes, I know there are code obfuscators, but they don't fully hide the code, just add another layer.
Or is there another method entirely that could be used to transmit data and validate the source & content at the PHP end?
","Perhaps first authenticate with the server, get a salt key from the server, then use it? This way users wanting to fake messages even if capable of decompiling the app would have to authenticate also.
Other than that - at some time you always need the password, hash, key (or whatever is needed to encrypt or validate data) available to the application and either you get it first from your server or embed in the application, which would be recognizable by decompilation.
EDIT
As others have pointed there is no 100% security, everything can be hacked, the point is to make it not too easy, to prevent casual hackers, that's all. So as Jim stated an off-the-shell obfuscator may be the best compromise.
","404","<java><flash><security><hash><salt>","0","1","3","2011-04-08 12:30:34","5594965","3","","","","","2011-04-08 12:02:30",""
"5594767","How can I hide the salt code in Flash or Java?","I need to be able to transmit data from a Flash browser application to a PHP file on a web server, both securing and validating the data whilst and at the same time trying to prevent unauthorised creation of the message. (I want to try and ensure that the message comes from the application, not a user sending a message via another means).
In a C++ application I would Salt the data, and send the hash of the data along with it, and then validate the hash against the data to ensure integrity and source.
However, in Flash (& Java), applications can be decompiled so that the source code is viewable. So if I used this method, someone could (relatively) easily find the salt, and then create a 'valid' message of their own to send outside of the application.
Is there any way I can 'hide' this salt code to help secure the transmission? Yes, I know there are code obfuscators, but they don't fully hide the code, just add another layer.
Or is there another method entirely that could be used to transmit data and validate the source & content at the PHP end?
","No matter what you do, the code to do it will be there in the client, and all you can do is obfuscate. If you, as Tomasz says, were to have the client authenticate with the server and then receive a salt (or a key from a asymmetric key-pair) you still need to have all the code necessary to connect to that server in the client. So by design, no matter what you do, all the ingredients to do so has to be in the client, and thus on your ""hackers"" computer. It's just a question of much harder it would be for a hacker to understand it.  
It's the same for all kinds of clients, no matter what language they're written in. If a DVD player can show a decrypted DVD disc on your TV, it has to have the key to decrypt it in memory, which you can find. This is why no-one has made perfect copy-protection :)
EDIT:
As all the others are saying. Off-the-shelf obfuscator is probably the best way to go, and you could make the client jump through some extra hoops first aswell.
EDIT2:
Turns out I didn't understand Tomasz correctly. If the user himself has the key to authenticate to the server in order to get the hash, that will indeed authenticate that the message was sent from the user, but still not from the application. If this is a matter of avoiding cheating then the hacker is probably already a customer (buying a product or making an account). If what you want is to authenticate the user, then it's a completely different matter, and that is quite possible. (with it's own problems of-course) 
","404","<java><flash><security><hash><salt>","0","1","3","2011-04-08 12:30:34","5594965","3","","","","","2011-04-08 12:02:30",""
"20924426","Understanding BCrypt","I understand how to write PHP code to successfully utilize BCrypt. So, I don't need help getting it to work.
Instead, I need help understanding how in the heck BCrypt magically works!
In this code, on line 15, in order to verify if the login password == the original (and now hashed/salted) password, it looks to me like you are just (a) creating a new hashed/salted value using the login password and the original (and now hashed/salted) password, and then (b) comparing the value created in (a) to the original (and now hashed/salted) password. I don't understand how these can ever be equal, but they are!
For example, let's say a user signs up with a password of test, which let's say (for simplicity) gets hashed/salted to 1234.
A day later, the user tries to login (using 1234), and we need to authenticate them. To do so, we execute the code on line 15. This means that we do the following:
crypt(""test"", ""1234"") == ""1234""

How in the heck does hashing/salting test with a NEW SALT VALUE (in this case 1234) result in a match?
At this point, this question is mostly just a brain teaser for me. ;)
","Bcrypt hashing depends on the password and the salt and (like any hashing algorithm) it is fully deterministic.
If the password and the salt are the same, the result will be the same.
If either the password or the salt changes, the result will change.
When you use crypt($password, $hashedPassword), bcrypt is not using the hashed password as the salt. It is extracting the salt from the hashed password and then using that.
The result of crypt is $2y$number$salt-hashedpassword, so if you take the beginning of the hashed password you get the original salt.
Note how the result of crypt($password, $salt) starts with the value of $salt.
","403","<php><hash><passwords><salt><bcrypt>","5","5","1","2014-01-04 22:07:50","20924525","4","0","","","","2014-01-04 17:45:20","2014-03-18 10:07:49"
"27594385","Is salting passwords with base 64 secure?","In a web application I am reading some bytes from /dev/urandom to get a random salt for hashing the passwords.
Is it good to base64 the salt before hashing? Because base64 encoding sometimes appends some = at the end, which could then result in a known plaintext attack.
But it may be no problem, because the salt is nevertheless stored in db, or am I wrong?
Does this have an effect on the security of the application?
","It depends on the used hash algorithm, which alphabet of characters is accepted as salt. BCrypt for example will accept following characters, which is nearly but not exactly the same as a base64 encoded text:
./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz.
A known plain text attack is no problem here, since we do not encrypt anything, especially not the salt.
","403","<security><salt><password-hash><salt-creation>","1","2","4","2014-12-24 11:26:36","27594572","4","","","","","2014-12-21 22:21:35",""
"27594385","Is salting passwords with base 64 secure?","In a web application I am reading some bytes from /dev/urandom to get a random salt for hashing the passwords.
Is it good to base64 the salt before hashing? Because base64 encoding sometimes appends some = at the end, which could then result in a known plaintext attack.
But it may be no problem, because the salt is nevertheless stored in db, or am I wrong?
Does this have an effect on the security of the application?
","For the most part, probably not. Your salt has to be known in order to decrypt the password, so we can assume that any attacker will be able to gain both the hashed password and the salt used. All that your salt is now protecting against is rainbow table-based attacks and increasing the amount of work (since each plaintext now needs to be hashed n times instead of once to compare against n passwords).
As long as your salt is of a reasonable length, you're probably fine.
","403","<security><salt><password-hash><salt-creation>","1","2","4","2014-12-24 11:26:36","27594572","4","","","","","2014-12-21 22:21:35",""
"27594385","Is salting passwords with base 64 secure?","In a web application I am reading some bytes from /dev/urandom to get a random salt for hashing the passwords.
Is it good to base64 the salt before hashing? Because base64 encoding sometimes appends some = at the end, which could then result in a known plaintext attack.
But it may be no problem, because the salt is nevertheless stored in db, or am I wrong?
Does this have an effect on the security of the application?
","No it's not secure.
You shouldn't use any hash function for user passwords. Instead you should use a password-based key derivation function such as PBKDF2 or scrypt with an appropriate number of iterations so as to slow down hashing, which mitigates the risk of bruteforce attacks. 
What's the difference between a Key Derivation Function and a Password-Hash?
If you are using PHP for your web application:
Do I need base64 encode my salt (for hashing passwords)?
Secure hash and salt for PHP passwords
","403","<security><salt><password-hash><salt-creation>","1","2","4","2014-12-24 11:26:36","27594572","4","","","","","2014-12-21 22:21:35",""
"27594385","Is salting passwords with base 64 secure?","In a web application I am reading some bytes from /dev/urandom to get a random salt for hashing the passwords.
Is it good to base64 the salt before hashing? Because base64 encoding sometimes appends some = at the end, which could then result in a known plaintext attack.
But it may be no problem, because the salt is nevertheless stored in db, or am I wrong?
Does this have an effect on the security of the application?
","The purpose of a salt is to make sure that each password is stored differently. i.e. so if two people use the same password, the storage of the two passwords is not identical. This protects against rainbow and hashtable attacks if an attacker manages to extract the password table data.
Although there is no reason to Base64 it - the hash should be a sequence of bytes rather than ASCII text - this should not affect the security of your hashed passwords. Yes, there are limited byte sequences that will be used (just ones that represent valid ASCII characters), however your hash will be longer and it is representing the same range of possible values.
","403","<security><salt><password-hash><salt-creation>","1","1","4","2014-12-24 11:26:36","27594572","4","","","","","2014-12-21 22:21:35",""
"33848062","importing mysql dumping file to vagrant with salt","I am using vagrant with salt to setup a dev environment but I can't find the way to import the mysql script with in the salt configuration
","I've re-used an example from this script to solve it. Once the SQL is applied, a marker file is created with touch that is later checked with test:  
{% for file in [
  '/usr/share/zabbix-server-mysql/salt-provided-schema.sql',
  '/usr/share/zabbix-server-mysql/salt-provided-images.sql',
  '/usr/share/zabbix-server-mysql/salt-provided-data.sql'
] %}
{{ file }}:
  file:
    - managed
    - makedirs: True
    - source: {{ files_switch('zabbix', [ file ]) }}
  cmd:
    - run
    - name: /usr/bin/mysql -h {{ dbhost }} -u {{ dbuser }} --password={{ dbpass }} {{ dbname }} < {{ file }} && touch {{ file }}.applied
    - unless: test -f {{ file }}.applied
    - require:
      - file: {{ file }}
      - pkg: mysql-client
{% endfor %}

","398","<mysql><vagrant><salt>","0","0","1","2015-11-23 22:07:36","","0","","","","","2015-11-21 20:08:34",""
"44909209","How does Cakephp 2.x security.salt works?","I'm trying to move my Cakephp 2 project and I want to keep the same database. I have used a hash 'sha1' and the Cakephp security.salt to encrypt the users passwords:
public static function hash($password, $method = 'sha1', $salt = true) {
    return Security::hash($password, $method, $salt);
}

I added (a long time ago) in myproject/app/config/core.php this (with a different password):
    Configure::write('Security.salt', 'T4R393b0qyJioxfs2guVoUubWwvniR2G0Fgartge');

Now I don't know how to use this Security.salt code with another framework. So please:

Does anybody know if I could use this encryption in an Angular 2/4 project (e.g.)?
Any other solution?

Thank you!
","I found it! Thanks to everybody.
I have to concatenate the salt and the password. After that I do the hash 'sha1'.
e.g.: hash(Security.salt . $password)
Found it in myproject/cake/libs/security.php as 'ndm' said:
function hash($string, $type = null, $salt = false) {
    $_this =& Security::getInstance();

    if ($salt) {
        if (is_string($salt)) {
            $string = $salt . $string;
        } else {
            $string = Configure::read('Security.salt') . $string;
        }
    }

    ...

","395","<php><cakephp><hash><sha1><salt>","0","0","1","2017-07-04 16:24:35","","7","","","","","2017-07-04 15:00:32",""
"50464969","hashing + salt for java web application","I have been told to not be creating my own salt and hashing methods. Due to the ones already existing in java being far superior. After looking into it a bit, I do not quite understand the following;

What is the difference between creating the hash, and verifying it?
If the salt is random everytime, don't you need a token to verify passwords other than the username?

how do generate and verify hashed and salted passwords in an contemporary way for a java web application? 
","Here is usual approach storing password with Hashing.

What is the difference between creating the hash, and verifying it?


Take the plain text password, add a random salt, then store the salt and the hashed password in the database.
When a user wanted to log in, you take their submitted password, add the random salt from their account information, hash it and see if it equates to the stored hash password with their account information.


If the salt is random every time, don't you need a token to verify passwords other than the username?

If you see #2, token may be required for session purposes, but not for Authentication(checking if user is legitimate.)
There is good questions of same subject.
There are good working examples related to same that you could utilize.
","393","<java><hash><salt>","2","2","1","2018-10-05 20:19:49","50465279","2","","8766350","","2018-10-05 20:19:49","2018-05-22 10:05:30",""
"4282199","Please quickly check this PHP + SALT implementation - does not work?","Building on tutorials out there to implement a basic user sign up + log in system with salt. At the moment I'm using this for the sign up stage:
define('SALT_LENGTH', 9);

function generateHash($plainText, $salt = null)
{
    if ($salt === null)
    {
        $salt = substr(md5(uniqid(rand(), true)), 0, SALT_LENGTH);
    }
    else
    {
        $salt = substr($salt, 0, SALT_LENGTH);
    }

    return $salt . sha1($salt . $plainText);
}

$newpass = generateHash($_POST['newpass']);

followed by:

$sql = ""INSERT INTO user SET
              userid = '$_POST[newid]',
              password = PASSWORD('$newpass'), ... etc""

This works fine.
I now want to compare input password to check for equality (in a seperate access control file):
define('SALT_LENGTH', 9);

function generateHash($plainText, $salt)
{

    $salt = substr($salt, 0, SALT_LENGTH);

    return $salt . sha1($salt . $plainText);
}

$sql = ""SELECT password FROM user WHERE
        userid = '$uid'"";
$result = mysql_query($sql);
$row = mysql_fetch_row($result);


$comparepwd = generateHash($pwd, $row['password']);


if (mysql_num_rows($result) == 0 || $comparepwd != $row['password']) {

//access denied, unset session variables
}

In principle I believe this should work. I am fairly new with PHP/MySQL so I would be extremely grateful if you could advise on why it isn't working. Thanks very much!
EDIT: Just realised, is it because 
INSERT INTO user SET
                  userid = '$_POST[newid]',
                  password = PASSWORD('$newpass')

the PASSWORD('$newpass') does further MySQL hasing?
","Yes, the password function is a one-way hash and you shouldn't be using it really!
http://dev.mysql.com/doc/refman/5.0/en/encryption-functions.html#function_password
","393","<php><authentication><sha1><salt>","1","2","1","2010-11-26 02:55:42","","0","1","","","","2010-11-26 02:43:41",""
"43973738","Accessing grains using Salt-ssh in Jinja templates","I need to access custom grains in my config files using Jinja templating. Here are my files.
[root@localhost salt]# cat my_config.conf
{{ grains['ip'] }}

[root@localhost salt]# cat test_jinja.sls
/root/my_config.conf:
  file.managed:
    - source: salt://my_config.conf
    - user: root
    - group: root
    - mode: '0644'
    - makedirs: True
    - force: True
    - template: jinja

[root@localhost salt]# salt-ssh 'my-ip' state.sls test_jinja
10.225.253.134:
----------
          ID: /root/test
    Function: file.managed
      Result: False
     Comment: Unable to manage file: Jinja variable 'dict object' has no attribute 'ip'
     Started: 12:57:49.301697
    Duration: 33.039 ms
     Changes:

[root@localhost salt]# cat /etc/salt/roster
my-ip:       # The id to reference the target system with
    host: xx.xx.xx.133       # The IP address or DNS name of the remote host
    user: root        # The user to log in as
    passwd: teledna      # The password to log in with
    grains:
      ip: 'xx.xx.xx.133'

How to access the grains in the config files using salt-ssh???
","The reason is that there is no 'ip' grain.
To list all grains use salt '*' grains.items
","393","<salt><salt-stack>","1","0","2","2017-05-18 18:59:37","","0","","","","","2017-05-15 07:32:39",""
"43973738","Accessing grains using Salt-ssh in Jinja templates","I need to access custom grains in my config files using Jinja templating. Here are my files.
[root@localhost salt]# cat my_config.conf
{{ grains['ip'] }}

[root@localhost salt]# cat test_jinja.sls
/root/my_config.conf:
  file.managed:
    - source: salt://my_config.conf
    - user: root
    - group: root
    - mode: '0644'
    - makedirs: True
    - force: True
    - template: jinja

[root@localhost salt]# salt-ssh 'my-ip' state.sls test_jinja
10.225.253.134:
----------
          ID: /root/test
    Function: file.managed
      Result: False
     Comment: Unable to manage file: Jinja variable 'dict object' has no attribute 'ip'
     Started: 12:57:49.301697
    Duration: 33.039 ms
     Changes:

[root@localhost salt]# cat /etc/salt/roster
my-ip:       # The id to reference the target system with
    host: xx.xx.xx.133       # The IP address or DNS name of the remote host
    user: root        # The user to log in as
    passwd: teledna      # The password to log in with
    grains:
      ip: 'xx.xx.xx.133'

How to access the grains in the config files using salt-ssh???
","This looks like this is a bug in salt, where the grains from the roster aren't shipped over to the minion, can you try this PR?
https://github.com/saltstack/salt/pull/40775
","393","<salt><salt-stack>","1","3","2","2017-05-18 18:59:37","","0","","","","","2017-05-15 07:32:39",""
"24534682","How to implement key and salt for jmazzi/crypt_keeper","I'm trying to implement crypt_keeper for a Ruby on Rails app. The docs don't tell me how to implement the key and salt. 
How do I do it securely? 
How long do they need to be? 
Should they be the same for each column or generate a random one each time?
I've asked on the issue tracker also
","","392","<ruby-on-rails><ruby><encryption><salt>","1","","0","2014-07-02 15:07:44","","1","","","","","2014-07-02 15:07:44",""
"35656614","my hashed password values are not matching when retrieving salt value from database","I have a problem. my hashed password values are not matching when retrieving salt value from database.
Register.php

User enters username and password.
Collect the username and password through POST.  
Generate a random salt value Add the salt value onto the end of
the password value(entered by user). And hash the full value. 
Insert username, salt,hashedpassword and original password into 
 database (just for testing)
if (isset($_POST[""usernameReg""]) && isset($_POST[""passwordReg""])){
 // filter everything but numbers and letters
$username = preg_replace('#[^A-Za-z0-9]#i', '', $_POST[""usernameReg""]); 
$password = preg_replace('#[^A-Za-z0-9]#i', '', $_POST[""passwordReg""]); 

$salt = openssl_random_pseudo_bytes(1024);

$hashedPassword = hash('sha256', $password.$salt);
//$hashedPassword1 = hash('sha256', $password);

$query = ""INSERT INTO users (username, salt, hashedPassword, password) VALUES (:username, :salt, :hashedPassword, :password)"";

$statement = $pdoConnection->prepare($query);
$statement->bindValue(':username', $username, PDO::PARAM_STR);
$statement->bindValue(':salt', $salt, PDO::PARAM_STR);
$statement->bindValue(':hashedPassword', $hashedPassword, PDO::PARAM_STR);
$statement->bindValue(':password', $password, PDO::PARAM_STR);
$statement->execute();

}

login.php

User enters username and password.
Collect the username and password through POST.
Check the username exists in the database.
Get the salt value for that username from the database and add it to the end of the password entered by the user in the login form. Hash this value and store it into $_SESSION[""newHashedValue”] variable.(for testing)
Retrieve the original hashedValue from the database. Store it in $_SESSION["" dbHashedValue”] and compare values. 
If the values match then we know the login password is correct.
Problem: these values do not match and they should because im entering the same login details. 
if (isset($_POST[""username""]) && isset($_POST[""password""])){
        $username = preg_replace('#[^A-Za-z0-9]#i', '', $_POST[""username""]); 
        $password = preg_replace('#[^A-Za-z0-9]#i', '', $_POST[""password""]); 
    //check if this username and password exist in our database and are therefore valid
    $query = ""SELECT * FROM users WHERE username=:username LIMIT 1"";

    $statement = $pdoConnection->prepare($query);
    $statement->bindValue(':username', $username, PDO::PARAM_STR);
    $statement->execute();
    $statement->setFetchMode(PDO::FETCH_ASSOC);

    while($row = $statement->fetch()){
        $saltPassword = $password.$row[""salt""];
        $newHashedValue = hash('sha256', $saltPassword);
        $dbHashedValue = $row[""hashedPassword""];
        //these two values are not matching but they should match
        $_SESSION[""newHashedValue""] = $newHashedValue;
        $_SESSION[""dbHashedValue""] = $dbHashedValue;
    }

}


","$salt = openssl_random_pseudo_bytes(1024); //will generate 2048 chars since a character is half a byte.

Will generate a string of 2048 characters. Therefore the solution is to either increase the size of your salt column to 2048 which is sort of overkill, or generate 32 bytes which will be 64 characters.
$salt = openssl_random_pseudo_bytes(32); //will generate 64 chars

More info on the function here http://php.net/manual/en/function.openssl-random-pseudo-bytes.php
The sha256 hash is of length 64 so the hashedPassword column should be of length 64.(as the name suggests, 256 bits = 32bytes = 64 characters)
","380","<php><database><hash><login><salt>","0","2","1","2016-02-26 16:30:05","35656925","14","","2686581","","2016-02-26 16:25:10","2016-02-26 16:15:33",""
"11151920","ASP.net authentication","Im a CS major and I just got done designing an ASP.net site, and for the site I needed a login authentication system... I didn't want to use SQLMembershipProvider as I really wanted to learn how to make one on my own... Anyways this is what I came up with, and I was wondering if anyone can give me some feedback, tips, or advice.
Thanks in Advance 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Security.Cryptography;

/// <summary>
/// Summary description for PwEncrypt
/// </summary>
public class PwEncrypt
{
    public const int DefaultSaltSize = 5;

    private static string CreateSalt()
    {
        RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
        byte[] buffer = new byte[DefaultSaltSize];
        rng.GetBytes(buffer);
        return Convert.ToBase64String(buffer);
    }

    public static string CreateHash(string password, out string salt)
    {
        salt = CreateSalt();
        string saltAndPassword = String.Concat(password, salt);
        string hashedPassword = FormsAuthentication.HashPasswordForStoringInConfigFile(saltAndPassword, ""SHA1"");
        hashedPassword = string.Concat(hashedPassword, salt);
        return hashedPassword;
    }
       public static string CreateHashAndGetSalt(string password, string salt)
    {

        string saltAndPassword = String.Concat(password, salt);
        string hashedPassword = FormsAuthentication.HashPasswordForStoringInConfigFile(saltAndPassword, ""SHA1"");
        hashedPassword = string.Concat(hashedPassword, salt);
        return hashedPassword;
    }

    public static bool comparePassword(string insertedPassword, string incUserName, out string newEncryptedPassword, out string originalPassword)
    {
        databaseInteraction DBI = new databaseInteraction();
        string actualPassword ="""";
        string salt = """";


        DBI.getSaltandPassword(incUserName, out salt, out actualPassword);
        string hashedIncPassword = PwEncrypt.CreateHashAndGetSalt(insertedPassword, salt);
       // hashedIncPassword = string.Concat(hashedIncPassword, salt);     
        newEncryptedPassword = hashedIncPassword;
        originalPassword = actualPassword;
        if (newEncryptedPassword == originalPassword)
        {

            return true;
        }

        else { return false; }

    }

","Suppose we have a table for accounts like this

Then you can create some helper class that returns an account object
private static Account GetByName(string accountName, bool activatedOnly = false)
{
    using (var context = new DBEntities())
    {
        return context.Accounts.FirstOrDefault(s => 
            s.AccountName == accountName &&
            s.IsApproved == activatedOnly);
    }
}

public static Account Get(string accountName, string password)
{
    var account = GetByName(accountName, true);
    if (account != null)
        if (!Cryptographer.IsValidPassword(password, 
                                           account.PasswordSalt, 
                                           account.PasswordKey))
            return null;
    return account;
}

I'm using EntityFramework but it's not important here. The main idea is show that you don't need to get the whole list of accounts (especially if you have a big list of users). 
My Cryptographer class looks like
public class Cryptographer
{
    private const int keyByteLength = 20;
    public static void Encrypt(string password, 
                               out byte[] salt,
                               out byte[] key)
    {
        using (var deriveBytes = new Rfc2898DeriveBytes(password, 
                                                        keyByteLength))
        {
            salt = deriveBytes.Salt;
            key = deriveBytes.GetBytes(keyByteLength);  
        }
    }
    public static bool IsValidPassword(string password, 
                                       byte[] salt, 
                                       byte[] key)
    {
        using (var deriveBytes = new Rfc2898DeriveBytes(password, salt))
        {
            byte[] newKey = deriveBytes.GetBytes(keyByteLength);  
            return newKey.SequenceEqual(key);
        }
    }
}

Of cource you can implement the algorithm of your own. 
","379","<c#><asp.net><.net><salt>","5","1","1","2012-06-22 08:07:38","","6","","360053","","2012-06-22 07:34:22","2012-06-22 07:29:03",""
"23535168","How to decrypt encrypted (SALT) fields in mysql, and then re-encrypt them?","I have a cms who use a SALT key in the config file to encrypt / decrypt passwords, credit card and some other sensitive informations in the database.
I would like to decrypt only specific rows in the database using the SALT key, and then re-encrypt the data.
How can i achieve this?
Thank you
","","379","<mysql><salt>","0","","0","2014-05-08 07:15:02","","7","","","","","2014-05-08 07:15:02",""
"45753473","How to replace a commented line in sudoers file with sed via Salt Stack?","Hi I would like to change the following line in the /etc/sudoers file on all of my Salt minions.
# %wheel        ALL=(ALL)       NOPASSWD: ALL

With the following:
%wheel          ALL=(ALL)       NOPASSWD: /usr/bin/salt*

So far I have tried the following command along with a plethora of similar commands with slightly different options/syntax:
sed -i '/# %wheel        ALL=(ALL)       NOPASSWD: ALL/c %wheel          ALL=(ALL)       NOPASSWD: /usr/bin/salt*' /etc/sudoers

I don't get an error message from this particular command, however file is not updated.
Could anyone provide me with the correct option/syntax for my specific use?
","$ sed -i 's|# \(.*\)ALL|\1/usr/bin/salt*|' /etc/sudoers

","377","<sed><comments><salt><sudoers>","0","1","3","2017-08-18 10:44:29","45753736","0","","","","","2017-08-18 09:40:52",""
"45753473","How to replace a commented line in sudoers file with sed via Salt Stack?","Hi I would like to change the following line in the /etc/sudoers file on all of my Salt minions.
# %wheel        ALL=(ALL)       NOPASSWD: ALL

With the following:
%wheel          ALL=(ALL)       NOPASSWD: /usr/bin/salt*

So far I have tried the following command along with a plethora of similar commands with slightly different options/syntax:
sed -i '/# %wheel        ALL=(ALL)       NOPASSWD: ALL/c %wheel          ALL=(ALL)       NOPASSWD: /usr/bin/salt*' /etc/sudoers

I don't get an error message from this particular command, however file is not updated.
Could anyone provide me with the correct option/syntax for my specific use?
","Use the following sed expression:
sed 's~^# *\(%wheel *ALL=(ALL) *.*\)ALL~\1/usr/bin/salt*~' /etc/sudoers

","377","<sed><comments><salt><sudoers>","0","0","3","2017-08-18 10:44:29","45753736","0","","","","","2017-08-18 09:40:52",""
"45753473","How to replace a commented line in sudoers file with sed via Salt Stack?","Hi I would like to change the following line in the /etc/sudoers file on all of my Salt minions.
# %wheel        ALL=(ALL)       NOPASSWD: ALL

With the following:
%wheel          ALL=(ALL)       NOPASSWD: /usr/bin/salt*

So far I have tried the following command along with a plethora of similar commands with slightly different options/syntax:
sed -i '/# %wheel        ALL=(ALL)       NOPASSWD: ALL/c %wheel          ALL=(ALL)       NOPASSWD: /usr/bin/salt*' /etc/sudoers

I don't get an error message from this particular command, however file is not updated.
Could anyone provide me with the correct option/syntax for my specific use?
","For those wondering how to run this command against all minions via Salt (using @CWLiu's answer) you must add the following:
salt -C 'G@roles:apiserver' cmd.run 'sed -i '""'""'s|# \(.*\)ALL|\1/usr/bin/salt*|'""'""' /etc/sudoers'

To comply with Salt Stack's cmd.run syntax
","377","<sed><comments><salt><sudoers>","0","0","3","2017-08-18 10:44:29","45753736","0","","","","","2017-08-18 09:40:52",""
"9314822","Salt location , salt hiding","i have a question regarding the following scenario:
I want to use jasypt to encrypt my password and use a certain salt for encryption.  
Does it make sense(or is there any security implication) if :
I use password based encryption to encrypt the salt with a password that I get from an environment variable, that way i can have the encrypted value of the salt in a property file, get it from there , decrypt it via the password i get from the environment variable (actually i am going to have a EnvironmentStringPBEConfig object which in turn gets the environment variable from EnvironmentStringPBEConfig object and delete the environment variable once the EnvironmentStringPBEConfig is created) and finally use the salt.  
Thank you.  
Edit: please note that i would want to know if ""hiding"" the salt as described above is a good practice, i am not implementing such solution right now.
EDIT: Also please note the following recommendations  from OWASP.  
Recommendation: Make it hard to steal the entire salt
There are a number of additional recommended enhancements to the basic salting mechanism for consideration:
Have an additional 'system' salt that is a fixed value for the entire system. This should be stored in a configuration file somewhere. This fixed value would not have to be included every backup, making it even harder for an attacker to compromise all elements required to calculate the hash value properly.
Embedding a portion of the system salt in the source code. This wouldn't be that helpful for open source code, but for custom applications, having part of your system salt in the code would be yet one more item required by an attacker to calculate the hash value properly.
    Generating a new salt for an account each time that user's password is changed. 
Recommendation: Salt Isolation
An additional password storage defense mechanism involves storing the salt in a different location than the password hash. Use of the server's filesystem is one commonly used mechanism for salt isolation, assuming the password hashes are stored in different location such as a database or LDAP server. This defense mechanism reduces the risk of password theft when the database file is stolen, since the salts will not be included with the database data. Be careful to ensure that both the password hashes and the salts are not backed up together, they should also be backed up in isolation. 
","Why do you want to encrypt a salt?  Salts are normally public information - they only exist to prevent pre-computed ""rainbow-table"" offline attacks on databases of passwords.  I think you need to be clearer about what you are attempting to do and why.
","373","<security><encryption><salt><jasypt><salt-creation>","-1","2","1","2012-02-17 10:51:14","","0","","317946","","2012-02-17 10:51:14","2012-02-16 16:14:29",""
"18453261","Salted Password Validation in PHP","On crackstation.net it is stated:

To Validate a Password

Retrieve the user's salt and hash from the database.
Prepend the salt to the given password and hash it using the same    hash function.
Compare the hash of the given password with the    hash from the       database. If they match, the password is correct.    Otherwise, the
  password is incorrect.


However in the source code listed at the bottom of the page, I can't figure out how the validate_password function takes into account the salt. I mean where is the salt prepended to the given password? 
Here is the function in question:
function validate_password($password, $correct_hash)
{
    $params = explode("":"", $correct_hash);
    if(count($params) < HASH_SECTIONS)
       return false;
    $pbkdf2 = base64_decode($params[HASH_PBKDF2_INDEX]);
    return slow_equals(
        $pbkdf2,
        pbkdf2(
            $params[HASH_ALGORITHM_INDEX],
            $password,
            $params[HASH_SALT_INDEX],
            (int)$params[HASH_ITERATION_INDEX],
            strlen($pbkdf2),
            true
        )
    );
}

","Looks like the Salt, Hash and interation number are stored in the same string and are separated into three strings (in an array) at the beginning of the function:
$params = explode("":"", $correct_hash);

The order of the values depends on how the constants HASH_ALGORITHM_INDEX, HASH_SALT_INDEX and HASH_ITERATION_INDEX are defined.
","373","<php><security><salt><password-hash>","2","3","3","2014-01-30 09:48:23","18453318","4","","445517","","2014-01-30 09:48:23","2013-08-26 21:24:11",""
"18453261","Salted Password Validation in PHP","On crackstation.net it is stated:

To Validate a Password

Retrieve the user's salt and hash from the database.
Prepend the salt to the given password and hash it using the same    hash function.
Compare the hash of the given password with the    hash from the       database. If they match, the password is correct.    Otherwise, the
  password is incorrect.


However in the source code listed at the bottom of the page, I can't figure out how the validate_password function takes into account the salt. I mean where is the salt prepended to the given password? 
Here is the function in question:
function validate_password($password, $correct_hash)
{
    $params = explode("":"", $correct_hash);
    if(count($params) < HASH_SECTIONS)
       return false;
    $pbkdf2 = base64_decode($params[HASH_PBKDF2_INDEX]);
    return slow_equals(
        $pbkdf2,
        pbkdf2(
            $params[HASH_ALGORITHM_INDEX],
            $password,
            $params[HASH_SALT_INDEX],
            (int)$params[HASH_ITERATION_INDEX],
            strlen($pbkdf2),
            true
        )
    );
}

","I'm not entirely sure what's going on above, so let me explain hashes a bit, this has been done before, and there are sources, but I'll have a go anyway! It was new to us all once!
If we have a function, call it f and let it be our hash function, it takes every possible input to just a finite number of outputs, this is why it can't be reversed, this is called a surjective function http://en.wikipedia.org/wiki/Surjection see there for more. Like f(x)=x^2 if f(x)=4 we don't actually know what x is (we happen to know it can be either 2 or -2 though) 
The hash is of a different order though because an infinite number of (theoretical, computers can't handle the longest of the set of all strings, it is too large!) inputs to a finite number of outputs.
If I know it's a pin-number suppose, suppose your pin number is P I know f(P)=h, and P is 1 of 10,000 values, 0000 to 9999 inclusive. So I can just do 10k hashes (worst case) and get your pin.
The salt is some random crap that's deterministically applied to the input, so suppose s(x) salts x, it could be by putting the letter ""k"" between each letter of the input (this would be a crap salt though) but that way the output of s only depends on x, given the same input we get the same output.
Then you do f(s(x)) to get your hash, this way if I know the hash, but don't know the salt, I'd have to work out how you salted it first, if I did know the salt I'd have to know how you applied it, and so forth.
So suppose you did the simple salt above to passwords, so the common ""password"" becomes ""pkakskskwkokrkd"", and I have my ""rainbow table"" (a list of inputs and their hash values), I probably wont have (the salted form) in that table, but suppose I know the hash, and that you put ks between letters, I'd have to re-create my rainbow table using words but with ks in them and that'd take a lot of memory, a lot of time..... but then I can break all your passwords (because the salt was the same for all)
This is what your system means by ""users salt"", that way if I break the system with ks only one guy's stuff is cracked, I'd have to do it for everyone.
Now for some PHP code!
I recommend you use a sha512 salt, this gives a fixed 128 character-long (it's PHP, it'll end up in a database) output for any input.
$hash = hash(""sha512"",$data);

To salt it you can hash it several times, you can put a k between it, as long as it is 'deterministic' the same for a given input.
Lastly how it works:
If the bank has a salted hash of my pin number, they don't ""break"" it, to get my pin number to compare the number I entered with them, they salt and hash the pin number I just put in, and compare the value with the result in the database, if the hashes are the same, the pins entered are the same.
Hashes can collide but this is VERY rare, the ""Avalanche Effect"" was studied and made sure to be present (terminology?) in hashing algorithms, a similar input gives a wildly different output.
Hashes are only good for equality tests.
","373","<php><security><salt><password-hash>","2","-4","3","2014-01-30 09:48:23","18453318","4","","445517","","2014-01-30 09:48:23","2013-08-26 21:24:11",""
"18453261","Salted Password Validation in PHP","On crackstation.net it is stated:

To Validate a Password

Retrieve the user's salt and hash from the database.
Prepend the salt to the given password and hash it using the same    hash function.
Compare the hash of the given password with the    hash from the       database. If they match, the password is correct.    Otherwise, the
  password is incorrect.


However in the source code listed at the bottom of the page, I can't figure out how the validate_password function takes into account the salt. I mean where is the salt prepended to the given password? 
Here is the function in question:
function validate_password($password, $correct_hash)
{
    $params = explode("":"", $correct_hash);
    if(count($params) < HASH_SECTIONS)
       return false;
    $pbkdf2 = base64_decode($params[HASH_PBKDF2_INDEX]);
    return slow_equals(
        $pbkdf2,
        pbkdf2(
            $params[HASH_ALGORITHM_INDEX],
            $password,
            $params[HASH_SALT_INDEX],
            (int)$params[HASH_ITERATION_INDEX],
            strlen($pbkdf2),
            true
        )
    );
}

","PHP 5.5 has its own function password_hash() ready to generate secure BCrypt hashes. As in the example above, the resulting string will contain the hash, the salt and the cost parameter and is always 60 characters in length. Those parameters are extracted by the function password_verify() later, to verify the password.
For earlier PHP versions there exists a compatibility pack‌​.
","373","<php><security><salt><password-hash>","2","1","3","2014-01-30 09:48:23","18453318","4","","445517","","2014-01-30 09:48:23","2013-08-26 21:24:11",""
"13729242","Issue With PHP, MySQLi Login Application","
Possible Duplicate:
How do you use bcrypt for hashing passwords in PHP? 

I am trying to create a secure login app using php and MySQLi by following this tutorial: Link To Tutorial
The tutorial is using a table(members) with 5 fields as:""id"", ""username"",""email"",""password"",and ""salt"".
but at the very beginning there is a an SQL INSERT function which is confusing me 
INSERT INTO `secure_login`.`members` VALUES(1, 'test_user', 'test@example.com',
00807432eae173f652f2064bdca1b61b290b52d40e429a7d295d76a71084aa96c0233b82f1feac45
529e0726559645acaed6f3ae58a286b9f075916ebf66cacc', 'f9aab579fc1b41ed0c44fe4ecdbfc
db4cb99b9023abb241a6db833288f4eea3c02f76e0d35204a8695077dcf81932aa59006423976224be0
390395bae152d4ef');

I am guessing the fist long number is a sha512() salted password so I used this php code to generate my sha512 password and insert it to my members database:
$password = 'newPassword';
echo 'sha512: ' . hash('sha512', $password);

and the result is:
sha512: 6f63f637f1346149532158022899bdf424a19c3dc472e21c2068cd324d7263ed521fb1c1335afaad6bf3fd94a24c0371217086295255e7773eb8deb2c7a54e1a

Now my question is what is the the the second value which is inserting into the ""salt"" field?
Unforgettably I couldn't find a way to contact to tutorial person but I tought you may can help me to figure this out.so, Can you please let me know 

Am i doing the sha512 password salting correctly?
What is the last item inserted into members table(salt) , how I
can generate that one?

Thanks for you time
","A salt is something you mix with a password before you hash it to add to the security of what you're storing. 
That is: if each password were just SHA-512'd, anyone whose password was common would be compromised as soon as you know you the (SHA) hash of that password. Said another way: as soon as I know the hash for ""password"" I know every single user that used that password. 
So you should be using your salt to make the password hashes more secure and so storing it later for rehashing and comparison purposes (at every login). This way each person who's using ""password"" as their password is protected because each value is unique in the database.
So to directly answer your questions:

It's possible to use SHA512 hashes for salts, but they don't need to be nearly that long. Typically a 4 to 30 character string of alphanumerics is used. What you should do is combine the user-entered password with the salt which you generate separately, then hash the combination.
The last item is a salt, and a reasonable way to make that is something like substr(str_replace('+', '.', base64_encode(sha1(microtime(true), true))), 0, 16). That's not the best way, or only way, but it's an easy way to get a random-ish salt.

Those things said, if you're not really sure what you're doing, it may be best that you don't build a login system. There are lots of login classes that'll keep your users more secure than the system you outline here. At a minimum, please try to read a good article on login systems (like this one, or this one) and do your best to use its recommendations.
","372","<php><mysqli><salt>","-2","4","1","2012-12-05 18:34:45","13729785","1","","-1","","2017-05-23 12:14:02","2012-12-05 17:44:08","2012-12-06 02:47:41"
"1588294","is this ok? salting","Hey i would like do have your input on this
I use this to generate unique salts to each of my users when they register (random letters and numbers). how big is the chance that salts will colide?
uniqid(mt_rand());

I then use md5 to hash salt, password and email(in that order) together as password and rehash when they log-in.
md5($salt . $password . $email);

How much safer than just md5 is this? Something i can improve?
CREATE TABLE IF NOT EXISTS `users` (
`id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
`username` varchar(24) CHARACTER SET utf8 NOT NULL,
`password` varchar(32) CHARACTER SET utf8 NOT NULL,
`email` varchar(255) CHARACTER SET utf8 NOT NULL,
`salt` varchar(255) CHARACTER SET utf8 NOT NULL,
 PRIMARY KEY (`id`),
 UNIQUE KEY `username` (`username`),
 UNIQUE KEY `email` (`email`)
) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=1 ;

","They will never colide. 
....maybe once in 10000000000000000. 
","370","<php><security><hash><salt>","0","-1","5","2009-10-19 19:41:04","1588326","5","","","","","2009-10-19 12:01:40",""
"1588294","is this ok? salting","Hey i would like do have your input on this
I use this to generate unique salts to each of my users when they register (random letters and numbers). how big is the chance that salts will colide?
uniqid(mt_rand());

I then use md5 to hash salt, password and email(in that order) together as password and rehash when they log-in.
md5($salt . $password . $email);

How much safer than just md5 is this? Something i can improve?
CREATE TABLE IF NOT EXISTS `users` (
`id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
`username` varchar(24) CHARACTER SET utf8 NOT NULL,
`password` varchar(32) CHARACTER SET utf8 NOT NULL,
`email` varchar(255) CHARACTER SET utf8 NOT NULL,
`salt` varchar(255) CHARACTER SET utf8 NOT NULL,
 PRIMARY KEY (`id`),
 UNIQUE KEY `username` (`username`),
 UNIQUE KEY `email` (`email`)
) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=1 ;

","It does not matter if they collide. The purpose of the salt is that if you hash the same value twice but with different salts, the result will be different.If attacker aquires you databases of hashes, salt will renders ineffective attack with pre-calculated database of hashes of known passwords. The salt itself is not a secret and collisions of salts is not a problem.
","370","<php><security><hash><salt>","0","13","5","2009-10-19 19:41:04","1588326","5","","","","","2009-10-19 12:01:40",""
"1588294","is this ok? salting","Hey i would like do have your input on this
I use this to generate unique salts to each of my users when they register (random letters and numbers). how big is the chance that salts will colide?
uniqid(mt_rand());

I then use md5 to hash salt, password and email(in that order) together as password and rehash when they log-in.
md5($salt . $password . $email);

How much safer than just md5 is this? Something i can improve?
CREATE TABLE IF NOT EXISTS `users` (
`id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
`username` varchar(24) CHARACTER SET utf8 NOT NULL,
`password` varchar(32) CHARACTER SET utf8 NOT NULL,
`email` varchar(255) CHARACTER SET utf8 NOT NULL,
`salt` varchar(255) CHARACTER SET utf8 NOT NULL,
 PRIMARY KEY (`id`),
 UNIQUE KEY `username` (`username`),
 UNIQUE KEY `email` (`email`)
) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=1 ;

","I wouldn't use the email address in the password hash.  If a person changes their email address it would invalidate the hashed password and thus you'd have to have the user change their password every time they change their email address.  I typically use a salt per user and a salt per application (fixed for all users).  This way an attacker would need access to both your application and your user database to gain access.
$hashed = md5( $per_user_salt . $password . $app_salt );

","370","<php><security><hash><salt>","0","4","5","2009-10-19 19:41:04","1588326","5","","","","","2009-10-19 12:01:40",""
"1588294","is this ok? salting","Hey i would like do have your input on this
I use this to generate unique salts to each of my users when they register (random letters and numbers). how big is the chance that salts will colide?
uniqid(mt_rand());

I then use md5 to hash salt, password and email(in that order) together as password and rehash when they log-in.
md5($salt . $password . $email);

How much safer than just md5 is this? Something i can improve?
CREATE TABLE IF NOT EXISTS `users` (
`id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
`username` varchar(24) CHARACTER SET utf8 NOT NULL,
`password` varchar(32) CHARACTER SET utf8 NOT NULL,
`email` varchar(255) CHARACTER SET utf8 NOT NULL,
`salt` varchar(255) CHARACTER SET utf8 NOT NULL,
 PRIMARY KEY (`id`),
 UNIQUE KEY `username` (`username`),
 UNIQUE KEY `email` (`email`)
) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=1 ;

","getrandmax seems to return a rather big number (2147483647), depending on your platform.  The chance that you encounter any given N is hence 1/2147483647.
The chance that you don't encounter N is 1-1/2147483647.
So the chance that you don't encounter the first, secondly, thirdly, ... Pth N becomes the Pth power of (1-1/2147483647).
So the chance you do encounter one of P distributed salts is  1 - (chance you don't encounter any of P salts)
= 1 - (1-1/max)**P
This means a curve going steeply down from about a quarter of a gig salts.
(a table from excel):
                        max
                          2,147,483,647
            P = number/salts        ( 1 - 1/max ) ^ P       collission chance
               16777216                    0                   1%
               33554432                    0                   2%
               67108864                    0                   3%
              134217728                    0                   6%
              268435456                    0                  12%
              536870912                    0                  22%
             1073741824                    0                  39%
             2147483648                    0                  63%
             4294967296                    0                  86%
             8589934592                    0                  98%
            17179869184                    0                 100%

","370","<php><security><hash><salt>","0","3","5","2009-10-19 19:41:04","1588326","5","","","","","2009-10-19 12:01:40",""
"1588294","is this ok? salting","Hey i would like do have your input on this
I use this to generate unique salts to each of my users when they register (random letters and numbers). how big is the chance that salts will colide?
uniqid(mt_rand());

I then use md5 to hash salt, password and email(in that order) together as password and rehash when they log-in.
md5($salt . $password . $email);

How much safer than just md5 is this? Something i can improve?
CREATE TABLE IF NOT EXISTS `users` (
`id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
`username` varchar(24) CHARACTER SET utf8 NOT NULL,
`password` varchar(32) CHARACTER SET utf8 NOT NULL,
`email` varchar(255) CHARACTER SET utf8 NOT NULL,
`salt` varchar(255) CHARACTER SET utf8 NOT NULL,
 PRIMARY KEY (`id`),
 UNIQUE KEY `username` (`username`),
 UNIQUE KEY `email` (`email`)
) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=1 ;

","You might also consider using SHA256 we are seeing more and more exploits with MD5. SHA256 will require additional storage space due to the length of the hash results, but I think it is worth it.
$hashed = hash('sha256', $per_user_salt . $password . $app_salt );
Note: this does require PHP 5.1.2 or greater.
","370","<php><security><hash><salt>","0","0","5","2009-10-19 19:41:04","1588326","5","","","","","2009-10-19 12:01:40",""
"29786231","Same salt or Different salt?","I have a super old version of php (please don't tell me to upgrade for it will never be an option in our case) and i need to store passwords. I had seen posts like this and many more that says, use crypt() of php. I am just confuse with one thing:
My question is which is proper way of storing password; Use ONE SAME SALT for all passwords of different users or DIFFERENT RANDOMLY GENERATED SALT for each password of users?
My question arise because in my experience, i haven't seen a database/table with salt in each row, some have a one salt in a config file and it is being used for salting all of the passwords. Also, i think storing different salt in each user simply means more bytes to store.
Thanks guys ♥
","You want to use a different salt. The idea being is that a salt will impact the resulting hash.
When ""hacking"" passwords that have been exposed, malicious people will use ""rainbow tables"". These are essentially a reverse look up that finds strings that hash to the given value. Rainbow tables can also be generated for common passwords.
If you use one salt, a hacker will only have to generate one rainbow table. If you use a new salt for each password, the hacker has to generate rainbow tables for each password they wish to compromise.
It is relevant to upgrade your PHP for modern hashing librarys (like bcrypt). However, there are back-ports for older versions of PHP which I seriously recommend. Hashing functions for passwords are designed to be computationally expensive so that a password takes time to verify. The idea being that you cannot verify 1000 different password possibilities in any reasonably short amount of time.
","369","<php><passwords><salt><crypt>","-1","3","3","2015-04-22 07:57:10","29786297","13","1","-1","","2017-05-23 11:58:44","2015-04-22 01:37:54",""
"29786231","Same salt or Different salt?","I have a super old version of php (please don't tell me to upgrade for it will never be an option in our case) and i need to store passwords. I had seen posts like this and many more that says, use crypt() of php. I am just confuse with one thing:
My question is which is proper way of storing password; Use ONE SAME SALT for all passwords of different users or DIFFERENT RANDOMLY GENERATED SALT for each password of users?
My question arise because in my experience, i haven't seen a database/table with salt in each row, some have a one salt in a config file and it is being used for salting all of the passwords. Also, i think storing different salt in each user simply means more bytes to store.
Thanks guys ♥
","Using a single salt for every hash will always prevent a rainbow table attack unless a specially generated rainbow table is generated using the salt you were using, which is astronomically impossible unless your salt is a single character or was known beforehand.
Using the same salt for every hash is also great against hackers that have access to your SQL database but not your back-end code.
However if a hacker has access to your static salt it makes having it almost useless against the speed of a brute-force attack, which having a salt for every user would mitigate.
You should use both a hard-coded static salt and a dynamic salt to both prevent a rainbow table attack and mitigate a brute-force attack.
","369","<php><passwords><salt><crypt>","-1","0","3","2015-04-22 07:57:10","29786297","13","1","-1","","2017-05-23 11:58:44","2015-04-22 01:37:54",""
"29786231","Same salt or Different salt?","I have a super old version of php (please don't tell me to upgrade for it will never be an option in our case) and i need to store passwords. I had seen posts like this and many more that says, use crypt() of php. I am just confuse with one thing:
My question is which is proper way of storing password; Use ONE SAME SALT for all passwords of different users or DIFFERENT RANDOMLY GENERATED SALT for each password of users?
My question arise because in my experience, i haven't seen a database/table with salt in each row, some have a one salt in a config file and it is being used for salting all of the passwords. Also, i think storing different salt in each user simply means more bytes to store.
Thanks guys ♥
","Create a unique salt for each password, this is the only safe method. How you can calculate the hash, depends on how old your PHP version actually is:
Version 5.5 of PHP will have built-in support for BCrypt, the functions password_hash() and password_verify(). This function will generate a safe salt on its own and includes it in the resulting hash-value.
For PHP version 5.3.7 and later, there exists a compatibility pack, from the same author that made the password_hash() function. You can then already use the password_hash() function, and should you switch to a newer PHP version you do not have to change your code.
For PHP versions before 5.3.7 there is no support for crypt() with 2y, the unicode safe BCrypt algorithm. One could use the compatibility pack and replace it instead with 2a, which is the best alternative for earlier PHP versions.
For PHP versions before 5.3, there is no support for BCrypt at all. Your best bet will probably be the phpass framework then.
Note that the crypt() function will not create a safe salt on its own, though it will include it in the resulting hash-value. For verification it will extract it from there.
","369","<php><passwords><salt><crypt>","-1","1","3","2015-04-22 07:57:10","29786297","13","1","-1","","2017-05-23 11:58:44","2015-04-22 01:37:54",""
"3516420","Salting a password - are there better options than using a timestamp?","I'm currently building a couple of ASP.NET MVC 2 sites, and am wondering what my options are for salting a password.  With my PHP work, I usually just obtained the timestamp of when a user registered, then appended it to the end of their password string before using SHA1 to hash the entire thing.  My instinct is that this approach may not be sufficient.
I'm pretty new to user administration with ASP.NET anyway, so I figure it would be in my best interest to get started with best practices from the beginning.  I know that ASP.NET web forms have built-in user administration available, but am unsure about MVC.
","The only point of a SALT is to prevent rainbow attacks, where multiple users have the same hash for their password, so reversing one password successfully means you also know it's the password for everybody else with the same hash. Even a single-digit salt will prevent that, since two users with the same password will have different hashes if they have different salts.
As long as the salt is something that won't change, and that is different for every user, any value will work well. Timestamp of their registration, provided you don't update that field (which would invalidate their password hash and prevent their login) is a fine choice.
","362","<asp.net-mvc-2><salt><user-administration><salt-creation>","3","4","1","2010-08-18 20:35:04","3516442","0","","","","","2010-08-18 20:33:04",""
"45957488","How can I decrypt a SHA256 Hash string when I know the answer is a random number from a known nuimber range?","A random number is selected from a range of 1 to 50 (for example). 
This number then encrypted with a salt key to a SHA256 Hash string.
What I wanted to know is if there is any way I can decrypt this Hash String to get the encrypted random number behind it? 
Thank you in advance.
","","361","<encryption><hash><sha256><salt><sha>","0","","0","2017-08-30 10:04:42","","9","","","","","2017-08-30 10:04:42",""
"12666066","PHP Error - Login/Register Script","The user registration page works, meaning a the salt and hashed password are saved correctly in the database. The login reports an invalid username/password. I have the salt and password set to varchar(64) in the database if that matters.
I just cant seem to find out why it doesn't work. I would like to believe the error is in the $query or $count variable.
Register: 
<?php
include('config.php');
#Setup Credentials
$uname = mysql_real_escape_string($_POST['uname']);
$escapedPW = mysql_real_escape_string($_POST['pass']);
$email = mysql_real_escape_string($_POST['email']);
#Salt Credentials
$salt = bin2hex(mcrypt_create_iv(32, MCRYPT_DEV_URANDOM));
$saltedPW =  $escapedPW . $salt;
$hashedPW = hash('sha256', $saltedPW);
#checks and queries
$usercheck = mysql_query(""SELECT * FROM users WHERE username = '$uname'"");
$emailcheck = mysql_query(""SELECT * FROM users WHERE email = '$email'"");
$count = mysql_num_rows($usercheck);
$count2 = mysql_num_rows($emailcheck);
$query = ""INSERT INTO users (username, password, email, salt) VALUES ('$uname', '$hashedPW', '$email', '$salt')"";
$error = """";

if(isset($_POST['submit'])){
    if(empty($_POST['uname']) || empty($_POST['pass']) || empty($_POST['email'] )){
      echo 'A field is empty!';}      
    else{
            if($count != 0){$error = 'Username is already registered.';}
            elseif ($count2 != 0 ) {$error = 'Email is already registered.';}
                else{ mysql_query($query);}
    }
}
?>

Login:
<?php
include(""config.php"");
if (isset($_POST['submit'])) { 
   if (!$_POST['username'] | !$_POST['password'] ) {
    die('You did not complete all of the required fields');
  }
else{
    $username = mysql_real_escape_string($_POST['username']);
    $escapedPW = mysql_real_escape_string($_POST['password']);

    $saltquery = ""SELECT salt FROM users WHERE username = '$username';"";
    $result = mysql_query($saltquery);

    $row = mysql_fetch_assoc($result);
    $salt = $row['salt'];

    $saltedPW =  $escapedPW . $salt;

    $hashedPW = hash('sha256', $saltedPW);

    $query = ""SELECT * FROM users WHERE username = '$username' and password = '$hashedPW';"";
    $count = mysql_num_rows($query);

    if($count == 0){
      header(""location:index.php?status=1"");
    }
      else {
              // store cookie $myusername, $mypassword and redirect to index
      session_start(); 
      $_SESSION['username'] = $username;
      $_SESSION['password'] = $hashedPW;
      setcookie('username', $username, time()+60 * 60 * 4, '/', 'www.site90.net');
      setcookie('password', $hashedPW, time()+60 * 60 * 4, '/', 'www.site90.net');
      header(""location:index.php"");
    }
}}
?>

","The problematic are these:  
$query = ""SELECT * FROM users WHERE username = '$username' and password = '$hashedPW';"";
$count = mysql_num_rows($query);

They should be:
$sql = ""SELECT * FROM users WHERE username = '$username' and password = '$hashedPW';"";
$query = mysql_query($sql);
$count = mysql_num_rows($query);

mysql_num_rows() expects that the argument is resource not string:
http://php.net/manual/en/function.mysql-num-rows.php
","360","<php><login><salt>","2","1","1","2012-10-01 01:31:52","12666613","3","","","","","2012-09-30 23:34:22",""
"10923985","Proper way to use salt along with hashing","During a discussion with a couple of other people, I read the argument that

sha512(salt + username + password) is bad, 
sha512(username + password) is worse and 
sha512(password) is plain idiotic.

While I partly agree, what's really the best security? Is there anything safer than using an user unique salt along with a slow hashing method such as SHA512? What's the real way to go? Argue on!
Please edit the title if you find it bad.
","When discussing the recent LinkedIn leak, somebody brought up this link about bcrypt. I think I agree... we should be using functions that increase the calculation time exponentially according to a factor. That's the only way we can beat people trying to use clusters or GPUs to do their hashing calculations.
","357","<security><hash><salt><sha>","0","0","3","2012-06-08 19:35:47","10955056","3","","","","","2012-06-07 00:03:17",""
"10923985","Proper way to use salt along with hashing","During a discussion with a couple of other people, I read the argument that

sha512(salt + username + password) is bad, 
sha512(username + password) is worse and 
sha512(password) is plain idiotic.

While I partly agree, what's really the best security? Is there anything safer than using an user unique salt along with a slow hashing method such as SHA512? What's the real way to go? Argue on!
Please edit the title if you find it bad.
","My understanding is, that repeated hashing (for computational cost) & a good random salt, should defeat all but seriously determined cryptographic attackers.
Hashing passwords in the database, and over the network, avoids plaintext being recoverable (and usable elsewhere) by a snooper or attacker who does get in.
Basically this is more or less the scheme, used by the Wordpress authentication:
var SALT = 64 random characters;
var NUM_HASHES = about 1000;    // can be randomized
var hashedResult = inputPassword;
for (int i = 0; i < NUM_HASHES; i++) {
  var dataToHash = SALT + hashedResult;
  hashedResult = secureHash( dataToHash);
}
//... can now store or send.

This use of a random salt, and looping hash, defeats any rainbow tables or single-level 'hash collision', 'hash weakness' attack. Only brute-forcing the complete keyspace, each key through 1000 iterations of the hash function, is believed to defeat it :)
","357","<security><hash><salt><sha>","0","0","3","2012-06-08 19:35:47","10955056","3","","","","","2012-06-07 00:03:17",""
"10923985","Proper way to use salt along with hashing","During a discussion with a couple of other people, I read the argument that

sha512(salt + username + password) is bad, 
sha512(username + password) is worse and 
sha512(password) is plain idiotic.

While I partly agree, what's really the best security? Is there anything safer than using an user unique salt along with a slow hashing method such as SHA512? What's the real way to go? Argue on!
Please edit the title if you find it bad.
","
Generate random salt for each password.
Avoid MD5, and even SHA-1.
Use a slow hashing algorithm; SHA-256 seems to be a good choice for now.
Password storage is one of those rare occasions where there is some benefit to having your own (overall) algorithm.  Consider an attacker with a rainbow table; if your password storage algorithm varies from the one used to generate their rainbow table enough to change the generated values, that rainbow table is of no use.  The attacker would need to know your algorithm, then generate a new table.  If you choose a slow hashing algorithm, generating a new table is very expensive.

By ""overall"" algorithm, I mean the complete definition of how you transform the plaintext password into the stored value.  E.g. SHA-256(""mypassword"" + ""[["" + 40-char-random-alphanum-salt + ""]]"").  If you change that to use angle brackets instead of square brackets, you've changed the rainbow table necessary to exploit your stored passwords.  Note that I'm not advocating writing your own hash algorithm; you should still choose a cryptographically secure hash algorithm.
See this article by the author of MD5.  He makes the two main points I repeated above: 1) if you use a fast hashing algorithm, you're missing the point, and 2) reuse of overall algorithms allows re-use of rainbow tables.
","357","<security><hash><salt><sha>","0","0","3","2012-06-08 19:35:47","10955056","3","","","","","2012-06-07 00:03:17",""
"35987170","In laravel 5.0 we use bcrypt , so is bcrypt actually contains salt hashing ? if not how to add salt to the normal authentication method?","This is the code to create the password using the bcrypt .how to add salt ? 
public function create(array $data)
{
    return User::create([
        'name' => $data['name'],
        'email' => $data['email'],
        'password' => bcrypt($data['password']),
    ]);
}

","Yes, bcrypt](https://en.wikipedia.org/wiki/Bcrypt) does add a salt.
From the Wikipedia article:

Besides incorporating a salt to protect against rainbow table attacks, bcrypt is an adaptive function: over time, the iteration count can be increased to make it slower, so it remains resistant to brute-force search attacks even with increasing computation power.

","357","<laravel><laravel-4><laravel-5><salt><bcrypt>","1","1","1","2016-03-14 12:18:47","35987227","0","1","","","","2016-03-14 12:09:30",""
"20437686","How much salt security is too much salt security","When does salting passwords become too secure?  I have a couple of functions that Encrypt and Decrypt as users passwords, but I am concerned if it might be overkill.
First I have my encryption method which takes the encrypted password and the salt and puts it all in one string (up to 256 Characters) in my database.  In addition to that it actually only encrypts the password with a 32 Character string of my original 128 Character Salt String, which the function chooses at random.
    Public Function EncryptPassword(Password As String) As String

        Dim EPassword As String = String.Empty

        ' Generate Random 128 Base64 Salt String
        Dim Salt As String = Var.Simple3Des.GenerateSalt

        ' Divide into Substrings, and combine into splitable string
        Dim SmallSalts As String = Salt.Substring(0, 32) + ""."" + Salt.Substring(32, 32) + ""."" + Salt.Substring(64, 32) + ""."" + Salt.Substring(96, 32)

        ' Create the Salt Array
        Dim SaltArray = Split(SmallSalts, ""."")

        ' Randomly Choose part of the array to actually use as salt
        Dim rnd As New Random
        Dim TrueSalt As String = SaltArray(rnd.Next(0, SaltArray.Length))

        ' Encrypt The Password
        Dim Security As New Var.Simple3Des(TrueSalt)
        EPassword = Security.EncryptData(Password)

        ' Divide up the salt and password and place into same string
        Dim PasswordString As String = Salt.Substring(0, 16) + EPassword.Substring(0, 6) + Salt.Substring(16, 112) + EPassword.Substring(6, EPassword.Length - 6)

        Return PasswordString

    End Function

I then use the same formula to Decry-pt the password, by trying all possible sub-string combinations until it finds the right one.
 Public Function DecryptPassword(NtID As String)

            ' Grab The Users Encrypted Password
            Dim UserID As Integer = GetAppUserID(NtID)
            Dim User As Users = Var.db.Web.Users.Find(UserID)
            Dim EPassword = User.Password

            ' Divided the Encrypted Password Into Salt and Actual Password
            Dim Salt As String = EPassword.Substring(0, 16) + EPassword.Substring(22, 112)
            Dim Password As String = EPassword.Substring(16, 6) + EPassword.Substring(134, EPassword.Length - 134)
            Dim DPassword As String = String.Empty

            ' Try each substring of Salt until password is Decrypted.
            Try
                If DPassword = String.Empty Then
                    Dim Security As New Var.Simple3Des(Salt.Substring(0, 32))
                    DPassword = Security.DecryptData(Password)
                End If
            Catch ex As Exception
                DPassword = String.Empty
            End Try

            Try
                If DPassword = String.Empty Then
                    Dim Security As New Var.Simple3Des(Salt.Substring(32, 32))
                    DPassword = Security.DecryptData(Password)
                End If
            Catch ex As Exception
                DPassword = String.Empty
            End Try

            Try
                If DPassword = String.Empty Then
                    Dim Security As New Var.Simple3Des(Salt.Substring(64, 32))
                    DPassword = Security.DecryptData(Password)
                End If
            Catch ex As Exception
                DPassword = String.Empty
            End Try

            Try
                If DPassword = String.Empty Then
                    Dim Security As New Var.Simple3Des(Salt.Substring(96, 32))
                    DPassword = Security.DecryptData(Password)
                End If
            Catch ex As Exception
                DPassword = String.Empty
            End Try

            Return DPassword
        End Function

My question is 
A. Aside from possible perfomance issues, what other dangers does this method pose?
B. Is this overkill, is salting and storing the salt/password like this even necessary?
C. If this is unnecessary what other methods could I use to salt and store salt/password?
","Here is a great site that talks about the sort of thing you are interested in: https://crackstation.net/hashing-security.htm. The overall point of what they say is that:

If you are not careful yourself, messing with algorithms that are crafted to be secure can actually reduce their security.
It is overkill because you have to assume that an attacker will get your code before they can crack your database, so they will know your scheme.
Simply storing the hash and the salt should be fine. That is sort of the point of the hash and the salt.

I have used the crackstation page as a general reference on hashing security quite often. I highly recommend reading it as will probably contain plenty of information that you will find relevant and that I omitted here.
","349","<vb.net><security><encryption><salt>","2","4","1","2013-12-07 13:23:39","20437723","7","","238704","","2013-12-07 13:23:39","2013-12-07 04:43:19",""
"10884064","Is the same key derived providing the same salt and password using Rfc2898DeriveBytes","I read this tutorial about encryption in .NET
it uses Rfc2898DeriveBytes to create a random key to be used by symmetric algorithm . but it doesn't save the key . and later in decryption method it supplies the same password and salt and decrypts the text .
does it mean supplying the same salt and password to Rfc2898DeriveBytes could derived the same key ? no need to save the key and just save salt and password ?
","Yes, that is correct.  Identical inputs to  Rfc2898DeriveBytes provide identical outputs.   Otherwise, decryption would not be possible. 
The article you reference uses the term ""random"" loosely. The output of Rfc2898DeriveBytes is not random: but it has high entropy. 
","347","<asp.net><salt><encryption-symmetric><pbkdf2>","0","1","1","2012-06-10 21:02:19","10972332","0","","","","","2012-06-04 15:41:04",""
"30665761","Xcode salting and hashing a password","I have a iPhone app that requires users to register before they can use it. I grab the usual info including password.
I am saving user registration details to my server and I am encrypting by prepending a salt string to the password and then hashing the result.
I #define a salt string to use to prepend to all my passwods but I read that the salt should be a randomly generated string for each new password.
Thats all good and I manage to generate a unique string for each password. 
When I save the password on registration, the salted/hashed value is sent to my database on the server and saved in the ""password"" column.
Now assume the user logs out and then tries to log back in using their saved password. 
They enter their password, but then I salt and hash the password for sending, it gets to the database check and it doesnt match any of the passwords as the login password go salted/hashed with a new random salt string.
How do I handle this or do I have the process confused?
Should I be generating a new random salt string for each new password or do I just use the 1 salt string for all passwords? 
","Todays password_hash() functions often include the salt plaintext in the resulting hash-value. This way you can store hash and salt into the same database field.
$2y$10$nOUIs5kJ7naTuTFkBy1veuK0kSxUFXfuaOKdOKf9xYT0KKIGSJwFa
 |  |  |                     |
 |  |  |                     hash-value = K0kSxUFXfuaOKdOKf9xYT0KKIGSJwFa
 |  |  |
 |  |  salt = nOUIs5kJ7naTuTFkBy1veu
 |  |
 |  cost-factor = 10 = 2^10 iterations
 |
 hash-algorithm = 2y = BCrypt

For verification they offer a password_verify() function, which will extract the salt from the stored hash-value and use the same salt to hash the login password. These two hashes are then comparable.
Hashing should be done server-side, usually the password is sent plaintext to the server, encrypted with HTTPS/SSL.
","346","<hash><passwords><salt>","2","2","1","2015-06-05 17:10:46","","0","","1226963","","2015-06-05 17:10:46","2015-06-05 11:46:39",""
"2043015","How should I incorporate the salt in my password hash?","How much stronger would
return sha1($salt.sha1($passwd));

be compared to just:
return sha1($salt.$passwd);

$salt is a per-user string of length 12 consisting of strong random ASCII.
","At first glance, and without strong knowledge in crypto, I'd say it's not stronger at all.
By the way, it's usually advised to use 
sha1($login.$salt.$passwd);

so that 2 users with the same password won't have the same hash.
","345","<php><security><hash><salt>","4","3","3","2011-08-12 22:03:22","","2","","600500","","2011-08-12 22:03:22","2010-01-11 16:07:23",""
"2043015","How should I incorporate the salt in my password hash?","How much stronger would
return sha1($salt.sha1($passwd));

be compared to just:
return sha1($salt.$passwd);

$salt is a per-user string of length 12 consisting of strong random ASCII.
","As far as I know there is no difference in strength.
Since it is common practice to prepend the salt to the password hash, the salt is generally known to an attacker. But this does not defeat the purpose of the salt.
It is generally speaking not a a good idead to add the $login/$username to the hash (Vinzz's solution) as it will cause problems if the user changes his or her username. A better solution is to use a random salt.
The used hashing algorithm does make a difference. SHA1 is considered cryptographically broken and should not be used to hash passwords. 
Gennerally speaking  BCRYPT (a Blowfish based adaptable-cost hashing algorithm) is considdered best to be the practice (CRYPT_BLOWFISH flag for PHP's crypt();)
Other solid options are  SHA256 and above.
Edit:
I wrote a longer answer on salting here: stackoverflow.com/questions/1645161/salt-generation-and-open-source-software/
","345","<php><security><hash><salt>","4","1","3","2011-08-12 22:03:22","","2","","600500","","2011-08-12 22:03:22","2010-01-11 16:07:23",""
"2043015","How should I incorporate the salt in my password hash?","How much stronger would
return sha1($salt.sha1($passwd));

be compared to just:
return sha1($salt.$passwd);

$salt is a per-user string of length 12 consisting of strong random ASCII.
","It's exactly twice as strong, because the attacker needs to perform twice as many SHA1 calculations for a brute force attack. 
Of course, that is still not exactly impressive. On the other hand, doing the SHA1 5000 times in a loop is practical for authorization, but makes attacks take 5000 times longer - this technique is known as key strengthening. It is, however, really just a poor man's substitute for the adaptible-cost hash algorithms that Jacco mentions.
","345","<php><security><hash><salt>","4","4","3","2011-08-12 22:03:22","","2","","600500","","2011-08-12 22:03:22","2010-01-11 16:07:23",""
"20984722","Now that I know how to salt & hash passwords, a few more questions","So, let's assume I have read every article/post about appropriately salting and hashing passwords in order to secure user credentials. 
This means I am not wondering what hashing algorithm to use (SHA1 vs. SHA2 vs. PDKBF2), how to generate the salt, how to store the salt, how to append the salt, or whether I should be writing the code myself vs. leveraging well-established libraries like bcrypt. Please, avoid rambling about these issues here as I have read 50+ other pages of that already. 
Just assume the following is my approach (also note I understand this is not flawless or likely sufficient for applications like financial service, I am really just wondering if this is an acceptable min bar to claim that I ""do the right thing"").

User comes to my amazing website (www.myamazingwebsite.com) and logs in with email and pass.
I pull her salt and hash from my database. Assume the salt is lengthy enough, unique per-user, and created using a CSPRNG upon user registration.
I prepend the salt to her input password, hash it using SHA-512, run 1,000 iterations, then compare it to the hashed value pulled from the db:
var hash = sha512(salt + password);
for (i = 0; i < 1000; i++) {
    hash = sha512(salt + password + hash);
}

If they match, the user is authenticated. Otherwise, they are not.

Now, my question is how secure is my above approach. The questions I would like help answering:

Do I need to change the salt periodically? For example, perhaps I could re-compute and store a new hash using a newly created random salt after every successful login. This seems like it would be more secure but I am not sure what standard practice is here.
The request to the server will be done via https. Does that mean I can assume that I can process all of the hashing and validation logic server side? Would most folks consider this sufficient, or do I need to consider some hybrid both on client and server side?
Anything else I am overlooking or need to consider? 

Thanks in advance, I appreciate the help.
","1) Assuming you've done the right thing and do not store their password, you can't change the salt unless they are logging in. I suppose you could change their salt every time they do log in, but it doesn't really help (and might hurt). 
Here's why: Having a unique salt on everyone simply makes it harder for an attacker that has access to your database from attempting to guess the passwords. If you've done things correctly, he would have to use a different salt for each person. He can't just start guessing passwords using a site-wide salt and see if it matches anyone. As long as you have a unique salt for each user, you are doing the best you can.
In fact, changing the salt does nothing but give an attacker with access to your database over time MORE information. Now he knows what their password looks like salted two different ways. That could (theoretically) help crack it. For this reason, it would actually be ill advised to change the salt.
2) Https is sufficient. If someone can compromise https, then any additional client side hashing or such will not help. The clients computer is compromised.
3) I think you have a fair understanding of best password practices. Don't overlook other security issues like sql-injection and cross-site scripting.
","344","<authentication><hash><passwords><credentials><salt>","1","2","2","2014-01-11 12:46:25","","0","","","","","2014-01-08 00:19:36",""
"20984722","Now that I know how to salt & hash passwords, a few more questions","So, let's assume I have read every article/post about appropriately salting and hashing passwords in order to secure user credentials. 
This means I am not wondering what hashing algorithm to use (SHA1 vs. SHA2 vs. PDKBF2), how to generate the salt, how to store the salt, how to append the salt, or whether I should be writing the code myself vs. leveraging well-established libraries like bcrypt. Please, avoid rambling about these issues here as I have read 50+ other pages of that already. 
Just assume the following is my approach (also note I understand this is not flawless or likely sufficient for applications like financial service, I am really just wondering if this is an acceptable min bar to claim that I ""do the right thing"").

User comes to my amazing website (www.myamazingwebsite.com) and logs in with email and pass.
I pull her salt and hash from my database. Assume the salt is lengthy enough, unique per-user, and created using a CSPRNG upon user registration.
I prepend the salt to her input password, hash it using SHA-512, run 1,000 iterations, then compare it to the hashed value pulled from the db:
var hash = sha512(salt + password);
for (i = 0; i < 1000; i++) {
    hash = sha512(salt + password + hash);
}

If they match, the user is authenticated. Otherwise, they are not.

Now, my question is how secure is my above approach. The questions I would like help answering:

Do I need to change the salt periodically? For example, perhaps I could re-compute and store a new hash using a newly created random salt after every successful login. This seems like it would be more secure but I am not sure what standard practice is here.
The request to the server will be done via https. Does that mean I can assume that I can process all of the hashing and validation logic server side? Would most folks consider this sufficient, or do I need to consider some hybrid both on client and server side?
Anything else I am overlooking or need to consider? 

Thanks in advance, I appreciate the help.
","
Do I need to change the salt periodically?

No. The salt is a per-user public parameter that servers two purposes. First, it ensures that an attacker cannot build an offline dictionary of passwords to hashes. Second, it ensures two users with the same password have different hashed password entries in the database.
See the Secure Password Storage Cheat Sheet and Secure Password Storage paper by John Steven of OWASP. It takes you through the entire threat model, and explains why things are done in particular ways.

The request to the server will be done via https. Does that mean I can assume that I can process all of the hashing and validation logic server side?

This is standard practice, but its a bad idea. Its a bad idea because of all the problems with SSL/TLS and PKI in practice. Though this is common, here's how it fails: the SSL/TLS channel is setup with any server that presents a certificate. The web application then puts the {username, password} on the wire in the plain text using a basic_auth scheme. Now the bad guy has the username and password.
There's lots of other problems with doing things this way. Peter Gutmann talks about this problem (and more) in his Engineering Security book. He's got a witty sense of humor, so the book is cleverly funny at times, too even though its a technical book.

Would most folks consider this sufficient, or do I need to consider some hybrid both on client and server side?

If possible, use TLS-PSK (Preshared Key) or TLS-SRP (Secure Remote Password). Both overcome the problems of basic_auth schemes, both properly bind the channel, and both provide mutual authentication. There are 80 cipher suites available for TLS-PSK and TLS-SRP, so there's no shortage of algorithms.

Anything else I am overlooking or need to consider? 

Cracking is not the only threat here. More than likely, the guy trying to break into your organization is going to be using one of the top passwords from the millions of passwords gathered from the Adobe breach, the LinkedIn breach, the Last.fm breach, the <favorite here> breach.... For example:

25 most-used passwords revealed: Is yours one of them?
The 30 Most Popular Passwords Stolen From LinkedIn
Top 100 Adobe Passwords with Count

Why bother brute forcing when you have a list of thousands of top rated passwords to use?
So your FIRST best defense is to use a word list that filters a user's bad password choices. That is, don't allow user's to pick weak or known passwords in the first place.
If someone gets away with your password database, then he or she is going to use those same password lists to try and guess your user's passwords. He or she is probably not even going to bother brute forcing because he or she will have recovered so many passwords using a password list.
As I understand it, these word lists are quite small when implemented as a Bloom Filter. They are only KB in size even though there are millions of passwords. See Peter Gutmann's Engineering Security for an in depth discussion.
","344","<authentication><hash><passwords><credentials><salt>","1","1","2","2014-01-11 12:46:25","","0","","","","","2014-01-08 00:19:36",""
"32233280","NodeJs check the salt of a sha-256 encrypted string","My client is sending me a SHA-256 encrypted string. And also it is having a  salt. Myself and my client both are knowing the above salt. I need to check weather the string is having correct salt or not. 
","","343","<node.js><sails.js><salt><bcrypt><sha256>","1","","0","2015-08-26 17:44:44","","9","","","","","2015-08-26 17:44:44",""
"11226043","Sha256 + salt algorithem in windows phone 7","I want to encrypt my userid and password using SHA256 algorithm and salt key for sending to the server through a xml. How can I achieve this ?
I did a sample code with SHA256 and pasted bleow. How I use salt key in this ?    
      void myBtn_Click(object sender, RoutedEventArgs e)
      {
        var sha = new  SHA256Managed();
        var bytes = System.Text.Encoding.UTF8.GetBytes(testPass.Text);
        byte[] resultHash = sha.ComputeHash(bytes);
        string sha256 = ConvertToString(resultHash);
      }

       public static string ConvertToString(byte[] buff)
       {
         string sbinary = """";

         for (int i = 0; i < buff.Length; i++)
         {
             //hex-formatted
            sbinary += buff[i].ToString(""X2"");
         }
         return (sbinary);
       }

","SHA is a hash algorithm and not an encryption algorithm. The password cannot be extracted from your result string. Are you sure you are taking the right approach? Would you care to explain the scenario a bit better?
","341","<windows-phone-7><encryption><salt><sha><sha256>","0","1","1","2012-06-27 12:25:59","","2","","","","","2012-06-27 12:19:43",""
"34811630","Vagrant ssh stuck with ""default: Warning: Connection timeout. Retrying...""","I am running vagrant(1.7.4)-salt on Virtual box 4.3 on a headless ubuntu 14.04. Salt is a standalone one.The reason I am using these version is because the work on my local ubuntu.
On vagrant up I get the following output:
==> default: Importing base box 'phusion/ubuntu-14.04-amd64'...
==> default: Matching MAC address for NAT networking...
==> default: Checking if box 'phusion/ubuntu-14.04-amd64' is up to date...
==> default: Setting the name of the VM: drupal_default_1452863894453_19933
==> default: Clearing any previously set forwarded ports...
==> default: Fixed port collision for 22 => 2222. Now on port 2201.
==> default: Clearing any previously set network interfaces...
==> default: Preparing network interfaces based on configuration...
  default: Adapter 1: nat
  default: Adapter 2: hostonly
==> default: Forwarding ports...
  default: 22 => 2201 (adapter 1)
==> default: Running 'pre-boot' VM customizations...
==> default: Booting VM...
==> default: Waiting for machine to boot. This may take a few minutes...
  default: SSH address: 127.0.0.1:2201
  default: SSH username: vagrant
  default: SSH auth method: private key
  default: Warning: Connection timeout. Retrying...
  default: Warning: Connection timeout. Retrying...

vagrant ssh-config gives:
Host default
HostName 127.0.0.1
User vagrant
Port 2201
UserKnownHostsFile /dev/null
StrictHostKeyChecking no
PasswordAuthentication no
IdentityFile /home/user/.vagrant.d/insecure_private_key
IdentitiesOnly yes
LogLevel FATAL

My Vagrantfile is:
# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = ""2""

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
config.vm.box = ""ubuntu/trusty64""
config.vm.host_name = ""site#{rand(0..999999)}""
config.vm.provider ""virtualbox"" do |v|
config.ssh.insert_key = false
  v.memory = 2048
  v.cpus = 1
end

## For masterless, mount your salt file root
config.vm.synced_folder ""salt/roots/"",""/srv/salt/""
# Network
config.vm.network :private_network, ip: ""172.16.0.100""

# Server provisioner
config.vm.provision :salt do |salt|
  salt.masterless = true
  salt.minion_config = ""salt/minion""
  salt.run_highstate = true
  salt.bootstrap_options = ""-P""
end

# Provisioning scripts
config.vm.provision ""dbsync"", type: ""shell"", path: ""provision/db.sh""
end

What could have missed? Any ubuntu network configuration? Any ssh configuration?
","","339","<ssh><vagrant><ubuntu-14.04><salt>","1","","0","2016-01-15 15:46:50","","1","","1099761","","2016-01-15 15:46:50","2016-01-15 12:58:22",""
"35761673","AES key storage management and salting in Python","I am fairly new to data security implementation. I am writing a Python code that needs to encrypt clear text data. Currently, I am using the following AES encryption implementation to encrypt the data:
https://pythonprogramming.net/encryption-and-decryption-in-python-code-example-with-explanation/
I have two questions:
1) When using the encryption method, a random key is generated. That key needs to be used in the decryption method. I need to store the key in a file, so that it is accessible later. What is the proper method to secure the key stored in this file, and what format should this file have (is .txt OK, or should I use another format)? I keep reading methods to perform a second encryption to encrypt the first key, or similar things. But wouldn't the second key used for the second encryption be compromised then...? 
Also, I want to avoid methods that use user-generated passwords to protect the encryption key. Maybe I should use a different encoding for each file that contains a different key? But I am not sure about how to do this…
2) I want to use salting so that same clear text values produce different data appearances. From what I understood, in order to perform the encryption, I need to use XOR for a random salt and the clear text, and then use the key to encrypt the result. At the moment of the decryption, I need to use the key to decrypt the string, and then use XOR with the same salt value that I used in the encryption so that I get the clear text in the end. 
However, I don't quite understand how to generate the salt and how to store it. How can I make generate a random salt value that has the same length as the clear text that it is XOR-added with? And also, can I use the same encryption key to encrypt the salt value, since it is random, or doesn’t the salt value need any encryption at all?
","
The bad news is that storing a key securely is very hard and device dependent. Many devices have some form of keystone, use that if available. Using a user entered passphrase each tine is the most secure method but generally to annoying for the user.
Random salts are obtained by making a call to a cryptographic pseudo-random number generator, the exact function is platform dependent, arc4random is such  a unix-like function. There are two methods, if you do not need to obtain the original value use a cryptographic hash such as HMAC. If you need to be able to reverse the operation use encryption such as AES.

There is a lot of information on cryptography and it is a large subject. My suggestion is to do a lot of studying, use a library methods of ask a question with information of what you are trying to accomplish.
","339","<python><encryption><storage><salt><secret-key>","-1","0","1","2016-03-03 19:36:40","","0","","1816580","","2016-03-03 19:36:40","2016-03-03 01:51:38",""
"24298391","password algorithm hash_algos overkill","Just curious in the speed and productivity and the security in using all hash_algos
Array
 (
   [0] => md2
   [1] => md4
   [2] => md5
   [3] => sha1
   [4] => sha224
   [5] => sha256
   [6] => sha384
   [7] => sha512
   [8] => ripemd128
   [9] => ripemd160
   [10] => ripemd256
   [11] => ripemd320
   [12] => whirlpool
   [13] => tiger128,3
   [14] => tiger160,3
   [15] => tiger192,3
   [16] => tiger128,4
   [17] => tiger160,4
   [18] => tiger192,4
   [19] => snefru
   [20] => snefru256
   [21] => gost
   [22] => adler32
   [23] => crc32
   [24] => crc32b
   [25] => salsa10
   [26] => salsa20
   [27] => haval128,3
   [28] => haval160,3
   [29] => haval192,3
   [30] => haval224,3
   [31] => haval256,3
   [32] => haval128,4
   [33] => haval160,4
   [34] => haval192,4
   [35] => haval224,4
   [36] => haval256,4
   [37] => haval128,5
   [38] => haval160,5
   [39] => haval192,5
   [40] => haval224,5
   [41] => haval256,5
)

Obviously this would be overkill yet strictly speaking from a whim and wonderment would looping these methods with our password and salts and then using our return saying md5 being our last algorithm to be ran as the store. How long would it be to crack the said password? As ive read in some documentation  with a password 8 or less characters in length it takes only 6 hours to crack so in reference if our stipulations and regulations to a password was
One uppercase letter
Two numbers
And no less than 10 characters in length
Then loop our password in the hash_algs essentially our password could nearly be unbreakable though I shouldn't use that since everything these days is able to be cracked. 
So my concerns are is this feasible
Will it have a heavy page load
Regulations to passwords strength stronger like this
Is it truly overkill or is it like fort knox security? 
","Using all of the algorithms is complete overkill. If I were you, just generate a random salt for each user (possibly by MD5 hashing uniqid, just an example), and hash the password with said salt. Blowfish encryption will work great for you.
","337","<php><security><hash><md5><salt>","1","1","2","2014-06-19 11:28:54","24305502","2","1","","","","2014-06-19 03:40:54",""
"24298391","password algorithm hash_algos overkill","Just curious in the speed and productivity and the security in using all hash_algos
Array
 (
   [0] => md2
   [1] => md4
   [2] => md5
   [3] => sha1
   [4] => sha224
   [5] => sha256
   [6] => sha384
   [7] => sha512
   [8] => ripemd128
   [9] => ripemd160
   [10] => ripemd256
   [11] => ripemd320
   [12] => whirlpool
   [13] => tiger128,3
   [14] => tiger160,3
   [15] => tiger192,3
   [16] => tiger128,4
   [17] => tiger160,4
   [18] => tiger192,4
   [19] => snefru
   [20] => snefru256
   [21] => gost
   [22] => adler32
   [23] => crc32
   [24] => crc32b
   [25] => salsa10
   [26] => salsa20
   [27] => haval128,3
   [28] => haval160,3
   [29] => haval192,3
   [30] => haval224,3
   [31] => haval256,3
   [32] => haval128,4
   [33] => haval160,4
   [34] => haval192,4
   [35] => haval224,4
   [36] => haval256,4
   [37] => haval128,5
   [38] => haval160,5
   [39] => haval192,5
   [40] => haval224,5
   [41] => haval256,5
)

Obviously this would be overkill yet strictly speaking from a whim and wonderment would looping these methods with our password and salts and then using our return saying md5 being our last algorithm to be ran as the store. How long would it be to crack the said password? As ive read in some documentation  with a password 8 or less characters in length it takes only 6 hours to crack so in reference if our stipulations and regulations to a password was
One uppercase letter
Two numbers
And no less than 10 characters in length
Then loop our password in the hash_algs essentially our password could nearly be unbreakable though I shouldn't use that since everything these days is able to be cracked. 
So my concerns are is this feasible
Will it have a heavy page load
Regulations to passwords strength stronger like this
Is it truly overkill or is it like fort knox security? 
","Mixing all hash functions is not a good idea, because they are still too fast and you don't know if they influence each other.
An appropriate password hash function should be slow (need some computing time). If an attacker tries to crack passwords, and the hashing was properly handled, the only way for him is brute-forcing, usually done in combination with a dictionary.
That means, the more passwords he can try per second, the faster he will find the original password. Today you can for example calculate about 8 Giga MD5 hashes per second with common hardware.
There are algorithms like BCrypt and PBKDF2 with a cost factor, you can use the PHP function password_hash() to generate a BCrypt hash. The cost factor defines how many times the hash function is iterated, so you can control how much time the calculation of one try needs. A millisecond to gain access to your website is not much, a millisecond to brute-force is a stopper. With your chaining of hashes you still have only 40 fast calculations.
If your are interested in more information about password storing, you could have a look at my tutorial about secure password storing.
","337","<php><security><hash><md5><salt>","1","1","2","2014-06-19 11:28:54","24305502","2","1","","","","2014-06-19 03:40:54",""
"35016735","Where should I generate my salt in my AngularJS app","I have a AngularJS app and while need to generate a salt for password security purpose. My app doesn't use php since it's AngularJS, but I have a Slim API to access my database. Should I generate the salt in my API with a special function that just receive the password then hash it with the salt before adding my hash and salt to the database?
","Trust your instinct
I'd avoid generating anything password/encryption related within the js.  Even if it's minor and ""safe"" (eg - mostly random), it'll smell bad to your dev lead.
This seems silly.  It really belongs in the comments ;-)
","335","<php><angularjs><salt>","1","1","1","2016-01-26 15:39:56","35017767","4","","","","","2016-01-26 14:52:44",""
"19225099","Using Mysql UUID_SHORT() for Password Salt","I'm looking at adding a Salt number to our user password table.  We are saving the user passwords hashed as SHA256.  
My question is would using the number generated from Mysql's UUID_SHORT() function for example '23154192415719433' be sufficient for a password salt?
So in my database the password 'Test123' would normally stored as 'd9b5f58f0b38198293971865a14074f59eba3e82595becbe86ae51f1d9f1f65e' by calling
SELECT SHA2('Test123', 256)  

Will now be stored as 'e5e7b87ba899a6f9ad8f8e68e0b209b6923e546df70b8e4a47f996533827bce1'
SELECT SHA2('23154192415719433Test123', 256)

","Seeing as UUID_SHORT() returns a random 64-bit value, and SHA256 uses 256-bit encryption, you would be better off calling UUID_SHORT() four times and concatenating it as a binary value.
","334","<mysql><salt><password-encryption>","0","0","2","2013-10-07 13:02:50","19225217","0","","1979729","","2013-10-07 13:02:50","2013-10-07 12:35:32",""
"19225099","Using Mysql UUID_SHORT() for Password Salt","I'm looking at adding a Salt number to our user password table.  We are saving the user passwords hashed as SHA256.  
My question is would using the number generated from Mysql's UUID_SHORT() function for example '23154192415719433' be sufficient for a password salt?
So in my database the password 'Test123' would normally stored as 'd9b5f58f0b38198293971865a14074f59eba3e82595becbe86ae51f1d9f1f65e' by calling
SELECT SHA2('Test123', 256)  

Will now be stored as 'e5e7b87ba899a6f9ad8f8e68e0b209b6923e546df70b8e4a47f996533827bce1'
SELECT SHA2('23154192415719433Test123', 256)

","I expect that what you want is to
SELECT SHA2('password', 256)

give you always the same result which you can store/compare.
UUIS_SHORT() does not return the same values after each invocation so store your passwords as hash as usual. What you can do to make it better is:
SELECT SHA2(CONCAT('password','some junk known only to you'),256)

You do need anything else.
","334","<mysql><salt><password-encryption>","0","-1","2","2013-10-07 13:02:50","19225217","0","","1979729","","2013-10-07 13:02:50","2013-10-07 12:35:32",""
"17319770","alter login script for pdo function with salt and hashed password","would anyone know how I can alter the login script below to work with the PDO function? 
$username = $_POST['username'];
$password = $_POST['password'];
//connect to the database here
$username = mysql_real_escape_string($username);
$query = ""SELECT password, salt
        FROM users
        WHERE username = '$username';"";
$result = mysql_query($query);
if(mysql_num_rows($result) < 1) //no such user exists
{
    header('Location: login_form.php');
}
$userData = mysql_fetch_array($result, MYSQL_ASSOC);
$hash = hash('sha256', $userData['salt'] . hash('sha256', $password) );
if($hash != $userData['password']) //incorrect password
{
    header('Location: login_form.php');
}
$_SESSION['logged_in'] = true;

I currently use the script below but it uses md5 and the one above uses hashed passwords and salts. As you can see the script above doesnt use the PDO function so I keep getting an error message each time.
if (isset($_POST['username'], $_POST['password'])) {
    $username = $_POST['username']; 
    $password = md5($_POST['password']);

    if (empty($username) or empty($password)) {
        $error = 'Who the hell are you?';

    }else {
        $query =$pdo->prepare(""SELECT * FROM users WHERE user_name = ? AND user_password = ?"");

        $query->bindvalue(1, $username);
        $query->bindvalue(2, $password);

        $query->execute();

        $num = $query->rowCOUNT();

        if ($num == 1) {
            $_SESSION['logged_in'] = true;

            header('Location: index2.php');

            exit();
        } else {

            $error = 'Wrong wrong wrong!';


        }


    }}

Any help will be hugely appreciated, thanks!
","","329","<php><mysql><pdo><salt><saltedhash>","0","","0","2013-06-26 12:16:39","","3","","","","","2013-06-26 12:16:39",""
"24978639","Install salt on fedora","I trying to install SALT on Fedora:
yum install salt-master

and It gives me the following Error:
Error: Package: salt-2014.1.7-3.el6.noarch (epel)
           Requires: python-jinja2
 You could try using --skip-broken to work around the problem
 You could try running: rpm -Va --nofiles --nodigest

When I trying to install python-ninja2, It gives me the following error:
Setting up Install Process
No package python-jinja2 available.
Error: Nothing to do

What can be the reason for this case? How can I solve it?
","This was a actual bug in the RedHat distribution, refer the bugzilla page to get the solution 

https://bugzilla.redhat.com/show_bug.cgi?id=844710

","328","<linux><salt><yum>","0","1","2","2015-01-21 17:06:02","24978669","0","","","","","2014-07-27 06:55:17",""
"24978639","Install salt on fedora","I trying to install SALT on Fedora:
yum install salt-master

and It gives me the following Error:
Error: Package: salt-2014.1.7-3.el6.noarch (epel)
           Requires: python-jinja2
 You could try using --skip-broken to work around the problem
 You could try running: rpm -Va --nofiles --nodigest

When I trying to install python-ninja2, It gives me the following error:
Setting up Install Process
No package python-jinja2 available.
Error: Nothing to do

What can be the reason for this case? How can I solve it?
","To add the optional repository in RHEL for the python-jinja2 package, execute the command:

sudo subscription-manager repos --enable rhel-6-server-optional-rpms

","328","<linux><salt><yum>","0","0","2","2015-01-21 17:06:02","24978669","0","","","","","2014-07-27 06:55:17",""
"56173051","Is there a way to convert sha256 to md5 hashing","I'm trying to import users credentials from one database schema to another one without users needing to create a new password, So first user table (the one I need to import to the new site) uses sha256+salt(I think) and my new site is using md5+salt (I think) I have access to all files and stuff so I could locate the salt that's being used if I can somehow reverse engineer the sha256 to make it md5?
Is there a way to do this? if so how would I approach it?
an example of the password would be:
old site: e3e922af8a36de975983b075b3bf5336bbb26c8008aa5d9b39aef8d85cb7eb32
new site: $S$Dbj.yBTjHV97QNLHwuoykWxzpNL9bxxFl4b8uoP1u1rJzCyDZb.e
I'll appreciate any input, Thank you!
Update: new site uses base64encode + salt which I know what is, just to be clear I'm not trying to actually be able to see their password in plain text, Can I convert sha256 -> base64encode with some mysql commands or something if I know the salt?
","Unless you're prepared to crack their password, no, you can't convert as SHA2-256 hash to an MD5 one. You need to know the content that generated the hash in the first place.
When migrating from one hashing type to another the best plan is to normalize all your password hashes into a consistent form first and the Modular Crypt Format is the most widely supported.
If you can wrangle your old hashes into that form then you should be able to use them with password_verify. You can also update user passwords as they log-in by re-writing them with password_hash which uses Bcrypt by default.
Over time you can stomp out old SHA2-256 and MD5 passwords and limit your exposure.
","328","<mysql><hash><md5><sha256><salt>","0","0","1","2019-05-16 18:03:11","","7","","6656351","","2019-05-16 17:31:00","2019-05-16 16:36:35",""
"38300242","How to retract a salted password from the Database and auth user?","This is my first trial for implementing a member site with salted passwords which are all stored in the DB (MySQL). Everything works except for the error in the 'login for members' page.
The Error:
Member login page accepts any entry to the membership site and for some reason passes my check for $result === false
This is the code for checking if member exists, please let me know what the problem is:
$servername = 'localhost';
$username = 'root';
$pwd = '';
$dbname = 'lp001';

$connect = new mysqli($servername,$username,$pwd,$dbname);

if ($connect->connect_error){
    die('connection failed, reason: '.$connect->connect_error);
}


$name = mysqli_real_escape_string($connect, $_POST['name']);
$password = mysqli_real_escape_string($connect, $_POST['password']);
$saltQuery = ""SELECT salt FROM users WHERE name = '$name';"";
$result = mysqli_query($connect, $saltQuery);
if ($result === false){
    die(mysqli_error());
}
$row = mysqli_fetch_assoc($result);
$salt = $row['salt'];

$saltedPW = $password.$salt;
$hashedPW = hash('sha256', $saltedPW);
$sqlQuery = ""SELECT * FROM users WHERE name = '$name' AND password = '$hashedPW'"";

if (mysqli_query($connect, $sqlQuery)){
    echo '<h1>Welcome to the member site '.$name.'</h1>';
}else{
    echo 'error adding the query: '.$sql_q.'<br> Reason: '.mysqli_error($connect);
}

","Often developers struggle with the verification of a login password, because they are not sure how to handle the stored password hash. They know that the password should be hashed with an appropriate function like password_hash(), and store them in a varchar(255) field:
// Hash a new password for storing in the database.
// The function automatically generates a cryptographically safe salt.
$hashToStoreInDb = password_hash($password, PASSWORD_DEFAULT);

In the login form, we cannot verify the password directly with SQL, nor can we search for it, because the stored hashes are salted. Instead we...

have to read the password-hash from the database, searching by the user id
and afterwards can check the login password against the found hash with the password_verify() function.

Below you can find some example code, showing how to do password verification with an mysqli connection. The code has no error checking to make it readable:
/**
 * mysqli example for a login with a stored password-hash
 */
$mysqli = new mysqli($dbHost, $dbUser, $dbPassword, $dbName);
$mysqli->set_charset('utf8');

// Find the stored password hash in the db, searching by username
$sql = 'SELECT password FROM users WHERE username = ?';
$stmt = $mysqli->prepare($sql);
$stmt->bind_param('s', $_POST['username']); // it is safe to pass the user input unescaped
$stmt->execute();

// If this user exists, fetch the password-hash and check it
$isPasswordCorrect = false;
$stmt->bind_result($hashFromDb);
if ($stmt->fetch() === true)
{
  // Check whether the entered password matches the stored hash.
  // The salt and the cost factor will be extracted from $hashFromDb.
  $isPasswordCorrect = password_verify($_POST['password'], $hashFromDb);
}

Note that the example uses prepared statements to avoid SQL-injection, escaping is not necessary in this case. An equivalent example to read from a pdo connection could look like this:
/**
 * pdo example for a login with a stored password-hash
 */
$dsn = ""mysql:host=$dbHost;dbname=$dbName;charset=utf8"";
$pdo = new PDO($dsn, $dbUser, $dbPassword);

// Find the stored password hash in the db, searching by username
$sql = 'SELECT password FROM users WHERE username = ?';
$stmt = $pdo->prepare($sql);
$stmt->bindValue(1, $_POST['username'], PDO::PARAM_STR); // it is safe to pass the user input unescaped
$stmt->execute();

// If this user exists, fetch the password hash and check it
$isPasswordCorrect = false;
if (($row = $stmt->fetch(PDO::FETCH_ASSOC)) !== false)
{
  $hashFromDb = $row['password'];

  // Check whether the entered password matches the stored hash.
  // The salt and the cost factor will be extracted from $hashFromDb.
  $isPasswordCorrect = password_verify($_POST['password'], $hashFromDb);
}

","325","<php><mysql><passwords><membership><salt>","1","2","1","2017-01-25 16:53:08","","3","","6568457","","2016-07-11 12:32:28","2016-07-11 06:14:04",""
"11434100","Unable to match hash and salt passwords with database values","I and working on an application where the employee will first register into the system by entering a loginID and password. The password is hashed and salted and stored in a Login table (both values are stored along with the loginID value). However, when I stept thru the code, and I login to the application (after the registration process), the hash and salt values never match.  
How would I go about verifying the user's password when they login to the system?  
Encryption function: 
protected static void EncryptPassword(eWebEmployee oEmp)
{
    // Create Hash & Salt
    sysSecurity oSecurity = new sysSecurity();
    oEmp.EmpPasswordSalt = oSecurity.CreateSalt(5);
    oEmp.EmpPasswordHash = oSecurity.CreatePasswordHash(oEmp.EmpPasswordSalt, oEmp.EmpPassword);        
}  

Database call: 
oDbConn.Open();
DbDataReader oDbDataReader = oDbCommand.ExecuteReader();
while (oDbDataReader.Read())
{
    if (!oDbDataReader.IsDBNull(0) && !oDbDataReader.IsDBNull(1))
    {
        if (oEmp.EmpPasswordSalt == oDbDataReader.GetString(1)
            && oEmp.EmpPasswordHash == oDbDataReader.GetString(0))
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        return false;
    }
}
oDbConnection.Close();
}

","The way I read your code you create a new salt each time. You should get your salt from the database, calculate a hash with the user provided password and than compare the hash to the hash stored in the database. If they are equal the user entered the correct password. Create a new salt only on registration.
","323","<c#><asp.net><hash><salt>","0","2","2","2012-07-11 13:59:50","11434308","2","","722783","","2012-07-11 13:50:56","2012-07-11 13:47:44",""
"11434100","Unable to match hash and salt passwords with database values","I and working on an application where the employee will first register into the system by entering a loginID and password. The password is hashed and salted and stored in a Login table (both values are stored along with the loginID value). However, when I stept thru the code, and I login to the application (after the registration process), the hash and salt values never match.  
How would I go about verifying the user's password when they login to the system?  
Encryption function: 
protected static void EncryptPassword(eWebEmployee oEmp)
{
    // Create Hash & Salt
    sysSecurity oSecurity = new sysSecurity();
    oEmp.EmpPasswordSalt = oSecurity.CreateSalt(5);
    oEmp.EmpPasswordHash = oSecurity.CreatePasswordHash(oEmp.EmpPasswordSalt, oEmp.EmpPassword);        
}  

Database call: 
oDbConn.Open();
DbDataReader oDbDataReader = oDbCommand.ExecuteReader();
while (oDbDataReader.Read())
{
    if (!oDbDataReader.IsDBNull(0) && !oDbDataReader.IsDBNull(1))
    {
        if (oEmp.EmpPasswordSalt == oDbDataReader.GetString(1)
            && oEmp.EmpPasswordHash == oDbDataReader.GetString(0))
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    else
    {
        return false;
    }
}
oDbConnection.Close();
}

","It's a bit hard to understand the purpose of your code but normally you create a hash using a salt value and a password string. The when you login again you do exactly the same using the SAME salt value. Then compare the password hash to the one in your db.
","323","<c#><asp.net><hash><salt>","0","1","2","2012-07-11 13:59:50","11434308","2","","722783","","2012-07-11 13:50:56","2012-07-11 13:47:44",""
"6519320","encrypting password: when it is too much?","I am updating my helper functions library. I am wondering whether it is too much of salt in the password encryption?
Is there any difference between:
mb_substr(sha1($str . AY_HASH), 5, 10) . mb_substr(sha1(AY_HASH . sha1($str . AY_HASH)), 5, 10) . mb_substr(md5($str . AY_HASH), 5, 10)

and simply:
sha1(AY_HASH . sha1($str . AY_HASH))

AY_HASH being the salt. Which should I prefer and if neither is good, what is the best alternative?
","A salt should be generated for each password, not a secret string used on every password. Re-using a salt means that the attacker will only need to create one rainbow table for every password instead of one per password.
I invite you to read a previous answer I wrote on secure hashing. The rules are simple:

Do NOT use a single salt for all passwords. Use a randomly generated salt per password.
Do NOT rehash an unmodified hash (collision issue, see my previous answer, you need infinite input for hashing).
Do NOT attempt to create your own hashing algorithm or mix-matching algorithms into a complex operation.
If stuck with broken/unsecure/fast hash primitives, use key strengthening. This increases the time required for the attacker to compute a rainbow table. Example:


function strong_hash($input, $salt = null, $algo = 'sha512', $rounds = 20000) {
  if($salt === null) {
    $salt = crypto_random_bytes(16);
  } else {
    $salt = pack('H*', substr($salt, 0, 32));
  }

  $hash = hash($algo, $salt . $input);

  for($i = 0; $i < $rounds; $i++) {
    // $input is appended to $hash in order to create
    // infinite input.
    $hash = hash($algo, $hash . $input);
  }

  // Return salt and hash. To verify, simply
  // passed stored hash as second parameter.
  return bin2hex($salt) . $hash;
}

function crypto_random_bytes($count) {
  static $randomState = null;

  $bytes = '';

  if(function_exists('openssl_random_pseudo_bytes') &&
      (strtoupper(substr(PHP_OS, 0, 3)) !== 'WIN')) { // OpenSSL slow on Win
    $bytes = openssl_random_pseudo_bytes($count);
  }

  if($bytes === '' && is_readable('/dev/urandom') &&
     ($hRand = @fopen('/dev/urandom', 'rb')) !== FALSE) {
    $bytes = fread($hRand, $count);
    fclose($hRand);
  }

  if(strlen($bytes) < $count) {
    $bytes = '';

    if($randomState === null) {
      $randomState = microtime();
      if(function_exists('getmypid')) {
        $randomState .= getmypid();
      }
    }

    for($i = 0; $i < $count; $i += 16) {
      $randomState = md5(microtime() . $randomState);

      if (PHP_VERSION >= '5') {
        $bytes .= md5($randomState, true);
      } else {
        $bytes .= pack('H*', md5($randomState));
      }
    }

    $bytes = substr($bytes, 0, $count);
  }

  return $bytes;
}


If anything however, you should use bcrypt, which is future-adaptable. Again, I invite you to my previous answer for a more detailed example.
","321","<php><salt><saltedhash>","0","4","1","2011-06-29 10:55:54","6519373","1","1","","","","2011-06-29 10:39:24",""
"2845548","What does 'salt' refer to in string-to-key (s2k) specifier?","What does 'salt' refer to in string-to-key (s2k) specifier?
It appears to be a random number generator to shake things up, but I would like to know what 'salt' stands for?
For example it is written:
3.6.1.2. Salted S2K

   This includes a ""salt"" value in the S2K specifier -- some arbitrary
   data -- that gets hashed along with the passphrase string, to help
   prevent dictionary attacks.

       Octet 0:        0x01
       Octet 1:        hash algorithm
       Octets 2-9:     8-octet salt value

   Salted S2K is exactly like Simple S2K, except that the input to the
   hash function(s) consists of the 8 octets of salt from the S2K
   specifier, followed by the passphrase.

But salt is not defined, although its meaning seems clear.
","The salt can be any consistent value.
Either a constant, or the user ID. Better if it includes both.
This is used to prevent pre generated rainbow tables from working.
","321","<salt><s2k>","3","3","3","2010-05-16 23:14:49","2845566","0","","","","","2010-05-16 21:27:02",""
"2845548","What does 'salt' refer to in string-to-key (s2k) specifier?","What does 'salt' refer to in string-to-key (s2k) specifier?
It appears to be a random number generator to shake things up, but I would like to know what 'salt' stands for?
For example it is written:
3.6.1.2. Salted S2K

   This includes a ""salt"" value in the S2K specifier -- some arbitrary
   data -- that gets hashed along with the passphrase string, to help
   prevent dictionary attacks.

       Octet 0:        0x01
       Octet 1:        hash algorithm
       Octets 2-9:     8-octet salt value

   Salted S2K is exactly like Simple S2K, except that the input to the
   hash function(s) consists of the 8 octets of salt from the S2K
   specifier, followed by the passphrase.

But salt is not defined, although its meaning seems clear.
","From Wikipedia:

In cryptography, a salt comprises of random bits that are used as one of the inputs to a key derivation function. The other input is usually a password or passphrase. The output of the key derivation function is stored as the encrypted version of the password.

A salt is just some bits that are used to increase the security of the system. They help prevent pre-computed dictionary attacks.
","321","<salt><s2k>","3","3","3","2010-05-16 23:14:49","2845566","0","","","","","2010-05-16 21:27:02",""
"2845548","What does 'salt' refer to in string-to-key (s2k) specifier?","What does 'salt' refer to in string-to-key (s2k) specifier?
It appears to be a random number generator to shake things up, but I would like to know what 'salt' stands for?
For example it is written:
3.6.1.2. Salted S2K

   This includes a ""salt"" value in the S2K specifier -- some arbitrary
   data -- that gets hashed along with the passphrase string, to help
   prevent dictionary attacks.

       Octet 0:        0x01
       Octet 1:        hash algorithm
       Octets 2-9:     8-octet salt value

   Salted S2K is exactly like Simple S2K, except that the input to the
   hash function(s) consists of the 8 octets of salt from the S2K
   specifier, followed by the passphrase.

But salt is not defined, although its meaning seems clear.
","I think you're asking the origin of the term, not the definition.
Time for a round of folk etymology!  (Until someone gives the real answer.)
My guess is that it is an analogy from cooking: the salt is an improving additive.  And a little bit goes a long way.
","321","<salt><s2k>","3","2","3","2010-05-16 23:14:49","2845566","0","","","","","2010-05-16 21:27:02",""
"10923906","Why is it considered secure to store a random salt in a database with the user's password digest?","In the light of the big LinkedIn password leak, I've been thinking about password security. The web development frameworks that I have worked with in the past typically store a master, application-level salt as an app constant, then salt all user passwords with that value (randomly generated on a per-app basis). e.g. in pseudo-code: password = hash(App::salt + userPassword).
I've read a lot of advice that suggests generating a random salt for each user, then storing that in the database along with each user's password. My question is, how does this increase security? If an attacker procures a list of password digests from the database, they are likely also able to get the salt as well, right? Or is there some attack vector that I don't know of that will get password digests without access to the rest of the table?
","Storing random salt for each user defeats Rainbow table attack.
In case of a ""master salt"" it is still possible to precompute such table and use it in the attack. With a per-user salt this becomes impractical.
","320","<security><hash><passwords><salt>","3","5","1","2012-06-06 23:55:09","10923935","0","","","","","2012-06-06 23:51:22",""
"18238982","Using mcrypt to get a password salt. Execution time is fast on local apache server, but very slow on web host","$salt=bin2hex(mcrypt_create_iv(64, MCRYPT_DEV_RANDOM));

This is my current setup for creating a password salt. I noticed that when I uploaded my register page to the web host it took about 1 minute for the page to execute, while on my local apache server it was instant. I narrowed down the problem to this line of code. Are you aware of any execution time problems with this function or is there a better way to get a salt string (128 length)?
","The problem lies with the MCRYPT_DEV_RANDOM parameter, reading from this will block the server until enough entrophy is available. Instead you should use:
$binarySalt = mcrypt_create_iv(64, MCRYPT_DEV_URANDOM);

Reading from URANDOM is the better choice for generating a salt, it is initially feeded from RANDOM but it doesn't block if there is not enough entrophy available. This also prevents, that somebody can drain the servers' entrophy pool by using your function.
Depending on what hash function you use, the bin2hex() function is not optimal, because the alphabet of the resulting string is limited. You should allow all characters that are accepted by the hash function.
Since PHP now has its own api to generate BCrypt hashes, i would recommend to use this function directly password_hash(), it does take care of the creation of a safe salt. There is also a compatibility pack for earlier PHP versions.
","320","<php><security><web-hosting><salt><mcrypt>","0","2","1","2013-08-15 06:42:40","18247571","0","","","","","2013-08-14 18:02:05",""
"8863946","Salting Passwords","I could really use some clarification as to how using a random salt protects against rainbow table attacks.  It just isn't clicking for me.
Suppose there is a dumb application that requires passwords to be exactly five characters or less, and that salts those passswords with a nine-character random salt.  If I have a rainbow table that has precomputed hashes of all character combinations 14 characters or less, how does the random salt provide any additional security?  In this case won't the hashed value of the random salt + password combo. be present in the rainbow table?
I have read multiple places that using a salt would force the cracker to generate an entirely new rainbow table; similarly, a random per-password salt would require a new rainbow table for each salt. Why?
","One of the faster yet to some extent effective ways to see what a password is by creating a hash on all words in a dictionary, for example. People who try to crack passwords know what they're looking for and due to limited computing speeds they narrow their search down to often used passwords. By using a salt these often used words will never truly be used as a password.
","320","<hash><salt>","2","1","2","2012-01-14 17:41:13","8864060","0","","","","","2012-01-14 17:27:25",""
"8863946","Salting Passwords","I could really use some clarification as to how using a random salt protects against rainbow table attacks.  It just isn't clicking for me.
Suppose there is a dumb application that requires passwords to be exactly five characters or less, and that salts those passswords with a nine-character random salt.  If I have a rainbow table that has precomputed hashes of all character combinations 14 characters or less, how does the random salt provide any additional security?  In this case won't the hashed value of the random salt + password combo. be present in the rainbow table?
I have read multiple places that using a salt would force the cracker to generate an entirely new rainbow table; similarly, a random per-password salt would require a new rainbow table for each salt. Why?
","If someone truly has a rainbow table containing the hash of all possible character combinations, then no, salting is of no help.  But even assuming just A-z, a-z, 0-9 as valid characters, that's 6214 = 1.2x1025 14-character passwords.  So that's 170 billion petabytes of storage required.
Given that that's not feasible, the attacker must have a much smaller table, containing only the most likely character strings (e.g. all the words in a dictionary, intermingled with numbers, etc.).  If you add a salt, then this table becomes useless.  If the salt is fixed (and known), then the attacker could recompute a new table.  But if each password has a different salt, then that won't work either.
","320","<hash><salt>","2","3","2","2012-01-14 17:41:13","8864060","0","","","","","2012-01-14 17:27:25",""
"48232449","How can password_verify and doveadm pw -t verify a password without salt","im currently trying to understand hashes and salts. As i understand it, it should not be possible to verify a password, if i only have the password and the generated hash(that was generated with a random salt ofc).
So how can the password_verify function in PHP verify my password, if i dont give it the salt? Is there a hidden variable in the background, that stores it for the php hashing functions?
And if that is the case, how can
doveadm pw -t '{SHA512-CRYPT}$6$myhash...' -p ""qwertz""

verify it too, even if i run it on a complety different computer? Thats a tool, that comes with Dovecot(a MDA).
Here is my PHP code, that creates a random salt with 64 chars, combines it with a password, creates a hash and verifies the hash via password_verify().
I just started working on the whole hash/salt/pepper thing today, so there could be a huge flaw in my whole train of thought.
<?php
$password = ""qwertz"";
$salt = createSalt(64);
$hash = crypt($password, ""$6$$salt"");

if (password_verify($password, $hash)) {
    echo 'Password is valid!';
} else {
    echo 'Invalid password.';
}


function createSalt($length){
    $chars = ""IrhsYyLofUKj4caz0FDBCe2W9NRunTgQvp7qOXmS5GM3EJV6i8tAHdkPbxwl1Z"";
    $salt="""";
    for($i=0; $i < $length; $i++){
        $newchar = substr($chars, rand(0,strlen($chars)-1),1);
        $salt .= $newchar;
    }
    return $salt;
}
?>

","The hash contains several pieces of information. This article explains the format used by Unix but I believe PHP password functions use a similar format (if not the same):

The hash field itself is comprised of three different fields. They are
  separated by '$' and represent:

Some characters which represents the cryptographic hashing mechanism used to generate the actual hash
A randomly generated salt to safeguard against rainbow table attacks
The hash which results from joining the users password with the stored salt and running it through the hashing mechanism specified in
  the first field


It can also include the exact per-algorithm options used to generate the hash, such us the algorithmic cost:
var_dump(password_hash('foo', PASSWORD_BCRYPT, [
    'cost' => 8,
]));


string(60) ""$2y$08$7Z5bTz7xXnom8QsrbZ7uQetMLxOZ7WjuDkUYRIh73Ffa17GV1Tb7q""


Here $2y$08$ means that Bcrypt with cost 8 was used.
If we use the newer Argon2 available in PHP/7.2 there're even more params:
$argon2i$v=19$m=1024,t=2,p=2$YzJBSzV4TUhkMzc3d3laeg$zqU/1IN0/AogfP4cmSJI1vc8lpXRW9/S0sYY2i2jHT0

","319","<php><hash><salt><verify>","3","3","2","2018-01-12 19:53:15","48232694","3","","","user9123946","2018-01-12 19:05:05","2018-01-12 18:58:01",""
"48232449","How can password_verify and doveadm pw -t verify a password without salt","im currently trying to understand hashes and salts. As i understand it, it should not be possible to verify a password, if i only have the password and the generated hash(that was generated with a random salt ofc).
So how can the password_verify function in PHP verify my password, if i dont give it the salt? Is there a hidden variable in the background, that stores it for the php hashing functions?
And if that is the case, how can
doveadm pw -t '{SHA512-CRYPT}$6$myhash...' -p ""qwertz""

verify it too, even if i run it on a complety different computer? Thats a tool, that comes with Dovecot(a MDA).
Here is my PHP code, that creates a random salt with 64 chars, combines it with a password, creates a hash and verifies the hash via password_verify().
I just started working on the whole hash/salt/pepper thing today, so there could be a huge flaw in my whole train of thought.
<?php
$password = ""qwertz"";
$salt = createSalt(64);
$hash = crypt($password, ""$6$$salt"");

if (password_verify($password, $hash)) {
    echo 'Password is valid!';
} else {
    echo 'Invalid password.';
}


function createSalt($length){
    $chars = ""IrhsYyLofUKj4caz0FDBCe2W9NRunTgQvp7qOXmS5GM3EJV6i8tAHdkPbxwl1Z"";
    $salt="""";
    for($i=0; $i < $length; $i++){
        $newchar = substr($chars, rand(0,strlen($chars)-1),1);
        $salt .= $newchar;
    }
    return $salt;
}
?>

","Some backgrounds to the answer from @Álvaro González :
PHP manual suggests using ""password_hash"" instead of ""crypt"" function through ""password_hash"" is a ""crypt()"" wrapper ( Because, it uses a strong hash, generates a strong salt, and applies proper rounds automatically. )
""password_hash()"" returns the algorithm, cost, and salt as part of the returned hash. Therefore, all information that's needed to verify the hash is included in it. This allows the ""password_verify"" function to verify the hash without needing separate storage for the salt or algorithm information. : http://php.net/manual/en/function.password-verify.php
Since, ""password_hash"" is a wrapper for ""crypt"", ""crypt"" also does the same, ie., returns the algorithm, cost, and salt as part of the returned hash. and thus ""password_verify"" can verify the hash.
Now, please check the answer given by @Álvaro González
","319","<php><hash><salt><verify>","3","3","2","2018-01-12 19:53:15","48232694","3","","","user9123946","2018-01-12 19:05:05","2018-01-12 18:58:01",""
"5749825","Salting a password with a ""joined"" datetime","I've seen this information in other articles but most were salting with a known value (like a username). Is salting a password with the joined datetime (or an MD5 of the joined datetime) a secure way of further securing credentials if the joined data is not exposed anywhere in the site?
Thanks in advance!
","Salt with a truly random salt instead. Guessing a date based salt seems a little too easy, especially if someone is aware how long the person has been a member of the site.
You could do something like:
$salt = substr(sha1(uniqid(mt_rand(), true)), 0, 16);

","319","<php><security><salt>","1","8","2","2016-07-10 19:21:55","5749846","0","1","","","","2011-04-21 21:10:14",""
"5749825","Salting a password with a ""joined"" datetime","I've seen this information in other articles but most were salting with a known value (like a username). Is salting a password with the joined datetime (or an MD5 of the joined datetime) a secure way of further securing credentials if the joined data is not exposed anywhere in the site?
Thanks in advance!
","I actually did something like this:
$password = mysqli_real_escape_string($connect, $_POST['password']);
$salt_shaker = bin2hex(mcrypt_create_iv(32, MCRYPT_DEV_URANDOM));
$salted = $password.$salt_shaker;

","319","<php><security><salt>","1","0","2","2016-07-10 19:21:55","5749846","0","1","","","","2011-04-21 21:10:14",""
"48158915","Cause of KeyError: '_errors' when running salt state.highstate","After adding the following to my minion pillar file:
monit:
  services:
    - name: elasticsearch
      pid: /var/run/elasticsearch/elasticsearch.pid
      start_script: /etc/init.d/elasticsearch start
      start_script: /etc/init.d/elasticsearch stop
      port: 9200

I started receiving the following error when I tried to run highstate:
root@salt-master:/home/me# salt 'my-minion-id' state.highstate -t 300
my-minion-id:
  The minion function caused an exception: Traceback (most recent call last):
    File ""/usr/lib/python2.7/dist-packages/salt/minion.py"", line 1482, in _thread_return
      return_data = executor.execute()
    File ""/usr/lib/python2.7/dist-packages/salt/executors/direct_call.py"", line 28, in execute
      return self.func(*self.args, **self.kwargs)
    File ""/usr/lib/python2.7/dist-packages/salt/modules/state.py"", line 848, in highstate
      err += __pillar__['_errors']
    File ""/usr/lib/python2.7/dist-packages/salt/utils/context.py"", line 211, in __getitem__
      return self._dict()[key]
  KeyError: '_errors'

","This error was quite annoying, but it turns out that it was because my pillar file contained a dictionary with duplicate keys:
monit:
  services:
    - name: elasticsearch
      ...
      start_script: /etc/init.d/elasticsearch start
      start_script: /etc/init.d/elasticsearch stop
      ...

which should have instead been:
monit:
  services:
    - name: elasticsearch
      ...
      start_script: /etc/init.d/elasticsearch start
      stop_script: /etc/init.d/elasticsearch stop
      ...

Hope this helps save someone time!
","316","<salt>","1","1","1","2018-01-08 22:26:12","48158916","0","","","","","2018-01-08 22:26:12",""
"40610217","Iteration in password-based Key derivation function 2","so I am currently learning Python and am learning about encryption methods in that language. There I found the function pbkdf2_hmac(hash_name, password, salt, iterations, dklen=None) from the hashlib library.
However, the parameter ""iterations"" does not work as I expect it to. As the following simple code shows, when i try to call the function twice with one iteration, I get a different answer then when I call it once with two iterations. Since hashing functions are deterministic, both methods should yield the same result.
import hashlib
a=hashlib.pbkdf2_hmac(""sha256"",b""hallo"",b""salt"",1)
b=hashlib.pbkdf2_hmac(""sha256"",a,b""salt"",1)
c=hashlib.pbkdf2_hmac(""sha256"",b""hallo"",b""salt"",2)
print(b)
print(c)

Can someone tell me what went wrong?
","The 2nd iterations of PBKDF2 isn't just PBKDF2(the first iteration).
A simplified explanation is:

1 iteration: HMAC(password, salt || 00000001)
2 iterations: HMAC(password, HMAC(password, salt || 00000001))
PBKDF2(PBKDF2): HMAC(HMAC(password, salt || 00000001), salt || 00000001)

Note that the ""2 iterations"" and ""PBKDF2(PBKDF2)"" versions use different HMAC keys for the second computation, which is why they give different results.
As far as ""hashing functions are deterministic"": They are.  If you call them with the same inputs they give the same outputs.  You gave them different inputs, due to misunderstanding how the underlying algorithm works.
","315","<python><python-3.x><salt><pbkdf2><hashlib>","0","1","1","2016-11-16 16:48:12","40637698","0","","7105162","","2016-11-16 08:33:23","2016-11-15 12:47:07",""
"14972290","Is salting a password pointless if someone gains access to the salt key? Off server salting?","Hearing about all the recent hacks at big tech firms, it made me wonder their use of password storage.
I know salting + hashing is accepted as being generally secure but ever example I've seen of salting has the salt key hard-coded into the password script which is generally stored on the same server.
So is it a logical solution to hash the user's password initially, pass that hash to a ""salting server"" or some function stored off-site, then pass back the salted hash?
The way I I'm looking at it is, if an intruder gains access to the server or database containing the stored passwords, they won't immediately have access to the salt key.
","No -- salt remains effective even if known to the attacker.
The idea of salt is that it makes a dictionary attack on a large number of users more difficult. Without salt, the attacker hashes all the words in a dictionary, and sees which match with your users' hashed paswords. With salt, he has to hash each word in the dictionary many times over (once for each possible hash value) to be certain of having one that fits each user.
This multiplication by several thousand (or possibly several million, depending on how large a salt you use) increases the time to hash all the values, and the storage need to store the results -- the point that (you hope) it's impractical.
I should add, however, that in many (most?) cases, a very large salt doesn't really add a lot of security. The problem is that if you use, say, a 24 bit salt (~16 million possible values) but have only, say, a few hundred users, the attacker can collect the salt values you're actually using ahead of time, then do his dictionary attack for only those values instead of the full ~16 million potential values. In short, your 24-bit salt adds only a tiny bit of difficulty beyond what a ~8 bit salt would have provided.
OTOH, for a large server (Google, Facebook, etc.) the story is entirely different -- a large salt becomes quite beneficial.
","312","<hash><passwords><salt>","2","4","5","2013-02-21 05:35:52","","0","","","","","2013-02-20 04:27:00",""
"14972290","Is salting a password pointless if someone gains access to the salt key? Off server salting?","Hearing about all the recent hacks at big tech firms, it made me wonder their use of password storage.
I know salting + hashing is accepted as being generally secure but ever example I've seen of salting has the salt key hard-coded into the password script which is generally stored on the same server.
So is it a logical solution to hash the user's password initially, pass that hash to a ""salting server"" or some function stored off-site, then pass back the salted hash?
The way I I'm looking at it is, if an intruder gains access to the server or database containing the stored passwords, they won't immediately have access to the salt key.
","Salting is useful even if intruder knows the salt.
If passwords are NOT salted, it makes possible to use widely available precomputed rainbow tables to quickly attack your passwords.
If your password table was salted, it makes it very difficult to precompute rainbow tables - it is impractical to create rainbow table for every possible salt.
If you use random salt that is different for every password entry, and put it in plaintext right next to it, it makes very difficult for intruder to attack your passwords, short of brute force attack.
","312","<hash><passwords><salt>","2","3","5","2013-02-21 05:35:52","","0","","","","","2013-02-20 04:27:00",""
"14972290","Is salting a password pointless if someone gains access to the salt key? Off server salting?","Hearing about all the recent hacks at big tech firms, it made me wonder their use of password storage.
I know salting + hashing is accepted as being generally secure but ever example I've seen of salting has the salt key hard-coded into the password script which is generally stored on the same server.
So is it a logical solution to hash the user's password initially, pass that hash to a ""salting server"" or some function stored off-site, then pass back the salted hash?
The way I I'm looking at it is, if an intruder gains access to the server or database containing the stored passwords, they won't immediately have access to the salt key.
","Salting passwords protects passwords against attacks where the attacker has a list of hashed passwords. There are some common hashing algorithms that hackers have tables for that allow them to look up a hash and retrieve the password. For this to work, the hacker has to have broken into the password storage and stolen the hashes.
If the passwords are salted, then the attacker must re-generate their hash tables, using the hashing algorithm and the salt. Depending on the hashing algorithm, this can take some time. To speed things up, hackers also use lists of the most common passwords and dictionary words. The idea of the salt is to slow an attacker down.
The best approach to use a different salt for each password, make it long and random, and it's ok to store the salt next to each password. This really slows an attacker down, because they would have to run their hash table generation for each individual password, for every combination of common passwords and dictionary words. This would make it implausible for an attacker to deduce strong passwords.
I had read a good article on this, which I can't find now. But Googling 'password salt' gives some good results. Have a look at this article.
","312","<hash><passwords><salt>","2","1","5","2013-02-21 05:35:52","","0","","","","","2013-02-20 04:27:00",""
"14972290","Is salting a password pointless if someone gains access to the salt key? Off server salting?","Hearing about all the recent hacks at big tech firms, it made me wonder their use of password storage.
I know salting + hashing is accepted as being generally secure but ever example I've seen of salting has the salt key hard-coded into the password script which is generally stored on the same server.
So is it a logical solution to hash the user's password initially, pass that hash to a ""salting server"" or some function stored off-site, then pass back the salted hash?
The way I I'm looking at it is, if an intruder gains access to the server or database containing the stored passwords, they won't immediately have access to the salt key.
","I would like to point out, that the scheme you described with the hard-coded salt, is actually not a salt, instead it works like a key or a pepper. Salt and pepper solve different problems.
A salt should be generated randomly for every password, and can be stored together with the hashed password in the database. It can be stored plain text, and fullfills it's purpose even when known to the attacker.
A pepper is a secret key, that will be used for all passwords. It will not be stored in the database, instead it should be deposited in a safe place. If the pepper is known to the attacker, it becomes useless.
I tried to explain the differences in a small tutorial, maybe you want to have a look there.
","312","<hash><passwords><salt>","2","0","5","2013-02-21 05:35:52","","0","","","","","2013-02-20 04:27:00",""
"14972290","Is salting a password pointless if someone gains access to the salt key? Off server salting?","Hearing about all the recent hacks at big tech firms, it made me wonder their use of password storage.
I know salting + hashing is accepted as being generally secure but ever example I've seen of salting has the salt key hard-coded into the password script which is generally stored on the same server.
So is it a logical solution to hash the user's password initially, pass that hash to a ""salting server"" or some function stored off-site, then pass back the salted hash?
The way I I'm looking at it is, if an intruder gains access to the server or database containing the stored passwords, they won't immediately have access to the salt key.
","
Makes sense. Seems like more effort than worth (unless its a site of significant worth or importance) for an attacker.

all sites small or large, important or not, should take password hashing as high importance 
as long as each hash has its own large random salt then yes it does become mostly impracticable, if each hash uses an static salt you can use Rainbow tables to weed out the users hashs who used password1 for example
using an good hashing algorithm is also important as well (using MD5 or SHA1 is nearly like using plaintext with the mutli gpu setups these days) use scrypt if not then bcrypt or if you have to use PBKDF2 then (you need the rounds to be very high)
","312","<hash><passwords><salt>","2","0","5","2013-02-21 05:35:52","","0","","","","","2013-02-20 04:27:00",""
"18136075","PHP BCrypt output correct?","New to stackoverflow :)
I just now started to use a bcrypt function I've found on some site about security. I've never really worried about the output from this until our technician at work said this to me:

The salt seems to always be in the front of every password.

Is this correct or have I made a major boo boo? :)
The code I use is this:
<?php
function bcrypt($password, $salt, $rounds=12) {
    // Check if bcrypt is available on the server
    if (CRYPT_BLOWFISH != 1) {
        throw new Exception(""bcrypt stöds inte. Se http://php.net/crypt"");
        return;
    }

    // Check that rounds are within the allowed range
    if ($rounds < 4)
        $rounds = 4;
    else if ($rounds > 12) 
        $rounds = 12;

    // Create a prefix to tell the crypt that we want to use bcrypt
    $salt_prefix = sprintf('$2a$%02d$', $rounds);

    // Check if the salt contains invalid characters:
    if (!preg_match('#^[A-Za-z0-9./]{22}$#', $salt)) {

        // The salt is not bcrypt-safe. Redo to 22 characters (A-Za-z0-9. /)
        $new_salt = base64_encode($salt);

        if (strlen($new_salt) < 22)

            $new_salt .= base64_encode(md5($salt));
            $salt = substr($new_salt, 0, 22);
            $salt = str_replace(array('+', '-'), '.', $salt);    
            $salt = str_replace(array('=', '_'), '/', $salt);
    }

    // hash the password with bcrypt
    return crypt($password, $salt_prefix.$salt);
 }

 // Examples :
 echo ""Bcrypt: "". bcrypt('abc', 'QyrjMQfjgGIb4ymtdKQXIr', 12);
?>

This will output:
Bcrypt: $2a$12$QyrjMQfjgGIb4ymtdKQXIewDBqhA3eNppF8qOrMhidnEbzNvmHqhy

As you can see the salt is inside the password now ""bold text"":
Salt = QyrjMQfjgGIb4ymtdKQXIr
pass = $2a$12$QyrjMQfjgGIb4ymtdKQXI
ewDBqhA3eNppF8qOrMhidnEbzNvmHqhy
This seem to be the same every time regardless of salt. Salt is always included except the last character?
","You can test an existing bcrypt hash with lots of tools online, like this bcrypt generator
","312","<php><security><salt><bcrypt><password-hash>","0","0","1","2016-01-29 09:43:45","","8","","445517","","2014-01-30 09:49:31","2013-08-08 21:04:12",""
"37295836","Spring Security custom UserDetails : salt issue","I'm trying to make an authentication form in my web app. With a custom UserDetailsService + UserDetails.
It almost works. It works when i'm trying to log with an user and a password which is hard-coded in my databases. But it doesn't work when I'm trying to log with an user who have a crypted (Bcrypt) password...
I identified the part of code which is an issue (it's a class provide by Spring) :
public class DaoAuthenticationProvider extends AbstractUserDetailsAuthenticationProvider {

    // [...]

    @SuppressWarnings(""deprecation"")
    protected void additionalAuthenticationChecks(UserDetails userDetails,
            UsernamePasswordAuthenticationToken authentication)
            throws AuthenticationException {
        Object salt = null;

        /* ISSUE : saltSource is null */
        if (this.saltSource != null) {
            /* ISSUE : Moreover, my class UserDetailsImpl which implement UserDetails has no salt attribute */
            salt = this.saltSource.getSalt(userDetails);
        }

        if (authentication.getCredentials() == null) {
            logger.debug(""Authentication failed: no credentials provided"");

            throw new BadCredentialsException(messages.getMessage(
                    ""AbstractUserDetailsAuthenticationProvider.badCredentials"",
                    ""Bad credentials""));
        }

        String presentedPassword = authentication.getCredentials().toString();

        /* ISSUE : Has salt is null, authentication with crypted password doesn't work */
        if (!passwordEncoder.isPasswordValid(userDetails.getPassword(),
                presentedPassword, salt)) {
            logger.debug(""Authentication failed: password does not match stored value"");

            throw new BadCredentialsException(messages.getMessage(
                    ""AbstractUserDetailsAuthenticationProvider.badCredentials"",
                    ""Bad credentials""));
        }
    }

    // [...]
}

There is no salt in this code. So, when salt is null, it compare the crypted databases password with a hard-coded browser password :/.
Do you have an idea ? Thx.
","Salt is some random data added to the password to generate a unique hash for better security purposes (What is Salt).
if (!passwordEncoder.isPasswordValid(userDetails.getPassword(),
            presentedPassword, salt))

isPasswordValid method validates a specified ""raw"" (presentedPassword) password against an encoded password (userDetails.getPassword()).
The encoded password should have previously been generated by encodePassword(String, Object). This method will encode the rawPass (using the optional salt), and then compared it with the presented encPass.
This means that the salt is optional, so it can be null.
In your case if salt is null should not cause any problem, if you are not using salt while generating the encoded password. Just make sure that, while generating and saving the password you are using Spring security Password encoding api's (PasswordEncoder, BCryptPasswordEncoder etc..) and userDetails.getPassword() returns the encrypted password.
Also note if you are implementing the UserDetails interface in any of your class the auto generated getPassword method in eclipse returns null.
","311","<java><spring><spring-security><salt>","0","0","1","2018-07-11 04:18:29","","2","","","","","2016-05-18 09:42:56",""
"28411470","Why use a salt instead of AES when storing passwords","Wouldn't AES be more secure at securing passwords when storing them in a database, compared to using salts. 
Note: Not concerned with performance, only security. Which one would be more secure.
Also, wouldn't it be better to then store the key for encryption, any encryption in another database server, encrypted obviously.
","No. If you encrypt the password with a key, and an attacker steals the table of encrypted passwords and the key, he can discover all of your users' passwords and use them to log into your system (and all of the other systems where the user has selected the same password). This isn't secure.
If you properly ""hash"" the passwords, there is no key or shortcut that will allow the attacker to recover the password from the authentication table. That hashing function cannot be inverted like a cipher.
","306","<mysql><encryption><hash><password-protection><salt>","-1","5","1","2015-02-11 01:01:12","","8","","2127209","","2015-02-09 22:54:35","2015-02-09 13:59:05","2015-02-15 10:13:51"
"16598322","JBoss salted DatabaseServerLoginModule on AS 7.1","I'm trying to set up a secure login for my application.
To achieve this I wanted to salt my hash and maybe use an iteration count.
The official forums don't seem to answer that so I was wondering how to get this to work if I want to stick to my security strategy.  Alternatively I could just leave salting, but I don't think this would be a good idea.
So my question is:
Are there any workarounds to achieve such secure storage here or what is the best practice to handle logins on JBoss AS nowadays?  
","Almost a year passed and when reviewing this code section I finally found a (maybe not decent, but working) solution:
Don't let the DatabaseLoginModule hash your passwords, hash and salt them yourself.
In my application I use the login mechanisms provided by Servlet 3.0:
HttpServletRequest.login(userLogin, pass);
The crucial point I missed is that you can hash and salt the plain password manually just before the login()-call. The LoginModule will then match the hashes with those saved in the database.
Maybe that's not the solution I originally wanted, but it doesn't add any unnecessary complexity.
","305","<java><authentication><hash><jboss7.x><salt>","0","0","1","2014-04-22 18:22:17","23227343","0","2","","","","2013-05-16 22:09:41",""
"31463848","From C# encryption key derivation to Ruby (PBKDF2)","I'm trying to rewrite the following key generation method written in C# into its Ruby equivalent:
        private static byte[] CreateKey(string password, int length)
        {
            var salt = new byte[] { 0x01, 0x02, 0x23, 0x34, 0x37, 0x48, 0x24, 0x63, 0x99, 0x04 };

            const int Iterations = 1000;
            using (var rfc2898DeriveBytes = new Rfc2898DeriveBytes(password, salt, Iterations))
                return rfc2898DeriveBytes.GetBytes(length);
        }

I'm using PBKDF2 implementation. And here's my Ruby code:
def create_key password, length
    salt_a = [0x01, 0x02, 0x23, 0x34, 0x37, 0x48, 0x24, 0x63, 0x99, 0x04]
    salt = salt_a.pack('C*') # Think here there is something to change
    iterations = 1000
    derived_b = PBKDF2.new do |p| 
      p.password = password
      p.salt = salt
      p.iterations = iterations
      p.key_length = length
      p.hash_function = OpenSSL::Digest::SHA1
    end
    derived_b.bin_string # and here too
end

In order to work those two methods should return the same output. The problem is that I can't figure out how to do this. PBKDF2 implementations takes salt as String, but C# takes a byte array... I think the problem is there.
","If you can use a recent version of OpenSSL, then this worked for me:
SALT = [ 0x94, 0x67, 0x16, 0xe6, 0x20, 0xd4, 0x56, 0x46, 0x67, 0x56, 0x46, 0x56, 0x23 ].pack(""c*"")
PBKDF2_ITERATIONS = 1000

def create_key(password, length)
  OpenSSL::PKCS5::pbkdf2_hmac_sha1(password, SALT, PBKDF2_ITERATIONS, length)
end

","305","<c#><ruby><encryption><salt><rfc2898>","1","0","1","2016-06-07 14:11:25","","1","","15754","","2015-07-20 14:21:01","2015-07-16 20:23:12",""
"56728514","get host name for jinja template in salt","not sure where to start but hre is what i have and what i'm trying to do. 
what i have.
i have three Minions as part of three tier application named employee.
there is a three servers called web01 as web server, app01 as app server and a db01 as database server.
each server has a grains value on it,
here is each server and the grains values and keys of these values.
web01.
grains value =
appname:employee and
tier:web

app01.
grains value =
appname:employee and
tier:app

db01.
grains value =
appname:employee and 
tier:db

what i'm trying to do. 
i'm trying to push configurations files on web01 and app01, these config files has a variables (hostname of another tier minion).. the config on the web01 should have the name app01.. and the config on app01 should have the name db01.. the name of these severs should be grabbed based on the grains value. 
for example. 
the host name of the app server, its the server that has grains value equal to ""appname:employee and tier:app""
not sure how to do it.
too new to salt and i dont have much experiance with it nor jinja template.
any help will be really appreciated. 
Thank you
","So if I understand you right, you want the config file to be on web1 and app1 containing all hostnames.
If so, you can use a pillar file where you state these attributes. 
/srv/pillar/employee.sls:
employee:
  hostname_of_another_tier_minion: hostname.example.com

You can then reference this in your jinja template /srv/formulas/employee/templates/config.conf.jinja:
----------
hostname_of_another_tier_minion {{ pillar['employee']['hostname_of_another_tier_minion'] }}

Just to be complete you reference your template in /srv/employee/web.sls and /srv/employee/app.sls:
web-config-file:
  file.managed:
    - user: root
    - group: root
    - template: jinja
    - mode: '0644'
    - names:
      - /etc/<web-conf-dir>/web.conf:
        - source: salt://employee/templates/config.conf.jinja

Let me know if you have any further questions.
UPDATE:
If the hostnames are unknown as you said, you can first get them with grains and then put them in the jinja template that gets rendered into a config on every server.
","304","<jinja2><salt-stack><salt>","0","0","1","2019-07-15 12:25:12","","0","","11501222","","2019-07-15 12:25:12","2019-06-23 23:52:23",""
"34285718","Can you get the salt knowing plaintext and hash?","Can you get the SALT from a password, knowing the hash and plaintext?
For Example:
Hash: fc203f1c0a0c0636527086f071d83b1e
Plaintext: admin
","Yes, as long as you know or can guess the method used to generate the hash. Simply bruteforce the salt  value instead of the password value. You may have to write a custom brute forcer. If you're lucky you can adapt a flexible one such as this: https://github.com/wireghoul/presentations/tree/master/BHAsia2014/cuda
","303","<database><security><hash><passwords><salt>","-1","1","1","2015-12-15 12:12:21","","2","","","","","2015-12-15 09:42:40",""
"11623458","PHP Login with salt+encryption","The problem is that I am simply trying to login with this script and the only times I can make it work is if I take out the lines retrieving the salt from the database based off of the username provided and put in the hashed password manually. The weird part about this whole problem is this is the exact way I do it on another site I made and it works flawlessly. What happens is that it blanks the page and doesnt even show an error. If anyone has a solution I would be very happy to hear them or suggestions about a better way to do this.
<?php
include 'includes/calendar-functions.php';
//user login
if(isset($_POST['membership_id']) && isset($_POST['user_password']) && $_POST['membership_id'] != """" && $_POST['user_password'] != """" ) {
    //Setting up VARS
    $newUsername = mysql_real_escape_string($_POST['membership_id']);
    $newPassword = mysql_real_escape_string($_POST['user_password']);
    $saltQuery = 'SELECT `salt` FROM `vintage_user` WHERE membership_id = '.$newUsername;
    $resultSalt = mysql_query($saltQuery, $connect) or die( mysql_error() );

    while ($row = mysql_fetch_assoc($resultSalt)) {
        $salt = $row[""salt""];
    }

    $saltedPW =  $newPassword . $salt;
    $hashedPW = hash('sha256', $saltedPW);

    // QUERYING DB FOR USERNAME AND PASSWORD
    $query = 'SELECT *
        FROM vintage_user
        WHERE membership_id = ""'.$newUsername.'""
        AND user_password = ""'.$hashedPW.'""
        AND approved = ""1""
        LIMIT 1';
    $result = mysql_query( $query, $mysql ) or die( mysql_error() );

    if( mysql_num_rows( $result ) == 1 ) {
        list( $_SESSION['user_first'],
            $_SESSION['user_last'],
            $_SESSION['user_id'],
            $_SESSION['user_email'],
            $_SESSION['membership_id'] ) = mysql_fetch_row( $result );
        header( 'location:'.'calendar.php?m='.$month.'d=1&y='.$year );
        die();
    }
    else {
        echo '<p class=""incorrect"">Incorrect login and/or password</p>';
    }
}

","If magic_quotes_gpc is enabled, first apply stripslashes() to the data. Using this function on data which has already been escaped will escape the data twice.
","302","<php><encryption><hash><salt>","1","1","2","2016-12-01 17:27:59","11623937","5","","718763","","2012-07-24 03:37:55","2012-07-24 02:54:30",""
"11623458","PHP Login with salt+encryption","The problem is that I am simply trying to login with this script and the only times I can make it work is if I take out the lines retrieving the salt from the database based off of the username provided and put in the hashed password manually. The weird part about this whole problem is this is the exact way I do it on another site I made and it works flawlessly. What happens is that it blanks the page and doesnt even show an error. If anyone has a solution I would be very happy to hear them or suggestions about a better way to do this.
<?php
include 'includes/calendar-functions.php';
//user login
if(isset($_POST['membership_id']) && isset($_POST['user_password']) && $_POST['membership_id'] != """" && $_POST['user_password'] != """" ) {
    //Setting up VARS
    $newUsername = mysql_real_escape_string($_POST['membership_id']);
    $newPassword = mysql_real_escape_string($_POST['user_password']);
    $saltQuery = 'SELECT `salt` FROM `vintage_user` WHERE membership_id = '.$newUsername;
    $resultSalt = mysql_query($saltQuery, $connect) or die( mysql_error() );

    while ($row = mysql_fetch_assoc($resultSalt)) {
        $salt = $row[""salt""];
    }

    $saltedPW =  $newPassword . $salt;
    $hashedPW = hash('sha256', $saltedPW);

    // QUERYING DB FOR USERNAME AND PASSWORD
    $query = 'SELECT *
        FROM vintage_user
        WHERE membership_id = ""'.$newUsername.'""
        AND user_password = ""'.$hashedPW.'""
        AND approved = ""1""
        LIMIT 1';
    $result = mysql_query( $query, $mysql ) or die( mysql_error() );

    if( mysql_num_rows( $result ) == 1 ) {
        list( $_SESSION['user_first'],
            $_SESSION['user_last'],
            $_SESSION['user_id'],
            $_SESSION['user_email'],
            $_SESSION['membership_id'] ) = mysql_fetch_row( $result );
        header( 'location:'.'calendar.php?m='.$month.'d=1&y='.$year );
        die();
    }
    else {
        echo '<p class=""incorrect"">Incorrect login and/or password</p>';
    }
}

","Try the blowfish encryption method, it worked for me.
functions.php
<?php
 include_once(""Blowfish.php"");
   function Eencrypt($cipher, $plaintext){
      $ciphertext = """";
      $paddedtext = maxi_pad($plaintext);
      $strlen = strlen($paddedtext);
      for($x=0; $x< $strlen; $x+=8){
         $piece = substr($paddedtext,$x,8);
         $cipher_piece = $cipher->encrypt($piece);
         $encoded = base64_encode($cipher_piece); 
         $ciphertext = $ciphertext.$encoded;       
      }
   return $ciphertext;  
   }

   function Edecrypt($cipher,$ciphertext){
      $plaintext = """";
      $chunks = explode(""="",$ciphertext);
      $ending_value = count($chunks) ;
      for($counter=0 ; $counter < ($ending_value-1) ; $counter++)
      {
            $chunk = $chunks[$counter].""="";
            $decoded = base64_decode($chunk);
            $piece = $cipher->decrypt($decoded);
            $plaintext = $plaintext.$piece;
      }
      return $plaintext;
   }

   function maxi_pad($plaintext){
      $str_len = count($plaintext);
      //plain text must be div by 8
      $pad_len = $str_len % 8;
      for($x=0; $x<$pad_len; $x++){
         $plaintext = $plaintext."" "";
      }

      $str_len = count($plaintext);
      if($str_len % 8){
         print ""padding function is not working\n"";
      }else{
         return $plaintext;
      }
      return (-1);
   }
?>

blowfish.php
<?php
/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */

/**
 * Crypt_Blowfish allows for encryption and decryption on the fly using
 * the Blowfish algorithm. Crypt_Blowfish does not require the mcrypt
 * PHP extension, it uses only PHP.
 * Crypt_Blowfish support encryption/decryption with or without a secret key.
 *
 *
 * PHP versions 4 and 5
 *
 * LICENSE: This source file is subject to version 3.0 of the PHP license
 * that is available through the world-wide-web at the following URI:
 * http://www.php.net/license/3_0.txt.  If you did not receive a copy of
 * the PHP License and are unable to obtain it through the web, please
 * send a note to license@php.net so we can mail you a copy immediately.
 *
 * @category   Encryption
 * @package    Crypt_Blowfish
 * @author     Matthew Fonda <mfonda@php.net>
 * @copyright  2005 Matthew Fonda
 * @license    http://www.php.net/license/3_0.txt  PHP License 3.0
 * @version    CVS: $Id: Blowfish.php,v 1.81 2005/05/30 18:40:36 mfonda Exp $
 * @link       http://pear.php.net/package/Crypt_Blowfish
 */


require_once 'PEAR.php';


/**
 *
 * Example usage:
 * $bf = new Crypt_Blowfish('some secret key!');
 * $encrypted = $bf->encrypt('this is some example plain text');
 * $plaintext = $bf->decrypt($encrypted);
 * echo ""plain text: $plaintext"";
 *
 *
 * @category   Encryption
 * @package    Crypt_Blowfish
 * @author     Matthew Fonda <mfonda@php.net>
 * @copyright  2005 Matthew Fonda
 * @license    http://www.php.net/license/3_0.txt  PHP License 3.0
 * @link       http://pear.php.net/package/Crypt_Blowfish
 * @version    @package_version@
 * @access     public
 */
class Crypt_Blowfish
{
    /**
     * P-Array contains 18 32-bit subkeys
     *
     * @var array
     * @access private
     */
    var $_P = array();


    /**
     * Array of four S-Blocks each containing 256 32-bit entries
     *
     * @var array
     * @access private
     */
    var $_S = array();

    /**
     * Mcrypt td resource
     *
     * @var resource
     * @access private
     */
    var $_td = null;

    /**
     * Initialization vector
     *
     * @var string
     * @access private
     */
    var $_iv = null;


    /**
     * Crypt_Blowfish Constructor
     * Initializes the Crypt_Blowfish object, and gives a sets
     * the secret key
     *
     * @param string $key
     * @access public
     */
    function Crypt_Blowfish($key)
    {
        if (extension_loaded('mcrypt')) {
            $this->_td = mcrypt_module_open(MCRYPT_BLOWFISH, '', 'ecb', '');
            $this->_iv = mcrypt_create_iv(8, MCRYPT_RAND);
        }
        $this->setKey($key);
    }

    /**
     * Deprecated isReady method
     *
     * @return bool
     * @access public
     * @deprecated
     */
    function isReady()
    {
        return true;
    }

    /**
     * Deprecated init method - init is now a private
     * method and has been replaced with _init
     *
     * @return bool
     * @access public
     * @deprecated
     * @see Crypt_Blowfish::_init()
     */
    function init()
    {
        $this->_init();
    }

    /**
     * Initializes the Crypt_Blowfish object
     *
     * @access private
     */
    function _init()
    {
        $defaults = new Crypt_Blowfish_DefaultKey();
        $this->_P = $defaults->P;
        $this->_S = $defaults->S;
    }

    /**
     * Enciphers a single 64 bit block
     *
     * @param int &$Xl
     * @param int &$Xr
     * @access private
     */
    function _encipher(&$Xl, &$Xr)
    {
        for ($i = 0; $i < 16; $i++) {
            $temp = $Xl ^ $this->_P[$i];
            $Xl = ((($this->_S[0][($temp>>24) & 255] +
                            $this->_S[1][($temp>>16) & 255]) ^
                            $this->_S[2][($temp>>8) & 255]) +
                            $this->_S[3][$temp & 255]) ^ $Xr;
            $Xr = $temp;
        }
        $Xr = $Xl ^ $this->_P[16];
        $Xl = $temp ^ $this->_P[17];
    }


    /**
     * Deciphers a single 64 bit block
     *
     * @param int &$Xl
     * @param int &$Xr
     * @access private
     */
    function _decipher(&$Xl, &$Xr)
    {
        for ($i = 17; $i > 1; $i--) {
            $temp = $Xl ^ $this->_P[$i];
            $Xl = ((($this->_S[0][($temp>>24) & 255] +
                            $this->_S[1][($temp>>16) & 255]) ^
                            $this->_S[2][($temp>>8) & 255]) +
                            $this->_S[3][$temp & 255]) ^ $Xr;
            $Xr = $temp;
        }
        $Xr = $Xl ^ $this->_P[1];
        $Xl = $temp ^ $this->_P[0];
    }


    /**
     * Encrypts a string
     *
     * @param string $plainText
     * @return string Returns cipher text on success, PEAR_Error on failure
     * @access public
     */
    function encrypt($plainText)
    {
        if (!is_string($plainText)) {
            PEAR::raiseError('Plain text must be a string', 0, PEAR_ERROR_DIE);
        }

        if (extension_loaded('mcrypt')) {
            return mcrypt_generic($this->_td, $plainText);
        }

        $cipherText = '';
        $len = strlen($plainText);
        $plainText .= str_repeat(chr(0),(8 - ($len%8))%8);
        for ($i = 0; $i < $len; $i += 8) {
            list(,$Xl,$Xr) = unpack(""N2"",substr($plainText,$i,8));
            $this->_encipher($Xl, $Xr);
            $cipherText .= pack(""N2"", $Xl, $Xr);
        }
        return $cipherText;
    }


    /**
     * Decrypts an encrypted string
     *
     * @param string $cipherText
     * @return string Returns plain text on success, PEAR_Error on failure
     * @access public
     */
    function decrypt($cipherText)
    {

        if (!is_string($cipherText)) {
            PEAR::raiseError('Chiper text must be a string', 1, PEAR_ERROR_DIE);
        }

        if (extension_loaded('mcrypt')) {
            return mdecrypt_generic($this->_td, $cipherText);
        }

        $plainText = '';
        $len = strlen($cipherText);
        $cipherText .= str_repeat(chr(0),(8 - ($len%8))%8);
        for ($i = 0; $i < $len; $i += 8) {
            list(,$Xl,$Xr) = unpack(""N2"",substr($cipherText,$i,8));
            $this->_decipher($Xl, $Xr);
            $plainText .= pack(""N2"", $Xl, $Xr);
        }
        return $plainText;
    }


    /**
     * Sets the secret key
     * The key must be non-zero, and less than or equal to
     * 56 characters in length.
     *
     * @param string $key
     * @return bool  Returns true on success, PEAR_Error on failure
     * @access public
     */
    function setKey($key)
    {
        if (!is_string($key)) {
            PEAR::raiseError('Key must be a string', 2, PEAR_ERROR_DIE);
        }

        $len = strlen($key);

        if ($len > 56 || $len == 0) {
            PEAR::raiseError('Key must be less than 56 characters and non-zero. Supplied key length: ' . $len, 3, PEAR_ERROR_DIE);
        }

        if (extension_loaded('mcrypt')) {
            mcrypt_generic_init($this->_td, $key, $this->_iv);
            return true;
        }

        require_once 'Blowfish/DefaultKey.php';
        $this->_init();

        $k = 0;
        $data = 0;
        $datal = 0;
        $datar = 0;

        for ($i = 0; $i < 18; $i++) {
            $data = 0;
            for ($j = 4; $j > 0; $j--) {
                    $data = $data << 8 | ord($key{$k});
                    $k = ($k+1) % $len;
            }
            $this->_P[$i] ^= $data;
        }

        for ($i = 0; $i <= 16; $i += 2) {
            $this->_encipher($datal, $datar);
            $this->_P[$i] = $datal;
            $this->_P[$i+1] = $datar;
        }
        for ($i = 0; $i < 256; $i += 2) {
            $this->_encipher($datal, $datar);
            $this->_S[0][$i] = $datal;
            $this->_S[0][$i+1] = $datar;
        }
        for ($i = 0; $i < 256; $i += 2) {
            $this->_encipher($datal, $datar);
            $this->_S[1][$i] = $datal;
            $this->_S[1][$i+1] = $datar;
        }
        for ($i = 0; $i < 256; $i += 2) {
            $this->_encipher($datal, $datar);
            $this->_S[2][$i] = $datal;
            $this->_S[2][$i+1] = $datar;
        }
        for ($i = 0; $i < 256; $i += 2) {
            $this->_encipher($datal, $datar);
            $this->_S[3][$i] = $datal;
            $this->_S[3][$i+1] = $datar;
        }

        return true;
    }

}

?>

example.php
<?php

   include_once('functions.php');
   include_once('blowfish.php');


   //NOTE: This is the key or password for encrypting your files.
   // THIS MUST BE 8 CHARACTERS
   $key = ""12345678"";

   //This is the text to be encrypted
   $plaintext = ""stringtoencrypt"";

   //This is a blowfish cipher object
   $cipher = new Crypt_Blowfish($key); 

   //This is the encrypted text
   $ciphertext = Eencrypt($cipher,$plaintext);
   $ciphertext = $plaintext;

   print $ciphertext.""</br>""; 

   //If the var to decrypt is sent by $_GET
   $key = """";
   $url = explode("" "",$_GET['key']);      
   for ($i=0; $i < count($url)-1; $i++) { 
      @$key .= $url[$i].""+"";
   }
   $key = $key.array_pop($url);

   //This is the Decrypted text.
   $desencriptado = Edecrypt($cipher, $key);  

   print ""desencriptado es: "".$desencriptado;    
?>

","302","<php><encryption><hash><salt>","1","0","2","2016-12-01 17:27:59","11623937","5","","718763","","2012-07-24 03:37:55","2012-07-24 02:54:30",""
"7636629","Hashing gone wrong","I'm using the same function to hash values for comparison during login as I am to hash the passwords when users register:
Public Shared Function Compute(ByVal text As String, ByVal algorithm As String, Optional ByVal salt() As Byte = Nothing) As String
    If salt Is Nothing Then
        Dim saltSize As Integer = 8
        salt = New Byte(saltSize - 1) {}

        Dim rng As New RNGCryptoServiceProvider
        rng.GetNonZeroBytes(salt)
    End If

    Dim textBytes As Byte() = Encoding.UTF8.GetBytes(text)
    Dim saltedTextBytes() As Byte = New Byte(textBytes.Length + salt.Length - 1) {}
    For i As Integer = 0 To textBytes.Length - 1
        saltedTextBytes(i) = textBytes(i)
    Next i

    For i As Integer = 0 To salt.Length - 1
        saltedTextBytes(textBytes.Length + i) = salt(i)
    Next i

    Dim hash As HashAlgorithm
    If algorithm Is Nothing Then
        algorithm = """"
    End If

    Select Case algorithm.ToUpper
        Case ""SHA1"" : hash = New SHA1Managed
        Case ""SHA256"" : hash = New SHA256Managed
        Case ""SHA384"" : hash = New SHA384Managed
        Case ""SHA512"" : hash = New SHA512Managed
        Case Else : hash = New MD5CryptoServiceProvider
    End Select

    Dim hashBytes As Byte() = hash.ComputeHash(saltedTextBytes)
    Dim saltedHash() As Byte = New Byte(hashBytes.Length + salt.Length - 1) {}
    For i As Integer = 0 To hashBytes.Length - 1
        saltedHash(i) = hashBytes(i)
    Next i

    For i As Integer = 0 To salt.Length - 1
        saltedHash(hashBytes.Length + i) = salt(i)
    Next i

    Dim hashValue As String = Convert.ToBase64String(saltedHash)

    Return Left(hashValue, 36)
End Function

My problem is that when I try to log in on an account whose password was hashed by this function, the hashed values don't match up. I think I'm skipping a step or something.
Here's the code for user account creation:
        ' The email address needs to be valid
        Dim pattern As String = ""^(?("""")("""".+?""""@)|(([0-9a-zA-Z]((\.(?!\.))|[-!#\$%&'\*\+/=\?\^`\{\}\|~\w])*)(?<=[0-9a-zA-Z])@))(?(\[)(\[(\d{1,3}\.){3}\d{1,3}\])|(([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,6}))$""
        Dim match As Match = Regex.Match(txtEmail.Text, pattern)
        If match.Success Then
            'Hash the user's password before entering it into the database.
            Dim pass As String = Crypt.Compute(txtPass.Text, ""SHA512"", Nothing)

            ' Enter the information from the form into the database.
            Dim sql As String = ""INSERT INTO Users(Username, Password, EmailAddress) "" & _
                ""VALUES(@User, @Pass, @Email)""
            Dim cmd As New SqlCommand(sql, conn)
            cmd.Parameters.AddWithValue(""@User"", txtName.Text)
            cmd.Parameters.AddWithValue(""@Pass"", pass)
            cmd.Parameters.AddWithValue(""@Email"", txtEmail.Text)

            conn.Open()
            cmd.ExecuteNonQuery()
            conn.Close()
        Else
            lblError.Text = ""Invalid email address. Please correct.""
            lblError.ForeColor = Drawing.Color.Red
        End If

There are more checks that aren't included here that aren't relevant to my problem.
Here's my user login:
            Dim pass As String = Crypt.Compute(txtPass.Text, ""SHA512"", Nothing)

            Dim UserData As New DataSet
            Dim UserAdapter As New SqlDataAdapter
            UserAdapter.SelectCommand = New SqlCommand(""SELECT * FROM Users "" & _
                                                       ""WHERE Username = @User AND Password = @Pass"", conn)
            UserAdapter.SelectCommand.Parameters.AddWithValue(""@User"", txtUser.Text)
            UserAdapter.SelectCommand.Parameters.AddWithValue(""@Pass"", pass)
            UserAdapter.Fill(UserData)

            If UserData.Tables(0).Rows.Count <> 1 Then
                lblError.Text = ""Invalid username or password.""
                lblError.ForeColor = Drawing.Color.Red
                Session(""LoginAttempt"") = CInt(Session(""LoginAttempt"")) + 1
            Else
                Session(""LoggedIn"") = True
                Response.Redirect(""Home.aspx"")
            End If

As far as I can see, there is no difference in the hashing I've done here.
Does anyone have any ideas?
","
When you creating an account by inserting into the table, you are using txtName.Text for the username, but when checking the credentials you are using txtUser.Text.
Why are you using a random salt?  Doesn't the salt have to be the same for every encryption?  I've pasted your code into a new project, and when I run the Compute method twice in a row for the same password, I get two different results... obviously that won't work.  Try passing in a salt value instead of Nothing, and use the same salt for creating accounts and comparing login.  Here's some sample code that works:
Dim thePass As String = ""MyPassword""
Dim theSalt As String = ""salt""

Dim pass As String = Compute(thePass, ""SHA512"", Encoding.UTF8.GetBytes(theSalt))
Console.WriteLine(pass)
Dim pass2 As String = Compute(thePass, ""SHA512"", Encoding.UTF8.GetBytes(theSalt))
Console.WriteLine(pass2) 'pass and pass2 are identical


Hope this helps!
","302","<vb.net><hash><salt><sha>","2","3","2","2011-10-03 15:07:52","7636702","2","","475766","","2011-10-03 15:02:44","2011-10-03 14:47:23",""
"7636629","Hashing gone wrong","I'm using the same function to hash values for comparison during login as I am to hash the passwords when users register:
Public Shared Function Compute(ByVal text As String, ByVal algorithm As String, Optional ByVal salt() As Byte = Nothing) As String
    If salt Is Nothing Then
        Dim saltSize As Integer = 8
        salt = New Byte(saltSize - 1) {}

        Dim rng As New RNGCryptoServiceProvider
        rng.GetNonZeroBytes(salt)
    End If

    Dim textBytes As Byte() = Encoding.UTF8.GetBytes(text)
    Dim saltedTextBytes() As Byte = New Byte(textBytes.Length + salt.Length - 1) {}
    For i As Integer = 0 To textBytes.Length - 1
        saltedTextBytes(i) = textBytes(i)
    Next i

    For i As Integer = 0 To salt.Length - 1
        saltedTextBytes(textBytes.Length + i) = salt(i)
    Next i

    Dim hash As HashAlgorithm
    If algorithm Is Nothing Then
        algorithm = """"
    End If

    Select Case algorithm.ToUpper
        Case ""SHA1"" : hash = New SHA1Managed
        Case ""SHA256"" : hash = New SHA256Managed
        Case ""SHA384"" : hash = New SHA384Managed
        Case ""SHA512"" : hash = New SHA512Managed
        Case Else : hash = New MD5CryptoServiceProvider
    End Select

    Dim hashBytes As Byte() = hash.ComputeHash(saltedTextBytes)
    Dim saltedHash() As Byte = New Byte(hashBytes.Length + salt.Length - 1) {}
    For i As Integer = 0 To hashBytes.Length - 1
        saltedHash(i) = hashBytes(i)
    Next i

    For i As Integer = 0 To salt.Length - 1
        saltedHash(hashBytes.Length + i) = salt(i)
    Next i

    Dim hashValue As String = Convert.ToBase64String(saltedHash)

    Return Left(hashValue, 36)
End Function

My problem is that when I try to log in on an account whose password was hashed by this function, the hashed values don't match up. I think I'm skipping a step or something.
Here's the code for user account creation:
        ' The email address needs to be valid
        Dim pattern As String = ""^(?("""")("""".+?""""@)|(([0-9a-zA-Z]((\.(?!\.))|[-!#\$%&'\*\+/=\?\^`\{\}\|~\w])*)(?<=[0-9a-zA-Z])@))(?(\[)(\[(\d{1,3}\.){3}\d{1,3}\])|(([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,6}))$""
        Dim match As Match = Regex.Match(txtEmail.Text, pattern)
        If match.Success Then
            'Hash the user's password before entering it into the database.
            Dim pass As String = Crypt.Compute(txtPass.Text, ""SHA512"", Nothing)

            ' Enter the information from the form into the database.
            Dim sql As String = ""INSERT INTO Users(Username, Password, EmailAddress) "" & _
                ""VALUES(@User, @Pass, @Email)""
            Dim cmd As New SqlCommand(sql, conn)
            cmd.Parameters.AddWithValue(""@User"", txtName.Text)
            cmd.Parameters.AddWithValue(""@Pass"", pass)
            cmd.Parameters.AddWithValue(""@Email"", txtEmail.Text)

            conn.Open()
            cmd.ExecuteNonQuery()
            conn.Close()
        Else
            lblError.Text = ""Invalid email address. Please correct.""
            lblError.ForeColor = Drawing.Color.Red
        End If

There are more checks that aren't included here that aren't relevant to my problem.
Here's my user login:
            Dim pass As String = Crypt.Compute(txtPass.Text, ""SHA512"", Nothing)

            Dim UserData As New DataSet
            Dim UserAdapter As New SqlDataAdapter
            UserAdapter.SelectCommand = New SqlCommand(""SELECT * FROM Users "" & _
                                                       ""WHERE Username = @User AND Password = @Pass"", conn)
            UserAdapter.SelectCommand.Parameters.AddWithValue(""@User"", txtUser.Text)
            UserAdapter.SelectCommand.Parameters.AddWithValue(""@Pass"", pass)
            UserAdapter.Fill(UserData)

            If UserData.Tables(0).Rows.Count <> 1 Then
                lblError.Text = ""Invalid username or password.""
                lblError.ForeColor = Drawing.Color.Red
                Session(""LoginAttempt"") = CInt(Session(""LoginAttempt"")) + 1
            Else
                Session(""LoggedIn"") = True
                Response.Redirect(""Home.aspx"")
            End If

As far as I can see, there is no difference in the hashing I've done here.
Does anyone have any ideas?
","Unless I'm missing it (not really familiar with the language), you don't store the salt anywhere.
You have to use the same salt you've used when creating the account for the verification.
On a side note: You can either generate a random salt for every user account or use a fixed salt for all accounts. Either method works. The first is theoretically more secure, but if the salt is long enough, both are fine for practical purposes.
","302","<vb.net><hash><salt><sha>","2","2","2","2011-10-03 15:07:52","7636702","2","","475766","","2011-10-03 15:02:44","2011-10-03 14:47:23",""
"10043831","What is SaltKey in t-sql?","What is the purpose of saltkey in the t-sql. For example in aspdotnetstorefront databse there is a table name customer, we encrypt/decrypt password then there is another field called SaltKey, what is the purpose of it?
","See here http://en.wikipedia.org/wiki/Salt_%28cryptography%29 it has to do with encryption and not T-SQL
","301","<tsql><salt>","0","0","4","2012-04-08 11:31:02","10043845","3","","111424","","2012-04-08 11:31:02","2012-04-06 13:00:52",""
"10043831","What is SaltKey in t-sql?","What is the purpose of saltkey in the t-sql. For example in aspdotnetstorefront databse there is a table name customer, we encrypt/decrypt password then there is another field called SaltKey, what is the purpose of it?
","better look http://en.wikipedia.org/wiki/Salt_%28cryptography%29
","301","<tsql><salt>","0","0","4","2012-04-08 11:31:02","10043845","3","","111424","","2012-04-08 11:31:02","2012-04-06 13:00:52",""
"10043831","What is SaltKey in t-sql?","What is the purpose of saltkey in the t-sql. For example in aspdotnetstorefront databse there is a table name customer, we encrypt/decrypt password then there is another field called SaltKey, what is the purpose of it?
","see here http://crackstation.net/hashing-security.html
this will help you out to find what is salt..
","301","<tsql><salt>","0","0","4","2012-04-08 11:31:02","10043845","3","","111424","","2012-04-08 11:31:02","2012-04-06 13:00:52",""
"10043831","What is SaltKey in t-sql?","What is the purpose of saltkey in the t-sql. For example in aspdotnetstorefront databse there is a table name customer, we encrypt/decrypt password then there is another field called SaltKey, what is the purpose of it?
","Your question is vague, but I think you are looking for information about a salt, which is a cryptographic concept and not a relational database one. From Wikipedia:

The benefit provided by using a salted password is making a lookup
  table assisted dictionary attack against the stored values
  impractical, provided the salt is large enough. That is, an attacker
  would not be able to create a precomputed lookup table (i.e. a rainbow
  table) of hashed values (password + salt), because it would take too
  much space. A simple dictionary attack is still very possible,
  although much slower since it cannot be precomputed.

","301","<tsql><salt>","0","2","4","2012-04-08 11:31:02","10043845","3","","111424","","2012-04-08 11:31:02","2012-04-06 13:00:52",""
"49751527","Error when work with Moodle 3.2.2 Authentication external DB via Oracle","I was trying to set up the external authentication for Moodle, here are my settings(db_enabled.png), and I tested it and all normal(test_enabled.png), test proceed normally, but when I try to login with the account from the external database, I have this error(result_error.png).
Error:
Could not connect to the specified authentication database...
line 118 of /auth/db/auth.php: call to debugging()
line 4303 of /lib/moodlelib.php: call to auth_plugin_db->user_login()
line 154 of /login/index.php: call to authenticate_user_login()

My question is, this error is about the database, but the database test is normal, could you please help me?
P.S: Is this error related with the database salt? Should I change the /var/www/html/moodle/auth/db/auth.php to reformat the password?
Versions etc.

Moodle: 3.2.2+ (Build: 20170324).
Moodle database: Postgresql 9.6.5.

The external database that I wanna connect: Oracle.

Php:5.6.32.
Ubuntu 16.

Screenshots

db_enabled.png



test_enabled.png



result_error.png


P.S.
Want to share some progress, I have changed the settings like this, 

result_error.png


added apostrophe  in username and password field,  no the database error is gone, but still can't log in with the external database credentials,  the database is md5 hash,  in old system(Moodle 2.9),  I have compared the code, noticed that there is some custom code in auth.php, some code working with salted formats.  Please help me if you have some experience with salted passwords.  Thanks.
","","297","<php><database><debugging><moodle><salt>","1","","0","2018-04-11 05:33:35","","0","","3467707","","2018-04-11 05:33:35","2018-04-10 10:39:34",""
"30539627","Do I need to escape every string and what is the maximum length of an escaped string?","I am trying to store a randomly generated salt in my database with SQL. I have generated this salt in php using this line of code:
$salt = mysqli_real_escape_string($this->connection, mcrypt_create_iv(256, MCRYPT_DEV_URANDOM));

As I understand it all strings must be escaped regardless of whether they are derived from user input as my random salt could also have special characters which interfere with SQL regardless of whether they are intentionally malicious? As I also understand to escape the string PHP needs to add extra characters thereby increasing the length of the string. I was wondering what the maximum length of the string would be post-escaping? Is it that only one character is added for each infringing character in the string therefore the maximum length of the string is 512 for my 256 character string?
Thanks
","Don't escape. Use bind parameters instead. 
That aside, the size that counts is the unescaped value. Escaping is only to make it safe for the parser to read the string. The actual string value is still the same size (and will be handled in unescaped form by the MySQL engine). Escaping is just a way to safely embed a value in the query.
","295","<php><string><salt><mysql-real-escape-string>","1","4","1","2015-05-29 21:54:11","30539676","6","","","","","2015-05-29 21:50:32",""
"49126821","saltstack cmd.script cause stall","i find a strange things ,but i do not know why,
i build a salt init.sls to install and init mysql database,following is my script,and i find all work fine ,except the script do not finish.anyone can help?
# ps -ef|grep __salt  
root     15510 15501  0 16:40 ?        00:00:00 [__salt.tmp.cZvT] <defunct>


mysql-community-server:
  pkg:
    - installed


mysql_conf:
  file.managed:
    - name: /etc/my.cnf
    - source: ftp://10.0.0.4/config_file/salt/mysql/my.cnf
    - source_hash: ftp://10.0.0.4/config_file/salt/mysql/my.cnf.sha512
    - template: jinja
    - defaults:
       hostname: {{ grains['host'] }}
    - require:
      - pkg: mysql-community-server

/root/.bashrc:
  file.append:
    - text:
       - alias my3306='mysql -uroot -pDsuBbT6u4MYcCGm0% -S/tmp/mysql.sock --prompt=""\\u@\\h:\\d \\r:\\m:\\s>""'

mysql_init:
  cmd.script:
    - source: ftp://10.0.0.4/config_file/salt/mysql/init_mysql.sh
    - source_hash: ftp://10.0.0.4/config_file/salt/mysql/init_mysql.sh.sha512
    - cwd: /tmp
    - require:
      - file: mysql_conf


# cat /tmp/__salt.tmp.cZvT6R.sh
#!/bin/bash

sql_user=""alter user 'root'@'localhost' identified by 'my password'""

mysqld --initialize-insecure --user=mysql --datadir=/data/mysql
if [ $? = 0 ];then
service mysqld start
echo ""${sql_user}"" | mysql -uroot -S/tmp/mysql.sock
else
echo init failed && exit 1
fi
exit 0

# this command stall
# salt 'mysqltest1' state.sls mysql
","Avoid using interactive programs in cmd.run or cmd.script. The mysql command line client provides a mysql --batch argument to avoid blocking on interactive prompts. Avoid pipelines where possible to simplify the (fallible) shell command execution environment.
For best results, use the mysql execution module (state module if available), and make sure the appropriate mysql python module is available to the salt-minion. Consider using community formulas like https://github.com/saltstack-formulas/mysql-formula
If you must use cmd.run or cmd.script:
Don't run multiple steps in a script. There's no way to tell what is going wrong. Break it up into multiple salt states and provide requisites to ensure they run in the correct order under the correct conditions.
instead of the shell script you could have used state sls looking something like this:
mysqld initialized insecure:
  cmd.run:
    - name: mysqld --initialize-insecure --user=mysql --datadir=/data/mysql
    - creates: /data/mysql/ibdata1
    - watch:
      - pkg: mysql-community-server

mysqld service running:
  service.running:
    - name: mysqld
    - require:
      - mysqld initialize insecure

{% set my_password = salt['pillar.get']('mysql:user:root:password') %}
mysqld local root password:
  cmd.run:
    - name: mysql -uroot -S/tmp/mysql.sock --batch --execute ""alter user 'root'@'localhost' identified by '{{ my_password }}'""
    - prereq:
      - mysqld initialized insecure
    - require:
      - mysqld service running

","293","<salt>","0","0","1","2018-03-13 05:34:52","","2","","1208081","","2018-03-06 09:09:26","2018-03-06 08:55:53",""
"50669855","Storing and retrieving salt from a MySQL database","I have a PasswordEncryptionService, where I hash my passwords and save them in my MySQL database along with the salt used to hash them. I'm saving both my Passwords and my Salt as a byte array, and I have heard that I can just save them as the varbinary type in the SQL database.
Here is my code:
 //this method is used to retrieve the salt when a user is logging in 
 public static byte[] getSaltMethod(String username, String password) throws SQLException, LoginSampleException {

    try {

        Connection con = Connector.connection();

        String SQL = ""SELECT * from Users.Salt WHERE email = ?, password = ?"";

        PreparedStatement statement = con.prepareStatement(SQL);
        statement.setString(1, username);
        statement.setString(2, password);

        ResultSet set = statement.executeQuery();

        while (set.next()) {

            // vi skal ikke have en blolb her alligevel
            byte[] salt = set.getBytes(""salt"");
            //release the blob and free up memory. (since JDBC 4.0)
            /* jeg er i tivil om denne skal være her*/

            return salt;

        }

    } catch (SQLException ex) {
        Conf.MYLOGGER.log(Level.SEVERE, null, ex);
        throw new LoginSampleException(ex.getSQLState());
    }
    return null;

}



//this method is used to save the user along with the salt when a user is signing up

 public static void createUser(User user) throws LoginSampleException, NoSuchAlgorithmException 
{
    try {
        PasswordEncryptionService PE = new PasswordEncryptionService();
        byte[] salt = PE.generateSalt();
        Connection con = Connector.connection();
        String SQL = ""INSERT INTO Users (email, password, phone, post, adress, role, salt) VALUES (?, ?, ?, ?, ?, ?, ?)"";
        PreparedStatement ps = con.prepareStatement(SQL, Statement.RETURN_GENERATED_KEYS);
        ps.setString(1, user.getEmail());
        ps.setString(2, user.getPassword());
        ps.setString(3, user.getPhonenumber());
        ps.setString(4, user.getPostalCode());
        ps.setString(5, user.getAddress());
        ps.setString(6, user.getRole());
        ps.setBytes(7, salt);
        ps.executeUpdate();
        ResultSet ids = ps.getGeneratedKeys();
        ids.next();
        int id = ids.getInt(1);
        user.setId(id);
    } catch (SQLException ex) {
        throw new LoginSampleException(ex.getMessage());
    }
}

Right now I have a separate method for retrieving the salt, and logging in the person, should I save the salt in a different table, or can it be saved in the user object? Should I save it as a varbinary or just a regular varchar?
","If this is homework then you can save them as varchar or binary. Whichever pleases you teacher is OK.
Now, for production, I have saved hashes as binary and as varchar, and I (personally) prefer binary. As binary, I have saved them both as a single (concatenated) column, or as two separate columns (salt & hash).
Benefits for varchar:

It's easy to debug, to backup, to print, to compare in case you need it.
It's easy to concatenate and to separate its parts. All string functions are available.
Even the most green developer understands how to manage (concatenate, substring, etc.) strings.

Benefits/Disadvantages of binary:

No need to encode back and forth between String and byte[]. Base64 or hexa encoding requires more coding, or the use of non-standard libraries.
Many developers are not familiar with [var]binary or blob data type columns.
Many SQL tools do not display binary columns well, something that makes it more difficult to bebug, or just to check it's doing the right thing.

Other than that, I prefer [var]binary since it's less java coding.
","292","<java><sql><salt>","2","3","1","2019-10-01 15:47:11","50670307","0","","8821720","","2018-06-03 18:59:21","2018-06-03 18:51:12",""
"11181384","Storing Salt as Plaintext in a File Containing Cryptotext","My question is this:
Doesn't storing the salt as plaintext defeat the purpose of having a
salt (which I've heard is fine to do)? I was of the impression that the salt is meant to be an additional variable providing added
complexity for a brute-force or dictionary attack, by causing any attempt to convert the correct password to the key to fail unless thecorrect salt is supplied. It seems to me that if the salt is known, the attacker can try each password with the correct salt. If not, why?
Thanks in advance for taking the time to answer my questions.
","The point of a salt is to prevent an attacker from reusing his dictionary for multiple ciphertexts.
There is nothing wrong with revealing the salt.
Instead, you should make sure that your salt is never re-used by a different ciphertext.
To do that, you should create salts using a secure random number generator.
","290","<c#><regex><security><encryption><salt>","3","9","2","2012-06-25 01:08:23","11181399","2","1","1477597","","2012-06-25 01:08:23","2012-06-24 21:36:16",""
"11181384","Storing Salt as Plaintext in a File Containing Cryptotext","My question is this:
Doesn't storing the salt as plaintext defeat the purpose of having a
salt (which I've heard is fine to do)? I was of the impression that the salt is meant to be an additional variable providing added
complexity for a brute-force or dictionary attack, by causing any attempt to convert the correct password to the key to fail unless thecorrect salt is supplied. It seems to me that if the salt is known, the attacker can try each password with the correct salt. If not, why?
Thanks in advance for taking the time to answer my questions.
","Doesn't storing the salt as plaintext defeat the purpose of having a salt (which I've heard is fine to do)?
Why do you use salt?
To store passwords securely you hash them. And you store a list of those Hashes. When you know the Hash it is incredibly hard to find the original password. 
Suppose you are an attacker who has retreived a list of hashed passwords. You could take some geusses. You could try to hash some week passwords as: ""password"", ""qwerty"", ... And then search through the list of hashed passwords for a match. The chance you can guess a single password correctly is quite high.
Salt is a technique to prevent you from doing this. When you want to take a guess. e.g: take ""qwerty"". You should hash ""qwerty"" + salt. This will be different for every user. What makes it a lot harder to guess passwords.
Briefly: storing salt as plain text is perfectly secure. 
","290","<c#><regex><security><encryption><salt>","3","3","2","2012-06-25 01:08:23","11181399","2","1","1477597","","2012-06-25 01:08:23","2012-06-24 21:36:16",""
"26429456","Create password protected Windows user with salt","I need to create a password protected windows user account to run a windows service with this user account. Therefore I tried this sls snippet:
tcagent3-user:
  user:
    - present
    - name: tcagent3
    - password: tcagent3
    - groups:
        # German administrators group is used
        - Administratoren
    - system: True

Unfortunately the created user is not password protected. Looking at the docs, password seems not used by windows at all. I saw other snippets using passwd but that doesn't work either. Has anybody an idea to achieve this via salt. I can imagine if salt doesn't offer this out of the box there might be a command line call I could use as a workaround?
cheers,
","","289","<windows><automation><salt>","1","","0","2014-10-17 16:28:08","","0","","","","","2014-10-17 16:28:08",""
"34848528","using hashlib to create a sha512 password","I'm following some python book and the author provides an example of using crypt to produce a hashed password. Using the salt+password; and later he mentioned that the same could be done for sha512 using hashlib library. So I tried to use
 hashlib.sha512(password+salt).hexdigest() 
to see if I could come up with my same password in the /etc/shadow file, but I'm not getting anything remotely similar. I'm using the salt that shows as part of my password hash. Am I doing it correctly, or that salt needs to be in ascii form? Also does the salt goes first and then the password like hashlib.sha512(salt+password).hexdigest()? the rest of my code is pretty simple. It is that part about finding the salt, and hashing it properly.  nagios:$6$P9zn0KwR$tgfvvFWJJ5FKmoXiP5rXWOjwoEBOEoAuBi3EphRbJqqjWYvhEM2wa67L9XgQ7W591FxUNklkDIQsk4kij uhE50:16632:0:99999:7::: 
for example the salt I'm using is ""P9zn0KwR"" is this correct or I need to find the clear text for that salt... thanks
","Using hash algorithms like MD5 or SHA-* is an unsecure way to store passwords, because they are ways too fast and therefore can be brute-forced too easily.
Have a look at the Phyton docs, the part about key stretching. It seems that they implemented the PBKDF2 for passwords which is recommended. The passlib seems to be a good choice too, they support the BCrypt algorithm.
","288","<hash><salt><sha512><hashlib>","1","1","1","2016-01-19 08:04:02","","0","1","","","","2016-01-18 06:33:19",""
"39849939","how to hash and salt in Asp.net MVC","I could barely find any good hash+salt guide specified for Asp.net Mvc. So far I managed to hash my password and store it in database(upon register). For login, I hash users input, check if it's same hash value in db. 
Password = HashPass(input.Password).ToString();

Using following method to hash password, that I later store in db. 
public string HashPass(string password) {

        byte[] encodedPassword = new UTF8Encoding().GetBytes(password);
        byte[] hash = ((HashAlgorithm)CryptoConfig.CreateFromName(""MD5"")).ComputeHash(encodedPassword);
        string encoded = BitConverter.ToString(hash)
            .Replace(""-"", string.Empty)
            .ToLower();

        return encoded;
    }

Now to Salt, what are they really? How do they work? How do I combine salt with my solution?
Any help is much appreciated. 
","","285","<c#><asp.net-mvc><entity-framework><salt>","1","","0","2016-10-04 10:28:26","","5","","","","","2016-10-04 10:28:26","2016-10-04 10:29:27"
"35377978","Salt as been change after I put it on mysql","I tried save the password safely on my DB.
I read about the subject and everyone recommend to use salt and save it with the password to.
So I find out this implementation:
private static byte[] setSalt() throws NoSuchAlgorithmException {
        SecureRandom sr = SecureRandom.getInstance(""SHA1PRNG"");
        byte[] salt = new byte[16];
        sr.nextBytes(salt);
        return salt;
    }

Then I tried to save it as a bytes in MySQL
public static void test(byte[] salt) throws Exception{
    SQLconnect sql = new SQLconnect();
    Object[] prepString = {salt, ""admin"" };
    sql.runQuery(""UPDATE orhalimi_cl_db.users set Salt = ? where Username = ?"",
            prepString,ACTION.UPDATE);
}

and here is the update:
preparedStatement = connect.prepareStatement(query);
            for (int i = 0; i < prepString.length; i++) {
                preparedStatement.setObject(i + 1, prepString[i]);
            }
preparedStatement.executeUpdate();

And when I retrieve the salt from the DB and check for equals the byes are different.
I save the salt as type binary(16) in my DB.
And here is how I get it from the DB:
List<HashMap<String, Object>> results;
SQLconnect sql = new SQLconnect();
Object[] prepString = {""Salt"", ""admin"" };
results = sql.runQuery(""SELECT ? from orhalimi_cl_db.users where Username = ?"",
                prepString,ACTION.SELECT);
        if (results.isEmpty()) {
            System.out.println(""empty"");
            return null;
        }
return  ((String) results.get(0).get(""Salt"")).getBytes();

I know its look like I have given a lot of different parts from my code,
but it's look like I mess up the bytes on saving or retiring them from MySQL. So I gave all the info that could be relevant.
Thanks in advance.
Answer:
Funny thing, my problem was the fact that I used ? on all SQL preparedStatement and not only on the value. So its looked like like SELECT ? from orhalimi_cl_db.users who Username = ? that turn to SELECT 'Salt' from orhalimi_cl_db.users where Username = 'admin', and the answer was always salt.
Anyway I convert it to hex and base64 and it much easier now  
","You are trying to write a raw byte value to MySQL. Since byte values are signed 8-bit integers in Java, this is destined to go wrong.
You have basically two options: a) use a BLOB data type or b) encode your byte value as a Base64 string.
In case of a BLOB type (which seems to be what you tried), you need to read and write binary-safe. That also means, that you can't simply read it as String from the database and then expect the acquired bytes to be the same as those which you wrote into the database. You have to use binary streams.
I would prefer the second option. It is much safer and less complicated. Especially since you need to hash your password string together with the salt. With Base64 encoding, you can simply concatenate password and salt and then calculate the hash over the string.
EDIT:
Here an example how to generate a salted SHA512 hash:
public String getSalt() {
    String saltStr = """";
    try {
        final SecureRandom sr = SecureRandom.getInstance(""SHA1PRNG"");
        final byte[] salt = new byte[16];
        sr.nextBytes(salt);
        saltStr = Base64.getEncoder().encodeToString(salt);
    } catch (NoSuchAlgorithmException ignored) { }

    return saltStr;
}

public String hashPassword(String password, String salt)
{
    try {
        final MessageDigest md = MessageDigest.getInstance(""SHA-512"");

        // hash password and salt
        md.update(password.getBytes());
        md.update(salt.getBytes());
        final byte[] hash = md.digest();

        // convert byte array to hex string
        final StringBuffer sb = new StringBuffer();
        for (int i = 0; i < hash.length; ++i) {
            sb.append(Integer.toString((hash[i] & 0xff) + 0x100, 16).substring(1));
        }

        return sb.toString();
    } catch (NoSuchAlgorithmException ignored) { return """"; }
}

That way you can also use any other string as salt. But it is of course recommended to use a secure random number generator as in getSalt().
One big advantage of using this method is that you are less dependent on Java's internal byte handling in general. With the generated hex hash and Base64 salt string you can easily recalculate the hash value outside of Java, for instance directly inside the database.
","284","<java><mysql><salt>","1","3","2","2016-02-16 21:45:29","35419476","2","3","2900733","","2016-02-16 21:45:29","2016-02-13 08:59:55",""
"35377978","Salt as been change after I put it on mysql","I tried save the password safely on my DB.
I read about the subject and everyone recommend to use salt and save it with the password to.
So I find out this implementation:
private static byte[] setSalt() throws NoSuchAlgorithmException {
        SecureRandom sr = SecureRandom.getInstance(""SHA1PRNG"");
        byte[] salt = new byte[16];
        sr.nextBytes(salt);
        return salt;
    }

Then I tried to save it as a bytes in MySQL
public static void test(byte[] salt) throws Exception{
    SQLconnect sql = new SQLconnect();
    Object[] prepString = {salt, ""admin"" };
    sql.runQuery(""UPDATE orhalimi_cl_db.users set Salt = ? where Username = ?"",
            prepString,ACTION.UPDATE);
}

and here is the update:
preparedStatement = connect.prepareStatement(query);
            for (int i = 0; i < prepString.length; i++) {
                preparedStatement.setObject(i + 1, prepString[i]);
            }
preparedStatement.executeUpdate();

And when I retrieve the salt from the DB and check for equals the byes are different.
I save the salt as type binary(16) in my DB.
And here is how I get it from the DB:
List<HashMap<String, Object>> results;
SQLconnect sql = new SQLconnect();
Object[] prepString = {""Salt"", ""admin"" };
results = sql.runQuery(""SELECT ? from orhalimi_cl_db.users where Username = ?"",
                prepString,ACTION.SELECT);
        if (results.isEmpty()) {
            System.out.println(""empty"");
            return null;
        }
return  ((String) results.get(0).get(""Salt"")).getBytes();

I know its look like I have given a lot of different parts from my code,
but it's look like I mess up the bytes on saving or retiring them from MySQL. So I gave all the info that could be relevant.
Thanks in advance.
Answer:
Funny thing, my problem was the fact that I used ? on all SQL preparedStatement and not only on the value. So its looked like like SELECT ? from orhalimi_cl_db.users who Username = ? that turn to SELECT 'Salt' from orhalimi_cl_db.users where Username = 'admin', and the answer was always salt.
Anyway I convert it to hex and base64 and it much easier now  
","This is an X-Y problem where the real question is Is it difficult to store password hashes properly?. The answer is yes. 
I suggest you place a char(60) column on your user table and use bcrypt. 
Are you intentionally reinventing the wheel? Perhaps this is a learning exercise, in which case, go get'em tiger!
","284","<java><mysql><salt>","1","1","2","2016-02-16 21:45:29","35419476","2","3","2900733","","2016-02-16 21:45:29","2016-02-13 08:59:55",""
"49510772","How to call salt-ssh (SSHClient) via Python API","I installed Salt in a Python 3 virtual environment and created a Salt configuration that uses a non-root folder for everything (/home/user/saltenv). When using the salt-ssh command inside the venv, e.g. salt-ssh '*' test.ping, everything works as exptected. (Please note that the config dir is resolved via a Saltfile, so the -c option is omitted, but that should not matter.)
When calling the SSHClient directly via Python however, I get no results. I already figured out that the roster file is not read, obviously resulting in an empty target list. I am stuck somehow and the documentation is not that helpful.
Here is the code:
import salt.config
from salt.client.ssh.client import SSHClient

def main():
    c_path = '/home/user/saltenv/etc/salt/master'
    master_opts = salt.config.client_config(c_path)

    c = SSHClient(c_path=c_path, mopts=master_opts)
    res = c.cmd(tgt='*', fun='test.ping')
    print(res)

if __name__ == '__main__':
    main()

","As it seems, the processing of some options differs between the CLI and the Client. salt-ssh does not use the SSHClient. Instead, the class salt.client.ssh.SSH is used directly.
While salt-ssh adds the config_dir from the Saltfile to the opts dictionary to resolve the master config file, the SSHClient reads the config file passed to the constructor directly and config_dir is not added to the options (resulting in the roster file not being found).
My solution is to include config_dir in the master config file as well. The code from the question will then be working unchanged.
Alternative 1: If you only have one Salt configuration, it is also possible to set the environment variable SALT_CONFIG_DIR.
Alternative 2: The mopts argument of SSHClient can be used to pass a custom configuration directory, but it requires more lines of code:
config = '/home/user/saltenv/etc/salt/master'
defaults = dict(salt.config.DEFAULT_MASTER_OPTS)
defaults['config_dir'] = os.path.dirname(config)
master_opts = salt.config.client_config(config, defaults=defaults)
c = SSHClient(mopts=master_opts)

","283","<python><salt><salt-stack>","1","1","1","2018-03-27 13:51:11","49514760","0","1","","","","2018-03-27 10:41:41",""
"1853357","php secure login","what do you think about this login procedure? is it pretty safe?
When they login i first check that the username exist, if it does i grab the salt (every user have unique salt) from the user, that i re-hash with posted password
$pass = hash('sha256', $salt . $posted_password);
and then i just compare with
$check = mysql_query(""SELECT * FROM users WHERE username = '"".$username.""' AND password = '"".$pass.""'"") or die(""MySQL Error: "".mysql_error());

","This is not safe.
Use parametrized queries, or use mysql_real_escape_string to make sure you prevent SQL injections.
Other than that, that is a very common login technique, and is basically the ""standard"".
Link here about more Injection security:
How can I prevent SQL injection in PHP?
","281","<php><security><salt>","0","2","2","2009-12-05 20:51:45","","2","","216356","","2009-12-05 20:51:45","2009-12-05 20:27:41",""
"1853357","php secure login","what do you think about this login procedure? is it pretty safe?
When they login i first check that the username exist, if it does i grab the salt (every user have unique salt) from the user, that i re-hash with posted password
$pass = hash('sha256', $salt . $posted_password);
and then i just compare with
$check = mysql_query(""SELECT * FROM users WHERE username = '"".$username.""' AND password = '"".$pass.""'"") or die(""MySQL Error: "".mysql_error());

","I don't think it is a good idea to post the mysql error on failing.
or die(""MySQL Error: "".mysql_error());

When it comes to this, I'd say the fewer informations you returned the better. Giving information that could tell the person attempting the login whether it is the username or the password that has failed, is not good, this goes as well as telling the user which sort of database you're using, how it is queried, etc.
Further more realize that the most frequent way security in such situations is overcome, is through social engineering, and in that case, it doesn't matter how you hash data etc. (not that you shouldn't) Just to say that security is a lot, and it does not limit it self to how you store and retrieve data.
For instance, is the login done through an encrypted line? Is there any enforcement on the password strength the user has? what happens after the user is logged in, how do you track logged in users vs. those merely visiting the site? How do you prevent session takeovers, etc. I'm not an expert on the topic, but it is a broad topic. Perhaps you just wanted a comment on the code you posted, in which case my top paragraph really should have been all you needed to read ;) along with Crowe T. Robot's answer :)
","281","<php><security><salt>","0","3","2","2009-12-05 20:51:45","","2","","216356","","2009-12-05 20:51:45","2009-12-05 20:27:41",""
"24682650","Does a single Salt provide any additional security?","I understand that it's best practice to generate a long salt for each password you use. But does using a single salt provide any security benefit from not having a salt at all? 
","Having a shared salt makes you marginally more secure. It prevents an attacker from using a pre-computed rainbow table attack, but it does not prevent them from building a single, new rainbow table for your password database. Thus it is harder for an attacker to crack a single password with a given salt, but it is significantly easier for them to crack every password with that salt.
As an example, consider the following simplified set of passwords, salts and hashes:
Password  Salt     Hash
aaaaaz    y03sar   ze4lap
zzzzza    y03sar   enbe65

The attacker knows that your salt is y03sar and starts computing every hash with that start for every password from a to zzzzzz. Long before (in terms of iterations, the actual cracking would finish very quickly for passwords and salts of this complexity) they discover the password zzzzza, they will realize they have also discovered the password aaaaaz. In other words, brute forcing one password in your database is no harder in the worst case than brute forcing every password.
With different salts, each password must be attacked separately.
Password  Salt     Hash
aaaaaz    bbq9f0   i2chf1
zzzzza    y03sar   enbe65

If the attacker again starts calculating hashes for every password from a to zzzzzz with the salt y03sar, then i2chf1 won't be in their output list (at least it's improbable with a reasonable length hash output; even if it is, the computed password for salt y03sar still won't work to gain access to the aaaaaz account because the hash would be different with salt bbq9f0).
To add some numbers to the mix, using a single salt lengthens the attack time from instantaneous (rainbow tables provide for a constant-time lookup on the hash digest) to linear time. As soon as the attacker has computed the hashes for every password allowed by your system, they have access to every account in your system. Even if you have 16 character passwords allowing [a-zA-Z0-9], then your whole system is compromised in days or weeks. (Linked question is just an example - GPU's can crack passwords even faster than the hardware in the answer.)
Now if you have distinct salts for every password, then in the same amount of time it took an attacker to crack your entire database, they have only cracked a single password.
That's a pretty big difference. Use unique salts. (And a good hashing algorithm, while we're on the topic.)
","280","<hash><salt>","0","2","1","2014-07-10 18:27:41","24683781","0","","","","","2014-07-10 17:20:50",""
"26352688","how to use docker and salt provisioning","I am working on django project , I know python / django and worked some projects , but did not use any automated deployment tools like fabric,vagrant,anisible, puppet,chef ,salt.
Now I have a need to learn working with django using Docker and Salt provisioning.
Can any give brief intro to these things , mainly docker and salt.
what are the uses of each tools?
It will use full to beginners like me.
","Docker is an open platform for developers and sysadmins to build, ship, and run distributed applications. Take a look at https://www.docker.com/whatisdocker/ This explains what docker does.
Read https://www.digitalocean.com/community/tutorials/docker-explained-how-to-containerize-python-web-applications to get an idea of how to get started with Django on Docker.
Docker is really an amazing way to deploy anything. It's very simple as well. Feel free to get back if you are stuck on getting started.
","280","<python><django><docker><salt><ansible>","0","1","1","2014-10-14 04:45:45","26352795","0","","","","","2014-10-14 04:32:11","2014-10-14 07:06:43"
"7679985","Trying to wrap my head around PHP password salt/encryption","Right now I am developing an application that will allow online registration.  For development, the password check just checks a MySQL row to make sure the value matches the value in the input field.  
This code checks to see that the row exists:
$res = mysql_query(""SELECT * FROM `users` WHERE `username` = '"".$username.""' AND `password` = '"".$password.""'"");
                    $num = mysql_num_rows($res);
                    //check if there was not a match
                    if($num == 0){
                        //if not display error message
                        echo ""<center>The <b>Password</b> you supplied does not match the one for that username!</center>"";

I'm confused about implementing a salt system.  How would I alter this script to check for the encrypted password?  I haven't found a great tutorial that explains this in detail.
","You would have to generate a new salt if the user registers and save it in your database.
// you save this in the database
$encPass = encFunction( $password.$salt );

and when some user wants to logint you check if this password is a the password column of this user.
Note:
- encFunction is your encryption function
","277","<php><mysql><salt>","0","0","2","2011-10-06 20:31:26","7680111","0","","","","","2011-10-06 20:19:15",""
"7679985","Trying to wrap my head around PHP password salt/encryption","Right now I am developing an application that will allow online registration.  For development, the password check just checks a MySQL row to make sure the value matches the value in the input field.  
This code checks to see that the row exists:
$res = mysql_query(""SELECT * FROM `users` WHERE `username` = '"".$username.""' AND `password` = '"".$password.""'"");
                    $num = mysql_num_rows($res);
                    //check if there was not a match
                    if($num == 0){
                        //if not display error message
                        echo ""<center>The <b>Password</b> you supplied does not match the one for that username!</center>"";

I'm confused about implementing a salt system.  How would I alter this script to check for the encrypted password?  I haven't found a great tutorial that explains this in detail.
","A salt is a set of characters added to the beginning or end of the password before encryption and unencryption to make it harder to run a brute force attack.
Your first create the salt which is just a random fixed series of characters and then prepend it to the password before hashing it. You should also escape your data before putting it into the query to prevent MySQL injection attacks.
Do this when entering the pass into the database
$username = mysql_real_escape_string($_POST['username']);
$password = mysql_real_escape_string($_POST['pass']);
$pass_hash = md5($SALT.$password);
mysql_query(*query to insert $username and $pass_hash into db*)

To check if the password is correct
$username = mysql_real_escape_string($_POST['username']);
$password = mysql_real_escape_string($_POST['pass']);
$res = mysql_query(*query to extract $pass_hash from db where username==$username)
//get the password from the $res and put it in a var
if(md5($SALT.$pass_hash_from_db) == $password){*correct pass*} else {*invalid login*}

Set $SALT to some large random static string such as $SALT=""WEHGFHAWEOIfjo;cewrxq#$%"";
","277","<php><mysql><salt>","0","2","2","2011-10-06 20:31:26","7680111","0","","","","","2011-10-06 20:19:15",""
"47426272","SaltStack: is it possible to allow only state.apply for minions?","I know that there is Blackout mode for salt-minions (https://docs.saltstack.com/en/latest/topics/blackout/index.html) but it is configured on a master side. My need is to configure minion to do not run any commands (I mean any commands like salt '*' test.ping or salt '*' file.mkdir ""/tmp/foobar"") from a salt-master and only allow to run salt '*' state.apply with local state files.
Is it possible?
","While I discover the codebase of Salt I found that there is solution for my issue there in upstream. I found that they added minion_blackout config to grains not only to pillar, so now I can configure that on my minion and allow only state.apply in minion_blackout_whitelist config.
","273","<salt><salt-stack>","1","1","1","2017-12-04 20:24:33","47641400","0","","","","","2017-11-22 03:22:07",""
"4492000","Is salting with a hashed version of the user's password just as secure as salting with a pre-defined string?","Basically, what I'm asking is if salting a password by appending a hashed version of it to the end of it is just as secure as salting with a different string. So:
Is this:
$pass = ""pass"";
$salt = sha1(md5($pass));
$pass = md5($pass.$salt);

As secure as this?
$pass = ""pass"";
$salt = ""4D9ds*^dkrUI45^#dkd*3fD8&!dlvd*"";
$pass = md5($pass.$salt);

","The first example is as secure as hashing without using any salt at all, because it still just requires the password and nothing more to crack. In other words, you are just applying the hashing functions to the same thing a few times more.
A better bet is still to create a salt for each user and store it alongside, separately. A fixed salt for everyone is alright, I guess, because you cannot use the password to determine the salt. However, generating a unique salt for each user is even better because then it would take more information than just the password to crack it (e.g. username, date registered, or some other info).
","273","<php><security><hash><passwords><salt>","1","3","3","2010-12-20 17:42:16","4492067","4","1","106224","","2010-12-20 17:20:45","2010-12-20 17:08:21",""
"4492000","Is salting with a hashed version of the user's password just as secure as salting with a pre-defined string?","Basically, what I'm asking is if salting a password by appending a hashed version of it to the end of it is just as secure as salting with a different string. So:
Is this:
$pass = ""pass"";
$salt = sha1(md5($pass));
$pass = md5($pass.$salt);

As secure as this?
$pass = ""pass"";
$salt = ""4D9ds*^dkrUI45^#dkd*3fD8&!dlvd*"";
$pass = md5($pass.$salt);

","If the salt is based on the value to be hashed, then you lose the value of the salt.
If a password hash salt is based only on the value of the password, then two users using the same password is very visible in the database, for example.
You should instead add a salt on a different determinable value. Common options are fields like the username, email, etc.
","273","<php><security><hash><passwords><salt>","1","4","3","2010-12-20 17:42:16","4492067","4","1","106224","","2010-12-20 17:20:45","2010-12-20 17:08:21",""
"4492000","Is salting with a hashed version of the user's password just as secure as salting with a pre-defined string?","Basically, what I'm asking is if salting a password by appending a hashed version of it to the end of it is just as secure as salting with a different string. So:
Is this:
$pass = ""pass"";
$salt = sha1(md5($pass));
$pass = md5($pass.$salt);

As secure as this?
$pass = ""pass"";
$salt = ""4D9ds*^dkrUI45^#dkd*3fD8&!dlvd*"";
$pass = md5($pass.$salt);

","You shouldn't use md5 anyway as it's been cracked.  sha256 is more secure and just as easy to implement.
How about using, when storing the data:
$salt = mt_rand();
$pass = hash('sha256',$_POST['userPassword'] . $salt);

Therefore $salt is not based on any user entered data, but random data. You then store $salt in the db as it is, or reverse the string for obfuscation.
","273","<php><security><hash><passwords><salt>","1","2","3","2010-12-20 17:42:16","4492067","4","1","106224","","2010-12-20 17:20:45","2010-12-20 17:08:21",""
"46672834","hashing and salting password field","I'm trying to hash and salt the password, but I got lots of errors!
What is the wrong with that code or what is the right way to type it?
user.js code
const mongoose = require('mongoose')
const schema = mongoose.Schema
const promise = require('bluebird')
const bcrypt = promise.promisifyAll(require('bcrypt'))

function hashPassword(user, option) {
  const SALT_FACTOR = 8

  if (!user.isModified('password')) {
    return;
   }

  return bcrypt
    .genSaltAsync(SALT_FACTOR)
    .then(salt => bcrypt.hashAsync(user.password, salt, null))
    .then(hash => {
      user.setDataValue('password', hash)
    })
}

// create schema and model
const userSchema = new schema({

    email: {
      type: String,
      required: true,
      unique: true
    },
    password: {
      type: String,
      required: true
    }

})

userSchema.pre('create', function(next) {
   hashPassword()

})

userSchema.pre('update', function(next) {
   hashPassword()

})

userSchema.pre('save', function(next) {
   hashPassword()

})

const user = mongoose.model('user', userSchema)

user.prototype.compairePassword = function (password) {
  return bcrypt.compareAsync(password, this.password)
}

module.exports = user

","const mongoose = require('mongoose')
const schema = mongoose.Schema
const promise = require('bluebird')
const bcrypt = promise.promisifyAll(require('bcrypt'))
const SALT_WORK_FACTOR = 10

// create schema and model
const userSchema = new schema({

    email: {
      type: String,
      required: true,
      unique: true
    },
    password: {
      type: String,
      required: true
    }

})

userSchema.pre('save', function(next) {
    const user = this

    // only hash the password if it has been modified (or is new)
    if (!user.isModified('password')) return next()

    // generate a salt
    bcrypt.genSalt(SALT_WORK_FACTOR, function(err, salt) {
        if (err) return next(err)

        // hash the password using our new salt
        bcrypt.hash(user.password, salt, function(err, hash) {
            if (err) return next(err)

            // override the cleartext password with the hashed one
            user.password = hash
            next()
        })
    })
})

userSchema.methods.comparePassword = function(candidatePassword, cb) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    })
}


const user = mongoose.model('user', userSchema)

module.exports = user

","271","<express><hash><mongoose><bcrypt><salt>","-2","0","1","2017-10-10 19:01:52","46674088","0","0","3524982","","2017-10-10 17:45:19","2017-10-10 17:44:24",""
"24788709","Salt initializes differently each time server starts, trouble with credentials database in python bottle and sqlite3","First of all I am using Python bottle with Sqlite3. The trouble that I am having is that when I initialize my salt at the beginning of the program, and then stop the program and restart it, the whole thing breaks because it makes a different salt. So when I restart the program, I can't login with any of the old accounts, and I can't make a user with the same name because theyre still stored in the credentials DB. 
salt: 
salt = uuid.uuid4().hex

hash: 
hashed_password = hashlib.sha512(passwordInput + salt).hexdigest()

I am verifying the account by     
row = (c.execute(""SELECT * FROM Credentials WHERE usernameDB =? AND passhashDB =?"", (usernameInput,  hashed_password, ))).fetchone()
if row: 

etc...
How should I go about fixing this?
","If all accounts had the same salt, it would not be able to protect against a rainbow table computed for this salt.
Each user must have its own salt.
The salt is stored together with the password hash in the database.
(The salt itself being stored unencrypted is not a problem; you need it again to check the hash.)
Something like this:
def new_user(name, password):
    salt = uuid.uuid4().hex
    hash = hashlib.sha512(password + salt).hexdigest()
    c.execute(""INSERT INTO Credentials(usernameDB,passhashDB,salt) VALUES(?,?,?)"",
              (name, hash, salt))

def check_login(name, password):
    c.execute(""SELECT salt, passhashDB FROM Credentials WHERE usernameDB = ?"",
              (name,))
    for row in c:
        salt = row[0]
        actual_hash = row[1]
        input_hash = hashlib.sha512(password + salt).hexdigest()
        if input_hash != actual_hash:
            raise Exception(""invalid password"")
    else:
        raise Exception(""invalid user name"")

","269","<python><sqlite><hash><credentials><salt>","0","4","1","2014-07-17 16:47:37","24796950","3","","3765606","","2014-07-17 16:34:38","2014-07-16 19:05:58",""
"51208509","Setting custom salt string in MessageDigestPasswordEncoder in spring security 5","I have my passwords stored in the DB as MD5 hashes for which I had used my custom salt. Now while changing the password I have to convert the ""Old Password"" to appropriate MD5 hash(using my custom hash) and check if the hash stored in the DB and this generated hash matches. This worked fine until I upgraded spring security to version 5. In new version I am trying to use org.springframework.security.crypto.password.MessageDigestPasswordEncoder which uses its custom salt to generate the MD5 hash. I don't see a way to add custom salt so that the hash matches with the stored hash. What should I do? Is there some alternative class I can use to convert the password to MD5 hash? 
Any help would be appreciated.
","","269","<hash><encoding><spring-security><md5><salt>","3","","0","2018-08-21 10:54:37","","0","","7636721","","2018-07-09 05:22:28","2018-07-06 10:34:58",""
"22546975","PHP login script security - using real/fake salt instead of lockouts","I've read various topics about php login scripts, so I'm not going to recap those discussions but I was wondering about the use of a real and fake salt in the password hash.
Instead of an ID / password login prompt, I was thinking about a ID# / ID / password login prompt.  My users all have IDs, not related to my company that they use often in their profession.  If they enter a real ID# and login ID that match, then they get the real salt.  All non-matching entries result in a fake salt for the password.  While these ID#s are probably obtainable in the Internet, you'd have to know the name of the user, and this would make all random attacks fail.  The only way to make the attack work is to discover the user's name first, then attack my system.  User identities are not commonly known.
Is this a viable approach?  What could go wrong if I also tied in locking an ID after a certain number of attempts, and delaying login attempts after so many GLOBAL failed attempts.  However, I wasn't going to do lockouts or throttling for any attempt that involved the fake salt.  I was only going to implement these failsafes when they earned a real salt.  However, I may consider throttling if they get an existing ID#.
Thoughts or suggestions?  Would this be a secure alternative to banning IPs, asking personal questions, captcha, etc?
","The appropriate answer will depend on the level of security, or insecurity, that your company is able to live with. For example, will the system ever be audited? How are users created in the system? Will users ever access this resource from non-private computers?
Although, I could see reasons to implement a system like this, I would not recommend it. I think others would go so far as to claim it's outright ridiculous. The reason for that is that if you have any web-facing application, it is incredibly likely that the security of the system will be compromised.
Further, blocking an IP address entirely can result in atrocious user experiences. I would recommend to implementing a reverse Turing test (like Capthcha or Mathcha).
Ultimately though, I applaud the idea of trying to move away from password authentication. As a user, I hate passwords. And the security policies of my employer (and I'm assuming most) around passwords is itself laughable.
EDIT: I just re-read your comment saying this would make all random attacks fail. I'd like to add that that assumption seems not well grounded to me. It's much, much easier to guess a user's name than you might think. Especially if it's their real name.
","268","<php><security><salt><saltedhash>","0","0","2","2014-03-20 23:22:26","","4","","1064767","","2014-03-20 23:07:00","2014-03-20 23:02:39",""
"22546975","PHP login script security - using real/fake salt instead of lockouts","I've read various topics about php login scripts, so I'm not going to recap those discussions but I was wondering about the use of a real and fake salt in the password hash.
Instead of an ID / password login prompt, I was thinking about a ID# / ID / password login prompt.  My users all have IDs, not related to my company that they use often in their profession.  If they enter a real ID# and login ID that match, then they get the real salt.  All non-matching entries result in a fake salt for the password.  While these ID#s are probably obtainable in the Internet, you'd have to know the name of the user, and this would make all random attacks fail.  The only way to make the attack work is to discover the user's name first, then attack my system.  User identities are not commonly known.
Is this a viable approach?  What could go wrong if I also tied in locking an ID after a certain number of attempts, and delaying login attempts after so many GLOBAL failed attempts.  However, I wasn't going to do lockouts or throttling for any attempt that involved the fake salt.  I was only going to implement these failsafes when they earned a real salt.  However, I may consider throttling if they get an existing ID#.
Thoughts or suggestions?  Would this be a secure alternative to banning IPs, asking personal questions, captcha, etc?
","I am going to write this as an answer as it seems you are confused about what a salt is and how it works.
What is a salt?
A salt should be a random string generated for each user. Before you encrypt their password and store it in the database you add the salt and store it also, thus changing what the encrypted value would be. The salt ensures that should someone gain access to your database and in effect your user's encrypted passwords they can't use a rainbow table to quickly look up their unencrypted password.
A rainbow table is a list of values and their encrypted counterparts, by generating a list of values in advance the attacker does not need to bruteforce the encrypted password and can ""decrypt"" it in a O(1) lookup. Because you randomly generate a salt for each user you render their tables worthless.
It does not prevent them from bruteforcing the password and is not a substitute for strong encryption.
What is a fake salt?
Nothing. It does not exist, it serves no good purpose.
Issues with your method
Firstly the user should never see or be made aware of their salt value, this is stored in your database and used by your authentication logic. There is no reason not to use their actual salt when testing the validity of their password. If the password is wrong it will fail authentication anyway.
Secondly if an attacker is attempting to use a non-existent username to log in then fantastic, they will never gain access to an account and no further action needs to be taken apart from if they are overloading your server with requests in which case you need to find a way to block them temporarily.
","268","<php><security><salt><saltedhash>","0","3","2","2014-03-20 23:22:26","","4","","1064767","","2014-03-20 23:07:00","2014-03-20 23:02:39",""
"51402117","State 'cp.push' was not found in SLS","In salt (2018.3.0) I created the following statefile that I started to write to collect existing ssh hostkey files from minions.
sshHostKeys:
  cp.push:
    - path: '/etc/ssh/ssh_host_dsa_key.pub'
    - upload_path: '/'

Calling
salt-call state.apply sshHostKeys 

I get:
local:
----------
          ID: sshHostKeys
    Function: cp.push
      Result: False
     Comment: State 'cp.push' was not found in SLS 'sshHostKeys'
              Reason: 'cp.push' is not available.

Manually calling:
salt-call cp.push /etc/ssh/ssh_host_dsa_key.pub 

works just fine, the file is copied to the salt master.
Anyone has an idea what I am doing wrong in the state file?
Thanks Rainer
","Had the same problem. This should work:
custom function name:
  module.run:
    - name: cp.push
    - path: <<your path>>

See issue on github for reference:
https://github.com/saltstack/salt/issues/42330
","266","<module><push><salt><cp>","1","1","1","2018-08-12 18:02:56","","0","","8329327","","2018-07-18 12:45:14","2018-07-18 12:32:46",""
"43123823","Salt stack grains data from sqlite3 external pillar","I am trying to pull results from a sqlite3 database (set up as an external salt pillar) and use jinja templating to set grains data.
Here is the relevant section of my salt master file:
sqlite3:
    database: '/var/lib/salt/stations.db'
    timeout: 5.0

ext_pillar:
    - sqlite3:
        fromdb:
            query: 'SELECT * FROM table;'

And here is the relevant part of the init.sls file I am using to create the grains file:
{% set station_id = salt['grains.filter_by']({
    {% for row in query_result %}
    {% hostname = station_id %}
}, default=""UNKNOWN"", grain=""host"") %}

I confirmed that the external pillar produces results by running 
salt '*' sqlite3.fetch /var/lib/salt/stations.db 'SELECT * FROM test;'

But I can't figure out how to get results into the jinja file.
I want something like 
'SELECT * FROM table WHERE hostname=station_id LIMIT 1;'

and use the result to set the grain environmental variable called 'hostname'.
But am not sure how to get there from here.
Any help is greatly appreciated.
","Thanks to the good folks in Saltstack IRC this problem is solved.
Master:
- sqlite3:
    station_map:
        query: 'SELECT hostname, id
                  FROM stations
                WHERE hostname like ?'

init.sls:
{% set station_id = salt['grains.filter_by']({
    {% for row in station_map %}
    {{ hostname }} : {{ station_id }}
}, default=""UNKNOWN"", grain=""host"") %}

","266","<sqlite><jinja2><salt><salt-stack>","0","0","1","2017-03-30 19:54:14","","0","","","","","2017-03-30 16:46:45",""
"4674734","Need help making login page with salts","Alright, I'm trying to make a login page. It seems that all of the pages worked pretty good- until I added salts. I don't really understand them, but doing something as basic as I am shouldn't be to hard to figure out. Here's ""loginusr.php"":
<html>
<body>
<?php  

//form action = index.php

session_start();

include(""mainmenu.php"");  

$usrname  = mysql_real_escape_string($_POST['usrname']);    
$pass     = $_POST['password'];  
$salt     = $pass;
$password = sha1($salt.$pass);

$con = mysql_connect(""localhost"", ""root"", ""g00dfor@boy"");
if(!$con)
{
    die(""Unable to establish connection with host. We apologize for any inconvienience."");
}

mysql_select_db(""users"", $con) or die(""Can't connect to database."");

$select = ""SELECT * FROM data WHERE usrname='$usrname' and password='$password'"";
$query  = mysql_query($select);
$verify = mysql_num_rows($query);

if($verify==1)
{
    $_SESSION[""valid_user""] = $usrname;
    header(""location:index.php"");
}    
else
{
    echo ""Wrong username or password. Please check that CAPS LOCK is off."";
    echo ""<br/>"";
    echo ""<a href=\""index.php\"">Back to login</a>"";
} 

mysql_close($con);    
?> 
</body>
</html>

I used the command echo $password; to show me if the password in the database matched with the script. They did. What am I doing wrong?
","It looks like you're salting with the same password?  Normally a salt would be a random key that is specific to your site that you prepend to the password input, which it looks like you're doing fine.  Just make sure you're using that same salt for checking that you use when the password is created.
Also, to use sessions properly you need to have session_start before anything is output to the page:
<?php

session_start();

?>
<html>
<body>
...

","265","<php><mysql><hash><salt>","1","0","3","2012-12-22 03:37:31","4674841","12","","10018","","2011-01-12 23:26:08","2011-01-12 22:30:13",""
"4674734","Need help making login page with salts","Alright, I'm trying to make a login page. It seems that all of the pages worked pretty good- until I added salts. I don't really understand them, but doing something as basic as I am shouldn't be to hard to figure out. Here's ""loginusr.php"":
<html>
<body>
<?php  

//form action = index.php

session_start();

include(""mainmenu.php"");  

$usrname  = mysql_real_escape_string($_POST['usrname']);    
$pass     = $_POST['password'];  
$salt     = $pass;
$password = sha1($salt.$pass);

$con = mysql_connect(""localhost"", ""root"", ""g00dfor@boy"");
if(!$con)
{
    die(""Unable to establish connection with host. We apologize for any inconvienience."");
}

mysql_select_db(""users"", $con) or die(""Can't connect to database."");

$select = ""SELECT * FROM data WHERE usrname='$usrname' and password='$password'"";
$query  = mysql_query($select);
$verify = mysql_num_rows($query);

if($verify==1)
{
    $_SESSION[""valid_user""] = $usrname;
    header(""location:index.php"");
}    
else
{
    echo ""Wrong username or password. Please check that CAPS LOCK is off."";
    echo ""<br/>"";
    echo ""<a href=\""index.php\"">Back to login</a>"";
} 

mysql_close($con);    
?> 
</body>
</html>

I used the command echo $password; to show me if the password in the database matched with the script. They did. What am I doing wrong?
","A salt is a random value to prevent an attacker from just looking up the source of a hash in table generated based on common passwords. (Using the username as salt is obviously not a good idea as it only adds very little entropy).
So you need to store the salt in the database and read it from the database in order to calculate the salted password hash for comparison with the stored value.
You misspelled username a couple of times, is it misspelled in the database, too?
","265","<php><mysql><hash><salt>","1","0","3","2012-12-22 03:37:31","4674841","12","","10018","","2011-01-12 23:26:08","2011-01-12 22:30:13",""
"4674734","Need help making login page with salts","Alright, I'm trying to make a login page. It seems that all of the pages worked pretty good- until I added salts. I don't really understand them, but doing something as basic as I am shouldn't be to hard to figure out. Here's ""loginusr.php"":
<html>
<body>
<?php  

//form action = index.php

session_start();

include(""mainmenu.php"");  

$usrname  = mysql_real_escape_string($_POST['usrname']);    
$pass     = $_POST['password'];  
$salt     = $pass;
$password = sha1($salt.$pass);

$con = mysql_connect(""localhost"", ""root"", ""g00dfor@boy"");
if(!$con)
{
    die(""Unable to establish connection with host. We apologize for any inconvienience."");
}

mysql_select_db(""users"", $con) or die(""Can't connect to database."");

$select = ""SELECT * FROM data WHERE usrname='$usrname' and password='$password'"";
$query  = mysql_query($select);
$verify = mysql_num_rows($query);

if($verify==1)
{
    $_SESSION[""valid_user""] = $usrname;
    header(""location:index.php"");
}    
else
{
    echo ""Wrong username or password. Please check that CAPS LOCK is off."";
    echo ""<br/>"";
    echo ""<a href=\""index.php\"">Back to login</a>"";
} 

mysql_close($con);    
?> 
</body>
</html>

I used the command echo $password; to show me if the password in the database matched with the script. They did. What am I doing wrong?
","It seems like you've misunderstood salts, since you're setting $salt to be the password.
A salt should be a completely random string that's stored in a user record along with the password hash. A new unique salt should be generated for every user. So you need to add a new column to your database, called ""password_salt"" or similar.
Rather than trying to use the password in the SELECT query and see if you get any records, you actually need to just SELECT using the username/user_id in order to get the password hash and salt so that you can then use those to determine if the user entered the correct password.
When you sign up new users you should add the fields with values like this,
<?php
// This is registeruser.php

$salt = substr(sha1(uniqid(rand(), true)), 0, 20);
$pass = $_POST['password'];
$pass_to_store = hash(""sha256"", $salt.$pass);

// Then issue a DB query to store the $salt and $pass_to_store in the user record.
// Do not store $pass, you don't need it.
// e.g. INSERT INTO users ('username', 'password_salt', 'password_hash') VALUES (:username, :salt, :pass_to_store);
?>

Then to check the password is the same when logging in, you do something like this,
<?php
// This is loginuser.php

$user = // result from SQL query to retrieve user record
// e.g. SELECT password_hash, password_salt FROM users WHERE username='from_user'

$salt_from_db = $user['password_salt'];
$pass_from_db = $user['password_hash'];
if ($pass_from_db == hash(""sha256"", $salt_from_db.$_POST['password'])
{
    // Password matches!
}
?>

Don't forget to sanitize user inputs and anything you're putting into your database. You might want to look into using prepared statements instead of having to remember to use mysql_real_escape_string all the time.
","265","<php><mysql><hash><salt>","1","1","3","2012-12-22 03:37:31","4674841","12","","10018","","2011-01-12 23:26:08","2011-01-12 22:30:13",""
"54673386","How to use Salt pkg.installed module to install local rpm","We have some .rpm applications we wanted to install on CentOS 6 & 7 machines.  The machines don't have access to internet.  How can we write a state that would make sure the application is installed? Here's my code:
Install Nessus Agent:
  pkg.installed:
    - name: NessusAgent
    - sources: '[{""NessusAgent"": ""salt:///root/NessusAgent-7.1.1-es{{ osmajorrelease }}.x86_64.rpm""}]'

Error I get when I ran the state:
     Comment: An exception occurred in this state: Traceback (most recent call last):
                File ""/usr/lib/python2.7/site-packages/salt/state.py"", line 1913, in call
                  **cdata['kwargs'])
                File ""/usr/lib/python2.7/site-packages/salt/loader.py"", line 1898, in wrapper
                  return f(*args, **kwargs)
                File ""/usr/lib/python2.7/site-packages/salt/states/pkg.py"", line 1617, in installed
                  if next(iter(list(x.keys()))) in targets]
              AttributeError: 'unicode' object has no attribute 'keys'

What is the correct way to install local rpm packages with a Salt state?
","I got it to work by rewriting the ""sources"" parameter:
Install Nessus Agent:
  pkg.installed:
    - name: NessusAgent
    - enable: True
    - sources:
      - NessusAgent: salt:///files/nessus/NessusAgent-7.1.1-es7.x86_64.rpm

","262","<yum><salt>","0","0","1","2019-03-08 14:39:18","","1","","","","","2019-02-13 15:09:46",""
"19363000","Using php hash random salt, store salt on temporary user table?","I'm creating an login system in php. I have a custom table for e-mail check, which gets the user register data, and then move it to the table user.
I would like to know if it's safe to create the random salt and store it with hashed password on temporary user table, or it's better to store only normal password them hash it and create salt after the user confirmation? 
I was thinking that an user could some how make a mass ""register"" with various e-mail address (which can't be real validate) and slow down the server (because of the salt and hash create functions). By the way, creating the hash after leads to a non trigger (I'm using MySQL) situation, because some of the values must the added (created) manually.
","You could generate a long random salt, prepend the salt to the password and hash it with a standard cryptographic hash function such as SHA256. Then save both the salt and the hash in the user's database record. NEVER store a plaintext password!
When you want to validate the user's login, all you need to do is retrieve the user's salt and hash from the database, prepend the salt to the given password and hash it using the same hash function. Then compare the hash of the given password with the hash from the database. If they match, the password is correct. Otherwise, the password is incorrect.
Do NOT:

Use outdated hash functions like MD5 or SHA1
Use insecure versions of crypt ($1$, $2$, $2a$, $2x$, $3$)
Use any algorithm that you designed yourself. Only use technology that is in the public domain and has been well-tested by experienced cryptographers

More Information
","259","<php><hash><salt>","-2","1","2","2013-10-15 07:18:24","","4","","1415724","","2013-10-14 14:59:17","2013-10-14 14:49:33",""
"19363000","Using php hash random salt, store salt on temporary user table?","I'm creating an login system in php. I have a custom table for e-mail check, which gets the user register data, and then move it to the table user.
I would like to know if it's safe to create the random salt and store it with hashed password on temporary user table, or it's better to store only normal password them hash it and create salt after the user confirmation? 
I was thinking that an user could some how make a mass ""register"" with various e-mail address (which can't be real validate) and slow down the server (because of the salt and hash create functions). By the way, creating the hash after leads to a non trigger (I'm using MySQL) situation, because some of the values must the added (created) manually.
","If you are really concerned about a server slow-down, then simply wait until the user clicks on the confirmation link. Then let the user choose his own password and store its hash. This way you can avoid the salt and hash generation completely (for fake accounts) and have the advantage that you do not have to generate a machine password.
What you should not do is, to store a password-hash without a good salt. If you read from DEV_URANDOM (do not use DEV_RANDOM), then your server should have no problem with blocking and should not slow down because of the salt generation.
Keep in mind, that there are other ways to slow down your server, an attacker could for example use the login form to provoke hash calculations.
By the way, with an appropriate function like password_hash() there is no reason to generate the salt on your own, this function will do its best to generate a safe salt, and it will use a slow key-derivation function (BCrypt) which should be used for passwords (not SHA-* or even MD5).
","259","<php><hash><salt>","-2","1","2","2013-10-15 07:18:24","","4","","1415724","","2013-10-14 14:59:17","2013-10-14 14:49:33",""
"12015685","Can I use this to generate a PHP CRYPT_BLOWFISH salt?","I'm basically using this:
$chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ./';
$numChars = strlen($chars);
$salt = '$2a$12$';

for($i = 0; $i < 22; ++$i) {
    $salt .= $chars[mt_rand(0, $numChars - 1)];
}
Is it okay to use that?
","That's good to use. You working too hard on randomizing your salt though.
You could always do something shady like this $salt = md5(mt_rand()) :)
Just use something like this when you want to save the password on your next step.
    $encryptedPassword = crypt($userPassword, $salt);

This should default to blowfish if you have an up to date version of PHP
","258","<php><salt><blowfish>","1","0","4","2013-07-22 19:06:29","","7","","","","","2012-08-18 03:51:08",""
"12015685","Can I use this to generate a PHP CRYPT_BLOWFISH salt?","I'm basically using this:
$chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ./';
$numChars = strlen($chars);
$salt = '$2a$12$';

for($i = 0; $i < 22; ++$i) {
    $salt .= $chars[mt_rand(0, $numChars - 1)];
}
Is it okay to use that?
","I don't know whether it's okay to use, but since mt_rand is based on system time it's predictable.  It'd be better to use a superior random generation algorithm like openssl_random_pseudo_bytes or the /dev/random utility if it's available.
See: https://stackoverflow.com/a/6337021/454533
","258","<php><salt><blowfish>","1","0","4","2013-07-22 19:06:29","","7","","","","","2012-08-18 03:51:08",""
"12015685","Can I use this to generate a PHP CRYPT_BLOWFISH salt?","I'm basically using this:
$chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ./';
$numChars = strlen($chars);
$salt = '$2a$12$';

for($i = 0; $i < 22; ++$i) {
    $salt .= $chars[mt_rand(0, $numChars - 1)];
}
Is it okay to use that?
","With Blowfish you only need 21 chars for the salt the rest is forgotten.
This part $2a$12$ is not a salt its the algorithm and cost(iterations of hash).
Your salt can be made simply by sha1 and then return the first 21 chars:
$salt = substr(sha1($_SERVER['HTTP_HOST'].uniqid().microtime(true)),0,21);
So something like:
$algo = '$2a$12$'; //Keep this safe

//store along side hash as the salt, for future compares
$salt = substr(sha1($_SERVER['HTTP_HOST'].uniqid().microtime(true)),0,21);

$hash = crypt('The string to be hashed', $algo.$salt.'$');

","258","<php><salt><blowfish>","1","0","4","2013-07-22 19:06:29","","7","","","","","2012-08-18 03:51:08",""
"12015685","Can I use this to generate a PHP CRYPT_BLOWFISH salt?","I'm basically using this:
$chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ./';
$numChars = strlen($chars);
$salt = '$2a$12$';

for($i = 0; $i < 22; ++$i) {
    $salt .= $chars[mt_rand(0, $numChars - 1)];
}
Is it okay to use that?
","For PHP version 5.3.7 or higher I belive this is the best:
$blowfish_salt = ""$2y$10$"".bin2hex(openssl_random_pseudo_bytes(22));

For PHP version 5.5 or higher just use the new password_hash() function with automatic salt creation.
","258","<php><salt><blowfish>","1","1","4","2013-07-22 19:06:29","","7","","","","","2012-08-18 03:51:08",""
"9366162","how do I store the HMAC key irretrievably in the database?","I'm trying to build a API service for a system that (due to many reasons) does not have the main database in a completely secured fashion.
So, my question is - how do I salt the HMAC in such a manner such that even if the main database is compromised, you still cannot use the API key. This effectively means that the HMAC key is not preshared in plaintext but in some other way, but I'm not able to figure out how.
","If your storage is insecure, you're going to have an impossible time encrypting it and still being able to decrypt it later unless you either store its encryption key somewhere (which, from your description, would still be insecure), or receive the key from the remote side of your service.
","258","<hash><digital-signature><salt><hmac>","0","0","1","2012-02-20 18:15:06","","0","","","","","2012-02-20 18:10:13",""
"14516221","Ultimate password salt","So recently I have been doing tons of research on how to secure passwords. I believe I understand the basics of it. As such I am attempting to write my own function to secure a password in php. 
But I am somewhat confused when it comes to salting a password. We create a random unique salt and append it to a password and then hash it, and finally store the unhashed salt and hashed password/salt combination together in the database. This increases the search space of the hacker if he obtains access to the database and our hashed passwords. 
So this seems like complete overkill of security, but everywhere I see the salt is always appended to the front or back of the password anyways. So looking at a SINGLE user's password this unique salt doesn't affect the search space does it? Although since each user has a unique salt the overall search space of EVERY user is dramatically increased.
Wouldn't it be more secure to create an algorithm that inserts the salt to a predictable, semi-random place in the password such as the length of the username/2? For example here is the steps of my proposed securing function:
Create a random salt
take username length %(mod) password length
insert the salt at the spot determined
hash

Example run:
random salt = 12345
len(""imauserwithalongname"") % len(""mypass"") = 2
valueToHash = my12345pass

Now our cracker has no idea where to put the salt without seeing our php/source, which (correct me if I am wrong) is much harder to gain access to than the database.
Also I know security should depend on the security of the key not secrecy of the algorithm, however I see nothing wrong with adding layers based on it, as long as the entire system does not depend on secrecy of the algorithm.
EDIT: Would doing this dramatically increase the search space of a cracker?
And what if we placed the salt in a place that depended on the length of the password, would that not destroy the purpose of using dictionary attacks, even on a per user basis?
","I personally think you're overdoing it. The most efficient way to salt a hash would be to have a dynamic, record-specif one AND a static one stored in a read-only file on the system. This is a very efficient yet secure way of salting hashes.
","257","<php><passwords><salt>","2","0","4","2013-01-25 09:01:57","14517978","9","","1036813","","2013-01-25 06:57:19","2013-01-25 06:01:09",""
"14516221","Ultimate password salt","So recently I have been doing tons of research on how to secure passwords. I believe I understand the basics of it. As such I am attempting to write my own function to secure a password in php. 
But I am somewhat confused when it comes to salting a password. We create a random unique salt and append it to a password and then hash it, and finally store the unhashed salt and hashed password/salt combination together in the database. This increases the search space of the hacker if he obtains access to the database and our hashed passwords. 
So this seems like complete overkill of security, but everywhere I see the salt is always appended to the front or back of the password anyways. So looking at a SINGLE user's password this unique salt doesn't affect the search space does it? Although since each user has a unique salt the overall search space of EVERY user is dramatically increased.
Wouldn't it be more secure to create an algorithm that inserts the salt to a predictable, semi-random place in the password such as the length of the username/2? For example here is the steps of my proposed securing function:
Create a random salt
take username length %(mod) password length
insert the salt at the spot determined
hash

Example run:
random salt = 12345
len(""imauserwithalongname"") % len(""mypass"") = 2
valueToHash = my12345pass

Now our cracker has no idea where to put the salt without seeing our php/source, which (correct me if I am wrong) is much harder to gain access to than the database.
Also I know security should depend on the security of the key not secrecy of the algorithm, however I see nothing wrong with adding layers based on it, as long as the entire system does not depend on secrecy of the algorithm.
EDIT: Would doing this dramatically increase the search space of a cracker?
And what if we placed the salt in a place that depended on the length of the password, would that not destroy the purpose of using dictionary attacks, even on a per user basis?
","Inserting the salt in a different spot doesn't increase the search space.  If you are using a random salt for each user, a hacker does not know what each salt is per user anyway.  The knowledge of its position in the unhashed string doesn't matter.
Use bcrypt or PBKDF2.  Both algorithms enforce a salt and number of cycles.  If you're patient enough, PHP 5.5 will just let you do password_hash($password).
","257","<php><passwords><salt>","2","3","4","2013-01-25 09:01:57","14517978","9","","1036813","","2013-01-25 06:57:19","2013-01-25 06:01:09",""
"14516221","Ultimate password salt","So recently I have been doing tons of research on how to secure passwords. I believe I understand the basics of it. As such I am attempting to write my own function to secure a password in php. 
But I am somewhat confused when it comes to salting a password. We create a random unique salt and append it to a password and then hash it, and finally store the unhashed salt and hashed password/salt combination together in the database. This increases the search space of the hacker if he obtains access to the database and our hashed passwords. 
So this seems like complete overkill of security, but everywhere I see the salt is always appended to the front or back of the password anyways. So looking at a SINGLE user's password this unique salt doesn't affect the search space does it? Although since each user has a unique salt the overall search space of EVERY user is dramatically increased.
Wouldn't it be more secure to create an algorithm that inserts the salt to a predictable, semi-random place in the password such as the length of the username/2? For example here is the steps of my proposed securing function:
Create a random salt
take username length %(mod) password length
insert the salt at the spot determined
hash

Example run:
random salt = 12345
len(""imauserwithalongname"") % len(""mypass"") = 2
valueToHash = my12345pass

Now our cracker has no idea where to put the salt without seeing our php/source, which (correct me if I am wrong) is much harder to gain access to than the database.
Also I know security should depend on the security of the key not secrecy of the algorithm, however I see nothing wrong with adding layers based on it, as long as the entire system does not depend on secrecy of the algorithm.
EDIT: Would doing this dramatically increase the search space of a cracker?
And what if we placed the salt in a place that depended on the length of the password, would that not destroy the purpose of using dictionary attacks, even on a per user basis?
","I think you misunderstood the purpose of the salt. The salt does not increase the search space for an attacker, after all it is stored plaintext with the hash-value. The purpose of a salt is, that an attacker cannot build one single rainbowtable, and then retrieve all stored passwords.
If you would append the same salt to every password, then the attacker cannot simply use an existing precalculated rainbow-table from the internet, he has to build a new rainbow-table for exactly this salt (existing rainbow-tables will contain passwords like ""horse"", but not passwords like horse8ze*w398dhek3+qmxno0). Unfortunately this single rainbow-table can then be used to get all passwords.
So we use a unique salt for every password. An attacker would have to build a separate rainbow-table for each password now, but why should he continue with building the table, when he already found a match (?), he cannot reuse the table later for other passwords. In other words, brute-force is faster than building a rainbow-table, so we made rainbow-tables useless.
So the salt should be unique for each password and if possible it should be unpredictable. Those criterias are difficult to fulfill with a deterministic computer, the best you can do is, to use the random source of the operating system to build the salts. Good hash algorithms for passwords like BCrypt and PBKDF2 repeat the hashing to become slow, and combine password and original salt in each iteration. It is not just a concatenation of password + salt.
Your idea about putting the salt somewhere secret does add a secret (where is the salt?), that will work as long as the attacker doesnt know your code. Getting the database (SQL-injection) is indeed easier than gaining access to the code, but the same goal can be achieved much easier with a pepper.
I tried to sum up this in a tutorial, maybe you want to have a look at it.
","257","<php><passwords><salt>","2","0","4","2013-01-25 09:01:57","14517978","9","","1036813","","2013-01-25 06:57:19","2013-01-25 06:01:09",""
"14516221","Ultimate password salt","So recently I have been doing tons of research on how to secure passwords. I believe I understand the basics of it. As such I am attempting to write my own function to secure a password in php. 
But I am somewhat confused when it comes to salting a password. We create a random unique salt and append it to a password and then hash it, and finally store the unhashed salt and hashed password/salt combination together in the database. This increases the search space of the hacker if he obtains access to the database and our hashed passwords. 
So this seems like complete overkill of security, but everywhere I see the salt is always appended to the front or back of the password anyways. So looking at a SINGLE user's password this unique salt doesn't affect the search space does it? Although since each user has a unique salt the overall search space of EVERY user is dramatically increased.
Wouldn't it be more secure to create an algorithm that inserts the salt to a predictable, semi-random place in the password such as the length of the username/2? For example here is the steps of my proposed securing function:
Create a random salt
take username length %(mod) password length
insert the salt at the spot determined
hash

Example run:
random salt = 12345
len(""imauserwithalongname"") % len(""mypass"") = 2
valueToHash = my12345pass

Now our cracker has no idea where to put the salt without seeing our php/source, which (correct me if I am wrong) is much harder to gain access to than the database.
Also I know security should depend on the security of the key not secrecy of the algorithm, however I see nothing wrong with adding layers based on it, as long as the entire system does not depend on secrecy of the algorithm.
EDIT: Would doing this dramatically increase the search space of a cracker?
And what if we placed the salt in a place that depended on the length of the password, would that not destroy the purpose of using dictionary attacks, even on a per user basis?
","
As such I am attempting to write my own function to secure a password
  in php.

Woah woah, hold it right there.
There's a saying passed down from cryptographers to us mere mortals which has held true for many many years. The saying goes like this:

Do not invent your own crypto.

Say it out loud, then say it again.
I know you're only trying to secure your passwords, but I had to get that out of the way. There are lots and lots of tried and tested methods to do what you want to achieve. 
I appreciate you've done some research, but the internet is full of terrible terrible information, so I'm going to point you towards some useful articles.

Check out ircmaxell's security related
blogs.

A nice short list.
Here's some keywords to help you.

Bcrypt
Scrypt (someone please unstrike this when PHP supports it)

Again a very short list.
To address your specific concern. Salts are not needed to be kept private, as you say they are designed to stop attackers precomputing tables of valid password/hash combinations. However if you use a weak hashing algorithm they lose their value very quickly.
Security through obscurity is not as great as it seems. If a hacker gains access to your DB, the odds are quite high that they will also gain access to your filesystem. If they gain access to your source your custom method of storing passwords is a moot point.
In summary, custom algorithm + weak hash = insecure.
Instead you want to use tried and tested key derivation functions / key strengthening algorithms.
These are designed to make the computer work really hard to generate the hash, and makes it very difficult for an attacker to brute force a password.
Bcrypt stores the salt next to the password, and is proven to be very secure. Secure enough in fact that it is currently the recommended way to hash passwords by security experts.
In PHP 5.5 a simple password hashing API has been introduced based on Bcrypt, and for versions under 5.5 there is a password hashing compatibility library that does exactly the same thing.
That should be enough for you.
","257","<php><passwords><salt>","2","0","4","2013-01-25 09:01:57","14517978","9","","1036813","","2013-01-25 06:57:19","2013-01-25 06:01:09",""
"17045663","Obtaining an AES ""salt"" from the encrypted text and the unencrypted text","So, I'm experimenting a bit with secure python programming if there is such a thing :D). This is half a real world project, and half just a training exercise. So both theory and practical advice is appreciated. 
I am using an AES salted encryption script which encrypts text in the manner ...
data = ""hello""
encrypted_text = encryption(data, salt_word)
print encrypted_text (responds with ""huio37*\xhuws%hwj2\xkuyq\x#5tYtd\xhdtye"")
plain_text =  decryption(encrypted_text, salt_word)
print plain_text (responds with ""hello"")

QUESTION: If you know the values of ""encrypted_text"" and ""plain_text ""...can you reverse engineer the ""salt_word"". AND if so, how hard is it (12 seconds on a PC, or 20 years on a Cray?)
My understanding from the entire point of AES is, no you can't. But I'm just not that familiar. 

I'm using an insignificantly modified version of the script here:
Encrypt / decrypt data in python with salt
Basically, it uses the ""salt"" to encrypt ""data"". salt is a string, and data comes out as a string of encrypted characters. 
Using decrypt, with the same salt string, returns the data to normal text. 
","When you say salt with AES, what specifically are you talking about? Is this the IV to CBC or CTR mode? Is it a salt used for key generation with a passphrase (PBKDF2)? 
In either case, salt's aren't usually kept secret. IV's can be transmitted in the clear, and with hashing schemes, are usually stored along with the hash (otherwise it'd be impossible to compute the hash a second time). 
I've given a previous answer as to why it's safe to transmit IV's in the clear, which you can find here.
","256","<encryption><aes><salt>","0","1","1","2013-06-13 07:54:14","17045748","2","","-1","","2017-05-23 11:57:24","2013-06-11 13:42:51",""
"43276206","Salt states using tags from salt-cloud in AWS","I have some salt states that are applied to some specific minions using the minion id.
Now I am moving to a cloud provider, and need to apply this states based on tags that salt-cloud can set.
IE. I have an instance runnning in AWS (not provision by salt-stack), I can saltify it with salt-cloud and saltify module, and now I can recognize my minion:
root@instance1:~# salt instance1 test.ping
instance1:
    True


root@instance:~# salt-cloud -f get_tags my-ec2-eu-west-private-ips resource_id=instance1_awsid
my-ips:
    ----------
    ec2:
        |_
          ----------
          key:
              TagName1
          resourceId:
              instance1_awsid
          resourceType:
              instance
          value:
              Value1
        |_
          ----------
          key:
              TagName1
          resourceId:
              instance1_awsid
          resourceType:
              instance
          value:
              Value2

I wish to apply my states based on this values:
IE: instead of the clasic:
salt instance1 state.highstate

or
salt instance1 state.sls configure.service

I wish to do something like:
salt TagName1=Value1 state.highstate

or
salt TagName1=Value1 state.sls configure.service

","I will answer myself and maybe save some time to others.
Looks like you cannot use that tags to provide states, however, you can use some of the modules from salt-contrib, to add this tags to the grain items.
https://github.com/saltstack/salt-contrib/tree/master/grains
","256","<amazon-ec2><salt><salt-stack><salt-cloud>","0","1","1","2017-04-12 10:50:23","","3","","","","","2017-04-07 10:47:30",""
"43732867","salt file.directoy_exists check in a loop","Trying to loop over a list of folder to check if the directory exists and then to clean that directory (remove all files).
{% set FOLDERS_TO_CLEAN = ['C:\Test\Folder1'] %}
{% for FOLDER in FOLDERS_TO_CLEAN %}
{% if salt['file.directory_exists']({{ FOLDER }}) %}
{{ FOLDER }}_delete:
file.directory:
  - name: {{ FOLDER }}
  - clean: True
  - failhard: True
{% endif %}
{% endfor %}

The problematic line is the third line. With the variable FOLDER that ends up in a syntax error but when i change that to my test string it works. Any idea what i can change so that it works?
","You need to have single quotes around {{ FOLDER }} in the if statement.
Like this:
{% set FOLDERS_TO_CLEAN = ['C:\Test\Folder1'] %}
{% for FOLDER in FOLDERS_TO_CLEAN %}
{% if salt['file.directory_exists']('{{ FOLDER }}') %}
{{ FOLDER }}_delete:
file.directory:
  - name: {{ FOLDER }}
  - clean: True
  - failhard: True
{% endif %}
{% endfor %}

","254","<salt><salt-stack>","1","2","1","2017-05-02 09:52:11","43734894","0","","","","","2017-05-02 07:55:45",""
"33305418","generating password with crypt (32-bits vs 64-bit)","I'm using this function to generate a password:
function generarPassword($password, $cost=11){
    $salt = strtr(base64_encode(mcrypt_create_iv(16, MCRYPT_DEV_URANDOM)), '+', '.');
    $salt='$'.implode('$',array(""2y"",str_pad($cost,2,""0"",STR_PAD_LEFT),$salt));
    return crypt($password,$salt);
}

My problem is that when I use it on a 64-bit server, the result is this:
$2y$11$1ws6drmcqHCWG8wj5bm5s.R8Opc0.JEjXy0.P9UsHjqoxjZQ5GYLW

And when I use it on a 32-bit server, the result is this:
$2uUq69/OVG3M

So, I have two questions:

Why is that happening? the $salt is the same length in both
Is there any security problem with the 32-bit password?

Thanks!
","
CRYPT_BLOWFISH - Blowfish hashing with a salt as follows: ""$2a$"",
  ""$2x$"" or ""$2y$"", a two digit cost parameter, ""$"", and 22 characters
  from the alphabet ""./0-9A-Za-z"". Using characters outside of this
  range in the salt will cause crypt() to return a zero-length string
PHP before 5.3.7 only support ""$2a$"" as the salt prefix: PHP 5.3.7

Your $salt does not meet the 22 characters from the alphabet constraint of the blowfish algorithm.  You need to review your processes on generating a proper salt.
$salt = strtr(base64_encode(mcrypt_create_iv(16, MCRYPT_DEV_URANDOM)), '+', '.');
echo $salt.' ('.strlen($salt).')';
// example: D3Zc0fv8BBLKYnpH0iSV0w== (24)

Secondly, you are using a prefix $2y$ which is only supported after PHP 5.3.7.  Both of these are concerns you need to address if you're using this code on two different systems. 
","252","<php><security><salt><crypt>","0","5","1","2015-10-23 15:21:38","","1","","2053537","","2015-10-23 15:21:38","2015-10-23 14:55:14",""
"4557892","Looking to arrive at a usable solution for password salting in a PHP/MySQL application?","After reading about password hashing/salting for an entire day (no lie!), I'm in need of arriving at a solution that works, can be used consistently, and is about secure enough for a variety of different sites/applications that are using a shared codebase.
So, here's an idea of a MySQL user table:
users { id, username, password_hash, password_salt }

..and pseudo-ish code:
$s_algo       = 'sha1';
$i_iterations = 1000;
$s_password   = 'mypw123xyuACE&.!3';
$s_salt       = hash($s_algo,uniqid(mt_rand(),true));
$s_result     = $s_password;
for ($i       = 0; $i < $i_iterations; $i++) {
    $s_result    = hash($s_algo,$s_result . $s_salt);
}

echo 'Password: ' . $s_password . ""\n"";
echo 'Algorithm: ' . $s_algo . ""\n"";
echo 'Iterations Completed: ' . $i . ""\n"";
echo 'Salt  : ' . $s_salt . ""\n"";
echo 'Result: ' . $s_result . ""\n"";
echo 'Length: (Salt:) ' . strlen($s_salt) . ' (Result:) ' . strlen($s_result) . ""\n"";

The interaction (SQL) between PHP and MySQL is taken as read, as are the bits of PHP code that actually verify the given password from user-land against the stored (salted) hash at authentication time. It's not rocket science. This is from the perspective of already doing all that stuff, but with un-salted hash-only password storage.
From my reading I suspect there could be endless debates about what $s_algo should really be (ok, probably NOT md5), and also $i_iterations. So let's just consider that they are variables within this problem scenario, which might change according to the specific context, i.e. storage limitations, server load concerns, etc.
These things aside, is this methodology for creating a per-user-salted passwords in PHP generally sound? Does the 'for' loop need to be in there at all? Is the initial salt creation code ok? Is the salt-length overkill, storage-wise (equal to the eventual hash length). Please people, pick holes (but not too many!)..
Other thoughts:
- What about hash_hmac() - is that a critical improvement over multiple hash() iterations?
- PBKDF2?
","Sorry, I would've commented on the post but haven't got enough rep yet.
I'd use SHA256 for my hash algo and keep the iterations around 25. Any more than that and it's really overkill. I use a very similar solution for a framework that I've applied to half a dozen sites now. I chose to create an overly complicated random character generator, but I've used it in a lot of other places, including tokenizing financial data.
Another edit: Use a random character generator like this for your salt:
function randomChar($length) {
    $characters = array(""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", ""J"", ""K"", ""M"", ""N"", ""P"", ""Q"", ""R"", ""S"", ""T"", ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z"", ""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""j"", ""k"", ""l"", ""m"", ""n"", ""o"", ""p"", ""q"", ""r"", ""s"", ""t"", ""u"", ""v"", ""w"", ""x"", ""y"", ""z"", ""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""0"", ""~"", ""!"", ""@"", ""#"", ""%"", ""^"", ""&"", ""("", "")"", "":"", ""{"", ""["", ""]"", ""}"", ""|"", ""<"", "">"", ""."", "","", ""/"", ""?"", ""_"", ""+"", ""-"", ""="");
    $charactersNumber = count($characters);
    $charactersNumber--;
    $randomLength = 0;
    while ($randomLength < $length) {
        $currentCharacter = $characters[rand(0,$charactersNumber)];
        if ($currentCharacter == $previousCharacter) {
            $currentCharacter = $characters[rand(0,$charactersNumber)];
        }
        $random .= $currentCharacter;
        $previousCharacter = $currentCharacter;
        $randomLength++;
    }
    return $random;
}

Response to iteration question:
If x = hash(password + salt) and from then on x = hash(x + salt)
and 1 evaluation of x takes 10ms, then 2 would take 20 and so on.
So...
25 evaluations = 250ms
and 1000 = 10,000ms.
While it's not going to take 10ms for each one, even .5ms over 1000 is still half a second.
If you only accepted alphanumeric passwords, and a password was 8 characters long, each iteration would add 62^8 (if they hadn't yet found the password) more hashes because they would have to do another has for every single combination they tried.
","252","<php><passwords><hash><salt>","4","4","2","2012-07-26 05:05:25","","7","2","168868","","2012-07-26 05:05:25","2010-12-29 21:11:49",""
"4557892","Looking to arrive at a usable solution for password salting in a PHP/MySQL application?","After reading about password hashing/salting for an entire day (no lie!), I'm in need of arriving at a solution that works, can be used consistently, and is about secure enough for a variety of different sites/applications that are using a shared codebase.
So, here's an idea of a MySQL user table:
users { id, username, password_hash, password_salt }

..and pseudo-ish code:
$s_algo       = 'sha1';
$i_iterations = 1000;
$s_password   = 'mypw123xyuACE&.!3';
$s_salt       = hash($s_algo,uniqid(mt_rand(),true));
$s_result     = $s_password;
for ($i       = 0; $i < $i_iterations; $i++) {
    $s_result    = hash($s_algo,$s_result . $s_salt);
}

echo 'Password: ' . $s_password . ""\n"";
echo 'Algorithm: ' . $s_algo . ""\n"";
echo 'Iterations Completed: ' . $i . ""\n"";
echo 'Salt  : ' . $s_salt . ""\n"";
echo 'Result: ' . $s_result . ""\n"";
echo 'Length: (Salt:) ' . strlen($s_salt) . ' (Result:) ' . strlen($s_result) . ""\n"";

The interaction (SQL) between PHP and MySQL is taken as read, as are the bits of PHP code that actually verify the given password from user-land against the stored (salted) hash at authentication time. It's not rocket science. This is from the perspective of already doing all that stuff, but with un-salted hash-only password storage.
From my reading I suspect there could be endless debates about what $s_algo should really be (ok, probably NOT md5), and also $i_iterations. So let's just consider that they are variables within this problem scenario, which might change according to the specific context, i.e. storage limitations, server load concerns, etc.
These things aside, is this methodology for creating a per-user-salted passwords in PHP generally sound? Does the 'for' loop need to be in there at all? Is the initial salt creation code ok? Is the salt-length overkill, storage-wise (equal to the eventual hash length). Please people, pick holes (but not too many!)..
Other thoughts:
- What about hash_hmac() - is that a critical improvement over multiple hash() iterations?
- PBKDF2?
","I read an article yesterday in response to one of my questions on security here: http://chargen.matasano.com/chargen/2007/9/7/enough-with-the-rainbow-tables-what-you-need-to-know-about-s.html
It specifically says that the faster the encryption is the worst it is and it listed MD5 and SHA1 as some of the worst. Although they are microseconds apart, that converts to very long times in making a rainbow table. 
I read in php manuals this: http://www.php.net/manual/en/function.hash.php#89574 where the guy ran a test of each algo and came up with speeds of each one. And based on my readings and that I use RipeMD with a 50 character salt.
On the things you were asking:
 The thing is you are generating a random salt and then storing it in the database which seems unnecessarily redundant. I'd personally rather have one salt hidden in my php code rather then many unique salts nested in a database. Plus why are you hashing the salt? 
","252","<php><passwords><hash><salt>","4","1","2","2012-07-26 05:05:25","","7","2","168868","","2012-07-26 05:05:25","2010-12-29 21:11:49",""
"4150596","Passwords, salts and auths","If I have a random, 16 character long, alphanumeric salt (varying case) that is generated and stored per user, do I need a site wide salt as well?
In other words, is this good?
sha1($user_salt . $password)

should I do this instead?
sha1($user_salt . $password . $site_salt)

Also,
At the moment, I have an encrypted cookie, that looks up a session in a DB. In this session, there is an user_id and an user_token. I then query the DB using the user_id -- if the sha1 of the user_id+hash in DB === user_token, then the user is allowed through.
I do the second query for the user_id on every page load so that if I delete, ban or change the password of an user, the action has immediate effect.
This is what I've come up looking through websites and questions here. What do you think? Did I miss something?
I need to add role checking but that would probably add yet another query (3rd one just for auth). Any tips?
","No, you do not need a sitewide salt. The salt is used to make rainbow tables useless. A site wide salt could be used if you really wanted to, but I don't think it is necessary.
I think if your database was compromised and someone realised your passwords were hashed with a salt, they'd move onto the next site that had less security in place (unless of course you are running a site worth hacking - chances are you aren't :P )
","251","<php><session><authentication><passwords><salt>","2","7","5","2013-02-03 23:02:18","","0","","1921273","","2013-02-03 23:02:18","2010-11-11 01:05:55",""
"4150596","Passwords, salts and auths","If I have a random, 16 character long, alphanumeric salt (varying case) that is generated and stored per user, do I need a site wide salt as well?
In other words, is this good?
sha1($user_salt . $password)

should I do this instead?
sha1($user_salt . $password . $site_salt)

Also,
At the moment, I have an encrypted cookie, that looks up a session in a DB. In this session, there is an user_id and an user_token. I then query the DB using the user_id -- if the sha1 of the user_id+hash in DB === user_token, then the user is allowed through.
I do the second query for the user_id on every page load so that if I delete, ban or change the password of an user, the action has immediate effect.
This is what I've come up looking through websites and questions here. What do you think? Did I miss something?
I need to add role checking but that would probably add yet another query (3rd one just for auth). Any tips?
","Utilizing a ""site-wide"" salt might be useful.  This means that not only would your database have to be compromised, but your source code would have to be as well in order to really understand your password scheme.
I call this a ""salt"" and ""pepper"" approach.  The salt stored per user, the pepper is the site-wide value.
Salt
The purpose of a unique per-person salt is to invalidate rainbow tables.  The salt is typically stored in the database and either appended or prepended to the password.  Someone aware of this can still run dictionary based attacks per user, but the good thing about a salt is that they cannot use a rainbow table for such common dictionary terms.
Pepper
The purpose of ""pepper"" as I call it is to add a potentially unknown string to every password which means a brute force dictionary attack taking salt into consideration would just plain miss because of lack of pepper.  It also means that a brute force per character check would need to ""discover"" a longer password which could take longer.  These benefits disappear as soon as the pepper is discovered.
","251","<php><session><authentication><passwords><salt>","2","2","5","2013-02-03 23:02:18","","0","","1921273","","2013-02-03 23:02:18","2010-11-11 01:05:55",""
"4150596","Passwords, salts and auths","If I have a random, 16 character long, alphanumeric salt (varying case) that is generated and stored per user, do I need a site wide salt as well?
In other words, is this good?
sha1($user_salt . $password)

should I do this instead?
sha1($user_salt . $password . $site_salt)

Also,
At the moment, I have an encrypted cookie, that looks up a session in a DB. In this session, there is an user_id and an user_token. I then query the DB using the user_id -- if the sha1 of the user_id+hash in DB === user_token, then the user is allowed through.
I do the second query for the user_id on every page load so that if I delete, ban or change the password of an user, the action has immediate effect.
This is what I've come up looking through websites and questions here. What do you think? Did I miss something?
I need to add role checking but that would probably add yet another query (3rd one just for auth). Any tips?
","It sounds like you're trying to recreate DIGEST-MD5 or SCRAM.  Both of these allow you to store a non-password string that is unique to your site and challenge/response with another party to verify that they have the password string, without sending the password string on the wire.
","251","<php><session><authentication><passwords><salt>","2","-1","5","2013-02-03 23:02:18","","0","","1921273","","2013-02-03 23:02:18","2010-11-11 01:05:55",""
"4150596","Passwords, salts and auths","If I have a random, 16 character long, alphanumeric salt (varying case) that is generated and stored per user, do I need a site wide salt as well?
In other words, is this good?
sha1($user_salt . $password)

should I do this instead?
sha1($user_salt . $password . $site_salt)

Also,
At the moment, I have an encrypted cookie, that looks up a session in a DB. In this session, there is an user_id and an user_token. I then query the DB using the user_id -- if the sha1 of the user_id+hash in DB === user_token, then the user is allowed through.
I do the second query for the user_id on every page load so that if I delete, ban or change the password of an user, the action has immediate effect.
This is what I've come up looking through websites and questions here. What do you think? Did I miss something?
I need to add role checking but that would probably add yet another query (3rd one just for auth). Any tips?
","sha1($user_salt . $password)

This is very common, but it isn't good.
A typical end user password is ~8 characters long, and mostly keeps to the 7-bit ASCII character set. So a typical password is about 64 bit of random data or less. Modern parallel brute-force attacks can defeat this, by simply trying out all possible passwords. Using a SHA256 or SHA512 instead does not materially change the outcome because the end users password is the limiting factor.
From my reading here at Stack Overflow, there seems to be 2 schools of thought regarding password storage:

You should use a computationally expensive approach like BCrypt or scrypt. That way brute force attacks become infeasible. This works, at the expense of requiring much more CPU power from your server when a user logs in. See this excellent article for an overview of the rationale.
The second school of thought is that while BCrypt and scrypt certainly work, they are undesirable for multiuser apps because they take too much CPU time -- making the end user wait, or potentially opening up for a denial-of-service attack by sending lots of authentication requests. See the lengthy discussion here (be sure to read the comments as well).


At the moment, I have an encrypted cookie, that looks up a session in a DB. In this session, there is an user_id and an user_token. I then query the DB using the user_id -- if the sha1 of the user_id+hash in DB === user_token, then the user is allowed through.

One main point of secure session handling that you're not mentioning is SSL everywhere to guard against Sidejack. And User IDs are generally not good for security, because they are often guessable (auto-incrementing primary key) or they end up in URLs etc by mistake. Instead of rolling your own session handling system, isn't there a peer reviewed codebase you could use? 
","251","<php><session><authentication><passwords><salt>","2","0","5","2013-02-03 23:02:18","","0","","1921273","","2013-02-03 23:02:18","2010-11-11 01:05:55",""
"4150596","Passwords, salts and auths","If I have a random, 16 character long, alphanumeric salt (varying case) that is generated and stored per user, do I need a site wide salt as well?
In other words, is this good?
sha1($user_salt . $password)

should I do this instead?
sha1($user_salt . $password . $site_salt)

Also,
At the moment, I have an encrypted cookie, that looks up a session in a DB. In this session, there is an user_id and an user_token. I then query the DB using the user_id -- if the sha1 of the user_id+hash in DB === user_token, then the user is allowed through.
I do the second query for the user_id on every page load so that if I delete, ban or change the password of an user, the action has immediate effect.
This is what I've come up looking through websites and questions here. What do you think? Did I miss something?
I need to add role checking but that would probably add yet another query (3rd one just for auth). Any tips?
","
At the moment, I have an encrypted
  cookie, that looks up a session in a
  DB. In this session, there is an
  user_id and an user_token. I then
  query the DB using the user_id -- if
  the sha1 of the user_id+hash in DB ===
  user_token, then the user is allowed
  through.
I do the second query for the user_id
  on every page load so that if I
  delete, ban or change the password of
  an user, the action has immediate
  effect.

Commenting only in case there is something wrong here that no-one else caught:

You mention that the cookie is encrypted
You meantion sha1 of user_id+hash
You mention a second query (it isn't clear to me what either query is) that is sensitive to password changes.

It sounds a lot like you are storing the password or a password hash in the cookie, rather than storing a session identifier in the cookie.  I would recommend against that.  The biggest reason is that using a derivative of the password like this stands a good chance of turning the derivative into a password equivalent.  
In other words, all an attacker needs is the hash of the password, and not the password itself in order to effectively authenticate.  The problem with this is that the hash of the password doesn't change except when the password changes (not under your control), whereas a session ID changes whenever you darn well please.
My recommendation (if you want a session to be sensitive to password changes) is to change the session ID whenever the password changes.
","251","<php><session><authentication><passwords><salt>","2","0","5","2013-02-03 23:02:18","","0","","1921273","","2013-02-03 23:02:18","2010-11-11 01:05:55",""
"37741553","Hashing with random salt in c#?","I'm using the CryptSharp Library in my .NET (C#) client to hash a user's password with a randomly generated salt (Blowfish).
I then proceed to send the hashed password to my remote server where it is stored in a MySQL database.
When I attempt to login with the same plain text password there is a hash mismatch between what is sent and what is stored in the database. (Most likely due to the salt changing each time)
I do not want to send an unencrypted plain-text password to my PHP end, how can I achieve this without using a static salt?
Hashing (C#):
string passHash = Crypter.Blowfish.Crypt(Password.Text, Crypter.Blowfish.GenerateSalt());

I'd prefer not to have to create a new column to store the client's salt at registration, but if I must I will.
","The answer is quite simple and un-related to the language being used: 

If you want the server to store hashed passwords in a database, you can store them with any hashing function (I'd recommend SHA256 or BCrypt if you want to make brute-forcing take longer. The benefit to BCrypt is the salt and number of iterations is stored in the hash directly so requires no extra column in your database). 
If you want to salt them, you'll need to store a salt column and transmit it to the client to use during hashing. Generally you'll use a random salt for each user, and it will only change when the password is changed. This is recommended but not required - it makes rainbow table attacks useless.
If you're worried about transmission over the wire, and not particularly about your database, you can generate a random salt on the server during authentication and only use it that one time - but the server will need the original password for comparison.

You can also combine all of these methods, although i don't think this is standard practice anywhere.
","250","<c#><php><hash><salt>","0","0","4","2016-08-30 06:57:19","","3","","575765","","2016-08-30 06:25:17","2016-06-10 06:42:43",""
"37741553","Hashing with random salt in c#?","I'm using the CryptSharp Library in my .NET (C#) client to hash a user's password with a randomly generated salt (Blowfish).
I then proceed to send the hashed password to my remote server where it is stored in a MySQL database.
When I attempt to login with the same plain text password there is a hash mismatch between what is sent and what is stored in the database. (Most likely due to the salt changing each time)
I do not want to send an unencrypted plain-text password to my PHP end, how can I achieve this without using a static salt?
Hashing (C#):
string passHash = Crypter.Blowfish.Crypt(Password.Text, Crypter.Blowfish.GenerateSalt());

I'd prefer not to have to create a new column to store the client's salt at registration, but if I must I will.
","You can use this:
var result = string.Empty;
using (var sha1 = new SHA1Managed())
{
    result = ToHex(sha1.ComputeHash(Encoding.ASCII.GetBytes(Password.Text)));
}

Where ToHex looks like this:
public static string ToHex(byte[] bytes)
{
    return string.Concat(bytes.Select(b => b.ToString(""X2"")));
}

The previous code does produce the same hash when called multiple times without requiring a salt to be involved.
There are other more secure versions of the SHA algorithm supported in the .NET framework such as SHA256Managed. Using SHA1 or SHA256 depends on your security requirements.
","250","<c#><php><hash><salt>","0","0","4","2016-08-30 06:57:19","","3","","575765","","2016-08-30 06:25:17","2016-06-10 06:42:43",""
"37741553","Hashing with random salt in c#?","I'm using the CryptSharp Library in my .NET (C#) client to hash a user's password with a randomly generated salt (Blowfish).
I then proceed to send the hashed password to my remote server where it is stored in a MySQL database.
When I attempt to login with the same plain text password there is a hash mismatch between what is sent and what is stored in the database. (Most likely due to the salt changing each time)
I do not want to send an unencrypted plain-text password to my PHP end, how can I achieve this without using a static salt?
Hashing (C#):
string passHash = Crypter.Blowfish.Crypt(Password.Text, Crypter.Blowfish.GenerateSalt());

I'd prefer not to have to create a new column to store the client's salt at registration, but if I must I will.
","The purpose of a crypted password is to securely store the password in the database. CryptSharp won't help you with securing transmission over the wire.
There are a number of approaches you could take, but the easiest is probably to communicate with the server over SSL. If you don't want to use a public CA, use a self-signed certificate and hook ServicePointManager.ServerCertificateValidationCallback to accept your own CA or certificate.
","250","<c#><php><hash><salt>","0","0","4","2016-08-30 06:57:19","","3","","575765","","2016-08-30 06:25:17","2016-06-10 06:42:43",""
"37741553","Hashing with random salt in c#?","I'm using the CryptSharp Library in my .NET (C#) client to hash a user's password with a randomly generated salt (Blowfish).
I then proceed to send the hashed password to my remote server where it is stored in a MySQL database.
When I attempt to login with the same plain text password there is a hash mismatch between what is sent and what is stored in the database. (Most likely due to the salt changing each time)
I do not want to send an unencrypted plain-text password to my PHP end, how can I achieve this without using a static salt?
Hashing (C#):
string passHash = Crypter.Blowfish.Crypt(Password.Text, Crypter.Blowfish.GenerateSalt());

I'd prefer not to have to create a new column to store the client's salt at registration, but if I must I will.
","To transfer the password from the client to the server, one needs an encrypted HTTPS/SSL connection. It will encrypt the user input before sending it to the client, so a ManInTheMiddle cannot eavesdrop. The hashing must be done on server side, at least a part of the hashing.
The CryptSharp supports the common storage format, and includes the salt in the resulting hash. Unfortunately there doesn't seem to exist a method for verification, which would extract the used salt, at least I couldn't find one.
Another library I can recommend is BCrypt.Net, there the salt is also stored together with the hash (no need for an extra field) and the verification is very straightforward: BCrypt.Verify(password, stored_hash)
","250","<c#><php><hash><salt>","0","0","4","2016-08-30 06:57:19","","3","","575765","","2016-08-30 06:25:17","2016-06-10 06:42:43",""
"2088565","How to specify a custom salt on Acegi with grails?","I have a need to specify a custom salt when encoding passwords with acegi 0.5.2 plugin for grails.
I have found a tutorial that shows how to use a ReflectionSaltSource using a parameter of the user (possibly the username).  However, I was unable to get that to work and I actually need to be able to control the salt more than just picking which property of a user to use.
Specifically, I need the salt to match the format <hard coded string>_<some user specific property>_<the password> and then have that string encoded.  This is necessary for compatibility with a legacy system.
Is this possible with acegi and grails?  If so, how?
","This will be in the 0.6 release of the plugin that'll go out later this week.
","249","<grails><spring-security><salt>","1","2","1","2010-06-01 16:07:09","2088647","0","","253412","","2010-01-18 19:40:30","2010-01-18 19:12:48",""
"44269576","salt encryption from C# to Swift 3","I have written the following code in swift to try and replicate something I have working in C#. I know I have gone wrong but I'm not exactly sure where.
The code is meant to encrypt a string and return an encrypted string. The encrypted string should remain the same every time. Unfortunately the webservice that this app connects to is a bit old and I have no control to change it.
Thank you for any assistance!
Swift code:
enum HMACAlgorithm {
    case MD5, SHA1, SHA224, SHA256, SHA384, SHA512

    func toCCHmacAlgorithm() -> CCHmacAlgorithm {
        var result: Int = 0
        switch self {
        case .MD5:
            result = kCCHmacAlgMD5
        case .SHA1:
            result = kCCHmacAlgSHA1
        case .SHA224:
            result = kCCHmacAlgSHA224
        case .SHA256:
            result = kCCHmacAlgSHA256
        case .SHA384:
            result = kCCHmacAlgSHA384
        case .SHA512:
            result = kCCHmacAlgSHA512
        }
        return CCHmacAlgorithm(result)
    }

    func digestLength() -> Int {
        var result: CInt = 0
        switch self {
        case .MD5:
            result = CC_MD5_DIGEST_LENGTH
        case .SHA1:
            result = CC_SHA1_DIGEST_LENGTH
        case .SHA224:
            result = CC_SHA224_DIGEST_LENGTH
        case .SHA256:
            result = CC_SHA256_DIGEST_LENGTH
        case .SHA384:
            result = CC_SHA384_DIGEST_LENGTH
        case .SHA512:
            result = CC_SHA512_DIGEST_LENGTH
        }
        return Int(result)
    }
}

class ViewController: UIViewController {

    //Encypt Outlet
    @IBOutlet weak var stringToEn: UITextField!
    @IBOutlet weak var outputEn: UITextField!

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    @IBAction func encyptPressed(_ sender: Any) {
        let input = stringToEn.text
        let hmacResult: String = input!.hmac(algorithm: HMACAlgorithm.SHA1, key: ""GVDev789"")
        outputEn.text = hmacResult


    }

}
extension String{

    func hmac(algorithm: HMACAlgorithm, key: String) -> String {
        let cKey = key.cString(using: String.Encoding.utf8)
        let cData = self.cString(using: String.Encoding.utf8)
        var result = [CUnsignedChar](repeating: 0, count: Int(algorithm.digestLength()))
        CCHmac(algorithm.toCCHmacAlgorithm(), cKey!, 1000, cData!, 1000, &result)
//        cchmac Int(strlen(cKey!))  Int(strlen(cData!))
        let hmacData:NSData = NSData(bytes: result, length: (Int(algorithm.digestLength())))
        let hmacBase64 = hmacData.base64EncodedString(options: NSData.Base64EncodingOptions.lineLength76Characters)
        return String(hmacBase64)
    }
}

What is working in C#
public static string getEncryptedText(string input)
        {
            return EncryptText(input);
        }

 private static string EncryptText(string strText)
        {
            PasswordDeriveBytes pdbPassword = default(PasswordDeriveBytes);
            PasswordDeriveBytes pdbIV = default(PasswordDeriveBytes);
            DESCryptoServiceProvider DES = new DESCryptoServiceProvider();
            byte[] salt = {
                        (byte)Strings.Asc(""G""),
                        (byte)Strings.Asc(""V""),
                        (byte)Strings.Asc(""D""),
                        (byte)Strings.Asc(""e""),
                        (byte)Strings.Asc(""v""),
                        (byte)Strings.Asc(""7""),
                        (byte)Strings.Asc(""8""),
                        (byte)Strings.Asc(""9"")
            };
            System.IO.MemoryStream ms = new System.IO.MemoryStream();
            CryptoStream cs = default(CryptoStream);
            string plainText = strText;
            byte[] plainBytes = null;
            plainBytes = System.Text.Encoding.UTF8.GetBytes(plainText);
            pdbPassword = new PasswordDeriveBytes(""Password"", salt);
            pdbPassword.HashName = ""SHA1"";
            pdbPassword.IterationCount = 1000;
            DES.Key = pdbPassword.GetBytes(8);

            pdbIV = new PasswordDeriveBytes(""PbeIv"", salt);
            pdbIV.HashName = ""SHA1"";
            pdbIV.IterationCount = 1000;
            DES.IV = pdbIV.GetBytes(8);
            cs = new CryptoStream(ms, DES.CreateEncryptor(), CryptoStreamMode.Write);
            cs.Write(plainBytes, 0, plainBytes.Length);
            cs.FlushFinalBlock();
            return Convert.ToBase64String(ms.ToArray());
        }
    }

","","245","<c#><swift><encryption><salt>","1","","0","2017-05-30 18:39:28","","5","","","","","2017-05-30 18:39:28",""
"3759462","Checking 3 random letters from a hashed password","I have a system where I salt and hash passwords before saving them to the database, using FormsAuthentication in asp.net
What I want to do is, rather than ask the customer for their password each time, I just want 3 random letters from their password. How can I compare this to the hash in the database? Will hashing still work in this case? From what I gather hashing is only designed to be a one way process and shouldn't be decrypted, so is checking 3 random letters for a hash even possible?
","To achieve that, you'd need to know what the clear password is when you compare the letters, because you can't generate an identical hash with only 3 letters.
","245","<asp.net><hash><passwords><password-protection><salt>","0","1","1","2010-09-21 11:01:43","3759632","4","","","","","2010-09-21 10:38:18",""
"48214129","ASP.Net validate password with salted hash","So I have been following these guidelines on how to hash a password. https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/consumer-apis/password-hashing
I was able to hash the password with a salt I stored the salt in a database and I am retrieving the salt from the database just fine.  Where I am getting tripped up is; if I understand this correctly if you hashed a password without a salt it would come out the same, if you use the same salt(from database) with a hash it should validate, and it comes out with a different hashed password.
Question:
Why can't I get the same password when using the salt stored in the database?
Code:
The code is trying to validate the password using the salt stored in the database. But I get two different passwords.
string password = txtSignPass.Text;
        string email = txtSignEmail.Text;
        SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings[""db""].ToString());
        SqlCommand cmd = new SqlCommand(""SELECT * FROM users WHERE email = @email;"", conn);
        cmd.Parameters.AddWithValue(""@email"", email);
        conn.Open();
        SqlDataReader dr = cmd.ExecuteReader();

        while (dr.Read())
        {
            byte[] salt = Encoding.UTF8.GetBytes(dr[""salt""].ToString());
            string hashed = Convert.ToBase64String(KeyDerivation.Pbkdf2(
                password: password,
                salt: salt,
                prf: KeyDerivationPrf.HMACSHA1,
                iterationCount: 10000,
                numBytesRequested: 256 / 8));

","","244","<asp.net><validation><hash><salt><password-encryption>","0","","0","2018-01-11 19:59:12","","11","","7197501","","2018-01-11 19:59:12","2018-01-11 19:00:33",""
"49040800","salt-minion dropping connection to master","I am new to salt and have setup a master with 2 remote minions. All works perfectly well until after some time the master loses the connections from the minions. I think the TCP connection is getting drop by something in the salt stack. Debug shows nothing re connections being lost on either master or minion.
Is there a config setting to force the minions to reconnect?
Minion Report:

Salt Version:
           Salt: 2017.7.4

Dependency Versions:
           cffi: Not Installed
       cherrypy: Not Installed
       dateutil: Not Installed
      docker-py: Not Installed
          gitdb: Not Installed
      gitpython: Not Installed
          ioflo: Not Installed
         Jinja2: 2.8
        libgit2: Not Installed
        libnacl: Not Installed
       M2Crypto: Not Installed
           Mako: Not Installed
   msgpack-pure: Not Installed
 msgpack-python: 0.5.5
   mysql-python: Not Installed
      pycparser: Not Installed
       pycrypto: 2.6.1
   pycryptodome: Not Installed
         pygit2: Not Installed
         Python: 2.7.13 (default, Nov 24 2017, 17:33:09)
   python-gnupg: Not Installed
         PyYAML: 3.12
          PyZMQ: 17.0.0
           RAET: Not Installed
          smmap: Not Installed
        timelib: Not Installed
        Tornado: 4.5.3
            ZMQ: 4.1.6

System Versions:
           dist: debian 9.1 
         locale: UTF-8
        machine: armv6l
        release: 4.9.59+
         system: Linux
        version: debian 9.1 


Master report:

Salt Version:
           Salt: 2017.7.4

Dependency Versions:
           cffi: Not Installed
       cherrypy: Not Installed
       dateutil: Not Installed
      docker-py: Not Installed
          gitdb: Not Installed
      gitpython: Not Installed
          ioflo: Not Installed
         Jinja2: 2.10
        libgit2: Not Installed
        libnacl: Not Installed
       M2Crypto: Not Installed
           Mako: Not Installed
   msgpack-pure: Not Installed
 msgpack-python: 0.5.5
   mysql-python: Not Installed
      pycparser: Not Installed
       pycrypto: 2.6.1
   pycryptodome: Not Installed
         pygit2: Not Installed
         Python: 2.7.12 (default, Dec  4 2017, 14:50:18)
   python-gnupg: Not Installed
         PyYAML: 3.12
          PyZMQ: 17.0.0
           RAET: Not Installed
          smmap: Not Installed
        timelib: Not Installed
        Tornado: 4.5.3
            ZMQ: 4.1.6

System Versions:
           dist: Ubuntu 16.04 xenial
         locale: UTF-8
        machine: x86_64
        release: 4.4.0-104-generic
         system: Linux
        version: Ubuntu 16.04 xenial

salt-minion log after connection lost on master:
2018-03-02 09:35:27,072 [salt.utils.verify:525 ][WARNING ][10481] Insecure logging configuration detected! Sensitive data may be logged.
2018-03-02 09:35:28,973 [py.warnings      :69  ][WARNING ][10481] /usr/local/lib/python2.7/dist-packages/salt/minion.py:802: DeprecationWarning: 
zmq.eventloop.ioloop is deprecated in pyzmq 17. pyzmq now works with default tornado and asyncio eventloops.
  zmq.eventloop.ioloop.install()

salt-master log (UTC)
2018-03-01 22:57:03,312 [py.warnings      :69  ][WARNING ][97734] /usr/local/lib/python2.7/dist-packages
/salt/utils/async.py:56: DeprecationWarning: zmq.eventloop.ioloop is deprecated in pyzmq 17. pyzmq now w
orks with default tornado and asyncio eventloops.
  self.io_loop = LOOP_CLASS()

","","243","<salt><salt-stack>","0","","0","2018-03-01 23:03:54","","2","","6428261","","2018-03-01 23:03:54","2018-03-01 00:22:29",""
"44509382","Salt Custom Grains - trying to return an empty 'list-type' grain","I want to have
salt 'target' grains.items
return a result with a grain, that is an empty list:
target:
     ...other grains...

     grain_name: 
        None

    ...other grains...

So, later, I can run this custom salt state and use salt.states.grains.append. My custom salt state (via a sls file, named grains_name_state.sls, in /srv/salt/_files) is as follows:
grain_name:
    grains.append:
        - value: whatever_value

My custom grains module (via a python file, named custom_grain.py, in /srv/salt/_grains on the master) is as follows:
#!/usr/bin/env python
def my_custom_grain():
    #initialize an empty grains list for the grain 'grain_name'
    grains = {}
    grains['grain_name'] = []
    return grains

So, calling 
salt 'target' saltutil.sync_grains should load the custom grain into the target minion. And then, salt 'target' grains.items should contain the results for the target and show the 'grains_name' value as None. But instead it contains this:
target:
    ...other grains...

    grain_name:

    ...other grains...

Then, when I try, salt 'target' state.apply grains_name_state, it yields a failure saying 'Comment: Grain grain_name does not exist'
","Figured it out; though, I am not sure why salt.states.list_append works when the grain should be a list-type and be append-able.
Working with Saltstack 2016.3.3+, my custom salt state (via a sls file, named grains_name_state.sls, in /srv/salt/_files) is as follows:
grain_name:
    grains.list_present:
        - value: whatever_value

Then, after the first highstate/state.apply, the grain_name grain is available to use list_present (a duplicate append command) on. 
","243","<python><salt><salt-stack>","1","0","1","2017-06-14 15:57:49","44549524","0","1","4333336","","2017-06-12 22:20:38","2017-06-12 22:01:13",""
"24357592","PHP Class Function for hashing","public function kryptonite($string){
   $salt = """";
   $salt_vars = array_merge(range(""A"",""Z""),range(""a"",""z""),range(0,9));
   for($i=0;$i < 22;$i++){
        $salt.= $salt_vars[array_rand($salt_vars)];
   }
   return crypt($string, '$6$'.$salt);
  }

This returns on refresh:
$6$vnuqcEA70$CHWmPVsDVb.lVpq1PNsDn7.0fSmBX6FU2PlofK6dJOH7FQp6EdSsde3Aw6to8fY1L01/WOcWz8OIE0OxK1LTj.
$6$7lmp9sD4g$I0fAcDjno2Lf255gg6TxTLt9TRwR803ZXiU9BOWJXhWrGbJdPJ3LvAW9w2KbRZ/3EDSSbFrgF7rV7DdB0VliA0

If you closely at the first few lines it's changing constantly. I don't think Hashing is suppose to constantly change! So technically I'll never be able to test against this. Can someone help me with my kryptonite crypt function or explain to me what went wrong really.
","You won't get the same hashes when you're using the array_rand() function. The result needs to be deterministic.
Is there a reason why sha1() isn't good enough?
","243","<php><salt><crypt>","0","0","3","2014-06-23 02:45:13","","5","","","","","2014-06-23 02:13:02",""
"24357592","PHP Class Function for hashing","public function kryptonite($string){
   $salt = """";
   $salt_vars = array_merge(range(""A"",""Z""),range(""a"",""z""),range(0,9));
   for($i=0;$i < 22;$i++){
        $salt.= $salt_vars[array_rand($salt_vars)];
   }
   return crypt($string, '$6$'.$salt);
  }

This returns on refresh:
$6$vnuqcEA70$CHWmPVsDVb.lVpq1PNsDn7.0fSmBX6FU2PlofK6dJOH7FQp6EdSsde3Aw6to8fY1L01/WOcWz8OIE0OxK1LTj.
$6$7lmp9sD4g$I0fAcDjno2Lf255gg6TxTLt9TRwR803ZXiU9BOWJXhWrGbJdPJ3LvAW9w2KbRZ/3EDSSbFrgF7rV7DdB0VliA0

If you closely at the first few lines it's changing constantly. I don't think Hashing is suppose to constantly change! So technically I'll never be able to test against this. Can someone help me with my kryptonite crypt function or explain to me what went wrong really.
","You won't be able to get the same result when using array_rand() I'd recommend something like this if you're going to use salts and need a two way encryption
function parse($action, $string) {
    $output = false;
    $encrypt_method = ""AES-256-CBC"";

    // hash
    $key = hash('sha256', ""random encryption key that must stay the same"");

    // iv - encrypt method AES-256-CBC expects 16 bytes - else you will get a warning
    $iv = substr(hash('sha256', ""ARANDOMIV""), 0, 16);

    if($action == 'encrypt') {
        $output = openssl_encrypt($string, $encrypt_method, $key, 0, $iv);
        $output = base64_encode($output);
    } else if( $action == 'decrypt' ){
        $output = openssl_decrypt(base64_decode($string), $encrypt_method, $key, 0, $iv);
    }
    return $output;
}

","243","<php><salt><crypt>","0","1","3","2014-06-23 02:45:13","","5","","","","","2014-06-23 02:13:02",""
"24357592","PHP Class Function for hashing","public function kryptonite($string){
   $salt = """";
   $salt_vars = array_merge(range(""A"",""Z""),range(""a"",""z""),range(0,9));
   for($i=0;$i < 22;$i++){
        $salt.= $salt_vars[array_rand($salt_vars)];
   }
   return crypt($string, '$6$'.$salt);
  }

This returns on refresh:
$6$vnuqcEA70$CHWmPVsDVb.lVpq1PNsDn7.0fSmBX6FU2PlofK6dJOH7FQp6EdSsde3Aw6to8fY1L01/WOcWz8OIE0OxK1LTj.
$6$7lmp9sD4g$I0fAcDjno2Lf255gg6TxTLt9TRwR803ZXiU9BOWJXhWrGbJdPJ3LvAW9w2KbRZ/3EDSSbFrgF7rV7DdB0VliA0

If you closely at the first few lines it's changing constantly. I don't think Hashing is suppose to constantly change! So technically I'll never be able to test against this. Can someone help me with my kryptonite crypt function or explain to me what went wrong really.
","As a matter of fact, hashing is supposed to randomly change - it's called random salting.  Your crypt function is creating a random salt which is fed to the SHA-512 hasher.
The output of crypt() includes the salt value, which you would then use when hashing a password to compare it to the stored hash.
public function kryptonite($string, $salt = null){
    if ($salt === null) {
        $salt = """";
        $salt_vars = array_merge(range(""A"",""Z""),range(""a"",""z""),range(0,9));
        for($i=0;$i < 22;$i++){
            $salt.= $salt_vars[array_rand($salt_vars)];
        }
        $salt = '$6$' . $salt;
    }
    return crypt($string, $salt);
}

To use this, you'd just do the following:
$storedHash = '.....'; // fetched from database
$inputPassword = '.....'; // from the user

$salt = preg_match('/\$[0-9]\$(.+)\$/')[1]; // php 5.4+

if (kryptonite($inputPassword, $salt) == $storedHash) {
    //.... success
}

Note that the array_random implementation of creating a random salt isn't cryptographically secure - it'd be better to use openssl_random_pseudo_bytes() or mt_rand() or such.
","243","<php><salt><crypt>","0","2","3","2014-06-23 02:45:13","","5","","","","","2014-06-23 02:13:02",""
"2333869","Salt exposure in authentication stages","I have implemented the multistage authentication illustrated below.
brackets ([ and ]) symbolizes a hash
The client has a key and a secret used for authentication. The server has a database table with rows containing a key, salt and a [secret + salt]
       Client                                    Server
         |                                          |
         ----------------- key -------------------->| 
         |                                          | 
         |                                          |
         |<--------- server-nonce -------------------
         |<------------ salt ------------------------
         |                                          |
         |                                          |
         ------------ key ------------------------->|
         ------------ client-nonce ---------------->|
         --[c-nonce + s-nonce + [secret + salt]] -->|
         |                                          |

The server then checks the hash received against its own information.
My concern is that this enables an attacker to get a hold of salt from the server and then produce a rainbow table to hack that account. What are your thoughts on this?
","Why do you need the salt to travel back to the client? Purely to protect the user's secret?
the c-nonce and s-nonce are both transmitted anyways so it's only the [secret + salt] combination that is hidden. 
My feeling is that if it's a one-time salt it shouldn't matter- you only accept a single response with that salt, if it fails generate a new salt and go through the process again. That way a rainbow table attack would not be possible if the salt was intercepted because it would only be valid with the first request so they would need a very lucky guess.
You can also avoid that kind of attack by using techniques like progressive timeouts or limited log-in numbers that have very little effect on users but will certainly cause a problem for any automated tool trying to run hundreds of log-in attempts. This is probably worth implementing anyway if security is important to you.
","240","<authentication><salt>","0","0","3","2010-02-25 12:31:19","2333915","0","","","","","2010-02-25 12:19:39",""
"2333869","Salt exposure in authentication stages","I have implemented the multistage authentication illustrated below.
brackets ([ and ]) symbolizes a hash
The client has a key and a secret used for authentication. The server has a database table with rows containing a key, salt and a [secret + salt]
       Client                                    Server
         |                                          |
         ----------------- key -------------------->| 
         |                                          | 
         |                                          |
         |<--------- server-nonce -------------------
         |<------------ salt ------------------------
         |                                          |
         |                                          |
         ------------ key ------------------------->|
         ------------ client-nonce ---------------->|
         --[c-nonce + s-nonce + [secret + salt]] -->|
         |                                          |

The server then checks the hash received against its own information.
My concern is that this enables an attacker to get a hold of salt from the server and then produce a rainbow table to hack that account. What are your thoughts on this?
","You're right. If an attacker knows this is how the system works, there is a chance to capture the data and crack. It is not secure.
I don't understand why you're going down this route when there are many other systems (SSL, public key authentication, etc) that don't have these pitfalls.
","240","<authentication><salt>","0","0","3","2010-02-25 12:31:19","2333915","0","","","","","2010-02-25 12:19:39",""
"2333869","Salt exposure in authentication stages","I have implemented the multistage authentication illustrated below.
brackets ([ and ]) symbolizes a hash
The client has a key and a secret used for authentication. The server has a database table with rows containing a key, salt and a [secret + salt]
       Client                                    Server
         |                                          |
         ----------------- key -------------------->| 
         |                                          | 
         |                                          |
         |<--------- server-nonce -------------------
         |<------------ salt ------------------------
         |                                          |
         |                                          |
         ------------ key ------------------------->|
         ------------ client-nonce ---------------->|
         --[c-nonce + s-nonce + [secret + salt]] -->|
         |                                          |

The server then checks the hash received against its own information.
My concern is that this enables an attacker to get a hold of salt from the server and then produce a rainbow table to hack that account. What are your thoughts on this?
","If the connection is unsecure, and the attacker manages to get his hand on the salt and the password, he can surly hack the account, even without rainbow tables.
the salt alone\password is useless. 
the algorithem should be something more like:
client-----pass------>server
client<----noonce----server
                     server--------getSalt---->back-end-service
                     server<-------salt------- back-end-service
                     server-------[pass+salt]->storage

","240","<authentication><salt>","0","0","3","2010-02-25 12:31:19","2333915","0","","","","","2010-02-25 12:19:39",""
"29142135","DotNetZip WinZipAes256 Using Random Salt?","Forgive me if the answer to this is very obvious. 
I need to know if the AES 256 Encryption in DotNetZip (Ionic.Zip.dll) generates a random salt?
e.g. Does EncryptionAlgorithm.WinZipAes256 make use of the internal class WinZipAesCrypto. And specifically the static method WinZipAesCrypto Generate??
  using (ZipFile zip = new ZipFile())
  {
    zip.AddFile(""CustomerData.pdf""); 
    zip.Password= ""123456!"";
    zip.Encryption = EncryptionAlgorithm.WinZipAes256;       
    zip.Save(""Customer.zip"");
  }

One of the requirements put to me is that a random salt is generated every time we AES encrypt and I need to be 100% sure that this is the case?
Thank you
","From https://dotnetzip.codeplex.com/SourceControl/latest#Zip/WinZipAes.cs
public static WinZipAesCrypto Generate(string password, int KeyStrengthInBits)
{
    WinZipAesCrypto c = new WinZipAesCrypto(password, KeyStrengthInBits);

    int saltSizeInBytes = c._KeyStrengthInBytes / 2;
    c._Salt = new byte[saltSizeInBytes];
    Random rnd = new Random();
    rnd.NextBytes(c._Salt);
    return c;
}

So, yes, it's (pseudo) random, but not cryptographically strong. If that's a concern, you could always download the source and rewrite the method to use RNGCryptoServiceProvider.
","240","<c#><encryption><aes><salt><dotnetzip>","0","2","1","2015-03-19 10:35:11","","1","","","","","2015-03-19 10:28:27",""
"13463870","Why is my hash / salt technique for storing passwords not working?","I am trying to make a safe, custom, user login system, but it currently does not work.  The idea is to create a user with a safe, encrypted password. However, when using the correct password, it does not log on to the site.
Output when using the password 123456789jp:
$6$j7Rd68RhKNx.6ccH$9lvRDdks.jx4hk7.YQ0hpvzPE22h/BZQ/9yXiwTMBV1Kx2xr2gbIZZJxYjeLrA41nL2WGjmt.FMQi877uOXrP1
Relevant function:
// function register_user()
function bruger_opret_siden(){
            if ($stmt = $this->mysqli->prepare('SELECT NULL FROM `bruger` WHERE `brugernavn` = ?'))
            {
                $stmt->bind_param('s', $brugernavn);
                $brugernavn = $_POST[""brugernavn""];
                $stmt->execute();
                $stmt->store_result();
                $count = $stmt->num_rows;
                $stmt->close();
                if($count > 0)
                {
                    $user_found = 1;
                }
            }
            if(!isset($user_found))
            {
                //Check if the user exists.

                if(!isset($errors))
                {
                    $pb = null;

                    include 'function/class.upload.php';
                    $handle = new Upload($_FILES[""file""]);

                    if($handle->uploaded)
                    {
                        //trims to next request         
                    }

                 $password = $_POST[""pass""];
                 $algorithm = '$6$'; //<--- This means the SHA 512
                 $salt = $this->generateSalt(16); //<--- SHA 512 uses a 16-character salt

                 $hash = crypt($password, $algorithm . $salt);

                if ($stmt = $this->mysqli->prepare('INSERT INTO `bruger` 
                (`rank`, `email`, `brugernavn`, `password`, `profilbillede`, `profilbillede_godkendt`, `navn`, `efternavn`, `alder_d`, `alder_m`, `alder_aar`, `status`, `kon`, `seksualitet`, `land_by`, `hojde`) 
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'))
                {

                    $stmt->bind_param('issssisssssiiisi', $rank, $email, $brugernavn, $password, $profilbillede, $pb_godkendt, $navn, $efternavn, $alder_d, $alder_m, $alder_aar, $kon, $seksualitet, $partnerstatus, $land_by, $hojde);
                    $rank = '1';
                    $pb_godkendt = '1';
                    $email = $_POST[""email""];
                    $brugernavn = $_POST[""brugernavn""];//C
                    $password = $hash;//C
                    $profilbillede = $pb;//C
                    $navn = $_POST[""navn""];
                    $efternavn = $_POST[""efternavn""];
                    $alder_d = $_POST[""alder_d""];
                    $alder_m = $_POST[""alder_m""];
                    $alder_aar = $_POST[""alder_aar""];
                    $kon = $_POST[""kon""];
                    $seksualitet = $_POST[""seksualitet""];
                    $partnerstatus = $_POST[""partnerstatus""];
                    $land_by = $_POST[""land_by""];
                    $hojde = $_POST[""hojde""];

                    $stmt->execute();
                    $stmt->close();

                    echo ""ok"";

                    }
                    else
                    {
                        // There was an error 
                        echo 'error: ' . $mysqli->error;
                    }
                }
            }
            else
            {
                echo ""<li id=\""check_not\"">Dette brugernavn er optaget!!</li>"";
            }
    }

Code to make a hash from the password and a salt to register the user:
function generateSalt($length) {
         $alphabet = './ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
         $alphabet_length = strlen($alphabet);
         $salt = '';
         for ($i = 0; $i < $length; $i++) {
             $salt .= $alphabet[rand(0, $alphabet_length - 1)];
         }
         return $salt;
     }

Two functions to show users information.
$pass = $mebe->generateSalt();
                $users = $mebe->bruger_opret_siden();

The following function contains the problem; it does not log the user in.  While there are no errors produced, it doesn't work.
function godkendt_login()
    {
        if ($stmt = $this->mysqli->prepare(""SELECT `id`, `brugernavn`, `rank`, `profilbillede`, `profilbillede_godkendt` FROM `bruger` WHERE `brugernavn` = ? AND `password` = ?""))
        {
            $stmt->bind_param('ss', $brugernavn, $password);
            $brugernavn = $_POST[""brugernavn""];
            $password = sha1($_POST[""pass""]);
            $stmt->execute();
            $stmt->store_result();
            $stmt->bind_result($id, $brugernavn, $rank, $profilbillede, $profilbillede_godkendt);
            $stmt->fetch();
            $count = $stmt->num_rows;
            $stmt->close();

            if($count > 0)
            {
                $_SESSION[""logged_in""] = true;
                $_SESSION[""id""] = $id;
                $_SESSION[""profilbillede""] = $profilbillede;
                $_SESSION[""brugernavn""] = $brugernavn;
                $_SESSION[""rank""] = $rank;
                $_SESSION[""profilbillede_godkendt""] = $profilbillede_godkendt;

                if($_SESSION[""logged_in""] == true)
                {
                    echo ""ok"";
                }
                else
                {
                    // Sorry, please try again.
                                    echo ""Desværre prøve igen.""
                }
            }
            else
            {
                          echo ""Skrive et password eller brugernavn""
            }
        }
    }

Log file / inc file:
<?php
    /*
     * // Grant the administrative privilige to show the content.
     * Giver admin adgang til se indhold på siden.
     */
    if(isset($_SESSION[""rank""]) && $_SESSION[""rank""] > 0) {
        $bruger = $mebe->brugerindhold_side();
    }


    /*
     * // Grant normal access to the page.
     * Hvis ingen af dem så få de bare adgang sådan her..
     */
    else{
    ?>
<form name=""login"" method=""post"" action=""#"">
    <h1>Log ind</h1>
    <p>Brugernavn</p><input type=""text"" name=""brugernavn""/>
    <p>Password</p><input type=""password"" name=""pass""/>
    <br />
    <input type=""submit"" name=""Log_ind"" value=""Log ind"" id=""login"">
    <?php
    if(isset($_POST[""Log_ind""]))
    {
    $login = $mebe->godkendt_login();
    }
    ?>
</form>
<?php
    }
?>

","Okay, given that I cannot fully grasp your code due to a language difference.
A salt should be a reproducible value. From what I gather yours seems to be generated @ random.
If so, the hashes won't add up, therefore the check fails.
Use a constant value for the hash and do not store it in a database!
For example:
<?php

     function generateHash($in)
     {
         $salt = ""Th1s1sAS4lt"";
         return md5(sha1($in) . $salt);
     }
?>

Also, any post value should be checked because it is inputted by a user and may contain illegal characters or harmful code. Observe the following:
<?php
    // Note that the input contains SQL.
    // bemærke, at de input indeholder SQL.                 
    $_POST['passwd'] = ""'p@ssword' OR 'a' = 'a'"";

    if (tilmeld_dig())
    {
        // Log the user in.
        // brugeren er logget på
    }


    function tilmeld_dig()
    {
        $sql = ""SELECT brugernavn from tbl_brugere WHERE adgangskode = "" . $_POST['passwd'];

            // Execute the database command. 
        $res// = Database kommando udføre
        if ($res)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
?>

In the example above, the user is logged in no matter the password, because there is an SQL command injected that will always be true.
Though this is a crude example, please review this:
http://translate.google.com/translate?hl=nl&sl=en&tl=da&prev=_dd&u=http%3A%2F%2Fwww.unixwiz.net%2Ftechtips%2Fsql-injection.html
I tried to support you with some Danish comment because this is important in security systems. You're on the right track but I recommend you to take a look at my suggestion.
Also, this is untested code, but more or less how it works.
","239","<php><hash><mysqli><salt>","1","2","1","2013-08-07 14:50:07","13464021","0","","985906","","2013-08-07 14:50:07","2012-11-19 22:57:27",""
"18731678","Combine CRC32(), MD5() && SHA256 to make a Salt Combination is too much ?","The problem maybe that it would overcharge the server Memory while Creating Hashes and maybe twice while loading it.
So did you think is better to make a function that specializes in this or just use the default  SHA256 instead?
","I assume the context here is hashing passwords. Why reimplement what already exists? If you have PHP 5.5, you can take advantage of the new password hashing library, which drastically simplifies the whole process.
If you're running an older version of PHP, I'd use a tried and tested framework, such as phpass.
","239","<php><md5><salt><sha256><hash>","0","0","1","2013-09-11 02:32:46","18731715","1","","","","","2013-09-11 02:22:04",""
"6566724","Salting - the order of steps","When salting a password, which is the correct way (or most effective way)?
A. First hash the password and then hash the hash of the password with the salt like this:
$password = ""passwd"";

$salt = ""s0merndslt"";

$password = sha1($password);

$salty = sha1($password.$salt);

B. Take the password and the salt and hash them together like this:
$password = ""passwd"";

$salt = ""s0merndslt"";

$salty = sha1($password.$salt);

My apologies if this has been asked before but I could not find the answer to this specific part of salting on SO.
","In reality, either case.
However, your example #1 provides a time tradeoff which will (slightly) slow down brute force password finders.
With the advent of GPUs, simply salting passwords is not enough. A GPU-backed brute-force password tool, when given a set of passwords to find, can accomplish short passwords in a matter of minutes (or even seconds).
This is why tools or algorithms such as bcrypt or PBKDF#2 exist: they iterate the hashing operation many times to produce a large workload, which makes finding passwords from a hash ""infeasible"" on commodity hardware.
When in doubt, don't implement your own password hash solution! Use bcrypt or PBKDF#2.
","237","<security><encryption><hash><salt>","0","2","1","2011-07-04 02:12:43","6566752","0","","","","","2011-07-04 02:06:35",""
"24754875","Crypt.crypt(password,salt) for IOS returns wrong value","I am trying to create Crypt hash in ios by using the following code
#include <unistd.h>


const char *password = ""password"";
const char *salt = ""$6$12$Z1NO9zPeobe2lNRI7VGoV2yeD7zZ"";
const char *cryptedText =crypt(password, salt);

NSLog(@""Output :%s"",cryptedText);

Here is the OutPut: $6FMi11BJFsAc
which is 15 character long hash
but i am suppose to get result as $6$12$EmCj0n6cuRQPJkS9i8q9F9JzlbErFPXFeUH7zwAT1yfBuwP7L60bNzWNvizJifxL6Dsd2mLIOFfcHyCbRoYSd0,
i am getting the expected result from android code, and the android code is as follow
Export package import org.apache.commons.codec.digest.Crypt;
here is the code:
String password_encrypt = Crypt.crypt(""password"",
                ""$6$12$Z1NO9zPeobe2lNRI7VGoV2yeD7zZ"");
printf(""Output :"" + password_encrypt);

Output :$6$12$EmCj0n6cuRQPJkS9i8q9F9JzlbErFPXFeUH7zwAT1yfBuwP7L60bNzWNvizJifxL6Dsd2mLIOFfcHyCbRoYSd0
Can anyone suggest me what is the solution to make it working and that should be matching with android hash value. which algorithm i should used to get it work in IOS?
Thanks in advance.
","","236","<ios><hash><salt><crypt>","0","","0","2014-07-15 15:17:37","","6","","1659677","","2014-07-15 15:17:37","2014-07-15 09:44:00",""
"14718593","Querystring with Hash Key to access search results","I need help with this asap (I was just asked to come up with a solution to this for tomorrow morning). The lead developer asked me to come up with a possible already existing solution to the following problem: 
We have this C# search result page used publicly by third party websites, but we will be adding access restriction through hash keys passed onto the query string. 
To start, the third party website developer will visit a new page we will create to auto generate the hash key based on the state they are in. They will then add the key to their links. When we have a request from one of their links we will try to match the key with what we have in the database in order to allow access to results - we would also like to check extra information like domain/IP address to prevent spoofing and other kinds of attacks.
Another consideration is: can we make this key system dynamic in such way that it would change over time, but third party developers wouldn't need to come back to us to update what they have - a intermediate key?.
The question is what is the best solution for this case scenario? Is there already something similar out there? Is using hash keys in the query string the right/best approach? 
","Generally in this case, you have an identifier and a shared secret.
The identifier is passed in the query for you to identify the user.  The shared secret is used in a hashing algorithm to provide a checksum of the request.  This is commonly sent in the query string (easy on the third party) or as a HTTP header.
Amazon uses this type of digital signing in AWS with HMAC-SHA256.  See MSDN documentation on System.Security.Cryptography.HMACSHA256 and AWS documentation on Authenticating Requests.  MD5 or SHA alone would probably work fine in your case as well.
You can maintain a per-user shared key assuming you have a way of distributing it to your client.
","236","<c#><hash><key><md5><salt>","0","0","1","2013-02-05 23:22:34","","0","","","","","2013-02-05 22:59:29",""
"47809243","Phoenix Salted Table Rowkey Issue with Hbase","I have a rowkey issue when i salt a phoenix table and insert data directly from hbase. 
Here is the scenario:
1- Create a table on phoenix with salt_buckets=16
2- The data is inserted in the hbase table by a storm hbase bolt. The hbasebolt insert data directly in hbase without passing by phoenix.
The problem is the phoenix rowkey always missing the first character compared to thehbase rowkey, when i run a select query on phoenix
Example:

hbase rowkey:    1f05d01f-6a17-4d7b-8d97-df32d8856666
phoenix rowkey:   f05d01f-6a17-4d7b-8d97-df32d8856666

I look forward getting a response guys. Thank you in advance.
Kind regards,
","","235","<apache><salt><phoenix><row-key>","0","","0","2018-07-12 06:56:53","","3","","","","","2017-12-14 08:50:45",""
"16427397","Returning the salt value used in PHP's new password hashing API","I'm currently implementing a webapp that leverages PHP's new (to be released as part of v5.5) password handling API. I think it's really good but I'm wondering if anyone knows why password_get_info() doesn't return the salt value used in the computation of the given hash? The RFC explicity states that the function in question doesn't return the salt, but no explanation as to why:

The second element is “options”, which includes the used options by
  the hashing algorithm, with the exception of the salt used.

The reason why I'm asking is because when a user's password expires, I need to check that they aren't resubmitting the same password as their current one. The only way to do this is to hash the new password, with the same algo, cost and salt compare the resulting hash to the one currently in the DB. The algo and cost are returned by the password_get_info() function but not the salt. At the moment, I use substr($hash, 7, 22) to get the salt value but this is obviously algorithm specific and kind of defeats the purpose of using an otherwise very easy to use and powerful API (if I start using a new algo the position of the salt may very well change).
EDIT: I was being an idiot, I didn't need to rebuild the hash and compare the resulting hashes but rather to call password_verify() and check that it returns FALSE. That'll teach me to work while sick and tired!
","On the contrary, you don't need to know this information. Simply compare input to previous hashes (By this, i mean store a record of every hash a user has had and iterate through all of them, checking the result of password_verify against the new password input).
Bcrypt is useful like that; in fact, this is required behaviour of any algorithm that password_hash or password_verify will use, because otherwise you can't compare in the same way, and functionality changes.
password_verify(string $password, string $hash):
    $hash = crypt($plaintext, '$2y$' . $workrate . '$' . $salt)
    => $2y$<workrate>$<salt><hash> as result,

However, if you really need to find the salt of a bcrypt hash (which is what password_hash uses), then simply take the first 22 characters of the hash, minus the settings (But I will repeat, however, that you just need to compare input to hashes).
Ideally you should wrap password_hash inside of a class or function that can deal with dynamic workrates, and changing options (if the hash was saved as workrate 12, for example, you are able to use different workrates based on the age of the hash, and encourage users to update their passwords).
The functions don't return the salt because it's generated by a CSPRNG, and isn't needed at all for comparison as a separate parameter (as it is part of the hash)
","235","<php><passwords><salt>","2","2","2","2014-03-09 04:09:45","16427499","6","","1380918","","2014-03-02 19:29:37","2013-05-07 19:53:35",""
"16427397","Returning the salt value used in PHP's new password hashing API","I'm currently implementing a webapp that leverages PHP's new (to be released as part of v5.5) password handling API. I think it's really good but I'm wondering if anyone knows why password_get_info() doesn't return the salt value used in the computation of the given hash? The RFC explicity states that the function in question doesn't return the salt, but no explanation as to why:

The second element is “options”, which includes the used options by
  the hashing algorithm, with the exception of the salt used.

The reason why I'm asking is because when a user's password expires, I need to check that they aren't resubmitting the same password as their current one. The only way to do this is to hash the new password, with the same algo, cost and salt compare the resulting hash to the one currently in the DB. The algo and cost are returned by the password_get_info() function but not the salt. At the moment, I use substr($hash, 7, 22) to get the salt value but this is obviously algorithm specific and kind of defeats the purpose of using an otherwise very easy to use and powerful API (if I start using a new algo the position of the salt may very well change).
EDIT: I was being an idiot, I didn't need to rebuild the hash and compare the resulting hashes but rather to call password_verify() and check that it returns FALSE. That'll teach me to work while sick and tired!
","This is an old question, but I think my answer goes above currently accepted.
So why is password_get_info() does not return you a salt? This is because your salt is already stored in the hash. So when you are providing hast into the password_verify it can extract the salt.
Check it yourself:
password_hash('password', PASSWORD_DEFAULT, [
   'salt'  => 'mySaltShouldBeVeryLong
]);

The result looks like this: ""$2y$10$mySaltShouldBeVeryLonevYKGp78vooNv9Y7Kwy29CBdNLSUOutS"". If you will look carefully, you will notice similarity with your salt. But it is not a good idea to provide your own salt (it is hard to make it unique). Because of this the algorithm will take care of generating its own salt. Because of this you can see that
password_hash('password', PASSWORD_DEFAULT) !== 
password_hash('password', PASSWORD_DEFAULT)

Hashes are completely different because different salt was used. This is done because average developer is not strong in security and do not know what is salt, pepper, collision and other cool words.
Use password_hash() to create hashes and password_verify() to check if it is correct. Take a look at a cost parameter in password_hash().
","235","<php><passwords><salt>","2","0","2","2014-03-09 04:09:45","16427499","6","","1380918","","2014-03-02 19:29:37","2013-05-07 19:53:35",""
"53659921","Getting different hash values of the same password (+ salt)","I was trying to get a hashed password following the code in here. From it, i'm only using, at the moment, the code for the salt method, the hash method and isExpectedPassword method.
I get my password from a text field:
char[] passCharArray = txtPassword.toString().toCharArray();

Then I call the class to get a salt value (I call it Encryptor instead of Passwords like in the original post):
byte[] salt = Encryptor.getNextSalt();

And then I get the hashed password:
byte[] hashedPass = Encryptor.hash(passCharArray, salt);

Using the following code I print the results to see what's going on and the results are commented:
String saltString = Arrays.toString(salt);
System.out.println(""SALT: "" + saltString);
//SALT: [18, 117, -98, 41, 92, 124, 118, 17, 107, 14, 0, -81, 110, 70, 10, 42]

String hashedPassString = Arrays.toString(hashedPass);
System.out.println(""HASHED PASS: "" + hashedPassString);
//HASHED PASS: [44, -127, -43, 84, 40, -16, -46, -71, 109, -44, -41, 47, -61, -119, 21, 99, -23, 101, -13, 116, -12, 118, -66, 44, 104, 5, 4, 18, -55, 47, 59, 116]

System.out.println(""Passwords match: "" + Encryptor.isExpectedPassword(passCharArray, salt, hashedPass));
//Passwords match: false

The below two are the System.out.prints I put in the isExpectedPassword method to see what values that one has upon being called.
//Encryptor pwdHash: [-103, -87, 53, -75, 59, 11, 77, 116, 123, 59, 68, -35, 16, -68, 42, 34, -32, 75, 22, -94, -37, -26, 16, 20, 7, -46, -6, -20, -88, 104, -121, 77]
//Encryptor expectedHash: [44, -127, -43, 84, 40, -16, -46, -71, 109, -44, -41, 47, -61, -119, 21, 99, -23, 101, -13, 116, -12, 118, -66, 44, 104, 5, 4, 18, -55, 47, 59, 116]

So basically, hashedPass (and expectedHash) should be the same as pwdHash, but it's not. I don't understand what I'm doing wrong. Am I missing something in my code? Does something change without my knowledge?
This is my full code, if people want to see the whole thing just in case:
public class Encryptor {

    private static final Random RANDOM = new SecureRandom();
    private static final int ITERATIONS = 10000;
    private static final int KEY_LENGTH = 256;

    private Encryptor(){}

    public static byte[] getNextSalt(){
        byte[] salt = new byte[16];
        RANDOM.nextBytes(salt);
        return salt;
    }

    public static byte[] hash(char[] password, byte[] salt) {
        PBEKeySpec spec = new PBEKeySpec(password, salt, ITERATIONS, KEY_LENGTH);
        Arrays.fill(password, Character.MIN_VALUE);
        try {
            SecretKeyFactory skf = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
            return skf.generateSecret(spec).getEncoded();
        } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
            throw new AssertionError(""Error while hashing a password: "" + e.getMessage(), e);
        } finally {
            spec.clearPassword();
        }
    }

    public static boolean isExpectedPassword(char[] password, byte[] salt, byte[] expectedHash) {
        byte[] pwdHash = hash(password, salt);

        String s = Arrays.toString(pwdHash);
        System.out.println(""Encryptor pwdHash: "" + s);

        String s2 = Arrays.toString(expectedHash);
        System.out.println(""Encryptor expectedHash: "" + s2);

        Arrays.fill(password, Character.MIN_VALUE);
        if (pwdHash.length != expectedHash.length) return false;
        for (int i = 0; i < pwdHash.length; i++) {
            if (pwdHash[i] != expectedHash[i]) return false;
        }
        return true;
    }


}


public class Controller implements Initializable {
    @FXML
    private Button btnLogin;
    //Some private variables

    @FXML
    private AnchorPane ancPane;
    @FXML
    private ImageView imgLogo;
    @FXML
    private Hyperlink hplRegister;
    @FXML
    private TextField txtUsername;
    @FXML
    private TextField txtPassword;

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        //Some styling

        hplRegister.setOnAction(event -> {
            //Registering event
        });

        btnLogin.setOnAction(event -> {
            try {

                //Loading fxml data
                // I've put the code here just for testing purposes
                // and will not be the final placement.

                char[] passCharArray = txtPassword.toString().toCharArray();

                byte[] salt = Encryptor.getNextSalt();
                byte[] hashedPass = Encryptor.hash(passCharArray, salt);

                String saltString = Arrays.toString(salt);
                System.out.println(""SALT: "" + saltString);

                String hashedPassString = Arrays.toString(hashedPass);
                System.out.println(""HASHED PASS: "" + hashedPassString);

                System.out.println(""Passwords match: "" + Encryptor.isExpectedPassword(passCharArray, salt, hashedPass));

            }catch (Exception e){
                e.printStackTrace();
            }
        });
    }

    //Some getter methods.
}

","The problem is you are wiping out password. when you hash the password you wipe out the char array fill it with blanks this clears passCharArray. When you pass it the second time it's basically checking the hash of the password versus the hash of a blank array. and those definitely do not match. 
In a real case you will get salt and hashed password from a db or some other source. The incoming version will not be hashed, and thus cleared, until passed to isExpectedPassword
","234","<java><javafx><hash><salt>","0","1","1","2018-12-07 00:43:57","53661165","4","1","","","","2018-12-06 21:27:59",""
"11182535","Retrieving salt stored as plaintext alongside ciphertext using C#","I am writing a C# app designed to encrypt text files using Rijndeal (block size 128, key size 256, in other words AES256). I use the user supplied password and a random salt to generate a key using PBKDF2. (The IV is also derived from the password and salt)
I want to store the salt as cleartext prepended to the ciphertext. In other words, line 1 would contain something like >>>SALTGOESHERE. Line 3 and onward would store the ciphertext. 
How should I go about retrieving the salt for decryption?
I'm very new to C#, this is my first real app, so please bear with my ignorance. Thanks.
","yourString.Substring(0, yourString.IndexOf(Environment.NewLine));
change 0 to 3 if "">>>"" is not just the placeholder
","234","<c#><string><encryption><salt>","1","1","1","2012-11-07 07:39:17","11182687","0","","13302","","2012-06-25 05:01:05","2012-06-25 01:24:12",""
"41744028","SHA512 hashing gives incorrect (?) results when ""salted""","I want to implement SHA512 hashing using a salt. I started here, leading to this mcve:
import java.security.MessageDigest;
import org.junit.Test;

public class Sha512Mcve {

    private final String ENCODING = ""ISO-8859-1"";

    @Test
    public void test() {
        System.out.println(computeHashFor(""whatever""));
    }

    private String computeHashFor(String toHash) {
        String salt = ""salt"";
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""SHA-512"");
//          md.update(salt.getBytes(ENCODING));
            byte[] bytes = md.digest(toHash.getBytes(ENCODING));

            return toUnixRepresentation(salt, bytes);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    private String toUnixRepresentation(String salt, byte[] bytes) {
        StringBuilder sb = new StringBuilder();
        sb.append(""$6$"");
        sb.append(salt);
        sb.append(""$"");

        for (int i = 0; i < bytes.length; i++) {
            int c = bytes[i] & 0xFF;
            if (c < 16) sb.append(""0"");
            sb.append(Integer.toHexString(c));
        }
        return sb.toString();
    }
}

Thing is: when I leave the line md.update() commented out, this code gives me the exact same results as some online hash generators (like this one).
For example, hashing the word ""whatever"" gives a hash value ae3d....63a.
But when I run my code with that salt operation; I get different results (again compared against that online tool, which allows to set a salt string, too).
My implementation results in 413...623; the online tool says F25...686.
Any explanation in which way ""salting"" leads to ""implementation specific"" results? 
Is there something I should do differently in my code?
","Salt before or after?
What the calculator does when you set the salt option

whateversalt

What you are doing in your code

saltwhatever

resutls from the calculator
whateversalt
F2527142C752B05467EE53B44735397F5B4C870DF0F154A0CF3AC23B31CF42EE7E1002D326B57DF60ED4B7449CF101290BDC0BECCB677AAAD846CFBE140DF686

saltwhatever
41333B9BAFC14CB3D1106D72A5D461F348B9EA1304A82989E00E5FC2D3239339492FCA12ED5EBF5F6802955C95B5F7ADA4CA035A911C2F29ABE905C3923CF623

Therefore to match the calculation you just have to reverse the order and add the salt last
        md.update(toHash.getBytes(ENCODING));
        byte[] bytes = md.digest(salt.getBytes(ENCODING));

Or even
        md.update(toHash.getBytes(ENCODING));
        md.update(salt.getBytes(ENCODING));
        byte[] bytes = md.digest();

","233","<java><hash><salt><sha>","2","3","1","2017-01-19 15:23:48","41745018","1","3","-1","","2017-05-23 12:16:28","2017-01-19 14:18:45",""
"14032115","Memory limit reached while exectuting a PHP script","I am currently revising my register script to add PDO and bcrypt. However I run into an error I feel when I try to iterate my hash. I had the rounds initially set to 10000 as I seen tutorials with rounds of 60000+ but that was taking ages. So then I set it to 2 just to test it out and then I got an error : 
[Tue Dec 25 10:45:07 2012] [error] [] PHP Fatal error:  Allowed memory size of 134217728 bytes exhausted (tried to allocate 133431193 bytes) in /var/www/register_script.php on line 28, referer: 

My entire register script goes as fallows : 
<?php 
//Minor work needed need to finish user verification 


$host=""localhost""; // Host name
$username=""root""; // Mysql username
$password=""testdbpass""; // Mysql password
$db_name=""test""; // Database name

// Connect to server via PHP Data Object
$dbh = new PDO(""mysql:host=localhost;dbname=test;"", $username, $password);
$dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

CRYPT_BLOWFISH or die ('No Blowfish found.');

// Creating the salt
$Blowfish_Pre = '$2y$15$';
$Blowfish_End = '$';


$Allowed_Chars =
'/.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
$char_len = 63;

$salt_length = 60;
for($round=0;$round<$salt_length;$roundi++)
{
    $salt .= $Allowed_Chars[mt_rand(0,$char_len)];
}
$bcrypt_salt = $Blowfish_Pre . $salt . $Blowfish_End;
//Salt creating stops here

//Creating the hash and password
$password = $_POST['password'];

$hashed_password = crypt($password, $bcrypt_salt);
for($round=0; $round<2; $round++)
    {
        $hashed_password = crypt($password, $bcrypt_salt);
    }

// Insert statements with PDO 

try {
        $query = $dbh->prepare(""INSERT INTO `users_blowfish` (username, email, fname, lname, salt, password) 
                               VALUES (:username, :email, :first, :last, :salt, :hash)"");

        $query->execute(
                        array(
                        'username' => $_POST['username'],
                        'email' => $_POST['email'], 
                        'first' => $_POST['fname'],
                        'last' => $_POST['lname'],
                        'salt' => $bcrypt_salt,
                        'hash' => $hashed_password
                        )); 
    }

    catch (PDOException $e) {
        error_log($e->getMessage());
        die($e->getMessage());
    }

    $dbh= null;

    ?>

<html>
    <body>
        <p> 
            Thank you for registering your account. Please wait for administrator approval before doing anything else. Thank you - System Administrator. 
        </p>
    </body>
</html> 

If I take out the for statement :
$hashed_password = crypt($password, $bcrypt_salt);
for($round=0; $round<2; $round++)
    {
        $hashed_password = crypt($password, $bcrypt_salt);
    }

Then it all work. However what confuses me is that I have two for statements the one above ^
and this one : 
$salt_length = 60;
for($round=0;$round<$salt_length;$roundi++)
{
    $salt .= $Allowed_Chars[mt_rand(0,$char_len)];
}

I guess my questions summed up are 
1) Why does the for statement by the hash make the registration extremely slow and the for statement by the salt creation doesn't affect the speed of registration?
","Looping over crypt() makes your page take forever because Blowfish already uses multiple hashing rounds, and crypt() is what does all of the actual work for the hashing. So if you run crypt() multiple times, you're doing all of that work each time.
Looping over adding a few characters to the salt doesn't affect the time because you're not doing any real work - just adding a few characters to a string.
You don't need to loop over crypt() multiple times; you're already using bcrypt which includes a work factor.
You also shouldn't need to store the salt separately; the hash produced by bcrypt contains its own salt.
","232","<php><hash><iteration><salt><bcrypt>","0","1","1","2012-12-25 16:22:30","14032278","1","","","","","2012-12-25 15:57:33",""
"19599424","MySQL/PHP - Database User Login Conversion","I have a vBulletin Database that I'm trying to switch users to a custom system, I've converted the usernames, and the passwords, I then converted the double MD5'd passwords to SHA256, but I'm left with one issue, which is the salt.
What would be the easiest way to either convert the old vBulletin salt, or to check to see if the password is correct, and then generate a new salt for the first time they login? 
Checking script:
$vbconvert = md5(md5($_POST[""password""]));
$check_password = hash('sha256', $vbconvert . $row['salt']); 
for($round = 0; $round < 65536; $round++) 
{ 
      $check_password = hash('sha256', $check_password . $row['salt']); 
} 

if($check_password === $row['password']) 
{ 

      $login_ok = true; 
} 

In short, what is the easiest way to either convert or create a new salt?
","Do you know about the PHP function password_hash(), it is the recommended way to hash passwords. It automatically generates a cryptographically safe salt for each password and includes it in the resulting 60-character string.
$2y$10$nOUIs5kJ7naTuTFkBy1veuK0kSxUFXfuaOKdOKf9xYT0KKIGSJwFa

The example above is a possible result of password_hash(), have a look at the part $nOUIs5kJ7naTuTFkBy1veu, this is the generated salt and it will be used by the function password_verify() to check the password.
You won't have to worry about the salt anymore, no additional database field is necessary, just store the hash and you are fine!
The easiest way to migrate your passwords, is to wait for the user to login the next time. When he enters the password, you can check if the hash is already migrated, then check with password_verify(). If it is not yet migrated then check it with your old vBulletin code, if the password is correct then use password_hash() to generate a new hash and store it.
","231","<php><mysql><md5><salt><sha256>","0","0","1","2013-10-30 12:07:54","","1","","","","","2013-10-25 21:05:58",""
"13450509","Using Salt To Encrypt Password PHP","Here is my code,
    <?php 


    function($string){
    $salt = ""@x5v"";
    $hash = sha1(md5($salt.$string)).md5($string).sha1(md5($string));
    return $hash;
    }   
    ?>
    <?php

    print ""<center>"";
    if(isset($_POST['username'])){
    echo 'Variable is set and I can use it!';
   }
   $Username = $_POST[""username""]; 
   $Password = md5($_POST[""password.$hash""]);
   $Email  = $_POST[""email""];


?>

I think it's this line causing the problem:
$Password = md5($_POST[""password.$hash""]);

What would be the correct syntax to pass the users password into the database, encrypted with the string I defined above?
","I recommend this library instead of rolling your own solution:
http://www.openwall.com/phpass/
Here's an article that explains how to use it:
http://sunnyis.me/blog/secure-passwords/
You should read this StackOverflow answer too:
https://stackoverflow.com/a/6337021/943102
","230","<php><security><salt>","-1","0","2","2012-11-19 10:04:23","13451492","1","","","","","2012-11-19 09:04:15",""
"13450509","Using Salt To Encrypt Password PHP","Here is my code,
    <?php 


    function($string){
    $salt = ""@x5v"";
    $hash = sha1(md5($salt.$string)).md5($string).sha1(md5($string));
    return $hash;
    }   
    ?>
    <?php

    print ""<center>"";
    if(isset($_POST['username'])){
    echo 'Variable is set and I can use it!';
   }
   $Username = $_POST[""username""]; 
   $Password = md5($_POST[""password.$hash""]);
   $Email  = $_POST[""email""];


?>

I think it's this line causing the problem:
$Password = md5($_POST[""password.$hash""]);

What would be the correct syntax to pass the users password into the database, encrypted with the string I defined above?
","
I think it's this line causing the problem:
$Password = md5($_POST[""password.$hash""]);

What you are doing here is incorrect.  It should be:
$Password = md5($_POST[""password""] . $hash);

What you were doing is actually indexing in to $_POST with a key that would have ended up something like 'password.fdg858fug83u5g5'.
","230","<php><security><salt>","-1","2","2","2012-11-19 10:04:23","13451492","1","","","","","2012-11-19 09:04:15",""
"43343245","Online Saltstack Minions on Azure losses connection with Master on DigitalOcean","I have a salt 2016.11.3 (Carbon) playground with a master in DigitalOcean and 4 minions in Azure (three ubuntu and 1 windows).
After a while ubuntu minions are not responding to salt -t 30 '*' test.ping but they are online ( I can ssh into them )
Restarting the master systemctl restart salt-master or minions systemctl restart salt-minion seems to bring minions back for a while.
Things checked:

Azure machines are put to sleep and only woken up on external events ✗
The network between the two clouds is very slow ✗
salt master machine is too small ✗
salt minions do not ask master for ""work"" ✗
salt-master hangs for some reason 
salt-minion communication error ✔

Also after restart I get a double response from re-added nodes but I think this is a cache problem because it disappears after some time (cache invalidation).
","It seems like is a communication error. There is an older 2013 bug report on saltstack github repo and someone states in comments that AWS and Azure load balancers don't respect TCP keepalives. 
Suggested solutions:

add a cron to ping minions each minute 
change some keepalive settings in Azure minions config file

Until now solution #2 works for me.
tcp_keepalive: True
tcp_keepalive_idle: 60

","229","<azure><networking><amazon-ec2><salt><salt-stack>","-1","1","1","2018-07-12 08:53:09","43425466","8","1","1122922","","2017-04-16 07:33:54","2017-04-11 10:22:31",""
"51383915","Do bcrypt minor version generates (2b vs 2a) generate different salt?","So depending on the minor version of the bcrypt it will execute different hash computations as described in https://en.wikipedia.org/wiki/Bcrypt
However, do salt gen has any differences between the versions apart from setting the minor and major? Is it just pure random string based on the specific length?
","The Salt is just a random string, it should vary every time you generate a password hash regardless of the 2a/2b scheme. Salts should prevent people from build dictionaries of common plaintext and hash combinations.
","229","<security><hash><bcrypt><salt><crypt>","0","1","1","2018-07-18 13:59:39","51404001","0","","","","","2018-07-17 14:26:38",""
"7678497","How to store salt and IV in file cocoa?","So I have implemented salts and IVs, but the decryption is now a bit buggy. Of course, I need both the salt and IV for decryption as well, but the user can't enter that... I need to be able to store both the salt and IV in the encrypted file, then retrieve the salt and IV when the user is decrypting the file. How would I go about doing this? How would I go about storing and retrieving that data?
","Store them along with the ciphertext. You'll need to come up with a suitable file format in which to do it; a keyed archiver will make it easy.
","228","<cocoa><encryption><aes><salt>","1","0","2","2011-10-07 01:06:16","7682127","0","","30461","","2011-10-06 20:48:32","2011-10-06 17:59:28",""
"7678497","How to store salt and IV in file cocoa?","So I have implemented salts and IVs, but the decryption is now a bit buggy. Of course, I need both the salt and IV for decryption as well, but the user can't enter that... I need to be able to store both the salt and IV in the encrypted file, then retrieve the salt and IV when the user is decrypting the file. How would I go about doing this? How would I go about storing and retrieving that data?
","As Peter said, the initialization vector and the salt for key derivation should be stored together with the encrypted file, in a header or such.
Instead of creating your own ad-hoc file format for encrypted storage, have a look at the OpenPGP message format (as used by both PGP and GnuPG, and maybe other programs). It is specified in RFC 4880. You will likely not have to implement all of it, but grab the portions that you need for your application.
As an added bonus, the user can then use PGP/GPG (with the right options and the password/key) to decrypt the data, if your program should somehow cease to work.
","228","<cocoa><encryption><aes><salt>","1","2","2","2011-10-07 01:06:16","7682127","0","","30461","","2011-10-06 20:48:32","2011-10-06 17:59:28",""
"56372420","data must be a string and salt must either be a salt string or a number of rounds","This is the error I am getting:
Error: data must be a string and salt must either be a salt string or a number of rounds.
This is the code that i have written is for resetting the password in my db using their email id.
If this is not correct can anyone tell me how to reset the password in node js using oracle database.
The error is in the bcrypt.hash line.
Below is the whole code:
function changePassword(email, newPassword, callback) {

    var oracledb = require('oracledb');
    oracledb.outFormat = oracledb.OBJECT;

    oracledb.getConnection({
        user          : '',
        password      : '',
        connectString : ''
      },
      function(err, connection) {
        if (err) {
          return callback(new Error(err));
        }
        bcrypt.hash(newPassword, numSaltRounds, function(err, hash) {
          if (err) { return callback(err); }
          connection.execute(
            ' select password as ""password"" = : hash, ' +
            ' from jsao_users ' +
            ' where email = :email ', [hash, email], { autoCommit: true },
            function(err, result) {
              if (err) {
                console.log(err);
                doRelease(connection);
                return callback(new Error(err));
              }
              doRelease(connection);
              callback(null, result.rowsAffected > 0);
            });
        });

        // Note: connections should always be released when not needed
        function doRelease(connection) {
          connection.close(
            function(err) {
              if (err) {
                console.error(err.message);
              }
            });
        }
      });
}

And this is the part where I am getting the error:
 bcrypt.hash(newPassword, numSaltRounds, function(err, hash) { //this is the line
          if (err) { return callback(err); }
          connection.execute(
            ' select password as ""password"" = : hash, ' +
            ' from jsao_users ' +
            ' where email = :email ', [hash, email], { autoCommit: true },
            function(err, result) {
              if (err) {
                console.log(err);
                doRelease(connection);
                return callback(new Error(err));
              }
              doRelease(connection);
              callback(null, result.rowsAffected > 0);
            });
        });

","","227","<node.js><salt><node-oracledb>","1","","0","2019-10-28 09:51:29","","1","","1509264","","2019-10-28 09:51:29","2019-05-30 05:56:21",""
"6176848","PKCS#5 Salt privacy?","In the official documentation of the PKCS5 V2.0 standard, we can read ""The salt can be viewed as an index into a large set of keys derived from the password, and need not be kept secret."" 
The part ""need not be kept secret"" is interesting. 
Since the salt is used to add a huge range of password possibilities (or to create two different keys if two users had the same password), what is the purpose of letting the salt insecure?
I understand that typically, an attacker wont have access to the salt, so it will complicates his job to find the right password. But if an attacker knows the salt, where is the ""magic""? Knowing the salt is like perform a traditional dictionary attack (if we exclude the iteration count)! 
Is there something that I dont understand? I know that knowing the salt dont break the security but, saying that it ""need not be kept secret"" sounds strange to me.
","The rest of the paragraph (in the standard) seems to explain it:

... Although it may be possible for an
  opponent to construct a table of
  possible passwords (a so-called
  “dictionary attack”), constructing a
  table of possible keys will be
  difficult, since there will be many
  possible keys for  each password. An
  opponent will thus be limited to
  searching through passwords separately
  for each salt.

The point is that you can't just take a list of passwords (let's say 77 million passwords) and run them through the same tables. You will need to build a separate table for each password + salt.
","226","<iteration><salt><privacy><pkcs#5>","0","0","1","2011-05-30 13:34:27","","2","","","","","2011-05-30 13:22:42",""
"16798343","hack php vs database and password obfuscation","I have no view about how much percent of hacks are breaking into codes and how much percent is breaking into database. but if my guess is true and breaking into php codes is harder than hijacking database, would it  increase security by obfuscating hashed password inside database?
in most of cases that I have seen:
DB_hash = bcrypt(real_password.salt);

why not changing it?
DB_hash = bcrypt(salt.real_password);

or even if I go further:
DB_hash = strrev( bcrypt(salt_last_five_char.real_password.rest_of_salt) );

the hacker does not know my php code. even if he knows my database, how to test his attack?
would it help increasing my security?
thanks
","This is what's called ""security by obscurity"" which means that you're mistakenly relying on the implementation to protect your data, rather than a strong algorithm.   As soon as someone who has your hashes and salts figures out what you're doing you're back to the strength of the algorithm alone.  
As SLaks mentioned in the comments, SHA-1 is not a good algorithm for password hashing.   Don't worry about messing about with the salts, just use a good random salt and a better algorithm, such as bcrypt.  
","226","<security><hash><salt>","1","1","2","2013-05-30 13:34:06","16798443","3","","2398377","","2013-05-28 18:07:08","2013-05-28 17:46:53",""
"16798343","hack php vs database and password obfuscation","I have no view about how much percent of hacks are breaking into codes and how much percent is breaking into database. but if my guess is true and breaking into php codes is harder than hijacking database, would it  increase security by obfuscating hashed password inside database?
in most of cases that I have seen:
DB_hash = bcrypt(real_password.salt);

why not changing it?
DB_hash = bcrypt(salt.real_password);

or even if I go further:
DB_hash = strrev( bcrypt(salt_last_five_char.real_password.rest_of_salt) );

the hacker does not know my php code. even if he knows my database, how to test his attack?
would it help increasing my security?
thanks
","What you want to do, is to add a server-side secret. If done correctly this can indeed protect weak passwords, if the attacker has access to the database, but not to the code (this is typical for SQL-injection).
Adding the server-side secret can either be done adding a pepper before hashing, or even better by encrypting the hash-value with a server-side key before storing it to the database. What i would not recommend, is to obfuscate the hashing process, in your example the secret is the algorithm and not a key.
","226","<security><hash><salt>","1","0","2","2013-05-30 13:34:06","16798443","3","","2398377","","2013-05-28 18:07:08","2013-05-28 17:46:53",""
"18879247","How to setup my new vps quickly?","Recently I knew some words puppet chef salt. It seems that they are used to setup env for thousands of machines with a master machine.
But I just have one or two vps. How can I create a production env quick with these tools? I found some docs from salt but most of its docs talk about how to use master to create a new production server.
So is there some good way to create a product env for only vps.
","chef, puppet etc. work exactly the same way irrespective of the number of VPS you want to manage. You basically write your server configuration in the form of code (in other words, template of a server). Then you run that code as many times as you like.
chef comes with a simpler version called chef-solo. If you have only 2 VPSs to manage, you will be happy with chef-solo, as the learning curve is much smaller.
Vagrant can be a great tool to learn chef-solo or puppet
","222","<chef><puppet><vps><salt>","1","0","1","2013-09-19 18:13:41","18902058","2","","","","","2013-09-18 18:05:31",""
"18280179","Encrypted string not being stored in database correctly","I'm doing some encryption tasks in C# and ran into an issue I can't quite figure out. I sometimes get very complex salted hash strings for users passwords and these strings, for some reason, aren't getting stored in the database correctly. 
I'm using an 8-byte salt randomly generated from the RNGCryptoServiceProvider class. I am using the SHA256Managed class as my HashAlgorithm. I'm getting the string to store from the bytes created via the ASCIIEncoding.Default.GetString() method. The column these values are being stored in is of type (NVARCHAR(50), NULL). I'm storing them using the SqlCommand class.
I can see the exact string fine when stepping through my code and using the immediate window. It seems like the problem is happening when I call cmd.ExecuteNonQuery(). Should I be doing it differently than below?
string query = @""UPDATE User SET password = @password WHERE id = @userID"";

cmd = new SqlCommand(query, conn);
cmd.Parameters.AddWithValue(""@password"", encryptedPassword);
cmd.Parameters.AddWithValue(""@userID"", userID);

int rowsAffected = cmd.ExecuteNonQuery();

If you require any further information, let me know. I just don't wanna put too much on here about my exact algorithm or the results of it.
Thank you.
","Try using                 Convert.ToBase64String() instead for encoding byte array into string. This should solve your problem.
","222","<c#><string><encryption><salt>","1","2","1","2013-08-16 18:52:46","18280222","3","","","","","2013-08-16 18:49:46",""
"15219039","Hashing User password in Cookie","I'm trying to set a cookie so that user can be automatically logged in.
I do not want to query DB for session string when authenticating cookies (basically I need to do that whenever most of my APIs are called, I want to make it faster)
the solution I found is to set a hash in the cookie and try to decrypt it when authenticating, if decryption is successful then log user in.
I am wondering what hashing method should I use?  Do I just use a constant salt in my program and hash the userName with that salt, store the hashed userName and original userName in cookie,  and try to match userName with decrypted hash upon authentication?
Since I am not familiar with hashing functions, can anyone kindly provide some suggestions on how should I do it in Java?
","I recommend you to use an unique token key generated for each session. For example, if a client once logged in from a computer, this token will be valid until the password is changed. Expiring a cookie is not completely secure...
You can also use session variable for a simple authentication. Once you set a session variable for an user, every time this user sends a request with this session id; your session variable will be reached for just this session id. Most of the platforms can also use DB for storing these variables for you.
","221","<authentication><hash><salt>","0","1","3","2015-03-28 19:12:17","15219515","0","","","","","2013-03-05 08:29:16",""
"15219039","Hashing User password in Cookie","I'm trying to set a cookie so that user can be automatically logged in.
I do not want to query DB for session string when authenticating cookies (basically I need to do that whenever most of my APIs are called, I want to make it faster)
the solution I found is to set a hash in the cookie and try to decrypt it when authenticating, if decryption is successful then log user in.
I am wondering what hashing method should I use?  Do I just use a constant salt in my program and hash the userName with that salt, store the hashed userName and original userName in cookie,  and try to match userName with decrypted hash upon authentication?
Since I am not familiar with hashing functions, can anyone kindly provide some suggestions on how should I do it in Java?
","Two approaches:
1)  Create your own authentication framework.  In this case I recommend to put in a cookie an encrypted value of a username (I strongly not recommend to use hashing; also please do not put the user password value). For encryption please use AES-256 encryption with BouncyCastle:
256bit AES/CBC/PKCS5Padding with Bouncy Castle
If your framework success to decrypt the cookie – the user is authenticated.  If your framework cannot decrypt the cookie or the user is not exist - the user is not authenticated.
2)  Please consider to use the Spring Security framework: 
http://static.springsource.org/spring-security/site/docs/3.1.x/reference/springsecurity-single.html
It is the great framework and solves a lot of authentication / authorization problems.
Your problem is solved by the “RememberMe” feature:
http://static.springsource.org/spring-security/site/docs/3.1.x/reference/springsecurity-single.html#ns-remember-me
Best regards,
Michael
","221","<authentication><hash><salt>","0","0","3","2015-03-28 19:12:17","15219515","0","","","","","2013-03-05 08:29:16",""
"15219039","Hashing User password in Cookie","I'm trying to set a cookie so that user can be automatically logged in.
I do not want to query DB for session string when authenticating cookies (basically I need to do that whenever most of my APIs are called, I want to make it faster)
the solution I found is to set a hash in the cookie and try to decrypt it when authenticating, if decryption is successful then log user in.
I am wondering what hashing method should I use?  Do I just use a constant salt in my program and hash the userName with that salt, store the hashed userName and original userName in cookie,  and try to match userName with decrypted hash upon authentication?
Since I am not familiar with hashing functions, can anyone kindly provide some suggestions on how should I do it in Java?
","I don't come from Java background, but your hash key should never be something exposed.
For example:- In your case UserName is key and one of the fellow developers who knows what mechanism you are using can break it down because name is something very common and known.
Don't know what the best way is but I have used UserID(GUID) which is not visible in UI.
","221","<authentication><hash><salt>","0","0","3","2015-03-28 19:12:17","15219515","0","","","","","2013-03-05 08:29:16",""
"19811559","Login form, validating hashed+salt password","In my registration.php form I'm hashing passwords with this pastebin
But when I try to validate correct password in login.php form pastebin2 it will evaluate the password as incorrect.
Have you got any idea what is wrong in login validating password? 
","","220","<php><hash><passwords><salt>","0","","0","2013-11-06 11:58:38","","3","","","","","2013-11-06 11:58:38",""
"41187121","PHP - Unable to login after password reset with sha512","I'm building a simple login script and I am able to register and login no problem. However I am now trying to add a ""Forgotten password"" feature and I can't figure out why it's not working.
I am able to update the password in the mysql table using the same sha512 and salting method I use in my registration script but after its updated I can no longer login.
The login function that runs when a user tries to login is as follows:
if ($stmt = $mysqli->prepare(""SELECT userID, firstName, pWord, salt FROM users WHERE email = ? AND conf = 1 LIMIT 1"")) {
    $stmt->bind_param('s', $email);  // Bind ""$email"" to parameter.
    $stmt->execute();    // Execute the prepared query.
    $stmt->store_result();
    // get variables from result.
    $stmt->bind_result($user_id, $firstName, $db_password, $salt);
    $stmt->fetch();

    // hash the password with the unique salt.
    $password = hash('sha512', $password . $salt);
    if ($stmt->num_rows == 1) {
            // Check if the password in the database matches 
            // the password the user submitted.
            if ($db_password == $password) {
                ... // Log user in
            }
}
}

The password part of my registration script:
$random_salt = hash('sha512', uniqid(openssl_random_pseudo_bytes(16), TRUE));

    // Create salted password 
    $password = hash('sha512', $password . $random_salt);

    // Insert the new user into the database 
    if ($insert_stmt = $mysqli->prepare(""INSERT INTO users (firstName, lastName, email, pWord, salt, accConf, conf) VALUES (?, ?, ?, ?, ?, ?, 0)"")) {

        $insert_stmt->bind_param('ssssss', $firstName, $lastName, $email, $password, $random_salt, $confirmation);
        $insert_stmt->execute();
... // Do something }

The password part of my reset script:
$random_salt = hash('sha512', uniqid(openssl_random_pseudo_bytes(16), TRUE));

    // Create salted password 
    $password = hash('sha512', $password . $random_salt);

    // Update the user's password
    if ($update = $mysqli->prepare('UPDATE users SET pWord = ?, salt = ? WHERE email = ?')) {

        $update->bind_param('sss', $password, $random_salt, $email);
        $update->execute();
... //Do something }

I can see that in the database, the password is updating but when I try to login with the new password, my ""Invalid login details error is showing up.
Is there a reason that my passwords would not work after updating?
","","219","<php><mysqli><passwords><salt><sha512>","1","","0","2016-12-16 15:00:46","","11","","","","","2016-12-16 15:00:46",""
"51249187","rsync auth failed when executed by salt","Rsync running normally via salt without password file, but when I added password file today, it didn't work anymore:  
# salt 10.10.70.202 rsync.rsync rsync://10.10.81.71:9999/test /tmp/test/ delete=True passwordfile=/etc/rsync.passwd
10.10.70.202:
    ----------
    pid:
        105711
    retcode:
        5
    stderr:
        @ERROR: auth failed on module test
        rsync error: error starting client-server protocol (code 5) at main.c(1516) [Receiver=3.0.9]
    stdout:
ERROR: Minions returned with non-zero exit code

It's using salt rsync module, same result running by bash command:
# salt 10.10.70.202 cmd.run '/usr/bin/rsync -avz --delete rsync://10.10.81.71:9999/test /tmp/test/ --password-file=/etc/rsync.passwd'
10.10.70.202:
    @ERROR: auth failed on module test
    rsync error: error starting client-server protocol (code 5) at main.c(1516) [Receiver=3.0.9]
ERROR: Minions returned with non-zero exit code

However, same command working normally when I execute it on rsync client local machine(10.10.70.202):
#/usr/bin/rsync -avz --delete rsync://10.10.81.71:9999/test /tmp/test/ --password-file=/etc/rsync.passwd
receiving incremental file list

sent 54 bytes  received 108 bytes  324.00 bytes/sec
total size is 0  speedup is 0.00

Rsync server config(10.10.81.71):
# cat /etc/rsyncd.conf
pid file = /var/run/rsyncd.pid
port = 9999
address = 10.10.81.71
uid = root
gid = root
use chroot = no
read only = no
max connections = 20
lock file = /var/run/rsync.lock
log file = /var/log/rsync.log
#motd file = /etc/rsyncd/rsyncd.motd
timeout = 300
auth users = root
secrets file = /etc/rsyncd.secrets

[test]
path = /tmp/test/
read only = no

# cat /etc/rsyncd.secrets
root:applepen

Rsync client config(10.10.70.202):
# ls -l /etc/rsync.passwd 
-rw------- 1 root root 9 Jul  9 22:47 /etc/rsync.passwd

# cat /etc/rsync.passwd 
applepen

The error message same as rsync when password incorrect, so I guess if it related with salt didn't read correct password file's content:
# echo 'foobar' > /etc/rsync.passwd 
# /usr/bin/rsync -avz --delete rsync://10.10.81.71:9999/test /tmp/test/ --password-file=/etc/rsync.passwd
@ERROR: auth failed on module test
rsync error: error starting client-server protocol (code 5) at main.c(1516) [Receiver=3.0.9]

I also checked salt rsync module, didn't found useful info.
Salt version:
# salt --versions-report
           Salt: 2015.5.11
         Python: 2.6.6 (r266:84292, Aug 18 2016, 15:13:37)
         Jinja2: unknown
       M2Crypto: 0.20.2
 msgpack-python: 0.4.6
   msgpack-pure: Not Installed
       pycrypto: 2.0.1
        libnacl: Not Installed
         PyYAML: 3.10
          ioflo: Not Installed
          PyZMQ: 14.3.1
           RAET: Not Installed
            ZMQ: 3.2.5
           Mako: Not Installed
        Tornado: Not Installed
        timelib: Not Installed
       dateutil: Not Installed

Any suggestion is greatly thankful!
[Update]
I deployed another salt environment with latest salt version, still can reproduce the issue, it might be a feature bug, decided to escalate this issue to saltstack.
# salt --versions-report
Salt Version:
           Salt: 2018.3.2

Dependency Versions:
           cffi: Not Installed
       cherrypy: Not Installed
       dateutil: Not Installed
      docker-py: Not Installed
          gitdb: Not Installed
      gitpython: Not Installed
          ioflo: Not Installed
         Jinja2: 2.8.1
        libgit2: Not Installed
        libnacl: Not Installed
       M2Crypto: Not Installed
           Mako: Not Installed
   msgpack-pure: Not Installed
 msgpack-python: 0.4.6
   mysql-python: Not Installed
      pycparser: Not Installed
       pycrypto: 2.6.1
   pycryptodome: Not Installed
         pygit2: Not Installed
         Python: 2.7.13 (default, Mar 30 2018, 15:31:59)
   python-gnupg: Not Installed
         PyYAML: 3.11
          PyZMQ: 14.5.0
           RAET: Not Installed
          smmap: Not Installed
        timelib: Not Installed
        Tornado: 4.2.1
            ZMQ: 4.0.5

System Versions:
           dist: centos 6.5 Final
         locale: UTF-8
        machine: x86_64
        release: 2.6.32-431.11.25.el6.ucloud.x86_64
         system: Linux
        version: CentOS 6.5 Final

[Update]
Opened #48517 for tracking this issue.
","Fixed this issue by setting the environment variables for inside of salt, salt didn't pass password file content or environment variable RSYNC_PASSWORD to rsync, it causing rsync auth failed.
# cat /srv/salt/set_rsync_env.sls
environment_variables:
  environ.setenv:
    - name: rsync
    - update_minion: True
    - value:
        USER: ""root""
        RSYNC_PASSWORD: ""applepen""

# salt 10.8.172.14 state.apply set_rsync_env
10.8.172.14:
----------
          ID: environment_variables
    Function: environ.setenv
        Name: rsync
      Result: True
     Comment: Environ values were set
     Started: 19:15:13.012966
    Duration: 7.606 ms
     Changes:
              ----------
              RSYNC_PASSWORD:
                  applepen
              USER:
                  root

Summary for 10.8.172.14
------------
Succeeded: 1 (changed=1)
Failed:    0
------------
Total states run:     1
Total run time:   7.606 ms

# salt 10.10.70.202 cmd.run 'echo $USER $RSYNC_PASSWORD'
10.10.70.202:
    root applepen

# salt 10.10.70.202 cmd.run '/usr/bin/rsync -avz --delete rsync://10.10.81.71:9999/test /tmp/test/'
10.10.70.202:
    receiving incremental file list

    sent 54 bytes  received 108 bytes  108.00 bytes/sec
    total size is 0  speedup is 0.00

","218","<rsync><salt><salt-stack>","0","0","1","2018-07-11 14:53:07","","0","","2992067","","2018-07-11 09:21:56","2018-07-09 15:34:31",""
"31385955","how salt can be implemented to prevent pre-computation dictionary attack on password","A salt makes every users password hash unique, and adding a salt to a password before hashing to protect against a dictionary attack. But how?
","The tool you almost certainly want is called PBKDF2 (Password-Based Key Derivation Function 2). It's widely available, either under the name ""pbkdf2"" or ""RFC 2898"". PBKDF2 provides both salting (making two otherwise identical passwords different) and stretching (making it expensive to guess passwords).
Whatever system you are developing for probably has a function available that takes a password, a salt, a number of iterations, and an output size. Given those, it will output some string of bytes. There are several ways to actually make use of this depending on your situation (most notably are you dealing with local authentication or remote authentication?)
Most people are looking for remote authentication, so let's walk through a reasonable way to implement that using a mix of deterministic and random salts. (See further discussion below w/ @SilverlightFox.)
First, the high-level approach:

Hash on the client against a deterministic salt. The client should never send a bare password to the server. Users reuse their passwords all the time. You don't want to know their actual password. You'd rather never see it.
Salt randomly and stretch on the server and then compare.

Here's the actual breakdown:

Choose an app-specific component for your salt. For example, ""net.robnapier.mygreatapp"" might be my prefix.
Choose a user-specific component for your salt. The userid is usually ideal here.
Concatenate them to create your salt. For example, my salt might be ""net.robnapier.mygreatapp:suejones@example.org"". The actual salt does not matter too much. What matters is that it is at least ""mostly"" unique across all of your users and across all other sites that might also hash passwords from your users. The scheme I've given achieves that.
Choose a local number of iterations for PBKDF2. That number is almost certainly 1000. This is too few iterations, but is about all JavaScript can handle reasonably. The more iterations, the more secure the system, but the worse the performance. It's a tension.
Choose a length for your hash. 32 bytes is generally a good choice.
Choose a ""PRF"" if your system allows you to pick one. HMAC-SHA-256 is a good choice.

You now have all the basic pieces in place. Let's compute some hashes.

On the client, take the password and pass it through PBKDF2 with the above settings. That will give you 32 bytes to send to the server.
On the server, if this is the account creation, create 8 or 16 bytes of random data as your salt for this account. Save that in the database along with the username. Use that salt, and another set of iterations (usually 10,000 or 100,000 if you're not in Node) and apply PBKDF2 to the data that the user sent. Store that in the database. If you're testing the password, just read the salt from the database and reapply PBKDF2 to validate.

Everywhere I say ""PBKDF2"" here there are another options, probably the most common of which is scrypt (there is also bcrypt). The other options are technically better than PBKDF2. I don't think anyone would disagree with that. I usually recommend PBKDF2 because it's so ubiquitous and there's nothing really wrong with it. But if you have scrypt available, feel free to use that. The client and server do not have to use the same algorithm (the client can use PBKDF2 and the server can use scrypt if you like).
","217","<security><password-protection><salt>","0","3","2","2015-07-15 13:35:58","","0","1","2686013","","2015-07-13 14:34:05","2015-07-13 14:22:37",""
"31385955","how salt can be implemented to prevent pre-computation dictionary attack on password","A salt makes every users password hash unique, and adding a salt to a password before hashing to protect against a dictionary attack. But how?
","What's the md5 hash of ""superCommonPassword""? That's easy to pre-calculate. 
It's b77755edafab848ffcb9580307e97414
If you steal a password database and see that hash value, you know the password is probably ""superCommonPassword"". 
What's the md5 hash (""aStringYouDontKnowUntilYouStealAPasswordDatabase"" + ""superCommonPassword"")? Oh, you can't calculate that until you steal the database. 
An unknown salt means pre-calculating hashes of common passwords is useless. An unknown salt per user means you need to calculate hashes of common passwords for each user. This slows down the attacker and increases his costs. 
Don't use md5 for password hashing though. Use bcrypt or scrypt or PBKDF2.
","217","<security><password-protection><salt>","0","1","2","2015-07-15 13:35:58","","0","1","2686013","","2015-07-13 14:34:05","2015-07-13 14:22:37",""
"27448191","Alternative to Hash and Salt for a Social Security/Government ID Number","I have a form that takes a social security number, and I need write code that checks if it has been entered within the last two days. All this is easy.
My current plan is to create a table ssn_hash(id, ssn_hash, date) and hash/salt the the ssn, then INSERT them into database. After that, create a view that displays the lasts two days. The salt being some other user data taken from the form.
I would like to know 2 things:

Is this a good approach? Or is there some other common practice that will achieve the same result.
Under PHP, is the only option from the std library the crypt() function?

","crypt is perfectly fine with the following caveats:

If you use user data as a salt, you severely limit its randomness.  Opt for something like openssl_random_pseudo_bytes instead.
Don't be afraid to store the salt in the table.  In fact attr_encrypted, a popular Ruby on Rails gem does this.  Just make sure you generate a unique salt for each entry.  Never reuse a salt.
Make sure you don't use a broken encryption method like DES or SHA-1.  You can specify CRYPT_BLOWFISH or CRYPT_SHA512.

","216","<php><mysql><encryption><hash><salt>","0","1","2","2014-12-12 17:15:58","","2","","","","","2014-12-12 16:44:17","2014-12-13 13:21:14"
"27448191","Alternative to Hash and Salt for a Social Security/Government ID Number","I have a form that takes a social security number, and I need write code that checks if it has been entered within the last two days. All this is easy.
My current plan is to create a table ssn_hash(id, ssn_hash, date) and hash/salt the the ssn, then INSERT them into database. After that, create a view that displays the lasts two days. The salt being some other user data taken from the form.
I would like to know 2 things:

Is this a good approach? Or is there some other common practice that will achieve the same result.
Under PHP, is the only option from the std library the crypt() function?

","Password encryption functions won't help you here if you need to do a quick look-up to see if the number has been used. Instead you'll have to go with a straight SHA1-type hash so you can do a reverse lookup.
You'll want to be absolutely certain your server is secured properly. Purging data from this table on a regular basis is probably a good idea as well.
","216","<php><mysql><encryption><hash><salt>","0","1","2","2014-12-12 17:15:58","","2","","","","","2014-12-12 16:44:17","2014-12-13 13:21:14"
"18730188","Re-Hash user database","I was wondering if there was a method to change the way my site hashed passwords. My coder friend wasn't the smartest when he didn't add salts to the sha512 hash. So now it is very insecure and I wish to change that. I was thinking about making some complicated code to rehash when someone who has the old hash type logs in and it would set the variable to true after adding a salt. Or I could take the currently hashed passwords and somehow fuse a salt into them. I would rather not reset my user database if I don't have to. Any idea would help. I am also quite the php noob so please explain if you include code.
It is Hashed using this method.
<?php hash('sha512',""passwordhere"") ?>

","
Alter your user table to include a 'salt' column, default value of 'NULL'.
Alter your login code to check if the user has a salt:

If yes, compare the salted hashes and log in
If no:

Compare the unsalted hashes.
Generate a random salt.
Generate your salty hash.
Store your new salt and hash in the database.
Continue the login process.



Of course, you will also need to update your code for registration, password change/recovery, etc.
Alternatively, instead of a 'salt' column you could put in a 'hash_ver' column and use that to determine which validation method to use and when to update the hash. That way if you wish to use a hashing method that packs the salt in with the hash like bcrypt you don't get stuck trying to figure out what type of hash you're dealing with.
","216","<php><hash><salt><password-encryption><sha512>","0","2","3","2013-09-13 15:35:13","18730297","1","","","","","2013-09-10 23:11:12",""
"18730188","Re-Hash user database","I was wondering if there was a method to change the way my site hashed passwords. My coder friend wasn't the smartest when he didn't add salts to the sha512 hash. So now it is very insecure and I wish to change that. I was thinking about making some complicated code to rehash when someone who has the old hash type logs in and it would set the variable to true after adding a salt. Or I could take the currently hashed passwords and somehow fuse a salt into them. I would rather not reset my user database if I don't have to. Any idea would help. I am also quite the php noob so please explain if you include code.
It is Hashed using this method.
<?php hash('sha512',""passwordhere"") ?>

","$old_hash = hash('sha512',""passwordhere"");
$salt = ''; // Generate salt here
$new_hash = hash('sha512', $old_hash.$salt) ;

","216","<php><hash><salt><password-encryption><sha512>","0","0","3","2013-09-13 15:35:13","18730297","1","","","","","2013-09-10 23:11:12",""
"18730188","Re-Hash user database","I was wondering if there was a method to change the way my site hashed passwords. My coder friend wasn't the smartest when he didn't add salts to the sha512 hash. So now it is very insecure and I wish to change that. I was thinking about making some complicated code to rehash when someone who has the old hash type logs in and it would set the variable to true after adding a salt. Or I could take the currently hashed passwords and somehow fuse a salt into them. I would rather not reset my user database if I don't have to. Any idea would help. I am also quite the php noob so please explain if you include code.
It is Hashed using this method.
<?php hash('sha512',""passwordhere"") ?>

","Every password-storing-system must have the option to switch to a better hash algorithm, your problem is not a one-time migration problem. In the answer to this question i tried to point out the necessary steps.
Note: Fast hash algorithms like SHA-* are not appropriate to hash passwords, instead switch directly to a slow key-derivation function like BCrypt. The new PHP function password_hash() will make hashing easy (it will generate a safe salt for you), and is ""future proof"", also it will make switching in future possible.
","216","<php><hash><salt><password-encryption><sha512>","0","1","3","2013-09-13 15:35:13","18730297","1","","","","","2013-09-10 23:11:12",""
"48297108","python 3.6.3 execute salt, receive UnicodeDecodeError","I am doing an Ops Web by django==1.11, and I want to use SaltStack to manage servers. After some days learning, I can do some simple tasks.
But, when I use python code to call salt.client.LocalClient(), and then call local.cmd('minion', 'cmd.run', ['whoami']), I receive 
UnicodeDecodeError: 'utf-8' codec can't decode byte 0x82 in position 22: invalid start byte.

And I used salt minion cmd.run whoami on the shell, I receive the same result, I believe this situation is resulted by Python 3 version.
How can I use SaltStack by Python 3 both in server and python salt?
","","215","<python><python-3.x><salt><salt-stack>","3","","0","2018-03-09 14:50:29","","5","","4720935","","2018-03-09 14:50:29","2018-01-17 08:57:25",""
"1936943","Any value in salting an already ""strong"" password?","Is there any benefit in salting passwords for a strong, unique (not used for other applications by the user) password?
Salting (as I am aware) protects against rainbow tables generated with a dictionary or common passwords. It also protects against an attacker noticing a user with the same hash in another application.
Seeing as a strong password will (likely) not appear on a generated rainbow table, and a smart user will use unique passwords for each application he wants to protect, does salting protect an already ""smart"" user?

this is theoretical. i have no inclination to stop salting.

in essence, doesn't the salt just become part of the password? it just happens to be supplied by the gatekeeper rather than the user.
","Apart from rainbow tables there are also bruteforce tools to resolve a hash. This doesn't prevent unsalted hashes from being resolved. It only takes a longer as stronger the password is. Salting would certainly still make sense.
","215","<security><hash><salt>","1","1","4","2009-12-20 20:55:10","1936979","3","1","135056","","2009-12-20 20:55:10","2009-12-20 20:36:13",""
"1936943","Any value in salting an already ""strong"" password?","Is there any benefit in salting passwords for a strong, unique (not used for other applications by the user) password?
Salting (as I am aware) protects against rainbow tables generated with a dictionary or common passwords. It also protects against an attacker noticing a user with the same hash in another application.
Seeing as a strong password will (likely) not appear on a generated rainbow table, and a smart user will use unique passwords for each application he wants to protect, does salting protect an already ""smart"" user?

this is theoretical. i have no inclination to stop salting.

in essence, doesn't the salt just become part of the password? it just happens to be supplied by the gatekeeper rather than the user.
","If you can guarantee that all users will never reuse passwords, and that none of their passwords will ever be of a form that it is computationally feasible to precalculate colliding hashes for, then indeed the salt is little additional benefit.
However, the salt is also of little additional cost; while these premises are very hard indeed to guarantee, and the cost of being wrong about them is high. Keep the salt.
","215","<security><hash><salt>","1","8","4","2009-12-20 20:55:10","1936979","3","1","135056","","2009-12-20 20:55:10","2009-12-20 20:36:13",""
"1936943","Any value in salting an already ""strong"" password?","Is there any benefit in salting passwords for a strong, unique (not used for other applications by the user) password?
Salting (as I am aware) protects against rainbow tables generated with a dictionary or common passwords. It also protects against an attacker noticing a user with the same hash in another application.
Seeing as a strong password will (likely) not appear on a generated rainbow table, and a smart user will use unique passwords for each application he wants to protect, does salting protect an already ""smart"" user?

this is theoretical. i have no inclination to stop salting.

in essence, doesn't the salt just become part of the password? it just happens to be supplied by the gatekeeper rather than the user.
","This feels like you want to make an assumption, then base your security on that assumption. When you assumption becomes bad, for whatever reason, then your security becomes bad.
So how might your assumption (that strong passwords don't need salting) become invalid?
1) Over time, larger, more comprehensive rainbow tables are generated. This is something I would worry about if it is up to your user to choose a strong password. They might think they have done a good job, and you and your safety checking might think they have done a good job too, but later it turns out their thought process creating the password was easily duplicated by stringing a few words and numbers together.
2) If users cannot choose their password, your strong password generation process might, due to bug or whatever, turn out to be not as strong as you want.
3) Your user might be too lazy to come up with a site-unique/strong password! This is surely the most important problem. Do you really want to generate a system which is usable only by cryptographic experts? :)
","215","<security><hash><salt>","1","1","4","2009-12-20 20:55:10","1936979","3","1","135056","","2009-12-20 20:55:10","2009-12-20 20:36:13",""
"1936943","Any value in salting an already ""strong"" password?","Is there any benefit in salting passwords for a strong, unique (not used for other applications by the user) password?
Salting (as I am aware) protects against rainbow tables generated with a dictionary or common passwords. It also protects against an attacker noticing a user with the same hash in another application.
Seeing as a strong password will (likely) not appear on a generated rainbow table, and a smart user will use unique passwords for each application he wants to protect, does salting protect an already ""smart"" user?

this is theoretical. i have no inclination to stop salting.

in essence, doesn't the salt just become part of the password? it just happens to be supplied by the gatekeeper rather than the user.
","Rainbow tables are most definitely not restricted to dictionary passwords or the like. Most tend to include every character combination up to some max length - after all, it's a one time cost for generation. Do your users all use 12+ character passwords? Unlikely.
","215","<security><hash><salt>","1","1","4","2009-12-20 20:55:10","1936979","3","1","135056","","2009-12-20 20:55:10","2009-12-20 20:36:13",""
"22643764","PHP Hashing Login Issue","I'm a bit of a n00b in regards to hashing passwords, so go easy on me. Basically, I've put together some code that first of all sanitises the string's entered by the user on registration. Once that's done, a random salt is generated. The password is then appended to the salt:
  $salt = bin2hex(mcrypt_create_iv(32, MCRYPT_DEV_URANDOM));

    $saltedPW =  $p . $salt;

I then hash the password using a sha256 and go ahead and insert the user into the database, which all appears to be working correctly:
   $hashedPW = hash('sha256', $saltedPW);

    $q = ""INSERT INTO user (id, name, email, password, verified, user_level, salt) VALUES
    (NULL, '$n', '$em', '$hashedPW', 'no', '1', '$salt')"";

    $r = @mysqli_query ($dbc, $q); //run the query

Then, when it comes to the user logging in, I again sanitise the user-entered string, get the salt from the database assign it to a variable before appending the password to it as follows:
       $saltQuery = ""SELECT salt FROM user WHERE email = '$email'"";

        $result = mysqli_query($dbc, $saltQuery);

        $row = mysqli_fetch_assoc($result);

        $salt = $row['salt'];

        $saltedPW =  $password . $salt;

The salted password is then hashed using a sha256, as before, and I attempt to get the user information from the database:
    $hashedPW = hash('sha256', $saltedPW);

      $query = ""SELECT * FROM user WHERE email = '$email' AND password = '$hashedPW'"";

        $r = @mysqli_query ($dbc, $query);

However, the login fails, and when I print off the query I get the following result, when I presume the password should equal the user's entered string, which in this case is 'password' for testing purposes:
  SELECT * FROM user WHERE email = 'test@test.com' AND password = '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8'

Is there anything you can see there that I'm doing wrong that would cause the login to fail? Thanks
","SHA256 is a message digest, not a password hashing function, so you certainly should not be using it as such.
Cryptography is hard, and to do it well is even harder - it is for this reason that you should avoid rolling your own encryption functions and use ones that are tried and true, such as bcrypt or the newer scrypt.
PHP provides access to the bcrypt alogirthm through the password_hash function, which automatically generates a salt and encrypts the password using a much greater degree of security than SHA256. You would use it like so:
$hashedPassword = password_hash($password);

Then, when the user logs in, you would hash the password he inputted using the same function, and retrieve that user from the database.
","214","<php><mysql><hash><salt><sha256>","0","2","1","2014-03-25 19:08:37","","0","","","","","2014-03-25 18:52:52",""
"49779439","Updating a large database to hash out stored passwords in MS SQL Server 2008","Today I got up and running on an old version/ development version of my companys database, one of the things I discovered while looking through the 'Members' table of the DB is that the passwords are stored in plaintext as opposed to having been hashed and salted. So my question is how do I approach iterating across a large database to convert these plaintext passwords to hashed passwords.
The data is stored in a format of 
dbo.Tradesmen
with the passwords column simply being called Password
Thanks for any help
","Firstly, I would recommend Salting the passwords with a random GUID before they are hashed. This will ensure that no hashes are the same, even if two users happen to use the same password:
ALTER TABLE dbo.Tradesmen
ADD Salt uniqueidentifier;

Set the column so a new Salt is automatically created when a new record is inserted:
ALTER TABLE dbo.Tradesmen
ADD CONSTRAINT salt_def  
DEFAULT NewID() FOR Salt;

Populate all existing records with a Salt:
UPDATE dbo.Tradesmen
SET Salt = NewID()
WHERE Salt is null;

Create a field to store the hashed passwords:
ALTER TABLE dbo.Tradesmen
ADD PasswordHash BINARY(64);

Then run an update to create the hashed and salted passwords:
UPDATE dbo.Tradesmen
SET PasswordHash = HASHBYTES('SHA2_512', Password+Cast(Salt as NVARCHAR(36)))
WHERE PasswordHash is null and Password != '';

Once verified, wipe the Password field. To verify a user, I would recommend using a function like this (assuming that the user accounts are in a field called User). If a record is returned, the login combination is correct:
CREATE Function dbo.VerifyUser (
    @p_User varchar(50),
    @p_Password varchar(50)
)
RETURNS TABLE
AS
RETURN
(
    SELECT Top 1 User
    from dbo.Tradesmen
    where User = @p_User
        and
        PasswordHash = HASHBYTES('SHA2_512', @p_Password+CAST(Salt as NVARCHAR(36)))
)

","212","<sql-server><hash><iteration><salt>","0","1","1","2018-04-11 16:28:23","49780215","1","","","","","2018-04-11 15:49:40",""
"30860917","Passwd command linux","I have this situation:
I have read-only file system based linux. I have a problem that i want to change users passwords. I have moved shadow and passwd files to other partition so I thought i would do the trick. Yes now I can edit shadow file by hands. But passwd command isnt working ""passwd: An error occurred updating the password file."". What i need to move to other partition that command would start working?
Also Im thinking about generating password by my self and appending shadow file. BUT how can I generate MD5+salt? I dont have openssl or mkpasswd I just have md5sum.
Any ideas how to fix passwd command or how to generate password?
","The system expects the password and shadow file at /etc/passwd and /etc/shadow. If you move them to another location the system is broken and authentication won't work.
The passwd command updates the file at /etc/shadow, changing the password there. As you are on a read-only filesystem this process has to fail.
Generating passwords and hashes by yourself is error prone, you shouldn't do this on your own. For securitys sake you should stick to existing tools. If you do really want to manually generate passwd / shadow entries, you should take a look at the crypt manpage. This function is responsible for encrypting and hashing passwords and is also used by passwd.
As far as i know there is no way to use simply md5sum to create crypt-passwords. Furthermore I would never, never, never use md5 for hashing my passwords as this hash is broken since ages.
","211","<linux><command><md5><salt><passwd>","-1","0","1","2018-06-01 01:44:45","","0","","1033581","","2018-06-01 01:44:45","2015-06-16 07:05:53",""
"16676386","Symfony2 version 2.0.23, login with users from database always return: 'The presented password is invalid'","I'm trying to set up 2 firewall with 2 different providers and encoders in my security.yml that looks like this:
security:
    encoders:
        Devsign\UserBundle\Entity\AgentUser:
            algorithm: sha512
            iterations: 5000
            encode_as_base64: true
        Devsign\UserBundle\Entity\PressUser:
            algorithm: sha512
            iterations: 5000
            encode_as_base64: true

    providers:
        agent_secured_area:
            entity: {class: Devsign\UserBundle\Entity\AgentUser } # using a custom repository to login with username or email, details in AgentUserRepository.php

        press_secured_area:
            entity: {class: Devsign\UserBundle\Entity\PressUser, property: username }

    firewalls:
        agent_secured_area:
            pattern: /(it|en)/reserved/
            provider: agent_secured_area
            anonymous: ~
            form_login:
                check_path: /it/reserved/login-check
                login_path: /reserved/login
            logout:
                path:   /reserved/logout
                target: /
        press_secured_area:
            pattern: /(it|en)/press/
            provider: press_secured_area
            anonymous: ~
            form_login:
                check_path: /it/press/login-check
                login_path: /press/login
            logout:
                path:   /press/logout
                target: /

    access_control:
        agent_login:
            path: /reserved/login
            roles: IS_AUTHENTICATED_ANONYMOUSLY
        agent_register:
            path: /reserved/register
            roles: IS_AUTHENTICATED_ANONYMOUSLY
        agent_area:
            path: /(it|en)/reserved/.*
            roles: ROLE_AGENT
        press_login:
            path: /press/login
            roles: IS_AUTHENTICATED_ANONYMOUSLY
        press_register:
            path: /press/register
            roles: IS_AUTHENTICATED_ANONYMOUSLY
        press_area:
            path: /(it|en)/press/.*
            roles: ROLE_PRESS 

I get no exception but when I try to login against agent_secured_area i get always: 'The presented password is invalid'.
I created the first user password and salt using this code in a controller:
$factory = $this->get('security.encoder_factory');
    $user = new \Devsign\UserBundle\Entity\AgentUser();

    $encoder = $factory->getEncoder($user);
    $salt = $user->getSalt();
    $password = $encoder->encodePassword('grab', $salt);
    die(""pwd: $password - salt: $salt"");

And then i fill the database field password and salt with the echoed values.
Can someone spot the error?
UPDATE 1
I made some test setting in the config_dev.yml:
web_profiler:
    toolbar: true
    intercept_redirects: true
    verbose: true

1) I try to go to /it/reserved/info but it is access protected so I'm redirected correctly to /it/reserved/login
2) I try to login from /it/reserved/login posting the form to /it/reserved/login-check
3) Thanks to web_profile: intercepts_redirects: true I can see the debug toolbar in /it/reserved/login-check and I'm correctly authenticated with the correct Role: ROLE_AGENT. By the way looking in the doctrine section of the profiler I see two queries against my user table, the first one with parameter username NULL and a second one with the correct username.
4) Then I'm redirected to /it/reserved/info where for some reason I see a single query against my user table with parameter username NULL. Infact in /it/reserved/info I'm not authenticated anymore. So I'm redirected again to /it/reserved/login.
So I think the problem is that query with parameter username null, someone knows where it's coming from? Maybe from some misconfiguration on security.yml?
","","206","<security><symfony><salt><provider>","1","","0","2013-05-22 05:57:53","","0","","2373695","","2013-05-22 05:57:53","2013-05-21 17:51:50",""
"12127382","Password Hashes, Updating Salt and Hash on Login, and PHPass","I remember reading about a scheme where the process of checking a password went like this:

given (hash, salt) in a database,
hash password with salt to check against the hash,
hash password with old hash as salt,
store (new hash, salt a.k.a. old hash) in the database.

I can't find the original source.  In any case, I don't understand

what the advantage is of using the old hash as the salt (as opposed to using a random salt),
what the advantage of this scheme is in general (further complicating rainbow table attacks?), and
if there is an advantage, how one would apply the scheme using PHPass, since the salt seems to be managed ""within"" PHPass...

Intuitively, I think this scheme would do nothing at best, or worsen security at worst (due to a dependency on a past value), but password security is one area where I don't trust my intuition.  Please enlighten me.
EDIT:
I'm asking about re-hashing the password on each check.  These similar questions do answer the first question—that using a hash as a salt is useless—but not whether it's useful to re-hash on each check:

Using a hash of data as a salt
Using a hash of what you are hashing as a salt?

","I am no security expert, but to answer #1 there is no advantage. All it does is complicate things further.
Just use a good randomly generated salt,
Like you said, PHPPass handles it internally, and PHPass is considered an extremely good tool as it has been reviewed by many security experts.
","206","<php><hash><passwords><salt><phpass>","1","2","1","2012-08-26 04:49:32","12127495","4","","-1","","2017-05-23 12:27:36","2012-08-26 03:22:50",""
"37869372","Node.js crypto PBKDF2 function returns different values on v8 vs v10","This node code snippet returns different values based on the node platform version.  I have two identical instances (except for the node version) in EC2 running Ubuntu 14.04.
""use strict"";
var crypto = require(""crypto"");
crypto.pbkdf2(""password"", ""salt"", 1000, 32, function(err, derivedKey) {
if (err) {
console.error(err);
} else {
console.log(new Buffer(derivedKey).toString('base64'));
}
});    

On node v0.8.28 the console value is:
bsKIwr7Ci8KtfsKuwp3CnhDCqgYSJANPw61Iw5A/w4vCrcKWwotWAGfChFPCnVIU
On node v0.10.5 the value is:
boi+i61+rp2eEKoGEiQDT+1I0D/LrZaLVgBnhFOdUhQ=
This is a huge problem since we are upgrading the node version on the app and passwords cannot be decrypted properly.
Thanks!
","It's strange how you find answers after you ask for help.  
By passing the encoding type to the Buffer function like this:
console.log(new Buffer(derivedKey,'binary').toString('base64'));

...I can get the same hash.

It turns out the default type was changed from binary to utf8, so 'binary' needs to be specified now.
https://nodejs.org/api/crypto.html#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback (see bottom notes)
","205","<javascript><node.js><algorithm><hash><salt>","1","3","1","2016-06-16 21:34:26","","0","","","","","2016-06-16 21:08:54",""
"24608608","Generating salts with a constant in rails","So I'm relatively new to encryption, and stackoverflow, so please tell me if I'm going about this wrong.
Bcrypt by default uses randomly generated salts in the digest to stop rainbow table attacks. These salts are stored in the database in the password digest.
Wouldn't it be more secure to have a constant stored only in code that you would add to the randomly generated salts. This, in theory, would require attackers to have both your database and your code to test passwords. I'd assume it would be built into bcrypt if there wasn't some flaw in my thinking, so where's the error in my idea?
","so, ground rules: No encryption is unbreakable, it's only a matter of time. ""secure"" encryption just means it would take unfeasibly long to break it.
In comes rainbow tables with pre-broken passwords. Now it takes no time at all, and the encryption is useless.
Enter the salt.  With a salt, you can't do any work in advance, and with individual salts, you can't re-use work either.
http://throwingfire.com/storing-passwords-securely/ is a good read.
At this point, it's not impossible to read passwords from your database, but it's as hard as it is to guess them outright, and  improving your encryption from this point on does nothing for you unless you start making your users passwords harder to guess.
Plus, if they have direct access to your DB, which you only store credentials for on your deployment machine, they are very likely to have access to other things on that machine, and there is many much easier ways to get your users passwords than brute force tests against your db. (rewriting your code to just send them the passwords as they are entered for example)
","205","<ruby-on-rails><ruby><encryption><salt><bcrypt>","0","2","2","2014-07-07 11:23:56","24609436","1","","","","","2014-07-07 10:36:20",""
"24608608","Generating salts with a constant in rails","So I'm relatively new to encryption, and stackoverflow, so please tell me if I'm going about this wrong.
Bcrypt by default uses randomly generated salts in the digest to stop rainbow table attacks. These salts are stored in the database in the password digest.
Wouldn't it be more secure to have a constant stored only in code that you would add to the randomly generated salts. This, in theory, would require attackers to have both your database and your code to test passwords. I'd assume it would be built into bcrypt if there wasn't some flaw in my thinking, so where's the error in my idea?
","Salts are random and different for each password so storing one string in code is less secure because when you get both code and database it will be easier to crack passwords. When you get everything right so good salt and good one way function it should resist brute force attacks (provided passwords are ""strong""). What you suggest it is security through obscurity and it is discouraged and not recommended.
","205","<ruby-on-rails><ruby><encryption><salt><bcrypt>","0","0","2","2014-07-07 11:23:56","24609436","1","","","","","2014-07-07 10:36:20",""
"27150685","Does iOS have a unique device ID that I could use to salt a password hash?","I have a multi-user iOS application that needs to communicate with a mysql database. I'm using php to submit queries and return information in formatted in json. Will I need to hash the password in iOS as well as on the server side? Will sending it via https be enough security?
","Using HTTPS to send a password and hashing server side is enough. The only advantage of prehashing client side, is the reduced cpu power needed on server side.
The prehashed password actually becomes the new password, so if an attacker could eavesdrop the communication, he would see the prehashed password and could send it to the server as well.
","204","<ios><objective-c><hash><passwords><salt>","0","1","1","2014-11-26 16:16:30","","1","","","","","2014-11-26 13:38:57",""
"25402957","Can you help me to understand salt hashing function?","I am going through various password hashing techniques and I found a tutorial which left me a bit dubious about some points. In particular, I just would like if you could reconfirm/explain a few things.For example i found the following function. Now if I understand well what this is doing, it's generating a salt which in case with the following values:
$salt = sprintf(""$2a$%02d$"", $cost) . $salt; // if $cost = 10 and $salt 234, then it should output $2a$1002d$234? 

Secondly, the example for authentication uses the following comparison:
if ( crypt($password, $user->hash) === $user->hash )

and it states that ""Hashing the password with its hash as the salt returns the same hash"" - now I checked the php documentation and naturally it states the same but I am just trying to understand the concept theoretically (I do not like to reuse stuff even if I know how to use if I don't understand the logic behind it). 
My question is why crypt($password, $hash) is returning the same $hash value. I just want to understand the logics behind it. Thank you. 
","Take the code you read. and throw it away, burn it, kill it. Just don't use it.
PHP has some really strong build in password functions: password_hash and password_verify
These will create the salt for you so you don't have to keep track of them.
The better and correct answer can be found here: Secure hash and salt for PHP passwords
","204","<php><hash><passwords><salt>","2","0","2","2014-08-20 11:44:35","25403833","0","1","","","","2014-08-20 10:58:15",""
"25402957","Can you help me to understand salt hashing function?","I am going through various password hashing techniques and I found a tutorial which left me a bit dubious about some points. In particular, I just would like if you could reconfirm/explain a few things.For example i found the following function. Now if I understand well what this is doing, it's generating a salt which in case with the following values:
$salt = sprintf(""$2a$%02d$"", $cost) . $salt; // if $cost = 10 and $salt 234, then it should output $2a$1002d$234? 

Secondly, the example for authentication uses the following comparison:
if ( crypt($password, $user->hash) === $user->hash )

and it states that ""Hashing the password with its hash as the salt returns the same hash"" - now I checked the php documentation and naturally it states the same but I am just trying to understand the concept theoretically (I do not like to reuse stuff even if I know how to use if I don't understand the logic behind it). 
My question is why crypt($password, $hash) is returning the same $hash value. I just want to understand the logics behind it. Thank you. 
","PHP's crypt function will pack all attributes into a 60 character string (for BCrypt).
$2y$10$nOUIs5kJ7naTuTFkBy1veuK0kSxUFXfuaOKdOKf9xYT0KKIGSJwFa
 |  |  |                     |
 |  |  |                     hash-value = K0kSxUFXfuaOKdOKf9xYT0KKIGSJwFa
 |  |  |
 |  |  salt = nOUIs5kJ7naTuTFkBy1veu (22 characters)
 |  |
 |  cost-factor = 10 = 2^10 iterations
 |
 hash-algorithm = 2y = BCrypt

Now when you pass the stored hash to the function as the second parameter for verification, the cost factor and the salt will be extracted from this string, and will be reused to calculate the new hash. This hash will be comparable, because the same parameters where used.
The PHP functions password_hash() and password_verify() are just wrappers around the crypt function, and will handle the crucial parts like generating a safe salt.
","204","<php><hash><passwords><salt>","2","3","2","2014-08-20 11:44:35","25403833","0","1","","","","2014-08-20 10:58:15",""
"36355345","Is it save to store passwords encrypted with sha256_crypt but without additional salt","Is it save to create a hash of user passwords with sha256_crypt.encrypt(""secretUserPassword"") and store it to a database without adding a slat to the hash?
If so, what protects the hashes against rainbow table attacks?  
This is how I create a new user in my web application and store it to the database: 
admin = User()
admin.name = 'admin'
admin.password = sha256_crypt.encrypt(""secretAdminPassword"")
db.persist_user(admin)

This is how I check the credentials and login the user
username = request.form['username']
password = request.form['password']   
user = user_from_db(username)
if sha256_crypt.verify(password, user.password):
   login_user(user)

","The documentation states that the function sha256_crypt.encrypt(""password"") not only calculates a SHA-256 hash, it also...

adds a salt automatically
does many rounds of hashing

Both points are essential to get a safe password hashing function. Using it without a self made salt is preferred, because there are several pitfalls in creating a cryptographically safe salt, so best leave it to the library.
","203","<python><security><salt><sha256><passlib>","1","1","1","2016-04-02 14:23:44","36374470","6","","","","","2016-04-01 11:36:04",""
"14080874","is Hash(password + salt) Fine","
Possible Duplicate:
Secure hash and salt for PHP passwords 

Assuming salt is s random, high entropy, long string, and hash is sha512 or bcrypt, 
why is hash(password + perUserSalt) considered not enough? 
This question originated after reading the PHP's new password hashing API RFC in which the author states that 

Hash(password + salt) = it's not fine

","Many years ago it was usual to hash passwords like this for saving in a database, for example:
$hashedPassword = MD5($password . $salt);

Hardware became faster, and the known fast hash functions like MD5, SHA-1, but also SHA-512 could be brute-forced much too fast. Nowadays [2012] it is possible to calculate about 8 Giga MD5 values with common hardware, to brute-force a whole english dictionary with 500'000 words, you need only a fraction of a millisecond!
That's why key-derivation functions like BCrypt and PBKDF2 where invented. They have a cost parameter and repeat the hashing many times (the cost factor determines the number of iterations). Each iteration will use the original salt to calculate a new hash-value, that's why you have to pass the salt separately to the function and cannot concatenate it before:
$hashedPassword = Bcrypt($password, $salt);

The linked article either wants to explain that a single hash calculation is not sufficient nowadays, or it want's to show that the salt cannot be concatenated with the password before passing it to the hash function.
","203","<php><hash><passwords><salt><bcrypt>","2","0","1","2012-12-30 11:41:19","","5","","-1","","2017-05-23 11:56:41","2012-12-29 10:42:31","2012-12-29 16:22:47"
"53593748","Salt custom grains and Python version","I have grains in /srv/salt/_grains which are written using Python2.7 for Ubuntu 14.04 environment. We started using Ubuntu 18.04 and want to use the same Salt-Master for both environments. The problem is that the newer environment can only understand Python3.
Is there a way to specify different grains for different environment? 
Versions:
salt-minion 2016.3.8 (Boron)  -- Ubuntu 14.04
salt-minion 2017.7.4 (Nitrogen)  -- Ubuntu 18.04

Thank you!
","You can design it 
by env https://fabianlee.org/2016/10/05/saltstack-creating-a-custom-grain-using-python/
envtypegrain.py
#!/usr/bin/python

import socket
import logging
log = logging.getLogger(__name__)

def environment():

    hostname = socket.gethostname().upper()
    log.debug(""envtypegrain hostname: "" + hostname)

    if ""-DEV"" in hostname:
        return {'envtype':'dev'}
    elif ""-TEST"" in hostname:
        return {'envtype':'test'}
    elif ""-PROD"" in hostname:
        return {'envtype':'prod'}
    else:
        return {'envtype':'n/a'}



if __name__ == ""__main__"":
    print environment()

Or by groups https://docs.saltstack.com/en/latest/topics/targeting/
Or define os https://docs.saltstack.com/en/latest/topics/tutorials/states_pt3.html#using-grains-in-sls-modules
","203","<python><python-3.x><python-2.7><salt-stack><salt>","0","0","1","2018-12-03 13:08:40","53594520","0","","","","","2018-12-03 12:19:38",""
"53705457","Insert Environment Variable using Jinja in SaltStack","I am trying to read a JSON file inside a folder. using import_json.
Here is my code
{% set instance_id = grains['INSTANCE_ID'] %}
INSTANCE_ID Env Var:
  environ.setenv:
    - name: INSTANCE_ID
    - value: {{ grains['INSTANCE_ID'] }}
    - update_minion: True

{% import_json ""/tmp/$INSTANCE_ID/conf.json"" as config_properties %}

But I am getting this error
Data failed to compile:
Rendering SLS 'base:cloud.steps.conf' failed: Jinja error: /tmp/$INSTANCE_ID/conf.json.

Although when I insert the INSTANCE_ID manually it works as expected.
What I want is to be able to insert either $INSTANCE_ID or directly the grain value {{ grains['INSTANCE_ID'] }}
Can someone please help me with this?
Thanks. 
","{% import_json ""/tmp/$INSTANCE_ID/conf.json"" as config_properties %}

I imagine you are trying to evaluate the variable $INSTANCE_ID in the above statement. Jinja template evaluates the variables in expression statements.
In this case, the variable is set in the first line, using set
{% set instance_id = grains['INSTANCE_ID'] %}

So, you can use it in expression along with string appends, like
{% import_json ""/tmp/"" + instance_id + ""/conf.json"" as config_properties %}

The above statement should resolve your error.
Also, I would suggest using a variable to evaluate the value of the string expression above, like
{% set conf_json_path = ""/tmp/"" + instance_id + ""/conf.json"" %}

and use it like this
{% import_json conf_json_path as config_properties %}

Hope this help!

In case, you wish to use grains dictionary directly, you can use the value like so
{% set conf_json_path = ""/tmp/"" + grains['INSTANCE_ID'] + ""/conf.json"" %}

","200","<jinja2><salt-stack><salt>","1","2","1","2018-12-10 13:41:19","53706836","0","","4269078","","2018-12-10 13:41:19","2018-12-10 12:15:22",""
"34559338","sprint security with password encoding and salting","i am trying to to authenticate user with spring-security with sha encoding and salting i have added extra field in users table for extra salt and customize userdetail with this salt but whenever i try to login it is throwing bad credential exception my customize CustomJdbcDaoImpl class is 
public class CustomJdbcDaoImpl extends JdbcDaoImpl implements IChangePassword {

    private Logger logger = LoggerFactory.getLogger(CustomJdbcDaoImpl.class);


    @Override
    protected UserDetails createUserDetails(String username,UserDetails userFromUserQuery,
            List<GrantedAuthority> combinedAuthorities){
        String returnUsername = userFromUserQuery.getUsername();
        if(!isUsernameBasedPrimaryKey()){
            returnUsername = username;
        }
        logger.info(""inside @class CustomJdbcDaoImpl @method createUserDetails USER DETAILS ARE: ""+userFromUserQuery.getPassword()+""authritieds: ""+combinedAuthorities);
        return new SaltedUser(returnUsername, 
                userFromUserQuery.getPassword(),
                userFromUserQuery.isEnabled(), 
                true,
                true, 
                true, 
                combinedAuthorities,
                ((SaltedUser)userFromUserQuery).getSalt());


    }

    @Override
    protected List<UserDetails> loadUsersByUsername(String username) {
        return getJdbcTemplate()
                .query(getUsersByUsernameQuery(), 
                        new String[] {username}, 
                        new RowMapper<UserDetails>() {
                    public SaltedUser mapRow(ResultSet rs, int rowNum) throws SQLException {
                        String username = rs.getString(1);
                        String password = rs.getString(2);
                        boolean enabled = rs.getBoolean(3);
                        String salt = rs.getString(4);
                        SaltedUser saltedUser = new SaltedUser(username, password, enabled,
                                true, 
                                true,
                                true,
                                AuthorityUtils.NO_AUTHORITIES, 
                                salt);
                        logger.info(""inside @class @method loadUsersByUsername salted password  is: ""+saltedUser.getPassword());
                        return saltedUser;
                    }


                });
    }

    @Override
    public void changePassword(String username, String password) {
        getJdbcTemplate().
        update(""update users set password = ? where username = ?"",password,username);

    }

}

for changing password each time with salt my DatabasePasswordSecurerBean class is 
public class DatabasePasswordSecurerBean extends JdbcDaoSupport {

        @Autowired
        private  PasswordEncoder passwordEncoder;

        @Autowired
        private SaltSource saltSource;

        @Autowired
        private UserDetailsService userDetailsService;

        private Logger logger = LoggerFactory.getLogger(DatabasePasswordSecurerBean.class);

        public void secureDatabase(){
            logger.info(""inside @class DatabasePasswordSecurerBean  @method secureDatabase entry..."");
            getJdbcTemplate().query(""select username,password from users"",new RowCallbackHandler(){

                @Override
                public void processRow(ResultSet rs) throws SQLException {
                   String username = rs.getString(1);
                   String password = rs.getString(2);

                   UserDetails user = userDetailsService.loadUserByUsername(username);
                   String encodedPassword = passwordEncoder.encodePassword(password,saltSource.getSalt(user));
                   getJdbcTemplate().update(""update users set password = ? where username = ?"",
                          encodedPassword,username);

                 logger.info(""@class DatabasePasswordSecurerBean  @method secureDatabase updating password for user: ""+username + ""to: ""+encodedPassword);
                }


            });

        }

    }

 security.xml configurations are 




     <http auto-config=""true"">
          <intercept-url pattern=""/*"" access=""ROLE_USER"" />
        </http>

        <authentication-manager alias=""authenticationManager"">
                <authentication-provider user-service-ref=""jdbcUserService"">
                  <password-encoder ref=""passwordEncoder"" >
                    <salt-source ref=""saltSource"" />
                  </password-encoder>



                </authentication-provider>
        </authentication-manager>


        </beans:beans>

and my application.xml is
<!-- Simple implementation of the standard JDBC DataSource interface,
                configuring the plain old JDBC DriverManager via bean properties -->
           <bean id=""dataSource"" class=""org.springframework.jdbc.datasource.DriverManagerDataSource"">
              <property name=""driverClassName"" value=""${db.driverClassName}"" />
              <property name=""url"" value=""${db.connection.url}"" />
              <property name=""username"" value=""${db.connection.username}"" />
              <property name=""password"" value=""${db.connection.password}"" />
           </bean>

           <bean id=""jdbcUserService"" class=""com.petCart.springsecurity.security.CustomJdbcDaoImpl"">
              <property name=""dataSource"" ref=""dataSource"" />
              <property name=""enableGroups"" value=""true""></property>
              <property name=""enableAuthorities"" value=""false""></property>
              <property name=""usersByUsernameQuery"">
                    <value>
                       select username,password,enabled,salt from users where username = ?
                    </value>
              </property>
              <property name=""groupAuthoritiesByUsernameQuery"">
                    <value>
                       select r.roleid,r.role_name,p.permissionname from roles r
                       join userrole ur on ur.roleid = r.roleid
                       join users u on u.id = ur.userid 
                       join rolepermission rp on r.roleid = rp.roleid 
                       join permissions p on p.permissionid = rp.permissionid
                       where u.username = ?
                    </value>
              </property>
          </bean>

          <!-- password encoder -->
           <bean class=""org.springframework.security.authentication.encoding.ShaPasswordEncoder"" id=""passwordEncoder""/>
           <bean class=""com.petCart.springsecurity.security.DatabasePasswordSecurerBean""  init-method=""secureDatabase"" depends-on=""dataSource"">
                <property name=""dataSource"" ref=""dataSource"" />
           </bean>
           <bean class=""org.springframework.security.authentication.dao.ReflectionSaltSource"" id=""saltSource"">
               <property name=""userPropertyToUse"" value=""username"" />
           </bean>

","Try to change from
<bean class=""org.springframework.security.authentication.dao.ReflectionSaltSource"" id=""saltSource"">
   <property name=""userPropertyToUse"" value=""username"" />
</bean>

to
<bean class=""org.springframework.security.authentication.dao.ReflectionSaltSource"" id=""saltSource"">
   <property name=""userPropertyToUse"" value=""salt"" />
</bean>

","199","<spring><spring-security><salt>","1","0","1","2016-01-04 20:42:50","","2","","","","","2016-01-01 19:34:01",""
"29100726","Can sha512 protect you from an incredibly easy password?","I wish to ask a question about just how effective salting is if a web user chooses an incredibly easy-to-guess password. I have read (and re-read) the following webpages, but I feel my understanding is still not 100% clear.
Salt and passwords
How does password salt help against a rainbow table attack?
From the second of the URLs above, the following can be found (courtesy of user ""Ross""):
To understand the first one, imagine a single password file that contains hundreds of usernames and passwords. Without a salt, I could compute ""md5(attempt[0])"", and then scan through the file to see if that hash shows up anywhere. If salts are present, then I have to compute ""md5(salt[a] . attempt[0])"", compare against entry A, then ""md5(salt[b] . attempt[0])"", compare against entry B, etc. Now I have n times as much work to do, where n is the number of usernames and passwords contained in the file.
Now, I understand that the introduction of a unique salt to each record in the table makes it n-times more difficult for the hacker to hack the passwords. But what if the web user is naive enough to have ""password"" or ""dog"" or ""cat"" as his password? If I understand the StackOverflow answers correctly, each unique salt for each record in a database table is not kept secret. A hacker who manages to breach the database can easily individual salts. The salts are MEANT to slow down a hacker because a hacker would need n rainbow tables instead of one rainbow table. BUT, if a web user has the password cat, and this web user happens to be the first or second or third record in a 10000-record long table, then
               $hash = sha512($salt.cat)

will not protect the naive web user from being hacked, will it? Because the hacker KNOWS the salt, and he might append or prepend the salt to an easy password, and he will know the hash. And he will then use a rainbow table and the web user's data is compromised. Am I right in understanding that the POSITION of a web user's record in a table, and the simplicity of a web user's chosen password, can undermine even the most ingenious hash because the hacker has access to the salt?
","You are right, it will not protect against awful passwords.
On a PC with eight AMD R9 290X graphics cards and hashcat, you can crack
797 Million SHA512 hashes per second.
That makes it very easy to check the password against a long dictionary of weak passwords.
If you use PBKDF2 with SHA512 and 20,000 iterations you can still manage 39000 Hashes per second, so weak passwords that appear on every password dictionary are still at risk.
It's best to force the users not to use passwords that are in the standard dictionaries. Brute forcing a single 7-letter alphanumeric, non-dictionary password would take 17 years on that machine.
Good luck with getting your users to use safe passwords. Dilbert reference:

","198","<hash><salt><sha512>","2","2","2","2015-03-17 14:17:24","29100823","3","","-1","","2017-05-23 10:29:31","2015-03-17 13:46:39",""
"29100726","Can sha512 protect you from an incredibly easy password?","I wish to ask a question about just how effective salting is if a web user chooses an incredibly easy-to-guess password. I have read (and re-read) the following webpages, but I feel my understanding is still not 100% clear.
Salt and passwords
How does password salt help against a rainbow table attack?
From the second of the URLs above, the following can be found (courtesy of user ""Ross""):
To understand the first one, imagine a single password file that contains hundreds of usernames and passwords. Without a salt, I could compute ""md5(attempt[0])"", and then scan through the file to see if that hash shows up anywhere. If salts are present, then I have to compute ""md5(salt[a] . attempt[0])"", compare against entry A, then ""md5(salt[b] . attempt[0])"", compare against entry B, etc. Now I have n times as much work to do, where n is the number of usernames and passwords contained in the file.
Now, I understand that the introduction of a unique salt to each record in the table makes it n-times more difficult for the hacker to hack the passwords. But what if the web user is naive enough to have ""password"" or ""dog"" or ""cat"" as his password? If I understand the StackOverflow answers correctly, each unique salt for each record in a database table is not kept secret. A hacker who manages to breach the database can easily individual salts. The salts are MEANT to slow down a hacker because a hacker would need n rainbow tables instead of one rainbow table. BUT, if a web user has the password cat, and this web user happens to be the first or second or third record in a 10000-record long table, then
               $hash = sha512($salt.cat)

will not protect the naive web user from being hacked, will it? Because the hacker KNOWS the salt, and he might append or prepend the salt to an easy password, and he will know the hash. And he will then use a rainbow table and the web user's data is compromised. Am I right in understanding that the POSITION of a web user's record in a table, and the simplicity of a web user's chosen password, can undermine even the most ingenious hash because the hacker has access to the salt?
","Given a hashed password database, passwords can be cracked out by (1) take a dictionary of all possible passwords (2) generate hash for each of possible passwords (3) tally each hash in given database against all the hashes you just generated.
So, cost-of-cracking-one-password = cost-of-generating-all-hashes + cost-of-matching-all-hashes
=>    cost-of-cracking-1000-passwords = 1000 x cost-of-cracking-one-password or it seems so. But,
If there is NO salt, then cost-of-generating-all-hashes is constant and needs to be done only once. Then we can say that cost-of-cracking-the-whole-database is about-same as cost-of-cracking-one-password. Form this we see that in absence of salts, if a hacker gets hold of a password database, then the hacker will surely go to crack the whole database, not to target any single entry. In this way he will surely get at least a few hashes correct.
Salt is introduced to prevent this behavior. Now for a database with 1000 salted hashes, cost-of-cracking-1000-passwords = 1000 x cost-of-cracking-one-password. Note that even then cost-of-cracking-one-password is still same as previous cost-of-generating-all-hashes + cost-of-matching-all-hashes.
TLDR;
Salting does not protect individual passwords. Rather it is a deterrent against a hacker taking an initiative to crack the whole database.
","198","<hash><salt><sha512>","2","1","2","2015-03-17 14:17:24","29100823","3","","-1","","2017-05-23 10:29:31","2015-03-17 13:46:39",""
"18034365","Can login even if only the password is partially correct?","I acciedentley stumbled upon a problem with my login form. I seem to be able to login in when the password is partially correct.
If i create the following user:
Username: hehehehehe
Password: hehehehehe
I can login with passwords like ""hehehehe"", ""hehehehehe11111"" etc. If i write it completely wrong, it doesn't work.
Login.php
if (empty($_POST) === false) {

$username = trim($_POST['username']);
$password = trim($_POST['password']);

if (empty($username) === true || empty($password) === true) {
    $errors[] = 'Sorry, but we need your username and password.';
} else if ($users->user_exists($username) === false) {
    $errors[] = 'Sorry that username doesn\'t exists.';
// } else if ($users->email_confirmed($username) === false) {
    // $errors[] = 'Sorry, but you need to activate your account. 
                 // Please check your email.';

} else {
    if (strlen($password) > 18) {
        $errors[] = 'The password should be less than 18 characters, without spacing.';
    }
    $login = $users->login($username, $password);
    if ($login === false) {
        $errors[] = 'Sorry, that username/password is invalid';
    }else {
        $_SESSION['id'] =  $login;
        header('Location: home.php');
        exit();
    }
}

} 
User.class.php
public function login($username, $password) {

    global $bcrypt;

    $query = $this->db->prepare(""SELECT `password`, `user_id` FROM `users` WHERE `username` = ?"");
    $query->bindValue(1, $username);

    try{

        $query->execute();
        $data               = $query->fetch();
        $stored_password    = $data['password']; 
        $id                 = $data['user_id']; 

        if($bcrypt->verify($password, $stored_password) === true){ 
            return $id;
        }else{
            return false;   
        }

    }catch(PDOException $e){
        die($e->getMessage());
    }

}

Bcrypt.class.php
class Bcrypt {
private $rounds;
public function __construct($rounds = 12) {
    if(CRYPT_BLOWFISH != 1) {
        throw new Exception(""Bcrypt is not supported on this server, please see the following to learn more: http://php.net/crypt"");
    }
    $this->rounds = $rounds;
}

private function genSalt() {

    $string = str_shuffle(mt_rand());
    $salt   = uniqid($string ,true);

    return $salt;
}


public function genHash($password) {

    $hash = crypt($password, '$2y$' . $this->rounds . '$' . $this->genSalt());
    return $hash;
}


public function verify($password, $existingHash) {

    $hash = crypt($password, $existingHash);


    if($hash === $existingHash) {
        return true;
    } else {
        return false;
    }
}

}
Any ideas?
If you guys thinks it could do with the registration process, please let me know and i'll upload the register code aswell. What i can't figure out is that why it works even if just parts of the password is correct, I've never experienced that before. 
","It seems crypt is using DES for hashing rather than blowfish:
http://php.net/manual/en/function.crypt.php

The standard DES-based crypt() returns the salt as the first two characters of the output. It also only uses the first eight characters of str, so longer strings that start with the same eight characters will generate the same result (when the same salt is used).

Try to login with just the first 8 characters using your code. 
Also have a look at the saved hashes stored in your database to see if they're using blowfish or DES. If using blowfish they should have the $2y$ signature you used.
","198","<php><login><hash><salt><bcrypt>","0","1","1","2013-08-03 15:57:12","","0","","","","","2013-08-03 15:27:55",""
"53953631","Translate Windows RC4 CryptDeriveKey to PHP for openssl","This is the second component of the legacy system translation we’ve been trying to do.  We have managed to match exactly the initial binary password/key that Windows ::CryptHashData generates.
That password/key is passed to ::CryptDeriveKey where it performs a number of steps to create the final key to be used by ::CryptEncrypt.  My research has led me to the CryptDeriveKey documentation where it clearly describes the steps required to derive the key for ::CryptEncrypt but so far I haven’t been able to get it to decrypt the file on the PHP side. 
https://docs.microsoft.com/en-us/windows/desktop/api/wincrypt/nf-wincrypt-cryptderivekey
Based on the ::CryptDeriveKey documentation there may be some additional undocumented steps for our specific legacy key size that may not be well understood.  The current Windows ::CryptDeriveKey is set for ZERO SALT by default which is apparently different from NO_SALT somehow.  See salt value functionality here:
https://docs.microsoft.com/en-us/windows/desktop/SecCrypto/salt-value-functionality
The parameters on the CryptAPI for our legacy system are as follows:
Provider type:      PROV_RSA_FULL
Provider name:  MS_DEF_PROV
Algo ID     CALG_RC4        
Description     RC4 stream encryption algorithm
Key length:         40 bits.
Salt length:        88 bits.   ZERO_SALT
Special Note:       A 40-bit symmetric key with zero-value salt, however, is not equivalent to a 40-bit symmetric key without salt. For interoperability, keys must be created without salt. This problem results from a default condition that occurs only with keys of exactly 40 bits.
I’m not looking to export the key, but reproduce the process that creates the final encryption key that is passed to ::CryptEncrypt for the RC4 encryption algorithm and have it work with openssl_decrypt.
Here is the current windows code that’s working fine for encrypt.
try {
    BOOL bSuccess;
    bSuccess = ::CryptAcquireContextA(&hCryptProv, 
                                      CE_CRYPTCONTEXT, 
                                      MS_DEF_PROV_A, 
                                      PROV_RSA_FULL, 
                                      CRYPT_MACHINE_KEYSET);

    ::CryptCreateHash(hCryptProv, 
                      CALG_MD5, 
                      0, 
                      0, 
                      &hSaveHash);

    ::CryptHashData(hSaveHash, 
                    baKeyRandom, 
                    (DWORD)sizeof(baKeyRandom), 
                    0);

    ::CryptHashData(hSaveHash, 
                    (LPBYTE)T2CW(pszSecret), 
                    (DWORD)_tcslen(pszSecret) * sizeof(WCHAR), 
                     0);

    ::CryptDeriveKey(hCryptProv, 
                     CALG_RC4, 
                     hSaveHash, 
                     0, 
                     &hCryptKey);

    // Now Encrypt the value
    BYTE * pData = NULL;
    DWORD dwSize = (DWORD)_tcslen(pszToEncrypt) * sizeof(WCHAR); 
    // will be a wide str
    DWORD dwReqdSize = dwSize;

    ::CryptEncrypt(hCryptKey, 
                   NULL, 
                   TRUE, 
                   0, 
                   (LPBYTE)NULL, 
                   &dwReqdSize, 0);

    dwReqdSize = max(dwReqdSize, dwSize);

    pData = new BYTE[dwReqdSize];

    memcpy(pData, T2CW(pszToEncrypt), dwSize);

    if (!::CryptEncrypt(hCryptKey, 
                        NULL, 
                        TRUE, 
                        0, 
                        pData, 
                        &dwSize, 
                        dwReqdSize)) {

            printf(""%l\n"", hCryptKey);
            printf(""error during CryptEncrypt\n"");
            }

    if (*pbstrEncrypted)
    ::SysFreeString(*pbstrEncrypted);
    *pbstrEncrypted = ::SysAllocStringByteLen((LPCSTR)pData, dwSize);
    delete[] pData;
    hr = S_OK;
}

Here is the PHP code that tries to replicate the ::CryptDeriveKey function as described in the documentation.
Let n be the required derived key length, in bytes. The derived key is the first n bytes of the hash value after the hash computation has been completed by CryptDeriveKey. If the hash is not a member of the SHA-2 family and the required key is for either 3DES or AES, the key is derived as follows:

Form a 64-byte buffer by repeating the constant 0x36 64 times. Let k be the length of the hash value that is represented by the input parameter hBaseData. Set the first k bytes of the buffer to the result of an XOR operation of the first k bytes of the buffer with the hash value that is represented by the input parameter hBaseData.
Form a 64-byte buffer by repeating the constant 0x5C 64 times. Set the first k bytes of the buffer to the result of an XORoperation of the first k bytes of the buffer with the hash value that is represented by the input parameter hBaseData.
Hash the result of step 1 by using the same hash algorithm as that used to compute the hash value that is represented by the hBaseData parameter.
Hash the result of step 2 by using the same hash algorithm as that used to compute the hash value that is represented by the hBaseData parameter.
Concatenate the result of step 3 with the result of step 4.
Use the first n bytes of the result of step 5 as the derived key.

PHP Version of ::CryptDeriveKey.
function cryptoDeriveKey($key){

    //Put the hash key into an array
    $hashKey1 = str_split($key,2);
    $count = count($hashKey1);
    $hashKeyInt = array();

    for ($i=0; $i<$count; $i++){
        $hashKeyInt[$i] = hexdec($hashKey1[$i]);
    }
    $hashKey = $hashKeyInt;

    //Let n be the required derived key length, in bytes.  CALG_RC4 = 40 bits key or 88 salt bytes
    $n = 40/8;

    //Let k be the length of the hash value that is represented by the input parameter hBaseData
    $k = 16;

    //Step 1 Form a 64-byte buffer by repeating the constant 0x36 64 times   
    $arraya = array_fill(0, 64, 0x36);

    //Set the first k bytes of the buffer to the result of an XOR operation of the first k bytes of the buffer with the hash value 
    for ($i=0; $i<$k; $i++){
        $arraya[$i] = $arraya[$i] ^ $hashKey[$i];
    }

    //Hash the result of step 1 by using the same hash algorithm as hBaseData
    $arrayPacka = pack('c*', ...$arraya);
    $hashArraya = md5($arrayPacka);

    //Put the hash string back into the array
    $hashKeyArraya = str_split($hashArraya,2);
    $count = count($hashKeyArraya);
    $hashKeyInta = array();
    for ($i=0; $i<$count; $i++){
        $hashKeyInta[$i] = hexdec($hashKeyArraya[$i]);
    }

    //Step 2 Form a 64-byte buffer by repeating the constant 0x5C 64 times. 
    $arrayb = array_fill(0, 64, 0x5C);

    //Set the first k bytes of the buffer to the result of an XOR operation of the first k bytes of the buffer with the hash value
    for ($i=0; $i<$k; $i++){
        $arrayb[$i] =  $arrayb[$i] ^ $hashKey[$i];
    }

    //Hash the result of step 2 by using the same hash algorithm as hBaseData    
    $arrayPackb = pack('c*', ...$arrayb);
    $hashArrayb = md5($arrayPackb);

    //Put the hash string back into the array
    $hashKeyArrayb = str_split($hashArrayb,2);
    $count = count($hashKeyArrayb);
    $hashKeyIntb = array();
    for ($i=0; $i<$count; $i++){
        $hashKeyIntb[$i] = hexdec($hashKeyArrayb[$i]);
    }

    //Concatenate the result of step 3 with the result of step 4.
    $combined = array_merge($hashKeyInta, $hashKeyIntb);

    //Use the first n bytes of the result of step 5 as the derived key.
    $finalKey = array();
    for ($i=0; $i <$n; $i++){
        $finalKey[$i] =  $combined[$i];
    }
    $key = $finalKey;

    return $key;
}

PHP Decrypt Function
function decryptRC4($encrypted, $key){
    $opts = OPENSSL_RAW_DATA | OPENSSL_ZERO_PADDING;
    $cypher = ‘rc4-40’;
    $decrypted = openssl_decrypt($encrypted, $cypher, $key, $opts);
    return $decrypted; 
}

So here are the big questions:
Has anyone been able to successfully replicate ::CryptDeriveKey with RC4 on another system?  
Does anyone know what is missing from the PHP script we created that prevents it from creating the same key and decrypt the Windows CryptoAPI encrypted file with openssl_decrypt?  
Where and how do we create the 88 bit zero-salt that is required for the 40bit key?
What are the correct openssl_decrypt parameters that would accept this key and decrypt what was generated by ::CryptDeriveKey? 
Yes, we know this isn’t secure and its not being used for passwords or PII.   We would like to move away from this old and insecure method, but we need take this interim step of translating the original encryption to PHP first for interoperability with the existing deployed systems.  Any help or guidance would be appreciated.
","Just in case anyone else wanders down this path here are the answers to all the questions above.
You can replicate ::CryptDeriveKey on PHP using openssl but there are some prerequisites that have to be met on the windows side first.  
CryptDeriveKey MUST be set to CRYPT_NO_SALT as follows:
::CrypeDeriveKey(hCryptProv, CALG_RC4, hSaveHash, CRYPT_NO_SALT, &hCryptKey)

This will allow you to create a key from your hash and generate a matching key in PHP that will work on openssl.  If you don't set any salt parameters you will get a key that is created with an unknown proprietary salt algorithm that cant be matched on another system. 
The reason that you have to set CRYPT_NO_SALT is because both the CryptAPI and openssl have proprietary salt algorithms and there is no way to get them to match.  So you should do your salting separately.  There are more details about this salt value functionality here: https://docs.microsoft.com/en-us/windows/desktop/SecCrypto/salt-value-functionality
Here is what the PHP script needs to look like to create an equivalent passkey for for openssl to use.
<?php
$random = pack('c*', 87,194,...........);
$origSecret = 'ASCII STRING OF CHARACTERS AS PASSWORD'; 

//Need conversion to match format of Windows CString or wchar_t*
//Windows will probably be UTF-16LE and LAMP will be UTF-8
$secret = iconv('UTF-8','UTF-16LE', $origSecret);

//Create hash key from Random and Secret
//This is basically a hash and salt process.
$hash = hash_init(""md5"");
hash_update($hash, $random);
hash_update($hash, $secret);
$key = hash_final($hash);

$key = cryptoDeriveKey($key);
//Convert the key hex array to a hex string for openssl_decrypt
$count = count($key);
$maxchars = 2;
for ($i=0; $i<$count; $i++){
    $key .= str_pad(dechex($key[$i]), $maxchars, ""0"", STR_PAD_LEFT);
}

IMPORTANT:  OpenSSL expects the key to be the raw hex values that are derived from the hash, unfortunately openssl_decrypt() wants the same value as a string or password.  Therefor you have to do a hex to string conversion at this point.  There is a great write up here on why you have to do this.
http://php.net/manual/en/function.openssl-encrypt.php
$opts = OPENSSL_RAW_DATA | OPENSSL_ZERO_PADDING;
//Convert key hex string to a string for openssl_decrypt
//Leave it as it is for openssl command line.
$key = hexToStr($key);
$cipher = 'rc4-40';
$encrypted = “the data you want to encrypt or decrypt”;
$decrypted = openssl_decrypt($encrypted, $cipher, $key, $opts);  

echo $decrypted;  //This is the final information you’re looking for


function cryptoDeriveKey($key){
//convert the key into hex byte array as int
    $hashKey1 = str_split($key,2);
    $count = count($hashKey1);
    $hashKeyInt = array();
    for ($i=0; $i<$count; $i++){
        $hashKeyInt[$i] = hexdec($hashKey1[$i]);
    }
    $hashKey = $hashKeyInt;
    //Let n be the required derived key length, in bytes.  CALG_RC4 = 40 bits key with 88 salt bits
    $n = 40/8;
    //Chop the key down to the first 40 bits or 5 bytes.
    $finalKey = array();
    for ($i=0; $i <$n; $i++){
        $finalKey[$i] =  $hashKey[$i];
    }
    return $finalKey;
}


function hexToStr($hex){
    $string='';
    for ($i=0; $i < strlen($hex)-1; $i+=2){
        $string .= chr(hexdec($hex[$i].$hex[$i+1]));
    }
return $string;
}
?>

If you’re having trouble getting the correct values after using the code above you can try exporting your key value from CryptoAPI and testing it with openssl command line.
First you have to set CryptDeriveKey to allow the key to be exported with CRYPT_EXPORTABLE and CRYPT_NO_SALT
::CrypeDeriveKey(hCryptProv, CALG_RC4, hSaveHash, CRYPT_EXPORTABLE | CRYPT_NO_SALT, &hCryptKey)

If you want to know how to display a PLAINTEXTKEYBLOB from the exported key follow this link.
https://docs.microsoft.com/en-us/windows/desktop/seccrypto/example-c-program--importing-a-plaintext-key
Here is an example exported key blob
0x08 0x02 0x00 0x00 0x01 0x68 0x00 0x00 0x05 0x00 0x00 0x00 0xAA 0xBB 0xCC 0xDD 0xEE   
0x08 0x02 0x00 0x00 0x01 0x68 0x00 0x00  //BLOB header matches almost exactly
0x05 0x00 0x00 0x00                      //Key length in bytes is correct 5 bytes
0xAA 0xBB 0xCC 0xDD 0xEE                 //First 5 bytes of our created hash key!!
Use your exported key value from the BLOB as the Hex Key Value in the openssl enc command below.
openssl enc -d -rc4-40 -in testFile-NO_SALT-enc.txt -out testFile-NO_SALT-dec.txt -K ""Hex Key Value"" -nosalt -nopad

This will decrypt the file that was encrypted on the Windows machine using CryptEncrypt.
As you can see, when you set the CryptDeriveKey to CRYPT_NO_SALT all you need for the openssl password or key is the first “keylength” bits of your CryptHashData password.  Simple enough to say but a real pain to get to.  Good luck and hope this helps someone else with legacy Windows translation issues.
","198","<php><hash><salt><cryptoapi><php-openssl>","2","0","1","2018-12-30 04:04:08","53975190","0","1","","","","2018-12-28 04:17:57",""
"55542942","Is possible to configure OpenLDAP Crypt passwords without using a salt?","From the docs I got this config that works but use a salt,
password-hash {CRYPT}
password-crypt-salt-format ""$6$%.16s""
and I need to store passwords in the LDAP directory that have been generated without salt encryption.
","You can simply import user entries with existing userPassword values without salt. The password verification will work provided the hash scheme is one supported by your local OpenLDAP installation.
The config directives password-hash and password-crypt-salt-format when setting new passwords.
","197","<ldap><openldap><salt><sha512><sha2>","1","0","2","2019-04-09 17:25:12","55559888","2","1","","","","2019-04-05 20:31:05",""
"55542942","Is possible to configure OpenLDAP Crypt passwords without using a salt?","From the docs I got this config that works but use a salt,
password-hash {CRYPT}
password-crypt-salt-format ""$6$%.16s""
and I need to store passwords in the LDAP directory that have been generated without salt encryption.
","You had better to use another password storage scheme that does not do salting like {SHA} or {MD5} instead of {CRYPT} : 
password-hash {SHA}


If using {CRYPT} is a requirement : 

You can still provide a static salt (! bad, unsecure, nearly as if no salt !), just comply with the given format: 
password-crypt-salt-format ""$6$%.16s""

$6$ is the crypt identifier for the SHA512 schema, and we provide a 16-chars long salt :
~$ mkpasswd -m sha-512 --salt 'verybadseasoning' secret1
$6$verybadseasoning$Q2kceqwB2uYT2tU./QF.qRCIWjMQdObEAZ71Ni5Ko1zJOnxUwpu3oMeyjtgiR3hSVHIT20Ay9V1.pXaNhkHYk/

~$ mkpasswd -m sha-512 --salt 'verybadseasoning' secret2
$6$verybadseasoning$SHof1u2BCPJhYoVOk.LkWax7n5g28rzMkNCRAC5NmlT29GSeWLAlv2AoSkOS4rYfMUXsmTcyIxKDUU8aL7TlP0

Note that mkpasswd won't allow using an empty salt :
~$ mkpasswd -m sha-512 --salt '' secret
Wrong salt length: 0 bytes when 8 <= n <= 16 expected.

Or you can try to make crypt ignore the given/generated salt string whatever it is (by taking zero character from it) : 
password-crypt-salt-format ""$6$%.0s""

It tells crypt() to use a SHA512 algorithm, the %s being substituted with a string of zero characters of salt (%.0s). I can't tell if slapd makes the %s conversion mandatory or not, but setting just ""$6$"" without any substitution for salting may do the trick as it means the same (no salt), i.e : 
~$ php -r 'print(crypt(""secret"", ""$6$""));'
$6$$2M9DchxW4txWyTYoZrH9D3VvAAQxBpEezYsLY6Cao.jwzEXpyL9xwip9hiUZX7GqTqe/E/z6iKvZqXUuqniQH.


See slapd.conf(5)
Note that a lack of salt exposes your system to dictionary attacks. 
","197","<ldap><openldap><salt><sha512><sha2>","1","1","2","2019-04-09 17:25:12","55559888","2","1","","","","2019-04-05 20:31:05",""
"46085396","Salt Minion cannot reach Salt Master at port 4505. What workaround can I use?","I've a Salt Master server and some Minions that work well. All the configuration is by default.
I've one Salt Minion in a really strict network. Running
 nc -v -z salt.master.ip.addr 4505

returns 
4505 (tcp) failed: Connection timed out

And obviously it cannot connect to the Master. I'm not an expert on network topics and I haven't found a nice workaround. What can you suggest?
Thanks!
","You can change the port the master listens on with the publish_port option in the master config.
https://docs.saltstack.com/en/latest/ref/configuration/master.html#publish-port
You would also have to change the port the minion uses to connect to the master:  https://docs.saltstack.com/en/latest/ref/configuration/minion.html#master-port-syntax
Have you checked the firewall on your Salt Master?
","196","<salt><salt-stack>","0","0","1","2017-09-08 01:14:37","","0","","","","","2017-09-06 22:47:54",""
"47557368","what is the equivalent of register(Ansible) in Saltstack?","In ansible we use register to holding the output of an external command
the question is what is the equivalent in Saltstack ?
","To my knowledge and reading documentation, at the moment, there is no option to capture output from a state.
What you could do it write your own state and run the task you would like to capture the output and process/perform another task.
","196","<devops><salt><salt-stack>","0","0","2","2018-11-30 00:10:42","48008049","0","","2947502","","2017-11-29 22:18:56","2017-11-29 16:25:02",""
"47557368","what is the equivalent of register(Ansible) in Saltstack?","In ansible we use register to holding the output of an external command
the question is what is the equivalent in Saltstack ?
","To my knowledge there is not a one-to-one mapping for this it is however possible to do this in Saltstack:
{% set return = salt['cmd.run']('echo hello') %}

and then use the return variable.
","196","<devops><salt><salt-stack>","0","0","2","2018-11-30 00:10:42","48008049","0","","2947502","","2017-11-29 22:18:56","2017-11-29 16:25:02",""
"31829235","Does rehashing a randomly salted password at login increase security?","I am currently working on a project in PHP, and am wondering how to make my system as secure as currently possible. I am currently using password_hash to hash my passwords and then store them in my database. What I was wondering: Does rehashing and re-saving the new salted hash to the database increase security, or is that just an illusion?
","Calculating a new hash with a new salt each time the user logs in, will not improve security of your system.
Since the password will be the same and only the salt changes, a cracker with access to the hashes can brute-force with exactly the same cost. Changing the salt will not improve the security, a salt is not a secret, it fullfills its job even if it is known. Hiding or changing it does not add any value (hiding is difficult and there are better methods to add a secret than to hide the salt).
","194","<php><security><hash><salt>","3","2","3","2015-08-05 13:02:03","31830417","5","","472495","","2015-08-05 10:46:40","2015-08-05 10:00:08",""
"31829235","Does rehashing a randomly salted password at login increase security?","I am currently working on a project in PHP, and am wondering how to make my system as secure as currently possible. I am currently using password_hash to hash my passwords and then store them in my database. What I was wondering: Does rehashing and re-saving the new salted hash to the database increase security, or is that just an illusion?
","I don't think it will increase security, no. You have two risk scenarios:

The cracker breaks into a server and stays there for some time undetected. In this case, passwords can just be captured programmatically, as users log in. This requires much less effort than brute-forcing strong hash algorithms.
The cracker breaks in, steals a copy of the database, and in response the sysadmin plugs the security hole and restores the server from backup quickly.

In the second case, the cracker has a set of usernames, email addresses and hashed passwords, which they may wish to try brute-forcing. There is no advantage to be had if these hashes were created once or a thousand times.
It's worth remembering what we're trying to guard against here. If the security of a website has been breached, there is a knock-on effect for users who have used the same username/password combination at other popular services. A major reason for hashing, and the purpose an attacker has in brute-forcing passwords, is to see if the users can be hacked elsewhere (for example their social media or bank accounts).
This is why we recommend that people should not re-use passwords, and instead that they should use strong passwords stored in a password manager. It is even better if people can use a different username and/or a different email per service. Incidentally, it is surprisingly easy to use an email per service: if you are on GMail with an address of gmail.alias@gmail.com, just do this:
gmail.alias+randomcode@gmail.com

The email should of course be stored in your password manager - if you forget this, you will not be able to use password reminder features, and you will be locked out unless the service is willing to accept some other proof of identity. Despite that, this approach is stronger against the ripple effect of using a service that is breached - a weak password reminder system elsewhere is harder to exploit if users always use different email addresses.
Users with their own domain name can do something similar - set up an email account to ""catch all"" and then use whatever aliases you like.
","194","<php><security><hash><salt>","3","5","3","2015-08-05 13:02:03","31830417","5","","472495","","2015-08-05 10:46:40","2015-08-05 10:00:08",""
"31829235","Does rehashing a randomly salted password at login increase security?","I am currently working on a project in PHP, and am wondering how to make my system as secure as currently possible. I am currently using password_hash to hash my passwords and then store them in my database. What I was wondering: Does rehashing and re-saving the new salted hash to the database increase security, or is that just an illusion?
","First of all, i'm not a cryptography expert. I had a cryptography class at university, but that doesn't make me an expert.
The reason for salt is so that dictionary attack against the hash won't work. Since the same password can be combined with many different salts, there are many different hashes possible. It is thus not possible to have a simple hash to password table, as would be possible without a salt.
Thus, there is no additional gain to be had from rehashing a password with a different salt. The new salt should be just as random as the old salt, and therefore just as secure.
However, when a password is not changed for a long time, it may be hashed using a hashing algorithm that was good at the time of hashing, but poor now. PHP has built-in functions especially for password hashing since PHP 5.5.
The recommended way of operation is explained on the PHP website, but it boils down to this: Use password_verify to check a password, use password_hash to encrypt a password. Use password_needs_rehash to check if a password is hashed using a secure hash. If it is not, either rehash it, or ask the user to change it (depending on your security policy).
","194","<php><security><hash><salt>","3","2","3","2015-08-05 13:02:03","31830417","5","","472495","","2015-08-05 10:46:40","2015-08-05 10:00:08",""
"36458857","DESede decryption in java a block encrypted in C# using key generated by CryptDeriveKey method","I have a data block, which can be decrypted in C# with this code:
    PasswordDeriveBytes pdb = new PasswordDeriveBytes(password, salt);       
    byte[] key = pdb.CryptDeriveKey(""TripleDES"", ""SHA1"", 192, iv);        
    var csp = new TripleDESCryptoServiceProvider();
    csp.Mode = CipherMode.CBC;
    csp.IV = iv;
    csp.Key = key;
    csp.Padding = PaddingMode.None;

    var plainTextBytes = new byte[32*1024];
    var decryptor = csp.CreateDecryptor();
    int decr = decryptor.TransformBlock(cipherText, 0, cipherText.Length, plainTextBytes, 0);

My main goal to do the same in java. I'm trying to do this with this  PasswordDerivedBytes port solution.   
Here is my code:
PasswordDeriveBytes myPass = new PasswordDeriveBytes(password, salt);
SecretKeyFactory kf;
    try {
        Cipher desEDE = Cipher.getInstance(""DESede/CB/NoPadding"");
        kf = SecretKeyFactory.getInstance(""DESede"");
        key = myPass.getBytes(192);
        desEDEKey= kf.generateSecret(new DESedeKeySpec(key));           
        byte[] iv = DatatypeConverter.parseBase64Binary(ivText);
        desEDE.init(Cipher.DECRYPT_MODE, desEDEKey, new IvParameterSpec(iv));
        byte[] ct = desEDE.doFinal(DatatypeConverter.parseBase64Binary(texts));   
    }

The problem is that the key created by C# CryptDerviedKey is not equal to one generated in java with getBytes(192). When this key is just copied from C# to java then all work fine, so the problem exactly in this place. Please help to port CryptDeriveKey(""TripleDES"", ""SHA1"", 192, iv) algorithm to java correctly;        
","","194","<java><encryption><salt><tripledes>","2","","0","2016-04-06 17:59:27","","0","3","-1","","2017-04-13 12:48:18","2016-04-06 17:59:27",""
"44083770","re-use pillar values in salt(-ssh)","I am currently getting familiar with salt and wonder how I could re-use the values of pillars in other places (sections) in .sls files.
In buildout, I would be able to reference a variable from another section with ${sectionname:varname} to re-use a once defined value. This is especially handy, when dealing with directories (basedir, appdir). buildout example:
['foo']
  path = /highway/to/hell

['bar']
  path = ${foo:path}/lastexit

When I try to reference another variable in an .sls file, even if it is in the same file, I get always None. salt example:
foo:
  path: /highway/to/hell

bar:
  path: {{ salt['pillar.get']('foo:path') }}/lastexit

salt-ssh minion1 pillar.get bar:path results in None/lastexit
I have the feeling, that I'm missing something here. Could someone point out, how one does re-use values in salt .sls
","You can use jinja to assign a value, e.g.:
{% set base_path = salt['pillar.get']('foo:path','/highway/to/hell') %}

foo:
  path: {{ base_path }}

bar:
  path: {{ base_path }}/lastexit

In this case ""/highway/to/hell"" is set as a default in case no value is assigned in the pillar or no pillar is found. For more info, see https://docs.saltstack.com/en/latest/topics/jinja/index.html
","193","<jinja2><salt>","0","1","1","2017-06-05 23:16:18","44379070","0","","","","","2017-05-20 08:43:57",""
"4210769","Salting passwords in open-source projects","I'm preparing to put a project publicly on github. In my project, for login authentication, I take a string and strongly type it as a Password:
// Stripped down here on SO for brevity
public class Password
{
    private const string salt = ""sealab2021"";

    public Password(string password) 
    {
        this.saltedPasswordHash = new MD5Hash(password + this.salt).ToString();
    }

    public string SaltedHash { get; private set; }
}

Obviously, if the salt is publicly-viewable, the salt's worthless. 
What do other people do to salt passwords in open-source projects and still keep the salt phrase securely hidden?
Should the salt exist somewhere on the file system and be loaded when the application starts? Seems like a reasonable solution, but if I'm going to actually use github for source control and not just do dumps to github when new versions are released, that file's still going to be accessible to the public.
","First, salts don't need to be secret.  They need to be random.  A salt is meant for situations when the attacker has already compromised the database (and often the filesystem).  That means they have access to the hashed passwords and salts.  However, the salts still greatly increase the effort needed to get the plaintext password.
More importantly, login salts should be random and per-user.  Generate a random value when the user is created.  If you want to use two salts (one per-user, and one per-installation), generate a random value in a setup script.
Finally, this is not a open source/proprietary issue.  Such hard-coded values can easily be reverse-engineered from proprietary software.
","193","<security><passwords><salt>","1","4","2","2010-11-18 01:38:28","4210822","0","0","","","","2010-11-18 01:16:31",""
"4210769","Salting passwords in open-source projects","I'm preparing to put a project publicly on github. In my project, for login authentication, I take a string and strongly type it as a Password:
// Stripped down here on SO for brevity
public class Password
{
    private const string salt = ""sealab2021"";

    public Password(string password) 
    {
        this.saltedPasswordHash = new MD5Hash(password + this.salt).ToString();
    }

    public string SaltedHash { get; private set; }
}

Obviously, if the salt is publicly-viewable, the salt's worthless. 
What do other people do to salt passwords in open-source projects and still keep the salt phrase securely hidden?
Should the salt exist somewhere on the file system and be loaded when the application starts? Seems like a reasonable solution, but if I'm going to actually use github for source control and not just do dumps to github when new versions are released, that file's still going to be accessible to the public.
","
Obviously, if the salt is
  publicly-viewable, the salt's
  worthless.

Not true. You should assume that the salt is potentially known to an attacker, rather than relying on security-through-obscurity.
Your mistake is that you're using a single, shared salt for the entire system. You should use a separate, pseudo-random salt for each user, and then store that salt with the password hash for that user.
I would also recommend using a system like PBKDF2 or bcrypt rather than a simple salted hash.
","193","<security><passwords><salt>","1","5","2","2010-11-18 01:38:28","4210822","0","0","","","","2010-11-18 01:16:31",""
"11331589","salted password security","Why is it safer to store passwords with a different salt for every password?
As passwords are hashed after being salted, I see no reason to use a different salt.
Is it easier to brute-force the password with a known salt or something? Or do hackers make their own rainbow tables once they know the salt?
Kind regards
","When you give each password its own individual salt there is no common bond between every salt in every password. So even if the ""hacker"" cracks one password, he won't have a salt for any other password.
When it comes to using PHP and salting your passwords, you should use a slow encryption, such as crypt. The faster you encrypt something, the quicker the ""hacker"" can find a way to decrypt it.
You could simply a function that creates a new salt based on a person's username, email, or combination of a few things.
","193","<security><passwords><salt><password-hash>","0","3","3","2013-06-21 01:41:55","11331717","5","1","53114","","2012-07-04 17:24:04","2012-07-04 15:04:43",""
"11331589","salted password security","Why is it safer to store passwords with a different salt for every password?
As passwords are hashed after being salted, I see no reason to use a different salt.
Is it easier to brute-force the password with a known salt or something? Or do hackers make their own rainbow tables once they know the salt?
Kind regards
","If you use only one salt, the hacker only has to rebuild their rainbow tables once and can use them for your entire database. Duplicate passwords will be easier to find, too. 
Use individual hashes and an expensive algorithm (bcrypt, scrypt). 
","193","<security><passwords><salt><password-hash>","0","2","3","2013-06-21 01:41:55","11331717","5","1","53114","","2012-07-04 17:24:04","2012-07-04 15:04:43",""
"11331589","salted password security","Why is it safer to store passwords with a different salt for every password?
As passwords are hashed after being salted, I see no reason to use a different salt.
Is it easier to brute-force the password with a known salt or something? Or do hackers make their own rainbow tables once they know the salt?
Kind regards
","Ok, let's get one thing straight: Salting has nothing to do with rainbow tables. Yes. Say that again. Salting has nothing to do with rainbow tables.
Well, that's not entirely true. Salts are used to prevent time and memory tradeoffs by amortizing the cost of attacking one hash against the cost of other hashes.
In the case of a rainbow table, using a salt means that the entire table is invalidated.
But there are other ways of invalidating an entire table. You could append a static string to each password (which is not a salt). That would defeat rainbow tables...
The Real Enemy 
The real enemy here is not rainbow tables. The real enemy is brute forcing. Modern day machines are so fast at brute forcing that it's cheaper to build a gigantic GPU cluster and do advanced brute-forcing than it is to store enough rainbow table to make it worth the slow disk access.
A salt helps defeat bruteforcing because it's unique. Not per password. Not per user, but unique in the universe (statistically at least). This is why you want to use a random number, and not the username, email or anything predictable.
Again, not because we don't want predictability. But because we want statistical uniqueness. If an attacker attacks two sites that both use usernames as salts, he can amortize his attacks against both hashes at the same time (even though both may be using different passwords).
Salts should be random, and per user. 
","193","<security><passwords><salt><password-hash>","0","1","3","2013-06-21 01:41:55","11331717","5","1","53114","","2012-07-04 17:24:04","2012-07-04 15:04:43",""
"46793165","SHA512 and custom salt on checkhash - PhalconPHP","public function beforeSave(){
    $salt = ""Acrec_$"";
    $hashed = hash('sha512', $salt . $this->password);
    $this->password = $hashed;
}

I'm using a custom Salt and custom hash to encrypt the users password, but, now i need to log-in the users.
the Code inside loginAction();
$this->auth->check([
    'email' => $this->request->getPost('email'),
    'password' => $this->request->getPost('password'),
    'remember' => $this->request->getPost('remember')
]);

","With PHP use password_hash and password_verify, the pair are secure and easy to use.
When saving a password verifier just using a hash function is not sufficient and just adding a salt does little to improve the security. Instead iterate over an HMAC with a random salt for about a 100ms duration and save the salt with the hash. Better yet use a function such as PBKDF2, Rfc2898DeriveBytes, password_hash, Bcrypt, passlib.hash or similar functions. The point is to make the attacker spend a substantial of time finding passwords by brute force.
","192","<php><hash><phalcon><salt>","0","0","2","2017-10-17 15:16:55","46793592","3","","1415724","","2017-10-17 15:06:59","2017-10-17 14:56:12",""
"46793165","SHA512 and custom salt on checkhash - PhalconPHP","public function beforeSave(){
    $salt = ""Acrec_$"";
    $hashed = hash('sha512', $salt . $this->password);
    $this->password = $hashed;
}

I'm using a custom Salt and custom hash to encrypt the users password, but, now i need to log-in the users.
the Code inside loginAction();
$this->auth->check([
    'email' => $this->request->getPost('email'),
    'password' => $this->request->getPost('password'),
    'remember' => $this->request->getPost('remember')
]);

","In phalcon just use:
$password = $this->request->getPost('password');
$user->password = $this->security->hash($password);

And 
$password = $this->request->getPost('password');
$user = Users::findFirst();
if ($this->security->checkHash($password, $user->password)) {
    // any logic here
}

By default it's using bcrypt which has salts built-in.
","192","<php><hash><phalcon><salt>","0","1","2","2017-10-17 15:16:55","46793592","3","","1415724","","2017-10-17 15:06:59","2017-10-17 14:56:12",""
"15547716","Per user salts and cross-user hash attacks","We hash users passwords (in a .net web application) with SHA2 & the following salts:

Application salt - stored outside the database (in our case the web applications web.config as an encrypted string) - this is passed to stored procedures that are involved in logging in, creating new users and changing passwords etc.
Per user salt - a SQL uniqueidentifier - currently stored in the user table - generated automatically at insert time using default (CONVERT([char](36),newid(),(0)))
Database salt - a salt stored in a settings table within the database.
Password - and of course the users password.

Whilst this helps with rainbow & dictionary attacks etc I was thinking of what would happen if someone did find a hole in our security and managed to run an update statement against the database – specifically - what would stop a user from registering with our site with a password they know then replacing the salt & hash on an admin account with their salt and hash - thus giving them full admin access to our site / application?
Is this a risk we should realistically worry about? If so, does it have a technical term / Standard prevention technique?
I was thinking of involving the users ID (an integer in our case) in the hash in some way - just curious what the best practice is on this or are we over thinking things?
PS: I know SHA2 isnt an ideal hash to use for passwords and that slower hashing methods such as BCrypt are preferred, this was a decision made before my involvement on the project
PS: Our web application (and its application key) are heavily firewalled from the SQL server - only one port is open between them & that's used for SQL)
","Honestly I think you are over-thinking things. If a malicious user is in the position to run an update query against your users table, they most likely have equal access to the other tables in the database. Again, most likely permissions are also stored in said database and it would be easier to run another query to grant themselves the appropriate permissions, rather than muck with taking over an existing admin's account. Or, simply change whatever data they wanted directly in the database and forget the front end entirely.
Therefore I would say once a user has access to the database (via SQL injection or otherwise) all bets are already off and they can do whatever they like.
Note the reason for salting a hash is simply to make the dump of passwords valueless. That is, if (when?) a user re-uses their password for another site and it were not salted, looking up the obtained hashed value in a dictionary (a so-called rainbow table) would provide the plaintext password which could then be used on another site to impersonate the user. Salting the hash eliminates this ""reversibility"" of using a rainbow table to look up the value. Knowing the salt does give the attacker a leg up, but they still need to brute-force their way into getting the matching password. Adding an unknown application-wide salt makes the process much more difficult, although it would still be possible with millions of accounts and a lot of brute-force or sheer luck.
","191","<security><hash><sql-server-2008-r2><passwords><salt>","1","4","2","2013-03-21 13:38:58","15547891","1","","","","","2013-03-21 12:35:51",""
"15547716","Per user salts and cross-user hash attacks","We hash users passwords (in a .net web application) with SHA2 & the following salts:

Application salt - stored outside the database (in our case the web applications web.config as an encrypted string) - this is passed to stored procedures that are involved in logging in, creating new users and changing passwords etc.
Per user salt - a SQL uniqueidentifier - currently stored in the user table - generated automatically at insert time using default (CONVERT([char](36),newid(),(0)))
Database salt - a salt stored in a settings table within the database.
Password - and of course the users password.

Whilst this helps with rainbow & dictionary attacks etc I was thinking of what would happen if someone did find a hole in our security and managed to run an update statement against the database – specifically - what would stop a user from registering with our site with a password they know then replacing the salt & hash on an admin account with their salt and hash - thus giving them full admin access to our site / application?
Is this a risk we should realistically worry about? If so, does it have a technical term / Standard prevention technique?
I was thinking of involving the users ID (an integer in our case) in the hash in some way - just curious what the best practice is on this or are we over thinking things?
PS: I know SHA2 isnt an ideal hash to use for passwords and that slower hashing methods such as BCrypt are preferred, this was a decision made before my involvement on the project
PS: Our web application (and its application key) are heavily firewalled from the SQL server - only one port is open between them & that's used for SQL)
","You're certainly correct in considering the risk of arbitrary SQL injection as a show-stopper in terms of any password security and/or application security.
In a breach of database security (either by someone stealing a SQL dump or having arbitrary SELECT access to your data) the preventative measure of hardening stored passwords allows some assurances with regard to the privacy of passwords of your end-users and also some application security in that the SELECT won't lead directly to a password that can be stolen and used to login.
However, if a SELECT statement is accessible, that can be paired with other SQL mechanisms to, for instance, write arbitrary web-shells or other files server-side that could potentially allow your attacker to influence the application code in such a way they could MITM the user passwords upon login (since the crypto is happening server-side on the hashing).
The ultimate answer to your question is, SQL injection is a very serious issue and adding layers such as web application firewalls (WAFs) or a SQL proxy (GreenSQL comes to mind) can provide an advantage when code is deployed without proper SQL security.
","191","<security><hash><sql-server-2008-r2><passwords><salt>","1","0","2","2013-03-21 13:38:58","15547891","1","","","","","2013-03-21 12:35:51",""
"7246765","How to create a 'Super Administrative' Password for member login site","We maintain a website built on LAMP stack that allows members to log into their profile. While we have an admin interface to handle most tasks, there are times it is 'necessary' to log in ""as"" the member and see what they are seeing. 
We have a very secure and thorough salting and verification login process for members but my thought is the following statement is not too secure:
sql = SELECT * FROM userlogins WHERE username = :user

(run the users entered password through the salt process)
$userpasswordentered = undisclosed salt process of ($_POST['password']);

if($userpasswordentered == value retrieved from userlogins above OR $_POST['password'] == 'hardcodedpw') {

    log user in
}

Is there a real 'safe' way to create a 'super' password that would allow me to log into any user account given a valid username was given?
","I would implement some sort of ""user impersonation"" feature.  So basically, from your admin account, you can enter / search for a user ID, and then call the ""log user in"" code as if that user had logged in.  This will log the admin user out, but they will now be impersonating the customer as requested.
Personally though, if I have a user/edit action, then the code does the following:
//check for an admin user
if ($current_user->role == 'admin')
    //admins have to specify customers to edit
    if (isset($_GET['id']))
        $user_id = $_GET['id'];
    else
        //if no customer is specified, return a 404
        http_404();
else
    //customers can only see their own details
    $user_id = $current_user->id;

//get the user details to edit
$user_to_edit = $repository->get_user($user_id);

That way, the admin user gets to stay logged in, and you get to control how much of the customer's stuff the admin user can mess with.
","190","<php><mysql><login><salt>","1","4","1","2011-08-30 17:05:30","7246911","2","","","","","2011-08-30 16:44:24",""
"4032824","Salting a secret with itself before storing in a DB, what are the weaknesses?","I've heard of people using this approach and would like to know what the implications are. I just know it's a bad idea!
From what I understand, salting a password before storing the hash in a DB has the primary purpose of making every hashing algorithm unique, and thus requiring a new rainbow table for every user when trying to crack it.
How is a hash weakened in this context if the plain text was just salted with itself?
An example:
plainText = input();
saltedText = plainText + plainText;
hashedText = hash(saltedText);
db.store(hashedText);

And would the following approach have the same weaknesses or any other weaknesses?
plainText = input();
saltedText = hash(plainText) + plainText;
hashedText = hash(saltedText);
db.store(hashedText);

","I think you have misunderstood the purpose of the salt.  The salt means that the same data, hashed twice would (usually) give two different results.  This prevents attacks where knowing what values can create a given hash gives you the login to everyone who uses the same password.
As such duplicating the test to be hashed will not give you any benefits other than the perf hit of hashing more data.
","189","<database><security><hash><salt><rainbowtable>","1","2","3","2010-11-15 15:00:15","4032879","0","2","","","","2010-10-27 11:45:37",""
"4032824","Salting a secret with itself before storing in a DB, what are the weaknesses?","I've heard of people using this approach and would like to know what the implications are. I just know it's a bad idea!
From what I understand, salting a password before storing the hash in a DB has the primary purpose of making every hashing algorithm unique, and thus requiring a new rainbow table for every user when trying to crack it.
How is a hash weakened in this context if the plain text was just salted with itself?
An example:
plainText = input();
saltedText = plainText + plainText;
hashedText = hash(saltedText);
db.store(hashedText);

And would the following approach have the same weaknesses or any other weaknesses?
plainText = input();
saltedText = hash(plainText) + plainText;
hashedText = hash(saltedText);
db.store(hashedText);

","In both your methods the salt is predictable, so only one rainbow table is needed.
You should use a different salt every time you hash a string:
plainText = input();
salt = getRandomSalt();
hashedText = hash(salt + plainText);
db.store(salt, hashedText);

","189","<database><security><hash><salt><rainbowtable>","1","1","3","2010-11-15 15:00:15","4032879","0","2","","","","2010-10-27 11:45:37",""
"4032824","Salting a secret with itself before storing in a DB, what are the weaknesses?","I've heard of people using this approach and would like to know what the implications are. I just know it's a bad idea!
From what I understand, salting a password before storing the hash in a DB has the primary purpose of making every hashing algorithm unique, and thus requiring a new rainbow table for every user when trying to crack it.
How is a hash weakened in this context if the plain text was just salted with itself?
An example:
plainText = input();
saltedText = plainText + plainText;
hashedText = hash(saltedText);
db.store(hashedText);

And would the following approach have the same weaknesses or any other weaknesses?
plainText = input();
saltedText = hash(plainText) + plainText;
hashedText = hash(saltedText);
db.store(hashedText);

","Others have explained the issues with your implementation.  
If you want to derive a salt (to avoid needing to store one) you need another user unique source for the salt.
For example AccountID, username, or email address could be used as a salt source. Obviously you shouldn't use the source straight as the salt instead use a key derivation function like PBKDF2.
Remember if the underlying salt source changes the password will need to be rehashed.  This can be implemented by asking the user for the password before changing key information (validate user and then use provided password to rehash w/ salt source).  
","189","<database><security><hash><salt><rainbowtable>","1","0","3","2010-11-15 15:00:15","4032879","0","2","","","","2010-10-27 11:45:37",""
"4159827","Another Question About Salting Passwords","I know there are tons of blogs, articles, and questions on SO about salting passwords, but one thing I haven't been able to find an answer to is this:
If I am generating a password hash like this:
$salt = randomString
$password = $_POST['password'] 
hashedPassword = sha1($password.$salt)

And I have a table like this:
Users
user_id | hashedPassword | salt

Why is it so difficult for an attacker to figure this password out? Can't they just use a rainbow table, or brute force to figure out the salt, and then append the salt to every word in a dictionary attack?
","They can do that.  The power is that they would therefore need to generate a new rainbow table for each password (or iterate through each dictionary entry for each password).
So the total compute time for a single password is still the same as for a common salt.  But the total compute time for multiple passwords goes up exponentially...
Oh, and it's typically considered good practice to have two salts.  One stored in the database that's unique per password hash, and one stored on the filesystem that's unique for the whole site.  That way if the database is compromised, there's no significant worry as they only have 1/2 the salts used.  Sure, if the filesystem's compromised they could get it all, but if the filesystem's compromised, they can install password sniffers and other nasties...
I hope that helps...
","189","<php><security><hash><passwords><salt>","1","3","5","2014-02-05 02:47:48","4159873","1","","","","","2010-11-11 22:19:24",""
"4159827","Another Question About Salting Passwords","I know there are tons of blogs, articles, and questions on SO about salting passwords, but one thing I haven't been able to find an answer to is this:
If I am generating a password hash like this:
$salt = randomString
$password = $_POST['password'] 
hashedPassword = sha1($password.$salt)

And I have a table like this:
Users
user_id | hashedPassword | salt

Why is it so difficult for an attacker to figure this password out? Can't they just use a rainbow table, or brute force to figure out the salt, and then append the salt to every word in a dictionary attack?
","Well, for one they cannot use a precomputed rainbow table to find a collision - an attacker would have to generate their own rainbow table using the salt. Also, assuming every user has a different salt, that rainbow table would only work for a single user - making their job that much more difficult.
","189","<php><security><hash><passwords><salt>","1","2","5","2014-02-05 02:47:48","4159873","1","","","","","2010-11-11 22:19:24",""
"4159827","Another Question About Salting Passwords","I know there are tons of blogs, articles, and questions on SO about salting passwords, but one thing I haven't been able to find an answer to is this:
If I am generating a password hash like this:
$salt = randomString
$password = $_POST['password'] 
hashedPassword = sha1($password.$salt)

And I have a table like this:
Users
user_id | hashedPassword | salt

Why is it so difficult for an attacker to figure this password out? Can't they just use a rainbow table, or brute force to figure out the salt, and then append the salt to every word in a dictionary attack?
","
Can't they just use a rainbow table,
  or brute force to figure out the salt,

How would that work? But it's a non-issue anyway - 
assume that the attacker knows the salt. Its purpose is not to be secret, that's why you store it right next to the hash.

and then append the salt to every word
  in a dictionary attack?

Sure they can do that, but they have to do it for that particular user. They cannot amortize the effort over all users in the DB, or use a precomputed table of hash->password mappings.
That, and only that is the point of a salt.
","189","<php><security><hash><passwords><salt>","1","5","5","2014-02-05 02:47:48","4159873","1","","","","","2010-11-11 22:19:24",""
"4159827","Another Question About Salting Passwords","I know there are tons of blogs, articles, and questions on SO about salting passwords, but one thing I haven't been able to find an answer to is this:
If I am generating a password hash like this:
$salt = randomString
$password = $_POST['password'] 
hashedPassword = sha1($password.$salt)

And I have a table like this:
Users
user_id | hashedPassword | salt

Why is it so difficult for an attacker to figure this password out? Can't they just use a rainbow table, or brute force to figure out the salt, and then append the salt to every word in a dictionary attack?
","The point of the salt is not to make a single password stronger. It is about preventing the attacker from scaling up, when attacking several passwords. With the salt, the attacker cannot reuse his efforts into attacking another password; he must rehash his dictionary.
Rainbow tables are nothing magical; they are just a special case of a precomputed table, which is akin to a simple dictionary attack with slightly distinct space-time modalities. Building the rainbow table implies more or less going through the complete dictionary. Precomputed tables are a gain for the attacker if he can use them to attack several passwords. If passwords are salted, then precomputed tables, rainbow or not, will not gain him anything.
That being said, a single password is often weak and can be brute-forced, because the average password will fit in the average user brain, and, as such, cannot be very complex. To mitigate that risk, one should use repeated or iterated hashing. A salt does not help here (but it does not harm either). See this answer for details.
","189","<php><security><hash><passwords><salt>","1","3","5","2014-02-05 02:47:48","4159873","1","","","","","2010-11-11 22:19:24",""
"4159827","Another Question About Salting Passwords","I know there are tons of blogs, articles, and questions on SO about salting passwords, but one thing I haven't been able to find an answer to is this:
If I am generating a password hash like this:
$salt = randomString
$password = $_POST['password'] 
hashedPassword = sha1($password.$salt)

And I have a table like this:
Users
user_id | hashedPassword | salt

Why is it so difficult for an attacker to figure this password out? Can't they just use a rainbow table, or brute force to figure out the salt, and then append the salt to every word in a dictionary attack?
","Let's use a simple example: we have two databases, Alpha and Beta:
Alpha just hashes the password and stores the result:
row: {
    passwordHash = Hash(password)
}

Beta creates a random value for each user and uses it as part of the input to the hash function:
row: {
    salt = RandomString(),
    passwordHash = Hash(password + salt)
}

Now say your adversary has prior knowledge that some of your users are using the password: ""password""
To find all users in Alpha whose password is ""password"", you only have to calculate the hash of ""password"" once. Here's an example from SQL:
DECLARE @Hash INT; SET @Hash = Hash(""password"");
SELECT UserID FROM Users WHERE passwordHash = @Hash

Since it just involves integer equality, it's about as efficient as a query can be. Even if Alpha had hundreds of thousands of users, it would return very quickly.
The fact that Beta's hashes include a row-specific random value in every password hash, you cannot write a similarly efficient query for it. The closest you could get would be to re-evaluate the (intentionally expensive to compute) hash function for every row's salt:
SELECT u.UserID FROM Users u WHERE u.passwordHash = Hash(""password"" + u.salt)

The fact that searching for a known password is so expensive should indicate how expensive it is to perform a brute force attack, even if that attack is guided by dictionaries of common passwords, or algorithms that attempt to mix words and numbers together to create passwords the way humans do.

You already know that salt is a measure to defend against ""rainbow table"" attacks, so your question is... how?
""Rainbow table"" has become a flowery term for any attack that computes the hashes for common and likely potential passwords ahead of time and stores them in an efficient lookup table. Once you have that table built (which can take several hours), you then iterate through every User and see if their password hash is in the lookup table. If it is, you'll have guessed that user's password.
The users within Alpha are indeed vulnerable to this kind of attack. Alpha will have equivalent hashes for equivalent passwords, so a hash table or rainbow table could be used to reverse the hashes. But Beta cleverly sidesteps this vulnerability by making the result of the hash function unique to the user by virtue of the salt.
I hope this helps some reader, someday!
","189","<php><security><hash><passwords><salt>","1","1","5","2014-02-05 02:47:48","4159873","1","","","","","2010-11-11 22:19:24",""
"26054837","Migrating user passwords from Symfony to Django","I want to migrate users from Symfony to Django. I want to save same passwords for users.
I have hashes of user passwords in Symfony and salt.
How to migrate hashes of user passwords from Symfony to Django?
","It sounds like you're probably going to have to implement a custom password hasher which you'll add to the list of hashers in settings.py.
You use this hasher to check passwords and authenticate users, and then (optionally) replace these old hashes with standard Django based hashes.
Here's an example of a hasher for Drupal which might help you get started.    
","188","<django><symfony><hash><passwords><salt>","1","1","1","2014-09-26 08:37:04","26055375","1","","3637145","","2014-09-26 08:25:10","2014-09-26 08:03:27",""
"24916202","How can I do hash and salt to manage secure credentials in C# with SQL Server 2008","I would like to know how can I do salting & hashing of passwords? I've found in Internet a lot of examples about it, but I still can't do it well.
I have this code to generate Salt and Hash
public static byte[] GetSalt()
{
    var p = new RNGCryptoServiceProvider();
    var salt = new byte[16];
    p.GetBytes(salt);
    return salt;    
}

public static byte [] GetSecureHash(string password, byte[] salt)
{
    Rfc2898DeriveBytes PBKDF2 = new Rfc2898DeriveBytes(password, salt);
    return PBKDF2.GetBytes(64);
}

But then, I don't know where I use these methods, I have this:
SqlParameter SalContraseña = new SqlParameter(""@SalContraseña"", SqlDbType.Binary, 16);
SalContraseña.Value = GetSalt();
cmd.Parameters.Add(SalContraseña);

SqlParameter HashContraseña = new SqlParameter(""@HashContraseña"",SqlDbType.Binary, 64);
HashContraseña.Value = GetSecureHash(Password,byte[]);
cmd.Parameters.Add(HashContraseña);

Here I apply the password and the hash to SqlParameter, but I'm not sure if it is correct or if this is the correct form to do this.
I applied these code in the form in which I create the users, then I don't know how apply this code to validate the passwords with the hash, I know I need to do this in the form in which the users are logged.
","You would need to store the salt that you used to generate the original password hash.  And then, when a user is attempting to log in, you retreive that salt value and hash the password they entered using the same hasing algorithm, and the same salt value originally used.  If the resulting hash matches the stored user's hash, authentication is successful.
","187","<c#><sql-server-2008><hash><salt><rngcryptoserviceprovider>","0","1","1","2014-07-23 17:03:07","","1","","2045162","","2014-07-23 17:00:55","2014-07-23 16:39:28",""
"21242392","How to create a secure salt?","I've got a little question here because I'm creating a log in and register system. A developer at my school told me to salt secure passwords. I agree on that point but he said I needed to create the salt out of a timestamp but how to do it? Currently I'm doin' this:
$password = hash('sha512', $password . $salt);

and the salt just like:
$salt = ""xHkosbGhsfT77239GhsvH"";

This stands litteraly in my configuration so it's not good... 
Does anyone have some tips? Any idea how to do it, so if any of you do share it with me!
Thanks.
","It is better to generate a unique salt for each user and keep them in your user table. So, for password checking, just fetch the user salt from database and use it. It is much safer than using a single salt for hole database.
","187","<php><security><salt><password-hash>","2","0","2","2014-01-30 09:45:17","","7","","445517","","2014-01-30 09:45:17","2014-01-20 19:22:20","2014-01-31 23:20:19"
"21242392","How to create a secure salt?","I've got a little question here because I'm creating a log in and register system. A developer at my school told me to salt secure passwords. I agree on that point but he said I needed to create the salt out of a timestamp but how to do it? Currently I'm doin' this:
$password = hash('sha512', $password . $salt);

and the salt just like:
$salt = ""xHkosbGhsfT77239GhsvH"";

This stands litteraly in my configuration so it's not good... 
Does anyone have some tips? Any idea how to do it, so if any of you do share it with me!
Thanks.
","You can use hash_hmac() function which needs three arguments (See documentation). I use it like this:
hash_hmac('sha512', $password . $salt, SITEKEY);

sha512 is my preferred hash function which generates 128B long strings
$password is user password
$salt is unique string generated for each user and stored in the database in the same row for user 
salt is generated as: bin2hex(openssl_random_pseudo_bytes($bits)) (See documentation)
SITEKEY is unique string for each site I make
","187","<php><security><salt><password-hash>","2","0","2","2014-01-30 09:45:17","","7","","445517","","2014-01-30 09:45:17","2014-01-20 19:22:20","2014-01-31 23:20:19"
"45943458","Specified target is a directory salt file manage","I want to mount settings.py from salt master to a salt minion running on aws ec2 instance. I set makedirs to be true for it to always mount the latest settings.py to the minion. However, the target path I set will be parsed as a directory rather than a file. Here's the configuration:
/usr/local/myspace/myapp/main/settings.py:
  file.managed:
    - source: salt://test/myapp/myapp_settings/settings.jinja
    - user: root
    - name: /usr/local/myspace/myapp/main/settings.py
    - makedirs: True
    - group: root
    - mode: 755
    - template: jinja
    - require:
      - docker_image: {{app}}

/usr/local/myspace/myapp/main/ does not exist when the minion is initialized, I will create the path here through the makedirs. What's interesting is that, when I reduced one level, for ex, if I reduced the main path, and give name: /usr/local/myspace/myapp/settings.py, the target was parsed as a file. So I'm thinking my problem is related to path level, but without more information I can't determine where exactly went wrong.
","","186","<python><salt><salt-stack><salt-creation>","0","","0","2017-08-29 19:42:26","","2","","3781320","","2017-08-29 19:42:26","2017-08-29 15:52:07",""
"31234918","Python login program,with bcrypt","I'm writing a python script (in python3.4),it hashes the passwords,and another script logs the user in.
The one that hashes the password:
import bcrypt
password1 = input(""pass: "")
password=b""password1""
salt = bcrypt.gensalt()
hashed = bcrypt.hashpw(password, salt)

f=open(""passwd.txt"",""w"")
print(hashed,file=f)
f.close()

f1=open(""salty.txt"",""w"")
print(salt,file=f1)
f1.close()



if bcrypt.hashpw(password, hashed) == hashed:
   print(""It Matches"")
else:
    print(""It Does not Match"")

The other:
import bcrypt
password1 = input(""pass: "")
password=b""password1""
f=open(""passwd.txt"",""r"")
for i in f:
    hashed1=i
f.close()

hashed=b""hashed1""

f1=open(""salty.txt"",""r"")
for j in f1:
    salt=j
f1.close()

if bcrypt.hashpw(password, hashed) == hashed:
    print(""It Matches"")
else:
    print(""It Does not Match)

if i try to use the second to enter the password and compare it tho the other it tells me this:
ValueError: Invalid salt

","It looks like in the second case you are passing the hashpw function the string literal hashed1. This is incorrect usage. As far as I understand it, you should be passing the function the users hashed password, as bcrypt will attach the salt as part of the hash.
It looks like you may be trying to convert the hash from a unicode string to a bytestring incorrectly. I see you have hashed=b""hashed1"", which is assigning a literal bytestring to the variable hashed try hashed = bytes(hashed1) instead.
","185","<python><python-3.x><hash><passwords><salt>","0","0","1","2015-07-05 22:07:17","","0","","","","","2015-07-05 20:55:06",""
"3560026","password salting - never matches!","I'm having difficulty figuring out why user password hashing is not working.
The way I do this is the normal method, where upon registration I create a randam salt and combine with password and store, but when I try to match the passwords for the login, they're failing :(
<?php
class Model_users extends ModelType_DatabasePDO
{

 //...

 public function CheckCredentials($username,$password)
 {
  $statement = $this->prepare('SELECT user_id,user_salt,user_password FROM users WHERE user_username = :u');
  $statement->bindValue(':u',$username);

  if($statement->execute())
  {
   $user_data = $statement->fetch(PDO::FETCH_OBJ);

   //Create a new hash with salt
   $combined = $this->CombineHash($password,$user_data->user_salt);

   //Check the combination is correct!
   if($combined == $user_data->user_password)
   {
    return true;
   }

   var_dump($user_data->user_salt,$combined);
   return false;
  }
  return false;
 }

 //...

 public function AddUser($userdata)
 {
  if($userdata['username'] && $userdata['password'] && $userdata['email'] && $userdata['nickname'])
  {
   $statement = $this->prepare('INSERT INTO users (user_username,user_password,user_salt,user_email,user_nickname) VALUES (:username,:password,:salt,:email,:nickname)');

   //Generate hashes
   $salt = $this->GenerateSalt();
   $password = $this->CombineHash($userdate['password'],$salt);

   //Generate Data block for insert
   $data = array(
    ':username' => $userdata['username'],
    ':password' => $password,
    ':salt'  => $salt,
    ':email' => $userdata['email'],
    ':nickname' => $userdata['nickname']
   );

   if($statement->execute($data))
   {
    return true;
   }
  }
  return false;
 }

 private function GenerateSalt()
 {
  //Create a random md5 string:
  $first = md5( rand(0,100) . time() . microtime() . uniqid() );
  $second = md5( rand(0,100) . time() . microtime() . uniqid() );

  for($i=0;$i<=32;$i++)
  {
   $string = '';
   if($i % 2)
   {
    $string .= $first[$i];
   }else
   {
    $string .= $second[$i];
   }
  }
  return md5($string);
 }

 private function CombineHash($password,$hash)
 {
  return md5($password . $hash);
 }
}
?>

All variables passed into the methods are raw and not salted or encrypted but merely validated :/
Regards
","Your code appears to have a typo

 $password = $this->CombineHash($userdate['password'],$salt);

$userdate needs to be $userdata  (the e needs to be an a).
","185","<php><login><registration><salt>","-1","8","1","2010-08-24 19:04:59","3560061","0","","92313","","2010-08-24 19:04:59","2010-08-24 18:59:05","2013-03-15 06:30:03"
"49707481","Comparing hashed passwords with PHP in wordpress","I am building a external application for which user login credentials will be taken from WordPress site database table.In the table i can see that passwords are being hashed and resemble to something like this 

$P$9jWFhEPMfI.KPByiNO9IyUzSTG7EZK0

My requirement is to check this password against the plain password in login.I am using a function $hashed=wp_hash_password($password); in order to generate a hash and compare it against the one stored in db.But this generated a random hash every time for the same password.So how can i compare the two passwords?Also i can see in my wp_config different salt values are defined like AUTH_SALT,SECURE_AUTH_SALT,LOGGED_IN_SALT,NONCE_SALT
Please suggest a way to compare the hashed passwords.Do we need to use any of these salts to get it right.If so please suggest some sample code
Thanks :-)
","You should use wp_check_password( string $password, string $hash, string|int $user_id= '' )

$password (string) (Required) Plaintext user's password
$hash (string) (Required) Hash of the user's password to check
  against.
$user_id (string|int) (Optional) User ID.

https://developer.wordpress.org/reference/functions/wp_check_password/
","185","<php><wordpress><md5><salt><password-hash>","1","3","1","2019-05-28 20:45:11","","0","","2224584","","2019-05-28 20:45:11","2018-04-07 12:40:59",""
"4800905","Password + Salt + SecretSauce? Helpful, or just a little obscurity?","Standard password security involves generating a random salt for each user, somehow combining that salt with their password and hashing them together, and then storing both the hash and salt in the database.
What if, instead of just hash($salt . $password), you added in another passphrase as well, stored only in your source code or in a server config file:
$secret_sauce = 'tehB%l1yG*@t$G2uFf'; // perhaps imported from config file
$hash = hash($salt . $secret_sauce . $password);

Does this add any added benefit, or is it just a thin layer of security by obscurity applied to the top?
","For password files it would be just a little obscurity added on top.
However, this scheme is called a ""keyed hash"" and can be used for symmetric (shared-secret) signatures: if you have such a hash, and the input data, then you can be sure that the signature was created by someone who also knows the secret extra bit. Of course, unlike a public-key signature, you cannot verify that without also knowing the secret key.
","184","<hash><password-protection><salt>","1","2","2","2011-01-26 02:34:57","4800934","0","","","","","2011-01-26 02:24:13",""
"4800905","Password + Salt + SecretSauce? Helpful, or just a little obscurity?","Standard password security involves generating a random salt for each user, somehow combining that salt with their password and hashing them together, and then storing both the hash and salt in the database.
What if, instead of just hash($salt . $password), you added in another passphrase as well, stored only in your source code or in a server config file:
$secret_sauce = 'tehB%l1yG*@t$G2uFf'; // perhaps imported from config file
$hash = hash($salt . $secret_sauce . $password);

Does this add any added benefit, or is it just a thin layer of security by obscurity applied to the top?
","I'm having trouble tracking down the paper I read a few years ago that suggested it was easy to generate thousands of hash results by partially computing portions of the hash. (As in, by beginning to compute the hash for ""foo"", you could more easily generate hashes for ""foo1"", ""foo2"", ""foo3"", ""foo4"", and so on, much cheaper than generating each one individually.)
I think it would argue for salting both before and after a password.
But keep in mind that if the password database can be read by an attacker, they can probably read the salt out of your binary or config file too; it depends on your design.
","184","<hash><password-protection><salt>","1","0","2","2011-01-26 02:34:57","4800934","0","","","","","2011-01-26 02:24:13",""
"17689592","salt two-character string 12 bits","Hi everyone my question as dumb as it seems is the following:
Using the man crypt()
salt is a two-character string chosen from the set [a–zA–Z0–9./] and it's a 12 bits 
how is that since it's a two-character string it should be a 16 bits hence a char size is a byte ??
","If you count total number of characters in the set you'll see there are 64 (2^6) elements: 26 latin uppercase letters, 26 lowercase, 10 digits plus 2 extra characters: period and slash.
Two 6-bit characters -- 12 bits.
Evidently, crypt() must be mapping salt characters to bit sequences using something-else-than-ASCII (for user convenience, I suspect).
","183","<salt><crypt>","-1","1","1","2013-07-20 12:48:29","17689714","0","","684368","","2013-07-20 12:48:29","2013-07-17 01:24:55",""
"17571398","WSO2 ESB Using user-data in other application","I'm working at an projekt with the wso2 esb.
For another application I would like to use the users from the wso2 esb database.
Is this possible? Because I think they use a salt for the sha256 password hash. Is there a way to use the data for authentification in another application without using the WSO2 IS?

I tried to use this for authentification:
http://nuwanwimalasekara.blogspot.de/2013/02/invoking-wso2-carbon-admin-services.html
I copied the class LoginAdminServiceClient like in the blog. 
For getting an object of this class i used the following code:
package wso2conn;

import java.rmi.RemoteException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.axis2.AxisFault;
import org.wso2.carbon.authenticator.stub.LoginAuthenticationExceptionException;

public class WSO2Conn {
    public static void main(String[] args) throws AxisFault {
        String authenticate = null;
        try {
            // TODO code application logic here
            LoginAdminServiceClient login = new LoginAdminServiceClient(""https://localhost:9443"");
            authenticate = login.authenticate(""admin"", ""admin"");
        } catch (RemoteException ex) {
            Logger.getLogger(WSO2Conn.class.getName()).log(Level.SEVERE, null, ex);
        } catch (LoginAuthenticationExceptionException ex) {
            Logger.getLogger(WSO2Conn.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println(""Session: "" + authenticate);
    }
}

Imported Libraries:

org.wso2.carbon.authenticator.proxy_4.0.2.jar
org.wso2.carbon.authenticator.stub_4.0.0.jar
axis2_1.6.1.wso2v7.jar
axis2-json_1.6.1.wso2v7.jar
axis2-transport-jms_1.1.0.wso2v7.jar
org.wso2.carbon.service.mgt.stub_4.0.0.jar

If I'm running this project I get the following error:
Exception in thread ""main"" java.lang.NoClassDefFoundError: org/apache/axiom/om/OMFactory
    at wso2conn.LoginAdminServiceClient.<init>(LoginAdminServiceClient.java:18)
    at wso2conn.WSO2Conn.main(WSO2Conn.java:26)
Caused by: java.lang.ClassNotFoundException: org.apache.axiom.om.OMFactory
    at java.net.URLClassLoader$1.run(URLClassLoader.java:366)
    at java.net.URLClassLoader$1.run(URLClassLoader.java:355)
    at java.security.AccessController.doPrivileged(Native Method)
    at java.net.URLClassLoader.findClass(URLClassLoader.java:354)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:423)
    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:356)
    ... 2 more
Java Result: 1

Maybe there are some Libraries missing or the backEndUrl is wrong?
","You can try using AuthenticationAdminStub libraries for this purpose.
{..
authenticationAdminStub.login(userName, password, ""localhost"")
...
}
As explain in below blog.Though below blog explain how to use admin services, you can use logic part for your reference.
http://nuwanwimalasekara.blogspot.com/2013/02/invoking-wso2-carbon-admin-services.html
","183","<passwords><wso2><esb><salt>","0","0","1","2013-07-11 11:00:07","","0","","2270155","","2013-07-11 11:00:07","2013-07-10 13:04:51",""
"15184597","Migrate password Symfony2 to CodeIgniter","I am migrating a project in Symfony to CodeIgniter. I have a problem with password user: I don't know how to create the same password in Codeigniter.
Example with the password is : aze. In the database, I have:
Password : 284261c499a22c0de073b642f2d55b0684c86555
Salt : iudcjri8lnkgosgo0k00skwo8cwssgc
Symfony security config:
security:
    encoders:
        Symfony\Component\Security\Core\User\User: plaintext
        Kalisteco\AdminSpaceBundle\Entity\User:
            algorithm: sha1
            encode_as_base64: false
            iterations: 1

    role_hierarchy:
        ROLE_ADMIN:       ROLE_USER
        ROLE_SUPER_ADMIN: [ROLE_USER, ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]

I tried with this code:
$password = ""aze""
$salt = ""iudcjri8lnkgosgo0k00skwo8cwssgc"";
$str = do_hash($str.$salt, 'sha1'); // Result : f767fd2c23e045f24e8dc065814dea4242591642
$str = do_hash($salt.$str, 'sha1'); // Result : de47f71660f92fbfc583b4dd779f28c35c38e785

","Symfony surrounds the salt with { and }:
$salted = $password.'{'.$salt.'}';

","183","<codeigniter><symfony><encryption><sha1><salt>","1","2","1","2013-03-03 13:14:35","15185031","3","","472495","","2013-03-03 13:14:35","2013-03-03 10:13:30",""
"46195979","Saltstack: Beacon which reacts on pillars changes","I have a salstack setup with 1 master and about 200 minions. Minions have assigned different pillars (file based).
I want to achieve following: If there are any changes to a pillar for a minion or group of minions, a event will be send out with minionID and changed pillar to which I can react.
My first idea was, do have beacon which watches file changes in pillar files on the master. But this will not give me the affected minions. Next idea was refreshing pillars from the minion periodically and send an event on changes, but this periodic pull can create a lot of load is not what i expect from a event driven architecture.
So my question is: What is the best way to achieve this? Are there common ways to do that and I have maybe overlooked some module/feature?
","I would consider setting up a baecon
Baecon
to your salt-master minion that watches your pillar folder and sends an event.
Then you can configure a Reactor to refresh pillars with the module 
Refresh pillars
If you have some hierarchy of pillars based on minion id then you could also get the minion id based on the folder/file that has changed from the reactor.
In general, pillars are read/rendered each time they are requested and they are not cached or watched by Saltstack.
","181","<python><salt><salt-stack>","0","0","1","2017-12-28 14:33:53","","0","","7677412","","2017-09-14 19:14:54","2017-09-13 11:10:55",""
"33655413","Loop through the servers that are connected to my salt master","Im looking for a way that I can loop through the servers that are connected to my master.  is there a way that I can do that ?  
I'd like to loop through my servers after the master has accepted a minions key.  Then I can check its IP and add it to the caching pool.  if I'm going about this wrong please feel free to correct me.
Thanks. 
","You'll need to use Salt Mine to collect the minion's IP addresses. This link has an example for a load balancer configuration.
If you expect IP addresses to change regularly, or if you plan to scale your infrastructure with IP addresses coming and going regularly (ephemeral nodes), Salt will recommend Salt Reactor, but I think Consul (see below) might be a lot simpler to setup depending your scenario. 
For Consul you will install an agent on each node and register each node's services locally in a straight-forward Salt manner. Consul can provide you DNS resolving for the nodes and services. With Consul Template it will re-write your configurations and reload your services once IP addresses change or nodes are coming up. You will need to have a Consul master to make this work. The Consul online documentation is quite good. I have also written a Consul/Salt/Cloud Tutorial that might be interesting for you to read.
","181","<loops><salt><master>","0","0","1","2015-11-15 20:22:23","","0","","","","","2015-11-11 16:42:16",""
"31544433","How do I configure Jasypt to use a ZeroSaltGenerator?","I'm using Grails 1.3.7 with Jasypt and I have the below in my Config.groovy:
jasypt {
    algorithm = ""PBEWithMD5AndTripleDES""
    password = ""password""
    keyObtentionIterations = 1
    saltSizeBytes = 0
}

How can I set the salt property to ZeroSaltGenerator?
","In Config.groovy, change your config for jasypt to:
jasypt {
    algorithm = ""PBEWithMD5AndTripleDES""
    password = ""password""
    keyObtentionIterations = 1
    saltGenerator = new org.jasypt.salt.ZeroSaltGenerator()
}

","180","<grails><salt><jasypt>","0","1","2","2016-03-01 11:05:52","","0","1","487033","","2015-07-21 17:42:28","2015-07-21 16:17:28",""
"31544433","How do I configure Jasypt to use a ZeroSaltGenerator?","I'm using Grails 1.3.7 with Jasypt and I have the below in my Config.groovy:
jasypt {
    algorithm = ""PBEWithMD5AndTripleDES""
    password = ""password""
    keyObtentionIterations = 1
    saltSizeBytes = 0
}

How can I set the salt property to ZeroSaltGenerator?
","If you want to use ZeroSaltGenerator then you have to make following changes:
Inside your config.groovy:
jasypt {
    encryptorRegisteredName = ""gormEncryptor""
}

And in your resources.groovy:
beans = {
    hibernateStringEncryptor(HibernatePBEStringEncryptor) { 
        registeredName = ""gormEncryptor"" 
        algorithm = ""PBEWithMD5AndTripleDES""            
        password = ""password""
        keyObtentionIterations = 1
        saltGenerator = new org.jasypt.salt.ZeroSaltGenerator()
    }
}

And it will generate the same encrypted values everytime.
","180","<grails><salt><jasypt>","0","0","2","2016-03-01 11:05:52","","0","1","487033","","2015-07-21 17:42:28","2015-07-21 16:17:28",""
"10271772","Store hash value","Is there a way to store the salt for this hash method? I dont know how to do it?
Thanks.
    public void AddStudent(Student student)
    { 
        student.StudentID = (++eCount).ToString();
        student.Salt = GenerateSalt();
        byte[] passwordHash = Hash(student.Password, student.Salt);
        student.Password = Convert.ToBase64String(passwordHash);
        student.TimeAdded = DateTime.Now;
        students.Add(student);
    }

","This should be along the lines of what you want. Not sure where these Students are being stored, but it will likely need to be changed, too.
[DataMember(Name = ""StudentID"")]
public string StudentID { get; set; }
[DataMember(Name = ""FirstName"")]
public string FirstName { get; set; }
[DataMember(Name = ""LastName"")]
public string LastName { get; set; }
[DataMember(Name = ""Password"")]
public string Password;
[DataMember(Name = ""Salt"")]
public byte[] Salt;

protected RNGCryptoServiceProvider random = new RNGCryptoServiceProvider();

public byte[] GenerateSalt()
{
    byte[] salt = new byte[10];
    random.GetNonZeroBytes(salt);
    return salt;
} 

public static byte[] Hash(string value, byte[] salt)
{
    return Hash(Encoding.UTF8.GetBytes(value), salt);
}

public static byte[] Hash(byte[] value, byte[] salt)
{
    byte[] saltedValue = value.Concat(salt).ToArray();

    return new SHA256Managed().ComputeHash(saltedValue);
}

public void AddStudent(Student student)
{
    byte[] salt = GenerateSalt();

    student.StudentID = (++eCount).ToString();
    byte[] passwordHash = Hash(student.Password, salt);
    student.Salt = salt;
    student.Password = Convert.ToBase64String(passwordHash);
    student.TimeAdded = DateTime.Now;
    students.Add(student);
}

","179","<c#><linq><authentication><hash><salt>","0","1","1","2012-04-24 12:09:23","10272310","8","","997939","","2012-04-24 12:09:23","2012-04-22 20:19:46",""
"42952815","How to place a file on salt master via salt-api","I want to place a file a file on salt-master via salt-api. I have configured salt-api using rest cherrypy and configured a custom hook for it. I wanted to explore the use-case where we can transfer the file first to salt-master and secondly distribute it to minions. I'm able to achieve the second part but not been able to post data file to the API.
","Here is one way to do it using file.write execution module.
First login and save the token to a cookie file (I had to change eauth to ldap, auto didn't work for some reason):
curl -sSk http://localhost:8000/login \
      -c ~/cookies.txt \
      -H 'Accept: application/x-yaml' \
      -d username=USERNAME\
      -d password=PASSWORD \
      -d eauth=auto

Now run a job to create a file on the salt-master (assuming your salt-master is also running a salt-minion):
curl -sSk http://localhost:8000 \
      -b ~/cookies.txt \
      -H 'Accept: application/x-yaml' \
      -d client=local \
      -d tgt='saltmaster' \
      -d fun=file.write \
      -d arg='/tmp/somefile.txt' \
      -d arg='This is some example text

with newlines

A
B
C'

Note that the spacing used in your command will affect how the lines will show up in the file, with the example above is gives the most aesthetically pleasing result.
","179","<salt><salt-stack><salt-creation>","0","0","1","2017-05-24 11:51:57","","0","","","","","2017-03-22 13:18:18",""
"28674246","JS Twin-Bcrypt salt pattern","I've been exploring Twin-Bcrypt JavaScript library, and found a strange thing. At one moment, I've made my own salt on server side with PHP base64_encode(openssl_random_pseudo_bytes(16)) and used it in TwinBcrypt.hash() function, which responded that salt is invalid because of the regular pattern mismatch in library. So, the pattern is:
var SALT_PATTERN = /^\$2[ay]\$(0[4-9]|[12][0-9]|3[01])\$[.\/A-Za-z0-9]{21}[.Oeu]/;

and it looks fine for my salt, except for one thing - what the hell is this - [.Oeu]?
My first question is, why they expect from salt to end with a dot, or O, or e, or u? As far as I know openssl_random_pseudo_bytes() generates secure CSPRNG, but because of the pattern JS library does not want to accept it.
Second question - is there any security reason for the salt to end with /[.Oeu]/ pattern?
I would be very grateful for any help, because there's no much info about it.
","I don't know bcrypt really well, but it appears that Twin-Bcrypt expects the salt parameter to include the full type-tag (2a/2y/2x), cost parameter, and actual cryptographic salt value. (I believe this is done to match the expectations of other libraries.) The cryptographic salt value is only the final 22 characters of the salt parameter string, which represent a 128-bit value.
To actually solve your problem, you'll need to do two things:

Prefix your salt with $2y$10$ so that it has a type-tag and a cost parameter.
Map your PHP base64_encode result onto bcrypt's nonstandard base64 values. For reference, the values are:
Standard: ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
bcrypt:   ./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789

If you simply want to make a standard base64 into a brcypt-base64 string, you can replace all + with ., but that will result in a different value (because standard + is a 62 while . is a 0, and all of the other values are offset as well). If you want a brypt string with the same value as the original, you'll need to replace each character with its bcrypt equivalent.
You may also need to eliminate trailing = from the standard string, if any exist.


Extra information: Why must the salt end with [.Oeu]?
A salt in bcrypt is 128 bits. Each base64 character communicates 6 bits of information. That means that 21 base64 characters can evenly communicate 126 bits. The final 2 bits must be encoded in a final 22nd character. Since that character is defined by only 2 bits, it can only have 4 possible values.
When we examine the base64 character pool for brypt, we see:
./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789

Counting from zero, we see that those values appear at indicies:
. => 0  = 000000
O => 16 = 010000 
e => 32 = 100000
u => 48 = 110000

So those final two bits are setting the high-end bits of the final character.
","179","<javascript><regex><salt><bcrypt>","5","4","1","2015-02-23 13:54:52","28675384","0","1","3042856","","2015-02-23 13:01:24","2015-02-23 12:51:27",""
"55185684","What's the difference between state.sls and state.apply?","What's the difference between state.apply and state.sls? When should I use state.apply vs state.sls?
","state.sls <state_file> will execute the states in a specific file.
state.highstate will execute the highstate configured by top.sls
state.apply will do a state.highstate if no arguments are given and a state.sls <state_file> when a  argument is given.
You can look at state.apply as an easy way of using states command.
","178","<python><salt-stack><salt>","1","2","1","2019-03-15 15:31:15","55185967","0","","","","","2019-03-15 15:16:47",""
"11027088","Making My PHP Site Hack Resistant","I'm making a custom CMS for a website I've been planning and security is a big concern. 
I probably lack the expertise to fend off a full scale hacker social engineering his way into the server room but this is a list of what I've compiled from here and other sites to prevent hacking attempts please comment if anything here is lacking or if further steps should be taken
STAGE 1

using PDO to make database calls and htaccess to rewrite urls as to conceal things such as
index.php?get=variable now is myurl.com/get/variable
and aforementioned variable is passed through PDO as outlined here 
moving database queries and functions into folders that deny HTTP access and lock certain admin functions behind a server usergroup which only the few will be trusted with access to.
All passwords are encrypted and will never be decrypted for plain text as I have no sane reason to need to read other peoples passwords.
Login and user creation stop gaped by an IP address auto lockout based on X amount of attempts and reCapatcha
Stage 2

these steps find a home mostly because I intend to one day distribute this software and don't want egg on my face
User tracking to prevent finding files and logging intrusion attempts
IP tracking to prevent XXS hijacking and possible behavior monitoring for similar reasons
I'd think of more but my brain is now jumping to requiring two stage facial recognition and a DB of state ID's 
","Unless you have a lot of time on your hands and a team of experienced people, your CMS will never be up to par with ones like Joomla, Drupal, or Wordpress. 
Since they've been around for a while, they've been weatherproofed, but even then hackers find exploits.
Not trying to discourage you, but if security is a big concern, I would just go with a well established CMS. More specifically I would use Wordpress for simplicity. It's also very easy to create custom themes and create custom functions and plugins.
Like PST mentioned above, no need to reinvent the wheel
","176","<php><mysql><content-management-system><pdo><salt>","0","5","2","2012-06-14 05:47:14","","7","1","-1","user212218","2017-05-23 10:24:32","2012-06-14 05:22:29","2012-06-14 09:11:19"
"11027088","Making My PHP Site Hack Resistant","I'm making a custom CMS for a website I've been planning and security is a big concern. 
I probably lack the expertise to fend off a full scale hacker social engineering his way into the server room but this is a list of what I've compiled from here and other sites to prevent hacking attempts please comment if anything here is lacking or if further steps should be taken
STAGE 1

using PDO to make database calls and htaccess to rewrite urls as to conceal things such as
index.php?get=variable now is myurl.com/get/variable
and aforementioned variable is passed through PDO as outlined here 
moving database queries and functions into folders that deny HTTP access and lock certain admin functions behind a server usergroup which only the few will be trusted with access to.
All passwords are encrypted and will never be decrypted for plain text as I have no sane reason to need to read other peoples passwords.
Login and user creation stop gaped by an IP address auto lockout based on X amount of attempts and reCapatcha
Stage 2

these steps find a home mostly because I intend to one day distribute this software and don't want egg on my face
User tracking to prevent finding files and logging intrusion attempts
IP tracking to prevent XXS hijacking and possible behavior monitoring for similar reasons
I'd think of more but my brain is now jumping to requiring two stage facial recognition and a DB of state ID's 
","I think it's admirable that you're thinking big and want an accomplishment under your belt that you've coded and that you're proud of. I think we all would like to code something really solid that we can point to and say ""I did that"" and feel a real sense of accomplishment.
I won't tell you that it can't be done, but I well agree with the other comments that security is a huge, huge, huge topic and you've only scraped the very surface here. You have some good items in your list of steps, but web application security goes well beyond authentication and intrusion. From the steps you've written, it seems like you have an understanding of some of the basics of application security.
With that said, a really thorough and comprehensive security professional needs to consider:
* what version of apache do you recommend people deploy on? what are the known issues with the versions of mod_php or mod_fcgid that you'll recommend?
* what version of PHP will you run? are you aware of any outstanding vulnerabilities with the version of the interpreter that you'll code in?
* how will you recommend that people harden the server? e.g. besides having apache and mysql running, what other services need to be active? will you allow SSH to the server? if the web server and db are on two different machines, how do you ensure that only the web server can talk to the db server?
Some of the other things you mentioned like intrusion detection, facial recognition, etc. are extremely complex topics and there are whole companies building products just around each topic area. 
My point is: it is basically impossible for one person to be able to think of every possible security issue that could come up and - even if you could think of all of them today - tomorrow someone is likely to discover a security issue that no-one has heard of before.
So, it's good to be ambitious, but it's also good to know what you're dealing with before you get in over your head. (That's another trait of a good security professional, too).
","176","<php><mysql><content-management-system><pdo><salt>","0","0","2","2012-06-14 05:47:14","","7","1","-1","user212218","2017-05-23 10:24:32","2012-06-14 05:22:29","2012-06-14 09:11:19"
"15176293","How to Use Salt Generated in PHP in Grails Project","I have a PHP application I'm converting to Grails. The PHP application used a salt-mechanism to encode the passwords of all its users. 
When moving the salt and salted password into the (custom) user database in Grails, I am unable to log in while in my Grails application.
Of course, I'm using the Spring Security Core plugin, and I've added the salt to the User domain class as specified in this tutorial, which I found here: Grails with Spring Security Plugin and Salted Passwords
After running through the tutorial, I am able to add a user and successfully log in with that user:
[BootStrap.groovy]:
new User( username:""user"", email:""user@place.com"", password:""password"", enabled:true).save(flush: true)

(you might also notice the addition of email, which I added using this tutorial)
But I am unable to login using any of the users that were transferred over from the PHP project. If it's any help, here's how their passwords were encoded:
$password = ""password"";
$salt = bin2hex( openssl_random_pseudo_bytes( 32 ) );
$passwordSalted = hash( ""sha256"", $salt . $password );

","Looks like Burt nailed it with his suggestion here: http://grails.1312388.n4.nabble.com/Spring-Security-Core-plugin-and-multiple-salt-sources-tc3638236.html#a3646256
Basically, I already had my own salt provided from the tutorials I mentioned above, I just needed to combine it with the password using a custom password encoder.
public class CustomPasswordEncoder extends MessageDigestPasswordEncoder {

    public CustomPasswordEncoder() {
        super(""SHA-256"");
    }

    @Override
    protected String mergePasswordAndSalt(String password, Object salt, boolean strict) {
        if (password == null) {
            password = """";
        }

        if (salt == null || """".equals(salt)) {
            return password;
        }

        return salt + password;
    }
}

","175","<php><grails><spring-security><salt>","1","1","1","2013-03-02 17:08:32","15176604","0","1","-1","","2017-05-23 12:27:14","2013-03-02 15:45:48",""
"25704757","Salting password","I am trying to use salt to hash my password. However, the command prompt(using Python)
only truncates to 8 password characters and 2 salt characters. How to mitigate this issue?
For instance,
python -c ""import crypt; print crypt.crypt('password', '\$6\$123456789012345678901234567890')""

python -c ""import crypt; print crypt.crypt('password', '\$6\$12')""

Outputs same hash. 
***Edit
For instance,
 >>> import crypt

 >>> crypt.crypt('password', '$6$1234')
 '$6FMi11BJFsAc'
 >>> crypt.crypt('password', '$6$12345678')
 '$6FMi11BJFsAc'
 >>> crypt.crypt('passwordddd', '$6$1234')
 '$6FMi11BJFsAc'

","The version you have seems to work.  I'm not sure what your issue is.  Possibly your shell expanding $ into the variable $12 (which is probably empty as is $1234567890, which would result both having the same hash).
The versions you have seem to work for me in my shell.
$ python -c ""import crypt; print crypt.crypt('password', '\$6\$123456789012345678901234567890')""
$6$1234567890123456$YfUD.j5zIFtfV6VgikPof2dzCCCZwL2YDraBX4HXi.J7iNq24667epYUCZGxExqOmHTnPWybzfYaynT29vKXJ/

$ python -c ""import crypt; print crypt.crypt('password', '\$6\$12')""
$6$12$EmCj0n6cuRQPJkS9i8q9F9JzlbErFPXFeUH7zwAT1yfBuwP7L60bNzWNvizJifxL6Dsd2mLIOFfcHyCbRoYSd0

It's clearest to just test in python (or ipython):
In [1]: import crypt

In [2]: crypt.crypt('password', '$6$1234')
Out[2]: '$6$1234$uFHFs4h9DJ5rE/WaDk5aY3NJnYNKmONANVjomZwpeX8nQNvB./mwRpxs.n1S2nemH.cUtLYJWSbk/cQQ4Hd2N0'

In [3]: crypt.crypt('password', '$6$12345678')
Out[3]: '$6$12345678$I8tr4xFAC6/TtjYWdp0LWEjQre2LcYm2jdSMNLQDIyqRv.cKo7KMD5/HpzVVFKpUQlIekr/Vw.OdImtRM85fg/'

Or from the linux command line:
$ python -c 'import crypt; print crypt.crypt(""password"", ""$6$12345678"")'
$6$12345678$I8tr4xFAC6/TtjYWdp0LWEjQre2LcYm2jdSMNLQDIyqRv.cKo7KMD5/HpzVVFKpUQlIekr/Vw.OdImtRM85fg/

$ python -c 'import crypt; print crypt.crypt(""password"", ""$6$12"")'
$6$12$EmCj0n6cuRQPJkS9i8q9F9JzlbErFPXFeUH7zwAT1yfBuwP7L60bNzWNvizJifxL6Dsd2mLIOFfcHyCbRoYSd0

","172","<python><hash><passwords><salt>","0","1","1","2014-09-06 23:29:52","","3","","815724","","2014-09-06 23:29:52","2014-09-05 20:41:25",""
"4674547","Questions about salting passwords","Okay. Say for example that i set the salt for a password to ""hello."" Can't someone just look at the source code and discover the salt? If so, how would I hide it? Thanks.
","Salts are are usually stored in plain text alongside the password hash. The main reason they are there is to make it more difficult to use precomputed rainbow tables and more difficult to perform a dictionary attack on all the passwords in the database.
You should also use a different randomly generated salt for each password, rather than a single salt for your entire application. This means that each password must be cracked separately.
","172","<php><mysql><hash><salt>","1","7","5","2011-01-12 22:35:09","4674571","5","","","","","2011-01-12 22:07:26",""
"4674547","Questions about salting passwords","Okay. Say for example that i set the salt for a password to ""hello."" Can't someone just look at the source code and discover the salt? If so, how would I hide it? Thanks.
","Salts are best when they are dynamic (say the member's join date).  Even if the attacker knows the way you compute the hash, they have to brute force each salted and hashed password -- which takes a lot of time, for (in general) little reward.
That being said, if the attacker is looking at your code server-side, you already have a much larger problem.
","172","<php><mysql><hash><salt>","1","3","5","2011-01-12 22:35:09","4674571","5","","","","","2011-01-12 22:07:26",""
"4674547","Questions about salting passwords","Okay. Say for example that i set the salt for a password to ""hello."" Can't someone just look at the source code and discover the salt? If so, how would I hide it? Thanks.
","Hopefully, your ""source code"" is running on a web server, and not on the client side (javascript) where anybody can see it.
","172","<php><mysql><hash><salt>","1","0","5","2011-01-12 22:35:09","4674571","5","","","","","2011-01-12 22:07:26",""
"4674547","Questions about salting passwords","Okay. Say for example that i set the salt for a password to ""hello."" Can't someone just look at the source code and discover the salt? If so, how would I hide it? Thanks.
","First of all: Security is HARD. Don't try and do it yourself, because you will screw it up. Use a well-established library to handle user authentication.
Secondly, you seem to misunderstand the purpose of a salt. The salt is just there to prevent easy reversing of password hashes - there should be a unique salt for each user, but it's fine to store the salt in the same place as the hashed password.
","172","<php><mysql><hash><salt>","1","5","5","2011-01-12 22:35:09","4674571","5","","","","","2011-01-12 22:07:26",""
"4674547","Questions about salting passwords","Okay. Say for example that i set the salt for a password to ""hello."" Can't someone just look at the source code and discover the salt? If so, how would I hide it? Thanks.
","1) Don't use the same salt for multiple accounts. If you can't show your source-code and trust that your passwords are still secure, you've done it wrong.
2) PKCS #5 v2.1, section 4
","172","<php><mysql><hash><salt>","1","1","5","2011-01-12 22:35:09","4674571","5","","","","","2011-01-12 22:07:26",""
"10925465","Same Salt Or Different Salts","Here's my question: In your experience, is it safer to have a single salt for every hash stored in the PHP file doing the hashing, or is it better to have a different salt for every hashed object and store it in the database with that object?
","The salt only makes sense if it is different for each hashed string.
So, yes, create additional column and put random salt there
","172","<php><mysql><hash><salt>","2","4","4","2012-06-07 04:45:40","10925472","1","","","","","2012-06-07 03:57:07",""
"10925465","Same Salt Or Different Salts","Here's my question: In your experience, is it safer to have a single salt for every hash stored in the PHP file doing the hashing, or is it better to have a different salt for every hashed object and store it in the database with that object?
","A different salt for each hash; otherwise the hashed object becomes vulnerable to a brute force attack.
","172","<php><mysql><hash><salt>","2","0","4","2012-06-07 04:45:40","10925472","1","","","","","2012-06-07 03:57:07",""
"10925465","Same Salt Or Different Salts","Here's my question: In your experience, is it safer to have a single salt for every hash stored in the PHP file doing the hashing, or is it better to have a different salt for every hashed object and store it in the database with that object?
","The only thing a salt that's stored in the database does is defend against rainbow tables
Unless it's open source software, It's more secure to have a single salt in the PHP file.
Many developers will disagree with me, but for hackers it's a no brainer
If the salt is stored inside the PHP file, the hacker will have to get file access to see the salt AND it will still defend against rainbow tables...
In most cases (subscribe to packet storm security if you don't believe me) vulnerabilities are through SQL injection / XSS (cross site scripting), big attacks on Wordpress from Anonymous, etc... ALL SQL INJECTION. And it's very rare that there is a vulnerability that will allow an attacker to see source code using an RFI (remote file inclusion) or something similar.
Think about it, if someone see's your database through SQL Injection, etc... they have database access, so they will also have your salt too, so if it's random, it will not matter.
","172","<php><mysql><hash><salt>","2","-6","4","2012-06-07 04:45:40","10925472","1","","","","","2012-06-07 03:57:07",""
"10925465","Same Salt Or Different Salts","Here's my question: In your experience, is it safer to have a single salt for every hash stored in the PHP file doing the hashing, or is it better to have a different salt for every hashed object and store it in the database with that object?
","If you’re storing passwords in a database, you need to mix in something that varies per entry so that you cannot easily find matching passwords within the database. You can use a random salt, or you can just include the username (if it's immutable) or some other immutable unique field.
If you use something like a username then you should also do something that’s unique to your implementation since there are probably other sites using the same algorithm and therefore there’s a chance of spotting matches. Strictly speaking, it doesn’t have to be a salt that you include in the hash, it could just be a difference in the way that your algorithm works, but it’s usually simplest to just add a global salt. If you’re using a per entry salt, then there’s no need to add another global salt.
With these kinds of issues, it's usually simplest to think of the kinds of attacks that hackers might use. Remember, you’re not actually trying to safeguard your data (since your database has been compromised), you’re actually trying to stop hackers from taking the credentials used on your site and using them on other sites.
","172","<php><mysql><hash><salt>","2","0","4","2012-06-07 04:45:40","10925472","1","","","","","2012-06-07 03:57:07",""
"2817454","Encrypt hashed passwords?","Is it common sense to encrypt hashed&salted passwords that are stored in a database with a strong encryption (AES 192 or so) or are we just aiming for the stars?
Of course, the encryption key will not be in the database itself, but will be kept at a safe place.
Thanks a lot!
","There is no need to encrypt a salted and hashed password.
When the password is salted and hashed with a good algorithm encrypting it will not improve the security.
When you encrypt it you have to manage the key in some way, that will just complicate things.
Use a cryptographic generated salt one for each password, and use a good hashing algorithm.
For more information see this question: Best way to store password in database
","172","<database><encryption><hash><salt>","0","6","3","2010-05-12 15:10:24","2817830","0","","","","","2010-05-12 09:25:04",""
"2817454","Encrypt hashed passwords?","Is it common sense to encrypt hashed&salted passwords that are stored in a database with a strong encryption (AES 192 or so) or are we just aiming for the stars?
Of course, the encryption key will not be in the database itself, but will be kept at a safe place.
Thanks a lot!
","I'm not a security expert and I don't know what kind of application you are running or what kind of setup you have.  But if I were making a regular ol' web app, I would just go with salted hash.
You're going to store the key (or public key if you're using asymmetric key encryption as you could encrypt the hash of password user provides and compare that to the value from the database) on the application server anyway.
If you're mainly worried about someone breaking into your database server, is it any harder to break into the application server?
If someone tries a dictionary attack through the app server, it's going to take the same number of tries either way.  You'll just need to detect and block that.
The only situation in which encrypting the salted hashes is useful is if attackers can get their hands on the encrypted values but not the key.  I guess it's up to you to decide if that's what you want for your system.
","172","<database><encryption><hash><salt>","0","2","3","2010-05-12 15:10:24","2817830","0","","","","","2010-05-12 09:25:04",""
"2817454","Encrypt hashed passwords?","Is it common sense to encrypt hashed&salted passwords that are stored in a database with a strong encryption (AES 192 or so) or are we just aiming for the stars?
Of course, the encryption key will not be in the database itself, but will be kept at a safe place.
Thanks a lot!
","Passwords should always be hashed and not encrypted unless you really need password retrieval. Password retrieval is itself not usually considered good practice.
","172","<database><encryption><hash><salt>","0","0","3","2010-05-12 15:10:24","2817830","0","","","","","2010-05-12 09:25:04",""
"48380931","password_hash with salt does nothing","I am trying to generate a hash of a password but when I add the option salt to password_hash, it just does nothing.
The following line works properly.
    $pwd = password_hash($password, PASSWORD_DEFAULT);

But at the moment of me adding $options, it doesn't generate the hash.
    $options = array('salt' => 'whatever');
    $pwd = password_hash($password, PASSWORD_DEFAULT, $options);

I have tried PASSWORD_BCRYPT but it doesn't work either.
If the option is ('cost' => 12) there are no problems at all.
I know it has been deprecated in PHP 7 but my version is 5.5.38, where it is supposed to be working. Any ideas?
Thanks
","","171","<php><salt><password-hash>","0","","0","2018-01-22 11:58:58","","7","","","","","2018-01-22 11:49:37",""
"7932937","Under what scenario will a hacker get the table but not the PHP code?","Ok, so I understand the value of the salt in my hashed passwords... kind of.
I am setting up a basic authentication scheme where I am setting passwords and users don't have the ability to set the passwords as something that they might use for another site.
So what is the real utility of the salt?
Under what circumstances could someone compromise my user table but not also get access to the rest of the tables with all the data, or my PHP code that shows the magic?
I'm trying to determine whether use of a salt is really that important in my case.
Thanks
","As I understand it, the salt slows down the reverse calculation of user passwords in the event of that table being compromised.  Salts are concatednated to a password and then unidirectionally hashed to avoid the ability of compromised passwords to be determined from Rainbow Tables, or lists of pre-hashed passwords.
","170","<php><mysql><security><salt>","5","-1","4","2012-01-30 08:27:04","7937364","2","1","","","","2011-10-28 17:50:55",""
"7932937","Under what scenario will a hacker get the table but not the PHP code?","Ok, so I understand the value of the salt in my hashed passwords... kind of.
I am setting up a basic authentication scheme where I am setting passwords and users don't have the ability to set the passwords as something that they might use for another site.
So what is the real utility of the salt?
Under what circumstances could someone compromise my user table but not also get access to the rest of the tables with all the data, or my PHP code that shows the magic?
I'm trying to determine whether use of a salt is really that important in my case.
Thanks
","If you salt with lets say one ASCII char randomly, the attacker needs a table which size is  256 times greater relativly to a rainbow table without salts.
For 2 ASCII char salt its already 65536 times more size.
What really needs to be mentioned, why you should use salts at all is the fact that most users use words directly found in a dictionary. I have no data on how much, but I guess it is much. So even if there are no rainbow tables used, an attacker can only ""bruteforce"" a small set of passwords at a single time. If you have no salt, do a dictionary attack with some modifications (addings numbers,...) and you get lets say 30% of all passwords with only one dictionary attack. With a salt this cannot happen in one run, means it takes much more time, means its pointless for an attacker.
For your other question:
nothing hinders an attacker to get your other table data. But thats nothing hashed passwords with or without a salt can avoid.
","170","<php><mysql><security><salt>","5","-1","4","2012-01-30 08:27:04","7937364","2","1","","","","2011-10-28 17:50:55",""
"7932937","Under what scenario will a hacker get the table but not the PHP code?","Ok, so I understand the value of the salt in my hashed passwords... kind of.
I am setting up a basic authentication scheme where I am setting passwords and users don't have the ability to set the passwords as something that they might use for another site.
So what is the real utility of the salt?
Under what circumstances could someone compromise my user table but not also get access to the rest of the tables with all the data, or my PHP code that shows the magic?
I'm trying to determine whether use of a salt is really that important in my case.
Thanks
","The big issue with salting passwords (and hashing them in the first place), is because a lot of people... in fact almost all people... re-use their passwords. Furthermore, most user-tables also store emails and/or usernames. So if someone manages to get the password of all your users, the damage hasn't just been done on your site, but also anywhere else that those users are signed up where they can easily be looked up. With all the data that normally is stored in usertables, the damage is hard to exaggerate.
In short; cracked passwords not only give users access to the things you are hosting, but affects the customers' security on just about every site they log on to.
But to answer the title question; it's extremely likely that if your database is compromised, that your PHP code is as well. However, they might only get read-access to your PHP code, whereas most database access levels do require INSERT/UPDATE access for the app to function at all. Some people split SQL access to read and write, but that really isn't realistic in most cases because you're always INSERTing and UPDATEing, even in pages where your users haven't even logged in (counters, like/unlike buttons, etc.).
","170","<php><mysql><security><salt>","5","-1","4","2012-01-30 08:27:04","7937364","2","1","","","","2011-10-28 17:50:55",""
"7932937","Under what scenario will a hacker get the table but not the PHP code?","Ok, so I understand the value of the salt in my hashed passwords... kind of.
I am setting up a basic authentication scheme where I am setting passwords and users don't have the ability to set the passwords as something that they might use for another site.
So what is the real utility of the salt?
Under what circumstances could someone compromise my user table but not also get access to the rest of the tables with all the data, or my PHP code that shows the magic?
I'm trying to determine whether use of a salt is really that important in my case.
Thanks
","It should be noted that SQL Injection can be used to read files using load data infile.  By having a salt value unknown to the attacker,  this will force the attacker into making a lot more guesses in order to obtain the plain text.  Although salting almost never takes this into consideration.  The main idea is two accomplish two things:
1) Two users with the same password will have different password hashes.  This is why some salting systems using very small salts,  such as only a few bytes. 
2) Forcing the attacker to generate larger rainbow tables.  In this case you want at least 8 bytes.  Often times you see salts the same number of bits as the message digest function which makes pre-computation totally infeasible. 
Once the salt is obtained a tool John The Ripper can be used to brute force the password.  GPU's are also commonly used to break heavily salted passwords.   It should be noted that bcrypt() good at defending against FPGA's and GPU's due to its high memory requirements.  Using memory hard functions for password storage can yield a very strong password storage system. 
","170","<php><mysql><security><salt>","5","2","4","2012-01-30 08:27:04","7937364","2","1","","","","2011-10-28 17:50:55",""
"7603385","Any good cocoa libraries that include both salt and IV AES Encryption?","I am just polishing up my encryption tool, but I noticed I am missing the salt, which is importnat in order to make the encryption more secure. I am using some built in cocoa methods, but they don't include either. I don't want to write this from scratch because it would be hard to get right. Are there any good cocoa libraries out there that include salt and IVs for AES Encryption? 
Thanks for the help
","Yes, Rob Napier has written such an implementation.
For decryption, you'll have to write that yourself:

I will leave the decrypt method as an exercise for the reader. It’s almost identical, and it’s a good idea to actually understand this code, not just copy it.

","170","<cocoa><encryption><aes><salt><initialization-vector>","2","1","1","2011-09-29 21:53:37","7603809","0","","","user762034","2011-09-29 21:25:01","2011-09-29 21:04:25",""
"21343755","Sending random password salt as activation code?","I'm about to set up my registration form to send out an activation email containing a unique code (pretty standard). 
I'm already storing in my database a randomly generated salt for each user, which is applied to their password on registration. 
My question is, is there any reason that I shouldn't just use that salt as the unique code used for activation emails? This wouldn't save me any work, but it could save database space over time. Mostly I'm just curious what people think of showing the user his password salt.
","If the user is a hacker, knowing their own salt would make it easier for them to crack their own account, but if everyone's salt is different, there would be no reason not to, if it's easier for you. Knowing your own salt only helps you as a hacker crack into your own account. So, in short, there is no real reason.
","168","<php><security><salt><activation>","0","0","3","2014-01-25 11:53:50","21343823","2","","","","","2014-01-24 22:36:57",""
"21343755","Sending random password salt as activation code?","I'm about to set up my registration form to send out an activation email containing a unique code (pretty standard). 
I'm already storing in my database a randomly generated salt for each user, which is applied to their password on registration. 
My question is, is there any reason that I shouldn't just use that salt as the unique code used for activation emails? This wouldn't save me any work, but it could save database space over time. Mostly I'm just curious what people think of showing the user his password salt.
","This is not necessarily a good solution, but as the salts are unique it shouldn't be a huge concern.  You could rot13 and base64 encode the salt.  Then, no one will actually know that it is the salt, and you could easily reverse it to look it up.
","168","<php><security><salt><activation>","0","0","3","2014-01-25 11:53:50","21343823","2","","","","","2014-01-24 22:36:57",""
"21343755","Sending random password salt as activation code?","I'm about to set up my registration form to send out an activation email containing a unique code (pretty standard). 
I'm already storing in my database a randomly generated salt for each user, which is applied to their password on registration. 
My question is, is there any reason that I shouldn't just use that salt as the unique code used for activation emails? This wouldn't save me any work, but it could save database space over time. Mostly I'm just curious what people think of showing the user his password salt.
","It would probably be best to use a separate, securely generated value.
As @SyntaxLAMP mentioned, using the salt as an activation code is a form of information leakage. This could also open the door to a MITM attack if someone is sufficiently placed to retrieve the salts of all registered users sent vie email in the clear.
","168","<php><security><salt><activation>","0","0","3","2014-01-25 11:53:50","21343823","2","","","","","2014-01-24 22:36:57",""
"44065278","Salt multi master: does it work with multiple masters offline","I am trying to run a multi-master setup in our dev environment. 
The idea is that every dev team has their own salt master. However, all minions in the entire dev environment should be able to receive salt commands from all salt master servers.
Since not every team needs their salt master 24/7, most of them are turned off for several days during the week.
I'm running 2016.11.4 on the masters, as well as on the minions.
However, I run into the following problem:
If one of the hosts that are listed in the mininons config file is shut down, the minion will not always report back on a 'test.ping' command (not even with -t 60)
My experience is, that the more master servers are offline, the longer the lag of the minion is to answer requests.
Especially if you execute a 'test.ping' on MasterX while the minions' log is at this point:
2017-05-19 08:31:44,819 [salt.minion      ][DEBUG   ][5336] Connecting to master. Attempt 4 (infinite attempts)

If I trigger a 'test.ping' at this point, chances are 50/50 that I will get a 'minion did not return' on my master.
Obviously though, I always want a return to my 'test.ping', regardless from which master I send it.

Question:
Can anybody tell me if what I try is feasible with salt? Because all the articles about salt multi master setup that I could find would only say:
'put a list of master servers into the minion config and that's it!'
","The comment from gtmanfred solved my question
","167","<salt><salt-stack><master>","2","0","1","2017-05-29 09:25:34","44238972","2","","","","","2017-05-19 08:40:07",""
"21003216","Why do I need to add the original salt to each hash iteration of a password?","I understand it is important to hash passwords over multiple iterations to make things harder for an attacker. I have read numerous times that when processing these iterations, it is critical to hash not only the result of the previous hashing, but also append the original salt each time. In other words:
I need to not do this:
var hash = sha512(salt + password); 
for (i = 0; i < 1000; i++) {
    hash = sha512(hash); 
}

And instead, need to do this:
var hash = sha512(salt + password); 
for (i = 0; i < 1000; i++) {
    hash = sha512(salt + hash); 
}

My question is regarding the math here. Why does my bad example above make things easier for an attacker? I've heard that it would increase the likelihood of collisions but I am not understanding why.
","It is not that you simply need to do ""hash = sha512(salt + hash)"" - it's more complex than that.  An HMAC is a better way of adding your salt (and PBKDF2 is based on HMAC - see below for more detail on PBKDF2) - there's a good discussion at When is it safe to use a broken hash function? for those details.
You are correct in that you need to have multiple iterations of a hash function for security.  
However, don't roll your own.  See How to securely hash passwords?, and note that PBKDF2, BCrypt, and Scrypt are all means of doing so.
PBKDF2, also known as PKCS#5v2 and RFC2898 is in fact reasonably close to what you're doing (multiple iterations of a normal hash function), particular in the form of PBKDF2-HMAC-SHA-512, in particular section 5.2 lists:
     For each block of the derived key apply the function F defined
     below to the password P, the salt S, the iteration count c, and
     the block index to compute the block:

               T_1 = F (P, S, c, 1) ,
               T_2 = F (P, S, c, 2) ,
               ...
               T_l = F (P, S, c, l) ,

     where the function F is defined as the exclusive-or sum of the
     first c iterates of the underlying pseudorandom function PRF
     applied to the password P and the concatenation of the salt S
     and the block index i:

             F (P, S, c, i) = U_1 \xor U_2 \xor ... \xor U_c

     where

               U_1 = PRF (P, S || INT (i)) ,
               U_2 = PRF (P, U_1) ,
               ...
               U_c = PRF (P, U_{c-1}) .

     Here, INT (i) is a four-octet encoding of the integer i, most
     significant octet first.

P.S. SHA-512 was a good choice of hash primitive - SHA-512 (and SHA-384) are also superior to MD5, SHA-1, and even SHA-224 and SHA-256 because SHA-384 and up use 64-bit operations which current GPU's (early 2014) do not have as much of an advantage over current CPU's with as they do 32-bit operations, thus reducing the margin of superiority attackers have for offline attacks.
","167","<hash><passwords><salt>","3","0","1","2014-02-25 05:36:17","","6","2","3171146","","2014-01-08 22:49:24","2014-01-08 18:04:23",""
"3196328","Using the same salt for multiple fields","I have a field in a row that I'm hashing and salting. The salt for each row is different. I decided to hash/salt a couple of more fields in each row. 
Would using the same salt for those new fields in the same row make the data more susceptible to rainbow attacks compared to if I were to generate a new salt for each field? My logic is that it's only a couple of more fields in the same row that will use the same salt and it would make key/salt management much easier. 
","Yes, but is the data really this important to use multiple salts? If you use one salt per row, this should be sufficient. For more salt-related info see this article: http://php-security.org/2010/05/26/mops-submission-10-how-to-manage-a-php-applications-users-and-passwords/
","166","<php><database><security><encryption><salt>","2","1","2","2010-07-07 19:53:31","","0","","","","","2010-07-07 15:34:13",""
"3196328","Using the same salt for multiple fields","I have a field in a row that I'm hashing and salting. The salt for each row is different. I decided to hash/salt a couple of more fields in each row. 
Would using the same salt for those new fields in the same row make the data more susceptible to rainbow attacks compared to if I were to generate a new salt for each field? My logic is that it's only a couple of more fields in the same row that will use the same salt and it would make key/salt management much easier. 
","No,  if someone has a rainbow table large enough to break you salt then you messed up by using a salt that is too small.   Each byte you add to your salt makes the rainbow table exponentially larger.   Adding a salt to your hash does not make a pre-computed attack impossible,  only more difficult. 
Re-use of a salt makes your system more prone to attack.  An attacker can create an account,  and then pull his salted hash out of the database using SQL Injection.  Then he can brute force the salt (because he knows his own password) using John The Ripper.   If the salt is stored in the database,  then he can pull the salt and the hash using SQL injection and break the hash of an unknown password with John.   If the password is a dictionary word it will take less than an hour to break. 
","166","<php><database><security><encryption><salt>","2","3","2","2010-07-07 19:53:31","","0","","","","","2010-07-07 15:34:13",""
"16118528","javascript behavior for '\352' decimal value","while checking login page, I found the following JS code
hexMD5('\232' + document.login.password.value + '\305\334\122\134\352');

so, I am asking about \352 will it occupy one byte and hence cause overflow and yield 96 or java script interpreter promote it to short to preserve its value?
","JavaScript doesn't have bytes, shorts, or integers*, it has only the Number type, which is a double-precision IEEE-754 number. But that's not really relevant to the code you've shown unless something uses charCodeAt on the string to get the corresponding code point for one of the characters in it, because you're defining code points (loosely, ""characters"") in a string, not numbers. Characters in JavaScript are 16-bit entities, so the octal escape '\352' encodes character 234 decimal, which obviously readily fits within the character's 16-bit range.
Side note: Octal escapes are not part of the main standard and are disallowed in strict mode. They're part of a non-normative annex to the specification. I'd recommend using hex escapes or unicode escapes rather than octal ones.
* Well, JavaScript does have 32-bit integers as a transient thing during some bit-related calculations, such as those performed by the & and | operators.
","165","<javascript><salt>","0","1","1","2013-04-20 09:10:58","16118550","0","","","","","2013-04-20 09:01:06",""
"45258807","PHP's password_hash(): public one-time salt vs. private fixed salt","PHP manual for password_hash() (http://php.net/manual/en/function.password-hash.php) says:

The used algorithm, cost and salt are returned as part of the hash. Therefore, all information that's needed to verify the hash is included in it. 

My question is: why?
I read this in another SO answer: (Static Salt vs Random Salt - Security PHP)

Random salts have a tremendous benefit. If all accounts in the system use the same salt, an attacker can brute-force calculate hashes for that salt and break into all accounts with just one computational run.

I get that. However, password_hash() embeds the salt in the returned hash, which I believe makes it public, so the salt is known to the attacker for every password.
Wouldn't it be better to have a long private salt instead?
One thing I could think of is that hashes created with the same salt would be identical for identical passwords, and possibly allow an attacker to make progress through statistical analysis of the hashes in the database.
However, this could possibly be mitigated by using a dictionary of private hashes instead of just one, but this is no longer possible with password_hash() in PHP 7.
I'm not a security expert, and I believe that the PHP guys know what they're doing, so I would be happy to hear why password_hash() way is considered to be the right way to go.
","I found this answer:
http://php.net/manual/en/function.password-hash.php#114410

if you thought ""why is the salt included in the hash and is it save
  when i store it as it is in my db?""
Answer i found: The salt just has to be unique. It not meant to be a
  secret.
As mentioned in notes and docu before: let password_hash() take care
  of the salt.
With the unique salt you force the attacker to crack the hash. The
  hash is unique and cannot be found at rainbow tables.

","165","<php><security><hash><passwords><salt>","4","3","1","2017-07-22 20:24:37","45258863","1","","","","","2017-07-22 20:18:02",""
"23266568","Password hashing and salts in PHP","I'm working on a site which is (try to be) super secure. I read a lot about password hashing and using salts, but not everything is clear to me. I would like to use sha-256 hash algorithm with salt. I know about salts that all of them should be unique per-user per-password.
I'm wondering what if I use the password as salt too? Hash the password with sha256 and then hash it with an other algorithm and use it as salt. In this way I don't have to store the salt in the database. Is this possible? or should I generate a random string?
","No, that is still a one-way algorithm.
If another user uses the same password the hash value will be the same as the hash of the pass of the first user. That misses the point that hash values must be different for each user and each pass entry.
I suggest to use the date of registration of a user (for example) as salt. This way for each user and each pass the hashing algorithm will be different (ok, if two users have the same pass AND the same reg. date it will be the same).
Or maybe you can use user id for salt, or some combination between user id and reg.date and user name.
Edit:
Your approach is actualy better than hashing with known algorithm without salt, but worse than hash+propper salt.
What you do is just applying custom hash function of your own. That can't be easyly brute-forced without knowing the custom algorithm, but is vunerable to other attacks.
And I suggest not placing a table with name ""SALT"" in the db, for if DB is hacked the attacker wii get the passwords AND the salts for them.
","164","<php><hash><passwords><salt>","0","0","1","2014-04-24 11:06:57","23266912","4","1","472495","","2014-04-24 10:51:42","2014-04-24 10:41:42",""
"28530401","How to save Password and Salt in shiro.ini","currently I work with Shiro to create an authenticated and authorized connection between server and client.
For now I don't have a special realm and only use the shiro.ini to save all my test users.
My question now is if there is a possibility to save the salt for each user in the shiro.ini or do I have to create a seperate database as a realm?
So is there the chance to save it somehow like this within the .ini?
[users]
*username* = *hashed Password*, *salt*, *roles

I actually do not really understand how or where I can save a random salt for each user.
My current understanding is that the 'hashed Password' in the ini is the final comparison value, for the incoming token containing a password that firstly has to be hashed with the user specific salt.
","","162","<java><ini><salt><shiro>","2","","0","2015-08-24 15:44:38","","0","","53870","","2015-08-24 15:44:38","2015-02-15 19:51:30",""
"11680332","drupal and joomla hash not salted by default?","The password recovery mechanism I keep bumping into for joomla, art least, is to add a known, hashed string to the password column of the user table. What that says to me is that the default hashing mechanism is not salted. Am I wrong? Also, I am just curious to know whether or not drupal salts passwords by default? 
","Yes, Joomla does salt the passwords before they are md5 hashed.
For a more detailed explanation on the process and how to split them up, please see this:
joomla password encryption
Hope this is what you are looking for.
","162","<security><hash><joomla><content-management-system><salt>","1","3","2","2012-07-27 03:59:22","11681253","0","","","","","2012-07-27 01:34:25",""
"11680332","drupal and joomla hash not salted by default?","The password recovery mechanism I keep bumping into for joomla, art least, is to add a known, hashed string to the password column of the user table. What that says to me is that the default hashing mechanism is not salted. Am I wrong? Also, I am just curious to know whether or not drupal salts passwords by default? 
","Drupal hashes are salted in V7 and later. http://drupal.org/node/493984
","162","<security><hash><joomla><content-management-system><salt>","1","2","2","2012-07-27 03:59:22","11681253","0","","","","","2012-07-27 01:34:25",""
"54661867","How to read encrypted message in http response body?","I have a problem that I cannot found for days. I need to decrypt a response message, but the encrypted message is in the body of the response. The encrypted message is not encoded to string (ex: base64).
The response body:
{""status"":""1"",""message"":""o¨:\u0005Í#cÒßàÂîà\u0015°;æ5\r÷\u00267\u0015èÕ ðC35Á\u003c\u0007whq`{1fv\u000bÀ¯\u00188?Í2,`zpT rÚAÖ\u0005þ9¯¢@rëQ}COQQÄd]\u000b\bRU¯~E:ßUpgÊó\u0010XôØ\u001aræ|\u0007(KÉS\u0000dNr\u0003¾ zi0á\u0017¯ò°j\u0015éÕ÷µ\u0017Â \u001a4\u0018u£Iûô\nQ\fâ\u000bÃO¼ÕîðÑ³?åýÝ\u003c{A\u000e\u00275+Ð£ÜÅQ\u0026´EµÁ\u0016$\u0010Ù\t~|¼0*º41ÒL~Å¬{­A\u0014²\u001cµÉ tÎåhTØÍt@\u0010ð^0sZ\u003d\u003d\u00010ñZ\""\u000e\t)\u001e\u0005ªÆKÑÜÓ©Uä¦wÙ3ó¡{oúh®aÉ/B´\u0019\u001bÿ+¯óÍ\u0004»÷çôÏ°xsh.,Ó`¤7\u0007é^ÇÈ1/Ä\u0026¦1\u001cÕívpÖ¯_Àý\tÎø½dÍæ]\u001e\u0017\u0000IÄÙ;í\u0007ek4ÇF§gk\u0015\u001d¯t[\""²\f\u001bPÿíiì\fªô+\u003e£~ß \tAb¿\u001b\u0011{Ê7\rf\u0017g\u001e¤\u0004o\u000e×ÐôL\u001dè1¥¯åÀi\u001c.BiÞ\u0019Ü\f³Ù\u0006`ØiÏËPì¾¯uÉØt\u0026QÖ^¶\u001a??\u001doc\u0003ï9\u001c»û\u0007\u0014\u0012\u001c\u001dMÂDpWkLdOD­ò¥C\u0017ÖAkmÍ~½\u0005¡ë,}0É\u0005]v°u+øüüñMïçîf¯¹\u0016ç4ÏÈ\u0003Ì01\u0011dÈïü¥§USÔHFÇÌ¡+CF""}

The response header:
X-Application-Context : application
Date : Wed, 06 Feb 2019 08:59:20 GMT
Content-Type : text/plain;charset=ISO-8859-1
Transfer-Encoding : chunked

I need to decrypt in message parameter. I tried to googling it, almost every answer is saying that the encryptor should encode the result to string first. But in my case I cant make the encryptor to do that. The encryptor also dont want to tell how to read the message.
Everytime I use solutions I found, I always get the same error:
Input length must be multiple of 16 when decrypting with padded cipher

The encryption using AES/CBC/PKCS5Padding. I decrypt the message using java spring. Thanks in advance.
","","162","<java><encryption><utf-8><salt>","0","","0","2019-02-13 03:34:36","","7","","10055107","","2019-02-13 03:34:36","2019-02-13 03:05:53",""
"54236877","Targeting multiple grains in Salt minions using API","In our infrastructure, we set multiples grains on the minion including an ""environment"" and ""app"" grain.
When we use the cli, we can get the correct minions using:
salt -C ""G@app:middle_tier_1 and G@environment:dev"" test.ping
But if we try to use the cherrypy api, only got a result if set only one target like:
[{""client"":""local"",""tgt_type"":""grain"",""fun"":""test.ping"",""tgt"":""G@app:middle_tier_1""}]
or
[{""client"":""local"",""tgt_type"":""grain"",""fun"":""test.ping"",""tgt"":""G@environment:dev""}]
with multiples one, don't get any

[{""client"":""local"",""tgt_type"":""grain"",""fun"":""test.ping"",""tgt"":""G@app:middle_tier_1 and G@environment:dev""}]


[{""client"":""local"",""tgt_type"":""grain"",""fun"":""test.ping"",""tgt"":[""G@app:middle_tier_1"",""G@environment:dev""]}]

According with the documentation, i can use a list in the tgt paramenter.
I have looked their documentation fairly extensively and have found no examples of this type of minion targeting.
Is this even possible, and if so, how would I go about doing it?
Extra info:
salt-master 2018.3.2 (Oxygen)
salt-api 2018.3.2 (Oxygen)
Thanks in advance!
","If you want to use multiple grains, the tgt_type is compound not grains.
See: https://docs.saltstack.com/en/latest/ref/clients/#salt-s-client-interfaces, https://docs.saltstack.com/en/latest/topics/targeting/compound.html
","159","<api><salt-stack><salt>","0","0","1","2019-01-29 04:47:12","","0","","","","","2019-01-17 13:21:56",""
"8073351","Implementing a file format to be used with Encryption - Cocoa","I need to implement salts in my encryption, but to do so, I need to store it in a file format that I need to create so I can later retrieve it to decrypt. I'm a noob when it comes to encryption. The specifications of the file format should be as so:
Ciphertext: length of ciphertext ;
Salt: length of salt ;
Then the ciphertext and salt written out. This is where xcode really confuses me, as in creating a new file, etc. 
How can I do this? And then retrieve the salt for decryption?
Thank you, your help is greatly appreciated.
","You might consider using NSMutableDictionary and NSKeyedUnarchiver like this:
// Example ciphertext and salt
NSString *ciphertext = @""the ciphertext"";
NSString *salt = @""the salt"";

// File destination
NSString *path = @""/Users/Anne/Desktop/Archive.dat"";

// Create dictionary with ciphertext and salt
NSMutableDictionary *dictionary = [[NSMutableDictionary alloc] init];
[dictionary setObject:ciphertext forKey:@""ciphertext""];
[dictionary setObject:salt forKey:@""salt""];

// Archive dictionary and write to file
NSData *data = [NSKeyedArchiver archivedDataWithRootObject:dictionary];
[data writeToFile:path options:NSDataWritingAtomic error:nil];

// Read file and unarchive
NSMutableDictionary *theDictionary = [NSKeyedUnarchiver unarchiveObjectWithFile:path];

// Get ciphertext and salt
NSString *theCiphertext = [theDictionary objectForKey:@""ciphertext""];
NSString *theSalt = [theDictionary objectForKey:@""salt""];

// Show Result
NSLog(@""Extracted ciphertext: %@"",theCiphertext);
NSLog(@""Extracted salt: %@"",theSalt);

Output:
Extracted ciphertext: the ciphertext
Extracted salt: the salt

EDIT
Response to comment: Both NSData and NSString feature length.
Quick example:
NSString *theString = @""Example String"";
NSData *theData = [theString dataUsingEncoding:NSUTF8StringEncoding];

NSUInteger stringLength = [theString length];
NSUInteger dataLength = [theData length];

NSLog(@""String length: %ld"",stringLength);
NSLog(@""Data length: %ld"",dataLength);

Output:
String length: 14
Data length: 14

","158","<cocoa><encryption><aes><file-format><salt>","0","1","1","2011-11-11 16:54:29","8074026","0","","","","","2011-11-09 23:50:38",""
"34540113","Can salted passwords be reversed?","I have just pressed 'forgot password' on hosting24.com, only to have my password emailed to me in plain text (see image below). I contacted their technical support to question this and they have told me:

We are using Salt encryption on our website, passwords are not stored
  in plain text. Please let us know if you have any concerns regarding
  the security of your data.

The way I understand it, is that once a password is 'salted' it cannot be reversed back to plain text. I am also very concerned, considering their partner company 000webhosting was victim of a massive hacking incident recently, which exposed that their security was sub-par.  
Thanks.

EDIT:
After a few heated emails I finally got this response:

Our passwords are encrypted with a secure encryption method in the
  database. Although we do have a decryption method in place (that is
  used to prevent fraud), all this is going to change as we are
  re-designing the project and updating the code to adhere to new age
  standards. We are sorry to have let you down on this one.
Please contact us with any additional questions. Happy holidays!

'New age'. Amazing.
EDIT:
I sent the website this link to prove a point, so I anticipate a load of down votes from their tech support.
","No, they can't without astronomical computing power. I'd bet large sums of money that they have a second database of plaintext passwords.
","157","<security><salt>","1","4","2","2015-12-31 18:54:16","34550569","7","","1197723","","2015-12-31 14:38:03","2015-12-31 02:13:01",""
"34540113","Can salted passwords be reversed?","I have just pressed 'forgot password' on hosting24.com, only to have my password emailed to me in plain text (see image below). I contacted their technical support to question this and they have told me:

We are using Salt encryption on our website, passwords are not stored
  in plain text. Please let us know if you have any concerns regarding
  the security of your data.

The way I understand it, is that once a password is 'salted' it cannot be reversed back to plain text. I am also very concerned, considering their partner company 000webhosting was victim of a massive hacking incident recently, which exposed that their security was sub-par.  
Thanks.

EDIT:
After a few heated emails I finally got this response:

Our passwords are encrypted with a secure encryption method in the
  database. Although we do have a decryption method in place (that is
  used to prevent fraud), all this is going to change as we are
  re-designing the project and updating the code to adhere to new age
  standards. We are sorry to have let you down on this one.
Please contact us with any additional questions. Happy holidays!

'New age'. Amazing.
EDIT:
I sent the website this link to prove a point, so I anticipate a load of down votes from their tech support.
","Salted hashed passwords are not directly reversible—that's the point of hashing. However one can always try to recover them through brute force, trying all possible/likely passwords to see if the hash matches.
How expensive that is to do depends on the strength of the hash used, but you would never build a system that stores and decrypts passwords that way. If they said they were storing only salted hashes, and still were able to send you the password you originally set yourself, they're clearly lying.
They don't mention hashing though:

We are using Salt encryption on our website, passwords are not stored in plain text.

“Salt encryption” isn't a thing, but let's be as generous here as we can.
It is possible they mean they're using reversible encryption with some randomised element (variable IV, or extra data in the encrypted message) which would ensure two passwords don't get matching encrypted versions (ie the same purpose as the ‘salt’ in a hashing operation).
It's also conceivable that there could be some valid reason why they need reversible passwords, for example if they need to use the passwords to authenticate to another separate system. It's possible to build reasonable systems with reversible passwords, but compared to Good Old Bcrypt it's a whole lot more effort to manage this way (eg keys on the application server; wide-ranging internal policies to manage that; HSMs; and watertight code auditing).
Let's say we accept that this is what they've done and they've implemented it solidly (which is highly doubtful—much more likely they've got plaintext passwords or a hacked-up and vulnerable AES). Even then, they've then blown it by sending you the reversed password in a mail over the unencrypted public SMTP infrastructure.
There are things you can do to mitigate the untrustworthiness of the mail channel, such as sending a single-use token or temporary password that requires a new password to be set afterwards. But there is never a good reason to send an existing password, that will continue to work on the target site and which you might have used to secure other services. User-set passwords should never touch SMTP.
","157","<security><salt>","1","4","2","2015-12-31 18:54:16","34550569","7","","1197723","","2015-12-31 14:38:03","2015-12-31 02:13:01",""
"43872114","Check the hash of files by saltstack when copying","I'm interesting in how saltstack checks 

if file already exists
if file is not corrupted

when it copies files. 
Does it check hash sum of file and its content, or only file names? Especially when file.recurse state is used for copying directories.
Does anybody know how to iterate through the directory content and check hash sum for files?
I understand that here is a few questions, but it is important to imagine the big picture of copying process.
","Salt compares the hash sums of the files to decide if a download is needed.
","156","<hash><salt><salt-stack>","0","2","1","2017-05-12 07:13:00","43931553","0","","","","","2017-05-09 14:08:47",""
"43203142","Getting exception while running SaltStack module.run function with name dsc.apply_config","I'm getting the following error while trying to state.apply sls on windows machine.

      ID: ProvisionADDC
Function: module.run
    Name: dsc.apply_config
  Result: False
 Comment: Module function dsc.apply_config threw an exception. Exception: No JSON results from powershell. Additional info follows:

         retcode:
              0
          stderr:
          stdout:
Started: 12:06:08.044000
Duration: 2684.0 ms
 Changes:


Since win_dsc is execution module, then I'm forced to use state.module module to run this function on minion:
C:\DSC:
  file.directory:
    - makedirs: True

allprofiles:
   win_firewall.disabled

CopyDSCModules:
  file.recurse:
    - name: 'C:\Program Files\WindowsPowerShell\Modules'
    - source: salt://windows/dsc/

InstallADDomainServices:
   win_servermanager.installed:
     - name: AD-Domain-Services
     - restart: True
     - require:
       - file: CopyDSCModules

ProvisionADDC:
   module.run:
     - name: dsc.apply_config
     - path: C:\DSC\
     - source: salt://windows/mof
     - require:
       - file: 'C:\DSC'
       - file: CopyDSCModules
       - win_servermanager: InstallADDomainServices

Anybody have experience with win_dsc and SaltStack ?
","I think it's a case of the documentation lacking a bit, but you need to actually run the configuration in the same ps1 file, eg.
Configuration myconfig {
    Node 'localhost' {
        WindowsFeature 'DNS' {
            Name = 'DNS'
            Ensure = Present
        }
    }
}

myconfig

I'm playing with this a litle at the moment and hopefully I can come up with a helpful issue/PR because it is lacking a bit (even if just for better error logging).
I'm not sure how this works in terms of determining a specific config as I'e not tested that yet (using the config_name param).
","154","<windows><salt><salt-stack><dsc>","1","0","1","2018-02-27 09:44:36","","1","","","","","2017-04-04 09:23:14",""
"21157042","I don't know how to use salt","this is my register code:
<?php 

session_start();  //Must Start a session. 

require ""config.php""; //Connection Script, include in every file! 

//Check to see if the user is logged in. 
//'isset' check to see if a variables has been 'set' 
if(isset($_SESSION['username'])){ 
header(""location: members.php""); 
} 

//Check to see if the user click the button 
if(isset($_POST['submit'])) 
{ 
//Variables from the table 
$user  = $_POST['user']; 
$pass  = $_POST['pass']; 
$rpass = $_POST['rpass']; 
$email = $_POST['email'];

//Prevent MySQL Injections 
$user  = stripslashes($user); 
$pass  = stripslashes($pass); 
$rpass = stripslashes($rpass);
$email = stripslashes($email); 

$user  = mysqli_real_escape_string($con, $user); 
$pass  = mysqli_real_escape_string($con, $pass); 
$rpass = mysqli_real_escape_string($con, $rpass); 
$email = mysqli_real_escape_string($con, $email); 


//Check to see if the user left any space empty! 
if($user == """" | $pass == """" | $rpass == """" | $email == """") 
{ 
  echo ""Alstublieft, vul alle vakjes in!""; 
} 

else 
{ 
  //Check too see if the user's Passwords Matches! 
  if($pass != $rpass) 
  { 
     echo ""Passworden komen niet overeen! Probeer het opnieuw""; 
  } 

  //CHECK TO SEE IF THE USERNAME IS TAKEN, IF NOT THEN ADD USERNAME AND PASSWORD INTOT HE DB 
  else 
  { 
     //Query the DB 
     $query = mysqli_query($con,""SELECT * FROM users WHERE username = '$user'"") or die(""Kan het niet in de tabel zetten!""); 

     //Count the number of rows. If a row exist, then the username exist! 
     $row = mysqli_num_rows($query); 
     if($row == 1) 
     { 
        echo ""Sorry, maar die username is al in gebruik! Probeer het opnieuw.""; 
     } 

     //ADD THE USERNAME TO THE DB 
     else 
     { 
        $add = mysqli_query($con,""INSERT INTO users (id, username, password, email) VALUES (null, '$user' , '$pass', '$email') "") or die(""Kan niet toevoegen!""); 
        echo ""Gelukt! <a href='login.php'> Klik hier </a>om in te loggen!""; 
     } 


   }       

  } 

} 
?> 

But how do I use salt in it?
I know it's an extra security but I don't know how to use it.
I looked on the internet and tried some code but every time it doesn't work.
","What you really need to do when you want to use salt is:
$passwordForDB = md5('your_salt_string_here'.$pass);

when you do registration.
and then in login script you simply do:
$password = md5('your_salt_string_here'.$_POST['pass']);

if ($passwordFromDB = $password) {
 echo 'Hi User!';
}

That's what we call salt realy, It's just mixing encrypted data, like generated keys or passwords hashes
PHP also gives you function 
password_hash()

I advies you to check it in documentation. You can use salt ther as well just concat your salt string with password you are going to hash
","153","<php><salt>","-2","-1","3","2014-01-16 10:04:24","","8","","759866","","2014-01-16 10:04:24","2014-01-16 08:46:43",""
"21157042","I don't know how to use salt","this is my register code:
<?php 

session_start();  //Must Start a session. 

require ""config.php""; //Connection Script, include in every file! 

//Check to see if the user is logged in. 
//'isset' check to see if a variables has been 'set' 
if(isset($_SESSION['username'])){ 
header(""location: members.php""); 
} 

//Check to see if the user click the button 
if(isset($_POST['submit'])) 
{ 
//Variables from the table 
$user  = $_POST['user']; 
$pass  = $_POST['pass']; 
$rpass = $_POST['rpass']; 
$email = $_POST['email'];

//Prevent MySQL Injections 
$user  = stripslashes($user); 
$pass  = stripslashes($pass); 
$rpass = stripslashes($rpass);
$email = stripslashes($email); 

$user  = mysqli_real_escape_string($con, $user); 
$pass  = mysqli_real_escape_string($con, $pass); 
$rpass = mysqli_real_escape_string($con, $rpass); 
$email = mysqli_real_escape_string($con, $email); 


//Check to see if the user left any space empty! 
if($user == """" | $pass == """" | $rpass == """" | $email == """") 
{ 
  echo ""Alstublieft, vul alle vakjes in!""; 
} 

else 
{ 
  //Check too see if the user's Passwords Matches! 
  if($pass != $rpass) 
  { 
     echo ""Passworden komen niet overeen! Probeer het opnieuw""; 
  } 

  //CHECK TO SEE IF THE USERNAME IS TAKEN, IF NOT THEN ADD USERNAME AND PASSWORD INTOT HE DB 
  else 
  { 
     //Query the DB 
     $query = mysqli_query($con,""SELECT * FROM users WHERE username = '$user'"") or die(""Kan het niet in de tabel zetten!""); 

     //Count the number of rows. If a row exist, then the username exist! 
     $row = mysqli_num_rows($query); 
     if($row == 1) 
     { 
        echo ""Sorry, maar die username is al in gebruik! Probeer het opnieuw.""; 
     } 

     //ADD THE USERNAME TO THE DB 
     else 
     { 
        $add = mysqli_query($con,""INSERT INTO users (id, username, password, email) VALUES (null, '$user' , '$pass', '$email') "") or die(""Kan niet toevoegen!""); 
        echo ""Gelukt! <a href='login.php'> Klik hier </a>om in te loggen!""; 
     } 


   }       

  } 

} 
?> 

But how do I use salt in it?
I know it's an extra security but I don't know how to use it.
I looked on the internet and tried some code but every time it doesn't work.
","For creating password hashes, use the crypt() function.  You can specify a salt as an optional parameter:
$hashed_password = crypt( $password, ""mysalt"" );

$hashed_password now contained the encrypted hash of your password.  Supplying the salt, as opposed to letting the system automatically generate one for you, will generate an E_NOTICE as of PHP 5.6.  It's more secure to specify your own salt.
The encrypted hash of your password now contained the salt, and can be used as the salt when doing a comparison.  So when authenticating the user, if $password contains the password specified by the user, you can compare it like this:
if( crypt( $password, $hashed_password ) == $hashed_password ) {
    // Password matches
}

","153","<php><salt>","-2","0","3","2014-01-16 10:04:24","","8","","759866","","2014-01-16 10:04:24","2014-01-16 08:46:43",""
"21157042","I don't know how to use salt","this is my register code:
<?php 

session_start();  //Must Start a session. 

require ""config.php""; //Connection Script, include in every file! 

//Check to see if the user is logged in. 
//'isset' check to see if a variables has been 'set' 
if(isset($_SESSION['username'])){ 
header(""location: members.php""); 
} 

//Check to see if the user click the button 
if(isset($_POST['submit'])) 
{ 
//Variables from the table 
$user  = $_POST['user']; 
$pass  = $_POST['pass']; 
$rpass = $_POST['rpass']; 
$email = $_POST['email'];

//Prevent MySQL Injections 
$user  = stripslashes($user); 
$pass  = stripslashes($pass); 
$rpass = stripslashes($rpass);
$email = stripslashes($email); 

$user  = mysqli_real_escape_string($con, $user); 
$pass  = mysqli_real_escape_string($con, $pass); 
$rpass = mysqli_real_escape_string($con, $rpass); 
$email = mysqli_real_escape_string($con, $email); 


//Check to see if the user left any space empty! 
if($user == """" | $pass == """" | $rpass == """" | $email == """") 
{ 
  echo ""Alstublieft, vul alle vakjes in!""; 
} 

else 
{ 
  //Check too see if the user's Passwords Matches! 
  if($pass != $rpass) 
  { 
     echo ""Passworden komen niet overeen! Probeer het opnieuw""; 
  } 

  //CHECK TO SEE IF THE USERNAME IS TAKEN, IF NOT THEN ADD USERNAME AND PASSWORD INTOT HE DB 
  else 
  { 
     //Query the DB 
     $query = mysqli_query($con,""SELECT * FROM users WHERE username = '$user'"") or die(""Kan het niet in de tabel zetten!""); 

     //Count the number of rows. If a row exist, then the username exist! 
     $row = mysqli_num_rows($query); 
     if($row == 1) 
     { 
        echo ""Sorry, maar die username is al in gebruik! Probeer het opnieuw.""; 
     } 

     //ADD THE USERNAME TO THE DB 
     else 
     { 
        $add = mysqli_query($con,""INSERT INTO users (id, username, password, email) VALUES (null, '$user' , '$pass', '$email') "") or die(""Kan niet toevoegen!""); 
        echo ""Gelukt! <a href='login.php'> Klik hier </a>om in te loggen!""; 
     } 


   }       

  } 

} 
?> 

But how do I use salt in it?
I know it's an extra security but I don't know how to use it.
I looked on the internet and tried some code but every time it doesn't work.
","Before using a salt, you should consider storing the password in hashed form. This means that someone looking into your DB can't see the password plain-text. A salt does not help with plain-text passwords. A salt secures hashed passwords against so-called ""rainbow table attacks"".
For your convenience, password_hash() already hashes a password completely with a randomly generated salt. Just put the result into the database.
To check if the user-provided password matches the one stored in the database, use password_verify()
","153","<php><salt>","-2","2","3","2014-01-16 10:04:24","","8","","759866","","2014-01-16 10:04:24","2014-01-16 08:46:43",""
"5754122","Trying to hash my passwords but with no success","I am fairly new to php security, and for my site, I was a sign up and login, and I want to add md5 their passwords, but I can't find anywhere which has a clear guide on what needs to be added to the sign up, and what needs to be added to the login files, and/or the database, as I say I am fairly new to php in terms of web security, so I am in need of some help, here's part of what I have on my sign up form: 
    $error = $user = $pass = """";
if (isset($_SESSION['user'])) destroySession();

if (isset($_POST['user']))
{
    $user = sanitizeString($_POST['user']);
    $pass = sanitizeString($_POST['pass']);


    if ($user == """" || $pass == """")
    {
        $error = ""Not all fields were entered<br /><br />"";
    }
    else
    {
        $query = ""SELECT * FROM members WHERE user='$user'"";

        if (mysql_num_rows(queryMysql($query)))
        {
            $error = ""Username already taken<br /><br />"";
        }
        else
        {
            $query = ""INSERT INTO members VALUES('$user', '$pass')"";
            queryMysql($query);
            die(""<h4>Account created</h4>Please Log in."");
        }

    }
}

I just need an example or a good guide of what I need to do to get it working correctly.
","You can for example md5($pass) before you insert and when the user logs in, you md5 again and check that the values are the same. There is no way to de-md5, so you will usually check the md5 input against the md5 DB value.
","152","<php><security><md5><salt>","1","-1","2","2011-04-22 09:38:10","5754186","5","","333786","","2011-04-22 09:35:03","2011-04-22 09:31:22",""
"5754122","Trying to hash my passwords but with no success","I am fairly new to php security, and for my site, I was a sign up and login, and I want to add md5 their passwords, but I can't find anywhere which has a clear guide on what needs to be added to the sign up, and what needs to be added to the login files, and/or the database, as I say I am fairly new to php in terms of web security, so I am in need of some help, here's part of what I have on my sign up form: 
    $error = $user = $pass = """";
if (isset($_SESSION['user'])) destroySession();

if (isset($_POST['user']))
{
    $user = sanitizeString($_POST['user']);
    $pass = sanitizeString($_POST['pass']);


    if ($user == """" || $pass == """")
    {
        $error = ""Not all fields were entered<br /><br />"";
    }
    else
    {
        $query = ""SELECT * FROM members WHERE user='$user'"";

        if (mysql_num_rows(queryMysql($query)))
        {
            $error = ""Username already taken<br /><br />"";
        }
        else
        {
            $query = ""INSERT INTO members VALUES('$user', '$pass')"";
            queryMysql($query);
            die(""<h4>Account created</h4>Please Log in."");
        }

    }
}

I just need an example or a good guide of what I need to do to get it working correctly.
","I think you're looking to salt and then hash your passwords.  Simply add a string of your choosing to the front (and if you wish, to the end) of your password before hashing it using MD5.
e.g.
$pass = 'mypassword';
$salt = 'S%gh3578';  //anything you want
$pepper = 'w890rrk'; //anything you want
$query = ""INSERT INTO members VALUES('$user', md5('"".$salt.$pass.$pepper.""'))"";
queryMysql($query);

This will store the password in the database using salted MD5 encryption that cannot be reversed using a lookup table of common passwords using unsalted MD5 encryption.
To check if a password is valid, you do something similar:
$passToCheck = 'something';
$correctMD5 = (retrieve hash from db)
if($salt.$passToCheck.$pepper == $correctMD5)
{    
   //valid login
} else {
   //login failure
}

","152","<php><security><md5><salt>","1","4","2","2011-04-22 09:38:10","5754186","5","","333786","","2011-04-22 09:35:03","2011-04-22 09:31:22",""
"29835621","Hash and Salt string in Windows Store App","I have been trying to do a Hash and salt on a password that I have to save on the device. This is a code that I have been using, but I can't find System.Security.Cryptography and the RNGCryptoServiceProvider in the Windows Store Framework.
public static string CreateSalt(int size)
{
    var rng = new RNGCryptoServiceProvider();
    var buff = new byte[size];
    rng.GetBytes(buff);
    return Convert.ToBase64String(buff);
}

public static string GenerateSHA256Hash(string input, string salt)
{
    byte[] bytes = System.Text.Encoding.UTF8.GetBytes(input + salt);
    SHA1Managed sha = new SHA1Managed();
    byte[] hash = sha.ComputeHash(bytes);

    return Convert.ToBase64String(hash);
}

Does anyone have an advise on how to do this on a Windows Store App?
Thanks
","There is an alternative to using RNGCryptoServiceProvider
var buffer = CryptographicBuffer.GenerateRandom(saltlength);
var string = CryptographicBuffer.EncodeToBase64String(buffer)

Windows.Security.Cryptography is the alternative to System.Security.Cryptography for windows store apps.
","151","<c#><hash><windows-store-apps><salt><sha>","2","0","1","2015-04-23 22:52:54","29835736","2","","209259","","2015-04-23 22:52:54","2015-04-23 22:40:26",""
"49813891","Unable to reference Jinja 2 variable inside a function","So i have a slight bit of an issue with jinja variable reference within a function.
I've tried a handful of different methods to make this work, but none of them have yield any results. I hope some of you can help me out here!
{% set device_type = salt['grains.get']('device','') %}
{% set ip_addr = salt['network.ip_addrs'](' +device_type+ ')[0] %}

I'd like to have the variable device_type inside the salt function within ip_addr.
I have tried the following already and none of it gave any results:
{% set ip_addr = salt['network.ip_addrs'](\' +device_type+ \')[0] %}
{% set ip_addr = salt['network.ip_addrs'](' ~ device_type ~ ')[0] %}
{% set ip_addr = salt['network.ip_addrs']( {{ device_type }})[0] %}
{% set ip_addr = salt['network.ip_addrs'](' {{ device_type }} ')[0] %}

Does anyone know how I could replace the device_type within that function?
","Apparently it was as easy as
{% set ip_addr = salt['network.ip_addrs']( device_type )[0] %}

Without anything supernatural.
","149","<function><templates><variables><jinja2><salt>","0","0","1","2018-04-23 08:08:03","49976225","5","","","","","2018-04-13 09:41:10",""
"36962945","password salt is not working after I hosted the website","I have created a small website that can download movies and tv series. There I added a user registration and login system. I used xampp latest version (php version 5.6.19) to check the website. In the registration php file, I have added password salt technique. It worked perfectly in the xampp. After I hosted my website it didn't worked. password salt is not generated and stored in the database. But username, email and password are going to the database successfully. 
register.php
<?php
require_once 'core/init.php';

if(Input::exists()){

        $user = new User();
        $salt = Hash::salt(32);

        try{

            $user->create(array(
                'uname' => Input::get('uname'),
                'mail' => Input::get('mail'),
                'pass' => Hash::make(Input::get('pass'), $salt),
                'salt' => $salt

            ));

            Session::flash('home', 'You have registered successfully now you can log in !');
            Redirect::to('index.html');

        }catch(Exception $e){
            die($e->getMessage());
        }


}

?>

hash.php
<?php
class Hash{
public static function make($string, $salt = ''){
    return hash('sha256', $string . $salt);
}

public static function salt($length){
    return mcrypt_create_iv($length);

}

public static function unique(){
    return self::make(uniqid());

}
}

user.php
<?php
class User{
private $_db,
        $_data,
        $_sessionName,
        $_cookieName,
        $_isLoggedIn;

public function __construct($user = null){
    $this->_db = DB::getInstance();
    $this->_sessionName = Config::get('session/session_name');
    $this->_cookieName = Config::get('remember/cookie_name');

    if(!$user){
        if(Session::exists($this->_sessionName)){
            $user = Session::get($this->_sessionName);

            if($this->find($user)){
                $this->_isLoggedIn = true;
            }else{
                //process logout
            }
        }
    }else{
        $this->find($user);
    }
}


public function create($fields = array()){
    if(!$this->_db->insert('users', $fields)){
        throw new Exception('There was a problem creating an account !');
    }
}

public function find($user = null){
    if($user){
        $field = (is_numeric($user)) ? 'id' : 'uname';
        $data = $this->_db->get('users', array($field, '=', $user));
        if($data->count()){
            $this->_data = $data->first();
            return true;
        }
        return false;
    }
}

public function login($username = null, $password = null, $remember = false ){

    if(!$username && !$password && $this->exists()){
        Session::put($this->_sessionName, $this->data()->id);
    }else{
    $user = $this->find($username);

    if($user){
            if($this->data()->pass === Hash::make($password, $this->data()->salt)){
                    Session::put($this->_sessionName, $this->data()->id);
                    if($remember){
                        $hash = Hash::unique();
                        $hashCheck = $this->_db->get('users_session', array('user_id', '=', $this->data()->id));

                        if(!$hashCheck->count()){
                            $this->_db->insert('users_session',array(
                                'user_id' => $this->data()->id,
                                'hash' => $hash

                            ));
                        }else{
                            $hash = $hashCheck->first()->hash;
                        }

                        Cookie::put($this->_cookieName, $hash, Config::get('remember/cookie_expiry'));
                    }
                    return true;    
                }
            }
        }

    return false;
}

public function exists(){
    return (!empty($this->_data)) ? true : false;
}

public function logout(){
    $this->_db->delete('users_session', array('user_id', '=', $this->data()->id));
    Session::delete($this->_sessionName);
    Cookie::delete($this->_cookieName);
}

public function data(){
    return $this->_data;
}

public function isLoggedIn(){
    return $this->_isLoggedIn;
}
}

What may cause the problem...
","Check if your hash function is supported by the PHP installation on your web host.
You may try this in your salt function - bin2hex(mcrypt_create_iv(30, MCRYPT_DEV_RANDOM))
","149","<php><mysql><oop><salt>","0","1","1","2016-05-01 08:51:12","36963035","5","","5832930","","2016-05-01 04:17:08","2016-05-01 04:07:45",""
"49336613","When creating hash + salt for password is there a way to avoid saving the salt as a separate field in the database","I am using the following code to generate a hash and salt for a user password:
        byte[] salt = new byte[128 / 8];
        using (var rng = RandomNumberGenerator.Create())
        {
            rng.GetBytes(salt);
        }

        string hashed = Convert.ToBase64String(KeyDerivation.Pbkdf2(
            password: password,
            salt: salt,
            prf: KeyDerivationPrf.HMACSHA1,
            iterationCount: 10000,
            numBytesRequested: 256 / 8));
    }

user.passwordHash = hashed;
user.passwordSalt = System.Text.Encoding.Default.GetString(salt);

Then to validate I am doing the following:
string hash = Convert.ToBase64String(KeyDerivation.Pbkdf2(
    password: passwordToValidate,
    salt: Encoding.UTF8.GetBytes(passwordSalt),
    prf: KeyDerivationPrf.HMACSHA1,
    iterationCount: 10000,
    numBytesRequested: 256 / 8));

return passwordHash == hash;

I got this code from this section of the asp.net core documentation.

Is the salt typically stored in its own field the way I am doing it or is there a way to store it all in one field and then pick it apart when validating?
Am I properly converting the salt byte array to a string when saving to the db and back to a byte array when validating?

","1) Salt is typically stored in its own field, but it's not a requirement - you can store password and salt together in one field if you want to. For example, with your code salt is of fixed size (16 bytes) and your hash is also of fixed size (32 bytes). So you can store them together in one 48-byte column and can always split them without any ambiguity. Of course you should always remember then what goes first: salt or key. If you store them in a string column as base-64, like you are doing now, you can add a separator (not required) - some character which cannot appear in base64, like semicolon. Then you can store like ""password_hash:salt"". I'd suggest to store in binary column though.
2) You are converting it wrong. You treat it as UTF-16 encoded string, which it is not - salt is random set of bytes and not a string in any encoding. So use base-64 like you already do for hash (if you insist on storing that as string):
user.passwordSalt = Convert.ToBase64String(salt);

","148","<c#><security><asp.net-core><salt><password-encryption>","1","1","1","2018-03-17 15:20:46","49338482","2","","","","","2018-03-17 13:33:56",""
"41805234","Issue in provisioning instances using Salt stack","I am trying to provision an instance in AWS using saltstack. I have salt version salt 2016.11.1 (Carbon) and my configuration is as follows
cloud.providers.d
 ec2-us-west-2-public:
  minion:
    master: 35.165.44.29
  id: AKIAI3XH2SIF4P37AZZA
  key: atdvow2UY2rXQqYQNqerQ4WqRzScHlzZ91kxqjFx
  private_key: /etc/salt/salt.pem
  keyname: salt
  ssh_interface: public_ips
  securitygroup: sg-c4a5abbd
  location: us-west-2
  availability_zone: us-west-2a
  provider: ec2
  del_root_vol_on_destroy: True
  del_all_vols_on_destroy: True
  rename_on_destroy: True

and cloud.profiles.d
ec2_west_nano_prod:
  provider: ec2-us-west-2-public
  image:  ami-b7a114d7
  size: t2.micro
  ssh_username: ubuntu
  tag: {'Environment': 'production'}
  availability_zone: us-west-2a
  block_device_mappings:
   - DeviceName: /dev/sda1
     EbsVolumeSize: 8
  minion:
     master: 35.165.44.29
  networkinterfaces:
   -DeviceIndex: 0
  PrivateIPAddresses:
   -Primary: True
   AssociatedPublicIPAddresses: False
   SubnetId: subnet-f1767887

when i try to run salt-cloud -m cloud.map.d/ec2-us-west-2.conf I get error saying
/usr/lib/python2.7/dist-packages/salt/config/__init__.py:2617: DeprecationWarning: The term 'provider' is being deprecated in favor of 'driver'. Support for 'provider' will be removed in Salt Nitrogen. Please convert your cloud provider configuration files to use 'driver'.
[ERROR   ] 'provider'
Traceback (most recent call last):
  File ""/usr/lib/python2.7/dist-packages/salt/utils/parsers.py"", line 200, in parse_args
    process_option_func()
  File ""/usr/lib/python2.7/dist-packages/salt/utils/parsers.py"", line 516, in process_config_dir
    self.config.update(self.setup_config())
  File ""/usr/lib/python2.7/dist-packages/salt/utils/parsers.py"", line 3022, in setup_config
    return config.cloud_config(self.get_config_file_path())
  File ""/usr/lib/python2.7/dist-packages/salt/config/__init__.py"", line 2231, in cloud_config
    providers_config)
  File ""/usr/lib/python2.7/dist-packages/salt/config/__init__.py"", line 2398, in vm_profiles_config
    return apply_vm_profiles_config(providers, overrides, defaults)
  File ""/usr/lib/python2.7/dist-packages/salt/config/__init__.py"", line 2425, in apply_vm_profiles_config
    if ':' in details['provider']:
KeyError: 'provider'
Usage: salt-cloud [options] <-m MAP | -p PROFILE> <NAME> [NAME2 ...]

salt-cloud: error: Error while processing <bound method SaltCloud.process_config_dir of <salt.cloud.cli.SaltCloud object at 0x7fc329091a10>>: Traceback (most recent call last):
  File ""/usr/lib/python2.7/dist-packages/salt/utils/parsers.py"", line 200, in parse_args
    process_option_func()
  File ""/usr/lib/python2.7/dist-packages/salt/utils/parsers.py"", line 516, in process_config_dir
    self.config.update(self.setup_config())
  File ""/usr/lib/python2.7/dist-packages/salt/utils/parsers.py"", line 3022, in setup_config
    return config.cloud_config(self.get_config_file_path())
  File ""/usr/lib/python2.7/dist-packages/salt/config/__init__.py"", line 2231, in cloud_config
    providers_config)
  File ""/usr/lib/python2.7/dist-packages/salt/config/__init__.py"", line 2398, in vm_profiles_config
    return apply_vm_profiles_config(providers, overrides, defaults)
  File ""/usr/lib/python2.7/dist-packages/salt/config/__init__.py"", line 2425, in apply_vm_profiles_config
    if ':' in details['provider']:
KeyError: 'provider'

What's the issue?
","I was using the Salt Formula to manage my master and noticed that the issue was caused by this section:
profiles:
  company-profiles.conf:
    ec2-or:
      ec2.oregon.small:
        network_interfaces:
          - DeviceIndex: 0
            SubnetId: subnet-foobar
            SecurityGroupId:
              - sg-foobar
        provider: ec2-or
        image: ami-foobar
        size: t2.small
        ssh_username: foobar
        del_root_vol_on_destroy: True
        del_all_vol_on_destroy: True
        sync_after_install: grains

The ec2-or section within my profile conf file was unnecessary, and causes the underlying python dict to be nested within 'ec2-or' and it failing to locate the provider.
","146","<salt>","0","0","1","2017-02-15 16:04:58","","1","","472495","","2017-01-24 22:15:01","2017-01-23 11:25:13",""
"16619276","Looking for a obj-c equivalent of this openSSL command","I am looking for obj-c code that is equivalent to this command
openssl enc -aes-128-cbc -k secret -P -md sha1
Once you type the above in command you get this output
salt=538C5F5ECAB7BFA2
key=43EB4C7D68263389D069381E48B6E0F3
iv =E26E4B49D75FA7C0CD82C40BB761B50A
","Any code I've seen using openssl from objective-c has used NSTask to run the openssl command.
Something like this should work (I've used something similar without any problems):
NSArray *args = [NSArray arrayWithObjects:@""enc"", @""-aes-128-cbc"", @""-k"", @""secret"", @""-P"", @""-md"", @""sha1"", nil];

NSTask *task = [[NSTask alloc] init];

[task setLaunchPath:@""/usr/bin/openssl""];
[task setArguments:args];
[task launch];    // Run
[task waitUntilExit]; // Wait

Then your response should be in [task standardOutput].
","144","<objective-c><encryption><openssl><key><salt>","-1","2","1","2013-05-18 01:19:58","","0","","","","","2013-05-17 23:38:55","2013-05-18 13:55:00"
"34984715","Encode password using php shall and decode it in cookie","I want to remember username and password.
When check cookie will set and hash the password but when retuning the hashed password in password field it also show hashed vale
here is my code to encode and decode please can someone give a better solution?
I use this to remember password
<?php
if($_POST['remember']) {
$remember_user = trim($_POST['username']);
$remember_pass = trim($_POST['password']);

$salt = ""@g26jQsG&nh*&#8v"";
$password_hash =  sha1($remember_pass.$salt);

setcookie('remember_user', $remember_user, $year);
setcookie('remember_pass', $password_hash, $year);


                $cookie_name = 'siteAuth';
        $cookie_time = time() - 100;
       $password_hash =  sha1($remember_pass.$salt);
   setcookie ($cookie_name, 'usr='.$remember_user.'&hash='.$password_hash, time() + $cookie_time);



}
else if(!$_POST['remember']) {
    if(isset($_COOKIE['remember_user']) && parse_str($_COOKIE['remember_pass'])) {

    if(($usr == $remember_user) && ($hash == md5($remember_pass)))
        {
        $_SESSION['username'] = $remember_user;
        }

                $cookie_name = 'siteAuth';
                $cookie_time = time() - 100;
                  setcookie ($cookie_name, 'usr='.$remember_user.'&hash='.$password_hash, time() + $cookie_time);

    }


}
?>

Here is my html part that i want to display the remembered password
      <input id=""password"" name=""password"" placeholder=""Password"" type=""text"" autocomplete=""on"" value=""<?php    
  $salt=""@g26jQsG&nh*&#8v""; 
  $password = sha1($_COOKIE['remember_pass'].$salt); echo $password; ?>""/>

But still am getting this in output f58b28222887e5cd4d10ec75d4bf2617c13a3f4a
I want to return the original password 
how can i do that?
","Take a look at password_hash and password_verify.
See: http://www.sitepoint.com/hashing-passwords-php-5-5-password-hashing-api/
","144","<php><cookies><salt>","1","0","2","2016-01-25 03:55:50","","3","","","","","2016-01-25 03:39:19",""
"34984715","Encode password using php shall and decode it in cookie","I want to remember username and password.
When check cookie will set and hash the password but when retuning the hashed password in password field it also show hashed vale
here is my code to encode and decode please can someone give a better solution?
I use this to remember password
<?php
if($_POST['remember']) {
$remember_user = trim($_POST['username']);
$remember_pass = trim($_POST['password']);

$salt = ""@g26jQsG&nh*&#8v"";
$password_hash =  sha1($remember_pass.$salt);

setcookie('remember_user', $remember_user, $year);
setcookie('remember_pass', $password_hash, $year);


                $cookie_name = 'siteAuth';
        $cookie_time = time() - 100;
       $password_hash =  sha1($remember_pass.$salt);
   setcookie ($cookie_name, 'usr='.$remember_user.'&hash='.$password_hash, time() + $cookie_time);



}
else if(!$_POST['remember']) {
    if(isset($_COOKIE['remember_user']) && parse_str($_COOKIE['remember_pass'])) {

    if(($usr == $remember_user) && ($hash == md5($remember_pass)))
        {
        $_SESSION['username'] = $remember_user;
        }

                $cookie_name = 'siteAuth';
                $cookie_time = time() - 100;
                  setcookie ($cookie_name, 'usr='.$remember_user.'&hash='.$password_hash, time() + $cookie_time);

    }


}
?>

Here is my html part that i want to display the remembered password
      <input id=""password"" name=""password"" placeholder=""Password"" type=""text"" autocomplete=""on"" value=""<?php    
  $salt=""@g26jQsG&nh*&#8v""; 
  $password = sha1($_COOKIE['remember_pass'].$salt); echo $password; ?>""/>

But still am getting this in output f58b28222887e5cd4d10ec75d4bf2617c13a3f4a
I want to return the original password 
how can i do that?
","Usually when you want to authenticate,Either you or anybody else should never know the client's password! never means never !
if you wish to Authenticate you should always follow this procedure :
Client Register : hash(password+salt) =>insert to DB
Client Authentication : you check if 
hash(Input_Password+salt)==(Password in DB)

","144","<php><cookies><salt>","1","0","2","2016-01-25 03:55:50","","3","","","","","2016-01-25 03:39:19",""
"43982076","salt attribute(key/value) replacement based on particular stanza","Using salt i want to find the attribute(key) and replace it with value based on specific stanza. The attribute(key) is present in multiple times in a file under different stanzas. I want to find my attribute under specific stanza and replace with value. 
Example:
output.kafka:
  # Boolean flag to enable or disable the output module.
  enabled:

I need to find enabled: under output.kafka: and replace it with value. The enabled: attribute present multiple times in my file.
Thanks
Bala.
","Salt has a few commands like file.line, file.replace and file.blockreplace that can modify an existing file, but I highly recommend managing the whole file using file.managed. It makes for a less brittle experience.
Here's an example based off your question:
Pillar top file:
cat /srv/pillar/top.sls

base:
  '*':
    - common
  'minion01':
    - minion01kafkasettings

Set our pillar data:
cat /srv/pillar/minion01kafkasettings.sls

kafka_output: True

Here's our filebeat template:
cat /srv/salt/filebeat.tmpl

output.kafka:
  # Boolean flag to enable or disable the output module.
  enabled: {{ pillar.get('kafka_output', True) }}

Here's the filebeat Salt sls file:
cat /srv/salt/filebeat.sls

the_filebeat_file:
  file.managed:
    - name: /etc/filebeat/filebeat.yml
    - template: jinja
    - user: root
    - group: root

Then we can run the following:
Refresh our pillar data
salt 'minion01' saltutil.refresh_pillar

Then apply the sls file:
salt 'minion01' state.sls filebeat

","144","<salt><salt-stack>","0","1","2","2017-05-16 18:13:31","","6","","","","","2017-05-15 14:28:45",""
"43982076","salt attribute(key/value) replacement based on particular stanza","Using salt i want to find the attribute(key) and replace it with value based on specific stanza. The attribute(key) is present in multiple times in a file under different stanzas. I want to find my attribute under specific stanza and replace with value. 
Example:
output.kafka:
  # Boolean flag to enable or disable the output module.
  enabled:

I need to find enabled: under output.kafka: and replace it with value. The enabled: attribute present multiple times in my file.
Thanks
Bala.
","I have another theory using file.seralize that might work but not in its current state, Maybe Dave could help.
{% set json_data = salt.cp.get_file_str('/etc/filebeat/filebeat.yml') | load_yaml  %}


{% do json_data.update({'enabled': pillar.get('kafka_output', True) }) %}

update_config:
  file.serialize:
    - name: /etc/filebeat/filebeat.yml
    - user: root
    - group: root
    - mode: 644
    - formatter: yaml
    - dataset: |
        {{ json_data | yaml(False)| indent(8) }}

This state should load the whole configuration file then you can modify any of its values based on your pillar setting using the do statement in your case it could be
{% do json_data.update({'enabled': pillar.get('kafka_output', True) }) %}

The config file is populated but not as exepcted as the result will be as following:
'enabled: true

  status: active

'

Note there are quotes and the yaml is not intended correctly, is there another way to make it work ? I will update this answer if I found any new results
","144","<salt><salt-stack>","0","0","2","2017-05-16 18:13:31","","6","","","","","2017-05-15 14:28:45",""
"26466354","make a safe password with bottle","First of all, I am using Python bottle with Sqlite. The trouble that I am having is that when I try to  salt and hash then stop the program. Every page that I have read generates a password in other ways, so that I don't know how to do it. All the ways that I tried were wrong.


def create(self):
		username = request.forms.get('username')
		password = request.forms.get('password')
		email = request.forms.get('email')
		sex = request.forms.get('sex')
		usertype = request.forms.get('usertype')
		registration = datetime.utcnow()
        salt = request.forms.get('password') ########## salt and hash
        hash = hashlib.sha512(password + salt).hexdigest()
		c = self.db.execute('insert into users (username, email, password, registration, sex, usertype) values (?, ?, ?, ?, ?, ?)', \
			(hash, salt, username, email, password, registration, sex, usertype))



","use ""passlib"" for password hashing and checking. read its docs and use one of the modern algorithms it suggests, like bcrypt, pbkdf2, sha512_crypt.
","141","<python><sql><hash><passwords><salt>","-1","1","1","2014-11-16 15:52:45","","0","","3929855","","2014-10-20 13:46:57","2014-10-20 13:02:14",""
"52285584","Bcrypt Python3 Django: Getting Invalid Salt Error","So was just trying to make a basic login and registration boiler plate with custom validations. But for some reason I am continuously getting an invalid salt error when it comes time to try and log in. Might I add, the way have my bcrypt set up has worked in prior projects.. But when I upgrade to Python3, for some reason it gets this error for me.. I started putting print statements throughout the entire app, and narrowed it down to my Login Form Validator. Here are the outputs:-----
test display of logpassword: rrrrrr
user password:  b'$2b$12$B3O9.UiaswKJvXkKAG2o9uqMHi5XrRBSyvDIPYwEa/o4AgyoGDww.'
what the encoded password we are seeing? b""b'$2b$12$B3O9.UiaswKJvXkKAG2o9uqMHi5XrRBSyvDIPYwEa/o4AgyoGDww.'""
what is the encoded password from logpassword?  b'rrrrrr'
TEst 2 post data encode:  b'rrrrrr'


compare this with the following code below, and you'll see that the password is hashing correctly from the registration. However, the post data entered, when encoded, is not hashing/encoding it properly to be compared with the hashed password in the DB. Any help is greatly appreciated, as I've been stuck on this for quite some time..
Code: - Views.py   Ill only post the relevant functions---
from django.shortcuts import render, redirect
from django.contrib import messages
from django.urls import reverse
from time import gmtime, strftime
import bcrypt
import re
from .models import *
from django.contrib import messages

def login(request):
    if request.method == ""POST"":
        #Check errors
        errors = User.objects.LogForm_Validator(request.POST)
        if len(errors):
            # if the errors object contains anything, loop through each key-value pair and make a flash message
            for key, value in errors.items():
                messages.error(request, value)
            return redirect('/')
        else:
            email = request.POST['logemail']
            user = User.objects.get(email=email)
            password = user.password
            print(""user: "", user)
            print(""Printed password: LOGFORM "", password)
            print(""email: "", email)

            request.session['id'] = user.id
            return redirect(""/success"")

def logout(request):
    # del request.session['id']
    request.session.clear()
    return redirect(""/"")

def registration(request):
    if request.method == ""POST"":
        #Check errors
        errors = User.objects.RegForm_Validator(request.POST)
        if len(errors):
            # if the errors object contains anything, loop through each key-value pair and make a flash message
            for key, value in errors.items():
                messages.error(request, value)
            return redirect('/')
        else:
            fName = request.POST['fName']
            lName = request.POST['lName']
            email = request.POST['email']
            birthdate = request.POST[""birthday""]
            password = request.POST['password']
            hashedPass = bcrypt.hashpw(password.encode(), bcrypt.gensalt())
            print(""PAssword: "", password)
            print(""hashed password: "", hashedPass)
            print(""Whats the salt: "", bcrypt.gensalt())
            user = User.objects.create(fName=fName, lName=lName, email=email, birthdate=birthdate, password=hashedPass)
            request.session['id'] = User.objects.get(email=email).id
            users = User.objects.all().order_by(""-created_at"") 
            context = { ""user"": user, ""users"": users}
            return render(request, ""logreg_app/success.html"", context)

Models.py ---- Down below is where youll see the said mentioned print statements.
from __future__ import unicode_literals
import bcrypt
import re
import datetime
from django.contrib import messages 

class UserManager(models.Manager):
    #Login Form:
        def LogForm_Validator(self, postData):
            errors = {}
            email = postData['logemail']
            user = User.objects.get(email=postData['logemail'])
            print(""Print user LOGFORM: "", user)

        # Email Vlidations:
        if not EMAILREGEX.match(postData['logemail']):
            errors['email'] = ""Your email must be valid characters only!""
        if len(User.objects.filter(email=email)) == 0:
            errors['user_exists'] = 'Account does not exist'
        else:
            print(""test display of logpassword:"", postData['logpassword'])
            print(""user password: "", user.password)
            print(""what the encoded password we are seeing?"", user.password.encode());
            # THIS RIGHT HERE IS THE ISSUE... THE ENCODED POSTDATE LOGPASSWORD, IS NOT BEING HASHED 
            print('what is the encoded password from logpassword? ', postData['logpassword'].encode())
            print(""TEst 2 post data encode: "", postData['logpassword'].encode())

            if bcrypt.checkpw(postData['logpassword'].encode(), user.password.encode()):
                print(""password match"")
            else:
                print(""failed password"") 
                errors['pw_match'] = 'Password Incorrect!'
                return errors

","","140","<django><bcrypt><salt>","1","","0","2018-09-11 23:56:17","","0","","10090278","","2018-09-11 23:56:17","2018-09-11 23:50:04",""
"19137090","Why have a good salt?","Let's say we don't use password_hash and use crypt() with sha512 instead to hash passwords. We need to add salt to the password, so an attacker couldn't use a rainbow table attack. Why the salt has to be good and very random as stated in many SO answers? Even if salt differs by a little or not very random, it will still give a totally different hash from others. So, an attacker won't know who uses the same passwords and he still won't be able to create just one rainbow table.
","Computing and storing a strong salt requires minimal effort yet reduces the chances of a rainbow table having being pre-computed with the salt astronomically small. 
If the salt was a 3 digit number it would be feasible that an attacker could have pre-computed rainbow tables for all possible salt combinations. If the salt is a random 24 character alpha-numeric string then the chances an attacker could pre-compute this for all possible salts are practically zero.
","139","<hash><passwords><salt>","4","2","2","2013-10-02 13:08:55","","7","","575765","","2013-10-02 13:08:55","2013-10-02 12:38:59",""
"19137090","Why have a good salt?","Let's say we don't use password_hash and use crypt() with sha512 instead to hash passwords. We need to add salt to the password, so an attacker couldn't use a rainbow table attack. Why the salt has to be good and very random as stated in many SO answers? Even if salt differs by a little or not very random, it will still give a totally different hash from others. So, an attacker won't know who uses the same passwords and he still won't be able to create just one rainbow table.
","A salt is supposed to be unique, must be long enough, and should be unpredictable. Randomness is not necessary, but it is the easiest way for a computer to meet those requirements. And it is not the purpose of a salt to be secret, a salt fulfills its purpose even when known.
Uniqueness means that it should not only be unique in your database (otherwise you could use a userid), it should be unique worldwide. Somebody could create rainbowtables for salts like e.g. 1-1000 and would be able to retrieve passwords for all accounts with those userids (often admin accounts have low userids).
Long enough: If the salt is too short (too few possible combinations), it becomes profitable again to build rainbow-tables. Salt and password together can then be seen as just a longer password, and if you can build a rainbow-table for this longer passwords, you also get the shorter original passwords. For very strong and long passwords, salting would actually not be necessary at all, but most human generated passwords can be brute-forced because they are short (people have to remember them).
Also using salts derrived from other parameters can fall into this category. Only because you calculate a hash from the userid, this doesn't increase the possible combinations.
Unpredictability is a bit less important, but imagine once more the case that you use the userid as salt, an attacker can find out what the next few userids will be, and can therefore precalculate a narrow number of rainbow-tables. Depending of the used hash-algorithm this can be applicable or not. He has a time advantage then, can retrieve the password immediately. More of a problem will be, if the admin accounts used a predictable salt.
So using a really random number, generated from the OS random source (dev/urandom), is the best you can do. Even when you ignore all reasons above, why should you use a derived salt when there is a better way, why not use the best way you know?
","139","<hash><passwords><salt>","4","2","2","2013-10-02 13:08:55","","7","","575765","","2013-10-02 13:08:55","2013-10-02 12:38:59",""
"9717116","Expanding and using salt generation code for a php login system","I am working on a php/mysql login system for a webproject. After looking through SO and alot of articles on the web Ive come up with a basic framework and started writing some code for it.  However Ive come to a bit of an impasse in password encryption.
After a nights worth of reading Ive found out that:

I should the users password with at least sha1 or sha2
I should also use a randomly generated salt (this is what I need help with) and append it to the password before encrypting it
the hashed password and the randomly generated salt should be stored in the database and then queried and combined/encrypted then checked against the users hashed password.

My problem is coming in randomly generating the salt,  
","uniqid() ?
http://sg2.php.net/uniqid
","138","<php><encryption><salt><salt-creation>","-1","0","2","2012-03-15 10:01:41","9717484","1","","","","","2012-03-15 09:37:19",""
"9717116","Expanding and using salt generation code for a php login system","I am working on a php/mysql login system for a webproject. After looking through SO and alot of articles on the web Ive come up with a basic framework and started writing some code for it.  However Ive come to a bit of an impasse in password encryption.
After a nights worth of reading Ive found out that:

I should the users password with at least sha1 or sha2
I should also use a randomly generated salt (this is what I need help with) and append it to the password before encrypting it
the hashed password and the randomly generated salt should be stored in the database and then queried and combined/encrypted then checked against the users hashed password.

My problem is coming in randomly generating the salt,  
","Possibilities I can think of:

Use mt_rand() in a loop to pick an ASCII code, get the corresponding character with chr() and concatenate to salt.
This allows to create salts with any length.
Define a string with available characters, use mt_rand() in a loop to pick random positions from it, extract the character in the selected position with substr() or mb_substr() and concatenate to salt.
This allows to create salts with a chosen character set and length.
Use a builtin function that generates a random string (e.g. uniqid()) and optionally hash it.
This is quick and simple.

I normally use the second option.
","138","<php><encryption><salt><salt-creation>","-1","0","2","2012-03-15 10:01:41","9717484","1","","","","","2012-03-15 09:37:19",""
"18682671","Is this the right way to store passwords in database and activate user accounts?","I'm building a website with HTML5, CSS, JavaScript, PHP and MySQL DB. I've created a login page and a 'create new user page' and would like to have an email send to active the user account. What I've built now is working but I would like to verify that I'm doing it safe enough.
When creating the user account I use this code:
$Allowed_Chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789./';
$Chars_Len = 63;
$Blowfish_Pre = 'xxxxxxxxxxx';   <- not sure if that is something I can share with anyone
$Blowfish_End = 'xxxxxxxxxxx';   <- not sure if that is something I can share with anyone

$Salt_Length = 21;
$mysql_date = date( 'Y-m-d' );
$salt = """";
for($i=0; $i<$Salt_Length; $i++)
{
    $salt .= $Allowed_Chars[mt_rand(0,$Chars_Len)];
}
$bcrypt_salt = $Blowfish_Pre . $salt . $Blowfish_End;
$hashed_password = crypt($password, $bcrypt_salt);
$activationkey = crypt( $hashed_password . $uname);

(I use the hash_pass + uname to create a new hash for $activationKey, without salt.)
In the database I then store:
uname, hashed_password, salt, activationkey and I set a flag that shows the account is NOT activated.
Then I send an e-mail to the user with the activationkey included.
When they user clicks the link I search for the e-mail addres and activationkey. If found I clear the activationkey field in the database and set the flag to show the user is activated and then redirect the user to the activation page.
Would love to hear your thoughts on this. 
Gabrie
","No that's not what you should do, the parameters for crypt() require a certain format, otherwise you will not get a BCrypt value and the salt will not be secure. In PHP 5.5 there is a function called password_hash() which solves exactly your problem, for earlier versions there exists a compatibilty pack from the same author, using this function is ""future proof"".
Activation keys should better not be derrived from other parameters, just generate a random token and send this token to the user. In the database you store only a hash of this token. This system can be used to generate password reset links too. An example implementation of a such tokens you can find here.
","138","<php><mysql><passwords><salt><crypt>","2","0","1","2013-09-08 11:28:04","18683125","3","","1673616","","2013-09-08 10:31:31","2013-09-08 10:26:20",""
"29152278","Random string vs hashed and salted string","Say I want to create a password that is purely random, call it randPass of size 32 characters. 
Is there any advantage in terms of security of using this directly as a password, vs hashing and salting it (like md5(randPass + salt)?  
I mean at the end of the day, they will both be a 32 character long random characters.
Here is a dummy example:
salt = SFZYCr4Ul1zz1rhurksC67AugGIYOKs5;
randPass = VgQK1AOlXYiNwfe74RlU8e8E4szC4UXK;

Then the md5(randPass + salt) = md5(VgQK1AOlXYiNwfe74RlU8e8E4szC4UXKSFZYCr4Ul1zz1rhurksC67AugGIYOKs5) becomes
hash = dddbc2cbda808beeb7e64ce578ef4020

","The main advantage of a RANDOM salt is that you cannot run a dictionary attack against the hash table since each password should have a different salt, thus ""Password"" and salt ""jfadljfadiufosd38120809321"" turns into ""Passwordjfadljfadiufosd38120809321"" which is definitely not in a pre-computed dictionary md5 hash dictionary so you cannot do a reverse lookup and figure out the users password.
","138","<hash><passwords><salt>","0","1","2","2015-03-19 19:20:56","29152315","0","","834045","","2015-03-19 18:32:42","2015-03-19 18:26:07",""
"29152278","Random string vs hashed and salted string","Say I want to create a password that is purely random, call it randPass of size 32 characters. 
Is there any advantage in terms of security of using this directly as a password, vs hashing and salting it (like md5(randPass + salt)?  
I mean at the end of the day, they will both be a 32 character long random characters.
Here is a dummy example:
salt = SFZYCr4Ul1zz1rhurksC67AugGIYOKs5;
randPass = VgQK1AOlXYiNwfe74RlU8e8E4szC4UXK;

Then the md5(randPass + salt) = md5(VgQK1AOlXYiNwfe74RlU8e8E4szC4UXKSFZYCr4Ul1zz1rhurksC67AugGIYOKs5) becomes
hash = dddbc2cbda808beeb7e64ce578ef4020

","By using a hash you are limiting the characters in the password.
Hash characters are: range(0,9) and range('a','f').
More characters is better. 
If the password is to be submitted to a web page then the symbols should not include those commonly used in sql injection. (e.g. "",',%,\)
To eliminate symbols change range('!','@') to range('0','9')
Set your criteria for how many and what characters and symbols are allowed.
This algorithm uses upper case, lower case, numeric and symbols.
Length of 32 characters.
$characters = array_merge(
range('a','z'),
range('A','Z'),
range('!','@'));
shuffle($characters);
shuffle($characters);
$characters = array_flip($characters);
$ndx = 33;
$pass = '';
while($ndx-->1){
  $pass .= array_rand($characters);
}
echo $pass;

","138","<hash><passwords><salt>","0","0","2","2015-03-19 19:20:56","29152315","0","","834045","","2015-03-19 18:32:42","2015-03-19 18:26:07",""
"15194826","protect hash code?","I'm sure there's something fundamental to all of this that simplifies the whole concept that I'm missing, but here goes:
OK, you salt & hash passwords for security, but what about the code that does it?
If you're on a host or vps, can't ""someone"" get ahold of your source b/c you compiled it there?  Or, if they can access your database, can't they access the program that does the encryption/decryption and bruteforce it until they get the algorithm?
I know nothing can ever be 100% secure, but how can security be improved in this context?
","There's nothing ""hidden"" in your source code regarding the hash algorithm.  In fact, you should be using a proven, well-known implementation of a strong hash and not implementing the algorithm yourself.
The salt is the part that needs to be protected.  That salt is not part of your code (or should not be) but rather should be stored in some sort of file storage / data base (depending on your application), and should be applied on a per-user bases (user Joe should have a different salt for his password than user Fred).
To be sure, it is critically important to protect the salt used with each user's password.  That's where proper file system / database permissions come into play.
On another note, your code should also be protected from any unauthorized user as well, but not for the reason of protecting the salt (at least not directly... if someone can access the salt, or just replace your code with their own, entirely bypassing the authentication check).
","137","<security><hash><shared-hosting><vps><salt>","1","1","2","2013-03-04 05:13:53","15194889","1","","","","","2013-03-04 04:58:05","2013-03-04 13:35:53"
"15194826","protect hash code?","I'm sure there's something fundamental to all of this that simplifies the whole concept that I'm missing, but here goes:
OK, you salt & hash passwords for security, but what about the code that does it?
If you're on a host or vps, can't ""someone"" get ahold of your source b/c you compiled it there?  Or, if they can access your database, can't they access the program that does the encryption/decryption and bruteforce it until they get the algorithm?
I know nothing can ever be 100% secure, but how can security be improved in this context?
","Salting will protect the data somewhat from a dictionary or rainbow table attack in the case that your data was compromised.  Brute force is not impossible, but will be slow and will need to be performed again for each password hash.  If salting was not done, brute force attacks become much easier to attain.
Contrary to what some say, the salt is not protected in any special way (nor does it need to be), but is present in plain text as appended to the hash.  It does however, need to be unique for each hash or it becomes pointless for this use.  This is in contrast to a pepper that is used for all hashes and must be protected.  Because of this distinction, salting is generally preferred unless access to the pepper is guaranteed to be restricted (not an easy task).
If you want improved security, don't use a shared host.  And don't allow direct access to the database.  And don't allow anyone that hasn't been prescreened to access your system.  In a practical sense, these aren't always viable options.  So just use a salt and live with it :)
","137","<security><hash><shared-hosting><vps><salt>","1","2","2","2013-03-04 05:13:53","15194889","1","","","","","2013-03-04 04:58:05","2013-03-04 13:35:53"
"18791853","Proper usage of salt for password storing","I'm quite new with this whole salting thing.
Let's say I store an admin password (crypt($pass,$salt)) in my config.php.
Now I don't suppose having a random string $salt right below my (crypt'ed) password in the config.php file is a good idea, right?
I haven't found a single tutorial that could tell me where I should store my salt or how to actually use it in an intelligent way.
Also, should I store my admin login details in a database even though my admin is the only one?
PHP version 5.1
<?php
//Admininstration
$ad_uname = ""church""; #username
$ad_pass = ""sj50sl3ZE8ABM""; #password: crypt(""blablah"", $salt)
$salt = ""sjoirjoewtointontont""; #salt
?>

","Have a look at PHP's function password_hash(), it solves the problem exactly as it should be done. The salt is included as part of the resulting hash-value and is plaint-text. The purpose of a salt is to prevent rainbow-table attacks.
What you have in mind is to add a server side secret, this can be done by adding a pepper or by encrypting the hash-value afterwards with a two way encryption algorithm (in addition to salting). The difficulty is, where to store this secret, if an attacker already has priviliges to read your source code, he will also have access to your secret (the code must be able to read it). If you are more interested in this topic, you cold have a look at this tutorial.
","135","<php><salt>","0","0","1","2013-09-15 19:56:27","","9","","1788516","","2013-09-13 17:30:59","2013-09-13 17:19:04",""
"8393169","Why should't I use an encryption salt I enter myself and use a function to randomize a salt for me?","I am just typing a salt and on php documentations, people always use some random variable function. What is the disadvantage of typing a salt instead of generating it?
","
Why force your users to type something?
Randomly generated bytes will have much more entropy that user input (which is typically only alphanumeric ASCII).

","135","<encryption><salt><sha><crypt><sha512>","1","1","2","2011-12-06 00:33:14","8393395","3","","","","","2011-12-05 23:03:12",""
"8393169","Why should't I use an encryption salt I enter myself and use a function to randomize a salt for me?","I am just typing a salt and on php documentations, people always use some random variable function. What is the disadvantage of typing a salt instead of generating it?
","The point of salt is to add entropy to the hash.
Cryptographic hashes are designed so that a tiny change to the input makes a huge difference in the resulting hash, so (barring a flaw in the algorithm) it becomes impossible to know whether the original input was the same from checking the similarity between two differently salted hashes.
But if you use the same salt for everyone, you lose much of the benefit that provides.  Two identical passwords hashed with the same salt will give you the same hash. 

If you use the same salt for everyone, then at the very least, someone can figure out that two users have the same password.  
More importantly, it greatly lessens the time someone has to spend to crack passwords, since they can now check the same hash against every user at once.
At worst, someone could already have a lookup table for the salt you use, making it trivial to crack every user's password.  

While it's possible to use a simple salt (like the user's ID) to achieve the goal of making cracking harder, it's only a tiny bit more effort to use a random string, and makes cracking even harder (since the salt is nearly impossible to predict ahead of time, the chance of having a precomputed lookup table for that salt becomes much lower).
","135","<encryption><salt><sha><crypt><sha512>","1","1","2","2011-12-06 00:33:14","8393395","3","","","","","2011-12-05 23:03:12",""
"9542764","How does salting protect against an attacker with access to your password hashes?","I've read a fair few questions on password salting and mostly they cover the stuff that (I think) I already understand. That is; the point of including a random salt in your password hashes is firstly to prevent two hashes being the same even when the password is the same. And secondly to thwart rainbow table attacks that match hashes against a precompiled list (because none of the precompiled hashes used the salts you have used, so a new rainbow table would need to be generated for each salt/hash). Feel free to correct me if I've misunderstood any of that.
Now my question: If an attacker has access to your hashes (the scenario we're protecting against) then that means they're accessing your database. That being the case surely it doesn't matter what the hash is, they can just replace it with whatever they want?
","Read access to a database does not imply write access to the database.
So yes, if an attacker can update the password hash to a known hashed password + salt, then the attacker can gain access to a specific account. But dumps of password hashes can come from places other than direct database access.
","134","<salt><password-encryption><rainbowtable>","0","1","2","2016-01-21 14:47:10","9542809","3","","4370109","","2016-01-21 14:47:10","2012-03-03 02:09:47",""
"9542764","How does salting protect against an attacker with access to your password hashes?","I've read a fair few questions on password salting and mostly they cover the stuff that (I think) I already understand. That is; the point of including a random salt in your password hashes is firstly to prevent two hashes being the same even when the password is the same. And secondly to thwart rainbow table attacks that match hashes against a precompiled list (because none of the precompiled hashes used the salts you have used, so a new rainbow table would need to be generated for each salt/hash). Feel free to correct me if I've misunderstood any of that.
Now my question: If an attacker has access to your hashes (the scenario we're protecting against) then that means they're accessing your database. That being the case surely it doesn't matter what the hash is, they can just replace it with whatever they want?
","It all depends on the account's permission. If a read only account was hacked, they can only read, but if a higher account got hacked, well, the attacker has higher permissions the farther up the ladder it goes.
","134","<salt><password-encryption><rainbowtable>","0","1","2","2016-01-21 14:47:10","9542809","3","","4370109","","2016-01-21 14:47:10","2012-03-03 02:09:47",""
"13217878","Am I going the right way to make login system secure with this simple password salting?","I have two fields in login table 

password
salt

And I have this little function to generate salt
function random_salt($h_algo=""sha512""){
        $salt1=uniqid(rand(),TRUE);
        $salt2=date(""YmdHis"").microtime(true);
        if(function_exists('dechex')){
            $salt2=dechex($salt2);
        }
        $salt3=$_SERVER['REMOTE_ADDR'];
        $salt=$salt1.$salt2.$salt3; 

        if(function_exists('hash')){
            $hash=(in_array($h_algo,hash_algos()))?$h_algo:""sha512"";
            $randomsalt=hash($hash,md5($salt)); //returns 128 character long hash if sha512 algorithm is used.
        }else{
            $randomsalt=sha1(md5($salt)); //returns 40 characters long hash
        }

        return $randomsalt;
    }

Now to create user password  I have following
$userinput=$_POST[""password""] //don't bother about escaping, i have done it in my real project.
$static_salt=""THIS-3434-95456-IS-RANDOM-27883478274-SALT""; //some static hard to predict secret salt.
$salt=random_salt(); //generates 128 character long hash.
$password =sha1($salt.$userinput.$static_salt);

$salt is saved in salt field of database and $password is saved in password field.
My problem, In function random_salt(), I m having this FEELING that I'm just making things complicated while this may not generate secure salt as it should. Can someone throw me a light whether I m going in a right direction? 
P.S. I do have an idea about crypt functions and like such. Just want to know is my code okay?
Thanks.
","This is obviously a security problem:
uniqid(rand(),TRUE);

How did you set the seed for rand().? Where is you entropy pool?
As long as you can't answer the salt has to be considered predictable. Remember: security doesn't come from code obscurity. 


If you choose a good PRNG all the other salts (e.g. server name, static long salt, time etc..) become irrilevant.
","133","<php><salt>","1","1","2","2012-11-05 10:23:16","13217935","0","","","","","2012-11-04 10:49:45",""
"13217878","Am I going the right way to make login system secure with this simple password salting?","I have two fields in login table 

password
salt

And I have this little function to generate salt
function random_salt($h_algo=""sha512""){
        $salt1=uniqid(rand(),TRUE);
        $salt2=date(""YmdHis"").microtime(true);
        if(function_exists('dechex')){
            $salt2=dechex($salt2);
        }
        $salt3=$_SERVER['REMOTE_ADDR'];
        $salt=$salt1.$salt2.$salt3; 

        if(function_exists('hash')){
            $hash=(in_array($h_algo,hash_algos()))?$h_algo:""sha512"";
            $randomsalt=hash($hash,md5($salt)); //returns 128 character long hash if sha512 algorithm is used.
        }else{
            $randomsalt=sha1(md5($salt)); //returns 40 characters long hash
        }

        return $randomsalt;
    }

Now to create user password  I have following
$userinput=$_POST[""password""] //don't bother about escaping, i have done it in my real project.
$static_salt=""THIS-3434-95456-IS-RANDOM-27883478274-SALT""; //some static hard to predict secret salt.
$salt=random_salt(); //generates 128 character long hash.
$password =sha1($salt.$userinput.$static_salt);

$salt is saved in salt field of database and $password is saved in password field.
My problem, In function random_salt(), I m having this FEELING that I'm just making things complicated while this may not generate secure salt as it should. Can someone throw me a light whether I m going in a right direction? 
P.S. I do have an idea about crypt functions and like such. Just want to know is my code okay?
Thanks.
","You really should take a look at this question/answer ::
How do you use bcrypt for hashing passwords in PHP?
In short, don't roll your own if you don't need to.
","133","<php><salt>","1","2","2","2012-11-05 10:23:16","13217935","0","","","","","2012-11-04 10:49:45",""
"11142626","Does obfuscating a security model have a place in password security?","When it comes to password security there are things that people agree on like storing salted hashes of passwords, which gives a statistical defense against a compromised model and data.
What some don't seem to agree with are what to do with the salts. There are an infinite number of techniques you can do to try to protect the salts as well, but many experts will suggest that they are just pointless obfuscation of the security model, and that over time the model will be exposed, and I find myself disagreeing with this, but I may not be understanding the other viewpoint.
What I don't understand is if your model is compromised, why should you assume a full compromise instead of a partial? If your security model is distributed across different pieces of infrastructure which aren't equally secured, a partial compromise might not even be a problem. (If you do something like, say, encrypt the salt and retrieve the encryption-key from a more highly secured environment that is less likely to be compromised)
I'm assuming that a compromise isn't always 100% here. I've never had a system hacked nor have I ever hacked so I don't have the complete picture.
","Security through obscurity, is, at best, a gamble.  Does it pay to store the salt somewhere else?  Probably.  But you have to look at the cost versus reward when you start getting into these multi-step security setups.  I would say, if your application requires it, you will know it.  Otherwise, adding more steps into the application for the sake of having super intense security may only give yourself headaches when things go wrong.  Not everyone needs NASA level security for their systems.  That isn't to say security isn't important.  It's just that you need to temper it to your current environment.
","131","<security><hash><passwords><password-protection><salt>","5","0","3","2012-06-21 16:44:54","11142826","0","1","","","","2012-06-21 16:30:22",""
"11142626","Does obfuscating a security model have a place in password security?","When it comes to password security there are things that people agree on like storing salted hashes of passwords, which gives a statistical defense against a compromised model and data.
What some don't seem to agree with are what to do with the salts. There are an infinite number of techniques you can do to try to protect the salts as well, but many experts will suggest that they are just pointless obfuscation of the security model, and that over time the model will be exposed, and I find myself disagreeing with this, but I may not be understanding the other viewpoint.
What I don't understand is if your model is compromised, why should you assume a full compromise instead of a partial? If your security model is distributed across different pieces of infrastructure which aren't equally secured, a partial compromise might not even be a problem. (If you do something like, say, encrypt the salt and retrieve the encryption-key from a more highly secured environment that is less likely to be compromised)
I'm assuming that a compromise isn't always 100% here. I've never had a system hacked nor have I ever hacked so I don't have the complete picture.
","
if your model is compromised, why should you assume a full compromise
  instead of a partial?  

You should always assume the worst case in security. This is the safest approach.  

a partial compromise might not even be a problem  

Perhaps. But are you really sure?
In your OP you are basing your analysis on too many assumptions. Perhaps in a very specific setup your evaluation that a partial compromise might not be a problem might be justifiable.
But then again you assume that the attacker is not good enough to find a hole.
Don't base your security model on assumptions.    
","131","<security><hash><passwords><password-protection><salt>","5","1","3","2012-06-21 16:44:54","11142826","0","1","","","","2012-06-21 16:30:22",""
"11142626","Does obfuscating a security model have a place in password security?","When it comes to password security there are things that people agree on like storing salted hashes of passwords, which gives a statistical defense against a compromised model and data.
What some don't seem to agree with are what to do with the salts. There are an infinite number of techniques you can do to try to protect the salts as well, but many experts will suggest that they are just pointless obfuscation of the security model, and that over time the model will be exposed, and I find myself disagreeing with this, but I may not be understanding the other viewpoint.
What I don't understand is if your model is compromised, why should you assume a full compromise instead of a partial? If your security model is distributed across different pieces of infrastructure which aren't equally secured, a partial compromise might not even be a problem. (If you do something like, say, encrypt the salt and retrieve the encryption-key from a more highly secured environment that is less likely to be compromised)
I'm assuming that a compromise isn't always 100% here. I've never had a system hacked nor have I ever hacked so I don't have the complete picture.
","The big difference between obfuscation and encryption is that what is obfuscated can be clarified without the need for anything beyond the obfuscated information - as long as you can figure out the type of data you are looking at, then you can find a way to clarify it. 
Encryption, meanwhile, can only be decrypted with the right key/password/cracking tool. Encrypted data without those things is very secure. 
Consequently obfuscation can at best slow down a determined attacker, although it might put off a less determined one. There are many easier and more maintainable things you can do around the security of your system and your servers to harden them against less determined attackers, so the cost of obfuscation in terms of additional work for you and your systems is rarely justified in my opinion.
To assume a compromise is not 100% when one occurs is a very risky endeavour as what you are actually assuming is that you are smarter and more aware of your system than your attacker. You may be right, but if you assume it and you are wrong then you are in very serious trouble indeed. You have to prove it, and given the problems with proving a negative it is safer to act as though you have been compromised completely when a compromise occurs and to design your systems so that they are as secure as possible even in the situation where a total compromise has occurred.
","131","<security><hash><passwords><password-protection><salt>","5","1","3","2012-06-21 16:44:54","11142826","0","1","","","","2012-06-21 16:30:22",""
"49468076","how to encode password with java in the same way that FOSUserBundle do","My database contains a table User with salt and password columns.
FOSUserBundle use sha512
# app/config/security.yml
# ...

encoders:
    ""FOS\UserBundle\Model\UserInterface"": sha512

But it is not all, there is others parameters like number of iteration, hashing algorithm,cost,key_lenght,encode as base64 etc, i taked an image for for those parameters.

In my java application, i need to encode the input password in the same way that fosuser do...
I tried to use org.apache.commons.codec.digest.Crypt, i don't know how to fix the parameters like fosuser do 
","Tomcat has a API level class MessageDigestCredentialHandler that does most of what you're describing.  If it's not exactly what you need, its source should give you enough of a pointer how to handle salts and iterations though.
First it can encode, or mutate, a password:
MessageDigestCredentialHandler credentialHandler = new MessageDigestCredentialHandler();
credentialHandler.setAlgorithm(""SHA-512"");
credentialHandler.setSaltLength(16);
credentialHandler.setIterations(5);
credentialHandler.mutate(""password"");
-> 5e0bdcf374c9c36b8930f23579ca0297$5$2c72f01ce132a1d070e67ad4730f3c26dba6d1dce7d32c6d8fe127afc952cd02308bdbdd45333e71f4dfed57bc5288ce501da30228907b9d49f5932896c025a2

Note how the resulting string has a salt then a $ then the number of iterations, another $ and the (hex) encoded password.
If it's hex encoding that's being used in your database, you're in a good place to match a password too:
MessageDigestCredentialHandler credentialHandler = new MessageDigestCredentialHandler();
credentialHandler.setAlgorithm(""SHA-512"");
String salt = ""5e0bdcf374c9c36b8930f23579ca0297"";
int iterations = 5;
String hexPassword = ""2c72f01ce132a1d070e67ad4730f3c26dba6d1dce7d32c6d8fe127afc952cd02308bdbdd45333e71f4dfed57bc5288ce501da30228907b9d49f5932896c025a2"";
credentialHandler.matches(""password"", salt + ""$"" + iterations + ""$"" + hexPassword);
-> true

If the salt and/or password are base 64 encoded, there's more to do, but take a look at the source for MessageDigestCredentialHandler.matches(String, String).  It does handle base64 encoding in there too, but from reading through it looks like there's no support for multiple iterations with that.  I'd suggest to look how it did the iterations for the hex encoded route.
","131","<java><fosuserbundle><encode><salt>","-1","1","1","2018-03-24 21:52:43","49470172","0","","4699375","","2018-03-24 18:18:34","2018-03-24 18:03:59",""
"5042321","How safe is this procedure?","I'm going to use this kind of approach to store my password:

User enters password
Application salts password with random number
Then with salted password encrypt with some encryption algorithm randomly selected array of data (consisting from predefined table of chars/bytes)

for simplicity it can be used just table of digits, so in case of digits random array would be simply be long enough integer/biginteger. 

Then I store in DB salt (modified value) and encrypted array

To check password validity:

Getting given password
Read salt from DB and calculate decrypt key
Try to decrypt encrypted array
If successfull (in mathematical mean) compare decrypted value byte by byte

does it contains only chars/bytes from known table. For instance is it integer/biginteger? If so - password counts as valid


What do you think about this procedure?
In a few words, it's a kind of alternative to using hash functions...
In this approach encryption algorithm is about to be used for calculation of non-inversible value.
EDIT
# Encrypt/decrypt function that works like this:
KEY=HASH(PASSWORD)
CYPHERTEXT = ENCRYPT(PLAINTEXT, KEY)
PLAINTEXT = DECRYPT(CYPHERTEXT, KEY)

# Encrypting the password when entered
KEY=HASH(PASSWORD)+SALT or HASH(PASSWORD+SALT)
ARRAY={A1, A2,... AI}
SOME_TABLE=RANDOM({ARRAY})
ENCRYPTED_TABLE = ENCRYPT(SOME_TABLE, KEY + SALT)

# Checking validity
DECRYPT(ENCRYPTED_TABLE, PASSWORD + SALT) == SOME_TABLE
if(SOME_TABLE contains only {ARRAY} elements) = VALID
else INVALID

","You would have to brute force the encryption on every password every time someone logs in.

Read salt from DB and calculate decrypt key

This can't be done unless you know what the password is before hand.
Just salt (And multiple hash) the password.
","130","<security><encryption><passwords><salt>","1","0","3","2011-02-21 04:34:30","5062331","2","","472270","","2011-02-18 16:06:54","2011-02-18 14:14:43",""
"5042321","How safe is this procedure?","I'm going to use this kind of approach to store my password:

User enters password
Application salts password with random number
Then with salted password encrypt with some encryption algorithm randomly selected array of data (consisting from predefined table of chars/bytes)

for simplicity it can be used just table of digits, so in case of digits random array would be simply be long enough integer/biginteger. 

Then I store in DB salt (modified value) and encrypted array

To check password validity:

Getting given password
Read salt from DB and calculate decrypt key
Try to decrypt encrypted array
If successfull (in mathematical mean) compare decrypted value byte by byte

does it contains only chars/bytes from known table. For instance is it integer/biginteger? If so - password counts as valid


What do you think about this procedure?
In a few words, it's a kind of alternative to using hash functions...
In this approach encryption algorithm is about to be used for calculation of non-inversible value.
EDIT
# Encrypt/decrypt function that works like this:
KEY=HASH(PASSWORD)
CYPHERTEXT = ENCRYPT(PLAINTEXT, KEY)
PLAINTEXT = DECRYPT(CYPHERTEXT, KEY)

# Encrypting the password when entered
KEY=HASH(PASSWORD)+SALT or HASH(PASSWORD+SALT)
ARRAY={A1, A2,... AI}
SOME_TABLE=RANDOM({ARRAY})
ENCRYPTED_TABLE = ENCRYPT(SOME_TABLE, KEY + SALT)

# Checking validity
DECRYPT(ENCRYPTED_TABLE, PASSWORD + SALT) == SOME_TABLE
if(SOME_TABLE contains only {ARRAY} elements) = VALID
else INVALID

","From what you write I assume you want to do the following:
# You have some encryption function that works like this
CYPHERTEXT = ENCRYPT(PLAINTEXT, KEY)
PLAINTEXT = DECRYPT(CYPHERTEXT, KEY)

# Encrypting the password when entered
ENCRYPTED_TABLE = ENCRYPT(SOME_TABLE, PASSWORD + SALT)

# Checking validity
DECRYPT(ENCRYPTED_TABLE, PASSWORD + SALT) == SOME_TABLE

First off: No sane person would use such a homemade scheme in a production system. So if you were thinking about actually implementing this in the real world, please go back. Don't even try to write the code yourself, use a proven software library that implements widely accepted algorithms.
Now, if you want to think about it as a mental exercise, you could start off like this:
If you should assume that an attacker will know all the parts of the equation, except the actual password. The attacker, who wants to retrieve the password, will therefore already know the encrypted text, the plaintext AND part of the password.
The chance of success will depend on the actual encryption scheme, and maybe the chaining mode.
I'm not a cryptanalyst myself, but without thinking about it too much I have the feeling that there could be a number of angles of attack.
","130","<security><encryption><passwords><salt>","1","2","3","2011-02-21 04:34:30","5062331","2","","472270","","2011-02-18 16:06:54","2011-02-18 14:14:43",""
"5042321","How safe is this procedure?","I'm going to use this kind of approach to store my password:

User enters password
Application salts password with random number
Then with salted password encrypt with some encryption algorithm randomly selected array of data (consisting from predefined table of chars/bytes)

for simplicity it can be used just table of digits, so in case of digits random array would be simply be long enough integer/biginteger. 

Then I store in DB salt (modified value) and encrypted array

To check password validity:

Getting given password
Read salt from DB and calculate decrypt key
Try to decrypt encrypted array
If successfull (in mathematical mean) compare decrypted value byte by byte

does it contains only chars/bytes from known table. For instance is it integer/biginteger? If so - password counts as valid


What do you think about this procedure?
In a few words, it's a kind of alternative to using hash functions...
In this approach encryption algorithm is about to be used for calculation of non-inversible value.
EDIT
# Encrypt/decrypt function that works like this:
KEY=HASH(PASSWORD)
CYPHERTEXT = ENCRYPT(PLAINTEXT, KEY)
PLAINTEXT = DECRYPT(CYPHERTEXT, KEY)

# Encrypting the password when entered
KEY=HASH(PASSWORD)+SALT or HASH(PASSWORD+SALT)
ARRAY={A1, A2,... AI}
SOME_TABLE=RANDOM({ARRAY})
ENCRYPTED_TABLE = ENCRYPT(SOME_TABLE, KEY + SALT)

# Checking validity
DECRYPT(ENCRYPTED_TABLE, PASSWORD + SALT) == SOME_TABLE
if(SOME_TABLE contains only {ARRAY} elements) = VALID
else INVALID

","The proposed scheme is, at best, slightly less secure than simply storing the hash of the password and salt.
This is because the encryption step simply adds a small constant amount of time to checking if each hash value is correct; but at the same time it also introduces classes of equivalent hashes, since there are multiple possible permutations of ARRAY that will be recognised as valid.
","130","<security><encryption><passwords><salt>","1","1","3","2011-02-21 04:34:30","5062331","2","","472270","","2011-02-18 16:06:54","2011-02-18 14:14:43",""
"55694194","Openssl RC4 vs C++ RC4 (with salt)","I am working some more with an RC4 C++ program to be compatible with the command line arguments. 
I was wondering if somebody can point me in the direction of some decent documentation of how the command line openssl rc4 uses the salts when encrypting vs decrypting, so I can incorporate some compatibility into my program. 
Thanks to some help from someone on here a few days ago, my program is compatible with the non-salted version, once the EVP_bytestokey function is incorporated. I looked into the EVP_bytestokey function, which openssl uses, and the documentation shows that it can take a salt parameter:
""The salt parameter is used as a salt in the derivation: it should point to an 8 byte buffer or NULL if no salt is used.""
I created an array of unsigned char's with the salt that the CLI gave me, and stored them in the array as their ASCII equivalents to pass in (to EVP_bytestokey) as the SALT parameter. 
Then I compared the file sizes and it shows that the encrypted/salted version of the file is 16 bytes larger than the original file. It appears the CLI version prepends ""salted__"" to the file, but that only accounts for 8 of the 16 bytes. 
Does anyone have any idea where the extra 8 bytes would be coming from? As far as I understand, the salt is prepended to the passphrase before passing into the keystream generator for RC4_setkey so I don't understand why the file size should be changed, outside of ""salted__"".
Also, do you think I am going in the right direction with the SALT array, storing the hex values as ASCII equivalents?
I have the documentation for the C functions being used here, but I can't seem to find anything specific about the mechanics of the CLI version, so I would appreciate any help I can get here.
","So for anyone who is curious, I figured it out. OpenSSL RC4 with salt option prepends 16 bytes to the beginning on the file after encryption. The first 8 bytes are: ""salted__"" and the second 8 bytes are the actual salt, shown as unsigned char's. Lseek can be used to skip bytes 1-8, then bytes 9-16 can be loaded into an unsigned char array (Has to be size 8 bytes). This array should then be cast to (const unsigned char*) while being passed in as the salt to EVP_bytestokey(), which is the 3rd parameter.
As for a user input option for the salt, I set it up to take in two digit hex inputs into an int variable, which I then pass into the unsigned char salt array.
","129","<c++><openssl><salt><rc4-cipher>","0","0","1","2019-04-17 21:18:04","55736108","5","","","","","2019-04-15 17:09:43",""
"54676717","How does Argon2id store salts in PHP?","The PHP implementation of Argon2id generates a salt for the developer. How does the application keep track of this salt? As a developer, how do I account for backups and otherwise ensuring that I don't lose the salt?
","Even though the documentation for the password_hash() function labels the function return value the ""hash,"" it is actually a compound string that also incorporates the salt and some metadata to identify which algorithm was used.  The companion password_verify() function parses this information to do the right thing.  
So you just have to store the result of password_hash().
","129","<php><hash><passwords><salt>","1","2","2","2019-03-08 12:57:10","54686050","1","","1558348","","2019-02-14 18:20:23","2019-02-13 17:45:41",""
"54676717","How does Argon2id store salts in PHP?","The PHP implementation of Argon2id generates a salt for the developer. How does the application keep track of this salt? As a developer, how do I account for backups and otherwise ensuring that I don't lose the salt?
","As Luis said, the salt is stored in the result of the hash functions, separated by $:
password_hash('secret', PASSWORD_ARGON2I);

Will return something like this:
$argon2i$v=19$m=1024,t=2,p=2$MEhSZkJLQXUxRzljNE5hMw$33pvelMsxqOn/1VV2pnjmKJUECBhilzOZ2+Gq/FxCP4

Where:

argon2i is the algorithm
v=19 is the version
m=1024,t=2,p=2 is the memory, iterations and parallelism options
MEhSZkJLQXUxRzljNE5hMw is the salt
And 33pvelMsxqOn/1VV2pnjmKJUECBhilzOZ2+Gq/FxCP4 is the actual hash.

So you just have to save the entire string, and it will keep everything PHP needs for its hashing methods, like password_verify.
","129","<php><hash><passwords><salt>","1","3","2","2019-03-08 12:57:10","54686050","1","","1558348","","2019-02-14 18:20:23","2019-02-13 17:45:41",""
"28291234","salt in every password yii","I have a table column called salt and it is a required field but I don't want to users to input their own salts
is there a way for our system to generate a salt for each password which are encrypted via sha1?
","You can use a random value for each entry as a salt. It doesn't matter what the value is as long as it looks random. 
Check this link : 
https://crackstation.net/hashing-security.htm
","128","<yii><passwords><salt>","0","0","4","2015-02-03 12:22:18","28291961","0","","","","","2015-02-03 04:11:33",""
"28291234","salt in every password yii","I have a table column called salt and it is a required field but I don't want to users to input their own salts
is there a way for our system to generate a salt for each password which are encrypted via sha1?
","Use simplest encrypt & decrypt info in PHP
$salt ='whatever_you_want';
function simple_encrypt($text)
{
    return trim(base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $salt, $text, MCRYPT_MODE_ECB, mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB), MCRYPT_RAND))));
}
function simple_decrypt($text)
{
    return trim(mcrypt_decrypt(MCRYPT_RIJNDAEL_256, $salt, base64_decode($text), MCRYPT_MODE_ECB, mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB), MCRYPT_RAND)));
}

","128","<yii><passwords><salt>","0","0","4","2015-02-03 12:22:18","28291961","0","","","","","2015-02-03 04:11:33",""
"28291234","salt in every password yii","I have a table column called salt and it is a required field but I don't want to users to input their own salts
is there a way for our system to generate a salt for each password which are encrypted via sha1?
","You are using Yii, so lets do this in YII style
I use 
Yii::app()->securityManager->generateRandomString($length,true)
To learn about it click here
","128","<yii><passwords><salt>","0","1","4","2015-02-03 12:22:18","28291961","0","","","","","2015-02-03 04:11:33",""
"28291234","salt in every password yii","I have a table column called salt and it is a required field but I don't want to users to input their own salts
is there a way for our system to generate a salt for each password which are encrypted via sha1?
","The Yii framework offers a class CPasswordHelper, which generates safe BCrypt hashes with an included salt per password. With this class you can do without a separate field for the salt. An example from the Yii docu:
$hash = CPasswordHelper::hashPassword($password);

if (CPasswordHelper::verifyPassword($password, $hash))
    // password is good
else
    // password is bad

","128","<yii><passwords><salt>","0","1","4","2015-02-03 12:22:18","28291961","0","","","","","2015-02-03 04:11:33",""
"51327286","jinja for loop in salt file.blockreplace for /etc/hosts","I have some issues with my jinja code inside my salt state, which should change the /etc/hosts file by a LDAP Pillar.
    {% set CID = grains['CID'] %}
    {% set ldap_pillar = 'ldap-hosts-{{CID}}' %}

    ldap-hosts:
        file.blockreplace:
            - name: /tmp/hosts
            - marker_start: ""# BEGIN SALT MANAGED CONTENT - DO NOT EDIT BETWEEN THIS - #""
            - marker_end: ""# END SALT MANAGED CONTENT - DO NOT EDIT BETWEEN THIS - #""
            - content:
                {% for entry in {{ salt.pillar.get('ldap_pillar') }} %}
                    {% for hostname, ip in entry.items %}
                        {{ip}}  {{hostname}}
                    {% endfor %}
                {% endfor %}
            - show_changes: True
            - append_if_not_found: True

The LDAP Pillar serves the following Format:
    local:
        |_
          ----------
          cn:
              host1.domain.tld
          ipHostNumber:
              4.4.4.4
        |_
          ----------
          cn:
              host2
          ipHostNumber:
              8.8.8.8

Now I like to catch all the IPs and Hostnames a build a valid host file.
Here is my Error:
    local:
        Data failed to compile:
    ----------
        Rendering SLS 'base:ldap_hosts' failed: Jinja syntax error: expected token ':', got '}'; line 10

    ---
    [...]
        file.blockreplace:
            - name: /tmp/hosts
            - marker_start: ""# BEGIN SALT MANAGED CONTENT - DO NOT EDIT BETWEEN THIS - #""
            - marker_end: ""# END SALT MANAGED CONTENT - DO NOT EDIT BETWEEN THIS - #""
            - content:
                {% for entry in {{ salt.pillar.get('ldap_pillar') }} %}    <======================
                    {% for hostname, ip in entry.items %}
                        {{ip}}  {{hostname}}
                    {% endfor %}
                {% endfor %}
            - show_changes: True
    [...]
    ---

","I just  fiexed it. It was quiet easy.
{% set CID = grains['CID'] %}
{% set ldap_pillar = 'ldap-hosts-'+CID %}

ldap-hosts:
    file.blockreplace:
        - name: /etc/hosts
        - marker_start: ""# BEGIN SALT MANAGED CONTENT - DO NOT EDIT BETWEEN THIS - #""
        - marker_end: ""# END SALT MANAGED CONTENT - DO NOT EDIT BETWEEN THIS - #""
        - content: |
            {% for entry in salt['pillar.get'](ldap_pillar) -%}
                {{entry.ipHostNumber}}  {{entry.cn}}
            {% endfor %}
        - show_changes: True
        - append_if_not_found: True

Now everything worked good.
","127","<ldap><jinja2><salt>","1","0","1","2018-07-16 08:37:41","51357722","0","","10076498","","2018-07-13 15:24:41","2018-07-13 14:20:27",""
"16573916","iOS App for emergency response - how to secure the data without a password?","I have a unique use case here: I need to enhance a stand-alone iPhone app ""EmergencyResponse"" (name changed for this post) that is used by at-risk patients. Patients/Caregivers setup the app with information about their medications, physician contact info, family contact, info etc.
The app puts up a message on the iPhone lock screen with ""Unlock phone and open 'EmergencyResponse' which will guide you on how to assist me""
So if the patient passes out somewhere and a good samaritan comes by, they see the message and proceed to open the app on the phone. Once the app is open - the good samaritan can then see a message ""Hi my name is John Smith. If I am in trouble call my wife Jill Smith at 123-456-7890 (Cell)... etc"" The good samaritan also gets to see the patients medical condition details, medications being taken etc (all things that would aid the emergency response folks)
The company that's sponsored the app wants to make sure I use encryption without compromising the usage (i.e. users cannot be asked for a password). I was thinking of storing an encryption key within the code. The data elements stored in core data fields could be encrypted with the key and unencrypted when the database needs to be accessed. There's just a limited amount of data and nothing to query so after un-encrypting the data I could keep everything in the Model objects.
Before I roll up my sleeves and begin, I was hoping to get some sound advise on whether this will work, whether it is the best option or if there is something else that will work better (I've heard of SALT lists - but never used those)! Look forward to your responses!
","Two thoughts:
1) just store all the data in a dictionary in the KeyChain - I'm not sure what a reasonable limit is, but I imagine a few thousand bytes isn't going to be a problem.
2) You could create a encryption key at launch, random and salted etc, then store it in the keychain.
However, what I don't understand is why you want to encrypt at all. If this person looses the phone, the data can be read off the screen, no? So you just want to protect the data in the file system, but its OK for a random person to read it off the screen?
","126","<iphone><ios><encryption><salt><saltedhash>","0","1","1","2013-05-15 20:54:23","16574799","0","","1376844","","2013-05-15 20:34:29","2013-05-15 19:58:09",""
"13531647","What size should I use in a CreateSalt class?","
Possible Duplicate:
What is the optimal length for user password salt? 

What size should I use in a CreateSalt class?
private static string CreateSalt(int size)

","Having just done this exact same thing this week, I decided on an byte[8] salt generated by the RNGCryptoServiceProvider class in .Net 4.
Seemed to be a decent size to avoid collisions with other salts.
Si
","126","<asp.net><asp.net-mvc><hash><asp.net-mvc-4><salt>","0","1","1","2012-11-25 22:29:15","13531861","4","","-1","","2017-05-23 12:12:22","2012-11-23 15:07:43","2012-11-24 05:10:43"
"29311365","Name and Implementation for MD5 hashing password and salt before hashing them together","Is there a name for this variation of a salted MD5?
    $hash = md5( md5( $salt ) . md5( $password ) );
(for clarity the '.' there is concatenation)
And more importantly, can anyone find an implementation for this scheme for OpenDJ?
","There is no implementation of this scheme that I know of for OpenDJ. 
But password storage schemes in OpenDJ can be easily extended by implementing an extension of the PasswordStorageScheme abstract class.
I guess this is for migrating existing hashed passwords. Which product uses such algorithm ?
","124","<passwords><md5><salt><opendj>","0","0","1","2015-03-29 18:48:30","","2","","","","","2015-03-27 22:42:25",""
"17494028","MYSQL and random characters messing it","This salt messing up my SELECT command:

p‚ÙÕ†¤éÿ5xÃø¤ü¥–ä™m›|§Éá\0yå–e

decoded output:
p‚&Ugrave;&Otilde;†&curren;&eacute;&yuml;5x&Atilde;&oslash;&curren;&uuml;&yen;–&auml;™m›|&sect;&Eacute;&aacute;\0y&aring;–e

Without salt:
mysql> SELECT userid, username FROM user;
+--------+--------------+
| userid | username     |
+--------+--------------+
|      1 | user1        |
|      2 | user2        |
|      3 | user3        |
|      4 | user4        |
+--------+--------------+
4 rows in set (0.00 sec)

With salt:
mysql> SELECT userid, username, salt FROM user;
+--------+--------------+----------------------------------+
| userid | username     | salt                             |
+--------+--------------+----------------------------------+
|      1 | user1        | ]ææ=°ù¡£YÒp£'Rm§Éá yåe | |
|      3 | user2        | Â¸ÀçqµgsN\ôü¥ä
ÉªÓñ1r¦ôyr$ÅK |
|      4 | user4        | \7øþ ÇãÙr|ú&eå¡%»
                                           yYRìÚ¬E |
+--------+--------------+----------------------------------+
4 rows in set (0.00 sec)

Function I'm using for getting my salt generated:

$salt = mcrypt_create_iv(32, MCRYPT_DEV_RANDOM);

Escape it with:

$salt = mysql_real_escape_string($salt);

Problem: User2's row is never shown when SELECTing the 'salt'. Anyone why?
Related problem: User3 also has newline, it's kinda messing up my table, probably same problem as above.
What I have tried with no luck:
I have googled each word with ""mysql"" end of it. I didn't find anything..
Thanks.
","Looks like you can query binary columns with the hex function and it will give you a hex representation of the bytes, which won't funk up your output:
select userid, username, hex(salt) from user;

link to MySQL binary documentation
","123","<mysql><select><salt><sqlcommand>","2","1","2","2013-07-06 06:23:17","17495237","5","","","","","2013-07-05 17:23:47",""
"17494028","MYSQL and random characters messing it","This salt messing up my SELECT command:

p‚ÙÕ†¤éÿ5xÃø¤ü¥–ä™m›|§Éá\0yå–e

decoded output:
p‚&Ugrave;&Otilde;†&curren;&eacute;&yuml;5x&Atilde;&oslash;&curren;&uuml;&yen;–&auml;™m›|&sect;&Eacute;&aacute;\0y&aring;–e

Without salt:
mysql> SELECT userid, username FROM user;
+--------+--------------+
| userid | username     |
+--------+--------------+
|      1 | user1        |
|      2 | user2        |
|      3 | user3        |
|      4 | user4        |
+--------+--------------+
4 rows in set (0.00 sec)

With salt:
mysql> SELECT userid, username, salt FROM user;
+--------+--------------+----------------------------------+
| userid | username     | salt                             |
+--------+--------------+----------------------------------+
|      1 | user1        | ]ææ=°ù¡£YÒp£'Rm§Éá yåe | |
|      3 | user2        | Â¸ÀçqµgsN\ôü¥ä
ÉªÓñ1r¦ôyr$ÅK |
|      4 | user4        | \7øþ ÇãÙr|ú&eå¡%»
                                           yYRìÚ¬E |
+--------+--------------+----------------------------------+
4 rows in set (0.00 sec)

Function I'm using for getting my salt generated:

$salt = mcrypt_create_iv(32, MCRYPT_DEV_RANDOM);

Escape it with:

$salt = mysql_real_escape_string($salt);

Problem: User2's row is never shown when SELECTing the 'salt'. Anyone why?
Related problem: User3 also has newline, it's kinda messing up my table, probably same problem as above.
What I have tried with no luck:
I have googled each word with ""mysql"" end of it. I didn't find anything..
Thanks.
","Actually it should be no problem to store and retrieve binary data in your MySql database. Just make sure you escape it properly for the needed target system. This means:
To store the binary string in the MySql database, you need an INSERT query. Escape the binary string with mysqli_real_escape_string() before adding it to the query, or use parametrized queries. BTW mysql_* functions are deprecated, you should switch to mysqli_* functions or to PDO.
When reading the string from the database, you will get back the original unescaped binary string. To display this string you need to escape it for HTML output, the function htmlspecialchars() is a good choice then.
You seem to give out the result in some type of console, depending on whether this is your own code running, you can escape it correctly for this type of output, or you simply have to keep in mind that what you see is not what you got. The tool phpMyAdmin is circumventing this problem by giving out the text [BLOB - 32Bytes].
A quick note: If you need the salt for hashing passwords, you can make your life easier if you use an algorithm like BCrypt. PHP's own implementation password_hash() will then include the password specific salt in the hash-value itself, you could do without a user specific salt then.
","123","<mysql><select><salt><sqlcommand>","2","0","2","2013-07-06 06:23:17","17495237","5","","","","","2013-07-05 17:23:47",""
"55232548","Unable to target salt minion using customized grains","I created a simple Salt Stack Cluster with a master and minion. Then I manually added a customized grains to the minion in the file /etc/salt/grains.
mykey: hello-key

I did see this key when running ""salt '*' grains.items"" in the master
  ...
  localhost:
        ip-172-31-24-109.us-west-2.compute.internal
    lsb_distrib_codename:
        CentOS Linux 7 (Core)
    lsb_distrib_id:
        CentOS Linux
    machine_id:
        b30d0f2110ac3807b210c19ede3ce88f
    manufacturer:
        Xen
    master:
        ec2-54-186-104-181.us-west-2.compute.amazonaws.com
    mdadm:
    mem_total:
        15883
    mykey:
        hello-key
    ...

Now the wired part is when I tried to target this minion through my customized grains, it doesn't work while every other way works!
[root@ip-172-31-28-130 ~]# salt '*' saltutil.refresh_modules
ip-172-31-24-109.us-west-2.compute.internal:
    True
[root@ip-172-31-28-130 ~]# salt '*' test.ping
ip-172-31-24-109.us-west-2.compute.internal:
    True
[root@ip-172-31-28-130 ~]# salt -G 'mem_total:*' test.ping
ip-172-31-24-109.us-west-2.compute.internal:
    True


[root@ip-172-31-28-130 ~]# salt -G 'mykey:hello-key' test.ping
ip-172-31-24-109.us-west-2.compute.internal:
    Minion did not return. [No response]

Anyone has a idea or suggestion?
","It seems that you really have a connectivity problem, not a targetting one.
Your targetting is OK, if it was not you would have a message like
$ salt 'minion' test.ping
No minions matched the target. No command was sent, no jid was assigned.
ERROR: No return received

","123","<salt-stack><salt>","0","0","1","2019-03-20 10:24:38","","1","","","","","2019-03-19 01:53:12",""
"45608297","Salting and hash not working in php login","I am trying to learn PHP from O'Reilly (Robin Nixon) and the code written in that book is not working. I have already added the values to the database using this code
    $query = ""CREATE TABLE users (
    forename VARCHAR(32) NOT NULL,
    surname VARCHAR(32) NOT NULL,
    username VARCHAR(32) NOT NULL UNIQUE,
    password VARCHAR(32) NOT NULL)"";
$result = $conn->query($query);
if (!$result) die($conn->error);*/

$salt1 = ""qm&h*""; $salt2 = ""pg!@"";

$forename = 'Bill';
$surname = 'Smith';
$username = 'bsmith';
$password = 'mysecret';
$token = hash(""ripemd128"", ""$salt1$password$salt2"");

add_user($conn,$forename,$surname,$username,$token);

$forename = 'Pauline';
$surname = 'Jones';
$username = 'pjones';
$password = 'acrobat';
$token = hash('ripemd128', '$salt1$password$salt2');

add_user($conn,$forename,$surname,$username,$token);

function add_user($conn,$fn,$sn,$un,$pw) {
    $query = ""INSERT INTO users VALUES('$fn','$sn','$un','$pw')"";
    $result = $conn->query($query);
    if (!$result) die($conn->error);
}

And then when I try to login, it is giving me the error. For better understanding, I have customized the error statement and it is giving me error1. I also tried to store password in database without using hash and salting and after that when I tried to login without using hash and salting, it worked perfectly fine, that proves that the problem is with either hash or salting or both. I am using the following code according the book.
    if (isset($_SERVER['PHP_AUTH_USER']) &&
    isset($_SERVER['PHP_AUTH_PW']))
{
    $un_temp = mysql_entities_fix_string($conn, $_SERVER['PHP_AUTH_USER']);
    $pw_temp = mysql_entities_fix_string($conn, $_SERVER['PHP_AUTH_PW']);

    $query = ""SELECT * FROM users WHERE username='$un_temp'"";
    $result = $conn->query($query);
    if (!$result) {
        die($conn->error);
    } elseif($result->num_rows) {
        $row = $result->fetch_array(MYSQLI_NUM);
        $result->close();
        $salt1 = ""qm&h*""; $salt2 = ""pg!@"";
        $token = hash(""ripemd128"", ""$salt1$pw_temp$salt2"");

        if ($token == $row[3]) {
            echo ""$row[0] $row[1] : Hi $row[0], you are now logged in as '$row[2]'"";
        } else {
            die(""error1 - Invalid username/password combination"");
        }
    } else {
        die(""error2 - Invalid 2 username/password combination"");
    }
} else {
    header('WWW-Authenticate: Basic realm=""Restricted Section""');
    header('HTTP/1.0 401 Unauthorized');
    die(""Please enter your username and password"");
}
$conn->close();

function mysql_entities_fix_string($conn, $string) {
    return htmlentities(mysql_fix_string($conn, $string));
}
function mysql_fix_string($conn, $string) {
    if (get_magic_quotes_gpc()) $string = stripslashes($string);
    return $conn->real_escape_string($string);
}
?>

","I had used some code to store password in My SQL using hash and salt try using that,
$salt=""pg!@"";
$password=""abcd"";(for example)
$password_salt = $password.$salt;
$password_hash = hash('sha256', $password_salt);
u can use this password hash in your query for storing password.

Hope it helps

","122","<php><mysql><hash><salt>","1","0","1","2017-08-10 11:40:59","","14","","8338361","","2017-08-10 09:22:50","2017-08-10 08:26:54",""
"34806577","Salt Before Hash or Hash Before Salt?","It is clear that we should salt and hash passwords before writing to the database. For this purpose, I have seen 2 different fundamental approaches:

Salting before hashing
hash(password + salt)

Hashing before salting
hash(hash(password) + salt)


My instincts somehow say that there is something wrong in the 2nd approach due to the hashing before salting, but that is only my instinct without cryptography basis.
Is one of these methods is more secure than the other? Is there any weakness in the 2nd method?
","Recommended hash algorithms like PBKDF2 or BCrypt cannot calculate a hash in a single pass, so neither of the described approaches is sufficient. They should offer a cost factor, which controls the necessary time to calculate a single hash. The cost factor determines how many rounds of hashing are done.
How the salt is applied is part of the algorithm, so it is best to leave this to the algorithm.
This is how BCrypt applies the salt (from Wikipedia):
EksBlowfishSetup(cost, salt, key)
    state \gets InitState()
    state \gets ExpandKey(state, salt, key)
    repeat (2cost)
        state \gets ExpandKey(state, 0, key)
        state \gets ExpandKey(state, 0, salt)
    return state

","121","<hash><passwords><salt>","0","0","1","2016-01-15 09:06:36","","2","","","","","2016-01-15 08:01:12",""
"21561172","How do I convert rounds of hashing with hash() to init/update/final?","Say I have a linear hashing algorithm:
<?php
    $input = ""password1"";

    $round1 = hash('sha512', $input, true);
    $round2 = hash('sha512', $round1, true);

    echo(base64_encode($round2) . ""<br>\n"");
?>

How would I convert this to a for loop using hash_init, hash_update, and hash_final? I have a algorithm using these in a for loop right now, but I am unable to post it.
","Scratch what I said about closing the handle, that's what hash_copy() function is for. You're probably looking for something like:
$algo = 'sha512';
$input = 'password';
$rounds = 1000;

function extend($algo, $rounds, $input) {
    $ctx = hash_init($algo);
    hash_update($ctx, $input);
    for($i=1; $i<$rounds; $i++) {
        hash_update($ctx, hash_final(hash_copy($ctx), TRUE));
    }
    return hash_final($ctx, TRUE);
}
echo base64_encode(extend($algo, $rounds, $input));

But this essentially appends the hashes together, whereas your existing code re-hashes the hashes. You will not be able to get the same result as the code you posted using this method.
If you want to replicate the code you have, then something like:
$algo = 'sha512';
$input = 'password';
$rounds = 1000;

function cycle($algo, $rounds, $input) {
    $curhash = reinvent_the_wheel($algo, $input);
    for($i=1; $i<$rounds; $i++) {
        $curhash = reinvent_the_wheel($algo, $curhash);
    }
    return $curhash;
}

//equivalent to hash($algo, $input, $true);
function reinvent_the_wheel($algo, $input) {
    $ctx = hash_init($algo);
    hash_update($ctx, $input);
    return hash_final($ctx, TRUE);
}

echo base64_encode(cycle($algo, $rounds, $input)) . ""\n"";

Which is basically the same code as you posted, just with a for loop added.
","120","<php><hash><iteration><salt><sha512>","0","3","1","2014-02-04 19:46:27","21561940","11","1","","","","2014-02-04 19:05:39",""
"50611093","How to handle salts that can't be random? A deterministic salting strategy","Consider the following scenario:

Users enter unique codes (say something like a gift card) on a website. 
The code corresponds to an object in the database which must be retrieved.
The code is a secret and cannot be stored as plain text.
Instead, the code will be hashed and stored in the database. The hash algorithm will be sha-512 or bcrypt combined with some salting strategy. 

In order to look up the code, a hash of the user entered code must be taken. Typically, in the case of password authentication, the identity of the user is already known and thus the salt can be retrieved from the database before computing the hash. In the above scenario though it's not possible to load the salt associated with the code since we don't know which object in the database the code corresponds to. This seems to imply there is no such salting strategy for this scenario for which the salts can be random.
I would like input on the following ideas:
Can we hash (say sha2) of the user entered code to act as the salt?  
salt = sha2(code)
hashedCode = hash(code + salt)

If there are vulnerabilities of the above, can including some additional global secret as part of the hash help alleviate the risk? 
salt = sha2(code + globalSecret)
hashedCode = hash(code + salt)

Thanks!
","Hashing is the absolute wrong approach to this. I'll get to that in a sec, but first let me address the lookup in the database issue.
Lookup secrets in a db issue
The reason most gift cards have a code on the front and a scratch off secret on the back solves this.
The user inputs the code on the front. Then your app pulls up the database record. Then the user inputs the scratch off code on the back. And you can compare that code with the one in your database.
Another way to do this is to split the code so the first part is the database record ID, and the second part is the code to compare. Ex:
1234 5511 2121 1234 --- 12345511 is the record ID, and 21211234 is the secret code.

Hashing is the wrong approach
All that is kinda irrelevant to the question which is about hashing. We suggest you hash passwords because we don't want someone to get a hold of the database and reverse the passwords and then use those passwords for other websites.
In your scenario, you could end up in a state where someone steals your database, and then is able to guess all the codes. Well, here is the problem with your solution. If i know the codes are between 1 and 100000000, then i can innumerate 1 through 100000000, compute the hash/bcrypt for each of them, and recover all of the codes. I can do that in minutes. Unless you're sending out 2^128 length codes (which i'd never type in), the solution is totally flawed.
Of course, this is why they have the salt value. So that I have to go to each giftcode hash, and run through all 10000000 values. But this is still a couple hours of work, not years which is what you'd like. A salt doesn't fix the problem at all.

How to do this thing then?
If your risk is someone stealing the database, and then using all the gift codes to steal money, one of two things happens. You either cancel all the codes (then a bunch of people holding gift cards get pissed), or you protect the codes.
Instead of storing the code in plain text, or the code hashed (which is basically plaintext because I can enumerate all the possible values in a few minutes), you want to use HMAC. HMAC is a hash AND a secret key.
giftcode_in_db = HMAC(<SECRETKEY>, giftcode_from_user)
Now, to protect all of your gift codes, you simply need to protect the secret key. Only use it in memory, and have an operator enter it by hand or use Hashicorp Vault to do the actual HMAC operation.
If someone steals your database, they also need to steal the secret key. If someone steals the secret key, they also need to steal the database.
","120","<security><hash><architecture><salt><deterministic>","0","2","2","2018-05-31 15:26:20","","0","","3521141","","2018-05-30 18:52:19","2018-05-30 18:13:42",""
"50611093","How to handle salts that can't be random? A deterministic salting strategy","Consider the following scenario:

Users enter unique codes (say something like a gift card) on a website. 
The code corresponds to an object in the database which must be retrieved.
The code is a secret and cannot be stored as plain text.
Instead, the code will be hashed and stored in the database. The hash algorithm will be sha-512 or bcrypt combined with some salting strategy. 

In order to look up the code, a hash of the user entered code must be taken. Typically, in the case of password authentication, the identity of the user is already known and thus the salt can be retrieved from the database before computing the hash. In the above scenario though it's not possible to load the salt associated with the code since we don't know which object in the database the code corresponds to. This seems to imply there is no such salting strategy for this scenario for which the salts can be random.
I would like input on the following ideas:
Can we hash (say sha2) of the user entered code to act as the salt?  
salt = sha2(code)
hashedCode = hash(code + salt)

If there are vulnerabilities of the above, can including some additional global secret as part of the hash help alleviate the risk? 
salt = sha2(code + globalSecret)
hashedCode = hash(code + salt)

Thanks!
","If your 16 character alphanumeric codes (0-9 a-z A-Z) are generated really randomly, they are strong enough to be hashed and stored without salting, even with a fast hash algorithm like SHA-256.
You can improve security in using a server side key, whether you encrypt the hashes, or use a HMAC is not that important. Important is, that an attacker needs additional privileges on the server to get the key, before he can start cracking (SQL-injection is not enough).
If the codes where weaker (shorter), you could also use key-stretching, to increase the necessary time for brute-forcing. Even some milliseconds for a single calculation thwarts brute-force attacks, as long as the codes are not too short. Key-stretching can be done independend of salting. Better of course is using strong enough codes.
","120","<security><hash><architecture><salt><deterministic>","0","1","2","2018-05-31 15:26:20","","0","","3521141","","2018-05-30 18:52:19","2018-05-30 18:13:42",""
"25111569","Php log in allows entry with no user/pass","Hey guys ive put together a basic user log in for a secure admin area and it seems to work great, if you enter a correct user/pass you get access, if you enter the wrong user pass, you get no access. However if you enter nothing in both fields you get access. 
This is how it works.
Creating a user, a basic form POSTS to this php file.
<?php
$con = mysqli_connect(credentials are all good) or die(mysqli_error($con)) ; 

$escapedUser = mysqli_real_escape_string($con, $_POST['user']);
$escapedPass = mysqli_real_escape_string($con, $_POST['pass']);

$some_str = md5(uniqid(mt_rand(), true));
$base_64str = base64_encode($some_str);
$modified_base64 = str_replace('+', '.', $base_64str);
$gensalt = substr($modified_base64, 0, 22);

$format_str = ""$2y$10$""; // 2y for Blowfish and 10 times.
$salt = $format_str . $gensalt . ""$"";
$hashed_pass = crypt($escapedPass, $salt);

$query = ""INSERT INTO `userpass` (`username`, `password`, `salt`) VALUES ('$escapedUser', '$hashed_pass', '$salt'); "";

if(isset($escapedUser) && isset($hashed_pass))
{
    mysqli_query($con, $query);
    header(""Location: ausers.php"");
    exit();
} 
Echo ""Something went wrong!"";
?>

The database appears to be storing these fine
We then log in with this code
<?php
$con = mysqli_connect(again credentials are fine) or die(mysqli_error($con)) ; 

$escapedUser = mysqli_real_escape_string($con, $_POST['user']);
$escapedPass = mysqli_real_escape_string($con, $_POST['pass']);

$saltQuery = ""select salt from userpass where username = '$escapedUser';"";
$result = mysqli_query($con, $saltQuery);
$row = mysqli_fetch_assoc($result);
$salt = $row['salt'];
$hashed_pass = crypt($escapedPass, $salt);
if(isset($escapedUser) && isset($hashed_pass))
{
    $userQuery = ""SELECT * FROM userpass WHERE username='$escapedUser' AND password='$hashed_pass'"";
    $userpass = mysqli_query($con, $userQuery);
    $count = mysqli_num_rows($userpass);
    if($count == 1)
    {
        $_SESSION['username'] = $escapedUser;
        header(""location: aindex.php"");
        exit();
    }
    header(""Location: alogin.htm"");
    exit();
}
Echo ""Something went wrong!"";
?>

So as i said, this seems to work fine for when any user pass combination is given whether access granted or denied however using no user and pass and pressing log in allows entry. Any ideas? THeres no blank rows in the database table.
Side question, is this salt/hash method correct, its my first attempt.
","For your login code, your condition relies on an isset() test. You perform this test on $escapedUser and $hashed_pass. Both of these variables were actually assigned values earlier in the code! Once you assign a value to the variable, it will pass the isset() test, even if the value is an empty string. You might want to use an empty() check, perhaps on the original $_POST variables.
Moving on to the inner condition, which tests if the mysql query returns exactly 1 row of results. If there were truly no rows with empty values, then this condition would never pass because the query would return 0 rows. But it is passing. Two things to consider:

Notice that your registering code uses the same isset() test. Therefore it is very possible that someone used your registration form, submitted empty fields, and successfully registered a row with empty user and password fields. Have you explicitly queried your database for empty fields and actually come up with 0 results?
Your query uses SELECT *. Perhaps this is causing the query to return some sort of aggregate value (like a COUNT() or something that always has a result no matter what). Perhaps try explicitly defining the columns to return?

I cannot comment on your salt/hash method as I have no experience in that part. Hope you find this helpful!
","119","<php><mysql><login><salt>","-1","0","2","2014-08-04 06:03:22","","2","1","3796048","","2014-08-04 04:45:39","2014-08-04 03:58:05",""
"25111569","Php log in allows entry with no user/pass","Hey guys ive put together a basic user log in for a secure admin area and it seems to work great, if you enter a correct user/pass you get access, if you enter the wrong user pass, you get no access. However if you enter nothing in both fields you get access. 
This is how it works.
Creating a user, a basic form POSTS to this php file.
<?php
$con = mysqli_connect(credentials are all good) or die(mysqli_error($con)) ; 

$escapedUser = mysqli_real_escape_string($con, $_POST['user']);
$escapedPass = mysqli_real_escape_string($con, $_POST['pass']);

$some_str = md5(uniqid(mt_rand(), true));
$base_64str = base64_encode($some_str);
$modified_base64 = str_replace('+', '.', $base_64str);
$gensalt = substr($modified_base64, 0, 22);

$format_str = ""$2y$10$""; // 2y for Blowfish and 10 times.
$salt = $format_str . $gensalt . ""$"";
$hashed_pass = crypt($escapedPass, $salt);

$query = ""INSERT INTO `userpass` (`username`, `password`, `salt`) VALUES ('$escapedUser', '$hashed_pass', '$salt'); "";

if(isset($escapedUser) && isset($hashed_pass))
{
    mysqli_query($con, $query);
    header(""Location: ausers.php"");
    exit();
} 
Echo ""Something went wrong!"";
?>

The database appears to be storing these fine
We then log in with this code
<?php
$con = mysqli_connect(again credentials are fine) or die(mysqli_error($con)) ; 

$escapedUser = mysqli_real_escape_string($con, $_POST['user']);
$escapedPass = mysqli_real_escape_string($con, $_POST['pass']);

$saltQuery = ""select salt from userpass where username = '$escapedUser';"";
$result = mysqli_query($con, $saltQuery);
$row = mysqli_fetch_assoc($result);
$salt = $row['salt'];
$hashed_pass = crypt($escapedPass, $salt);
if(isset($escapedUser) && isset($hashed_pass))
{
    $userQuery = ""SELECT * FROM userpass WHERE username='$escapedUser' AND password='$hashed_pass'"";
    $userpass = mysqli_query($con, $userQuery);
    $count = mysqli_num_rows($userpass);
    if($count == 1)
    {
        $_SESSION['username'] = $escapedUser;
        header(""location: aindex.php"");
        exit();
    }
    header(""Location: alogin.htm"");
    exit();
}
Echo ""Something went wrong!"";
?>

So as i said, this seems to work fine for when any user pass combination is given whether access granted or denied however using no user and pass and pressing log in allows entry. Any ideas? THeres no blank rows in the database table.
Side question, is this salt/hash method correct, its my first attempt.
","In my opinion you need more than one level of checks in any form, whether it be registration, comments, login, etc. The way I prefer to go about it is a tiered approach. It may work better for you, but it's just an example.  
By doing it this way, you ensure that your input will never be empty. Another issue I see with your login script is that you never compare the input with the database so how can you know if they entered the correct information? The only thing allowing them to login is that the query returned a record. This is also why they can login with a blank form.
<?php
$con = mysqli_connect(again credentials are fine) or die(mysqli_error($con)) ;

/* Ensures that form was submitted before any processing is done */
if (isset($_POST)) {

$User = $_POST['user']);
$Pass = $_POST['pass']);

if (!empty($User)) {

if (!empty($Pass)) {

$escapedUser = mysqli_real_escape_string($con, $User);
$escapedPass = mysqli_real_escape_string($con, $Pass);

/* you need to verify the password here, before adding the salt */
$saltQuery = ""select salt from userpass where username = '$escapedUser'"";
$result = mysqli_query($con, $saltQuery);
$row = mysqli_fetch_assoc($result);
$salt = $row['salt'];
$hashed_pass = crypt($escapedPass, $salt);

    $userQuery = ""SELECT * FROM userpass WHERE username='$escapedUser' AND password='$hashed_pass'"";
/* you need to verify the username somewhere here */
    $userpass = mysqli_query($con, $userQuery);
    $count = mysqli_num_rows($userpass);
    if($count == 1)
    {

        $_SESSION['username'] = $escapedUser;
        header(""location: aindex.php"");
        exit();
    } else {
    header(""Location: alogin.htm"");
    exit();
    }


} else {
    echo ""Please enter a password."";
}

} else {
    echo ""Please enter a username."";
}

} else {
    echo ""You have not entered any information."";
}
?>

","119","<php><mysql><login><salt>","-1","0","2","2014-08-04 06:03:22","","2","1","3796048","","2014-08-04 04:45:39","2014-08-04 03:58:05",""
"36040296","Why do my global variables not work?","I am trying to create a signup form that allows potential users to input their first and last name, a username and a password. With this password, I want to use PHP's hash function and some ""salts"" to make the password secure. To do so, I created a function inside my PHP script to save on redundancy. To accomplish this, I changed variables $connection, $iniSalt, and $endSalt to global variables - thinking this would allow me to use them inside the function addUser().
Can someone tell me what I am doing wrong here? Any advice on how to go about this would be greatly appreciated. Here is my code:
    

global $connection;
$connection = new mysqli($db_host, $user, $pass, $db);

if ($connection->connect_error) {
    die($connection->connect_error);
}

$query = ""CREATE TABLE users (
firstname VARCHAR(32) NOT NULL,
lastname VARCHAR(32) NOT NULL,
username VARCHAR(32) NOT NULL UNIQUE,
password VARCHAR(32) NOT NULL
)"";

$result = $connection->query($query);
if (!$result) {
    die($connection->error);
}

global $iniSalt, $endSalt;
$iniSalt = ""xb&z*"";
$endSalt = ""nb!@"";

function addUser($conn, $firstname, $lastname, $username, $password) {
    $token = hash('ripemd128', ""$iniSalt$password$endSalt"");
    $query = ""INSERT INTO users VALUES('$firstname', '$lastname', '$username', $token)"";
    $result = $connection->query($query);
    if (!$result) {
        die($connection->error);
    }
}

addUser($connection, 'Bill', 'Murray', 'bmurray', 'mysecret');
addUser($connection, 'Jacki', 'Hughes', 'jhughes', 'somepw');

","You need to declare global scope for those variables inside your function:
function addUser($conn, $firstname, $lastname, $username, $password) {
    global $connection, $iniSalt, $endSalt;
    // Then use those global variables
    ...
}

Document for global keyword here: http://php.net/manual/en/language.variables.scope.php 
","118","<php><hash><salt>","1","2","3","2016-03-16 17:14:24","36040736","9","1","285587","","2016-03-16 16:04:41","2016-03-16 15:36:03",""
"36040296","Why do my global variables not work?","I am trying to create a signup form that allows potential users to input their first and last name, a username and a password. With this password, I want to use PHP's hash function and some ""salts"" to make the password secure. To do so, I created a function inside my PHP script to save on redundancy. To accomplish this, I changed variables $connection, $iniSalt, and $endSalt to global variables - thinking this would allow me to use them inside the function addUser().
Can someone tell me what I am doing wrong here? Any advice on how to go about this would be greatly appreciated. Here is my code:
    

global $connection;
$connection = new mysqli($db_host, $user, $pass, $db);

if ($connection->connect_error) {
    die($connection->connect_error);
}

$query = ""CREATE TABLE users (
firstname VARCHAR(32) NOT NULL,
lastname VARCHAR(32) NOT NULL,
username VARCHAR(32) NOT NULL UNIQUE,
password VARCHAR(32) NOT NULL
)"";

$result = $connection->query($query);
if (!$result) {
    die($connection->error);
}

global $iniSalt, $endSalt;
$iniSalt = ""xb&z*"";
$endSalt = ""nb!@"";

function addUser($conn, $firstname, $lastname, $username, $password) {
    $token = hash('ripemd128', ""$iniSalt$password$endSalt"");
    $query = ""INSERT INTO users VALUES('$firstname', '$lastname', '$username', $token)"";
    $result = $connection->query($query);
    if (!$result) {
        die($connection->error);
    }
}

addUser($connection, 'Bill', 'Murray', 'bmurray', 'mysecret');
addUser($connection, 'Jacki', 'Hughes', 'jhughes', 'somepw');

","That's not how globals work. Put global $connection; at the top of your addUser() function to use it in your function.
function addUser($conn, $firstname, $lastname, $username, $password) {
    global $connection;
    ...
}

","118","<php><hash><salt>","1","2","3","2016-03-16 17:14:24","36040736","9","1","285587","","2016-03-16 16:04:41","2016-03-16 15:36:03",""
"36040296","Why do my global variables not work?","I am trying to create a signup form that allows potential users to input their first and last name, a username and a password. With this password, I want to use PHP's hash function and some ""salts"" to make the password secure. To do so, I created a function inside my PHP script to save on redundancy. To accomplish this, I changed variables $connection, $iniSalt, and $endSalt to global variables - thinking this would allow me to use them inside the function addUser().
Can someone tell me what I am doing wrong here? Any advice on how to go about this would be greatly appreciated. Here is my code:
    

global $connection;
$connection = new mysqli($db_host, $user, $pass, $db);

if ($connection->connect_error) {
    die($connection->connect_error);
}

$query = ""CREATE TABLE users (
firstname VARCHAR(32) NOT NULL,
lastname VARCHAR(32) NOT NULL,
username VARCHAR(32) NOT NULL UNIQUE,
password VARCHAR(32) NOT NULL
)"";

$result = $connection->query($query);
if (!$result) {
    die($connection->error);
}

global $iniSalt, $endSalt;
$iniSalt = ""xb&z*"";
$endSalt = ""nb!@"";

function addUser($conn, $firstname, $lastname, $username, $password) {
    $token = hash('ripemd128', ""$iniSalt$password$endSalt"");
    $query = ""INSERT INTO users VALUES('$firstname', '$lastname', '$username', $token)"";
    $result = $connection->query($query);
    if (!$result) {
        die($connection->error);
    }
}

addUser($connection, 'Bill', 'Murray', 'bmurray', 'mysecret');
addUser($connection, 'Jacki', 'Hughes', 'jhughes', 'somepw');

","Besides the other answers given in regards to the placement of global, and that I also pointed out in comments about its placement:
Sidenote: Consult my footnotes.
The $token variable is a string and it also must be quoted.
$query = ""INSERT INTO users VALUES('$firstname', '$lastname', '$username', $token)"";

When your query fires up, you will get a syntax error for it.
So, quote the variable:
$query = ""INSERT INTO users VALUES('$firstname', '$lastname', '$username', '$token')"";

ripemd128 produces a string, not an integer

http://php.net/manual/en/function.hash.php


ripemd128     32 789d569f08ed7055e94b4289a4195012

Also, if you're planning on going live with this, you'd be better off using password_hash() or the compatibility pack for it.
It's much safer.
References:

PHP 5.5's password_hash() function.
Compatibility pack (if PHP < 5.5) https://github.com/ircmaxell/password_compat/

If and when you do decide to use password_hash() or crypt, it is important to note that if your present password column's length is anything lower than 60, it will need to be changed to that (or higher). The manual suggests a length of 255.
You will need to ALTER your column's length and start over with a new hash in order for it to take effect. Otherwise, MySQL will fail silently.

Footnotes:
Read up on variable scope:

http://php.net/manual/en/language.variables.scope.php
Reference: What is variable scope, which variables are accessible from where and what are "undefined variable" errors?

If you're looking to protect against SQL injection which is something worthwhile doing, consult the following:

mysqli_ with prepared statements
PDO with prepared statements.

","118","<php><hash><salt>","1","1","3","2016-03-16 17:14:24","36040736","9","1","285587","","2016-03-16 16:04:41","2016-03-16 15:36:03",""
"25464113","Salting and hashing functions returning nothing","I found a script that salts, hashes, and then some, but my $password returns as the original string when I submit my form. This seems above my ""pay grade""... My goal is to insert the returned salt, hash, and other outputs from the script into my db. I'm not even sure what column values I need in the db (MYSQLi). The script is in if($valid) before the sql:
<?php
if ($_SERVER[""REQUEST_METHOD""] == ""POST"")
{$valid = true;

if (empty($_POST[""password""]))
{$passwordErr = ""Password must be set!""; $Epassword = ""nope""; $valid = false;}
if (strpos($_POST[""password""], "" "") !== false)
{$passwordErr = ""No spaces are allowed""; $Epassword = ""nope""; $valid = false;}
if(strlen(utf8_decode($_POST['password'])) < 10 || strlen(utf8_decode($_POST['password'])) > 30)
 {$passwordErr = ""Password must be between 10 and 30 characters""; $Epassword = ""nope""; $valid = false;}
$password = htmlspecialchars($_POST['password']);

$tod = date(""Y-m-d H:i:s"");
$setdate = date(""Y-m-d H:i:s"", strtotime(""-4 hours"", strtotime($tod)));
$today = date(""Y-m-d"", strtotime(""-4 hours"", strtotime($tod)));

}

if($valid){

/*
 * Password Hashing With PBKDF2 (http://crackstation.net/hashing-security.htm).
 * Copyright (c) 2013, Taylor Hornby
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, 
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation 
 * and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
 */

// These constants may be changed without breaking existing hashes.
define(""PBKDF2_HASH_ALGORITHM"", ""sha256"");
define(""PBKDF2_ITERATIONS"", 1000);
define(""PBKDF2_SALT_BYTE_SIZE"", 24);
define(""PBKDF2_HASH_BYTE_SIZE"", 24);

define(""HASH_SECTIONS"", 4);
define(""HASH_ALGORITHM_INDEX"", 0);
define(""HASH_ITERATION_INDEX"", 1);
define(""HASH_SALT_INDEX"", 2);
define(""HASH_PBKDF2_INDEX"", 3);

function create_hash($password)
{
// format: algorithm:iterations:salt:hash
$salt = base64_encode(mcrypt_create_iv(PBKDF2_SALT_BYTE_SIZE, MCRYPT_DEV_URANDOM));
return PBKDF2_HASH_ALGORITHM . "":"" . PBKDF2_ITERATIONS . "":"" .  $salt . "":"" .
    base64_encode(pbkdf2(
        PBKDF2_HASH_ALGORITHM,
        $password,
        $salt,
        PBKDF2_ITERATIONS,
        PBKDF2_HASH_BYTE_SIZE,
        true
    ));
}

function validate_password($password, $correct_hash)
{
$params = explode("":"", $correct_hash);
if(count($params) < HASH_SECTIONS)
   return false;
$pbkdf2 = base64_decode($params[HASH_PBKDF2_INDEX]);
return slow_equals(
    $pbkdf2,
    pbkdf2(
        $params[HASH_ALGORITHM_INDEX],
        $password,
        $params[HASH_SALT_INDEX],
        (int)$params[HASH_ITERATION_INDEX],
        strlen($pbkdf2),
        true
    )
);
}

// Compares two strings $a and $b in length-constant time.
function slow_equals($a, $b)
{
$diff = strlen($a) ^ strlen($b);
for($i = 0; $i < strlen($a) && $i < strlen($b); $i++)
{
    $diff |= ord($a[$i]) ^ ord($b[$i]);
}
return $diff === 0;
}

/*
* PBKDF2 key derivation function as defined by RSA's PKCS #5: https://www.ietf.org/rfc/rfc2898.txt
 * $algorithm - The hash algorithm to use. Recommended: SHA256
 * $password - The password.
 * $salt - A salt that is unique to the password.
 * $count - Iteration count. Higher is better, but slower. Recommended: At least 1000.
 * $key_length - The length of the derived key in bytes.
 * $raw_output - If true, the key is returned in raw binary format. Hex encoded otherwise.
 * Returns: A $key_length-byte key derived from the password and salt.
 *
 * Test vectors can be found here: https://www.ietf.org/rfc/rfc6070.txt
 *
 * This implementation of PBKDF2 was originally created by https://defuse.ca
 * With improvements by http://www.variations-of-shadow.com
 */
function pbkdf2($algorithm, $password, $salt, $count, $key_length, $raw_output = false)
{
$algorithm = strtolower($algorithm);
if(!in_array($algorithm, hash_algos(), true))
    trigger_error('PBKDF2 ERROR: Invalid hash algorithm.', E_USER_ERROR);
if($count <= 0 || $key_length <= 0)
    trigger_error('PBKDF2 ERROR: Invalid parameters.', E_USER_ERROR);

if (function_exists(""hash_pbkdf2"")) {
    // The output length is in NIBBLES (4-bits) if $raw_output is false!
    if (!$raw_output) {
        $key_length = $key_length * 2;
    }
    return hash_pbkdf2($algorithm, $password, $salt, $count, $key_length, $raw_output);
}

$hash_length = strlen(hash($algorithm, """", true));
$block_count = ceil($key_length / $hash_length);

$output = """";
for($i = 1; $i <= $block_count; $i++) {
    // $i encoded as 4 bytes, big endian.
    $last = $salt . pack(""N"", $i);
    // first iteration
    $last = $xorsum = hash_hmac($algorithm, $last, $password, true);
    // perform the other $count - 1 iterations
    for ($j = 1; $j < $count; $j++) {
        $xorsum ^= ($last = hash_hmac($algorithm, $last, $password, true));
    }
    $output .= $xorsum;
}

if($raw_output)
    return substr($output, 0, $key_length);
else
    return bin2hex(substr($output, 0, $key_length));
}

$sqli = @mysqli_connect(""host"", ""db"", ""pass"",""empty"");
if (mysqli_connect_errno($sqli)) { echo ""Failed to connect to MySQL: "" . mysqli_connect_error(); }

mysqli_query($sqli, ""INSERT INTO `table`(`password`) VALUES ('$password')"");
?>

Note: the query inserts the original $password value into the db.
The query inserts the original $password value into the db.
[Note]
@Masoud answered my question, but I ended up using `password_hash($_POST['password'], PASSWORD_DEFAULT)' suggested by @martinstoeckli as follows:
if($valid){

$hashed_password = password_hash($_POST['password'], PASSWORD_DEFAULT);

mysqli_query($sqli, ""INSERT INTO `table`(`password`) VALUES ('$hashed_password')"");

}

","It must insert original $password to database, because you are not change $password from start to end of your code.
one way is to call the ""pbkdf2"" function like this before last line of your code (before ""mysqli_query(..."" ) :
<?php
$hashed_password = pbkdf2(PBKDF2_HASH_ALGORITHM,$password,'dsafdsa',10,5,false)
?>

And change last line of your code like this:
mysqli_query($sqli, ""INSERT INTO `table`(`password`) VALUES ('$hashed_password')"");

","118","<php><hash><salt>","0","1","2","2014-08-29 03:17:19","25465866","1","","2574871","","2014-08-29 03:17:19","2014-08-23 16:39:45",""
"25464113","Salting and hashing functions returning nothing","I found a script that salts, hashes, and then some, but my $password returns as the original string when I submit my form. This seems above my ""pay grade""... My goal is to insert the returned salt, hash, and other outputs from the script into my db. I'm not even sure what column values I need in the db (MYSQLi). The script is in if($valid) before the sql:
<?php
if ($_SERVER[""REQUEST_METHOD""] == ""POST"")
{$valid = true;

if (empty($_POST[""password""]))
{$passwordErr = ""Password must be set!""; $Epassword = ""nope""; $valid = false;}
if (strpos($_POST[""password""], "" "") !== false)
{$passwordErr = ""No spaces are allowed""; $Epassword = ""nope""; $valid = false;}
if(strlen(utf8_decode($_POST['password'])) < 10 || strlen(utf8_decode($_POST['password'])) > 30)
 {$passwordErr = ""Password must be between 10 and 30 characters""; $Epassword = ""nope""; $valid = false;}
$password = htmlspecialchars($_POST['password']);

$tod = date(""Y-m-d H:i:s"");
$setdate = date(""Y-m-d H:i:s"", strtotime(""-4 hours"", strtotime($tod)));
$today = date(""Y-m-d"", strtotime(""-4 hours"", strtotime($tod)));

}

if($valid){

/*
 * Password Hashing With PBKDF2 (http://crackstation.net/hashing-security.htm).
 * Copyright (c) 2013, Taylor Hornby
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, 
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation 
 * and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
 */

// These constants may be changed without breaking existing hashes.
define(""PBKDF2_HASH_ALGORITHM"", ""sha256"");
define(""PBKDF2_ITERATIONS"", 1000);
define(""PBKDF2_SALT_BYTE_SIZE"", 24);
define(""PBKDF2_HASH_BYTE_SIZE"", 24);

define(""HASH_SECTIONS"", 4);
define(""HASH_ALGORITHM_INDEX"", 0);
define(""HASH_ITERATION_INDEX"", 1);
define(""HASH_SALT_INDEX"", 2);
define(""HASH_PBKDF2_INDEX"", 3);

function create_hash($password)
{
// format: algorithm:iterations:salt:hash
$salt = base64_encode(mcrypt_create_iv(PBKDF2_SALT_BYTE_SIZE, MCRYPT_DEV_URANDOM));
return PBKDF2_HASH_ALGORITHM . "":"" . PBKDF2_ITERATIONS . "":"" .  $salt . "":"" .
    base64_encode(pbkdf2(
        PBKDF2_HASH_ALGORITHM,
        $password,
        $salt,
        PBKDF2_ITERATIONS,
        PBKDF2_HASH_BYTE_SIZE,
        true
    ));
}

function validate_password($password, $correct_hash)
{
$params = explode("":"", $correct_hash);
if(count($params) < HASH_SECTIONS)
   return false;
$pbkdf2 = base64_decode($params[HASH_PBKDF2_INDEX]);
return slow_equals(
    $pbkdf2,
    pbkdf2(
        $params[HASH_ALGORITHM_INDEX],
        $password,
        $params[HASH_SALT_INDEX],
        (int)$params[HASH_ITERATION_INDEX],
        strlen($pbkdf2),
        true
    )
);
}

// Compares two strings $a and $b in length-constant time.
function slow_equals($a, $b)
{
$diff = strlen($a) ^ strlen($b);
for($i = 0; $i < strlen($a) && $i < strlen($b); $i++)
{
    $diff |= ord($a[$i]) ^ ord($b[$i]);
}
return $diff === 0;
}

/*
* PBKDF2 key derivation function as defined by RSA's PKCS #5: https://www.ietf.org/rfc/rfc2898.txt
 * $algorithm - The hash algorithm to use. Recommended: SHA256
 * $password - The password.
 * $salt - A salt that is unique to the password.
 * $count - Iteration count. Higher is better, but slower. Recommended: At least 1000.
 * $key_length - The length of the derived key in bytes.
 * $raw_output - If true, the key is returned in raw binary format. Hex encoded otherwise.
 * Returns: A $key_length-byte key derived from the password and salt.
 *
 * Test vectors can be found here: https://www.ietf.org/rfc/rfc6070.txt
 *
 * This implementation of PBKDF2 was originally created by https://defuse.ca
 * With improvements by http://www.variations-of-shadow.com
 */
function pbkdf2($algorithm, $password, $salt, $count, $key_length, $raw_output = false)
{
$algorithm = strtolower($algorithm);
if(!in_array($algorithm, hash_algos(), true))
    trigger_error('PBKDF2 ERROR: Invalid hash algorithm.', E_USER_ERROR);
if($count <= 0 || $key_length <= 0)
    trigger_error('PBKDF2 ERROR: Invalid parameters.', E_USER_ERROR);

if (function_exists(""hash_pbkdf2"")) {
    // The output length is in NIBBLES (4-bits) if $raw_output is false!
    if (!$raw_output) {
        $key_length = $key_length * 2;
    }
    return hash_pbkdf2($algorithm, $password, $salt, $count, $key_length, $raw_output);
}

$hash_length = strlen(hash($algorithm, """", true));
$block_count = ceil($key_length / $hash_length);

$output = """";
for($i = 1; $i <= $block_count; $i++) {
    // $i encoded as 4 bytes, big endian.
    $last = $salt . pack(""N"", $i);
    // first iteration
    $last = $xorsum = hash_hmac($algorithm, $last, $password, true);
    // perform the other $count - 1 iterations
    for ($j = 1; $j < $count; $j++) {
        $xorsum ^= ($last = hash_hmac($algorithm, $last, $password, true));
    }
    $output .= $xorsum;
}

if($raw_output)
    return substr($output, 0, $key_length);
else
    return bin2hex(substr($output, 0, $key_length));
}

$sqli = @mysqli_connect(""host"", ""db"", ""pass"",""empty"");
if (mysqli_connect_errno($sqli)) { echo ""Failed to connect to MySQL: "" . mysqli_connect_error(); }

mysqli_query($sqli, ""INSERT INTO `table`(`password`) VALUES ('$password')"");
?>

Note: the query inserts the original $password value into the db.
The query inserts the original $password value into the db.
[Note]
@Masoud answered my question, but I ended up using `password_hash($_POST['password'], PASSWORD_DEFAULT)' suggested by @martinstoeckli as follows:
if($valid){

$hashed_password = password_hash($_POST['password'], PASSWORD_DEFAULT);

mysqli_query($sqli, ""INSERT INTO `table`(`password`) VALUES ('$hashed_password')"");

}

","This problem can be solved much easier with PHP's function password_hash(). This function will return a 60 character string, including the hash, the salt and the cost factor, you can store this string into a single field in your database. To check against a stored hash you would use the function password_verify().
// Hash a new password for storing in the database.
// The function automatically generates a cryptographically safe salt.
$hashToStoreInDb = password_hash($password, PASSWORD_BCRYPT);

// Check if the hash of the entered login password, matches the stored hash.
// The salt and the cost factor will be extracted from $existingHashFromDb.
$isPasswordCorrect = password_verify($password, $existingHashFromDb);

In your code you are also checking certain conditions and escape the password with htmlspecialchars(). This is not necessary and should not be done, the only requirement that makes sense for passwords is a minimum length. Escaping is not necessary because you will feed the content to the hash function and its output will always be safe (however it would have to be done for SQL not for HTML output). Variables in $_POST will already be decoded by PHP.
if (!isset($_POST[""password""]) || strlen($_POST[""password""]) < 10)
{
  // password is invalid show error message
}

To prevent a misunderstanding, password hashing is always done server side, so the password will be transported plain text between client and server. The usual solution to handle this problem is using HTTPS, SSL will then encrypt the password before sending it over the internet.
","118","<php><hash><salt>","0","1","2","2014-08-29 03:17:19","25465866","1","","2574871","","2014-08-29 03:17:19","2014-08-23 16:39:45",""
"18774057","Is it bad practice to store the hash function used as part of the hashed password?","Using the php source code for hashing+salting at crackstation.net, the returned hash includes what hashing algorithm was used. I store the hash as returned from the create_hash function in my database. Is it bad practice to store this information? Will this give a hacker an advantage?
","I think this is good practice. It means that if you upgrade your hashing function (to something more secure) new users will use the one new one immediately.
Now, you can't rehash users on the old hashing functions immediately, since you need their password to do that, and you can't retrieve it from its hashed state. Instead, when such a user logs in, you use their password to store a new hashed column, and reset the hashing function against their user account.
Thus, with such a configuration, users will slowly move onto the more secure system as they log in.
","118","<php><mysql><hash><passwords><salt>","5","3","2","2013-09-13 14:08:06","18774161","2","","","","","2013-09-12 20:48:46",""
"18774057","Is it bad practice to store the hash function used as part of the hashed password?","Using the php source code for hashing+salting at crackstation.net, the returned hash includes what hashing algorithm was used. I store the hash as returned from the create_hash function in my database. Is it bad practice to store this information? Will this give a hacker an advantage?
","I wouldn't say it's a bad practice. The hash function can often be identified from the nature of the outputted hash (e.g. string length, etc.) so you probably wouldn't be telling an attacker anything they couldn't figure out from the hash anyways.
","118","<php><mysql><hash><passwords><salt>","5","1","2","2013-09-13 14:08:06","18774161","2","","","","","2013-09-12 20:48:46",""
"17745527","joomla password stored differently","A Joomla website came to my hands to fix some login issue that new users had when attempting to login.
The users are registered manually in the backoffice.
What i noticed is that last months, passwords were stores in data base like simple md5 encryption.
Now they are encrypted with {hash}:{salt}.
I dont know what happens, but now when the users try to login and the script 
... password = '"" . md5($_POST['password']) ...
runs, it gives ""Wrong password"".
I've searched but couldnt find nothing that could helped me. 
It seams that something changed, and i would like to understand what changed and why, and how to put the password encryption on md5 again, cause all the user database is in md5
thank you
","","116","<joomla><hash><md5><salt>","0","","0","2013-08-21 11:40:29","","3","","2685705","","2013-08-21 11:40:29","2013-07-19 11:56:54",""
"33824723","Store safely a password in MySQL using PHP and checking it afterwards","I've been reading several posts and trying different techniques to store a password in MySQL. I've decided to use crypt and salt and I've been finally able to insert it on my database. The code used is the following:
    $cost = 10;
    $salt = strtr(base64_encode(mcrypt_create_iv(16, MCRYPT_DEV_URANDOM)), '+', '.');
    $salt = sprintf(""$2a$%02d$"", $cost) . $salt;
    $hash = crypt($password, $salt);
    $query = ""INSERT INTO users_registered(name , password) VALUES('$name', '$hash')""; 
    mysqli_query($con, $query);

The main problem that I've been struggling for hours is how to check if the password I put is the correct... I am sure I'm doing something wrong, but I'm completely new in this field of security, and all the posts I checked haven't worked for me. This is the code I use to check:
$name = mysqli_real_escape_string( $con, $_POST['name'] );
$password = mysqli_real_escape_string( $con,$_POST[""password""]);

$query = ""SELECT * FROM users_registered where name='$name'"";
$result = mysqli_query($con, $query);
$row = mysqli_fetch_assoc($result);
$hash=$row['password'];
if ($hash->hash==crypt($password, $hash->hash)) {
    echo ""YEEEESSS"";    
        }
else {
   echo ""What I'm doing wrooooong!"";}

The problem comes from the if, but I'm not sure what I should put :S
Any help would be appreciated :)
","As in the comments is already suggested, the best way is to use password_hash() instead of using:
$cost = 10;
$salt = strtr(base64_encode(mcrypt_create_iv(16, MCRYPT_DEV_URANDOM)), '+', '.');
$salt = sprintf(""$2a$%02d$"", $cost) . $salt;
$hash = crypt($password, $salt);

In my case, my php version was under 5.5, and I haven't been able to insert the library compatible with lower versions, even if it is the safest way!!
In order to check if my password stored was the same as the one the user inputs via $_POST, the if has to be modified as follows:
if (crypt($password, $hash) == $hash) {
   ...

and this did the trick!! Take into account that I'm just a begginer, and this method can be unsafe :)
","116","<php><mysqli><hash><salt><crypt>","1","0","1","2015-11-20 13:20:53","33827767","7","","5176549","","2015-11-20 10:48:31","2015-11-20 10:47:10",""
"46149435","Salt installation in rhel 5.4","I am trying to install salt-2016.11.3-2.el5.noarch.rpm in rhel5. For that I compiled python 2.6
[root@localhost bin]# ls -lrt python*
-rwxr-xr-x 1 root root    8304 Jun 11  2009 python2.4
-rwxr-xr-x 2 root root 5733122 Sep 11 11:52 python2.6
-rwxr-xr-x 2 root root 5733122 Sep 11 11:52 python
lrwxrwxrwx 1 root root      16 Sep 11 11:53 python-config -> python2.6-config
-rwxr-xr-x 1 root root    1418 Sep 11 11:53 python2.6-config

After I tried to install salt-minion which is showing this deps.
[root@localhost minion]# rpm -ivh salt-2016.11.3-2.el5.noarch.rpm
warning: salt-2016.11.3-2.el5.noarch.rpm: Header V3 RSA/SHA1 signature: NOKEY, key ID 42e589e9
error: Failed dependencies:
        **/usr/bin/python2.6 is needed by salt-2016.11.3-2.el5.noarch**
        python26-PyYAML is needed by salt-2016.11.3-2.el5.noarch
        python26-crypto >= 2.6.1 is needed by salt-2016.11.3-2.el5.noarch
        python26-jinja2 is needed by salt-2016.11.3-2.el5.noarch
        python26-msgpack > 0.3 is needed by salt-2016.11.3-2.el5.noarch
        python26-requests >= 1.0.0 is needed by salt-2016.11.3-2.el5.noarch
        python26-six is needed by salt-2016.11.3-2.el5.noarch
        python26-tornado >= 4.2.1 is needed by salt-2016.11.3-2.el5.noarch
        yum-utils is needed by salt-2016.11.3-2.el5.noarch

I already installed python and its available in PATH. Still why its showing that deps. Anyone faced the same issue??? Any suggestions are welcome.
Note:
the main issue is
/usr/bin/python2.6 is needed by salt-2016.11.3-2.el5.noarch
Why python is showing in the dependency list which is already installed???
","I guess you installed python 2.6 manually without creating a rpm package. The dependencies you see are those specified in the saltstack rpm. They are checked against the installed rpms, not the actual filesystem. If you didn't install python 2.6 as a rpm, it's normal that you have these dependencies errors.
Install rpm without dependencies
As a solution, you may try to install the rpm without dependencies checking. That should be something like: rpm -ivh --nodeps but you'll most likely miss some other dependencies (python modules).
Install manually
Or you can choose to install saltstack manually, with the sources and installation script. And you'll miss other dependencies too but you'll have to find them yourselves. Or rely on the documentation: https://docs.saltstack.com/en/latest/topics/installation/index.html#dependencies
All rpm installation
Or you can install all needed rpms. Most are available in the SaltStack repository: https://repo.saltstack.com/yum/redhat/5Server/x86_64/latest/. You'll need at least:

python26
python26-ordereddict
python26-msgpackX
python26-six

And a few others like python26-zmq, python26-tornado, libyaml, python26-jinja2 and so on. Once you have all dependencies packages, you should be good to install them all at once. Some are not required by the saltstack package and you will run into errors until you get those dependencies.
","116","<python><python-2.6><salt><salt-stack><rhel5>","1","1","1","2017-09-13 04:31:38","46174450","2","0","5133719","","2017-09-13 04:31:38","2017-09-11 06:27:19",""
"55391670","Password hashing with bcrypt and object assigning","I need to swap passwords that are in the clear to ones that are hashed. I am using bcryptjs to help me with this.
I have tried assigning the passwords that are in the clear the hashed passwords but I am getting an error on my bash.
My code that I am trying to make work:
const bcrypt = require('bcryptjs');
const students = require('./students1.json');
const fs = require('fs');

let secureUsers = [];
for (let student of students) {
    let salt = bcrypt.genSaltSync(10);
    let passHash = bcrypt.hashSync(student.password, salt);
    Object.assign(student.password, passHash);
    secureUsers.push(secStudent);
}
fs.writeFileSync('secStudents.json', JSON.stringify(secureUsers, null, 2));
console.log('wrote file!');

The error that I am getting:
$ node bcryptExample.js
C:\Users\mziad\assignment-mziadeh1\servers\bcryptExample.js:13
    Object.assign(student.password, passHash);
           ^

TypeError: Cannot assign to read only property '0' of object '[object String]'
    at Function.assign (<anonymous>)
    at Object.<anonymous> (C:\Users\mziad\assignment-mziadeh1\servers\bcryptExample.js:13:12)
    at Module._compile (internal/modules/cjs/loader.js:701:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:712:10)
    at Module.load (internal/modules/cjs/loader.js:600:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:539:12)
    at Function.Module._load (internal/modules/cjs/loader.js:531:3)
    at Function.Module.runMain (internal/modules/cjs/loader.js:754:12)
    at startup (internal/bootstrap/node.js:283:19)
    at bootstrapNodeJSCore (internal/bootstrap/node.js:622:3)


An example of what I want to hash:
{
    ""netid"": ""ky4531"",
    ""firstName"": ""Frankie"",
    ""lastName"": ""Griffith"",
    ""email"": ""erasement1803@outlook.com"",
    ""password"": ""t'|x/)$g""
  },
  {
    ""netid"": ""tw0199"",
    ""firstName"": ""Julietta"",
    ""lastName"": ""Vargas"",
    ""email"": ""ezekiel1960@outlook.com"",
    ""password"": ""Rc*pKe$w""
  }

I need the passwords to be swapped with hash code hence why I am trying to assign it. But I am getting an error that I don't understand and I cannot really spot any problems with my code right now.
","It seems like you misunderstood how Object.assign function works.
What Object.assign function does is, it goes through each property of source arguments (arguments following the first argument) and overwrite it in the first argument.
The problem in your example is that you tried to call Object.assign with string as its arguments Object.assign('abc', 'def'). String literal in JavaScript is actually an array of characters, and array in an object with indices as properties. By default string properties (the indices) cannot be reassigned (writable: false).
Here's a demonstration:
var a = 'abc';
console.log(a[0]) // outputs 'a'

var descriptor = Object.getOwnPropertyDescriptor(a, 0)
console.log(descriptor)
//outputs
/*
{ value: 'a',
  writable: false,
  enumerable: true,
  configurable: false }
*/

Object.assign('abc', 'def');// throws Cannot assign to read only property '0' of object '[object String]'

As you can see, writable is set to false which means you cannot reassign each character in the string. This explains why the error message says property '0' of string 'abc' cannot be assigned with new value.
So the solution is to do student.password = passHash instead of Object.assign(student.password, passHash);
","116","<javascript><hash><bcrypt><assign><salt>","0","1","1","2019-03-28 07:14:47","55391766","0","","","","","2019-03-28 06:49:09",""
"18865091","Understanding Password + Salting","I'm having trouble understanding the benefits of storing user data in a database table using salting. The process I have set up is as follows:

User creates account with username/password
A random salt is generated.
Username stored in database, password encrypted and stored, salt stored along side password.

Now when a user attempts a login, they provide their username/password and:

Finds salt in database based on username.
Encrypts cleartext password provided using salt from database.
Compares the stored password and user provided password.

This is all fine and dandy, but doesn't a hacker merely have to guess the username and password combo? As long as they can determine a username, they can retrieve the salt. Using a brute force attack they would only need to determine the correct username/password combo. The salt would be retrieved with just the username and added to the provided password in order to compare to the stored password, so whats the point of using the salt anyways? Its not like the hacker has to guess the salt value. The password they provide is automatically encrypted with the salt from the database so as long as they know the username, its just a matter of guessing the password in cleartext.
","The point of the salt is to force the hacker to attack each username one at a time rather than allowing him to attack all of them at once. Because each username has a different salt, the very same password would be stored differently for it. This defeats a rainbow table attack.
","116","<security><encryption><passwords><salt>","1","2","1","2013-09-18 06:16:44","18865116","3","1","","","","2013-09-18 06:14:56",""
"42774016","SaltStack - FreeBSD Ports - ports.update","Why is this state.sls not working?
install_ports:
  - ports.update:
    - extract: True

When running
salt '*' state.highstate

I get a return of:
SaltMaster:
    Data failed to compile:
----------
    ID install_ports in SLS FreeBSD.11_0.ports is not a dictionary
ERROR: Minions returned with non-zero exit code
root@SaltMaster [~]$

I worked according to:
https://docs.saltstack.com/en/2015.8/ref/modules/all/salt.modules.freebsdports.html
https://docs.saltstack.com/en/latest/ref/states/all/salt.states.ports.html#module-salt.states.ports
","Lines beginning with ""-"" are items in a YAMl list, and your 'install_ports' line is expecting a dictionary. 
Thus, you should change '- ports.update:' to 'ports.update:' to get rid of the error.
","116","<freebsd><salt><salt-stack><ports>","0","2","1","2017-03-15 16:10:37","","4","","","","","2017-03-13 21:46:35",""
"23652825","Random String | Password Salt Suggestion","If we compared my method below with RCIX's method in this answer to a question, which is more efficient and why?
private string RandomString(int length = 25)
{
    const string chars = ""aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ0123456789#@%&"";
    StringBuilder sbSalt = new StringBuilder();

    for (int i = 0; i < length; i++)
    {
        int inx = 0;

        inx = rnd.Next(0, chars.Length);
        sbSalt.Append(chars[inx]);
    }

    return sbSalt.ToString();
}

private Random rnd = new Random();

The reason I did ""aAbBcC..."" instead of ""abc...ABC..."" was to increase the chances of randomization between the lower and capital case of each letter since they are next to each other.
And also, for a password salt, is it best to keep duplicate characters or should I make sure that each character is only encountered once per salt? Then again, if I allow duplicate characters, the salt combination amount that can be generated is greater.
Thanks in advance!
UPDATE #1:
I realised that if I called the RandomString function again, it would return the exact same Random String, so to fix that I declared rnd as new Random only once by moving it outside the function.
","The reason I did ""aAbBcC..."" instead of ""abc...ABC..."" was to increase the chances of randomization between the lower and capital case of each letter since they are next to each other. this will not increase randomness between upper and lower case.
You can test this with a dice, the places of the numbers will not change the odds of even and odd numbers.
The efficiency will depend on how you define it. Do you want your code to be more or less readable? Do you need high performance? Maintainability?
In normal cases I wouldn't prefer the one above the other.
Is it best to keep duplicate characters or should I make sure that each character is only encountered once per salt?
actually, the amount of permutations increase if you allow double characters.
This means the string will be harder to crack in a brute force attack.
If you are using this salt for encryption techniques, it's best to use the framework's libraries. Like GetBytes():
http://msdn.microsoft.com/en-us/library/system.security.cryptography.rngcryptoserviceprovider.aspx
","114","<c#><string><random><passwords><salt>","3","1","2","2014-05-14 11:26:24","23653206","8","","-1","","2017-05-23 12:22:09","2014-05-14 11:04:02",""
"23652825","Random String | Password Salt Suggestion","If we compared my method below with RCIX's method in this answer to a question, which is more efficient and why?
private string RandomString(int length = 25)
{
    const string chars = ""aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ0123456789#@%&"";
    StringBuilder sbSalt = new StringBuilder();

    for (int i = 0; i < length; i++)
    {
        int inx = 0;

        inx = rnd.Next(0, chars.Length);
        sbSalt.Append(chars[inx]);
    }

    return sbSalt.ToString();
}

private Random rnd = new Random();

The reason I did ""aAbBcC..."" instead of ""abc...ABC..."" was to increase the chances of randomization between the lower and capital case of each letter since they are next to each other.
And also, for a password salt, is it best to keep duplicate characters or should I make sure that each character is only encountered once per salt? Then again, if I allow duplicate characters, the salt combination amount that can be generated is greater.
Thanks in advance!
UPDATE #1:
I realised that if I called the RandomString function again, it would return the exact same Random String, so to fix that I declared rnd as new Random only once by moving it outside the function.
","The main use of salt is to make a encryption more difficult for a dictionary attack.
I do like to create dirt on the key itself and so far it is very efficient as i have encryption running couple hundred encryption/decryption per seconds over WCF services :
// sKey being the encryption key

// adding dirt to the string to make it harder to guess using a dictionary attack.
byte[] Dirt = Encoding.ASCII.GetBytes(sKey.Length.ToString());

// The Key will be generated from the specified Key and dirt.
PasswordDeriveBytes FinalKey = new PasswordDeriveBytes(sKey, Dirt);

// to use : FinalKey.GetBytes(16)

","114","<c#><string><random><passwords><salt>","3","1","2","2014-05-14 11:26:24","23653206","8","","-1","","2017-05-23 12:22:09","2014-05-14 11:04:02",""
"42840752","Giving ssh credentials for salt backend with gitfs in vagrant box","I use vagrant to test my salt configs. On one box I have a vagrant salt master and salt minion and on another box I have a salt minion.
I'm trying to switch over to use gitfs to fetch backend from my private repo.
This is my salt.master_config:
hash_type: sha256
auto_accept: True
roster_file: /srv/salt/roster
fileserver_backend:
  - roots
  - git

file_roots:
  base:
    - /srv/salt/environments/base/files
    - /srv/salt/environments/base/states
    - /srv/salt/users

gitfs_remotes:
  - git@github.com:user/repo.git
    - pubkey: /srv/salt/environments/base/files/.ssh/id_rsa.pub
    - privkey: /srv/salt/environments/base/files/.ssh/id_rsa
  - https://github.com/salt/users-formula.git
  - https://github.com/salt/openssh-formula.git

The other gitfs remotes have worked in the past but the new one does not accept the ssh keys.
When running sudo salt '*' state.apply I get:
ERROR   ] Error parsing configuration file: /etc/salt/master - mapping values are not allowed here
  in ""<string>"", line 16, column 13:
        - pubkey: /srv/salt/environments/base/fi

I have also tried using the Master Options from the vagrantup prosvisioning doc https://www.vagrantup.com/docs/provisioning/salt.html and added master_pub and master_key to my Vagrantfile:
master.vm.provision :salt do |salt|
      salt.install_master = true
      salt.master_pub = 'id_rsa.pub'
      salt.master_key = 'id_rsa'
      salt.install_type = 'stable'
      salt.master_config = 'master'
      salt.minion_config = 'salt-local'
end

But this is to ssh to the vagrant box and not actually used for gitfs.
How do you give ssh credentials for the vagrant config files?
","Found the solution:
gitfs_provider: pygit2
gitfs_pubkey: /srv/salt/path/to/files/ssh/id_rsa.pub
gitfs_privkey: /srv/salt/path/to/files/ssh/id_rsa

gitfs_remotes:
  - git@github.com:user/repo.git

","113","<vagrant><salt><gitfs>","1","0","1","2017-03-20 13:59:12","42905569","0","","","","","2017-03-16 17:18:33",""
"54439252","Change ossec(wazuh) agent profiles via saltstack","I'm trying to modify the <config-profile> section of a ossc.conf file, including a grains content.
something like:
ossec-profiles:
  - profile1
  - profile2

and I want to modify the section <config-profile> from
<config-profile>centos, centos7</config-profile>

to
<config-profile>centos, centos7, profile1, profile2</config-profile>

in the ossec.conf file
Any idea?
","This can be done by using file.replace module which makes you able to change a text in a file based on a pattern. So in your case you can do the following:
You need to select the pattern as regex group so you can use it later as shown below
configure_ossec:
  file.replace:
    - name: /path/to/ossec.conf
    - pattern: '((<config-profile>.*?)[^<]*)'
    - repl: {{ '\\1, ' +  pillar['ossec-profiles'] | join(', ') }}

Or you might use this pattern to match only whatever inside config-profile tags then you will be able to call it again in the repl parameter:
(?<=<config-profile>)(.*)(?=<\/config-profile>)


Note: As pillar['ossec-profiles'] should return a list of profiles
  then you have to use the join filter in order to separate the values
  with comma as a delimiter

And finally the output expected to be something like this:
     Changes:   
              ----------
              diff:
                  --- 
                  +++ 
                  @@ -1 +1 @@
                  -<config-profile>centos, centos7</config-profile>
                  +<config-profile>centos, centos7, profile1, profile2</config-profile>


","111","<jinja2><salt-stack><salt><ossec>","0","0","1","2019-02-04 11:09:17","54497210","0","","5676318","","2019-01-30 18:53:32","2019-01-30 11:11:37",""
"32029513","Best practice to / How do you protect files above root and hash the links for displaying to customers in a restricted login account area?","I have files in folders placed above the web public_html root and wish to echo out hashed links to customers whom have purchased products (digital downloads on an eCommerce store).  
The account area page is .php and of course customers will access this page using their login/password and have access to view/download only their purchased products which are set to be displayed by getting the orders from the database using function call and echo'ing table row information on the page.  The page is restricted access via authenticated customer(client_id) login/password.
My files url paths are written in MySQL database so should be accessible on echo, but I want to hash the links so customers cannot simply share direct url's on the web (as they do... pirates arrahhh!).
Am I ok placing said files simply above the root, or is it best practice to hash those links for added protection to avoid SQL injection as well... and if so, what code do I need to implement to protect things?
What I'm ultimately looking to do is is protect the files server side and display a hashed link to those and only those customers that have purchased a/the product.  But, I'm not sure (how to) what best protects me, my files and the customers investment...? 
Thanks!
What code can I use to distribute/print files securely to users, using PHP?  I'm stuck for an answer.
","I've solved this exact problem before. My strategy was to host files on Amazon CloudFront and use signed URLs.  When the page is loaded a URL is created for that user.  You can restrict sharing this links by allowing the URL to be useful for a specific amount of time or by a specific IP, etc.
","111","<php><mysql><hash><salt><digital-downloads>","0","0","1","2015-09-08 08:30:20","","5","1","5091622","","2015-09-08 08:30:20","2015-08-15 21:25:42",""
"47810305","rendering jinja in custom saltstack module","How to render a jinja template within a custom execution module?
I am trying to write a custom module to update confluence pages automatically. It is designed to be similar to ""file.managed"" call (only template source, context, and it has to respect pillar data available for given node).
can someone offer an example of pillar/context aware function call for rendering jinja template in custom module?
","do the same as saltstack does in their file.managed
example :
    if template:
        contents = __salt__['file.apply_template_on_contents'](
            contents,
            template=template,
            context=context,
            defaults=defaults,
            saltenv=__env__)

","111","<jinja2><salt>","0","0","1","2017-12-28 14:04:38","","0","","","","","2017-12-14 09:48:32",""
"43614453","Safer way to remove salt from a decrypted key","I have a decrypted key that is salted with random special characters (it's been changed): J_a&3@000$0=f%4{4-f-1*1(1-d@0-3&e|0)1&987*5(b@123$1'1(4*0)1}c+f'59@d@8_6_c)4@1@c(3} I need to remove all the special characters and return the unsalted version of it, for example, right now I'm using:
def remove_salt(decrypted_key):
    """""" Remove salt from a decrypted key """"""
    invalid_chars = set(string.punctuation)
    return_key = []
    for c in decrypted_key:
        if c not in invalid_chars:
            return_key.append(c)
    return ''.join(return_key)

So it would look like this:
>>> remove_salt(""J_a&3@000$0=f%4{4-f-1*1(1-d@0-3&e|0)1&987*5(b@123$1'1(4*0)1}c+f'59@d@8_6_c)4@1@c(3}"")
'Ja30000f44f111d03e019875b12311401cf59d86c41c3'
>>> 

Is there a safer way that I can remove the salt from the key without completely revealing what the salt is, what I mean is string.punctuation clearly states, that invalid characters are !@#$ .. etc. How can I remove this salt without completely revealing what my salt is?
Please note, the way this is salted was not my choice. I just need to get this thing unsalted without it being super noticeable as to what the salt is.
","I am confused with your use of salt.  Salt is typically appended at the beginning or end of a password, and the result encrypted and stored.  Salt values themselves are stored in the clear, and are use mainly to make dictionary attacks more difficult.  So, when a user enters their password, you retrieve their designated salt from wherever you have stored it, append it to what they have entered, hash it with whatever password hash you have chosen, and check to see if the stored hash matches the provided hash.  Perhaps some clarification is in need - why are you trying to remove a salt that is embedded in the password?
","111","<python><python-2.7><encryption><salt>","0","1","1","2017-04-25 15:29:51","","7","","7897425","","2017-04-25 15:29:51","2017-04-25 15:05:56",""
"34560037","Understating use of Salt with AES256 , and sending the data over the network","I am trying to encrypt a NSString content and send it to the server.
AES keys, should not be a simple plain text. 
Ex: ""Password$5"".
A salt should be added to it, so its like randomData + Password$5.
This key will be used for encrypting.
So, to the server I will be sending a JSON like this
{
 password:""Encrypted Password with AES256""
}

Now, my question is the key is random because the salt is random, so how would i decrypt the AES256 received encrypted string?
Though I know the key (Password$5), but I don't know the salt?
Do I have to send the salt to the server(what would be the best place for it, should it be in the header or in the response itself), is it safe?
{
password: ""Encrypted Password with AES256"",
salt: ""Random Hex bytes used""
}

Also, any way to handle this with Spring Restful services?
","If your goal is to encrypt data being sent over the wire, you should handle this using a secure connection. This is between the servers, rather than handled by your application code.
If you the data itself should be encrypted, then you want to handle generation of salts, encryption on the server-side.
For passwords, you will want to hash them not encrypt them. There should never be a reason to de-crypt a password. You can always hash the provided password and compare hash values.
","111","<servlets><encryption><spring-security><aes><salt>","0","1","2","2016-01-03 20:34:10","34560085","1","","451475","","2016-01-01 21:22:49","2016-01-01 21:04:27",""
"34560037","Understating use of Salt with AES256 , and sending the data over the network","I am trying to encrypt a NSString content and send it to the server.
AES keys, should not be a simple plain text. 
Ex: ""Password$5"".
A salt should be added to it, so its like randomData + Password$5.
This key will be used for encrypting.
So, to the server I will be sending a JSON like this
{
 password:""Encrypted Password with AES256""
}

Now, my question is the key is random because the salt is random, so how would i decrypt the AES256 received encrypted string?
Though I know the key (Password$5), but I don't know the salt?
Do I have to send the salt to the server(what would be the best place for it, should it be in the header or in the response itself), is it safe?
{
password: ""Encrypted Password with AES256"",
salt: ""Random Hex bytes used""
}

Also, any way to handle this with Spring Restful services?
","Just use https, all data and the query string are encrypted. Add certificate pinning and even MITM attacks are mitigated. Your encryption will be no better.
If you are determined to do your own encryption use RNCryptor. There is little chance that someone not steeped in cryptography will get the security right.
On the server do not save the password, run it through PBKDF2 with a salt and save the salt,iteration count and hashed password.
","111","<servlets><encryption><spring-security><aes><salt>","0","2","2","2016-01-03 20:34:10","34560085","1","","451475","","2016-01-01 21:22:49","2016-01-01 21:04:27",""
"18747355","Can multiple elements be used in a hash table?","I am trying to create a table that contains the user name, an encrypted pass phrase and a salt. The pass phrase and associated salt are unique to the user name. Would a hash table be a good idea for this setup or should I use a different data structure?
","Go for hashtable, if you want to store elements as key value pair, where keys need to be unique 
","111","<java><hashtable><salt>","0","0","1","2016-10-22 10:56:35","","2","","4370109","","2016-10-22 10:56:35","2013-09-11 17:14:23",""
"41020335","Using ROBOCOPY through Salt Master","I have SLS files set up to copy things from a network folder to a local directory on a minion. 
Looks a little like this:
cmd-test:
  cmd.run:
    - name: 'ROBOCOPY \\\CygwinSource C:\CygwinSource /E'
and get the following output:
-------------------------------------------------------------------------------
   ROBOCOPY     ::     Robust File Copy for Windows                              
-------------------------------------------------------------------------------

  Started : Tuesday, December 6, 2016 10:50:35 AM
2016/12/06 10:50:35 ERROR 1808 (0x00000710) Getting File System Type of Source \\<Server>\<program>\<file>\
The account used is a computer account. Use your global user account or local user account to access this server.


   Source - \\<Server>\<program>\<folder>\
     Dest : C:\<path>\<folder>\

    Files : *.*

  Options : *.* /S /E /DCOPY:DA /COPY:DATS /PURGE /MIR /NP /R:1 /W:1 

------------------------------------------------------------------------------

NOTE : NTFS Security may not be copied - Source may not be NTFS.

2016/12/06 10:50:35 ERROR 1808 (0x00000710) Accessing Source Directory \\<Server>\<program>\<file>\
The account used is a computer account. Use your global user account or local user account to access this server.

Waiting 1 seconds... Retrying...

When I run the same thing locally in command line as 'ROBOCOPY \\\CygwinSource C:\CygwinSource /E' and it worked perfectly. I have no idea how to fix this 'use local user account' that Robocopy seems to give when using it through salt.
I also tried adding /MIR and /SEC which didnt't work. 
Running Windows 10, Minion 2016.3.3
Master: Red Hat, 2016.3.3
","Salt seems to be connecting to the network resource with a computer account.  A few possible solutions:

Try changing the Salt Service on the Client (if that's how salt is executing the commands) to run as a domain user.
Try using the salt file server
Implement this hacky workaround where a scheduled task is created - discussed in the github issue that seems related to your problem: https://github.com/saltstack/salt/issues/16340

","110","<salt><robocopy>","0","1","1","2016-12-07 15:02:39","41020786","0","","","","","2016-12-07 14:42:23",""
"2424181","How to retrieve salt if using HTTP authentication scheme?","Is it possible to use salted password along with standard HTTP authentication schemes ( FORM or DIGEST ) ?
I am using GlassFish, and when I request a protected page, the form or the answer with the nonce are sent back directly by the server. I can't see any obvious way to hook into the server mechanism to insert the salt in the 302 response ( which I thought could be a good idea ). Thus the password I return can just be hashed without salt.
Is it so ?
Thank you.
","","110","<callback><salt><http-authentication>","2","","0","2013-07-25 19:12:54","","0","","","","","2010-03-11 10:32:35",""
"31350045","Password salting and hashing asp.net?","I have spent the past hour reading up on salting and still don't understand how it is achieved. Forgive me if im wrong, but the way I am thinking of salting is, storing an ArrayList of random strings for example 100 strings. Now when a user registers, a method gets a random string from the array list and retrieves the index of the string within the array to insert into my DB, it then applies this random string to the password the user entered and then hashes the whole string and stores into the DB.
Now when the user logs in it will retrieve the index for the ArrayList of random strings, then applies it to the entered password to then hash the whole string and compare the 2 passwords.
Is this a good way of salting? Is this classed as salting?
","It's better to have unique salts for each user/password hash instead of reusing a limited set of 100 salts.
The reason is because of the way hackers attempt to compromise a database full of passwords once they get a hold of it, in particular using rainbow tables to find known values shared between multiple users. 
For example (pseudo-code):
This is bad because once a hacker cracks the first password hash, both users are compromised.
 //BAD WAY
 var nonUniqueSalt = ""some salt value"";
 var userPass1 = ""P@ssword!"";
 var userPass2 = ""P@ssword!"";

 //Bad! This will be true!
 var isSame = (DoHash(userPass1 + nonUniqueSalt) == DoHash(userPass2 + nonUniqueSalt)); 

This way is better, because the salts are different even if the passwords are the same, so the hacker can't use rainbow tables and is forced to compromise each user's password individually.
 //BETTER WAY
 var uniqueSalt1 = ""unique salt 1"";
 var userPass1 = ""P@ssword!"";
 var uniqueSalt2 = ""unique salt 2"";
 var userPass2 = ""P@ssword!"";

 //Better! This will be false.
 var isSame = (DoHash(userPass1 + uniqueSalt1) == DoHash(userPass2 + uniqueSalt2)); 

As far as the salting ""algorithm"" some users mentioned in comments, you don't REALLY need to worry about it too much aside from trying to make the salt unique to each user (because of the reasons described above).
In practice, whatever salt you use will need to be stored in the DB alongside the password hash, so once a hacker has the database, he'll have the value you used for a salt no matter how you go about deriving it.
As such, using a salt based on something like Guid.NewGuid().ToString() is sufficient for simply having unique values for each login.
","109","<c#><asp.net><hash><md5><salt>","-1","1","1","2015-07-10 22:04:01","","15","","","","","2015-07-10 20:49:41",""
"16286875","Does a salt have to be random?","I dont understand why the salt has to be randomly generated instead of just unique. For example, if you have a table with a user_id column (which is unique) couldnt you just tack that on to the password for the salt?

Jean-Bernard Pellerin is correct and this is a duplicate of https://stackoverflow.com/a/536756/516813 . I couldnt find that in the search and I am closing the question. FYI, that answer shows that the main requirement IS uniqueness.
","
User IDs are unlikely to be long enough to stop good rainbow tables
The salt should change whenever the password changes.
(to prevent attackers from knowing whether a user changed the password back to an earlier password)

","109","<security><passwords><salt>","0","1","2","2013-04-29 20:14:21","","1","1","-1","","2017-05-23 10:28:56","2013-04-29 19:40:50","2013-04-29 20:13:19"
"16286875","Does a salt have to be random?","I dont understand why the salt has to be randomly generated instead of just unique. For example, if you have a table with a user_id column (which is unique) couldnt you just tack that on to the password for the salt?

Jean-Bernard Pellerin is correct and this is a duplicate of https://stackoverflow.com/a/536756/516813 . I couldnt find that in the search and I am closing the question. FYI, that answer shows that the main requirement IS uniqueness.
","Yes, you could, but that would weaken the power of the salt. Good salts are long and difficult to guess. Good random numbers meet these criteria, which is why they are used.
","109","<security><passwords><salt>","0","1","2","2013-04-29 20:14:21","","1","1","-1","","2017-05-23 10:28:56","2013-04-29 19:40:50","2013-04-29 20:13:19"
"39845290","Generate/storing/reading Secure MCRYPT Salt","I know this may be somewhat a common question, there are SO many articles across the net about generating secure salts for password hashing. So far I've picked up the mcrypt_create_iv is generally used for initialisation vectors for encryption, it can be used to create salt securely especially when used against MCRYPT_DEV_RANDOM.
For some reason despite people having success with it, whenever I use:
$Salt = mcrypt_create_iv(22, MCRYPT_DEV_RANDOM);

Apply it to the hash, then separately input it into the db. When coming back and authenticating and putting it all together... it never seems to work correctly.
Are there some characters that are generated by the mcrypt_create_iv function that aren't compatible with crypt? Because the second I use a somewhat plaintext salt whether generated from a secure source or not.. it works fine. But I would like to make use of the special characters mcrypt uses.
(Also, I am using the $6$ algorithm on crypt so only 16 bytes required for the salt)
Any help would be appreciated!
Thanks :)
","I recommend using the password_hash() family of functions, as these will take care of the hashing for you completely. They also offer future-compatibility, and is generally the recommended method for handling passwords in PHP.
Read more about how to use them in this answer:
https://stackoverflow.com/a/6337021/5086233
As for your original question: I suspect a charset issue somewhere, but without seeing the code (and table definition) that handles the hash it's impossible to tell.
","108","<php><mysql><salt><mcrypt><crypt>","0","1","1","2016-10-04 06:20:17","39845383","0","","2518525","","2016-10-04 06:13:49","2016-10-04 06:12:01",""
"22444800","PHP login password salting not allowing new users to login","Have an issue with my login script - users register or I can add on my admin panel but when they go to login they are advised their username/email or password is incorrect - I know neither is but there is a salt password hash in place.
<?php

// login_process.php

// LOGIN RESPONSES 
//
// 1    Login successful
// 0    ...
// -1   Database error
// -2   Data fields empty
// -3   Username/email address not registered
// -4   Password incorrect
// -5   
//

include_once(""check_login_status.php"");
// If user is already logged in, just update page
if($user_ok == true){
    header(""location: index.php"");
    exit();
}

// AJAX CALLS THIS LOGIN CODE TO EXECUTE
if(isset($_POST[""e""])){
    // CONNECT TO DATABASE
    include_once(""db_conx.php"");
    // GATHER THE POSTED DATA INTO LOCAL VARIABLES AND SANITIZE
    $e = mysqli_real_escape_string($mysqli, $_POST[""e""]);
    $p = $_POST[""p""];
    // GET USER IP ADDRESS
    $ip = preg_replace('#[^0-9.]#', '', getenv('REMOTE_ADDR'));
    // FORM DARA ERROR HANDLING
    if($e == """" || $p == """"){
        echo -2;
        exit();
    } else {
        // END FORM DATA ERROR HANDLING
        $sql = ""SELECT mem_id, mem_username, mem_pwd, mem_salt, mem_active, mem_level FROM smd_members WHERE (mem_email='$e' OR mem_username='$e') AND mem_active=1 LIMIT 1"";
        $query = mysqli_query($mysqli, $sql);
        if(mysqli_errno($mysqli)){
            echo -1;
            exit();
        }
        if(mysqli_num_rows($query) == 0){
            echo -3;
            exit();
        }
        $row = mysqli_fetch_row($query);
        $db_id = $row[0];
        $db_username = $row[1];
        $db_pass_str = $row[2];
        $db_pass_salt = $row[3];
        $db_active = $row[4];
        $db_level = $row[5];    

        $salt_complete = '$2y$14$'.$db_pass_salt;       

        // encrypt password with salt
        $crypt = crypt($p, $salt_complete);

        if($db_active == 0){
            header(""location: ../reactivate.php?u="".$db_id);
        }


        if($crypt != $db_pass_str){
            echo -4;
            exit();
        } else {
            // CREATE THEIR SESSIONS AND COOKIES
            $_SESSION['userid'] = $db_id;
            $_SESSION['username'] = $db_username;
            $_SESSION['password'] = $db_pass_str;
            $_SESSION['level'] = $db_level;
            setcookie(""id"", $db_id, strtotime('+30 days'), ""/"", """", """", TRUE);
            setcookie(""user"", $db_username, strtotime('+30 days'), ""/"", """", """", TRUE);
            setcookie(""pass"", $db_pass_str, strtotime('+30 days'), ""/"", """", """", TRUE);
            setcookie(""level"", $db_level, strtotime('+30 days'), ""/"", """", """", TRUE);
            // UPDATE THEIR ""IP"" AND ""LASTLOGIN"" FIELDS
            $sql = ""UPDATE smd_members SET mem_lastip='$ip', mem_lastlogin=now() WHERE mem_username='$db_username' LIMIT 1"";
            $query = mysqli_query($mysqli, $sql);
            echo 1;
            exit();
        }
    }
    exit();
}
?>

","<?php

// signup_process.php

if(!isset($_POST[""e""])){
    // user has got here incorrectly
    // redirect back to index.php (TODO...)
    echo -10;
    exit();
}

include_once(""db_conx.php"");
// get all varibles and make them db safe
$f = mysqli_real_escape_string($mysqli, $_POST[""f""]);
$l = mysqli_real_escape_string($mysqli, $_POST[""l""]);
$e = mysqli_real_escape_string($mysqli, $_POST[""e""]);
$p = $_POST[""p""];
$u = mysqli_real_escape_string($mysqli, $_POST[""u""]);
$a = $_POST[""a""];
$id; // temp holder for later


// first check username or email is not used
$query = ""SELECT mem_id FROM smd_members WHERE mem_username = '$u' OR mem_email = '$e'"";
$result = mysqli_query($mysqli, $query);
if(mysqli_errno($mysqli)){
    // error with db
    error_log(""E: "".$_SERVER['REQUEST_TIME']."" "".__FILE__."" "".__LINE__."" Database error - "".mysqli_error($mysqli).""\n"",0);
    echo 0;
    exit();
}
elseif(mysqli_num_rows($result)){
    // username or email address already used
    echo -1;
    exit();
}

// crypt password with random salt using Blowfish
// create salt
$salt = """";
$salt_chars = array_merge(range('A','Z'), range('a','z'), range(0,9));
for($i = 0; $i < 22; $i++){
    $salt .= $salt_chars[array_rand($salt_chars)];
}
$salt_complete = '$2y$14$'.$salt;

// encrypt password with salt
$crypt = crypt($p, $salt_complete);

// get user ip
$ip = $_SERVER['REMOTE_ADDR'];

$query = ""INSERT INTO smd_members (mem_username, mem_firstname, mem_lastname, mem_email, mem_pwd, mem_salt, mem_signedup, mem_lastlogin, mem_signupip, mem_lastip, mem_avatarid, mem_active, mem_level) VALUES ('$u', '$f', '$l', '$e', '$crypt', '$salt', NOW(), NOW(), '$ip', '$ip', 0, 1, "".intval($a)."")"";

mysqli_query($mysqli, $query);
if(mysqli_errno($mysqli)){
    // error with db
    error_log(""E: "".$_SERVER['REQUEST_TIME']."" "".__FILE__."" "".__LINE__."" Database error - "".mysqli_error($mysqli).""\n"",0);
    echo 0;
    exit();
}
else{
    $id = mysqli_insert_id($mysqli);
}

// now create login session and cookie. COOKIES!!!

// if all good, send ok message
echo $id;
exit();
?>

","106","<php><login><salt>","-3","0","1","2014-03-17 00:18:13","","25","","","","","2014-03-17 00:01:23",""
"23509864","Does hashing the salt add any security?","I have been thinking very hard about securing my web application even further from brute-force attacks and over-all security. I know that we can store our salt value in plain-text and we still have good security.
Would hashing our salt value add more security to the web application or is it a waste of time and resources on the server?
","At the end you have to concatenate the password and the salt value, so you need to have the original salt value. If you hash the salt value, you do not have its original value anymore since hashing is a one-way function, so I don't think that hashing the salt would be useful (if I understood your question correctly).
","105","<security><hash><salt>","4","3","3","2014-05-07 08:07:39","","5","0","53114","","2014-05-07 07:16:33","2014-05-07 06:00:24",""
"23509864","Does hashing the salt add any security?","I have been thinking very hard about securing my web application even further from brute-force attacks and over-all security. I know that we can store our salt value in plain-text and we still have good security.
Would hashing our salt value add more security to the web application or is it a waste of time and resources on the server?
","The purpose of a salt is to prevent hackers from accessing the password through pre-calculated rainbow tables. The only way of achieving the password then (implyingi a good hashing algorithm is used) is to brute force, which would take equally long whether the salt is encrypted or not.
","105","<security><hash><salt>","4","2","3","2014-05-07 08:07:39","","5","0","53114","","2014-05-07 07:16:33","2014-05-07 06:00:24",""
"23509864","Does hashing the salt add any security?","I have been thinking very hard about securing my web application even further from brute-force attacks and over-all security. I know that we can store our salt value in plain-text and we still have good security.
Would hashing our salt value add more security to the web application or is it a waste of time and resources on the server?
","No you would not gain anything.
If you hash your password with a salt, and then store a hash of the salt in the database, you won't be able to verify the password.
If you hash the salt, and then use this salt-hash to hash the password, you only exchanged the salt. You will have to store the salt-hash in the database and it acts like the original salt. The time to hash the salt you spend better in doing more iterations on the password hashing.
","105","<security><hash><salt>","4","1","3","2014-05-07 08:07:39","","5","0","53114","","2014-05-07 07:16:33","2014-05-07 06:00:24",""
"11715548","How does service salt work?","I want to know how service salt works. I know how to bcrypt password and give each user an unique salt.  But I heard there is also another layer you can add by having a service salt.  I am just curious how that works. What is the difference between that and an unique salt generated for the user?
Here's where I saw the term service salt: Web Application - Storing a Password
","A salt prevents reverse checks against rainbow tables that are meant to hack passwords easily. The ""salt"" converts something easily hackable into something more difficult for a hacker to decrypt.
I would highly reccomend that you toy around with this api;
http://www.openwall.com/phpass/
It does all that nitty gritty password generation for you without you needing to be a security expert. Additionally, it has fallbacks built into it to work with older/weaker systems.
","105","<php><passwords><salt><bcrypt>","0","0","3","2012-07-30 10:47:48","11719937","4","","-1","user1187135","2017-05-23 12:00:29","2012-07-30 04:50:37","2012-08-15 02:32:56"
"11715548","How does service salt work?","I want to know how service salt works. I know how to bcrypt password and give each user an unique salt.  But I heard there is also another layer you can add by having a service salt.  I am just curious how that works. What is the difference between that and an unique salt generated for the user?
Here's where I saw the term service salt: Web Application - Storing a Password
","
""The benefit provided by using a salted password is making a lookup
  table assisted dictionary attack against the stored values
  impractical, provided the salt is large enough. That is, an attacker
  would not be able to create a precomputed lookup table (i.e. a rainbow
  table) of hashed values (password + salt), because it would take too
  much space. A simple dictionary attack is still very possible,
  although much slower since it cannot be precomputed.""

Source: http://en.wikipedia.org/wiki/Salt_(cryptography) 
","105","<php><passwords><salt><bcrypt>","0","1","3","2012-07-30 10:47:48","11719937","4","","-1","user1187135","2017-05-23 12:00:29","2012-07-30 04:50:37","2012-08-15 02:32:56"
"11715548","How does service salt work?","I want to know how service salt works. I know how to bcrypt password and give each user an unique salt.  But I heard there is also another layer you can add by having a service salt.  I am just curious how that works. What is the difference between that and an unique salt generated for the user?
Here's where I saw the term service salt: Web Application - Storing a Password
","The ""service salt"" (described as ""a sitewide static salt"" in the question you cite, and also sometimes called ""pepper"" in crypto literature) is simply a secret string which is fed to the password hashing algorithm along with the password and the per-user unique salt.
The point of having a ""service salt"" like that is that, unlike the per-user salt values, the service salt is not stored in the database but somewhere else (typically in a configuration file, or hard-coded into the application).  Thus, it protects the passwords against attacks that only compromise the database but don't allow the attacker to access the app configuration.  With modern web apps, such an attack scenario is not as unlikely as it might seem; for example, a simple SQL injection attack would often fit this scenario.
One detail to keep in mind is that, unlike the per-user salt, which just needs to be unique and not too easily predictable, the ""pepper"" actually has to contain a substantial amount of entropy (say, 128 bits) and must be kept secret for it to be of any use.
In any case, including such a secret constant in the password hash calculation is pretty easy, so there's very little reason not to do it: even if your password hashing algorithm doesn't explicitly support it, you can just, say, append the ""pepper"" to each password.
","105","<php><passwords><salt><bcrypt>","0","1","3","2012-07-30 10:47:48","11719937","4","","-1","user1187135","2017-05-23 12:00:29","2012-07-30 04:50:37","2012-08-15 02:32:56"
"48611027","Storing Salts for Passwords","I've been doing some research about storing salts, and apparently the most common way to do it is to store it in a separate column in the same table as the username and password. I've seen that all over this and other websites, but to me this is like putting the key right next to the safe. If anyone ever gets access to the authentication table the hackers would win. If they do but the salt isn't found there they wouldn't have as much to go on.
I operate a three tiered system and would prefer some method of storing the salt somewhere on Java operated middle-tier that is behind a firewall and not accessible directly from the internet. Perhaps some XML or something that none of the other parts of the application will touch?
","Let's go over what the salt really is, then.
It's a way of making sure 

Two users with the password aren't obvious.


""password"" with PBKDF2-HMAC-SHA-512, 10000 iterations, keeping only the first 32 bytes of output, stored in Base64, and a salt of empty string is ALWAYS 


9MpQfAfQvTG8d5oIdWgmpv2d2X1DrCXkspoJM6vqA/M=

Thus, if you have 5% of your users with that as their password hash, you can be pretty sure it's either ""password"" or ""12345"" or one of the other worst passwords.

Attackers cannot precompute attack lists in advance of leaks and then nearly-instantly match their ""rainbow table"" of results to the leak to eliminate that entire precomputed list, then get on with cracking the hard passwords without wasting precious time on the easy ones.

So, if we have an attacker with a password list of ""password"" and ""12345"", and you use no salt, they have already figured out that those results with the setup above are:

9MpQfAfQvTG8d5oIdWgmpv2d2X1DrCXkspoJM6vqA/M=

and

I2bEyBbaxTBvHdJ7rIu7kdR2liwGMCg62lyuoj41NB8=

Thus, the attacker gets your password list however, and they nearly instantly eliminate spending any computation time on the MANY of your users chose terrible passwords, which means they have more time, and combinations, left to try on the higher difficulty targets.

If you use a 16 byte cryptographically random salt for each userid, then instead of needing to perform the hash algorithm once for each password*rule on their list, they have to perform it 2^128 times for each, which is computationally infeasable at this time, let alone the storage requirements.

There's no point in keeping the salt secret - it serves those two purposes without any need for more secrecy than the password hash itself.
","104","<authentication><hash><salt><password-encryption>","0","2","1","2018-02-04 22:26:34","48613625","4","","","","","2018-02-04 17:33:40",""
"43914071","Encrypt a password using Salt UTF-16","I need to encrypt a password using salt and it must be UTF 16.
This is what i have at the moment but they told me its UTF-8
$key = 'dfs7dsfsdf';
$timestamp = '201705111500';
$concat = $key . $timestamp;
$hash = hash('sha256', $concat);

","Try this
$key = 'dfs7dsfsdf';
$timestamp = '201705111500';
$concat = $key . $timestamp;
$cString = mb_convert_encoding($total, ""UTF-16LE"");
$hash = hash('sha256', $cString);


You forgot
$cString = mb_convert_encoding($total, ""UTF-16LE"");

","103","<salt><utf-16>","0","2","1","2017-05-11 16:01:04","43920489","1","","","","","2017-05-11 11:26:09",""
"44679385","Verifying a hashed password","UPDATED
I have updated to PHP5 based on recommondations, I still can't figure out how to verify a password
Here is the password_hash script that enters the password into a field which is a varchar (255) field. (a username is also inserted). This all inserts data as to what I think it should IE the username and a long random code for the password.
  $options = array(
    'cost' => 12 // the default cost is 10
  );
  $ex_password = password_hash($_POST[""ex_password""], PASSWORD_BCRYPT, $options);

then I use the following on my login form 
$sql = ""SELECT ex_username, ex_password FROM exhibitormain WHERE ex_username=:ex_username LIMIT 1"";
$stmt = $pdo->prepare ( $sql );
$stmt->bindValue( "":ex_username"", $ex_username, PDO::PARAM_STR );
$stmt->execute();
$user = $stmt->fetch();
$userExists = $stmt->fetchColumn();
if(!empty($user)){
  if (hash_equals($_POST['ex_password'], $user['ex_password'])) {
      echo 'Password is valid!';
  } else {
      echo 'Invalid password.';
  }
}else{
    echo '<p class=""error"">No such username found.</p>';;
}

What Im trying to do is check that the username exists and if it does then compare that the password is correct.
If I enter a username that isn't in the database I follwos the correct path and shows 'No such username found.' error message but when I type in a username that does exists where I get the password right or wrong it always sends me down the path that shows the erro 'Invalid password.'
Any help Apprecieted.
Ian
","","103","<php><hash><salt><verify><crypt>","0","","0","2017-06-22 10:23:50","","8","","2194556","","2017-06-22 10:23:50","2017-06-21 14:46:30",""
"14203566","undefined POST and is my bcrypt system good?","So Ive been looking arround internet to bcrypt my passwords, I got this code together from youtube, Im not sure if thats what I need since this is my first time doing such a thing.
And also I get an error saying that user, pass and mail are undefined aldo thy work fine in functions I use and in if statements above. This code is work in progress, I have yet to put salting and crypt functions in an if statement. 
Heres code:
<?php require_once(""session.php"");?>
<?php require_once(""connect.php"");?>
<?php
if(isset($_POST[""createUser""]) && isset($_POST[""user""], $_POST[""pass""], $_POST[""mail""])){
    createUser ($_POST[""user""], $_POST[""pass""], $_POST[""mail""]);
} 
else if(isset($_POST[""userGames""])){
    userGamesUpdate ($_POST(""selectedGameId""));
}
else if(isset($_POST[""userLogin""])){
    login ($_POST[""user""], $_POST[""pass""]);
}
else if (!isset ($_POST)){
    echo ""error"";
}

?>
<?php 

$lenght = 21;
function random_string($lenght){

    $charset = array_merge˙(range(""a"", ""z""), range(""A"", ""Z""), range(""0"", ""9""));
    shuffle($charset);
    global $randozoz;
    $randozoz = array_slice($charset, 0, $lenght);
    return implode("""", $randozoz);

}
$username = $_POST[""user""];
$password = $_POST[""pass""];
$email = $_POST[""mail""];

function prevent($wha) {

    $wha = stripslashes($wha);
    $wha = mysql_real_escape_string($wha);
    return $wha;
}

prevent($username);
prevent($password);
prevent($email);

$str = substr($username, 0, 6);
$salt = ""$2a$12$"".$randozoz."""".$str.""$"";

//register
function createUser ($username, $password, $email ){
    //Get from form


    $hashedPassword = crypt($password); 
    //Submit to database
    //make query
    $query = (""INSERT INTO users ( username , email , hashPass ) VALUES ( '$username' , '$email' , '$hashedPassword')"");
    //use query
    if (mysql_query($query)) {
        //userMade.php
        $query = (""SELECT id FROM users WHERE username = '{$username}'"");
        $userId = mysql_fetch_array($query);
        $_SESSION[""userId""] = $userId;
        $_SESSION[""username""] = $username; 
        header(""Location: ../userMade.php"");
        exit;
    } else {
        echo ""<p>"".mysql_error().""</p>"";
    }
}

function login ($username, $password){

    $hashedPassword = sha1($password); 
    //Submit to database
    //make query
    $query = (""SELECT id, username FROM users WHERE username = '{$username}' AND hashPass = '{$hashedPassword}'"");
    $result_set = mysql_query($query);

    if (mysql_num_rows($result_set) == 1) {
        //frontpage, session
        //$userFound = mysql_fetch_array($result_set);
        $foundUser = mysql_fetch_array($result_set); 
        $_SESSION[""userId""] = $foundUser[""id""];
        $_SESSION[""username""] = $foundUser[""username""];
        header(""Location: ../frontpage.php"");
        exit;
    } else {
        $message = ""Your username and/or password is wrong! Please try again."";
    }
}
?>

Login system is not integrated with crypt and salting system. But am I doing salting right?
Heres some random passwords that come out of this system:
$1$gc5.pn/.$txhBJZBDG3xgraJYIYY0I1
$1$8e0.vX3.$RfFLRT/iE.MXfws2fnz30.

And error shows in part where Im trying to protect against SQL injection, also will that system work? I dont really understand it to be honest.
","Your code is full of bad things, it is hard to find a spot to start. It doesn't even work correctly.
But to answer your question on bcrypt: No, you are doing it wrong. To make it most easy for everybody using password hashing there will be a PHP Hashing API starting with PHP 5.5.
Because PHP 5.5 still is in development, there is a compatibility library that backports these functions to recent PHP versions 5.4 and down till 5.3.7. Earlier PHP have a security issue in their bcrypt implementation.
Download this library: https://github.com/ircmaxell/password_compat
","100","<php><post><sql-injection><salt><crypt>","0","1","1","2013-01-07 22:13:31","14204981","5","","","","","2013-01-07 20:32:05","2014-06-25 10:09:38"
"53319927","Masterless Windows Salt minion - Where to keep state files","I have install salt-minion on windows machine and made it masterless.
Where do i keep state files, so that salt is able to find them.
Currenlty, when i keep it in C:\salt and run salt-call state.sls test -l debug, i get the following log,
[DEBUG   ] LazyLoaded roots.envs
[DEBUG   ] Could not LazyLoad roots.init: 'roots.init' is not available.
[DEBUG   ] Updating roots fileserver cache
[DEBUG   ] Determining pillar cache
[DEBUG   ] LazyLoaded jinja.render
[DEBUG   ] LazyLoaded yaml.render
[INFO    ] Loading fresh modules for state activity
[DEBUG   ] LazyLoaded jinja.render
[DEBUG   ] LazyLoaded yaml.render
[DEBUG   ] Could not find file 'salt://test.sls' in saltenv 'base'
[DEBUG   ] Could not find file 'salt://test/init.sls' in saltenv 'base'
[DEBUG   ] compile template: False
[ERROR   ] Template was specified incorrectly: False
[DEBUG   ] LazyLoaded highstate.output
local:
    Data failed to compile:
----------
    No matching sls found for 'test' in env 'base'

","","99","<salt-stack><salt>","1","","0","2018-11-15 12:52:53","","1","","","","","2018-11-15 12:52:53",""
"27551118","Password hashing and salting","I'm trying to wrap my head around the logic of encrypting passwords with MD5/SHA combined with salting.
I understand the concept of a user proving a text password, and appending a random string (salt) to the text password, and hashing the final string via whatever encryption method you want.
This is where I lose the concept
Say in my database of users, I have usernames, and encrypted passwords generated with the random salt value
When the user goes to log into a system, and they enter their password, how do I obtain the correct salt to check the password validity? 
If the salt is randomly generated to begin with, I can't recalculate it
Do I have to store the salt with the username/password record? If I query the database for the salt value by username, it would seem that defeats the purpose of having the salting.
How do I obtain the correct salt when it comes time to validate the supplied password?
","Yes, you store the salt.  Salting is used to prevent pregenerated rainbow tables, it is not required to be secret, just unpredictable.
","98","<hash><salt>","1","0","3","2014-12-19 11:59:25","","0","","81414","","2014-12-18 17:26:41","2014-12-18 16:18:46",""
"27551118","Password hashing and salting","I'm trying to wrap my head around the logic of encrypting passwords with MD5/SHA combined with salting.
I understand the concept of a user proving a text password, and appending a random string (salt) to the text password, and hashing the final string via whatever encryption method you want.
This is where I lose the concept
Say in my database of users, I have usernames, and encrypted passwords generated with the random salt value
When the user goes to log into a system, and they enter their password, how do I obtain the correct salt to check the password validity? 
If the salt is randomly generated to begin with, I can't recalculate it
Do I have to store the salt with the username/password record? If I query the database for the salt value by username, it would seem that defeats the purpose of having the salting.
How do I obtain the correct salt when it comes time to validate the supplied password?
","From Wikipedia, Salt (cryptography)

A new salt is randomly generated for each password. In a typical setting, the salt and the password are concatenated and processed with a cryptographic hash function, and the resulting output (but not the original password) is stored with the salt in a database

You store it with the hash, to prevent dictionary attacks.
","98","<hash><salt>","1","1","3","2014-12-19 11:59:25","","0","","81414","","2014-12-18 17:26:41","2014-12-18 16:18:46",""
"27551118","Password hashing and salting","I'm trying to wrap my head around the logic of encrypting passwords with MD5/SHA combined with salting.
I understand the concept of a user proving a text password, and appending a random string (salt) to the text password, and hashing the final string via whatever encryption method you want.
This is where I lose the concept
Say in my database of users, I have usernames, and encrypted passwords generated with the random salt value
When the user goes to log into a system, and they enter their password, how do I obtain the correct salt to check the password validity? 
If the salt is randomly generated to begin with, I can't recalculate it
Do I have to store the salt with the username/password record? If I query the database for the salt value by username, it would seem that defeats the purpose of having the salting.
How do I obtain the correct salt when it comes time to validate the supplied password?
","The salt is stored in the database, so you can use the same salt to verify the password. Todays libraries often will include the salt in the resulting hash-value like this (result of the PHP function password_hash()):
$2y$10$nOUIs5kJ7naTuTFkBy1veuK0kSxUFXfuaOKdOKf9xYT0KKIGSJwFa
 |  |  |                     |
 |  |  |                     hash-value = K0kSxUFXfuaOKdOKf9xYT0KKIGSJwFa
 |  |  |
 |  |  salt = nOUIs5kJ7naTuTFkBy1veu (22 characters)
 |  |
 |  cost-factor = 10 = 2^10 iterations
 |
 hash-algorithm = 2y = BCrypt

This 60 character string can be stored into a single field in the database. The verifying function can extract the salt from this string. The salt is not a secret, it fulfills its purpose even when it is known.
Please note that algorithms like MD5 and SHA-* are not appropriate to hash passwords, because they are too fast. Instead use an algorithm with a cost factor like BCrypt or PBKDF2. For more information you can have a look at my tutorial about safely storing passwords.
","98","<hash><salt>","1","1","3","2014-12-19 11:59:25","","0","","81414","","2014-12-18 17:26:41","2014-12-18 16:18:46",""
"30949445","Is this a bad practice for storing passwords in PHP?","I'm using the crypt function in PHP to hash passwords, along with salt obviously. But I'm generating my salt by calling the md5 function over the date function. And every time the user logs in the salt gets regenerated.              
Is any of this bad in any way? I am still relatively new to PHP (and webdev) and I'm trying to get my security right before I deploy this code.
$salt = md5(date('m/d/Y h:i:s a'));

","It is considered bad practice by many. Here are (some of) the reasons:

You are using md5, a weak, old, and fast to calculate hash. 
The salt is generated in a predictable fashion. The salt should be different for every user (even if registered in the same second) and should be more random than the date.
You are reinventing the wheel. You are using the crypt function to hash the passwords, so there is no reason to not use that for getting a secure salt. password_hash() is a built in function of PHP 5.5, and a compatibility library for versions slightly older than that.

How to use password_hash()
TL;DR: use password_hash() to generate the salt AND hash the password, no need to reinvent the wheel in a less secure fashion.
Credit to be given to Hobo Sapiens for mentioning password_hash() first.
","97","<php><hash><passwords><md5><salt>","1","1","1","2015-06-20 02:45:10","30949746","3","","4539709","","2015-06-20 02:11:31","2015-06-20 01:42:16",""
"21713330","is this code valid for password hashing?","is this a valid code for salt generation.what does it do if it is invalid then please explain what i should do and please a little less technical im only 15
$password='123'//test password
$salt=openssl_random_pseudo_bytes(rand());//generate salt
$prehash_password=hash('sha512',$password);//pre hash the password 
$final_password=hash('sha512',$password.$salt)//generate the final password

result....(too long so cropped it)
=m]ˆÂýÇâ&-Ù©Þ}§˜ü=l|‹|oÓÌ×±[ý’p'lJÛ|›¦nXÝxÜ†9óÔ¢¤ÿ‰""µ^¾õJ JI^íó,•±†û½L›T0*Stÿ#s´Ë§ÔMgå.£J§èeRzù/‡üœ¿ª¡ Ç¹áuT¯ '0¯ÄŒÐ²A@ü •uuYRpýš™ü5%P—í¬ïr‚×ODÜ—´“„?”öÛž;Bí#Þcõ&¾qLEâ« |Z¯ÔÐö%R•9âÇ¸—•êäxZ³ÎÉ¶ÉêS\™!qóœ[)ÚúÞçøƒŠº¾*Ü/X""Œê@µð¶¨$p1£B5iÚ Ú†õÊ¬É¦E3^ür¾auD»ëêA)d„ÏHzYÁepƒê¬~ô¡œ8e‡ñˆÖM&èæ<ëâM""-¹uSÂÖøsBŒiÓÑ!³ÊÅwÛÃ¶>kHåO'dyÁ(<Ýx´Ÿì¸¤˜)èÀ©@ëQæ‚Ëã:04q-‡è—žÄ­""tÌÀ±IŒW1p–Ì‡bïV¢¼-$»¥ˆlË*Ê^¡´ZK ×±›mßhœôNþ`‰û§4p9 þ]Ùö®u*)ú24qØI£–]†#8kÐ>a…t fö¾¶+k—a ?L¯¶ƒÎµÜz‘k†—)+¥qþÞ \®qÔª|ãO¹¥ô?I°®íÉ¨‘‡3 dÿë€ìV&""+Ï}*Lí€Ÿh""p  Ø""ð¶Øäç6ˆkƒ¹òÓ@FK²Ä?åüï<:CˆšÛƒ1J®b™ý)žy´ÔÄ¶a™_Áïx^—õö6Ãqc€õš¾©÷M—¡å´7ÁÑ©Nà›¶AÚ¢öEM:""¶Ž4iáîµ&Cþ²Pû¶££.ÿ *?©ñÞ`&ÞGøó§¦_B¸‡h–¦éÞæ'è£©n¥êý5‘¿kcñV‰1?xçÛ#”C0ÒÁià¿0Ÿ¥çWdÅ˜]íhæS'ã'–ÿðò§ü‡ì¨šãfïï Á0ó7kÀ%±N“£\Br)""úklìŠ¢˜˜[’€:º–Í  GaùÛaçˆwsÔÚ‚õòSd›±ltWZ›è_¹ªÿã§%ÉÞxî³«ŸKÊMUYÜJ@Šý+BBL¤®Š±    Â„¼‚ÈûæÀŠBñã“„º/oú–·fJäƒrÀ°‡¤N2¸×kìô""aõÙ%ÚÂWŸÿ–†Œ»Còc?…£Rw4ËZ_W§{b™”î—/Ä¾›:ºj;U.½ÓM “É¥8T37?¿UÃh5Ä½>éÎÔášÄxÃ€¥ä·$í÷äÕÖ·¿Oowç<ÖÅ!XNâjW”öb1GâÔ¯yYÇ+¶pL´[sŠÍT.×KXNK“kh-ñ@bÌÜ^Ü÷]é ¿}fkøD‡0GE îŽï˜;pÂsŠ¶ZfÀ§1gjõÂcøwãj•‡'BšÓ{»£¬²BhaA2ÿT Ë~S{‹øÏàïnñhÁn ýˆÜzŽ*`5ÉŽAsqaùðÄ¶ü¿ƒ 5g>ë¥Uå!-£SÂr–ELÿ*à&;½¤&›y™Ž6¼³ªø OÌ‡MP÷G©‹:ø_•ÜAaA«jb;‹¨ÓÅ Ä¹‰¤¼l*S ï?ö„óÑ    žsÌ=,&å x— a´è2éòyÄlÝŠ*žÄ¥ÆnÀ¨ã³¡ ÝòÆFƒDÁ*DÂ   ;™±™½fÀßÃ¥‹{â«ZËÅøÁY‚Œ”².—ÆÀMuüÃÙR™;c6ì€Î®û°Éƒ„bÐ–{íWáßõíì’¬¾ßaÙ°^læ¿r{ƒ,ãaÃ¬?ZÞ‚á>m9‚€’Ñ§Ñú\VFÏ\b¶c'E¨)óå€Â˜¾bæ¿;nðî¶Äê=fè8cÊ©""¹K sF¢Æš³   ²ˆô6*®&Øç$î6ÐZÆú”Ž‹S¹)šå‡j¶ý¥¹3áBy+ìç°ÏHHg®™:ä`Oà^4Æ–(Øx$…ÖýdÎÞfvr""ÙCU¼Áë¸;½›ÂMy.fRlÓûñ9HÕ6V•.–‚“3¬ig_HSÀíñæ…ïþ­qž—7¾_;ó«(«ãøguBš""ã·pÓïvŠªÜ²•tÚÒ=Jî„d|¤MxžŠÝ’Œ>`

","Instead of using that, I would recommend using BCrypt or if you are using PHP 5.5 or up, use password_hash.
How do you use bcrypt for hashing passwords in PHP?
http://us2.php.net/manual/en/function.password-hash.php
","97","<php><md5><salt><sha512>","0","5","1","2014-02-25 17:40:17","21713386","8","","2757519","","2014-02-25 17:40:17","2014-02-11 21:24:03",""
"8459964","Generating salts from other user fields","Right now I have a ""salt"" column and a ""password"" column in the database (the user table), both varchar(64) and take sha-256 hashes as values.
Do you think it's a good idea to eliminate the salt column and use the user's e-mail address to generate a salt during password validation? This would save some space in the database.
","I don't think it's a problem to store the a random salt, instead of deriving them from other columns of the user.
However, if you decide to use one or more other columns for the salt, you need to be 100% sure that the value chosen never changes. In your example, if the user changes email address, you have lost any way to validate his password.
","96","<php><database-design><hash><salt>","2","5","3","2011-12-10 22:09:52","8460304","0","1","","","","2011-12-10 21:19:34",""
"8459964","Generating salts from other user fields","Right now I have a ""salt"" column and a ""password"" column in the database (the user table), both varchar(64) and take sha-256 hashes as values.
Do you think it's a good idea to eliminate the salt column and use the user's e-mail address to generate a salt during password validation? This would save some space in the database.
","A salt should never, ever change.  An Email address can.  Your thinking of the removal of the salt column is the DBA equivalent of premature optimization, with the added consequence of disastrous results.
","96","<php><database-design><hash><salt>","2","2","3","2011-12-10 22:09:52","8460304","0","1","","","","2011-12-10 21:19:34",""
"8459964","Generating salts from other user fields","Right now I have a ""salt"" column and a ""password"" column in the database (the user table), both varchar(64) and take sha-256 hashes as values.
Do you think it's a good idea to eliminate the salt column and use the user's e-mail address to generate a salt during password validation? This would save some space in the database.
","See this answer for why you should use a random salt for every password creation.
","96","<php><database-design><hash><salt>","2","2","3","2011-12-10 22:09:52","8460304","0","1","","","","2011-12-10 21:19:34",""
"13869784","Salting and hashing the user submitted data","
Possible Duplicate:
Secure hash and salt for PHP passwords 

I have:
$insert_query = 'insert into '.$this->tablename.'(
        name,
        email,
        username,
        password,
        confirmcode
        )
        values
        (
        ""' . $this->SanitizeForSQL($formvars['name']) . '"",
        ""' . $this->SanitizeForSQL($formvars['email']) . '"",
        ""' . $this->SanitizeForSQL($formvars['username']) . '"",
        ""' . md5($formvars['password']) . '"",
        ""' . $confirmcode . '""
        )';   

I would like to salt and properly sha256 hash the password instead of using md5, how would I salt it properly? Is it secure enough to save the salt pass in the php file?
","You can salt it properly by creating a random number and encrypting that.  One login system I did a while back actually encrypted the password via MD5, then generated a random number between 100,000 and 999,999 and added that onto the end of the encrypted password.  After that, the entire string was encrypted again via MD5.  Perhaps a bit overkill really, but it did the job certainly.
You can read more on password salting, hashing, and encryption here.
","93","<php><html><salt>","0","0","1","2012-12-13 22:45:04","","6","","-1","","2017-05-23 12:12:12","2012-12-13 22:41:06","2012-12-14 00:55:18"
"36876970","Using fgets to get a username + salt + hash from a file C","I have a file that is storing a username, salt, and a fully hashed password. In a plaintext file, the salt and password is just a bunch of random characters. I need to extract the fields from the file and insert them into a linked list, but I'm running into some problems. I know fgets stops reading a line when it reaches a \n character, but for some reason it's not picking up any \n and its reading the whole file as 1 line (i think). I added ""::::::::"" to separate the fields. Here is the file.

mike::::::::Éá Šú7þP)°ºËÒá|ò=³7å   M+å2÷hÂ|gÝ#ayŸ³ÔZ5W§£""û£Éù30Zä¶8«àÃê3j»Éöœ[fä)¹or!¢§yADÊñ¿5åùEB%    9oŒdi~Ê'7::::::::gÜnmë !5ªv?NPÐæP×ŸÎ*
ken::::::::^ú«G7áŽzŽüÜÄÍÊ»-Mýeßleõ¥;å€üÛ""Š€Ž9
  RÃæ«Aæž
  ý| ÙE|""€'Å""æ@Jre    QÈGúz­6õîxK1ÉÔæBkDáwœò²E:""ÀÃ¥H\â;kÕ3::::::::M¥÷é?`;Ä?p÷÷
  7²ìÆÖäM%Ç

This is the function I'm using
void loadFileIntoList (char * filename, FILE* fp){
    unsigned char * hashed;
    unsigned char * salt;
    char * username;
    char line[3000];

if (fp == NULL){
    printf(""file could not be opened"");
}


while(fgets(line, sizeof(line), fp)){


    username = strtok(line,  ""::::::::"");


    salt = (unsigned char *)strtok(NULL, ""::::::::"");


    hashed = (unsigned char *)strtok(NULL, ""::::::::"");

               //user, pass, salt, hashed. just putting in """" for pass
    addAccount(username, """", salt, hashed);



}




fclose(fp);


}

The size of line is probably the reason why it's only looping once, but I'm not sure how I'm supposed to know how large it should be.
I think I need another set of ""::::::::"" after the first hash, or before the second username. But here is my output (just printing line, user, salt, and hash)
Any insight on how to do this correctly? 
","","92","<c><hash><fgets><salt>","0","","0","2017-03-09 22:50:07","","8","","6850771","","2017-03-09 22:50:07","2016-04-26 22:32:06",""
"26636390","Getting hashes of different length","When I store my hashed password, it goes in as 29 characters, but when I hash for the password validation it is 64. The first 29 characters match, but I either need to lengthen the stored hash or shorten the validation hash. I have looked around the net and SO but can't seem to explicitly find out how to do this. 
Which option (lengthen or shorten) is preferable and how would I go about doing this? 
Here is my hash storage:
$hash = hash('sha256', $password1);

function createSalt(){
    $text = md5(uniqid(rand(), true));
    return substr($text, 0, 3);
}

$salt = createSalt();
$password = hash('sha256', $salt . $hash);

and here is my password validation and echoing of the hashes (which don't match up):
$userData = mysql_fetch_array($result, MYSQL_ASSOC);
$hash = hash('sha256', $userData['salt'] . hash('sha256', $password) );

if($hash != $userData['password']) // Incorrect password.
{ echo $userData['password'];
echo $hash;
    die ('incorrect password : ' . mysql_error());
}

Thanks for any help, I sincerely appreciate it!
","","91","<php><mysql><hash><varchar><salt>","0","","0","2014-10-29 18:41:55","","6","","1162412","","2014-10-29 18:41:55","2014-10-29 16:58:20",""
"42859200","Get constant SALT from encrypted and clear text values","I have a constant SALT that is appended to every cookie before it is encrypted with sha512. If I know the clear text and the final encrypted values of more than one cookie, is it possible to use a tool like john the ripper to guess the salt value? 
The answers I found on the internet talk about finding the password, but i'm interested in finding the salt.
","Short Answer:
No you can't.

Reasons:

First of all sha512 is a hashfunction. You can't ""decrypt"" hashfunctions. If it would be able to do this, sha512 would not be safe.
Days ago google found the first collision in 6,610 CPU-Years. 
Source: First sha512 Hashcollsion
(This is not an attack!) They used an amount of distributed systems. So a normal program like john-the-ripper wouldn't be able to do this.

","89","<salt><brute-force><cracking><john-the-ripper>","1","1","2","2017-03-17 14:56:55","42860142","1","","","","","2017-03-17 13:47:28",""
"42859200","Get constant SALT from encrypted and clear text values","I have a constant SALT that is appended to every cookie before it is encrypted with sha512. If I know the clear text and the final encrypted values of more than one cookie, is it possible to use a tool like john the ripper to guess the salt value? 
The answers I found on the internet talk about finding the password, but i'm interested in finding the salt.
","SHA512 is not encryption.
It would require a brute force attack across the salt range, if the salt is just a few characters or bytes the attack would easily succeed.
Depending on the usage an HMAC may be a better choice than just appending a salt, there are attacks (depending usage) on a concatenated salt.
If you use the same salt it will can discovered by the attacker who gains access to the system. A better method is to use a random salt with an HMAC and prepend the salt to the hash value, then it does not need to be secret. This assumes you need to be able to recompute the same hash from the same data
For passwords, where more security is needed, using a hash function with a salt does little to improve the security. Instead iIterate over an HMAC with a random salt for about a 100ms duration and save the salt with the hash. Use functions such as PBKDF2, Rfc2898DeriveBytes, password_hash, Bcrypt and similar functions. The point is to make the attacker spend a lot of time finding passwords by brute force.
","89","<salt><brute-force><cracking><john-the-ripper>","1","1","2","2017-03-17 14:56:55","42860142","1","","","","","2017-03-17 13:47:28",""
"36134122","Manage custom, machine specific configuration files in Salt","I am relatively new to Configuration Management tools for big infrastructure. The company will be using Salt for Linux and Windows, but I guess the question does not relate to specific tool.
The thing I don't get is, let's imagine we have 30 machines in cloud and couple of custom services installed for each of them. Versions can be different, depending on customer subscription. And each service has a config file that can have machine specific data. How you update config files for those services using Salt, or Puppet, Chef, Ansible kind of tools.
","I don't know about Salt but in general in Configuration Management tools there is groups of hosts for several machines with the same configuration, templates and variables for customization for each machine 
for example you can specify variable port=8888 for host1 and port=9999 for host2  but nginx-template will be something like this:
server {
        listen       {{port}};
       }

for the both servers.
The same idea with machine specific data example(ansible): 
- name: start container with mon
  docker:
    name: test-mongo
    state: reloaded
    image: mongo
  when: master_ip == ansible_default_ipv4.address

where master_ip is my variable and ansible_default_ipv4.address is ip which ansible was connected to this host.
Hope this helps. 
","88","<chef><ansible><puppet><salt><configuration-management>","1","2","2","2016-03-21 18:04:50","36135572","0","","2753241","","2016-03-21 15:24:56","2016-03-21 14:43:55",""
"36134122","Manage custom, machine specific configuration files in Salt","I am relatively new to Configuration Management tools for big infrastructure. The company will be using Salt for Linux and Windows, but I guess the question does not relate to specific tool.
The thing I don't get is, let's imagine we have 30 machines in cloud and couple of custom services installed for each of them. Versions can be different, depending on customer subscription. And each service has a config file that can have machine specific data. How you update config files for those services using Salt, or Puppet, Chef, Ansible kind of tools.
","With Chef you would use an Erb template for the config and interpolate based on node attributes in most cases. Those might be set directly on the node itself, or you could make a role per customer and set customer-specific attribute data in there.
","88","<chef><ansible><puppet><salt><configuration-management>","1","1","2","2016-03-21 18:04:50","36135572","0","","2753241","","2016-03-21 15:24:56","2016-03-21 14:43:55",""
"36558050","When hashing password for storage generateHash method giving arrayIndexOutOfBounds","I'm attempting to hash a password for storage in a database, I keep getting an arrayIndexOutOfBounds error though.
I call signup(""Test"",""password"") and the output is Test 35.. can anyone point me in the right direction please, thank you!
public static void signup(String username, String password) {
    String saltedPassword = SALT + password;
    String hashedPassword = generateHash(saltedPassword);
    DB.put(""username"", hashedPassword);
}

public static String generateHash(String input){
    StringBuilder hash= new StringBuilder();
    try {
        MessageDigest sha = MessageDigest.getInstance(""SHA-1"");
        byte[] hashedBytes = sha.digest(input.getBytes());
        char [] digits = {'0','1','2','3','4','5','6','a','b','c','d','e','f'};
        for (int idx = 0; idx<hashedBytes.length; idx++) {
            byte b = hashedBytes[idx];
            hash.append(digits[(b & 0xf0)>>4]);
            hash.append(digits[b & 0x0f]);   //<<<<<<<------ Error on this line.
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
    return hash.toString();     
}

","You are missing some hex digits so the array indexes (at expected length 16) fail. This
char [] digits = {'0','1','2','3','4','5','6','a','b','c','d','e','f'};

should include 7,8 and 9 like
char [] digits = {'0','1','2','3','4','5','6','7','8','9',
        'a','b','c','d','e','f'};

","87","<java><database><hash><salt>","-1","4","2","2016-04-11 20:46:22","","0","2","5277820","","2016-04-11 20:46:22","2016-04-11 19:54:44",""
"36558050","When hashing password for storage generateHash method giving arrayIndexOutOfBounds","I'm attempting to hash a password for storage in a database, I keep getting an arrayIndexOutOfBounds error though.
I call signup(""Test"",""password"") and the output is Test 35.. can anyone point me in the right direction please, thank you!
public static void signup(String username, String password) {
    String saltedPassword = SALT + password;
    String hashedPassword = generateHash(saltedPassword);
    DB.put(""username"", hashedPassword);
}

public static String generateHash(String input){
    StringBuilder hash= new StringBuilder();
    try {
        MessageDigest sha = MessageDigest.getInstance(""SHA-1"");
        byte[] hashedBytes = sha.digest(input.getBytes());
        char [] digits = {'0','1','2','3','4','5','6','a','b','c','d','e','f'};
        for (int idx = 0; idx<hashedBytes.length; idx++) {
            byte b = hashedBytes[idx];
            hash.append(digits[(b & 0xf0)>>4]);
            hash.append(digits[b & 0x0f]);   //<<<<<<<------ Error on this line.
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
    return hash.toString();     
}

","Your array index is going to be out of bounds. You're trying to access the 16th element of an array that holds only 13 elements.
I suspect you've simply missed 7, 8 and 9 from your digits array.
char [] digits = {'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};

","87","<java><database><hash><salt>","-1","0","2","2016-04-11 20:46:22","","0","2","5277820","","2016-04-11 20:46:22","2016-04-11 19:54:44",""
"34472613","how to safely store the password salt","I use pbkdf2 to salt and hash passwords. I get that the salt must be unencrypted and accessible so I can use it again in validation. Each password's salt must be accessible so I can salt and hash the to-be-validated password and compare it with the stored one. 
I was thinking to store the salt like so
Assuming salt is always a string with a fixed lenght, eg, 10 characters
finalPassword = salt + password;
//save finalPassword in the db

and then to validate
salt = getFirst10CharsOf (finalPassword);

hash to-be-validated password with that salt

compare hashed password with the saved one

My question is, if a hacker is smart enough to get my hashed passwords, what stops her to see the getFirst10CharsOf part in my code and get a couple of salts, so she can easily decrypt a couple of hashes?
I found a lot a theory, but I dont have a clue how to safely store salts in practice. So they can always be accesible just to the validation code, but not to everyone.
Thanks
","The salt does not need to be secret, it is used for several things: 1. make using rainbow tables more difficult and 2. insuring that two passwords do not hash to the same value so that if one is compromised other same passwords are not (different hashes). 
","87","<hash><passwords><password-protection><salt>","1","2","2","2015-12-26 16:29:45","","2","1","2045016","","2015-12-26 16:19:31","2015-12-26 15:18:39",""
"34472613","how to safely store the password salt","I use pbkdf2 to salt and hash passwords. I get that the salt must be unencrypted and accessible so I can use it again in validation. Each password's salt must be accessible so I can salt and hash the to-be-validated password and compare it with the stored one. 
I was thinking to store the salt like so
Assuming salt is always a string with a fixed lenght, eg, 10 characters
finalPassword = salt + password;
//save finalPassword in the db

and then to validate
salt = getFirst10CharsOf (finalPassword);

hash to-be-validated password with that salt

compare hashed password with the saved one

My question is, if a hacker is smart enough to get my hashed passwords, what stops her to see the getFirst10CharsOf part in my code and get a couple of salts, so she can easily decrypt a couple of hashes?
I found a lot a theory, but I dont have a clue how to safely store salts in practice. So they can always be accesible just to the validation code, but not to everyone.
Thanks
","
what stops her to see the getFirst10CharsOf part in my code and get a couple of salts,

Nothing

so she can easily decrypt a couple of hashes?

The point of using a one-way hash is that you can't decrypt them (not even with the salt).
The point of using a salt (and a different one each time) is that you can't brute force them with a rainbow table.

I dont have a clue how to safely store salts in practice.

Just store them with the hashed password. There's no need to keep them inaccessible. 

So they can always be accesible just to the validation code, but not to everyone.

If it was possible to store data somewhere that your code could access but someone will illicit access to the system the code runs on could no, then there would be no need to hash passwords in the first place.
","87","<hash><passwords><password-protection><salt>","1","2","2","2015-12-26 16:29:45","","2","1","2045016","","2015-12-26 16:19:31","2015-12-26 15:18:39",""
"56178127","Parse default Salt highstate output","I'm trying to parse the highstate output of Salt has proven to be difficult. Without changing the output to json due to the fact that I still want it to be human legible. 
What's the best way to convert the Summary into something machine readable?
Summary for app1.domain.com
--------------
Succeeded: 278 (unchanged=12, changed=6)
Failed:      0
--------------
Total states run:     278
Total run time:     7.383 s
--
Summary for app2.domain.com
--------------
Succeeded: 278 (unchanged=12, changed=6)
Failed:      0
--------------
Total states run:     278
Total run time:     7.448 s
--
Summary for app0.domain.com
--------------
Succeeded: 293 (unchanged=13, changed=6)
Failed:      0
--------------
Total states run:     293
Total run time:     7.510 s

Without a better idea I'm trying to grep and awk the output and insert it into a csv.
These two work:
cat ${_FILE} | grep Summary | awk '{ print $3} ' | \
    tr '\n' ',' | sed '$s/,$/\n/' >> /tmp/highstate.csv;

cat ${_FILE} | grep -oP '(?<=unchanged=)[0-9]+' | \
    tr '\n' ',' | sed '$s/,$/\n/' >> /tmp/highstate.csv;

But this one fails but works in Reger
cat ${_FILE} | grep -oP '(?<=\schanged=)[0-9]+' | \
    tr '\n' ',' | sed '$s/,$/\n/' >> /tmp/highstate.csv;

EDIT1: @vintnes @ikegami I agree I'd much rather take the json output parse the output but Salt doesn't offer a summary of changes when outputting to josn. So far this is what I have and while very ugly, it's working.
cat ${_FILE} | grep Summary | awk '{ print $3} ' | \
    tr '\n' ',' | sed '$s/,$/\n/' >> /tmp/highstate_tmp.csv;

cat ${_FILE} | grep -oP '(?<=unchanged=)[0-9]+' | \
    tr '\n' ',' | sed '$s/,$/\n/' >> /tmp/highstate_tmp.csv;

cat ${_FILE} | grep unchanged | awk -F' ' '{ print $4}' | \
    grep -oP '(?<=changed=)[0-9]+' | tr '\n' ',' | sed '$s/,$/\n/' >> /tmp/highstate_tmp.csv;

cat ${_FILE} | { grep ""Warning"" || true; } | awk -F: '{print $2+0} END { if (!NR) print ""null"" }' | \
    tr '\n' ',' | sed '$s/,$/\n/' >> /tmp/highstate_tmp.csv;

cat ${_FILE} | { grep ""Failed"" || true; } | awk -F: '{print $2+0} END { if (!NR) print ""null"" }' | \
    tr '\n' ',' | sed '$s/,$/\n/' >> /tmp/highstate_tmp.csv;

csvtool transpose /tmp/highstate_tmp.csv > /tmp/highstate.csv;

sed -i '1 i\instance,unchanged,changed,warning,failed' /tmp/highstate.csv;

Output:
instance,unchanged,changed,warning,failed
app1.domain.com,12,6,,0
app0.domain.com,13,6,,0
app2.domain.com,12,6,,0

","perl -e'
   use strict;
   use warnings qw( all );

   use Text::CSV_XS qw( );

   my $csv = Text::CSV_XS->new({ auto_diag => 2, binary => 1 });
   $csv->say(select(), [qw( instance unchanged change warning failed )]);

   my ( $instance, $unchanged, $changed, $warning, $failed );
   while (<>) {
      if (/^Summary for (\S+)/) {
         ( $instance, $unchanged, $changed, $warning, $failed ) = $1;
      }
      elsif (/^Succeeded:\s+\d+ \(unchanged=(\d+), changed=(\d+)\)/) {
         ( $unchanged, $changed ) = ( $1, $2 );
      }
      elsif (/^Warning:\s+(\d+)/) {
         $warning = $1;
      }
      elsif (/^Failed:\s+(\d+)/) {
         $failed = $1;
         $csv->say(select(), [ $instance, $unchanged, $changed, $warning, $failed ]);
      }
   }
'

Provide input via STDIN, or provide path to file(s) from which to read as arguments.

Terse version:
perl -MText::CSV_XS -ne'
   BEGIN {
      $csv = Text::CSV_XS->new({ auto_diag => 2, binary => 1 });
      $csv->say(select(), [qw( instance unchanged change warning failed )]);
   }
   /^Summary for (\S+)/ and @row=$1;
   /^Succeeded:\s+\d+ \(unchanged=(\d+), changed=(\d+)\)/ and @row[1,2]=($1,$2);
   /^Warning:\s+(\d+)/ and $row[3]=$1;
   /^Failed:\s+(\d+)/ and ($row[4]=$1), $csv->say(select(), \@row);
'

","87","<regex><perl><awk><grep><salt>","2","2","3","2019-05-17 22:44:11","","3","","6553328","","2019-05-17 03:10:09","2019-05-17 00:30:44",""
"56178127","Parse default Salt highstate output","I'm trying to parse the highstate output of Salt has proven to be difficult. Without changing the output to json due to the fact that I still want it to be human legible. 
What's the best way to convert the Summary into something machine readable?
Summary for app1.domain.com
--------------
Succeeded: 278 (unchanged=12, changed=6)
Failed:      0
--------------
Total states run:     278
Total run time:     7.383 s
--
Summary for app2.domain.com
--------------
Succeeded: 278 (unchanged=12, changed=6)
Failed:      0
--------------
Total states run:     278
Total run time:     7.448 s
--
Summary for app0.domain.com
--------------
Succeeded: 293 (unchanged=13, changed=6)
Failed:      0
--------------
Total states run:     293
Total run time:     7.510 s

Without a better idea I'm trying to grep and awk the output and insert it into a csv.
These two work:
cat ${_FILE} | grep Summary | awk '{ print $3} ' | \
    tr '\n' ',' | sed '$s/,$/\n/' >> /tmp/highstate.csv;

cat ${_FILE} | grep -oP '(?<=unchanged=)[0-9]+' | \
    tr '\n' ',' | sed '$s/,$/\n/' >> /tmp/highstate.csv;

But this one fails but works in Reger
cat ${_FILE} | grep -oP '(?<=\schanged=)[0-9]+' | \
    tr '\n' ',' | sed '$s/,$/\n/' >> /tmp/highstate.csv;

EDIT1: @vintnes @ikegami I agree I'd much rather take the json output parse the output but Salt doesn't offer a summary of changes when outputting to josn. So far this is what I have and while very ugly, it's working.
cat ${_FILE} | grep Summary | awk '{ print $3} ' | \
    tr '\n' ',' | sed '$s/,$/\n/' >> /tmp/highstate_tmp.csv;

cat ${_FILE} | grep -oP '(?<=unchanged=)[0-9]+' | \
    tr '\n' ',' | sed '$s/,$/\n/' >> /tmp/highstate_tmp.csv;

cat ${_FILE} | grep unchanged | awk -F' ' '{ print $4}' | \
    grep -oP '(?<=changed=)[0-9]+' | tr '\n' ',' | sed '$s/,$/\n/' >> /tmp/highstate_tmp.csv;

cat ${_FILE} | { grep ""Warning"" || true; } | awk -F: '{print $2+0} END { if (!NR) print ""null"" }' | \
    tr '\n' ',' | sed '$s/,$/\n/' >> /tmp/highstate_tmp.csv;

cat ${_FILE} | { grep ""Failed"" || true; } | awk -F: '{print $2+0} END { if (!NR) print ""null"" }' | \
    tr '\n' ',' | sed '$s/,$/\n/' >> /tmp/highstate_tmp.csv;

csvtool transpose /tmp/highstate_tmp.csv > /tmp/highstate.csv;

sed -i '1 i\instance,unchanged,changed,warning,failed' /tmp/highstate.csv;

Output:
instance,unchanged,changed,warning,failed
app1.domain.com,12,6,,0
app0.domain.com,13,6,,0
app2.domain.com,12,6,,0

","Here you go. This will also work if your output contains warnings. Please note that the output is in a different order than you specified; it's the order in which each record occurs in the file. Don't hesitate with any questions.
$ awk -v OFS=, '
        BEGIN        { print ""instance,unchanged,changed,warning,failed"" }
        /^Summary/   { instance=$NF }
        /^Succeeded/ { split($3 $4 $5, S, /[^0-9]+/) }
        /^Failed/    { print instance, S[2], S[3], S[4], $2 }
' ""$_FILE""


split($3 $4 $5, S, /[^0-9]+/) handles the possibility of warnings by disregarding the first two ""words"" Succeeded: ### and using any number of non-digits as a separator. 

edit: Printed on /^Fail/ instead of using /^Summ/ and END.
","87","<regex><perl><awk><grep><salt>","2","1","3","2019-05-17 22:44:11","","3","","6553328","","2019-05-17 03:10:09","2019-05-17 00:30:44",""
"56178127","Parse default Salt highstate output","I'm trying to parse the highstate output of Salt has proven to be difficult. Without changing the output to json due to the fact that I still want it to be human legible. 
What's the best way to convert the Summary into something machine readable?
Summary for app1.domain.com
--------------
Succeeded: 278 (unchanged=12, changed=6)
Failed:      0
--------------
Total states run:     278
Total run time:     7.383 s
--
Summary for app2.domain.com
--------------
Succeeded: 278 (unchanged=12, changed=6)
Failed:      0
--------------
Total states run:     278
Total run time:     7.448 s
--
Summary for app0.domain.com
--------------
Succeeded: 293 (unchanged=13, changed=6)
Failed:      0
--------------
Total states run:     293
Total run time:     7.510 s

Without a better idea I'm trying to grep and awk the output and insert it into a csv.
These two work:
cat ${_FILE} | grep Summary | awk '{ print $3} ' | \
    tr '\n' ',' | sed '$s/,$/\n/' >> /tmp/highstate.csv;

cat ${_FILE} | grep -oP '(?<=unchanged=)[0-9]+' | \
    tr '\n' ',' | sed '$s/,$/\n/' >> /tmp/highstate.csv;

But this one fails but works in Reger
cat ${_FILE} | grep -oP '(?<=\schanged=)[0-9]+' | \
    tr '\n' ',' | sed '$s/,$/\n/' >> /tmp/highstate.csv;

EDIT1: @vintnes @ikegami I agree I'd much rather take the json output parse the output but Salt doesn't offer a summary of changes when outputting to josn. So far this is what I have and while very ugly, it's working.
cat ${_FILE} | grep Summary | awk '{ print $3} ' | \
    tr '\n' ',' | sed '$s/,$/\n/' >> /tmp/highstate_tmp.csv;

cat ${_FILE} | grep -oP '(?<=unchanged=)[0-9]+' | \
    tr '\n' ',' | sed '$s/,$/\n/' >> /tmp/highstate_tmp.csv;

cat ${_FILE} | grep unchanged | awk -F' ' '{ print $4}' | \
    grep -oP '(?<=changed=)[0-9]+' | tr '\n' ',' | sed '$s/,$/\n/' >> /tmp/highstate_tmp.csv;

cat ${_FILE} | { grep ""Warning"" || true; } | awk -F: '{print $2+0} END { if (!NR) print ""null"" }' | \
    tr '\n' ',' | sed '$s/,$/\n/' >> /tmp/highstate_tmp.csv;

cat ${_FILE} | { grep ""Failed"" || true; } | awk -F: '{print $2+0} END { if (!NR) print ""null"" }' | \
    tr '\n' ',' | sed '$s/,$/\n/' >> /tmp/highstate_tmp.csv;

csvtool transpose /tmp/highstate_tmp.csv > /tmp/highstate.csv;

sed -i '1 i\instance,unchanged,changed,warning,failed' /tmp/highstate.csv;

Output:
instance,unchanged,changed,warning,failed
app1.domain.com,12,6,,0
app0.domain.com,13,6,,0
app2.domain.com,12,6,,0

","Improving answer from @vintnes.
Producing output as tab separated CSV 
Write awk script that reads values from lines by their order.
Print each record as it is read.
script.awk
BEGIN {print(""computer"",""succeeded"",""unchanged"",""changed"",""failed"",""states run"",""run time"");}
FNR%8 == 1 {arr[1] = $3}
FNR%8 == 3 {arr[2] = $2; arr[3] = extractNum($3); arr[4] = extractNum($4)}
FNR%8 == 4 {arr[5] = $2;}
FNR%8 == 6 {arr[6] = $4;}
FNR%8 == 7 {arr[7] = $4; print arr[1],arr[2],arr[3],arr[4],arr[5],arr[6],arr[7];}

function extractNum(str){match(str,/[[:digit:]]+/,m);return m[0];}

run script
Tab separated CSV output
awk -v OFS=""\t"" -f script.awk input-1.txt input-2.txt ...

Comma separated CSV output
awk -v OFS="","" -f script.awk input-1.txt input-2.txt ...

Output
computer        succeeded       unchanged        changed failed  states run      run time
app1.domain.com 278     12      6       0       278     7.383
app2.domain.com 278     12      6       0       278     7.448
app0.domain.com 293     13      6       0       293     7.510

computer,succeeded,unchanged,changed,failed,states run,run time
app1.domain.com,278,12,6,0,278,7.383
app2.domain.com,278,12,6,0,278,7.448
app0.domain.com,293,13,6,0,293,7.510

Explanation
BEGIN {print(""computer"",""succeeded"",""unchanged"",""changed"",""failed"",""states run"",""run time"");}
Print the heading CSV line
FNR%8 == 1 {arr[1] = $3}
Extract the arr[1] value from 3rd field in (first line from 8 lines)
FNR%8 == 3 {arr[2] = $2; arr[3] = extractNum($3); arr[4] = extractNum($4)}
Extract the arr[2,3,4] values from 2nd,3rd,4th fields in (third line from 8 lines)
FNR%8 == 4 {arr[5] = $2;}
Extract the arr[5] value from 2nd field in (4th line from 8 lines)
FNR%8 == 6 {arr[6] = $4;}
Extract the arr[6] value from 4th field in (6th line from 8 lines)
FNR%8 == 7 {arr[7] = $4; 
Extract the arr[7] value from 4th field in (7th line from 8 lines)
print arr[1],arr[2],arr[3],arr[4],arr[5],arr[6],arr[7];}
print the array elements for the extracted variable at the completion of reading 7th line from 8 lines.
function extractNum(str){match(str,/[[:digit:]]+/,m);return m[0];}
Utility function to extract numbers from text field.
","87","<regex><perl><awk><grep><salt>","2","0","3","2019-05-17 22:44:11","","3","","6553328","","2019-05-17 03:10:09","2019-05-17 00:30:44",""
"34320652","Need salt, hash login validation advice","My register page looks like this:
<?php

    include 'connect.php'; 

    $username = mysqli_real_escape_string($conn, $_POST['username']);
    $password = $_POST['password'];
    $email = mysqli_real_escape_string($conn, $_POST['email']);
    $usercheck = mysqli_query($conn,""SELECT username FROM users WHERE username =    '"".$username.""'"");
    $emailcheck = mysqli_query($conn,""SELECT email FROM users WHERE email = '"".$email.""'"");

    $cost = 10;
    $salt = strtr(base64_encode(mcrypt_create_iv(16, MCRYPT_DEV_URANDOM)), '+', '.');
    $salt = sprintf(""$2a$%02d$"", $cost) . $salt;
    $hash = crypt($password, $salt);

    if (mysqli_num_rows($usercheck) > 0) 
    {
        echo ""username already exist"";
    }
    elseif (mysqli_num_rows($emailcheck) > 0) 
    {
        echo""email already exist"";
    }
    else
    {
        $sql=""INSERT INTO `database`.`users` (`username`, `password`,  `email`) VALUES ('$username', '$hash', '$email')"";
        echo ""account created"";
        if (!mysqli_query($conn, $sql))
        {
            die('error ' . mysqli_error($conn));
        }
    }

    mysqli_close($conn);

?>

The register code work fine, I only have no idea how to login from that.
I have this now
My login code is:
<?php

    include 'connect.php';

    $username       = $_POST['username']; 
    $password       = $_POST['password']; 

    $sth = $conn->prepare('SELECT * FROM users WHERE username = :username LIMIT 1');

    $sth->bindParam(':username', $username);

    $sth->execute();

    $user = $sth->fetch(PDO::FETCH_OBJ);

    // Hashing the password with its hash as the salt returns the same hash
    if ( crypt($password, $user->users) == $user->users ) {

        echo ""login?"";
    }
        else 
    {
        echo ""error?"";
    }

?>

But it seems this is only for an validation, as result I get an blank page with nothing. Login form is in another script.
I need some advice because when I search the internet it gives something like this back also with crypt() login.
Sorry for the no comment in the code.
Thank you in advanced.
EDIT: 
changed the login code to this, but i don't know how to check the hash password:
<?php
            include 'connect.php';
    // Define $username and $password
    $username=$_post['username'];
    $password=$_post['password'];


    //Check username and password from database
    $sql=""SELECT username FROM users WHERE username='$username' and password='$password'LIMIT 1"";
    $result=mysqli_query($db,$sql);


    //If username and password exist in our database then create a session.
    //Otherwise echo error.

    if(mysqli_num_rows($result) == 1)
    {
    $_SESSION['username'] = $login_user; // Initializing Session
    header(""location: register.php""); // Redirecting To Other Page
    }else
    {
    echo""testwrong"";
    }

            ?>

Ricardo
","","87","<php><database><hash><passwords><salt>","0","","0","2015-12-16 20:57:15","","7","","5534836","","2015-12-16 20:57:15","2015-12-16 19:38:09",""
"30622748","I'm having trouble retrieving a salt from a mysql database using mysql.data. (c#)","I am creating a chat program, and I am using the mysql database to handle the log in information for all of the users. The login is fairly simple. The password that is in the database is SHA256 hashed with a salt at the end. I need to retrieve the salt from the database and hash it with the entered password to see if it matches the one in the database, and if it does, the user will be logged in. But I am having troubles retrieving the salt. One example of a salt that I am trying to retrieve is: 

q‘³SÁ(–¤Lí˜ÕEÁÞf-]'›š²ìs®§ ­”

. All I can successfully retrieve is this: 

q‘³SÁ(–¤Lí˜ÕEÁ

Here is my code for retrieving the salt:


private void GetSalt()
        {
            try
            {
                MySqlConnection conn = new MySqlConnection(GlobalData.MySQLConnectionString);
                MySqlCommand saltQuery = conn.CreateCommand();
                saltQuery.CommandText = ""SELECT salt FROM users WHERE email = @email"";
                saltQuery.Parameters.AddWithValue(""@email"", this._enteredEmail);
                conn.Open();
                MySqlDataReader saltReader = saltQuery.ExecuteReader();
                while (saltReader.Read())
                {
                    this._salt = saltReader.GetString(""salt"");
                }
            }
            catch (MySqlException ex)
            {
                throw ex;
            }
        }



Any idea why I can't retrieve the full salt?
P.S.-> All the user information is created through a website and hashed using PHP. I don't know if that is needed information or not. 
","I would recommend to use the BCrypt.Net library, not only does it provide an appropriate algorithm for password hashing, it also handles the generation of a safe salt. Because the salt will be included in the resulting hash-value, there is no need for a separate field in the database.
Fast hash algorithms like MD5, SHA-1 or even SHA-256 are not good choices to hash passwords, because they are way too fast and therefore can be brute-forced too easily. Instead one should use a slow key-derivation function like BCrypt or PBKDF2 with a cost factor.
// Hash a new password for storing in the database.
// The function automatically generates a cryptographically safe salt.
string hashToStoreInDb = BCrypt.HashPassword(password);

// Check if the hash of the entered login password, matches the stored hash.
// The salt and the cost factor will be extracted from existingHashFromDb.
bool isPasswordCorrect = BCrypt.Verify(password, existingHashFromDb);

","86","<c#><mysql><salt>","0","0","1","2015-06-03 19:50:05","","4","","","","","2015-06-03 14:17:38",""
"41293802","Hash + salt&pepper + Forward relationship","Well, This question is just for design proposes.
2 clients ClientAand ClientB users can access to their office using their IDcard. This IDCard is saved in a DB using salt&pepper to create a  user pseudonymization between the clients.
ClientA DB
Username    String to be Hashed             Hashed Value
ClientA     UserIDCard1+E1F53135E559C253    72ae25495a7981c4062...
ClientA     UserIDCard2+E1F53135E559C253    a52e4f1565c90f048f8...
ClientA     UserIDCard3+E1F53135E559C253    59027bd9c8c8900d5c3...

ClientB DB
Username    String to be Hashed             Hashed Value
ClientB     UserIDCard1+B7E459A02CB31F3C    b4b6603abc67096754...
ClientB     UserIDCard2+B7E459A02CB31F3C    e99c7e7f1389e40cd3...
ClientB     UserIDCard3+B7E459A02CB31F3C    16e78ad38eb1468edf...

That means if UserIDCard1 visits ClientA and then ClientB,  the UserIDCard1 will be treated as a different user, which is good for pseudonymization (If an attacker gets access to DB) but bad if in the future Clients decide to merge ClientAB.
Is there a way to keep the pseudonymization across DBs but at the same time know if UserIDCard1 was in ClientA's building and ClientB's building? Or by definition Hash+Salt are NOT to be able to compare hashed values?
edit
The propose of these DBs is to get anonymous statistics about Client's users without compromising user's privacy across different DBs by storing their 'UserIDCard'.
","","85","<hash><salt>","2","","0","2016-12-23 02:37:04","","4","1","6768321","","2016-12-23 02:37:04","2016-12-23 00:55:32",""
"35709500","I'm trying to find a hashing algorithm for my website's login system.","Im trying to find a secure salted password hashing algorithm for my website. It is recommended that I get one from a reputable source instead of making one on my own. Where can I find such an algorithm? 
Im making my front end with HTML and Javascript and my back-end with PHP.
","PHP's password_hash() supports bcrypt, which is what I recommend. In short, it's a very expensive algorithm that takes a lot of time to compute, hence making it impossible (very slow, so too costly in practice) to bruteforce.
You can find more information with some more links here.
","85","<php><security><authentication><hash><salt>","0","4","1","2016-02-29 23:25:48","","5","","","","","2016-02-29 20:58:21","2016-03-01 09:59:32"
"54113395","How to get rid of special char '(u'","I am using Salt with jinja2 ""regex_search"" and I try to extract some digits (release version) from the archive file name. Then use the value to create a symlink, that contains it. I've tried different combinations using ""list"", ""join"" and other filters to get rid of this Unicode char, but without success. 
Example:
""release_info"" variable gets value ""release-name-0.2345.577_20190101_1030.tar.gz"" and I need to get only digits between the dots.
Here is the corresponding part of the sls file:
symlink to current release {{ release_info }}:
  file.symlink:
    - name: /home/{{ component.software['component_name'] }}/latest
    - target: /home/{{ component.software['component_name'] }}/{{ release_info |regex_search('(\d+\.\d+\.\d+)') }}
    - user: support
    - group: support`enter code here`

The expected result is ""/home/support/0.2345.577"", but I have ""/home/support/(u'0.2345.577',)""
If I try to pipe ""yaml"" or ""json"" filter like:
{{ release_info |regex_search('(\d+\.\d+\.\d+)') | yaml }}

I've got:
/home/support/[0.2345.577]

which is not what I am looking for.
PS
I've got it, but seems to me as not a got approach. Just workaround.
{{ release_info |regex_search('(\d+\.\d+\.\d+)') |yaml |replace('[','') |replace(']','') }}

","Hello Todor and Welcome to Stack Overflow!
I have tried the example that you have posted and here is how to achieve what you want

Note: I have changed the regex pattern a little in order to support any other possibilities that could have more digits e.g 0.1.2.3.4 and so on, but of course you can use your pattern as long as it works for you as expected. 

Solution 1:
{{ release_info | regex_search(""(\d(\.\d+){1,})"") | first }}

The result before using first:
('0.2345.577', '.577')

The result after using first:
0.2345.577

Solution 2:
{{ release_info | regex_search(""(\d\.\d+\.\d+)"") | first }}

The result before using first:
('0.2345.577',)

The result after using first:
0.2345.577

first is a built-in filter in jinja that can return the first item in a sequence. you can check List of built-in filters for more information about the other filters
","85","<jinja2><salt-stack><salt>","0","0","1","2019-01-22 03:12:02","54214413","0","","10890455","","2019-01-09 16:28:44","2019-01-09 15:27:42",""
"51636699","Can't Configure Apache Shiro with MySQL, SHA256 Password Hashing Algorithm, Salting in Base64 String","I am trying to configure Apache Shiro using shiro.ini in order to authenticate users against MySQL Database where all credentials are saved.  Passwords are hashed using sha256 algorithm and a salt per user is used and saved/recovered from MySQL database. I would like to avoid creating custom Realm and custom SaltedAuthentificationInfo which i believe is possible through shiro.ini proper configuration
Or not?? Is this possible?
Can i avoid using custom Realm and SaltedAuthentificationInfo??
To register users i implemented the following function 
    @POST
    @Path(""new"")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public String create(User requestBody) {

        System.err.println(""NEW User"");

        User user = new User();
        user.setFirstName(requestBody.getFirstName());
        user.setLastName(requestBody.getLastName());
        user.setEmail(requestBody.getEmail());

//             Do Something With Salt Per User Random Generation or Something like it
//================================================================================================================
        RandomNumberGenerator rng = new SecureRandomNumberGenerator();
        String salt = rng.nextBytes().toBase64();
        String hashedPasswordBase64 = new Sha256Hash(requestBody.getPassword(), salt, 1024).toBase64();
        user.setSalt(salt);
        user.setPassword(hashedPasswordBase64);

        boolean result = userDAO.persist(user);
        userDAO.closeEntityManager();

        if (result) {
            return ReturnResults.results(new ArrayList<User>(asList(user)));
        }
        return ""{}"";
    }

My shiro.ini:
[main]
ds = com.mysql.cj.jdbc.MysqlDataSource
ds.serverName = 127.0.0.1
ds.user = **********
ds.password = **********
ds.databaseName = **********

jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.dataSource = $ds
jdbcRealm.permissionsLookupEnabled = false

jdbcRealm.authenticationQuery = ""SELECT password, salt FROM User WHERE email = ?""
jdbcRealm.userRolesQuery = ""SELECT role_name FROM UserRole WHERE email = ?""
# jdbcRealm.permissionsQuery = ""SELECT permission FROM RolesPermissions WHERE role_name = ?""

authc.usernameParam = email
authc.passwordParam = password
authc.failureKeyAttribute = shiroLoginFailure

credentialsMatcher = org.apache.shiro.authc.credential.Sha256CredentialsMatcher
#credentialsMatcher = org.apache.shiro.authc.credential.HashedCredentialsMatcher
credentialsMatcher.storedCredentialsHexEncoded = false
# credentialsMatcher.hashAlgorithmName = SHA-256
credentialsMatcher.hashIterations = 1024
jdbcRealm.credentialsMatcher = $credentialsMatcher

passwordService = org.apache.shiro.authc.credential.DefaultPasswordService
passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher
passwordMatcher.passwordService = $passwordService


shiro.loginUrl = /authentication/login

cacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager
securityManager.cacheManager = $cacheManager

sessionManager = org.apache.shiro.web.session.mgt.DefaultWebSessionManager
securityManager.sessionManager = $sessionManager
securityManager.sessionManager.sessionIdCookieEnabled = false

ssl.enabled = false

securityManager.realms = $jdbcRealm
strategy = org.apache.shiro.authc.pam.FirstSuccessfulStrategy
securityManager.authenticator.authenticationStrategy = $strategy

[users]

[roles]

[urls]
/authentication/login = authc
/authentication/logout = logout

/doctors/* = authc

/users/new = anon
/users/details/* = anon
/users/* = authc

My DB Schema:

My Implemented Transfer Objects:
User
package gr.histopath.platform.model.TransferObjects;

import org.hibernate.annotations.CacheConcurrencyStrategy;

import javax.persistence.*;
import java.util.Objects;

@Entity
@Cacheable
@org.hibernate.annotations.Cache(usage = CacheConcurrencyStrategy.READ_WRITE, region = ""EntityCache"")
public class User {
    private long id;
    private String email;
    private String firstName;
    private String lastName;
    private String password;
    private String salt;
    private boolean activated;

    @Id
    @Column(name = ""id"")
    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    @Basic
    @Column(name = ""email"")
    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    @Basic
    @Column(name = ""firstName"")
    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    @Basic
    @Column(name = ""lastName"")
    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    @Basic
    @Column(name = ""password"")
    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    @Basic
    @Column(name = ""salt"")
    public String getSalt() {
        return salt;
    }

    public void setSalt(String salt) {
        this.salt = salt;
    }

    @Basic
    @Column(name = ""activated"")
    public boolean getActivated() {
        return this.activated;
    }

    public void setActivated(boolean activated){
        this.activated = activated;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        User user = (User) o;
        return id == user.id &&
                Objects.equals(email, user.email) &&
                Objects.equals(firstName, user.firstName) &&
                Objects.equals(lastName, user.lastName) &&
                Objects.equals(password, user.password) &&
                Objects.equals(salt, user.salt) &&
                Objects.equals(activated, user.activated);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, email, firstName, lastName, password, salt, activated);
    }
}

UserRole Transfer Object:
package gr.histopath.platform.model.TransferObjects;

import org.hibernate.annotations.CacheConcurrencyStrategy;

import javax.persistence.*;
import java.util.Objects;

@Entity
@Cacheable
@org.hibernate.annotations.Cache(usage = CacheConcurrencyStrategy.READ_WRITE, region = ""EntityCache"")
public class UserRole {
    private int id;
    private String roleName;
    private String email;

    @Id
    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    @Basic
    @Column(name = ""roleName"")
    public String getRoleName() {
        return roleName;
    }

    public void setRoleName(String roleName) {
        this.roleName = roleName;
    }

    @Basic
    @Column(name = ""email"")
    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        UserRole userRole = (UserRole) o;
        return id == userRole.id &&
                Objects.equals(email, userRole.email) &&
                Objects.equals(roleName, userRole.roleName) &&
                Objects.equals(email, userRole.email);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, email, roleName);
    }
}

Finally my login() function:
 @POST
    @Path(""login"")
    @Produces(MediaType.TEXT_PLAIN)
    public boolean login(Authentication authData) {
        System.out.println(""Param email: "" + authData.getEmail());
        System.out.println(""Param password: "" + authData.getPassword());
        UsernamePasswordToken token = new UsernamePasswordToken(authData.getEmail(), new Sha256Hash(authData.getPassword()).toBase64());
        if (!subject.isAuthenticated()) {
            try {
                System.out.println(""Trying to authenticate with token"");
                subject.login(token);
                System.out.println(""User ["" + subject.getPrincipal().toString() + ""] logged in successfully."");
                return true;
            } catch (UnknownAccountException uae) {
                log.error(""Username Not Found!"", uae);
                System.out.println(""Username Not Found!"");
            } catch (IncorrectCredentialsException ice) {
                log.error(""Invalid Credentials!"", ice);
                System.out.println(""Invalid Credentials!"");
            } catch (LockedAccountException lae) {
                log.error(""Your Account is Locked!"", lae);
                System.out.println(""Your Account is Locked!"");
            } catch (AuthenticationException ae) {
                log.error(""Unexpected Error!"", ae);
                System.err.println(""Unexpected Error!"");
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
                ex.printStackTrace();
            }
        } else {
            return true;
        }

        return false;
    }

After calling subject.login(token) i get shiro error ""Unexpected Error!""
Stack Trace:
Unexpected Error!
org.apache.shiro.authc.AuthenticationException: There was a SQL error while authenticating user [mixtou@gmail.com]
    at org.apache.shiro.realm.jdbc.JdbcRealm.doGetAuthenticationInfo(JdbcRealm.java:254)
    at org.apache.shiro.realm.AuthenticatingRealm.getAuthenticationInfo(AuthenticatingRealm.java:568)
    at org.apache.shiro.authc.pam.ModularRealmAuthenticator.doSingleRealmAuthentication(ModularRealmAuthenticator.java:180)
    at org.apache.shiro.authc.pam.ModularRealmAuthenticator.doAuthenticate(ModularRealmAuthenticator.java:267)
    at org.apache.shiro.authc.AbstractAuthenticator.authenticate(AbstractAuthenticator.java:198)
    at org.apache.shiro.mgt.AuthenticatingSecurityManager.authenticate(AuthenticatingSecurityManager.java:106)
    at org.apache.shiro.mgt.DefaultSecurityManager.login(DefaultSecurityManager.java:270)
    at org.apache.shiro.subject.support.DelegatingSubject.login(DelegatingSubject.java:256)
    at gr.histopath.platform.controllers.authentication.AuthenticationController.login(AuthenticationController.java:40)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:497)
    at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory.lambda$static$0(ResourceMethodInvocationHandlerFactory.java:76)
    at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:148)
    at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:191)
    at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$TypeOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:243)
    at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:103)
    at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:493)
    at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:415)
    at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:104)
    at org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:277)
    at org.glassfish.jersey.internal.Errors$1.call(Errors.java:272)
    at org.glassfish.jersey.internal.Errors$1.call(Errors.java:268)
    at org.glassfish.jersey.internal.Errors.process(Errors.java:316)
    at org.glassfish.jersey.internal.Errors.process(Errors.java:298)
    at org.glassfish.jersey.internal.Errors.process(Errors.java:268)
    at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:289)
    at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:256)
    at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:703)
    at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:416)
    at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:370)
    at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:389)
    at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:342)
    at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:229)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
    at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
    at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
    at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
    at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
    at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
    at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
    at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
    at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
    at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
    at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
    at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
    at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
    at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:491)
    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
    at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:668)
    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
    at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
    at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
    at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:764)
    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1388)
    at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
    at java.lang.Thread.run(Thread.java:745)
Caused by: java.sql.SQLException: Parameter index out of range (1 > number of parameters, which is 0).
    at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:545)
    at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:513)
    at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:505)
    at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:479)
    at com.mysql.cj.jdbc.PreparedStatement.checkBounds(PreparedStatement.java:3246)
    at com.mysql.cj.jdbc.PreparedStatement.setInternal(PreparedStatement.java:3230)
    at com.mysql.cj.jdbc.PreparedStatement.setString(PreparedStatement.java:4025)
    at org.apache.shiro.realm.jdbc.JdbcRealm.getPasswordForUser(JdbcRealm.java:281)
    at org.apache.shiro.realm.jdbc.JdbcRealm.doGetAuthenticationInfo(JdbcRealm.java:221)
    ... 70 more

Any Ideas what i am missing or doing wrong??
Is my shiro.ini ok??
Is this possible without implementing custom classes for Realm and SaltedAuthentificationInfo ?? Most of the examples i have seen so far are implementing custom classes. However i haven't found any recent example using shiro 1.4
Any advice is very appreciated. I am banging my head two days now...
I don't know if there is any problem with dependencies, so i upload my pom.xml also.
pom.xml
<?xml version=""1.0"" encoding=""UTF-8""?>
<project xmlns=""http://maven.apache.org/POM/4.0.0""
         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
    <modelVersion>4.0.0</modelVersion>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <groupId>gr.histopath.platform</groupId>
    <artifactId>HistopathPlatform</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>

        <!-- https://mvnrepository.com/artifact/javax.ws.rs/javax.ws.rs-api -->
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>javax.ws.rs-api</artifactId>
            <version>2.1</version>
        </dependency>

        <!-- Logging API + implementation: -->
        <!--<dependency>-->
            <!--<groupId>org.slf4j</groupId>-->
            <!--<artifactId>slf4j-simple</artifactId>-->
            <!--<version>1.7.25</version>-->
            <!--<scope>test</scope>-->
        <!--</dependency>-->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.6.4</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>2.11.0</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12 -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>1.6.4</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>1.6.4</version>
            <scope>runtime</scope>
        </dependency>

         <!--https://mvnrepository.com/artifact/org.apache.shiro/shiro-core-->
        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-core</artifactId>
            <version>1.3.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-web -->
        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-web</artifactId>
            <version>1.3.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/commons-beanutils/commons-beanutils -->
        <dependency>
            <groupId>commons-beanutils</groupId>
            <artifactId>commons-beanutils</artifactId>
            <version>1.9.3</version>
        </dependency>


        <!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-lang -->
        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-lang</artifactId>
            <version>1.4.0</version>
        </dependency>


        <!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-crypto-cipher -->
        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-crypto-cipher</artifactId>
            <version>1.4.0</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-crypto-hash -->
        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-crypto-hash</artifactId>
            <version>1.4.0</version>
        </dependency>



        <!--<dependency>-->
            <!--<groupId>org.secnod.shiro</groupId>-->
            <!--<artifactId>shiro-jersey</artifactId>-->
            <!--<version>0.2.0</version>-->
        <!--</dependency>-->

        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-json-processing</artifactId>
            <version>2.27</version>
        </dependency>

        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-multipart</artifactId>
            <version>2.27</version>
        </dependency>

        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-sse</artifactId>
            <version>2.27</version>
        </dependency>

        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-moxy</artifactId>
            <version>2.27</version>
        </dependency>


        <dependency>
            <groupId>org.glassfish.jersey.containers</groupId>
            <artifactId>jersey-container-servlet-core</artifactId>
            <version>2.27</version>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.inject</groupId>
            <artifactId>jersey-hk2</artifactId>
            <version>2.27</version>
        </dependency>

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>6.0.5</version>
        </dependency>

        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>5.3.3.Final</version>
        </dependency>

        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>6.0.11.Final</version>
        </dependency>

        <dependency>
            <groupId>org.hibernate.javax.persistence</groupId>
            <artifactId>hibernate-jpa-2.1-api</artifactId>
            <version>1.0.2.Final</version>
        </dependency>

        <dependency>
            <groupId>org.hibernate.common</groupId>
            <artifactId>hibernate-commons-annotations</artifactId>
            <version>5.0.4.Final</version>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
            <version>2.9.6</version>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <version>2.9.6</version>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.9.6</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-c3p0 -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-c3p0</artifactId>
            <version>5.3.3.Final</version>
        </dependency>

        <!--2nd Level Cache-->
        <!-- https://mvnrepository.com/artifact/net.sf.ehcache/ehcache -->
        <dependency>
            <groupId>net.sf.ehcache</groupId>
            <artifactId>ehcache</artifactId>
            <version>2.10.5</version>
        </dependency>

        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-ehcache</artifactId>
            <version>5.3.3.Final</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-jpamodelgen -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-jpamodelgen</artifactId>
            <version>5.3.3.Final</version>
        </dependency>

        <dependency>
            <groupId>com.itextpdf</groupId>
            <artifactId>kernel</artifactId>
            <version>7.1.1</version>
        </dependency>

        <dependency>
            <groupId>com.itextpdf</groupId>
            <artifactId>io</artifactId>
            <version>7.1.1</version>
        </dependency>

        <dependency>
            <groupId>com.itextpdf</groupId>
            <artifactId>layout</artifactId>
            <version>7.1.1</version>
        </dependency>

        <dependency>
            <groupId>com.itextpdf</groupId>
            <artifactId>pdfa</artifactId>
            <version>7.1.1</version>
        </dependency>

    </dependencies>

    <build>
        <plugins>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.7.0</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <compilerArguments>
                        <processor>org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor</processor>
                    </compilerArguments>
                </configuration>
            </plugin>

        </plugins>
    </build>

</project>

Could the problem be in my user registration code or with the mysql jdbc driver or with web.xml??
","It is absolutely possible and is meant for this purpose. From what I see you are heading towards the right direction; However I see that you are using queries like 

SELECT password, salt FROM User WHERE email = ?
  and SELECT role_name FROM UserRole WHERE email = ?

for authentication and roles. Can you confirm that User and UserRole are your table names? Note that using JDBC realm connects to your database using the specified datasource and performs SQL queries regardless of any persistance frameworks you have implemented. 
Also, when you configure shiro.loginUrl = /authentication/login and /authentication/login = authc the action of the login form is intended to be empty. Hence no controller is required 
@POST
    @Path(""login"")
    @Produces(MediaType.TEXT_PLAIN)
    public boolean login(Authentication authData) {.....}

to handle the security. The framework handles the part for you. 
","85","<configuration><shiro><salt><password-hash>","0","0","1","2018-08-06 12:08:03","","2","","1954636","","2018-08-06 12:08:03","2018-08-01 15:06:20",""
"9748181","Hashing multiple values - most secure method?","hash(value1 & value2 & salt)
hash(hash(value1 & value2) & salt)
hash(hash(value1 & value2) & hash(salt))
hash(hash(value1 & salt) & hash(value2 & salt))
hash(hash(value1 & salt1) & hash(value2 & salt2))
hash(value1 & salt1 &value2 & salt2)
hash(value1 & salt1) and hash(value2 & salt2)  '2 separate hashes for each input

In an application where 2 'passwords' are needed to access a specific function (for whatever reason you want) and the salt(s) are large random strings.  What would be the best way of getting a final hash to store? (not necessarily 1 of the above)
Is it 'better' to have the outside/final hash algorithm different to the inner ones?
Side question: is a salt mainly for making short, crappy user pw's more secure from brute force attacks? So if the pw was large (say the ByteArray of an image file) would a salt add any real purpose?  Thanks.
","Assuming & means concatenation, the safest is:
hash(value1 & delim & value2 & delim & salt)

...where delim is a delimiter that cannot appear in any of the other strings. It doesn't matter which order value1, value2 and salt appear in.
The delimeter prevents aliasing, e.g., (value1, value2) = ('fail', 'stone') vs (value1, value2) = ('fails', 'tone').
","84","<hash><salt>","1","2","1","2012-03-17 10:35:01","9749224","1","","1275413","","2012-03-17 10:20:28","2012-03-17 07:29:43",""
"43977841","salt cmd.run minion didn't return","In my salt state i am executing a local 7zip process to extract a archive. This process takes a while and uses 100% cpu. All other statements in my state are being executed normally but then the 7zip process starts the minion itself returns no response:
mymaster:/srv/salt/patch/abc# salt 'MYMINION' state.apply patch.abc.mystate_core_servers
MYMINION:
  Minion did not return. [No response]

The weird part is that this works from time to time. Any idea?
","","84","<7zip><salt><salt-stack>","0","","0","2017-05-15 11:04:18","","6","","","","","2017-05-15 11:04:18",""
"36188782","Hash/Salt in register.aspx.vb or logon.aspx.vb - or both?","According to this site, https://msdn.microsoft.com/en-us/library/aa288534(v=vs.71).aspx a plain text password is hashed using the 
System.Security.Cryptography.RNGCryptoServiceProvider namespace and ""is hashed in the Logon.aspx.cs or Logon.aspx.vb LogonButton_Click method"".
The site is outdated, though I assume the technique is similar using SHA512 (not that I will use that particular MSDN example), but my question is why Logon.aspx.vb (in my case) and not Register.aspx.vb, otherwise the new user's password when registering would be stored in MS Access (again, in my case) as a plain text password?
Or should the password be hashed/salted in both Register.aspx.vb AND Logon.aspx.vb? If so, is the code used in both files the same?
Additional comment:
As I understand it, I need to use a Random Number Generator to convert the plain text password, so something like:
Imports System
Imports System.Object
Imports System.IO
Imports System.Text
Imports System.Security.Cryptography
Imports System.Security.Cryptography.RandomNumberGenerator
Imports System.Security.Cryptography.RNGCryptoServiceProvider

Private Shared Sub Main()
Using rng As New RNGCryptoServiceProvider()

        Dim data As Byte() = New Byte(3) {}

        For i As Integer = 0 To 9

                    rng.GetBytes(data)

        Dim value As Integer = BitConverter.ToInt32(data, 0)

                   Console.WriteLine(value)

                  Next

          End Using

                 rng.Dispose()

End Sub

I then need to use:
Public Shared Function SHA512 (input As String) As String

Dim input As String 
Dim returnValue As String 

returnValue = Crypto.SHA512(input)

End Function

Then:
Public Shared Function HashPassword (password As String) As String

Dim password As String 
Dim returnValue As String 

returnValue = Crypto.HashPassword(password)

End Function

Followed by:
Public Shared Function VerifyHashedPassword (hashedPassword As String, password As String) As Boolean

Dim hashedPassword As String 
Dim password As String 
Dim returnValue As Boolean 

returnValue = Crypto.VerifyHashedPassword(hashedPassword, password)

End Function

And finally:
Public Shared Function GenerateSalt (byteLength As Integer) As String

Dim byteLength As Integer 
Dim returnValue As String 

returnValue = Crypto.GenerateSalt(byteLength)

End Function

This (when coded fully and correctly) would go in Register.aspx.vb and then referred to, or called, by Log on.aspx vb?
Many thanks.
","As I understand it, I need to use a Random Number Generator to convert the plain text password, so something like:
    Imports System
    Imports System.Object
    Imports System.IO
    Imports System.Text
    Imports System.Security.Cryptography
    Imports System.Security.Cryptography.RandomNumberGenerator
    Imports System.Security.Cryptography.RNGCryptoServiceProvider

    Private Shared Sub Main()
    Using rng As New RNGCryptoServiceProvider()

            Dim data As Byte() = New Byte(3) {}

            For i As Integer = 0 To 9

                        rng.GetBytes(data)

            Dim value As Integer = BitConverter.ToInt32(data, 0)

                       Console.WriteLine(value)

                      Next

              End Using

                     rng.Dispose()

    End Sub

I then need to use:
Public Shared Function SHA512 (input As String) As String

Dim input As String 
Dim returnValue As String 

returnValue = Crypto.SHA512(input)

End Function

Then:
Public Shared Function HashPassword (password As String) As String

Dim password As String 
Dim returnValue As String 

returnValue = Crypto.HashPassword(password)

End Function

Followed by:
Public Shared Function VerifyHashedPassword (hashedPassword As String, password As String) As Boolean

Dim hashedPassword As String 
Dim password As String 
Dim returnValue As Boolean 

returnValue = Crypto.VerifyHashedPassword(hashedPassword, password)

End Function

And finally:
    Public Shared Function GenerateSalt (byteLength As Integer) As String

Dim byteLength As Integer 
Dim returnValue As String 

returnValue = Crypto.GenerateSalt(byteLength)

End Function

This (when coded fully and correctly) would go in Register.aspx.vb and then referred to, or called, by Log on.aspx vb?
","84","<vb.net><hash><salt>","0","0","1","2016-03-24 22:27:33","","2","","2825094","","2016-03-24 22:27:33","2016-03-23 21:13:16",""
"22474588","how can i set blowfish for CRYPT_BLOWFISH function in php","i use this code for encrypt my data to blwofish but i dont know really to convert to blowfish or other encryption.

 echo crypt('ab','$2a$09$anexamplestringforsalt$').""\n""; 

and i'm try bottom code but it's false

echo CRYPT_BLOWFISH('ab','$2a$09$anexamplestringforsalt$').""\n""; 

","It is the crypt parameter string, that defines which algorithm is used:
$2a : This describes the algorithm (BCrypt) but should be 2y nowadays
$09 : This is the number of rounds and is usually 10 or higher
$anexamplestringforsalt : This should be a really random salt of a given alphabet

To generate a BCrypt hash, it is much safer to use the new password_hash() function though, there exists also a compatibility pack for earlier PHP versions.
// Hash a new password for storing in the database.
// The function automatically generates a cryptographically safe salt.
$hashToStoreInDb = password_hash($password, PASSWORD_BCRYPT);

// Check if the hash of the entered login password, matches the stored hash.
// The salt and the cost factor will be extracted from $existingHashFromDb.
$isPasswordCorrect = password_verify($password, $existingHashFromDb);

","84","<encryption><set><bit><salt><blowfish>","0","0","1","2014-03-19 14:42:30","","0","","","","","2014-03-18 09:04:23",""
"55089129","Derive salt from password - How (in)secure is it?","I got the following problem:
In an Java Application I want to store some configuration data in an encrypted, local file. This file might be used for confidential data, like user credentials.
This file should be accessible by using a password (and only a password).
Now most trustworthy people and reference implementations use random salts. I completely understand that this is a reasonable choice. But if my application terminates and will be started later, the random salt is not available anymore. This application is stand-alone so no additional database could be used as a salt store.
For my software the user shall only type in the password (means: no user name, no salt, no favorite animal or colour).
Now my idea was deriving the salt from the password (e.g. by using the first 16 bytes of SHA-256).
My questions are:

How (in)secure would this implementation be?
What is a common way of encrypting stuff with only a password and would be a better alternative?

What is not the aim of this question:

Where to store salts 
Secure algorithms and crypto implementation (of course, I did not implement crypto by myself)
Architectural improvements (nop, I do not want a global database for storing stuff)

","To encrypt data, one needs a key not a password. There are key-derivation-functions to get a key from a user password.
A salt can be used for password hashing, but it cannot be used for encrypting data. There is a similar concept for encryption though, the random values there are called IV or Nonce and are stored together with the encrypted data.
The best thing you can do is

use a key-derivation-function with a salt, to get a key from the password.
With the resulting key you can encrypt the data.
In this case the salt can be stored inside the encrypted data container (the IV is already there), so there is no need for a global database.

To answer your original question: Derriving a salt from the password negates the whole purpose of the salt, it just becomes a more complex hash function.
","84","<security><encryption><salt>","1","0","2","2019-03-20 13:50:53","55262370","16","","11180051","","2019-03-13 14:36:13","2019-03-10 15:16:06",""
"55089129","Derive salt from password - How (in)secure is it?","I got the following problem:
In an Java Application I want to store some configuration data in an encrypted, local file. This file might be used for confidential data, like user credentials.
This file should be accessible by using a password (and only a password).
Now most trustworthy people and reference implementations use random salts. I completely understand that this is a reasonable choice. But if my application terminates and will be started later, the random salt is not available anymore. This application is stand-alone so no additional database could be used as a salt store.
For my software the user shall only type in the password (means: no user name, no salt, no favorite animal or colour).
Now my idea was deriving the salt from the password (e.g. by using the first 16 bytes of SHA-256).
My questions are:

How (in)secure would this implementation be?
What is a common way of encrypting stuff with only a password and would be a better alternative?

What is not the aim of this question:

Where to store salts 
Secure algorithms and crypto implementation (of course, I did not implement crypto by myself)
Architectural improvements (nop, I do not want a global database for storing stuff)

","First, I strongly recommend against devising novel encryption formats if you can help it. It is very difficult to do them correctly. If you want an encryption format that does what you're describing, see JNCryptor, which is an implementation of the RNCryptor format. The RNCryptor format is designed precisely for this problem, so the spec is a good source of information on how you could create your own if you don't want to use it directly. (I'm the author of RNCryptor.)
See also libsodium. It's a better encryption format than RNCryptor for various technical reasons, but it's a bit harder to install and use correctly. There are several Java bindings for libsodium.
When you say ""of course, I did not implement crypto by myself,"" that's what you're doing. Crypto schemes are more than just the AES code. Deciding how to generate the salts in a novel way is implementing crypto. There are many ways to put together secure primitives (like salts) in simple ways and make them wildly insecure. That's why you want to use something well established.
The key take-away is that you store the salt with the data. I know you said this isn't about storing the salt, but that's how you do this. The simplest way to do this is to just glue the salt onto the start of the cipher text and store that. Then you just read the salt from the header. Similarly, you could put the whole thing in an envelope if that's more convenient. Something as simple as JSON:
{ ""salt"": ""<base64-salt>"",
  ""data"": ""<base64-data>"" }

It's not the most efficient way to store the data, but it's easy, standard, and secure.
Remember, salts are not secrets. It is fine that everyone can read the salt.

OK, enough of how to do it right. Let's get to your actual question.
Your salting proposal is not a salt. It's just a slightly different hashing function. The point of a salt is if the same password is used twice (without intending to be the same password), then they will have different hashes. Your scheme fails that. If I implement the same approach as you do, and I pick the same password as yours, then the hash will be the same. Rainbow tables win.
The way you fix that is with a static salt, not a modified hash function. You should pick a salt that represents your system. I usually like reverse DNS for this, because it leads to uniqueness. For example: ""com.example.mygreatapp"". Someone else would naturally pick ""org.example.ourawesomedb"". You also can pick a long random string, but the important thing is uniqueness, so I like reverse DNS. (Random strings tend to make people think the salt is a secret, and the salt is not a secret.)
That's the whole system; just pick some constant salt, unique to your system. (If you had a username, you'd add the username to the salt. This is a standard way to construct a deterministic salt.)
But for file storage, I'd never do it that way.
","84","<security><encryption><salt>","1","0","2","2019-03-20 13:50:53","55262370","16","","11180051","","2019-03-13 14:36:13","2019-03-10 15:16:06",""
"9770448","Identifying frauds while salting passwords","Im in the works of updating the login process of a site.
Currently, passwords are stored as md5(password), and i'd like to add a salt,
but the unsalted password is being used to identify possible frauds since they
usually uses the same password for new accounts.
20% of the traffic is from mobile devices, which don't necessarily have the same ip.
Any idea how to identify these possible frauds?
","You can still add a salt, but you have to do the comparison to the existing passwords while you still have the plaintext password, i.e. you'll have to loop through the passwords table looking for duplicates (by hashing the other account's salt with the new password) at the time the account is created rather than afterwards.
","83","<security><passwords><salt>","0","0","2","2015-04-20 09:39:07","9770687","4","","","","","2012-03-19 12:45:17",""
"9770448","Identifying frauds while salting passwords","Im in the works of updating the login process of a site.
Currently, passwords are stored as md5(password), and i'd like to add a salt,
but the unsalted password is being used to identify possible frauds since they
usually uses the same password for new accounts.
20% of the traffic is from mobile devices, which don't necessarily have the same ip.
Any idea how to identify these possible frauds?
","I would say salting passwords is definitely a major benefit over keeping them unsalted for fraud prevention purposes. However, please use a cryptographically secure slow hashing algorithm, such as bcrypt, scrypt or pbkdf2 - not salted MD5.
But you could have your cake and eat it, why not have another table that contains previous passwords that have been used in fraud attempts? These would be hashed, but not salted and would not have any account association stored.
If a user that uses one of these passwords turns out to be non-fraudulent, you could give them a notification to change their password to something else after you have investigated.
Here's how I imagine it would work for adding new passwords to the fraudulent password list after an account is determined to be used for fraud.

Account is marked as fraudulent.
When this user next attempts to log in, and their hashed, salted password matches the hashed, salted value stored in their account record, the unsalted hashed password taken from their user input is stored in the fraudulent password list.

As the fraudulent password list could reduce the security of the accounts of upstanding users because they are stored in here unsalted, you should make ""good"" users change their passwords upon login if it matches any in the fraudulent password list.
","83","<security><passwords><salt>","0","0","2","2015-04-20 09:39:07","9770687","4","","","","","2012-03-19 12:45:17",""
"45540535","How do BCryptPasswordEncoder check the passed plain password while using salt?","I've check the source of BCryptPasswordEncoder and found it won't return generated random salt.  Then, while we check the plain password later, we don't know which salt did this user use at that time, so how can BCryptPasswordEncoder check whether plain password and encrypted password are the same?
","","82","<bcrypt><salt>","0","","0","2017-08-07 06:23:20","","2","","","","","2017-08-07 06:23:20",""
"44531572","test kitchen salt_solo passing in variables from platforms","I am running test kitchen with salt using salt_solo and I cannot pass variables into the formula if I declare them in the platform.
For example if this was my .kitchen.yml
---
driver:
  name: vagrant

platforms:
  - name: ubuntu-14.04
    grains:
      org:
        bat: batz

suites:
  - name: binary
    provisioner:
      name: salt_solo
      state_top:
        base:
          '*':
            - binary
      formula: binary
      grains:
        org:
          foo: bar  

Then my formula is not able to access {{grains['org']['bat']}}, but it is able to access {{grains['org']['foo']}}.
","The solution is to add provisioner: before the platform variables.  This fix to the example .kitchen.yml from above will solve the issue:
---
driver:
  name: vagrant

platforms:
  - name: ubuntu-14.04
    provisioner:
      grains:
        org:
          bat: batz

suites:
  - name: binary
    provisioner:
      name: salt_solo
      state_top:
        base:
          '*':
            - binary
      formula: binary
      grains:
        org:
          foo: bar 

","82","<salt><test-kitchen>","0","0","1","2017-07-19 21:46:34","45201594","0","","","","","2017-06-13 21:06:32",""
"38250028","salt sls to use dnsutil.hosts_append not working","I need to read the host entries from pillar file and update the /etc/hosts file accordingly
This is my simple sls file to update the /etc/hosts file.
#/srv/salt/splunk_dep/hosts.sls

dnsutil:
  dnsutil.hosts-append:
    - hostsfile: '/etc/hosts'
    - ip_addr: '10.10.10.10'
    - entries: 'hostname'

when i execute the sls file
salt Minion-name state.apply splunk_dep/hosts
Getting the following error
      ID: dnsutil
Function: dnsutil.hosts-append
  Result: False
 Comment: State 'dnsutil.hosts-append' was not found in SLS 'splunk_dep/hosts'
          Reason: 'dnsutil.hosts-append' is not available.
 Started:
Duration:
 Changes:

If i execute through command line its working fine
salt 'DS-110' dnsutil.hosts_append /etc/hosts 10.10.10.10 hostname
I need to update the /etc/hosts file through sls file. Can someone please help me on this.
I am using the salt version  : salt 2015.8.3 (Beryllium)
","dnsutil is a Salt module, and not a Salt state. Therefore it can be used from the command line, but not directly via SLS state file.
To run modules from state file you'll need module.run. Please note that in this case you'll need to put an underscore in hosts_append, not a hyphen.
dnsutil:
  module.run:
    - name: dnsutil.hosts_append
    - hostsfile: '/etc/hosts'
    - ip_addr: '10.10.10.10'
    - entries: 'hostname'

Some caveats with modules: even if they don't change your system, they will be reported as ""changed"" in the summary of your salt call. Please consider using file.blockreplace for managing hosts file instead to avoid this.
","82","<salt>","0","0","1","2016-07-12 09:53:31","","1","","","","","2016-07-07 15:53:05",""
"3646301","Is this kind of hashed verification safe?","The question I'm about to ask is just because I'm curious. I think I'm doing the right thing, but I want to make sure it actually is the right thing. It's about hashing.
The website I am currently building features several Ajax-ed components. First of all, users that are not logged in cannot use these components. Second, users that are logged in can only do their requests in their own name. It's pretty easy to forge, because I send User-id's.
My verification method is as follows. Each user has a column in the database that holds random information, like a 8-character random string. Alongside every Ajax request a user makes, this random string is sent as a hashed string. When the Ajax request is received by the server, this hash is matched with the user table to make sure the ID and hash are a valid couple. If so, the request is valid.
The 'secret' random string never enters the user realm and is not easy to be guessed, which means that the hash can never be generated by the user. Is this kind of securing a request safe? Are there any drawbacks? And would it be better if I would use some salt?
On a side note, this kind of verification really interests me. I followed a course in interaction design. 'We' have the principle of 'knowledge in the world and knowledge in the head'. Hashing really uses that technique to transfer meta-data from the 'head' to the 'world' (and vice versa). Both the head and the world have their methods of comparing and decrypting the meta-data, thus making it impossible to impersonate a request. As long as the world doesn't know what the head knows.
Well, that said, I'd like to know whether my requests are (relatively) safe. Thanks in advance!
Reinder
","Yes subject to a couple caveats.
1) If the hash is sent in the clear it is subject to spoofing.  An attacker who intercepts the hash can now impersonate the valid user.  For true security you would need to secure the channel (HTTPS).
2) Make sure you use an existing cryptographically secure hash.  Don't try to roll your own.  I would recommend staying away from MD5.  Given this is a greenfield situation and SHA1 implementations exists there is little reason to use MD5.  
","81","<authentication><hash><salt><verification>","1","0","1","2010-11-15 17:18:14","4186772","0","0","","","","2010-09-05 14:02:19",""
"55359214","Spring Security in-memory user-service with BCrypt (XML configuration)","How to use BCrypt password encoder with in-memory user service using XML namespace configuration? I tried the following:
<bean id=""bcrypt"" class=""org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder""/>
<security:authentication-manager alias=""authenticationManager"">
    <security:authentication-provider>
        <security:password-encoder ref=""bcrypt"" />
        <security:user-service id=""userService"">
            <security:user name=""123"" password=""123"" authorities=""123"" />
        </security:user-service>
    </security:authentication-provider>
</security:authentication-manager>

In this case Spring expects the passwords to be already in salted form. How do I salt the passwords using the encoder with XML config?
","For testing purposes you can generate BCrypt hashes by using an online tool like this.
","81","<spring><spring-security><bcrypt><salt>","0","1","1","2019-03-26 15:40:56","","1","","","","","2019-03-26 14:09:21",""
"22453234","Login script failing - populating users via registration form","Ok so I have been following a basic tutorial for hashing passwords so I am new to this...
The registration works fine and populates my database but when it comes to logging in it fails to recognise my users. i have tested this by creating a fail.php file so when it dosnt recognise the user it will send them there which it does. All I am looking for is a pointer to find out how to get the user to login and begin the session but there is obviously a hurdle stopping this.
Login action script:
<?
session_start(); //must call session_start before using any $_SESSION variables
$username = $_POST['username'];
$password = $_POST['password'];


include 'connect.php'; 


$username = mysql_real_escape_string($username);
$query = ""SELECT password, salt
        FROM users
        WHERE username = '$username';"";
$result = mysql_query($query);
if(mysql_num_rows($result) < 1) //no such user exists
{
    header('Location: fail.php');
    die();
}
$userData = mysql_fetch_array($result, MYSQL_ASSOC);
$hash = hash('sha256', $userData['salt'] . hash('sha256', $password) );
if($hash != $userData['password']) //incorrect password
{
    header('Location: login_form.php');
    die();
}
else
{
    validateUser(); //sets the session data for this user
}
?>

The login form: 
<form name=""login"" action=""login.php"" method=""post"">
    Username: <input type=""text"" name=""username"" />
    Password: <input type=""password"" name=""password"" />
    <input type=""submit"" value=""Login"" />
</form>

Registration script if required:
<?php
//retrieve our data from POST
$username = $_POST['username'];
$pass1 = $_POST['pass1'];
$pass2 = $_POST['pass2'];
if($pass1 != $pass2)
    header('Location: register_form.php');
if(strlen($username) > 30)
    header('Location: register_form.php');

$hash = hash('sha256', $pass1);


//creates a 3 character sequence
function createSalt()
{
    $string = md5(uniqid(rand(), true));
    return substr($string, 0, 3);
}
$salt = createSalt();
$hash = hash('sha256', $salt . $hash);

$dbhost = 'localhost';
$dbname = '******';
$dbuser = '******';
$dbpass = '******'; //not really
$conn = mysql_connect($dbhost, $dbuser, $dbpass);
mysql_select_db($dbname, $conn);
//sanitize username
$username = mysql_real_escape_string($username);
$query = ""INSERT INTO users ( username, password, salt )
        VALUES ( '$username' , '$hash' , '$salt' );"";
mysql_query($query);
mysql_close();
header('Location: login_form.php');

?>

And here is the page for them to log into:
 <?php
    session_start();
    //if the user has not logged in
    if(!isLoggedIn())
    {
        header('Location: login.php');
        die();
    }
    ?>

","","81","<php><login><hash><salt>","0","","0","2014-03-17 11:33:23","","23","","","","","2014-03-17 11:33:23",""
"49476116","How to persist a salt with specified lenght in the database","I already have a database which contains a table named User, this table contains a table salt, password etc...

salt column has data with length 43
password column has data with 88 length

my database was created by symfony(ORM+FOSUserBundle) he use sha512.
I am trying to get a salt and a password , and store them into the database from desktop java application, so I tried this Class:
import com.google.common.io.BaseEncoding;
import org.slf4j.Logger;
import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import com.google.common.primitives.Bytes;
import org.slf4j.LoggerFactory;

public class SHA512 {
    private static final Logger log = LoggerFactory.getLogger(SHA512.class);
    private static final String ALGORITHM = ""SHA-512"";
    private static final int ITERATIONS = 5000;
    private static final int SALT_SIZE = 43;


    /**
     * Private constructor.
     */
    private SHA512() {
    }

    public static void main(String[] args) {
        String password = ""0000"";

        try {

            byte[] salt = generateSalt();
            log.info(""Password {}. hash algorithm {}, iterations {}, salt {}"", password, ALGORITHM, ITERATIONS,
                    BaseEncoding.base64().encode(salt));
            byte[] hash = calculateHash(password, salt);
            boolean correct = verifyPassword(hash, password, salt);

            log.info(""Entered password is correct: {}"", correct);
        } catch (NoSuchAlgorithmException | UnsupportedEncodingException ex) {
            log.error(ex.getMessage(), ex);
        }
    }


    private static byte[] generateSalt() {
        SecureRandom random = new SecureRandom();
        byte[] salt = new byte[SALT_SIZE];
        random.nextBytes(salt);

        return salt;
    }

    private static byte[] calculateHash(String password, byte[] salt) throws NoSuchAlgorithmException,
            UnsupportedEncodingException {
        MessageDigest md = MessageDigest.getInstance(ALGORITHM);
        md.reset();
        md.update(Bytes.concat(password.getBytes(""UTF-8""), salt));
        byte[] hash = md.digest();

        for (int i = 0; i < ITERATIONS; i++) {
            md.reset();
            hash = md.digest(hash);
        }
        return hash;
    }

    private static boolean verifyPassword(byte[] originalHash, String password, byte[] salt) throws
            NoSuchAlgorithmException, UnsupportedEncodingException {
        byte[] comparisonHash = calculateHash(password, salt);

        log.info(""hash 1: {}"", BaseEncoding.base64().encode(originalHash));
        log.info(""hash 2: {}"", BaseEncoding.base64().encode(comparisonHash));

        return comparePasswords(originalHash, comparisonHash);
    }

    /**
     * Compares the two byte arrays in length-constant time using XOR.
     *
     * @param originalHash   The original password hash
     * @param comparisonHash The comparison password hash
     * @return True if both match, false otherwise
     */
    private static boolean comparePasswords(byte[] originalHash, byte[] comparisonHash) {
        int diff = originalHash.length ^ comparisonHash.length;
        for (int i = 0; i < originalHash.length && i < comparisonHash.length; i++) {
            diff |= originalHash[i] ^ comparisonHash[i];
        }

        return diff == 0;
    }
}

I need a salt with lenght 43, But BaseEncoding.base64().encode(salt) output salt with lenght equal 60.
I modified the SALT_SIZE to 30 and BaseEncoding.base64().encode(salt) output a salt with length equal to 40 but, when I add a user with that salt and with the hash generated, I can't Login with this user from my web application(already said that FOSUserBundle controls authentication and encode/decode algorithm)
","If I am reading this right, you have an error in your digest encoder implementation.
Reference points:
MessageDigestPasswordEncoder.php
BasePasswordEncoder.php
When you request to manually generate digest, there are basically two steps:

Hash the concat: password + { + salt + }
For each additional iteration: hash the concat of previous digest +  salt (note that this step does not add { or } chars)

So, I see two issues in you implementation:

It looks to me that you have not included those { and } in iteration #0
You have not included the salt in any of later iteration

Hope this helps a bit...
","81","<java><symfony><hash><salt><sha512>","1","1","1","2018-04-13 21:23:29","49476901","0","0","8089674","","2018-03-25 13:27:07","2018-03-25 13:00:09",""
"28392864","Password hashing with Spring Security","Is it possible to add additional salt to password using Spring Security BCryptPasswordEncoder?
","You cannot use Bcrypt algorithm with a custom salt since in bcrypt algorithm it always chooses a random salt to encode the password and and then finally it attaches the salt to the encoded password. This how it works, that is the reason that you cannot have your own custom salt in this algorithm.
Even the error message that you are getting shows the same thing. You should instead use SHA-256 or MD5 algorithms if you want to use custom salt source for encryption.
","80","<spring><spring-security><salt><bcrypt>","-1","2","1","2015-02-09 14:03:35","28393203","1","","3940520","","2015-02-09 14:03:35","2015-02-08 10:22:41",""
"41117106","Problems working with Password Hashing using salt","It's my first time dealing with Password hashing in a web application.
I used https://www.codeproject.com/articles/704865/salted-password-hashing-doing-it-right for theory and copied a sample from https://github.com/defuse/password-hashing.
In my understanding, the salt should be unique for every account. So my question would be:
why is the salt generated in this method:
 public static String createHash(char[] password)
    throws CannotPerformOperationException
{
    // Generate a random salt
    SecureRandom random = new SecureRandom();
    byte[] salt = new byte[SALT_BYTE_SIZE];
    random.nextBytes(salt);

    // Hash the password
    byte[] hash = pbkdf2(password, salt, PBKDF2_ITERATIONS, HASH_BYTE_SIZE);
    int hashSize = hash.length;

    // format: algorithm:iterations:hashSize:salt:hash
    String parts = ""sha1:"" +
        PBKDF2_ITERATIONS +
        "":"" + hashSize +
        "":"" +
        toBase64(salt) +
        "":"" +
        toBase64(hash);
    return parts;
}

What I would Need is a function which stores a hashed password and the used salt from a database. How can I retrieve the used salt from here?
System.out.println(salt);

Always writes
[B@29453f44

In the console. Why is this the case? And what data type would I Need to store the salt in the mysql database? Or do I have the wrong Approach?
","If I understand your questions correctly then:

In my understanding, the salt should be unique for every account.

byte[] salt = new byte[SALT_BYTE_SIZE];
random.nextBytes(salt);

Generates a random salt, which makes it unique. 
You could also use use the ID for the user from the database or something else unique, but a randomly generated salt is also unique, since afterall, for each new user a new salt is randomly generated.
This salt is then in your code concatenated together with the hash, the hashSize, the algorithm and the number of iterations into parts
 // format: algorithm:iterations:hashSize:salt:hash
String parts = ""sha1:"" +
    PBKDF2_ITERATIONS +
    "":"" + hashSize +
    "":"" +
    toBase64(salt) +
    "":"" +
    toBase64(hash);
return parts;

Often you know the lengths (byte size) of the different parts in parts and can thus extract the part you need. In your case you have even added a : as a separator which makes it even simpler to extract the part you are interested in.

And what data type would I Need to store the salt in the mysql database?

Once you have gotten your parts, this is what you save in the database as text (varchar or char). You do not separate it and store salt separately. Just mash it all in together.
When a user then wants to sign in, they provide a password. Now you fetch parts for the user from the database, you extract the salt, number of iterations and so on from parts, since afterall, you know exactly how it is concatenated. Then you use that information to hash the inputted password from the user again. Now you compare the new hash, with the old hash. If they are the same, well, then the user gave the correct password, if not, he didn't. 

Always writes [B@29453f44 In the console.

As @JonSkeet said, the answer is given in Converting String to Sha-256 Hash
","80","<java><mysql><hash><salt>","1","0","1","2016-12-13 10:21:10","41118663","3","","","","","2016-12-13 09:03:14",""
"57326920","Java AES encryption issue","Every time the encryption values changed by using AES, let anyone investigate the below code and let me know the issue
code:
private static final String secretKeys = ""58BA833E57A51CBF9BF8BAB696BF9""

public static String encrypt() throws Exception {
        byte[] salt = new byte[16];
        SecretKeyFactory factory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA256"");
        PBEKeySpec pbeKeySpec = new PBEKeySpec(secretKeys.getChars(),salt,1000, 256);
        Key secretKey = factory.generateSecret(pbeKeySpec);
        byte[] key = new byte[32];
        byte[] iv = new byte[16];
        SecretKeySpec secret = new SecretKeySpec(key, ""AES"");
        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.ENCRYPT_MODE, secret);
        byte[] result = cipher.doFinal(""welcome"".getBytes(""UTF-8""));
        String s = Base64.getEncoder().encodeToString(result);
        return s
        }

Output
first time I got the below-encrypted string
CZRIP35M4CnJtuDQ6YpmaQ==

The second time I got the below-encrypted string
/fylTjohAZDsnCaHhiZo3A==

I have three questions:

why the encrypted string not a constant?
how can I set the Blocksize? ( AES.BlockSize = 128;)
How can I set the padding mode? (AES.Padding = PaddingMode.PKCS7;)

","1) the encrypted text is always different because the Cipher initialization is providing it's own IV since you are not providing one. You need to provide the IV you've ""computed"" in order to have a consistent output. Remember you never want to use an IV more than once for whatever this code is ultimately intended to do.
2) The keysize can be 128, 192 or 256 but the blocksize is always 128.
3) Java only provides PKCS5, but there is no difference in the implementation for AES. see what-is-the-difference-between-pkcs5-padding-and-pkcs7-padding
As was already pointed out there are several problems with the code provided such as the first lines not actually doing anything and the key and iv both being uninitialized. I would additionally suggest you use SecureRandom to initialize your key and iv. If you plan on using only a single AES key, this can be computed once and placed in the code or configuration file instead of running PBKDF2 every time.
","79","<java><encryption><aes><salt><crypt>","1","1","3","2019-08-02 14:44:02","","6","","228371","","2019-08-02 13:15:51","2019-08-02 12:55:05",""
"57326920","Java AES encryption issue","Every time the encryption values changed by using AES, let anyone investigate the below code and let me know the issue
code:
private static final String secretKeys = ""58BA833E57A51CBF9BF8BAB696BF9""

public static String encrypt() throws Exception {
        byte[] salt = new byte[16];
        SecretKeyFactory factory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA256"");
        PBEKeySpec pbeKeySpec = new PBEKeySpec(secretKeys.getChars(),salt,1000, 256);
        Key secretKey = factory.generateSecret(pbeKeySpec);
        byte[] key = new byte[32];
        byte[] iv = new byte[16];
        SecretKeySpec secret = new SecretKeySpec(key, ""AES"");
        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.ENCRYPT_MODE, secret);
        byte[] result = cipher.doFinal(""welcome"".getBytes(""UTF-8""));
        String s = Base64.getEncoder().encodeToString(result);
        return s
        }

Output
first time I got the below-encrypted string
CZRIP35M4CnJtuDQ6YpmaQ==

The second time I got the below-encrypted string
/fylTjohAZDsnCaHhiZo3A==

I have three questions:

why the encrypted string not a constant?
how can I set the Blocksize? ( AES.BlockSize = 128;)
How can I set the padding mode? (AES.Padding = PaddingMode.PKCS7;)

","
For the first question, @Freiheit already answered this.
Long story short, based on the iv (initilization vector) which acts as a salt and will be different for each encryption. 
Having that said, encrypting the same plain text will result in different encrypted text, but the decryption (if necessary) will result back into the same plain text.
IV is helpful to make the encryption predictable. 
Having stored the same password for 2 different users in a database will have different values, but will be the same password.
With the current cipher configured, you already have 128 block size. You can read more about the different cypher transformation here. You can also find more information of the block sizes for different algorithms here
You just need to change the Cipher.getInstance() to AES/CBC/PKCS7Padding

","79","<java><encryption><aes><salt><crypt>","1","2","3","2019-08-02 14:44:02","","6","","228371","","2019-08-02 13:15:51","2019-08-02 12:55:05",""
"57326920","Java AES encryption issue","Every time the encryption values changed by using AES, let anyone investigate the below code and let me know the issue
code:
private static final String secretKeys = ""58BA833E57A51CBF9BF8BAB696BF9""

public static String encrypt() throws Exception {
        byte[] salt = new byte[16];
        SecretKeyFactory factory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA256"");
        PBEKeySpec pbeKeySpec = new PBEKeySpec(secretKeys.getChars(),salt,1000, 256);
        Key secretKey = factory.generateSecret(pbeKeySpec);
        byte[] key = new byte[32];
        byte[] iv = new byte[16];
        SecretKeySpec secret = new SecretKeySpec(key, ""AES"");
        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.ENCRYPT_MODE, secret);
        byte[] result = cipher.doFinal(""welcome"".getBytes(""UTF-8""));
        String s = Base64.getEncoder().encodeToString(result);
        return s
        }

Output
first time I got the below-encrypted string
CZRIP35M4CnJtuDQ6YpmaQ==

The second time I got the below-encrypted string
/fylTjohAZDsnCaHhiZo3A==

I have three questions:

why the encrypted string not a constant?
how can I set the Blocksize? ( AES.BlockSize = 128;)
How can I set the padding mode? (AES.Padding = PaddingMode.PKCS7;)

","Only adding to the answer provided by @micker, you need to invoke another version of Cipher.init(); one that takes the IV into account:
...
byte[] iv = new byte[16];
IvParameterSpec ivSpec = new IvParameterSpec(iv); // <= Wrap your IV bytes here.
SecretKeySpec secret = new SecretKeySpec(key, ""AES"");
Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
cipher.init(Cipher.ENCRYPT_MODE, secret, ivSpec); // <= Add IV here.
...

That being said, the implementation suffers from a slew of other issues (key being all zeroes, IV being all zeroes, first 4 line don't do anything for you (as @JBNizet pointed out)). I hope you are only using it to study how Java's encryption mechanics works. 
","79","<java><encryption><aes><salt><crypt>","1","0","3","2019-08-02 14:44:02","","6","","228371","","2019-08-02 13:15:51","2019-08-02 12:55:05",""
"29677654","Is it possible to enforce password complexity server-side while using salted hashed passphrases?","If I'm using server-side passphrase complexity rules and I'm salting and hashing the passphrase on the client-side is it possible to test complexity rules once the password reaches the server? I would assume not or hashing is not very useful
So in this case how do you enforce password complexity? 
","Short answer; you shouldn't be hashing passwords client-side. If you do so, the submitted hash effectively becomes a plain-text password.
There are many posts on SO and related sites that explain why this is a bad idea in more depth. For example, https://security.stackexchange.com/questions/23006/client-side-password-hashing
EDIT: To answer your original question, if a password has been hashed and salted correctly then there should be no way to recover the original password from the hash.
","78","<hash><salt>","0","1","1","2015-04-16 14:46:34","29677996","0","","","","","2015-04-16 14:23:51",""
"56841806","Salt's cmd.run ignoring shell script return code","I am using a simple salt state to send (file.managed) and execute (cmd.run) a shell script on a minion/target. No matter what exit or return value the shell script sends, the salt master is interpreting the result as successful.
I tried using cmd.script, but keep getting a permission denied error on the temp version of the file under /tmp.  Filesystem is not mounted with noexec so we can't figure out why it won't work.
For cmd.run, stdout in the job output shows the failed return code and message but Salt still says Success. Running the script locally on the minion reports the return/exit code as expected.
I tried adding stateful: True into the cmd.run block and formatted the key value pairs at the end of the shell script as demonstrated in the docs. 
Running against 2 minion target, 1 fail 1 succeed. Both report Result as True but correctly populate Comment with my key value pair.
I've tried YES/NO, TRUE/FALSE, 0/1 - nothing works.
The end of my shell script, formatted as shown in the docs.
echo Return_Code=${STATUS}
# exit ${STATUS}


if [[ ${STATUS} -ne 0 ]]
   then
      echo """"
      echo ""changed=False comment='Failed'""
   else
      echo """"
      echo ""changed=True comment='Success'""
fi

The SLS block:
stop_oracle:
  cmd.run:
    - name: {{scriptDir}}/{{scriptName}}{{scriptArg}}
    - stateful: True
    - failhard: True

SLS output from Successful minion:
----------
          ID: stop_oracle
    Function: cmd.run
        Name: /u01/orastage/oraclepsu/scripts/oracle_ss_wrapper.ksh stop
      Result: True
     Comment: Success
     Started: 14:37:44.519131
    Duration: 18930.344 ms
     Changes:
              ----------
              changed:
                  True
              pid:
                  26195
              retcode:
                  0
              stderr:
                  stty: standard input: Inappropriate ioctl for device
              stdout:
                  Script running under ROOT

                  Mon Jul  1 14:38:03 EDT 2019 : Successful
                  Return_Code=0

SLS output from Failed minion:
----------
          ID: stop_oracle
    Function: cmd.run
        Name: /u01/orastage/oraclepsu/scripts/oracle_ss_wrapper.ksh stop
      Result: True
     Comment: Failed
     Started: 14:07:14.153940
    Duration: 38116.134 ms
     Changes:

Output from shell script run locally on fail target:
[oracle@a9tvdb102]:/home/oracle:>> 
/u01/orastage/oraclepsu/scripts/oracle_ss_wrapper.ksh stop

Mon Jul  1 15:29:18 EDT 2019 : There are errors in the process
Return_Code=1

changed=False comment='Failed'

Output from shell script run locally on success target:
[ /home/oracle ]
oracle@r9tvdo1004.giolab.local > 
/u01/orastage/oraclepsu/scripts/oracle_ss_wrapper.ksh stop

Mon Jul  1 16:03:18 EDT 2019 : Successful
Return_Code=0

changed=True comment='Success'

","","78","<shell><tags><salt><stateful><return-code>","0","","0","2019-07-01 20:05:36","","1","","","","","2019-07-01 20:05:36",""
"20377097","Zend\Crypt, generating salt","When i generating salt with Zend\Crypt, line has a size of 60 characters, like this ""string(60) ""$2a$14$bG9vbG9sb2xvaXA5aXBpOOzbeNtKouOS22IEgWwwFrHv08Do5yuSS""""
 $bcrypt = new Bcrypt();
 $pswd = 'some_pswd';
 $securePass = $bcrypt->create($pswd);

How i can change string length to 30?
","Your code generates a BCrypt hash, including an automatically generated salt (the part after the third $ bG9vbG9sb2xvaXA5aXBpOO). A BCrypt hash always results in a 60 character string. 
Why do you expect/need a 30 character string? You would have to use another hash algorithm, but for passwords BCrypt is a good choice, with only 30 characters the hash would be unsafe.
","77","<zend-framework><frameworks><md5><salt>","0","1","1","2013-12-04 16:19:43","","0","0","","","","2013-12-04 13:49:56",""
"40387428","Salt, hashes and security in web development","At the Udacity.com there is a course called Web Development.
The lecturer has told us about cookies, how to sign cookies, what salt is and that we must always keep hashes of passwords in the database. Then he gave us a homework and then he published a solution.
And only here we have seen the whole picture: how it all should work together.
Below is Python and code for Google App Engine . But, please, don't be afraid. The code seems to be readable like pseudo code. And the question is general, not about this special technologies.
import hashlib
import hmac

secret = 'iamsosecret'

def make_secure_val(val):
    return '%s|%s' % (val, hmac.new(secret, val).hexdigest())

def check_secure_val(secure_val):
    val = secure_val.split('|')[0]
    if secure_val == make_secure_val(val):
        return val

def make_salt(length = 5):
    return ''.join(random.choice(letters) for x in xrange(length))

def make_pw_hash(name, pw, salt = None):
    if not salt:
        salt = make_salt()
    h = hashlib.sha256(name + pw + salt).hexdigest()
    return '%s,%s' % (salt, h)

def valid_pw(name, password, h):
    salt = h.split(',')[0]
    return h == make_pw_hash(name, password, salt)

class User(db.Model):
    name = db.StringProperty(required = True)
    pw_hash = db.StringProperty(required = True)
    email = db.StringProperty()

    @classmethod
    def register(cls, name, pw, email = None):
        pw_hash = make_pw_hash(name, pw)
        return User(parent = users_key(),
                    name = name,
                    pw_hash = pw_hash,
                    email = email)

    @classmethod
    def login(cls, name, pw):
        u = cls.by_name(name)
        if u and valid_pw(name, pw, u.pw_hash):
            return u


class BlogHandler(webapp2.RequestHandler):

    def set_secure_cookie(self, name, val):
        cookie_val = make_secure_val(val)
        self.response.headers.add_header(
            'Set-Cookie',
            '%s=%s; Path=/' % (name, cookie_val))

    def read_secure_cookie(self, name):
        cookie_val = self.request.cookies.get(name)
        return cookie_val and check_secure_val(cookie_val)

    def login(self, user):
        self.set_secure_cookie('user_id', str(user.key().id()))

    def logout(self):
        self.response.headers.add_header('Set-Cookie', 'user_id=; Path=/')

    def initialize(self, *a, **kw):
        webapp2.RequestHandler.initialize(self, *a, **kw)
        uid = self.read_secure_cookie('user_id')
        self.user = uid and User.by_id(int(uid))

Let's scrutinize what we have here.

Function make_secure_val produces something like this:
'keyword|6f21001bbf8bfbd8c04b9d537df1e314'
Function make_secure_val is used in the function set_secure_cookie. So, it is used for login.
Function make_secure_val makes use of a secret key, but doesn't use salt.
Function make_pw_hash(name, pw, salt = None) produces something like this: 'some_salt,c984cade696390b71ff914293c53767502ea542bfd0e7240a051e7ead2c60077'
Function make_pw_hash prepares a hashed password that will be kept in the database. User inputs username and the password in the form, then data from the form become arguments of this make_pw_hash function.
Function make_pw_hash uses salt but doesn't use a secret key.
Function make_pw_hash for some reasons mixed username into the hash.

Well, I can't understand anything here. I would say this is all not secure.
Questions:

Why the teacher did not use salt for cookies?
Why he didn't use the secret key for making hashes to put passwords into the database?
Why he mixed username for making hashes to put passwords into the database?
We can see two approaches for making hashes: one for cookies and another for the database. Why they are separated? Isn't it more practical to unify: always use a secret key and salt. Less code. And good security. But he separated. Why?

By the way The teacher's solution
","The most important first: this method for storing passwords is not safe and should not be used nor teached. The problem is, that a single pass of SHA-256 is ways too fast (3 Giga SHA-256 per second) and therefore can be brute-forced too easily. We need a cost factor as available in BCrypt, PBKDF2 or SCrypt.
Some answers to your questions:

Salting weak passwords and strong tokens are two different things. Salting and key-stretching is necessary for short/weak passwords, but can be left out for strong tokens. That requires the parameter val to be a strong random token (min 20 characters a..z, A..Z, 0..9). This cannot be judged by the shown code, but should be part of the documentation of set_secure_cookie().
Adding a server side secret to password hashes can be done, but it is important to understand what you are mitigating and how to do it. If you are interested, have a look at my tutorial about secure password hashing.
Mixing up the username is not a common way to hash passwords, it does no improve security but prevents changing of the username.
See the first point.

","77","<security><cookies><passwords><salt>","0","0","1","2016-11-09 09:06:41","40502924","0","","575765","","2016-11-09 09:00:13","2016-11-02 18:39:25",""
"58469202","Find an user by their hashed token","I want to implement a token-based authentication system that is strongly resistant to insider attacks. That is, someone who has read-only access to the code and the database shouldn't be able to use someone else's token. It means that JWT is not the way to go, because if someone knows the secret key of the token signatures (that is stored in plain text on the server) they can compromise the tokens of everybody (provided that they know the payload of the user). Besides, I want something simpler to implement than OpenID/OAuth.
Thus, I thought about having access tokens for each user stored in the database. Each one of them would have a time-to-live of 1 day. But if you know the token of an user, 1 day is more than enough to do something nasty with it, like deleting the account for example. Hence, I want to add another security layer and hash the tokens in the database.
The problem is, the password_hash() function of PHP uses salt so it is not deterministic. What it means is that I cannot do that:
// Insert a new user
$token = generateToken(size=32);
$tokenHash = password_hash($token, PASSWORD_DEFAULT);
$sql = ""
INSERT INTO `User` (username, password_hash, token_hash)
VALUES (:username, :password_hash, :token_hash)
"";
$stmt->prepare($sql);
$stmt->execute([
  "":username"" => $username,
  "":password_hash"" => $paswordHash
  "":token_hash"" => $tokenHash
]);

// Find an user with their token
$tokenHash = password_hash($token, PASSWORD_DEFAULT);
$sql = ""SELECT * FROM `User` WHERE token_hash = :token_hash"";
$stmt = $db->prepare($sql);
$stmt->execute(["":token_hash"" => $tokenHash]);
$user = $stmt->fetch(PDO::FETCH_ASSOC);

Indeed, $tokenHash will in practice never be equal to the value stored in the database, and the correct function to do this comparison is password_verify(). But retrieving all the users of the database and using password_verify() for each of them would be way too inefficient.
What is the correct way to find an user (or more generally a database record) using an hashed value in his columns?
Thank you for your help.
","I see 2 solutions:
1. Use an hash function that doesn't have salt
With the PHP hash() function, the result will always be the same as there is no randomly generated salt. This way you can compare the 2 token hashes like so:
// Insert a new user
$token = generateToken(size=32);
$tokenHash = hash(""sha256"", $token); // Use hash() instead of password_hash()
$sql = ""
INSERT INTO `User` (username, password_hash, token_hash)
VALUES (:username, :password_hash, :token_hash)
"";
$stmt->prepare($sql);
$stmt->execute([
  "":username"" => $username,
  "":password_hash"" => $paswordHash
  "":token_hash"" => $tokenHash
]);

// Find an user with their token
$tokenHash = hash(""sha256"", $token); // Same here
$sql = ""SELECT * FROM `User` WHERE token_hash = :token_hash"";
$stmt = $db->prepare($sql);
$stmt->execute(["":token_hash"" => $tokenHash]);
$user = $stmt->fetch(PDO::FETCH_ASSOC);

2. Create your own password_verify() in SQL
You can write your own bcrypt verification function in the database and use it in the second query:
// Find an user with their token
$sql = ""SELECT * FROM `User` WHERE password_verify(:token, token_hash)"";
$stmt = $db->prepare($sql);
$stmt->execute(["":token"" => $token]);
$user = $stmt->fetch(PDO::FETCH_ASSOC);

","76","<php><sql><hash><access-token><salt>","0","0","2","2019-10-23 09:57:21","58520215","14","","9658326","","2019-10-22 09:53:17","2019-10-20 00:52:01",""
"58469202","Find an user by their hashed token","I want to implement a token-based authentication system that is strongly resistant to insider attacks. That is, someone who has read-only access to the code and the database shouldn't be able to use someone else's token. It means that JWT is not the way to go, because if someone knows the secret key of the token signatures (that is stored in plain text on the server) they can compromise the tokens of everybody (provided that they know the payload of the user). Besides, I want something simpler to implement than OpenID/OAuth.
Thus, I thought about having access tokens for each user stored in the database. Each one of them would have a time-to-live of 1 day. But if you know the token of an user, 1 day is more than enough to do something nasty with it, like deleting the account for example. Hence, I want to add another security layer and hash the tokens in the database.
The problem is, the password_hash() function of PHP uses salt so it is not deterministic. What it means is that I cannot do that:
// Insert a new user
$token = generateToken(size=32);
$tokenHash = password_hash($token, PASSWORD_DEFAULT);
$sql = ""
INSERT INTO `User` (username, password_hash, token_hash)
VALUES (:username, :password_hash, :token_hash)
"";
$stmt->prepare($sql);
$stmt->execute([
  "":username"" => $username,
  "":password_hash"" => $paswordHash
  "":token_hash"" => $tokenHash
]);

// Find an user with their token
$tokenHash = password_hash($token, PASSWORD_DEFAULT);
$sql = ""SELECT * FROM `User` WHERE token_hash = :token_hash"";
$stmt = $db->prepare($sql);
$stmt->execute(["":token_hash"" => $tokenHash]);
$user = $stmt->fetch(PDO::FETCH_ASSOC);

Indeed, $tokenHash will in practice never be equal to the value stored in the database, and the correct function to do this comparison is password_verify(). But retrieving all the users of the database and using password_verify() for each of them would be way too inefficient.
What is the correct way to find an user (or more generally a database record) using an hashed value in his columns?
Thank you for your help.
","As you already found out, one cannot use a salt to create searchable hashes. Hashing with a fast unsalted algorithm like SHA-256 is perfectly fine though, as long as your tokens are very strong. This means the token should contain at least 24 random characters of the alphabet 0..9, a..z, A..Z.
Salting and key-stretching are measures for weak user passwords, to prevent dictionary attacks and to make brute-force attacks unpractical. Strong random tokens can be hashed without this precautions.
I wrote some example code how such tokens could be generated.
","76","<php><sql><hash><access-token><salt>","0","1","2","2019-10-23 09:57:21","58520215","14","","9658326","","2019-10-22 09:53:17","2019-10-20 00:52:01",""
"54323344","How can I check that password is correct if I add random salt?","I'm trying to secure my c# app. I know that we MUST store password hash and salt in DB. So my question: How I can compare that password is correct if I use Random salt? (Random salt gives random values each time).
I also have the code below
 public static string HashPassword(string p, string s)
    {
        var combinedPassword = String.Concat(p, s);
        var sha256 = new SHA512Managed();
        var bytes = UTF8Encoding.UTF8.GetBytes(combinedPassword);
        var hash = sha256.ComputeHash(bytes);
        return Convert.ToBase64String(hash);
    }

    public static String GetRandomSalt()
    {
        var random = new RNGCryptoServiceProvider();
        var salt = new Byte[1024];
        random.GetBytes(salt);
        return Convert.ToBase64String(salt);
    }

I am open to other suggestions in general.
","First , you have to get salt in database by username , then hash it with posted password , finally compare it to password stored in database 
","75","<c#><database><hash><passwords><salt>","0","1","2","2019-01-25 02:13:26","","1","1","","","","2019-01-23 08:55:56",""
"54323344","How can I check that password is correct if I add random salt?","I'm trying to secure my c# app. I know that we MUST store password hash and salt in DB. So my question: How I can compare that password is correct if I use Random salt? (Random salt gives random values each time).
I also have the code below
 public static string HashPassword(string p, string s)
    {
        var combinedPassword = String.Concat(p, s);
        var sha256 = new SHA512Managed();
        var bytes = UTF8Encoding.UTF8.GetBytes(combinedPassword);
        var hash = sha256.ComputeHash(bytes);
        return Convert.ToBase64String(hash);
    }

    public static String GetRandomSalt()
    {
        var random = new RNGCryptoServiceProvider();
        var salt = new Byte[1024];
        random.GetBytes(salt);
        return Convert.ToBase64String(salt);
    }

I am open to other suggestions in general.
","
I am open to other suggestions in general.

I will preface this post by making a broad point but I believe it is widely enough held to not constitute an ""opinion"".
If you are doing this ""to secure your app"", stop now. There are much better solutions like BCrypt, Scrypt and Argon which take care of all this for you and protect against threats that most people haven't even considered. These of course include salt(s) internally, so understanding what they are for and how they work is still a useful endeavour. For approximately the same amount of code, you will be handling the credentials a lot more securely than the posted code indicates. Google them for details.
If you are just doing this as ""an exercise to understand how it all works"", continue reading.
So what is salt exactly and why is it useful for protecting security?
Salt is additional entropy that is not part of the user's password, but is instead known to or invented by the server at the time the password is hashed and stored. The generated salt must be known to the server when validating your password. There are many ways it can be stored. It may be the first/last/middle/every8th/whatever n characters of the password hash stored in the database. It may have its own separate field. It may even be based on other facts immutable like Primary Keys of the user record itself.
The threat model that this protects against could be described like this. Consider a database that was compromised and now held by a malicious actor. The challenge is, given the malicious actor holds the credentials (in hashed form), can we stop them from guessing people's password (at least without trying some sort of dictionary or brute force guess attack.
If you thought hashing solved that problem, then I will give two possible scenarios:
1. Two users may use the same password
If the password is hashed but not salted, then two users who choose the same password will end up with the same hash. And even if the password isn't ""terrible"", the other user may reveal your password by whatever they entered as the ""Password Hint"". If the passwords were salted, then the fact that the password hint gave away the other user's password doesn't leak the fact that the same password would work on your account.
2. Rainbow tables
If you have enough time and compute power, you can generate (or download) a set of rainbow tables. These are basically key-value pairs, where the key is the hash and the value is the original password. These are generated in reverse. That is to say, take a string, hash it, add the hash as the key and the original string as the target. To lookup, you simply lookup the hash key and see what value comes back. Near instantly. With a long enough original string though, it won't have been pre-computed so it won't have a hit in the rainbow table. If I know the salt you are using and the hashing algorithm, I can still do my own dictionary attack or brute force attack, but suddenly I am required to try each guess in turn until I am lucky, so if your password is good, I will not find it in ""reasonable time"".
The precise answer to your posed question 

How I can compare that password is correct if I use Random salt?

Your verification process needs to know or derive exactly what exact salt value was chosen for the hash process. The salt may be randomly generated, but if so it needs to record the exact value used.
","75","<c#><database><hash><passwords><salt>","0","2","2","2019-01-25 02:13:26","","1","1","","","","2019-01-23 08:55:56",""
"22454450","My login is all working apart from not redirecting to another page","Ok so my login script recognises a user that does not exist - its recognises when the password is incorrect - it moves forward when the correct information is submitted but not to the correct page despite me telling it too...
login form:
<form name=""login"" action=""login.php"" method=""post"">
    Username: <input type=""text"" name=""username"" />
    Password: <input type=""password"" name=""password"" />
    <input type=""submit"" value=""Login"" />
</form>

Login script:
<?
session_start(); //must call session_start before using any $_SESSION variables
$username = $_POST['username'];
$password = $_POST['password'];

$dbhost = 'localhost';
$dbname = '******';
$dbuser = '******';
$dbpass = '******'; //not really
$conn = mysql_connect($dbhost, $dbuser, $dbpass);
mysql_select_db($dbname, $conn);


$username = mysql_real_escape_string($username);
$query = ""SELECT password, salt
        FROM users
        WHERE username = '$username';"";
$result = mysql_query($query);
if(mysql_num_rows($result) < 1) //no such user exists
{
    header('Location: login_form.php');
    die();
}
$userData = mysql_fetch_array($result, MYSQL_ASSOC);
$hash = hash('sha256', $userData['salt'] . hash('sha256', $password) );
if($hash != $userData['password']) //incorrect password
{
    header('Location: login_form.php');
    die();
}
else
{
    validateUser(); //sets the session data for this user
}


header('Location: membersonly.php');


?>

","So I rewrote your code a little bit. I did a few things:

I converted your MySQL to MySQLi. MySQL is depreciated and will be removed. I used OOP style MySQLi, but you can do procedural style.
I changed your query string. Sometimes SQL can get picky about formatting and sql really likes when you use the '`' character.
Next I separated out your large hash statement. This was for readability.
I also added an ""isset"" check for the salt and the password. This check just confirms that these values actually exist.
I've added the ""error"" variable for ""login_form.php"" I would remove it at release, but it gives you as the programmer a good chance to see where your code seems to be going wrong.
I've now also added ""true"" and ""303"" to your header area where you set the location. true is a boolean about whether or not it should override a previous set header value for Location. 303 tells the browser that it should ""see other""
Finally I added some extra headers designed to remove any chance of caching. While I do not know of any browsers that would cache your page that requests a redirect, it could happen seeing as it's all about how the browser handles it.

$username = $_POST['username'];
$password = $_POST['password'];

$dbhost = 'localhost';
$dbname = '******';
$dbuser = '******';
$dbpass = '******'; //not really

$sql_connection = new mysqli($dbhost, $dbuser, $dbpass, $dbname);

$username = mysql_real_escape_string($username);
$query = ""SELECT password, salt FROM users WHERE username = '$username';"";
$result = $sql_connection->query($query);
if($result->num_rows != 1) //no such user exists{
    header(""Location: login_form.php"");
    die();
}
$userData = $result->fetch_assoc();

if(!isset($userData['salt']) || !isset($userData['password'])){
    header(""Location: login_form.php?error=MissingInformation"");
    die();
}

$salt = $userData['salt'];
$password_hash = hash('sha256', $password);
$hash = hash('sha256', $salt . $password_hash);
$correct_password = $userData['password'];
if($hash != $correct_password){ // incorrect
    header('Location: login_form.php');
    die();
}else{
    validateUser(); //sets the session data for this user
}

header(""Location: membersonly.php"", true, 303);


Hope it helps!
Edit:
I would also recommend removing the redirect and looking at the result to make sure it's not returning a warning. If it's just a warning, your script will still execute and it will redirect, but you'll never see the error.
","75","<php><login><hash><salt>","0","0","1","2014-03-21 02:38:10","22549094","3","","","","","2014-03-17 12:36:41",""
"24028191","General Java API for password mutate / hash / digest","My web application is secured with salted, digested passwords using container managed authentication.  I'd like to reduce the coupling with my current container by having a service in JNDI that handles the password mutation / verification.  I was after something like this:
/**
 * A service for mutating passwords with salt.
 * Note that the same password should yield different mutations every time.
 */
public interface PasswordMutationService {
    /**
     * Mutates the given password for storage purposes.
     * The 'salt' must be coded into the result so that it can be extracted later.
     */
    String mutatePassword(String password);

    /**
     * Confirm the given password was used to create the given stored mutation.
     *
     * @param candidatePassword     The password supplied by a user that wants to be authenticated.
     * @param storedMutatedPassword A mutation of the users password retrieved from storage.
     */
    boolean verifyMutatedPassword(String candidatePassword, String storedMutatedPassword);
}

Do you know of an API that supplies this interface so I don't have to write and manage my own?  I have a hard time believing it's not in Java EE somewhere.
NOTE: I'm not after a Tomcat Realm, that has already been done.  Nor do I need the implementation, that is done too.
","To decouple my application from the password digest implementation I really only need one method:
String mutatePassword(String password)

The container plugin can be coupled to the digest implementation without too much harm so it does not need 'verifyMutatedPassword()' to be on an interface.
After browsing some JDK7 API's I found something that could do the job (if you're not easily offended):
public interface Provider<T> {
  public T invoke(T request);
}

This means my application can tap into password mutation with:
InitialContext ctx = new InitialContext();
passwordMutator = (Provider<String>) ctx.lookup(""java:comp/env/bean/appPasswordMutator"");

The tomcat container config for password mutation and security realm is:
<Resource name=""bean/appPasswordMutator"" auth=""Container""
          factory=""org.apache.naming.factory.BeanFactory""
          type=""pkg.PasswordMutator""
          seedNumBytes=""8""
          keyNumBits=""160""
          digestIterationCount=""10000""
          singleton=""true""/>

<Realm className=""pkg.PasswordMutationRealm"" 
       userCredCol=""usercred""
       passwordMutatorName=""bean/appPasswordMutator"" 
       localPasswordMutator=""true""
       localDataSource=""true""
       dataSourceName=""jdbc/appDb""
       userTable=""usercred""
       userNameCol=""username""
       userRoleTable=""userrole""
       roleNameCol=""userrole""/>

A working demo is available from my SVN repo at:
https://subversion.assembla.com/svn/freshcode_public/learn/tomcat-maven-plugin
(See READ_ME.txt file)
","74","<java><api><passwords><salt><digest>","0","0","1","2014-07-29 20:07:27","","4","1","472792","","2014-07-29 20:07:27","2014-06-04 02:51:24",""
"58384566","How to create sha256 hash with salt","I would like to migrate hash generation to BigQuery which has SHA256, but does not have salt as parameter. 
For example in R I can do something like this:
library(openssl)
sha256(""test@gmail.com"", key = ""111"")
# [1] ""172f052058445afd9fe3afce05bfec573b5bb4c659bfd4cfc69a59d1597a0031""

Update
same with python based on an answer here:
import hmac
import hashlib
print(hmac.new(b""111"", b""test@gmail.com"", hashlib.sha256).hexdigest())
# 172f052058445afd9fe3afce05bfec573b5bb4c659bfd4cfc69a59d1597a0031

","I hope by ""migrate"", you mean to migrate the logic not the exact byte-wise output from R Sha256() function.
R is using hmacsha256 and looking at Microsoft's HMACSHA256 class, it can be roughly expressed as:

The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 256 bits in length.

create temp function hmacsha256(content STRING, key STRING)
AS (SHA256(
     CONCAT(
       TO_HEX(SHA256(CONCAT(content, key))), key)
       ));

SELECT TO_HEX(hmacsha256(""test@gmail.com"", ""111""));

Output:
+------------------------------------------------------------------+
|                               f0_                                |
+------------------------------------------------------------------+
| 4010f74e5c69ddbe1e36975f7cb8be64bcfd1203dbc8e009b29d7a12a8bf5fef |
+------------------------------------------------------------------+

","74","<hash><google-bigquery><salt>","2","2","2","2019-10-15 23:55:42","","0","","599911","","2019-10-15 13:14:51","2019-10-14 22:00:17",""
"58384566","How to create sha256 hash with salt","I would like to migrate hash generation to BigQuery which has SHA256, but does not have salt as parameter. 
For example in R I can do something like this:
library(openssl)
sha256(""test@gmail.com"", key = ""111"")
# [1] ""172f052058445afd9fe3afce05bfec573b5bb4c659bfd4cfc69a59d1597a0031""

Update
same with python based on an answer here:
import hmac
import hashlib
print(hmac.new(b""111"", b""test@gmail.com"", hashlib.sha256).hexdigest())
# 172f052058445afd9fe3afce05bfec573b5bb4c659bfd4cfc69a59d1597a0031

","With the help of @Yun I have managed to solve this.
To apply HMAC you will need to include external library file in the example function bellow.
CREATE TEMP FUNCTION USER_HASH(message STRING, secret STRING)
  RETURNS STRING
  LANGUAGE js
  OPTIONS (
    -- copy this Forge library file to Storage:
    -- https://cdn.jsdelivr.net/npm/node-forge@0.7.0/dist/forge.min.js
    -- @see https://github.com/digitalbazaar/forge
    library=[""gs://.../forge.min.js""]
  )
  AS
""""""
  var hmac = forge.hmac.create();
  hmac.start('sha256', secret);
  hmac.update(message);
  return hmac.digest().toHex();
"""""";


SELECT USER_HASH(""test@gmail.com"", ""111"");

-- Row  f0_
-- 1    172f052058445afd9fe3afce05bfec573b5bb4c659bfd4cfc69a59d1597a0031

","74","<hash><google-bigquery><salt>","2","1","2","2019-10-15 23:55:42","","0","","599911","","2019-10-15 13:14:51","2019-10-14 22:00:17",""
"43573482","WordPress user database to Node sqlite database","I am in the processing of importing a WordPress user database (titled wp_dnsy_users) to a new sqlite database used in Node js. My question is will I / how will I be able to verify passwords and figure out which node crypto or other algorithm to use?
","Latest versions of WordPress are using Portable PHP password hashing framework for password hashes. 
You can find node.js implementation of that framework here: https://github.com/jhurliman/node-phpass
","74","<node.js><wordpress><sqlite><hash><salt>","0","0","1","2017-04-24 05:38:19","","0","","","","","2017-04-23 16:09:15",""
"46749023","ImportError at /admin/ No module named 'honeywordHasher.hashers.honeywordgen'; 'honeywordHasher.hashers' is not a package","I am trying to make my own customize password hasher and i still cannot manage to import it because of this error . How to fix this error?
Complete traceback:
During handling of the above exception (module 'honeywordHasher.hashers' has no attribute '__path__'), another exception occurred:

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\core\handlers\exception.py"" in inner
  41.             response = get_response(request)

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\core\handlers\base.py"" in _get_response
  217.                 response = self.process_exception_by_middleware(e, request)

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\core\handlers\base.py"" in _get_response
  215.                 response = response.render()

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\template\response.py"" in render
  107.             self.content = self.rendered_content

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\template\response.py"" in rendered_content
  84.         content = template.render(context, self._request)

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\template\backends\django.py"" in render
  66.             return self.template.render(context)

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\template\base.py"" in render
  207.                     return self._render(context)

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\template\base.py"" in _render
  199.         return self.nodelist.render(context)

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\template\base.py"" in render
  990.                 bit = node.render_annotated(context)

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\template\base.py"" in render_annotated
  957.             return self.render(context)

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\template\loader_tags.py"" in render
  177.             return compiled_parent._render(context)

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\template\base.py"" in _render
  199.         return self.nodelist.render(context)

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\template\base.py"" in render
  990.                 bit = node.render_annotated(context)

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\template\base.py"" in render_annotated
  957.             return self.render(context)

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\template\loader_tags.py"" in render
  177.             return compiled_parent._render(context)

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\template\base.py"" in _render
  199.         return self.nodelist.render(context)

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\template\base.py"" in render
  990.                 bit = node.render_annotated(context)

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\template\base.py"" in render_annotated
  957.             return self.render(context)

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\template\defaulttags.py"" in render
  322.                 return nodelist.render(context)

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\template\base.py"" in render
  990.                 bit = node.render_annotated(context)

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\template\base.py"" in render_annotated
  957.             return self.render(context)

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\template\loader_tags.py"" in render
  72.                 result = block.nodelist.render(context)

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\template\base.py"" in render
  990.                 bit = node.render_annotated(context)

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\template\base.py"" in render_annotated
  957.             return self.render(context)

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\template\defaulttags.py"" in render
  322.                 return nodelist.render(context)

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\template\base.py"" in render
  990.                 bit = node.render_annotated(context)

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\template\base.py"" in render_annotated
  957.             return self.render(context)

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\template\loader_tags.py"" in render
  72.                 result = block.nodelist.render(context)

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\template\base.py"" in render
  990.                 bit = node.render_annotated(context)

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\template\base.py"" in render_annotated
  957.             return self.render(context)

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\template\defaulttags.py"" in render
  315.                     match = condition.eval(context)

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\template\defaulttags.py"" in eval
  892.         return self.value.resolve(context, ignore_failures=True)

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\template\base.py"" in resolve
  708.                 obj = self.var.resolve(context)

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\template\base.py"" in resolve
  849.             value = self._resolve_lookup(context)

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\template\base.py"" in _resolve_lookup
  911.                             current = current()

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\contrib\auth\base_user.py"" in has_usable_password
  125.         return is_password_usable(self.password)

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\contrib\auth\hashers.py"" in is_password_usable
  30.         identify_hasher(encoded)

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\contrib\auth\hashers.py"" in identify_hasher
  154.     return get_hasher(algorithm)

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\contrib\auth\hashers.py"" in get_hasher
  127.         hashers = get_hashers_by_algorithm()

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\contrib\auth\hashers.py"" in get_hashers_by_algorithm
  102.     return {hasher.algorithm: hasher for hasher in get_hashers()}

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\contrib\auth\hashers.py"" in get_hashers
  91.         hasher_cls = import_string(hasher_path)

File ""C:\Users\Adila\Envs\tryFOUR\lib\site-packages\django\utils\module_loading.py"" in import_string
  20.     module = import_module(module_path)

File ""C:\Users\Adila\Envs\tryFOUR\lib\importlib\__init__.py"" in import_module
  126.     return _bootstrap._gcd_import(name[level:], package, level)

Exception Type: ImportError at /admin/
Exception Value: No module named 'honeywordHasher.hashers.honeywordgen'; 'honeywordHasher.hashers' is not a package

The password hasher app name is honeywordHasher. 
This is my settings.py:
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'honeywordHasher.hashers.honeywordgen.honeywordgen',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    'django.contrib.auth.hashers.BCryptPasswordHasher',
]

I follow this as guidelines, and I am stuck at settings.py.I still cannot figure out the reason.
","","74","<python><django><passwords><salt><password-hash>","0","","0","2017-10-15 00:43:17","","6","","8967612","","2017-10-15 00:43:17","2017-10-14 20:26:52",""
"16832785","Create new salt when updating user record","When updating a user record (id, username, password, salt), is it wise to also create a new salt for this record or is there no security disadvantage in always using the same salt no matter how often the user changes his password?
","There is no (or at best minimal) security advantage to changing the user's salt so long as each user's salt is different and the user is not being specifically targeted.  
The point of the salt is 1) to make pre-computing possible hashes harder and 2) to keep it from being apparent that different users are using the same password.  Neither requires that you change the salt.
That said, it certainly doesn't hurt to change the salt as long as you make sure the new salt is unpredictable.  
","74","<passwords><salt>","0","0","3","2013-05-30 13:17:43","16832909","0","","","","","2013-05-30 09:41:58",""
"16832785","Create new salt when updating user record","When updating a user record (id, username, password, salt), is it wise to also create a new salt for this record or is there no security disadvantage in always using the same salt no matter how often the user changes his password?
","If you change the user salt, when the poor user change his username or anything else except the password, you will endup with a wrong hashed-password salt combination.
There is no reason to change the user salt as described from Old Pro but if you want to change it some time do it only when the user change his password.
","74","<passwords><salt>","0","0","3","2013-05-30 13:17:43","16832909","0","","","","","2013-05-30 09:41:58",""
"16832785","Create new salt when updating user record","When updating a user record (id, username, password, salt), is it wise to also create a new salt for this record or is there no security disadvantage in always using the same salt no matter how often the user changes his password?
","Are you using the salt for other entries than the password? In this case you could not change the salt without rehashing all entries using this salt. There are easier solutions than storing a salt per user though.
Most implementations of hash functions for passwords (for example PHP's BCrypt implementation), will automatically generate a new secure salt per hash-value, and will return the used salt as part of the hash-value. So there is no need to store the salt separately, and every time you calculate a new hash-value, the function will generate a new salt anyway.
So yes, it is a good thing to create a new salt for every hash calculation, especially because it can be even easier than storing the salt separately.
","74","<passwords><salt>","0","0","3","2013-05-30 13:17:43","16832909","0","","","","","2013-05-30 09:41:58",""
"24354578","Login security - client side salt - How are people creating this per-user public parameter?","Because the client side salt value should be a per-user parameter and it's publicly visible on the client side (I don't see a way to hide it), how are people determining what this value should be?  I'm not asking HOW to do it (i.e js library, etc.).  I know that my db and its salt value has to be the same as the client side salt but where are you coming up with this value?  Some portion of the username?  This is the only value I can see being consistent between the client side and the db, but I'm not sure.  Any thoughts?  Thanks for the help!
","","73","<security><client><salt>","0","","0","2014-06-22 18:52:30","","5","","","","","2014-06-22 18:52:30",""
"47796570","Jinja template for salt","Elasticsearch HEAP calculation is IF MEM/2 > 31 SET ES_HEAP_SIZE=31 if not SET MEM/2.
{% set ES_HEAP_SIZE_RETURN={{ (0.51 * salt['grains.get']('mem_total'))|round|int }} %}

{% if ES_HEAP_SIZE_RETURN > 31744 %}
  {% set ES_HEAP_SIZE = '31744m' %}
    {% else %}
  {% set ES_HEAP_SIZE = [ ES_HEAP_SIZE_RETURN , ""m"" ] %}
{% endif %}

FINALLY it has to set ES_HEAP_SIZE in /etc/defaults/elasticsearch as per above calculation. 
It doesn't work. 
","It worked, small changes to above one. Below one works charm.
{%- set ES_HEAP_SIZE_RETURN = (0.51 * salt['grains.get']('mem_total'))|round|int  %}

{% if ES_HEAP_SIZE_RETURN > 31744 %}  {% set ES_HEAP_SIZE = '31744m' %}   {% else %}  {% set ES_HEAP_SIZE = [ ES_HEAP_SIZE_RETURN , ""m"" ] %} {% endif %}

ES_HEAP_SIZE={{ES_HEAP_SIZE}}

","71","<elasticsearch><jinja2><salt>","1","0","1","2017-12-13 16:11:12","","0","","","","","2017-12-13 15:20:55",""
"56859467","decrypt password using salt","Code Here is encrypting password but How I decrypt it or Compare it  to login in laravel  
Code where used
   getsql(md5($_POST['regpassword'] . SALT), ""default""),

","md5 is hashing and it's not reversible you can't decrypt it you can only hash the password using the same algorithm and salt then compare the results to make sure that it's the correct password   
","71","<php><salt><password-encryption>","-6","0","2","2019-07-04 23:59:17","","10","","11614091","","2019-07-02 20:15:19","2019-07-02 20:13:53",""
"56859467","decrypt password using salt","Code Here is encrypting password but How I decrypt it or Compare it  to login in laravel  
Code where used
   getsql(md5($_POST['regpassword'] . SALT), ""default""),

","When you're validating the password, you can do:
$hashed = md5($_POST['password'] . SALT);
$sql = ""SELECT * FROM users WHERE username = '{$_POST['username']}' AND password = '$hashed'"";

I've simplified this to show the important part of how to check the password, in reality you should use a prepared statement to prevent SQL injection.
Another way is to fetch the hashed password from the database, then compare it with the hashed+salted password that was given:
$hashed = md5($_POST['password'] . SALT);
$sql = ""SELECT password FROM users WHERE username = '{$_POST['username']}'"";
$result = mysqli_query($conn, $sql);
$row = mysqli_fetch_assoc($result);
if ($row && $hashed == $row['password']) {
    // user is validated
}

If you fix your method of storing passwords to use a more reasonable method than a static SALT, this second method can easily be updated. Instead of $hashed == $row['password'] you would use password_verify($_POST['password'], $row['password']).
","71","<php><salt><password-encryption>","-6","0","2","2019-07-04 23:59:17","","10","","11614091","","2019-07-02 20:15:19","2019-07-02 20:13:53",""
"14268258","I can't get my php encryption to work","The script is surpose to encrypt a password so that it is much harder to use rainbowtables on it and there for people cannot hack the server so easily, but i cant seem to get it to work so i hope one of you can help me.
<?php

function enc($string){
    $salt = ""randomsalt"";
    $hash = sha1(md5($salt.$string)) . $md5($string) . sha1(md5(md5($string)));
    return $hash;   
}

echo enc('password');

?>

","$md5( $string)

breaks your code. Remove the $
You should use something like bcrypt and different salts for all your users.
","71","<php><function><encryption><salt>","0","0","2","2013-01-10 22:24:43","14268377","6","","206403","","2013-01-10 22:24:43","2013-01-10 22:15:00",""
"14268258","I can't get my php encryption to work","The script is surpose to encrypt a password so that it is much harder to use rainbowtables on it and there for people cannot hack the server so easily, but i cant seem to get it to work so i hope one of you can help me.
<?php

function enc($string){
    $salt = ""randomsalt"";
    $hash = sha1(md5($salt.$string)) . $md5($string) . sha1(md5(md5($string)));
    return $hash;   
}

echo enc('password');

?>

","Listen to the comments, but you also have a typo:
$md5($string) needs to be md5($string) (it's not a variable, it shouldn't have a $ in front of it).
It's true that you're not encrypting here, but that's just a nomenclature issue (you're hashing it, which is what you want to do)... however, your salt probably shouldn't be a fixed string... it should vary by user if you really want a strong hash. There's a lot more to say on this subject (md5 and SHA1 aren't the best hash algorithms for passwords as there are too many rainbow tables for both and they're too fast to execute), but you can read up here and here for bcrypt info.
","71","<php><function><encryption><salt>","0","1","2","2013-01-10 22:24:43","14268377","6","","206403","","2013-01-10 22:24:43","2013-01-10 22:15:00",""
"48954940","Symfony : listener (or something else) to add salt in password when login_check","When a user registers, I add a salt in the password :
$user->setPassword(
    $this->passwordEncoder->encodePassword(
        $user,
        $newPassword.$user->getSalt()
    )
);

But now, how can I add this same salt in the user password when he logs in ?
FYI, I don't have a controller with loginAction ! My application is built with reactJs and Symfony Api. So, I just have a login_check.
","The encoder has a isPasswordValid method:
$this->passwordEncoder->isPasswordValid(
    $user->getPassword(), // the user’s encrypted password in the DB
    $password,            // cleartext password as provided through UI or API
    $user->getSalt()      // the salt stored in the DB
);

Attention: This method does not throw an exception, but rather return a boolean. If it returns false, you must handle it appropriately, e.g. throw an exception yourself.
","70","<symfony><login><passwords><salt>","-1","2","2","2018-02-24 09:19:48","","4","","3908235","","2018-02-23 20:06:57","2018-02-23 19:28:52",""
"48954940","Symfony : listener (or something else) to add salt in password when login_check","When a user registers, I add a salt in the password :
$user->setPassword(
    $this->passwordEncoder->encodePassword(
        $user,
        $newPassword.$user->getSalt()
    )
);

But now, how can I add this same salt in the user password when he logs in ?
FYI, I don't have a controller with loginAction ! My application is built with reactJs and Symfony Api. So, I just have a login_check.
","This is mine worked example Sf4 (I used on custom UserProvider and ApiPlatform)
class PasswordSubscriber implements EventSubscriber{
 /**
 * @var UserPasswordEncoderInterface $encoder
 */
private $encoder;

public function __construct(UserPasswordEncoderInterface $encoder)
{
    $this->encoder = $encoder;
}

/**
 * @return array
 */
public function getSubscribedEvents()
{
    return [
        'prePersist' => 'encodePassword',
        'preUpdate'  => 'encodePassword',
    ];
}

/**
 * @param LifecycleEventArgs $args
 */
public function encodePassword(LifecycleEventArgs $args)
{
    $entity = $args->getEntity();
    if (!$entity instanceof User) {
        return;
    }
    if (!$entity->getPlainPassword()) {
        return;
    }
    $entity->setPassword($this->encoder->encodePassword($entity, $entity->getPlainPassword()));
}

}
P.S You no need to worry how encode password and check user
Just define firewall
 firewalls:
    dev:
        pattern: ^/(_(profiler|wdt)|css|images|js)/
        security: false
    docs:
        pattern:    ^/docs
        http_basic: ~
        provider: user_provider
    login:
        pattern:  ^/login
        stateless: true
        anonymous: true
        provider: user_provider
        json_login:
            check_path: /login_check
            username_path: username
            password_path: password
            success_handler: lexik_jwt_authentication.handler.authentication_success
            failure_handler: lexik_jwt_authentication.handler.authentication_failure


And you can send post /login_check 

{ ""username"":""username"",""password"":""password""}

How to Build a JSON Authentication Endpoint
","70","<symfony><login><passwords><salt>","-1","0","2","2018-02-24 09:19:48","","4","","3908235","","2018-02-23 20:06:57","2018-02-23 19:28:52",""
"50410095","Standalone minion to Master minion","I have a host with standalone minion configured. It has all the required configurations in /srv/salt. Executing it using salt-call, and it works as expected. Now I wanted have a master to have control over this minion. 
So I have created a salt master in one another host, and updated the /etc/salt/minion configuration file in the minion host to connect to master.Then restarted the minion and accepted key in server. 
Now I could do some basic checks like salt 'minion-host' test.ping . But salt 'minion-host' state.highstate is failing with minion not responding. I could I execute the minion with its configuration from the master.
What is the proper way to execute the salt-call over minion, using the available minion configurations inside minion host.
","If salt minion test.ping works that's a good start, you could also use:
salt-run manage.up

That should give a list of minions currently up.
Keep in mind that the minion needs to run the salt agent (https://docs.saltstack.com/en/getstarted/system/communication.html)
Test with this:
salt minion state.highstate test=True

Or get a more verbose output using:
salt minion state.highstate -l debug

","70","<salt><salt-stack>","0","0","1","2018-05-20 19:39:50","","0","","","","","2018-05-18 11:14:54",""
"24097627","Logging in issues with salt and hash","On my registration page I have used an SHA1 has and a salt to store my passwords in the database. I think I have done this correctly as when I check the database it is has with the salt included. This is how I have done it.
$newPassword = $_POST['Password'] ;
  if (!empty($newPassword)) {
  //Escape bad characters
  //$newuser = mysql_real_escape_string($newuser);
  //remove leading and trailing whitespace
  $newPassword = trim($newPassword);
  $newPassword = sha1($newPassword);
  $salt = '-45dfeHK/__yu349@-/klF21-1_\/4JkUP/4';

}
else die (""ERROR: Enter a Password"");

and input is
    $query = ""INSERT INTO members (memberFirstname, memberSecondname, memberEmailaddress, memberPassword, memberAddress, memberPostcode) VALUES ('$newFirstName', '$newSecondName', '$newEmailAddress', '$newPassword$salt', '$newAddress', '$newPostcode')"";

My problem lays when I try to login. Im unsure on how remove the salt and unhash the password (if that is what needs to be done). I can enter the email address and paste the hash and salt into the password field and can successfully login.
This is my script to log in.
<?php
include 'db.inc';
session_start();
$UserEmail =$_POST[""EmailAddress""];
 $UserPassword =$_POST[""Password""];
 $query = ""SELECT * FROM members WHERE memberEmailaddress = '$UserEmail' 
         AND  memberPassword = '$UserPassword' ""; 

$connection = mysql_connect($hostname, $username, $password) or die (""Unable to connect!""); 
mysql_select_db($databaseName) or die (""Unable to select database!""); 
$result = mysql_query($query) or die (""Error in query: $query. "".mysql_error()); 
// see if any rows were returned 
if (mysql_num_rows($result) > 0) { 
   $_SESSION[""authenticatedUser""] = $UserEmail;
     // Relocate to the logged-in page
    header(""Location: Index.php"");
} 
else 
  {
   $_SESSION[""message""] = ""Could not connect log in as $UserEmail "" ;
   header(""Location: Login.php"");
  }    
mysql_free_result($result); 
mysql_close($connection); 

?>

","There are several problems with your approach. First you don't use the salt at all, it will be stored but not used. Second a salt should be unique for each password, in your case a static salt is used, this is actually a pepper not a salt. Further you use a fast hash algorithm, but this can be brute-forced ways too fast, instead you should switch to a hash algorithm with a cost factor like BCrypt or PBKDF2.
PHP already has a good function to hash passwords (maybe you need the compatibility pack):
// Hash a new password for storing in the database.
// The function automatically generates a cryptographically safe salt.
$hashToStoreInDb = password_hash($password, PASSWORD_BCRYPT);

// Check if the hash of the entered login password, matches the stored hash.
// The salt and the cost factor will be extracted from $existingHashFromDb.
$isPasswordCorrect = password_verify($password, $existingHashFromDb);

Because this function generates a safe salt on its own and attaches it to the resulting hash-value, you cannot check the password with SQL directly. Instead you do a query to get the stored hash (by username), then you can verify the entered password with the stored one. I wrote a tutorial where i tried to explain the important points more indepth.
","70","<php><login><hash><salt>","-1","1","1","2014-06-10 11:26:15","24139800","8","0","3442510","","2014-06-07 13:22:49","2014-06-07 13:16:59",""
"48095788","Reason for salting a password for webservice","I have very basic question related to user management and in particular storing hashed passwords.
I read few pages (like https://wiki.python.org/moin/Md5Passwords ).
The way I understand hashing is this:

password provided by user is hashed (with whatever function) one way.
nobody (including user/admin) is able to see the password.
when user logs in - the string provided by him is hashed to see if it matches stored hashed password.

That's all clear, however I am not sure what with 'salt' in hashing.
I read os.urandom (Python) is good to create good salt:
https://crackstation.net/hashing-security.htm
What I am not sure is how to work with this added ""salt""
If I hash user password with salt and its one way. The next time when user log in he knows only password and not salt. From this I assume that ""salt"" generated for this user needs to be stored somewhere. Otherwise it will not make sense. But on the other hand if somebody gets access to DB then will see ""salt"" and hashed password. In such case ""salt"" does not add much value (its pretty much the same as hashing pure password). So maybe the ""salt"" is just to prevent protection on front end (against brute force).
Can somebody provide me a hint how to work with salt? Is my understanding correct. Do I need to store ""salt"" somewhere?
Before I posted this question I found this:
Should the Salt for a password Hash be "hashed" also?
what is the added value of the salt?
if I write web service I can block each log in after 3 failed attempts.
Nobody on the front end is able to see hashed values. Nobody can use brute force (this might be only DoS since 3 failed log ins will block user). The hacker will need have access to DB and see hashed passwords. But if he has, he will see ""salt"".
","Salt is used to prevent a hacker from reversing the password hashes into passwords. So here we assume that somewhow the hacker has access to the database.
Without salt
Let us first assume the scenario without salt. In that case the table looks like:
user | md5 password (first 6 chars)
-------------------------------
   1 | 1932ff
   2 | d3b073

(we here make the situation simpler than it is in reality)
The hacker of course wants to know what the passwords behind d3b073 and 1932ff are. A hash function is one directional in the sense that we can hash a password very fast, but unhashing it will - given it is a good hashing function - take a very long time, after guessing a huge amount of passwords.
So there is not much hope to easily retrieve the possible password(s) behind d3b073. But we can easily find a list of the 100'000 most popular passwords, and calculate the MD5 hash of all these passwords. Such list could look like:
password | md5 (first 6 characters)
--------------------------------------------
foo      | d3b073
bar      | c157a7

So apparently user 2 has used foo as password. The password of user 1 is unknown to us (but we know it is not foo or bar).
Now the point is that we can construct such table once and then use it to crack all passwords of all the users. Constructing such table for 100'000 passwords might perhaps take a few hours, but then we can easily retrieve all passwords. So a hacker can construct (or download) such table (there are more efficient ways, for instance with rainbow tables), and then use it each time he/she hacks a website and then obtains the passwords of all users.
With salt
If we however use salting, the table could look like this:
user | salt   | hashed password
-------------------------------
   1 | a91f40 | 1a604e
   2 | c2a67c | b36232

So here if the password of user 2 is foo, then we calculate the hash of fooc2a67c (or we use another way to combine the salt and the password) and store this into the database.
The point is that it is very hard to guess the password, since b36232 is not the hash of foo, but of fooc2a67c and the salt is typically something (pseudo)-random. We can of course again construct the most popular 100'000 passwords with salt c2a67c appended to it, but since we can not know the salt in advance, we can not create this table only once. Even if we are lucky and already constructed the table for salt c2a67c, it will not help us with hacking the password of user 1, since user 1 has a different salt.
So the only way to resolve this, is by constructing a reverse hash lookup table, for every user. Since it is usually very expensive to construct such table once, it will not be easy to calculate such table for every user.
We might of course decide to calculate all hashes of all possible salts, like for instance:
password  | md5 (first 6 characters)
---------------------------------------------
foo000000 | 367390
foo000001 | eca8ea
foo000002 | 6eb7bf
foo000003 | 7906b1
foo000004 | 0e9f0c
foo000005 | 0bfb11
...       | ...

But as you can see, the size of such table would grow to gigantic sizes. Furthermore it would take thousands of years. Even if we add only one hexadecimal character as salt, the size of the table would scale 16 times. Yes there are some techniques to reduce the amount of time and space for such table, but by increasing the ""password space"", the problem to hack passwords, will definitely be much harder. Furthermore salt is usally a signifcant amount of characters (or bytes) long making it way more harder than just 16 times more.
Basically salt acts as a way to enlarge the password space. Even if you enter the very same password on two websites, the personal salt of the websites will (close to certainty) be unique, and therefore the hash will be unique as well.
","70","<hash><passwords><salt>","2","1","1","2018-01-12 09:34:18","48100304","8","","1615903","","2018-01-12 09:34:18","2018-01-04 12:53:44",""
"11027652","can old user login into new wordpress install","I have a running website on wordpress which has been hacked, some file were changed by the hacker including wp-config.php file. Now i want to install new version of wordpress, installing new wordpress means new Keys and salts. Can old user login into my new wordpress site with the same old password?
","If he changes the wp-congfig.php file, then he has the access to your server by cpanel or ftp. So by changing the WordPress Username/password or re-installing WordPress will not affect the hacker. Because wp-config.php file is in the root folder, not on theme folder.
Solution:
Change all the passwords of cPanel and FTPs.
Once you re-installed a fresh WordPress version and using the same old wp database, then all your old WordPress users can login to your website with old username and Password. 
","69","<wordpress><login><salt><wordpress-login>","0","1","1","2019-05-20 06:42:59","11033369","0","","","","","2012-06-14 06:16:55",""
"40558646","Gson Parsing error with salt-net-api","Trying to parse the output of Salt CherryPy REST interface. The Json is provided as below,
{""info"": [{""Function"": ""cmd.run"", ""jid"": ""20161111182415841377"", ""Target"": ""yesMyMaster"", ""Target-type"": ""glob"", ""User"": ""saltdev"", ""StartTime"": ""2016, Nov 11 18:24:15.841377"", ""Arguments"": [""echo HELLO""], ""Minions"": [""yesMyMaster""], ""Result"": {}}], ""return"": [{}]}

This results in the following error:
com.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected BEGIN_OBJECT but was STRING at line 1 column 147 path $.info[0].StartTime

at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:224)
at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:129)
at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:220)
at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.read(TypeAdapterRuntimeTypeWrapper.java:41)
at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:82)
at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:61)
at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:129)
at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:220)
at com.google.gson.Gson.fromJson(Gson.java:887)
at com.google.gson.Gson.fromJson(Gson.java:852)
at com.google.gson.Gson.fromJson(Gson.java:801)

The code is very simple, nothing special.
    Gson gson = new Gson();

    ResultInfoSet resultInfos = gson.fromJson(json, ResultInfoSet.class);

ResultInfo is a class from Salt-Net-Api
Have anyone faced similar error before with Gson?
Update
If I remove ""StartTime"": ""2016, Nov 11 18:24:15.841377"" from json, then Gson works fine. 
","Set the date format as mentioned below and define the field as Date in POJO class.
Gson gson = new GsonBuilder()
                .setDateFormat(""yyyy, MMM dd HH:mm:ss.SSSSSS"") 
                .setPrettyPrinting()
                .create();

Field definition in POJO:-
@SerializedName(""StartTime"")
    private Date startTime;

","69","<json><gson><salt>","0","0","2","2016-11-13 16:27:35","","0","","1304351","","2016-11-12 01:56:50","2016-11-12 01:31:26",""
"40558646","Gson Parsing error with salt-net-api","Trying to parse the output of Salt CherryPy REST interface. The Json is provided as below,
{""info"": [{""Function"": ""cmd.run"", ""jid"": ""20161111182415841377"", ""Target"": ""yesMyMaster"", ""Target-type"": ""glob"", ""User"": ""saltdev"", ""StartTime"": ""2016, Nov 11 18:24:15.841377"", ""Arguments"": [""echo HELLO""], ""Minions"": [""yesMyMaster""], ""Result"": {}}], ""return"": [{}]}

This results in the following error:
com.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected BEGIN_OBJECT but was STRING at line 1 column 147 path $.info[0].StartTime

at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:224)
at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:129)
at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:220)
at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.read(TypeAdapterRuntimeTypeWrapper.java:41)
at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:82)
at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:61)
at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:129)
at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:220)
at com.google.gson.Gson.fromJson(Gson.java:887)
at com.google.gson.Gson.fromJson(Gson.java:852)
at com.google.gson.Gson.fromJson(Gson.java:801)

The code is very simple, nothing special.
    Gson gson = new Gson();

    ResultInfoSet resultInfos = gson.fromJson(json, ResultInfoSet.class);

ResultInfo is a class from Salt-Net-Api
Have anyone faced similar error before with Gson?
Update
If I remove ""StartTime"": ""2016, Nov 11 18:24:15.841377"" from json, then Gson works fine. 
","You have to use the same type adapters the library is using.
You can find a full example here.
","69","<json><gson><salt>","0","1","2","2016-11-13 16:27:35","","0","","1304351","","2016-11-12 01:56:50","2016-11-12 01:31:26",""
"34511947","Check if salted Hashed User ID exists","Set-up...Java, SQL, & ID cards that for some silly reason all start with 1000 followed by 6 numbers. These IDs are salted & hashed prior to storage. An ID will be stored only when mail is received and that item is assigned a mailbox. There will be at most 100 mailboxes and an item may have several valid ID's.
Let's assume 100*3, we could have 300 salted hashes in a db.
What would be the most concise way of taking a user's ID to compare if there is a mail for that user. It seems like, pulling down all 300 salts to generate a 300 hashes to validate is laborious. 
","","68","<java><sql><database><hash><salt>","0","","0","2015-12-29 13:19:09","","3","","","","","2015-12-29 13:19:09",""
"55376768","Is there a PHP crypt($string,$salt) equivalent in Vb.Net? Can't find/create any with $salt","I'm trying to compile a software written in VB (I'm using VisualStudio2010, Framework 4) that lets users change their passwords on a website (sadly the website default changepassword form doesn't work, and I can't fix that via PHP).
I don't have much experience with PHP and encrypting, so I looked on the internet for some solutions for VB.Net, but didn't get the expected results after 2 days of trying.
I did some research, and that's what I learned:
Website's PHP code uses the crypt($string,$salt) function to create the hashed password.
The encoding is a MD5 algorithm, as my salt is something like '$1$ad000000$' for every password in website's database.
I tried to replicate it in VB and the issues start on the ComputeHash(buffer() as Byte), as it doesn't support a ""Salt"" String.
The code on PHP is as simple as that:
$EncryptedPassword = crypt($userPassword, $salt);

The salt is generated to look like, for example, ""$1$ad000000$""
The $EncryptedPassword length is 34 (12salt + 22hash), but I guess this is a standard length of the crypt() function, given a specific salt.
This is what I'm currently trying on VB:
Dim Hashata = GetHash(""asdkFAofkas"", ""$1$ad000000$"")

Private Function GetHash(ByVal p1 As String, ByVal Salt As String) As Object
        Using hasher As MD5 = MD5.Create()
            Dim dbytes As Byte() = hasher.ComputeHash(Encoding.UTF8.GetBytes(p1 & Salt))
            Dim Conversione = Convert.ToBase64String(dbytes)
            Return Conversione
        End Using
    End Function

The return string is a 24-character string always ending with ""=="" no matter what ""p1"" is, and I read on the internet that these last two characters are optional, so when creating the password-hash with Salt, I just do:
Dim StoredPassword = Salt & Hashata.Substring(0,Hashata.Length-2)

The created StoredPassword (VB) doesn't coincide with the password (PHP) in the DataBase when I write the same Password.
I tried this with creating multiple users on the website with the same Password, and they are all hashed in the same way in the Database.
For example, this is what I have in the Database:
-------------------------------------------------
| Username | Password                           |
-------------------------------------------------
|test1     |$1$ad000000$kcpPLtMxsedGD0d39UnXQg  |
-------------------------------------------------
|test2     |$1$ad000000$kcpPLtMxsedGD0d39UnXQg  |
-------------------------------------------------
|test3     |$1$ad000000$kcpPLtMxsedGD0d39UnXQg  |
-------------------------------------------------
|testVB    |$1$ad000000$5u-9pdu3HDnXt5pGdXZNug  |
-------------------------------------------------

test1,test2,test3 have passwords made on website
testVB has a password generated by VB's function above
I wrote the exact same password for test1,test2,test3 and testVB.
ALL passwords on the database have a length of 34 characters
I already tried the following (on VB, as I can't modify website's PHP):

Encode only p1, only Salt, both variables mixed (like in the code above)
Convert p1 and Salt to a hex string (first only one, then only the other one, then both, etc...) before encoding them singularly or while mixing them
Use different types of Encoding (UTF-7, UTF-16, UTF-32, ""Default"" and ASCII)

I'm pretty sure the issue is on the ComputeHash Function, which doesn't have a ""Salt"" property (it has an offset and count properties, but I didn't use them), and without that, it can't crypt in the way I'd like.
Is there a way to replicate PHP's crypt($string, $salt) function?
I can bet that without the $salt they coincide (I already found some solutions that worked like that, but I need that $salt for crypting because I cannot modify website's PHP code to crypt without $salt).
Thanks a lot, sorry for the long read, I want to make sure I didn't miss anything :)
If there's something else I need to add, let me know!
","Bcrypt.NET gives you want you want.
string passwordHash = BCrypt.HashPassword(""my password"");
if (BCrypt.Verify(""my password"", passwordHash)) {
    // Valid
} else {
    // Incorrect password
}

","67","<php><vb.net><encryption><hash><salt>","4","0","1","2019-10-25 20:35:16","","3","","","","","2019-03-27 12:04:55",""
"14237353","Hash a value with itself as salt","I'm developing an application where users can search for other users that are already registered with their email. But because I don't want people to send me the addresses of their whole contact book in plaintext I was thinking about some SHA512 magic:
The client appends every email to itself:
hash = sha512(email + email)

And the server is doing the very same thing when registering a new user. (Once an email is registered I will store it plaintext as well as hashed for database lookups and account recovery and stuff)
Please note that this is nothing critical. I just want to make sure that you can't check those emails by simple google the hash or by mathematical calculations base on how sha512 works. Just in case my database gets leaked.
Should this do the job (or is it completly useless in comparison to a simple sha512 hash?). Or is there a better approach to get this?
Thanks in advance
","This is useless comparing to simple hash.
","67","<database><hash><salt><sha512>","1","0","1","2013-01-09 16:01:56","14241247","0","","","","","2013-01-09 14:23:43",""
"24336094","Hash with a salt in a function","i'm sorry for the bad use of English... I'm having a problem with making a function that hashes my password with a salt(first time using a salt).
The problem is that I don't know how to really return the salted/hashed password from the function.
My code:
# Password hashing with a salt.
function hashing($stringPassword) 
{
    // Making a random uniq code as salt.
    $salt = uniqid(mt_rand(), true);

    $HASH512 = hash('SHA512', $stringPassword);
    $hashPassword = $salt.$HASH512;

    return $stringPassword;
}

And how I tried to test it:
<?php
$stringPassword = '482301';
hashing($stringPassword);
echo $hashPassword;
?>

Thank you for helping!
","Your code is backwards. The salt has to be part of the password BEFORE you hash it. and then you need to return the hashed password AND the salt, so that you can do proper comparisons later.
function hashing($cleartext) {
    $salt = uniqid(mt_rand(), true);
    $hash512 = hash('SHA512', $salt . $cleartext);
    return(array('hash' => $hash512, 'salt' => $salt));
}

$foo = hashing('letmein');
echo ""Salt is: $foo[salt]"";

","67","<php><function><hash><salt>","-1","3","2","2014-06-23 08:50:31","24336146","5","1","2352773","","2014-06-20 21:45:05","2014-06-20 21:42:54",""
"24336094","Hash with a salt in a function","i'm sorry for the bad use of English... I'm having a problem with making a function that hashes my password with a salt(first time using a salt).
The problem is that I don't know how to really return the salted/hashed password from the function.
My code:
# Password hashing with a salt.
function hashing($stringPassword) 
{
    // Making a random uniq code as salt.
    $salt = uniqid(mt_rand(), true);

    $HASH512 = hash('SHA512', $stringPassword);
    $hashPassword = $salt.$HASH512;

    return $stringPassword;
}

And how I tried to test it:
<?php
$stringPassword = '482301';
hashing($stringPassword);
echo $hashPassword;
?>

Thank you for helping!
","Since you are hashing passwords, you should be aware that the SHA* algorithms are not appropriate to hash passwords. They are much too fast, instead you need a function with a cost factor like BCrypt or PBKDF2 where you can control the necessary time for the calculation.
PHP offers a dedicated function password_hash() to generate BCrypt hashes, for earlier PHP versions you can use the compatibility pack:
// Hash a new password for storing in the database.
// The function automatically generates a cryptographically safe salt.
$hashToStoreInDb = password_hash($password, PASSWORD_BCRYPT);

// Check if the hash of the entered login password, matches the stored hash.
// The salt and the cost factor will be extracted from $existingHashFromDb.
$isPasswordCorrect = password_verify($password, $existingHashFromDb);

","67","<php><function><hash><salt>","-1","1","2","2014-06-23 08:50:31","24336146","5","1","2352773","","2014-06-20 21:45:05","2014-06-20 21:42:54",""
"55348132","Hashing + salting emails used in authentication - good or bad practice?","Is hashing + salting of email addresses and usernames not a normal thing to do? Like in a data breach you wouldn't be able to know who is registrered to the service since every field is hashed + salted? Is there any cons to this since there isnt much about it on the internet?
","It is not common to hash and salt usernames and email addresses for several reasons:
Usability
If your email address was hashed, the website could not display your email address as the value is hashed.
Security
From a security standpoint, you wouldn't gain much by hashing your email address. Imagine if somebody had access to your email address, they could use the same hashing algorithm and find your credentials easily by iterating through the database. That is why some website have implemented a separate login authenticating name and display name. The login name remains hashed (unsalted) while the display name is stored unhashed. Unless the attacker has your login name/address, there is no way of compromising your data. In this particular case, hashing of email addresses guarantees full security of your data.
","66","<django><security><authentication><hash><salt>","0","0","2","2019-03-29 22:54:18","55366477","0","","10426405","","2019-03-26 22:05:52","2019-03-26 00:12:44",""
"55348132","Hashing + salting emails used in authentication - good or bad practice?","Is hashing + salting of email addresses and usernames not a normal thing to do? Like in a data breach you wouldn't be able to know who is registrered to the service since every field is hashed + salted? Is there any cons to this since there isnt much about it on the internet?
","
It is not standard practice to salt and hash usernames / email addresses. 

It is true that an attacker will be unable to identify the stored usernames/ email addresses if salted and hashed prior to storage. In fact, nobody will be able to access the usernames/ emails (including authorized users like the system administrator).

Sounds secure, so why is this a problem?

When a user attempts to login, they will send a username (or email) and password. Since each salt is unique to that specific username, the only way to associate the username/email with the stored hash username/email is to test every salt + hash combination until either a match is found or every entry is tried / rejected.
While this might be possible for a database consisting of few users, it is infeasible in practice because hashing is computationally demanding. Imagine waiting hours or days for a login service to compute every salt+hash combination only to find the username was simply misspelled.
Additionally, if you are salting usernames then how will you prevent duplicates? 
Usernames must be unique. If you salt the username then you have no way of preventing multiple users from using the same username. 

What other methods can a developer employ to protect information?

The most obvious solution is database encryption. While this is a bit outside the scope of your question, Wikipedia has a good article covering this topic.
","66","<django><security><authentication><hash><salt>","0","1","2","2019-03-29 22:54:18","55366477","0","","10426405","","2019-03-26 22:05:52","2019-03-26 00:12:44",""
"41341034","salts stored wrong in database.!","My test function : 
<?php

include_once(""core/init.php"");

$admin = new Admin();
$name = ""akhil"";
$password = ""daydreamers"";
$salt = Hash::salt(24);
$hash = Hash::make($password,$salt);
/*echo $hash;
echo ""<br/>"";*/
$admin->newAdmin($name,$hash,$salt);
$dsalt = $admin->getSalt($name);
if($salt != $dsalt){
    echo ""Wrong"";
}
/*echo Hash::make($password,$dsalt);
echo ""<br/>"";
//$admin->verify($name,$password);
echo $admin->getPassword($name);*/

?>

Hash class : 
<?php

class Hash{
    public static function make($string,$salt=''){
        return hash('sha256', $string . $salt);
    }
    public static function salt($length){
        return mcrypt_create_iv($length, MCRYPT_DEV_URANDOM);
    }
}

?>

database structure
The salt i'm storing and the salt retrieved from database are not matching. I have gone through the other posts which seem to suggest increasing the column size but its not working.
","Since you are working with passwords, I suggest to switch to the password_hash() function, and forget about the unsafe implementation above. The password_hash() function will take care about the salt, and you don't need to store it separately, just store the hash in a single varchar(255) field.
// Hash a new password for storing in the database.
// The function automatically generates a cryptographically safe salt.
$hashToStoreInDb = password_hash($password, PASSWORD_DEFAULT);

// Check if the hash of the entered login password, matches the stored hash.
// The salt and the cost factor will be extracted from $existingHashFromDb.
$isPasswordCorrect = password_verify($password, $existingHashFromDb);

","65","<php><salt>","0","1","1","2017-01-03 17:18:21","41448812","0","","68587","","2017-01-03 17:18:21","2016-12-27 07:39:45",""
"44012092","PHP: base64_encode didnt decrypt correct *EDIT*","
EDITED

I have an Android project with a login form. I also have some users stored in a DB in a server and i am trying to create a connection, so as to login, with PHP files. My problem is that everytime, even i connect with an already existed user i got Login credentials are wrong. Please try again! which is the error message i should take when i try to login with wrong credentials. Somehow it passes the wrong parameters. I have the code below.
The login.php
<?php
require_once 'DB_Functions.php';
require_once 'DB_Connect.php';
$db = new DB_Functions();

// json response array
$response = array(""error"" => FALSE);

if (isset($_POST['email']) && isset($_POST['password'])) {

    // receiving the post params
    $email = $_POST['email'];
    $password = $_POST['password'];

    // get the user by email and password
    $user = $db->getUserByEmailAndPassword($email, $password);

    if ($user != false) {
        // user is found
        $response[""error""] = FALSE;
        $response[""oid""] = $user[""oid""];
        $response[""user""][""name""] = $user[""name""];
        $response[""user""][""surname""] = $user[""surname""];
        $response[""user""][""country""] = $user[""country""];
        $response[""user""][""email""] = $user[""email""];
        $response[""user""][""password""] = $user[""password""];
        $response[""user""][""salt""] = $user[""salt""];
        $response[""user""][""telephone""] = $user[""telephone""];
        echo json_encode($response);
    } else {
        // user is not found with the credentials
        $response[""error""] = TRUE;
        $response[""error_msg""] = ""Login credentials are wrong. Please try again!"";
        echo json_encode($response);
    }
} else {
    // required post params are missing
    $response[""error""] = TRUE;
    $response[""error_msg""] = ""Required parameters email or password are missing!"";
    echo json_encode($response);
}
?>

And the getUserByEmailAndPassword function on the DB_Functions.php
public function getUserByEmailAndPassword($email, $password) {

$stmt = $this->conn->prepare(""SELECT * FROM owner WHERE email = ?"");
$stmt->bind_param(""s"", $email);

if ($stmt->execute()) {
    $stmt->bind_result($user['oid'], $user['name'], $user['surname'], $user['country'], $user['email'], $user['password'], $user['salt'], $user['telephone']);
    while ($stmt->fetch()) {
            //printf(""%s %s\n"", $email, $password);
    }

    $stmt->close();

    // verifying user password
    $salt = $user['salt'];
    $encrypted_password = $user['password'];

    $hash = $this->checkhashSSHA($salt, $password);
    // check for password equality
    if ($encrypted_password == $hash) {
        // user authentication details are correct
        return $user;
    }
} else {
    return NULL;
}
}

I also use a base64 encryption. Maybe there is something wrong with the encryption function. Here is my base64_encode function i use it when i store the user. It creates a 10-digit salt and store it to the DB of each user. An example salt is 2b67fd277b. I know that the proper format of the salt is something like cRDtpNCeBiql5KOQsKVyrA0sAiA=. Why am i getting this type of salt?
 public function hashSSHA($password) {

    $salt = sha1(rand());
    $salt = substr($salt, 0, 10);
    $encrypted = base64_encode(sha1($password . $salt, true) . $salt);
    $hash = array(""salt"" => $salt, ""encrypted"" => $encrypted);
    return $hash;
}

And the decode
public function checkhashSSHA($salt, $password) {

    $hash = base64_encode(sha1($password . $salt, true) . $salt);

    return $hash;
}

Am i missing something here?
Please help, thanks!
","Found it! I was using $password instead of $encrypted_password when i am storing the user, so the decryption cannot be done correctly. Finaly in the DB istead of the real password in the password column, there is an encrypted string.
","65","<php><encryption><base64><salt>","0","0","1","2017-05-17 15:47:05","","3","","4720433","","2017-05-17 15:07:57","2017-05-16 21:43:34",""
"7752169","Password storing schema and authentification sound?","we're implementing a new ecommerce platform, and we want to make sure not to make mistakes that can be avoided in the security department.
This time, I took a look at the password storing and hashing. What we currently do:
We generate 8 to 16 random bytes from 0-36 and 125-255 range, use this as a salt into the password, then SHA512 it 100k times. Then we store password and salt in the user account.
The solution is in C#. Anything to add for the randomization of the salt input? Or did we miss something critical?
","Please don't invent yourself - there are proven standard methods to do so (including hashing several times etc.), see for example http://en.wikipedia.org/wiki/PBKDF2 and http://msdn.microsoft.com/en-us/library/system.security.cryptography.rfc2898derivebytes.aspx
","65","<c#><encryption><hash><passwords><salt>","0","3","1","2011-10-13 09:40:20","7752200","1","","","","","2011-10-13 09:37:42",""
"18692436","JS: truly secret vars (for securely submitting a score)","Is it possible to find a randomly generated value declared within an anonymous function (IIFE), and if so how?
(function () {
  // assuming an epic, obscured, random function
  var salt = random()*10000|0;

  // assuming an event manager
  Events.on('custom event', function () {
    // do something amazing with salt here
  });
})()

Assuming: 

the function is loaded via ajax
it executes on load (making it difficult to include a breakpoint)
there's a suitably elegant solution in place to test for injection (is there such a thing?).

","A simple breakpoint in your JS exposes the salt value. It is not accessible to code outside the IIFE (Immediately Invoked Function Expression - what you are calling anonymous function), but if you're trying to keep a debugger from seeing it via a breakpoint inside the IIFE, then JS is not going to prevent that in any way.
For example, you can set a breakpoint right where the salt value is coined and see what it is or if that code is dynamically loaded via ajax, you can set a breakpoint on the ajax loading code and then step through the loading of the code until you can then set a breakpoint where the sale value is coined.
","64","<javascript><security><variables><anonymous-function><salt>","0","2","2","2013-09-10 04:59:15","18692526","3","","720204","","2013-09-10 04:51:54","2013-09-09 06:16:25",""
"18692436","JS: truly secret vars (for securely submitting a score)","Is it possible to find a randomly generated value declared within an anonymous function (IIFE), and if so how?
(function () {
  // assuming an epic, obscured, random function
  var salt = random()*10000|0;

  // assuming an event manager
  Events.on('custom event', function () {
    // do something amazing with salt here
  });
})()

Assuming: 

the function is loaded via ajax
it executes on load (making it difficult to include a breakpoint)
there's a suitably elegant solution in place to test for injection (is there such a thing?).

","I see to ways to hack this, first set a breakpoint and overwrite the the salt, or overwrite Math.random to always return the same value. And there are no ways to protect your program from this. On the other hand its very hard to find the piece of code in a minified and obfuscated script.
","64","<javascript><security><variables><anonymous-function><salt>","0","1","2","2013-09-10 04:59:15","18692526","3","","720204","","2013-09-10 04:51:54","2013-09-09 06:16:25",""
"13062633","Global site salt, is it worth it?","I'm making a user database and I was thinking about security and it just made me think, is it really worth it to have a site salt when I'm going to have unique user salts on everybody.
md5(GLOBAL_SALT . $password . $user_salt);

vs
md5($password . $user_salt);

My thoughts is if the site were to get hacked the hackers would have access to the global salt anyway.
","What you are talking about is also called pepper. Salt and pepper have a different purpose:

The salt prevents from rainbow-table attacks.
The pepper can in some circumstances protect against dictionary attacks.

It actually depends upon whether the attacker has control over the server, or has only acces to the database (SQL-injection), if a pepper is of use. I recently wrote a tutorial about hashing passwords, where i tried to explain the important points.
There are other things to consider, like the fact that MD5 is ways too fast for password hashing, instead one should use a key derivation function like BCrypt.
","64","<security><salt><password-hash>","1","0","1","2014-01-30 09:41:09","13065907","0","","445517","","2014-01-30 09:41:09","2012-10-25 06:13:18",""
"45192409","What are the best practices for implementing encryption logic in iOS?","I'm trying to implement payment mechanism in iOS app. So i want send payment related details like card no, card holder name e.t.c. to our server(C#) with encryption for secure communication between mobile and server. Please suggest some good encryption and decryption techniques.
Thanks in advance.
","Use HTTPS. Set the server up to support TLS 1.2 and Perfect Forward Secrecy. On the client pin the certificate to prevent MITM attacks.
If you are saving full CC numnbers on the server you will need to be PCI compliant.
","63","<c#><ios><encryption><hash><salt>","0","1","1","2017-07-19 14:39:15","","0","","","","","2017-07-19 13:41:31","2017-07-19 15:41:43"
"45468128","What is the expected behavior of using grain.present?","I am trying to use salt to move over my php.ini file, but I only want it to run once on the first run.  I am trying to use salt grains to do this, but this is working inconsistently. Any ideas?
#phpinifile.sls
{%- set php_ini_initialized = salt['grains.get']('PHP_INI_INITIALIZED') | default( False, true) %}

{% if php_ini_initialized == False %}
etc-php-70-cli-phpini:
file.managed:
    - name: /etc/php/7.0/cli/php.ini
    - source: salt://billing/sources/etc/php/7.0/cli/php.ini
    - user: root
    - group: root
    - mode: 644
    - context:
      set_pear_path: True
    - template: jinja


PHP_INI_INITIALIZED:
  grains.present:
    - value: True
{% endif %}

","What is the expected behavior of using grain.present?
It will make sure that the grain will be present. In other words. Ik will make it when it's not there.
Any ideas?
You want to make sure that the php.ini file is only placed on your minion once. During the first 'state.apply'
file.managed will make sure that your file is present, with the right permissions and the right content.
When you do another state.apply, Salt will see that the file is already available with the correct content and moves on. In this case you could run this as many times as you want without a problem.
If your php.ini file is changed manually after it is placed by Salt I understand that you want to make sure to only run it once. In this case you could use the unless requisite like this:
phpini:
file.managed:
    - name: /etc/php/7.0/cli/php.ini
    - source: salt://billing/sources/etc/php/7.0/cli/php.ini
    - unless: ls /etc/php/7.0/cli/php.ini

The unless requisite specifies that a state should only run when any of the specified commands return False. In this case the ls returns false if the file does not exist.
I hope this helps.
","62","<salt><salt-stack>","0","3","1","2017-08-02 21:09:53","45471043","1","","1284868","","2017-08-02 18:49:51","2017-08-02 18:11:38",""
"50568539","Random Bytes Creates Undefined Characters","I'm using Random Bytes to create a hash in PHP:
<?php 
class Hash
{
    public static function make($string, $salt = '')
    {
        return hash('sha256', $string . $salt);
    }
    public static function salt($length)
    {
        return random_bytes($length);
    }
    public static function unique()
    {
        return self::make(uniqid());
    }
}
?>

But I get this as result:

|i����� ͦ��S��7΋�j�)8ce��|i����� ͦ��S��7΋�j�)8ce��

So how what is this and how can I fix this problem?
","Printing bytes is kind of hard to do.
As teresko suggested, wrap it in a base64_encode(), or use bin2hex(). The latter prints hexadecimal, so only uses 16 characters but that can be enough.
See here for both in action.
","62","<php><hash><salt>","-1","0","1","2018-05-29 14:52:04","50568625","2","","727208","","2018-05-29 14:52:04","2018-05-28 14:26:36",""
"54805995","how to grant www-data user access to python salt module?","I'm maintaining a small legacy php5 application (based on CodeIgniter) that acts as a salt web UI that allows me to run salt commands and schedule repeating jobs. The web app runs python scripts which invoke the salt api to execute the commands.
The problem that I'm facing is that python throws a UnboundLocalError when I'm trying to loop through the results. Interestingly, this issue only happens when I run the python script using www-data user. If I use my admin account, the script works fine.
this fails:
sudo su - www-data -s /bin/bash -c '/usr/bin/python /home/system/update-manager/check_reboot_status.py'

Traceback (most recent call last):
  File ""/home/system/update-manager/check_reboot_status.py"", line 43, in <module>
    main()
  File ""/home/system/update-manager/check_reboot_status.py"", line 34, in main
    for r in returns:
  File ""/usr/lib/python2.7/dist-packages/salt/client/__init__.py"", line 563, in cmd_batch
    salt.utils.versions.warn_until(
UnboundLocalError: local variable 'salt' referenced before assignment

this works fine:
sudo /usr/bin/python /home/system/update-manager/check_reboot_status.py
2019-02-21 12:12:04,456 INFO Started the check reboot status script...
2019-02-21 12:12:22,144 INFO Updated the 'Reboot Status' of 92 minions.
2019-02-21 12:12:22,144 INFO End of the check reboot status script.

Initially, I thought this was due to insufficient permission, however my visudo file grants www-data permission to run that command:
www-data ALL = NOPASSWD: /usr/bin/python /home/system/update-manager/check_reboot_status.py

I'm confused that the error revolves around a variable 'salt', as I am certain the python module is installed; after all my admin account can execute the script without errors. I wonder if it has to do with the shell environment in which the script is executed. I couldn't find information about that in the php doc.
What have I left out to try or to investigate? I copied the python and php code below for reference.
php script:
$script = '/home/system/update-manager/check_reboot_status.py';

shell_exec('sudo /usr/bin/python ' . $script . '> /home/system/update-manager/logs/check_reboot_status.log 2>&1 &');

python code
import salt.client
local = salt.client.LocalClient()

linux = 'G@os:Ubuntu'    

# Linux minions
cmd = '[ -f /var/run/reboot-required ] && echo 1 || echo 0'
returns = local.cmd_batch(linux, 'cmd.run', [cmd], bat='1', expr_form='compound')

for r in returns:
    count += 1
    for minion, reboot_required in r.iteritems():
        umb.change_reboot_status(minion, reboot_required)

","tl;dr: Misunderstanding of the error message. Using command with/without sudo caused two different python salt modules. As per API documentation, only the user that launched salt on the salt-master may run commands, in this case: root. The original question doesn't match the described situation as python never didn't have access to the module, otherwise an error like ""ImportError: No module named salt"" would have been thrown.
There was a permission problem that concealed the actual issue.
First I discovered that running python with the two commands used two different files to be loaded:
$ sudo python
>>> import salt.client
>>> salt.client
<module 'salt.client' from' /home/support/.local/lib/python2.7/site-packages/salt/client/__init__.pyc'>

 sudo runuser -l www-data -s /bin/bash -c '/usr/bin/python
>>> import salt.client
>>> salt.client
<module 'salt.client' from '/usr/lib/python2.7/dist-packages/salt/client/__init__.pyc'>

The stacktrace reveiled that the error was coming from the following block: ""salt.utils.versions.warn_until()"" threw the salt error shown in the question even though that package was imported at the beginning of the file.
#/usr/lib/python2.7/dist-packages/salt/client/__init__.py
if 'expr_form' in kwargs:
            #import salt.utils.versions
--->        salt.utils.versions.warn_until(
                'Fluorine',
                'The target type should be passed using the \'tgt_type\' '
                'argument instead of \'expr_form\'. Support for using '
                '\'expr_form\' will be removed in Salt Fluorine.'
            )
            tgt_type = kwargs.pop('expr_form')

        import salt.cli.batc

By adding the import line (shown in comment) the error was resolved, however, another one took its place:
salt.exceptions.SaltClientError: Authentication error occurred.

As the documentation states ""Importing and using LocalClient must be done on the same machine as the Salt Master and it must be done using the same user that the Salt Master is running as. [...])."".
This was where I realized that the commands can only be run with the root user.
","61","<php><python><python-2.7><codeigniter><salt>","1","0","1","2019-02-28 12:43:48","54926051","0","0","1297789","","2019-02-21 13:31:14","2019-02-21 11:27:03",""
"34382231","PHP Login issue when checking hashed/salted password","My checkPassword() method returns false every time even though I know it is right. I used the same method for hashing/salting as I did for checking and I made sure everything is the way it should be but it still returns false.
I'm using 'Bcrypt-PHP-Class' found here to hash everything https://github.com/cosenary/Bcrypt-PHP-Class
Here is how I hashed the password:
$password = Bcrypt::hashPassword($_POST['password']);

Here is how I check the password:
$check = Bcrypt::checkPassword($password, $user['password']);

($user is an array of the user's information like username,password,email etc.)
$check is still false even after checking that everything is exactly right. There are no errors either.
Thanks in advanced to anyone who can help me out.
Bcrypt methods:
public static function checkPassword($password, $storedHash) {
if (version_compare(PHP_VERSION, '5.3') < 0) {
  throw new Exception('Bcrypt requires PHP 5.3 or above');
}

self::_validateIdentifier($storedHash);
$checkHash = crypt($password, $storedHash);

return ($checkHash === $storedHash);
}
public static function hashPassword($password, $workFactor = 0) {
if (version_compare(PHP_VERSION, '5.3') < 0) {
  throw new Exception('Bcrypt requires PHP 5.3 or above');
}

$salt = self::_genSalt($workFactor);
return crypt($password, $salt);
}

","Why you don't use password_hash() ? (http://php.net/manual/fr/function.password-hash.php)
And look into your DB if the password field is a varchar and minimum 60 characters (for password_hash, don't know for Bcrypt-PHP-class)
EDIT :
Bcrypt-PHP-Class create a 60 chars hash, check if your fields have this minimum
","60","<php><hash><passwords><salt><account>","0","0","1","2015-12-20 15:07:39","34382373","1","0","5563314","","2015-12-20 15:01:55","2015-12-20 14:51:35",""
"11604150","User authentication failure /w Hash","And I need to secure some area's on my web store for admin use.
The problem is the authentication of the user: the salt + hash is failing.
This is my code for creating a password (using PHP5.x):
$salt = rand(0, 999999999999);<br>
$passEncr = sha1($pass1 + $salt);

This variable $passEncr is inserted into the database together with its salt.
At the login page I've got the following check:
$password = $_POST['password']; // hash+salt in the database

$storedSalt = $row['salt']; // salt from database<br>
if (sha1($password + $storedSalt) == $row['password']) 

Now the problem I'm experiencing is that some hashes appear to be the same.
If I try to log in with an alphanumeric password, I succeed, no matter what the content of that password is. 
Full login check here: http://pastebin.com/WjVnQ4aF
Can someone please explain what I'm doing wrong?
","Well, SQL injection, using SHA for passwords instead of bcrypt are the first things I see, not using OpenId so you can get out of the business of storing passwords is another.
As for the passwords being the same, I would check the database -- see what you are storing, that will tell you where your problem lies.
","60","<hash><passwords><sha1><salt>","0","0","1","2012-07-23 09:11:57","11604219","0","","718763","","2012-07-23 09:11:57","2012-07-22 21:34:51",""
"35510019","iOS and PHP password has and salt","I am developing an app for iOS which uses PHP as the end back. Am I better hashing and salting the password in PHP ?
If thats the case would I via https pass the password over the web server.
Regards
Kal.
","","59","<php><ios><hash><salt>","1","","0","2016-02-19 16:24:42","","3","","","","","2016-02-19 16:24:42",""
"25459428","How to validate user","I am inserting password usinh Salt MD5 method. Below is my code
  protected string GenerateSalt()
{
    byte[] data = new byte[0x10];
    new RNGCryptoServiceProvider().GetBytes(data);
    return Convert.ToBase64String(data);
}
 private string HashPassword(string password, string salt)
 {
     // Create an MD5 hash of the supplied password using the supplied salt as well.
     string sourceText = salt + password;
     ASCIIEncoding asciiEnc = new ASCIIEncoding();
     string hash = null;
     byte[] byteSourceText = asciiEnc.GetBytes(sourceText);
     MD5CryptoServiceProvider md5Hash = new MD5CryptoServiceProvider();
     byte[] byteHash = md5Hash.ComputeHash(byteSourceText);
     foreach (byte b in byteHash)
     {
         hash += b.ToString(""x2"");
     }

     // Return the hashed password
     return hash;
 }

here I am using to create the password.
 string salt = GenerateSalt();

  string password = HashPassword(txtpassword.Text, salt);

it is working fine and saving the password in database.
But when I try to login in the password doesn't match.
below is my code for matching the password and user id
 string password = FormsAuthentication.HashPasswordForStoringInConfigFile(txtPassword.Text, ""md5"").ToString();
            SqlCommand com11 = new SqlCommand(""For_Login1"", con);
            com11.CommandType = CommandType.StoredProcedure;
            com11.Parameters.AddWithValue(""@User_Id"", ddl.SelectedItem.Text);
            com11.Parameters.AddWithValue(""@Password"", password);

but password didn't match why?
","salt is a final static string (doesn't change) and is usually kept in the DB attached to the hashed password. One convention is to save it as hash(pwd+salt):salt.
You're generating a new salt every time you call generate() because of the following line:
new RNGCryptoServiceProvider().GetBytes(data);

which means that you'll never be able to authenticate.
","59","<hash><md5><salt>","2","1","1","2014-08-23 07:48:19","","2","1","","","","2014-08-23 07:13:26",""
"49596864","Validating password in my application from Yii2 website","Me and my friend are working on final project. My friend is a little bit ahead and made all his database on Yii2 framework. 
Everything worked fine, our database is on AWS and I got it by simple requests on my Android app. 
Now I came to the part where I need to use login-password. Here I'm stuck, because all I can fetch from database is salted password. My friend used salt on the password part (which is the right thing to do). 
The website is still on our hard drive. 
1) Do we have to upload it online and only afterward to develop some
    API function that calls to database, so my app can access validation
    part of the website? 
2) Maybe Yii2 already has a validation function
    build-in somewhere that can be used by Android app? An example would
    be super-helpful. 
3) I saw a lot of examples about API functions,
    but all of them look pretty complicated and not related to Java at
    all.
Yii2 validation is actually online here: https://github.com/yiisoft/yii2-framework/blob/master/base/Security.php on validatePassword function. 
","Do you implement IdentityInterface on your user model?
if yes, than you can use this in your yii2 rest api.
public function actionLoginUser(){
    $data = Yii::$app->request->post();
    $username = $data['username'];
    $password = $data['password'];
    $user = User::findByUsername($username);
    if($user->validatePassword($password)){
     //your next response 
    }        
}

Where validatePassword method is like this:
public function validatePassword($password)
    {
        return Yii::$app->security->validatePassword($password, $this->password_hash);
    }

Sorry for bad english
","59","<android><hash><yii2><salt>","-1","0","1","2018-04-01 12:21:18","","0","","2649012","","2018-04-01 12:21:18","2018-04-01 09:54:51",""
"17995075","Date based salt check and moving to another timezone","I have a date based salt for our user password storage using Spring Security. The date is stored in MySQL without any timezone specific information. The salt function actually ends up using a java.sql.Timestamp during the salting process.
We are considering moving the server to another timezone and I'm wondering if this might affect the security check in some way 
Update.
Ok, here's what I found

Hibernate returns a Timestamp in stead of a Date
Spring Security uses the toString method of the provided salt object
The toString method of Date includes a timezone, which can spell problem if you move your server and your salt is based on it.
However, the toString method of Timestamp doesn't include timezone information. 
So, if you create your salt date object as a Timestamp, you're golden
However, the Timestamp returned by MySQL is truncated at second level, so I ended creating a Timestamp, truncating the nanoseconds and assigning it to my date.

","I've updated my question with the answer
","58","<spring-security><salt>","0","0","1","2013-08-04 17:30:14","18045610","3","0","769275","","2013-08-01 20:59:17","2013-08-01 13:13:13",""
"50275281","salt-ssh : Error appear when trying to cpmile a sls command","this message error appear when i trying to run test.ping command :
_error:
    Failed to return clean data
retcode:
    10
stderr:
    ERROR: Unable to locate appropriate python command
stdout:
    ERROR: salt requires python 2.6 or newer on target hosts, must have same major version as origin host

knowing that the version of python installed in both hosts (master and minion ) is the same
","","58","<python><python-2.6><salt><salt-stack>","1","","0","2018-05-10 14:27:49","","0","","","","","2018-05-10 14:27:49",""
"26992595","Hashed password authentication in Python not working","I have this code which salts the user's input, hashes it and writes the hash and the salt to a file:
def newhash(input):
    salt = uuid.uuid4().hex
    saltin = input + salt
    hashed_in = (hashlib.sha256(saltin.encode()).hexdigest())
    file.write(str(hashed_in) + '\n')
    file.write(str(salt) + '\n')
    file.close()

Then, I use this code to salt and hash the user's new input (using the same salt) and compare it to the one in the file.
salt = linecache.getline(userin + '.userdat', 2)
saltin = newin + salt
hashed_newin = (hashlib.sha256(saltin.encode()).hexdigest())
realin = linecache.getline('file.dat', 1)
if hashed_newin == realin:
    return True

The new input is salted using the same salt and hashed using the same function. So, as far as I know, it should come out the same and the second piece of code should return True. However, it always comes out False. Any ideas? (I'm using python 3.4.1)
EDIT: Ran the code through the debugger one more time. Turns out the new hash comes out different for some reason.
","linecache.getline returns '\n' character.
https://docs.python.org/2/library/linecache.html
This code should work:
salt = linecache.getline(userin + '.userdat', 2).strip()
saltin = newin + salt
hashed_newin = (hashlib.sha256(saltin.encode()).hexdigest())
realin = linecache.getline('file.dat', 1).strip()
if hashed_newin == realin:
    return True

","58","<python><hash><salt>","0","0","1","2014-11-18 11:26:30","26993169","4","","4265132","","2014-11-18 11:05:42","2014-11-18 10:57:07",""
"46980686","Reseting Wordpress Salt gives 503 Error","I've recently taken over a friends website that has been hacked. A lot of additional pages were added by third parties. So I did the usual:

Change Passwords to something secure
remove unused themes and plugins
(There is no backup so I can't restore)
Update to the latest wp 4.8.2 (we were already here)
Run a check against a fresh wp install and the wp admin files (they matched)
reset salts in wp-config --> ERROR

Resetting the salts gives me a 503 error.
I thought this was just supposed to invalidate cookies. Any thoughts as to why I can't change the salts without an error?
My current theory is that wherever the malicious code is, it is preventing the change of these, or if they do change give a 503 error.
The wp-config file is standard:
    define('DB_NAME', 'my_db_name');
    define('DB_USER', 'my_db_user');
    define('DB_PASSWORD', 'my_db_pass');
    define('DB_HOST', 'localhost');
    define('DB_CHARSET', 'utf8');
    define('DB_COLLATE', '');

    define('AUTH_KEY',         'salt-generated-https://api.wordpress.org/secret-key/1.1/salt/');
    define('SECURE_AUTH_KEY',  'salt-generated-https://api.wordpress.org/secret-key/1.1/salt/');
    define('LOGGED_IN_KEY',    'salt-generated-https://api.wordpress.org/secret-key/1.1/salt/');
    define('NONCE_KEY',        'salt-generated-https://api.wordpress.org/secret-key/1.1/salt/');
    define('AUTH_SALT',        'salt-generated-https://api.wordpress.org/secret-key/1.1/salt/');
    define('SECURE_AUTH_SALT', 'salt-generated-https://api.wordpress.org/secret-key/1.1/salt/');
    define('LOGGED_IN_SALT',   'salt-generated-https://api.wordpress.org/secret-key/1.1/salt/');
    define('NONCE_SALT',       'salt-generated-https://api.wordpress.org/secret-key/1.1/salt/');

    $table_prefix  = 'wp_';
    define('WP_DEBUG', false);        
    if ( !defined('ABSPATH') )
           define('ABSPATH', dirname(__FILE__) . '/');

    /** Sets up WordPress vars and included files. */
    require_once(ABSPATH . 'wp-settings.php');

Cheers
Brendan
","","58","<wordpress><security><salt><http-status-code-503><websecurity>","0","","0","2017-10-27 17:40:03","","2","","","","","2017-10-27 17:40:03",""
"43089447","Devise user created with Rails generator cannot sign in","I'm working on a Rails Engine which will depend on Devise.
I created an installer using Rails generator which you can find here. The installer creates the first credentials in order to access the administration panel later.
The problem is that I cannot sign in with those credentials. Weirdly then, if I delete the account and recreate it via Rails console, they do work. I think that's due to something happening during the installer.
Here a snippet of it:
# Binda installer generator ...

def setup_devise
  return if Rails.env.production?
  # Copy the initilializer on the application folder
  template 'config/initializers/devise.rb'
  # Add secret key
  inject_into_file 'config/initializers/devise.rb', after: ""config.secret_key = '"" do 
    SecureRandom.hex(64)
  end
  # Add pepper
  inject_into_file 'config/initializers/devise.rb', after: ""config.pepper = '"" do 
    SecureRandom.hex(64)
  end
  # some other code for mailer ...
end

def create_credentials
  @username = ask(""What's your email? ['mail@domain.com']"").presence || 'mail@domain.com'
  @password = ask(""What's your password? ['password']"").presence || 'password'
  Binda::User.create( email: @username, password: @password, password_confirmation: @password )

# Binda installer generator continue ...

Here the full code.

More info
I found out that even if I modify devise.rb file the new configuration is not loaded until the end of the installer. This means the new salt/pepper isn't considered while creating the first user. How can I reload it before running the create_credentials method?
","Sorted!
The problem is that if you add salt/pepper configuration to the devise.rb of your application you need to reload the environment before being able to create a user with the new settings.
To do that I moved the user creation into a task. This way the installer to reload the environment (and Devise config as weel) and is able to set the encrypted password correctly.
Installer

# lib/generators/myEngine/install/install_generator.rb
def create_credentials
  rake 'binda_create_initial_user'
end

Task

# lib/tasks/binda.rake
desc ""Create initial user""
task :binda_create_initial_user => :environment do
  username = 'mail@domain.com'
  password = 'password'
  Binda::User.create!( email: username, password: password, password_confirmation: password )
end

If you want to keep asking for mail and password:
# lib/tasks/binda.rake
desc ""Create first user""
task :binda_create_initial_user => :environment do
    STDOUT.puts ""What is your email? [mail@domain.com]""
  username = STDIN.gets.strip
  username = 'mail@domain.com' if username.blank?
    STDOUT.puts ""What is your password? [password]""
  password = STDIN.gets.strip
  password = 'password' if password.blank?
  Binda::User.create!( email: username, password: password, password_confirmation: password )
end

","57","<ruby-on-rails><ruby><devise><credentials><salt>","0","0","1","2017-03-29 11:09:46","43091308","5","","1498118","","2017-03-29 10:20:28","2017-03-29 09:23:17",""
"34516339","Method throws exception that java says isn't handled","When I try to run this code in my Main class my IDE pops up and says that I'm not handling the exception I'm throwing at the beginning of my method. 
public byte[] generateSalt() throws NoSuchAlgorithmException{

        // VERY important to use SecureRandom instead of just Random
        SecureRandom random = SecureRandom.getInstance(""SHA1PRNG"");

        // Generate a 8 byte (64 bit) salt as recommended by RSA PKCS5
        byte[] salt = new byte[8];
        random.nextBytes(salt);

        return salt;

}

","if this method is throwing en exception, than every method that uses it needs to either catch that exception, or throw it as well. 
If a method that uses generateSalt is not doing one of the two, then the compiler will complain about unhandled exception.
The solution is simple, on the calling method either add throws NoSuchAlgorithmException to the signature, or do this:
try {
  generateSalt();
} catch (NoSuchAlgorithmException e) {
  // do something with the exception
}

","57","<java><passwords><salt><throws>","-2","1","1","2015-12-29 18:00:02","34516415","4","","","","","2015-12-29 17:55:01",""
"37039379","What is hacking scenario prevented by salts, need more than just 'bruteforce'?","I've read several stackoverflow questions and notes about salt and password management but maybe too much as I'm not getting it or seeing the value. 
My basic understanding is that they protect against rainbow tables but, when the salt is visible and stored with the database/password can't an attacker who gets access to the pwds just remove the salt and run against rainbow table? 
I understand salts are supposed to be help against brute force, but from where, what is the scenario? Is it from someone trying to emulate a user login, maybe 1000's of time, like from your login form? But isn't that mitigated with basic throttling or captchas for invalid attempts? 
To put another way it just doesn't make sense to me that the salt is stored so openly as seems to be the norm suggestion, when an attacker who gets access to the pwds would have access to salts as well and can just see and remove before running against rainbow table.
specifically I'm working with PHP and looking at using password_hash() and password_verify().
I have read this ticket but still not really clear:
How does password salt help against a rainbow table attack?
To quote on of the answers:
""A rainbow table attack always needs /etc/passwd (or whatever password database is used), or else how would you compare the hashes in the rainbow table to the hashes of the actual passwords?
As for the purpose: let's say the attacker wants to build a rainbow table for 100,000 commonly used english words and typical passwords (think ""secret""). Without salt she would have to precompute 100,000 hashes. Even with the traditional UNIX salt of 2 characters (each is one of 64 choices: [a–zA–Z0–9./]) she would have to compute and store 4,096,000,000 hashes... quite an improvement.""
Ok, but if they can ping against the pwds don't they have access to the salt and why wouldn't be just as easy for them to use something like password_verify() at that point just like I would when the user logs in?
Quote from accepted answer: ""A public salt will not make dictionary attacks harder when cracking a single password. As you've pointed out, the attacker has access to both the hashed password and the salt, so when running the dictionary attack, she can simply use the known salt when attempting to crack the password.""
I'm thinking a simple loop of this would work? Or, why not? Maybe that is my real question?
Additionally, for anyone else looking who gets here, I found this question more pertinent than the one my question is marked to duplicate, but still seems incomplete:
Where do you store your salt strings?
Any help clearing my fog is greatly appreciated.
FINAL NOTE: Having completed more research and some testing and have concluded that random salting per pwd and openly storing salts with password hashes as with using php password_hash/verify does slow an attackers ability to crack the pwds but not to the degree as commonly specified like in the answer mentioned above in another question that states the benefit of even a basic 2 character salt forcing 4,096,000,000 computations vs just the 100,000 common pwds mentioned. 
My problem is that this comparison does not seem to make sense as all an attacker has to really do is run the 100,000 common pwd thru password_verify and catch when/if verification return a true and move on to the next. 
Slower? Yes but, depends greatly on your 'cost' setting as in my tests on a marginal virtualbox vm setup (2 processor 4069mb, 90% cap, 2015 Mac Book Pro Host) using a cost of 10 (a commonly recommended setting) 100 loops of password_verify takes 8 secondsish, does increase significantly around 14 cost, but this setup is nothing compared to what an attacker would have.
Said another way, it is confusing and I think inaccurate to think in terms of an attacker going for the nuclear option of rainbow table for all the salt options when all they seem to need to do is the same thing as they had been doing but just add running thru password-verify for their favorite plain text password list, they don't have to care about the salt or really even the cost and hash if they have some time. If your users' accounts are of any value, and they are, attackers probably have the time. But, at this point, I'm not sure what else to do, so moving on and probably going to embrace the salt until I learn of better methods.
","","56","<php><security><passwords><salt>","0","","0","2016-05-05 16:23:15","","9","","-1","","2017-05-23 11:52:43","2016-05-04 22:49:04","2016-05-04 22:55:17"
"56696785","Ruby BCrypt salting/hashing seems ... wrong?","I've been creating salted passwords in a ruby app what I thought was the standard way:
password_salt = BCrypt::Engine.generate_salt
password_hash = BCrypt::Engine.hash_secret(params[:pword], password_salt)

But on examining a test case, it looks like the salt is just being prepended to the hashed password:

Now, as I understand the point of salt, it's supposed to be concatenated onto the password BEFORE hashing, to push the password out of the size range that any pre-computed lookup-table, rainbow-table, etc.. could ever include. The point is, if someone gets your user database, they still can't crack the passwords using a lookup table. If the salt is prepended onto the password AFTER the hashing, and the hacker has downloaded the user table, it's not doing anything to secure the passwords. The hacker can just clip the salt off the front, get the original hash back, and then run a rainbow table on the hashes as if they were never salted.
Is this as much of a salt-fail as it appears to be? Is the problem in my code? Or is this Working As Expected And Secure for reasons I need to read up on? (Link, please.)
","1) Salt is necessary for verification, and thus must be stored alongside the hashed cyphertext. Whether it's two fields in a database or one smushed-together string, is immaterial.
2) One salt = one rainbow table. Sure, attacker could generate a new rainbow table for your salt; however, since time to build a rainbow table is basically equivalent to time to try all passwords the rainbow table is to cover, it is not a weakness as long as you don't reuse salts.

The use case for rainbow tables is it allows you to compute it once, then quickly test multiple passwords. A rainbow table typically covers all the passwords up to certain length, or at least with some restriction (e.g. with certain alphabet, or using a certain vocab list). Let's say you have a rainbow table that covers all the passwords up to 8 characters. So if someone has password ""password"", rainbow table will know what its hashed form would be (e.g. ""WASSPORD"" - using caps for cyphertext and lowercase for plaintext for readability of the example), and you can look up ""WASSPORD"" in the rainbow table and see the password is ""password"" extremely quickly.
However, say you have salt ""peanuts"". The password becomes ""peanutspassword"", and if you then encrypt it, lets say you get ""WASSUPMYCRACKER"". Ruby would print ""peanutsWASSUPMYCRACKER"" as the salted hash. At verification time, you separate ""peanutsWASSUPMYCRACKER"" into ""peanuts"" (salt) and ""WASSUPMYCRACKER"" (hash); append ""peanuts"" to the user's input of ""password"" to form ""peanutspassword"", and encrypt it again - you get ""WASSUPMYCRACKER"", which is a match, and the user is logged in. However, note that ""peanutspassword"" is longer than 8 characters, and will not be in the up-to-8-characters rainbow table.
Now, you can generate a ""peanuts"" rainbow table, by taking the same dictionary as the original rainbow table, prepending ""peanuts"", and encrypting it, but it would typically take longer than just brute-forcing the password (""peanuts""+""a""? ""peanuts""+""aardvark""?...) because, at least when you brute-force, you would stop when you find the correct password.
However, if you knew that a certain application always used ""peanuts"" as its salt, you could make a ""peanuts"" rainbow table, and that application is toast, and its owners in a real jam.
tl;dr: Salt can be public; it just can't be reused.

EDIT: You seem to be under the impression that Ruby just pastes salt onto the hash of the unsalted plaintext. If it did that, then one would expect that for the same plaintext, the result's hind end (the cyphertext) would be the same, no matter the salt. It is easy to see that's not how it works:
3.times { puts BCrypt::Engine.hash_secret(""password"", BCrypt::Engine.generate_salt) }
# $2a$10$jxUToaac5UUzVRH9SnllKe52W1JMLu5tm0LwyrZ4x4e75O1FCn9Ea
# $2a$10$oBs3TyhgR/r12.cz2kdzh.O9WHVZifDPqTEg0.hGOMn7Befv.8hSy
# $2a$10$8rfQA5nzCZ74DwNrmhAhdOmoQOVhJnBfh0ikiOB0W7ZptwsLPGUwi

As the salt changes, the cyphertext also changes. Thus, you can't ""just clip the salt off the front, get the original hash back, and then run a rainbow table on the hashes as if they were never salted.""
","56","<ruby><authentication><passwords><bcrypt><salt>","1","4","2","2019-08-06 10:48:57","","0","","329443","","2019-06-21 04:26:31","2019-06-21 04:19:34",""
"56696785","Ruby BCrypt salting/hashing seems ... wrong?","I've been creating salted passwords in a ruby app what I thought was the standard way:
password_salt = BCrypt::Engine.generate_salt
password_hash = BCrypt::Engine.hash_secret(params[:pword], password_salt)

But on examining a test case, it looks like the salt is just being prepended to the hashed password:

Now, as I understand the point of salt, it's supposed to be concatenated onto the password BEFORE hashing, to push the password out of the size range that any pre-computed lookup-table, rainbow-table, etc.. could ever include. The point is, if someone gets your user database, they still can't crack the passwords using a lookup table. If the salt is prepended onto the password AFTER the hashing, and the hacker has downloaded the user table, it's not doing anything to secure the passwords. The hacker can just clip the salt off the front, get the original hash back, and then run a rainbow table on the hashes as if they were never salted.
Is this as much of a salt-fail as it appears to be? Is the problem in my code? Or is this Working As Expected And Secure for reasons I need to read up on? (Link, please.)
","I had the same Problem in Python:
passw = ""qay123""
salt = bcrypt.gensalt(14)
hashedpw = bcrypt.hashpw(passw, salt)
print salt
print hashedpw

Output:
$2b$14$fG3IoYLeIaf6gxZTHVR7eO  <--- salt
$2b$14$fG3IoYLeIaf6gxZTHVR7eOVOC08a77IDOiu4At4FKKecw1xBYKXyG <-- salt + hashedpw

So, the hashpw-function just concatenates the salt value with the hash value which is insecure, because the hacker can split salt+hashpw at position 30
and so eliminates the salt.
For rainbow-tables the hacker must be able to read the hashes, so the cutting isn't a problem. The only problem he could have, would be when the length of the salt would vary.
My thought is that you follow your own thought and use bscrypt as seemingly not intended.
","56","<ruby><authentication><passwords><bcrypt><salt>","1","0","2","2019-08-06 10:48:57","","0","","329443","","2019-06-21 04:26:31","2019-06-21 04:19:34",""
"42302584","Symetric Encryption - Salt and IV","I have been reading up on Symmetric Encryption and it appears if I want to add salt to my encryption I then would need to provide that salt value to the end user as well that wishes to decrypt the content, is this correct? Also if I wish to use an Initialization Vector(IV) I would also need to provide that to the end user that is decrypting is that correct? Or is that something that only I would need when I encrypt the content?
","The IV does not need to be secret and is often prepended to the encrypted data to make it available during decryption. The IV is generally a sequence of random bytes the length of the algorithm block size.
Salt as used in the question is undefined for encryption, you need to provide more information of how the salt related to the encryption in the question. Sometimes a salt is used when deriving an encryption key from a password.
","55","<encryption><salt>","0","2","1","2017-02-21 13:30:01","","3","","","","","2017-02-17 16:16:40",""
"49636155","reusing the salt states in the AMI image","I have several salt states(base and pillars) already written and present in Amazon s3. I want to re-use the salt states instead of writing the salt state again. I want to create an AMI image using packer and apply the salt-states that I have downloaded from s3 to the Packer Builder EC2 instance. Even if the salt-minion is installed on the CentOS -7 machine, I have installed salt-master service as well and started both salt-minion and salt-master by following commands.
cat > /etc/salt/minion.d/minion_id.conf <<'EOT' id: ${host} # id salt-minion id EOT

Generate the name of the master to connect to
cat > /etc/salt/minion.d/master_name.conf <<'EOT' master: localhost EOT

systemctl enable salt-minion 
systemctl start salt-minion
systemctl enable salt-master
systemctl start salt-master

When running the below command it doesn't list any minions:
salt-key -L Accepted Keys: Denied Keys: Unaccepted Keys: Rejected Keys:

So the salt 'localhost-*' state.sls state.high_state
 fails with errors:
""No minions matched the target. No command was sent, no jid was assigned.
ERROR: No return received""

This is because no minionid is created from salt-key.
Anybody has any idea why the salt-key is not being shown with salt-minion and how can i resolve this issue by running the existing salt-state successfully downloaded from s3 will work in AMI image?
Regards 
Pradeep
","What could be happening is that your minions can't find (resolve/DNS) the master salt.
What you could do is add the IP of your master to your minions /etc/salt/minion something like this:
master: 10.0.0.1 

Replace 10.0.0.3 with the IP of your master
Later restart your minion and check the master again for requests.
","55","<amazon-web-services><salt><salt-stack>","0","0","1","2018-04-04 19:05:56","","0","","1135424","","2018-04-04 18:59:46","2018-04-03 17:41:35",""
"53882056","How to set unique Salt Minion Ids when provisioned using vCenter","For my use case, I am provisioning VM's using pre defined VM template in vCenter. The hostname in this template is already set, also salt minion is installed with no minion_id file. Once VM is provisioned and minion service starts, it automatically sets the hostname as minion id.
Now same template is used for provisioning more machines, due to which all machines gets same minion id.
One of the way to solve the problem is to manually change the minion_id file inside the newly created VM, but due to business reasons this is not possible.
Other way I can think about to set the unique minionid in VM guest advacned option like guestinfo and read it when VM is booting up, but this can only be set when VM is in powered off state.
I need help to set the different minion ids for each VM, how can this be accomplish without going inside the provisioned VM?
","In our case, hostname collisions are a possibility. So we set the minion id to the UUID of the device. On linux that's obtainable with dmidecode -s system-uuid, there's a similar command for windows. 
","54","<salt-stack><salt><vcenter>","0","0","1","2019-01-29 04:52:05","","3","","1685980","","2018-12-21 09:23:37","2018-12-21 09:18:24",""
"50571025","Salt pkg.installed not checking installation properly","I'm currently installing Solr in a specific version, using the following Salt state:
solr_install:                                                                                                          
  pkg.installed:                                                                                                       
    - name: solr                                                                                                       
    - fromrepo: {{ repo }}                                                                                      
    - version: {{ solr_vers }}

In which solr_vers stands for 5.5.5.
After running the state, I get:
      ID: solr_install                                                                                             
Function: pkg.installed                                                                                            
    Name: solr                                                                                                     
  Result: False                                                                                                    
 Comment: The following packages failed to install/update: solr=5.5.5

But If access the server and try to install it manually, I get:
yum install solr-5.5.5
Package 1:solr-5.5.5.x86_64 already installed and latest version

How does Salt checks for the installation? 
","It seems there's an issue related to that and it's still open. https://github.com/saltstack/salt/issues/27400
What worked for me was changing the RPM version and release.
Ever since, I've been working with Solr 6.6.4 and I created my own RPM using FPM. It's release 2 and version 6.6.4, so it reads: solr-6.6.4-2. I didn't have the problem after that.
","54","<centos><salt>","0","0","1","2018-07-09 17:51:14","51251377","0","","","","","2018-05-28 17:19:33",""
"28679493","Is bruteforcing the last character of a salt a good idea?","Would it be a good idea security-wise to store salts with their last character removed, and then bruteforce the last character to further the amount of time it would take to create rainbow tables and such? This is assuming the hashing algorithm in use is Whirlpool.
This would make logins take a little longer, but it would be a restriction on bruteforcing speed that cannot be bypassed like other methods can.
Thank you in advance.
","No. Salts are meant to change the string completely - If you think the salt is easily exploit-able, You should make longer salts or change the hash. In addition, It'll take you a lot of uneccessary brute-forcing each time you use the salts.
Edit: Just to clearify, I do not think this is a bad method, but the logic is wrong here. Think of it this way - if you can bruteforce the salt, the potencial hacker can do the same. You start a race - at each point you remove more characters from the salt and try to guess who will bruteforce the salt better; and the race ends with you having no salt at all.
","54","<mysql><hash><salt>","0","1","3","2015-02-24 08:00:44","","2","","","","","2015-02-23 17:19:18",""
"28679493","Is bruteforcing the last character of a salt a good idea?","Would it be a good idea security-wise to store salts with their last character removed, and then bruteforce the last character to further the amount of time it would take to create rainbow tables and such? This is assuming the hashing algorithm in use is Whirlpool.
This would make logins take a little longer, but it would be a restriction on bruteforcing speed that cannot be bypassed like other methods can.
Thank you in advance.
","To clearify one thing: If a user tries to bruteforce some login data the salt-complexity itself does not really matter. Each little change affects the hash in a big enough way so he would need a fresh set of rainbow tables. 
Since the attacking user does not know anything about he wouldn't mind if you remove 1,2,3 - or even all characters from your salt. 
Obfuscating the salt itself is pointless. IF the attacking user somehow gets access to the salt - your database seems to be already compromised. So, in that case he wouldn't care about a correct salt anyway. 
","54","<mysql><hash><salt>","0","0","3","2015-02-24 08:00:44","","2","","","","","2015-02-23 17:19:18",""
"28679493","Is bruteforcing the last character of a salt a good idea?","Would it be a good idea security-wise to store salts with their last character removed, and then bruteforce the last character to further the amount of time it would take to create rainbow tables and such? This is assuming the hashing algorithm in use is Whirlpool.
This would make logins take a little longer, but it would be a restriction on bruteforcing speed that cannot be bypassed like other methods can.
Thank you in advance.
","No this would not be a good idea, it misses the purpose of the salt. A unique salt per password prevents an attacker from getting all passwords at once with one single rainbow-table. It does it even if the salt is known, and it's better not to mix it up with other ""improvements"".
The time you would need for the mini-brute-force game, you should better spend in a higher cost factor. That said, you should switch to an algorithm wich offers a cost factor and needs a certain amount of time to calculate the hash (BCrypt, PBKDF2 or SCrypt).
Actually you try to add a server side secret to the hash (an attacker has to find out that one character is missing and must be brute-forced). Adding such a secret can be done in a much more effective way. Just encrypt (two-way) the already calculated hash with a strong server side key, this way the attacker needs to learn about the key before he can start brute-forcing. You can find a more indepth explanation at the end of my tutorial about safely storing passwords.
","54","<mysql><hash><salt>","0","0","3","2015-02-24 08:00:44","","2","","","","","2015-02-23 17:19:18",""
"4661213","Password Question (only first couple of characters are used) > Gizmodo Situation","Ok so you know how Gnosis released gizmodo's passwords then said that their password system was so weak that all passwords could have been limited to first 8 characters and they would still work. Does that mean that if they put a 8+ character salt on it all passwords would have technically been the same (you can logg in with anything).
So that brought me to the question: 
Do password hashs use all of the string or only a portion of it? 
So is password placement with the salt important? salt + pass or pass + salt ? 
Will putting a salt length after a certain number of characters mess things up?
Thanks!
(I am using ripemd if it matters). 
","Hashes will use the whole string.  They were cutting it to save time in processing (maybe?). 
It doesnt matter where you put the salt, beggining or end, just make sure its complex enough.
","54","<php><hash><salt>","0","1","1","2011-01-11 18:40:10","4661328","0","1","","","","2011-01-11 18:28:50",""
"55648601","How can this salt and hash plan be made more secure?","Hi I am just planning my server login security for a mobile app and have made notes of a simple plan. Does it look secure, and can it be improved in any way? Thanks in advance.
Client login for the first time

Get device id from client and send to server.
Create a MD5 salt on the server and user account with new user ID.
Concatenate the salt with the device ID and User ID to create the salted password.
Create a MD5 Hash of the salted password and store the hash password in the database.
Return the user ID and Salt to the client.

Clients login again or makes a general request

Send request to server with MD5 hash generated by the client using the  salt received from server and concatenating with the device ID and User ID. Also send the device ID and user ID in plain text. 
Verify the the user device ID and user ID stored in the database are the same as sent by the client.
Verify that MD5 hash sent by the user is the same as the hash stored in the database for that users device.
Validate and continue with processing the request.

","If security is a concern I would not recommend using the device ID as a password for the following reasons:

It is not secret information and may be sent in plain text in many network calls to many servers meaning it could be easily obtained by a third party.
It cannot be easily changed if a malicious third party obtains it.
If the phone changes hands the id will remain the same allowing the new phone owner to log in as the previous user.

An alternative approach would obviously be to let the user choose their own password, however I'm guessing you have already considered that and you are choosing to use the device ID as it makes the experience as frictionless as possible for your user.
I would therefore recommend generating a uuid when the user installs the app and storing this in the devices secure storage (key store / key chain). On the first request send this up to the server along with the user id.  A temporary session id should be generated and returned to the client which can then be used to authenticate successive requests.
Also MD5 should not be used for password hashing as it is not  resistant to brute force attacks. A better choice of algorithm would bcrypt or pbkdf2.
","54","<security><hash><salt>","0","0","1","2019-04-12 22:57:41","55660401","5","","8557739","","2019-04-12 09:39:44","2019-04-12 09:31:17",""
"35698196","Is there an application that can intercept data between a login interface and a database server?","I wish to extract login details entered into a web interface and alter them before they reach the database server.  This is for a project where the intention is to create an app that allows for more secure passwords that are salted and hashed (for use on legacy systems).  

I have created a WAMP server and have the webpages and database linked and operational.  
I have written a Java app to make the required changes to the passwords.  

Problem
I thought I could use RESTful services to extract the username and password, but it didn't work.  
Is there any app that will allow me to do this?  
I'm apprehensive to stage a Man in the Middle attack as it kind of defeats the purpose of making the system more secure.  Thanks
","","54","<security><hash><salt><legacy><man-in-the-middle>","0","","0","2016-02-29 11:22:49","","6","","213032","","2016-02-29 11:22:49","2016-02-29 11:18:31",""
"30118426","adding salt to a password","Is there really a point in salting a password?
if a program does all the processing of a SALT server side then does it really make it any more difficult for brute force or other attack. The code is only going to apply the salt to whatever is entered by a user.
Do I have this all wrong?
","In a word, yes.
Salting a password adds a level of complexity to the string and confuses humans, and makes dictionary attacks less likely to succeed.
Brute force can still crack this password however, hence the need for a randomly generated salt. 
Salts are typically generated via byte-arrays, which is then fed into a function to combine the two strings into one at intervals. See my answer here.
","54","<hash><passwords><salt>","0","0","4","2015-05-08 11:18:48","","1","","","","","2015-05-08 07:40:14",""
"30118426","adding salt to a password","Is there really a point in salting a password?
if a program does all the processing of a SALT server side then does it really make it any more difficult for brute force or other attack. The code is only going to apply the salt to whatever is entered by a user.
Do I have this all wrong?
","The hashes may be leaked without the salt (common scenario: database gets dumped, but a salt i present in PHP source that does not leak). 
","54","<hash><passwords><salt>","0","0","4","2015-05-08 11:18:48","","1","","","","","2015-05-08 07:40:14",""
"30118426","adding salt to a password","Is there really a point in salting a password?
if a program does all the processing of a SALT server side then does it really make it any more difficult for brute force or other attack. The code is only going to apply the salt to whatever is entered by a user.
Do I have this all wrong?
","You are right in a way but ... the most significant protection from SALT is that if the hashes ever do get released into the wild then reverse hash lookups are much much harder.
Hash a word and then put the hash result into your favourite search engine to see what I mean.
","54","<hash><passwords><salt>","0","0","4","2015-05-08 11:18:48","","1","","","","","2015-05-08 07:40:14",""
"30118426","adding salt to a password","Is there really a point in salting a password?
if a program does all the processing of a SALT server side then does it really make it any more difficult for brute force or other attack. The code is only going to apply the salt to whatever is entered by a user.
Do I have this all wrong?
","Yes, there is a point in salting a password.
The point is that each password has its own salt, so that an attacker can't make use of dictionaries and rainbow tables to brute force all passwords at once.
The salt doesn't make it harder to crack a single password¹, but it removes the benefit from attempting to crack multiple passwords at once. An attacker has to brute force one password at a time.

¹ At least not enough to be a good reason to use it. Using better passwords works much better.
","54","<hash><passwords><salt>","0","1","4","2015-05-08 11:18:48","","1","","","","","2015-05-08 07:40:14",""
"30704868","Trouble validating md5 hashed password with randomly generated salt?","I realize this is not as secure as it could be, but I want to do it this way. 
I have this code which generates the password from a user's entry ($password)... 
$salt = mcrypt_create_iv(22, MCRYPT_DEV_URANDOM);
$new_password = md5($salt . $password);
$new_password = $salt . $new_password;

This is how I'm trying to check against the saved password: 
$split_salt = substr($saved_password, 0, 22);
$incomplete_password = md5($split_salt . $current_password);
$hashed_password = $split_salt . $incomplete_password;

if ($saved_password != $hashed_password) {

    $error = ""error"";

} else {

     //Validated

}

As far as I can tell this should work. However, I'm getting the error instead of the validation. Does this have something to do with MCRYPT not producing exactly 22 characters?
","I know this is not what you want to hear, but your scheme is so utterly unsafe and a good solution is so simple to implement, that you should reconsider:
// Hash a new password for storing in the database.
// The function automatically generates a cryptographically safe salt.
$hashToStoreInDb = password_hash($password, PASSWORD_DEFAULT);

// Check if the hash of the entered login password, matches the stored hash.
// The salt and the cost factor will be extracted from $existingHashFromDb.
$isPasswordCorrect = password_verify($password, $existingHashFromDb);

Your actual problem is the salt, mcrypt_create_iv() will return a binary string and it can very well contain \0 characters. So it is pure luck if your approach works or not.
","54","<php><hash><md5><salt><password-hash>","0","2","1","2015-06-08 20:50:35","","1","","575765","","2015-06-08 20:50:35","2015-06-08 08:54:28",""
"55575430","How to automaticly show salt minions in Foreman?","I did set up salt and Foreman like described in the Installation guides on a RHEL7 machine (https://repo.saltstack.com/#rhel, https://theforeman.org/manuals/1.21/index.html#2.Quickstart and https://www.theforeman.org/plugins/foreman_salt/7.0/index.html)
The problem is that i don´t see my salt-minions in Foreman. I would except the salt-minions to show up in foreman (""all hosts"") as soon as they are accepted by the salt-master. Does anyone know how salt and foreman are working together on this matter?
Foreman knows the salt-master because it is configured as smart Proxy in foreman. When the salt master Need to accept some minion-key it can be done by foreman. Maybe the salt-master needs to report the new minions somehow to foreman...
","Found the error in /var/log/salt/master:
2019-04-09 10:34:49,243 [salt.loaded.int.module.cmdmod:1182][ERROR   ][29609] Command '/usr/bin/foreman-node myprojekt_myenv_hostname.exmaple.com' failed with return code: 1
2019-04-09 10:34:49,244 [salt.loaded.int.module.cmdmod:1187][ERROR   ][29609] output: /usr/share/gems/gems/smart_proxy_salt-2.1.9/bin/foreman-node:187:in `<top (required)>': Invalid hostname (RuntimeError)
        from /usr/bin/foreman-node:23:in `load'
        from /usr/bin/foreman-node:23:in `<main>'

I found out that the problem here is that somehow the minion id instad of the minion hostname is checked in /usr/share/gems/gems/smart_proxy_salt-2.1.9/bin/foreman-node. My minion id was something like 'myprojekt_myenv_hostname.exmaple.com' and it doesn´t pass the regex, so salt throws ""Invalid hostname (RuntimeError)"".
After changing the minion to it´s hostname they appeared in Foreman.
","54","<salt-stack><salt><foreman><theforeman>","0","0","1","2019-04-09 09:28:10","","0","","","","","2019-04-08 14:10:40",""
"50365621","RabbitMQ post install failiure","We've upgraded RabbitMQ from version 3.2.1-1 To version 3.5.6-1.
In version 3.2.1-1:
We get these responses

    [root@]# rabbitmqctl list_vhosts
    Listing vhosts ...
    /
    /sensu
    ...done.
    [root@]# rabbitmqctl list_queues
    Listing queues ...
    ...done.
    [root@]# rabbitmqctl list_users
    Listing users ...
    guest   [administrator]
    sensu   [sensu]
    ...done.



    In version 3.5.6-1:
    we get these responses:

    [root@]# rabbitmqctl list_queues
    Listing queues ...
    [root@]# rabbitmqctl list_vhosts
    Listing vhosts ...
    /
    /sensu
    [root@]# rabbitmqctl list_users
    Listing users ...
    guest   [administrator]
    sensu   [sensu]  

So ""...done."" was removed, however, the salt version we have now uses this module:
/usr/lib/python2.6/site-packages/salt/modules/rabbitmq.py
Which looks for  ""...done."" and omits it from the response. That’s the reason for postinstall errors (attached).
I’ve tried to fix python script and replace it, however, postinstall still fails.
Am I missing a step here? Why replacing the file with the fix didn’t solve the issue, do I need to restart some service after replacing the python script?
I’ve attached also the original and the fixed script.
Original:
# -*- coding: utf-8 -*-
'''
Module to provide RabbitMQ compatibility to Salt.
Todo: A lot, need to add cluster support, logging, and minion configuration
data.
'''
from __future__ import absolute_import

# Import python libs
import json
import logging
import random
import string

# Import salt libs
import salt.utils
import salt.utils.itertools
import salt.ext.six as six
from salt.exceptions import SaltInvocationError
from salt.ext.six.moves import range
from salt.exceptions import CommandExecutionError

log = logging.getLogger(__name__)


def __virtual__():
    '''
    Verify RabbitMQ is installed.
    '''
    return salt.utils.which('rabbitmqctl') is not None


def _format_response(response, msg):
    error = 'RabbitMQ command failed: {0}'.format(response)
    if isinstance(response, dict):
        if response['retcode'] != 0:
            raise CommandExecutionError(error)
        else:
            msg = response['stdout']
    else:
        if 'Error' in response:
            raise CommandExecutionError(error)
    return {
        msg: response
    }


def _get_rabbitmq_plugin():
    '''
    Returns the rabbitmq-plugin command path if we're running an OS that
    doesn't put it in the standard /usr/bin or /usr/local/bin
    This works by taking the rabbitmq-server version and looking for where it
    seems to be hidden in /usr/lib.
    '''
    rabbitmq = salt.utils.which('rabbitmq-plugins')

    if rabbitmq is None:
        version = __salt__['pkg.version']('rabbitmq-server').split('-')[0]

        rabbitmq = ('/usr/lib/rabbitmq/lib/rabbitmq_server-{0}'
                    '/sbin/rabbitmq-plugins').format(version)

    return rabbitmq


def _safe_output(line):
    '''
    Looks for rabbitmqctl warning, or general formatting, strings that aren't
    intended to be parsed as output.
    Returns a boolean whether the line can be parsed as rabbitmqctl output.
    '''
    return not any([
        line.startswith('Listing') and line.endswith('...'),
        '...done' in line,
        line.startswith('WARNING:')
    ])


def _strip_listing_to_done(output_list):
    '''
    Conditionally remove non-relevant first and last line,
    ""Listing ..."" - ""...done"".
    outputlist: rabbitmq command output split by newline
    return value: list, conditionally modified, may be empty.
    '''
    return [line for line in output_list if _safe_output(line)]


def _output_to_dict(cmdoutput, values_mapper=None):
    '''
    Convert rabbitmqctl output to a dict of data
    cmdoutput: string output of rabbitmqctl commands
    values_mapper: function object to process the values part of each line
    '''
    ret = {}
    if values_mapper is None:
        values_mapper = lambda string: string.split('\t')

    # remove first and last line: Listing ... - ...done
    data_rows = _strip_listing_to_done(cmdoutput.splitlines())

    for row in data_rows:
        try:
            key, values = row.split('\t', 1)
        except ValueError:
            # If we have reached this far, we've hit an edge case where the row
            # only has one item: the key. The key doesn't have any values, so we
            # set it to an empty string to preserve rabbitmq reporting behavior.
            # e.g. A user's permission string for '/' is set to ['', '', ''],
            # Rabbitmq reports this only as '/' from the rabbitmqctl command.
            log.debug('Could not find any values for key \'{0}\'. '
                      'Setting to \'{0}\' to an empty string.'.format(row))
            ret[row] = ''
            continue
        ret[key] = values_mapper(values)
    return ret


def list_users(runas=None):
    '''
    Return a list of users based off of rabbitmqctl user_list.

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.list_users
    '''
    if runas is None:
        runas = salt.utils.get_user()
    res = __salt__['cmd.run'](
        ['rabbitmqctl', 'list_users'],
        runas=runas,
        python_shell=False)

    # func to get tags from string such as ""[admin, monitoring]""
    func = lambda string: set([x.strip() for x in string[1:-1].split(',')])
    return _output_to_dict(res, func)


def list_vhosts(runas=None):
    '''
    Return a list of vhost based on rabbitmqctl list_vhosts.

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.list_vhosts
    '''
    if runas is None:
        runas = salt.utils.get_user()
    res = __salt__['cmd.run']('rabbitmqctl list_vhosts -q',
                              runas=runas).splitlines()
    return res


def user_exists(name, runas=None):
    '''
    Return whether the user exists based on rabbitmqctl list_users.

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.user_exists rabbit_user
    '''
    if runas is None:
        runas = salt.utils.get_user()
    user_list = list_users(runas=runas)
    log.debug(user_list)

    return name in user_list


def vhost_exists(name, runas=None):
    '''
    Return whether the vhost exists based on rabbitmqctl list_vhosts.

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.vhost_exists rabbit_host
    '''
    if runas is None:
        runas = salt.utils.get_user()
    return name in list_vhosts(runas=runas)


def add_user(name, password=None, runas=None):
    '''
    Add a rabbitMQ user via rabbitmqctl user_add <user> <password>

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.add_user rabbit_user password
    '''
    clear_pw = False

    if password is None:
        # Generate a random, temporary password. RabbitMQ requires one.
        clear_pw = True
        password = ''.join(random.SystemRandom().choice(
            string.ascii_uppercase + string.digits) for x in range(15))

    if runas is None:
        runas = salt.utils.get_user()
    res = __salt__['cmd.run'](
        ['rabbitmqctl', 'add_user', name, password],
        output_loglevel='quiet',
        runas=runas,
        python_shell=False)

    if clear_pw:
        # Now, Clear the random password from the account, if necessary
        res2 = clear_password(name, runas)

        if 'Error' in res2:
            # Clearing the password failed. We should try to cleanup
            # and rerun and error.
            delete_user(name, runas)
            msg = 'Error'
            return _format_response(res2, msg)

    msg = 'Added'
    return _format_response(res, msg)


def delete_user(name, runas=None):
    '''
    Deletes a user via rabbitmqctl delete_user.

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.delete_user rabbit_user
    '''
    if runas is None:
        runas = salt.utils.get_user()
    res = __salt__['cmd.run'](
        ['rabbitmqctl', 'delete_user', name],
        python_shell=False,
        runas=runas)
    msg = 'Deleted'

    return _format_response(res, msg)


def change_password(name, password, runas=None):
    '''
    Changes a user's password.

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.change_password rabbit_user password
    '''
    if runas is None:
        runas = salt.utils.get_user()
    res = __salt__['cmd.run'](
        ['rabbitmqctl', 'change_password', name, password],
        runas=runas,
        output_loglevel='quiet',
        python_shell=False)
    msg = 'Password Changed'

    return _format_response(res, msg)


def clear_password(name, runas=None):
    '''
    Removes a user's password.

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.clear_password rabbit_user
    '''
    if runas is None:
        runas = salt.utils.get_user()
    res = __salt__['cmd.run'](
        ['rabbitmqctl', 'clear_password', name],
        runas=runas,
        python_shell=False)
    msg = 'Password Cleared'

    return _format_response(res, msg)


def check_password(name, password, runas=None):
    '''
    .. versionadded:: 2016.3.0

    Checks if a user's password is valid.

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.check_password rabbit_user password
    '''
    # try to get the rabbitmq-version - adapted from _get_rabbitmq_plugin
    try:
        version = [int(i) for i in __salt__['pkg.version']('rabbitmq-server').split('-')[0].split('.')]
    except ValueError:
        version = (0, 0, 0)
    if len(version) < 3:
        version = (0, 0, 0)

    if runas is None:
        runas = salt.utils.get_user()

    # rabbitmq introduced a native api to check a username and password in version 3.5.7.
    if tuple(version) >= (3, 5, 7):
        res = __salt__['cmd.run'](
            ['rabbitmqctl', 'authenticate_user', name, password],
            runas=runas,
            output_loglevel='quiet',
            python_shell=False)
        msg = 'password-check'
        return _format_response(res, msg)

    cmd = ('rabbit_auth_backend_internal:check_user_login'
        '(<<""{0}"">>, [{{password, <<""{1}"">>}}]).').format(
        name.replace('""', '\\""'),
        password.replace('""', '\\""'))

    res = __salt__['cmd.run'](
        ['rabbitmqctl', 'eval', cmd],
        runas=runas,
        output_loglevel='quiet',
        python_shell=False)
    msg = 'password-check'

    _response = _format_response(res, msg)
    _key = _response.keys()[0]

    if 'invalid credentials' in _response[_key]:
        return False

    return True


def add_vhost(vhost, runas=None):
    '''
    Adds a vhost via rabbitmqctl add_vhost.

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq add_vhost '<vhost_name>'
    '''
    if runas is None:
        runas = salt.utils.get_user()
    res = __salt__['cmd.run'](
        ['rabbitmqctl', 'add_vhost', vhost],
        runas=runas,
        python_shell=False)

    msg = 'Added'
    return _format_response(res, msg)


def delete_vhost(vhost, runas=None):
    '''
    Deletes a vhost rabbitmqctl delete_vhost.

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.delete_vhost '<vhost_name>'
    '''
    if runas is None:
        runas = salt.utils.get_user()
    res = __salt__['cmd.run'](
        ['rabbitmqctl', 'delete_vhost', vhost],
        runas=runas,
        python_shell=False)
    msg = 'Deleted'
    return _format_response(res, msg)


def set_permissions(vhost, user, conf='.*', write='.*', read='.*', runas=None):
    '''
    Sets permissions for vhost via rabbitmqctl set_permissions

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.set_permissions 'myvhost' 'myuser'
    '''
    if runas is None:
        runas = salt.utils.get_user()
    res = __salt__['cmd.run'](
        ['rabbitmqctl', 'set_permissions', '-p',
         vhost, user, conf, write, read],
        runas=runas,
        python_shell=False)
    msg = 'Permissions Set'
    return _format_response(res, msg)


def list_permissions(vhost, runas=None):
    '''
    Lists permissions for vhost via rabbitmqctl list_permissions

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.list_permissions '/myvhost'
    '''
    if runas is None:
        runas = salt.utils.get_user()
    res = __salt__['cmd.run'](
        ['rabbitmqctl', 'list_permissions', '-p', vhost],
        runas=runas,
        python_shell=False)

    return _output_to_dict(res)


def list_user_permissions(name, runas=None):
    '''
    List permissions for a user via rabbitmqctl list_user_permissions

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.list_user_permissions 'user'.
    '''
    if runas is None:
        runas = salt.utils.get_user()
    res = __salt__['cmd.run'](
        ['rabbitmqctl', 'list_user_permissions', name],
        runas=runas,
        python_shell=False)

    return _output_to_dict(res)


def set_user_tags(name, tags, runas=None):
    '''Add user tags via rabbitmqctl set_user_tags

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.set_user_tags 'myadmin' 'administrator'
    '''
    if runas is None:
        runas = salt.utils.get_user()

    if tags and isinstance(tags, (list, tuple)):
        tags = ' '.join(tags)

    res = __salt__['cmd.run'](
        ['rabbitmqctl', 'set_user_tags', name, tags],
        runas=runas,
        python_shell=False)
    msg = ""Tag(s) set""
    return _format_response(res, msg)


def status(runas=None):
    '''
    return rabbitmq status

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.status
    '''
    if runas is None:
        runas = salt.utils.get_user()
    res = __salt__['cmd.run'](
        ['rabbitmqctl', 'status'],
        runas=runas,
        python_shell=False)
    return res


def cluster_status(runas=None):
    '''
    return rabbitmq cluster_status

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.cluster_status
    '''
    if runas is None:
        runas = salt.utils.get_user()
    res = __salt__['cmd.run'](
        ['rabbitmqctl', 'cluster_status'],
        runas=runas,
        python_shell=False)

    return res


def join_cluster(host, user='rabbit', ram_node=None, runas=None):
    '''
    Join a rabbit cluster

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.join_cluster 'rabbit.example.com' 'rabbit'
    '''
    cmd = ['rabbitmqctl', 'join_cluster']
    if ram_node:
        cmd.append('--ram')
    cmd.append('{0}@{1}'.format(user, host))

    if runas is None:
        runas = salt.utils.get_user()
    stop_app(runas)
    res = __salt__['cmd.run'](cmd, runas=runas, python_shell=False)
    start_app(runas)

    return _format_response(res, 'Join')


def stop_app(runas=None):
    '''
    Stops the RabbitMQ application, leaving the Erlang node running.

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.stop_app
    '''
    if runas is None:
        runas = salt.utils.get_user()
    return __salt__['cmd.run'](
        ['rabbitmqctl', 'stop_app'],
        runas=runas,
        python_shell=False)


def start_app(runas=None):
    '''
    Start the RabbitMQ application.

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.start_app
    '''
    if runas is None:
        runas = salt.utils.get_user()
    return __salt__['cmd.run'](
        ['rabbitmqctl', 'start_app'],
        runas=runas,
        python_shell=False)


def reset(runas=None):
    '''
    Return a RabbitMQ node to its virgin state

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.reset
    '''
    if runas is None:
        runas = salt.utils.get_user()
    return __salt__['cmd.run'](
        ['rabbitmqctl', 'reset'],
        runas=runas,
        python_shell=False)


def force_reset(runas=None):
    '''
    Forcefully Return a RabbitMQ node to its virgin state

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.force_reset
    '''
    if runas is None:
        runas = salt.utils.get_user()
    return __salt__['cmd.run'](
        ['rabbitmqctl', 'force_reset'],
        runas=runas,
        python_shell=False)


def list_queues(runas=None, *args):
    '''
    Returns queue details of the / virtual host

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.list_queues messages consumers
    '''
    if runas is None:
        runas = salt.utils.get_user()
    cmd = ['rabbitmqctl', 'list_queues']
    cmd.extend(args)
    return __salt__['cmd.run'](cmd, runas=runas, python_shell=False)


def list_queues_vhost(vhost, runas=None, *args):
    '''
    Returns queue details of specified virtual host. This command will consider
    first parameter as the vhost name and rest will be treated as
    queueinfoitem. For getting details on vhost ``/``, use :mod:`list_queues
    <salt.modules.rabbitmq.list_queues>` instead).

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.list_queues messages consumers
    '''
    if runas is None:
        runas = salt.utils.get_user()
    cmd = ['rabbitmqctl', 'list_queues', '-p', vhost]
    cmd.extend(args)
    return __salt__['cmd.run'](cmd, runas=runas, python_shell=False)


def list_policies(vhost=""/"", runas=None):
    '''
    Return a dictionary of policies nested by vhost and name
    based on the data returned from rabbitmqctl list_policies.

    Reference: http://www.rabbitmq.com/ha.html

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.list_policies'
    '''
    ret = {}
    if runas is None:
        runas = salt.utils.get_user()
    output = __salt__['cmd.run'](
        ['rabbitmqctl', 'list_policies', '-p', vhost],
        runas=runas,
        python_shell=False)
    for line in salt.utils.itertools.split(output, '\n'):
        if '...' not in line:
            parts = line.split('\t')
            if len(parts) not in (5, 6):
                continue
            vhost, name = parts[0], parts[1]
            if vhost not in ret:
                ret[vhost] = {}
            ret[vhost][name] = {}
            # How many fields are there? - 'apply_to' was inserted in position
            # 2 at some point
            offset = len(parts) - 5
            if len(parts) == 6:
                ret[vhost][name]['apply_to'] = parts[2]
            ret[vhost][name].update({
                'pattern': parts[offset+2],
                'definition': parts[offset+3],
                'priority': parts[offset+4]
            })
    log.debug('Listing policies: {0}'.format(ret))
    return ret


def set_policy(vhost, name, pattern, definition, priority=None, runas=None):
    '''
    Set a policy based on rabbitmqctl set_policy.

    Reference: http://www.rabbitmq.com/ha.html

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.set_policy / HA '.*' '{""ha-mode"":""all""}'
    '''
    if runas is None:
        runas = salt.utils.get_user()
    if isinstance(definition, dict):
        definition = json.dumps(definition)
    if not isinstance(definition, six.string_types):
        raise SaltInvocationError(
            'The \'definition\' argument must be a dictionary or JSON string'
        )
    cmd = ['rabbitmqctl', 'set_policy', '-p', vhost]
    if priority:
        cmd.extend(['--priority', priority])
    cmd.extend([name, pattern, definition])
    res = __salt__['cmd.run'](cmd, runas=runas, python_shell=False)
    log.debug('Set policy: {0}'.format(res))
    return _format_response(res, 'Set')


def delete_policy(vhost, name, runas=None):
    '''
    Delete a policy based on rabbitmqctl clear_policy.

    Reference: http://www.rabbitmq.com/ha.html

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.delete_policy / HA'
    '''
    if runas is None:
        runas = salt.utils.get_user()
    res = __salt__['cmd.run'](
        ['rabbitmqctl', 'clear_policy', '-p', vhost, name],
        runas=runas,
        python_shell=False)
    log.debug('Delete policy: {0}'.format(res))
    return _format_response(res, 'Deleted')


def policy_exists(vhost, name, runas=None):
    '''
    Return whether the policy exists based on rabbitmqctl list_policies.

    Reference: http://www.rabbitmq.com/ha.html

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.policy_exists / HA
    '''
    if runas is None:
        runas = salt.utils.get_user()
    policies = list_policies(runas=runas)
    return bool(vhost in policies and name in policies[vhost])


def plugin_is_enabled(name, runas=None):
    '''
    Return whether the plugin is enabled.

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.plugin_is_enabled foo
    '''
    if runas is None:
        runas = salt.utils.get_user()
    cmd = [_get_rabbitmq_plugin(), 'list', '-m', '-e']
    ret = __salt__['cmd.run_all'](cmd, python_shell=False, runas=runas)
    if ret['retcode'] != 0:
        raise CommandExecutionError(
            'RabbitMQ command failed: {0}'.format(ret['stderr'])
        )
    return bool(name in ret['stdout'])


def enable_plugin(name, runas=None):
    '''
    Enable a RabbitMQ plugin via the rabbitmq-plugins command.

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.enable_plugin foo
    '''
    if runas is None:
        runas = salt.utils.get_user()
    cmd = [_get_rabbitmq_plugin(), 'enable', name]
    ret = __salt__['cmd.run_all'](cmd, runas=runas, python_shell=False)
    return _format_response(ret, 'Enabled')


def disable_plugin(name, runas=None):
    '''
    Disable a RabbitMQ plugin via the rabbitmq-plugins command.

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.disable_plugin foo
    '''
    if runas is None:
        runas = salt.utils.get_user()
    cmd = [_get_rabbitmq_plugin(), 'disable', name]
    ret = __salt__['cmd.run_all'](cmd, runas=runas, python_shell=False)
    return _format_response(ret, 'Disabled')

Fixed:
def _strip_listing_to_done(output_list):
    '''
    Conditionally remove non-relevant first and last line,
    ""Listing ..."" - ""...done"".
    outputlist: rabbitmq command output split by newline
    return value: list, conditionally modified, may be empty.
    '''

    # conditionally remove non-relevant first line
    f_line = ''.join(output_list[:1])
    if f_line.startswith('Listing') and f_line.endswith('...'):
        output_list.pop(0)

    # some versions of rabbitmq have no trailing '...done' line,
    # which some versions do not output.
    l_line = ''.join(output_list[-1:])
    if l_line == '...done':
        output_list.pop()

    return output_list

Here is the error i'm getting:
[user@ ]$ sudo rabbitmqctl eval 'rabbit_auth_backend_internal:check_user_login(<<""user"">>, [{password, <<""password"">>}]).'
Error: {undef,
           [{rabbit_auth_backend_internal,check_user_login,
                [<<""user"">>,[{password,<<""password"">>}]]},
            {erl_eval,do_apply,5},
            {rpc,'-handle_call_call/6-fun-0-',5}]}

","    # -*- coding: utf-8 -*-
'''
Module to provide RabbitMQ compatibility to Salt.
Todo: A lot, need to add cluster support, logging, and minion configuration
data.
'''
from __future__ import absolute_import

# Import python libs
import json
import logging
import random
import string

# Import salt libs
import salt.utils
import salt.utils.itertools
import salt.ext.six as six
from salt.exceptions import SaltInvocationError
from salt.ext.six.moves import range
from salt.exceptions import CommandExecutionError

log = logging.getLogger(__name__)


def __virtual__():
    '''
    Verify RabbitMQ is installed.
    '''
    return salt.utils.which('rabbitmqctl') is not None


def _format_response(response, msg):
    error = 'RabbitMQ command failed: {0}'.format(response)
    if isinstance(response, dict):
        if response['retcode'] != 0:
            raise CommandExecutionError(error)
        else:
            msg = response['stdout']
    else:
        if 'Error' in response:
            raise CommandExecutionError(error)
    return {
        msg: response
    }


def _get_rabbitmq_plugin():
    '''
    Returns the rabbitmq-plugin command path if we're running an OS that
    doesn't put it in the standard /usr/bin or /usr/local/bin
    This works by taking the rabbitmq-server version and looking for where it
    seems to be hidden in /usr/lib.
    '''
    rabbitmq = salt.utils.which('rabbitmq-plugins')

    if rabbitmq is None:
        version = __salt__['pkg.version']('rabbitmq-server').split('-')[0]

        rabbitmq = ('/usr/lib/rabbitmq/lib/rabbitmq_server-{0}'
                    '/sbin/rabbitmq-plugins').format(version)

    return rabbitmq


def _safe_output(line):
    '''
    Looks for rabbitmqctl warning, or general formatting, strings that aren't
    intended to be parsed as output.
    Returns a boolean whether the line can be parsed as rabbitmqctl output.
    '''

    return not any([
        line.startswith('Listing') and line.endswith('...'),
        line.startswith('Listing') and '\t' not in line,
        '...done' in line,
        line.startswith('WARNING:')
    ])


def _strip_listing_to_done(output_list):
    '''
    Conditionally remove non-relevant first and last line,
    ""Listing ..."" - ""...done"".
    outputlist: rabbitmq command output split by newline
    return value: list, conditionally modified, may be empty.
    '''

    return [line for line in output_list if _safe_output(line)]


def _output_to_dict(cmdoutput, values_mapper=None):
    '''
    Convert rabbitmqctl output to a dict of data
    cmdoutput: string output of rabbitmqctl commands
    values_mapper: function object to process the values part of each line
    '''
    ret = {}
    if values_mapper is None:
        values_mapper = lambda string: string.split('\t')

    # remove first and last line: Listing ... - ...done
    # data_rows = _strip_listing_to_done(cmdoutput.splitlines())
    data_rows = cmdoutput.splitlines()

    for row in data_rows:
        try:
            key, values = row.split('\t', 1)
        except ValueError:
            # If we have reached this far, we've hit an edge case where the row
            # only has one item: the key. The key doesn't have any values, so we
            # set it to an empty string to preserve rabbitmq reporting behavior.
            # e.g. A user's permission string for '/' is set to ['', '', ''],
            # Rabbitmq reports this only as '/' from the rabbitmqctl command.
            log.debug('Could not find any values for key \'{0}\'. '
                      'Setting to \'{0}\' to an empty string.'.format(row))
            ret[row] = ''
            continue
        ret[key] = values_mapper(values)
    return ret


def list_users(runas=None):
    '''
    Return a list of users based off of rabbitmqctl user_list.

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.list_users
    '''
    if runas is None:
        runas = salt.utils.get_user()
    res = __salt__['cmd.run'](
        ['rabbitmqctl', 'list_users'],
        runas=runas,
        python_shell=False)

    # func to get tags from string such as ""[admin, monitoring]""
    func = lambda string: set([x.strip() for x in string[1:-1].split(',')])
    return _output_to_dict(res, func)


def list_vhosts(runas=None):
    '''
    Return a list of vhost based on rabbitmqctl list_vhosts.

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.list_vhosts
    '''
    if runas is None:
        runas = salt.utils.get_user()
    res = __salt__['cmd.run']('rabbitmqctl list_vhosts -q',
                              runas=runas).splitlines()
    return res


def user_exists(name, runas=None):
    '''
    Return whether the user exists based on rabbitmqctl list_users.

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.user_exists rabbit_user
    '''
    if runas is None:
        runas = salt.utils.get_user()
    user_list = list_users(runas=runas)
    log.debug(user_list)

    return name in user_list


def vhost_exists(name, runas=None):
    '''
    Return whether the vhost exists based on rabbitmqctl list_vhosts.

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.vhost_exists rabbit_host
    '''
    if runas is None:
        runas = salt.utils.get_user()
    return name in list_vhosts(runas=runas)


def add_user(name, password=None, runas=None):
    '''
    Add a rabbitMQ user via rabbitmqctl user_add <user> <password>

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.add_user rabbit_user password
    '''
    clear_pw = False

    if password is None:
        # Generate a random, temporary password. RabbitMQ requires one.
        clear_pw = True
        password = ''.join(random.SystemRandom().choice(
            string.ascii_uppercase + string.digits) for x in range(15))

    if runas is None:
        runas = salt.utils.get_user()
    res = __salt__['cmd.run'](
        ['rabbitmqctl', 'add_user', name, password],
        output_loglevel='quiet',
        runas=runas,
        python_shell=False)

    if clear_pw:
        # Now, Clear the random password from the account, if necessary
        res2 = clear_password(name, runas)

        if 'Error' in res2:
            # Clearing the password failed. We should try to cleanup
            # and rerun and error.
            delete_user(name, runas)
            msg = 'Error'
            return _format_response(res2, msg)

    msg = 'Added'
    return _format_response(res, msg)


def delete_user(name, runas=None):
    '''
    Deletes a user via rabbitmqctl delete_user.

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.delete_user rabbit_user
    '''
    if runas is None:
        runas = salt.utils.get_user()
    res = __salt__['cmd.run'](
        ['rabbitmqctl', 'delete_user', name],
        python_shell=False,
        runas=runas)
    msg = 'Deleted'

    return _format_response(res, msg)


def change_password(name, password, runas=None):
    '''
    Changes a user's password.

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.change_password rabbit_user password
    '''
    if runas is None:
        runas = salt.utils.get_user()
    res = __salt__['cmd.run'](
        ['rabbitmqctl', 'change_password', name, password],
        runas=runas,
        output_loglevel='quiet',
        python_shell=False)
    msg = 'Password Changed'

    return _format_response(res, msg)


def clear_password(name, runas=None):
    '''
    Removes a user's password.

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.clear_password rabbit_user
    '''
    if runas is None:
        runas = salt.utils.get_user()
    res = __salt__['cmd.run'](
        ['rabbitmqctl', 'clear_password', name],
        runas=runas,
        python_shell=False)
    msg = 'Password Cleared'

    return _format_response(res, msg)


def check_password(name, password, runas=None):
    '''
    .. versionadded:: 2016.3.0

    Checks if a user's password is valid.

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.check_password rabbit_user password
    '''
    # try to get the rabbitmq-version - adapted from _get_rabbitmq_plugin
    try:
        version = [int(i) for i in __salt__['pkg.version']('rabbitmq-server').split('-')[0].split('.')]
    except ValueError:
        version = (0, 0, 0)
    if len(version) < 3:
        version = (0, 0, 0)

    if runas is None:
        runas = salt.utils.get_user()

    # rabbitmq introduced a native api to check a username and password in version 3.5.7.
    if tuple(version) >= (3, 5, 7):
        res = __salt__['cmd.run'](
            ['rabbitmqctl', 'authenticate_user', name, password],
            runas=runas,
            output_loglevel='quiet',
            python_shell=False)
        msg = 'password-check'
        return _format_response(res, msg)

    cmd = ('rabbit_auth_backend_internal:user_login_authentication'
        '(<<""{0}"">>, [{{password, <<""{1}"">>}}]).').format(
        name.replace('""', '\\""'),
        password.replace('""', '\\""'))

    res = __salt__['cmd.run'](
        ['rabbitmqctl', 'eval', cmd],
        runas=runas,
        output_loglevel='quiet',
        python_shell=False)
    msg = 'password-check'

    _response = _format_response(res, msg)
    _key = _response.keys()[0]

    if 'invalid credentials' in _response[_key]:
        return False

    return True


def add_vhost(vhost, runas=None):
    '''
    Adds a vhost via rabbitmqctl add_vhost.

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq add_vhost '<vhost_name>'
    '''
    if runas is None:
        runas = salt.utils.get_user()
    res = __salt__['cmd.run'](
        ['rabbitmqctl', 'add_vhost', vhost],
        runas=runas,
        python_shell=False)

    msg = 'Added'
    return _format_response(res, msg)


def delete_vhost(vhost, runas=None):
    '''
    Deletes a vhost rabbitmqctl delete_vhost.

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.delete_vhost '<vhost_name>'
    '''
    if runas is None:
        runas = salt.utils.get_user()
    res = __salt__['cmd.run'](
        ['rabbitmqctl', 'delete_vhost', vhost],
        runas=runas,
        python_shell=False)
    msg = 'Deleted'
    return _format_response(res, msg)


def set_permissions(vhost, user, conf='.*', write='.*', read='.*', runas=None):
    '''
    Sets permissions for vhost via rabbitmqctl set_permissions

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.set_permissions 'myvhost' 'myuser'
    '''
    if runas is None:
        runas = salt.utils.get_user()
    res = __salt__['cmd.run'](
        ['rabbitmqctl', 'set_permissions', '-p',
         vhost, user, conf, write, read],
        runas=runas,
        python_shell=False)
    msg = 'Permissions Set'
    return _format_response(res, msg)


def list_permissions(vhost, runas=None):
    '''
    Lists permissions for vhost via rabbitmqctl list_permissions

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.list_permissions '/myvhost'
    '''
    if runas is None:
        runas = salt.utils.get_user()
    res = __salt__['cmd.run'](
        ['rabbitmqctl', 'list_permissions', '-p', vhost],
        runas=runas,
        python_shell=False)

    return _output_to_dict(res)


def list_user_permissions(name, runas=None):
    '''
    List permissions for a user via rabbitmqctl list_user_permissions

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.list_user_permissions 'user'.
    '''
    if runas is None:
        runas = salt.utils.get_user()
    res = __salt__['cmd.run'](
        ['rabbitmqctl', 'list_user_permissions', name],
        runas=runas,
        python_shell=False)

    return _output_to_dict(res)


def set_user_tags(name, tags, runas=None):
    '''Add user tags via rabbitmqctl set_user_tags

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.set_user_tags 'myadmin' 'administrator'
    '''
    if runas is None:
        runas = salt.utils.get_user()

    if tags and isinstance(tags, (list, tuple)):
        tags = ' '.join(tags)

    res = __salt__['cmd.run'](
        ['rabbitmqctl', 'set_user_tags', name, tags],
        runas=runas,
        python_shell=False)
    msg = ""Tag(s) set""
    return _format_response(res, msg)


def status(runas=None):
    '''
    return rabbitmq status

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.status
    '''
    if runas is None:
        runas = salt.utils.get_user()
    res = __salt__['cmd.run'](
        ['rabbitmqctl', 'status'],
        runas=runas,
        python_shell=False)
    return res


def cluster_status(runas=None):
    '''
    return rabbitmq cluster_status

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.cluster_status
    '''
    if runas is None:
        runas = salt.utils.get_user()
    res = __salt__['cmd.run'](
        ['rabbitmqctl', 'cluster_status'],
        runas=runas,
        python_shell=False)

    return res


def join_cluster(host, user='rabbit', ram_node=None, runas=None):
    '''
    Join a rabbit cluster

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.join_cluster 'rabbit.example.com' 'rabbit'
    '''
    cmd = ['rabbitmqctl', 'join_cluster']
    if ram_node:
        cmd.append('--ram')
    cmd.append('{0}@{1}'.format(user, host))

    if runas is None:
        runas = salt.utils.get_user()
    stop_app(runas)
    res = __salt__['cmd.run'](cmd, runas=runas, python_shell=False)
    start_app(runas)

    return _format_response(res, 'Join')


def stop_app(runas=None):
    '''
    Stops the RabbitMQ application, leaving the Erlang node running.

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.stop_app
    '''
    if runas is None:
        runas = salt.utils.get_user()
    return __salt__['cmd.run'](
        ['rabbitmqctl', 'stop_app'],
        runas=runas,
        python_shell=False)


def start_app(runas=None):
    '''
    Start the RabbitMQ application.

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.start_app
    '''
    if runas is None:
        runas = salt.utils.get_user()
    return __salt__['cmd.run'](
        ['rabbitmqctl', 'start_app'],
        runas=runas,
        python_shell=False)


def reset(runas=None):
    '''
    Return a RabbitMQ node to its virgin state

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.reset
    '''
    if runas is None:
        runas = salt.utils.get_user()
    return __salt__['cmd.run'](
        ['rabbitmqctl', 'reset'],
        runas=runas,
        python_shell=False)


def force_reset(runas=None):
    '''
    Forcefully Return a RabbitMQ node to its virgin state

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.force_reset
    '''
    if runas is None:
        runas = salt.utils.get_user()
    return __salt__['cmd.run'](
        ['rabbitmqctl', 'force_reset'],
        runas=runas,
        python_shell=False)


def list_queues(runas=None, *args):
    '''
    Returns queue details of the / virtual host

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.list_queues messages consumers
    '''
    if runas is None:
        runas = salt.utils.get_user()
    cmd = ['rabbitmqctl', 'list_queues']
    cmd.extend(args)
    return __salt__['cmd.run'](cmd, runas=runas, python_shell=False)


def list_queues_vhost(vhost, runas=None, *args):
    '''
    Returns queue details of specified virtual host. This command will consider
    first parameter as the vhost name and rest will be treated as
    queueinfoitem. For getting details on vhost ``/``, use :mod:`list_queues
    <salt.modules.rabbitmq.list_queues>` instead).

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.list_queues messages consumers
    '''
    if runas is None:
        runas = salt.utils.get_user()
    cmd = ['rabbitmqctl', 'list_queues', '-p', vhost]
    cmd.extend(args)
    return __salt__['cmd.run'](cmd, runas=runas, python_shell=False)


def list_policies(vhost=""/"", runas=None):
    '''
    Return a dictionary of policies nested by vhost and name
    based on the data returned from rabbitmqctl list_policies.

    Reference: http://www.rabbitmq.com/ha.html

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.list_policies'
    '''
    ret = {}
    if runas is None:
        runas = salt.utils.get_user()
    output = __salt__['cmd.run'](
        ['rabbitmqctl', 'list_policies', '-p', vhost],
        runas=runas,
        python_shell=False)
    for line in salt.utils.itertools.split(output, '\n'):
        if '...' not in line:
            parts = line.split('\t')
            if len(parts) not in (5, 6):
                continue
            vhost, name = parts[0], parts[1]
            if vhost not in ret:
                ret[vhost] = {}
            ret[vhost][name] = {}
            # How many fields are there? - 'apply_to' was inserted in position
            # 2 at some point
            offset = len(parts) - 5
            if len(parts) == 6:
                ret[vhost][name]['apply_to'] = parts[2]
            ret[vhost][name].update({
                'pattern': parts[offset+2],
                'definition': parts[offset+3],
                'priority': parts[offset+4]
            })
    log.debug('Listing policies: {0}'.format(ret))
    return ret


def set_policy(vhost, name, pattern, definition, priority=None, runas=None):
    '''
    Set a policy based on rabbitmqctl set_policy.

    Reference: http://www.rabbitmq.com/ha.html

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.set_policy / HA '.*' '{""ha-mode"":""all""}'
    '''
    if runas is None:
        runas = salt.utils.get_user()
    if isinstance(definition, dict):
        definition = json.dumps(definition)
    if not isinstance(definition, six.string_types):
        raise SaltInvocationError(
            'The \'definition\' argument must be a dictionary or JSON string'
        )
    cmd = ['rabbitmqctl', 'set_policy', '-p', vhost]
    if priority:
        cmd.extend(['--priority', priority])
    cmd.extend([name, pattern, definition])
    res = __salt__['cmd.run'](cmd, runas=runas, python_shell=False)
    log.debug('Set policy: {0}'.format(res))
    return _format_response(res, 'Set')


def delete_policy(vhost, name, runas=None):
    '''
    Delete a policy based on rabbitmqctl clear_policy.

    Reference: http://www.rabbitmq.com/ha.html

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.delete_policy / HA'
    '''
    if runas is None:
        runas = salt.utils.get_user()
    res = __salt__['cmd.run'](
        ['rabbitmqctl', 'clear_policy', '-p', vhost, name],
        runas=runas,
        python_shell=False)
    log.debug('Delete policy: {0}'.format(res))
    return _format_response(res, 'Deleted')


def policy_exists(vhost, name, runas=None):
    '''
    Return whether the policy exists based on rabbitmqctl list_policies.

    Reference: http://www.rabbitmq.com/ha.html

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.policy_exists / HA
    '''
    if runas is None:
        runas = salt.utils.get_user()
    policies = list_policies(runas=runas)
    return bool(vhost in policies and name in policies[vhost])


def plugin_is_enabled(name, runas=None):
    '''
    Return whether the plugin is enabled.

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.plugin_is_enabled foo
    '''
    if runas is None:
        runas = salt.utils.get_user()
    cmd = [_get_rabbitmq_plugin(), 'list', '-m', '-e']
    ret = __salt__['cmd.run_all'](cmd, python_shell=False, runas=runas)
    if ret['retcode'] != 0:
        raise CommandExecutionError(
            'RabbitMQ command failed: {0}'.format(ret['stderr'])
        )
    return bool(name in ret['stdout'])


def enable_plugin(name, runas=None):
    '''
    Enable a RabbitMQ plugin via the rabbitmq-plugins command.

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.enable_plugin foo
    '''
    if runas is None:
        runas = salt.utils.get_user()
    cmd = [_get_rabbitmq_plugin(), 'enable', name]
    ret = __salt__['cmd.run_all'](cmd, runas=runas, python_shell=False)
    return _format_response(ret, 'Enabled')


def disable_plugin(name, runas=None):
    '''
    Disable a RabbitMQ plugin via the rabbitmq-plugins command.

    CLI Example:

    .. code-block:: bash

        salt '*' rabbitmq.disable_plugin foo
    '''
    if runas is None:
        runas = salt.utils.get_user()
    cmd = [_get_rabbitmq_plugin(), 'disable', name]
    ret = __salt__['cmd.run_all'](cmd, runas=runas, python_shell=False)
    return _format_response(ret, 'Disabled')

","53","<python><rabbitmq><salt>","0","0","1","2018-05-18 13:55:08","","3","","1020852","","2018-05-17 14:08:00","2018-05-16 08:14:55",""
"51926997","How can I clone a running gitlab to a test-server and upgrade it?","we've been using GitLab for about a year now and are trying to find an approach to update the system.
Environment:
GitLab 10.1 to GitLab 11.1
installed on SLES CSB 3.1
installed with SALTSTACK (GitLab RPM)
3 Servers (Int, Qual, Live)
Goal:
Our goal is to duplicate (or copy) the live-system into the qual-system (both on 10.2.4). Then we want to update the qual-system to 11.4 and run our tests. If the tests are OK, we want to update the live-system.
Question:
What is the best way to duplicate (or copy) the live-system into the qual-system and how is it possible to update by salt, without changing the data from GitLab?
","Not sure whether this answers your question exactly, but you will need to copy over the /etc/gitlab/gitlab-secrets.json file to ensure the encrypted data held in the backing database can be used on the target server.

Ensure your target server is running the same version of GitLab as your source server (it's likely you won't be able to restore a backup from an older version to a server running a newer version)
Take a full backup from your source server gitlab-rake gitlab:backup:create --trace
Copy the backup over to your target server
Restore the backup with gitlab-rake gitlab:backup:restore BACKUP=<epoch>_YYYY_MM_DD_V.V.V (note, not the whole backup filename, just that portion of it without extension)

Once you have verified the server works, and you're ready to make the switch you will need to repeat the backup / restore process to make sure you picked up changes that happened since first sync (sorry, probably stating the obvious).
Consider using sudo gitlab-ctl deploy-page up to prevent users accessing the UI during this process (you can use sudo gitlab-ctl deploy-page down to restore access).
Finally, once you've migrated your installation to the new server you can perform an upgrade to the latest version.
","53","<version-control><gitlab><updates><salt><salt-stack>","0","1","1","2018-08-21 18:35:37","51935003","0","","7538945","","2018-08-21 10:39:31","2018-08-20 08:40:36",""
"13585604","How to encrypt user data while keeping it viewable in site manager?","I am building a web app and want to ensure that we go about encrypting user data the right way.
This data is not highly sensitive (like medical records or CC numbers) but I think it should be stored securely nonetheless - just simply name, company, position, telephone number, email address. And password of course - but this will secured using hash/salt...
I want to store the user data securely to guard against the site being hacked/server compromised. But I also need the customer names, organisations, telephone numbers and email addresses to be visible to the site administrators - ie visible in the back end.
The passwords will not be visible to site admins of course...
I would appreciate some advice on how I should go about this - I want to do enough to be ""reasonably"" secure without going overboard - like I say the data is not extremely sensitive and the site itself is not one anyone would be embarrassed to be a member of...
many thanks.
","Hashing is a process of calculating irreversible (or alamost irreversible) one way function to data. So you probably ment encryption. 
As to application level encrytpion in this context you can do this but it will only protect from someone dumping a raw database and reading it. To provide functionality of administrative view you have to encrypt everything with one key. And decrypt it on the fly in your webapp, what is worth pointing out is that if your application is vulerable to SQL incjection this could mean that despite of encryption someone will be able to extract the data. Becaouse your app might decrypt it thinking that is a part of legitimate data flow. 
Encrypting data would introduce another problem what with narrowing selects on those fields ? You would have to encrypt params before passing. But you would have to use the same IV to match field values. But in order to use valid IV you would have to know exact record in db from which extract InitializationVector. As i said it can be tricky.
I personally think that encryption is a last resort and should be used only when absolutley necessary. Becouse when solving confidentiality problem it introduces a key management problem which can be bigger. And I think that is your case. 
","52","<security><encryption><salt>","0","0","1","2012-11-27 16:18:08","","0","","","","","2012-11-27 13:45:16",""
"32928971","Does a salt increase security with PHP 5.5's hashing function","I know that PHP 5.5's new hashing function doesn't have to use a user-specified salt, but would it increase security? I've been doing a bit of reading and from what I understand, the hashing function uses a random salt each time which it can retrieve from the hash value when it comes time to verify a hash. But would there be any advantage at all to generating your own salts and using them? Any detriment?
","Seems you've got a few misunderstandings here.
Once the hash is generated, the whole idea is that it is completely one way. That means, from the message digest of a secure hashing algorithm, there is no way to know what the salt was. I've seen people store the salt in another column, for example.
Salts are designed to create entropy in your message digest set. And to prevent attacks using Rainbow tables. The salt adds an element of randomness to the message digest, beyond what the algorithm and the original value can do. 
The detriment to trying to be clever and using your own hash is the realisation that you're probably not as clever as the security experts who wrote the APIs available to you. Seriously, when it comes to security, you can't leverage it against your mind. The human brain is prone to faults; it's why we work in teams. And a team of experts made random hash generators for you. Seriously, use them.
","51","<security><hash><salt><php-5.5>","0","0","2","2015-10-05 12:26:25","32948601","1","","","","","2015-10-04 00:49:50",""
"32928971","Does a salt increase security with PHP 5.5's hashing function","I know that PHP 5.5's new hashing function doesn't have to use a user-specified salt, but would it increase security? I've been doing a bit of reading and from what I understand, the hashing function uses a random salt each time which it can retrieve from the hash value when it comes time to verify a hash. But would there be any advantage at all to generating your own salts and using them? Any detriment?
","
I know that PHP 5.5's new hashing function doesn't have to use a user-specified salt, but would it increase security?

Assuming you are talking about password_hash, then no. It has all the salt you need built-in and there would be no advantage to adding any more.
No detriment either, except that more code = more complexity = more likelihood of bugs.
","51","<security><hash><salt><php-5.5>","0","2","2","2015-10-05 12:26:25","32948601","1","","","","","2015-10-04 00:49:50",""
"15424801","Create a cookie that is accesibe from JS only and no being sent with every request/","Is it possible to create a cookie that will stay available for the client's browser but won't be sent with the header of each request?
I want to send session salt via HTTPS and then let the user encrypt with it and send the encrypted data via HTTP with each request,
Is there a way not to send the salt with the encrypted data?
","Look into localStorage or sessionStorage. Note that polyfills for this feature usually follow a cookie-based approach, but going with a purely localStorage or sessionStorage solution will cause no data to be sent with the headers on each page load.
","51","<javascript><session><cookies><salt>","0","4","2","2013-03-15 04:55:24","15424849","2","","","","","2013-03-15 04:33:50",""
"15424801","Create a cookie that is accesibe from JS only and no being sent with every request/","Is it possible to create a cookie that will stay available for the client's browser but won't be sent with the header of each request?
I want to send session salt via HTTPS and then let the user encrypt with it and send the encrypted data via HTTP with each request,
Is there a way not to send the salt with the encrypted data?
","A cookie will be sent on every request as that is what they are for. localStorage is what you need, but is unavailable for older browsers. 
If you require it to work in an older browser you can try a few things.
1: store the code in session on the server
2: pass the code in the querystring to other pages 
3: make a full ajax page so you dont have to switch sites
4: create a hidden frame to store the data (worst option)
","51","<javascript><session><cookies><salt>","0","0","2","2013-03-15 04:55:24","15424849","2","","","","","2013-03-15 04:33:50",""
"53216247","C# PasswordDeriveBytes: seems that Salt does'nt matter","probably I misunderstood something.
The following code produces two equal keys by CryptDeriveKey with two different salt.
That is the console result:
salt1: 21 3e 18 a3 9a 8b 5f 
--> Key da 89 ea 3d 91 08 20 98 20 e9 dc 45 d5 97 10 7f 8f 4a 52 15 26 68 ef 83
salt2: 9e db 4c 2b 49 b4 24 
--> Key da 89 ea 3d 91 08 20 98 20 e9 dc 45 d5 97 10 7f 8f 4a 52 15 26 68 ef 83
What is my mistake?
using System;
using System.Security.Cryptography;

namespace PasswordDeriveBytes_SaltDoesntMatter
{
    class Program
    {
        // for usage in CreateAndPrintKeyAndSalt
        private static readonly string password = ""secret123"";
        private static readonly TripleDESCryptoServiceProvider cryptoServiceProvider = new TripleDESCryptoServiceProvider();

        static void Main(string[] args)
        {
            byte[] salt1 = new byte[] { 33, 62, 24, 163, 154, 139, 95 };
            byte[] salt2 = new byte[] { 158, 219, 76, 43, 73, 180, 36 };

            // a TripleDESCryptoServiceProvider-instance for getting an IV

            CreateAndPrintKeyAndSalt(""salt1"", salt1);
            CreateAndPrintKeyAndSalt(""salt2"", salt2);
            Console.ReadKey();

        }

        /// <summary>
        /// print the salt and the CryptDeriveKey based on this salt
        /// !! uses the const password and cryptoServiceProvider
        /// </summary>
        /// <param name=""saltName"">name of the used salt</param>
        /// <param name=""salt"">the used salt</param>
        /// <param name=""cryptoServiceProvider""></param>
        private static void CreateAndPrintKeyAndSalt(string saltName, byte[] salt)
        {
            PasswordDeriveBytes pdb = new PasswordDeriveBytes(password, salt);
            byte[] aKey = pdb.CryptDeriveKey(""TripleDES"", ""SHA1"", 192, cryptoServiceProvider.IV);
            Console.WriteLine($""{saltName}: {ByteArrayInHexText(salt)} --> Key {ByteArrayInHexText(aKey)}"");
        }    

        /// <summary>
        /// returns a Textstring of each byte in arr in hex-formatting separated by space
        /// </summary>
        /// <param name=""arr"">the array</param>
        /// <returns>the formatted string</returns>
        public static string ByteArrayInHexText(byte[] arr)
        {
            string s = """";
            foreach (var item in arr)
            {
                s += $"" {item:x2}"";
            }
            return s.Substring(1);
        }

    }
}

","According to this MSDN blog:

When calling CryptDeriveKey, the salt and iteration count that are set
  on the PasswordDeriveBytes object are not used, so even having
  different salts and iteration counts will produce the same key given
  that the rest of the inputs are also the same.

","49","<c#><salt><cryptostream>","2","2","1","2018-11-08 22:04:10","","0","","9248451","","2018-11-08 21:22:15","2018-11-08 21:16:17",""
"57850716","How to check match for salted and hashed password","I'm researching password security and user log-in, and more specifically storing and matching salted password hashes in databases. I understand the basics of salting and hashing, but I don't understand how I am supposed to check against the stored hash-value on a log-in attempt, when the salt is randomly generated before every hash?
public static void test(String password) throws NoSuchAlgorithmException, InvalidKeySpecException {
    int iterations = 65536;
    char[] passChar = password.toCharArray();
    SecureRandom random = SecureRandom.getInstance(""SHA1PRNG"");
    byte[] salt = new byte[16];
    random.nextBytes(salt);

    PBEKeySpec spec = new PBEKeySpec(passChar, salt, iterations, 512);
    SecretKeyFactory factory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
    byte[] hash = factory.generateSecret(spec).getEncoded();

    System.out.println(iterations + "":\n"" + toHex(salt) + "":\n"" + toHex(hash));
}

","The salt of the password should be stored alongside the hash. Sometimes this is done as a part of the hash (e.g. the first x characters of the hash are the salt), sometimes separately (e.g. another column).
When checking the password, you should not generate a new random salt, but instead use the one generated and stored before. 
So you create another hash using the user-provided password and the stored salt, and then check if this matches the stored hash. 
Most passwordEncoders provide a method that does this for you, for example, check out this article that explains how to use BCrypt Password Encoder.
","49","<java><salt><password-hash><secure-random>","1","2","1","2019-09-09 09:35:05","57851366","4","1","","","","2019-09-09 08:55:14",""
"27020381","My generated salts are both exactly the same","So, I'm 'randomly' generating two salts for use with later encryption and hashing. These are generated during the application's install process and then copied into a global configurations file via:
file_put_contents()

Now, when these are generated, I can view them in my 'globalParams.php' file. They are stored as values of an array, but this array is not utilised at all in this installation process.
The code for generation is as follows:
// Let's generate some encryption salts:

    $options = [
    'cost' => 12,
    'salt' => mcrypt_create_iv(32, MCRYPT_DEV_URANDOM),];

    $salt = password_hash(mt_rand(), PASSWORD_BCRYPT, $options);
    $salt = password_hash($salt, PASSWORD_BCRYPT, $options);

    $salt2 = password_hash(mt_rand(), PASSWORD_BCRYPT, $options);
    $salt2 = password_hash($salt2, PASSWORD_BCRYPT, $options);

After this, they  are placed into the config file like so:
// Let's open up our template globalParams.php and replace some strings..

      $editFile = file_get_contents('newGlobalParams.php');

      $editFile = str_replace( ""database_hostname"", $hostname, $editFile );
      $editFile = str_replace( ""database_username"", $dbUser, $editFile );
      $editFile = str_replace( ""database_password"", $dbPass, $editFile );
      $editFile = str_replace( ""database_name"", $database, $editFile );

      $editFile = str_replace( ""encryption_salt"", $salt, $editFile );
      $editFile = str_replace( ""encryption_salt2"", $salt2, $editFile );

      // Replace the original globalParams.php now that the system is set up..

      file_put_contents('../_includes/globalParams.php', $editFile);

And these are example outputs:
$parameters['main']['salt']   = ""$2y$12$cLSGeEoau5/4NEZ3Fe8qquxwUBc6aL5fmcYUlQtavdoIY1L7NKnaG"";
$parameters['main']['salt2']   = ""$2y$12$cLSGeEoau5/4NEZ3Fe8qquxwUBc6aL5fmcYUlQtavdoIY1L7NKnaG2"";

Why are they identical, but with an appended 2?
More code, including the entire installer file, can be posted if needed..
Ta.
Edit:
Here are the results that are echoed right after generation:
$2y$12$uuZoLwioBePD9aDozrOJkus3e/DuShspaqKzzCDVne6BwVsyDkBA2
$2y$12$uuZoLwioBePD9aDozrOJkuicthSCvq2mpGTQlKNGZ.jLUUrfSDEq.

Values dumped to 'globalParams.php':
$parameters['main']['salt']   = ""$2y$12$uuZoLwioBePD9aDozrOJkus3e/DuShspaqKzzCDVne6BwVsyDkBA2"";
$parameters['main']['salt2']   = ""$2y$12$uuZoLwioBePD9aDozrOJkus3e/DuShspaqKzzCDVne6BwVsyDkBA22"";

Template of 'globalParams.php':
<?php

// Global configurations file

$parameters['dbC']['hostname']  = ""database_hostname"";
$parameters['dbC']['username']  = ""database_username"";
$parameters['dbC']['password']  = ""database_password"";
$parameters['dbC']['database']  = ""database_name"";

$parameters['main']['salt']   = ""encryption_salt"";
$parameters['main']['salt2']   = ""encryption_salt2"";

session_start(); // Start the session, ready for the user to login with.
putenv( ""TZ=Europe/London"" ); // Set the timezone for cookies and the sessions.

require_once('databaseFunctions.php');
require_once('coreFunctions.php');

if(file_exists('_install/')) { // Ensures no malicious user can reinstall the application using their own data..

    exit( ""Please delete the \""install\"" directory."" );

}

","The problem is this:
$editFile = str_replace( ""encryption_salt"", $salt, $editFile );
$editFile = str_replace( ""encryption_salt2"", $salt2, $editFile );

You are replacing the encryption_salt in encryption_salt2 on the first replacement.
Then the second replacement does nothing because the pattern encryption_salt2 no longer exists.
","49","<php><encryption><hash><salt>","0","3","2","2014-11-20 12:50:26","27021719","4","","939458","","2014-11-19 15:55:41","2014-11-19 15:17:26",""
"27020381","My generated salts are both exactly the same","So, I'm 'randomly' generating two salts for use with later encryption and hashing. These are generated during the application's install process and then copied into a global configurations file via:
file_put_contents()

Now, when these are generated, I can view them in my 'globalParams.php' file. They are stored as values of an array, but this array is not utilised at all in this installation process.
The code for generation is as follows:
// Let's generate some encryption salts:

    $options = [
    'cost' => 12,
    'salt' => mcrypt_create_iv(32, MCRYPT_DEV_URANDOM),];

    $salt = password_hash(mt_rand(), PASSWORD_BCRYPT, $options);
    $salt = password_hash($salt, PASSWORD_BCRYPT, $options);

    $salt2 = password_hash(mt_rand(), PASSWORD_BCRYPT, $options);
    $salt2 = password_hash($salt2, PASSWORD_BCRYPT, $options);

After this, they  are placed into the config file like so:
// Let's open up our template globalParams.php and replace some strings..

      $editFile = file_get_contents('newGlobalParams.php');

      $editFile = str_replace( ""database_hostname"", $hostname, $editFile );
      $editFile = str_replace( ""database_username"", $dbUser, $editFile );
      $editFile = str_replace( ""database_password"", $dbPass, $editFile );
      $editFile = str_replace( ""database_name"", $database, $editFile );

      $editFile = str_replace( ""encryption_salt"", $salt, $editFile );
      $editFile = str_replace( ""encryption_salt2"", $salt2, $editFile );

      // Replace the original globalParams.php now that the system is set up..

      file_put_contents('../_includes/globalParams.php', $editFile);

And these are example outputs:
$parameters['main']['salt']   = ""$2y$12$cLSGeEoau5/4NEZ3Fe8qquxwUBc6aL5fmcYUlQtavdoIY1L7NKnaG"";
$parameters['main']['salt2']   = ""$2y$12$cLSGeEoau5/4NEZ3Fe8qquxwUBc6aL5fmcYUlQtavdoIY1L7NKnaG2"";

Why are they identical, but with an appended 2?
More code, including the entire installer file, can be posted if needed..
Ta.
Edit:
Here are the results that are echoed right after generation:
$2y$12$uuZoLwioBePD9aDozrOJkus3e/DuShspaqKzzCDVne6BwVsyDkBA2
$2y$12$uuZoLwioBePD9aDozrOJkuicthSCvq2mpGTQlKNGZ.jLUUrfSDEq.

Values dumped to 'globalParams.php':
$parameters['main']['salt']   = ""$2y$12$uuZoLwioBePD9aDozrOJkus3e/DuShspaqKzzCDVne6BwVsyDkBA2"";
$parameters['main']['salt2']   = ""$2y$12$uuZoLwioBePD9aDozrOJkus3e/DuShspaqKzzCDVne6BwVsyDkBA22"";

Template of 'globalParams.php':
<?php

// Global configurations file

$parameters['dbC']['hostname']  = ""database_hostname"";
$parameters['dbC']['username']  = ""database_username"";
$parameters['dbC']['password']  = ""database_password"";
$parameters['dbC']['database']  = ""database_name"";

$parameters['main']['salt']   = ""encryption_salt"";
$parameters['main']['salt2']   = ""encryption_salt2"";

session_start(); // Start the session, ready for the user to login with.
putenv( ""TZ=Europe/London"" ); // Set the timezone for cookies and the sessions.

require_once('databaseFunctions.php');
require_once('coreFunctions.php');

if(file_exists('_install/')) { // Ensures no malicious user can reinstall the application using their own data..

    exit( ""Please delete the \""install\"" directory."" );

}

","Flosculus already answered your question, but nevertheless i would like to point out some other details.
The way you generate the ""salts"" is very expensive. I'm not sure what the purpose of them is, there are actually four possibilities:

Used as key for encryption
Used as IV for encryption
Used as key/pepper for password hashing
Used as salt for password hashing

To hash passwords (case 4) it would be better to leave out the salt parameter completely, password_hash() will then automatically generate a safe salt for each password. It is absolutely unnecessary and bad for your servers cpu to use key-stretching for a salt, the same salt should not be used for more than one password, and you loose entropy creating it this way.
The same goes for encryption. If you need a key (case 1), then just generate some random bytes and use bin2hex() for storing them readable in a config file. If you need an IV (case 2), you should generate it for each text you want to encrypt, and store it with your encrypted string. An IV should not be used for more than one encrypted string.
","49","<php><encryption><hash><salt>","0","0","2","2014-11-20 12:50:26","27021719","4","","939458","","2014-11-19 15:55:41","2014-11-19 15:17:26",""
"37326786","Can't login after binding 'salt' with hashing algorithm PHP/MySQL","I have the following code which is correct and working fine,it creates a salt value when entered into the MySQL database..
The issue I am facing is when trying to login with the while using the salted value, something is missing from my code (2nd bit of code on this post is the login which) the one causing issues.
$result = $conn->prepare(""INSERT INTO members (name, username, email, salt, password, age, gender, gender_of_dogs) VALUES (:name, :username, :email, :salt, :password, :age, :gender, :gender_of_dogs)"");
$result->bindParam(':name', $value1);
$result->bindParam(':username', $value2);
$result->bindParam(':email', $value3);
$result->bindParam(':salt', $salt);
$result->bindParam(':password', $hashedPassword);
$result->bindParam(':age', $value5);
$result->bindParam(':gender', $value6);
$result->bindParam(':gender_of_dogs', $value7);

$value1 = $_POST['name'];
$value2 = $_POST['username'];
$value3 = $_POST['email'];

$salt = uniqid('', true);

$value4 = $_POST['password'];
$value5 = $_POST['age'];
$value6 = $_POST['gender'];
$value7 = implode(',', $_POST['gender_of_dogs']);

$hashedPassword = md5($salt.$value4);
$result->execute();

echo ""<h2>Thank you for registering, <br> You will now be redirected to the homepage...</h2>"";
header( ""refresh:5; url=../index.php"" );

Below is the code when trying to login, it will not let me login as it is not getting the unique salt value in the MySQL database.
( At least I think that is the issue. )
include('../db_connect.inc');

$username = $_POST['username'];
$password = $_POST['password'];
$salt = $_POST['salt'];
$hashedPassword = md5($salt.$password);

$query = $conn->prepare(""Select * from dog_parks.members where username = :username_login and password = :password_login "");
$query->bindParam(':username_login', $username);
$query->bindParam(':password_login', $hashedPassword);
$query->execute();
$count = $query->rowCount();
$row = $query->fetch();

if ($count > 0) {
    session_start();
    $_SESSION['id'] = $row['username'];

    header('location:home.php');
}

Error message received

","$query->bindParam(':username_login', $username); 
is bad.
It should be changed to this: 
(':username', $value2);

and add in the else case
","49","<php><mysql><salt>","0","0","1","2016-05-19 15:36:49","","7","","6209665","","2016-05-19 15:28:13","2016-05-19 14:47:56","2016-05-19 14:55:38"
"23926533","Salt practices clarification","I was recently reading Application Security For The Android Platform by Jeff Six and I came across a statement that I found puzzling. In the encryption section while describing salts and hashing functions this statement was made

Just like with IVs [Initialization Vector], salt values should be random but they do not need to be kept secret.

Is this true? Because my understanding of salts and hashing functions was that this statement is just  wrong and the salt needs to be protected because if the salt is released a new rainbow table can be generated making the salt unnecessary? Is this correct? Or does the salt really not have to be kept secret and why is this? 
","The salt doesn't have to be kept secret because it will be a 64-bit or 128-bit random number, and the attacker would be unable to use any rainbow table that didn't incorporate that salt. In effect, the attacker would be brute-forcing each individual password (because each password will have its own salt, of course — no two passwords should be hashed with the same salt).
The rainbow table attack is based on storing precomputed hashes for all possible password inputs (up to a certain length, naturally). It is infeasible to store rainbow tables for every conceivable salt of 128-bit complexity: a rainbow table to cover just single byte passwords that accounts for 128-bit salts would be approximately 280 Terabytes (that's 1027: one thousand trillion trillion 1TB hard drives).
","49","<encryption><salt><hash-function><rainbowtable>","0","1","1","2014-07-10 16:31:20","23926813","2","","3282276","","2014-05-29 05:50:38","2014-05-29 05:48:14","2014-05-29 23:49:13"
"54603427","I have few question in PHP, Please tell me","I have few PHP questions:
1) Is password_hash() full safe or I should use a salt, pepper or create own hashing alghoritm? and if hash is not secure How I convert it to a salt with hash manner to create strong algorithm?
Because I never made salt yet? Please tell me the short code in php.
2) What is better and safer reCaptcha v2 or reCaptcha v3?
3) Is good to check is user logged with $_SESSION['logged'] = true or it is risky?
4) How to check is website full safe, resistant to attacks and it hasn't got any errors?
5) If i make something like this:
<!DOCTYPE html>
<head>
<?php
require_once 'head.php';
?>
</head>
<body>

</body>
</html>

Will be website correctly indexed by Google?
6) How to increment website SEO?
Thanks for every answer.
","If you don't know what to do, go look for a php package on packagist.org. This one looks good enough: https://packagist.org/packages/delight-im/auth
for 4 use unit testing: PHPunit is the standard nowadays.
Worry about 5 and 6 after you have built and successfully hosted the website.
","49","<php><security><hash><passwords><salt>","0","0","1","2019-02-09 06:08:41","","4","1","","","","2019-02-09 05:14:07",""
"43387251","Decrypting url string with given password and salt","this will be somehow vague, because I don't know how to properly approach this issue.
A third party has given me a URL with encrypted data in it. I need to decrypt it and use the data from the URL string in my form.
The Url looks something like this:
https://url?data1=5y3Dg55FlK9wj1kJQYL6jKxyK3%2bXdXzYzc%2fgp9o%3d&data2=0P7Fsdf4LeuTosdf3kwwA%3d%3d
All I've got is a decrypting password and a decrypting salt. It is supposed to be done with an AES encryption in 128bit. I absolutely don't know how I combine the password + salt and test if I can get real data by decrypting one string.
Note: The strings are url encoded. 
CAn somebody push me in the right direction?
Thanks!
","What code have you already tried?  What language are you using?  Is the value of ""data1"" in the URL the encrypted password - if so, where do you get the salt value?  Please provide more information - I don't know enough to even push you in the right direction currently.
","48","<string><security><encryption><passwords><salt>","0","-1","2","2017-06-20 14:14:33","","1","","","","","2017-04-13 08:32:06",""
"43387251","Decrypting url string with given password and salt","this will be somehow vague, because I don't know how to properly approach this issue.
A third party has given me a URL with encrypted data in it. I need to decrypt it and use the data from the URL string in my form.
The Url looks something like this:
https://url?data1=5y3Dg55FlK9wj1kJQYL6jKxyK3%2bXdXzYzc%2fgp9o%3d&data2=0P7Fsdf4LeuTosdf3kwwA%3d%3d
All I've got is a decrypting password and a decrypting salt. It is supposed to be done with an AES encryption in 128bit. I absolutely don't know how I combine the password + salt and test if I can get real data by decrypting one string.
Note: The strings are url encoded. 
CAn somebody push me in the right direction?
Thanks!
","If I understand this correctly, the encrypted data is the URI staring after data1. You said you have the password and thr hash, now all you need is to put that information into a decryption function for aes128. If you're looking for help with this step, we will need to know what language you're using.
After decryption, you'll get an urlencoded string and then you just need to un-urlencode it to get the original data. 
","48","<string><security><encryption><passwords><salt>","0","0","2","2017-06-20 14:14:33","","1","","","","","2017-04-13 08:32:06",""
"12134972","is random salting causing login not to work?","I have a situation with my login page, for some strange reason it just does not allow the user to log in, even though I write in the correct username and password in the text fields. It keeps displaying the message that username or password is incorrect. Does anyone know why it is doing this?
Lets say the user's details are this:
Username: j.lu
Password cricket

In the database it stores these details like this:
Username      Password

j.lu          21dfc92f24a130b9259aa650378a3170

It stores the password like this in the database because I am including salt.
But does anyone see if I have done something wrong in the login page because it does not login a user at all?
","You need to store the salts generated when the user is registered, so you can determine the correct hash when the user tries to log in.
The purpose of the salt is to render rainbow tables ineffective. They don't need to be secret (any more secret than the password hash, at any rate), so store it in the same table.
","47","<php><mysqli><salt>","0","2","1","2012-08-27 09:30:01","12135026","21","","1394925","","2012-08-27 09:30:01","2012-08-27 00:16:27",""
"50605045","Salt state.apply getting failed when run multiple times","We are trying to setup a proxy using salt state files.. 
Initially my proxy.sls file runs perfectly from master without any errors. When i run the same command again it gets failed.. 
I run the below command from salt-master 
[root@omsstusaltmgmt ~]# salt ""proxy"" state.apply
As i said initially it will be successful and when i run the same command it gets failed.. as below.. 
**up_oms_st_proxy1:
      ID: git
Function: pkg.installed
  Result: False
 Comment: Unable to run command '[u'rpm', u'-qa', u'--queryformat', u'%{NAME}_|-%{EPOCH}_|-%{VERSION}_|-%{RELEASE}_|-%{ARCH}_|-(none)_|-%{INSTALLTIME}\n']' with the context '{u'timeout': None, u'with_communicate': True, u'shell': False, u'bg': False, u'stderr': -2, u'env': {'LC_NUMERIC': 'C', 'HTTP_PROXY': '216.203.5.248:9090', 'LC_CTYPE': 'C', 'LESSOPEN': '||/usr/bin/lesspipe.sh %s', 'SSH_CLIENT': '10.139.65.217 49284 22', 'SELINUX_USE_CURRENT_RANGE': '', 'LOGNAME': 'root', 'USER'** 


      **ID: unzip
Function: pkg.installed
  Result: False
 Comment: Unable to run command '[u'rpm', u'-qa', u'--queryformat', u'%{NAME}_|-%{EPOCH}_|-%{VERSION}_|-%{RELEASE}_|-%{ARCH}_|-(none)_|-%{INSTALLTIME}\n']' with the context '{u'timeout': None, u'with_communicate': True, u'shell': False, u'bg': False, u'stderr': -2, u'env': {'LC_NUMERIC': 'C', 'HTTP_PROXY':** 

*When i manually goes into my salt-minion(proxy server) and restart the salt-minion this command(salt ""proxy"" state.apply get executed perfectly without failure *
I dont want to manually restart the minion when ever i required a deployment on proxy box.. 
Can anyone help me out here 
Thanks in Advance 
","","47","<salt><salt-stack>","0","","0","2018-05-30 12:44:32","","2","1","","","","2018-05-30 12:44:32",""
"49764292","hashing to a fixed number of buckets using salt","We currently generate hashes for user-ids in our system (using md5) and bucket them into range buckets (range is 0 to 100, buckets can be 0-30, 31-70, 71-100). This process works this way - we calculate hash for a user as an int value, take the first three digits and translate that to a percentage. This percentage decides the bucket for the user. This works fine for now and the percentages are random over the range. Now we also want the bucketing to factor in another key for the user (his city). If I add the city as a salt to the hash, will the hash generate random buckets at the city level. For e.g. for users in seattle, if we use the hashstring as SEATTLE + user_id1, NEWYORK + user_id2 and calculate percentages in the same way as before. Will this lead to almost random percentages at the region level (all SEATTLE users are distributed randomly in buckets from 0-100)
","","47","<hash><md5><salt>","0","","0","2018-04-10 23:37:02","","2","","","","","2018-04-10 23:37:02",""
"46247030","Generating multiple salts for already existing table","So I'm tasked with taking over the creation of a survey webpage.  The security was non-existent before I took over.  There is a MySQL users table with passwords and I have added a salt column to generate a salt for every user. Importantly, this is not a live site and the passwords are all the same default password, so there is no worry if I have to change all the passwords.
My question is how can I generate an individual salt for all the users with a php script?  I tried with this...
$salt = dechex(mt_rand(0, 2147483647)).dechex(mt_rand(0, 2147483647));

$query_params = array(
    ':salt' => $salt
);

$stmt = $db->prepare($query);
$result = $stmt->execute($query_params);

and then updated the table with this...
$query = ""UPDATE user
    SET salt = :salt
    WHERE salt = ''"";

but it's not a loop I suppose and it gave everyone the same salt.
So I would like to know how to loop this through the table and populate the salt randomly for every user.
Any help would be much appreciated.
","","47","<php><mysql><salt>","0","","0","2017-09-15 20:25:15","","6","","","","","2017-09-15 20:25:15",""
"52710307","making hash more safe with a salt","Im new here, so please correct me on anything!
I was assigned to do a basic java program where i register and authenticate users, storing the username and the password in a .txt file. The password is stored as an MD5 hash. Also, i needed to make another program to try brute-forcing the .txt file to find the passwords, and measure the time needed to do so.
i managed to do that(suffering a bit), and the last step is to find and implement a way to reduce the chances of this brute-forcing to work. I searched a lot about it, and apart from people saying to use another safer method of storing passwords, the only thing i found useful(which i heard of before so i searched for it) was using salts, Which i know that they are concatenated within the password before hashing, and then both hash and salt are stored.
But i dont think this would work in this occasion, as the salt would also be  stored in the .txt file, thus, even taking longer due to the bigger possible range of combinations, i could still do a brute force where i try a combination and add the salt in the .txt to it, then hash it and compare to the hash stored in the .txt.
Is this a viable way to make the brute force harder(at least in this assignment, for learning purposes) as it takes more time, or is there any other methods to do so?
thanks in advance!
","first of all. md5-Hash is deprecated. Please use sha256 or sha512 instead. 
The salt should not stored inside the text file. It is a config parameter of your programm. 
Now, you can use your secret salt and the password to generate the hash.
hashedPw = sha256(salt + password)

This avoids that an attacker can retrieve the original password from look it up in an lookup table. (https://crackstation.net/)
Additionally you can encrypt your passwords with AES-Algorithm.
","47","<java><hash><salt>","0","0","1","2018-10-08 21:57:30","52710639","6","","","","","2018-10-08 21:24:00",""
"55059145","Should we salt informations that are unique and random","Salt is used when storing passwords in databases in order to protect against dictionary attacks and rainbow tables.
However, let's assume we need to store unique and random (sensitive) information about users. Is there still an advantage in salting this information before hashing it ?
Wouldn't salt use, in this case, just add randomness to an already random data (unlike man-typed passwords) ?
","It depends on how confidential your information is and what are the consequences when this data is compromised. Is it a PII information like SSN or DOB?
You mentioned that your data is random and unique. Which means it is difficult to identify a pattern. If the pattern is random enough then Salting your data may not be required. if you go with salting, then you will have an added responsibility of protecting those salts as well.
I would recommend to use low privileged account, hardening of server, authentication, authorization to protect your data and minimize the surface of attack.
Again, you should come to the conclusion after classification of your data based on CIA principles. 
","46","<security><hash><salt>","1","1","2","2019-03-08 15:16:37","","5","0","","","","2019-03-08 08:15:48",""
"55059145","Should we salt informations that are unique and random","Salt is used when storing passwords in databases in order to protect against dictionary attacks and rainbow tables.
However, let's assume we need to store unique and random (sensitive) information about users. Is there still an advantage in salting this information before hashing it ?
Wouldn't salt use, in this case, just add randomness to an already random data (unlike man-typed passwords) ?
","This depends very heavily on the size of the search space. For example, we could pretend that social security numbers are both random and unique (they're not actually either, but for the purpose of this discussion we will pretend they are). If you're hashing SSNs, not only do you need a salt, but a salt isn't sufficient. Why? Because there are fewer than 10 billion SSNs in existence. Creating a rainbow table for those is trivial. Even with a salt, it isn't that hard to brute force, even if the values are unique and random.
So to protect a random and unique value that lives in a small search space we have to use a stretching algorithm like PBKDF2, not just a hash. The point of a stretching algorithm is to make computing the hash very slow.
Stretching algorithms always include a salt. But it doesn't have to be a random salt. It could be deterministic (some database identifier + the user id for example, ""com.example.mygreatapp:alice""). But for a small search space, you still need it to be unique per user because there are so few items in the search space.
On the other hand, if your random and unique data represents a large search space (not less than 2^64, and ideally at least 2^80), and that search space is sparse (you only use a very small fraction of legal elements), then salting and stretching is likely not required.
","46","<security><hash><salt>","1","1","2","2019-03-08 15:16:37","","5","0","","","","2019-03-08 08:15:48",""
"58384610","How to reproduce an SHA256-based HMAC from R in Python 3","I am trying to reproduce salted sha256 output from R code in Python:
library(openssl)
res = sha256(""test@gmail.com"", key = ""111"")  
res
# [1] ""172f052058445afd9fe3afce05bfec573b5bb4c659bfd4cfc69a59d1597a0031""

import hashlib, binascii
dk = hashlib.pbkdf2_hmac(='sha256', b'test@gmail.com', b'111', 0)
binascii.hexlify(dk)
# b'494c86307ffb9e9e31c4ec8782af6498e91272c011a316c242d9164d765be257'

How can I make output in python match R?
","I can't quite reproduce your issue. The following keys match
In R:
library(openssl)
sha256(""test@gmail.com"")
#[1] ""87924606b4131a8aceeeae8868531fbb9712aaa07a5d3a756b26ce0f5d6ca674""

In Python3:
import hashlib
print(hashlib.sha256(b""test@gmail.com"").hexdigest())
#87924606b4131a8aceeeae8868531fbb9712aaa07a5d3a756b26ce0f5d6ca674


Update in response to your comment
The first thing to notice is that in R sha256 with a non-NULL key argument will calculate the hash-based message authentication code (HMAC). From ?sha256:

All hash functions either calculate a hash-digest for ‘key ==
       NULL’ or HMAC (hashed message authentication code) when ‘key’ is
       not ‘NULL’.

So if you want to use a key you will need to compare the resulting HMAC in R with the SHA2556-based HMAC in Python.
In R:
library(openssl)
sha256(""test@gmail.com"", key = ""111"")
#[1] ""172f052058445afd9fe3afce05bfec573b5bb4c659bfd4cfc69a59d1597a0031""

In Python 3:
import hmac
import hashlib
print(hmac.new(b""111"", b""test@gmail.com"", hashlib.sha256).hexdigest())
#172f052058445afd9fe3afce05bfec573b5bb4c659bfd4cfc69a59d1597a0031

","46","<python><r><sha256><hmac><salt>","1","2","1","2019-10-16 16:33:05","58385388","1","","599911","","2019-10-16 16:33:05","2019-10-14 22:05:13",""
"48148707","Does the PHP password_hash salt include the trailing period?","According to this image: PHP password_hash diagram from the PHP docs, the salt includes a trailing period, however as evidenced by previous information in ""Algorithm Options"" in which the trailing $ goes unused, this trailing period would go unused.
I'm more inclined towards it being unused but it's better to be safe than sorry.
","","45","<php><hash><passwords><salt>","1","","0","2018-01-08 10:47:20","","3","","","","","2018-01-08 10:47:20",""
"44916236","Can't get login script to work after adding salt to hash; worked fine before","I've reset my database and on registration, we added random salt to hashes, and the registration script worked fine, we could create accounts and accounts with the same password and they had different hashes, but our login script is broken, not logging in users, saying their password is incorrect.
No idea why- we have spent the last 2 hours trying to fix it. We have used PHP error checkers(https://phpcodechecker.com/), nothing was wrong.
We are running an old version PHP(5.6) and MySQL and can't currently change.
    <?php
    ob_start();
    session_start();
    require_once 'dbconnect.php';

    // it will never let you open index(login) page if session is set
    if ( isset($_SESSION['user'])!="""" ) {
     header(""Location: index.php"");
     exit;
    }

    $error = false;

    if( isset($_POST['btn-login']) ) { 

     // prevent sql injections/ clear user invalid inputs
     $email = trim($_POST['email']);
     $email = strip_tags($email);
     $email = htmlspecialchars($email);

     $name = trim($_POST['name']);
     $name = strip_tags($name);
     $name = htmlspecialchars($name);


     $pass = trim($_POST['pass']);
     $pass = strip_tags($pass);
     $pass = htmlspecialchars($pass);
     // prevent sql injections / clear user invalid inputs

     if(empty($name)){
      $error = true;
      $nameError = ""Please enter your username."";
     }

     if(empty($pass)){
      $error = true;
      $passError = ""Please enter your password."";
     }
       $res=mysql_query(""SELECT userId, userEmail, userPass, userSalt, userSalt2 FROM users WHERE userName='$name'"");
      $row=mysql_fetch_array($res);



      $row['userSalt']=$salt1;
      $row['userSalt2']=$salt2;
     // if there's no error, continue to login
     if (!$error) {

        $passwordHash = hash('sha256', $salt1 . $password . $salt2); // password hashing using SHA256

      //$res=mysql_query(""SELECT userId, userEmail, userPass, userSalt,        userSalt2 FROM users WHERE userName='$name'"");
      //$row=mysql_fetch_array($res); 
      $count = mysql_num_rows($res); // if email/pass correct it returns must be 1        row

      if( $count == 1 && $row['userPass']==$passwordHash ) {
       $_SESSION['user'] = $row['userId'];
header(""Location: dashboard.php"");
      } else {
       $errMSG = ""Incorrect Credentials, Try again..."";
      }

     }

    }
   ?>
   <!DOCTYPE html>
   <html>
   <head>
   <script src=""//code.jquery.com/jquery-1.10.2.js""></script>
   <script>
   $(function(){
        $(""#overallhead"").load(""overall_header.php""); 
        $(""#overallfoot"").load(""overall_footer.html""); 
    });
   </script>
   <style>
   body {
    color: Thistle;
    }
    </style>
   <div id=""overallhead""></div>
   <meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
   <title>Creature Paradise</title>
   <link rel=""stylesheet"" href=""assets/css/bootstrap.min.css"" type=""text/css""  />
   <link rel=""stylesheet"" href=""style.css"" type=""text/css"" />
   </head>
   <body>

   <div class=""container"">

    <div id=""login-form"">
       <form method=""post"" action=""<?php echo        htmlspecialchars($_SERVER['PHP_SELF']); ?>"" autocomplete=""off"">

 <div class=""col-md-12"">

     <div class=""form-group"">
         <h2 class="""">Login</h2>
        </div>

     <div class=""form-group"">
         <hr />
         </div>

        <?php
      if ( isset($errMSG) ) {

       ?>
       <div class=""form-group"">
         <div class=""alert alert-danger"">
       <span class=""glyphicon glyphicon-info-sign""></span> <?php echo $errMSG; ?>
            </div>
         </div>
            <?php
      }
      ?> 

        <div class=""form-group"">
         <div class=""input-group"">
            <span class=""input-group-addon""><span class=""glyphicon glyphicon-envelope""></span></span>
         <input type=""name"" name=""name"" class=""form-control"" placeholder=""Your Username"" value=""<?php echo $name; ?>"" maxlength=""40"" />
            </div>
            <span class=""text-danger""><?php echo $nameError; ?></span>
        </div>

        <div class=""form-group"">
         <div class=""input-group"">
            <span class=""input-group-addon""><span class=""glyphicon glyphicon-lock""></span></span>
         <input type=""password"" name=""pass"" class=""form-control"" placeholder=""Your Password"" maxlength=""15"" />
            </div>
            <span class=""text-danger""><?php echo $passError; ?></span>
        </div>

        <div class=""form-group"">
         <hr />
        </div>

        <div class=""form-group"">
         <button type=""submit"" class=""btn btn-block btn-primary"" name=""btn-login"">Sign In</button>
        </div>

        <div class=""form-group"">
         <hr />
        </div>

        <div class=""form-group"">
                <a href=""register.php"">Don't have an account? Sign up here!              </a>
               </div>

           </div>

       </form>
       </div> 

   </div>
   <div id=""overallfoot""></div>
   </body>
   </html>
   <?php ob_end_flush(); ?>

","Have you do hashing on registration page, too? Because $row['userPass'] will never equal $passwordHash if you have not registration a new account with new hash applied
","45","<php><mysql><database><hash><salt>","1","0","1","2017-07-05 02:54:54","","2","1","","","","2017-07-05 02:38:02",""
"57832025","How to match those minions which don't have a certain custom grain?","Some of the minions have a grain like foo: bar while others don't have that grain. What should I do to match those minions which don't have the foo grain?
I have tried salt -G 'foo:' and salt -P 'foo:^$' but neither of them work.
Assume that there are 3 minions:
minion1:
    ----------
    foo: 
        bar
minion2:
    ----------
    foo: 
        baz
minion3:
    ----------
    foo:

Both minion1 and minion2 have the grain foo and minion3 is not defined this grain. How to match minion3 ONLY?
","You can use -P (Grains PCRE):
salt -P 'foo:^(?!bar)'

Python docs for re module says:

(?!...)
Matches if ... doesn’t match next. This is a negative lookahead
  assertion. For example, Isaac (?!Asimov) will match 'Isaac ' only if
  it’s not followed by 'Asimov'.

or just simply use a compound match with negation:
salt -C 'not G@foo:bar'

","44","<salt-stack><salt>","0","1","1","2019-09-09 06:48:58","","0","","9785875","","2019-09-09 06:48:58","2019-09-07 08:29:23",""
"56177189","Moodle SSO / External Database Authentication with Wordpress","I'm trying to use external authentication. I have Wordpress (with WooCommerce) site with custom user fields, so this SS plugin is the best one. The main problem is the password... Passtype i can choose are as you know - MD5, SHA-1, Plain Text and Crypt One Way String Hashing (what is this!?).  As you know - Wordpress passwords are salted and they start with $P$B prefix in the database. Moodle 3.5 cant handle it! What's the point in using so outdated cryprography like SHA-1? SSO plugins are not and option - they cant handle custom fields and at the moment - are not compatible with WP 5.1.1. Any help? I cant downgrade WP's password hashing - too much security risk. What can I do for this core moodle plugin to handle Wordpress passwords??
One more thing (optional) - which salt accualy salts wp password?
AUTH_SALT, SECURE_AUTH_SALT, LOGGED_IN_SALT', NONCE_SALT?
Regards
","","44","<database><wordpress><single-sign-on><moodle><salt>","0","","0","2019-05-17 03:07:41","","0","","11085639","","2019-05-17 03:07:41","2019-05-16 22:07:59",""
"28287795","Remote access, configuration and monitoring needs for linux machines in retail venues (shops) distributed across the country.","We plan on deploying machines with a Linux distro, in retail venues (shops) across the country. The venues have their own connectivity with the wider world and their own network, which we have no control over. We also need an ability to configure Chrome in these machines. The machines are simple desktops, which we will set up and distribute in venues, and they have the following ongoing needs…

Remote monitoring – we have New Relic for all our EC2 servers, and a strategy to use New Relic would work well as the team is already familiar with it. Is that feasible?
Remote configuration and upgrade – again puppet and mcollective are the tools of choice as they would probably do the job and the team is well aware of the toolset. 
Chrome configuration – will something like Google Admin Console work to configure the browser. 

","","43","<linux><puppet><salt><newrelic><mcollective>","1","","0","2015-02-02 22:14:16","","1","","","","","2015-02-02 22:14:16",""
"46536037","Login through unprotected network","We are designing an API endpoint for clients to use to log into our service. However, I do have a question about how to be sure that the user's password is protected while using an unprotected network.
After thinking about this issue, we concluded that we can modify our application to request a nonce before trying to log in [two requests per each login attempts] and then hash the user's password before actually trying to send it over the network. This solves the problem with sending user password through the unprotected network and as a side bonus we can check the nonce and invalidate it to prevent any later reply attacks. 
However for this to work, I didn't find any way to be able to use a Salt in the hashing mechanism as if we do, the user can not generate the right hash or we need to send the Salt to the user.
What I have now in my mind is as follows:

Application asks for a one-time nonce [time limited and randomly generated]
Application hash the user password: [using the nonce in the process]

sha1(sha1([password]) + [nonce])

Application send the authentication request with username, hashed pass and hashed nonce to get a JWT token
Web server validates the nonce and then the provided password based on the provided username and if successful sends a token to the client so it can use other endpoints.

[resquestHashedPassword] == sha1([dbHashedPassword] + [nonce])

The client continues to work with other parts of the service using the provided JWT.

Is there a way that I can keep the user's password secure while being able to use hashing salt on the server side data storage?
In a nutshell, this is a question about how to use both ""Nonce"" as part of authentication requests and ""Salt"" for password storage.
* EDIT 1 *
Just adding some clarifications:

I know that we can use HTTPS to encrypt the data in transmission (and we sure do), however, HTTPS is not impenetrable. So not an actual answer to the question.
I am not trying to make my own crypto. I am merely trying to use other well-defined solutions like sending a nonce and keeping a salt next to password. However, I can't find a way to do both.
I am aware of other forms of attack. However, the question is about the security of the user's password and not about the application/service security. If I don't need the password in cleartext, why should I send it over the network? Security of the network is another issue that the question is not concerned with.
SHA1 is only an example.

* EDIT 2 *
What do you think about using the user's username (in our case it is their phone number, so 10 digits, while 4 of them are not actually random) as the salt? It sure has a very little entropy comparing to a random salt, but this is the only way I found so far that enables me to use both methods. Or is it more secure to rely on HTTPS to be perfect and instead abandon the idea of using ""Nonce"" in the hash function altogether?
","Firstly, don't roll your own crypto.
Second, your system is still vulnerable to many kinds of attacks, such as man-in-the-middle, eavsdropping, phishing, and session hijacking. If a hacker would have had access to the password, he would also have access to the hash, and could intercept it and use it himself. He will also be able to see the response and steal whatever session key is generated, then impersonate the client. And in all scenarios he'll be able to view whatever the content is that you're trying to secure.
The proper way to secure this is with SSL/TLS. Once the secure tunnel is established you can pass the credentials ""in the clear,"" relying on the encryption offered by HTTPS. 
","42","<security><hash><salt><nonce>","0","1","3","2017-10-03 09:16:58","","0","","1913051","","2017-10-03 03:12:44","2017-10-03 01:44:22",""
"46536037","Login through unprotected network","We are designing an API endpoint for clients to use to log into our service. However, I do have a question about how to be sure that the user's password is protected while using an unprotected network.
After thinking about this issue, we concluded that we can modify our application to request a nonce before trying to log in [two requests per each login attempts] and then hash the user's password before actually trying to send it over the network. This solves the problem with sending user password through the unprotected network and as a side bonus we can check the nonce and invalidate it to prevent any later reply attacks. 
However for this to work, I didn't find any way to be able to use a Salt in the hashing mechanism as if we do, the user can not generate the right hash or we need to send the Salt to the user.
What I have now in my mind is as follows:

Application asks for a one-time nonce [time limited and randomly generated]
Application hash the user password: [using the nonce in the process]

sha1(sha1([password]) + [nonce])

Application send the authentication request with username, hashed pass and hashed nonce to get a JWT token
Web server validates the nonce and then the provided password based on the provided username and if successful sends a token to the client so it can use other endpoints.

[resquestHashedPassword] == sha1([dbHashedPassword] + [nonce])

The client continues to work with other parts of the service using the provided JWT.

Is there a way that I can keep the user's password secure while being able to use hashing salt on the server side data storage?
In a nutshell, this is a question about how to use both ""Nonce"" as part of authentication requests and ""Salt"" for password storage.
* EDIT 1 *
Just adding some clarifications:

I know that we can use HTTPS to encrypt the data in transmission (and we sure do), however, HTTPS is not impenetrable. So not an actual answer to the question.
I am not trying to make my own crypto. I am merely trying to use other well-defined solutions like sending a nonce and keeping a salt next to password. However, I can't find a way to do both.
I am aware of other forms of attack. However, the question is about the security of the user's password and not about the application/service security. If I don't need the password in cleartext, why should I send it over the network? Security of the network is another issue that the question is not concerned with.
SHA1 is only an example.

* EDIT 2 *
What do you think about using the user's username (in our case it is their phone number, so 10 digits, while 4 of them are not actually random) as the salt? It sure has a very little entropy comparing to a random salt, but this is the only way I found so far that enables me to use both methods. Or is it more secure to rely on HTTPS to be perfect and instead abandon the idea of using ""Nonce"" in the hash function altogether?
","(I'm assuming by ""application requests"" and ""API endpoint"" means we're looking at messages in separate connections like HTTP, rather than a single bidirectional connection with own protocol.)
There's a number of problems with the scheme you propose:

Weak hash in the database: you need to store sha1(password) on the server side for this to work and this is not strong enough. You can fix this by storing something using proper PBKDF with a salt and sending salt along with the nonce to the client.
Weak password on the wire. SHA1 is REALLY fast. SHA1 twice + salt is not much better. It will prevent rainbow table attacks, but dictionary attacks 
against it are still trivial.
Replay attack still possible. You can MITM this connection and replace the request contents with whatever you want, preserving only the authentication. You need to sign the hash of authentication along with any request data and relevant headers.
You don't seem to tie your requests in any way to the time. The attacker can setup a proxy which saves the nonces, the response and drops the connection before transmitting the response back. If you don't include a signed timestamp in the requests, the attacker now has a stash of authentication hashes / requests they can use in the future.

Recommendation: see the authentication used in other places, like AWS v4.
At the minimum, I'd change your scheme to:

Request nounce + password salt, which is granted for the specific user, for time range from now to 5 seconds later
Send a request, which includes:


current time
username
request content/headers
signature for HMAC(k, list_of(nonce, time, username, request data))
(where k is PBKDF(password, salt))


This still doesn't change the fact that your database is now the database of plaintext passwords effectively, which is a really bad idea. Authenticating with a plaintext password over HTTPS and getting a temporary token for signing the requests would be a much better solution.
","42","<security><hash><salt><nonce>","0","1","3","2017-10-03 09:16:58","","0","","1913051","","2017-10-03 03:12:44","2017-10-03 01:44:22",""
"46536037","Login through unprotected network","We are designing an API endpoint for clients to use to log into our service. However, I do have a question about how to be sure that the user's password is protected while using an unprotected network.
After thinking about this issue, we concluded that we can modify our application to request a nonce before trying to log in [two requests per each login attempts] and then hash the user's password before actually trying to send it over the network. This solves the problem with sending user password through the unprotected network and as a side bonus we can check the nonce and invalidate it to prevent any later reply attacks. 
However for this to work, I didn't find any way to be able to use a Salt in the hashing mechanism as if we do, the user can not generate the right hash or we need to send the Salt to the user.
What I have now in my mind is as follows:

Application asks for a one-time nonce [time limited and randomly generated]
Application hash the user password: [using the nonce in the process]

sha1(sha1([password]) + [nonce])

Application send the authentication request with username, hashed pass and hashed nonce to get a JWT token
Web server validates the nonce and then the provided password based on the provided username and if successful sends a token to the client so it can use other endpoints.

[resquestHashedPassword] == sha1([dbHashedPassword] + [nonce])

The client continues to work with other parts of the service using the provided JWT.

Is there a way that I can keep the user's password secure while being able to use hashing salt on the server side data storage?
In a nutshell, this is a question about how to use both ""Nonce"" as part of authentication requests and ""Salt"" for password storage.
* EDIT 1 *
Just adding some clarifications:

I know that we can use HTTPS to encrypt the data in transmission (and we sure do), however, HTTPS is not impenetrable. So not an actual answer to the question.
I am not trying to make my own crypto. I am merely trying to use other well-defined solutions like sending a nonce and keeping a salt next to password. However, I can't find a way to do both.
I am aware of other forms of attack. However, the question is about the security of the user's password and not about the application/service security. If I don't need the password in cleartext, why should I send it over the network? Security of the network is another issue that the question is not concerned with.
SHA1 is only an example.

* EDIT 2 *
What do you think about using the user's username (in our case it is their phone number, so 10 digits, while 4 of them are not actually random) as the salt? It sure has a very little entropy comparing to a random salt, but this is the only way I found so far that enables me to use both methods. Or is it more secure to rely on HTTPS to be perfect and instead abandon the idea of using ""Nonce"" in the hash function altogether?
","I do have a suggestion to make , if you want to factor in that someone is able to penetrate HTTPS at some point of time , then i would recommend that a user specific symmetric key be provisioned once and it be used to encrypt the user credentials + time-stamp before it is send over the wire .
For provisioning the symmetric key on the Fly DSKPP can be used https://tools.ietf.org/html/rfc6063 
DSKPP will need the user to enter a passphrase during the key provisioning stage , the passphrase can be pre-generated and stored against the user in the server database and can be shared securely with the user through other channel like SMS / email etc .
But this will require lot of work to be done... you need to factor in the RISK against the cost.
","42","<security><hash><salt><nonce>","0","1","3","2017-10-03 09:16:58","","0","","1913051","","2017-10-03 03:12:44","2017-10-03 01:44:22",""
"11024839","Storing characters like % and \ in MySQL fields?","I have a function to generate an 11 character salt. This salt can include characters like % which I know is wildcard in SQL and \ which is used for escaping things.  Some users are complaining about not being able to log in.  Could these characters in their password salt be the problem?
","Unequivocally yes. specifically the backslash if it is not done correctly. If you are doing this salting/hashing in mysql only that is a bad idea, i would suggest you perform it in a server side language before storage, and if you are already, you could always sha1 or md5 your hashed result before storage.
","42","<mysql><hash><salt>","-1","1","1","2012-06-13 23:44:13","11024937","2","","","","","2012-06-13 23:34:10",""
"53949971","How to save an application password on database?","I need some help to identify if my solution to store password on database is good (secure). Information security is a complex subject, so I'm not sure if my solution is weak or even overpower.
My application needs to save some users and passwords on database and use them to login in another application. This login happens only on the server side. We can call this users as ""Providers"". Each provider is identified with an unique id, that come from the front-end application and it's necessary to know what provider needs to be used.
Store the passwords on plain text is not an alternative. So my idea is: cipher each password using some secret key with a different salt per provider. The secret key is saved on the server application (Kubernetes secret) and used, with the salt information, to decipher the passwords.
So, we will have a table like this:
+------------+-------------------------+---------------------+----+
|    Name    |        Password         |         Salt        | id |
+------------+-------------------------+---------------------+----+
| Provider 1 | 7c73c5a83fa580b5d6f8208 | feacbc02a3a697b0    | 23 |
| Provider 2 | 23291ac8bc335a1277a39d2 | 3a6acbc02a97b0fe    | 88 |
+------------+-------------------------+---------------------+----+

As the quantity of Providers is very low (no more than 20), a different salt per provider seems a bit to much for me, but is a safer solution.
So, my question is: Is this solution secure for my scenario? 
","","42","<database><encryption><salt><password-encryption>","1","","0","2018-12-27 19:33:24","","6","","","","","2018-12-27 19:33:24",""
"47887541","if command A result has *not* in it, then do command B","I have been tasked with what I'm sure is a basic bash script assignment. Essentially, I will run command A, and if that command result contains the word ""not"" in it, then it will kick off command B.
I have tried searching around for just such a bash script, or an example of something similar, but can't find anything. I'm sure that I'm just not searching for it right way which is half my problem. So what I have so far based on what little I can find is:
#!/bin/bash
if [ 'sudo service xyz status' = \*not* ]; then
    sudo service xyz status
else

Another detail: this is using the SALT stack. So this is a command checking if a service across many servers is running or not, and if it is great, do nothing. If it isn't, I want to start the process. 
I'm  testing it just on my own dev box.
","","42","<linux><bash><salt>","0","","0","2017-12-19 12:56:55","","7","","4433386","","2017-12-19 12:56:55","2017-12-19 12:54:56","2017-12-19 13:17:34"
"46335956","How to mention the empty password rainbow table lookup trick to extract the SALT using Python?","I am setting the static salt value to hash the password using Python. I am providing my code below.
settings.py:
SALT = ""2Y7xk5vrs5DeCcSdinRVKQ==""

views.py:
import hashlib
from django.conf import settings
def signsave(request):
    """"""This function helps to save signup data""""""

    if request.method == 'POST':
        name = request.POST.get('uname')
        password = request.POST.get('pass')
        con_pass = request.POST.get('conpass')
        if password == con_pass:
            salt = settings.SALT
            hashed_password = hashlib.sha512(password + salt).hexdigest()
            passw = User(
                uname=name,
                password=hashed_password
            )
            passw.save()
            message = ""Registered successfully""
            return render(request, 'bookingservice/login.html',
                        {'msg': message})
        else:
            message = ""The password did not match ""
            return render(request, 'bookingservice/signup.html',
                        {'msg': message})

Here I am defining the static value for salt but here also I need the empty password rainbow table lookup trick to extract the SALT. 
","","42","<python><django><salt>","0","","0","2019-06-01 09:53:48","","7","1","472495","","2019-06-01 09:53:48","2017-09-21 05:17:24",""
"29227307","Role of PasswordSalt witn SimpleMembershipProvider","I analyzed the CreateAccount method from SimpleMembershipProvider and there I found PasswordSalt is not stored up in Database and only the hashedpassword is being saved. 
Is that not neccessary to save PasswordSalt in database?
int insert = db.Execute(@""INSERT INTO ["" + MembershipTableName + ""] (UserId, [Password], PasswordSalt, IsConfirmed, ConfirmationToken, CreateDate, PasswordChangedDate, PasswordFailuresSinceLastSuccess)""
                                    + "" VALUES (@0, @1, @2, @3, @4, @5, @5, @6)"", uid, hashedPassword, String.Empty /* salt column is unused */, !requireConfirmationToken, dbtoken, DateTime.UtcNow, defaultNumPasswordFailures);

","While it is quite common to save the salt, it's not necessary. It mainly depends on how the salt is created.
If the salt only relies on information that is already present in the database, UserId for example, it can recreate the salt using that information.
Another option would be to concatenate the salt with the password hash without using a clear separator. So it could be that the first 8 bytes of the password hash are actually the salt.
Then there's the chance that the salt isn't used. So there's no need to fill it. Which actually seems to be the case here.
","41","<c#><salt><simplemembership>","0","0","1","2015-04-10 06:34:53","29227723","0","","","","","2015-03-24 07:45:24",""
"29783250","What is the refers to 07$ when we use CRYPT_BLOWFISH in PHP?","crypt('foo','$2a$07$.blablabla') 

$2a$ refers to using CRYPT_BLOWFISH but what does 07$ refer to?
","The number after $2a$ is the cost, which is the number of rounds of encryption to perform. Increasing this makes it harder to crack the encryption, but it also slows down encryption.
","41","<php><salt><blowfish>","0","0","1","2015-04-21 21:24:37","","2","","1491895","","2015-04-21 21:19:16","2015-04-21 21:15:35","2015-04-21 22:19:41"
"33127338","Lifespan of hashed/salted passwords","Whilst I understand the theology behind the process of salting and hashing a password, I don't quite understand the methodology. As far as I can tell, the methods listed in this question and it's pertinent answers, as well as this MSDN article, all go through steps to create a salt of varying length to use in the process of hashing the password given. 
However, what about checking the password at a later date? Creating the hash all over again will, as far as I can see, result in an entirely new salt being generated, ultimately causing validation to fail when an attempt is made to log in. 
Am I missing where the salt or salt formula is saved? Or have I not quite understood the process?
","You should:

create a new salt for each password you want to hash
hash the password
save as plain text both the hash and the salt.

When you want to authenticate your user, you just have to compute the hash again with the salt you previously saved in your DB, then compare your hashes.
Here's an excellent article that explains the process in details. It also provides a complete C# implementation. 
","40","<c#><hash><passwords><salt>","0","1","1","2015-10-14 14:08:13","33127632","5","","-1","","2017-05-23 11:58:22","2015-10-14 13:56:36",""
"53319627","SQL Server - Hasbytes in function gives different result then in select","I created a function like this:
CREATE FUNCTION dbo.HashCheeseName (@CheeseName NVARCHAR(40)) 
RETURNS VARCHAR(40) 
AS BEGIN
 DECLARE @Salt VARCHAR(25)
 DECLARE @CheeseName NVARCHAR(40)
 DECLARE @output VARCHAR(40) 
 SET @Salt = '123abc11aa'

 SET @output = HASHBYTES('SHA2_256', CAST(@CheeseName as VARCHAR(40)) + @Salt)
 RETURN @output
END
;

When I just run 
SELECT HASHBYTES('SHA2_256', CAST('SwissCheese' as VARCHAR(40)) + @Salt)

I get an expected result like 0xF456D41144584064AC5456B7E3...
However, when I run the function in a query
SELECT dbo.HashCheeseName('SwissCheese')

I get a result like this: h:Mó!yýŠù’p» ªu_aøP¾æhw
Any ideas on why it would result in something like this? At first sight it looks like a conversion issue, but I don't see the problem
","What you are doing there isn't the same. HASHBYTES returns a varbinary (Hashbytes (Transact-SQL) - Return Values) where as your function is returning a varchar. Those are different datatypes. As a result, the last line of your function is effectively:
SET @output = CONVERT(varchar(40),HASHBYTES('SHA2_256', CAST(@CheeseName as VARCHAR(40)) + @Salt));

The varchar representation of a varbinary will not be the same. Either return a varbinary in your function, or your test SELECT with a CONVERT to a varchar(40).
Edit: To confirm, the solution is to simply change the return type of your function and variable:
CREATE FUNCTION dbo.HashCheeseName (@CheeseName NVARCHAR(40)) 
RETURNS varbinary(8000)
AS BEGIN
    DECLARE @Salt VARCHAR(25);
    DECLARE @CheeseName NVARCHAR(40);
    DECLARE @output varbinary(8000) ;
    SET @Salt = '123abc11aa';

    SET @output = HASHBYTES('SHA2_256', CAST(@CheeseName as VARCHAR(40)) + @Salt);
    RETURN @output;
END

","40","<sql-server><tsql><salt>","1","2","1","2018-11-15 12:40:02","53319715","1","","","","","2018-11-15 12:33:48",""
"44973893","Security implications of generating salts immediately vs. when needed","Say I have a database of users (customers).  Some of these customers have logged in through a portal, some of them have not and only exist in the database to facilitate customer management by an administrator.  At a later date, customers may decide to begin using the portal, at which point they'll need to be provided a password.
Assuming the randomization method is reasonably secure, are there any security implications related to the timing of the salt generation?
ie.: is it better, worse, or irrelevant to be salting all accounts as early as possible vs. salting only at the time a password is created?
","The main idea behind the salts, is to offer protection against rainbow tables, which are databases containing pre-hashed passwords. Having each password salted using a different salt allows you to minimize this risk, since now (in theory) there should be no rainbow table containing your password.
As long as you're using a cryptographically secure pseudo-random number generator (CSPRNG) to generate your salts, there should not be a problem with salting your passwords as early as possible (and it'll be even better if you use the salting mechanism already included in most modern implementations). After all, you only care about always producing a different hash. And salts are not even secret values, if your database got compromised, the attacker will already have the hashed password and the salt (they're usually stored like salt$base64HashedPassword, or they just have a column for the salt), and salts are not like the IVs in cipher block chaining (CBC) where an attacker can take advantage of a predictable IV. Here you only care about always producing a different hash, so as long as you do it, everything should be ok.
Edit: Now I'm curious about something. You're talking about salting the password someday in the future... does that mean that you're storing it as plaintext or in a recoverable way before salting it? Because now that'll be a bad practice. You need to salt it as soon as you get it, since you should not know anything about user's passwords.
","39","<security><encryption><hash><passwords><salt>","0","-1","1","2017-07-07 16:09:56","","3","","","","","2017-07-07 14:56:10",""
"37893564","Communicate a confirmation code between devices with C#","I have a communicating system built in C#. Let's say I have a confirmation code like 123-456-789.
I want to send it thru TCP, but I don't want to get it sniffed.
If I hash it, and send it as a packet, will it work? I know people can still sniff it, but they can't get the raw confirmation code.
Can my system be safer if I salt it, and send the salt in my hash packet too? Or are there any better communicating protocols than TCP?
(Note: Of course, the system is like a login system: People type in the confirmation code, and I will hash the ""inputted"" code (with the salt) and compare it to the sent hash)
","Anyway people can hack everything if they want. But for bullet-proof and obfuscated system you'd better use this way:

Hashing code with salt (anywhere you want, even in the middle of code) 
Ex. 123SALT456AND789HERE
Adding salt for hash (example uses md5)
Ex. de2160f564adde7996e06efaf7fa06407597c8b934
Sending this string by TCP
Recieving on client
Decoding hash e.g removing bold parts de2160f564adde7996e06efaf7fa06407597c8b934
Hashing every string client want using rule #1 (adding salt)
Comparing decoded hash and client's hashed string

When forming hash you can also store timestamp somewhere and form bold parts according to it (for example if second is even you can place bold parts in other places)
It should be enough for login system if you afraid only MITM attack with sniffing packet (your software part should be protected)
But if you need really bullet-proof system it's better to use symmetric encryption (for white house login system purposes for example)
","39","<c#><hash><tcp><communication><salt>","2","1","1","2016-06-18 06:03:10","","1","0","13302","","2016-06-18 05:28:46","2016-06-18 05:27:49",""
"54458662","SaltStack - Touch and 666 /var/db/ntp-kod for Mojave 10.14","Bit confused how I can implement this request in Salt.
I need to touch and 666 /var/db/ntp-kod file. I'm on 10.14.
Can we do it via file.managed?
Can you guys help me with full code here for this request?
","Yes, you can use file.managed. The magic is to set replace: False. See https://docs.saltstack.com/en/latest/ref/states/all/salt.states.file.html#salt.states.file.managed
replace: True
    If set to False and the file already exists, the file will not be modified even if changes would otherwise be made. Permissions and ownership will still be enforced, however.

edit: You need to touch it, so just add contents: '', but I wonder if you really looked the documentation page
","39","<macos><formula><salt-stack><salt><salt-creation>","0","0","1","2019-02-07 15:36:12","54576725","0","","10983692","","2019-02-02 08:58:47","2019-01-31 10:39:00",""
"57409497","How is the correct syntax/call to get the sls-file working - salt","I'm trying to build a reactor sls file, which starts running when an event occurs.
The content of the sls file should be as the following cli commands:
sudo salt minion git.add /srv/salt .
sudo salt minion git.commit /srv/salt test
sudo salt minion git.push /srv/salt origin master identity=/home/autogit/.ssh/id_rsa

If i run the code bellow triggered by the reactor. I get the following error message.
[DEBUG   ] Reactor is populating module client cache
[ERROR   ] An un-handled exception from the multiprocessing process 'Reactor-9:1' was caught:
Traceback (most recent call last):
  File ""/usr/lib/python2.7/dist-packages/salt/utils/process.py"", line 765, in _run
    return self._original_run()
  File ""/usr/lib/python2.7/dist-packages/salt/utils/reactor.py"", line 271, in run
    self.call_reactions(chunks)
  File ""/usr/lib/python2.7/dist-packages/salt/utils/reactor.py"", line 228, in call_reactions
    self.wrap.run(chunk)
  File ""/usr/lib/python2.7/dist-packages/salt/utils/reactor.py"", line 330, in run
    self.populate_client_cache(low)
  File ""/usr/lib/python2.7/dist-packages/salt/utils/reactor.py"", line 324, in populate_client_cache
    self.reaction_class[reaction_type](self.opts['conf_file'])
KeyError: u'module'
[CRITICAL] Engine 'reactor' could not be started!

I've tried different syntax (old style and new style) but couldn't figure out what the problem is. Always getting an KeyError: u'module' or u'git'.
Also tried it with runner function to run it locally on the master. 
git pull:
  module.run:
    - git.pull:
      - cwd: /srv/salt
      - remote: git@git.xyz.com:user/sbt.git
      - identity: /home/autogit/.ssh/id_rsa
    - git.add:
      - cwd: /srv/salt
      - filename: .
    - git.commit:
      - cwd: /srv/salt
      - remote: git@git.xyz.com:user/sbt.git
    - git.push:
      - cwd: /srv/salt
      - remote: git@git.xyz.com:user/sbt.git
      - identity: /home/autogit/.ssh/id_rsa



salt --versions-report
Salt Version:
           Salt: 2019.2.0

Dependency Versions:
           cffi: Not Installed
       cherrypy: unknown
       dateutil: 2.6.1
      docker-py: Not Installed
          gitdb: 2.0.3
      gitpython: 2.1.8
          ioflo: Not Installed
         Jinja2: 2.10
        libgit2: Not Installed
        libnacl: Not Installed
       M2Crypto: Not Installed
           Mako: 1.0.7
   msgpack-pure: Not Installed
 msgpack-python: 0.5.6
   mysql-python: Not Installed
      pycparser: Not Installed
       pycrypto: 2.6.1
   pycryptodome: Not Installed
         pygit2: Not Installed
         Python: 2.7.15rc1 (default, Nov 12 2018, 14:31:15)
   python-gnupg: 0.4.1
         PyYAML: 3.12
          PyZMQ: 16.0.2
           RAET: Not Installed
          smmap: 2.0.3
        timelib: Not Installed
        Tornado: 4.5.3
            ZMQ: 4.2.5

System Versions:
           dist: Ubuntu 18.04 bionic
         locale: UTF-8
        machine: x86_64
        release: 4.15.0-46-generic
         system: Linux
        version: Ubuntu 18.04 bionic

Since i'm quite new to Salt, hopefully you can give me a hint what i'm doing wrong:
","You didn't provide the master config.  

About module.run confusion: add in your settings (minion and maybe to master since I don't know your use-case)

use_superseded:
  - module.run

That will enable your syntax, more doc about this here: https://docs.saltstack.com/en/latest/ref/states/all/salt.states.module.html#salt.states.module.run
In general: you are executing execution modules from the place that state modules are allowed only (the term module is heavily overused in salt...)

You didn't provide the full Master config. Reactor requires dedicated config to match events to sls files:
https://docs.saltstack.com/en/latest/ref/configuration/master.html#master-reactor-settings

You can also check the doc I've written some time ago about events and reactors:
https://github.com/kiemlicz/util/wiki/Salt-Events-and-Reactor
Assuming you've configured your events-to-sls-files-matching in master config, your provided sls:
git pull:
  module.run:
    - git.pull:
      - cwd: /srv/salt
      - remote: git@git.xyz.com:user/
...

will not work.
Mind that reaction happens on Salt Master thus the reaction sls file need to provide type of reaction (local, runner etc.) since it's no longer 'view of one minion' but possibly of tons of minions!
First create runner reaction type (which delegates to some orchestration sls file which will contain your logic wrapped with (I think) salt.function )
Help yourself with aforementioned github link to my attempt of explaining Reactor.
Refer to official doc as well: https://docs.saltstack.com/en/latest/topics/reactor/index.html
","39","<module><yaml><salt-stack><salt><reactor>","0","0","1","2019-08-17 10:39:04","","0","","7259035","","2019-08-08 12:28:33","2019-08-08 09:34:48",""
"58401894","Salt Error while bringing up minion for multi-master","I'm getting some errors when I start salt minions:
    Error while bringing up minion for multi-master. Is master at salt-server00001.nix.us.companyworld.company.com responding?
2019-10-16 11:57:27,935 [salt.minion      ][ERROR   ][34679] Error while bringing up minion for multi-master. Is master at usazrcncm10286.nix.us.kworld.kpmg.com responding?
2019-10-16 11:57:37,990 [salt.crypt       ][ERROR   ][34679] The masters sent its public-key signature, but signature verification is not enabled on the minion. Either enable signature verification on the minion or disable signing the public key on the master!
2019-10-16 11:57:37,990 [salt.crypt       ][CRITICAL][34679] The Salt Master server's public key did not authenticate!
The master may need to be updated if it is a version of Salt lower than 2017.7.2, or
If you are confident that you are connecting to a valid Salt Master, then remove the master public key and restart the Salt Minion.

I am NOT setting up multi-master.
I have accepted the key for the server on the salt master.
I've opened up the salt ports on the firewall.
But the salt server still isn't responding.
This is my salt versions report:
salt --versions-report
Salt Version:
           Salt: 2018.3.4

Dependency Versions:
           cffi: Not Installed
       cherrypy: unknown
       dateutil: Not Installed
      docker-py: Not Installed
          gitdb: Not Installed
      gitpython: Not Installed
          ioflo: Not Installed
         Jinja2: 2.8.1
        libgit2: Not Installed
        libnacl: Not Installed
       M2Crypto: Not Installed
           Mako: Not Installed
   msgpack-pure: Not Installed
 msgpack-python: 0.4.6
   mysql-python: Not Installed
      pycparser: Not Installed
       pycrypto: 2.6.1
   pycryptodome: Not Installed
         pygit2: Not Installed
         Python: 2.7.13 (default, Mar 30 2018, 15:31:59)
   python-gnupg: Not Installed
         PyYAML: 3.11
          PyZMQ: 18.0.1
           RAET: Not Installed
          smmap: Not Installed
        timelib: Not Installed
        Tornado: 4.2.1
            ZMQ: 4.3.1

System Versions:
           dist: redhat 6.10 Santiago
         locale: UTF-8
        machine: x86_64
        release: 2.6.32-754.2.1.el6.x86_64
         system: Linux
        version: Red Hat Enterprise Linux Server 6.10 Santiago

Why am I seeing this problem and how do I correct it?
","","39","<salt-stack><salt>","0","","0","2019-10-16 15:59:07","","0","","1017466","","2019-10-16 15:59:07","2019-10-15 20:01:48",""
"10151679","The Time it takes to search database","I am new to web development and database and am trying to implement password authentication with reasonable security and speed. I have read about hashing the password and append a salt unique to each user in order to deter people from generating rainbow tables.
My question deals with the time I have to search in order to verify a user. Since I don't know who is trying to connect at any given time, it seems to me that I would need to retrieve every field from the salt column then hash the submitted password + each unique salt and then finally compare each output to the hashed strings in the table?
So I have to submit a separate query for each combination of hash(password+salt)? That seems like it would be awfully slow. Am I missing a trick that would speed up the process? Or is it simply a matter of sucking it up and sacrificing speed for better security? Or am I mistaken and with the speed of today's computers it isn't an issue at all?
","You cannot authenticate the user based only on a password. Password is a verification that the user is who they say they are, so you need some sort of user identifier — name or whatever. Table then looks like users(..., name, password, ...), you do SELECT password WHERE name = ""foo"" and proceed with verification from there. Convenient form is to keep all parameters needed to generate derived key inside the password field, e.g. like this:
algo$salt$password hash

For hashing itself, you don't want it to be fast — see key derivation functions like PBKDF2, bcrypt or scrypt. In general, tuning the parameters so that it takes about a second to derive one key is a nice way to make brute forcing infeasible.
","37","<database><authentication><time><hash><salt>","0","1","1","2012-04-14 07:00:52","10151735","0","","","","","2012-04-14 06:49:36",""
"58443837","How can I make a variable salt to be used in the crypt function in C?","As an assignment, I have to find a password of a user starting from the hash of that password (which was made using crypt). So, I'm trying to create a variable salt (2-letter string) which I then tend to use in the crypt function until the result matches the hash. However, when I try to make this variable salt, instead of two characters, I get 5/6 (even if I define the salt as an array of size 2). Does anyone know how this can be fixed? Difficult explanation, I know, but see code (and result) below.
char salt[2];
for (int i = 65; i < 91; i++)
{
    salt[0] = i;
    for (int j = 65; j < 91; j++)
    {
        salt[1] = j;
        printf(""%s\n"", salt);
    }
}

Outcome:
AA �g 
AB �g 
AC �g
AD �g 
AE �g
AF �g
...
...
...
ZW �g
ZX �g
ZY �g
ZZ �g
Where do these extra characters (=  �g) come from?
Thank you
","You're attempting to print salt as a string but you don't actually have a string.  You have an array of two characters.  A string is terminated by a null byte.  By passing this array to printf, it attempts to read past the end of the array looking for a byte with value 0.  Reading past the end of an array invokes undefined behavior which in this case manifests as printing extra characters.
You need to add space in the array for the null terminator:
char salt[3];
salt[2] = 0;

","36","<c><salt><cs50><crypt>","3","1","1","2019-10-18 04:32:43","","0","","","","","2019-10-18 04:09:59",""
"20941944","Salting with an intrinsic property of the password","From Wikipedia on Salt (cryptography):

A new salt is randomly generated for each password. In a typical setting, the salt and the password are concatenated and processed with a cryptographic hash function, and the resulting output (but not the original password) is stored with the salt in a database.

But what if I don't have a discrete database? Is it okay to salt with an intrinsic property of the password, such as its reverse? Or even (better?) salting a password with the hash of the password? For example:
md5(md5(""password"") + ""password"")

Of course there are performance consequences, but if I'm working with a low-access system, would this kind of salting display any vulnerabilities?
Again, the main reason I would look into doing this would be to save myself a lot of trouble storing a salt.
","Since you have to store the hash of the password plus any salt somewhere (else, how would you have anything to compare to when it comes time to authenticate), why not store them together?
It's not uncommon to store both the salt and the hash result of the password and salt in a single field.  They can be teased apart when needed by using salts with constant lengths, or by using a separator character that is not part of the set of characters used in your salt.
","36","<security><hash><salt><password-hash>","1","2","2","2014-01-30 09:45:55","20942520","0","","445517","","2014-01-30 09:45:55","2014-01-06 02:23:26",""
"20941944","Salting with an intrinsic property of the password","From Wikipedia on Salt (cryptography):

A new salt is randomly generated for each password. In a typical setting, the salt and the password are concatenated and processed with a cryptographic hash function, and the resulting output (but not the original password) is stored with the salt in a database.

But what if I don't have a discrete database? Is it okay to salt with an intrinsic property of the password, such as its reverse? Or even (better?) salting a password with the hash of the password? For example:
md5(md5(""password"") + ""password"")

Of course there are performance consequences, but if I'm working with a low-access system, would this kind of salting display any vulnerabilities?
Again, the main reason I would look into doing this would be to save myself a lot of trouble storing a salt.
","
Would this kind of salting display any vulnerabilities?

Yes.  A key purpose of the unique salt is to ensure that users who select the same password will have different password hashes.  If the salt is calculated as a function of the password, then users who share the same password will also share the same password hash.
With a database of hashes, an attacker can simply find hashes that appear multiple times.  Such passwords are likely to be weak and attractive targets for a brute-force attack.
If you must store passwords and cannot store a dedicated salt, a better approach would be to use an invariant field associated with the account (e.g., username or account identifier) as the salt.  This approach will protect against duplicate password hashes in your database.
","36","<security><hash><salt><password-hash>","1","1","2","2014-01-30 09:45:55","20942520","0","","445517","","2014-01-30 09:45:55","2014-01-06 02:23:26",""
"23685430","Can this called SALT?","I have the following code
$input = 'foo';
$output = hash_hmac('md5', $input, $secretKey);

Can the $secretKey can be called salt?
","Yes, $secretKey is a salt. 

In cryptography, a salt is random data that is used as an additional input to a one-way function that hashes a password or passphrase. Wikipedia page

I would however recommend against using md5, I tend to use sha512 for passwords, and a different salt for each user
","36","<php><hash><salt>","0","1","1","2014-05-15 19:09:35","23685887","2","","1064767","","2014-05-15 18:23:27","2014-05-15 17:55:43",""
"55082068","What ways are there to create unique salts for every user?","I'm trying to store passwords which each have their own unique salts.
But I don't really get the whole concept of creating unique salts because I can't imagen 
A. How you would be able to create a unique salt for every user that creates an account,
B.  How you would be able to compare passwords since the salts differ from user to user.
So my questions are:

How can I make a unique salt for every user.
How would I be able to compare the password.

","Salts are generated with the help of the random source of the operating system /dev/urandom. This random number generator collects random events like user login, or hardware properties, to generate real randomness.
You need to store the salt together with the password hash, a common format is shown in this answer. To verify the password, one has to extract the stored salt and use them to build a comparable hash.
","36","<security><passwords><unique><password-protection><salt>","-1","0","1","2019-03-11 08:12:32","","0","","","","","2019-03-09 21:19:39",""
"40949834","Why my encrypt algorithm always returns same salt every time?","I have made my own encrypt and decrypt algorithm, but if I call crypting class and encrypt data, it writes every time same salt to file, but if I start app again, the salt is different. Here are 2 application runs and its salts.
50|Mmlv""!QM17=@QwjT`11(f&}G14[bxNpN19""V+W_r`
41|Mmlv""!QM17=@QwjT`6(f&}G6[bxNpN14""V+W_r`15j.zVN6<|N-}
92|Mmlv""!QM
93|Mmlv""!QM
92|Mmlv""!QM91=@QwjT`93(f&}G
86|Mmlv""!QM88=@QwjT`
91|Mmlv""!QM93=@QwjT`
93|Mmlv""!QM

Second
50!qKR}H!;15#X:y/O`11{Q'b|1TL[PYecoj19?*V`E|L?-
41!qKR}H!;17#X:y/O`6{Q'b|6TL[PYecoj14?*V`E|L?-15M|;:Goln6&.E:yy=>
92!qKR}H!;
93!qKR}H!;
92!qKR}H!;91#X:y/O`93{Q'b|
87!qKR}H!;93#X:y/O`
86!qKR}H!;93#X:y/O`
87!qKR}H!;88#X:y/O`

And here's my encrypt code in C#
public string encryptString(string text)
    {
        Random rdn = new Random();
        String[] textArray = new String[] { text };
        string alphabet = ""qzwxecrvtbynumiopalskdjfhgPMONIBUVYCTXRZEWQASLKDFJHG~!@#$%^&*()_+}{|\"":><?`-=][\';/., 9632587410"";
        string hashedText = """";
        for (int i = 0; i < text.Length; i++)
        {
            string salt = """";
            int saltCount = rdn.Next(low_range, high_range);
            for (int e = 0; e < saltCount; e++)
            {
                int alphabetSaltCount = rdn.Next(0, alphabet.Length - 11);
                salt += alphabet[alphabetSaltCount];
            }
            hashedText += alphabet.IndexOf(text[i]).ToString() + salt;
        }
        return hashedText;
    }

","You may need to seed the random number generator differently.
Random uses the system clock by default for its seed so calling new Random() really close to each other can end up with the same seed number. 
See the section ""Instantiating the random number generator"" here: https://msdn.microsoft.com/en-us/library/system.random(v=vs.110).aspx
","35","<c#><encryption><salt>","-2","1","1","2018-09-03 12:21:39","40950104","5","","5334773","","2018-09-03 12:21:39","2016-12-03 16:18:18","2016-12-03 16:55:12"
"33673318","How to retrieve the correct salt from phps password_hash()?","I know that the salt is included in the output of phps password_hash(), but when I execute the following:
echo password_hash('JohnDoe', PASSWORD_DEFAULT, ['salt' => 'saltsaltsaltsaltsaltsh']);
# this will be $2y$10$saltsaltsaltsaltsaltseQMyqgPkFxQ1hfP2yBcGxgbJZGe1uGXq

I can see only part of the original salt, the last character seems to be truncated or somehow converted to something else?
So, how do I get the last character of the salt?
Update
Sorry, let me clarify my question: How can I get the salt out of the returned hash from phps password_hash() function? I do not plan on using custom-salts, just want to get the php-provided one. My example is just to show, that my 22-len string is not fully represented in the hash, there only 21 charachters of my salt are visible. Why? Where is the last charachter?
","","35","<php><hash><passwords><salt><php-password-hash>","0","","0","2015-11-12 14:29:57","","8","","3078330","","2015-11-12 14:29:57","2015-11-12 14:05:45","2016-03-16 22:33:58"
"53610705","Override salt of Lollipin encryption","I have implemented my app to use Lollipin library to show a Pin Screen when the user is inactive or the app is on background for a long time to protect the app.
I save the generated pin on the server and retrieve it on the login, but when the user is on a new device or clear the data, the salt is lost from the shared preference and creating a new one will use the current milisecs of the system, which won't match the one previously created.
Is there a way to override the AppLockImpl or to customise the salt I want to use?

","","35","<android><encryption><salt><passcode><pin-code>","0","","0","2018-12-04 10:21:36","","2","","","","","2018-12-04 10:21:36",""
"58625845","NotSupportedException: The hashtype is not supported","When I press Login in my Webapplication I get an Error in my SecurePasswordHasher.
I dont know how I can fix it.
This is my entire Hashing file:
using System;
using System.Security.Cryptography;

namespace Verwaltungsprogramm2.wwwroot.hashing
{
    public static class SecurePasswordHasher
    {
        /// <summary>
        /// Size of salt.
        /// </summary>
        private const int SaltSize = 16;

        /// <summary>
        /// Size of hash.
        /// </summary>
        private const int HashSize = 20;

        /// <summary>
        /// Creates a hash from a password.
        /// </summary>
        /// <param name=""password"">The password.</param>
        /// <param name=""iterations"">Number of iterations.</param>
        /// <returns>The hash.</returns>
        public static string Hash(string password, int iterations)
        {
            // Create salt
            byte[] salt;
            byte[] hash;
            using (RNGCryptoServiceProvider rNGCryptoServiceProvider = new RNGCryptoServiceProvider())
            {
                rNGCryptoServiceProvider.GetBytes(salt = new byte[SaltSize]);
            }

            // Create hash
            using (Rfc2898DeriveBytes pbkdf2 = new Rfc2898DeriveBytes(password, salt, iterations))
            {
                hash = pbkdf2.GetBytes(HashSize);
            }

            // Combine salt and hash
            var hashBytes = new byte[SaltSize + HashSize];
            Array.Copy(salt, 0, hashBytes, 0, SaltSize);
            Array.Copy(hash, 0, hashBytes, SaltSize, HashSize);

            // Convert to base64
            var base64Hash = Convert.ToBase64String(hashBytes);

            // Format hash with extra information
            return string.Format(""$MYHASH$V1${0}${1}"", iterations, base64Hash);
        }

        /// <summary>
        /// Creates a hash from a password with 10000 iterations
        /// </summary>
        /// <param name=""password"">The password.</param>
        /// <returns>The hash.</returns>
        public static string Hash(string password)
        {
            return Hash(password, 10000);
        }

        /// <summary>
        /// Checks if hash is supported.
        /// </summary>
        /// <param name=""hashString"">The hash.</param>
        /// <returns>Is supported?</returns>
        public static bool IsHashSupported(string hashString)
        {
            return hashString.Contains(""$MYHASH$V1$"");
        }

        /// <summary>
        /// Verifies a password against a hash.
        /// </summary>
        /// <param name=""password"">The password.</param>
        /// <param name=""hashedPassword"">The hash.</param>
        /// <returns>Could be verified?</returns>
        public static bool Verify(string password, string hashedPassword)
        {
            // Check hash
            if (!IsHashSupported(hashedPassword))
            {
                throw new NotSupportedException(""The hashtype is not supported"");
            }

            // Extract iteration and Base64 string
            var splittedHashString = hashedPassword.Replace(""$MYHASH$V1$"", """").Split('$');
            var iterations = int.Parse(splittedHashString[0]);
            var base64Hash = splittedHashString[1];

            // Get hash bytes
            var hashBytes = Convert.FromBase64String(base64Hash);

            // Get salt
            var salt = new byte[SaltSize];
            Array.Copy(hashBytes, 0, salt, 0, SaltSize);

            // Create hash with given salt
            var pbkdf2 = new Rfc2898DeriveBytes(password, salt, iterations);
            byte[] hash = pbkdf2.GetBytes(HashSize);

            // Get result
            for (var i = 0; i < HashSize; i++)
            {
                if (hashBytes[i + SaltSize] != hash[i])
                {
                    return false;
                }
            }
            return true;
        }


    }
}

My program runs into the IsHashSupported Exception when I press Login.
And this line is where the exception gets thrown:
var splittedHashString = hashedPassword.Replace(""$MYHASH$V1$"", """").Split('$');


I would be very pleased to get an answer.
","","35","<c#><asp.net><hash><salt><rfc2898>","0","","0","2019-10-30 13:07:06","","5","","5516339","","2019-10-30 13:07:06","2019-10-30 12:54:45",""
"41968481","PHP salt generation is not showing up properly in DB?","I am putting together a user register/login system for a site I'm making, and in the tutorial I am following the salt is supposed to be 32 characters long. 
This works when I run the script and echo out the salt onto the page as a test, but when I remove the echo command, the code either updates the mySQL DB with a blank salt, or only 1 - 2 characters at the most. 
I am really new to PHP (and coding in general) so my lack of knowledge here means I am probably missing something obvious. I have followed the tutorial over and over again, still producing the same results. 
Does anyone know why this could be?
Here is the code: 
Hash.php
<?php
class Hash {
    public static function make($string, $salt) {
        return hash('sha256', $string . $salt);
    }

    public static function salt($length) {
        return mcrypt_create_iv($length);



    }

    public static function unique() {
        return self::make(uniqid());

    }
}

?>

register.php: 
<?php 
require_once 'core/init.php';


if(Input::exists()) {
if(Token::check(Input::get('token'))) {
        $validate = new Validate();
        $validation = $validate->check($_POST, array(
                'username' => array(
                    'required' => true,
                    'min' => 2,
                    'max' => 20,
                    'unique' => 'users'
                ),
                'password' => array(
                        'required' => true,
                        'min' => 6

                    ),
                'password_again' => array(
                        'required' => true,
                        'matches' => 'password'

                    ),
                'name' => array(
                        'required' => true,
                        'min' => 2,
                        'max' => 50

                    )


            ));


            if($validation->passed()) {
                $user = new User();

                $salt = Hash::salt(32);

                try {
                    $user->create(array(
                        'username' => Input::get('username'),
                        'password' => Hash::make(Input::get('password'), $salt),
                        'salt' => $salt,
                        'name' => Input::get('name'),
                        'joined' => date('Y-m-d H:i:s'),
                        'group' => 1
                    )); 

                    Session::flash('home', 'You have been registered and can now log in.');
                    header('Location: index.php');

                } catch(Exception $e) {
                    die($e->getMessage());
                }

            } else {
                foreach($validation->errors() as $error) {
                    echo $error, '<br>';
                }
            }
}
}
?>

","","34","<php><mysql><database><salt>","0","","0","2017-01-31 22:16:07","","12","","","","","2017-01-31 22:16:07",""
"26308198","Is it a good idea to use the user's username as a salt when hashing a password like hash(username_str + password_str)?","Should I use one secret string as salt for hashing or is it better to have each user its own salt for hashing?
Consider these three hashes:
hash(""secretKey777"" + password);
hash(""secretKey777"" + username + password);
hash(username + password);

Which one is the hardest to crack and the safest? I think it's best to use hash(""secretKey777"" + username + password); because for each user not only has ""secretKey777"" as a salt but also its own username. In case code that hashes the passwords leaks, there will be no attack on all the hashes at once - each has will have its own unique salt.
","In my understanding, salt has to be:
a) unique for each user (otherwise, leaking the salt will allow building a rainbow table for your specific salt to decrypt passwords), so hash(""secretKey777"" + password) is not an option for me.
b) cryptographically random (I don't have an argument for this, it's just a feeling that this helps).
I would prefer 
hash(""secretKey777"" + cryptographically_random_salt_string + password);

","34","<hash><salt>","-1","-1","1","2014-10-10 21:41:22","","2","","","","","2014-10-10 21:20:48",""
"57163422","getting HTTP Error 400 (Bad request) in salt when using artifactory.downloaded","As usual I tried to download an artifact from Jfrog Artifactory via the salt state 'artifactory.downloaded'. But I recently got a HTTP Error 400 (Bad request).
artifact_downloaded:
  artifactory.downloaded:
    - artifact:
        artifactory_url: '<REPO_URL>'
        repository: '<REPO>'
        artifact_id: 'ear'
        group_id: '<GROUP_ID>'
        packaging: 'ear'
        version: '<VERSION>'
        classifier: '<CLASSIFIER>'
        username: '<USERNAME>'
        password: '<PASSWORD>'
    - target_file: <TARGET_FILE>

This causes a bad request (HTTP Error 400)
      ID: artifact_downloaded
Function: artifactory.downloaded
  Result: False
 Comment: HTTP Error 400. Request URL: https://....ear
 Started: 13:38:51.594824
Duration: 1544.713 ms
 Changes:

","","34","<artifactory><salt-stack><salt>","0","","0","2019-07-23 11:47:02","","0","","2218625","","2019-07-23 11:47:02","2019-07-23 11:41:14",""
"43423848","erro when running this code, looking up did nothing","I am having great problem fixing this issue here and i am not very familiar with php. I don't see any problem missing in the code. I have searched and spent a really long time on this. However, it just keeps changing from one to another issue. the error that appears looks like this,

Undefined variable: password in /home2/abdi/public_html/phpinfo.php/login files/login.php on line 19 

here is the actual code
<?php  error_reporting(E_ALL); ini_set('display_errors', 1);  session_start(); //connect to database $db=mysqli_connect(""localhost"",""abdi_yae"",""abdi_yae123"",""abdi_ya"");   if(isset($_POST['login_btn']))  {     addslashes(trim($_POST['username']));     addslashes(trim($_POST['password']));     //$username=mysqli_real_escape_string($_POST['username']);    // $password=mysqli_real_escape_string($_POST['password']);             $password=md5($password); //Remember we hashed password before storing last time     $sql=""SELECT * FROM users WHERE username='$username' AND password='$password'"";          $result=mysqli_query($db,$sql);     if(mysqli_num_rows($result)==1)                         {        $_SESSION['message']=""You are now Logged In"";        $_SESSION['username']= $username;         header(""location:home.php"");     }    else    {                $_SESSION['message']=""Username and Password combiation incorrect"";     } } ?>

","You need to set password variable for this.
$password = $_REQUEST['pass_text_name'];

","33","<php><hash><parameters><passwords><salt>","-2","0","2","2017-04-16 17:38:59","","5","","7870541","","2017-04-16 17:38:59","2017-04-15 08:22:24","2017-04-15 12:21:17"
"43423848","erro when running this code, looking up did nothing","I am having great problem fixing this issue here and i am not very familiar with php. I don't see any problem missing in the code. I have searched and spent a really long time on this. However, it just keeps changing from one to another issue. the error that appears looks like this,

Undefined variable: password in /home2/abdi/public_html/phpinfo.php/login files/login.php on line 19 

here is the actual code
<?php  error_reporting(E_ALL); ini_set('display_errors', 1);  session_start(); //connect to database $db=mysqli_connect(""localhost"",""abdi_yae"",""abdi_yae123"",""abdi_ya"");   if(isset($_POST['login_btn']))  {     addslashes(trim($_POST['username']));     addslashes(trim($_POST['password']));     //$username=mysqli_real_escape_string($_POST['username']);    // $password=mysqli_real_escape_string($_POST['password']);             $password=md5($password); //Remember we hashed password before storing last time     $sql=""SELECT * FROM users WHERE username='$username' AND password='$password'"";          $result=mysqli_query($db,$sql);     if(mysqli_num_rows($result)==1)                         {        $_SESSION['message']=""You are now Logged In"";        $_SESSION['username']= $username;         header(""location:home.php"");     }    else    {                $_SESSION['message']=""Username and Password combiation incorrect"";     } } ?>

","<?php  error_reporting(E_ALL);
ini_set('display_errors', 1);
session_start(); //connect to database   
$db=mysqli_connect(""localhost"",""abdi_yae"",""abdi_yae123"",""abdi_ya"");
if(isset($_POST['login_btn']))  {
$username = addslashes(trim($_POST['username']));  
//addslashes(trim($_POST['password']));    
//$username=mysqli_real_escape_string($_POST['username']);    
// $password=mysqli_real_escape_string($_POST['password']);
$password=md5($_POST['password']); //Remember we hashed password before storing last time 
$sql=""SELECT * FROM users WHERE username='$username' AND password='$password'"";
$result=mysqli_query($db,$sql);
if(mysqli_num_rows($result)==1)
    {
        $_SESSION['message']=""You are now Logged In"";
        $_SESSION['username']= $username;
        header(""location:home.php"");
    }
    else
    {   
        $_SESSION['message']=""Username and Password combiation incorrect"";
    } 
} 
?>

Check Now Buddy. It's Done
","33","<php><hash><parameters><passwords><salt>","-2","0","2","2017-04-16 17:38:59","","5","","7870541","","2017-04-16 17:38:59","2017-04-15 08:22:24","2017-04-15 12:21:17"
"31155204","does hashing suffice encryption","does using hash functions and algorithims suffice the need to encrypt the data, while communicating with the server
I am applying salt mechanism in my project and I will be concatenating the salt with the entered password, and then hash them all.
do I still need to encrypt the result?
","The usual workflow for a website to transmit user passwords looks like this:

The client sends the password plaintext to the server.
The transmission is done with an encrypted connection (HTTPS/SSL), to prevent a ManInTheMiddle attack.
The server calculates a hash of the plaintext password, and this hash is then stored in the database. It is not necessary to encrypt the hash any further.

Make sure you use a random unique salt for each password, and a slow hash function with a cost factor for hashing passwords. Good algorithms are BCrypt, PBKDF2 or SCrypt.
","33","<security><web-applications><salt>","0","0","2","2015-07-02 23:28:43","","0","","","","","2015-07-01 07:34:46",""
"31155204","does hashing suffice encryption","does using hash functions and algorithims suffice the need to encrypt the data, while communicating with the server
I am applying salt mechanism in my project and I will be concatenating the salt with the entered password, and then hash them all.
do I still need to encrypt the result?
","Storing passwords
To store user passwords securely, you need 3 things:

Do not store the plain password, store a hash instead
The hash makes it extremely difficult to recuperate the password even if an attacker manages to capture the entire database
To prevent the use of rainbow tables, you need a salt
The salt is stored in the clear (can be along with the hash) and is random, one for every user and you can easily chose a few one whenever the user changes their password.
You need a SLOW hash, not a fast hash
What are fast hashes: MD5 (consider it broken), SHA-1, SHA-2, ... are unsuitable as the attacker can perform them too fast and use dictionary attacks to try common passwords and find that way up to 95% of you user's passwords in mere hours on modern rigs.
How slow does it need to be ? As slow as you can afford. 

And there's a rule 0: Do not invent crypto yourself, you will make serious mistakes before you know it.
Other privacy sensitive info
You're most probably also storing other sensitive information of your visitors in addition to the passwords (email addresses, IP addresses, names, postal address, ...), CC numbers (you better not go there), ...
You need to protect that as well and using hashes isn't the way to do that in most cases. Some of these have requirements and regulations of their own (e.g. Credit Card data is regulated by the issuers who'll force you to be compliant with PCI-DSS).
In essence you need to do a risk analysis and manage that risk by either accepting it (""so be it""), transferring it (""get insurance""), avoid it (""we're not storing that""), or mitigating it (""we're going to improve our way of working"").
encryption
Why the media will make you believe there's a ""magic"" solution in that incomprehensible ""encryption"" thing, in reality it needs to be done right and in the right conditions to have any meaning at all.
E.g. If you encrypt the entire disk of a server: it will not protect you from an attacker abusing your server scripts and getting to the database (as the database engine and webserver scripts have access to the decrypted disk already)
So, you really need to go back to the risk analysis and chose the measures there instead of getting ahead of yourself and suggesting encryption as a tool that's unlikely to help you for your biggest risks.
","33","<security><web-applications><salt>","0","0","2","2015-07-02 23:28:43","","0","","","","","2015-07-01 07:34:46",""
"49421289","how to persist fos_user data from java desktop application","We are five students in a team working on a project using SCRUM methode.
Our first sprint was WEB application...
Now, we are working at the second sprint which is Desktop application with JAVA.
In the first sprint(Sprint Web),we have created our database using FOS_USER Bundle, this database contains 'User' table, his sql script is(some columns):
DROP TABLE IF EXISTS `User`;
CREATE TABLE IF NOT EXISTS `User` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(180) COLLATE utf8_unicode_ci NOT NULL,
  `username_canonical` varchar(180) COLLATE utf8_unicode_ci NOT NULL,
  `email` varchar(180) COLLATE utf8_unicode_ci NOT NULL,
  `email_canonical` varchar(180) COLLATE utf8_unicode_ci NOT NULL,
  `enabled` tinyint(1) NOT NULL,
  `salt` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `password` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `last_login` datetime DEFAULT NULL,
  `confirmation_token` varchar(180) COLLATE utf8_unicode_ci DEFAULT NULL,
  `password_requested_at` datetime DEFAULT NULL,
  `roles` longtext COLLATE utf8_unicode_ci NOT NULL COMMENT '(DC2Type:array)',
  PRIMARY KEY (`id`),
  UNIQUE KEY `UNIQ_1D1C63B392FC23A8` (`username_canonical`),
  UNIQUE KEY `UNIQ_1D1C63B3A0D96FBF` (`email_canonical`),
  UNIQUE KEY `UNIQ_1D1C63B3FF631228` (`etablissement_id`),
  UNIQUE KEY `UNIQ_1D1C63B3C05FB297` (`confirmation_token`)
) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

Now, in the sprint java, we have generated the entities from database using Netbeans tool, and we get this class(some attributs):
public class User{
private Integer id;
private String username;
private String usernameCanonical;
private String email;
private String emailCanonical;
private short enabled;
private String salt;
private String password;
private Date lastLogin;
private String confirmationToken;
private Date passwordRequestedAt;
private String roles;
}

Now, we need to persist(/get to authentificate) an User object into(/from) this database, but the problem is, the password was crypted with FOS_USER Bundle.So what is the way to decrepte/encrypte this password.
Our DAOUser is like this!?
public void ajouter(User user) {
    String req = ""INSERT INTO User (nom,username,email,enabled,salt,password,roles) VALUES (?,?,?,?,?,?)"" ;
    PreparedStatement pre;
    try {
        pre = connection.prepareStatement(req);
        pre.setString(1, user.getUsername());
        pre.setString(2, user.getEmail());
        pre.setShort(3, user.getEnabled());
        //Some thing wrong : exp in database {username:Zain,salt:'0Yi3LZANkpfMsnhbn2XHA00cASLCGVfWc7TJWNOjXsk')
        pre.setString(4, user.getSalt());
        //Some thing wrong : exp in database {username:Zain,passowrd:'qXSSYBDXWQA/ZcbPVOoBKzd5oshTkQP0Q3AeEilnh47Mcrc9uUZYDYwmRJiMKc7nRPvRx6k0eEJrc6HrrDvZtQ==')
        pre.setString(5, user.getPassword());
        //This Role must be unserialised(the equivalent unserialize method in php)
        pre.setString(6,user.getRoles());

        pre.executeUpdate();
    } catch (SQLException ex) {
        Logger.getLogger(EtablissementService.class.getName()).log(Level.SEVERE, null, ex);
    }
}

","You don't wan to decrypt password. It should be one way hash. To check validity of password, encrypt user input in the same way and check calculated hash to match the hash in the database
","33","<java><symfony><authentication><fosuserbundle><salt>","0","1","1","2018-03-22 05:51:06","49421448","0","","","","","2018-03-22 05:38:18",""
"33087464","How to implement a webpage login, using POSIX permissions on CentOS 7?","I am designing a storage appliance that runs on CentOS 7. For accessing storage, we are using the standard Linux POSIX permissions. For accessing the web based interface for managing the storage, we would like to use the same user name and password so that the user doesn't have to remember two. Everything is chugging along nicely, but there is one hole.
Quick architecture background: web based front end interfaces with appliance database, python service in back end watches database and takes action... feedback happens the same way.
The question: Where and how should I store the HASH and SALT for each user. Mainly a security and architecture question. 
More information: Basically when the appliance starts the back end will parse the Linux passwd, group, and shadow files and plop the information into the database... is it okay to store the hash and salt in the database, or should that remain only in the shadow file (I think it would only be useful to store both and it would make programming easier, but are there security concerns)? I've heard you never want the server to know the actual password, but how would this work if you are also are supposed to hash at the server, not the client? i.e. the server will know the password for 1 line of code before it is hashed.
This is a question with common subjects, but optimizing authentication for this particular architecture is proving kind of confusing. A diagram is worth a thousand words if someone has done something similar.

The above diagram seems to show the minimum I intend to do. But this has concerns:

Password and user is transmitted to server over clear text.
Server will know password for a minute.
Database knows both the hash and salt.

These three concerns are what are stopping me from implementing this. I've already implemented variations many times, I want to get it right this time. Are my concerns warranted and how do I compensate? 
","","33","<hash><md5><backend><salt><password-encryption>","0","","0","2015-10-12 21:49:01","","3","","2550940","","2015-10-12 21:49:01","2015-10-12 18:03:25",""
"40164945","Explanation for some simple code","I'm trying to understand a little piece of code. Can someone explain what exactly is going on with it. Is it shifting the string on even pieces to the right?
salt = '40cf738d702c78d8939da5e8cfd324ae';
str_overral = salt;
str_overral = str_overral.replace(/[^a-z0-9]/gi, '').toLowerCase();
str_res='';
for (i=0; i<str_overral.length; i++) {
    l=str_overral.substr(i,1);
    d=l.charCodeAt(0);
     if ( Math.floor(d/2) == d/2 ) {
       str_res+=l;
    } else {
       str_res=l+str_res;
    }
}

","the new string if built with even characters to the end/right (and I mean the character's code) while odd characters go to the beginning/left


salt = '40cf738d702c78d8939da5e8cfd324ae';
str_overral = salt;
str_overral = str_overral.replace(/[^a-z0-9]/gi, '').toLowerCase();
str_res='';
for (i=0; i<str_overral.length; i++) {
    l=str_overral.substr(i,1);
    d=l.charCodeAt(0);
    console.log('str['+i+']: ""' + l + '"" ('+d+')');
     if ( Math.floor(d/2) == d/2 ) {
       console.log('even, pushing to the end/right/back');
       str_res+=l;
    } else {
       console.log('odd, pushing to the beginning/left/front');
       str_res=l+str_res;
    }
    console.log('res: ""' + str_res + '""');
}



","33","<html><string><salt>","0","1","1","2016-11-04 02:27:37","","1","","4494","","2016-11-04 02:20:43","2016-10-20 21:35:14",""
"40865059","salt-call output occurs npm debug info","salt-call output occurs npm debug info
when I execute commands on a minion  salt-call sys.list_modules --output=json , 
the output is:
[INFO    ] Executing command 'npm --version' in directory '/root'
{
    ""local"": [
        ""acl"", 
        ""aliases"", 
        ""alternatives"", 
        ""apache"", 
        ""archive"", 
         ...
        ""user"", 
        ""vbox_guest"", 
        ""virtualenv"", 
        ""webutil"", 
        ""xfs""
    ]
}

I don't know why it contains this:  
[INFO    ] Executing command 'npm --version' in directory '/root'
Minion Log
tail -f /var/log/salt/minion

2016-11-29 18:04:37,669 [salt.modules.cmdmod][INFO    ][2598] Executing command 'npm --version' in directory '/root'
2016-11-29 18:05:33,742 [salt.modules.cmdmod][INFO    ][2804] Executing command 'npm --version' in directory '/root'
2016-11-29 18:06:15,550 [salt.modules.cmdmod][INFO    ][2946] Executing command 'npm --version' in directory '/root'
2016-11-29 18:07:28,020 [salt.modules.cmdmod][INFO    ][3053] Executing command 'npm --version' in directory '/root'
2016-11-29 18:07:56,166 [salt.modules.cmdmod][INFO    ][3102] Executing command 'npm --version' in directory '/root'
2016-11-29 18:08:59,328 [salt.modules.cmdmod][INFO    ][3238] Executing command 'npm --version' in directory '/root'
2016-11-29 18:09:41,690 [salt.modules.cmdmod][INFO    ][3312] Executing command 'npm --version' in directory '/root'

Salt-Version

salt-minion 2016.3.1 (Boron)

npm --version

1.3.6

","","32","<salt>","1","","0","2016-11-29 11:41:59","","0","","","","","2016-11-29 11:41:59",""
"54064665","Authentification with salt","i'm trying to write a sign in activity , i wrote the hashPassword function below. Why does it give a different result for the same salt and password? 
  import javax.crypto.SecretKeyFactory;

import javax.crypto.spec.PBEKeySpec;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;

public class Main {

    public static void main(String[] args) {


        System.out.println(""Hello World!"");
       try { System.out.println(""test1: ""+hashPassword(""[B@2b1e4124"",""bfnfnfjfjf""));
           System.out.println(""test2: ""+hashPassword(""[B@2b1e4124"",""bfnfnfjfjf""));}
       catch (NoSuchAlgorithmException | InvalidKeySpecException e){}

    }
     public static  String hashPassword(String password, String salt) throws NoSuchAlgorithmException, InvalidKeySpecException {

        char[] passwordChars = password.toCharArray();
        byte[] saltBytes =salt.getBytes();
        PBEKeySpec spec = new PBEKeySpec(
                passwordChars,
                saltBytes,
                5000,
                10
        );
        SecretKeyFactory key = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA512"");
        byte[] hashedPassword = key.generateSecret(spec).getEncoded();
        return hashedPassword.toString();
    }

}

","Your hash is actually calculating the same result each time, but you're calling toString on the resulting byte array. This returns a debug string, which is different for each instance (see this question for details).
Instead of 
return hashedPassword.toString();

You should 
return hashedPassword;

... and use the byte[] directly.
If you want to display the hash in a human readable format, you could print it like this:
String hashString = new BigInteger(1, hashedPassword).toString(16);
System.out.println(hashString);

There is a second mistake in your code. The forth argument to the PBEKeySpec constructor is the length in bits. 10 is way too short to be useful. You probably want 512 (the SHA512 output length).
","31","<java><authentication><salt><sha>","3","1","1","2019-01-06 19:54:08","","0","","5031762","","2019-01-06 19:24:23","2019-01-06 18:36:03",""
"52179915","How to Disable Save As Excel 97-2003 using VBA to prevent bypassing salt?","I would like to disable the possibility to save a workbook (specifically) to an Excel 97-2003 workbook. So users cant disable the stronger protection salt, which is introduced in office 2013, and break the password easily.
","This is not possible if they can create their own file (they can copy the data out anyway).
But if you're going to provide them a file, you can give it to them as xlsm and block them from doing SaveAs. Put this in ThisWorkbook:
Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
    If SaveAsUI Then Cancel = True
End Sub

","31","<vba><password-protection><salt>","0","0","1","2018-09-05 09:29:01","52181717","0","","","","","2018-09-05 07:52:55",""
"57628326","salt stack TypeError: argument must be an int, or have a fileno() method","When I run salt orchestration states I am getting an error:
salt-run state.orch orch.build.build_linux_azure pillar='{""name"": ""usazrklxp10712.nix.us.cworld.company.com""}' --out=nested
[WARNING ] /srv/extmod/grains/ciscoaci.py:41: DeprecationWarning: Use of 'salt.utils.is_proxy' detected. This function has been moved to 'salt.utils.platform.is_proxy' as of Salt 2018.3.0. This warning will be removed in Salt Neon.

[WARNING ] /srv/extmod/grains/ciscoprime.py:41: DeprecationWarning: Use of 'salt.utils.is_proxy' detected. This function has been moved to 'salt.utils.platform.is_proxy' as of Salt 2018.3.0. This warning will be removed in Salt Neon.

[WARNING ] /srv/extmod/runners/company_certs.py:124: DeprecationWarning: Use of 'salt.utils.is_linux' detected. This function has been moved to 'salt.utils.platform.is_linux' as of Salt 2018.3.0. This warning will be removed in Salt Neon.

[ERROR   ] Exception in callback <functools.partial object at 0x7fc79f5dd418>
Traceback (most recent call last):
  File ""/usr/lib64/python2.7/site-packages/tornado/ioloop.py"", line 591, in _run_callback
    ret = callback()
  File ""/usr/lib64/python2.7/site-packages/tornado/stack_context.py"", line 274, in null_wrapper
    return fn(*args, **kwargs)
  File ""/usr/lib64/python2.7/site-packages/tornado/ioloop.py"", line 597, in <lambda>
    self.add_future(ret, lambda f: f.result())
  File ""/usr/lib64/python2.7/site-packages/tornado/concurrent.py"", line 214, in result
    raise_exc_info(self._exc_info)
  File ""/usr/lib64/python2.7/site-packages/tornado/gen.py"", line 230, in wrapper
    yielded = next(result)
  File ""/usr/lib/python2.7/site-packages/salt/crypt.py"", line 599, in _authenticate
    io_loop=self.io_loop)
  File ""/usr/lib/python2.7/site-packages/salt/transport/client.py"", line 108, in factory
    return salt.transport.zeromq.AsyncZeroMQReqChannel(opts, **kwargs)
  File ""/usr/lib/python2.7/site-packages/salt/transport/zeromq.py"", line 141, in __new__
    obj.__singleton_init__(opts, **kwargs)
  File ""/usr/lib/python2.7/site-packages/salt/transport/zeromq.py"", line 205, in __singleton_init__
    kwargs={'io_loop': self._io_loop})
  File ""/usr/lib/python2.7/site-packages/salt/transport/zeromq.py"", line 985, in __init__
    super(AsyncReqMessageClientPool, self).__init__(AsyncReqMessageClient, opts, args=args, kwargs=kwargs)
  File ""/usr/lib/python2.7/site-packages/salt/transport/__init__.py"", line 71, in __init__
    self.message_clients = [tgt(*args, **kwargs) for _ in range(sock_pool_size)]
  File ""/usr/lib/python2.7/site-packages/salt/transport/zeromq.py"", line 1032, in __init__
    self._init_socket()
  File ""/usr/lib/python2.7/site-packages/salt/transport/zeromq.py"", line 1086, in _init_socket
    self.stream = zmq.eventloop.zmqstream.ZMQStream(self.socket, io_loop=self.io_loop)
  File ""/usr/lib64/python2.7/site-packages/zmq/eventloop/zmqstream.py"", line 107, in __init__
    self._init_io_state()
  File ""/usr/lib64/python2.7/site-packages/zmq/eventloop/zmqstream.py"", line 528, in _init_io_state
    self.io_loop.add_handler(self.socket, self._handle_events, self._state)
  File ""/usr/lib64/python2.7/site-packages/tornado/ioloop.py"", line 703, in add_handler
    self._impl.register(fd, events | self.ERROR)
TypeError: argument must be an int, or have a fileno() method.

This is the command I'm using:
salt-run state.orch orch.build.build_linux_azure pillar='{""name"": ""usazrklxp10712.nix.us.cworld.company.com""}' --out=nested

I am using salt 3.4.1 and the error started today, not clear on the cause. The error above also turns up in the master logs.
This is my salt master version from the versions report:
     salt-master --versions-report
    Salt Version:
               Salt: 2018.3.4
Dependency Versions:
           cffi: Not Installed
       cherrypy: 5.6.0
       dateutil: Not Installed
      docker-py: Not Installed
          gitdb: Not Installed
      gitpython: Not Installed
          ioflo: Not Installed
         Jinja2: 2.8.1
        libgit2: Not Installed
        libnacl: Not Installed
       M2Crypto: Not Installed
           Mako: Not Installed
   msgpack-pure: Not Installed
 msgpack-python: 0.4.6
   mysql-python: Not Installed
      pycparser: Not Installed
       pycrypto: 2.6.1
   pycryptodome: Not Installed
         pygit2: Not Installed
         Python: 2.7.13 (default, Mar 30 2018, 15:31:59)
   python-gnupg: Not Installed
         PyYAML: 3.11
          PyZMQ: 14.5.0
           RAET: Not Installed
          smmap: Not Installed
        timelib: Not Installed
        Tornado: 4.2.1
            ZMQ: 4.0.5

System Versions:
           dist: redhat 6.9 Santiago
         locale: UTF-8
        machine: x86_64
        release: 2.6.32-696.16.1.el6.x86_64
         system: Linux
        version: Red Hat Enterprise Linux Server 6.9 Santiago

This started happening today, after another user logged in not certain of the cause yet. How do I correct this problem?
","","31","<salt-stack><salt>","0","","0","2019-08-23 15:15:49","","0","","1017466","","2019-08-23 15:15:49","2019-08-23 14:31:49",""
"56324057","Update password and salt in database when changing password in codeigniter","I have a form to change the current password. When I update the old password with the new password I'm not able to login because I'm using password and salt security login, now I don't know how to change salt when changing password.
Here is my view code:
<div class=""form-group"">
                        <label class=""col-sm-2 control-label"">New Password <span class=""required"">*</span></label>
                        <div class=""col-sm-10"">
                            <input type=""password"" name=""new_password"" id=""new_password"" class=""form-control"" required />
                            <span class=""error_message""></span>
                        </div>
                    </div>
                    <div class=""form-group"">
                        <label class=""col-sm-2 control-label"">Confirm Password <span class=""required"">*</span></label>
                        <div class=""col-sm-10"">
                            <input type=""password"" name=""confirm_password"" id=""confirm_password"" class=""form-control"" required />
                        </div>
                    </div>
                    <div class=""form-group"">
                        <div class=""col-sm-4 col-sm-offset-2"">
                            <button class=""btn btn-primary"" type=""submit"" name=""submit"" value=""submit"">Submit</button>
                        </div>
                    </div>

Controller code:
public function index() {
    $this->admin_view('changepassword');
    if ($this->input->post('submit')) {
        $users_id = $this->session->userdata('users_id');
        $new_pwd = md5($this->input->post('new_password'));
        $change_password = $this->login_model->change_password($users_id,$new_pwd);
        //print_r($new_pwd);exit();
        if ($change_password) {
            $this->session->set_flashdata('success_message', ""'Password Changed.'"");
            $this->admin_view('changepassword');
        }
   }
}

Model code:
public function change_password($id,$new_pwd){

    $data = array('password' => $new_pwd);

    $this->db->where('roles_id',$id);

    $this->db->update('users', $data);

    return true;

}

","","28","<codeigniter><passwords><salt>","0","","0","2019-05-27 10:39:53","","2","","6300575","","2019-05-27 10:39:53","2019-05-27 10:15:56",""
"55258788","SQL Server 2017, aes_256 without salt","I need to use an agnostic encryption.
In the encryption of a SQL Server 2017 column, is it possible and how do I disable the salt in with aes_256?
","","27","<sql-server><aes><salt>","0","","0","2019-03-20 18:50:36","","0","","2016162","","2019-03-20 18:50:36","2019-03-20 10:40:37",""
"24077165","Query related to my encryption","so i have a login system and i have used some security measures to make it secure.
Firstly i salt my passwords:
$salt = openssl_random_pseudo_bytes(1024);
file_put_contents(""salt.txt"", $salt); 

Next i hash it using the whirlpool algorithm:
function myhash($password){ 
    $salt = file_get_contents(""private/salt.txt"");
    $password = hash_hmac('whirlpool',$password,$salt);
    return $password;
}

This is an example of the password that would get returned and stored in the Database:
56a8cf545750eec78cb58582829636b1e0378cf0fff4982305a7171f06593fb92735d3576f0ad7ba8aec40c914abc38424885cb7ac2672b1d8da36e3b95c80ce

Now my question:
If a hacker was able to recover that long string above, would they be able to somehow reverse/decrypt it to return them the actual password. Let me know what you guys think/know, is it impossible?
This is not a thread for people to suggest other things to me, please keep answers strictly related to the single question. 
","One area of attack seems to be that two same passwords result in the same string, because you use the same salt for everyone.
So without decrypting anything, they can already tell who has the same password. That probably indicates weak passwords, and they can start brute-forcing there.
","27","<php><encryption><hash><salt><whirlpool>","1","0","2","2014-06-06 08:44:10","24077647","0","","","","","2014-06-06 08:13:14",""
"24077165","Query related to my encryption","so i have a login system and i have used some security measures to make it secure.
Firstly i salt my passwords:
$salt = openssl_random_pseudo_bytes(1024);
file_put_contents(""salt.txt"", $salt); 

Next i hash it using the whirlpool algorithm:
function myhash($password){ 
    $salt = file_get_contents(""private/salt.txt"");
    $password = hash_hmac('whirlpool',$password,$salt);
    return $password;
}

This is an example of the password that would get returned and stored in the Database:
56a8cf545750eec78cb58582829636b1e0378cf0fff4982305a7171f06593fb92735d3576f0ad7ba8aec40c914abc38424885cb7ac2672b1d8da36e3b95c80ce

Now my question:
If a hacker was able to recover that long string above, would they be able to somehow reverse/decrypt it to return them the actual password. Let me know what you guys think/know, is it impossible?
This is not a thread for people to suggest other things to me, please keep answers strictly related to the single question. 
","Short answer ""NO"". whirlpool is fairly strong hashing algorithm (not encryption algorithm as encryption assumes ability to decrypt in some way). Salt (AKA shared key) just makes is even stronger. But having the same salt for everyone does not make it much weaker but makes it possible to find out who has the same password (without knowing the password itself).
Better use of salt is that it is randomly generated before use in hash function (and it does not need to be 1024 bytes - 8 bytes is more than enough for salt) and then prepended to resulting hash. This way function which will check the password knows which salt must be used and what hash is expected.
Whirlpool algorithm has no known weaknesses and uses 512 bit. Therefore it is regarded as secure. However I personally have two negative views on it:

It underwent two modifications from its inception in 2000
It is less used than other algorithms (namely SHA512).

So my personal view is that nothing wrong with your code and it is quite secure. But you may be better off switching to SHA512.
Only way to recover password from that long string is brute force for VERY LONG TIME (if password is strong of course) or may be using some technology from NSA :)
","27","<php><encryption><hash><salt><whirlpool>","1","0","2","2014-06-06 08:44:10","24077647","0","","","","","2014-06-06 08:13:14",""
"53832332","install salt-minion throw Error: Package: salt-2018.3.3-1.el7.noarch (salt-latest) Requires: python-psutil","I have installed python-psutil with pip and can use it in python.
but still install failed.

","Salt requires some python modules to be installed before installing Salt. So just try after installing the given python dependency module into your machine.
Command :   pip install psutil 
Reference - https://pypi.org/project/psutil/
","26","<salt>","0","0","1","2019-01-09 10:10:36","","1","","4700156","","2018-12-18 11:53:48","2018-12-18 11:46:12",""
"34363929","Why is the MembershipProvider not generating a unique salt?","I'm experimenting with using the Asp.Net SqlMembershipProvider, and am noticing in the aspnet_Membership table that the PasswordSalt field has the exact same value for every entry.  Now, I am using the same password for every user in my testing, but this seems wrong.  In production, if two users were to use the same password, that should be indistinguishable in the database because the password hash and salt should be different.
In the web.config membership section, I have passwordFormat=""Hashed"" set in the provider options.
What am I missing?
","","26","<asp.net><asp.net-membership><membership-provider><salt>","1","","0","2015-12-18 21:02:43","","9","","","","","2015-12-18 21:02:43",""
"56739694","Looping Through Command Line Pillar Values in Salt Orch","I have a salt orchestration state that I'm invoking with salt-call from the master, and passing in a command line pillar of the target host I want to execute the orchestration on.
I would like to be able to execute this against multiple target hosts in one command.  I can do it with an external file that I read into the orch instead of the command line pillar, but that external file needs to be present in stash and isn't able to be edited directly so it would have to be uploaded/merged every time.
Looking for a way to pass multiple target host names into the orch via the command line pillar .... if possible.
command line call:  
sudo salt-run state.orchestrate core.database.oracle.ora12201jvm_psu_orch pillar='{""target"":""myHost""}'

snippet of orch sls:  
{% set psuTarget = salt['pillar.get']('target','abcdefg') %}

download_psu_{{ psuTarget }}:
  salt.state:
    - tgt: {{ psuTarget }}
    - sls:
      - core.database.oracle.download_ora12201ojvm_psu
    - timeout: 900
    - failhard: True

I tried the syntax in the manual to pass multiple pillar values but it only processed the first one then stopped: 
sudo salt-run state.orchestrate core.database.oracle.ora11204ee_psu_orch pillar='{""target"":""myHost1"",""myHost2""}' 

I also tried using a for loop in the code, like this: 
{% set psuTargetList = 'salt[pillar.get']('target','abcdefg') %} 
{% for psuTarget in psuTargetList %} 

but it didn't interpret the values at all - gave me an error on the first identifier download_psu_0 (instead of expected download_psu_myHost1) 
","","26","<loops><salt><orchestration>","0","","0","2019-06-24 17:45:17","","0","","10350020","","2019-06-24 17:45:17","2019-06-24 15:24:05",""
"51116760","How user can change their password after using the hash password and salt?","I am trying to make a website secure by using a hashed pasword and salt. I successfully implement it. But if users want to change their password it becomes difficult. How can I recode the change password I have so as to support hashedpassword and salt that I just implemented?
This is my changepassword form - change_password.php
 <form  method=""post"" id=""change_password"" class=""form-horizontal"">
                                        <div class=""control-group"">
                                            <label class=""control-label"" for=""inputEmail"">Current Password</label>
                                            <div class=""controls"">
                                            <input type=""hidden"" id=""password"" name=""password"" value=""<?php echo $row['password']; ?>""  placeholder=""Current Password"">
                                            <input type=""password"" id=""current_password"" name=""current_password""  placeholder=""Current Password"">
                                            </div>
                                        </div>
                                        <div class=""control-group"">
                                            <label class=""control-label"" for=""inputPassword"">New Password</label>
                                            <div class=""controls"">
                                            <input type=""password"" id=""new_password"" name=""new_password"" placeholder=""New Password"">
                                            </div>
                                        </div>
                                        <div class=""control-group"">
                                            <label class=""control-label"" for=""inputPassword"">Re-type Password</label>
                                            <div class=""controls"">
                                            <input type=""password"" id=""retype_password"" name=""retype_password"" placeholder=""Re-type Password"">
                                            </div>
                                        </div>
                                        <div class=""control-group"">
                                            <div class=""controls"">
                                            <button type=""submit"" class=""btn btn-info""><i class=""icon-save""></i> Save</button>
                                            </div>
                                        </div>
                                    </form>

This is my jQuery script
<script>
            jQuery(document).ready(function(){
            jQuery(""#change_password"").submit(function(e){
                    e.preventDefault();

                        var password = jQuery('#password').val();
                        var current_password = jQuery('#current_password').val();
                        var new_password = jQuery('#new_password').val();
                        var retype_password = jQuery('#retype_password').val();
                        if (password != current_password)
                        {
                        $.jGrowl(""Password does not match with your current password  "", { header: 'Change Password Failed' });
                        }else if  (new_password != retype_password){
                        $.jGrowl(""Password does not match with your new password  "", { header: 'Change Password Failed' });
                        }else if ((password == current_password) && (new_password == retype_password)){
                    var formData = jQuery(this).serialize();
                    $.ajax({
                        type: ""POST"",
                        url: ""update_password.php"",
                        data: formData,
                        success: function(html){

                        $.jGrowl(""Your password is successfully change"", { header: 'Change Password Success' });
                        var delay = 2000;
                            setTimeout(function(){ window.location = 'dashboard_teacher.php'  }, delay);  

                        }


                    });

                    }
                });
            });
            </script>

This is my update_password.php
<?php
 include('dbcon.php');
 include('session.php');
 $new_password  = $_POST['new_password'];
 mysql_query(""update admins set password = '$new_password' where admins_id = '$session_id'"")or die(mysql_error());
 ?>

This is my login.php
$query = ""select * from admins where username = '$usernameVal';"";

     $resultSet = mysqli_query($conn,$query);

                           if(@mysqli_num_rows($resultSet) > 0){
                           //check noraml user salt and pass
                           //echo ""noraml"";

 $saltQuery = ""select salt from admins where username = '$usernameVal';"";
$result = mysqli_query($conn,$saltQuery);
$row = mysqli_fetch_assoc($result);
$salt = $row['salt'];

$saltedPW =  $escapedPW . $salt;

$hashedPW = hash('sha256', $saltedPW);

 $query = ""select * from admins where username = '$usernameVal' 
and password = '$hashedPW' "";

                            $resultSet = mysqli_query($conn,$query);

                           if(@mysqli_num_rows($resultSet) > 0){
                               $row = mysqli_fetch_assoc($resultSet);
                               echo ""your username and  password is correct"";
                               session_start();
                               $_SESSION[""id""]=$row[""admins_id""];

header(""location:group/dashboard_teacher.php"");
}
else
{
echo ""your username or password is incorrect"";
}

}

}
?>

","","25","<php><passwords><salt>","0","","0","2018-07-01 21:56:23","","2","","472495","","2018-07-01 21:56:23","2018-06-30 16:46:57",""
"55507532","Does a particular saltRound generate a unique salt?","1) In the context of bcrypt, does a particular saltRound generate a unique salt?
2) why is it that we don't need to supply the salt when we compare the 'plaintextpassword' with the 'hash'ed password as is the case in the following example:
Example from [https://www.npmjs.com/package/bcrypt][1]
bcrypt.compare(myPlaintextPassword, hash, function(err, res) {
    // res == true
});
","Usually BCrypt implementations generate a unique salt on their own and include it plaintext in the resulting hash-text. The compare function can extract it from there and use the same salt to calculate a comparable hash.
So no, the salt has nothing to do with rounds, and the compare function extracts it from the stored hash. See this answer, explaining the hash format.
","24","<bcrypt><salt>","0","1","1","2019-05-08 10:48:17","","1","","1776171","","2019-04-04 03:53:22","2019-04-04 03:48:11",""
"57271076","PBKDF2 Python Byte Array Salt","I'm encryption a file's in Vb.net application with Vb.net AesCryptoServiceProvider class and try to decrypt file's in a python applications.
In Vb.net my salt is byte array but in python im using PBKDF2 and its accept string not byte array.
I actually tried to convert my byte array to convert base 64 string and decode in python but it didnt work.
My Salt in Vb  : 
Dim salt() As Byte = {&H0, &H0, &H1, &H2, &H3, &H4, &H5, &H6, &HF1, &HF0, &HEE, &H21, &H22, &H45}

Convert.ToBase64String(salt)

Output : AAABAgMEBQbx8O4hIkU=

My question is how can i convert this byte array to string in python ?
","","24","<python><vb.net><aes><salt><pbkdf2>","0","","0","2019-07-30 11:55:40","","1","","","","","2019-07-30 11:55:40",""
"56710835","get value from manual grains doesn't work currently","trying to get Grains value in Jinja template but i dont know how to get it to work.. 
i'm traing to get fqdn and manually added grain (appfqdn)
here is the jinja
{%- set SERVERNAME = grains['fqdn'] -%}
{%- set APPTIER = grains['appfqdn'] -%}

the result of first line work very well. i get the fqdn of the server. 
2nd one doesn't. i got it like this: [u'client02.lab.home']
as you can see there is u and ' and [] 
not sure how to grab it correctly. 
also when i grab the value on salt master manfully with json format output. this is hop i get it. 
salt 'client03.lab.home' grains.item fqdn --out json
{
    ""client03.lab.home"": {
        ""fqdn"": ""client03.lab.home""
    }
}

salt 'client03.lab.home' grains.item appfqdn --out json
{
    ""client03.lab.home"": {
        ""appfqdn"": [
            ""client02.lab.home""
        ]
    }
}

not sure how to use jinja to get the value correctly without the single quot, the u and brackets.. 
Thank you
","I found the the solution. 
{%- set APPTIER = grains['appfqdn'][0] -%}

was able to to get the right result. 
","24","<jinja2><salt-stack><salt>","0","0","1","2019-06-21 22:26:21","56711071","0","","","","","2019-06-21 21:49:38",""
"35351009","Can we store sensitive client information with the admins without them(admins) identifying it?","I am trying to design a pairing application for my university this valentine.  How is it supposed to work, you ask?? The clients will submit preferences to the server and after some days if any two clients have the same preferences, they will be notified -- not in any other case. A fool-proof framework design needs to be built for this purpose. What I am willing to do is to ensure my clients that even though they will be submitting their favourite responses to me via my website, I will still not be able to see those as if I would, this application will have issues of privacy. I am trying to match the user preferences with each other, they will obviously be encrypted and there is no way I can match any two unless I decrypt them at some point in my server locally -- assuming the fact that RSA encryption mechanism has a very little probability of collision of hashed values and I definitely cannot match them :) . The bottleneck here then is >> never ever decrypt the client preferences locally on the admin's machine/server. One approach which is currently on my mind is to introduce a salt while encrypting which will stay safe in the hands of the client, but still decryption needs to be done at some point in time to match these hashes. Can there be some alternative approach for this type of design, I think I might be missing something.
","Turn things around. Design a mailbox-like system and use pseudonyms. Instead of getting an email once a match has been found, make people request it. That way you can leave the preferences unencrypted. Just the actual user has to be hidden from public. Start with an initial population of fake users to hide your early adaptors and you will be done.
I.e.: In order to post preferences, I'll leave a public key to contact me. The server searches matches and posts encrypted messages to a public site. Everyone can see these messages (or not, if you design properly) but I am the only one that can read them.
","23","<encryption><rsa><public-key-encryption><salt>","0","2","1","2016-02-11 23:23:26","35351222","0","0","5107319","","2016-02-11 23:23:26","2016-02-11 22:06:17",""
"54087989","Saltstack - Add encrypt values with multiple line in gpg decrypt modules","In option text, I don't know how to add encrypt values with multiple line as below, I tried with '''...''' and '... ' , but seen not salt not understand this text syntax.
salt -v '*' gpg.decrypt gnupghome=/etc/salt/gpgkeys bare=False text='''-----BEGIN PGP MESSAGE-----
 Version: GnuPG v2.0.22 (GNU/Linux)
 hQEMA86rrGwfdO21AQf/SS8jTuotjgbX4U+RBegTLw+3WkTPX0vaXT4S2S/ILhde
 bbG15MWTM9FVGyE2EcqFoxaireW8lzPW7H+qW1A8vps5saCeZ4uoMmzpbCC5NQBb
 IzxCKjTyl700QBvqiAOhvSG9Vxz5ZRuuo5smxuSKDMFx+wUnXuaC4vOsd3xWiBkd
 l+2zRY8h01ztRH8u5cdrr9+2AK/Vc5vZ1nczF122saIjJ3SA6d39YdjD1mwOIvh2
 Iv5/UhScLLPNYmSgQKBj2BqXLi6bzG9DpbHwB9vSgODDv0irBkIHxp6cMrdrXruC
 WMZGLmeFWpGJkSFU6z2ytkgaT69aZQx7J1ZXO0yGaNJdAVaxa30zX/8axuBnSN8D
 ZV2VHagEq+0Z293pS/EcSnPSY2zh/uaGUiVJmnMpNjt7YorXcXx42NiJA2CAlQIw
 TaGLU0dSCQThLBR0uhaLCygkP4xjBDl4A8ACUcsb
 =p7zt
 -----END PGP MESSAGE-----'''
Executing job with jid 20190108082442885066
-------------------------------------------

nginxr:
    ERROR executing 'gpg.decrypt': filename or text must be passed.
salt -v -v '*' gpg.decrypt gnupghome=/etc/salt/gpgkeys bare=False   0.48s user 0.09s system 47% cpu 1.195 total

Any idea?
","","22","<gpgpu><salt-stack><salt>","0","","0","2019-01-08 08:52:22","","0","","6687534","","2019-01-08 08:52:22","2019-01-08 08:37:01",""
"41040105","Automate installing agents on VMware platform","In a vmware vsphere platform with over 200 virtual machines with Centos and Windows machines, would it be possible to install chef client and salt agents on all these machines using vCenter API or Powercli or any other scripts, is that possible ? can some one share any thoughts and ideas as to how this can be achieved?
","","21","<scripting><automation><chef><salt>","0","","0","2016-12-08 12:57:34","","2","","","","","2016-12-08 12:57:34",""
"47750310","Bcrypt decryption fundamental","What does salt mean in bcrypt hashing?
Can I retrieve plain text from salt and hash?
Is there any online websites or tools to decrypt bcrypt hash correctly?
Thank my dear freind.
","The point of hashing is creating input => output transform that's hard to reverse.
The point of salting the input is to prevent identical inputs from getting the same output by adding some random portion to input sequence before hashing.
So no, you cannot retrieve plain text from salt and hash (other than brute forcing or exploiting, if any, vulnerability of bcrypt algorithm or it's implementation).
","20","<hash><bcrypt><salt>","-1","0","1","2017-12-11 10:06:25","47750430","1","","","","","2017-12-11 09:59:41",""
"58549229","Unable to install salt-minion on windows using salt-cloud","I am spinning up a windows vm using salt-cloud. The VM works fine but there is no salt-minion installed on it. It fails with this error:
line 1015, in wait_for_psexecsvc 'cmd.exe', 
'/c hostname', host, username, 
password, port=port File ""/usr/lib/python3.6/site-packages/salt/utils/cloud.py"", line 962, in run_psexec_command client = Client(host, username, password, port=port, encrypt=False, 
service_name=service_name) 
File ""/usr/lib/python3.6/site-packages/salt/utils/cloud.py"", line 875, 
in __init__ self._client = PsExecClient(server, username, password, port, encrypt) NameError: name 'PsExecClient' is not defined [DEBUG ] 
Retrying psexec connection to host 10.27.8.210 on port 445 (try 23)

my cloud profile is:
   test:
   provider: opennebula
   template: test-appliance-vgautam
   image: test-appliance-vgautam-20191022_1100
   win_installer: /etc/salt/cloud.profiles.d/Salt-Minion-2019.2.1-Py2-x86-Setup.exe
   win_username: *****
   win_password: *****
   smb_port: 445

Salt Version:
           Salt: 2019.2.2

Dependency Versions:
           cffi: Not Installed
       cherrypy: unknown
       dateutil: Not Installed
      docker-py: Not Installed
          gitdb: Not Installed
      gitpython: Not Installed
          ioflo: Not Installed
         Jinja2: 2.8.1
        libgit2: Not Installed
        libnacl: Not Installed
       M2Crypto: 0.33.0
           Mako: Not Installed
   msgpack-pure: Not Installed
 msgpack-python: 0.5.6
   mysql-python: Not Installed
      pycparser: Not Installed
       pycrypto: Not Installed
   pycryptodome: Not Installed
         pygit2: Not Installed
         Python: 3.6.8 (default, Aug  7 2019, 17:28:10)
   python-gnupg: Not Installed
         PyYAML: 3.12
          PyZMQ: 15.3.0
           RAET: Not Installed
          smmap: Not Installed
        timelib: Not Installed
        Tornado: 4.4.2
            ZMQ: 4.1.4

System Versions:
           dist: centos 7.6.1810 Core
         locale: UTF-8
        machine: x86_64
        release: 3.10.0-957.5.1.el7.x86_64
         system: Linux
        version: CentOS Linux 7.6.1810 Core

Can someone please tell me what am I missing. I am following this https://docs.saltstack.com/en/latest/topics/cloud/windows.html. I have pypsexec and smbprotocol installed
","","19","<python><windows><salt><salt-cloud>","0","","0","2019-10-24 21:16:02","","0","","","","","2019-10-24 21:16:02",""
"58411753","How can we create directory\folder user s3 bucket using saltstack","I want to create folder under the existing s3 bucket using saltstack.
How can we create directory\folder user s3 bucket using saltstack?
","We can create folder under S3 bucket using s3.put bucket_name folder_name/
","18","<amazon-web-services><salt-stack><salt>","-1","0","1","2019-10-18 18:06:43","","2","","","","","2019-10-16 11:00:54",""
"53401681","Only return minions that return True","I am trying to return a large list of minions, but I only want to return the minions that return true to my query of if a directory exists.
Currently using salt '*' file.directory_exists '/var/log/app1/' returns all the minions, and specifies if it's True or False. I need to however only return the ones that return True
Is this possibly? I have not found much on how to do this. I am able to use grep to help get a list, but would rather do this all in salt if possible.
Thanks!
","","18","<salt-stack><salt>","0","","0","2018-11-20 21:19:05","","0","","","","","2018-11-20 21:19:05",""
"58720766","Remove NUL characters from byte array","in my code example i generate a random byte array that I have to use as salt with my password field.
The problem occurs when in my byte array there is a NUL character.
I have founded a way to remove this character using strings but for security reasons I'd like to use array and not string to remove this values.
Below a snippets whith my solution. In this example I remove NUL occurences but could be a good choice to replace them. How can I replace it?
Thanks.
private static byte[] generateSalt() throws UnsupportedEncodingException, NoSuchAlgorithmException{
    final Random RANDOM = new SecureRandom();

    byte[] salt = new byte[12];
    RANDOM.nextBytes(salt);  

    String str = new String(salt, StandardCharsets.UTF_8);
    str.replaceAll(""\u0000"", """");
    salt = str.getBytes(""UTF-8"");

    return salt;
}

","","18","<java><byte><salt><replaceall><secure-random>","0","","0","2019-11-05 23:03:17","","12","","","","","2019-11-05 23:03:17",""
"57971523","Is there any salt function or state to copy folder/files from minion to minon or minion to master?","Is there any salt function or state to copy folder/files from minion to minon or minion to master
","yes, there is SCP module. it does not copy file or directories to master, but the workaround is to install a minion on master.
some notes: be sure you installed salt with python3. and you should install scp with pip (also pip3!, use bin_env in pip.install for this)
","17","<salt-stack><salt>","0","0","2","2019-10-01 15:29:44","","0","","","","","2019-09-17 09:40:43",""
"57971523","Is there any salt function or state to copy folder/files from minion to minon or minion to master?","Is there any salt function or state to copy folder/files from minion to minon or minion to master
","According to the documentation you may also be able to push files from minion to master using the cp.push or cp.push_dir
But you will have to activate the file_recv option on your master side.
","17","<salt-stack><salt>","0","0","2","2019-10-01 15:29:44","","0","","","","","2019-09-17 09:40:43",""
"58054860","Is exists way for copy files from remote servers to local by salt-ssh or masterless minion with.sls?","I want to have sls state that will copy generated list of files from remote hosts to local
i try to use scp module, but it not works - Module function scp.get is not available
i run it with salt-call --local
My state looks as 
{% for file, path in salt.pillar.get('fetch_files:all', {}).items() %}
{% for remote in salt.pillar.get('hosts', []) %}
fetch_{{file}}_from_{{remote.id}}:
   module.run:
      - name: scp.get
        remote_path: {{path}}
        local_path: salt://sync/{{remote.id}}{{path}}
        hostname: {{remote.host}}
        port: {{remote.port}}
        username: {{remote.user}}
        pkey: salt://ssh/salt-ssh.rsa
        recursive: True
{% endfor%}
{% endfor%}

","","16","<salt-stack><salt>","0","","0","2019-09-23 02:04:44","","0","","","","","2019-09-23 02:04:44",""
"57627176","Salt minion error: Failed to persist the updated schedule","I have the salt minion running and giving the following error:
2019-08-23 09:09:13,835 [salt.utils.schedule][ERROR   ][13319] Failed to persist the updated schedule
2019-08-23 09:09:13,838 [salt.utils.schedule][ERROR   ][13319] Failed to persist the updated schedule
2019-08-23 09:09:13,840 [salt.utils.schedule][ERROR   ][13319] Failed to persist the updated schedule
2019-08-23 09:09:13,842 [salt.utils.schedule][ERROR   ][13319] Failed to persist the updated schedule

The server is RHEL 7.6 and the salt-minion is 7.2-1. 
Why am I getting this error and how do I correct that?
","","15","<salt-stack><salt>","0","","0","2019-08-23 13:17:09","","0","","","","","2019-08-23 13:17:09",""
"57861346","module.run not executing in state.highstate, but works with state.sls","I'm attempting to re-run a state from another state.  I'm not using watch or watch_in etc b/c i want it to run each time.  I configure all my nginx virtual hosts and then at the end another state runs called nginx-certs the relevant portion is here:
nginx-frontend:
  module.run:
    - name: state.sls
    - mods:
      - nginx-frontend

During the highstate i see the state_id is executed but has no comments, nor shows it reruns that state, it just completes as Result: True.  I can then jump to the salt master and run
sudo salt webserver state.sls nginx-certs
and when it hits nginx-frontend, it does reload all of the virtual hosts, putting the new cert in the config.  
I'm curious why this does not run in the highstate.  
I have attempted ll sorts of different variations of the simple block outlined above.  This one works, but not in the highstate, which is my goal to fix.
If you wonder why i do it this way, all certificates for production and staging terminate at HAProxy and nginx only serves up 80/http1 81/h2, but when building out dev servers i want to assign the cert directly to the server as it will be public facing.  I need to build out the virtual hosts first to get port 80 open which is used for lets-encrypt. Then when the cert is available, update the nginx vhosts listen directive and cert paths.
","From what I understand: you have one server which you want temporarily configured with Nginx on port 80, then generate its certificate with letsencrypt, then change Nginx configuration to be on port 443.
What you can do is:

have one state which installs and configures Nginx to listen on port 80
have another state with installs/configures/runs letsencrypt
a third state which configures Nginx as you want it to be at the end [1]
you just include them in salt to be run in the specific order like

# custom_nginx.sls

include:
  - temp_nginx_on_port_80
  - letsencrypt_cert
  - nginx

[1] for this I think its better to use formula like the one from the community https://github.com/saltstack-formulas/nginx-formula/ and configure it with pillar data. Obviously if you use it for step 3, you won't be able to use for step 1 (or at least I don't see right now how)
","15","<salt-stack><salt>","0","0","1","2019-10-02 12:44:20","","2","","","","","2019-09-09 21:21:21",""
"56104641","How can I specify salt when generating Encryption Zone key in Cloudera","I am on an encryption project in Cloudera cluster, where I need to encrypt an Encryption Zone (essentially a folder), in cloudera it is clearly defined in their document that the process includes generate a EZ key with Master Key.
Command is like:
$ sudo -u hbase hadoop key create <key_name>

What is not clear to me is how the key is generated with what salt? how can I dynamically specify the salt with some parameters including environment, time, policy, etc. --- in another word, I like to implement ABAC-based Encryption here. ABAC is Attributes Based Access Control, some readings here:
Attribute-based access control
Attribute Based Access Control (ABAC) – Encryption on Steroids
The latter blog depicts the concept of this ABAC-based Encryption, however, salt is the first step I want to know how to specify it in Key generation.
Thank you very much.
","","13","<encryption><cloudera><salt>","0","","0","2019-05-13 00:42:34","","0","","","","","2019-05-13 00:42:34",""
"58304525","No matching sls found for 'localuser' in env 'base' for minions behind syndic","I have 2 regions in my salt infrastructure.
In USE1 I have salt master minions directly connected to it, In EUW i have syndic and minions connected to it. Salt master is communicating with EUW minions through EUW syndic.
I am trying to push changes to minions behind EUW syndic, but get ""No matching sls found for 'localuser' in env 'base'"" error. I don't get this error for USE minions.
This is the code, that I currently have.
Here is directory structure
├── apache
│   ├── init.sls
│   ├── map.sls
│   └── welcome.sls
├── localuser
│   └── init.sls
├── _modules
│   └── myutil.py
├── show_context.sls
└── top.sls

3 directories, 7 files
[root@c000saltmasteruse1 salt]# pwd
/srv/salt

/srv/salt/localuser/init.sls
opation-group:
  group.present:
    - name: opation
    - system: False

opation-user:
  user.present:
    - name: opation
    - fullname: opation
    - password: 'password'
    - home: /home/opration
    - shell: /bin/bash
    - gid: opration

/srv/salt/top.sls
base:
  '*':
    - localuser

/etc/salt/master
file_roots:
  base:
    - /srv/salt

I run it with below command on salt master
salt '*' state.sls localuser

","","13","<salt>","0","","0","2019-10-09 13:38:48","","0","","4733685","","2019-10-09 13:38:48","2019-10-09 12:49:56",""
"56903457","salt state to append Javaclass Path to a file","I'm trying to append a line .i.e.(;./lib/httpclient-4.5.5.jar;./lib/httpcore-4.4.9.jar) to a variable called JAvaClasspath in a configuration file using file.line salt state. It  is appending to a new line instead of the same line. Below is what i have tried so far:
Appending JavaClass Path:
  file.line:
   - name: '{{installation_path}}\WorkSite Connector\WorkSite Connector.cfg'
   - content: ;./lib/httpclient-4.5.5.jar;./lib/httpcore-4.4.9.jar
   - mode: insert
   - indent: True
   - after: JavaClasspath

Appending JavaClass Path:
  file.line:
   - name: '{{installation_path}}\WorkSite Connector\WorkSite Connector.cfg'
   - content: ;./lib/httpclient-4.5.5.jar;./lib/httpcore-4.4.9.jar
   - mode: insert
   - indent: True
   - after: JavaClasspath

The argument in the content is what I'm trying to add to the JavaClaspath. 
The JavaClasspath already has some strings. Any idea how to go about it ?
","","13","<salt-stack><salt>","0","","0","2019-07-05 14:42:30","","0","","3057246","","2019-07-05 14:42:30","2019-07-05 12:52:32",""
"58301166","How to use shell script as a template in salt stack and create state","How to use shell script as a template in salt stack and create state to automate things.
","","12","<salt-stack><salt>","0","","0","2019-10-09 09:34:41","","1","","","","","2019-10-09 09:34:41",""
"56731716","How to assign ownership for folder via salt state","Unable to change the Ownership of tar extract
I am trying to install apache tomcat tar package, I am successful in extracting the package but the ownership of the extracted directory seems to show root and I am unable to perform any operation after that.
Note: I have also explicitly mentioned the user and group details in my salt state
apachetomcat_install:
  archive.extracted:
    - name: /opt/new/poc_dir/
    - source: salt://tomcat/package/apache-tomcat-9.0.20.tar.gz
    - archive_format: tar
    - user: nithani
    - group: nithani

Output:
drwxr-sr-x. 9 root fttacct 4096 Jun 24 00:08 apache-tomcat-9.0.20

want to change the permission on extraction.
","","11","<yaml><salt-stack><salt>","0","","0","2019-06-24 07:33:27","","0","","8342718","","2019-06-24 07:33:27","2019-06-24 07:29:13",""
"58405468","Copy directory from salt minion to master or minion to minion","I am finding issue while copying directory from salt minion to master or also wanted to check if is there any way to copy directory from minion to minion. #saltstack
","","10","<salt-stack><salt>","0","","0","2019-10-16 03:46:26","","0","","","","","2019-10-16 03:46:26",""
"40039601","The process of practically salting a password and comparing later","Is the following a viable method of Salting and storing the Salt that I can use in a commercial product ?

On user creation/register: I generate a random Salt string.
When the bellow code is executed I know their plain text password and username.
I store Salt in the database with the username linked to it to a separate table
string hashedPwd = hash(pwd+salt)
I store hashedPwd with the user's details in the normal [users] table

The bit I'm curious about:

User tries to login - they input their username and password
2. I take their username only, and look for it in the Salt table, if I find a match i get the Salt. yes/no ?
string UserTryingToLoginhashedPwd = hash(pwd+Salt)
I then fetch the normal [users] details based on the username and compare db_pwd to UserTryingToLoginhashedPwd 
If true normal login

Having a read at my question now, it sounds like the most logical course of actions but could use with some reassurance.
","Yes, that is generally the correct flow of storing a salt and password and authenticating a user later on.
","10","<login><salt>","0","1","1","2017-04-25 15:18:05","43614735","0","","","","","2016-10-14 09:25:16",""
"58542339","How to associate ec2 instance profile with ec2 instance in saltstack","We want to setup association between the existing ec2 instance profile with ec2 instance using saltstack.
","","7","<salt-stack><salt><salt-cloud>","0","","0","2019-10-24 13:21:43","","0","","","","","2019-10-24 13:21:43",""
"58380140","Using Salt to set php.ini memory_limit for a single minion","Trying to manage the memory_limit in /etc/php.ini for a single minion using Salt.
Not sure the best approach for setting a single value in an otherwise standard ini config for php.
php -i|grep -i memory_limit
memory_limit => 128M => 128M
Would expect to see 256M when running php -i
","","7","<salt>","0","","0","2019-10-14 15:49:17","","0","","","","","2019-10-14 15:49:17",""
