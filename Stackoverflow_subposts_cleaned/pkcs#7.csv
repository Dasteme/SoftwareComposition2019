post_link,title,body_question,body_answer,viewcount,tags,score,score_answer,answercount,LastActivityDate,AcceptedAnswerId,CommentCount,FavoriteCount,LastEditorUserId,LastEditorDisplayName,LastEditDate,CreationDate,ClosedDate
"20770072","AES/CBC/PKCS5Padding vs AES/CBC/PKCS7Padding with 256 key size performance java","I am currently using AES/CBC/PKCS5Padding for encrypting files in Java with 256 bytes key size, but while searching I found on stackexchange PKCS#5-PKCS#7 Padding and  it is mentioned,

PKCS#5 padding is a subset of PKCS#7 padding for 8 byte block sizes

So I want to know  

Will the performance of AES/CBC/PKCS7Padding will be better then AES/CBC/PKCS5Padding for the above configuration?
How can we configure the block size in Java as it is mentioned


PKCS#7 padding would work for any block size from 1 to 255 bytes.


My sample code is,
SecureRandom rnd = new SecureRandom();
IvParameterSpec iv = new IvParameterSpec(rnd.generateSeed(16));

KeyGenerator generator = KeyGenerator.getInstance(""AES"");
generator.init(256);
SecretKey k = generator.generateKey();

Cipher c = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
c.init(Cipher.ENCRYPT_MODE, k, iv);

","The block size is a property of the used cipher algorithm. For AES it is always 16 bytes.
So strictly speaking, PKCS5Padding cannot be used with AES since it is defined only for a block size of 8 bytes. I assume, AES/CBC/PKCS5Padding is interpreted as AES/CBC/PKCS7Padding internally.
The only difference between these padding schemes is that PKCS7Padding has the block size as a parameter, while for PKCS5Padding it is fixed at 8 bytes. When the Block size is 8 bytes they do exactly the same.
","69899","<java><encryption><aes><pkcs#7><pkcs#5>","21","34","1","2017-02-14 04:58:03","20770158","0","16","-1","","2017-04-13 12:48:18","2013-12-25 07:10:52",""
"15814569","Import PKCS7 (Chained Certificate) using KeyTool command to JKS","I have a CA issued CERT in PKCS#7 format. It has certificates (chained) within it.
Keytool does not recognize the PKCS7 format. I have tried OpenSSL tool to convert PKCS7 format certificate to PEM format and it fails. I receive an error message ""Unable to load PKCS7 object"".
How do I import the PKCS7 cert chain to my JKS?
","As you can read in the keytool reference for -importcert command:

Reads the certificate or certificate chain (where the latter is supplied in a PKCS#7 formatted reply) from the file cert_file, and stores it in the keystore entry identified by alias. If no file is given, the certificate or PKCS#7 reply is read from stdin.
keytool can import X.509 v1, v2, and v3 certificates, and PKCS#7 formatted certificate chains consisting of certificates of that type.

Try to import the PKCS7 cert as it is.
Though, it doesn't always work. If you have problems, try to do the following (using OpenSSL):

Print all the certs it contains to a PEM file 
OpenSSL> pkcs7 -in initial_file.p7b -inform DER -print_certs -outform PEM -out certs_chain.pem
Open the new PEM file (certs_chain.pem) with an editor and delete everything outside -----BEGIN CERTIFICATE----- and -----END CERTIFICATE----- boundaries (keep only the encoded content within the boundaries, the certificates themselves) and save it.

Now keytool should not have problems to import your cert, using certs_chain.pem as cert_file
","54829","<certificate><keytool><pkcs#7><jks>","8","9","2","2014-12-12 00:20:30","","0","1","64046","","2014-12-12 00:20:30","2013-04-04 14:48:07",""
"15814569","Import PKCS7 (Chained Certificate) using KeyTool command to JKS","I have a CA issued CERT in PKCS#7 format. It has certificates (chained) within it.
Keytool does not recognize the PKCS7 format. I have tried OpenSSL tool to convert PKCS7 format certificate to PEM format and it fails. I receive an error message ""Unable to load PKCS7 object"".
How do I import the PKCS7 cert chain to my JKS?
","Another approach is to use IE to create an X.509 certificate. You can find the steps in my article on doing SSL between WLS and IIS at http://techblog.fywservices.com/2012/10/establishing-weblogic-server-https-trust-of-iis-using-a-microsoft-local-certificate-authority/
","54829","<certificate><keytool><pkcs#7><jks>","8","0","2","2014-12-12 00:20:30","","0","1","64046","","2014-12-12 00:20:30","2013-04-04 14:48:07",""
"7314901","How to add/remove PKCS7 padding from an AES encrypted string?","I'm trying to encrypt/decrypt a string using 128 bit AES encryption (ECB). What I want to know is how I can add/remove the PKCS7 padding to it. It seems that the Mcrypt extension can take care of the encryption/decryption, but the padding has to be added/removed manually.
Any ideas?
","Let's see. PKCS #7 is described in RFC 5652 (Cryptographic Message Syntax).
The padding scheme itself is given in section 6.3.  Content-encryption Process. It essentially says: append that many bytes as needed to fill the given block size (but at least one), and each of them should have the padding length as value.
Thus, looking at the last decrypted byte we know how many bytes to strip off. (One could also check that they all have the same value.)
I could now give you a pair of PHP functions to do this, but my PHP is a bit rusty. So either do this yourself (then feel free to edit my answer to add it in), or have a look at the user-contributed notes to the mcrypt documentation - quite some of them are about padding and provide an implementation of PKCS #7 padding.

So, let's look on the first note there in detail:
<?php

function encrypt($str, $key)
 {
     $block = mcrypt_get_block_size('des', 'ecb');

This gets the block size of the used algorithm. In your case, you would use aes or rijndael_128 instead of des, I suppose (I didn't test it). (Instead, you could simply take 16 here for AES, instead of invoking the function.)
     $pad = $block - (strlen($str) % $block);

This calculates the padding size. strlen($str) is the length of your data (in bytes), % $block gives the remainder modulo $block, i.e. the number of data bytes in the last block. $block - ... thus gives the number of bytes needed to fill this last block (this is now a number between 1 and $block, inclusive).
     $str .= str_repeat(chr($pad), $pad);

str_repeat produces a string consisting of a repetition of the same string, here a repetition of the character given by $pad, $pad times, i.e. a string of length $pad, filled with $pad.
$str .= ... appends this padding string to the original data.
     return mcrypt_encrypt(MCRYPT_DES, $key, $str, MCRYPT_MODE_ECB);

Here is the encryption itself. Use MCRYPT_RIJNDAEL_128 instead of MCRYPT_DES.
 }

Now the other direction:
 function decrypt($str, $key)
 {   
     $str = mcrypt_decrypt(MCRYPT_DES, $key, $str, MCRYPT_MODE_ECB);

The decryption. (You would of course change the algorithm, as above). $str is now the decrypted string, including the padding.
     $block = mcrypt_get_block_size('des', 'ecb');

This is again the block size. (See above.)
     $pad = ord($str[($len = strlen($str)) - 1]);

This looks a bit strange. Better write it in multiple steps:
    $len = strlen($str);
    $pad = ord($str[$len-1]);

$len is now the length of the padded string, and $str[$len - 1] is the last character of this string. ord converts this to a number. Thus $pad is the number which we previously used as the fill value for the padding, and this is the padding length.
     return substr($str, 0, strlen($str) - $pad);

So now we cut off the last $pad bytes from the string. (Instead of strlen($str) we could also write $len here: substr($str, 0, $len - $pad).).
 }

?>

Note that instead of using substr($str, $len - $pad), one can also write substr($str, -$pad), as the substr function in PHP has a special-handling for negative operands/arguments, to count from the end of the string. (I don't know if this is more or less efficient than getting the length first and and calculating the index manually.)
As said before and noted in the comment by rossum, instead of simply stripping off the padding like done here, you should check that it is correct - i.e. look at substr($str, $len - $pad), and check that all its bytes are chr($pad). This serves as a slight check against corruption (although this check is more effective if you use a chaining mode instead of ECB, and is not a replacement for a real MAC).

(And still, tell your client they should think about changing to a more secure mode than ECB.)
","35341","<php><encryption><aes><mcrypt><pkcs#7>","17","55","3","2017-12-22 10:42:11","7324793","4","16","49153","","2011-09-07 02:27:42","2011-09-06 04:23:54",""
"7314901","How to add/remove PKCS7 padding from an AES encrypted string?","I'm trying to encrypt/decrypt a string using 128 bit AES encryption (ECB). What I want to know is how I can add/remove the PKCS7 padding to it. It seems that the Mcrypt extension can take care of the encryption/decryption, but the padding has to be added/removed manually.
Any ideas?
","I've created two methods to perform the padding and unpadding. The functions are documented using phpdoc and require PHP 5. As you will notice the unpad function contains a lot of exception handling, generating not less than 4 different messages for each possible error.
To get to the block size for PHP mcrypt, you can use mcrypt_get_block_size, which also defines the block size to be in bytes instead of bits.
/**
 * Right-pads the data string with 1 to n bytes according to PKCS#7,
 * where n is the block size.
 * The size of the result is x times n, where x is at least 1.
 * 
 * The version of PKCS#7 padding used is the one defined in RFC 5652 chapter 6.3.
 * This padding is identical to PKCS#5 padding for 8 byte block ciphers such as DES.
 *
 * @param string $plaintext the plaintext encoded as a string containing bytes
 * @param integer $blocksize the block size of the cipher in bytes
 * @return string the padded plaintext
 */
function pkcs7pad($plaintext, $blocksize)
{
    $padsize = $blocksize - (strlen($plaintext) % $blocksize);
    return $plaintext . str_repeat(chr($padsize), $padsize);
}

/**
 * Validates and unpads the padded plaintext according to PKCS#7.
 * The resulting plaintext will be 1 to n bytes smaller depending on the amount of padding,
 * where n is the block size.
 *
 * The user is required to make sure that plaintext and padding oracles do not apply,
 * for instance by providing integrity and authenticity to the IV and ciphertext using a HMAC.
 *
 * Note that errors during uppadding may occur if the integrity of the ciphertext
 * is not validated or if the key is incorrect. A wrong key, IV or ciphertext may all
 * lead to errors within this method.
 *
 * The version of PKCS#7 padding used is the one defined in RFC 5652 chapter 6.3.
 * This padding is identical to PKCS#5 padding for 8 byte block ciphers such as DES.
 *
 * @param string padded the padded plaintext encoded as a string containing bytes
 * @param integer $blocksize the block size of the cipher in bytes
 * @return string the unpadded plaintext
 * @throws Exception if the unpadding failed
 */
function pkcs7unpad($padded, $blocksize)
{
    $l = strlen($padded);

    if ($l % $blocksize != 0) 
    {
        throw new Exception(""Padded plaintext cannot be divided by the block size"");
    }

    $padsize = ord($padded[$l - 1]);

    if ($padsize === 0)
    {
        throw new Exception(""Zero padding found instead of PKCS#7 padding"");
    }    

    if ($padsize > $blocksize)
    {
        throw new Exception(""Incorrect amount of PKCS#7 padding for blocksize"");
    }

    // check the correctness of the padding bytes by counting the occurance
    $padding = substr($padded, -1 * $padsize);
    if (substr_count($padding, chr($padsize)) != $padsize)
    {
        throw new Exception(""Invalid PKCS#7 padding encountered"");
    }

    return substr($padded, 0, $l - $padsize);
}

This does not invalidate the answer of Paŭlo Ebermann in any way, it's basically the same answer in code & phpdoc instead of as description.

Note that returning a padding error to an attacker might result in a padding oracle attack which completely breaks CBC (when CBC is used instead of ECB or a secure authenticated cipher).
","35341","<php><encryption><aes><mcrypt><pkcs#7>","17","8","3","2017-12-22 10:42:11","7324793","4","16","49153","","2011-09-07 02:27:42","2011-09-06 04:23:54",""
"7314901","How to add/remove PKCS7 padding from an AES encrypted string?","I'm trying to encrypt/decrypt a string using 128 bit AES encryption (ECB). What I want to know is how I can add/remove the PKCS7 padding to it. It seems that the Mcrypt extension can take care of the encryption/decryption, but the padding has to be added/removed manually.
Any ideas?
","Just call the following function after you decrypt the data
function removePadding($decryptedText){
    $strPad = ord($decryptedText[strlen($decryptedText)-1]);
    $decryptedText= substr($decryptedText, 0, -$strPad);
    return $decryptedText;
}

","35341","<php><encryption><aes><mcrypt><pkcs#7>","17","0","3","2017-12-22 10:42:11","7324793","4","16","49153","","2011-09-07 02:27:42","2011-09-06 04:23:54",""
"29232705","Encrypt text to AES/CBC/PKCS7Padding","I am developing a web application to encrypt some texts with java 6. 
The encrypted that I have to do is a AES (Rijndael) in CBC mode with PKCS7 padding and a 128-bit key.
I saw an article that explains how to encrypt in the same way I have to do, but with PKCS5 padding.
The link of the article is here:
https://bit502.wordpress.com/2014/06/27/codigo-java-encriptar-y-desencriptar-texto-usando-el-algoritmo-aes-con-cifrado-por-bloques-cbc-de-128-bits/
I change 
private final static String cI = ""AES/CBC/PKCS5Padding"";

To
private final static String cI = ""AES/CBC/PKCS7Padding"";

But Java couldn't find a provider for this.
Could someone tell me how I have to do?
","The Java specification list a number of encryption modes (and paddings) that needs to be supported. PKCS7Padding is not included.  
These are the AES/CBC modes any Java implementation must support.

AES/CBC/NoPadding (128 bit key)
AES/CBC/PKCS5Padding (128 bit key)

(See this answer for more information)
Bouncy Castle does however have what you need.
","30261","<java><encryption><aes><pkcs#7>","8","2","3","2017-05-08 22:56:05","29234136","1","3","1816580","","2015-03-24 19:21:27","2015-03-24 12:30:45",""
"29232705","Encrypt text to AES/CBC/PKCS7Padding","I am developing a web application to encrypt some texts with java 6. 
The encrypted that I have to do is a AES (Rijndael) in CBC mode with PKCS7 padding and a 128-bit key.
I saw an article that explains how to encrypt in the same way I have to do, but with PKCS5 padding.
The link of the article is here:
https://bit502.wordpress.com/2014/06/27/codigo-java-encriptar-y-desencriptar-texto-usando-el-algoritmo-aes-con-cifrado-por-bloques-cbc-de-128-bits/
I change 
private final static String cI = ""AES/CBC/PKCS5Padding"";

To
private final static String cI = ""AES/CBC/PKCS7Padding"";

But Java couldn't find a provider for this.
Could someone tell me how I have to do?
","Java only provides PKCS#5 padding, but it is the same as PKCS#7 padding. See this question on Crypto.SE:
What is the difference between PKCS#5 padding and PKCS#7 padding
They are interchangeable for the common block ciphers like AES and DES.
","30261","<java><encryption><aes><pkcs#7>","8","18","3","2017-05-08 22:56:05","29234136","1","3","1816580","","2015-03-24 19:21:27","2015-03-24 12:30:45",""
"29232705","Encrypt text to AES/CBC/PKCS7Padding","I am developing a web application to encrypt some texts with java 6. 
The encrypted that I have to do is a AES (Rijndael) in CBC mode with PKCS7 padding and a 128-bit key.
I saw an article that explains how to encrypt in the same way I have to do, but with PKCS5 padding.
The link of the article is here:
https://bit502.wordpress.com/2014/06/27/codigo-java-encriptar-y-desencriptar-texto-usando-el-algoritmo-aes-con-cifrado-por-bloques-cbc-de-128-bits/
I change 
private final static String cI = ""AES/CBC/PKCS5Padding"";

To
private final static String cI = ""AES/CBC/PKCS7Padding"";

But Java couldn't find a provider for this.
Could someone tell me how I have to do?
","Try this method
String KEY_AES = ""**************"";
public String encrypt(String value) {
        try {
            byte[] key = KEY_AES.getBytes(""UTF-8"");
            byte[] ivs = KEY_AES.getBytes(""UTF-8"");
            Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS7Padding"");
            SecretKeySpec secretKeySpec = new SecretKeySpec(key, ""AES"");
            AlgorithmParameterSpec paramSpec = new IvParameterSpec(ivs);
            cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec, paramSpec);
            return Base64.encodeToString(cipher.doFinal(value.getBytes(""UTF-8"")), Base64.DEFAULT);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

","30261","<java><encryption><aes><pkcs#7>","8","3","3","2017-05-08 22:56:05","29234136","1","3","1816580","","2015-03-24 19:21:27","2015-03-24 12:30:45",""
"19635499","Not able to load P7B file into keystore file","I received a new certificate in crt / cert format. When I open this file in a text editor they added the complete certificate chain to this file. Each certificate starts with:
-----BEGIN CERTIFICATE-----

And ends with:
-----END CERTIFICATE-----

There are no empty lines in between. Since I am not keen with openssl, I opened up the certificate into Windows and exported the certificate with the complete chain in PKCS#7 format (test.p7b). When I open this file all looks fine in Windows and the root, intermediate and the certificate are all their in the chain.
When I put the file test.p7b on the server and try to import this with keytool as follows:
keytool -import -trustcacerts -alias my.domain.com -keystore my.domain.keystore -keypass changeme -storepass changeme -file test.p7b

I get the following error:
keytool error: java.lang.Exception: Input not an X.509 certificate

When I test the P7B file I also get errors:
bash-4.1$ openssl x509 -in test.p7b -text
unable to load certificate
140009984849736:error:0906D06C:PEM routines:PEM_read_bio:no start line:pem_lib.c:698:Expecting: TRUSTED CERTIFICATE

or:
bash-4.1$ openssl x509 -in test.p7b -inform DER -text
unable to load certificate
140396587853640:error:0D0680A8:asn1 encoding routines:ASN1_CHECK_TLEN:wrong tag:tasn_dec.c:1320:
140396587853640:error:0D07803A:asn1 encoding routines:ASN1_ITEM_EX_D2I:nested asn1 error:tasn_dec.c:382:Type=X509_CINF
140396587853640:error:0D08303A:asn1 encoding routines:ASN1_TEMPLATE_NOEXP_D2I:nested asn1 error:tasn_dec.c:752:Field=cert_info, Type=X509

Can someone help me out?
","When importing a certificate chain, keytool expects the certificates to be loaded in DER form. You can create such a bundle with openssl:
1 - Convert all certificates in DER format 
openssl x509 -in certificate.pem -outform DER -out certificate.crt

2 - Concat all DER certificates into one single file
cat cert1.crt cert2.crt ... > chain.der

3 - Now you can import the chain into your keystore with keytool 
keytool -importcert -trustcacerts -alias <myalias> -file chain.der -keystore keystore.jks -storepass <mypassword>

Note that myalias MUST be the same as the one used when the key was generated.
4 - verify that the chain was successfully imported
keytool -list -v -keystore keystore.jks

","24421","<openssl><certificate><keystore><keytool><pkcs#7>","6","4","1","2013-10-28 14:20:52","19637262","2","5","1800695","","2013-10-28 13:55:07","2013-10-28 13:00:17",""
"12426064","How to sign pdf in Java using pdfbox","I am trying to sign pdf using pdfbox libraries.
I have stuck now and realy need a help.
This is my code:
private static void signPdf(PDDocument document) throws Exception 
{
    PDSignature sig = new PDSignature();
    sig.setFilter(COSName.ADOBE_PPKLITE);
    sig.setSubFilter(COSName.ADBE_PKCS7_DETACHED);
    sig.setByteRange(new int[] {'a','a','a','a'});
    sig.setContents(new byte[]{(byte) 23, (byte) 23, (byte) 23, (byte) 23});

    SignatureOptions options = new SignatureOptions();

    document.addSignature(sig, new SignatureInterface() {
        public byte[] sign(InputStream content)
                throws SignatureException, IOException       {        
             //this should be made MD5 checksum?           
            return new byte[]{(byte) 'a', (byte) 'a', (byte) 'a', (byte) 'a'};
        }
    }, options);
}

Then Iam saving my pdf, but:
1) I have noticed that sign method is never called
2) Where should I attach certyficate? in sign method?
pdf:
/Type /Sig
/Filter /Adobe.PPKLite
/SubFilter /adbe.pkcs7.sha1
/Contents <0000000000. a lot of zeros..000>
/ByteRange [0 1000000000 1000000000 1000000000]

I think that i miss something, but documentation says nothing about how to sign a file.
Tahnks in advance JC.
@Ed
Here is how I save my pdf:
public static void saveFile(COSDocument doc, String out)
        throws IOException, COSVisitorException {  
    java.io.OutputStream os = null;  
    COSWriter writer = null;  
    try {
        os = new java.io.FileOutputStream(out);
        writer = new COSWriter(os);
        writer.write(doc);
    } finally {
        if (os != null) {
            os.close();
        }
        if (writer != null) {
            writer.close();
        }
    }
}

","The linked PDFBox-SignExample.zip is out of date. Please use this sample instead:
https://svn.apache.org/repos/asf/pdfbox/trunk/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateSignature.java
It is better documented and kept up-to-date.
","24205","<pdf><certificate><sign><pdfbox><pkcs#7>","12","8","1","2018-02-15 09:32:10","","3","4","322166","","2018-02-15 09:32:10","2012-09-14 13:57:25",""
"4508749","AES with padding pkcs7 c++ code","I need an example of string encryption (in C++ -> I'm working on linux-Ubuntu) with aes-cbc256 and a padding: PKCS7
Please help.

For the following code how can I set the IV to 0 and set the key value to a string value? I would also like to add the pkcs7 padding. I'm using the crypto++ lib (in Linux)
// Driver.cpp   
//      

#include ""stdafx.h""    
#include ""cryptopp/dll.h""    
#include ""cryptopp/default.h""    
#include ""crypto++/osrng.h""    
using CryptoPP::AutoSeededRandomPool;    

#include <iostream>    
using std::cout;    
using std::cerr;       

#include <string>    
using std::string;       

#include ""crypto++/cryptlib.h""    
using CryptoPP::Exception;        

#include ""crypto++/hex.h""    
using CryptoPP::HexEncoder;    
using CryptoPP::HexDecoder;        

#include ""crypto++/filters.h""    
using CryptoPP::StringSink;    
using CryptoPP::StringSource;    
using CryptoPP::StreamTransformationFilter;        

#include ""crypto++/aes.h""    
using CryptoPP::AES;       

#include ""crypto++/ccm.h""    
using CryptoPP::CBC_Mode;       

#include ""assert.h""        

int main(int argc, char* argv[])    
{    
    AutoSeededRandomPool prng;        

    byte key[ AES::DEFAULT_KEYLENGTH ];    
    prng.GenerateBlock( key, sizeof(key) );        

    byte iv[ AES::BLOCKSIZE];    
    iv[AES::BLOCKSIZE] = 0;    
    //prng.GenerateBlock(iv,  sizeof(iv) );        

    string plain = ""CBC Mode Test"";    
    string cipher, encoded, recovered;       

    // Pretty print key    
    encoded.clear();    
    StringSource( key, sizeof(key), true,    
                  new HexEncoder(new StringSink( encoded )) // HexEncoder    
    ); // StringSource

    cout << ""key: "" << encoded << endl;        

    // Pretty print iv    
    encoded.clear();

    StringSource( iv, sizeof(iv), true,    
        new HexEncoder(new StringSink( encoded )) // HexEncoder    
    ); // StringSource

    cout << ""iv: "" << encoded << endl;       

    /*********************************\
    \*********************************/

    try    
    {    
        cout << ""plain text: "" << plain << endl;            
        CBC_Mode< AES >::Encryption e;    
        e.SetKeyWithIV( key, sizeof(key), iv );     

        // The StreamTransformationFilter adds padding    
        //  as required. ECB and CBC Mode must be padded    
        //  to the block size of the cipher.    
        StringSource( plain, true,     
            new StreamTransformationFilter( e,    
                new StringSink( cipher )    
            ) // StreamTransformationFilter          
        ); // StringSource    
    }    
    catch( CryptoPP::Exception& e )    
    {    
        cerr << ""Caught Exception..."" << endl;    
        cerr << e.what() << endl;    
        cerr << endl;    
    }    

    /*********************************\    
    \*********************************/    

    // Pretty print    
    encoded.clear();    
    StringSource( cipher, true,    
        new HexEncoder(    
            new StringSink( encoded )    
        ) // HexEncoder    
    ); // StringSource    
    cout << ""cipher text: "" << encoded << endl;    

    /*********************************\    
    \*********************************/    

    try    
    {    
        CBC_Mode< AES >::Decryption d;    
        d.SetKeyWithIV( key, sizeof(key), iv );    

        // The StreamTransformationFilter removes    
        //  padding as required.    
        StringSource s( cipher, true,     
            new StreamTransformationFilter( d,    
                new StringSink( recovered )    
            ) // StreamTransformationFilter    
        ); // StringSource    

        cout << ""recovered text: "" << recovered << endl;    
    }    
    catch( CryptoPP::Exception& e )    
    {    
        cerr << ""Caught Exception..."" << endl;    
        cerr << e.what() << endl;    
        cerr << endl;    
    }    

    /*********************************\    
    \*********************************/    

    assert( plain == recovered );    

    return 0;    
}

","look also at my answer to this question
I suggest checking out cryptopp. Here's a code sample:
CryptoPP::CBC_Mode<CryptoPP::AES>::Encryption encryptor;
byte* key;
size_t keylen;
// ... acquire key

encryptor.SetKey( key, keylen );

std::string input;
std::string result;
// read input ...

StringSource( input, true,
       new StreamTransformationFilter( encryptor, new StringSink( result ),
     StreamTransformationFilter::PKCS_PADDING));

The values for padding mode in StreamTransformationFilter can be:
BlockPaddingScheme { 
  NO_PADDING, ZEROS_PADDING, PKCS_PADDING, ONE_AND_ZEROS_PADDING, 
  DEFAULT_PADDING 
}

EDIT: replaced the padding mode in the sample to pkcs
","19279","<c++><crypto++><pkcs#7>","2","1","2","2016-08-12 21:46:19","","4","2","608639","","2016-08-12 21:46:19","2010-12-22 11:34:58",""
"4508749","AES with padding pkcs7 c++ code","I need an example of string encryption (in C++ -> I'm working on linux-Ubuntu) with aes-cbc256 and a padding: PKCS7
Please help.

For the following code how can I set the IV to 0 and set the key value to a string value? I would also like to add the pkcs7 padding. I'm using the crypto++ lib (in Linux)
// Driver.cpp   
//      

#include ""stdafx.h""    
#include ""cryptopp/dll.h""    
#include ""cryptopp/default.h""    
#include ""crypto++/osrng.h""    
using CryptoPP::AutoSeededRandomPool;    

#include <iostream>    
using std::cout;    
using std::cerr;       

#include <string>    
using std::string;       

#include ""crypto++/cryptlib.h""    
using CryptoPP::Exception;        

#include ""crypto++/hex.h""    
using CryptoPP::HexEncoder;    
using CryptoPP::HexDecoder;        

#include ""crypto++/filters.h""    
using CryptoPP::StringSink;    
using CryptoPP::StringSource;    
using CryptoPP::StreamTransformationFilter;        

#include ""crypto++/aes.h""    
using CryptoPP::AES;       

#include ""crypto++/ccm.h""    
using CryptoPP::CBC_Mode;       

#include ""assert.h""        

int main(int argc, char* argv[])    
{    
    AutoSeededRandomPool prng;        

    byte key[ AES::DEFAULT_KEYLENGTH ];    
    prng.GenerateBlock( key, sizeof(key) );        

    byte iv[ AES::BLOCKSIZE];    
    iv[AES::BLOCKSIZE] = 0;    
    //prng.GenerateBlock(iv,  sizeof(iv) );        

    string plain = ""CBC Mode Test"";    
    string cipher, encoded, recovered;       

    // Pretty print key    
    encoded.clear();    
    StringSource( key, sizeof(key), true,    
                  new HexEncoder(new StringSink( encoded )) // HexEncoder    
    ); // StringSource

    cout << ""key: "" << encoded << endl;        

    // Pretty print iv    
    encoded.clear();

    StringSource( iv, sizeof(iv), true,    
        new HexEncoder(new StringSink( encoded )) // HexEncoder    
    ); // StringSource

    cout << ""iv: "" << encoded << endl;       

    /*********************************\
    \*********************************/

    try    
    {    
        cout << ""plain text: "" << plain << endl;            
        CBC_Mode< AES >::Encryption e;    
        e.SetKeyWithIV( key, sizeof(key), iv );     

        // The StreamTransformationFilter adds padding    
        //  as required. ECB and CBC Mode must be padded    
        //  to the block size of the cipher.    
        StringSource( plain, true,     
            new StreamTransformationFilter( e,    
                new StringSink( cipher )    
            ) // StreamTransformationFilter          
        ); // StringSource    
    }    
    catch( CryptoPP::Exception& e )    
    {    
        cerr << ""Caught Exception..."" << endl;    
        cerr << e.what() << endl;    
        cerr << endl;    
    }    

    /*********************************\    
    \*********************************/    

    // Pretty print    
    encoded.clear();    
    StringSource( cipher, true,    
        new HexEncoder(    
            new StringSink( encoded )    
        ) // HexEncoder    
    ); // StringSource    
    cout << ""cipher text: "" << encoded << endl;    

    /*********************************\    
    \*********************************/    

    try    
    {    
        CBC_Mode< AES >::Decryption d;    
        d.SetKeyWithIV( key, sizeof(key), iv );    

        // The StreamTransformationFilter removes    
        //  padding as required.    
        StringSource s( cipher, true,     
            new StreamTransformationFilter( d,    
                new StringSink( recovered )    
            ) // StreamTransformationFilter    
        ); // StringSource    

        cout << ""recovered text: "" << recovered << endl;    
    }    
    catch( CryptoPP::Exception& e )    
    {    
        cerr << ""Caught Exception..."" << endl;    
        cerr << e.what() << endl;    
        cerr << endl;    
    }    

    /*********************************\    
    \*********************************/    

    assert( plain == recovered );    

    return 0;    
}

","OpenSSL uses PKCS7 padding by default.  This padding means when your data is not a multiple of the block size, you pad n bytes of the value n, where n is however many bytes you need to get to the block size.  AES's block size is 16.
Here's an example on how to encrypt a string using AES256-cbc with OpenSSL.  The OpenSSL documentation also has examples, although they use different ciphers.  This example does no error checking.
#include <iostream>
#include <iomanip>
#include <string>
#include <vector>
#include <cassert>

#include <openssl/evp.h>

int main()
{
    // ctx holds the state of the encryption algorithm so that it doesn't
    // reset back to its initial state while encrypting more than 1 block.
    EVP_CIPHER_CTX ctx;
    EVP_CIPHER_CTX_init(&ctx);

    unsigned char key[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                   0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                   0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                   0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f};
    unsigned char iv[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    assert(sizeof(key) == 32);  // AES256 key size
    assert(sizeof(iv) == 16);   // IV is always the AES block size

    // If data isn't a multiple of 16, the default behavior is to pad with
    // n bytes of value n, where n is the number of padding bytes required
    // to make data a multiple of the block size.  This is PKCS7 padding.
    // The output then will be a multiple of the block size.
    std::string plain(""encrypt me"");
    std::vector<unsigned char> encrypted;
    size_t max_output_len = plain.length() + 16 - (plain.length() % 16);
    encrypted.resize(max_output_len);

    // Enc is 1 to encrypt, 0 to decrypt, or -1 (see documentation).
    EVP_CipherInit_ex(&ctx, EVP_aes_256_cbc(), NULL, key, iv, 1);

    // EVP_CipherUpdate can encrypt all your data at once, or you can do
    // small chunks at a time.
    int actual_size = 0;
    EVP_CipherUpdate(&ctx,
             &encrypted[0], &actual_size,
             reinterpret_cast<unsigned char *>(&plain[0]), plain.size());

    // EVP_CipherFinal_ex is what applies the padding.  If your data is
    // a multiple of the block size, you'll get an extra AES block filled
    // with nothing but padding.
    int final_size;
    EVP_CipherFinal_ex(&ctx, &encrypted[actual_size], &final_size);
    actual_size += final_size;

    encrypted.resize(actual_size);

    for( size_t index = 0; index < encrypted.size(); ++index )
    {
        std::cout << std::hex << std::setw(2) << std::setfill('0') <<
            static_cast<unsigned int>(encrypted[index]);
    }
    std::cout << ""\n"";

    EVP_CIPHER_CTX_cleanup(&ctx);

    return 0;
}

Name it encrypt.cpp and compile with:
g++ encrypt.cpp -o encrypt -lcrypto -lssl -Wall

You'll get this output:
338d2a9e28208cad84c457eb9bd91c81

You can verify correctness by running the OpenSSL command-line utility from the command prompt:
$ echo -n ""encrypt me"" > to_encrypt
$ openssl enc -in to_encrypt -out encrypted -e -aes-256-cbc \
-K 000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f \
-iv 00000000000000000000000000000000
$ hexdump -C encrypted

And the hexdump will show the same bytes as the c++ program.
00000000  33 8d 2a 9e 28 20 8c ad  84 c4 57 eb 9b d9 1c 81  |3.*.( ....W.....|

","19279","<c++><crypto++><pkcs#7>","2","5","2","2016-08-12 21:46:19","","4","2","608639","","2016-08-12 21:46:19","2010-12-22 11:34:58",""
"25942165","AES-256 and PKCS7Padding fails in Java","I have a couple of library, C#, PHP and Android where they all encrypt/decrypt a string in the same way so they are all compatible with each other, i.e. C# writes and encrypts data to a database and PHP can successfully decrypt it and return the original string. 
I now need to do the same thing with a standard Java application, so I've taken the code from my Android library and need libraries but I am getting an exception. As far as I know the code wasn't Android specific so it shouldn't be a problem. 
Below is my encryption function 
public static String encrypt(String plainPasword)
    {
            String password = """";
            try
            {
                SecretKeySpec key = new SecretKeySpec(""hcxilkqbbhczfeultgbskdmaunivmfuo"".getBytes(""US-ASCII""), ""AES"");
                IvParameterSpec iv = new IvParameterSpec(""ryojvlzmdalyglrj"".getBytes(""US-ASCII""));

                Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS7Padding"");

                cipher.init(Cipher.ENCRYPT_MODE, key, iv);

                byte[] encoded = cipher.doFinal(plainPasword.getBytes());
                password = new String(Base64.encodeBase64(encoded));

            }
            catch (Exception ex)
            {
                System.err.println(""Encryption Exception: "" + ex.toString());
            }
            return password;
    }

When I call Encryption.encrypt(""myString"") I get the following exception:
Encryption Exception: java.security.NoSuchAlgorithmException: Cannot find any provider supporting AES/CBC/PKCS7Padding

As I said this code is working fine on Android and it shouldn't make any difference where it is running from. 
Update
I found that I needed PKCS5Padding instead of 7 thanks to a link on a comment. I am now though getting the following exception:
Encryption Exception: java.security.InvalidKeyException: Illegal key size

","First, in Java, the standard padding name is PKCS5Padding, not PKCS7Padding. Java is actually performing PKCS #7 padding, but in the JCA specification, PKCS5Padding is the name given.
Next, you are trying to use AES-256, so you'll need to install the Unlimited Strength Jurisdiction policy files.
Hopefully this is just an example and you aren't using the same IV for every message, right?
","18444","<java><encryption><aes><jce><pkcs#7>","6","18","2","2019-09-26 20:55:11","25942381","5","3","472495","","2019-09-26 20:55:11","2014-09-19 20:47:55",""
"25942165","AES-256 and PKCS7Padding fails in Java","I have a couple of library, C#, PHP and Android where they all encrypt/decrypt a string in the same way so they are all compatible with each other, i.e. C# writes and encrypts data to a database and PHP can successfully decrypt it and return the original string. 
I now need to do the same thing with a standard Java application, so I've taken the code from my Android library and need libraries but I am getting an exception. As far as I know the code wasn't Android specific so it shouldn't be a problem. 
Below is my encryption function 
public static String encrypt(String plainPasword)
    {
            String password = """";
            try
            {
                SecretKeySpec key = new SecretKeySpec(""hcxilkqbbhczfeultgbskdmaunivmfuo"".getBytes(""US-ASCII""), ""AES"");
                IvParameterSpec iv = new IvParameterSpec(""ryojvlzmdalyglrj"".getBytes(""US-ASCII""));

                Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS7Padding"");

                cipher.init(Cipher.ENCRYPT_MODE, key, iv);

                byte[] encoded = cipher.doFinal(plainPasword.getBytes());
                password = new String(Base64.encodeBase64(encoded));

            }
            catch (Exception ex)
            {
                System.err.println(""Encryption Exception: "" + ex.toString());
            }
            return password;
    }

When I call Encryption.encrypt(""myString"") I get the following exception:
Encryption Exception: java.security.NoSuchAlgorithmException: Cannot find any provider supporting AES/CBC/PKCS7Padding

As I said this code is working fine on Android and it shouldn't make any difference where it is running from. 
Update
I found that I needed PKCS5Padding instead of 7 thanks to a link on a comment. I am now though getting the following exception:
Encryption Exception: java.security.InvalidKeyException: Illegal key size

","@Boardy If you are still facing the issue then i think you have to use MessageDigest which is compatible for both for C# and Java. I have faced the similar issue for AES 256 encryption and decryption. The sample code will be as follows.
public static String encryptWithAES256(String strToEncrypt) throws Exception
{
    MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
    byte[] encodedhash = digest.digest(KEY.getBytes(StandardCharsets.UTF_8));
    IvParameterSpec ivspec = new IvParameterSpec(Arrays.copyOf(KEY.getBytes(),16));
    SecretKeySpec secretKey = new SecretKeySpec(encodedhash, AES_ENCRYPTION_ALGORITHM);
    Cipher cipher = Cipher.getInstance(CIPHER_TRANSFORMATION);
    cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivspec);
    return new String(Base64.encodeBase64(cipher.doFinal(strToEncrypt.getBytes(CHARACTER_ENCODING))));
}

","18444","<java><encryption><aes><jce><pkcs#7>","6","-1","2","2019-09-26 20:55:11","25942381","5","3","472495","","2019-09-26 20:55:11","2014-09-19 20:47:55",""
"6099467","How to parse a SAML assertion request in .Net","I'm trying to implement a SAML SSO solution in .Net, but I'm having a problem parsing the assertion.
I have a sample assertion (looks like byte[] data as text) and corresponding .p7b file.
I want to load the keys from the .p7b and decrypt the assertion to an XML document.
So far I think I'm reading the keys correctly:
// get the key data
byte[] certificateData = System.IO.File.ReadAllBytes(""myKeys.p7b"");

// decode the keys
var cms = new SignedCms(SubjectIdentifierType.IssuerAndSerialNumber);
cms.Decode(certificateData);

var samlCertificates = cms.Certificates;

Then I try to parse the assertion I get a problem:
// we have a keychain of X509Certificate2s, we need a collection of tokens
var certificatesAsTokens =
    from X509Certificate2 cert in samlCertificates
    select new X509SecurityToken(cert) as SecurityToken;

// get a token resolver
var tokens = new ReadOnlyCollection<SecurityToken>(
    certificatesAsTokens.ToList());
var resolver = SecurityTokenResolver.CreateDefaultSecurityTokenResolver(
    tokens, true);

// get the SAML data in an XML reader
var reader = XmlReader.Create(assertionPostStream);

// use the WS Security stuff to parse the reader
var securityToken = WSSecurityTokenSerializer.
    DefaultInstance.ReadToken(reader, resolver) as SamlSecurityToken;

That last statement throws an exception, stating that it can't parse the XML content.
I think this means that I'm missing a step decrypting the assertion - getting the byte[] as text converted to a SAML format XML document.
Anyone know how to add this step? Am I missing something else?
","I've figured this out - I was missing part of the SAML specification.
The assertion is sent (rather weirdly, since it isn't encrypted) as base64 data, and it was being URL encoded twice as it was sent.
So adding this step gives us a valid assertion:
// spec says ""SAMLResponse="" 
string rawSamlData = Request[""SAMLResponse""];

// the sample data sent us may be already encoded, 
// which results in double encoding
if (rawSamlData.Contains('%'))
{
    rawSamlData = HttpUtility.UrlDecode(rawSamlData);
}

// read the base64 encoded bytes
byte[] samlData = Convert.FromBase64String(rawSamlData);

// read back into a UTF string
string samlAssertion = Encoding.UTF8.GetString(samlData);

The authentication still isn't working, but I now have valid XML so it's a different problem.
","17324","<.net><single-sign-on><x509certificate><saml><pkcs#7>","6","14","1","2014-09-25 04:14:45","6108496","0","2","","","","2011-05-23 15:37:14",""
"3166159","Verifying PKCS#7 certificates in Java","Need some help with crypto routines in Java.
Given a PKCS#7 signature, I want to verify all certificates it contains against a trusted store. I assume that all certificates contained in signature are in the correct order to form a valid certificate path (or chain, whatever), so that

topmost (#0) is a signing certificate;
next one (#1) is an intermediate certificate, used to sign #0;
next one (#2) is another intermediate certificate, used to sign #1;
and so on.

The last certificate (#N) is signed by CA.
That's what I've managed to hack so far:
// Exception handling skipped for readability

//byte[] signature = ...
pkcs7 = new PKCS7(signature); // `sun.security.pkcs.PKCS7;`

// *** Checking some PKCS#7 parameters here

X509Certificate prevCert = null; // Previous certificate we've found
X509Certificate[] certs = pkcs7.getCertificates(); // `java.security.cert.X509Certificate`
for (int i = 0; i < certs.length; i++) {
    // *** Checking certificate validity period here

    if (cert != null) {
        // Verify previous certificate in chain against this one
        prevCert.verify(certs[i].getPublicKey());
    }
    prevCert = certs[i];
}

//String keyStorePath = ...
KeyStore keyStore = KeyStore.getInstance(""JKS""); // `java.security.KeyStore`
keyStore.load(new FileInputStream(keyStorePath), null);

// Get trusted VeriSign class 1 certificate
Certificate caCert = keyStore.getCertificate(""verisignclass1ca""); // `java.security.cert.Certificate`

// Verify last certificate against trusted certificate
cert.verify(caCert.getPublicKey());

So the question is -- how can this be done using standard Java classes like CertPath and friends? I have a strong feeling I'm re-inventing a bicycle. Or, if someone has an example with BouncyCastle library, that would also be fine.
Bonus question: how to verify a certificate against a trusted store so that root certificate is selected automatically?
","You want CertificateFactory. The last example in the javadocs do exactly what you want.
","15917","<java><certificate><bouncycastle><pkcs#7>","7","2","2","2010-07-05 14:08:06","3180123","2","7","","","","2010-07-02 13:39:49",""
"3166159","Verifying PKCS#7 certificates in Java","Need some help with crypto routines in Java.
Given a PKCS#7 signature, I want to verify all certificates it contains against a trusted store. I assume that all certificates contained in signature are in the correct order to form a valid certificate path (or chain, whatever), so that

topmost (#0) is a signing certificate;
next one (#1) is an intermediate certificate, used to sign #0;
next one (#2) is another intermediate certificate, used to sign #1;
and so on.

The last certificate (#N) is signed by CA.
That's what I've managed to hack so far:
// Exception handling skipped for readability

//byte[] signature = ...
pkcs7 = new PKCS7(signature); // `sun.security.pkcs.PKCS7;`

// *** Checking some PKCS#7 parameters here

X509Certificate prevCert = null; // Previous certificate we've found
X509Certificate[] certs = pkcs7.getCertificates(); // `java.security.cert.X509Certificate`
for (int i = 0; i < certs.length; i++) {
    // *** Checking certificate validity period here

    if (cert != null) {
        // Verify previous certificate in chain against this one
        prevCert.verify(certs[i].getPublicKey());
    }
    prevCert = certs[i];
}

//String keyStorePath = ...
KeyStore keyStore = KeyStore.getInstance(""JKS""); // `java.security.KeyStore`
keyStore.load(new FileInputStream(keyStorePath), null);

// Get trusted VeriSign class 1 certificate
Certificate caCert = keyStore.getCertificate(""verisignclass1ca""); // `java.security.cert.Certificate`

// Verify last certificate against trusted certificate
cert.verify(caCert.getPublicKey());

So the question is -- how can this be done using standard Java classes like CertPath and friends? I have a strong feeling I'm re-inventing a bicycle. Or, if someone has an example with BouncyCastle library, that would also be fine.
Bonus question: how to verify a certificate against a trusted store so that root certificate is selected automatically?
","Found the solution myself. So, here's how one can extract and validate a certificate chain against the trusted store (exception handling skipped for readability):
CertificateFactory cf = CertificateFactory.getInstance(""X.509"");

// Get ContentInfo
//byte[] signature = ... // PKCS#7 signature bytes
InputStream signatureIn = new ByteArrayInputStream(signature);
DERObject obj = new ASN1InputStream(signatureIn).readObject();
ContentInfo contentInfo = ContentInfo.getInstance(obj);

// Extract certificates
SignedData signedData = SignedData.getInstance(contentInfo.getContent());
Enumeration certificates = signedData.getCertificates().getObjects();

// Build certificate path
List certList = new ArrayList();
while (certificates.hasMoreElements()) {
    DERObject certObj = (DERObject) certificates.nextElement();
    InputStream in = new ByteArrayInputStream(certObj.getDEREncoded());
    certList.add(cf.generateCertificate(in));
}
CertPath certPath = cf.generateCertPath(certList);

// Load key store
//String keyStorePath = ...
KeyStore keyStore = KeyStore.getInstance(""JKS"");
keyStore.load(new FileInputStream(keyStorePath), null);

// Set validation parameters
PKIXParameters params = new PKIXParameters(keyStore);
params.setRevocationEnabled(false); // to avoid exception on empty CRL

// Validate certificate path
CertPathValidator validator = CertPathValidator.getInstance(""PKIX"");
CertPathValidatorResult result = validator.validate(certPath, params);

validate() will throw an exception if validation fails.
Docs: ASN1Set, ContentInfo, SignedData. All other exotic names and related docs can be found in java.security.cert.
No SUN-dependencies here, only BouncyCastle provider library is needed.
This question (and especially an answer) may help too.
","15917","<java><certificate><bouncycastle><pkcs#7>","7","13","2","2010-07-05 14:08:06","3180123","2","7","","","","2010-07-02 13:39:49",""
"579035","How to read Pkcs#7 certificate chain from file/stream in C#?","I have two certificates that I saved to disk. One is a certificate with private key that I exported as a .pfx file, the other one is a certificate that I saved including its certificate chain as a PKCS#7 file (""certchain.p7b"").
In C# I can now load the .pfx file with
  var cert = new X509Certificate2(myPfxFileStream); 

(myPfxFileStream is a FileStream opened to the .pfx File for reading), however trying the same thing with the PKCs#7 Certificate fails in a CryptoGraphicException ""Der Indexwert ist ungültig"" which translates to ""invalid index value"".
I assume I have to parse PKCS#7 differently (it contains a chain, not a single certificate!), but how?
(Oh, by the way: Currently I have no passwords on those certficiates)
","You will want to use the SignedCms class in the System.Security.Cryptography.Pkcs namespace.
This blog entry will show you how to use the class:
http://blogs.msdn.com/shawnfa/archive/2006/02/27/539990.aspx
You basically will call the Decode method, passing the bytes representing the PKCS file.
","15095","<c#><x509certificate2><pkcs#7>","5","8","1","2018-07-27 13:06:35","579059","0","2","60229","froh42","2018-07-27 13:06:35","2009-02-23 19:42:42",""
"13347528","PHP Encrypt/Decrypt with TripleDes, PKCS7, and ECB","I've got my encryption function working properly however I cannot figure out how to get the decrypt function to give proper output.
Here is my encrypt function:
function Encrypt($data, $secret)
{    
  //Generate a key from a hash
  $key = md5(utf8_encode($secret), true);

  //Take first 8 bytes of $key and append them to the end of $key.
  $key .= substr($key, 0, 8);

  //Pad for PKCS7
  $blockSize = mcrypt_get_block_size('tripledes', 'ecb');
  $len = strlen($data);
  $pad = $blockSize - ($len % $blockSize);
  $data .= str_repeat(chr($pad), $pad);

  //Encrypt data
  $encData = mcrypt_encrypt('tripledes', $key, $data, 'ecb');

  return base64_encode($encData);

}

Here is my decrypt function:
function Decrypt($data, $secret)
{
    $text = base64_decode($data);

    $data = mcrypt_decrypt('tripledes', $secret, $text, 'ecb');

    $block = mcrypt_get_block_size('tripledes', 'ecb');
    $pad   = ord($data[($len = strlen($data)) - 1]);

    return substr($data, 0, strlen($data) - $pad);
}

Right now I am using a key of test and I'm trying to encrypt 1234567. I get the base64 output from encryption I'm looking for, but when I go to decrypt it returns nothing (a blank area).
I'm not very well versed in encryption/decryption so any help is much appreciated!!
","Thanks for anyone who took a look at my problem. I think I have solved it and here is my full solution. Hopefully it helps out someone else who is having a similar issue:
function Encrypt($data, $secret)
{    
  //Generate a key from a hash
  $key = md5(utf8_encode($secret), true);

  //Take first 8 bytes of $key and append them to the end of $key.
  $key .= substr($key, 0, 8);

  //Pad for PKCS7
  $blockSize = mcrypt_get_block_size('tripledes', 'ecb');
  $len = strlen($data);
  $pad = $blockSize - ($len % $blockSize);
  $data .= str_repeat(chr($pad), $pad);

  //Encrypt data
  $encData = mcrypt_encrypt('tripledes', $key, $data, 'ecb');

  return base64_encode($encData);

}

And here is the new decrypt function.
function Decrypt($data, $secret)
{

    //Generate a key from a hash
    $key = md5(utf8_encode($secret), true);

    //Take first 8 bytes of $key and append them to the end of $key.
    $key .= substr($key, 0, 8);

    $data = base64_decode($data);

    $data = mcrypt_decrypt('tripledes', $key, $data, 'ecb');

    $block = mcrypt_get_block_size('tripledes', 'ecb');
    $len = strlen($data);
    $pad = ord($data[$len-1]);

    return substr($data, 0, strlen($data) - $pad);
}

I had to add the same code for generating the key in the correct format before I ran the mycrypt_decrypt function.
","12284","<php><encryption><pkcs#7><tripledes><ecb>","7","15","1","2014-08-27 11:23:55","","2","1","671736","","2012-11-12 17:05:42","2012-11-12 16:30:36",""
"21724337","Signing and Verifying on iOS using RSA","How to sign and verify some data on iOS with an RSA key (preferably using the system own libcommonCrypto)?
","Since there hasn't been nearly any knowledge about signing and verifying found on StackOverflow and the Apple docs, I had to manually browse around in the iOS header files and found SecKeyRawSign and SecKeyRawVerify. The following lines of code seem to work.

Signing NSData (using SHA256 with RSA):
NSData* PKCSSignBytesSHA256withRSA(NSData* plainData, SecKeyRef privateKey)
{
    size_t signedHashBytesSize = SecKeyGetBlockSize(privateKey);
    uint8_t* signedHashBytes = malloc(signedHashBytesSize);
    memset(signedHashBytes, 0x0, signedHashBytesSize);

    size_t hashBytesSize = CC_SHA256_DIGEST_LENGTH;
    uint8_t* hashBytes = malloc(hashBytesSize);
    if (!CC_SHA256([plainData bytes], (CC_LONG)[plainData length], hashBytes)) {
        return nil;
    }

    SecKeyRawSign(privateKey,
                  kSecPaddingPKCS1SHA256,
                  hashBytes,
                  hashBytesSize,
                  signedHashBytes,
                  &signedHashBytesSize);

    NSData* signedHash = [NSData dataWithBytes:signedHashBytes
                                        length:(NSUInteger)signedHashBytesSize];

    if (hashBytes)
        free(hashBytes);
    if (signedHashBytes)
        free(signedHashBytes);

    return signedHash;
}


Verification (using SHA256 with RSA):
BOOL PKCSVerifyBytesSHA256withRSA(NSData* plainData, NSData* signature, SecKeyRef publicKey)
{
    size_t signedHashBytesSize = SecKeyGetBlockSize(publicKey);
    const void* signedHashBytes = [signature bytes];

    size_t hashBytesSize = CC_SHA256_DIGEST_LENGTH;
    uint8_t* hashBytes = malloc(hashBytesSize);
    if (!CC_SHA256([plainData bytes], (CC_LONG)[plainData length], hashBytes)) {
        return nil;
    }

    OSStatus status = SecKeyRawVerify(publicKey,
                                      kSecPaddingPKCS1SHA256,
                                      hashBytes,
                                      hashBytesSize,
                                      signedHashBytes,
                                      signedHashBytesSize);

    return status == errSecSuccess;
}


Alternatives (OpenSSL):
There is a very good alternative available which utilizes OpenSSL directly instead of libCommonCrypto. MIHCrypto is a well-designed Objective-C wrapper library for OpenSSL which makes working with cryptography very easy. See the example below.
Generating a key is that simple:
MIHAESKeyFactory *factory = [[MIHAESKeyFactory alloc] init];
id<MIHSymmetricKey> aesKey = [factory generateKey];

Or loading a key from file:
NSData *privateKeyData = [[NSFileManager defaultManager] contentsAtPath:""mykey.pem""];
MIHRSAPrivateKey *privateKey = [[MIHRSAPrivateKey alloc] initWithData:privateKeyData];

Now sign something:
NSError *signingError = nil;
NSData *message = // load something to sign from somewhere
NSData *signature = [privateKey signWithSHA256:message error:&signingError]

For more examples browse the MIHCrypto page.
","10584","<ios><rsa><pkcs#7><commoncrypto>","19","29","1","2014-08-30 10:23:56","21826729","6","15","","","","2014-02-12 09:53:50",""
"17043569","PKCS7 Verify digital signature in Java","The situation is that i have to check a digital signature:
String1 ""A1005056807CE11EE2B4CE0025305725CFrCN=KED,OU=I0020266601,OU=SAPWebAS,O=SAPTrustCommunity,C=DE20130611102236"" 
is signed via PKCS#7 and send over HTTP-URL to me.
I get the signed content in BASE64 (look in code String sc).
Now i have to check, if the Hash of String1 which i will reproduce later in my code, is the same as from the signed content. Therefore i have to use the public key which i have from a certificate.
I have a file with a X.509 certificate. This file i load into a X509Certificate instance. I got this file by copy and paste the bytes out from SAP- so i am not sure if the certificate is correct. But i can load it into the instance - i have putted the output of this certificate below.
Now i get ""message-digest attribute value does not match calculated value"" when i run my code. 
I dont know if these steps are right and is this message is correct, or am I doing something false!?
Here my code:
String sc = ""MIIBUQYJKoZIhvcNAQcCoIIBQjCCAT4CAQExCzAJBgUrDgMCGgUAMAsGCSqGSIb3DQEHATGCAR0wggEZAgEBMG8wZDELMAkGA1UEBhMCREUxHDAaBgNVBAoTE1NBUCBUcnVzdCBDb21tdW5pdHkxEzARBgNVBAsTClNBUCBXZWIgQVMxFDASBgNVBAsTC0kwMDIwMjY2NjAxMQwwCgYDVQQDEwNLRUQCByASEgITMlYwCQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTEzMDYxMTA4MjM1MVowIwYJKoZIhvcNAQkEMRYEFGy7jXb/pUqMYdk2dss2Qe6hNroaMAkGByqGSM44BAMELjAsAhRMJ+t5/3RxQAsHKnIoPY4BnO0qCAIUAbKRwWNjOYsewB56zoZqnZwRyWw="";
byte[] secKey = Base64.decode(sc);


CMSSignedData s = new CMSSignedData(secKey);

SignerInformationStore signers = s.getSignerInfos();
Iterator<SignerInformation> it = signers.getSigners().iterator();

FileInputStream fis = new FileInputStream(""c:\\sap.cer"");
CertificateFactory cf = CertificateFactory.getInstance(""X.509"");
Collection<X509Certificate> c = (Collection<X509Certificate>)cf.generateCertificates(fis);
Iterator<X509Certificate> i = c.iterator();

while(it.hasNext()){
    SignerInformation signer = it.next();
    while (i.hasNext()) {
        X509Certificate cert = i.next();
        cert.checkValidity();
        cert.verify(cert.getPublicKey());           
        signer.verify(new JcaSimpleSignerInfoVerifierBuilder().setProvider(""SUN"").build(cert));
    }
}

Certificate Output:
[
[
  Version: V1
  Subject: CN=KED, OU=I0020266601, OU=SAP Web AS, O=SAP Trust Community, C=DE
  Signature Algorithm: SHA1withDSA, OID = 1.2.840.10040.4.3

  Key:  Sun DSA Public Key
    Parameters:DSA
    p:     ffd22469 8c53aa90 7585c3ee b65ffd9a cde5b230 53041af9 969e69c8 22093f5a
    477740c5 d398084f 3830ea33 8dbd8505 d6cce42b 135794b1 a971e670 f896eee2
    17acf3f8 48c67d35 434768d7 9c30567f abeb0d86 5674ef2b d391d530 26cbd9ba
    647414ba ff6e2f5b 9f468df7 3e266bd5 b330058d e64cfd69 75065322 11c43237
    q:     cd1ac6c7 d55ae243 cd5bbb0c 0f0789b4 233786b1
    g:     0945535b 061de39c 995832d2 03d3c2a0 c352cad9 2a524886 7c681962 ca94e5e3
    f23cc4c0 7891bc0d 0abc85fe 4f575334 b8e02d02 176d7534 ec7080c3 a46ccba3
    776a1b2f fa6f3586 e4e90e40 558e779a 6d90c9c0 c788592f 5d8ffe16 801e2c9e
    b3305ed3 c4035015 a246b7fc 2d2dda7f e6431fe3 d3b291fe 58082643 49d9bac1

  y:
    cab5984a d0254277 fd4aab43 799d8120 35f7725b 313b87a2 ca092c91 96236e44
    8ad7c157 d000395b 1ce37da2 a9c18113 c34067e8 c917752b 9604049d 70b92bb0
    6aa65d45 d5fde439 bbcbaa21 7520542a baac4e64 75fabc57 56a91856 178d8fc4
    6aa34d71 5a06b59f 6c89ae81 3571d4ce 89bbeb49 dedfc68c 4fa8a6d1 9aefcdcf

  Validity: [From: Sun Dec 02 14:32:56 CET 2012,
               To: Fri Jan 01 01:00:01 CET 2038]
  Issuer: CN=KED, OU=I0020266601, OU=SAP Web AS, O=SAP Trust Community, C=DE
  SerialNumber: [    20121202 133256]

]
  Algorithm: [SHA1withDSA]
  Signature:
0000: 30 2D 02 14 15 BE 80 34   1A 6F 02 F4 C8 5A 9A 6A  0-.....4.o...Z.j
0010: 3E 5A A8 66 C2 A2 AD 3C   02 15 00 C9 53 A6 D9 85  >Z.f...<....S...
0020: 3F 22 FB 12 5C E9 9D B7   77 29 03 62 81 EA 17     ?""..\...w).b...

]

","Finally i got it with help of this: verifying detached signature with BC
    String toVerify = ""A1005056807CE11EE2B4CE0025305725CFrCN%3DKED,OU%3DI0020266601,OU%3DSAPWebAS,O%3DSAPTrustCommunity,C%3DDE20130611102236"";
    String signed = ""MIIBUQYJKoZIhvcNAQcCoIIBQjCCAT4CAQExCzAJBgUrDgMCGgUAMAsGCSqGSIb3DQEHATGCAR0wggEZAgEBMG8wZDELMAkGA1UEBhMCREUxHDAaBgNVBAoTE1NBUCBUcnVzdCBDb21tdW5pdHkxEzARBgNVBAsTClNBUCBXZWIgQVMxFDASBgNVBAsTC0kwMDIwMjY2NjAxMQwwCgYDVQQDEwNLRUQCByASEgITMlYwCQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTEzMDYxMTA4MjM1MVowIwYJKoZIhvcNAQkEMRYEFGy7jXb/pUqMYdk2dss2Qe6hNroaMAkGByqGSM44BAMELjAsAhRMJ+t5/3RxQAsHKnIoPY4BnO0qCAIUAbKRwWNjOYsewB56zoZqnZwRyWw="";
    byte[] signedByte = Base64.decode(signed);

    Security.addProvider(new BouncyCastleProvider());

    CMSSignedData s = new CMSSignedData(new CMSProcessableByteArray(toVerify.getBytes()), signedByte);
    SignerInformationStore signers = s.getSignerInfos();
    SignerInformation signerInfo = (SignerInformation)signers.getSigners().iterator().next();

    FileInputStream fis = new FileInputStream(""c:\\sap.cer"");
    CertificateFactory cf = CertificateFactory.getInstance(""X.509"");
    X509Certificate cert = (X509Certificate)cf.generateCertificates(fis).iterator().next();

    boolean result = signerInfo.verify(new JcaSimpleSignerInfoVerifierBuilder().setProvider(""SUN"").build(cert.getPublicKey())); 
    System.out.println(""Verified: ""+result);

","9261","<java><security><sap><pkcs#7>","2","4","1","2018-09-29 04:31:36","17059469","6","1","2427960","","2013-06-11 13:39:48","2013-06-11 11:59:59",""
"6369096","How to Read the certificates file from the PKCS7.p7b certificate file using openssl?","I am getting PKCS7 file (p7b). I want to read the content of the file and extract certificate in X509 structure.
How can I access individual Certificate from the PKCS container using openssl library?
","I've used the following program:
#include <stdio.h>
#include <openssl/pkcs7.h>
#include <openssl/x509.h>
#include <openssl/bio.h>
#include <openssl/pem.h>

int main(int argc, char **argv)
{
    PKCS7 *p7 = NULL;
    BIO *in = BIO_new(BIO_s_file());
    BIO *out = BIO_new(BIO_s_file());
    int der = 0; /* Input from DER or PEM ? */
    int text = 0; /* Dump text or output PEM ? */
    STACK_OF(X509) *certs = NULL;
    int i;

    CRYPTO_malloc_init();                                               \
    ERR_load_crypto_strings();
    OpenSSL_add_all_algorithms();

    BIO_set_fp(out, stdout, BIO_NOCLOSE);
    BIO_read_filename(in, argv[1]);
    p7 = der ?
        d2i_PKCS7_bio(in, NULL) :
        PEM_read_bio_PKCS7(in, NULL, NULL, NULL);

    i = OBJ_obj2nid(p7->type);
    if(i == NID_pkcs7_signed) {
        certs = p7->d.sign->cert;
    } else if(i == NID_pkcs7_signedAndEnveloped) {
        certs = p7->d.signed_and_enveloped->cert;
    }

    for (i = 0; certs && i < sk_X509_num(certs); i++) {
        X509 *x = sk_X509_value(certs,i);
        if(text) {
            X509_print(out, x);
        } else {
            PEM_write_bio_X509(out,x);
        }
    }
}

It's based on openssl-1.0.0d/apps/pkcs7.c and it's easily compiled (on Linux or Mac OS X) with (provided you save it as readp7.c):
gcc -o readp7 readp7.c -lcrypto

You can create files with openssl and read them like this:
openssl crl2pkcs7 -nocrl -certfile a.crt -certfile b.crt -out test.p7b
./readp7 test.p7b

","8642","<c++><certificate><openssl><x509><pkcs#7>","4","10","1","2018-10-11 07:17:23","6395941","0","5","1033581","","2018-10-11 07:17:23","2011-06-16 08:32:39",""
"6126388","How to verify an X509Certificate2 against an X509Certificate2Collection chain","I'm writing a SAML 2.0 response parser to handle POST authentication in ASP.Net (in C# and MVC, but that's less relevant).
So I have a .p7b file to validate with and that can be read into a X509Certificate2Collection and a sample assertion - a base 64 encoded SAML response.
Ideally I want to use the built in WSSecurityTokenSerializer, but that fails, so I'm looking for a way that works.
I'm reading the XML directly instead:
// get the base 64 encoded SAML
string samlAssertionRaw = GetFromHttpRequest();

// load a new XML document
var assertion = new XmlDocument { PreserveWhitespace = true };
assertion.LoadXml(samlAssertionRaw);

// use a namespace manager to avoid the worst of xpaths
var ns = new XmlNamespaceManager(assertion.NameTable);
ns.AddNamespace(""samlp"", @""urn:oasis:names:tc:SAML:2.0:protocol"");
ns.AddNamespace(""saml"", @""urn:oasis:names:tc:SAML:2.0:assertion"");
ns.AddNamespace(""ds"", SignedXml.XmlDsigNamespaceUrl);

// get the signature XML node
var signNode = assertion.SelectSingleNode(
    ""/samlp:Response/saml:Assertion/ds:Signature"", ns);

// load the XML signature
var signedXml = new SignedXml(assertion.DocumentElement);
signedXml.LoadXml(signNode as XmlElement);

// get the certificate, basically:
// signedXml.KeyInfo.OfType<KeyInfoX509Data>().First().
//     Certificates.OfType<X509Certificate2>().First()
// but with added checks
var certificate = GetFirstX509Certificate(signedXml);

// check the key and signature match
if (!signedXml.CheckSignature(certificate, true))
{
    throw new SecurityException(""Signature check failed."");
}

// go on and read the SAML attributes from the XML doc

That lot works, but all it's doing is checking that the signature and the X509Certificate2 public key in the SAML response match. It doesn't in any way verify who it's from, and I need to do that before accepting the SAML authentication.
There appear to be two ways to check the certificate found in the SAML response - I can do certificate.Verify() or I can do the check with the signature signedXml.CheckSignature(certificate, false).
However both return false.
I think this is because they're being checked against the machine store or possibly online (I'm not sure how to check). I want to check them against the X509Certificate2Collection retrieved from the .p7b file instead - the certificates registered on the machine should be ignored and just the .p7b certificates checked.
There doesn't appear to be any way to pass the X509Certificate2Collection to either the Verify or CheckSignature methods.
Is this the right check to be doing on the SAML response?
Is there any way to use the .p7b certificates the way I want to?
","Have you tried using a custom X509Chain configured to search an ExtraStore of certificates during the validation process. Something like the following:
// Placeholder for the certificate to validate
var targetCertificate = new X509Certificate2();
// Placeholder for the extra collection of certificates to be used
var certificates = new X509Certificate2Collection();

var chain = new X509Chain();

chain.ChainPolicy.RevocationMode = X509RevocationMode.NoCheck;
chain.ChainPolicy.ExtraStore.AddRange(certificates);

bool isValidCertificate = chain.Build(targetCertificate);

In the example the revocation check is also disabled but if you have online or offline access to the CRL you could enable it. 

The ExtraStore should allow to include intermediate certificates that are not in the machine/user store. However, the trusted root certificate may need to be in the machine or user store depending on the one specified in X509Chain because otherwise you'll get an UntrustedRoot fail. If not even the root can be available in a machine or user store you could try to walk up the resulting chain and guarantee that the only error you have is due to an untrusted root and at the same time guaranteeing that the chain root is what you would expect based on the X509Certificate2Collection you have for validation.
Alternatively you could create your own custom X509CertificateValidator to validate a certificate taking only in consideration a provided X509Certificate2Collection.
","8050","<.net><single-sign-on><x509certificate><pkcs#7><saml-2.0>","10","5","1","2011-05-31 12:54:26","6187016","7","9","-1","","2017-05-23 11:43:48","2011-05-25 14:51:10",""
"23935033","Enveloping, signing and creating PKCS#7 DER message with .pfx certificate","My task is to create data that are digitally signed in format of PKCS#7 version 1.5 (RFC 2315) DER (ITU-T Recommendation X.690) - basically ANSI.1 with X.509 signature?
the message must satisfy following:

must be type signedData
must contain signed data
must contain signer's certificate
must contain one digital signature

My code is following
static void Main(string[] args)
{

    string pfx = @""C:\Users\marek\Downloads\mfcr\marek-pfx.pfx"";
    string xml = @""C:\Users\marek\Downloads\mfcr\souhr20141.xml"";
    X509Certificate2 cert = new X509Certificate2(pfx, ""thepass"");

    byte[] publicBytes = cert.RawData;

    //var f = new FileStream(xml, System.IO.FileMode.Open);
    var fileContent = System.IO.File.ReadAllBytes(xml);

    char[] cArray = System.Text.Encoding.ASCII.GetString(fileContent).ToCharArray();
    RSACryptoServiceProvider rsa = (RSACryptoServiceProvider)cert.PrivateKey;

    byte[] signedData = rsa.SignData(new System.Text.UTF8Encoding().GetBytes(cArray), new SHA1CryptoServiceProvider());

    RSACryptoServiceProvider rsa2 = (RSACryptoServiceProvider)new X509Certificate2(publicBytes).PublicKey.Key;

    var dataGenerator = new CmsEnvelopedDataStreamGenerator();
    bool verified = rsa2.VerifyData(new System.Text.UTF8Encoding().GetBytes(cArray), new SHA1CryptoServiceProvider(), signedData);

    File.WriteAllBytes(@""C:\Users\marek\Downloads\mfcr\Foo.p7b"", signedData);
 }

The WebService that Iam sending the Foo.p7b responds with: File is not in expected format of PKCS7(DER).
This code for sending the HttpWebRequest :
static void Main(string[] args)
    {
        try
        {

            string fileName = (@""C:\Users\marek\Downloads\mfcr\Foo.p7b"");
            WebResponse rsp = null;
            HttpWebRequest request = (HttpWebRequest)HttpWebRequest.Create(""https://adisepo.mfcr.cz/adistc/epo_podani"");
            request.ClientCertificates.Add(new X509Certificate(pfx,""thepass""));
            request.Method = ""POST"";
            request.ContentType = ""application/pkcs7-signature"";
            request.Credentials = CredentialCache.DefaultNetworkCredentials;
            var encoder = new UTF8Encoding();
            var reqStream = request.GetRequestStream();
            StreamWriter writer = new StreamWriter(request.GetRequestStream());
            // Write the XML text into the stream
            writer.WriteLine(GetTextFromXMLFile(fileName));
            writer.Close();
            reqStream.Close();
            rsp = request.GetResponse();
            StreamReader sr = new StreamReader(rsp.GetResponseStream());
            string result = sr.ReadToEnd();
            sr.Close();
            Console.Write(""\n příkaz odeslán  \n"");
            Console.Write(result);
            Console.ReadLine();
            Console.Read();
        }
        catch (Exception ex)
        { Console.WriteLine(ex.ToString());
        Console.ReadLine();
        }

    }
    private static string GetTextFromXMLFile(string file)
    {
        StreamReader reader = new StreamReader(file);
        string ret = reader.ReadToEnd();
        reader.Close();
        return ret;
    }
}

I'm struggling with this issue for almost 5 days - I'm surely not expert on digital signature or certificates.
From what I learned so far - to create message like that I should do:

Sign the xml with my private key
Envelope that blob with my public key

But how could the recipient check whether I am the real sender? Should I add to HttpWebRequest parameter with my certificate? Or that step 2 - Enveloping the message is enough for him to check that?
Thank you everyone for your time and replies. 
","Take a look at BouncyCastle - it has all you need for that:
http://www.bouncycastle.org/csharp/
","7420","<c#><ssl-certificate><digital-signature><certificate><pkcs#7>","4","0","2","2014-06-02 12:56:17","23990736","1","2","2538352","","2014-06-02 07:54:15","2014-05-29 13:52:05",""
"23935033","Enveloping, signing and creating PKCS#7 DER message with .pfx certificate","My task is to create data that are digitally signed in format of PKCS#7 version 1.5 (RFC 2315) DER (ITU-T Recommendation X.690) - basically ANSI.1 with X.509 signature?
the message must satisfy following:

must be type signedData
must contain signed data
must contain signer's certificate
must contain one digital signature

My code is following
static void Main(string[] args)
{

    string pfx = @""C:\Users\marek\Downloads\mfcr\marek-pfx.pfx"";
    string xml = @""C:\Users\marek\Downloads\mfcr\souhr20141.xml"";
    X509Certificate2 cert = new X509Certificate2(pfx, ""thepass"");

    byte[] publicBytes = cert.RawData;

    //var f = new FileStream(xml, System.IO.FileMode.Open);
    var fileContent = System.IO.File.ReadAllBytes(xml);

    char[] cArray = System.Text.Encoding.ASCII.GetString(fileContent).ToCharArray();
    RSACryptoServiceProvider rsa = (RSACryptoServiceProvider)cert.PrivateKey;

    byte[] signedData = rsa.SignData(new System.Text.UTF8Encoding().GetBytes(cArray), new SHA1CryptoServiceProvider());

    RSACryptoServiceProvider rsa2 = (RSACryptoServiceProvider)new X509Certificate2(publicBytes).PublicKey.Key;

    var dataGenerator = new CmsEnvelopedDataStreamGenerator();
    bool verified = rsa2.VerifyData(new System.Text.UTF8Encoding().GetBytes(cArray), new SHA1CryptoServiceProvider(), signedData);

    File.WriteAllBytes(@""C:\Users\marek\Downloads\mfcr\Foo.p7b"", signedData);
 }

The WebService that Iam sending the Foo.p7b responds with: File is not in expected format of PKCS7(DER).
This code for sending the HttpWebRequest :
static void Main(string[] args)
    {
        try
        {

            string fileName = (@""C:\Users\marek\Downloads\mfcr\Foo.p7b"");
            WebResponse rsp = null;
            HttpWebRequest request = (HttpWebRequest)HttpWebRequest.Create(""https://adisepo.mfcr.cz/adistc/epo_podani"");
            request.ClientCertificates.Add(new X509Certificate(pfx,""thepass""));
            request.Method = ""POST"";
            request.ContentType = ""application/pkcs7-signature"";
            request.Credentials = CredentialCache.DefaultNetworkCredentials;
            var encoder = new UTF8Encoding();
            var reqStream = request.GetRequestStream();
            StreamWriter writer = new StreamWriter(request.GetRequestStream());
            // Write the XML text into the stream
            writer.WriteLine(GetTextFromXMLFile(fileName));
            writer.Close();
            reqStream.Close();
            rsp = request.GetResponse();
            StreamReader sr = new StreamReader(rsp.GetResponseStream());
            string result = sr.ReadToEnd();
            sr.Close();
            Console.Write(""\n příkaz odeslán  \n"");
            Console.Write(result);
            Console.ReadLine();
            Console.Read();
        }
        catch (Exception ex)
        { Console.WriteLine(ex.ToString());
        Console.ReadLine();
        }

    }
    private static string GetTextFromXMLFile(string file)
    {
        StreamReader reader = new StreamReader(file);
        string ret = reader.ReadToEnd();
        reader.Close();
        return ret;
    }
}

I'm struggling with this issue for almost 5 days - I'm surely not expert on digital signature or certificates.
From what I learned so far - to create message like that I should do:

Sign the xml with my private key
Envelope that blob with my public key

But how could the recipient check whether I am the real sender? Should I add to HttpWebRequest parameter with my certificate? Or that step 2 - Enveloping the message is enough for him to check that?
Thank you everyone for your time and replies. 
","Your code tries digitally sign byte representation of XML, but signing XML requires more processing before signing. For example XML requires to be canonicalized (or signed message can be injected with unsigned data), and there is a special format for enveloped signatures. I don't know what is actual method Danovy Portal uses, but if it uses standard way, you can follow the links below and sign your data.   
MSDN: How to: Sign XML Documents with Digital Signatures
How enveloped signatures look
And just for information (don't think you really need to read this)
W3C Xml Signature specification
EDIT: to send pkcs#7 message change the code. When generating 
        ContentInfo contentInfo = new ContentInfo(new System.Text.UTF8Encoding().GetBytes(cArray));
        SignedCms cms = new SignedCms (contentInfo);
        CmsSigner signer = new CmsSigner (cert);
        cms.ComputeSignature (signer);
        byte[] pkcs7=cms.Encode ();
        File.WriteAllBytes(@""../../Foo.p7b"", pkcs7);

When send:
            HttpWebRequest request = (HttpWebRequest)HttpWebRequest.Create(""https://adisepo.mfcr.cz/adistc/epo_podani"");
            //we don't need to add certificate to POST
    //      request.ClientCertificates.Add(new X509Certificate(pfx,""test""));
            request.Method = ""POST"";
            request.ContentType = ""application/pkcs7-signature"";
            request.Credentials = CredentialCache.DefaultNetworkCredentials;
            var encoder = new UTF8Encoding();
            using (var reqStream = request.GetRequestStream())
            {
                // Write pkcs#7 into the stream
                byte[] pkcs = File.ReadAllBytes(@""../../Foo.p7b"");
                reqStream.Write(pkcs, 0, pkcs.Length);
            }
            rsp = request.GetResponse();

","7420","<c#><ssl-certificate><digital-signature><certificate><pkcs#7>","4","9","2","2014-06-02 12:56:17","23990736","1","2","2538352","","2014-06-02 07:54:15","2014-05-29 13:52:05",""
"39653074","AES-CBC 128, 192 and 256 encryption decryption in Python 3 using PKCS#7 padding","I have searched a lot on SO about complete encryption decryption example with my requirement. In fact, I've got many links and examples but None is working for me for AES-192-CBC mode and AES-256-CBC.
I have got following example which is supposed to be working with all types but it is working only with AES-128-CBC mode. I am new to Python. Can anyone help me where I am wrong?
I am using Python 3.4 on windows and I can not move to Python 2.7.
import base64
from Crypto.Cipher import AES

class AESCipher:
    class InvalidBlockSizeError(Exception):
        """"""Raised for invalid block sizes""""""
        pass

    def __init__(self, key, block_size=16):
        if block_size < 2 or block_size > 255:
            raise AESCipher.InvalidBlockSizeError('The block size must be between 2 and 255, inclusive')
        self.block_size = block_size
        self.key = key
        self.iv = bytes(key[0:16], 'utf-8')
        print(self.key)
        print(key[0:16])

    def __pad(self, text):
        text_length = len(text)
        amount_to_pad = self.block_size - (text_length % self.block_size)
        if amount_to_pad == 0:
            amount_to_pad = self.block_size
        self.pad = chr(amount_to_pad)
        return text + self.pad * amount_to_pad

    def __unpad(self, text):
        #pad = ord(text[-1])
        #return text[:-pad]
        text = text.rstrip(self.pad)
        return text

    def encrypt( self, raw ):
        raw = self.__pad(raw)
        cipher = AES.new(self.key, AES.MODE_CBC, self.iv)
        return base64.b64encode(cipher.encrypt(raw)) 

    def decrypt( self, enc ):
        enc = base64.b64decode(enc)
        cipher = AES.new(self.key, AES.MODE_CBC, self.iv )
        return self.__unpad(cipher.decrypt(enc).decode(""utf-8""))

e = AESCipher('1234567812345678', 16)
#e = AESCipher('123456781234567812345678', 24)
#e = AESCipher('12345678123456781234567812345678', 32)
secret_data = ""hi""
enc_str = e.encrypt(secret_data)
print('enc_str: ' + enc_str.decode())
dec_str = e.decrypt(enc_str)
print('dec str: ' + dec_str)

Though this code encrypts the data with 192 and 256 bit encryption and successfully decrypt that too but my other .Net and Ruby application only able to decrypt the data which was encrypted using 128 encryption.
Note .Net and Ruby application are successfully tested with each other and with online encryption tool with all encryption types.
Note that my application requires AES-CBC mode and PKCS#7 padding and must be run on Python 3.4.
","Made it working by padding of 16 bytes for any encryption types. For that I used AES.block_size which is 16 by default for AES.
import base64
from Crypto.Cipher import AES

class AESCipher:
    class InvalidBlockSizeError(Exception):
        """"""Raised for invalid block sizes""""""
        pass

    def __init__(self, key):
        self.key = key
        self.iv = bytes(key[0:16], 'utf-8')
        print(self.key)
        print(key[0:16])

    def __pad(self, text):
        text_length = len(text)
        amount_to_pad = AES.block_size - (text_length % AES.block_size)
        if amount_to_pad == 0:
            amount_to_pad = AES.block_size
        pad = chr(amount_to_pad)
        return text + pad * amount_to_pad

    def __unpad(self, text):
        pad = ord(text[-1])
        return text[:-pad]

    def encrypt( self, raw ):
        raw = self.__pad(raw)
        cipher = AES.new(self.key, AES.MODE_CBC, self.iv)
        return base64.b64encode(cipher.encrypt(raw)) 

    def decrypt( self, enc ):
        enc = base64.b64decode(enc)
        cipher = AES.new(self.key, AES.MODE_CBC, self.iv )
        return self.__unpad(cipher.decrypt(enc).decode(""utf-8""))

e = AESCipher('1234567812345678', 16)
#e = AESCipher('123456781234567812345678', 24)
#e = AESCipher('12345678123456781234567812345678', 32)
secret_data = ""hi""
enc_str = e.encrypt(secret_data)
print('enc_str: ' + enc_str.decode())
dec_str = e.decrypt(enc_str)
print('dec str: ' + dec_str)

","7277","<python><aes><pycrypto><pkcs#7><cbc-mode>","1","2","1","2016-09-26 09:01:04","","0","","1816580","","2016-09-25 19:05:14","2016-09-23 05:17:15",""
"3267594","C# Create MIME Message?","Is there any built in functionality to MIME a file in C# .Net? What I am looking to do is:

Convert a file into a MIME message
Sign the MIME Message to a pcks 7 blob
MIME that pkcs 7 blob
Finally encrypt the entire thing.

Any suggestions on how I would go about this (not the encryption or signing part but the MIMEing)? What exactly is envolved in MIMEing a file?
","There is a good commercial package for a small fee:
Mime4Net
","7066","<c#><mime><pkcs#7>","3","2","3","2010-08-02 20:39:10","3337670","0","2","","","","2010-07-16 17:55:50",""
"3267594","C# Create MIME Message?","Is there any built in functionality to MIME a file in C# .Net? What I am looking to do is:

Convert a file into a MIME message
Sign the MIME Message to a pcks 7 blob
MIME that pkcs 7 blob
Finally encrypt the entire thing.

Any suggestions on how I would go about this (not the encryption or signing part but the MIMEing)? What exactly is envolved in MIMEing a file?
","Rather than deal with third party libraries, I suggest you look to the core .NET library. Use the Attachment class; it's been around since .NET 2. 
","7066","<c#><mime><pkcs#7>","3","2","3","2010-08-02 20:39:10","3337670","0","2","","","","2010-07-16 17:55:50",""
"3267594","C# Create MIME Message?","Is there any built in functionality to MIME a file in C# .Net? What I am looking to do is:

Convert a file into a MIME message
Sign the MIME Message to a pcks 7 blob
MIME that pkcs 7 blob
Finally encrypt the entire thing.

Any suggestions on how I would go about this (not the encryption or signing part but the MIMEing)? What exactly is envolved in MIMEing a file?
","As far as I know there is no such support in the bare .NET. You have to try one of third party libraries. One of them is our Rebex Secure Mail for .NET. Following code shows how to achieve it:
using Rebex.Mail;
using Rebex.Mime.Headers;
using Rebex.Security.Certificates;
...

// load the sender's certificate and 
// associated private key from a file 
Certificate signer = Certificate.LoadPfx(""hugo.pfx"", ""password"");

// load the recipient's certificate 
Certificate recipient = Certificate.LoadDer(""joe.cer"");

// create an instance of MailMessage 
MailMessage message = new MailMessage();

// set its properties to desired values 
message.From = ""hugo@example.com"";
message.To = ""joe@example.com"";
message.Subject = ""This is a simple message"";
message.BodyText = ""Hello, Joe!"";
message.BodyHtml = ""Hello, <b>Joe</b>!"";

// sign the message using Hugo's certificate 
message.Sign(signer);

// and encrypt it using Joe's certificate 
message.Encrypt(recipient);

// if you wanted Hugo to be able to read the message later as well, 
// you can encrypt it for Hugo as well instead - comment out the previous 
// encrypt and uncomment this one: 
// message.Encrypt(recipient, signer) 

(Code taken from the S/MIME tutorial page)
","7066","<c#><mime><pkcs#7>","3","2","3","2010-08-02 20:39:10","3337670","0","2","","","","2010-07-16 17:55:50",""
"7096877","Warning: openssl_pkcs7_sign() [function.openssl-pkcs7-sign]: error getting private key in C:\xampp\htdocs\this\tcpdf\tcpdf.php on line 8366","I am using TCPDF to sign PDF, but when running the example 52 I got this error:
Warning: openssl_pkcs7_sign() [function.openssl-pkcs7-sign]: error getting 
private key in C:\xampp\htdocs\this\tcpdf\tcpdf.php on line 8366

Could you please tell me or guide me where is the problem. I am just running the example without changing anything. I am using xampp.
","The problem is with the location from where it tries to access the private key. Instead of '' like in their example use 'file://'.( dirname(FILE)).'./path/to/file'. This worked for me.
","6484","<php><openssl><tcpdf><pkcs#7>","7","4","3","2016-04-15 12:21:28","","0","1","1401975","","2013-03-26 09:24:44","2011-08-17 17:21:42",""
"7096877","Warning: openssl_pkcs7_sign() [function.openssl-pkcs7-sign]: error getting private key in C:\xampp\htdocs\this\tcpdf\tcpdf.php on line 8366","I am using TCPDF to sign PDF, but when running the example 52 I got this error:
Warning: openssl_pkcs7_sign() [function.openssl-pkcs7-sign]: error getting 
private key in C:\xampp\htdocs\this\tcpdf\tcpdf.php on line 8366

Could you please tell me or guide me where is the problem. I am just running the example without changing anything. I am using xampp.
","I solved it by using:
$certificate = 'file://'.realpath('../tcpdf.crt');

When you create your own certificate use this:
/*
NOTES:
 - To create self-signed signature: openssl req -x509 -nodes -days 365000 -newkey rsa:1024 -keyout tcpdf.crt -out tcpdf.crt
 - To export crt to p12: openssl pkcs12 -export -in tcpdf.crt -out tcpdf.p12
 - To convert pfx certificate to pem: openssl pkcs12 -in tcpdf.pfx -out tcpdf.crt -nodes
*/

","6484","<php><openssl><tcpdf><pkcs#7>","7","3","3","2016-04-15 12:21:28","","0","1","1401975","","2013-03-26 09:24:44","2011-08-17 17:21:42",""
"7096877","Warning: openssl_pkcs7_sign() [function.openssl-pkcs7-sign]: error getting private key in C:\xampp\htdocs\this\tcpdf\tcpdf.php on line 8366","I am using TCPDF to sign PDF, but when running the example 52 I got this error:
Warning: openssl_pkcs7_sign() [function.openssl-pkcs7-sign]: error getting 
private key in C:\xampp\htdocs\this\tcpdf\tcpdf.php on line 8366

Could you please tell me or guide me where is the problem. I am just running the example without changing anything. I am using xampp.
","Finally, after weeks ago, I found the solution. I just donwloaded the TCPDF 5.9 Version and it works :D if you wanna try, here's the link to download that version
link: https://sourceforge.net/code-snapshots/git/u/u/u/mynetx/tcpdf.git/u-mynetx-tcpdf-5828c0d80580cbad069988e2067ad5e37e1e98e7.zip 
","6484","<php><openssl><tcpdf><pkcs#7>","7","0","3","2016-04-15 12:21:28","","0","1","1401975","","2013-03-26 09:24:44","2011-08-17 17:21:42",""
"6108564","Problems reading authenticating a SAML assertion in .Net using WSSecurityTokenSerializer","I have a SAML assertion that I wish to authenticate in .Net using WSSecurityTokenSerializer.
I've got the key-chain and SAML XML, despite a few issues.
First I get the SAML assertion from the HTTPS POST:
// spec says ""SAMLResponse="" 
string rawSamlData = Request[""SAMLResponse""];

// read the base64 encoded bytes
byte[] samlData = Convert.FromBase64String(rawSamlData);

// read back into a UTF string
string samlAssertion = Encoding.UTF8.GetString(samlData);

// get the SAML data in an XML reader
var assertionPostStream = new StringReader(samlAssertion);
var reader = XmlReader.Create(assertionPostStream);

Then I get the keys provided by my IdP:
// get the key data
byte[] certificateData = System.IO.File.ReadAllBytes(""myKeys.p7b"");

// decode the keys
var cms = new SignedCms(SubjectIdentifierType.IssuerAndSerialNumber);
cms.Decode(certificateData);

// we have a keychain of X509Certificate2s, we need a collection of tokens
var certificatesAsTokens =
    from X509Certificate2 cert in cms.Certificates
    select new X509SecurityToken(cert) as SecurityToken;

// get a token resolver
var tokens = new ReadOnlyCollection<SecurityToken>(
    certificatesAsTokens.ToList());
var resolver = SecurityTokenResolver.CreateDefaultSecurityTokenResolver(
    tokens, true);

Finally I get an error thrown here: 
// use the WS Security stuff to parse the reader
var securityToken = WSSecurityTokenSerializer.
    DefaultInstance.ReadToken(reader, resolver) as SamlSecurityToken;

When calling that ReadToken I get the following error:

Cannot read the token from the 'Response' element with the 'urn:oasis:names:tc:SAML:2.0:protocol' namespace for BinarySecretSecurityToken, with a '' ValueType. If this element is expected to be valid, ensure that security is configured to consume tokens with the name, namespace and value type specified.

My SAML XML starts with:
<Response xmlns=""urn:oasis:names:tc:SAML:2.0:protocol"" ...

So clearly I have a Response element in the urn:oasis:names:tc:SAML:2.0:protocol namespace.
Any idea what's wrong/missing here?
","It looks like you are receiving a SAML2 response. Although there is support for SAML2 in .NET 4.5, there is unfortunately only support for the assertions - not the protocol itself (including the Response message).
To process the SAML2 response in .NET you have to:

Validate the signature on the entire response message.
Extract the assertion part of the message.
Read the token with Saml2SecurityTokenHandler.ReadToken().
Validate the token with Saml2SecurityTokenHandler.DetectReplayedToken().
Validate the token with Saml2SecurityTokenHandler.ValidateConditions()
Use Saml2SecurityTokenHandler.CreateClaims() to create a claims identity.

Unfortunately most of those methods are protected, but you can subclass Saml2SecurityTokenHandler and get access to them.
A complete working example can be found in the Saml2Response class in the Sustainsys.Saml2 project.
","6366","<.net><single-sign-on><x509certificate><pkcs#7><saml-2.0>","3","5","1","2019-02-06 11:00:35","20858413","1","2","-1","","2017-05-23 12:15:36","2011-05-24 09:46:50",""
"2377402","How to encode a value in PKCS7 with Java?","I would like to use PKCS7 encryption to encode a value together with Java and Java Servlet. Is there any available library and references to do the encryption? Any sample or tutorial that I could follow?
Thank you.
","For general cryptografy I use bouncycastle library. I haven't used PKCS7, but there is example how to use it: PKCS7 Signatures using Bouncy Castle
","6321","<java><encryption><encoding><pkcs#7>","2","4","1","2012-05-30 21:23:38","2377581","1","1","","","","2010-03-04 07:03:44",""
"7579269","Verify Digital Signature with SignedCms","I get the CryptographicException ""The hash value is not correct."" I tried verifyCms.CheckSignature(true); (same error)
I tried to add in ContentInfo the whole mail (Sender , Subject , Body, HTML Sectione ...) (same error)
public static bool Verify(byte[] signature, X509Certificate2 certificate)
{
       X509Certificate2 cert=new X509Certificate2(@""D:\Work\Digital Signature\smime.p7s"");
   certificate = cert;

    if(signature == null)
        throw new ArgumentNullException(""signature"");
    if(certificate == null)
        throw new ArgumentNullException(""certificate"");

    //the text from the body of the mail    
    string text = ""FINAL TEST SIGNED"";
    //hash the text 
     // Methode 3 for Hashing
            System.Security.Cryptography.SHA1 hash3 = System.Security.Cryptography.SHA1.Create();
            System.Text.UnicodeEncoding encoder = new System.Text.UnicodeEncoding();
            byte[] combined = encoder.GetBytes(text);
            byte[] hash3byte = hash3.ComputeHash(combined);

    //Adding the text from the email, to a contentInfo 
      ContentInfo content = new ContentInfo(hash3byte);

    // decode the signature
    SignedCms verifyCms = new SignedCms(content,true);
    verifyCms.Decode(signature);

    // verify it
    try
    {
        verifyCms.CheckSignature(new X509Certificate2Collection(certificate), false);
        return true;
    }
    catch(CryptographicException)
    {
        return false;
    }
} 

Where is the problem?
","You can see my post.
Just change the Oid 'SHA1' to the the algorithm you need.
","6282","<c#><digital-signature><x509certificate><pkcs#7>","0","0","1","2019-08-10 19:01:50","","1","","107625","","2019-07-11 10:12:41","2011-09-28 06:43:29",""
"15969733","Verify PKCS#7 (PEM) signature / unpack data in node.js","I get a PKCS#7 crypto package from a 3rd party system.
The package is not compressed and not encrypted, PEM-encoded, signed with X.509 certificate.
I also have a PEM cert file from the provider.
The data inside is XML
I need to do the following in Node.JS:

extract the data
verify the signature

A sample package (no sensitive info, data refers to our qa system) http://pastebin.com/7ay7F99e
","OK, finally got it.
First of all, PKCS messages are complex structures binary-encoded using ASN1.
Second, they can be serialized to binary files (DER encoding) or text PEM files using Base64 encoding.
Third, PKCS#7 format specifies several package types from which my is called Signed Data. These formats are distinguished by OBJECT IDENTIFIER value in the beginning of the ASN1 object (1st element of the wrapper sequence) — you can go to http://lapo.it/asn1js/ and paste the package text for the fully parsed structure.
Next, we need to parse the package (Base64 -> ASN1 -> some object representation). Unfortunately, there's no npm package for that. I found quite a good project forge that is not published to npm registry (though npm-compatible). It parsed PEM format but the resulting tree is quite an unpleasant thing to traverse. Based on their Encrypted Data and Enveloped Data implementations I created partial implementation of Signed Data in my own fork. UPD: my pull request was later merged to the forge project.
Now finally we have the whole thing parsed. 
At that point I found a great (and probably the only on the whole web) explanative article on signed PKCS#7 verification: http://qistoph.blogspot.com/2012/01/manual-verify-pkcs7-signed-data-with.html
I was able to extract and successfully decode the signature from the file, but the hash inside was different from the data's hash. God bless Chris who explained what actually happens.
The data signing process is 2-step:

original content's hash is calculated
a set of ""Authorized Attributes"" is constructed including: type of the data singed, signing time and data hash

Then the set from step 2 is signed using the signer's private key.
Due to PKCS#7 specifics this set of attributes is stored inside of the context-specific constructed type (class=0x80, type=0) but should be signed and validated as normal SET (class=0, type=17).
As Chris mentions (https://stackoverflow.com/a/16154756/108533) this only verifies that the attributes in the package are valid. We should also validate the actual data hash against the digest attribute.
So finally here's a code doing validation (cert.pem is a certificate file that the provider sent me, package is a PEM-encoded message I got from them over HTTP POST):
var fs = require('fs');
var crypto = require('crypto');
var forge = require('forge');
var pkcs7 = forge.pkcs7; 
var asn1 = forge.asn1;
var oids = forge.pki.oids;

var folder = '/a/path/to/files/';
var pkg = fs.readFileSync(folder + 'package').toString();
var cert = fs.readFileSync(folder + 'cert.pem').toString();


var res = true;

try {
    var msg = pkcs7.messageFromPem(pkg);
    var attrs = msg.rawCapture.authenticatedAttributes;
    var set = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, attrs);
    var buf = Buffer.from(asn1.toDer(set).data, 'binary');

    var sig = msg.rawCapture.signature;

    var v = crypto.createVerify('RSA-SHA1');
    v.update(buf);
    if (!v.verify(cert, sig)) {
        console.log('Wrong authorized attributes!');
        res = false;
    }

    var h = crypto.createHash('SHA1');
    var data = msg.rawCapture.content.value[0].value[0].value;
    h.update(data);

    var attrDigest = null;
    for (var i = 0, l = attrs.length; i < l; ++i) {
        if (asn1.derToOid(attrs[i].value[0].value) === oids.messageDigest) {
            attrDigest = attrs[i].value[1].value[0].value;
        }
    }

    var dataDigest = h.digest();
    if (dataDigest !== attrDigest) {
        console.log('Wrong content digest');
        res = false;
    }

}
catch (_e) {
    console.dir(_e);
    res = false;
}

if (res) {
    console.log(""It's OK"");
}

","5890","<javascript><node.js><pem><pkcs#7>","11","10","3","2018-09-27 00:46:12","16154756","0","6","108533","","2013-04-13 12:42:13","2013-04-12 11:04:27",""
"15969733","Verify PKCS#7 (PEM) signature / unpack data in node.js","I get a PKCS#7 crypto package from a 3rd party system.
The package is not compressed and not encrypted, PEM-encoded, signed with X.509 certificate.
I also have a PEM cert file from the provider.
The data inside is XML
I need to do the following in Node.JS:

extract the data
verify the signature

A sample package (no sensitive info, data refers to our qa system) http://pastebin.com/7ay7F99e
","Your answer is a big step in the right direction. You are however missing out an essential part of the validation!
You should verify the hash of the data against the digest contained in the signed attributes. Otherwise it would be possible for someone to replace the content with malicious data. Try for example validating the following 'package' with your code (and have a look at the content): http://pastebin.com/kaZ2XQQc
I'm not much of a NodeJS developer (this is actually my first try :p), but here's a suggestion to help you get started.
var fs = require('fs');
var crypto = require('crypto');
var pkcs7 = require('./js/pkcs7'); // forge from my own fork
var asn1 = require('./js/asn1');

var folder = '';
var pkg = fs.readFileSync(folder + 'package').toString();
var cert = fs.readFileSync(folder + 'cert.pem').toString();

try {
    var msg = pkcs7.messageFromPem(pkg);
    var attrs = msg.rawCapture.authenticatedAttributes; // got the list of auth attrs
    var set = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, attrs); // packed them inside of the SET object
    var buf = new Buffer(asn1.toDer(set).data, 'binary'); // DO NOT forget 'binary', otherwise it tries to interpret bytes as UTF-8 chars

    var sig = msg.rawCapture.signature;

    var shasum = crypto.createHash('sha1'); // better be based on msg.rawCapture.digestAlgorithms
    shasum.update(msg.rawCapture.content.value[0].value[0].value);

    for(var n in attrs) {
        var attrib = attrs[n].value;
        var attrib_type = attrib[0].value;
        var attrib_value = attrib[1].value[0].value;
        if(attrib_type == ""\x2a\x86\x48\x86\xf7\x0d\x01\x09\x04"") { // better would be to use the OID (1.2.840.113549.1.9.4)
            if(shasum.digest('binary') == attrib_value) {
                console.log('hash matches');

                var v = crypto.createVerify('RSA-SHA1');
                v.update(buf);
                console.log(v.verify(cert, sig)); // -> should type true
            } else {
                console.log('hash mismatch');
            }
        }
    }

}
catch (_e) {
    console.dir(_e);
}

","5890","<javascript><node.js><pem><pkcs#7>","11","4","3","2018-09-27 00:46:12","16154756","0","6","108533","","2013-04-13 12:42:13","2013-04-12 11:04:27",""
"15969733","Verify PKCS#7 (PEM) signature / unpack data in node.js","I get a PKCS#7 crypto package from a 3rd party system.
The package is not compressed and not encrypted, PEM-encoded, signed with X.509 certificate.
I also have a PEM cert file from the provider.
The data inside is XML
I need to do the following in Node.JS:

extract the data
verify the signature

A sample package (no sensitive info, data refers to our qa system) http://pastebin.com/7ay7F99e
","based on inspiration form this answer, I've implemented a sample for signing and verifying pdf files using node-signpdf and node-forge.
","5890","<javascript><node.js><pem><pkcs#7>","11","2","3","2018-09-27 00:46:12","16154756","0","6","108533","","2013-04-13 12:42:13","2013-04-12 11:04:27",""
"24567623","How to see what attributes are signed inside pkcs#7?","I have a pkcs#7 file, which contains signed data. It successfully verifies:
$ openssl smime -verify -in data.p7s -CAfile root-certificate.pem 
Verification successful
Signed data

But when I extract the signed part, I do not see that it is actually the same as what was signed. I mean the following steps:
$ openssl asn1parse -in data.p7s
...
   35:d=4  hl=2 l=   9 prim: OBJECT            :pkcs7-data
   46:d=4  hl=2 l=inf  cons: cont [ 0 ]        
   48:d=5  hl=2 l=inf  cons: OCTET STRING      
   50:d=6  hl=2 l=   5 prim: OCTET STRING      :(my data is here in plaintext)
...
(then the signed block starts:)
 2861:d=6  hl=2 l=   9 prim: OBJECT            :rsaEncryption
 2872:d=6  hl=2 l=   0 prim: NULL              
 2874:d=5  hl=4 l= 256 prim: OCTET STRING      [HEX DUMP]:<signed data is here>

I cut the [HEX DUMP] with the signed data:
$ dd if=data.p7s of=signed-part.bin bs=1 skip=2878 count=256

Decrypt it with the corresponding public key:
$ openssl rsautl -verify -in signed-part.bin -pubin -inkey root-public-key.pem -out verified-data.bin

and look inside the result:
$ openssl asn1parse -inform der -in verified-data.bin
    0:d=0  hl=2 l=  33 cons: SEQUENCE          
    2:d=1  hl=2 l=   9 cons: SEQUENCE          
    4:d=2  hl=2 l=   5 prim: OBJECT            :sha1
   11:d=2  hl=2 l=   0 prim: NULL              
   13:d=1  hl=2 l=  20 prim: OCTET STRING      [HEX DUMP]:<hash here>

This [HEX DUMP] is not the SHA1 sum of my original data.
I do not understand why the hash is different. Obviously, it's a hash of something different than my original data. Does the hash also cover any ""Authenticated attributes""? If yes, how to see what exactly attributes have been hashed and signed?
","OK, you don't provide a full sample, but I'll try to navigate you nevertheless, with a different sample.
OpenSSL asn1parse does not help much identifying the authenticated attributes. You can use OpenSSL cms:
openssl cms -in data.p7s -noout -cmsout -print

Look for signedAttrs (""signed attributes"" is how the ""authenticated attributes"" are now called, in CMS terminology)
It will look like this:
    ...
    signerInfos:
        ...
        signedAttrs:
            object: contentType (1.2.840.113549.1.9.3)
            value.set:
              OBJECT:pkcs7-data (1.2.840.113549.1.7.1)    
            object: signingTime (1.2.840.113549.1.9.5)
            ...

Now go back to asn1parse output, and find the corresponding part, which may look like:
 ...
 1343:d=5  hl=3 l= 216 cons:      cont [ 0 ]
 1346:d=6  hl=2 l=  24 cons:       SEQUENCE
 1348:d=7  hl=2 l=   9 prim:        OBJECT            :contentType
 1359:d=7  hl=2 l=  11 cons:        SET
 1361:d=8  hl=2 l=   9 prim:         OBJECT            :pkcs7-data
 1372:d=6  hl=2 l=  28 cons:       SEQUENCE
 1374:d=7  hl=2 l=   9 prim:        OBJECT            :signingTime
 ...

(for this nice indentation, add -i option)
Now, extract (dd ...) the data, including the DER context tag header, i.e. offset 1343, length 219, in this case. Then replace the 0xa0 byte at the beginning by 0x31. Why you have to do it, is described in DER encoding - How to convert implicit tag to explicit tag, or RFC5652, section 5.4
The sha1 hash of this data should now match.
","5873","<openssl><sign><pkcs#7>","5","5","1","2014-07-07 08:45:54","24581628","2","5","3608247","","2014-07-04 08:43:04","2014-07-04 06:01:10",""
"7112148","Parse PKCS #7 SSL Certificate Chain (.p7b) without private key?","I have a PKCS #7, signed, .p7b file which contains an X509 SSL certificate and the intermediate and root CA certs it was signed with. I need to use C# to parse the .p7b file, pull out the SSL certificate, and pull some values off of it (expiry date, DN, etc).
I've tried reading it as an X509 certificate like so:
//certContent is a byte array with the p7b file contents
X509Certificate2 cert = new X509Certificate2(certContent);

That works fine with a regular .cer certificate, but throws a CryptographicException when used with a .p7b certificate. This is because the .p7b contains the entire certificate chain.
I've also tried parsing it as a SignedCms object, then iterating through the certificate chain and pulling out my SSL certificate:
SignedCms certContainer = new SignedCms();
certContainer.Decode(certContent);
foreach(X509Certificate2 cert in certConatiner.Certificates)
{
     ...
}

However that throws an exception on Decode saying ASN1 bad tag value met. After some searching, I believe that is because I do not have the private key which was used to create the certificate and/or sign the certificate.
Does anyone know how I can parse this .p7b certificate chain using C#? 
","Well, I'm an idiot. I opened up the .p7b file and realized it was just base64 on the inside. I pulled out the base64, decoded that, then parsed that as a signed CMS and all is well.
String content = Encoding.UTF8.GetString(certContent);
String base64Content = content.Replace(""-----BEGIN CERTIFICATE-----"", """").Replace(""-----END CERTIFICATE-----"", """").Replace(""\r"", """").Replace(""\n"", """");
byte[] decodedContent = Convert.FromBase64String(base64Content);
SignedCms certContainer = new SignedCms();
certContainer.Decode(decodedContent);

","5636","<c#><security><ssl><certificate><pkcs#7>","4","4","1","2011-08-18 18:29:35","7112301","0","3","","","","2011-08-18 18:19:49",""
"8584280","How to Use RSAEncryption to create PKCS7/CMS with SHA1 digest?","I create a pkcs7 block,and can verify myself, but the result is not the same with my partner who use    OpenSSL.The p7 block I create cannot verify by my partner.
we check the code carefully, just find the code which cannot find counterpart in c#,
OPENSSL:
 signInfo->digest_enc_alg->algorithm=OBJ_nid2obj(NID_rsaEncryption);

Here is the code us C# in .net 4.0, can everyone know that how to Use RSAEncryption in p7?
public static string Sign(byte[] data, X509Certificate2 certificate)
        {
            if (data == null)
                throw new ArgumentNullException(""data"");
            if (certificate == null)
                throw new ArgumentNullException(""certificate"");

            //1 setup the data to sign           
            Oid digestOid = new Oid(""1.2.840.113549.1.7.2"");//pkcs7 signed 
            ContentInfo content = new ContentInfo(digestOid, data);           
            try
            {      
                //2,SignerCms
                SignedCms signedCms = new SignedCms(content, true); //detached = true           

                //3. CmsSigner
                CmsSigner signer = new CmsSigner(SubjectIdentifierType.IssuerAndSerialNumber, certificate);       

                signer.DigestAlgorithm = new Oid(""1.3.14.3.2.26"");//sha1

                //4.create signature
                signedCms.ComputeSignature(signer);          

                //5,to Base64
                byte[] signEnv = signedCms.Encode();                
                return  Convert.ToBase64String(signEnv);               

            }catch (Exception e)
            {
                Console.WriteLine(e);
            }
            return null;
        }

","","4972","<c#><rsa><pkcs#7>","2","","0","2017-03-05 03:49:44","","0","1","521757","","2017-03-05 03:49:44","2011-12-21 02:03:50",""
"36887197","JAVA Encryption with AES/CBC/PKCS7Padding","I got problem with encryption using java AES/CBC/PKCS7Padding. I have already search and follow throuh till using the BouncyCastle provider. But I still cant get the right encryption
Let say the requirements are:
Encryption Type: Symmetric
Algorithm: AES
Blocksize = 128Bit (16 Bytes)
Cipher mode: CBC
Padding mode: PKCS7
Encryption key length: 256 Bit (32 Bytes)
Vector Initialization Length (IV): 128 Bit (16 Bytes)  
sample: 
Plain data = ABC123
Encrypted data (base64 encoded) = CtGtW4hJfXxilSfNR1xmrg== 
and my code is...
public final class StringFunc {
    final static String key = ""jb2a19ou79rws6zknjlr803fvfgiyp1k"";
    final static String algorithm = ""AES/CBC/PKCS7Padding"";
    final static String iv = ""hod74ty97wr97g83"";
    private static Cipher cipher = null;
    private static SecretKeySpec skeySpec = null;
    private static IvParameterSpec  ivSpec = null;

    private static void setUp(){
        try{
            Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider()); 
            skeySpec = new SecretKeySpec(key.getBytes(), ""AES"");
            ivSpec = new IvParameterSpec(iv.getBytes());
            cipher = Cipher.getInstance(algorithm);
        }catch(NoSuchAlgorithmException | NoSuchPaddingException ex){
        }
    }

    public static String encrypt(String str){
        try{
            Integer strL = (int) Math.ceil(str.length() / 8.0);
            Integer strB = strL*8;
            str = padRight(str, '', strB);
            setUp();
            try {
                cipher.init(Cipher.ENCRYPT_MODE, skeySpec, ivSpec);
            } catch (InvalidAlgorithmParameterException ex) {
                return """";
            }
            byte[] enc = cipher.doFinal(str.getBytes());
            return new String(Base64.encodeBase64(enc));
        }catch(InvalidKeyException | IllegalBlockSizeException | BadPaddingException ex){
            return """";            
        }
    }

    public static String padRight(String msg, char x, int l) {
        String result = """";
        if (!msg.isEmpty()) {
            for (int i=0; i<(l-msg.length()); i++) {
                result = result + x;
            }
            result = msg + result;
        }
        return result;
    }
}

I still cant get the right encryption. Anyone can help or give suggestion?
","Guessing from the given input, you should run into Javas restriction of the key length:
Since the US doesn't allow usage of hard security keys, Java is restricted to a key length of 128bit per default.
To enable keys >128bit you have to change the policy of your Java version with the offical ""unlimited"" policies (here for SE8)
Overwriting the current policies in lib/security with the download should be enough.
","4889","<java><encryption><aes><pkcs#7>","0","0","1","2016-04-27 13:54:55","","3","2","1816580","","2016-04-27 13:20:27","2016-04-27 10:28:58",""
"5167174","Problems with pkcs7 file validation","I have a big and strange problem with PKCS7 securities files.
I create a p7s file like what is suggested in http://www.thatsjava.com/java-tech/85019/ where it creatse the file and validates it using only sun libraries. It works fine.
The problem starts when I want to validate this file. It returns this exception:
java.security.SignatureException: Signature encoding error
        at sun.security.rsa.RSASignature.engineVerify(RSASignature.java:185)
        at java.security.Signature$Delegate.engineVerify(Signature.java:1140)
        at java.security.Signature.verify(Signature.java:592)
        at sun.security.pkcs.SignerInfo.verify(SignerInfo.java:374)
        at sun.security.pkcs.PKCS7.verify(PKCS7.java:494)
        at sun.security.pkcs.PKCS7.verify(PKCS7.java:511)
        at sun.security.pkcs.PKCS7.verify(PKCS7.java:533)
        at firma.FirmaDigitalImpl.firmarCadenaSun(FirmaDigitalImpl.java:553)
        at firma.FirmaDigitalImpl.firmarCadena(FirmaDigitalImpl.java:249)
        at firma.FirmaDigitalImpl.firmarCadena(FirmaDigitalImpl.java:147)
        at firma.TestFirma.main(TestFirma.java:75)
Caused by: java.io.IOException: Sequence tag error
        at sun.security.util.DerInputStream.getSequence(DerInputStream.java:280)
        at sun.security.rsa.RSASignature.decodeSignature(RSASignature.java:209)
        at sun.security.rsa.RSASignature.engineVerify(RSASignature.java:174)
        ... 10 more

But the problems don't appear always, just only with a type of certificates used to sign.  I will explain better.
I have two certificates (stored into smartcard) and the first works fine; I create the p7s and next I validate correctly, but the second certificate allows me to create the p7s, file but when I validate it, it returns the SignatureException.  I thought the p7s file was wrong, but I tested it with others' applications, and it looks correct. Besides, this file is sent throws webservice and it returns that it is ok! 
And for more information, if the p7s file is created with different tools (.net and capicom) and the same certificate, then I can validate correctly.
I have looked for the solution, but nothing.  I have found the same exception in similar situations, but either the solution suggested doesn't work for me, or it doesn't appear.
Any advice to find the solution will be very appreciated.
","It might be encoding problem: text vs. binary.  PKCS7 can be in either DER-encoded binary format or PEM-format (which is base64 encoded DER).  Open the files in a text editor (e.g. notepad) and see whether the one which works is binary or text.
","4744","<java><security><validation><x509certificate><pkcs#7>","0","1","2","2016-07-09 05:26:02","","0","","5827958","","2016-07-09 05:19:06","2011-03-02 12:02:11",""
"5167174","Problems with pkcs7 file validation","I have a big and strange problem with PKCS7 securities files.
I create a p7s file like what is suggested in http://www.thatsjava.com/java-tech/85019/ where it creatse the file and validates it using only sun libraries. It works fine.
The problem starts when I want to validate this file. It returns this exception:
java.security.SignatureException: Signature encoding error
        at sun.security.rsa.RSASignature.engineVerify(RSASignature.java:185)
        at java.security.Signature$Delegate.engineVerify(Signature.java:1140)
        at java.security.Signature.verify(Signature.java:592)
        at sun.security.pkcs.SignerInfo.verify(SignerInfo.java:374)
        at sun.security.pkcs.PKCS7.verify(PKCS7.java:494)
        at sun.security.pkcs.PKCS7.verify(PKCS7.java:511)
        at sun.security.pkcs.PKCS7.verify(PKCS7.java:533)
        at firma.FirmaDigitalImpl.firmarCadenaSun(FirmaDigitalImpl.java:553)
        at firma.FirmaDigitalImpl.firmarCadena(FirmaDigitalImpl.java:249)
        at firma.FirmaDigitalImpl.firmarCadena(FirmaDigitalImpl.java:147)
        at firma.TestFirma.main(TestFirma.java:75)
Caused by: java.io.IOException: Sequence tag error
        at sun.security.util.DerInputStream.getSequence(DerInputStream.java:280)
        at sun.security.rsa.RSASignature.decodeSignature(RSASignature.java:209)
        at sun.security.rsa.RSASignature.engineVerify(RSASignature.java:174)
        ... 10 more

But the problems don't appear always, just only with a type of certificates used to sign.  I will explain better.
I have two certificates (stored into smartcard) and the first works fine; I create the p7s and next I validate correctly, but the second certificate allows me to create the p7s, file but when I validate it, it returns the SignatureException.  I thought the p7s file was wrong, but I tested it with others' applications, and it looks correct. Besides, this file is sent throws webservice and it returns that it is ok! 
And for more information, if the p7s file is created with different tools (.net and capicom) and the same certificate, then I can validate correctly.
I have looked for the solution, but nothing.  I have found the same exception in similar situations, but either the solution suggested doesn't work for me, or it doesn't appear.
Any advice to find the solution will be very appreciated.
","After more than two weeks, I have noticed what was the problem, although I didn't find the full solution.
First, I extracted the problem out of the PKCS7 file, and I reproduced the exception with the following source code:
import diz.firma.keyStore.SmartCard;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.Provider;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.Security;
import java.security.Signature;

public class TestFirma3 {
public static void main(String args[]) throws Exception {
    //Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
    SmartCard sm = new SmartCard();
    KeyStore ks = sm.loadKeyStore(""1234"");
    //KeyPair keyPair = generateKeyPair(999);


    byte[] data = ""original"".getBytes(""UTF-8"");
    //byte[] data = { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74 };
    //byte[] digitalSignature = signData(data, keyPair.getPrivate());
    byte[] digitalSignature = signData(data,
            (PrivateKey)ks.getKey(sm.getAlias(), null),ks.getProvider());

    boolean verified;

    //verified = verifySig(data, keyPair.getPublic(), digitalSignature);
    verified = verifySig(data, ks.getCertificate(sm.getAlias()).
            getPublicKey(),ks.getProvider(), digitalSignature);
    System.out.println(""verified:"" + verified) ;

    //keyPair = generateKeyPair(888);
    //verified = verifySig(data, keyPair.getPublic(), digitalSignature);
    //System.out.println(verified);

  }

  public static byte[] signData(byte[] data, PrivateKey key,Provider p) throws Exception {
    Signature signer = Signature.getInstance(""SHA1withRSA"",p);
    //Signature signer = Signature.getInstance(""SHA1withRSA"",Security.getProviders()[10]);

    signer.initSign(key);
    signer.update(data);
    return (signer.sign());
  }

  public static boolean verifySig(byte[] data, PublicKey key, Provider p, byte[] sig) throws Exception {
    Signature signer = Signature.getInstance(""SHA1withRSA"",p);
    //Signature signer = Signature.getInstance(""SHA1withRSA"");
    signer.initVerify(key);
    signer.update(data);

    boolean valido = false;
    try{
        valido = signer.verify(sig);
    }catch(Exception e){
        e.printStackTrace();
        valido = false;
    }
    return valido;

  }

  public static KeyPair generateKeyPair(long seed) throws Exception {
    Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
    KeyPairGenerator keyGenerator = KeyPairGenerator.getInstance(""DSA"");
    SecureRandom rng = SecureRandom.getInstance(""SHA1PRNG"", ""SUN"");
    rng.setSeed(seed);
    keyGenerator.initialize(1024, rng);

    return (keyGenerator.generateKeyPair());
  }
}

In this code, (extracted from an example in the net), I changed the generators key and took it from my card. I got the exception again, without using PKCS7 files.
Looking at all providers (with Security.getProviders() you can get all of them; they are defined in java.security file, but it can be added to or taken from in runtime), and I used everyone to sign and validate, I found out that:

If no one provider is selected when Signature is instantiated, it uses SunRsaSign by default.
My Signature is validated with 2 providers:
a) With SunMSCAPI provider, which uses Microsoft Crypt API.
b) With the provider created by smart card reader, in my case Siemens.
Reading another smart card that does not belong to Siemens, it is validated with SunRsaSign and SunJSSE.

At this moment, I find out the problem and a workarournd using SunMSCAPI to validate, but I have to validate into an IBM machine.  Siemens software provides an option to install into Unix, but I cannot get it to work. And using SunMSCAPI, I suppose it isn't available for IBM.
So, I have to find out a provider that validates correctly in IMB the Signature that SunRsaSign returns SignatureException.
","4744","<java><security><validation><x509certificate><pkcs#7>","0","1","2","2016-07-09 05:26:02","","0","","5827958","","2016-07-09 05:19:06","2011-03-02 12:02:11",""
"10837494","Openssl command line fails to verify detached smime signature created moments earlier","I'm using the command line interface of openssl 1.0.1b on OSX 10.6.
First I create a DSA key.
openssl dsaparam -noout -out privatekey.pem -genkey 1024

Next i create a self-signed certificate from that key.
openssl req -new -outform PEM -out certificate.pem -key privatekey.pem -keyform PEM -sha1 -x509 -days 1000

Next i use that certificate and key in order to create a detached smime signature of a file.
openssl smime -sign -in file.zip -out file.zip.signature -outform DER -inkey privatekey.pem -signer certificate.pem

Finally I immediately try to verify that same file/signature*
openssl smime -verify -in file.zip.signature -inform DER -content file.zip -noverify certificate.pem > /dev/null

But somehow I get a digest failure.
PKCS7 routines:PKCS7_signatureVerify:digest failure:pk7_doit.c:1097:
PKCS7 routines:PKCS7_verify:signature failure:pk7_smime.c:410

Nothing is changing the file, manual md5 hashes match before and after, yet somehow the signature digest is failing. Does anyone have any clue as to what i'm doing wrong?
Thanks.
`* Note that -noverify is used to tell openssl to not warn me about the certificate being self-signed
","I've figured out the issue. 
Because I didn't use the -binary flag openssl was transforming \n in the input file to \r\n
","4564","<openssl><signature><verify><pkcs#7><smime>","4","3","1","2012-06-02 15:12:21","","0","2","1428899","","2012-05-31 16:28:34","2012-05-31 16:21:55",""
"31118893","How to load PKCS7 (.p7b) file in java","I have a pkcs7 file, and I want to load it and extract its contents.
I tried these two methods:
byte[] bytes = Files.readAllBytes(Paths.get(""myfile.p7b""));
FileInputStream fi = new FileInputStream(file);

//Creating PKCS7 object
PKCS7 pkcs7Signature = new PKCS7(bytes);

or this
FileInputStream fis = new FileInputStream(new File(""myfile.p7b""));
PKCS7 pkcs7Signature = new PKCS7(fis);

but I got IOException: Sequence tag error
So how can I load this .p7b file ?
","Finally I did it with BouncyCastle library.
PKCS#7 is a complex format, also called CMS. Sun JCE has no direct support to PKCS#7.
This is the code that I used to extract my content:
// Loading the file first
   File f = new File(""myFile.p7b"");
   byte[] buffer = new byte[(int) f.length()];
   DataInputStream in = new DataInputStream(new FileInputStream(f));
   in.readFully(buffer);
   in.close();

   //Corresponding class of signed_data is CMSSignedData
   CMSSignedData signature = new CMSSignedData(buffer);
   Store cs = signature.getCertificates();
   SignerInformationStore signers = signature.getSignerInfos();
   Collection c = signers.getSigners();
   Iterator it = c.iterator();

   //the following array will contain the content of xml document
   byte[] data = null;

   while (it.hasNext()) {
        SignerInformation signer = (SignerInformation) it.next();
        Collection certCollection = cs.getMatches(signer.getSID());
        Iterator certIt = certCollection.iterator();
        X509CertificateHolder cert = (X509CertificateHolder) certIt.next();

        CMSProcessable sc = signature.getSignedContent();
        data = (byte[]) sc.getContent();
    }

If you want to verify the signature of this PKCS7 file against X509 certificate, you must add the following code to the while loop:
// ************************************************************* //
// ********************* Verify signature ********************** //
//get CA public key
// Create a X509 certificat
CertificateFactory certificatefactory = CertificateFactory.getInstance(""X.509"");

// Open the certificate file
FileInputStream fileinputstream = new FileInputStream(""myCA.cert"");

//get CA public key
PublicKey pk = certificatefactory.generateCertificate(fileinputstream).getPublicKey();

X509Certificate myCA = new JcaX509CertificateConverter().setProvider(""BC"").getCertificate(cert);

myCA.verify(pk);
System.out.println(""Verfication done successfully "");

","4426","<java><security><digital-signature><pkcs#7>","2","2","1","2015-07-15 09:22:08","","3","","","","","2015-06-29 14:54:42",""
"8144875","Create PKCS#7 detached signature","I've been googling how to do this (in Java) with very little success.
Creating the Signature object is pretty straightforward and so is getting the certificate chain, but how do I create a detached PKCS#7 object with that data?
","Try to use Bouncy Castle. Here is the sample of creating PKCS7 signatures with it.
","4322","<java><digital-signature><x509certificate><keystore><pkcs#7>","5","2","1","2013-10-26 23:05:20","8146264","6","","432152","","2011-11-16 15:01:32","2011-11-15 23:58:13",""
"19244860","Extracting individual .cer certificate from a .p7b file in java","I am new to Cryptography and so please excuse me if you think this is a basic question
I have a .p7b file which I need to read and extract the individual public certificates i.e  the .cer files and store it in the key store. I need not worry about persisting in the key store as there is already a service which takes in the .cer file as byte[] and saves that.
What i want to know is , how do i read the .p7b and extract the individual .cer file? I know that can be done via the openSSL commands, but i need to do the same in java. I need to also read the Issued By name as that will be used as a unique key to persist the certificate.
Thanks in advance
","You can get the certificates from a PKCS#7 object with BouncyCastle. Here is a quick code sample:
 public Collection<X59Certificate> getCertificates(String path) throws Exception
 {
     Security.addProvider(new BouncyCastleProvider());
     CMSSignedData sd = new CMSSignedData(new FileInputStream(path));
     X509Store store = sd.getCertificates(""Collection"", ""BC"");
     Collection<X509Certificate> certificates = store.getMatches(X509CertStoreSelector.getInstance(new X509CertSelector()));
     return certificates;
 }

Note that a PKCS#7 may contain more than one certificate. Most of the time it includes intermediate certification authority certificates required to build the certificate chain between the end-user certificate and the root CA.
","4215","<java><openssl><x509certificate><bouncycastle><pkcs#7>","3","2","2","2013-11-08 11:44:52","19858316","3","1","962536","","2013-11-08 11:44:52","2013-10-08 10:12:00",""
"19244860","Extracting individual .cer certificate from a .p7b file in java","I am new to Cryptography and so please excuse me if you think this is a basic question
I have a .p7b file which I need to read and extract the individual public certificates i.e  the .cer files and store it in the key store. I need not worry about persisting in the key store as there is already a service which takes in the .cer file as byte[] and saves that.
What i want to know is , how do i read the .p7b and extract the individual .cer file? I know that can be done via the openSSL commands, but i need to do the same in java. I need to also read the Issued By name as that will be used as a unique key to persist the certificate.
Thanks in advance
","I was successfully able to read the individual .X509 certificates from the p7b files. Here are the steps 

First step includes, getting a byte[] from the java.io.File. The steps include to   remove the -----BEGIN PKCS7----- and -----END PKCS7----- from the file, and decode the remaining base64 encoded String.
BufferedReader reader = new BufferedReader(new FileReader(file));
StringBuilder cerfile = new StringBuilder();
String line = null;
while(( line = reader.readLine())!=null){
  if(!line.contains(""PKCS7"")){
    cerfile.append(line);
  }
}
byte[] fileBytes = Base64.decode(cerfile.toString().getBytes());

The next step is to use the BouncyCastle api to parse the file
CMSSignedData  dataParser = new CMSSignedData(trustBundleByte);
ContentInfo contentInfo = dataParser.getContentInfo();
SignedData signedData = SignedData.getInstance(contentInfo.getContent());

CMSSignedData encapInfoBundle = new CMSSignedData(new CMSProcessableByteArray(signedData.getEncapContentInfo().getContent().getDERObject().getEncoded()),contentInfo);
SignedData encapMetaData = SignedData.getInstance(encapInfoBundle.getContentInfo().getContent());

CMSProcessableByteArray cin = new CMSProcessableByteArray(((ASN1OctetString)encapMetaData.getEncapContentInfo().getContent()).getOctets());
CertificateFactory ucf = CertificateFactory.getInstance(""X.509"");

CMSSignedData  unsignedParser = new CMSSignedData(cin.getInputStream());
ContentInfo unsginedEncapInfo = unsignedParser.getContentInfo();
SignedData metaData = SignedData.getInstance(unsginedEncapInfo.getContent());
Enumeration certificates = metaData.getCertificates().getObjects();

// Build certificate path

while (certificates.hasMoreElements()) {
   DERObject certObj = (DERObject) certificates.nextElement();
   InputStream bin = new ByteArrayInputStream(certObj.getDEREncoded());
   X509Certificate cert = (X509Certificate) ucf.generateCertificate(bin);
 X500Name x500name = new JcaX509CertificateHolder(cert).getSubject();
RDN cn = x500name.getRDNs(BCStyle.CN)[0];
}

The above steps are working fine, but i am sure there are other solutions with less lines of code to achieve this. I am using bcjdk16 jars.

","4215","<java><openssl><x509certificate><bouncycastle><pkcs#7>","3","2","2","2013-11-08 11:44:52","19858316","3","1","962536","","2013-11-08 11:44:52","2013-10-08 10:12:00",""
"3513162","Add Signing Time to PKCS7 Signed CMS?","I'm trying to add the signing time attribute to a file that I am signing using SignedCMS.
private byte[] signFile(byte[] fileContent, X509Certificate2 verificationCert)
{
   ContentInfo contentInfo = new ContentInfo(fileContent);

   SignedCms signedCMS = new SignedCms(contentInfo);

   CmsSigner cmsSigner = new CmsSigner(SubjectIdentifierType.IssuerAndSerialNumber, verificationCert);

   Oid signedDate = new Oid(""1.2.840.113549.1.9.5""); //oid for PKCS #9 signing time 

   signedDate.Value = DateTime.Now.ToString();

   CryptographicAttributeObject cryptoAtty = new CryptographicAttributeObject(signedDate);

   cmsSigner.SignedAttributes.Add(cryptoAtty);

   signedCMS.ComputeSignature(cmsSigner, false);

   byte[] encoded = signedCMS.Encode();

   return encoded;
}

Error thrown on Encode:
CryptographicException: The object identifier is poorly formatted. 

Any ideas on how to properly add the signing time? I think I may have to convert the signing time to an ASN.1 encoded object and add that to cryptoAtty's values. How would one convert the date/time to an ASN.1 Encoded object? 
","
Well that was easy.
cmsSigner.SignedAttributes.Add(new Pkcs9SigningTime());

","4163","<c#><security><content-management-system><signing><pkcs#7>","6","11","1","2012-07-03 16:24:58","3522814","0","2","104998","","2012-07-03 16:24:58","2010-08-18 14:31:23",""
"3753458","Opening PKCS 7 Certificate files","How can I open text files which seem to be PKCS #7 Certificates.  These were archived onto floppy discs in the late 90s and have now been burned onto a CD.  I am using windows 7 on my computer
","OpenSSL and its pkcs7 command may help you to decode your documents. Adapt the parameters to your own needs. 
openssl pkcs7 -in myfile.pem -print_certs -text

","4158","<pkcs#7>","1","1","1","2010-09-26 10:33:35","","1","","","","","2010-09-20 16:31:18",""
"9062830","In Ruby/Rails, how to decrypt a string encrypted and signed by PKCS7","In this RailsCast on PayPal it shows you how to encrypt a URL parameter before sending it to PayPal. 
PAYPAL_CERT_PEM = File.read(""#{Rails.root}/certs/paypal_cert.pem"")
APP_CERT_PEM = File.read(""#{Rails.root}/certs/app_cert.pem"")
APP_KEY_PEM = File.read(""#{Rails.root}/certs/app_key.pem"")
def encrypt_for_paypal(values)
    signed = OpenSSL::PKCS7::sign(OpenSSL::X509::Certificate.new(APP_CERT_PEM),        OpenSSL::PKey::RSA.new(APP_KEY_PEM, ''), values.map { |k, v| ""#{k}=#{v}"" }.join(""\n""), [], OpenSSL::PKCS7::BINARY)
    OpenSSL::PKCS7::encrypt([OpenSSL::X509::Certificate.new(PAYPAL_CERT_PEM)], signed.to_der, OpenSSL::Cipher::Cipher::new(""DES3""),        OpenSSL::PKCS7::BINARY).to_s.gsub(""\n"", """")
end

Suppose I was writing the code for PayPal's server. How would I decrypt this string? It appears to me that this code both public-key signs the string (to verify authenticity) and then encrypts the string (to provide privacy). What would the code be for doing the reverse, decrypting and verifying authenticity?
Thanks.
","Hi John here is an example of encryption / decryption using ruby openssl.
Note its using AES for the cypher as DES3 seemed to be dropped in my version of ruby openssl.
Calling gsub on the string to replace newlines seemed to break it so i have left it commented out.
Hope it helps you out.
require 'openssl'

PAYPAL_CERT_PEM = File.read(""paypal_cert.pem"")
@paypal_cert = OpenSSL::X509::Certificate.new(PAYPAL_CERT_PEM)

APP_CERT_PEM = File.read(""app_cert.pem"")
@app_cert = OpenSSL::X509::Certificate.new(APP_CERT_PEM)

APP_KEY_PEM = File.read(""app_key.pem"")
@app_key = OpenSSL::PKey::RSA.new(APP_KEY_PEM, '')

PAYPAL_KEY_PEM = File.read(""paypal_key.pem"")
@paypal_key = OpenSSL::PKey::RSA.new(PAYPAL_KEY_PEM, '')

CERT_STORE = OpenSSL::X509::Store.new
CERT_STORE.add_cert(@app_cert)

data = Hash.new
data['customer_id'] = '123456789'
data['customer_name'] = 'Mr Smith'

def encrypt_for_paypal(values)
data_name_values = values.map { |k, v| ""#{k}=#{v}"" }

signed_data = OpenSSL::PKCS7::sign(@app_cert, @app_key, data_name_values.join(""\n""), [], OpenSSL::PKCS7::BINARY)

cypher = OpenSSL::Cipher::new(""AES-128-CFB"")

encrypted_data = OpenSSL::PKCS7::encrypt([@paypal_cert], signed_data.to_der, cypher, OpenSSL::PKCS7::BINARY)

encrypted_data.to_s #.gsub(""\n"", """")
end

def decrypt_by_paypal(encrypted_data)
received_encrypted_data = OpenSSL::PKCS7.new(encrypted_data)

received_signed_data = received_encrypted_data.decrypt(@paypal_key, @paypal_cert)

p7_received_signed_data = OpenSSL::PKCS7.new(received_signed_data)

p7_received_signed_data.verify(nil, CERT_STORE, nil, OpenSSL::PKCS7::NOVERIFY)

p7_received_signed_data.data
end

encrypted_txt = encrypt_for_paypal data
puts decrypt_by_paypal encrypted_txt

","4074","<ruby-on-rails><encryption><pkcs#7>","1","1","1","2012-02-05 11:56:02","","2","","","","","2012-01-30 11:02:10",""
"12966460","REST APIs and message level security","I need to implement message level security in a REST API and have some concerns and questions. I found the answer here: 
Message Level Security in Rest Web services
only partially helpful. 
We currently support standard SSL transport security and several authentication methods including:

Basic http auth (required by some network equipment services that
talk to our API's)
HMAC with pre-shared secrete key in both SHA1 and    SHA256 flavors.
Client identity certs sent @ the TLS level. 
SAML 2.0

Why we need message level security because:

Customer industries include health care, financial and government, among others, and they often frown on SSL only.
Need to guarantee end to end security. Through reverse proxies, SSL accelerators, etc... 
Some data passed through the services will include very sensitive data. 
Need to have a good answer for customers that insist that SOAP's WS-* security standards are  ""Enterprise strength"" web services and REST APIs are not.

My initial thought is to use an PKCS#7 envelope, as an option, if client applications understand how to process enveloped responses. 
I want client applications to tell the API that they want a secured response or tell the API that the message they are POSTing or PUTing is secured.
My real question is, should this be communicated through a media type? E.g.:

Content-Type: application/vnd.resourcetype1+json+pkcs7
Content-Type: txt/csv+pkcs7

i don't want to loose information on the media type that is enveloped. 
It gets complicated as in some cases the signature is enough. Others require encryption as well. The term ""pkcs7"" is vague as to how the envelope is constructed. 
I want the client and server to tell each other the type of content they are sending and the type of content they understand through standard HTTP headers.
","Of course, it is up to you how to define your API, there is no right or wrong way, however S/MIME is a very well understood message format, well suited to the internet. As is PGP/MIME if your prefer a de-centralised trust hierarchy. Since these are well understood formats, it will allow clients to adopt existing libraries to process these message bodies.
If you are adament you do not want to use a multi-part response, you may want to take a look at the Content-Encoding header, besides just Content-Type. You could then specify the signature/encryption format as a custom encoding type.
There are significant benefits to using HTTP as an application protocol and not just a transport protocol, but you seem to understand that already. Be sure you set and parse the Accept* headers correctly, including q-values. Beware of things such as the default of q=1 meaning equal (not descending) preference, and q=0.
","4024","<web-services><security><rest><pkcs#7>","10","1","1","2012-12-05 13:51:19","13724762","2","1","-1","","2017-05-23 12:31:25","2012-10-19 02:17:21",""
"3265351","BouncyCastle create PKCS 7 Encrypted File? C#","I am trying to use BouncyCastle to encrypt a file using the PKCS 7 file standard. Here is the code I have which outputs a p7m file. When I go to decrypt the file (using Entrust) I am prompted for my key store password, so it knows the file was encrypted for me using AES 128, but it cannot decrypt the body of the file. Something has to be going wrong on the encrypt.
byte[] fileContent = readFile(filename);

FileStream outStream = null;
Stream cryptoStream = null;
BinaryWriter binWriter = null;

try
{
    CmsEnvelopedDataStreamGenerator dataGenerator = new CmsEnvelopedDataStreamGenerator();
    dataGenerator.AddKeyTransRecipient(cert); //cert is the user's x509cert that i am encrypting for
    outStream = new FileStream(filename + "".p7m"", FileMode.Create);
    cryptoStream = dataGenerator.Open(outStream, CmsEnvelopedGenerator.Aes128Cbc);
    binWriter = new BinaryWriter(cryptoStream);

    binWriter.Write(fileContent);
}

And when i try and decrypt the file using BouncyCastle I get this error when i pass the file contents to a CMSEnveloped Object: 
IOException converting stream to byte array: Attempted to read past the end of the stream.

Any ideas whats going on here?
","I used the EnvelopedCMS class to accomplish this.
http://msdn.microsoft.com/en-us/library/bb924575(VS.90).aspx
","3969","<c#><bouncycastle><encryption-asymmetric><pkcs#7>","1","0","1","2019-08-26 21:53:50","3514901","0","","","","","2010-07-16 13:34:31",""
"25388148","Sign file with .der-Certificate and create signature (pkcs#7)","The thing I would like to do is:

Sign a zip-file with openssl using a certificate and create a signature-file (pkcs#7)

What I have/I did so far:

I installed openssl and opened the console
I created a rsa key (openssl genrsa -out key.pem 2048)
I created a request (openssl req -batch -sha256 -new -key key.pem
-out request.pem –subj '/C=../ST=../L=../O=../OU=../CN=..')
I sent this request to someone who did any magic with the request
and sent me an file named 'certificate.der'. When I open this file there are some information like oscp-url and things like this.

So far, so good. Next my naive approach is to sign the zip-file with this certificate and tell openssl to create the pkcs#7-signature so I can verify it using the ocsp-responder.
But I have really not the foggiest notion whether the approach is correct and how to sign the zip-file. :-( If I have errors in reasoning please also let me know. :-)
Can someone please help me?
","You can use openssl to do that. Use the command
openssl.exe smime -sign -binary -in file.zip -signer certificate.der -inkey key.pem -outform DER -out file.p7b

You can verify the signature using openssl with this command
openssl.exe smime -verify -binary -inform DER -in file.p7b -content file.zip -noverify > nul

For more information read openssl manual here
","3942","<openssl><certificate><sign><pkcs#7><der>","2","3","1","2014-08-19 22:47:51","25391933","0","","608639","","2014-08-19 22:47:51","2014-08-19 16:08:56",""
"18072356","Implementing Digital Signing in a Java Applet","I am trying to sign some data (a POST form) in a web based application using a Java Applet. The user's x509 certificate would be in a cryptoken/smart card. The signature needs to be in attached pkcs#7 format.
I am using this tutorial/code as a starting point in building the applet - http://www.developer.com/java/other/article.php/3587361/Java-Applet-for-Signing-with-a-Smart-Card.htm
The biggest problem for me here seems to be the fact that the applet asks the user for location of the pkcs#11 implementation library. This is a big no-no for me because my typical user is not going to know the location of his pkcs#11 library.
From Oracle's Java documentation - http://docs.oracle.com/javase/6/docs/technotes/guides/security/p11guide.html it seems that Java doesn't come with it's own implementation.
Is there a way to do this signing without asking the user for this location. I am OK with a solution which only works with just IE and Firefox on Windows.
With a few smartcards/cryptokens I have used, I have noticed that the moment I insert it, I can see the certificate in IE & Firefox's personal tab of certificates. This probably means that the crypto token registers all the certificates it contains with OS when you insert the card and deregisters it when you remove it. So it must probably be exposing some interface to the OS/Browser when it does it - can this not be used for signing?
","We did the thing you are trying to do now (distributed signing with client-side modules) within Distributed Cryptography add-on for our SecureBlackox product and we offer ActiveX control for IE and Java applet for other browsers. 
Unfortunately PKCS#11 DLLs are not registered anywhere so you can't avoid asking the user about location of this DLL. 
Most hardware devices support both PKCS#11 and CryptoAPI interfaces. Within CryptoAPI interface the CSP DLL exposes hardware-based certificates to CryptoAPI engine and thus to applications. In this case you can use Java classes that work with Windows CryptoAPI.
PKCS#11 is an interface, implemented by hardware vendors, so Java can't implement it's own - JVM is not a hardware and doesn't contain certificates (even if it did, that would not solve your problem). I need to notice, that Firefox has built-in PKCS#11 driver via which Firefox accesses its own certificates.  This was done for uniform support for software- and hardware-stored certificates. 
","3917","<java><digital-signature><jce><pkcs#7><pkcs#11>","5","3","2","2019-06-22 06:24:06","","0","1","922712","","2013-08-06 06:46:27","2013-08-06 05:25:17",""
"18072356","Implementing Digital Signing in a Java Applet","I am trying to sign some data (a POST form) in a web based application using a Java Applet. The user's x509 certificate would be in a cryptoken/smart card. The signature needs to be in attached pkcs#7 format.
I am using this tutorial/code as a starting point in building the applet - http://www.developer.com/java/other/article.php/3587361/Java-Applet-for-Signing-with-a-Smart-Card.htm
The biggest problem for me here seems to be the fact that the applet asks the user for location of the pkcs#11 implementation library. This is a big no-no for me because my typical user is not going to know the location of his pkcs#11 library.
From Oracle's Java documentation - http://docs.oracle.com/javase/6/docs/technotes/guides/security/p11guide.html it seems that Java doesn't come with it's own implementation.
Is there a way to do this signing without asking the user for this location. I am OK with a solution which only works with just IE and Firefox on Windows.
With a few smartcards/cryptokens I have used, I have noticed that the moment I insert it, I can see the certificate in IE & Firefox's personal tab of certificates. This probably means that the crypto token registers all the certificates it contains with OS when you insert the card and deregisters it when you remove it. So it must probably be exposing some interface to the OS/Browser when it does it - can this not be used for signing?
","Smartcard or Token driver (PKCS#11) library has an additional layer called CSP (Crypto Service Provider) which acts like bridge between the device driver and OS Crypto services.  Token driver, once installed also adds this CSP and thus plunging the token or smartcard makes Certificates in it available (which acts as handle to private key stored securely on the crypto device).
For signing from Browser as client, applets are no more supported by modern browsers. You may use Browser Extension for the purposes which has a native application running behind the browser to access Certificate Store and provide signing function through JavaScript in the browser. Signer Digital Browser Extension offers various type of signing form browser using JavaScript. Refer to 3 different SO answer links on the page Digitally Signing From Browser for various operations to be achieved using the Web Browser Extension. 
","3917","<java><digital-signature><jce><pkcs#7><pkcs#11>","5","0","2","2019-06-22 06:24:06","","0","1","922712","","2013-08-06 06:46:27","2013-08-06 05:25:17",""
"17607604","Digitally Signing Data in a web app","I have a web application where some data (not file) needs to be digitally signed using a PKI Private Key. The PKI Certificate & Private Key will be in a USB Cryptotoken which registers the certificates with the browser when inserted into the USB slot. This eases the pain of doing authentication using the certificate because I do that by trigerring ssl-renegotiation in my Application.
However, using a certificate for digital signing seems to be a bit more tricky. I can think of several ways to do this

CAPICOM - http://en.wikipedia.org/wiki/CAPICOM
This will work for browsers which support CAPICOM (eg. IE). However it seems that Microsoft has discontinued this.
Mozilla Crypto Object - https://developer.mozilla.org/en-US/docs/JavaScript_crypto
WebCrypto API - this is not yet supported by most browsers. 
A custom Java Applet or some opensource freely available JavaApplet control.
Any other options?

I am trying to figure out what is the common, convenient and secure way of doing this in a web-application.
Note:

I am OK with just supporting the popular browsers.
I am signing a small piece of data - say 100-200 bytes rather than a file.
I would prefer PKCS#7 signatures.

","[Disclosure: I work for CoSign.]
The problem that you're running into is a common one with old-style PKI systems that store the  signer's private key at the boundary (eg in a smart card, a token, etc). This system was designed when the PC (and apps running on it) was the focus. But that isn't true this century. Now either the browser or the mobile is the focus.
You have tension between the nature of web apps (they're either running on the host or are sandboxed JavaScript on the browser) versus the idea of local hardware that ""protects"" the private key.
Breaking out of the browser's sandbox
One design direction is to try to break out of the browser's sandbox to access the local hardware private key store. You've listed a number of options. An additional one is the Chrome USB access library. But all of these solutions are:

Limited to specific browsers
Hard (and expensive) to install
Hard (and expensive) to maintain
High level of administrative overhead to help the users with their questions about keeping the system working.

Re your question 5 ""Any other options?""
Yes: Centralized signing
A better option (IMHO) is to sign centrally. This way the keys are kept in a centralized FIPS-secure server. Meanwhile, the signers just use a webapp to authorize the signing. The signers don't need to hold the private key since it is stored in the secure server.
To authenticate the signers, you can use whatever level of security your app needs: user name/password; One Time Password; two factor authentication via SMS; etc.
The CoSign Signature API and CoSign Signature Web Agent are designed for this. Centralized PKI signing is also available from other vendors.
Added in response to comment


From the 2nd part of your answer - If the certificate is stored in the server and retrieved by authenticating the user by using uname/pwd or with 2FA, then why do digital signing at all? i.e. what advantage does it offer over just authenticating the transaction with uname/pwd or 2FA?


A: In the centralized design, the private key does not leave the central server. Rather, the document or data to be signed is sent to the server, is signed, and then the signed doc or data (e.g. XML) is returned to the webapp. 
Re: why do this? Because a digitally signed document or data set (eg XML) can be verified to guarantee that the document was not changed since signed and provides a trust chain to provide assurance of the signer's identity. In contrast, passwords, even when strengthed by 2FA etc, only provide the app with signer identity assurance, not third parties.
PKI digital signing enables third parties to assure themselves of the signer's identity through the verification process. And the strength of the assurance can be set, as needed, by choosing different CAs.
","3748","<security><web-applications><digital-signature><pki><pkcs#7>","8","1","2","2019-10-08 08:46:11","","2","1","922712","","2013-07-12 12:38:55","2013-07-12 04:46:21",""
"17607604","Digitally Signing Data in a web app","I have a web application where some data (not file) needs to be digitally signed using a PKI Private Key. The PKI Certificate & Private Key will be in a USB Cryptotoken which registers the certificates with the browser when inserted into the USB slot. This eases the pain of doing authentication using the certificate because I do that by trigerring ssl-renegotiation in my Application.
However, using a certificate for digital signing seems to be a bit more tricky. I can think of several ways to do this

CAPICOM - http://en.wikipedia.org/wiki/CAPICOM
This will work for browsers which support CAPICOM (eg. IE). However it seems that Microsoft has discontinued this.
Mozilla Crypto Object - https://developer.mozilla.org/en-US/docs/JavaScript_crypto
WebCrypto API - this is not yet supported by most browsers. 
A custom Java Applet or some opensource freely available JavaApplet control.
Any other options?

I am trying to figure out what is the common, convenient and secure way of doing this in a web-application.
Note:

I am OK with just supporting the popular browsers.
I am signing a small piece of data - say 100-200 bytes rather than a file.
I would prefer PKCS#7 signatures.

","Modern browsers does not support Java Applets. The most recommended approach today, as I see, is use of Browser Extension to access Certificate Store From the Browser. Browser accesses Certificate store through the host application running locally.
Refer to this SO Answer
Driver for USB tokens or smartcard has CSP (Crypto Service Provider), which makes Certificates (not private keys) in token available in Certificate Store, once the token is plugged in. On user selecting certificate for signing, the CSP uses hardware device connected at client to get content signed by sending it to crypto device.
","3748","<security><web-applications><digital-signature><pki><pkcs#7>","8","0","2","2019-10-08 08:46:11","","2","1","922712","","2013-07-12 12:38:55","2013-07-12 04:46:21",""
"20659268","Message Signing using X509 certificate","I am signing message using digital certificate in a asp.net web service using below code.
Signing is working fine expect signedMessage.ComputeSignature line is taking up to 30 to 40 seconds because of this i am face timeout exception. The same code when i am running under windows forms application is producing result in fraction of second. Any clue or help.
   public static string Encrypt(string fullMessage, string certificateName, bool deAttch)
    {
        X509Certificate2 signer = GetCertificate(certificateName);  
        byte[] contentBytes = Encoding.ASCII.GetBytes(fullMessage);  
        Oid contentOid = new Oid(""1.2.840.113549.1.7.1"", ""PKCS 7 Data"");
        SignedCms signedMessage = new SignedCms(new ContentInfo(contentOid, contentBytes), deAttch);

        signedMessage.ComputeSignature(new CmsSigner(signer));

        byte[] signedBytes = signedMessage.Encode();
        return Convert.ToBase64String(signedBytes).Trim();
        }

","I am not sure whether this should be a answer (I don't know what impact it cause, but i will find out). Just setting a property
cert.IncludeOption = X509IncludeOption.EndCertOnly;    

of
CmsSigner cert = new CmsSigner(signer);

where previously i was creating object using constructor and passing directly to method. Now it is working fine and not taking that much time.
   public static string Encrypt(string fullMessage, string certificateName, bool deAttch)
    {
        X509Certificate2 signer = GetCertificate(certificateName);  
        byte[] contentBytes = Encoding.ASCII.GetBytes(fullMessage);  
        Oid contentOid = new Oid(""1.2.840.113549.1.7.1"", ""PKCS 7 Data"");
        SignedCms signedMessage = new SignedCms(new ContentInfo(contentOid, contentBytes), deAttch);
        CmsSigner cert = new CmsSigner(signer);
        cert.IncludeOption = X509IncludeOption.EndCertOnly;            
        signedMessage.ComputeSignature(cert);
        byte[] signedBytes = signedMessage.Encode();
        return Convert.ToBase64String(signedBytes).Trim();
        }


        private static X509Certificate2 GetCertificate(string certificateName)
    {
        X509Store store = new X509Store(StoreName.My, StoreLocation.LocalMachine);
        store.Open(OpenFlags.OpenExistingOnly | OpenFlags.ReadOnly);
        X509Certificate2 certificate = store.Certificates.Cast<X509Certificate2>().Where(cert => cert.Subject.IndexOf(certificateName) >= 0).FirstOrDefault();
        if (certificate == null)
            throw new Exception(""Certificate "" + certificateName + "" not found."");

        return certificate;
    }

","3717","<c#><x509><pkcs#7>","0","3","1","2015-07-28 13:26:48","20727241","0","2","1232227","","2015-07-28 13:26:48","2013-12-18 13:16:10",""
"19410688","PKCS#7 Signature Verification","I am trying to implement signature verification for PDFs. It is a big topic so I am taking it one step at a time, first I am trying to actually return a positive in the case of a PDF I have signed myself, using all the default values with the current Acrobat — that should be SHA256 for the digest, and a PKCS7 detached signature. So, I crack out openssl, and by reading the byte range given in the PDF and calling the SHA256_* functions I have a hash to compare against. So now I need to read the certificate data etc, and use the PKCS7_* functions. This one looks to be the one I want:
int PKCS7_verify(PKCS7 *p7, STACK_OF(X509) *certs, X509_STORE *store, BIO *indata, BIO *out, int flags);

as found in the documentation. Except said documentation doesn't tell me how to construct any of these things. Ok, so I think the BIO *indata can be made with some of the functions in here and the array of certs using these (despite having not worked out the precise details), but what about the PKCS7 *p7, or the STACK_OF(x) called for. I cannot find any documented way of initialising these structures. There are some pkcs7_ctrl functions in the pkcs7.h header:-
long PKCS7_ctrl(PKCS7 *p7, int cmd, long larg, char *parg);

int PKCS7_set_type(PKCS7 *p7, int type);
int PKCS7_set0_type_other(PKCS7 *p7, int type, ASN1_TYPE *other);
int PKCS7_set_content(PKCS7 *p7, PKCS7 *p7_data);
int PKCS7_SIGNER_INFO_set(PKCS7_SIGNER_INFO *p7i, X509 *x509, EVP_PKEY *pkey, const EVP_MD *dgst);
int PKCS7_SIGNER_INFO_sign(PKCS7_SIGNER_INFO *si);
int PKCS7_add_signer(PKCS7 *p7, PKCS7_SIGNER_INFO *p7i);
int PKCS7_add_certificate(PKCS7 *p7, X509 *x509);
int PKCS7_add_crl(PKCS7 *p7, X509_CRL *x509);
int PKCS7_content_new(PKCS7 *p7, int nid);
int PKCS7_dataVerify(X509_STORE *cert_store, X509_STORE_CTX *ctx,
    BIO *bio, PKCS7 *p7, PKCS7_SIGNER_INFO *si); 
int PKCS7_signatureVerify(BIO *bio, PKCS7 *p7, PKCS7_SIGNER_INFO *si, X509 *x509);

BIO *PKCS7_dataInit(PKCS7 *p7, BIO *bio);
int PKCS7_dataFinal(PKCS7 *p7, BIO *bio);
BIO *PKCS7_dataDecode(PKCS7 *p7, EVP_PKEY *pkey, BIO *in_bio, X509 *pcert);

but without some guidelines this doesn't seem like a forest it would be efficacious to start blindly poking around in. 
Have I missed something obvious? How do I go about calling this function with the data values I have parsed from the PDF?
","Ok, found all this out the (very) hard way. This is how you do it, so that others might learn more easily.
Lets say we have the signature char* sig of length int sig_length, and verification data char* data, int data_length. (There are some subtleties here for PDF signatures but these are well documented in the PDF spec.)
OpenSSL_add_all_algorithms();
OpenSSL_add_all_digests();
EVP_add_digest(EVP_md5());
EVP_add_digest(EVP_sha1());
EVP_add_digest(EVP_sha256());

BIO* sig_BIO = BIO_new_mem_buf(sig, sig_length)
PKCS7* sig_pkcs7 = d2i_PKCS7_bio(sig_BIO, NULL);

BIO* data_BIO = BIO_new_mem_buf(data, data_length)
BIO* data_pkcs7_BIO = PKCS7_dataInit(sig_pkcs7, data_BIO);

// Goto this place in the BIO. Why? No idea!
char unneeded[1024*4];
while (BIO_read(dataPKCS7_BIO, unneeded, sizeof(buffer)) > 0);

int result;
X509_STORE *certificateStore = X509_STORE_new();
X509_STORE_CTX certificateContext;
STACK_OF(PKCS7_SIGNER_INFO) *signerStack = PKCS7_get_signer_info(sig_pkcs7);
int numSignerInfo = sk_PKCS7_SIGNER_INFO_num(signerStack);
for (int i=0; i<numSignerInfo; ++i) {
    PKCS7_SIGNER_INFO *signerInfo = sk_PKCS7_SIGNER_INFO_value(signerStack, i);
    result = PKCS7_dataVerify(certificateStore, &certificateContext, data_pkcs7_BIO, sig_pkcs7, signerInfo);
}

X509_STORE_CTX_cleanup(&certificateContext);
BIO_free(sig_BIO);
BIO_free(data_BIO);
BIO_free(data_pkcs7_BIO);
PKCS7_free(sig_pkcs7);
X509_STORE_free(certificateStore);

The function that does the work is actually PKCS7_dataVerify, and you don't need to run any digests yourself.
But wait, if you try this, it won't work! Why? Because the verification does both trust and integrity. In addition to this, you will also need to either establish trust by adding certs to the store, which is also complicated and undocumented. If you want fine grain results for you'll want to set a callback on the verification via the certificate store like this:
X509_VERIFY_PARAM_set_flags(certificateStore->param, X509_V_FLAG_CB_ISSUER_CHECK);
X509_STORE_set_verify_cb_func(certificateStore, verificationCallback);

where
static int verificationCallback(int ok, X509_STORE_CTX *ctx) {
    switch (ctx->error)
    {
        case X509_V_ERR_INVALID_PURPOSE: //...
        case X509_V_ERR_CERT_HAS_EXPIRED: //...
        case X509_V_ERR_KEYUSAGE_NO_CERTSIGN: //... 
        case X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT: //...
        // ... etc
        default: break;
    }
    return ok;
}

You can set the error to ok and tell it to verify, for example if you want to ignore expired certs:
static int verificationCallback(int ok, X509_STORE_CTX *ctx) {
    switch (ctx->error)
    {
        case X509_V_ERR_CERT_HAS_EXPIRED: 
            X509_STORE_CTX_set_error(ctx, X509_V_OK);
            ok = 1;
            break;
    }
    return ok;
}

","3702","<c><security><openssl><digital-signature><pkcs#7>","9","8","1","2013-10-25 11:54:24","19588319","0","2","1324720","","2013-10-17 10:38:19","2013-10-16 18:11:02",""
"4600149","PEM Conversion (PKCS7) to DER - AKA Base64 C++ Problems","I've just finished up writing some OpenSSL/PKCS7 digital signature code and now have a working PEM encoded PKCS7 file. So after little battle, I need to convert that PEM to DER format. This is proving tougher than I hoped.
There are some convenience methods in OpenSSL such as ""PEM_write_bio_PKCS7_stream"" to write your PKCS7 object. But after some extensive googling and browsing some header files, I can't seem to find anything to take a PKCS7 object and write it to anything (BIO, FILE, char*) in DER format.
So feeling defeated there, I turned to parsing out the header & footer in the PEM file and Base64 decoding the contents. As a check, I did this with Java & BouncyCastle and got exactly what I want.
Here's my code for that. With almost every Base64 decoder I try I turn something like this...
MIIHmwYJKoZIhvcNAQcCoIIHjDCCB4gCAQExCzAJBgUrDgMCGgUAMIIBrQYJKoZI
hvcNAQc ... Lots More stuff
... +8L5ad45D/7ZGJWafaSw==

into...
0\202\233   *\367\367
\240\202\2140\202\21010 +

Here's that code...
    string PKCS7String(starting_point);

    string PEM_PKCS7_HEADER(""-----BEGIN PKCS7-----\n"");
    string PEM_PKCS7_FOOTER(""\n-----END PKCS7-----"");

    string::size_type pos = 0;
    while ( (pos = PKCS7String.find(PEM_PKCS7_HEADER, pos)) != string::npos ) {
        PKCS7String.replace( pos, PEM_PKCS7_HEADER.length(), """" );
        pos++;
    }

    pos = 0;
    while ( (pos = PKCS7String.find(PEM_PKCS7_FOOTER, pos)) != string::npos ) {
        PKCS7String.replace( pos, PEM_PKCS7_FOOTER.length(), """" );
        pos++;
    }
    //Take your pick of decoders, they all do the same thing. Here's just the most recent
    auto_ptr< uint8_t > decoded = decode(PKCS7String);
    uint8_t* array = decoded.get();
    cout << array << endl;

Any thoughts?
","A PEM file is just a Base64 encoded version of the DER file with the -----BEGIN PKCS7----- & -----END PKCS7----- header and footer lines.
So not exactly sure what you expect to see after Base64 decoding it...
As a test just:  

package a certificate in PKCS#7 PEM format: $ openssl crl2pkcs7 -nocrl -out outfile.pem.p7b -certfile server.crt -outform pem
package the same certificate in PKCS#7 DER format: $ openssl crl2pkcs7 -nocrl -out outfile.der.p7b -certfile server.crt -outform der
Base64 decode the body of the PEM file (outfile.pem.p7b) with the decoder of your choice & compare the binary output with the DER file (outfile.der.p7b)

Now, I'm afraid this may be what you asked for but not what you wanted...
","3663","<c++><openssl><base64><pem><pkcs#7>","0","3","2","2011-01-05 04:05:12","4600732","0","","","","","2011-01-05 01:45:00",""
"4600149","PEM Conversion (PKCS7) to DER - AKA Base64 C++ Problems","I've just finished up writing some OpenSSL/PKCS7 digital signature code and now have a working PEM encoded PKCS7 file. So after little battle, I need to convert that PEM to DER format. This is proving tougher than I hoped.
There are some convenience methods in OpenSSL such as ""PEM_write_bio_PKCS7_stream"" to write your PKCS7 object. But after some extensive googling and browsing some header files, I can't seem to find anything to take a PKCS7 object and write it to anything (BIO, FILE, char*) in DER format.
So feeling defeated there, I turned to parsing out the header & footer in the PEM file and Base64 decoding the contents. As a check, I did this with Java & BouncyCastle and got exactly what I want.
Here's my code for that. With almost every Base64 decoder I try I turn something like this...
MIIHmwYJKoZIhvcNAQcCoIIHjDCCB4gCAQExCzAJBgUrDgMCGgUAMIIBrQYJKoZI
hvcNAQc ... Lots More stuff
... +8L5ad45D/7ZGJWafaSw==

into...
0\202\233   *\367\367
\240\202\2140\202\21010 +

Here's that code...
    string PKCS7String(starting_point);

    string PEM_PKCS7_HEADER(""-----BEGIN PKCS7-----\n"");
    string PEM_PKCS7_FOOTER(""\n-----END PKCS7-----"");

    string::size_type pos = 0;
    while ( (pos = PKCS7String.find(PEM_PKCS7_HEADER, pos)) != string::npos ) {
        PKCS7String.replace( pos, PEM_PKCS7_HEADER.length(), """" );
        pos++;
    }

    pos = 0;
    while ( (pos = PKCS7String.find(PEM_PKCS7_FOOTER, pos)) != string::npos ) {
        PKCS7String.replace( pos, PEM_PKCS7_FOOTER.length(), """" );
        pos++;
    }
    //Take your pick of decoders, they all do the same thing. Here's just the most recent
    auto_ptr< uint8_t > decoded = decode(PKCS7String);
    uint8_t* array = decoded.get();
    cout << array << endl;

Any thoughts?
","i2d_PKCS7_fp() and i2d_PKCS7_bio() from <openssl/pkcs7.h> will write out a PKCS7 structure in DER format to a file stream or BIO respectively.
","3663","<c++><openssl><base64><pem><pkcs#7>","0","0","2","2011-01-05 04:05:12","4600732","0","","","","","2011-01-05 01:45:00",""
"25162605","Signature Verification (formate is PKCS#7)","I have following in the XML
1.  tag : Signature in this is in the PKCS#7 format, This is an international standard. The signature includes the Signer's public key certificate as part of the PKCS#7 bag, along with the encrypted hash of data. 
2. tag: Original Data  is in this tag. 
I don't understand how to verify the signature. Client said that ""Any API /  tool that can read the PKCS#7 Signature can give you the Public Key."" 
The examples which I saw require public key separately to verify the signature. Is it even possible that required public key float with signature and some tool will automatically identify it and verify the data?
If yes, I am not able to find any java API which will verify this signature.
","As a prologue, first rule of cryptography : do not do it yourself, use proven tools in their documented use cases to perform the operations.
So I'd first check if you XML document is indeed signed using a standard (I don't know of an XML signature format that is based on PKCS7, but then, I sure don't know everything). If so, I'd find a library that supports this specific format. 
XML Signature is standardized along the XMLD Sig umbrella, formalized here : http://www.w3.org/TR/xmldsig-core/. The Oracle JDK ships with a reference implementation (that is derived from an Apache implementation of the standard), using the XMLSignatureFactory base class.
PKCS7 is not used as part of XML DSig, though, so you may have to ""do it yourself"" (a small enough part of if) in the end, unless there is a protocol that I do not know of.
That said, indeed PKCS7 (superseeded in some cases by CMS) is a standard cryptographic format that allows the signature of arbitrary content. The structure is flexible enough to hold notably : the content to be signed (it can be embedded, or not), the signature and associated algorithm identifiers, plus X509 material linked to the signature (such as Certificates and public keys, certificate revocation lists...).
The Java language does not provide a generic implementation of PKCS7 processing to my knowledge, although the Oracle JDK does under the sun.security.pkcs package. 
A popular, common library for PKCS7 processing in Java is BouncyCastle. I'm more familiar with it, so this is what I'll talk about.  
You can find a usage sample here :
http://i-proving.com/2007/09/21/pkcs7-signatures-using-bouncy-castle/
Bouncy Castle has a fairly good example package when you download the source, and also Javadoc. So you can check it out for up-to-date usage of the API. Check for example : 
https://www.bouncycastle.org/docs/pkixdocs1.5on/org/bouncycastle/cms/CMSSignedData.html, reproduced here for easier reference
CMSSignedData           s = new CMSSignedData(inputStream);
Store                   certStore = s.getCertificates(); // This is where you access embedded certificates
SignerInformationStore  signers = s.getSignerInfos();
Collection              c = signers.getSigners();
Iterator                it = c.iterator();

while (it.hasNext())
{
  SignerInformation   signer = (SignerInformation)it.next();
  Collection          certCollection = certStore.getMatches(signer.getSID());

  Iterator              certIt = certCollection.iterator();
  X509CertificateHolder cert = (X509CertificateHolder)certIt.next();

  if (signer.verify(new JcaSimpleSignerInfoVerifierBuilder().setProvider(""BC"").build(cert)))
  {
      verified++;
  } 
}

Remember though, that checking the validity of the signature is one step, the second is to verify that the signing certificates are indeed trustworthy. An example is available here :
Verifying PKCS#7 certificates in Java
","3645","<java><pkcs#7>","0","2","1","2014-08-06 15:24:36","25164172","0","","","","","2014-08-06 14:09:28",""
"41579325","Golang: How do I decrypt with DES, CBC, and PKCS7?","Currently trying to figure out why my decryption method is not working. I used DES, CBC, and PKCS7Padding to encrypt my string. My current code outputs panic: crypto/cipher: input not full blocks during decryption. 
","Buddy it's work completely fine. 
package main

    import (
        ""bytes""
        ""crypto/des""
        ""crypto/cipher""
        ""fmt""
    )

    func DesEncryption(key, iv, plainText []byte) ([]byte, error) {

        block, err := des.NewCipher(key)

        if err != nil {
            return nil, err
        }

        blockSize := block.BlockSize()
        origData := PKCS5Padding(plainText, blockSize)
        blockMode := cipher.NewCBCEncrypter(block, iv)
        cryted := make([]byte, len(origData))
        blockMode.CryptBlocks(cryted, origData)
        return cryted, nil
    }

    func DesDecryption(key, iv, cipherText []byte) ([]byte, error) {

        block, err := des.NewCipher(key)

        if err != nil {
            return nil, err
        }

        blockMode := cipher.NewCBCDecrypter(block, iv)
        origData := make([]byte, len(cipherText))
        blockMode.CryptBlocks(origData, cipherText)
        origData = PKCS5UnPadding(origData)
        return origData, nil
    }

    func PKCS5Padding(src []byte, blockSize int) []byte {
        padding := blockSize - len(src)%blockSize
        padtext := bytes.Repeat([]byte{byte(padding)}, padding)
        return append(src, padtext...)
    }

    func PKCS5UnPadding(src []byte) []byte {
        length := len(src)
        unpadding := int(src[length-1])
        return src[:(length - unpadding)]
    }


    func main() {
        originalText := ""sysys""
        fmt.Println(originalText)
        mytext := []byte(originalText)

        key := []byte{0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC }
        iv := []byte{0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC, 0xBC }


        cryptoText,_ := DesEncryption(key, iv, mytext)
        fmt.Println(string(cryptoText))
        decryptedText,_ := DesDecryption(key, iv, cryptoText)
        fmt.Println(string(decryptedText))

    }

","3628","<go><base64><des><pkcs#7><cbc-mode>","1","3","1","2017-01-11 16:13:46","41595640","5","1","4021006","","2017-01-11 15:38:50","2017-01-10 22:10:39",""
"13379846","Extract userCertificate from PKCS7 envelop in python","Ok, I am trying to verify data from PKCS7 envelop using Python.
I have the working code in Java: http://nyal.developpez.com/tutoriel/java/bouncycastle/#L4.2
What I want is first get the certificate from the envelop.
I am able to open it with that command:
openssl pkcs7 -in pkcs7 -print_certs -text

Then I want to verify that the data is ok.
I tried this:
import base64
from M2Crypto import SMIME, X509, BIO

raw_sig = """"""base64 PKCS7 envelop""""""
msg = ""challenge message to verify""

sm_obj = SMIME.SMIME()
x509 = X509.load_cert('/etc/ssl/certs/ca-certificates.crt') # public key cert used by the remote
# client when signing the message
sk = X509.X509_Stack()
sk.push(x509)
sm_obj.set_x509_stack(sk)

st = X509.X509_Store()
st.load_info('/etc/ssl/certs/ca-certificates.crt') # Public cert for the CA which signed
# the above certificate
sm_obj.set_x509_store(st)

# re-wrap signature so that it fits base64 standards
cooked_sig = '\n'.join(raw_sig[pos:pos+76] for pos in xrange(0, len(raw_sig), 76))

# now, wrap the signature in a PKCS7 block
sig = """"""
-----BEGIN PKCS7-----
%s
-----END PKCS7-----
"""""" % cooked_sig

# print sig

# and load it into an SMIME p7 object through the BIO I/O buffer:
buf = BIO.MemoryBuffer(sig)
p7 = SMIME.load_pkcs7_bio(buf)

# do the same for the message text
data_bio = BIO.MemoryBuffer(msg)

cert = sm_obj.verify(p7, data_bio)

I think one of the /etc/ssl/certs/ca-certificates.crt should be the userCertificate.
After having the certificate I want to check that it is still valid (using validatity date) and verify it against the CRL and the CPS for revocation.
I hope you can help me.
","So I was almost there:
import base64
from M2Crypto import SMIME, X509, BIO

raw_sig = """"""base64 PKCS7 envelop""""""
msg = ""challenge message to verify""

sm_obj = SMIME.SMIME()
x509 = X509.load_cert('ISSUER.crt') # public key cert used by the remote
                                             # client when signing the message
sk = X509.X509_Stack()
sk.push(x509)
sm_obj.set_x509_stack(sk)

st = X509.X509_Store()
st.load_info('ROOT.crt') # Public cert for the CA which signed
                                    # the above certificate
sm_obj.set_x509_store(st)

# re-wrap signature so that it fits base64 standards
cooked_sig = '\n'.join(raw_sig[pos:pos+76] for pos in xrange(0, len(raw_sig), 76))

# now, wrap the signature in a PKCS7 block
sig = """"""
-----BEGIN PKCS7-----
%s
-----END PKCS7-----
"""""" % cooked_sig

# print sig

# and load it into an SMIME p7 object through the BIO I/O buffer:
buf = BIO.MemoryBuffer(sig)
p7 = SMIME.load_pkcs7_bio(buf)

signers = p7.get0_signers(sk)
certificat = signers[0]

Then you might also be interested in CRL and OCSP validation:
from os.path import basename
import re
from tempfile import NamedTemporaryFile

try:
    from subprocess import check_output, CalledProcessError, STDOUT
except ImportError:  # check_output new in 2.7, so use a backport for <=2.6
    from subprocess32 import check_output, CalledProcessError, STDOUT

class OpenSSLError(Exception):
    pass

def info_extension_cert(cert):
    """"""
    This function take a certificate and return the extensions in dict.

    @type cert : M2Crypto.X509
    @param cert : Certificate
    """"""
    certificateExtensions = {}

    for index in range(cert.get_ext_count()):
        ext = cert.get_ext_at(index)
        certificateExtensions[ext.get_name()] = ext.get_value()
    return certificateExtensions


def get_cert_url_ocsp(cert):
    """"""
    Get the OCSP url of a certificate

    @type cert : M2Crypto.X509
    @parm cert : Certificat

    @rtype : string
    @return : The OSCP url
    """"""

    infos = [x.strip() for x in info_extension_cert(cert)[""authorityInfoAccess""].split('\n')]
    ocsp_url = None
    for info in infos:
        if re.match(r""^OCSP - URI:"", info):
            ocsp_url = info.replace(""OCSP - URI:"","""")
            break
    return ocsp_url.strip()


def is_revoked(cert, cert_parent):
    """"""
    Check if the certificate has been revoked.

    @type cert : M2Crypto.X509
    @param cert : The certificate

    @type cert_parent : string
    @param cert_parent : Issuer certificate file path

    @rtype : boolean
    @return : True if revoked or False
    """"""
    ocsp_url = get_cert_url_ocsp(cert)
    if re.match(r""^http"", ocsp_url) is None:
        return False

    data = {'cert_parent': cert_parent,
            'ocsp_url': ocsp_url,
            'serial': cert.get_serial_number()}

    cmd = ""openssl ocsp -issuer %(cert_parent)s -CAfile %(cert_parent)s -url %(ocsp_url)s -serial %(serial)s"" % data
    print cmd
    try:
        output = check_output(cmd, shell=True, stderr=STDOUT).lower()
    except CalledProcessError, e:
        msg = u""[OpenSSL] Error while checking ocsp %s: %s. Output: %r"" % (
                    cmd, e, e.output)
        raise OpenSSLError(msg)
    return not ('response verify ok' in output and '%s: good' % data['serial'] in output)


def is_revoked_crl(cert, cert_parent_with_crl):
    """"""
    Check if the certificate as been revoked with the crl.

    @type cert : M2Crypto.X509
    @param cert : The certificate

    @type cert_parent : string
    @param cert_parent : Issuer certificate file path

    @rtype : boolean
    @return : True if revoked or False
    """"""
    tmp_file = NamedTemporaryFile(prefix='cert')
    cert.save(tmp_file.name)
    data = {'cert': tmp_file.name,
            'cert_parent_with_crl': cert_parent_with_crl}
    cmd = ""openssl verify -crl_check -CAfile %(cert_parent_with_crl)s %(cert)s"" % data
    print cmd
    try:
        output = check_output(cmd, shell=True, stderr=STDOUT).lower()
    except CalledProcessError, e:
        msg = u""[OpenSSL] Error while checking ocsp %s: %s. Output: %r"" % (
                    cmd, e, e.output)
        raise OpenSSLError(msg)
    print output
    return '%s: ok' % data['cert'] not in output


def get_cert_url_crl(cert):
    """"""
    Return the crl url from the certificate

    @type cert : M2Crypto.X509
    @parm cert : Certificate

    @rtype : string
    @return : CRL url
    """"""

    infos = [x.strip() for x in info_extension_cert(cert)[""crlDistributionPoints""].split('\n')]
    crl_url = None
    for info in infos:
        print info
        if re.match(r""^URI:"", info):
            crl_url = info.replace(""URI:"","""")
            break
    return crl_url.strip()

cert_parent is the file with ROOT.crt and ISSUER.crt concatenates together.
cert_parent_crl is the file with ROOT.crt, ISSUER.crt and CRL concatenates together.
To concat the CRL with other certificate I use:
rm FILE.crl
wget http://URL/FILE.crl
cat ROOT_ISSUER.crt > ROOT_ISSUER_CRL.crt
echo ""-----BEGIN X509 CRL-----"" >> ROOT_ISSUER_CRL.crt
openssl enc -base64 -in FILE.crl >> ROOT_ISSUER_CRL.crt
echo ""-----END X509 CRL-----"" >> ROOT_ISSUER_CRL.crt

","3624","<python><x509><m2crypto><pkcs#7>","4","4","2","2013-07-06 07:58:46","13419260","0","1","","","","2012-11-14 13:35:54",""
"13379846","Extract userCertificate from PKCS7 envelop in python","Ok, I am trying to verify data from PKCS7 envelop using Python.
I have the working code in Java: http://nyal.developpez.com/tutoriel/java/bouncycastle/#L4.2
What I want is first get the certificate from the envelop.
I am able to open it with that command:
openssl pkcs7 -in pkcs7 -print_certs -text

Then I want to verify that the data is ok.
I tried this:
import base64
from M2Crypto import SMIME, X509, BIO

raw_sig = """"""base64 PKCS7 envelop""""""
msg = ""challenge message to verify""

sm_obj = SMIME.SMIME()
x509 = X509.load_cert('/etc/ssl/certs/ca-certificates.crt') # public key cert used by the remote
# client when signing the message
sk = X509.X509_Stack()
sk.push(x509)
sm_obj.set_x509_stack(sk)

st = X509.X509_Store()
st.load_info('/etc/ssl/certs/ca-certificates.crt') # Public cert for the CA which signed
# the above certificate
sm_obj.set_x509_store(st)

# re-wrap signature so that it fits base64 standards
cooked_sig = '\n'.join(raw_sig[pos:pos+76] for pos in xrange(0, len(raw_sig), 76))

# now, wrap the signature in a PKCS7 block
sig = """"""
-----BEGIN PKCS7-----
%s
-----END PKCS7-----
"""""" % cooked_sig

# print sig

# and load it into an SMIME p7 object through the BIO I/O buffer:
buf = BIO.MemoryBuffer(sig)
p7 = SMIME.load_pkcs7_bio(buf)

# do the same for the message text
data_bio = BIO.MemoryBuffer(msg)

cert = sm_obj.verify(p7, data_bio)

I think one of the /etc/ssl/certs/ca-certificates.crt should be the userCertificate.
After having the certificate I want to check that it is still valid (using validatity date) and verify it against the CRL and the CPS for revocation.
I hope you can help me.
","Try also https://github.com/erny/pyx509. This needs pyasn1 & pyasn1-modules. And it's python only:
./pkcs7_parse <pkcs7 signature in DER format>

","3624","<python><x509><m2crypto><pkcs#7>","4","2","2","2013-07-06 07:58:46","13419260","0","1","","","","2012-11-14 13:35:54",""
"17261951","java.security.NoSuchAlgorithmException: no such algorithm: SHA1WITHRSA for provider BC","I try verifying PKCS#7 Signature by this following code:
public static void verifypkcs7(String content, byte[] signedBytes) throws OperatorCreationException, CMSException, IOException, CertificateException, NoSuchAlgorithmException, NoSuchProviderException, CertStoreException, NoSuchStoreException
{
    Security.addProvider(new BouncyCastleProvider());

    CMSProcessableByteArray cmsByteArray = new CMSProcessableByteArray(content.getBytes(""UTF-8""));
    CMSSignedData sp = new CMSSignedData(cmsByteArray, signedBytes);

    Store                   certStore = sp.getCertificates();
    SignerInformationStore  signers = sp.getSignerInfos();

    Collection<?>              c = signers.getSigners();
    Iterator<?>                it = c.iterator();
    boolean verified = false;
    while (it.hasNext())
    {
        SignerInformation   signer = (SignerInformation)it.next();
        Collection<?>          certCollection = certStore.getMatches(signer.getSID());

        Iterator<?>        certIt = certCollection.iterator();
        X509CertificateHolder cert = (X509CertificateHolder)certIt.next();
        verified = signer.verify(new JcaSimpleSignerInfoVerifierBuilder().setProvider(""BC"").build(cert));
    }
    System.out.println(verified);
    CMSProcessable signedContent = sp.getSignedContent() ;
    byte[] originalContent  = (byte[]) signedContent.getContent();
    System.out.println(new String(originalContent));
}

and my problem is:
Exception in thread ""main"" org.bouncycastle.cms.CMSException: can't create digest calculator: exception on setup: java.security.NoSuchAlgorithmException: no such algorithm: SHA1WITHRSA for provider BC
    at org.bouncycastle.cms.SignerInformation.doVerify(Unknown Source)
    at org.bouncycastle.cms.SignerInformation.verify(Unknown Source)
    at PKCS7Signer.verifypkcs7_4(PKCS7Signer.java:281)
    at PKCS7Signer.main(PKCS7Signer.java:170)
Caused by: org.bouncycastle.operator.OperatorCreationException: exception on setup: java.security.NoSuchAlgorithmException: no such algorithm: SHA1WITHRSA for provider BC
    at org.bouncycastle.operator.jcajce.JcaDigestCalculatorProviderBuilder$1.get(Unknown Source)
    at org.bouncycastle.cms.SignerInformationVerifier.getDigestCalculator(Unknown Source)
    ... 4 more
Caused by: java.security.NoSuchAlgorithmException: no such algorithm: SHA1WITHRSA for provider BC
    at sun.security.jca.GetInstance.getService(Unknown Source)
    at sun.security.jca.GetInstance.getInstance(Unknown Source)
    at java.security.Security.getImpl(Unknown Source)
    at java.security.MessageDigest.getInstance(Unknown Source)
    at org.bouncycastle.jcajce.NamedJcaJceHelper.createDigest(Unknown Source)
    at org.bouncycastle.operator.jcajce.OperatorHelper.createDigest(Unknown Source)
    ... 6 more

The Exception caused at:
verified = signer.verify(new JcaSimpleSignerInfoVerifierBuilder().setProvider(""BC"").build(cert));

I have tried googling for solution but nothing helped. Can you help me, please?
Data I use for testing:
Signature: MIIHFgYJKoZIhvcNAQcCoIIHBzCCBwMCAQExDzANBgkqhkiG9w0BAQUFADAvBgkqhkiG9w0BBwGgIgQgNURERTg3OUNERUIwNjIzRTAxOEQwQjY3QTIyN0U2N0KgggWeMIIFmjCCA4KgAwIBAgIQVAbJaGFPCH5uamvYoUjDLzANBgkqhkiG9w0BAQUFADBaMQswCQYDVQQGEwJWTjEkMCIGA1UEChMbQ0sgTWVkaWEgYW5kIFRlY2hub2xvZ3kgSlNDMRYwFAYDVQQLEw1DS0NBIE9yaWdTaWduMQ0wCwYDVQQDEwRDS0NBMB4XDTEzMDUzMDA5MjYwNVoXDTE0MDUzMDA5MjYwNVowgcAxCzAJBgNVBAYTAlZOMRIwEAYDVQQIDAlIw6AgTuG7mWkxFTATBgNVBAcMDEPhuqd1IEdp4bqleTFBMD8GA1UECgw4Q8OUTkcgVFkgQ+G7lCBQSOG6pk4gQ8OUTkcgTkdI4buGIFbDgCBUUlVZ4buATiBUSMOUTkcgQ0sxHDAaBgNVBAsME1BIw5JORyBL4bu4IFRIVeG6rFQxJTAjBgNVBAMMHMSQ4bq2TkcgTkfhu4xDIFRV4bqkTiAtIFRFU1QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMoad+6Rjjcp1OEYPRq0Qas7cKe8+Sp1rvfoicap82BLVTcTqrOlMta/n3XLDQq0gQW30ffecNxSvUyFiJCXuuuP7G0CeQGV7GsWSkQoyBFsSiSsILMkCYbIAiObjwr66dxPHB/O1Oj9LVFxo39raXzEixl/xvufgO1xo60DUVONAgMBAAGjggF3MIIBczBmBggrBgEFBQcBAQRaMFgwLgYIKwYBBQUHMAKGImh0dHA6Ly9jZXJ0LmNrY2Eudm4vY2VydHMvY2tjYS5jZXIwJgYIKwYBBQUHMAGGGmh0dHA6Ly9vY3NwLmNrY2Eudm4vc3RhdHVzMB0GA1UdDgQWBBTXjYoyauIsE3keHaGt9lnasv3fiTAMBgNVHRMBAf8EAjAAMB8GA1UdIwQYMBaAFA8K92CW2aRVFNba/CaAkgNTtugUMDwGA1UdIAQ1MDMwMQYNKwYBBAGB7QMBBgEDBTAgMB4GCCsGAQUFBwIBFhJodHRwOi8vY2tjYS52bi9ycGEwMQYDVR0fBCowKDAmoCSgIoYgaHR0cDovL2NybC5ja2NhLnZuL2NybHMvY2tjYS5jcmwwDgYDVR0PAQH/BAQDAgTwMB8GA1UdJQQYMBYGCCsGAQUFBwMEBgorBgEEAYI3CgMMMBkGA1UdEQQSMBCBDnR1YW5ka0Bja2NhLnZuMA0GCSqGSIb3DQEBBQUAA4ICAQBbsJIh1PhKkyPd5BkpD5/EjgQODKsw2m9ZV3WSdM2HOVh1Pgv24FcJDGp93w6a2FWOx66m8JJXKRGVkAkizWvh/PkYrKOt2hpMetOm1uSDd2y3VcfTZyPcQ3T6qUJUje3DzA6ySWFbmTMv9lV3+dW7jvBHEXzagFVY5ZmzajFmsJ2oRp1DD3Ry/3ZsaP6j+w6FoIXB9LhNbmI8FNQ3A1Q3t/zxJovtsOHbS5cPzFjGLv7BJKWV0BG0eFvoxCb/tJkY5yOBP5P5bD5ht59D4AyEzKS8NKTYLnnIADQ6/zvpBzSoWzYTEKT8xl3o3LYBZQJL7D1U1yofhL3oYefc7fmwAuAZe5hjkO23N844gjz6ru1hBgzf2Zu8w37GZ+jUDPfisQhuGbkFSsNPFjz+CjKrrFO0H4o3hWF4l/t9nXVsM7PwNRo8YYxZmCM+nHTch1ITpzMh+z16KAQ2Ucncgwap+sTwMGnVYFhSsCJCTkYQY9J7OQrElNI7oHKEO1jQsSjghGTkpOvuoIcPimlJGuOUPQhJ3HZzfSPxaOznqpXwkHpTkNhUyzet1QZjdaQ4jNBPTO6pqHnDKXEtJKJsABnCy5tzdBch2Shw68NtFjC+siiLuzNxnz8G/4rWq4edQqpWz0RbMYnWoeuet/pbWF8yYX+zXL6LKECk7U6Nf3Y1UjGCARgwggEUAgEBMG4wWjELMAkGA1UEBhMCVk4xJDAiBgNVBAoTG0NLIE1lZGlhIGFuZCBUZWNobm9sb2d5IEpTQzEWMBQGA1UECxMNQ0tDQSBPcmlnU2lnbjENMAsGA1UEAxMEQ0tDQQIQVAbJaGFPCH5uamvYoUjDLzANBgkqhkiG9w0BAQUFADANBgkqhkiG9w0BAQEFAASBgB0Liyncn9qSKQIjoDXvLYf+vLSZv2XyiXbQI2jNaCMEvKpRToJWh3aPPQNJTJ7aam5ngue2IzcPeA52GqYqDhVfioGc1Y6MaKxlLTBSp/Jqg8LLwnj8BorOwqzuBAJIzyMfnPhD+DwMPCdbIL5Tpi5zwW7RlKcakuVkhONZhY2g
Content: 5DDE879CDEB0623E018D0B67A227E67B

Unbase64 before use as the second parameter
","Try this, but you should switch for older bouncy castle version. I used 1.45
        byte[] signedData = ...;
        byte[] originalData = ...;
        CMSSignedDataParser parser = new CMSSignedDataParser(new CMSTypedStream(
                new ByteArrayInputStream(originalData)), signedData);
        parser.getSignedContent().drain();
        CertStore certs = parser.getCertificatesAndCRLs(""Collection"", ""BC"");
        SignerInformationStore signers = parser.getSignerInfos();
        Collection<?> c = signers.getSigners();
        Iterator<?> it = c.iterator();
        while (it.hasNext()) {
            SignerInformation signer = (SignerInformation) it.next();
            Collection<?> certCollection = certs.getCertificates(signer.getSID());

            Iterator<?> certIt = certCollection.iterator();
            X509Certificate cert = (X509Certificate) certIt.next();

            System.out.println(""verify returns: "" + signer.verify(cert, ""BC""));
        }

","3599","<bouncycastle><signature><pkcs#7>","1","1","1","2014-01-24 07:13:46","","0","","","","","2013-06-23 14:53:02",""
"10300673","generate and encode PKCS7 message in Java","I have seen many similar question asked here before, but I haven't found a proper answer yet.
I got signature which was generated and encoded by C# SignedCms .
My goal is generating the same signature in Java.
I managed to create a similar signature which has the same length and most of its data. 
But there are not the same bits in position from 120 to 133 bits and last approximately 250 bits.
According to this Anatomy of PKCS#7 signed message. I have wrong signature and content blocks.
I have tried bouncycastle but I didn't manage to generate correct signature. 
I'd like to use sun.* classes to generate and encode PKCS#7 message.
        X509Certificate x509 = siginingCert;
        PrivateKey priv = privateKeyFromPKCS12KeyStore;
        byte[] data = sha1HashOfDocument

        String digestAlgorithm = ""MD5"";
        String signingAlgorithm = ""SHA1withRSA"";

        AlgorithmId[] digestAlgorithmIds = new AlgorithmId[]{AlgorithmId.get(digestAlgorithm)};

        Signature sigSigner = Signature.getInstance(signingAlgorithm);
        sigSigner.initSign(priv);
        sigSigner.update(data);
        byte[] signedAttributes = sigSigner.sign();

        ContentInfo contentInfo = new ContentInfo(
                sun.security.pkcs.ContentInfo.DATA_OID,
                new DerValue(DerValue.tag_OctetString, data));

        X509Certificate[] certificates = {x509};

        BigInteger serial = x509.getSerialNumber();
        String issuerName = x509.getIssuerDN().getName();
        AlgorithmId dAlgId =  AlgorithmId.getAlgorithmId(digestAlgorithm);

        SignerInfo si = new SignerInfo(
                new X500Name(issuerName), serial, dAlgId, null,
                new AlgorithmId(AlgorithmId.RSAEncryption_oid),
                signedAttributes, null);

        SignerInfo[] signerInfos = {si};
        PKCS7 p7 = new PKCS7(digestAlgorithmIds, contentInfo, certificates, signerInfos);
        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        p7.encodeSignedData(bytes);

I got stuck on this issue and I have no idea what I missed.
Any help is appreciated. Thanks a lot.
","byte[] signedData = signature.sign();

    SignerInfo si = new SignerInfo(
            new X500Name(issuerName), serial, dAlgId, null,
            new AlgorithmId(AlgorithmId.RSAEncryption_oid),
            signedAttributes,signedData  );

","3599","<java><digital-signature><pkcs#7>","0","0","1","2014-01-20 11:24:12","","1","","","","","2012-04-24 15:05:10",""
"12796545","How can we Convert PKCS#1 to PKCS #7 if I have the Certificate?","I was developing a PDF signing tool. For this I will get a signed sha256 data of PDF in PKCS#1 format and a certificate from a device, I need to use these two to embed inside the PDF. Most of the PDF reader only support PKCS#7 signature.
Is there any way to convert a PKCS#1 signature to PKCS#7 signature  (using certificate file) ?
I knew that PKCS#7 = Certificate + Optional raw data + Signature in PKCS#1 format
","Your question somewhat oversimplifies the situation.
Concerning PKCS#7 <-> PKCS#1:
Yes, a PKCS#7 signature container contains SignerInfo objects which respectively essentially contain a PKCS#1 style signature and some attributes. BUT this PKCS#1 style signature generally is NOT merely signing the document data but instead is signing a structure of so called ""signed attributes"". One of these is a document hash, others can be the signing time, a link to the signer certificate, and other information; these extra information is required in many use cases. Only the most primitively built SignerInfo structures sign the document data directly.
In general, therefore, if you simply take a PKCS#1 signature of some data and wrap it in a PKCS#7 container, that signature container won't be accepted.
For details see RFC 3852.
Concerning integrated PDF signatures:
Your description of your implementation-to-be is somewhat vague. You seem to think that the document hash to sign is a hash of the original PDF. In case of integrated PDF signatures this is wrong: In order to create an integrated PDF signature, you first extend the PDF by some data which envelop a placeholder for the PKCS#7 signature container (recommended by the specification) or the PKCS#1 signature to integrate. Then you need to hash this extended PDF except the placeholder. (By the current PDF specification you could hash less than that but this won't be accepted by the current Adobe Acrobat/Reader and shouldn't be accepted by any serious verifier).
For details see ISO 32000-1:2008 as published by Adobe
Depending on the legal requirements you may also have to take into account PDF Advanced Electronic Signatures (PAdES) as specified by ETSI, cf. ETSI standard for EU-compliant electronic signatures. These will become part of ISO 32000-2, aka PDF 2.0.
So, are you still sure your use case allows for those very simple PKCS#7 signatures you have in mind, and are your PKCS#1 source signatures created for the right document? In that case building those containers is easily done by looking at RFC 3852.
Anyways, you should have a look at the whitepaper Digital Signatures for PDF documents by Bruno Lowagie (iText Software).
","3521","<pdf><rsa><digital-signature><pkcs#7>","1","6","2","2018-10-11 02:12:40","12816472","0","","1816580","","2015-06-09 19:20:07","2012-10-09 09:10:53",""
"12796545","How can we Convert PKCS#1 to PKCS #7 if I have the Certificate?","I was developing a PDF signing tool. For this I will get a signed sha256 data of PDF in PKCS#1 format and a certificate from a device, I need to use these two to embed inside the PDF. Most of the PDF reader only support PKCS#7 signature.
Is there any way to convert a PKCS#1 signature to PKCS#7 signature  (using certificate file) ?
I knew that PKCS#7 = Certificate + Optional raw data + Signature in PKCS#1 format
","Looking at RFC 3852 > 5.4.  Message Digest Calculation Process
It is possible to simply convert PKCS#1 to PKCS#7 as long as there are not signed attributes in it. If there are then you are stuck as the PKCS#1 coverts ONLY the hash of the content and PKCS#7 with signed attributes required to construct an intermediary structure and hash of that structure is being signed.
","3521","<pdf><rsa><digital-signature><pkcs#7>","1","1","2","2018-10-11 02:12:40","12816472","0","","1816580","","2015-06-09 19:20:07","2012-10-09 09:10:53",""
"3496493","Should X509 certificate have nonRepudiation bit set to check PKCS7 signature?","X509 certificate has set of keyUsage bits. Two of them are
digitalSignature
nonRepudiation (recent editions of X.509 have renamed this bit to contentCommitment).
I read X509 RFC (http://tools.ietf.org/html/rfc5280) and it talks about general usage of these bit.
And I read PKCS7 RFC (http://tools.ietf.org/html/rfc2315) and it talks about PKCS7 structure and so on and doesn't specify which bits needs to be set.
Is there any RFC or other specification which identifies whether one or both of them should be set? 
Regards,
Victor
","A PKCS#7 file generally contains a chain of certificates.  That is, a Root CA certificate, any intermediate CA certificates that apply, and then the endpoint certificate (SSL, e-mail, etc.)  A PKCS#7 is typically used to bundle these up into a single file.  It's useful, in that you can import the entire chain at once into a keystore or other relying application.
As to the key usage bits, those are set depending on the needs and purpose of a particular certificate.  For example, a Root CA certificate would typically have both digital signature and non-repudiation set.  For an SSL certificate, you may find key encipherment and digital signature.  There's really no correlation between key usage and PKCS#7 files, unless you're talking about the CA certificates contained in the PKCS#7 file.
","3484","<certificate><x509><pki><pkcs#7>","0","3","2","2011-06-24 07:23:31","3515262","0","","5000","","2011-06-24 07:23:31","2010-08-16 19:17:35",""
"3496493","Should X509 certificate have nonRepudiation bit set to check PKCS7 signature?","X509 certificate has set of keyUsage bits. Two of them are
digitalSignature
nonRepudiation (recent editions of X.509 have renamed this bit to contentCommitment).
I read X509 RFC (http://tools.ietf.org/html/rfc5280) and it talks about general usage of these bit.
And I read PKCS7 RFC (http://tools.ietf.org/html/rfc2315) and it talks about PKCS7 structure and so on and doesn't specify which bits needs to be set.
Is there any RFC or other specification which identifies whether one or both of them should be set? 
Regards,
Victor
","BTW, this bit violates the separation of concerns in its design. Non-repudiation is a legal issues negotiated on the business level. Using the bit at the certificate/signing level is irrelevant. See e.g. http://www-personal.umich.edu/~lsiden/tutorials/signed-applet/ShockingTruth.html
","3484","<certificate><x509><pki><pkcs#7>","0","1","2","2011-06-24 07:23:31","3515262","0","","5000","","2011-06-24 07:23:31","2010-08-16 19:17:35",""
"3576066","C# PKCS signatures","Im devloping a system that needs to sign files. I already have a function that receive the byte[] of data to sign and the X509 Certificate and computes the signature using System.Security.Cryptography.Pkcs namespace. Its important to note that we need the signature to be dettached, so for verification we use the file, the dettached signature and the certificate.
The thing is that this function returns a byte[] as signature. Right now for serializing it I am using Base64 encoding, but I saw that the standard is to use .p7s files. 
So, how do I generate a .p7s file from the byte[] of the dettached signature?
Another question, is there a way to add a timestamp on the signature and then to retrieve it?
Thanks!
Juan
","p7s is a detached PKCS#7 signature itself. It can be (optionally) base64-encoded and that's all, there's no other formatting that needs to be applied.
Yes, you can timestamp PKCS#7 signature. You need to read RFC 3161 and implement it yourself. You can use PKI components of our SecureBlackbox product. Our components let you sign and timestamp data using PKCS#7 and CMS (extension and descendant of PKCS#7). I am not aware of free timestamping clients for PKCS#7, though some might exist. 
","3419","<c#><digital-signature><pkcs#7>","0","0","2","2014-02-27 18:54:49","","0","","178382","","2010-08-26 14:26:03","2010-08-26 14:23:38",""
"3576066","C# PKCS signatures","Im devloping a system that needs to sign files. I already have a function that receive the byte[] of data to sign and the X509 Certificate and computes the signature using System.Security.Cryptography.Pkcs namespace. Its important to note that we need the signature to be dettached, so for verification we use the file, the dettached signature and the certificate.
The thing is that this function returns a byte[] as signature. Right now for serializing it I am using Base64 encoding, but I saw that the standard is to use .p7s files. 
So, how do I generate a .p7s file from the byte[] of the dettached signature?
Another question, is there a way to add a timestamp on the signature and then to retrieve it?
Thanks!
Juan
","Now it possible using X509Certificate2 class
public static byte[] Sign(byte[] data, X509Certificate2 certificate)
{
    if(data == null)
        throw new ArgumentNullException(""data"");
    if(certificate == null)
        throw new ArgumentNullException(""certificate"");

    // setup the data to sign
    ContentInfo content = new ContentInfo(data);
    SignedCms signedCms = new SignedCms(content, false);
    CmsSigner signer = new CmsSigner(SubjectIdentifierType.IssuerAndSerialNumber, certificate);

    // create the signature
    signedCms.ComputeSignature(signer);
    return signedCms.Encode();
}

","3419","<c#><digital-signature><pkcs#7>","0","0","2","2014-02-27 18:54:49","","0","","178382","","2010-08-26 14:26:03","2010-08-26 14:23:38",""
"18225897","API secured by PKCS#7 cryptographic message","I am currently trying to call an API that requires me to put XML data in a PKCS#7 format.
This data is posted to the API end point.
The response also comes in a form of a PKCS#7 cryptographic messages (MIME-type is application/pkcs7-mime).
Some Notes they provide: A cryptographic message doesn't contain any certification chains. Data compression is not used. Data encryption is not used. A cryptographic message is in the OpenSSL PEM format.  
I have been supplied two certificates. One I created the request for and have the private key, the other supplied to me by the service provider.
I have managed to successfully install these certificates, and can communicate with the service.
I am seemingly sending data to this API service successfully.
Now I'm trying to make sense of the response I'm receiving from this API.
This response looks like this
-----BEGIN PKCS7-----
WISGCSqGSIb3DQEHSqCSWISCSQExCzSJBgUrDgWCGgUSWISGCSqGSIb3DQEHSSCS
AfsdFAD3433423ASfdsdfdAfsdFAD3433423ASfdsdfdAfsdFAD3433423ASfdsd
WISGCSqGSIb3DQEHSqCSWISCSQExCzSJBgUrDgWCGgUSWISGCSqGSIb3DQEHSSCS
AfsdFAD3433423ASfdsdfdAfsdFAD3433423ASfdsdfdAfsdFAD3433423ASfdsd
WISGCSqGSIb3DQEHSqCSWISCSQExCzSJBgUrDgWCGgUSWISGCSqGSIb3DQEHSSCS
AfsdFAD3433423ASfdsdfdAfsdFAD3433423ASfdsdfdAfsdFAD3433423ASfdsd
WISGCSqGSIb3DQEHSqCSWISCSQExCzSJBgUrDgWCGgUSWISGCSqGSIb3DQEHSSCS
AfsdFAD3433423ASfdsdfdAfsdFAD3433423ASfdsdfdAfsdFAD3433423ASfdsd
WISGCSqGSIb3DQEHSqCSWISCSQExCzSJBgUrDgWCGgUSWISGCSqGSIb3DQEHSSCS
AfsdFAD3433423ASfdsdfdAfsdFAD3433423ASfdsdfdAfsdFAD3433423ASfdsd
WISGCSqGSIb3DQEHSqCSWISCSQExCzSJBgUrDgWCGgUSWISGCSqGSIb3DQEHSSCS
AfsdFAD3433423ASfdsdfdAfsdFAD3433423ASfdsdfdAfsdFAD3433423ASfdsd
WISGCSqGSIb3DQEHSqCSWISCSQExCzSJBgUrDgWCGgUSWISGCSqGSIb3DQEHSSCS
AfsdFAD3433423ASfdsdfdAfsdFAD3433423ASfdsdfdAfsdFAD3433423ASfdsd
WISGCSqGSIb3DQEHSqCSWISCSQExCzSJBgUrDgWCGgUSWISGCSqGSIb3DQEHSSCS
AfsdFAD3433423ASfdsdfdAfsdFAD3433423ASfdsdfdAfsdFAD3433423ASfdsd
-----END PKCS7-----

(I jumbled up the contents on the off chance there's anything sensitive in there)
With this response i need to

Verify the digital signature to ensure that response was sent by the provider
Get an Xml formatted message from this response

I have been primarily using the Bouncy Castle library and the MS SignedCms Class
In summary, I am getting absolutely nowhere.
Please can someone guide me on what to do here as I've been at this for about 5 days and am going nowhere fast.  
Here is some of what I'm doing so far:
Make the request
Using the HttpWebRequest and HttpWebResponse i am posting data to the service using my supplied certificate
var store = new X509Store(StoreLocation.LocalMachine);
store.Open(OpenFlags.ReadOnly | OpenFlags.OpenExistingOnly);
X509Certificate2 cert = store.Certificates.Find(X509FindType.FindByThumbprint, ""ACLKJCLKJCLKJCLKJCLKJCLKJCLKJCLKJCLKJCLK"", false)[0];

HttpWebRequest request = null;
var uri = new Uri(endPointUri);
request = (HttpWebRequest) WebRequest.Create(uri);
request.Method = ""POST"";
request.ContentType = ""application/pkcs7-mime"";
request.ContentLength = requestString.Length;
request.ClientCertificates.Add(cert);

using (Stream writeStream = request.GetRequestStream())
{
    var encoding = new UTF8Encoding();
    byte[] bytes = encoding.GetBytes(requestString);
    writeStream.Write(bytes, 0, bytes.Length);
}
string result = null;
using (var response = (HttpWebResponse) request.GetResponse())
{
    using (Stream responseStream = response.GetResponseStream())
    {
        if (responseStream != null)
        {
            using (var readStream = new StreamReader(responseStream, Encoding.UTF8))
            {
                result = readStream.ReadToEnd();
            }
        }
    }
}

return result;

Here I get back the ""BEGIN PKCS7"" message from above.
Now I'm trying to figure out what to do with this
MS Signed CMS Class Approach
SignedCms signedCms = new SignedCms();
signedCms.Decode(Encoding.Default.GetBytes(resultString));
try
{
    signedCms.CheckSignature(new X509Certificate2Collection(cert1), true);
}
catch (System.Security.Cryptography.CryptographicException e)
{
    _Log.Error(e.Message)
}

This throws the exception on ""signedCms.Decode"" of ""ASN1 bad tag value met.""
BouncyCastle ISigner
Here the documentation is non-existent.
So first I save my response to a file and use the TextReader object to try test with BouncyCastle
using (TextReader reader = File.OpenText(@""c:\temp\resultString.txt""))
{
    PemReader pemRd = new PemReader(reader);
    ContentInfo d = (ContentInfo)pemRd.ReadObject();
    Console.WriteLine(d.ContentType.ToString());
}

This returns the result: ""1.2.840.113549.1.7.2""
From what i can tell, this means its ""Pkcs7 Signed Data""
Woohoo, something looks like its working.
But from here, how do I verify, and how do I extract any information from this
My Verify attempt
using (TextReader reader = File.OpenText(@""c:\temp\resultString.txt""))
{
    PemReader pemRd = new PemReader(reader);
    var signature = new CmsSignedData(pemRd.ReadObject());
}

Fail - signature is null
var store = new X509Store(StoreLocation.LocalMachine);
store.Open(OpenFlags.ReadOnly | OpenFlags.OpenExistingOnly);
X509Certificate2 cert = store.Certificates.Find(X509FindType.FindByThumbprint, ""ACLKJCLKJCLKJCLKJCLKJCLKJCLKJCLKJCLKJCLK"", false)[0]; //tried with both certs
ISigner signer = SignerUtilities.GetSigner(""RSA"");
var bouncyx509 = DotNetUtilities.FromX509Certificate(cert1);
signer.Init(true, DotNetUtilities.FromX509Certificate(cert1).GetPublicKey());

Fail - need private key to create signer
In Closing
I hope I have provided enough information to get some help here.
Maybe I'm heading in completely the wrong direction.  
My Questions are:

How do I Verify the digital signature?
How do I get an Xml formatted message from this response?

THE SOLUTION
Thanks to gtrig, i finally have a solution.
Using the MS SignedCms object I had to first remove the Header and Footer form the message, then Convert.FromBase64String
Working Solution
SignedCms signedCms = new SignedCms();
resultString = resultString.Replace(""\n"", """").Replace(""-----BEGIN PKCS7-----"", """").Replace(""-----END PKCS7-----"", """");
signedCms.Decode(Convert.FromBase64String(resultString));

Now signedCms.ContentInfo.Content contains the reponse Xml message I expect
","This is an incomplete answer, but it may get you a little further along.
If you have access to openssl, try this command to see if it can read the data:
openssl pkcs7 -in resultString.txt -text
After that try this in your code (The only difference from what you had is ""Content"" instead of ""ContentType"":
Console.WriteLine(d.Content.ToString());

signedCms.Decode() takes a byte array, and that is probably the DER formatted message instead of the PEM formatted message that you received in the response.  To get that in a byte array, you'll have to strip the header and footer (Begin/End) lines and pass the rest to this method: 
Convert.FromBase64String()

Alternatively, you could use openssl to convert the file to DER format and then read in the bytes directly from the file.

openssl pkcs7 -in resultString.txt -outform DER -out result.der

","3364","<c#><x509certificate><pkcs#7>","3","2","1","2013-08-16 06:31:38","18227110","0","","15360","","2013-08-16 06:31:38","2013-08-14 07:44:10",""
"21019018","AES128/CBC/PKCS7padding in Objective-C?","I am attempting to decrypt the blob data for stories sent from Snapchat. Here is how gibsonsec describes the method to decrypting the image:

Padded using PKCS#7.
Encrypted using AES/CBC with a unique IV and key per piece of the story.

So is there some way to accomplish this, AES128/CBC/PKCS7padding within Objective-C? Indeed I do have both the data value (in NSData form), key value (encrypted in base63 form of NSString), and iv value (again, encrypted in base63 form of NSString)
Thank you!
","Found the following; https://github.com/dev5tec/FBEncryptor - Solved.
","3322","<objective-c><encryption><aes><pkcs#7>","2","2","1","2014-01-09 11:49:47","","0","1","","","","2014-01-09 11:32:33",""
"17706020","C# Cades P7M with Smartcard","I read this post how can sign a file with BouncyCastle dll in c#
and I would to know if it is possible found some support for certificates stored in smartcard.
What I'm trying to do is to create P7M cades but it seems impossibile to found any dopcumentation, .NET classes or free library.
","If the smartcard is mapped to Windows Certificate storage, then you can use certificates available via CryptoAPI. If the smartcard is available via PKCS#11, you can use PKIBlackbox package of our SecureBlackbox product to use it. Also PKIBlackbox supports CAdES format, not just PKCS#7/CMS.  
","3063","<c#><digital-signature><pkcs#7>","0","-1","3","2019-05-16 18:43:44","","1","","-1","","2017-05-23 12:06:52","2013-07-17 17:07:39",""
"17706020","C# Cades P7M with Smartcard","I read this post how can sign a file with BouncyCastle dll in c#
and I would to know if it is possible found some support for certificates stored in smartcard.
What I'm trying to do is to create P7M cades but it seems impossibile to found any dopcumentation, .NET classes or free library.
","You can also try this c# ported version of an European Commission initiative:
DSS .NET
It supports CAdES. Try using the MSCAPISignatureToken and the guide in the CookBook
CookBook
","3063","<c#><digital-signature><pkcs#7>","0","2","3","2019-05-16 18:43:44","","1","","-1","","2017-05-23 12:06:52","2013-07-17 17:07:39",""
"17706020","C# Cades P7M with Smartcard","I read this post how can sign a file with BouncyCastle dll in c#
and I would to know if it is possible found some support for certificates stored in smartcard.
What I'm trying to do is to create P7M cades but it seems impossibile to found any dopcumentation, .NET classes or free library.
","I used DSS.NET with this code:
using System.Security.Cryptography.X509Certificates;
using EU.Europa.EC.Markt.Dss;
using EU.Europa.EC.Markt.Dss.Signature;
using EU.Europa.EC.Markt.Dss.Signature.Cades;
using EU.Europa.EC.Markt.Dss.Signature.Token;

   private static void SignP7M(X509Certificate2 card, string sourcepath)
            {
                var service = new CAdESService();

                // Creation of MS CAPI signature token
                var token = new MSCAPISignatureToken { Cert = card };

                var parameters = new SignatureParameters
                {
                    SignatureAlgorithm = SignatureAlgorithm.RSA,
                    SignatureFormat = SignatureFormat.CAdES_BES,
                    DigestAlgorithm = DigestAlgorithm.SHA256,
                    SignaturePackaging = SignaturePackaging.ENVELOPING,
                    SigningCertificate = Org.BouncyCastle.Security.DotNetUtilities.FromX509Certificate(token.Cert),
                    SigningDate = DateTime.UtcNow
                };

                var toBeSigned = new FileDocument(sourcepath);

                var iStream = service.ToBeSigned(toBeSigned, parameters);

                var signatureValue = token.Sign(iStream, parameters.DigestAlgorithm, token.GetKeys()[0]);

                var signedDocument = service.SignDocument(toBeSigned, parameters, signatureValue);

                var dest = sourcepath + "".p7m"";
                if (File.Exists(dest)) File.Delete(dest);
                var fout = File.OpenWrite(dest);
                signedDocument.OpenStream().CopyTo(fout);
                fout.Close();
            }

You can get the card in two ways:

from cert store 
from cert serial number

here the samples:
public static X509Certificate2 GetCertificate(string _certSn)
        {
            //selezione del token di firma

            var st = new X509Store(StoreName.My, StoreLocation.CurrentUser);
            st.Open(OpenFlags.ReadOnly);
            var col = st.Certificates;
            var card = col.Cast<X509Certificate2>().FirstOrDefault(t => t.SerialNumber == _certSn);

            st.Close();

            return card;
        }


public static X509Certificate2 selectCert(StoreName store, StoreLocation location, string windowTitle, string windowMsg)
{

    X509Certificate2 certSelected = null;
    X509Store x509Store = new X509Store(store, location);
    x509Store.Open(OpenFlags.ReadOnly);

    X509Certificate2Collection col = x509Store.Certificates;
    X509Certificate2Collection sel = X509Certificate2UI.SelectFromCollection(col, windowTitle, windowMsg, X509SelectionFlag.SingleSelection);

    if (sel.Count > 0)
    {
        X509Certificate2Enumerator en = sel.GetEnumerator();
        en.MoveNext();
        certSelected = en.Current;
    }

    x509Store.Close();

    return certSelected;
}

","3063","<c#><digital-signature><pkcs#7>","0","2","3","2019-05-16 18:43:44","","1","","-1","","2017-05-23 12:06:52","2013-07-17 17:07:39",""
"2023046","Is there any OpenSSL function to convert PKCS7 file to PEM","Is there any openssl api function to convert PKCS7 file to PEM. I am able to convert a PKCS12 file to PEM using PKCS12_parse() function which returns key and certificate given the password. There is no similar function for pkcs7.
My pkcs7 input has just the certificate in binary format. I am able to do the conversion using command
openssl pkcs7 -inform DER -in input.p7b -printcerts -text

How do I do this in a C program? I am able to read it to a PKCS7 structure like this
 FILE* fp;
 if (!(fp = fopen(""ca.p7b"", ""rb""))) { 
  fprintf(stderr, ""Error reading input pkcs7 file\n"" ); 
  exit(1); 
 } 
 PKCS7 *p7; 
 p7 = d2i_PKCS7_fp(cafp, NULL);

","After some googling I am able to do that.
if(p7->d.sign->cert != NULL){
    PEM_write_X509(fp, sk_X509_value(p7->d.sign->cert, 0)); 
}

where p7 is a pointer to pkcs7 struct and fp is the file pointer to PEM file
","3055","<c++><openssl><pkcs#7>","3","1","1","2011-05-12 11:33:53","2024120","0","1","89847","","2011-05-12 11:33:53","2010-01-07 19:30:38",""
"6335928","Signing and creating a asn1 signedmessage - Bouncycastle","Is there any good tutorials on how to sign a file, and wrap it inside a asn1 pkcs7 package using bouncycastle?
","After sometime, i've found how its done, in the examples inside the bouncyCastle app.
It's actually quite simpler and straight foward than i had found in IText (, not taking out the geniality of the framework itself).
The code is something like:
        AsymmetricCipherKeyPair signaturePair;
        X509Certificate signatureCert;

        IList certList = new ArrayList();
        IList crlList = new ArrayList();
        CmsProcessable msg = new CmsProcessableByteArray(Encoding.ASCII.GetBytes(""I hate hello world!""));

        certList.Add(signatureCert);
        certList.Add(OrigCert);

        crlList.Add(SignCrl);

        IX509Store x509Certs = X509StoreFactory.Create(
            ""Certificate/Collection"",
            new X509CollectionStoreParameters(certList));
        IX509Store x509Crls = X509StoreFactory.Create(
            ""CRL/Collection"",
            new X509CollectionStoreParameters(crlList));

        CmsSignedDataGenerator gen = new CmsSignedDataGenerator();

        gen.AddSigner(signaturePair.Private, signatureCert, CmsSignedDataGenerator.DigestSha1);

        gen.AddCertificates(x509Certs);
        gen.AddCrls(x509Crls);

        CmsSignedData signedData = gen.Generate(msg, true);

        //saving in BER encoding
        Stream stream = new MemoryStream(signedData.GetEncoded());

","3048","<c#><bouncycastle><asn.1><pkcs#7>","5","6","1","2011-06-28 13:30:27","6445410","0","","","","","2011-06-13 20:29:34",""
"29304071","JAVA - How to create signed PDF using original PDF and separate PKCS#7 signed data","I have a original PDF document and separate file as PKCS#7 signed data.
I would like to combine these to create signed PDF document so that it could be shown in for example Adobe reader that it is signed and who signed the document.
Are there any libraries in Java that could be used to create such signed PDF document programatically? I need to load that PDF and add the signature to it somehow, then save it as a new PDF document. 
Sample code would be appreciated.
EDIT:
The resulting code should take the PDF document as input parameter and do the following:

prepare data to be signed
provide data to be signed to external signing mechanism that produces PKCS#7 signed data file
provide PKCS#7 signed data file
add signed data to PDF document
save PDF document

As I understand the first step is important because without that the PKCS#7 signed data would be wrong.
","If I correctly understand your question, your pkcs#7 is signing the whole content of the PDF. That is, all PDF file bytes.
In this case the answer is you can't.
When you sign a PDF file you don't sign all its bytes ""as is"".
Before signing a PDF you have to create two ""byte ranges"" in the PDF, 
leaving in the midle of the PDF enough room to include the signature.
Then you have to concatenate these two byte ranges, sign these bytes and include the signature in the space you left inside the PDF.
Take a look at
* https://www.adobe.com/devnet-docs/acrobatetk/tools/DigSig/Acrobat_DigitalSignatures_in_PDF.pdf (www.adobe.com)
","3006","<java><pdf><digital-signature><pkcs#7>","2","5","2","2015-03-27 16:32:37","29304383","2","0","1563721","","2015-03-27 16:32:37","2015-03-27 15:13:50",""
"29304071","JAVA - How to create signed PDF using original PDF and separate PKCS#7 signed data","I have a original PDF document and separate file as PKCS#7 signed data.
I would like to combine these to create signed PDF document so that it could be shown in for example Adobe reader that it is signed and who signed the document.
Are there any libraries in Java that could be used to create such signed PDF document programatically? I need to load that PDF and add the signature to it somehow, then save it as a new PDF document. 
Sample code would be appreciated.
EDIT:
The resulting code should take the PDF document as input parameter and do the following:

prepare data to be signed
provide data to be signed to external signing mechanism that produces PKCS#7 signed data file
provide PKCS#7 signed data file
add signed data to PDF document
save PDF document

As I understand the first step is important because without that the PKCS#7 signed data would be wrong.
","Try Apache PDFBox
Also, check out the following posts it goes over signing PDFs.
How to sign pdf in Java using pdfbox
","3006","<java><pdf><digital-signature><pkcs#7>","2","0","2","2015-03-27 16:32:37","29304383","2","0","1563721","","2015-03-27 16:32:37","2015-03-27 15:13:50",""
"1995757","digital signature - detached Pkcs#7 to XML-DSIG","I am struggling with the following scenario:

an XML-message is created client-side and digitally signed using mozilla's window.crypto.signText. After signing, the message and the signature are transmitted via a webservice (.net) to the server. Everything is fine until this point.
on the server, the XML shall be included in another XML-document, which is publicly accessible. The signature should be published as well in order to grant non-repudiation. 

Q: Is there a smooth option to convert the detached Pkcs#7 into XML-DSIG (e.g. functionality within the .net framework)? 
Q2: Or is it possible to create the XML-DSIG already client-side without using external plugins?
Tnx for your help!
Alois Paulin
","Due to the nature of both digital signature formats XML and PKCS#7, it is not possible to convert from one to the other. 
In a very simplified explanation, the signature in PKCS#7 format contains, among other stuff, some specific data structure called DigestInfo that contains the data digest and an OID (object identifier), and has been ciphered with the user's private key. The XML-Dsig format applies the final step of the cryptographic algorithm (again with the user's private key) to a different data value calculated from digesting the original XML data and some specific XML-DSig data structures. Therefore, since both ciphered values will not be the same, it is only possible to generate the XML-DSig signature by signing the data with the user's private key, which you will not have access to (thus the name private). 
From that explanation, the answer to your first question is ""No, there is no smooth option, it is not possible at all"".
Therefore the only option is to generate the XML-DSig directly at the client side. That is not possible using standard Javascript, definitely not with Firefox's window.crypto (which only generates PKCS7 detached signatures). At my company (www.isigma.es), we solve that by using an applet, it is a common solution in the digital signature industry (there are many commercial and also some open source solutions). That may not be an option in your case, if you do not want browser plugins. 
CAPICOM (the windows-based active/X component that you may use in a Microsoft setup) also does not generate XML-DSig, only CMS/PKCS7.
","2924","<xml><xml-signature><pkcs#7>","1","4","1","2011-08-05 15:45:22","2504658","0","","680925","","2011-08-05 15:45:22","2010-01-03 18:13:10",""
"6398606","Is there any reason to use CAdES over XAdES for advanced electronic signatures?","I haven't been able to find any reason of why should anyone prefer to implement a CAdES oriented electronic signature software solution over a XAdES oriented one.
There are a lot more open libraries and implementation cases and examples of XAdES on the internet, but still, I don't believe that is the reason why people decide on using XAdES over CAdES.
Is it because XAdES is XML oriented and software developers tend to love anything XML related? Is there any scenario where CAdES is just outright the best option to use over XAdES?
For reference: 

CAdES is CMS/PKCS#7 in advanced form (supports timestamping)
XAdES is XML-DSig in advanced form (supports timestamping) 

","One advantage of CAdES is that it generally causes less interoperability problems because the XML-DSig standard allows many options including XSLT, XPointer Framework, XML canonicalization and more. CAdES would be less demanding if only dealing with strictly DER-encoded signatures (The picture changes once you need to deal with BER encodings).
CAdES outperforms XAdES in scenarios where producing ""attached"" signatures on large data chunks is necessary (You want the result to be one single chunk of data that contains both the original data and the signature). The equivalent of an attached CAdES signature (The original input data is stored in the EncapContentInfo element of the CMS structure) is an Enveloping Signature. If you are required to produce such a kind of signature there is a high probability that you will run into problems when dealing with large input data if your XAdES implementation is DOM-based (those I know of are) - your machine will eventually run out of memory.
Performance would be another argument where CAdES is favoured. The message digest computation of CAdES is typically done directly on the raw bytes of the input data, XML signatures that are computed on XML documents involve a lot of overhead such as evaluation of XPath expressions, XSLT transforms, Base64 en-/decoding and Canonicalization, and potentially several Transform elements.   
If you are building an archiving system for long-term validation of signatures where a lot of signatures are stored, CAdES is the preferred format due to its compactness in comparison to the textual XAdES format.
","2904","<xml><content-management-system><pkcs#7><xml-signature><electronic-signature>","5","6","2","2019-07-25 14:12:24","6576952","0","2","1033581","","2019-03-23 05:00:33","2011-06-18 20:08:11",""
"6398606","Is there any reason to use CAdES over XAdES for advanced electronic signatures?","I haven't been able to find any reason of why should anyone prefer to implement a CAdES oriented electronic signature software solution over a XAdES oriented one.
There are a lot more open libraries and implementation cases and examples of XAdES on the internet, but still, I don't believe that is the reason why people decide on using XAdES over CAdES.
Is it because XAdES is XML oriented and software developers tend to love anything XML related? Is there any scenario where CAdES is just outright the best option to use over XAdES?
For reference: 

CAdES is CMS/PKCS#7 in advanced form (supports timestamping)
XAdES is XML-DSig in advanced form (supports timestamping) 

","CAdES over XAdES:

Less options to implement
(Way) Easier to verify
Works with any sort of data, including XML
Easier for ASiC
Windows API more robust to build it
No need for complex canonicalizations
Can be used with S/MIME
Allows multiple signatures
It is used in PAdES
Faster

XAdES over CAdES:

Signed XML files can still be read by encryption-unaware applications
Multiple elements can be signed with one pass
You do not need an ASN.1 compiler

The only reason I would use XAdES is the first one, personal opinion. But then, an unaware application might modify the file, rendering the signature invalid. Also, using the *AdES types means that you want to be compatible with the EU regulations and, this usually means PDF documents signed with PAdES. When you simply want to sign an e-mail, CAdES is not very much useful as it is not validated by most S/MIME clients. The AdES stuff is european laws, so not so many US apps are aware of it.
Also, these forms are not just the old ones with timestamps, there are a lot of addons. See https://www.w3.org/TR/XAdES/ and https://www.secureblackbox.com/kb/articles/8-CAdES.rst.
I have also implemented them in C++ for Windows, check here and here for my complete toolset.
","2904","<xml><content-management-system><pkcs#7><xml-signature><electronic-signature>","5","3","2","2019-07-25 14:12:24","6576952","0","2","1033581","","2019-03-23 05:00:33","2011-06-18 20:08:11",""
"24059417","How to decrypt smime.p7m file in DER format using OpenSSL in C code.","I am trying to decrypt emails using openssl. 
I am getting smime.p7m file from the server. But it is in DER format. 
I can decrypt this file using command prompt, with the command 
openssl smime -decrypt -in openssl_working_smime.p7m -inform DER -inkey mycert.pem > dec_mail.eml

But now I want to do this using C code. 
Right now I am trying to do using - 
SMIME_read_PKCS7()

But this returns null with 
SMIME_read_ASN1:no content type:asn_mime.c:451: 

error
Any ideas how to do it? 
","","2892","<encryption><openssl><pkcs#7><der>","1","","0","2014-06-05 11:48:02","","2","","","","","2014-06-05 11:48:02",""
"17784735","Decrypting s/mime messages in p7m format with OpenSSL","I'm trying to decrypt p7m with OpenSSL but I cannot go through the error in the following part of the code:
PKCS7 *p7 = NULL;

in = BIO_new_file(convertedResourcePath, ""r"");

    if (in) {
        NSLog(@""opening p7m file"");
    }
    else
        NSLog(@""cannot found p7m file"");

    out = BIO_new_file(convertedDecrFilePath, ""w"");

    if (out) {
        NSLog(@""file for decription has been created"");
    }
    else
        NSLog(@""failed to create decription file"");


    p7 = SMIME_read_PKCS7(in, NULL);

if (p7) {
        NSLog(@""start reading p7m file"");

    }
    else {
        NSLog(@""cannot read p7m file"");
        ERR_print_errors_fp(stderr);
    }

 if (PKCS7_decrypt(p7, pkey, cert, out, 0)) {
        NSLog(@""file decrypted sucessfully!"");
    }
    else
        NSLog(@""cannot decrypt file"");

I got the following in output:

opening p7m file 2013-07-22 12:45:22.951 smimePrototype[10827:c07]
  file for decription has been created 2013-07-22 12:45:22.952
  smimePrototype[10827:c07] cannot read p7m file
  2900150892:error:0D0D40D1:asn1 encoding routines:SMIME_read_ASN1:no
  content type:asn_mime.c:451:
  2013-07-22 12:45:22.953 smimePrototype[10827:c07] cannot decrypt file

Looking for your help, maybe p7 variable can be initialized in other way?
","I tried to use 
p7=d2i_PKCS7_bio(in,NULL);

instead of
p7 = SMIME_read_PKCS7(in, NULL);

and it works great.
I hope it will help someone.
","2827","<objective-c><openssl><pkcs#7>","1","5","1","2013-07-23 15:21:37","17814361","4","","2606374","","2013-07-23 15:21:37","2013-07-22 10:03:04",""
"15937586","How to get certificate from pkcs7 file using bouncycastle?","Hi, all! My problem is next: I have the .pkcs7 file which consists pre-packed CSR and I want to get CSR from it. How can I do it using bouncycastle?
I tried use PEMReader, but it didn't work.

    private void getCertificatesPKCS7File(String filename){
        try {
            certificates = new ArrayList();

            FileReader fileReader = new FileReader(filename);
            PEMReader pemReader = new PEMReader(fileReader);
           // Object obj = pemReader.readObject();
           // PKCS10CertificationRequest csr = (PKCS10CertificationRequest) obj;
            Object obj = pemReader.readPemObject().getContent();
            PKCS10CertificationRequest csr = new PKCS10CertificationRequest(obj);

            pemReader.close(); 

        } catch (Exception e) {
            e.printStackTrace();
        }
    }


Exception is next:

Exception in thread ""main"" java.lang.IllegalArgumentException: unknown object in factory: org.bouncycastle.asn1.ASN1ObjectIdentifier
    at org.bouncycastle.asn1.pkcs.CertificationRequestInfo.getInstance(Unknown Source)
    at org.bouncycastle.asn1.pkcs.CertificationRequest.(Unknown Source)
    at org.bouncycastle.jce.PKCS10CertificationRequest.(Unknown Source)

Thank's all!
","I found solution.

        KeyStore keystore = KeyStore.getInstance(""PKCS12"", ""BC"");
        keystore.load (new FileInputStream(PATH+""//test.p12""), ""testpassword"".toCharArray());
        PrivateKey privateKey = (PrivateKey)keystore.getKey(""testclientcert"", ""testpassword"".toCharArray());

        PEMReader pemReader = new PEMReader(new FileReader(filename));
        ContentInfo object = (ContentInfo)pemReader.readObject();

        CMSEnvelopedDataParser envDataParser = new CMSEnvelopedDataParser(object.getEncoded());
        RecipientInformationStore recipients = envDataParser.getRecipientInfos();
        Collection envCollection = recipients.getRecipients();
        Iterator it = envCollection.iterator();
        RecipientInformation recipient = (RecipientInformation) it.next();
        byte[] result = recipient.getContent(privateKey, ""BC"");
        String base64Encoded = new String(Base64.encode(result));

        System.out.println(base64Encoded);


base64Encoded will be match with encoded csr.
","2727","<java><bouncycastle><pkcs#7><csr>","2","0","1","2013-04-12 17:17:11","15977249","2","1","1809141","","2013-04-11 05:32:34","2013-04-10 22:25:42",""
"18700851","Extract certificate from a PKCS7 signature in php","I need to extract the user certificate from a pkcs7 signature file. I can do it via the command line using the following:
openssl pkcs7 -in somesign.pks7 -inform PEM -print_certs

This will give me the entire certificate chain and I can process the resulting file to extract what I want.
Is there any way to do that with the openssl_pkcs7_ commands? I saw that openssl_pkcs7_verify has the $outfilename where the certs would be stored but I don't have the signed message, but it seems the $filename should have both the signature and the message, which is not my case (signature is in a separate file).
","I have already using it via exec() function.
exec('../../apache/bin/openssl.exe pkcs7 -in D:/mypkcs7.p7b -inform DER -print_certs').

But I think, the best choise is to use the structure of SMIME files. You can obtain the structure by analysing the source code of OpenSSL. Finding it maybe tough,but once you find it,you can use it anywhere. OpenSSL GitHub source code is available 
here
","2675","<php><openssl><signature><pkcs#7><smime>","13","2","2","2017-06-12 10:15:45","","2","1","558866","","2017-06-05 14:31:37","2013-09-09 14:42:19",""
"18700851","Extract certificate from a PKCS7 signature in php","I need to extract the user certificate from a pkcs7 signature file. I can do it via the command line using the following:
openssl pkcs7 -in somesign.pks7 -inform PEM -print_certs

This will give me the entire certificate chain and I can process the resulting file to extract what I want.
Is there any way to do that with the openssl_pkcs7_ commands? I saw that openssl_pkcs7_verify has the $outfilename where the certs would be stored but I don't have the signed message, but it seems the $filename should have both the signature and the message, which is not my case (signature is in a separate file).
","I'm not aware of a PHP library with straightforward API for this.
I've implemented several libraries however that could help with the task. asn1, crypto-util and x509 are available via composer.
Here's a barebones proof of concept that extracts all certificates from a PKCS7 PEM file:
<?php

use ASN1\Element;
use ASN1\Type\Constructed\Sequence;
use CryptoUtil\PEM\PEM;
use X509\Certificate\Certificate;

require __DIR__ . ""/vendor/autoload.php"";

$pem = PEM::fromFile(""path-to-your.p7b"");
// ContentInfo: https://tools.ietf.org/html/rfc2315#section-7
$content_info = Sequence::fromDER($pem->data());
// SignedData: https://tools.ietf.org/html/rfc2315#section-9.1
$signed_data = $content_info->getTagged(0)->asExplicit()->asSequence();
// ExtendedCertificatesAndCertificates: https://tools.ietf.org/html/rfc2315#section-6.6
$ecac = $signed_data->getTagged(0)->asImplicit(Element::TYPE_SET)->asSet();
// ExtendedCertificateOrCertificate: https://tools.ietf.org/html/rfc2315#section-6.5
foreach ($ecac->elements() as $ecoc) {
    $cert = Certificate::fromASN1($ecoc->asSequence());
    echo $cert->toPEM() . ""\n"";
}

ASN.1 handling is very error-prone. I've omitted all sanity checks from the above example, but the underlying library will throw exceptions on errors.
I hope this gives some pointers in case someone needs to parse PKCS #7 structures without relying on external programs.
","2675","<php><openssl><signature><pkcs#7><smime>","13","3","2","2017-06-12 10:15:45","","2","1","558866","","2017-06-05 14:31:37","2013-09-09 14:42:19",""
"14037917","PKCS7 encrypt decrypt in Node.js","I am using pkcs7 encrypt decrypt in current project. I want to change from PHP to Node.js. Is there pkcs7 encrypt/decrypt in Node.js ? 
In PHP,
<?php

$data = <<<EOD
Hello world
EOD;

// load key
$key = file_get_contents(""mypublickey.crt"");

// save message to file
$fp = fopen(""msg.txt"", ""w"");
fwrite($fp, $data);
fclose($fp);

// encrypt it
if (openssl_pkcs7_encrypt(""msg.txt"", ""enc.txt"", $key,array())) {
    // message encrypted - send it!

}
?>

to decrypt
<?php
// The certification stuff
$public = file_get_contents(""mypublickey.crt"");
$private = array(file_get_contents(""myprivatekey.pem""), ""mypassword"");

$infile = tempnam("""", ""enc"");
file_put_contents($infile, $encrypted); 
$outfile = tempnam("""", ""dec"");

if(openssl_pkcs7_decrypt(""enc.txt"", ""dec.txt"", $public, $private))
{
    // Decryption successful
    echo file_get_contents(""dec.txt"");
}
?>

Is there any similar function like this in Node.js ?
","I've faced the same issue and spent too much time but I found a way in the end.
I found and used forge open source lib. You can simply add to your project by following:
npm install node-forge

Then, code snippet below performs encryption with PKCS#7 format.
var forge = require('node-forge');

// create cert object
var cert = forge.pki.certificateFromPem(certOrPemString);
// create envelop data
var p7 = forge.pkcs7.createEnvelopedData();
// add certificate as recipient
p7.addRecipient(cert);
// set content 
p7.content = forge.util.createBuffer();
p7.content.putString('content to be encrypted');

// encrypt
p7.encrypt();

// obtain encrypted data with DER format
var bytes = forge.asn1.toDer(p7.toAsn1()).getBytes();

This code block will encrypt the content you provided and return a byte array with DER output format. 
You can convert byte array to UTF-8 string by following:
var str = Buffer.from(bytes, 'binary').toString('utf8');

And you can decrypt the content as follows:
var recipient = p7.findRecipient(cert);
// decrypt
p7.decrypt(p7.recipients[0], privateKey); 

Hope this may help.
","2675","<node.js><openssl><pkcs#7>","4","6","1","2019-02-14 09:01:05","44619604","3","3","","","","2012-12-26 08:29:46",""
"12038725","Decrypt a PKCS7 file in c++ with OpenSSL","I have a PKCS7 file, produced by M2Crypto python library, which looks like this:
-----BEGIN PKCS7-----
MIIBWAYJKoZIhvcNAQcDo[cut]
-----END PKCS7-----

Is is binary content encripted by a public key.
Now I need to decrypt it in C++, but it seems not to recognize this format. I tried d2i_PKCS7_bio() and  SMIME_read_PKCS7(), but I always get errors like:
8957:error:0D0680A8:asn1 encoding routines:ASN1_CHECK_TLEN:wrong tag:tasn_dec.c:1316:
8957:error:0D07803A:asn1 encoding routines:ASN1_ITEM_EX_D2I:nested asn1 error:tasn_dec.c:380:Type=PKCS7

and similar errors trying by command line like this:
openssl smime -decrypt -inform DER -binary -inkey privkey.pem

EDIT
I found the right command line option:
openssl cms -decrypt -in samplepkcs7.pem  -inkey privkey.pem -inform pem

Now I need to find the corresponding function in C++.
Maybe I'm wrong, but it's really hard to find documentation on this. Any help would be appreciated.
","What you have is a PEM-format object; a DER-format object would look like garbage in a text editor (by virtue of being a binary format). Hence you want PEM_read_PKCS7().
The OpenSSL documentation is inherently a mess, and it's very difficult to learn your way around without a guide of some sort. I recommend the O'Reilly Network Security with OpenSSL text; while written for OpenSSL 0.9.6/0.9.7, it's still an excellent introduction to the library (the API hasn't changed very much) and will serve as a handy reference.
","2670","<c++><openssl><pkcs#7>","1","0","1","2012-08-21 19:39:00","12061864","0","1","1581393","","2012-08-21 15:14:13","2012-08-20 13:35:09",""
"29102564","PHP How to parse pkcs7 signature blob?","I have a PKCS7 signature which i can get parsed contents from with
openssl pkcs7 -inform DER -in signature.pkcs7 -print_certs -text

But how do archieve the same output with PHPs openssl functions?
Edit. I succeeded in creating a correct PEM file with the following function:
function der2pem($der_data, $type=""CERTIFICATE"") {
   $pem = chunk_split(base64_encode($der_data), 64, ""\n"");
   $pem = ""-----BEGIN $type-----\n"".$pem.""-----END $type-----\n"";
   return $pem;
}
$data = der2pem($der_data, ""PKCS7"");

Im not however successfull in parsing the data with any of the functions mentioned in the PHP manual. It works using openssl with: 
openssl pkcs7 -inform PEM -in signature.pkcs7 -print_certs -text

","What about this solution :) 
<?php
    $result = shell_exec('openssl pkcs7 -inform DER -in signature.pkcs7 -print_certs -text');
    var_dump ($result);
    // you can use preg_match() if you want to parse something specific 

","2642","<php><openssl><pkcs#7>","6","0","2","2019-02-20 00:36:34","29392598","2","2","196420","","2019-02-20 00:36:34","2015-03-17 15:02:34",""
"29102564","PHP How to parse pkcs7 signature blob?","I have a PKCS7 signature which i can get parsed contents from with
openssl pkcs7 -inform DER -in signature.pkcs7 -print_certs -text

But how do archieve the same output with PHPs openssl functions?
Edit. I succeeded in creating a correct PEM file with the following function:
function der2pem($der_data, $type=""CERTIFICATE"") {
   $pem = chunk_split(base64_encode($der_data), 64, ""\n"");
   $pem = ""-----BEGIN $type-----\n"".$pem.""-----END $type-----\n"";
   return $pem;
}
$data = der2pem($der_data, ""PKCS7"");

Im not however successfull in parsing the data with any of the functions mentioned in the PHP manual. It works using openssl with: 
openssl pkcs7 -inform PEM -in signature.pkcs7 -print_certs -text

","Unfortunatelly, I believe there is not simple solution. If you want to parse PKCS#7 DER encoded signature in PHP, you need some ASN.1 parser. OpenSSL functions in PHP are not capable to do it. 
Do any PHP libraries exist for parsing ASN.1 or generating PHP code based on it?
Try to decode your DER data with some of referenced parsers. If any parser will work, you should be able to see and extract required information. As first step, you can try online parser from phpseclib project.    
http://phpseclib.sourceforge.net/x509/asn1parse.php
","2642","<php><openssl><pkcs#7>","6","5","2","2019-02-20 00:36:34","29392598","2","2","196420","","2019-02-20 00:36:34","2015-03-17 15:02:34",""
"39378249","create PKCS7 with presigned data using bouncy castle","I would like to create a detached signature in a PDF file using a PKCS7 container. The data (hash) is being signed beforehand on a different device with the private key. I want to create a PKCS7 containing the signed data along with the certificate with the public key. I can't seem to create the PKCS7 with bouncy castle without supplying the private key and having the library signing the data. This doesn't seem to work:
        InputStream inStream = new FileInputStream(""1_public.pem"");
        BufferedInputStream bis = new BufferedInputStream( inStream );

        CertificateFactory cf = CertificateFactory.getInstance(""X.509"");

        List<Certificate> certList = new ArrayList<Certificate>();
        Certificate certificate = cf.generateCertificate(bis);
        certList.add(certificate);
        Store certs = new JcaCertStore(certList);

        CMSSignedDataGenerator gen = new CMSSignedDataGenerator();
        gen.addCertificates( certs );
        CMSProcessableInputStream msg = new CMSProcessableInputStream( new ByteArrayInputStream( ""signedhash"".getBytes() ) );

        CMSSignedData signedData = gen.generate(msg, false);
        byte[] pkcs7 = signedData.getEncoded() ) );

","I managed to do this by providing a ContentSigner that doesn't sign, actually quite simple:
        InputStream inStream = new FileInputStream(""1_public.pem"");
        BufferedInputStream bis = new BufferedInputStream( inStream );

        CertificateFactory cf = CertificateFactory.getInstance(""X.509"");

        List<Certificate> certList = new ArrayList<Certificate>();
        Certificate certificate = cf.generateCertificate(bis);
        certList.add(certificate);
        Store certs = new JcaCertStore(certList);
        CMSSignedDataGenerator gen = new CMSSignedDataGenerator();
        gen.addCertificates( certs );

        final byte[] signedHash = ""signedhash"".getBytes();

        ContentSigner nonSigner = new ContentSigner() {

            @Override
            public byte[] getSignature() {
                return signedHash;
            }

            @Override
            public OutputStream getOutputStream() {
                return new ByteArrayOutputStream();
            }

            @Override
            public AlgorithmIdentifier getAlgorithmIdentifier() {
                return new DefaultSignatureAlgorithmIdentifierFinder().find( ""SHA256WithRSA"" );
            }
        };

        org.bouncycastle.asn1.x509.Certificate cert = org.bouncycastle.asn1.x509.Certificate.getInstance(ASN1Primitive.fromByteArray(certificate.getEncoded()));
        JcaSignerInfoGeneratorBuilder sigb = new JcaSignerInfoGeneratorBuilder(new JcaDigestCalculatorProviderBuilder().build());
        sigb.setDirectSignature( true );
        gen.addSignerInfoGenerator(sigb.build(nonSigner, new X509CertificateHolder(cert)));
        CMSProcessableInputStream msg = new CMSProcessableInputStream( new ByteArrayInputStream( ""not used"".getBytes() ) );

        CMSSignedData signedData = gen.generate(msg, false);
        byte[] pkcs7 = signedData.getEncoded();

","2638","<java><bouncycastle><pkcs#7>","2","5","2","2018-01-16 14:23:19","39408052","2","1","","","","2016-09-07 20:11:30",""
"39378249","create PKCS7 with presigned data using bouncy castle","I would like to create a detached signature in a PDF file using a PKCS7 container. The data (hash) is being signed beforehand on a different device with the private key. I want to create a PKCS7 containing the signed data along with the certificate with the public key. I can't seem to create the PKCS7 with bouncy castle without supplying the private key and having the library signing the data. This doesn't seem to work:
        InputStream inStream = new FileInputStream(""1_public.pem"");
        BufferedInputStream bis = new BufferedInputStream( inStream );

        CertificateFactory cf = CertificateFactory.getInstance(""X.509"");

        List<Certificate> certList = new ArrayList<Certificate>();
        Certificate certificate = cf.generateCertificate(bis);
        certList.add(certificate);
        Store certs = new JcaCertStore(certList);

        CMSSignedDataGenerator gen = new CMSSignedDataGenerator();
        gen.addCertificates( certs );
        CMSProcessableInputStream msg = new CMSProcessableInputStream( new ByteArrayInputStream( ""signedhash"".getBytes() ) );

        CMSSignedData signedData = gen.generate(msg, false);
        byte[] pkcs7 = signedData.getEncoded() ) );

","In case the ""external signature"" is performed by a hardware device it is possible that it also contains ""signed attributes"". In this case the code must also contain:
AttributeTable signedAttributes = signer.getSignedAttributes();
signerInfoBuilder.setSignedAttributeGenerator(new SimpleAttributeTableGenerator(signedAttributes));     
signatureGenerator.addSignerInfoGenerator(signerInfoBuilder.build(nonSigner, signCertificate));

you should also remove the 
signatureGenerator.setDirectSignature(true)

a complete example can be found here https://www.len.ro/work/attach-payload-into-detached-pkcs7-signature/. Since I spend a lot of time searching for a solution and this post provided a vital clue I thought I should complete with the information I still missed in an article. Thanks.
","2638","<java><bouncycastle><pkcs#7>","2","0","2","2018-01-16 14:23:19","39408052","2","1","","","","2016-09-07 20:11:30",""
"2004096","Alternatives to Bouncy Castle java library for PKCS7 encryption/signing?","We've always used the BouncyCastle library, I'm being asked if there are other viable alternatives, either open source or not. Or is the BouncyCastle library already the best one to use?
","You could try classpathx.  However, from experience I would say that Bouncy Castle is definitely the best.
","2634","<java><encryption><pkcs#7>","1","1","1","2010-01-05 04:04:38","2004106","1","1","","","","2010-01-05 03:59:28",""
"46430367","How to retrieve digital signature information from PDF with PHP?","I have app that needs to retrieve some data (signer name) from digital signature ""attached"" on PDF files.
I have found only examples in Java and C# using the iText class AcroFields method GetSignatureNames
edit: I've tried pdftk with dump_data_fields and generate_fpdf and the result was that (unfortunately):
/Fields [
<<
/V /dftk.com.lowagie.text.pdf.PdfDictionary@3048918
/T (Signature1)
>>]

and
FieldType: Signature
FieldName: Signature1
FieldFlags: 0
FieldJustification: Left

Thanks in Advance !
","Well, it's complicated (I would say even impossible, but who knows) to achieve this only with PHP.
At first, please read article about digital signature in Adobe PDF
Second, after reading this you will know that signature is stored between b and c bytes according to /ByteRange[a b c d] indicator
Third, we can extract b and c from document and then extract signature itself (guide says it will be hexdecoded PKCS7# object). 
<?php

 $content = file_get_contents('test.pdf');

 $regexp = '#ByteRange\[\s*(\d+) (\d+) (\d+)#'; // subexpressions are used to extract b and c

 $result = [];
 preg_match_all($regexp, $content, $result);

 // $result[2][0] and $result[3][0] are b and c
 if (isset($result[2]) && isset($result[3]) && isset($result[2][0]) && isset($result[3][0]))
 {
     $start = $result[2][0];
     $end = $result[3][0];
     if ($stream = fopen('test.pdf', 'rb')) {
         $signature = stream_get_contents($stream, $end - $start - 2, $start + 1); // because we need to exclude < and > from start and end

         fclose($stream);
     }

     file_put_contents('signature.pkcs7', hex2bin($signature));
}

Forth, after third step we have PKCS#7 object in file signature.pkcs7. Unfortunately, I don't know methods to extract information from signature using PHP. So you must be able to run shell commands to use openssl
openssl pkcs7 -in signature.pkcs7 -inform DER -print_certs > info.txt

After running this command in file info.txt you will have a chain of certificates. Last one is the one you need. You can see the structure of the file and parse needed data.
Please also refer to this question, this question and this topic
EDIT at 2017-10-09
I knowingly advised you to see exactly this question
There is a code that you can adjust to your needs.
use ASN1\Type\Constructed\Sequence;
use ASN1\Element;
use X509\Certificate\Certificate;       

$seq = Sequence::fromDER($binaryData);
$signed_data = $seq->getTagged(0)->asExplicit()->asSequence();
// ExtendedCertificatesAndCertificates: https://tools.ietf.org/html/rfc2315#section-6.6
$ecac = $signed_data->getTagged(0)->asImplicit(Element::TYPE_SET)->asSet();
// ExtendedCertificateOrCertificate: https://tools.ietf.org/html/rfc2315#section-6.5
$ecoc = $ecac->at($ecac->count() - 1);
$cert = Certificate::fromASN1($ecoc->asSequence());
$commonNameValue = $cert->tbsCertificate()->subject()->toString();
echo $commonNameValue;

I've adjusted it for you, but please make the rest by yourself.
","2630","<php><pdf><digital-signature><pkcs#7>","21","16","2","2019-01-24 19:20:58","46603440","7","7","284932","","2017-09-26 16:39:01","2017-09-26 15:23:34",""
"46430367","How to retrieve digital signature information from PDF with PHP?","I have app that needs to retrieve some data (signer name) from digital signature ""attached"" on PDF files.
I have found only examples in Java and C# using the iText class AcroFields method GetSignatureNames
edit: I've tried pdftk with dump_data_fields and generate_fpdf and the result was that (unfortunately):
/Fields [
<<
/V /dftk.com.lowagie.text.pdf.PdfDictionary@3048918
/T (Signature1)
>>]

and
FieldType: Signature
FieldName: Signature1
FieldFlags: 0
FieldJustification: Left

Thanks in Advance !
","I've used iText and found it to be very reliable, I highly recommend it.
you can always call the java code as a ""microservice"" from PHP.
","2630","<php><pdf><digital-signature><pkcs#7>","21","0","2","2019-01-24 19:20:58","46603440","7","7","284932","","2017-09-26 16:39:01","2017-09-26 15:23:34",""
"15580065","AES/CBC/PKCS5Padding implementation in Ruby (for rails)","I need to decrypt text encrypted using AES/CBC/PKCS5Padding scheme. The encrypted text I got was generated using some Java software.
All values below are changed by me to something fictional.
What I get is a Key aHjgYFutF672eGIUGGVlgSETyM9VJj0K (256-bit = 32-chars * 8-bit)
and IV: rxYoks3c8hRRsL2P (16-bit)
and (I supposed) Base64 encoded encrypted result ETlAHS5ZcshKxQUaHVB8==
What I need is to decrypt in Ruby this ETlAHS5ZcshKxQUaHVB8== to get in the and a simple string, like 'blablablabla'
I tried to decrypt what I got using both Ruby and just common linux console openssl command.
NOTE: Key and IV below are not the ones used in real code:
# require 'openssl'
# require 'base64'
# decryption
aes = OpenSSL::Cipher::AES256.new(:CBC)
aes.decrypt
aes.padding = 1 # actually it's on by default
aes.key = ""aHjgYFutF672eGIUGGVlgSETyM9VJj0K""
aes.iv=""rxYoks3c8hRRsL2P""
aes.update(Base64::decode64(""ETlAHS5ZcshKxQUaHVB8==""))+aes.final
=> OpenSSL::Cipher::CipherError: bad decrypt

Same as above but in console, key and iv converted to hex with:
$ echo -n $key256 | hexdump -e '16/1 ""%02x""'
$ echo -n $iv     | hexdump -e '16/1 ""%02x""'

$ echo ""ETlAHS5ZcshKxQUaHVB8=="" | openssl enc -d -aes-256-cbc -a  -K 61486a675946757446363732654749554747566c67534554794d39564a6a304b -iv 7278596f6b73336338685252734c3250
bad decrypt
140378046432928:error:06065064:digital envelope routines:EVP_DecryptFinal_ex:bad decrypt:evp_enc.c:539:

BTW. to get back original key and iv in the console you an use:
$ echo 61486a6... | xxd -r -p
#or , but then need to add \x before every character pair
$ eval `printf ""\x61\x48......""

Please give me some clues as I hoped in the beginning that I will be able to use https://github.com/chicks/aes gem. The gem seems fine, it's just a nice wrapper for OpenSSL::Cipher::Cipher.
Is it possible that ruby/openssl use different PKCS, let's say PKCS#7, Java uses PKCS#5 and I need to preprocess my data ? Or there is a vesion mismatch between ruby/openssl and that Java's PKCS #7 and #5? #5 is meant for 8byte data blocks and #7 is for 16byte? Just a wild guess ...
","The Ruby code in my first post is correct, the problem was this AES/CBC/PKCS5Padding used by Java part.
Java program should not use this scheme for AES-CBC-256. PKCS5 pads to a 64 bit (8 byte) block size, but AES-256-CBC uses 16 byte blocks. Therefore, PKCS7 must be used.
","2600","<ruby><aes><pkcs#7><pkcs#5>","3","3","1","2013-04-02 15:31:49","15768151","3","1","470512","","2013-03-27 10:14:37","2013-03-22 21:21:37",""
"16284225","Using pycrypto PKCS#7 to create a signature","I'm looking at the Apple docs for PassBook, and I need to:

create a ""PKCS #7 detached signature of the manifest file"".

I'd ideally like to do this with Python and I'd ideally like to use pycrypto for the task, the trouble is, I can't find any example code on the web on how to do this, there's lots of code like this:
from Crypto.Cipher import PKCS1_v1_5
from Crypto.PublicKey import RSA
from Crypto.Hash import SHA

message = 'To be encrypted'
h = SHA.new(message)

key = RSA.importKey(open('pubkey.der').read())
cipher = PKCS1_v1_5.new(key)
ciphertext = cipher.encrypt(message+h.digest())

but not knowing enough about the specifics of PKCS#7, I don't know what I need to do...
Does anyone have any ideas?
Thanks
","With a lot of help from this answer, I did it!
I know op probably moved past this, but this answer is nowhere in the internet, so here's the solution, for posterity's sake!
from OpenSSL import crypto

with open(cert) as cert_file:
    cert_buf = cert_file.read()

with open(key) as key_file:
    key_buf = key_file.read()

pkey = crypto.load_privatekey(crypto.FILETYPE_PEM, key_buf)
signcert = crypto.load_certificate(crypto.FILETYPE_PEM, cert_buf)

bio_in = crypto._new_mem_buf(text.encode())
PKCS7_NOSIGS = 0x4  # defined in pkcs7.h
pkcs7 = crypto._lib.PKCS7_sign(signcert._x509, pkey._pkey, crypto._ffi.NULL, bio_in, PKCS7_NOSIGS)  # noqa
bio_out = crypto._new_mem_buf()
crypto._lib.i2d_PKCS7_bio(bio_out, pkcs7)
sigbytes = crypto._bio_to_string(bio_out)

Keep in mind, it uses some undocumented pyopenssl functions.
","2564","<python><pkcs#7>","5","10","2","2018-11-30 11:10:58","41553623","1","5","","","","2013-04-29 17:00:25",""
"16284225","Using pycrypto PKCS#7 to create a signature","I'm looking at the Apple docs for PassBook, and I need to:

create a ""PKCS #7 detached signature of the manifest file"".

I'd ideally like to do this with Python and I'd ideally like to use pycrypto for the task, the trouble is, I can't find any example code on the web on how to do this, there's lots of code like this:
from Crypto.Cipher import PKCS1_v1_5
from Crypto.PublicKey import RSA
from Crypto.Hash import SHA

message = 'To be encrypted'
h = SHA.new(message)

key = RSA.importKey(open('pubkey.der').read())
cipher = PKCS1_v1_5.new(key)
ciphertext = cipher.encrypt(message+h.digest())

but not knowing enough about the specifics of PKCS#7, I don't know what I need to do...
Does anyone have any ideas?
Thanks
","This works for me , I was trying to sign a string for NSDL, 
from OpenSSL import crypto
import base64
try:
    p12 = crypto.load_pkcs12(open(""/DSCPFX.pfx"", 'rb').read(), ""XXXX"")
    # print(""p12 : "", p12)
    signcert = p12.get_certificate()
    pkey = p12.get_privatekey()

    text = ""This is the text to be signed""
    bio_in = crypto._new_mem_buf(text.encode())
    PKCS7_NOSIGS = 0x4
    pkcs7 = crypto._lib.PKCS7_sign(signcert._x509, pkey._pkey, crypto._ffi.NULL, bio_in, PKCS7_NOSIGS)
    bio_out = crypto._new_mem_buf()
    crypto._lib.i2d_PKCS7_bio(bio_out, pkcs7)

    sigbytes = crypto._bio_to_string(bio_out)

    signed_data = base64.b64encode(sigbytes)
    return SUCCESS, signed_data
except Exception as err:
    print(""Exception happens in sign_data and error is: "", err)
    return 0, str(err)

","2564","<python><pkcs#7>","5","1","2","2018-11-30 11:10:58","41553623","1","5","","","","2013-04-29 17:00:25",""
"15735354","php, openssl and GOST","I'm trying to sign an S/MIME with PHP, using a pair of GOST-encrypted certificate and a private key.
When using openssl itself from a console everything is fine:
/usr/local/openssl/bin/openssl cms -sign -in file.txt -out signedfile.txt -signer p12.pem
(signedfile.txt is created)

/usr/local/openssl/bin/openssl cms -verify -in signedfile.txt -out signedddata.txt -no_signer_cert_verify -issuer_checks -ignore_critical
Verification successful

When using PHP code I'm kinda stuck:
$res = openssl_pkcs7_sign(""file.txt"", ""phpsignedfile.txt"", 'file://'.realpath('./p12.pem'), 'file://'.realpath('./p12.pem'), array(""To"" => ""foo@bar.com"", ""From: FooBar <foo@bar.com>"", ""Subject"" => ""Foo Bar""));

    if (!$res) {
        while ($msg = openssl_error_string())
            echo $msg . ""<br />\n"";
        echo ""Failed to sign.\n""; exit;
    }

I get:
# /usr/local/php/bin/php sign-clear.php
PHP Warning:  openssl_pkcs7_sign(): error getting private key in /root/tests/sign-clear.php on line 3
error:0609E09C:digital envelope routines:PKEY_SET_TYPE:unsupported algorithm<br />
error:0606F076:digital envelope routines:EVP_PKCS82PKEY:unsupported private key algorithm<br />
error:0907B00D:PEM routines:PEM_READ_BIO_PRIVATEKEY:ASN1 lib<br />
Failed to sign.

The 'error getting private key' is all the time here, except for when it really cannot be loaded I get the 'no start line error'. So this output really looks like PHP openssl module cannot find a proper cipher.
How do I tell PHP that this is a GOST cipher ? I'm telling this to openssl either using a config file, or using a direct '-engine gost' option. Is there a way to tell PHP the same thing ?
I have indeed a PHP compiled and linked to a GOST-enabled openss 1.0.1e (openssl module was built with PHP together):
# /usr/local/openssl/bin/openssl ciphers | grep -i GOST
ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:SRP-DSS-AES-256-CBC-SHA:SRP-RSA-AES-256-CBC-SHA:DHE-DSS-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA256:DHE-RSA-AES256-SHA:DHE-DSS-AES256-SHA:DHE-RSA-CAMELLIA256-SHA:DHE-DSS-CAMELLIA256-SHA:GOST2001-GOST89-GOST89:GOST94-GOST89-GOST89:ECDH-RSA-AES256-GCM-SHA384:ECDH-ECDSA-AES256-GCM-SHA384:ECDH-RSA-AES256-SHA384:ECDH-ECDSA-AES256-SHA384:ECDH-RSA-AES256-SHA:ECDH-ECDSA-AES256-SHA:AES256-GCM-SHA384:AES256-SHA256:AES256-SHA:CAMELLIA256-SHA:PSK-AES256-CBC-SHA:ECDHE-RSA-DES-CBC3-SHA:ECDHE-ECDSA-DES-CBC3-SHA:SRP-DSS-3DES-EDE-CBC-SHA:SRP-RSA-3DES-EDE-CBC-SHA:EDH-RSA-DES-CBC3-SHA:EDH-DSS-DES-CBC3-SHA:ECDH-RSA-DES-CBC3-SHA:ECDH-ECDSA-DES-CBC3-SHA:DES-CBC3-SHA:PSK-3DES-EDE-CBC-SHA:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:SRP-DSS-AES-128-CBC-SHA:SRP-RSA-AES-128-CBC-SHA:DHE-DSS-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-SHA256:DHE-DSS-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA:DHE-RSA-SEED-SHA:DHE-DSS-SEED-SHA:DHE-RSA-CAMELLIA128-SHA:DHE-DSS-CAMELLIA128-SHA:ECDH-RSA-AES128-GCM-SHA256:ECDH-ECDSA-AES128-GCM-SHA256:ECDH-RSA-AES128-SHA256:ECDH-ECDSA-AES128-SHA256:ECDH-RSA-AES128-SHA:ECDH-ECDSA-AES128-SHA:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:SEED-SHA:CAMELLIA128-SHA:IDEA-CBC-SHA:PSK-AES128-CBC-SHA:ECDHE-RSA-RC4-SHA:ECDHE-ECDSA-RC4-SHA:ECDH-RSA-RC4-SHA:ECDH-ECDSA-RC4-SHA:RC4-SHA:RC4-MD5:PSK-RC4-SHA:EDH-RSA-DES-CBC-SHA:EDH-DSS-DES-CBC-SHA:DES-CBC-SHA:EXP-EDH-RSA-DES-CBC-SHA:EXP-EDH-DSS-DES-CBC-SHA:EXP-DES-CBC-SHA:EXP-RC2-CBC-MD5:EXP-RC4-MD5

(notice it's the default config output)
# ldd /usr/local/php/bin/php
        linux-vdso.so.1 =>  (0x00007fff42455000)
        libcrypt.so.1 => /lib/libcrypt.so.1 (0x00007f1077404000)
        libresolv.so.2 => /lib/libresolv.so.2 (0x00007f10771ee000)
        librt.so.1 => /lib/librt.so.1 (0x00007f1076fe5000)
        libmcrypt.so.4 => /usr/lib/libmcrypt.so.4 (0x00007f1076db3000)
        libltdl.so.7 => /usr/lib/libltdl.so.7 (0x00007f1076baa000)
        libdl.so.2 => /lib/libdl.so.2 (0x00007f10769a5000)
        libfreetype.so.6 => /usr/lib/libfreetype.so.6 (0x00007f107671d000)
        libz.so.1 => /usr/lib/libz.so.1 (0x00007f1076506000)
        libpng12.so.0 => /lib/libpng12.so.0 (0x00007f10762df000)
        libjpeg.so.62 => /usr/lib/libjpeg.so.62 (0x00007f10760bc000)
        libcrypto.so.1.0.0 => /usr/local/openssl/lib/libcrypto.so.1.0.0 (0x00007f1075ce2000)
        libssl.so.1.0.0 => /usr/local/openssl/lib/libssl.so.1.0.0 (0x00007f1075a78000)
        libmysqlclient.so.16 => /usr/lib/libmysqlclient.so.16 (0x00007f107565b000)
        libpthread.so.0 => /lib/libpthread.so.0 (0x00007f107543f000)
        libnsl.so.1 => /lib/libnsl.so.1 (0x00007f1075226000)
        libm.so.6 => /lib/libm.so.6 (0x00007f1074fa4000)
        libxml2.so.2 => /usr/lib/libxml2.so.2 (0x00007f1074c53000)
        libc.so.6 => /lib/libc.so.6 (0x00007f10748f0000)
        /lib64/ld-linux-x86-64.so.2 (0x00007f1077646000)

","There's actually a set of bug reports, all mentioning that ext/openssl/openssl.c should be patched; adding
OPENSSL_config(NULL);

before a set of
SSL_library_init();
OpenSSL_add_all_ciphers();
OpenSSL_add_all_digests();

calls. After that openssl starts to work with any engines from a config pointed OPENSSL_CONF variable with.
","2519","<php><openssl><digital-signature><pkcs#7><gost3410>","1","1","1","2014-04-18 10:39:22","15735355","0","","642653","","2014-04-18 10:39:22","2013-03-22 15:52:27",""
"47970223","How to create a PKCS#7 detached signature with .Net Core?","I want to create PKCS#7 detached signature with .Net Core (2.0).   
I read all answers here more or less relevant to my issue and found this and this answers. All other were helpless. The first example do exactly what I need but it relies on .NetFramework.
The second one use Bouncy Castle library and do little different but similar thing. I found Portable.BouncyCastle project worked on  .Net Core. As I can understand it is the only option for me.
This is the code from the first example with some modifications:
    string s = ""data string"";
    byte[] data = Encoding.UTF8.GetBytes(s);        
    X509Certificate2 certificate = null;
    X509Store my = new X509Store(StoreName.My,StoreLocation.CurrentUser);
    my.Open(OpenFlags.ReadOnly);
    certificate = my.Certificates.Find(X509FindType.FindByThumbprint, ""my thumbprint"", false)[0];
    if (certificate == null) throw new Exception(""No certificates found."");

    ContentInfo content = new ContentInfo(new Oid(""1.2.840.113549.1.7.1""),data);
    SignedCms signedCms = new SignedCms(content, true);

    CmsSigner signer = new CmsSigner(certificate);
    signer.DigestAlgorithm = new Oid(""SHA256""); 

    // create the signature
    signedCms.ComputeSignature(signer);
    return signedCms.Encode();

It works fine in my case.  signedCms.Encode() returns 1835 bytes and this value pass validation.
But if I use BounceCastle I get another result. This is the code:
                X509Certificate2 certificate = null;
        X509Store my = new X509Store(StoreName.My, StoreLocation.CurrentUser);
        my.Open(OpenFlags.ReadOnly);

        certificate = my.Certificates.Find(X509FindType.FindByThumbprint, ""my thumbprint"", false)[0];
        var privKey = DotNetUtilities.GetRsaKeyPair(certificate.GetRSAPrivateKey()).Private;
        var cert = DotNetUtilities.FromX509Certificate(certificate);

        var content = new CmsProcessableByteArray(data);

        var generator = new CmsSignedDataGenerator();

        generator.AddSigner(privKey, cert, CmsSignedGenerator.EncryptionRsa, CmsSignedGenerator.DigestSha256);

        var signedContent = generator.Generate(content, false);
        return signedContent.GetEncoded();

signedContent.GetEncoded() returns 502 bytes and this result can't be validated. I understand that I'm doing wrong something but I don't know what. 
How should I modify the sample with Bouncy Castle that it get me the same result as the code above?
","I found an another discussion that gave me a clue. There is a link to a GitHub repo with an example application. I modified it slightly and now it works as expected. Here is the code:
            X509Certificate2 certificate = null;
        X509Store my = new X509Store(StoreName.My, StoreLocation.CurrentUser);
        my.Open(OpenFlags.ReadOnly);

        certificate = my.Certificates.Find(X509FindType.FindByThumbprint, ""thumbprint"", false)[0];
        var privKey = DotNetUtilities.GetRsaKeyPair(certificate.GetRSAPrivateKey()).Private;
        var cert = DotNetUtilities.FromX509Certificate(certificate);

        var content = new CmsProcessableByteArray(data);

        var generator = new CmsSignedDataGenerator();

        generator.AddSigner(privKey, cert, CmsSignedGenerator.EncryptionRsa, CmsSignedGenerator.DigestSha256);

        var signedContent = generator.Generate(content, false);

        string hashOid = OID.SHA256;

        var si = signedContent.GetSignerInfos();
        var signer = si.GetSigners().Cast<SignerInformation>().First();

        SignerInfo signerInfo = signer.ToSignerInfo();

        Asn1EncodableVector digestAlgorithmsVector = new Asn1EncodableVector();
        digestAlgorithmsVector.Add(
            new AlgorithmIdentifier(
                algorithm: new DerObjectIdentifier(hashOid),
                parameters: DerNull.Instance));

        // Construct SignedData.encapContentInfo
        ContentInfo encapContentInfo = new ContentInfo(
            contentType: new DerObjectIdentifier(OID.PKCS7IdData),
            content: null);

        Asn1EncodableVector certificatesVector = new Asn1EncodableVector();
        certificatesVector.Add(X509CertificateStructure.GetInstance(Asn1Object.FromByteArray(cert.GetEncoded())));

        // Construct SignedData.signerInfos
        Asn1EncodableVector signerInfosVector = new Asn1EncodableVector();
        signerInfosVector.Add(signerInfo.ToAsn1Object());

        // Construct SignedData
        SignedData signedData = new SignedData(
            digestAlgorithms: new DerSet(digestAlgorithmsVector),
            contentInfo: encapContentInfo,
            certificates: new BerSet(certificatesVector),
            crls: null,
            signerInfos: new DerSet(signerInfosVector));

        ContentInfo contentInfo = new ContentInfo(
            contentType: new DerObjectIdentifier(OID.PKCS7IdSignedData),
            content: signedData);

        return contentInfo.GetDerEncoded();

","2497","<c#><.net-core><bouncycastle><pkcs#7>","3","5","1","2017-12-26 05:08:05","47974075","2","2","","","","2017-12-25 16:11:45",""
"29251895","PDF Signature digest","I have a quick question about calculating the digest of a PDF document to use for a digital signature (somewhat related to one of my earlier questions, I'm trying to figure out why you would need to know a client's certificate to create the correct digest). 
In Adobe's documentation about the PDF format the following is specified:

A byte range digest shall be computed over a range of bytes in the file, that shall be indicated by the
  ByteRange entry in the signature dictionary. This range should be the entire file, including the signature
  dictionary but excluding the signature value itself (the Contents entry).

So at this point things seem fairly simple, just digest everything except the /Contents entry in the /Sig dictionary. The actual data in the /Contents entry is specified as followed:

For public-key signatures, Contents should be either a DER-encoded
  PKCS#1 binary data object or a DER-encoded PKCS#7 binary data
  object.

So still no problems, I can (probably) generate the digest, reserve space for the /Contents entry and attach this PKCS#7 object later on. The confusion starts when I read the following: 

Revocation information is a signed attribute, which means that the
  signing software must capture the revocation information before signing. A similar requirement applies to the
  chain of certificates. The signing software must capture and validate the certificate's chain before signing.

So the thing I'm not quite getting: Apparently the /Contents entry (containing the certificate and signed digest) is not digested, yet the chain of certificates is a signed attribute (and thus needs to be digested?).
I would appreciate it if someone could further specify exactly what is digested, and perhaps better explain the signed attributes to me. The main question that I want to answer is: Can I actually create a signable digest without knowing someone's certificate beforehand? (I'm working with a pkcs7 detached signature)
","In short:

Can I actually create a signable digest without knowing someone's certificate beforehand?

In case of SubFilter ETSI.CAdES.detached or adbe.pkcs7.detached you can create the document digest without knowing someone's certificate beforehand.
You usually, though, have to know the signer certificate before starting to generate the CMS signature container to embed into the PDF.
In detail:
(Beware, the following is somewhat simplified.)

I can (probably) generate the digest, reserve space for the /Contents entry and attach this PKCS#7 object later on.

If you first reserve space and thereafter generate the digest, this indeed is how things are done.

The confusion starts when I read the following:

Revocation information is a signed attribute, which means that the signing software must capture the revocation information before signing. A similar requirement applies to the chain of certificates. The signing software must capture and validate the certificate's chain before signing.

So the thing I'm not quite getting: Apparently the /Contents entry (containing the certificate and signed digest) is not digested, yet the chain of certificates is a signed attribute (and thus needs to be digested?).
I would appreciate it if someone could further specify exactly what is digested, and perhaps better explain the signed attributes to me.

The main fact one has to be aware of is that in case of PKCS#7/CMS signature containers signing usually does not merely include one hash calculation but at least two!
The first hash, the document hash, is indeed calculated for the entire file, including the signature dictionary but excluding the signature value itself (the Contents entry) (you might want to read this answer for more details).

But this is not the hash immediately used when applying the signature algorithm.
During the generation of the PKCS#7/CMS signature container (unless in its most primitive form) you create a structure called ""signed attributes"".
You fill this structure with multiple attributes (name-value-pairs), among them the already calculated document hash but also others, e.g. the Adobe-style revocation information you read about.
When you have finished creating that structure, you hash this structure and generate a signature for it.
You then can put together the PKCS#7/CMS signature container using these signed attributes, the signature, and some more information not signed by this signature, e.g. certificates, signature time stamps, ...
For more details concerning the signature container read this answer.
Finally you embed this signature container into the reserved space in the PDF.

The main question that I want to answer is: Can I actually create a signable digest without knowing someone's certificate beforehand? (I'm working with a pkcs7 detached signature)

In case of SubFilter ETSI.CAdES.detached or adbe.pkcs7.detached you can create the document digest without knowing someone's certificate beforehand.
Depending on the CMS signature profile, though, you usually have to know the signer certificate before starting to generate the signature container because many profiles require the presence of a signed attribute referencing the signer certificate.
Clarifications:
The OP asked some follow-up questions in a comment:

1.: One of the signed attributes is the document hash(without the /contents), so if I understand correctly this is the unsigned hash?

As the ""signed attributes"" eventually are hashed and signed, that document hash therein is not immediately, directly signed but it is indirectly signed as part of this structure of attributes. So I wouldn't call it unsigned...


In the end when the user really generates a signature, he signs the hash of the PKCS#7 object?


No, the hash of the ""Signed attributes"" structure which is only a part of the PKCS#7 object, not all of it. There are multiple parts of the PKCS#7/CMS object which are unsigned.


Does the /Contents entry still have a PKCS#7 object that's actually readable for us? (To extract certificates etc for verification) 


The Contents entry does contain a full-fledged PKCS#7/CMS signature container object as a binary string. Thus, yes, you can read it (by reading the value of that binary string) and (if you have code that knows how to parse such a signature container) extract information from it.
Beware, though, the signature container may not contain all data required for verification: E.g., if you verify using the chain (not shell) validation model, you might have to extract the signing time from the respective PDF signature dictionary entry.


When verifying a signature, do we simply extract the embedded PKCS#7 object, recalculate the digest, recalculate the digest of the PKCS#7 object and verify this against the signature using the certificate we get from the PKCS#7 object?


You obviously also have to calculate the digest of the signed PDF byte ranges and compare that value with the signed attribute containing the original document digest.(You might have meant that by recalculate the digest.)
As mentioned in the answer to 3, you might have to retrieve additional information from the PDF for use in the PKCS#7 verification.
Furthermore you say the certificate we get from the PKCS#7 object - please be aware that the PKCS#7/CMS signature container may contain multiple certificates. You have to find the correct one. The CMS SignerInfo SignerIdentifier and the ESS signed attributes shall be used for that.
Furthermore you also have to verify validity and trust of the signer certificate.


Is there any good documentation on what authenticated attributes there are?


You can start reading

section 11 ""Useful Attributes"" of RFC 3852 or RFC 5652: basic CMS
section 12.8 of ISO 32000-1: basic PDF
all of RFC 5126: CAdES
ETSI TS 102778, especially part 2, part 3, and part 4: PAdES

","2484","<pdf><digital-signature><digest><pkcs#7>","5","10","1","2015-04-08 21:45:36","29253469","1","2","589259","","2015-04-08 21:45:36","2015-03-25 09:31:56",""
"13604650","Java BC1.47: Need to extract signer's X509CertificateObject from a CMSSignedData object","I'm trying to extract the signer's X509CertificateObject from a CMSSignedData object using java Bouncy Castle 1.47.
So far I have only been able to extract an org.bouncycastle.asn1.x509.Certificate object.
How do I get a X509CertificateObject from this?
Thanks a lot!
public static X509CertificateObject extractSignersCert(CMSSignedData cmsSignedData)
    throws Exception
{
    SignerInformationStore signerInfoStore;
    SignerInformation signerInfo;
    Store certStore;
    Collection certCollection;
    X509CertificateHolder x509CertHolder;
    X509Certificate cert;
    X509CertificateObject certObj;
    JcaX509CertificateConverter certConverter;

    signerInfoStore = cmsSignedData.getSignerInfos();
    signerInfo = (SignerInformation) signerInfoStore.getSigners().iterator().next();

    certStore = cmsSignedData.getCertificates();
    certCollection = certStore.getMatches(signerInfo.getSID());
    x509CertHolder = (X509CertificateHolder) certCollection.iterator().next();

    certConverter = new JcaX509CertificateConverter();
    certConverter.setProvider(""BC"");

    cert = certConverter.getCertificate(x509CertHolder);
    certObj = (X509CertificateObject) cert;

    return certObj;
}

","Finally found a solution based on this post.
The trick is to use a JcaX509CertificateConverter() and feed it with the X509CertificateHolder you can easily get from the CMSSignedData.
Works just fine.
","2475","<java><x509certificate><bouncycastle><pkcs#7>","1","0","2","2013-02-05 15:03:01","13644686","8","0","1740926","","2012-11-30 11:46:04","2012-11-28 12:03:50",""
"13604650","Java BC1.47: Need to extract signer's X509CertificateObject from a CMSSignedData object","I'm trying to extract the signer's X509CertificateObject from a CMSSignedData object using java Bouncy Castle 1.47.
So far I have only been able to extract an org.bouncycastle.asn1.x509.Certificate object.
How do I get a X509CertificateObject from this?
Thanks a lot!
public static X509CertificateObject extractSignersCert(CMSSignedData cmsSignedData)
    throws Exception
{
    SignerInformationStore signerInfoStore;
    SignerInformation signerInfo;
    Store certStore;
    Collection certCollection;
    X509CertificateHolder x509CertHolder;
    X509Certificate cert;
    X509CertificateObject certObj;
    JcaX509CertificateConverter certConverter;

    signerInfoStore = cmsSignedData.getSignerInfos();
    signerInfo = (SignerInformation) signerInfoStore.getSigners().iterator().next();

    certStore = cmsSignedData.getCertificates();
    certCollection = certStore.getMatches(signerInfo.getSID());
    x509CertHolder = (X509CertificateHolder) certCollection.iterator().next();

    certConverter = new JcaX509CertificateConverter();
    certConverter.setProvider(""BC"");

    cert = certConverter.getCertificate(x509CertHolder);
    certObj = (X509CertificateObject) cert;

    return certObj;
}

","You can use this method.
/**
 * Get all x509 certificates from p7s File(.p7s or .p7b) Base64 format
 * @param p7sFileName
 * @return list of x509 certificates
 */
public static ArrayList<X509Certificate> getCertificates(final String p7sFileName){

    final ArrayList<X509Certificate> certListResult = new ArrayList<X509Certificate>();

    try {

        BufferedReader br = new BufferedReader(new FileReader(p7sFileName));
        StringBuilder str = new StringBuilder();
        br.readLine();
        while(br.ready()){

            String s = br.readLine();
            if(s.startsWith(""-----END PKCS7-----""))
                break;
            else str.append(s);

        }

        byte[] data = Base64.decode(str.toString().getBytes());

        CMSSignedData s = new CMSSignedData(data);
        Store   certStore = s.getCertificates();

        JcaX509CertificateConverter converter = new JcaX509CertificateConverter();

        @SuppressWarnings(""unchecked"")
        ArrayList<X509CertificateHolder> certificateHolders = (ArrayList<X509CertificateHolder>)certStore.getMatches(null); 

        for(X509CertificateHolder holder: certificateHolders){

                X509Certificate cert = converter.getCertificate(holder);
                certListResult.add(cert);

            }

    } catch (FileNotFoundException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (CMSException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (IOException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (CertificateException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }

    return certListResult;

}

","2475","<java><x509certificate><bouncycastle><pkcs#7>","1","0","2","2013-02-05 15:03:01","13644686","8","0","1740926","","2012-11-30 11:46:04","2012-11-28 12:03:50",""
"19763645","C# AES PKCS #7 wrong padding bytes?","I have set up a simple symmetric AES-en/decryption in C#, but I'm having problems with the padding. According to MSDN, the padding bytes for PKCS #7 are supposed to be 0x07, but in my case it's just zero-bytes (0x00).
How is this possible? It almost seems as if this was not correctly implemented in .NET...
Here is my code:
Aes aes = new AesManaged();
aes.Key = new byte[] { /* ...  */ };
aes.IV = new byte[] { /* ... */ };
// Debugging shows:
// aes.Padding = PaddingMode.PKCS7

// the data to encrypt (1 byte only, to demonstrate padding)
byte[] plainData = new byte[1] { 0xFF };
byte[] encData;

// (encrypt)
using (MemoryStream encStream = new MemoryStream())
{
    using (CryptoStream cryptoStream = new CryptoStream(encStream, aes.CreateEncryptor(), CryptoStreamMode.Write))
    {
        cryptoStream.Write(plainData, 0, plainData.Length);
    }
    encData = encStream.ToArray();
}

// (new length is 16 bytes (128 bits), incl. padding)
plainData = new byte[16];

// (decrypt)
using (MemoryStream decrStream = new MemoryStream(encData))
{
    using (CryptoStream cryptoStream = new CryptoStream(decrStream, aes.CreateDecryptor(), CryptoStreamMode.Read))
    {
        cryptoStream.Read(plainData, 0, plainData.Length);
    }
}

// output:
// 16 bytes,
// 1st byte = 0xFF,
// other 15 bytes = 0x00 (instead of 0x07!)

","The decryptor is correctly removing the padding that was applied by the encryptor, thus the zero bytes in your output are simply the un-touched bytes in the original plainData array. The cryptoStream.Read(...) call returns an integer indicating the number of bytes that were read (1 in this case), which you should be using to determine how many bytes in the output array are valid data.
If for whatever reason you are interested in seeing the padding bytes, you can set aes.Padding = PaddingMode.None; after the encryption is performed, but before you create the decryptor. You will then find that cryptoStream.Read(...) returns 16, and plainData has 0xff as its first byte, followed by 15 bytes of 0x0f padding (not sure why your question indicates you were expecting 0x07 though).
","2458","<c#><aes><padding><pkcs#7>","0","9","2","2013-11-04 08:38:38","19763790","2","","","","","2013-11-04 07:56:58",""
"19763645","C# AES PKCS #7 wrong padding bytes?","I have set up a simple symmetric AES-en/decryption in C#, but I'm having problems with the padding. According to MSDN, the padding bytes for PKCS #7 are supposed to be 0x07, but in my case it's just zero-bytes (0x00).
How is this possible? It almost seems as if this was not correctly implemented in .NET...
Here is my code:
Aes aes = new AesManaged();
aes.Key = new byte[] { /* ...  */ };
aes.IV = new byte[] { /* ... */ };
// Debugging shows:
// aes.Padding = PaddingMode.PKCS7

// the data to encrypt (1 byte only, to demonstrate padding)
byte[] plainData = new byte[1] { 0xFF };
byte[] encData;

// (encrypt)
using (MemoryStream encStream = new MemoryStream())
{
    using (CryptoStream cryptoStream = new CryptoStream(encStream, aes.CreateEncryptor(), CryptoStreamMode.Write))
    {
        cryptoStream.Write(plainData, 0, plainData.Length);
    }
    encData = encStream.ToArray();
}

// (new length is 16 bytes (128 bits), incl. padding)
plainData = new byte[16];

// (decrypt)
using (MemoryStream decrStream = new MemoryStream(encData))
{
    using (CryptoStream cryptoStream = new CryptoStream(decrStream, aes.CreateDecryptor(), CryptoStreamMode.Read))
    {
        cryptoStream.Read(plainData, 0, plainData.Length);
    }
}

// output:
// 16 bytes,
// 1st byte = 0xFF,
// other 15 bytes = 0x00 (instead of 0x07!)

","For PKCS7 mode it should be blocksize - contentsize, i.e. 16 - 1 = 15 in your case. Your mistake is that you expect it after decryption but padding happens internally before encryption. There are no guarantees that plainData will contain padded bytes according to mode choosen.
","2458","<c#><aes><padding><pkcs#7>","0","0","2","2013-11-04 08:38:38","19763790","2","","","","","2013-11-04 07:56:58",""
"6561204","How to create an pkcs7 block for key exchange only (bouncy castle)","I am trying to create a file containing a pkcs 7 block. In this container, I need my public key and my signer info (no signed data!!!). I have already tried several alternatives without any luck. This is my code:
First the signature info:
 List<X509Certificate> certs = new List<X509Certificate> { cert };
 IX509Store x509Certs = X509StoreFactory.Create(
      ""CERTIFICATE/COLLECTION"",
      new X509CollectionStoreParameters(certs));

 var ias = new IssuerAndSerialNumber(cert.IssuerDN, cert.SerialNumber);
 SignerIdentifier sid = new SignerIdentifier(ias);
 AlgorithmIdentifier algoDigId = new AlgorithmIdentifierCmsSignedGenerator.DigestSha1);
 AlgorithmIdentifier algoCryptId = new AlgorithmIdentifier(CmsSignedGenerator.EncryptionRsa);

 SignerInfo si = new SignerInfo(sid, algoDigId, null, algoCryptId,
                                      new DerOctetString(contentSignature), null);

the contentSignature byte[] contains a signed digest for some info.
Now, when I try to create the SignedData, everything goes down
  var signedContent = new ContentInfo(CmsObjectIdentifiers.Data, DerNull.Instance);
  CmsSignedData csd = new CmsSignedData(signedContent);

I am not trying to send info, this is only for key exchange and verification purposes. I believe this is a valid scenario but somehow this does not work.
Thanks for your help.
UPDATE:
more context.
I am trying to sign a JAR from a .Net executable. I have pretty much done the rest of the process but jarsigner creates a pkcs7 file with:

ContentInfo set to type Data and no content. So far, making new ContentInfo( CmsObjectIdentifiers.Data, null) just throws an exception while adding the content info to the CmsData
A SignerInfo is added, this SignerInfo includes a signature previously derived from the JAR's content.

","Here is a simple example of what I think you want to do. NOTE: The code below is for the Java bouncycastle but I think the classes are very similar in the C# version of the library.
import java.io.*;
import java.security.cert.*;
import java.util.ArrayList;
import java.util.List;

import org.bouncycastle.cert.jcajce.JcaCertStore;
import org.bouncycastle.cms.*;

public class PKCS7CertList1
{

    public static byte[] buildCMSCertThingy() throws Exception
    {
        final List<X509Certificate> certs = new ArrayList<X509Certificate>();
        final InputStream certIs = new FileInputStream(""google_com.p7b"");
        final CertificateFactory cf = CertificateFactory.getInstance(""X.509"");
        for (Certificate cert : cf.generateCertificates(certIs))
        {
            certs.add((X509Certificate) cert);
        }
        certIs.close();
        System.err.printf(""Number of certs parsed = %d%n"", certs.size());
        final CMSSignedDataGenerator cmsGen = new CMSSignedDataGenerator();
        cmsGen.addCertificates(new JcaCertStore(certs));
        final CMSSignedData sigData = cmsGen.generate(new CMSAbsentContent(), false);
        return sigData.getEncoded();
    }
    public static void main(String[] args) throws Exception
    {   
        FileOutputStream fos = new FileOutputStream(""signed_data.der"");
        fos.write(buildCMSCertThingy());
        fos.close();
    }

}

","2438","<c#><rsa><bouncycastle><pkcs#7>","1","0","2","2011-08-10 15:06:55","7012920","3","","826598","","2011-07-05 20:31:19","2011-07-03 05:11:56",""
"6561204","How to create an pkcs7 block for key exchange only (bouncy castle)","I am trying to create a file containing a pkcs 7 block. In this container, I need my public key and my signer info (no signed data!!!). I have already tried several alternatives without any luck. This is my code:
First the signature info:
 List<X509Certificate> certs = new List<X509Certificate> { cert };
 IX509Store x509Certs = X509StoreFactory.Create(
      ""CERTIFICATE/COLLECTION"",
      new X509CollectionStoreParameters(certs));

 var ias = new IssuerAndSerialNumber(cert.IssuerDN, cert.SerialNumber);
 SignerIdentifier sid = new SignerIdentifier(ias);
 AlgorithmIdentifier algoDigId = new AlgorithmIdentifierCmsSignedGenerator.DigestSha1);
 AlgorithmIdentifier algoCryptId = new AlgorithmIdentifier(CmsSignedGenerator.EncryptionRsa);

 SignerInfo si = new SignerInfo(sid, algoDigId, null, algoCryptId,
                                      new DerOctetString(contentSignature), null);

the contentSignature byte[] contains a signed digest for some info.
Now, when I try to create the SignedData, everything goes down
  var signedContent = new ContentInfo(CmsObjectIdentifiers.Data, DerNull.Instance);
  CmsSignedData csd = new CmsSignedData(signedContent);

I am not trying to send info, this is only for key exchange and verification purposes. I believe this is a valid scenario but somehow this does not work.
Thanks for your help.
UPDATE:
more context.
I am trying to sign a JAR from a .Net executable. I have pretty much done the rest of the process but jarsigner creates a pkcs7 file with:

ContentInfo set to type Data and no content. So far, making new ContentInfo( CmsObjectIdentifiers.Data, null) just throws an exception while adding the content info to the CmsData
A SignerInfo is added, this SignerInfo includes a signature previously derived from the JAR's content.

","As this question is specifically related to signing an APK / JAR file, I will answer in that context.
Assuming that:
You have performed all the following setup steps:

Generated a valid MANIFEST.MF
Generated a valid CERT.SF
Have a valid PFX file loaded into an X509Certificate2 variable named ""cert""
Have the binary contents of the CERT.SF file in a byte array named ""manifestSFBytes""

The following code will generate a valid detached pkcs7 signature which is effectively your CERT.RSA content:
string OID_DATA = ""1.2.840.113549.1.7.1"";

// setup the data to sign
ContentInfo content = new ContentInfo( new Oid( OID_DATA ), manifestSFBytes );
SignedCms signedCms = new SignedCms( content, true );
CmsSigner signer = new CmsSigner( SubjectIdentifierType.IssuerAndSerialNumber, cert );

// create the signature
signedCms.ComputeSignature( signer );
byte[] data = signedCms.Encode();

This code relies on the System.Security.Cryptography.Pkcs namespace and does not require BouncyCastle.
What is going on here is that the raw content (signature file binary data) is hashed and signed in one go by the ComputeSignature() call.
Therefore no ""null ContentInfo"" tricks are necessary i.e. the ContentInfo contains the raw data to be signed and hashed unlike the Java implementation which signs and hashes the content prior to PKCS7 generation.
HTH
-(e)
","2438","<c#><rsa><bouncycastle><pkcs#7>","1","1","2","2011-08-10 15:06:55","7012920","3","","826598","","2011-07-05 20:31:19","2011-07-03 05:11:56",""
"11591089","Openssl PKCS#5/PKCS#7 padding","I was wondering how openssl handles a message that is dividable by 8 bytes when using AES-128-CBC. How can openssl detect that there is no padding (PKCS#5/PKCS#7) to be removed? Especially when the message ends in a character with an ASCII code less than or equal to 8.
I hope my question is clear.
Thanks
","Well the answer is that padding is always added, even if the data can be divided by the block size. Thus a 8 byte string will be padded with 8 bytes (with ASCII code 8).
","2437","<openssl><padding><pkcs#7><pkcs#5>","2","3","1","2014-01-04 18:25:57","11725687","0","1","759019","","2012-07-21 09:45:01","2012-07-21 09:41:20",""
"21555926","How to use openssl with a hardware encryption chip?","I have a hardware that I use to generate RSA keys and signatures. I need two things:
1) Generate a certificate request. With the hardware I can get the public key for the certificate and do the signing part. I need the code to do the certificate generation, i.e., do the ASN.1/DER/PEM stuff.
2) Sign data using S/MIME. Again, I will use the hardware to do the signing part, but I need the code to do the format part: PKCS#7 to envelop both a signature and a x509 certificate resulting from the previous task.
So I could use openssl both to generate the CSR and the S/MIME formats, but openssl requires for such tasks a private key to sign, and as I said the signing I do it via hardware. I know there is a mechanism called ""engines"" to plug hardware functions to openssl, but it uses dynamic libraries, which are not supported on my platform (early uClinux for ARM).
So the question is: is there any other way I could force openssl to take an extern public key, and more importantly, to delegate the signing to my hardware? Otherwise, would you recommend another C/C++ library I could use to do this? I really don't need a cryptographic library, it would suffice with a library that knows how to generate those formats (certificate requests and S/MIME).
","Engines are still your way to go, as they are the only way to offload cryptographic tasks using OpenSSL away from the library itself. As far as I understand you, you can build anything but it has to be statically linked into OpenSSL because you cannot load shared libraries (or build them?). I don't actually know uClinux, so bear with me here.
From what I remember, loading shared library is actually done through an engine called dynamic and that is a special engine to support such loading. That means OpenSSL's default assumption is that you will link during compile time and the engine can be considered readily available inside OpenSSL.
So what you want to do is create an engine that is capable of performing crypto on existing keys and build it together with OpenSSL. As an example, try to build OpenSSL natively (without modification) and run openssl engine. It will readily show you all builtin engines (one of which is dynamic but there are others such as chil for nCipher HSMs.
I had a similar problem about two years ago (though I already had a working engine) where I first needed to create a CSR w/ private key and then do crypto with that (or a different) private key (actually PKCS#7 as well). My solution was to use the command line tools to generate the key and CSR and only use OpenSSL for the most important cryptographic operations, i.e. signing and decrypting (I actually only needed the RSA sign and dec functions).
OpenSSL is a horribly documented project and I had to read a lot of its source code to get thinks working correctly. To get your engine up and running, I suggest you read some source code of engines (among others, I worked with e_capi.c which I found fairly easy to understand). For the actual engine usage, you might find some of my sscep source code helpful.
The very nice thing about engines: Once they are initialized, they operate transparently which means you initialize an engine, load a key from it and then you are set: Passing this key to OpenSSLs crypto functions is no different than using a native key.
","2410","<c++><encryption><openssl><certificate><pkcs#7>","0","3","1","2014-09-05 16:31:12","21566690","0","1","","","","2014-02-04 15:02:08",""
"22470156","Adding external PKCS1 byte array and Certificate to CMS container with Java","We have client applications (Applets and Silverlight) that create a PKCS1 v2.1 digital signature. The digital signature is created as PKCS1 since the original content is not downloaded to the client, only the contents' hash is sent to the client to conserve bandwidth.
We are attempting to create a PKCS7/CMS container server side, based on the information from this post:

Reading certificate and loading as X509Certificate type
Reading PKCS1 signature as base64 and loading as byte array
Instantiating new ASN1ObjectIdentifier and setting PKCS1 OID (1.2.840.113549.1.1)
Creating new CMSTypedData CMSProcessableByteArray, using asn1 object and signare byte[] as parameters
Create new CMSSignedGenerator and add certificates
Create new CMSSignedData as detached signature using CMSTypedData type

However, when getting to steps 5 and 6 things break, as the BC CMSSignedGenerator and CMSSignedData classes do not support adding signers without the private key:
CMS creation:
    // Add BC to environment
    Security.addProvider(new BouncyCastleProvider());

    // Read certificate and convert to X509Certificate
    CertificateFactory certFactory = CertificateFactory.getInstance(""X.509"");
    Path certPath = Paths.get(""C:\\MyCertificate.cer"");
    byte[] certData = Files.readAllBytes(certPath);
    InputStream in = new ByteArrayInputStream(certData);
    X509Certificate cert = (X509Certificate)certFactory.generateCertificate(in);

    // Add signer certificates to List and add them to store
    List<X509Certificate> certList = new ArrayList<X509Certificate>();
    certList.add(cert);
    Store certs = new JcaCertStore(certList);

    // Get signature in Base64, decode and convert to byte array
    // Signature signature = Signature.getInstance(""SHA1WithRSA"", ""BC"");
    String signatureBase64 = ""gjTbsD0vSOi6nMlRVbpTLRQ5j+g2h8iEH1DgQx93PDBuwzWT47urKxMAS+75dAhQrkreLt9TGZaDN85e5xEpIF12mK1G+AgCNc370I1bjxOvUU67IVxHkZ+IX8kzSiD2uNuQtk3IrwUqyL30TIo+LDAXmY1AQVZwXAaOYG4bXxI="";
    BASE64Decoder decoder = new BASE64Decoder();
    byte[] signatureByte = decoder.decodeBuffer(signatureBase64);

    // Instantiate new ANS1ObjectIdentifier to identify PKCS1 signature
    ASN1ObjectIdentifier asn1OidPkcs1 = new ASN1ObjectIdentifier(""1.2.840.113549.1.1"");

    // Table generator
    /*AttributeTable attrT = new AttributeTable();
    SimpleAttributeTableGenerator sAttrTGen = new SimpleAttributeTableGenerator();*/

    // Instantiate new CMSProcessable object
    CMSTypedData msg = new CMSProcessableByteArray(asn1OidPkcs1, signatureByte);

    // Instantiate new CMSSignedDataGenerator object
    CMSSignedDataGenerator gen = new CMSSignedDataGenerator();

    // ContentSigner sha1Signer = new JcaContentSignerBuilder(""SHA1withRSA"").setProvider(""BC"").s
    gen.addCertificates(certs);
    CMSSignedData sigData = gen.generate(msg, false);


    // BASE64Encoder encoder = new BASE64Encoder();
    new File(""C:\\MyCMS.p7s"");
    FileOutputStream fileOuputStream = new FileOutputStream(""C:\\Users\\gregwerner\\Documents\\Archivos\\miFirma.p7s""); 
    fileOuputStream.write(sigData.getEncoded());
    fileOuputStream.flush();
    fileOuputStream.close();

}

Any ideas on how to complete CMS container? Perhaps using AttributeTable to add muliple OID's for time stamps, etc., but that doesn't seem to work either.
","I found the answer after looking at this reference project https://code.google.com/p/j4ops/. This guide was also a big help although it deals specifically with PDFs using iText which use BC from crypto operations: http://itextpdf.com/book/digitalsignatures20130304.pdf. The trick is to delegate the signing operation to an external provider (PKCS11, PKCS12, etc) by implementing a Signer interface that uses a sign(byte[] toEncrypt) method, for example. This way, the provider can be set and then just call the sign method and leave the implementation details on how to sign to the provider itself.
Bouncy Castle uses a CMSSignedDataGenerator class with a SignerInf internal class to build the CMS container and the signer information, respectively. So the trick is to build a SignerInf object that doesn't need the private key, as sign() operation should be delegated to the provider. The private key may not even be available particularly when using smart cards. Additionally, the information that needs to be added as signed attributes and/or unsigned attributes needs to be considered when signing the hash and when building the CMS container. So these are the basic steps to solve the problem:
// Build the items to encrypt, objects for method parameters would be obtained previously.
byte[] toEncrypt = externalSignerInfoGenerator.getCmsBytesToSign(hash, 
            signingTime, 
            PKCSObjectIdentifiers.data, 
            x509Cert, 
            timeStampToken, 
            ocsp);
// The externalSignerInfoGenerator.getCmsBytesToSign is a method from a re implemention of the 
// SignerInf inner class from CMSSignedDataGenerator and is used to get a byte array from an 
// org.bouncycastle.asn1.ASN1EncodableVector. To build the vector one should add attributes to
// their corresponding OID's using the org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers interface,
// for example:
ASN1EncodableVector signedAttrVector = buildSignedAttributes (hash, signingTime, contentType,
x509Cert, ocspResp);
// This would call the buildSignedAttributes method to build the signed attributes vector
ASN1EncodableVector signedAttrVector = new ASN1EncodableVector();
// Add CMS attributes
signedAttrVector.add (new Attribute(CMSAttributes.contentType, new DERSet (contentType)));
signedAttrVector.add (new Attribute (CMSAttributes.signingTime, new DERSet(new Time (signingTime))));
signedAttrVector.add(new Attribute(CMSAttributes.messageDigest, new DERSet(new DEROctetString(hash))));
// Not all attributes are considered in BC's CMSAttributes interface, therefore one would have to add 
// an additional step:
signedAttrVector.add(buildOcspResponseAttribute(ocspResp));
// This method would call buildOcspResponseAttribute to add the object as a PKCSObjectIdentifier
protected Attribute buildOcspResponseAttribute (byte[] ocspResp) throws IOException, CMSException {
    return new Attribute (PKCSObjectIdentifiers.id_aa_ets_revocationRefs, 
    new DERSet(DERUtil.readDERObject(ocspResp)));
}  

// Call sign method from provider, such as PKCS11, PKCS12, etc.
byte [] signature = getSignProvider().sign(toEncrypt);
// Now build standard org.bouncycastle.cms.SignerInfoGenerator with hash, signed data 
// and certificate to add to CMS, create attached or detached signature
// create signed envelope
CMSSignedData envdata = externalCMSSignedDataGenerator.generate(false);                
byte[] enveloped = envdata.getEncoded();

","2397","<java><digital-signature><bouncycastle><pkcs#7>","4","4","1","2016-08-25 23:30:01","","2","1","-1","","2017-05-23 10:29:14","2014-03-18 04:04:14",""
"32083044","Warning: openssl_pkcs7_sign(): error getting private key using WAMP","I am trying to sign PDF using TCPDF, but I have got this error: 
Warning: openssl_pkcs7_sign(): error getting private key in C:\wamp\www\tcpdf\tcpdf.php on line 7594.   

My PHP version is 5.5.12 and TCPDF 6.2.11. Windows 7. 
Other examples run well but this fails. I have tried:
'file://'.( dirname(FILE)).'./path/to/file' and again $certificate = 'file://'.realpath('../tcpdf.crt'); 

but does not work for me.
","I think file:// is not correct. You fetch die real path with dirname(__FILE__) that should be enough. So i prefer:
$certificate = __DIR__'/../tcpdf.crt';

__DIR__ or dirname(FILE) is the path to the file you've in. To you can go back with /../../ to your file depends on your folder location for your certificate files. 
","2347","<php><openssl><tcpdf><pkcs#7>","4","0","2","2016-11-12 21:29:21","","0","1","5008845","","2015-08-19 00:01:57","2015-08-18 21:39:58",""
"32083044","Warning: openssl_pkcs7_sign(): error getting private key using WAMP","I am trying to sign PDF using TCPDF, but I have got this error: 
Warning: openssl_pkcs7_sign(): error getting private key in C:\wamp\www\tcpdf\tcpdf.php on line 7594.   

My PHP version is 5.5.12 and TCPDF 6.2.11. Windows 7. 
Other examples run well but this fails. I have tried:
'file://'.( dirname(FILE)).'./path/to/file' and again $certificate = 'file://'.realpath('../tcpdf.crt'); 

but does not work for me.
","You need the 'file://' prefix and the realpath to file:
//in your case
$certificate = 'file://'.realpath('../tcpdf.crt');
// OR for other cases
$certificate = 'file://'.realpath('/tcpdf.crt');
// OR
$certificate = 'file://'.realpath('C:/tcpdf.crt');

","2347","<php><openssl><tcpdf><pkcs#7>","4","0","2","2016-11-12 21:29:21","","0","1","5008845","","2015-08-19 00:01:57","2015-08-18 21:39:58",""
"23906821","Sign Xml with digital certificate in format of PKCS#7 in DER (ITU-T Rec. X.690)","I have a .xml file that has to be signed with digital certificate in format of PKCS#7 version 1.5 (RFC 2315) and DER (ITU-T Recommendation X.690
That .xml will be send to a govt. WebService that only accept the format I mentioned upwards.
What I'm able to do - thanks to this website is digitaly sign .xml with the .pfx file that I generated with Certificate Export Wizard explained below. The class that I'm using to sign is down on mentioned website or here.
From what I tried to understand so far I will need to sign the .xml with .pfx file according to X.690 standards but I'm only able to access this namespace:
using System.Security.Cryptography.X509Certificates;

which is obviously for X.509 format.
Note: 
There are several things I'm confused about - to export the certificate into .pfx I'm using Internet Explorer - Certificate Export Wizard from there I'm able to:
Yes - export private keys - then it will be generated in PKCS#12 but .pfx
No - do not export private keys - Certificate according to standards Cryptographic Message Syntax Standard - PKCS#7 that I guess I need but I would receive .p7b file
I must say that I am a newbie in certificates and digital signatures so I'm not even sure if I'm correctly exporting the certificat and the second thing is how I can sign according to X.690 standards. 
May I know how to sign according to X.690 format please?
Thank you everyone for your time and replies.
My code is following:
bool res = false;
try
{
    byte[] certBytes = System.IO.File.ReadAllBytes(pvkPath);
    X509Certificate2 cert = new X509Certificate2(certBytes, certPass);
    XmlDocument doc = new XmlDocument();

    doc.Load(xmlPath);

    // sign the document with the private key of the certificate
    XmlDsig.SignXml(doc, cert);

    // save the document
    doc.Save(xmlSavePath);

    // verify that the document has a signature
    bool hasSignature = XmlDsig.HasSignatureElement(doc);
    return res = true;
}
catch (Exception)
{ return res; }

","foDigital signature in PKCS#7/CMS format is blob that contains your XML data + signer's x509 public key certificate (.cer file) + Digital signature. The entire blob is encoded in ASN 1.0 format(X690). There may be variations in the blob due to the absence of original data or the signer certificate, This variation is called detached signatures.
Digital signature is generated when you sign your xml file with the signer's private key. This signature can be verified when you send your XML file + signer's public key (as X509 .cer file)+ digital signature to the party who are interested in verifying it.
PFX/p12 is a container that contains both the signer's private key and public key. You get this key pair from either your government or your government approved key custodians. You will then use this PFX to perform digital signature.
PKCS#7 is supported by cryptoAPI.
The above are the basics. This should allow you make your queries more clearly.
","2330","<c#><digital-signature><pkcs#7><pfx>","1","1","1","2014-05-29 15:36:45","23928891","0","","2538352","","2014-05-29 15:36:45","2014-05-28 08:46:46",""
"4689726","Creating and Verifying PKCS #7 signatures in VB.net","Im trying to figure out how to generate and verify PKCS #7 signatures in VB.net. These signatures need to be stored in a separate file to the data they are verifying (eg test.dat and test.dat.sig).  Ive found code to generate signatures in another question, but cant figure out how to verify them
Public Sub SignFile(ByVal theFilename As String, ByVal theCertFile As String, ByVal thePassword As String, ByVal theDestination As String)
    Dim aCertificate = New X509Certificates.X509Certificate2(theCertFile, thePassword)
    Dim aByteArray = IO.File.ReadAllBytes(theFilename)
    Dim anOid = New System.Security.Cryptography.Oid(""1.2.840.113549.1.7.2"")
    Dim aContentInfo = New Pkcs.ContentInfo(anOid, aByteArray)
    Dim aSignedCms = New Pkcs.SignedCms(aContentInfo, True)
    Dim aCmsSigner = New Pkcs.CmsSigner(Pkcs.SubjectIdentifierType.IssuerAndSerialNumber, aCertificate)

    aSignedCms.ComputeSignature(aCmsSigner)
    Dim aSignature = Convert.ToBase64String(aSignedCms.Encode())
    IO.File.WriteAllText(theDestination, aSignature)
End Sub

Thanks
","The following might help you for Verifying CMS/PKCS#7 Signatures

http://www.jensign.com/JavaScience/verify/index.html

","2324","<vb.net><pkcs#7>","0","0","1","2011-03-21 18:02:30","","0","","","","","2011-01-14 09:44:25",""
"8630300","How to print a BIO object in opensl or print time from ASN1_TYPE object","How do I print the value stored in BIO object ""time"". Basically I need to extract signed time.
ASN1_TYPE *asn1obj;         
if (!(asn1obj = PKCS7_get_signed_attribute(si, NID_pkcs9_signingTime))) {
    NSLog(@""Failed to retireve the signing time"");
}else{
    if (asn1obj->type == V_ASN1_UTCTIME) {
        BIO * time = data=BIO_new(BIO_s_bio());
        i = ASN1_UTCTIME_print(time,asn1obj->value.utctime);
        NSLog(@""return value from ASN1_UTCTIME_print %d "",i);                   
    }
}

Thanks
","This is how it get working
if (asn1obj->type == V_ASN1_UTCTIME) {

    NSLog(@""--------------------------->Retireve the signing time"");
    BIO * time = data=BIO_new(BIO_s_bio());                  

    BIO_printf(bio_out,""\n"");

    i = ASN1_UTCTIME_print(bio_out,asn1obj->value.utctime);   //used to display in console
    i = ASN1_UTCTIME_print(time,asn1obj->value.utctime);      //used to hold in BIO object

    BIO_printf(bio_out,""\n"");

    BIO *mem = BIO_new(BIO_s_mem());              
    //pass this mem BIO to hold the data
    i = ASN1_UTCTIME_print(mem,asn1obj->value.utctime);       //converting asn1 to memory BIO

    //Extract the BUF_MEM structure from a memory BIO and then free up the BIO:

    BUF_MEM *bptr;
    BIO_get_mem_ptr(mem, &bptr);                  //converting memory BIO to BUF_MEM
    BIO_set_close(mem, BIO_NOCLOSE); /* So BIO_free() leaves BUF_MEM alone */

    char *buff = (char *)malloc(bptr->length);        //converting BUF_MEM  to Char * 
    memcpy(buff, bptr->data, bptr->length-1);         //to be used later
    buff[bptr->length-1] = 0;

    NSLog(@""--------------------------->%s"",buff);        // this is my 
                                  // OUTPUT : Apr  5 14:30:53 2012 GM

    NSLog(@""--------------------------->End"");
    BIO_free_all(mem);              
}

Hope this helps :)
","2216","<openssl><asn.1><pkcs#7>","2","3","1","2012-04-05 15:12:33","10031257","0","1","199122","","2011-12-25 16:02:06","2011-12-25 15:48:19",""
"23143485","C library for CMS/X.509 manipulation","Some context: I have a PKCS #11-compliant cryptographic engine. This engine will be used to handle signed/enveloped data, i.e. verify the data's ECDSA/SHA1 signature, unwrap the symmetric key with RSAES-OAEP, and decrypt this data. This means the symmetric key will be wrapped with my engine's public key: hence I'd like the certificate for this public key to actually read ""Subject Public Key Algorithm: RSAES-OAEP"".
I'm looking for a C library which will let me manipulate objects comforming to the Cryptographic Message Syntax (CMS) and X.509 standards in the following way:

create a X.509 Certificate Signing Request (CSR), setting the Subject Public Key Algorithm to RSAES-OAEP

let me handle the signing part: my private key is only accessible via a PKCS #11 handle, so I need the library to give me the bytes to sign, and then let me set the CSR's ProofOfPossession field with what my crypto engine computed
export the complete CSR to something (DER or PEM)

create CMS structures to hold something like SignedData( EnvelopedData( stuff )). The library could handle the actual encryption/key wrapping/signature, or it could let some other software engine do it and just allow me to set the octet strings
let me easily parse back the message and recover those octet strings

meaning I want to open a DER/PEM file which contains this CMS message, and get the bytes for the signature, the wrapped key and the encrypted stuff, so that I can feed them to my PKCS #11 interface


Before anyone suggests OpenSSL's libcrypto, I've looked at it (looked as in, ""spent the last week trying to understand how the structures work, how the ASN.1 representation works, how I can recover the bytes I'm interested in from OpenSSL's structures...""), and I have some issues with it (as of 1.0.1f):

(cf 1.) I cannot set the Subject Public Key Algorithm to RSAE-OAEP. Starting from demos/x509/mkreq.c, and going all the way back to the deep reaches of x509t.h's weird #define IMPLEMENT_ASN1_ENCODE_FUNCTIONS_fname(stname, itname, fname) macros, I think I can affirm that X509_REQ_set_pubkey() cannot handle OAEP.
(cf 2.) Neither can the CMS part of the crypto lib, for that matter. cms_RecipientInfo_ktri_encrypt() calls EVP_PKEY_CTX_ctrl(), which I guess resolves to crypto/rsa/rsa_pmeth.c:pkey_rsa_ctrl(): when p2 is EVP_PKEY_CTRL_CMS_ENCRYPT, p2 is not parsed, so RSA padding is not set (if it turns out I'm wrong and I just cannot read code correctly, please tell me).

So while I'm glad this guy managed to make it ""work like a charm"", I cannot share his enthusiasm.
I guess for 2. I could use OpenSSL to create CMS blank structures, compute the future EnvelopedData content (ie stuff encrypted with a symmetric key + symmetric key wrapped with RSA OAEP), and stuff this content into the structures, bypassing CMS_encrypt() completely, before encapsulating into a SignedData (I'm assuming CMS_sign() will handle ECDSA/SHA1). As long as I don't want to use fancy parameters for OAEP (although this other guy managed to patch the lib to use OAEP with SHA-256).
But this might end up requiring a tad too much fiddling with OpenSSL's ASN.1 API. Hence my interrogation: does anyone know of a C library to build CMS structures and feed them the octet strings computed by some other engines? Also how to build certificates which read ""THIS KEY IS MEANT TO BE USED WITH RSAES-OAEP"".
I've looked at libksba and cryptlib and while I guess they could work, I cannot see how to use them yet (might have something to do with my eyes bleeding from staring at OpenSSL's code so much - I do not mean to say that OpenSSL's code is bad or anything, just that I've been looking at it hard, and the doc is slightly lacking).
Actually, I guess, I could drop the C requirement (mainly there because communicating with the crypto engine is done in PKCS #11/C). Here's what the library should be able to do:

build a CSR

... featuring ""RSAES-OAEP"" as Subject Public Key Algorithm
give me the bytes to sign for the Proof-of-Possession part
take the signature and output a complete X.509 CSR

parse a CMS structure

(SignedData) give me the bytes corresponding to the signedInfo->signature and encapsulatedContentInfo fields so that I can verify them with some other engine
(EnvelopedData) give me the bytes corresponding to the keyTransRecipientInfo->encryptedKey and encryptedContentInfo->encryptedContent fields so that I can unwrap/decrypt with some other engine

build a CMS structure, either...

letting some external engine set the fields mentioned above, and letting me specify the algorithms
actually implementing the algorithms, and building the CMS from just the data (... with RSAES-OAEP for key wrapping)


Right now I'm going with a ""all-OpenSSL"" approach, because I feel like I'm in too deep and should not start wandering somewhere else. If anybody has a better idea, I am all ears.
As for setting that subject public key algorithm... Well, either I'll just leave regular RSA and have my application ""know"" that wrapping is RSAES-OAEP, or... I don't know. And as for signing the request... is POP all that useful anyway?
(This is not a serious question)
NB: edited to remove the whole ""I want my certificate to read OAEP"", since I just found out about RFC 5756 (also found an interesting discussion from 2006 when this RFC was not out yet).
","Here's what I managed to get working so far.
1. Building a CSR, signing it with some other engine
I mostly followed demos/x509/mqreq.c, with some twists.
(NB: error checking, fancy modulus length/label/subject DN generation/handling has been left out for brevity and focus on actual flow).
unsigned char* mod = NULL;
unsigned char* exp = NULL;
size_t mod_l = 0;
size_t exp_l = 0;

P11_handle h_key = P11_gen_rsa(&mod, &mod_l, &exp, &exp_l);

RSA* rsa = RSA_new();

rsa->n = BN_bin2bn(rsa_mod, rsa_mod_l, NULL);
rsa->e = BN_bin2bn(rsa_exp, rsa_exp_l, NULL);

EVP_PKEY* pkey = EVP_PKEY_new();

EVP_PKEY_assign_RSA(pkey, rsa);

X509_REQ* csr = X509_REQ_new();
X509_REQ_set_pubkey(csr, pkey);

/* Boring X509_NAME/X509_EXTENSION stuff */

X509_REQ_INFO* csr_req = csr->req_info;

unsigned char* pop_in = NULL;
size_t pop_in_l = ASN1_item_i2d((void*)csr_req, &pop_in,
                                ASN1_ITEM_rptr(X509_REQ_INFO));

unsigned char* sig = NULL;
size_t sig_l = 0;

P11_make_pop(SIGN_RSA_PKCS, DIGEST_SHA256,
             pop_in, pop_in_l, &sig, &sig_l,
             h_key);

/* Add signature to CSR (heavily inspired from ASN1_item_sign_ctx())
 * (please don't ask about the flags) */

if (csr->signature->data != NULL) OPENSSL_free(csr->signature->data);
csr->signature->data = sig;
csr->signature->length = sig_l;
csr->signature->flags&= ~(ASN1_STRING_FLAG_BITS_LEFT|0x07);
csr->signature->flags|= ASN1_STRING_FLAG_BITS_LEFT;

/* Add signature algorithm information to CSR */

int sig_algo_nid = 0;
OBJ_find_sigid_by_algs(&sig_algo_nid,
                       EVP_MD_nid(EVP_sha256()), EVP_PKEY_RSA);

X509_ALGOR_set0(csr->sig_alg, OBJ_nid2obj(sig_algo_nid),
                V_ASN1_NULL, NULL));

After that, the X509_REQ structure is good for PEM export. openssl req -verify seems to validate the process, so as far as I'm concerned this works.
2. Building nested CMS structures (as in SignedData(EnvelopedData(Data)))
Finally got it, using 1.0.2 (any previous version would have needed patching or ASN.1-level parsing). Many thanks to Dr. Stephen Henson and Tom Francis for helping me with this via the mailing list.
/* Make EnvelopedData structure */
BIO* in = BIO_new_file(in_path, ""rb"");

int flags = CMS_BINARY | CMS_USE_KEYID | CMS_PARTIAL | CMS_KEY_PARAM;

CMS_ContentInfo* edata = CMS_encrypt(NULL, NULL, cipher, flags);

CMS_RecipientInfo* r_info = CMS_add1_recipient_cert(edata, r_cert, flags);
EVP_PKEY_CTX* wrap_ctx = CMS_RecipientInfo_get0_pkey_ctx(r_info);

EVP_PKEY_CTX_set_rsa_padding(wrap_ctx, RSA_PKCS1_OAEP_PADDING);
EVP_PKEY_CTX_set_rsa_oaep_md(wrap_ctx, EVP_sha256());
EVP_PKEY_CTX_set_rsa_mgf1_md(wrap_ctx, EVP_sha256());
EVP_PKEY_CTX_set0_rsa_oaep_label(wrap_ctx, oaep_label, oaep_label_l);
/* NB: oaep_label must be heap-allocated, and will be freed by OSSL */

CMS_final(edata, in, NULL, flags);

BIO* tmp = BIO_new(BIO_s_mem());
i2d_CMS_bio(tmp, edata);

/* Make SignedData structure */

flags|= CMS_NOSMIMECAP | CMS_NOCERTS;
flags&= ~(CMS_KEY_PARAM);

CMS_ContentInfo* sdata = CMS_sign(NULL, NULL, NULL, NULL, flags);

ASN1_OBJECT* ectype_edata = OBJ_nid2obj(NID_pkcs7_enveloped);
CMS_set1_eContentType(sdata, ectype_edata);

CMS_SignerInfo* s_info =
    CMS_add1_signer(sdata, s_cert, s_key, NULL, flags);

CMS_SignerInfo_sign(s_info);

CMS_final(sdata, tmp, NULL, flags);

BIO* out = BIO_new_file(out_path, ""wb"");
i2d_CMS_bio(out, sdata);
BIO_flush(out);

3. Parsing the structure and getting the fields I need.
I basically wrote my own CMS parser. ASN.1 is actually simple to parse when you know the spec. I've tried compiling the ASN.1 modules in the RFC using some ""ASN.1 to C structs"" compilers but had no luck (they kept choking on the syntax).
","2209","<c><openssl><x509><pkcs#7>","1","1","1","2014-09-25 19:26:26","23422301","1","1","-1","","2017-05-23 12:01:40","2014-04-17 21:08:41",""
"20321302","Output AES/ECB/PKCS7 in c and java is not same","Hi i am using AES/ECB/PKCS7 mode for encryption, individually in c& java, encryption & decryption working fine.  But  in c encrypted data is not same as encrypted data in java... 
I am posting my code  in  C language and java. I need Encryption in c and Decryption  in java. Please assist me c code for aes/ecb/pkcs7 is correct ??.. I am using openssl 
C code:
int Secure_encrypt(unsigned char *in, int inlen, unsigned char *out,int *outlen)
{
    int tmplen;
    // Key is 256 and is fixed.
    unsigned char key[256] =
    {   0x21,0x0a,0x03,0x23,0x45,0x29,0x78,0x12,0x35,0x45,0x67,0x78,0x21,0x13,
        0x34,0x56,0x67,0x45,0x12,0x89,0x38,0x0e,0xa0,0x15,0x21,
        0x0a,0x03,0x23,0x45,0x0b,0x15,0x0c
    };
    unsigned char *iv=0;
    EVP_CIPHER_CTX x;
    EVP_CIPHER_CTX_init(&x);
    EVP_CIPHER_CTX_set_padding(&x,1); // 1- padding, 0 - No Padding
    if (!EVP_EncryptInit_ex(&x, EVP_aes_256_ecb(), 0, key, iv))
    {
        //printf(""\n ERROR!! \n"");
        return -1;
    }
    if (!EVP_EncryptUpdate(&x, out, outlen,(const unsigned char*) in, inlen))
    {
        //printf(""\n ERROR!! \n"");
        return -2;
    }
    if (!EVP_EncryptFinal_ex(&x,out + *outlen,&tmplen)) {
        //printf(""\n ERROR!! \n"");
        return -3;
    }
    *outlen += tmplen;
#ifdef DEBUG
    printf (""AES encrypted data %d len\n"", *outlen);
    print_data (out, *outlen);
#endif
    EVP_CIPHER_CTX_cleanup(&x);
    return 0;

}



/*AES DECRYPTION */
AES Decryption



int Secure_decrypt(unsigned char *in, int inlen, unsigned char *out,int *outlen)
{
    int tmplen;
    unsigned char *iv=0;
    unsigned char key[256]
    //AES/ECB/PKCS7 Padding
    EVP_CIPHER_CTX x;
    EVP_CIPHER_CTX_init(&x);
    EVP_CIPHER_CTX_set_padding(&x,1); // 1- padding, 0 - No Padding
    if (!EVP_DecryptInit_ex(&x, EVP_aes_256_ecb(), 0, key, iv)) {
        //printf(""\n ERROR!! \n"");
        return -1;
    }
    if (!EVP_DecryptUpdate(&x, out, outlen,(const unsigned char*) in, inlen))
    {
        //printf(""\n ERROR!! \n"");
        return -2;
    }
    if (!EVP_DecryptFinal_ex(&x,out + *outlen,&tmplen)) {
        //printf(""\n ERROR!! \n"");
        return -3;
    }
    *outlen += tmplen;

#ifdef DEBUG
    printf (""AES encrypted data %d len \n"", *outlen);
    print_data (out, *outlen);
#endif
    EVP_CIPHER_CTX_cleanup(&x);
    return 0;
}

Java code:
import java.security.Security;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import org.apache.commons.codec.binary.Base64;
import org.bouncycastle.jce.provider.BouncyCastleProvider;

public class doThis {

    public static void main(String[] args) {
        Security.addProvider(new BouncyCastleProvider());
        String strDataToEncrypt = ""Testing Encryption"";
        byte[] byteDataToTransmit = strDataToEncrypt.getBytes();
        //41 6E 6B 61 72 61 6F 20 49 74 74 61 64 69
        //byte[] byteDataToTransmit = new byte []
        {
            0x41,0x6E,0x6B,0x61,0x72,0x61,0x6F,0x20,0x49,0x74,0x74,0x61,0x64,0x69
        };
        try {

            byte [] keyBytes= new byte [] {0x21,0x0a,0x03,0x23,0x45,0x29,0x78,0x12,0x35,
                                           0x45,0x67,0x78,0x21,0x13,0x34,

                                           0x56,0x67,0x45,0x12,0x9,0x38,0x0e,0x20,
                                           0x15,0x21,0x0a,0x03,0x23,0x45,0x0b,0x15,0x0c
                                          };

            byte[] encrypted= aesEncrypt(byteDataToTransmit,keyBytes);

            System.out.println(""\n AES Encrypted Data is  ""+new String (encrypted));

            byte [] byteDecrypt=aesDecrypt(bytestrEncrypt, keyBytes);
            System.out.println(""\n AES Decrypted Data is""+byteDecrypt);
            // byte [] byteDecrypt=aesDecrypt(encrypted , keyBytes);

            //System.out.println(""\n AES Decrypted Data is""+new String(byteDecrypt));
        }
        catch(Exception exp)
        {
            System.out.println("" Exception caught "" + exp);
            exp.printStackTrace();
        }
    }

    public static byte[] aesEncrypt(byte[] original, byte[] key)
    {
        try
        {
            SecretKeySpec keySpec = null;
            Cipher cipher = null;
            {
                keySpec = new SecretKeySpec(key, ""AES/ECB/PKCS7Padding"");
                cipher = Cipher.getInstance(""AES/ECB/PKCS7Padding"");
                cipher.init(Cipher.ENCRYPT_MODE, keySpec); // encryption
            }
            return cipher.doFinal(original);
        }
        catch(Exception e)
        {
            //  Logger.e(e.toString());
        }
        return null;
    }

    public static byte[] aesDecrypt(byte[] encrypted, byte[] key)
    {
        try
        {
            SecretKeySpec keySpec = null;
            Cipher cipher = null;

            {
                keySpec = new SecretKeySpec(key, ""AES/ECB/PKCS7Padding"");

                cipher = Cipher.getInstance(""AES/ECB/PKCS7Padding"");
                cipher.init(Cipher.DECRYPT_MODE, keySpec);
            }

            System.out.println(""In Decryprion \n""+ new String (encrypted));
            return cipher.doFinal(encrypted);

        }
        catch(Exception e)
        {
            //  Logger.e(e.toString());
        }
        return null;
    }
}

","At least your handling of the returned amount of data is off. Check your buffer handling! Furthermore, in Java you use new String (encrypted) instead of converting the byte array to hexadecimals.
","2208","<c><encryption><openssl><aes><pkcs#7>","1","0","1","2013-12-08 21:45:39","20458851","2","2","589259","","2013-12-08 21:42:32","2013-12-02 05:11:57",""
"19528000","How to Encode ASN.1 Context-specific using Openssl","I am trying to encode the pkcs7 encapsulated content info:
Sequence:
  OID
  [0] Context-specific
     OCTET STRING

My first problem is to encode Context-specific:
[0] Context-specific

So I tried to create a 'SET Context-specific' with 'Octet String', but without success:
// Create ASN1_OCTET
ASN1_OCTET_STRING *obj = ASN1_OCTET_STRING_new();
const BYTE* ptr = dataToSign.getData();
ASN1_OCTET_STRING_set(obj, ptr, dataToSign.getSize());

// Create ASN1_TYPE using ASN1_OCTET
ASN1_TYPE   *asn1Type   = ASN1_TYPE_new();
asn1Type->type = V_ASN1_OCTET_STRING;
asn1Type->value.octet_string = obj;

// Using i2d_ASN1_SET_OF_ASN1_TYPE
stack_st_ASN1_TYPE* sk = sk_ASN1_TYPE_new_null();
sk_ASN1_TYPE_push(sk,asn1Type);
int tamanho = i2d_ASN1_SET_OF_ASN1_TYPE(sk,(unsigned char **) NULL, i2d_ASN1_TYPE,V_ASN1_SET, V_ASN1_CONTEXT_SPECIFIC, IS_SET);
unsigned char* data = new BYTE[tamanho];
tamanho = i2d_ASN1_SET_OF_ASN1_TYPE(sk,(unsigned char **) &data, i2d_ASN1_TYPE,V_ASN1_SET, V_ASN1_CONTEXT_SPECIFIC, IS_SET);

I have not found documentation on the website of openssl.
This place is better umich - Openssl documentation
Am I on the right track?
","
How to Encode ASN.1 Context-specific using Openssl?

From asn1.h:
#define V_ASN1_UNIVERSAL        0x00
#define V_ASN1_APPLICATION      0x40
#define V_ASN1_CONTEXT_SPECIFIC     0x80
#define V_ASN1_PRIVATE          0xc0
...

#define V_ASN1_BOOLEAN          1   /**/
#define V_ASN1_INTEGER          2
...
#define V_ASN1_UTF8STRING       12
#define V_ASN1_SEQUENCE         16
#define V_ASN1_SET          17
...

So you will need to use the tag V_ASN1_CONTEXT_SPECIFIC.

My first problem is to encode Context-specific

From A Layman's Guide to a Subset of ASN.1, BER, and DER (p. 12):
> Example 1: PKCS #7's ContentInfo type has an optional
> content component with an explicit, context-specific tag:
>
> ContentInfo ::= SEQUENCE {
>    contentType ContentType,
>    content
>    [0] EXPLICIT ANY DEFINED BY contentType OPTIONAL }
> 
> Here the underlying type is ANY DEFINED BY contentType, the
> class is absent (i.e., context-specific), and the tag number
> within the class is 0.

Then, the document goes on to discuss the ContentInfo, the identifier octets, the encoding of ANY based on contentInfo, etc.
","2166","<c++><encoding><openssl><pkcs#7>","2","0","2","2015-04-27 22:35:59","","0","1","823640","","2013-10-23 12:03:21","2013-10-22 20:45:42",""
"19528000","How to Encode ASN.1 Context-specific using Openssl","I am trying to encode the pkcs7 encapsulated content info:
Sequence:
  OID
  [0] Context-specific
     OCTET STRING

My first problem is to encode Context-specific:
[0] Context-specific

So I tried to create a 'SET Context-specific' with 'Octet String', but without success:
// Create ASN1_OCTET
ASN1_OCTET_STRING *obj = ASN1_OCTET_STRING_new();
const BYTE* ptr = dataToSign.getData();
ASN1_OCTET_STRING_set(obj, ptr, dataToSign.getSize());

// Create ASN1_TYPE using ASN1_OCTET
ASN1_TYPE   *asn1Type   = ASN1_TYPE_new();
asn1Type->type = V_ASN1_OCTET_STRING;
asn1Type->value.octet_string = obj;

// Using i2d_ASN1_SET_OF_ASN1_TYPE
stack_st_ASN1_TYPE* sk = sk_ASN1_TYPE_new_null();
sk_ASN1_TYPE_push(sk,asn1Type);
int tamanho = i2d_ASN1_SET_OF_ASN1_TYPE(sk,(unsigned char **) NULL, i2d_ASN1_TYPE,V_ASN1_SET, V_ASN1_CONTEXT_SPECIFIC, IS_SET);
unsigned char* data = new BYTE[tamanho];
tamanho = i2d_ASN1_SET_OF_ASN1_TYPE(sk,(unsigned char **) &data, i2d_ASN1_TYPE,V_ASN1_SET, V_ASN1_CONTEXT_SPECIFIC, IS_SET);

I have not found documentation on the website of openssl.
This place is better umich - Openssl documentation
Am I on the right track?
","Use i2d_ASN1_bytes function:
// Initialize ASN1_STRING inplace (no need to free)
ASN1_STRING s = { 0, 0, NULL, 0};
// Initialize with our data
ASN1_STRING_set0(&obj, dataToSign.getData(), dataToSign.getSize());

// Get resulting object length
int data_len = i2d_ASN1_bytes(obj, NULL, 0, V_ASN1_CONTEXT_SPECIFIC)
// Encode object with context tag 0
unsigned char* data = new BYTE[data_len];
unsigned char* p = data;
i2d_ASN1_bytes(obj, &p, 0, V_ASN1_CONTEXT_SPECIFIC);

","2166","<c++><encoding><openssl><pkcs#7>","2","1","2","2015-04-27 22:35:59","","0","1","823640","","2013-10-23 12:03:21","2013-10-22 20:45:42",""
"29939831","Obtaining the hash/digest from a PCKS7 signed PDF file with iText","I'm writing a Java web service that signs PDF documents with iText from some clients in the network. Documents are being signed correctly, and can be verified with external tools. However, due to some legal restrictions in order to store this document in an official documentary repository I have to provide the hash/digest message from the signature.
I have tried almost anything to get to that hash, but the closest that I can get is to obtain the whole signature (CERT+HASH/DIGEST+TIMESTAMP) as a string with this code snippet (forgive the strings and [1] since I'm just testing how to do it):
    PdfReader reader = new PdfReader(path);
    File temp = TempFileManager.createTempFile(""aasd2sd"", ""asdasda222cff"");
    PdfStamper stamper = new PdfStamper(reader, new FileOutputStream(temp));
    stamper.setRotateContents(false);
    PdfString firma = (PdfString) stamper.getAcroFields().getSignatureDictionary(""Signature1"").get((PdfName)stamper.getAcroFields().getSignatureDictionary(""Signature1"").getKeys().toArray()[1]);

With that I get a DER-enconded PKCS7 Signature, as far as I know. But, I don't know how to decode/read this info in order to get to the hast.
Any idea?
Thanks,
Cris.
","First of all, there is not necessarily the hash/digest message from the signature, in case of PKCS#7 / CMS signatures usually multiple hashes are involved, cf. this answer to Message digest of pdf in digital signature.
Considering that you need the digest to fulfill some legal restrictions, though, I assume you are after the value of the signed attribute MessageDigest which (if it is present) for ETSI.CAdES.detached or adbe.pkcs7.detached type PDF signatures is the digest of the signed byte ranges.

If you want to do that using iText classes (i.e. not security provider classes), you have to overcome the small issue that the value you are after is stored in a private member (PdfPKCS7.digestAttr). Some reflection allows you to access it, though:
void extractHashes(PdfReader reader) throws Exception
{
    AcroFields acroFields = reader.getAcroFields();
    List<String> names = acroFields.getSignatureNames();

    for (String name: names)
    {
        PdfPKCS7 pdfPkcs7 = acroFields.verifySignature(name);
        pdfPkcs7.verify();

        Field digestAttrField = PdfPKCS7.class.getDeclaredField(""digestAttr"");
        digestAttrField.setAccessible(true);
        byte[] digestAttr = (byte[]) digestAttrField.get(pdfPkcs7);

        // process the digest value in digestAttr 
    }
}

You can find the method used in a more complete example ExtractHash.java which outputs gigest algorithm and digest value of signature fields in a PDF document, e.g.:
FirstPage11P0022AD_20150202164018_307494.pdf
  Signature1
    Digest algorithm: SHA1
    Hash: 4ac0ed7c2ec611d491f37b5ca74598237b85dbab

","2156","<java><pdf><itext><pkcs#7>","1","4","1","2015-04-30 13:51:10","29969592","2","2","","","","2015-04-29 09:38:33",""
"14697702","Specifying input format type when calling openssl_pkcs7_verify in PHP","I have a crypto/php question, I was hoping someone could help me with.
My issue is that I have a signed PKCS7 block that I am trying to verify in PHP.
However, when I run the following PHP command:
openssl_pkcs7_verify($myfile, PKCS7_BINARY | PKCS7_NOVERIFY, $signers_file);

I get the following error:
PKCS7 routines:SMIME_read_PKCS7:no content type

If I do it using ruby like so:
p7container = OpenSSL::PKCS7.new(file_contents);
mystore = OpenSSL::X509::Store.new
p7container.verify(nil, store, nil, OpenSSL::PKCS7::NOVERIFY)

It works.
Also, if I run it through the OpenSSL commandline:
openssl smime -verify -inform der -in my_data_file -noverify

It also works. However, if I run the following:
openssl smime -verify -in my_data_file -noverify

Which is the same command, but without specifying the inform parameter, it fails with the same error message specified before, regarding the ""no content type"", which makes it seem I need to specify the input file format. Any ideas how I can do that through PHP?
Thanks in advance for your help,
","I got around that problem by calling openssl directly from PHP (using the exec function). Be sure to add 2>&1 to the command to redirect stderr to stdout as the message ""Verification successful"" is sent to stderr.
function verify($signedData, &$data = null) {
    @mkdir(""tmp"");
    $random = randomString(32);
    $signedFile = ""tmp/"" . $random . "".pem"";
    $file = ""tmp/"" . $random . "".dat"";
    file_put_contents($signedFile, $signedData);
    $output = exec(""openssl smime  -verify -in $signedFile -inform DER -noverify -out $file 2>&1"");
    if ($output == ""Verification successful"") {
        $data = file_get_contents($file);
        $result = true;
    } else {
        $result = false;
    }
    @unlink($signedFile);
    @unlink($file);
    return $result;
}

","2132","<php><openssl><pkcs#7>","4","2","1","2013-03-01 17:59:37","15116990","0","1","1118109","","2013-02-05 01:08:20","2013-02-04 23:33:55",""
"7793706","How to generate PKCS7 format signature using IOS iphone SDK?","I could Generate PKCS1 formatted raw signature.. and was able to verify it even. 
But could not find the resource to generate PCKS7 Formatted Signature using IPHONE IOS SDK.
I need to sign a simple text message.
Which library I have to use?
Can we use openssl for this? if yes? then how to include it in the XCODE library framework?
Pls help out.
","Yes you can use openssl for this, however you will need to compile it yourself and link your App against the static library.  If you want to run it in both the iPhone Simulator and a real iPhone Device (you do), you'll need to create a 'fat' library containing both armv7 and i386 architecture code.  If you want to support iPhone 3 instead then you'll need to include armv6 architecture code.  It's best therefore to build the library with all 3 architectures.
Here's a couple of resources that describe how to build openssl for iOS:
http://atastypixel.com/blog/easy-inclusion-of-openssl-into-iphone-app-projects/
https://github.com/st3fan/ios-openssl
EDIT:  I actually modified st3fan's build script, which I have pasted here:
setenv.sh and build_openssl.sh
Download these scripts and keep them somewhere like ~/bin (review them and then chmod them 0755 once you are sure they are not malicious).
Next edit setenv.sh as it assumes there is a directory where you will install your 3rd-party libraries.  By default this is /opt/local/ioslibs so make sure that exists and is owned by you else the final bit will fail.  It's been configured for Xcode 4.2/iOS SDK 5 using the default locations so that might need correcting too.
build_openssl.sh is configured to build a specific version of openssl (1.0.0e) and will download the source tarball if it's not in the current directory (you need wget for that, but if you cannot be bothered to install wget then manually download it using the link within the script).  When you run it, it will build the library in armv6, armv7 and i386 arch's and copy the correct files to the installation directory.
","2116","<ios><ios4><openssl><pkcs#7>","1","0","1","2011-10-18 17:10:09","7794789","0","2","","","","2011-10-17 12:25:30",""
"17844519","Convert PKCS7 to PKCS12 using java.security.KeyStore","When I try to import a renewed X509 certificate on Chrome / Firefox (and probably other browser), it does not recognize that the certificate I am trying to import uses the same private key stored in my expiring user certificate with the same DN. I don't know if this is a bug with the implementation of certificate import tool of all major browsers, but I can (somewhat) work around this problem by storing my user certificate inside a private key-less PKCS12 file using openssl tool like following.

openssl pkcs12 -export -in usercert.pem -nokeys -name ""CN: Same Name"" -out certonly.p12
  (-nokeys is the trick here)

I don't know why this works, but I can then import certonly.p12 to Chrome / Firefox and it will attach my private key from the last year; although it creates a separate certificate entry so that I need to remove my old certificate manually. 
So, I assume that, in order to renew my user certificate on my browser, I will need to package my certificate in PKCS12 format (with or without a pass-phrase).
Now, I need to do this in my Java application using java.security.KeyStore or similar libraries, because it is actually my web application which is generating user's renewed certificates. I don't want to ask our users to use the openssl command themselve to convert it to pkcs12 before importing to their browsers. My application should do this automatically, and provide them the renewed certificate contained inside a PKCS12 file.
I've looked many places, but so far I can't find a concrete example of how to do this using Java. Does anyone know how to output a pass-phrase less PKCS12 with only an issued certificate (or pkcs7) without a private key?
I tried something like following but it did not work.
java.security.cert.Certificate[] chain  = CertificateManager.parsePKCS7(renewed_cert_in_pkcs7);
KeyStore p12 = KeyStore.getInstance(""PKCS12"");
p12.load(null, null);
p12.setKeyEntry(""USER Cert 123"", null, """".toCharArray(), chain); 
response.setContentType(""application/x-pkcs12"");
response.setHeader(""Content-Disposition"", ""attachment; filename=user_certificate_only.p12"");
p12.store(response.getOutputStream(), """".toCharArray());

","","2098","<java><openssl><x509><pkcs#7>","2","","0","2013-07-24 20:47:50","","0","","","","","2013-07-24 20:47:50",""
"12910571","How to bypass the Certificate Expired validating when verifying the digital signature","I have a problem when I verify a digital signature (PKCS#7) in Java using an expired public certificate.
For more detail, it's OK in case of signing data in .NET and then verify in Java, but there will be a Certificate Expired error in case of signing data in Java and verify in Java. In both of cases, I used the same verify method, the same private key and public certificate.
Please tell me why? And what should I do if I want to bypass the Certificate Expired validating when verifying the digital signature?
Thanks,
Sign method in C#.NET
private static string SignData(byte[] data, string pkcs12FileUrl, string pkcs12Password)
    {
        X509Certificate2 signerCert = new X509Certificate2(pkcs12FileUrl, pkcs12Password);
        ContentInfo content = new ContentInfo(data);
        SignedCms signed = new SignedCms(content, true);
        CmsSigner signer = new CmsSigner(signerCert);
        signer.IncludeOption = X509IncludeOption.None;
        signed.ComputeSignature(signer);

        return Convert.ToBase64String(signed.Encode());
    }

Sign method in Java
public static String SignData(byte[] data, String pkcs12File, String pkcs12Password)
    throws Exception
{
        if(Security.getProvider(""BC"")==null)
        {
            Security.addProvider(new BouncyCastleProvider());
        }
        KeyStore keyStore = getPkcs12Info(pkcs12File, pkcs12Password);

        Enumeration<String> aliasesList = keyStore.aliases();
        String aliasName = """";
        while (aliasesList.hasMoreElements())
        {
            aliasName = aliasesList.nextElement().toString();
        }

        X509Certificate signerCert = (X509Certificate) keyStore.getCertificate(aliasName);
        PrivateKey privateKey = (PrivateKey) keyStore.getKey(aliasName,pkcs12Password.toCharArray());

        CMSSignedDataGenerator Signer = new CMSSignedDataGenerator();
        Signer.addSigner(privateKey, signerCert, CMSSignedDataGenerator.DIGEST_SHA1);

        CMSProcessableByteArray digestContent = new CMSProcessableByteArray(data);

        CMSSignedData Signed = Signer.generate(digestContent, false, ""BC"");
        return Base64.encode(Signed.getEncoded());

}

private static  KeyStore getPkcs12Info(String pkcs12File, String pkcs12Password) throws Exception
{
    //KeyStore keyStore = KeyStore.getInstance(""PKCS12"", ""BC"");
        KeyStore keyStore = KeyStore.getInstance(""PKCS12"");
        keyStore.load(new FileInputStream(pkcs12File), pkcs12Password.toCharArray());
        return keyStore;
}

Verify method in Java
public static boolean VerifySignature(byte[] data, String digitalSignature, InputStream publicCertFile) throws Exception
{
    if(Security.getProvider(""BC"")==null)
    {
        Security.addProvider(new BouncyCastleProvider());
    }
    CertificateFactory factory = CertificateFactory.getInstance(""X509"",""BC"");
    X509Certificate publicCert = (X509Certificate)factory.generateCertificate(publicCertFile);
    CMSProcessableByteArray digestContent = new CMSProcessableByteArray(data);
    CMSSignedData Signed = new CMSSignedData(digestContent,Base64.decode(digitalSignature));
    SignerInformation Signer=(SignerInformation)Signed.getSignerInfos().getSigners().iterator().next();
    return Signer.verify(publicCert, ""BC"");
}

","If you sign a document with a certificate that has already expired, it is already pointless. The certificate has already expired and should not be put to new uses. Verifying a document whose signing certificate has expired makes sense since at least you know the certificate was valid when the document was signed. Unless it was signed by .NET apparently. Sounds like a bug in .NET to me.
","2070","<java><.net><digital-signature><pkcs#7>","2","1","2","2013-09-24 01:38:16","","2","","","","","2012-10-16 08:34:26",""
"12910571","How to bypass the Certificate Expired validating when verifying the digital signature","I have a problem when I verify a digital signature (PKCS#7) in Java using an expired public certificate.
For more detail, it's OK in case of signing data in .NET and then verify in Java, but there will be a Certificate Expired error in case of signing data in Java and verify in Java. In both of cases, I used the same verify method, the same private key and public certificate.
Please tell me why? And what should I do if I want to bypass the Certificate Expired validating when verifying the digital signature?
Thanks,
Sign method in C#.NET
private static string SignData(byte[] data, string pkcs12FileUrl, string pkcs12Password)
    {
        X509Certificate2 signerCert = new X509Certificate2(pkcs12FileUrl, pkcs12Password);
        ContentInfo content = new ContentInfo(data);
        SignedCms signed = new SignedCms(content, true);
        CmsSigner signer = new CmsSigner(signerCert);
        signer.IncludeOption = X509IncludeOption.None;
        signed.ComputeSignature(signer);

        return Convert.ToBase64String(signed.Encode());
    }

Sign method in Java
public static String SignData(byte[] data, String pkcs12File, String pkcs12Password)
    throws Exception
{
        if(Security.getProvider(""BC"")==null)
        {
            Security.addProvider(new BouncyCastleProvider());
        }
        KeyStore keyStore = getPkcs12Info(pkcs12File, pkcs12Password);

        Enumeration<String> aliasesList = keyStore.aliases();
        String aliasName = """";
        while (aliasesList.hasMoreElements())
        {
            aliasName = aliasesList.nextElement().toString();
        }

        X509Certificate signerCert = (X509Certificate) keyStore.getCertificate(aliasName);
        PrivateKey privateKey = (PrivateKey) keyStore.getKey(aliasName,pkcs12Password.toCharArray());

        CMSSignedDataGenerator Signer = new CMSSignedDataGenerator();
        Signer.addSigner(privateKey, signerCert, CMSSignedDataGenerator.DIGEST_SHA1);

        CMSProcessableByteArray digestContent = new CMSProcessableByteArray(data);

        CMSSignedData Signed = Signer.generate(digestContent, false, ""BC"");
        return Base64.encode(Signed.getEncoded());

}

private static  KeyStore getPkcs12Info(String pkcs12File, String pkcs12Password) throws Exception
{
    //KeyStore keyStore = KeyStore.getInstance(""PKCS12"", ""BC"");
        KeyStore keyStore = KeyStore.getInstance(""PKCS12"");
        keyStore.load(new FileInputStream(pkcs12File), pkcs12Password.toCharArray());
        return keyStore;
}

Verify method in Java
public static boolean VerifySignature(byte[] data, String digitalSignature, InputStream publicCertFile) throws Exception
{
    if(Security.getProvider(""BC"")==null)
    {
        Security.addProvider(new BouncyCastleProvider());
    }
    CertificateFactory factory = CertificateFactory.getInstance(""X509"",""BC"");
    X509Certificate publicCert = (X509Certificate)factory.generateCertificate(publicCertFile);
    CMSProcessableByteArray digestContent = new CMSProcessableByteArray(data);
    CMSSignedData Signed = new CMSSignedData(digestContent,Base64.decode(digitalSignature));
    SignerInformation Signer=(SignerInformation)Signed.getSignerInfos().getSigners().iterator().next();
    return Signer.verify(publicCert, ""BC"");
}

","I found this topic Java implementation of C# SignedCms and tried to change my Sign method's code in Java. Finally, it works so well. Here my updated code in Java
public static String SignData(byte[] data, String pkcs12File, String pkcs12Password)
    throws Exception
{
        ByteArrayOutputStream byteArrOut = new ByteArrayOutputStream();
        DEROutputStream derOut = new DEROutputStream(byteArrOut);
        try
        {
            if(Security.getProvider(""BC"")==null)
            {
                Security.addProvider(new BouncyCastleProvider());
            }
            KeyStore keyStore = getPkcs12Info(pkcs12File, pkcs12Password);

            Enumeration<String> aliasesList = keyStore.aliases();
            String aliasName = """";
            while (aliasesList.hasMoreElements())
            {
                aliasName = aliasesList.nextElement().toString();
            }

            X509Certificate signerCert = (X509Certificate) keyStore.getCertificate(aliasName);
            PrivateKey privateKey = (PrivateKey) keyStore.getKey(aliasName, pkcs12Password.toCharArray());

            List certList = new ArrayList();
            Store certs = new JcaCertStore(certList);

            JcaSimpleSignerInfoGeneratorBuilder builder = new JcaSimpleSignerInfoGeneratorBuilder().setProvider(""BC"").setDirectSignature(true);


            CMSSignedDataGenerator signer = new CMSSignedDataGenerator();
            signer.addSignerInfoGenerator(builder.build(""SHA1withRSA"", privateKey, signerCert));
            signer.addCertificates(certs);

            CMSTypedData msg = new CMSProcessableByteArray(data);
            CMSSignedData signed = signer.generate(msg, false);

            derOut.writeObject(signed.toASN1Structure().toASN1Primitive());
            return Base64.encode(byteArrOut.toByteArray());
        }
        catch(Exception ex)
        {
            throw ex;
        }
        finally
        {
            derOut.close();
            byteArrOut.close();
        }

}

","2070","<java><.net><digital-signature><pkcs#7>","2","1","2","2013-09-24 01:38:16","","2","","","","","2012-10-16 08:34:26",""
"8449799","decrypt p7m file in C# or .NET with privateKey from file","Hopefully someone can help me with code because I am working on it 3 months without any success. I tried almost anything from internet but nothing does not work.
Problem: I have encrypted file p7m (size 158KB) (it is crypted text). I have certificate in file pfx, under password ""a"". In this certificate is the public key which is needed to decrypt p7m file.
I need something that will read xyyv.p7m file, decrypt it with public key, and save it as XYZ.xyz
I do not put here any my code to do not confuse you. thanks
","A PKCS#7 structure can be very messy (and that's actually true for most ASN.1 structures). There's not much specific advice that can be given if we don't know what was used to produce this file.
In general there's code for reading them in System.Security.Cryptography.Pkcs but it's easy to create files (valid or invalid) that won't be processed correctly. Even more if they were generated using different tools.
Mono provides classes, inside Mono.Security, to read them. They are very low-level API (with some helpers) so, in theory, they should be able to read anything... as long as you don't mind coding the processing your format itself.
Other libraries, BouncyCastle comes to mind, will offer similar (low or high level) API to process PKCS#7 files.
","2061","<c#><.net><encryption><private-key><pkcs#7>","0","0","1","2011-12-09 18:19:02","","2","","220643","","2011-12-09 18:19:02","2011-12-09 18:04:40",""
"35099408","Generate a CMS PKCS#7 file with BouncyCastle in C#","I'm starting to cryptography.
I need to generate a PKCS # 7 file with XML, an RSA private key (which is not included in the certificate is a file extension .key) and a certificate .cer extension.
For this i'm using a BouncyCastle.
Edit:
Thanks @khlr for your help but I can not solve my problem. When sending the data to the AC returns me ""Invalid CMS"". 
I have this code:    
public static byte[] FirmaBytesMensaje(byte[] argBytesMsg, X509Certificate2 argCertFirmante)
{
    try
    {
        //Add message in object ContentInfo 
        ContentInfo infoContenido = new ContentInfo(argBytesMsg);
        SignedCms cmsFirmado = new SignedCms(infoContenido);


        CmsSigner cmsFirmante = new CmsSigner(argCertFirmante);
        cmsFirmante.IncludeOption = X509IncludeOption.EndCertOnly;


        // Sign message PKCS #7 
        cmsFirmado.ComputeSignature(cmsFirmante);


        // Encodeo el mensaje PKCS #7. 
        return cmsFirmado.Encode();
    }
    catch (Exception excepcionAlFirmar)
    {
        throw new Exception(""***Error: "" + excepcionAlFirmar.Message);
    }
}

Signing on PKCS # 7 but this makes with a ""PFX"" certificate, that is, that contains the private key in a "".pfx"" file. 
When I use the OpenSSL command:
openssl smime -sign -signer cert.crt -inkey private.key -out file.xml.cms -in file.xml -outform PEM -nodetach

The AC responds well.
How I can do this with BouncyCastle and cer and key files? I am going crazy! :-(
","Unfortunately there seems to be no bouncycastle API documentation for C#. Never the less there's a Java reference which is said to be quite similar to the C# API.
Hence the getEncoded()-method (look for a C# equivalent, e.g. GetEncoded()) yields a ASN.1 encoded byte[].
You could then go ahead and get a string from that (note that I'm not familiar with ASN.1 encoding. This is just a guess 😉):
byte[] buffer = datosFirmados.GetEncoded();
string signedDataString = System.Text.Encoding.UTF8.GetString(buffer, 0, buffer.Length);

Edit:
Maybe the AsnEncodedData-class would be more appropriate for that task:
byte[] buffer = datosFirmados.GetEncoded();
var asndata = new AsnEncodedData(buffer);
const bool multiline = true;
string signedDataString = asndata.Format(multiline);

","2054","<c#><bouncycastle><sign><pkcs#7>","1","0","1","2016-02-01 07:04:38","","6","","3980065","","2016-02-01 07:04:38","2016-01-30 07:51:07",""
"14584903","Error signing file pkcs#7 and bouncycastle java","I'm getting the following error when trying to sign a file.
Exception in thread ""main"" org.bouncycastle.operator.OperatorCreationException: exception on setup: java.security.NoSuchAlgorithmException: no such algorithm: 1.3.14.3.2.26 for provider SunPKCS11-eToken
    at org.bouncycastle.operator.jcajce.JcaDigestCalculatorProviderBuilder$1.get(Unknown Source)
    at org.bouncycastle.cms.SignerInfoGenerator.(Unknown Source)
    at org.bouncycastle.cms.SignerInfoGenerator.(Unknown Source)
    at org.bouncycastle.cms.SignerInfoGeneratorBuilder.createGenerator(Unknown Source)
    at org.bouncycastle.cms.SignerInfoGeneratorBuilder.build(Unknown Source)
    at org.bouncycastle.cms.jcajce.JcaSignerInfoGeneratorBuilder.build(Unknown Source)
    at org.bouncycastle.cms.jcajce.JcaSignerInfoGeneratorBuilder.build(Unknown Source)
    at testapp.Testapp.setUpProvider(Testapp.java:111)
    at testapp.Testapp.main(Testapp.java:74)
Caused by: java.security.NoSuchAlgorithmException: no such algorithm: 1.3.14.3.2.26 for provider SunPKCS11-eToken
    at sun.security.jca.GetInstance.getService(GetInstance.java:83)
    at sun.security.jca.GetInstance.getInstance(GetInstance.java:202)
    at java.security.Security.getImpl(Security.java:688)
    at java.security.MessageDigest.getInstance(MessageDigest.java:233)
    at org.bouncycastle.jcajce.ProviderJcaJceHelper.createDigest(Unknown Source)
    at org.bouncycastle.operator.jcajce.OperatorHelper.createDigest(Unknown Source)
    ... 9 more
Java Result: 1
Here is the code:
    InputStream cnfStream = new ByteArrayInputStream(pkcs11config.getBytes());
    Provider p = new sun.security.pkcs11.SunPKCS11(cnfStream);
    Security.addProvider(p);
    KeyStore ks = KeyStore.getInstance(""PKCS11"", p);
    ks.load(null, PASSWORD);
    byte[] signedData = sign(data, ks, p);

public static byte[] sign(byte[] data, KeyStore ks, Provider p) throws Exception {

    String alias = ks.aliases().nextElement();

    List certList = new ArrayList();
    CMSTypedData msg = new CMSProcessableByteArray(data); //Data to sign

    X509Certificate cert = (X509Certificate) ks.getCertificate(alias);
    certList.add(cert); //Adding the X509 Certificate

    Store certs = new JcaCertStore(certList);

    CMSSignedDataGenerator gen = new CMSSignedDataGenerator();
    //Initializing the the BC's Signer
    ContentSigner sha1Signer = new JcaContentSignerBuilder(""SHA1withRSA"").setProvider(p).build((PrivateKey)ks.getKey(alias, PASSWORD));

    gen.addSignerInfoGenerator(
            new JcaSignerInfoGeneratorBuilder(
            new JcaDigestCalculatorProviderBuilder().setProvider(p).build())
            .build(sha1Signer, cert));
    //adding the certificate
    gen.addCertificates(certs);
    //Getting the signed data
    CMSSignedData sigData = gen.generate(msg, false);
    return sigData.getEncoded();
}

Any idea?
Thanks in advance
","Ok, I ended up solving this on my own.Here is the working code:
    private void findProvider() {
        String driver;
        byte[] pkcs11config;
        for (int i = indiceDrivers; i < largoDrivers; i++) {
            driver = DRIVERS[i];
            File f = new File(REPO + driver);
            if (!f.exists()) {
                continue;
            }
            pkcs11config = String
                    .format(""name = eToken\n library = %s%s"", REPO, driver)
                    .getBytes();
            try {
                InputStream cnfStream = new ByteArrayInputStream(pkcs11config);
                provider = new sun.security.pkcs11.SunPKCS11(cnfStream);
                keyStore = KeyStore.getInstance(""PKCS11"", this.provider);
                Security.addProvider(provider);
                keyStore.load(null, password);
                System.out.println(""OK: "" + driver);
                break;
            } catch (Exception e) {
                //Solo con fines de prueba
                System.out.println(""ERROR: "" + driver);
            }
        }
        if (provider == null) {
            throw new RuntimeException(""Los drivers del token no estan instalados."");
        } else if (provider != null && keyStore == null) {
            throw new RuntimeException(""El token no esta conectado."");
        }
    }

 public void sign(File input, File output) throws Exception {
        String alias = keyStore.aliases().nextElement();
        List certList = new ArrayList();
        CMSTypedData msg = new CMSProcessableFile(input);
        X509Certificate cert = (X509Certificate) keyStore.getCertificate(alias);
        certList.add(cert);
        Store certs = new JcaCertStore(certList);
        CMSSignedDataGenerator gen = new CMSSignedDataGenerator();
        ContentSigner sha1Signer = new JcaContentSignerBuilder(""SHA1withRSA"").setProvider(provider).build((PrivateKey) keyStore.getKey(alias, password));
        Security.addProvider(new BouncyCastleProvider());
        gen.addSignerInfoGenerator(
                new JcaSignerInfoGeneratorBuilder(
                new JcaDigestCalculatorProviderBuilder().setProvider(""BC"").build())
                .build(sha1Signer, cert));
        gen.addCertificates(certs);
        CMSSignedData sigData = gen.generate(msg, true);

        FileOutputStream fileOuputStream = new FileOutputStream(output);
        fileOuputStream.write(sigData.getEncoded());
        fileOuputStream.flush();
        fileOuputStream.close();
    }

","2033","<java><bouncycastle><pkcs#7><pkcs#11>","0","0","1","2015-09-10 11:21:39","","0","2","","","","2013-01-29 14:11:44",""
"13007823","X509_verify_cert returning 0 (ZERO)","I am implementing the code below (Do see the comments)::
#include <stdio.h>
#include <openssl/crypto.h>
#include <openssl/err.h>
#include <openssl/pem.h>
#include <openssl/rand.h>

#pragma comment(lib, ""ssleay32.lib"")
#pragma comment(lib, ""libeay32.lib"")

void verifyCertificate() ;
X509 *loadCert(char*) ;
void loadToStore(char*, X509_STORE*&) ;

void verifyCertificate()
{
    int i = 0 ;
    char argv[50] = ""C:\\My\\CA.pem"" ;  /* Details:: Issuer = Verisign Inc & Subject = Verisign Inc
    char argv1[50] = ""C:\\My\\mid1.pem"" ;   /* Details:: Issuer = Thawte & Subject = Verisign Inc
    char argv2[50] = ""C:\\My\\mid2.pem"" ;   /* Details:: Issuer = Verisign Inc & Subject = Verisign Inc
    char argv3[50] = ""C:\\My\\Signer.pem"" ; /* Details:: Issuer = Verisign Inc & Subject = SignerOrganisation

    X509 *cert = loadCert(argv3);
    X509_STORE *store = X509_STORE_new();

    loadToStore(argv, store);
    loadToStore(argv1, store);
    loadToStore(argv2, store);

    X509_STORE_CTX *ctx = X509_STORE_CTX_new();

    X509_STORE_CTX_init(ctx, store, cert, NULL);

    i = X509_verify_cert(ctx);
    printf(""i = %d\n"", i) ; // Returns i = 0
    if (i != 1)
      printf(""%s"", X509_verify_cert_error_string(ctx->error));
           // Returns ""Certificate Signature Failure""

    X509_STORE_CTX_cleanup(ctx);
    X509_STORE_CTX_free(ctx);
    X509_STORE_free(store);
    ctx = NULL;
    store = NULL;
}

void loadToStore(char* file, X509_STORE *&store)
{
    X509 *cert = loadCert(file);
    if (cert != NULL)
        X509_STORE_add_cert(store, cert);
    else
        printf(""Can not load certificate"");
}

X509 *loadCert(char* file)
{
    FILE *fp = fopen(file, ""rb"");
    X509 *cert = PEM_read_X509(fp, NULL, NULL, NULL);
    fclose(fp);
    return cert;
}

int main(int argc, char** argv)
{
    verifyCertificate() ;
    return 0 ;
}

I have extracted each and every certificate contained and then loaded them in the store.
Problem:: X509_verify_cert is returning Zero(0). Any advises?
","X509_verify_cert returns success only for valid certificates chains i.e. each next certificate has to be signed by previous one (except 1st that has to be self-signed). To determine whether you have a valid chain full information about your pems should be provided. But considering your comments I see that CA.pem doesn't sign mid1.pem because CA.pem's subject (Verisign Inc) is not equal to mid1.pem's issuer (Thawte)
","1980","<openssl><certificate><verification><x509><pkcs#7>","2","1","1","2014-08-12 07:09:31","","2","","1182192","","2012-10-22 09:05:25","2012-10-22 08:50:38",""
"6475106","Failed in reading PKCS7 signed file with s/mime format ( big size )","I want to verify signed file with s/mime format and the pkcs7 file size is 500MB.
openssl smime -verify -in test.pk7 -inform DER 
Error reading S/MIME message
715956256:error:07069041:memory buffer routines:BUF_MEM_grow_clean:malloc failure:buffer.c:152:
715956256:error:0D06B041:asn1 encoding routines:ASN1_D2I_READ_BIO:malloc failure:a_d2i_fp.c:229:
Is it possible with limited memory usage e.g.200MB ?
","Unfortunately, OpenSSL will load the whole file in memory.
If possible switching PKCS#7 detached signatures would reduce significantly the memory requirements. That means having the data and the signature as 2 separate files.
","1979","<linux><openssl><pkcs#7><smime>","1","1","4","2014-04-03 07:53:15","22831165","0","","","","","2011-06-25 00:58:14",""
"6475106","Failed in reading PKCS7 signed file with s/mime format ( big size )","I want to verify signed file with s/mime format and the pkcs7 file size is 500MB.
openssl smime -verify -in test.pk7 -inform DER 
Error reading S/MIME message
715956256:error:07069041:memory buffer routines:BUF_MEM_grow_clean:malloc failure:buffer.c:152:
715956256:error:0D06B041:asn1 encoding routines:ASN1_D2I_READ_BIO:malloc failure:a_d2i_fp.c:229:
Is it possible with limited memory usage e.g.200MB ?
","I had this problem with a 1.4GB encrypted file, on 32bit host it failed on mallocs, on 64bit it got through.
","1979","<linux><openssl><pkcs#7><smime>","1","0","4","2014-04-03 07:53:15","22831165","0","","","","","2011-06-25 00:58:14",""
"6475106","Failed in reading PKCS7 signed file with s/mime format ( big size )","I want to verify signed file with s/mime format and the pkcs7 file size is 500MB.
openssl smime -verify -in test.pk7 -inform DER 
Error reading S/MIME message
715956256:error:07069041:memory buffer routines:BUF_MEM_grow_clean:malloc failure:buffer.c:152:
715956256:error:0D06B041:asn1 encoding routines:ASN1_D2I_READ_BIO:malloc failure:a_d2i_fp.c:229:
Is it possible with limited memory usage e.g.200MB ?
","As Mathias mentions, you can stream process the data in OpenSSL if the signature is detached.
Now if your signature isn't detached, you should still be able detach it yourself. The PKCS#7 format is well-documented. asn1c can work in chunks so you should be able to work with that.
Of course, the proper solution is to get a detached signature in the first place.
","1979","<linux><openssl><pkcs#7><smime>","1","0","4","2014-04-03 07:53:15","22831165","0","","","","","2011-06-25 00:58:14",""
"6475106","Failed in reading PKCS7 signed file with s/mime format ( big size )","I want to verify signed file with s/mime format and the pkcs7 file size is 500MB.
openssl smime -verify -in test.pk7 -inform DER 
Error reading S/MIME message
715956256:error:07069041:memory buffer routines:BUF_MEM_grow_clean:malloc failure:buffer.c:152:
715956256:error:0D06B041:asn1 encoding routines:ASN1_D2I_READ_BIO:malloc failure:a_d2i_fp.c:229:
Is it possible with limited memory usage e.g.200MB ?
","I have used NSS library which supports chunk-based processing and it worked perfectly.
","1979","<linux><openssl><pkcs#7><smime>","1","0","4","2014-04-03 07:53:15","22831165","0","","","","","2011-06-25 00:58:14",""
"16014157","How to convert X509 certificate into PKCS7 using bouncycastle?","Hi, all! My problem is following: I 'm trying to encrypt X509 certificate to PKCS7 but I receive a wrong result.
The first attempt is:(used bcmail-jdk16:1.46)

            Security.addProvider(new BouncyCastleProvider());

            keystore = KeyStore.getInstance(""PKCS12"", ""BC"");
            keystore.load (new FileInputStream(PATH+""//pkcs7-csr-cer//identity.p12""), ""testpassword"".toCharArray());
            PrivateKey privateKey = (PrivateKey)keystore.getKey(""testclientcert"", ""testpassword"".toCharArray());

            CMSSignedDataGenerator signedDataGen = new CMSSignedDataGenerator();

            signedDataGen.addSigner(privateKey, certificate, CMSSignedDataGenerator.ENCRYPTION_RSA, CMSSignedDataGenerator.DIGEST_SHA256);
            CMSProcessableFile pkcs7 = new CMSProcessableFile(new File(destinationfile));
            CMSSignedData signedData = signedDataGen.generate(pkcs7, true, ""BC"");
            signedData = new CMSSignedData(pkcs7, signedData.getEncoded());


...and it doesn't work.
The second attempt is next(used bcmail-jdk16-140):

        Security.addProvider(new BouncyCastleProvider());

        CMSEnvelopedDataGenerator envDataGen = new CMSEnvelopedDataGenerator();
        envDataGen.addKeyTransRecipient(certificate);

        CMSProcessable sData = new CMSProcessableByteArray(certificate.getEncoded());
        CMSEnvelopedData enveloped = envDataGen.generate(sData, CMSEnvelopedDataGenerator.AES256_CBC, ""BC"");
        return enveloped.getEncoded();

I get wrong results in both cases.
Help please who know a right way to do it. Thanks!
","I found the solution!

    private byte[] encryptCertToPKCS7(X509Certificate certificate, Key key) 
                throws CertificateEncodingException, CMSException, NoSuchProviderException, NoSuchAlgorithmException, IOException, OperatorCreationException {
        CMSSignedDataGenerator generator = new CMSSignedDataGenerator();

        ContentSigner sha256Signer = new JcaContentSignerBuilder(""SHA256withRSA"").setProvider(""BC"").build((PrivateKey) key);
        generator.addSignerInfoGenerator(new JcaSignerInfoGeneratorBuilder(new JcaDigestCalculatorProviderBuilder()
                                                                               .setProvider(""BC"").build())
                                                                              .build(sha256Signer, certificate));
        generator.addCertificates(new JcaCertStore(certificates));
        CMSTypedData content = new CMSProcessableByteArray(certificate.getEncoded());

        CMSSignedData signedData = generator.generate(content, true);
        return signedData.getEncoded();
    }


","1944","<java><bouncycastle><x509><pkcs#7>","1","0","1","2013-04-19 13:07:05","16105361","0","","1809141","","2013-04-15 18:10:48","2013-04-15 11:36:00",""
"16934954","padding with PKCS7 [C]","I want to do padding with PKCS7 :
char *test1 = ""azertyuiopqsdfgh"";
char *test2 = malloc(32*sizeof(char));

memcpy(test2, test1, strlen(test1));

char pad = (char)(32-strlen(test1));
printf(""pad = %d\n"", pad);

for(int i = strlen(test1) ; i < 32 ; i++) {
    test2[i] = pad;
}
for (int i = 0 ; i < 32 ; i++)
    printf(""%x "", test2[i]);
printf(""\n"");

I obtain :
pad = 16

61 7a 65 72 74 79 75 69 6f 70 71 73 64 66 67 68 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10

But i want :
pad = 16

61 7a 65 72 74 79 75 69 6f 70 71 73 64 66 67 68 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16

How can i modify my code ?
Thanks in advance.
","With 
printf(""%x "", test2[i]);

You are printing in hexadecimal (%x) whereas with 
printf(""pad = %d\n"", pad);` you are printing in decimal (%d). 

And (decimal) 16 => (hexa) 10, So you are displaying the right thing.
You could probably play a bit with your printing to display 16 instead of 10 but I don't think this is what you are searching for.
","1884","<c><padding><pkcs#7>","0","0","1","2013-06-05 08:33:02","16935103","0","1","","","","2013-06-05 08:25:07",""
"9413006","PHP Reading a S/Mime email p7m attachment (Base64?)","We have a system using Symantec's PGP Universal Web Messenger.
This means that emails are sent to me using s/mime encryption from a pkcs12 cert.
I'm having a bit of trouble reading the messages in PHP.
I have all the imap code but now how do I read the encrypted p7m attached file. Is it just Base64 encoded and signed? 
EDIT: I have the public key.
Here is the mime info:-
Content-Type: application/pkcs7-mime; smime-type=enveloped-data;\r\n\tname=""Message.p7m""\r\nContent-Transfer-Encoding: BASE64\r\nContent-Disposition: attachment; filename=""Message.p7m""

","The P7M file type is primarily associated with a PKCS #7 MIME Message. See Section 3.2 in RFC 2311:

3.2 The application/pkcs7-mime Type

    The application/pkcs7-mime type is used to carry PKCS #7 objects of
    several types including envelopedData and signedData. The details of
    constructing these entities is described in subsequent sections. This
    section describes the general characteristics of the
    application/pkcs7-mime type.

    This MIME type always carries a single PKCS #7 object. The PKCS #7
    object must always be BER encoding of the ASN.1 syntax describing the
    object. The contentInfo field of the carried PKCS #7 object always
    contains a MIME entity that is prepared as described in section 3.1.
    The contentInfo field must never be empty.

    Since PKCS #7 objects are binary data, in most cases base-64 transfer
    encoding is appropriate, in particular when used with SMTP transport.
    The transfer encoding used depends on the transport through which the
    object is to be sent, and is not a characteristic of the MIME type.

    Note that this discussion refers to the transfer encoding of the PKCS
    \#7 object or ""outside"" MIME entity. It is completely distinct from,
    and unrelated to, the transfer encoding of the MIME entity secured by
    the PKCS #7 object, the ""inside"" object, which is described in
    section 3.1.

    Because there are several types of application/pkcs7-mime objects, a
    sending agent SHOULD do as much as possible to help a receiving agent
    know about the contents of the object without forcing the receiving
    agent to decode the ASN.1 for the object. The MIME headers of all
    application/pkcs7-mime objects SHOULD include the optional ""smime-
    type"" parameter, as described in the following sections.


This is basically a secure E-mail file sent in encrypted form. If everything is set up properly you should have a public key necessary to decrypt the file. If not, download it.
In your case the transfer encoding is Base64. Decode the attachment first (if you don't have done this so far) and then process the binary data.
","1877","<php><mime><pkcs#7><smime>","1","1","1","2015-07-20 15:34:39","9413110","0","1","911738","","2012-02-23 12:34:35","2012-02-23 12:23:46",""
"41767351","Create pkcs7 signature from file digest","Currently i have a client-server application that, given a PDF file, signs it (with the server certificate), attachs the signature with the original file and returns the output back to the client (all of this is achieved with PDFBox). 

I have a Signature handler, which is my External Signing Support (where content is the PDF file)
    public byte[] sign(InputStream content) throws IOException {
    try {
        System.out.println(""Generating CMS signed data"");
        CMSSignedDataGenerator generator = new CMSSignedDataGenerator();
        ContentSigner sha1Signer = new JcaContentSignerBuilder(""Sha1WithRSA"").build(privateKey);
        generator.addSignerInfoGenerator(
                new JcaSignerInfoGeneratorBuilder(new JcaDigestCalculatorProviderBuilder().build())
                        .build(sha1Signer, new X509CertificateHolder(certificate.getEncoded())));
        CMSTypedData cmsData = new CMSProcessableByteArray(IOUtils.toByteArray(content));
        CMSSignedData signedData = generator.generate(cmsData, false);

        return signedData.getEncoded();
    } catch (GeneralSecurityException e) {
        throw new IOException(e);
    } catch (CMSException e) {
        throw new IOException(e);
    } catch (OperatorCreationException e) {
        throw new IOException(e);
    }
}

It works fine, but i was thinking - what if the PDF file is too big to be uploaded? ex: 100mb... it would take forever!
Given that, i am trying to figure out, if instead of signing the PDF file, is it possible to just sign the Hash (ex SHA1) of that file and than the client puts it all together in the end?
Update:
I have been trying to figure this out, and now my signing method is:
    @Override
public byte[] sign(InputStream content) throws IOException {
    // testSHA1WithRSAAndAttributeTable
    try {
        MessageDigest md = MessageDigest.getInstance(""SHA1"", ""BC"");
        List<Certificate> certList = new ArrayList<Certificate>();
        CMSTypedData msg = new CMSProcessableByteArray(IOUtils.toByteArray(content));

        certList.add(certificate);

        Store certs = new JcaCertStore(certList);

        CMSSignedDataGenerator gen = new CMSSignedDataGenerator();

        Attribute attr = new Attribute(CMSAttributes.messageDigest,
                new DERSet(new DEROctetString(md.digest(IOUtils.toByteArray(content)))));

        ASN1EncodableVector v = new ASN1EncodableVector();

        v.add(attr);

        SignerInfoGeneratorBuilder builder = new SignerInfoGeneratorBuilder(new BcDigestCalculatorProvider())
                .setSignedAttributeGenerator(new DefaultSignedAttributeTableGenerator(new AttributeTable(v)));

        AlgorithmIdentifier sha1withRSA = new DefaultSignatureAlgorithmIdentifierFinder().find(""SHA1withRSA"");

        CertificateFactory certFactory = CertificateFactory.getInstance(""X.509"");
        InputStream in = new ByteArrayInputStream(certificate.getEncoded());
        X509Certificate cert = (X509Certificate) certFactory.generateCertificate(in);

        gen.addSignerInfoGenerator(builder.build(
                new BcRSAContentSignerBuilder(sha1withRSA,
                        new DefaultDigestAlgorithmIdentifierFinder().find(sha1withRSA))
                                .build(PrivateKeyFactory.createKey(privateKey.getEncoded())),
                new JcaX509CertificateHolder(cert)));

        gen.addCertificates(certs);

        CMSSignedData s = gen.generate(new CMSAbsentContent(), false);
        return new CMSSignedData(msg, s.getEncoded()).getEncoded();

    } catch (Exception e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
        throw new IOException(e);
    }

}

And i am merging the signature with the PDF with pdfbox
            ExternalSigningSupport externalSigning = document.saveIncrementalForExternalSigning(output);
        byte[] cmsSignature = sign(externalSigning.getContent());
        externalSigning.setSignature(cmsSignature);

The problem is that Adobe says the signature is invalid because the ""document has been altered or corrupted since it was signed"".
Can anyone help?
","In his update the OP nearly has it right, there merely are two errors:

He tries to read the InputStream parameter content twice:
CMSTypedData msg = new CMSProcessableByteArray(IOUtils.toByteArray(content));
[...]
Attribute attr = new Attribute(CMSAttributes.messageDigest,
        new DERSet(new DEROctetString(md.digest(IOUtils.toByteArray(content)))));

Thus, all data had already been read from the stream before the second attempt which consequently returned an empty byte[]. So the message digest attribute contained a wrong hash value.
He creates the final CMS container in a convoluted way:
return new CMSSignedData(msg, s.getEncoded()).getEncoded();


Reducing the latter to what is actually needed, it turns out that there is no need for the CMSTypedData msg anymore. Thus, the former is implicitly resolved.
After re-arranging the digest calculation to the top of the method and additionally switching to SHA256 (as SHA1 is deprecated in many contexts, I prefer to use a different hash algorithm) and allowing for a certificate chain instead of a single certificate, the method looks like this:
// Digest generation step
MessageDigest md = MessageDigest.getInstance(""SHA256"", ""BC"");
byte[] digest = md.digest(IOUtils.toByteArray(content));

// Separate signature container creation step
List<Certificate> certList = Arrays.asList(chain);
JcaCertStore certs = new JcaCertStore(certList);

CMSSignedDataGenerator gen = new CMSSignedDataGenerator();

Attribute attr = new Attribute(CMSAttributes.messageDigest,
        new DERSet(new DEROctetString(digest)));

ASN1EncodableVector v = new ASN1EncodableVector();

v.add(attr);

SignerInfoGeneratorBuilder builder = new SignerInfoGeneratorBuilder(new BcDigestCalculatorProvider())
        .setSignedAttributeGenerator(new DefaultSignedAttributeTableGenerator(new AttributeTable(v)));

AlgorithmIdentifier sha256withRSA = new DefaultSignatureAlgorithmIdentifierFinder().find(""SHA256withRSA"");

CertificateFactory certFactory = CertificateFactory.getInstance(""X.509"");
InputStream in = new ByteArrayInputStream(chain[0].getEncoded());
X509Certificate cert = (X509Certificate) certFactory.generateCertificate(in);

gen.addSignerInfoGenerator(builder.build(
        new BcRSAContentSignerBuilder(sha256withRSA,
                new DefaultDigestAlgorithmIdentifierFinder().find(sha256withRSA))
                        .build(PrivateKeyFactory.createKey(pk.getEncoded())),
        new JcaX509CertificateHolder(cert)));

gen.addCertificates(certs);

CMSSignedData s = gen.generate(new CMSAbsentContent(), false);
return s.getEncoded();

(CreateSignature method signWithSeparatedHashing)
Used in a fairly minimal signing code frame
void sign(PDDocument document, OutputStream output, SignatureInterface signatureInterface) throws IOException
{
    PDSignature signature = new PDSignature();
    signature.setFilter(PDSignature.FILTER_ADOBE_PPKLITE);
    signature.setSubFilter(PDSignature.SUBFILTER_ADBE_PKCS7_DETACHED);
    signature.setName(""Example User"");
    signature.setLocation(""Los Angeles, CA"");
    signature.setReason(""Testing"");
    signature.setSignDate(Calendar.getInstance());
    document.addSignature(signature);
    ExternalSigningSupport externalSigning =
            document.saveIncrementalForExternalSigning(output);
    byte[] cmsSignature = signatureInterface.sign(externalSigning.getContent());
    externalSigning.setSignature(cmsSignature);
}

(CreateSignature method sign)
like this
try (   InputStream resource = getClass().getResourceAsStream(""test.pdf"");
        OutputStream result = new FileOutputStream(new File(RESULT_FOLDER, ""testSignedWithSeparatedHashing.pdf""));
        PDDocument pdDocument = PDDocument.load(resource)   )
{
    sign(pdDocument, result, data -> signWithSeparatedHashing(data));
}

(CreateSignature test method testSignWithSeparatedHashing)
results in properly signed PDFs, as proper at least as the certificates and private key in question are for the task at hand.

One remark:
The OP used IOUtils.toByteArray(content)) (and so do I in the code above). But considering the OP's starting remark

what if the PDF file is too big to be uploaded? ex: 100mb 

doing so is not such a great idea as it loads a big file into memory at once only for hashing. If one really wants to consider the resource footprint of one's application, one should read the stream a few KB at a time and consecutively digest the data using MessageDigest.update and only use MessageDigest.digest at the end to get the result hash value.
","1860","<java><pdfbox><pkcs#7>","3","3","1","2017-01-25 09:50:58","41848320","3","6","2149348","","2017-01-24 16:56:03","2017-01-20 15:39:56",""
"304658","What is the algorithm identifier when using AES in CBC mode with ISO 10126 padding inside of PKCS#7?","I want to use PKCS#7 as a container format for some encrypted, signed content and we need to use AES in CBC mode with ISO 10126 based padding. I can't seem to find a concrete reference to an algorithm identifier to use for this combination. I can invent my own but would then lose interoperability with other tools.
","It turns out that the padding mode does not need to be specified, only the crypto algorithm matters.
","1819","<encryption><standards><aes><pkcs#7>","2","1","3","2011-09-14 16:04:56","5825420","0","1","","","","2008-11-20 08:42:00",""
"304658","What is the algorithm identifier when using AES in CBC mode with ISO 10126 padding inside of PKCS#7?","I want to use PKCS#7 as a container format for some encrypted, signed content and we need to use AES in CBC mode with ISO 10126 based padding. I can't seem to find a concrete reference to an algorithm identifier to use for this combination. I can invent my own but would then lose interoperability with other tools.
","The padding mode does not need to be specified. This is true because PKCS#7 (like many other cryptographic containers) uses ASN.1/BER encoding. As the BER encoding contains the exact length of the message inside the padded plain text, the actual value of the padding doesn't matter.
","1819","<encryption><standards><aes><pkcs#7>","2","4","3","2011-09-14 16:04:56","5825420","0","1","","","","2008-11-20 08:42:00",""
"304658","What is the algorithm identifier when using AES in CBC mode with ISO 10126 padding inside of PKCS#7?","I want to use PKCS#7 as a container format for some encrypted, signed content and we need to use AES in CBC mode with ISO 10126 based padding. I can't seem to find a concrete reference to an algorithm identifier to use for this combination. I can invent my own but would then lose interoperability with other tools.
","I believe if you are using PKCS#7 as your format, the padding is dictated to be, well, ""PKCS7"" padding (n octets of value 'n', see RFC 2315, section 10.3.2).
The algorithm identifier(s) for AES/CBC are given in e.g. RFC 3565:
-- AES information object identifiers --

aes OBJECT IDENTIFIER ::= { joint-iso-itu-t(2) country(16) us(840)
               organization(1) gov(101) csor(3)_ nistAlgorithms(4)  1 }

-- AES using CBC-chaining mode for key sizes of 128, 192, 256

id-aes128-CBC OBJECT IDENTIFIER ::= { aes 2 }
id-aes192-CBC OBJECT IDENTIFIER ::= { aes 22 }
id-aes256-CBC OBJECT IDENTIFIER ::= { aes 42 }

So, e.g. the OID for 128-bit AES in CBC mode is 2.16.840.1.101.3.4.1.2
Technically, these are for CMS, which is essentially the updated PKCS#7.
","1819","<encryption><standards><aes><pkcs#7>","2","1","3","2011-09-14 16:04:56","5825420","0","1","","","","2008-11-20 08:42:00",""
"12438379","Converting BIO* to PKCS7* in C++ using OpenSSL library","I've got a problem regarding BIO* to PKCS7* conversion. I want to call PKCS7_decrypt() function to decrypt a cipher text. Before that, I have this section of code:
in = BIO_new_mem_buf(chEnc, iLength);
if (!in) {
    fprintf(stderr, ""\nError in BIO_new_mem_buf in verifyEC. STDERR: "");
    ERR_print_errors_fp(stderr);
    return 0;
}

p7 = d2i_PKCS7_bio(in, NULL);
if (!p7) {
    fprintf(stderr, ""Error in d2i_PKCS7_bio.\n"");
    ERR_print_errors_fp(stderr);
    return 0;
}

d2i_PKCS7_bio() always fails and returns this error message:
140172957116064:error:0D0680A8:asn1 encoding routines:ASN1_CHECK_TLEN:wrong tag:tasn_dec.c:1319:
140172957116064:error:0D07803A:asn1 encoding routines:ASN1_ITEM_EX_D2I:nested asn1 error:tasn_dec.c:381:Type=PKCS7
Any idea how to fix it? Is it the problem due to encoding? or is it a conversion problem?
Thanks in advance
","This is probably due to a wrong input format:
d2i_PKCS7_bio expect a binary der PKCS7.
On the other hand, if your input is in a pem format you should call PEM_read_bio_PKCS7 instead.
","1795","<c++><c><openssl><pkcs#7>","0","0","1","2012-09-19 10:06:38","","0","","","","","2012-09-15 14:53:57",""
"39507483","Signing a PDF with adbe.pkcs7.detached","I have a PDF generator written in C, and now I want to add digital signatures to it. I started with a minimal PDF, signed it with JSignPdf, and am now trying to get my own program to produce a file that Adobe Acrobat Reader will interpret identically. I've checked the Digitally sign PDF files question, but the comments there seemed to conclude that one should use iText instead of trying to do it yourself. I don't want that.
Update:
I have indeed also read both the PDF Reference for 1.7 and the ""32000"" specification linked below, but sometimes I get a bit lost by the number of references. Starting with a working example is often the easiest way for me to understand how everything fits together. Sorry for not making this clear in my initial post.
I've gotten Acrobat Reader to acknowledge that there is a signature in the file, but something is still wrong. In the Signature Panel it says ""Signed by Unknown"" instead of using the correct name from the key. When opening ""Signature Properties"" it says ""This signature is invalid because there are errors in the formatting or information contained in this signature"". On the ""Advanced Signature Properties"", the Hash Algorithm is ""Not available"".
The PDF from JSignPdf is correct, according to Acrobat Reader. After telling it to accept my self signed certificate, it displays a nice green checkbox for the signature. To find the minimal additions needed, I've cleared one PDF tag after another, carefully not changing the offset for the remaining tags. This gives the same ""This signature is invalid..."" error message as above, but it still shows ""The signer's identity is valid"", as well as showing the Hash Algorithm as ""SHA1"".
The question is what the reason is for this difference, and if there are any tools that can give a more detailed explanation of what is wrong?
In the /Type/Catalog dictionary, I have an /AcroForm. I've tried putting it both in place and as a reference, but that makes no difference. The /AcroForm contains /SigFlags 3 and /Fields [ x 0 R ], where x is the id of a /Type/Annot with /Subtype/Widget. (The ""endobj"" is moved to the "">>"" line to save some space here.)
Update: There are some dictionaries, even though I don't remember their name right now, where the ""in place"" vs ""reference"" is significant. Especially the implementation notes in the 1.7 spec has a few of these, as well as a few ""the spec says this field is optional, but actually it's required"".
2 0 obj <<
 /Type /Catalog
 /Pages 3 0 R
 /AcroForm <<
  /Fields [ 8 0 R ]
  /SigFlags 3
  >>
 >> endobj

In the /Type/Page object, I have /Annots [ x 0 R ], which seemed to be required to get Acrobat Reader to accept that there was any signature here at all.
Update: With a working signature, things change a bit. Without this reference, Acrobat Reader does indeed say the signature is valid, but doesn't show any details about it. With it, the ""Signature Properties"" menu item is enabled again.
4 0 obj <<
 /Type /Page
 /Parent 3 0 R
 /Resources <<
  /ProcSet [/PDF /Text]
  /Font << /F1 6 0 R >>
  >>
 /MediaBox [0 0 595 842]
 /Contents 5 0 R
 /Annots [ 8 0 R ]
>> endobj

The /Annot dictionary contains /T(Signature1), /FT/Sig, /Rect[0 0 0 0], and /V y 0 R, where y is a /Type/Sig object. The JSignPdf version also contains ""/F 132"" and ""/P 4 0 R"", but I can't find them in the PDF Specification. They don't seem to be required anyway.
Update: Ah, I had missed the link from section 12.7.1 to 12.5.2.
8 0 obj <<
 /Subtype/Widget
 /T(Signature1)
 /V 7 0 R
 /Type/Annot
 /FT/Sig
 /Rect [ 0 0 0 0 ]
>> endobj

The /Type/Sig object contains /Filter/Adobe.PPKLite, /SubFilter/adbe.pkcs7.detached, /M(D:20160907094326+02'00'), a /ByteRange array and a /Contents string.
Update: I'm using this combination as it was recommended for PDF/A.
7 0 obj <<
 /Contents <3082031f...>
 /Filter/Adobe.PPKLite
 /Type/Sig
 /ByteRange [ 0 904 2907 527 ]
 /SubFilter/adbe.pkcs7.detached
 /M(D:20160907094326+02'00')
>> endobj 

The /ByteArray has for values: 0, offset-of-last-byte-before-""<""-in-Contents, offset-of-first-byte-after-"">"", and the length of the remainder of the file. If I take the file from JSignPdf, run this (where buf contains the file data):
SHA1_Init(ctx);
SHA1_Update(ctx, buf + offset1, len1);
SHA1_Update(ctx, buf + offset2, len2);
SHA1_Final(digest, ctx);

I get the exact same data as in the PKCS7 data for the "":messageDigest"" tag. The same is true for my own file. So, I trust those values to be correct.
Using the same cert and key I get the exact same PKCS7 data, except of course the messageDigest and rsaEncryption hex dumps. However, copying the JSignPdf PKCS7 data to my file (as they are exactly the same length) doesn't work, it still complains about not finding the Hash Algorithm. My PKCS7 data in the JSignPdf works, but of course gives the wrong checksum. So, everything OpenSSL-related is most likely correct, the problem must be in the PDF tags somewhere. Is there a reference I've missed, or some tag or object ordering that must be followed?
Solved: The only remaining thing to play with at this point was the values for the ByteRange tag. The first length was actually ok. However, the second offset was off by one in the implementation, being 1 too small. Adjusting this, I got a green checkbox for the signature!
","In short,
you might have a one-off issue, see at the bold paragraph near the end of the answer. If that turns out not to be your issue, please share the files in question for analysis.
To begin with,
please consider reading the specification for a format before attempting to manipulate files in that format.
The PDF specification is ISO 32000-1 (part 2 is under construction), and you can download a free copy with a very few changes (making clear that this is not the ISO copy) on Adobe's web site:
http://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/PDF32000_2008.pdf
(In the middle of your question text you show that you do know that this document exists but you also show that you have not properly studied it.)
For a first overview on integrated PDF signatures, have a look at this answer on Information Security Stack Exchange.
In detail,
that been said, let's look at your problems and point you to some appropriate section of the specification:

In the /Type/Catalog dictionary, I have an /AcroForm. I've tried putting it both in place and as a reference, but that makes no difference. The /AcroForm contains /SigFlags 3 and /Fields [ x 0 R ], where x is the id of a /Type/Annot with /Subtype/Widget. (The ""endobj"" is moved to the "">>"" line to save some space here.)

The document catalog is specified in section 7.7.2.
The AcroForm dictionary there is specified as


AcroForm dictionary (Optional; PDF 1.2) The document’s interactive form (AcroForm) dictionary (see 12.7.2, ""Interactive Form Dictionary"").


In particular it does not specify whether it is to be a direct object or not. Thus, ""that makes no difference"" indeed.
The interactive form dictionary is specified in section 12.7.2.
In particular,


SigFlags integer (Optional; PDF 1.3) A set of flags specifying various document-level characteristics related to signature fields (see Table 219, and 12.7.4.5, “Signature Fields”). Default value: 0.
...
1 ""SignaturesExist"" If set, the document contains at least one signature field. This flag allows a conforming reader to enable user interface items (such as menu items or pushbuttons) related to signature processing without having to scan the entire document for the presence of signature fields.
2 ""AppendOnly"" If set, the document contains signatures that may be invalidated if the file is saved (written) in a way that alters its previous contents, as opposed to an incremental update. Merely updating the file by appending new information to the end of the previous version is safe (see H.7, “Updating Example”). Conforming readers may use this flag to inform a user requesting a full save that signatures will be invalidated and require explicit confirmation before continuing with the operation.


and


Fields array (Required) An array of references to the document’s root fields(those with no ancestors in the field hierarchy).


and the whole section 12.7 describing interactive forms.

In the /Type/Page object, I have /Annots [ x 0 R ], which seemed to be required to get Acrobat Reader to accept that there was any signature here at all.

Section 12.5 describes annotations.
A signature field is a form field. Form fields can have visualizations on some pages. Such visualizations are Widget annotations. If a form field has only one widget annotation, the form field object and the widget object may be merged into a single object.
All the annotations on some page are referenced from the page's Annots array.
But no, you can have invisible signatures (they do appear in the Adobe Reader signature panel, merely not in the document) which do not require an annotation referenced from a page.

The /Annot dictionary contains /T(Signature1), /FT/Sig, /Rect[0 0 0 0], and /V y 0 R, where y is a /Type/Sig object. The JSignPdf version also contains ""/F 132"" and ""/P 4 0 R"", but I can't find them in the PDF Specification. They don't seem to be required anyway.

Ah, so you do know the specification. Please use it!
T, FT, and V are form field entries, cf. section 12.7.3.
Rect, Type, F, and P are annotation entries, cf. section 12.5.2.

The /Type/Sig object contains /Filter/Adobe.PPKLite, /SubFilter/adbe.pkcs7.detached, /M(D:20160907094326+02'00'), a /ByteRange array and a /Contents string.

All of these entries are specified ion section 12.8.1 and more extensively in the remainder of 12.8.

The /ByteArray has for values: 0, offset-of-last-byte-before-""<""-in-Contents, offset-of-first-byte-after-"">"", and the length of the remainder of the file.

It is specified as


ByteRange array (Required for all signatures that are part of a signature field and usage rights signatures referenced from the UR3 entry in the permissions dictionary) An array of pairs of integers (starting byte offset, length in bytes) that shall describe the exact byte range for the digest calculation. Multiple discontiguous byte ranges shall be used to describe a digest that does not include the signature value (theContents entry) itself.
..
This range should be the entire file, including the signature dictionary but excluding the signature value itself (the Contents entry).


(Even though this merely is a recommendation, signatures not following this recommendation usually are not accepted.)

Your offset-of-last-byte-before-""<""-in-Contents seems odd, it should be the offset of the ""<"", i.e. the length of the part before the ""<"".
Aside from that you seem to have correctly recognized the values in question. If this is not the cause of your problem, therefore, I assume there are still other problems in your PDF or the signature container you inject. Please share the files in question (e.g. via a public dropbox or google drive share) for further analysis.

This all being said, depending on the use case you develop your signing code for you probably should look into PAdES style signatures instead of the good ol'fashioned ones.
","1782","<openssl><pdf-generation><pkcs#7>","2","2","2","2018-02-07 16:57:09","39514099","2","","6834221","","2016-09-16 08:46:32","2016-09-15 09:25:52",""
"39507483","Signing a PDF with adbe.pkcs7.detached","I have a PDF generator written in C, and now I want to add digital signatures to it. I started with a minimal PDF, signed it with JSignPdf, and am now trying to get my own program to produce a file that Adobe Acrobat Reader will interpret identically. I've checked the Digitally sign PDF files question, but the comments there seemed to conclude that one should use iText instead of trying to do it yourself. I don't want that.
Update:
I have indeed also read both the PDF Reference for 1.7 and the ""32000"" specification linked below, but sometimes I get a bit lost by the number of references. Starting with a working example is often the easiest way for me to understand how everything fits together. Sorry for not making this clear in my initial post.
I've gotten Acrobat Reader to acknowledge that there is a signature in the file, but something is still wrong. In the Signature Panel it says ""Signed by Unknown"" instead of using the correct name from the key. When opening ""Signature Properties"" it says ""This signature is invalid because there are errors in the formatting or information contained in this signature"". On the ""Advanced Signature Properties"", the Hash Algorithm is ""Not available"".
The PDF from JSignPdf is correct, according to Acrobat Reader. After telling it to accept my self signed certificate, it displays a nice green checkbox for the signature. To find the minimal additions needed, I've cleared one PDF tag after another, carefully not changing the offset for the remaining tags. This gives the same ""This signature is invalid..."" error message as above, but it still shows ""The signer's identity is valid"", as well as showing the Hash Algorithm as ""SHA1"".
The question is what the reason is for this difference, and if there are any tools that can give a more detailed explanation of what is wrong?
In the /Type/Catalog dictionary, I have an /AcroForm. I've tried putting it both in place and as a reference, but that makes no difference. The /AcroForm contains /SigFlags 3 and /Fields [ x 0 R ], where x is the id of a /Type/Annot with /Subtype/Widget. (The ""endobj"" is moved to the "">>"" line to save some space here.)
Update: There are some dictionaries, even though I don't remember their name right now, where the ""in place"" vs ""reference"" is significant. Especially the implementation notes in the 1.7 spec has a few of these, as well as a few ""the spec says this field is optional, but actually it's required"".
2 0 obj <<
 /Type /Catalog
 /Pages 3 0 R
 /AcroForm <<
  /Fields [ 8 0 R ]
  /SigFlags 3
  >>
 >> endobj

In the /Type/Page object, I have /Annots [ x 0 R ], which seemed to be required to get Acrobat Reader to accept that there was any signature here at all.
Update: With a working signature, things change a bit. Without this reference, Acrobat Reader does indeed say the signature is valid, but doesn't show any details about it. With it, the ""Signature Properties"" menu item is enabled again.
4 0 obj <<
 /Type /Page
 /Parent 3 0 R
 /Resources <<
  /ProcSet [/PDF /Text]
  /Font << /F1 6 0 R >>
  >>
 /MediaBox [0 0 595 842]
 /Contents 5 0 R
 /Annots [ 8 0 R ]
>> endobj

The /Annot dictionary contains /T(Signature1), /FT/Sig, /Rect[0 0 0 0], and /V y 0 R, where y is a /Type/Sig object. The JSignPdf version also contains ""/F 132"" and ""/P 4 0 R"", but I can't find them in the PDF Specification. They don't seem to be required anyway.
Update: Ah, I had missed the link from section 12.7.1 to 12.5.2.
8 0 obj <<
 /Subtype/Widget
 /T(Signature1)
 /V 7 0 R
 /Type/Annot
 /FT/Sig
 /Rect [ 0 0 0 0 ]
>> endobj

The /Type/Sig object contains /Filter/Adobe.PPKLite, /SubFilter/adbe.pkcs7.detached, /M(D:20160907094326+02'00'), a /ByteRange array and a /Contents string.
Update: I'm using this combination as it was recommended for PDF/A.
7 0 obj <<
 /Contents <3082031f...>
 /Filter/Adobe.PPKLite
 /Type/Sig
 /ByteRange [ 0 904 2907 527 ]
 /SubFilter/adbe.pkcs7.detached
 /M(D:20160907094326+02'00')
>> endobj 

The /ByteArray has for values: 0, offset-of-last-byte-before-""<""-in-Contents, offset-of-first-byte-after-"">"", and the length of the remainder of the file. If I take the file from JSignPdf, run this (where buf contains the file data):
SHA1_Init(ctx);
SHA1_Update(ctx, buf + offset1, len1);
SHA1_Update(ctx, buf + offset2, len2);
SHA1_Final(digest, ctx);

I get the exact same data as in the PKCS7 data for the "":messageDigest"" tag. The same is true for my own file. So, I trust those values to be correct.
Using the same cert and key I get the exact same PKCS7 data, except of course the messageDigest and rsaEncryption hex dumps. However, copying the JSignPdf PKCS7 data to my file (as they are exactly the same length) doesn't work, it still complains about not finding the Hash Algorithm. My PKCS7 data in the JSignPdf works, but of course gives the wrong checksum. So, everything OpenSSL-related is most likely correct, the problem must be in the PDF tags somewhere. Is there a reference I've missed, or some tag or object ordering that must be followed?
Solved: The only remaining thing to play with at this point was the values for the ByteRange tag. The first length was actually ok. However, the second offset was off by one in the implementation, being 1 too small. Adjusting this, I got a green checkbox for the signature!
","A certificate is always certified by a certification authority. So, a certificate is signed by an authority. To check a certificate, means to verify this signature and so you need the authority certificate witch must be avalable to process in some root CA.
Your signing pdf certifiacte is self certified. You need to put your self-signed certificate in root CA hive in your cert keystore.
","1782","<openssl><pdf-generation><pkcs#7>","2","0","2","2018-02-07 16:57:09","39514099","2","","6834221","","2016-09-16 08:46:32","2016-09-15 09:25:52",""
"33512409","Automate export x509 certificate w/chain from Server 2008 R2 to a p7b file WITHOUT external tools?","I manage the Domain Controllers centrally, but the site admins manage their own digital senders locally. I can easily export an X509 certificate (private key not needed) with the whole chain from a Windows Server 2008 R2 Domain Controller to a p7b file through the wizard:
~~~~~~~~~~~~~~~~~
...5. The Certificate Export Wizard opens. Click Next.

In the Export File Format dialog box, do the following:
a. Select Cryptographic Message Syntax Standard – PKCS #7 Certificates (.P7B).
b. Check Include all certificates in the certification path if possible.
c. Click Next.
In the File to Export dialog box, click Browse.
In the Save As dialog box, do the following:
a. In the File Name box, type ciroots.p7b.
b. In the Save as type box, select PKCS #7 Certificates (*.p7b).
c. Click Save.
In the File to Export dialog box, click Next.
On the Completing the Certificate Export Wizard page, click Finish.

~~~~~~~~~~~~~~~~~
It works great. The resulting file imports just fine into a digital sender for authentication. It gives the site admins access to the other certs in the chain if they have not already imported them. It does not need to contain the private key, since it works fine without it. 
The trouble is, I would need to do this manually, literally dozens of times, once for each business site, since each has their own Domain Controllers, each with their own certificate. There must be a way I can automate this certificate export (PowerShell w/.NET, certutil.exe, etc.). Maybe something that uses System.Security.Cryptography.X509Certificates X509IncludeOption with WholeChain, but I can't get it to work: 
$Cert = (dir Cert:\localmachine\my)[0]
# PKCS7 cert export with .p7b file extension.
$CertCollection = New-Object 
System.Security.Cryptography.X509Certificates.X509Certificate2Collection
$Cert | %{[void]$CertCollection.Add($_)}
$Exported_pkcs7 = $CertCollection.Export('Pkcs7')
$out_FileName = $ENV:COMPUTERNAME + "".p7b""
$My_Export_Path = 'd:\CertFiles\' +  $out_FileName
Set-Content -path $My_Export_Path -Value $Exported_pkcs7 -encoding Byte
With this code, I only get the certificate, not the rest of the certificates in its chain. I don't need the whole script, just the part that duplicates the export w/chain that I can already do manually through the GUI. 
","You need to build the certificate chain to get chain certificates and add them to collection:
function Export-Certificate {
[CmdletBinding()]
    param(
        [Parameter(Mandatory = $true)]
        [Security.Cryptography.X509Certificates.X509Certificate2]$Certificate,
        [Parameter(Mandatory = $true)]
        [IO.FileInfo]$OutputFile,
        [switch]$IncludeAllCerts
    )
    $certs = New-Object Security.Cryptography.X509Certificates.X509Certificate2Collection
    if ($IncludeAllCerts) {
        $chain = New-Object Security.Cryptography.X509Certificates.X509Chain
        $chain.ChainPolicy.RevocationMode = ""NoCheck""
        [void]$chain.Build($Certificate)
        $chain.ChainElements | ForEach-Object {[void]$certs.Add($_.Certificate)}
        $chain.Reset()
    } else {
        [void]$certs.Add($Certificate)
    }
    Set-Content -Path $OutputFile.FullName -Value $certs.Export(""pkcs7"") -Encoding Byte
}

","1734","<powershell><x509><pkcs#7><certutil>","3","4","1","2015-11-04 18:55:48","","0","2","","","","2015-11-04 01:54:04",""
"1839596","SignedCms.CheckSignature() with renewed cert -> new serial?","i am using
SignedCms.CheckSignature(certColl, true)
(with only one cert in certColl) to verify the signature of a pkcs-7 message. My problem is that i dont want to change the (public part of the) signers certificate on my server after the signer has renewed his certificate :-( The public key, issuer and subject are remaining unchanged after signer has renewed his certificate! So this has to work - at least in my opinion, even if i´m not a crypto-geek :-)  
..but, unfortunately the .NET-Framework throws a Cryptographic Exception ""Cannot find the original signer"" like the stacktrace says exactly at:
SignerInfo.CheckSignature(X509Certificate2Collection extraStore, Boolean verifySignatureOnly)
This must be because the serial number of the signers certificate has changed and the SignerIdentifier property is readonly and set to IssuerAndSerialNumber. 
Does anyone know how workaround this? 
Or do i have to implement a ""handmade"" signature verifying with sth like: signedMessage.ComputeSignature(signer, false)?
Thanks in advance and happy programming,
Krile
","For all interested on this issue:
Someone told me that this is due to the PKCS #7 specification, which states that the SubjectKeyIdentifier is always set to IssuerAndSerialNumber. 
","1731","<certificate><digital-signature><x509certificate2><pkcs#7>","0","0","1","2009-12-15 13:27:19","1907458","0","1","","","","2009-12-03 12:29:01",""
"25358931","Unable to decrypt AES encrypted string from Objective C","I want encrypt and decrypt in Android and IOS and PHP. 
In android and in PHP using 

Encryption type: AES
Encryption Mode: CBC
Padding : PKCS7Padding
Hash Algorithm: SHA-256

when i encrypt and decrypt on android it works perfectly. but when I try to decrypt IOS or PHP encrypted String that is in Base64 or Hex2Binary. On android it decrypt string but first 16 character for IOS case and 19 character for PHP code it doest not decrypt showing other characters. I am pasting android code 
            // Ignore this line this is for encoding
            //String input = ""Congratulation, You've sucessfully decoded!"";

            final byte[] iv = new byte[16];
            Arrays.fill(iv, (byte) 0x00);
            IvParameterSpec ivParameterSpec = new IvParameterSpec(iv);

            // When I tried with this its gives ""pad block corrupted"" exception else work as above i told

            /*byte[] key = CommonUtilities.encryptionKey.getBytes(""UTF-8"");
            System.out.println(key.length);
            MessageDigest sha = MessageDigest.getInstance(""SHA-256"");
            key = sha.digest(key);
            key = Arrays.copyOf(key, 16); // use only first 128 bit
            System.out.println(key.length);
            System.out.println(new String(key,""UTF-8""));
            SecretKeySpec secretKey = new SecretKeySpec(key, ""AES"");*/

            // encryptionKey = ""12345678901234561234567890123456""; Same in IOS and PHP
            SecretKeySpec skeySpec = new SecretKeySpec(CommonUtilities.encryptionKey.getBytes(""UTF-8""), ""AES"");
            Cipher ecipher = Cipher.getInstance(""AES/CBC/PKCS7Padding"");

            // Ignore these lines these are for encoding
            /*ecipher.init(Cipher.ENCRYPT_MODE, skeySpec, ivParameterSpec);
            byte[] dstBuff = ecipher.doFinal(input.getBytes(""UTF-8""));              
            System.out.println(""encrypted: "" + new String(dstBuff, ""UTF-8"")); 
            String enbin2hex = com.byte2hex(dstBuff);    
            String en = Base64.encodeToString(dstBuff, Base64.DEFAULT);*/    


            // this is Hex2Binay that IOS gives me to decrypt
            // Original Text: ""hello shani how are you doing , Stuck in encryption ?""
            String strBin2Hex = ""30BEF4AB063D0D72F91D8D11A7ADEE1B1EC58F67C4D9CC20F59FB56B8B23B7C665198CFF805897BD1AFB82E578AC82C6C18C0EA909E17540D0B95A81E8446168"";



            ecipher.init(Cipher.DECRYPT_MODE, skeySpec, ivParameterSpec);
            byte[] de = ecipher.doFinal(com.hex2Byte(strBin2Hex));  

            //de = removeTrailingNulls(de);
            //int bytesDecryptedAfter = de.length;

            System.out.println(""decrypted: "" + new String(de, ""UTF-8""));
            // Decrypted String ""igohj&t`hnh""kkr&are you doing , Stuck in encryption ?""

Here you can see unable to decrypt full string ""hello shani how "" missing characters.
In IOS using 

AES256
kCCOptionPKCS7Padding
// IOS encrypt code
- (NSData *)AES256EncryptWithKey:(NSString *)key {
char keyPtr[kCCKeySizeAES256+1];     bzero(keyPtr, sizeof(keyPtr)); // fill with zeroes (for padding)




// fetch key data
[key getCString:keyPtr maxLength:sizeof(keyPtr) encoding:NSUTF8StringEncoding];

 NSUInteger dataLength = [self length];

 //See the doc: For block ciphers, the output size will always be less than or
 //equal to the input size plus the size of one block.
 //That's why we need to add the size of one block here
 size_t bufferSize = dataLength + kCCBlockSizeAES128;
 void *buffer = malloc(bufferSize);

 size_t numBytesEncrypted = 0;
 CCCryptorStatus cryptStatus = CCCrypt(kCCEncrypt, kCCAlgorithmAES128, kCCOptionPKCS7Padding,
                                  keyPtr, kCCKeySizeAES256,
                                  ""0000000000000000"" /* initialization vector (optional) */,
                                  [self bytes], dataLength, /* input */
                                  buffer, bufferSize, /* output */
                                  &numBytesEncrypted);
 if (cryptStatus == kCCSuccess) {
     //the returned NSData takes ownership of the buffer and will free it on deallocation
     return [NSData dataWithBytesNoCopy:buffer length:numBytesEncrypted];
 }

 free(buffer); //free the buffer;
 return nil;
 }


Any idea what i am doing wrong.
Thanks for you time
","I see the issues:

Cipher mode (CBC in android code) isn't specified on iOS
Algorithm is specified explicitly on iOS (AES128), and not on Android
Algorithm does not accord to the key size on iOS 128/256.
Initial vector is different

So, instead of
CCCryptorStatus cryptStatus = CCCrypt(kCCEncrypt, kCCAlgorithmAES128, kCCOptionPKCS7Padding,
                                  keyPtr, kCCKeySizeAES256,
                                  ""0000000000000000"" /* initialization vector (optional) */,
                                  [self bytes], dataLength, /* input */
                                  buffer, bufferSize, /* output */
                                  &numBytesEncrypted);
 if (cryptStatus == kCCSuccess) {
     //the returned NSData takes ownership of the buffer and will free it on deallocation
     return [NSData dataWithBytesNoCopy:buffer length:numBytesEncrypted];
 }

I would try
char iv[kCCBlockSizeAES128 + 1]; bzero(iv, sizeof(iv))
CCCryptorStatus cryptStatus = CCCrypt(kCCEncrypt, kCCAlgorithmAES, kCCOptionPKCS7Padding,
                                  keyPtr, kCCKeySizeAES128,
                                  iv,
                                  [self bytes], dataLength, /* input */
                                  buffer, bufferSize, /* output */
                                  &numBytesEncrypted);
 if (cryptStatus == kCCSuccess) {
     //the returned NSData takes ownership of the buffer and will free it on deallocation
     return [NSData dataWithBytesNoCopy:buffer length:numBytesEncrypted];
 }

Ensure, that Android also uses AES128
","1712","<android><ios><aes><sha256><pkcs#7>","0","3","1","2017-08-07 05:07:57","25361274","10","7","1675469","","2014-08-18 09:46:22","2014-08-18 08:16:14",""
"31163542","Can't find class org.bouncycastle.cms.CMSSignedData","I have to load and verify pkcs7 file in java. I found many tutorials that talk about CMSSignedData but I can't find the package org.bouncycastle.cms.*, there is just org.bouncycastle.asn1.cms.* and it doesn't contain the class CMSSignedData.
I downloaded these libraries: bcprov-jdk15on-152.jar, bcprov-ext-jdk15on-152.jar and bcmail-jdk15on-152.jar.
Is there other package that I didn't add ?
","Finally I found the answer, the bcpkix-jdk15on-152.jar was missing. The class CMSSignedData is embedded in this jar. 
Most tutorials that i followed mentioned that only the three jar above are necessary.
","1711","<java><security><bouncycastle><pkcs#7><smime>","0","4","1","2015-07-02 08:46:01","31179712","0","","4800139","","2015-07-01 14:06:38","2015-07-01 14:01:17",""
"9443576","Decode PKCS-7 request","I have a servlet and the content type of my request is of type : application-pkcs-7 
And how do i decode the request ?
Any ideas ?
I learnt that i can use openssl to decode , but not much docs on that . 
","That's probably a signature or an encrypted piece of data. It's old name is PKCS-7 (of RSA labs, publicly available standard) but it is also known as CMS (Cryptographic Message Syntax, publicly available RFC). CMS is a container format for different kinds of encryption. You can parse it in Java using the open source Bouncy Castle libraries - ""bcmail"" in particular, but you probably need some kind of key if it is encrypted. If it is signed, you could simply parse the plain text data from it and ignore the signature, I guess, depends on the application really.
[UPDATE] Since 1.47 the necessary functionality is in the PKIX library of Bouncy Castle.
","1701","<java><servlets><encryption><request><pkcs#7>","0","3","2","2013-03-21 12:41:16","9444024","2","","1033422","","2013-03-21 12:41:16","2012-02-25 11:26:36",""
"9443576","Decode PKCS-7 request","I have a servlet and the content type of my request is of type : application-pkcs-7 
And how do i decode the request ?
Any ideas ?
I learnt that i can use openssl to decode , but not much docs on that . 
","Should work in this way
CMSSignedData cmsSignedData = new CMSSignedData(byte[] signedData);
CMSProcessable cmsProcessable = cmsSignedData.getSignedContent();

In my case it didn't though, because of unknown tag entry while parsing data
","1701","<java><servlets><encryption><request><pkcs#7>","0","1","2","2013-03-21 12:41:16","9444024","2","","1033422","","2013-03-21 12:41:16","2012-02-25 11:26:36",""
"2817501","PKCS#7 Signed Code Image extracting","I wanted to extract the Signer Informations from PKCS#7 Signed Code Image using C/CPP. I wanted to know the openssl API's. I am Able to extract Using bouncy castle (CMSSignedData).
Please let me know the openssl API's which I can use in C/CPP to extract the each signers and signer informations and verify the Signers.
is there any API like X509_LOOKUP_buffer() instead of X509_LOOKUP_file() ???
Thanks in advance opensid
","I had a similar problem. I had to extract signingTime attribute from a PKCS#7 signature. I couldn't find the ultimate solution on the Internet but I could pick up bits and parts from various places and came up to this. Maybe there is a nicer/better/safer way, it's the first time I amd doing this but it seems to work.
In a function I have p_pkcs7SigSize bytes of PKCS#7 signature in a buffer pointing by const void *p_pkcs7Sig. I got signing time by this. I've removed the error handling, do not use this code verbose!
BIO                         *v_in          = NULL;
PKCS7                       *v_p7          = NULL;
STACK_OF(PKCS7_SIGNER_INFO) *v_signerInfos = NULL;
PKCS7_SIGNER_INFO           *v_signerInfo  = NULL;
ASN1_TYPE                   *v_asn1SigningTime  = NULL;

/* make BIO for input buffer */
v_in = BIO_new_mem_buf( (void*)(uintptr_t) p_pkcs7Sig, p_pkcs7SigSize );

/* make a PKCS7 object of it */
v_p7 = d2i_PKCS7_bio( v_in, NULL);

/* get all signer infos */
v_signerInfos = PKCS7_get_signer_info( v_p7 );

/* if you need all signer infos then loop through all, 
 * count you get by k_PKCS7_SIGNER_INFO_num(v_signerInfos) 
 */

/* get the first signer info */
v_signerInfo = sk_PKCS7_SIGNER_INFO_value(v_signerInfos,0);

/* get signing time */
v_asn1SigningTime = PKCS7_get_signed_attribute( v_signerInfo, NID_pkcs9_signingTime );

/* You should got a v_asn1SigningTime->type == V_ASN1_UTCTIME, 
 * if yes then the actual value is in the string buffer at
 * v_asn1SigningTime->value.utctime->data 
 */

if ( v_in )
{
   BIO_free_all( v_in );
   v_in = NULL;
}

","1678","<openssl><x509certificate><x509><pkcs#7>","1","0","1","2010-05-21 06:03:21","2871813","0","","","","","2010-05-12 09:31:15",""
"19288627","RC2 and PKCS7 Encryption in iOS and Android","I'm trying to encrypt data using RC2 algorithm with PKCS7 padding in Android and iOS, but results are different.
I need to get the exact results. The KEY and IV are already provided but I'm not sure what to do with them. I need to get the same result as the codes in ios.
Values for 
IV = ""11223344""
KEY = ""Sample""

IOS Code:
NSString *iv = IV ;

NSData *data = [s dataUsingEncoding:NSASCIIStringEncoding];
//key
NSString *key = KEY;

const char *keyPtr = [key cStringUsingEncoding:NSASCIIStringEncoding];
const char *cIv = [iv cStringUsingEncoding:NSASCIIStringEncoding];

NSUInteger dataLength = [data length];

size_t bufferSize = dataLength + kCCBlockSizeRC2;
void *buffer = malloc(bufferSize);
//kCCBlockSizeAES128
size_t numBytesEncrypted = 0;
CCCryptorStatus cryptStatus = CCCrypt(kCCEncrypt,
                                      kCCAlgorithmRC2,
                                      kCCOptionPKCS7Padding,keyPtr,
                                      [key length],
                                      cIv,
                                      [data bytes],
                                      dataLength,
                                      buffer,
                                      bufferSize,
                                      &numBytesEncrypted);

Android Code:
 SecretKeySpec skeySpec = new SecretKeySpec(Constant.RC2_KEY.getBytes(""US-ASCII""), ""PBEWITHSHAAND128BITRC2-CBC"");
 IvParameterSpec iv = new IvParameterSpec(Constant.RC2_IV.getBytes(""US-ASCII""));
 Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS7Padding"");
 cipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv);
 byte[] encrypted = cipher.doFinal(data);
 return encrypted;

With this code, the cipher.init() does not execute and it results to an error. but when i change ""AES/CBC/PKCS7Padding"" or ""AES/CBC/PKCS5Padding"" to ""PBEWITHSHAAND128BITRC2-CBC"" it doesn't. It encrypts the data but different from the ios code's result.
 Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS7Padding"");
 cipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv);

Can anyone please help me solve this encryption thingy?
","Your Java code looks quite broken - you certainly don't want to be referencing AES as your algorithm.
The following code will use RC2 correctly. I don't have the capability to test your iOS code, so perhaps there are other problems too.
byte[] iv = ""87654321"".getBytes(""US-ASCII"");
byte[] key = ""SampleKey"".getBytes(""US-ASCII"");
byte[] data = new byte[30]; // for example

SecretKeySpec skeySpec = new SecretKeySpec(key, ""RC2"");

RC2ParameterSpec ivSpec = new RC2ParameterSpec(key.length * 8, iv);

Cipher cipher = Cipher.getInstance(""RC2/CBC/PKCS5Padding"");
cipher.init(Cipher.ENCRYPT_MODE, skeySpec, ivSpec);
byte[] encrypted = cipher.doFinal(data);

// ....

Note the use of RC2ParameterSpec, which is required by the algorithm, plus the reference to PKCS5Padding rather than PKCS7Padding.
","1654","<android><ios><encryption><pkcs#7>","1","0","1","2013-10-23 03:44:09","","1","5","1601964","","2013-10-23 03:44:09","2013-10-10 06:30:47",""
"33634379","PKCS #7 detached signature with Python and PyOpenSSL","I need to get a detached PKCS #7 signature of some string in Python, using PyOpenSSL. I've got a key in .p12 file.
So far, I'm trying to do so:
 from OpenSSL.crypto import load_pkcs12, sign

 pkcs12 = load_pkcs12(key_dat, key_pwd)
 algo = pkcs12.get_certificate().get_signature_algorithm()
 pkey = pkcs12.get_privatekey()
 sg = sign(pkey, manifest, algo)

But it's not what required. 
I've searched net, but most examples are related to signing email chunks and use M2Crypto. Is there any way of doing it in bare PyOpenSSL?
","The PKCS#7 OpenSSL functions that you need for this do not seem to be exported by the Python OpenSSL wrapper. You could try to do this via the internals of the crypto module, for example like the following snippet:
>>> with open('cleg.p12', 'r') as f:
...   p12data=f.read()
>>> p12=crypto.load_pkcs12(p12data,'passphrase')
>>> signcert=p12.get_certificate()
>>> pkey=p12.get_privatekey()
>>> bio_in=crypto._new_mem_buf(manifest)
>>> PKCS7_DETACHED=0x40
>>> pkcs7=crypto._lib.PKCS7_sign(signcert._x509, pkey._pkey, crypto._ffi.NULL, bio_in, PKCS7_DETACHED)
>>> bio_out=crypto._new_mem_buf()
>>> crypto._lib.i2d_PKCS7_bio(bio_out, pkcs7)
1
>>> sigbytes=crypto._bio_to_string(bio_out)

After this, sigbytes contains the signature, ASN.1 DER encoded. The constant value for PKCS7_DETACHED is defined in the pkcs7.h header file in OpenSSL.
As you probably know, any identifiers that start with _ are internal to the crypto module and are not supposed to be used by you directly. Therefore, this answer is just for illustration purposes. A proper solution (with correct memory management) should be added to the crypto module itself.
","1652","<python><pkcs#7><pyopenssl>","2","6","1","2015-11-16 01:51:02","","0","4","","","","2015-11-10 16:06:40",""
"11311831","Decrypt char* using PKCS7_decrypt() in openssl","I want to encrypt and decrypt using PKCS7_encrypt() and PKCS7_decrypt() functions in openSSL. I have used the example in openSSL Demo. What I want to do is to encrypt a message in the format of char* and decrypt using that char*. I don't want to read and write into file. Here is the code to encrypt, which perfectly works and has no problem:
in = BIO_new_file(""encr.txt"", ""r"");
if (!in)
    return 0;

/* encrypt content */
p7 = PKCS7_encrypt(recips, in, EVP_des_ede3_cbc(), flags);
if (!p7)
    return 0;

char* chEnc = new char[1000];

BIO* memorybio = BIO_new(BIO_s_mem());
BIO* base64bio = BIO_new(BIO_f_base64());
BIO* outbio = BIO_push(base64bio, memorybio);

/* Copy PKCS#7 */
long ll = i2d_PKCS7_bio(outbio, p7);
BIO_flush(outbio);
BIO_set_flags(memorybio, BIO_FLAGS_MEM_RDONLY);
BIO_get_mem_data(memorybio, &chEnc);
cout << chEnc << ""\n"";

Now, when I want to do the reverse and decrypt the char* chEnc, I did as below:
BIO *in = NULL, *out = NULL, *tbio = NULL;
X509 *rcert = NULL;
EVP_PKEY *rkey = NULL;
PKCS7 *p7 = NULL;
int ret = 1;

OpenSSL_add_all_algorithms();
ERR_load_crypto_strings();

/* Read in recipient certificate and private key */
tbio = BIO_new_file(""signer.pem"", ""r"");

if (!tbio)
    return 0;

rcert = PEM_read_bio_X509(tbio, NULL, 0, NULL);
BIO_reset(tbio);
rkey = PEM_read_bio_PrivateKey(tbio, NULL, 0, NULL);
if (!rcert || !rkey)
    return 0;

BIO* memorybio = BIO_new(BIO_s_mem());
int iLength = BIO_puts(memorybio, chEnc);

BIO* base64bio = BIO_new(BIO_f_base64());
BIO* inbio = BIO_push(base64bio, memorybio);

/* Copy PKCS#7 */
BIO_flush(inbio);
BIO_set_flags(inbio, BIO_FLAGS_MEM_RDONLY);
p7 = d2i_PKCS7_bio(inbio, &p7);
if (!PKCS7_decrypt(p7, rkey, rcert, out, 0))
    return 0;

ret = 0;

if (ret) {
    fprintf(stderr, ""Error Signing Data\n"");
    ERR_print_errors_fp(stderr);
}

if (p7)
    PKCS7_free(p7);
if (rcert)
    X509_free(rcert);
if (rkey)
    EVP_PKEY_free(rkey);

if (in)
    BIO_free(in);
if (out)
    BIO_free(out);
if (tbio)
    BIO_free(tbio);

return ret;

The problem is that the PKCS7_decrypt does not work and it does not decrypt into out variable. After the line if (!PKCS7_decrypt(p7, rkey, rcert, out, 0)) return 0; , it returns from the function. Is the procedure to decrypt correct? Shall I use other APIs of openSSL to convert or something? 
Looking forward to your suggestions and comments.
Thanks
","Are you on your recipient list? Because you need to be the recipient to decrypt the message. Make sure you use the correct key and certificates.
","1638","<c++><openssl><pkcs#7><openca>","1","0","2","2017-10-10 09:39:05","","0","","1578528","","2017-10-10 09:39:05","2012-07-03 13:19:36",""
"11311831","Decrypt char* using PKCS7_decrypt() in openssl","I want to encrypt and decrypt using PKCS7_encrypt() and PKCS7_decrypt() functions in openSSL. I have used the example in openSSL Demo. What I want to do is to encrypt a message in the format of char* and decrypt using that char*. I don't want to read and write into file. Here is the code to encrypt, which perfectly works and has no problem:
in = BIO_new_file(""encr.txt"", ""r"");
if (!in)
    return 0;

/* encrypt content */
p7 = PKCS7_encrypt(recips, in, EVP_des_ede3_cbc(), flags);
if (!p7)
    return 0;

char* chEnc = new char[1000];

BIO* memorybio = BIO_new(BIO_s_mem());
BIO* base64bio = BIO_new(BIO_f_base64());
BIO* outbio = BIO_push(base64bio, memorybio);

/* Copy PKCS#7 */
long ll = i2d_PKCS7_bio(outbio, p7);
BIO_flush(outbio);
BIO_set_flags(memorybio, BIO_FLAGS_MEM_RDONLY);
BIO_get_mem_data(memorybio, &chEnc);
cout << chEnc << ""\n"";

Now, when I want to do the reverse and decrypt the char* chEnc, I did as below:
BIO *in = NULL, *out = NULL, *tbio = NULL;
X509 *rcert = NULL;
EVP_PKEY *rkey = NULL;
PKCS7 *p7 = NULL;
int ret = 1;

OpenSSL_add_all_algorithms();
ERR_load_crypto_strings();

/* Read in recipient certificate and private key */
tbio = BIO_new_file(""signer.pem"", ""r"");

if (!tbio)
    return 0;

rcert = PEM_read_bio_X509(tbio, NULL, 0, NULL);
BIO_reset(tbio);
rkey = PEM_read_bio_PrivateKey(tbio, NULL, 0, NULL);
if (!rcert || !rkey)
    return 0;

BIO* memorybio = BIO_new(BIO_s_mem());
int iLength = BIO_puts(memorybio, chEnc);

BIO* base64bio = BIO_new(BIO_f_base64());
BIO* inbio = BIO_push(base64bio, memorybio);

/* Copy PKCS#7 */
BIO_flush(inbio);
BIO_set_flags(inbio, BIO_FLAGS_MEM_RDONLY);
p7 = d2i_PKCS7_bio(inbio, &p7);
if (!PKCS7_decrypt(p7, rkey, rcert, out, 0))
    return 0;

ret = 0;

if (ret) {
    fprintf(stderr, ""Error Signing Data\n"");
    ERR_print_errors_fp(stderr);
}

if (p7)
    PKCS7_free(p7);
if (rcert)
    X509_free(rcert);
if (rkey)
    EVP_PKEY_free(rkey);

if (in)
    BIO_free(in);
if (out)
    BIO_free(out);
if (tbio)
    BIO_free(tbio);

return ret;

The problem is that the PKCS7_decrypt does not work and it does not decrypt into out variable. After the line if (!PKCS7_decrypt(p7, rkey, rcert, out, 0)) return 0; , it returns from the function. Is the procedure to decrypt correct? Shall I use other APIs of openSSL to convert or something? 
Looking forward to your suggestions and comments.
Thanks
","PKCS7_decrypt(p7, rkey, rcert, out, 0) is failing because the BIO ""out"" that you are passing to the routine is a null pointer.
If you do not want to write the output into a file, try passing a memory BIO: 
BIO *out = BIO_new(BIO_s_mem());

Then you can access the decrypted data directly from out, and once you are done with it you can destroy it.
","1638","<c++><openssl><pkcs#7><openca>","1","0","2","2017-10-10 09:39:05","","0","","1578528","","2017-10-10 09:39:05","2012-07-03 13:19:36",""
"45782506","Is there any python package for parsing pkcs7?","I'm extracting features from Android .APK files with androguard and right now I need to extract the serial number(*) from its signature file (usually CERT.RSA). I've found asn1crypto, but I don't quite understand, how to use it with pkcs7. So is there any python package suitable for this purpose? 
(*):

","
Comment:  I have pkcs7 as a memory object, not a file  

PyOpenSSL does not read from file!

OpenSSL.crypto.load_pkcs7_data(type, buffer)
Load pkcs7 data from the string buffer encoded with the type type.
     The type type must either FILETYPE_PEM or FILETYPE_ASN1).

fromSO Answer 45111623import get_certificates 
from OpenSSL import crypto
pkcs7 = crypto.load_pkcs7_data(crypto.FILETYPE_ASN1, 
                               open('certs/signature.der', 'rb').read())
certs = get_certificates(pkcs7)
for cert in certs:
    print('Subject:{}, Serial Nnumber:{}'.
        format(cert.get_subject(), cert.get_serial_number()))

>>>Subject:<X509Name object '/CN=key1'>, Serial Nnumber:13315126025841024674
>>>Subject:<X509Name object '/CN=key2'>, Serial Nnumber:14142490995367396705



Question: python package for parsing pkcs7?

You can convert PKCS#7 to PEM using openssl, PEM is readable using PyOpenSSL
openssl pkcs7 -print_certs -in sample.p7b -out sample.cer


Read that relevant SO Answer: pyOpenSSL's PKCS7
","1605","<android><python><pkcs#7><androguard>","0","3","1","2019-08-27 07:04:00","45786051","0","","5790918","","2017-08-20 14:45:24","2017-08-20 13:08:03",""
"17879682","Decrypt PKCS#7 Message in C#","I have a PKCS#7 message in an EnvelopedCms instance. 
I also have a private key loaded from a certificate.
Is there a way after decrypting the EnvelopedCms.RecipientInfos[0].EncryptedKey (with the private key) to use the session key in a managed decryption algorithm to decrypt the EnvelopedCms.ContentInfo.Content ?
P.S: I don't want to use EnvelopedCms.Decrypt(), I know it exists, but I don't want to use it.
","It is easy to check for the EnvelopedCms.ContentEncryptionAlgorithm.Oid.FriendlyName property to know which algorithm was used to encrypt the content. The encryption algorithm is chosen by the Outlook user from (Options -> Trust Center -> Trust Center Settings -> Email Security -> Encrypted Email -> Default Settings). Since the encryption algorithm is typically a symmetric algorithm, the KeySize, BlockSize, SymmetricKey, and Initial Vector are usually needed. The value for BlockSize is known from the algorithm. The KeySize could either be known from the name of the algorithm (e.g. AES256 means the KeySize is 256) or by checking the value of EnvelopedCms.ContentEncryptionAlgorithm.KeyLength. The SymmetricKey is given by assumption. The Initial Vector is found in EnvelopedCms.ContentEncryptionAlgorithm.Parameters.
However, you have to watch for the padding of the content or a ""Length of data is invalid"" exception is thrown. Therefore, there's a padding of 6 characters which must be trimmed before attempting to decrypt using the symmetric cipher, however, I don't have an authoritative resource why these 6 zero-characters exist and whether is it safe to assume that they are always to be trimmed.
For the RC2-64 algorithm, the KeyLength property returns 0, therefore make sure to set the KeySize property to 64 before invoking the cipher.
","1584","<c#><encryption><pkcs#7>","1","1","1","2013-08-05 05:34:59","17921873","2","","2256464","","2013-08-05 05:34:59","2013-07-26 11:02:14",""
"53139243","Java AES Encryption with CBC and PKCS7Padding","I have been struggling with this for a couple of days now. I'm required to consume an API that takes an encrypted parameter. The API was written in C#. The encryption requested is the following:

Algorithm:  AES
Cipher mode:    CBC
Padding mode:   PKCS7
Block size: 128
Key size:   256  
Key: String --> The key is generated by converting a provided string to a byte array of size 32: Encoding.ASCII.GetBytes(…). The API states that the String is generated by them using MD5 hashing function of a string.
IV: IV array is generated by converting a provided string to a byte array of size 16: Encoding.ASCII.GetBytes(…).
Representation of encrypted string: Base64 

After searching and trying so many things that were suggested online, I'm still unable to produce the same encrypted value (Specially that PKCS7 is not supported by default and PKCS5 should be working the same, but it's not). Here are some things that I've tried:
1) Using bouncy castle jar to use PKCS7
2) Adding JCE compliance to be able to remove the limit on key and block sizes.  
After contacting them, they sent me an android snippet that's working (which if I run in plain java 8 complains about the provider (NoSuchAlgorithmException: Cannot find any provider supporting AES/CBC/PKCS7Padding)):
public static String encrypt(String value) {
        String plainText = value;
        String escapedString;
        try {
            byte[] key = ENCRYPT_KEY.getBytes(""UTF-8"");
            byte[] ivs = ENCRYPT_IV.getBytes(""UTF-8"");
            Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS7Padding"");
            SecretKeySpec secretKeySpec = new SecretKeySpec(key, ""AES"");
            AlgorithmParameterSpec paramSpec = new IvParameterSpec(ivs);
            cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec, paramSpec);
            escapedString = Base64.encodeToString(cipher.doFinal(plainText.getBytes(""UTF-8"")), Base64.DEFAULT).trim();

            return escapedString;
        } catch (Exception e) {
            e.printStackTrace();
            return value;
        }
    }  

Please any help would be really appreciated.
Here's a code snippet from what I tried:
package com.melhem.TestJava;

import java.io.UnsupportedEncodingException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.Security;
import java.util.Base64;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;


public class StringFunc {


    final static String key = ""API_KEY_32_CHARs"";
    final static String iv = ""API_IV_16_CHARs"";
    final static String algorithm = ""AES/CBC/PKCS7Padding"";
    private static Cipher cipher = null;
    private static SecretKeySpec skeySpec = null;
    private static IvParameterSpec  ivSpec = null;

    public static void main(String[] args) {
        System.out.println(encrypt(""STRING_TO_ENCODE""));
    }

    private static void setUp(){
        try{
            Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider()); 
            skeySpec = new SecretKeySpec(key.getBytes(""ASCII""), ""AES"");
            ivSpec = new IvParameterSpec(iv.getBytes(""ASCII""));
            cipher = Cipher.getInstance(algorithm);
        }catch(NoSuchAlgorithmException | NoSuchPaddingException ex){

            ex.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

    }

    public static String encrypt(String str){
        try{
//            Integer strL = (int) Math.ceil(str.length() / 8.0);
//            Integer strB = strL*8;
//            str = padRight(str, ' ', strB);
            setUp();
            try {
                cipher.init(Cipher.ENCRYPT_MODE, skeySpec, ivSpec);
                System.out.println(""Block size: "" + cipher.getBlockSize() * 8);
                System.out.println(""Algorithm name: "" + cipher.getAlgorithm());
                System.out.println(""Key size: "" + skeySpec.getEncoded().length * 8);
            } catch (InvalidAlgorithmParameterException ex) {
                ex.printStackTrace();
                return """";
            }
            byte[] enc = cipher.doFinal(str.getBytes(""ASCII""));
            String s = new String(Base64.getEncoder().encode(enc));
            s = s.replace(""+"", ""__plus__"");
            s = s.replace(""/"", ""__slash__"");
            return s;
        }catch(InvalidKeyException | IllegalBlockSizeException | BadPaddingException ex){
            ex.printStackTrace();
            return """";            
        } catch (UnsupportedEncodingException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            return """";
        }
    }

    public static String padRight(String msg, char x, int l) {
        String result = """";
        if (!msg.isEmpty()) {
            for (int i=0; i<(l-msg.length()); i++) {
                result = result + x;
            }
            result = msg + result;
        }
        return result;
    }
}

","Java Cipher package only supports PKCS#7 padding; AES/CBC/PKCS5Padding. Use this;
Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");

The #5 and #7 are interchangeable for the most block ciphers. See the question on Crypto.StackExchange 
and, for using AES with 256-bit key size;
Java standard cipher library limited to 128-bit key size. You must go and download Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files 6
","1557","<java><encryption><aes><pkcs#7>","1","0","1","2018-11-04 14:36:57","","3","","2810176","","2018-11-04 14:36:57","2018-11-04 09:11:41",""
"9478164","How to get certificate from pkcs7 file","I have a pkcs#7 file with included signers certificate, CA certificate, CRL. Now, to verify signature from this file I get the certificate from it. I try to do:
HANDLE hFile; 
if(!(hFile = CreateFile(L""c:\\users\\timur\\desktop\\sign_pkcs7.sig"",
                            GENERIC_READ,
                            0,
                            NULL,
                            OPEN_EXISTING,
                            FILE_ATTRIBUTE_NORMAL,
                            NULL)))
{
    printf(""Error opening file %d\n"", GetLastError());
}

HCERTSTORE hPkcsStore = 0;
if(!(hPkcsStore = CertOpenStore(
                    CERT_STORE_PROV_PKCS7,
                    MY_TYPE,
                    NULL,
                    CERT_STORE_OPEN_EXISTING_FLAG,
                    hFile)))
{
    printf(""Cert not found in pkcs7 store error %d.\n"",GetLastError());
}

But while calling CertOpenStore program fails with Access violation reading location 0x0000001c.
","You can use CryptQueryObject to open the P7B file or files in many other formats (the code will be the same as here).
","1532","<c++><cryptoapi><pkcs#7>","0","1","1","2012-03-03 11:31:22","","0","","","","","2012-02-28 07:46:51",""
"13518264","Convert message and signature to BouncyCastle CMSSignedData object","I have an X509CertificateObject, a matching RSAPublicKey and managed to create a byte array containing a valid digital certificate for some message object also as a byte array.
Unfortunately the system I'm building upon only accepts CMSSignedData objects as input.
How do I convert my basic building blocks into such a valid CMSSignedData object?
Background:  I'm experimenting with Java Bouncy Castle RSA blind signatures according to this example (digest is SHA512) and need to feed the result into the standard signature processing.
","First, you'll probably want to sign your data with a private key. The idea being that the signature should be something only you can create. One you get that the rest should be as follows:

X509Certificate signingCertificate = getSigningCertificate();
//The chain of certificates that issued your signing certificate and so on
Collection&ltX509Certificate> certificateChain = getCertificateChain();
PrivateKey pk = getPrivateKey();
byte[] message = ""SomeMessage"".getBytes();

CMSSignedDataGenerator generator = new CMSSignedDataGenerator();
certificateChain.add(signingCertificate);
generator.addCertificates(new CollectionStore(certificateChain));

JcaDigestCalculatorProviderBuilder jcaDigestProvider = new JcaDigestCalculatorProviderBuilder();
jcaDigestProvider.setProvider(new BouncyCastleProvider());
JcaSignerInfoGeneratorBuilder singerInfoGenerator = new JcaSignerInfoGeneratorBuilder(jcaDigestProvider.build());

AlgorithmIdentifier sigAlgId = new DefaultSignatureAlgorithmIdentifierFinder().find(""SHA1withRSA"");
AlgorithmIdentifier digAlgId = new DefaultDigestAlgorithmIdentifierFinder().find(sigAlgId);
AsymmetricKeyParameter privateKeyParam = PrivateKeyFactory.createKey(pk.getEncoded());
ContentSigner cs = new BcRSAContentSignerBuilder(sigAlgId, digAlgId).build(privateKeyParam);

SignerInfoGenerator sig = singerInfoGenerator.build(cs, signingCertificate);
generator.addSignerInfoGenerator(sig);

CMSSignedData data = generator.generate(new CMSProcessableByteArray(message), true);

","1474","<java><rsa><digital-signature><bouncycastle><pkcs#7>","5","0","1","2013-02-22 23:05:59","","0","","474189","","2012-11-23 08:36:13","2012-11-22 18:24:40",""
"508538","PHP Encryption openssl_pkcs7_encrypt() failing","I have this code:
 $fp = fopen($unenc_path, ""w"");
 fwrite($fp, $msg);
 fclose($fp);

 $easy_access_emails = 'person@##.com';
 $headers =   ""From: support@##.com <support@##.com>\n"" . 
              ""Reply-to: support@##.com\n"" . 
              ""Subject: "" . $subject . ""\n"";

 $key = implode("""", file(""../newcert.pem""));

 $ArrayMessageProperties = explode(""\n"", $headers);

 $unenc_path = '..\\tmp\\'. preg_replace('/[^0-9]/','', microtime()) . rand(0,1000) . ""msg.txt"";
 $enc_path = '..\\tmp\\'. preg_replace('/[^0-9]/','', microtime()) . rand(0,1000) . ""enc.txt"";

 if (openssl_pkcs7_encrypt($unenc_path, $enc_path, $key, $ArrayMessageProperties))
 {
    $info = file_get_contents($enc_path);

    foreach ($easy_access_emails as $email)
    {
         mail($email, $subject, $info, $headers);
    }
} else {
    die(""Failed Encryption"");
}

Which works correctly on my local dev environment (Macbook running LAMP).  I moved it to a windows server for testing and now openssl_pkcs7_encrypt fails every time.  I assume this is a permissions issue, since the function needs to write to $enc_path; But I've made the directory on the windows server about as open as is possible. (set full control to just about every user / group that might have something to do with it. Anyone know a good method to debug this?  It appears the function simply returns false when it fails with no indication as to why.
Upon further investigation it appears the script has write access the directory.  It writes to the $unenc_path no problem, just fails on the call to openssl_pkcs7_encrypt.
Another update: I'm using filemon to watch the request some in and i see it opening and writing to the unencrypted file but there's no output for it even trying to write to the encrypted file.
Also added the line that loads the key. I've verified it's loading by echoing it out and it seems to be good.
Another update:  Watching filemon again, around the time it should be calling openssq_pkcs7_encrypt I'm seeing an entry that it's looking for the unencrypted message in the windows tmp directory.  
w3wp.exe:4172  C:\windows\system32\tmp\04277530010012336..msg.txt 
PATH NOT FOUND  Options: Open Access: Read

","Are you loading the key in $key somewhere in your code? I can't see it on the snippet
","1473","<php><encryption><permissions><openssl><pkcs#7>","1","1","2","2017-07-07 08:40:10","509051","2","4","424099","Michael Lasky","2017-07-07 08:40:10","2009-02-03 19:29:07",""
"508538","PHP Encryption openssl_pkcs7_encrypt() failing","I have this code:
 $fp = fopen($unenc_path, ""w"");
 fwrite($fp, $msg);
 fclose($fp);

 $easy_access_emails = 'person@##.com';
 $headers =   ""From: support@##.com <support@##.com>\n"" . 
              ""Reply-to: support@##.com\n"" . 
              ""Subject: "" . $subject . ""\n"";

 $key = implode("""", file(""../newcert.pem""));

 $ArrayMessageProperties = explode(""\n"", $headers);

 $unenc_path = '..\\tmp\\'. preg_replace('/[^0-9]/','', microtime()) . rand(0,1000) . ""msg.txt"";
 $enc_path = '..\\tmp\\'. preg_replace('/[^0-9]/','', microtime()) . rand(0,1000) . ""enc.txt"";

 if (openssl_pkcs7_encrypt($unenc_path, $enc_path, $key, $ArrayMessageProperties))
 {
    $info = file_get_contents($enc_path);

    foreach ($easy_access_emails as $email)
    {
         mail($email, $subject, $info, $headers);
    }
} else {
    die(""Failed Encryption"");
}

Which works correctly on my local dev environment (Macbook running LAMP).  I moved it to a windows server for testing and now openssl_pkcs7_encrypt fails every time.  I assume this is a permissions issue, since the function needs to write to $enc_path; But I've made the directory on the windows server about as open as is possible. (set full control to just about every user / group that might have something to do with it. Anyone know a good method to debug this?  It appears the function simply returns false when it fails with no indication as to why.
Upon further investigation it appears the script has write access the directory.  It writes to the $unenc_path no problem, just fails on the call to openssl_pkcs7_encrypt.
Another update: I'm using filemon to watch the request some in and i see it opening and writing to the unencrypted file but there's no output for it even trying to write to the encrypted file.
Also added the line that loads the key. I've verified it's loading by echoing it out and it seems to be good.
Another update:  Watching filemon again, around the time it should be calling openssq_pkcs7_encrypt I'm seeing an entry that it's looking for the unencrypted message in the windows tmp directory.  
w3wp.exe:4172  C:\windows\system32\tmp\04277530010012336..msg.txt 
PATH NOT FOUND  Options: Open Access: Read

","Turned out Windows / openssl_pkcs7_encrypt didn't like that relative path, giving a full path after messing with forward and backslashes (/. \\) for a bit fixed it.  
","1473","<php><encryption><permissions><openssl><pkcs#7>","1","4","2","2017-07-07 08:40:10","509051","2","4","424099","Michael Lasky","2017-07-07 08:40:10","2009-02-03 19:29:07",""
"4513155","How to extract pkcs7 envelop contents and verify digital signature?","I want to verify the digital signature of the pkcs7 envelop .
PKCS7 envelop has message content,signer certificate, signature in it.
How to extract this parts ?
And how to verify digital signature ?
Also I want to check the authenticity of the signer certificate which is a x509 digital certificate .
","If you have the PKCS7 message in an OpenSSL PKCS7 * object, you can simply use PKCS7_verify().  It will verify the signature and the certificate using the supplied trusted certificate store.
If the message is in S/MIME format, the SMIME_read_PKCS7() function can be used to turn it into a PKCS7 * object.
","1464","<c><openssl><x509certificate><pkcs#7>","0","2","1","2014-04-04 13:23:11","","0","","608639","","2014-04-04 13:23:11","2010-12-22 19:54:51",""
"9224757","How can I extract signature from pkcs7 envelop?","I want to extract signature from pkcs7 envelop.
How can i do it ?
","Use STACK_OF(PKCS7_SIGNER_INFO) *PKCS7_get_signer_info(PKCS7 *p7) to retrieve the individual SignerInfos contained in your PKCS7.
To get the actual signature from an individual SignerInfo, you will have to access the corresponding pointer manually. PKCS7_SIGNER_INFO is defined as:
typedef struct pkcs7_signer_info_st
{
ASN1_INTEGER            *version;   /* version 1 */
PKCS7_ISSUER_AND_SERIAL     *issuer_and_serial;
X509_ALGOR          *digest_alg;
STACK_OF(X509_ATTRIBUTE)    *auth_attr; /* [ 0 ] */
X509_ALGOR          *digest_enc_alg;
ASN1_OCTET_STRING       *enc_digest;
STACK_OF(X509_ATTRIBUTE)    *unauth_attr;   /* [ 1 ] */

/* The private key to sign with */
EVP_PKEY            *pkey;
} PKCS7_SIGNER_INFO;

The correct field is (slightly misleading) enc_digest.
","1443","<openssl><pkcs#7>","2","4","1","2012-02-11 06:13:51","9238285","0","","","","","2012-02-10 08:22:01",""
"15095773","CMS digital signature with JavaCard","What I want
To create a detached digital signature in standard format (CMS / CAdES-EPES).
How I create digital signature now
I create hash from document (SHA-256), get hash algorithm ID and give it all into a message, that is sent to smartcard (JavaCard). Detached signature is generated for this message(RSA-512) and sent back. I am able to verify this signature using pure Java (so far no BouncyCastle) using code:
RSAPublicKey pubK = (RSAPublicKey) cert.getPublicKey();
Signature sig = Signature.getInstance(""SHA256withRSA"", ""BC"");
sig.initVerify(pubK);
//load signed file and update sig
...
sig.verify(signedMessage)

Problems
My goal is to get CMS(PKCS#7) signature from already signed data. Hovever, as mentioned here -> How can we Convert PKCS#1 to PKCS #7 if I have the Certificate? - it is not that easy to ""convert"" to CMS beacuse of signed attributes. Well, let's just say, I want to try it anyway (just to have backup solution). First I tried to use BouncyCastle. However, I couldn't find way to do it with already signed data and with no access to primary key (as it is on smartcard a CANNOT be exported). So i tried it with native java libraries like this:
X500Name xName = X500Name.asX500Name(cert.getSubjectX500Principal());
BigInteger serial   = cert.getSerialNumber();
AlgorithmId digestAlgorithmId = new AlgorithmId(AlgorithmId.SHA512_oid);
AlgorithmId signAlgorithmId = new AlgorithmId(AlgorithmId.RSAEncryption_oid);

//SignerInfo
SignerInfo sInfo = new SignerInfo(xName, serial, digestAlgorithmId, signAlgorithmId, signatureBytes);
//Create ContentInfo
ContentInfo cInfo = new ContentInfo(ContentInfo.DATA_OID, new DerValue(DerValue.tag_OctetString, dataToSign));
//create PKCS7 signature
PKCS7 p7 = new PKCS7(new AlgorithmId[] { digestAlgorithmId }, cInfo,
        new java.security.cert.X509Certificate[] { cert },
        new SignerInfo[] { sInfo });
//Write PKCS7 to bYteArray
ByteArrayOutputStream bOut = new DerOutputStream();
p7.encodeSignedData(bOut);
byte[] encodedPKCS7 = bOut.toByteArray();

This approach seems ""not right"" to me to be honest and I was not even able to verify it using PKCS7.verify() method (it returns null, which is unsuccessfull verification and no exceptions are thrown).
So my questions are:

Is there any way to get directly a CMS signature from JavaCard?
Is it possible to create CMS signature from already generated signature only with signers certificate (without acces to private key)?
Do you see any problem with ""conversion"" code above? 
Do you know any tool, that can be used to verify detached signatures? (to be able to check my outcomes)

A was looking for answers for 2 weeks now and I am really desperate. Thanks for ANY kind of information/help.
","
(1) Is there any way to get directly a CMS signature from JavaCard?

As JavaCards are quite versatile if you are the one programming them, that just might be possible. The communication required to retrieve those CMS containers, though, would be quite proprietary, most likely only usable by your code (which can be good or bad for you; for the customer it generally is bad) and by code from people hacking your solution.

(2) Is it possible to create CMS signature from already generated signature only with signers certificate (without acces to private key)?

You can create very primitive CMS signature containers if you already have PKCS#1 signatures, cf. the question How can we Convert PKCS#1 to PKCS #7 if I have the Certificate you refer to.
If you intend to be interoperable with other signature verification software, though, such primitive signatures (which have a huge potential for manipulation) most likely will be rejected.

(3) Do you see any problem with ""conversion"" code above?

Please also supply sample PKCS#1 input signatures and sample CMS results. Furthermore, as @owlstead commented, You should not use Sun inner classes, they may be altered, renamed or even removed without further notice. (I actually would prefer to replace should by shall.)

(4) Do you know any tool, that can be used to verify detached signatures? (to be able to check my outcomes)

OpenSSL contains verification tools. Furthermore there are many web services providing signature verification services. Which of them would be appropriate for you, does very much depend on the PKI and legal environment of your signatures.
","1443","<digital-signature><pkcs#7><javacard>","0","1","1","2013-02-27 11:47:27","15111330","4","","-1","","2017-05-23 11:51:22","2013-02-26 17:46:04",""
"32477436","Decrypt PKCS7 in Ruby on Rails","I try to decrypt PKCS7 data, but always receive error OpenSSL::PKCS7::PKCS7Error - wrong content type on method ""pkcs7.decrypt(key, cer)"".
example:
cer = OpenSSL::X509::Certificate.new(File.read(""path/cert.cer""))
key = OpenSSL::PKey::RSA.new(File.read(""path/private.key""), ""111111"")
crypted_data = File.read('path/pkcs7') # contains xml-file and signature ""-----BEGIN PKCS7----- ... -----END PKCS7-----""
pkcs7 = OpenSSL::PKCS7.new(crypted_data)
decrypted_data = pkcs7.decrypt(key, cer) # error is here

need help! how to get data from the encrypted string?
updated:
on bash I can solve this task by following code: 
openssl smime -verify -noverify -inform PEM -nointern -certfile ""path/cert.cer"" -CAfile ""path/cert.cer"" < path/pkcs7

returns xml file.
","Solution founded!!!
cert_store = OpenSSL::X509::Store.new
my_cert =  OpenSSL::X509::Certificate.new(File.read(""remote.cer""))
signature = OpenSSL::PKCS7.new(File.read('pkcs7-resp.file'))
signature.verify([my_cert], cert_store, nil, OpenSSL::PKCS7::NOVERIFY)
signature.data

","1426","<ruby><openssl><pkcs#7>","1","4","1","2015-09-10 21:38:21","32512030","0","","1150504","","2015-09-09 12:59:30","2015-09-09 10:46:08",""
"21029101","Decrypting CMS Using OpenSSL in Python","I am currently trying to decrypt some CMS encrypted text with Python.  I have been unable to find a library that can use the CMS implementation in OpenSSL (Tried M2Crypto, PyOpenSSL, PyCrypto).  
The messages being sent to me contain data encrypted with the following Java:
public static byte[] cmsEncrypt(byte[] data, Certificate cert) throws NoSuchAlgorithmException, NoSuchProviderException, CMSException, IOException {
    CMSEnvelopedDataGenerator gen = new CMSEnvelopedDataGenerator();
    gen.addKeyTransRecipient((X509Certificate) cert);
    CMSProcessable cmsData = new CMSProcessableByteArray(data);
    CMSEnvelopedData enveloped = gen.generate(cmsData, CMSEnvelopedDataGenerator.AES128_CBC, 128, ""BC"");
    return enveloped.getEncoded();
}

This Java contains some deprecated methods, which I unfortunately have no control over.  Is there a Python OpenSSL module that I can use that will decrypt this CMS encrypted data?  As of right now, I am shelling out and using the bash OpenSSL commands to decrypt, with this Python:
from subprocess import call
decrypt = call(['openssl', 'cms', '-decrypt', '-binary', '-inkey', 'key.pem', '-in', 'message.msg'])

I would prefer to do this entirely in Python without having to use the shell OpenSSL commands.
","","1421","<python><openssl><pkcs#7>","4","","0","2014-01-09 19:13:42","","2","2","","","","2014-01-09 19:13:42",""
"28308401","SignedCms.CheckSignature checks the signature against which certificates?","I have a signed message and I want to know against what certificate is this code checking the signature.
Does the SignedCms always have the signing certificate in it (and it is used to verify the signature) or sometimes the certificate isn't inside the message and it is taken from the verifying machine Certificate Store's?
Basically I'm interested in identifying who is the User that signed that message.
Here is the example of code that makes that verification (from msdn: https://msdn.microsoft.com/en-us/library/aedbc064(v=vs.110).aspx )
// Create a ContentInfo object from the inner content obtained independently from encodedMessage.
ContentInfo contentInfo = new ContentInfo(innerContent);
// Create a new, detached SignedCms message.
SignedCms signedCms = new SignedCms(contentInfo, true);
// encodedMessage is the encoded message received from  the sender.
signedCms.Decode(encodedMessage);
// Verify the signature without validating the certificate.
signedCms.CheckSignature(true); //<-- Here is the verification

Thank you, and sorry for my poor english.
","SignedCms is represented by an ASN.1 structure SignedData defined in RFC 2315
 SignedData ::= SEQUENCE {
     version Version,
     digestAlgorithms DigestAlgorithmIdentifiers,
     contentInfo ContentInfo,
     certificates
        [0] IMPLICIT ExtendedCertificatesAndCertificates
          OPTIONAL,
     crls
       [1] IMPLICIT CertificateRevocationLists OPTIONAL,
     signerInfos SignerInfos }

Property certificates as described by RFC 2315

is a set of PKCS #6 extended certificates and X.509 certificates. It
  is intended that the set be sufficient to contain chains from a
  recognized ""root"" or ""top-level certification authority"" to all of the
  signers in the signerInfos field. There may be more certificates than
  necessary, and there may be certificates sufficient to contain chains
  from two or more independent top-level certification authorities.
  There may also be fewer certificates than necessary, if it is expected
  that those verifying the signatures have an alternate means of
  obtaining necessary certificates (e.g., from a previous set of
  certificates).

But it is optional.
signerInfos is described as

signerInfos is a collection of per-signer information. There may be any number of elements in the collection, including zero.

SignerInfo contains IssuerAndSerialNumber element that describes what certificate was used to sign the content.
More info in RFC 2315
In c# you can get the certificate with this code:
signedCms.SignerInfos[0].Certificate

","1397","<c#><x509certificate2><pkcs#7>","1","1","1","2015-02-04 08:51:10","28317093","0","0","","","","2015-02-03 20:45:12",""
"23986946","Error when verifying a clear signed SMIME message","I've a message like this in file testSmimeMsg.txt:
ABC is our biggest acquisition ever and as you can imagine, customers
and partners alike are eager to hear how we plan to integrate it into
XYZ.  Specifically, how are we going to bring the two traditionally
separate silos of desktop and mobile together?
To help explain our vision for uniting we released a
video describing our architecture and
technology integration plans.  Definitely watch the video to learn more,
and the rest of this blog will give you a summary of our plans and a bit
more color on certain areas.

I use following command to make a clear signed message:
$ openssl smime -sign -in testSmimeMsg.txt -out testSmimeClearTextMessage.txt -signer sender.pem

The sender.pem is generated from a .p12 file and it has CERTIFICATE and RSA PRIVATE KEY contents.
Then I use the following command to verify the signed message I just created.
$ openssl smime -verify -in testSmimeClearTextMessage.txt -noverify -out testSmimeVerifiedClearTextMessage.txt

The result is Verification Successful and content in testSmimeVerifiedClearTextMessage.txt is same as testSmimeMsg.txt. Perfect!
Now Lets say I want to verify the same by the PKCS7_verify() method.
C code
jbyteArray aw_SMIME_Verify_Signature_And_Get_Message(JNIEnv *env, jobject obj, jbyteArray signedMsg, jstring senderCertPath, jstring rootCertPath)
{
    //SenderCertPath and rootCertPath are currently NULL. For now, I just want openssl
    //to extract the signer cert from message and verify message. Root certificate and chain
    //of trust verification etc is ignored for now.

    jbyteArray cmsContent = NULL;


    PKCS7 *pkcs7 = NULL;

    OpenSSL_add_all_algorithms();
    ERR_load_crypto_strings();
    ERR_load_X509_strings();
    ERR_load_PKCS7_strings();
    ERR_load_BIO_strings();

    pkcs7 = getP7FromEncryptedMessage_SMIME(env, signedMsg); //this works. pkcs7 is non null.

    if (pkcs7 == NULL) {
        LOGE (""aw_SMIME_Verify_Signature_And_Get_Message: Error reading p7 from message. Returning"");
        goto exit_free;
    }
    cmsContent = verify_Signature_And_Get_Message(env, pkcs7, senderCertPath, rootCertPath);

    exit_free:
    if (pkcs7) {
        PKCS7_free(pkcs7);
        pkcs7 = NULL;
    }

    return cmsContent;
}

------------------------------
PKCS7 *getP7FromEncryptedMessage_SMIME(JNIEnv *env, jbyteArray encryptedSMIMEMessage) {

    BIO *in = NULL;
    int encryptedMessageLength = 0;
    const unsigned char *encryptedBuf = NULL;
    PKCS7 *p7 = NULL;

    //obtain the p7 structure from the encrypted message
    encryptedMessageLength = env->GetArrayLength(encryptedSMIMEMessage);                    //get size of encrypted message byte[]
    encryptedBuf = (const unsigned char *)env->GetByteArrayElements(encryptedSMIMEMessage, 0);                                              //create a buffer of that size
    in = BIO_new(BIO_s_mem());
    BIO_set_mem_eof_return(in, 0);
    BIO_write(in, encryptedBuf, encryptedMessageLength);                                    //create a BIO with the char* of encrypted message

    p7 = SMIME_read_PKCS7(in, NULL);                                            //get the p7 structure

    if(in) {
        BIO_free(in);
    }
    if (encryptedBuf) {
        env->ReleaseByteArrayElements(encryptedSMIMEMessage, (jbyte *)encryptedBuf, 0);
    }

    return p7;

}
----------------------
jbyteArray verify_Signature_And_Get_Message(JNIEnv *env, PKCS7 *pkcs7, jstring senderCertPath, jstring rootCertPath)
{
    X509* rootCert = NULL;
    X509* senderCert = NULL;
    STACK_OF(X509) *st1 = NULL;
    X509_STORE* m_store = NULL;
    BIO *out = BIO_new(BIO_s_mem());
    BIO_set_fp(out, stdout, BIO_NOCLOSE);
    BUF_MEM *bptr = NULL;
    jbyteArray cmsContent = NULL;
    int cmsLen = 0;

    if(rootCertPath != NULL) {
        rootCert = getCertificateFromPath(env, rootCertPath);
        m_store = X509_STORE_new();
        //TODO: check what to be in cert store
        X509_STORE_add_cert(m_store,rootCert);
    }

    if(senderCertPath != NULL) {
        senderCert = getCertificateFromPath(env, senderCertPath);
        st1 = sk_X509_new_null();
        sk_X509_push(st1, senderCert);
    }
    //st1 and m_store are NULL as they are not used for now.
    int verifyResult = PKCS7_verify( pkcs7, st1, m_store, NULL, out, PKCS7_NOVERIFY);
    if(verifyResult != 1) {   //FAILS HERE!!!!
        LOGE (""verify_Signature_And_Get_Message: Error verifying signer certificate. Returning"");
        LOGE(ERR_error_string(ERR_get_error(), NULL));
        goto exit_free;
    }
    BIO_get_mem_ptr(out, &bptr);

    cmsLen = bptr->length;
    cmsContent = env->NewByteArray(cmsLen);
    env->SetByteArrayRegion(cmsContent, 0, cmsLen, (jbyte *)bptr->data);

    exit_free:
    if (serverCert) {
        X509_free(serverCert);
        serverCert = NULL;
    }
    if (rootCert) {
        X509_free(rootCert);
        rootCert = NULL;
    }
    if (m_store) {
        X509_STORE_free(m_store);
        m_store = NULL;
    }
    if (st1) {
        sk_X509_pop_free(st1, X509_free);
    }
    if (out) {
        BIO_free_all(out);
        out = NULL;
    }

    return cmsContent;
}

When run, I get error:
 verify_Signature_And_Get_Message: Error verifying signer certificate. Returning
 error:2107507A:PKCS7 routines:PKCS7_verify:no content

Can someone please tell me whats wrong?
Please note that if I pass a signed-data message, with the code unchanged, it works. I get the verification successful and plaintext data back but when I'm sending a clear signed data, it fails.
Please help.
","I fixed the issue. The problem was that I wasn't using the content parameter of PKCS7_read_SMIME() API. If the message is clear signed, the message content is returned in this parameter which is then needed to be passed to PKCS7_verify() method along with NODETACHED flag. See opeenssl doc for both APIs for more details.
","1381","<openssl><pkcs#7><smime>","0","0","1","2014-06-06 17:29:38","24087536","0","","3645686","","2014-06-02 15:58:53","2014-06-02 03:27:53",""
"48319392","Detached signature in CMSSignedData verifies using Bouncy Castle but NOT using java.security.Signature","I have been traversing the web for some days now to find the cause of this but without success. 
I am doing this:

generating fresh certificates (signer cert and his parent)
creating signature using CMSSignedDataGenerator (bouncycastle 1.45)
verifying it by java.security.Signature -> FAILS
verifying it by BC classes -> SUCCESS

Facts I found out:

Creation and verification of signature uses same algorithm - SHA1withRSA.
No exception is thrown anywhere in the process.

Questions:

Any idea what I am doing wrong?

Ideas to consider:
I think that the cause lies in the generation of the signature but I suppose I am doing it according to docs. Or - the validation process may expect some kind of different structure like PKCS1 while the generator provides PKCS7. Nothing actually tells me what to search next.
Here is a piece of code which should illustrate the problem and output (after providing your own certificates and a private key):
import org.bouncycastle.cms.*;
import org.bouncycastle.jce.provider.BouncyCastleProvider;

import java.security.PrivateKey;
import java.security.Security;
import java.security.Signature;
import java.security.cert.CertStore;
import java.security.cert.CollectionCertStoreParameters;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

import static org.bouncycastle.cms.CMSSignedGenerator.DIGEST_SHA1;
import static org.bouncycastle.jce.provider.BouncyCastleProvider.PROVIDER_NAME;


public final class VerifyCMSSignedData {

    private static final byte[] DATA_TO_BE_SIGNED = ""data"".getBytes();
    private static final String SHA_1_WITH_RSA = ""SHA1WithRSA"";
    private static final boolean DATA_NOT_ATTACHED = false;
    private static final String COLLECTION_STORE_TYPE = ""Collection"";

    private static X509Certificate signer;
    private static PrivateKey signerPrivateKey;
    private static X509Certificate parent;

    private VerifyCMSSignedData() {
    }

    public static void main(String[] args) throws Exception {
        Security.addProvider(new BouncyCastleProvider());

        setUpCertificates();

        shouldVerifySignature();
    }

    public static void shouldVerifySignature() throws Exception {
        CMSSignedData signature = createSignature();

        shouldVerifyBySignature(signature.getEncoded());

        shouldVerifyByBC(signature.getEncoded());
    }

    private static void shouldVerifyByBC(byte[] signatureBytes) {
        boolean verified = false;

        try {
            CMSSignedData cms = new CMSSignedData(new CMSProcessableByteArray(DATA_TO_BE_SIGNED), signatureBytes);
            CertStore certStore = cms.getCertificatesAndCRLs(COLLECTION_STORE_TYPE, PROVIDER_NAME);
            SignerInformationStore signers = cms.getSignerInfos();
            Collection c = signers.getSigners();
            for (Object aC : c) {
                SignerInformation signer = (SignerInformation) aC;
                Collection certCollection = certStore.getCertificates(signer.getSID());
                Iterator certIt = certCollection.iterator();
                X509Certificate cert = (X509Certificate) certIt.next();
                verified = signer.verify(cert, PROVIDER_NAME);
            }
        } catch (Exception e) {
            e.printStackTrace();
            verified = false;
        }

        System.out.println(verified ? ""VERIFIED BY BC"" : ""! Not verified through BC !"");
    }

    private static void shouldVerifyBySignature(byte[] signatureBytes) throws Exception {
        Signature signatureVerifier = Signature.getInstance(SHA_1_WITH_RSA, PROVIDER_NAME);
        signatureVerifier.initVerify(signer.getPublicKey());
        signatureVerifier.update(DATA_TO_BE_SIGNED);
        boolean verified = signatureVerifier.verify(signatureBytes);

        System.out.println(verified ? ""VERIFIED BY SIGNATURE CLASS"" : ""! Not verified by Signature class !"");
    }

    private static CMSSignedData createSignature() throws Exception {
        CMSSignedDataGenerator gen = new CMSSignedDataGenerator();

        gen.addSigner(signerPrivateKey, signer, DIGEST_SHA1);

        List<X509Certificate> allCerts = new ArrayList<>();
        if (parent != null) {
            allCerts.add(parent);
        }
        allCerts.add(signer);

        CertStore store = CertStore.getInstance(
                COLLECTION_STORE_TYPE,
                new CollectionCertStoreParameters(allCerts),
                PROVIDER_NAME
        );

        gen.addCertificatesAndCRLs(store);

        return gen.generate(new CMSProcessableByteArray(DATA_TO_BE_SIGNED), DATA_NOT_ATTACHED, PROVIDER_NAME);
    }

    private static void setUpCertificates() throws Exception {
        // TODO setup your certificates here
    }
}

Output:

! Not verified by Signature class !
VERIFIED BY BC
Process finished with exit code 0

","You are verifying different things. The verification can never be succesful because Java SHA1withRSA verification requires a RSA PKCS#1_v15 signature, but you have generated a CMS signature 
CMS encapsulates digital signatures or encrypted messages and some additional elements such as certificates. Your CMS message includes a PCKS#1 signature, but if if you want to verify it directly using the Java Api, note that the signed hash is not computed on the data to be signed. It contains some additional elements such as the reference to signing certificate in ASN.1 syntax, so you would need to compute the hash in the same way
","1376","<java><digital-signature><bouncycastle><verify><pkcs#7>","2","3","2","2018-02-06 01:56:49","48320033","0","1","","","","2018-01-18 10:44:41",""
"48319392","Detached signature in CMSSignedData verifies using Bouncy Castle but NOT using java.security.Signature","I have been traversing the web for some days now to find the cause of this but without success. 
I am doing this:

generating fresh certificates (signer cert and his parent)
creating signature using CMSSignedDataGenerator (bouncycastle 1.45)
verifying it by java.security.Signature -> FAILS
verifying it by BC classes -> SUCCESS

Facts I found out:

Creation and verification of signature uses same algorithm - SHA1withRSA.
No exception is thrown anywhere in the process.

Questions:

Any idea what I am doing wrong?

Ideas to consider:
I think that the cause lies in the generation of the signature but I suppose I am doing it according to docs. Or - the validation process may expect some kind of different structure like PKCS1 while the generator provides PKCS7. Nothing actually tells me what to search next.
Here is a piece of code which should illustrate the problem and output (after providing your own certificates and a private key):
import org.bouncycastle.cms.*;
import org.bouncycastle.jce.provider.BouncyCastleProvider;

import java.security.PrivateKey;
import java.security.Security;
import java.security.Signature;
import java.security.cert.CertStore;
import java.security.cert.CollectionCertStoreParameters;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

import static org.bouncycastle.cms.CMSSignedGenerator.DIGEST_SHA1;
import static org.bouncycastle.jce.provider.BouncyCastleProvider.PROVIDER_NAME;


public final class VerifyCMSSignedData {

    private static final byte[] DATA_TO_BE_SIGNED = ""data"".getBytes();
    private static final String SHA_1_WITH_RSA = ""SHA1WithRSA"";
    private static final boolean DATA_NOT_ATTACHED = false;
    private static final String COLLECTION_STORE_TYPE = ""Collection"";

    private static X509Certificate signer;
    private static PrivateKey signerPrivateKey;
    private static X509Certificate parent;

    private VerifyCMSSignedData() {
    }

    public static void main(String[] args) throws Exception {
        Security.addProvider(new BouncyCastleProvider());

        setUpCertificates();

        shouldVerifySignature();
    }

    public static void shouldVerifySignature() throws Exception {
        CMSSignedData signature = createSignature();

        shouldVerifyBySignature(signature.getEncoded());

        shouldVerifyByBC(signature.getEncoded());
    }

    private static void shouldVerifyByBC(byte[] signatureBytes) {
        boolean verified = false;

        try {
            CMSSignedData cms = new CMSSignedData(new CMSProcessableByteArray(DATA_TO_BE_SIGNED), signatureBytes);
            CertStore certStore = cms.getCertificatesAndCRLs(COLLECTION_STORE_TYPE, PROVIDER_NAME);
            SignerInformationStore signers = cms.getSignerInfos();
            Collection c = signers.getSigners();
            for (Object aC : c) {
                SignerInformation signer = (SignerInformation) aC;
                Collection certCollection = certStore.getCertificates(signer.getSID());
                Iterator certIt = certCollection.iterator();
                X509Certificate cert = (X509Certificate) certIt.next();
                verified = signer.verify(cert, PROVIDER_NAME);
            }
        } catch (Exception e) {
            e.printStackTrace();
            verified = false;
        }

        System.out.println(verified ? ""VERIFIED BY BC"" : ""! Not verified through BC !"");
    }

    private static void shouldVerifyBySignature(byte[] signatureBytes) throws Exception {
        Signature signatureVerifier = Signature.getInstance(SHA_1_WITH_RSA, PROVIDER_NAME);
        signatureVerifier.initVerify(signer.getPublicKey());
        signatureVerifier.update(DATA_TO_BE_SIGNED);
        boolean verified = signatureVerifier.verify(signatureBytes);

        System.out.println(verified ? ""VERIFIED BY SIGNATURE CLASS"" : ""! Not verified by Signature class !"");
    }

    private static CMSSignedData createSignature() throws Exception {
        CMSSignedDataGenerator gen = new CMSSignedDataGenerator();

        gen.addSigner(signerPrivateKey, signer, DIGEST_SHA1);

        List<X509Certificate> allCerts = new ArrayList<>();
        if (parent != null) {
            allCerts.add(parent);
        }
        allCerts.add(signer);

        CertStore store = CertStore.getInstance(
                COLLECTION_STORE_TYPE,
                new CollectionCertStoreParameters(allCerts),
                PROVIDER_NAME
        );

        gen.addCertificatesAndCRLs(store);

        return gen.generate(new CMSProcessableByteArray(DATA_TO_BE_SIGNED), DATA_NOT_ATTACHED, PROVIDER_NAME);
    }

    private static void setUpCertificates() throws Exception {
        // TODO setup your certificates here
    }
}

Output:

! Not verified by Signature class !
VERIFIED BY BC
Process finished with exit code 0

","You was wrong here:
signatureVerifier.update(DATA_TO_BE_SIGNED);
and here:
boolean verified = signatureVerifier.verify(signatureBytes);
See pedrofb's answer for more details.
Modify your shouldVerifyBySignature method to work:
private static void shouldVerifyBySignature(byte[] signatureBytes) throws Exception {
    boolean verified = false;
    CMSSignedData cms = new CMSSignedData(new CMSProcessableByteArray(DATA_TO_BE_SIGNED), signatureBytes);
    CertStore certStore = cms.getCertificatesAndCRLs(COLLECTION_STORE_TYPE, PROVIDER_NAME);
    SignerInformationStore signers = cms.getSignerInfos();
    Collection c = signers.getSigners();
    for (Object aC : c) {
        SignerInformation si = (SignerInformation) aC;
        Signature signatureVerifier = Signature.getInstance(SHA_1_WITH_RSA, PROVIDER_NAME);
        signatureVerifier.initVerify(signer.getPublicKey());


        signatureVerifier.update(si.getEncodedSignedAttributes());
        verified = signatureVerifier.verify(si.getSignature());
    }

    System.out.println(verified ? ""VERIFIED BY SIGNATURE CLASS"" : ""! Not verified by Signature class !"");
}

I hope this will help you!
","1376","<java><digital-signature><bouncycastle><verify><pkcs#7>","2","2","2","2018-02-06 01:56:49","48320033","0","1","","","","2018-01-18 10:44:41",""
"7476303","conversion from opaque pkcs7 p7m to detached smime","Hi I couldn't find a way to convert an opaque pkcs#7(p7m) in a clear text deatached smime so that the signed content could be processed by regular mime libraries.
I'd like to take p7m file and convert it to an smime message keping a valid signature.
The steps should be:

extract signed content from p7m
extract cms structure from p7m
pack everything in a new smime structure with detached signature

Is this operation possible ?
I've searched through openssl manuals but I couldn't find a way to do it.
","I was able to convert opaque-signed messages to a detached ones with the following code:
#include <openssl/evp.h>
#include <openssl/bio.h>
#include <openssl/pkcs7.h>

int main(int argc, char **argv)
{
    BIO *data = NULL, *bin = NULL, *bout = NULL;
    PKCS7 *p7, *p7b;

    OpenSSL_add_all_algorithms();

    bin = BIO_new_file(""opaque.p7m"", ""rb"");
    p7 = SMIME_read_PKCS7(bin, &data);
    p7b = PKCS7_dup(p7);

    data = PKCS7_dataInit(p7, NULL);

    PKCS7_set_detached(p7b, 1);

    bout = BIO_new_file(""detached.p7m"", ""wb"");
    SMIME_write_PKCS7(bout, p7b, data, PKCS7_BINARY | SMIME_DETACHED);
}

To test the program I generate the opaque.p7m with the following command:
$ openssl smime -sign -in foo.txt -signer my.crt -inkey my.key -nodetach -out opaque.p7m

To be terse, the code above has no checks. To accept different input formats, you can change SMIME_read_PKCS7 to PEM_read_bio_PKCS7 (PEM) or d2i_PKCS7_bio (DER).
","1373","<openssl><digital-signature><pkcs#7><smime>","6","1","1","2013-12-04 15:39:24","20379579","0","2","445517","","2013-02-09 15:23:53","2011-09-19 19:34:14",""
"2334536","How do I create an encrypted PayPal button dynamically in Google App Engine?","So far I have found an example for Django that uses M2Crypto, but because M2Crypto is based on a C library, it cannot be run on GAE. Does anyone have a working code for creating an encrypted PayPal button dynamically in Google App Engine?
In a nutshell, I need to translate the following Ruby code into Python. It's taken from PayPal's Website Payments Standard toolkit for Ruby.
def self.encrypt_data(paypal_cert, my_business_cert, my_business_key,
                      my_business_key_password, myparams  )     
  paypal_cert      = OpenSSL::X509::Certificate.new(paypal_cert)     
  my_business_cert = OpenSSL::X509::Certificate.new(my_business_cert)      
  my_business_key  = OpenSSL::PKey::RSA.new(
    my_business_key,
    my_business_key_password)   
  info = """"
  myparams.each_pair {|key,value| info << ""#{key}=#{value}\n""}    
  signedInfo       = OpenSSL::PKCS7::sign(
    my_business_cert,
    my_business_key,
    info,
    [],
    OpenSSL::PKCS7::BINARY)
  OpenSSL::PKCS7::encrypt(
    [paypal_cert],
    signedInfo.to_der,
    OpenSSL::Cipher::Cipher::new(""DES3""),
    OpenSSL::PKCS7::BINARY)           
end

","Have a look to Keyczar library, it should work on Google App Engine allowing you to sign using RSA and encrypt with DES3 .
Check the documentation here.
","1347","<google-app-engine><encryption><paypal><pkcs#7>","3","0","1","2011-04-21 15:42:53","","0","2","","","","2010-02-25 14:16:37",""
"5997326","Extract pkcs7 (byte[]) from a pdf file using IText or ITextSharp or BouncyCastle","How can I extract, from a pdf signed file, the PKCS7 package encoded, using either IText or BouncyCastle, so i can either store or validate in another framework?
In fact, how can I get, at all, a PKCS7 encoded package from a pdf signed file?
","A friend of mine helped me on getting the answer.
public static byte[] ExtractPKCS7From(string path)
{
    AcroFields acroFields = new PdfReader(path).AcroFields;
    List<string> names = acroFields.GetSignatureNames();

    foreach(var name in names)
    {
        PdfDictionary dict = acroFields.GetSignatureDictionary(name);
        PdfString contents =
            (PdfString)PdfReader.GetPdfObject(dict.Get(PdfName.CONTENTS));

        return contents.GetOriginalBytes();
    }
    return null;
}

Pretty straight forward, isn't it?
","1344","<c#><java><itextsharp><itext><pkcs#7>","2","1","2","2015-12-21 21:52:26","6022912","0","","141345","","2011-05-16 13:28:38","2011-05-13 20:20:53",""
"5997326","Extract pkcs7 (byte[]) from a pdf file using IText or ITextSharp or BouncyCastle","How can I extract, from a pdf signed file, the PKCS7 package encoded, using either IText or BouncyCastle, so i can either store or validate in another framework?
In fact, how can I get, at all, a PKCS7 encoded package from a pdf signed file?
","Code for Java, do whatever you want with the pkcs7 object! :)
PdfReader r = new PdfReader(fOs);
AcroFields af = r.getAcroFields();
ArrayList<String> listNames = af.getSignatureNames();
for(String x : listNames){
    PdfPKCS7 pkcs7 = af.verifySignature(signature);
}

Good luck!
","1344","<c#><java><itextsharp><itext><pkcs#7>","2","0","2","2015-12-21 21:52:26","6022912","0","","141345","","2011-05-16 13:28:38","2011-05-13 20:20:53",""
"13660901","pkcs7 with timestamp","I am looking at it for a day now, and I am still baffled. 
I want to add digital signature to a PDF with timestamp from a TSA (TimeStamp Authority). 
I am okay with sending the request to a TSA and receiving a binary response, but how do I append that timestamp to my pkcs7 digital signature. 
I am using PHP with TCPDF and the openssl_pkcs7_sign() function. 
Do I need to to add the timestamp as an extra certificate?
Thanks!
","With PHP is not possible, afraid.
I would do it in a C++ server side pkcs#7 builder.
","1322","<php><tcpdf><pkcs#7><trusted-timestamp>","4","-2","2","2017-10-26 17:15:38","","3","2","142616","","2012-12-01 19:40:22","2012-12-01 15:35:12",""
"13660901","pkcs7 with timestamp","I am looking at it for a day now, and I am still baffled. 
I want to add digital signature to a PDF with timestamp from a TSA (TimeStamp Authority). 
I am okay with sending the request to a TSA and receiving a binary response, but how do I append that timestamp to my pkcs7 digital signature. 
I am using PHP with TCPDF and the openssl_pkcs7_sign() function. 
Do I need to to add the timestamp as an extra certificate?
Thanks!
","I have created a simple library project called phpcmstimestamper precisely for this purpose, and you can use it like this:
<?php
$originalCmsAsPem = ""-----BEGIN CMS-----
MIIFiAYJKoZIhvcNAQcCoIIFeTCCBXUCAQExDTALBglghkgBZQMEAgEwHQYJKoZI
...
1lUaWopfF7uZf5LXZt2Ru5UPr+51ULJRcEeUTA==
-----END CMS-----"";
$updatedCms = CmsTimestamper::addTimestampToCms($originalCmsAsPem, ""http://tsa.starfieldtech.com"");

You can get more details and a fully working example at https://github.com/hablutzel1/phpcmstimestamper.
","1322","<php><tcpdf><pkcs#7><trusted-timestamp>","4","0","2","2017-10-26 17:15:38","","3","2","142616","","2012-12-01 19:40:22","2012-12-01 15:35:12",""
"21849460","Sign file using .NET OpenSSL wrapper","I was trying to copy this line
openssl smime -sign -signer <chain_crt_file> -in <infile> -out <outfile> -inkey <privatekey> -outform der

into C# However it didn't turn out to be as easy as I thought. So far I came only this point
OpenSSL.Core.BIO crtBio = OpenSSL.Core.BIO.File(""C:/asl/chain.crt"", ""r"");
OpenSSL.Core.BIO keyBio = OpenSSL.Core.BIO.File(""C:/asl/keydec.txt"", ""r"");
OpenSSL.X509.X509Chain crt = new OpenSSL.X509.X509Chain(crtBio);
OpenSSL.Crypto.RSA key = OpenSSL.Crypto.RSA.FromPrivateKey(keyBio);

String str = ""test"";
byte[] bytes = new byte[str.Length * sizeof(char)];
System.Buffer.BlockCopy(str.ToCharArray(), 0, bytes, 0, bytes.Length);

Where (hopefully) I'm importing chain certificate and decoded private key. 
Now the thing is how to sign a file and export is as DER. 
OpenSSL.NET wrapper lacks documentation and examples I found on the internet are 'how to encrypt and decrypt messages using public/private key' which is not a case  here.
To get started I tried to sign this ""test"" string (as file in/out should be pretty straightfoward) but I have no clue where to start.
The thing is that I need to sign this string thus I will need both key and certificates chain.
Thanks a lot for your help.
","
To get started I tried to sign this ""test"" string (as file in/out should be pretty straightfoward) but I have no clue where to start.

The OpenSSL source is probably a good place to start. OpenSSL provides the source for smime in <openssl dir>/apps/smime.c.
OpenSSL's smime utility just calls PKCS7_sign with the appropriate parameters. From around line 688:
else if (operation & SMIME_SIGNERS)
    {
    int i;
    /* If detached data content we only enable streaming if
     * S/MIME output format.
     */
    if (operation == SMIME_SIGN)
        {
        if (flags & PKCS7_DETACHED)
            {
            if (outformat == FORMAT_SMIME)
                flags |= PKCS7_STREAM;
            }
            else if (indef)
                flags |= PKCS7_STREAM;

           flags |= PKCS7_PARTIAL;
           p7 = PKCS7_sign(NULL, NULL, other, in, flags);
           if (!p7)
               goto end;
        }
        ...

With knowledge of PKCS7_sign, you can visit OpenSSL's docs at PKCS7_sign(3). Or, you can hunt for an example.
I don't know about the wrapper you are using.
","1300","<c#><.net><openssl><pkcs#7><x509>","2","0","1","2014-02-18 16:20:38","","2","","1597707","","2014-02-18 09:35:24","2014-02-18 09:34:00",""
"23425030","Message-digesting process in PKCS#7 (signature in PDF)","The problem occurs in the verification of the signature in PDF file. It is said in the standard that:

The result of the message digest calculation process depends on whether the signedAttrs field is present. When the field is absent, the result is just the message digest of the content as described above. When the field is present, however, the result is the message digest of the complete DER encoding of the SignedAttrs value contained in the signedAttrs field.

I parsed signature and got signedAttrs:
[0](4 elem)
   SEQUENCE(2 elem)
      OBJECT IDENTIFIER1.2.840.113549.1.9.3            // ContentType
      SET(1 elem)
        OBJECT IDENTIFIER1.2.840.113549.1.7.1
   SEQUENCE(2 elem)
      OBJECT IDENTIFIER1.2.840.113549.1.9.5            // SigningTime
      SET(1 elem)
        UTCTime2014-04-13 02:58:41 UTC
   SEQUENCE(2 elem)
      OBJECT IDENTIFIER1.2.840.113549.1.9.4            // MessageDigest
      SET(1 elem)
        OCTET STRING(20 byte) 194E0BA9C4B9A53D5E9E5B7B94D7DB42BEA4C28F
   SEQUENCE(2 elem)
      OBJECT IDENTIFIER1.2.840.113549.1.9.15
      SET(1 elem)
        SEQUENCE(8 elem)
          SEQUENCE(1 elem)
            OBJECT IDENTIFIER2.16.840.1.101.3.4.1.42
          SEQUENCE(1 elem)
            OBJECT IDENTIFIER2.16.840.1.101.3.4.1.22
          SEQUENCE(1 elem)
            OBJECT IDENTIFIER2.16.840.1.101.3.4.1.2
          SEQUENCE(1 elem)
            OBJECT IDENTIFIER1.2.840.113549.3.7
          SEQUENCE(2 elem)
            OBJECT IDENTIFIER1.2.840.113549.3.2
            INTEGER128
          SEQUENCE(2 elem)
            OBJECT IDENTIFIER1.2.840.113549.3.2
            INTEGER64
          SEQUENCE(1 elem)
            OBJECT IDENTIFIER1.3.14.3.2.7
          SEQUENCE(2 elem)
            OBJECT IDENTIFIER1.2.840.113549.3.2
            INTEGER40

and DER encoding: 

A081D8301806092A864886F70D010903310B06092A864886F70D010701301C06092A864886F70D010905310F170D3134303431333032353834315A302306092A864886F70D01090431160414194E0BA9C4B9A53D5E9E5B7B94D7DB42BEA4C28F307906092A864886F70D01090F316C306A300B060960864801650304012A300B0609608648016503040116300B0609608648016503040102300A06082A864886F70D0307300E06082A864886F70D030202020080300D06082A864886F70D0302020140300706052B0E030207300D06082A864886F70D0302020128

I calculated its digest and compared to the result of decryption of encrypted digest. But it failed.
I should calculate digest on entire signedAttrs field or on some Attributes or on anything else?
Edit: 
This is PDF file I want to verify
","
I calculated its digest and compared to the result of decryption of encrypted digest. But it failed.
I should calculate digest on entire signedAttrs field or on some Attributes or on anything else?

Have you considered that 


the message digest of the complete DER encoding of the SignedAttrs value contained in the signedAttrs field


implies that it is not the hash of the SignedAttrs value itself but its complete DER encoding? The difference is that the SignedAttrs value is implicitly 0-tagged:
signedAttrs [0] IMPLICIT SignedAttributes OPTIONAL

while its complete DER encoding is not. The standard even explicitly says this:


A separate encoding
       of the signedAttrs field is performed for message digest calculation.
       The IMPLICIT [0] tag in the signedAttrs is not used for the DER
       encoding, rather an EXPLICIT SET OF tag is used.  That is, the DER
       encoding of the EXPLICIT SET OF tag, rather than of the IMPLICIT [0]
       tag, MUST be included in the message digest calculation along with
       the length and content octets of the SignedAttributes value.
(cf. section 5.4 of both RFC 3852 and RFC 5652)


Thus, you have to replace the leading 0xA0 in your

A081D8301806092A864886F70D010903310B06092A864886F70D010701301C06092A864886F70...

accordingly before calculating the digest.
Have you furthermore considered that result of decryption of encrypted digest (I hope you are talking about old-fashioned RSA signing, otherwise decryption is not helpful) is not the naked digest but instead the digest wrapped in a DigestInfo structure?
DigestInfo ::= SEQUENCE {
  digestAlgorithm DigestAlgorithmIdentifier,
  digest Digest }

ADDITION
Even after these clarifications there were some problems, cf. the comment

I calculated digest on the complete DER encoding but it was different from digest after decrypted

Thus, here a bit of Java code using Bouncy Castle (maybe not used optimally, I'm more at home with a propriety crypto library) to calculate the hash of the signed attributes and extract the hash from the RSA signature:
    // The CMS container
    CMSSignedData cms = new CMSSignedData(bytes);

    // Calculating the digest of the signed attributes
    SignerInformation signerInformation = (SignerInformation) (cms.getSignerInfos().getSigners().iterator().next());
    byte[] derSignedAttributes = signerInformation.getEncodedSignedAttributes();
    MessageDigest sha1 = MessageDigest.getInstance(""SHA-1"");
    byte[] derSignedAttributesHash = sha1.digest(derSignedAttributes);

    // Retrieving the public key from the (single) certificate in the container
    X509CertificateHolder cert = (X509CertificateHolder) cms.getCertificates().getMatches(new Selector() {
        public boolean match(Object arg0) { return true; }
        public Object clone()             { return this; }
    }).iterator().next();
    X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(cert.getSubjectPublicKeyInfo().getEncoded());
    KeyFactory keyFactory = KeyFactory.getInstance(publicKeySpec.getFormat());
    Key key = keyFactory.generatePublic(publicKeySpec);

    // Decrypting the DigestInfo from the RSA signature
    Cipher asymmetricCipher = Cipher.getInstance(""RSA"", ""BC"");
    asymmetricCipher.init(Cipher.DECRYPT_MODE, key);
    byte[] digestInfo = asymmetricCipher.doFinal(signerInformation.getSignature());
    DigestInfo digestInfoObject = new DigestInfo(ASN1Sequence.getInstance(digestInfo));

    System.out.println(""Signed Attributes: "" + toHex(derSignedAttributes));
    System.out.println(""Signed Attributes Hash: "" + toHex(derSignedAttributesHash));
    System.out.println(""DigestInfo: "" + toHex(digestInfo));
    System.out.println(""DigestInfo Hash: "" + toHex(digestInfoObject.getDigest()));

Applied to the signature in the provided PDF file signed_1047_ctsv.pdf the output is:
Signed Attributes: 31 81 D8 30 18 06 09 2A 86 48 86 F7 0D 01 09 03 31 0B 06 09 2A 86 48 86 F7 0D 01 07 01 30 1C 06 09 2A 86 48 86 F7 0D 01 09 05 31 0F 17 0D 31 34 30 34 31 33 30 32 35 38 34 31 5A 30 23 06 09 2A 86 48 86 F7 0D 01 09 04 31 16 04 14 19 4E 0B A9 C4 B9 A5 3D 5E 9E 5B 7B 94 D7 DB 42 BE A4 C2 8F 30 79 06 09 2A 86 48 86 F7 0D 01 09 0F 31 6C 30 6A 30 0B 06 09 60 86 48 01 65 03 04 01 2A 30 0B 06 09 60 86 48 01 65 03 04 01 16 30 0B 06 09 60 86 48 01 65 03 04 01 02 30 0A 06 08 2A 86 48 86 F7 0D 03 07 30 0E 06 08 2A 86 48 86 F7 0D 03 02 02 02 00 80 30 0D 06 08 2A 86 48 86 F7 0D 03 02 02 01 40 30 07 06 05 2B 0E 03 02 07 30 0D 06 08 2A 86 48 86 F7 0D 03 02 02 01 28 
Signed Attributes Hash: 7A 2D D8 92 B0 F4 AC 5A 2C 93 03 6B 06 94 74 62 71 D0 06 17 
DigestInfo: 30 21 30 09 06 05 2B 0E 03 02 1A 05 00 04 14 7A 2D D8 92 B0 F4 AC 5A 2C 93 03 6B 06 94 74 62 71 D0 06 17 
DigestInfo Hash: 7A 2D D8 92 B0 F4 AC 5A 2C 93 03 6B 06 94 74 62 71 D0 06 17 

As you see, the values Signed Attributes Hash and DigestInfo Hash are the same.
","1282","<pdf><message><signature><digest><pkcs#7>","2","5","1","2014-05-05 13:40:47","","0","3","3456529","","2014-05-03 08:12:53","2014-05-02 09:37:45",""
"15618132","how to create PKCS7 signedData structure with openssl or any other library with signing on smart card?","i need to create PKCS7 signedData structure with signing performed on smart card. It is almost what openssl function PKCS7_sign does, except the signing. Maybe somebody can advice something for this question, i.e. how to do this with openssl or any other c/c++ crossplatform library.
As for openssl, it seems flags PKCS7_PARTIAL or PKCS7_STREAM of PKCS7_sign function can be usefull. If i use any of this flags i can get almost full PKCS7 structure. In this case the structure is full except that it does not contain ""data"" and ""sign"". So i need only add these elements. But i did not found the way how to do this. Does anybody know?
","You generally do not want (or are technically blocked) from extracting the private key from a smartcard. As this is sort of the very point of a smartcard - a tamper proof bit of crypto memory and connected CPU that will never divulge your private key.
So instead you need to ask the chipcard nicely to do the signing for you.
OpenSSL can do this - but needs to know how to talk to the chipcard. That is generally done with an 'engine'. Most commonly a pkcs#11 of #15 is used for this - in conjunction with the vendors chipcard (reader) driver. 
You then typically need to get the slot and key identifiers:
# Extracting slot, auth ids and key id's for later use/reference
#
set `pkcs11-tool --module /usr/lib/opensc-pkcs11.so --list-slots | grep Slot | grep SCM`
SLOT=$2
set `pkcs15-tool --list-keys | grep ID`
AID=$4
KID=$7

After which you can do 'things' on the card:
/usr/bin/openssl << EOM
engine dynamic -pre SO_PATH:/Library/OpenSC/lib/engines/engine_pkcs11.so  -pre ID:pkcs11 -pre LIST_ADD:1 -pre LOAD -pre MODULE_PATH:opensc-pkcs11.so
XXX -engine pkcs11 -b-key slot_$SLOT-id_$KID -keyform engine  ....
EOM

One such thing can be signing a pkcs7. From code - pretty much do the same thing. I usually use the app/util convenience stuf from openssl it's apps directory to make live a bit easier.
","1281","<c++><openssl><smartcard><pkcs#7>","4","3","1","2013-05-30 08:59:45","","5","3","","","","2013-03-25 15:01:20",""
"18649453","Implement PKCS #7 Padding Scheme for AES in Python","I've written a small command line utility to encrypt single files with AES, using Python 3. As I'm sure we all know, AES works on 16-byte blocks, so if I want to encrypt a file that isn't exactly a multiple of 16, then I'll have to pad the file to make it a multiple of 16. PKCS #7 padding scheme says that I should pad the last chunk with N bytes all of value N. This is how I do that in my encryption function.
for chunk in getChunks(plainFile, chunkSizeBytes):
    padLength = ((AES.block_size - len(chunk)) % AES.block_size)
    # We have to have padding!
    if padLength == 0:
        padLength = 16
    pad = chr(padLength) * padLength
    chunk += pad.encode('utf-8')

    # Write the encrypted chunk to an output file.
    cipherFile.write(en.encrypt(chunk))

However, I'm unsure about how I should read this data from that last chunk of a decrypted file. Is there a way to read in files in reverse order? What's the correct way to do this? 
","
I should pad the last chunk with N bytes all of value N.

In this sentence, the first N is equal to the second N, which means the value of the byte determines how much characters you need to remove for decoding.
For example, if you only have 9 characters in your last chunk, pad with 7 characters of value 7 (7 turns out to be the BEL character, but that doesn't matter).
","1275","<python-3.x><aes><padding><pkcs#7>","2","1","1","2014-05-04 23:42:39","","0","","1419891","","2014-05-04 23:42:39","2013-09-06 03:35:05",""
"37930528","How can I check signature of a SignedCms envelope?","I don't really understand how to work with PKCS#7 messages.
I sign some byte array with a X509Certificate2 I have and get also a byte array.
byte[] data = new byte[5] { 110, 111, 112, 113, 114 }, signedData;

X509Certificate2 cert = new X509Certificate2(certPath, password);

ContentInfo content = new ContentInfo(data);
SignedCms envelope = new SignedCms(content);
CmsSigner cmsSigner = new CmsSigner(cert);
envelope.ComputeSignature(cmsSigner);
signedData = envelope.Encode();

The signedData is transmitted to some remote recipient and he gets the SignedCms envelope.
SignedCms envelope = new SignedCms();
envelope.Decode(signedData);

How can he decode the envelope? He doesn't pass my public key as a parameter. There's my public key in the envelope, in SignerInfo property, but is there any reason for that, cause anyone can replace it with the whole signature?
He can the recipient make sure, using my public key that he has, that the actual sender of the envelope is me?
There's method envelope.CheckSignature(new X509Certificate2Collection(certificate), true); but I tried to use wrong certificate and there was no exception thrown.
","A PKCS#7 by itself is just a signature, could it be replaced? sure. envelope.CheckSiganture just validates that pkcs#7 has the right format and length, in other words checks if a pkcs#7 is well constructed. 
Broadly putted, you need to implement a PKI (Private Key Infrastructure). Where in one end you construct your pkcs#7 using a public key, and on the other end you must validate that the pkcs#7 you have actually has a valid certificate that you recognize as your own. You must implement an OCSP to validate those certificates and if everything checks out all right you should and must request a timestamp to a third party to vouch for your pkcs#7. Also you will need a vault (database) to keep track of everything: pkcs#7's, data hashes, timestamps, original data, ocsp responses...
But if you are only interested in knowing how to identify a pkcs#7, there are various tools you could use to decode a PKCS#7, this action gives back all the information contained in it. Or you could create your own using c#.
","1274","<c#><digital-signature><x509certificate2><pkcs#7>","0","0","2","2016-07-03 22:42:15","37949866","0","1","4220815","","2016-06-20 19:48:29","2016-06-20 19:40:12",""
"37930528","How can I check signature of a SignedCms envelope?","I don't really understand how to work with PKCS#7 messages.
I sign some byte array with a X509Certificate2 I have and get also a byte array.
byte[] data = new byte[5] { 110, 111, 112, 113, 114 }, signedData;

X509Certificate2 cert = new X509Certificate2(certPath, password);

ContentInfo content = new ContentInfo(data);
SignedCms envelope = new SignedCms(content);
CmsSigner cmsSigner = new CmsSigner(cert);
envelope.ComputeSignature(cmsSigner);
signedData = envelope.Encode();

The signedData is transmitted to some remote recipient and he gets the SignedCms envelope.
SignedCms envelope = new SignedCms();
envelope.Decode(signedData);

How can he decode the envelope? He doesn't pass my public key as a parameter. There's my public key in the envelope, in SignerInfo property, but is there any reason for that, cause anyone can replace it with the whole signature?
He can the recipient make sure, using my public key that he has, that the actual sender of the envelope is me?
There's method envelope.CheckSignature(new X509Certificate2Collection(certificate), true); but I tried to use wrong certificate and there was no exception thrown.
","A PKCS#7 / CMS / S/MIME signed message is a data container which has (in addition to some other metadata):

EncapsulatedContentInfo
  ContentInfoType
  EncapsulatedContent (the message bytes)
Certificates (Optional)
CRLs (Optional)
SignerInfos
  DigestAlgorithm (e.g. SHA-1)
  SignedAttributes (Optional, allows other context information to be signed)
  SignatureAlgorithm (e.g. RSA, DSA, ECDSA)
  SignatureValue (the signature bytes)
  UnsignedAttributes (Optional, allows for after-signing information, like counter-signatures)

(This is a summary of RFC 2630 (Cryptographic Message Syntax) Section 5)
SignedCms.Decode reads the encoded message and populates members. Every direct signatory to the message can be read from the SignedCms::SignerInfos property (counter-signers, or entities which have signed that they witnessed the original signature, can be read from SignerInfo::CounterSignerInfos).
When you call SignedCms.CheckSignature, it checks every SigerInfo and verifies that the signature can be successfully verified (or throws an exception), as well as that every counter-signer signature can be worked out.
What it doesn't know is that any of the signers ""made sense"".  For that check you would need to loop over each SignerInfo and look at (for example) the Certificate property; then perform a suitability check:

Perhaps it is a pre-registered public key
Perhaps it chains up to a well-known root or intermediate CA
Perhaps it has some sort of Extension which shows it to be suitable

This part SignedCms cannot realistically do for you, since there's no default notion of ""suitable"" for messages, unlike the hostname verification of TLS.
If you want to assess the signature of a single signer, you can call SignedInfo::CheckSignature, but that's redundant if you also called SignedCms::CheckSignature.

There's method envelope.CheckSignature(new X509Certificate2Collection(certificate), true); but I tried to use wrong certificate and there was no exception thrown.

The extraCerts overloads provide extra certificates. It's valid to have a SignedCms message which does not embed the signer certificates, leaving it up to the recipient to have known the valid certs ahead of time (e.g. using a per-user database of pre-registered certificates). You didn't get an exception because the correct certificates were found within the provided certificates collection.
You can see what was in the provided certificates collection via the X509Certificate2Collection.Import methods; they can read a PKCS#7 signed-data message and populate the collection with the optional embedded certificates.
","1274","<c#><digital-signature><x509certificate2><pkcs#7>","0","0","2","2016-07-03 22:42:15","37949866","0","1","4220815","","2016-06-20 19:48:29","2016-06-20 19:40:12",""
"23728234","How to create a degenerate PKCS7 file using OpenSSL C library?","How can I create a degenerate PKCS#7 file given a single X509 certificate using OpenSSL C libraries? 
Details:
I extended the _pkcs7.i SWIG interface file in M2Crypto by adding a new function called pkcs7_create_deg.
I get a segmentation fault when I use the the below C code in the SWIG interface file.  Why?
/* _pkcs7.i */
//
// Following 2 lines are part of the SWIG interface definition. Uncommented in _pkcs7.i file.
// %threadallow pkcs7_create_deg;
// %inline %{
//

PKCS7 *pkcs7_create_deg(X509 *x509) {
    PKCS7 *p7 = NULL;
    PKCS7_SIGNED *p7s = NULL;
    STACK_OF(X509_CRL) *crl_stack = NULL;
    STACK_OF(X509) *cert_stack = NULL;

    int ret = 1;

    if ((p7=PKCS7_new()) == NULL) goto end;
    if ((p7s=PKCS7_SIGNED_new()) == NULL) goto end;  
    p7->type=OBJ_nid2obj(NID_pkcs7_signed);
    p7->d.sign=p7s;
    p7s->contents->type=OBJ_nid2obj(NID_pkcs7_data);

    if (!ASN1_INTEGER_set(p7s->version,1)) goto end;
    if ((crl_stack=sk_X509_CRL_new_null()) == NULL) goto end;
    p7s->crl=crl_stack;
    if ((cert_stack=sk_X509_new_null()) == NULL) goto end;
    p7s->cert=cert_stack;

    sk_X509_push(cert_stack, x509);
    // Shouldn't this mean take cert struct pointed to by x509
    // and push it on to cert_stack?  
    // I think this is WHY I am getting the segfault

end:
    if (p7 != NULL) PKCS7_free(p7);

    return (p7);    /* need to return a PKCS7* */

}

// Next line part of SWIG interface definition
// %}

# deg.py
#
from M2Crypto import *

cert = X509.load_cert('ra.crt')
print (cert)

p7_ptr = m2.pkcs7_create_deg(cert._ptr())
# Here I pass the X509 pointer to my cert object
# to the SWIG interface function I created above
# that is supposed to return a pointer to a PKCS#7 object

print (p7_ptr)
p7 = SMIME.PKCS7(p7_ptr)
print (p7)

bio = BIO.MemoryBuffer()
print (bio)

p7.write_der(bio)
# This is WHEN I get the segfault

f = open('deg.p7s', 'w')
f.write(bio.read())
f.close()

(venv)x-wing-air13:.test hansooloo$ python deg.py
<M2Crypto.X509.X509 instance at 0x106275710>
<Swig Object of type 'PKCS7 *' at 0x10625ea80>
<M2Crypto.SMIME.PKCS7 instance at 0x1062577e8>
<M2Crypto.BIO.MemoryBuffer instance at 0x1062757e8>
Segmentation fault: 11

","Ended up forking M2Crypto to add a new function that would create a degenerate PKCS7 object. https://github.com/HanSooloo/M2Crypto-martinpaljak
The steps involved were the following:

Fork M2Crypto from Martin Paljak's repo to a new one.
Modify _pkcs7.i SWIG interface file to add the function below.

_pkcs7.i Modifications
// Adding X.509 related header files to be able to use their data types.
#include <openssl/x509.h>
#include <openssl/x509v3.h>

// Adding PKCS7_SIGNED data type to help create the degenerate data structure.
%apply Pointer NONNULL { PKCS7_SIGNED * };

// Additional interface definitions for degenerate PKCS#7 object creation.
// Inspired by the crl2p7.c file from OpenSSL.  Will need to clean up a bit for function returns.
%threadallow pkcs7_create_degenerate;
%inline %{
int pkcs7_create_degenerate(STACK_OF(X509) *cert_stack, BIO *bio) {
    int ret=1;
    PKCS7 *p7=NULL;
    PKCS7_SIGNED *p7s=NULL;
    X509_CRL *crl=NULL;
    STACK_OF(X509_CRL) *crl_stack=NULL;

    if ((p7=PKCS7_new()) == NULL) goto end;
    if ((p7s=PKCS7_SIGNED_new()) == NULL) goto end;  

    p7->type=OBJ_nid2obj(NID_pkcs7_signed);
    p7->d.sign=p7s;
    p7s->contents->type=OBJ_nid2obj(NID_pkcs7_data);

    if (!ASN1_INTEGER_set(p7s->version,1)) goto end;
    if ((crl_stack=sk_X509_CRL_new_null()) == NULL) goto end;
    p7s->crl=crl_stack;
    p7s->cert=cert_stack;

    ret=i2d_PKCS7_bio(bio, p7);

end:
    p7s->cert=NULL;

    if (p7 != NULL) {
//      printf(""about to free p7: "");
        PKCS7_free(p7);
//      printf(""freed.\n"");
    }

    return ret;

}
%}

Function Details
The function takes an X509 stack pointer and BIO pointer as inputs and returns an integer indicating success.
The X509 stack pointer needs to point to a stack that contains the certificates one wishes to place in the degenerate PKCS#7 object.  
The BIO pointer needs to point to an empty BIO structure that will later be populated with the PKCS#7 object.
Python code example that uses the above function:
from M2Crypto import X509, BIO, m2

sk = X509.X509_Stack()

cert = X509.load_cert('ra.crt')
num = sk.push(cert)
cert = X509.load_cert('ca.crt')
num = sk.push(cert)

# At this point, the X509 stack contains 2 certificates.
print('num: %d' %num)

# Create the BIO that will hold the PKCS#7 object.    
bio = BIO.MemoryBuffer()

# Request to create the degenerate PCKS#7 object.
ret = m2.pkcs7_create_degenerate(sk._ptr(), bio._ptr())

# Open the file for writing.
f = open('deg.p7s', 'w')

# Read from BIO and write to file.
b = bio.read()
f.write(b)

# Close the file.
f.close()

","1248","<python><c><swig><pkcs#7><m2crypto>","0","1","1","2016-03-17 00:00:26","23879244","0","","","","","2014-05-19 00:34:00",""
"37010864","Creating a PKCS #7 detached signature for Apple Wallet passes using PHP","This is an entirely new concept to me, so I'm shooting in the dark.

To create the signature file, make a PKCS #7 detached signature of the
  manifest file, using the private key associated with your signing
  certificate. Include the WWDR intermediate certificate as part of the
  signature. You can download this certificate from Apple’s website.
  Write the signature to the file signature at the top level of the pass
  package. Include the date and time that the pass was signed using the
  S/MIME signing-time attribute.

My understanding:

To create the signature file, make a PKCS #7 detached signature of the manifest file

I'll be using the openssl_pkcs7_sign function using the flag PKCS7_DETACHED.

using the private key associated with your signing certificate.

I'll be using the location of my ssl cert.pem file as the signcert parameter and the location of the cert.key file as the privkey parameter.

Include the WWDR intermediate certificate as part of the signature.

I'll include the path to the WWDR certificate in the extracerts parameter

Include the date and time that the pass was signed using the S/MIME signing-time attribute.

I'll include a an array with a key signing-time and value something like 2015-05-03 10:40:00 for the headers parameter.
My code:
private function createSignature($dir)
{
    $cert = '/etc/ssl/cert.pem';
    $key = '/etc/ssl/private/cert.key';
    $wwdr = '/location/of/apple/wwdr/cert.cer';
    $headers = [
        'signing-time' => (new DateTime())->format('o-m-d H:i:s'),
    ];

    return openssl_pkcs7_sign(""$dir/manifest.json"", ""$dir/signature"", $cert, $key, $headers, PKCS7_DETACHED, $wwdr);
}

Other questions:
I've noticed in the examples of the documentation for the openssl_pkcs7_sign function that some locations of the files are prefixed with file://. Why is this?
","
Generate a Pass Type ID at https://developer.apple.com/account/ios/identifier/passTypeId
Create a certificate for that Pass Type ID at https://developer.apple.com/account/ios/certificate/create/
Download the certificate and put it in your keychain
Find the certificate in your keychain and export it as Certificates.p12 with no password
Open terminal, run openssl pkcs12 -in Certificates.p12 -clcerts -nokeys -out pass_cert.pem -passin pass: to generate the certificate
In terminal, run openssl pkcs12 -in Certificates.p12 -nocerts -out pass_key.pem -passin pass: -passout pass:YourPassword to generate the key
Download the WWDR Certificate from https://www.apple.com/certificateauthority/ and put it in your keychain
Export the WWDR Certificate from your keychain as wwdr.pem

The function to create the detached signature:
public function createSignature()
{
    $cert = ""file://location/of/pass_cert.pem"";
    $key = ""file://location/of/pass_key.pem"";
    $wwdr = ""/location/of/wwdr.pem"";

    openssl_pkcs7_sign(""/location/of/manifest.json"", ""/location/of/signature"",
        $cert, [$key, 'YourPassword'], [], PKCS7_BINARY | PKCS7_DETACHED, $wwdr);

    // convert pem to der
    $signature = file_get_contents(""/location/of/signature"");
    $begin = 'filename=""smime.p7s""';
    $end = '------';
    $signature = substr($signature, strpos($signature, $begin) + strlen($begin));
    $signature = substr($signature, 0, strpos($signature, $end));
    $signature = trim($signature);
    $signature = base64_decode($signature);

    file_put_contents(""/location/of/signature"", $signature);
}

References:

https://www.raywenderlich.com/20734/beginning-passbook-part-1
https://github.com/tschoffelen/PHP-PKPass/blob/master/PKPass.php

","1242","<php><ios><ssl><sign><pkcs#7>","2","4","1","2018-11-08 18:07:03","37124072","0","","","","","2016-05-03 17:42:22",""
"31115861","C# and PHP encryption compatibility - 3DES ECB with PKCS7","I have a common problem but none of the various solutions in the web seems working for me.
I have C# code which make an encrypt 3DES-ECB with PKCS7. I have to do the same in PHP, but I'm getting different results.
This is my C# code:
        public string Encrypt(string toEncrypt, string key)
    {
        byte[] keyArray;
        byte[] toEncryptArray = UTF8Encoding.UTF8.GetBytes(toEncrypt);
        System.Configuration.AppSettingsReader settingsReader = new AppSettingsReader();
            MD5CryptoServiceProvider hashmd5 = new MD5CryptoServiceProvider();
            keyArray = hashmd5.ComputeHash(UTF8Encoding.UTF8.GetBytes(key));
            //Always release the resources and flush data
            // of the Cryptographic service provide. Best Practice
            hashmd5.Clear();            
        TripleDESCryptoServiceProvider tdes = new TripleDESCryptoServiceProvider();

        tdes.Key = keyArray;
        tdes.Mode = CipherMode.ECB;
        tdes.Padding = PaddingMode.PKCS7;
        ICryptoTransform cTransform = tdes.CreateEncryptor();
        byte[] resultArray =
          cTransform.TransformFinalBlock(toEncryptArray, 0, toEncryptArray.Length);
        tdes.Clear();
        return Convert.ToBase64String(resultArray, 0, resultArray.Length);
    }

I've made a lot of tries in php... this is only one of them:
function apiEncode($data)
{    
  $key = ""6702BC24DD0527E7"";

  //Pad for PKCS7
  $blockSize = mcrypt_get_block_size('tripledes', 'ecb');
  $len = strlen($data);
  $pad = $blockSize - ($len % $blockSize);
  $data .= str_repeat(chr($pad), $pad);

  //Encrypt data
  $encData = mcrypt_encrypt('tripledes', $key, $data, 'ecb');
  return base64_encode($encData);
}

I'm using a random key, you can find it in the php sample code.
When the input is ""00010"", the C# code returns ""FcXBCikZU64="" while the php gives to me ""FIg+xqod9iY="".
Why? I think I'm doing all the stuff I've found in the blogs/tutorials/etc... so, what's the problem in my case?
UPDATE:
I have add, but still bad news...
$key .= substr($key,0,8);
function apiEncode($data)
{    
  $key = ""6702BC24DD0527E7"";

  //Pad for PKCS7
  $blockSize = mcrypt_get_block_size('tripledes', 'ecb');
  $len = strlen($data);
  $pad = $blockSize - ($len % $blockSize);
  $data .= str_repeat(chr($pad), $pad);

  $key .= substr($key,0,8); // append the first 8 bytes onto the end

  //Encrypt data
  $encData = mcrypt_encrypt('tripledes', $key, $data, 'ecb'); //, $iv);
  return base64_encode($encData);
}

now the output is hbJpiCNmXz8=... still not what I need..
UPDATE2: the problem is that, on c# side, I make an hash and I don't know how to do it in php.. look the code ""tabbed"", is where I do the hash in c# side.. how can I do it in php one?
SOLUTION: 
function apiEncode($data)
{    
  //Pad for PKCS7
  $blockSize = mcrypt_get_block_size('tripledes', 'ecb');
  $len = strlen($data);
  $pad = $blockSize - ($len % $blockSize);
  $data .= str_repeat(chr($pad), $pad);

  $key = ""6702BC24DD0527E7"";
  $key = md5($key,TRUE);
  $key .= substr($key,0,8);
  //Encrypt data
  $encData = mcrypt_encrypt('tripledes', $key, $data, 'ecb');
  return base64_encode($encData);
}

 $crypt = apiEncode(""00010"");     
    echo ""CRYPT: $crypt"";

","PHP code:
$key = ""6702BC24DD0527E7"";
$key = md5($key,TRUE);
$key .= substr($key,0,8);

The C# code is ""ok"" as it is.
""ok"" is a big word here. I would probably use SHA256 and trim it to 24 bytes:
C#:
SHA256Managed sha256 = new SHA256Managed();
keyArray = sha256.ComputeHash(UTF8Encoding.UTF8.GetBytes(key));
Array.Resize(ref keyArray, 24);
//Always release the resources and flush data
// of the Cryptographic service provide. Best Practice
sha256.Clear(); 

and PHP:
$key = ""6702BC24DD0527E7"";
$key = hash(""sha256"",$key,TRUE);
$key = substr($key,0,24);

and still would be ""lower case OK""... Normally you should use AES and one of the various block chaining modes, like CBC (that requires a IV), and the password should be ""strenghtened"" with an algorithm, like PBKDF2 (requires PHP >= 5.5)
","1232","<c#><php><encryption><pkcs#7><3des>","2","2","2","2015-07-08 10:24:13","31117920","13","1","819161","","2015-06-29 14:21:24","2015-06-29 12:34:45",""
"31115861","C# and PHP encryption compatibility - 3DES ECB with PKCS7","I have a common problem but none of the various solutions in the web seems working for me.
I have C# code which make an encrypt 3DES-ECB with PKCS7. I have to do the same in PHP, but I'm getting different results.
This is my C# code:
        public string Encrypt(string toEncrypt, string key)
    {
        byte[] keyArray;
        byte[] toEncryptArray = UTF8Encoding.UTF8.GetBytes(toEncrypt);
        System.Configuration.AppSettingsReader settingsReader = new AppSettingsReader();
            MD5CryptoServiceProvider hashmd5 = new MD5CryptoServiceProvider();
            keyArray = hashmd5.ComputeHash(UTF8Encoding.UTF8.GetBytes(key));
            //Always release the resources and flush data
            // of the Cryptographic service provide. Best Practice
            hashmd5.Clear();            
        TripleDESCryptoServiceProvider tdes = new TripleDESCryptoServiceProvider();

        tdes.Key = keyArray;
        tdes.Mode = CipherMode.ECB;
        tdes.Padding = PaddingMode.PKCS7;
        ICryptoTransform cTransform = tdes.CreateEncryptor();
        byte[] resultArray =
          cTransform.TransformFinalBlock(toEncryptArray, 0, toEncryptArray.Length);
        tdes.Clear();
        return Convert.ToBase64String(resultArray, 0, resultArray.Length);
    }

I've made a lot of tries in php... this is only one of them:
function apiEncode($data)
{    
  $key = ""6702BC24DD0527E7"";

  //Pad for PKCS7
  $blockSize = mcrypt_get_block_size('tripledes', 'ecb');
  $len = strlen($data);
  $pad = $blockSize - ($len % $blockSize);
  $data .= str_repeat(chr($pad), $pad);

  //Encrypt data
  $encData = mcrypt_encrypt('tripledes', $key, $data, 'ecb');
  return base64_encode($encData);
}

I'm using a random key, you can find it in the php sample code.
When the input is ""00010"", the C# code returns ""FcXBCikZU64="" while the php gives to me ""FIg+xqod9iY="".
Why? I think I'm doing all the stuff I've found in the blogs/tutorials/etc... so, what's the problem in my case?
UPDATE:
I have add, but still bad news...
$key .= substr($key,0,8);
function apiEncode($data)
{    
  $key = ""6702BC24DD0527E7"";

  //Pad for PKCS7
  $blockSize = mcrypt_get_block_size('tripledes', 'ecb');
  $len = strlen($data);
  $pad = $blockSize - ($len % $blockSize);
  $data .= str_repeat(chr($pad), $pad);

  $key .= substr($key,0,8); // append the first 8 bytes onto the end

  //Encrypt data
  $encData = mcrypt_encrypt('tripledes', $key, $data, 'ecb'); //, $iv);
  return base64_encode($encData);
}

now the output is hbJpiCNmXz8=... still not what I need..
UPDATE2: the problem is that, on c# side, I make an hash and I don't know how to do it in php.. look the code ""tabbed"", is where I do the hash in c# side.. how can I do it in php one?
SOLUTION: 
function apiEncode($data)
{    
  //Pad for PKCS7
  $blockSize = mcrypt_get_block_size('tripledes', 'ecb');
  $len = strlen($data);
  $pad = $blockSize - ($len % $blockSize);
  $data .= str_repeat(chr($pad), $pad);

  $key = ""6702BC24DD0527E7"";
  $key = md5($key,TRUE);
  $key .= substr($key,0,8);
  //Encrypt data
  $encData = mcrypt_encrypt('tripledes', $key, $data, 'ecb');
  return base64_encode($encData);
}

 $crypt = apiEncode(""00010"");     
    echo ""CRYPT: $crypt"";

","Ok, solved the issue. Look this link, I wrote all there.
","1232","<c#><php><encryption><pkcs#7><3des>","2","0","2","2015-07-08 10:24:13","31117920","13","1","819161","","2015-06-29 14:21:24","2015-06-29 12:34:45",""
"34625271","Getting PKCS7 signer chain in python","I have PKCS7 message which is signed. It contains a data and a signing certificate (with the whole chain of trust).
I have a code which uses m2crypto to get a certificate out of it.
bio = BIO.MemoryBuffer(pkcs7message)
p7 = SMIME.PKCS7(m2.pkcs7_read_bio_der(bio._ptr()))
sk = X509.X509_Stack()
certStack = p7.get0_signers(sk)

It works. However, certStack returns only one certificate (instead of returning the whole chain of certificates.
Two questions:

Am I missing something (may be there is an option to let it know that I need the whole chain)
Are there other methods how to get the whole chain (may be using pyopenssl)?

","I guess you are making a confusion between signers and certificate chain of a signer. PKCS7_get0_signers return the list of signers.
In order to building a PKCS7 message with 2 signers, you can use following steps:

Build key and certificate for first signer:
openssl genrsa -out key1.pem
openssl req -new -key key1.pem -subj ""/CN=key1"" | openssl x509 -req -signkey key1.pem -out cert1.pem

Build key and certificate for second signer:
openssl genrsa -out key2.pem
openssl req -new -key key2.pem -subj ""/CN=key2"" | openssl x509 -req -signkey key2.pem -out cert2.pem

Create an PKCS7 message using both signers :
echo ""Hello"" | openssl smime -sign -nodetach \
  -out signature.der -outform DER \
  -inkey key1.pem -signer cert1.pem -inkey key2.pem -signer cert2.pem 


Then signers could be printed running your python script:
from M2Crypto import *

bio=BIO.File(open('signature.der'))
smime_object = SMIME.PKCS7(m2.pkcs7_read_bio_der(bio._ptr()))    
signers = smime_object.get0_signers(X509.X509_Stack())

for cert in signers:
    print(cert.get_issuer().as_text())

It give the signers' issuer:

CN=key1
  CN=key2

","1225","<python><certificate><pkcs#7><m2crypto><pyopenssl>","14","5","1","2016-01-12 22:50:55","","0","1","3102264","","2016-01-09 17:30:57","2016-01-06 03:43:10",""
"28615837","Which data from a CMSSignedData object must I pass to generate a valid Timestamp?","I have a valid PKCS7 file loaded into a CMSSignedData object. 
This PKCS7 file includes a plain text message and a valid attached digital signature (all in the same file).
Now I want to timestamp this file. This is the code I'm using (source):
 private static CMSSignedData addTimestamp(CMSSignedData signedData)
throws Exception {
        Collection ss = signedData.getSignerInfos().getSigners();
        SignerInformation si = (SignerInformation) ss.iterator().next();

        TimeStampToken tok = getTimeStampToken();

        ASN1InputStream asn1InputStream = new ASN1InputStream
(tok.getEncoded());
        DERObject tstDER = asn1InputStream.readObject();
        DERSet ds = new DERSet(tstDER);

        Attribute a = new Attribute(new
DERObjectIdentifier(""1.2.840.113549.1.9.16.2.14""), ds);
        DEREncodableVector dv = new DEREncodableVector();
        dv.add(a);
        AttributeTable at = new AttributeTable(dv);
        si = SignerInformation.replaceUnsignedAttributes(si, at);
        ss.clear();
        ss.add(si);
        SignerInformationStore sis = new SignerInformationStore(ss);

        signedData = CMSSignedData.replaceSigners(signedData, sis);
        return signedData;
    }


 private static TimeStampToken getTimeStampToken() throws
Exception {
        Security.addProvider (new
org.bouncycastle.jce.provider.BouncyCastleProvider());

        PostMethod post = new PostMethod(""http://My-TrustedTimeStampProvier.com"");

// I'm omitting the part where I pass the user and password

        TimeStampRequestGenerator reqGen = new TimeStampRequestGenerator();
        //request TSA to return certificate
        reqGen.setCertReq (true); // In my case this works

        //make a TSP request this is a dummy sha1 hash (20 zero bytes)
        TimeStampRequest request =
            reqGen.generate(TSPAlgorithms.SHA1, new byte[20], BigInteger.valueOf(100));

        byte[] enc_req = request.getEncoded();
        ByteArrayInputStream bais = new ByteArrayInputStream(enc_req);

        post.setRequestBody(bais);
        post.setRequestContentLength (enc_req.length);
        post.setRequestHeader(""Content-type"",""application/timestamp-query"");

        HttpClient http_client = new HttpClient();
        http_client.executeMethod(post);
        InputStream in = post.getResponseBodyAsStream();

        //read TSP response
        TimeStampResponse resp = new TimeStampResponse (in);

        resp.validate(request);

        TimeStampToken  tsToken = resp.getTimeStampToken();       
        return tsToken;
    }  

I can get a valid TimeStamp, and I could put it into my CMSSignedData object and save it to a file writting the bytes from signedData.getEncoded() to the harddisk. But when I validate my new shinny timestamped file with a third party software, this software tells the original signature is ok, but the Timestamp doesn't correspond with the signature. This software also can show me the original plain text message.
I think the problem is in this line:
TimeStampRequest request =
    reqGen.generate(TSPAlgorithms.SHA1, new byte[20], BigInteger.valueOf(100));

I think I have to pass a digest instead of a dummy byte array, but I don't know which digest, or what are the right bytes I have to timeStamp.
I successfully could get and verify a SignerInformation object from my signedData. Then I tried to pass to the reqGen.generate() function the bytes from mySignerInformation.getSignature(). The timestamp verification failed. Then I passed a Sha1 digest of mySignerInformation.getSignature(), but my timestamp verification failed again.
The RFC3161 specification says:

2.4.1. Request Format
A time-stamping request is as follows:
TimeStampReq ::= SEQUENCE  {    version                      INTEGER 
  { v1(1) },    messageImprint               MessageImprint,
       --a hash algorithm OID and the hash value of the data to be
(...)
The messageImprint field SHOULD contain the hash of the datum to be
  time-stamped.  The hash is represented as an OCTET STRING.  Its
  length MUST match the length of the hash value for that algorithm
  (e.g., 20 bytes for SHA-1 or 16 bytes for MD5).
MessageImprint ::= SEQUENCE  {
          hashAlgorithm                AlgorithmIdentifier,
          hashedMessage                OCTET STRING  }

But it doesn't tell me where or how I get the MessageImprint data if I want to TimeStamp the bytes inside a CMSSignedData object.
I'm a newbie in this digital signature stuff.
","You're right, the problem is that you're timestamping the incorrect data. The rest of the code seems correct to me.
So the thing is that you've to timestamp the hash of the signature. To get the signature from your CMSSignedData and hash it; you can use the follow code (supposing that you've only one signer in your PKCS7 and you're using SHA1 hash algorithm): 
CMSSignedData signedData = ...
// get the signers of your CMSSignedData signedData
Collection ss = signedData.getSignerInfos().getSigners();
SignerInformation si = (SignerInformation) ss.iterator().next();
// hash the signature
byte[] signDigest = MessageDigest
      .getInstance(TSPAlgorithms.SHA1, new BouncyCastleProvider())
      .digest(si.getSignature()); // since you're adding the bc provider with Security.addProvider you can use ""BC"" instead of passing the new BouncyCastleProvider() 
TimeStampRequestGenerator reqGen = new TimeStampRequestGenerator();
// generate the TSRequest
TimeStampRequest request =
            reqGen.generate(TSPAlgorithms.SHA1, signDigest, BigInteger.valueOf(100));
...

Hope this helps,
","1196","<java><validation><bouncycastle><pkcs#7><trusted-timestamp>","3","3","1","2015-02-20 15:02:27","28616946","0","1","1218618","","2015-02-20 15:02:27","2015-02-19 20:03:19",""
"10986930","Java AES PKCS7 - last block incomplete in decryption","I have an Python application that creates a few files encrypted with AES/PKCS7. I have to read those files with a Java service. But my code is throwing an exception:
""javax.crypto.IllegalBlockSizeException: last block incomplete in decryption""
Here's my decryption code:
public String Decrypt(String strText)
{
    try
    {
        // Text to decrypt
        byte[] test = strText.getBytes();

        //bytKey is the same key as Python app
        SecretKeySpec objKey = new SecretKeySpec(bytKey, ""AES"");
        Cipher objCipher = Cipher.getInstance(""AES/ECB/PKCS7Padding"", ""BC"");
        objCipher.init(Cipher.DECRYPT_MODE, objKey);

        // Here I got an exception >>
        byte[] bytValue = objCipher.doFinal(test);

        return new String(bytValue);
    }
    catch (Exception exc)
    {
        exc.printStackTrace();
    }

    return """";

}

If I decode the encrypted text before step into doFinal I get another exception:
""javax.crypto.BadPaddingException: pad block corrupted""
public String Decrypt(String strText)
{
    try
    {

        BASE64Decoder decoder = new BASE64Decoder();
        byte[] test = decoder.decodeBuffer(strText);

        SecretKeySpec objKey = new SecretKeySpec(bytKey, ""AES"");
        Cipher objCipher = Cipher.getInstance(""AES/ECB/PKCS7Padding"", ""BC"");
        objCipher.init(Cipher.DECRYPT_MODE, objKey);

        byte[] bytValue = objCipher.doFinal(test);

        return new String(bytValue);
    }
    catch (Exception exc)
    {
        exc.printStackTrace();
    }

    return """";

}

I'm not an expert on encrypt/decrypt and I guess it's quite simple to solve.
Any ideas to solve this issue? Thanks in advance!
","","1192","<java><aes><encryption><pkcs#7>","1","","0","2012-06-11 20:15:29","","2","3","","","","2012-06-11 20:15:29",""
"33034896","How to get certificate from .p7b file","Can anyone help how to extract certificate from .p7b file in C# and BouncyCastle?
","var certificateStore = new CmsSignedData(new FileStream(""chain.p7b"", FileMode.Open));
IX509Store x509Certs = certificateStore.GetCertificates(""Collection"");
ArrayList a = new ArrayList(x509Certs.GetMatches(null));
X509Certificate signerCert = (X509Certificate) a[0];

var gen = new CmsSignedDataGenerator();
gen.AddCertificates(x509Certs);
gen.AddSigner(_privateKey, signerCert, CmsSignedGenerator.DigestSha1);

CmsProcessable msg = new CmsProcessableByteArray(Encoding.ASCII.GetBytes(FullUnsignedMessage));

CmsSignedData signedData = gen.Generate(msg, true);

","1176","<c#><bouncycastle><pkcs#7>","-3","0","1","2015-10-09 10:35:35","33035587","2","","107625","","2015-10-09 10:14:22","2015-10-09 09:40:20","2016-01-14 06:12:57"
"52344287","extract signed data from pkcs7 in python","i have a usb cryptotoken and able to sign data and pack it in pkcs file. then i can extract certificate and data from that file using openssl as follows:
openssl cms -verify -in signature.p7s -inform DER -noverify -outform DER -signer cert.pem -out textdata

so my question is how to do the same using python (pyopenssl)?
i've tried to do as described here, but there is different case - i have attached signature and do not have separate signature and certificate file - i have ASN.1 encoded file, which contains as certificates as data and signature
","There are several hurdles to overcome to achieve what you are looking for.
First, the pyopenssl binding itself is  limited when it comes to its crypto module, where you desired functionality resides. In fact, the pyopenssl crypto documentation states:

The pyca/cryptography module mentioned is exposed via two internal attributes of the pyopenssl crypto module, with the names _lib and _ffi, which need to be used to get to the required functionality.
Then the CMS_verify() function that would be your logical choice for this is not included in the pyca/cryptography bindings either. However, for your purpose it is probably good enough to use PKCS7_verify() -- you can read all about that in a StackExchange question OpenSSL PKCS#7 vs. S/MIME. The function crypto.load_pkcs7_data() comes in handy.
All that said, the following code snippet might do it for you -- although from your description it is not clear to me whether the certificate of the signer is included in the .p7s file (in that case you do not have to give -signer as an argument to openssl cms -verify like you did). It worked for me, so give it a try:
from OpenSSL import crypto
from OpenSSL._util import (
    ffi as _ffi,
    lib as _lib,
)

# Or, alternatively:
# from cryptography.hazmat.bindings.openssl.binding import Binding
# _lib = Binding.lib
# _ffi = Binding.ffi

with open('message_der.p7s', 'rb') as f:
    p7data = f.read()
p7 = crypto.load_pkcs7_data(crypto.FILETYPE_ASN1, p7data)

bio_out =crypto._new_mem_buf()
res = _lib.PKCS7_verify(p7._pkcs7, _ffi.NULL, _ffi.NULL, _ffi.NULL, bio_out, _lib.PKCS7_NOVERIFY)
if res == 1:
    databytes = crypto._bio_to_string(bio_out)
    print(databytes)
else:
    errno = _lib.ERR_get_error()
    errstrlib = _ffi.string(_lib.ERR_lib_error_string(errno))
    errstrfunc = _ffi.string(_lib.ERR_func_error_string(errno))
    errstrreason = _ffi.string(_lib.ERR_reason_error_string(errno)) 

In case you decide to use this approach, here is a caveat about using this OpenSSL bindings module directly:

","1171","<python><openssl><x509><pem><pkcs#7>","3","1","1","2018-10-12 18:21:29","52352077","0","","7414759","","2018-09-16 09:43:50","2018-09-15 11:31:22",""
"19772103","Objective-c AES CBC decryption with IV","I have been struggling with this problem for several days now and i can't seem to figure it out
I tried using CCCrypt to decrypt an encrypted string, I have the encrypted string encoded with Base64 encode, I have the key and the iv. The encryption is AES256 CBC with PKCS7Padding.
This is the code i am using right now:
- (NSData *)AES256DecryptWithKey:(NSString *)key
{
    char keyPtr[kCCKeySizeAES128+1];
    bzero(keyPtr, sizeof(keyPtr));

    NSUInteger dataLength = [self length];

    size_t bufferSize = dataLength + kCCBlockSizeAES128;
    void *buffer = malloc( bufferSize );

    unsigned char *iv = [@""IV String"" cStringUsingEncoding:NSUTF8StringEncoding];

    size_t numBytesDecrypted = 0;

    CCCryptorStatus cryptStatus = CCCrypt(kCCEncrypt,
                                      kCCAlgorithmAES128,
                                      kCCOptionPKCS7Padding,
                                      keyPtr, kCCKeySizeAES256,
                                      iv,
                                      [self bytes],
                                      dataLength,
                                      buffer,
                                      bufferSize,
                                      &numBytesDecrypted);

    if( cryptStatus == kCCSuccess )
    {
        return [NSData dataWithBytesNoCopy:buffer length:numBytesDecrypted];
    }

    free( buffer );
    return nil;
}

But cryptStatus keeps returning 0 and I couldn't find a way to figure out why.
What am i doing wrong? 
Thanks in advance! 
","","1146","<objective-c><encryption><aes><pkcs#7><cbc-mode>","0","","0","2013-11-04 16:19:23","","3","","","","","2013-11-04 16:19:23",""
"21549328","Certificate chain in iTextSharp with deferred signing","I'm signing a PDF document with a mobile signing service. I recieve a certificate from the service after it has signed the hash of the document. I am able to replace zero padded signature container in the document with the certificate without any problems, but I""m having problems with including a certificate chain.  
I have the root, intermediate and leaf certificates with the application, but I'm not able to include them in the signature. What I thought I would be able to do was to create a chain in code and then inject the encoded bytes from that chain, but this results in an invalid certificate.  
The code I'm using to do that is as follows:
X509CertificateParser cp = new X509CertificateParser();

var certFromServer = getCertFromServer();

var rootCert = cp.ReadCertificate(new X509Certificate2(rootCertPath).RawData);
var interCert = cp.ReadCertificate(new X509Certificate2(interCertPath)RawData);
var leafCert = cp.ReadCertificate(new X509Certificate2(leafCertPath).RawData);

List<X509Certificate> intermediateCerts = new List<X509Certificate> {
    interCert, 
    leafCert
};

X509CertificateParser parser = new X509CertificateParser();
PkixCertPathBuilder builder = new PkixCertPathBuilder();

X509CertStoreSelector holder = new X509CertStoreSelector {
    Certificate = parser.ReadCertificate(certFromServer)
};

intermediateCerts.Add(holder.Certificate);

HashSet rootCerts = new HashSet {new TrustAnchor(rootCert, null)};

PkixBuilderParameters builderParams = new PkixBuilderParameters(rootCerts, holder)
    {
        IsRevocationEnabled = false
    };

X509CollectionStoreParameters intermediateStoreParameters =
    new X509CollectionStoreParameters(intermediateCerts);

builderParams.AddStore(X509StoreFactory.Create(
    ""Certificate/Collection"", intermediateStoreParameters)
);

PkixCertPathBuilderResult result = builder.Build(builderParams);


byte[] certChainBytes = result.CertPath.GetEncoded(""PKCS7""); 

// ExternalSignatureContainer is a container that simply returns the cert bytes 
// from its Sign method without changing them.
IExternalSignatureContainer container = new ExternalSignatureContainer(certChainBytes);

MakeSignature.SignDeferred(reader, _signatureFieldName, baos, container);

The method to create the chain is from the following StackOverflow question: Build certificate chain in BouncyCastle in C#
What is the correct way to build a certificate chain for the signature container in iTextSharp? 
","","1135","<c#><pdf><itextsharp><itext><pkcs#7>","0","","0","2014-02-18 14:52:23","","6","","-1","","2017-05-23 11:43:48","2014-02-04 10:06:51",""
"15979542","Verify signature of PKCS#7 signed file using Python","On Linux, I need to verify the signature of a PKCS#7 signed file and retrieve its original contents using Python and its standard libraries.
Currently, I can verify the contents of this file (and retrieve its actual contents) using OpenSSL terminal utility as follows:
openssl smime -verify -in myfile.xml -inform DER -noverify

I have received this command from a friend. I don't really understand the options and directives. Is there any way to do this with Python without using any 3rd party libraries?
Thanks in advance.
","","1128","<python><linux><openssl><pkcs#7>","1","","0","2013-04-12 19:36:16","","5","","","","","2013-04-12 19:36:16",""
"49071730","X509Certificate2 - Access Denied Exception if use ECC certificate","I try to encrypt and decrypt data with System.Security.Cryptography.Pkcs, but it works only with RSA certificates, if I used an ECC (curve ECDH_brainpoolP512r1) certificate the constructor of X509Certificate2 crashes with an Access Denied Exception.
Create SelfSignedCertificate in Powershell
New-SelfSignedCertificate `
 -Subject ""CN=Test Code Signing RSA"" `
 -Type DocumentEncryptionCert `
 -KeyUsage ""DigitalSignature"" `
 -FriendlyName ""Test Code Signing"" `
 -NotAfter (get-date).AddYears(5) `
 -KeyExportPolicy Exportable `
 -SmimeCapabilities ` 
 -KeyAlgorithm ECDH_brainpoolP512r1

Read SelfSignedCertificate in code
var base64cert = ""MIIF/wIBAzCCBbsGCSqGSIb3DQEHAaCCBawEggWoMIIFpDCCAkcGCSqGSIb3DQEHAaCCAjgEggI0MIICMDCCAiwGCyqGSIb3DQEMCgECoIIBNjCCATIwHAYKKoZIhvcNAQwBAzAOBAi2P5j9EliEaQICB9AEggEQyJLkopAMyHJh0jQXtnlwK4yjpE0WqYXf9sNPPLOFXgaxNU7gLKc3F6kPJUxLCxnvjOe7bRJS3v4A0GQBBqeFEJjBT9hd88RaQ2NsNxDrQEh/ZAyTUg+l6CyApUtcJb5uehPVnj7xnWtu4vvxDh5hRqSVxSR50wOjk/MKlyX1hhF1JybzRiqESKIMLx84HWJqZ6Fp87asJ0/0isL+kVxarqLrTkv0CGt2QaLxZzu9YDGj6nuGy2EBQwGHwMCEVTFupX55njV4aU3YTG2U+BHFl667NekTtOXH5GXDbp6D+9PntXBxW2d3E68v7lBVMjPKfTsTeCs4aLOwQzsXIFgvouw6GgGsZCrYaQwMNuGayC4xgeIwDQYJKwYBBAGCNxECMQAwEwYJKoZIhvcNAQkVMQYEBAEAAAAwXQYJKoZIhvcNAQkUMVAeTgB0AGUALQA0ADYANwBmADEAOAAxAGMALQBiAGQAZQA0AC0ANAA5AGUANgAtAGEANABjADMALQA4ADQAOAAwADYAMgBmADIANgA4ADEAMTBdBgkrBgEEAYI3EQExUB5OAE0AaQBjAHIAbwBzAG8AZgB0ACAAUwBvAGYAdAB3AGEAcgBlACAASwBlAHkAIABTAHQAbwByAGEAZwBlACAAUAByAG8AdgBpAGQAZQByMIIDVQYJKoZIhvcNAQcBoIIDRgSCA0IwggM+MIIDOgYLKoZIhvcNAQwKAQOgggLdMIIC2QYKKoZIhvcNAQkWAaCCAskEggLFMIICwTCCAiagAwIBAgIQXQFCNRCYc4hHLhQAD247rTAJBgcqhkjOPQQBMDAxLjAsBgNVBAMMJVRlc3QgQ29kZSBTaWduaW5nIEVDQyBicmFpbnBvb2xQNTEycjEwHhcNMTgwMzAyMTQyMTQ1WhcNMjMwMzAyMTQzMTQ2WjAwMS4wLAYDVQQDDCVUZXN0IENvZGUgU2lnbmluZyBFQ0MgYnJhaW5wb29sUDUxMnIxMIGbMBQGByqGSM49AgEGCSskAwMCCAEBDQOBggAETcwT2kPzMxF5upq+xb2NpTmRk2Gkp1mThVESNI9A1tgWk3wIylN72b1t5yHxveiWdopn3LkeT0hTaXSJ4fZsHmYRo0KZS5fKZbSSiFlLbxAwndgG99HLakz/I59WtXzSenSaM6HkP+Nz0Kmxvvy0umOXLg0bU8qpX5tLUtEFAxOjgd8wgdwwDgYDVR0PAQH/BAQDAgeAMBQGA1UdJQQNMAsGCSsGAQQBgjdQATCBlAYJKoZIhvcNAQkPBIGGMIGDMAsGCWCGSAFlAwQBKjALBglghkgBZQMEAS0wCwYJYIZIAWUDBAEWMAsGCWCGSAFlAwQBGTALBglghkgBZQMEAQIwCwYJYIZIAWUDBAEFMAoGCCqGSIb3DQMHMAcGBSsOAwIHMA4GCCqGSIb3DQMCAgIAgDAOBggqhkiG9w0DBAICAgAwHQYDVR0OBBYEFMmLfUI9zvfjMlvbolK8pP0zeZNhMAkGByqGSM49BAEDgYkAMIGFAkEAlCq9PiR4Yl0A+kIZO1yyfmKpcmJI6++jZJJ1P2LxZIi9ZgIJQLIWjmBTMP1nswAzNbnqetOBuJy55+SkO2OsngJAGXIYtW8RBFcTmRYnhCLeIsB/De3khytnaeHNBZVB/x0n/gFqVNMaPZp6l4MPGhEBS8pcvLN4zvO7phxR0Xt3HDFKMBMGCSqGSIb3DQEJFTEGBAQBAAAAMDMGCSqGSIb3DQEJFDEmHiQAVABlAHMAdAAgAEMAbwBkAGUAIABTAGkAZwBuAGkAbgBnAAAwOzAfMAcGBSsOAwIaBBSas13IRWnhNtoPLKp29FJpLmCptgQUkF0JRqyYiDG0Ql7zAPED2uVWzykCAgfQ"";
new System.Security.Cryptography.X509Certificates.X509Certificate2(Convert.FromBase64String(base64cert), ""qwert"");

Exception
Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException: Access Denied
   at Internal.Cryptography.Pal.CertificatePal.FilterPFXStore(Byte[] rawData, SafePasswordHandle password, PfxCertStoreFlags pfxCertStoreFlags)
   at Internal.Cryptography.Pal.CertificatePal.FromBlobOrFile(Byte[] rawData, String fileName, SafePasswordHandle password, X509KeyStorageFlags keyStorageFlags)
   at System.Security.Cryptography.X509Certificates.X509Certificate..ctor(Byte[] rawData, String password, X509KeyStorageFlags keyStorageFlags)
   at System.Security.Cryptography.X509Certificates.X509Certificate2..ctor(Byte[] rawData, String password)
   at PkcsEncryption.Program.Certificate(Boolean rsa) in c:\git\PkcsEncryption\PkcsEncryption\Program.cs:line 88
   at PkcsEncryption.Program.Encrypt(Byte[] dataPlain, Boolean useRsa) in c:\git\PkcsEncryption\PkcsEncryption\Program.cs:line 56
   at PkcsEncryption.Program.Main(String[] args) in c:\git\PkcsEncryption\PkcsEncryption\Program.cs:line 22

","The PFX which you have encoded as base64 there has internally set the marker indicating it was exported from a machine keystore.  Your Access Denied indicates that you are not running as an administrator (and thus do not have the permission to add keys to the machine's keystore).
To ensure that keys from a PFX get added to the current user's key store set the X509KeyStorageFlags.UserKeySet flag.  Or, if you've installed the early access build (or, in the future, the released build) of .NET Framework v4.7.2 you can use EphemeralKeySet to keep the private key in memory and avoid the keystore altogether.
new System.Security.Cryptography.X509Certificates.X509Certificate2(
    Convert.FromBase64String(base64cert),
    ""qwert"",
    X509KeyStorageFlags.UserKeySet);

","1113","<c#><public-key-encryption><x509certificate2><elliptic-curve><pkcs#7>","1","7","1","2018-03-09 16:19:08","49197965","0","1","1776231","","2018-03-09 08:57:23","2018-03-02 15:00:13",""
"11163760","Chain error and Verifying certificate","I got a problem with PKCS #7 that's driving me nuts. Here's is the thing:

I have an ASP.NET webservice that makes requests to another third-party server and receives a PKCS #7 signed token in response (it's actually not important where this token comes from). My web service then checks the token's signature (and validity) and returns the enclosed data to the user that invoked the method.
The web service is configured to run in a dedicated application pool, which runs under a Windows AD user account, IIS 6.
To perform the verification, I do this (signature has the token):
public static byte[] VerifyAndExtractEnvelopedData(byte[] signature)
{
    if (signature == null)
        throw new ArgumentNullException(""signature"");

    // Decode the signature
    SignedCms cms = new SignedCms();
    cms.Decode(signature);
    cms.CheckSignature(false);

    if (cms.Detached)
        throw new InvalidOperationException(""Cannot extract enveloped content from a detached signature."");

    return cms.ContentInfo.Content;
}

I deployed the web service (IIS 6). When I try to run the afore mentioned webmethod, upon the signature verification, I get the error:

A certificate chain could not be built to a trusted root authority


In order to simplify things, I wrote a little Windows Forms application with the exact same code. I logged in interactively to the same server where the web service is hosted, using the same user account in the application pool's. Run the EXE file there and it works fine, that is,  were able to verify the signature perfectly. IMO, this rules out any problem like a missing  certificate authority (CA) certificate and so on (in fact, I have the signer's .CER file, I open it in Windows, and it tells me that the chain is OK).
So apparently the only difference is that in the first case my process is a web service and in the second a desktop EXE file. What else could be happening that prevents me to perform the verification in the first case?
","I think you could be hitting different trust stores on the relying party, see Certificate stores.
Also, check out the involved certificates with PKIF, PITT, Portecle or similar tools for validity, proper OIDs, chaining, etc.
","1100","<.net><web-services><certificate><keychain><pkcs#7>","0","0","1","2013-06-12 17:10:31","","0","","63550","","2013-06-12 17:06:22","2012-06-22 20:37:32",""
"38594334","Adding Certificates to CMS Signed Data","I am currently using the java Bouncy Castle libraries in order to create CMS signed data (or PKCS7 signed data). I seem however to be stuck with adding certificates (even though the certificate signer is properly added).
I checked out this question about properly signing data, but it didn't respond the needs of my SCEP server. The code I used was from EJBCA but doesn't seem to add certificates to the PKCS7 signed data.
When I parse the signed data with the openssl cms tool, I see that the ""certificates"" field is ""EMPTY"". Additionally, when I try to the print the certs with openssl pkcs7 [...] -print_certs, I get nothing.
Here is how I sign my data with Bouncy Castle (it's a lot code but enough to reproduce the issue):
CMSEnvelopedDataGenerator edGen = new CMSEnvelopedDataGenerator();
CMSTypedData msg;
List<X509Certificate> certList = new ArrayList<>();
// Make sure the certificate is not null
if (this.certificate != null) {
    certList.add((X509Certificate) this.certificate);
}

/**
* Create the signed CMS message to be contained inside the envelope
* this message does not contain any message, and no signerInfo
**/
CMSSignedDataGenerator gen = new CMSSignedDataGenerator();
Collection<JcaX509CertificateHolder> x509CertificateHolder = new ArrayList<>();
try {
    for (X509Certificate certificate : certList) {
        x509CertificateHolder.add(new JcaX509CertificateHolder(certificate));
    }
    CollectionStore<JcaX509CertificateHolder> store = new CollectionStore<>(x509CertificateHolder);
    gen.addCertificates(store);
} catch (Handle all exceptions) {}

This snippet of code above should normally add certificates. I took this from EJBCA.
Here is how I complete the signed data:    
CMSSignedDataGenerator gen1 = new CMSSignedDataGenerator();
// I add ALL of my attributes here
// Once they're added...
Certificate caCert = this.caCertificate;
try {
    String provider = BouncyCastleProvider.PROVIDER_NAME;
    ContentSigner contentSigner = new JcaContentSignerBuilder(signatureAlgorithmName).
            setProvider(provider).
            build(signerKey);
    JcaDigestCalculatorProviderBuilder calculatorProviderBuilder = new JcaDigestCalculatorProviderBuilder().
            setProvider(provider);
    JcaSignerInfoGeneratorBuilder builder = new JcaSignerInfoGeneratorBuilder(calculatorProviderBuilder.build());
    builder.setSignedAttributeGenerator(new DefaultSignedAttributeTableGenerator(new AttributeTable(attributes)));
    gen1.addSignerInfoGenerator(builder.build(contentSigner, (X509Certificate) ca));
} catch (Handle all exceptions) {}

// Create the signed data
CMSSignedData sd = gen1.generate(msg, true);
byte[] results = sd.getEncoded();

The bytes array results is the DER formatted PKCS7 signed data... but no certificate is added.
Am I missing something? Thank you for your help!
","The CMSSignedDataGenerator gen1 has to explicitly add the certificate, which I wasn't aware of.
It can simply be done by:

Adding the certificates to a List of X509Certificates;
Converting that List into a Collection of JcaX509CertificateHolder;
Adding this collection to a CollectionStore of JcaX509CertificateHolder;
Adding the store the CMSSignedDataGenerator.

Code sample:
 CMSSignedDataGenerator gen1 = new CMSSignedDataGenerator();
 List<X509Certificate> certificates = new ArrayList<>();

 // I chose to add the CA certificate
 certificates.add((X509Certificate) this.caCertificate);

 // In this case, this is a certificate that I need to add
 if (this.certificate != null)
     certificates.add((X509Certificate) this.certificate);

 // This is the recipient certificate
 if (this.recipientCert != null)
     certificates.add((X509Certificate) this.recipientCert);
 Collection<JcaX509CertificateHolder> x509CertificateHolder = new ArrayList<>();

 // Of course, we need to handle the exceptions...
 for (X509Certificate certificate : certificates) {
     x509CertificateHolder.add(new JcaX509CertificateHolder(certificate));
 }
 CollectionStore<JcaX509CertificateHolder> store = new CollectionStore<>(x509CertificateHolder);

// The final stage.
 gen1.addCertificates(store);

Hope this helps anyone in the future.
","1099","<java><openssl><bouncycastle><pkcs#7>","1","0","1","2016-07-27 11:59:15","38612328","0","","-1","","2017-05-23 12:08:04","2016-07-26 15:40:01",""
"35846427","PdfPKCS7 .verify() return false","I have been working with itextpdf-5.5.5, and the Integrity check return false. 
PdfPKCS7 pkcs7 = fields.verifySignature(name);

pkcs7.verify();<------ HERE return false

But Adobe Acrobat Reader say: Signed and all signatures are valid. :( 
This is the document: Test.pdf. 
Could someone explain what is happening?. 
Thanks in advance
","The CMS signature container embedded in your PDF has some questionable properties. In particular it has an encapsulated content, even though it merely is a byte array of length 0. This makes iText include this value in a test which then fails. I would propose creating cleaner signature containers.
In detail
The CMS object type EncapsulatedContentInfo is specified as:

5.2.  EncapsulatedContentInfo Type
The content is represented in the type EncapsulatedContentInfo:
 EncapsulatedContentInfo ::= SEQUENCE {
    eContentType ContentType,
    eContent [0] EXPLICIT OCTET STRING OPTIONAL }

 ContentType ::= OBJECT IDENTIFIER

The fields of type EncapsulatedContentInfo have the following
     meanings:

eContentType is an object identifier.  The object identifier
          uniquely specifies the content type.
eContent is the content itself, carried as an octet string.  The
          eContent need not be DER encoded.

The optional omission of the eContent within the
     EncapsulatedContentInfo field makes it possible to construct
     ""external signatures"".  In the case of external signatures, the
     content being signed is absent from the EncapsulatedContentInfo value
     included in the signed-data content type.  If the eContent value
     within EncapsulatedContentInfo is absent, then the signatureValue is
     calculated and the eContentType is assigned as though the eContent
     value was present.
(RFC 5652 section 5.2)

So for signature containers embedded into a PDF, eContent should be omitted to indicate that not this eContent is signed but separate data, the surrounding PDF data.
The signature container of the OP's signed document contains this EncapsulatedContentInfo object:
    <30 0F>
  43   15:       SEQUENCE {
    <06 09>
  45    9:         OBJECT IDENTIFIER data (1 2 840 113549 1 7 1)
         :           (PKCS #7)
    <A0 02>
  56    2:         [0] {
    <04 00>
  58    0:           OCTET STRING
         :           }
         :         }

Thus, this signature container does not have omitted the eContent and so makes iText include this array into its checks to eventually fail.
This actually is a bug, though
I formulated the above in a fairly restrained manner for a simple reason: Even though that use of the EncapsulatedContentInfo type is misleading, it is not outright invalid in the case at hand!
For the original ISO 32000-1 integrated signatures, that norm specified

When PKCS#7 signatures are used, the value of Contents shall be a DER-encoded PKCS#7 binary data
  object containing the signature. The PKCS#7 object shall conform to RFC3852 Cryptographic Message
  Syntax. Different subfilters may be used and shall be registered in accordance with Annex E. SubFilter shall
  take one of the following values:

adbe.pkcs7.detached: The original signed message digest over the document’s byte range shall be
  incorporated as the normal PKCS#7 SignedData field. No data shall be encapsulated in the PKCS#7
  SignedData field.
adbe.pkcs7.sha1: The SHA1 digest of the document’s byte range shall be encapsulated in the PKCS#7
  SignedData field with ContentInfo of type Data. The digest of that SignedData shall be incorporated as the
  normal PKCS#7 digest.

(ISO 32000-1 section 12.8.3.3 PKCS#7 Signatures as used in ISO 32000)

So for such signatures there either was no encapsulated data (not even a zero-length byte array) or the encapsulated data were a digest value to check.
This is why iText's verification code in one place assumes it is in the latter case: As there is some encapsulated content, it must be a hash to check.

The signature at hand, though, is not of one of those original types but it uses SubFilter ETSI.CAdES.detached. These signatures are originally specified by ETSI:

4.2 General Requirements
For all profiles covered in the present document: 
b) A DER-encoded SignedData object as specified in CMS (RFC 3852) shall be included as the PDF
  signature in the entry with the key Content of the signature dictionary as described in ISO 32000-1,
  clause 12.8.1. This CMS object forms a CAdES signature described in TS 101 733 as it may contain
  several attributes required by the rules given in the following clauses. 
d) Requirements specified in ISO 32000-1, clauses 12.8.3.2 (PKCS#1) and 12.8.3.3 (PKCS#7) signatures as
  used in ISO 32000-1 do not apply. 
4.6.2 Document Digest
The verifier shall check that the document digest matches that in the signature as specified in ISO 32000-1,
  clause 12.8.1 
(ETSI TS 102 778-3 V1.1.2 (2009-12))

So for signatures as in the case at hand, the section from ISO 32000-1 partially quoted before does not apply, and the hash in the signature (the message-digest attribute) has to match the document digest (calculated as defined by ISO 32000-1, i.e. only for the defined byte ranges) without consideration of the encapsulated content.
A workaround
If you slightly patch the PdfPKCS7 object before calling PdfPKCS7.verify(), you can positively verify the document with iText, cf. the test VerifySignature.java:
While the original verification
System.out.println(""Signature name: "" + name);
System.out.println(""Signature covers whole document: "" + acroFields.signatureCoversWholeDocument(name));
PdfPKCS7 pk = acroFields.verifySignature(name);
System.out.println(""Subject: "" + CertificateInfo.getSubjectFields(pk.getSigningCertificate()));
System.out.println(""Document verifies: "" + pk.verify());

returns a failure
Signature name: Signature1
Signature covers whole document: false
Subject: {SURNAME=[CHARPENTIER DIAZ], C=[CR], OU=[CIUDADANO], SN=[CPF-01-1093-0964], CN=[JOSE ALBERTO CHARPENTIER DIAZ (FIRMA)], GIVENNAME=[JOSE ALBERTO], O=[PERSONA FISICA]}
Document verifies: false

the patched verification
System.out.println(""Signature name: "" + name);
System.out.println(""Signature covers whole document: "" + acroFields.signatureCoversWholeDocument(name));
PdfPKCS7 pk = acroFields.verifySignature(name);
System.out.println(""Subject: "" + CertificateInfo.getSubjectFields(pk.getSigningCertificate()));

Field rsaDataField = PdfPKCS7.class.getDeclaredField(""RSAdata"");
rsaDataField.setAccessible(true);
Object rsaDataFieldContent = rsaDataField.get(pk);
if (rsaDataFieldContent != null && ((byte[])rsaDataFieldContent).length == 0)
{
    System.out.println(""Found zero-length encapsulated content: ignoring"");
    rsaDataField.set(pk, null);
}
System.out.println(""Document verifies: "" + pk.verify());

returns a success:
Signature name: Signature1
Signature covers whole document: false
Subject: {SURNAME=[CHARPENTIER DIAZ], C=[CR], OU=[CIUDADANO], SN=[CPF-01-1093-0964], CN=[JOSE ALBERTO CHARPENTIER DIAZ (FIRMA)], GIVENNAME=[JOSE ALBERTO], O=[PERSONA FISICA]}
Found zero-length encapsulated content: ignoring
Document verifies: true

(The patch attempts to be gentle and only patches zero-length byte arrays to null.)
","1096","<pdf><itext><digital-signature><pkcs#7>","0","3","1","2016-03-08 11:39:49","35863488","0","2","3587281","","2016-03-07 23:13:35","2016-03-07 14:36:52",""
"22211319","PKCS7_sign returns null","I've been trying to get a pkcs#7 signature to happen in c++, and I've only succeeded in growing more gray hairs.
I get a *.cer file from Apple, and build a *.p12 file using Keychain Access.  Once I have that, I fire up Eclipse, and slurp in the p12 file that I generated.  The rest can be found below:
BIO *bio = BIO_new(BIO_s_mem());
FILE *fp = fopen((char *)""/path/to/cert.p12"", ""rb"");
EVP_PKEY *pkey = EVP_PKEY_new();
X509 *cert = X509_new();
STACK_OF(X509) *ca = sk_X509_new_null();
PKCS12 *p12 = NULL;
PKCS7 *p7 = NULL;

BIO_read_filename(bio, '/path/to/data.txt');

if (!fp) {
  fprintf(stderr, ""Error opening cert.p12\n"");
  exit(1);
}

d2i_PKCS12_fp(fp, &p12);

if (!p12) {
  fprintf(stderr, ""Error reading PKCS#12 file\n"");
  ERR_print_errors_fp(stderr);
  exit (1);
}

// That's amazing.  I have the same combination on my luggage!
if (!PKCS12_parse(p12, (char *)""12345"", &pkey, &cert, &ca)) {
  fprintf(stderr, ""Error parsing PKCS#12 file\n"");
  ERR_print_errors_fp(stderr);
  exit (1);
}

p7 = PKCS7_sign(cert, pkey, ca, bio, PKCS7_TEXT);

I tried dumping out the cert, pkey and chain to a file.  It all worked as expected (the chain was empty, but I wasn't expecting anything).  It looks like p7 is still null after the signature.  I tried to use the p7 object, and I get a segmentation fault.
Anyone ever come across anything like this?
","
Anyone ever come across anything like this?

Do you mean hard to use and documentation with an opportunity for improvement? Yes.
Here's the official OpenSSL docs: PKCS7_sign(3).

$ cd openssl-1.0.1f/apps
$ grep -R PKCS7_sign *
smime.c: p7 = PKCS7_sign(NULL, NULL, other, in, flags);

Here's the sample code from smime.c:
PKCS7 *p7 = NULL;
BIO *in = NULL, *out = NULL;
STACK_OF(X509) *other = NULL;
const EVP_MD *sign_md  
int flags = 0;

other = load_certs(bio_err,certfile,FORMAT_PEM, NULL, e, ""certificate file"");

sign_md = EVP_get_digestbyname(""sha256"");

flags |= PKCS7_STREAM;
flags |= PKCS7_PARTIAL;
p7 = PKCS7_sign(NULL, NULL, other, in, flags);

for (i = 0; i < sk_OPENSSL_STRING_num(sksigners); i++) {
    ...
    signer = load_cert(bio_err, signerfile,FORMAT_PEM, NULL, e, ""signer certificate"");
    PKCS7_sign_add_signer(p7, signer, key, sign_md, flags))
}

PKCS7_final(p7, in, flags);
...

PEM_write_bio_PKCS7(out, p7);

","1086","<c++><ios><openssl><pkcs#7><pkcs#12>","1","1","1","2014-03-06 10:07:54","","1","0","","","","2014-03-05 23:03:07",""
"27562220","PKCS#7 Decryption Code in Java","I am very new to this area. I'm trying to develop a simply PCKS#7 encrypt/decrypt function in Java. 
The encrypt is without signing yet, I just want to test the encrypt/decrypt (the key is from a keystore) 
Below is my encryption code.
private static byte[] encryptData() throws Exception {

    Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
    FileInputStream fIn = new FileInputStream(_keyStorePath);
    KeyStore keystore = KeyStore.getInstance(""JKS"");
    keystore.load(fIn, _password);
    Certificate cert = keystore.getCertificate(""abc"");
    fIn.close();

    // set up the generator
    CMSEnvelopedDataGenerator gen = new CMSEnvelopedDataGenerator();

    gen.addRecipientInfoGenerator(new JceKeyTransRecipientInfoGenerator((X509Certificate) cert).setProvider(""BC""));

    // create the enveloped-data object
    CMSProcessable data = new CMSProcessableByteArray(""Hello World!"".getBytes());
    CMSEnvelopedData enveloped = gen.generate((CMSTypedData) data,new JceCMSContentEncryptorBuilder(CMSAlgorithm.DES_EDE3_CBC).setProvider(""BC"").build());
    return  enveloped.getEncoded();
}

How do I code a very simple decryption function(no verify signing) to decryption my file ?
I do some research online, 1 of the sample code I google it is `RecipientId recId = new RecipientId();
    recId.setSerialNumber(cert.getSerialNumber());
    recId.setIssuer(cert.getIssuerX500Principal().getEncoded());

    RecipientInformationStore recipients = enveloped.getRecipientInfos();
    RecipientInformation recipient = recipients.get(recId);

    byte[] recData = recipient.getContent(key, ""BC"");`

However, the ""RecipientId recId = new RecipientId();"" is not working, error msg : Cannot instantiate the type RecipientId 
Thank you very much.
","I think there is some changes for the new API.
Below should be the correct one,
X509Certificate cert9 = (X509Certificate) keystore.getCertificate(""abc"");
    KeyTransRecipientId recId = new JceKeyTransRecipientId(cert9.getIssuerX500Principal(), cert9.getSerialNumber());

","1071","<java><encryption><pkcs#7>","0","0","1","2015-01-08 02:05:36","","0","","","","","2014-12-19 08:30:03",""
"24095929","PHP PKCS7 Padding bug","I am trying to apply PKCS7 padding to my PHP code. I derived my code from this gist
https://gist.github.com/Halama/5956871
The blocksize is expected to be 16 bytes.
The data is ""password"" with a length of 8 bytes.
After getting the pad, it will append it at the end of the data to be encrypted.
$blockSize = mcrypt_get_block_size(MCRYPT_RIJNDAEL_128, $thisMCRYPT_MODE_CBCmode);
$pad = $blockSize - (strlen($data) % $blockSize);
$data = $data . str_repeat(chr($pad), $pad);

The problem is there are (a lot) of instances that where the data fails to decrypt it.
Provided below are base64 encoded sample data. The first 16 bytes of the decoded sample represents the IV

working: cjg1RYWxlc8bDH2de43t0bv1ug36i8ayjWDQTela938= (pad length: 8)
not working: 9wWI+MyYj5ZVj2sC4xr7EgOsgNSoeTZW1yM8ddmqg18= (pad length:
  122)

The pad length mentioned above is retrieved using this
$pad = ord($data[strlen($data) - 1]);

I am using mcrypt_enrypt to encrypt the string ""password"". The key I am using for mcrypt is

lGbsVE+qVO1P2ue0iCjrTPMU5hKX9aHE7r1aUUeqFag=

","The padding/unpadding routine looks correct. What it does not provide is a safeguard against padding values higher than the block size.
If a ciphertext is decrypted using a wrong key, or if the ciphertext is corrupted (and for short sized ciphertext, even if the IV is incorrect), the result will be a (padded) plaintext that has seemingly random data. So the last byte can have any random value during the unpadding of the incorrect result.
To protect against such failures, use a MAC value over the ciphertext, preferably using a different key. For now, the issue is not likely to be the (un)padding routine.
","1057","<php><encryption><padding><mcrypt><pkcs#7>","0","0","2","2014-06-09 09:39:57","24117502","0","","","","","2014-06-07 09:49:19",""
"24095929","PHP PKCS7 Padding bug","I am trying to apply PKCS7 padding to my PHP code. I derived my code from this gist
https://gist.github.com/Halama/5956871
The blocksize is expected to be 16 bytes.
The data is ""password"" with a length of 8 bytes.
After getting the pad, it will append it at the end of the data to be encrypted.
$blockSize = mcrypt_get_block_size(MCRYPT_RIJNDAEL_128, $thisMCRYPT_MODE_CBCmode);
$pad = $blockSize - (strlen($data) % $blockSize);
$data = $data . str_repeat(chr($pad), $pad);

The problem is there are (a lot) of instances that where the data fails to decrypt it.
Provided below are base64 encoded sample data. The first 16 bytes of the decoded sample represents the IV

working: cjg1RYWxlc8bDH2de43t0bv1ug36i8ayjWDQTela938= (pad length: 8)
not working: 9wWI+MyYj5ZVj2sC4xr7EgOsgNSoeTZW1yM8ddmqg18= (pad length:
  122)

The pad length mentioned above is retrieved using this
$pad = ord($data[strlen($data) - 1]);

I am using mcrypt_enrypt to encrypt the string ""password"". The key I am using for mcrypt is

lGbsVE+qVO1P2ue0iCjrTPMU5hKX9aHE7r1aUUeqFag=

","solved it. the ""+"" signs in the base64 encoded data is being converted to spaces when transported through http thus resulting into different values.
What I did is the client encoded the binary data to base64 and passed it through urlencode() function. The PHP side handled the data by using rawurldecode so it will ignore the ""+"" signs.
","1057","<php><encryption><padding><mcrypt><pkcs#7>","0","0","2","2014-06-09 09:39:57","24117502","0","","","","","2014-06-07 09:49:19",""
"3090258","Signature Generation using PKCS#7 Specifications","I want to prepare a digital signature over some content using PKCS#7 specifications(only Signed Data). I am getting signer certificates by accessing SMART card device. I am using BouncyCastle as a provider in Java and using getEncoded method of CMSSignedData class but the output i am getting is not right and its not working. Can anybody tell me the correct procedure or some sample code to doing the same
","prepare a signedData using 
crypto.signText(""textTosign"",""ask"")

'byteArr' will be ur signedData it  will BASE64 encoded do decode it pass that to CMSSignedData
CMSSignedData csd = new CMSSignedData(byteArr);
CertStore cStore = csd.getCertificatesAndCRLs(""Collection"", ""BC"");
        SignerInformationStore signers = csd.getSignerInfos();
        Collection<SignerInformation> lstSigner = signers.getSigners();

","1045","<java><digital-signature><pkcs#7>","1","1","1","2010-10-28 05:54:41","","0","","134176","","2010-06-22 04:25:11","2010-06-22 04:23:15",""
"12465931","Encode PKCS7 in Google App Engine (python, passbook)","This question pertains to Passbook which is under NDA for the next few days, but this is a generic PKCS7 question.
I have a .p12 file that is exported from my keychain.  I am able to separate this into 2 pems using the following commands
openssl pkcs12 -in ""mycert.p12"" -clcerts -nokeys -out certificate.pem
openssl pkcs12 -in ""mycert.p12"" -nocerts -out key.pem

The next step is to use this key and certificate to create a signed PKCS7 file.  This is easy to do with openssl:
openssl smime -binary -sign \
    -signer certificate.pem -inkey key.pem \
    -in <datafile> -out signature \
    -outform DER

The question is, what is the best way to do this in Google App Engine, assuming I have the certificate and key?  Unfortunately I'm a little new to cryptography, but I've been googling around and found PyCrypto and keyczar.  Is there an accepted way to do this on App Engine, or will I need to write something?  Any recommendations on which package to start with?
I know that openssl is not available on AppEngine, but PyCrypto is if you use python 2.7, right?  And I've seen posts of people getting keyczar to work with it.  I have not been able to find a simple way of generating PKCS7-encoded data given the key and certificate, though.
Thanks in advance for any guidance.
","Here's a way using M2Crypto taken from https://github.com/devartis/passbook
def passwordCallback(*args, **kwds):
    return password

smime = SMIME.SMIME()
smime.load_key('key.pem', 'certificate.pem', callback=passwordCallback)        
pk7 = smime.sign(SMIME.BIO.MemoryBuffer(manifest), flags=SMIME.PKCS7_DETACHED | SMIME.PKCS7_BINARY)                
pem = SMIME.BIO.MemoryBuffer()
pk7.write(pem)
# convert pem to der
der = ''.join(l.strip() for l in pem.read().split('-----')[2].splitlines()).decode('base64')        

open('signature', 'w').write(der)

","1034","<python><google-app-engine><encryption><pkcs#7><passbook>","3","1","1","2012-10-09 01:21:20","","1","2","","","","2012-09-17 19:31:41",""
"32048703","PKCS#7 signature verifies with OpenSSL, but not with M2Crypto","I have a signed PKCS#7 structure data-signed.pem:
$ openssl smime -sign -binary -in data.txt -inkey key.pem -outform pem -out p7.pem -signer cert.pem

It verifies successfully via OpenSSL command line:
$ openssl smime -verify -CAfile cert.pem -content data.txt -in p7.pem -inform pem
[...]
Verification successful

But the same operation (IMO) fails with M2Crypto:
$ python
>>> from M2Crypto import SMIME, X509, BIO
>>> sm_obj = SMIME.SMIME()
# The certificate is self-signed, so I add it to both
# trusted CA store and certificate stack:
>>> x509 = X509.load_cert('cert.pem')
>>> sk = X509.X509_Stack()
>>> sk.push(x509)
>>> sm_obj.set_x509_stack(sk)
>>> st = X509.X509_Store()
>>> st.load_info('cert.pem')
>>> sm_obj.set_x509_store(st)
# Now the actual verification:
>>> p7 = SMIME.load_pkcs7('p7.pem')
>>> data_bio = BIO.MemoryBuffer('data.txt')
>>> sm_obj.verify(p7, data_bio)
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""/usr/local/lib/python2.7/dist-packages/M2Crypto-0.22.3-py2.7-linux-i686.egg/M2Crypto/SMIME.py"", line 217, in verify
    blob = m2.pkcs7_verify1(p7, self.x509_stack._ptr(), self.x509_store._ptr(), data_bio._ptr(), flags)
M2Crypto.SMIME.PKCS7_Error: digest failure

If I create a non-detached signature, it verifies successfully:
$ openssl smime -sign -nodetach -binary -in data.txt -inkey key.pem -outform pem -out data-nodetach-signed.pem -signer cert.pem
$ python
[...]
>>> p7 = SMIME.load_pkcs7('data-nodetach-signed.pem')
>>> content = sm_obj.verify(p7)
>>>

How to use M2Crypto verification with detached signature?
","There was a silly mistake in what I was doing with M2Crypto: 
>>> data_bio = BIO.MemoryBuffer('data.txt')

This, of course, does not read file 'data.txt', but reads the string 'data.txt', which does not verify. The correct line is
>>> data_bio = BIO.openfile('data.txt')

","987","<python><openssl><digital-signature><pkcs#7><m2crypto>","0","1","1","2015-10-16 17:54:02","33176668","0","","3608247","","2015-10-15 19:28:02","2015-08-17 11:01:50",""
"34197756","Validate pkcs7 SignedData by Bouncy Castle in Java","I am working on an implementation of C# SignedCms functionality in Java.
I have a pkcs7 SignedData (see my attachement: https://www.dropbox.com/s/yivani7dvh98wpa/SignedData.bin?dl=0), it can be validated in C#:
    //signed data is loaded from my attached file.
    bool VerifyPKCS7(byte[] signedData)
    {
        try
        {
            SignedCms signedCms = new SignedCms();
            signedCms.Decode(signedData);

            signedCms.CheckSignature(true);

            return true;
        }
        catch
        {

        }

        return false;
    }

But it can't be validated using Bouncy Castle libs(bcprov-jdk15on-153.jar, bcpkix-jdk15on-153.jar) in Java:
  //encapSigData is loaded from my attached file.      
  CMSSignedDataParser     sp = new CMSSignedDataParser(new JcaDigestCalculatorProviderBuilder().setProvider(""BC"").build(), encapSigData);

  sp.getSignedContent().drain();

  Store                   certStore = sp.getCertificates();
  SignerInformationStore  signers = sp.getSignerInfos();

  Collection              c = signers.getSigners();
  Iterator                it = c.iterator();

  while (it.hasNext())
  {
      SignerInformation   signer = (SignerInformation)it.next();
      Collection          certCollection = certStore.getMatches(signer.getSID());

      Iterator        certIt = certCollection.iterator();
      X509CertificateHolder cert = (X509CertificateHolder)certIt.next();

      System.out.println(""verify returns: "" + signer.verify(new JcaSimpleSignerInfoVerifierBuilder().setProvider(""BC"").build(cert)));
  }

I got a exception at the first code line(CMSSignedDataParser constructor):
java.lang.ClassCastException: org.bouncycastle.asn1.DERSequenceParser cannot be cast to org.bouncycastle.asn1.ASN1OctetStringParser
at org.bouncycastle.cms.CMSSignedDataParser.<init>(Unknown Source)
at org.bouncycastle.cms.CMSSignedDataParser.<init>(Unknown Source)
at org.bouncycastle.cms.CMSSignedDataParser.<init>(Unknown Source)

After some analyze, I find that the content of contentInfo in SignedData is a Sequence. It seems that bouncycastle can't accept a Sequence to be the content.
How can I get this SignedData to be validated using bouncycastle in Java?
","The issue here is that unlike a regular CMS message, this is really a PKCS7 one. Support for these has now been added to the bcpkix API in Bouncy Castle. 
You can find it in the latest beta at http://www.bouncycastle.org/betas 154b12 or later.
","981","<java><c#><validation><pkcs#7>","0","1","1","2015-12-15 23:44:07","34301574","0","","","","","2015-12-10 09:14:12",""
"21053935","PHP openssl_pkcs7_* needs files, security issue","I want to use these openssl_pkcs7_* functions to verify, sign, encrypt and decrypt mails.
I realized that these functions only accept filenames for the ""keyfile"", the certificate or the ""mail"" itself. 
Imho thats a big security issue since there could be issues causing temporary files created for these files not being deleted. In that case, system operators, e.g. could read the encrypted message because its somewhere in the filesystem temporarily.
Now, I just want you guys to ask if any of you has an idea how I could ""fake"" a file on linux. e.g. using some /dev/ device like /dev/stdin or something like that. Any idea? Would be awesome. 
These ""files"" should be read- and writable by ""www-data"".
Hope you guys have some amazing ideas for me.
With best regards,
Max
EDIT: ""tmpfile"" is a physically located file, there is no 100% guarantee of deletion tho.
EDIT2: Well, I am actually thinking about creating a socket (AF_UNIX and a socket-File) and let openssl write to it since its executed from the same process. But I dont get this to work, any suggestions?
","It's not very elegant, but you could use ob_start and stream wrappers to trick openssl_pkcs7_decrypt to not output a file.
function pkcs7_decrypt_in_mem($infile, $cert, $key) {
    ob_start();
    $rtn = openssl_pkcs7_decrypt($infile, 'php://stdout', $cert, $key);
    $decrypted = ob_get_contents();
    ob_end_clean();

    if (!$rtn) { return FALSE; }
    return $decrypted;
}

The only file required to exist is $infile.  Both $cert and $key as passed by value, not by  file name.
","980","<php><openssl><pkcs#7><pkcs#12>","2","3","2","2014-09-07 00:42:31","21070408","3","","1328527","","2014-01-11 13:56:20","2014-01-10 20:36:33",""
"21053935","PHP openssl_pkcs7_* needs files, security issue","I want to use these openssl_pkcs7_* functions to verify, sign, encrypt and decrypt mails.
I realized that these functions only accept filenames for the ""keyfile"", the certificate or the ""mail"" itself. 
Imho thats a big security issue since there could be issues causing temporary files created for these files not being deleted. In that case, system operators, e.g. could read the encrypted message because its somewhere in the filesystem temporarily.
Now, I just want you guys to ask if any of you has an idea how I could ""fake"" a file on linux. e.g. using some /dev/ device like /dev/stdin or something like that. Any idea? Would be awesome. 
These ""files"" should be read- and writable by ""www-data"".
Hope you guys have some amazing ideas for me.
With best regards,
Max
EDIT: ""tmpfile"" is a physically located file, there is no 100% guarantee of deletion tho.
EDIT2: Well, I am actually thinking about creating a socket (AF_UNIX and a socket-File) and let openssl write to it since its executed from the same process. But I dont get this to work, any suggestions?
","
I  want to use these openssl_pkcs7_* functions to verify, sign, encrypt and decrypt mails.

The problem seems to be the choice of PHP's functions (or PHP's OpenSSL offerings). Perhaps you should use something else, like a library that provides what you need.

Here's what is really available from OpenSSL. From PKCS7_encrypt(3):
PKCS7 *PKCS7_encrypt(STACK_OF(X509) *certs, BIO *in, const EVP_CIPHER *cipher, int flags);

You use a BIO for the in-data, and that can be a memory BIO. There's no reason to write a disk file.
You have similar for PKCS7_decrypt(3):
int PKCS7_decrypt(PKCS7 *p7, EVP_PKEY *pkey, X509 *cert, BIO *data, int flags);

Now, for the keys. The keys can be read (and written) using BIOs too. That means they can use a memory bio. But I'm not sure how useful that would be since the keys have to be stored somewhere.
For the reference, see pem(3). There's almost too many functions to list:

PEM, PEM_read_bio_PrivateKey, PEM_read_PrivateKey,
  PEM_write_bio_PrivateKey, PEM_write_PrivateKey,
  PEM_write_bio_PKCS8PrivateKey, PEM_write_PKCS8PrivateKey,
  PEM_write_bio_PKCS8PrivateKey_nid, PEM_write_PKCS8PrivateKey_nid,
  PEM_read_bio_PUBKEY, PEM_read_PUBKEY, PEM_write_bio_PUBKEY,
  PEM_write_PUBKEY, PEM_read_bio_RSAPrivateKey, PEM_read_RSAPrivateKey,
  PEM_write_bio_RSAPrivateKey, PEM_write_RSAPrivateKey,
  PEM_read_bio_RSAPublicKey, PEM_read_RSAPublicKey,
  PEM_write_bio_RSAPublicKey, PEM_write_RSAPublicKey,
  PEM_read_bio_RSA_PUBKEY, PEM_read_RSA_PUBKEY,
  PEM_write_bio_RSA_PUBKEY, PEM_write_RSA_PUBKEY,
  PEM_read_bio_DSAPrivateKey, PEM_read_DSAPrivateKey,
  PEM_write_bio_DSAPrivateKey, PEM_write_DSAPrivateKey,
  PEM_read_bio_DSA_PUBKEY, PEM_read_DSA_PUBKEY,
  PEM_write_bio_DSA_PUBKEY, PEM_write_DSA_PUBKEY,
  PEM_read_bio_DSAparams, PEM_read_DSAparams, PEM_write_bio_DSAparams,
  PEM_write_DSAparams, PEM_read_bio_DHparams, PEM_read_DHparams,
  PEM_write_bio_DHparams, PEM_write_DHparams, PEM_read_bio_X509,
  PEM_read_X509, PEM_write_bio_X509, PEM_write_X509,
  PEM_read_bio_X509_AUX, PEM_read_X509_AUX, PEM_write_bio_X509_AUX,
  PEM_write_X509_AUX, PEM_read_bio_X509_REQ, PEM_read_X509_REQ,
  PEM_write_bio_X509_REQ, PEM_write_X509_REQ,
  PEM_write_bio_X509_REQ_NEW, PEM_write_X509_REQ_NEW,
  PEM_read_bio_X509_CRL, PEM_read_X509_CRL, PEM_write_bio_X509_CRL,
  PEM_write_X509_CRL, PEM_read_bio_PKCS7, PEM_read_PKCS7,
  PEM_write_bio_PKCS7, PEM_write_PKCS7,
  PEM_read_bio_NETSCAPE_CERT_SEQUENCE, PEM_read_NETSCAPE_CERT_SEQUENCE,
  PEM_write_bio_NETSCAPE_CERT_SEQUENCE, PEM_write_NETSCAPE_CERT_SEQUENCE


If you find something that offers more of OpenSSL, you might look into the CMS_* functions, too. They are easy to work with, too.
You can see examples of how to use them in <openssl dir>/demos/cms_enc.c, <openssl dir>/demos/cms_dec.c, <openssl dir>/demos/cms_sign.c and <openssl dir>/demos/cms_verify.c.
Two of the functions of interest are:
CMS_ContentInfo *CMS_encrypt(STACK_OF(X509) *certs, BIO *in, const EVP_CIPHER *cipher, unsigned int flags);

and 
int CMS_decrypt(CMS_ContentInfo *cms, EVP_PKEY *pkey, X509 *cert, BIO *dcont, BIO *out, unsigned int flags);

","980","<php><openssl><pkcs#7><pkcs#12>","2","0","2","2014-09-07 00:42:31","21070408","3","","1328527","","2014-01-11 13:56:20","2014-01-10 20:36:33",""
"21572886","Adding a certificate chain to a PKCS#7/CMS container in C#","I'm getting a PKCS#7/CMS container from a service I'm using that includes a user certificate and a signature.   
I am able to see the single certificate using SignedCms 
var cert = GetCertFromServer();

SignedCms signedCms = new SignedCms();
signedCms.Decode(cert);

// The user certificate
X509Certificate2 userCert = signedCms.Certificates[0];  

But I need to add the intermediate and root certificate to that chain. SignedCms.Certificates seems to be immutable, so I can't add the certificates directly to the collection and I am not able to replace the certificates collection the following way  
// root, inter and leaf certs are X509Certificate2 objects read from files
X509Certificate2[] certArr = new[] {rootCert, interCert, leafCert, userCert};

X509Certificate2Collection chain = new X509Certificate2Collection(certArr);

signedCms.Certificates = chain; // Error: No setter

Since SignedCms.Certificates has no setter. I haven't been able to find a way to create a new container from this one. I have also not had any luck finding info on how to do this in bouncy castle or any other library.   
I need to have a container containing the certificate chain and a signature and write the bytes from that container to a PDF file I'm signing. Is there a way to add certificates to the chain in the container? 
","I know it's been several years since this question was asked, but I recently ran into the same question.
For anyone with the same issue, the X509Certificate2Collection class has an Export method.
X509Certificate2[] certArr = certificates.ToArray();
X509Certificate2Collection chain = new X509Certificate2Collection(certArr);
byte[] result = chain.Export(X509ContentType.Pkcs7);

","978","<c#><x509certificate><x509><pkcs#7>","2","1","2","2019-08-19 14:54:58","","2","","1729265","","2014-02-05 09:50:34","2014-02-05 09:12:52",""
"21572886","Adding a certificate chain to a PKCS#7/CMS container in C#","I'm getting a PKCS#7/CMS container from a service I'm using that includes a user certificate and a signature.   
I am able to see the single certificate using SignedCms 
var cert = GetCertFromServer();

SignedCms signedCms = new SignedCms();
signedCms.Decode(cert);

// The user certificate
X509Certificate2 userCert = signedCms.Certificates[0];  

But I need to add the intermediate and root certificate to that chain. SignedCms.Certificates seems to be immutable, so I can't add the certificates directly to the collection and I am not able to replace the certificates collection the following way  
// root, inter and leaf certs are X509Certificate2 objects read from files
X509Certificate2[] certArr = new[] {rootCert, interCert, leafCert, userCert};

X509Certificate2Collection chain = new X509Certificate2Collection(certArr);

signedCms.Certificates = chain; // Error: No setter

Since SignedCms.Certificates has no setter. I haven't been able to find a way to create a new container from this one. I have also not had any luck finding info on how to do this in bouncy castle or any other library.   
I need to have a container containing the certificate chain and a signature and write the bytes from that container to a PDF file I'm signing. Is there a way to add certificates to the chain in the container? 
",".NET Core 3.0 has added SignedCms.AddCertificate.  You can't control the ordering (SignedCms.Encode() writes the data using the DER encoding rules, which dictates that this particular collection be sorted smallest first), but that's okay... X509Chain straightens it out.
SignedCms signedCms = new SignedCms();
signedCms.Decode(data);

signedCms.AddCertificate(leafCert);
signedCms.AddCertificate(interCert);
signedCms.AddCertificate(rootCert);

byte[] reencoded = signedCms.Encode();

","978","<c#><x509certificate><x509><pkcs#7>","2","0","2","2019-08-19 14:54:58","","2","","1729265","","2014-02-05 09:50:34","2014-02-05 09:12:52",""
"28129130","How to generate a pkcs7 signature envelope using pkcs11interop","To prevent the token password dialog, I usually use pkcs11interop to login to the usbkey and do data signature use capi or some COM+ control in C#.
But now I have a new usbkey. When I do signature the first time it still display the login dialog. This key's pkcs11 dll does not implement function C_SignUpdate, so when I try to do signature use SunPkcs11 and BouncyCastle in Java it throw a exception:
    public static void main(String args[]) throws Exception {
        String configName = ""d:\\javakey_My.cfg"";
        String PIN = ""123456"";
        Provider prv = new SunPKCS11(configName);
        Security.addProvider(prv);
        KeyStore credentials = KeyStore.getInstance(""PKCS11"");
        char[] pin = PIN.toCharArray();
        credentials.load(null, pin);

        Key key = (PrivateKey) credentials.getKey(""My Cert ID"", null);
        Certificate[] chain = credentials
                .getCertificateChain(""My Cert ID"");
        X509Certificate cert = (X509Certificate) chain[0];
        Store certs = new JcaCertStore(Arrays.asList(chain));
        // set up the generator
        CMSSignedDataGenerator gen = new CMSSignedDataGenerator();
        gen.addSignerInfoGenerator(new JcaSimpleSignerInfoGeneratorBuilder()
                .setProvider(""SunPKCS11-MyKey"").build(""SHA1withRSA"",
                        (PrivateKey) key, cert));
        gen.addCertificates(certs);
        // create the signed-data object
        CMSTypedData data = new CMSProcessableByteArray(
                ""Hello World!"".getBytes());
        CMSSignedData signed = gen.generate(data, false);
    }



Exception in thread ""main"" java.security.ProviderException: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_FUNCTION_NOT_SUPPORTED
	at sun.security.pkcs11.P11Signature.engineUpdate(P11Signature.java:436)
	at java.security.Signature$Delegate.engineUpdate(Unknown Source)
	at java.security.Signature.update(Unknown Source)
	at java.security.Signature.update(Unknown Source)
	at org.bouncycastle.operator.jcajce.JcaContentSignerBuilder$SignatureOutputStream.write(Unknown Source)
	at org.bouncycastle.cms.SignerInfoGenerator.generate(Unknown Source)
	at org.bouncycastle.cms.CMSSignedDataGenerator.generate(Unknown Source)
	at Tryit.main(Tryit.java:108)
Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_FUNCTION_NOT_SUPPORTED
	at sun.security.pkcs11.wrapper.PKCS11.C_SignUpdate(Native Method)
	at sun.security.pkcs11.P11Signature.engineUpdate(P11Signature.java:430)
	... 7 more



Is there any way to do a P7 signature use this key? by .Net or Java, without login dialog.
","","962","<signature><pkcs#7><pkcs#11><envelope>","1","","0","2015-01-24 19:04:51","","1","0","4490380","","2015-01-24 19:04:51","2015-01-24 18:59:02",""
"26281963","Decode PKCS#7 Signature via Windows API?","I wish to parse and display the contents of an Authenticode PKCS#7 signature as extracted from a Window PE binary's Security Directory.
I can use OpenSSL to do this on the command line with ""openssl pkcs7 -text -in extracted_signature.pks -inform DER -print_certs"", however I need to do this via C/C++ and the Windows API. I cannot use the OpenSSL library itself.
Using the CryptDecodeObjectEx API I can begin to decode the extracted signature:
CRYPT_CONTENT_INFO * content_info;
DWORD len;

CryptDecodeObjectEx(
    X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,
    PKCS_CONTENT_INFO,
    pointer_to_extracted_signature,
    length_of_extracted_signature,
    CRYPT_DECODE_ALLOC_FLAG,
    NULL,
    &content_info,
    &len
);

The above call completes successfully and content_info->pszObjId will have an OID of ""1.2.840.113549.1.7.2"" (szOID_RSA_signedData) however I am unable to find the structures needed to continue decoding. The available OID's for CryptDecodeObjectEx are listed here.
Can anybody please advise how to decode an Authenticode PKCS#7 signature via the Windows API?
","I have found the correct way to decode an Authenticode PKCS#7 signature is to use CryptQueryObject with the CERT_QUERY_OBJECT_BLOB and CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED flags set. Code snippit below for anybody who might need to do this.
CERT_BLOB cert_blob;
HCERTSTORE cert_store = NULL;
HCRYPTMSG cert_msg    = NULL;

cert_blob.pbData = pointer_to_extracted_signature;
cert_blob.cbData = length_of_extracted_signature;

CryptQueryObject(
    CERT_QUERY_OBJECT_BLOB,
    &cert_blob,
    CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED,
    CERT_QUERY_FORMAT_FLAG_BINARY,
    0,
    NULL,
    NULL,
    NULL,
    &cert_store,
    &cert_msg,
    NULL
);

PCCERT_CONTEXT next_cert = NULL;

while( (next_cert = CertEnumCertificatesInStore( cert_store, next_cert ) ) != NULL )
{
    // process next_cert...
}

","936","<windows><pkcs#7><authenticode>","1","1","1","2014-10-10 14:09:53","26301408","0","","","","","2014-10-09 15:11:45",""
"39143180","Generate valid CMS Signature file adding external PKCS#1 with Java","I'm generating CMS signature files with external PKCS#1 based on this thread. 
The first step is obtain the signed attributes from the original file to be signed in external application which is returning PKCS#1 byte array.
Then build standard org.bouncycastle.cms.SignerInfoGenerator with original file hash, signed data (PKCS#1) and certificate to add to CMS, and finally create the attached signature.
But when i'd tried to validate it using this code:
        String originalFile = ""aG9sYQ0KYXNkYXMNCg0KYWZzDQo="";
        String cmsSignedFile = ""MIAGCSqGSIb3DQEHAqCAMIACAQExDzANBg...j2Dwytp6kzQNwtXGO8QbWty1lOo8oYm+6LR8EWba3ikO/m9ol/G808vit9gAAAAAAAA=="";
        byte[] signedByte = DatatypeConverter.parseBase64Binary(cmsSignedFile);

        Security.addProvider(new BouncyCastleProvider());

        CMSSignedData s = new CMSSignedData(new CMSProcessableByteArray(DatatypeConverter.parseBase64Binary(originalFile)), signedByte);
        SignerInformationStore signers = s.getSignerInfos();
        SignerInformation signerInfo = (SignerInformation)signers.getSigners().iterator().next();

        FileInputStream fis = new FileInputStream(""C:/myCertificate.cer"");
        CertificateFactory cf = CertificateFactory.getInstance(""X.509"");
        X509Certificate cert = (X509Certificate)cf.generateCertificates(fis).iterator().next();

        boolean result = signerInfo.verify(new JcaSimpleSignerInfoVerifierBuilder().setProvider(""BC"").build(cert.getPublicKey())); 
        System.out.println(""Verified: ""+result);

I get Verified: false
I'm adding Content Type, Signing time, Message digest and OCSP as signed attributes and TSP Token as unsigned attribute (I'm not sure if this is right).
I'm also trying to recover data from CMS signature, using the code below:
        //load cms signed file with attached data
        CMSSignedData cms = new CMSSignedData(FileUtils.readFileToByteArray(new File(""C:/tmp/tempFile1864328163858309463.cms"")));

        System.out.println(cms.getSignerInfos().getSigners().iterator().next().getDigestAlgorithmID().getAlgorithm().getId());
        System.out.println(Hex.encodeHexString(cms.getSignerInfos().getSigners().iterator().next().getSignature()));

        //recover signer certificate info
        Store certs = cms.getCertificates();
        Collection<X509CertificateHolder> col = certs.getMatches(null);
        X509CertificateHolder []h1 = col.toArray(new X509CertificateHolder[col.size()]);
        X509CertificateHolder firmante = h1[0];
        System.out.println(firmante.getSubject());
        System.out.println(h1[1].getSubject());
        SignerInformation sinfo = cms.getSignerInfos().getSigners().iterator().next();

        //recover OCSP information
        //THIS FAILS :(
//          Store infocspbasic = cms.getOtherRevocationInfo(OCSPObjectIdentifiers.id_pkix_ocsp_basic);
//          Object basic = infocspbasic.getMatches(null).iterator().next();


        //recover signing time
        if (sinfo.getSignedAttributes() != null) {

            Attribute timeStampAttr = sinfo.getSignedAttributes().get(PKCSObjectIdentifiers.pkcs_9_at_signingTime);
            ASN1Encodable attrValue = timeStampAttr.getAttrValues().getObjectAt(0);

            final Date signingDate;
            if (attrValue instanceof ASN1UTCTime) {
                ASN1UTCTime time =  ASN1UTCTime.getInstance(attrValue);
                Date d = time.getDate();
                System.out.println(""ASN1UTCTime:"" + d);
            } else if (attrValue instanceof Time) {
                signingDate = ((Time) attrValue).getDate();
            } else if (attrValue instanceof ASN1GeneralizedTime) {
                System.out.println(""ASN1GeneralizedTimeASN1GeneralizedTime"");
            } else {
                signingDate = null;
            }
        }


        //recover timestamp TOken
        //unsigned attributes are null :(
        if (sinfo.getUnsignedAttributes() != null) {

            Attribute timeStampAttr = sinfo.getUnsignedAttributes().get(PKCSObjectIdentifiers.id_aa_signatureTimeStampToken);

            for (ASN1Encodable value : timeStampAttr.getAttrValues().toArray()) {
                TimeStampToken token = new TimeStampToken(new CMSSignedData(value.toASN1Primitive().getEncoded()));
                System.out.println(token.getTimeStampInfo().getGenTime());
            }

        }

But I can't retrieve OCSP response nor TSP Token information. Additionally I've downloaded this viewer software to help verify it:

Any help would be very appreciated.
","I found a project named j4sign which implements CMS signature with external PKCS#1. The link goes to the project's forum where I posted the code sample using their classes and the final correction to make the validation works.
","889","<java><digital-signature><bouncycastle><pkcs#7><pkcs#1>","2","0","1","2016-09-14 07:49:00","39485132","0","","-1","","2017-05-23 11:51:44","2016-08-25 10:44:51",""
"52757037","How to generate PKCS#7 signature from digest?","I want to sign the pdf using pdf digest. I have created the hash using below code,
byte[] buffer = new byte[1024];
int numOfBytesRead =0;
MessageDigest md = null;
md = MessageDigest.getInstance(""SHA256"",""BC"");
while((numOfBytesRead = content.read(buffer)) != -1 ){
     md.update(buffer, 0, numOfBytesRead);
}
byte[] digest = md.digest();

At the end I need to attach this signature to my pdf. I have found one solution Create pkcs7 signature from file digest, but the algorithm used in the link is SHA256withRSA. My privatekey is genearted using EC algorithm and I need to use SHA256withECDSA.Is it possible to just sign the Hash using SHA256withECDSA and attach the signature to the pdf using PDFBox ExternalSigning Interface.
","I tried below code still the pdf says Signature is invalid. Can you please check the code,
System.out.println(""Hash Signing started"");
    List<Certificate> certList = getFormatCertificate(strCertificate);
    PrivateKey privateKey;
    CMSSignedData s = null;
    Security.addProvider(new BouncyCastleProvider());
    byte[] signature = null;
    try {
        privateKey = loadPrivateKey(strPrivatekey);
        byte[] buffer = new byte[1024];
        int numOfBytesRead =0;
        MessageDigest md = null;
        md = MessageDigest.getInstance(""SHA256"",""BC"");
        while((numOfBytesRead = content.read(buffer)) != -1 ){
            md.update(buffer, 0, numOfBytesRead);
        }
        byte[] digest = md.digest();

        // Separate signature container creation step
        JcaCertStore certs = new JcaCertStore(certList);

        CMSSignedDataGenerator gen = new CMSSignedDataGenerator();

        Attribute attr = new Attribute(CMSAttributes.messageDigest,
                new DERSet(new DEROctetString(digest)));

        ASN1EncodableVector v = new ASN1EncodableVector();

        v.add(attr);

        SignerInfoGeneratorBuilder builder = new SignerInfoGeneratorBuilder(new BcDigestCalculatorProvider())
                .setSignedAttributeGenerator(new DefaultSignedAttributeTableGenerator(new AttributeTable(v)));

        //AlgorithmIdentifier sha256withECDSA = new DefaultSignatureAlgorithmIdentifierFinder().find(signerAlgorithm);

        CertificateFactory certFactory = CertificateFactory.getInstance(""X.509"");
        InputStream in = new ByteArrayInputStream(certList.get(certList.size()-1).getEncoded());
        X509Certificate cert = (X509Certificate) certFactory.generateCertificate(in);

        gen.addSignerInfoGenerator(builder.build(
                new JcaContentSignerBuilder(signerAlgorithm).build(privateKey),
                new JcaX509CertificateHolder(cert)));
        //DErse
//      gen.addSignerInfoGenerator(builder.build(
//              new JcaContentSignerBuilder(sha256withRSA,
//                      new DefaultDigestAlgorithmIdentifierFinder().find(sha256withRSA))
//                              .build(PrivateKeyFactory.createKey(privateKey.getEncoded())),
//              new JcaX509CertificateHolder(cert)));

        gen.addCertificates(certs);

        s = gen.generate(new CMSAbsentContent(), false);
        System.out.println(""Hash sign completed"");
        signature = s.getEncoded();// ConstructEcdsaSigValue(s.getEncoded());
    } catch (GeneralSecurityException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
        System.out.println(""GeneralSecurityException ::""+e.toString());
    } catch (OperatorCreationException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
        System.out.println(""OperatorCreationException ::""+e.toString());
    } catch (IOException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
        System.out.println(""IOException ::""+e.toString());
    } catch (CMSException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
        System.out.println(""CMSException ::""+e.toString());
    }finally{
        return signature;
    }

I have attached the pdf . Pdf file created
@Mkl/Tilman : I have created 2 pdf files, PDFA is signed using the digest of the pdf content with below code,
System.out.println(""Hash Signing started"");
    List<Certificate> certList = getFormatCertificate(strCertificate);
    PrivateKey privateKey;
    CMSSignedData s = null;
    Security.addProvider(new BouncyCastleProvider());
    byte[] signature = null;
    try {
        privateKey = loadPrivateKey(strPrivatekey);

        /*byte[] buffer = new byte[1024];
        int numOfBytesRead =0;
        MessageDigest md = null;
        //md = MessageDigest.getInstance(""SHA256"",""BC"");
        md = MessageDigest.getInstance(""SHA-256"");
        while((numOfBytesRead = content.read(buffer)) != -1 ){
            md.update(buffer, 0, numOfBytesRead);
        }
        byte[] digest = md.digest();*/
        MessageDigest md = MessageDigest.getInstance(""SHA256"", ""BC"");
        byte[] digest = md.digest(IOUtils.toByteArray(content));

        // Separate signature container creation step
        JcaCertStore certs = new JcaCertStore(certList);

        CMSSignedDataGenerator gen = new CMSSignedDataGenerator();

        Attribute attr = new Attribute(CMSAttributes.messageDigest,
                new DERSet(new DEROctetString(digest)));

        ASN1EncodableVector v = new ASN1EncodableVector();

        v.add(attr);

        SignerInfoGeneratorBuilder builder = new SignerInfoGeneratorBuilder(new BcDigestCalculatorProvider())
                .setSignedAttributeGenerator(new DefaultSignedAttributeTableGenerator(new AttributeTable(v)));

        //AlgorithmIdentifier sha256withECDSA = new DefaultSignatureAlgorithmIdentifierFinder().find(signerAlgorithm);

        CertificateFactory certFactory = CertificateFactory.getInstance(""X.509"");
        InputStream in = new ByteArrayInputStream(certList.get(certList.size()-1).getEncoded());
        X509Certificate cert = (X509Certificate) certFactory.generateCertificate(in);

        gen.addSignerInfoGenerator(builder.build(
                new JcaContentSignerBuilder(signerAlgorithm).build(privateKey),
                new JcaX509CertificateHolder(cert)));
        //DErse
//      gen.addSignerInfoGenerator(builder.build(
//              new JcaContentSignerBuilder(sha256withRSA,
//                      new DefaultDigestAlgorithmIdentifierFinder().find(sha256withRSA))
//                              .build(PrivateKeyFactory.createKey(privateKey.getEncoded())),
//              new JcaX509CertificateHolder(cert)));

        gen.addCertificates(certs);

        s = gen.generate(new CMSAbsentContent(), false);
        System.out.println(""Hash sign completed"");
        signature = s.getEncoded();// ConstructEcdsaSigValue(s.getEncoded());
    } catch (GeneralSecurityException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
        System.out.println(""GeneralSecurityException ::""+e.toString());
    } catch (OperatorCreationException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
        System.out.println(""OperatorCreationException ::""+e.toString());
    } catch (IOException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
        System.out.println(""IOException ::""+e.toString());
    } catch (CMSException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
        System.out.println(""CMSException ::""+e.toString());
    }finally{
        return signature;
    }

PDFA 
PDFB is created with the same private key and certificate, but instead of digest I am using pdf document content directly which gives me valid signed pdf, PDFB code below,
SignatureInterface signatureInterface = new SignatureInterface() {
                    @SuppressWarnings(""rawtypes"")
                    @Override
                    public byte[] sign(InputStream content) throws IOException {
                        try {
                            byte[] certificateByte = null;

                            Store certs = new JcaCertStore(certificates);

                            //PAdES - PDF Advanced Electronic Signature
                            //ESS - Enhanced Security Services
                            //ASN1 - Abstract Syntax Notation One-standard interface description language for defining data structures that can be serialized and deserialized in a cross-platform way
                            // Generating certificate hash
                            MessageDigest md = MessageDigest.getInstance(""SHA-256"");
                            md.update(certificates.get(certificates.size()-1).getEncoded());
                            byte[] certHash = md.digest();
                            // Generating certificate hash ends
                            System.out.println(""Cert hash generated"");
                            //ESSCertIDv2 identifies the certificate from the hash
                            ESSCertIDv2 essCert1 =
                                    new ESSCertIDv2(new AlgorithmIdentifier(NISTObjectIdentifiers.id_sha256), certHash);
                            ESSCertIDv2[] essCert1Arr =
                                    {
                                            essCert1
                                    };
                            SigningCertificateV2 scv2 = new SigningCertificateV2(essCert1Arr);
                            Attribute certHAttribute =
                                    new Attribute(PKCSObjectIdentifiers.id_aa_signingCertificateV2, new DERSet(scv2));
                            ASN1EncodableVector v = new ASN1EncodableVector();
                            v.add(certHAttribute);

                            AttributeTable at = new AttributeTable(v);

                            //Create a standard attribute table from the passed in parameters - certhash
                            CMSAttributeTableGenerator attrGen = new DefaultSignedAttributeTableGenerator(at){
                                protected Hashtable createStandardAttributeTable(Map parameters)
                                {
                                    Hashtable result = super.createStandardAttributeTable(parameters);
                                    result.remove(CMSAttributes.signingTime);
                                    return result;
                                }
                            };
                            //PAdES-end
                            System.out.println(""CMSAttributeTableGenerator generated"");
                            SignerInfoGeneratorBuilder genBuild =
                                    new SignerInfoGeneratorBuilder(new BcDigestCalculatorProvider());
                            genBuild.setSignedAttributeGenerator(attrGen);
                            //Get single certificate
                            org.spongycastle.asn1.x509.Certificate certas1 = org.spongycastle.asn1.x509.Certificate.getInstance(ASN1Primitive.fromByteArray(certificates.get(certificates.size()-1).getEncoded()));
                            // ContentSigner interface creates SHA256withECDSA signer using PvtKey
                            ContentSigner sha1Signer = new JcaContentSignerBuilder(signerAlgorithm).build(privateKey);
                            //Creates SignerInfoGenerator using X.509 cert and ContentSigner
                            SignerInfoGenerator sifGen = genBuild.build(sha1Signer, new X509CertificateHolder(certas1));

                            // CMSSignedDataGenerator generates a pkcs7-signature message 
                            CMSSignedDataGenerator gen = new CMSSignedDataGenerator();

                            gen.addCertificates(certs);
                            gen.addSignerInfoGenerator(sifGen);
                            //Creates CMS message from PDF
                            CMSProcessableInputStream msg = new CMSProcessableInputStream(content);
                            //Generate a CMS Signed Data object which can be carrying a detached CMS signature
                            //msg - content to be signed
                            CMSSignedData signedData = gen.generate(msg, false);
                            System.out.println(""CMSSignedData is done"");
                            return signedData.getEncoded();
                        } catch (GeneralSecurityException e) {
                            throw new IOException(e);
                        } catch (CMSException e) {
                            throw new IOException(e);
                        } catch (OperatorCreationException e) {
                            throw new IOException(e);
                        }
                }

            };
            System.out.println(""CMSSignedData is done2"");
            PDDocument pdDocument =  PDDocument.load(inputfile);

            System.out.println(""pdDocument loaded"");
            pdDocument.addSignature(signature, signatureInterface);

PDFB
I think something is missing in the signing part of PDFA which I couldn't figure out.
","865","<android><digital-signature><bouncycastle><pdfbox><pkcs#7>","1","0","2","2018-10-15 15:19:21","","2","","1559247","","2018-10-11 10:11:45","2018-10-11 09:46:14",""
"52757037","How to generate PKCS#7 signature from digest?","I want to sign the pdf using pdf digest. I have created the hash using below code,
byte[] buffer = new byte[1024];
int numOfBytesRead =0;
MessageDigest md = null;
md = MessageDigest.getInstance(""SHA256"",""BC"");
while((numOfBytesRead = content.read(buffer)) != -1 ){
     md.update(buffer, 0, numOfBytesRead);
}
byte[] digest = md.digest();

At the end I need to attach this signature to my pdf. I have found one solution Create pkcs7 signature from file digest, but the algorithm used in the link is SHA256withRSA. My privatekey is genearted using EC algorithm and I need to use SHA256withECDSA.Is it possible to just sign the Hash using SHA256withECDSA and attach the signature to the pdf using PDFBox ExternalSigning Interface.
","There are several situations in which Adobe calls a signer's certificate invalid even though apparently it is valid; in the case at hand in particular:

Key usage or Extended key usage values not appropriate
PAdES signature misses an ESS signing-certificate-v2 attribute

Key usage or Extended key usage values not appropriate
This is based on the information the OP first published as an answer

I tried below code still the pdf says Signature is invalid. Can you please check the code,
[...]
I have attached the pdf . Pdf file created

Indeed, Adobe Reader says the signature is invalid, but look more closely:

It says ""Document has not been modified since this signature was applied"" - This means that the signature is mathematically correct!
The issue is that the ""Signer's certificate is invalid"", and the reason for this can be seen when digging into the signature property dialogues:

Thus, the problem is that your signer certificate is Not valid for usage.
This is due to the highlighted attribute, while the Key Usage Digital Signature is ok, the ""Extended key usage"" 1.3.6.1.5.5.8.2.2 (OID for IPSEC Protection) is not!
According to the Adobe Digital Signatures Guide for IT, Adobe Acrobat accepts only

one or more of the following Key usage values (if any)

nonRepudiation
signTransaction (11.0.09 only)
digitalSignature (11.0.10 and later)

and one or more of the following Extended key usage values (if any)

emailProtection
codeSigning
anyExtendedKeyUsage
1.2.840.113583.1.1.5 (Adobe Authentic Documents Trust)


Due to its IPSEC Protection extended key usage value, therefore, your certificate is not considered valid for signing PDF documents.
This probably only is an issue in legacy ISO 32000-1 signatures, probably not in PAdES signatures.
PAdES signature misses an ESS signing-certificate-v2 attribute
This is based on the information the OP first published as an answer

I have created 2 pdf files, PDFA is signed using the digest of the pdf content with below code,
[...]
PDFA
PDFB is created with the same private key and certificate, but instead of digest I am using pdf document content directly which gives me valid signed pdf, PDFB code below,
[...]
PDFB
I think something is missing in the signing part of PDFA which I couldn't figure out.

Here the main difference is not whether you explicitly calculate the hash yourself or allow it to be calculated implicitly, the main difference is that the signature in PDFB includes an ESS signing-certificate-v2 attribute while the one in PDFA does not. This attribute is generated between
//PAdES - PDF Advanced Electronic Signature

and
//PAdES-end

As the comments already hint, this is only necessary for PAdES signatures, not for legacy ISO 32000-1 ones. The answer the OP took his original code from referred to creating a legacy ISO 32000-1 signature (and, therefore, works alright) while the OP creates a PAdES signature.
The presence of an ESS signing certificate attribute is required by the PAdES specification ETSI EN 319 142-1: 

e) Generators shall use either the signing certificate or the signing-certificate v2 attribute, depending on the hash function, in accordance with ETSI EN 319 122-1.

(ETSI EN 319 142-1, section 6.3 PAdES baseline signatures)
It references the CAdES specification ETSI EN 319 122-1 which in turn requires

h) Requirement for SPO: ESS signing-certificate. The ESS signing-certificate attribute shall be used if the SHA-1 hash algorithm is used.
i) Requirement for SPO: ESS signing-certificate-v2. The ESS signing-certificate-v2 attribute shall be used when another hash algorithms than SHA-1 is used.

(ETSI EN 319 122-1, section 6.3 Requirements on components and services)
","865","<android><digital-signature><bouncycastle><pdfbox><pkcs#7>","1","1","2","2018-10-15 15:19:21","","2","","1559247","","2018-10-11 10:11:45","2018-10-11 09:46:14",""
"31763647","why doesn't message signed with openssl_pkcs7_sign validate with openssl_pkcs7_verify?","The signing code is based off of the example at http://php.net/openssl-pkcs7-sign. The private key corresponds to the public key in the cert. The cert is valid from one year ago to Dec 31, 9999, so the date range isn't an issue.
Does the key usage extension need to be set? And if that is the issue then to what does it need to be set? And if that's not the case then what exactly do I need to be doing to get this to work?
Here's my code:
<?php
$data = <<<EOD

You have my authorization to spend $10,000 on dinner expenses.

The CEO
EOD;
// save message to file
$fp = fopen(""msg.txt"", ""w"");
fwrite($fp, $data);
fclose($fp);

$key = '-----BEGIN RSA PRIVATE KEY-----
MIICXQIBAAKBgQCzJV1Z0UKXLkl9TrhuRR9ndtf+UpLyxduWffFiDXsruojd7B6A
XAdsnyTH+/fDpBDYBmpwnHRkh2R0OQ/0tpN6ShFcZDuBLMoNuqP3VhJZn01bjpeq
TO3Np8zYSHUrGcMv+h/f/HG1o8kKndWbAQrzj0DUOrn0Di336mULscF/gwIDAQAB
AoGACNnhwNxL8/g/fUd0aU5U/OGsTk56IDCSZt8WHAgae9CdjolqAGGLpFxAjvju
BuaGRoYaoDG6tnTSC8P9+9NBegYfzh4G2aYKtt67Qd0wgxZtIMwQjBrxPxWDEh6L
u3KkxcsA6vDuuGi7QGIpDDDvHNdqEnDWbef7jxqb5AwU9yECQQDbdDwMIJbD6F++
IpLCrbwfyhb0JOmXEyMdfin052HhaV6o/ta8KHZrUrufDh9DM/wN8Sn6Mw6ZFJ8y
A0DLhdPbAkEA0Pq3NMRyzHhMT4Jz4NfdTilbmElPsXpeG3ONd54St58y5WQ+E2f5
iC6/yG4d0YB93g6HtaB0DRjJSkAPhs4neQJBAL/zz4IcD0OUwgohW5WFOYPk1GcA
0oEecByf+jsJGIh+DhprrZAvJEWDvDDHvXiew92+ECWU+zPS4dxxE//xMvkCQQCr
7soSSNnmLcci10I9J3x1FQO9y/scGoAYd75ZPp1Jo1n9bra/wpiDGWtCHI690cg8
jJnMraEtMUpSo1fi4fOJAkBnX2woZpZvGWSTwswqGAlh1iz9+ekjY2V8TTVKcfX3
H2tHvg27KE2r/7S1N+MEcpJBF5S/zXo4hwLzrLzG3z6Y
-----END RSA PRIVATE KEY-----';

$cert = '-----BEGIN CERTIFICATE-----
MIIBwzCCASygAwIBAgIUP7VZQpJYe8YHW4Fdd+FaukIezEcwDQYJKoZIhvcNAQEF
BQAwHjEcMBoGA1UECgwTcGhwc2VjbGliIGRlbW8gY2VydDAeFw0xNTA4MDExNjA3
NDNaFw0xNjA4MDExNjA3NDNaMB4xHDAaBgNVBAoME3BocHNlY2xpYiBkZW1vIGNl
cnQwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALMlXVnRQpcuSX1OuG5FH2d2
1/5SkvLF25Z98WINeyu6iN3sHoBcB2yfJMf798OkENgGanCcdGSHZHQ5D/S2k3pK
EVxkO4Esyg26o/dWElmfTVuOl6pM7c2nzNhIdSsZwy/6H9/8cbWjyQqd1ZsBCvOP
QNQ6ufQOLffqZQuxwX+DAgMBAAEwDQYJKoZIhvcNAQEFBQADgYEArmQMGP2XPQTI
b0ppXGTlAqLGx979GDYeWglCLSlUYw3Ohr3Jonhs7KnhX04Y3ePVqIKuqSDvZz/D
C3Xgaiqmq0OsHtro7O0BamauKANON6bwq/YthrbeNBUoy7XZ86WsRZGSPlts7jdQ
tiqqWvr+oWxNb8WkxqVCshifjSOTlOQ=
-----END CERTIFICATE-----';


// encrypt it
openssl_pkcs7_sign(
    'msg.txt',
    'signed.txt',
    $cert,
    $key,
    array(
        'To' => 'joes@example.com',  // keyed syntax
        'From: HQ <ceo@example.com>',// indexed syntax
        'Subject"" => ""Eyes only'
    )
);

echo file_get_contents('signed.txt');

var_dump(openssl_pkcs7_verify('signed.txt', 0));

","This is expected behavior. You have a self-signed certificate. In your case you should use 
openssl_pkcs7_verify('signed.txt', PKCS7_NOVERIFY)

Then a self-signed certificate is acceptable.
","848","<php><openssl><pkcs#7><php-openssl>","3","2","1","2015-08-04 13:20:42","31810488","0","","","","","2015-08-01 16:18:01",""
"25343130","digitally sign pdf using itext with pkcs 7 files","I was using pkcs 12 (.pfx)for signing pdf document but how to achieve using pkcs 7 in C#.is there any sample or documentation for signing pdf using pkcs 7? I have p7b and cer file.
","You can't sign the data using a file in PKCS#7 format. This is because PKCS#7 contains only certificates without private keys, and to sign something you need to have a private key. 
","834","<pdf><itext><pkcs#7>","0","1","1","2014-08-20 10:07:55","25389873","0","0","47961","","2014-08-20 10:07:55","2014-08-16 19:19:59",""
"51812671","Instantiate java.security classes PrivateKey and X509Certificate from .key and .cer files","The original goal is:
Generate a https url where one of parameters is PKCS7 detached signature (RSA, SHA-256, UTF-8, BASE64).
What do I have:

private key (.key file begin with ""-----BEGIN RSA PRIVATE KEY-----"",
end like this ""kIng0BFt5cjuur81oQqGJgvU+dC4vQio+hVc+eAQTGmNQJV56vAHcq4v
-----END RSA PRIVATE KEY-----"")
self signed certificate (.cer file begin with ""-----BEGIN CERTIFICATE-----"",
end like this ""xwRtGsSkfOFL4ehKn/K7mgQEc1ZVPrxTC7C/g+7grbKufvqNmsYW4w==
-----END CERTIFICATE-----"")
data to sign

I found a java code that do almost what I need.
Method signature:
 public static String sign(PrivateKey privateKey,
                           X509Certificate certificate,
                           String data);

Now I'm stuck on how to get PrivateKey and X509Certficiate classes from given files.
I looked at many examples and got confused by these moments:
1.
KeyStore ks = KeyStore.getInstance(""pkcs12"");

or
PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(keyBytes);

Didn't find alternatives for PKCS7 standard.

A snippet of method that builds PrivateKey using bouncycastle library:
    inputStream = Files.newInputStream(privateKeyFile.toPath());
    reader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);
    pemParser = new PEMParser(reader);
    PEMDecryptorProvider decryptorProvider = new JcePEMDecryptorProviderBuilder()
            .setProvider(PROVIDER)
            .build(privateKeyPassword.toCharArray());
    PEMEncryptedKeyPair encryptedKeyPair = (PEMEncryptedKeyPair) pemParser.readObject();
    PEMKeyPair keyPair = encryptedKeyPair.decryptKeyPair(decryptorProvider);
    ...


In this example I have to provide some privateKeyPassword to PEMDecryptorProvider. What is the point of this password and where can I get it?
From keyPair value I can get both privateKey and publicKey.
What is the connection between publicKey from PEMKeyPair and my certificate ? Are they the same?
Any help will be appreciated, thanks!
","You don't need bouncycastle to read in the public key as Java's CertificateFactory directly supports the format of your .cer file.
The private key appears to be in a PKCS1 format that openssl can produce. If you wish to keep that format this answer shows how to extract the private key. Combining the two, here is a short snippet to read in a certificate and a private key.
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.openssl.PEMKeyPair;
import org.bouncycastle.openssl.PEMParser;
import org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;

import java.io.FileInputStream;
import java.io.FileReader;
import java.security.KeyPair;
import java.security.PrivateKey;
import java.security.Security;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;

public class Main {

    private static PrivateKey readPrivateKey(String filename) throws Exception {
        PEMParser pemParser = new PEMParser(new FileReader(filename));
        JcaPEMKeyConverter converter = new JcaPEMKeyConverter().setProvider(""BC"");
        PEMKeyPair pemKeyPair = (PEMKeyPair) pemParser.readObject();
        KeyPair kp = converter.getKeyPair(pemKeyPair);
        return kp.getPrivate();
    }

    private static X509Certificate readCertificate(String filename) throws Exception {
        CertificateFactory certificateFactory = CertificateFactory.getInstance(""X.509"");
        return (X509Certificate) certificateFactory.generateCertificate(new FileInputStream(filename));
    }

    public static void main(String[] args) throws Exception {
        Security.addProvider(new BouncyCastleProvider());
        PrivateKey privateKey = readPrivateKey(""myKey.priv"");
        X509Certificate cert = readCertificate(""mycert.cer"");
    }
}

","832","<java><encryption><bouncycastle><pkcs#7>","0","2","1","2018-08-23 18:26:35","","7","","13302","","2018-08-23 18:26:35","2018-08-12 20:40:19",""
"18915964","OpenSSL C program becomes non-responsive at PKCS7_sign function","I'm trying to run the following code to sign a self made certificate but the program becomes non-responsive at the following piece of code. It doesn't crash or anything but the cursor just sits there blinking.
if (sign) {
            if (!(pkcs7 = PKCS7_sign (cert, pkey, chain, in, 0))) { <----Here seems to be the problem
                fprintf (stderr, ""Error making the PKCS#7 object\n"");
                goto err;
            }
}

From debugging, all the variables seem to have values except chain, gdb prints out:
(gdb) p *chain
Cannot access memory at address 0x0

Here is the entire code:
#include <stdio.h>
#include <stdlib.h>
#include <openssl/crypto.h>
#include <openssl/err.h>
#include <openssl/pem.h>
#include <openssl/rand.h>

/*
* This code appearing before the main function is all for X509_STORE setup.
*/

/* these are defintions to make the example simpler */
#define CA_FILE ""CAfile.pem""
#define CA_DIR ""/etc/ssl""
#define CRL_FILE ""CRLfile.pem""

int
verify_callback (int ok, X509_STORE_CTX * stor)
{
    if (!ok)
        fprintf (stderr, ""Error: %s\n"",
                 X509_verify_cert_error_string (stor->error));
    return ok;
}

X509_STORE *
create_store (void)
{
    X509_STORE *store;
    X509_LOOKUP *lookup;

    /* create the cert store and set the verify callback */
    if (!(store = X509_STORE_new ())) {
        fprintf (stderr, ""Error creating X509_STORE_CTX object\n"");
        goto err;
    }
    X509_STORE_set_verify_cb_func (store, verify_callback);

    /* load the CA certificates and CRLs */
    if (X509_STORE_load_locations (store, CA_FILE, CA_DIR) != 1) {
        fprintf (stderr, ""Error loading the CA file or directory\n"");
        goto err;
    }

    if (X509_STORE_set_default_paths (store) != 1) {
        fprintf (stderr, ""Error loading the system-wide CA certificates\n"");
        goto err;
    }

    if (!(lookup = X509_STORE_add_lookup (store, X509_LOOKUP_file ()))) {
        fprintf (stderr, ""Error creating X509_LOOKUP object\n"");
        goto err;
    }

    if (X509_load_crl_file (lookup, CRL_FILE, X509_FILETYPE_PEM) != 1) {
        fprintf (stderr, ""Error reading the CRL file\n"");
        goto err;
    }

    /* set the flags of the store so that CRLs are consulted */
    X509_STORE_set_flags (store, X509_V_FLAG_CRL_CHECK |
                          X509_V_FLAG_CRL_CHECK_ALL);
    return store;

err:
    return NULL;
}

int
main (int argc, char *argv[])
{
    int sign;
    X509 *cert;
    EVP_PKEY *pkey;
    STACK_OF (X509) * chain = NULL;
    X509_STORE *store;
    PKCS7 *pkcs7;
    FILE *fp;
    BIO *in, *out, *pkcs7_bio;

    OpenSSL_add_all_algorithms ();
    ERR_load_crypto_strings ();
    /*seed_prng ();*/ /*seed_prng(1024);Borked DOONT LEAVE OUT*/


    --argc, ++argv;
    if (argc < 2) {
        fprintf (stderr,
                 ""Usage: sv (sign|verify) [privkey.pem] cert.pem ...\n"");
        goto err;
    }
    if (!strcmp (*argv, ""sign""))
        sign = 1;
    else if (!strcmp (*argv, ""verify""))
        sign = 0;
    else {
        fprintf (stderr,
                 ""Usage: sv (sign|verify) [privkey.pem] cert.pem ...\n"");
        goto err;
    }
    --argc, ++argv;

    /* setup the BIO objects for stdin and stdout */
    if (!(in = BIO_new_fp (stdin, BIO_NOCLOSE)) ||
            !(out = BIO_new_fp (stdout, BIO_NOCLOSE))) {
        fprintf (stderr, ""Error creating BIO objects\n"");
        goto err;
    }
    if (sign) {

        /* read the signer private key */
        if (!(fp = fopen (*argv, ""r"")) ||
                !(pkey = PEM_read_PrivateKey (fp, NULL, NULL, NULL))) {
            fprintf (stderr, ""Error reading signer private key in %s\n"", *argv);
            goto err;
        }
        fclose (fp);
        --argc, ++argv;
    } else {
        /* create the cert store and set the verify callback */
        if (!(store = create_store ()))
            fprintf (stderr, ""Error setting up X509_STORE object\n"");
    }

    /* read the signer certificate */
    if (!(fp = fopen (*argv, ""r"")) ||
            !(cert = PEM_read_X509 (fp, NULL, NULL, NULL))) {
        ERR_print_errors_fp (stderr);
        fprintf (stderr, ""Error reading signer certificate in %s\n"", *argv);
        goto err;
    }
    fclose (fp);
    --argc, ++argv;

    if (argc)
        chain = sk_X509_new_null ();
    while (argc) {
        X509 *tmp;

        if (!(fp = fopen (*argv, ""r"")) ||!(tmp = PEM_read_X509 (fp, NULL, NULL, NULL))) {
            fprintf (stderr, ""Error reading chain certificate in %s\n"", *argv);
            goto err;
        }
        sk_X509_push (chain, tmp);
        fclose (fp);
        --argc, ++argv;
    }

    if (sign) {
        if (!(pkcs7 = PKCS7_sign (cert, pkey, chain, in, 0))) {
            fprintf (stderr, ""Error making the PKCS#7 object\n"");
            goto err;
        }
        if (SMIME_write_PKCS7 (out, pkcs7, in, 0) != 1) {
            fprintf (stderr, ""Error writing the S/MIME data\n"");
            goto err;
        }
    } else {            /* verify */
        if (!(pkcs7 = SMIME_read_PKCS7 (in, &pkcs7_bio))) {
            fprintf (stderr, ""Error reading PKCS#7 object\n"");
            goto err;
        }
        if (PKCS7_verify (pkcs7, chain, store, pkcs7_bio, out, 0) != 1) {
            fprintf (stderr, ""Error writing PKCS#7 object\n"");
            goto err;
        } else
            fprintf (stdout, ""Certifiate and Signature verified!\n"");
    }

    return 0;
err:
    return -1;
}

If anybody has any ideas I would appreciate a comment!
","Just got it! Read here

""In OpenSSL 1.0.0 the certs, signcert and pkey parameters can all be
  NULL if the PKCS7_PARTIAL flag is set.""

Changed the code to:
if (sign) {
    if (!(pkcs7 = PKCS7_sign (cert, pkey, chain, in, PKCS7_PARTIAL))) {
        fprintf (stderr, ""Error making the PKCS#7 object\n"");
        goto err;
    }
}

And it's all good!
","821","<c><openssl><ssl-certificate><pkcs#7>","1","0","1","2013-09-20 11:59:49","18916263","0","","","","","2013-09-20 11:44:01",""
"35551815","Encrypt Data by using Digital signature in PKCS7 format with base 64 encoding","We are writing to validate user data by using API. For validating purpose, i need to pass two variable in post method call and Two variables are data and signature. So Digital signature of data in PKCS7 format with base 64 encoding.
For encryption they gave pem file to encrypt the data to generate signature in PKCS7 format with base 64 encoding.
So kindly advise me how to do this encryption and i am doing this project in PHP.
Also i have tried with following code but no results
$data = 'Test Data';
$key = file_get_contents(""certificate.pem"");
$fp = fopen(""msg.txt"", ""w"");
fwrite($fp, $data);
fclose($fp);
openssl_pkcs7_encrypt(""msg.txt"", ""enc.txt"", $key,[]);

Output:
MIME-Version: 1.0
Content-Disposition: attachment; filename=""smime.p7m""
Content-Type: application/x-pkcs7-mime; smime-type=enveloped-data; name=""smime.p7m""
Content-Transfer-Encoding: base64

MIICCgYJKoZIhvcNAQcDoIIB+zCCAfcCAQAxggG1MIIBsQIBADCBmDCBkDELMAkG
A1UEBhMCSU4xKjAoBgNVBAoTIWVNdWRocmEgQ29uc3VtZXIgU2VydmljZXMgTGlt
aXRlZDEdMBsGA1UECxMUQ2VydGlmeWluZyBBdXRob3JpdHkxNjA0BgNVBAMTLWUt
TXVkaHJhIFN1YiBDQSBmb3IgQ2xhc3MgMyBPcmdhbmlzYXRpb24gMjAxNAIDI2nL
MA0GCSqGSIb3DQEBAQUABIIBAEoKNU5O/NSlM62cVyq1CJ2qN6VA0kDRJaJVrUze
Tbd8OJZdzdcn3T+ZNh2myDRliW3B8Q+u4qZN8NZ1GM9e5OkmdxgWPD0wDhUZyMhu
796XOIdlZVLlyaNDr/QGYb4XxFrsJAqMXYFh3QPIATHhpaBGTnlB2fvFwtLSHocv
TzGT/UgL9aS3BiDh/S7sULsOXZoMNlHP4rnzRnjRsU+QJogtYnKBXGcKuzxeXRDL
dd7OxHTDgf4MFJcBdwdk6xwtbrVfyNCnIwzzFC4UwR5I/w6js+sBTg+EXAcCZqtG
rouNxu+SBkYMh63r+5LX0C8rL6xp6jzt49dgttKxh8Q+xc0wOQYJKoZIhvcNAQcB
MBoGCCqGSIb3DQMCMA4CAgCgBAiKcFDFzN93RIAQprj+fHrW8KA1XSSEY0fH3Q==

But it is not accepted from remote. Please help me
Thank you
","It seems to me that your pem file contains the certificate + a private key and you need to make a signature instead of encrypt the data.
Use therefore openssl_pkcs7_sign() instead of encrypt.
","820","<php><pkcs#7>","0","0","1","2016-02-22 13:03:37","","5","","3955758","","2016-02-22 12:28:31","2016-02-22 10:56:41",""
"16022688","How to encrypt CSR into PKCS7 using bouncycastle?","Hi, guys! My problem is next: I have the CSR certificate, certificate X509 of client and file .p12 with private key of CSR. I want to encrypt my CSR into PKCS7 and in future get it and verify.
In the next code I'm trying to read my CSR and put it in PKCS7 container:

        //get client X509 certificate
        FileInputStream fis = new FileInputStream(PATH+""//pkcs7-csr-cer//identity.cer"");
        X509Certificate certificate = (X509Certificate) CertificateFactory.getInstance(""X.509"").generateCertificate(fis);
        fis.close();

        //read my csr file and create pkcs10 based on it
        FileReader fileReader = new FileReader(csrfilename);
        PemReader pemReader = new PemReader(fileReader);
        PKCS10CertificationRequest pkcs10 = new PKCS10CertificationRequest(pemReader.readPemObject().getContent());

        //trying to encrypt the pkcs10 in pkcs7
        CMSEnvelopedDataGenerator generator = new CMSEnvelopedDataGenerator();
        generator.addKeyTransRecipient(certificate);

        CMSProcessable sdata = new CMSProcessableByteArray(pkcs10.getEncoded());
        CMSEnvelopedData envelopedData = generator.generate(sdata, CMSEnvelopedDataGenerator.AES256_CBC, ""BC"");
        bytes[] pkcs10Encrypted = envelopedData.getEncoded();


        //trying to get from encrypted csr
        CMSEnvelopedDataParser envDataParser = new CMSEnvelopedDataParser(enveloped);
        RecipientInformationStore recipients = envDataParser.getRecipientInfos();
        Collection envCollection = recipients.getRecipients();
        Iterator it = envCollection.iterator();
        RecipientInformation recipient = (RecipientInformation) it.next();
        byte[] result = recipient.getContent(privateKey, ""BC"");
        String base64Encoded = new String(Base64.encode(result));

And I receive exception:

Exception in thread ""main"" org.bouncycastle.cms.CMSException: bad padding in message.
    at org.bouncycastle.cms.KeyTransRecipientInformation.getSessionKey(Unknown Source)
    at org.bouncycastle.cms.KeyTransRecipientInformation.getContentStream(Unknown Source)
    at org.bouncycastle.cms.RecipientInformation.getContent(Unknown Source)


I googled and found same problem, but solution was incorrect private key, but my is true. 
Help, please. Maybe who knows some tutorials Bouncy Castle? Thanks!
","","801","<java><encryption><bouncycastle><pkcs#7><csr>","0","","0","2013-04-17 15:56:04","","2","","1809141","","2013-04-17 15:56:04","2013-04-15 18:53:14",""
"30565504","Converting decimal to hexadecimal byte in Java Card","I would like to convert a decimal (integer or short types) in Java to hexadecimal byte in a Java Card environment (only supports byte and short types and possibly int types).
Example:
int num = 254

Print out result:
0xFD

My current method of using switches and if-else to handle all 256 scenarios are totally inelegant and would like something much more elegant than simply switches or if-else.
The reason is I want to manually handle PKCS 5/7 paddings on the Java Card in the event the PKCS5 Ciphers are not available somehow as a fallback method.
","It slipped my mind that you could do:
if (num < 256) {
   return (byte) num;
}

That should have settled it for now considering the num which is the amount to pad is less than 256 for PKCS 5 and 7 padding as per RFC-1423, RFC-2898 and RFC-5652.
","793","<hex><javacard><pkcs#7><pkcs#5>","0","0","3","2016-01-21 03:40:39","30565788","0","","","","","2015-06-01 04:09:30",""
"30565504","Converting decimal to hexadecimal byte in Java Card","I would like to convert a decimal (integer or short types) in Java to hexadecimal byte in a Java Card environment (only supports byte and short types and possibly int types).
Example:
int num = 254

Print out result:
0xFD

My current method of using switches and if-else to handle all 256 scenarios are totally inelegant and would like something much more elegant than simply switches or if-else.
The reason is I want to manually handle PKCS 5/7 paddings on the Java Card in the event the PKCS5 Ciphers are not available somehow as a fallback method.
","There is a class named BCDTool inside javacardx.framework.math package. 

Method Summary
static short convertToBCD(byte[] hexArray, short bOff,short bLen, byte[] bcdArray, short outOff)
Converts the input hexadecimal data into BCD format.
static short convertToHex(byte[] bcdArray, short bOff, short bLen, byte[] hexArray, short outOff) 
Converts the input BCD data into hexadecimal format.
static short getMaxBytesSupported()
This method returns the largest value that can be used with the BCD utility functions.
static boolean   isBCDFormat(byte[] bcdArray,short bOff, short bLen) 
Checks if the input data is in BCD format.

Note that this package is optional and your card maybe or maybe not support it. 
","793","<hex><javacard><pkcs#7><pkcs#5>","0","0","3","2016-01-21 03:40:39","30565788","0","","","","","2015-06-01 04:09:30",""
"30565504","Converting decimal to hexadecimal byte in Java Card","I would like to convert a decimal (integer or short types) in Java to hexadecimal byte in a Java Card environment (only supports byte and short types and possibly int types).
Example:
int num = 254

Print out result:
0xFD

My current method of using switches and if-else to handle all 256 scenarios are totally inelegant and would like something much more elegant than simply switches or if-else.
The reason is I want to manually handle PKCS 5/7 paddings on the Java Card in the event the PKCS5 Ciphers are not available somehow as a fallback method.
","There is no such thing as an hexadecimal byte. In Java a byte consists of 8 bits. When viewed as a number these bits contain a 8 bit two-complement number from -128 to 127. Hexadecimals is a textual representation of values - such as the Java byte - for human consumption.
Integers are usually not supported on Java Card classic, so I'll just show how to convert short values to bytes.
If you are already sure that the short s contains a byte in the lower 8 bits then conversion is simple:
byte b = (byte) s;

if you are not sure you must decide if you want to allow. If you just care about the 8 lower bits: see above.
If you however want to have a positive number 0..255 stored in the byte, you can check using:
if (s < 0 || s > BYTE_MAX_UNSIGNED) {
    // do something nasty
}
byte b = (byte) s;

or for the negative values -128 to 127:
if (s < BYTE_MIN || s > BYTE_MAX) {
    // do something nasty
}
byte b = (byte) s;

Of course the values of the constants is:
private static final short BYTE_MAX = 0x7F;
private static final short BYTE_MIN = -0x80;
private static final short BYTE_MAX_UNSIGNED = 0xFF;

If you keep them private static final then these constants will be inlined into your bytecode by the converter.
As you can see the final byte encoding is identical for both cases. This is why two-complement is the default encoding in about every computer on the planet.
Note that regardless of the value of the short, the byte will hold a value from -128 to 127. If you want to convert the byte to a positive value for calculations, you can use:
short s = b & BYTE_MAX_UNSIGNED;

to get back a positive value from 0 to 255.
","793","<hex><javacard><pkcs#7><pkcs#5>","0","1","3","2016-01-21 03:40:39","30565788","0","","","","","2015-06-01 04:09:30",""
"40328927","Disable PKCS#7 padding on an AES cipher object?","i am programming a fuse file system and i've a poblem.
I am ciphering the data in the disk by using CBC AES. The problem is the padding. It is no problem when the size to cipher is for example 15 bytes because it adds 1 byte extra. The problem is that when i am trying to cipher 4096 bytes it also adds me 16 bytes of padd and it is fail for me. I do not know why it is adding padding because 4096 is multiple of 128 (size aes block). I need to modify my c code for say to openssl that only add padding when it will be neccesary but not always...
I know that if the plaintext is not multiple of 128 it is going to add padding. But why if not? What can i do?
Here my cipher code:
    int encrypt_data(unsigned char *plaintext, int plaintext_len, unsigned char *key,
                unsigned char *iv, unsigned char *ciphertext, int algorithm_pos)
{
        EVP_CIPHER_CTX *ctx;

        int len;

        int ciphertext_len;

        /* Create and initialise the context */
        if(!(ctx = EVP_CIPHER_CTX_new())) handleErrors();

        /* Initialise the encryption operation. IMPORTANT - ensure you use a key
         * and IV size appropriate for your cipher
         * In this example we are using 256 bit AES (i.e. a 256 bit key). The
         * IV size for *most* modes is the same as the block size. For AES this
         * is 128 bits */
        if(1 != EVP_EncryptInit_ex(ctx, ciphers[algorithm_pos].algorithm(), NULL, key, iv))
                handleErrors();

        /* Provide the message to be encrypted, and obtain the encrypted output.
         * EVP_EncryptUpdate can be called multiple times if necessary
         */
        if(1 != EVP_EncryptUpdate(ctx, ciphertext, &len, plaintext, plaintext_len))
                handleErrors();
        ciphertext_len = len;

        /* Finalise the encryption. Further ciphertext bytes may be written at
         * this stage.
         */
        if(1 != EVP_EncryptFinal_ex(ctx, ciphertext + len, &len)) handleErrors();
        ciphertext_len += len;

        /* Clean up */
        EVP_CIPHER_CTX_free(ctx);

        return ciphertext_len;
}

","See PKCS#7 padding. The reason for padding an exact multiple of the block size is there would be no way to tell if there was no padding so padding must either always or never be used. Consider if the data was 4096 bytes and the last byte was 0x01. Looks like one byte of padding but it isn't, it is part of the data.
But you should be using a disk sector encrypting mode such as XTS, XTS is only recommended for full-disk encryption. That is what it was designed for by the IEEE Standard 1619.
See Explanation of the XTS Encryption Mode.
Also NIST: The XTS-AES Mode for Confidentiality on Storage Devices
","774","<c><encryption><openssl><aes><pkcs#7>","1","3","2","2016-11-03 05:43:04","","1","","608639","","2016-11-03 05:43:04","2016-10-30 12:14:11","2016-11-03 05:46:32"
"40328927","Disable PKCS#7 padding on an AES cipher object?","i am programming a fuse file system and i've a poblem.
I am ciphering the data in the disk by using CBC AES. The problem is the padding. It is no problem when the size to cipher is for example 15 bytes because it adds 1 byte extra. The problem is that when i am trying to cipher 4096 bytes it also adds me 16 bytes of padd and it is fail for me. I do not know why it is adding padding because 4096 is multiple of 128 (size aes block). I need to modify my c code for say to openssl that only add padding when it will be neccesary but not always...
I know that if the plaintext is not multiple of 128 it is going to add padding. But why if not? What can i do?
Here my cipher code:
    int encrypt_data(unsigned char *plaintext, int plaintext_len, unsigned char *key,
                unsigned char *iv, unsigned char *ciphertext, int algorithm_pos)
{
        EVP_CIPHER_CTX *ctx;

        int len;

        int ciphertext_len;

        /* Create and initialise the context */
        if(!(ctx = EVP_CIPHER_CTX_new())) handleErrors();

        /* Initialise the encryption operation. IMPORTANT - ensure you use a key
         * and IV size appropriate for your cipher
         * In this example we are using 256 bit AES (i.e. a 256 bit key). The
         * IV size for *most* modes is the same as the block size. For AES this
         * is 128 bits */
        if(1 != EVP_EncryptInit_ex(ctx, ciphers[algorithm_pos].algorithm(), NULL, key, iv))
                handleErrors();

        /* Provide the message to be encrypted, and obtain the encrypted output.
         * EVP_EncryptUpdate can be called multiple times if necessary
         */
        if(1 != EVP_EncryptUpdate(ctx, ciphertext, &len, plaintext, plaintext_len))
                handleErrors();
        ciphertext_len = len;

        /* Finalise the encryption. Further ciphertext bytes may be written at
         * this stage.
         */
        if(1 != EVP_EncryptFinal_ex(ctx, ciphertext + len, &len)) handleErrors();
        ciphertext_len += len;

        /* Clean up */
        EVP_CIPHER_CTX_free(ctx);

        return ciphertext_len;
}

","
The problem is that when i am trying to cipher 4096 bytes it also adds me 16 bytes of padd and it is fail for me. I do not know why it is adding padding because 4096 is multiple of 128 (size aes block). 

As Zaph stated, PKCS#7 padding is being added. The padding is deterministic, so an exact multiple of 16 byts is also padded to ensure removal. Otherwise, how does a generalized algorithm know when (1) plain text ends on a 16-byte boundary, versus (2) plain text not ends on a 16-byte boundary and padded?
You can disable the padding behavior on the cipher object with EVP_CIPHER_CTX_ctrl and EVP_CIPHER_CTX_set_padding. EVP_CIPHER_CTX_set_padding is a macro'd version of EVP_CIPHER_CTX_ctrl. Here is what it looks like:
int EVP_CIPHER_CTX_set_padding(EVP_CIPHER_CTX *x, int padding);

From the man page:

EVP_CIPHER_CTX_set_padding() enables or disables padding. By default
  encryption operations are padded using standard block padding and the
  padding is checked and removed when decrypting. If the pad parameter
  is zero then no padding is performed, the total amount of data
  encrypted or decrypted must then be a multiple of the block size or an
  error will occur.



I know that if the plaintext is not multiple of 128 it is going to add padding. But why if not? What can i do?

Disable padding on your cipher context object. Here's how the library does it:
$ grep -IR EVP_CIPHER_CTX_set_padding *
CHANGES:  *) New function EVP_CIPHER_CTX_set_padding() this is used to
apps/enc.c:            EVP_CIPHER_CTX_set_padding(ctx, 0);
apps/speed.c:                EVP_CIPHER_CTX_set_padding(&ctx, 0);
crypto/cms/cms_pwri.c:    EVP_CIPHER_CTX_set_padding(&kekctx, 0);
crypto/evp/evp.h:int EVP_CIPHER_CTX_set_padding(EVP_CIPHER_CTX *c, int pad);
crypto/evp/evp_enc.c:int EVP_CIPHER_CTX_set_padding(EVP_CIPHER_CTX *ctx, int pad)
crypto/evp/evp_test.c:        EVP_CIPHER_CTX_set_padding(&ctx, 0);
crypto/evp/evp_test.c:        EVP_CIPHER_CTX_set_padding(&ctx, 0);

","774","<c><encryption><openssl><aes><pkcs#7>","1","0","2","2016-11-03 05:43:04","","1","","608639","","2016-11-03 05:43:04","2016-10-30 12:14:11","2016-11-03 05:46:32"
"47884782","How to create an x-pkcs7-signature s/mime message?","I am trying to create x-pkcs7-signature s/mime messages in C#. I've been experimenting with Mimekit and can only make pkcs7 messages.
Does anyone know what I need to do to create x-pkcs messages or point me to some examples?
Regards
","There are 2 different ways to sign a message using S/MIME:

application/[x-]pkcs7-mime; smime-type=signed-data
application/[x-]pkcs7-signature

To sign the first way, do this:
var signer = new MailboxAddress ("""", ""signer@example.com"");
var signed = ApplicationPkcs7Mime.Sign (signer, DigestAlgorithm.Sha256, entity);

The other way is done like this:
using (var ctx = new WindowsSecureMimeContext ()) {
    var signer = new MailboxAddress ("""", ""signer@example.com"");
    var signed = MultipartSigned.Sign (ctx, signer, DigestAlgorithm.Sha256, entity);
}

In both cases, you can also use a MimeKit.Cryptography.CmsSigner instead of a MailboxAddress. You could also use a SecureMailboxAddress if you know the fingerprint of the certificate.
","769","<c#><pkcs#7><smime>","4","0","1","2017-12-19 20:47:04","","1","","98579","","2017-12-19 10:53:17","2017-12-19 10:22:55",""
"30264339","Saving one or multiple X509Certificates to a PKCS#7 File / Container?","I have multiple X509Certificates. Now I want to save one or more of them into a PKCS#7 File / Container with Java.
I could read in one or more Certificates from a PKCS#7 file, but I don't know how to write them to a PKCS#7 file. I only know that the data in this file is PEM encoded and this data is within the tags --- BEGINN PKCS7 --- and --- END PKCS7 ---.
","At first, read the whole RFC for PKCS#7/CMS for better understanding. Please follow this RFC link. 

For easy implementation use bouncycastle library. Now, There are different types of PKCS#7.CMS data (like signedData, envelopedData etc.). Lets take, you want to use signeData format. Then, you need to generate CMSSignedData data. For that, you need to prepare private key and Certificate chain. Here, I am assuming, you already have those. Now prepare CMSProcessableByteArray.

Sample code for CMSProcessableByteArray:
CMSProcessableByteArray msg = new CMSProcessableByteArray(""Hello World"".getBytes());

hen declare CMSSignedDataGenerator and add signerInfo and certificates.
CMSSignedDataGenerator gen = new CMSSignedDataGenerator();
gen.addSignerInfoGenerator(new JcaSignerInfoGeneratorBuilder(......));
gen.addCertificates(certs);

Then generate CMSSignedData with CMSSignedDataGenerator and CMSProcessableByteArray.
CMSSignedData cmsData = gen.generate(msg, true);

Now, there are two formats for you to write the file in: Pem and Der. You want to write in pem encoded. So then, Take the whole data in a ContentInfo.
ContentInfo ci = ContentInfo.getInstance(ASN1Object.fromByteArray(signedData));

Now, use Pemwriter to write the contentInfo object in p7b format. Open the file and see user certificates.
PEMWriter pemWriter = new PEMWriter(new FileWriter(""Demo-CMS.p7b""));
pemWriter.writeObject(obj);
pemWriter.flush();
pemWriter.close();

","763","<java><export><x509certificate><pkcs#7>","-1","1","1","2015-05-26 11:19:50","30457076","0","","2422776","","2015-05-18 07:04:14","2015-05-15 16:23:35",""
"42300197","Reading the certificate of PKCS#7 Signed Data using pure python","There is already a lot of questions out there but the problem is, none of them have sufficient answers how to do it, especially when using python3.
Basically, I want to read JAR/APK certificates, like this one: Link to ASN1 Decoder, with Android Test Signing Key
There are now several alternatives:

pyasn1: seems to work, but only can parse the raw ASN.1 format
M2Crypto: only works on py2
Chilkat: Not free, although CkCert seems to be free
cryptography: Can not load the certificate, as the X509 certificate is inside the PKCS#7 container

I found a way to use pyasn1 to unpack the cert from the pkcs#7 message, then use cryptography to read it:
from pyasn1.codec.der.decoder import decode
from pyasn1.codec.der.encoder import encode
from cryptography import x509
from cryptography.hazmat.backends import default_backend

cdata = open(""CERT.RSA"", ""rb"").read()
cert, rest = decode(cdata)
# The cert should be located there
realcert = encode(cert[1][3])
realcert = realcert[2 + (realcert[1] & 0x7F) if realcert[1] & 0x80 > 1 else 2:]  # remove the first DER identifier from the front
x509.load_der_x509_certificate(realcert, default_backend())

which gives
<Certificate(subject=<Name([<NameAttribute(oid=<ObjectIdentifier(oid=2.5.4.6, name=countryName)>, value='US')>, <NameAttribute(oid=<ObjectIdentifier(oid=2.5.4.8, name=stateOrProvinceName)>, value='California')>, <NameAttribute(oid=<ObjectIdentifier(oid=2.5.4.7, name=localityName)>, value='Mountain View')>, <NameAttribute(oid=<ObjectIdentifier(oid=2.5.4.10, name=organizationName)>, value='Android')>, <NameAttribute(oid=<ObjectIdentifier(oid=2.5.4.11, name=organizationalUnitName)>, value='Android')>, <NameAttribute(oid=<ObjectIdentifier(oid=2.5.4.3, name=commonName)>, value='Android')>, <NameAttribute(oid=<ObjectIdentifier(oid=1.2.840.113549.1.9.1, name=emailAddress)>, value='android@android.com')>])>, ...)>

Is there no other way to have it clean and tidy?
","There are now libraries to do this in pure python. One is asn1crypto: https://github.com/wbond/asn1crypto#readme
This is also impemented in androguard, including examples how to use it: https://androguard.readthedocs.io/en/latest/intro/certificates.html
","759","<python><x509><pkcs#7>","3","-1","1","2018-09-08 18:35:37","52238288","0","","446140","","2017-02-17 14:48:44","2017-02-17 14:19:34",""
"34188310","How create signature file to sent web push notification in safari from nodejs server","now I have a server can send push notification to chrome, I want extend for safari too, in apple doc (https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/NotificationProgrammingGuideForWebsites/PushNotifications/PushNotifications.html) but I don't know how make the signature file in nodeJS

The Signature 
The signature is a PKCS #7 detached signature of the
  manifest file. Sign the manifest file with the private key associated
  with your web push certificate that you obtained while registering
  with Apple. In PHP, you can do this with the openssl_pkcs7_sign
  function. The create_signature function in the attached
  createPushPackage.php companion file (the link is near the top of the
  page) shows how you can do this.
If the contents of your push package ever change, you’ll need to
  recompute your signature.

in the same page apple put a example in php:
// Creates a signature of the manifest using the push notification certificate.
function create_signature($package_dir, $cert_path, $cert_password) {
    // Load the push notification certificate
    $pkcs12 = file_get_contents($cert_path);
    $certs = array();
    if(!openssl_pkcs12_read($pkcs12, $certs, $cert_password)) {
        return;
    }

    $signature_path = ""$package_dir/signature"";

    // Sign the manifest.json file with the private key from the certificate
    $cert_data = openssl_x509_read($certs['cert']);
    $private_key = openssl_pkey_get_private($certs['pkey'], $cert_password);
    openssl_pkcs7_sign(""$package_dir/manifest.json"", $signature_path, $cert_data, $private_key, array(), PKCS7_BINARY | PKCS7_DETACHED);

    // Convert the signature from PEM to DER
    $signature_pem = file_get_contents($signature_path);
    $matches = array();
    if (!preg_match('~Content-Disposition:[^\n]+\s*?([A-Za-z0-9+=/\r\n]+)\s*?-----~', $signature_pem, $matches)) {
        return;
    }
    $signature_der = base64_decode($matches[1]);
    file_put_contents($signature_path, $signature_der);
}

somebody know how make the same function in nodeJS?
","ok I finally found how to do this, you must first convert the certificate and key to PEM format
$ openssl x509 -in cert.cer -inform DER -outform PEM -out cert.pem
$ openssl pkcs12 -in key.p12 -out key.pem -nodes

after that, you can sign your manifest with smime module (i use https://github.com/hipush/smime ) and we are ready, we have a signature :) :) :) 
","755","<node.js><safari><apple-push-notifications><pkcs#7>","1","2","1","2019-03-23 17:04:26","34312081","0","1","1033581","","2019-03-23 17:04:26","2015-12-09 20:25:41",""
"16603438","Ways to create a PKCS7 signature file using perl","I have been working on an application that create apples new ios pass.I am new to perl modules and i need some answers about how can we create signature files that uses PKCS7 encryption from a json file. any help would be appreciated.I have certificates and teamid for creating passes.
or 
more simply how to create a signature for a json file using PKCS7 encryption.
and have certificates of format p12 , pem cer.
","To handle PKCS7 you can use OpenCA-PKCS7 module. To deal with JSON you can use JSON module. CPAN documentation gives all the needed info to work with those modules. Enjoy.
","745","<perl><encryption><openssl><passbook><pkcs#7>","2","-1","1","2013-05-17 15:41:55","","0","1","2045980","","2013-05-17 10:46:49","2013-05-17 07:11:44",""
"31872459","Java - Verify PKCS7 signature using sun classes","How to verify PKCS7 signature using sun classes? I know that it is bad thing to do, but for some reasons I can't use BouncyCastle of any other external libraries.
I can get the content from PKCS7 using the following code:
str = str.replace(""-----BEGIN PKCS7-----\n"", """").replace(""-----END PKCS7-----"", """");
PKCS7 pkcs7 = new PKCS7(Base64.decodeBase64(str.getBytes(""UTF-8"")));
byte[] b = new byte[pkcs7.getContentInfo().getContent().getData().available()];
pkcs7.getContentInfo().getContent().getData().getBytes(b);
String s = new String(b, ""UTF-8"");
return s.substring(s.indexOf(""<"")); //there are some strange symbols before <?xml

But I need to verify signature first. Of course I have a certificate to do this:
private X509Certificate certVerify;. 
Thanks!
","You'll have to write a CMS and underlying ASN.1 BER/DER library yourself. Sun doesn't contain any official API to handle the CMS messages specified by PKCS#7 (or the followup RFC's).

The JRE may contain useful code in the implementation of Java. Note that these classes are not part of the API and may change over different versions of Sun's / Oracle's Java. Furthermore, they may not be present at all in 3rd party implementations of Java.
import sun.security.util.*;
import sun.security.x509.AlgorithmId;
import sun.security.x509.X500Name;
import sun.security.x509.KeyUsageExtension;
import sun.security.x509.PKIXExtensions;
import sun.misc.HexDumpEncoder;

These API's should not be used. They even cannot be used without making an change in the access conditions of the runtime in e.g. Eclipse.

Note that the Bouncy Castle libraries have a very permissive license; you could even copy the source code to your application (as long as you leave the initial statement in there, read the license for more details). If your employer tells you that you cannot use even that then there might be something seriously wrong in the organization.
","725","<java><security><encryption><digital-signature><pkcs#7>","1","2","1","2015-08-07 12:59:57","","0","","","","","2015-08-07 07:56:47",""
"46682750","Warning: openssl_pkcs7_sign: error creating PKCS7 structure","We are trying to sign the PAN no. with Digital Signature. We are taking the PAN No. in in.txt file but we are getting error -
Warning: openssl_pkcs7_sign(): error creating PKCS7 structure!
openssl_pkcs7_sign(realpath(""in.txt""), ""out.txt"",
                'file://'.realpath('digitalsign.cer'),
               'file://'.realpath('private_key.pem'),
                array (), PKCS7_NOSIGS
            );  

Kindly suggest what we can do to resolve this issue.
","I think your digital certificate and the Private key is an issue. Kindly create the Digital Certificate and Private Key with below command.
openssl req -x509 -days 365 -newkey rsa:1024 -keyout enc_key.pem -out selfcert.pem

Then after that use that certificate and private key and that will work for you. It worked for me and if still you face issue do comment.
","717","<php><openssl><digital-signature><pkcs#7>","0","2","1","2017-10-27 07:20:58","46969591","0","1","3007197","","2017-10-14 09:23:28","2017-10-11 07:52:27",""
"44704289","Retrieving CMSSignedData from ASN.1 encoding in Bouncy Castle","In the following piece of code I sign a message using Bouncy Castle:
import org.bouncycastle.cms.CMSProcessableByteArray;
import org.bouncycastle.cms.CMSSignedData;
import org.bouncycastle.cms.CMSSignedDataGenerator;
import org.bouncycastle.cms.CMSTypedData;
import org.bouncycastle.cms.jcajce.JcaSignerInfoGeneratorBuilder;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.operator.ContentSigner;
import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;
import org.bouncycastle.operator.jcajce.JcaDigestCalculatorProviderBuilder;
import org.bouncycastle.util.encoders.Base64;

import java.io.FileInputStream;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.Security;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.security.spec.PKCS8EncodedKeySpec;

public class Sign {

    public static void main(String[] args) throws Exception {
        Security.addProvider(new BouncyCastleProvider());

        String certPath = ""certPath"";
        FileInputStream inPublic = new FileInputStream(certPath);
        CertificateFactory factory = CertificateFactory.getInstance(""X.509"");
        X509Certificate cert = (X509Certificate) factory.generateCertificate(inPublic);


        String keyPrivatePath = ""keyPath"";
        Path path = Paths.get(keyPrivatePath);
        Files.readAllBytes(Paths.get(keyPrivatePath));
        PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(Files.readAllBytes(Paths.get(keyPrivatePath)));
        KeyFactory kf = KeyFactory.getInstance(""RSA"");
        PrivateKey privateKey = kf.generatePrivate(spec);

        CMSProcessableByteArray msg = new CMSProcessableByteArray(""My message"".getBytes());
        CMSSignedDataGenerator sGen = new CMSSignedDataGenerator();

        ContentSigner sha1Signer = new JcaContentSignerBuilder(""SHA1withRSA"").setProvider(""BC"").build(privateKey);
        sGen.addSignerInfoGenerator(
                new JcaSignerInfoGeneratorBuilder(
                        new JcaDigestCalculatorProviderBuilder().setProvider(""BC"").build()
                ).build(sha1Signer, cert)
        );

        CMSSignedData sd = sGen.generate(msg);

        CMSTypedData cmsBytes = new CMSProcessableByteArray(sd.getEncoded());
        // How to reconstruct a CMSSignedData from cmsBytes again?
        byte[] bytes = (byte[]) cmsBytes.getContent();
        CMSSignedData retrieved = new CMSSignedData(bytes);
        System.out.println(retrieved.getSignedContent()); // Doesn't work, is null
    }
}

My question is how to retrieve the original CMSSignedData (wanting to read the original message, and verify it), using only the byte array of the ASN.1 encoding of this object.
The reason I am asking this, is that I want to decrypt a certain encrypted and signed message. I am able to decrypt this message, but it results in an ASN.1 encoded byte array (which does correspond to my original message), but I am not able to process this decrypted message any further.
","You can use the classes org.bouncycastle.asn1.cms.ContentInfo and org.bouncycastle.asn1.ASN1Sequence:
CMSTypedData cmsBytes = new CMSProcessableByteArray(sd.getEncoded());
byte[] bytes = (byte[]) cmsBytes.getContent();

// reconstruct CMSSignedData from the byte array
ContentInfo ci = ContentInfo.getInstance(ASN1Sequence.fromByteArray(bytes));
CMSSignedData sig = new CMSSignedData(ci);

Also note that you must create a CMSSignedData with the content encapsulated in the signature, so you must change this:
CMSSignedData sd = sGen.generate(msg);

To this:
CMSSignedData sd = sGen.generate(msg, true);

","708","<java><bouncycastle><asn.1><pkcs#7>","1","0","1","2017-06-22 18:41:23","44704741","0","","","user7605325","2017-06-22 16:07:52","2017-06-22 15:56:30",""
"38614963","Delete the digitally signed signature from pdf","i have used an itextsharp tool to sign the pdf with digital signature. I need to know the possibility way of detaching the old signature from the pdf which is signed previously and the same file need to be signed with the new digital signature. I would like to get the response ASAP.
","","700","<c#><asp.net><itext><pkcs#7>","0","","0","2016-07-28 03:45:46","","6","1","5658312","","2016-07-28 03:45:46","2016-07-27 13:53:28",""
"43579744","Extra data when convert PKCS7 to PEM certificate","I converted a PEM certificate in PEM format to PKCS7 format, now I
am following here to convert back a PKCS7 (P7B) certificate file to PEM format. The result PEM file have content similar with the original PEM file, but its has an extra part of text as the begin.
The command is:
openssl pkcs7 -print_certs -in certificate.p7b -out certificate.cer

The output file (certificate.cer) contain an extra part of data before the ""-----BEGIN CERTIFICATION-----"", like below:
The first two lines: subject and issuer are the extra lines.

subject=/C=VN/ST=HN/L=H/O=MyCompany/OU=MyCompany/CN=192.168.5.113
issuer=/C=VN/ST=HN/O=MyCompany/OU=MyCompany Certificate
  Authority/CN=MyCompany Intermediate CA
-----BEGIN CERTIFICATE-----
MIIFwzCCA6ugAwIBAgICEBQwDQYJKoZIhvcNAQELBQAwgYMxCzAJBgNVBAYTAlZO
  
  MIGHMQswCQYDVQQGEwJWTjEMMAoGA1UECAwDVFRIMQowCAYDVQQHDAFIMRQwEgYD
VQQKDAtWaWVncmlkIEpTQzEqMCgGA1UECwwhVmllZ3JpZCBKU0MgQ2VydGlmaWNh
dGUgQXV0aG9yaXR5MRwwGgYDVQQDDBNWaWVncmlkIEpTQyBSb290IENBggIQAjAO
BgNVHQ8BAf8EBAMCBaAwEwYDVR0lBAwwCgYIKwYBBQUHAwEwDQYJKoZIhvcNAQEL
BQADggIBAIrU8AyCq2OQzQaAzZeSJMrNCZg8/pukQcRhdOP+Gg9uIPFU+Sgjodt/
vxczipxZii+qUOk7GGISvVRNFioSojVm8nawI0j5YvXss3+Zilwo7iqWP71NtO8u
HGsk5GloCKO8cwbk9jQ1YrGXBi2829w1bJZBP1fuspgcdgDcDP0++IXdnYfyZ0eQ
dQ/nwF4EaL2mP6kbZ24pqxem5DBwd3bvP3TMsyboVgKEnFGFZHIQ36y/wIjWp2xn
CSWgi6byohaE6DmSMQ4yzCio38sgQ3fDM3VHnY81AijpFzCeBsIMhQJ9FF8SK+AL
u2IaPU5+8XsPyIR6fsuwvuALa7a97gbP3mDoQKwUoIBOmh56cOoJDPj/+pbfg43i
IJIXqk6/1ppxWhYS4/CtHBPas6bbcvQISif5WmEFV+kXmyXitmNCXOS9JSiinlBD
8lvggpzczqa8fOACIipdJ4zdh4a+lUKrAno+sdy+PDGUpmnG5VLdNNBRoYqovTe1
fUcBZxRqVwO1ebZeBpJbQemw1CF/UzQgy1WixddSz/QNTbA821Ym/8OqoaUhy+PS
idzOIV10iVXP6AOU8chPPnAZmXBgRbibHn8GrjrjXT0ll8YeysBlrmmre2CtY47V
L9u++VhNjqBAht/gZnXS8GfGOkN9vNIFTu0MbWn4rrhJrr+tz09t
-----END CERTIFICATE-----

I want to omit this part when converting, tried with parameters like -noout, -text but nothing works. How can I do it?
","After Googling, I found the solution here:
https://www.bo.infn.it/alice/introgrd/certmgr/node20.html
The ""extra part"" is ""bag attributes"". It can be removed by:
openssl x509 -in cert.pem -out certout.pem 

","670","<openssl><converter><pem><pkcs#7>","0","1","1","2017-04-24 07:31:38","","1","","","","","2017-04-24 04:18:18",""
"20704464","Parsing PKCS10 from PKCS7 in PHP","Background: I'm implementing an MDM solution for WP8, on initial enrolment, the binary security token is a base 64 encoded PKCS10 CSR.  On certificate renewal, the soap request is exactly the same, only the token type specified is ""Renew"" and the binary security token is a base 64 encoded PKCS7.
I am trying to obtain a PKCS10 from a PKCS7 base64 encoded string - I've tried openssl_pkcs7_verify which takes a filename for content. I'm assuming the content that is written contains the CSR.  However, I cannot get this function to succeed and eventually resorted to the following which works - 
private function parsePKCS10( $insb64PKCS7 ) {
    $decodedPKCS7 = base64_decode( $insb64PKCS7 );

    $buffer = """";
    $b64PKCS10 = """";
    $lengthPKCS7 = strlen( $decodedPKCS7 );
    for ( $i = 0; $i < $lengthPKCS7; ++$i ) {
        $currentChar = $decodedPKCS7[ $i ];
        if ( mb_detect_encoding( $currentChar ) == ""ASCII"" && strlen( $currentChar ) != 0 ) {
            $buffer .= $currentChar;
        } else if ( (strlen( $currentChar ) != 0) || ($i + 1 < $lengthPKCS7 && strlen( $decodedPKCS7[ $i + 1 ] ) == 0) ) {
            if ( strlen( $buffer ) > strlen( $b64PKCS10 ) ) {
                $b64PKCS10 = $buffer;
            }
            $buffer = """";
        }
    }

    return preg_replace( '/[\x00-\x1F\x80-\xFF]/', '', $b64PKCS10 ); //remove non-printable chars
}

I found an example online doing this in C# - 
private static string extractPKCS10(string PKCS7blob)
        {
            SignedCms cms = new SignedCms();
            cms.Decode(System.Convert.FromBase64String(PKCS7blob));
            byte[] csr = cms.ContentInfo.Content;

            return Encoding.Unicode.GetString(csr);
        }

Does anyone know a better way of doing this in PHP, or should I stick with my current function which does the job?
Thanks
EDIT - 
I found a better solution using PHPSecLib - 
$asn1 = new File_ASN1();
$certDump = $asn1->decodeBER( base64_decode( $cert ) );
$csr = extractPKCS10( $certDump );
print( $csr );


function extractPKCS10( $pkcs7, $parent = null ){

    $pkcs7DataOID = '1.2.840.113549.1.7.1';

    foreach( $pkcs7 as $key => $value ){
        if( $key == 'content' && $value == $pkcs7DataOID ){
            $csrBlob = $parent[1]['content'][0]['content'];
            return base64_encode( $csrBlob );
        }

        if( is_array( $value ) ){
            $pkcs10 = extractPKCS10( $value, $pkcs7 );
            if( null !== $pkcs10 ){
                return $pkcs10;
            }
        }
    }

    return null;
}

","","667","<php><windows-phone-8><mdm><phpseclib><pkcs#7>","1","","0","2014-04-24 09:48:04","","0","","2822540","","2014-04-24 09:48:04","2013-12-20 13:14:50",""
"8120329","Can I convert a Rawsignature to PKCS#7 in xcode using Openssl","I could susscessfuly genearte pkcs7 signature using PEM(private key)file in Openssl.
But, how do I convert a RAWsignature generated using security.framework to pkcs7 using Openssl.
Edit: 
load data > load PEM(private key)file > generate pkcs7 data using Openssl ....this is successfull
but
Load private key (SecKeyRef) from keychian > (how to pass this key to OPenssl to generate Pkcs7)?
","IOS doesnt have feature to generate PKCS#7 Signature. We have to use OpenSSL with no other Alternative I suppose.
And IOS protects the keys using KEYCHAIN it provides. So the SecKeyRef is only a readable and not transferable. Better dont ever try to write to some file or transport it. 
IOS features can generate only PKCS#1 Singnatures.
And if the RAWSignature is genereated using a PKCS#12 file, PKCS#7 singature can be generated out of it, using Bouncy Castle...server side....
did it... and it works... :)
","659","<iphone><openssl><pkcs#7>","0","0","1","2012-04-05 15:33:09","10031586","0","","999118","","2011-11-14 12:38:15","2011-11-14 10:37:00",""
"43945101","Decode string with PKC7 in Java","I have some Java code, and I have a String type which includes the following content:
-----BEGIN PKCS7-----
MIIIzwYJKoZIhvcNAQcCoIIIwDCCCLwCAQExDzANBglghkgBZQMEAgEFADALBgkq
hkiG9w0BBwGgggZbMIIGVzCCBT+gAwIBAgIELhJ2QDANBgkqhkiG9w0BAQUFADCB
mDELMAkGA1UEBhMCREUxEDAOBgNVBAoMB1NpZW1lbnMxETAPBgNVBAUTCFpaWlpa
WlkyMTowOAYDVQQLDDFDb3B5cmlnaHQgKEMpIFNpZW1lbnMgQUcgMjAxMyBBbGwg
UmlnaHRzIFJlc2VydmVkMSgwJgYDVQQDDB9TaWVtZW5zIElzc3VpbmcgQ0EgRUUg
QXV0aCAyMDEzMB4XDTE0MDcxODEzNTcwM1oXDTE3MDcxODEzNTcwM1owYzERMA8G
A1UEBRMIWjAwMzBBTUgxDzANBgNVBCoMBkFsZXhleTERMA8GA1UEBAwIU2Vkb3lr
aW4xEDAOBgNVBAoMB1NpZW1lbnMxGDAWBgNVBAMMD1NlZG95a2luIEFsZXhleTCC
ASAwCwYJKoZIhvcNAQEBA4IBDwAwggEKAoIBAQCKahNgWzDPSnOwba2ljWQb8Lni
uvAGZHEvdd5zm8H7Kw56WMxdixKHoKSChXWf1zGE3RZAsQOdHOpcgiqnRF2xLe2l
LjCLoE9sC4DfUVD4mKe3kcxtnsxkoLc1A/3QXJSOzpk7rPJeqehmuj06yCtPjpdF
Gmtf4bkskiQuK8u4RJfnmzffWQppd2Ld+u8tLxQKyHnZtOnPyYQGRQJXJKhruDnn
LonlveVXKzEzmo88E5udB+/6jDWDfuyfKHMFyOhk80qGeYDOYQHxiq/PJbAyQU6X
PONbfsCgILKxx7uHaBlhNALxjFZSeNNtfg0bx82O1DoJEcWcOjZQtQMuNUjvAgMB
AAGjggLdMIIC2TAdBgNVHQ4EFgQUE5jDSnfWWnlUWMKztQ6zYfgohUkwUwYDVR0R
BEwwSqArBgorBgEEAYI3FAIDoB0MG2FsZXhleS5zZWRveWtpbkBzaWVtZW5zLmNv
bYEbYWxleGV5LnNlZG95a2luQHNpZW1lbnMuY29tMA4GA1UdDwEB/wQEAwIHgDCC
AQQGCCsGAQUFBwEBBIH3MIH0MDIGCCsGAQUFBzAChiZodHRwOi8vYWguc2llbWVu
cy5jb20vcGtpP1paWlpaWlkyLmNydDBBBggrBgEFBQcwAoY1bGRhcDovL2FsLnNp
ZW1lbnMubmV0L0NOPVpaWlpaWlkyLEw9UEtJP2NBQ2VydGlmaWNhdGUwSQYIKwYB
BQUHMAKGPWxkYXA6Ly9hbC5zaWVtZW5zLmNvbS9DTj1aWlpaWlpZMixvPVRydXN0
Y2VudGVyP2NBQ2VydGlmaWNhdGUwMAYIKwYBBQUHMAGGJGh0dHA6Ly9vY3NwLnBr
aS1zZXJ2aWNlcy5zaWVtZW5zLmNvbTAfBgNVHSMEGDAWgBTelD9Lal9YThQYyUbX
FDnCnCE8KTAMBgNVHRMBAf8EAjAAMBoGA1UdIAQTMBEwDwYNKwYBBAGhaQcCAgMB
ATCBygYDVR0fBIHCMIG/MIG8oIG5oIG2hiZodHRwOi8vY2guc2llbWVucy5jb20v
cGtpP1paWlpaWlkyLmNybIZBbGRhcDovL2NsLnNpZW1lbnMubmV0L0NOPVpaWlpa
WlkyLEw9UEtJP2NlcnRpZmljYXRlUmV2b2NhdGlvbkxpc3SGSWxkYXA6Ly9jbC5z
aWVtZW5zLmNvbS9DTj1aWlpaWlpZMixvPVRydXN0Y2VudGVyP2NlcnRpZmljYXRl
UmV2b2NhdGlvbkxpc3QwMwYDVR0lBCwwKgYIKwYBBQUHAwIGCCsGAQUFBwMEBgor
BgEEAYI3FAICBggrBgEFBQgCAjANBgkqhkiG9w0BAQUFAAOCAQEAmzrYxmkRuSPM
itK0rnR98BXlnB88ldVXjyz+rjHg9QghoZ5+8u7wHnxMSXida4XvYbhN5maUQs3D
dWebvXP6CXt/OErVgYHlEAT8d5iqvin7/6eEgS0ge9DOxD2Rv+LYltPmAsjgxUS/
0MecbUJpyBct6mDNfPI7riCu+mCcw6v9OKLWnXTIZsV9Z/WqaFbqVeJ5wo1+MUGW
CGrDVkn7XnCKAQN8xEEO+Dq/TSVyv8tlDUzWps1yb3l9cYDc030s5AwFXa99v76p
YJUZ08qQsieXOrs3qyQxMalM/Y042N17bwf9XkGT6iKN8o8U0YS1Vkaz8iroBRKk
iA2pRNN4AjGCAjgwggI0AgEBMIGhMIGYMQswCQYDVQQGEwJERTEQMA4GA1UECgwH
U2llbWVuczERMA8GA1UEBRMIWlpaWlpaWTIxOjA4BgNVBAsMMUNvcHlyaWdodCAo
QykgU2llbWVucyBBRyAyMDEzIEFsbCBSaWdodHMgUmVzZXJ2ZWQxKDAmBgNVBAMM
H1NpZW1lbnMgSXNzdWluZyBDQSBFRSBBdXRoIDIwMTMCBC4SdkAwDQYJYIZIAWUD
BAIBBQCgaTAYBgkqhkiG9w0BCQMxCwYJKoZIhvcNAQcBMBwGCSqGSIb3DQEJBTEP
Fw0xNzA1MDMxNDI3NTFaMC8GCSqGSIb3DQEJBDEiBCBCA/fR9wGftKzKFZRuIDJV
bYiaHzsDteoUoUL55kMrYDANBgkqhkiG9w0BAQEFAASCAQA6HtP3xr36VLj+WMao
PRrszLfMJTE7lKIX3Vjybj2W3yj4qanPamZBb4KyEDIvQA8r65j4dbzcDePoFsRB
5eYRnfB/djuXPAZdL9xdFMH3iRzfcseSFXulZ8FrG/9cuqDQkYVIx/Fk43yLtlpx
OncVG3vZVW306yKQLu7Tsy+/GEkNDBMt6akqNPWp+9zqQTj7TaCXg7qr7mTlSStZ
E15USoAOelisALpwPdizvfaJOqP03IobwDXMfRaCjzEANVl/M3woL1sNLu6BtuMe
mAdls8tnJWDF+wpD4Y256Dso4FvDe2iK923jNElzq4iyc6ZosqGORS3nTh/1FQyp
gkC1
-----END PKCS7-----

How can I convert this String into a readable state? 
So far, I've used the following website just to test: https://certlogik.com/decoder/
","Well, even if you never posted an approach showing us what you've tried before for achieving your task and even if you said that you are not a programmer (I wonder how are you going to understand then).
I wanted to play around with this and this is what I got so far...

Notes
Since you are new to this, consider the following:

Use bouncycastle library within your project, include the bcprov-jdk16-1.46.jar file to the Build Path.
In order to use bouncycastle library, you'll need the ""Java Cryptography Extension"" JARs and, in order to do so, replace the local_policy.jar and US_export_policy.jar files located at C:\path\to\Java\jdk1.7.0_79\jre\lib\security with the ones from here: http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html 

(the link will download a ZIP file with the JARs for Java 7 since I am using that version, you should download the right ones for the Java version that you are using).
Project structure
Just created a simple Java Project and defined this structure:

Java code
Things to consider...

There are many attributes to obtain from the certificate and getting some of them are a bit tricky (you'll need to do some research here in order to get them all, same way as: https://certlogik.com/decoder/ currently does).
I've changed the header/footer: BEGIN PKCS7/END PKCS7 from the certificate, because of the following: http://openssl.cs.utah.edu/docs/apps/pkcs7.html (read under ""Notes"" section) and because the certificate String can't be parsed as a X509Certificate object when not using the other ones, which are: BEGIN CERTIFICATE/END CERTIFICATE. Also, something that I noticed was that after decoding the certificate on the website that you provided, the BEGIN PKCS7/END PKCS7 header/footer are replaced in your certificate String with the other ones that I was talking about before.

Obtained from above link:

The PEM PKCS#7 format uses the header and footer lines:
-----BEGIN PKCS7-----
   -----END PKCS7-----
For compatibility with some CAs it will also accept:
-----BEGIN CERTIFICATE-----
   -----END CERTIFICATE-----

Then, here goes the runnable Java class:
package com.cert.example.main;

import java.io.IOException;
import java.io.StringReader;
import java.security.Security;
import java.security.cert.X509Certificate;
import java.security.interfaces.RSAPublicKey;

import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.openssl.PEMReader;

public class CertificateDecoder {

    public static void main(String[] args) throws IOException {

        String certStr = ""-----BEGIN CERTIFICATE-----\r\n"" + 
                ""MIIIzwYJKoZIhvcNAQcCoIIIwDCCCLwCAQExDzANBglghkgBZQMEAgEFADALBgkq\r\n"" + 
                ""hkiG9w0BBwGgggZbMIIGVzCCBT+gAwIBAgIELhJ2QDANBgkqhkiG9w0BAQUFADCB\r\n"" + 
                ""mDELMAkGA1UEBhMCREUxEDAOBgNVBAoMB1NpZW1lbnMxETAPBgNVBAUTCFpaWlpa\r\n"" + 
                ""WlkyMTowOAYDVQQLDDFDb3B5cmlnaHQgKEMpIFNpZW1lbnMgQUcgMjAxMyBBbGwg\r\n"" + 
                ""UmlnaHRzIFJlc2VydmVkMSgwJgYDVQQDDB9TaWVtZW5zIElzc3VpbmcgQ0EgRUUg\r\n"" + 
                ""QXV0aCAyMDEzMB4XDTE0MDcxODEzNTcwM1oXDTE3MDcxODEzNTcwM1owYzERMA8G\r\n"" + 
                ""A1UEBRMIWjAwMzBBTUgxDzANBgNVBCoMBkFsZXhleTERMA8GA1UEBAwIU2Vkb3lr\r\n"" + 
                ""aW4xEDAOBgNVBAoMB1NpZW1lbnMxGDAWBgNVBAMMD1NlZG95a2luIEFsZXhleTCC\r\n"" + 
                ""ASAwCwYJKoZIhvcNAQEBA4IBDwAwggEKAoIBAQCKahNgWzDPSnOwba2ljWQb8Lni\r\n"" + 
                ""uvAGZHEvdd5zm8H7Kw56WMxdixKHoKSChXWf1zGE3RZAsQOdHOpcgiqnRF2xLe2l\r\n"" + 
                ""LjCLoE9sC4DfUVD4mKe3kcxtnsxkoLc1A/3QXJSOzpk7rPJeqehmuj06yCtPjpdF\r\n"" + 
                ""Gmtf4bkskiQuK8u4RJfnmzffWQppd2Ld+u8tLxQKyHnZtOnPyYQGRQJXJKhruDnn\r\n"" + 
                ""LonlveVXKzEzmo88E5udB+/6jDWDfuyfKHMFyOhk80qGeYDOYQHxiq/PJbAyQU6X\r\n"" + 
                ""PONbfsCgILKxx7uHaBlhNALxjFZSeNNtfg0bx82O1DoJEcWcOjZQtQMuNUjvAgMB\r\n"" + 
                ""AAGjggLdMIIC2TAdBgNVHQ4EFgQUE5jDSnfWWnlUWMKztQ6zYfgohUkwUwYDVR0R\r\n"" + 
                ""BEwwSqArBgorBgEEAYI3FAIDoB0MG2FsZXhleS5zZWRveWtpbkBzaWVtZW5zLmNv\r\n"" + 
                ""bYEbYWxleGV5LnNlZG95a2luQHNpZW1lbnMuY29tMA4GA1UdDwEB/wQEAwIHgDCC\r\n"" + 
                ""AQQGCCsGAQUFBwEBBIH3MIH0MDIGCCsGAQUFBzAChiZodHRwOi8vYWguc2llbWVu\r\n"" + 
                ""cy5jb20vcGtpP1paWlpaWlkyLmNydDBBBggrBgEFBQcwAoY1bGRhcDovL2FsLnNp\r\n"" + 
                ""ZW1lbnMubmV0L0NOPVpaWlpaWlkyLEw9UEtJP2NBQ2VydGlmaWNhdGUwSQYIKwYB\r\n"" + 
                ""BQUHMAKGPWxkYXA6Ly9hbC5zaWVtZW5zLmNvbS9DTj1aWlpaWlpZMixvPVRydXN0\r\n"" + 
                ""Y2VudGVyP2NBQ2VydGlmaWNhdGUwMAYIKwYBBQUHMAGGJGh0dHA6Ly9vY3NwLnBr\r\n"" + 
                ""aS1zZXJ2aWNlcy5zaWVtZW5zLmNvbTAfBgNVHSMEGDAWgBTelD9Lal9YThQYyUbX\r\n"" + 
                ""FDnCnCE8KTAMBgNVHRMBAf8EAjAAMBoGA1UdIAQTMBEwDwYNKwYBBAGhaQcCAgMB\r\n"" + 
                ""ATCBygYDVR0fBIHCMIG/MIG8oIG5oIG2hiZodHRwOi8vY2guc2llbWVucy5jb20v\r\n"" + 
                ""cGtpP1paWlpaWlkyLmNybIZBbGRhcDovL2NsLnNpZW1lbnMubmV0L0NOPVpaWlpa\r\n"" + 
                ""WlkyLEw9UEtJP2NlcnRpZmljYXRlUmV2b2NhdGlvbkxpc3SGSWxkYXA6Ly9jbC5z\r\n"" + 
                ""aWVtZW5zLmNvbS9DTj1aWlpaWlpZMixvPVRydXN0Y2VudGVyP2NlcnRpZmljYXRl\r\n"" + 
                ""UmV2b2NhdGlvbkxpc3QwMwYDVR0lBCwwKgYIKwYBBQUHAwIGCCsGAQUFBwMEBgor\r\n"" + 
                ""BgEEAYI3FAICBggrBgEFBQgCAjANBgkqhkiG9w0BAQUFAAOCAQEAmzrYxmkRuSPM\r\n"" + 
                ""itK0rnR98BXlnB88ldVXjyz+rjHg9QghoZ5+8u7wHnxMSXida4XvYbhN5maUQs3D\r\n"" + 
                ""dWebvXP6CXt/OErVgYHlEAT8d5iqvin7/6eEgS0ge9DOxD2Rv+LYltPmAsjgxUS/\r\n"" + 
                ""0MecbUJpyBct6mDNfPI7riCu+mCcw6v9OKLWnXTIZsV9Z/WqaFbqVeJ5wo1+MUGW\r\n"" + 
                ""CGrDVkn7XnCKAQN8xEEO+Dq/TSVyv8tlDUzWps1yb3l9cYDc030s5AwFXa99v76p\r\n"" + 
                ""YJUZ08qQsieXOrs3qyQxMalM/Y042N17bwf9XkGT6iKN8o8U0YS1Vkaz8iroBRKk\r\n"" + 
                ""iA2pRNN4AjGCAjgwggI0AgEBMIGhMIGYMQswCQYDVQQGEwJERTEQMA4GA1UECgwH\r\n"" + 
                ""U2llbWVuczERMA8GA1UEBRMIWlpaWlpaWTIxOjA4BgNVBAsMMUNvcHlyaWdodCAo\r\n"" + 
                ""QykgU2llbWVucyBBRyAyMDEzIEFsbCBSaWdodHMgUmVzZXJ2ZWQxKDAmBgNVBAMM\r\n"" + 
                ""H1NpZW1lbnMgSXNzdWluZyBDQSBFRSBBdXRoIDIwMTMCBC4SdkAwDQYJYIZIAWUD\r\n"" + 
                ""BAIBBQCgaTAYBgkqhkiG9w0BCQMxCwYJKoZIhvcNAQcBMBwGCSqGSIb3DQEJBTEP\r\n"" + 
                ""Fw0xNzA1MDMxNDI3NTFaMC8GCSqGSIb3DQEJBDEiBCBCA/fR9wGftKzKFZRuIDJV\r\n"" + 
                ""bYiaHzsDteoUoUL55kMrYDANBgkqhkiG9w0BAQEFAASCAQA6HtP3xr36VLj+WMao\r\n"" + 
                ""PRrszLfMJTE7lKIX3Vjybj2W3yj4qanPamZBb4KyEDIvQA8r65j4dbzcDePoFsRB\r\n"" + 
                ""5eYRnfB/djuXPAZdL9xdFMH3iRzfcseSFXulZ8FrG/9cuqDQkYVIx/Fk43yLtlpx\r\n"" + 
                ""OncVG3vZVW306yKQLu7Tsy+/GEkNDBMt6akqNPWp+9zqQTj7TaCXg7qr7mTlSStZ\r\n"" + 
                ""E15USoAOelisALpwPdizvfaJOqP03IobwDXMfRaCjzEANVl/M3woL1sNLu6BtuMe\r\n"" + 
                ""mAdls8tnJWDF+wpD4Y256Dso4FvDe2iK923jNElzq4iyc6ZosqGORS3nTh/1FQyp\r\n"" + 
                ""gkC1\r\n"" + 
                ""-----END CERTIFICATE-----"";

        // Init bouncycastle
        Security.addProvider(new BouncyCastleProvider());

        // Get certificate
        StringReader sr = new StringReader(certStr);
        PEMReader pr = new PEMReader(sr);
        X509Certificate cert = (X509Certificate)pr.readObject();
        pr.close();

        // Get Public Key as RSA in order to get extra attributes
        RSAPublicKey rsaPublicKey = (RSAPublicKey)cert.getPublicKey();

        System.out.println(printCertInfo(cert, rsaPublicKey));
    }

    static String printCertInfo(X509Certificate cert, RSAPublicKey rsaPublicKey) {
        StringBuilder sb = new StringBuilder();

        sb.append(""Certificate:\r\n"");
        sb.append(""Data:\r\n"");
        sb.append(""\tVersion: "" + cert.getVersion() + ""\r\n"");
        sb.append(""\tSerial Number: "" + cert.getSerialNumber() + ""\r\n"");
        sb.append(""\tSignature Algorithm: "" + cert.getSigAlgName() + ""\r\n"");
        sb.append(""\tIssuer: "" + cert.getIssuerDN().getName() + ""\r\n"");
        sb.append(""\tSignature Algorithm: "" + cert.getSigAlgName() + ""\r\n"");
        sb.append(""\tValidity\r\n"");
        sb.append(""\t\tNot Before: "" + cert.getNotBefore() + ""\r\n"");
        sb.append(""\t\tNot After: "" + cert.getNotAfter() + ""\r\n"");
        sb.append(""\tSubject: "" + cert.getSubjectDN() + ""\r\n"");
        sb.append(""\tSubject Public Key Info:\r\n"");
        sb.append(""\t\tPublic Key Algorithm: "" + rsaPublicKey.getAlgorithm() + ""\r\n"");
        sb.append(""\t\t\tPublic-Key: "" + rsaPublicKey.getModulus().bitLength() + "" bit \r\n"");
        sb.append(""\t\t\tModulus:\r\n"");
        sb.append(""\t\t\t\t"" + rsaPublicKey.getModulus().toString(16) + ""\r\n"");
        sb.append(""\t\t\tExponent: "" + rsaPublicKey.getPublicExponent() + ""\r\n"");

        // TODO: Print other attributes, do some research to get them all...

        return sb.toString();
    }

}

Output
If I get the time, I'll try to get all the attributes, same way as the website that you provided does. Right now, the code from above will output the following:
Certificate:
Data:
    Version: 3
    Serial Number: 772961856
    Signature Algorithm: SHA1WithRSAEncryption
    Issuer: C=DE,O=Siemens,SERIALNUMBER=ZZZZZZY2,OU=Copyright (C) Siemens AG 2013 All Rights Reserved,CN=Siemens Issuing CA EE Auth 2013
    Signature Algorithm: SHA1WithRSAEncryption
    Validity
        Not Before: Fri Jul 18 09:57:03 EDT 2014
        Not After: Tue Jul 18 09:57:03 EDT 2017
    Subject: SERIALNUMBER=Z0030AMH,GIVENNAME=Alexey,SURNAME=Sedoykin,O=Siemens,CN=Sedoykin Alexey
    Subject Public Key Info:
        Public Key Algorithm: RSA
            Public-Key: 2048 bit 
            Modulus:
                8a6a13605b30cf4a73b06dada58d641bf0b9e2baf00664712f75de739bc1fb2b0e7a58cc5d8b1287a0a48285759fd73184dd1640b1039d1cea5c822aa7445db12deda52e308ba04f6c0b80df5150f898a7b791cc6d9ecc64a0b73503fdd05c948ece993bacf25ea9e866ba3d3ac82b4f8e97451a6b5fe1b92c92242e2bcbb84497e79b37df590a697762ddfaef2d2f140ac879d9b4e9cfc9840645025724a86bb839e72e89e5bde5572b31339a8f3c139b9d07effa8c35837eec9f287305c8e864f34a867980ce6101f18aafcf25b032414e973ce35b7ec0a020b2b1c7bb876819613402f18c565278d36d7e0d1bc7cd8ed43a0911c59c3a3650b5032e3548ef
            Exponent: 65537

","650","<java><string><decode><pkcs#7>","0","0","1","2017-05-13 01:10:28","43948175","5","","1178686","","2017-05-13 01:05:42","2017-05-12 19:25:06",""
"45278296","Convert PEM to PKCS7 (Java)","I have a List of Byte arrays (representing each certificate from a chain), in PEM format, and I would like to know if there's a way to convert these to a unique PKCS7 formatted String, in Java.
Thank you in advance.
","This is an example to build a PKCS#7 file using a X509Certificate[] array based on this answer. It does not require the private key
//Export a certificate list to PKCS#7
public static byte[] exportCertificatesAsPkcs7(X509Certificate certs[]) throws Exception {

    List certList = new ArrayList();
    for (X509Certificate certificate: certs){
        certList.add(new X509CertificateHolder(certificate.getEncoded()));
    }
    Store certStore = new JcaCertStore(certList);

    CMSProcessableByteArray msg = new CMSProcessableByteArray(""Hello World"".getBytes());
    CMSSignedDataGenerator    gen = new CMSSignedDataGenerator(); 
    gen.addCertificates(certStore);
    CMSSignedData data = gen.generate(msg, ""BC""); 
    return data.getEncoded();

}

","643","<java><certificate><pem><pkcs#7>","1","2","1","2017-07-24 13:03:45","45281402","5","","","","","2017-07-24 10:33:32",""
"40685111","Why OpenSSL's PKCS7_verify() requires ""smimesign"" certificate purpose?","Man page for PKCS7_verify() states that
...Each signer's certificate is chain verified using the smimesign purpose...

Why is exactly this one purpose always required? I understand it so that a signed PKCS7 structure can be used for many things, S/MIME being just one of them.
If my signing certificate does not have smimeSign among its extendedKeyUsage extensions, PKCS7_verify() fails. I'd need to manually adjust the purpose in order to do the verification. Am I missing something here?
","Simply verifying the signature, checking that the signer's certificate is authentic and that the chain leads to a trusted root is not enough. Any verification code also must ensure that the certificate holder was entitled to perform the signing for the particular purpose. The vetting to get a certificate that has smimeSign privilege is a lot less stringent than the vetting for, say a code signing certificate.
Imagine a software development company where every employee has been issued a certificate for the purpose of email signing and encryption. This company also releases a software product, and provides a PKCS#7 signed distribution package of its product. If PKCS#7 verification functions did not check the purpose of the signing certificate (in this case we'd want codesign), a bad actor in the employ of the company could create a compromised version of the software product, and sign it with their E-Mail certificate (which only has the purpose smimesign.) 
In the case of OpenSSL's pkcs7_verify(), the API was designed to imply a purpose instead of explicitly requiring one to be passed in, and smimeSign was chosen as default. I'm guessing that since S/MIME is the most common use of PKCS#7, it made sense, and it allows someone to verify PKCS#7 in most use cases without having to learn about extendedKeyUsage.
[Below my original answer, to address your pre-edit question 'Can I specify that I want to verify a signature in a PKCS7 against some other purpose':]
A certificate can contain an (optional) attribute called ""Extended Key Usage"". This attribute is used to indicate what the certificate is allowed to be used for. Some possible X509.v3 usages are:

serverAuthentication
clientAuthentication
codeSigning
emailProtection
ipSecEndSystem
ipSecTunnel
timeStamping
ocspSigning
smartCardLogin
pkiPeerAuth

You can check the x509v3_config man page for the key usage flags that openssl is aware of.
PKCS#7 is a general container format that allows for both signing and or encrypting the content of the container. S/MIME uses PKCS#7 for signing and/or encrypting email message, and in that case, the certificate being used should have the emailProtection usage.
If you wanted to distribute some code, and you want to make sure that the recipient can verify that the distribution is from you, and unaltered, you could use PKCS#7 to distribute, and in that case your certificate should have the codeSigning enhanced key usage attribute.
It is possible for a certificate to have multiple key usages, but in general it's a good idea to have a separate key (and therefore certificate) for different usage types.
Openssl, on the command line, supports specifying the desired purpose of the certificate when using the ""openssl smime"" command. For example,
    openssl smime -verify -in myfile.p7b -inform DER -out my-p7-content -purpose any

will verify the signature in the file 'my file.p7p', it will write the content of the PKCS#7 container in file 'my-p7-content' and it will accept any valid certificate, no matter what its indicated purpose is. (-purpose any). Please note that the openssl man page for smime does not list the -purpose switch as an option, but it is indeed supported. 
Since you quote the PKCS7_verify API documentation, programmatically, you can specify the purpose via the X509_VERIFY_PARAM_set_purpose method when you're setting up your X509_STORE object. The following fragment should give you an idea of the process:
X509_STORE store;
int purpose;

store = X509_STORE_new();
verify_params = X509_Store_get0_param(store);
purpose = X509_PURPOSE_get_by_sname(""sslclient"");
X509_VERIFY_PARAM_set_purpose(verify_params, purpose)
...
PKCS7_verify(..., store, ...);

This will set the purpose to SSL Client when verifying.
","634","<openssl><digital-signature><x509><pkcs#7>","3","4","1","2016-12-25 21:25:39","41317775","0","","3608247","","2016-12-25 15:46:22","2016-11-18 20:01:55",""
"17875035","Rolling my own PKCS#7 padding in PL/SQL","I need to do some encryption in PL/SQL + Oracle using the outdated DBMS_OBFUSCATION_TOOLKIT package, but it has to be decryptable (if that's even a word) in both Java and Javascript.  The Java and JS decryptions use for PKCS#7 / PCKS#5 padding.  It's simple (I think) to implement Zero padding, and I could change the Java and JS, but I don't know if I'll ever have problems with the zero padding being irreversible.
Therefore, I'd like to roll my own PKCS#7, but I'm having some trouble producing the right output.  This code compares what I have side by size with the output from DBMS_CRYPTO, which has PKCS#5 implemented, but is not available to all employees, due to permissions issues:
  FUNCTION  DESWithPKCS5Padding(trash VARCHAR2) 
  RETURN VARCHAR2 
  IS 
    lv_encrypted_data           VARCHAR2 (2000); 
    lv_decrypted_data           VARCHAR2 (2000); 
    piv_str                     VARCHAR2 (2000) := 'apples'; 
    piv_pass_key                VARCHAR2 (2000) := 'testForNathan123testForN'; 
    a_var                       VARCHAR2 (100);
    num_padding_bytes               Int;
    padding_bytes               raw(100);
    test_byte                   raw(1);
    zero_byte                   raw(1);
    piv_raw                     raw(2000);
    piv_raw_orig                raw(2000);
    error_in_input_buffer_length EXCEPTION; 
    PRAGMA EXCEPTION_INIT (error_in_input_buffer_length, -28232); 
    input_buffer_length_err_msg VARCHAR2 (100) := 
  BEGIN 
      dbms_output.Put_line ('Input_string->:' 
                            || piv_str );

  -- Since 3DES needs data to be in multiples of 8 bytes we had pad the data, if the 
  -- data did not meet the 8 bytes boundary requirement. 
  num_padding_bytes := MOD(Length(piv_str),8);

  piv_raw_orig := utl_raw.cast_to_raw(piv_str);

  IF (num_padding_bytes) != 0 THEN 
    padding_bytes := '';
    zero_byte := '0';
    test_byte := utl_raw.cast_to_raw(8-num_padding_bytes);
    test_byte := utl_raw.bit_and(test_byte, '0F');

    for lcntr in 1..8-num_padding_bytes
      loop
      padding_bytes := UTL_RAW.CONCAT(padding_bytes, test_byte);
      end loop;

      piv_raw := utl_raw.concat(utl_raw.cast_to_raw(piv_str), padding_bytes);
  END IF;

  dbms_output.put_line('Without padding: ' || piv_raw_orig);
  dbms_output.put_line('After padding: '|| piv_raw);

  lv_encrypted_data := dbms_obfuscation_toolkit.Des3encrypt ( 
                       input => piv_raw, key => utl_raw.cast_to_raw(piv_pass_key),
                       which => 1);

  dbms_output.Put_line ('Encrypted Data OBFS: ' 
                        || lv_encrypted_data);

  lv_encrypted_data := dbms_crypto.encrypt (src => piv_raw_orig,
      KEY => utl_raw.cast_to_raw(piv_pass_key), typ =>  dbms_crypto.des3_cbc_pkcs5);

  dbms_output.Put_line ('Encrypted Data CRYPTO: ' 
                        || (lv_encrypted_data));                            

  lv_decrypted_data := dbms_crypto.Decrypt (src => lv_encrypted_data,
      KEY => utl_raw.cast_to_raw(piv_pass_key), typ =>  dbms_crypto.des3_cbc_pkcs5);

  dbms_output.Put_line('Decrypted: ' || utl_raw.cast_to_varchar2(lv_decrypted_data)); 
END;

And the output:
Input_string->:apples
Without padding: 6170706C6573
After padding: 6170706C65730202
Encrypted Data OBFS: 36DEFCBBC60BC58A
Encrypted Data CRYPTO: CF7676DF282DCC5C
Decrypted: apples

As you can see, it appears the padding is being applied correctly (0202 present at the end of the After padding RAW), but DBMS_CRYPTO is producing a different result than the DBMS_OBFUSCATION_TOOLKIT.  Any ideas why?
Thanks in advance!
","
"" the output from DBMS_CRYPTO, which has PKCS#5 implemented, but is
  not available to all employees, due to permissions issues:""

The other employees don't need access to DBMS_CRYPTO, they just need access to your function.  So you can build a function which uses the restricted functionality in a specific and approved fashion, and make it widely available without violating the broader permissions issues.
Of course, I am assuming your application has implemented schemas in a sensible manner, which allows for dispersal of minimum necessary privileges on objects.  I wrote a blog article on a similar issue quite recently, if you would like to find out more.
","628","<oracle><encryption><plsql><bit-manipulation><pkcs#7>","1","0","2","2013-08-01 09:44:26","17917563","0","","","","","2013-07-26 07:07:24",""
"17875035","Rolling my own PKCS#7 padding in PL/SQL","I need to do some encryption in PL/SQL + Oracle using the outdated DBMS_OBFUSCATION_TOOLKIT package, but it has to be decryptable (if that's even a word) in both Java and Javascript.  The Java and JS decryptions use for PKCS#7 / PCKS#5 padding.  It's simple (I think) to implement Zero padding, and I could change the Java and JS, but I don't know if I'll ever have problems with the zero padding being irreversible.
Therefore, I'd like to roll my own PKCS#7, but I'm having some trouble producing the right output.  This code compares what I have side by size with the output from DBMS_CRYPTO, which has PKCS#5 implemented, but is not available to all employees, due to permissions issues:
  FUNCTION  DESWithPKCS5Padding(trash VARCHAR2) 
  RETURN VARCHAR2 
  IS 
    lv_encrypted_data           VARCHAR2 (2000); 
    lv_decrypted_data           VARCHAR2 (2000); 
    piv_str                     VARCHAR2 (2000) := 'apples'; 
    piv_pass_key                VARCHAR2 (2000) := 'testForNathan123testForN'; 
    a_var                       VARCHAR2 (100);
    num_padding_bytes               Int;
    padding_bytes               raw(100);
    test_byte                   raw(1);
    zero_byte                   raw(1);
    piv_raw                     raw(2000);
    piv_raw_orig                raw(2000);
    error_in_input_buffer_length EXCEPTION; 
    PRAGMA EXCEPTION_INIT (error_in_input_buffer_length, -28232); 
    input_buffer_length_err_msg VARCHAR2 (100) := 
  BEGIN 
      dbms_output.Put_line ('Input_string->:' 
                            || piv_str );

  -- Since 3DES needs data to be in multiples of 8 bytes we had pad the data, if the 
  -- data did not meet the 8 bytes boundary requirement. 
  num_padding_bytes := MOD(Length(piv_str),8);

  piv_raw_orig := utl_raw.cast_to_raw(piv_str);

  IF (num_padding_bytes) != 0 THEN 
    padding_bytes := '';
    zero_byte := '0';
    test_byte := utl_raw.cast_to_raw(8-num_padding_bytes);
    test_byte := utl_raw.bit_and(test_byte, '0F');

    for lcntr in 1..8-num_padding_bytes
      loop
      padding_bytes := UTL_RAW.CONCAT(padding_bytes, test_byte);
      end loop;

      piv_raw := utl_raw.concat(utl_raw.cast_to_raw(piv_str), padding_bytes);
  END IF;

  dbms_output.put_line('Without padding: ' || piv_raw_orig);
  dbms_output.put_line('After padding: '|| piv_raw);

  lv_encrypted_data := dbms_obfuscation_toolkit.Des3encrypt ( 
                       input => piv_raw, key => utl_raw.cast_to_raw(piv_pass_key),
                       which => 1);

  dbms_output.Put_line ('Encrypted Data OBFS: ' 
                        || lv_encrypted_data);

  lv_encrypted_data := dbms_crypto.encrypt (src => piv_raw_orig,
      KEY => utl_raw.cast_to_raw(piv_pass_key), typ =>  dbms_crypto.des3_cbc_pkcs5);

  dbms_output.Put_line ('Encrypted Data CRYPTO: ' 
                        || (lv_encrypted_data));                            

  lv_decrypted_data := dbms_crypto.Decrypt (src => lv_encrypted_data,
      KEY => utl_raw.cast_to_raw(piv_pass_key), typ =>  dbms_crypto.des3_cbc_pkcs5);

  dbms_output.Put_line('Decrypted: ' || utl_raw.cast_to_varchar2(lv_decrypted_data)); 
END;

And the output:
Input_string->:apples
Without padding: 6170706C6573
After padding: 6170706C65730202
Encrypted Data OBFS: 36DEFCBBC60BC58A
Encrypted Data CRYPTO: CF7676DF282DCC5C
Decrypted: apples

As you can see, it appears the padding is being applied correctly (0202 present at the end of the After padding RAW), but DBMS_CRYPTO is producing a different result than the DBMS_OBFUSCATION_TOOLKIT.  Any ideas why?
Thanks in advance!
","  function ApplyPKCS5Padding (v_to_pad raw)
  return raw
  IS 
    a_var                       VARCHAR2 (100);
    num_padding_bytes               Int;
    padding_bytes               raw(100);
    test_byte                   raw(1);
    zero_byte                   raw(1);
    output                      raw(2000); 
  BEGIN                          
      -- Since DES needs data to be in multples of 8 bytes we pad the data, if the 
      -- data did not meet the 8 bytes boundry requirment.
      num_padding_bytes := MOD(Length(utl_raw.cast_to_varchar2(v_to_pad)),8);
      output := v_to_pad;

      IF (num_padding_bytes) != 0 THEN 
        padding_bytes := '';
        zero_byte := '0';

        test_byte := utl_raw.cast_to_raw(8-num_padding_bytes);
        test_byte := utl_raw.bit_and(test_byte, '0F');

        for lcntr in 1..8-num_padding_bytes
          loop
          padding_bytes := UTL_RAW.CONCAT(padding_bytes, test_byte);
          end loop;

          output := utl_raw.concat(v_to_pad, padding_bytes);
        ELSE
        padding_bytes := '0808080808080808';
        output := utl_raw.concat(v_to_pad, padding_bytes);
      END IF;

  return output;

  END;

The default IV is... I have no idea, but the OBFS toolkit and DBMS_CRYPTO have a different one.  I just had to specify it, I did the testing with a 0 IV.  Also, the default for OBFS is 2-key 3des, so I needed the which => 1 to change it to 3key.  Thanks for the help!
EDIT:
The original ""solution"" actually failed on Strings with length%8 == 0, due to a misinterpretation of the PKCS#7/5 spec...  I've update the solution above to show the entire/functioning code.
","628","<oracle><encryption><plsql><bit-manipulation><pkcs#7>","1","0","2","2013-08-01 09:44:26","17917563","0","","","","","2013-07-26 07:07:24",""
"36833012","How to read/extract signature details field from a signed PDF using java","As I'm working on an initiative project which verifies whether the document produced by the customer is tampered or not? Whose objectives are as follows:
1.To check the data integrity of content provided in the signed PDF ?
2.To validate whether the signature is tampered or not?
3.Also verifying whether the series of CA is valid by ensuring the revocation list 
I've gone through e-sign API document, Basics of PDF,Basics of X.509 certificate, OpenSSL tool (which helped only viewing X.509 certificate and not #PKCS7 standard format)
So can anyone please let me know How can I extract/read the signature dictionary from the signed PDF using Java?
Any other tool to achieve my objective is also okay but since I'm using java as language to code, it would be preferable in java.
Thanks in advance!
","","619","<java><pdf><openssl><itext><pkcs#7>","1","","0","2016-04-25 10:32:01","","0","","5725789","","2016-04-25 10:32:01","2016-04-25 05:58:09",""
"22063310","Adding authenticated attributes using MS CryptoApi","I'm struggling adding authenticated attributes (OCSP data) to my message using CryptoApi. I first used CryptoApi's simplified message functions, but now switch to the low-level message functions, thinking that I would be able to control the message structure better. But I am once again stuck. My process is as follows:

Initialize CMSG_SIGNER_ENCODE_INFO and CMSG_SIGNED_ENCODE_INFO structure
I create a CRYPT_ATTRIBUTE for the ocsp date and specifies it in the CMSG_SIGNER_ENCODE_INFO structure
I then call CryptMsgCalculateEncodedLength to get the size
CryptMsgOpenToEncode with CMSG_SIGNED as the message type
CryptMsgUpdate, to insert my content into the message
CryptMsgGetParam with CMSG_CONTENT_PARAM to get the encoded blob
CryptMsgClose, I'm done with the message for now.

I open the message again to get the CMSG_ENCRYPTED_DIGEST, which is sent to a TSA and the result is added as an unaunthenticated attribute using CryptMsgControl.
I'm using this to sign signature tags in Adobe. So when there is no authenticated attributes, I receive three green check from Adobe:

The document has not been modified...
The document is signed by the current user
The signature includes an embedded timestamp (and the timestamp is validate)

But as soon as the authenticated attribute is added the signer's identity is invalidated and the timestamp data in incorrect. The CMSG_COMPUTED_HASH_PARAM when authenticated attributes are added and when not, differs. Should this not be the same? Since the document digest is of the content of the document and not of the authenticated attribute.
Is there another way to add authenticated attributes? I've tried to add it as a signer using CryptMsgControl, but that did not help either...
","how about this step on adding the authenticated attributes for signing, example time stamping,
CryptEncodeObject(PKCS_7_ASN_ENCODING, szOID_RSA_signingTime, &curtime, pTime, &szTime);
pTime = (BYTE *)LocalAlloc(GPTR, szTime);
CryptEncodeObject(PKCS_7_ASN_ENCODING, szOID_RSA_signingTime, &curtime, pTime, &szTime);
time_blob.cbData = szTime;
time_blob.pbData = pTime;
attrib[0].pszObjId = szOID_RSA_signingTime;
attrib[0].cValue = 1;
attrib[0].rgValue = &time_blob;
CosignerInfo.cAuthAttr = 1;
CosignerInfo.rgAuthAttr = attrib;

and that Cosigner params is from CMSG_SIGNER_ENCODE_INFO CosignerInfo;
","608","<signing><cryptoapi><pkcs#7>","0","0","1","2014-12-11 19:14:22","","0","1","1699210","","2014-12-11 19:14:22","2014-02-27 08:47:48",""
"44684023","How do you decode/decrypt a SignedCMS/PKCS#7 in C# PCL","So, I have an WebAPI that is returning a PKCS#7 file to a client. The client is written as a C# PCL so it can be used in Xamarin iOS and Android projects.
My initial tests worked fine because I was encoding and decoding in my unit tests and could use the Pkcs library. It seems I can't find any way of decoding the data on the client because I don't know of any Pkcs library that works with a PCL.
Can someone tell me how/if this can be done?
","I currently use PCLCrypto to encrypt and decrypt using PKCS#7 on the client (in a Xamarin Forms project). I assume it will do what you need as well.
The PKCS#7 wiki example can be found here
","599","<c#><xamarin><asp.net-web-api2><portable-class-library><pkcs#7>","2","0","2","2017-06-22 14:12:49","44701963","0","1","","","","2017-06-21 18:51:09",""
"44684023","How do you decode/decrypt a SignedCMS/PKCS#7 in C# PCL","So, I have an WebAPI that is returning a PKCS#7 file to a client. The client is written as a C# PCL so it can be used in Xamarin iOS and Android projects.
My initial tests worked fine because I was encoding and decoding in my unit tests and could use the Pkcs library. It seems I can't find any way of decoding the data on the client because I don't know of any Pkcs library that works with a PCL.
Can someone tell me how/if this can be done?
","So, I did end up switching my project to .netstandard 1.4 and using Portable.BouncyCastle to decode the Cms created on the server side.
Here is the code that I used to decode the Cms. I'm sort of trusting that this is also checking the signature since there is no explicit method for doing that in BouncyCastle like there is via the framework code i.e. CheckSignature().
var cmsParser = new Org.BouncyCastle.Cms.CmsSignedDataParser(dataBytes);
var cmsSignedContent = cmsParser.GetSignedContent();
var contentStream = cmsSignedContent.ContentStream;
var memoryStream = new MemoryStream();
contentStream.CopyTo(memoryStream);
byte[] contentBytes = memoryStream.ToArray();
var decodedContent = Encoding.UTF8.GetString(contentBytes);

In addition I added this to verify the signer info:
cmsParser.GetSignedContent().Drain();
var certStore = cmsParser.GetCertificates(""Collection"");
var signerInfos = cmsParser.GetSignerInfos();
var signers = signerInfos.GetSigners();

foreach (SignerInformation signer in signers)
{
    var certCollection = certStore.GetMatches(signer.SignerID);
    foreach (Org.BouncyCastle.X509.X509Certificate cert in certCollection)
    {
        var result = signer.Verify(cert);
        if (!result)
        {
            throw new Exception(""Certificate verification error, the signer could not be verified."");
        }
    }
}

I'm not 100% sure if this is all I need to do but my client's will communicate via SSL and they are using an HMAC auth with an appId and client secret so I'm not so concerned with in transit issues. I'm basically transferring a ""license"" file and I want to make sure the contents are not tampered with after it has been saved on the client device.
If anyone has any suggestions or concerns with this please let me know.
Thanks.
","599","<c#><xamarin><asp.net-web-api2><portable-class-library><pkcs#7>","2","2","2","2017-06-22 14:12:49","44701963","0","1","","","","2017-06-21 18:51:09",""
"33165314","CryptoStream error Padding is invalid and cannot be removed","i have problem with my code.
Problem occures in function Decryptor.
FlushFinalBlock throw
""Padding is invalid and cannot be removed""
In function Decryptor i get myData of length 6048,
when line cryptoStream.Write(myData, 0, myData.Length); is done i get length 6032 in memoryStream
and then the line cryptoStream.FlushFinalBlock(); throws an error ""Padding is invalid and cannot be removed.""
As you can see i am using Padding = PaddingMode.PKCS7;
static RijndaelManaged rmCrypto;
static object lockCryptoStream = new object();

public static void SetrmCrypto()
{
    rmCrypto = new RijndaelManaged();
    rmCrypto.Padding = PaddingMode.PKCS7;
    rmCrypto.KeySize = 128;
    rmCrypto.Key = new ASCIIEncoding().GetBytes(""xxxxxxxxxxxxxxxx"");
    rmCrypto.IV = new ASCIIEncoding().GetBytes(""yyyyyyyyyyyyyyyy"");
}

public static byte[] Encryptor(byte[] myData)
{
    lock (lockCryptoStream)
    {
        using (var memoryStream = new MemoryStream())
        {
            using (var cryptoStream = new CryptoStream(memoryStream, rmCrypto.CreateEncryptor(rmCrypto.Key, rmCrypto.IV), CryptoStreamMode.Write))
            {
                cryptoStream.Write(myData, 0, myData.Length);
                cryptoStream.FlushFinalBlock();
                cryptoStream.Close();
                return memoryStream.ToArray();
            }
        }
    }
}

public static byte[] Decryptor(byte[] myData)
{
    lock (lockCryptoStream)
    {
        using (var memoryStream = new MemoryStream())
        {
            using (var cryptoStream = new CryptoStream(memoryStream, rmCrypto.CreateDecryptor(rmCrypto.Key, rmCrypto.IV), CryptoStreamMode.Write))
            {
                cryptoStream.Write(myData, 0, myData.Length);
                cryptoStream.FlushFinalBlock();
                cryptoStream.Close();
                return memoryStream.ToArray();
            }
        }
    }
}

Encryptor is used on server, and data are sent through UDP.
Client using Decryptor than decrypt the data.
Code works for most of the packets and lets say it works for some hours but then after while i get that error on Flushing.
","upper code works great. 
problem in my case was on server which was typed in c++ and i had problems with that encryption (thread problems on receiving and sending)
","598","<c#><pkcs#7><rijndaelmanaged><cryptostream>","0","0","1","2015-10-21 07:49:15","","1","","2983443","","2015-10-16 09:19:20","2015-10-16 07:57:48",""
"33856589","Verify RSA signature from PKCS#7 using Web Crypto","I'm trying to verify a PKCS#7 signature using JavaScript. I know PKCS#7 isn't supported by the Web Cryptography API, but I'm only trying to verify the raw RSA signature, not the complete PKCS#7 structure. 
I'm able to parse the PKCS#7, verify the certificate chain, extract the signed data and verify the signature using forge. I don't understand why this signature can't be verified using the Web Cryptography API.
Consider this example:
var publicKey_pem = ""\
    -----BEGIN PUBLIC KEY-----\n\
    MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyKy7Fm7M5eKVVsOWvpDY\n\
    7OrJ4WJY8kRupJFY2TmsfeOxcZTztx7igt3PRhUtk/P9hNbRge1Hh2lQbnlEozn3\n\
    i335jkGHoHbqGhBim6o4PUikByxEY46NEzxa0p4MdmnmcWh8oqhNH6k0T1ss1eAM\n\
    kCJZNwXqGM64+VuJ58k+H0f1NYFDmmnZVkXNeiRcS7T8MtJEDv0Kni06Brl9KMQa\n\
    xEUx1DLEwmTtW3tV/EA6erIYwpI/yWLdLxT/LxYdtAo9sx55sXXSgFKzTJkLwlhE\n\
    vrgVywIbOsmG0tcRw2NSP4R3XFpETxcwVRjkhbFpcDMjtjilEXZBrB8gaeI4gvX+\n\
    TwIDAQAB\n\
    -----END PUBLIC KEY-----""
    .replace(/^\s+/gm, """");

var signature_b64 = ""\
    nuzPQx94kofXoc3TZlcBH+bAFG6b73cq9OXvGeE/mQ4qRDeWPKWZNC0HfkKtSyng\n\
    kTBWRDw7GeIvOQTY9OXtHunnrn3epPO+HzTmDpCwvv0oNVxoTPlnuBuLzP1mpuIT\n\
    RIgiOJ/xTEqzpjwoCG/HxySb5n4KNu3ii4XB+c914x6V/YU3wDCt60+p71QW3tz0\n\
    lvQPlG3CoMouSYi7sGhAdJMPJA1J5B24FAdqCrOB3xXTuX++HqH0fe6eR5cuzDJN\n\
    xkkjV+GDciyVPSrQb42gf9gl7qtOLvhrwor7efin+FhlWvL5plLn53Ao04scghTf\n\
    hZZLxrEkliWG5E3iGarvXA==""
    .replace(/(\n|\x20)/g, """");

var data_b64 = ""\
    MYGxMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE1\n\
    MTExNjAwNTMxMFowLwYJKoZIhvcNAQkEMSIEIMcfOGYfrzbx+5cHx8CvoxB6M+25\n\
    Jd+QuGubzoJJjts7MEYGCyqGSIb3DQEJEAITMTcwNTAzMDEwLzALBglghkgBZQME\n\
    AgEEIJ3unWyG0PypTJy/MC9YWBUFjDUAG9AdNs1Byq3tpp23""
    .replace(/(\n|\x20)/g, """");

// using forge 0.7.x
var pki = forge.pki,
    util = forge.util,
    md = forge.md,
    raw = util.binary.raw;
var publicKey = pki.publicKeyFromPem(publicKey_pem);
var signature = new util.ByteBuffer(atob(signature_b64));
var data = new util.ByteBuffer(atob(data_b64));

var hash = md.createMessageDigest(""sha256"")
    .update(data).digest();
var verified = publicKey.verify(hash, signature,
    ""RSASSA-PKCS1-V1_5"");
console.info(""Verification using forge: "" + verified);

var modulus_b64 = ""\
    yKy7Fm7M5eKVVsOWvpDY7OrJ4WJY8kRupJFY2TmsfeOxcZTztx7igt3PRhUtk/P9\n\
    hNbRge1Hh2lQbnlEozn3i335jkGHoHbqGhBim6o4PUikByxEY46NEzxa0p4Mdmnm\n\
    cWh8oqhNH6k0T1ss1eAMkCJZNwXqGM64+VuJ58k+H0f1NYFDmmnZVkXNeiRcS7T8\n\
    MtJEDv0Kni06Brl9KMQaxEUx1DLEwmTtW3tV/EA6erIYwpI/yWLdLxT/LxYdtAo9\n\
    sx55sXXSgFKzTJkLwlhEvrgVywIbOsmG0tcRw2NSP4R3XFpETxcwVRjkhbFpcDMj\n\
    tjilEXZBrB8gaeI4gvX+Tw==""
    .replace(/(\n|\x20|=)/g, """")
    .replace(/\//g, ""_"")
    .replace(/\+/g, ""-"");

var key = {
    kty: ""RSA"",
    alg: ""RS256"",
    e: ""AQAB"",
    n: modulus_b64
};
var algo = {
    name: ""RSASSA-PKCS1-v1_5"",
    hash: {name: ""SHA-256""}
};
var use = [""verify""];

var crypto = window.crypto.subtle;
crypto.importKey(""jwk"", key, algo, false, use).then(function(publicKey) {
    var sig = raw.decode(signature.copy().getBytes());
    var dat = raw.decode(data.copy().getBytes());
    return crypto.verify(algo, publicKey, sig, dat);
}).then(function(res) {
    console.info(""Verification using Web Crypto: "" + res);
}, function(error) {
    console.error(error);
});

Verification using forge succeeds but verification using the Web Cryptography API fails. I don't see how this could be because they are using the same algorithm specification.
I am able to verify signatures generated by the Web Cryptography API using OpenSSL. Examining the two signatures using OpenSSL there's a slight difference:
# verify the external signature using OpenSSL
openssl rsautl -in sig.bin -verify -inkey pub.pem -pubin -asn1parse

    0:d=0  hl=2 l=  47 cons: SEQUENCE          
    2:d=1  hl=2 l=  11 cons:  SEQUENCE          
    4:d=2  hl=2 l=   9 prim:   OBJECT            :sha256
   15:d=1  hl=2 l=  32 prim:  OCTET STRING      
      0000 - 83 8f e4 de ba 8b b7 24-7a db 6d 43 12 c8 57 f5   .......$z.mC..W.
      0010 - 9c 80 1d 53 1b bf 7e 66-a3 d8 d6 fa ee 2a 4e 8a   ...S..~f.....*N.

# verify the web crypto signature using OpenSSL
openssl rsautl -in sig.bin -verify -inkey pub.pem -pubin -asn1parse

    0:d=0  hl=2 l=  49 cons: SEQUENCE          
    2:d=1  hl=2 l=  13 cons:  SEQUENCE          
    4:d=2  hl=2 l=   9 prim:   OBJECT            :sha256
   15:d=2  hl=2 l=   0 prim:   NULL              
   17:d=1  hl=2 l=  32 prim:  OCTET STRING      
      0000 - a5 91 a6 d4 0b f4 20 40-4a 01 17 33 cf b7 b1 90   ...... @J..3....
      0010 - d6 2c 65 bf 0b cd a3 2b-57 b2 77 d9 ad 9f 14 6e   .,e....+W.w....n

Could this be the cause of the problem? If so, can the external signature be converted to the encoding used by the Web Cryptography API?
","","595","<javascript><openssl><rsa><pkcs#7><webcrypto-api>","3","","0","2015-11-22 15:36:01","","0","1","","","","2015-11-22 15:36:01",""
"29351173","How to edit Java BC CMSSignedData PKCS#7?","I have a BouncyCastle CMSSignedData object represented as PKCS#7 signed data.
How can I edit the CMSSignedData to remove the value (octet string) of contentInfo 
(OID 1.2.840.113549.1.7.1)?
","Method CMSSignedDataGenerator.generate() is using CMSObjectIdentifiers.signedData [1.2.840.113549.1.7.2] as contentType when constructing a CMSSignedData object. You could rewrite CMSSignedDataGenerator.java or better craft your own generator class and use a different ObjectIdentifier.
The bcpkix sources are available at bouncycastle.
Note that id-signedData is the official RFC 5652 content type for signed-data CMS  objects:
id-signedData OBJECT IDENTIFIER ::=
{ iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs7(7) 2 }

","582","<bouncycastle><signed><pkcs#7><oid>","1","1","1","2015-12-29 22:23:14","29357786","0","","4370109","","2015-12-29 22:23:14","2015-03-30 16:16:42",""
"17206425","Sign PDF file with PKCS7 detached using smart card C#","I have ID smart card with SDK, the SDK is signing the binary content of the file and returns signature as byte array.
I used PKCS7 detached method supported by the SDK, the private key is not accessible, how can I add the signature bytes array to the pdf file? 
","","577","<c#><smartcard><pkcs#7>","0","","0","2013-06-20 06:09:03","","3","","","","","2013-06-20 06:09:03",""
"43227984","iOS/Swift x509 certificate, sign string","I have x509 certificate (.crt) and private key (.key)
I need to sign some string using a certificate in PKCS#7 detached signature(UTF8)
Can you explain how to distribute certificate (key) and sign?
UPDATE: it seems that i need analog of Cryptographic Message Syntax Services for iOs
Is openSsl only one way to sign message using certificate?
","","560","<ios><swift><certificate><signing><pkcs#7>","2","","0","2017-04-11 15:35:52","","1","","2664167","","2017-04-11 15:35:52","2017-04-05 10:04:19",""
"53243943","Understand why pkcs7 block failed during verification using openssl","I've got PKCS#7 Der formatted file called p7 
and an x509 certificate file called mroot.der.cer which matches the root certificate of p7 chain.
I'd like to verify my p7 certificate chain using openssl using the following commands :
First - convert my mroot trusted cert file to pem format. 
openssl x509 -in mroot.der.cer -inform der -outform PEM -out mroot.pem.cer

Second - verify the root chain using mroot.pem.cer
openssl  smime -verify -CAfile mroot.pem.cer -in p7 -inform DER -out blabla

However, I got the following error : 

Verification failure
  140735569544136:error:21075075:PKCS7 routines:PKCS7_verify:certificate verify error:/BuildRoot/Library/Caches/com.apple.xbs/Sources/libressl/libressl-22.50.2/libressl/crypto/pkcs7/pk7_smime.c:343:Verify error:unable to get local issuer certificate

I also tried to add the last command, the  -noverify flag but got a different error. 

Verification failure
  140735569544136:error:21071065:PKCS7 routines:PKCS7_signatureVerify:digest failure:/BuildRoot/Library/Caches/com.apple.xbs/Sources/libressl/libressl-22.50.2/libressl/crypto/pkcs7/pk7_doit.c:1084:
  140735569544136:error:21075069:PKCS7 routines:PKCS7_verify:signature failure:/BuildRoot/Library/Caches/com.apple.xbs/Sources/libressl/libressl-22.50.2/libressl/crypto/pkcs7/pk7_smime.c:412:

The pkcs7 structure should be fine as I've extracted it from the PE file iexlorer.exe and from its chain I've extracted the root certificate, and refer to it as a trusted one. 
What am I doing wrong here ? 
P.s. 
To observe the same failures I did, I've uploaded the files to the following links : 
https://ufile.io/vrqpt
https://ufile.io/ajgex
","Your uploaded example files have a few properties which prevent it from being verified.
First, the certificate of the signer in the p7 file has expired on Apr 24 22:33:39 2014 GMT. You will have to disable checking of the expiration date if you want to verify the chain. This is programmatically done with the verify flag X509_V_FLAG_NO_CHECK_TIME, or the option -no_check_time for the OpenSSL smime -verify tool.
Then, your ""root of trust"", found in the mroot.pem.cer file is not the right one. You extracted the Microsoft Time-Stamp PCA certificate whereas the signer of the p7 file chains up to the Microsoft Code Signing PCA certificate.
Let's say that you extract that correct certificate to a file called trust.pem.cer. That certificate is not self-signed: its issuer is the Microsoft Root Certificate Authority. You will have to indicate that you are using a so-called partial chain if you want such a certificate to be at the end of the chain.  This is programmatically done with the verify flag X509_V_FLAG_PARTIAL_CHAIN, or the option -partial_chain for the OpenSSL smime -verify tool.
Also, it looks like the OpenSSL implementation of the PKCS7 verification requires your certificate to include the extended key usage of S/MIME signing, which your certificate does not include. It looks like this can be worked around by setting a code-signing purpose for the OpenSSL X509_STORE. The OpenSSL smime -verify tool does not expose this kind of setting so you will have to do this programmatically by setting the XKU_CODE_SIGN purpose. XKU stands for eXtended Key Usage and, as a caveat, the OpenSSL documentation around that is virtually non-existent. You have to thoroughly test this if you decide to use it.
The piece of code below (return code checking omitted) successfully verifies the certificate chain in your p7 file, but not the signature:
BIO *bio_p7 = BIO_new_file(""p7"", ""r"");
PKCS7 *p7 = d2i_PKCS7_bio(bio_p7, NULL);
X509_STORE *store = X509_STORE_new();
X509_LOOKUP *lookup = X509_STORE_add_lookup(store, X509_LOOKUP_file());
X509_LOOKUP_load_file(lookup, ""trust.pem.cer"", X509_FILETYPE_PEM);
X509_STORE_set_purpose(store, XKU_CODE_SIGN); /* see caveat above */
X509_VERIFY_PARAM_set_flags(
    X509_STORE_get0_param(store),
    X509_V_FLAG_NO_CHECK_TIME | X509_V_FLAG_PARTIAL_CHAIN);
int retcode = PKCS7_verify(p7, NULL, store, NULL, NULL, PKCS7_NOSIGS);

For a verification of the signature itself: the function verify_pe_pkcs7() in osslsigncode.c gives example code to do that. Its PKCS7_verify() invocation does not verify the certificate chain, but it does check the signature. This requires extraction of a hash which is stored in a Microsoft-specific element in the p7 of a type called SpcIndirectDataContent, as pointed out by @dave_thompson_085 below. It is possible to verify the signature that was taken over that hash. For a complete verification, you will also need to re-calculate the hash over the PE file itself and compare it to the hash value found in the p7. 
This answer is based on OpenSSL 1.1.1. Just now, I realize that you are using libressl, which is based on a (much) older version of OpenSSL. It might not work in your case. For example, for my version of libressl, the smime -verify tool does not support the partial_chain and no_time_check options because those were introduced in the OpenSSL 1.1.0 branch.
","559","<openssl><x509certificate><pkcs#7>","1","2","1","2018-11-13 03:05:11","53246954","0","1","4333809","","2018-11-10 22:26:35","2018-11-10 22:12:32",""
"48253497","iText7: How to verify signature in detached PKCS7?","I am writing a service that receives PKCS7 data (extracted from signed PDF documents) and needs to verify it. 
I am using iText7 PdfPKCS7 for that, but the signature verification always fails. I can read all other information from the PKCS7 (certificates, timestamps etc., I have verified that also with OpenSSL). Only the signature appears as invalid.
Here's the test case:
public static void main(String[] args) throws IOException, GeneralSecurityException,
    NoSuchFieldException, IllegalArgumentException, IllegalAccessException {

    Logger logger = Logger.getLogger(PKCS7Test.class.getName());

    BouncyCastleProvider provider = new BouncyCastleProvider();
    Security.addProvider(provider);

    String path =""/tmp/signed.pdf"";

    PdfDocument pdf = new PdfDocument(new PdfReader(path));
    SignatureUtil signatureUtil = new SignatureUtil(pdf);
    List<String> names = signatureUtil.getSignatureNames();
    String outerRevisionName = names.get(names.size()-1);

    PdfPKCS7 pkcs7In = signatureUtil.verifySignature(outerRevisionName);

    boolean isValidSignature = pkcs7In.verify();
    logger.log(Level.INFO, ""pkcs7In signature is "" + ((isValidSignature)?"""":""not "") + ""valid"");

    // get hash of original document       
    Field digestAttrField = PdfPKCS7.class.getDeclaredField(""digestAttr"");
    digestAttrField.setAccessible(true);
    byte[] originalDigest = (byte[]) digestAttrField.get(pkcs7In);

    // get pkcs7 structure of original signature                
    PdfDictionary dict = signatureUtil.getSignatureDictionary(outerRevisionName);        
    PdfString contents = dict.getAsString(PdfName.Contents);
    byte [] originalBytes = contents.getValueBytes();
    String originalPkcs7 = Base64.getEncoder().encodeToString(originalBytes);

    // now reverse process and import PKCS7 data back into object
    byte[] pkcs7Bytes = Base64.getDecoder().decode(originalPkcs7);
    PdfPKCS7 pkcs7Out = new PdfPKCS7(pkcs7Bytes, PdfName.Adbe_pkcs7_detached, provider.getName());

    isValidSignature = pkcs7Out.verify();
    logger.log(Level.INFO, ""pkcs7Out signature is "" + ((isValidSignature)?"""":""not "") + ""valid"");

    // get hash of original document from imported signature     
    digestAttrField = PdfPKCS7.class.getDeclaredField(""digestAttr"");
    digestAttrField.setAccessible(true);
    byte [] importedDigest = (byte[]) digestAttrField.get(pkcs7Out);

    logger.log(Level.INFO, ""Hash values are "" + ((Arrays.areEqual(originalDigest, importedDigest))?"""":""not "") + ""equal"");

The output is invariably:
pkcs7In signature is valid
pkcs7Out signature is not valid
Hash values are equal

I suppose I'm doing something wrong with the import, but just can't find out what...
Btw. /tmp/signed.pdf validates OK (signature and content) in other PDF tools (Adobe DC, PdfOnline etc.)
Edit:
I tried to verify the signature with BouncyCastle, which fails too ...
    CMSSignedData signature = new CMSSignedData(pkcs7Bytes);        

    Store                   certStore = signature.getCertificates();
    SignerInformationStore  signers = signature.getSignerInfos();
    Collection              c = signers.getSigners();
    Iterator                it = c.iterator();

    while (it.hasNext())
    {
        SignerInformation   signer = (SignerInformation)it.next();
        Collection          certCollection = certStore.getMatches(signer.getSID());

        Iterator              certIt = certCollection.iterator();
        X509CertificateHolder cert = (X509CertificateHolder)certIt.next();

       try {
            signer.verify(new JcaSimpleSignerInfoVerifierBuilder().setProvider(""BC"").build(cert));
        }
        catch (Exception ex) {
            logger.log(Level.INFO, ""Failed to verify with: "" + cert.getSubject().toString() + "": "" + ex.getLocalizedMessage());
            byte [] contentDigest = signer.getContentDigest();
            bi = new BigInteger(1, contentDigest);
            String hash = String.format(""%0"" + (contentDigest.length << 1) + ""x"", bi);
            logger.log(Level.INFO, ""Bouncycastle Hash from pkcs7Out is {0}"", hash);
        }
    }

The result is Failed to verify with: ... message-digest attribute value does not match calculated value, and the hash value obviously differs from the real one...
Edit 2:
Workaround by adding separate verify(byte[] msgDigestBytes) method to PdfPKCS7:
public boolean verify(final byte[] msgDigestBytes) throws GeneralSecurityException {
    if (verified)
        return verifyResult;
    if (isTsp) {
        TimeStampTokenInfo info = timeStampToken.getTimeStampInfo();
        MessageImprint imprint = info.toASN1Structure().getMessageImprint();
        byte[] md = msgDigestBytes; // was: messageDigest.digest();
        byte[] imphashed = imprint.getHashedMessage();
        verifyResult = Arrays.equals(md, imphashed);
    } else {
        if (sigAttr != null || sigAttrDer != null) {
            // was: final byte[] msgDigestBytes = messageDigest.digest();
            boolean verifyRSAdata = true;
            // Stefan Santesson fixed a bug, keeping the code backward compatible
            boolean encContDigestCompare = false;
            if (rsaData != null) {
                verifyRSAdata = Arrays.equals(msgDigestBytes, rsaData);
                encContDigest.update(rsaData);
                encContDigestCompare = Arrays.equals(encContDigest.digest(), digestAttr);
            }
            boolean absentEncContDigestCompare = Arrays.equals(msgDigestBytes, digestAttr);
            boolean concludingDigestCompare = absentEncContDigestCompare || encContDigestCompare;
            boolean sigVerify = verifySigAttributes(sigAttr) || verifySigAttributes(sigAttrDer);
            verifyResult = concludingDigestCompare && sigVerify && verifyRSAdata;
        } else {
            if (rsaData != null)
                sig.update(msgDigestBytes); // was: sig.update(messageDigest.digest());
            verifyResult = sig.verify(digest);
        }
    }
    verified = true;
    return verifyResult;
}

For this to work, I need the originally signed hash of the document from a trusted source, which in my case I have. Does this still verify that the signature made over the hash is correct?
","From 
PdfPKCS7 pkcs7Out = new PdfPKCS7(pkcs7Bytes, PdfName.Adbe_pkcs7_detached, provider.getName());

isValidSignature = pkcs7Out.verify();

you cannot expect a proper validation result of the signature: This PdfPKCS7 only knows the CMS signature container, the signature SubFilter, and the security provider to provide algorithm implementations. Thus, it has no information on the very PDF the signature actually is meant to sign. So that piece of code has no means to validate the signature in question, in particular not whether it properly signs its alleged signed data!
If you want to validate the signature using that PdfPKCS7 object, you have to finish initializing it so it does have the required information from the PDF.
To see what is required have a look at the SignatureUtil method verifySignature:
PdfPKCS7 pk = null;
if (sub.equals(PdfName.Adbe_x509_rsa_sha1)) {
    PdfString cert = signature.getPdfObject().getAsString(PdfName.Cert);
    if (cert == null)
        cert = signature.getPdfObject().getAsArray(PdfName.Cert).getAsString(0);
    pk = new PdfPKCS7(PdfEncodings.convertToBytes(contents.getValue(), null), cert.getValueBytes(), provider);
}
else
    pk = new PdfPKCS7(PdfEncodings.convertToBytes(contents.getValue(), null), sub, provider);
updateByteRange(pk, signature);
PdfString date = signature.getDate();
if (date != null)
    pk.setSignDate(PdfDate.decode(date.toString()));
String signName = signature.getName();
pk.setSignName(signName);
String reason = signature.getReason();
if (reason != null)
    pk.setReason(reason);
String location = signature.getLocation();
if (location != null)
    pk.setLocation(location);

Thus, you have to 

update the digest of the signed data like SignatureUtil.updateByteRange does; this is the step that informs the PdfPKCS7 object about the actually signed data to allow actual validation; and
copy several pieces of information from the signature dictionary to the PdfPKCS7 object; for validation purposes in particular the signing time may be of interest.

","546","<java><pdf><itext7><pkcs#7>","0","2","1","2018-01-16 14:20:28","48254083","2","","6427954","","2018-01-16 14:20:28","2018-01-14 19:47:10",""
"9426418","How to read pkcs#7 file properly","I have a file with detached pkcs#7 signature of size 267 bytes. I create it after executing 
CryptSignMessage(
    &SigParams,
    TRUE,
    1,
    MessageArray,
    MessageSizeArray,
    pbSignedMessageBlob,
    &cbSignedMessageBlob)

function and then I write content of pbSignedMessageBlob:
pbSignedMessageBlob[cbSignedMessageBlob] = '\0';
 FILE *file;
 file = fopen(""c:\\path\\sign_pkcs7.pk7"", ""wb"");
 fwrite(pbSignedMessageBlob, sizeof(BYTE), cbSignedMessageBlob, file);
 fclose(file);

Then I try to verify this signature and read this file:
BYTE *pkcsContent;
FILE *file3;
file3 = fopen(""c:\\users\\timur\\desktop\\sign_pkcs7.pk7"", ""rb"");
pkcsContent = MyReadFile(file3, cbArray);
BYTE* MyReadFile(FILE *f, DWORD &len)
{
    size_t result;
    BYTE *buffer;
    if (f == NULL) 
    {
        fputs (""File error"", stderr); 
        exit (1);
    }

fseek (f, 0, SEEK_END);
len = ftell (f);
rewind (f);

//buffer = (BYTE*) malloc (sizeof(char)*lSize);
buffer = new BYTE[len + 1];
if (buffer == NULL) 
{
    fputs (""Memory error"", stderr); 
    exit (2);
}

result = fread (buffer, 1, len, f);
if (result != len) 
{
    fputs (""Reading error"",stderr); 
    exit (3);
}
buffer[len] = '\0';

fclose (f);

    return buffer;
}

But the file content I get into pkcsContent is only 37 bytes length.
I also tried to manage files using std::fstream, but result is the same. Maybe the way I'm writing file to disk is wrong?
","Are you trying to compute the length of pkcsContent with strlen (this is my guess since you're null-terminating the buffer in MyReadFil)? You can't do that because PKCS#7 is binary data and it can contain 0 anywhere.
","542","<c++><io><cryptoapi><pkcs#7>","0","0","1","2012-02-24 07:20:01","","0","","983507","","2012-02-24 06:40:38","2012-02-24 06:32:45",""
"42026850","Any way to obtain the EC2 Identity Document private key?","Is it possible to obtain the private key used to sign the EC2 Identity Document (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-identity-documents.html) from within the instance, or in any other way? Assuming that one signs the Identity Document with this key I'm looking for, the OpenSSL command would be:
openssl smime -sign -in document.txt -out document.p7 -outform pem -nodetach -inkey <private_key> -signer AWSpubkey

Where <private_key> is the key I'm looking for.
I'm trying to determine if someone could potentially forge the PKCS7 signature in http://169.254.169.254/latest/dynamic/instance-identity/pkcs7 by creating a document.txt and signing it with the private key.
Thanks.
","I'm pretty sure the point of Amazon doing this is that they don't publish the private key so there is no way for someone to forge the signature. Unless there are some breakthroughs in quantum computing soon, you should be confident that the signature hasn't been forged.
There's a different Stack Exchange site where you are more likely to have your question answered by a cryptographic specialist. 
","539","<amazon-web-services><amazon-ec2><openssl><certificate><pkcs#7>","1","0","1","2017-02-03 14:57:58","42027086","2","","","","","2017-02-03 14:45:36",""
"38392800","Embeding Sigend data with pdf using iText","I have a encoded signed data in a string ("" >MIILwwYJKoZIhvcNAQcCoIILtDCCC7ACAQExDzANB........ "")
And I need to combine it with the pdf for signatures.
I am using following code
public class MyExternalSignatureContainer  implements ExternalSignatureContainer {
 protected byte[] sig;
 // String b64String;

    public MyExternalSignatureContainer(byte[] sig) {
    this.sig = sig;
}

@Override
public void modifySigningDictionary(PdfDictionary arg0) {
}

/**
String PKCS7Resp = ""MIILwwYJKoZIhvcNAQcCoIILtDCCC7ACAQEx.........;
Base64Encoder b = new Base64Encoder();
    byte[] signedData = b.decode(PKCS7Resp.getBytes());

    PdfReader reader = new PdfReader(""D:\\AADHAAR.pdf"");
    FileOutputStream os = new FileOutputStream(""D:\\AADHAAR1.pdf"");

    ExternalSignatureContainer external = new MyExternalSignatureContainer(signedData);
    MakeSignature.signDeferred(reader, ""}"", os, external);

 *
 * @param arg0
 * @return
 * @throws GeneralSecurityException
 */
 @Override
public byte[] sign(java.io.InputStream in) throws GeneralSecurityException {
    throw new UnsupportedOperationException(""Not supported yet.""); //To change body of generated methods, choose Tools | Templates.
}

public static void main(String [] args) throws DocumentException, IOException, GeneralSecurityException{
      Base64Encoder b = new Base64Encoder();
        byte[] signedData = b.decode(PKCS7Resp.getBytes());
       PdfReader reader = new PdfReader(""D:\\AADHAAR.pdf"");
      FileOutputStream os = new FileOutputStream(""D:\\AADHAAR1.pdf"");          
      ExternalSignatureContainer external = new MyExternalSignatureContainer(signedData);
         MakeSignature.signDeferred(reader, ""}"", os, external);
         }
          }

but its showing error
Exception in thread ""main"" com.itextpdf.text.DocumentException: No field
at com.itextpdf.text.pdf.security.MakeSignature.signDeferred(MakeSignature.java:246)
at test.MyExternalSignatureContainer.main(MyExternalSignatureContainer.java:131)
  C:\Users\admin\AppData\Local\NetBeans\Cache\8.1\executor-snippets\run.xml:53: Java returned: 1

BUILD FAILED (total time: 1 second)
In line    

MakeSignature.signDeferred(reader, ""}"", os, external);

Reference code
KeyStore ks = KeyStore.getInstance(""pkcs12"");
ks.load(new FileInputStream(""my_private_key.pfx""), ""my_password"".toCharArray());
String alias = (String)ks.aliases().nextElement();
PrivateKey key = (PrivateKey)ks.getKey(alias, ""my_password"".toCharArray());
Certificate[] chain = ks.getCertificateChain(alias);
PdfReader reader = new PdfReader(""original.pdf"");
FileOutputStream fout = new FileOutputStream(""signed.pdf"");
PdfStamper stp = PdfStamper.createSignature(reader, fout, '\0');
PdfSignatureAppearance sap = stp.getSignatureAppearance();
sap.setCrypto(key, chain, null, PdfSignatureAppearance.WINCER_SIGNED);
sap.setReason(""I'm the author"");
sap.setLocation(""Lisbon"");
// comment next line to have an invisible signature
sap.setVisibleSignature(new Rectangle(100, 100, 200, 200), 1, null);
sap.setExternalDigest(new byte[128], new byte[20], ""RSA"");
sap.preClose();
MessageDigest messageDigest = MessageDigest.getInstance(""SHA1"");
byte buf[] = new byte[8192];
int n;
InputStream inp = sap.getRangeStream();
while ((n = inp.read(buf)) > 0) {
   messageDigest.update(buf, 0, n);
}
byte hash[] = messageDigest.digest();
PdfSigGenericPKCS sg = sap.getSigStandard();
PdfLiteral slit = (PdfLiteral)sg.get(PdfName.CONTENTS);
byte[] outc = new byte[(slit.getPosLength() - 2) / 2];
PdfPKCS7 sig = sg.getSigner();
Signature sign = Signature.getInstance(""SHA1withRSA"");
sign.initSign(key);
sign.update(hash);
sig.setExternalDigest(sign.sign(), hash, ""RSA"");
PdfDictionary dic = new PdfDictionary();
byte[] ssig = sig.getEncodedPKCS7();
System.arraycopy(ssig, 0, outc, 0, ssig.length);
dic.put(PdfName.CONTENTS, new PdfString(outc).setHexWriting(true));
sap.close(dic);

Am i doing it wrong?
","In your first step you create a signature field with an automatically generated name:
sap.setVisibleSignature(new Rectangle(100, 100, 200, 200), 1, null);

Confer the associated JavaDocs:

/**
 * Sets the signature to be visible. It creates a new visible signature field.
 * @param pageRect the position and dimension of the field in the page
 * @param page the page to place the field. The fist page is 1
 * @param fieldName the field name or <CODE>null</CODE> to generate automatically a new field name
 */
public void setVisibleSignature(Rectangle pageRect, int page, String fieldName)


Later on, though, you act as if the signature field name was ""}"":
MakeSignature.signDeferred(reader, ""}"", os, external);

Confer the associated JavaDocs:

/**
 * Signs a PDF where space was already reserved.
 * @param reader the original PDF
 * @param fieldName the field to sign. It must be the last field
 * @param outs the output PDF
 * @param externalSignatureContainer the signature container doing the actual signing. Only the 
 * method ExternalSignatureContainer.sign is used
 * @throws DocumentException
 * @throws IOException
 * @throws GeneralSecurityException 
 */
public static void signDeferred(PdfReader reader, String fieldName, OutputStream outs, ExternalSignatureContainer externalSignatureContainer) throws DocumentException, IOException, GeneralSecurityException


Thus, change your code to make those names match, i.e. either use a fixed name you know not to be used by some other form field in the document or query the generated name used by iText using the PdfSignatureAppearance method

/**
 * Gets the field name.
 * @return the field name
 */
public java.lang.String getFieldName()


","538","<java><itext><digital-signature><pkcs#7>","-1","0","1","2016-07-16 22:15:20","","10","2","6184985","","2016-07-16 04:37:41","2016-07-15 09:38:58",""
"44874341","PHP openssl_pkcs7_verify Not Working","I`m using pkcs7 to sign a document and everything works fine, the problem is that the command to verify the sign is not working, always return false. I try to use the terminal command into the file and works fine.
Sign command:
openssl_pkcs7_sign(
    $tempdoc,
    $tempsign,
    $this->signature_data['signcert'],
    array($this->signature_data['privkey'],
    $this->signature_data['password']),
    array(),
    PKCS7_BINARY | PKCS7_DETACHED);

Verify command:
openssl_pkcs7_verify($tempsign, PKCS7_NOVERIFY)

Terminal command:
openssl pkcs7 -inform DER -in signature.pkcs7 -print_certs -text


EDIT 1

I make tests in my code and discover if i create my sign with only PKCS7_DETACHED or PKCS7_BINARY works fine the verify, but both together i receive the error. Why this is happening?
","Here with PHP 7 i can reproduce your problem. With both flags the verify fails. 
Maybe THIS URL can help you., this part talks about it.

SMIME -sign ""detached"" ""attaches"" content similarly as-is  with
  -binary and text-canonicalized without, and signs that.  SMIME -verify recognizes ""detached"", but (in multi_split)  always canonicalizes both
  parts before using them. For content  that was sent noncanonical (with
  -sign -binary or equivalent)  this changes the signed content, and verify fails.  Content that was canonical as sent (originally
  canonical  or canonicalized by sender) does verify and similarly  is
  output without determining if sender changed it.

In the docs you can read that the parser isn't that smart:

BUGS
The MIME parser isn't very clever: it seems to handle most messages
  that I've thrown at it but it may choke on others.

Hope it helps!
","534","<php><pkcs#7><php-openssl>","6","3","1","2017-07-06 19:33:14","44957430","5","1","4601342","","2017-07-04 16:05:21","2017-07-02 19:15:07",""
"54356538","How to extract and verify PDF signature (PKCS7) with openssl?","I would like to detect signed PDFs in PHP and verify if the signature is valid. From this document I have written this PHP code below. 
What it does is: 

Extract the PKCS7 code (it works because I can get the details from Openssl)
Compute the SHA256 hash of the document. 

At the end I has a PKCS7 file and a SHA256. 
Now, I would like to verify my signature against my PKCS7 file. How can I do this? I initially looked to the digest_enc_alg/sha256WithRSAEncryption/enc_digest, but it seems it is not what I am looking about. 
class VerifyPDF
{
    public static function getByteRange($filename)
    {
        $content = file_get_contents($filename);
        if (!preg_match_all('/ByteRange\[\s*(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s*\]/',
            $content, $matches))
        {
            throw new \Exception('Unable to get certificate');
        }

        return [
            intval($matches[1][0]), // Offset of the first part (usually 0)
            intval($matches[2][0]), // Size of the first part
            intval($matches[3][0]), // Offset to the second part
            intval($matches[4][0])  // Size of the second part
        ];
    }

    public static function get_pkcs7($filename)
    {
        [$o1, $l1, $o2, $l2] = self::getByteRange($filename);

        if (!$fp = fopen($filename, 'rb')) {
            throw new \Exception(""Unable to open $filename"");
        }

        $signature = stream_get_contents($fp, $o2 - $l1 - 2, $l1 + 1);
        fclose($fp);

        file_put_contents('out.pkcs7', hex2bin($signature));
    }

    public static function compute_hash($filename)
    {
        [$o1, $l1, $o2, $l2] = self::getByteRange($filename);

        if (!$fp = fopen($filename, 'rb')) {
            throw new \Exception(""Unable to open $filename"");
        }

        $i = stream_get_contents($fp, $l1, $o1);
        $j = stream_get_contents($fp, $l2, $o2);

        if (strlen($i) != $l1 || strlen($j) != $l2) {
            throw new \Exception('Invalid chunks');
        }

        fclose($fp);

        return hash('sha256', $i . $j);
    }
}

The HASH I get is:
5036ae43aba11ce626f6f9b1d5246ba0700e217655b9ff927e31fbefadfa2182

So inspired from this I did the following: 
#!/bin/bash
PKCS7='out.pkcs7'

# Extract Digest (SHA256)
OFFSET=$(openssl asn1parse -inform der -in $PKCS7 | \
    perl -ne 'print $1 + $2 if /(\d+):d=\d\s+hl=(\d).*?256 prim.*HEX DUMP/m')
dd if=$PKCS7 of=signed-sha256.bin bs=1 skip=$OFFSET count=256

# Extract Public key 
openssl pkcs7 -print_certs -inform der -in $PKCS7 | \
    tac | sed '/-----BEGIN/q' | tac > client.pem
openssl x509 -in client.pem -pubkey -noout > client.pub.pem

# Verify the signature
openssl rsautl -verify -pubin -inkey client.pub.pem < signed-sha256.bin > verified.bin

# Get Hash and compare with the computed hash from the PDF
openssl asn1parse -inform der -in verified.bin | grep -Po '\[HEX DUMP\]:\K\w+$' | tr A-F a-f

Which gives me this:
C8581962753927BB57B66B1D0D0F4B33A29EF3E03DA12D2329DB72763AC7EDB6

So unfortunately by two hashes do not match...
Am I missing something?
","The blog you were inspired from shows the following graphics to explain the PKCS#7 signature container structure

Actually, though, this represents only the most simple structure defined by PKCS#7. If you look at the SignerInfo specification (content - signerInfos - SignerInfo), you'll see
   SignerInfo ::= SEQUENCE {
     version Version,
     issuerAndSerialNumber IssuerAndSerialNumber,
     digestAlgorithm DigestAlgorithmIdentifier,
     authenticatedAttributes
       [0] IMPLICIT Attributes OPTIONAL,
     digestEncryptionAlgorithm
       DigestEncryptionAlgorithmIdentifier,
     encryptedDigest EncryptedDigest,
     unauthenticatedAttributes
       [1] IMPLICIT Attributes OPTIONAL }

(RFC 2315 section 9.2 ""SignerInfo type"")
In particular there are the OPTIONAL authenticatedAttributes which you don't find in the sketch above. But in any current signature profile to be taken seriously these authenticatedAttributes (aka signed attributes) are actually required!
Furthermore, if there are authenticatedAttributes in a PKCS#7 signature container signer info object, the encrypted digest is not the digest of the document data but instead the digest of the authenticatedAttributes structure. In this case the digest of the document data is stored as the value of a specific signed attribute, the ""messageDigest"" attribute. Thus, in this case you try to extract the wrong value to compare the document digest with.
For example in case of the example document you shared in your follow-up question there are authenticatedAttributes, so the inspiring blog led you astray.
","530","<php><bash><pdf><digital-signature><pkcs#7>","0","1","1","2019-01-28 17:07:44","54406999","1","","2612235","","2019-01-25 08:38:44","2019-01-24 22:51:16",""
"49451395","Swift (Linux): Extract CMS/PKCS#7 Certs and Validate Container Signature?","I am writing a set of services in Swift 4 that will run on Linux.  One of the things I need to do is receive a payload that is digitally signed using the Cryptographic Message Syntax (CMS) format, extract the certificate used to sign it, and then validate the signature.  I know that Swift on Linux doesn't contain a Security or CommonCrypto framework for this sort of thing, so I've linked in OpenSSL to try and help with this.  I'm about 2 years removed from my C/C++ programming days, so I readily admit I'm in over my head on this portion of the code.
I have 2 simple classes to act as wrappers for OpenSSL BIO and PKCS7 data structures.  They look like this:
import Foundation
import OpenSSL

public final class BIOWrapper {

    public var bio = BIO_new(BIO_s_mem())

    public init(data: Data) {
        data.withUnsafeBytes { pointer -> Void in
            BIO_write(self.bio, pointer, Int32(data.count))
        }
    }

    public init() {}

    deinit {
        BIO_free(self.bio)
    }
}

public final class PKCS7Wrapper {

    public var pkcs7: UnsafeMutablePointer<PKCS7>

    public init(pkcs7: UnsafeMutablePointer<PKCS7>) {
        self.pkcs7 = pkcs7
    }

    deinit {
        PKCS7_free(self.pkcs7)
    }
}

I am able to successfully extract the PKCS#7 container data and validate that the data type code value is NID_pkcs7_signed using this code:
let reqData = Data(bytes: reqBytes)
        guard reqData.count > 0 else {
            print(""Empty request body"")
            return nil
        }

        let bioWrapper = BIOWrapper(data: reqData)
        guard let container = d2i_PKCS7_bio(bioWrapper.bio, nil) else {
            print(""No container"")
            return nil
        }

        let pkcs7Wrapper = PKCS7Wrapper(pkcs7: container)
        let dataTypeCode = OBJ_obj2nid((pkcs7Wrapper.pkcs7.pointee.d.sign).pointee.contents.pointee.type)
        print(""dataTypeCode : \(dataTypeCode)"")

        if dataTypeCode == NID_pkcs7_data {
            print(""GOT DATA!"")
        } else {
            print(""Didn't get data"")
            return nil
        }

       let pkcs7SignedTypeCode = OBJ_obj2nid(pkcs7Wrapper.pkcs7.pointee.type)
        if let signed = pkcs7SignedTypeCode == NID_pkcs7_signed {
            print(""Signed : \(signed)"")
        }

However, I've now reached a point where I'm stuck.  How can I obtain the X.509 certificate data from the PKCS#7 payload?  I can see that the pkcs7Wrapper.pkcs7.pointee.d.sign.pointee.cert data structure should contain the certificate chain data.  Its data type is UnsafeMutablePointer<stack_st_x509> and I think I can figure out the code to use OpenSSL's PKCS7_verify method once I get the X.509 certificate data in memory.  I just don't know how to do THAT part.
I found this resource that talks about validating receipts on OSX/iOS that touches on a lot of the same issues.  They obtain the X.509 certificate from the file system and pass the data into the PKCS7_verify method.  I just need to know how to get the certificate data from the PKCS#7 container to pass in.
Can anyone help me with this?  I recognize that calling C from Swift is not ideal, but in the absence of a good security/cryptography framework for Swift I'm not aware of any other options.
","The core part of the answer is in the code you linked:
let store = X509_STORE_new()
X509_STORE_add_cert(store, appleRootX509)
OpenSSL_add_all_digests()
let result = PKCS7_verify(receiptPKCS7, nil, store, nil, nil, 0)
if result != 1 {
    log.atLevelDebug(id: 0, source: ""Main"", message: ""Receipt signature verification failed"")
    exit(errorCode)
}

What you seem to be missing is the fact that you don't have to extract the X509 certificate from the PKCS7 data yourself. The PKCS7_verify function will do it as part of verification:

An attempt is made to locate all the signer's certificates, first looking in the certs parameter (if it is not NULL) and then looking in any certificates contained in the p7 structure itself. If any signer's certificates cannot be located the operation fails.

Therefore the only certificate you need to load yourself is the root certificate which you have observed they load from the file system in the linked code.
If you still really need a Swift solution to extract the certificate out of the PKCS7 data for some reason, you will have to build an ASN.1 parser for PKCS7. Not sure if this is readily available for Swift, this simple code is what a quick search yielded, and this is a nice description of the PKCS7 data.
","516","<c><swift><openssl><digital-signature><pkcs#7>","7","4","1","2018-03-27 02:39:12","49503557","4","2","","","","2018-03-23 14:01:06",""
"7348118","Apple Live Streaming, encryption and padding to PKCS7","I've written a segmenter and have just added AES encryption, but I'm a little puzzled by the PKCS7 padding. When playing on the iPad, I get glitches every 12 seconds, which is my segment length.
If my file is 4 bytes short of being on a 16 byte boundary, I add 0x04 x 4.
If it's 8 bytes short I add 0x08 x 8.
If it's 12 bytes short I add 0x0c x 12.
I then encrypt the package using the multiple of 16 size, is this correct?
Next question is, do I send the full encoded packet, so it's a multiple of 16, or do I send the real length (before padding)?
","","508","<encryption><aes><http-live-streaming><pkcs#7>","2","","0","2014-01-21 22:23:22","","5","","881229","","2014-01-21 22:23:22","2011-09-08 12:37:36",""
"31266416","Error in compiling a certificate verifier program","I want to compile this program in IntelliJ IDE. But it returns the following three errors:
1.for this line :
CertStore certs = s.getCertificatesAndCRLs(""Collection"", ""BC"");

this error:
error: cannot find symbol method getCertificatesAndCRLs(String,String)

2.for this line:
Collection certCollection = certs.getCertificates(signer.getSID());

this error:
error: method getCertificates in class CertStore cannot be applied to given types;
required: CertSelector
found: SignerId
reason: actual argument SignerId cannot be converted to CertSelector by method invocation conversion

3.and for this line:
if (signer.verify(cert.getPublicKey(), ""BC"")) verified++;

this error:
error: method verify in class SignerInformation cannot be applied to given types;
required: SignerInformationVerifier
found: PublicKey,String
reason: actual and formal argument lists differ in length


These are my imports top of my program :
import java.io.*;
import java.util.*;
import java.security.*;
import java.security.Security;
import java.security.cert.*;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.cms.*;

and I am added jdk1.7.0_15 libraries + bcpkix-jdk15on-151.jar and bcprov-jdk16-1.45.jar to my project. 
Can anybody please help me to handle this issues?
","Please follow the following steps. Hope it will help you because it is tested.

Step 01: 
Read byte array from file or convert data object to byte array. 
Sample Code: 
FileInputStream fis = new FileInputStream(file);
byte fileContent[] = new byte[(int)file.length()];
fis.read(fileContent);

Step 02: 
create CMSSignedData object from the byte array. 
Sample Code: 
CMSSignedData data = new CMSSignedData(fileContent);

Step 03: 
Get CertStore from the CMSSignedData. 
Sample Code:
CertStore certs = data.getCertificatesAndCRLs(""Collection"", ""BC"");

Be sure to add BouncyCastleProvider in Security at the first:
Security.addProvider(new BouncyCastleProvider());'

Step 04: 
Get Certificate collection using Signer Information. 
Sample Code:
SignerInformation signer = (SignerInformation) i.next();
Collection<? extends Certificate> certCollection = certs.getCertificates(signer.getSID());

Step 05: 
Verify sign from signer for each certificate. 
Sample Code:
if (signer.verify(new JcaSimpleSignerInfoVerifierBuilder().setProvider(""BC"").build(cert)) ) 
{   
     }

 
Please check that, to fulfuill your objective, you have completed above steps.

I am guessing, either you are making CMSSignedData from wrong data input or the dependent libraries are conflicting each other (most probable cause). I have used bcprov-jdk16-1.46.jar and bcmail-jdk16-1.46.jar to complete all the tasks.
","499","<java><digital-signature><pkcs#7>","1","0","1","2015-07-10 06:08:46","","2","","147024","","2015-07-07 19:51:17","2015-07-07 10:46:00",""
"46689478","Sign pdf asynchronously using digest","I'm trying to do the following setup for signing pdfs, broken down into asynchronous steps between a client and a server:

A server receives a pdf and computes it's digest.
Server sends the digest to a client.
Client signs the hash at a later time.
Client sends the signature to server.
Server embeds the signature into the pdf.

I'm basing myself mainly in PDF Signature digest and Create pkcs7 signature from file digest
The second question allowed me to write most of the code, however I'm getting that the integrity of the file has been compromised. I can't seem to serialize the intermediary pdf for embedding the signature later (to make sure no timestamps are altered, etc). But from the first SO question, it seems to be a harder problem than I thought. Can it actually be done? 
I'm using pdfbox.
Server code:
        PDDocument document = PDDocument.load(documentFile);
        PDSignature signature = new PDSignature();
        signature.setFilter(PDSignature.FILTER_ADOBE_PPKLITE);
        signature.setSubFilter(PDSignature.SUBFILTER_ADBE_PKCS7_DETACHED);
        signature.setName(""Example User"");
        signature.setLocation(""Los Angeles, CA"");
        signature.setReason(""Testing"");
        Calendar date = Calendar.getInstance();
        signature.setSignDate(date);
        document.addSignature(signature);

        ExternalSigningSupport externalSigningSupport = document.saveIncrementalForExternalSigning(null);

        byte[] content = IOUtils.toByteArray(externalSigningSupport.getContent());
        MessageDigest md = MessageDigest.getInstance(""SHA256"", new BouncyCastleProvider());
        byte[] digest = md.digest(content); // this is sent to client

What I'm basically doing is sending that digest to the client to sign and then on the server redoing the above steps and setting the client signature:
        ExternalSigningSupport externalSigning = document.saveIncrementalForExternalSigning(fos);
        externalSigning.setSignature(encodedSignature); // encodedSignature is received from client and computed based on the digest sent by the server

This setup ends up with the integrity of the file being corrupted, since I'm creating a new PDSignature once I have the encodedSignature on the server to embed it. Is there a way to serialize the PDDocument created after calling addSignature, so I can later deserialize it on the server and add the client's  signature?
","
What I'm basically doing is sending that digest to the client to sign and then on the server redoing the above steps and setting the client signature

If you want those above steps to generate identical documents, you need to

make sure the inputs to those steps are identical and
provide the same revision id seed value.

If you do so, the outputs of the above steps are identical as is required for your task.
Making sure the inputs are identical
One step of your above steps is prone to result in different inputs:
Calendar date = Calendar.getInstance();
signature.setSignDate(date);

To guarantee identical inputs, you have to determine date only once and use that single value every time you execute those steps for the same signing transaction.
Providing the same revision id seed value
As recommended by the specification, PDFBox attempts to give each PDF revision its unique ID. In the case at hand, though, we need the same revision ID both times the above steps are executed.
Fortunately, PDFBox allows us to provide the seed value it uses to make the revision ID unique enough. 
As we don't want to same revision ID all the time we sign the same document but merely during the current signing transaction, we should use the same seed value only in the same transaction. As the seed value is a long, we can simply use the time in milliseconds corresponding to the date already discussed above, i.e.:
pdDocument.setDocumentId(date.getTimeInMillis());

","484","<java><pdf><pdfbox><pkcs#7>","1","2","1","2017-10-12 09:51:19","46706529","0","5","","","","2017-10-11 13:28:23",""
"56013953","How to verify a file and a p7s detached signature with openssl?","Would be possible to validate a file with p7s detached signature? I'm trying to do that using Openssl, but I got a default message about openssl and unknown option -verify
here is my command:
openssl pkcs7 -inform DER -verify -noverify -in file.docx.p7s -out file.docx
is this possible to do a file verification and p7s signature using openssl?
-- edit...
Just to let you know. I got an p7s file with an pdf file. I'd like to know how to validate that.
","Finally, I understand a litte bit about p7s file. This is pretty common to securing e-mail messages, but, I can use p7s files, that contains an PKCS#7 detached signatures with an certificate, to ensure the veracity of a file.
So, I sepparate my explanation, in parts to get easy to explain what I'm doing here. Please, correct me if there's something wrong!
First, Initial Config:

create private key and certificate

openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365


Add to trusted certificates, to let openssl allow your certificate as valid

sudo cp cert.pem /usr/local/share/ca-certificates/
sudo update-ca-certificates

Second, Creating an p7s File

Run the command below to sign an pdf file, with private key, certificate and generate an p7s file that contains a signed hash of file and the certificate 

openssl smime -sign -in test.pdf -inkey key.pem -outform DER -binary -signer cert.pem -out test.pdf.p7s

Finally, Verifying p7s File

Now, I have to extract pkcs7 signature from p7s file

openssl pkcs7 -inform der -in test.pdf.p7s -out test.pdf.pkcs7


After that, I extracted the certificate from pkcs7 file

openssl pkcs7 -print_certs -in test.pdf.pkcs7 -out test.pdf.pkcs7.cert


Then, verify pkcs7, certificate and file together. Just to validate if that file belongs to that certificate

openssl smime -verify -binary -inform PEM -in test.pdf.pkcs7 -content test.pdf -certfile test.pdf.pkcs7.cert -nointern -noverify > /dev/null

PS.: To remove this certificate, just run the commands below. This will remove and update the certificates
sudo rm -f /usr/local/share/ca-certificates/cert.pem
sudo update-ca-certificates --fresh

","483","<openssl><ssl-certificate><pkcs#7>","0","0","1","2019-05-07 03:49:47","56015231","0","","2130322","","2019-05-07 00:54:10","2019-05-07 00:22:16",""
"47483413","Invalid PKCS #7 block padding found when using Crypto++","We are using the code below with the Crypto++ library. We need to encrypt and decrypt char*. Encryption is working fine without any issue and we are able to get the cipher text. But getting an error while decrypting as ""invalid pkcs #7 block padding found"". What could be the issue...?
Encryption Block:
char* cspl_crypto::encrypt_rijndael(byte key[], byte iv[], int keysize, char plainText[], int plainTextSize)
{
    vector<byte> cipher;

    std::vector<byte> plain(plainText, plainText + plainTextSize);

    CBC_Mode<AES>::Encryption enc; 
    enc.SetKeyWithIV(key, keysize, iv, keysize);

    // Make room for padding
    cipher.resize(plain.size()+AES::BLOCKSIZE);
    ArraySink cs(&cipher[0], cipher.size());

    ArraySource(plain.data(), plain.size(), true,
        new StreamTransformationFilter(enc, new Redirector(cs)));

    // Set cipher text length now that its known
    cipher.resize(cs.TotalPutLength());
    char returnValue[cipher.size()];
    copy(cipher.begin(), cipher.end(), returnValue);

    return returnValue;
}

Decyption Block:
char* cspl_crypto::decrypt_rijndael(byte key[], byte iv[], int keysize, char cipher[], int size )
{
    std::vector<byte> v(cipher, cipher + size);
    vector<byte> recover;
    CBC_Mode<AES>::Decryption dec;
    dec.SetKeyWithIV(key, keysize, iv, keysize);

    // Recovered text will be less than cipher text
    recover.resize(v.size());
    ArraySink rs(&recover[0], recover.size());

    ArraySource(v.data(), v.size(), true,
        new StreamTransformationFilter(dec, new Redirector(rs)));

    // Set recovered text length now that its known
    recover.resize(rs.TotalPutLength());

    char returnValue[recover.size()];
    copy(recover.begin(), recover.end(), returnValue);

    return returnValue;
}

","","481","<c++><encryption><crypto++><pkcs#7>","0","","0","2017-11-27 13:43:36","","2","0","608639","","2017-11-27 13:43:36","2017-11-25 06:55:17",""
"47474980","Invalid PKCS #7 block padding when using Crypto++","We are using cryptopp library. We are using the below coding. Encryption is working file without any issue and we are able to get the cipher text. But getting an error while decrypting as ""Block padding found"". What could be the issue...?
#include <iostream>
#include <string>
using namespace std;

#include ""cryptlib.h""
#include ""filters.h""
#include ""files.h""
#include ""modes.h""
#include ""hex.h""
#include ""aes.h""
#include ""osrng.h""
using namespace CryptoPP;
using CryptoPP::AutoSeededRandomPool;

class cspl_crypto{

public:
  cspl_crypto();
  byte* generate_block(int size);
  char* encrypt_rijndael(byte[], byte[], int, char*, int);
  char* decrypt_rijndael(byte[], byte[], int, char*, int);
  string readFile();
  void writeFile(string);
};

cspl_crypto::cspl_crypto()
{

}

int main(int argc, char* argv[])
{
  vector<byte> plain;
  cspl_crypto ccrypto;
  AutoSeededRandomPool prng;

    byte key[AES::DEFAULT_KEYLENGTH];
    prng.GenerateBlock(key, sizeof(key));

    byte iv[AES::BLOCKSIZE];
    prng.GenerateBlock(iv, sizeof(iv));

Converting string to char *
  string str(""testing""); //ccrypto.readFile()
char plainArray[str.size()];
strcpy(plainArray, str.c_str());

char* cipher  = ccrypto.encrypt_rijndael(key, iv, sizeof(key), plainArray, 
sizeof(plainArray));

//char cipherCharArray[cipherText.size()];
// strcpy(cipherCharArray, cipherText.c_str());

char* recover = ccrypto.decrypt_rijndael(key, iv, sizeof(key), cipher, 
sizeof(cipher));

// cout << ""Recovered text: "" << recoverText << endl;

  return 0;
}

Encryption Block:
char* cspl_crypto::encrypt_rijndael(byte key[], byte iv[], int keysize, char 
plainText[], int plainTextSize){
    vector<byte> cipher;

       std::vector<byte> plain(plainText, plainText + plainTextSize);

    CBC_Mode<AES>::Encryption enc;
enc.SetKeyWithIV(key, keysize, iv, keysize);

// Make room for padding
cipher.resize(plain.size()+AES::BLOCKSIZE);
ArraySink cs(&cipher[0], cipher.size());

ArraySource(plain.data(), plain.size(), true,
        new StreamTransformationFilter(enc, new Redirector(cs)));

// Set cipher text length now that its known
cipher.resize(cs.TotalPutLength());
    char returnValue[cipher.size()];
    copy(cipher.begin(), cipher.end(), returnValue);

    return returnValue;
}

Decyption Block:
char* cspl_crypto::decrypt_rijndael(byte key[], byte iv[], int keysize, char 
cipher[], int size ){
 std::vector<byte> v(cipher, cipher + size);
 vector<byte> recover;
  CBC_Mode<AES>::Decryption dec;
  dec.SetKeyWithIV(key, keysize, iv, keysize);

  // Recovered text will be less than cipher text
  recover.resize(v.size());
  ArraySink rs(&recover[0], recover.size());

  ArraySource(v.data(), v.size(), true,
    new StreamTransformationFilter(dec, new Redirector(rs)));

  // Set recovered text length now that its known
  recover.resize(rs.TotalPutLength());

        char returnValue[recover.size()];
        copy(recover.begin(), recover.end(), returnValue);

    return returnValue;
}

Library:
string cspl_crypto::readFile(){

  string line;
  string returnValue = """";
  ifstream myfile (""N07.txt"");
  if (myfile.is_open())
  {
    while ( getline (myfile,line) )
    {
      returnValue +=  line + '\n';
    }
    myfile.close();
  }

  else returnValue = ""Unable to open file""; 

return returnValue;

}

","","462","<c++><encryption><crypto++><pkcs#7>","0","","0","2017-11-27 13:47:55","","2","","608639","","2017-11-27 13:47:55","2017-11-24 14:07:23",""
"48090064","OpenSSL::PKCS7::PKCS7Error: decrypt error","smime = OpenSSL::PKCS7.read_smime(File.read('encrypted_smime.p7m'))
p_key = OpenSSL::PKey::RSA.new(File.read('pr_key.pem'))
cert = OpenSSL::X509::Certificate.new(File.read('cert.pem'))
smime.decrypt(p_key, cert)

In the decrypt line above, I am getting the error OpenSSL::PKCS7::PKCS7Error: decrypt error.
I am not sure why this error is causing, as I am able to decrypt the smime using openssl command line tool properly. Also I have verified that the cert I am using is signed using the same private key that I am using in p_key.
Following is the command which is getting me the expected output -
openssl smime -decrypt -in encrypted_smime.p7m -inkey pr_key.pem -out decrypt_smime.pem

What is the problem, and how do I fix it?
","","456","<ruby><encryption><openssl><pkcs#7><smime>","0","","0","2018-01-04 07:21:22","","3","","608639","","2018-01-04 07:21:22","2018-01-04 06:49:31",""
"45372197","Which is the equivalent openssl commad to this c# signing code","I have the following code to sign a file:
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Cryptography.X509Certificates;
using System.Security.Cryptography.Pkcs;
using System.Text;
using System.Threading.Tasks;
using Disig.TimeStampClient;
using System.Xml.Linq;

namespace ClientTest
{
    class Program
    {
        static void Main(string[] args)
        {

            var certificate = GetCertificate(""mycert.pfx"", ""password"");
            var data = File.ReadAllBytes(""data.bin"");
            var signature = ComputeSignature(data, certificate);
            SavePemSignature(signature, ""file-signature.pem"");
        }

        static void SavePemSignature(byte[] signature, string filePath)
        {
            var base64 = Convert.ToBase64String(signature);
            using (var writer = new StreamWriter(filePath, false, Encoding.Default))
            {

                writer.WriteLine(""-----BEGIN CMS-----"");
                var pos = 0;
                while (pos < base64.Length)
                {
                    var len = Math.Min(64, base64.Length - pos);
                    var line = base64.Substring(pos, len);
                    writer.WriteLine(line);
                    pos += len;
                }
                writer.WriteLine(""-----END CMS-----"");
            }
        }



        static byte[] ComputeSignature(byte[] data, X509Certificate2 certificate)
        {
            if (data == null) throw new ArgumentNullException(""data"");
            if (certificate == null)
                throw new ArgumentNullException(""certificate"");
            ContentInfo content = new ContentInfo(data);
            SignedCms signedCms = new SignedCms(content, true);
            CmsSigner signer = new CmsSigner(SubjectIdentifierType.SubjectKeyIdentifier, certificate);
            signer.DigestAlgorithm = System.Security.Cryptography.Oid.FromFriendlyName(""SHA256"", System.Security.Cryptography.OidGroup.HashAlgorithm);
            signedCms.ComputeSignature(signer);
            return signedCms.Encode();
        }

        static X509Certificate2 GetCertificate(string filePath, string password)
        {
            X509Certificate2Collection collection = new X509Certificate2Collection();
            collection.Import(filePath, password, X509KeyStorageFlags.PersistKeySet);
            var cert = collection.Cast<X509Certificate2>()
                .FirstOrDefault(x => x.PrivateKey != null && x.Extensions.OfType<X509KeyUsageExtension>().FirstOrDefault(c => (c.KeyUsages & X509KeyUsageFlags.DigitalSignature) == X509KeyUsageFlags.DigitalSignature) != null);
            return cert;
        }
    }
}

Which is the equivalent openssl command?
I tried the following, but I had not luck, the pem files are different:
openssl cms -in data.bin -sign -signer mycert.pem -md SHA256 -binary -noattr -outform pem -out file-signature.pem

","","453","<c#><openssl><digital-signature><pkcs#7>","0","","0","2017-07-28 11:24:33","","4","","","","","2017-07-28 11:20:26",""
"30484162","How to use SHA256 during signing with OpenSSL::PKCS7.sign?","I need to use sha256 instead of the default sha1. How to override the same?
pkcs7 = OpenSSL::PKCS7.sign certificate, private_key, content 
signed = OpenSSL::PKCS7.write_smime pkcs7, content
pkcs7 = OpenSSL::PKCS7.encrypt receiver_certificate, signed, OpenSSL::Cipher::Cipher::new(""des-ede3-cbc"")
encrypted_data = OpenSSL::PKCS7.write_smime pkcs7

This the code that I have tried, I have 2 things to be done. Need to override the signing algorithm and also the encryption algorithm. In the code I have mentioned OpenSSL::Cipher::Cipher::new(""des-ede3-cbc""), but that I not working, the encryption happening is aes-256-cbc.
","","452","<ruby-on-rails><ruby><openssl><pkcs#7>","1","","0","2015-05-28 20:59:17","","2","","608639","","2015-05-28 20:59:17","2015-05-27 13:37:16",""
"21290975","CMS (PKCS#7) RecipientInfo","I am actually working on a function which should extract RecipientInfo from PKCS7 mime encrypted message. The reason why I want to do this is, that I want to get all mail addresses (or at least the keyids/fingerprints) the message is encrypted for.
Well - I tried something out and created something like this (indata is a *.p7m attachment content, indata_len the strlen of indata):
char *indata;
int indata_len, i;
PKCS7 *p7 = NULL;
BIO *bcont = NULL;
CMS_ContentInfo *cms = NULL;
STACK_OF(CMS_RecipientInfo) *recipients = NULL;
CMS_RecipientInfo *recip = NULL;
BIO *encMessage = BIO_new(BIO_s_mem());
if (encMessage == NULL) {
    goto clean_exit;
}

if(!BIO_write(encMessage, indata, indata_len)) {
    goto clean_exit;
}

cms = SMIME_read_CMS(encMessage,NULL);
if (cms == NULL ) {
    goto clean_exit;
}

recipients = CMS_get0_RecipientInfos(cms);
if (recipients == NULL) {
    goto clean_exit;
}

for (i=0; i< sk_CMS_RecipientInfo_num(recipients); i++) {
    recip = sk_CMS_RecipientInfo_value(recipients, i);
    if( recip == NULL || CMS_RecipientInfo_type(recip) != CMS_RECIPINFO_TRANS ) {
        continue;
    }

    int r;
    ASN1_OCTET_STRING **keyid;
    X509_NAME **issuer;
    ASN1_INTEGER **sno;

    r = CMS_RecipientInfo_ktri_get0_signer_id(recip, keyid, issuer, sno);
    if (!r) {
        continue;
    }

    printf(""Key: %s\n"", keyid);
}

I get no error (checked with ERR_get_error()) but keyid, issuer and sno stay ""null"", output of above code is:

Key: (null)

So my question is, is it even possible to get that information of an encrypted message or is there just an error in reasoning on my side?
If it is possible to get that data, can someone give me a hint?
If it is not possible, whats the default (best) way to check which private key to use for decryption. Since there can be more than one S/Mime certificate/key for a single user. E.g. creating new key since the old one is lost or just get a new cert/key combination from provider, ...
Imho, looping through all keys could take some time if the message is really big.
Best regards,
Max
","So does nobody know the best way to detect which recipient key has to be used to decrypt the received message if there are more than one? 
","451","<c><encryption><openssl><pkcs#7><smime>","2","0","2","2019-04-24 14:16:34","","0","1","1328527","","2014-01-22 18:36:23","2014-01-22 18:26:24",""
"21290975","CMS (PKCS#7) RecipientInfo","I am actually working on a function which should extract RecipientInfo from PKCS7 mime encrypted message. The reason why I want to do this is, that I want to get all mail addresses (or at least the keyids/fingerprints) the message is encrypted for.
Well - I tried something out and created something like this (indata is a *.p7m attachment content, indata_len the strlen of indata):
char *indata;
int indata_len, i;
PKCS7 *p7 = NULL;
BIO *bcont = NULL;
CMS_ContentInfo *cms = NULL;
STACK_OF(CMS_RecipientInfo) *recipients = NULL;
CMS_RecipientInfo *recip = NULL;
BIO *encMessage = BIO_new(BIO_s_mem());
if (encMessage == NULL) {
    goto clean_exit;
}

if(!BIO_write(encMessage, indata, indata_len)) {
    goto clean_exit;
}

cms = SMIME_read_CMS(encMessage,NULL);
if (cms == NULL ) {
    goto clean_exit;
}

recipients = CMS_get0_RecipientInfos(cms);
if (recipients == NULL) {
    goto clean_exit;
}

for (i=0; i< sk_CMS_RecipientInfo_num(recipients); i++) {
    recip = sk_CMS_RecipientInfo_value(recipients, i);
    if( recip == NULL || CMS_RecipientInfo_type(recip) != CMS_RECIPINFO_TRANS ) {
        continue;
    }

    int r;
    ASN1_OCTET_STRING **keyid;
    X509_NAME **issuer;
    ASN1_INTEGER **sno;

    r = CMS_RecipientInfo_ktri_get0_signer_id(recip, keyid, issuer, sno);
    if (!r) {
        continue;
    }

    printf(""Key: %s\n"", keyid);
}

I get no error (checked with ERR_get_error()) but keyid, issuer and sno stay ""null"", output of above code is:

Key: (null)

So my question is, is it even possible to get that information of an encrypted message or is there just an error in reasoning on my side?
If it is possible to get that data, can someone give me a hint?
If it is not possible, whats the default (best) way to check which private key to use for decryption. Since there can be more than one S/Mime certificate/key for a single user. E.g. creating new key since the old one is lost or just get a new cert/key combination from provider, ...
Imho, looping through all keys could take some time if the message is really big.
Best regards,
Max
","I don't know how to fix your code, but I have a couple of openssl commands and a python script to solve your task:
You can run the following command to get the list of all serial numbers
of the recipient keys in an encrypted file MYMAIL:
openssl smime -pk7out -inform DER -in MYMAIL \
    | openssl pkcs7 -noout -print \
    | grep serial

This will print the serial number as decimal numbers of all recipients, i.e. serial numbers of certificates for which the file MYMAIL has been encrypted for. For a given certificate file CERTFILE.0, the command
openssl x509 -in CERTFILE.0 -serial -noout

prints its serial number as a hexadecimal number. Now, you can to combine the serial numbers of the certificates you have with the serial numbers mentioned in MYMAIL.
I've wrote a python script that does this and that can be used to replace the default smime_decrypt_command in mutt, such that when decrypting an E-Mail, the correct private key is chosen for decryption: https://github.com/t-wissmann/dotfiles/blob/master/utils/smime-recipient-list.py
For the case that the url breaks, I'm pasting the entire script below.
#!/usr/bin/env python3
""""""
Given an smime encrypted file and some smime certificates,
tell for which of the smime certificates, the encrypted file has been
encrypted for.
""""""

import argparse
import os
import re
import subprocess
import sys
import textwrap

class Openssl:
    def __init__(self, openssl_command):
        self.openssl_command = openssl_command

    def get_certificate_serial_number(self, certificate_file):
        """"""Given a certificate_file filepath, return its serial number as an int""""""
        command = [self.openssl_command, 'x509', '-in', certificate_file, '-serial', '-noout']
        proc = subprocess.run(command, stdout=subprocess.PIPE)
        # output should be of the form 'serial=HEXADECIMALNUMBER'
        try:
            return int(proc.stdout.decode().replace('serial=', ''), 16)
        except ValueError:
             print(""Can not read file: {}"".format(certificate_file), file=sys.stderr)

    def smime_pk7out(self, encrypted_file):
        """"""run smime -pk7out, return its output""""""
        command = [self.openssl_command, 'smime', '-pk7out']
        command += ['-inform', 'DER', '-in', encrypted_file]
        proc = subprocess.run(command, stdout=subprocess.PIPE)
        return proc.stdout.decode()

    def pkcs7_serial_numbers(self, pk7buf):
        """"""extract all serial numbers via openssl pkcs7 -noout -print""""""
        command = [self.openssl_command, 'pkcs7', '-noout', '-print']
        proc = subprocess.run(command, stdout=subprocess.PIPE, text=True, input=pk7buf)
        for match in re.finditer('serial: ([0-9]+)', proc.stdout):
            yield int(match.group(1))

    def list_recipient_serial_numbers(self, encrypted_file):
        """"""Do essentially:
            openssl smime -pk7out -inform DER -in MYMAIL \
                | openssl pkcs7 -noout -print \
                | grep serial
        """"""
        pk7out = self.smime_pk7out(encrypted_file)
        return list(self.pkcs7_serial_numbers(pk7out))

    def smime_decrypt(self, private_key, certificate, filepath, passin='stdin'):
        """"""encrypt the given filepath and print to stdout""""""
        command = [self.openssl_command, 'smime', '-decrypt', '-passin', passin]
        command += ['-inform', 'DER', '-in', filepath]
        command += ['-inkey', private_key]
        command += ['-recip', certificate]
        subprocess.run(command)

def main():
    """"""main""""""
    description = ""Detect recipients of smime encrypted files""
    epilog = textwrap.dedent(r""""""
    E.g. you can decrypt an email with the command that picks the
    private key automatically:

        {} \
            --passin stdin --decrypt \
            --private-key ~/.smime/keys/* \
            -- mymail ~/.smime/certificates/*

    If you use mutt, you can set

    set smime_decrypt_command=""\
        ~/path/to/smime-recipient-list.py --passin stdin --decrypt \
        --private-key ~/.smime/keys/* \
        -- %f ~/.smime/certificates/KEYPREFIX.*""

    where KEYPREFIX is the prefix of your key (i.e. without the .0 or .1 suffix).
    """""".format(sys.argv[0]))
    parser = argparse.ArgumentParser(
        description=description,
        epilog=epilog,
        formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('encryptedfile', help='the encrypted file')
    parser.add_argument('certificates',
                        nargs='+',
                        help='the smime certificate files')
    parser.add_argument('--openssl', default='openssl', help='openssl command name')
    parser.add_argument('--list-serials', action='store_true',
                        help='list serial numbers of certifacts')
    parser.add_argument('--print-path', action='store_true',
                        help='print path of recipient certificates')
    parser.add_argument('--private-keys', nargs='*', default=[], help='private keys for decrypt')
    parser.add_argument('--decrypt', action='store_true',
                        help='decrypt using one of the private keys passed.\
                              the key must have the same file name as the certificate.')
    parser.add_argument('--passin', default='stdin',
                        help='default openssl -passin parameter for decrypt')
    args = parser.parse_args()
    openssl = Openssl(args.openssl)

    # get the serial number of every smime-certfile:
    serialnum2cert = {}
    for i in args.certificates:
        serialnum2cert[openssl.get_certificate_serial_number(i)] = i
    if args.list_serials:
        for serialnum, keyfile in serialnum2cert.items():
            print(""{} --> {}"".format(keyfile, serialnum))
    recipients = openssl.list_recipient_serial_numbers(args.encryptedfile)
    if args.print_path or args.decrypt:
        matching_keys = []
        for i in recipients:
            if i in serialnum2cert:
                matching_keys.append(serialnum2cert[i])
    if args.print_path:
        for i in matching_keys:
            print(i)
    if args.decrypt:
        private_keys = {}
        for filepath in args.private_keys:
            private_keys[os.path.basename(filepath)] = filepath
        key_found = None
        for fp in matching_keys:
            if os.path.basename(fp) in private_keys:
                priv_key_path = private_keys[os.path.basename(fp)]
                # print(""We can use {} and {}"".format(priv_key_path, fp))
                key_found = (priv_key_path, fp)
        if key_found is None:
            print(""No matching private key found."", file=sys.stderr)
            sys.exit(1)
        openssl.smime_decrypt(key_found[0], key_found[1],
                              args.encryptedfile, passin=args.passin)

if __name__ == ""__main__"":
    main()

","451","<c><encryption><openssl><pkcs#7><smime>","2","0","2","2019-04-24 14:16:34","","0","1","1328527","","2014-01-22 18:36:23","2014-01-22 18:26:24",""
"47771005","PKCS#7 signature in PHP using PKCS#11 without a CLI call","Is there a way to create a PKCS#7 (S/MIME) signature with a PKCS#11 compliant HSM device (card reader) using pure PHP, i.e. without explicit shell command call, e.g. using PHP OpenSSL library or some other glue?
I can successfully create a PKCS#7 signature using CLI openssl with PKCS#11 engine like so:
putenv('PIN='.$secret_card_pin);
shell_exec(""export PIN; OPENSSL_CONF=openssl.cnf openssl smime -sign -engine pkcs11 -md sha1 -binary -in {$tmpFileIn} -out {$tmpFileOut} -outform der -keyform engine -inkey id_ed0007 -signer pubcert.pem"");

I want to clean this but it seems impossible using pure PHP because as far as I can tell openssl_pkcs7_sign() function can only be used with a private key file without any support for pkcs11-engine provided keys. Am I missing something?
","There is not, while there are PKCS#11 bindings for many languages there is not one for PHP. 
You would need this, then you could then construct a PKCS#7 and sign it using that library. 
Unfortunately absent that you will need to use a CLI.
","451","<php><openssl><pkcs#11><pkcs#7><opensc>","0","1","1","2017-12-19 13:21:27","47843316","0","","1347707","","2017-12-19 13:21:27","2017-12-12 11:01:59",""
"15526568","PKCS7_Sign does not sign","here is part of code:
flags = 0;
flags |= PKCS7_BINARY;
flags |= PKCS7_NOATTR;
pkcs7 = PKCS7_sign( cert, pkey, NULL, bio_data, flags );
if ( !pkcs7 )
    return;

iErr = i2d_PKCS7_bio( bio_out_der, pkcs7 );
if ( iErr != 1 )
    return;

There are no errors when running, but i do not understand why output data does not contain sign. Output data is correct PKCS7 signedData structure, but it has prepared for singing data instead of sign itself. This is example of data which is in the end of output PKCS7 structure:
04400001FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF003021300906052B0E03021A0500041440BD001563085FC35165329EA1FF5C5ECBDBBEEF

i.e. this is OID of SHA1, SHA1 of data to be signed, padding, i.e. data which must be signed with private key. Why signing is not performed?
","","449","<openssl><sign><pkcs#7>","0","","0","2013-03-20 14:38:41","","2","1","35060","","2013-03-20 14:38:41","2013-03-20 14:37:02",""
"26661153","Can I use AES128/ECB/PKCS7 encryption with Java 1.4","I have a string holding some parameters that needs to be encrypted in AES-128 in ECB mode with PKCS7 padding, and then Base-64 encoded.
My code base is Java 1.4. Is this possible with Java 1.4 api ?
","Yes, you can. You would need a separate library for the base 64 encoding/decoding though. For the encryption you can use Cipher.getInstance(""AES/ECB/PKCS5Padding""). Note that PKCS#5 padding is the same as PKCS#7 padding.
","449","<encryption><aes><pkcs#7><java1.4><ecb>","0","0","1","2014-11-01 22:37:49","","1","2","","","","2014-10-30 18:55:11",""
"44639175","Bouncycastle - how to distinguish attached from detached signature file programmatically","I am working on an application that is used to sign/verify files according to pkcs7. I am using bouncycastle. The problem is that whenever i pass in (to verify!) a file containing a signature i cannot find a way to distinguish whether the file contains both signature and signed data or just a signature. The point is to ask the user to select a second file if the first one contains only signature /and display appropriate error/.
Is there any way around this problem? 
","To construct the CMSSignedData (the first time, before you know whether it has encapsulated content), just use the CMSSignedData(byte[]) constructor, where byte[] is the full contents of the file.
Once you have the CMSSignedData instance, then getSignedContent() simply returns null if the content was not encapsulated.
Once you have the basics working, if you are dealing with very large files, you may want to look at CMSSignedDataParser as a more advanced option that will avoid reading in the entire file.
","443","<bouncycastle><pkcs#7>","0","2","1","2017-06-20 07:27:31","44646517","3","","","","","2017-06-19 20:14:48",""
"33178788","M2Crypto: read PKCS#7 structure in DER format?","M2Crypto SMIME object has methods to load itself from PKCS#7 file in PEM format:
smime_object = SMIME.load_pkcs7('file.pem')

I do not see any method to load from PKCS#7 file in DER format. How can this be done?
","In order to load a PKCS#7 in DER format, you should use an intermediate BIO like :
file = open('file.der')
bio = BIO.File(file)
smime_object = SMIME.PKCS7(m2.pkcs7_read_bio_der(bio._ptr()))

","427","<python><pkcs#7><m2crypto><smime><der>","0","0","2","2017-05-05 23:08:58","34696935","0","","","","","2015-10-16 20:10:46",""
"33178788","M2Crypto: read PKCS#7 structure in DER format?","M2Crypto SMIME object has methods to load itself from PKCS#7 file in PEM format:
smime_object = SMIME.load_pkcs7('file.pem')

I do not see any method to load from PKCS#7 file in DER format. How can this be done?
","A function SMIME.load_pkcs7_der() has been added in M2Crypto 0.26.0.
","427","<python><pkcs#7><m2crypto><smime><der>","0","1","2","2017-05-05 23:08:58","34696935","0","","","","","2015-10-16 20:10:46",""
"3995894","Update original data in detached signature created by crypto.signText","I got the BASE64 encoded text by using crypto.signText method. but that dose not contain original to data which is signed.
can anyone tell me how to update that encoded text to attach data to it.
","Done.
CMSSignedData csd = new CMSSignedData(byteArr);

if (csd.getSignedContent() == null) {
            byte[] contentBytes;
            if (!isIE) {
                contentBytes = data.getBytes();
            } else {
                //UnicodeLittleUnmarked = Sixteen-bit Unicode Transformation Format, little-endian byte order 
                contentBytes = data.getBytes(""UnicodeLittleUnmarked"");
            }
            CMSProcessable cmsProcesableContent = new CMSProcessableByteArray(contentBytes);
            csd = new CMSSignedData(cmsProcesableContent, byteArr);
        }

","425","<digital-signature><pkcs#7>","1","1","1","2010-10-28 06:03:52","4040227","1","0","","","","2010-10-22 10:21:22",""
"43472002","Sign an S/MIME message with openssl or pure node.js","I received .pem, .cer, .p12 files and related passPhrase for these from  from Bank tech team .
I should sign a string like this:
8ad281ad-1fdf-4ef9-a308-31388b617c3c-b6767a8a-dbc7-4be0-86ff-d27b47ed0df3

to generate a valid signed-data like this:
MIME-Version: 1.0
Content-Disposition: attachment; filename=""smime.p7m""
Content-Type: application/x-pkcs7-mime; smime-type=signed-data; name=""smime.p7m""
Content-Transfer-Encoding: base64

MIIHnQYJKoZIhvcNAQ...cQfLnkhnZGwg7d

I've tried using openssl commands like this:
openssl smime -sign -nosigs -in msg.txt -out out.txt -passin pass:SOMEPASS -signer certificate.pem

But it does not generate like what I mentioned above.
MIME-Version: 1.0
Content-Type: multipart/signed; protocol=""application/x-pkcs7-signature""; micalg=""sha-256""; boundary=""----1F579F2DD2078A7D3BE2F25D30C33EFC""

This is an S/MIME signed message

------1F579F2DD2078A7D3BE2F25D30C33EFC
8ad281ad-1fdf-4ef9-a308-31388b617c3c-b6767a8a-dbc7-4be0-86ff-d27b47ed0df3
------1F579F2DD2078A7D3BE2F25D30C33EFC
Content-Type: application/x-pkcs7-signature; name=""smime.p7s""
Content-Transfer-Encoding: base64
Content-Disposition: attachment; filename=""smime.p7s""

MIIHUAYJKoZIhvcNAQc...Nwr/k3x
EkGgGg==

------1F579F2DD2078A7D3BE2F25D30C33EFC--

Also tried this:
openssl smime -encrypt -nosigs -in msg.txt -out out.txt -passin pass:SOMEPASS  certificate.pem

and I receive this which is clearly different smime-type in header:
MIME-Version: 1.0
Content-Disposition: attachment; filename=""smime.p7m""
Content-Type: application/x-pkcs7-mime; smime-type=enveloped-data; name=""smime.p7m""
Content-Transfer-Encoding: base64

MIIBewYJKoZIhvc...

And I've tried several NodeJs packages to do this sign in pure node but as I don't know much about this field, can not get result.
I get results with PHP sample code I received from bank, here is sample:
openssl_pkcs7_sign(realpath(""msg.txt""), realpath(""signed.txt""), ""file://C:/myCert/certificate.pem"",
    array(""file://C:/myCert/certificate.pem"", ""SOMEPASS""),
    array(),PKCS7_NOSIGS
);

","","423","<node.js><openssl><digital-signature><pkcs#7><smime>","2","","0","2017-04-22 05:03:26","","0","1","1028632","","2017-04-22 05:03:26","2017-04-18 12:21:35",""
"53527693","How to convert PEM certificate chain to PKCS7 in native Go?","I am looking for any practical method for converting a PEM-encoded x509 certificate chain into PKCS7 format in the Go language.
This openssl command line illustrates what I am trying to achieve in native Go.
openssl crl2pkcs7 -nocrl -certfile certificate-chain.pem > pkcs7.pem

I am able to run the openssl command line from within a Go program using the exec package, but I am looking for an efficient solution in Go.
The input file contains a sequence of certificates in PEM format, starting with -----BEGIN CERTIFICATE-----\n and base64 encoded data.  The desired output needs to be in PKCS7 format, starting with -----BEGIN PKCS7-----.
I am looking for an efficient solution, because I am not actually reading and writing files, but handling lots of certificates as strings in memory.
Any suggestions appreciated.
","First of all, just to be clear, both the input and output you are requesting are in PEM format. The input is a sequence of PEM-encoded X509 certificates, and the output you request is a PEM-encoded PKCS#7 degenerate ""certs only"" structure. OpenSSL can output the raw ASN.1 DER for the PKCS#7 structure if you give it the -outform DER option, but it will PEM-encode its output by default.
There are a number of Go packages out there that can build this kind of PKCS#7 structure. The following example uses this one.
If you have your input in a PEM-encoded string, and you want your output to be a PEM-encoded string, then the basic steps are:

Extract each PEM-block from your input, decode it, and collect its raw bytes.
Create a PKCS7 structure from those bytes.
PEM-encode that structure to an array of bytes.
Convert that array of bytes to a string.

Here's a simple example:
package main

import (
    ""encoding/pem""
    ""fmt""
    ""log""

    ""github.com/fullsailor/pkcs7""
)

var certChain = `-----BEGIN CERTIFICATE-----
MIIEKjCCAhKgAwIBAgIQVUzJj/mbV3n8PS0CHQTfzzANBgkqhkiG9w0BAQsFADBk
MQswCQYDVQQGEwJVUzEWMBQGA1UECBMNTmV3IEhhbXBzaGlyZTETMBEGA1UEBxMK
UG9ydHNtb3V0aDEoMCYGA1UEAxMfU2ltcGxlQ0EgTm9uLVB1YmxpYyBUZXN0IElz
c3VlcjAeFw0xODExMjgyMzMwNDVaFw0xOTAyMjYyMzMwNDVaMBUxEzARBgNVBAMT
CkphbmUgU21pdGgwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC3iiYS
42eqJOJfF81MekU0w+8UTQgL9D9fh0BYAljgvKx1jvlg6l2CX1OPfNMxOWjDo7DB
ICRrPKxq/FH/tsPumzNWLp6Fsu559MgzkudzRHDVdCF0pa/qujeJeiDLXs7mtekc
rKW6SyrKceknSoPCAwnWr/CEBL09pG3lef7vUMfmkuSMW+L7upHpL/sHyqnyoAnh
9b7IeeQ832rg7b7VOX6zmDcCr6qndhXt6L/neidFbX736wH+fF+iKyTw7XJNflqT
YvifUvnI9rGriDZdAPVa1/a94tKHbFzil/2UEDzNo61mcucbcHqhUL4Iezpi/s5I
iyXqM9oMoMQKPSAlAgMBAAGjJzAlMAsGA1UdDwQEAwIDqDAWBgNVHSUBAf8EDDAK
BggrBgEFBQcDAjANBgkqhkiG9w0BAQsFAAOCAgEAXe8ipocWVv+Bc78ci6QjAb6N
1DN0n9X7Ai6nvekDP1hqvNUhqKmKhV8pEL7GapyH7Rz3shYJyLEwlV0zUgS3/Uvv
38Ae5xl2uQLl4eoMz4T9NXewZyRmeSyfwz1za93wKGKz6IhoYRepI4EwaPjYowok
nNrocMRFuZHeUysSdLNXtgxKvtRYFI63rjNikJNM7C8mKOzeVobdegZipALxonDb
FcVUhikyu6YkT3Rc5X/oW5I2LfCl9v8mhjbuIPmLsZJyTcDBK81AFIX8g7Iavb8L
buRBIgSTShQISPrunnxbcQg3YimdNCn0n5llDmUP3jxWqiuvEZ7pSAUU6aVY7x8B
fAq9utHTz63FqVCLyl8us/oYZmeYpxpw5HSFhqwujKzJhvO1raaoU+3zsybrsxAy
tzgm05WucSoMTjhOBZFr8OVQxKnMHwgNudwsxuXqqFhUBV5JLkhxWIZxUoH3fhgz
9b2yH0pf/Vgurglfk/onMYR33B0grAT6/NW294oUOKCP9jdwNPQr+eRgoDU6hZ/P
UZMfr+dhVpIHPouSKCrkNXKLrBLFZsg8UiyMXiNB27OBK+mWCH8gUv5EPjW1PUCV
338v19sruqtHRRs7ZnWYMMxGeWosJ4eK/ysTjCespenOeC1HBVEnHQE+H/JvN7Pc
GN3nlK0GRJl5j3y6nmw=
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIEKzCCAhOgAwIBAgIRAKju/EHi+Hw4PQZENuj9F1AwDQYJKoZIhvcNAQELBQAw
ZDELMAkGA1UEBhMCVVMxFjAUBgNVBAgTDU5ldyBIYW1wc2hpcmUxEzARBgNVBAcT
ClBvcnRzbW91dGgxKDAmBgNVBAMTH1NpbXBsZUNBIE5vbi1QdWJsaWMgVGVzdCBJ
c3N1ZXIwHhcNMTgxMTI4MjMzMTQ2WhcNMTkwMjI2MjMzMTQ2WjAVMRMwEQYDVQQD
EwpGcmVkIEpvbmVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAt4om
EuNnqiTiXxfNTHpFNMPvFE0IC/Q/X4dAWAJY4LysdY75YOpdgl9Tj3zTMTlow6Ow
wSAkazysavxR/7bD7pszVi6ehbLuefTIM5Lnc0Rw1XQhdKWv6ro3iXogy17O5rXp
HKyluksqynHpJ0qDwgMJ1q/whAS9PaRt5Xn+71DH5pLkjFvi+7qR6S/7B8qp8qAJ
4fW+yHnkPN9q4O2+1Tl+s5g3Aq+qp3YV7ei/53onRW1+9+sB/nxfoisk8O1yTX5a
k2L4n1L5yPaxq4g2XQD1Wtf2veLSh2xc4pf9lBA8zaOtZnLnG3B6oVC+CHs6Yv7O
SIsl6jPaDKDECj0gJQIDAQABoycwJTALBgNVHQ8EBAMCA6gwFgYDVR0lAQH/BAww
CgYIKwYBBQUHAwIwDQYJKoZIhvcNAQELBQADggIBAImzRaStB2tb0tCs0x9d0NTy
Z8Q3Fkexvt816xfBGiRS1AtetnV59sJKJvPe9qRoKQDRk7Q+/HO80Iu1o7dWfp7S
h29g9a1uhIVCY1ijr8cW8La9H/OF2KxgGX8TOldrftUl60sA3riJ7lQYOW0NkU+o
wrRsIlMCLhP8NZYjKn2Wf066JtV6Z4Be2CgVpaXkuTIE3h4BOv0kG9OsMvuRMqZw
n7z6EqhduSujwHevB2dIZgixacnE5v5hnpZm1ujzlgbAAZWh7uFthktXL5fBbkW7
heoOv320GOTvqkGVVlc4Pac5kR+P6JWfCDETfIVvtyTtfei5tDm606rBa3BHtiRu
kO4m63fnYziUzRXrF/bDcAzVx5jHQWugpxeI5UcaF6e5psOvhlP6O0sIeN6ThY/I
f+zZN6kf8eZ0OYk+61fVPbbpkF05AFhKkduIRfywUy5+iXrPK4iuQxhM/kRCO0H3
rxXcDlc+9Ol1JiJNNF2lV8+U1APsPFK0gnrxoYLFyRsejCiV8/D67v8oEk0gfiMm
/uZUhC2jYJ05lfK7aGV72Cf82g46zAuNAiH4zwvmxvC/2tcqcaYFyK15D1dQGqOg
z3LR6viX/ncO72ywQWgjRc5hdR5vLinIEXTRlNKm4EW+AoLY3x+Erhmq69EEnGMr
4/GUXRuNB7Is+lFM3JYE
-----END CERTIFICATE-----`

func main() {

    // Decode each PEM block in the input and append the ASN.1
    // DER bytes for each certificate therein to the data slice.

    input := []byte(certChain)
    data := []byte{}

    for len(input) > 0 {
        var block *pem.Block
        block, input = pem.Decode(input)
        data = append(data, block.Bytes...)
    }

    // Build a PKCS#7 degenerate ""certs only"" structure from
    // that ASN.1 certificates data.

    var err error
    data, err = pkcs7.DegenerateCertificate(data)
    if err != nil {
        log.Fatalf(""couldn't create degenerate PKCS7 object: %v"", err)
    }

    // Convert the PKCS#7 structure to a PEM-encoded string.

    pemString := string(pem.EncodeToMemory(&pem.Block{
        Type:  ""PKCS7"",
        Bytes: data,
    }))

    // Print the string, or do whatever you want with it.

    fmt.Printf(""%s"", pemString)
}

and to show it gives the same output as your OpenSSL command:
paul@mac:certstop7$ cat certs.pem
-----BEGIN CERTIFICATE-----
MIIEKjCCAhKgAwIBAgIQVUzJj/mbV3n8PS0CHQTfzzANBgkqhkiG9w0BAQsFADBk
MQswCQYDVQQGEwJVUzEWMBQGA1UECBMNTmV3IEhhbXBzaGlyZTETMBEGA1UEBxMK
UG9ydHNtb3V0aDEoMCYGA1UEAxMfU2ltcGxlQ0EgTm9uLVB1YmxpYyBUZXN0IElz
c3VlcjAeFw0xODExMjgyMzMwNDVaFw0xOTAyMjYyMzMwNDVaMBUxEzARBgNVBAMT
CkphbmUgU21pdGgwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC3iiYS
42eqJOJfF81MekU0w+8UTQgL9D9fh0BYAljgvKx1jvlg6l2CX1OPfNMxOWjDo7DB
ICRrPKxq/FH/tsPumzNWLp6Fsu559MgzkudzRHDVdCF0pa/qujeJeiDLXs7mtekc
rKW6SyrKceknSoPCAwnWr/CEBL09pG3lef7vUMfmkuSMW+L7upHpL/sHyqnyoAnh
9b7IeeQ832rg7b7VOX6zmDcCr6qndhXt6L/neidFbX736wH+fF+iKyTw7XJNflqT
YvifUvnI9rGriDZdAPVa1/a94tKHbFzil/2UEDzNo61mcucbcHqhUL4Iezpi/s5I
iyXqM9oMoMQKPSAlAgMBAAGjJzAlMAsGA1UdDwQEAwIDqDAWBgNVHSUBAf8EDDAK
BggrBgEFBQcDAjANBgkqhkiG9w0BAQsFAAOCAgEAXe8ipocWVv+Bc78ci6QjAb6N
1DN0n9X7Ai6nvekDP1hqvNUhqKmKhV8pEL7GapyH7Rz3shYJyLEwlV0zUgS3/Uvv
38Ae5xl2uQLl4eoMz4T9NXewZyRmeSyfwz1za93wKGKz6IhoYRepI4EwaPjYowok
nNrocMRFuZHeUysSdLNXtgxKvtRYFI63rjNikJNM7C8mKOzeVobdegZipALxonDb
FcVUhikyu6YkT3Rc5X/oW5I2LfCl9v8mhjbuIPmLsZJyTcDBK81AFIX8g7Iavb8L
buRBIgSTShQISPrunnxbcQg3YimdNCn0n5llDmUP3jxWqiuvEZ7pSAUU6aVY7x8B
fAq9utHTz63FqVCLyl8us/oYZmeYpxpw5HSFhqwujKzJhvO1raaoU+3zsybrsxAy
tzgm05WucSoMTjhOBZFr8OVQxKnMHwgNudwsxuXqqFhUBV5JLkhxWIZxUoH3fhgz
9b2yH0pf/Vgurglfk/onMYR33B0grAT6/NW294oUOKCP9jdwNPQr+eRgoDU6hZ/P
UZMfr+dhVpIHPouSKCrkNXKLrBLFZsg8UiyMXiNB27OBK+mWCH8gUv5EPjW1PUCV
338v19sruqtHRRs7ZnWYMMxGeWosJ4eK/ysTjCespenOeC1HBVEnHQE+H/JvN7Pc
GN3nlK0GRJl5j3y6nmw=
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIEKzCCAhOgAwIBAgIRAKju/EHi+Hw4PQZENuj9F1AwDQYJKoZIhvcNAQELBQAw
ZDELMAkGA1UEBhMCVVMxFjAUBgNVBAgTDU5ldyBIYW1wc2hpcmUxEzARBgNVBAcT
ClBvcnRzbW91dGgxKDAmBgNVBAMTH1NpbXBsZUNBIE5vbi1QdWJsaWMgVGVzdCBJ
c3N1ZXIwHhcNMTgxMTI4MjMzMTQ2WhcNMTkwMjI2MjMzMTQ2WjAVMRMwEQYDVQQD
EwpGcmVkIEpvbmVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAt4om
EuNnqiTiXxfNTHpFNMPvFE0IC/Q/X4dAWAJY4LysdY75YOpdgl9Tj3zTMTlow6Ow
wSAkazysavxR/7bD7pszVi6ehbLuefTIM5Lnc0Rw1XQhdKWv6ro3iXogy17O5rXp
HKyluksqynHpJ0qDwgMJ1q/whAS9PaRt5Xn+71DH5pLkjFvi+7qR6S/7B8qp8qAJ
4fW+yHnkPN9q4O2+1Tl+s5g3Aq+qp3YV7ei/53onRW1+9+sB/nxfoisk8O1yTX5a
k2L4n1L5yPaxq4g2XQD1Wtf2veLSh2xc4pf9lBA8zaOtZnLnG3B6oVC+CHs6Yv7O
SIsl6jPaDKDECj0gJQIDAQABoycwJTALBgNVHQ8EBAMCA6gwFgYDVR0lAQH/BAww
CgYIKwYBBQUHAwIwDQYJKoZIhvcNAQELBQADggIBAImzRaStB2tb0tCs0x9d0NTy
Z8Q3Fkexvt816xfBGiRS1AtetnV59sJKJvPe9qRoKQDRk7Q+/HO80Iu1o7dWfp7S
h29g9a1uhIVCY1ijr8cW8La9H/OF2KxgGX8TOldrftUl60sA3riJ7lQYOW0NkU+o
wrRsIlMCLhP8NZYjKn2Wf066JtV6Z4Be2CgVpaXkuTIE3h4BOv0kG9OsMvuRMqZw
n7z6EqhduSujwHevB2dIZgixacnE5v5hnpZm1ujzlgbAAZWh7uFthktXL5fBbkW7
heoOv320GOTvqkGVVlc4Pac5kR+P6JWfCDETfIVvtyTtfei5tDm606rBa3BHtiRu
kO4m63fnYziUzRXrF/bDcAzVx5jHQWugpxeI5UcaF6e5psOvhlP6O0sIeN6ThY/I
f+zZN6kf8eZ0OYk+61fVPbbpkF05AFhKkduIRfywUy5+iXrPK4iuQxhM/kRCO0H3
rxXcDlc+9Ol1JiJNNF2lV8+U1APsPFK0gnrxoYLFyRsejCiV8/D67v8oEk0gfiMm
/uZUhC2jYJ05lfK7aGV72Cf82g46zAuNAiH4zwvmxvC/2tcqcaYFyK15D1dQGqOg
z3LR6viX/ncO72ywQWgjRc5hdR5vLinIEXTRlNKm4EW+AoLY3x+Erhmq69EEnGMr
4/GUXRuNB7Is+lFM3JYE
-----END CERTIFICATE-----
paul@mac:certstop7$ openssl crl2pkcs7 -nocrl -certfile certs.pem > openssl_p7.pem
paul@mac:certstop7$ ./certstop7 > generated_p7.pem
paul@mac:certstop7$ diff generated_p7.pem openssl_p7.pem
paul@mac:certstop7$ 

","416","<ssl><go><pem><pkcs#7>","0","2","1","2018-11-29 00:19:58","53530077","0","","","","","2018-11-28 20:36:59",""
"39215818","c# - PKCS - Exporting to readable format","I have to sign and encrypt a message using PKCS:
EnvelopedCms envelopedCms = ...
// Add recipients
envelopedCms.Encrypt(recip1);
//
msg = envelopedCms.Encode();

I need the results in the format:
-----BEGIN PKCS7-----
base64 encoded msg
-----END PKCS7-----

Do you know how to export in this format in c#/.net?
Thanks
","Is this what you need?  (from this post)
SignedCms signedCms = new SignedCms();
resultString = resultString.Replace(""\n"", """").Replace(""-----BEGIN PKCS7-----"", """").Replace(""-----END PKCS7-----"", """");
signedCms.Decode(Convert.FromBase64String(resultString));

To encode a string to a base64 string in C# .NET you can do this:
(I've added this because your question is unclear but states ""base64 encoded msg"")
// Get the bytes.
var bytes = System.Text.Encoding.UTF8.GetBytes(yourString);

return System.Convert.ToBase64String(bytes);

","405","<c#><pkcs#7>","-1","0","1","2016-08-29 22:11:44","","1","","","","","2016-08-29 21:57:52",""
"37814759","Sign data using CMS based format in UWP","I need to transfer data between WCF service and UWP app. So I sign and verify data after receive data. I have a problem. The signed data result in WCF is differences in UWP app.(Of course, I can't verify data)  This is my source code:
// WCF
private String Sign(string Message)
{
    ContentInfo cont = new ContentInfo(Encoding.UTF8.GetBytes(Message));
    SignedCms signed = new SignedCms(cont, true);
    _SignerCert = new X509Certificate2(""Path"", ""Password"");
    CmsSigner signer = new CmsSigner(_SignerCert);
    signer.IncludeOption = X509IncludeOption.None;
    signed.ComputeSignature(signer);
    return Convert.ToBase64String(signed.Encode());
}

and
//UWP
public static async Task<String> Sign(String Message)
{
    StorageFolder appInstalledFolder = Windows.ApplicationModel.Package.Current.InstalledLocation;
    var CerFile = await appInstalledFolder.GetFileAsync(@""Assets\PAYKII_pkcs12.p12"");
    var CerBuffer = await FileIO.ReadBufferAsync(CerFile);
    string CerData = CryptographicBuffer.EncodeToBase64String(CerBuffer);

    await CertificateEnrollmentManager.ImportPfxDataAsync
        (CerData, ""Password"",
        ExportOption.NotExportable,
        KeyProtectionLevel.NoConsent,
        InstallOptions.None,
        ""RASKey2"");

    var Certificate = (await CertificateStores.FindAllAsync(new CertificateQuery() { FriendlyName = ""RASKey2"" })).Single();

    IInputStream pdfInputstream;
    InMemoryRandomAccessStream originalData = new InMemoryRandomAccessStream();
    await originalData.WriteAsync(CryptographicBuffer.ConvertStringToBinary(Message,BinaryStringEncoding.Utf8));
    await originalData.FlushAsync();
    pdfInputstream = originalData.GetInputStreamAt(0);
    CmsSignerInfo signer = new CmsSignerInfo();
    signer.Certificate = Certificate;
    signer.HashAlgorithmName = HashAlgorithmNames.Sha1;
    IList<CmsSignerInfo> signers = new List<CmsSignerInfo>();

    signers.Add(signer);

    IBuffer signature = await CmsDetachedSignature.GenerateSignatureAsync(pdfInputstream, signers, null);
    return CryptographicBuffer.EncodeToBase64String(signature);
}

","I stumbled over your post, because I wanted to achieve something very similar: sign a message in an UWP app and verifying the signature in my WCF Service. After reading http://www.codeproject.com/Tips/679142/How-to-sign-data-with-SignedCMS-and-signature-chec, I finally managed to make this fly (with a detached signature, ie you need to have the original message for verification):
UWP:
public async static Task<string> Sign(Windows.Security.Cryptography.Certificates.Certificate cert, string messageToSign) {
    var messageBytes = Encoding.UTF8.GetBytes(messageToSign);
    using (var ms = new MemoryStream(messageBytes)) {
        var si = new CmsSignerInfo() {
            Certificate = cert,
            HashAlgorithmName = HashAlgorithmNames.Sha256
        };

        var signature = await CmsDetachedSignature.GenerateSignatureAsync(ms.AsInputStream(), new[] { si }, null);
        return CryptographicBuffer.EncodeToBase64String(signature);
    }
}

WCF:
public static bool Verify(System.Security.Cryptography.X509Certificates.X509Certificate2 cert, string messageToCheck, string signature) {
    var retval = false;

    var ci = new ContentInfo(Encoding.UTF8.GetBytes(messageToCheck));
    var cms = new SignedCms(ci, true);
    cms.Decode(Convert.FromBase64String(signature));

    // Check whether the expected certificate was used for the signature.
    foreach (var s in cms.SignerInfos) {
        if (s.Certificate.Equals(cert)) {
            retval = true;
            break;
        }
    }

    // The following will throw if the signature is invalid.
    cms.CheckSignature(true);

    return retval;
}

The trick for me was to understand that the desktop SignedCms needs to be constructed with the original content and then decode the signature to perform the verification.
","386","<c#><wcf><uwp><sign><pkcs#7>","1","1","1","2016-08-20 16:36:47","","0","1","1466583","","2016-06-14 14:27:08","2016-06-14 14:22:43",""
"38794056","Verifying a PKCS#7 Signature with BouncyCastle in Scala","I need to verify a detached PKCS#7 Signature in Scala using BouncyCastle (version 1.54). The signed data are not enveloped in the PKCS#7 signature.
The PKCS#7 signature is performed using a single certificate.
I wrote a simple function based on the Javadoc of BouncyCastle to verify the signature:
      def verify(data: File): Boolean = {
        val signedData = new CMSSignedData(new CMSProcessableFile(data), Base64.decode(this.value))
        val certStore = signedData.getCertificates
        val signers = signedData.getSignerInfos.getSigners
        val signer = signers.iterator.next
        val certs = certStore.getMatches(signer.getSID)
        val cert = certs.iterator.next.asInstanceOf[X509CertificateHolder]
        signer.verify(new JcaSimpleSignerInfoVerifierBuilder().setProvider(""BC"").build(cert))
      }

When I compile the code , I obtain the following error:
[error] LogVerifier.scala:26: type mismatch;
[error]  found   : org.bouncycastle.cms.SignerId
[error]  required: org.bouncycastle.util.Selector[?0]
[error]     val certs = certStore.getMatches(signer.getSID)

Could you please help me solve this compilation issue?
Thanks in advance!
","The problem is that CMSSignedData.getCertificates returns an untyped Store:
https://www.bouncycastle.org/docs/pkixdocs1.5on/org/bouncycastle/cms/CMSSignedData.html#getCertificates()
public org.bouncycastle.util.Store getCertificates()

The Scala compiler interprets this is Store[_], which is shorthand for the existential type Store[?0] forSome { type ?0 } (see the answer to this question), i.e. the Store is parameterized with some specific, arbitrary type and not with Any.
Additionally, SignerId extends an untyped Selector.
Now, the following code causes a type mismatch since the type parameter values for certStore (Store[_]) and signer.getSID (Selector[_]) are not compatible.
val certs = certStore.getMatches(signer.getSID)

To resolve the problem, it should help to explicitly cast certStore to Store[X509CertificateHolder] and signerId to Selector[X509CertificateHolder] (not tested):
val certStore = signedData.getCertificates.
  asInstanceOf[Store[X509CertificateHolder]]

val certs = certStore.getMatches(
  signer.getSID.asInstanceOf[Selector[X509CertificateHolder]])

","373","<scala><compiler-errors><bouncycastle><pkcs#7>","1","1","1","2016-08-08 08:10:53","","1","","","","","2016-08-05 16:38:25",""
"6408028","Certificate question (pkcs7)","Accoring to the PKCS#7 standard certificate has some definite attributes. But I didn't find any information about the following:

What is OID?
What is RDN?
What is the format of Public Key?

","PKCS#7 and X.509 Certificates are both encoded in ASN.1.

OID (Object Identifiers) is a basic ASN.1 type used for referencing objects in a unique and universal way. For instance, the OID 2.5.4.3 references commonName.
RDN (Relative Distinguished Name) is one element of a DN.
In PKCS#7 and X.509, the format of the Public Key depends on the algorithm. As an example, the ASN.1 schema for RSA public keys is
RSAPublicKey ::= SEQUENCE {
    modulus           INTEGER,  -- n
    publicExponent    INTEGER   -- e
}


","373","<certificate><pkcs#7>","0","5","1","2011-06-20 17:30:01","6415087","0","","451969","","2011-06-20 07:28:07","2011-06-20 07:26:26",""
"43387548","EnvelopedCms decryption does not work with Azure Key Vault","I've been struggeling with this for days now and RFC 2315 is a bit hard to understand.
I'm trying to implement my own version of EnvelopedCms.Decrypt(), so that I can use the certificate operations of Azure Key Vault to UnwrapKey and/or Decrypt a PKCS#7 message (CMS Object) in a correct way. I use EnevelopedCms in .Net to Decode the message, then I try to Decrypt the EnvelopedCms.ContentInfo.Content.
This is what I try to do;
public static async Task<byte[]> DecryptCustom(string certificateId, string encryptedBase64Content)
{
    var bytes = Convert.FromBase64String(encryptedBase64Content);
    var contentInfo = new ContentInfo(bytes);
    var envelopedCms = new EnvelopedCms(contentInfo);
    envelopedCms.Decode(bytes);
    // envelopedCms.Decrypt()  <-- no go. Can't extract certificate from Key Vault

    // My (naive) attempt to decrypt CMS content using Azure Key Vault certificates
    byte[] decryptedContent;
    using (var client = new KeyVaultClient(GetKeyVaultToken))
    {
        var decryptionresult = await client.DecryptAsync(GetKeyUrl(certificateId), ""RSA1_5"", envelopedCms.ContentInfo.Content);
        decryptedContent = decryptionresult.Result;
    }
    return decryptedContent;
}

I was hoping it could be that easy, but it gives me the following error;

Unable to decrypt specified value with this key.

I read something about octets in RFC 2315, so maybe the stream (byte-array) needs some reordering before I decrypt. Do I need to unwrap some symmetric key to decrypt the real payload? I'm on thin ice here.
I'm not a cryptography professional so I might have missed something obvious, too. I was hoping someone knew what to do in this case as I really want to keep my certificates inside the Key Vault (HSM)
","CMS envelope contents are encrypted using a session key, and this key is encrypted with each recipients (there can be many) public key before transmission.
What you need is to extract your recipient's encrypted session key, and unwrap it with the private key stored in key vault. I'm not near Visual Studio right now, but here is the pseudocode:
// Extract the first (and often only) receiver's encrypted session key
var key = envelopedCms.Receivers[0].EncryptionKey; 
// Unwrap the sessionKey using the receiver's private key stored in key vault:
var sessionKey = (await keyVaultClient.Unwrap(uri, ""certificatename"", key)).Result;

Finally, using the sessionKey, you can decrypt the envelope contents (ContentInfo.Content). The encryption type is specified in the envelope's encryption algorithm-property.
","365","<c#><.net><encryption><pkcs#7><azure-keyvault>","3","3","1","2017-04-19 20:42:22","43399956","0","1","62532","","2017-04-19 20:42:22","2017-04-13 08:47:25",""
"51031446","C# PKCS7 Smartcard Digital Signature - Document has been altered or corrupted since it was signed","I try to sign a pdf file using my smartcard (USB token) but encounter ""Document has been altered or corrupted since it was signed"" error when I open the signed pdf file in Adobe. The error is not so descriptive and I'm not sure where to look at because the code seems good to me but apparently it's not..
The code that I use is:
var signer = smartCardManager.getSigner(""myTokenPassword"");
var toBeSignedHash = GetHashOfPdf(File.ReadAllBytes(@""xxx\pdf.pdf""), cert.asX509Certificate2().RawData, ""dsa"", null, false);
var signature = signer.sign(toBeSignedHash);
var signedPdf = EmbedSignature(cert.getBytes(), signature);
File.WriteAllBytes(@""xxx\signedpdf.pdf"", signedPdf);

public byte[] GetHashOfPdf(byte[] unsignedFile, byte[] userCertificate, string signatureFieldName, List<float> location, bool append)
{
    byte[] result = null;

    var chain = new List<Org.BouncyCastle.X509.X509Certificate>
    {
        Org.BouncyCastle.Security.DotNetUtilities.FromX509Certificate(new X509Certificate2(userCertificate))
    };
    Org.BouncyCastle.X509.X509Certificate certificate = chain.ElementAt(0);
    using (PdfReader reader = new PdfReader(unsignedFile))
    {
        using (var os = new MemoryStream())
        {
            PdfStamper stamper = PdfStamper.CreateSignature(reader, os, '\0', null, append);
            PdfSignatureAppearance appearance = stamper.SignatureAppearance;
            appearance.SetVisibleSignature(new iTextSharp.text.Rectangle(0,0,0,0), 1, signatureFieldName);
            appearance.Certificate = certificate;
            IExternalSignatureContainer external = new ExternalBlankSignatureContainer(PdfName.ADOBE_PPKLITE, PdfName.ADBE_PKCS7_DETACHED);
            MakeSignature.SignExternalContainer(appearance, external, 8192);
            Stream data = appearance.GetRangeStream();
            byte[] hash = DigestAlgorithms.Digest(data, ""SHA256"");
            var signatureContainer = new PdfPKCS7(null, chain, ""SHA256"", false);
            byte[] signatureHash = signatureContainer.getAuthenticatedAttributeBytes(hash, null, null, CryptoStandard.CMS);
            result = DigestAlgorithms.Digest(new MemoryStream(signatureHash), ""SHA256"");
            this.hash = hash;
            this.os = os.ToArray();
            File.WriteAllBytes(@""xxx\temp.pdf"", this.os);
        }
    }

    return result;
}

public byte[] EmbedSignature(byte[] publicCert, byte[] sign)
{
    var chain = new List<Org.BouncyCastle.X509.X509Certificate>
    {
        Org.BouncyCastle.Security.DotNetUtilities.FromX509Certificate(new X509Certificate2(publicCert))
    };
    var signatureContainer = new PdfPKCS7(null, chain, ""SHA256"", false);
    using (var reader = new PdfReader(this.os))
    {
        using (var os2 = new MemoryStream())
        {
            signatureContainer.SetExternalDigest(sign, null, ""RSA"");
            byte[] encodedSignature = signatureContainer.GetEncodedPKCS7(this.hash, null, null, null, CryptoStandard.CMS);
            IExternalSignatureContainer external = new MyExternalSignatureContainer(encodedSignature);
            MakeSignature.SignDeferred(reader, ""dsa"", os2, external);
            return os2.ToArray();
        }
    }
}

The pdf file that I try to sign is this.
Temp pdf file that is created after adding signature fields is this.
Signed pdf file is this.
Base64 format of the hash that is signed is: klh6CGp7DUzayt62Eusiqjr1BFCcTZT4XdgnMBq7QeY=
Base64 format of the signature is: Uam/J6W0YX99rVP4M9mL9Lg9l6YzC2yiR4OtJ18AH1PtBVaNPteT3oPS7SUc+6ak2LfijgJ6j1RgdLamodDPKl/0E90kbBenry+/g1Ttd1bpO8lqTn1PWJU2TxeGHwyRyaFBOUga2AxpErIHrwxfuKCBcodB7wvAqRjso0jovnyP/4DluyOPm97QWh4na0S+rtUWOdqVmKGOuGJ3sBXuk019ewpvFcqWBX4Mvz7IKV56wcxQVQuJLCiyXsMXoazwyDCvdteaDz05K25IVwgEEjwLrppnc/7Ue9a9KVadFFzXWXfia7ndmUCgyd70r/Z+Oviu9MIAZL8GuTpkD7fJeA==
","I use hex encoding of byte arrays here. Your base64 encoded hash
klh6CGp7DUzayt62Eusiqjr1BFCcTZT4XdgnMBq7QeY=

in hex encoding is equal to
92587A086A7B0D4CDACADEB612EB22AA3AF504509C4D94F85DD827301ABB41E6

In short
Your code hashes the signed attributes twice. Simply don't hash the bytes returned by signatureContainer.getAuthenticatedAttributeBytes(hash, null, null, CryptoStandard.CMS) in GetHashOfPdf but instead use the authenticated attribute bytes themselves as return value.
In detail
Analyzing the signature in your example PDF it turns out that

indeed the hash of the signed attributes is 
92587A086A7B0D4CDACADEB612EB22AA3AF504509C4D94F85DD827301ABB41E6

but the hash in the RSA encrypted DigestInfo object of the signature is
1DC7CAA50D88243327A9D928D5FB4F1A61CBEFF9E947D393DDA705BD61B67F25

which turns out to be the hash of the before mentioned hash of the signed attributes.

Thus, your
var signature = signer.sign(toBeSignedHash);

call appears to hash the toBeSignedHash value again.
The most simple fix would be to replace
byte[] signatureHash = signatureContainer.getAuthenticatedAttributeBytes(hash, null, null, CryptoStandard.CMS);
result = DigestAlgorithms.Digest(new MemoryStream(signatureHash), ""SHA256"");

by
result = signatureContainer.getAuthenticatedAttributeBytes(hash, null, null, CryptoStandard.CMS);

in GetHashOfPdf to have only signer.sign do the hashing.
Analyzing such issues
In a comment you asked

how did you figure all this out :)?

Well, yours is not the first question with a customized iText signing process resulting in errors or at least unwanted profiles.
In the course of the analysis of those questions the first step usually is to extract the embedded signature container and inspect it in an ASN.1 viewer.
In case of your PDF the main result of that inspection was that the signature as such looked ok and that your signed attributes don't contain any variable data.
If there had been some variable data (e.g. a signing time attribute) in them, a candidate for the cause of the issue would have been that you build the signed attributes twice, once explicitly in GetHashOfPdf, once implicitly in EmbedSignature, with different values for the variable data. But as mentioned above, this was not the case.
The next step here was to actually check the hashes involved. Checking the document hash is simple, one calculates the signed byte range hash and compares with the value of the MessageDigest signed attribute, cf. the ExtractHash test testSotnSignedpdf (in Java).
The result for your PDF turned out to be ok.
The following step was to inspect the signature container more thoroughly. In this context I once started to write some checks but did not get very far, cf. the SignatureAnalyzer class. I extended it a bit for the test of the hash of the signed attributes making use of the signature algorithm you used, the old RSASSA-PKCS1-v1_5: In contrast to many other signature algorithms, this one allows to trivially extract the signed hash.
Here the result for your PDF turned out not to be ok, the hash of the signed attributes differed from the signed hash.
There are two often seen causes for a mismatch here,

either the signed attributes are signed with a wrong encoding (it must be the regular DER encoding, not some arbitrary BER encoding and in particular not an encoding with the implicit tag the value stored in the signature has --- even larger players do this wrong sometimes, e.g. Docusign, cf. DSS-1343)
or the hash was somehow transformed during signing (e.g. the hash is base64 encoded or hashed again).

As it turned out, the latter was the case here, the hash was hashed again.
","358","<c#><pdf><itext><digital-signature><pkcs#7>","2","2","1","2018-06-28 10:19:18","51071104","0","0","944592","","2018-06-25 21:14:08","2018-06-25 20:37:07",""
"30639872","Decrypt p7s file on iOS","Working on a test iOS app I have faced the following problem.
From a remote webserver I recieve a .p7s file with the following contents (which are viewable in Mac's TextEdit app):
0Ä  *ÜHÜ˜
†Ä0Ä10  +�0Ä    *ÜHÜ˜
†Ä$ÄÇ˚<?xml version=""1.0"" encoding=""UTF-8""?>
<!DOCTYPE plist PUBLIC ""-//Apple//DTD PLIST 1.0//EN"" ""http://www.apple.com/DTDs/PropertyList-1.0.dtd"">
<plist version=""1.0"">
<dict>
    <key>CHALLENGE</key>
    <string>panacya</string>
    <key>IMEI</key>
    <string>01 232700 828513 5</string>
    <key>PRODUCT</key>
    <string>iPad1,1</string>
    <key>SERIAL</key>
    <string>GB0269NJETU</string>
    <key>UDID</key>
    <string>2866681d94ae6c56d189485d39c54eaedecf211c</string>
    <key>VERSION</key>
    <string>9A5288d</string>
</dict>
</plist>
������†Ç
[0ÇÛ0Ç\†
u6ÜΩ~60
    *ÜHÜ˜
�0Z10   UUS10U

Apple Inc.10UApple iPhone10UApple iPhone Device CA0
110808222517Z
140808222517Z0ÅÉ1-0+U$2890C19C-43F9-47C5-8534-A54F184E37DC10    UUS10   UCA10U  Cupertino10U

Here's the link to the original file - https://www.dropbox.com/s/lm05gg866zdrz20/ota-response.p7s?dl=0
I then save the NSData as a .p7s file to disk.
I need to get the embedded .plist out of the file (judging from what I see it contains exactly that) or at least convert it to readable NSString which I can then display in UILabel.
Is it at all possible and how do I achieve it?
","You can read it into an NSData instnace and use
- (NSRange)rangeOfData:(NSData *)dataToFind options:(NSDataSearchOptions)mask range:(NSRange)searchRange

to find the beginning and end of the plist. Then use
- (NSData *)subdataWithRange:(NSRange)range

to optain just the plist data. Finally convert to a NSString with:
- (instancetype)initWithData:(NSData *)data encoding:(NSStringEncoding)encoding

","351","<ios><objective-c><cocoa-touch><nsdata><pkcs#7>","0","1","1","2015-06-04 11:38:05","30642847","1","1","909655","","2015-06-04 10:17:42","2015-06-04 09:19:35",""
"37041671","openssl_pkcs7_sign(): no certificates in file AppleWWDRCA.cer","I need to create a detached PKCS7 signature for use with Apple Wallet passes.
The code
private function createSignature()
{
    $cert = '/etc/ssl/local.crt';
    $key = '/etc/ssl/local.key';
    $wwdr = '/var/www/app/storage/passes/AppleWWDRCA.cer';
    $headers = [
        'signing-time' => (new DateTime())->format('o-m-d H:i:s'),
    ];

    return openssl_pkcs7_sign(""$this->dir/manifest.json"", ""$this->dir/signature"",
        $cert, $key, $headers, PKCS7_DETACHED, $wwdr);
}

The error
openssl_pkcs7_sign(): no certificates in file, /var/www/app/storage/passes/AppleWWDRCA.cer

AppleWWDRCA.cer was downloaded from https://www.apple.com/certificateauthority/. The exact certificate I downloaded was WWDR Certificate (Expiring 02/07/23). I have viewed the file and confirmed it isn't blank. Am I missing a step?
","The issue was solved by adding the AppleWWDR.cer to my keychain and exporting it from the keychain as a .pem file.
","334","<php><ios><ssl><digital-signature><pkcs#7>","1","4","1","2016-05-09 19:40:34","37124116","0","1","","","","2016-05-05 03:09:21",""
"49452793","PKCS7 and ""NONEwithRSA"" signature","I need to compute some data signature, using un-encapsulated pkcs7 with sha256 and RSA.
No problem with raw content, using :
public byte[] signRawContent(final byte[] content)
    throws CMSException, IOException, OperatorCreationException, CertificateEncodingException {

    // Create generator of pkcs7-signature message
    CMSSignedDataGenerator generator = new CMSSignedDataGenerator();
    ContentSigner signer = new JcaContentSignerBuilder(""SHA256WithRSA"").setProvider(""BC"").build(privateKey);
    generator.addSignerInfoGenerator(
        new JcaSignerInfoGeneratorBuilder(new JcaDigestCalculatorProviderBuilder().setProvider(""BC"").build()).build(signer, certificate));
    generator.addCertificate(new X509CertificateHolder(certificate.getEncoded()));

    CMSTypedData cmsTypedData = new CMSProcessableByteArray(content);
    CMSSignedData cmsSignedData = generator.generate(cmsTypedData, false);
    return cmsSignedData.getEncoded();
}

But I have another user cases, where I don't have the raw content, only its hash (sha256)
Bouncycastle doesn't support ""NONEwithRSA"" or ""RSA"" for pkcs7 signature, 
so I tried to use a custom ContentSigner, without obtaining the same 
signature that with the raw content version.
public byte[] signHash(final byte[] sha256) throws IOException,
    OperatorCreationException, CertificateEncodingException, CMSException {

    // Create generator of pkcs7-signature message
    CMSSignedDataGenerator generator = new CMSSignedDataGenerator();
    // custom content signer to bypass hash
    ContentSigner signer = new ContentSigner() {
        @Override public AlgorithmIdentifier getAlgorithmIdentifier() {
            return new DefaultSignatureAlgorithmIdentifierFinder().find(""SHA256WithRSA"");
        }

        @Override public OutputStream getOutputStream() {
            return new ByteArrayOutputStream();
        }

        @Override public byte[] getSignature() {
            try {
                Signature signer = Signature.getInstance(""NONEwithRSA"");
                signer.initSign(privateKey);
                signer.update(sha256);
                return signer.sign();
            } catch (Exception e){
            throw new RuntimeOperatorException(""exception obtaining signature: "" + e.getMessage(), e);
            }
        }
    };

    generator.addSignerInfoGenerator(
        new JcaSignerInfoGeneratorBuilder(new JcaDigestCalculatorProviderBuilder().setProvider(""BC"").build()).build(signer, certificate));
    generator.addCertificate(new X509CertificateHolder(certificate.getEncoded()));

    CMSTypedData cmsTypedData = new CMSProcessableByteArray(sha256);
    CMSSignedData cmsSignedData = generator.generate(cmsTypedData, false);
    return cmsSignedData.getEncoded();
}

I even tried to rebuild the content digest, no luck
 // build digest
 MessageDigest messageDigest = MessageDigest.getInstance(""SHA-256"");
 messageDigest.update(sha256);
 byte[] outputDigest = messageDigest.digest();
 AlgorithmIdentifier sha256Aid = new AlgorithmIdentifier(NISTObjectIdentifiers.id_sha256, DERNull.INSTANCE);
 DigestInfo di = new DigestInfo(sha256Aid, outputDigest);

 //sign SHA256 with RSA
 Signature rsaSignature = Signature.getInstance(""RSA"");
 rsaSignature.initSign(privateKey);
 byte[] encodedDigestInfo = di.toASN1Primitive().getEncoded();
 rsaSignature.update(encodedDigestInfo);
 return rsaSignature.sign();

So is there a way to get a pkcs7 form a sha256?
Thanks
","Found a working solution:
private static final String SIGNATURE_ALGO = ""SHA256WithRSA"";

/**
 * Get the pkcs7-signature from a document hash (sha256Hex)
 *
 * @param contentSha256Hex
 *     the original document content hash (sha256Hex) to be signed
 * @return the pkcs7 signature
 *
 * note: see TestSha1WithRsaAndAttributeTable() in bouncycastle/test/src/cms/test/SignedDataTest.cs
 * */
public byte[] signSha256Hex(final String contentSha256Hex)
    throws CertificateEncodingException, IOException, OperatorCreationException, CMSException, DecoderException {

    byte[] hash = Hex.decodeHex(contentSha256Hex);

    /*
     * The trick is to manually set digest attribute with hash value,
     * then generate signature without content.
     */

    // CMS attributes
    ASN1EncodableVector v = new ASN1EncodableVector();
    v.add(new Attribute(CMSAttributes.messageDigest, new DERSet(new DEROctetString(hash)))); // set digest (sha256)

    return signCms_Sha256WithRsa(
        new CMSAbsentContent(),
        new DefaultSignedAttributeTableGenerator(new AttributeTable(v)));

}

private byte[] signCms_Sha256WithRsa(CMSTypedData content, CMSAttributeTableGenerator signedAttributes)
    throws CMSException, IOException, CertificateEncodingException, OperatorCreationException {

    CMSSignedDataGenerator generator = new CMSSignedDataGenerator();

    // content signer
    ContentSigner signer = new JcaContentSignerBuilder(SIGNATURE_ALGO).setProvider(""BC"").build(privateKey);
    generator.addSignerInfoGenerator(
        new JcaSignerInfoGeneratorBuilder(new JcaDigestCalculatorProviderBuilder().setProvider(""BC"").build())
            .setSignedAttributeGenerator(signedAttributes)
            .build(signer, certificate));

    // add certificate
    generator.addCertificate(new X509CertificateHolder(certificate.getEncoded()));

    // sign
    CMSSignedData cmsSignedData = generator.generate(content, false);
    return cmsSignedData.getEncoded();
}

","333","<java><rsa><bouncycastle><sha256><pkcs#7>","0","0","1","2018-06-20 07:32:57","50942691","0","","","","","2018-03-23 15:06:31",""
"27301841","How to extract the contents of a jarsigner-created META-INF/CERT.RSA with PHP?","I specifically want to determine the expiration date of the key used to sign an Android APK.
The file appears to be DER-encoded PKCS#7, as this shows me the contents:
openssl pkcs7 -inform DER -in CERT.RSA -noout -print_certs -text

Some approaches I have tried:
/* try to open as pkcs#7.  prints FALSE. */

if( TRUE === openssl_pkcs7_verify ( 'CERT.RSA', 0 ) ) {
    echo ""TRUE\n"";
}
else {
    echo ""FALSE\n"";
}

/* try to open as an x509.  prints FALSE. */

$data = openssl_x509_parse(file_get_contents('CERT.RSA'));
if( $data === FALSE ) {
    echo ""FALSE\n"";
}

/*                                                                                                         
   un-DER with phpseclib                                                                                   

   prints a nestated data structure that clearly includes                                                  
   data from CERT.RDA, but unclear to me which value is                                                    
  the cert expiration date.                                                                               
*/

$ASN1 = new File_ASN1(file_get_contents('CERT.RSA'));
print_r( $ASN1->decodeBER(file_get_contents('CERT.RSA')) );`

I could just call openssl from an exec() or similar, but I'd rather have a pure-PHP solution.  Anybody got one?
","","329","<php><apk><pkcs#7><php-openssl>","0","","0","2014-12-05 12:30:34","","2","","616587","","2014-12-05 12:30:34","2014-12-04 18:58:51",""
"44857481","How to generate .sig of XML of digitally signed XML document in C#?","I have requirement of signing xml document with digital signature and with that document I need to generate .sig file of digitally signed xml. I am using PKCS7 Algorithm for the same. I am able to successfully put signature in xml. But not been able to generate .sig file. My code is as follows:
public static void SignXmlDocumentWithCertificate(XmlDocument doc, X509Certificate2 cert)
{
    SignedXml signedxml = new SignedXml(doc);
    signedxml.SigningKey = cert.PrivateKey;
    Reference reference = new Reference();
    reference.Uri = """";
    reference.AddTransform(new XmlDsigEnvelopedSignatureTransform());
    signedxml.AddReference(reference);

    KeyInfo keyinfo = new KeyInfo();
    keyinfo.AddClause(new KeyInfoX509Data(cert));

    signedxml.KeyInfo = keyinfo;
    signedxml.ComputeSignature();

    XmlElement xmlsig = signedxml.GetXml();
    doc.DocumentElement.AppendChild(doc.ImportNode(xmlsig, true));
    //Console.WriteLine(doc.ImportNode(xmlsig,true));
}

Now I am generating .sig file like this:
AsymmetricKeyParameter asymmetricKeyParameter = PublicKeyFactory.CreateKey(keyBytes);
RsaKeyParameters rsaKeyParameters = (RsaKeyParameters)asymmetricKeyParameter;
RSAParameters rsaParameters = new RSAParameters();
rsaParameters.Modulus = rsaKeyParameters.Modulus.ToByteArrayUnsigned();
rsaParameters.Exponent = rsaKeyParameters.Exponent.ToByteArrayUnsigned();

RSACryptoServiceProvider rsa = new RSACryptoServiceProvider(); rsa.ImportParameters(rsaParameters);

byte[] ciphertext = rsa.Encrypt(keyBytes, false);
string cipherresult = Convert.ToBase64String(ciphertext);
Console.WriteLine(cipherresult);

which is throwing an error of bad length \r\n. 
My xml after digitally signed is :
<?xml version=""1.0"" encoding=""UTF-8""?>
<xml>
<CATALOG>
 <PLANT>
    <COMMON>Grecian Windflower</COMMON>
    <BOTANICAL>Anemone blanda</BOTANICAL>
    <ZONE>6</ZONE>
    <LIGHT>Mostly Shady</LIGHT>
    <PRICE>$9.16</PRICE>
    <AVAILABILITY>071099</AVAILABILITY>
</PLANT>
</CATALOG>
<Signature xmlns=""http://www.w3.org/2000/09/xmldsig#"">
<SignedInfo>
    <CanonicalizationMethod Algorithm=""http://www.w3.org/TR/2001/REC-xml-c14n-20010315""/>
    <SignatureMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#rsa-sha1""/>
    <Reference URI="""">
      <Transforms>
        <Transform Algorithm=""http://www.w3.org/2000/09/xmldsig#enveloped-signature""/>
     </Transforms>
     <DigestMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#sha1""/>

     <DigestValue>/VUzr4wRNv2e6SzE6TdHLM8c+/A=</DigestValue>

    </Reference>

    </SignedInfo>
    <SignatureValue>i3gGf2Q......8Q==</SignatureValue>
    <KeyInfo>
    <X509Data>
      <X509Certificate>MIID6D.......fFo=</X509Certificate>
    </X509Data>
    </KeyInfo>

</Signature>

</xml>

Now I know I am either doing in wrong way or there is something I have missed out. My question is 

Is there a way out for generating .sig file with signed xml?
Is it possible for large xml file in PKCS7?

As my requriement are:

The digital signature will be generated as a part of PKCS7 envelop as a plain bytes. A PKCS7 envelop will contain the certificate used for signing as well as the digital signature itself.
The PKCS7 envelop will not be base-64 encoded. It will not contain any start aend identifiers. The plain PKCS7 envelop which is a sequence of bytes will be written into the .sig file.
The digital signature will be generated using SHA-2(512bits) algorithm for message digest and RSA-2048 algorithm for encryption

","Try following code.  I merged your code with sample from msdn.  I also used default user certificate on PC :
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using System.Security;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Security.Cryptography.Xml;
using System.IO;

namespace ConsoleApplication1
{
    class Program
    {
        const string FILENAME = @""c:\temp\test.xml"";
        static void Main(string[] args)
        {
            XmlDocument doc = new XmlDocument();
            doc.Load(FILENAME);
            string computerName = Environment.GetEnvironmentVariable(""COMPUTERNAME"");
            string userName = Environment.GetEnvironmentVariable(""USERNAME"");
            X509Certificate2 cert = GetCertificateFromStore(""CN="" + computerName + ""\\"" + userName);

            SignXmlDocumentWithCertificate(doc, cert);
            RSACryptoServiceProvider publicKey = (RSACryptoServiceProvider)cert.PublicKey.Key;

            byte[] unencryptedData = Encoding.UTF8.GetBytes(doc.OuterXml); 
            Stream stream = EncryptFile(unencryptedData,publicKey);

            Console.ReadLine();

        }
        public static void SignXmlDocumentWithCertificate(XmlDocument doc, X509Certificate2 cert)
        {
            SignedXml signedxml = new SignedXml(doc);
            signedxml.SigningKey = cert.PrivateKey;
            Reference reference = new Reference();
            reference.Uri = """";
            reference.AddTransform(new XmlDsigEnvelopedSignatureTransform());
            signedxml.AddReference(reference);

            KeyInfo keyinfo = new KeyInfo();
            keyinfo.AddClause(new KeyInfoX509Data(cert));

            signedxml.KeyInfo = keyinfo;
            signedxml.ComputeSignature();

            XmlElement xmlsig = signedxml.GetXml();
            doc.DocumentElement.AppendChild(doc.ImportNode(xmlsig, true));
            //Console.WriteLine(doc.ImportNode(xmlsig,true));

        }

        private static X509Certificate2 GetCertificateFromStore(string certName)
        {

            // Get the certificate store for the current user.
            X509Store store = new X509Store(StoreLocation.CurrentUser);
            try
            {
                store.Open(OpenFlags.ReadOnly);

                // Place all certificates in an X509Certificate2Collection object.
                X509Certificate2Collection certCollection = store.Certificates;
                // If using a certificate with a trusted root you do not need to FindByTimeValid, instead:
                // currentCerts.Find(X509FindType.FindBySubjectDistinguishedName, certName, true);
                X509Certificate2Collection currentCerts = certCollection.Find(X509FindType.FindByTimeValid, DateTime.Now, false);
                X509Certificate2Collection signingCert = currentCerts.Find(X509FindType.FindBySubjectDistinguishedName, certName, false);
                if (signingCert.Count == 0)
                    return null;
                // Return the first certificate in the collection, has the right name and is current.
                return signingCert[0];
            }
            finally
            {
                store.Close();
            }

        }
        // Encrypt a file using a public key.
        private static MemoryStream  EncryptFile(byte[] unencryptedData, RSACryptoServiceProvider rsaPublicKey)
        {
            MemoryStream stream = null;

            using (AesManaged aesManaged = new AesManaged())
            {
                // Create instance of AesManaged for
                // symetric encryption of the data.
                aesManaged.KeySize = 256;
                aesManaged.BlockSize = 128;
                aesManaged.Mode = CipherMode.CBC;
                using (ICryptoTransform transform = aesManaged.CreateEncryptor())
                {
                    RSAPKCS1KeyExchangeFormatter keyFormatter = new RSAPKCS1KeyExchangeFormatter(rsaPublicKey);
                    byte[] keyEncrypted = keyFormatter.CreateKeyExchange(aesManaged.Key, aesManaged.GetType());

                    // Create byte arrays to contain
                    // the length values of the key and IV.
                    byte[] LenK = new byte[4];
                    byte[] LenIV = new byte[4];

                    int lKey = keyEncrypted.Length;
                    LenK = BitConverter.GetBytes(lKey);
                    int lIV = aesManaged.IV.Length;
                    LenIV = BitConverter.GetBytes(lIV);

                    // Write the following to the FileStream
                    // for the encrypted file (outFs):
                    // - length of the key
                    // - length of the IV
                    // - ecrypted key
                    // - the IV
                    // - the encrypted cipher content


                    stream = new MemoryStream();
                    try
                    {

                        stream.Write(LenK, 0, 4);
                        stream.Write(LenIV, 0, 4);
                        stream.Write(keyEncrypted, 0, lKey);
                        stream.Write(aesManaged.IV, 0, lIV);

                        // Now write the cipher text using
                        // a CryptoStream for encrypting.
                        CryptoStream outStreamEncrypted = new CryptoStream(stream, transform, CryptoStreamMode.Write);
                        try
                        {

                            // By encrypting a chunk at
                            // a time, you can save memory
                            // and accommodate large files.
                            int count = 0;
                            int offset = 0;

                            // blockSizeBytes can be any arbitrary size.
                            int blockSizeBytes = aesManaged.BlockSize / 8;

                            do
                            {
                                if (offset + blockSizeBytes <= unencryptedData.Length)
                                {
                                    count = blockSizeBytes;
                                }
                                else
                                {
                                    count = unencryptedData.Length - offset;
                                }
                                outStreamEncrypted.Write(unencryptedData, offset, count);
                                offset += count;
                            }
                            while (offset < unencryptedData.Length);

                            outStreamEncrypted.FlushFinalBlock();
                        }
                        catch(Exception ex)
                        {
                            Console.WriteLine(""Error : {0}"", ex.Message);
                        }
                    }
                    catch(Exception ex)
                    {
                        Console.WriteLine(""Error : {0}"", ex.Message);
                    }
                    stream.Position = 0;
                }
            }
            return stream;
        }
    }
}

","324","<c#><xml><digital-signature><pkcs#7><xml-signature>","1","0","1","2018-06-20 00:48:36","","0","0","472495","","2018-06-20 00:48:36","2017-07-01 04:57:51",""
"49176348","Why can't I verify signature with PKCS#11?","Consider, I have created PKCS#7 message:
ContentInfo contentInfo = new ContentInfo(someByteArrayToSign);
SignedCms signedCms = new SignedCms(contentInfo);

var certificateFromFile = new X509Certificate2(""myCert.pfx"");

var signer = new CmsSigner(certificateFromFile);
signer.DigestAlgorithm = new Oid(""1.3.14.3.2.26"");
signedCms.ComputeSignature(signer);

var myCmsMessage = signedCms.Encode();
SendBytesOverNetwork(myCmsMessage);

Now, I'd like to very signature. The following scenario works (using BounceCastle and PKCS11.Interop):
var signedPayloadCms = new CmsSignedData(GetBytesFromNetwork());

var data = (byte[])signedPayloadCms.SignedContent.GetContent();
byte[] signature = null;

foreach (SignerInformation signer in signedPayloadCms.GetSignerInfos().GetSigners())
{
    if (signature != null)
    {
        throw new NotSupportedException(""Multiple signature"");
    }

    signature = signer.GetSignature();
}

var algCkm = CKM.CKM_SHA1_RSA_PKCS;
var mechanism = new Mechanism(algCkm);
Session.Verify(mechanism, somePublicKey.Handle, data, signature, out var isValid)
//isValid  == true

But when I use CKM_RSA_PKCS and manually calculate HASH, something is wrong:
var algHash = CKM.CKM_SHA_1;
var dataHash = Session.Digest(new Mechanism(algHash), data);

var algCkm = CKM.CKM_RSA_PKCS;
var mechanism = new Mechanism(algCkm);
Session.Verify(mechanism, somePublicKey.Handle, dataHash, signature, out var isValid)
//isValid  == false

What I am missing? Why manually calculated hash is not valid?
","It turned out, that hash needs to be wraped with DigestInfo structure. The simplest ways to do is to add prefix: (prefix valid only for SHA-1 hashes):
var dataHash = Session.Digest(new Mechanism(algHash), data);
dataHash = HexToByteArray(""30 21 30 09 06 05 2B 0E 03 02 1A 05 00 04 14"")
             .Concat(dataHash).ToArray();

 var algCkm = CKM.CKM_RSA_PKCS
...

Found in RF3447C: https://www.ietf.org/rfc/rfc3447.txt
How to create DigestInfo by self: C# - How to calculate ASN.1 DER encoding of a particular hash algorithm?
","320","<c#><.net-core><pkcs#11><pkcs#7><softhsm>","-1","0","1","2019-05-08 20:03:06","49191404","2","","10607772","","2019-05-08 20:03:06","2018-03-08 15:08:47",""
"47380716","Information used to verify PKCS#7 signature in Java","I have 2 files : a PKCS#7 signature and a file, which has been signed by this signature. My question is how can I verify this signature properly? Which data exactly should I use and extract from the PKCS7 in order to do that? I've heard that the order of the actions looks like this:

Check whether a certificate out of date or not
Check whether CA is out out of date or not
Check whether this public key is still valid
And perhaps extract the hash value from the attribute in PKCS7 file and check for equality to a hash file, which has been signed

Am I correct? And how can I do it using Bouncy Castle? I've come across with this
CMSSignedData data = new CMSSignedData(bytesArray)

But how can I check validality using only one method, if there is? This looks like overcomplicated - I should take every certificate, check it's expire date, writing custom method that does it.. And somehow check that the public key is still valid.. Is it possible to do it easier?
","https://docs.oracle.com/javase/tutorial/security/apisign/versig.html
You can find here a a quite good step by step description. Although this is not using Bouncy Castel but just 
","319","<java><digital-signature><bouncycastle><pkcs#7>","0","0","1","2017-11-19 19:20:12","","1","","","","","2017-11-19 18:53:32",""
"50620303","How to verify PKCS#7 signature in PHP","I have a digital signature (encrypted format PKCS#7) needs to be verified So I have tried by using different PHP core methods(openssl_verify,  openssl_pkcs7_verify and even tried by external library such as phpseclib But nothing worked :(
I get a signature along with some extra params through by this link.. 

http://URL?sign={'param':{'Id':'XXXXXXX','lang':'EN','Rc':'00','Email': 'test@yahoo.com'’},'signature':'DFERVgYJKoZIhvcNAQcCoIIFRzCCBUMCAQExCzAJBgUrDg
  MCGgUAMIGCBgkqhkiG9w0BBwGgdQRzeyJEYXRlIjoidG9fY2hhcihzeXNkYXRlJ0RETU1ZWVlZJykgIiwiSWQiOiJ
  VMDExODg3NyIsIklkaW9tYSI6IkNBUyIsIk51bUVtcCI6IlUwM23D4DEE3dSi...'} 

PHP code - returns always 0(false) instead of 1(true).
       $JSONDATA               = str_replace(""'"", '""', @$_GET[""sign""]);
       $data                   = json_decode($JSONDATA, true);
       $this->email            = $data['param'][""EMAIL""];
       $this->signature        = $data['signature'];
       $this->signature_base64 =  base64_decode($this->signature);
       $this->dataencoded      = json_encode($data['param']);

       //SOLUTION 1 (By using phpseclib)  but didnt work..
       $rsa        = $this->phpseclib->load();
       $keysize    =  2048;
       $rsa->setPrivateKeyFormat(CRYPT_RSA_PRIVATE_FORMAT_PKCS8);
       $rsa->setPublicKeyFormat(CRYPT_RSA_PUBLIC_FORMAT_PKCS1);
       $d = $rsa->createKey($keysize);
       $Kver = $d['publickey'];
       $KSign = $d['privatekey'];

       // Signing
       $rsa->loadKey($KSign);
       $rsa->setSignatureMode(CRYPT_RSA_ENCRYPTION_PKCS1);
       $rsa->setHash('sha256');

       $signature = $rsa->sign($this->dataencoded);
       $signedHS = base64_encode($signature);

       // Verification
       $rsa->loadKey($Kver);
       $status = $rsa->verify($this->dataencoded, $this->firma_base64); // getting an error on this line Message: Invalid signature
       var_dump($status);  // reutrn false


        //SOLUTION 2 (By using code php methods)

        // obtener la clave pública desde el certifiado y prepararla
       $orignal_parse = parse_url(""https://example.com"", PHP_URL_HOST);
       $get = stream_context_create(array(""ssl"" => array(""capture_peer_cert"" => TRUE)));
       $read = stream_socket_client(""ssl://"".$orignal_parse."":443"", $errno, $errstr, 30, STREAM_CLIENT_CONNECT, $get);
       $cert = stream_context_get_params($read);
       $certinfo = openssl_x509_parse($cert['options']['ssl']['peer_certificate']);
       openssl_x509_export($cert[""options""][""ssl""][""peer_certificate""],$cert_key);
       $pubkeyid = openssl_pkey_get_public($cert_key);

       $dataencoded = json_encode($data['param']);

       echo $ok = openssl_x509_check_private_key($cert_key,$this->firma_base64); // return nothing
       echo $ok1 = openssl_verify($dataencoded, $this->firma_base64, $pubkeyid, OPENSSL_ALGO_SHA256); // returns 0
       echo $ok2 = openssl_verify($dataencoded, $this->firma_base64, $pubkeyid, OPENSSL_ALGO_SHA512);   // returns 0  
       echo $ok3 = openssl_verify($dataencoded, $this->firma_base64, $pubkeyid, OPENSSL_ALGO_SHA256);  // returns 0
        echo $ok4 = openssl_verify($dataencoded, $this->firma, $pubkeyid, OPENSSL_ALGO_SHA512);   // returns 0     

Java code - (this code works and returns true)
private boolean verifySignautre(String frm) throws NetinfException, IOException, CMSException,
CertificateException, OperatorCreationException, Exception {
Security.addProvider(new BouncyCastleProvider());

//we extract the containers that make up the signature and the keystore used to sign included in the same signature.
CMSSignedData signedData = new CMSSignedData(Base64.decode(frm.getBytes()));
SignerInformationStore signers = signedData.getSignerInfos();
Store certStore = signedData.getCertificates();
Collection c = signers.getSigners();
Iterator it = c.iterator();

while (it.hasNext()) {
//retrieve the certificate with the recipient's id.
SignerInformation signerInfo = (SignerInformation) it.next();
Collection certCollection = certStore.getMatches(signerInfo.getSID());
Iterator certIt = certCollection.iterator();
X509CertificateHolder signerCertificateHolder = (X509CertificateHolder) certIt.next();

//create the container to validate signature.
ContentVerifierProvider contentVerifierProvider = new BcRSAContentVerifierProviderBuilder(new
DefaultDigestAlgorithmIdentifierFinder()).build(signerCertificateHolder);

//valid signature and then certificate validity date
try{
X509Certificate signedcert = new
JcaX509CertificateConverter().setProvider(""BC"").getCertificate(signerCertificateHolder);
signedcert.checkValidity();
signedcert.verify(signedcert.getPublicKey());
return true;
}catch(Exception e){
return false;
}
}

I simply need to convert this Java code into PHP. However, as you can see above that I tried different approaches but none of them worked.
Please support me to find the solution. 
your support would be higly appreciated
","","319","<ssl><openssl><ssl-certificate><phpseclib><pkcs#7>","1","","0","2018-05-31 09:38:14","","3","","9874839","","2018-05-31 09:38:14","2018-05-31 08:53:14",""
"43702228","Extract a CSR from PKCS7","There is a requirement where I have to extract PKCS10 (CSR) from PKCS7 pem formatted string that I have. Although I can read the contents of the PKCS7, I see that it just a Certificate and not a CSR.
I also ran the pem string with the https://certlogik.com/decoder/ to see what it consists of. All I can see is a valid certificate.
Is there a way where I can get the CSR from the below pem formatted string.
-----BEGIN CERTIFICATE-----
MIIIjAYJKoZIhvcNAQcCoIIIfTCCCHkCAQExDzANBglghkgBZQMEAgEFADCCAyoG
CSqGSIb3DQEHAaCCAxsEggMXMIIDEzCCAfsCAQAwSjFIMEYGA1UEAww/MjNFNzEz
NjAtMjRDOS00NzEhdXJuOnV1aWQ6NUJFNEYwQ0YtMjExMS01OEM3LUE5MkUtREQ1
NzlDN0U1MTE5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAp1BuQRtK
LQtXrl4x9hwSmIR0SteTFO4WGrlaKapnllM7q/WyClkZg/fAPCN5+Lkn/CItctkM
Wds/09aqzA+dAAdK4X1uuq+ux7zKYYTIkPmcO7oaFWxGvm8ZvOX+2TH1MN5/xyWD
VHveRrFy7aHKsR+yFuEtrYpsSGBCU9pUrXKPkRBgvC4Ml3M/hjnSp3t3JOjZzeVQ
GA5HyQG94KP5VMgXcF2r9TTnHHqxMUBPc00UGL25eqxC8xmPTPh/lt8U5tHly3cS
T434EHblgbQOa4wo7XxytYYqvAZEwiZLv8DgeKJS/lOjCSQNpF3tIDdxengx0S/d
R1HZZa/ZANeE8QIDAQABoIGDMIGABgkqhkiG9w0BCQ4xczBxMDwGCisGAQQBgjdC
AQAELnVybjp1dWlkOjVCRTRGMENGLTIxMTEtNThDNy1BOTJFLURENTc5QzdFNTEx
OQAwDgYDVR0PAQH/BAQDAgWgMBMGA1UdJQQMMAoGCCsGAQUFBwMCMAwGA1UdEwEB
/wQCMAAwDQYJKoZIhvcNAQELBQADggEBADgabvOqPxhzUSpOaI9T/sPXQAvmVrcp
dIke2MVHeNnvyYjyg070yv3bbHXRDsjq3MgEkBDYRNOW8/dgtjyGxyRPEMJbfHoF
BJrgbnZXwqch3jeZjZKegn39OtfVvatc6kBzN9PssKGDuTl3C60e0w/qS6eCgsD3
nfkMKacpRcLL7jsh0hEk5nBI7XxtVRygb1uUe6ZqDZEYMEwa4ykID5WB/cgmvp2u
SXja2LgFi2N1bqHEeYqcVr+8YDlHHkZ9O8GOjsqUIuvNcXzbWElcfhPKLGL9PRJ9
wkBI+s4jDZrDwH1npDfu03sVNvhRZU85SqiUP1Ef6mtnk85lfnsi1W6gggPXMIID
0zCCArugAwIBAgIBZjANBgkqhkiG9w0BAQsFADAoMSYwJAYDVQQDEx1EZXZpY2Vz
IENlcnRpZmljYXRlIEF1dGhvcml0eTAeFw0xNzA0MjYwNTU0MTdaFw0xNzA2MjUw
NjA0MTdaMEoxSDBGBgNVBAMMPzIzRTcxMzYwLTI0QzktNDcxIXVybjp1dWlkOjVC
RTRGMENGLTIxMTEtNThDNy1BOTJFLURENTc5QzdFNTExOTCCASIwDQYJKoZIhvcN
AQEBBQADggEPADCCAQoCggEBALQzG3preB06ezMbHklWfMHLD6XtjPHMBtSl+76q
ZePnWcv/V0B9/vvmf9OOeGRFk4FZA7omHmu0yQZ38KOjnziV5L1zkD+4JDlLXvNE
YDNpB1jsFtxLv2c2fL31Dw0/O2Z/E2TbKKGfJjxXZfiLLxxag9Id6aXqc88jlmdG
B99pn3SSEi2C5pKO3dWwLD6vDDwohr8iXR9TLQg4HrG8b4vzhMDVVzhlGkeyvtYE
f4EH4q71draLzDe0G0meboSbEUzbkFXggPid4jHYN6Nv0je07l3pXn7FrLIssMAw
Wo9VsPky2IDGEvxb1oLTG+WlFJHApBYbAHGcyBH6rOw4EY8CAwEAAaOB5TCB4jA8
BgorBgEEAYI3QgEABC51cm46dXVpZDo1QkU0RjBDRi0yMTExLTU4QzctQTkyRS1E
RDU3OUM3RTUxMTkAMA4GA1UdDwEB/wQEAwIFoDATBgNVHSUEDDAKBggrBgEFBQcD
AjAMBgNVHRMBAf8EAjAAMFAGA1UdIwRJMEeAFDPgDOIez45DN/HKylyhPG8NJdF+
oSmkJzAlMSMwIQYDVQQDExpSb290IENlcnRpZmljYXRlIEF1dGhvcml0eYIEeDbF
SjAdBgNVHQ4EFgQUvSTP7MCmf6Nrpo5KswIdDmsyxc0wDQYJKoZIhvcNAQELBQAD
ggEBAH+LU8oSyknN5NQp6YWFBekOxid17J+opvinRB1gQBxYGmLLpNwnJ3jBx+1a
Qo7aMMupjDLyClP7hP0lqDLbSY8RFBjlVcqhv4wai/rVRNVigfakJJrjUtUPVNSe
/NVpBH7NdAqJVM//e0WEWFyGGgsJdP0f11tRy1d871+DuUSZX2Hzv5vTbE8rScnQ
YUdpQ1sJX7VbMW+E1SGc0XDUqJEQpDuYXPP00/Jxamch+MHLyHjX4HTcmPYRoo9c
NEzL+fOob0ZI8UdVrN6PmCoRiePEW6ol9z5UUGb6VU7hwqV9BoLthUQBT+6dHsxs
dpl+EE8rX2BnmrWxkD6A860f8noxggFYMIIBVAIBATAtMCgxJjAkBgNVBAMTHURl
dmljZXMgQ2VydGlmaWNhdGUgQXV0aG9yaXR5AgFmMA0GCWCGSAFlAwQCAQUAMA0G
CSqGSIb3DQEBAQUABIIBAF5bjUS5Su6nqrzveapNCOuJAZf8A6OtiuNFN7H4JdRj
rLtepOVkP+nYo99vtLeeGae1CTCi357bd16v58Xv4JOoISqS9XoVkmEGvGUiClGR
wE+xYw7+++1xMDIQyvwHu6Z87VVOKlChTpT5du+eP6vBbfxeg5WN/23mdW2JZT5d
E/XohJgL4OnqhJuG5miVQ8hOu/CvZZ0nYZMz75s5+tVsES76o1U/9QfjS+CQImMF
AV3d7UBmCUnqZ10t5Y9IHBa9AEnMLfK/yIo2uwVIwI89LzA3+L8Ql1WJ1ZA7ecXZ
xGUIMz87AVho2zm3Z4tpZIGKxFlVvL3tkZQMZwocgCc=
-----END CERTIFICATE-----

","Since you have the certificate, you can fill the CSR just getting the information contained in the certificate (subject, public key, ...)
But since you don't have the private key associated to this public key, you won't be able to sign the CSR.
","318","<java><security><bouncycastle><pkcs#7><pkcs#10>","-1","1","1","2017-05-02 13:16:34","","0","","","","","2017-04-30 02:06:25",""
"23252709","Read PKCS#7 from ASN1 with PasswordRecipientInfo","I am reading a PKCS#15 file (asn1). Eventually I end up having a pkcs#7 structure, which contains a PasswordRecipientInfo (PBKDF2).
I can read the asn1 structure into a Bouncy Castle EnvelopedData. I can read all encryption parameters by hand, and I know the password to decrypt the data.
But how can I convert the EnvelopedData to something like CmsEnvelopedData (which has more functionality). If I feed the asn1 data to CmsEnvelopedData it fails with malformed data etc.
I also use Rebex, but that seems not to support the PasswordRecipientInfo structure (although they do implement the PBKDF2 key generation).
I did do all the decryption by hand, but do not end up with useful data, so I probably do make a mistake with all the 3Des decryption.
This is the example ASN1 stream:
    0:d=0  hl=4 l= 823 cons: SEQUENCE          
    4:d=1  hl=4 l= 815 cons: cont [ 2 ]        
    8:d=2  hl=2 l=   1 prim: INTEGER           :02
   11:d=2  hl=2 l= 105 cons: SET               
   13:d=3  hl=2 l= 103 cons: cont [ 3 ]        
   15:d=4  hl=2 l=   1 prim: INTEGER           :00
   18:d=4  hl=2 l=  27 cons: cont [ 0 ]        
   20:d=5  hl=2 l=   9 prim: OBJECT            :PBKDF2
   31:d=5  hl=2 l=  14 cons: SEQUENCE          
   33:d=6  hl=2 l=   8 prim: OCTET STRING      [HEX DUMP]:91923125EC5C328F
   43:d=6  hl=2 l=   2 prim: INTEGER           :07D0
   47:d=4  hl=2 l=  35 cons: SEQUENCE          
   49:d=5  hl=2 l=  11 prim: OBJECT            :1.2.840.113549.1.9.16.3.9
   62:d=5  hl=2 l=  20 cons: SEQUENCE          
   64:d=6  hl=2 l=   8 prim: OBJECT            :des-ede3-cbc
   74:d=6  hl=2 l=   8 prim: OCTET STRING      [HEX DUMP]:9F040621A5AF002B
   84:d=4  hl=2 l=  32 prim: OCTET STRING      [HEX DUMP]:52237B22E48C5D579DBA6FD457DFC47C7C9F244306F3856CE98826C5657E9B60
  118:d=2  hl=4 l= 701 cons: SEQUENCE          
  122:d=3  hl=2 l=   9 prim: OBJECT            :pkcs7-data
  133:d=3  hl=2 l=  20 cons: SEQUENCE          
  135:d=4  hl=2 l=   8 prim: OBJECT            :des-ede3-cbc
  145:d=4  hl=2 l=   8 prim: OCTET STRING      [HEX DUMP]:4620AEA54621405F
  155:d=3  hl=4 l= 664 prim: cont [ 0 ]        
  823:d=1  hl=2 l=   2 prim: INTEGER           :0100

and some code:
 var ed = EnvelopedData.GetInstance(encodedkey);

","Seems some wrapper code is missing from the der-data above:
            var bs = new MemoryStream();
            var constructeddata = new DerSequenceGenerator(bs);
            constructeddata.AddObject(new DerObjectIdentifier(""1.2.840.1.113549.1.7.3""));
            constructeddata.AddObject(new DerTaggedObject(true, 0, ed));
            //constructeddata.AddObject(ed.ToAsn1Object());
            constructeddata.Close();

            var derdata = bs.ToArray();


            var cms = new CmsEnvelopedData(derdata);

So what I do is adding a top layer to the data. ed is the EnvelopedData that I was able to import from the der-data.
","314","<c#><bouncycastle><pkcs#7>","1","1","1","2014-04-24 11:59:29","23268282","0","","41956","","2014-04-23 18:45:41","2014-04-23 18:44:24",""
"24123082","OWA not verifying emails signed by OpenSSL","I am trying to create an android app which can send sign and encrypted mails using OpenSSL. 
So far I am able to send Signed Emails and verify them using both web browsers and my android apps. 
Same is the case with Encryption and Decryption. 
But now when I am trying to send signed+encrypted mails from my android app. The Exchange server is unable to verify/decrypt the mails send from my android app. 
When I am trying to open open these mails using OWA I get this error: 
One or more errors occurred while the message was being loaded. Error: (0x800ccef6)
The digital signature of this message couldn't be validated because an error occurred while the message was being loaded.

Any pointers about what this error code means? 
UPDATE 1:- Adding encryption and signing code. 
Sign Code:
public static boolean Java_PKCS7Sign(File inputFile, File outputFile, PrivateKey privateKey, X509Certificate certificate, String signingAlgorithm) {
    try {
        String inputFilePath = inputFile.getAbsolutePath();
        String outputFilePath = outputFile.getAbsolutePath();

        byte arr[] = android.security.Credentials.convertToPem(certificate);
        InputStream certIs = new  ByteArrayInputStream(arr);
        OpenSSLX509Certificate openSSLcert = OpenSSLX509Certificate.fromX509PemInputStream(certIs);
        byte openSSLcertEncoded[] = openSSLcert.getEncoded();
        long signCertRef = NativeCrypto.d2i_X509(openSSLcertEncoded);

        OpenSSLKey oKey = OpenSSLKey.fromPrivateKey(privateKey);
        long evpKeyRef = oKey.getPkeyContext();

        //boolean res = PKCS7Sign(signCertRef, pkeyRef, certs, bioRef, flags, a, b)
        long arr1[] = new long[0];
        return PKCS7Sign(inputFilePath, signCertRef, evpKeyRef, arr1, outputFilePath);
    } catch (Exception e) {
        e.printStackTrace();
    }


    return false;
}

In the above code PKCS7Sign is a JNI call to OpenSSL. And the flags used are for signing are: int flgs = PKCS7_STREAM | PKCS7_DETACHED | PKCS7_BINARY ;
Encrypt Code:
public static boolean Java_PKCS7encrypt(File inputData, File output, X509Certificate[] recipientCertificates, String encryptionAlgorithm) {
    if(!inputData.exists() || !output.exists())
        return false;

    try {
        fis = new FileInputStream(inputData);
        OpenSSLBIOInputStream bis = new OpenSSLBIOInputStream(fis);
        long bioRef = NativeCrypto.create_BIO_InputStream(bis);

        int certsRefArrLength = recipientCertificates.length;
        long certsRefArr[] = new long[certsRefArrLength];
        for (int i = 0; i < certsRefArrLength; i++) {
            byte arr[] = android.security.Credentials.convertToPem(recipientCertificates[i]);
            InputStream certIs = new  ByteArrayInputStream(arr);
            OpenSSLX509Certificate openSSLcert = OpenSSLX509Certificate.fromX509PemInputStream(certIs);
            byte openSSLcertEncoded[] = openSSLcert.getEncoded();
            certsRefArr[i] = NativeCrypto.d2i_X509(openSSLcertEncoded);
        }

        String outputFilePath = output.getAbsolutePath();

        return PKCS7encrypt(bioRef, certsRefArr, outputFilePath, encryptionAlgorithm);


    } catch (FileNotFoundException e) {
        e.printStackTrace();
    } catch (CertificateEncodingException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    } catch (Exception e) {
        e.printStackTrace();
    }
    return false;
}

Same as in case of sign PKCS7encrypt is a JNI call to OpenSSL. And flags used are: 
int flags = PKCS7_STREAM | PKCS7_BINARY;

And cipher used for encryption is cipher = EVP_rc2_40_cbc();
","","311","<outlook><openssl><pkcs#7><outlook-web-app><email-verification>","1","","0","2014-06-10 05:50:15","","2","","1416742","","2014-06-10 05:50:15","2014-06-09 15:02:25",""
"19999947","blowfish encryption with iaik pkcs7 EnvelopedData","I am migrating my module from bouncy castle to iaik pkcs7. I need to use blowfish,twofish and idea encryption algorithms in conjunction with iaik.pkcs.pkcs7.EnvelopedDataStream of IAIK library. Idea encryption algorithm Id is present in AlgorithmID class of IAIK but cant be implemented directly(probably because of variable key length). Blowfish is present as separate cipher class but I could not figure out a way to use it along with enveloped data(which is important because I will be using public key encryption method). I can actually encrypt using blowfish,then wrap using enveloped data and some algorithm such as aes and send this but the receiver won't have the algorithm info in that case. Secret key can be passed along with recepientInfo.
If anyone can possible show me the way een basic I may be able to proceed.
Thanks in advance
Atraya
","Hi I came up with the solution 
ByteArrayInputStream is = new ByteArrayInputStream(message);
  AlgorithmID blowfish=new AlgorithmID(""1.3.6.1.4.1.3029.1.2"",""BLOWFISH_CBC"",""Blowfish/CBC/PKCS5Padding"");
  byte[] iv = new byte[8];
    random.nextBytes(iv);
  try{
        KeyGenerator keyGen = KeyGenerator.getInstance(""Blowfish"", ""IAIK"");
        secretKey = keyGen.generateKey();

        AlgorithmParameterSpec params = new IvParameterSpec(iv);

        keyGen.init(128);

        secretKey = keyGen.generateKey();
        iaik.pkcs.pkcs7.EncryptedContentInfoStream eci = new iaik.pkcs.pkcs7.EncryptedContentInfoStream(ObjectID.pkcs7_data, is);
        eci.setupCipher(blowfish, secretKey, params);
        return eci;
  }catch(Exception e){

  }

Tell me if this way is wrong or can be improved or there is another way of doing this.
thanks
","300","<java><public-key-encryption><blowfish><pkcs#7><iaik-jce>","0","0","1","2013-11-19 06:52:03","","0","4","","","","2013-11-15 11:22:50",""
"55237425","Sign multiple location with same response xml signature in PKCS7 (CMS)","PDF document needs to signed with national digital identity.
National digital identity WebService provide facility to sign document, in my project I have integrated same. 
Requesting Esign services give response in PKCS7(CMS) format.
I want to append same response in multiple locations, So i am creating multiple  empty signature container post i receive Response from service.
I referred this article : Sign Pdf Using ITextSharp and XML Signature
But in given article we only one signing location is present but i have multiple signing locations.
I am using itext sharp Library.
Using MakeSignature.SignDeferred Method to append signature at multiple locations but it is showing PDF invalid.
Please find below response XML which i received from Webservice:
<?xml version=""1.0"" encoding=""UTF-8""?>
<EsignResp errCode=""NA"" errMsg=""NA"" resCode=""259A52453BE95D3A1071193995E062E3EAD796AD"" status=""1"" ts=""2019-03-18T14:26:59"" txn=""UKC:eSign:2998:20190318142602814"">
    <UserX509Certificate>--Usercerti in base64--</UserX509Certificate>
    <Signatures>
        <DocSignature error="""" id=""1"" sigHashAlgorithm=""SHA256"">--Signature in base 64 in PKCS7(CMS)---</DocSignature>
    </Signatures>
    <Signature xmlns=""http://www.w3.org/2000/09/xmldsig#"">
        <SignedInfo xmlns=""http://www.w3.org/2000/09/xmldsig#"">
            <CanonicalizationMethod Algorithm=""http://www.w3.org/TR/2001/REC-xml-c14n-20010315""></CanonicalizationMethod>
            <SignatureMethod Algorithm=""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256""></SignatureMethod>
            <Reference URI="""">
                <Transforms>
                    <Transform Algorithm=""http://www.w3.org/2000/09/xmldsig#enveloped-signature""></Transform>
                </Transforms>
                <DigestMethod Algorithm=""http://www.w3.org/2001/04/xmlenc#sha256""></DigestMethod>
                <DigestValue>MrOfovytOIp/8qlEkgamrcyhGTSGTN5aS1P+08Fbwfk=</DigestValue>
            </Reference>
        </SignedInfo>
        <SignatureValue>BBexJyk47YaTdoDgXaFRCtJq1Gc3KsZNt48/I8X4TgNJ6gh2NI9Y5Y9Tc7bozrK/QRy1VYPOWYq5r/YdunjMQLmJJicyeqeqe2eD+TJ8oecpjCbmhPnDK2VgaJ2h00lIe/toKwAmV4PTBA1a5wkz77hj+HTkWXMkPEIsBUnBirVpHxe2bYaa7jcIIpWtJmqvcSurKTOeyFRa+AFWfwWHB/EzHJlDmgiMXzrNauxJ4HpphNaRU+bO5JdyzJs/8Zx4i6qwSEybkuprL3GdO9C7zMPiC98CTfO2UrbZWy1pSvwEqlVXQIfrkp+m2JRbFgT8EEIGfXUS+AJBPRwhY1Xsww==</SignatureValue>
        <KeyInfo>
            <KeyValue>
                <RSAKeyValue>
                    <Modulus>0o9vohWZ3ztI9ea8D/zUEUBRq6c82BE7sFmr1hNMeuGSJQFf39ceesRtGUzlUYVWXcU23P8sVZ5419CHh7ApFzUXaLD72i/2d5FFI0n3iRlTQec9PEUHyrvOCVDpqBhbnrO/EHBqRluUQJTQUtMu5mhPNFV7IIJMTEAsUhCL9adZXXQK9NeK0foRr29Oq7VdEGfSeLzHIibpQmhNPh89oJXqu0cmbNSW4J4i2GmwHQpmsmHaSQcgh4mgVrykO64pAKXPreAPipDHQM1l/e5hilYlWfLHxhC5ObTCTcydQ218IVulFOFhdQt7xVV61TOmoTC2elhWbDqoLJBVU5mBfQ==</Modulus>
                    <Exponent>AQAB</Exponent>
                </RSAKeyValue>
            </KeyValue>
            <X509Data>
                <X509SubjectName>CN=DS NSDL E GOVERNANCE INFRASTRUCTURE LIMITED 3,ST=MAHARASHTRA,PostalCode=400013,O=NSDL E GOVERNANCE INFRASTRUCTURE LIMITED,C=IN</X509SubjectName>
                <X509Certificate>--public certificate of provider--- </X509Certificate>
            </X509Data>
        </KeyInfo>
    </Signature>
</EsignResp>

EDIT: As per latest communication, Web Service provide response for whatever hash is being provided from my end. They do not validate it. Hash is any 64 character string. Kindly let me know what are the possible ways by which i can use this to append PKCS7 signature on a PDF document. 
Below Code for generating request :
if (System.IO.File.Exists(tempPdf))
System.IO.File.Delete(tempPdf);

using (PdfReader reader = new PdfReader(pdfReadServerPath))
{
    using (FileStream os = System.IO.File.OpenWrite(tempPdf))
    {
        PdfStamper stamper = PdfStamper.CreateSignature(reader, os, '\0',null,true);

        PdfSignatureAppearance appearance = stamper.SignatureAppearance;

        appearance.SetVisibleSignature(new Rectangle(15, 15, 100, 100), 1, ""sign1"");

        appearance.CertificationLevel = PdfSignatureAppearance.NOT_CERTIFIED;
         AllPagesSignatureContainer external = new AllPagesSignatureContainer(appearance);

        MakeSignature.SignExternalContainer(appearance, external, 8192);
        Stream data = appearance.GetRangeStream();

       Stream data = appearance.GetRangeStream();
        byte[] hash = ReadFully(data); //Convert stream to byte
        _signatureHash = hash;


    }
}
//create sha256 message digest
using (SHA256.Create())
{
    _signatureHash = SHA256.Create().ComputeHash(_signatureHash);
}
bool check = false;
string hexencodedDigest = null;
//create hex encoded sha256 message digest
hexencodedDigest = new BigInteger(1, _signatureHash).ToString(16);
hexencodedDigest = hexencodedDigest.ToUpper();
if (hexencodedDigest.Length == 64)
{
    **Send this hexencoded hash to webservice**
}

Below code for appending signature: 
//DLL Call
eSign2_1_Request_Response req_resp = new eSign2_1_Request_Response();

//// Response XML Digest process
string resp_xml = Request.Form[""msg""].ToString();//signature response XML;
XmlDocument xmlDoc = new XmlDocument();
xmlDoc.LoadXml(resp_xml);
XmlElement EsignResp = xmlDoc.DocumentElement;
if (EsignResp.Attributes != null && EsignResp.Attributes[""status""].Value != ""1"")
{
    req_resp.WriteTextFileLog(""errCode: "" + EsignResp.Attributes[""errCode""].Value + "" & Error Message: "" + EsignResp.Attributes[""errMsg""].Value, ""log"", base_folder_path);
}
else
{
    req_resp.WriteTextFileLog(resp_xml, ""xml"", base_folder_path + ""\\"" + file_withoutExtn + ""_responseXML.txt"");
    //-------Continue to generate signed PDF by passing parameter to DLL

    XmlNodeList nodeList = xmlDoc.GetElementsByTagName(""Signatures"");

    string signature = nodeList[0].FirstChild.InnerText;

    string signedPdf = @""D:\POC Hosted\TryNSDL\TryNSDL\wwwroot\TempPath\signedPdf.pdf"";
    string tempPdf = @""D:\POC Hosted\TryNSDL\TryNSDL\wwwroot\TempPath\tempPdf.pdf"";
    using (PdfReader reader = new PdfReader(tempPdf))
    {

        using (FileStream os = System.IO.File.OpenWrite(signedPdf))
        {
            byte[] encodedSignature = Convert.FromBase64String(signature);

            IExternalSignatureContainer external = new MyExternalSignatureContainer(encodedSignature);

            MakeSignature.SignDeferred(reader, ""sign1"", os, external);
        }
    }
}

Code for Allsignature container:
public class AllPagesSignatureContainer : IExternalSignatureContainer
{
    public AllPagesSignatureContainer(PdfSignatureAppearance appearance)
    {
        this.appearance = appearance;

    }

    public void ModifySigningDictionary(PdfDictionary signDic)
    {
        signDic.Put(PdfName.FILTER, PdfName.ADOBE_PPKMS);
        signDic.Put(PdfName.SUBFILTER, PdfName.ADBE_PKCS7_DETACHED);

        PdfStamper stamper = appearance.Stamper;
        PdfReader reader = stamper.Reader;
        PdfDictionary xobject1 = new PdfDictionary();
        PdfDictionary xobject2 = new PdfDictionary();
        xobject1.Put(PdfName.N, appearance.GetAppearance().IndirectReference);
        xobject2.Put(PdfName.AP, xobject1);

        PdfIndirectReference PRef = stamper.Writer.PdfIndirectReference;
        PdfLiteral PRefLiteral = new PdfLiteral((PRef.Number + reader.NumberOfPages) + "" 0 R"");

        for (int i = 2; i < reader.NumberOfPages+1; i++)
        {
            var signatureField = PdfFormField.CreateSignature(stamper.Writer);

            signatureField.Put(PdfName.T, new PdfString(""ClientSignature_"" + i.ToString()));
            signatureField.Put(PdfName.V, PRefLiteral);
            signatureField.Put(PdfName.F, new PdfNumber(""132""));
            signatureField.SetWidget(new Rectangle(15, 15, 100, 100), null);
            signatureField.Put(PdfName.SUBTYPE, PdfName.WIDGET);

            signatureField.Put(PdfName.AP, xobject1);
            signatureField.SetPage();
            Console.WriteLine(signatureField);

            stamper.AddAnnotation(signatureField, i);
        }
    }

    public byte[] Sign(Stream data)
    {
       return new byte[0];
    }

    PdfSignatureAppearance appearance;

}

I used append mode in create signature then signature doesn't come. Only empty signatures are visible in adobe reader : https://www.sendspace.com/file/5d1z0t
If i try same without appendmode PdfStamper stamper = PdfStamper.CreateSignature(reader, os, '\0'); and PdfLiteral PRefLiteral = new PdfLiteral((PRef.Number + 1 + 2 * (reader.NumberOfPages - 1)) + "" 0 R"");
then it works fine : https://www.sendspace.com/file/agat9a, but it can be used for single signer only. Nd if we again try to use same pdf to Resign then old signatures becomes invalid. (obviously since append mode is not used.)
I guess For signing to work in append mode, Change is required in line of PdfLiteral - I have less idea about same how it actually works.
Signed file :https://www.sendspace.com/file/5d1z0t
Input file: https://www.sendspace.com/file/wh2h2y
","A first quick look through your code revealed two major errors.
Hashing twice
You hash the document data twice (using different APIs for that... weird!):
        Stream data = appearance.GetRangeStream();

        byte[] hash = DigestAlgorithms.Digest(data, ""SHA256"");

        [...]

        _signatureHash = hash;// signatureHash;
    }
}

[...]
using (SHA256.Create())
{
    _signatureHash = SHA256.Create().ComputeHash(_signatureHash);
}

This is wrong, this makes no sense.
Injecting the wrong signature container
You say

Requesting Esign services give response in PKCS7(CMS) format.

But instead of using the CMS signature container from the result as such, you try to build an own CMS container, injecting the Esign response CMS container as if it was a mere signed hash:
XmlNodeList UserX509Certificate = xmlDoc.GetElementsByTagName(""UserX509Certificate"");
byte[] rawdat = Convert.FromBase64String(UserX509Certificate[0].InnerText);
var chain = new List<Org.BouncyCastle.X509.X509Certificate>
{
    Org.BouncyCastle.Security.DotNetUtilities.FromX509Certificate(new X509Certificate2(rawdat))
};
var signaturee = new PdfPKCS7(null, chain, ""SHA256"", false);
_signature = signaturee;

_signature.SetExternalDigest(Convert.FromBase64String(signature), null, ""RSA"");

byte[] encodedSignature = _signature.GetEncodedPKCS7(_hash, null, null, null, CryptoStandard.CMS);

According to your comments in the XML
    <DocSignature error="""" id=""1"" sigHashAlgorithm=""SHA256"">--Signature in base 64 in PKCS7(CMS)---</DocSignature>

this DocSignature element contains the CMS signature container.
Thus, remove the code segment above and instead put the content of the DocSignature element (don't forget to base64 decode) into the byte[] encodedSignature. Now you can inject it into the prepared signature as before:
IExternalSignatureContainer external = new MyExternalSignatureContainer(encodedSignature);

MakeSignature.SignDeferred(reader, ""sign1"", os, external);


After you fixed the issues above, two more became apparent:
Using the wrong file mode
You open the stream to write to like this:
using (FileStream os = System.IO.File.OpenWrite(signedPdf))

File.OpenWrite is documented on docs.microsoft.com to be

equivalent to the FileStream(String, FileMode, FileAccess, FileShare) constructor overload with file mode set to OpenOrCreate, the access set to Write, and the share mode set to None.

The file mode OpenOrCreate in turn is documented to specify

that the operating system should open a file if it exists; otherwise, a new file should be created.

Thus, if there already is a file at the given location, that file remains and you start writing into it.
If the new file you create is longer than the old one, this is no problem, you eventually overwrite all the old file content and then the file grows to house the additional new content.
But if the new file you create is shorter than the old one, you have a problem: After the end of the new file there still is data from the old, longer file. Thus, your result is a hodgepodge of two files.
This happened in case of the example files you shared, your new content of ""signedPdf.pdf"" is only 175982 bytes long but there appears to have been some older file with that name which was 811986 bytes long. Thus, the ""signedPdf.pdf"" file you shared is 811986 bytes long, the first 175982 bytes containing the result of your operation, the rest data from some other file.
If you cut down your shared ""signedPdf.pdf"" file to its first 175982 bytes, the result looks much better!
To solve this issue you should use the file mode Create which is documented to be 

equivalent to requesting that if the file does not exist, use CreateNew; otherwise, use Truncate.

using (FileStream os = new FileStream(signedPdf, FileMode.Create, FileAccess.Write, FileShare.None))

An issue with your signing service - identity not yet valid
As mentioned above, if you cut down your shared ""signedPdf.pdf"" file to its first 175982 bytes, the result looks much better! Unfortunately merely better, not yet good:

The reason for your ""identity has expired or is not yet valid"" becomes clearer by looking at the details:

I.e. the signing time claimed by the PDF is 09:47:59 UTC+1.
But looking at the certificate:

I.e. your certificate is valid not before 09:48:40 UTC+1.
Thus, the claimed signing time is more than half a minute before your user certificate became valid! This obviously cannot be accepted by a validator...
Apparently your signing service creates a short-time certificate for you on demand, valid from just then for half an hour. And the time at which you started creating the PDF signature is not in that interval.
I doubt they will change the design of the signing service for your requirements. Thus, you'll have to cheat a bit and use a signing time slightly in the future.
By default the signing time is set to the current by the PdfSignatureAppearance constructor, i.e. when this line executes:
PdfSignatureAppearance appearance = stamper.SignatureAppearance;

Fortunately you can change this claimed signing time if you immediately use
appearance.SignDate = [some other date time];

The date time you should use here has to be shortly (I'd propose not more than 5 minutes) after the time you will call your signing service.
This of course implies that you cannot arbitrarily wait until executing that service call. As soon as you assigned the claimed signing time above, you are committed to have successfully called your signing service shortly before that claimed time!
Furthermore, if that signing service turns out to react only slowly or only after some retries, your software should definitively check the certificate in the signature container you retrieve from it and compare its validity interval with your claimed signing time. If the claimed signing time is not in that interval, start signing again!

Now it became apparent that the AllPagesSignatureContainer you used was designed for a very special use case and still had to be adapted to your use case.
Adapting the AllPagesSignatureContainer for append mode
The AllPagesSignatureContainer implementation essentially copied from this answer worked fine when not signing in append mode but when signing in append mode it failed.
This at first was plausible because that class has to predict the object number that will be used for the signature value. This prediction depends on the exact use case, and switching on append mode changes this use case considerably. Thus, my advice in a comment was

If you need append mode, try to replace the
PdfLiteral PRefLiteral = ...

line in the AllPagesSignatureContainer by
PdfLiteral PRefLiteral = new PdfLiteral((PRef.Number + reader.NumberOfPages) + "" 0 R"");


In my tests that worked but in your tests it still didn't. An analysis of your signed file turned up the cause: My test file was using cross reference tables while yours was using cross reference streams.
Adapting the AllPagesSignatureContainer for append mode and object streams
iText in append mode uses the compression features of the original file, i.e. in case of your file it creates an object stream as soon as storing an indirect object that allows storage in an object stream.
In case of your file iText reserved an object number for the object stream, and it did so between the time the AllPagesSignatureContainer predicted the signature value object number and the time the signature value actually was generated. Thus, in your file the actual signature value object number was higher than the predicted number by 1.
To solve this for PDFs with cross reference streams, therefore, one can simply replace the PdfLiteral PRefLiteral = ... line by 
PdfLiteral PRefLiteral = new PdfLiteral((PRef.Number + reader.NumberOfPages + 1) + "" 0 R"");

i.e. by adding 1 to the originally predicted value. Unfortunately now the prediction is wrong for PDFs with cross reference tables...
A better way to fix this is to force iText to reserve an object number for the object stream for cross reference stream PDFs before predicting the signature value object number and then use the original prediction code. One way to do this is by creating and writing an indirect object right before the prediction, e.g. like this:
stamper.Writer.AddToBody(new PdfNull(), stamper.Writer.PdfIndirectReference, true);

PdfIndirectReference PRef = stamper.Writer.PdfIndirectReference;
PdfLiteral PRefLiteral = new PdfLiteral((PRef.Number + reader.NumberOfPages) + "" 0 R"");

The answer the AllPagesSignatureContainer implementation essentially was copied from has been updated accordingly.
","299","<c#><pdf><itext><signature><pkcs#7>","2","3","1","2019-03-25 14:53:21","55247695","23","0","9601341","","2019-03-25 11:00:30","2019-03-19 09:22:51",""
"47309060","How to Generate PKCS7 for Sha256 hash of any file or plain text in java and verification process?","Code for Pkcs7 generation 
@SuppressWarnings({ ""unchecked"", ""rawtypes"" })
public static byte[] createDetachedSignature() throws NoSuchAlgorithmException, NoSuchProviderException, DSCException, InvalidKeyException, SignatureException, CertificateEncodingException, OperatorCreationException, CMSException, IOException{

    //byte[] contentToSign = generateHash(""Test"".getBytes(Charset.forName(""UTF-8""))).getBytes();
    //System.out.println(""Original Content :: ""+new String(contentToSign));

    DSCUtil.initKeyStore();
    DSCertificate dscCert = DSCUtil.findBySerialNumber(new BigInteger(""1396617567""));

    PrivateKey privKey = dscCert.getPrivateKey();
    Signature signature = Signature.getInstance(""SHA256WithRSA"");
    signature.initSign(privKey);
    signature.update(""Test"".getBytes(Charset.forName(""UTF-8"")));

    //X509Certificate cert = dscCert.getCertificate();
   // List certList = new ArrayList();
    CMSTypedData msg = new CMSProcessableByteArray(signature.sign());
    //certList.add(cert);

    Store certs = new JcaCertStore(Arrays.asList(dscCert.getCertChain()));
    CMSSignedDataGenerator gen = new CMSSignedDataGenerator();
    ContentSigner sha1Signer = new JcaContentSignerBuilder(""SHA256withRSA"").build(privKey);
    gen.addSignerInfoGenerator(
            new JcaSignerInfoGeneratorBuilder(new JcaDigestCalculatorProviderBuilder().build())
                    .build(sha1Signer, dscCert.getCertificate()));
    gen.addCertificates(certs);
    CMSSignedData sigData = gen.generate(msg, true);

    //BASE64Encoder encoder = new BASE64Encoder();


    String signedContent = Base64.encodeBase64String((byte[]) sigData.getSignedContent().getContent());
    System.out.println(""Signed content: "" + signedContent + ""\n"");

    String envelopedData = Base64.encodeBase64String(sigData.getEncoded());
    System.out.println(""Enveloped data: "" + envelopedData);


    return envelopedData.getBytes();
}

Code for verification
@SuppressWarnings({ ""deprecation"", ""rawtypes"" })
public static boolean verifyTextwithPKCS7(String input, byte[] pkcs7Resp) throws NoSuchAlgorithmException, NoSuchProviderException {
    boolean result = false;
    if (pkcs7Resp.length <= 0) {
        return result;
    }
    //String hash = generateHash(input.getBytes(Charset.forName(""UTF-8"")));
    try {
        CMSSignedData cms = new CMSSignedData(new CMSProcessableByteArray(input.getBytes()),
                pkcs7Resp);
        System.out.println(new String((byte[]) cms.getSignedContent().getContent()));
        CertStore certStore = cms.getCertificatesAndCRLs(""Collection"", ""BC"");
        SignerInformationStore signers = cms.getSignerInfos();
        Collection c = signers.getSigners();
        Iterator it = c.iterator();
        while (it.hasNext()) {
            SignerInformation signer = (SignerInformation) it.next();
            Collection certCollection = certStore.getCertificates(signer.getSID());
            Iterator certIt = certCollection.iterator();
            X509Certificate cert = (X509Certificate) certIt.next();
            result = signer.verify(cert, ""BC"");
            System.out.println(new String(signer.getContentDigest()));
        }
    } catch (Exception e) {
        e.printStackTrace();
        result = false;
    }
    return result;
}

Please tell me either any problem in Generation of PKCS#7 or in verification process.
if my process is wrong then please suggest me the right mechanism with some code snippet. 
","","298","<java><sha256><pkcs#7><java-security><message-digest>","0","","0","2017-11-15 20:59:34","","3","","472495","","2017-11-15 20:59:34","2017-11-15 13:45:58",""
"51144473","""jarsigner -tsa ..."" leads to a jar that cannot be verified on java 6, while simply ""jarsigner ..."" is fine","The company I work for distributes a part of its software as signed Java jar files. There is a requirement that the jar files must be ""verifiable"" on Java 6. There is a mechanism that reads the jar entries and fails when either a signature is wrong or absent for any entry. The code is (simplified):
import java.io.*;
import java.security.cert.Certificate;
import java.util.Enumeration;
import java.util.jar.*;

public final class JarCheckSimple {

    public static void main(String[] args) throws IOException {
        check(new File(""SuperAwesome.jar""));
    }

    private static void check(File file) throws IOException {
        JarFile jar = new JarFile(file);
        Manifest manifest = jar.getManifest();
        if (manifest == null) {
            throw new SecurityException(""jar not signed "" + jar);
        }

        byte[] buffer = new byte[8096];
        Enumeration entries = jar.entries();
        while (entries.hasMoreElements()) {
            JarEntry e = (JarEntry) entries.nextElement();
            if (!e.isDirectory() && !e.getName().startsWith(""META-INF"")) {
                InputStream is = jar.getInputStream(e);
                while (is.read(buffer, 0, buffer.length) != -1) { /* to be verified by VerifierStream */ }
                is.close();

                Certificate[] certs = e.getCertificates();
                if (certs == null || certs.length == 0) { /* Works on Java 8, fails on Java 6: (certs == null) is true there */
                    throw new SecurityException(""unsigned entry "" + e.getName());
                }
            }
        }
    }
}

Recently our Release Engineering department has tried to change the signing process to enable signature timestamp support (this thing: https://docs.oracle.com/javase/7/docs/technotes/guides/security/time-of-signing.html), and since then the check above started to fail on Java 6 (only) -- my question ultimately will be why, but I have to give some details first. Release Engineering claim they use all the same certificates and all, the only change is they added ""-tsa http://sha256timestamp.ws.symantec.com/sha256/timestamp"" to the jarsigner command they have.
I set the -Djava.security.debug=jar parameter for the code above and got this difference in the output (for jar files signed with and without timestamp, checked on Java 6 and Java 8):
Java 6, no timestamp (CERTIFICATE.RSA is under 4 KB here):
jar: beginEntry META-INF/MANIFEST.MF
jar: done with meta!
jar: nothing to verify!
jar: beginEntry META-INF/MANIFEST.MF
jar: beginEntry META-INF/CERTIFICATE.SF
jar: processEntry: processing block
jar: beginEntry META-INF/CERTIFICATE.RSA
jar: processEntry: processing block
jar: Signature Block Certificate: [
[
  Version: V3
  Subject: CN=SuperCompany Ltd, OU=IT, O=SuperCompany Ltd, L=Rwanda, C=CH
  Signature Algorithm: SHA256withRSA, OID = 1.2.840.113549.1.1.11

  Key:  Sun RSA public key, 2048 bits
  modulus: ...
  public exponent: 65537
  Validity: [From: Tue May 29 02:00:00 CEST 2018,
               To: Sun Jun 28 01:59:59 CEST 2020]
  Issuer: CN=thawte SHA256 Code Signing CA, O=""thawte, Inc."", C=US
  SerialNumber: [    ...]

Certificate Extensions: 8
...

So it looks like the certificate is found and parsed.
Java 8, with timestamp (CERTIFICATE.RSA is over 7 KB here):
jar: beginEntry META-INF/MANIFEST.MF
jar: done with meta!
jar: nothing to verify!
jar: beginEntry META-INF/MANIFEST.MF
jar: beginEntry META-INF/CERTIFICATE.SF
jar: processEntry: processing block
jar: beginEntry META-INF/CERTIFICATE.RSA
jar: processEntry: processing block
jar: Unsupported signer attribute: 1.2.840.113549.1.9.16.2.47
jar:
jar: Detected signature timestamp (#885515941755655847907684100465949331954643356622) generated on Tue Jun 26 14:11:42 CEST 2018
jar:
jar: Signature Block Certificate: [
[
  Version: V3
  Subject: CN=SuperCompany Ltd, OU=IT, O=SuperCompany Ltd, L=Rwanda, C=CH
  Signature Algorithm: SHA256withRSA, OID = 1.2.840.113549.1.1.11

  Key:  Sun RSA public key, 2048 bits
  modulus: ...
  public exponent: 65537
  Validity: [From: Tue May 29 02:00:00 CEST 2018,
               To: Sun Jun 28 01:59:59 CEST 2020]
  Issuer: CN=thawte SHA256 Code Signing CA, O=""thawte, Inc."", C=US
  SerialNumber: [    ...]

Certificate Extensions: 8
...

Note the ""warning"" about ""Unsupported signer attribute: 1.2.840.113549.1.9.16.2.47""; but still, the certificate is parsed fine.
Now, the problem: Java 6, with timestamp (CERTIFICATE.RSA is over 7 KB here):
jar: beginEntry META-INF/MANIFEST.MF
jar: beginEntry META-INF/CERTIFICATE.SF
jar: processEntry: processing block
jar: beginEntry META-INF/CERTIFICATE.RSA
jar: processEntry: processing block
jar: ignoring unsupported signer attribute: 1.2.840.113549.1.9.16.2.47
jar: processEntry caught: sun.security.pkcs.ParsingException: Unable to parse the encoded bytes
jar: done with meta!
jar: nothing to verify!
...

So, Java can't parse some block, therefore it treats the whole jar as unsigned, therefore our check (above) fails: the JarEntry::getCertificates() returns null.
For the sake of completeness: running ""jarsigner -verify -verbose -certs SuperAwesome.jar"" prints everything fine for the jarsigner from JDK 8, and prints for each jar entry that it was simply ""mentioned"" (not signed) for JDK 6.
Debugging with some OpenJDK source code attached, I found that this is why Java 6 fails (sun.security.pkcs.PKCS9Attribute#PKCS9Attribute(sun.security.util.DerValue)):
    ...
    // get the oid
    ObjectIdentifier oid = val[0].getOID();
    index = indexOf(oid, PKCS9_OIDS, 1);
    if (index == -1) {
        if (debug != null) {
            debug.println(""ignoring unsupported signer attribute: "" + oid);
        }
        throw new ParsingException(""Unsupported PKCS9 attribute: "" + oid);
    }
    ...

While Java 8 passes fine:
    ...
    // get the oid
    oid = val[0].getOID();
    byte[] content = val[1].toByteArray();
    DerValue[] elems = new DerInputStream(content).getSet(1);

    index = indexOf(oid, PKCS9_OIDS, 1);
    if (index == -1) {
        if (debug != null) {
            debug.println(""Unsupported signer attribute: "" + oid);
        }
        value = content;
        return;
    }
    ...

Also, all logic in sun.security.pkcs.PKCS9Attribute is ready for this.index == -1, unlike in the Java 6 version. I can even modify this class to be more like in JDK 8, and then the test passes; the problem however is that I don't have control over the user's JDK.
It looks like my problem could be solved if the certificate didn't have this ""1.2.840.113549.1.9.16.2.47"" oid present (the only info I could find on it is: id-aa-signingCertificateV2). I have to confess I know nothing about the whole process of signing (both in principle and how it's done by our Release Engineering -- it seems they obscure it on purpose), certificates etc.
Now, my questions are:

Am I right that the most straightforward way to fix this would be to get rid of this attribute ""1.2.840.113549.1.9.16.2.47""?
Is it possible to say having the information I provided what introduces it into the resulting certificate that ends up in the jar file? (That CERTIFICATE.RSA)
If not, could you hint me what my next steps could be in trying to track down or fix the problem? I am stuck.

I am on Windows 7, using Oracle JDK 6 update 45 and Oracle JDK 8 update 20.
Thank you in advance.
","","289","<java><pkcs#7><java-security>","0","","0","2018-07-02 22:48:18","","2","","2369544","","2018-07-02 22:48:18","2018-07-02 22:34:17",""
"24570491","Crash in Firefox extension Using NSS","I am new to Firefox extension development.
We got a firefox Extension that signs PDF (encapsulated signature) working for all versions of firefox prior to 22 (22 not included) Using NSS 3.12. After that Firefox version, there is a modification in the NSS used by it. 
This extension is a JS extension calling C++ fonctions using ctypes.
My goal is to make this extension work on firefox version superior to 22.
I got in my extension libs nspr4.dll, nss3.dll, nssutil3.dll, plc4.dll, plds4.dll generated with mozilla-build from NSS release.
the Code we got is pretty similar to what you can find here : https://github.com/metajack/nss/blob/master/cmd/p7sign/p7sign.c
the code works well ( it gets the certificates information sucessfully, creates the SEC_PKCS7ContentInfo with SEC_PKCS7CreateSignedData(...), set it's content with SEC_PKCS7SetContent(..), includes the certs chains)
until the call of SEC_PKCS7Encode.
when using this method, fireFox crashes.
I used WinDBG to get the stacktrace and here is what I got:
*******************************************************************************
*                                                                             *
*                           Exception Analysis                                *
*                                                                             *
*******************************************************************************


FAULTING_IP: 
plds4!PL_HashTableLookupConst+c
721b1c7c 8b4f0c          mov     ecx,dword ptr [edi+0Ch]

EXCEPTION_RECORD:  ffffffffffffffff -- (.exr 0xffffffffffffffff)
.exr 0xffffffffffffffff
ExceptionAddress: 00000000721b1c7c (plds4!PL_HashTableLookupConst+0x000000000000000c)
   ExceptionCode: c0000005 (Access violation)
  ExceptionFlags: 00000000
NumberParameters: 2
   Parameter[0]: 0000000000000000
   Parameter[1]: 000000000000000c
Attempt to read from address 000000000000000c

CONTEXT:  0000000000000000 -- (.cxr 0x0;r)
.cxr 0x0;r
eax=063e7b90 ebx=00000000 ecx=dd4c128b edx=063e7c98 esi=063e7b90 edi=00000000
eip=721b1c7c esp=0067c1e8 ebp=063e7898 iopl=0         nv up ei pl nz na pe nc
cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00210206
plds4!PL_HashTableLookupConst+0xc:
721b1c7c 8b4f0c          mov     ecx,dword ptr [edi+0Ch] ds:002b:0000000c=????????
.cxr

FAULTING_THREAD:  00000000000016cc

PROCESS_NAME:  firefox.exe

ERROR_CODE: (NTSTATUS) 0xc0000005 - L

EXCEPTION_CODE: (NTSTATUS) 0xc0000005 - L

EXCEPTION_PARAMETER1:  0000000000000000

EXCEPTION_PARAMETER2:  000000000000000c

READ_ADDRESS:  000000000000000c 

FOLLOWUP_IP: 
plds4!PL_HashTableLookupConst+c
721b1c7c 8b4f0c          mov     ecx,dword ptr [edi+0Ch]

APPLICATION_VERIFIER_FLAGS:  0

APP:  firefox.exe

ANALYSIS_VERSION: 6.3.9600.17029 (debuggers(dbg).140219-1702) amd64fre

BUGCHECK_STR:  APPLICATION_FAULT_NULL_CLASS_PTR_READ_ZEROED_STACK

PRIMARY_PROBLEM_CLASS:  NULL_CLASS_PTR_READ

DEFAULT_BUCKET_ID:  NULL_CLASS_PTR_READ

LAST_CONTROL_TRANSFER:  from 00000000716b9231 to 00000000721b1c7c

STACK_TEXT:  
WARNING: Stack unwind information not available. Following frames may be wrong.
0067c1f4 716b9231 00000000 063e7b90 063e7ca0 plds4!PL_HashTableLookupConst+0xc
00000000 00000000 00000000 00000000 00000000 nssutil3!SECOID_FindOIDTag_Util+0x11


STACK_COMMAND:  .cxr 0x0 ; kb

SYMBOL_STACK_INDEX:  0

SYMBOL_NAME:  plds4!PL_HashTableLookupConst+c

FOLLOWUP_NAME:  MachineOwner

MODULE_NAME: plds4

IMAGE_NAME:  plds4.dll

DEBUG_FLR_IMAGE_TIMESTAMP:  53a04c1e

FAILURE_BUCKET_ID:  NULL_CLASS_PTR_READ_c0000005_plds4.dll!PL_HashTableLookupConst

BUCKET_ID:  
APPLICATION_FAULT_NULL_CLASS_PTR_READ_ZEROED_STACK_plds4!PL_HashTableLookupConst+c

ANALYSIS_SOURCE:  UM

FAILURE_ID_HASH_STRING:                          um:null_class_ptr_read_c0000005_plds4.dll!pl_hashtablelookupconst

FAILURE_ID_HASH:  {2f7bb160-6820-dd99-35e3-03bb56e8aca4}

Followup: MachineOwner
---------

It means that when calling the SEC_PKCS7Encode, it calls a method in PLDS4.DLL that make Firefox crash.
I tried to call SEC_PKCS7Encode using an empty SEC_PKCS7ContentInfo (with SEC_PKCS7CreateData()) and it didn't crash. It crashes only when the SEC_PKCS7ContentInfo is filled.
After some reaserchs , I find this issue : https://bugzilla.mozilla.org/show_bug.cgi?id=702307 
I don't know if this issue is what makes my Firefox crash.
I tried to use different version of the NSS (3.12,  3.15, 3.16.2) the results are exactly the same.
Is there some way to avoid this problem ? is there a way to encode my SEC_PKCS7ContentInfo whithout using SEC_PKCS7Encode ?
thanks in advance.
EDIT 11/07/2014
As nmaier mentioned in is response, the probleme seems to be the utilisation of two different NSS (even if it is the same version of the nss because the one in mozilla has different dependencies for exemple).
The signature (and other processes) are done in a C++ project (the Dll used by my extension is generated from this project with visual studio 2013). But in order to compile and build the DLL, the project must have the NSS libs and includes (it is quite normal, I use NSS methods in my project).
The main question is how can I refer the MOZILLA FIREFOX NSS libs and include. I compiled a NSS of the same version of the Firefox's NSS, but the dependecies are different. 
I also tried to get the FireFox sources and compile it's NSS with mozilla build but I got errors. If I can get the Firefox's NSS libs, I could just load the Firefox's NSS dll in my extension.
How can I refers Mozilla firefox's NSS libs in my C++ project to build my custom DLL using the right libs ?
","I'd expect this to misbehave: Firefox already load nss and dependent libraries. Trying to load the ""same"" DLL again, but in a different version will cause the DLL loader to resolve dependent imports using the exports from the initially loaded DLL that comes with Firefox, not your copies of older versions of the same DLL. And this mix of new stuff and old stuff then breaks and crashes.
You should:

Not build and ship DLLs in the first place...
but use the DLLs that Firefox already comes with. (e.g. see WeaveCrypto.js)
Update your ctypes calls if the nss API it uses changed in the meantime.
Make sure your ctypes declarations are correct and still up-to-date.

","287","<firefox><dll><firefox-addon><pkcs#7><nss>","1","1","2","2014-07-21 07:53:58","24860122","1","","2655786","","2014-07-11 12:36:08","2014-07-04 09:01:27",""
"24570491","Crash in Firefox extension Using NSS","I am new to Firefox extension development.
We got a firefox Extension that signs PDF (encapsulated signature) working for all versions of firefox prior to 22 (22 not included) Using NSS 3.12. After that Firefox version, there is a modification in the NSS used by it. 
This extension is a JS extension calling C++ fonctions using ctypes.
My goal is to make this extension work on firefox version superior to 22.
I got in my extension libs nspr4.dll, nss3.dll, nssutil3.dll, plc4.dll, plds4.dll generated with mozilla-build from NSS release.
the Code we got is pretty similar to what you can find here : https://github.com/metajack/nss/blob/master/cmd/p7sign/p7sign.c
the code works well ( it gets the certificates information sucessfully, creates the SEC_PKCS7ContentInfo with SEC_PKCS7CreateSignedData(...), set it's content with SEC_PKCS7SetContent(..), includes the certs chains)
until the call of SEC_PKCS7Encode.
when using this method, fireFox crashes.
I used WinDBG to get the stacktrace and here is what I got:
*******************************************************************************
*                                                                             *
*                           Exception Analysis                                *
*                                                                             *
*******************************************************************************


FAULTING_IP: 
plds4!PL_HashTableLookupConst+c
721b1c7c 8b4f0c          mov     ecx,dword ptr [edi+0Ch]

EXCEPTION_RECORD:  ffffffffffffffff -- (.exr 0xffffffffffffffff)
.exr 0xffffffffffffffff
ExceptionAddress: 00000000721b1c7c (plds4!PL_HashTableLookupConst+0x000000000000000c)
   ExceptionCode: c0000005 (Access violation)
  ExceptionFlags: 00000000
NumberParameters: 2
   Parameter[0]: 0000000000000000
   Parameter[1]: 000000000000000c
Attempt to read from address 000000000000000c

CONTEXT:  0000000000000000 -- (.cxr 0x0;r)
.cxr 0x0;r
eax=063e7b90 ebx=00000000 ecx=dd4c128b edx=063e7c98 esi=063e7b90 edi=00000000
eip=721b1c7c esp=0067c1e8 ebp=063e7898 iopl=0         nv up ei pl nz na pe nc
cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00210206
plds4!PL_HashTableLookupConst+0xc:
721b1c7c 8b4f0c          mov     ecx,dword ptr [edi+0Ch] ds:002b:0000000c=????????
.cxr

FAULTING_THREAD:  00000000000016cc

PROCESS_NAME:  firefox.exe

ERROR_CODE: (NTSTATUS) 0xc0000005 - L

EXCEPTION_CODE: (NTSTATUS) 0xc0000005 - L

EXCEPTION_PARAMETER1:  0000000000000000

EXCEPTION_PARAMETER2:  000000000000000c

READ_ADDRESS:  000000000000000c 

FOLLOWUP_IP: 
plds4!PL_HashTableLookupConst+c
721b1c7c 8b4f0c          mov     ecx,dword ptr [edi+0Ch]

APPLICATION_VERIFIER_FLAGS:  0

APP:  firefox.exe

ANALYSIS_VERSION: 6.3.9600.17029 (debuggers(dbg).140219-1702) amd64fre

BUGCHECK_STR:  APPLICATION_FAULT_NULL_CLASS_PTR_READ_ZEROED_STACK

PRIMARY_PROBLEM_CLASS:  NULL_CLASS_PTR_READ

DEFAULT_BUCKET_ID:  NULL_CLASS_PTR_READ

LAST_CONTROL_TRANSFER:  from 00000000716b9231 to 00000000721b1c7c

STACK_TEXT:  
WARNING: Stack unwind information not available. Following frames may be wrong.
0067c1f4 716b9231 00000000 063e7b90 063e7ca0 plds4!PL_HashTableLookupConst+0xc
00000000 00000000 00000000 00000000 00000000 nssutil3!SECOID_FindOIDTag_Util+0x11


STACK_COMMAND:  .cxr 0x0 ; kb

SYMBOL_STACK_INDEX:  0

SYMBOL_NAME:  plds4!PL_HashTableLookupConst+c

FOLLOWUP_NAME:  MachineOwner

MODULE_NAME: plds4

IMAGE_NAME:  plds4.dll

DEBUG_FLR_IMAGE_TIMESTAMP:  53a04c1e

FAILURE_BUCKET_ID:  NULL_CLASS_PTR_READ_c0000005_plds4.dll!PL_HashTableLookupConst

BUCKET_ID:  
APPLICATION_FAULT_NULL_CLASS_PTR_READ_ZEROED_STACK_plds4!PL_HashTableLookupConst+c

ANALYSIS_SOURCE:  UM

FAILURE_ID_HASH_STRING:                          um:null_class_ptr_read_c0000005_plds4.dll!pl_hashtablelookupconst

FAILURE_ID_HASH:  {2f7bb160-6820-dd99-35e3-03bb56e8aca4}

Followup: MachineOwner
---------

It means that when calling the SEC_PKCS7Encode, it calls a method in PLDS4.DLL that make Firefox crash.
I tried to call SEC_PKCS7Encode using an empty SEC_PKCS7ContentInfo (with SEC_PKCS7CreateData()) and it didn't crash. It crashes only when the SEC_PKCS7ContentInfo is filled.
After some reaserchs , I find this issue : https://bugzilla.mozilla.org/show_bug.cgi?id=702307 
I don't know if this issue is what makes my Firefox crash.
I tried to use different version of the NSS (3.12,  3.15, 3.16.2) the results are exactly the same.
Is there some way to avoid this problem ? is there a way to encode my SEC_PKCS7ContentInfo whithout using SEC_PKCS7Encode ?
thanks in advance.
EDIT 11/07/2014
As nmaier mentioned in is response, the probleme seems to be the utilisation of two different NSS (even if it is the same version of the nss because the one in mozilla has different dependencies for exemple).
The signature (and other processes) are done in a C++ project (the Dll used by my extension is generated from this project with visual studio 2013). But in order to compile and build the DLL, the project must have the NSS libs and includes (it is quite normal, I use NSS methods in my project).
The main question is how can I refer the MOZILLA FIREFOX NSS libs and include. I compiled a NSS of the same version of the Firefox's NSS, but the dependecies are different. 
I also tried to get the FireFox sources and compile it's NSS with mozilla build but I got errors. If I can get the Firefox's NSS libs, I could just load the Firefox's NSS dll in my extension.
How can I refers Mozilla firefox's NSS libs in my C++ project to build my custom DLL using the right libs ?
","I did It.
In order to specify firefox's NSS in my project, I had to build an entire Firefox with the mozilla-build tool, and then recover the Libs and include for inside the OBJ directory.
this will generate my project as DLL that refers the good version of the DLL.
(this is not the greatest solution I think, as there is a NSS changement of the NSS between Firefox  21 and  22, so my solution will only work for firefox between 22 and the next version of Firefox that include NSS changes.)
","287","<firefox><dll><firefox-addon><pkcs#7><nss>","1","1","2","2014-07-21 07:53:58","24860122","1","","2655786","","2014-07-11 12:36:08","2014-07-04 09:01:27",""
"24079329","Clear Text Signing using OpenSSL in C Code","I am trying to sign a email message using OpenSSL. I want to perform Clear Text Signing on the email message. 
I know I can do this using command prompt with the command: 
openssl smime -sign -in hw.txt -text -out signed.msg -signer mycert.pem

But how do I do this using C Code? 
This is what I am doing right now: 
int flgs = PKCS7_DETACHED | PKCS7_TEXT;
PKCS7 * p7 = PKCS7_sign(signCert, pKey, certs, bio, flgs);
if(p7 != NULL) {
    int res = PKCS7_final(p7, bio, flags);
    __android_log_print(ANDROID_LOG_DEBUG, ""OpenSSLJni"", ""\nFinal result is: %d"", res);
    FILE *outfile = fopen(""/storage/sdcard0/sign_output.txt"", ""w"");
    BIO* out = BIO_new_fp(outfile, BIO_NOCLOSE) ;// BIO_new_file(outfile, """");
    BIO_reset(bio);
    SMIME_write_PKCS7(out, p7, bio, flags);
    return true;
}

But I in the output file I am only getting the signature not both the body and signature.
Any pointers?  
","Finally did it. 
It was just a missing flag. 
int flgs = PKCS7_STREAM | PKCS7_DETACHED | PKCS7_BINARY ;

Added this flag and it started working perfectly. 
","286","<c><openssl><sign><pkcs#7><smime>","0","0","1","2014-06-10 05:54:18","24133798","0","","","","","2014-06-06 10:10:14",""
"47508108","Why I can't use SHA1 before PKCS7.detached in iText7?","
As the picture show , now I can realize the 1 ,and here is my signed success code , I used 
pdfSigner.signExternalContainer(iExternalSignatureContainer, estimatedSize);

not 
 pdfSigner.signDetached();

:
public class PdfSignatureContainerExt implements IExternalSignatureContainer {

private MySignUtil mySignUtil;
public PdfSignatureContainerExt(MySignUtil mySignUtil){
    this.mySignUtil= mySignUtil;
}

/**
 * 
 * @param data , the data to sign
 * @return a container with the signature and other objects, like CRL and OCSP. The container will generally be a PKCS7 one.
 * @throws GeneralSecurityException
 */
@Override
public byte[] sign(InputStream data) throws GeneralSecurityException {

    byte[] dataBytes = streamToBytes(data);
    return  mySignUtil.signP7DetachData(dataBytes);

}

@Override
public void modifySigningDictionary(PdfDictionary signDic) {
    signDic.put(PdfName.Filter, PdfName.Adobe_PPKLite);
    signDic.put(PdfName.SubFilter, PdfName.Adbe_pkcs7_detached);
}}

In order to realize the 2 , I altered the code which the output result is invalid:
public class PdfSignatureContainerExt implements IExternalSignatureContainer {

private MySignUtil mySignUtil;
public PdfSignatureContainerExt(MySignUtil mySignUtil){
    this.mySignUtil= mySignUtil;
}


@Override
public byte[] sign(InputStream data) throws GeneralSecurityException {

        byte[] dataBytes = streamToBytes(data);
        //change here
        BouncyCastleProvider provider = new BouncyCastleProvider();
        Security.addProvider(provider);

        MessageDigest messageDigest = MessageDigest.getInstance(""SHA1"" , ""BC"");
        byte[] hash = messageDigest.digest(dataBytes);

        return  mySignUtil.signP7DetachData(hash);      
}

@Override
public void modifySigningDictionary(PdfDictionary signDic) {
    signDic.put(PdfName.Filter, PdfName.Adobe_PPKLite);
    //change here
    signDic.put(PdfName.SubFilter, PdfName.Adbe_pkcs7_sha1);
}}

and the output sign result is failed , here is my failed pdf.
invalid.pdf
","The method you use to create the adbe.pkcs7.detached CMS signature container
return  mySignUtil.signP7DetachData(data);

(with an InputStream data) appears to create the container just like the method you use to create the adbe.pkcs7.sha1 CMS container
return  mySignUtil.signP7DetachData(hash);      

(with a byte[] hash), at least this is what your example file suggests.
This is wrong: As the PDF Reference 1.7 says:


adbe.pkcs7.detached: No data is encapsulated in the PKCS#7 signed-data field.
adbe.pkcs7.sha1: The SHA1 digest of the byte range is encapsulated in the PKCS#7 signed-data field with ContentInfo of type Data.


(section 8.7.2 ""Signature Interoperability"")
As you used the equivalent functionality for creating the CMS containers in both cases, you left the PKCS#7 signed-data field (by which the optional eContent octet string in the CMS SignedData field EncapsulatedContentInfo is meant) in your adbe.pkcs7.sha1 container empty which is against the specification.

PS: Ordinarily I would have referred to the ISO 32000 standards but unfortunately the corresponding sections in both part 1 and part 2 have been changed in a way that makes the content somewhere between even more unclear and outright wrong. Unfortunately that did not cross my mind when one could make inputs for ISO 32000-2.
PPS: Ceterum censeo adbe.pkcs7.sha1 should not be used at all anymore. Our validation code explicitly does not implement validation of these signatures.
","275","<itext><sha1><itext7><pkcs#7>","0","2","1","2017-11-29 06:54:03","47512638","1","2","5941014","","2017-11-29 06:54:03","2017-11-27 09:56:10",""
"42557585","Create PKCS7 for PDF signing","I'm trying to sign a PDF with certificate. I prepare the PDF for signing, generate SHA256 hash value of the document, encrypt it with my private key and now I need to create PKCS7 certificate. When I create it like this:
PKCS7 *pkcs7 = PKCS7_sign(certificate, privateKey, ca, fileBIO, PKCS7_DETACHED | PKCS7_BINARY);
PKCS7_final(pkcs7, fileBIO, PKCS7_DETACHED | PKCS7_BINARY);

the certificate works but it doesn't contain any hash value. How do I insert my custom SHA256 hash value?
","","275","<objective-c><pdf><openssl><digital-signature><pkcs#7>","0","","0","2017-03-02 14:06:48","","4","","","","","2017-03-02 14:06:48",""
"49641515","How to use raw Pkcs#7 signature & user x.509 certificate to stamp it into a PDF file?","I have a raw pkcs#7 signature response, user x.509 certificate & input hash of document to be signed. I need to stamp this  PDF. What is the process to get this PDF signed using above inputs? 
","","270","<php><openssl><digital-signature><pkcs#7>","0","","0","2018-04-05 10:43:50","","13","","2072304","","2018-04-05 10:43:50","2018-04-04 01:49:19",""
"48780157","Decrypt apple-app-site-association in browser","I'm building a tool to verify deep links set up with Apple's apple-app-site-association files. In some cases, these files are pkcs7-mime encrypted.
Is there any way currently to decrypt these files entirely on the client? I've researched WebCrypto and similar tools but I can't find a solution.
Essentially, I'd like to replicate the following openssl command in JS:
openssl smime -verify -inform DER -noverify -in apple-app-site-association.p7m
This should successfully output valid JSON, such as:
{
""applinks"": {
    ""apps"": [],
    ""details"": [
        {
            ""appID"": ""4MU37S3E4Q.com.couchsurfing.CouchSurfing"",
            ""paths"": [
                        ""NOT /people/*/*"",
                        ""NOT /users/*/*"",
                        ""NOT /events/*/*"",
                        ""NOT /events/past"",
                        ""NOT /events/attending"",
                        ""NOT /events/organizing"",
                        ""NOT /events/featured"",
                        ""NOT /users/confirmation"",
                        ""/users/*"",
                        ""/people/*"",
                        ""/events/*"",
                        ""/get_verified"",
                        ""/messages/*"",
                        ""/hosting"",
                        ""/mobile-hangouts""
                     ]
        }
    ]
}
}

Any help is much appreciated!
","You can use PKIjs. This is a pure JavaScript library implementing the formats that are used in PKI applications (signing, encryption, certificate requests, OCSP and TSP requests/responses). It is built on WebCrypto (Web Cryptography API) and requires no plug-ins to work in modern browsers.
Here is an example of decoding CMS/PKCS#7 files:

Demo
Source

","268","<javascript><ios><openssl><deep-linking><pkcs#7>","0","2","1","2018-02-16 05:32:25","","0","","","","","2018-02-14 05:20:09",""
"47333142","PHP openssl_encrypt not always decryptable with C++","I have a function which encrypts certain strings for transfer to my client application in C++. The function I use in PHP to generate the encrypted string:
<?php
    echo EncryptForTransfer(""This is a test""); //returns: l4/r5AUDTrPTlIfVyG0=DJKlty0VgWPSNsM2XbzkOZ79ivQA2eBWTd18FKVfgslM6UmP
    function EncryptForTransfer($EncryptMe) {
        $Key = random_string(32);
        $IV = random_string(16);
        return openssl_encrypt($EncryptMe, ""AES-256-CFB"", (string)$Key, false, $IV).$IV.$Key;
        }
    ?>

However, when I try to decrypt this result in C++ with the functions shown underneath, it is not returning me the string correctly (missing last parts).
int Decrypt(unsigned char *ciphertext, int ciphertext_len, unsigned char *key, unsigned char *iv, unsigned char *plaintext) {
    EVP_CIPHER_CTX *ctx;
    int len;
    int plaintext_len;
    if (!(ctx = EVP_CIPHER_CTX_new())) handleErrors();
    if (1 != EVP_DecryptInit_ex(ctx, EVP_aes_256_cfb(), NULL, key, iv)) {
        handleErrors();
        }
    if (1 != EVP_DecryptUpdate(ctx, plaintext, &len, ciphertext, ciphertext_len)) {
        handleErrors();
        }
    plaintext_len = len;
    if (1 != EVP_DecryptFinal_ex(ctx, plaintext + len, &len)) {
        handleErrors();
        }
    plaintext_len += len;
    EVP_CIPHER_CTX_free(ctx);
    return plaintext_len;
    }
string DecryptFromTransfer(string DecryptMe) {
    long long DecryptFromTransferLength = DecryptMe.length();
    string TransferKey = DecryptMe.substr(DecryptFromTransferLength - 32, 32);
    string TransferIV = DecryptMe.substr(DecryptFromTransferLength - 32 - 16, 16);
    string DecryptMeOriginal = DecryptMe.substr(0, DecryptFromTransferLength - 32 - 16);
    return DecryptThis(DecryptMeOriginal, TransferKey, TransferIV);
    }
cout << DecryptFromTransfer(""l4/r5AUDTrPTlIfVyG0=DJKlty0VgWPSNsM2XbzkOZ79ivQA2eBWTd18FKVfgslM6UmP""); //returns: This is

Please note that for some strings the decryption in C++ works correctly. However, for other strings the output is as stated above, only partially decrypted and missing the last parts. Maybe it is some kind of padding issue since some strings are decrypted correctly? So, what is wrong with my code?
The used string in the code above is just an example string to clarify the issue.
","","267","<php><c++><encryption><openssl><pkcs#7>","0","","0","2017-11-16 15:17:22","","17","","7114793","","2017-11-16 15:17:22","2017-11-16 15:13:13",""
"27567265","SignedData / DigestAlgorithm and SignedData / SignerInfo / DigestAlgorithm: same?","RFC 6488 specifies the following content of Signed-Data content type:
  SignedData ::= SEQUENCE {
    version CMSVersion,
    digestAlgorithms DigestAlgorithmIdentifiers,
    encapContentInfo EncapsulatedContentInfo,
    certificates [0] IMPLICIT CertificateSet OPTIONAL,
    crls [1] IMPLICIT RevocationInfoChoices OPTIONAL,
    signerInfos SignerInfos }

The text explains:
The digestAlgorithms set contains the OIDs of the digest algorithm(s)
used in signing the encapsulated content.  This set MUST contain
exactly one digest algorithm OID [...]

Then, inside SignerInfo, there is another DigestAlgorithmIdentifier:
 SignerInfo ::= SEQUENCE {
    version CMSVersion,
    sid SignerIdentifier,
    digestAlgorithm DigestAlgorithmIdentifier,
    signedAttrs [0] IMPLICIT SignedAttributes OPTIONAL,
    signatureAlgorithm SignatureAlgorithmIdentifier,
    signature SignatureValue,
    unsignedAttrs [1] IMPLICIT UnsignedAttributes OPTIONAL }

And the explanation is:
The digestAlgorithm MUST consist of the OID of a digest algorithm
that conforms to the RPKI Algorithms and Key Size Profile
specification [RFC6485].

In a couple of PKCS#7 files I peeked in, these two elements had equal value.
Is this a duplication of the same attribute? If not, what is the meaning of either?
","
Is this a duplication of the same attribute? If not, what is the meaning of either?

In case of RPKI yes.
The reason is that this standard does not introduce a specialized new structure but merely a profile of an existing one:


The RPKI signed object is a profile of the CMS [RFC5652] signed-data object


A CMS signed-data object in contrast to your RPKI one may contain multiple SignerInfo object in its signerInfos set, and each of them might make use of a different digestAlgorithm. Thus, in a CMS signed-data object the initial digestAlgorithms set may sensibly contain multiple entries.
Actually that field is even more liberally specified:


digestAlgorithms is a collection of message digest algorithm
          identifiers.  There MAY be any number of elements in the
          collection, including zero.  Each element identifies the message
          digest algorithm, along with any associated parameters, used by
          one or more signer.  The collection is intended to list the
          message digest algorithms employed by all of the signers, in any
          order, to facilitate one-pass signature verification.


","267","<digital-signature><pkcs#7>","0","1","1","2014-12-19 13:57:04","27567573","0","","","","","2014-12-19 13:36:42",""
"43325117","How do I use Bouncy Castle to read an App Store In App Purchase receipt? (PKCS7)","I have a receipt in PKCS7 that I obtained from my iOS app.  Apple says this is a PKCS7 structure, and within that, is information regarding past recurring purchases. 
I have the raw receipt here, encoded in Base64.
I've sent this payload, with my secret key, to Apple and got this response.  Based on WWDC videos, and documentation, I believe I should be able to read this receipt directly, and without sending it to apple. 
I'm guessing that PEMReader in BC is the correct starting point parse it, however I'm not sure how to actually use it.  I've scanned the BC source code for the strings ""PKCS"", and looked at unit tests, however all I ever see are casts from PEMReader into another format.
 using (var stream1 = new MemoryStream(receipt.Data))
 using (var stream2 = new StreamReader(stream1))
 {
       var pp = new PemReader(stream2);
       pp.ReadObject();
 }

Question

How do I use Bouncy Castle to verify a raw receipt payload generated from Apple Store?

Note to self: I intend to use this to inspect the actual binary to see if ApplicationUsername is included in the receipt, yet for some reason isn't returned in the JSON result when posting the server. (Bug on Apple's side?)
","I've made this using Java 7 and BouncyCastle 1.56.
For the code below, consider that pemString is the PEM string you provided. But I had to make some modifications:

format (break lines for every 64 characters) - I've made a small program to do that
include BEGIN and END headers

So my PEM looks like:
-----BEGIN PKCS7-----
MIIv5gYJKoZIhvcNAQcCoIIv1zCCL9MCAQExCzAJBgUrDgMCGgUAMIIfhwYJKoZI
hvcNAQcBoIIfeASCH3Qxgh9wMAoCAQgCAQEEAhYAMAoCARQCAQEEAgwAMAsCAQEC
AQEEAwIBADALAgELAgEBBAMCAQAwCwIBDwIBAQQDAgEAMAsCARACAQEEAwIBADAL
....
gdTu2uzkTyT+vcBlaLHK1ZpjKozsBds7ys6Q4EFp7OLxtJTj7saEDYXCNQtXBjwl
UfSGvQkXeIbsaqSPvOVIE83K3ki5i64gccA=
-----END PKCS7-----

For the code below, I followed the definition in Apple's doc:
ReceiptAttribute ::= SEQUENCE {
    type    INTEGER,
    version INTEGER,
    value   OCTET STRING
}

Payload ::= SET OF ReceiptAttribute

Code:
import org.bouncycastle.asn1.ASN1InputStream;
import org.bouncycastle.asn1.ASN1Object;
import org.bouncycastle.asn1.DEROctetString;
import org.bouncycastle.asn1.DLSequence;
import org.bouncycastle.asn1.DLSet;
import org.bouncycastle.cms.CMSSignedData;
import org.bouncycastle.util.io.pem.PemObject;
import org.bouncycastle.util.io.pem.PemReader;

String pemString = // PEM String as described above

PemReader reader = new PemReader(new StringReader(pemString));
PemObject pemObject = reader.readPemObject();
reader.close();

CMSSignedData s = new CMSSignedData(pemObject.getContent());
byte[] content = (byte[]) s.getSignedContent().getContent();

ASN1InputStream in = new ASN1InputStream(content);

// Payload: a SET of ReceiptAttribute
DLSet set = (DLSet) DLSet.fromByteArray(in.readObject().getEncoded());
int size = set.size();
for (int i = 0; i < size; i++) {
    // ReceiptAttribute is a SEQUENCE
    DLSequence seq = (DLSequence) set.getObjectAt(i);

    // value is the third element of the sequence
    DEROctetString oct = (DEROctetString) seq.getObjectAt(2);
    ASN1Object obj = readObject(oct.getOctets()); // *** see comments below ***
}

in.close();

// readObject method
public ASN1Object readObject(byte[] b) throws IOException {
    ASN1InputStream in = null;
    try {
        in = new ASN1InputStream(b);
        return in.readObject();
    } catch (Exception e) {
        // if error occurs, just return the octet string
        return new DEROctetString(b);
    } finally {
        in.close();
    }
}

Variable obj will be the content of the ReceiptAttribute, and it can vary a lot - I've seen DERIA5String, DERUTF8String, ASN1Integer and many others. As I don't know all possible values of this field, I think it's up to you to check each value.
","246","<ios><encryption><in-app-purchase><bouncycastle><pkcs#7>","0","3","1","2017-04-10 17:37:09","","3","2","328397","","2017-04-10 16:40:03","2017-04-10 13:53:01",""
"23552038","Is PKCS7 signing possible on Google App Engine?","I need to create a PKCS7 signature for some data using my Python app running on Google App Engine (GAE).  More specifically, I am trying to create a PKCS7 signature of an Apple Passbook pass manifest; the Passbook pass requires the PKCS7 signature file to be present in order to be a complete and valid pass.
I have spent almost a week researching and trying to no avail.  
I can successfully create the signature using openssl command line on my local PC with:
openssl smime -binary -sign -certfile WWDR.pem -signer certificate.pem -inkey key.pem -in manifest.json -out signature -outform DER 

I can also successfully create the signature using M2Crypto library on my local PC with:
from M2Crypto import BIO, SMIME, X509

s = SMIME.SMIME()
s.load_key('identity.pem')         # my certificate and private key

x509 = X509.load_cert('WWDR.pem')  # Apple's intermediate certificate
sk = X509.X509_Stack()
sk.push(x509)
s.set_x509_stack(sk)

p7 = s.sign(bio_manifest, SMIME.PKCS7_DETACHED | SMIME.PKCS7_BINARY)
pkcs7_buffer = BIO.MemoryBuffer()
p7.write_der(pkcs7_buffer)

f = open('signature', 'w')
f.write(pkcs7_buffer.read())
f.close()

However, M2Crypto is a wrapper to OpenSSL which is not supported on GAE.
GAE supports the pycrypto library, but it doesn't seem this library has support for PKCS7 signing.
I've also looked at tlslite, which is a pure python implementation and therefore should be supported on GAE, but it also doesn't seem to have support for PKCS7 signing.
I'm looking for guidance from anyone that has been able to successfully create a PKCS7 signature on GAE.  If you could point me to a pure python library or any other solution, I'd really appreciate it.  
Otherwise, I feel like I've reached the boundary of what is possible with GAE and will be looking to move my app to another platform.  I'm a bit flabbergasted that it has been this difficult and that GAE doesn't support the openssl library given the importance of data security; it appears they aren't serious about providing a web app service that offers support for anything beyond the basics.  Unless (hopefully) I've missed the obvious.
Thanks for any help!
","","238","<google-app-engine><passbook><pkcs#7>","4","","0","2014-05-08 20:38:02","","3","1","","","","2014-05-08 20:38:02",""
"53193110","Validate certificate chain in PKCS#7 format","I've extracted PKCS#7 formatted in ASN1, and I'd like to verify it's certificate chain (meaning that each certificate was properly signed by the certificate above it from root to leaf).
In openssl, there's the following API : 
int PKCS7_verify(PKCS7 *p7, 
                 STACK_OF(X509) *certs, 
                 X509_STORE *store, 
                 BIO *indata, 
                 BIO *out, 
                 int flags);

However, I don't have a trusted certificate store. 
I have a separate function that validate the integrity of the root certificate and that's enough for me. 
Assuming that I already trust the root certificate, why do I need the store certificates structure in order to verify that the chain is properly signed ? 
thanks  
","
The question is why do I need the store in order to verify that the chain is properly signed ?

You do not necessarily need a store parameter, you can set it to NULL as well and just verify the signature and not the entire chain of certificates. In that case, you should use the flag PKCS7_NOVERIFY, as explained in the manual for PKCS7_verify(). However, if you do want to verify the chain of certificates as well, you will somehow have to provide a mechanism to tell OpenSSL that you trust the root certificate and X509_STORE is a way to achieve that.

However, I don't have a trusted certficate store.

From your question, it is not entirely clear what you situation is. But you do write that you have a separate function to ""validate the integrity of the root certificate"".
In that case, you can instantiate an X509_STORE object with X509_STORE_new() and add your trusted certificate to it. There is an example in the OpenSSL source code tree of that in the setup_verify() function, which is for the case that the trusted certificate is available in a file. Or you could use X509_STORE_add_cert() if that fits your purpose better. After you have added that trusted certificate, you can use the store as a parameter to your PKCS7_verify() invocation.
","234","<openssl><x509><pkcs#7><asn1>","1","1","1","2018-11-10 01:39:08","53198995","1","","4333809","","2018-11-07 23:01:17","2018-11-07 15:57:15",""
"18899570","Input files required to programmatically generate a PKCS#12 certificate","I need to create an application in C to generate a self signed PKCS#12 certificate. I have an application which so far creates a .csr and a .key file.
I also have a program which creates a PKCS#12 object from a supplied .key and .p7 file. So given that I have a .csr and a .key file, I assume my next move would be to create a .p7 file from the .key / .csr file?
I found a sample application here which signs or verifies certificates. At the end of the signing process, we have a PKCS7 object. I assume that is the object I need. 
However, the sample application gives the following error when I run it with the key I have generated:
$ ./sign_and_verify_util sign mykey.key.pem
Error reading signer private key in mykey.key.pem

I added the .pem onto the file because I thought that was the issue.
Any shove in the right direction would be a great help and I would really appreciate it!
Edit
I just converted mykey.key to mykey.key.pem correctly using:
openssl rsa -inform DER -outform PEM -in mykey.key -out mykey.key.pem

Now the application I am trying to get the .p7 file from says:
Error reading signer certificate in (null)

","","232","<c><openssl><pkcs#12><pkcs#7><csr>","1","","0","2013-09-19 16:12:34","","4","","985012","","2013-09-19 16:12:34","2013-09-19 15:58:08",""
"53761285","Bouncy Castle crafted PKCS7/CMS signature verification by OpenSSL","We were using the following code snippet for signing and crafting the PKCS7 files.,
public static String signAttached(X509Certificate obCert,PrivateKey obPvtKey,String signData, boolean attached){
    byte[] envelopedData = null;

    try{
        Security.addProvider(new BouncyCastleProvider());

        //Signed Attributes for TimeStamping
        final ASN1EncodableVector signedAttributes = new ASN1EncodableVector();
        final Attribute signingAttribute = new Attribute(CMSAttributes.signingTime, new DERSet(new DERUTCTime(new Date()))); 
        signedAttributes.add(signingAttribute);
        // Create the signing table
        final AttributeTable signedAttributesTable = new AttributeTable(signedAttributes);
        // Create the table table generator that will added to the Signer builder
        final DefaultSignedAttributeTableGenerator signedAttributeGenerator = new DefaultSignedAttributeTableGenerator(signedAttributesTable);


        //Build CMS
        X509Certificate cert = (X509Certificate) obCert;
        List certList = new ArrayList();
        CMSTypedData msg = new CMSProcessableByteArray(signData.getBytes(java.nio.charset.StandardCharsets.UTF_8));
        certList.add(cert);
        Store certs = new JcaCertStore(certList);
        CMSSignedDataGenerator gen = new CMSSignedDataGenerator();
        ContentSigner sha1Signer = new JcaContentSignerBuilder(""SHA1withRSA"").setProvider(""SunMSCAPI"").build(obPvtKey);
        gen.addSignerInfoGenerator(new JcaSignerInfoGeneratorBuilder(new JcaDigestCalculatorProviderBuilder().setProvider(""BC"").build()).build(sha1Signer, cert));
        gen.addCertificates(certs);

        //true means Attached; false means detached content 
        CMSSignedData sigData = gen.generate(msg, attached);     

        envelopedData = sigData.getEncoded();
    }catch(Exception e){
        e.printStackTrace();
    }
    return new String(Base64.encode(envelopedData));
}

The final Base64 encoded envelope persisted into the file. Later, When i tried to verify the signature by using the following command; 
$ openssl cms -verify -noverify -inform PEM -in new.p7s
Verification successful
madan prabhu nic tamilnadu state unit

For attached signature; it works fine. Same thing for the detached signature; it's not working.
$openssl cms -verify -noverify -inform PEM -in newd.p7s -content newd.txt
madan prabhu nic tamilnadu state unit
Verification failure
140109147780928:error:2E09A09E:CMS routines:CMS_SignerInfo_verify_content:verification failure:crypto/cms/cms_sd.c:821:
140109147780928:error:2E09D06D:CMS routines:CMS_verify:content verify error:crypto/cms/cms_smime.c:393:

The content of the file newd.txt is exactly same data.
Kindly suggest me, how to resolve the Openssl verification successfully; since we are in development of cross platform supported solution. 
Note: Verification of both signatures(attached and detached) works fine in BC java-code verification using JcaSimpleSignerInfoVerifierBuilder.
","","225","<java><bouncycastle><pkcs#7>","0","","0","2018-12-13 13:05:45","","0","","3705788","","2018-12-13 13:05:45","2018-12-13 11:53:20",""
"43354660","How to decrypt PKCS#7 enveloped data with Azure Key Vault","I have certificates with private keys installed in Azure Key Vault, and I need to decrypt mime-content of type 'application/pkcs7-mime; smime-type=enveloped-data' (Cryptographic Message Syntax)
Can this be done with Azure Key Vault and C#/.NET?
Seems to me that Decrypt only works with raw data against the KeyVault client.
Is there some easy way to unwrap the mime content and decrypt bytes, manually?
","","224","<c#><azure><encryption><pkcs#7><azure-keyvault>","0","","0","2017-04-11 19:29:41","","5","","","","","2017-04-11 19:29:41",""
"25768692","Calling SignedCMS.Decode takes too long","Is there any reason that calling SignedCMS.Decode would take 15 seconds or more?  I have the following code:
SignedCms signedCms = new SignedCms();
signedCms.Decode(postedData);

where postedData is a byte array of a signed CMS message.  Sometimes the function call returns instantly, but most of the time, it takes 10-15 seconds to return causing the message sender to timeout.  
This seems to happen whether or not the debugger is attached to the process.
","So I narrowed it down to an instantiation of Oid in one of the functions that the Decode function calls.  The source is available at Reference Source .NET Framework 4.5.1.
I tested using:
System.Security.Cryptography.Oid oid = new System.Security.Cryptography.Oid(""1.2.840.113549.1.7.1"");

I also found this link with a similar problem. 
Interestingly, disconnecting my wireless adapter, the Oid instantiation occurs immediately, which leads me to believe that it may be network/DNS related (I have not idea what the Oid instantiation is doing).  After reconnecting my adapter SignedCms.Decode is working as normal.  Another option I read is to remove  my computer from the domain and then rejoin.  Haven't tried it yet.
Maybe this will help anyone else that is have the same (or similar) problem.
","222","<c#><.net><digital-signature><pkcs#7>","2","1","1","2014-09-10 21:34:11","","4","0","1256111","","2014-09-10 15:15:02","2014-09-10 14:55:33",""
"47975884","Not able to sign zip file using pkcs#7 and bouncyCastle in java","I have a program to sign and verify text and zip files using pkcs#7 and bouncycastle. 
Am writing the following string into both text and zip files( which contains base64 encoded original data, SignedBytes and Certificate data) :
String finalmsg=""<?xml version=\""1.0\"" encoding=\""UTF-8\"" standalone=\""yes\"" ?>\n"" +
                     ""<Envelope>\n"" +""    <OrgContent>""+new String(Base64.encode(contentbytes))+""</OrgContent>\n""+""    <Signature>""+new String(Base64.encode(signedBytes))+""</Signature>\n""+""    <Certificate>""+
                    new String(Base64.encode(keyStore.getCertificate(""CertName"").getEncoded()))+""</Certificate>\n""+""</Envelope>"";

Am able to verify my text file perfectly after signing. Also am able to verify my zip file but am not able to extract the zip file ( am getting unexpected end of zip file error)
Below is the code am using to write my signed message into the files :
if(file.getName().contains("".zip"")) {
byte[] b = finalmsg.getBytes(StandardCharsets.UTF_8);
try (BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(address+""SIGVERFILES/s2/""+name), 4096)) {
    out.write(b);
}
} else {
    FileWriter fw = new FileWriter(address+""SIGVERFILES/s2/""+name,true);
    BufferedWriter bw = new BufferedWriter(fw);
    bw.write(finalmsg);
    bw.close();
}

Also am able to verify and unzip successfully zip files signed by other parties. So my verification code is fine. I think somethings wrong with the way am writing the zip file.
Please dont mind the indentation and request you to help me try to find out what am doing wrong here? 
Please let me know if anymore code snippets are required.
","You can't just write a XML string into a file, rename it to ""whatever.zip"", and expect the result to be a valid zip file. Zip is a binary file format with its own constraints, one of them being the magic number starting with ""PK"" at the beginning of the file.
Exchanging signed data also has its own constraints, and PKCS#7 SignedData is also a normalized format.
To make your life easier, BouncyCastle provides helper classes to generate valid, properly wrapped signed data. Check out their documentation and examples here and here.
You will want to decide between generating an attached or detached signature : with an attached signature, the ASN.1 structure contains the signed message, so you can read validate the signature and read the payload from the same data block (example : RSA certificates). With a detached signature, it'll be up to you to transmit the data and its signature separately (but the recipiend will need both in order to verify the signature - example : signed files available for download on a public FTP server). Usually the question is answered simply by asking yourself if the recipient may want to use the payload without verifying its signature first, or not.
","222","<java><zip><bouncycastle><zipfile><pkcs#7>","0","0","1","2017-12-26 09:24:24","","0","","","","","2017-12-26 08:30:39",""
"39367374","Difference between two PKCS7 signatures while Signing a PDF","I am working on signing PDFs with digital mobile signatures (PKCS#7). Since I am not an expert on Openssl and Signatures types, I am facing some problems. Maybe I didn’t get the logic.
Im using Setasign PDF library to preparing PDF document, calculating byterange and SHA256. Since its paid and well known library, Im supposing there is no problem on these steps.
Then I am sending calculated hash to my mobile carrier’s service, the mobile user approving this signing process on his phone and The carrier’s web service returning PKCS#7 formatted signature. 
On last step PDF Library placing this signature into prepared PDF. 
Everythings looks fine till here. But when I open signed PDf its says “Document has been altered or corrupted since it was signed”
So I start to lookup reason of this problem and I noticed something that I don’t understand. 
I know other companies also using same mobile carrier’s service to signing documents, and those PDFs totally fine (I think they are using iTextsharp library). Anyway I got the signature from one of those documents and save this sign as binary data into a file then run this command on this file 
openssl asn1parse -inform der -in signature.p7b

This command gave me this result:
   0:d=0  hl=2 l=inf  cons: SEQUENCE
    2:d=1  hl=2 l=   9 prim: OBJECT            :pkcs7-signedData
   13:d=1  hl=2 l=inf  cons: cont [ 0 ]
   15:d=2  hl=2 l=inf  cons: SEQUENCE
   17:d=3  hl=2 l=   1 prim: INTEGER           :01
   20:d=3  hl=2 l=  13 cons: SET
   22:d=4  hl=2 l=  11 cons: SEQUENCE
   24:d=5  hl=2 l=   9 prim: OBJECT            :sha256
   35:d=3  hl=2 l=inf  cons: SEQUENCE
   37:d=4  hl=2 l=   9 prim: OBJECT            :pkcs7-data
   48:d=4  hl=2 l=   0 prim: EOC
   50:d=3  hl=4 l=1788 cons: cont [ 0 ]
   54:d=4  hl=4 l=1784 cons: SEQUENCE
   58:d=5  hl=4 l=1504 cons: SEQUENCE
   62:d=6  hl=2 l=   3 cons: cont [ 0 ]
   64:d=7  hl=2 l=   1 prim: INTEGER           :02
   67:d=6  hl=2 l=  17 prim: INTEGER           :B99634F7172927B1B51262580A11B4FE
   86:d=6  hl=2 l=  13 cons: SEQUENCE
   88:d=7  hl=2 l=   9 prim: OBJECT            :sha256WithRSAEncryption
   99:d=7  hl=2 l=   0 prim: NULL
  101:d=6  hl=2 l= 106 cons: SEQUENCE
  103:d=7  hl=2 l=  11 cons: SET
  105:d=8  hl=2 l=   9 cons: SEQUENCE
  107:d=9  hl=2 l=   3 prim: OBJECT            :countryName
  112:d=9  hl=2 l=   2 prim: PRINTABLESTRING   :TR
  116:d=7  hl=2 l=  40 cons: SET
  118:d=8  hl=2 l=  38 cons: SEQUENCE
  120:d=9  hl=2 l=   3 prim: OBJECT            :organizationName
  125:d=9  hl=2 l=  31 prim: UTF8STRING        :Elektronik A.S.
  158:d=7  hl=2 l=  49 cons: SET
  160:d=8  hl=2 l=  47 cons: SEQUENCE
  162:d=9  hl=2 l=   3 prim: OBJECT            :commonName
  167:d=9  hl=2 l=  40 prim: UTF8STRING        :Mobil S2
  209:d=6  hl=2 l=  30 cons: SEQUENCE
  211:d=7  hl=2 l=  13 prim: UTCTIME           :151125084946Z
  226:d=7  hl=2 l=  13 prim: UTCTIME           :161124084946Z
  241:d=6  hl=2 l=  87 cons: SEQUENCE
  243:d=7  hl=2 l=  11 cons: SET
  245:d=8  hl=2 l=   9 cons: SEQUENCE
  247:d=9  hl=2 l=   3 prim: OBJECT            :countryName
  252:d=9  hl=2 l=   2 prim: PRINTABLESTRING   :TR
  256:d=7  hl=2 l=  27 cons: SET
  258:d=8  hl=2 l=  25 cons: SEQUENCE
  260:d=9  hl=2 l=   3 prim: OBJECT            :organizationalUnitName
  265:d=9  hl=2 l=  18 prim: PRINTABLESTRING   :popCode - 33854
  285:d=7  hl=2 l=  20 cons: SET
  287:d=8  hl=2 l=  18 cons: SEQUENCE
  289:d=9  hl=2 l=   3 prim: OBJECT            :serialNumber
  294:d=9  hl=2 l=  11 prim: PRINTABLESTRING   :2594884
  307:d=7  hl=2 l=  21 cons: SET
  309:d=8  hl=2 l=  19 cons: SEQUENCE
  311:d=9  hl=2 l=   3 prim: OBJECT            :commonName
  316:d=9  hl=2 l=  12 prim: UTF8STRING        :JORJ MARDUK
  330:d=6  hl=4 l= 290 cons: SEQUENCE
  334:d=7  hl=2 l=  13 cons: SEQUENCE
  336:d=8  hl=2 l=   9 prim: OBJECT            :rsaEncryption
  347:d=8  hl=2 l=   0 prim: NULL
  349:d=7  hl=4 l= 271 prim: BIT STRING
  624:d=6  hl=4 l= 938 cons: cont [ 3 ]
  628:d=7  hl=4 l= 934 cons: SEQUENCE
  632:d=8  hl=3 l= 138 cons: SEQUENCE
  635:d=9  hl=2 l=   8 prim: OBJECT            :Authority Information Access
  645:d=9  hl=2 l= 126 prim: OCTET STRING      [HEX DUMP]:307C302E06082B060105050730018622687474703A2F2F6F637370322E652D677576656E2E636F6D2F6F6373702E78756461304A06082B06010505073002863E687474703A2F2F7777772E652D677576656E2E636F6D2F646F63756D656E74732F5475726B63656C6C4D6F62696C496D7A61416C744B6F6B53322E637274
  773:d=8  hl=2 l=  31 cons: SEQUENCE
  775:d=9  hl=2 l=   3 prim: OBJECT            :X509v3 Authority Key Identifier
  780:d=9  hl=2 l=  24 prim: OCTET STRING      [HEX DUMP]:3016801408B053A6CF4F46DB1D608B086DE5CD47E0606C0E
  806:d=8  hl=4 l= 370 cons: SEQUENCE
  810:d=9  hl=2 l=   3 prim: OBJECT            :X509v3 Certificate Policies
  815:d=9  hl=4 l= 361 prim: OCTET STRING      [HEX DUMP]:308201653081B106066086180300013081A6303606082B06010505070201162A687474703A2F2F7777772E652D677576656E2E636F6D2F646F63756D656E74732F4E455355452E706466306C06082B0601050507020230601A5E427520736572746966696B612C203530373020736179C4B16CC4B120456C656B74726F6E696B20C4B06D7A61204B616E756E756E612067C3B67265206E6974656C696B6C6920656C656B74726F6E696B20736572746966696B6164C4B1723081AE06096086180300010101033081A0303706082B06010505070201162B687474703A2F2F7777772E652D677576656E2E636F6D2F646F63756D656E74732F4D4B4E4553492E706466306506082B0601050507020230591A57427520736572746966696B612C204D4B4E455349206B617073616DC4B16E646120796179C4B16E6C616E6DC4B1C59F20626972206E6974656C696B6C6920656C656B74726F6E696B20736572746966696B6164C4B1722E
 1180:d=8  hl=2 l=  88 cons: SEQUENCE
 1182:d=9  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Distribution Points
 1187:d=9  hl=2 l=  81 prim: OCTET STRING      [HEX DUMP]:304F304DA04BA0498647687474703A2F2F73696C2E652D677576656E2E636F6D2F456C656B74726F6E696B42696C6769477576656E6C69676941534D4B4E45534953322F4C617465737443524C2E63726C
 1270:d=8  hl=2 l=  14 cons: SEQUENCE
 1272:d=9  hl=2 l=   3 prim: OBJECT            :X509v3 Key Usage
 1277:d=9  hl=2 l=   1 prim: BOOLEAN           :255
 1280:d=9  hl=2 l=   4 prim: OCTET STRING      [HEX DUMP]:030206C0
 1286:d=8  hl=3 l= 131 cons: SEQUENCE
 1289:d=9  hl=2 l=   8 prim: OBJECT            :qcStatements
 1299:d=9  hl=2 l= 119 prim: OCTET STRING      [HEX DUMP]:30753008060604008E4601013069060B608618013D0001A74E01010C5A427520736572746966696B612C203530373020736179696C6920456C656B74726F6E696B20496D7A61204B616E756E756E612067C3B67265206E6974656C696B6C6920656C656B74726F6E696B20736572746966696B61646972
 1420:d=8  hl=2 l=  79 cons: SEQUENCE
 1422:d=9  hl=2 l=   3 prim: OBJECT            :X509v3 Subject Directory Attributes
 1427:d=9  hl=2 l=  72 prim: OCTET STRING      [HEX DUMP]:3046301D06082B060105050709013111180F30303138313233313232303030305A301006082B06010505070904310404025452301306082B060105050709023107040542C4B04741
 1501:d=8  hl=2 l=  32 cons: SEQUENCE
 1503:d=9  hl=2 l=   3 prim: OBJECT            :X509v3 Subject Alternative Name
 1508:d=9  hl=2 l=  25 prim: OCTET STRING      [HEX DUMP]:301781156E6968616E2E6963696B40746B642E636F6D2E7472
 1535:d=8  hl=2 l=  29 cons: SEQUENCE
 1537:d=9  hl=2 l=   3 prim: OBJECT            :X509v3 Subject Key Identifier
 1542:d=9  hl=2 l=  22 prim: OCTET STRING      [HEX DUMP]:04149E69B3ABDAC2AC1C74156FCEEE68FF75A704B432
 1566:d=5  hl=2 l=  13 cons: SEQUENCE
 1568:d=6  hl=2 l=   9 prim: OBJECT            :sha256WithRSAEncryption
 1579:d=6  hl=2 l=   0 prim: NULL
 1581:d=5  hl=4 l= 257 prim: BIT STRING
 1842:d=3  hl=4 l= 729 cons: SET
 1846:d=4  hl=4 l= 725 cons: SEQUENCE
 1850:d=5  hl=2 l=   1 prim: INTEGER           :01
 1853:d=5  hl=2 l= 127 cons: SEQUENCE
 1855:d=6  hl=2 l= 106 cons: SEQUENCE
 1857:d=7  hl=2 l=  11 cons: SET
 1859:d=8  hl=2 l=   9 cons: SEQUENCE
 1861:d=9  hl=2 l=   3 prim: OBJECT            :countryName
 1866:d=9  hl=2 l=   2 prim: PRINTABLESTRING   :TR
 1870:d=7  hl=2 l=  40 cons: SET
 1872:d=8  hl=2 l=  38 cons: SEQUENCE
 1874:d=9  hl=2 l=   3 prim: OBJECT            :organizationName
 1879:d=9  hl=2 l=  31 prim: UTF8STRING        :Elektronik A.S.
 1912:d=7  hl=2 l=  49 cons: SET
 1914:d=8  hl=2 l=  47 cons: SEQUENCE
 1916:d=9  hl=2 l=   3 prim: OBJECT            :commonName
 1921:d=9  hl=2 l=  40 prim: UTF8STRING        :Mobil S2
 1963:d=6  hl=2 l=  17 prim: INTEGER           :B99634F7172927B1B51262580A11B4FE
 1982:d=5  hl=2 l=  11 cons: SEQUENCE
 1984:d=6  hl=2 l=   9 prim: OBJECT            :sha256
 1995:d=5  hl=4 l= 301 cons: cont [ 0 ]
 1999:d=6  hl=2 l=  24 cons: SEQUENCE
 2001:d=7  hl=2 l=   9 prim: OBJECT            :contentType
 2012:d=7  hl=2 l=  11 cons: SET
 2014:d=8  hl=2 l=   9 prim: OBJECT            :pkcs7-data
 2025:d=6  hl=2 l=  28 cons: SEQUENCE
 2027:d=7  hl=2 l=   9 prim: OBJECT            :signingTime
 2038:d=7  hl=2 l=  15 cons: SET
 2040:d=8  hl=2 l=  13 prim: UTCTIME           :160815091237Z
 2055:d=6  hl=2 l=  47 cons: SEQUENCE
 2057:d=7  hl=2 l=   9 prim: OBJECT            :messageDigest
 2068:d=7  hl=2 l=  34 cons: SET
 2070:d=8  hl=2 l=  32 prim: OCTET STRING      [HEX DUMP]:16D96A5B9033B7A73A3510CC429DDA315C6308AE7233A7F054118E764FF85885
 2104:d=6  hl=3 l= 193 cons: SEQUENCE
 2107:d=7  hl=2 l=  11 prim: OBJECT            :1.2.840.113549.1.9.16.2.47
 2120:d=7  hl=3 l= 177 cons: SET
 2123:d=8  hl=3 l= 174 cons: SEQUENCE
 2126:d=9  hl=3 l= 171 cons: SEQUENCE
 2129:d=10 hl=3 l= 168 cons: SEQUENCE
 2132:d=11 hl=2 l=  32 prim: OCTET STRING      [HEX DUMP]:7D3D2FEB1DD1F60316A7601C2AAE81F9EA9992948810AF5FC089825287BB1517
 2166:d=11 hl=3 l= 131 cons: SEQUENCE
 2169:d=12 hl=2 l= 110 cons: SEQUENCE
 2171:d=13 hl=2 l= 108 cons: cont [ 4 ]
 2173:d=14 hl=2 l= 106 cons: SEQUENCE
 2175:d=15 hl=2 l=  11 cons: SET
 2177:d=16 hl=2 l=   9 cons: SEQUENCE
 2179:d=17 hl=2 l=   3 prim: OBJECT            :countryName
 2184:d=17 hl=2 l=   2 prim: PRINTABLESTRING   :TR
 2188:d=15 hl=2 l=  40 cons: SET
 2190:d=16 hl=2 l=  38 cons: SEQUENCE
 2192:d=17 hl=2 l=   3 prim: OBJECT            :organizationName
 2197:d=17 hl=2 l=  31 prim: UTF8STRING        :Elektronik A.S.
 2230:d=15 hl=2 l=  49 cons: SET
 2232:d=16 hl=2 l=  47 cons: SEQUENCE
 2234:d=17 hl=2 l=   3 prim: OBJECT            :commonName
 2239:d=17 hl=2 l=  40 prim: UTF8STRING        :Mobil S2
 2281:d=12 hl=2 l=  17 prim: INTEGER           :B99634F7172927B1B51262580A11B4FE
 2300:d=5  hl=2 l=  13 cons: SEQUENCE
 2302:d=6  hl=2 l=   9 prim: OBJECT            :sha256WithRSAEncryption
 2313:d=6  hl=2 l=   0 prim: NULL
 2315:d=5  hl=4 l= 256 prim: OCTET STRING      [HEX DUMP]:388E968648889ECC29FC394A958365E0C0B14CC8861CF73198B0330002EE7B97DA06E7548EBB52286F5ADE5E40394444786E695FC6BB288CDCF71CFBBCA002C6C84E84608DAC057C8FE05C0465074D6BA4EAC941A069AB62ED1747656BBD8FCE412D20462B7068E07692169558853AAB10594D91A616AB28708C2ECF08C6EE48989D10B48B300E35223259BE6B4B3612BDC6BD40C3707B138E2DD645D7922693AC18566FFBEBE5E970B77321C11C19B029BB8F12471D7B613BF49E530641E0B1F3C02D92D1288AAB0D4AF691F302083D5FE0749CC4858F6A4AB33B0DABC8AAD97AF79C12DD6EE03FC5AF4083F9C453C4994D018468738FD60DF50074394D11E2
 2575:d=3  hl=2 l=   0 prim: ENUMERATED        :00

Then i saved the signature from same Mobile Carrier's returns me:
    0:d=0  hl=4 l=2413 cons: SEQUENCE
    4:d=1  hl=2 l=   9 prim: OBJECT            :pkcs7-signedData
   15:d=1  hl=4 l=2398 cons: cont [ 0 ]
   19:d=2  hl=4 l=2394 cons: SEQUENCE
   23:d=3  hl=2 l=   1 prim: INTEGER           :01
   26:d=3  hl=2 l=  11 cons: SET
   28:d=4  hl=2 l=   9 cons: SEQUENCE
   30:d=5  hl=2 l=   5 prim: OBJECT            :sha1
   37:d=5  hl=2 l=   0 prim: NULL
   39:d=3  hl=2 l=  59 cons: SEQUENCE
   41:d=4  hl=2 l=   9 prim: OBJECT            :pkcs7-data
   52:d=4  hl=2 l=  46 cons: cont [ 0 ]
   54:d=5  hl=2 l=  44 prim: OCTET STRING      :hPUsrH5h12umBN5a6SktIkfKwI0dOBNids5LY84CWxU=
  100:d=3  hl=4 l=1793 cons: cont [ 0 ]
  104:d=4  hl=4 l=1789 cons: SEQUENCE
  108:d=5  hl=4 l=1509 cons: SEQUENCE
  112:d=6  hl=2 l=   3 cons: cont [ 0 ]
  114:d=7  hl=2 l=   1 prim: INTEGER           :02
  117:d=6  hl=2 l=  16 prim: INTEGER           :64022A0CF088F79AF0024C139729BA23
  135:d=6  hl=2 l=  13 cons: SEQUENCE
  137:d=7  hl=2 l=   9 prim: OBJECT            :sha256WithRSAEncryption
  148:d=7  hl=2 l=   0 prim: NULL
  150:d=6  hl=2 l= 106 cons: SEQUENCE
  152:d=7  hl=2 l=  11 cons: SET
  154:d=8  hl=2 l=   9 cons: SEQUENCE
  156:d=9  hl=2 l=   3 prim: OBJECT            :countryName
  161:d=9  hl=2 l=   2 prim: PRINTABLESTRING   :TR
  165:d=7  hl=2 l=  40 cons: SET
  167:d=8  hl=2 l=  38 cons: SEQUENCE
  169:d=9  hl=2 l=   3 prim: OBJECT            :organizationName
  174:d=9  hl=2 l=  31 prim: UTF8STRING        :Elektronik A.S.
  207:d=7  hl=2 l=  49 cons: SET
  209:d=8  hl=2 l=  47 cons: SEQUENCE
  211:d=9  hl=2 l=   3 prim: OBJECT            :commonName
  216:d=9  hl=2 l=  40 prim: UTF8STRING        :Mobil S2
  258:d=6  hl=2 l=  30 cons: SEQUENCE
  260:d=7  hl=2 l=  13 prim: UTCTIME           :151012133852Z
  275:d=7  hl=2 l=  13 prim: UTCTIME           :161011133852Z
  290:d=6  hl=2 l=  86 cons: SEQUENCE
  292:d=7  hl=2 l=  11 cons: SET
  294:d=8  hl=2 l=   9 cons: SEQUENCE
  296:d=9  hl=2 l=   3 prim: OBJECT            :countryName
  301:d=9  hl=2 l=   2 prim: PRINTABLESTRING   :TR
  305:d=7  hl=2 l=  27 cons: SET
  307:d=8  hl=2 l=  25 cons: SEQUENCE
  309:d=9  hl=2 l=   3 prim: OBJECT            :organizationalUnitName
  314:d=9  hl=2 l=  18 prim: PRINTABLESTRING   :popCode - 16557
  334:d=7  hl=2 l=  20 cons: SET
  336:d=8  hl=2 l=  18 cons: SEQUENCE
  338:d=9  hl=2 l=   3 prim: OBJECT            :serialNumber
  343:d=9  hl=2 l=  11 prim: PRINTABLESTRING   :52059220
  356:d=7  hl=2 l=  20 cons: SET
  358:d=8  hl=2 l=  18 cons: SEQUENCE
  360:d=9  hl=2 l=   3 prim: OBJECT            :commonName
  365:d=9  hl=2 l=  11 prim: UTF8STRING        :NATE MARDUK
  378:d=6  hl=4 l= 290 cons: SEQUENCE
  382:d=7  hl=2 l=  13 cons: SEQUENCE
  384:d=8  hl=2 l=   9 prim: OBJECT            :rsaEncryption
  395:d=8  hl=2 l=   0 prim: NULL
  397:d=7  hl=4 l= 271 prim: BIT STRING
  672:d=6  hl=4 l= 945 cons: cont [ 3 ]
  676:d=7  hl=4 l= 941 cons: SEQUENCE
  680:d=8  hl=3 l= 138 cons: SEQUENCE
  683:d=9  hl=2 l=   8 prim: OBJECT            :Authority Information Access
  693:d=9  hl=2 l= 126 prim: OCTET STRING      [HEX DUMP]:307C302E06082B060105050730018622687474703A2F2F6F637370322E6687474703A2F2F7777772E652D677576656E2E636F6D2F646F63756D656E74732F5475726B63656C6C4D6F62696C496D7A61416C744B6F6B53322
  821:d=8  hl=2 l=  31 cons: SEQUENCE
  823:d=9  hl=2 l=   3 prim: OBJECT            :X509v3 Authority Key Identifier
  828:d=9  hl=2 l=  24 prim: OCTET STRING      [HEX DUMP]:3016801408B053A6CF4F46DB1D608B086DE5CD47E0606C0E
  854:d=8  hl=4 l= 370 cons: SEQUENCE
  858:d=9  hl=2 l=   3 prim: OBJECT            :X509v3 Certificate Policies
  863:d=9  hl=4 l= 361 prim: OCTET STRING      [HEX DUMP]:308201653081B106066086180300013081A6303606082B06010505070202F4E455355452E706466306C06082B0601050507020230601A5E427520736572746966696B612C203530373020736179C4B16CC4B120456C656B76C6920656C656B74726F6E696B20736572746966696B6164C4B1723081AE06096086180300010101033081A0303706082B06010505070201162B64E4553492E706466306506082B0601050507020230591A57427520736572746966696B612C204D4B4E455349206B617073616DC4B16E6461207966E696B20736572746966696B6164C4B1722E
 1228:d=8  hl=2 l=  88 cons: SEQUENCE
 1230:d=9  hl=2 l=   3 prim: OBJECT            :X509v3 CRL Distribution Points
 1235:d=9  hl=2 l=  81 prim: OCTET STRING      [HEX DUMP]:304F304DA04BA0498647687474703A2F2F73696C2E652D677576656E2E64953322F4C617465737443524C2E63726C
 1318:d=8  hl=2 l=  14 cons: SEQUENCE
 1320:d=9  hl=2 l=   3 prim: OBJECT            :X509v3 Key Usage
 1325:d=9  hl=2 l=   1 prim: BOOLEAN           :255
 1328:d=9  hl=2 l=   4 prim: OCTET STRING      [HEX DUMP]:030206C0
 1334:d=8  hl=3 l= 131 cons: SEQUENCE
 1337:d=9  hl=2 l=   8 prim: OBJECT            :qcStatements
 1347:d=9  hl=2 l= 119 prim: OCTET STRING      [HEX DUMP]:30753008060604008E4601013069060B608618013D0001A74E01010C5A46B20496D7A61204B616E756E756E612067C3B67265206E6974656C696B6C6920656C656B74726F6E696B20736572746966696B61646972
 1468:d=8  hl=2 l=  79 cons: SEQUENCE
 1470:d=9  hl=2 l=   3 prim: OBJECT            :X509v3 Subject Directory Attributes
 1475:d=9  hl=2 l=  72 prim: OCTET STRING      [HEX DUMP]:3046301D06082B060105050709013111180F30303034313233313232303070405544F4B4154
 1549:d=8  hl=2 l=  39 cons: SEQUENCE
 1551:d=9  hl=2 l=   3 prim: OBJECT            :X509v3 Subject Alternative Name
 1556:d=9  hl=2 l=  32 prim: OCTET STRING      [HEX DUMP]:301E811C6D6572742E697A6369406B6579696E7465726E65742E636F6D2
 1590:d=8  hl=2 l=  29 cons: SEQUENCE
 1592:d=9  hl=2 l=   3 prim: OBJECT            :X509v3 Subject Key Identifier
 1597:d=9  hl=2 l=  22 prim: OCTET STRING      [HEX DUMP]:0414E2096E3737DC612801B12C31E89903685EB6E423
 1621:d=5  hl=2 l=  13 cons: SEQUENCE
 1623:d=6  hl=2 l=   9 prim: OBJECT            :sha256WithRSAEncryption
 1634:d=6  hl=2 l=   0 prim: NULL
 1636:d=5  hl=4 l= 257 prim: BIT STRING
 1897:d=3  hl=4 l= 516 cons: SET
 1901:d=4  hl=4 l= 512 cons: SEQUENCE
 1905:d=5  hl=2 l=   1 prim: INTEGER           :01
 1908:d=5  hl=2 l= 126 cons: SEQUENCE
 1910:d=6  hl=2 l= 106 cons: SEQUENCE
 1912:d=7  hl=2 l=  11 cons: SET
 1914:d=8  hl=2 l=   9 cons: SEQUENCE
 1916:d=9  hl=2 l=   3 prim: OBJECT            :countryName
 1921:d=9  hl=2 l=   2 prim: PRINTABLESTRING   :TR
 1925:d=7  hl=2 l=  40 cons: SET
 1927:d=8  hl=2 l=  38 cons: SEQUENCE
 1929:d=9  hl=2 l=   3 prim: OBJECT            :organizationName
 1934:d=9  hl=2 l=  31 prim: UTF8STRING        :Elektronik A.S.
 1967:d=7  hl=2 l=  49 cons: SET
 1969:d=8  hl=2 l=  47 cons: SEQUENCE
 1971:d=9  hl=2 l=   3 prim: OBJECT            :commonName
 1976:d=9  hl=2 l=  40 prim: UTF8STRING        :Mobil S2
 2018:d=6  hl=2 l=  16 prim: INTEGER           :64022A0CF088F79AF0024C139729BA23
 2036:d=5  hl=2 l=   9 cons: SEQUENCE
 2038:d=6  hl=2 l=   5 prim: OBJECT            :sha1
 2045:d=6  hl=2 l=   0 prim: NULL
 2047:d=5  hl=2 l=  93 cons: cont [ 0 ]
 2049:d=6  hl=2 l=  24 cons: SEQUENCE
 2051:d=7  hl=2 l=   9 prim: OBJECT            :contentType
 2062:d=7  hl=2 l=  11 cons: SET
 2064:d=8  hl=2 l=   9 prim: OBJECT            :pkcs7-data
 2075:d=6  hl=2 l=  28 cons: SEQUENCE
 2077:d=7  hl=2 l=   9 prim: OBJECT            :signingTime
 2088:d=7  hl=2 l=  15 cons: SET
 2090:d=8  hl=2 l=  13 prim: UTCTIME           :160906195531Z
 2105:d=6  hl=2 l=  35 cons: SEQUENCE
 2107:d=7  hl=2 l=   9 prim: OBJECT            :messageDigest
 2118:d=7  hl=2 l=  22 cons: SET
 2120:d=8  hl=2 l=  20 prim: OCTET STRING      [HEX DUMP]:049FB27A9ED352096E59BF189BF35ADD1C88D4CF
 2142:d=5  hl=2 l=  13 cons: SEQUENCE
 2144:d=6  hl=2 l=   9 prim: OBJECT            :rsaEncryption
 2155:d=6  hl=2 l=   0 prim: NULL
 2157:d=5  hl=4 l= 256 prim: OCTET STRING      [HEX DUMP]:1EEBD18D0AE9BCD393FECB45AD18C30832ACDF83CDF703B6CF093C275BF0FB0D9B6697C9C3D4652ED1C48BC2816DF6A02620AAC9518A79367443F664A34C6EFD023649FFC18785342D7BCA311449BE2155B309008A1A68B296CD50EFE315A34A5C2E7303EA169201B150B94F8C20851F40B978121CDFF50D6D3C699483F3A7AAEA37D02DE20CEFEE88AC5947BD2B573C338A9145BB942FBF7

As you see they look very different. At this point, Am i missing some thing ? I mean, Shall I do something on second one to convert it looks like first signature ?
Like i said before, I am using same service with those guys but they had different signature type on their signed pdf's(And its also working).
","","220","<digital-signature><signature><sign><digital-certificate><pkcs#7>","0","","0","2016-09-07 10:26:49","","2","","","","","2016-09-07 10:26:49",""
"49177595","OpenSSL: PKCS7, verification failure, checksum of payload in PEM?","I have a verification-error in a SMIME-message and I try to check manually.
Is there an obvious relation between the ASN1 of the PEM and the digest of the payload?
I try the following:

Make the PEM of a message (signature of the SMIME)
openssl cms -sign -in x.txt -md sha1 -signer cer.cer -inkey key.key -outform PEM > mypem

Make a SHA-checksum of the payload:
sha1sum x.txt

Parse the PEM:
openssl asn1parse -in mypem


So will I find the SHA-checksum of sha1sum in the output of asn1parse??
","If you add -inform pem to the last openssl command you'll see more:
 openssl asn1parse -inform pem -in mypem

Look at the end of the output for the OCTET STRING. In my case I have 2K RSA key and that object is 512 bytes.
This hexdump is the crypto part of the PKCS#7 signature.
Convert this string to binary (I like xxd for this) and use openssl once more to get it decode (assuming you also have RSA key):
$ echo ""07CD61E81878C803ACA4B41713845320D46577ED9B4F70FA04F18C31B27F08622B4D919C30147B99EF2135A402C5DC11639F0412648DA84183284A2E9F51EC05C3F354ECDC7A7F9BB540785ACC192BFAE2643C796FBD3CD8CD9ADB8591ABF042F9FC6F520250D50B0DC52E2207A1D7116878AC75EFE87031CC728822D01A0FCB75E528239CA9FD94EC4C6161696A33A35D5CA7E182FF486E8DF7CBA7944840F130612415ED3FCD42C4F92E2BF193CCC265A4B5D153362A51A3CA00F8EF0D7E4D3F7516299C74271E4AF6307AFA5FF2897297F7076E3D7A21A0BCA4B22A699D9D6F5C3AD044DC91145B34B3564EE9825DC9E9DE19A453296A8C1E520D292A7861"" | 
xxd -r -ps -c512 | openssl rsautl -encrypt -inkey key.key -raw -hexdump
Enter pass phrase for key.key:
0000 - 00 01 ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
0010 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
0020 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
0030 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
0040 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
0050 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
0060 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
0070 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
0080 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
0090 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
00a0 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
00b0 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
00c0 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
00d0 - ff ff ff ff ff ff ff ff-ff ff ff ff 00 30 21 30   .............0!0
00e0 - 09 06 05 2b 0e 03 02 1a-05 00 04 14 d2 b9 cb a5   ...+............
00f0 - 53 a5 e2 da d9 da 75 c5-bc ad a5 1b f6 2a eb 13   S.....u......*..

You'll recognized the PCKS#1 v1.5 padding. 
Extract the bytes at the end, decode them with the openssl asn1 parser and you'll finally get the hash you wanted:
$ echo 3021300906052b0e03021a05000414d2b9cba553a5e2dad9da75a5bcada51bf62aeb13 | xxd -r -ps | openssl asn1parse -inform der
  0:d=0  hl=2 l=  33 cons: SEQUENCE
  2:d=1  hl=2 l=   9 cons: SEQUENCE
  4:d=2  hl=2 l=   5 prim: OBJECT            :sha1
 11:d=2  hl=2 l=   0 prim: NULL
 13:d=1  hl=2 l=  20 prim: OCTET STRING      [HEX DUMP]:D2B9CBA553A5E2DAD9DA75A5BCADA51BF62AEB13

","208","<openssl><pkcs#7><smime>","0","1","1","2018-03-12 08:31:19","","0","","","","","2018-03-08 16:10:42",""
"56818371","What is the correct behavior of C_Decrypt in pkcs#11?","I am using C_Decrypt with the CKM_AES_CBC_PAD mechanism. I know that my ciphertext which is 272 bytes long should actually decrypt to 256 bytes, which means a full block of padding was added.
I know that according to the standard when invoking C_Decrypt with a NULL output buffer the function may return an output length which is somewhat longer than the actual required length, in particular when padding is used this is understandable, as the function can't know how many padding bytes are in the final block without carrying out the actual decryption.
So the question is whether if I know that I should get exactly 256 bytes back, such as in the scenario I explained above, does it make sense that I am still getting a CKR_BUFFER_TOO_SMALL error as a result, despite passing a 256 bytes buffer? (To make it clear: I am indicating that this is the length of the output buffer in the appropriate output buffer length parameter, see the parameters of C_Decrypt to observe what  I mean)
I am encountering this behavior with a Safenet Luna device and am not sure what to make of it. Is it my code's fault for not querying for the length first by passing NULL in the output buffer, or is this a bug on the HSM/PKCS11 library side?
One more thing I should perhaps mention is that when I provide a 272 (256+16) bytes output buffer, the call succeeds and I am noticing that I am getting back my expected plaintext, but also the padding block which means 16 final bytes with the value 0x10. However, the output length is updated correctly to 256, not 272 - this also proves that I am not using CKM_AES_CBC instead of CKM_AES_CBC_PAD accidentally, which I suspected for a moment as well :)
","I have used CKM.AES_CBC_PAD padding mechanism with C_Decrypt in past. You have to make 2 calls to C_Decrypt (1st ==> To get the size of the plain text, 2nd ==> Actual decryption). see the documentation here which talks about determining the length of the buffer needed to hold the plain-text. 
Below is the step-by-step code to show the behavior of decryption:
//Defining the decryption mechanism
CK_MECHANISM mechanism = new CK_MECHANISM(CKM.AES_CBC_PAD);

//Initialize to zero -> variable to hold size of plain text
LongRef lRefDec = new LongRef();

// Get ready to decrypt 
CryptokiEx.C_DecryptInit(session_1, mechanism, key_handleId_in_hsm);

// Get the size of the plain text -> 1st call to decrypt
CryptokiEx.C_Decrypt(session_1, your_cipher, your_cipher.length, null, lRefDec);

// Allocate space to the buffer to store plain text.  
byte[] clearText = new byte[(int)lRefDec.value];

// Actual decryption -> 2nd call to decrypt
CryptokiEx.C_Decrypt(session_1, eFileCipher, eFileCipher.length, eFileInClear,lRefDec);

Sometimes, decryption fails because your input encryption data was misleading (however, encryption is successful but corresponding decryption will fail) the decryption algorithm. So it is important not to send raw bytes directly to the encryption algorithm; rather encoding the input data with UTF-8/16 schema's preserves the data from getting misunderstood as network control bytes.  
","206","<pkcs#11><pkcs#7><hsm><cbc-mode><cryptoki>","2","1","1","2019-07-10 15:41:38","","9","1","1833599","","2019-06-30 12:13:05","2019-06-29 14:35:36",""
"53313288","Why I am getting an error while opening digitally signed pdf document using PKCS7 and X509Certificate in C#?","I am trying to sign a pdf file using PKCS7 and X509Certificate but I get the following error when I open the signed pdf file in Adobe.

Document has been altered or corrupted since it was signed

Docuement Hash 
66305799d97adc716694faa3aecb3b82136a76a57e0470fb289dcf727b83304b

Following is my code:
public class Helper
{

    private static PdfPKCS7 _signature;
    private static PdfSignatureAppearance _apperance;
    private static byte[] _hash;
    private static byte[] _signatureHash;

    public static byte[] GetBytesToSign(string unsignedPdf, string tempPdf, string signatureFieldName, byte[] x509Signature)
    {
        if (System.IO.File.Exists(tempPdf))
            System.IO.File.Delete(tempPdf);

        var chain = new List<Org.BouncyCastle.X509.X509Certificate>
        {
            Org.BouncyCastle.Security.DotNetUtilities.FromX509Certificate(new X509Certificate2(x509Signature))
        };

        Org.BouncyCastle.X509.X509Certificate certificate = chain.ElementAt(0);

        using (PdfReader reader = new PdfReader(unsignedPdf))
        {
            using (FileStream os = System.IO.File.OpenWrite(tempPdf))
            {
                PdfStamper stamper = PdfStamper.CreateSignature(reader, os, '\0');

                PdfSignatureAppearance appearance = stamper.SignatureAppearance;

                appearance.SetVisibleSignature(new Rectangle(36, 748, 250, 400), 1, signatureFieldName);

                appearance.Certificate = chain[0];

                IExternalSignatureContainer external = new ExternalBlankSignatureContainer(PdfName.ADOBE_PPKLITE, PdfName.ADBE_PKCS7_DETACHED);

                MakeSignature.SignExternalContainer(appearance, external, 8192);

                Stream data = appearance.GetRangeStream();

                byte[] hash = DigestAlgorithms.Digest(data, ""SHA256"");

                var signature = new PdfPKCS7(null, chain, ""SHA256"", false);

                byte[] signatureHash = signature.getAuthenticatedAttributeBytes(hash, null, null, CryptoStandard.CMS);

                _signature = signature;
                _apperance = appearance;
                _hash = hash;
                _signatureHash = signatureHash;

                return signatureHash;
            }
        }
    }

    public static void EmbedSignature(string tempPdf, string signedPdf, string signatureFieldName, byte[] signedBytes)
    {
        using (PdfReader reader = new PdfReader(tempPdf))
        {
            using (FileStream os = File.OpenWrite(signedPdf))
            {
                _signature.SetExternalDigest(signedBytes, null, ""RSA"");

                byte[] encodedSignature = _signature.GetEncodedPKCS7(_hash, null, null, null, CryptoStandard.CMS);

                IExternalSignatureContainer external = new MyExternalSignatureContainer(encodedSignature);

                MakeSignature.SignDeferred(reader, signatureFieldName, os, external);
            }
        }
    }

    private class MyExternalSignatureContainer : IExternalSignatureContainer
    {
        private readonly byte[] signedBytes;

        public MyExternalSignatureContainer(byte[] signedBytes)
        {
            this.signedBytes = signedBytes;
        }

        public byte[] Sign(Stream data)
        {
            string strResp = File.ReadAllText(@""C:\Users\Digital\Content\KYC_responseXML.txt"");
            XmlDocument xmlDoc = new XmlDocument();
            xmlDoc.LoadXml(strResp);
            string strDsc = xmlDoc.SelectSingleNode(""EsignResp/Signatures/DocSignature"").InnerText;
            return Convert.FromBase64String(strDsc);
        }

        public void ModifySigningDictionary(PdfDictionary signDic)
        {

        }
    }
}

Webservice returned following XML signature:
This XML file does not appear to have any style information associated with it. The document tree is shown below.
<EsignResp errCode=""NA"" errMsg=""NA"" resCode=""957C7BF1B9A9F1473E358F6F0D3FC200CB48A253"" status=""1"" ts=""2018-11-15T09:55:02"" txn=""UKC:eSign:5306:20181115095351206"">
<UserX509Certificate>
MIIFtjCCBJ6gAwIBAgIEWxeBRzANBgkqhkiG9w0BAQsFADCBgzELMAkGA1UEBhMCSU4xMTAvBgNVBAoTKE5TREwgZS1Hb3Zlcm5hbmNlIEluZnJhc3RydWN0dXJlIExpbWl0ZWQxHTAbBgNVBAsTFENlcnRpZnlpbmcgQXV0aG9yaXR5MSIwIAYDVQQDExlOU0RMZUdvdklzc3VpbmdDQTIwMThUZXN0MB4XDTE4MTExNTA0MjUwMloXDTE4MTExNTA0NTUwMVowggFLMRAwDgYDVQQIEwdHdWphcmF0MQ8wDQYDVQQREwYzOTQ2NTAxTjBMBgNVBC4TRTE5OTJNMUI5NDhGNkIwQUM5MkY5MUIxMjBGOEQyMjBGMkJGMkMwRUVFQjBCMENGNkU3MDAxRkVDMjVBQkU3MEM1MDQ3QjENMAsGA1UEDBMEMDkzNzFSMFAGA1UELQNJADAxMDAwNTA5Wk9sWlVJWDJGMTlWcXJwUVN4YUZ0NjZkMW9ldmZpbllocHI2TXN4QXlYQXI3MCttRnJLQXBJOE5wT1BLMG1zNDEpMCcGA1UEQRMgY2IxNjYyNzgNDYzNDZiYjg4M2I1NGI2ZGM2MWJlNzcxETAPBgNVBAoTCFBlcnNvbmFsMQswCQYDVQQGEwJJTjEoMCYGA1UEAxMfQmFoZWxpbSBBYmR1bG1hbm5hbiBBYmR1bHNhdHRhcjBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABHzwDifYLBhJfjKTgtaACz77Nm/EM3INgefVdsDkwMexp52vssDxu7jN/yCXCJWOThOHeWfTQozWP1t87J+EsOajggIwMIICLDALBgNVHQ8EBAMCBsAwgaUGA1UdIASBnTCBmjCBlwYHYIJkZAIEATCBizA/BggrBgEFBQcCARYzaHR0cHM6Ly8xMjEuMjQwLjkuOC9jcHMvTlNETGUtR292LUNBLUNQUy12ZXIxLjAucGRmMEgGCCsGAQUFBwICMDwMOkFhZGhhYXItZUtZQy1PVFAgQ2xhc3MgQ2VydGlmaWNhdGUgaXNzdWVkIGJ5IE5TREwgZS1Hb3YgQ0EwTgYIKwYBBQUHAQEEQjBAMD4GCCsGAQUFBzAChjJodHRwczovLzEyMS4yNDAuOS44L3JlcG9zaXRvcnkvTlNETGUtR292Q0EyMDE4LmNlcjCB5AYDVR0fBIHcMIHZMDWgM6Axhi9odHRwOi8vMTIxLjI0MC45LjgvY3JsL05TRExlR292VUFUSXNzdWluZ0NBLmNybDCBn6CBnKCBmaSBljCBkzELMAkGA1UEBhMCSU4xMTAvBgNVBAoTKE5TREwgZS1Hb3Zlcm5hbmNlIEluZnJhc3RydWN0dXJlIExpbWl0ZWQxHTAbBgNVBAsTFENlcnRpZnlpbmcgQXV0aG9yaXR5MSIwIAYDVQQDExlOU0RMZUdvdklzc3VpbmdDQTIwMThUZXN0MQ4wDAYDVQQDEwVDUkw2NjAfBgNVHSMEGDAWgBTSGuo/qezZNRnR1RvxYGbZw9QjFDAdBgNVHQ4EFgQUZYy9fj/1CqZ19ZWpZeOYFmHKSnwwDQYJKoZIhvcNAQELBQADggEBAHZblBpACyNn2gFHxZcx1ezyIU29HGacChWlzCdTiSGAZG492wVnEFljXGM4RhVP0mSA/SsCibORI4zHSyyf56DZoNTrHJrOxU+nxqOY1Ss1E0kjWVcyEAmlPYqY7I8pTiNibxGg59ibezjNV4uSULcClXq+e+rcnun2pBail9ReSkOQJiLL7pHHKAqdBP6sxvT0nhD/bxnzYc2aVrqwCOp1nErx8csBISxzTOvo0zPfrGaWWyDWShhkH2FKXyShZRdT9W98EBOP1fyx9Bg1XrlOdtLNR3Ex7ZnVhRaBPjkkNB37yP8Vx5OMZ8lzTOgdw0FKbV4A1rc0UdJvRz62e+w=
</UserX509Certificate>
<Signatures>
<DocSignature error="""" id=""1"" sigHashAlgorithm=""SHA256"">
MIILXAYJKoZIhvcNAQcCoIILTTCCC0kCAQExDzANBglghkgBZQMEAgEFADALBgkqhkiG9w0BBwGgggnQMIIFtjCCBJ6gAwIBAgIEWxeBRzANBgkqhkiG9w0BAQsFADCBgzELMAkGA1UEBhMCSU4xMTAvBgNVBAoTKE5TREwgZS1Hb3Zlcm5hbmlIEluZnJhc3RydWN0dXJlIExpbWl0ZWQxHTAbBgNVBAsTFENlcnRpZnlpbmcgQXV0aG9yaXR5MSIwIAYDVQQDExlOU0RMZUdvdklzc3VpbmdDQTIwMThUZXN0MB4XDTE4MTExNTA0MjUwMloXDTE4MTExNTA0NTUwMVowggFLMRAwDgYDVQQIEwdHdWphcmF0MQ8wDQYDVQQREwYzOTQ2NTAxTjBMBgNVBC4TRTE5OTJNMUI5NDhGNkIwQUM5MkY5MUIxMjBGOEQyMjBGMkJGMkMwRUVFQjBCMENGNkU3MDAxRkVDMjVBQkU3MEM1MDQ3QjENMAsGA1UEDBMEMDkzNzFSMFAGA1UELQNJADAxMDAwNTA5Wk9sWlVJWDJGMTlWcXJwUVN4YUZ0NjZkMW9ldmZpbllocHI2TXN4QXlYQXI3MCttRnJLQXBJOE5wT1BLMG1zNDEpMCcGA1UEQRMgY2IxNjYyNzgyNDYzNDZiYjg4M2I1NGI2ZGM2MWJlNzcxETAPBgNVBAoTCFBlcnNvbmFsMQswCQYDVQQGEwJJTjEoMCYGA1UEAxMfQmFoZWxpbSBBYmR1bG1hbm5hbiBBYmR1bHNhdHRhcjBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABHzwDifYLBhJfjKTgtaACz77Nm/EM3INgefVdsDkwMexp52vssDxu7jN/yCXCJWOThOHeWfTQozWP1t87J+EsOajggIwMIICLDALBgNVHQ8EBAMCBsAwgaUGA1UdIASBnTCBmjCBlwYHYIJkZAIEATCBizA/BggrBgEFBQcCARYzaHR0cHM6Ly8xMjEuMjQwLjkuOC9jcHMvTlNETGUtR292LUNBLUNQUy12ZXIxLjAucGRmMEgGCCsGAQUFBwICMDwMOkFhZGhhYXItZUtZQy1PVFAgQ2xhc3MgQ2VydGlmaWNhdGUgaXNzdWVkIGJ5IE5TREwgZS1Hb3YgQ0EwTgYIKwYBBQUHAQEEQjBAMD4GCCsGAQUFBzAChjJodHRwczovLzEyMS4yNDAuOS44L3JlcG9zaXRvcnkvTlNETGUtR292Q0EyMDE4LmNlcjCB5AYDVR0fBIHcMIHZMDWgM6Axhi9odHRwOi8vMTIxLjI0MC45LjgvY3JsL05TRExlR292VUFUSXNzdWluZ0NBLmNybDCBn6CBnKCBmaSBljCBkzELMAkGA1UEBhMCSU4xMTAvBgNVBAoTKE5TREwgZS1Hb3Zlcm5hbmNlIEluZnJhc3RydWN0dXJlIExpbWl0ZWQxHTAbBgNVBAsTFENlcnRpZnlpbmcgQXV0aG9yaXR5MSIwIAYDVQQDExlOU0RMZUdvdklzc3VpbmdDQTIwMThUZXN0MQ4wDAYDVQQDEwVDUkw2NjAfBgNVHSMEGDAWgBTSGuo/qezZNRnR1RvxYGbZw9QjFDAdBgNVHQ4EFgQUZYy9fj/1CqZ19ZWpZeOYFmHKSnwwDQYJKoZIhvcNAQELBQADggEBAHZblBpACyNn2gFHxZcx1ezyIU29HGacChWlzCdTiSGAZG492wVnEFljXGM4RhVP0mSA/SsCibORI4zHSyyf56DZoNTrHJrOxU+nxqOY1Ss1E0kjWVcyEAmlPYqY7I8pTiNibxGg59ibezjNV4uSULcClXq+e+rcnun2pBail9ReSkOQJiLL7pHHKAqdBP6sxvT0nhD/bxnzYc2aVrqwCOp1nErx8csBISxzTOvo0zPfrGaWWyDWShhkH2FKXyShZRdT9W98EBOP1fyx9Bg1XrlOdtLNR3Ex7ZnVhRaBPjkkNB37yP8Vx5OMZ8lzTOgdw0FKbV4A1rc0UdJvRz62e+wwggQSMIIC+qADAgECAgRalYv+MA0GCSqGSIb3DQEBCwUAMIGDMQswCQYDVQQGEwJJTjExMC8GA1UEChMoTlNETCBlLUdvdmVybmFuY2UgSW5mcmFzdHJ1Y3R1cmUgTGltaXRlZDEdMBsGA1UECxMUQ2VydGlmeWluZyBBdXRob3JpdHkxIjAgBgNVBAMTGU5TRExlR292SXNzdWluZ0NBMjAxOFRlc3QwHhcNMTgwMjI3MTYxOTAzWhcNMjMwMjI3MTY0OTAzWjCBgzELMAkGA1UEBhMCSU4xMTAvBgNVBAoTKE5TREwgZS1Hb3Zlcm5hbmNlIEluZnJhc3RydWN0dXJlIExpbWl0ZWQxHTAbBgNVBAsTFENlcnRpZnlpbmcgQXV0aG9yaXR5MSIwIAYDVQQDExlOU0RMZUdvdklzc3VpbmdDQTIwMThUZXN0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAl2NTpJJWbR3OPHY5r2ldRSwGKiEImn+uHf8fKLkkLwypERmkz6otgPExuC51ZneFLXtzReNRzrYoP2FkiNw2LkXbYK0tg9tZ0KdzsuGPtuYfvu6EG0bCO2XmRePrzyXBdEbWQw501rLkRGxxq4EsgWDJgxlClKvcxpH1f3IN940moQz3GktVMF4e3WF6GnkMSY9bcAKrfGQE6PoR52v+ObkG7sWg8hRGxAo5mVFaIumTq81wkK4v7ZGWZL3cjinZb82E7f9PTOtPZlHzfcMct2U6+4ldAwH+jp3YrBTeSw7/HQbPclR9pqW22bByw0nne/DQYHo6hHTUM6afiKwEewIDAQABo4GLMIGIMCsGA1UdEAQkMCKADzIwMTgwMjI3MTYxOTAzWoEPMjAyMzAyMjcxNjQ5MDNaMAsGA1UdDwQEAwIBBjAfBgNVHSMEGDAWgBTSGuo/qezZNRnR1RvxYGbZw9QjFDAdBgNVHQ4EFgQU0hrqP6ns2TUZ0dUb8WBm2cPUIxQwDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAdeGegyhzT279eGyMriBYUN+bwtyKFFjotpeuUl0o8wYDDZHamddKj6bCW9reNrUCgOwronG6EU8P8WcLQHvbtcqsi8PZ5CqBK1S6xh09fvgqQwVFkMD2Y2fv7Nlr0P7+bjDSbfgu5XizxFe5WUY/P8bgVU1gLvRZEMo4Q6oV4eXPdWiE77wwcwAwMDD2EgpPY/HOjpNOiJzhefo0sjHMxQaQPRliclBpHM+EVmFX0NZ06nK2Ou9WkeEV9CGRlldZAgQxV5cAU9zjFIZFUwcbl7R7NF9NbdEXaHNlXFjhhITLQors47oTu+ukbNeyUl3d5/L+CDUZHNVDtDCKNjucyDGCAVAwggFMAgEBMIGMMIGDMQswCQYDVQQGEwJJTjExMC8GA1UEChMoTlNETCBlLUdvdmVybmFuY2UgSW5mcmFzdHJ1Y3R1cmUgTGltaXRlZDEdMBA1UECxMUQ2VydGlmeWluZyBBdXRob3JpdHkxIjAgBgNVBAMTGU5TRExlR292SXNzdWluZ0NBMjAxOFRlc3QCBFsXgUcwDQYJYIZIAWUDBAIBBQCgSzAYBgkqhkiG9w0BCQMxCwYJKoZIhvcNAQcBMC8GCSqGSIb3DQEJBDEiBCBmMFeZ2XrccWaU+qOuyzuCE2p2pX4EcPsonc9ye4MwSzAUBggqhkjOPQQDAgYIKoZIzj0DAQcERjBEAiA803FSntU+Ao7xqJ0bsF5EXG4T53UWnVeUn+UqjcQ1/wIgVZ/M9XH5xzew9+/dLnP9P574jszJPg7/IrtRVyFP4tc=
</DocSignature>
</Signatures>
<Signature xmlns=""http://www.w3.org/2000/09/xmldsig#"">
<SignedInfo xmlns=""http://www.w3.org/2000/09/xmldsig#"">
<CanonicalizationMethod Algorithm=""http://www.w3.org/TR/2001/REC-xml-c14n-20010315""/>
<SignatureMethod Algorithm=""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256""/>
<Reference URI="""">
<Transforms>
<Transform Algorithm=""http://www.w3.org/2000/09/xmldsig#enveloped-signature""/>
</Transforms>
<DigestMethod Algorithm=""http://www.w3.org/2001/04/xmlenc#sha256""/>
<DigestValue>zcFiuaTy/HajJpSKCS/DtAZ8b+TMTPfO+Na7dLP38i4=</DigestValue>
</Reference>
</SignedInfo>
<SignatureValue>
qOJyQroX0Rr53prUuRSCAFKQZ77SOBXxM3x8iwk7GgrfOjdItK+/MMXes8K39Hy2jvzJuEtBai5nx4XiWrfHWThYcnkD/iuQb+Rs/NC9blJj5EdYSLlrZ6UAT2NYU70WKgbrteZiSgkk/PAyPTTwZzxtiExN5aPpalX0OkuHhrXnmvnssc4taaFNP3BfJ4JJphJiUgq02DLmCtvRI25Qg0H2kMpLZFiGNxCZTXck2hwDLpO8RVb9k6Fn8DZhWDWLEbEPNHb6CoAMsvTu7iSC9VMpq7c2scAeg2qVRFf63tmkAfbQZs7boWrmj96JwVj5P7K95UzH8ku+WehIm+8w==
</SignatureValue>
<KeyInfo>
<KeyValue>
<RSAKeyValue>
<Modulus>
0o9vohWZ3ztI9ea8D/zUEUBRq6c82BE7sFmr1hNMeuGSJQFf39ceesRtGUzlUYVWXcU23P8sVZ5419CHh7ApFzUXaLD72i/2d5FFI0n3iRlTQec9PEUHyrvOCVDpqBhbnrO/EHBqRluUQJTQUtMu5mhPNFV7IIJMTEAsUhCL9adZXXQK9NeK0foRr29Oq7VdEGfSeLzHIibpQmhNPh89oJXqu0cmbNSW4J4i2GmwHQpmsmHaSQcgh4mgVrykO64pAKXPreAPipDHQM1l/e5hilYlWfLHxhC5ObTCTcydQ218IVulFOFhdQt7xVV61TOmoTC2elhWbDqoLJBVU5mBfQ==
</Modulus>
<Exponent>AQAB</Exponent>
</RSAKeyValue>
</KeyValue>
<X509Data>
<X509SubjectName>
ITC INFRASTRUCTURE LIMITED
</X509SubjectName>
<X509Certificate>
MIIGIjCCBQqgAwIBAgIEANgp4jANBgkqhkiG9w0BAQsFADCBkzELMAkGA1UEBhMCSU4xKjAoBgNVBAoTIWVNdWRocmEgQ29uc3VtZXIgU2VydmljZXMgTGltaXRlZDEdMBsGA1UECxMUQ2VydGlmeWluZyBBdXRob3JpdHkxOTA3BgNVBAMTMGUtTXVkaHJhIFN1YiBDQSBDbGFzcyAyIGZvciBEb2N1bWVudCBTaWduZXIgMjAxNDAeFw0xNzA2MjMxMTUzMTVaFw0xOTA2MjMxMTUzMTVaMIIBEzELMAkGA1UEBhMCSU4xMTAvBgNVBAoTKE5TREwgRSBHT1ZFUk5BTkNFIElORlJBU1RSVUNUVVJFIExJTUlURUQxIzAhBgNVBAsTGlBBTiBUSU4gQU5EIFVJRCBPUEVSQVRJT05TMQ8wDQYDVQQREwY0MDAwMTMxFDASBgNVBAgTC01BSEFSQVNIVFJBMQ8wDQYDVQQJEwZNVU1CQUkxPDA6BgNVBDMTMzFTVCBGTE9PUiBUSU1FUyBUT1dFUiBLQU1BTEEgTUlMTFMgQ09NUE9VTkQgU0IgTUFSRzE2MDQGA1UEAxMtRFMgTlNETCBFIEdPVkVSTkFOQ0UgSU5GUkFTVFJVQ1RVUkUgTElNSVRFRCAzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0o9vohWZ3ztI9ea8D/zUEUBRq6c82BE7sFmr1hNMeuGSJQFf39ceesRtGUzlUYVWXcU23P8sVZ5419CHh7ApFzUXaLD72i/2d5FFI0n3iRlTQec9PEUHyvOCVDpqBhbnrO/EHBqRluUQJTQUtMu5mhPNFV7IIJMTEAsUhCL9adZXXQK9NeK0foRr29Oq7VdEGfSeLzHIibpQmhNPh89oJXqu0cmbNSW4J4i2GmwHQpmsmHaSQcgh4mgVrykO64pAKXPreAPipDHQM1l/e5hilYlWfLHxhC5ObTCTcydQ218IVulFOFhdQt7xVV61TOmoTC2elhWbDqoLJBVU5mBfQIDAQABo4IB+TCCAfUwEwYDVR0jBAwwCoAITaZEyKbiAAgwHQYDVR0OBBYEFGzNaT6D2SoleAtlGlS4gBsQvo3qMA4GA1UdDwEB/wQEAwIGwDAcBgNVHREEFTATgRFISVRFTk1ATlNETC5DTy5JTjCB0gYDVR0gBIHKMIHHMC0GBmCCZGQCAjAjMCEGCCsGAQUFBwICMBUaE0NsYXNzIDIgQ2VydGlmaWNhdGUwRAYGYIJkZAoBMDowOAYIKwYBBQUHAgIwLBoqT3JnYW5pc2F0aW9uYWwgRG9jdW1lbnQgU2lnbmVyIENlcnRpZmljYXRlMFAGB2CCZGQBCAIwRTBDBggrBgEFBQcCARY3aHR0cDovL3d3dy5lLW11ZGhyYS5jb20vcmVwb3NpdG9yeS9jcHMvZS1NdWRocmFfQ1BTLnBkZjB3BggrBgEFBQcBAQRrMGkwJAYIKwYBBQUHMAGGGGh0dHA6Ly9vY3NwLmUtbXVkaHJhLmNvbTBBBggrBgEFBQcwAoY1aHR0cDovL3d3dy5lLW11ZGhyYS5jb20vcmVwb3NpdG9yeS9jYWNlcnRzL2RvY2NsMi5jcnQwQwYDVR0fBDwwOjA4oDagNIYyaHR0cDovL3d3dy5lLW11ZGhyYS5jb20vcmVwb3NpdG9yeS9jcmxzL2RvY2NsMi5jcmwwDQYJKoZIhvcNAQELBQADggEBALp9E7tM/HvtM+FEfaHdBn5MqL2WLf/GuuMH02ULbIDLQQNK+R4ivuFXLAqU5hbgtr9Yi1oRlfA5iTVDfxKLW6nGF3aSzNihgwhNP69/WM0TozxwYzCxMAVMGPGY+wUuLxWo67RybDCmQCaeG/RXM7FzfKtX8E99g9pBwjw23dc3kGIUqnWUqTEXjauYwz/7XDO2PWJw7F+PPeOrrxC2gA0F6jCT24bZjoF32eLCgXFcE5tIBMhM8WnUR3Pfex8mw5sctuUi8WFkgbLVrIBGuRDebMmr2/k2+D/O4tyTSbdl8YIV4MtHvMIUHnD0Z691Tjwj109A6h0AtuJAXvOm7FE=
</X509Certificate>
</X509Data>
</KeyInfo>
</Signature>
</EsignResp>

","","205","<c#><itext><digital-signature><x509certificate><pkcs#7>","2","","0","2018-11-15 09:41:11","","6","0","10655739","","2018-11-15 09:41:11","2018-11-15 05:57:36",""
"53408547","Using openssl to check if root certificate in PKCS#7 is revoked","Here's pkcs7_verify signature taken from C/C++ library: 
int PKCS7_verify(PKCS7 *p7, STACK_OF(X509) *certs, X509_STORE *store,
             BIO *indata, BIO *out, int flags);

It can be used with PKCS7 block (p7) and the section that it suppose to sign (in data). 
I wonder how does this check detect if one of the certificate in the chain is revoked...
From what I know, revocation check can be made only if matching against another certificate outside the pkcs7 block, which is marked as revoked.
I checked the function arguments and found one that represent the list of store trusted certificates. 
This arg should hold the certificate which is the issuer of the lower-most certificate in the pkcs7 chain. So my guess is that if this certificate is marked as revoked, we fail the check on revocation reason... 
But what if another certificate higher in the chain is revoked ? how do I provide this piece of information to pkcs7_verify ?
Or perhaps there's another openssl method that decide if a certificate in the chain is revoked or not ?
UPDATE: 
I've found an alternative way to check whether a certificate is revoked. In the example below we can see that revoked_test.pem is identified as revoked by matching against the list in crl_chain.pem. How can I do it programmatically ? 
openssl verify -crl_check -CAfile crl_chain.pem revoked-test.pem 
revoked-test.pem: OU = Domain Control Validated, OU = PositiveSSL, CN = xs4all.nl
error 23 at 0 depth lookup:certificate revoked

thanks 
","Most of the rules of the certification path validation is set in the X509_STORE structure you are passing to the PKCS7_verify function.
This example show how to build a complete X509_STORE and explain how to activate the CRL validation in the X509_STORE. (the example is good for setting up the crl validation but not for the certificate chain handling)
The core functions are:

X509_STORE_set_flags
X509_STORE_add_crl 
X509_STORE_add_lookup

You use the X509_STORE_set_flags to tell the certificate store to perform CRL validation. The flags you need are: X509_V_FLAG_CRL_CHECK_ALL | X509_V_FLAG_CRL_CHECK. You can find all flags here.
You use theX509_STORE_add_crl to add CRLs for the validation. The CRL doesn't need to be from a root CA.
As an option to theX509_STORE_add_crl, you have the X509_STORE_add_lookup, to add a function to lookup for CRLs in any place (e.g.: file system, database, urls, etc.).
When performing the chain validation, OpenSSl will use the CRLs and lookup functions in the X509_STORE to validate all certificates in the chain. If any certificate in the chain is revoked, an error is returned.
It's important to add that the X.509 certification path validation specification doesn't include the validation of trust anchors (usually root certificates). All certificates in the chain under the trust anchor have to be verified, but the trust anchor is trusted because the verifier set it as so (i.e.: the trust anchor validation is made out-of-bounds by the verifier).
","200","<c++><c><openssl><x509certificate><pkcs#7>","1","1","1","2018-11-25 11:09:38","53453578","0","2","4333809","","2018-11-22 18:24:02","2018-11-21 09:07:57",""
"40382157","Create a correct PKCS7/CMS (ASN.1) from existing XML Signature in PHP","I have an XML digital signature, (xmlns=""http://www.w3.org/2000/09/xmldsig) and I want to convert this into a PKCS7 signature. 
I belive I have to use an ASN.1 encoder such as https://github.com/FGrosse/PHPASN1 but I cannot understand how to create a valid pkcs7/asn.1 signaure with it.
Is this possible?
","No. It's not posible.
When making a XML signature, the private key is signing a data codification (codified in XML).
You are able to put the information included in this XML signature into a PKCS7 signature (codified in ASN.1).
But then, the codification of these data would be different, so the signature wouldn't be valid.
","197","<php><pki><asn.1><pkcs#7><xml-dsig>","-1","1","1","2016-11-18 11:03:54","40675463","1","","3329664","","2016-11-05 09:42:01","2016-11-02 14:15:08",""
"4466885","What version of the PKCS#1 spec is gcrypt implemented against?","I am trying to determine which version of the PKCS#1 spec that gcrypt is implemented against.
Thank you
","The gcrypt manual talks about ""type 1 padding"" (for signatures) and ""type 2 padding"" (for encryption). This means that it implements the ""old-style"" PKCS#1 signature and encryption methods, also called ""v1.5"" because they were the only ones specified in PKCS#1 v1.5. gcrypt does not appear (from what I see in the documentation) to implement the more recent OAEP (encryption) and PSS (signature) paddings.
Note, though, that the ""v1.5"" paddings are still specified in more recent versions of PKCS#1, so it can be said that gcrypt is also implemented against PKCS#1 v2.1 -- but it does not implement all of it.
","194","<c++><encryption><pkcs#7>","2","2","1","2010-12-17 13:06:59","4470702","0","","","","","2010-12-17 01:09:37",""
"53587927","How to get signed content from pkcs7 attached signature using Bouncy Castle","using following code; when i tries to get access the signed from the PKCS7 attached  signature. 
  cms = new CMSSignedData(envelopedData); //PKCS7 envelope
  String signedData = new String((byte[])cms.getSignedContent().getContent());

I got the output like this. 
nº™(5Âš?¶ÁNšc«n‘¶˜Êõûøˆ‚<ùæB0¸ð¿ø""˜ZÊ×`—õWøž8¹¨c¼‘Ç{¥é×Æx¢ôãÕ›|?€çžÆ3ÔÜç&¦¤X„õ·3c'Gž\³Ö/€Á<ž²¬ÿµƒÉâw…«b›¤?¤­1®kB•ô?³Á­2€¦?r`!¦÷nt¯*Ÿ

Same thing works fine for detached signature. For attached signature, i used the following code.
CMSSignedData sigData = gen.generate(msg, true); 

Even. I tried all the charsets for the signedData String.
","I found the problem and resolved it. It was due to the double signing process.
","194","<java><digital-signature><bouncycastle><pkcs#7>","0","0","1","2018-12-13 10:33:59","","0","","","","","2018-12-03 05:25:51",""
"53849607","Verify signature of SMIME .p7m file","I need to to validate the signature of one .p7m package(SMIME message) using c++ code. I understood this file contains both the signature and the certificate along with the original message content. Initially when I was trying with my c++ code , I was getting some errors. Now I am planning to do it using openssl command line before moving to c++ code for better understanding how to achieve this. To get the public certificate , I am using the following command :
    openssl pkcs7 -in Signed.p7m -inform DER -print_certs > certificate.pem

Now, I want to extract the signature value from that file to validate the signature. I want to see the value of the signature as well as the certificate, that's why I want to have those values separately in a file.
One of my friend tried to extract the certificate & signature as well as the validation of the package using c# code and getting expected result , so the package is not corrupted.
I have tried multiple commands from internet. But none of those are working correctly. It will be helpful if you can provide one working openssl command.
Thanks you.
","","191","<openssl><certificate><signature><pkcs#7><smime>","0","","0","2018-12-19 10:48:39","","0","","","","","2018-12-19 10:48:39",""
"52824352","PKCS7 validation error: ASN1 corrupted data","I am developing a java class that signs text files in PKCS7 format. I discovered that it is possible to do this using Sun libraries instead of BouncyCastle, and I developed the following method:
    public void AssinaPKCS7(String ArquivoAssinar) {

        String SrtResultPKCS7 = """";
        byte[] Conteudo;
        byte[] Hash;
        String DadosArq = """";
        String Linha = """";
        boolean AssinValid = false;

        try {
            FileInputStream Entrada = new FileInputStream(ArquivoAssinar);
            InputStreamReader Leitor = new InputStreamReader(Entrada, Charset);
            BufferedReader Buffer = new BufferedReader(Leitor);
            Linha = Buffer.readLine();

            while (Linha != null) {
                DadosArq = DadosArq + Linha;
                Linha = Buffer.readLine();
            }

            Buffer.close();

            Conteudo = DadosArq.getBytes(Charset);

            X500Name xName = X500Name.asX500Name(Certif.getSubjectX500Principal());
            BigInteger serial = Certif.getSerialNumber();
            AlgorithmId digestAlgorithmId = new AlgorithmId(AlgorithmId.SHA_oid);
            AlgorithmId signAlgorithmId = new AlgorithmId(AlgorithmId.RSAEncryption_oid);

            MessageDigest MessDig = MessageDigest.getInstance(""SHA1"");
            Hash = MessDig.digest(Conteudo);

            PKCS9Attribute Atributo1 = new PKCS9Attribute(PKCS9Attribute.CONTENT_TYPE_OID, ContentInfo.DATA_OID);
            PKCS9Attribute Atributo2 = new PKCS9Attribute(PKCS9Attribute.MESSAGE_DIGEST_OID, Hash); 
            PKCS9Attributes ConjuntoAtrib = new PKCS9Attributes(new PKCS9Attribute[] {Atributo1, Atributo2}); 

            Signature Sign = Signature.getInstance(AlgoritmoAssinatura);
            Sign.initSign(PrivPass);
            Sign.update(Conteudo);
            ResultadoAssinatura = Sign.sign();

            Signature Verif = Signature.getInstance(AlgoritmoAssinatura);
            Verif.initVerify(Certif);
            Verif.update(Conteudo);
            AssinValid = Verif.verify(ResultadoAssinatura);

            if (AssinValid) {
                try {
                    SignerInfo sInfo = new SignerInfo(xName, serial, digestAlgorithmId, ConjuntoAtrib, signAlgorithmId, ResultadoAssinatura, null);

                    ContentInfo cInfo = new ContentInfo(ContentInfo.DIGESTED_DATA_OID, new DerValue(DerValue.tag_OctetString, Conteudo));

                    PKCS7 p7 = new PKCS7(new AlgorithmId[] { digestAlgorithmId }, cInfo, new java.security.cert.X509Certificate[] { Certif }, new SignerInfo[] { sInfo });

                    ByteArrayOutputStream bOut = new DerOutputStream();
                    p7.encodeSignedData(bOut);
                    byte[] encoded = bOut.toByteArray();
                    SrtResultPKCS7 = Encoder.encode(encoded);

                    FileOutputStream Saida = new FileOutputStream(ArquivoAssinar);
                    OutputStreamWriter Escritor = new OutputStreamWriter(Saida, Charset);
                    BufferedWriter BuffWriter = new BufferedWriter(Escritor); 
                    //BuffWriter.write(SrtResultPKCS7);
                    BuffWriter.write(bOut.toString());
                    BuffWriter.close();
                }
                catch (Exception E) {
                    E.printStackTrace();        
                }
            }
            else {
                System.out.println(""Assinatura inválida"");
            }
        }
        catch (Exception E) {
            E.printStackTrace();
        }

    }

When I tryed to validate the resulting file in online validator https://www.receita.fazenda.gov.br/Aplicacoes/SSL/ATBHE/assinadoc/ValidadorAssinaturas.app/valida.aspx I got this error message:
ASN1 corrupted data
I checked the signature, she is OK. I believe the error is in som data convertion while generating PKCS7 result.
Has anyone had this problem? And how can I validate the PCKS7 result in java code? 
","I don't know how you checked the signature, other than the meaningless check in your code which repeats the mistake(s), but it was of the wrong data and since you didn't show us AlgoritmoAssinatura maybe the wrong method as well. You also have several other errors. Rather than detail all of them, here is an example that produces a valid result, with the changes commented:
// use test data for example
KeyStore ks = KeyStore.getInstance(""JKS""); ks.load(new FileInputStream (args[0]), args[1].toCharArray());
PrivateKey PrivKey = (PrivateKey) ks.getKey (args[2], args[1].toCharArray());
X509Certificate Certif = (X509Certificate) ks.getCertificate(args[2]);
String Message = ""test"";
String ArquivoAssinar = args[3];
String Charset = ""ASCII""; // no idea, see below

String SrtResultPKCS7 = """";
byte[] Conteudo = Message.getBytes(Charset);
byte[] Hash;
//String DadosArq = """";
//String Linha = """";
//boolean AssinValid = false;

try {
    // the name in SignerInfo is the _Issuer_ name NOT the Subject
    X500Name xName = X500Name.asX500Name(Certif.getIssuerX500Principal());
    BigInteger serial = Certif.getSerialNumber();
    AlgorithmId digestAlgorithmId = new AlgorithmId(AlgorithmId.SHA_oid);
    AlgorithmId signAlgorithmId = new AlgorithmId(AlgorithmId.RSAEncryption_oid);

    MessageDigest MessDig = MessageDigest.getInstance(""SHA1"");
    Hash = MessDig.digest(Conteudo);

    PKCS9Attribute Atributo1 = new PKCS9Attribute(PKCS9Attribute.CONTENT_TYPE_OID, ContentInfo.DATA_OID);
    PKCS9Attribute Atributo2 = new PKCS9Attribute(PKCS9Attribute.MESSAGE_DIGEST_OID, Hash); 
    PKCS9Attributes ConjuntoAtrib = new PKCS9Attributes(new PKCS9Attribute[] {Atributo1, Atributo2}); 

    // when using signedattrs, signature is of the encoded attrs 
    // (without the context-implicit tag used when embedded in SignerInfo)
    Signature Sign = Signature.getInstance(""SHA1withRSA"");
    Sign.initSign(PrivKey);
    Sign.update(ConjuntoAtrib.getDerEncoding());
    byte[] ResultadoAssinatura = Sign.sign();

    SignerInfo sInfo = new SignerInfo(xName, serial, digestAlgorithmId, ConjuntoAtrib, signAlgorithmId, ResultadoAssinatura, null);
    // contenttype inside signed-data is data not digested-data  
    ContentInfo cInfo = new ContentInfo(ContentInfo.DATA_OID, new DerValue(DerValue.tag_OctetString, Conteudo));

    PKCS7 p7 = new PKCS7(new AlgorithmId[] { digestAlgorithmId }, cInfo, new java.security.cert.X509Certificate[] { Certif }, new SignerInfo[] { sInfo });

    ByteArrayOutputStream bOut = new DerOutputStream();
    p7.encodeSignedData(bOut);
    byte[] encoded = bOut.toByteArray();
    // Java doesn't define a class 'Encoder' so I assume this is base64
    SrtResultPKCS7 = DatatypeConverter.printBase64Binary(encoded); // gone in 11!

    FileOutputStream Saida = new FileOutputStream(ArquivoAssinar);
    OutputStreamWriter Escritor = new OutputStreamWriter(Saida, Charset);
    BufferedWriter BuffWriter = new BufferedWriter(Escritor);
    // this was correct for base64 (although the buffering is wasted)
    BuffWriter.write(SrtResultPKCS7);
    // this was nonsense -- it decodes the DER bytes as if they were characters,
    // which they aren't, and then OSW re-encodes them to probably wrong bytes
    //BuffWriter.write(bOut.toString());
    BuffWriter.close();
    // alternatively could write DER/binary with a Stream (NOT a Writer)
}
catch (Exception E) {
    E.printStackTrace();
}

It's not clear to me what output format you -- or the site you link -- want. 
Using binary/DER is fairly common, but can't be cut&pasted and is harder to work with. Base64 of DER is rare but not unknown. If you or they want the standard PEM format, used by a lot of software, that is NOT merely base64 of DER; it is base64 of DER PLUS line breaks every 64 characters AND dash-BEGIN and dash-END lines added.
Also, SHA-1 has been broken for collision more than a year; see https://shattered.io and the numerous Qs on cryptography.SX and security.SX about this. Even before that it was prohibited for signatures by numerous authorities since 2014 or 2015, including NIST (for the US government) and CABforum (for public web certificates). I don't know anything about the data you are signing, but if it is in any way important or valuable, and you have the option to use a better hash in your signature(s), you should.
ADDED: also I asume you realize that sun.* classes are not documented, not guaranteed, and may stop working anytime Oracle feels like it.
","190","<java><digital-signature><pkcs#7>","0","0","1","2018-10-17 05:55:12","","0","","","","","2018-10-15 20:31:25",""
"44271033","Node.js safari push notifications intermittent signature failure","I am using the safari-push-notifications v 0.3.0 module to create the push package required for Safari. Occasionally I get the error Signature verification of push package failed from Safari.
I noticed in the failed signatures there are some garbled/invalid characters. I tried taking these out and using the signature, but it still fails.
My cert, key, intermediate, and manifest are the same each time.
Most of the time the signature works just fine, but once in a while it fails.
Has anybody else experienced this and know a way to fix it?
","I had opened an issue in the github repo for this problem as well, and the owner pushed a fix. If you are experiencing this problem, just upgrade to version 0.3.1 or higher.
","188","<node.js><signature><pkcs#7><safari-push-notifications>","3","0","1","2017-06-02 01:39:12","44319551","0","","6952289","","2017-05-31 14:34:50","2017-05-30 20:08:36",""
"24055416","How to export a *.p7b cert from *.pfx file","MSDN said:
X509Certificate.Export
The contentType parameter accepts only the following values of the X509ContentType enumeration: Cert, SerializedCert, and Pkcs12. Passing any other value causes a CryptographicException to be thrown.
http://msdn.microsoft.com/en-us/library/dxz81eb9(v=vs.110).aspx
Is there any other methods?
Thanks in advance!
","Recently, I understand what .p7b format is.
static void ExportCert()
{
        X509Certificate2 x509 = new X509Certificate2(@""E:\SimonSelf.pfx"", ""password"", X509KeyStorageFlags.Exportable);

        X509Certificate2Collection x509List = new X509Certificate2Collection(x509);
        byte[] p7bBinary = x509List.Export(X509ContentType.Pkcs7);
        using (FileStream fs = new FileStream(@""E:\SimonSelf.p7b"", FileMode.Create))
        {
            fs.Write(p7bBinary, 0, p7bBinary.Length);
            fs.Close();
        }
}

","186","<windows-phone-8><certificate><pkcs#7>","0","0","1","2014-06-06 08:02:21","","0","","2476700","","2014-06-06 01:09:24","2014-06-05 08:38:04",""
"18382270","How can I sign a text by certificate in SQL Server and provide PKCS#7 signature?","In my app i need to implement digital signature of some text, extracted from DB data (customer bill, for example), to send a text by e-mail together with it's signature in PKCS#7 format. Both because of high load and data volumes, and a fact that an e-mail app is provided by external developers, it's highly desired to include a text signature in SQL Server resultset, which returns all the data (e-mail attachments) to e-mail app.
The problem is that SQL Server uses x509 v.3 certificate format. It is not a problem while importing certificate and a key - I can convert it to x509 v.3 using OpenSSL before import, it's a one-time deal. But is there a way to convert a SQL Server signature to PKCS#7 format inside SQL Server, or do I have to implement a signing process outside of it?
","","185","<sql><sql-server><certificate><digital-signature><pkcs#7>","0","","0","2015-06-18 16:09:39","","2","","1816580","","2015-06-18 16:09:39","2013-08-22 13:45:43",""
"35124071","PKCS7 Padding in JavaCard","I am trying to implement my own PKCS7 padding scheme in JavaCard environment in case a smart card does not support PKCS5 or 7 padding schemes.
I want the block size of the PKCS padding scheme to be flexible in the event that different block size of symmetric ciphers are used. The length indicates the message input length and the blocksize indicates the size of a cipher's block.
My algorithm would check two scenarios in the PKCS7 padding namely if all bytes are the same bytes (e.g. 0A, 0A, 0A .. 0A, 0A, 0A) which means there is no padding involved and would return a value 0.
The second scenario is the checking if there is padding (e.g. 0A, 0B, 0C, 05, 05, 05, 05, 05).
I am able to check all the scenarios successfully but when it comes to copying the data to output the result, it doesn't seem to copy correctly.
It seems like the arrayFillGenericNonAtomic() data that was filled before the arrayCopyRepackNonAtomic() is called is still stuck in the output byte array and doing the arrayCopyRepackNonAtomic() is not copying the data properly.
The output byte array format I am using is for the first element in the array to carry the indicator (in byte representation) of the amount of data that has been processed for output (e.g. output[outputOffset] = (byte) 0x10 means 16 data element afterwards that has been processed). Subsequent data elements in the output byte array after the first element contains the processed data.
An example of the problem is I am trying to PKCS7 decode A0, B0, C0, D0, E0, 04, 04, 04, 04 and the outcome should be 05, A0, B0, C0, D0, E0 (where the 05 represents following 5 bytes are processed) but I am getting 05, 04, 04, 04, 04 .. instead.
How do I fix the problem of the arrayCopyRepackNonAtomic() not working as expected ?
I am testing the code on an actual JavaCard 2.2.2 and JavaCard 3.0.4 compatible smart card that is in OP_READY mode.
public static void process(byte[] input, short offset, short length,
        short blockSize, byte[] output, short outputOffset, short mode) {
    if (mode == MODE_DECODE) {
        // Data length must be >= blocksize and have to have be a modulus of 0 size.
        if ((length >= blockSize) && ((length % blockSize) == 0)) {
            output[outputOffset] = (byte) length;
            ArrayLogic.arrayFillGenericNonAtomic(output, (short) (outputOffset + 1), (short) (length - 1), output, outputOffset);
            if (ArrayLogic.arrayCompareGeneric(input, offset, output, outputOffset, length) == 0x00) {
                // If all bytes are the same, return 0.
                output[outputOffset] = (byte) 0x00;
            } else {
                // Bytes are not all the same, check if the last segment of bytes are padded.
                if (ArrayLogic.arrayCompareGeneric(input, offset, output, outputOffset, (short) (input[(short) (offset + length - 1)] & 0xFF)) == 0x00) {
                    // Padded bytes are found.
                    output[outputOffset] = (byte) (length - input[(short) (offset + length - 1)]);
                    // Unable to copy correctly to output
                    ArrayLogic.arrayCopyRepackNonAtomic(input, offset, (short) (output[outputOffset] & 0xFF), output, (short) (outputOffset + 1)); 
                } else {
                    output[outputOffset] = (byte) length;
                    // Unable to copy correctly to output
                    ArrayLogic.arrayCopyRepackNonAtomic(input, offset, length, output, (short) (outputOffset + 1));
                }
            }
        }
    }
}

The question have been solved and the problems are wrong variable offsets and also handling of byte to short conversions that caused the problem.
Below is a working version that seems to does the padding after some testing for those interested in using it in the future.
public static void process(byte[] input, short offset, short length,
        short blockSize, byte[] workBuff, short buffOffset, byte[] output,
        short outputOffset, short mode) {
    if (mode == MODE_DECODE) {
        // Data length must be >= blocksize and have to have be a modulus of 0 size.
        if ((length >= blockSize) && ((length % blockSize) == 0)) {
            workBuff[buffOffset] = (byte) input[(short) (length + offset - 1)];
            ArrayLogic.arrayFillGenericNonAtomic(workBuff, buffOffset, length, workBuff, buffOffset);
            if (ArrayLogic.arrayCompareGeneric(input, offset, workBuff, buffOffset, length) == 0x00) {
                // If all bytes are the same, return 0.
                output[outputOffset] = (byte) 0x00;
            } else {
                output[outputOffset] = (byte) (offset + length - (workBuff[buffOffset] & 0xFF));
                output[(short) (outputOffset + 1)] = workBuff[buffOffset];
                // Bytes are not all the same, check if the last segment of bytes are padded.
                if (ArrayLogic.arrayCompareGeneric(input, (short) (offset + length - (workBuff[buffOffset] & 0xFF)), workBuff, buffOffset, (short) (workBuff[buffOffset] & 0xFF)) == 0x00) {
                    // Padded bytes are found.
                    output[outputOffset] = (byte) (length - input[(short) (offset + length - 1)]);
                    ArrayLogic.arrayCopyRepackNonAtomic(input, offset, (short) output[outputOffset], output, (short) (outputOffset + 1));
                } else {
                    // Padded bytes are not found.
                    output[outputOffset] = (byte) length;
                    ArrayLogic.arrayCopyRepackNonAtomic(input, offset, length, output, (short) (outputOffset + 1));
                }
            }
        }
    }
}

","Hmm, I don't think thats the only mistake, but your branch is definitly wrong:
// Bytes are not all the same, check if the last segment of bytes are padded.
if (ArrayLogic.arrayCompareGeneric(input, offset, output, outputOffset, (short) (input[(short) (offset + length - 1)] & 0xFF)) == 0x00) {

You are comparing the right length, but the wrong offsets.
I'm not understanding what the else-case should do in your method. Should throw an error if the padding was wrong?
","170","<padding><smartcard><javacard><pkcs#7>","0","1","1","2016-02-05 03:57:01","35127239","3","1","476467","","2016-02-05 03:57:01","2016-02-01 06:16:14",""
"40187733","Calculate message digest for TSA for CMS_sign prior to CMS_final","I have code to create CMS signature. It worked well now I need to add trusted timestamping.
BIO *data_output = BIO_new(BIO_s_mem());
const EVP_MD *sign_md = EVP_get_digestbyname(digest_name);

cms = CMS_sign(NULL, NULL, NULL, bio_in, flags);
BOOST_ASSERT(cms);

for (size_t i = 0; i < m_signers.size(); i++) {
    int tflags = flags;

    SignerInfo si = m_signers[i];

    CMS_SignerInfo *signer_info = CMS_add1_signer(cms,
        si.m_x509, si.m_privateKey, sign_md, tflags);
    BOOST_ASSERT(signer_info != NULL);

    for (int c = 0; c < sk_X509_num(si.m_ca); c++) {
        X509* cert = sk_X509_value(si.m_ca, c);
        BOOST_ASSERT(CMS_add0_cert(cms, cert) != 0);
    }
}

BOOST_ASSERT(CMS_final(cms, bio_in, NULL, flags) != 0);
BOOST_ASSERT(i2d_CMS_bio_stream(data_output, cms, bio_in, flags) != 0);

In order to talk to TSA, I need the digest value but there is no way to get the digest value until CMS_final is called. I could not locate the answer anywhere.
","id-aa-timeStampToken is an unsigned attribute. If your implementation has no hooks to modify the message afterwards you can do it in two passes. Do call final, get the hash and send it to the TSA. Then build a second identical CMS and add an unsigned id-aa-timeStampToken attibute (OID 1.2.840.113549.1.9.16.2.14). Paste the timestampToken in there and call final.
Be aware that using a timestamp usually requires a SIGNED attribute signing-time Pkcs9SigningTime (OID 1.2.840.113549.1.9.5) so save the time used on the first pass to get two identical CMS messages.
It is a bit cheap but it does the job. If you neeed to ask for a pin on a Smart card it will ask two times. 
","163","<security><openssl><signing><pki><pkcs#7>","2","0","1","2019-02-12 15:28:02","","1","2","608639","","2016-10-22 16:38:16","2016-10-22 02:27:03",""
"55827612","How to remove validity unknown icon from signature field using itextsharp C#?","How to remove validity unknown icon(question mark) from signature field before calculating the hash of pdf. 
Below code that I am using to create signature field.
PdfStamper stamper = PdfStamper.CreateSignature(reader, os, '\0');
PdfSignatureAppearance appearance = stamper.SignatureAppearance;
appearance.SignDate = DateTime.Now.AddMinutes(15);
appearance.Reason = reasonForSign;
appearance.Contact = """";
appearance.Location = locationToShowOnSignatureStamp;
appearance.Acro6Layers = false;
appearance.Image = null;
appearance.SignatureRenderingMode = PdfSignatureAppearance.RenderingMode.DESCRIPTION;
appearance.CertificationLevel = PdfSignatureAppearance.NOT_CERTIFIED;
appearance.SetVisibleSignature(new iTextSharp.text.Rectangle(10, 10, 149, 69), reader.NumberOfPages, ""s1"");


","Your code explicitly requests that icon: you use
appearance.Acro6Layers = false;

This instructs itext to create signature appearances as Adobe Acrobat up to version 5 did. This includes ""layers"" for signatures with positive, inconclusive, or negative validation results. If you use
appearance.Acro6Layers = true;

instead (which is the default), itext creates signatures for which Adobe Acrobat won't show such on-page visualizations of the validation result anymore. 
","162","<c#><itext><digital-signature><acrobat><pkcs#7>","0","1","1","2019-04-24 11:08:24","55828557","0","","1729265","","2019-04-24 11:08:24","2019-04-24 10:13:08",""
"16672801","Error Initializing OpenSSL module in perl","Hi I am a newbie to perl. How to create a pkcs7 signature in perl .Any Example code would be helpful. I tried to use OpenCA::OpenSSL. I got error initializing OpenCA::OpenSSL instance.
Thanks in Advance.......
  My code
$openssl = OpenCA::OpenSSL->new(path=>'/usr/bin/openssl');
my $crl=$openssl->issueCrl(
       CAKEY=>'passbook/key.pem',
       CACERT=>'passbook/certificate.pem',
       PASSWD=>'somepass',
       OUTFILE=>'passbook/signature',
       OUTFORM=>'DER',
);

The error message i got was 
Use of uninitialized value $initial_skip in concatenation (.) or string at
/usr/local/share/perl/5.14.2/Parse/RecDescent.pm line 3054.""

","","153","<perl><encryption><openssl><perl-module><pkcs#7>","1","","0","2013-05-21 15:19:34","","0","","2045980","","2013-05-21 15:19:34","2013-05-21 14:41:11",""
"47828731","CMS_verify fails if signature issuer differs from certificate issuer","When trying to verify a signed data structure using
openssl smime -verify -in EF_SOD.PEM -inform pem -noverify

I get this error:
Verification failure
10280:error:2107C080:PKCS7 routines:PKCS7_get0_signers:signer certificate not found:pk7_smime.c:378:

It seems that the identity of the signature issuer is not literally the same as the identity of the embedded certificate issuer.
These are the two issuers:
issuer: CN=CSCAEC_BE_3, OU=FEDERAL PUBLIC SERVICE FOREIGN AFFAIRS BELGIUM, O=KINGDOM OF BELGIUM, C=BE
issuer: C=BE, O=KINGDOM OF BELGIUM, OU=FEDERAL PUBLIC SERVICE FOREIGN AFFAIRS BELGIUM, CN=CSCAEC_BE_3

According to RFC 5280, the two names have have the exact same attributes in the exact same order.
Does this mean the data structure is corrupt?
Originally, I want to use CMS_verify in code to do the verification:
nRet = CMS_verify(pCMS, certs, NULL, NULL, NULL, CMS_NO_SIGNER_CERT_VERIFY);

Is there a way to parametrise the function so that it will be successful?
Thank you!
","","153","<security><openssl><pkcs#7>","0","","0","2017-12-15 15:25:19","","2","","608639","","2017-12-15 15:25:19","2017-12-15 08:49:22",""
"53205272","How to get algorithm field from signed PE PKCS#7 block","I've got PKCS#7 content extracted from PE file. 
The first part before the certificate chain (goes from the beginning up to the cert: label), contains info about the file integrity.
In particular, the hash that matches the file hash and the algorithm that use to generate this hash (worth FA0FE65F973A5709DC04EE18ABEF353EBEFEA669 and sha1 correspondingly on the example listed below). 
I'm using openssl and I'd like to extract the hash algorithm type from the X509 format. I tried something like printing md_algs struct from debugger, and hopefully find the field algorithm worth 1.3.14.3.2.26 but that's what I saw.. 
p *(Pkcs7->d.sign->md_algs)
(stack_st_X509_ALGOR) $6 = {
  stack = {
     num = 1
     data = 0x00000001024457f0
     sorted = 0
     num_alloc = 4
     comp = 0x0000000000000000
  }
}

Where can I see the algorithm field ? 
P.s. here's the relevant part of the pkcs7 struct : 
PKCS7: 
   type: pkcs7-signedData (1.2.840.113549.1.7.2)
   d.sign: 
     version: 1
     md_algs:
       algorithm: sha1 (1.3.14.3.2.26)
       parameter: NULL
     contents: 
       type: undefined (1.3.6.1.4.1.311.2.1.4)
     d.other: SEQUENCE:
        0:d=0  hl=2 l=  60 cons: SEQUENCE          
        2:d=1  hl=2 l=  23 cons:  SEQUENCE          
        4:d=2  hl=2 l=  10 prim:   OBJECT            :1.3.6.1.4.1.311.2.1.15
       16:d=2  hl=2 l=   9 cons:   SEQUENCE          
       18:d=3  hl=2 l=   1 prim:    BIT STRING        
       21:d=3  hl=2 l=   4 cons:    cont [ 0 ]        
       23:d=4  hl=2 l=   2 cons:     cont [ 2 ]        
       25:d=5  hl=2 l=   0 prim:      cont [ 0 ]        
       27:d=1  hl=2 l=  33 cons:  SEQUENCE          
       29:d=2  hl=2 l=   9 cons:   SEQUENCE          
       31:d=3  hl=2 l=   5 prim:    OBJECT            :sha1
       38:d=3  hl=2 l=   0 prim:    NULL              
       40:d=2  hl=2 l=  20 prim:   OCTET STRING      [HEX DUMP]:FA0FE65F973A5709DC04EE18ABEF353EBEFEA669
     cert:
      cert_info: 
      ...

thanks 
","Defined in pkcs7.h, the md_algs attribute that you are inspecting is a stack of X509_ALGOR instances:
typedef struct pkcs7_signed_st {
    ASN1_INTEGER *version;      /* version 1 */
    STACK_OF(X509_ALGOR) *md_algs; /* md used */
    STACK_OF(X509) *cert;       /* [ 0 ] */
    STACK_OF(X509_CRL) *crl;    /* [ 1 ] */
    STACK_OF(PKCS7_SIGNER_INFO) *signer_info;
    struct pkcs7_st *contents;
} PKCS7_SIGNED;

It can be safely accessed via the OpenSSL Stack API, for example using the function sk_X509_ALGOR_value() to inspect its element(s).
X509_ALGOR itself is defined in x509.h:
struct X509_algor_st {
    ASN1_OBJECT *algorithm;
    ASN1_TYPE *parameter;
} /* X509_ALGOR */ ;

The information you are looking for is stored in the property algorithm, which you can inspect using, for example, OBJ_obj2txt().
Tying it together, to get a textual representation of the first algorithm in the stack, you could do something like this:
char tbuf[20];
X509_ALGOR *algor = sk_X509_ALGOR_value(Pkcs7->d.sign->md_algs, 0);
int res = OBJ_obj2txt(tbuf, sizeof tbuf, algor->algorithm, 0);

After that, tbuf should contain a value like ""sha1"" and res contains the length of that string. For programmatic purposes, a function like OBJ_obj2nid() is probably more useful.

The debugger did not give you this information because the data field in the stack element is not strongly typed. You would have to cast it yourself to indicate that it is an array of pointers to X509_ALGOR structs. The OpenSSL Stack API provides you a set of macros that do the casting for you and access the array that way. And then, the ASN1_OBJECT that you end up with is hard to inspect or interpret in the debugger since it is just a bunch of bytes representing an object id in ASN.1 format.
","152","<encryption><openssl><sha><pkcs#7><asn1>","1","3","1","2018-11-08 19:18:23","53212465","0","","","","","2018-11-08 09:56:13",""
"18182604","DES Algorithm Identifier","Can somebody please give me an authoritative reference that 1.3.14.3.2.7 is the DES algorithm identifier used in S/MIME? I figured the number by sending a DES encrypted email and viewing the P7M file of the email.
","The OID repository has it here. It parses it as:
{ iso(1) identified-organization(3) oiw(14) secsig(3) algorithm(2) }
and it oddly describes it as ""Voice encryption using DES (56 bit) in CBC mode and 512-bit DH-group"".
For the record, oiw stands for the OSI Implementor's Working Group.
","141","<des><pkcs#7><smime>","0","0","2","2013-08-15 04:49:10","18246504","0","","","","","2013-08-12 08:34:41",""
"18182604","DES Algorithm Identifier","Can somebody please give me an authoritative reference that 1.3.14.3.2.7 is the DES algorithm identifier used in S/MIME? I figured the number by sending a DES encrypted email and viewing the P7M file of the email.
","This list of OIDs OIDs Used with S/MIME is maintained by the Internet Mail Consortium and it is referenced in RFC 2633 p. 7. It clearly mentions that the OID for the DES algorithm in CBC mode is 1.3.14.3.2.7.
","141","<des><pkcs#7><smime>","0","0","2","2013-08-15 04:49:10","18246504","0","","","","","2013-08-12 08:34:41",""
"47884939","How to create a CMS signature using a Luna SA (HSM)","I am trying to create a CMS signature from a Luna SA (HSM) from C# in order to create an x-pkcs7 s/mime message.
What singing mechanism should I be using?
Regards
","","135","<c#><signing><pkcs#7>","3","","0","2017-12-19 10:52:53","","0","","98579","","2017-12-19 10:52:53","2017-12-19 10:31:29",""
"47061020","Extract ICP-Brasil information from pkcs7 file","Just Sharing my code:
Sorry for poor error treatment.
I have spend some time to get here. Its amazing that is easier to find certificate layout documentation in Receita Federal do Brasil then the ITI itself.
Older certificates have different layouts. I will invest a little time searching for more documentation.
If someone have the oficial documentation, please share too.
         public static List<Certificado> ListarSignatariosArquivo(byte[] arquivo)
    {
        /* http://www.receita.fazenda.gov.br/acsrf/LeiautedeCertificadosdaSRF.pdf
         * 2.2.5. Subject Alternative Name
         *   Campos Obrigatórios
         *      OID = 2.16.76.1.3.1 com o seguinte conteúdo:
         *           Nas primeiras 8 (oito) posições, a data de nascimento da pessoa física titular do certificado, no formato ddmmaaaa; 
         *           nas 11 (onze) posições subseqüentes, o número de inscrição no Cadastro de Pessoa Física (CPF) da pessoa física titular do certificado;
         *           nas 11 (onze) posições subseqüentes, o número de Identificação Social da pessoa física titular do certificado - NIS (PIS, PASEP ou CI);
         *           nas 15 (quinze) posições subseqüentes, o número do Registro Geral - RG da pessoa física titular do certificado; 
         *           nas 6 (seis) posições subseqüentes, as siglas do órgão expedidor do RG e respectiva UF.
         *
         *       OID = 2.16.76.1.3.5 com o seguinte conteúdo:
         *           Nas primeiras 12 (onze) posições, o número de inscrição do Título de Eleitor da pessoa física titular do certificado;
         *           nas 3 (três) posições subseqüentes, o número correspondente a Zona Eleitoral;
         *           nas 4 (quatro) posições seguintes, o número correspondente a Seção;
         *           nas 22 (vinte e duas) posições subseqüentes, o nome do município e a UF do Título de Eleitor.
         *
         *       OID = 2.16.76.1.3.6 com o seguinte conteúdo:
         *           Nas 12 (doze) posições, o número do Cadastro Especifico do INSS (CEI) da pessoa física titular do certificado.
         *
         *   Campos Opcionais
         *       OID = 2.16.76.1.4.x.y.z com o seguinte conteúdo:
         *           Tamanho variável correspondente ao número de habilitação ou identificação profissional emitido por conselho de classe ou órgão competente.
         *           A AC Raiz, por meio do documento ATRIBUIÇÃO DE OID DA ICP-BRASIL (DOC ICP-04-01) regulamentará a correspondência de cada conselho de classe
         *           ou órgão competente ao conjunto de OID acima definido.
         *
         *       OID = 1.3.6.1.4.1.311.20.2.3 com o seguinte conteúdo:
         *           Este campo Principal Name contém a Identificação do endereço de login do titular do certificado no diretório Active Direct (AD) Microsoft.
         *           O conjunto de informações definido em cada campo OtherName deve ser armazenado como uma cadeia de caracteres do tipo ASN.1 OCTET STRING,
         *           com exceção do campo Principal Name cuja cadeia de caracteres é do tipo UTF-8 String.
         *
         *   Os seguintes campos são de preenchimento obrigatório:
         *   - Nome;
         *   - CPF;
         *   - Data de nascimento; e
         *   - Email. 
         */


        CmsSignedData signedData = null;
        List<Certificado> listaCpf = new List<Certificado>();
        try
        {
            signedData = new CmsSignedData(arquivo);
        }
        catch (CmsException)
        {
            return listaCpf;
        }
        catch (Exception e)
        {
            throw new IntegridadeArquivoException(""Arquivo corrompido."", e);
        }

        if (signedData != null)
        {
            IX509Store store = signedData.GetCertificates(""Collection/Certificate"");


            SignerInformationStore signers = signedData.GetSignerInfos();

            foreach (var it in signers.GetSigners())
            {
                SignerInformation signer = (SignerInformation)it;

                foreach (var certificado in store.GetMatches(signer.SignerID))
                {

                    X509Certificate x509cert = (X509Certificate)certificado;

                    IList tmp;
                    tmp = x509cert.SubjectDN.GetValueList(X509Name.CN);
                    string nome = tmp.Count > 0 ? tmp[0].ToString() : """";
                    tmp = x509cert.IssuerDN.GetValueList(X509Name.CN);
                    string autoridadeCertificadora = tmp.Count > 0 ? tmp[0].ToString() : """";
                    DateTime dtValidadeCertificado = x509cert.NotAfter;



                    Nullable<DateTime> dtNascimento = null;
                    string cpf = null;
                    string rg = null;
                    string orgaoExpedidorRg = null;

                    string pessoaFisicaOid = ""2.16.76.1.3.1"";
                    foreach (ArrayList a in x509cert.GetSubjectAlternativeNames())
                    {

                        string conteudo = a.ToArray()[1].ToString();
                        Match moid = Regex.Match(conteudo, @""\[[0-9\.]*"");
                        string oid = moid.Success ? moid.Value.Replace(""["", string.Empty) : """";
                        if (pessoaFisicaOid.Equals(oid))
                        {
                            Match mvalor = Regex.Match(conteudo, ""#[0-9a-fA-F]+"");
                            string valor = mvalor.Success ? mvalor.Value.Replace(""#"", string.Empty) : """";
                            //converter string hexadecimal em string decimal.
                            valor = FromHexToString(valor);

                            int i = 0;
                            dtNascimento = DateTime.ParseExact(valor.Substring(i, 8),""ddMMyyyy"", CultureInfo.InvariantCulture);
                            i += 8;
                            cpf = valor.Substring(i, 11);
                            i += 22;
                            rg = valor.Substring(i, 15);
                            i += 15;
                            orgaoExpedidorRg = valor.Substring(i, 6);
                        }
                    }


                    listaCpf.Add(new Certificado {
                        Nome = nome,
                        DtNascimento = dtNascimento,
                        AutoridadeCertificadora = autoridadeCertificadora,
                        DtValidadeCertificado = dtValidadeCertificado,
                        Cpf = cpf,
                        Rg = rg,
                        OrgaoExpedidorRg = orgaoExpedidorRg
                    });
                }
            }

        }
        return listaCpf;
    }
    public static string FromHexToString(string hex)
    {
        byte[] raw = new byte[hex.Length / 2];
        for (int i = 0; i < raw.Length; i++)
        {
            raw[i] = Convert.ToByte(hex.Substring(i * 2, 2), 16);
        }
        return Encoding.ASCII.GetString(raw);
    }

","","134","<c#><bouncycastle><pkcs#7>","0","","0","2017-11-01 18:01:27","","2","","","","","2017-11-01 18:01:27",""
"53851135","How to verify pkcs7 signature using public key","I am very new to using certificates and signatures, I have got public key, form a certificate given to me by my client, they also gave me with a sample soap xml containing signature tab, which starts with ----begin pkcs7---- and ends with -----end pkcs7--- in between there is like encoded string signature. How should i verify  the signature using java? 
","","128","<certificate><digital-signature><bouncycastle><signature><pkcs#7>","0","","0","2018-12-19 12:18:32","","0","0","","","","2018-12-19 12:18:32",""
"39214891","Obtaining PKCS7 data length with OpenSSL","I have some PKCS7 data which I can read like this with OpenSSL:
$ openssl asn1parse -i -inform der -in data.dat
0:d=0  hl=4 l=16208 cons: SEQUENCE
4:d=1  hl=2 l=    9 prim:  OBJECT            :pkcs7-signedData
.. more ..

I can load it in code like so:
// buf contains the raw data, len the length
BIO *bio = BIO_new_mem_buf(buf, len);

PKCS7 *pkcs7 = d2i_PKCS7_bio(bio, NULL);
if (!pkcs7) {
    // die
}
printf(""Success!"");

This works fine and I can successfully obtain signer information etc.  However I'd like to obtain the length value as parsed from the input data.  In my example this was 16208, seen in the second line of the ASN1 output.
I noticed there is a length attribute to the PKCS7 structure (see include/openssl/pkcs7.h) but pkcs7->length is always zero when I print it.
How can I obtain the length of the overall sequence which contains PKCS7 signed data?
","","122","<c><openssl><pkcs#7>","1","","0","2016-08-29 20:44:20","","0","","","","","2016-08-29 20:44:20",""
"55682084","Creating PaDES signature","I am trying to create a PaDES signature using the following workflow:

PDF is prepared for signing and hash is calculated in the browser
hash is sent to the backend
detached CaDES signature is formed on the backend
detached CaDES is sent back to the browser where PaDES signature is assembled

We have a working example of PDF signature that works like this:

PDF is prepared and hash is calculated in the browser
hash is sent to the backend
detached PKCS7 signature is made on the backend (by using BouncyCastle lib)
detached PKCS7 is sent back to the browsere where PDF signature is assembled

This is working fine.
However, now instead of BouncyCastle we are using DSS library on the backend because we are trying to create a PaDES signature. So, DSS lib is creating detached CaDES (which should be the same as detached PaDES) instead of PKCS7. However, when the signature is assembled in the browser the signature is invalid (even the certificate info isn't visible).
From my understanding CaDES is an extension to PKCS7 so this approach should work. 
I'm first trying to understand if something's wrong with our approach and if not, I'll try to share the code we're using to make a detached CaDES signature to see if something's wrong there.
","I figured it out. It was that the size of detached CaDES signature is more than 2 times bigger then detached PKCS7 signature, so we weren't leaving enough space for the signature to fit in, so the signature was basically overwritting the PDF content. When I increased the space for the signature everything is working as it should
","120","<pdf><digital-signature><pkcs#7><pades>","0","0","1","2019-04-15 03:37:34","55682291","0","","","","","2019-04-15 03:02:09",""
"54691889","Attach PKCS7 Signed data to pdf","using this link iText - Generating PDF hash without certificate chain
I tried creating pdf with an empty signature appearance and also calculated hash using PdfSignature.getRangeStream().I also managed to get this hash signed using bouncycastle.
This answer doesn't explains briefly how signing is performed, please explain if possible as when using this code I have attached signed data to pdf but the signatures are not getting validated properly. 
Error is:
Document is altered or corrupted or altered since the signatures are applied.
At least one signature is invalid..
","","118","<pdf><signed><pkcs#7>","0","","0","2019-02-14 14:45:36","","0","","506147","","2019-02-14 14:45:36","2019-02-14 13:45:13",""
"55879757","How to fix Openssl SMIME error :ASN1_get_object:header too long?","I have a .p7s file, that is a PDF signed, which is now broken and i can't open it. When trying to convert it back to PDF i am having issues.
I have tried this repair tool https://www.pdf-online.com/osa/repair.aspx and it was able to give me a PDF, but it looks very bad and i can't read much from it.
I have also tried this command on my Mac:
openssl smime -inform DER -verify -noverify -in ""file.p7s"" -out ""file.pdf""

But i am receiving this error:
Error reading S/MIME message
140735895516104:error:0D07207B:asn1 encoding routines:ASN1_get_object:header too long:/BuildRoot/Library/Caches/com.apple.xbs/Sources/libressl/libressl-22.50.2/libressl/crypto/asn1/asn1_lib.c:152:

Does anybody have an idea of how to properly convert the .p7s back to a .pdf properly or fix the .p7s file so my command above works?
","","115","<pdf><openssl><pkcs#7><smime>","0","","0","2019-04-27 10:48:30","","3","","","","","2019-04-27 10:48:30",""
"46989608","Building a pkcs7 signature in php aleady knowing the signature","My goal is to sign pdf and e-mails on my server, using an USB token on the client side.
So I would like to build a PKCS7 signature in PHP, but the signature will be obtained from the USB token, that's why I can't use openssl pkcs7 implementation.
I have seen something that could be a solution, using Bouncy Castle : create PKCS7 with presigned data using bouncy castle, but I'd like not to use an external implementation.
I have searched for a library that could build the pkcs7 from certificate chain and the signature but I haven't found anything.
","","114","<php><digital-signature><pkcs#7>","1","","0","2017-10-28 12:14:04","","0","","","","","2017-10-28 12:14:04",""
"54362589","Create/Convert to CMS/pkcs7 Certificate from Certificate collection and save it as p7b","I'm trying to convert/Create a PKCS7 ""p7b"" Certificate from signed certificate pem + chain using BouncyCastle or .net Cryptography class
I tried to use only BC without success, so I use BC only to read pem certs and then transform it to an X509Certificate2 object. What I'm looking for at the end is a pem string at the end starting with ""-----BEGIN PKCS7-----"" to save it as p7b file
what have I done..
public void DownloadP7bFile(string certId)
    {
        var records = (DataView)myCertDataSource.Select(DataSourceSelectArguments.Empty);
        var selected = Guid.Parse(certId);

        foreach (DataRow row in records.Table.Rows)
        {
            if (!Guid.Parse(row.Field<Guid>(""cert_id"").ToString()).Equals(selected)) continue;

            var filename = row.Field<string>(""cert_fqdn_main"");
            var certContent2 = row.Field<string>(""certHash_certificate"");
            var certissuer = row.Field<string>(""certHash_issuer"");

            DataTable chaincerts = GetChainCertsFromDB(certissuer);

            //### get pem string from DB to BC cert objects
            Org.BouncyCastle.X509.X509Certificate serverCert = CreateCertObjFromPem(certContent2);
            Org.BouncyCastle.X509.X509Certificate interCert = CreateCertObjFromPem(chaincerts.Rows[0].Field<string>(""cacert_pemhash""));
            Org.BouncyCastle.X509.X509Certificate rootCert = CreateCertObjFromPem(chaincerts.Rows[1].Field<string>(""cacert_pemhash""));

            //### transform to X509Certificate2 object
            System.Security.Cryptography.X509Certificates.X509Certificate2 serverCert2 = new System.Security.Cryptography.X509Certificates.X509Certificate2();
            System.Security.Cryptography.X509Certificates.X509Certificate2 interCert2 = new System.Security.Cryptography.X509Certificates.X509Certificate2();
            System.Security.Cryptography.X509Certificates.X509Certificate2 rootCert2 = new System.Security.Cryptography.X509Certificates.X509Certificate2();
            serverCert2.Import(serverCert.GetEncoded());
            interCert2.Import(interCert.GetEncoded());
            rootCert2.Import(rootCert.GetEncoded());

            //### collect all needed certificates
            var collection = new System.Security.Cryptography.X509Certificates.X509Certificate2Collection();
            collection.Add(rootCert2);
            collection.Add(interCert2);
            collection.Add(serverCert2);

            var pkcs7ContentBytes = collection.Export(System.Security.Cryptography.X509Certificates.X509ContentType.Pkcs7);

            //### Test if pkcs7 can be read ###
            System.Security.Cryptography.Pkcs.SignedCms sigcms = new System.Security.Cryptography.Pkcs.SignedCms();
            sigcms.Decode(pkcs7ContentBytes);
            if (sigcms.Certificates.Count > 0)
            {
                Console.WriteLine(""Aussteller: {0}"", sigcms.Certificates[0].IssuerName.Name);
                Console.WriteLine(""Gültig bis {0}"", sigcms.Certificates[0].NotAfter);
            }
            var sigvar2 = sigcms.Encode();

            var pkcs7Content = Convert.ToBase64String(pkcs7ContentBytes); //das gute
            var certEncodedBytes = Convert.FromBase64String(pkcs7Content);
            var certContent = Encoding.UTF8.GetString(certEncodedBytes);

            var certContent7 = UTF8Encoding.UTF8.GetString(certEncodedBytes);
            var CertContent8 = Convert.ToBase64String(sigvar2);
            var CertContent8Bytes = Convert.FromBase64String(CertContent8);
            var certfromsig = sigcms.Certificates.Export(System.Security.Cryptography.X509Certificates.X509ContentType.Pkcs7);

            //var pkcs7cert = new System.Security.Cryptography.X509Certificates.X509Certificate2(certEncodedBytes);
            //var pkcs7cert2 = new System.Security.Cryptography.X509Certificates.X509Certificate2(sigvar2);
            //System.Security.Cryptography.Pkcs.EnvelopedCms pkcs7Envelop = new System.Security.Cryptography.Pkcs.EnvelopedCms();

            //File.WriteAllBytes(@"""")

            //string utfString = Encoding.UTF8.GetString(pkcs7ContentBytes, 0, pkcs7ContentBytes.Length);
            var memoryStream = new MemoryStream(certEncodedBytes);
            //var cryptostream = new System.Security.Cryptography.CryptoStream(memoryStream);
            //memoryStream.Write(pkcs7ContentBytes, 0, pkcs7ContentBytes.Length);
            var test31 = memoryStream.ToArray();
            var test32 = memoryStream.Read(certEncodedBytes, 0, certEncodedBytes.Length);

            memoryStream.Flush();
            memoryStream.Close();


            //var test30 = DecoderConverter.ConvertX509ToPkcs7(rootCert, interCert, serverCert);

            PerformFileDownload(filename, ""p7b"", pkcs7Content);

            break;
        }
    }

","","112","<certificate><bouncycastle><x509certificate2><pkcs#7><p7b>","0","","0","2019-01-25 09:43:43","","5","","","","","2019-01-25 09:43:43",""
"57370663","How to extract PKCS#1 signature from PKCS#7","I know that PKCS#7 = Certificate + Optional raw data + Signature in PKCS#1 format I need to extract PKCS#1 from a PKCS#7 signature how can I do this in C#. Can I use the bouncy castle to do this, Here is my implementation 
ie. to convert PKCS#7 to ASN.1 and to take the last sequence as it is PKCS#1
Asn1InputStream asn1 = new Asn1InputStream(pkcs7Stream);
Asn1Sequence sequence = (Asn1Sequence)asn1.ReadObject().ToAsn1Object();
var sequenceString = sequence.ToString();
var lastCommaIndex = sequenceString.LastIndexOf("","");
var pkcs1HexStr = sequenceString.Substring(lastCommaIndex + 3).Replace(""]"", string.Empty);

Is there any other eligant way to obtain PKCS#1
","The SignedCms class can do this for you, .NET Core 2.1+ or .NET Framework 4.7.2+:
SignedCms cms = new SignedCms();
cms.Decode(message);
return cms.SignerInfos[0].GetSignature();

Assuming you want the signature from the first signer, of course. (The GetSignature method is what requires net472+)
Other signers or countersigners would also be available, just through different aspects of the object model.
","110","<c#><bouncycastle><pkcs#7><pkcs#1>","2","1","2","2019-08-08 09:31:13","57383548","3","","2487737","","2019-08-06 07:51:31","2019-08-06 07:07:30",""
"57370663","How to extract PKCS#1 signature from PKCS#7","I know that PKCS#7 = Certificate + Optional raw data + Signature in PKCS#1 format I need to extract PKCS#1 from a PKCS#7 signature how can I do this in C#. Can I use the bouncy castle to do this, Here is my implementation 
ie. to convert PKCS#7 to ASN.1 and to take the last sequence as it is PKCS#1
Asn1InputStream asn1 = new Asn1InputStream(pkcs7Stream);
Asn1Sequence sequence = (Asn1Sequence)asn1.ReadObject().ToAsn1Object();
var sequenceString = sequence.ToString();
var lastCommaIndex = sequenceString.LastIndexOf("","");
var pkcs1HexStr = sequenceString.Substring(lastCommaIndex + 3).Replace(""]"", string.Empty);

Is there any other eligant way to obtain PKCS#1
","Thanks, @bartonis for the help and guidance
Here is implementation using bouncy castle
public static byte[] GetRaw(byte[] input)
{
    SignerInfo signerInfo = GetSignerInfo(input);
    return signerInfo?.EncryptedDigest?.GetOctets();
}
private static SignerInfo GetSignerInfo(byte[] input)
{
    Asn1InputStream cmsInputStream = new Asn1InputStream(input);
    Asn1Object asn1Object = cmsInputStream.ReadObject();

    Asn1Sequence asn1Sequence = Asn1Sequence.GetInstance(asn1Object);
    SignedData signedData = GetSignedData(asn1Sequence);
    SignerInfo signerInfo = GetSignerInfo(signedData);
    if (signerInfo?.UnauthenticatedAttributes != null)
    {
        signedData = GetSignerInfo(signerInfo);
        signerInfo = GetSignerInfo(signedData);
    }
    return signerInfo;
}
private static SignerInfo GetSignerInfo(SignedData signedData)
{
    Asn1Encodable[] Asn1Encodables = signedData?.SignerInfos?.ToArray();
    if (Asn1Encodables != null)
    {
        if (Asn1Encodables.Length > 0)
        {
            SignerInfo signerInfo = SignerInfo.GetInstance(Asn1Encodables[0]);
            return signerInfo;
        }
    }
    return null;
}
private static SignedData GetSignedData(Asn1Sequence sequence)
{
    var rootContent = ContentInfo.GetInstance(sequence);
    var signedData = SignedData.GetInstance(rootContent.Content);
    return signedData;
}
private static SignedData GetSignerInfo(SignerInfo signerInfo)
{
    Asn1Encodable[] asn1Encodables = signerInfo.UnauthenticatedAttributes.ToArray();
    foreach (var asn1Encodable in asn1Encodables)
    {
        Asn1Sequence sequence = Asn1Sequence.GetInstance(asn1Encodable);
        DerObjectIdentifier OID = (DerObjectIdentifier)sequence[0];
        if (OID.Id == ""1.2.840.113549.1.9.16.2.14"")
        {
            Asn1Sequence newSequence =Asn1Sequence.GetInstance(Asn1Set.GetInstance(sequence[1])[0]);
            SignedData signedData = GetSignedData(newSequence);
            return signedData;
        }
    }
    return null;
}

","110","<c#><bouncycastle><pkcs#7><pkcs#1>","2","0","2","2019-08-08 09:31:13","57383548","3","","2487737","","2019-08-06 07:51:31","2019-08-06 07:07:30",""
"48474642","how to convert this java pkcs7gen data signing method to javascript?","I am confused with how to convert this java code to javascript this is for signing data. i am confused with what this bouncycastle and i havent found any replacement for this code in javascript nodejs.
It is working fine in java but this process of creating this is to sign my data and the pass it to 3rd party API but my system is in javascript but they have this method of signing the data which i am not able to find the replacement.
package pkcs7gen;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.Security;
import java.security.cert.CertStore;
import java.security.cert.Certificate;
import java.security.cert.CollectionCertStoreParameters;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Enumeration;

import org.bouncycastle.cms.CMSProcessableByteArray;
import org.bouncycastle.cms.CMSSignedData;
import org.bouncycastle.cms.CMSSignedDataGenerator;
import org.bouncycastle.cms.CMSTypedData;
import org.bouncycastle.util.encoders.Base64;
import org.springframework.stereotype.Service;

@Service
public class Pkcs7gen {


    final String SIGNATUREALGO = ""SHA1withRSA"";

    byte[] signPkcs7(final byte[] content, final CMSSignedDataGenerator generator) throws Exception {

        CMSTypedData cmsdata = new CMSProcessableByteArray(content);
        CMSSignedData signeddata = generator.generate(cmsdata, true);
        return signeddata.getEncoded();
    }

    public static void main(String[] args) {
        try {
            String data = getSignature(args[0]);
            System.out.println(data);
        }
        catch (Exception exc) {
            // TODO: handle exception
        }
    }

    public static String getSignature (String content) throws Exception{

        KeyStore keystore = KeyStore.getInstance(""jks"");
        InputStream input = new FileInputStream(""./keystore.jks"");
        try {
            char[] password= ""password"".toCharArray();
            keystore.load(input, password);
        } catch (IOException e) {
        } finally {


        Enumeration e = keystore.aliases();
        String alias = """";

        if(e!=null)
        {
            while (e.hasMoreElements())
            {
                String  n = (String)e.nextElement();
                if (keystore.isKeyEntry(n))
                {
                    alias = n;
                }
            }
        }
        PrivateKey privateKey=(PrivateKey) keystore.getKey(alias, ""password"".toCharArray());

        X509Certificate myPubCert=(X509Certificate) keystore.getCertificate(alias);
        byte[] dataToSign=content.getBytes();
        CMSSignedDataGenerator sgen = new CMSSignedDataGenerator();
        Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider ());
        sgen.addSigner(privateKey, myPubCert,CMSSignedDataGenerator.DIGEST_SHA1);
        Certificate[] certChain =keystore.getCertificateChain(alias);
        ArrayList certList = new ArrayList();
        CertStore certs = null;
        for (int i=0; i < certChain.length; i++)
            certList.add(certChain[i]);
        sgen.addCertificatesAndCRLs(CertStore.getInstance(""Collection"", new CollectionCertStoreParameters(certList), ""BC""));
        CMSSignedData csd = sgen.generate(new CMSProcessableByteArray(dataToSign),true, ""BC"");
        byte[] signedData = csd.getEncoded();
        byte[] signedData64 = Base64.encode(signedData);
        return new String(signedData64);
    }

}
}

","","105","<rsa><sha1><private-key><sign><pkcs#7>","0","","0","2018-01-27 10:03:26","","3","","","","","2018-01-27 10:03:26",""
"51671217","Why ComputeSignature in .Net Framework and .Net Core do different result","I have problem.
        var contentInfo = new ContentInfo(message);
        var signedCms = new SignedCms(contentInfo);
        var cmsSigner = new CmsSigner(certificate);

        signedCms.ComputeSignature(cmsSigner);
        data = signedCms.Encode();

This code in .Net Framework 4.7 and in .Net Core 2.1 do different result...
My message length is 73 bytes
result in .Net Framework - 1520 bytes
result in .Net Core - 1523 bytes
Why?
","On .NET Framework, if your .exe is targeting 4.7 or older then new CmsSigner(cert) indicates that the signer should use SHA-1 as their digest, at 4.7.1 and higher the default algorithms changed to SHA-2-256.
On .NET Core 2.1 the default is already SHA-2-256.
You can change either of them to whatever digest algorithm you like by setting the DigestAlgorithm property of CmsSigner.  e.g. cmsSigner.DigestAlgorithm = new Oid(""2.16.840.1.101.3.4.2.1""); now makes both of them use SHA-2-256.
Additionally, .NET Framework is encoding the RSA signature algorithm identifier as { id-rsaEncryption, NULL } and .NET Core is encoding it as { id-rsaEncryption } (omitting the optional second value).  This part doesn't change the semantic interpretation of the content, but means that when using the same digest algorithm on both, they still won't come out to the same length.

The DER encoding of the SHA-2-256 algorithm identifier is two bytes longer than the DER encoding of the SHA-1 identifier (assuming that the parameters value for SHA-2-256 is omitted, and for SHA-1 it is NULL).  This gets written down twice (+4 to core), then the difference in how the RSA signature algorithm identifier is represented makes the .NET Core version 2 bytes smaller (net: +2 to core)
The reason that you see a three byte difference, instead of two, is that some portion of your document structure ends up passing one of the thresholds where the length prefix (which is variable length) needs to gain an extra byte to hold the value.  Those points are the standard ""byte boundaries"" (255 -> 256, 65535 -> 65536, etc) in addition to 127 -> 128. Your SignerInfo block is likely 254 or 255 bytes on your .NET Framework document, and crosses over to 256 or 257 due to the longer identifier value for SHA-2-256.
","105","<.net><.net-core><pkcs#7>","2","4","2","2018-08-07 09:29:16","","0","1","6535399","","2018-08-03 15:36:41","2018-08-03 11:04:32",""
"51671217","Why ComputeSignature in .Net Framework and .Net Core do different result","I have problem.
        var contentInfo = new ContentInfo(message);
        var signedCms = new SignedCms(contentInfo);
        var cmsSigner = new CmsSigner(certificate);

        signedCms.ComputeSignature(cmsSigner);
        data = signedCms.Encode();

This code in .Net Framework 4.7 and in .Net Core 2.1 do different result...
My message length is 73 bytes
result in .Net Framework - 1520 bytes
result in .Net Core - 1523 bytes
Why?
","I resolve my problem using BouncyCastle.NetCore in method ""ComputeSignature"" (work in Debian 9 with .Net Core 2.0).
Result length is 2537 bytes, but external application working good with this signature.
    public static byte[] ComputeSignature(byte[] message, string PrivateKeyPath, string password, string CertPath)
    {
        try
        {
            // Load end certificate and signing key
            var signerCert = ReadCertFromFile(PrivateKeyPath, password, out AsymmetricKeyParameter key);

            // Read CA cert
            var caCert = ReadCertFromFile(CertPath);
            var certChain = new X509Certificate[] { caCert };

            var result = SignWithSystem(
              message,
              key,
              signerCert,
              certChain);
            return result;
        }
        catch (Exception ex)
        {
            Console.WriteLine(""Failed : "" + ex.ToString());
            return null;
        }
    }

    protected static byte[] SignWithSystem(byte[] data, AsymmetricKeyParameter key, X509Certificate cert, X509Certificate[] chain)
    {
        var generator = new CmsSignedDataGenerator();
        // Add signing key
        generator.AddSigner(
          key,
          cert,
          ""2.16.840.1.101.3.4.2.1""); // SHA256 digest ID
        var storeCerts = new List<X509Certificate>
        {
            cert // NOTE: Adding end certificate too
        };
        storeCerts.AddRange(chain); // I'm assuming the chain collection doesn't contain the end certificate already
                                    // Construct a store from the collection of certificates and add to generator
        var storeParams = new X509CollectionStoreParameters(storeCerts);
        var certStore = X509StoreFactory.Create(""CERTIFICATE/COLLECTION"", storeParams);
        generator.AddCertificates(certStore);

        // Generate the signature
        var signedData = generator.Generate(
          new CmsProcessableByteArray(data),
          false); // encapsulate = false for detached signature
        return signedData.GetEncoded();
    }

    public static X509Certificate ReadCertFromFile(string strCertificatePath)
    {
        // Create file stream object to read certificate
        using (var keyStream = new FileStream(strCertificatePath, FileMode.Open, FileAccess.Read))
        {
            var parser = new X509CertificateParser();
            return parser.ReadCertificate(keyStream);
        }
    }

    // This reads a certificate from a file.
    // Thanks to: http://blog.softwarecodehelp.com/2009/06/23/CodeForRetrievePublicKeyFromCertificateAndEncryptUsingCertificatePublicKeyForBothJavaC.aspx
    public static X509Certificate ReadCertFromFile(string strCertificatePath, string strCertificatePassword, out AsymmetricKeyParameter key)
    {
        key = null;
        // Create file stream object to read certificate
        using (var keyStream = new FileStream(strCertificatePath, FileMode.Open, FileAccess.Read))
        {
            // Read certificate using BouncyCastle component
            var inputKeyStore = new Pkcs12Store();
            inputKeyStore.Load(keyStream, strCertificatePassword.ToCharArray());

            var keyAlias = inputKeyStore.Aliases.Cast<string>().FirstOrDefault(n => inputKeyStore.IsKeyEntry(n));

            // Read Key from Aliases  
            if (keyAlias == null)
                throw new NotImplementedException(""Alias"");
            key = inputKeyStore.GetKey(keyAlias).Key;
            //Read certificate into 509 format
            return (X509Certificate)inputKeyStore.GetCertificate(keyAlias).Certificate;
        }
    }

","105","<.net><.net-core><pkcs#7>","2","0","2","2018-08-07 09:29:16","","0","1","6535399","","2018-08-03 15:36:41","2018-08-03 11:04:32",""
"27900089","Verification of pdf integrity fail","I'm trying to verify via bash commands the integrity of a pdf file.
Using dd I extracted the signedContent and the pkcs7 detached object of the pdf.
Then I decoded the pkcs via
xxd -r -p pkcs7_extracted > pkcs7_extracted.bin

openssl asn1parse -inform DER <pkcs7_extracted.bin >pkcs7_extracted_decoded

from the decoded pkcs7 I got some useful information as
 0:d=0  hl=4 l=5498 cons: SEQUENCE         
 4:d=1  hl=2 l=   9 prim: OBJECT            :pkcs7-signedData
 15:d=1  hl=4 l=5483 cons: cont [ 0 ]        
 19:d=2  hl=4 l=5479 cons: SEQUENCE          
 23:d=3  hl=2 l=   1 prim: INTEGER           :01
 26:d=3  hl=2 l=  15 cons: SET               
 28:d=4  hl=2 l=  13 cons: SEQUENCE          
 30:d=5  hl=2 l=   9 prim: OBJECT            :sha256
 41:d=5  hl=2 l=   0 prim: NULL              
 43:d=3  hl=2 l=  11 cons: SEQUENCE          
 ...
 5154:d=7  hl=2 l=   9 prim: OBJECT            :contentType
 5165:d=7  hl=2 l=  11 cons: SET               
 5167:d=8  hl=2 l=   9 prim: OBJECT            :pkcs7-data
 5178:d=6  hl=2 l=  47 cons: SEQUENCE          
 5180:d=7  hl=2 l=   9 prim: OBJECT            :messageDigest
 5191:d=7  hl=2 l=  34 cons: SET               
 5193:d=8  hl=2 l=  32 prim: OCTET STRING      [HEX DUMP]:18B399D208A08815DDF23C93B1B63B13757A6AA24B1932569D7A69D0DB3A34C2
 5227:d=5  hl=2 l=  13 cons: SEQUENCE          
 5229:d=6  hl=2 l=   9 prim: OBJECT            :sha256WithRSAEncryption
 5240:d=6  hl=2 l=   0 prim: NULL              
 5242:d=5  hl=4 l= 256 prim: OCTET STRING      [HEX DUMP]:8F4B21914173EC57E6B0533BB5E04FB7054F23AC299C1BDBF589ED164A3EABB611727BE9117AAC3161D9C18DCA08BD113DD3AA90E5922009FA12BA59E7F6587E81CD79BDED09F862C2C76F35D950926F1A31A3DCCE999A52DCE0C7F67D081E81A44397E8AF96A1051B8E51F2E2271221B06D05C9895E1846B1DBE02B558F5B9EF97C7EB0FF9A7C71A9764D5E205900818F07E82027D79D3F9A5AA72B3A0CF131F1B890D0BCBF3C4DD8A0229FABE15F6C2CA0CE079EB925B3998A1A6190596A88D8F07C1C12B8750636E69108E30E643A653B285A400080C9C5590C112451F6D69BAFC2686D6F1107B37A5DB36B9F797C49E61D4B44E62E17DD541778DE763AC5
 5502:d=0  hl=2 l=   0 prim: EOC              

in particular I notice that the messageDigest field is equal to the calculated digest of the signedContent obtained using the ByteRange.
I've so extracted the encrypted hash, decrypted it with my publickey and decoded again with asn1 command.
dd if=pkcs7_extracted.bin of=extracted.sign.bin bs=1 skip=$[ 5242 + 4 ] count=256

#decrypt

openssl rsautl -verify -pubin -inkey publickey.pem < extracted.sign.bin > verified.bin

#decode of result
openssl asn1parse -inform der -in verified.bin

the result is this object
0:d=0  hl=2 l=  49 cons: SEQUENCE          
2:d=1  hl=2 l=  13 cons: SEQUENCE          
4:d=2  hl=2 l=   9 prim: OBJECT            :sha256
15:d=2  hl=2 l=   0 prim: NULL              
17:d=1  hl=2 l=  32 prim: OCTET STRING      [HEX DUMP]:EBAA31519CD0CCA793FEC34AA6BDD8DFA5E4D5F63BA4711F6C8ECE5D20FEF393

I'm pretty sure decryption worked since the object is correctly decoded and as I expected contains a sha256 object but as you can see the digest value is different...
Am I looking in the wrong place? I've no more idea how to verify the integrity.
In addition Acrobat of course validate the integrity of the document for this signature.
thanks in advance!
","Please be aware that in a SignedData object there are multiple hash values to consider which generally are not equal.
Have a look at the definition of the Cryptographic Message Syntax (CMS) objects in RFC 3852.
(RFC 3852 is the RFC referenced from the current PDF specification ISO 32000-1; thus, even though it is obsoleted by RFC 5652, changes in the newer RFC might not apply in this context.)
  SignedData ::= SEQUENCE {
    version CMSVersion,
    digestAlgorithms DigestAlgorithmIdentifiers,
    encapContentInfo EncapsulatedContentInfo,
    certificates [0] IMPLICIT CertificateSet OPTIONAL,
    crls [1] IMPLICIT RevocationInfoChoices OPTIONAL,
    signerInfos SignerInfos }

...

  SignerInfo ::= SEQUENCE {
    version CMSVersion,
    sid SignerIdentifier,
    digestAlgorithm DigestAlgorithmIdentifier,
    signedAttrs [0] IMPLICIT SignedAttributes OPTIONAL,
    signatureAlgorithm SignatureAlgorithmIdentifier,
    signature SignatureValue,
    unsignedAttrs [1] IMPLICIT UnsignedAttributes OPTIONAL }

...

  SignedAttributes ::= SET SIZE (1..MAX) OF Attribute

...

  signedAttrs is a collection of attributes that are signed.  The
  field is optional, but it MUST be present if the content type of
  the EncapsulatedContentInfo value being signed is not id-data.
  SignedAttributes MUST be DER encoded, even if the rest of the
  structure is BER encoded.  Useful attribute types, such as signing
  time, are defined in Section 11.  If the field is present, it MUST
  contain, at a minimum, the following two attributes:

     A content-type attribute having as its value the content type
     of the EncapsulatedContentInfo value being signed.  Section
     11.1 defines the content-type attribute.  However, the
     content-type attribute MUST NOT be used as part of a
     countersignature unsigned attribute as defined in section 11.4.

     A message-digest attribute, having as its value the message
     digest of the content.  Section 11.2 defines the message-digest
     attribute.

...

  The result of the message digest calculation process depends on
  whether the signedAttrs field is present.  When the field is absent,
  the result is just the message digest of the content as described
  above.  When the field is present, however, the result is the message
  digest of the complete DER encoding of the SignedAttrs value
  contained in the signedAttrs field.  Since the SignedAttrs value,
  when present, must contain the content-type and the message-digest
  attributes, those values are indirectly included in the result.

Thus, your observation

that the messageDigest field is equal to the calculated digest of the signedContent obtained using the ByteRange.

 5178:d=6  hl=2 l=  47 cons: SEQUENCE          
 5180:d=7  hl=2 l=   9 prim: OBJECT            :messageDigest
 5191:d=7  hl=2 l=  34 cons: SET               
 5193:d=8  hl=2 l=  32 prim: OCTET STRING      [HEX DUMP]:18B399D208A08815DDF23C93B1B63B13757A6AA24B1932569D7A69D0DB3A34C2

indicates that the correct data is signed because the message-digest attribute shall have as its value the message digest of the content.
But as you can also read here, the data signed by the actual inner signature bytes (which you decrypted) is not this message digest of the content but instead the collection of attributes signedAttrs!
Thus, you must not verify those signature bytes against the content hash but against the signed attributes hash as described in the RFC.
PS: The OP meanwhile found this other answer on the topic of CMS signed data verification which additionally illustrates how one can more graphically identify which attributes are signed and which are not.
PPS: The OP verifies by decrypting the signature bytes, extracting the contained hash, and comparing it with the actual one. This is ok for signatures based on RSA. Signatures based on DSA or ECDSA cannot be decrypted, though, so the hash value cannot be extracted. Special verification routines must be used for their verification.
PPPS: There are different styles of integrated PDF signatures. While the style (PKCS7/CAdES detached) used here is the most common and recommended one, in a generic solution one has to check beforehand and verify accordingly.
","101","<security><pdf><pkcs#7>","0","0","1","2015-01-15 11:42:10","27900993","1","","","","","2015-01-12 10:40:27",""
"44320838","convert c# TripleDes PKCS7 code to php code","I have this code in C#
var dataBytes = Encoding.UTF8.GetBytes('clear text');

var symmetric = SymmetricAlgorithm.Create(""TripleDes"");
symmetric.Mode = CipherMode.ECB;
symmetric.Padding = PaddingMode.PKCS7;

var encryptor = symmetric.CreateEncryptor(Convert.FromBase64String('myKey'), new byte[8]);

var signedData = Convert.ToBase64String(encryptor.TransformFinalBlock(dataBytes, 0, dataBytes.Length));

now i need convert c# code to php code.
regard
","I use this function and worked for me 
function encryptData($plainText,$key)
{

    $byte = mb_convert_encoding($key, 'ASCII');

    $desKey = base64_decode($key);
    $data = mb_convert_encoding($plainText, 'ASCII');

    // add PKCS#7 padding
    $blocksize = mcrypt_get_block_size('tripledes', 'ecb');
    $paddingSize = $blocksize - (strlen($data) % $blocksize);
    $data .= str_repeat(chr($paddingSize), $paddingSize);

    // encrypt password
    $encData = mcrypt_encrypt('tripledes', $desKey, $data, 'ecb');

    return base64_encode($encData);
}

","92","<c#><php><pkcs#7><tripledes>","0","-1","1","2017-06-02 14:40:49","44331582","1","","","","","2017-06-02 04:31:10",""
"35272701","verify x509 certificate validity at some point of time","Actually what I am trying to do is to verify signature of the file. It consists of several items:

Verify that file hash is the same as in signature (non-modification)
Verify that certificate chain is valid (it is done using OCSP and
cached CRLs) 
Verify that certificate was valid at given time. Now
this is the problem. I can't get this information using both OCSP
or CRL.

Can you point me to direction how can this be checked?
","","91","<php><openssl><pkcs#7>","2","","0","2016-02-08 16:44:16","","0","","206","","2016-02-08 16:44:16","2016-02-08 15:02:04",""
"30712799","PKCS7_verify fails to return me original signed binary","I have an application signed twice using openssl smime. like shown below in a script:
SRC_FILE=""my-app""

echo ""signature XYZ...""

openssl smime -sign \
  -in ${SRC_FILE} -binary \
  -out ${SRC_FILE}.sig1 -nodetach \
  -signer ${SIGN_CERT} -inkey ${SIGN_KEY}

echo ""NB signature...""

openssl smime -sign \
  -in ${SRC_FILE}.sig1 -binary \
  -out ${SRC_FILE}.sig2 -nodetach \
  -signer ${NB_SIGN_CERT} -inkey ${NB_SIGN_KEY}

I am trying to verify the signed application using :
openssl smime -verify -in ${SRC_FILE}.sig2 -CAfile ./Root_CA.crt -out ${SRC_FILE}.out

As an output of verify I am getting equivalent to ${SRC_FILE}.sig1 but my intention is to get original my-app. 
If I am running verify command twice then eventually I am able to  receive my-app.
I wanted to ask is there any flag which internally call recursively to produce original signed file.
","","88","<security><openssl><pkcs#7><smime>","0","","0","2015-06-15 12:03:53","","2","","1859501","","2015-06-15 12:03:53","2015-06-08 15:08:36",""
"40733114","Write CMS encoded PEM with Bouncycastle","I have used the following source code and successfully generated a PKCS7 encoded PEM but i need to generate a CMS encoded based on RFC7468 https://tools.ietf.org/html/rfc7468#page-11. Based on the RFC, CMS encoded PEM is recommended. Please help if you know the answer, thanks in advance. 
    ContentSigner sha256Signer = new     JcaContentSignerBuilder(""SHA256WITHECDSA"").setProvider(new org.spongycastle.jce.provider.BouncyCastleProvider()).build(key);

    CMSTypedData     msg = new CMSProcessableByteArray(data.getBytes(charset));
    CMSSignedDataGenerator gen = new CMSSignedDataGenerator();
    gen.addSignerInfoGenerator(new JcaSignerInfoGeneratorBuilder(
            new JcaDigestCalculatorProviderBuilder().build()).build(
            sha256Signer, new X509CertificateHolder(x509Cert)));

    gen.addCertificates(certStore);
    CMSSignedData signedData = gen.generate(msg, true);
    // Generate PKCS7 PEM
    ContentInfo ci = signedData.toASN1Structure();

    StringWriter signedCertificatePEMDataStringWriter = new StringWriter();
    JcaPEMWriter pemWrt = new JcaPEMWriter(signedCertificatePEMDataStringWriter);
    pemWrt.writeObject(ci);
    pemWrt.flush();
    pemWrt.close();

","","87","<content-management-system><bouncycastle><pem><pkcs#7>","1","","0","2016-11-22 03:02:14","","0","1","","","","2016-11-22 03:02:14",""
"56497793","Create PKCS#7 CMS Detached signature compatible with OpenSSL SMIME command","I'm trying to create a detached signature of XML file in order to send message to the government organization. The application on the government's side wants PKCS#7 detached signature without certs and data(?). In documentation they use openssl as an example. From string ""this is string"" (without quotes) the openssl command:

openssl smime -sign -outform pem -signer C:\Temp\cert_test_np.pem -in
  C:\Temp\test.xml -out C:\Temp\Podpis2.xml -nocerts

generates this signature string

-----BEGIN PKCS7----- MIIC0QYJKoZIhvcNAQcCoIICwjCCAr4CAQExDzANBglghkgBZQMEAgEFADALBgkq
  hkiG9w0BBwExggKZMIIClQIBATCBhjB/MQswCQYDVQQGEwJDWjEoMCYGA1UEAwwf
  SS5DQSBUZXN0IFB1YmxpYyBDQS9SU0EgMTEvMjAxNTEtMCsGA1UECgwkUHJ2bsOt
  IGNlcnRpZmlrYcSNbsOtIGF1dG9yaXRhLCBhLnMuMRcwFQYDVQQFEw5OVFJDWi0y
  NjQzOTM5NQIDAU1jMA0GCWCGSAFlAwQCAQUAoIHkMBgGCSqGSIb3DQEJAzELBgkq
  hkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE5MDYwNzE1MjcyMFowLwYJKoZIhvcN
  AQkEMSIEIDY+iM9Vpap9krHOHyxKSyBHRZM20eaMwQFR7OpqrryFMHkGCSqGSIb3
  DQEJDzFsMGowCwYJYIZIAWUDBAEqMAsGCWCGSAFlAwQBFjALBglghkgBZQMEAQIw
  CgYIKoZIhvcNAwcwDgYIKoZIhvcNAwICAgCAMA0GCCqGSIb3DQMCAgFAMAcGBSsO
  AwIHMA0GCCqGSIb3DQMCAgEoMA0GCSqGSIb3DQEBAQUABIIBAIeN8SPBeNfDmip0
  NrpCoJ7c7YuuDW36OE9TN30D/ijRWcNMdgsObyNTFSrY0/51Gy655kejppfhwicv
  l/AdEXZcmM8JoWR9vHeRcklWmHLn1XYnKhDDWSQMZ0Kp62TTBTBsA6dLjizOhWx0
  u4Rj/lVv5/PmGsrQ4JmNreCaoSBAdqYOFCy2ZrvWNfhvpKPE+SDlAVMayfY0nqwM
  ds5pSb5o+YAWgsbfSQQU7uJp2K8XU4B1YAvGsg+aoGOxf/uiWNoppluQ9hpFAMzx
  tqndj8d1E2MUGkc6rISrMv+eoNheU+RM9ovDHQh9IVUDrdq8IalnjYVFsj+/0Wcz
  1O14IY0=
  -----END PKCS7-----

I've written a following code in C#
 public static string GetSignatureString(string stringToSign, X509Certificate2 certificateToUse)
        {
            byte[] array = Encoding.ASCII.GetBytes(stringToSign);
            ContentInfo content = new ContentInfo(array);
            certificate = certificateToUse;
            SignedCms signedCMS = new SignedCms(content, true);

            CmsSigner signer = new CmsSigner(certificate);
            signer.IncludeOption = X509IncludeOption.None;
            signer.DigestAlgorithm =new Oid(""2.16.840.1.101.3.4.2.1"");
            signer.SignedAttributes.Add(new Pkcs9SigningTime());

            signedCMS.ComputeSignature(signer, true);
            byte[] signed = signedCMS.Encode();

            string sToWrite = Convert.ToBase64String(signed,Base64FormattingOptions.InsertLineBreaks);
            return ""-----BEGIN PKCS7-----\r\n"" + sToWrite + ""\r\n-----END PKCS7-----\r\n"";
        }

which returns following PKCS#7 string

-----BEGIN PKCS7----- MIICVQYJKoZIhvcNAQcCoIICRjCCAkICAQExDzANBglghkgBZQMEAgEFADALBgkqhkiG9w0BBwEx
  ggIdMIICGQIBATCBhjB/MQswCQYDVQQGEwJDWjEoMCYGA1UEAwwfSS5DQSBUZXN0IFB1YmxpYyBD
  QS9SU0EgMTEvMjAxNTEtMCsGA1UECgwkUHJ2bsOtIGNlcnRpZmlrYcSNbsOtIGF1dG9yaXRhLCBh
  LnMuMRcwFQYDVQQFEw5OVFJDWi0yNjQzOTM5NQIDAU1jMA0GCWCGSAFlAwQCAQUAoGkwGAYJKoZI
  hvcNAQkDMQsGCSqGSIb3DQEHATAcBgkqhkiG9w0BCQUxDxcNMTkwNjA3MTUzMjU0WjAvBgkqhkiG
  9w0BCQQxIgQg3Obi7c6uoQfynW4GHXd9NRkmncvsYE1jAPUrepXO8PEwDQYJKoZIhvcNAQEBBQAE
  ggEAebxo2B+ka/xHWBWniTHSMkH8wNtRN6gWpqyI/Qq8/ZCchcT5PiUGnUFsDWXTJVaYuFG8NLOh
  uRNc6pFJduPyDRCtGJxNE8o2G5mAqAvARhuY6I4DvL88+a2Zvt1UgMyESzQqGOUT4EVCK8h+hkIy
  jlBpMESiJkMO6A+gLB0hfqjS5L4oIhtqr4SLhSSmyP8h/slBABYzRB6LZipFXy5252zPcgxxb8ZE
  hutzCD1K8o/qMcyXdnZT3Tm5pqKx39P3i3dLOnsus4zIDXzb2oKJwq6HfWapVngJO/bqozmhQnJj
  T1uM4W/KE+sx7z/uSBOKO1DWqG48OHO4PFCRdLwAng==
  -----END PKCS7-----

Both signs are valid if you insert them into online pkcs7 decoder (https://redkestrel.co.uk/products/decoder/ for example) but they have diferent message digest octet inside auth_attributes which is the part that government uses to check if the message is valid.
I know that they use/bend over openssl smime function which should be for email and for CMS they should use newer openssl cms function, but CMS should be compatible with smime which is older.
What I'm doing wrong in my function that the digest of the same string is different?
I'm using SHA256 algorithm (they too), no certs. inside PKCS#7 (they too), adding time to auth. attribute (they too).
Only two things are different.
1) They have generated some SMIME related information inside auth. attribute but it should be out of the game since we need the same message digest.
2) I'm getting certificate directly from cert. store inside windows for C# APP. OpenSSL is using .pem exported from the store. But they should be equal.
Is there any way how can I reproduce the same algorithm (get the same digest) used by OpenSSL smime function without linking of C++ libraries?
Thanks
","","86","<c#><openssl><pkcs#7><message-digest>","0","","0","2019-06-07 16:01:00","","0","","","","","2019-06-07 16:01:00",""
"52216887","Verify pkcs7 Signature received from AS2 trading partner","I am receiving an AS2 message from my trading partner. I have successfully decrypted it and it has following content:
Content-Type: multipart/signed; boundary=""----1E2FB76A361B53C9D12B3971C32BC0D8""; protocol=""application/pkcs7-signature""; micalg=""sha-256""

------1E2FB76A361B53C9D12B3971C32BC0D8
Content-Transfer-Encoding: binary
Content-Disposition: attachment; filename=""edi.dat""
Content-Type: application/octet-stream; charset=""ascii""; name=""edi.dat""

ISA*00*          *00*          *ZZ*SPSAS2         *ZZ*SPSAS2         *140919*1159*|*00501*100000001*0*P*>
GS*PO*AS2S3REC*AS2S3SEND*20140919*1159*123*X*005010
ST*850*1234
BEG*00*SA*SPSAS2TEST**20121017
REF*IA*TEST
PER*OC*Someone*TE*2844994944
DTM*001*20121025
N1*ST*SomeoneElse
N3*My address is private
N4*ST THOMAS*VI*00801
PO1*54812*1*EA***SK*123546*VP*123546*UP*123456987111
CTT*1
SE*11*1234
GE*1*123
IEA*1*100000001

------1E2FB76A361B53C9D12B3971C32BC0D8
Content-Transfer-Encoding: base64
Content-Disposition: attachment; filename=""smime.p7s""
Content-Type: application/pkcs7-signature; name=""smime.p7s""

MIIL5gYJKoZIhvcNAQcCoIIL1zCCC9MCAQExDzANBglghkgBZQMEAgEFADALBgkq
hkiG9w0BBwGgggg3MIIIMzCCBxugAwIBAgIQCq+jbObLeCwtsdF61BAtBzANBgkq
hkiG9w0BAQsFADBNMQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5j
MScwJQYDVQQDEx5EaWdpQ2VydCBTSEEyIFNlY3VyZSBTZXJ2ZXIgQ0EwHhcNMTgw
MjA5MDAwMDAwWhcNMjEwMjE3MTIwMDAwWjCBgjELMAkGA1UEBhMCVVMxEjAQBgNV
BAgTCU1pbm5lc290YTEUMBIGA1UEBxMLTWlubmVhcG9saXMxGzAZBgNVBAoTElNQ
UyBDb21tZXJjZSwgSW5jLjELMAkGA1UECxMCSVQxHzAdBgNVBAMTFnNwc2FzMi5j
b21tZXJjZXZhbi5jb20wggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCw
1fJZ14+32k+Qutklk2+YYxaPMe2ASv41lfR5945H6M2SmdgFqqF2LPNZqWofcBPQ
HbMWctbBHOW1shOS2XvBRUFT5tuyQKcG4iYz7FEHFGpu4oGyC0eUYSuBBtTQMmRi
zk8bMwwNhRUUyzxa/y3OePK0lEDdaQsSKi8WHLkfkVZBo7Lk9CPyR4WZ8q8uo/qW
tNMDbk1Fn2CtXqYrXFTmLJ81ScXGTp5zoIUhrkGcUzumK+25EBT9p+2XcVMCUj9S
LY1DWyTnWx2mgT0ekeHM0pXV2MPDuUG99SiQB4Q0CH0I3J4ZafP2rCzBVkvNlTFJ
ZojaQyfcP9W73ZiYSgUmQ3mCa/BjACTO8wztu9DBelUNVjSxCYysGUdKNyl6hAAI
OAPe8z0mmDCVA7S4rnTYkliW+2JQdOTaKc0GOiaHQjrd+Gta1aAJHRR1pxjSX2FC
apS3DkiJl4i5vdyPZM53QhS51XCxGHtCCcJ574MIPkthI4SLwKJkk6rSgvb7B0ai
7jbDmvp1FjY0SgKoHyN+QNH1J4rMeK7IUp2N0R+YrJa6kEaocIptSoPToDGKWk+o
qAx65r3T2n21jEfiCzN6JyqxNfE1T35Pekpvu4ioUEfW1ICf6AOQ5oQHWLr/Fhk2
sVzptYw5Lmtkb/sPGP1R/hBy88HAlTAh+QFrRJHHWwIDAQABo4ID1zCCA9MwHwYD
VR0jBBgwFoAUD4BhHIIxYdUvKOeNRji0LOHG2eIwHQYDVR0OBBYEFJs5x7uPOhBe
2Mp1aThYg8urrQ4FMCEGA1UdEQQaMBiCFnNwc2FzMi5jb21tZXJjZXZhbi5jb20w
DgYDVR0PAQH/BAQDAgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjBr
BgNVHR8EZDBiMC+gLaArhilodHRwOi8vY3JsMy5kaWdpY2VydC5jb20vc3NjYS1z
aGEyLWc2LmNybDAvoC2gK4YpaHR0cDovL2NybDQuZGlnaWNlcnQuY29tL3NzY2Et
c2hhMi1nNi5jcmwwTAYDVR0gBEUwQzA3BglghkgBhv1sAQEwKjAoBggrBgEFBQcC
ARYcaHR0cHM6Ly93d3cuZGlnaWNlcnQuY29tL0NQUzAIBgZngQwBAgIwfAYIKwYB
BQUHAQEEcDBuMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC5kaWdpY2VydC5jb20w
RgYIKwYBBQUHMAKGOmh0dHA6Ly9jYWNlcnRzLmRpZ2ljZXJ0LmNvbS9EaWdpQ2Vy
dFNIQTJTZWN1cmVTZXJ2ZXJDQS5jcnQwDAYDVR0TAQH/BAIwADCCAfYGCisGAQQB
1nkCBAIEggHmBIIB4gHgAHYApLkJkLQYWBSHuxOizGdwCjw1mAT5G9+443fNDsgN
3BAAAAFhezY//QAABAMARzBFAiEA/peliWFFZt3DPuaO1JekVr9XQhfW/SeCVONq
Rmju3zECIDByDCYP5dzgszieTnkpP3w5dsOfiVmJ+RRmuNORjb0rAHYAh3W/51l8
+IxDmV+9827/Vo1HVjb/SrVgwbTq/16ggw8AAAFhezZA2gAABAMARzBFAiEAmlnD
uPy34+XDxNZU8r0dD4fI+hFJwxQQkatA9zkIzegCIFxT3jLCCf9pVoEIeWYBOv3C
BjVqsn0jDqXLYSVOJTQVAHYAu9nfvB+KcbWTlCOXqpJ7RzhXlQqrUugakJZkNo4e
0YUAAAFhezZAzAAABAMARzBFAiEAwAWMiOFLxRBqVjLc/cktB7SjMujisPPx5WQA
Bat22NoCIAtVJcU2yoj6c66x8o/YI2lfSdZqF46K51WGb6/J79UdAHYAb1N2rDHw
MRnYmQCkURX/dxUcEdkCwQApBo2yCJo32RMAAAFhezZDCwAABAMARzBFAiAqzLuy
gkPgUSELvuB2xF9bFxPOj2YjBoiggQbUGfCMqgIhAL3VnGsi6xXUBswPEMn0M3P5
Cgnz6UGp2M4ItBE69YQnMA0GCSqGSIb3DQEBCwUAA4IBAQBbxA1NvqhkXddENUT5
qHY1pF91metZG38DwUS7c0xgS/LoY/WZZJ2cv0rEMoGCzRwwYijiiTc1MY6muiGE
hpdNja9Tu3bYJ9Z1bkiJJVKknqcqs64ibIbD762a7L/J0O9DzFKHeUwXAhpzT+rh
Z2eIPSR9BpUbiBpok73F/TvW2beJb2ncEiQJujK+UKlB9XeSsghrMOBiGnNJFB5t
Y155GAQb6oGiwRkkhWiJYZOq6riU5dmUbyqAqaxHij6hZOUzDL/fM5oeOpusedR0
4+eYgTe7LBq2teDNjchSceapKRXbbtz4UNDp0Ce3ZQyU4T4ndAsF9QiQnq7478SO
2ZgpMYIDczCCA28CAQEwYTBNMQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNl
cnQgSW5jMScwJQYDVQQDEx5EaWdpQ2VydCBTSEEyIFNlY3VyZSBTZXJ2ZXIgQ0EC
EAqvo2zmy3gsLbHRetQQLQcwDQYJYIZIAWUDBAIBBQCggeQwGAYJKoZIhvcNAQkD
MQsGCSqGSIb3DQEHATAcBgkqhkiG9w0BCQUxDxcNMTgwODMwMTkxMjQ3WjAvBgkq
hkiG9w0BCQQxIgQgh0UxRgyVkgQvRpk0/2ZBwHWFEqKH5Hu6qgpvjX9ETjUweQYJ
KoZIhvcNAQkPMWwwajALBglghkgBZQMEASowCwYJYIZIAWUDBAEWMAsGCWCGSAFl
AwQBAjAKBggqhkiG9w0DBzAOBggqhkiG9w0DAgICAIAwDQYIKoZIhvcNAwICAUAw
BwYFKw4DAgcwDQYIKoZIhvcNAwICASgwDQYJKoZIhvcNAQEBBQAEggIAEb1tlBKO
lSv69TDq4Jlhmtqt2szWKZazOhTMDUo68j3rJ6xJS9so7NKrQv+aeo8DdAblU/G/
OD2U6XS5iDdYg94aIyNEjuCZOfvibV8U1PA6WP+8VTo3vEDP0JoAt/NgWJKiKESS
iQ/8waAcLqxECW1Pa11KxdvO6xhJKpNI/xpl/t0007mYrZDseuLZNcyQjOOrP0Kj
E/21geSIyTTN842R0Zg6qTn6XlkPUq/bSa9MnlCUDNGxFn25Uqv+3nYlJhEiGyHa
GQef4vZL1faz7ljxnx/MJKiWAbq07F7tYEHGyVTkO3MGF/wBe8vDlYs3U1T4v+2g
hjEWiOyREYTt9a4XJ1QcscjbGCRl28BajmxBBHibkSM2o5ztLxPUoiEKjY3XQc6J
oHX3Gmj63qMQPQz58AVoalGtwxOxlJiFc0Y13NIydbxMRuxep0XHVNE5XFQGE1K/
2r5iV4pS1f+EarDxfjzkrUwZFYJLdO27DqIL//6m6uTiIgZBXnzqulWlLxX17MCD
2yUOTRPGqo9eRhnrtbeh3PYGXG0zhGSdmzoTQr2mf2k7EDB/48BGvUWeHGsc7sQT
LUrlnLKqiG1uRB4sWTWMtxsKtH8kGP824ihszLh+13IXlMztCEg+kh472KQENguC
Yxt8DzcvxMi0rIsbsC/Thq3nxpFCGDV7m3Q=

------1E2FB76A361B53C9D12B3971C32BC0D8--

It has the signature in ""Base64"" format and ""pkcs7-signature"". I am not able to match signature. I am considering following part as main data:
ISA*00*          *00*          *ZZ*SPSAS2         *ZZ*SPSAS2         *140919*1159*|*00501*100000001*0*P*>
GS*PO*AS2S3REC*AS2S3SEND*20140919*1159*123*X*005010
ST*850*1234
BEG*00*SA*SPSAS2TEST**20121017
REF*IA*TEST
PER*OC*Someone*TE*2844994944
DTM*001*20121025
N1*ST*SomeoneElse
N3*My address is private
N4*ST THOMAS*VI*00801
PO1*54812*1*EA***SK*123546*VP*123546*UP*123456987111
CTT*1
SE*11*1234
GE*1*123
IEA*1*100000001

and base64 string as sign. and sung following function to match sign:
static bool Verify(string text, byte[] signature, string certPath)
        {
            X509Certificate2 cert = new X509Certificate2(certPath);
            RSACryptoServiceProvider csp = (RSACryptoServiceProvider)cert.PublicKey.Key;
            SHA1Managed sha1 = new SHA1Managed();
            UnicodeEncoding encoding = new UnicodeEncoding();
            byte[] data = encoding.GetBytes(text);
            byte[] hash = sha1.ComputeHash(data);
            // Verify the signature with the hash
            return csp.VerifyHash(hash, CryptoConfig.MapNameToOID(""SHA1""), signature);
        }

But this function is not matching the signature.
Please help me with this problem.
Thank you...
","I can't, personally, get the data to validate.  (I'm assuming that either there are trailing spaces that aren't copying correctly or that the payload has been altered (e.g. ""My address is private""))
The flow that I expect is happening:

The pkcs7 content is a CMS SignedData with detached content.
The signed content was specified in the first stream

So you need to do something like:
byte[] dataBytes = ReadFirstSegment();
byte[] signatureBytes = ReadSecondSegment();

SignedCms cms = new SignedCms(new ContentInfo(dataBytes), detached: true);
cms.Decode(signatureBytes);
// This next line throws a CryptographicException if the signature can't be verified
cms.CheckSignature(true);

SignerInfoCollection signers = cms.SignerInfos;

if (signers.Count != 1)
{
    // probably fail
}

if (!IsExpectedCertificate(signers[0].Certificate))
{
    // fail
}

// success

","85","<c#><digital-signature><x509certificate><pkcs#7>","0","0","1","2018-09-18 14:42:24","","0","","","","","2018-09-07 06:54:03",""
"55547844","Bundle.main.url(forResource: ""AppleIncRootCertificate"", withExtension: ""cer"") == nil","In order to set up Receipt-Validation in a Swift iOS app (using In-App-Purchase), I am following this tutorial: https://www.raywenderlich.com/9257-in-app-purchases-receipt-validation-tutorial and reading here: Validating Apple Signed the Receipt.
Here is a problem I have at this point.
In the code I have this:
Bundle.main.url(forResource: ""AppleIncRootCertificate"", withExtension: ""cer"")

And when I check its value, it is nil. Since it is supposed to be used to extract further information, it shoud obviously not be nil. The question is: what could be wrong in the code or in some setting to make this nil?
This is my first time to implement Receipt-Validation, so it may well be that I am missing something basic.
","","85","<ios><swift><openssl><pkcs#7><receipt-validation>","0","","0","2019-04-06 09:48:37","","4","","","","","2019-04-06 09:48:37",""
"52376546","How to encrypt with Twofish using ECB cipher mode and PKCS7 block padding mode?","I want to access an API with PHP. The specifications are:

Twofish algorithm
ECB cipher mode
PKCS7 block padding mode

I have tried a lot of different PHP functions and libraries, but none seems to work.
Here is my code:
function encrypt($data, $key)
{
  // Pad for PKCS7
  $blockSize = mcrypt_get_block_size(MCRYPT_TWOFISH, MCRYPT_MODE_ECB);
  $len = strlen($data);
  $pad = $blockSize - ($len % $blockSize);
  $data .= str_repeat(chr($pad), $pad);

  $encryptedData = mcrypt_encrypt( MCRYPT_TWOFISH, $key, $data, MCRYPT_MODE_ECB);

  return $encryptedData;
}

Do you see a problem with this code?
","mcrypt_encrypt does not support PKCS7 padding.  It has also been deprecated for a significant period of time.
If the API you want to talk to is using Twofish and ECB mode then you probably don't want to use that API at all - if they're happy to whack an incredibly insecure encryption scheme together for the front-facing API then the rest of their codebase is probably pretty shammy too.
","84","<php><encryption><pkcs#7><ecb><twofish>","0","0","1","2018-09-17 23:58:42","","2","","","","","2018-09-17 22:37:30",""
"52017825","Reading PKCS7 and .p12 file certificate information(subjectDN,vaildstartfrom,ValildTo..) through java","I am trying to implement Digital certificate validity utility using java. I can able to read the certification information(subjectDN, Issure info, validitity..etc) if the certificate in .cert,.cer but can't able to read certificate information from .p7b and .p12 certificate format. I have used the BouncyCastle security provider to read .p7b and .p12 certificate content but not able to get with that security provider might be i was missing on this. I am referring online resources  to get some idea on this but not get guideline for this.Could you please someone give suggestion on this.
","I suggest if you're looking for validity of the certificate from p12, it can be done as below :
try {
        Security.addProvider(new BouncyCastleProvider());
        KeyStore keyStore = KeyStore.getInstance(""pkcs12"");
        InputStream input = new FileInputStream(""pathToYourP12"");
        keyStore.load(input, ""password"");
        certFromKeyStore = (X509Certificate)keyStore.getCertificate(""keyStoreAllias"");
        certFromKeyStore.checkValidity();
}
catch(Exception e)
{
// catch exception like if no valid p12 existing at the location, invalid password, or any other exception should get catch properly.
}

","81","<certificate><pkcs#7><java-security>","0","0","1","2018-09-01 14:04:48","52099684","0","","5794000","","2018-08-26 12:48:29","2018-08-25 13:35:02",""
"50698179","Generate signed PKCS#7 without access to the PK","I have a smart card which stores my private key and performs limited cryptographic operations, and I need to generate a PKCS#7 signed file. The library that came with the smart card doesn't support PKCS#7, but I can use it to generate signatures.
Is there any way I can use a mature, open source library, such as openssl, in order to build the PKCS#7 content, given the clear text payload, the certificate, and the signature (not the private key)?
I know I can call various functions in openssl to perform all operations at once (including signing), but that requires access to the private key, which my code can't extract.
","You can do it by creating an OpenSSL engine that will communicate with the card when private key operation is required. 
","81","<openssl><smartcard><sign><pkcs#7>","0","-1","1","2018-06-06 11:42:53","","0","1","","","","2018-06-05 10:46:08",""
"51434245","Can't get encrypted key out of pkcs7 envelope with PyAsn1 Python","I am trying to extract a RSA-encrypted AES key from a PKCS7 envelope and am getting an error that says the encrypted key is a schema, not a value. Why is this when in the envelope there is a line that says encryptedKey=....
content, rest = decode(env_der, asn1Spec=rfc2315.ContentInfo())
assert content['contentType'] == rfc2315.envelopedData

myenvelop, rest = decode(content['content'], asn1Spec=rfc2315.EnvelopedData())
print(myenvelop)
print(myenvelop['recipientInfos'][1]['encryptedKey'])

the result of this code is:
    EnvelopedData:
 version=0
 recipientInfos=RecipientInfos:
  RecipientInfo:
   version=0
   issuerAndSerialNumber=IssuerAndSerialNumber:
    issuer=Name:
     =RDNSequence:
      RelativeDistinguishedName:
       AttributeTypeAndValue:
        type=2.5.4.6
        value=0x13025553
      RelativeDistinguishedName:
       AttributeTypeAndValue:
        type=2.5.4.10
        value=0x130f552e532e20476f7665726e6d656e74
      RelativeDistinguishedName:
       AttributeTypeAndValue:
        type=2.5.4.11
        value=0x131c556e697465642053746174657320506f7374616c2053657276696365
      RelativeDistinguishedName:
       AttributeTypeAndValue:
        type=2.5.4.3
        value=0x131255535053496e7465726e616c537562324341


    serialNumber=488380148491395325238848

   keyEncryptionAlgorithm=KeyEncryptionAlgorithmIdentifier:
    algorithm=1.2.840.113549.1.1.1
    parameters=0x0500

   encryptedKey=0x1b396af2d3a1eca95621262c85fd11835616fc5e1d342c752a2082dd559a23c8f11c21d68b8d5317c721c1d7eba7a1c5bef8ee15d428da74c513a61437d6ba7e6ba4286540ec6c068091b5a611ea36c0aaf44b3055fddbdfe40f5472aa0c1daaa69b67ff5bac3e9de17f5c12f7bd4c86ad4d505341308048c82f29cf71c3bcb9108039ccbf7ebc5f9784570f360a1ec3c529dfc94950d290aa95d80e849688b3cc509851173cedf12e963dcd1d083b87ab3a41b7a0db5f79ca4a52b28b3758fec1f20a627d181e95547d56f0b51fcf2a211371df8d62b5e62473ece192649493d89a72693ffe94c2dbfb7e5ba1fa1c04b623b5094600786b931e6cd1a6f406d1

 encryptedContentInfo=EncryptedContentInfo:
  contentType=1.2.840.113549.1.7.1
  contentEncryptionAlgorithm=ContentEncryptionAlgorithmIdentifier:
   algorithm=2.16.840.1.101.3.4.1.42
   parameters=0x041016b5378e3bfde72671a7a207a4038840



Traceback (most recent call last):
  File ""C:/Users/VoxaiLap10/Desktop/pythonbible/cryptotestpemmp3_b_md5_7-19-18b.py"", line 81, in <module>
    unEnvelop(filename, pemFile, outfilename)
  File ""C:/Users/VoxaiLap10/Desktop/pythonbible/cryptotestpemmp3_b_md5_7-19-18b.py"", line 41, in unEnvelop
    print(myenvelop['recipientInfos'][1]['encryptedKey'])
  File ""C:\Program Files (x86)\Python36-32\lib\site-packages\pyasn1\type\univ.py"", line 882, in __str__
    return self._value.decode(self.encoding)
  File ""C:\Program Files (x86)\Python36-32\lib\site-packages\pyasn1\type\base.py"", line 221, in __getattr__
    raise error.PyAsn1Error('Attempted ""%s"" operation on ASN.1 schema object' % attr)
pyasn1.error.PyAsn1Error: Attempted ""decode"" operation on ASN.1 schema object

","Suspicious part is that [1] subscription, should it be [0] instead? I assume you are trying to address the first element of the RecipientInfos sequence which is zero-based.
The error message itself means that the object you are trying to work with is not initialized e.g. is not filled with any concrete value. That's why it can only be used as a ""schema"" e.g. for type information.
When you subscribe RecipientInfos by a non-existing index, the new RecipientInfo element is created which obviously is not populated with any concrete values (apart from the defaults). In that sense it remains a schema, not schema instance.
","76","<python><python-3.x><pkcs#7><pyasn1>","0","1","1","2018-07-20 06:37:18","51436458","0","","","","","2018-07-20 02:29:31",""
"53632723","How can I sign a document using PKCS7, CAdES, S/MIME (e-cpf / e-cnpj) to create a P7S file using javascript on the browser?","I was able to read a p12 certificate file and, using the password, I was able to extract:

key and cert using forge methods: forge.pkcs12.pkcs12FromAsn1 and getBags({friendlyName: this.selectedFriendlyName}).friendlyName
privatePem using forge.pki.privateKeyToPem

I found some solutions to sign a message or document using PKCS7, CAdES and S/MIME, but none of them produced a P7S file and the result is different than a proper P7S content (byte array), and that is what I understood is the correct file format to be used in E-CPF/E-CNPJ signed documents.
I would like to archive this using javascript on the browser, but any help or direction will be appreciated, thank you in advance :)
","Looks like you are brazilian... Check if this PHP answer helps.
https://pt.stackoverflow.com/a/124876/6573
","76","<javascript><x509><pki><pkcs#7><electronic-signature>","0","1","1","2018-12-05 13:08:46","","1","","858257","","2018-12-05 13:05:42","2018-12-05 12:48:21",""
"47578329","use subprocess in Python to use OpenSSL to print a PKCS7 certifcate to a file","There is plenty of code for OpenSSL/UNIX for Encrypting/Decrypting cert files.
I would like to know if there is some code I can put into Python 3.5 that will print and create an output file of that information. Here is the OpenSSL command that works wonderfully:
OpenSSL> pkcs7 -inform DER -n CERT.RSA -out CERT.TXT -noout -print_certs -text

This converts the file so that I can easily read it. Try this for yourself in OpenSSL. I am not an expert in Python and I am trying to learn how to use my skills in Python for automation. Thank you for any input.
","Thank you to the ones that read my question. I figured it out. I hope that this helps someone.
PYTHON CODE:
subprocess.Popen(['openssl.exe', 'pkcs7', 'DER', '-in', InputFile, '-out', OutputFile,
    'print_certs', '-text'], stdout=None, stderr=None, shell=True)

","72","<python><pkcs#7>","0","0","1","2017-12-04 14:01:29","","0","","1848654","","2017-11-30 18:23:05","2017-11-30 16:39:22",""
"36167932","How does Paypal structure button data before encryption?","Currently I've done alot searching on how data should be structured before PKCS7 encryption for proper use within the Paypal buy-now button. So far, the best data I've found so far pertaining to data structure is an Paypal example code which demonstrates how a encrypted button appears on your website (this can be found here:https://www.paypal.com/cgi-bin/webscr?cmd=p/xcl/rec/ewp-techview-outside) 
At first glance, my results seem to be exactly as demonstrated within the Paypal eaxmple link, except that when i proceed to click the button i get a Paypal error saying ""We were unable to decrypt the certificate id"". Therefore I think that the problem is either how the data is structured or the actual encryption itself (I've also done alot of debugging and have made sure that all certificates and keys are being successfully registered ). The code below demonstrates the button that my php code creates.
<form action=""https://www.sandbox.paypal.com/cgi-bin/webscr"" method=""post"">
  <input type=""hidden"" name=""cmd"" value=""_s-xclick"">
  <input type=""image"" src=""https://www.sandbox.paypal.com/en_US/i/btn/x-click-but23.gif"" border=""0"" name=""submit"" alt=""Make payments with PayPal - it\'s fast, free and secure!"">
  <input type=""hidden"" name=""encrypted"" value=""-----BEGIN PKCS7-----MIIH6QYJKM585oH7A[to much data to show]9QRQIpFZzRK6cJu6QQO+q/xfiw==-----END PKCS7-----"">
</form>

This is my data before encryption:
cert_id=9CE6NSORUBVMC cmd=_xclick business=sales@mycompany.com item_name=Cat Litter #40 amount=12.95 no_shipping=1 return=http://test183653.comli.com/MainPage.php cancel_return=http://test183653.comli.com/MainPage.php no_note=1 currency_code=USD bn=PP-BuyNowBF

I'm currently using the format above as a result of piecing bits and pieces of info on the internet but it doesn't seem to work (also doesn't work when i remove all the spaces in the string). Thus, 
MAIN QUESTION: Can anyone tell me or point me in the right direction to learn the proper format of the data before encryption?
For Anyone interested to check if it is the code that creates the errors through improper encryption, the function which encrypts data can be found below:
function encryptButton($parameters) {

    if (($this->certificateID == '') ||
    !IsSet($this->certificate) ||
    !IsSet($this->paypalCertificate)) {
      return FALSE;
    }

    $clearText = '';
    $encryptedText = '';

    $clearText = 'cert_id='.$this->certificateID;

    foreach (array_keys($parameters) as $key) {

      $clearText .= ""\n{$key}={$parameters[$key]}"";
    }

    $clearFile = tempnam($this->tempFileDirectory, 'cle');
    $signedFile = preg_replace('/cle/', 'signed', $clearFile);
    $encryptedFile = preg_replace('/cle/', 'encrypted', $clearFile);

    $out = fopen($clearFile, 'wb');
    fwrite($out, $clearText); 
    fclose($out);

    //openssl_pkcs7_sign occurs here
    if (!openssl_pkcs7_sign($clearFile, $signedFile, $this->certificate, $this->privateKey, array(), PKCS7_BINARY)) {
      return FALSE;
    }

    $signedData = explode(""\n\n"", file_get_contents($signedFile));

    $out = fopen($signedFile, 'wb');
    fwrite($out, base64_decode($signedData[1]));
    fclose($out);

    //openssl_pkcs7_encrypt occurs here
    if (!openssl_pkcs7_encrypt($signedFile, $encryptedFile, $this->paypalCertificate, array(), PKCS7_BINARY)) {
      return FALSE;
    }

    $encryptedData = explode(""\n\n"", file_get_contents($encryptedFile));

    $encryptedText = $encryptedData[1];

    @unlink($clearFile);
    @unlink($signedFile);
    @unlink($encryptedFile);

    return $encryptedText;

  }


  function getEncryptedString($params) {
  return ""-----BEGIN PKCS7-----"".str_replace(""\n"", """", $this->encryptButton($params)).""-----END PKCS7-----""; }

}
","","72","<php><encryption><paypal><ssl-certificate><pkcs#7>","1","","0","2016-03-23 00:54:09","","7","1","","","","2016-03-23 00:54:09",""
"57892036","Decrypt a Java AES encoded String in Dart","I need to decrypt an AES (PKCS#7) encoded string in my Flutter mobile application.
The string is got from a QR Code, which has been generated from a Java application and contains the AES encoded String.
The Java encoding :
import java.security.Security;
import java.nio.charset.StandardCharsets;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import org.apache.commons.codec.binary.Base64;
import org.bouncycastle.jce.provider.BouncyCastleProvider;

public class MyClass {

     public static void main(String[] args) throws Exception {
         String toEncode = ""firstname.lastname@mycompany.com;12"";
         String encoded = pleaseEncodeMe(toEncode);
         System.out.println(encoded);
     }

     private static String pleaseEncodeMe(String plainText) throws Exception {
         Security.addProvider(new BouncyCastleProvider());
         final String encryptionAlgorithm = ""AES/CBC/PKCS7PADDING"";
         final String encryptionKey = ""WHatAnAWEsoMeKey"";
         final SecretKeySpec keySpecification = new SecretKeySpec(encryptionKey.getBytes(StandardCharsets.UTF_8), encryptionAlgorithm);
         final Cipher cipher = Cipher.getInstance(encryptionAlgorithm, ""BC"");
         cipher.init(Cipher.ENCRYPT_MODE, keySpecification);
         final byte[] encryptedBytes = cipher.doFinal(plainText.getBytes());
         return Base64.encodeBase64URLSafeString(encryptedBytes);
    }

}

Output : AIRTEuNmSuQtYuysv93w3w83kJJ6sg7kaU7XzA8xrAjOp-lKYPp1brtDAPbhSJmT
The Dart decoding :
void main() {
    print(decodeMeOrDie(""AIRTEuNmSuQtYuysv93w3w83kJJ6sg7kaU7XzA8xrAjOp-lKYPp1brtDAPbhSJmT""));
}

String decodeMeOrDie(String encryptedString) {
    final key = Key.fromUtf8(""WHatAnAWEsoMeKey"");
    final iv = IV.fromLength(16);
    final encrypter = Encrypter(AES(key, mode: AESMode.cbc, padding: ""PKCS7""));
    return encrypter.decrypt64(encryptedString, iv: iv);
}

Output : Y��=X�Rȑ�""Qme@mycompany.com;12
You can see that only a part of the string is decoded.
","
Two things must be taken into account:
1) For decryption, the IV used for encryption is required. 
2) For security reasons, a new IV must be randomly generated for each encryption so that no IV is used more than once with the same key, here. 
Therfore, the IV must be passed from the encryption-side to the decryption-side. This doesn't happen automatically, but has to be implemented.
One possibility is to concatenate the byte-arrays of IV and ciphertext. Usually the IV is placed before the ciphertext and the result is Base64-encoded (if required), e.g. in Java: 
// Concatenate IV and ciphertext
byte[] iv = ...
byte[] ciphertext = ...
byte[] ivAndCiphertext = new byte[iv.length + ciphertext.length];
System.arraycopy(iv, 0, ivAndCiphertext, 0, iv.length);
System.arraycopy(ciphertext, 0, ivAndCiphertext, iv.length, ciphertext.length);
// If required: Base64-encoding

This data is transmitted to the decryption-side, which separates both parts after Base64-decoding. In the case of AES-CBC, the IV is 16 bytes long, so the first 16 bytes represent the IV and the rest the ciphertext. The IV doesn't need to be encrypted because it isn't secret. 
Specifically for your case this means that you have to concatenate IV and ciphertext on the Java-side and to Base64-encode the result. On the Dart-side you have to Base64-decode first and then both parts, IV and ciphertext, can be separated and used for the following decryption.
There are two ways to generate the IV before encryption: Implicit generation by the Cipher-instance as in your example or explicit generation e.g. via SecureRandom. Both alternatives are discussed here. If the IV is generated implicitly (via the Cipher-instance), then this IV must be determined via the Cipher-instance, since it is later required for decryption:
// Determine IV from cipher for later decryption
byte[] iv = cipher.getParameters().getParameterSpec(IvParameterSpec.class).getIV();

If the IV is determined explicitly (e.g. using SecureRandom), it must be passed to the Cipher-instance so that it will be used in the running encryption. This is done using an IvParameterSpec.
// Assign IV to cipher so that it is used for current encryption
byte[] iv = ...
IvParameterSpec ivParameterSpec = new IvParameterSpec(iv);
cipher.init(Cipher.ENCRYPT_MODE, secretkeySpec, ivParameterSpec);

A hard-coded key is in general not good practice (except for testing purposes perhaps). However, the topic of key generation/management is outside the scope of this answer. There are already a lot of questions and answers on this subject. If your question is not covered by these answers, please post a new question. A hard-coded IV doesn't occur within the above architecture and should only be used for testing purposes.  


","68","<java><encryption><dart><aes><pkcs#7>","1","2","1","2019-09-12 17:29:46","57911838","4","","","","","2019-09-11 15:06:00",""
"51631352","Encryption AES 128","I've been asked at work to implement a request for a simple web service with the following instructions:
AES encryption:
Type: ECB
Size: 128bits
Padding Mode: PKCS7
key: 9b6018215942b2e1da3797d3394779bf
In the docs (just a given example) they say that for the string:

2874838-49

The encryption process must generate:

BEE361962A1802A7BA2AD328DAE8B291

I've been searching a lot for something like this, but none of the solutions (like here, here here, etc...) given helped me achieving the example result given.
This was the last thing I tried now:
function aes128Encrypt($data, $key) {
  $padding = 32 - (strlen($data) % 32);
  $data .= str_repeat(chr($padding), $padding);
  return base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $key, $data, MCRYPT_MODE_ECB));
}
$data = ""2874838-49"";
$key = ""9b6018215942b2e1da3797d3394779bf"";    
echo aes128Encrypt($data, $key); // UdP7dXSTp6b5I986PLL8Gs3qH3rMj0SpQ0te4pP7M44=

","The encoding algorithm returns a stream of bytes back to you of encoded data.
The sample you have doens't provide a base64 encoded variant of the data but a hexadecimal representation.
In your case, just swap out the base64_encode for bin2hex and the answer should match up.
function aes128Encrypt($data, $key) {
  $padding = 32 - (strlen($data) % 32);
  $data .= str_repeat(chr($padding), $padding);
  return bin2hex(mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $key, $data, MCRYPT_MODE_ECB));
}
$data = ""2874838-49"";
$key = ""keyshouldbeplacedhere"";    
echo aes128Encrypt($data, $key);

","67","<php><encryption><aes><pkcs#7><ecb>","1","1","1","2018-08-01 13:23:04","51633883","8","","7801160","","2018-08-01 13:23:04","2018-08-01 10:45:36",""
"39651411","SMIME with BIO, char * and binary data","The problem
1- I'd like to create a MIME message. Something like this:
MIME-Version: 1.0
Content-Type: multipart/mixed;
        boundary=""---12345""

This is a multipart message in MIME format.

---12345
Content-Type: text/plain

This is the plain text

---12345
Content-Type: application/pdf

>> PDF binary code here <<

---12345

2- Then i need to pass it to the OpenSSL functions in the form of BIO * data.
PKCS7 *PKCS7_sign(..., ..., ..., BIO *data, ...);

The first approach
Load the plain text and attachment data from the filesystem and assign it to char * data, manipulate the data to add the respective MIME headers, finally assign it to BIO * memoryBIO with BIO_puts(memoryBIO, data);.
But this approach doesnt work because the binary data contains ""\0""(NULL) which wont go well with char type.
The second approach
Assign plain text and attachment to a BIO each and then ""concatenate"" them. But couldn't find a way to do this.
Conclusion
I'd like to know if there is a way to accomplish such feat.
I'd also like to avoid using intermediary files and build everything in-memory.
","After following jww's suggestion, what i ended up using is BIO_write();.
BIO * inBIO = NULL;
std::vector<unsigned char> data = GetData();
inBIO = BIO_new(BIO_s_mem());
BIO_write(inBIO, data.data(), data.size());

Again thanks to jww for this answer and for all the other answers regarding OpenSSL in SO, you've helped me a great deal.
","66","<c><openssl><pkcs#7><smime>","0","0","1","2016-10-09 00:21:51","39938751","5","","608639","","2016-09-23 04:20:43","2016-09-23 01:58:24",""
"50227261","Extract PKCS7 Container memory leak during receipt validation","XCode detected memory leaks in one of my function:

The func is responsible for extracting PKCS7 container. Here the code of the func:
func extractPKCS7Container() throws -> UnsafeMutablePointer<PKCS7> {
    guard let receiptURL = Bundle.main.appStoreReceiptURL,
        let certificateURL = Bundle.main.url(forResource: ""AppleIncRootCertificate"", withExtension: ""cer""),
        let receiptData = NSData(contentsOf: receiptURL),
        let certificateData = NSData(contentsOf: certificateURL) else {
            throw ReceiptError.couldNotFindReceipt
    }
    let bio = BIOWrapper(data: receiptData)
    let p7 = d2i_PKCS7_bio(bio.bio, nil)
    guard p7 != nil else {
        throw ReceiptError.emptyReceiptContents
    }
    OpenSSL_add_all_digests()

    let x509Store = X509StoreWrapper()
    let certificate = X509Wrapper(data: certificateData)
    x509Store.addCert(x509: certificate)
    let payload = BIOWrapper()
    guard PKCS7_verify(p7, nil, x509Store.store, nil, payload.bio, 0) == 1 else {
        throw ReceiptError.receiptNotSigned
    }
    return p7!
}

I also have supplementary classes:
class BIOWrapper {
    let bio = BIO_new(BIO_s_mem())
    init(data:NSData) {
        BIO_write(bio, data.bytes, Int32(data.length))
    }
    init() {}
    deinit {
        BIO_free(bio)
    }
}

class X509StoreWrapper {
    let store = X509_STORE_new()
    deinit {
        X509_STORE_free(store)
    }
    func addCert(x509:X509Wrapper) {
        X509_STORE_add_cert(store, x509.x509)
    }
}

class X509Wrapper {
    let x509 : UnsafeMutablePointer<X509>!
    init(data:NSData){
        let certBIO = BIOWrapper(data: data)
        x509 = d2i_X509_bio(certBIO.bio, nil)
    }
    deinit {
        X509_free(x509)
    }
}

All wrappers has init and deinit section. Other functions is from the build-in Crypto module... Frankly, I have no idea there the leak can be here. Could anyone help me?
","You are allocating a PKCS7 object but it seems you are never calling PKCS7_free. For example, you would need to call it right before throw ReceiptError.receiptNotSigned.
Notice in the stack trace on the right there are stack frames missing. You can view them by clicking on the icon the looks like a square with a line above and below that. That way you know exactly which function call is responsible for the allocation (and thus likely what it is that leaked).
","61","<swift><pkcs#7><receipt-validation>","0","0","1","2018-05-08 06:49:37","50227520","0","","","","","2018-05-08 06:29:05",""
"38857956","Why is my original purchase version always displayed as 1.0?","I am attempting to extract the user's receipt to ascertain what their original purchase version was by using the following code:
if attr_type == 19 {
                // Bundle version
                var str_ptr = ptr
                var str_type: Int32 = 0
                var str_length = 0
                var str_xclass: Int32 = 0
                ASN1_get_object(&str_ptr, &str_length, &str_type, &str_xclass, seq_end - str_ptr)

                if str_type == V_ASN1_UTF8STRING {
                    originalPurchaseVersion = NSString(bytes: str_ptr, length: str_length, encoding: NSUTF8StringEncoding)

                securityInfo.originalPurchaseDate = originalPurchaseVersion as! String                        
                }

However, I set up a testflight beta programme and the user that is testing has previously purchased version 1.32, however, the returned value is always version 1.0. 
","","61","<ios><swift><pkcs#7><receipt-validation>","1","","0","2016-08-09 22:04:49","","3","","608639","","2016-08-09 22:04:49","2016-08-09 18:28:28",""
"26930911","Where to put information about padding length?","I'm working on AES encryptor and decryptor. I've decided to use PKCS#7. And now, I've no idea where to put information about padding length. I've read that I can read last byte (==n) and check if it's lower than 16. If it's true i can check n bytes if they are equal n. But here is a thing. What if the last block to encrypt has 16 bytes and looks like this for exmaple:
{0x01, 0xfa,..., 0xf1, 0x02, 0x02}

After decryption, decryptor will read it and decide that two last bytes are padded (in fact they are not).
Should I add byte at the begining of a file with length, and decryptor will read it and start decrypting from second byte?
","The best practice is to add 32bit prefix with the actual length before encrypted data.
","60","<encryption><aes><pkcs#7>","1","-1","2","2014-11-14 13:43:52","26931284","2","","","","","2014-11-14 13:18:05",""
"26930911","Where to put information about padding length?","I'm working on AES encryptor and decryptor. I've decided to use PKCS#7. And now, I've no idea where to put information about padding length. I've read that I can read last byte (==n) and check if it's lower than 16. If it's true i can check n bytes if they are equal n. But here is a thing. What if the last block to encrypt has 16 bytes and looks like this for exmaple:
{0x01, 0xfa,..., 0xf1, 0x02, 0x02}

After decryption, decryptor will read it and decide that two last bytes are padded (in fact they are not).
Should I add byte at the begining of a file with length, and decryptor will read it and start decrypting from second byte?
","PKCS#7 padding is deterministic. That means that unpadding should always be able to find out the padding length itself. So you first decrypt, then take the last byte (as number) and that is the padding length. For this to work, PKCS#7 padding is always applied. So the amount of padding, and thus the value of the bytes, is 1 to the blocksize, which is 16 bytes for AES. . If the plaintext is already dividable by 16, a full block of padding - with bytes valued 16 / 0x10 is applied. 
In short, the calculation is:
p = n - l % n

where p is the pad size & value, n is the block size and l is the size of the plaintext.
","60","<encryption><aes><pkcs#7>","1","3","2","2014-11-14 13:43:52","26931284","2","","","","","2014-11-14 13:18:05",""
"57263676","How to use PHP PKCS7 encrypt decrypt in JAVA","I'm using JAVA for the 2c2p(https://developer.2c2p.com/docs/status-inquiry) API, but they're using PHP, and I don't know how to implement the openssl_pkcs7_encrypt method of PHP in JAVA
I searched for the implementation of node.js(PKCS7 encrypt decrypt in Node.js), but I couldn't find the Java implementation
This is a PHP code example provided by 2c2p
function encrypt($text,$publickey)
{
    //write text to file
    if(!file_exists( dirname(__FILE__).""/tmp/""))
    {
        mkdir( dirname(__FILE__).""/tmp/"");
    }
    $filename = dirname(__FILE__).""/tmp/"".time()."".txt"";
    $this->text_to_file($text,$filename);
    $filename_enc = dirname(__FILE__).""/tmp/"".time()."".enc"";

    $key = file_get_contents($publickey);
    if (openssl_pkcs7_encrypt($filename, $filename_enc, $key,
    array())) {
        // message encrypted - send it!
        unlink($filename);
        if (!$handle = fopen($filename_enc, 'r')) {
                 echo ""Cannot open file ($filename_enc)"";
                 exit;
            }

            $contents = fread($handle, filesize($filename_enc));
            fclose($handle);
            $contents = str_replace(""MIME-Version: 1.0
            Content-Disposition: attachment; filename=\""smime.p7m\""
            Content-Type: application/pkcs7-mime; smime-type=enveloped-                             data; name=\""smime.p7m\""
            Content-Transfer-Encoding: base64
            "","""",$contents);
            $contents = str_replace(""\n"","""",$contents);
            unlink($filename_enc);
            return $contents;
    }
}

","","55","<java><php><pkcs#7>","1","","0","2019-07-30 02:45:33","","1","","","","","2019-07-30 02:45:33",""
"57567688","How to compose a PKCS#7 signature file correctly?","I'm trying to use the Botan library to generate a detached signature file. The resulting signature file is not validated by OpenSSL (no other checks). Prompt in what there can be an error of formation of the signature file. 
A couple of keys for signing and the certificate is stored in the HSM, it was not difficult to get them. For tests I use RSA keys and SoftHSM, later another key format and physical HSM will be used. PKCS#11 is used to communicate with HSM.
For create PKCS#7:
static const Botan::BigInt CMSVersion(1ull);

std::vector<uint8_t> createAttributes(std::vector<uint8_t> &digestData)
{
  std::chrono::time_point<std::chrono::system_clock> time = std::chrono::system_clock::now();
  Botan::OID dataOID(""1.2.840.113549.1.7.1"");
  Botan::Attribute contentType(Botan::OIDS::str2oid(""PKCS9.ContentType""),
                               dataOID.BER_encode());
  Botan::X509_Time timeASN1(time);
  std::vector<uint8_t> attributesData;
  Botan::DER_Encoder attrib(attributesData);
  attrib.start_cons(Botan::ASN1_Tag(0),
                    Botan::ASN1_Tag(Botan::ASN1_Tag::CONTEXT_SPECIFIC));
  attrib.encode(contentType)
      .start_cons(Botan::ASN1_Tag::SEQUENCE)
        .encode(Botan::OID(""1.2.840.113549.1.9.5""))
        .start_cons(Botan::ASN1_Tag::SET).encode(timeASN1).end_cons()
      .end_cons()
      .start_cons(Botan::ASN1_Tag::SEQUENCE)
        .encode(Botan::OIDS::str2oid(""PKCS9.MessageDigest""))
        .start_cons(Botan::ASN1_Tag::SET)
          .encode(digestData, Botan::ASN1_Tag::OCTET_STRING,
                  Botan::ASN1_Tag::OCTET_STRING, Botan::ASN1_Tag::UNIVERSAL)
        .end_cons()
      .end_cons();
  attrib.end_cons();
  return attributesData;
}
std::vector<uint8_t> createCMS(const Botan::AlgorithmIdentifier &digestAlg,
                               Botan::X509_Certificate &cert,
                               const Botan::AlgorithmIdentifier &keyAlg,
                               std::vector<uint8_t> &sigData,
                               std::vector<uint8_t> &signedAttributes)
{
  Botan::secure_vector<uint8_t> msgData;
  Botan::DER_Encoder encoder(msgData);
  encoder.start_cons(Botan::ASN1_Tag::SEQUENCE).encode(CMSVersion)
          .start_cons(Botan::ASN1_Tag::SET).start_cons(Botan::ASN1_Tag::SEQUENCE)
            .encode(digestAlg.get_oid()).end_cons().end_cons();
  Botan::OID dataOID(""1.2.840.113549.1.7.1"");
      encoder.start_cons(Botan::ASN1_Tag::SEQUENCE).encode(dataOID).end_cons();
  encoder.start_cons(Botan::ASN1_Tag::UNIVERSAL, Botan::ASN1_Tag::PRIVATE)
          .encode(cert).end_cons();
  encoder.start_cons(Botan::ASN1_Tag::SET);
  Botan::secure_vector<uint8_t> signerInfoData;
  Botan::DER_Encoder signerInfo(signerInfoData);
  signerInfo.start_cons(Botan::ASN1_Tag::SEQUENCE);
  signerInfo.encode(CMSVersion);
  signerInfo.start_cons(Botan::ASN1_Tag::SEQUENCE)
         .encode(cert.issuer_dn())
         .encode(Botan::BigInt(cert.serial_number())).end_cons();
  signerInfo.start_cons(Botan::ASN1_Tag::SEQUENCE).encode(digestAlg.get_oid())
          .end_cons();
  signerInfo.raw_bytes(signedAttributes);
  signerInfo.encode(keyAlg)
          .encode(sigData, Botan::ASN1_Tag::OCTET_STRING,
                  Botan::ASN1_Tag::OCTET_STRING, Botan::ASN1_Tag::UNIVERSAL);        
  signerInfo.end_cons();
  encoder.raw_bytes(signerInfoData).end_cons().end_cons();
  std::vector<uint8_t> resulData;
  Botan::DER_Encoder result(resulData);
  result.start_cons(Botan::ASN1_Tag::SEQUENCE)
          .encode(Botan::OID(""1.2.840.113549.1.7.2""))
          .start_cons(Botan::ASN1_Tag::UNIVERSAL, Botan::ASN1_Tag::PRIVATE)
          .raw_bytes(msgData).end_cons().end_cons();
  return resulData;
}

To calculate the hash and signature using PKCS#11, as follows:
 QFile input(m_content->text()), output(m_sigFile->text());
  if(!input.open(QFile::ReadOnly))
  {
    QMessageBox::critical(this, tr(""Error""),
                          tr(""Content file '%1' not open.\n""
                             ""Error message: %2"").arg(m_content->text())
                          .arg(input.errorString()));
    return;
  }
  Botan::PKCS11::PKCS11_X509_Certificate *cert = nullptr;
  Botan::Private_Key *key = nullptr;
  // извлечение ключа и сертификата из токена
  while(!input.atEnd())
    {
      static const qint64 maxLen = 1024;
      QByteArray data = input.read(maxLen);
      (*module)->C_DigestUpdate(session->handle(),
                                reinterpret_cast<uchar*>(data.data()),
                                data.size(), &rv);
      if(rv != Botan::PKCS11::ReturnValue::OK)
      {
        QMessageBox::critical(this, tr(""Error""),
                              tr(""Digest not run.\nError code: 0x%3"")
                              .arg(static_cast<int>(rv), 0, 16));
        delete key;
        delete cert;
        delete session;
        delete slot;
        delete module;
        return;
      }
    }
    digest.resize(102400);
    ulong digestLen;
    (*module)->C_DigestFinal(session->handle(), digest.data(), &digestLen, &rv);
    if(rv != Botan::PKCS11::ReturnValue::OK)
    {
      QMessageBox::critical(this, tr(""Error""),
                            tr(""Digest not start.\nError code: 0x%3"")
                            .arg(static_cast<int>(rv), 0, 16));
      delete key;
      delete cert;
      delete session;
      delete slot;
      delete module;
      return;
    }
    digest.resize(digestLen);
    {
      Botan::PKCS11::PKCS11_RNG rng(*session);
      std::unique_ptr<Botan::PK_Ops::Signature> signer =
          key->create_signature_op(rng,
                                   ""EMSA3(SHA-256)"",
                                   """");
      signer->update(digest.data(), digest.size());
      std::vector<uint8_t> attr = createAttributes(digest);
      auto signData = signer->sign(rng);
      for(uint8_t i : signData)
        signature.push_back(i);
      Botan::AlgorithmIdentifier digAlg(""SHA-256"", {});
      auto fileData = createCMS(digAlg, *cert, key->algorithm_identifier(),
                                signature, attr);
      output.write(reinterpret_cast<const char*>(fileData.data()),
                   fileData.size());
      output.close();
    }

When checking the received signature file, OpenSSL says 
Verification failure
140365848428992:error:04091068:rsa routines:int_rsa_verify:bad signature:../crypto/rsa/rsa_sign.c:220:
140365848428992:error:2E09A09E:CMS routines:CMS_SignerInfo_verify_content:verification failure:../crypto/cms/cms_sd.c:842:
140365848428992:error:2E09D06D:CMS routines:CMS_verify:content verify error:../crypto/cms/cms_smime.c:393:

","","53","<c++><pkcs#7><botan>","1","","0","2019-08-21 06:32:28","","0","","608639","","2019-08-21 06:32:28","2019-08-20 06:20:09",""
"57051363","Read xml PKCS7 response and embed to pdf C#","Have xml response which have random string in PKCS7 format. I need to embed that PKCS7 string to pdf.
What is the step to do the same in asp.net c#

Find Input xml file Input XML
Output
Digital signed pdf
Have tried below mentioned code
string str = ""which contains pkcs7 string"";
    string file = @""D:\Sourcefile.pdf"";
    string targetDir = @""D:\"";
    string fileName = ""targetFile.pdf"";
    PdfReader reader = new PdfReader(file);
    using (FileStream fout = new FileStream(targetDir + fileName, FileMode.Create))
    {
            PdfStamper stp = PdfStamper.CreateSignature(reader, fout, '\0', null, true);
            PdfSignatureAppearance pdfSignatureAppearance = stp.SignatureAppearance;
            byte[] sigbytes = Convert.FromBase64String(str);
            int contentEstimated = 8192 * 2;
            byte[] paddedSig = new byte[contentEstimated];
            Array.Copy(sigbytes, 0, paddedSig, 0, sigbytes.Length);
            PdfDictionary dic2 = new PdfDictionary();
            dic2.Put(PdfName.CONTENTS, new PdfString(paddedSig).SetHexWriting(true));
            Dictionary<PdfName, int> exc = new Dictionary<PdfName, int>();
            exc[PdfName.CONTENTS] = contentEstimated * 2 + 2;
            pdfSignatureAppearance.PreClose(exc);
            pdfSignatureAppearance.Close(dic2);
        }

But getting error as ""Unknown filter: {1}""
","","51","<c#><asp.net><digital-signature><pkcs#7>","0","","0","2019-07-22 12:16:54","","2","2","1520781","","2019-07-22 12:16:54","2019-07-16 06:38:25",""
"56016755","In C# Why signature visualization not showing signer name in pdf when signed by Itextsharp library?","Here is the code that create signature appearance before signing document.
PdfStamper stamper = PdfStamper.CreateSignature(reader, os, '\0');
// Creating the appearance
PdfSignatureAppearance appearance = stamper.SignatureAppearance;
appearance.Reason = ""Lorem apsum"";
appearance.Contact = """";
appearance.Location = """";
appearance.SignatureRenderingMode = PdfSignatureAppearance.RenderingMode.DESCRIPTION;
appearance.CertificationLevel = PdfSignatureAppearance.NOT_CERTIFIED;
appearance.SetVisibleSignature(new iTextSharp.text.Rectangle(10, 10, 149, 69), reader.NumberOfPages, ""Page1_Loc_5"");
//Creating the appearance

Here Contact property is empty that I want to fill with Name of the signer
I am getting name of the signer from userX509Certificate.
string responseXML = System.IO.File.ReadAllText(Server.MapPath(""~/ResponseSignatureXML.txt""));
XmlDocument xmlDoc = new XmlDocument();
xmlDoc.LoadXml(responseXML);
XmlElement EsignResp = xmlDoc.DocumentElement;
XmlNodeList nodeList = xmlDoc.GetElementsByTagName(""UserX509Certificate"");
Byte[] Certificate = Encoding.UTF8.GetBytes(nodeList[0].FirstChild.InnerText);

X509Certificate cert = new X509Certificate(Certificate);
string CertificateIssuedTo = cert.GetName();

@Note: this signer name is not available while preparing the signature appearance.  
After preparing file with appearance. calculate the hash of that file(i.e src file) and call external service, in response I am getting xmlsiganture, which I used to place the signature on my document.  
How do I append/change signature visualization in my src file before placing signature?  
code that place the signature on document.(signature response with pkcs7 signature)
XmlNodeList nodeList = xmlDoc.GetElementsByTagName(""Signatures"");
string signature = nodeList[0].FirstChild.InnerText;
using (PdfReader reader = new PdfReader(src))
{
    using (FileStream os = new FileStream(dest, FileMode.Create))
    {
        byte[] encodedSignature = Convert.FromBase64String(signature);
        IExternalSignatureContainer external = new MyExternalSignatureContainer(encodedSignature);
        MakeSignature.SignDeferred(reader, ""Page1_Loc_5"", os, external);
    }
}

Here Digitally signed by is showing blank instead of signer name.

Here is screenshot from documentation which I am referring for digital signature. C# Code   How it is showing Digitaly signed by Bruno Spiceman as signer name

","","50","<c#><itext><digital-signature><x509certificate><pkcs#7>","1","","0","2019-05-07 09:30:57","","6","1","5326667","","2019-05-07 09:30:57","2019-05-07 06:31:15","2019-05-07 15:38:31"
"38175804","How clean a X509 certified file","I made a routine to sign some proprietary binary files with PKCS#7 X509 certificates. The routine is functioning like a charm:
    public static byte[] SignFile(X509Certificate2Collection certs, byte[] data, bool Tipo_A3 = false)
    {
        try
        {
            ContentInfo content = new ContentInfo(data);
            SignedCms signedCms = new SignedCms(content, false);
            if (VerifySign(data))
            {
                signedCms.Decode(data);
            }
            foreach (X509Certificate2 cert in certs)
            {

                CmsSigner signer = new CmsSigner( cert);
                signer.IncludeOption = X509IncludeOption.WholeChain;
                signer.SignerIdentifierType = SubjectIdentifierType.IssuerAndSerialNumber;

                signer.SignedAttributes.Add(new Pkcs9SigningTime(System.DateTime.Now));

                if (Type_A3 == true)
                {
                    signedCms.ComputeSignature(signer, false);
                }
                else
                {
                    signedCms.ComputeSignature(signer);
                }

            }
            return signedCms.Encode();
        }
        catch (Exception ex)
        {
            MessageBox.Show(""Error: "" + ex.Message);
            return null;
        }

    }

My problem is related to RECOVER the original info. An 1Kb file will be transformed in a ~8Kb file, since the signature in within this file.
I need to read the data without the signature/certificate within the file, I mean, I need to recover the original data before its signing - and I don't know how to do it.
I saw that the signed file has bytes BEFORE and AFTER its original contents (I made a test using a tiny TXT file with ""abcd""), but I'm affraid to consider ever the same data length before and after the original data to extract it.
I know I get the original content using this function, where DATA is the signed file:
 using System;
 using System.Collections.Generic;
 using System.Security.Cryptography.X509Certificates;
 using System.Security.Cryptography.Pkcs;
 using System.IO;
 using System.Windows.Forms;

     public static Int VerifyContentInfo(byte[] data)
        {
           try
           {
            SignedCms signed = new SignedCms();
            signed.Decode(data);
            signed.CheckSignature(true);

            return signed.ContentInfo.Content.Length

           }
             catch
           {
             return null;
           }

        }

The problem: even knowing the length of the original data within the signed file, how securely locate and extract it using a .NET function? 
Thanks for any help!
","signed.ContentInfo.Content (whose value you took the length of) is the original content.
","48","<c#><.net><x509certificate><pkcs#7>","0","1","1","2016-07-12 14:49:42","38332223","4","","","","","2016-07-04 01:24:05",""
"57477845","128 bit AES decryption PKCS7 padding problems","I'm trying to convert this c# function to a python script, but am running into trouble. I seem to be getting the same byte values as my c# function for my converted values but when i try and remove padding on my decoded 64 byte string, I get told ""ValueError: Input is not padded or padding is corrupt"". Looking for any help
private static string TestDecrypt(string input)
    {
        string result = """";
        //The decryption needs to only handle one layer of Base64 encoding.
        var base64EncodedBytes = System.Convert.FromBase64String(input);
        ///string decoded = System.Text.Encoding.UTF8.GetString(base64EncodedBytes);
        using (MemoryStream ms = new MemoryStream())
        {

            using (RijndaelManaged AES = new RijndaelManaged())
            {
                AES.KeySize = 128;
                AES.BlockSize = 128;

                var testIdBytes = ConvertLongToByteArr(testId);

                var bigArray = new byte[16];
                testIdBytes.CopyTo(bigArray, 8);

                byte[] IVbytes = Encoding.ASCII.GetBytes(salt).Reverse().ToArray();

                AES.Mode = CipherMode.CBC;
                AES.Padding = PaddingMode.PKCS7;

                AES.IV = IVbytes;
                AES.Key = bigArray;

                using (var cs = new CryptoStream(ms, AES.CreateDecryptor(), CryptoStreamMode.Write))
                {
                    cs.Write(base64EncodedBytes, 0, base64EncodedBytes.Length);
                    cs.Close();
                }
                var resultBytes = ms.ToArray();
                Console.WriteLine(""After decryption : "" + string.Concat(resultBytes.Select(b => b.ToString(""X2"")).ToArray()));
                result = Convert.ToBase64String(resultBytes);

                testClass tc = new testClass(resultBytes);

            }
        }
        return result;
    }

Python Code
 def Decrypt(self):
    #encrypted base 64 string decoded
    b64decoded = base64.b64decode(""2YK4Eev6GE7Tu+bpKX3V9iFrMavPMYQPZxNoHQBUiFgZKId2WEndvyOzvpIly4n2pVKUK6XqYX26pJzyHvT1bw=="")

    IVBytes = self.ConvertStringToBytes(self.Salt)[::-1]
    key = '\x00' * 8 + self.ConvertLongToBytes(self.EventId) + ('\x00' * 4)
    encoder = PKCS7Encoder()
    iv =  self.Salt[::-1].encode('ascii')

    encryptor = AES.new(key, AES.MODE_CBC, iv)

    encoder = PKCS7Encoder()
    depadded = encoder.decode(""b64decoded "")
    decrypted= encryptor.decrypt(depadded)

the PKCS7 library Im using
import binascii
import StringIO

class PKCS7Encoder(object):
     '''
     RFC 2315: PKCS#7 page 21
     Some content-encryption algorithms assume the
     input length is a multiple of k octets, where k > 1, and
     let the application define a method for handling inputs
     whose lengths are not a multiple of k octets. For such
     algorithms, the method shall be to pad the input at the
     trailing end with k - (l mod k) octets all having value k -
     (l mod k), where l is the length of the input. In other
     words, the input is padded at the trailing end with one of
     the following strings:

              01 -- if l mod k = k-1
             02 02 -- if l mod k = k-2
                         .
                         .
                         .
           k k ... k k -- if l mod k = 0

     The padding can be removed unambiguously since all input is
     padded and no padding string is a suffix of another. This
     padding method is well-defined if and only if k < 256;
     methods for larger k are an open issue for further study.
     '''
     def __init__(self, k=16):
         self.k = k

     ## @param text The padded text for which the padding is to be removed.
     # @exception ValueError Raised when the input padding is missing or corrupt.
     def decode(self, text):
         '''
         Remove the PKCS#7 padding from a text string
         '''
         nl = len(text)
         val = int(binascii.hexlify(text[-1]), 16)
         if val > self.k:
             raise ValueError('Input is not padded or padding is corrupt')

         l = nl - val
         return text[:l]

     ## @param text The text to encode.
     def encode(self, text):
         '''
         Pad an input string according to PKCS#7
         '''
         l = len(text)
         output = StringIO.StringIO()
         val = self.k - (l % self.k)
         for _ in xrange(val):
             output.write('%02x' % val)
         return text + binascii.unhexlify(output.getvalue())

","","46","<c#><python><python-2.7><aes><pkcs#7>","1","","0","2019-08-13 12:35:06","","1","","","","","2019-08-13 12:35:06",""
"38668481","How remove a single X509 signature?","I'm trying to remove just the last signature of a file signed by SignedCMS.
The function is called RemoveSignature and it requires an index, which reflects the signature I need to discard from the signed data.
I didn't find any help in Google about how to utilize it.
I made the following code, where data is the signed file in a byte array, which contains three X509 signatures:
        Dim Contents As New ContentInfo(data)
        Dim signed As New SignedCms(Contents)
        signed.Decode(data)
        signed.RemoveSignature(0)
        dim ResultCode as byte() = signed.ContentInfo.Content

The code functions normally (no errors at all) but always removes all signatures within the file! Even if I change the index from 0 to 1 or 2, the result is always the file data  clean of all its signatures!
Does anyone knows how to remove just the signature pointed by the index of that function (RemoveSignature)?
Thanks for any help!
","","44","<c#><.net><pkcs#7>","1","","0","2016-07-29 22:41:50","","0","","","","","2016-07-29 22:41:50",""
"56611921","Remove first part of xml file, cannot be serialized","I have an xml file it start like: 
'''some non ascii character'''
<b:FatturaElettronica xmlns:b=""#"">
  <FatturaElettronicaHeader>
    <DatiTrasmissione>
      <IdTrasmittente>
        <IdPaese>IT</IdPaese>

i need to remove all until 
<FatturaElettronicaHeader>

now the code is:
import xml.etree.ElementTree as ET
import xml.etree.ElementTree as ETree
from lxml import etree

parser = etree.XMLParser(encoding='utf-8', recover=True, remove_comments=True, resolve_entities=False)
tree = ETree.parse('test.xml', parser)

root = tree.getroot()

print etree.tostring(root)

and give me:
Traceback (most recent call last):
  File ""xml2.py"", line 14, in <module>
    print etree.tostring(root)
  File ""src/lxml/etree.pyx"", line 3350, in lxml.etree.tostring
TypeError: Type 'NoneType' cannot be serialized.

whitout the first part of xml file it work.
TY
","you could use the find() function to search for the first bracket.
import xml.etree.ElementTree as ET

with open ('...XMLFILE.xml', 'r') as file:
    filestring = file.read()

XML_start = filestring.find('<')
print(XML_start) #gives 31

tree = ET.fromstring(filestring[XML_start:])

for i in tree.iter():
    print(i.tag) #gives {#}FatturaElettronica, FatturaElettronicaHeader, ... 

but also your xml-file has to be correct:
'''some non ascii character'''
<b:FatturaElettronica xmlns:b=""#"">
  <FatturaElettronicaHeader>
    <DatiTrasmissione>
      <IdTrasmittente>
        <IdPaese>IT</IdPaese>
        </IdTrasmittente>
    </DatiTrasmissione>
</FatturaElettronicaHeader>
</b:FatturaElettronica>

","43","<python><django><xml><parsing><pkcs#7>","0","0","1","2019-06-17 07:53:54","","6","","2226988","","2019-06-16 13:43:31","2019-06-15 15:54:50",""
"54626550","What does SignedCms.decode() do in c#","I want to implement SignedCms.decode() function in c++ but I don't know what does it do like code? all I know is that SignedCms.encode() generate BER encoded bytes and I am not even sure about that.
Any help is greatly appreciated.
Thanks in advance. 
","I wouldn't recommend that you implement your own SignedCms.decode since that would involve implementing an ASN.1 reader which is a complex task.
If you are on Windows OS, i would recommend taking a look at this: CryptMsgOpenToDecode function
","41","<c#><c++><openssl><pkcs#7>","0","0","1","2019-02-11 08:39:44","54626643","3","","","","","2019-02-11 08:32:49",""
"58428955","Encrypted in java (Android) failing in python AES decryption","I am trying to decrypt a java AES encrypted code into python script but it's failing to decrypt completely, means some of initial data does not decrypted but rest of data decrypted fine. Below is python code - 
decryptor = Cipher(
            algorithms.AES(self._encryption_key),
            modes.CBC(initialization_vector),
            self._backend
        ).decryptor()
        plaintext_padded = decryptor.update(ciphertext)
        try:
            plaintext_padded += decryptor.finalize()
        except ValueError:
            raise InvalidToken
        unpadder = padding.PKCS7(algorithms.AES.block_size).unpadder()

        unpadded = unpadder.update(plaintext_padded)
        try:
            unpadded += unpadder.finalize()
        except ValueError:
            raise InvalidToken

And below is my java code that can ecnrypt and decrypt successfully it's own generated cipher to plain and vice versa. 
aesCipher = Cipher.getInstance(""AES/CBC/PKCS7Padding"");
.
.
static SecretKey generateSecretKey() {

        SecretKeyFactory pbeKeyFactory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1And8bit"");
        SecretKey secretKey;
        try {
            SecureRandom rand = new SecureRandom();
            byte[] salt = new byte[32];
            rand.nextBytes(salt);
            // WORK-AROUND change rand.nextInt(2048) to rand.nextInt(2047) + 1 to genterate 1-2048;
            int iterationCount = rand.nextInt(2047) + 1;
            KeySpec pbeKeySpec = new PBEKeySpec(new String(rand.generateSeed(24)).toCharArray(), salt, iterationCount, 256);
            SecretKey pbeKey = pbeKeyFactory.generateSecret(pbeKeySpec);
            secretKey = new SecretKeySpec(pbeKey.getEncoded(), ""AES"");
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        return secretKey;
    }

    static SymmetricEncryptionEntry symmetricEncrypt(SecretKey key, String data) {

        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS7Padding"");
        SymmetricEncryptionEntry entry;
        try {
            byte[] iv = generateIv(cipher.getBlockSize());
            IvParameterSpec ivParams = new IvParameterSpec(iv);
            cipher.init(Cipher.ENCRYPT_MODE, key, ivParams);
            byte[] cipherText = cipher.doFinal(data.getBytes(StandardCharsets.UTF_8));
            entry = new SymmetricEncryptionEntry(cipherText , iv);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        return entry;
    }

    private static byte[] generateIv(int length) {
        byte[] b = new byte[length];
        new SecureRandom().nextBytes(b);

        return b;
    }

Below is the real plain text and decrypted plain text - 
expected by python decryption 
b'{""auth_key"":""eyJhbGciOiJSUzI1NiIsImtpZCI6ImZhMWQ3NzBlZWY5ZWFhNjU0MzY1ZGE5MDhjNDIzY2NkNzY4ODkxMDUiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL3NlY3VyZXRva2VuLmdvb2dsZS5jb20vY2hhdHEtc3RhZ2luZyIsImF1ZCI6ImNoYXRxLXN0YWdpbmciLCJhdXRoX3RpbWUiOjE1NzExMjM5NDcsInVzZXJfaWQiOiJyQ3N0aTBoMEczVUZmVWk2Q1oxYjNJOEJmOVIyIiwic3ViIjoickNzdGkwaDBHM1VGZlVpNkNaMWIzSThCZjlSMiIsImlhdCI6MTU3MTIwMjY4OSwiZXhwIjoxNTcxMjA2Mjg5LCJwaG9uZV9udW1iZXIiOiIrODQxMjM0NTY3ODIiLCJmaXJlYmFzZSI6eyJpZGVudGl0aWVzIjp7InBob25lIjpbIis4NDEyMzQ1Njc4MiJdfSwic2lnbl9pbl9wcm92aWRlciI6InBob25lIn19.0OCskQkPKq5yxku02PuBgoZMFHgMfZBVPptQaVExrWYRDrEM3uUwDrDXAWiqA6L9i54fg_7dfWBwnPvQ71g4Lzsft60_JycS0-C_kSlCBxVSlX5J8WDTwNGm6p5-QDxN2bU9fwglzmggMst-4A3tLlPLQRnttuishFKhgr40ABHX8tksNfbs626YhTiwY6vD6_Gn0k7X7jh1HsHAUUcnPZq2tCXRFUKNDmF_4lC6vc7-Cs5zHpIlKtaAXoQBRe9HYsEvYfK2tOey8T_3mDC_Eh36fcve6HCOQBt9EtFPRIUcKZgFDWPoG70t-ABk66Lr2BjejbOsBBnA9R7492t6Sg"",""correlation_id"":""1fb572ff331346b7"",""user_id"":""rCsti0h0G3UFfUi6CZ1b3I8Bf9R2""}'

Received by python decryption
b'\xae\xfa\x9c\xb3\x8c+\x17\xfeI\xc9\xb8\x0b\x0e@\xac\rhbGciOiJSUzI1NiIsImtpZCI6ImZhMWQ3NzBlZWY5ZWFhNjU0MzY1ZGE5MDhjNDIzY2NkNzY4ODkxMDUiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL3NlY3VyZXRva2VuLmdvb2dsZS5jb20vY2hhdHEtc3RhZ2luZyIsImF1ZCI6ImNoYXRxLXN0YWdpbmciLCJhdXRoX3RpbWUiOjE1NzExMjM5NDcsInVzZXJfaWQiOiJyQ3N0aTBoMEczVUZmVWk2Q1oxYjNJOEJmOVIyIiwic3ViIjoickNzdGkwaDBHM1VGZlVpNkNaMWIzSThCZjlSMiIsImlhdCI6MTU3MTIwMjY4OSwiZXhwIjoxNTcxMjA2Mjg5LCJwaG9uZV9udW1iZXIiOiIrODQxMjM0NTY3ODIiLCJmaXJlYmFzZSI6eyJpZGVudGl0aWVzIjp7InBob25lIjpbIis4NDEyMzQ1Njc4MiJdfSwic2lnbl9pbl9wcm92aWRlciI6InBob25lIn19.0OCskQkPKq5yxku02PuBgoZMFHgMfZBVPptQaVExrWYRDrEM3uUwDrDXAWiqA6L9i54fg_7dfWBwnPvQ71g4Lzsft60_JycS0-C_kSlCBxVSlX5J8WDTwNGm6p5-QDxN2bU9fwglzmggMst-4A3tLlPLQRnttuishFKhgr40ABHX8tksNfbs626YhTiwY6vD6_Gn0k7X7jh1HsHAUUcnPZq2tCXRFUKNDmF_4lC6vc7-Cs5zHpIlKtaAXoQBRe9HYsEvYfK2tOey8T_3mDC_Eh36fcve6HCOQBt9EtFPRIUcKZgFDWPoG70t-ABk66Lr2BjejbOsBBnA9R7492t6Sg"",""correlation_id"":""1fb572ff331346b7"",""user_id"":""rCsti0h0G3UFfUi6CZ1b3I8Bf9R2""}'

Basically, the beginning is messed up:
{""auth_key"":""eyJ != \xae\xfa\x9c\xb3\x8c+\x17\xfeI\xc9\xb8\x0b\x0e@\xac\r

Let me know in comment if I missed anything in question :-)
","","40","<java><python><encryption><aes><pkcs#7>","0","","0","2019-10-18 05:32:33","","6","","3448003","","2019-10-18 05:32:33","2019-10-17 09:11:47",""
"57707117","how to encrypt zip file with p7b certificate and sign it with p12","I have a p7b file which includes the public key the goal is to encrypted a zip file with this public key and change the file to .zip.encrypted and then use a .p12 file to sign the content
Questions 
Right now I'm trying to figure out how this works. Is this just pkcs#7 encryption or do I call it CMS Evelope? Since in the p7b file i only have a public rsa key how would I be able to encrypt a whole zip file with it? As far as I know you can only encrypt small bytes with RSA encryption. Is there somekind of bytestream that I can use to encrypt every single byte of a zip file by it self? Or do I generate somehow a AES key out of the public RSA key from the p7b file? Do I need to add the p7b certificate to my windows account to get access to the data inside? 
What I've tried
I tried the .net recources and couldn't figure out how to get what I want, then I googled a lot found many examples how people encrypt a short string and tried to adapt but it was never working for me.
Now I'm using Bouncy Castle for c# and I think I was able to read the public key from my p7b file when I try to encrypt a normal short string, it seems to work. But when I use my zip file then I get an exception that my byte array is too big. The zip file I use for this test is only 3KB, the real files later will be up to ~200MB
So I guess the Way im using the p7b file aswell as bouncy castle for my problem is wrong.
My Code
 var p7bFilePath = @""key\Test.p7b"";
 var text = @""zipfile"";
 var bytesToEncrypt = File.ReadAllBytes(@""zip\test.zip"");
 var certi = ReadCertificate(p7bFilePath);
 var encodedPublicKey = certi.GetPublicKey();
 var encryptEngine = new Pkcs1Encoding(new RsaEngine());
 encryptEngine.Init(true, encodedPublicKey);
 var encrypted = Convert.ToBase64String(encryptEngine.ProcessBlock(bytesToEncrypt, 0, bytesToEncrypt.Length));

 Console.WriteLine(encrypted);

","Okay since I asked this question before just deleted it and reworte it a little with the hope somebody might help me I think I came to the solution with the help of a collegue:
using Org.BouncyCastle.Asn1;
using Org.BouncyCastle.Cms;
using Org.BouncyCastle.Pkcs;
using Org.BouncyCastle.X509;
using System.IO;

namespace pkchwencrypting
{
    class Program
    {
        static void Main(string[] args)
        {
            var certificateData = File.ReadAllBytes(""YOUR_p7b_FILE"");
            var cert = new X509CertificateParser().ReadCertificate(certificateData);
//I just wanted to know if I can see the publicKey somehow            
//var publicKey = cert.GetPublicKey();

            var store = new Pkcs12Store(File.OpenRead(""YOUR_p12_File""), ""test"".ToCharArray());
            var privateKey = store.GetKey(""THE_NAME_OF_KEY_YOU_WANT_TO_GET"").Key;

            var signedDataGen = new CmsSignedDataGenerator();
            signedDataGen.AddSigner(privateKey, cert, CmsSignedDataGenerator.EncryptionRsa, CmsSignedDataGenerator.DigestSha512);

            var zipContent = new CmsProcessableFile(new FileInfo(""YOUR_DATA_FILE""));
//For me a zip
            var signedData = signedDataGen.Generate(zipContent, true);

            var envDataGen = new CmsEnvelopedDataGenerator();
            envDataGen.AddKeyTransRecipient(cert);

            var sData = new CmsProcessableByteArray(signedData.GetEncoded());
            var enveloped = envDataGen.Generate(sData, CmsEnvelopedDataGenerator.DesEde3Cbc);

            var dos = new DerOutputStream(File.OpenWrite(""YOUR_DATA_FILE.zip.encrypted.sig)""));
            var bytesToWrite = enveloped.GetEncoded();
            dos.Write(bytesToWrite, 0, bytesToWrite.Length);
            dos.Flush();
            dos.Close();


        }

    }
}

This might help somebody, maybe somebody can have a look at it, if this actually makes sense but it seems to do what it supposed to do. 
","38","<c#><bouncycastle><pkcs#7><pkcs#12>","0","0","1","2019-08-30 10:41:05","57725227","0","","9289362","","2019-08-30 10:34:08","2019-08-29 09:27:59",""
"53699035","iOS PKCS#7 how to decrypt P7M file ? have .pfx file now","as the title said.
I have the .pfx file and .p7m file ,how can I decrypt the it ? 
in github , I searched the code 
https://github.com/zkrige/iOS-pkcs7-decrypt
but can't do it.
platform : iOS
","","37","<ios><encryption><pkcs#7>","0","","0","2018-12-10 03:15:35","","2","","","","","2018-12-10 03:15:35",""
"41033840","How to use openssl to add the CA to the trusted chain within the PFX","First of all, I'd like to make it clear this is my very first time dealing with certificates/keys/pfx/etc.. so please correct me if I'm wrong :)
I'm having troubles add the CA of the server im connecting to, to my trusted chain using openssl in a PFX.
After creating the PFX I successfully added it to my computer using mmc.exe but found out its not gonna be useful as soon as i'll get the application running on a linux server.
I've been searching all over the net to find the correct command but couldnt find any.
A friend assumed I'll have to first export the certificate out of the existing pfx, then add the CA to its' trusted chain and generate a new pfx with it.
Unfortunately, couldn't find how to add to a certificate's trusted chain either.
Any help would be much appreciated! hope the question is clear enough, let me know if i could add anything to help you help me!
","","36","<windows><ssl><certificate><pfx><pkcs#7>","0","","0","2016-12-08 09:28:43","","2","","608639","","2016-12-08 09:28:43","2016-12-08 07:16:24",""
"53536775","OpenSSL library sign data using PKCS7","I want to sign a PDF document using OpenSSL library. I already know how to put signed data properly to the pdf. So I have instances of X509 and EVP_PKEY, content in unsigned char and I want to get DER-encoded ASN1 data by signing the pdf content to put it into the pdf body. It seems like I need to use PKCS7, but I couldn't understand how exactly.
Would be grateful for some code examples or explanation. Maybe this approach is not correct at all.
","","32","<c><openssl><signing><pkcs#7>","0","","0","2018-11-29 10:23:43","","1","","","","","2018-11-29 10:23:43",""
"57135584","Kleopatra: Decryption failed: invalid data","For encrypting files I use PKCS # 7 and the Javascript bundle forge.pki.
var forge = require('node-forge');

var contentBuffer = forge.util.createBuffer( forge.util.decode64( ""fasdasd asdasdasda"" ));

var cert = forge.pki.certificateFromPem(certPem);

var p7 = forge.pkcs7.createEnvelopedData();
p7.addRecipient(cert);
p7.content = contentBuffer;
console.log(""Encrypt..."");
p7.encrypt();

var asn1Cert = p7.toAsn1();

var derBuffer = forge.asn1.toDer(asn1Cert);

var p7mContent = derBuffer.toHex();

console.log(p7mContent);

I copy the hex value into my Java class as a string constant. Java saves then converts this into a .p7m file and stores it locally for me.
public void writeDocumentContent(String filename) throws Exception {

        byte[] encryptedMessage = getP7MBytes(hex);

        InputStream inputStream = new ByteArrayInputStream(encryptedMessage);

        handleTransfer(inputStream, TransferKanal.HTML5);

    }

    private static byte[] getP7MBytes(String p7m) {
        int len = p7m.length();
        byte[] data = new byte[len / 2];
        for (int i = 0; i < len; i += 2) {
            data[i / 2] = (byte) ((Character.digit(p7m.charAt(i), 16) << 4) + Character.digit(p7m.charAt(i + 1), 16));
        }
        return data;
    }

    private void handleTransfer(InputStream inputStream, TransferKanal kanal) throws Exception {
        String path = ""C:TEMP/padline"";
        createDirectory(path);
        String filename = ""example."" + kanal.getFileExtension();
        File targetFile = new File(path, filename);
        provideTransferData(inputStream, targetFile);
    }

    private void provideTransferData(InputStream inputStream, File targetFile) throws Exception {
        try (InputStream bInputStream = new BufferedInputStream(inputStream, 20 * 8192)) {
            provide(bInputStream, targetFile);
        } catch (IOException e) {
            throw new Exception(""error while reading/writing transfer data"", e);
        }
    }

    private boolean createDirectory(String directory) {
        File file = new File(directory);
        if (!file.exists()) {
            file.mkdirs();
            return true;
        }
        return false;
    }

    private void provide(InputStream is, File finalFile) throws Exception {
        try {

            File destFile   = new File(finalFile.getAbsolutePath());

            FileOutputStream buffer = null;
            try {
                buffer = new FileOutputStream(destFile);

                int nRead;
                byte[] buf = new byte[2 * 16384];

                while ((nRead = is.read(buf, 0, buf.length)) != -1) {
                    buffer.write(buf, 0, nRead);
                }

            } catch (Exception e) {
                throw new Exception(""provision location corrupted"", e);
            } finally {
                if (buffer != null) {
                    buffer.close();
                }
            }

        } catch (IOException e) {
            throw new Exception(""error copying file"", e);
        }
    }

Before, I create a bundle of the certificate and the private key via openSSL with following command:
openssl pkcs12 -export -inkey private.key -in public.cert -out certificate.pfx

and imported it into Kleopatra as a .pfx file. Then I have the generated (encrypted) p7m file to decrypt in Cleopatra and pushed the following error message:
Decryption failed: invalid data
","","31","<javascript><java><pkcs#7><forge>","2","","0","2019-07-21 18:44:50","","0","","8670262","","2019-07-21 18:44:50","2019-07-21 17:44:33",""
"55508441","war file deployment on tomcat 8.5","I am using jenkins on centos 7 and building java spring build, here result and build is showing success but I am getting error :

org.codehaus.cargo.container.tomcat.internal.TomcatManagerException:
  The Tomcat Manager responded ""FAIL - Deployed application at context
  path [/erp] but context failed to start

And at last:

Build step 'Deploy war/ear to a container' marked build as failure
  Finished: FAILURE

I have tried war project working when i deploy directly on tomcat 8.5
","","28","<pkcs#7>","0","","0","2019-04-04 08:29:10","","3","","11147851","","2019-04-04 08:29:10","2019-04-04 05:24:57",""
"55384753","AES between C# and PHP (or Javascript/ or Python)","Client use C# to Encrypt String
And My application need to generate the same Encrypt String to match his Encrypt String
But I only can PHP/Javascript/Python
How can I write PHP or Javascript or Python code to generate the same Encrypt String
For example. Client use ""TAIEX"" will turn to ""JrmEfbwGlF7w67KemS2zWw==""
Some Info: AES, CBC, Rijndael, PKCS7, KeySize = 256, BlockSize = 128
Following C# code was provided from Client
internal string GetAESEncryptString(string inputString)
{
    string password = @""076FD250140F11E2892E0800200C9A66"";
    string saltString = @""5738C760140F11E2"";
    byte[] binputString = Encoding.UTF8.GetBytes(inputString);
    byte[] saltBytes = Encoding.UTF8.GetBytes(saltString);
    string encryptedData = null;

    try
    {
        RijndaelManaged aes = new RijndaelManaged();
        Rfc2898DeriveBytes key = new Rfc2898DeriveBytes(password, saltBytes, 100);
        aes.Mode = CipherMode.CBC;
        aes.Padding = PaddingMode.PKCS7;
        aes.KeySize = 256;
        aes.Key = key.GetBytes(32);
        aes.BlockSize = 128;
        aes.GenerateIV();
        aes.IV = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        //aes.IV = key.GetBytes(16);

        ICryptoTransform encryptor = aes.CreateEncryptor();
        MemoryStream memoryStream = new MemoryStream();
        CryptoStream cryptoStream = new CryptoStream(memoryStream, encryptor, CryptoStreamMode.Write);
        cryptoStream.Write(binputString, 0, binputString.Length);
        cryptoStream.FlushFinalBlock();
        cryptoStream.Close();

        byte[] encryptBytes = memoryStream.ToArray();
        encryptedData = Convert.ToBase64String(encryptBytes);
    }
    catch (Exception ex)
    {
        throw ex;
    }
    return encryptedData;
}

Thank you for taking the time. I thank you from the bottom of my heart.
","","27","<python-2.7><aes><pkcs#7><cbc-mode>","0","","0","2019-03-27 19:05:04","","1","","","","","2019-03-27 19:05:04",""
"57326772","How can I use EnvelopedCms class to decrypt data, searching for certificates in multiple certificate stores?","I'm converting the existing C# code which was written with interop and native calls to 100% managed code. The code is the API library which lets the caller to decrypt S/MIME messages by passing the encrypted data and the array of certificate stores where to search for the certificates.
With Win32 API (used by the current implementation of the API library I'm working on), CryptDecryptMessage accepts CRYPT_DECRYPT_MESSAGE_PARA structure which lets me specify the array of certificate stores to search (rghCertStore field). I can't find out how I can reproduce the same with EnvelopedCms class.
EnvelopedCms.Decrypt method overloads let me specify the collection of certificates to search but I need the ability to specify the collection of certificate stores. Is it possible?
","","25","<c#><pkcs#7><smime>","1","","0","2019-08-02 13:30:51","","5","","695182","","2019-08-02 13:30:51","2019-08-02 12:45:23",""
"55256138","PHP OpenSSL Verify P7 no detach","I'm trying to translate the following openssl command to an openssl php function. The openssl cmd command executes and verifies successfully but my tries working with php functions fail (openssl_pkcs7_verify):
openssl smime -verify -in encrypted.p7 -inform pem -noverify > decrypted.txt

The encrypted.p7 file is signed with openssl -nodetach option and its content is:
-----BEGIN PKCS7-----
MIIEFgYJKoZIhvcNAQcCoIIEBzCCBAMCAQExCzAJBgUrDgMCGgUAMD4GCSqGSIb3
DQEHAaAxBC9UaGlzIG1lc3NhZ2UgY291bGQgb25seSBoYXZlIGJlZW4gc2VudCBi
eSBtZS4NCqCCAgQwggIAMIIBaaADAgECAgkA0oEkvc7szMwwDQYJKoZIhvcNAQEF
BQAwGTEXMBUGA1UEAwwOUEtDUyM3IGV4YW1wbGUwHhcNMTMwNDEyMjAzMzE4WhcN
MTMwNTEyMjAzMzE4WjAZMRcwFQYDVQQDDA5QS0NTIzcgZXhhbXBsZTCBnzANBgkq
hkiG9w0BAQEFAAOBjQAwgYkCgYEAnvFUnLFlzYScwPXCTBdp+e3pBAV/wFc10gq2
bKCcHg6WgWrnW39HJxaYdn6Edzt8ipdTvX2Kl6iQXtjAIs8oI7YBdqxZMknddM1M
mvbe0HVYPoF0lIWiLLIySYeV6GC2X0eYyWE1FLs1qJsRSrHA8iHlDH4gngGMu71d
WCEbXg8CAwEAAaNQME4wHQYDVR0OBBYEFLLtIWViOo4+XrllLngVkMMU78W2MB8G
A1UdIwQYMBaAFLLtIWViOo4+XrllLngVkMMU78W2MAwGA1UdEwQFMAMBAf8wDQYJ
KoZIhvcNAQEFBQADgYEAG1PiV0P2iZhh88juujpr/BrlMm64BlX1hrsLyyNR6e85
iBC4kFJNndkFiCFz31EAJkzoMIUdgn07cENk2KAjf3BIrgBaeY6mp94s6lpRcfK7
lEsfbyADOQqszCuzadMHZd44XReMaf43Kw/WYwVmsHpBDpzgAwH1sxtSKcHnFmox
ggGnMIIBowIBATAmMBkxFzAVBgNVBAMMDlBLQ1MjNyBleGFtcGxlAgkA0oEkvc7s
zMwwCQYFKw4DAhoFAKCB2DAYBgkqhkiG9w0BCQMxCwYJKoZIhvcNAQcBMBwGCSqG
SIb3DQEJBTEPFw0xMzA0MTIyMTExMTVaMCMGCSqGSIb3DQEJBDEWBBS0KhYhWkxR
nvCUyavULWwbRXaF1jB5BgkqhkiG9w0BCQ8xbDBqMAsGCWCGSAFlAwQBKjALBglg
hkgBZQMEARYwCwYJYIZIAWUDBAECMAoGCCqGSIb3DQMHMA4GCCqGSIb3DQMCAgIA
gDANBggqhkiG9w0DAgIBQDAHBgUrDgMCBzANBggqhkiG9w0DAgIBKDANBgkqhkiG
9w0BAQEFAASBgHq2NEUYm1csunOIOlekNBPW12EWMU3lTK+phxPtKZl+y2233NLN
TWaLUaRF7ePjapr71IYlrLfse9Kv8xl8o2QU+XMhj1p2I6Ng0lt3VfwjgJ5isidk
GM/suaYFITr4PxGlhZKEtoYQh4BOr0r0+iy6aFJGKAhn4slB6qdhn025
-----END PKCS7-----

Reference: http://qistoph.blogspot.com/2013/04/pkcs7-and-openssl.html
","","23","<php><openssl><verify><pkcs#7><smime>","0","","0","2019-03-20 08:52:37","","0","","3865565","","2019-03-20 08:52:37","2019-03-20 08:10:35",""
"34443523","PyCrypto AES decryption weirdness - python 2.7","I'm encrypting files with AES using PyCrypto, but when I decrypt them they have garbage characters at the head of the file. Here's a stripped down example that encrypts a text file of Moby Dick and then attempts to decrypt it:
from Crypto.Cipher import AES
from os import urandom

key = urandom(32)
iv = urandom(16)
aes = AES.new(key, AES.MODE_CBC, iv)

def encrypt_data(chunk):
    padding = AES.block_size
    if len(chunk):
        padding = AES.block_size - (len(chunk) % AES.block_size)
    return aes.encrypt(chunk + chr(padding)*padding)

with open('melville-moby-106.txt', 'r') as infile:
    with open('/tmp/test.tmp', 'w') as outfile:
        chunk = infile.read()
        while chunk:
            outfile.write(encrypt_data(chunk))
            chunk = infile.read()


with open('/tmp/test.tmp', 'r') as infile:
    with open('melville-moby-106.txt.new', 'w') as outfile:
        chunk = infile.read()
        while chunk:
            data = aes.decrypt(chunk)
            data = data[0:-ord(data[-1])]
            outfile.write(data)
            chunk = infile.read()

After I've run the script, I have these files:
-rw-rw-r--  1 brian  brian  1223687 Dec 23 15:11 melville-moby-106.txt
-rw-rw-r--  1 brian  brian  1223687 Dec 23 15:40 melville-moby-106.txt.new
-rw-rw-r--  1 brian  brian  1223696 Dec 23 15:40 test.tmp

The size looks right, but the checksums don't match:
96e829710ef8966d6eaef34b439cae6b  melville-moby-106.txt
94b94e495d449dad919083029a66b675  melville-moby-106.txt.new

If I look at the files, here's what I see:
$ head -n 1 melville-moby-106.txt
c                                      1851

$ head -n 1 melville-moby-106.txt.new 
Z�x#8i���[��`j�6                       1851

The rest of the file's contents look OK.
Can someone tell me what I'm doing wrong?
Thanks
","","22","<python><python-2.7><encryption><aes><pkcs#7>","2","","0","2015-12-23 20:51:02","","1","","","","","2015-12-23 20:51:02","2015-12-23 21:00:53"
"58502228","Detached Digital signature verification fails with exception no such algorithm: SHA256WITHECDSA for provider SUN","I am signing some content in detached mode with external signature API, the external API takes content hash (SHA256)and returns signed bytes in PKCS#7 (Base64 encoded) and signers X509 certificate. Now I want to validate the signature, I am using following code for that.
Pom.xml
<?xml version=""1.0"" encoding=""UTF-8""?>
<project xmlns=""http://maven.apache.org/POM/4.0.0""
         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
    <modelVersion>4.0.0</modelVersion>

    <groupId>nic.oad</groupId>
    <artifactId>verifysig</artifactId>
    <version>1.0-SNAPSHOT</version>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>8</source>
                    <target>8</target>
                </configuration>
            </plugin>
        </plugins>
    </build>
    <dependencies>
        <!-- https://mvnrepository.com/artifact/org.bouncycastle/bcpkix-jdk15on -->
        <dependency>
            <groupId>org.bouncycastle</groupId>
            <artifactId>bcprov-jdk15on</artifactId>
            <version>1.63</version>
        </dependency>
        <dependency>
            <groupId>org.bouncycastle</groupId>
            <artifactId>bcpkix-jdk15on</artifactId>
            <version>1.63</version>
        </dependency>
    </dependencies>

</project>

VerifyDetachedSignature.java


import org.bouncycastle.cms.*;
import org.bouncycastle.cms.jcajce.JcaSimpleSignerInfoVerifierBuilder;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.operator.OperatorCreationException;

import java.io.ByteArrayInputStream;
import java.security.Security;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.util.Base64;

public class VerifyDetachedSignature {
    public static void main (String ... args){
        String origContentBeforeSign = ""hello dear"";

        //Input for external API
        String sha256OfOrigContent = ""b17c48764e2ffbfecaa252c449b38185a6ef1f47f179f60d5776d2660f568298"";
        //Response form external API
        String userX509Cert = ""MIIF3zCCBMegAwIBAgIUAI3+onmDwTHVrLb0ZQjf6ieazc0wDQYJKoZIhvcNAQELBQAwgcExCzAJBgNVBAYTAklOMQ4wDAYDVQQKEwVDLURBQzEgMB4GA1UECxMXQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxDzANBgNVBBETBjQxMTAwNzEUMBIGA1UECBMLTWFoYXJhc2h0cmExJTAjBgNVBAkTHFB1bmUgVW5pdmVyc2l0eSBDYW1wdXMsIFB1bmUxGjAYBgNVBDMTETFzdCBmbG9vciwgS2hvc2xhMRYwFAYDVQQDEw1DLURBQyBDQSAyMDE0MB4XDTE5MTAyMTExMTcwMVoXDTE5MTAyMTExNDcwMVowggE/MQ4wDAYDVQQGEwVJbmRpYTEOMAwGA1UECBMFRGVsaGkxETAPBgNVBAoTCFBlcnNvbmFsMRowGAYDVQQDExFEZXZpIFNpbmdoIFBpbHdhbDEPMA0GA1UEERMGMTEwMDc2MVMwUQYDVQQtA0oAMDEwMDA1NTlWL3YyXCtZeHpaYnh0M2lTVm9GMXNjZGE3R3QxelF6RlVXTjFhd0NyWk55YjlxODE3Zzlwd1NlUEVpUy9DVVFmWTEpMCcGA1UEQRMgMTg2M2FiYmZhOWJhNDk0NGI3Yjg5ZWI1YjQ4MWYyYmMxDTALBgNVBAwTBDEwMzExTjBMBgNVBC4TRTE5ODNNNDdkOTNhZDAwYzM0N2QwZjljM2ViMzFjNGQxODQyOGEzMDU3NzU1NzEwNWIyMWNiMmQ0Yjc3NDA5MzYxZDI5ZDBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABOTOniWF/vD11jHGEwRL1FEBi4yClLQGea4zbSDuxQyb8gL33XoHBVA1uK1PVnQq65loSYhUq+XwRzizMtwki0qjggIXMIICEzAJBgNVHRMEAjAAMB0GA1UdDgQWBBRDbqI8q4d+l+E9/zCocyhcaDTqZDATBgNVHSMEDDAKgAhBQ3LI5DRx/DAOBgNVHQ8BAf8EBAMCBsAwOQYDVR0fBDIwMDAuoCygKoYoaHR0cHM6Ly9lc2lnbi5jZGFjLmluL2NhL2VzaWduQ0EyMDE5LmNybDCCAT8GA1UdIASCATYwggEyMIIBAQYHYIJkZAEJAjCB9TAwBggrBgEFBQcCARYkaHR0cHM6Ly9lc2lnbi5jZGFjLmluL2NhL0NQUy9DUFMucGRmMIHABggrBgEFBQcCAjCBszA+FjpDZW50cmUgZm9yIERldmVsb3BtZW50IG9mIEFkdmFuY2VkIENvbXB1dGluZyAoQy1EQUMpLCBQdW5lMAAacVRoaXMgQ1BTIGlzIG93bmVkIGJ5IEMtREFDIGFuZCB1c2VycyBhcmUgcmVxdWVzdGVkIHRvIHJlYWQgQ1BTIGJlZm9yZSB1c2luZyB0aGUgQy1EQUMgQ0EncyBjZXJ0aWZpY2F0aW9uIHNlcnZpY2VzMCsGB2CCZGQCBAEwIDAeBggrBgEFBQcCAjASGhBBYWRoYWFyIGVLWUMtT1RQMEQGCCsGAQUFBwEBBDgwNjA0BggrBgEFBQcwAoYoaHR0cHM6Ly9lc2lnbi5jZGFjLmluL2NhL0NEQUMtQ0EyMDE0LmRlcjANBgkqhkiG9w0BAQsFAAOCAQEAWfgVBA2kn31HZCWX8Jhikcd9vjaKhPIecN7hlrTx7BNzTFCksmuck17Lr6DowBkPuT7kYCAPVPKrUwkQ7w1VjGwTS9hTsb+aQYePO9JqoVQ9IpCS5Mz4m7ftPnd04PAwWwwpl62p1cuRPBgd1kGRuMBQPmGYIqEvddAZtcylXLmE3HaWngqE4bYm9dV3pevv3hzZPazz0fLVCLdxEAIg4bAcfaGbyhXj4JmX4AHk5HoNTY081mqP8GA98CyGIBmzVKmyMydRa3rCRGeHmTDRIc3VIA2GAsW/+A+Z6h3BNoXSwT2AA4SqaKVAkpHWmoYlbb0Ju0qTBzQst/Zs9xF/BQ=="";
        String signedContentPKCS7 =""MIIPIwYJKoZIhvcNAQcCoIIPFDCCDxACAQExDzANBglghkgBZQMEAgEFADALBgkqhkiG9w0BBwGggg0yMIIDIzCCAgugAwIBAgICJ60wDQYJKoZIhvcNAQELBQAwOjELMAkGA1UEBhMCSU4xEjAQBgNVBAoTCUluZGlhIFBLSTEXMBUGA1UEAxMOQ0NBIEluZGlhIDIwMTQwHhcNMTQwMzA1MTAxMDQ5WhcNMjQwMzA1MTAxMDQ5WjA6MQswCQYDVQQGEwJJTjESMBAGA1UEChMJSW5kaWEgUEtJMRcwFQYDVQQDEw5DQ0EgSW5kaWEgMjAxNDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAN7IUL2K/yINrn+sglna9CkJ1AVrbJYBvsylsCF3vhStQC9kb7t4FwX7s+6AAMSakL5GUDJxVVNhMqf/2paerAzFACVNR1AiMLsG7ima4pCDhFn7t9052BQRbLBCPg4wekx6j+QULQFeW9ViLV7hjkEhKffeuoc3YaDmkkPSmA2mz6QKbUWYUu4PqQPRCrkiDH0ikdqR9eyYhWyuI7Gm/pc0atYnp1sru3rtLCaLS0ST/N/ELDEUUY2wgxglgoqEEdMhSSBL1CzaA8Ck9PErpnqC7VL+sbSyAKeJ9n56FttQzkwYjdOHMrgJRZaPb2i5VoVo1ZFkQF3ZKfiJ25VH5+8CAwEAAaMzMDEwDwYDVR0TAQH/BAUwAwEB/zARBgNVHQ4ECgQIQrjFz22zV+EwCwYDVR0PBAQDAgEGMA0GCSqGSIb3DQEBCwUAA4IBAQAdAUjv0myKyt8GC1niIZplrlksOWIR6yXLg4BhFj4ziULxsGK4Jj0sIJGCkNJeHl+Ng9UlU5EI+r89DRdrGBTF/I+g3RHcViPtOne9xEgWRMRYtWD7QZe5FvoSSGkW9aV6D4iGLPBQML6FDUkQzW9CYDCFgGC2+awRMx61dQVXiFv3Nbkqa1Pejcel8NMAmxjfm5nZMd3Ft13hy3fNF6UzsOnBtMbyZWhS8Koj2KFfSUGX+M/DS1TG2ZujwKKXCuKq7+67m0WF6zohoHJbqjkmKX34zkuFnoXaXco9NkOi0RBvLCiqR2lKfzLM7B69bje+z0EqnRNo5+s8PWSdy+xtMIIEJDCCAwygAwIBAgICJ8AwDQYJKoZIhvcNAQELBQAwOjELMAkGA1UEBhMCSU4xEjAQBgNVBAoTCUluZGlhIFBLSTEXMBUGA1UEAxMOQ0NBIEluZGlhIDIwMTQwHhcNMTYwNzI4MDkyNTE4WhcNMjQwMzA1MDYzMDAwWjCBwTELMAkGA1UEBhMCSU4xDjAMBgNVBAoTBUMtREFDMSAwHgYDVQQLExdDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTEPMA0GA1UEERMGNDExMDA3MRQwEgYDVQQIEwtNYWhhcmFzaHRyYTElMCMGA1UECRMcUHVuZSBVbml2ZXJzaXR5IENhbXB1cywgUHVuZTEaMBgGA1UEMxMRMXN0IGZsb29yLCBLaG9zbGExFjAUBgNVBAMTDUMtREFDIENBIDIwMTQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCYxLdnqHi9Kq57pJuv0ijLCcsbFWirh3vKvoWmxX+i5WacwDZqbF6Oia5aHEgLL0YPeJ+FBNoEAYrDvIGc+UmkAKvM/6+KN+/lhDf6TBDMNntCsZ45GrkLcsUXHu9MLEqcAUOku8T6aD/JexF2E5Sg//exL9xvUwwa4TgQm8N1rZBPm5cOPkn3YRerfzHKjoxDwxIN3iVS5BjjbJrwGbcOb+yqZo7xKNdHlDKljEYNFpkYWD7rhDrOlPq3IIOi74b1WpoT67//fkHu1qYFuUHU5mwkqRZ6gGlH6rYYx9LoLN2Gch8f7IcujvxJLaX5Q57pKiWBFa4FFhIZrupJ66NRAgMBAAGjgaswgagwEgYDVR0TAQH/BAgwBgEB/wIBADARBgNVHQ4ECgQIQUNyyOQ0cfwwEgYDVR0gBAswCTAHBgVggmRkAjATBgNVHSMEDDAKgAhCuMXPbbNX4TAOBgNVHQ8BAf8EBAMCAQYwRgYDVR0fBD8wPTA7oDmgN4Y1aHR0cDovL2NjYS5nb3YuaW4vcncvcmVzb3VyY2VzL0NDQUluZGlhMjAxNExhdGVzdC5jcmwwDQYJKoZIhvcNAQELBQADggEBAL+ELhdhs5EJmH4G8Allsf+JXnI1Wo/xgDBj0XvvhFD+4L0ZlKwm3Z7c21x4xw/AIUdhJ3YTXhih9HiJxAzS7trWmBRyEv3ebG5nQpID+uCAYjgd+SAStUK58Dm6ztiS06RtE5X780tdIEMDCFQDIcRpwqhGGGoapE7V7r0eXUoSEd+Ba0OxxmBqz5ebKR+XEM9//UHMvkObow/ZFR8IRZzFbWbUIVRbYtvO8ZCUMFlGwijGzpbDZPKxiYurY6TK1vVoJ54Cr0amkImQtaJNMLjOXCBS0K2jxguiT2jHoQ8L+mt5aNETT9HHkeZJorM+V6kqSy6zXMhhzIaO7DsFAbkwggXfMIIEx6ADAgECAhQAjf6ieYPBMdWstvRlCN/qJ5rNzTANBgkqhkiG9w0BAQsFADCBwTELMAkGA1UEBhMCSU4xDjAMBgNVBAoTBUMtREFDMSAwHgYDVQQLExdDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTEPMA0GA1UEERMGNDExMDA3MRQwEgYDVQQIEwtNYWhhcmFzaHRyYTElMCMGA1UECRMcUHVuZSBVbml2ZXJzaXR5IENhbXB1cywgUHVuZTEaMBgGA1UEMxMRMXN0IGZsb29yLCBLaG9zbGExFjAUBgNVBAMTDUMtREFDIENBIDIwMTQwHhcNMTkxMDIxMTExNzAxWhcNMTkxMDIxMTE0NzAxWjCCAT8xDjAMBgNVBAYTBUluZGlhMQ4wDAYDVQQIEwVEZWxoaTERMA8GA1UEChMIUGVyc29uYWwxGjAYBgNVBAMTEURldmkgU2luZ2ggUGlsd2FsMQ8wDQYDVQQREwYxMTAwNzYxUzBRBgNVBC0DSgAwMTAwMDU1OVYvdjJcK1l4elpieHQzaVNWb0Yxc2NkYTdHdDF6UXpGVVdOMWF3Q3JaTnliOXE4MTdnOXB3U2VQRWlTL0NVUWZZMSkwJwYDVQRBEyAxODYzYWJiZmE5YmE0OTQ0YjdiODllYjViNDgxZjJiYzENMAsGA1UEDBMEMTAzMTFOMEwGA1UELhNFMTk4M000N2Q5M2FkMDBjMzQ3ZDBmOWMzZWIzMWM0ZDE4NDI4YTMwNTc3NTU3MTA1YjIxY2IyZDRiNzc0MDkzNjFkMjlkMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE5M6eJYX+8PXWMcYTBEvUUQGLjIKUtAZ5rjNtIO7FDJvyAvfdegcFUDW4rU9WdCrrmWhJiFSr5fBHOLMy3CSLSqOCAhcwggITMAkGA1UdEwQCMAAwHQYDVR0OBBYEFENuojyrh36X4T3/MKhzKFxoNOpkMBMGA1UdIwQMMAqACEFDcsjkNHH8MA4GA1UdDwEB/wQEAwIGwDA5BgNVHR8EMjAwMC6gLKAqhihodHRwczovL2VzaWduLmNkYWMuaW4vY2EvZXNpZ25DQTIwMTkuY3JsMIIBPwYDVR0gBIIBNjCCATIwggEBBgdggmRkAQkCMIH1MDAGCCsGAQUFBwIBFiRodHRwczovL2VzaWduLmNkYWMuaW4vY2EvQ1BTL0NQUy5wZGYwgcAGCCsGAQUFBwICMIGzMD4WOkNlbnRyZSBmb3IgRGV2ZWxvcG1lbnQgb2YgQWR2YW5jZWQgQ29tcHV0aW5nIChDLURBQyksIFB1bmUwABpxVGhpcyBDUFMgaXMgb3duZWQgYnkgQy1EQUMgYW5kIHVzZXJzIGFyZSByZXF1ZXN0ZWQgdG8gcmVhZCBDUFMgYmVmb3JlIHVzaW5nIHRoZSBDLURBQyBDQSdzIGNlcnRpZmljYXRpb24gc2VydmljZXMwKwYHYIJkZAIEATAgMB4GCCsGAQUFBwICMBIaEEFhZGhhYXIgZUtZQy1PVFAwRAYIKwYBBQUHAQEEODA2MDQGCCsGAQUFBzAChihodHRwczovL2VzaWduLmNkYWMuaW4vY2EvQ0RBQy1DQTIwMTQuZGVyMA0GCSqGSIb3DQEBCwUAA4IBAQBZ+BUEDaSffUdkJZfwmGKRx32+NoqE8h5w3uGWtPHsE3NMUKSya5yTXsuvoOjAGQ+5PuRgIA9U8qtTCRDvDVWMbBNL2FOxv5pBh4870mqhVD0ikJLkzPibt+0+d3Tg8DBbDCmXranVy5E8GB3WQZG4wFA+YZgioS910Bm1zKVcuYTcdpaeCoThtib11Xel6+/eHNk9rPPR8tUIt3EQAiDhsBx9oZvKFePgmZfgAeTkeg1NjTzWao/wYD3wLIYgGbNUqbIzJ1FresJEZ4eZMNEhzdUgDYYCxb/4D5nqHcE2hdLBPYADhKpopUCSkdaahiVtvQm7SpMHNCy39mz3EX8FMYIBtTCCAbECAQEwgdowgcExCzAJBgNVBAYTAklOMQ4wDAYDVQQKEwVDLURBQzEgMB4GA1UECxMXQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxDzANBgNVBBETBjQxMTAwNzEUMBIGA1UECBMLTWFoYXJhc2h0cmExJTAjBgNVBAkTHFB1bmUgVW5pdmVyc2l0eSBDYW1wdXMsIFB1bmUxGjAYBgNVBDMTETFzdCBmbG9vciwgS2hvc2xhMRYwFAYDVQQDEw1DLURBQyBDQSAyMDE0AhQAjf6ieYPBMdWstvRlCN/qJ5rNzTANBglghkgBZQMEAgEFAKBpMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE5MTAyMTExMTcwMVowLwYJKoZIhvcNAQkEMSIEILF8SHZOL/v+yqJSxEmzgYWm7x9H8Xn2DVd20mYPVoKYMAwGCCqGSM49BAMCBQAERzBFAiEA5yYdKoT8jppsvsajBDDwCIUMHjB7ZE1Fz4Lzdu+/r5YCIBYfT2JWSiVfn51pyC/iAwdC+x6zvYOk1fPMcrGj79fU"";

        try {
            byte[] signedByte = Base64.getDecoder().decode(signedContentPKCS7);
            byte base64EncodedCert[] = Base64.getDecoder().decode(userX509Cert);
            ByteArrayInputStream inputStream  =  new ByteArrayInputStream(base64EncodedCert);

            Security.addProvider(new BouncyCastleProvider());

            CMSSignedData s = new CMSSignedData(new CMSProcessableByteArray(sha256OfOrigContent.getBytes()), signedByte);
            SignerInformationStore signers = s.getSignerInfos();
            SignerInformation signerInfo = (SignerInformation)signers.getSigners().iterator().next();

            CertificateFactory cf = CertificateFactory.getInstance(""X.509"");
            X509Certificate cert = (X509Certificate)cf.generateCertificates(inputStream).iterator().next();
            System.out.println(cert.getSigAlgName());
            JcaSimpleSignerInfoVerifierBuilder obj = new JcaSimpleSignerInfoVerifierBuilder();
            obj.setProvider(""SUN"");
            boolean result = signerInfo.verify(obj.build(cert.getPublicKey()));
            System.out.println(""Verified: ""+result);
        } catch (CertificateException | CMSException
                | OperatorCreationException
                e) {
            e.printStackTrace();
        }



    }
}

I am getting following exception while executing the code.
org.bouncycastle.cms.CMSException: can't create content verifier: exception on setup: java.security.NoSuchAlgorithmException: no such algorithm: SHA256WITHECDSA for provider SUN
    at org.bouncycastle.cms.SignerInformation.doVerify(Unknown Source)
    at org.bouncycastle.cms.SignerInformation.verify(Unknown Source)
    at VerifyDetachedSignature.main(VerifyDetachedSignature.java:41)
Caused by: org.bouncycastle.operator.OperatorCreationException: exception on setup: java.security.NoSuchAlgorithmException: no such algorithm: SHA256WITHECDSA for provider SUN
    at org.bouncycastle.operator.jcajce.JcaContentVerifierProviderBuilder.createSignature(Unknown Source)
    at org.bouncycastle.operator.jcajce.JcaContentVerifierProviderBuilder.access$200(Unknown Source)
    at org.bouncycastle.operator.jcajce.JcaContentVerifierProviderBuilder$2.get(Unknown Source)
    at org.bouncycastle.cms.SignerInformationVerifier.getContentVerifier(Unknown Source)
    ... 3 more
Caused by: java.security.NoSuchAlgorithmException: no such algorithm: SHA256WITHECDSA for provider SUN
    at sun.security.jca.GetInstance.getService(GetInstance.java:87)
    at sun.security.jca.GetInstance.getInstance(GetInstance.java:206)
    at java.security.Signature.getInstance(Signature.java:361)
    at org.bouncycastle.jcajce.util.NamedJcaJceHelper.createSignature(Unknown Source)
    at org.bouncycastle.operator.jcajce.OperatorHelper.createSignature(Unknown Source)
    ... 7 more
Disconnected from the target VM, address: '127.0.0.1:63442', transport: 'socket'

Process finished with exit code 0

I am using Java version 1.8.0_221
I also tried to use Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files for JDK/JRE as mentioned here
Can anybody please guide me, what am I missing or doing wrong ?
","","21","<java><digital-signature><bouncycastle><pkcs#7>","0","","0","2019-10-22 10:28:44","","3","","","","","2019-10-22 10:28:44",""
"58362657","Code halts execution without any Exception","I have a JAR which has a class which is supposed to sign a PDF file and also create a detached PKCS7 signature. The problem, however, is that I use 2 different crypto providers: JCP (a Russian provider for creating an attached PDF signature) and BC for creating a detached one, respectively. 
The code as follows:
public void signPdf(InputStream is, String folder, String fileNameWoExtension) throws Exception
    {
        // private key and certificate
        PrivateKey key = keyStore.getPrivateKey();
        Certificate[] chain = new Certificate[1];
        chain[0] = keyStore.getCertificate();

        X509Certificate cert = (X509Certificate)chain[0];
        Date notBefore = cert.getNotBefore();
        Date notAfter = cert.getNotAfter();
        String serial = cert.getSerialNumber().toString(16).toUpperCase();
        String subject = PdfPKCS7.getSubjectFields(cert).getField(""CN"");
        String number = fileNameWoExtension.replace(""appeal_"", """");
        // reader and stamper
        PdfReader reader = new PdfReader(is);
        FileOutputStream fout = new FileOutputStream(folder + File.separator + fileNameWoExtension + "".pdf"");
        PdfStamper stp = PdfStamper.createSignature(reader, fout, '\0');

        StampsCreator.createEdsStamp(folder, serial, subject, notBefore, notAfter);
        StampsCreator.createRegisterStamp(folder, new Date(), number);

        PdfContentByte pcb = stp.getOverContent(1);
        Image imageEds = Image.getInstance(folder + File.separator + StampsCreator.EDS_STAMP);
        imageEds.scaleAbsolute(200, 87);
        imageEds.setAbsolutePosition(75, 80);
        imageEds.setAnnotation(new Annotation(0, 0, 0, 0, 3));
        pcb.addImage(imageEds);

        Image imageReg = Image.getInstance(folder + File.separator + StampsCreator.REGNUMBER_STAMP);
        imageReg.scaleAbsolute(207, 20);
        int height = (int) Math.floor(reader.getPageSize(1).getHeight());
        imageReg.setAbsolutePosition(70, height - 130);
        imageReg.setAnnotation(new Annotation(0, 0, 0, 0, 3));
        pcb.addImage(imageReg);

        PdfSignatureAppearance sap = stp.getSignatureAppearance();
        sap.setSignDate(new GregorianCalendar());
        sap.setCrypto(null, chain, null, null);
        sap.setAcro6Layers(true);
        sap.setRenderingMode(PdfSignatureAppearance.RenderingMode.DESCRIPTION);
        PdfSignature dic;
        dic = new PdfSignature(PdfName.ADOBE_CryptoProPDF, PdfName.ADBE_PKCS7_DETACHED);
        dic.setDate(new PdfDate(sap.getSignDate()));

        dic.setName(subject);
        dic.setReason(""Signed with CryptoPro"");
        sap.setCryptoDictionary(dic);
        int csize = 4000;
        HashMap<PdfName,Integer> exc = new HashMap<PdfName,Integer>();
        exc.put(PdfName.CONTENTS, new Integer(csize * 2 + 2));
        sap.preClose(exc);
        System.out.println(""preclosed "" + key.getClass().getName() + "" "" + key.getAlgorithm());
        System.out.println(""1"");
        X509Certificate signerCert = (X509Certificate)chain[0];
        System.out.println(""2"");
        List certList = new ArrayList();
        System.out.println(""3"");
        certList.add(signerCert);
        System.out.println(""4"");
        Store certs = new JcaCertStore(certList);
        System.out.println(""5"");
        // signature
        CMSSignedDataGenerator generator = new CMSSignedDataGenerator();
        System.out.println(""6"");
        ContentSigner signer = new JcaContentSignerBuilder(AlgorithmUtils.getDigestMessageAndAlgorithmsForJcaContentSignerBuilder(signerCert)).setProvider(""BC"").build(key);


        System.out.println(""7"");
        generator.addSignerInfoGenerator(
                new JcaSignerInfoGeneratorBuilder(
                        new JcaDigestCalculatorProviderBuilder().setProvider(""BC"").build())
                        .build(signer, signerCert));
        System.out.println(""8"");
        generator.addCertificates(certs);
        System.out.println(""9"");

        //generator.addCertificates(new JcaCertStore(Arrays.asList(chain)));
        //generator.addSigner(key, (X509Certificate)chain[0], JCP.GOST_EL_DH_OID, JCP.GOST_DIGEST_OID);

        /*ArrayList<Certificate> list = new ArrayList<Certificate>();
        for (int i = 0; i < chain.length; i++) {
            list.add(chain[i]);
        }*/
        /*CertStore chainStore
            = CertStore.getInstance(""Collection"", new CollectionCertStoreParameters(list), ""BC"");
        generator.addCertificatesAndCRLs(chainStore);*/

        CMSSignedData signedData;
        System.out.println(""9"");
        signedData = generator.generate(new CMSProcessableByteArray(IOUtils.toByteArray(sap.getRangeStream())), false);
        System.out.println(""10"");

        //CMSProcessable content = new CMSProcessableRange(sap);
        //signedData = generator.generate(content, false, JCP.PROVIDER_NAME);
        byte[] pk = signedData.getEncoded();
        System.out.println(""p7s data ready."");
        byte[] outc = new byte[csize];
        PdfDictionary dic2 = new PdfDictionary();
        System.arraycopy(pk, 0, outc, 0, pk.length);
        dic2.put(PdfName.CONTENTS, new PdfString(outc).setHexWriting(true));
        System.out.println(""signed ready."");
        sap.close(dic2);
        FileOutputStream fos = new FileOutputStream(folder + File.separator + fileNameWoExtension + "".p7s"");
        fos.write(pk);
        fos.close();
    }

Here's the method for defining the algorithm inside the cert used for creating a signature:
public static String getDigestMessageAndAlgorithmsForJcaContentSignerBuilder(X509Certificate cert)
    {
        switch (cert.getPublicKey().getAlgorithm()) 
        {
            case ""GOST3410_2012_256"": 
                return JCA_CONTENT_GOST_2012_256; //GOST3411-2012-256WITHECGOST3410-2012-256
            case ""GOST3410_2012_512"": 
                return JCA_CONTENT_GOST_2012_512; //GOST3411-2012-512WITHECGOST3410-2012-512
            case ""GOST3410EL"": 
                return JCA_CONTENT_GOST3410EL; //GOST3411withECGOST3410

            default: 
                throw new IllegalArgumentException(""Algorithm inside the certificate "" + cert.getPublicKey().getAlgorithm() + "" is not supported."");
        }
    }

The code seems to halt at the following line:
ContentSigner signer = new JcaContentSignerBuilder(AlgorithmUtils.getDigestMessageAndAlgorithmsForJcaContentSignerBuilder(signerCert)).setProvider(""BC"").build(key);

I figured it out because when I try to execute it I get the following output:
preclosed ru.CryptoPro.JCP.Key.GostExchPrivateKey GOST3410DH_2012_256
1
2
3
4
5
6

Why is that? Is it related to using different crypto providers? I mean because PrivateKey is of type ru.CryptoPro.JCP.Key.GostExchPrivateKey whilst BC requires a different type?
Thanks in advance.
","","19","<java><digital-signature><bouncycastle><pkcs#7>","0","","0","2019-10-13 10:23:13","","0","","","","","2019-10-13 10:23:13",""
"56676694","Cades Digital sign with smartcard","I'm try to develop a software for Digital signing xml files and output a .p7m file format. The problem is that I have to use a smartcard to do that. Could you please, show me some resources to learn how to achieve that?
","","18","<python><windows><digital-signature><smartcard><pkcs#7>","0","","0","2019-06-20 02:58:01","","2","","6332958","","2019-06-20 02:58:01","2019-06-19 22:30:03",""
"56668275","Command-line openssl cms : is there any way to combine CMS with the digest algorithm ecdsa-with-SHA1?","I wish to have a CMS signed document but that uses the digest ""ecdsa-with-SHA1"". Is that possible with openssl 
openssl cms -sign -noattr -nocerts -nosmimecap -md sha256 -in MYFILE.txt binary -out MYFILE.cms.sha256 -outform DER -stream -signer server.pem -inkey private-key.pem

But I wish to use a message digest ""ecdsa-with-SHA1"" rather than sha256 as in
openssl dgst -ecdsa-with-SHA1 -sign private-key.pem -out MYFILE.ecdsa.dgst MYFILE.txt



OpenSSL> version
OpenSSL 1.1.1c  28 May 2019

Is there any way with openssl to combine CMS with ecdsa-with-SHA1 ?
","","18","<openssl><digital-signature><pkcs#7>","0","","0","2019-06-19 13:00:42","","1","","","","","2019-06-19 13:00:42",""
"58769162","Signed PDF verification in Origami with an Adobe PKCS#7 certificate","I'm trying to verify the digital signature of a PDF. Here's what I've got:
A PDF that I've signed using Adobe Acrobat (tried both Pro 10 and Reader DC)
The key was generated in Acrobat Pro, I have access to the .p12, or exporting as FDF, PKCS#7 or just ""Certificate File"". Have also tried loading this ""Certificate File"" via Apple's ""Keychain Access"" and exporting that as a .pem from there, which had the same result (according to ruby's openssl - steps below) as me doing:
openssl pkcs7 -print_certs -inform der -in pkcs7file.p7c -out certificate.cer

With the Origami gem, I've tried loading the certificate and attempting verification:
cert = OpenSSL::X509::Certificate.new(File.read('/path/to/pem/or/cer.cer'))
Origami::PDF.read(File.open('/path/to/file.pdf', 'r')).verify(trusted_certs: [cert])

(just noticed that The .pem and .cer are identical, except that the .cer file includes ""subject="" and ""issue="" lines before the certificate)
Origami's output confirms the document has been signed, but the verify(..) method returns false.
Note that working through the code from this excellent answer works fine, but it only seems to work if you generate the X.509 keypair using openssl (e.g. the ruby-land bindings as per that code). Unfortunately I'm required to use the pre-existing Adobe-blessed signatures from the user's machines.
That said, aside from this I have very few restraints; I can ask the users to export their certificate in any other way that is useful to us (I can even run some simple code on their machines if necessary), though I mustn't transmit the private key in the procedure. I don't have to use Origami for the verification, but it does have to be a command accessible from ruby on an ubuntu server. The users are all running on Macs with reasonably up-to-date software.
","It's possible the ciphers are different. It could be that the Adobe cipher is not the same one that the openssl is using and would then fail the verification check. Take a look at this. Details on ciphers 
This might be useful too openssl commands
","18","<ruby><pdf><adobe><pkcs#7><origami>","0","0","1","2019-11-10 01:20:43","","0","","","","","2019-11-08 15:10:18",""
"58027881","Question about converting this code, to verify signature and decrypt soap response, from .NET to node","I'm migrating an api that consumes third-party soap services, from .NET to Node.JS.
I was able to successfully obtain the answer I was expecting from one service.
But I have doubts about how I am treating the answer.
First of all clarify that I am a bit newbie in terms of encryption and soap web services.
This is the code in .NET that i want to migrate:
using System.Security.Cryptography.Pkcs;

        public string DecodeMessage(string message)
        {
            message = message.Split('-')[10].Substring(1, message.Split('-')[10].Length - 2);
            SignedCms = new SignedCms();
            SignedCms.Decode(Convert.FromBase64String(message));
            return Encoding.ASCII.GetString(SignedCms.ContentInfo.Content);
        }

And this is what i'm actually doing in Node:
import * as forge from 'node-forge';

 public decodeMessage(message: string) {
        let p7 = forge.pkcs7.messageFromPem(message);
        return p7.rawCapture.content.value[0].value;
    }

This code actually works, I'm able to recover the data from the response.
But is it correctly migrated?
Am I missing something? Like verify the signing?
","","16","<c#><node.js><soap><sign><pkcs#7>","0","","0","2019-09-20 11:53:31","","0","","","","","2019-09-20 11:53:31",""
"53278126","How to add paragraph label using swing, following is my code","How to add timestamp, while generating digital signature for the file using BouncyCastle?
How to add timestamp, while generating digital signature for the file using BouncyCastle?
public String generateSignature(String filePath, PrivateKey privateKey, String alias) throws Exception {
        KeyStore ks = KeyStore.getInstance(""WINDOWS-MY"", ""SunMSCAPI"");
        String pin = """";
        ks.load(null, pin.toCharArray());
        Security.addProvider(new BouncyCastleProvider());
        byte[] fileContent = Files.readAllBytes(new File(filePath).toPath());
        Signature signature = Signature.getInstance(""SHA1withRSA"");
        signature.initSign(privateKey);
        signature.update(fileContent);

        // Build CMS
        X509Certificate certFromKeystore = (X509Certificate) ks.getCertificate(alias);
        List certList = new ArrayList();
        CMSTypedData data = new CMSProcessableByteArray(fileContent);
        certList.add(certFromKeystore);
        Store certs = new JcaCertStore(certList);
        CMSSignedDataGenerator gen = new CMSSignedDataGenerator();  //generate PKCS7 siganture messgae
        ContentSigner sha1Signer = new JcaContentSignerBuilder(""SHA1withRSA"").setProvider(""SunMSCAPI"")
                .build(privateKey);
        gen.addSignerInfoGenerator(new JcaSignerInfoGeneratorBuilder(new JcaDigestCalculatorProviderBuilder().setProvider(""BC"").build())
                        .build(sha1Signer, certFromKeystore));
        gen.addCertificates(certs);
        CMSSignedData signedData = gen.generate(data, false);
        BASE64Encoder encoder = new BASE64Encoder();
        String signedContent = encoder.encode((byte[]) signedData.getSignedContent().getContent());
        System.out.println(""Signed content==="" + ""\n"" + signedContent + ""==="" + signedContent.length() + ""\n"");
        String envelopedData = encoder.encode(signedData.getEncoded());
        System.out.println(""Enveloped data==="" + ""\n"" + envelopedData + ""==="" + envelopedData.length());

        return envelopedData;
    }

","","13","<java><digital-signature><bouncycastle><x509certificate><pkcs#7>","0","","0","2018-11-13 09:47:03","","0","","","","","2018-11-13 09:47:03",""
"56861061","How to get a certain sequence of self-signature on python3?","I need to get the python3 from the key signature raw data from the second sequence. I can not say how it is exactly called. This is part of the public key that is signed by the APK package. Android type Signature
In C #, I just write.
var certfile = System.IO.Path.GetFullPath (file);
var Cert = X509Certificate.CreateFromCertFile (certfile);
System.IO.File.WriteAllBytes (v + ""RSA_PUBLIC_DATE.RSA"", Cert.GetRawCertData ());

Can't do the same thing on python3. I tried different libraries. Many people know this type of key. But do not work with primitives.
link original saignatures
link sequnce im want get
","","12","<android><python-3.x><rsa><pkcs#7><asn1>","0","","0","2019-07-02 23:12:49","","2","","","","","2019-07-02 23:12:49",""
