post_link,title,body_question,body_answer,viewcount,tags,score,score_answer,answercount,LastActivityDate,AcceptedAnswerId,CommentCount,FavoriteCount,LastEditorUserId,LastEditorDisplayName,LastEditDate,CreationDate,ClosedDate
"3358420","Generating a sha256 from the Linux command line","I know the string ""foobar"" generates the SHA 256 hash c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2 using
http://hash.online-convert.com/sha256-generator
However the command line shell:
hendry@x201 ~$ echo foobar | sha256sum 
aec070645fe53ee3b3763059376134f058cc337247c978add178b6ccdfb0019f  -

Generates a different hash. What am I missing?
","echo will normally output a newline, which is suppressed with -n. Try this:
echo -n foobar | sha256sum

","255664","<linux><shell><sha256>","213","322","6","2015-06-03 02:46:20","3358428","3","50","4534","","2010-07-28 23:46:38","2010-07-28 23:41:05","2014-12-12 20:42:50"
"3358420","Generating a sha256 from the Linux command line","I know the string ""foobar"" generates the SHA 256 hash c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2 using
http://hash.online-convert.com/sha256-generator
However the command line shell:
hendry@x201 ~$ echo foobar | sha256sum 
aec070645fe53ee3b3763059376134f058cc337247c978add178b6ccdfb0019f  -

Generates a different hash. What am I missing?
","I believe that echo outputs a trailing newline. Try using -n as a parameter to echo to skip the newline.
","255664","<linux><shell><sha256>","213","7","6","2015-06-03 02:46:20","3358428","3","50","4534","","2010-07-28 23:46:38","2010-07-28 23:41:05","2014-12-12 20:42:50"
"3358420","Generating a sha256 from the Linux command line","I know the string ""foobar"" generates the SHA 256 hash c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2 using
http://hash.online-convert.com/sha256-generator
However the command line shell:
hendry@x201 ~$ echo foobar | sha256sum 
aec070645fe53ee3b3763059376134f058cc337247c978add178b6ccdfb0019f  -

Generates a different hash. What am I missing?
","echo produces a trailing newline character which is hashed too. try:
/bin/echo -n foobar | sha256sum 

","255664","<linux><shell><sha256>","213","8","6","2015-06-03 02:46:20","3358428","3","50","4534","","2010-07-28 23:46:38","2010-07-28 23:41:05","2014-12-12 20:42:50"
"3358420","Generating a sha256 from the Linux command line","I know the string ""foobar"" generates the SHA 256 hash c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2 using
http://hash.online-convert.com/sha256-generator
However the command line shell:
hendry@x201 ~$ echo foobar | sha256sum 
aec070645fe53ee3b3763059376134f058cc337247c978add178b6ccdfb0019f  -

Generates a different hash. What am I missing?
","echo -n works and is unlikely to ever disappear due to massive historical usage, however per recent versions of the POSIX standard, new conforming applications are ""encouraged to use printf"".
","255664","<linux><shell><sha256>","213","28","6","2015-06-03 02:46:20","3358428","3","50","4534","","2010-07-28 23:46:38","2010-07-28 23:41:05","2014-12-12 20:42:50"
"3358420","Generating a sha256 from the Linux command line","I know the string ""foobar"" generates the SHA 256 hash c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2 using
http://hash.online-convert.com/sha256-generator
However the command line shell:
hendry@x201 ~$ echo foobar | sha256sum 
aec070645fe53ee3b3763059376134f058cc337247c978add178b6ccdfb0019f  -

Generates a different hash. What am I missing?
","If the command sha256sum is not available (on mavericks for example), you can use :
echo -n ""foobar"" | shasum -a 256
","255664","<linux><shell><sha256>","213","43","6","2015-06-03 02:46:20","3358428","3","50","4534","","2010-07-28 23:46:38","2010-07-28 23:41:05","2014-12-12 20:42:50"
"3358420","Generating a sha256 from the Linux command line","I know the string ""foobar"" generates the SHA 256 hash c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2 using
http://hash.online-convert.com/sha256-generator
However the command line shell:
hendry@x201 ~$ echo foobar | sha256sum 
aec070645fe53ee3b3763059376134f058cc337247c978add178b6ccdfb0019f  -

Generates a different hash. What am I missing?
","If you have installed openssl, you can use:
echo -n ""foobar"" | openssl dgst -sha256

For other algorithms you can replace -sha256 with -md4, -md5, -ripemd160, -sha, -sha1, -sha224, -sha384, -sha512 or -whirlpool.
","255664","<linux><shell><sha256>","213","90","6","2015-06-03 02:46:20","3358428","3","50","4534","","2010-07-28 23:46:38","2010-07-28 23:41:05","2014-12-12 20:42:50"
"12416249","Hashing a string with Sha256","I try to hash a string using SHA256, I'm using the following code:
using System;
using System.Security.Cryptography;
using System.Text;
 public class Hash
    {
    public static string getHashSha256(string text)
    {
        byte[] bytes = Encoding.Unicode.GetBytes(text);
        SHA256Managed hashstring = new SHA256Managed();
        byte[] hash = hashstring.ComputeHash(bytes);
        string hashString = string.Empty;
        foreach (byte x in hash)
        {
            hashString += String.Format(""{0:x2}"", x);
        }
        return hashString;
    }
}

However, this code gives significantly different results compared to my friends php, as well as online generators (such as This generator)
Does anyone know what the error is? Different bases?
","Encoding.Unicode is Microsoft's misleading name for UTF-16 (a double-wide encoding, used in the Windows world for historical reasons but not used by anyone else). http://msdn.microsoft.com/en-us/library/system.text.encoding.unicode.aspx
If you inspect your bytes array, you'll see that every second byte is 0x00 (because of the double-wide encoding).
You should be using Encoding.UTF8.GetBytes instead.
But also, you will see different results depending on whether or not you consider the terminating '\0' byte to be part of the data you're hashing. Hashing the two bytes ""Hi"" will give a different result from hashing the three bytes ""Hi"". You'll have to decide which you want to do. (Presumably you want to do whichever one your friend's PHP code is doing.)
For ASCII text, Encoding.UTF8 will definitely be suitable. If you're aiming for perfect compatibility with your friend's code, even on non-ASCII inputs, you'd better try a few test cases with non-ASCII characters such as é and 家 and see whether your results still match up. If not, you'll have to figure out what encoding your friend is really using; it might be one of the 8-bit ""code pages"" that used to be popular before the invention of Unicode. (Again, I think Windows is the main reason that anyone still needs to worry about ""code pages"".)
","230073","<c#><string><hash><sha256>","136","150","4","2019-09-23 07:00:05","12416380","1","46","3739391","","2016-08-11 03:28:46","2012-09-13 23:32:24",""
"12416249","Hashing a string with Sha256","I try to hash a string using SHA256, I'm using the following code:
using System;
using System.Security.Cryptography;
using System.Text;
 public class Hash
    {
    public static string getHashSha256(string text)
    {
        byte[] bytes = Encoding.Unicode.GetBytes(text);
        SHA256Managed hashstring = new SHA256Managed();
        byte[] hash = hashstring.ComputeHash(bytes);
        string hashString = string.Empty;
        foreach (byte x in hash)
        {
            hashString += String.Format(""{0:x2}"", x);
        }
        return hashString;
    }
}

However, this code gives significantly different results compared to my friends php, as well as online generators (such as This generator)
Does anyone know what the error is? Different bases?
","I also had this problem with another style of implementation but I forgot where I got it since it was 2 years ago.
static string sha256(string randomString)
{
    var crypt = new SHA256Managed();
    string hash = String.Empty;
    byte[] crypto = crypt.ComputeHash(Encoding.ASCII.GetBytes(randomString));
    foreach (byte theByte in crypto)
    {
        hash += theByte.ToString(""x2"");
    }
    return hash;
}

When I input something like abcdefghi2013 for some reason it gives different results and results in errors in my login module.
Then I tried modifying the code the same way as suggested by Quuxplusone and changed the encoding from ASCII to UTF8 then it finally worked!
static string sha256(string randomString)
{
    var crypt = new System.Security.Cryptography.SHA256Managed();
    var hash = new System.Text.StringBuilder();
    byte[] crypto = crypt.ComputeHash(Encoding.UTF8.GetBytes(randomString));
    foreach (byte theByte in crypto)
    {
        hash.Append(theByte.ToString(""x2""));
    }
    return hash.ToString();
}

Thanks again Quuxplusone for the wonderful and detailed answer! :)
","230073","<c#><string><hash><sha256>","136","98","4","2019-09-23 07:00:05","12416380","1","46","3739391","","2016-08-11 03:28:46","2012-09-13 23:32:24",""
"12416249","Hashing a string with Sha256","I try to hash a string using SHA256, I'm using the following code:
using System;
using System.Security.Cryptography;
using System.Text;
 public class Hash
    {
    public static string getHashSha256(string text)
    {
        byte[] bytes = Encoding.Unicode.GetBytes(text);
        SHA256Managed hashstring = new SHA256Managed();
        byte[] hash = hashstring.ComputeHash(bytes);
        string hashString = string.Empty;
        foreach (byte x in hash)
        {
            hashString += String.Format(""{0:x2}"", x);
        }
        return hashString;
    }
}

However, this code gives significantly different results compared to my friends php, as well as online generators (such as This generator)
Does anyone know what the error is? Different bases?
","In the PHP version you can send 'true' in the last parameter, but the default is 'false'. The following algorithm is equivalent to the default PHP's hash function when passing 'sha256' as the first parameter:
public static string GetSha256FromString(string strData)
    {
        var message = Encoding.ASCII.GetBytes(strData);
        SHA256Managed hashString = new SHA256Managed();
        string hex = """";

        var hashValue = hashString.ComputeHash(message);
        foreach (byte x in hashValue)
        {
            hex += String.Format(""{0:x2}"", x);
        }
        return hex;
    }

","230073","<c#><string><hash><sha256>","136","4","4","2019-09-23 07:00:05","12416380","1","46","3739391","","2016-08-11 03:28:46","2012-09-13 23:32:24",""
"12416249","Hashing a string with Sha256","I try to hash a string using SHA256, I'm using the following code:
using System;
using System.Security.Cryptography;
using System.Text;
 public class Hash
    {
    public static string getHashSha256(string text)
    {
        byte[] bytes = Encoding.Unicode.GetBytes(text);
        SHA256Managed hashstring = new SHA256Managed();
        byte[] hash = hashstring.ComputeHash(bytes);
        string hashString = string.Empty;
        foreach (byte x in hash)
        {
            hashString += String.Format(""{0:x2}"", x);
        }
        return hashString;
    }
}

However, this code gives significantly different results compared to my friends php, as well as online generators (such as This generator)
Does anyone know what the error is? Different bases?
","public string EncryptPassword(string password, string saltorusername)
        {
            using (var sha256 = SHA256.Create())
            {
                var saltedPassword = string.Format(""{0}{1}"", salt, password);
                byte[] saltedPasswordAsBytes = Encoding.UTF8.GetBytes(saltedPassword);
                return Convert.ToBase64String(sha256.ComputeHash(saltedPasswordAsBytes));
            }
        }

","230073","<c#><string><hash><sha256>","136","1","4","2019-09-23 07:00:05","12416380","1","46","3739391","","2016-08-11 03:28:46","2012-09-13 23:32:24",""
"2240973","How long is the SHA256 hash?","I'm going to run SHA256 on a password + salt, but I don't know how long to make my VARCHAR when setting up the MySQL database. What is a good length?
","Why would you make it VARCHAR? It doesn't vary. It's always 64 characters, which can be determined by running anything into one of the online SHA-256 calculators.
","218884","<mysql><sha256>","228","21","5","2018-03-02 23:17:09","2241014","1","29","55075","","2018-03-02 23:17:09","2010-02-10 22:59:15",""
"2240973","How long is the SHA256 hash?","I'm going to run SHA256 on a password + salt, but I don't know how long to make my VARCHAR when setting up the MySQL database. What is a good length?
","A sha256 is 256 bits long -- as its name indicates.
If you are using an hexadecimal representation, each digit codes for 4 bits ; so you need 64 digits to represent 256 bits -- so, you need a varchar(64), or a char(64), as the length is always the same, not varying at all.
And the demo :
$hash = hash('sha256', 'hello, world!');
var_dump($hash);

Will give you :
$ php temp.php
string(64) ""68e656b251e67e8358bef8483ab0d51c6619f3e7a1a9f0e75838d41ff368f728""

i.e. a string with 64 characters.
","218884","<mysql><sha256>","228","308","5","2018-03-02 23:17:09","2241014","1","29","55075","","2018-03-02 23:17:09","2010-02-10 22:59:15",""
"2240973","How long is the SHA256 hash?","I'm going to run SHA256 on a password + salt, but I don't know how long to make my VARCHAR when setting up the MySQL database. What is a good length?
","It will be fixed 64 chars, so use char(64)
","218884","<mysql><sha256>","228","6","5","2018-03-02 23:17:09","2241014","1","29","55075","","2018-03-02 23:17:09","2010-02-10 22:59:15",""
"2240973","How long is the SHA256 hash?","I'm going to run SHA256 on a password + salt, but I don't know how long to make my VARCHAR when setting up the MySQL database. What is a good length?
","I prefer to use BINARY(32) since it's the optimized way!
You can place in that 32 hex digits from (00 to FF).
Therefore BINARY(32)!
","218884","<mysql><sha256>","228","26","5","2018-03-02 23:17:09","2241014","1","29","55075","","2018-03-02 23:17:09","2010-02-10 22:59:15",""
"2240973","How long is the SHA256 hash?","I'm going to run SHA256 on a password + salt, but I don't know how long to make my VARCHAR when setting up the MySQL database. What is a good length?
","Encoding options for SHA256's 256 bits:

Base64: 6 bits per char = CHAR(44) including padding character
Hex: 4 bits per char = CHAR(64)
Binary: 8 bits per byte = BINARY(32)

","218884","<mysql><sha256>","228","62","5","2018-03-02 23:17:09","2241014","1","29","55075","","2018-03-02 23:17:09","2010-02-10 22:59:15",""
"3103652","Hash String via SHA-256 in Java","By looking around here as well as the internet in general, I have found Bouncy Castle. I want to use Bouncy Castle (or some other freely available utility) to generate a SHA-256 Hash of a String in Java. Looking at their documentation I can't seem to find any good examples of what I want to do. Can anybody here help me out?
","To hash a string, use the built-in MessageDigest class:
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.nio.charset.StandardCharsets;
import java.math.BigInteger;

public class CryptoHash {
  public static void main(String[] args) throws NoSuchAlgorithmException {
    MessageDigest md = MessageDigest.getInstance(""SHA-256"");
    String text = ""Text to hash, cryptographically."";

    // Change this to UTF-16 if needed
    md.update(text.getBytes(StandardCharsets.UTF_8));
    byte[] digest = md.digest();

    String hex = String.format(""%064x"", new BigInteger(1, digest));
    System.out.println(hex);
  }
}

In the snippet above, digest contains the hashed string and hex contains a hexadecimal ASCII string with left zero padding.
","191566","<java><bouncycastle><sha256><jce>","108","255","8","2018-10-02 14:41:20","3103722","0","42","276076","","2016-07-21 10:54:55","2010-06-23 16:41:31",""
"3103652","Hash String via SHA-256 in Java","By looking around here as well as the internet in general, I have found Bouncy Castle. I want to use Bouncy Castle (or some other freely available utility) to generate a SHA-256 Hash of a String in Java. Looking at their documentation I can't seem to find any good examples of what I want to do. Can anybody here help me out?
","When using hashcodes with any jce provider you first try to get an 
instance of the algorithm, then update it with the data you want to be hashed 
and when you are finished you call digest to get the hash value. 
MessageDigest sha = MessageDigest.getInstance(""SHA-256"");
sha.update(in.getBytes());
byte[] digest = sha.digest();

you can use the digest to get a base64 or hex encoded version according to your needs
","191566","<java><bouncycastle><sha256><jce>","108","8","8","2018-10-02 14:41:20","3103722","0","42","276076","","2016-07-21 10:54:55","2010-06-23 16:41:31",""
"3103652","Hash String via SHA-256 in Java","By looking around here as well as the internet in general, I have found Bouncy Castle. I want to use Bouncy Castle (or some other freely available utility) to generate a SHA-256 Hash of a String in Java. Looking at their documentation I can't seem to find any good examples of what I want to do. Can anybody here help me out?
","This is already implemented in the runtime libs.
public static String calc(InputStream is) {
    String output;
    int read;
    byte[] buffer = new byte[8192];

    try {
        MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
        while ((read = is.read(buffer)) > 0) {
            digest.update(buffer, 0, read);
        }
        byte[] hash = digest.digest();
        BigInteger bigInt = new BigInteger(1, hash);
        output = bigInt.toString(16);
        while ( output.length() < 32 ) {
            output = ""0""+output;
        }
    } 
    catch (Exception e) {
        e.printStackTrace(System.err);
        return null;
    }

    return output;
}

In a JEE6+ environment one could also use JAXB DataTypeConverter:
import javax.xml.bind.DatatypeConverter;

String hash = DatatypeConverter.printHexBinary( 
           MessageDigest.getInstance(""MD5"").digest(""SOMESTRING"".getBytes(""UTF-8"")));

","191566","<java><bouncycastle><sha256><jce>","108","30","8","2018-10-02 14:41:20","3103722","0","42","276076","","2016-07-21 10:54:55","2010-06-23 16:41:31",""
"3103652","Hash String via SHA-256 in Java","By looking around here as well as the internet in general, I have found Bouncy Castle. I want to use Bouncy Castle (or some other freely available utility) to generate a SHA-256 Hash of a String in Java. Looking at their documentation I can't seem to find any good examples of what I want to do. Can anybody here help me out?
","return new String(Hex.encode(digest));

","191566","<java><bouncycastle><sha256><jce>","108","0","8","2018-10-02 14:41:20","3103722","0","42","276076","","2016-07-21 10:54:55","2010-06-23 16:41:31",""
"3103652","Hash String via SHA-256 in Java","By looking around here as well as the internet in general, I have found Bouncy Castle. I want to use Bouncy Castle (or some other freely available utility) to generate a SHA-256 Hash of a String in Java. Looking at their documentation I can't seem to find any good examples of what I want to do. Can anybody here help me out?
","I suppose you are using a relatively old Java Version without SHA-256.
So you must add the BouncyCastle Provider to the already provided 'Security Providers' in your java version.
    // NEEDED if you are using a Java version without SHA-256    
    Security.addProvider(new BouncyCastleProvider());

    // then go as usual 
    MessageDigest md = MessageDigest.getInstance(""SHA-256"");
    String text = ""my string..."";
    md.update(text.getBytes(""UTF-8"")); // or UTF-16 if needed
    byte[] digest = md.digest();

","191566","<java><bouncycastle><sha256><jce>","108","5","8","2018-10-02 14:41:20","3103722","0","42","276076","","2016-07-21 10:54:55","2010-06-23 16:41:31",""
"3103652","Hash String via SHA-256 in Java","By looking around here as well as the internet in general, I have found Bouncy Castle. I want to use Bouncy Castle (or some other freely available utility) to generate a SHA-256 Hash of a String in Java. Looking at their documentation I can't seem to find any good examples of what I want to do. Can anybody here help me out?
","This will work with ""org.bouncycastle.util.encoders.Hex"" following package 
return new String(Hex.encode(digest));

Its in bouncycastle jar.
","191566","<java><bouncycastle><sha256><jce>","108","-1","8","2018-10-02 14:41:20","3103722","0","42","276076","","2016-07-21 10:54:55","2010-06-23 16:41:31",""
"3103652","Hash String via SHA-256 in Java","By looking around here as well as the internet in general, I have found Bouncy Castle. I want to use Bouncy Castle (or some other freely available utility) to generate a SHA-256 Hash of a String in Java. Looking at their documentation I can't seem to find any good examples of what I want to do. Can anybody here help me out?
","You don't necessarily  need the BouncyCastle library. The following code shows how to do so using the Integer.toHexString function
public static String sha256(String base) {
    try{
        MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
        byte[] hash = digest.digest(base.getBytes(""UTF-8""));
        StringBuffer hexString = new StringBuffer();

        for (int i = 0; i < hash.length; i++) {
            String hex = Integer.toHexString(0xff & hash[i]);
            if(hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }

        return hexString.toString();
    } catch(Exception ex){
       throw new RuntimeException(ex);
    }
}

Special thanks to user1452273 from this post: How to hash some string with sha256 in Java?
Keep up the good work !
","191566","<java><bouncycastle><sha256><jce>","108","16","8","2018-10-02 14:41:20","3103722","0","42","276076","","2016-07-21 10:54:55","2010-06-23 16:41:31",""
"3103652","Hash String via SHA-256 in Java","By looking around here as well as the internet in general, I have found Bouncy Castle. I want to use Bouncy Castle (or some other freely available utility) to generate a SHA-256 Hash of a String in Java. Looking at their documentation I can't seem to find any good examples of what I want to do. Can anybody here help me out?
","Java 8: Base64 available:
    MessageDigest md = MessageDigest.getInstance( ""SHA-512"" );
    md.update( inbytes );
    byte[] aMessageDigest = md.digest();

    String outEncoded = Base64.getEncoder().encodeToString( aMessageDigest );
    return( outEncoded );

","191566","<java><bouncycastle><sha256><jce>","108","7","8","2018-10-02 14:41:20","3103722","0","42","276076","","2016-07-21 10:54:55","2010-06-23 16:41:31",""
"2235158","SHA1 vs md5 vs SHA256: which to use for a PHP login?","I'm making a php login, and I'm trying to decide whether to use SHA1 or Md5, or SHA256 which I read about in another stackoverflow article. Are any of them more secure than others? For SHA1/256, do I still use a salt? 
Also, is this a secure way to store the password as a hash in mysql?
function createSalt()
{
    $string = md5(uniqid(rand(), true));
    return substr($string, 0, 3);
}

$salt = createSalt();

$hash = sha1($salt . $hash);

","Neither. You should use bcrypt. The hashes you mention are all optimized to be quick and easy on hardware, and so cracking them share the same qualities. If you have no other choice, at least be sure to use a long salt and re-hash multiple times.
Using bcrypt in PHP 5.5+
PHP 5.5 offers new functions for password hashing. This is the recommend approach for password storage in modern web applications.
// Creating a hash
$hash = password_hash($password, PASSWORD_DEFAULT, ['cost' => 12]);
// If you omit the ['cost' => 12] part, it will default to 10

// Verifying the password against the stored hash  
if (password_verify($password, $hash)) {
    // Success! Log the user in here.
}

If you're using an older version of PHP you really should upgrade, but until you do you can use password_compat to expose this API.
Also, please let password_hash() generate the salt for you. It uses a [CSPRNG](http://
Two caveats of bcrypt

Bcrypt will silently truncate any password longer than 72 characters.
Bcrypt will truncate after any NUL characters.

(Proof of Concept for both caveats here.)
You might be tempted to resolve the first caveat by pre-hashing your passwords before running them through bcrypt, but doing so can cause your application to run headfirst into the second. 
Instead of writing your own scheme, use an existing library written and/or evaluated by security experts.

Zend\Crypt (part of Zend Framework) offers BcryptSha
PasswordLock is similar to BcryptSha but it also encrypts the bcrypt hashes with an authenticated encryption library.

TL;DR - Use bcrypt.
","150951","<php><login><md5><sha1><sha256>","132","106","11","2019-08-15 06:56:22","2235189","2","62","41071","","2012-01-30 13:32:39","2010-02-10 07:41:06",""
"2235158","SHA1 vs md5 vs SHA256: which to use for a PHP login?","I'm making a php login, and I'm trying to decide whether to use SHA1 or Md5, or SHA256 which I read about in another stackoverflow article. Are any of them more secure than others? For SHA1/256, do I still use a salt? 
Also, is this a secure way to store the password as a hash in mysql?
function createSalt()
{
    $string = md5(uniqid(rand(), true));
    return substr($string, 0, 3);
}

$salt = createSalt();

$hash = sha1($salt . $hash);

","Use SHA256. It is not perfect, as SHA512 would be ideal for a fast hash, but out of the options, its the definite choice. As per any hashing technology, be sure to salt the hash for added security.
As an added note, FRKT, please show me where someone can easily crack a salted SHA256 hash? I am truly very interested to see this.
Important Edit:
Moving forward please use bcrypt as a hardened hash. More information can be found here.

Edit on Salting:
Use a random number, or random byte stream etc. You can use the unique field of the record in your database as the salt too, this way the salt is different per user.
","150951","<php><login><md5><sha1><sha256>","132","13","11","2019-08-15 06:56:22","2235189","2","62","41071","","2012-01-30 13:32:39","2010-02-10 07:41:06",""
"2235158","SHA1 vs md5 vs SHA256: which to use for a PHP login?","I'm making a php login, and I'm trying to decide whether to use SHA1 or Md5, or SHA256 which I read about in another stackoverflow article. Are any of them more secure than others? For SHA1/256, do I still use a salt? 
Also, is this a secure way to store the password as a hash in mysql?
function createSalt()
{
    $string = md5(uniqid(rand(), true));
    return substr($string, 0, 3);
}

$salt = createSalt();

$hash = sha1($salt . $hash);

","As Johannes Gorset pointed out, the post by Thomas Ptacek from Matasano Security explains why simple, general-purpose hashing functions such as MD5, SHA1, SHA256 and SHA512 are poor password hashing choices.
Why? They are too fast--you can calculate at least 1,000,000 MD5 hashes a second per core with a modern computer, so brute force is feasible against most passwords people use. And that's much less than a GPU-based cracking server cluster!
Salting without key stretching only means that you cannot precompute the rainbow table, you need to build it ad hoc for that specific salt. But it won't really make things that much harder.
User @Will says:

Everyone is talking about this like they can be hacked over the
  internet. As already stated, limiting attempts makes it impossible to
  crack a password over the Internet and has nothing to do with the
  hash.

They don't need to. Apparently, in the case of LinkedIn they used the common SQL injection vulnerability to get the login DB table and cracked millions of passwords offline.
Then he goes back to the offline attack scenario:

The security really comes into play when the entire database is
  compromised and a hacker can then perform 100 million password
  attempts per second against the md5 hash. SHA512 is about 10,000 times
  slower.

No, SHA512 is not 10000 times slower than MD5--it only takes about twice as much. Crypt/SHA512, on the other hand, is a very different beast that, like its BCrypt counterpart, performs key stretching, producing a very different hash with a random salt built-in and will take anything between 500 and 999999 times as much to compute (stretching is tunable).
SHA512 => aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d
Crypt/SHA512 => $6$rounds=5000$usesomesillystri$D4IrlXatmP7rx3P3InaxBeoomnAihCKRVQP22JZ6EY47Wc6BkroIuUUBOov1i.S5KPgErtP/EN5mcO.ChWQW21

So the choice for PHP is either Crypt/Blowfish (BCrypt), Crypt/SHA256 or Crypt/SHA512. Or at least Crypt/MD5 (PHK). See www.php.net/manual/en/function.crypt.php
","150951","<php><login><md5><sha1><sha256>","132","15","11","2019-08-15 06:56:22","2235189","2","62","41071","","2012-01-30 13:32:39","2010-02-10 07:41:06",""
"2235158","SHA1 vs md5 vs SHA256: which to use for a PHP login?","I'm making a php login, and I'm trying to decide whether to use SHA1 or Md5, or SHA256 which I read about in another stackoverflow article. Are any of them more secure than others? For SHA1/256, do I still use a salt? 
Also, is this a secure way to store the password as a hash in mysql?
function createSalt()
{
    $string = md5(uniqid(rand(), true));
    return substr($string, 0, 3);
}

$salt = createSalt();

$hash = sha1($salt . $hash);

","Everyone is talking about this like they can be hacked over the internet.  As already stated, limiting attempts makes it impossible to crack a password over the Internet and has nothing to do with the hash.
The salt is a must, but the complexity or multiple salts doesn't even matter.  Any salt alone stops the attacker from using a premade rainbow table.  A unique salt per user stops the attacker from creating a new rainbow table to use against your entire user base.
The security really comes into play when the entire database is compromised and a hacker can then perform 100 million password attempts per second against the md5 hash.  SHA512 is about 10,000 times slower.  A complex password with today's power could still take 100 years to bruteforce with md5 and would take 10,000 times as long with SHA512.  The salts don't stop a bruteforce at all as they always have to be known, which if the attacker downloaded your database, he probably was in your system anyway.
","150951","<php><login><md5><sha1><sha256>","132","3","11","2019-08-15 06:56:22","2235189","2","62","41071","","2012-01-30 13:32:39","2010-02-10 07:41:06",""
"2235158","SHA1 vs md5 vs SHA256: which to use for a PHP login?","I'm making a php login, and I'm trying to decide whether to use SHA1 or Md5, or SHA256 which I read about in another stackoverflow article. Are any of them more secure than others? For SHA1/256, do I still use a salt? 
Also, is this a secure way to store the password as a hash in mysql?
function createSalt()
{
    $string = md5(uniqid(rand(), true));
    return substr($string, 0, 3);
}

$salt = createSalt();

$hash = sha1($salt . $hash);

","I think using md5 or sha256 or any hash optimized for speed is perfectly fine and am very curious to hear any rebuttle other users might have.  Here are my reasons

If you allow users to use weak passwords such as God, love, war, peace then no matter the encryption you will still be allowing the user to type in the password not the hash and these passwords are often used first, thus this is NOT going to have anything to do with encryption.
If your not using SSL or do not have a certificate then attackers listening to the traffic will be able to pull the password and any attempts at encrypting with javascript or the like is client side and easily cracked and overcome.  Again this is NOT going to have anything to do with data encryption on server side.
Brute force attacks will take advantage weak passwords and again because you allow the user to enter the data if you do not have the login limitation of 3 or even a little more then the problem will again NOT have anything to do with data encryption.
If your database becomes compromised then most likely everything has been compromised including your hashing techniques no matter how cryptic you've made it.  Again this could be a disgruntled employee XSS attack or sql injection or some other attack that has nothing to do with your password encryption.

I do believe you should still encrypt but the only thing I can see the encryption does is prevent people that already have or somehow gained access to the database from just reading out loud the password.  If it is someone unauthorized to on the database then you have bigger issues to worry about that's why Sony got took because they thought an encrypted password protected everything including credit card numbers all it does is protect that one field that's it.
The only pure benefit I can see to complex encryptions of passwords in a database is to delay employees or other people that have access to the database from just reading out the passwords.  So if it's a small project or something I wouldn't worry to much about security on the server side instead I would worry more about securing anything a client might send to the server such as sql injection, XSS attacks or the plethora of other ways you could be compromised.  If someone disagrees I look forward to reading a way that a super encrypted password is a must from the client side.
The reason I wanted to try and make this clear is because too often people believe an encrypted password means they don't have to worry about it being compromised and they quit worrying about securing the website.
","150951","<php><login><md5><sha1><sha256>","132","22","11","2019-08-15 06:56:22","2235189","2","62","41071","","2012-01-30 13:32:39","2010-02-10 07:41:06",""
"2235158","SHA1 vs md5 vs SHA256: which to use for a PHP login?","I'm making a php login, and I'm trying to decide whether to use SHA1 or Md5, or SHA256 which I read about in another stackoverflow article. Are any of them more secure than others? For SHA1/256, do I still use a salt? 
Also, is this a secure way to store the password as a hash in mysql?
function createSalt()
{
    $string = md5(uniqid(rand(), true));
    return substr($string, 0, 3);
}

$salt = createSalt();

$hash = sha1($salt . $hash);

","MD5 is bad because of collision problems - two different passwords possibly generating the same md-5.
Sha-1 would be plenty secure for this. The reason you store the salted sha-1 version of the password is so that you the swerver do not keep the user's apassword on file, that they may be using with other people's servers. Otherwise, what difference does it make? 
If the hacker steals your entire unencrypted database some how, the only thing a hashed salted password does is prevent him from impersonating the user for future signons - the hacker already has the data.
What good does it do the attacker to have the hashed value, if what your user inputs is a plain password? 
And even if the hacker with future technology could generate a million sha-1 keys a second for a brute force attack, would your server handle a million logons a second for the hacker to test his keys?  That's if you are letting the hacker try to logon with the salted sha-1 instead of a password like a normal logon.
The best bet is to limit bad logon attempts to some reasonable number - 25 for example, and then time the user out for a minute or two. And if the cumulative bady logon attempts hits 250 within 24 hours, shut the account access down and email the owner.
","150951","<php><login><md5><sha1><sha256>","132","1","11","2019-08-15 06:56:22","2235189","2","62","41071","","2012-01-30 13:32:39","2010-02-10 07:41:06",""
"2235158","SHA1 vs md5 vs SHA256: which to use for a PHP login?","I'm making a php login, and I'm trying to decide whether to use SHA1 or Md5, or SHA256 which I read about in another stackoverflow article. Are any of them more secure than others? For SHA1/256, do I still use a salt? 
Also, is this a secure way to store the password as a hash in mysql?
function createSalt()
{
    $string = md5(uniqid(rand(), true));
    return substr($string, 0, 3);
}

$salt = createSalt();

$hash = sha1($salt . $hash);

","What people seem to be missing is that if the hacker has access to the database he probably also has access to the php file that hashes the password and can likely just modify that to send him all the successful user name password combos.  If he doesn't have access to the web directory he could always just pick a password hash it, and write that into the database.  In other words the hash algorithm doesn't really matter as much as system security, and limiting login attempts also if you don't use SSL then the attacker can just listen in on the connection to get the information. Unless you need the algorithm to take a long time to compute (for your own purposes) then SHA-256 or SHA-512 with a user specific salt should be enough.
As an added security measure set up a script (bash, batch, python, etc) or program and give it an obscure name and have it check and see if login.php has changed (check date/time stamp) and send you an email if it has. Also should probably log all attempts at login with admin rights and log all failed attempts to log into the database and have the logs emailed to you.
","150951","<php><login><md5><sha1><sha256>","132","4","11","2019-08-15 06:56:22","2235189","2","62","41071","","2012-01-30 13:32:39","2010-02-10 07:41:06",""
"2235158","SHA1 vs md5 vs SHA256: which to use for a PHP login?","I'm making a php login, and I'm trying to decide whether to use SHA1 or Md5, or SHA256 which I read about in another stackoverflow article. Are any of them more secure than others? For SHA1/256, do I still use a salt? 
Also, is this a secure way to store the password as a hash in mysql?
function createSalt()
{
    $string = md5(uniqid(rand(), true));
    return substr($string, 0, 3);
}

$salt = createSalt();

$hash = sha1($salt . $hash);

","Use argon2i. The argon2 password hashing function has won the Password Hashing Competition.
Other reasonable choices, if using argon2 is not available, are scrypt, bcrypt and PBKDF2. Wikipedia has pages for these functions:

https://en.wikipedia.org/wiki/Argon2
http://en.wikipedia.org/wiki/Scrypt
http://en.wikipedia.org/wiki/Bcrypt
http://en.wikipedia.org/wiki/PBKDF2

MD5, SHA1 and SHA256 are message digests, not password-hashing functions. They are not suitable for this purpose.
Switching from MD5 to SHA1 or SHA512 will not improve the security of the construction so much. Computing a SHA256 or SHA512 hash is very fast. An attacker with common hardware could still try tens of millions (with a single CPU) or even billions (with a single GPU) of hashes per second. Good password hashing functions include a work factor to slow down dictionary attacks.
Here is a suggestion for PHP programmers: read the PHP FAQ then use password_hash().
","150951","<php><login><md5><sha1><sha256>","132","1","11","2019-08-15 06:56:22","2235189","2","62","41071","","2012-01-30 13:32:39","2010-02-10 07:41:06",""
"2235158","SHA1 vs md5 vs SHA256: which to use for a PHP login?","I'm making a php login, and I'm trying to decide whether to use SHA1 or Md5, or SHA256 which I read about in another stackoverflow article. Are any of them more secure than others? For SHA1/256, do I still use a salt? 
Also, is this a secure way to store the password as a hash in mysql?
function createSalt()
{
    $string = md5(uniqid(rand(), true));
    return substr($string, 0, 3);
}

$salt = createSalt();

$hash = sha1($salt . $hash);

","Let's assume the next point : the hackers steal our database including the users and password (encrypted). And the hackers created a fake account with a password that they know.
MD5 is weak because its short and popular and practically every hash generation without password is weak of a dictionary attack.  But..
So, let's say that we are still using MD5 with a SALT.   The hackers don't know the SALT but they know the password of a specific user.  So they can test : ?????12345 where 12345 is the know password and ????? is the salt. The hackers sooner or later can guess the SALT.
However, if we used a MD5+SALT and we applied MD5, then there is not way to recover the information.   However, i repeat, MD5 is still short.
For example, let's say that my password is : 12345. The SALT is BILLCLINTON
md5 : 827ccb0eea8a706c4c34a16891f84e7b
md5 with the hash : 56adb0f19ac0fb50194c312d49b15378
mD5 with the hash over md5 : 28a03c0bc950decdd9ee362907d1798a   I tried to use those online service and i found none that was able to crack it.  And its only MD5! (may be as today it will be crackeable because i generated the md5 online)
If you want to overkill then SHA256 is more than enough if its applied with a salt and twice.
tldr MD5(HASH+MD5(password)) = ok but short, SHA256 is more than enough.
","150951","<php><login><md5><sha1><sha256>","132","0","11","2019-08-15 06:56:22","2235189","2","62","41071","","2012-01-30 13:32:39","2010-02-10 07:41:06",""
"2235158","SHA1 vs md5 vs SHA256: which to use for a PHP login?","I'm making a php login, and I'm trying to decide whether to use SHA1 or Md5, or SHA256 which I read about in another stackoverflow article. Are any of them more secure than others? For SHA1/256, do I still use a salt? 
Also, is this a secure way to store the password as a hash in mysql?
function createSalt()
{
    $string = md5(uniqid(rand(), true));
    return substr($string, 0, 3);
}

$salt = createSalt();

$hash = sha1($salt . $hash);

","Here is the comparison between MD5 and SHA1. You can get a clear idea about which one is better.

","150951","<php><login><md5><sha1><sha256>","132","1","11","2019-08-15 06:56:22","2235189","2","62","41071","","2012-01-30 13:32:39","2010-02-10 07:41:06",""
"2235158","SHA1 vs md5 vs SHA256: which to use for a PHP login?","I'm making a php login, and I'm trying to decide whether to use SHA1 or Md5, or SHA256 which I read about in another stackoverflow article. Are any of them more secure than others? For SHA1/256, do I still use a salt? 
Also, is this a secure way to store the password as a hash in mysql?
function createSalt()
{
    $string = md5(uniqid(rand(), true));
    return substr($string, 0, 3);
}

$salt = createSalt();

$hash = sha1($salt . $hash);

","An md5 encryption is one of the worst, because you have to turn the code and it is already decrypted. I would recommend you the SHA256. I'm programming a bit longer and have had a good experience. Below would also be an encryption.
password_hash() example using Argon2i

<?php
echo 'Argon2i hash: ' . password_hash('rasmuslerdorf', PASSWORD_ARGON2I);
?>
The above example will output something similar to:

Argon2i hash: $argon2i$v=19$m=1024,t=2,p=2$YzJBSzV4TUhkMzc3d3laeg$zqU/1IN0/AogfP4cmSJI1vc8lpXRW9/S0sYY2i2jHT0

","150951","<php><login><md5><sha1><sha256>","132","0","11","2019-08-15 06:56:22","2235189","2","62","41071","","2012-01-30 13:32:39","2010-02-10 07:41:06",""
"1752477","How to use sha256 in php5.3.0","I'm using sha256 to encrypt the password. I can save the sha256 encrypted password in mysql. But i can't login with the same clause.
Insert code:
<?php
error_reporting(E_ALL ^ E_NOTICE);
$username = $_POST['uusername'];
$passcode = $_POST['ppasscode'];
$userflag = $_POST['uuserflag'];
//$passcodeen = hash('sha256',$passcode);
$passcodeen = hash('sha256', (get_magic_quotes_gpc() ? stripslashes($ppasscode) : $ppasscode));
$conn = mysql_connect(""localhost"",""charles"",""charles"") or die(""connection failed with DB:"".mysql_error());
mysql_select_db(""sessiondb"");
$query = ""INSERT INTO users(username,passcode,userflag) values('$username','$passcodeen','$userflag')"";

Select code:
<?php 
error_reporting(E_ALL ^ E_NOTICE);

    @mysql_connect(""localhost"",""charles"",""charles"") or die(""Connection failed"".mysql_error());
    @mysql_select_db(""sessiondb"") or die(""Database doesn't exist"".mysql_error());
    //get user input
    $username = $_POST['username'];
    $ppasscode = $_POST['ppasscode'];
    //$passcodeen = hash('sha256', $ppasscode);
    $passcodeen = hash('sha256', (get_magic_quotes_gpc() ? stripslashes($ppasscode) : $ppasscode));
    //get session value from mysql
    $query = @mysql_query(""select username, userflag from users where username ='$username' and passcode = '$passcodeen'"") or die(""Query execution failed"".mysql_error());

Is there something wrong?  I'm very confused. Thanks. 
","Could this be a typo? (two Ps in ppasscode, intended?)
$_POST['ppasscode'];

I would make sure and do:
print_r($_POST);

and make sure the data is accurate there, and then echo out what it should look like:
echo hash('sha256', $_POST['ppasscode']);

Compare this output to what you have in the database (manually). By doing this you're exploring your possible points of failure:

Getting password from form
hashing the password
stored password
comparison of the two. 

","137031","<php><hash><sha256>","39","60","5","2019-03-20 17:11:18","1752593","18","9","198728","","2009-11-17 23:36:06","2009-11-17 22:59:19",""
"1752477","How to use sha256 in php5.3.0","I'm using sha256 to encrypt the password. I can save the sha256 encrypted password in mysql. But i can't login with the same clause.
Insert code:
<?php
error_reporting(E_ALL ^ E_NOTICE);
$username = $_POST['uusername'];
$passcode = $_POST['ppasscode'];
$userflag = $_POST['uuserflag'];
//$passcodeen = hash('sha256',$passcode);
$passcodeen = hash('sha256', (get_magic_quotes_gpc() ? stripslashes($ppasscode) : $ppasscode));
$conn = mysql_connect(""localhost"",""charles"",""charles"") or die(""connection failed with DB:"".mysql_error());
mysql_select_db(""sessiondb"");
$query = ""INSERT INTO users(username,passcode,userflag) values('$username','$passcodeen','$userflag')"";

Select code:
<?php 
error_reporting(E_ALL ^ E_NOTICE);

    @mysql_connect(""localhost"",""charles"",""charles"") or die(""Connection failed"".mysql_error());
    @mysql_select_db(""sessiondb"") or die(""Database doesn't exist"".mysql_error());
    //get user input
    $username = $_POST['username'];
    $ppasscode = $_POST['ppasscode'];
    //$passcodeen = hash('sha256', $ppasscode);
    $passcodeen = hash('sha256', (get_magic_quotes_gpc() ? stripslashes($ppasscode) : $ppasscode));
    //get session value from mysql
    $query = @mysql_query(""select username, userflag from users where username ='$username' and passcode = '$passcodeen'"") or die(""Query execution failed"".mysql_error());

Is there something wrong?  I'm very confused. Thanks. 
","First of all, sha256 is a hashing algorithm, not a type of encryption. An encryption would require having a way to decrypt the information back to its original value (collisions aside).
Looking at your code, it seems it should work if you are providing the correct parameter.

Try using a literal string in your code first, and verify its validity instead of using the $_POST[] variable
Try moving the comparison from the database query to the code (get the hash for the given user and compare to the hash you have just calculated)

But most importantly before deploying this in any kind of public fashion, please remember to sanitize your inputs. Don't allow arbitrary SQL to be insert into the queries. The best idea here would be to use parameterized queries.
","137031","<php><hash><sha256>","39","11","5","2019-03-20 17:11:18","1752593","18","9","198728","","2009-11-17 23:36:06","2009-11-17 22:59:19",""
"1752477","How to use sha256 in php5.3.0","I'm using sha256 to encrypt the password. I can save the sha256 encrypted password in mysql. But i can't login with the same clause.
Insert code:
<?php
error_reporting(E_ALL ^ E_NOTICE);
$username = $_POST['uusername'];
$passcode = $_POST['ppasscode'];
$userflag = $_POST['uuserflag'];
//$passcodeen = hash('sha256',$passcode);
$passcodeen = hash('sha256', (get_magic_quotes_gpc() ? stripslashes($ppasscode) : $ppasscode));
$conn = mysql_connect(""localhost"",""charles"",""charles"") or die(""connection failed with DB:"".mysql_error());
mysql_select_db(""sessiondb"");
$query = ""INSERT INTO users(username,passcode,userflag) values('$username','$passcodeen','$userflag')"";

Select code:
<?php 
error_reporting(E_ALL ^ E_NOTICE);

    @mysql_connect(""localhost"",""charles"",""charles"") or die(""Connection failed"".mysql_error());
    @mysql_select_db(""sessiondb"") or die(""Database doesn't exist"".mysql_error());
    //get user input
    $username = $_POST['username'];
    $ppasscode = $_POST['ppasscode'];
    //$passcodeen = hash('sha256', $ppasscode);
    $passcodeen = hash('sha256', (get_magic_quotes_gpc() ? stripslashes($ppasscode) : $ppasscode));
    //get session value from mysql
    $query = @mysql_query(""select username, userflag from users where username ='$username' and passcode = '$passcodeen'"") or die(""Query execution failed"".mysql_error());

Is there something wrong?  I'm very confused. Thanks. 
","You should use Adaptive hashing like http://en.wikipedia.org/wiki/Bcrypt for securing passwords
","137031","<php><hash><sha256>","39","1","5","2019-03-20 17:11:18","1752593","18","9","198728","","2009-11-17 23:36:06","2009-11-17 22:59:19",""
"1752477","How to use sha256 in php5.3.0","I'm using sha256 to encrypt the password. I can save the sha256 encrypted password in mysql. But i can't login with the same clause.
Insert code:
<?php
error_reporting(E_ALL ^ E_NOTICE);
$username = $_POST['uusername'];
$passcode = $_POST['ppasscode'];
$userflag = $_POST['uuserflag'];
//$passcodeen = hash('sha256',$passcode);
$passcodeen = hash('sha256', (get_magic_quotes_gpc() ? stripslashes($ppasscode) : $ppasscode));
$conn = mysql_connect(""localhost"",""charles"",""charles"") or die(""connection failed with DB:"".mysql_error());
mysql_select_db(""sessiondb"");
$query = ""INSERT INTO users(username,passcode,userflag) values('$username','$passcodeen','$userflag')"";

Select code:
<?php 
error_reporting(E_ALL ^ E_NOTICE);

    @mysql_connect(""localhost"",""charles"",""charles"") or die(""Connection failed"".mysql_error());
    @mysql_select_db(""sessiondb"") or die(""Database doesn't exist"".mysql_error());
    //get user input
    $username = $_POST['username'];
    $ppasscode = $_POST['ppasscode'];
    //$passcodeen = hash('sha256', $ppasscode);
    $passcodeen = hash('sha256', (get_magic_quotes_gpc() ? stripslashes($ppasscode) : $ppasscode));
    //get session value from mysql
    $query = @mysql_query(""select username, userflag from users where username ='$username' and passcode = '$passcodeen'"") or die(""Query execution failed"".mysql_error());

Is there something wrong?  I'm very confused. Thanks. 
","A way better solution is to just use the excelent compatibility script from Anthony Ferrara:
https://github.com/ircmaxell/password_compat
Please, and also, when checking the password, always add a way (preferibly async, so it doesn't impact the check process for timming attacks) to update the hash if needed.
","137031","<php><hash><sha256>","39","0","5","2019-03-20 17:11:18","1752593","18","9","198728","","2009-11-17 23:36:06","2009-11-17 22:59:19",""
"1752477","How to use sha256 in php5.3.0","I'm using sha256 to encrypt the password. I can save the sha256 encrypted password in mysql. But i can't login with the same clause.
Insert code:
<?php
error_reporting(E_ALL ^ E_NOTICE);
$username = $_POST['uusername'];
$passcode = $_POST['ppasscode'];
$userflag = $_POST['uuserflag'];
//$passcodeen = hash('sha256',$passcode);
$passcodeen = hash('sha256', (get_magic_quotes_gpc() ? stripslashes($ppasscode) : $ppasscode));
$conn = mysql_connect(""localhost"",""charles"",""charles"") or die(""connection failed with DB:"".mysql_error());
mysql_select_db(""sessiondb"");
$query = ""INSERT INTO users(username,passcode,userflag) values('$username','$passcodeen','$userflag')"";

Select code:
<?php 
error_reporting(E_ALL ^ E_NOTICE);

    @mysql_connect(""localhost"",""charles"",""charles"") or die(""Connection failed"".mysql_error());
    @mysql_select_db(""sessiondb"") or die(""Database doesn't exist"".mysql_error());
    //get user input
    $username = $_POST['username'];
    $ppasscode = $_POST['ppasscode'];
    //$passcodeen = hash('sha256', $ppasscode);
    $passcodeen = hash('sha256', (get_magic_quotes_gpc() ? stripslashes($ppasscode) : $ppasscode));
    //get session value from mysql
    $query = @mysql_query(""select username, userflag from users where username ='$username' and passcode = '$passcodeen'"") or die(""Query execution failed"".mysql_error());

Is there something wrong?  I'm very confused. Thanks. 
","The first thing is to make a comparison of functions of SHA and opt for the safest algorithm that supports your programming language (PHP).
Then you can chew the official documentation to implement the hash() function that receives as argument the hashing algorithm you have chosen and the raw password.
sha256 => 64 bits
sha384 => 96 bits
sha512 => 128 bits
The more secure the hashing algorithm is, the higher the cost in terms of hashing and time to recover the original value from the server side.
$hashedPassword = hash('sha256', $password);

","137031","<php><hash><sha256>","39","1","5","2019-03-20 17:11:18","1752593","18","9","198728","","2009-11-17 23:36:06","2009-11-17 22:59:19",""
"18338890","Are there any SHA-256 javascript implementations that are generally considered trustworthy?","I am writing a login for a forum, and need to hash the password client side in javascript before sending it on to the server. I'm having trouble figuring out which SHA-256 implementation I can actually trust. I was expecting there to be some kind of authoritative script that everyone used, but I'm finding loads of different projects all with their own implementations.
I realize using other people's crypto is always a leap of faith unless you're qualified to review it yourself, and that there is no universal definition of ""trustworthy"", but this seems like something common and important enough that there ought to be some kind of consensus on what to use. Am I just naive?
Edit since it comes up a lot in the comments: Yes, we do a more stringent hash again on the server side. The client side hashing is not the final result that we save in the database. The client side hashing is because the human client requests it. They have not given a specific reason why, probably they just like overkill.
","No, there's no way to use browser JavaScript to improve password security. I highly recommend you read this article. In your case, the biggest problem is the chicken-egg problem:

What's the ""chicken-egg problem"" with delivering Javascript cryptography?
If you don't trust the network to deliver a password, or, worse, don't trust the server not to keep user secrets, you can't trust them to deliver security code. The same attacker who was sniffing passwords or reading diaries before you introduce crypto is simply hijacking crypto code after you do.

[...]

Why can't I use TLS/SSL to deliver the Javascript crypto code?
You can. It's harder than it sounds, but you safely transmit Javascript crypto to a browser using SSL. The problem is, having established a secure channel with SSL, you no longer need Javascript cryptography; you have ""real"" cryptography.

Which leads to this:

The problem with running crypto code in Javascript is that practically any function that the crypto depends on could be overridden silently by any piece of content used to build the hosting page. Crypto security could be undone early in the process (by generating bogus random numbers, or by tampering with constants and parameters used by algorithms), or later (by spiriting key material back to an attacker), or --- in the most likely scenario --- by bypassing the crypto entirely.
There is no reliable way for any piece of Javascript code to verify its execution environment. Javascript crypto code can't ask, ""am I really dealing with a random number generator, or with some facsimile of one provided by an attacker?"" And it certainly can't assert ""nobody is allowed to do anything with this crypto secret except in ways that I, the author, approve of"". These are two properties that often are provided in other environments that use crypto, and they're impossible in Javascript.

Basically the problem is this:

Your clients don't trust your servers, so they want to add extra security code.
That security code is delivered by your servers (the ones they don't trust).

Or alternatively,

Your clients don't trust SSL, so they want you use extra security code.
That security code is delivered via SSL.

Note: Also, SHA-256 isn't suitable for this, since it's so easy to brute force unsalted non-iterated passwords. If you decide to do this anyway, look for an implementation of bcrypt, scrypt or PBKDF2.
","109738","<hash><javascript><sha256><sha2>","75","10","7","2019-01-30 08:26:27","18338892","18","25","","","","2013-08-19 17:15:47",""
"18338890","Are there any SHA-256 javascript implementations that are generally considered trustworthy?","I am writing a login for a forum, and need to hash the password client side in javascript before sending it on to the server. I'm having trouble figuring out which SHA-256 implementation I can actually trust. I was expecting there to be some kind of authoritative script that everyone used, but I'm finding loads of different projects all with their own implementations.
I realize using other people's crypto is always a leap of faith unless you're qualified to review it yourself, and that there is no universal definition of ""trustworthy"", but this seems like something common and important enough that there ought to be some kind of consensus on what to use. Am I just naive?
Edit since it comes up a lot in the comments: Yes, we do a more stringent hash again on the server side. The client side hashing is not the final result that we save in the database. The client side hashing is because the human client requests it. They have not given a specific reason why, probably they just like overkill.
","The Stanford JS Crypto Library contains an implementation of SHA-256. While crypto in JS isn't really as well-vetted an endeavor as other implementation platforms, this one is at least partially developed by, and to a certain extent sponsored by, Dan Boneh, who is a well-established and trusted name in cryptography, and means that the project has some oversight by someone who actually knows what he's doing. The project is also supported by the NSF.
It's worth pointing out, however...
... that if you hash the password client-side before submitting it, then the hash is the password, and the original password becomes irrelevant. An attacker needs only to intercept the hash in order to impersonate the user, and if that hash is stored unmodified on the server, then the server is storing the true password (the hash) in plain-text.
So your security is now worse because you decided add your own improvements to what was previously a trusted scheme.
","109738","<hash><javascript><sha256><sha2>","75","92","7","2019-01-30 08:26:27","18338892","18","25","","","","2013-08-19 17:15:47",""
"18338890","Are there any SHA-256 javascript implementations that are generally considered trustworthy?","I am writing a login for a forum, and need to hash the password client side in javascript before sending it on to the server. I'm having trouble figuring out which SHA-256 implementation I can actually trust. I was expecting there to be some kind of authoritative script that everyone used, but I'm finding loads of different projects all with their own implementations.
I realize using other people's crypto is always a leap of faith unless you're qualified to review it yourself, and that there is no universal definition of ""trustworthy"", but this seems like something common and important enough that there ought to be some kind of consensus on what to use. Am I just naive?
Edit since it comes up a lot in the comments: Yes, we do a more stringent hash again on the server side. The client side hashing is not the final result that we save in the database. The client side hashing is because the human client requests it. They have not given a specific reason why, probably they just like overkill.
","Forge's SHA-256 implementation is fast and reliable.
To run tests on several SHA-256 JavaScript implementations, go to http://brillout.github.io/test-javascript-hash-implementations/.
The results on my machine suggests forge to be the fastest implementation and also considerably faster than the Stanford Javascript Crypto Library (sjcl) mentioned in the accepted answer.
Forge is 256 KB big, but extracting the SHA-256 related code reduces the size to 4.5 KB, see https://github.com/brillout/forge-sha256
","109738","<hash><javascript><sha256><sha2>","75","16","7","2019-01-30 08:26:27","18338892","18","25","","","","2013-08-19 17:15:47",""
"18338890","Are there any SHA-256 javascript implementations that are generally considered trustworthy?","I am writing a login for a forum, and need to hash the password client side in javascript before sending it on to the server. I'm having trouble figuring out which SHA-256 implementation I can actually trust. I was expecting there to be some kind of authoritative script that everyone used, but I'm finding loads of different projects all with their own implementations.
I realize using other people's crypto is always a leap of faith unless you're qualified to review it yourself, and that there is no universal definition of ""trustworthy"", but this seems like something common and important enough that there ought to be some kind of consensus on what to use. Am I just naive?
Edit since it comes up a lot in the comments: Yes, we do a more stringent hash again on the server side. The client side hashing is not the final result that we save in the database. The client side hashing is because the human client requests it. They have not given a specific reason why, probably they just like overkill.
","Besides the Stanford lib that tylerl mentioned. I found jsrsasign very useful (Github repo here:https://github.com/kjur/jsrsasign). I don't know how exactly trustworthy it is, but i've used its API of SHA256, Base64, RSA, x509 etc. and it works pretty well. In fact, it includes the Stanford lib as well.
If all you want to do is SHA256, jsrsasign might be a overkill. But if you have other needs in the related area, I feel it's a good fit.  
","109738","<hash><javascript><sha256><sha2>","75","0","7","2019-01-30 08:26:27","18338892","18","25","","","","2013-08-19 17:15:47",""
"18338890","Are there any SHA-256 javascript implementations that are generally considered trustworthy?","I am writing a login for a forum, and need to hash the password client side in javascript before sending it on to the server. I'm having trouble figuring out which SHA-256 implementation I can actually trust. I was expecting there to be some kind of authoritative script that everyone used, but I'm finding loads of different projects all with their own implementations.
I realize using other people's crypto is always a leap of faith unless you're qualified to review it yourself, and that there is no universal definition of ""trustworthy"", but this seems like something common and important enough that there ought to be some kind of consensus on what to use. Am I just naive?
Edit since it comes up a lot in the comments: Yes, we do a more stringent hash again on the server side. The client side hashing is not the final result that we save in the database. The client side hashing is because the human client requests it. They have not given a specific reason why, probably they just like overkill.
","I found this implementation very easy to use. Also has a generous BSD-style license:
jsSHA: https://github.com/Caligatio/jsSHA
I needed a quick way to get the hex-string representation of a SHA-256 hash. It only took 3 lines:
var sha256 = new jsSHA('SHA-256', 'TEXT');
sha256.update(some_string_variable_to_hash);
var hash = sha256.getHash(""HEX"");

","109738","<hash><javascript><sha256><sha2>","75","10","7","2019-01-30 08:26:27","18338892","18","25","","","","2013-08-19 17:15:47",""
"18338890","Are there any SHA-256 javascript implementations that are generally considered trustworthy?","I am writing a login for a forum, and need to hash the password client side in javascript before sending it on to the server. I'm having trouble figuring out which SHA-256 implementation I can actually trust. I was expecting there to be some kind of authoritative script that everyone used, but I'm finding loads of different projects all with their own implementations.
I realize using other people's crypto is always a leap of faith unless you're qualified to review it yourself, and that there is no universal definition of ""trustworthy"", but this seems like something common and important enough that there ought to be some kind of consensus on what to use. Am I just naive?
Edit since it comes up a lot in the comments: Yes, we do a more stringent hash again on the server side. The client side hashing is not the final result that we save in the database. The client side hashing is because the human client requests it. They have not given a specific reason why, probably they just like overkill.
","On https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest I found this snippet that uses internal js module:
async function sha256(message) {
    // encode as UTF-8
    const msgBuffer = new TextEncoder('utf-8').encode(message);                    

    // hash the message
    const hashBuffer = await crypto.subtle.digest('SHA-256', msgBuffer);

    // convert ArrayBuffer to Array
    const hashArray = Array.from(new Uint8Array(hashBuffer));

    // convert bytes to hex string                  
    const hashHex = hashArray.map(b => ('00' + b.toString(16)).slice(-2)).join('');
    return hashHex;
}

Note that crypto.subtle in only available on https or localhost - for example for your local development with python3 -m http.server you need to add this line to your /etc/hosts:
0.0.0.0 localhost
Reboot - and you can open localhost:8000 with working crypto.subtle.
","109738","<hash><javascript><sha256><sha2>","75","27","7","2019-01-30 08:26:27","18338892","18","25","","","","2013-08-19 17:15:47",""
"18338890","Are there any SHA-256 javascript implementations that are generally considered trustworthy?","I am writing a login for a forum, and need to hash the password client side in javascript before sending it on to the server. I'm having trouble figuring out which SHA-256 implementation I can actually trust. I was expecting there to be some kind of authoritative script that everyone used, but I'm finding loads of different projects all with their own implementations.
I realize using other people's crypto is always a leap of faith unless you're qualified to review it yourself, and that there is no universal definition of ""trustworthy"", but this seems like something common and important enough that there ought to be some kind of consensus on what to use. Am I just naive?
Edit since it comes up a lot in the comments: Yes, we do a more stringent hash again on the server side. The client side hashing is not the final result that we save in the database. The client side hashing is because the human client requests it. They have not given a specific reason why, probably they just like overkill.
","For those interested, this is code for creating SHA-256 hash using sjcl:
import sjcl from 'sjcl'

const myString = 'Hello'
const myBitArray = sjcl.hash.sha256.hash(myString)
const myHash = sjcl.codec.hex.fromBits(myBitArray)

","109738","<hash><javascript><sha256><sha2>","75","6","7","2019-01-30 08:26:27","18338892","18","25","","","","2013-08-19 17:15:47",""
"2262386","Generate sha256 with OpenSSL and C++","I'm looking to create a hash with sha256 using openssl and C++. I know there's a similar post at Generate SHA hash in C++ using OpenSSL library, but I'm looking to specifically create sha256.
UPDATE: 
Seems to be a problem with the include paths. It can't find any OpenSSL functions even though I included 
#include ""openssl/sha.h""

and I included the paths in my build
-I/opt/ssl/include/ -L/opt/ssl/lib/ -lcrypto 

","I think that you only have to replace SHA1 function with SHA256 function with tatk code from link in Your post
","105554","<c++><unix><openssl><sha256>","60","1","5","2019-02-25 04:39:42","2458382","6","24","608639","","2018-02-13 17:27:58","2010-02-14 19:14:48",""
"2262386","Generate sha256 with OpenSSL and C++","I'm looking to create a hash with sha256 using openssl and C++. I know there's a similar post at Generate SHA hash in C++ using OpenSSL library, but I'm looking to specifically create sha256.
UPDATE: 
Seems to be a problem with the include paths. It can't find any OpenSSL functions even though I included 
#include ""openssl/sha.h""

and I included the paths in my build
-I/opt/ssl/include/ -L/opt/ssl/lib/ -lcrypto 

","Here's how I did it:
void sha256_hash_string (unsigned char hash[SHA256_DIGEST_LENGTH], char outputBuffer[65])
{
    int i = 0;

    for(i = 0; i < SHA256_DIGEST_LENGTH; i++)
    {
        sprintf(outputBuffer + (i * 2), ""%02x"", hash[i]);
    }

    outputBuffer[64] = 0;
}


void sha256_string(char *string, char outputBuffer[65])
{
    unsigned char hash[SHA256_DIGEST_LENGTH];
    SHA256_CTX sha256;
    SHA256_Init(&sha256);
    SHA256_Update(&sha256, string, strlen(string));
    SHA256_Final(hash, &sha256);
    int i = 0;
    for(i = 0; i < SHA256_DIGEST_LENGTH; i++)
    {
        sprintf(outputBuffer + (i * 2), ""%02x"", hash[i]);
    }
    outputBuffer[64] = 0;
}

int sha256_file(char *path, char outputBuffer[65])
{
    FILE *file = fopen(path, ""rb"");
    if(!file) return -534;

    unsigned char hash[SHA256_DIGEST_LENGTH];
    SHA256_CTX sha256;
    SHA256_Init(&sha256);
    const int bufSize = 32768;
    unsigned char *buffer = malloc(bufSize);
    int bytesRead = 0;
    if(!buffer) return ENOMEM;
    while((bytesRead = fread(buffer, 1, bufSize, file)))
    {
        SHA256_Update(&sha256, buffer, bytesRead);
    }
    SHA256_Final(hash, &sha256);

    sha256_hash_string(hash, outputBuffer);
    fclose(file);
    free(buffer);
    return 0;
}

It's called like this:
static unsigned char buffer[65];
sha256(""string"", buffer);
printf(""%s\n"", buffer);

","105554","<c++><unix><openssl><sha256>","60","67","5","2019-02-25 04:39:42","2458382","6","24","608639","","2018-02-13 17:27:58","2010-02-14 19:14:48",""
"2262386","Generate sha256 with OpenSSL and C++","I'm looking to create a hash with sha256 using openssl and C++. I know there's a similar post at Generate SHA hash in C++ using OpenSSL library, but I'm looking to specifically create sha256.
UPDATE: 
Seems to be a problem with the include paths. It can't find any OpenSSL functions even though I included 
#include ""openssl/sha.h""

and I included the paths in my build
-I/opt/ssl/include/ -L/opt/ssl/lib/ -lcrypto 

","A more ""C++""ish version
#include <iostream>
#include <sstream>

#include ""openssl/sha.h""

using namespace std;

string to_hex(unsigned char s) {
    stringstream ss;
    ss << hex << (int) s;
    return ss.str();
}   

string sha256(string line) {    
    unsigned char hash[SHA256_DIGEST_LENGTH];
    SHA256_CTX sha256;
    SHA256_Init(&sha256);
    SHA256_Update(&sha256, line.c_str(), line.length());
    SHA256_Final(hash, &sha256);

    string output = """";    
    for(int i = 0; i < SHA256_DIGEST_LENGTH; i++) {
        output += to_hex(hash[i]);
    }
    return output;
}

int main() {
    cout << sha256(""hello, world"") << endl;

    return 0;
}

","105554","<c++><unix><openssl><sha256>","60","3","5","2019-02-25 04:39:42","2458382","6","24","608639","","2018-02-13 17:27:58","2010-02-14 19:14:48",""
"2262386","Generate sha256 with OpenSSL and C++","I'm looking to create a hash with sha256 using openssl and C++. I know there's a similar post at Generate SHA hash in C++ using OpenSSL library, but I'm looking to specifically create sha256.
UPDATE: 
Seems to be a problem with the include paths. It can't find any OpenSSL functions even though I included 
#include ""openssl/sha.h""

and I included the paths in my build
-I/opt/ssl/include/ -L/opt/ssl/lib/ -lcrypto 

","std based
#include <iostream>
#include <iomanip>
#include <sstream>
#include <string>

using namespace std;

#include <openssl/sha.h>
string sha256(const string str)
{
    unsigned char hash[SHA256_DIGEST_LENGTH];
    SHA256_CTX sha256;
    SHA256_Init(&sha256);
    SHA256_Update(&sha256, str.c_str(), str.size());
    SHA256_Final(hash, &sha256);
    stringstream ss;
    for(int i = 0; i < SHA256_DIGEST_LENGTH; i++)
    {
        ss << hex << setw(2) << setfill('0') << (int)hash[i];
    }
    return ss.str();
}

int main() {
    cout << sha256(""1234567890_1"") << endl;
    cout << sha256(""1234567890_2"") << endl;
    cout << sha256(""1234567890_3"") << endl;
    cout << sha256(""1234567890_4"") << endl;
    return 0;
}

","105554","<c++><unix><openssl><sha256>","60","40","5","2019-02-25 04:39:42","2458382","6","24","608639","","2018-02-13 17:27:58","2010-02-14 19:14:48",""
"2262386","Generate sha256 with OpenSSL and C++","I'm looking to create a hash with sha256 using openssl and C++. I know there's a similar post at Generate SHA hash in C++ using OpenSSL library, but I'm looking to specifically create sha256.
UPDATE: 
Seems to be a problem with the include paths. It can't find any OpenSSL functions even though I included 
#include ""openssl/sha.h""

and I included the paths in my build
-I/opt/ssl/include/ -L/opt/ssl/lib/ -lcrypto 

","Using OpenSSL's EVP interface (the following is for OpenSSL 1.1):
#include <iomanip>
#include <iostream>
#include <sstream>
#include <string>
#include <openssl/evp.h>

bool computeHash(const std::string& unhashed, std::string& hashed)
{
    bool success = false;

    EVP_MD_CTX* context = EVP_MD_CTX_new();

    if(context != NULL)
    {
        if(EVP_DigestInit_ex(context, EVP_sha256(), NULL))
        {
            if(EVP_DigestUpdate(context, unhashed.c_str(), unhashed.length()))
            {
                unsigned char hash[EVP_MAX_MD_SIZE];
                unsigned int lengthOfHash = 0;

                if(EVP_DigestFinal_ex(context, hash, &lengthOfHash))
                {
                    std::stringstream ss;
                    for(unsigned int i = 0; i < lengthOfHash; ++i)
                    {
                        ss << std::hex << std::setw(2) << std::setfill('0') << (int)hash[i];
                    }

                    hashed = ss.str();
                    success = true;
                }
            }
        }

        EVP_MD_CTX_free(context);
    }

    return success;
}

int main(int, char**)
{
    std::string pw1 = ""password1"", pw1hashed;
    std::string pw2 = ""password2"", pw2hashed;
    std::string pw3 = ""password3"", pw3hashed;
    std::string pw4 = ""password4"", pw4hashed;

    hashPassword(pw1, pw1hashed);
    hashPassword(pw2, pw2hashed);
    hashPassword(pw3, pw3hashed);
    hashPassword(pw4, pw4hashed);

    std::cout << pw1hashed << std::endl;
    std::cout << pw2hashed << std::endl;
    std::cout << pw3hashed << std::endl;
    std::cout << pw4hashed << std::endl;

    return 0;
}

The advantage of this higher level interface is that you simply need to swap out the EVP_sha256() call with another digest's function, e.g. EVP_sha512(), to use a different digest. So it adds some flexibility.
","105554","<c++><unix><openssl><sha256>","60","13","5","2019-02-25 04:39:42","2458382","6","24","608639","","2018-02-13 17:27:58","2010-02-14 19:14:48",""
"14714877","Mismatch Detected for 'RuntimeLibrary'","I downloaded and extracted Crypto++ in C:\cryptopp. I used Visual Studio Express 2012 to build all the projects inside (as instructed in readme), and everything was built successfully. Then I made a test project in some other folder and added cryptolib as a dependency. After that, I added the include path so I can easily include all the headers. When I tried to compile, I got an error about unresolved symbols.
To remedy that, I added C:\cryptopp\Win32\Output\Debug\cryptlib.lib to link additional dependencies. Now I get this error:
Error   1   error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(cryptlib.obj)    CryptoTest
Error   2   error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(iterhash.obj)    CryptoTest
Error   3   error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(sha.obj) CryptoTest
Error   4   error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(pch.obj) CryptoTest
Error   5   error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(misc.obj)    CryptoTest
Error   6   error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(queue.obj)   CryptoTest
Error   7   error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(algparam.obj)    CryptoTest
Error   8   error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(filters.obj) CryptoTest
Error   9   error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(fips140.obj) CryptoTest
Error   10  error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(cpu.obj) CryptoTest
Error   11  error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(mqueue.obj)  CryptoTest

I also get:
Error   12  error LNK2005: ""public: __thiscall std::_Container_base12::_Container_base12(void)"" (??0_Container_base12@std@@QAE@XZ) already defined in cryptlib.lib(cryptlib.obj)    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\msvcprtd.lib(MSVCP110D.dll)   CryptoTest
Error   13  error LNK2005: ""public: __thiscall std::_Container_base12::~_Container_base12(void)"" (??1_Container_base12@std@@QAE@XZ) already defined in cryptlib.lib(cryptlib.obj)   C:\Data\Work\C++ VS\CryptoTest\CryptoTest\msvcprtd.lib(MSVCP110D.dll)   CryptoTest
Error   14  error LNK2005: ""public: void __thiscall std::_Container_base12::_Orphan_all(void)"" (?_Orphan_all@_Container_base12@std@@QAEXXZ) already defined in cryptlib.lib(cryptlib.obj)   C:\Data\Work\C++ VS\CryptoTest\CryptoTest\msvcprtd.lib(MSVCP110D.dll)   CryptoTest
Error   15  error LNK2005: ""public: __thiscall std::locale::id::id(unsigned int)"" (??0id@locale@std@@QAE@I@Z) already defined in cryptlib.lib(iterhash.obj) C:\Data\Work\C++ VS\CryptoTest\CryptoTest\msvcprtd.lib(MSVCP110D.dll)   CryptoTest
Warning 16  warning LNK4098: defaultlib 'LIBCMTD' conflicts with use of other libs; use /NODEFAULTLIB:library   C:\Data\Work\C++ VS\CryptoTest\CryptoTest\LINK  CryptoTest
Error   17  error LNK1169: one or more multiply defined symbols found   C:\Data\Work\C++ VS\CryptoTest\Debug\CryptoTest.exe 1   1   CryptoTest

The code I tried to compile was simple (I got this from another site):
#include <iostream>
#include <string>
#include ""sha.h""
#include ""hex.h""
using namespace std;

string SHA256(string data) {
    byte const* pbData = (byte*) data.data();
    unsigned int nDataLen = data.size();
    byte abDigest[32];

    CryptoPP::SHA256().CalculateDigest(abDigest, pbData, nDataLen);

    return string((char*)abDigest);
}

int main(void) {

    return 0;
}

Any ideas how to fix this? I really only need SHA-256 right now, nothing else.
I am using Windows 7 64 bit, and I downloaded VS C++ today, so it should be the newest version.
","(This is already answered in comments, but since it lacks an actual answer, I'm writing this.)
This problem arises in newer versions of Visual C++ (the older versions usually just silently linked the program and it would crash and burn at run time.) It means that some of the libraries you are linking with your program (or even some of the source files inside your program itself) are using different versions of the CRT (the C RunTime library.)
To correct this error, you need to go into your Project Properties (and/or those of the libraries you are using,) then into C/C++, then Code Generation, and check the value of Runtime Library; this should be exactly the same for all the files and libraries you are linking together. (The rules are a little more relaxed for linking with DLLs, but I'm not going to go into the ""why"" and into more details here.)
There are currently four options for this setting:

Multithreaded Debug
Multithreaded Debug DLL
Multithreaded Release
Multithreaded Release DLL

Your particular problem seems to stem from you linking a library built with ""Multithreaded Debug"" (i.e. static multithreaded debug CRT) against a program that is being built using the ""Multithreaded Debug DLL"" setting (i.e. dynamic multithreaded debug CRT.) You should change this setting either in the library, or in your program. For now, I suggest changing this in your program.
Note that since Visual Studio projects use different sets of project settings for debug and release builds (and 32/64-bit builds) you should make sure the settings match in all of these project configurations.
For (some) more information, you can see these (linked from a comment above):

Linker Tools Warning LNK4098 on MSDN
/MD, /ML, /MT, /LD (Use Run-Time Library) on MSDN
Build errors with VC11 Beta - mixing MTd libs with MDd exes fail to link on Bugzilla@Mozilla

UPDATE: (This is in response to a comment that asks for the reason that this much care must be taken.)
If two pieces of code that we are linking together are themselves linking against and using the standard library, then the standard library must be the same for both of them, unless great care is taken about how our two code pieces interact and pass around data. Generally, I would say that for almost all situations just use the exact same version of the standard library runtime (regarding debug/release, threads, and obviously the version of Visual C++, among other things like iterator debugging, etc.)
The most important part of the problem is this: having the same idea about the size of objects on either side of a function call.
Consider for example that the above two pieces of code are called A and B. A is compiled against one version of the standard library, and B against another. In A's view, some random object that a standard function returns to it (e.g. a block of memory or an iterator or a FILE object or whatever) has some specific size and layout (remember that structure layout is determined and fixed at compile time in C/C++.) For any of several reasons, B's idea of the size/layout of the same objects is different (it can be because of additional debug information, natural evolution of data structures over time, etc.)
Now, if A calls the standard library and gets an object back, then passes that object to B, and B touches that object in any way, chances are that B will mess that object up (e.g. write the wrong field, or past the end of it, etc.)
The above isn't the only kind of problems that can happen. Internal global or static objects in the standard library can cause problems too. And there are more obscure classes of problems as well.
All this gets weirder in some aspects when using DLLs (dynamic runtime library) instead of libs (static runtime library.)
This situation can apply to any library used by two pieces of code that work together, but the standard library gets used by most (if not almost all) programs, and that increases the chances of clash.
What I've described is obviously a watered down and simplified version of the actual mess that awaits you if you mix library versions. I hope that it gives you an idea of why you shouldn't do it!
","102325","<c++><hash><compilation><sha256><crypto++>","104","218","4","2019-06-20 09:30:50","18635749","3","32","608639","","2015-10-24 01:58:21","2013-02-05 19:00:39",""
"14714877","Mismatch Detected for 'RuntimeLibrary'","I downloaded and extracted Crypto++ in C:\cryptopp. I used Visual Studio Express 2012 to build all the projects inside (as instructed in readme), and everything was built successfully. Then I made a test project in some other folder and added cryptolib as a dependency. After that, I added the include path so I can easily include all the headers. When I tried to compile, I got an error about unresolved symbols.
To remedy that, I added C:\cryptopp\Win32\Output\Debug\cryptlib.lib to link additional dependencies. Now I get this error:
Error   1   error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(cryptlib.obj)    CryptoTest
Error   2   error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(iterhash.obj)    CryptoTest
Error   3   error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(sha.obj) CryptoTest
Error   4   error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(pch.obj) CryptoTest
Error   5   error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(misc.obj)    CryptoTest
Error   6   error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(queue.obj)   CryptoTest
Error   7   error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(algparam.obj)    CryptoTest
Error   8   error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(filters.obj) CryptoTest
Error   9   error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(fips140.obj) CryptoTest
Error   10  error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(cpu.obj) CryptoTest
Error   11  error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(mqueue.obj)  CryptoTest

I also get:
Error   12  error LNK2005: ""public: __thiscall std::_Container_base12::_Container_base12(void)"" (??0_Container_base12@std@@QAE@XZ) already defined in cryptlib.lib(cryptlib.obj)    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\msvcprtd.lib(MSVCP110D.dll)   CryptoTest
Error   13  error LNK2005: ""public: __thiscall std::_Container_base12::~_Container_base12(void)"" (??1_Container_base12@std@@QAE@XZ) already defined in cryptlib.lib(cryptlib.obj)   C:\Data\Work\C++ VS\CryptoTest\CryptoTest\msvcprtd.lib(MSVCP110D.dll)   CryptoTest
Error   14  error LNK2005: ""public: void __thiscall std::_Container_base12::_Orphan_all(void)"" (?_Orphan_all@_Container_base12@std@@QAEXXZ) already defined in cryptlib.lib(cryptlib.obj)   C:\Data\Work\C++ VS\CryptoTest\CryptoTest\msvcprtd.lib(MSVCP110D.dll)   CryptoTest
Error   15  error LNK2005: ""public: __thiscall std::locale::id::id(unsigned int)"" (??0id@locale@std@@QAE@I@Z) already defined in cryptlib.lib(iterhash.obj) C:\Data\Work\C++ VS\CryptoTest\CryptoTest\msvcprtd.lib(MSVCP110D.dll)   CryptoTest
Warning 16  warning LNK4098: defaultlib 'LIBCMTD' conflicts with use of other libs; use /NODEFAULTLIB:library   C:\Data\Work\C++ VS\CryptoTest\CryptoTest\LINK  CryptoTest
Error   17  error LNK1169: one or more multiply defined symbols found   C:\Data\Work\C++ VS\CryptoTest\Debug\CryptoTest.exe 1   1   CryptoTest

The code I tried to compile was simple (I got this from another site):
#include <iostream>
#include <string>
#include ""sha.h""
#include ""hex.h""
using namespace std;

string SHA256(string data) {
    byte const* pbData = (byte*) data.data();
    unsigned int nDataLen = data.size();
    byte abDigest[32];

    CryptoPP::SHA256().CalculateDigest(abDigest, pbData, nDataLen);

    return string((char*)abDigest);
}

int main(void) {

    return 0;
}

Any ideas how to fix this? I really only need SHA-256 right now, nothing else.
I am using Windows 7 64 bit, and I downloaded VS C++ today, so it should be the newest version.
","
I downloaded and extracted Crypto++ in C:\cryptopp. I used Visual Studio Express 2012 to build all the projects inside (as instructed in readme), and everything was built successfully. Then I made a test project in some other folder and added cryptolib as a dependency.

The conversion was probably not successful. The only thing that was successful was the running of VCUpgrade. The actual conversion itself failed but you don't know until you experience the errors you are seeing. For some of the details, see Visual Studio on the Crypto++ wiki.


Any ideas how to fix this?

To resolve your issues, you should download vs2010.zip if you want static C/C++ runtime linking (/MT or /MTd), or vs2010-dynamic.zip if you want dynamic C/C++ runtime linking (/MT or /MTd). Both fix the latent, silent failures produced by VCUpgrade.

vs2010.zip, vs2010-dynamic.zip and vs2005-dynamic.zip are built from the latest GitHub sources. As of this writing (JUN 1 2016), that's effectively pre-Crypto++ 5.6.4. If you are using the ZIP files with a down level Crypto++, like 5.6.2 or 5.6.3, then you will run into minor problems.
There are two minor problems I am aware. First is a rename of bench.cpp to bench1.cpp. Its error is either:

C1083: Cannot open source file: 'bench1.cpp': No such file or directory
LNK2001: unresolved external symbol ""void __cdecl OutputResultOperations(char const *,char const *,bool,unsigned long,double)"" (?OutputResultOperations@@YAXPBD0_NKN@Z)

The fix is to either (1) open cryptest.vcxproj in notepad, find bench1.cpp, and then rename it to bench.cpp. Or (2) rename bench.cpp to bench1.cpp on the filesystem. Please don't delete this file.
The second problem is a little trickier because its a moving target. Down level releases, like 5.6.2 or 5.6.3, are missing the latest classes available in GitHub. The missing class files include HKDF (5.6.3), RDRAND (5.6.3), RDSEED (5.6.3), ChaCha (5.6.4), BLAKE2 (5.6.4), Poly1305 (5.6.4), etc.
The fix is to remove the missing source files from the Visual Studio project files since they don't exist for the down level releases.
Another option is to add the missing class files from the latest sources, but there could be complications. For example, many of the sources subtly depend upon the latest config.h, cpu.h and cpu.cpp. The ""subtlety"" is you won't realize you are getting an under-performing class.
An example of under-performing class is BLAKE2. config.h adds compile time ARM-32 and ARM-64 detection. cpu.h and cpu.cpp adds runtime ARM instruction detection, which depends upon compile time detection. If you add BLAKE2 without the other files, then none of the detection occurs and you get a straight C/C++ implementation. You probably won't realize you are missing the NEON opportunity, which runs around 9 to 12 cycles-per-byte versus 40 cycles-per-byte or so for vanilla C/C++.
","102325","<c++><hash><compilation><sha256><crypto++>","104","3","4","2019-06-20 09:30:50","18635749","3","32","608639","","2015-10-24 01:58:21","2013-02-05 19:00:39",""
"14714877","Mismatch Detected for 'RuntimeLibrary'","I downloaded and extracted Crypto++ in C:\cryptopp. I used Visual Studio Express 2012 to build all the projects inside (as instructed in readme), and everything was built successfully. Then I made a test project in some other folder and added cryptolib as a dependency. After that, I added the include path so I can easily include all the headers. When I tried to compile, I got an error about unresolved symbols.
To remedy that, I added C:\cryptopp\Win32\Output\Debug\cryptlib.lib to link additional dependencies. Now I get this error:
Error   1   error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(cryptlib.obj)    CryptoTest
Error   2   error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(iterhash.obj)    CryptoTest
Error   3   error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(sha.obj) CryptoTest
Error   4   error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(pch.obj) CryptoTest
Error   5   error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(misc.obj)    CryptoTest
Error   6   error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(queue.obj)   CryptoTest
Error   7   error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(algparam.obj)    CryptoTest
Error   8   error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(filters.obj) CryptoTest
Error   9   error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(fips140.obj) CryptoTest
Error   10  error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(cpu.obj) CryptoTest
Error   11  error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(mqueue.obj)  CryptoTest

I also get:
Error   12  error LNK2005: ""public: __thiscall std::_Container_base12::_Container_base12(void)"" (??0_Container_base12@std@@QAE@XZ) already defined in cryptlib.lib(cryptlib.obj)    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\msvcprtd.lib(MSVCP110D.dll)   CryptoTest
Error   13  error LNK2005: ""public: __thiscall std::_Container_base12::~_Container_base12(void)"" (??1_Container_base12@std@@QAE@XZ) already defined in cryptlib.lib(cryptlib.obj)   C:\Data\Work\C++ VS\CryptoTest\CryptoTest\msvcprtd.lib(MSVCP110D.dll)   CryptoTest
Error   14  error LNK2005: ""public: void __thiscall std::_Container_base12::_Orphan_all(void)"" (?_Orphan_all@_Container_base12@std@@QAEXXZ) already defined in cryptlib.lib(cryptlib.obj)   C:\Data\Work\C++ VS\CryptoTest\CryptoTest\msvcprtd.lib(MSVCP110D.dll)   CryptoTest
Error   15  error LNK2005: ""public: __thiscall std::locale::id::id(unsigned int)"" (??0id@locale@std@@QAE@I@Z) already defined in cryptlib.lib(iterhash.obj) C:\Data\Work\C++ VS\CryptoTest\CryptoTest\msvcprtd.lib(MSVCP110D.dll)   CryptoTest
Warning 16  warning LNK4098: defaultlib 'LIBCMTD' conflicts with use of other libs; use /NODEFAULTLIB:library   C:\Data\Work\C++ VS\CryptoTest\CryptoTest\LINK  CryptoTest
Error   17  error LNK1169: one or more multiply defined symbols found   C:\Data\Work\C++ VS\CryptoTest\Debug\CryptoTest.exe 1   1   CryptoTest

The code I tried to compile was simple (I got this from another site):
#include <iostream>
#include <string>
#include ""sha.h""
#include ""hex.h""
using namespace std;

string SHA256(string data) {
    byte const* pbData = (byte*) data.data();
    unsigned int nDataLen = data.size();
    byte abDigest[32];

    CryptoPP::SHA256().CalculateDigest(abDigest, pbData, nDataLen);

    return string((char*)abDigest);
}

int main(void) {

    return 0;
}

Any ideas how to fix this? I really only need SHA-256 right now, nothing else.
I am using Windows 7 64 bit, and I downloaded VS C++ today, so it should be the newest version.
","I had this problem along with mismatch in ITERATOR_DEBUG_LEVEL.
As a sunday-evening problem after all seemed ok and good to go, I was put out for some time.
Working in de VS2017 IDE (Solution Explorer) I had recently added/copied a sourcefile reference to my project (ctrl-drag) from another project. Looking into properties->C/C++/Preprocessor - at source file level, not project level - I noticed that in a Release configuration _DEBUG was specified instead of NDEBUG for this source file.
Which was all the change needed to get rid of the problem.
","102325","<c++><hash><compilation><sha256><crypto++>","104","3","4","2019-06-20 09:30:50","18635749","3","32","608639","","2015-10-24 01:58:21","2013-02-05 19:00:39",""
"14714877","Mismatch Detected for 'RuntimeLibrary'","I downloaded and extracted Crypto++ in C:\cryptopp. I used Visual Studio Express 2012 to build all the projects inside (as instructed in readme), and everything was built successfully. Then I made a test project in some other folder and added cryptolib as a dependency. After that, I added the include path so I can easily include all the headers. When I tried to compile, I got an error about unresolved symbols.
To remedy that, I added C:\cryptopp\Win32\Output\Debug\cryptlib.lib to link additional dependencies. Now I get this error:
Error   1   error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(cryptlib.obj)    CryptoTest
Error   2   error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(iterhash.obj)    CryptoTest
Error   3   error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(sha.obj) CryptoTest
Error   4   error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(pch.obj) CryptoTest
Error   5   error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(misc.obj)    CryptoTest
Error   6   error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(queue.obj)   CryptoTest
Error   7   error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(algparam.obj)    CryptoTest
Error   8   error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(filters.obj) CryptoTest
Error   9   error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(fips140.obj) CryptoTest
Error   10  error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(cpu.obj) CryptoTest
Error   11  error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in program.obj    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\cryptlib.lib(mqueue.obj)  CryptoTest

I also get:
Error   12  error LNK2005: ""public: __thiscall std::_Container_base12::_Container_base12(void)"" (??0_Container_base12@std@@QAE@XZ) already defined in cryptlib.lib(cryptlib.obj)    C:\Data\Work\C++ VS\CryptoTest\CryptoTest\msvcprtd.lib(MSVCP110D.dll)   CryptoTest
Error   13  error LNK2005: ""public: __thiscall std::_Container_base12::~_Container_base12(void)"" (??1_Container_base12@std@@QAE@XZ) already defined in cryptlib.lib(cryptlib.obj)   C:\Data\Work\C++ VS\CryptoTest\CryptoTest\msvcprtd.lib(MSVCP110D.dll)   CryptoTest
Error   14  error LNK2005: ""public: void __thiscall std::_Container_base12::_Orphan_all(void)"" (?_Orphan_all@_Container_base12@std@@QAEXXZ) already defined in cryptlib.lib(cryptlib.obj)   C:\Data\Work\C++ VS\CryptoTest\CryptoTest\msvcprtd.lib(MSVCP110D.dll)   CryptoTest
Error   15  error LNK2005: ""public: __thiscall std::locale::id::id(unsigned int)"" (??0id@locale@std@@QAE@I@Z) already defined in cryptlib.lib(iterhash.obj) C:\Data\Work\C++ VS\CryptoTest\CryptoTest\msvcprtd.lib(MSVCP110D.dll)   CryptoTest
Warning 16  warning LNK4098: defaultlib 'LIBCMTD' conflicts with use of other libs; use /NODEFAULTLIB:library   C:\Data\Work\C++ VS\CryptoTest\CryptoTest\LINK  CryptoTest
Error   17  error LNK1169: one or more multiply defined symbols found   C:\Data\Work\C++ VS\CryptoTest\Debug\CryptoTest.exe 1   1   CryptoTest

The code I tried to compile was simple (I got this from another site):
#include <iostream>
#include <string>
#include ""sha.h""
#include ""hex.h""
using namespace std;

string SHA256(string data) {
    byte const* pbData = (byte*) data.data();
    unsigned int nDataLen = data.size();
    byte abDigest[32];

    CryptoPP::SHA256().CalculateDigest(abDigest, pbData, nDataLen);

    return string((char*)abDigest);
}

int main(void) {

    return 0;
}

Any ideas how to fix this? I really only need SHA-256 right now, nothing else.
I am using Windows 7 64 bit, and I downloaded VS C++ today, so it should be the newest version.
","Issue can be solved by adding CRT of msvcrtd.lib in the linker library.
Because cryptlib.lib used CRT version of debug.
","102325","<c++><hash><compilation><sha256><crypto++>","104","0","4","2019-06-20 09:30:50","18635749","3","32","608639","","2015-10-24 01:58:21","2013-02-05 19:00:39",""
"20764031","PHP salt and hash SHA256 for login password","I've made encrypting of the password in my register script and they are stored in the database, and I have to use them to login, so I would want to use the unencrypted ones to login. I've read some of the threads in here but nothing is helping me. How can I add it in my login.php? The salt is also stored in the database.
This is my register.php script for encrypting
$hash = hash('sha256', $password1);

function createSalt()
{
    $text = md5(uniqid(rand(), TRUE));
    return substr($text, 0, 3);
}

$salt = createSalt();
$password = hash('sha256', $salt . $hash);

and this is my login.php with season
//Create query
$qry=""SELECT * FROM member WHERE username='$username' AND password='$password'"";
$result=mysql_query($qry);

//Check whether the query was successful or not
if($result) {
    if(mysql_num_rows($result) > 0) {
        //Login Successful
        session_regenerate_id();
        $member = mysql_fetch_assoc($result);
        $_SESSION['SESS_MEMBER_ID'] = $member['id'];
        $_SESSION['SESS_FIRST_NAME'] = $member['username'];
        $_SESSION['SESS_LAST_NAME'] = $member['password'];
        session_write_close();
        header(""location: profile.php"");
        exit();
    }
    else {
        //Login failed
        //error message 
    }
else {
    die(""Query failed"");
}

","You can't do that because you can not know the salt at a precise time. Below, a code who works in theory (not tested for the syntaxe)
<?php
$password1 = $_POST['password'];
$salt      = 'hello_1m_@_SaLT';
$hashed    = hash('sha256', $password1 . $salt);
?>

When you insert :
$qry=""INSERT INTO member VALUES('$username', '$hashed')"";

And for retrieving user : 
$qry=""SELECT * FROM member WHERE username='$username' AND password='$hashed'"";

","100899","<php><mysql><hash><salt><sha256>","22","-2","6","2019-08-08 19:11:39","20764228","14","11","3127992","","2017-04-15 19:06:02","2013-12-24 16:34:37",""
"20764031","PHP salt and hash SHA256 for login password","I've made encrypting of the password in my register script and they are stored in the database, and I have to use them to login, so I would want to use the unencrypted ones to login. I've read some of the threads in here but nothing is helping me. How can I add it in my login.php? The salt is also stored in the database.
This is my register.php script for encrypting
$hash = hash('sha256', $password1);

function createSalt()
{
    $text = md5(uniqid(rand(), TRUE));
    return substr($text, 0, 3);
}

$salt = createSalt();
$password = hash('sha256', $salt . $hash);

and this is my login.php with season
//Create query
$qry=""SELECT * FROM member WHERE username='$username' AND password='$password'"";
$result=mysql_query($qry);

//Check whether the query was successful or not
if($result) {
    if(mysql_num_rows($result) > 0) {
        //Login Successful
        session_regenerate_id();
        $member = mysql_fetch_assoc($result);
        $_SESSION['SESS_MEMBER_ID'] = $member['id'];
        $_SESSION['SESS_FIRST_NAME'] = $member['username'];
        $_SESSION['SESS_LAST_NAME'] = $member['password'];
        session_write_close();
        header(""location: profile.php"");
        exit();
    }
    else {
        //Login failed
        //error message 
    }
else {
    die(""Query failed"");
}

","These examples are from php.net. Thanks to you, I also just learned about the new php hashing functions.
Read the php documentation to find out about the possibilities and best practices:
http://www.php.net/manual/en/function.password-hash.php
Save a password hash:
$options = [
    'cost' => 11,
];
// Get the password from post
$passwordFromPost = $_POST['password'];

$hash = password_hash($passwordFromPost, PASSWORD_BCRYPT, $options);

// Now insert it (with login or whatever) into your database, use mysqli or pdo!

Get the password hash:
// Get the password from the database and compare it to a variable (for example post)
$passwordFromPost = $_POST['password'];
$hashedPasswordFromDB = ...;

if (password_verify($passwordFromPost, $hashedPasswordFromDB)) {
    echo 'Password is valid!';
} else {
    echo 'Invalid password.';
}

","100899","<php><mysql><hash><salt><sha256>","22","42","6","2019-08-08 19:11:39","20764228","14","11","3127992","","2017-04-15 19:06:02","2013-12-24 16:34:37",""
"20764031","PHP salt and hash SHA256 for login password","I've made encrypting of the password in my register script and they are stored in the database, and I have to use them to login, so I would want to use the unencrypted ones to login. I've read some of the threads in here but nothing is helping me. How can I add it in my login.php? The salt is also stored in the database.
This is my register.php script for encrypting
$hash = hash('sha256', $password1);

function createSalt()
{
    $text = md5(uniqid(rand(), TRUE));
    return substr($text, 0, 3);
}

$salt = createSalt();
$password = hash('sha256', $salt . $hash);

and this is my login.php with season
//Create query
$qry=""SELECT * FROM member WHERE username='$username' AND password='$password'"";
$result=mysql_query($qry);

//Check whether the query was successful or not
if($result) {
    if(mysql_num_rows($result) > 0) {
        //Login Successful
        session_regenerate_id();
        $member = mysql_fetch_assoc($result);
        $_SESSION['SESS_MEMBER_ID'] = $member['id'];
        $_SESSION['SESS_FIRST_NAME'] = $member['username'];
        $_SESSION['SESS_LAST_NAME'] = $member['password'];
        session_write_close();
        header(""location: profile.php"");
        exit();
    }
    else {
        //Login failed
        //error message 
    }
else {
    die(""Query failed"");
}

","You couldn't login because you did't get proper solt text at login time.
There are two options, first is define static salt, second is if you want create dynamic salt than you have to store the salt somewhere (means in database) with associate with user.
Than you concatenate  user solt+password_hash string now with this you fire query with username in your database table.
","100899","<php><mysql><hash><salt><sha256>","22","0","6","2019-08-08 19:11:39","20764228","14","11","3127992","","2017-04-15 19:06:02","2013-12-24 16:34:37",""
"20764031","PHP salt and hash SHA256 for login password","I've made encrypting of the password in my register script and they are stored in the database, and I have to use them to login, so I would want to use the unencrypted ones to login. I've read some of the threads in here but nothing is helping me. How can I add it in my login.php? The salt is also stored in the database.
This is my register.php script for encrypting
$hash = hash('sha256', $password1);

function createSalt()
{
    $text = md5(uniqid(rand(), TRUE));
    return substr($text, 0, 3);
}

$salt = createSalt();
$password = hash('sha256', $salt . $hash);

and this is my login.php with season
//Create query
$qry=""SELECT * FROM member WHERE username='$username' AND password='$password'"";
$result=mysql_query($qry);

//Check whether the query was successful or not
if($result) {
    if(mysql_num_rows($result) > 0) {
        //Login Successful
        session_regenerate_id();
        $member = mysql_fetch_assoc($result);
        $_SESSION['SESS_MEMBER_ID'] = $member['id'];
        $_SESSION['SESS_FIRST_NAME'] = $member['username'];
        $_SESSION['SESS_LAST_NAME'] = $member['password'];
        session_write_close();
        header(""location: profile.php"");
        exit();
    }
    else {
        //Login failed
        //error message 
    }
else {
    die(""Query failed"");
}

","array hash_algos(void)

echo hash('sha384', 'Message to be hashed'.'salt');

Here is a link to reference http://php.net/manual/en/function.hash.php
","100899","<php><mysql><hash><salt><sha256>","22","1","6","2019-08-08 19:11:39","20764228","14","11","3127992","","2017-04-15 19:06:02","2013-12-24 16:34:37",""
"20764031","PHP salt and hash SHA256 for login password","I've made encrypting of the password in my register script and they are stored in the database, and I have to use them to login, so I would want to use the unencrypted ones to login. I've read some of the threads in here but nothing is helping me. How can I add it in my login.php? The salt is also stored in the database.
This is my register.php script for encrypting
$hash = hash('sha256', $password1);

function createSalt()
{
    $text = md5(uniqid(rand(), TRUE));
    return substr($text, 0, 3);
}

$salt = createSalt();
$password = hash('sha256', $salt . $hash);

and this is my login.php with season
//Create query
$qry=""SELECT * FROM member WHERE username='$username' AND password='$password'"";
$result=mysql_query($qry);

//Check whether the query was successful or not
if($result) {
    if(mysql_num_rows($result) > 0) {
        //Login Successful
        session_regenerate_id();
        $member = mysql_fetch_assoc($result);
        $_SESSION['SESS_MEMBER_ID'] = $member['id'];
        $_SESSION['SESS_FIRST_NAME'] = $member['username'];
        $_SESSION['SESS_LAST_NAME'] = $member['password'];
        session_write_close();
        header(""location: profile.php"");
        exit();
    }
    else {
        //Login failed
        //error message 
    }
else {
    die(""Query failed"");
}

","According to php.net the Salt option has been deprecated as of PHP 7.0.0, so you should use the salt that is generated by default and is far more simpler
Example for store the password:
$hashPassword = password_hash(""password"", PASSWORD_BCRYPT);
Example to verify the password:
$passwordCorrect = password_verify(""password"", $hashPassword);
","100899","<php><mysql><hash><salt><sha256>","22","3","6","2019-08-08 19:11:39","20764228","14","11","3127992","","2017-04-15 19:06:02","2013-12-24 16:34:37",""
"20764031","PHP salt and hash SHA256 for login password","I've made encrypting of the password in my register script and they are stored in the database, and I have to use them to login, so I would want to use the unencrypted ones to login. I've read some of the threads in here but nothing is helping me. How can I add it in my login.php? The salt is also stored in the database.
This is my register.php script for encrypting
$hash = hash('sha256', $password1);

function createSalt()
{
    $text = md5(uniqid(rand(), TRUE));
    return substr($text, 0, 3);
}

$salt = createSalt();
$password = hash('sha256', $salt . $hash);

and this is my login.php with season
//Create query
$qry=""SELECT * FROM member WHERE username='$username' AND password='$password'"";
$result=mysql_query($qry);

//Check whether the query was successful or not
if($result) {
    if(mysql_num_rows($result) > 0) {
        //Login Successful
        session_regenerate_id();
        $member = mysql_fetch_assoc($result);
        $_SESSION['SESS_MEMBER_ID'] = $member['id'];
        $_SESSION['SESS_FIRST_NAME'] = $member['username'];
        $_SESSION['SESS_LAST_NAME'] = $member['password'];
        session_write_close();
        header(""location: profile.php"");
        exit();
    }
    else {
        //Login failed
        //error message 
    }
else {
    die(""Query failed"");
}

","I think @Flo254 chained $salt to $password1and stored them to $hashed variable. $hashed variable goes inside INSERT query with $salt.
","100899","<php><mysql><hash><salt><sha256>","22","0","6","2019-08-08 19:11:39","20764228","14","11","3127992","","2017-04-15 19:06:02","2013-12-24 16:34:37",""
"14139727","SHA-256 or MD5 for file integrity","I know that SHA-256 is favored over MD5 for security, etc., but, if I am to use a method to only check file integrity (that is, nothing to do with password encryption, etc.), is there any advantage of using SHA-256?
Since MD5 is 128-bit and SHA-256 is 256-bit (therefore twice as big)...

Would it take up to twice as long to encrypt?
Where time is not of essence, like in a backup program, and file integrity is all that is needed, would anyone argue against MD5 for a different algorithm, or even suggest a different technique?
Does using MD5 produce a checksum?

","To 1):
Yes, on most CPUs, SHA-256 is about only 40% as fast as MD5.
To 2):
I would argue for a different algorithms than MD5 in such a case. I would definitely prefer an algorithm that is considered safe. However, this is more a feeling. Cases where this matters would be rather constructed than realistic, e.g. if your backup system encounters an example case of an attack on an MD5-based certificate, you are likely to have two files in such an example with different data, but identical MD5 checksums. For the rest of the cases, it doesn't matter, because MD5 checksums have a collision (= same checksums for different data) virtually only when provoked intentionally.
I'm not an expert on the various hashing (checksum generating) algorithms, so I can not suggest another algorithm. Hence this part of the question is still open.
Suggested further reading is Cryptographic Hash Function - File or Data Identifier on Wikipedia. Also further down on that page there is a list of cryptographic hash algorithms.
To 3):
MD5 is an algorithm to calculate checksums. A checksum calculated using this algorithm is then called an MD5 checksum.
","97425","<file><hash><md5><sha256>","56","15","7","2018-06-06 09:00:32","14139849","8","13","3258851","","2016-05-10 01:28:04","2013-01-03 13:19:08",""
"14139727","SHA-256 or MD5 for file integrity","I know that SHA-256 is favored over MD5 for security, etc., but, if I am to use a method to only check file integrity (that is, nothing to do with password encryption, etc.), is there any advantage of using SHA-256?
Since MD5 is 128-bit and SHA-256 is 256-bit (therefore twice as big)...

Would it take up to twice as long to encrypt?
Where time is not of essence, like in a backup program, and file integrity is all that is needed, would anyone argue against MD5 for a different algorithm, or even suggest a different technique?
Does using MD5 produce a checksum?

","Both SHA256 and MDA5 are hashing algorithms. They take your input data, in this case your file, and output a 256/128-bit number. This number is a checksum. There is no encryption taking place because an infinite number of inputs can result in the same hash value, although in reality collisions are rare.
SHA256 takes somewhat more time to calculate than MD5, according to this answer. 
Offhand, I'd say that MD5 would be probably be suitable for what you need.
","97425","<file><hash><md5><sha256>","56","61","7","2018-06-06 09:00:32","14139849","8","13","3258851","","2016-05-10 01:28:04","2013-01-03 13:19:08",""
"14139727","SHA-256 or MD5 for file integrity","I know that SHA-256 is favored over MD5 for security, etc., but, if I am to use a method to only check file integrity (that is, nothing to do with password encryption, etc.), is there any advantage of using SHA-256?
Since MD5 is 128-bit and SHA-256 is 256-bit (therefore twice as big)...

Would it take up to twice as long to encrypt?
Where time is not of essence, like in a backup program, and file integrity is all that is needed, would anyone argue against MD5 for a different algorithm, or even suggest a different technique?
Does using MD5 produce a checksum?

","
No, it's less fast but not that slow
For a backup program it's maybe necessary to have something even faster than MD5

All in all, I'd say that MD5 in addition to the file name is absolutely safe. SHA-256 would just be slower and harder to handle because of its size.
You could also use something less secure than MD5 without any problem. If nobody tries to hack your file integrity this is safe, too.
","97425","<file><hash><md5><sha256>","56","8","7","2018-06-06 09:00:32","14139849","8","13","3258851","","2016-05-10 01:28:04","2013-01-03 13:19:08",""
"14139727","SHA-256 or MD5 for file integrity","I know that SHA-256 is favored over MD5 for security, etc., but, if I am to use a method to only check file integrity (that is, nothing to do with password encryption, etc.), is there any advantage of using SHA-256?
Since MD5 is 128-bit and SHA-256 is 256-bit (therefore twice as big)...

Would it take up to twice as long to encrypt?
Where time is not of essence, like in a backup program, and file integrity is all that is needed, would anyone argue against MD5 for a different algorithm, or even suggest a different technique?
Does using MD5 produce a checksum?

","It is technically approved that MD5 is faster than SHA256 so in just verifying file integrity it will be sufficient and better for performance.
You are able to checkout the following resources:

Speed Comparison of Popular Crypto Algorithms
Comparison of cryptographic hash functions

","97425","<file><hash><md5><sha256>","56","4","7","2018-06-06 09:00:32","14139849","8","13","3258851","","2016-05-10 01:28:04","2013-01-03 13:19:08",""
"14139727","SHA-256 or MD5 for file integrity","I know that SHA-256 is favored over MD5 for security, etc., but, if I am to use a method to only check file integrity (that is, nothing to do with password encryption, etc.), is there any advantage of using SHA-256?
Since MD5 is 128-bit and SHA-256 is 256-bit (therefore twice as big)...

Would it take up to twice as long to encrypt?
Where time is not of essence, like in a backup program, and file integrity is all that is needed, would anyone argue against MD5 for a different algorithm, or even suggest a different technique?
Does using MD5 produce a checksum?

","The underlying MD5 algorithm is no longer deemed secure, thus while md5sum is well-suited for identifying known files in situations that are not security related, it should not be relied on if there is a chance that files have been purposefully and maliciously tampered. In the latter case, the use of a newer hashing tool such as sha256sum is highly recommended.
So, if you are simply looking to check for file corruption or file differences, when the source of the file is trusted, MD5 should be sufficient.  If you are looking to verify the integrity of a file coming from an untrusted source, or over from a trusted source over an unencrypted connection, MD5 is not sufficient.
Another commenter noted that Ubuntu and others use MD5 checksums.  Ubuntu has moved to PGP and SHA256, in addition to MD5, but the documentation of the stronger verification strategies are more difficult to find.  See the HowToSHA256SUM page for more details.
","97425","<file><hash><md5><sha256>","56","7","7","2018-06-06 09:00:32","14139849","8","13","3258851","","2016-05-10 01:28:04","2013-01-03 13:19:08",""
"14139727","SHA-256 or MD5 for file integrity","I know that SHA-256 is favored over MD5 for security, etc., but, if I am to use a method to only check file integrity (that is, nothing to do with password encryption, etc.), is there any advantage of using SHA-256?
Since MD5 is 128-bit and SHA-256 is 256-bit (therefore twice as big)...

Would it take up to twice as long to encrypt?
Where time is not of essence, like in a backup program, and file integrity is all that is needed, would anyone argue against MD5 for a different algorithm, or even suggest a different technique?
Does using MD5 produce a checksum?

","Every answer seems to suggest that you need to use secure hashes to do the job but all of these are tuned to be slow to force a bruteforce attacker to have lots of computing power and depending on your needs this may not be the best solution.
There are algorithms specifically designed to hash files as fast as possible to check integrity and comparison (murmur, XXhash...). Obviously these are not designed for security as they don't meet the requirements of a secure hash algorithm (i.e. randomness) but have low collision rates for large messages. This features make them ideal if you are not looking for security but speed.
Examples of this algorithms and comparison can be found in this excellent answer: Which hashing algorithm is best for uniqueness and speed?.
As an example, we at our Q&A site use murmur3 to hash the images uploaded by the users so we only store them once even if users upload the same image in several answers.
","97425","<file><hash><md5><sha256>","56","11","7","2018-06-06 09:00:32","14139849","8","13","3258851","","2016-05-10 01:28:04","2013-01-03 13:19:08",""
"14139727","SHA-256 or MD5 for file integrity","I know that SHA-256 is favored over MD5 for security, etc., but, if I am to use a method to only check file integrity (that is, nothing to do with password encryption, etc.), is there any advantage of using SHA-256?
Since MD5 is 128-bit and SHA-256 is 256-bit (therefore twice as big)...

Would it take up to twice as long to encrypt?
Where time is not of essence, like in a backup program, and file integrity is all that is needed, would anyone argue against MD5 for a different algorithm, or even suggest a different technique?
Does using MD5 produce a checksum?

","
Yes, on most CPUs, SHA-256 is two to three times slower than MD5, though not primarily because of its longer hash. See other answers here and the answers to this Stack Overflow questions.
Here's a backup scenario where MD5 would not be appropriate:


Your backup program hashes each file being backed up. It then stores
each file's data by its hash, so if you're backing up the same file
twice you only end up with one copy of it.
An attacker can cause the system to backup files they control.
The attacker knows the MD5 hash of a file they want to remove from the
backup.
The attacker can then use the known weaknesses of MD5 to craft a new
file that has the same hash as the file to remove. When that file is
backed up, it will replace the file to remove, and that file's backed up
data will be lost.
This backup system could be strengthened a bit (and made more efficient)
by not replacing files whose hash it has previously encountered, but
then an attacker could prevent a target file with a known hash from
being backed up by preemptively backing up a specially constructed bogus
file with the same hash.
Obviously most systems, backup and otherwise, do not satisfy the
conditions necessary for this attack to be practical, but I just wanted
to give an example of a situation where SHA-256 would be preferable to
MD5. Whether this would be the case for the system you're creating
depends on more than just the characteristics of MD5 and SHA-256.

Yes, cryptographic hashes like the ones generated by MD5 and SHA-256 are a type of checksum.

Happy hashing!
","97425","<file><hash><md5><sha256>","56","0","7","2018-06-06 09:00:32","14139849","8","13","3258851","","2016-05-10 01:28:04","2013-01-03 13:19:08",""
"4329909","Hashing passwords with MD5 or sha-256 C#","I'm writing a register form for a application but still having problems with being new to c#.
I am looking to encrypt/hash passwords to md5 or sha-256, preferably sha-256. 
Any good examples? I want it to be able to take the information from ""string password;"" and then hash it and store in the variable ""string hPassword;"". Any ideas?
","You're going to want to use the System.Security.Cryptography namespace; specifically, the MD5 class or the SHA256 class. 
Drawing a bit from the code on this page, and with the knowledge that both classes have the same base class (HashAlgorithm), you could use a function like this:
public string ComputeHash(string input, HashAlgorithm algorithm)
{
   Byte[] inputBytes = Encoding.UTF8.GetBytes(input);

   Byte[] hashedBytes = algorithm.ComputeHash(inputBytes);

   return BitConverter.ToString(hashedBytes);
}

Then you could call it like this (for MD5):
string hPassword = ComputeHash(password, new MD5CryptoServiceProvider());

Or for SHA256:
string hPassword = ComputeHash(password, new SHA256CryptoServiceProvider());


Edit: Adding Salt Support
As dtb pointed out in the comments, this code would be stronger if it included the ability to add salt. If you're not familiar with it, salt is a set of random bits that are included as an input to the hashing function, which goes a long way to thwart dictionary attacks against a hashed password (e.g., using a rainbow table). Here's a modified version of the ComputeHash function that supports salt:
public static string ComputeHash(string input, HashAlgorithm algorithm, Byte[] salt)
{
   Byte[] inputBytes = Encoding.UTF8.GetBytes(input);

   // Combine salt and input bytes
   Byte[] saltedInput = new Byte[salt.Length + inputBytes.Length];
   salt.CopyTo(saltedInput, 0);
   inputBytes.CopyTo(saltedInput, salt.Length);

   Byte[] hashedBytes = algorithm.ComputeHash(saltedInput);

   return BitConverter.ToString(hashedBytes);
}

Hope this has been helpful!
","74530","<c#><hash><sha256>","43","54","9","2018-11-01 08:18:19","","3","50","","delete","2010-12-01 22:45:53","2010-12-01 22:43:48",""
"4329909","Hashing passwords with MD5 or sha-256 C#","I'm writing a register form for a application but still having problems with being new to c#.
I am looking to encrypt/hash passwords to md5 or sha-256, preferably sha-256. 
Any good examples? I want it to be able to take the information from ""string password;"" and then hash it and store in the variable ""string hPassword;"". Any ideas?
","The System.Security.Cryptography.SHA256 class should do the trick:
http://msdn.microsoft.com/en-us/library/system.security.cryptography.sha256.aspx
","74530","<c#><hash><sha256>","43","1","9","2018-11-01 08:18:19","","3","50","","delete","2010-12-01 22:45:53","2010-12-01 22:43:48",""
"4329909","Hashing passwords with MD5 or sha-256 C#","I'm writing a register form for a application but still having problems with being new to c#.
I am looking to encrypt/hash passwords to md5 or sha-256, preferably sha-256. 
Any good examples? I want it to be able to take the information from ""string password;"" and then hash it and store in the variable ""string hPassword;"". Any ideas?
","If you are going to be storing the hashed passwords, use bcrypt instead of SHA-256.  The problem is that SHA-256 is optimized for speed, which makes it easier for a brute force attack on passwords should someone get access to your database.
Read this article: Enough With The Rainbow Tables: What You Need To Know About Secure Password Schemes and this answer to a previous SO question.
Some quotes from the article:

The problem is that MD5 is fast. So are its modern competitors, like SHA1 and SHA256. Speed is a design goal of a modern secure hash, because hashes are a building block of almost every cryptosystem, and usually get demand-executed on a per-packet or per-message basis.
Speed is exactly what you don’t want in a password hash function.



Finally, we learned that if we want to store passwords securely we have three reasonable options: PHK’s MD5 scheme, Provos-Maziere’s Bcrypt scheme, and SRP. We learned that the correct choice is Bcrypt.

","74530","<c#><hash><sha256>","43","2","9","2018-11-01 08:18:19","","3","50","","delete","2010-12-01 22:45:53","2010-12-01 22:43:48",""
"4329909","Hashing passwords with MD5 or sha-256 C#","I'm writing a register form for a application but still having problems with being new to c#.
I am looking to encrypt/hash passwords to md5 or sha-256, preferably sha-256. 
Any good examples? I want it to be able to take the information from ""string password;"" and then hash it and store in the variable ""string hPassword;"". Any ideas?
","Don't use a simple hash, or even a salted hash. Use some sort of key-strengthening technique like bcrypt (with a .NET implementation here) or PBKDF2 (with a built-in implementation).
Here's an example using PBKDF2.
To generate a key from your password...
string password = GetPasswordFromUserInput();

// specify that we want to randomly generate a 20-byte salt
using (var deriveBytes = new Rfc2898DeriveBytes(password, 20))
{
    byte[] salt = deriveBytes.Salt;
    byte[] key = deriveBytes.GetBytes(20);  // derive a 20-byte key

    // save salt and key to database
}

And then to test if a password is valid...
string password = GetPasswordFromUserInput();

byte[] salt, key;
// load salt and key from database

using (var deriveBytes = new Rfc2898DeriveBytes(password, salt))
{
    byte[] newKey = deriveBytes.GetBytes(20);  // derive a 20-byte key

    if (!newKey.SequenceEqual(key))
        throw new InvalidOperationException(""Password is invalid!"");
}

","74530","<c#><hash><sha256>","43","78","9","2018-11-01 08:18:19","","3","50","","delete","2010-12-01 22:45:53","2010-12-01 22:43:48",""
"4329909","Hashing passwords with MD5 or sha-256 C#","I'm writing a register form for a application but still having problems with being new to c#.
I am looking to encrypt/hash passwords to md5 or sha-256, preferably sha-256. 
Any good examples? I want it to be able to take the information from ""string password;"" and then hash it and store in the variable ""string hPassword;"". Any ideas?
","You should always salt the password before hashing when storing them in the database.
Recommended database columns:

PasswordSalt : int
PasswordHash : binary(20)

Most posts you find online will talk about ASCII encoding the salt and hash, but that is not needed and only add unneeded computation. Also if you use SHA-1, then the output will only be 20 bytes so your hash field in the database only needs to be 20 bytes in length. I understand your asking about SHA-256, but unless you have a compelling reason, using SHA-1 with a salt value will be sufficient in most business practices. If you insist on SHA-256, then the hash field in the database needs to be 32 bytes in length.
Below are a few functions that will generate the salt, compute the hash and verify the hash against a password. 
The salt function below generates a cryptographically strong salt as an Integer from 4 cryptographically created random bytes.
private int GenerateSaltForPassword()
{
    RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
    byte[] saltBytes = new byte[4];
    rng.GetNonZeroBytes(saltBytes);
    return (((int)saltBytes[0]) << 24) + (((int)saltBytes[1]) << 16) + (((int)saltBytes[2]) << 8) + ((int)saltBytes[3]);
}

The password can then be hashed using the salt with the function below.  The salt is concatenated to the password and then the hash is computed.

private byte[] ComputePasswordHash(string password, int salt)
{
    byte[] saltBytes = new byte[4];
    saltBytes[0] = (byte)(salt >> 24);
    saltBytes[1] = (byte)(salt >> 16);
    saltBytes[2] = (byte)(salt >> 8);
    saltBytes[3] = (byte)(salt);

    byte[] passwordBytes = UTF8Encoding.UTF8.GetBytes(password);

    byte[] preHashed = new byte[saltBytes.Length + passwordBytes.Length];
    System.Buffer.BlockCopy(passwordBytes, 0, preHashed, 0, passwordBytes.Length);
    System.Buffer.BlockCopy(saltBytes, 0, preHashed, passwordBytes.Length, saltBytes.Length);

    SHA1 sha1 = SHA1.Create();
    return sha1.ComputeHash(preHashed);
}


Checking the password can be done simply by computing the hash and then comparing it to the expected hash.

private bool IsPasswordValid(string passwordToValidate, int salt, byte[] correctPasswordHash)
{
    byte[] hashedPassword = ComputePasswordHash(passwordToValidate, salt);

    return hashedPassword.SequenceEqual(correctPasswordHash);
}


","74530","<c#><hash><sha256>","43","6","9","2018-11-01 08:18:19","","3","50","","delete","2010-12-01 22:45:53","2010-12-01 22:43:48",""
"4329909","Hashing passwords with MD5 or sha-256 C#","I'm writing a register form for a application but still having problems with being new to c#.
I am looking to encrypt/hash passwords to md5 or sha-256, preferably sha-256. 
Any good examples? I want it to be able to take the information from ""string password;"" and then hash it and store in the variable ""string hPassword;"". Any ideas?
","PBKDF2 is using HMACSHA1.......if you want more modern HMACSHA256 or HMACSHA512 implementation and still want key stretching to make the algorithm slower I suggest this API: https://sourceforge.net/projects/pwdtknet/
","74530","<c#><hash><sha256>","43","2","9","2018-11-01 08:18:19","","3","50","","delete","2010-12-01 22:45:53","2010-12-01 22:43:48",""
"4329909","Hashing passwords with MD5 or sha-256 C#","I'm writing a register form for a application but still having problems with being new to c#.
I am looking to encrypt/hash passwords to md5 or sha-256, preferably sha-256. 
Any good examples? I want it to be able to take the information from ""string password;"" and then hash it and store in the variable ""string hPassword;"". Any ideas?
","Here is a full implementation of a persistence unaware SecuredPassword class
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;


    public class SecuredPassword
    {
        private const int saltSize = 256;
        private readonly byte[] hash;
        private readonly byte[] salt;

        public byte[] Hash
        {
        get { return hash; }
    }

    public byte[] Salt
    {
        get { return salt; }
    }

    public SecuredPassword(string plainPassword)
    {
        if (string.IsNullOrWhiteSpace(plainPassword))
            return; 

        using (var deriveBytes = new Rfc2898DeriveBytes(plainPassword, saltSize))
        {
            salt = deriveBytes.Salt;
            hash = deriveBytes.GetBytes(saltSize);
        }
    }

    public SecuredPassword(byte[] hash, byte[] salt)
    {
        this.hash = hash;
        this.salt = salt;
    }

    public bool Verify(string password)
    {
        if (string.IsNullOrWhiteSpace(password))
            return false; 

        using (var deriveBytes = new Rfc2898DeriveBytes(password, salt))
        {
            byte[] newKey = deriveBytes.GetBytes(saltSize);

            return newKey.SequenceEqual(hash);
        }
    }
}

And tests:
 public class SecuredPasswordTests
{
    [Test]
    public void IsHashed_AsExpected()
    {
        var securedPassword = new SecuredPassword(""password"");

        Assert.That(securedPassword.Hash, Is.Not.EqualTo(""password""));
        Assert.That(securedPassword.Hash.Length, Is.EqualTo(256));
    }

    [Test]
    public void Generates_Unique_Salt()
    {
        var securedPassword = new SecuredPassword(""password"");
        var securedPassword2 = new SecuredPassword(""password"");

        Assert.That(securedPassword.Salt, Is.Not.Null);
        Assert.That(securedPassword2.Salt, Is.Not.Null);
        Assert.That(securedPassword.Salt, Is.Not.EqualTo(securedPassword2.Salt));
    }

    [Test]
    public void Generates_Unique_Hash()
    {
        var securedPassword = new SecuredPassword(""password"");
        var securedPassword2 = new SecuredPassword(""password"");

        Assert.That(securedPassword.Hash, Is.Not.Null);
        Assert.That(securedPassword2.Hash, Is.Not.Null);
        Assert.That(securedPassword.Hash, Is.Not.EqualTo(securedPassword2.Hash));
    }

    [Test]
    public void Verify_WhenMatching_ReturnsTrue()
    {
        var securedPassword = new SecuredPassword(""password"");
        var result = securedPassword.Verify(""password"");
        Assert.That(result, Is.True);
    }

    [Test]
    public void Verify_WhenDifferent_ReturnsFalse()
    {
        var securedPassword = new SecuredPassword(""password"");
        var result = securedPassword.Verify(""Password"");
        Assert.That(result, Is.False);
    }

    [Test]
    public void Verify_WhenRehydrated_AndMatching_ReturnsTrue()
    {
        var securedPassword = new SecuredPassword(""password123"");

        var rehydrated = new SecuredPassword(securedPassword.Hash, securedPassword.Salt);

        var result = rehydrated.Verify(""password123"");
        Assert.That(result, Is.True);
    }

    [Test]
    public void Constructor_Handles_Null_Password()
    {
        Assert.DoesNotThrow(() => new SecuredPassword(null));
    }

    [Test]
    public void Constructor_Handles_Empty_Password()
    {
        Assert.DoesNotThrow(() => new SecuredPassword(string.Empty));
    }

    [Test]
    public void Verify_Handles_Null_Password()
    {
        Assert.DoesNotThrow(() => new SecuredPassword(""password"").Verify(null));
    }

    [Test]
    public void Verify_Handles_Empty_Password()
    {
        Assert.DoesNotThrow(() => new SecuredPassword(""password"").Verify(string.Empty));
    }

    [Test]
    public void Verify_When_Null_Password_ReturnsFalse()
    {
        Assert.That(new SecuredPassword(""password"").Verify(null), Is.False);
    }
}

","74530","<c#><hash><sha256>","43","2","9","2018-11-01 08:18:19","","3","50","","delete","2010-12-01 22:45:53","2010-12-01 22:43:48",""
"4329909","Hashing passwords with MD5 or sha-256 C#","I'm writing a register form for a application but still having problems with being new to c#.
I am looking to encrypt/hash passwords to md5 or sha-256, preferably sha-256. 
Any good examples? I want it to be able to take the information from ""string password;"" and then hash it and store in the variable ""string hPassword;"". Any ideas?
","Please use this as i have the same issues before but could solve it will the litle code snippet
    public static string ComputeHash(string input, HashAlgorithm algorithm, Byte[] salt)
    {
        Byte[] inputBytes = Encoding.UTF8.GetBytes(input);

        // Combine salt and input bytes
        Byte[] saltedInput = new Byte[salt.Length + inputBytes.Length];
        salt.CopyTo(saltedInput, 0);
        inputBytes.CopyTo(saltedInput, salt.Length);

        Byte[] hashedBytes = algorithm.ComputeHash(saltedInput);


        StringBuilder hex = new StringBuilder(hashedBytes.Length * 2);
        foreach (byte b in hashedBytes)
            hex.AppendFormat(""{0:X2}"", b);

        return hex.ToString();

    }

","74530","<c#><hash><sha256>","43","1","9","2018-11-01 08:18:19","","3","50","","delete","2010-12-01 22:45:53","2010-12-01 22:43:48",""
"4329909","Hashing passwords with MD5 or sha-256 C#","I'm writing a register form for a application but still having problems with being new to c#.
I am looking to encrypt/hash passwords to md5 or sha-256, preferably sha-256. 
Any good examples? I want it to be able to take the information from ""string password;"" and then hash it and store in the variable ""string hPassword;"". Any ideas?
","TL;DR use Microsoft.AspNetCore.Cryptography.KeyDerivation, implementing PBKDF2 with SHA-512.
The good idea to get started with password hashing is to look at what OWASP guidelines say. The list of recommended algorithms includes Argon2, PBKDF2, scrypt, and bcrypt. All these algorithms can be tuned to adjust the time it takes to hash a password, and, correspondingly, the time to crack it via brute-force. All these algorithms utilize salt to protect from rainbow tables attacks.
Neither of these algorithms is terribly weak, but there are some differences:

bcrypt has been around for almost 20 years, has been widely used and
has withstood the test of time. It is pretty resistant to GPU
attacks, but not to FPGA
Argon2 is the newest addition, being a winner of 2015 Password hashing competition. It has better protection against GPU and FPGA attacks, but is a bit too recent to my liking
I don't know much about scrypt. It has been designed to thwart GPU- and FPGA- accelerated attacks, but I've heard it turned out to be not as strong as originally claimed
PBKDF2 is a family of algorithms parametrized by the different hash
functions. It does not offer a specific protection against GPU or ASIC attacks, especially if a weaker hash function like SHA-1 is used, but it is, however, FIPS-certified if it matters to you, and still acceptable if the number of iterations is large enough.

Based on algorithms alone, I would probably go with bcrypt, PBKDF2 being the least favorable.
However, it's not the full story, because even the best algorithm can be made insecure by a bad implementation. Let's look at what is available for .NET platform:

Bcrypt is available via bcrypt.net. They say the implementation is based on Java jBCrypt. Currently there are 6 contributors and 8 issues (all closed) on github. Overall, it looks good, however, I don't know if anyone has made an audit of the code, and it's hard to tell whether an updated version will be available soon enough if a vulnerability is found. I've heard Stack Overflow moved away from using bcrypt because of such reasons
Probably the best way to use Argon2 is through bindings to the
well-known libsodium library, e.g.
https://github.com/adamcaudill/libsodium-net. The idea is that
the most of the crypto is implemented via libsodium, which has considerable
support, and the 'untested' parts are pretty limited. However, in
cryptography details mean a lot, so combined with Argon2 being
relatively recent, I'd treat it as an experimental option
For a long time, .NET had a built-in an implementation of PBKDF2 via 
Rfc2898DeriveBytes class. However, the implementation can only use SHA-1 hash function, which is deemed too fast to be secure nowadays
Finally, the most recent solution is
Microsoft.AspNetCore.Cryptography.KeyDerivation package
available via NuGet. It provides PBKDF2 algorithm with SHA-1, SHA-256, or SHA-512 hash functions, which is considerably better than Rfc2898DeriveBytes. The biggest advantage here is that the implementation is supplied by Microsoft, and while I cannot properly assess cryptographic diligence of Microsoft developers versus BCrypt.net or libsodium developers, it just makes sense to trust it because if you are running a .NET application, you are heavily relying on Microsoft already. We might also expect Microsoft to release updates if security issues are found. Hopefully.

To summarize the research up to this point, while PBKDF2 might be the least preferred algorithm of the four, the availability of Microsoft-supplied implementation trumps that, so the reasonable decision would be to use Microsoft.AspNetCore.Cryptography.KeyDerivation.
The recent package at the moment targets .NET Standard 2.0, so available in .NET Core 2.0 or .NET Framework 4.6.1 or later. If you use earlier framework version, it is possible to use the previous version of the package, 1.1.3, which targets .NET Framework 4.5.1 or .NET Core 1.0. Unfortunately, it is not possible to use it in even earlier versions of .NET.
The documentation and the working example is available at docs.microsoft.com. However, do not copy-paste it as it is, there are still decisions a developer needs to make.
The first decision is what hash function to use. Available options include SHA-1, SHA-256, and SHA-512. Of those, SHA-1 is definitely too fast to be secure, SHA-256 is decent, but I would recommend SHA-512, because supposedly, its 64-bit operations usage makes it harder to benefit from GPU-based attacks.
Then, you need to choose the password hash output length and the salt length. It doesn't make sense to have output longer than the hash function output (e.g. 512 bits for SHA-512), and it would probably be the most secure to have it exactly like that. For the salt length, opinions differ. 128 bits should be enough, but in any case, the length longer than the hash output length surely doesn't provide any benefits.
Next, there is an iteration count. The bigger it is, the harder password hashes are to crack, but the longer it takes to log users in. I'd suggest to choose it so the hashing takes 0.25 - 1 seconds on the typical production system, and in any case, it should not be less than 10000.
Normally, you would get bytes array as salt and hash values. Use Base64 to convert them to strings. You can opt to use two different columns in the database, or combine salt and password in one column using a separator which is not encountered in Base64.
Don't forget to devise a password hashing storage in a way that allows to seamlessly move to a better hashing algorithm in future.
","74530","<c#><hash><sha256>","43","2","9","2018-11-01 08:18:19","","3","50","","delete","2010-12-01 22:45:53","2010-12-01 22:43:48",""
"1306550","Calculating a SHA hash with a string + secret key in python","Amazon Product API now requires a signature with every request which I'm trying to generate ushing Python.
The step I get hung up on is this one:
""Calculate an RFC 2104-compliant HMAC with the SHA256 hash algorithm using the string above with our ""dummy"" Secret Access Key: 1234567890. For more information about this step, see documentation and code samples for your programming language."" 
Given a string and a secret key (in this case 1234567890) how do I calculate this hash using Python?
----------- UPDATE -------------
The first solution using HMAC.new looks correct however I'm getting a different result than they are.
http://docs.amazonwebservices.com/AWSECommerceService/latest/DG/index.html?rest-signature.html
According to Amazon's example when you hash the secret key 1234567890 and the following string
GET
webservices.amazon.com
/onca/xml
AWSAccessKeyId=00000000000000000000&ItemId=0679722769&Operation=I
temLookup&ResponseGroup=ItemAttributes%2COffers%2CImages%2CReview
s&Service=AWSECommerceService&Timestamp=2009-01-01T12%3A00%3A00Z&
Version=2009-01-06

You should get the following signature: 'Nace+U3Az4OhN7tISqgs1vdLBHBEijWcBeCqL5xN9xg='
I am getting this:  '411a59403c9f58b4a434c9c6a14ef6e363acc1d1bb2c6faf9adc30e20898c83b'
","From http://docs.python.org/library/hashlib.html#module-hashlib (modified a bit):
import hashlib
secretKey = ""1234567890""
m = hashlib.sha256()

# Get string and put into givenString.

m.update(givenString + secretKey)
m.digest()

","69495","<python><hash><sha256>","48","4","5","2019-07-03 10:02:05","1306575","1","24","12855","","2009-08-20 17:07:34","2009-08-20 14:23:36",""
"1306550","Calculating a SHA hash with a string + secret key in python","Amazon Product API now requires a signature with every request which I'm trying to generate ushing Python.
The step I get hung up on is this one:
""Calculate an RFC 2104-compliant HMAC with the SHA256 hash algorithm using the string above with our ""dummy"" Secret Access Key: 1234567890. For more information about this step, see documentation and code samples for your programming language."" 
Given a string and a secret key (in this case 1234567890) how do I calculate this hash using Python?
----------- UPDATE -------------
The first solution using HMAC.new looks correct however I'm getting a different result than they are.
http://docs.amazonwebservices.com/AWSECommerceService/latest/DG/index.html?rest-signature.html
According to Amazon's example when you hash the secret key 1234567890 and the following string
GET
webservices.amazon.com
/onca/xml
AWSAccessKeyId=00000000000000000000&ItemId=0679722769&Operation=I
temLookup&ResponseGroup=ItemAttributes%2COffers%2CImages%2CReview
s&Service=AWSECommerceService&Timestamp=2009-01-01T12%3A00%3A00Z&
Version=2009-01-06

You should get the following signature: 'Nace+U3Az4OhN7tISqgs1vdLBHBEijWcBeCqL5xN9xg='
I am getting this:  '411a59403c9f58b4a434c9c6a14ef6e363acc1d1bb2c6faf9adc30e20898c83b'
","import hmac
import hashlib
import base64
dig = hmac.new(b'1234567890', msg=your_bytes_string, digestmod=hashlib.sha256).digest()
base64.b64encode(dig).decode()      # py3k-mode
'Nace+U3Az4OhN7tISqgs1vdLBHBEijWcBeCqL5xN9xg='

","69495","<python><hash><sha256>","48","100","5","2019-07-03 10:02:05","1306575","1","24","12855","","2009-08-20 17:07:34","2009-08-20 14:23:36",""
"1306550","Calculating a SHA hash with a string + secret key in python","Amazon Product API now requires a signature with every request which I'm trying to generate ushing Python.
The step I get hung up on is this one:
""Calculate an RFC 2104-compliant HMAC with the SHA256 hash algorithm using the string above with our ""dummy"" Secret Access Key: 1234567890. For more information about this step, see documentation and code samples for your programming language."" 
Given a string and a secret key (in this case 1234567890) how do I calculate this hash using Python?
----------- UPDATE -------------
The first solution using HMAC.new looks correct however I'm getting a different result than they are.
http://docs.amazonwebservices.com/AWSECommerceService/latest/DG/index.html?rest-signature.html
According to Amazon's example when you hash the secret key 1234567890 and the following string
GET
webservices.amazon.com
/onca/xml
AWSAccessKeyId=00000000000000000000&ItemId=0679722769&Operation=I
temLookup&ResponseGroup=ItemAttributes%2COffers%2CImages%2CReview
s&Service=AWSECommerceService&Timestamp=2009-01-01T12%3A00%3A00Z&
Version=2009-01-06

You should get the following signature: 'Nace+U3Az4OhN7tISqgs1vdLBHBEijWcBeCqL5xN9xg='
I am getting this:  '411a59403c9f58b4a434c9c6a14ef6e363acc1d1bb2c6faf9adc30e20898c83b'
",">>> import hmac
>>> import hashlib
>>> import base64
>>> s = """"""GET
... webservices.amazon.com
... /onca/xml
... AWSAccessKeyId=00000000000000000000&ItemId=0679722769&Operation=ItemLookup&ResponseGroup=ItemAttributes%2COffers%2CImages%2CReviews&Service=AWSECommerceService&Timestamp=2009-01-01T12%3A00%3A00Z&Version=2009-01-06""""""
>>> base64.b64encode(hmac.new(""1234567890"", msg=s, digestmod=hashlib.sha256).digest())
'Nace+U3Az4OhN7tISqgs1vdLBHBEijWcBeCqL5xN9xg='

","69495","<python><hash><sha256>","48","13","5","2019-07-03 10:02:05","1306575","1","24","12855","","2009-08-20 17:07:34","2009-08-20 14:23:36",""
"1306550","Calculating a SHA hash with a string + secret key in python","Amazon Product API now requires a signature with every request which I'm trying to generate ushing Python.
The step I get hung up on is this one:
""Calculate an RFC 2104-compliant HMAC with the SHA256 hash algorithm using the string above with our ""dummy"" Secret Access Key: 1234567890. For more information about this step, see documentation and code samples for your programming language."" 
Given a string and a secret key (in this case 1234567890) how do I calculate this hash using Python?
----------- UPDATE -------------
The first solution using HMAC.new looks correct however I'm getting a different result than they are.
http://docs.amazonwebservices.com/AWSECommerceService/latest/DG/index.html?rest-signature.html
According to Amazon's example when you hash the secret key 1234567890 and the following string
GET
webservices.amazon.com
/onca/xml
AWSAccessKeyId=00000000000000000000&ItemId=0679722769&Operation=I
temLookup&ResponseGroup=ItemAttributes%2COffers%2CImages%2CReview
s&Service=AWSECommerceService&Timestamp=2009-01-01T12%3A00%3A00Z&
Version=2009-01-06

You should get the following signature: 'Nace+U3Az4OhN7tISqgs1vdLBHBEijWcBeCqL5xN9xg='
I am getting this:  '411a59403c9f58b4a434c9c6a14ef6e363acc1d1bb2c6faf9adc30e20898c83b'
","import hmac
import hashlib
import base64

digest = hmac.new(secret, msg=thing_to_hash, digestmod=hashlib.sha256).digest()
signature = base64.b64encode(digest).decode()

I know this sounds silly, but make sure you don't have a trailing space on your secret by accident.
","69495","<python><hash><sha256>","48","14","5","2019-07-03 10:02:05","1306575","1","24","12855","","2009-08-20 17:07:34","2009-08-20 14:23:36",""
"1306550","Calculating a SHA hash with a string + secret key in python","Amazon Product API now requires a signature with every request which I'm trying to generate ushing Python.
The step I get hung up on is this one:
""Calculate an RFC 2104-compliant HMAC with the SHA256 hash algorithm using the string above with our ""dummy"" Secret Access Key: 1234567890. For more information about this step, see documentation and code samples for your programming language."" 
Given a string and a secret key (in this case 1234567890) how do I calculate this hash using Python?
----------- UPDATE -------------
The first solution using HMAC.new looks correct however I'm getting a different result than they are.
http://docs.amazonwebservices.com/AWSECommerceService/latest/DG/index.html?rest-signature.html
According to Amazon's example when you hash the secret key 1234567890 and the following string
GET
webservices.amazon.com
/onca/xml
AWSAccessKeyId=00000000000000000000&ItemId=0679722769&Operation=I
temLookup&ResponseGroup=ItemAttributes%2COffers%2CImages%2CReview
s&Service=AWSECommerceService&Timestamp=2009-01-01T12%3A00%3A00Z&
Version=2009-01-06

You should get the following signature: 'Nace+U3Az4OhN7tISqgs1vdLBHBEijWcBeCqL5xN9xg='
I am getting this:  '411a59403c9f58b4a434c9c6a14ef6e363acc1d1bb2c6faf9adc30e20898c83b'
","If you are trying to sign up a user to AWS cognito using Python3, you can use the following code. 
#For the SecretHash 
import hmac
import hashlib
import base64   

//Please note that the b in the secretKey and encode('utf-8') are really really important. 
secretKey = b""secret key that you get from Coginito -> User Pool -> General Settings -> App Clients-->Click on Show more details -> App client secret  ""
 clientId = ""Coginito -> User Pool -> General Settings -> App Clients-->App client id""
 digest = hmac.new(secretKey,
              msg=(user_name + clientId).encode('utf-8'),
              digestmod=hashlib.sha256
             ).digest()
 secrethash = base64.b64encode(digest).decode()

The username user_name in the above is same as the user that you want to register in the cognito
client = boto3.client('cognito-idp', region_name='eu-west-1' )
response = client.sign_up(
                    ClientId='Coginito -> User Pool -> General Settings -> App Clients-->App client id',
                    Username='Username of the person you are planning to register',
                    Password='Password of the person you are planning to register',
                    SecretHash=secrethash,
                    UserAttributes=[
                        {
                            'Name': 'given_name',
                            'Value': given_name
                        },
                        {
                            'Name': 'family_name',
                            'Value': family_name
                        },
                        {
                            'Name': 'email',
                            'Value': user_email
                        }
                    ],
                    ValidationData=[
                        {
                            'Name': 'email',
                            'Value': user_email
                        },
                    ]

","69495","<python><hash><sha256>","48","1","5","2019-07-03 10:02:05","1306575","1","24","12855","","2009-08-20 17:07:34","2009-08-20 14:23:36",""
"16999361","Obtain SHA-256 string of a string","I have some string and I want to hash it with the SHA-256 hash function using C#. I want something like this:
 string hashString = sha256_hash(""samplestring"");

Is there something built into the framework to do this?
","The implementation could be like that
public static String sha256_hash(String value) {
  StringBuilder Sb = new StringBuilder();

  using (SHA256 hash = SHA256Managed.Create()) {
    Encoding enc = Encoding.UTF8;
    Byte[] result = hash.ComputeHash(enc.GetBytes(value));

    foreach (Byte b in result)
      Sb.Append(b.ToString(""x2""));
  }

  return Sb.ToString();
}

Edit: Linq implementation is more concise, but, probably, less readable:
public static String sha256_hash(String value) {
  using (SHA256 hash = SHA256Managed.Create()) {
    return String.Concat(hash
      .ComputeHash(Encoding.UTF8.GetBytes(value))
      .Select(item => item.ToString(""x2"")));
  }
} 

Edit 2: .NET Core
public static String sha256_hash(string value)
{
    StringBuilder Sb = new StringBuilder();

    using (var hash = SHA256.Create())            
    {
        Encoding enc = Encoding.UTF8;
        Byte[] result = hash.ComputeHash(enc.GetBytes(value));

        foreach (Byte b in result)
            Sb.Append(b.ToString(""x2""));
    }

    return Sb.ToString();
}

","58239","<c#><string><hash><sha256>","37","103","2","2018-09-12 08:17:45","17001289","4","8","2319407","","2018-09-12 08:17:45","2013-06-08 12:05:17",""
"16999361","Obtain SHA-256 string of a string","I have some string and I want to hash it with the SHA-256 hash function using C#. I want something like this:
 string hashString = sha256_hash(""samplestring"");

Is there something built into the framework to do this?
","I was looking for an in-line solution, and was able to compile the below from Dmitry's answer:
public static String sha256_hash(string value)
{
    return (System.Security.Cryptography.SHA256.Create()
            .ComputeHash(Encoding.UTF8.GetBytes(value))
            .Select(item => item.ToString(""x2"")));
}

","58239","<c#><string><hash><sha256>","37","-1","2","2018-09-12 08:17:45","17001289","4","8","2319407","","2018-09-12 08:17:45","2013-06-08 12:05:17",""
"5335734","sha256 function in SQL Server","Is there a built-in sha256 function in SQL Server? I can't find a sha256 T-SQL function source code either. Anyone who has an alternative?
","I think you are looking for HASHBYTES, but it supports only up to SHA-1 (160 bytes)
FYI Hashing is not encrypting. It is irreversible. Encryption is a process that is reversible to get the original data.
Reference for SHA2

SHA-2 is a set of cryptographic hash functions (SHA-224, SHA-256, SHA-384, SHA-512)


Here is a discussion about adding a salt to hashes
As for 256-byte hashing function - there isn't one built in.
","47114","<sql-server><hash><sha256><sha>","12","3","2","2014-05-17 18:16:09","","1","1","13302","","2011-03-17 07:34:25","2011-03-17 06:41:07","2013-09-23 15:19:33"
"5335734","sha256 function in SQL Server","Is there a built-in sha256 function in SQL Server? I can't find a sha256 T-SQL function source code either. Anyone who has an alternative?
","SQL Server 2012 supports SHA2_256 and SHA2_512.
 SELECT HASHBYTES('SHA2_256','something')

","47114","<sql-server><hash><sha256><sha>","12","34","2","2014-05-17 18:16:09","","1","1","13302","","2011-03-17 07:34:25","2011-03-17 06:41:07","2013-09-23 15:19:33"
"25388747","SHA256 in swift","I want to use sha256 in my project, but I had some troubles rewriting objC code to swift code. Help me please. I used this answer: How can I compute a SHA-2 (ideally SHA 256 or SHA 512) hash in iOS?
Here's my code
var hash : [CUnsignedChar]
CC_SHA256(data.bytes, data.length, hash)
var res : NSData = NSData.dataWithBytes(hash, length: CC_SHA256_DIGEST_LENGTH)

it gives me error everything because swift cannot convert Int to CC_LONG, for example.
","You have to convert explicitly between Int and CC_LONG, because Swift does not
do implicit conversions, as in (Objective-)C.
You also have to define hash as an array of the required size.
func sha256(data : NSData) -> NSData {
    var hash = [UInt8](count: Int(CC_SHA256_DIGEST_LENGTH), repeatedValue: 0)
    CC_SHA256(data.bytes, CC_LONG(data.length), &hash)
    let res = NSData(bytes: hash, length: Int(CC_SHA256_DIGEST_LENGTH))
    return res
}

Alternatively, you can use NSMutableData to allocate the needed buffer:
func sha256(data : NSData) -> NSData {
    let res = NSMutableData(length: Int(CC_SHA256_DIGEST_LENGTH))
    CC_SHA256(data.bytes, CC_LONG(data.length), UnsafeMutablePointer(res.mutableBytes))
    return res
}

Update for Swift 3 and 4:
func sha256(data : Data) -> Data {
    var hash = [UInt8](repeating: 0,  count: Int(CC_SHA256_DIGEST_LENGTH))
    data.withUnsafeBytes {
        _ = CC_SHA256($0, CC_LONG(data.count), &hash)
    }
    return Data(bytes: hash)
}

Update for Swift 5:
func sha256(data : Data) -> Data {
    var hash = [UInt8](repeating: 0,  count: Int(CC_SHA256_DIGEST_LENGTH))
    data.withUnsafeBytes {
        _ = CC_SHA256($0.baseAddress, CC_LONG(data.count), &hash)
    }
    return Data(hash)
}

","44167","<swift><sha256>","62","98","10","2019-10-16 14:44:36","25391020","7","18","-1","","2017-05-23 11:47:10","2014-08-19 16:42:29",""
"25388747","SHA256 in swift","I want to use sha256 in my project, but I had some troubles rewriting objC code to swift code. Help me please. I used this answer: How can I compute a SHA-2 (ideally SHA 256 or SHA 512) hash in iOS?
Here's my code
var hash : [CUnsignedChar]
CC_SHA256(data.bytes, data.length, hash)
var res : NSData = NSData.dataWithBytes(hash, length: CC_SHA256_DIGEST_LENGTH)

it gives me error everything because swift cannot convert Int to CC_LONG, for example.
","Here's a method that uses the CoreFoundation Security Transforms API, so you don't even need to link to CommonCrypto.  For some reason in 10.10/Xcode 7 linking to CommmonCrypto with Swift is drama so I used this instead.  
This method reads from an NSInputStream, which you can either get from a file, or you can make one that reads an NSData, or you can make bound reader/writer streams for a buffered process.
// digestType is from SecDigestTransform and would be kSecDigestSHA2, etc 
func digestForStream(stream : NSInputStream,
    digestType type : CFStringRef, length : Int) throws -> NSData {

    let transform = SecTransformCreateGroupTransform().takeRetainedValue()

    let readXform = SecTransformCreateReadTransformWithReadStream(stream as CFReadStreamRef).takeRetainedValue()

    var error : Unmanaged<CFErrorRef>? = nil

    let digestXform : SecTransformRef = try {
        let d = SecDigestTransformCreate(type, length, &error)
        if d == nil {
            throw error!.takeUnretainedValue()
        } else {
            return d.takeRetainedValue()
        }
    }()

    SecTransformConnectTransforms(readXform, kSecTransformOutputAttributeName,
        digestXform, kSecTransformInputAttributeName,
        transform, &error)
    if let e = error { throw e.takeUnretainedValue() }

    if let output = SecTransformExecute(transform, &error) as? NSData {
        return output
    } else {
        throw error!.takeUnretainedValue()
    }
}

","44167","<swift><sha256>","62","4","10","2019-10-16 14:44:36","25391020","7","18","-1","","2017-05-23 11:47:10","2014-08-19 16:42:29",""
"25388747","SHA256 in swift","I want to use sha256 in my project, but I had some troubles rewriting objC code to swift code. Help me please. I used this answer: How can I compute a SHA-2 (ideally SHA 256 or SHA 512) hash in iOS?
Here's my code
var hash : [CUnsignedChar]
CC_SHA256(data.bytes, data.length, hash)
var res : NSData = NSData.dataWithBytes(hash, length: CC_SHA256_DIGEST_LENGTH)

it gives me error everything because swift cannot convert Int to CC_LONG, for example.
","Functions giving the SHA from NSData & String (Swift 3):
func sha256(_ data: Data) -> Data? {
    guard let res = NSMutableData(length: Int(CC_SHA256_DIGEST_LENGTH)) else { return nil }
    CC_SHA256((data as NSData).bytes, CC_LONG(data.count), res.mutableBytes.assumingMemoryBound(to: UInt8.self))
    return res as Data
}

func sha256(_ str: String) -> String? {
    guard
        let data = str.data(using: String.Encoding.utf8),
        let shaData = sha256(data)
        else { return nil }
    let rc = shaData.base64EncodedString(options: [])
    return rc
}

Include in your bridging header:
#import ""CommonCrypto/CommonCrypto.h""

","44167","<swift><sha256>","62","15","10","2019-10-16 14:44:36","25391020","7","18","-1","","2017-05-23 11:47:10","2014-08-19 16:42:29",""
"25388747","SHA256 in swift","I want to use sha256 in my project, but I had some troubles rewriting objC code to swift code. Help me please. I used this answer: How can I compute a SHA-2 (ideally SHA 256 or SHA 512) hash in iOS?
Here's my code
var hash : [CUnsignedChar]
CC_SHA256(data.bytes, data.length, hash)
var res : NSData = NSData.dataWithBytes(hash, length: CC_SHA256_DIGEST_LENGTH)

it gives me error everything because swift cannot convert Int to CC_LONG, for example.
","The top answer didn't work for me. I found something in the web and changed it a bit and now it works :D. It's for Swift 3 and 4. 
Put this extension somewhere in your project and use it on a string like this: mystring.sha256()
extension String {

    func sha256() -> String{
        if let stringData = self.data(using: String.Encoding.utf8) {
            return hexStringFromData(input: digest(input: stringData as NSData))
        }
        return """"
    }

    private func digest(input : NSData) -> NSData {
        let digestLength = Int(CC_SHA256_DIGEST_LENGTH)
        var hash = [UInt8](repeating: 0, count: digestLength)
        CC_SHA256(input.bytes, UInt32(input.length), &hash)
        return NSData(bytes: hash, length: digestLength)
    }

    private  func hexStringFromData(input: NSData) -> String {
        var bytes = [UInt8](repeating: 0, count: input.length)
        input.getBytes(&bytes, length: input.length)

        var hexString = """"
        for byte in bytes {
            hexString += String(format:""%02x"", UInt8(byte))
        }

        return hexString
    }

}

By the way you need a Bridging Header that imports CommonCrypto. If you don't have one follow these steps:

Create new File -> Header File -> Save as BridgingHeader
In Build Settings -> Objective-C Bridging Header -> add ProjectName/BridgingHeader.h
Put #import <CommonCrypto/CommonHMAC.h> in your Header File 

","44167","<swift><sha256>","62","64","10","2019-10-16 14:44:36","25391020","7","18","-1","","2017-05-23 11:47:10","2014-08-19 16:42:29",""
"25388747","SHA256 in swift","I want to use sha256 in my project, but I had some troubles rewriting objC code to swift code. Help me please. I used this answer: How can I compute a SHA-2 (ideally SHA 256 or SHA 512) hash in iOS?
Here's my code
var hash : [CUnsignedChar]
CC_SHA256(data.bytes, data.length, hash)
var res : NSData = NSData.dataWithBytes(hash, length: CC_SHA256_DIGEST_LENGTH)

it gives me error everything because swift cannot convert Int to CC_LONG, for example.
","Here's my simple 3-line Swift 4 function for this using the Security Transforms API, which is part of Foundation on macOS. (Unfortunately iOS programmers cannot use this technique.)
import Foundation

extension Data {
    public func sha256Hash() -> Data {
        let transform = SecDigestTransformCreate(kSecDigestSHA2, 256, nil)
        SecTransformSetAttribute(transform, kSecTransformInputAttributeName, self as CFTypeRef, nil)
        return SecTransformExecute(transform, nil) as! Data
    }
}

","44167","<swift><sha256>","62","5","10","2019-10-16 14:44:36","25391020","7","18","-1","","2017-05-23 11:47:10","2014-08-19 16:42:29",""
"25388747","SHA256 in swift","I want to use sha256 in my project, but I had some troubles rewriting objC code to swift code. Help me please. I used this answer: How can I compute a SHA-2 (ideally SHA 256 or SHA 512) hash in iOS?
Here's my code
var hash : [CUnsignedChar]
CC_SHA256(data.bytes, data.length, hash)
var res : NSData = NSData.dataWithBytes(hash, length: CC_SHA256_DIGEST_LENGTH)

it gives me error everything because swift cannot convert Int to CC_LONG, for example.
","I prefer to use:
extension String {
    var sha256:String? {
        guard let stringData = self.data(using: String.Encoding.utf8) else { return nil }
        return digest(input: stringData as NSData).base64EncodedString(options: [])
    }

    private func digest(input : NSData) -> NSData {
        let digestLength = Int(CC_SHA256_DIGEST_LENGTH)
        var hash = [UInt8](repeating: 0, count: digestLength)
        CC_SHA256(input.bytes, UInt32(input.length), &hash)
        return NSData(bytes: hash, length: digestLength)
    }
}

The hasded String is base64 encoded.
","44167","<swift><sha256>","62","0","10","2019-10-16 14:44:36","25391020","7","18","-1","","2017-05-23 11:47:10","2014-08-19 16:42:29",""
"25388747","SHA256 in swift","I want to use sha256 in my project, but I had some troubles rewriting objC code to swift code. Help me please. I used this answer: How can I compute a SHA-2 (ideally SHA 256 or SHA 512) hash in iOS?
Here's my code
var hash : [CUnsignedChar]
CC_SHA256(data.bytes, data.length, hash)
var res : NSData = NSData.dataWithBytes(hash, length: CC_SHA256_DIGEST_LENGTH)

it gives me error everything because swift cannot convert Int to CC_LONG, for example.
","For Swift 5:
guard let data = self.data(using: .utf8) else { return nil }
    var sha256 = Data(count: Int(CC_SHA256_DIGEST_LENGTH))
    sha256.withUnsafeMutableBytes { sha256Buffer in
        data.withUnsafeBytes { buffer in
            let _ = CC_SHA256(buffer.baseAddress!, CC_LONG(buffer.count), sha256Buffer.bindMemory(to: UInt8.self).baseAddress)
        }
    }

    return sha256

","44167","<swift><sha256>","62","2","10","2019-10-16 14:44:36","25391020","7","18","-1","","2017-05-23 11:47:10","2014-08-19 16:42:29",""
"25388747","SHA256 in swift","I want to use sha256 in my project, but I had some troubles rewriting objC code to swift code. Help me please. I used this answer: How can I compute a SHA-2 (ideally SHA 256 or SHA 512) hash in iOS?
Here's my code
var hash : [CUnsignedChar]
CC_SHA256(data.bytes, data.length, hash)
var res : NSData = NSData.dataWithBytes(hash, length: CC_SHA256_DIGEST_LENGTH)

it gives me error everything because swift cannot convert Int to CC_LONG, for example.
","The other answers will have performance problems for calculating digests from large amounts of data (e.g. large files). You will not want to load all data into memory at once. Consider the following approach using update/finalize:
final class SHA256Digest {

    enum InputStreamError: Error {
        case createFailed(URL)
        case readFailed
    }

    private lazy var context: CC_SHA256_CTX = {
        var shaContext = CC_SHA256_CTX()
        CC_SHA256_Init(&shaContext)
        return shaContext
    }()
    private var result: Data? = nil

    init() {
    }

    func update(url: URL) throws {
        guard let inputStream = InputStream(url: url) else {
            throw InputStreamError.createFailed(url)
        }
        return try update(inputStream: inputStream)
    }

    func update(inputStream: InputStream) throws {
        guard result == nil else {
            return
        }
        inputStream.open()
        defer {
            inputStream.close()
        }
        let bufferSize = 4096
        let buffer = UnsafeMutablePointer<UInt8>.allocate(capacity: bufferSize)
        defer {
            buffer.deallocate()
        }
        while true {
            let bytesRead = inputStream.read(buffer, maxLength: bufferSize)
            if bytesRead < 0 {
                //Stream error occured
                throw (inputStream.streamError ?? InputStreamError.readFailed)
            } else if bytesRead == 0 {
                //EOF
                break
            }
            self.update(bytes: buffer, length: bytesRead)
        }
    }

    func update(data: Data) {
        guard result == nil else {
            return
        }
        data.withUnsafeBytes {
            self.update(bytes: $0, length: data.count)
        }
    }

    func update(bytes: UnsafeRawPointer, length: Int) {
        guard result == nil else {
            return
        }
        _ = CC_SHA256_Update(&self.context, bytes, CC_LONG(length))
    }

    func finalize() -> Data {
        if let calculatedResult = result {
            return calculatedResult
        }
        var resultBuffer = [UInt8](repeating: 0, count: Int(CC_SHA256_DIGEST_LENGTH))
        CC_SHA256_Final(&resultBuffer, &self.context)
        let theResult = Data(bytes: resultBuffer)
        result = theResult
        return theResult
    }
}

extension Data {

    private static let hexCharacterLookupTable: [Character] = [
        ""0"",
        ""1"",
        ""2"",
        ""3"",
        ""4"",
        ""5"",
        ""6"",
        ""7"",
        ""8"",
        ""9"",
        ""a"",
        ""b"",
        ""c"",
        ""d"",
        ""e"",
        ""f""
    ]

    var hexString: String {
        return self.reduce(into: String(), { (result, byte) in
            let c1: Character = Data.hexCharacterLookupTable[Int(byte >> 4)]
            let c2: Character = Data.hexCharacterLookupTable[Int(byte & 0x0F)]
            result.append(c1)
            result.append(c2)
        })
    }
}

You could use it as follows:
let digest = SHA256Digest()
try digest.update(url: fileURL)
let result = digest.finalize().hexString
print(result)

","44167","<swift><sha256>","62","0","10","2019-10-16 14:44:36","25391020","7","18","-1","","2017-05-23 11:47:10","2014-08-19 16:42:29",""
"25388747","SHA256 in swift","I want to use sha256 in my project, but I had some troubles rewriting objC code to swift code. Help me please. I used this answer: How can I compute a SHA-2 (ideally SHA 256 or SHA 512) hash in iOS?
Here's my code
var hash : [CUnsignedChar]
CC_SHA256(data.bytes, data.length, hash)
var res : NSData = NSData.dataWithBytes(hash, length: CC_SHA256_DIGEST_LENGTH)

it gives me error everything because swift cannot convert Int to CC_LONG, for example.
","With CryptoKit added in iOS13, we now have native Swift API:
import Foundation
import CryptoKit

// CryptoKit.Digest utils
extension Digest {
    var bytes: [UInt8] { Array(makeIterator()) }
    var data: Data { Data(bytes) }

    var hexStr: String {
        bytes.map { String(format: ""%02X"", $0) }.joined()
    }
}

func example() {
    guard let data = ""hello world"".data(using: .utf8) else { return }
    let digest = SHA256.hash(data: data)
    print(digest.data) // 32 bytes
    print(digest.hexStr) // B94D27B9934D3E08A52E52D7DA7DABFAC484EFE37A5380EE9088F7ACE2EFCDE9
}

Because utils are defined for protocol Digest, you can use it for all digest type in CryptoKit, like SHA384Digest, SHA512Digest, SHA1Digest, MD5Digest...
","44167","<swift><sha256>","62","3","10","2019-10-16 14:44:36","25391020","7","18","-1","","2017-05-23 11:47:10","2014-08-19 16:42:29",""
"25388747","SHA256 in swift","I want to use sha256 in my project, but I had some troubles rewriting objC code to swift code. Help me please. I used this answer: How can I compute a SHA-2 (ideally SHA 256 or SHA 512) hash in iOS?
Here's my code
var hash : [CUnsignedChar]
CC_SHA256(data.bytes, data.length, hash)
var res : NSData = NSData.dataWithBytes(hash, length: CC_SHA256_DIGEST_LENGTH)

it gives me error everything because swift cannot convert Int to CC_LONG, for example.
","A version for Swift 5 that uses CryptoKit on iOS 13 and falls back to CommonCrypto otherwise:
import CommonCrypto
import CryptoKit
import Foundation

private func hexString(_ iterator: Array<UInt8>.Iterator) -> String {
    return iterator.map { String(format: ""%02x"", $0) }.joined()
}

extension Data {

    public var sha256: String {
        if #available(iOS 13.0, *) {
            return hexString(SHA256.hash(data: self).makeIterator())
        } else {
            var digest = [UInt8](repeating: 0, count: Int(CC_SHA256_DIGEST_LENGTH))
            self.withUnsafeBytes { bytes in
                _ = CC_SHA256(bytes.baseAddress, CC_LONG(self.count), &digest)
            }
            return hexString(digest.makeIterator())
        }
    }

}

Usage:
let string = ""The quick brown fox jumps over the lazy dog""
let hexDigest = string.data(using: .ascii)!.sha256
assert(hexDigest == ""d7a8fbb307d7809469ca9abcb0082e4f8d5651e46d3cdb762d02d0bf37c9e592"")

Also available via Swift package manager:
https://github.com/ralfebert/TinyHashes
","44167","<swift><sha256>","62","0","10","2019-10-16 14:44:36","25391020","7","18","-1","","2017-05-23 11:47:10","2014-08-19 16:42:29",""
"13419201","Why are the RSA-SHA256 signatures I generate with OpenSSL and Java different?","I want to generate a RSA-SHA256 signature in Java, but I can't get it to produce the same signature as with OpenSSL on the console.
This is what I did with OpenSSL (following this tutorial):
Generate key pair:
openssl genrsa -out private.pem 1024

Extract public key:
openssl rsa -in private.pem -out public.pem -outform PEM -pubout

Create hash of data:
echo 'data to sign' > data.txt
openssl dgst -sha256 < data.txt > hash

The generated hash file starts with (stdin)= what I removed by hand (first forgot to mention it, thanks mata).
Sign hash:
openssl rsautl -sign -inkey private.pem -keyform PEM -in hash  > signature

To reproduce the results in Java I first converted the private key from PEM to DER:
openssl pkcs8 -topk8 -inform PEM -outform DER -in private.pem -nocrypt > private.der

Now I wrote this Java class to generate the same signature:
public class RSATest {

    public static void main(String[] args) throws IOException,
            NoSuchAlgorithmException, InvalidKeySpecException,
            InvalidKeyException, SignatureException {

        byte[] encodedPrivateKey = readFile(""private.der"");
        byte[] content = readFile(""data.txt"");

        KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(encodedPrivateKey);
        RSAPrivateKey privateKey = (RSAPrivateKey) keyFactory
                .generatePrivate(keySpec);

        Signature signature = Signature.getInstance(""SHA256withRSA"");
        signature.initSign(privateKey);
        signature.update(content);
        byte[] signatureBytes = signature.sign();

        FileOutputStream fos = new FileOutputStream(""signature-java"");
        fos.write(signatureBytes);
        fos.close();
    }

    private static byte[] readFile(String filename) throws IOException {
        File file = new File(filename);
        BufferedInputStream bis = new BufferedInputStream(new FileInputStream(
                file));
        byte[] bytes = new byte[(int) file.length()];
        bis.read(bytes);
        bis.close();
        return bytes;
    }

}

Unfortunately the results are not the same, so I think I must have done something wrong, but I can't figure out what. Can someone of you help me to find the bug?
","openssl dgst -sha256 < data.txt

produces something like:

(stdin)= b39eaeb437e33087132f01c2abc60c6a16904ee3771cd7b0d622d01061b40729

notice the (stdin)='? you don't want that to be part of your hash, if you need to create a digest, use the -binary option.
try using this to sign your data:
openssl sha -sha256 -sign private.pem < data.txt

This does everything you need.

edit - a little more explanations:
let's create a digest and show it
$ openssl dgst -sha256 -binary < data.txt > digest
$ hd digest
00000000  26 3b 0a a1 2e b9 32 db  b8 dc d3 6f 37 94 0b 05  |&;....2....o7...|
00000010  71 9c ba 79 46 34 28 9f  5c 5b 98 9a 64 61 c9 ec  |q..yF4(.\[..da..|

now we take this digest and sign int using rsautl:
$ openssl rsautl -sign -inkey private.pem < digest > sign1
$ hd sign1
00000000  1b 7a cf a4 8d 41 8e 04  ed 3a bb ba 86 f1 f8 e0  |.z...A...:......|
00000010  df f7 47 3e d7 a7 f4 90  7a 05 f8 7f 45 e5 29 e7  |..G>....z...E.).|
00000020  9f f4 2c 91 97 2f e7 26  69 9f 6a 07 a3 48 1b 85  |..,../.&i.j..H..|
00000030  2e f8 ee 44 4d 25 9f ae  05 95 81 c9 e3 07 68 ad  |...DM%........h.|

now let's sign the same file using dgst directly:
$ openssl dgst -sha256 -sign private.pem < data.txt > sign2
$ hd sign2
00000000  15 c2 94 87 eb e6 cb 45  c8 63 0c 97 60 d3 07 f3  |.......E.c..`...|
00000010  dc 65 32 ad 44 1c c2 2a  7f a3 e1 fc dd 84 27 8c  |.e2.D..*......'.|
00000020  77 a6 97 2b 33 6b c6 d7  7d e1 1d 39 5c 48 b6 48  |w..+3k..}..9\H.H|
00000030  cb 18 be bf 6a 66 90 d3  88 89 52 6c dd d1 b9 99  |....jf....Rl....|

So what's different here? To see that, we can verify the signature and show the raw output. Both files do contain the digest, but the metadata and padding is different:
$ openssl rsautl -raw -verify -inkey private.pem < sign1 | hd
00000000  00 01 ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  |................|
00000010  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff 00  |................|
00000020  26 3b 0a a1 2e b9 32 db  b8 dc d3 6f 37 94 0b 05  |&;....2....o7...|
00000030  71 9c ba 79 46 34 28 9f  5c 5b 98 9a 64 61 c9 ec  |q..yF4(.\[..da..|

$ openssl rsautl -raw -verify -inkey private.pem < sign2 | hd
00000000  00 01 ff ff ff ff ff ff  ff ff ff ff 00 30 31 30  |.............010|
00000010  0d 06 09 60 86 48 01 65  03 04 02 01 05 00 04 20  |...`.H.e....... |
00000020  26 3b 0a a1 2e b9 32 db  b8 dc d3 6f 37 94 0b 05  |&;....2....o7...|
00000030  71 9c ba 79 46 34 28 9f  5c 5b 98 9a 64 61 c9 ec  |q..yF4(.\[..da..|

To see this more clearly, we can try to use the -asn1parse flag, which won't work for the first signature, but for the second it shows the correct structure of the signature:
$ openssl rsautl -verify -inkey private.pem -asn1parse < sign1
Error in encoding
139931349546656:error:0D07209B:asn1 encoding routines:ASN1_get_object:too long:asn1_lib.c:142:

$ openssl rsautl -verify -inkey private.pem -asn1parse < sign2
    0:d=0  hl=2 l=  49 cons: SEQUENCE          
    2:d=1  hl=2 l=  13 cons:  SEQUENCE          
    4:d=2  hl=2 l=   9 prim:   OBJECT            :sha256
   15:d=2  hl=2 l=   0 prim:   NULL              
   17:d=1  hl=2 l=  32 prim:  OCTET STRING      
      0000 - 26 3b 0a a1 2e b9 32 db-b8 dc d3 6f 37 94 0b 05   &;....2....o7...
      0010 - 71 9c ba 79 46 34 28 9f-5c 5b 98 9a 64 61 c9 ec   q..yF4(.\[..da..

","38675","<java><openssl><rsa><sha256>","25","45","1","2012-11-16 17:07:13","13419760","1","16","639421","","2012-11-16 15:57:41","2012-11-16 15:05:59",""
"18667393","Decode hash sha256 encryption, knowing the salt","I'm making a login system for a web application. To store passwords in the DB, I'm encrypting passwords using sha256 as follows:
$salt =""sometext"";
$escapedPW=""userpass"";
$saltedPW =  $escapedPW . $salt;
$hashedPW = hash('sha256', $saltedPW);
echo ""<center>"".$hashedPW.""</center>"";

In the database I am storing the user, the user's password and the salt used to make hash and validate the user's  login. Right now I'm doing the functionality to send to the user an email with your password, but when the user receives the email, since is stored in sha256 encrypted password, the user receives a long string and not the password that the user is supposed to know. 
My question is there any way that I can send you the actual user password and non the password encryption, ie, there is some way to do the reverse of sha256 if I know the salt?. If not possible, what method of encryption is recommended for you to complete the reverse of the encryption key and send the actual password to the user in an email. 
","As mentioned in the comments of your question, reversing the hash is not really an option.
What you can do however, and this is what everybody else does as well. In your registration code (ex. register.php) which your form post to you can make the PHP script send the password in an email and then encrypt it and store it in the database.
I suppose you have a registration form of some kind, and that form supposedly posts the new users details to another (or the same) php script, doesn't it?
For example if my form said something like <form method=""post"" action=""register.php"">
And in register.php I would then have something like
<?php
$username = mysql_real_escape_string($_POST['username']);
$password = mysql_real_escape_string($_POST['password']); /*cleartext*/
$email    = mysql_real_escape_string($_POST['email']);

mail($email,""New account"",""Your username \""$username\"" and your password is \""$password\"""");

$salt =""sometext"";
$escapedPW=""userpass"";
$saltedPW =  $escapedPW . $salt;
$hashedPW = hash('sha256', $saltedPW);

mysql_query(""INSERT INTO users (username, password, email) VALUES ($username, $hashedPW, $email)"")

Some rough example code. I hope it helps!
","33269","<php><login><sha256><password-encryption>","9","7","2","2013-09-26 19:34:50","18667636","8","1","59468","","2013-09-08 01:32:59","2013-09-06 22:16:20",""
"18667393","Decode hash sha256 encryption, knowing the salt","I'm making a login system for a web application. To store passwords in the DB, I'm encrypting passwords using sha256 as follows:
$salt =""sometext"";
$escapedPW=""userpass"";
$saltedPW =  $escapedPW . $salt;
$hashedPW = hash('sha256', $saltedPW);
echo ""<center>"".$hashedPW.""</center>"";

In the database I am storing the user, the user's password and the salt used to make hash and validate the user's  login. Right now I'm doing the functionality to send to the user an email with your password, but when the user receives the email, since is stored in sha256 encrypted password, the user receives a long string and not the password that the user is supposed to know. 
My question is there any way that I can send you the actual user password and non the password encryption, ie, there is some way to do the reverse of sha256 if I know the salt?. If not possible, what method of encryption is recommended for you to complete the reverse of the encryption key and send the actual password to the user in an email. 
","You should NEVER send plaintext passwords via email. Rather, send a time-limited, single-use ""reset password"" link, as suggested in the comments.
You should not use a simple hash as suggested by @Henrik.  Use a standard adjustable-work password KDF (PBKDF2,bcrypt,scrypt)
If you can use PHP 5.5, use the standard password hashing functions.  There are hosts which do support PHP 5.5, but you have to look for them and ask for it.
There are many places on the web that explain how to do it correctly (e.g. https://wiki.mozilla.org/WebAppSec/Secure_Coding_Guidelines#Authentication) and many that explain how to do it incorrectly. PLEASE take some time to research this before you decide to roll your own authentication system.
","33269","<php><login><sha256><password-encryption>","9","2","2","2013-09-26 19:34:50","18667636","8","1","59468","","2013-09-08 01:32:59","2013-09-06 22:16:20",""
"6228092","How can I compute a SHA-2 (ideally SHA 256 or SHA 512) hash in iOS?","The Security services API doesn't appear to allow me to compute a hash directly. There are plenty of public domain and liberally licensed versions available, but I'd rather use a system library implementation if possible.
The data is accessible via NSData, or plain pointers.
The cryptographic strength of the hash is important to me. SHA-256 is the minimum acceptable hash size.
","This is what I'm using for SHA1:
#import <CommonCrypto/CommonDigest.h>

+ (NSData *)sha1:(NSData *)data {
    unsigned char hash[CC_SHA1_DIGEST_LENGTH];
    if ( CC_SHA1([data bytes], [data length], hash) ) {
        NSData *sha1 = [NSData dataWithBytes:hash length:CC_SHA1_DIGEST_LENGTH];        
        return sha1;
    }
return nil;
}

Replace CC_SHA1 with CC_SHA256 (or whichever you need), as well as CC_SHA1_DIGEST_LENGTH with CC_SHA256_DIGEST_LENGTH.
","32165","<objective-c><ios><security><hash><sha256>","57","79","6","2018-07-17 20:44:20","6228385","0","36","","","","2011-06-03 14:02:52",""
"6228092","How can I compute a SHA-2 (ideally SHA 256 or SHA 512) hash in iOS?","The Security services API doesn't appear to allow me to compute a hash directly. There are plenty of public domain and liberally licensed versions available, but I'd rather use a system library implementation if possible.
The data is accessible via NSData, or plain pointers.
The cryptographic strength of the hash is important to me. SHA-256 is the minimum acceptable hash size.
","Here's a pretty similar one based on NSString 
+ (NSString *)hashed_string:(NSString *)input
{
    const char *cstr = [input cStringUsingEncoding:NSUTF8StringEncoding];
    NSData *data = [NSData dataWithBytes:cstr length:input.length];
    uint8_t digest[CC_SHA256_DIGEST_LENGTH];

    // This is an iOS5-specific method.
    // It takes in the data, how much data, and then output format, which in this case is an int array.
    CC_SHA256(data.bytes, data.length, digest);

    NSMutableString* output = [NSMutableString stringWithCapacity:CC_SHA256_DIGEST_LENGTH * 2];

    // Parse through the CC_SHA256 results (stored inside of digest[]).
    for(int i = 0; i < CC_SHA256_DIGEST_LENGTH; i++) {
        [output appendFormat:@""%02x"", digest[i]];
    }

    return output;
}

(Credits go to http://www.raywenderlich.com/6475/basic-security-in-ios-5-tutorial-part-1)
","32165","<objective-c><ios><security><hash><sha256>","57","33","6","2018-07-17 20:44:20","6228385","0","36","","","","2011-06-03 14:02:52",""
"6228092","How can I compute a SHA-2 (ideally SHA 256 or SHA 512) hash in iOS?","The Security services API doesn't appear to allow me to compute a hash directly. There are plenty of public domain and liberally licensed versions available, but I'd rather use a system library implementation if possible.
The data is accessible via NSData, or plain pointers.
The cryptographic strength of the hash is important to me. SHA-256 is the minimum acceptable hash size.
","This is what worked for me
func sha256(securityString : String) -> String {
    let data = securityString.dataUsingEncoding(NSUTF8StringEncoding)!
    var hash = [UInt8](count: Int(CC_SHA256_DIGEST_LENGTH), repeatedValue: 0)
    CC_SHA256(data.bytes, CC_LONG(data.length), &hash)
    let output = NSMutableString(capacity: Int(CC_SHA1_DIGEST_LENGTH))
    for byte in hash {
        output.appendFormat(""%02x"", byte)
    }
    return output as String
}

","32165","<objective-c><ios><security><hash><sha256>","57","3","6","2018-07-17 20:44:20","6228385","0","36","","","","2011-06-03 14:02:52",""
"6228092","How can I compute a SHA-2 (ideally SHA 256 or SHA 512) hash in iOS?","The Security services API doesn't appear to allow me to compute a hash directly. There are plenty of public domain and liberally licensed versions available, but I'd rather use a system library implementation if possible.
The data is accessible via NSData, or plain pointers.
The cryptographic strength of the hash is important to me. SHA-256 is the minimum acceptable hash size.
","Below link i used for creating document hash value and Its very simple and easy to  calculate hash value specially for large files.
Link : http://www.joel.lopes-da-silva.com/2010/09/07/compute-md5-or-sha-hash-of-large-file-efficiently-on-ios-and-mac-os-x/comment-page-1/#comment-18533
","32165","<objective-c><ios><security><hash><sha256>","57","0","6","2018-07-17 20:44:20","6228385","0","36","","","","2011-06-03 14:02:52",""
"6228092","How can I compute a SHA-2 (ideally SHA 256 or SHA 512) hash in iOS?","The Security services API doesn't appear to allow me to compute a hash directly. There are plenty of public domain and liberally licensed versions available, but I'd rather use a system library implementation if possible.
The data is accessible via NSData, or plain pointers.
The cryptographic strength of the hash is important to me. SHA-256 is the minimum acceptable hash size.
","+ (NSData *)sha256DataFromData:(NSData *)data {
    unsigned char result[CC_SHA256_DIGEST_LENGTH];
    CC_SHA256([data bytes], (int)[data length], result);
    return [NSData dataWithBytes:result length:CC_SHA256_DIGEST_LENGTH];
}

","32165","<objective-c><ios><security><hash><sha256>","57","0","6","2018-07-17 20:44:20","6228385","0","36","","","","2011-06-03 14:02:52",""
"6228092","How can I compute a SHA-2 (ideally SHA 256 or SHA 512) hash in iOS?","The Security services API doesn't appear to allow me to compute a hash directly. There are plenty of public domain and liberally licensed versions available, but I'd rather use a system library implementation if possible.
The data is accessible via NSData, or plain pointers.
The cryptographic strength of the hash is important to me. SHA-256 is the minimum acceptable hash size.
","I cleaned up https://stackoverflow.com/a/13199111/1254812 a bit and structured it as an NSString extension
@interface NSString (SHA2HEX)

/*
 Get the SHA2 (256 bit) digest as a hex string.
 */
@property (nonatomic, readonly) NSString* sha2hex;
@end

@implementation NSString (SHA2HEX)

- (NSString*)sha2hex
{
    NSData *data = [self dataUsingEncoding:NSUTF8StringEncoding];

    if (data.length > UINT32_MAX)
        return nil;

    uint8_t digest[CC_SHA256_DIGEST_LENGTH];
    CC_SHA256(data.bytes, (CC_LONG)data.length, digest);

    const int hexlen = CC_SHA256_DIGEST_LENGTH * 2;
    NSMutableString *hexstr = [NSMutableString stringWithCapacity:hexlen];

    for (int i = 0; i < CC_SHA256_DIGEST_LENGTH; i++) {
        [hexstr appendFormat:@""%02x"", digest[i]];
    }

    return hexstr;
}

@end

","32165","<objective-c><ios><security><hash><sha256>","57","0","6","2018-07-17 20:44:20","6228385","0","36","","","","2011-06-03 14:02:52",""
"13784434","How to use OpenSSL's SHA256 functions","I'm writing a program to get myself acquainted with OpenSSL, libncurses, and UDP networking. I decided to work with OpenSSL's SHA256 to become familiar with industry encryption standards, but I'm having issues with getting it working. I've isolated the error to the linking of OpenSSL with the compiled program. I'm working on Ubuntu 12.10, 64 bit. I have the package libssl-dev installed.
Take, for instance, the C++ main.cpp:
#include <iostream>
#include <sstream>
#include <string>
#include <iomanip>
using namespace std;

#include <openssl/sha.h>

string sha256(const string str)
{
    unsigned char hash[SHA256_DIGEST_LENGTH];
    SHA256_CTX sha256;
    SHA256_Init(&sha256);
    SHA256_Update(&sha256, str.c_str(), str.size());
    SHA256_Final(hash, &sha256);
    stringstream ss;
    for(int i = 0; i < SHA256_DIGEST_LENGTH; i++)
    {
        ss << hex << setw(2) << setfill('0') << (int)hash[i];
    }
    return ss.str();
}

int main()
{

    cout << sha256(""test"") << endl;
    cout << sha256(""test2"") << endl;

    return 0;

}

I'm using the SHA256() function found here as a wrapper for OpenSSL's SHA256 functionality.
When I attempt to compile with the following g++ arguments, I receive the following error:
millinon@myhost:~/Programming/sha256$ g++ -lssl -lcrypto -o main main.cpp
/tmp/ccYqwPUC.o: In function `sha256(std::string)':
main.cpp:(.text+0x38): undefined reference to `SHA256_Init'
main.cpp:(.text+0x71): undefined reference to `SHA256_Update'
main.cpp:(.text+0x87): undefined reference to `SHA256_Final'
collect2: error: ld returned 1 exit status

So, GCC clearly recognizes OpenSSL's defined functions and types, but ld is failing to find the function symbols referred to in sha.h.
Do I need to manually point to a specific shared object or directory?
Thanks!
","You make a very common beginners mistake... Putting the libraries you link with in the wrong place on the command line when you build.
Dependencies are reversed on the command line, so something that depends on something else should actually be put before what it depends on on the command line.
In your example, you have a source file main.cpp that depends on some set of libraries, then the source file should be before the libraries it depend on:
$ g++ -o main main.cpp -lssl -lcrypto

To be safe, always put libraries last, after any source or object files listed on the command line.
","30481","<c++><gcc><openssl><sha256>","12","27","2","2017-10-09 02:23:09","13784484","0","4","608639","","2017-10-09 02:23:09","2012-12-09 03:47:05",""
"13784434","How to use OpenSSL's SHA256 functions","I'm writing a program to get myself acquainted with OpenSSL, libncurses, and UDP networking. I decided to work with OpenSSL's SHA256 to become familiar with industry encryption standards, but I'm having issues with getting it working. I've isolated the error to the linking of OpenSSL with the compiled program. I'm working on Ubuntu 12.10, 64 bit. I have the package libssl-dev installed.
Take, for instance, the C++ main.cpp:
#include <iostream>
#include <sstream>
#include <string>
#include <iomanip>
using namespace std;

#include <openssl/sha.h>

string sha256(const string str)
{
    unsigned char hash[SHA256_DIGEST_LENGTH];
    SHA256_CTX sha256;
    SHA256_Init(&sha256);
    SHA256_Update(&sha256, str.c_str(), str.size());
    SHA256_Final(hash, &sha256);
    stringstream ss;
    for(int i = 0; i < SHA256_DIGEST_LENGTH; i++)
    {
        ss << hex << setw(2) << setfill('0') << (int)hash[i];
    }
    return ss.str();
}

int main()
{

    cout << sha256(""test"") << endl;
    cout << sha256(""test2"") << endl;

    return 0;

}

I'm using the SHA256() function found here as a wrapper for OpenSSL's SHA256 functionality.
When I attempt to compile with the following g++ arguments, I receive the following error:
millinon@myhost:~/Programming/sha256$ g++ -lssl -lcrypto -o main main.cpp
/tmp/ccYqwPUC.o: In function `sha256(std::string)':
main.cpp:(.text+0x38): undefined reference to `SHA256_Init'
main.cpp:(.text+0x71): undefined reference to `SHA256_Update'
main.cpp:(.text+0x87): undefined reference to `SHA256_Final'
collect2: error: ld returned 1 exit status

So, GCC clearly recognizes OpenSSL's defined functions and types, but ld is failing to find the function symbols referred to in sha.h.
Do I need to manually point to a specific shared object or directory?
Thanks!
","This works fine on my system, but you might try:
extern ""C"" {
#include <openssl/sha.h>
}

which tells g++ that all the stuff in openssl/sha.h is declared as ""C"" functions.
BTW, how old is your OpenSSL?
","30481","<c++><gcc><openssl><sha256>","12","-1","2","2017-10-09 02:23:09","13784484","0","4","608639","","2017-10-09 02:23:09","2012-12-09 03:47:05",""
"31586701","Generate SHA256 in c++","I need to generate SHA256 of some data. I found this example is a very good one. Now my question is Can I generate a sha256 by using my own key.
EDIT: 
First of all, sorry for wrong question. I don't mean that to change the key used to generate SHA256. I really need is that, to convert the following java code to c++
public static String calculateHMAC(String data, String key) throws Exception {
String result;
try {
    // get an hmac_sha2 key from the raw key bytes
    SecretKeySpec signingKey = new SecretKeySpec(key.getBytes(), HMAC_SHA2_ALGORITHM);

    // get an hmac_sha1 Mac instance and initialize with the signing key
    Mac sha256_HMAC = Mac.getInstance(HMAC_SHA2_ALGORITHM);
    sha256_HMAC.init(signingKey);

    // compute the hmac on input data bytes
    byte[] rawHmac = sha256_HMAC.doFinal(data.getBytes());

    // base64-encode the hmac 
    StringBuilder sb = new StringBuilder();
    char[] charArray = Base64.encode(rawHmac);
        for ( char a : charArray){
            sb.append(a);
            }
        result = sb.toString();
    }
    catch (Exception e) {
        throw new SignatureException(""Failed to generate HMAC : "" + e.getMessage());
    }
    return result;
}

","SHA-256 is a member of SHA-2 cryptographic hash functions family, which usually generates 256 bits or 32 bytes HASH Code from an input message.
It's not an encryption mechanism which implies that from the HASH Code, also known as message digest or simply the digest, you can not regenerate the message.
Hence there's need no key to use SHA-256 to generate message digest.
Moreover, hash functions considered practically impossible to invert, that is, to recreate the input data from its hash value (message digest) alone. So You can't ""decrypt"" a HASH message/message digest to its input message, means reversing is not possible for Hashing. For example,
SHA256(plainText) -> digest

then there is NO mechanism like inverseSHA256 which can do the following,
inverseSHA256(digest) -> plainText

","29124","<c++><sha256>","3","5","2","2018-11-26 03:15:57","31591130","5","4","799141","","2015-07-23 14:31:10","2015-07-23 11:58:07",""
"31586701","Generate SHA256 in c++","I need to generate SHA256 of some data. I found this example is a very good one. Now my question is Can I generate a sha256 by using my own key.
EDIT: 
First of all, sorry for wrong question. I don't mean that to change the key used to generate SHA256. I really need is that, to convert the following java code to c++
public static String calculateHMAC(String data, String key) throws Exception {
String result;
try {
    // get an hmac_sha2 key from the raw key bytes
    SecretKeySpec signingKey = new SecretKeySpec(key.getBytes(), HMAC_SHA2_ALGORITHM);

    // get an hmac_sha1 Mac instance and initialize with the signing key
    Mac sha256_HMAC = Mac.getInstance(HMAC_SHA2_ALGORITHM);
    sha256_HMAC.init(signingKey);

    // compute the hmac on input data bytes
    byte[] rawHmac = sha256_HMAC.doFinal(data.getBytes());

    // base64-encode the hmac 
    StringBuilder sb = new StringBuilder();
    char[] charArray = Base64.encode(rawHmac);
        for ( char a : charArray){
            sb.append(a);
            }
        result = sb.toString();
    }
    catch (Exception e) {
        throw new SignatureException(""Failed to generate HMAC : "" + e.getMessage());
    }
    return result;
}

","I would recommend the free Crypto++ library. Here's a sample for HMAC.
","29124","<c++><sha256>","3","2","2","2018-11-26 03:15:57","31591130","5","4","799141","","2015-07-23 14:31:10","2015-07-23 11:58:07",""
"26473076","How do I check if my SSL Certificate is SHA1 or SHA2 on the commandline","How do I check if my SSL Certificate is using SHA1 or SHA2, from the commandline?
And yes, i this is similar to this, but i need a cli-tool and i want to understand how it is done.
","after googling for quite some time i came up with the following snippet (unix):
openssl s_client -connect <host>:<port> < /dev/null 2>/dev/null | openssl x509 -text -in /dev/stdin | grep ""Signature Algorithm""

windows (thanx Nick Westgate, see below)
certutil -dump cacert.pem | find ""Algorithm""

","26005","<ssl><openssl><sha1><sha><sha256>","18","25","4","2017-01-20 09:47:56","","0","5","-1","","2017-05-23 10:29:52","2014-10-20 19:05:06",""
"26473076","How do I check if my SSL Certificate is SHA1 or SHA2 on the commandline","How do I check if my SSL Certificate is using SHA1 or SHA2, from the commandline?
And yes, i this is similar to this, but i need a cli-tool and i want to understand how it is done.
","I know the topic is old but I think
openssl x509 -in yourcert.crt -text -noout | grep ""Signature Algorithm""

would be an easier solution.
","26005","<ssl><openssl><sha1><sha><sha256>","18","17","4","2017-01-20 09:47:56","","0","5","-1","","2017-05-23 10:29:52","2014-10-20 19:05:06",""
"26473076","How do I check if my SSL Certificate is SHA1 or SHA2 on the commandline","How do I check if my SSL Certificate is using SHA1 or SHA2, from the commandline?
And yes, i this is similar to this, but i need a cli-tool and i want to understand how it is done.
","You didn't specify a platform, but in a Windows command prompt you can use:
certutil -dump cacert.pem | find ""Algorithm""

","26005","<ssl><openssl><sha1><sha><sha256>","18","3","4","2017-01-20 09:47:56","","0","5","-1","","2017-05-23 10:29:52","2014-10-20 19:05:06",""
"26473076","How do I check if my SSL Certificate is SHA1 or SHA2 on the commandline","How do I check if my SSL Certificate is using SHA1 or SHA2, from the commandline?
And yes, i this is similar to this, but i need a cli-tool and i want to understand how it is done.
","In PowerShell
PS C:\> certutil -dump cacert.pem | findstr ""Algorithm""

","26005","<ssl><openssl><sha1><sha><sha256>","18","0","4","2017-01-20 09:47:56","","0","5","-1","","2017-05-23 10:29:52","2014-10-20 19:05:06",""
"26539366","How to use sha256 hash in Python","I am trying to read in a file of passwords. Then I am trying to compute the hash for each password and compare it to a hash I already have to determine if I have discovered the password. However the error message I keep getting is ""TypeError: Unicode-objects must be encoded before hashing"". Here is my code:
from hashlib import sha256

with open('words','r') as f:
    for line in f:

        hashedWord = sha256(line.rstrip()).hexdigest()

        if hashedWord == 'ca52258a43795ab5c89513f9984b8f3d3d0aa61fb7792ecefe8d90010ee39f2':
            print(line + ""is one of the words!"")

Can anyone please help and provide an explanation?
","The error message means exactly what it says: You have a Unicode string. You can't SHA-256-hash a Unicode string, you can only hash bytes.
But why do you have a Unicode string? Because you're opening a file in text mode, which means you're implicitly asking Python to decode the bytes in that file (using your default encoding) to Unicode. If you want to get the raw bytes, you have to use binary mode.
In other words, just change this line:
with open('words','r') as f:

… to:
with open('words', 'rb') as f:


You may notice that, once you fix this, the print line raises an exception. Why? because you're trying to add a bytes to a str. You're also missing a space, and you're printing the un-stripped line. You could fix all of those by using two arguments to print (as in print(line.rstrip(), ""is one of the words"")).
But then you'll get output like b'\xc3\x85rhus' is one of the words when you wanted it to print out Århus is one of the words. That's because you now have bytes, not strings. Since Python is no longer decoding for you, you'll need to do that manually. To use the same default encoding that sometimes works when you don't specify an encoding to open, just call decode without an argument. So:
print(line.rstrip().decode(), ""is one of the words"")

","25699","<python><sha256>","15","15","1","2018-01-25 20:48:35","26539618","3","6","3163618","","2014-10-24 00:54:30","2014-10-23 23:48:34",""
"4992109","Generate SHA256 String in Objective C","
Possible Duplicate:
Sha256 in Objective-C for iPhone 

Greetings,
I'm having terrible trouble generating a SHA256 string in Objective C (probably because I'm so new to the language).
In jQuery, all I have to do is this:
var sha256String=$.sha256(""Hello"");

which produces the hash as expected.
But in Objective-C, I've tried the following to no avail:
NSString *pword=[[NSString alloc]
initWithString:login_pword.text];
unsigned char result[64];
CC_SHA256([pword UTF8String], [pword lengthOfBytesUsingEncoding:NSASCIIStringEncoding],result);
UIAlertView *msg=[[UIAlertView alloc] initWithTitle:@""Hi"" message:result delegate:self cancelButtonTitle:@""OK"" otherButtonTitles:nil];
[msg show];
[msg release];

Is there some function that I can call such as:
NSString *sha256String=[self getSHA256:pword];

This is what I'm trying to create and I'm finding it very difficult!
I hope someone can help.
Many thanks in advance,
","You will need to use the OpenSSL C functions. See for example this question on how to do that. As input string, you'd use [myString UTFString] with length [myString lengthOfBytesUsingEncoding:NSUTF8StringEncoding].
","25311","<iphone><objective-c><sha256>","12","1","3","2011-02-14 18:44:48","4992176","3","9","-1","","2017-05-23 12:34:27","2011-02-14 12:23:57","2011-02-15 09:01:10"
"4992109","Generate SHA256 String in Objective C","
Possible Duplicate:
Sha256 in Objective-C for iPhone 

Greetings,
I'm having terrible trouble generating a SHA256 string in Objective C (probably because I'm so new to the language).
In jQuery, all I have to do is this:
var sha256String=$.sha256(""Hello"");

which produces the hash as expected.
But in Objective-C, I've tried the following to no avail:
NSString *pword=[[NSString alloc]
initWithString:login_pword.text];
unsigned char result[64];
CC_SHA256([pword UTF8String], [pword lengthOfBytesUsingEncoding:NSASCIIStringEncoding],result);
UIAlertView *msg=[[UIAlertView alloc] initWithTitle:@""Hi"" message:result delegate:self cancelButtonTitle:@""OK"" otherButtonTitles:nil];
[msg show];
[msg release];

Is there some function that I can call such as:
NSString *sha256String=[self getSHA256:pword];

This is what I'm trying to create and I'm finding it very difficult!
I hope someone can help.
Many thanks in advance,
","You are passing result into the UIAlertView's init method. result is a char[], and UIAlertView expects an NSString*. You need to convert your char[] to an NSString *.
Try this:
NSString *resultString = [NSString stringWithCString:result encoding:NSASCIIStringEncoding];
UIAlertView *msg=[[UIAlertView alloc] initWithTitle:@""Hi"" message:resultString delegate:self cancelButtonTitle:@""OK"" otherButtonTitles:nil];

Also see this article on hashing on the iPhone.
","25311","<iphone><objective-c><sha256>","12","3","3","2011-02-14 18:44:48","4992176","3","9","-1","","2017-05-23 12:34:27","2011-02-14 12:23:57","2011-02-15 09:01:10"
"4992109","Generate SHA256 String in Objective C","
Possible Duplicate:
Sha256 in Objective-C for iPhone 

Greetings,
I'm having terrible trouble generating a SHA256 string in Objective C (probably because I'm so new to the language).
In jQuery, all I have to do is this:
var sha256String=$.sha256(""Hello"");

which produces the hash as expected.
But in Objective-C, I've tried the following to no avail:
NSString *pword=[[NSString alloc]
initWithString:login_pword.text];
unsigned char result[64];
CC_SHA256([pword UTF8String], [pword lengthOfBytesUsingEncoding:NSASCIIStringEncoding],result);
UIAlertView *msg=[[UIAlertView alloc] initWithTitle:@""Hi"" message:result delegate:self cancelButtonTitle:@""OK"" otherButtonTitles:nil];
[msg show];
[msg release];

Is there some function that I can call such as:
NSString *sha256String=[self getSHA256:pword];

This is what I'm trying to create and I'm finding it very difficult!
I hope someone can help.
Many thanks in advance,
","After much playing around today, I finally came up with a function to get the SHA256:
-(NSString*) sha256:(NSString *)clear{
    const char *s=[clear cStringUsingEncoding:NSASCIIStringEncoding];
    NSData *keyData=[NSData dataWithBytes:s length:strlen(s)];

    uint8_t digest[CC_SHA256_DIGEST_LENGTH]={0};
    CC_SHA256(keyData.bytes, keyData.length, digest);
    NSData *out=[NSData dataWithBytes:digest length:CC_SHA256_DIGEST_LENGTH];
    NSString *hash=[out description];
    hash = [hash stringByReplacingOccurrencesOfString:@"" "" withString:@""""];
    hash = [hash stringByReplacingOccurrencesOfString:@""<"" withString:@""""];
    hash = [hash stringByReplacingOccurrencesOfString:@"">"" withString:@""""];
    return hash;
}

This gives the same output as PHP. It can easily be converted to SHA1 - just change 'SHA256' to 'SHA1'.
Hope it helps someone.
","25311","<iphone><objective-c><sha256>","12","56","3","2011-02-14 18:44:48","4992176","3","9","-1","","2017-05-23 12:34:27","2011-02-14 12:23:57","2011-02-15 09:01:10"
"20802380","java aes 256 java.security.InvalidKeyException: Illegal key size after installation the policy","i have a problem with the encrypt of the bytes with an AES 256 key.
I already installed the policy. Here's what I've done:

download the file: http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html
I moved the files local_policy and US_export_policy to the directory /Library/Java/JavaVirtualMachines/jdk1.7.0_40.jdk/Contents/Home/jre/lib/security
i restart the mac

But still I get an error message with the following code:
KeyGenerator keyGenerator = KeyGenerator.getInstance(""AES"");
keyGenerator.init(256);
SecretKey secretKey = keyGenerator.generateKey();
Cipher decryption = Cipher.getInstance(""AES/CBC/PKCS5PADDING"");
decryption.init(Cipher.DECRYPT_MODE, secretKey, 
new IvParameterSpec(secretKey.getEncoded())); // <-- Illegal key size

My Java version:
java version ""1.7.0_40""
Java(TM) SE Runtime Environment (build 1.7.0_40-b43)
Java HotSpot(TM) 64-Bit Server VM (build 24.0-b56, mixed mode)

What i have to do, to use the 256 AES encryption? 
","Policy files should resolve the issue. Check the path environment variable to confirm that you are using the same jre which has policy files.
","25240","<java><encryption><aes><sha256>","9","4","3","2015-01-22 14:55:50","20803508","5","5","131433","","2013-12-27 14:38:07","2013-12-27 14:28:35","2016-03-21 10:31:36"
"20802380","java aes 256 java.security.InvalidKeyException: Illegal key size after installation the policy","i have a problem with the encrypt of the bytes with an AES 256 key.
I already installed the policy. Here's what I've done:

download the file: http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html
I moved the files local_policy and US_export_policy to the directory /Library/Java/JavaVirtualMachines/jdk1.7.0_40.jdk/Contents/Home/jre/lib/security
i restart the mac

But still I get an error message with the following code:
KeyGenerator keyGenerator = KeyGenerator.getInstance(""AES"");
keyGenerator.init(256);
SecretKey secretKey = keyGenerator.generateKey();
Cipher decryption = Cipher.getInstance(""AES/CBC/PKCS5PADDING"");
decryption.init(Cipher.DECRYPT_MODE, secretKey, 
new IvParameterSpec(secretKey.getEncoded())); // <-- Illegal key size

My Java version:
java version ""1.7.0_40""
Java(TM) SE Runtime Environment (build 1.7.0_40-b43)
Java HotSpot(TM) 64-Bit Server VM (build 24.0-b56, mixed mode)

What i have to do, to use the 256 AES encryption? 
","IMPORTANT: you have know you jre location. eg: in my compute have C:\Java\jre7\lib\security and C:\Java\jdk1.7.0_02\jre\lib\security, but eclipse show the jre is C:\Java\jre7\lib\security,so you must copy two file into here.
","25240","<java><encryption><aes><sha256>","9","3","3","2015-01-22 14:55:50","20803508","5","5","131433","","2013-12-27 14:38:07","2013-12-27 14:28:35","2016-03-21 10:31:36"
"20802380","java aes 256 java.security.InvalidKeyException: Illegal key size after installation the policy","i have a problem with the encrypt of the bytes with an AES 256 key.
I already installed the policy. Here's what I've done:

download the file: http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html
I moved the files local_policy and US_export_policy to the directory /Library/Java/JavaVirtualMachines/jdk1.7.0_40.jdk/Contents/Home/jre/lib/security
i restart the mac

But still I get an error message with the following code:
KeyGenerator keyGenerator = KeyGenerator.getInstance(""AES"");
keyGenerator.init(256);
SecretKey secretKey = keyGenerator.generateKey();
Cipher decryption = Cipher.getInstance(""AES/CBC/PKCS5PADDING"");
decryption.init(Cipher.DECRYPT_MODE, secretKey, 
new IvParameterSpec(secretKey.getEncoded())); // <-- Illegal key size

My Java version:
java version ""1.7.0_40""
Java(TM) SE Runtime Environment (build 1.7.0_40-b43)
Java HotSpot(TM) 64-Bit Server VM (build 24.0-b56, mixed mode)

What i have to do, to use the 256 AES encryption? 
","What I did 
   downloaded policy file from this location 
  http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html

paste in location 
jre/lib/security/
and it workes....
","25240","<java><encryption><aes><sha256>","9","1","3","2015-01-22 14:55:50","20803508","5","5","131433","","2013-12-27 14:38:07","2013-12-27 14:28:35","2016-03-21 10:31:36"
"1741545","Java: Calculate SHA-256 hash of large file efficiently","I need to calculate a SHA-256 hash of a large file (or portion of it). My implementation works fine, but its much slower than the C++'s CryptoPP calculation (25 Min. vs. 10 Min for ~30GB file). What I need is a similar execution time in C++ and Java, so the hashes are ready at almost the same time. I also tried the Bouncy Castle implementation, but it gave me the same result. Here is how I calculate the hash:
int buff = 16384;
try {
    RandomAccessFile file = new RandomAccessFile(""T:\\someLargeFile.m2v"", ""r"");

    long startTime = System.nanoTime();
    MessageDigest hashSum = MessageDigest.getInstance(""SHA-256"");

    byte[] buffer = new byte[buff];
    byte[] partialHash = null;

    long read = 0;

    // calculate the hash of the hole file for the test
    long offset = file.length();
    int unitsize;
    while (read < offset) {
        unitsize = (int) (((offset - read) >= buff) ? buff : (offset - read));
        file.read(buffer, 0, unitsize);

        hashSum.update(buffer, 0, unitsize);

        read += unitsize;
    }

    file.close();
    partialHash = new byte[hashSum.getDigestLength()];
    partialHash = hashSum.digest();

    long endTime = System.nanoTime();

    System.out.println(endTime - startTime);

} catch (FileNotFoundException e) {
    e.printStackTrace();
}

","It used to be that Java ran about 10x slower than the same C++ code.  Nowadays is closer to 2x slower.  I think what your running into is just a fundamental part of Java.  JVMs will get faster, especially as new JIT techniques are discovered, but you'll have a hard time out performing C.
Have you tried alternative JVMs and/or compilers?  I used to get better performance with JRocket, but less stability.  Ditto for using jikes over javac.  
","25014","<java><optimization><hash><performance><sha256>","13","1","7","2017-01-18 23:15:23","1742385","0","12","1093147","","2017-01-18 23:15:23","2009-11-16 11:17:02",""
"1741545","Java: Calculate SHA-256 hash of large file efficiently","I need to calculate a SHA-256 hash of a large file (or portion of it). My implementation works fine, but its much slower than the C++'s CryptoPP calculation (25 Min. vs. 10 Min for ~30GB file). What I need is a similar execution time in C++ and Java, so the hashes are ready at almost the same time. I also tried the Bouncy Castle implementation, but it gave me the same result. Here is how I calculate the hash:
int buff = 16384;
try {
    RandomAccessFile file = new RandomAccessFile(""T:\\someLargeFile.m2v"", ""r"");

    long startTime = System.nanoTime();
    MessageDigest hashSum = MessageDigest.getInstance(""SHA-256"");

    byte[] buffer = new byte[buff];
    byte[] partialHash = null;

    long read = 0;

    // calculate the hash of the hole file for the test
    long offset = file.length();
    int unitsize;
    while (read < offset) {
        unitsize = (int) (((offset - read) >= buff) ? buff : (offset - read));
        file.read(buffer, 0, unitsize);

        hashSum.update(buffer, 0, unitsize);

        read += unitsize;
    }

    file.close();
    partialHash = new byte[hashSum.getDigestLength()];
    partialHash = hashSum.digest();

    long endTime = System.nanoTime();

    System.out.println(endTime - startTime);

} catch (FileNotFoundException e) {
    e.printStackTrace();
}

","Perhaps the first thing today is work out where you are spending the most time? Can you run it through a profiler and see where the most time is being spent.
Possible improvements:

Use NIO to read the file in the fastest possible way
Update the Hash in a separate thread. This is actually rather hard to do and isn't for the faint hearted as it involves safe publishing between threads. But if your profiling shows a significant amount of time being spent in hash algorithm it may make better use of the disk.

","25014","<java><optimization><hash><performance><sha256>","13","4","7","2017-01-18 23:15:23","1742385","0","12","1093147","","2017-01-18 23:15:23","2009-11-16 11:17:02",""
"1741545","Java: Calculate SHA-256 hash of large file efficiently","I need to calculate a SHA-256 hash of a large file (or portion of it). My implementation works fine, but its much slower than the C++'s CryptoPP calculation (25 Min. vs. 10 Min for ~30GB file). What I need is a similar execution time in C++ and Java, so the hashes are ready at almost the same time. I also tried the Bouncy Castle implementation, but it gave me the same result. Here is how I calculate the hash:
int buff = 16384;
try {
    RandomAccessFile file = new RandomAccessFile(""T:\\someLargeFile.m2v"", ""r"");

    long startTime = System.nanoTime();
    MessageDigest hashSum = MessageDigest.getInstance(""SHA-256"");

    byte[] buffer = new byte[buff];
    byte[] partialHash = null;

    long read = 0;

    // calculate the hash of the hole file for the test
    long offset = file.length();
    int unitsize;
    while (read < offset) {
        unitsize = (int) (((offset - read) >= buff) ? buff : (offset - read));
        file.read(buffer, 0, unitsize);

        hashSum.update(buffer, 0, unitsize);

        read += unitsize;
    }

    file.close();
    partialHash = new byte[hashSum.getDigestLength()];
    partialHash = hashSum.digest();

    long endTime = System.nanoTime();

    System.out.println(endTime - startTime);

} catch (FileNotFoundException e) {
    e.printStackTrace();
}

","I suggest you use a profiler like JProfiler or the one integrated in Netbeans (free) to find out, where the time is actually spent and concentrate on that part.
Just a wild guess - not sure if it will help - but have you tried the Server VM? Try starting the app with java -server and see if that helps you. The server VM is more aggressive compiling Java code to native than the default client VM is.
","25014","<java><optimization><hash><performance><sha256>","13","2","7","2017-01-18 23:15:23","1742385","0","12","1093147","","2017-01-18 23:15:23","2009-11-16 11:17:02",""
"1741545","Java: Calculate SHA-256 hash of large file efficiently","I need to calculate a SHA-256 hash of a large file (or portion of it). My implementation works fine, but its much slower than the C++'s CryptoPP calculation (25 Min. vs. 10 Min for ~30GB file). What I need is a similar execution time in C++ and Java, so the hashes are ready at almost the same time. I also tried the Bouncy Castle implementation, but it gave me the same result. Here is how I calculate the hash:
int buff = 16384;
try {
    RandomAccessFile file = new RandomAccessFile(""T:\\someLargeFile.m2v"", ""r"");

    long startTime = System.nanoTime();
    MessageDigest hashSum = MessageDigest.getInstance(""SHA-256"");

    byte[] buffer = new byte[buff];
    byte[] partialHash = null;

    long read = 0;

    // calculate the hash of the hole file for the test
    long offset = file.length();
    int unitsize;
    while (read < offset) {
        unitsize = (int) (((offset - read) >= buff) ? buff : (offset - read));
        file.read(buffer, 0, unitsize);

        hashSum.update(buffer, 0, unitsize);

        read += unitsize;
    }

    file.close();
    partialHash = new byte[hashSum.getDigestLength()];
    partialHash = hashSum.digest();

    long endTime = System.nanoTime();

    System.out.println(endTime - startTime);

} catch (FileNotFoundException e) {
    e.printStackTrace();
}

","Since you apparently have a working C++ implementation which is fast, you could build a JNI bridge and use the actual C++ implementation or maybe you could try not reinventing the wheel, especially since it's a big one and use a premade library such as BouncyCastle which has been made to solve all cryptographic needs of your program.
","25014","<java><optimization><hash><performance><sha256>","13","1","7","2017-01-18 23:15:23","1742385","0","12","1093147","","2017-01-18 23:15:23","2009-11-16 11:17:02",""
"1741545","Java: Calculate SHA-256 hash of large file efficiently","I need to calculate a SHA-256 hash of a large file (or portion of it). My implementation works fine, but its much slower than the C++'s CryptoPP calculation (25 Min. vs. 10 Min for ~30GB file). What I need is a similar execution time in C++ and Java, so the hashes are ready at almost the same time. I also tried the Bouncy Castle implementation, but it gave me the same result. Here is how I calculate the hash:
int buff = 16384;
try {
    RandomAccessFile file = new RandomAccessFile(""T:\\someLargeFile.m2v"", ""r"");

    long startTime = System.nanoTime();
    MessageDigest hashSum = MessageDigest.getInstance(""SHA-256"");

    byte[] buffer = new byte[buff];
    byte[] partialHash = null;

    long read = 0;

    // calculate the hash of the hole file for the test
    long offset = file.length();
    int unitsize;
    while (read < offset) {
        unitsize = (int) (((offset - read) >= buff) ? buff : (offset - read));
        file.read(buffer, 0, unitsize);

        hashSum.update(buffer, 0, unitsize);

        read += unitsize;
    }

    file.close();
    partialHash = new byte[hashSum.getDigestLength()];
    partialHash = hashSum.digest();

    long endTime = System.nanoTime();

    System.out.println(endTime - startTime);

} catch (FileNotFoundException e) {
    e.printStackTrace();
}

","I think this difference in performance might only be platform related. Try changing the buffer size and see if there are any improvements. If not, I would go with JNI (Java Native Interface). Just call the C++ implementation from Java.
","25014","<java><optimization><hash><performance><sha256>","13","1","7","2017-01-18 23:15:23","1742385","0","12","1093147","","2017-01-18 23:15:23","2009-11-16 11:17:02",""
"1741545","Java: Calculate SHA-256 hash of large file efficiently","I need to calculate a SHA-256 hash of a large file (or portion of it). My implementation works fine, but its much slower than the C++'s CryptoPP calculation (25 Min. vs. 10 Min for ~30GB file). What I need is a similar execution time in C++ and Java, so the hashes are ready at almost the same time. I also tried the Bouncy Castle implementation, but it gave me the same result. Here is how I calculate the hash:
int buff = 16384;
try {
    RandomAccessFile file = new RandomAccessFile(""T:\\someLargeFile.m2v"", ""r"");

    long startTime = System.nanoTime();
    MessageDigest hashSum = MessageDigest.getInstance(""SHA-256"");

    byte[] buffer = new byte[buff];
    byte[] partialHash = null;

    long read = 0;

    // calculate the hash of the hole file for the test
    long offset = file.length();
    int unitsize;
    while (read < offset) {
        unitsize = (int) (((offset - read) >= buff) ? buff : (offset - read));
        file.read(buffer, 0, unitsize);

        hashSum.update(buffer, 0, unitsize);

        read += unitsize;
    }

    file.close();
    partialHash = new byte[hashSum.getDigestLength()];
    partialHash = hashSum.digest();

    long endTime = System.nanoTime();

    System.out.println(endTime - startTime);

} catch (FileNotFoundException e) {
    e.printStackTrace();
}

","My explanation may not solve your problem since it depends a lot on your actual runtime environment, but when I run your code on my system, the throughput is limited by disk I/O and not the hash calculation. The problem is not solved by switching to NIO, but is simply caused by the fact that you're reading the file in very small pieces (16kB). Increasing the buffer size (buff) on my system to 1MB instead of 16kB more than doubles the throughput, but with >50MB/s, I am still limited by disk speed and not able to fully load a single CPU core.
BTW: You can simplify your implementation a lot by wrapping a DigestInputStream around a FileInputStream, read through the file and get the calculated hash from the DigestInputStream instead of manually shuffling the data from a RandomAccessFile to the MessageDigest as in your code.

I did a few performance tests with older Java versions and there seem to be a relevant difference between Java 5 and Java 6 here. I'm not sure though if the SHA implementation is optimized or if the VM is executing the code much faster. The throughputs I get with the different Java versions (1MB buffer) are:

Sun JDK 1.5.0_15 (client): 28MB/s, limited by CPU
Sun JDK 1.5.0_15 (server): 45MB/s, limited by CPU
Sun JDK 1.6.0_16 (client): 42MB/s, limited by CPU
Sun JDK 1.6.0_16 (server): 52MB/s, limited by disk I/O (85-90% CPU load)


I was a little bit curious on the impact of the assembler part in the CryptoPP SHA implementation, as the benchmarks results indicate that the SHA-256 algorithm only requires 15.8 CPU cycles/byte on an Opteron. I was unfortunately not able to build CryptoPP with gcc on cygwin (the build succeeded, but the generated exe failed immediately), but building a performance benchmark with VS2005 (default release configuration) with and without assembler support in CryptoPP and comparing to the Java SHA implementation on an in-memory buffer, leaving out any disk I/O, I get the following results on a 2.5GHz Phenom:

Sun JDK1.6.0_13 (server): 26.2 cycles/byte
CryptoPP (C++ only): 21.8 cycles/byte
CryptoPP (assembler): 13.3 cycles/byte

Both benchmarks compute the SHA hash of a 4GB empty byte array, iterating over it in chunks of 1MB, which are passed to MessageDigest#update (Java) or CryptoPP's SHA256.Update function (C++). 
I was able to build and benchmark CryptoPP with gcc 4.4.1 (-O3) in a virtual machine running Linux and got only appr. half the throughput compared to the results from the VS exe. I am not sure how much of the difference is contributed to the virtual machine and how much is caused by VS usually producing better code than gcc, but I have no way to get any more exact results from gcc right now.
","25014","<java><optimization><hash><performance><sha256>","13","34","7","2017-01-18 23:15:23","1742385","0","12","1093147","","2017-01-18 23:15:23","2009-11-16 11:17:02",""
"1741545","Java: Calculate SHA-256 hash of large file efficiently","I need to calculate a SHA-256 hash of a large file (or portion of it). My implementation works fine, but its much slower than the C++'s CryptoPP calculation (25 Min. vs. 10 Min for ~30GB file). What I need is a similar execution time in C++ and Java, so the hashes are ready at almost the same time. I also tried the Bouncy Castle implementation, but it gave me the same result. Here is how I calculate the hash:
int buff = 16384;
try {
    RandomAccessFile file = new RandomAccessFile(""T:\\someLargeFile.m2v"", ""r"");

    long startTime = System.nanoTime();
    MessageDigest hashSum = MessageDigest.getInstance(""SHA-256"");

    byte[] buffer = new byte[buff];
    byte[] partialHash = null;

    long read = 0;

    // calculate the hash of the hole file for the test
    long offset = file.length();
    int unitsize;
    while (read < offset) {
        unitsize = (int) (((offset - read) >= buff) ? buff : (offset - read));
        file.read(buffer, 0, unitsize);

        hashSum.update(buffer, 0, unitsize);

        read += unitsize;
    }

    file.close();
    partialHash = new byte[hashSum.getDigestLength()];
    partialHash = hashSum.digest();

    long endTime = System.nanoTime();

    System.out.println(endTime - startTime);

} catch (FileNotFoundException e) {
    e.printStackTrace();
}

","The MAIN reason why your code is so slow is because you use a RandomAccessFile which always has been quite slow performance-wise. I suggest using a ""BufferedInputStream"" so that you may benefit from all the power of the OS-level caching for disk-i/o.
The code should look something like:
    public static byte [] hash(MessageDigest digest, BufferedInputStream in, int bufferSize) throws IOException {
    byte [] buffer = new byte[bufferSize];
    int sizeRead = -1;
    while ((sizeRead = in.read(buffer)) != -1) {
        digest.update(buffer, 0, sizeRead);
    }
    in.close();

    byte [] hash = null;
    hash = new byte[digest.getDigestLength()];
    hash = digest.digest();
    return hash;
}

","25014","<java><optimization><hash><performance><sha256>","13","0","7","2017-01-18 23:15:23","1742385","0","12","1093147","","2017-01-18 23:15:23","2009-11-16 11:17:02",""
"12528667","XML Digital Signature Java","i need to digital sign my XML messages in JAVA:
The resulting XML signature should have the following format:
<Signature xmlns=""http://www.w3.org/2000/09/xmldsig#"">
<SignedInfo>
<CanonicalizationMethod Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#"" />
<SignatureMethod Algorithm=""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"" />
<Reference URI="""">
<Transforms>
<Transform Algorithm=""http://www.w3.org/2000/09/xmldsig#enveloped-signature""/>
</Transforms>
<DigestMethod Algorithm=""http://www.w3.org/2001/04/xmlenc#sha256"" />
<DigestValue>DsP5NLca+plhp9tZvGwykfb2whQYt3CQ5sbsVd9Q9aE=</DigestValue>
</Reference>
</SignedInfo>
<SignatureValue>
LrfE0po3YPvVxB/m77iBWWiR07Ghiuhuj7tO2C2LKqZK2cLrAiidt+3tjbJ3m16quCFxfh7bmjRtJsGi7a3HKtK
qY4auqrjNB62AtYrxvm+7Qd/cRacom4e3M9uF9JD1zTfoGun9w4WDfDrDaoZ+ZwUgNtf6sTYO5Ctcj5sYcD0=
</SignatureValue>
<KeyInfo>
<KeyName>7D665C81ABBE1A7D0E525BFC171F04D276F07BF2</KeyName>
</KeyInfo>
</Signature>

Can anyone provide some help with code ??
Edit:
i came up with this code :
private static Document sign(Document doc) throws InstantiationException, IllegalAccessException, ClassNotFoundException,
            NoSuchAlgorithmException, InvalidAlgorithmParameterException, KeyException, MarshalException, XMLSignatureException,
            FileNotFoundException, TransformerException {

        String providerName = System.getProperty(""jsr105Provider"", ""org.jcp.xml.dsig.internal.dom.XMLDSigRI"");

        XMLSignatureFactory fac = XMLSignatureFactory.getInstance(""DOM"", (Provider) Class.forName(providerName).newInstance());

        Reference ref = fac.newReference("""", fac.newDigestMethod(DigestMethod.SHA256, null));

        // Create the SignedInfo
        SignedInfo si = fac.newSignedInfo(
                fac.newCanonicalizationMethod(CanonicalizationMethod.EXCLUSIVE, (C14NMethodParameterSpec) null),
                fac.newSignatureMethod(SignatureMethod.RSA_SHA1, null), Collections.singletonList(ref));

        KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
        kpg.initialize(512);
        KeyPair kp = kpg.generateKeyPair();

        KeyInfoFactory kif = fac.getKeyInfoFactory();
        KeyValue kv = kif.newKeyValue(kp.getPublic());

        KeyInfo ki = kif.newKeyInfo(Collections.singletonList(kv));

        DOMSignContext dsc = new DOMSignContext(kp.getPrivate(), doc.getDocumentElement());

        XMLSignature signature = fac.newXMLSignature(si, ki);
        signature.sign(dsc);

        TransformerFactory tf = TransformerFactory.newInstance();
        Transformer trans = tf.newTransformer();
        trans.transform(new DOMSource(doc), new StreamResult(new FileOutputStream(""mySignedFile"")));

        return doc;
    }

but the Problem is i am getting :
<SignatureMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#rsa-sha1""/>

and not :
<SignatureMethod Algorithm=""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"" />

","These are standard XML-Signatures. See the W3 Documentation on ""XML-Signature Syntax and Processing"" for the specification how this can be done. A quick search on google lead to this howto written by Oracle on the integration of XML Signatures in Java: XML Digital Signature API. If you have any further problems, please shows us what you have tried.
","22920","<java><xml><digital-signature><sha256>","9","0","3","2013-11-24 23:19:06","12582135","0","5","1482700","","2012-09-21 12:06:50","2012-09-21 10:20:42",""
"12528667","XML Digital Signature Java","i need to digital sign my XML messages in JAVA:
The resulting XML signature should have the following format:
<Signature xmlns=""http://www.w3.org/2000/09/xmldsig#"">
<SignedInfo>
<CanonicalizationMethod Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#"" />
<SignatureMethod Algorithm=""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"" />
<Reference URI="""">
<Transforms>
<Transform Algorithm=""http://www.w3.org/2000/09/xmldsig#enveloped-signature""/>
</Transforms>
<DigestMethod Algorithm=""http://www.w3.org/2001/04/xmlenc#sha256"" />
<DigestValue>DsP5NLca+plhp9tZvGwykfb2whQYt3CQ5sbsVd9Q9aE=</DigestValue>
</Reference>
</SignedInfo>
<SignatureValue>
LrfE0po3YPvVxB/m77iBWWiR07Ghiuhuj7tO2C2LKqZK2cLrAiidt+3tjbJ3m16quCFxfh7bmjRtJsGi7a3HKtK
qY4auqrjNB62AtYrxvm+7Qd/cRacom4e3M9uF9JD1zTfoGun9w4WDfDrDaoZ+ZwUgNtf6sTYO5Ctcj5sYcD0=
</SignatureValue>
<KeyInfo>
<KeyName>7D665C81ABBE1A7D0E525BFC171F04D276F07BF2</KeyName>
</KeyInfo>
</Signature>

Can anyone provide some help with code ??
Edit:
i came up with this code :
private static Document sign(Document doc) throws InstantiationException, IllegalAccessException, ClassNotFoundException,
            NoSuchAlgorithmException, InvalidAlgorithmParameterException, KeyException, MarshalException, XMLSignatureException,
            FileNotFoundException, TransformerException {

        String providerName = System.getProperty(""jsr105Provider"", ""org.jcp.xml.dsig.internal.dom.XMLDSigRI"");

        XMLSignatureFactory fac = XMLSignatureFactory.getInstance(""DOM"", (Provider) Class.forName(providerName).newInstance());

        Reference ref = fac.newReference("""", fac.newDigestMethod(DigestMethod.SHA256, null));

        // Create the SignedInfo
        SignedInfo si = fac.newSignedInfo(
                fac.newCanonicalizationMethod(CanonicalizationMethod.EXCLUSIVE, (C14NMethodParameterSpec) null),
                fac.newSignatureMethod(SignatureMethod.RSA_SHA1, null), Collections.singletonList(ref));

        KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
        kpg.initialize(512);
        KeyPair kp = kpg.generateKeyPair();

        KeyInfoFactory kif = fac.getKeyInfoFactory();
        KeyValue kv = kif.newKeyValue(kp.getPublic());

        KeyInfo ki = kif.newKeyInfo(Collections.singletonList(kv));

        DOMSignContext dsc = new DOMSignContext(kp.getPrivate(), doc.getDocumentElement());

        XMLSignature signature = fac.newXMLSignature(si, ki);
        signature.sign(dsc);

        TransformerFactory tf = TransformerFactory.newInstance();
        Transformer trans = tf.newTransformer();
        trans.transform(new DOMSource(doc), new StreamResult(new FileOutputStream(""mySignedFile"")));

        return doc;
    }

but the Problem is i am getting :
<SignatureMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#rsa-sha1""/>

and not :
<SignatureMethod Algorithm=""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"" />

","Here is the solution:
i find it on this link
http://mail-archives.apache.org/mod_mbox/santuario-dev/200907.mbox/%3C4A704241.9060806@sun.com%3E
the problem was RSA-SHA256 Algorithm :
here is the resulting code :
private static Document sign(Document doc) throws InstantiationException, IllegalAccessException, ClassNotFoundException,
            NoSuchAlgorithmException, InvalidAlgorithmParameterException, KeyException, MarshalException, XMLSignatureException,
            FileNotFoundException, TransformerException {

        String providerName = System.getProperty(""jsr105Provider"", ""org.jcp.xml.dsig.internal.dom.XMLDSigRI"");

        XMLSignatureFactory fac = XMLSignatureFactory.getInstance(""DOM"", (Provider) Class.forName(providerName).newInstance());

        DigestMethod digestMethod = fac.newDigestMethod(DigestMethod.SHA256, null);
        Transform transform = fac.newTransform(ENVELOPED, (TransformParameterSpec) null);
        Reference reference = fac.newReference("""", digestMethod, singletonList(transform), null, null);
        SignatureMethod signatureMethod = fac.newSignatureMethod(""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"", null);
        CanonicalizationMethod canonicalizationMethod = fac.newCanonicalizationMethod(EXCLUSIVE, (C14NMethodParameterSpec) null);

        // Create the SignedInfo
        SignedInfo si = fac.newSignedInfo(canonicalizationMethod, signatureMethod, singletonList(reference));


        KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
        kpg.initialize(2048);

        KeyPair kp = kpg.generateKeyPair();

        KeyInfoFactory kif = fac.getKeyInfoFactory();
        KeyValue kv = kif.newKeyValue(kp.getPublic());

        // Create a KeyInfo and add the KeyValue to it
        KeyInfo ki = kif.newKeyInfo(Collections.singletonList(kv));
        DOMSignContext dsc = new DOMSignContext(kp.getPrivate(), doc.getDocumentElement());

        XMLSignature signature = fac.newXMLSignature(si, ki);
        signature.sign(dsc);

        TransformerFactory tf = TransformerFactory.newInstance();
        Transformer trans = tf.newTransformer();

        // output the resulting document
        OutputStream os;

        os = new FileOutputStream(""xmlOut.xml"");

        trans.transform(new DOMSource(doc), new StreamResult(os));
        return doc;

    }

","22920","<java><xml><digital-signature><sha256>","9","6","3","2013-11-24 23:19:06","12582135","0","5","1482700","","2012-09-21 12:06:50","2012-09-21 10:20:42",""
"12528667","XML Digital Signature Java","i need to digital sign my XML messages in JAVA:
The resulting XML signature should have the following format:
<Signature xmlns=""http://www.w3.org/2000/09/xmldsig#"">
<SignedInfo>
<CanonicalizationMethod Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#"" />
<SignatureMethod Algorithm=""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"" />
<Reference URI="""">
<Transforms>
<Transform Algorithm=""http://www.w3.org/2000/09/xmldsig#enveloped-signature""/>
</Transforms>
<DigestMethod Algorithm=""http://www.w3.org/2001/04/xmlenc#sha256"" />
<DigestValue>DsP5NLca+plhp9tZvGwykfb2whQYt3CQ5sbsVd9Q9aE=</DigestValue>
</Reference>
</SignedInfo>
<SignatureValue>
LrfE0po3YPvVxB/m77iBWWiR07Ghiuhuj7tO2C2LKqZK2cLrAiidt+3tjbJ3m16quCFxfh7bmjRtJsGi7a3HKtK
qY4auqrjNB62AtYrxvm+7Qd/cRacom4e3M9uF9JD1zTfoGun9w4WDfDrDaoZ+ZwUgNtf6sTYO5Ctcj5sYcD0=
</SignatureValue>
<KeyInfo>
<KeyName>7D665C81ABBE1A7D0E525BFC171F04D276F07BF2</KeyName>
</KeyInfo>
</Signature>

Can anyone provide some help with code ??
Edit:
i came up with this code :
private static Document sign(Document doc) throws InstantiationException, IllegalAccessException, ClassNotFoundException,
            NoSuchAlgorithmException, InvalidAlgorithmParameterException, KeyException, MarshalException, XMLSignatureException,
            FileNotFoundException, TransformerException {

        String providerName = System.getProperty(""jsr105Provider"", ""org.jcp.xml.dsig.internal.dom.XMLDSigRI"");

        XMLSignatureFactory fac = XMLSignatureFactory.getInstance(""DOM"", (Provider) Class.forName(providerName).newInstance());

        Reference ref = fac.newReference("""", fac.newDigestMethod(DigestMethod.SHA256, null));

        // Create the SignedInfo
        SignedInfo si = fac.newSignedInfo(
                fac.newCanonicalizationMethod(CanonicalizationMethod.EXCLUSIVE, (C14NMethodParameterSpec) null),
                fac.newSignatureMethod(SignatureMethod.RSA_SHA1, null), Collections.singletonList(ref));

        KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
        kpg.initialize(512);
        KeyPair kp = kpg.generateKeyPair();

        KeyInfoFactory kif = fac.getKeyInfoFactory();
        KeyValue kv = kif.newKeyValue(kp.getPublic());

        KeyInfo ki = kif.newKeyInfo(Collections.singletonList(kv));

        DOMSignContext dsc = new DOMSignContext(kp.getPrivate(), doc.getDocumentElement());

        XMLSignature signature = fac.newXMLSignature(si, ki);
        signature.sign(dsc);

        TransformerFactory tf = TransformerFactory.newInstance();
        Transformer trans = tf.newTransformer();
        trans.transform(new DOMSource(doc), new StreamResult(new FileOutputStream(""mySignedFile"")));

        return doc;
    }

but the Problem is i am getting :
<SignatureMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#rsa-sha1""/>

and not :
<SignatureMethod Algorithm=""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"" />

","You got <SignatureMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#rsa-sha1""/>, because that's what you asked for: fac.newSignatureMethod(SignatureMethod.RSA_SHA1, null).
As you figured out and https://blogs.oracle.com/mullan/entry/using_stronger_xml_signature_algorithms states, fac.newSignatureMethod(""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"", (SignatureMethodParameterSpec) null) will get you <SignatureMethod Algorithm=""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"" />.
","22920","<java><xml><digital-signature><sha256>","9","3","3","2013-11-24 23:19:06","12582135","0","5","1482700","","2012-09-21 12:06:50","2012-09-21 10:20:42",""
"5930056","Generating a SHA256 hash with Crypto++, using a string as input and output?","I need an example of how to use Crypto++ to generate a SHA256 hash from a std::string and output a std::string. I can't seem to figure it out. Everything I've tried gives me invalid output.
Here's the new code after interjay's answer:
string SHA256(string data)
{
    byte const* pbData = (byte*) data.data();
    unsigned int nDataLen = data.size();
    byte abDigest[CryptoPP::SHA256::DIGESTSIZE];

    CryptoPP::SHA256().CalculateDigest(abDigest, pbData, nDataLen);

    return string((char*)abDigest);
}

The output for SHA256(""A""); is

How can I turn this into a readable format?
Thanks to interjay's answer I was able to generate the final hash.
","This line will give the wrong results:
unsigned int nDataLen = sizeof(pbData);

It will always give you the size of a pointer. What you want instead is data.size().
Also, you don't need this part:
if(!CryptoPP::SHA256().VerifyDigest(abDigest, pbData, nDataLen))
{
    return SHA256(data);
}

It should always verify correctly, since you just calculated the digest based on the same data. And if it didn't, you'd go into infinite recursion.
To get readable output, you can convert it to hex. Here's an example for MD5 from the Crypto++ Wiki, it should work for you if you replace MD5 with SHA256:
CryptoPP::MD5 hash;
byte digest[ CryptoPP::MD5::DIGESTSIZE ];
std::string message = ""abcdefghijklmnopqrstuvwxyz"";

hash.CalculateDigest( digest, (byte*) message.c_str(), message.length() );

CryptoPP::HexEncoder encoder;
std::string output;
encoder.Attach( new CryptoPP::StringSink( output ) );
encoder.Put( digest, sizeof(digest) );
encoder.MessageEnd();

std::cout << output << std::endl;  

","22758","<c++><hash><stdstring><sha256><crypto++>","19","16","3","2018-02-23 06:27:01","5930199","5","8","608639","","2017-05-17 17:48:25","2011-05-08 20:14:47",""
"5930056","Generating a SHA256 hash with Crypto++, using a string as input and output?","I need an example of how to use Crypto++ to generate a SHA256 hash from a std::string and output a std::string. I can't seem to figure it out. Everything I've tried gives me invalid output.
Here's the new code after interjay's answer:
string SHA256(string data)
{
    byte const* pbData = (byte*) data.data();
    unsigned int nDataLen = data.size();
    byte abDigest[CryptoPP::SHA256::DIGESTSIZE];

    CryptoPP::SHA256().CalculateDigest(abDigest, pbData, nDataLen);

    return string((char*)abDigest);
}

The output for SHA256(""A""); is

How can I turn this into a readable format?
Thanks to interjay's answer I was able to generate the final hash.
","This outputs a base64 string using the CryptoPP::Base64Encoder:
#include ""sha.h""
#include ""filters.h""
#include ""base64.h""

std::string SHA256HashString(std::string aString){
    std::string digest;
    CryptoPP::SHA256 hash;

    CryptoPP::StringSource foo(aString, true,
    new CryptoPP::HashFilter(hash,
      new CryptoPP::Base64Encoder (
         new CryptoPP::StringSink(digest))));

    return digest;
}

","22758","<c++><hash><stdstring><sha256><crypto++>","19","17","3","2018-02-23 06:27:01","5930199","5","8","608639","","2017-05-17 17:48:25","2011-05-08 20:14:47",""
"5930056","Generating a SHA256 hash with Crypto++, using a string as input and output?","I need an example of how to use Crypto++ to generate a SHA256 hash from a std::string and output a std::string. I can't seem to figure it out. Everything I've tried gives me invalid output.
Here's the new code after interjay's answer:
string SHA256(string data)
{
    byte const* pbData = (byte*) data.data();
    unsigned int nDataLen = data.size();
    byte abDigest[CryptoPP::SHA256::DIGESTSIZE];

    CryptoPP::SHA256().CalculateDigest(abDigest, pbData, nDataLen);

    return string((char*)abDigest);
}

The output for SHA256(""A""); is

How can I turn this into a readable format?
Thanks to interjay's answer I was able to generate the final hash.
","Your code will expect a null-terminated string from the buffer you supply to the string constructor! Which means the result will almost certainly be wrong.
To enforce the digest size and, use the following instead:
return std::string((char*)abDigest, CryptoPP::SHA256::DIGESTSIZE);
Also with respect to printing it the following correctly produces the test vector BA7816BF8F01CFEA414140DE5DAE2223B00361A396177A9CB410FF61F20015AD for the string ""abc""
std::string string_to_hex(const std::string& input)
{
  static const char* const lut = ""0123456789ABCDEF"";
  size_t len = input.length();

  std::string output;
  output.reserve(2 * len);
  for (size_t i = 0; i < len; ++i)
  {
    const unsigned char c = input[i];
    output.push_back(lut[c >> 4]);
    output.push_back(lut[c & 15]);
  }
  return output;
}

std::string SHA256(std::string data)
{
  CryptoPP::byte const* pbData = (CryptoPP::byte*)data.data();
  unsigned int nDataLen = data.length();
  CryptoPP::byte abDigest[CryptoPP::SHA256::DIGESTSIZE];

  CryptoPP::SHA256().CalculateDigest(abDigest, pbData, nDataLen);

  // return string((char*)abDigest);  -- BAD!!!
  return std::string((char*)abDigest, CryptoPP::SHA256::DIGESTSIZE);
}

void test_cryptopp() {
  std::cout << string_to_hex(SHA256(""abc"")) << std::endl;
}

","22758","<c++><hash><stdstring><sha256><crypto++>","19","0","3","2018-02-23 06:27:01","5930199","5","8","608639","","2017-05-17 17:48:25","2011-05-08 20:14:47",""
"2954784","SHA256 in T-sql stored procedure","Is it possible to generate a SHA-256 hash of a string from a stored procedure in Sql Server 2008?
For deployment reasons, I'd prefer it in TSQL.
","Update: SQL Server 2012 HASHBYTES() now supports SHA-256 and SHA-512 out of the box.

HASHBYTES ( '<algorithm>', { @input | 'input' } )

<algorithm>::= MD2 | MD4 | MD5 | SHA | SHA1 | SHA2_256 | SHA2_512


Sure. You can do it in TSQL, but it will be much easier to implement it as a CLR Stored procedure. 
Here's an actual example, that simply uses the .NET Framework types: Let's Hash a BLOB 
","22732","<sql-server-2008><sha256>","11","22","3","2018-04-26 05:53:17","2954804","0","3","46255","","2010-06-02 05:15:48","2010-06-02 03:21:33",""
"2954784","SHA256 in T-sql stored procedure","Is it possible to generate a SHA-256 hash of a string from a stored procedure in Sql Server 2008?
For deployment reasons, I'd prefer it in TSQL.
","Does it HAVE to be SHA-256.  There is a SQL HASHBYTES() function that can do SHA, SHA1, MD5 etc.
(Of course it depends on if you just want a hash representation of a value, or to securely store valuable data.)
","22732","<sql-server-2008><sha256>","11","0","3","2018-04-26 05:53:17","2954804","0","3","46255","","2010-06-02 05:15:48","2010-06-02 03:21:33",""
"2954784","SHA256 in T-sql stored procedure","Is it possible to generate a SHA-256 hash of a string from a stored procedure in Sql Server 2008?
For deployment reasons, I'd prefer it in TSQL.
","SHA256, SHA512 in SQL SERVER 2008 OR SQL SERVER 2005!
You can do if you use the fnEnCryptSHA.dll!!
USE [master] GO
EXEC sp_configure 'clr enabled', 1 GO RECONFIGURE GO

CREATE ASSEMBLY InnoDll FROM 'C:\sqltip\fnEnCryptSHA.dll' WITH PERMISSION_SET= SAFE GO

CREATE FUNCTION dbo.fnGetStringToSha256 (@Str nvarchar(1000)) RETURNS varbinary(8000) AS EXTERNAL NAME InnoDll.fnEnCryptSHA.GetStringToSha256 GO

CREATE FUNCTION dbo.fnGetBinaryToSha256 (@Str varbinary(8000)) RETURNS varbinary(8000) AS EXTERNAL NAME InnoDll.fnEnCryptSHA.GetBinaryToSha256 GO

SELECT dbo.fnGetStringToSha256('abc')

SELECT dbo.fnGetBinaryToSha256(0x9F04F41A848514162050E3D68C1A7ABB441DC2B5)

","22732","<sql-server-2008><sha256>","11","4","3","2018-04-26 05:53:17","2954804","0","3","46255","","2010-06-02 05:15:48","2010-06-02 03:21:33",""
"11415055","How to use HMAC SHA256?","As per the various docs that I have read for using HMAC SHA256, I have understood that:
H (K XOR opad, H (K XOR ipad, text)) where H in my case is SHA256.
But, SHA256 input has only one parameter i.e a Message.
Whereas H(K,text) has two inputs.
So how to calculate H(k,text)?
Should I first encode text with k and then use H(encoded_text), where encoded_text will be used as a message?
Thank You
","
H() is your cryptographic hash function, in this case SHA256() but
could also be MD5 or whatever; 
K is your predifined key
Text is the message to be authenticated
opad be the outer padding (0x5c5c5c…5c5c, one-block-long hexadecimal
constant)
ipad be the inner padding  (0x363636…3636, one-block-long hexadecimal
constant)
Then HMAC(K,m)  is mathematically defined by 

HMAC(K,m) = H((K ⊕ opad)    ∥ H((K ⊕ ipad)    ∥ m)).

blocksized is determined by your hash function (MD5 would be 64
bytes)
o_key_pad = [opad * blocksize] ⊕ key
i_key_pad = [ipad * blocksize] ⊕ key

Your result would be:
H(o_key_pad || H(i_key_pad || TEXT))

You can find a good read here:
http://timdinh.nl/index.php/hmac/
With also the following pseudocode which almost looks like mine :
function hmac (key, message)
    opad = [0x5c * blocksize] // Where blocksize is that of the underlying hash function
    ipad = [0x36 * blocksize]

    if (length(key) > blocksize) then
        key = hash(key) // Where 'hash' is the underlying hash function
    end if

    for i from 0 to length(key) - 1 step 1
        ipad[i] = ipad[i] XOR key[i]
        opad[i] = opad[i] XOR key[i]
    end for

    return hash(opad || hash(ipad || message)) // Where || is concatenation
end function

","21556","<sha256><hmac>","9","14","1","2016-11-03 15:27:46","11415686","2","4","","","","2012-07-10 14:03:50",""
"7321694","SHA-256 implementation in Python","I'm looking for an implementation of the SHA-256 hash function written in Python. I want to use it to get a better understanding of how the SHA-256 function works, and I think Python is the ideal language for this. Pseudo-code has the limitation that I can't run/test it, to see what my modifications of the code do to the output.
","Translating http://en.wikipedia.org/wiki/SHA-2#SHA-256_.28a_SHA-2_variant.29_pseudocode to Python should be straight forward.
","20387","<python><sha256>","20","-1","4","2019-04-25 21:47:28","7323113","1","6","","","","2011-09-06 14:40:03",""
"7321694","SHA-256 implementation in Python","I'm looking for an implementation of the SHA-256 hash function written in Python. I want to use it to get a better understanding of how the SHA-256 function works, and I think Python is the ideal language for this. Pseudo-code has the limitation that I can't run/test it, to see what my modifications of the code do to the output.
","PyPy's source contains a pure-python implementation of SHA-256 here. Poking around in that directory, you'll probably also find pure-python implementations of other standard hashes.
","20387","<python><sha256>","20","22","4","2019-04-25 21:47:28","7323113","1","6","","","","2011-09-06 14:40:03",""
"7321694","SHA-256 implementation in Python","I'm looking for an implementation of the SHA-256 hash function written in Python. I want to use it to get a better understanding of how the SHA-256 function works, and I think Python is the ideal language for this. Pseudo-code has the limitation that I can't run/test it, to see what my modifications of the code do to the output.
","initial_hash_values=[
'6a09e667','bb67ae85','3c6ef372','a54ff53a',
'510e527f','9b05688c','1f83d9ab','5be0cd19'
]

sha_256_constants=[
'428a2f98','71374491','b5c0fbcf','e9b5dba5',
'3956c25b','59f111f1','923f82a4','ab1c5ed5',
'd807aa98','12835b01','243185be','550c7dc3',
'72be5d74','80deb1fe','9bdc06a7','c19bf174',
'e49b69c1','efbe4786','0fc19dc6','240ca1cc',
'2de92c6f','4a7484aa','5cb0a9dc','76f988da',
'983e5152','a831c66d','b00327c8','bf597fc7',
'c6e00bf3','d5a79147','06ca6351','14292967',
'27b70a85','2e1b2138','4d2c6dfc','53380d13',
'650a7354','766a0abb','81c2c92e','92722c85',
'a2bfe8a1','a81a664b','c24b8b70','c76c51a3',
'd192e819','d6990624','f40e3585','106aa070',
'19a4c116','1e376c08','2748774c','34b0bcb5',
'391c0cb3','4ed8aa4a','5b9cca4f','682e6ff3',
'748f82ee','78a5636f','84c87814','8cc70208',
'90befffa','a4506ceb','bef9a3f7','c67178f2'
]

def bin_return(dec):
    return(str(format(dec,'b')))

def bin_8bit(dec):
    return(str(format(dec,'08b')))

def bin_32bit(dec):
    return(str(format(dec,'032b')))

def bin_64bit(dec):
    return(str(format(dec,'064b')))

def hex_return(dec):
    return(str(format(dec,'x')))

def dec_return_bin(bin_string):
    return(int(bin_string,2))

def dec_return_hex(hex_string):
    return(int(hex_string,16))

def L_P(SET,n):
    to_return=[]
    j=0
    k=n
    while k<len(SET)+1:
        to_return.append(SET[j:k])
        j=k
        k+=n 
    return(to_return)

def s_l(bit_string):
    bit_list=[]
    for i in range(len(bit_string)):
        bit_list.append(bit_string[i])
    return(bit_list)

def l_s(bit_list):
    bit_string=''
    for i in range(len(bit_list)):
        bit_string+=bit_list[i]
    return(bit_string)

def rotate_right(bit_string,n):
    bit_list = s_l(bit_string)
    count=0
    while count <= n-1:
        list_main=list(bit_list)
        var_0=list_main.pop(-1)
        list_main=list([var_0]+list_main)
        bit_list=list(list_main)
        count+=1
    return(l_s(list_main))

def shift_right(bit_string,n):
    bit_list=s_l(bit_string)
    count=0
    while count <= n-1:
        bit_list.pop(-1)
        count+=1
    front_append=['0']*n
    return(l_s(front_append+bit_list))

def mod_32_addition(input_set):
    value=0
    for i in range(len(input_set)):
        value+=input_set[i]
    mod_32 = 4294967296
    return(value%mod_32)

def xor_2str(bit_string_1,bit_string_2):
    xor_list=[]
    for i in range(len(bit_string_1)):
        if bit_string_1[i]=='0' and bit_string_2[i]=='0':
            xor_list.append('0')
        if bit_string_1[i]=='1' and bit_string_2[i]=='1':
            xor_list.append('0')
        if bit_string_1[i]=='0' and bit_string_2[i]=='1':
            xor_list.append('1')
        if bit_string_1[i]=='1' and bit_string_2[i]=='0':
            xor_list.append('1')
    return(l_s(xor_list))

def and_2str(bit_string_1,bit_string_2):
    and_list=[]
    for i in range(len(bit_string_1)):
        if bit_string_1[i]=='1' and bit_string_2[i]=='1':
            and_list.append('1')
        else:
            and_list.append('0')

    return(l_s(and_list))

def or_2str(bit_string_1,bit_string_2):
    or_list=[]
    for i in range(len(bit_string_1)):
        if bit_string_1[i]=='0' and bit_string_2[i]=='0':
            or_list.append('0')
        else:
            or_list.append('1')
    return(l_s(or_list))

def not_str(bit_string):
    not_list=[]
    for i in range(len(bit_string)):
        if bit_string[i]=='0':
            not_list.append('1')
        else:
            not_list.append('0')
    return(l_s(not_list))

'''
SHA-256 Specific Functions:
'''

def Ch(x,y,z):
    return(xor_2str(and_2str(x,y),and_2str(not_str(x),z)))

def Maj(x,y,z):
    return(xor_2str(xor_2str(and_2str(x,y),and_2str(x,z)),and_2str(y,z)))

def e_0(x):
    return(xor_2str(xor_2str(rotate_right(x,2),rotate_right(x,13)),rotate_right(x,22)))

def e_1(x):
    return(xor_2str(xor_2str(rotate_right(x,6),rotate_right(x,11)),rotate_right(x,25)))

def s_0(x):
    return(xor_2str(xor_2str(rotate_right(x,7),rotate_right(x,18)),shift_right(x,3)))

def s_1(x):
    return(xor_2str(xor_2str(rotate_right(x,17),rotate_right(x,19)),shift_right(x,10)))

def message_pad(bit_list):
    pad_one = bit_list + '1'
    pad_len = len(pad_one)
    k=0
    while ((pad_len+k)-448)%512 != 0:
        k+=1
    back_append_0 = '0'*k
    back_append_1 = bin_64bit(len(bit_list))
    return(pad_one+back_append_0+back_append_1)

def message_bit_return(string_input):
    bit_list=[]
    for i in range(len(string_input)):
        bit_list.append(bin_8bit(ord(string_input[i])))
    return(l_s(bit_list))

def message_pre_pro(input_string):
    bit_main = message_bit_return(input_string)
    return(message_pad(bit_main))

def message_parsing(input_string):
    return(L_P(message_pre_pro(input_string),32))

def message_schedule(index,w_t):
    new_word = bin_32bit(mod_32_addition([int(s_1(w_t[index-2]),2),int(w_t[index-7],2),int(s_0(w_t[index-15]),2),int(w_t[index-16],2)]))
    return(new_word)

'''
This example of SHA_256 works for an input string <56 characters.
'''

def sha_256(input_string):
    w_t=message_parsing(input_string)
    a=bin_32bit(dec_return_hex(initial_hash_values[0]))
    b=bin_32bit(dec_return_hex(initial_hash_values[1]))
    c=bin_32bit(dec_return_hex(initial_hash_values[2]))
    d=bin_32bit(dec_return_hex(initial_hash_values[3]))
    e=bin_32bit(dec_return_hex(initial_hash_values[4]))
    f=bin_32bit(dec_return_hex(initial_hash_values[5]))
    g=bin_32bit(dec_return_hex(initial_hash_values[6]))
    h=bin_32bit(dec_return_hex(initial_hash_values[7]))
    for i in range(0,64):
        if i <= 15: 
            t_1=mod_32_addition([int(h,2),int(e_1(e),2),int(Ch(e,f,g),2),int(sha_256_constants[i],16),int(w_t[i],2)])
            t_2=mod_32_addition([int(e_0(a),2),int(Maj(a,b,c),2)])
            h=g
            g=f
            f=e
            e=mod_32_addition([int(d,2),t_1])
            d=c
            c=b
            b=a 
            a=mod_32_addition([t_1,t_2])
            a=bin_32bit(a)
            e=bin_32bit(e)
        if i > 15:
            w_t.append(message_schedule(i,w_t))
            t_1=mod_32_addition([int(h,2),int(e_1(e),2),int(Ch(e,f,g),2),int(sha_256_constants[i],16),int(w_t[i],2)])
            t_2=mod_32_addition([int(e_0(a),2),int(Maj(a,b,c),2)])
            h=g
            g=f
            f=e
            e=mod_32_addition([int(d,2),t_1])
            d=c
            c=b
            b=a 
            a=mod_32_addition([t_1,t_2])
            a=bin_32bit(a)
            e=bin_32bit(e)
    hash_0 = mod_32_addition([dec_return_hex(initial_hash_values[0]),int(a,2)])
    hash_1 = mod_32_addition([dec_return_hex(initial_hash_values[1]),int(b,2)])
    hash_2 = mod_32_addition([dec_return_hex(initial_hash_values[2]),int(c,2)])
    hash_3 = mod_32_addition([dec_return_hex(initial_hash_values[3]),int(d,2)])
    hash_4 = mod_32_addition([dec_return_hex(initial_hash_values[4]),int(e,2)])
    hash_5 = mod_32_addition([dec_return_hex(initial_hash_values[5]),int(f,2)])
    hash_6 = mod_32_addition([dec_return_hex(initial_hash_values[6]),int(g,2)])
    hash_7 = mod_32_addition([dec_return_hex(initial_hash_values[7]),int(h,2)])
    final_hash = (hex_return(hash_0),
                  hex_return(hash_1),
                  hex_return(hash_2),
                  hex_return(hash_3),
                  hex_return(hash_4),
                  hex_return(hash_5),
                  hex_return(hash_6),
                  hex_return(hash_7))
    return(final_hash)

","20387","<python><sha256>","20","2","4","2019-04-25 21:47:28","7323113","1","6","","","","2011-09-06 14:40:03",""
"7321694","SHA-256 implementation in Python","I'm looking for an implementation of the SHA-256 hash function written in Python. I want to use it to get a better understanding of how the SHA-256 function works, and I think Python is the ideal language for this. Pseudo-code has the limitation that I can't run/test it, to see what my modifications of the code do to the output.
","If you only want the hash value:
from hashlib import sha256
data = input('Enter plaintext data: ')
output = sha256(data.encode('utf-8'))
print(output)

Python's hashlib also has SHA-1, SHA-384, SHA-512, and MD5 hash functions.
","20387","<python><sha256>","20","0","4","2019-04-25 21:47:28","7323113","1","6","","","","2011-09-06 14:40:03",""
"18542160","signtool failing to dual sign SHA2 and SHA1 with timestamps","We need to dual sign our binaries with SHA1 and SHA2 using signtool.exe, our certificate supports 256-bit SHA2.
Using the Windows 8 SDK's signtool:
e.g.:
signtool.exe sign /as /fd sha256 /t http://timestamp.verisign.com/scripts/timstamp.dll /f ""certificate.pfx"" /p XXXXXXX ""file.dll""
(where XXXXXXX is our password for the certificate)
fails with the cryptic error:
SignTool Error: SignedCode::Sign returned error: 0x80070057
        The parameter is incorrect.
SignTool Error: An error occurred while attempting to sign: file.dll
Signing without a timestamp works, signing individually as SHA1 or SHA256 works, but we need to dual sign, and imagine not having a timestamp is a no no.
I've tried the 32 and 64-bit versions of signtool.exe, tried it on a Win7 and Win8 machine, and tried playing around with the command line options but to no avail.  Has anyone hit on this issue before?
","Try using 
signtool.exe sign /as /fd sha256 /tr http://timestamp.geotrust.com /td sha256 /f certificate.pfx /p XXXXXX file.dll

/tr is for RFC3161 timestamping, /td obviously for the hash to use.
","19329","<windows><sha256><authenticode><signtool><verisign>","22","2","7","2017-01-14 23:34:33","","0","14","1669243","","2013-08-31 05:17:59","2013-08-30 22:09:09",""
"18542160","signtool failing to dual sign SHA2 and SHA1 with timestamps","We need to dual sign our binaries with SHA1 and SHA2 using signtool.exe, our certificate supports 256-bit SHA2.
Using the Windows 8 SDK's signtool:
e.g.:
signtool.exe sign /as /fd sha256 /t http://timestamp.verisign.com/scripts/timstamp.dll /f ""certificate.pfx"" /p XXXXXXX ""file.dll""
(where XXXXXXX is our password for the certificate)
fails with the cryptic error:
SignTool Error: SignedCode::Sign returned error: 0x80070057
        The parameter is incorrect.
SignTool Error: An error occurred while attempting to sign: file.dll
Signing without a timestamp works, signing individually as SHA1 or SHA256 works, but we need to dual sign, and imagine not having a timestamp is a no no.
I've tried the 32 and 64-bit versions of signtool.exe, tried it on a Win7 and Win8 machine, and tried playing around with the command line options but to no avail.  Has anyone hit on this issue before?
","I also get the above error, however It works with the osslsigncode utility when using the '-nest' option:
osslsigncode sign -pkcs12 cert1.pfx -h sha1 -t http://timestamp.verisign.com/scripts/timestamp.dll -in original.exe -out intermediate.exe
osslsigncode sign -pkcs12 cert2.pfx -nest -h sha1 -t http://timestamp.verisign.com/scripts/timestamp.dll -in intermediate.exe -out final.exe

The official project is for Unix, however I've knocked up my own windows fork.
","19329","<windows><sha256><authenticode><signtool><verisign>","22","1","7","2017-01-14 23:34:33","","0","14","1669243","","2013-08-31 05:17:59","2013-08-30 22:09:09",""
"18542160","signtool failing to dual sign SHA2 and SHA1 with timestamps","We need to dual sign our binaries with SHA1 and SHA2 using signtool.exe, our certificate supports 256-bit SHA2.
Using the Windows 8 SDK's signtool:
e.g.:
signtool.exe sign /as /fd sha256 /t http://timestamp.verisign.com/scripts/timstamp.dll /f ""certificate.pfx"" /p XXXXXXX ""file.dll""
(where XXXXXXX is our password for the certificate)
fails with the cryptic error:
SignTool Error: SignedCode::Sign returned error: 0x80070057
        The parameter is incorrect.
SignTool Error: An error occurred while attempting to sign: file.dll
Signing without a timestamp works, signing individually as SHA1 or SHA256 works, but we need to dual sign, and imagine not having a timestamp is a no no.
I've tried the 32 and 64-bit versions of signtool.exe, tried it on a Win7 and Win8 machine, and tried playing around with the command line options but to no avail.  Has anyone hit on this issue before?
","I've been trying to do this exact thing, and found the following did the trick. This approach relies on using two Authenticode certificates, one for SHA-1 and another for SHA-256, in order to ensure the files are accepted as valid by Windows Vista and Windows Server 2008 which do not support being signed by a SHA-256 certificate even if the SHA-1 algorithm is used:
signtool.exe sign /sha1 SHA1_Thumprint /v /d ""FileDescription"" /du ""CompanyURL"" /fd sha1 /tr http://timestamp.comodoca.com/rfc3161 /td sha1 ""FileName.dll""
signtool.exe sign /sha1 SHA256_Thumprint /as /v /d ""FileDescription"" /du ""CompanyURL"" /fd sha256 /tr http://timestamp.comodoca.com/rfc3161 /td sha256 ""FileName.dll""

Note that the SHA-1 thumbprints are explicitly specified for each signing step using the /sha1 switch and that /as is used to append the SHA-256 signature. Otherwise the SHA-256 signature will override the SHA-1 signature.
The other gotcha I found in the process was that only DLLs and EXEs support dual signatures. MSI installers do not.
Updated 29/12/15:
The format of the SHA-1/SHA-256 thumbprint is a 40-character hexadecimal upper case string with no spaces. For example:
signtool.exe sign /sha1 0123456789ABCDEF0123456789ABCDEF01234567 /as /v /d ""FileDescription"" /du ""CompanyURL"" /fd sha256 /tr http://timestamp.comodoca.com/rfc3161 /td sha256 ""FileName.dll""

Updated 30/12/2015
To sign an MSI file with a SHA-256 certificate but with a SHA-1 hash use a command similar to the below:
signtool.exe sign /sha1 SHA256_Thumprint /v /d ""FileDescription"" /du ""CompanyURL"" /t http://timestamp.comodoca.com/authenticode ""FileName.msi""

","19329","<windows><sha256><authenticode><signtool><verisign>","22","16","7","2017-01-14 23:34:33","","0","14","1669243","","2013-08-31 05:17:59","2013-08-30 22:09:09",""
"18542160","signtool failing to dual sign SHA2 and SHA1 with timestamps","We need to dual sign our binaries with SHA1 and SHA2 using signtool.exe, our certificate supports 256-bit SHA2.
Using the Windows 8 SDK's signtool:
e.g.:
signtool.exe sign /as /fd sha256 /t http://timestamp.verisign.com/scripts/timstamp.dll /f ""certificate.pfx"" /p XXXXXXX ""file.dll""
(where XXXXXXX is our password for the certificate)
fails with the cryptic error:
SignTool Error: SignedCode::Sign returned error: 0x80070057
        The parameter is incorrect.
SignTool Error: An error occurred while attempting to sign: file.dll
Signing without a timestamp works, signing individually as SHA1 or SHA256 works, but we need to dual sign, and imagine not having a timestamp is a no no.
I've tried the 32 and 64-bit versions of signtool.exe, tried it on a Win7 and Win8 machine, and tried playing around with the command line options but to no avail.  Has anyone hit on this issue before?
","Adding to martin_costello answer, XP and Vista do not support the RFC timestamp. You need to use the /t option for sha1 signatures.
signtool.exe sign /sha1 SHA1_Thumprint /v /d ""FileDescription"" /du ""CompanyURL"" /fd sha1 /t http://timestamp.verisign.com/scripts/timestamp.dll ""FileName.dll""
signtool.exe sign /sha1 SHA256_Thumprint /as /v /d ""FileDescription"" /du ""CompanyURL"" /fd sha256 /tr http://timestamp.comodoca.com/rfc3161 /td sha256 ""FileName.dll""

","19329","<windows><sha256><authenticode><signtool><verisign>","22","2","7","2017-01-14 23:34:33","","0","14","1669243","","2013-08-31 05:17:59","2013-08-30 22:09:09",""
"18542160","signtool failing to dual sign SHA2 and SHA1 with timestamps","We need to dual sign our binaries with SHA1 and SHA2 using signtool.exe, our certificate supports 256-bit SHA2.
Using the Windows 8 SDK's signtool:
e.g.:
signtool.exe sign /as /fd sha256 /t http://timestamp.verisign.com/scripts/timstamp.dll /f ""certificate.pfx"" /p XXXXXXX ""file.dll""
(where XXXXXXX is our password for the certificate)
fails with the cryptic error:
SignTool Error: SignedCode::Sign returned error: 0x80070057
        The parameter is incorrect.
SignTool Error: An error occurred while attempting to sign: file.dll
Signing without a timestamp works, signing individually as SHA1 or SHA256 works, but we need to dual sign, and imagine not having a timestamp is a no no.
I've tried the 32 and 64-bit versions of signtool.exe, tried it on a Win7 and Win8 machine, and tried playing around with the command line options but to no avail.  Has anyone hit on this issue before?
","I know it's a bit old, but I landed in this thread and maybe someone else will too.
It will work if you sign first with SHA1 and then with SHA256:
signtool.exe sign /f cert_file.pfx /t http://timestamp.comodoca.com/authenticode /p cert_password
signtool.exe sign /f cert_file.pfx /as /fd sha256 /tr http://timestamp.comodoca.com/rfc3161 /td sha256 /p cert_password 

It worked using the same certificate in both signatures. I used the signtool from Windows 10 SDK, don't know if it will work with previous versions.
","19329","<windows><sha256><authenticode><signtool><verisign>","22","14","7","2017-01-14 23:34:33","","0","14","1669243","","2013-08-31 05:17:59","2013-08-30 22:09:09",""
"18542160","signtool failing to dual sign SHA2 and SHA1 with timestamps","We need to dual sign our binaries with SHA1 and SHA2 using signtool.exe, our certificate supports 256-bit SHA2.
Using the Windows 8 SDK's signtool:
e.g.:
signtool.exe sign /as /fd sha256 /t http://timestamp.verisign.com/scripts/timstamp.dll /f ""certificate.pfx"" /p XXXXXXX ""file.dll""
(where XXXXXXX is our password for the certificate)
fails with the cryptic error:
SignTool Error: SignedCode::Sign returned error: 0x80070057
        The parameter is incorrect.
SignTool Error: An error occurred while attempting to sign: file.dll
Signing without a timestamp works, signing individually as SHA1 or SHA256 works, but we need to dual sign, and imagine not having a timestamp is a no no.
I've tried the 32 and 64-bit versions of signtool.exe, tried it on a Win7 and Win8 machine, and tried playing around with the command line options but to no avail.  Has anyone hit on this issue before?
","I think this link has some nice pointers. Some of it is mentioned in the answer by martin_costello, but this article provides some more details. In particular:

'Dual signing and include an SHA1 file digest' is possible if you sign SHA1 first, and use /as for the SHA256. It only works with signtool v6.3 from the Windows 8.1 SDK (or later) though.
Dual signing with 'a FULL SHA1 signature', needed for windows version before XP sp3, requires 2 different certificates.

(I haven't tested all this myself though.)
","19329","<windows><sha256><authenticode><signtool><verisign>","22","0","7","2017-01-14 23:34:33","","0","14","1669243","","2013-08-31 05:17:59","2013-08-30 22:09:09",""
"18542160","signtool failing to dual sign SHA2 and SHA1 with timestamps","We need to dual sign our binaries with SHA1 and SHA2 using signtool.exe, our certificate supports 256-bit SHA2.
Using the Windows 8 SDK's signtool:
e.g.:
signtool.exe sign /as /fd sha256 /t http://timestamp.verisign.com/scripts/timstamp.dll /f ""certificate.pfx"" /p XXXXXXX ""file.dll""
(where XXXXXXX is our password for the certificate)
fails with the cryptic error:
SignTool Error: SignedCode::Sign returned error: 0x80070057
        The parameter is incorrect.
SignTool Error: An error occurred while attempting to sign: file.dll
Signing without a timestamp works, signing individually as SHA1 or SHA256 works, but we need to dual sign, and imagine not having a timestamp is a no no.
I've tried the 32 and 64-bit versions of signtool.exe, tried it on a Win7 and Win8 machine, and tried playing around with the command line options but to no avail.  Has anyone hit on this issue before?
","The issue is actually way simpler.
The problem is with the time stamp server.
Instead of using signtool.exe with this
/t http://timestamp.comodoca.com 

You need to use it like this for SHA1
/tr http://timestamp.comodoca.com /td sha1

And for SHA256
/tr http://timestamp.comodoca.com/?td=sha256 /td sha256

","19329","<windows><sha256><authenticode><signtool><verisign>","22","5","7","2017-01-14 23:34:33","","0","14","1669243","","2013-08-31 05:17:59","2013-08-30 22:09:09",""
"12050700","How can I calculate the SHA-256 hash of a string with a secret key in Android?","I need to calculate a SHA-256 hash of a string with a secret key. I found this code :
public String computeHash(String input)
    throws NoSuchAlgorithmException, UnsupportedEncodingException
{
    MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
    digest.reset();

    byte[] byteData = digest.digest(input.getBytes(""UTF-8""));
    StringBuffer sb = new StringBuffer();

    for (int i = 0; i < byteData.length; i++) {
        sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
    }
    return sb.toString();
}

for calculating the hash without the secret key. How can I calculate with a secret key? I searched but I didn't find any solution in Android. Any idea ?
","Look at this example.
/**
 * Encryption of a given text using the provided secretKey
 * 
 * @param text
 * @param secretKey
 * @return the encoded string
 * @throws SignatureException
 */
public static String hashMac(String text, String secretKey)
  throws SignatureException {

 try {
  Key sk = new SecretKeySpec(secretKey.getBytes(), HASH_ALGORITHM);
  Mac mac = Mac.getInstance(sk.getAlgorithm());
  mac.init(sk);
  final byte[] hmac = mac.doFinal(text.getBytes());
  return toHexString(hmac);
 } catch (NoSuchAlgorithmException e1) {
  // throw an exception or pick a different encryption method
  throw new SignatureException(
    ""error building signature, no such algorithm in device ""
      + HASH_ALGORITHM);
 } catch (InvalidKeyException e) {
  throw new SignatureException(
    ""error building signature, invalid key "" + HASH_ALGORITHM);
 }
}

Where HASH_ALGORITHM is defined as:
private static final String HASH_ALGORITHM = ""HmacSHA256"";

public static String toHexString(byte[] bytes) {  
    StringBuilder sb = new StringBuilder(bytes.length * 2);  

    Formatter formatter = new Formatter(sb);  
    for (byte b : bytes) {  
        formatter.format(""%02x"", b);  
    }  

    return sb.toString();  
}  

","19035","<android><hash><sha256>","5","17","2","2018-06-21 08:46:04","12050822","7","9","24874","","2013-02-12 09:53:22","2012-08-21 08:13:40",""
"12050700","How can I calculate the SHA-256 hash of a string with a secret key in Android?","I need to calculate a SHA-256 hash of a string with a secret key. I found this code :
public String computeHash(String input)
    throws NoSuchAlgorithmException, UnsupportedEncodingException
{
    MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
    digest.reset();

    byte[] byteData = digest.digest(input.getBytes(""UTF-8""));
    StringBuffer sb = new StringBuffer();

    for (int i = 0; i < byteData.length; i++) {
        sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
    }
    return sb.toString();
}

for calculating the hash without the secret key. How can I calculate with a secret key? I searched but I didn't find any solution in Android. Any idea ?
","Use the below code,
/**
 * Returns a hexadecimal encoded SHA-256 hash for the input String.
 * @param data
 * @return
 */
private static String getSHA256Hash(String data) {
    String result = null;
    try {
        MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
        byte[] hash = digest.digest(data.getBytes(""UTF-8""));
        return bytesToHex(hash); // make it printable
    }catch(Exception ex) {
        ex.printStackTrace();
    }
    return result;
}

/**
 * Use javax.xml.bind.DatatypeConverter class in JDK
 * to convert byte array to a hexadecimal string. Note that this generates hexadecimal in upper case.
 * @param hash
 * @return
 */
private static String  bytesToHex(byte[] hash) {
    return DatatypeConverter.printHexBinary(hash);
}

To use DatatypeConverter, download the jar file from the below link.
http://www.java2s.com/Code/Jar/j/Downloadjavaxxmlbindjar.htm
","19035","<android><hash><sha256>","5","0","2","2018-06-21 08:46:04","12050822","7","9","24874","","2013-02-12 09:53:22","2012-08-21 08:13:40",""
"7785188","a good library for calculating sha-256 in c++","I'm trying to find a good library for calculating sha256. I found already a lot of options 
crypto++ : http://www.cryptopp.com/
openSSL: http://www.openssl.org/
MIRACL: http://www.shamus.ie/
I would much prefer a library that's well-known, widely industrially used and works on all  operating systems, rather than the most efficient one.
What do you recommend for me? (feel free to recommend on a library that I didn't mention here).
","You should consider cryptlib
Works on all operating systems 
Cryptlib is supplied as source code for AMX, BeOS, ChorusOS, DOS, DOS32, eCOS, µC/OS-II, embedded Linux, FreeRTOS/OpenRTOS, IBM MVS, µITRON, Macintosh/OS X, OS/2, PalmOS, RTEMS, Tandem, ThreadX, a variety of Unix versions (including AIX, Digital Unix, DGUX, FreeBSD/NetBSD/OpenBSD, HP-UX, IRIX, Linux, MP-RAS, OSF/1, QNX, SCO/UnixWare, Solaris, SunOS, Ultrix, and UTS4), uClinux, VM/CMS, VxWorks, Windows 3.x, Windows 95/98/ME, Windows CE/PocketPC/SmartPhone, Windows NT/2000/XP/Vista/Windows 7 (32- and 64-bit versions), VDK, and Xilinx XMK.  cryptlib’s highly portable nature means that it is also being used in a variety of custom embedded system environments.
Widely industrially used
see Clients
It's not free for commercial use, though.
","18976","<c++><sha256>","8","2","1","2011-10-16 18:53:08","","2","4","613130","","2011-10-16 16:01:46","2011-10-16 15:15:21",""
"21176602","What kind of hash algorithm is used for Hive's built-in HASH() Function","What kind of hashing algorithm is used in the built-in HASH() function?
I'm ideally looking for a SHA512/SHA256 hash, similar to what the SHA() function offers within the linkedin datafu UDFs for Pig.
","HASH function (as of Hive 0.11) uses algorithm similar to java.util.List#hashCode.
Its code looks like this:
int hashCode = 0; // Hive HASH uses 0 as the seed, List#hashCode uses 1. I don't know why.
for (Object item: items) {
   hashCode = hashCode * 31 + (item == null ? 0 : item.hashCode());
}

Basically it's a classic hash algorithm as recommended in the book Effective Java.
To quote a great man (and a great book):

The value 31 was chosen because it is an odd prime. If it were even
  and the multiplication overflowed, information would be lost, as
  multiplication by 2 is equivalent to shifting. The advantage of using
  a prime is less clear, but it is traditional. A nice property of 31 is
  that the multiplication can be replaced by a shift and a subtraction
  for better performance: 31 * i == (i << 5) - i. Modern VMs do this
  sort of optimization automatically.

I digress. You can look at the HASH source here.
If you want to use SHAxxx in Hive then you can use Apache DigestUtils class and Hive built-in reflect function (I hope that'll work):
SELECT reflect('org.apache.commons.codec.digest.DigestUtils', 'sha256Hex', 'your_string')

","18535","<hive><md5><hashcode><sha256>","8","20","2","2018-08-31 03:50:01","21184449","1","4","1033581","","2017-09-10 04:28:01","2014-01-17 02:09:08",""
"21176602","What kind of hash algorithm is used for Hive's built-in HASH() Function","What kind of hashing algorithm is used in the built-in HASH() function?
I'm ideally looking for a SHA512/SHA256 hash, similar to what the SHA() function offers within the linkedin datafu UDFs for Pig.
","As of Hive 2.1.0 there is a mask_hash function that will hash string values.
For Hive 2.x it uses md5 as the hashing algorithm. This was changed to sha256 for Hive 3.x
","18535","<hive><md5><hashcode><sha256>","8","1","2","2018-08-31 03:50:01","21184449","1","4","1033581","","2017-09-10 04:28:01","2014-01-17 02:09:08",""
"17388177","Is there a limit for sha256 input?","When hashing a string, like a password, with sha256, is there a limit to the length of the string I am hashing? For example, is it only ""safe"" to hash strings that are <= 64 characters?
","There is no such limit, other than the maximum message size of 264-1 bits. SHA2 is frequently used to generate hashes for executables, which tend to be much larger than a few dozen bytes.
","18449","<hash><sha256>","31","5","3","2018-12-10 12:55:49","17388220","0","3","","","","2013-06-30 07:30:03",""
"17388177","Is there a limit for sha256 input?","When hashing a string, like a password, with sha256, is there a limit to the length of the string I am hashing? For example, is it only ""safe"" to hash strings that are <= 64 characters?
","There is technically a limit, but it's quite large. The padding scheme used for SHA-256 requires that the size of the input (in bits) be expressed as a 64-bit number. Therefore, the maximum size is (264-1)/8 bytes ~= 2'091'752 terabytes.
That renders the limit almost entirely theoretical, not practical. 
Most people don't have the storage for nearly that much data anyway, but even if they did, processing it all serially to produce a single hash would take an amount of time most would consider prohibitive.
A quick back-of-the-envelope kind of calculation indicates that even with the fastest enterprise SSDs currently1 listed on Tom's hardware, and striping them 16 wide to improve bandwidth, just reading that quantity of data would still take about 220 years.


1. As of April 2016.

","18449","<hash><sha256>","31","57","3","2018-12-10 12:55:49","17388220","0","3","","","","2013-06-30 07:30:03",""
"17388177","Is there a limit for sha256 input?","When hashing a string, like a password, with sha256, is there a limit to the length of the string I am hashing? For example, is it only ""safe"" to hash strings that are <= 64 characters?
","The upper limit is given in the NIST Standard FIPS 180-4. The reason for the upper limit is the padding scheme. The message length l is lastly appended to message during padding.

Then append the 64-bit block that is equal to the number l expressed
  using a binary representation

Therefore by the NIST standard, the maximum file size can be hashed with SHA-256 is 2^64.
","18449","<hash><sha256>","31","1","3","2018-12-10 12:55:49","17388220","0","3","","","","2013-06-30 07:30:03",""
"22030264","How can I create a sha256 fingerprint in openssl","I want to sha256 the fingerprint Use the openssl. 
I tried, but you have to sha1. What will i do?
I'm using OpenSSL 1.0.1f.
commands
openssl md5 * >rand.dat

openssl genrsa -rand rand.dat -aes256 2048 > server.key

openssl req -new -key server.key -sha256 -config openssl.cfg > server.csr

openssl x509 -fingerprint -sha256 -in server.csr -req -signkey server.key -extensions v3_req -extfile openssl.cfg -out server.cer

Changed from The default is the following:
[ CA_default ]
default_md  = sha256    # Change

[ req ]
req_extensions = v3_req     # Uncomment

","
How can I create a sha256 fingerprint in openssl

-sha256 is correct.

There's an example of signing a server's CSR with your own CA using OpenSSL at How do you sign OpenSSL Certificate Signing Requests with your Certification Authority?.

Based on the feedback, it appears SHA1 is hard coded when using -fingerprint. Below is from <openssl dir>/apps/x509.c (all OpenSSL apps, like ca, x509, encrypt, decrypt, etc are located in apps/). From around line 935 of x509.c:
else if (fingerprint == i)
    {
    int j;
    unsigned int n;
    unsigned char md[EVP_MAX_MD_SIZE];
    const EVP_MD *fdig = digest;

    if (!fdig)
        fdig = EVP_sha1();

    if (!X509_digest(x,fdig,md,&n))
        {
        BIO_printf(bio_err,""out of memory\n"");
        goto end;
        }
    BIO_printf(STDout,""%s Fingerprint="", OBJ_nid2sn(EVP_MD_type(fdig)));
    ....

As far as const EVP_MD *fdig = digest, digest can be set. But I can't tell what switch is supposed to be used. From around line 475:
else if ((md_alg=EVP_get_digestbyname(*argv + 1)))
    {
    /* ok */
    digest=md_alg;
    }

That looks broke to me.
","17869","<openssl><sha256>","2","5","1","2016-04-13 08:52:24","22032411","1","","3353855","","2014-02-26 02:13:57","2014-02-26 02:06:00",""
"43893516","How to implement SHA-256 encryption in Angular2","I need to encrypt my password in SHA256 before making API request . I am not able to find any implementation of SHA-256 in Angular2
","SHA-256 & md5 both are provide hashing not encryption. SHA-256 not provide any angular2 support still now. If you want to hashstring/hashAsciiStr it's pretty simple in ts-md5....
ts-md5 npm link
Step to use ts-md5 : 

npm install
npm install ts-md5
Import the class in your component where you want to use
import {Md5} from 'ts-md5/dist/md5';
Hash some things
Md5.hashStr('blah blah blah') => hex:string
 Md5.hashStr('blah blah blah', true) => raw:Int32Array(4)
 Md5.hashAsciiStr('blah blah blah') => hex:string
 Md5.hashAsciiStr('blah blah blah', true) => raw:Int32Array(4)

hopefully it helps you 
","17676","<javascript><angular><sha256>","4","1","3","2017-09-07 13:55:16","","1","2","438992","","2017-09-07 13:55:16","2017-05-10 13:10:59",""
"43893516","How to implement SHA-256 encryption in Angular2","I need to encrypt my password in SHA256 before making API request . I am not able to find any implementation of SHA-256 in Angular2
","Before I answer your question, you should understand that SHA256 should not be used for passwords.  You should also be aware that client-side password hashing is not normally done, but there is a push for it from a number of researchers.  The catch is that it is easy to do wrong.  Guidance here and here.
Now to answer your question, rather than using Angular2, why not just pull in the Stanford JavaScript Crypto Library or Crypto-Js?  APIs on SHA256 are documented on these links.
","17676","<javascript><angular><sha256>","4","4","3","2017-09-07 13:55:16","","1","2","438992","","2017-09-07 13:55:16","2017-05-10 13:10:59",""
"43893516","How to implement SHA-256 encryption in Angular2","I need to encrypt my password in SHA256 before making API request . I am not able to find any implementation of SHA-256 in Angular2
","I used sha.js for this purpose, it is so simple and make the trick! 
First npm install --save sha.js 
Import in your component, service, whatever: import * as shajs from 'sha.js';
And for last, use it like the docs says: shajs('sha256').update({stringToBeHashed}).digest('hex') 
","17676","<javascript><angular><sha256>","4","8","3","2017-09-07 13:55:16","","1","2","438992","","2017-09-07 13:55:16","2017-05-10 13:10:59",""
"27039489","Difference between signing with SHA256 vs. signing with RSA-SHA256","I play with digital signatures using node.js. For test purpose, I created a digital signature of some XML data, first using only SHA256, then using RSA-SHA256.
The thing that puzzles me is that both methods of signing create exactly the same signature. Both signatures are identical. If they're identical, then why two different methods (SHA256 vs. RSA-SHA256)?
I include code below:
var crypto = require('crypto'),
    path   = require('path'),
    fs     = require('fs'),

    pkey_path = path.normalize('private_key.pem'),
    pkey = '';

function testSignature(pkey) {
    var sign1 = crypto.createSign('RSA-SHA256'),
        sign2 = crypto.createSign('SHA256');

    fs.ReadStream('some_document.xml')
        .on('data', function (d) {
            sign1.update(d);
            sign2.update(d);
        })
        .on('end', function () {
            var s1 = sign1.sign(pkey, ""base64""),
                s2 = sign2.sign(pkey, ""base64"");

            console.log(s1);
            console.log(s2);
        });
}

// You need to read private key into a string and pass it to crypto module.
// If the key is password protected, program execution will stop and
// a prompt will appear in console, awaiting input of password.

testSignature(fs.readFileSync(pkey_path));

The code above outputs some string, which is the signature, and then again exactly the same string, which is also a signature of the same data, but created with - supposedly - different algorithm, yet it's identical with previous one...
","A signature cannot be created by SHA256 alone.
SHA256 is a hashing algorithm; i.e. an algorithm creating a short fingerprint number representing an arbitrary large amount of data. To produce a signature, this fingerprint still has to be treated somehow to allow identification of the holder of some private signature key. One such treatment is to encrypt the fingerprint using the private key of a rsa key pair allowing others to decrypt the result using the associated public key and so verify that the keeper of the private key indeed must have been the signer.
In the context of your crypto API that RSA encryption scheme either is the default treatment when the treatment is not explicitly named, or the kind of treatment is deduced from the private key you use as parameter in the sign call --- if it is a RSA private key, it uses RSA; if it is a DSA key, it uses DSA; ...
","17442","<node.js><rsa><digital-signature><sha256>","1","12","2","2014-11-21 00:40:56","27041297","1","4","","","","2014-11-20 12:20:13",""
"27039489","Difference between signing with SHA256 vs. signing with RSA-SHA256","I play with digital signatures using node.js. For test purpose, I created a digital signature of some XML data, first using only SHA256, then using RSA-SHA256.
The thing that puzzles me is that both methods of signing create exactly the same signature. Both signatures are identical. If they're identical, then why two different methods (SHA256 vs. RSA-SHA256)?
I include code below:
var crypto = require('crypto'),
    path   = require('path'),
    fs     = require('fs'),

    pkey_path = path.normalize('private_key.pem'),
    pkey = '';

function testSignature(pkey) {
    var sign1 = crypto.createSign('RSA-SHA256'),
        sign2 = crypto.createSign('SHA256');

    fs.ReadStream('some_document.xml')
        .on('data', function (d) {
            sign1.update(d);
            sign2.update(d);
        })
        .on('end', function () {
            var s1 = sign1.sign(pkey, ""base64""),
                s2 = sign2.sign(pkey, ""base64"");

            console.log(s1);
            console.log(s2);
        });
}

// You need to read private key into a string and pass it to crypto module.
// If the key is password protected, program execution will stop and
// a prompt will appear in console, awaiting input of password.

testSignature(fs.readFileSync(pkey_path));

The code above outputs some string, which is the signature, and then again exactly the same string, which is also a signature of the same data, but created with - supposedly - different algorithm, yet it's identical with previous one...
","What you are looking at is two times a PKCS#1 v1.5 signature. This is a deterministic scheme for signatures, so it always returns the same result (compare this to the PSS scheme, which is randomized, providing better security properties). RSA PKCS#1 v1.5 signature generation and PSS signature generation is defined within RFC 3447 (also known as the RSA v2.1 specifications).
If you use your code with RSA 512 bits (testing purposes only, use a key of 2048 bits or over) then you will get the following result:
Private key:
-----BEGIN RSA PRIVATE KEY-----
MIIBOgIBAAJBALLA/Zk6+4JFJ+XdU6wmUkuEhGa8hLZ+m6J3puZbc9E+DSt7pW09
yMYwHF5MMICxE86cA6BrLjQLUUwvquNSK0ECAwEAAQJAcI/w4e3vdRABWNFvoCcd
iWpwSZWK6LR/YuZ/1e1e2DJw+NXyPXbilSrLvAdxnjlWTsTxUiEy1jFh36pSuvMk
AQIhAO4WtgysOoWkyvIOLIQwD0thWfdHxTpxqfd6flrBJ91hAiEAwDOQqHhnSeET
+N/hwUJQtCkHBJqvMF/kAi4Ry5G+OeECIEg1Exlc0pLdm781lUKx4LGX4NUiKyrC
di3cNJ4JnrGBAiEAi2gbYYbLbDO8F8TTayidfr9PXtCPhyfWKpqdv6i7cCECIH7A
6bh0tDCl6dOXQwbhgqF4hXiMsqe6DaHqIw8+XLnG
-----END RSA PRIVATE KEY-----

signature as base 64 (using your code):
YY6sur9gkHXH23cUbDMYjCJYqDdBK8GKp4XyRNl8H09cW8H/gKQI9Z6dkLMhNh7oPq1yABCRfTP8yRtfLVj7FA==

and in hexadecimals
618eacbabf609075c7db77146c33188c2258a837412bc18aa785f244d97c1f4f5c5bc1ff80a408f59e9d90b321361ee83ead720010917d33fcc91b5f2d58fb14

decrypted using RAW RSA (i.e. just modular exponentiation with the public exponent):
0001ffffffffffffffffffff003031300d0609608648016503040201050004202af565b95e5f4479492c520c430f07ae05d2bcff8923322e6f2ef6404d72ac64

This is a very clear example of a PKCS#1 signature, easily recognized by the FF padding, followed by the ASN.1 structure (starting with 30, SEQUENCE):
SEQUENCE (2 elem)
  SEQUENCE (2 elem)
  OBJECT IDENTIFIER 2.16.840.1.101.3.4.2.1 {joint-iso-itu-t(2) country(16) us(840) organization(1) gov(101) csor(3) nistAlgorithm(4) hashAlgs(2) sha256(1)}
    NULL
  OCTET STRING(32 byte) 2AF565B95E5F4479492C520C430F07AE05D2BCFF8923322E6F2EF6404D72AC64

So that thing in the end is the hash, in this case over just Test 123\n as I didn't want to type out any XML today.
$ sha256sum some_document.xml 
2af565b95e5f4479492c520c430f07ae05d2bcff8923322e6f2ef6404d72ac64  some_document.xml

$ sha256sum some_document.xml 
2af565b95e5f4479492c520c430f07ae05d2bcff8923322e6f2ef6404d72ac64  some_document.xml

","17442","<node.js><rsa><digital-signature><sha256>","1","4","2","2014-11-21 00:40:56","27041297","1","4","","","","2014-11-20 12:20:13",""
"3709204","Sha256 in Objective-C for iPhone","When I use this code to create a sha256 of a string
unsigned char hashedChars[32];
NSString *inputString;
inputString = [NSString stringWithFormat:@""hello""];
NSData * inputData = [inputString dataUsingEncoding:NSUTF8StringEncoding];
CC_SHA256(inputData.bytes, inputData.length, hashedChars);

It returns the hash correctly, but I need to insert a string like this \x00\x25\x53 and in this case, the function returns a sha256 of empty string because the specified encoding cannot be used to convert the receiver.
Now, my question is:How to insert this special characters for generate a correct hash? Thanks
","You probably should use NSData instead of NSString then. Where do you get that string from?
","17363","<iphone><objective-c><xcode><hash><sha256>","15","0","4","2018-03-06 04:06:54","","0","11","219922","","2012-07-11 10:56:01","2010-09-14 13:15:59",""
"3709204","Sha256 in Objective-C for iPhone","When I use this code to create a sha256 of a string
unsigned char hashedChars[32];
NSString *inputString;
inputString = [NSString stringWithFormat:@""hello""];
NSData * inputData = [inputString dataUsingEncoding:NSUTF8StringEncoding];
CC_SHA256(inputData.bytes, inputData.length, hashedChars);

It returns the hash correctly, but I need to insert a string like this \x00\x25\x53 and in this case, the function returns a sha256 of empty string because the specified encoding cannot be used to convert the receiver.
Now, my question is:How to insert this special characters for generate a correct hash? Thanks
","Try this, it worked for me
1) To get a hash for plain text input
-(NSString*)sha256HashFor:(NSString*)input
{   
    const char* str = [input UTF8String];
    unsigned char result[CC_SHA256_DIGEST_LENGTH];
    CC_SHA256(str, strlen(str), result);

    NSMutableString *ret = [NSMutableString stringWithCapacity:CC_SHA256_DIGEST_LENGTH*2];
    for(int i = 0; i<CC_SHA256_DIGEST_LENGTH; i++)
    {
        [ret appendFormat:@""%02x"",result[i]];
    }
    return ret;
}

2) To get hash for NSData as input
Note:- I have used NSData category, so the code is as follow
    - (NSString *)SHA256_HASH {
    //if (!self) return nil;

    unsigned char hash[CC_SHA256_DIGEST_LENGTH];
    if ( CC_SHA256([(NSData*)self bytes], [(NSData*)self length], hash) ) {
        NSData *sha2 = [NSData dataWithBytes:hash length:CC_SHA256_DIGEST_LENGTH]; 

        // description converts to hex but puts <> around it and spaces every 4 bytes
        NSString *hash = [sha2 description];
        hash = [hash stringByReplacingOccurrencesOfString:@"" "" withString:@""""];
        hash = [hash stringByReplacingOccurrencesOfString:@""<"" withString:@""""];
        hash = [hash stringByReplacingOccurrencesOfString:@"">"" withString:@""""];
        // hash is now a string with just the 40char hash value in it
        //NSLog(@""hash = %@"",hash);

        // Format SHA256 fingerprint like
        // 00:00:00:00:00:00:00:00:00
        int keyLength=[hash length];
        NSString *formattedKey = @"""";
        for (int i=0; i<keyLength; i+=2) {
            NSString *substr=[hash substringWithRange:NSMakeRange(i, 2)];
            if (i!=keyLength-2) 
                substr=[substr stringByAppendingString:@"":""];
            formattedKey = [formattedKey stringByAppendingString:substr];
        }

        return formattedKey;
    }
    return nil;
}

","17363","<iphone><objective-c><xcode><hash><sha256>","15","40","4","2018-03-06 04:06:54","","0","11","219922","","2012-07-11 10:56:01","2010-09-14 13:15:59",""
"3709204","Sha256 in Objective-C for iPhone","When I use this code to create a sha256 of a string
unsigned char hashedChars[32];
NSString *inputString;
inputString = [NSString stringWithFormat:@""hello""];
NSData * inputData = [inputString dataUsingEncoding:NSUTF8StringEncoding];
CC_SHA256(inputData.bytes, inputData.length, hashedChars);

It returns the hash correctly, but I need to insert a string like this \x00\x25\x53 and in this case, the function returns a sha256 of empty string because the specified encoding cannot be used to convert the receiver.
Now, my question is:How to insert this special characters for generate a correct hash? Thanks
","It's important to know that you need to import:
#import <CommonCrypto/CommonDigest.h>

Hope this help!
","17363","<iphone><objective-c><xcode><hash><sha256>","15","2","4","2018-03-06 04:06:54","","0","11","219922","","2012-07-11 10:56:01","2010-09-14 13:15:59",""
"3709204","Sha256 in Objective-C for iPhone","When I use this code to create a sha256 of a string
unsigned char hashedChars[32];
NSString *inputString;
inputString = [NSString stringWithFormat:@""hello""];
NSData * inputData = [inputString dataUsingEncoding:NSUTF8StringEncoding];
CC_SHA256(inputData.bytes, inputData.length, hashedChars);

It returns the hash correctly, but I need to insert a string like this \x00\x25\x53 and in this case, the function returns a sha256 of empty string because the specified encoding cannot be used to convert the receiver.
Now, my question is:How to insert this special characters for generate a correct hash? Thanks
","Some one looking the solution in Swift 3.0. here is
extension String {

// MARK: - SHA256
func get_sha256_String() -> String {
    guard let data = self.data(using: .utf8) else {
        print(""Data not available"")
        return """"
    }
    return getHexString(fromData: digest(input: data as NSData))
}

private func digest(input : NSData) -> NSData {
    let digestLength = Int(CC_SHA256_DIGEST_LENGTH)
    var hashValue = [UInt8](repeating: 0, count: digestLength)
    CC_SHA256(input.bytes, UInt32(input.length), &hashValue)
    return NSData(bytes: hashValue, length: digestLength)
}

private  func getHexString(fromData data: NSData) -> String {
    var bytes = [UInt8](repeating: 0, count: data.length)
    data.getBytes(&bytes, length: data.length)

    var hexString = """"
    for byte in bytes {
        hexString += String(format:""%02x"", UInt8(byte))
    }
    return hexString
}}

How to Use it
let signatures = ""yourStringToBeConverted"".get_sha256_String()

also don't forgot to import #import <CommonCrypto/CommonHMAC.h> in your Bridging-Header.h
","17363","<iphone><objective-c><xcode><hash><sha256>","15","0","4","2018-03-06 04:06:54","","0","11","219922","","2012-07-11 10:56:01","2010-09-14 13:15:59",""
"6210449","Library providing various hash algorithms (MD5, SHA1, SHA256, etc) in Java?","Is there a simple library out there for Java in a Maven repository that will give me simple, one-liner hash methods for the popular hash functions such as MD5, SHA1, SHA256, and SHA512? I'd really hate to have to reinvent the wheel to do this. 
","It's built-in: java.security.MessageDigest
","16476","<java><md5><sha1><sha256><sha512>","9","11","2","2011-06-02 05:59:41","6210518","0","5","","","","2011-06-02 04:39:44",""
"6210449","Library providing various hash algorithms (MD5, SHA1, SHA256, etc) in Java?","Is there a simple library out there for Java in a Maven repository that will give me simple, one-liner hash methods for the popular hash functions such as MD5, SHA1, SHA256, and SHA512? I'd really hate to have to reinvent the wheel to do this. 
","The DigestUtils class of Apache Commons Codec is suitable for the purpose of simplifying the use of the MessageDigest class, which appears to be what you are attempting to use in the first place.
","16476","<java><md5><sha1><sha256><sha512>","9","11","2","2011-06-02 05:59:41","6210518","0","5","","","","2011-06-02 04:39:44",""
"6630168","What does SHA256 hexadecimal string look like?","I have been looking all over google to find what the hex output of a SHA256 hash looks like. But I just can't seem to find it.
So what does a SHA256 hash look like when it's converted to hexadecimal?
","A SHA256 hash represented in hexadecimal consists of 64 hexadecimal characters, i.e. it matches the following regex:
^[A-Fa-f0-9]{64}$

Example:

7f83b1657ff1fc53b92dc18148a1d65dfc2d4b1fa3d677284addd200126d9069

","15399","<sha256>","19","37","1","2019-07-22 10:18:01","6630280","0","1","607407","","2016-08-03 08:59:50","2011-07-08 20:32:04",""
"9991757","SHA256 digest in perl","I need to do SHA256 hashing of email addresses and I need the result as a String.
I tried the following:
  use Digest::SHA qw(sha256);
  my $data = 'swaranga@gmail.com';
  my $digest = sha256($data);

  print $digest;

But it prints something like: 
B/D6i1Î¼û^Þ©Q;¢Þ

I need the output as follows: 
cbc41284e23c8c7ed98f589b6d6ebfd6

The above hash is generated using SHA256 generator of Apache DigestUtils.
What am I doing wrong? I am a newbie in perl, so excuse if it is something silly.
Thanks.
","You probably want Digest::SHA qw(sha256_hex)  From CPAN's Digest::SHA page

Logically joins the arguments into a single string, and returns its
  SHA-1/224/256/384/512 digest encoded as a hexadecimal string.

","15320","<perl><hash><md5><sha><sha256>","10","6","2","2012-09-24 14:18:22","9994784","1","1","1215106","","2012-09-24 14:18:22","2012-04-03 10:51:32",""
"9991757","SHA256 digest in perl","I need to do SHA256 hashing of email addresses and I need the result as a String.
I tried the following:
  use Digest::SHA qw(sha256);
  my $data = 'swaranga@gmail.com';
  my $digest = sha256($data);

  print $digest;

But it prints something like: 
B/D6i1Î¼û^Þ©Q;¢Þ

I need the output as follows: 
cbc41284e23c8c7ed98f589b6d6ebfd6

The above hash is generated using SHA256 generator of Apache DigestUtils.
What am I doing wrong? I am a newbie in perl, so excuse if it is something silly.
Thanks.
","cbc41284e23c8c7ed98f589b6d6ebfd6 is MD5 for swaranga@gmail.com, not SHA-256

SHA encryptions for swaranga@gmail.com >>
 SHA-1:            3a3be7013e297e28d24979aadc4ae75d84ce0844
 SHA-256:          0947300f280d422f4418366931cebcfbd17f5ede1507a951153b0f15a21c10de
 SHA-384:          34c01f3956aac32aacae1a6cf67f8a66d441af06c9d36f580ce4be5b234b5399cd879231c49db5bec269309582c19432
 SHA-512:          db1aa053dd9ee191b091abbcb8bead2ec69a1ab2664bb1deeeedbdb49b25e7bc7680a7659ae88c046afdabf1e35ed0e068763f8754b369bfade69cf21f65d166
 SHA-1   (Base64): OjvnAT4pfijSSXmq3ErnXYTOCEQ=
 SHA-256 (Base64): CUcwDygNQi9EGDZpMc68+9F/Xt4VB6lRFTsPFaIcEN4=
 SHA-384 (Base64): NMAfOVaqwyqsrhps9n+KZtRBrwbJ029YDOS+WyNLU5nNh5IxxJ21vsJpMJWCwZQy
 SHA-512 (Base64): 2xqgU92e4ZGwkau8uL6tLsaaGrJmS7He7u29tJsl57x2gKdlmuiMBGr9q/HjXtDgaHY/h1Szab+t5pzyH2XRZg==


If you sure you want to use SHA-256 and you are looking for HEX output, then try this one:
Script:
#!/usr/bin/perl
use Digest::SHA qw(sha256);
print unpack(""H*"", sha256('swaranga@gmail.com')), ""\n"";

or
#!/usr/bin/perl
use Digest::SHA qw(sha256_hex);
print sha256_hex('swaranga@gmail.com'), ""\n"";

Output:
0947300f280d422f4418366931cebcfbd17f5ede1507a951153b0f15a21c10de


And if you want MD5 with HEX output, then try this one:
Script:
#!/usr/bin/perl
use Digest::MD5 qw(md5);
print unpack(""H*"", md5('swaranga@gmail.com')), ""\n"";

or
#!/usr/bin/perl
use Digest::MD5 qw(md5_hex);
print md5_hex('swaranga@gmail.com'), ""\n"";

Output:
cbc41284e23c8c7ed98f589b6d6ebfd6

","15320","<perl><hash><md5><sha><sha256>","10","19","2","2012-09-24 14:18:22","9994784","1","1","1215106","","2012-09-24 14:18:22","2012-04-03 10:51:32",""
"19486947","Possible to convert MD5 to SHA256?","I have a vBulletin Database with double MD5'd passwords and a salt, would it be possible to take the Password in the vBulletin database, convert them to SHA256, and then store them in a new database? Is there any real easy way to do this?
My main and only reason, is to prevent users from having to create new accounts, and to stop using MD5.
","Hashing algorithms are one-way i.e. They cannot be reversed unlike Encryption-Decryption algorithms.
MD5() is a hashing algorithm , so is SHA-1 / SHA-256;
It is good to know that you have stopped using MD5() and moving to SHA-256()
Solution to your problem.
First run a query in your users table like this
UPDATE users_t SET PASSWORD=SHA2(PASSWORD,256) WHERE 1=1

Now all your MD5 Hashed passwords will be converted to SHA256 Hashes.
However, you cannot stop using MD5 on your login/register pages.. You have to change your checking logic like 
$pass = $_POST['password'];
$hashedpass = hash('sha256',md5($pass)); // Now you need to insert/verify

","14952","<php><mysql><database><md5><sha256>","3","10","1","2019-06-20 12:50:29","19487421","2","3","","","","2013-10-21 05:37:53",""
"38794670","How to create encrypted JWT in C# using RS256 with RSA private key","I am using the jose-jwt library and want to create a signed JWT in C# using the RS256 algorithm for encryption. I have no experience with cryptography, so please excuse my ignorance. I see the following example in the docs:
var payload = new Dictionary<string, object>()
{
    { ""sub"", ""mr.x@contoso.com"" },
    { ""exp"", 1300819380 }
};

var privateKey=new X509Certificate2(""my-key.p12"", ""password"", X509KeyStorageFlags.Exportable | X509KeyStorageFlags.MachineKeySet).PrivateKey as RSACryptoServiceProvider;

string token=Jose.JWT.Encode(payload, privateKey, JwsAlgorithm.RS256);

which shows the use of a p12 file, but how do I use an RSA key file of the form below? I am looking at the docs for X509Certificate2, but I see no option for RSA private keys. It appears to only accept PKCS7, which I understand to be public keys.
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCqGKukO1De7zhZj6+H0qtjTkVxwTCpvKe4eCZ0FPqri0cb2JZfXJ/DgYSF6vUp
wmJG8wVQZKjeGcjDOL5UlsuusFncCzWBQ7RKNUSesmQRMSGkVb1/3j+skZ6UtW+5u09lHNsj6tQ5
1s1SPrCBkedbNf0Tp0GbMJDyR4e9T04ZZwIDAQABAoGAFijko56+qGyN8M0RVyaRAXz++xTqHBLh
3tx4VgMtrQ+WEgCjhoTwo23KMBAuJGSYnRmoBZM3lMfTKevIkAidPExvYCdm5dYq3XToLkkLv5L2
pIIVOFMDG+KESnAFV7l2c+cnzRMW0+b6f8mR1CJzZuxVLL6Q02fvLi55/mbSYxECQQDeAw6fiIQX
GukBI4eMZZt4nscy2o12KyYner3VpoeE+Np2q+Z3pvAMd/aNzQ/W9WaI+NRfcxUJrmfPwIGm63il
AkEAxCL5HQb2bQr4ByorcMWm/hEP2MZzROV73yF41hPsRC9m66KrheO9HPTJuo3/9s5p+sqGxOlF
L0NDt4SkosjgGwJAFklyR1uZ/wPJjj611cdBcztlPdqoxssQGnh85BzCj/u3WqBpE2vjvyyvyI5k
X6zk7S0ljKtt2jny2+00VsBerQJBAJGC1Mg5Oydo5NwD6BiROrPxGo2bpTbu/fhrT8ebHkTz2epl
U9VQQSQzY1oZMVX8i1m5WUTLPz2yLJIBQVdXqhMCQBGoiuSoSjafUhV7i1cEGpb88h5NBYZzWXGZ
37sJ5QsW+sJyoNde3xH8vdXhzU7eT82D6X/scw9RZz+/6rCJ4p0=
-----END RSA PRIVATE KEY-----

Finally, what is the difference between the two options listed in the docs, and how do I choose between the two?

-------------------------- OPTION 1 -------------------------- 
RS-* and PS-* family
CLR:
RS256, RS384, RS512 and PS256, PS384, PS512 signatures require
  RSACryptoServiceProvider (usually private) key of corresponding
  length. CSP need to be forced to use Microsoft Enhanced RSA and AES
  Cryptographic Provider. Which usually can be done be re-importing
  RSAParameters. See http://clrsecurity.codeplex.com/discussions/243156
  for details.
-------------------------- OPTION 2 -------------------------- 
CORECLR: RS256, RS384, RS512 signatures require RSA (usually private) key of corresponding length.

","The GetRSAPrivateKey is only available in .NET 4.6. See the URL below.
https://msdn.microsoft.com/en-us/library/system.security.cryptography.x509certificates.rsacertificateextensions.getrsaprivatekey(v=vs.110).aspx
","14931","<c#><encryption><rsa><jwt><sha256>","11","0","6","2019-07-02 18:50:30","","2","9","2348125","","2019-04-23 19:20:37","2016-08-05 17:17:39",""
"38794670","How to create encrypted JWT in C# using RS256 with RSA private key","I am using the jose-jwt library and want to create a signed JWT in C# using the RS256 algorithm for encryption. I have no experience with cryptography, so please excuse my ignorance. I see the following example in the docs:
var payload = new Dictionary<string, object>()
{
    { ""sub"", ""mr.x@contoso.com"" },
    { ""exp"", 1300819380 }
};

var privateKey=new X509Certificate2(""my-key.p12"", ""password"", X509KeyStorageFlags.Exportable | X509KeyStorageFlags.MachineKeySet).PrivateKey as RSACryptoServiceProvider;

string token=Jose.JWT.Encode(payload, privateKey, JwsAlgorithm.RS256);

which shows the use of a p12 file, but how do I use an RSA key file of the form below? I am looking at the docs for X509Certificate2, but I see no option for RSA private keys. It appears to only accept PKCS7, which I understand to be public keys.
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCqGKukO1De7zhZj6+H0qtjTkVxwTCpvKe4eCZ0FPqri0cb2JZfXJ/DgYSF6vUp
wmJG8wVQZKjeGcjDOL5UlsuusFncCzWBQ7RKNUSesmQRMSGkVb1/3j+skZ6UtW+5u09lHNsj6tQ5
1s1SPrCBkedbNf0Tp0GbMJDyR4e9T04ZZwIDAQABAoGAFijko56+qGyN8M0RVyaRAXz++xTqHBLh
3tx4VgMtrQ+WEgCjhoTwo23KMBAuJGSYnRmoBZM3lMfTKevIkAidPExvYCdm5dYq3XToLkkLv5L2
pIIVOFMDG+KESnAFV7l2c+cnzRMW0+b6f8mR1CJzZuxVLL6Q02fvLi55/mbSYxECQQDeAw6fiIQX
GukBI4eMZZt4nscy2o12KyYner3VpoeE+Np2q+Z3pvAMd/aNzQ/W9WaI+NRfcxUJrmfPwIGm63il
AkEAxCL5HQb2bQr4ByorcMWm/hEP2MZzROV73yF41hPsRC9m66KrheO9HPTJuo3/9s5p+sqGxOlF
L0NDt4SkosjgGwJAFklyR1uZ/wPJjj611cdBcztlPdqoxssQGnh85BzCj/u3WqBpE2vjvyyvyI5k
X6zk7S0ljKtt2jny2+00VsBerQJBAJGC1Mg5Oydo5NwD6BiROrPxGo2bpTbu/fhrT8ebHkTz2epl
U9VQQSQzY1oZMVX8i1m5WUTLPz2yLJIBQVdXqhMCQBGoiuSoSjafUhV7i1cEGpb88h5NBYZzWXGZ
37sJ5QsW+sJyoNde3xH8vdXhzU7eT82D6X/scw9RZz+/6rCJ4p0=
-----END RSA PRIVATE KEY-----

Finally, what is the difference between the two options listed in the docs, and how do I choose between the two?

-------------------------- OPTION 1 -------------------------- 
RS-* and PS-* family
CLR:
RS256, RS384, RS512 and PS256, PS384, PS512 signatures require
  RSACryptoServiceProvider (usually private) key of corresponding
  length. CSP need to be forced to use Microsoft Enhanced RSA and AES
  Cryptographic Provider. Which usually can be done be re-importing
  RSAParameters. See http://clrsecurity.codeplex.com/discussions/243156
  for details.
-------------------------- OPTION 2 -------------------------- 
CORECLR: RS256, RS384, RS512 signatures require RSA (usually private) key of corresponding length.

","I know this post is old, but it took me forever to figure this out, so I thought I would share.
To test I created RSA keys using OpenSSL:
openssl genrsa -out privateKey.pem 512
openssl rsa -in privateKey.pem -pubout -out publicKey.pem

You will need the following 2 nuget packages:

https://github.com/dvsekhvalnov/jose-jwt
http://www.bouncycastle.org/csharp/

Test Code
public static void Test()
{
        string publicKey = File.ReadAllText(@""W:\Dev\Temp\rsa_keys\publicKey.pem"");
        string privateKey = File.ReadAllText(@""W:\Dev\Temp\rsa_keys\privateKey.pem"");

        var claims = new List<Claim>();
        claims.Add(new Claim(""claim1"", ""value1""));
        claims.Add(new Claim(""claim2"", ""value2""));
        claims.Add(new Claim(""claim3"", ""value3""));

        var token = CreateToken(claims, privateKey);
        var payload = DecodeToken(token, publicKey);
    }

Create Token
    public static string CreateToken(List<Claim> claims, string privateRsaKey)
    {
        RSAParameters rsaParams;
        using (var tr = new StringReader(privateRsaKey))
        {
            var pemReader = new PemReader(tr);
            var keyPair = pemReader.ReadObject() as AsymmetricCipherKeyPair;
            if (keyPair == null)
            {
                throw new Exception(""Could not read RSA private key"");
            } 
            var privateRsaParams = keyPair.Private as RsaPrivateCrtKeyParameters;
            rsaParams = DotNetUtilities.ToRSAParameters(privateRsaParams);
        }
        using (RSACryptoServiceProvider rsa = new RSACryptoServiceProvider())
        {
            rsa.ImportParameters(rsaParams);
            Dictionary<string, object> payload = claims.ToDictionary(k => k.Type, v => (object)v.Value);
            return Jose.JWT.Encode(payload, rsa, Jose.JwsAlgorithm.RS256);
        }
    }

Decode Token
    public static string DecodeToken(string token, string publicRsaKey)
    {
        RSAParameters rsaParams;

        using (var tr = new StringReader(publicRsaKey))
        {
            var pemReader = new PemReader(tr);
            var publicKeyParams = pemReader.ReadObject() as RsaKeyParameters;
            if (publicKeyParams == null)
            {
                throw new Exception(""Could not read RSA public key"");
            }
            rsaParams = DotNetUtilities.ToRSAParameters(publicKeyParams);
        }
        using (RSACryptoServiceProvider rsa = new RSACryptoServiceProvider())
        {
            rsa.ImportParameters(rsaParams);
            // This will throw if the signature is invalid
            return Jose.JWT.Decode(token, rsa, Jose.JwsAlgorithm.RS256);  
        }
    }

I found https://jwt.io/ a great resource to test your tokens
","14931","<c#><encryption><rsa><jwt><sha256>","11","20","6","2019-07-02 18:50:30","","2","9","2348125","","2019-04-23 19:20:37","2016-08-05 17:17:39",""
"38794670","How to create encrypted JWT in C# using RS256 with RSA private key","I am using the jose-jwt library and want to create a signed JWT in C# using the RS256 algorithm for encryption. I have no experience with cryptography, so please excuse my ignorance. I see the following example in the docs:
var payload = new Dictionary<string, object>()
{
    { ""sub"", ""mr.x@contoso.com"" },
    { ""exp"", 1300819380 }
};

var privateKey=new X509Certificate2(""my-key.p12"", ""password"", X509KeyStorageFlags.Exportable | X509KeyStorageFlags.MachineKeySet).PrivateKey as RSACryptoServiceProvider;

string token=Jose.JWT.Encode(payload, privateKey, JwsAlgorithm.RS256);

which shows the use of a p12 file, but how do I use an RSA key file of the form below? I am looking at the docs for X509Certificate2, but I see no option for RSA private keys. It appears to only accept PKCS7, which I understand to be public keys.
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCqGKukO1De7zhZj6+H0qtjTkVxwTCpvKe4eCZ0FPqri0cb2JZfXJ/DgYSF6vUp
wmJG8wVQZKjeGcjDOL5UlsuusFncCzWBQ7RKNUSesmQRMSGkVb1/3j+skZ6UtW+5u09lHNsj6tQ5
1s1SPrCBkedbNf0Tp0GbMJDyR4e9T04ZZwIDAQABAoGAFijko56+qGyN8M0RVyaRAXz++xTqHBLh
3tx4VgMtrQ+WEgCjhoTwo23KMBAuJGSYnRmoBZM3lMfTKevIkAidPExvYCdm5dYq3XToLkkLv5L2
pIIVOFMDG+KESnAFV7l2c+cnzRMW0+b6f8mR1CJzZuxVLL6Q02fvLi55/mbSYxECQQDeAw6fiIQX
GukBI4eMZZt4nscy2o12KyYner3VpoeE+Np2q+Z3pvAMd/aNzQ/W9WaI+NRfcxUJrmfPwIGm63il
AkEAxCL5HQb2bQr4ByorcMWm/hEP2MZzROV73yF41hPsRC9m66KrheO9HPTJuo3/9s5p+sqGxOlF
L0NDt4SkosjgGwJAFklyR1uZ/wPJjj611cdBcztlPdqoxssQGnh85BzCj/u3WqBpE2vjvyyvyI5k
X6zk7S0ljKtt2jny2+00VsBerQJBAJGC1Mg5Oydo5NwD6BiROrPxGo2bpTbu/fhrT8ebHkTz2epl
U9VQQSQzY1oZMVX8i1m5WUTLPz2yLJIBQVdXqhMCQBGoiuSoSjafUhV7i1cEGpb88h5NBYZzWXGZ
37sJ5QsW+sJyoNde3xH8vdXhzU7eT82D6X/scw9RZz+/6rCJ4p0=
-----END RSA PRIVATE KEY-----

Finally, what is the difference between the two options listed in the docs, and how do I choose between the two?

-------------------------- OPTION 1 -------------------------- 
RS-* and PS-* family
CLR:
RS256, RS384, RS512 and PS256, PS384, PS512 signatures require
  RSACryptoServiceProvider (usually private) key of corresponding
  length. CSP need to be forced to use Microsoft Enhanced RSA and AES
  Cryptographic Provider. Which usually can be done be re-importing
  RSAParameters. See http://clrsecurity.codeplex.com/discussions/243156
  for details.
-------------------------- OPTION 2 -------------------------- 
CORECLR: RS256, RS384, RS512 signatures require RSA (usually private) key of corresponding length.

","If you use a public certificate and .NET 4.6,for decoding you can use:
string token = ""eyJhbGciOiJSUzI1NiIsInR...."";
string certificate = ""MIICnzCCAYcCBgFd2yEPx...."";
var publicKey = new X509Certificate2(Convert.FromBase64String(certificate )).GetRSAPublicKey();
string decoded = JWT.Decode(token, publicKey, JwsAlgorithm.RS256);

","14931","<c#><encryption><rsa><jwt><sha256>","11","0","6","2019-07-02 18:50:30","","2","9","2348125","","2019-04-23 19:20:37","2016-08-05 17:17:39",""
"38794670","How to create encrypted JWT in C# using RS256 with RSA private key","I am using the jose-jwt library and want to create a signed JWT in C# using the RS256 algorithm for encryption. I have no experience with cryptography, so please excuse my ignorance. I see the following example in the docs:
var payload = new Dictionary<string, object>()
{
    { ""sub"", ""mr.x@contoso.com"" },
    { ""exp"", 1300819380 }
};

var privateKey=new X509Certificate2(""my-key.p12"", ""password"", X509KeyStorageFlags.Exportable | X509KeyStorageFlags.MachineKeySet).PrivateKey as RSACryptoServiceProvider;

string token=Jose.JWT.Encode(payload, privateKey, JwsAlgorithm.RS256);

which shows the use of a p12 file, but how do I use an RSA key file of the form below? I am looking at the docs for X509Certificate2, but I see no option for RSA private keys. It appears to only accept PKCS7, which I understand to be public keys.
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCqGKukO1De7zhZj6+H0qtjTkVxwTCpvKe4eCZ0FPqri0cb2JZfXJ/DgYSF6vUp
wmJG8wVQZKjeGcjDOL5UlsuusFncCzWBQ7RKNUSesmQRMSGkVb1/3j+skZ6UtW+5u09lHNsj6tQ5
1s1SPrCBkedbNf0Tp0GbMJDyR4e9T04ZZwIDAQABAoGAFijko56+qGyN8M0RVyaRAXz++xTqHBLh
3tx4VgMtrQ+WEgCjhoTwo23KMBAuJGSYnRmoBZM3lMfTKevIkAidPExvYCdm5dYq3XToLkkLv5L2
pIIVOFMDG+KESnAFV7l2c+cnzRMW0+b6f8mR1CJzZuxVLL6Q02fvLi55/mbSYxECQQDeAw6fiIQX
GukBI4eMZZt4nscy2o12KyYner3VpoeE+Np2q+Z3pvAMd/aNzQ/W9WaI+NRfcxUJrmfPwIGm63il
AkEAxCL5HQb2bQr4ByorcMWm/hEP2MZzROV73yF41hPsRC9m66KrheO9HPTJuo3/9s5p+sqGxOlF
L0NDt4SkosjgGwJAFklyR1uZ/wPJjj611cdBcztlPdqoxssQGnh85BzCj/u3WqBpE2vjvyyvyI5k
X6zk7S0ljKtt2jny2+00VsBerQJBAJGC1Mg5Oydo5NwD6BiROrPxGo2bpTbu/fhrT8ebHkTz2epl
U9VQQSQzY1oZMVX8i1m5WUTLPz2yLJIBQVdXqhMCQBGoiuSoSjafUhV7i1cEGpb88h5NBYZzWXGZ
37sJ5QsW+sJyoNde3xH8vdXhzU7eT82D6X/scw9RZz+/6rCJ4p0=
-----END RSA PRIVATE KEY-----

Finally, what is the difference between the two options listed in the docs, and how do I choose between the two?

-------------------------- OPTION 1 -------------------------- 
RS-* and PS-* family
CLR:
RS256, RS384, RS512 and PS256, PS384, PS512 signatures require
  RSACryptoServiceProvider (usually private) key of corresponding
  length. CSP need to be forced to use Microsoft Enhanced RSA and AES
  Cryptographic Provider. Which usually can be done be re-importing
  RSAParameters. See http://clrsecurity.codeplex.com/discussions/243156
  for details.
-------------------------- OPTION 2 -------------------------- 
CORECLR: RS256, RS384, RS512 signatures require RSA (usually private) key of corresponding length.

","
RS256 is a Signature Algorithm not an Encryption Algorithm 
Encryption is done with the public key
Here is the code to create an encrypted JWT:
var cert = new X509Certificate2("".\\key.cer"");
var rsa = (RSACryptoServiceProvider) cert.PublicKey.Key;

var payload = new Dictionary<string, object>()
{
  {""sub"", ""mr.x@contoso.com""},
  {""exp"", 1300819380}
};

var encryptedToken =
  JWT.Encode(
    payload,
    rsa,
    JweAlgorithm.RSA_OAEP,
    JweEncryption.A256CBC_HS512,
    null);


","14931","<c#><encryption><rsa><jwt><sha256>","11","0","6","2019-07-02 18:50:30","","2","9","2348125","","2019-04-23 19:20:37","2016-08-05 17:17:39",""
"38794670","How to create encrypted JWT in C# using RS256 with RSA private key","I am using the jose-jwt library and want to create a signed JWT in C# using the RS256 algorithm for encryption. I have no experience with cryptography, so please excuse my ignorance. I see the following example in the docs:
var payload = new Dictionary<string, object>()
{
    { ""sub"", ""mr.x@contoso.com"" },
    { ""exp"", 1300819380 }
};

var privateKey=new X509Certificate2(""my-key.p12"", ""password"", X509KeyStorageFlags.Exportable | X509KeyStorageFlags.MachineKeySet).PrivateKey as RSACryptoServiceProvider;

string token=Jose.JWT.Encode(payload, privateKey, JwsAlgorithm.RS256);

which shows the use of a p12 file, but how do I use an RSA key file of the form below? I am looking at the docs for X509Certificate2, but I see no option for RSA private keys. It appears to only accept PKCS7, which I understand to be public keys.
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCqGKukO1De7zhZj6+H0qtjTkVxwTCpvKe4eCZ0FPqri0cb2JZfXJ/DgYSF6vUp
wmJG8wVQZKjeGcjDOL5UlsuusFncCzWBQ7RKNUSesmQRMSGkVb1/3j+skZ6UtW+5u09lHNsj6tQ5
1s1SPrCBkedbNf0Tp0GbMJDyR4e9T04ZZwIDAQABAoGAFijko56+qGyN8M0RVyaRAXz++xTqHBLh
3tx4VgMtrQ+WEgCjhoTwo23KMBAuJGSYnRmoBZM3lMfTKevIkAidPExvYCdm5dYq3XToLkkLv5L2
pIIVOFMDG+KESnAFV7l2c+cnzRMW0+b6f8mR1CJzZuxVLL6Q02fvLi55/mbSYxECQQDeAw6fiIQX
GukBI4eMZZt4nscy2o12KyYner3VpoeE+Np2q+Z3pvAMd/aNzQ/W9WaI+NRfcxUJrmfPwIGm63il
AkEAxCL5HQb2bQr4ByorcMWm/hEP2MZzROV73yF41hPsRC9m66KrheO9HPTJuo3/9s5p+sqGxOlF
L0NDt4SkosjgGwJAFklyR1uZ/wPJjj611cdBcztlPdqoxssQGnh85BzCj/u3WqBpE2vjvyyvyI5k
X6zk7S0ljKtt2jny2+00VsBerQJBAJGC1Mg5Oydo5NwD6BiROrPxGo2bpTbu/fhrT8ebHkTz2epl
U9VQQSQzY1oZMVX8i1m5WUTLPz2yLJIBQVdXqhMCQBGoiuSoSjafUhV7i1cEGpb88h5NBYZzWXGZ
37sJ5QsW+sJyoNde3xH8vdXhzU7eT82D6X/scw9RZz+/6rCJ4p0=
-----END RSA PRIVATE KEY-----

Finally, what is the difference between the two options listed in the docs, and how do I choose between the two?

-------------------------- OPTION 1 -------------------------- 
RS-* and PS-* family
CLR:
RS256, RS384, RS512 and PS256, PS384, PS512 signatures require
  RSACryptoServiceProvider (usually private) key of corresponding
  length. CSP need to be forced to use Microsoft Enhanced RSA and AES
  Cryptographic Provider. Which usually can be done be re-importing
  RSAParameters. See http://clrsecurity.codeplex.com/discussions/243156
  for details.
-------------------------- OPTION 2 -------------------------- 
CORECLR: RS256, RS384, RS512 signatures require RSA (usually private) key of corresponding length.

","If you want to use a certificate, you can retrieve it by it's thumbprint using this method
private X509Certificate2 GetByThumbprint(string Thumbprint)
{
    var localStore = new X509Store(StoreName.My, StoreLocation.LocalMachine);
    localStore.Open(OpenFlags.ReadOnly);
    return localStore.Certificates//.Find(X509FindType.FindByKeyUsage, X509KeyUsageFlags.DigitalSignature, false)
        .Find(X509FindType.FindByThumbprint, Thumbprint, false)
        .OfType<X509Certificate2>().First();
}

and then:
private JwtSecurityToken GenerateJWT()
{
    var securityKey = new Microsoft.IdentityModel.Tokens.X509SecurityKey(GetByThumbprint(""YOUR-CERT-THUMBPRINT-HERE""));

    var credentials = new Microsoft.IdentityModel.Tokens.SigningCredentials(securityKey, ""RS256"");

    var JWTHeader = new JwtHeader(credentials);

    var payload = new JwtPayload
    {
        { ""iss"", ""Issuer-here""},
        { ""exp"", (Int32)(DateTime.UtcNow.AddHours(1).Subtract(new DateTime(1970, 1, 1))).TotalSeconds},
        { ""iat"", (Int32)(DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1))).TotalSeconds}
    };

    var token = new JwtSecurityToken(JWTHeader, payload);
    return token;
}

","14931","<c#><encryption><rsa><jwt><sha256>","11","1","6","2019-07-02 18:50:30","","2","9","2348125","","2019-04-23 19:20:37","2016-08-05 17:17:39",""
"38794670","How to create encrypted JWT in C# using RS256 with RSA private key","I am using the jose-jwt library and want to create a signed JWT in C# using the RS256 algorithm for encryption. I have no experience with cryptography, so please excuse my ignorance. I see the following example in the docs:
var payload = new Dictionary<string, object>()
{
    { ""sub"", ""mr.x@contoso.com"" },
    { ""exp"", 1300819380 }
};

var privateKey=new X509Certificate2(""my-key.p12"", ""password"", X509KeyStorageFlags.Exportable | X509KeyStorageFlags.MachineKeySet).PrivateKey as RSACryptoServiceProvider;

string token=Jose.JWT.Encode(payload, privateKey, JwsAlgorithm.RS256);

which shows the use of a p12 file, but how do I use an RSA key file of the form below? I am looking at the docs for X509Certificate2, but I see no option for RSA private keys. It appears to only accept PKCS7, which I understand to be public keys.
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCqGKukO1De7zhZj6+H0qtjTkVxwTCpvKe4eCZ0FPqri0cb2JZfXJ/DgYSF6vUp
wmJG8wVQZKjeGcjDOL5UlsuusFncCzWBQ7RKNUSesmQRMSGkVb1/3j+skZ6UtW+5u09lHNsj6tQ5
1s1SPrCBkedbNf0Tp0GbMJDyR4e9T04ZZwIDAQABAoGAFijko56+qGyN8M0RVyaRAXz++xTqHBLh
3tx4VgMtrQ+WEgCjhoTwo23KMBAuJGSYnRmoBZM3lMfTKevIkAidPExvYCdm5dYq3XToLkkLv5L2
pIIVOFMDG+KESnAFV7l2c+cnzRMW0+b6f8mR1CJzZuxVLL6Q02fvLi55/mbSYxECQQDeAw6fiIQX
GukBI4eMZZt4nscy2o12KyYner3VpoeE+Np2q+Z3pvAMd/aNzQ/W9WaI+NRfcxUJrmfPwIGm63il
AkEAxCL5HQb2bQr4ByorcMWm/hEP2MZzROV73yF41hPsRC9m66KrheO9HPTJuo3/9s5p+sqGxOlF
L0NDt4SkosjgGwJAFklyR1uZ/wPJjj611cdBcztlPdqoxssQGnh85BzCj/u3WqBpE2vjvyyvyI5k
X6zk7S0ljKtt2jny2+00VsBerQJBAJGC1Mg5Oydo5NwD6BiROrPxGo2bpTbu/fhrT8ebHkTz2epl
U9VQQSQzY1oZMVX8i1m5WUTLPz2yLJIBQVdXqhMCQBGoiuSoSjafUhV7i1cEGpb88h5NBYZzWXGZ
37sJ5QsW+sJyoNde3xH8vdXhzU7eT82D6X/scw9RZz+/6rCJ4p0=
-----END RSA PRIVATE KEY-----

Finally, what is the difference between the two options listed in the docs, and how do I choose between the two?

-------------------------- OPTION 1 -------------------------- 
RS-* and PS-* family
CLR:
RS256, RS384, RS512 and PS256, PS384, PS512 signatures require
  RSACryptoServiceProvider (usually private) key of corresponding
  length. CSP need to be forced to use Microsoft Enhanced RSA and AES
  Cryptographic Provider. Which usually can be done be re-importing
  RSAParameters. See http://clrsecurity.codeplex.com/discussions/243156
  for details.
-------------------------- OPTION 2 -------------------------- 
CORECLR: RS256, RS384, RS512 signatures require RSA (usually private) key of corresponding length.

","The key to this question is using JWT and Bouncy castle libraries for encoding the token and signing it respectively.

JWT for encoding and decoding JWT tokens 
Bouncy Castle supports encryption and decryption, especially RS256 get it here

First, you need to transform the private key to the form of RSA parameters. Then you need to pass the RSA parameters to the RSA algorithm as the private key. Lastly, you use the JWT library to encode and sign the token.
    public string GenerateJWTToken(string rsaPrivateKey)
    {
        var rsaParams = GetRsaParameters(rsaPrivateKey);
        var encoder = GetRS256JWTEncoder(rsaParams);

        // create the payload according to your need
        var payload = new Dictionary<string, object>
        {
            { ""iss"", """"},
            { ""sub"", """" },
            // and other key-values 
        };

        // add headers. 'alg' and 'typ' key-values are added automatically.
        var header = new Dictionary<string, object>
        {
            { ""{header_key}"", ""{your_private_key_id}"" },
        };

        var token = encoder.Encode(header,payload, new byte[0]);

        return token;
    }

    private static IJwtEncoder GetRS256JWTEncoder(RSAParameters rsaParams)
    {
        var csp = new RSACryptoServiceProvider();
        csp.ImportParameters(rsaParams);

        var algorithm = new RS256Algorithm(csp, csp);
        var serializer = new JsonNetSerializer();
        var urlEncoder = new JwtBase64UrlEncoder();
        var encoder = new JwtEncoder(algorithm, serializer, urlEncoder);

        return encoder;
    }

    private static RSAParameters GetRsaParameters(string rsaPrivateKey)
    {
        var byteArray = Encoding.ASCII.GetBytes(rsaPrivateKey);
        using (var ms = new MemoryStream(byteArray))
        {
            using (var sr = new StreamReader(ms))
            {
                // use Bouncy Castle to convert the private key to RSA parameters
                var pemReader = new PemReader(sr);
                var keyPair = pemReader.ReadObject() as AsymmetricCipherKeyPair;
                return DotNetUtilities.ToRSAParameters(keyPair.Private as RsaPrivateCrtKeyParameters);
            }
        }
    }

ps: the RSA private key should have the following format:
-----BEGIN RSA PRIVATE KEY-----
{base64 formatted value}
-----END RSA PRIVATE KEY-----
","14931","<c#><encryption><rsa><jwt><sha256>","11","0","6","2019-07-02 18:50:30","","2","9","2348125","","2019-04-23 19:20:37","2016-08-05 17:17:39",""
"9660079","Why base64 a sha1/sha256 hash?","can anybody tell me why amazon want a base64 of the hmac-sha1/sha256 hash?
http://docs.amazonwebservices.com/AmazonSimpleDB/latest/DeveloperGuide/HMACAuth.html
I know that base64 is to represent binary date in ascii but sha1/sha256 is already ascii – I mean its only hex.
Thanks
Timo
","Those hashes are not ASCII–the reason you see hex digits is because the software you use to generate them takes the binary output of the digest and turns it into an ASCII string of hex digits.
For instance, the MD5 digest will fill an array of 16 bytes. You can also represent it as a string of 32 characters, but the most basic form of the digest is still the array of bytes.
When you change an array of bytes into a hex string, you need 8 bits (one full character) to represent every 4 bits of data. Although it's not frequently called that way, you could say that this uses ""base16"" encoding, since you're grabbing 4 bits at a time and mapping them to a 16-character alphabet.
Base64, on the other hand, grabs 6 bits at a time and maps them to a 64-character alphabet. This means that you need 8 bits (again, one full character) to represent every 6 bits of data, which has half the wasted bits of base16. A base16-encoded string will always be twice as big as the original; a base64-encoded string will only be four thirds as big. For a SHA256 hash, base16 does 64 bytes, but base64 does approximately 43.
","14840","<amazon-web-services><base64><sha1><sha256><hmac>","8","18","2","2016-09-16 17:20:53","9660100","0","2","","","","2012-03-11 23:45:30",""
"9660079","Why base64 a sha1/sha256 hash?","can anybody tell me why amazon want a base64 of the hmac-sha1/sha256 hash?
http://docs.amazonwebservices.com/AmazonSimpleDB/latest/DeveloperGuide/HMACAuth.html
I know that base64 is to represent binary date in ascii but sha1/sha256 is already ascii – I mean its only hex.
Thanks
Timo
","For example, the bytes, hex, and base64 samples below encode the same bytes:

bytes: 243 48 133 140 73 157 28 136 11 29 189 101 194 101 116 64 172 227 220 78
hex: f330858c499d1c880b1dbd65c2657440ace3dc4e
base64: 8zCFjEmdHIgLHb1lwmV0QKzj3E4=.

It's only that AWS requires its values to be base64 encoded.
","14840","<amazon-web-services><base64><sha1><sha256><hmac>","8","5","2","2016-09-16 17:20:53","9660100","0","2","","","","2012-03-11 23:45:30",""
"25372035","Not able to validate JSON Web token with .net - key to short","I have used JSONWebToken npm module to generate a jot:
var jwt = require('jsonwebtoken');

var payload = {
    ""iss"": ""https://secure.example.com/"",
    ""exp"": 1410819380,
    ""http://example.com/orgnum"": ""987987987"",
    ""http://example.com/user"": ""me@example.com""
};

var token = jwt.sign(payload, 'secret');

console.log(token);

This gives me the following output:

eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3NlY3VyZS5leGFtcGxlLmNvbS8iLCJleHAiOjE0MTA4MTkzODAsImh0dHA6Ly9leGFtcGxlLmNvbS9vcmdudW0iOiI5ODc5ODc5ODciLCJodHRwOi8vZXhhbXBsZS5jb20vdXNlciI6Im1lQGV4YW1wbGUuY29tIiwiaWF0IjoxNDA4Mzk0Mjk2fQ.5X5LTg4wxDF2p49xtsRcG4S9Yk4qSfW1tMEU0AquBhc

Since I'm not specifying what algorithm I want, it uses SHA256.
Now, I try to verify this in c#. That didn't turn out easy...
I get an exception about the key size:

IDX10603: The 'System.IdentityModel.Tokens.InMemorySymmetricSecurityKey' cannot have less than: '128' bits.
  Parameternavn: key.KeySize
  The actual size was 48.

I I try to extend the key, I get a new error when creating the symmetric key:

Invalid length for a Base-64 char array or string

I recon this has something to do with the way I'm telling the .net code about my key. Since the SymmetricKeyIssuerSecurityTokenProvider constructor parameter is named base64Key, I have tryed to Base64Url-encode my key:
        var secret =  Base64UrlEncoder.Encode(""secret"");
        TokenValidationParameters validationParameters = new TokenValidationParameters
        {                
            ValidateIssuer = false,
            ValidateAudience = false,
            IssuerSigningTokens = new SymmetricKeyIssuerSecurityTokenProvider(issuer, secret).SecurityTokens
        };

So, what are I missing here?
Why can jsonwebtoken generate and validate jots with short keys while .net can not?
And why can't .net accept the keys I give it?
Here's the complete .net code with a jot signed with a long key:
        var jwtToken =
            ""eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3NlY3VyZS5leGFtcGxlLmNvbS8iLCJleHAiOjE0MTA4MTkzODAsImh0dHA6Ly9leGFtcGxlLmNvbS9vcmdudW0iOiI5ODc5ODc5ODciLCJodHRwOi8vZXhhbXBsZS5jb20vdXNlciI6Im1lQGV4YW1wbGUuY29tIiwiaWF0IjoxNDA4Mzk1NjY4fQ.ZceiiEO_Mn5_GZp5D_r68VTT33fbocn1BTTznD6u3cs"";
        var secret = Base64UrlEncoder.Encode(""super duper secret with some more on top"");


        TokenValidationParameters validationParameters = new TokenValidationParameters
            {
                ValidateIssuer = false,
                ValidateAudience = false,
                IssuerSigningTokens = new SymmetricKeyIssuerSecurityTokenProvider(""issuer"", secret).SecurityTokens
            };


        JwtSecurityTokenHandler tokenHandler = new JwtSecurityTokenHandler()
            {
                Configuration = new SecurityTokenHandlerConfiguration()
                    {
                        CertificateValidationMode = X509CertificateValidationMode.None
                    }
            };

        SecurityToken validatedToken;
        var claimsPrincipal = tokenHandler.ValidateToken(jwtToken, validationParameters, out validatedToken);
        return claimsPrincipal.Claims;

Updated: 
I'm only using Microsoft-stuff in this code.  I'm using the Owin packages Microsoft.Owin.Security.Jwt version 2.1.0 with System.IdentityModel.Tokens.Jwt version 4.0.0-RC2.
There are multiple blog posts out there stating that you'll need to manually update the System.IdentityModel.Tokens.Jwt package.
","I'm not sure what API you are using, since the official Microsoft one does not contain the properties that you are using. My guess would be, you are using an outdated version.
I took the API from this Nuget package. And this is the code, that worked for me:
using System;
using System.Collections.Generic;
using System.IdentityModel.Selectors;
using System.IdentityModel.Tokens;
using System.Security.Claims;
using System.ServiceModel.Security.Tokens;
using System.Text;

namespace SO25372035
{
    class Program
    {
        static void Main()
        {
            const string tokenString =  @""eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3NlY3VyZS5leGFtcGxlLmNvbS8iLCJleHAiOjE0MTA4MTkzODAsImh0dHA6Ly9leGFtcGxlLmNvbS9vcmdudW0iOiI5ODc5ODc5ODciLCJodHRwOi8vZXhhbXBsZS5jb20vdXNlciI6Im1lQGV4YW1wbGUuY29tIiwiaWF0IjoxNDA4NDE5NTQwfQ.jW9KChUTcgXMDp5CnTiXovtQZsN4X-M-V6_4rzu8Zk8"";
            JwtSecurityToken tokenReceived = new JwtSecurityToken(tokenString);

            byte[] keyBytes = Encoding.UTF8.GetBytes(""secret"");
            if (keyBytes.Length < 64 && tokenReceived.SignatureAlgorithm == ""HS256"")
            {
                Array.Resize(ref keyBytes, 64);
            }
            TokenValidationParameters validationParameters = new TokenValidationParameters
            {
                ValidateIssuer = false,
                AudienceUriMode = AudienceUriMode.Never,
                SigningToken = new BinarySecretSecurityToken(keyBytes),
            };

            JwtSecurityTokenHandler tokenHandler = new JwtSecurityTokenHandler();

            ClaimsPrincipal claimsPrincipal = tokenHandler.ValidateToken(tokenReceived, validationParameters);
            IEnumerable<Claim> a = claimsPrincipal.Claims;
            foreach (var claim in a)
            {
                Console.WriteLine(claim);
            }
        }
    }
}

Note, that I had to resize the array containing the key so that key length passes the validation. It appears that they key length for HMAC is always equal to the block size, and for SHA256 it's 512 bits. There is MinimumSymmetricKeySizeInBits static property that defines the minimum length of a SimmetricKey, but it appears it can't be set to be less than 128.
","14839","<c#><.net><owin><sha256><jwt>","2","5","3","2016-01-16 15:45:28","","2","3","11956","","2014-08-19 06:44:50","2014-08-18 21:06:58",""
"25372035","Not able to validate JSON Web token with .net - key to short","I have used JSONWebToken npm module to generate a jot:
var jwt = require('jsonwebtoken');

var payload = {
    ""iss"": ""https://secure.example.com/"",
    ""exp"": 1410819380,
    ""http://example.com/orgnum"": ""987987987"",
    ""http://example.com/user"": ""me@example.com""
};

var token = jwt.sign(payload, 'secret');

console.log(token);

This gives me the following output:

eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3NlY3VyZS5leGFtcGxlLmNvbS8iLCJleHAiOjE0MTA4MTkzODAsImh0dHA6Ly9leGFtcGxlLmNvbS9vcmdudW0iOiI5ODc5ODc5ODciLCJodHRwOi8vZXhhbXBsZS5jb20vdXNlciI6Im1lQGV4YW1wbGUuY29tIiwiaWF0IjoxNDA4Mzk0Mjk2fQ.5X5LTg4wxDF2p49xtsRcG4S9Yk4qSfW1tMEU0AquBhc

Since I'm not specifying what algorithm I want, it uses SHA256.
Now, I try to verify this in c#. That didn't turn out easy...
I get an exception about the key size:

IDX10603: The 'System.IdentityModel.Tokens.InMemorySymmetricSecurityKey' cannot have less than: '128' bits.
  Parameternavn: key.KeySize
  The actual size was 48.

I I try to extend the key, I get a new error when creating the symmetric key:

Invalid length for a Base-64 char array or string

I recon this has something to do with the way I'm telling the .net code about my key. Since the SymmetricKeyIssuerSecurityTokenProvider constructor parameter is named base64Key, I have tryed to Base64Url-encode my key:
        var secret =  Base64UrlEncoder.Encode(""secret"");
        TokenValidationParameters validationParameters = new TokenValidationParameters
        {                
            ValidateIssuer = false,
            ValidateAudience = false,
            IssuerSigningTokens = new SymmetricKeyIssuerSecurityTokenProvider(issuer, secret).SecurityTokens
        };

So, what are I missing here?
Why can jsonwebtoken generate and validate jots with short keys while .net can not?
And why can't .net accept the keys I give it?
Here's the complete .net code with a jot signed with a long key:
        var jwtToken =
            ""eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3NlY3VyZS5leGFtcGxlLmNvbS8iLCJleHAiOjE0MTA4MTkzODAsImh0dHA6Ly9leGFtcGxlLmNvbS9vcmdudW0iOiI5ODc5ODc5ODciLCJodHRwOi8vZXhhbXBsZS5jb20vdXNlciI6Im1lQGV4YW1wbGUuY29tIiwiaWF0IjoxNDA4Mzk1NjY4fQ.ZceiiEO_Mn5_GZp5D_r68VTT33fbocn1BTTznD6u3cs"";
        var secret = Base64UrlEncoder.Encode(""super duper secret with some more on top"");


        TokenValidationParameters validationParameters = new TokenValidationParameters
            {
                ValidateIssuer = false,
                ValidateAudience = false,
                IssuerSigningTokens = new SymmetricKeyIssuerSecurityTokenProvider(""issuer"", secret).SecurityTokens
            };


        JwtSecurityTokenHandler tokenHandler = new JwtSecurityTokenHandler()
            {
                Configuration = new SecurityTokenHandlerConfiguration()
                    {
                        CertificateValidationMode = X509CertificateValidationMode.None
                    }
            };

        SecurityToken validatedToken;
        var claimsPrincipal = tokenHandler.ValidateToken(jwtToken, validationParameters, out validatedToken);
        return claimsPrincipal.Claims;

Updated: 
I'm only using Microsoft-stuff in this code.  I'm using the Owin packages Microsoft.Owin.Security.Jwt version 2.1.0 with System.IdentityModel.Tokens.Jwt version 4.0.0-RC2.
There are multiple blog posts out there stating that you'll need to manually update the System.IdentityModel.Tokens.Jwt package.
","Try to use TextEncodings.Base64Url.Decode api from Microsoft.Owin.Security.Jwt package to decode the signing key
Then I do following to validate token:
var principal = new JwtSecurityTokenHandler().ValidateToken(jwtheader,
                        new TokenValidationParameters()
                        {
                            RequireExpirationTime = true,
                            ValidAudience = audience,
                            ValidIssuer = issuer,
                            IssuerSigningKey = new InMemorySymmetricSecurityKey(secret)
                        }, out token);

","14839","<c#><.net><owin><sha256><jwt>","2","2","3","2016-01-16 15:45:28","","2","3","11956","","2014-08-19 06:44:50","2014-08-18 21:06:58",""
"25372035","Not able to validate JSON Web token with .net - key to short","I have used JSONWebToken npm module to generate a jot:
var jwt = require('jsonwebtoken');

var payload = {
    ""iss"": ""https://secure.example.com/"",
    ""exp"": 1410819380,
    ""http://example.com/orgnum"": ""987987987"",
    ""http://example.com/user"": ""me@example.com""
};

var token = jwt.sign(payload, 'secret');

console.log(token);

This gives me the following output:

eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3NlY3VyZS5leGFtcGxlLmNvbS8iLCJleHAiOjE0MTA4MTkzODAsImh0dHA6Ly9leGFtcGxlLmNvbS9vcmdudW0iOiI5ODc5ODc5ODciLCJodHRwOi8vZXhhbXBsZS5jb20vdXNlciI6Im1lQGV4YW1wbGUuY29tIiwiaWF0IjoxNDA4Mzk0Mjk2fQ.5X5LTg4wxDF2p49xtsRcG4S9Yk4qSfW1tMEU0AquBhc

Since I'm not specifying what algorithm I want, it uses SHA256.
Now, I try to verify this in c#. That didn't turn out easy...
I get an exception about the key size:

IDX10603: The 'System.IdentityModel.Tokens.InMemorySymmetricSecurityKey' cannot have less than: '128' bits.
  Parameternavn: key.KeySize
  The actual size was 48.

I I try to extend the key, I get a new error when creating the symmetric key:

Invalid length for a Base-64 char array or string

I recon this has something to do with the way I'm telling the .net code about my key. Since the SymmetricKeyIssuerSecurityTokenProvider constructor parameter is named base64Key, I have tryed to Base64Url-encode my key:
        var secret =  Base64UrlEncoder.Encode(""secret"");
        TokenValidationParameters validationParameters = new TokenValidationParameters
        {                
            ValidateIssuer = false,
            ValidateAudience = false,
            IssuerSigningTokens = new SymmetricKeyIssuerSecurityTokenProvider(issuer, secret).SecurityTokens
        };

So, what are I missing here?
Why can jsonwebtoken generate and validate jots with short keys while .net can not?
And why can't .net accept the keys I give it?
Here's the complete .net code with a jot signed with a long key:
        var jwtToken =
            ""eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3NlY3VyZS5leGFtcGxlLmNvbS8iLCJleHAiOjE0MTA4MTkzODAsImh0dHA6Ly9leGFtcGxlLmNvbS9vcmdudW0iOiI5ODc5ODc5ODciLCJodHRwOi8vZXhhbXBsZS5jb20vdXNlciI6Im1lQGV4YW1wbGUuY29tIiwiaWF0IjoxNDA4Mzk1NjY4fQ.ZceiiEO_Mn5_GZp5D_r68VTT33fbocn1BTTznD6u3cs"";
        var secret = Base64UrlEncoder.Encode(""super duper secret with some more on top"");


        TokenValidationParameters validationParameters = new TokenValidationParameters
            {
                ValidateIssuer = false,
                ValidateAudience = false,
                IssuerSigningTokens = new SymmetricKeyIssuerSecurityTokenProvider(""issuer"", secret).SecurityTokens
            };


        JwtSecurityTokenHandler tokenHandler = new JwtSecurityTokenHandler()
            {
                Configuration = new SecurityTokenHandlerConfiguration()
                    {
                        CertificateValidationMode = X509CertificateValidationMode.None
                    }
            };

        SecurityToken validatedToken;
        var claimsPrincipal = tokenHandler.ValidateToken(jwtToken, validationParameters, out validatedToken);
        return claimsPrincipal.Claims;

Updated: 
I'm only using Microsoft-stuff in this code.  I'm using the Owin packages Microsoft.Owin.Security.Jwt version 2.1.0 with System.IdentityModel.Tokens.Jwt version 4.0.0-RC2.
There are multiple blog posts out there stating that you'll need to manually update the System.IdentityModel.Tokens.Jwt package.
","Correct about the key not being less that 128 bits, since support is only for AES that is the minimum.
You can use your own SignatureProvider.
I also think you are using older bits. Have a look at the latest.
http://www.nuget.org/packages/System.IdentityModel.Tokens.Jwt/
If you have any issues, let me know.
","14839","<c#><.net><owin><sha256><jwt>","2","0","3","2016-01-16 15:45:28","","2","3","11956","","2014-08-19 06:44:50","2014-08-18 21:06:58",""
"10673146","signature with SHA256","I have a smartcard and I need to sign a file with this.
That is a big problem as I see in stackover.
I couldnt use RSACryptoServiceProvider, bkz it doesnt support RSA-SHA256 alogrithm.
At First I used CAPICOM.dll , like code bellow,
SignedData sed = new SignedData();
sed.Content = ""a""; // data to sign
Signer ser = new Signer();
ser.Certificate = cc;
string singnn = sed.Sign(ser, false, CAPICOM_ENCODING_TYPE.CAPICOM_ENCODE_BASE64);

But there isnt a public key to validate my signature value,, I couldnt get a validate key from capicom.dll.
And after , 
I used X509Certificate2 , and RSACryptoServiceProvider  like code below,
        X509Certificate2 certificate = new X509Certificate2();
        // Access Personal (MY) certificate store of current user
        X509Store my = new X509Store(StoreName.My, StoreLocation.CurrentUser);
        my.Open(OpenFlags.ReadOnly);

        // Find the certificate we'll use to sign            
        RSACryptoServiceProvider csp = null;
        foreach (X509Certificate2 cert in my.Certificates)
        {
            if (cert.Subject.Contains(certSubject))
            {
                // We found it. 
                // Get its associated CSP and private key
                certificate = cert;
                csp = (RSACryptoServiceProvider)cert.PrivateKey;
            }
        }
        if (csp == null)
        {
            throw new Exception(""No valid cert was found"");
        }

        // Hash the data
        SHA1Managed sha1 = new SHA1Managed();
        UnicodeEncoding encoding = new UnicodeEncoding();
        byte[] data = encoding.GetBytes(text);
        byte[] hash = sha1.ComputeHash(data);

        //byte[] data = Encoding.UTF8.GetBytes(text);
        //HashAlgorithm sha = new SHA256Managed();
        //byte[] hash = sha.TransformFinalBlock(data, 0, data.Length);

        string key = csp.ToXmlString(false);
        // Sign the hash
        csp.PersistKeyInCsp = true;
        byte[] response = csp.SignData(data, CryptoConfig.MapNameToOID(""SHA1""));
        string signbase64 = Convert.ToBase64String(response);

It works , but I need to sign with RSA-SHA256 algorithm.
When I changw hash algorithm  like this
byte[] response = csp.SignData(data, CryptoConfig.MapNameToOID(""SHA256""));

I m getting an 

error : ""unspecified error"".

Thats my problem,
What is the sollution , or which library should I use ??
Thanks for any advice..
","RSACryptoServiceProvider does work with SHA2-based signatures, but you have to invest some effort into it.
When you use a certificate to get your RSACryptoServiceProvider it really matters what's the underlying CryptoAPI provider. By default, when you create a certificate with 'makecert', it's ""RSA-FULL"" which only supports SHA1 hashes for signature. You need the new ""RSA-AES"" one that supports SHA2.
So, you can create your certificate with an additional option: -sp ""Microsoft Enhanced RSA and AES Cryptographic Provider"" (or an equivalent -sy 24) and then your code would look like (in .NET 4.0):
var rsa = signerCertificate.PrivateKey as RSACryptoServiceProvider;
//
byte[] signature = rsa.SignData(data, CryptoConfig.CreateFromName(""SHA256""));

If you are unable to change the way your certificate is issued, there is a semi-ligitimate workaround that is based on the fact that by default RSACryptoServiceProvider is created with support for SHA2. So, the following code would also work, but it is a bit uglier:
(what this code does is it creates a new RSACryptoServiceProvider and imports the keys from the one we got from the certificate)
var rsa = signerCertificate.PrivateKey as RSACryptoServiceProvider;
// Create a new RSACryptoServiceProvider
RSACryptoServiceProvider rsaClear = new RSACryptoServiceProvider();
// Export RSA parameters from 'rsa' and import them into 'rsaClear'
rsaClear.ImportParameters(rsa.ExportParameters(true));
byte[] signature = rsaClear.SignData(data, CryptoConfig.CreateFromName(""SHA256""));

Hope you find this helpful.
","14563","<rsa><sha1><signature><sha256><rsacryptoserviceprovider>","5","13","1","2016-05-25 05:26:28","10830200","0","2","5928186","","2016-05-25 05:26:28","2012-05-20 11:50:12",""
"29860673","TLSv1.2 with SHA1?","I'm sure there is an easy answer for this, but how am I using TLSv1.2 with non-TLSv1.2 cipher suites? For example this link shows that the connection is using TLS 1.2, but is using AES_256_CBC_SHA ? I thought that all TLSv1.2 had to be SHA256 or higher?
And, paypal home shows ""Connection uses TLS 1.2"", but the cipher selected is RSA_128_RC4_SHA ???
Am I missing something? (All info using google chrome)
Can't post a screenchot of my capture because I don't have at least 10 reputation??? WTF
","If you look at Chrome's output, it should say that SHA1 is being used for message authentication, which is not actually part of the cipher.  A quick search of the Googles reveals that SHA1 is still an acceptable MAC for TLSv1.2: http://en.wikipedia.org/wiki/Transport_Layer_Security#Data_integrity
","14526","<ssl><encryption><sha256>","3","0","2","2015-04-25 04:31:39","","0","","1744886","","2015-04-25 03:58:30","2015-04-25 03:29:58",""
"29860673","TLSv1.2 with SHA1?","I'm sure there is an easy answer for this, but how am I using TLSv1.2 with non-TLSv1.2 cipher suites? For example this link shows that the connection is using TLS 1.2, but is using AES_256_CBC_SHA ? I thought that all TLSv1.2 had to be SHA256 or higher?
And, paypal home shows ""Connection uses TLS 1.2"", but the cipher selected is RSA_128_RC4_SHA ???
Am I missing something? (All info using google chrome)
Can't post a screenchot of my capture because I don't have at least 10 reputation??? WTF
","TLS 1.2 still supports all ciphers earlier SSL/TLS version defined, which includes insecure ciphers using RC4, all the EXPORT ciphers etc. But it also defines some new ciphers, like GCM ciphers and various ciphers using SHA384 as HMAC.

I thought that all TLSv1.2 had to be SHA256 or higher

No and you probably confuse this with deprecating SHA-1 as a signature algorithm for certificates. This deprecation is independent from TLS itself although certificates are usually used in connection with TLS. And use of SHA-1 or even MD5 as a HMAC for ciphers is still considered safe, because the security assumptions needed for HMAC and certificate signature are different.
Apart from that a better forum for these kind of questions would be security.stackexchange.com.
","14526","<ssl><encryption><sha256>","3","5","2","2015-04-25 04:31:39","","0","","1744886","","2015-04-25 03:58:30","2015-04-25 03:29:58",""
"11921780","How to create a mysql ""sha-256"" column?","For a password column, is there a mysql feature to store password hashed with ""sha-256""? Or should I hash it from java code (like How to hash some string with sha256 in Java? ) before I store it in database and then hash the password input every time and compare with the database column value to authenticate?
TIA.
","You can convert the value to hex and use a char(n) column with the appropriate length - 64 in this case. The conversion can be done in MySQL by using the sha2 function with hash_length set to 256.
But for security reasons you should not store passwords hashed using SHA-256.
Instead use bcrypt or PBKDF2.
Related

How can I hash a password in Java?

","14298","<java><mysql><encryption><sha256>","4","11","1","2012-08-12 11:24:31","11921797","0","1","-1","","2017-05-23 12:22:53","2012-08-12 11:22:39",""
"18546244","SHA256 performance optimization in C","I need to hash a big database of values quite often. Thus, a fast implementation of a SHA-2 hasher is needed. I'm currently using the SHA256.
The sha256_transform algorithm I'm using right now is this:
http://bradconte.com/sha256_c
(code below)
I have profiled my code and this snippet is taking exactly 96% of computing time per hash, making this function critical to my goals.
It operates on a 64-byte long binary string named data[] and outputs the result in ctx->state.
I ask for a faster version of this function. Keep in mind that even slight modifications can impact speed negatively.
#define uchar unsigned char
#define uint unsigned int

#define ROTLEFT(a,b) (((a) << (b)) | ((a) >> (32-(b))))
#define ROTRIGHT(a,b) (((a) >> (b)) | ((a) << (32-(b))))

#define CH(x,y,z) (((x) & (y)) ^ (~(x) & (z)))
#define MAJ(x,y,z) (((x) & (y)) ^ ((x) & (z)) ^ ((y) & (z)))
#define EP0(x) (ROTRIGHT(x,2) ^ ROTRIGHT(x,13) ^ ROTRIGHT(x,22))
#define EP1(x) (ROTRIGHT(x,6) ^ ROTRIGHT(x,11) ^ ROTRIGHT(x,25))
#define SIG0(x) (ROTRIGHT(x,7) ^ ROTRIGHT(x,18) ^ ((x) >> 3))
#define SIG1(x) (ROTRIGHT(x,17) ^ ROTRIGHT(x,19) ^ ((x) >> 10))

void sha256_transform(SHA256_CTX *ctx, uchar data[]) {
    uint a,b,c,d,e,f,g,h,i,j,t1,t2,m[64];

    a = ctx->state[0];
    b = ctx->state[1];
    c = ctx->state[2];
    d = ctx->state[3];
    e = ctx->state[4];
    f = ctx->state[5];
    g = ctx->state[6];
    h = ctx->state[7];

    for (i=0,j=0; i < 16; i++, j += 4)
        m[i] = (data[j] << 24) | (data[j+1] << 16) | (data[j+2] << 8) | (data[j+3]);

    for ( ; i < 64; i++)
        m[i] = SIG1(m[i-2]) + m[i-7] + SIG0(m[i-15]) + m[i-16];

    for (i = 0; i < 64; ++i) {
        t1 = h + EP1(e) + CH(e,f,g) + k[i] + m[i];
        t2 = EP0(a) + MAJ(a,b,c);
        h = g;
        g = f;
        f = e;
        e = d + t1;
        d = c;
        c = b;
        b = a;
        a = t1 + t2;
    }

    ctx->state[0] += a;
    ctx->state[1] += b;
    ctx->state[2] += c;
    ctx->state[3] += d;
    ctx->state[4] += e;
    ctx->state[5] += f;
    ctx->state[6] += g;
    ctx->state[7] += h;
}

","You may want to checkout/profile this implementation of SHA256.
Being used in cgminer (a popular bitcoin mining software), it is written specifically keeping performance in mind. It includes 4-way SIMD implementations using SSE2. It follows the same approach as the bradconte sha256_transform algorithm mentioned in the question. The code is too long to reproduce here.
Also the license is fairly permissive, allowing re-use/distribution as long as the original authors are accredited.
","14093","<c><optimization><sha256>","14","9","4","2018-05-29 21:55:33","18547397","4","8","","","","2013-08-31 08:40:07",""
"18546244","SHA256 performance optimization in C","I need to hash a big database of values quite often. Thus, a fast implementation of a SHA-2 hasher is needed. I'm currently using the SHA256.
The sha256_transform algorithm I'm using right now is this:
http://bradconte.com/sha256_c
(code below)
I have profiled my code and this snippet is taking exactly 96% of computing time per hash, making this function critical to my goals.
It operates on a 64-byte long binary string named data[] and outputs the result in ctx->state.
I ask for a faster version of this function. Keep in mind that even slight modifications can impact speed negatively.
#define uchar unsigned char
#define uint unsigned int

#define ROTLEFT(a,b) (((a) << (b)) | ((a) >> (32-(b))))
#define ROTRIGHT(a,b) (((a) >> (b)) | ((a) << (32-(b))))

#define CH(x,y,z) (((x) & (y)) ^ (~(x) & (z)))
#define MAJ(x,y,z) (((x) & (y)) ^ ((x) & (z)) ^ ((y) & (z)))
#define EP0(x) (ROTRIGHT(x,2) ^ ROTRIGHT(x,13) ^ ROTRIGHT(x,22))
#define EP1(x) (ROTRIGHT(x,6) ^ ROTRIGHT(x,11) ^ ROTRIGHT(x,25))
#define SIG0(x) (ROTRIGHT(x,7) ^ ROTRIGHT(x,18) ^ ((x) >> 3))
#define SIG1(x) (ROTRIGHT(x,17) ^ ROTRIGHT(x,19) ^ ((x) >> 10))

void sha256_transform(SHA256_CTX *ctx, uchar data[]) {
    uint a,b,c,d,e,f,g,h,i,j,t1,t2,m[64];

    a = ctx->state[0];
    b = ctx->state[1];
    c = ctx->state[2];
    d = ctx->state[3];
    e = ctx->state[4];
    f = ctx->state[5];
    g = ctx->state[6];
    h = ctx->state[7];

    for (i=0,j=0; i < 16; i++, j += 4)
        m[i] = (data[j] << 24) | (data[j+1] << 16) | (data[j+2] << 8) | (data[j+3]);

    for ( ; i < 64; i++)
        m[i] = SIG1(m[i-2]) + m[i-7] + SIG0(m[i-15]) + m[i-16];

    for (i = 0; i < 64; ++i) {
        t1 = h + EP1(e) + CH(e,f,g) + k[i] + m[i];
        t2 = EP0(a) + MAJ(a,b,c);
        h = g;
        g = f;
        f = e;
        e = d + t1;
        d = c;
        c = b;
        b = a;
        a = t1 + t2;
    }

    ctx->state[0] += a;
    ctx->state[1] += b;
    ctx->state[2] += c;
    ctx->state[3] += d;
    ctx->state[4] += e;
    ctx->state[5] += f;
    ctx->state[6] += g;
    ctx->state[7] += h;
}

","Check out the implementation of Dr Brian Gladman - http://www.gladman.me.uk/. Its about 15% faster then the one in cgminer. I don't think you can do much better without using SSE
","14093","<c><optimization><sha256>","14","1","4","2018-05-29 21:55:33","18547397","4","8","","","","2013-08-31 08:40:07",""
"18546244","SHA256 performance optimization in C","I need to hash a big database of values quite often. Thus, a fast implementation of a SHA-2 hasher is needed. I'm currently using the SHA256.
The sha256_transform algorithm I'm using right now is this:
http://bradconte.com/sha256_c
(code below)
I have profiled my code and this snippet is taking exactly 96% of computing time per hash, making this function critical to my goals.
It operates on a 64-byte long binary string named data[] and outputs the result in ctx->state.
I ask for a faster version of this function. Keep in mind that even slight modifications can impact speed negatively.
#define uchar unsigned char
#define uint unsigned int

#define ROTLEFT(a,b) (((a) << (b)) | ((a) >> (32-(b))))
#define ROTRIGHT(a,b) (((a) >> (b)) | ((a) << (32-(b))))

#define CH(x,y,z) (((x) & (y)) ^ (~(x) & (z)))
#define MAJ(x,y,z) (((x) & (y)) ^ ((x) & (z)) ^ ((y) & (z)))
#define EP0(x) (ROTRIGHT(x,2) ^ ROTRIGHT(x,13) ^ ROTRIGHT(x,22))
#define EP1(x) (ROTRIGHT(x,6) ^ ROTRIGHT(x,11) ^ ROTRIGHT(x,25))
#define SIG0(x) (ROTRIGHT(x,7) ^ ROTRIGHT(x,18) ^ ((x) >> 3))
#define SIG1(x) (ROTRIGHT(x,17) ^ ROTRIGHT(x,19) ^ ((x) >> 10))

void sha256_transform(SHA256_CTX *ctx, uchar data[]) {
    uint a,b,c,d,e,f,g,h,i,j,t1,t2,m[64];

    a = ctx->state[0];
    b = ctx->state[1];
    c = ctx->state[2];
    d = ctx->state[3];
    e = ctx->state[4];
    f = ctx->state[5];
    g = ctx->state[6];
    h = ctx->state[7];

    for (i=0,j=0; i < 16; i++, j += 4)
        m[i] = (data[j] << 24) | (data[j+1] << 16) | (data[j+2] << 8) | (data[j+3]);

    for ( ; i < 64; i++)
        m[i] = SIG1(m[i-2]) + m[i-7] + SIG0(m[i-15]) + m[i-16];

    for (i = 0; i < 64; ++i) {
        t1 = h + EP1(e) + CH(e,f,g) + k[i] + m[i];
        t2 = EP0(a) + MAJ(a,b,c);
        h = g;
        g = f;
        f = e;
        e = d + t1;
        d = c;
        c = b;
        b = a;
        a = t1 + t2;
    }

    ctx->state[0] += a;
    ctx->state[1] += b;
    ctx->state[2] += c;
    ctx->state[3] += d;
    ctx->state[4] += e;
    ctx->state[5] += f;
    ctx->state[6] += g;
    ctx->state[7] += h;
}

","This is the Intel reference implementation:
http://downloadmirror.intel.com/22357/eng/sha256_code_release_v2.zip
And the code is described in:
http://www.intel.com/content/www/us/en/intelligent-systems/intel-technology/sha-256-implementations-paper.html
I get about 350 MB/s on a haswell based Xeon microprocessor (E5-2650 v3). It is implemented in assembly and takes advantage of Intel AES-NI.
Update: 
The latest Intel reference implementation for SHA (now part of ISA-L_crypto) is located at:
https://github.com/01org/isa-l_crypto/tree/master/sha256_mb
","14093","<c><optimization><sha256>","14","5","4","2018-05-29 21:55:33","18547397","4","8","","","","2013-08-31 08:40:07",""
"18546244","SHA256 performance optimization in C","I need to hash a big database of values quite often. Thus, a fast implementation of a SHA-2 hasher is needed. I'm currently using the SHA256.
The sha256_transform algorithm I'm using right now is this:
http://bradconte.com/sha256_c
(code below)
I have profiled my code and this snippet is taking exactly 96% of computing time per hash, making this function critical to my goals.
It operates on a 64-byte long binary string named data[] and outputs the result in ctx->state.
I ask for a faster version of this function. Keep in mind that even slight modifications can impact speed negatively.
#define uchar unsigned char
#define uint unsigned int

#define ROTLEFT(a,b) (((a) << (b)) | ((a) >> (32-(b))))
#define ROTRIGHT(a,b) (((a) >> (b)) | ((a) << (32-(b))))

#define CH(x,y,z) (((x) & (y)) ^ (~(x) & (z)))
#define MAJ(x,y,z) (((x) & (y)) ^ ((x) & (z)) ^ ((y) & (z)))
#define EP0(x) (ROTRIGHT(x,2) ^ ROTRIGHT(x,13) ^ ROTRIGHT(x,22))
#define EP1(x) (ROTRIGHT(x,6) ^ ROTRIGHT(x,11) ^ ROTRIGHT(x,25))
#define SIG0(x) (ROTRIGHT(x,7) ^ ROTRIGHT(x,18) ^ ((x) >> 3))
#define SIG1(x) (ROTRIGHT(x,17) ^ ROTRIGHT(x,19) ^ ((x) >> 10))

void sha256_transform(SHA256_CTX *ctx, uchar data[]) {
    uint a,b,c,d,e,f,g,h,i,j,t1,t2,m[64];

    a = ctx->state[0];
    b = ctx->state[1];
    c = ctx->state[2];
    d = ctx->state[3];
    e = ctx->state[4];
    f = ctx->state[5];
    g = ctx->state[6];
    h = ctx->state[7];

    for (i=0,j=0; i < 16; i++, j += 4)
        m[i] = (data[j] << 24) | (data[j+1] << 16) | (data[j+2] << 8) | (data[j+3]);

    for ( ; i < 64; i++)
        m[i] = SIG1(m[i-2]) + m[i-7] + SIG0(m[i-15]) + m[i-16];

    for (i = 0; i < 64; ++i) {
        t1 = h + EP1(e) + CH(e,f,g) + k[i] + m[i];
        t2 = EP0(a) + MAJ(a,b,c);
        h = g;
        g = f;
        f = e;
        e = d + t1;
        d = c;
        c = b;
        b = a;
        a = t1 + t2;
    }

    ctx->state[0] += a;
    ctx->state[1] += b;
    ctx->state[2] += c;
    ctx->state[3] += d;
    ctx->state[4] += e;
    ctx->state[5] += f;
    ctx->state[6] += g;
    ctx->state[7] += h;
}

","
SHA256 performance optimization in C ...

Now that the Goldmont micro-architecture has been released, it includes Intel's SHA extensions. You can get a 5x-6x speedup in the compress function using the CPU instructions. For example, proposed code for a crypto library witnessed the following (the test occurred on a Celeron J3455, which runs at 1.5 GHz, but bursts at 2.3 GHz):

C++ implementation

    $ ./botan speed --msec=3000 SHA-1 SHA-224 SHA-256
    SHA-160 [base] hash 274.826 MiB/sec (824.480 MiB in 3000.009 ms)
    SHA-224 [base] hash 92.349 MiB/sec (277.051 MiB in 3000.027 ms)
    SHA-256 [base] hash 92.364 MiB/sec (277.094 MiB in 3000.027 ms)


Intel SHA extensions

    $ ./botan speed --msec=3000 SHA-1 SHA-224 SHA-256
    SHA-160 [base] hash 1195.907 MiB/sec (3587.723 MiB in 3000.000 ms)
    SHA-224 [base] hash 535.740 MiB/sec (1607.219 MiB in 3000.000 ms)
    SHA-256 [base] hash 535.970 MiB/sec (1607.914 MiB in 3000.005 ms)

Here is the code for the SHA256 compress function using Intel SHA extensions with intrinsics. Its based on Sean Gulley's blog at Intel® SHA Extensions, and his sample code in mitls | hacl-star | experimental.
The compress function below only handles full blocks of 64-bytes. You need to setup the initial state, and you need to pad the last block. It looks like you have that covered in your sample code.
#include <immintrin.h>
...

void compress(uint32_t state[8], const uint8_t input[], size_t blocks)
{
    __m128i STATE0, STATE1;
    __m128i MSG, TMP, MASK;
    __m128i TMSG0, TMSG1, TMSG2, TMSG3;
    __m128i ABEF_SAVE, CDGH_SAVE;

    // Load initial values
    TMP = _mm_loadu_si128((__m128i*) &state[0]);
    STATE1 = _mm_loadu_si128((__m128i*) &state[4]);
    MASK = _mm_set_epi64x(0x0c0d0e0f08090a0bULL, 0x0405060700010203ULL);

    TMP = _mm_shuffle_epi32(TMP, 0xB1); // CDAB
    STATE1 = _mm_shuffle_epi32(STATE1, 0x1B); // EFGH
    STATE0 = _mm_alignr_epi8(TMP, STATE1, 8); // ABEF
    STATE1 = _mm_blend_epi16(STATE1, TMP, 0xF0); // CDGH

    while (blocks)
    {
        // Save current hash
        ABEF_SAVE = STATE0;
        CDGH_SAVE = STATE1;

        // Rounds 0-3
        MSG = _mm_loadu_si128((const __m128i*) (input+0));
        TMSG0 = _mm_shuffle_epi8(MSG, MASK);
        MSG = _mm_add_epi32(TMSG0, _mm_set_epi64x(0xE9B5DBA5B5C0FBCFULL, 0x71374491428A2F98ULL));
        STATE1 = _mm_sha256rnds2_epu32(STATE1, STATE0, MSG);
        MSG = _mm_shuffle_epi32(MSG, 0x0E);
        STATE0 = _mm_sha256rnds2_epu32(STATE0, STATE1, MSG);

        // Rounds 4-7
        TMSG1 = _mm_loadu_si128((const __m128i*) (input+16));
        TMSG1 = _mm_shuffle_epi8(TMSG1, MASK);
        MSG = _mm_add_epi32(TMSG1, _mm_set_epi64x(0xAB1C5ED5923F82A4ULL, 0x59F111F13956C25BULL));
        STATE1 = _mm_sha256rnds2_epu32(STATE1, STATE0, MSG);
        MSG = _mm_shuffle_epi32(MSG, 0x0E);
        STATE0 = _mm_sha256rnds2_epu32(STATE0, STATE1, MSG);
        TMSG0 = _mm_sha256msg1_epu32(TMSG0, TMSG1);

        // Rounds 8-11
        TMSG2 = _mm_loadu_si128((const __m128i*) (input+32));
        TMSG2 = _mm_shuffle_epi8(TMSG2, MASK);
        MSG = _mm_add_epi32(TMSG2, _mm_set_epi64x(0x550C7DC3243185BEULL, 0x12835B01D807AA98ULL));
        STATE1 = _mm_sha256rnds2_epu32(STATE1, STATE0, MSG);
        MSG = _mm_shuffle_epi32(MSG, 0x0E);
        STATE0 = _mm_sha256rnds2_epu32(STATE0, STATE1, MSG);
        TMSG1 = _mm_sha256msg1_epu32(TMSG1, TMSG2);

        // Rounds 12-15
        TMSG3 = _mm_loadu_si128((const __m128i*) (input+48));
        TMSG3 = _mm_shuffle_epi8(TMSG3, MASK);
        MSG = _mm_add_epi32(TMSG3, _mm_set_epi64x(0xC19BF1749BDC06A7ULL, 0x80DEB1FE72BE5D74ULL));
        STATE1 = _mm_sha256rnds2_epu32(STATE1, STATE0, MSG);
        TMP = _mm_alignr_epi8(TMSG3, TMSG2, 4);
        TMSG0 = _mm_add_epi32(TMSG0, TMP);
        TMSG0 = _mm_sha256msg2_epu32(TMSG0, TMSG3);
        MSG = _mm_shuffle_epi32(MSG, 0x0E);
        STATE0 = _mm_sha256rnds2_epu32(STATE0, STATE1, MSG);
        TMSG2 = _mm_sha256msg1_epu32(TMSG2, TMSG3);

        // Rounds 16-19
        MSG = _mm_add_epi32(TMSG0, _mm_set_epi64x(0x240CA1CC0FC19DC6ULL, 0xEFBE4786E49B69C1ULL));
        STATE1 = _mm_sha256rnds2_epu32(STATE1, STATE0, MSG);
        TMP = _mm_alignr_epi8(TMSG0, TMSG3, 4);
        TMSG1 = _mm_add_epi32(TMSG1, TMP);
        TMSG1 = _mm_sha256msg2_epu32(TMSG1, TMSG0);
        MSG = _mm_shuffle_epi32(MSG, 0x0E);
        STATE0 = _mm_sha256rnds2_epu32(STATE0, STATE1, MSG);
        TMSG3 = _mm_sha256msg1_epu32(TMSG3, TMSG0);

        // Rounds 20-23
        MSG = _mm_add_epi32(TMSG1, _mm_set_epi64x(0x76F988DA5CB0A9DCULL, 0x4A7484AA2DE92C6FULL));
        STATE1 = _mm_sha256rnds2_epu32(STATE1, STATE0, MSG);
        TMP = _mm_alignr_epi8(TMSG1, TMSG0, 4);
        TMSG2 = _mm_add_epi32(TMSG2, TMP);
        TMSG2 = _mm_sha256msg2_epu32(TMSG2, TMSG1);
        MSG = _mm_shuffle_epi32(MSG, 0x0E);
        STATE0 = _mm_sha256rnds2_epu32(STATE0, STATE1, MSG);
        TMSG0 = _mm_sha256msg1_epu32(TMSG0, TMSG1);

        // Rounds 24-27
        MSG = _mm_add_epi32(TMSG2, _mm_set_epi64x(0xBF597FC7B00327C8ULL, 0xA831C66D983E5152ULL));
        STATE1 = _mm_sha256rnds2_epu32(STATE1, STATE0, MSG);
        TMP = _mm_alignr_epi8(TMSG2, TMSG1, 4);
        TMSG3 = _mm_add_epi32(TMSG3, TMP);
        TMSG3 = _mm_sha256msg2_epu32(TMSG3, TMSG2);
        MSG = _mm_shuffle_epi32(MSG, 0x0E);
        STATE0 = _mm_sha256rnds2_epu32(STATE0, STATE1, MSG);
        TMSG1 = _mm_sha256msg1_epu32(TMSG1, TMSG2);

        // Rounds 28-31
        MSG = _mm_add_epi32(TMSG3, _mm_set_epi64x(0x1429296706CA6351ULL,  0xD5A79147C6E00BF3ULL));
        STATE1 = _mm_sha256rnds2_epu32(STATE1, STATE0, MSG);
        TMP = _mm_alignr_epi8(TMSG3, TMSG2, 4);
        TMSG0 = _mm_add_epi32(TMSG0, TMP);
        TMSG0 = _mm_sha256msg2_epu32(TMSG0, TMSG3);
        MSG = _mm_shuffle_epi32(MSG, 0x0E);
        STATE0 = _mm_sha256rnds2_epu32(STATE0, STATE1, MSG);
        TMSG2 = _mm_sha256msg1_epu32(TMSG2, TMSG3);

        // Rounds 32-35
        MSG = _mm_add_epi32(TMSG0, _mm_set_epi64x(0x53380D134D2C6DFCULL, 0x2E1B213827B70A85ULL));
        STATE1 = _mm_sha256rnds2_epu32(STATE1, STATE0, MSG);
        TMP = _mm_alignr_epi8(TMSG0, TMSG3, 4);
        TMSG1 = _mm_add_epi32(TMSG1, TMP);
        TMSG1 = _mm_sha256msg2_epu32(TMSG1, TMSG0);
        MSG = _mm_shuffle_epi32(MSG, 0x0E);
        STATE0 = _mm_sha256rnds2_epu32(STATE0, STATE1, MSG);
        TMSG3 = _mm_sha256msg1_epu32(TMSG3, TMSG0);

        // Rounds 36-39
        MSG = _mm_add_epi32(TMSG1, _mm_set_epi64x(0x92722C8581C2C92EULL, 0x766A0ABB650A7354ULL));
        STATE1 = _mm_sha256rnds2_epu32(STATE1, STATE0, MSG);
        TMP = _mm_alignr_epi8(TMSG1, TMSG0, 4);
        TMSG2 = _mm_add_epi32(TMSG2, TMP);
        TMSG2 = _mm_sha256msg2_epu32(TMSG2, TMSG1);
        MSG = _mm_shuffle_epi32(MSG, 0x0E);
        STATE0 = _mm_sha256rnds2_epu32(STATE0, STATE1, MSG);
        TMSG0 = _mm_sha256msg1_epu32(TMSG0, TMSG1);

        // Rounds 40-43
        MSG = _mm_add_epi32(TMSG2, _mm_set_epi64x(0xC76C51A3C24B8B70ULL, 0xA81A664BA2BFE8A1ULL));
        STATE1 = _mm_sha256rnds2_epu32(STATE1, STATE0, MSG);
        TMP = _mm_alignr_epi8(TMSG2, TMSG1, 4);
        TMSG3 = _mm_add_epi32(TMSG3, TMP);
        TMSG3 = _mm_sha256msg2_epu32(TMSG3, TMSG2);
        MSG = _mm_shuffle_epi32(MSG, 0x0E);
        STATE0 = _mm_sha256rnds2_epu32(STATE0, STATE1, MSG);
        TMSG1 = _mm_sha256msg1_epu32(TMSG1, TMSG2);

        // Rounds 44-47
        MSG = _mm_add_epi32(TMSG3, _mm_set_epi64x(0x106AA070F40E3585ULL, 0xD6990624D192E819ULL));
        STATE1 = _mm_sha256rnds2_epu32(STATE1, STATE0, MSG);
        TMP = _mm_alignr_epi8(TMSG3, TMSG2, 4);
        TMSG0 = _mm_add_epi32(TMSG0, TMP);
        TMSG0 = _mm_sha256msg2_epu32(TMSG0, TMSG3);
        MSG = _mm_shuffle_epi32(MSG, 0x0E);
        STATE0 = _mm_sha256rnds2_epu32(STATE0, STATE1, MSG);
        TMSG2 = _mm_sha256msg1_epu32(TMSG2, TMSG3);

        // Rounds 48-51
        MSG = _mm_add_epi32(TMSG0, _mm_set_epi64x(0x34B0BCB52748774CULL, 0x1E376C0819A4C116ULL));
        STATE1 = _mm_sha256rnds2_epu32(STATE1, STATE0, MSG);
        TMP = _mm_alignr_epi8(TMSG0, TMSG3, 4);
        TMSG1 = _mm_add_epi32(TMSG1, TMP);
        TMSG1 = _mm_sha256msg2_epu32(TMSG1, TMSG0);
        MSG = _mm_shuffle_epi32(MSG, 0x0E);
        STATE0 = _mm_sha256rnds2_epu32(STATE0, STATE1, MSG);
        TMSG3 = _mm_sha256msg1_epu32(TMSG3, TMSG0);

        // Rounds 52-55
        MSG = _mm_add_epi32(TMSG1, _mm_set_epi64x(0x682E6FF35B9CCA4FULL, 0x4ED8AA4A391C0CB3ULL));
        STATE1 = _mm_sha256rnds2_epu32(STATE1, STATE0, MSG);
        TMP = _mm_alignr_epi8(TMSG1, TMSG0, 4);
        TMSG2 = _mm_add_epi32(TMSG2, TMP);
        TMSG2 = _mm_sha256msg2_epu32(TMSG2, TMSG1);
        MSG = _mm_shuffle_epi32(MSG, 0x0E);
        STATE0 = _mm_sha256rnds2_epu32(STATE0, STATE1, MSG);

        // Rounds 56-59
        MSG = _mm_add_epi32(TMSG2, _mm_set_epi64x(0x8CC7020884C87814ULL, 0x78A5636F748F82EEULL));
        STATE1 = _mm_sha256rnds2_epu32(STATE1, STATE0, MSG);
        TMP = _mm_alignr_epi8(TMSG2, TMSG1, 4);
        TMSG3 = _mm_add_epi32(TMSG3, TMP);
        TMSG3 = _mm_sha256msg2_epu32(TMSG3, TMSG2);
        MSG = _mm_shuffle_epi32(MSG, 0x0E);
        STATE0 = _mm_sha256rnds2_epu32(STATE0, STATE1, MSG);

        // Rounds 60-63
        MSG = _mm_add_epi32(TMSG3, _mm_set_epi64x(0xC67178F2BEF9A3F7ULL, 0xA4506CEB90BEFFFAULL));
        STATE1 = _mm_sha256rnds2_epu32(STATE1, STATE0, MSG);
        MSG = _mm_shuffle_epi32(MSG, 0x0E);
        STATE0 = _mm_sha256rnds2_epu32(STATE0, STATE1, MSG);

        // Add values back to state
        STATE0 = _mm_add_epi32(STATE0, ABEF_SAVE);
        STATE1 = _mm_add_epi32(STATE1, CDGH_SAVE);

        input += 64;
        blocks--;
    }

    TMP = _mm_shuffle_epi32(STATE0, 0x1B); // FEBA
    STATE1 = _mm_shuffle_epi32(STATE1, 0xB1); // DCHG
    STATE0 = _mm_blend_epi16(TMP, STATE1, 0xF0); // DCBA
    STATE1 = _mm_alignr_epi8(STATE1, TMP, 8); // ABEF

    // Save state
    _mm_storeu_si128((__m128i*) &state[0], STATE0);
    _mm_storeu_si128((__m128i*) &state[4], STATE1);
}


You can find source for both Intel SHA intrinsics and ARMv8 SHA intrinsics at Noloader GitHub | SHA-Intrinsics. They are C source files, and provide the compress function for SHA-1, SHA-224 and SHA-256. The intrinsic based implementations increase throughput approximately 3x to 4x for SHA-1, and approximately 6x to 12x for SHA-224 and SHA-256.
","14093","<c><optimization><sha256>","14","6","4","2018-05-29 21:55:33","18547397","4","8","","","","2013-08-31 08:40:07",""
"11892053","Is SHA-256 Case Insensitive?","I'm running a service that is using SHA-256 on two sides of the application - one is a server-side PHP implementation and the other is a client-side iOS implementation. The result of using the algorithm on both sides is the same alphanumeric string, except for the fact that all letters are capitalized on iOS and lower case on PHP. The fact that they are identical alphanumeric strings leads me to believe that SHA-256 is case insensitive, but I can't find any documentation supporting my assumption. Can someone show me some documentation to confirm this?
","If you are referring to a hexadecimal string output, then yes, that is case insensitive.  It is a textual representation of binary data.
http://en.wikipedia.org/wiki/Hexadecimal
The algorithm itself is most definitely case-sensitive.
","13469","<php><ios><sha256>","11","21","4","2012-08-09 21:20:46","11892085","1","","","","","2012-08-09 21:14:45",""
"11892053","Is SHA-256 Case Insensitive?","I'm running a service that is using SHA-256 on two sides of the application - one is a server-side PHP implementation and the other is a client-side iOS implementation. The result of using the algorithm on both sides is the same alphanumeric string, except for the fact that all letters are capitalized on iOS and lower case on PHP. The fact that they are identical alphanumeric strings leads me to believe that SHA-256 is case insensitive, but I can't find any documentation supporting my assumption. Can someone show me some documentation to confirm this?
","All SHA series are binary algorithms they know nothing about case, so they can't be case insensitive.
You can simply test this on single machine with 2 outputs from one string with different cases and you can see that they provide different results.
In your case I think if every thing is ok, possibly iOS show capitalized string in the phone but internally pass you normal( lower case ) string
","13469","<php><ios><sha256>","11","0","4","2012-08-09 21:20:46","11892085","1","","","","","2012-08-09 21:14:45",""
"11892053","Is SHA-256 Case Insensitive?","I'm running a service that is using SHA-256 on two sides of the application - one is a server-side PHP implementation and the other is a client-side iOS implementation. The result of using the algorithm on both sides is the same alphanumeric string, except for the fact that all letters are capitalized on iOS and lower case on PHP. The fact that they are identical alphanumeric strings leads me to believe that SHA-256 is case insensitive, but I can't find any documentation supporting my assumption. Can someone show me some documentation to confirm this?
","No decent cryptographic hash function is case insensitive, because then it would be far easier to produce a collision. The output is a different matter. It's basically a large number (so casing does not apply), but for convenience it is given in base 16, i.e. using the letters a through f as additional digits. Hexadecimal notation is indeed case insensitive, or at least both upper- and lowercase variants are common and recognized. It doesn't matter and does not change what number is represented.
","13469","<php><ios><sha256>","11","2","4","2012-08-09 21:20:46","11892085","1","","","","","2012-08-09 21:14:45",""
"11892053","Is SHA-256 Case Insensitive?","I'm running a service that is using SHA-256 on two sides of the application - one is a server-side PHP implementation and the other is a client-side iOS implementation. The result of using the algorithm on both sides is the same alphanumeric string, except for the fact that all letters are capitalized on iOS and lower case on PHP. The fact that they are identical alphanumeric strings leads me to believe that SHA-256 is case insensitive, but I can't find any documentation supporting my assumption. Can someone show me some documentation to confirm this?
","If the binary representation of the input is the same on both sides the binary representation of the hash value will be the same. Hex is case insensitive.
","13469","<php><ios><sha256>","11","3","4","2012-08-09 21:20:46","11892085","1","","","","","2012-08-09 21:14:45",""
"29147457","What is better? Password_hash vs. SHA256 vs. SHA1 vs. md5","What is better with salt for password storage?
MD5:
$hash = md5($password . $salt);

Password_hash:
$hash = password_hash($password, PASSWORD_DEFAULT, $salt);

SHA1:
$result = sha1($salt.$string);

","You should absolutely use the password_hash() function without providing your own salt:
$hash = password_hash($password, PASSWORD_DEFAULT);

The function will generate a safe salt on its own. The other algorithms are ways too fast to hash passwords and therefore can be brute-forced too easily (about 8 Giga MD5 per second).
","13026","<md5><store><sha1><sha256><password-hash>","9","24","2","2017-12-19 09:24:39","29148605","3","4","3334422","","2016-06-03 20:05:53","2015-03-19 14:38:01",""
"29147457","What is better? Password_hash vs. SHA256 vs. SHA1 vs. md5","What is better with salt for password storage?
MD5:
$hash = md5($password . $salt);

Password_hash:
$hash = password_hash($password, PASSWORD_DEFAULT, $salt);

SHA1:
$result = sha1($salt.$string);

","Salts are great when you are storing lots of passwords, otherwise they are fairly useless since they are stored in plaintext. If an attacker manages to get your hashed passwords, then assume that they can get their hands on your salts.
Use SHA-256 because it's a cryptographically strong hash function, and use salts. But most importantly, just use strong passwords combined with strong hashing algorithms.
","13026","<md5><store><sha1><sha256><password-hash>","9","3","2","2017-12-19 09:24:39","29148605","3","4","3334422","","2016-06-03 20:05:53","2015-03-19 14:38:01",""
"33572502","Unable to get output from get-filehash","I am looking for a reliable command-line method of getting SHA256 hashes for files in Windows.  My understanding is that the way to do this is via Microsoft's Get-FileHash cmdlet under PowerShell.  I have seen several web sites with examples and reviewed Microsoft's own documentation.  It appears that the following syntax should work on Windows Server 2012:
Get-FileHash myfile.txt -Algorithm SHA256

The command runs without error, but there is no output.  If I send the output to a file, the file is created with no content.  I have also seen examples which pipe the output to Format-List; I tried that, but still nothing.  I have also tried running the command with invalid arguments, and again nothing.
I am open to using a different program, but due to business requirements, it would need to be a supported download.
","Get-FileHash, requires Windows PowerShell 4.0 
Based on your comments you are at version 3, which is default on Win 2012 (non R2) Here how to check you PS version
You can update PS on Win 2012 (non R2) to version 4.0 or use Win 2012 R2
If you just run Get-FileHash on a PS version 3 system you should get

PS C:\> Get-FileHash
Get-FileHash : The term 'Get-FileHash' is not recognized as the name of a cmdlet, function, script file, or operable
program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
At line:1 char:1
+ Get-FileHash
+ ~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (Get-FileHash:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

On lower PS version you can use this function
Function Get-FileHashTSO([String] $FileName,$HashName = ""SHA1"") 
{
$FileStream = New-Object System.IO.FileStream($FileName,[System.IO.FileMode]::Open) 
$StringBuilder = New-Object System.Text.StringBuilder 
[System.Security.Cryptography.HashAlgorithm]::Create($HashName).ComputeHash($FileStream)|%{[Void]$StringBuilder.Append($_.ToString(""x2""))} 
$FileStream.Close() 
$StringBuilder.ToString() 
}

store it as .ps (e.g. Get-FileHashTSO.ps1) file and call it like this
powershell -command ""& { . C:\myScripts\Get-FileHashTSO.ps1 ; Get-FileHashTSO ""C:\someLocation\someFile.iso"" ""SHA1"" }""

","12945","<powershell><sha256>","2","1","2","2016-10-23 20:14:29","","5","","","","","2015-11-06 17:37:04",""
"33572502","Unable to get output from get-filehash","I am looking for a reliable command-line method of getting SHA256 hashes for files in Windows.  My understanding is that the way to do this is via Microsoft's Get-FileHash cmdlet under PowerShell.  I have seen several web sites with examples and reviewed Microsoft's own documentation.  It appears that the following syntax should work on Windows Server 2012:
Get-FileHash myfile.txt -Algorithm SHA256

The command runs without error, but there is no output.  If I send the output to a file, the file is created with no content.  I have also seen examples which pipe the output to Format-List; I tried that, but still nothing.  I have also tried running the command with invalid arguments, and again nothing.
I am open to using a different program, but due to business requirements, it would need to be a supported download.
","I'm using PowerShell 4.0 and I just encountered the same problem of null output from Get-FileHash. The cause of my problem is different than the OP but I have found a solution to my problem and I figured I would post my findings for anyone who came to this page trying to solve the problem of null output (or seemingly incorrect output) from Get-FileHash.
The problem only happens (for me) when the path to the target file contains brackets [ ] and those brackets contain either zero characters or 2 or more characters.
EDIT: I now understand WHY this happens. The string is interpreted as Regular Expression (RegEx) so the square brackets [ ] take on their special RegEx meaning. The -LiteralPath tells PowerShell to interpret the string as a simple match (no RegEx).
Consider the following paths which refer to 4 existing text files (hypothetically):
C:\Test\My Text.txt
C:\Test\My [Text].txt
C:\Test\My [Te]xt.txt
C:\Test\My Text[].txt

The following command produces normal output:
Get-FileHash ""C:\Test\My Text.txt""

but there will be null output if using the following commands:
Get-FileHash ""C:\Test\My [Text].txt""
Get-FileHash ""C:\Test\My [Te]xt.txt""
Get-FileHash ""C:\Test\My Text[].txt""

This can be solved by using the -LiteralPath switch. For example:
Get-FileHash -LiteralPath ""C:\Test\My [Text].txt""

Variables are expanded normally when using the -LiteralPath switch. For example: 
(Get-ChildItem C:\Test).FullName | ForEach {
Get-FileHash -LiteralPath $_
}

If there is exactly 1 character between the brackets, the brackets will be ignored when using Get-FileHash.
Consider the following paths which refer to 3 existing text files (hypothetically), each with unique hash values: 
C:\Test\My Text.txt
C:\Test\My Tex[t].txt
C:\Test\My[ ]Text.txt

Get-FileHash interprets all three of the following commands in exactly the same way ( the path is interpreted as C:\Test\My Text.txt ) and therefore each command has the exact same output despite each file having it's own unique hash value:
Get-FileHash ""C:\Test\My Text.txt""
Get-FileHash ""C:\Test\My Tex[t].txt""
Get-FileHash ""C:\Test\My[ ]Text.txt""

P.S. I'm a very new programmer, please forgive me for any poor usage of terminology.
","12945","<powershell><sha256>","2","2","2","2016-10-23 20:14:29","","5","","","","","2015-11-06 17:37:04",""
"4680661","Java SHA256 outputs different hash to PHP SHA256?","PHP code:
echo hash('sha256', 'jake');
PHP output:
cdf30c6b345276278bedc7bcedd9d5582f5b8e0c1dd858f46ef4ea231f92731d
Java code:
String s = ""jake"";
MessageDigest md = MessageDigest.getInstance(""SHA-256"");
md.update(s.getBytes(Charset.forName(""UTF-8"")));
byte[] hashed = md.digest();
String s2 = """";
for (byte b : hashed) {
    s2 += b;
}
System.out.println(s2);

Java output:
-51-1312107528211839-117-19-57-68-19-39-43884791-1141229-4088-12110-12-223531-11011529
I had expected the two to return the same result. Obviously, this is not the case. How can I get the two to match up or is it impossible?
EDIT: I had made a mistake, think I have the answer to the question now anyway.
","Well, the very first thing you need to do is use a consistent string encoding. I've no idea what PHP will do, but ""jake"".getBytes() will use whatever your platform default encoding is for Java. That's a really bad idea. Using UTF-8 would probably be a good start, assuming that PHP copes with Unicode strings to start with. (If it doesn't, you'll need to work out what it is doing and try to make the two consistent.) In Java, use the overload of String.getBytes() which takes a Charset or the one which takes the name of a Charset. (Personally I like to use Guava's Charsets.UTF_8.)
Then persuade PHP to use UTF-8 as well.
Then output the Java result in hex. I very much doubt that the code you've given is the actual code you're running, as otherwise I'd expect output such as ""[B@e48e1b"". Whatever you're doing to convert the byte array into a string, change it to use hex.
","12738","<java><php><hash><sha256>","8","12","3","2011-01-13 14:07:57","4680686","1","6","282706","","2011-01-13 14:07:57","2011-01-13 13:41:28",""
"4680661","Java SHA256 outputs different hash to PHP SHA256?","PHP code:
echo hash('sha256', 'jake');
PHP output:
cdf30c6b345276278bedc7bcedd9d5582f5b8e0c1dd858f46ef4ea231f92731d
Java code:
String s = ""jake"";
MessageDigest md = MessageDigest.getInstance(""SHA-256"");
md.update(s.getBytes(Charset.forName(""UTF-8"")));
byte[] hashed = md.digest();
String s2 = """";
for (byte b : hashed) {
    s2 += b;
}
System.out.println(s2);

Java output:
-51-1312107528211839-117-19-57-68-19-39-43884791-1141229-4088-12110-12-223531-11011529
I had expected the two to return the same result. Obviously, this is not the case. How can I get the two to match up or is it impossible?
EDIT: I had made a mistake, think I have the answer to the question now anyway.
","You need to convert the digest to a HEX string before printing it out. Example code can be found here.
","12738","<java><php><hash><sha256>","8","2","3","2011-01-13 14:07:57","4680686","1","6","282706","","2011-01-13 14:07:57","2011-01-13 13:41:28",""
"4680661","Java SHA256 outputs different hash to PHP SHA256?","PHP code:
echo hash('sha256', 'jake');
PHP output:
cdf30c6b345276278bedc7bcedd9d5582f5b8e0c1dd858f46ef4ea231f92731d
Java code:
String s = ""jake"";
MessageDigest md = MessageDigest.getInstance(""SHA-256"");
md.update(s.getBytes(Charset.forName(""UTF-8"")));
byte[] hashed = md.digest();
String s2 = """";
for (byte b : hashed) {
    s2 += b;
}
System.out.println(s2);

Java output:
-51-1312107528211839-117-19-57-68-19-39-43884791-1141229-4088-12110-12-223531-11011529
I had expected the two to return the same result. Obviously, this is not the case. How can I get the two to match up or is it impossible?
EDIT: I had made a mistake, think I have the answer to the question now anyway.
","They are printing the same .. convert your byte[] to a hex string, then you'll see CDF30C6B345276278BEDC7BCEDD9D5582F5B8E0C1DD858F46EF4EA231F92731D as Java output, too:
public void testSomething() throws Exception {
    MessageDigest md = MessageDigest.getInstance(""SHA-256"");
    md.update(""jake"".getBytes());
    System.out.println(getHex(md.digest()));
}

static final String HEXES = ""0123456789ABCDEF"";
public static String getHex( byte [] raw ) {
    if ( raw == null ) {
      return null;
    }
    final StringBuilder hex = new StringBuilder( 2 * raw.length );
    for ( final byte b : raw ) {
      hex.append(HEXES.charAt((b & 0xF0) >> 4))
         .append(HEXES.charAt((b & 0x0F)));
    }
    return hex.toString();
}

","12738","<java><php><hash><sha256>","8","6","3","2011-01-13 14:07:57","4680686","1","6","282706","","2011-01-13 14:07:57","2011-01-13 13:41:28",""
"25261823","ECDSA signature generation using secp256r1 curve and SHA256 algorithm - BouncyCastle","I am trying to generate signature using ECDSA with secp256r1 curve (P256) and SHA256 algorithm for message hash. Also i am using Bouncy Castle libraries. 
Code below, 
public class MyTest {

    /**
     * @param args
     */
    public static void main(String[] args) {
        new MyTest().getSign();
    }

    void getSign() {
        // Get the instance of the Key Generator with ""EC"" algorithm

        try {
            KeyPairGenerator g = KeyPairGenerator.getInstance(""EC"");
            ECGenParameterSpec kpgparams = new ECGenParameterSpec(""secp256r1"");
            g.initialize(kpgparams);

            KeyPair pair = g.generateKeyPair();
            // Instance of signature class with SHA256withECDSA algorithm
            Signature ecdsaSign = Signature.getInstance(""SHA256withECDSA"");
            ecdsaSign.initSign(pair.getPrivate());

            System.out.println(""Private Keys is::"" + pair.getPrivate());
            System.out.println(""Public Keys is::"" + pair.getPublic());

            String msg = ""text ecdsa with sha256"";//getSHA256(msg)
            ecdsaSign.update((msg + pair.getPrivate().toString())
                    .getBytes(""UTF-8""));

            byte[] signature = ecdsaSign.sign();
            System.out.println(""Signature is::""
                    + new BigInteger(1, signature).toString(16));

            // Validation
            ecdsaSign.initVerify(pair.getPublic());
            ecdsaSign.update(signature);
            if (ecdsaSign.verify(signature))
                System.out.println(""valid"");
            else
                System.out.println(""invalid!!!!"");

        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
        }

    }

}

Here key pairs are generated using KeyPair , but for my requirement I will be having a static privateKey and public key. Also, validation of signature is always returning false.
Need help, how can I have static private key and on validation part.
","Jackpot - nothing in your title is a problem!
First, you probably aren't actually using BouncyCastle. Sun/Oracle Java 7 and 8 now includes an EC provider (earlier versions did not) and the one-arg form of getInstance uses the first available provider, which is normally SunEC unless you or someone has altered the provider list.
TO VERIFY A SIGNATURE: pass the same data to the verifying Signature.update() as you passed to the signing Signature.update(). Exactly the same, byte for byte. Pass the signature value only to Signature.verify(). Putting PrivateKey.toString() in the data is silly; this value is specific to the running Java process, so you'll have to send it to the receiving process (if different, as it normally should be) where it is useless and a waste of space.
TO USE A STATIC KEY: do just that. Create a keypair and store it someplace, then read it in and use it. The easiest secure (password protected) store is a Java KeyStore (JKS) file, but that requires a certificate chain (perhaps a dummy one) which is a nuisance to code yourself; fortunately the keytool utility with -genkeypair generates a keypair with a dummy selfsigned certificate, and for -keyalg ec -keysize 256 it uses the (very popular) secp256r1 curve. Also specify -alias name of your choice, -keystore filename, any names you like for the dummy cert, and passwords. To use a keypair from a JKS file:

use java.security.KeyStore.getInstance(""JKS"") to create a store object and pass .load(InputStream,char[]) a FileInputStream on the file, and the password.
use .getKey(String alias,char[] password) and cast to get the PrivateKey. Use for signing.
use .getCertificateChain(String alias)[0].getPublicKey() to get the PublicKey from the first (only) cert. Use for verifying.

","11708","<java><bouncycastle><sha256><ecdsa>","3","7","1","2014-11-05 05:03:06","25263424","0","3","2432317","","2014-11-05 05:03:06","2014-08-12 10:18:30",""
"6431918","PHP SHA256 and Salt won't work","I'm trying to create passwords that are sha256 hashed with a $salt variable to it. But for some reason it just won't work. Been working 3 hours on this now, and I'm about to rip my head off. Here is my code: 
I'll try again, sorry ;o) 
Ok, my script worked fine, untill I tried to add the sha256 to the passwords. I got a file for creating users which is: 
$salt = ""lollol"";  
$password = hash('sha256', $salt.$_POST['password']);  
$sql = (""INSERT INTO members (username, password, name, last_name,company)VALUES('$username', '$password', '$name', '$last_name', '$company')"")or die(mysql_error());

if(mysql_query($sql))
    echo ""Your accuont has been created."";

It seems like it's correctly added to the Database. I can see that it is getting hashed with some letters and numbers. 
But then when I'm trying to login, it just won't. 
My code for login.php is:
$sql= ""SELECT * FROM members WHERE username='$username' and password='$password'"";  
$result=mysql_query($sql);    
$row=mysql_fetch_array($result);  
$username = mysql_real_escape_string($_POST['username']);  
$password = $_POST['password'];  
$salt = ""lollol"";  
$auth_user = hash('sha256', $salt.$password);  
if($password == $salt.$auth_user){  
    echo ""Logged in"";  
} else {  
    echo ""Not logged in"";  
}  

I got the idea of that, I have to encrypt password when I want to log in, but im not sure. I hope that some of you can help me. 
","$password = $_POST['password'];

// This should be the users actual salt after you've found the user
// in the database by username or email, or other means
$salt = $users_stored_salt;

// This should be the exact method you use to salt passwords on creation
// Consider creating a functon for it, you must use the same salt
// on creation and on validation
$hashed_password = hash('sha256', $salt.$password.$salt);

// This is the user's hashed password, as stored in the database
$stored_password = $users_stored_password;

// We compare the two strings, as they should be the same if given the
// same input and hashed the same way
if ($stored_password === $hashed_password){
    echo ""Logged in"";
} else {
    echo ""Not logged in"";
}

Missed your edit, but hope this helps.
EDIT: I see you aren't storing unique hashes.
If you are looking up the user by password, you need to hash the password in your query the same way it was stored:
$salt = $your_salt;

$hashed_password = hash('sha256', $salt.$_POST['password']);

$sql= ""SELECT * FROM members WHERE username='$username' and password='$hashed_password'"";  

Otherwise, you could look up by unique username (not by password) and just compare the hashed input to the value of the stored password.

I'm very confused right now. How should my login_ac.php look like, if I should make it with the code I gave you in the top?

Just change the query to lookup by hashed password (the way you stored it).
$sql= ""SELECT * FROM members WHERE username='$username' and password='"".hash('sha256', $salt.$_POST['password']).""'"";  

You can remove the other validation and hashing - if you found the user then you know the input is valid.
Note that this only works when you know the way you're hashing the input is the exact same way you hashed the password upon creation.
","11637","<php><sha256>","2","2","4","2014-03-03 17:45:30","6432074","6","4","129570","","2011-06-21 21:14:10","2011-06-21 21:01:31",""
"6431918","PHP SHA256 and Salt won't work","I'm trying to create passwords that are sha256 hashed with a $salt variable to it. But for some reason it just won't work. Been working 3 hours on this now, and I'm about to rip my head off. Here is my code: 
I'll try again, sorry ;o) 
Ok, my script worked fine, untill I tried to add the sha256 to the passwords. I got a file for creating users which is: 
$salt = ""lollol"";  
$password = hash('sha256', $salt.$_POST['password']);  
$sql = (""INSERT INTO members (username, password, name, last_name,company)VALUES('$username', '$password', '$name', '$last_name', '$company')"")or die(mysql_error());

if(mysql_query($sql))
    echo ""Your accuont has been created."";

It seems like it's correctly added to the Database. I can see that it is getting hashed with some letters and numbers. 
But then when I'm trying to login, it just won't. 
My code for login.php is:
$sql= ""SELECT * FROM members WHERE username='$username' and password='$password'"";  
$result=mysql_query($sql);    
$row=mysql_fetch_array($result);  
$username = mysql_real_escape_string($_POST['username']);  
$password = $_POST['password'];  
$salt = ""lollol"";  
$auth_user = hash('sha256', $salt.$password);  
if($password == $salt.$auth_user){  
    echo ""Logged in"";  
} else {  
    echo ""Not logged in"";  
}  

I got the idea of that, I have to encrypt password when I want to log in, but im not sure. I hope that some of you can help me. 
","When trying to login you concatenate the hash with the salt once more
$auth_user = hash('sha256', $salt.$password);
if($password == $salt.$auth_user){ // <-- $salt once more
  echo ""Logged in"";
} else {
  echo ""Not logged in"";
}

It should work, if you just remove it
$auth_user = hash('sha256', $salt.$password);
if($password == $auth_user){
  echo ""Logged in"";
} else {
  echo ""Not logged in"";
}

Update: Going further
here
$sql= ""SELECT * FROM members WHERE username='$username' and password='$password'"";

You try to retrieve the row, where the username matches $username and the password matches $password. In the database the passwords are already hashed (and $password seems to be not defined at all), thus this query will never return any row.
$password = hash('sha256', $salt.$_POST['password']);
$username = mysql_real_escape_string($_POST['username']);
$sql= ""SELECT * FROM members WHERE username='$username' and password='$password'"";
$result=mysql_query($sql);

$result should now contain the only user that matches the given credentials. Its now very easy
if (mysql_num_rows($result) === 1) {
  echo ""Logged in"";
} else {
  echo ""Not logged in"";
}

","11637","<php><sha256>","2","10","4","2014-03-03 17:45:30","6432074","6","4","129570","","2011-06-21 21:14:10","2011-06-21 21:01:31",""
"6431918","PHP SHA256 and Salt won't work","I'm trying to create passwords that are sha256 hashed with a $salt variable to it. But for some reason it just won't work. Been working 3 hours on this now, and I'm about to rip my head off. Here is my code: 
I'll try again, sorry ;o) 
Ok, my script worked fine, untill I tried to add the sha256 to the passwords. I got a file for creating users which is: 
$salt = ""lollol"";  
$password = hash('sha256', $salt.$_POST['password']);  
$sql = (""INSERT INTO members (username, password, name, last_name,company)VALUES('$username', '$password', '$name', '$last_name', '$company')"")or die(mysql_error());

if(mysql_query($sql))
    echo ""Your accuont has been created."";

It seems like it's correctly added to the Database. I can see that it is getting hashed with some letters and numbers. 
But then when I'm trying to login, it just won't. 
My code for login.php is:
$sql= ""SELECT * FROM members WHERE username='$username' and password='$password'"";  
$result=mysql_query($sql);    
$row=mysql_fetch_array($result);  
$username = mysql_real_escape_string($_POST['username']);  
$password = $_POST['password'];  
$salt = ""lollol"";  
$auth_user = hash('sha256', $salt.$password);  
if($password == $salt.$auth_user){  
    echo ""Logged in"";  
} else {  
    echo ""Not logged in"";  
}  

I got the idea of that, I have to encrypt password when I want to log in, but im not sure. I hope that some of you can help me. 
","You're storing an encrypted password, but your select query is looking for the unencrypted password.
Just get the matching username (without a password condition) - usernames are unique, right?:
$sql= ""SELECT * FROM members WHERE username='$username'"";  
$result=mysql_query($sql);    
$row=mysql_fetch_array($result);  
$username = mysql_real_escape_string($_POST['username']);  
$password = $_POST['password'];  
$salt = ""lollol"";  
$auth_user = hash('sha256', $salt.$password);  
if($row[""password""] == $auth_user){  
    echo ""Logged in"";  
} else {  
    echo ""Not logged in"";  
}  

","11637","<php><sha256>","2","3","4","2014-03-03 17:45:30","6432074","6","4","129570","","2011-06-21 21:14:10","2011-06-21 21:01:31",""
"6431918","PHP SHA256 and Salt won't work","I'm trying to create passwords that are sha256 hashed with a $salt variable to it. But for some reason it just won't work. Been working 3 hours on this now, and I'm about to rip my head off. Here is my code: 
I'll try again, sorry ;o) 
Ok, my script worked fine, untill I tried to add the sha256 to the passwords. I got a file for creating users which is: 
$salt = ""lollol"";  
$password = hash('sha256', $salt.$_POST['password']);  
$sql = (""INSERT INTO members (username, password, name, last_name,company)VALUES('$username', '$password', '$name', '$last_name', '$company')"")or die(mysql_error());

if(mysql_query($sql))
    echo ""Your accuont has been created."";

It seems like it's correctly added to the Database. I can see that it is getting hashed with some letters and numbers. 
But then when I'm trying to login, it just won't. 
My code for login.php is:
$sql= ""SELECT * FROM members WHERE username='$username' and password='$password'"";  
$result=mysql_query($sql);    
$row=mysql_fetch_array($result);  
$username = mysql_real_escape_string($_POST['username']);  
$password = $_POST['password'];  
$salt = ""lollol"";  
$auth_user = hash('sha256', $salt.$password);  
if($password == $salt.$auth_user){  
    echo ""Logged in"";  
} else {  
    echo ""Not logged in"";  
}  

I got the idea of that, I have to encrypt password when I want to log in, but im not sure. I hope that some of you can help me. 
","It is worth checking that the field length in the database is big enough to store the whole hashed password without truncating it. You will never get a password match when logging in if the stored password is has the end missing.
","11637","<php><sha256>","2","0","4","2014-03-03 17:45:30","6432074","6","4","129570","","2011-06-21 21:14:10","2011-06-21 21:01:31",""
"16866001","Generate SHA256 hash in Objective-C","So I need to generate a Sha256 password in Objective-C, and can't figure out for the life of me how to do it! Is there something easy I'm just missing?
I've tried implementing the following method (which was written for iPhone, but I figured maybe it'd work cross-platform, as some Objective-C code does)
-(NSString*)sha256HashFor:(NSString*)input
{
    const char* str = [input UTF8String];
    unsigned char result[CC_SHA256_DIGEST_LENGTH];
    CC_SHA256(str, strlen(str), result);

    NSMutableString *ret = [NSMutableString stringWithCapacity:CC_SHA256_DIGEST_LENGTH*2];
    for(int i = 0; i<CC_SHA256_DIGEST_LENGTH; i++)
    {
        [ret appendFormat:@""%02x"",result[i]];
    }
    return ret;
}

But that just spat out errors about CC_SHA256_DIGEST_LENGTH being an undeclared identifier.
","You need to include the appropriate header file:
#include <CommonCrypto/CommonDigest.h>

According to the Cryptographic Services documentation this should be available on both iOS and OS X.

In OS X v10.5 and later and iOS 5.0 and later, Common Crypto provides low-level C support for encryption and decryption. Common Crypto is not as straightforward as Security Transforms, but provides a wider range of features, including additional hashing schemes, cipher modes, and so on.

","11277","<objective-c><macos><passwords><sha256><password-hash>","11","18","4","2019-10-13 18:22:43","16866251","0","3","2224584","","2019-05-28 21:06:23","2013-05-31 21:07:34",""
"16866001","Generate SHA256 hash in Objective-C","So I need to generate a Sha256 password in Objective-C, and can't figure out for the life of me how to do it! Is there something easy I'm just missing?
I've tried implementing the following method (which was written for iPhone, but I figured maybe it'd work cross-platform, as some Objective-C code does)
-(NSString*)sha256HashFor:(NSString*)input
{
    const char* str = [input UTF8String];
    unsigned char result[CC_SHA256_DIGEST_LENGTH];
    CC_SHA256(str, strlen(str), result);

    NSMutableString *ret = [NSMutableString stringWithCapacity:CC_SHA256_DIGEST_LENGTH*2];
    for(int i = 0; i<CC_SHA256_DIGEST_LENGTH; i++)
    {
        [ret appendFormat:@""%02x"",result[i]];
    }
    return ret;
}

But that just spat out errors about CC_SHA256_DIGEST_LENGTH being an undeclared identifier.
","Check out the NSHash cocoa pod. It has a bunch of different hashing methods including SHA256.
https://github.com/jerolimov/NSHash
","11277","<objective-c><macos><passwords><sha256><password-hash>","11","1","4","2019-10-13 18:22:43","16866251","0","3","2224584","","2019-05-28 21:06:23","2013-05-31 21:07:34",""
"16866001","Generate SHA256 hash in Objective-C","So I need to generate a Sha256 password in Objective-C, and can't figure out for the life of me how to do it! Is there something easy I'm just missing?
I've tried implementing the following method (which was written for iPhone, but I figured maybe it'd work cross-platform, as some Objective-C code does)
-(NSString*)sha256HashFor:(NSString*)input
{
    const char* str = [input UTF8String];
    unsigned char result[CC_SHA256_DIGEST_LENGTH];
    CC_SHA256(str, strlen(str), result);

    NSMutableString *ret = [NSMutableString stringWithCapacity:CC_SHA256_DIGEST_LENGTH*2];
    for(int i = 0; i<CC_SHA256_DIGEST_LENGTH; i++)
    {
        [ret appendFormat:@""%02x"",result[i]];
    }
    return ret;
}

But that just spat out errors about CC_SHA256_DIGEST_LENGTH being an undeclared identifier.
","#import <CommonCrypto/CommonDigest.h>


Objective-C: SHA256 is only two lines:

+ (NSData *)doSha256:(NSData *)dataIn {
    NSMutableData *macOut = [NSMutableData dataWithLength:CC_SHA256_DIGEST_LENGTH];
    CC_SHA256(dataIn.bytes, dataIn.length, macOut.mutableBytes);
    return macOut;
}


Swift 3

func sha256Hex(string: String) -> String? {
    guard let messageData = string.data(using:String.Encoding.utf8) else { return nil }
    var digestData = Data(count: Int(CC_SHA256_DIGEST_LENGTH))

    _ = digestData.withUnsafeMutableBytes {digestBytes in
        messageData.withUnsafeBytes {messageBytes in
            CC_SHA256(messageBytes, CC_LONG(messageData.count), digestBytes)
        }
    }

    return digestData.map { String(format: ""%02hhx"", $0) }.joined()
}

// Test
let sha256HexString = sha256Hex(string:""Hello"")
print(""sha256HexString: \(sha256HexString!)"")


sha256HexString: ""185f8db32271fe25f561a6fc938b2e264306ec304eda518007d1764826381969""

","11277","<objective-c><macos><passwords><sha256><password-hash>","11","9","4","2019-10-13 18:22:43","16866251","0","3","2224584","","2019-05-28 21:06:23","2013-05-31 21:07:34",""
"16866001","Generate SHA256 hash in Objective-C","So I need to generate a Sha256 password in Objective-C, and can't figure out for the life of me how to do it! Is there something easy I'm just missing?
I've tried implementing the following method (which was written for iPhone, but I figured maybe it'd work cross-platform, as some Objective-C code does)
-(NSString*)sha256HashFor:(NSString*)input
{
    const char* str = [input UTF8String];
    unsigned char result[CC_SHA256_DIGEST_LENGTH];
    CC_SHA256(str, strlen(str), result);

    NSMutableString *ret = [NSMutableString stringWithCapacity:CC_SHA256_DIGEST_LENGTH*2];
    for(int i = 0; i<CC_SHA256_DIGEST_LENGTH; i++)
    {
        [ret appendFormat:@""%02x"",result[i]];
    }
    return ret;
}

But that just spat out errors about CC_SHA256_DIGEST_LENGTH being an undeclared identifier.
","a modified version of @zaph answer in Objective-C with NSString as input and output:
-(NSString*)sha256HashFor:(NSString*)input
{
    NSData* data = [input dataUsingEncoding:NSUTF8StringEncoding];
    NSMutableData *sha256Data = [NSMutableData dataWithLength:CC_SHA256_DIGEST_LENGTH];
    CC_SHA256([data bytes], (CC_LONG)[data length], [sha256Data mutableBytes]);
    return [sha256Data base64EncodedStringWithOptions:0];
}

","11277","<objective-c><macos><passwords><sha256><password-hash>","11","0","4","2019-10-13 18:22:43","16866251","0","3","2224584","","2019-05-28 21:06:23","2013-05-31 21:07:34",""
"17258800","C# Support for RSA SHA 256 signing for individual XML elements","I have encountered a blocker with the .NET Framework version 4.5 to do with signing of XML with digital signatures. 
My problem is based around the need to sign individual XML elements with X.509 certificate with the RSA SHA-256 algorithm. I have read many .NET posts on this topic and it appears that there is a solution originally developed in the CLR Security project RSAPKCS1SHA256SignatureDescription.cs class. RSAPKCS1SHA256SignatureDescription has of course since been incorporated into the .net runtime and as of .NET 4.5 is now available under the distributed binary System.Deployment.dll. I have attempted the above solution in .NET to sign specific XML elements with RSA SHA-256 however have yet to have any success.
I am trying to sign a SOAP message complying with the Oasis ebms standard with a WSSE Token. Please be aware that the class is written to cater for Soap With Attachments (SwA) and signing individual attachments. 
My code is as follows
My code is the following:
using System;
using System.Collections.Generic;
using System.IO;
using System.IdentityModel.Tokens;
using System.Security;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Security.Cryptography.Xml;
using System.ServiceModel.Channels;
using System.ServiceModel.Security;
using System.Text;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Serialization;
using System.Deployment.Internal.CodeSigning;

namespace TestCSharpX509CertificateRSSHA256
{
    public class SignatureSupportUtility
    {

    private bool IsSignatureContentTransform
    {
        get
        {
          return true;
          //get IsSignatureContentTransform                
        }
    }

       public SignatureSupportUtility()
       {
          Register();
       }


    private static void Register()
    {
        CryptoConfig.AddAlgorithm(typeof(RSAPKCS1SHA256SignatureDescription), ""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"");
    }

    private void Sign(Message message, string[] elementIdsToSign, string[] attachmentsToSign, string wssNamespace, X509Certificate2 certificate)
    {
       //Prepare XML to encrypt and sign
       var element = this.PrepareEncyrptSign(message);

            bool signEntireDocument = true;
            string elementToBeSigned = string.Empty;
            var signedMessage = new XmlDocument();
            signedMessage.AppendChild(signedMessage.ImportNode(element, true));

            SignatureType signAs = SignatureType.InternallyDetached;
            signedMessage.PreserveWhitespace = false;

            OverrideSignedXml signedXml = new OverrideSignedXml(signedMessage);
            signedXml.SignedInfo.CanonicalizationMethod = SignedXml.XmlDsigExcC14NTransformUrl;

            if (elementIdsToSign != null && elementIdsToSign.Length > 0)
            {
                bool isContentTransform = this.IsSignatureContentTransform;

                foreach (string s in elementIdsToSign)
                {
                    // Create a reference to be signed.
                    Reference reference = new Reference(string.Format(""#{0}"", s));
                    reference.AddTransform(new XmlDsigExcC14NTransform());
                    reference.DigestMethod = ""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"";


                    // Add the reference to the SignedXml object.
                    signedXml.AddReference(reference);
                }

                signEntireDocument = false;
            }

            // Reference attachments to sign
            if (attachmentsToSign != null && attachmentsToSign.Length > 0)
            {
                bool isContentTransform = this.IsSignatureContentTransform;

                foreach (string attachmentId in attachmentsToSign)
                {
                    // Create a reference to be signed.
                    Reference reference = new Reference(string.Format(""{0}{1}"", Constants.CidUriScheme, attachmentId));
                    reference.DigestMethod = ""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"";

                    if (isContentTransform)
                    {
                        AttachmentContentSignatureTransform env = new AttachmentContentSignatureTransform();
                        reference.AddTransform(env);
                    }
                    else
                    {
                        AttachmentCompleteSignatureTransform env = new AttachmentCompleteSignatureTransform();
                        reference.AddTransform(env);
                    }

                    // Add the reference to the SignedXml object.
                    signedXml.AddReference(reference);
                }

                signEntireDocument = false;
            }

            if (signEntireDocument)
            {
                Reference reference = new Reference();
                reference.Uri = """";
                reference.DigestMethod = ""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"";

                XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();
                reference.AddTransform(env);
                signedXml.AddReference(reference);
                signAs = SignatureType.Enveloped;
            }

            string x509CertificateReferenceId = string.Format(""{0}-{1}"", Constants.IdAttributeName, Guid.NewGuid().ToString(""N""));
            KeyInfo keyInfo = new KeyInfo();
            keyInfo.AddClause(new KeyInfoX509SecurityTokenReference(string.Format(""#{0}"", x509CertificateReferenceId), wssNamespace));
            signedXml.KeyInfo = keyInfo;
           signedXml.SignedInfo.SignatureMethod = ""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"";

           RSA  key = (RSACryptoServiceProvider)certificate.PrivateKey;
           signedXML.SigningKey = key;
            CidWebRequest.Message = message;

            signedXml.ComputeSignature();
            var xmlSignature = signedXml.GetXml();
            XmlDocument unsignedEnvelopeDoc = new XmlDocument();
            unsignedEnvelopeDoc.LoadXml(message.MessageAsString); }}} 

using System;
using System.Collections.Generic;
using System.IO;
using System.IdentityModel.Tokens;
using System.Security;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Security.Cryptography.Xml;
using System.ServiceModel.Channels;
using System.ServiceModel.Security;
using System.Text;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Serialization;
using System.Deployment.Internal.CodeSigning;


namespace TestCSharpX509CertificateRSSHA256
{
public sealed class OverrideSignedXml : SignedXml
{
    public OverrideSignedXml()
        : base()
    {
    }

    public OverrideSignedXml(XmlDocument doc)
        : base(doc)
    {
    }

    public override XmlElement GetIdElement(XmlDocument document, string idValue)
    {
        XmlElement element = base.GetIdElement(document, idValue);

        if (element == null)
        {
            XmlNamespaceManager nsmgr = new XmlNamespaceManager(document.NameTable);
            nsmgr.AddNamespace(""wsu"", =""http://docs.oasis-open. org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"");

            element = document.SelectSingleNode(""//*[@wsu:Id=\"""" + idValue + ""\""]"", nsmgr) as XmlElement;
        }

        return element;
    }
}

}
The Sign method in my SignatureSupportUtility class should be adequate to sign individual XML elements or the whole message, however I keep receiving a Cryptography exception claiming that the SHA-256 is not supported. I think this exception should not be valid observing that the RSAPKCS1SHA256SignatureDescription.cs is registered. However observing that the SignedXML class does not include the namespace for SHA-256 and only SHA-128 I am beginning to doubt if the SHA 256 is supported regardless of registration.
Could someone please advise me on how best to resolve my issue and be able to sign XML with an X.509 certificate via RSA SHA 256 algorithm?
","I am also looking at the Oasis ebms stuff. 
I cannot find the article I took this from but I used that class that is in 4.5:
public class RsaPkCs1Sha256SignatureDescription : SignatureDescription
{
    public RsaPkCs1Sha256SignatureDescription()
    {
        KeyAlgorithm = ""System.Security.Cryptography.RSACryptoServiceProvider"";
        DigestAlgorithm = ""System.Security.Cryptography.SHA256Managed"";
        FormatterAlgorithm = ""System.Security.Cryptography.RSAPKCS1SignatureFormatter"";
        DeformatterAlgorithm = ""System.Security.Cryptography.RSAPKCS1SignatureDeformatter"";
    }

    public override AsymmetricSignatureDeformatter CreateDeformatter(AsymmetricAlgorithm key)
    {
        var asymmetricSignatureDeformatter = (AsymmetricSignatureDeformatter) CryptoConfig.CreateFromName(DeformatterAlgorithm);
        asymmetricSignatureDeformatter.SetKey(key);
        asymmetricSignatureDeformatter.SetHashAlgorithm(""SHA256"");
        return asymmetricSignatureDeformatter;
    }

and then use something like this to sign (have edited some irrelevant bits out):
    public XmlElement SignDocument(XmlDocument doc, List<string> idsToSign)
    {
        CryptoConfig.AddAlgorithm(typeof(RsaPkCs1Sha256SignatureDescription), @""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"");

        var cspParams = new CspParameters(24) { KeyContainerName = ""XML_DISG_RSA_KEY"" };
        var key = new RSACryptoServiceProvider(cspParams);
        key.FromXmlString(_x509SecurityToken.Certificate.PrivateKey.ToXmlString(true));

        var signer = new SoapSignedXml(doc) { SigningKey = key };

        signer.SignedInfo.CanonicalizationMethod = SignedXml.XmlDsigExcC14NTransformUrl;

        var keyInfo = new KeyInfo();
        keyInfo.AddClause(new SecurityTokenReference(_x509SecurityToken, SecurityTokenReference.SerializationOptions.Embedded));

        signer.KeyInfo = keyInfo;
        signer.SignedInfo.SignatureMethod = ""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"";

        var cn14Transform = new XmlDsigExcC14NTransform();
        string referenceDigestMethod = ""http://www.w3.org/2001/04/xmlenc#sha256"";

        foreach (string id in idsToSign)
        {
            var reference = new Reference(""#"" + id);
            reference.AddTransform(cn14Transform);
            reference.DigestMethod = referenceDigestMethod;
            signer.AddReference(reference);
        }

        signer.ComputeSignature();

        return signer.GetXml();
    }

seems to work and verifies OK at the other end. Tested with Holodeck the other day and I think it failed on a timestamp that was missing from the signature elements.
However, the signing of attachments seems to be a real problem in .NET - I don't think the relevant transforms are supported at all.
","10900","<c#><xml><signature><x509><sha256>","2","8","2","2015-02-13 14:15:29","","1","2","2513067","","2013-06-24 05:42:33","2013-06-23 08:06:11",""
"17258800","C# Support for RSA SHA 256 signing for individual XML elements","I have encountered a blocker with the .NET Framework version 4.5 to do with signing of XML with digital signatures. 
My problem is based around the need to sign individual XML elements with X.509 certificate with the RSA SHA-256 algorithm. I have read many .NET posts on this topic and it appears that there is a solution originally developed in the CLR Security project RSAPKCS1SHA256SignatureDescription.cs class. RSAPKCS1SHA256SignatureDescription has of course since been incorporated into the .net runtime and as of .NET 4.5 is now available under the distributed binary System.Deployment.dll. I have attempted the above solution in .NET to sign specific XML elements with RSA SHA-256 however have yet to have any success.
I am trying to sign a SOAP message complying with the Oasis ebms standard with a WSSE Token. Please be aware that the class is written to cater for Soap With Attachments (SwA) and signing individual attachments. 
My code is as follows
My code is the following:
using System;
using System.Collections.Generic;
using System.IO;
using System.IdentityModel.Tokens;
using System.Security;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Security.Cryptography.Xml;
using System.ServiceModel.Channels;
using System.ServiceModel.Security;
using System.Text;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Serialization;
using System.Deployment.Internal.CodeSigning;

namespace TestCSharpX509CertificateRSSHA256
{
    public class SignatureSupportUtility
    {

    private bool IsSignatureContentTransform
    {
        get
        {
          return true;
          //get IsSignatureContentTransform                
        }
    }

       public SignatureSupportUtility()
       {
          Register();
       }


    private static void Register()
    {
        CryptoConfig.AddAlgorithm(typeof(RSAPKCS1SHA256SignatureDescription), ""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"");
    }

    private void Sign(Message message, string[] elementIdsToSign, string[] attachmentsToSign, string wssNamespace, X509Certificate2 certificate)
    {
       //Prepare XML to encrypt and sign
       var element = this.PrepareEncyrptSign(message);

            bool signEntireDocument = true;
            string elementToBeSigned = string.Empty;
            var signedMessage = new XmlDocument();
            signedMessage.AppendChild(signedMessage.ImportNode(element, true));

            SignatureType signAs = SignatureType.InternallyDetached;
            signedMessage.PreserveWhitespace = false;

            OverrideSignedXml signedXml = new OverrideSignedXml(signedMessage);
            signedXml.SignedInfo.CanonicalizationMethod = SignedXml.XmlDsigExcC14NTransformUrl;

            if (elementIdsToSign != null && elementIdsToSign.Length > 0)
            {
                bool isContentTransform = this.IsSignatureContentTransform;

                foreach (string s in elementIdsToSign)
                {
                    // Create a reference to be signed.
                    Reference reference = new Reference(string.Format(""#{0}"", s));
                    reference.AddTransform(new XmlDsigExcC14NTransform());
                    reference.DigestMethod = ""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"";


                    // Add the reference to the SignedXml object.
                    signedXml.AddReference(reference);
                }

                signEntireDocument = false;
            }

            // Reference attachments to sign
            if (attachmentsToSign != null && attachmentsToSign.Length > 0)
            {
                bool isContentTransform = this.IsSignatureContentTransform;

                foreach (string attachmentId in attachmentsToSign)
                {
                    // Create a reference to be signed.
                    Reference reference = new Reference(string.Format(""{0}{1}"", Constants.CidUriScheme, attachmentId));
                    reference.DigestMethod = ""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"";

                    if (isContentTransform)
                    {
                        AttachmentContentSignatureTransform env = new AttachmentContentSignatureTransform();
                        reference.AddTransform(env);
                    }
                    else
                    {
                        AttachmentCompleteSignatureTransform env = new AttachmentCompleteSignatureTransform();
                        reference.AddTransform(env);
                    }

                    // Add the reference to the SignedXml object.
                    signedXml.AddReference(reference);
                }

                signEntireDocument = false;
            }

            if (signEntireDocument)
            {
                Reference reference = new Reference();
                reference.Uri = """";
                reference.DigestMethod = ""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"";

                XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();
                reference.AddTransform(env);
                signedXml.AddReference(reference);
                signAs = SignatureType.Enveloped;
            }

            string x509CertificateReferenceId = string.Format(""{0}-{1}"", Constants.IdAttributeName, Guid.NewGuid().ToString(""N""));
            KeyInfo keyInfo = new KeyInfo();
            keyInfo.AddClause(new KeyInfoX509SecurityTokenReference(string.Format(""#{0}"", x509CertificateReferenceId), wssNamespace));
            signedXml.KeyInfo = keyInfo;
           signedXml.SignedInfo.SignatureMethod = ""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"";

           RSA  key = (RSACryptoServiceProvider)certificate.PrivateKey;
           signedXML.SigningKey = key;
            CidWebRequest.Message = message;

            signedXml.ComputeSignature();
            var xmlSignature = signedXml.GetXml();
            XmlDocument unsignedEnvelopeDoc = new XmlDocument();
            unsignedEnvelopeDoc.LoadXml(message.MessageAsString); }}} 

using System;
using System.Collections.Generic;
using System.IO;
using System.IdentityModel.Tokens;
using System.Security;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Security.Cryptography.Xml;
using System.ServiceModel.Channels;
using System.ServiceModel.Security;
using System.Text;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Serialization;
using System.Deployment.Internal.CodeSigning;


namespace TestCSharpX509CertificateRSSHA256
{
public sealed class OverrideSignedXml : SignedXml
{
    public OverrideSignedXml()
        : base()
    {
    }

    public OverrideSignedXml(XmlDocument doc)
        : base(doc)
    {
    }

    public override XmlElement GetIdElement(XmlDocument document, string idValue)
    {
        XmlElement element = base.GetIdElement(document, idValue);

        if (element == null)
        {
            XmlNamespaceManager nsmgr = new XmlNamespaceManager(document.NameTable);
            nsmgr.AddNamespace(""wsu"", =""http://docs.oasis-open. org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"");

            element = document.SelectSingleNode(""//*[@wsu:Id=\"""" + idValue + ""\""]"", nsmgr) as XmlElement;
        }

        return element;
    }
}

}
The Sign method in my SignatureSupportUtility class should be adequate to sign individual XML elements or the whole message, however I keep receiving a Cryptography exception claiming that the SHA-256 is not supported. I think this exception should not be valid observing that the RSAPKCS1SHA256SignatureDescription.cs is registered. However observing that the SignedXML class does not include the namespace for SHA-256 and only SHA-128 I am beginning to doubt if the SHA 256 is supported regardless of registration.
Could someone please advise me on how best to resolve my issue and be able to sign XML with an X.509 certificate via RSA SHA 256 algorithm?
","Unfortunately Andrew's answer is not applicable when the private key cannot be exported.
I am using a smart-card and so far I have found no way of using SignedXML with SHA-256. This feature seems to be broken in the current implementation of RSACryptoServiceProvider.
The only solution in my opinion would be to switch from CSP to PKCS#11 and then use BouncyCastle.Net. And rewrite everything.
","10900","<c#><xml><signature><x509><sha256>","2","0","2","2015-02-13 14:15:29","","1","2","2513067","","2013-06-24 05:42:33","2013-06-23 08:06:11",""
"21216504","Is it possible to crack SHA256, when you know the answer is a coordinate?","I need to crack a sha256 hash, and I know the answer is in coordinates, but I don't know what are the coordinate values
example:
3f1c756daec9ebced7ff403acb10430659c13b328c676c4510773dc315784e4e
58.375782 26.742632

Is it possible to create a python script that makes two variables (both with the value 00.000000), then add them togheter (ex: k=i+"" ""+j), then converts k into sha256 and compares it to the sha256, I'm trying to crack. If it doesn't equal the sha256 being cracked, then it adds i a value (i=i+00.000001) and triess again. and so on and so on
","Producing all possible coordinates between 00.000000 and 99.999999 is easy enough:
from itertools import product
import hashlib

digits = '0123456789'

for combo in product(digits, repeat=16):
    coords = '{}.{} {}.{}'.format(
        ''.join(combo[:2]), ''.join(combo[2:8]),
        ''.join(combo[8:10]), ''.join(combo[10:]))
    hash = hashlib.sha256(coords).hexdigest()
    if hash == '3f1c756daec9ebced7ff403acb10430659c13b328c676c4510773dc315784e4e':
        print coords
        break

This'll brute-force all 10**16 (a big number) combinations. Sit back and relax, this'll take a while.
And by 'a while', we really mean not in your lifetime, or anyone else's. Just iterating over all possible combinations produced by product() takes a huge amount of time, as each added digit to try increases the time required by a factor of 10:
>>> from collections import deque
>>> from itertools import product
>>> from timeit import timeit
>>> digits = '0123456789'
>>> timeit(lambda: deque(product(digits, repeat=8), 0), number=5)
3.014396679995116
>>> timeit(lambda: deque(product(digits, repeat=9), 0), number=5)
30.99540744899423

If producing all possible combinations of 8 digits takes .8 seconds (4s divided by 5 repetitions), 9 digits takes 8 seconds, you can extrapolate from that that 10 digits takes almost 1.5 minutes, etc. Just producing all possible combinations of 16 digits takes 1 million (10 ** 6) times as much time as 10 digits, so 963 days or just onder 3 years to run those in a loop. You could split this task up across 2000 different processes on a large number of computers with enough cores in total to run those processes in parallel, to reduce that to under 12 hours.
Then the loop body itself takes about 2.4 seconds per million iterations:
>>> from random import choice
>>> combo = tuple(choice(digits) for _ in range(16))  # random combination for testing
>>> timeit(""""""\
... coords = '{}.{} {}.{}'.format(
...     ''.join(combo[:2]), ''.join(combo[2:8]),
...     ''.join(combo[8:10]), ''.join(combo[10:]))
... hash = hashlib.sha256(coords).hexdigest()
... if hash == '3f1c756daec9ebced7ff403acb10430659c13b328c676c4510773dc315784e4e': pass
... """""", 'from __main__ import combo; import hashlib')
2.3429908752441406

But you have 10 ** 10 (10 thousand million) more times work than that, totaling roughly 743 years of computation work. Even being able to run 20 thousand parallel processes won't reduce that to a reasonable number (that's still about 13.5 years of work).
Python is just not fast enough for this task. Using GPUs it should be possible to reach 500 million hashes per second (0.5 Gigahash / s), at which point you could run the above brute-force operation and find a solution in about 230 days on such a system. At a cost, of course, because such a rig would cost about $3000-$4000 a month to run! But with enough dedicated hardware you can certainly 'crack' the hash in 'humane' timeline.
","10743","<python><coordinates><sha256><cracking>","4","8","2","2018-07-04 14:16:21","21216552","4","0","100297","","2014-01-19 12:04:41","2014-01-19 12:04:03",""
"21216504","Is it possible to crack SHA256, when you know the answer is a coordinate?","I need to crack a sha256 hash, and I know the answer is in coordinates, but I don't know what are the coordinate values
example:
3f1c756daec9ebced7ff403acb10430659c13b328c676c4510773dc315784e4e
58.375782 26.742632

Is it possible to create a python script that makes two variables (both with the value 00.000000), then add them togheter (ex: k=i+"" ""+j), then converts k into sha256 and compares it to the sha256, I'm trying to crack. If it doesn't equal the sha256 being cracked, then it adds i a value (i=i+00.000001) and triess again. and so on and so on
","One of the common claims about hashes is that they discard information, therefore they cannot be reversed. There's infinite messages that have the same hash. You can't know which of the infinite messages that give the same hash is correct.
Of course in practice, a brute force attack often works - either because your search strategy is likely to find the real original message first (most messages with hash collisions are obviously wrong in some trivial way - e.g. the wrong format - and won't turn up in the search because of that) or because your attack needs a different message with the same hash anyway.
In your case, what you know about the message means there's less information in the message than (apparently) in the hash. Of course hashing doesn't create new information, so that means many hashes cannot occur for any co-ordinate strings. You have (with very high probability for good hash algorithms) a 1:1 relationship between possible hashes and possible messages. In principle, you have an encrypted form of your message which can be decrypted.
Many people would call me an idiot for saying this, of course. After all, you still have to find all the hashes for all the possible messages. That may be faster than some people think, but it's a long way from trivial.
It has already been pointed out that there are 10^16 possible combinations based on your co-ordinate format. One thing to check is whether all values for all those digits are possible (and equally probable). Using floating point arithmetic internally shouldn't be a problem - double precision floats aren't 8-digit decimals, but 53 bits of mantissa should be plenty to ensure all those decimal digits are fully in use. However, it may be worth checking that there's no other limitation that reduces the number of cases to check - the obvious one being the precision in how those co-ordinates are measured.
Even if certain digit values are less probable than others, that means ordering the search to check more likely values first will save a lot of time for crackers.
","10743","<python><coordinates><sha256><cracking>","4","2","2","2018-07-04 14:16:21","21216552","4","0","100297","","2014-01-19 12:04:41","2014-01-19 12:04:03",""
"4711430","Generating SHA256 in iphone/Objective C ...?","How to create a SHA256 of a String in iphone/objective c...
Sha256 in Objective-C for iPhone
I have read this..but i am not able to understand this..
I want to create output similar to php funcation as follows:-
$hash = hash_hmac(""sha256"", implode(';', $hash_parameters), $api_key);

where hash parameters is the array of arguments...
Can you write this as a method which will take the input string...?
And what will be the output of method NSData or NSString..??
I have to create a request with this..??
So in the request object..
[theRequest setHTTPBody:requestBody];

what should be the type of requestBody??
","I'm not sure I fully understand your questions but if you're looking to create a hashed string you CAN pass in your parameters as arguments to a hash function.  
-(void)generateHashedString {

    NSString *key = @""Some random string"";
    //enter your objects you want to encode in the data object
    NSString *data = [NSString stringWithFormat:@""%@%@%@"", @""sha256"", hash_parameters, api_key];

    const char *cKey  = [key cStringUsingEncoding:NSASCIIStringEncoding];
    const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];

    unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];

    CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

    NSData *HMAC = [[NSData alloc] initWithBytes:cHMAC
                                          length:sizeof(cHMAC)];

    NSString *hash = [HMAC base64Encoding];

}

This will give you an NSString of hash that you can use to make your requests.  NSLog(@""%@"",hash); To see what you generated!
Make sure you #import <CommonCrypto/CommonHMAC.h> too 
","10501","<iphone><sha256>","11","17","5","2016-10-06 21:55:53","","1","6","-1","","2017-05-23 11:45:46","2011-01-17 08:59:04",""
"4711430","Generating SHA256 in iphone/Objective C ...?","How to create a SHA256 of a String in iphone/objective c...
Sha256 in Objective-C for iPhone
I have read this..but i am not able to understand this..
I want to create output similar to php funcation as follows:-
$hash = hash_hmac(""sha256"", implode(';', $hash_parameters), $api_key);

where hash parameters is the array of arguments...
Can you write this as a method which will take the input string...?
And what will be the output of method NSData or NSString..??
I have to create a request with this..??
So in the request object..
[theRequest setHTTPBody:requestBody];

what should be the type of requestBody??
","I spend a hole day, trying to convert the generated hash (bytes) into readable data. I used the base64 encoded like the answer above and it didn´t work at all for me (b.t.w. you need and an external .h to be able to use the base64 encoding, which i had).
So what i did was this (which works perfectly without an external .h):
CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

// Now convert to NSData structure to make it usable again
NSData *out = [NSData dataWithBytes:cHMAC length:CC_SHA256_DIGEST_LENGTH];

// description converts to hex but puts <> around it and spaces every 4 bytes
NSString *hash = [out description];
hash = [hash stringByReplacingOccurrencesOfString:@"" "" withString:@""""];
hash = [hash stringByReplacingOccurrencesOfString:@""<"" withString:@""""];
hash = [hash stringByReplacingOccurrencesOfString:@"">"" withString:@""""];
// hash is now a string with just the 40char hash value in it
NSLog(@""%@"",hash);

","10501","<iphone><sha256>","11","2","5","2016-10-06 21:55:53","","1","6","-1","","2017-05-23 11:45:46","2011-01-17 08:59:04",""
"4711430","Generating SHA256 in iphone/Objective C ...?","How to create a SHA256 of a String in iphone/objective c...
Sha256 in Objective-C for iPhone
I have read this..but i am not able to understand this..
I want to create output similar to php funcation as follows:-
$hash = hash_hmac(""sha256"", implode(';', $hash_parameters), $api_key);

where hash parameters is the array of arguments...
Can you write this as a method which will take the input string...?
And what will be the output of method NSData or NSString..??
I have to create a request with this..??
So in the request object..
[theRequest setHTTPBody:requestBody];

what should be the type of requestBody??
","I didn't compare the following code to the PHP function output but it works for me:
+(NSString *)signWithKey:(NSString *)key usingData:(NSString *)data
{   
    const char *cKey  = [key cStringUsingEncoding:NSASCIIStringEncoding];
    const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];

    unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];

    CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

    NSData *HMAC = [[NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];

    return [[HMAC.description stringByTrimmingCharactersInSet:[NSCharacterSet characterSetWithCharactersInString:@""<>""]] stringByReplacingOccurrencesOfString:@"" "" withString:@""""];
}

Let me know if it was helpful...
","10501","<iphone><sha256>","11","3","5","2016-10-06 21:55:53","","1","6","-1","","2017-05-23 11:45:46","2011-01-17 08:59:04",""
"4711430","Generating SHA256 in iphone/Objective C ...?","How to create a SHA256 of a String in iphone/objective c...
Sha256 in Objective-C for iPhone
I have read this..but i am not able to understand this..
I want to create output similar to php funcation as follows:-
$hash = hash_hmac(""sha256"", implode(';', $hash_parameters), $api_key);

where hash parameters is the array of arguments...
Can you write this as a method which will take the input string...?
And what will be the output of method NSData or NSString..??
I have to create a request with this..??
So in the request object..
[theRequest setHTTPBody:requestBody];

what should be the type of requestBody??
","For a reference this HMac hashing will work on PHP.
- (NSString *)getToken:(NSString *)queryString
{
    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
    [formatter setTimeZone:[NSTimeZone timeZoneWithName:@""UTC""]];
    [formatter setDateFormat:@""yyyy-MM-dd HH:mm:ss""];
    NSString *dateString = [formatter stringFromDate:[NSDate date]];
    NSDate *dateTodayUTC = [formatter dateFromString:dateString];
    NSString *nowTimestamp = [NSString stringWithFormat:@""%.f"", [dateTodayUTC timeIntervalSince1970]];

    NSString *hashCombinations = [[NSString alloc] initWithFormat:@""%@%@%.f"", queryString, public_api_key, [dateTodayUTC timeIntervalSince1970]];

    const char *privateKey  = [private_api_key cStringUsingEncoding:NSUTF8StringEncoding];
    const char *requestData = [hashCombinations cStringUsingEncoding:NSUTF8StringEncoding];
    unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];

    //HmacSHA256
    CCHmac(kCCHmacAlgSHA256, // algorithm
           privateKey, strlen(privateKey), // privateKey
           requestData, strlen(requestData), // requestData
           cHMAC); // length

    NSString *hash;
    NSMutableString* output = [NSMutableString stringWithCapacity:CC_SHA256_DIGEST_LENGTH * 2];
    for(int i = 0; i < CC_SHA256_DIGEST_LENGTH; i++)
        [output appendFormat:@""%02x"", cHMAC[i]];
    hash = output;

    NSString *base64HashString = [self base64String:hash];
    self.tokenLabel.text = hash;

    NSLog(@""generated hash = %@"", hash);
    NSLog(@""base64 hash = %@"", base64HashString);
    NSLog(@""timestamp = %@ nsdate utc = %@"", nowTimestamp, dateString);
    NSLog(@""combinations %@"", hashCombinations);
    return [base64HashString urlencode];
}

You can use this base64 method. 
- (NSString *)base64String:(NSString *)str
{
    NSData *theData = [str dataUsingEncoding: NSASCIIStringEncoding];
    const uint8_t* input = (const uint8_t*)[theData bytes];
    NSInteger length = [theData length];

    static char table[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="";

    NSMutableData* data = [NSMutableData dataWithLength:((length + 2) / 3) * 4];
    uint8_t* output = (uint8_t*)data.mutableBytes;

    NSInteger i;
    for (i=0; i < length; i += 3) {
        NSInteger value = 0;
        NSInteger j;
        for (j = i; j < (i + 3); j++) {
            value <<= 8;

            if (j < length) {
                value |= (0xFF & input[j]);
            }
        }

        NSInteger theIndex = (i / 3) * 4;
        output[theIndex + 0] =                    table[(value >> 18) & 0x3F];
        output[theIndex + 1] =                    table[(value >> 12) & 0x3F];
        output[theIndex + 2] = (i + 1) < length ? table[(value >> 6)  & 0x3F] : '=';
        output[theIndex + 3] = (i + 2) < length ? table[(value >> 0)  & 0x3F] : '=';
    }

    return [[NSString alloc] initWithData:data encoding:NSASCIIStringEncoding];
}

","10501","<iphone><sha256>","11","1","5","2016-10-06 21:55:53","","1","6","-1","","2017-05-23 11:45:46","2011-01-17 08:59:04",""
"4711430","Generating SHA256 in iphone/Objective C ...?","How to create a SHA256 of a String in iphone/objective c...
Sha256 in Objective-C for iPhone
I have read this..but i am not able to understand this..
I want to create output similar to php funcation as follows:-
$hash = hash_hmac(""sha256"", implode(';', $hash_parameters), $api_key);

where hash parameters is the array of arguments...
Can you write this as a method which will take the input string...?
And what will be the output of method NSData or NSString..??
I have to create a request with this..??
So in the request object..
[theRequest setHTTPBody:requestBody];

what should be the type of requestBody??
","I think it's more compact solution:
#import <CommonCrypto/CommonCrypto.h>

...

-(NSData*)Sha256WithKey:(NSData*)key andData:(NSData*)data{
     NSMutableData* result = [NSMutableData 
                               dataWithCapacity:CC_SHA256_DIGEST_LENGTH];

     CCHmac(kCCHmacAlgSHA256, [key bytes], [key length],
            [data bytes], [data length], result.mutableBytes);

     return result;
 }
 ....

","10501","<iphone><sha256>","11","0","5","2016-10-06 21:55:53","","1","6","-1","","2017-05-23 11:45:46","2011-01-17 08:59:04",""
"6273201","(bitcoin) Calculate hash from getwork function - how to do it?","when I call getwork on my bitcoind server, I get the following:
./bitcoind getwork
{
    ""midstate"" : ""695d56ae173bbd0fd5f51d8f7753438b940b7cdd61eb62039036acd1af5e51e3"",
    ""data"" : ""000000013d9dcbbc2d120137c5b1cb1da96bd45b249fd1014ae2c2b400001511000000009726fba001940ebb5c04adc4450bdc0c20b50db44951d9ca22fc5e75d51d501f4deec2711a1d932f00000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000080020000"",
    ""hash1"" : ""00000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000010000"",
    ""target"" : ""00000000000000000000000000000000000000000000002f931d000000000000""
}

This protocol does not seem to be documented. How do I compute the hash from this data. I think that this data is in little endian. So the first step is to convert everything to big endian? Once that is done, I calculate the sha256 of the data. The data can be divided in two chuncks of 64 bytes each. The hash of the first chuck is given by midstate and therefore does not have to be computed. 
I must therefore hash the chunck #2 with sha256, using the midstate as the initial hash values. Once that is done, I end up with a hash of chunk 2, which is 32 bytes. I calculate the hash of this chunk one more time to get a final hash.
Then, do I convert everything to little endian and submit the work?
What is hash1 used for?
","It sounds right, there is a script in javascript that do calculate the hash but I do not fully understand it so I don't know, maybe you understand it better if you look.
this.tryHash = function(midstate, half, data, hash1, target, nonce){  
    data[3] = nonce;
    this.sha.reset();

    var h0 = this.sha.update(midstate, data).state;   // compute first hash
    for (var i = 0; i < 8; i++) hash1[i] = h0[i];   // place it in the h1 holder
    this.sha.reset();                 // reset to initial state
    var h = this.sha.update(hash1).state;       // compute final hash
    if (h[7] == 0) {
      var ret = [];
      for (var i = 0; i < half.length; i++)
        ret.push(half[i]);
      for (var i = 0; i < data.length; i++)
        ret.push(data[i]);
      return ret;
    } else return null;
  };

SOURCE: https://github.com/jwhitehorn/jsMiner/blob/4fcdd9042a69b309035dfe9c9ddf716119831a16/engine.js#L149-165
","10295","<sha256><bitcoin>","25","4","3","2014-02-05 16:58:55","6284134","0","15","110432","","2011-06-08 01:07:43","2011-06-08 01:02:06",""
"6273201","(bitcoin) Calculate hash from getwork function - how to do it?","when I call getwork on my bitcoind server, I get the following:
./bitcoind getwork
{
    ""midstate"" : ""695d56ae173bbd0fd5f51d8f7753438b940b7cdd61eb62039036acd1af5e51e3"",
    ""data"" : ""000000013d9dcbbc2d120137c5b1cb1da96bd45b249fd1014ae2c2b400001511000000009726fba001940ebb5c04adc4450bdc0c20b50db44951d9ca22fc5e75d51d501f4deec2711a1d932f00000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000080020000"",
    ""hash1"" : ""00000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000010000"",
    ""target"" : ""00000000000000000000000000000000000000000000002f931d000000000000""
}

This protocol does not seem to be documented. How do I compute the hash from this data. I think that this data is in little endian. So the first step is to convert everything to big endian? Once that is done, I calculate the sha256 of the data. The data can be divided in two chuncks of 64 bytes each. The hash of the first chuck is given by midstate and therefore does not have to be computed. 
I must therefore hash the chunck #2 with sha256, using the midstate as the initial hash values. Once that is done, I end up with a hash of chunk 2, which is 32 bytes. I calculate the hash of this chunk one more time to get a final hash.
Then, do I convert everything to little endian and submit the work?
What is hash1 used for?
","The hash calculation is documented at Block hashing algorithm.
Start there for the relatively simple basics.  The basic data structures are documented in Protocol specification - Bitcoin Wiki.  Note that the protocol definition (and the definition of work) more or less assumes that SHA-256 hashes are 256-bit little-endian values, rather than big-endian as the standard implies.  See also 
Getwork is more complicated and runs into more serious endian/byte ordering confusion.
First note that the getwork API is optimized to speed up the initial steps of mining.
The midstate and hash1 values are for these performance optimizations and can be ignored.  Just look at the ""data"".
And when a standard sha256 implementation is used, only the first 80 bytes (160 hex characters) of the ""data"" are hashed.
Unfortunately, the JSON data presented in the getwork data structure has different endian characteristics than what is needed for hashing in the block example above.
They all say to go to the source for the answer, but the C++ source can be big and confusing.  A simple alternative is the poold.py code.  There is discussion of it here: New mining pool for testing.  You only need to look at the first few lines of the ""checkwork"" routine, and the ""bufreverse"" and ""bytereverse"" functions, to get the byte ordering right.  In the end it is just a matter of doing a reversal of the bytes in each 32-bit segment of the data.  Yes - very odd.  But endian issues are tricky and can end up that way....
Some other helpful information on the way ""getwork"" works can be found in discussions at:

Do I understand header hashing?
Stupid newbie question about the nonce

Note that finding the signal to noise in the original Bitcoin forum is getting very hard, and there is currently an Area51 proposal for a StackExchange site for Bitcoin and Crypto Currency in general.  Come join us!
","10295","<sha256><bitcoin>","25","22","3","2014-02-05 16:58:55","6284134","0","15","110432","","2011-06-08 01:07:43","2011-06-08 01:02:06",""
"6273201","(bitcoin) Calculate hash from getwork function - how to do it?","when I call getwork on my bitcoind server, I get the following:
./bitcoind getwork
{
    ""midstate"" : ""695d56ae173bbd0fd5f51d8f7753438b940b7cdd61eb62039036acd1af5e51e3"",
    ""data"" : ""000000013d9dcbbc2d120137c5b1cb1da96bd45b249fd1014ae2c2b400001511000000009726fba001940ebb5c04adc4450bdc0c20b50db44951d9ca22fc5e75d51d501f4deec2711a1d932f00000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000080020000"",
    ""hash1"" : ""00000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000010000"",
    ""target"" : ""00000000000000000000000000000000000000000000002f931d000000000000""
}

This protocol does not seem to be documented. How do I compute the hash from this data. I think that this data is in little endian. So the first step is to convert everything to big endian? Once that is done, I calculate the sha256 of the data. The data can be divided in two chuncks of 64 bytes each. The hash of the first chuck is given by midstate and therefore does not have to be computed. 
I must therefore hash the chunck #2 with sha256, using the midstate as the initial hash values. Once that is done, I end up with a hash of chunk 2, which is 32 bytes. I calculate the hash of this chunk one more time to get a final hash.
Then, do I convert everything to little endian and submit the work?
What is hash1 used for?
","Frankly speaking
Bitcoin block hashing algorithm is not officially described by any source.
""
The hash calculation is documented at Block hashing algorithm.
""
should read
The hash calculation is ""described"" at Block hashing algorithm.
en.bitcoin.it/wiki/Block_hashing_algorithm
btw the example code in PHP comes with a bug (typo)
the example code in Python generates errors when run by Python3.3 for Windows XP 32
(missing support for string.decode)
","10295","<sha256><bitcoin>","25","1","3","2014-02-05 16:58:55","6284134","0","15","110432","","2011-06-08 01:07:43","2011-06-08 01:02:06",""
"1328155","SHA256 hash in Python 2.4","Is there a way I can calculate a SHA256 hash in Python 2.4 ? (I emphasize: Python 2.4) I know how to do it in Python 2.5 but unfortunately it's not available on my server and an upgrade will not be made. I have the same problem as the guy in this question, but using Python 2.4. Any help will be greatly appreciated.
EDIT: Sorry, I mean SHA 256. I was too in a hurry. Sorry again.
","Yes you can. With Python 2.4, there was SHA-1 module which does exactly this. See the documentation.
However, bear in mind that code importing from this module will cause DeprecationWarnings when run with newer Python.
Ok, as the requirement was tightened to be SHA-256, using the SHA-1 module in standard library isn't enough. I'd suggest checking out pycrypto, it has a SHA-256 implementation. There are also windows binary releases to match older Pythons, follow the links from Andrew Kuchlings old PyCrypto page.
","10204","<python><sha256><python-2.4>","7","10","3","2016-08-24 10:38:01","1328162","0","","-1","","2017-05-23 12:22:59","2009-08-25 13:04:25",""
"1328155","SHA256 hash in Python 2.4","Is there a way I can calculate a SHA256 hash in Python 2.4 ? (I emphasize: Python 2.4) I know how to do it in Python 2.5 but unfortunately it's not available on my server and an upgrade will not be made. I have the same problem as the guy in this question, but using Python 2.4. Any help will be greatly appreciated.
EDIT: Sorry, I mean SHA 256. I was too in a hurry. Sorry again.
","You can use the sha module, if you want to stay compatible, you can import it like this:
try:
    from hashlib import sha1
except ImportError:
    from sha import sha as sha1

","10204","<python><sha256><python-2.4>","7","8","3","2016-08-24 10:38:01","1328162","0","","-1","","2017-05-23 12:22:59","2009-08-25 13:04:25",""
"1328155","SHA256 hash in Python 2.4","Is there a way I can calculate a SHA256 hash in Python 2.4 ? (I emphasize: Python 2.4) I know how to do it in Python 2.5 but unfortunately it's not available on my server and an upgrade will not be made. I have the same problem as the guy in this question, but using Python 2.4. Any help will be greatly appreciated.
EDIT: Sorry, I mean SHA 256. I was too in a hurry. Sorry again.
","There is a backported version of hashlib at http://pypi.python.org/pypi/hashlib and I just backported the newer hmac version and put it up at http://pypi.python.org/pypi/hmac
","10204","<python><sha256><python-2.4>","7","4","3","2016-08-24 10:38:01","1328162","0","","-1","","2017-05-23 12:22:59","2009-08-25 13:04:25",""
"7249998","Why isn't my PHP SHA256 hash equivalent to C# SHA256Managed hash","Why aren't these the same?
php:
    $hash = hash('sha256', $userData['salt'] . hash('sha256', $password) );

c#
    public static string ComputeHash(string plainText, string salt)
    {
        // Convert plain text into a byte array.
        byte[] plainTextBytes = Encoding.UTF8.GetBytes(plainText);
        byte[] saltBytes = Encoding.UTF8.GetBytes(salt);

        SHA256Managed hash = new SHA256Managed();

        // Compute hash value of salt.
        byte[] plainHash = hash.ComputeHash(plainTextBytes);

        byte[] concat = new byte[plainHash.Length + saltBytes.Length];

        System.Buffer.BlockCopy(saltBytes, 0, concat, 0, saltBytes.Length);
        System.Buffer.BlockCopy(plainHash, 0, concat, saltBytes.Length, plainHash.Length);

        byte[] tHashBytes = hash.ComputeHash(concat);

        // Convert result into a base64-encoded string.
        string hashValue = Convert.ToBase64String(tHashBytes);

        // Return the result.
        return hashValue;
    }

","Because they're different. Your C# code encodes the computed hash in Base64 encoding at the end. PHP just returns a string of hexadecimal digits.
","10199","<c#><php><sha256>","13","3","5","2014-11-07 05:19:56","7250056","2","","","","","2011-08-30 21:24:58",""
"7249998","Why isn't my PHP SHA256 hash equivalent to C# SHA256Managed hash","Why aren't these the same?
php:
    $hash = hash('sha256', $userData['salt'] . hash('sha256', $password) );

c#
    public static string ComputeHash(string plainText, string salt)
    {
        // Convert plain text into a byte array.
        byte[] plainTextBytes = Encoding.UTF8.GetBytes(plainText);
        byte[] saltBytes = Encoding.UTF8.GetBytes(salt);

        SHA256Managed hash = new SHA256Managed();

        // Compute hash value of salt.
        byte[] plainHash = hash.ComputeHash(plainTextBytes);

        byte[] concat = new byte[plainHash.Length + saltBytes.Length];

        System.Buffer.BlockCopy(saltBytes, 0, concat, 0, saltBytes.Length);
        System.Buffer.BlockCopy(plainHash, 0, concat, saltBytes.Length, plainHash.Length);

        byte[] tHashBytes = hash.ComputeHash(concat);

        // Convert result into a base64-encoded string.
        string hashValue = Convert.ToBase64String(tHashBytes);

        // Return the result.
        return hashValue;
    }

","C# is outputting a base64 ecoded string, and PHP is outputting a number in hex. A better comparison might be to pass the parameter true to the end of the hash function of PHP and base64 the result:
 $hash = base64_encode(
           hash('sha256', $userData['salt'] . hash('sha256', $password), true )
         );

","10199","<c#><php><sha256>","13","11","5","2014-11-07 05:19:56","7250056","2","","","","","2011-08-30 21:24:58",""
"7249998","Why isn't my PHP SHA256 hash equivalent to C# SHA256Managed hash","Why aren't these the same?
php:
    $hash = hash('sha256', $userData['salt'] . hash('sha256', $password) );

c#
    public static string ComputeHash(string plainText, string salt)
    {
        // Convert plain text into a byte array.
        byte[] plainTextBytes = Encoding.UTF8.GetBytes(plainText);
        byte[] saltBytes = Encoding.UTF8.GetBytes(salt);

        SHA256Managed hash = new SHA256Managed();

        // Compute hash value of salt.
        byte[] plainHash = hash.ComputeHash(plainTextBytes);

        byte[] concat = new byte[plainHash.Length + saltBytes.Length];

        System.Buffer.BlockCopy(saltBytes, 0, concat, 0, saltBytes.Length);
        System.Buffer.BlockCopy(plainHash, 0, concat, saltBytes.Length, plainHash.Length);

        byte[] tHashBytes = hash.ComputeHash(concat);

        // Convert result into a base64-encoded string.
        string hashValue = Convert.ToBase64String(tHashBytes);

        // Return the result.
        return hashValue;
    }

","Well I'm no C# programmer, but one thing that leaps out at me is this:
// Convert result into a base64-encoded string.
string hashValue = Convert.ToBase64String(tHashBytes);

Are you base64-encoding the final output in C#? Because you're not in PHP...
","10199","<c#><php><sha256>","13","0","5","2014-11-07 05:19:56","7250056","2","","","","","2011-08-30 21:24:58",""
"7249998","Why isn't my PHP SHA256 hash equivalent to C# SHA256Managed hash","Why aren't these the same?
php:
    $hash = hash('sha256', $userData['salt'] . hash('sha256', $password) );

c#
    public static string ComputeHash(string plainText, string salt)
    {
        // Convert plain text into a byte array.
        byte[] plainTextBytes = Encoding.UTF8.GetBytes(plainText);
        byte[] saltBytes = Encoding.UTF8.GetBytes(salt);

        SHA256Managed hash = new SHA256Managed();

        // Compute hash value of salt.
        byte[] plainHash = hash.ComputeHash(plainTextBytes);

        byte[] concat = new byte[plainHash.Length + saltBytes.Length];

        System.Buffer.BlockCopy(saltBytes, 0, concat, 0, saltBytes.Length);
        System.Buffer.BlockCopy(plainHash, 0, concat, saltBytes.Length, plainHash.Length);

        byte[] tHashBytes = hash.ComputeHash(concat);

        // Convert result into a base64-encoded string.
        string hashValue = Convert.ToBase64String(tHashBytes);

        // Return the result.
        return hashValue;
    }

","First suspect:
Encoding.UTF8.GetBytes(plainText);

C# uses UTF-8, your PHP probably doesn't, but you could be lucky if you use strictly letters from the US-ASCII subset.
Second suspect:
Convert.ToBase64String(tHashBytes);

There's nothing about Base64 in your PHP.
Since PHP will give you a hex-encoded result, you should switch to Hex in your C#, too. See this answer for solutions.
","10199","<c#><php><sha256>","13","2","5","2014-11-07 05:19:56","7250056","2","","","","","2011-08-30 21:24:58",""
"7249998","Why isn't my PHP SHA256 hash equivalent to C# SHA256Managed hash","Why aren't these the same?
php:
    $hash = hash('sha256', $userData['salt'] . hash('sha256', $password) );

c#
    public static string ComputeHash(string plainText, string salt)
    {
        // Convert plain text into a byte array.
        byte[] plainTextBytes = Encoding.UTF8.GetBytes(plainText);
        byte[] saltBytes = Encoding.UTF8.GetBytes(salt);

        SHA256Managed hash = new SHA256Managed();

        // Compute hash value of salt.
        byte[] plainHash = hash.ComputeHash(plainTextBytes);

        byte[] concat = new byte[plainHash.Length + saltBytes.Length];

        System.Buffer.BlockCopy(saltBytes, 0, concat, 0, saltBytes.Length);
        System.Buffer.BlockCopy(plainHash, 0, concat, saltBytes.Length, plainHash.Length);

        byte[] tHashBytes = hash.ComputeHash(concat);

        // Convert result into a base64-encoded string.
        string hashValue = Convert.ToBase64String(tHashBytes);

        // Return the result.
        return hashValue;
    }

","C#
string toHash = ""abcdefg"";
SHA256Managed hash = new SHA256Managed();
byte[] signatureData = hash.ComputeHash(new UnicodeEncoding().GetBytes(toHash));
string hashResult = System.Convert.ToBase64String(signatureData);
PHP
print base64_encode(hash(""sha256"",mb_convert_encoding(""abcdefg"",""UTF-16LE""),true));

Write like top code,They are the same
","10199","<c#><php><sha256>","13","-1","5","2014-11-07 05:19:56","7250056","2","","","","","2011-08-30 21:24:58",""
"21844014","SignTool Not Signing ClickOnce App Using SHA256, Only Uses SHA1","I'm trying to sign my clickonce app.  I have an EV code signing certificate that is using SHA256.  The problem is that when I sign my app using the post build commands, it seems to be using SHA1 instead of SHA256.  Here is a clip of the output window:
Running Code Analysis...
1>  Code Analysis Complete -- 0 error(s), 0 warning(s)
1>  The following certificate was selected:
1>      Issued to: Certificate Subject Name Here
1>  
1>      Issued by: DigiCert EV Code Signing CA (SHA2)
1>  
1>      Expires:   Thu Apr 14 06:00:00 2016
1>  
1>      SHA1 hash: HASH-HERE
1>  
1>  
1>  Done Adding Additional Store
1>  Successfully signed and timestamped: C:\Users\AnyBody\Documents\Visual Studio 2013\Projects\My Project\Project Folder\obj\x86\My Configuration\MyProgram.exe
1>  
1>  
1>  Number of files successfully Signed: 1
1>  
1>  Number of warnings: 0
1>  
1>  Number of errors: 0

Here is the post build command I am using:
""C:\Program Files (x86)\Microsoft SDKs\Windows\v7.1A\Bin\signtool.exe"" sign /fd SHA256 /t ""http://timestamp.digicert.com"" /n ""Certificate Subject Name Here"" /v ""$(ProjectDir)obj\x86\$(ConfigurationName)\$(TargetFileName)""

I can see that MyProgram.exe.deploy has the digital signature attached when I look at the file's properties.
There are no errors returned when i run signtool /verify
When I try to launch the app, I get the error ""Application validation did not succeed. Unable to continue"".
In the details of the error message, there is this line:
+ File, MyProgram.exe, has a different computed hash than specified in manifest.

When I open and look at the manifest, the hash for MyProgram.exe is specified as SHA256
What could be the problem?  What is making signtool refuse to use SHA256?  From what I've read, it should be using SHA256 by default.
I have unistalled/reinstalled visual studio, windows sdk, all installed .net libraries to no avail.
I'm really hoping someone has some idea...
","Are you having this issue with a WPF application? If so signing the executable in the AfterCompile target should resolve your problem. That worked for me.
More discussion on this can be found here:

Apparently when Phil signs his executable using PostBuild or
  BeforePublish commands, when the user installs it, he gets the dreaded
  “exe has a different computed hash than specified in the manifest”
  error. He found that using AfterCompile instead fixed the problem.

http://robindotnet.wordpress.com/2013/04/14/windows-8-and-clickonce-the-definitive-answer-revisited/
","9844","<clickonce><sha1><sha256><signtool>","11","7","1","2014-02-19 21:51:28","21893281","0","5","","","","2014-02-18 03:54:20",""
"38474362","Get a file SHA256 Hash code and Checksum","Previously I asked a question about combining SHA1+MD5 but after that I understand calculating SHA1 and then MD5 of a lagrge file is not that faster than SHA256.
In my case a 4.6 GB file takes about 10 mins with the default implementation SHA256 with (C# MONO) in a Linux system.
public static string GetChecksum(string file)
{
    using (FileStream stream = File.OpenRead(file))
    {
        var sha = new SHA256Managed();
        byte[] checksum = sha.ComputeHash(stream);
        return BitConverter.ToString(checksum).Replace(""-"", String.Empty);
    }
}

Then I read this topic and somehow change my code according what they said to :
public static string GetChecksumBuffered(Stream stream)
{
    using (var bufferedStream = new BufferedStream(stream, 1024 * 32))
    {
        var sha = new SHA256Managed();
        byte[] checksum = sha.ComputeHash(bufferedStream);
        return BitConverter.ToString(checksum).Replace(""-"", String.Empty);
    }
}

But It doesn't have such a affection and takes about 9 mins.
Then I try to test my file through sha256sum command in Linux for the same file and It takes about 28 secs and both the above code and Linux command give the same result !
Someone advised me to read about differences between Hash Code and Checksum and I reach to this topic that explains the differences.
My Questions are :

What causes such different between the above code and Linux sha256sum in time ?
What does the above code do ? (I mean is it the hash code calculation or checksum calculation? Because if you search about give a hash code of a file and checksum of a file in C#, they both reach to the above code.)
Is there any motivated attack against sha256sum even when SHA256 is collision resistant ? 
How can I make my implementation as fast as sha256sum in C#?

","
My best guess is that there's some additional buffering in the Mono implementation of the File.Read operation. Having recently looked into checksums on a large file, on a decent spec Windows machine you should expect roughly 6 seconds per Gb if all is running smoothly.
Oddly it has been reported in more than one benchmark test that SHA-512 is noticeably quicker than SHA-256 (see 3 below). One other possibility is that the problem is not in allocating the data, but in disposing of the bytes once read. You may be able to use TransformBlock (and TransformFinalBlock) on a single array rather than reading the stream in one big gulp—I have no idea if this will work, but it bears investigating.
The difference between hashcode and checksum is (nearly) semantics. They both calculate a shorter 'magic' number that is fairly unique to the data in the input, though if you have 4.6GB of input and 64B of output, 'fairly' is somewhat limited. 

A checksum is not secure, and with a bit of work you can figure out the input from enough outputs, work backwards from output to input and do all sorts of insecure things.
A Cryptographic hash takes longer to calculate, but changing just one bit in the input will radically change the output and for a good hash (e.g. SHA-512) there's no known way of getting from output back to input.

MD5 is breakable: you can fabricate an input to produce any given output, if needed, on a PC. SHA-256 is (probably) still secure, but won't be in a few years time—if your project has a lifespan measured in decades, then assume you'll need to change it. SHA-512 has no known attacks and probably won't for quite a while, and since it's quicker than SHA-256 I'd recommend it anyway. Benchmarks show it takes about 3 times longer to calculate SHA-512 than MD5, so if your speed issue can be dealt with, it's the way to go.
No idea, beyond those mentioned above. You're doing it right.

For a bit of light reading, see Crypto.SE: SHA51 is faster than SHA256?
Edit in response to question in comment
The purpose of a checksum is to allow you to check if a file has changed between the time you originally wrote it, and the time you come to use it. It does this by producing a small value (512 bits in the case of SHA512) where every bit of the original file contributes at least something to the output value. The purpose of a hashcode is the same, with the addition that it is really, really difficult for anyone else to get the same output value by making carefully managed changes to the file.
The premise is that if the checksums are the same at the start and when you check it, then the files are the same, and if they're different the file has certainly changed. What you are doing above is feeding the file, in its entirety, through an algorithm that rolls, folds and spindles the bits it reads to produce the small value.
As an example: in the application I'm currently writing, I need to know if parts of a file of any size have changed. I split the file into 16K blocks, take the SHA-512 hash of each block, and store it in a separate database on another drive. When I come to see if the file has changed, I reproduce the hash for each block and compare it to the original. Since I'm using SHA-512, the chances of a changed file having the same hash are unimaginably small, so I can be confident of detecting changes in 100s of GB of data whilst only storing a few MB of hashes in my database. I'm copying the file at the same time as taking the hash, and the process is entirely disk-bound; it takes about 5 minutes to transfer a file to a USB drive, of which 10 seconds is probably related to hashing.
Lack of disk space to store hashes is a problem I can't solve in a post—buy a USB stick?
","9826","<c#><mono><hashcode><checksum><sha256>","6","6","2","2019-10-10 15:54:10","38574726","4","","-1","","2017-05-23 12:25:36","2016-07-20 06:59:29",""
"38474362","Get a file SHA256 Hash code and Checksum","Previously I asked a question about combining SHA1+MD5 but after that I understand calculating SHA1 and then MD5 of a lagrge file is not that faster than SHA256.
In my case a 4.6 GB file takes about 10 mins with the default implementation SHA256 with (C# MONO) in a Linux system.
public static string GetChecksum(string file)
{
    using (FileStream stream = File.OpenRead(file))
    {
        var sha = new SHA256Managed();
        byte[] checksum = sha.ComputeHash(stream);
        return BitConverter.ToString(checksum).Replace(""-"", String.Empty);
    }
}

Then I read this topic and somehow change my code according what they said to :
public static string GetChecksumBuffered(Stream stream)
{
    using (var bufferedStream = new BufferedStream(stream, 1024 * 32))
    {
        var sha = new SHA256Managed();
        byte[] checksum = sha.ComputeHash(bufferedStream);
        return BitConverter.ToString(checksum).Replace(""-"", String.Empty);
    }
}

But It doesn't have such a affection and takes about 9 mins.
Then I try to test my file through sha256sum command in Linux for the same file and It takes about 28 secs and both the above code and Linux command give the same result !
Someone advised me to read about differences between Hash Code and Checksum and I reach to this topic that explains the differences.
My Questions are :

What causes such different between the above code and Linux sha256sum in time ?
What does the above code do ? (I mean is it the hash code calculation or checksum calculation? Because if you search about give a hash code of a file and checksum of a file in C#, they both reach to the above code.)
Is there any motivated attack against sha256sum even when SHA256 is collision resistant ? 
How can I make my implementation as fast as sha256sum in C#?

","public string SHA256CheckSum(string filePath)
{
    using (SHA256 SHA256 = SHA256Managed.Create())
    {
        using (FileStream fileStream = File.OpenRead(filePath))
            return Convert.ToBase64String(SHA256.ComputeHash(fileStream));
    }
}

","9826","<c#><mono><hashcode><checksum><sha256>","6","2","2","2019-10-10 15:54:10","38574726","4","","-1","","2017-05-23 12:25:36","2016-07-20 06:59:29",""
"35749197","How to use common crypto and/or calculate sha256 in swift 2 & 3","I am trying to make hash a password value according to sha256. I already search this but there is no info about swift 2. This solution did not worked for me 
func sha256(data:String) -> String {
        let data = self.dataUsingEncoding(NSUTF8StringEncoding)!
        var digest = [UInt8](count:Int(CC_SHA256_DIGEST_LENGTH), repeatedValue: 0)
        CC_SHA256(data.bytes, CC_LONG(data.length), &digest)
        let hexBytes = digest.map { String(format: ""%02hhx"", $0) }
        return hexBytes.joinWithSeparator("""")
    }

It gives error: Use of unresolved identifier CC_SHA256_DIGEST_LENGTH
","Add a bridging header and add the import to it:
#import <CommonCrypto/CommonDigest.h>
Swift 3:
func sha256(string: String) -> Data? {
    guard let messageData = string.data(using:String.Encoding.utf8) else { return nil }
    var digestData = Data(count: Int(CC_SHA256_DIGEST_LENGTH))

    _ = digestData.withUnsafeMutableBytes {digestBytes in
        messageData.withUnsafeBytes {messageBytes in
            CC_SHA256(messageBytes, CC_LONG(messageData.count), digestBytes)
        }
    }
    return digestData
}

// Test
let shaData = sha256(string:""Here is the test string"")
let shaHex =  shaData!.map { String(format: ""%02hhx"", $0) }.joined()
print(""shaHex: \(shaHex)"")


shaHex: 6f5c446883a3049caf8368b4bad2d2ff045a39d467ee20a8d34d5698e649fe21

Swift 2:
func sha256(string string: String) -> NSData {
    let digest = NSMutableData(length: Int(CC_SHA256_DIGEST_LENGTH))!
    if let data :NSData = string.dataUsingEncoding(NSUTF8StringEncoding) {
        CC_SHA256(data.bytes, CC_LONG(data.length),
            UnsafeMutablePointer<UInt8>(digest.mutableBytes))
    }
    return digest
}

//Test:
let digest = sha256(string:""Here is the test string"")
print(""digest: \(digest)"")

Output:

digest: 6f5c4468 83a3049c af8368b4 bad2d2ff 045a39d4 67ee20a8 d34d5698 e649fe21

Example from sunsetted documentation section:
HMAC with MD5, SHA1, SHA224, SHA256, SHA384, SHA512 (Swift 3+)

These functions will hash either String or Data input with one of eight cryptographic hash algorithms.

The name parameter specifies the hash function name as a String
Supported functions are MD5, SHA1, SHA224, SHA256, SHA384 and SHA512
This example requires Common Crypto
It is necessary to have a bridging header to the project:
#import <CommonCrypto/CommonCrypto.h>
Add the Security.framework to the project.  
These functions takes a hash name, message to be hashed, a key and return a digest:


hashName: name of a hash function as String  
message:  message as Data  
key:      key as Data  
returns:  digest as Data  

func hmac(hashName:String, message:Data, key:Data) -> Data? {
    let algos = [""SHA1"":   (kCCHmacAlgSHA1,   CC_SHA1_DIGEST_LENGTH),
                 ""MD5"":    (kCCHmacAlgMD5,    CC_MD5_DIGEST_LENGTH),
                 ""SHA224"": (kCCHmacAlgSHA224, CC_SHA224_DIGEST_LENGTH),
                 ""SHA256"": (kCCHmacAlgSHA256, CC_SHA256_DIGEST_LENGTH),
                 ""SHA384"": (kCCHmacAlgSHA384, CC_SHA384_DIGEST_LENGTH),
                 ""SHA512"": (kCCHmacAlgSHA512, CC_SHA512_DIGEST_LENGTH)]
    guard let (hashAlgorithm, length) = algos[hashName]  else { return nil }
    var macData = Data(count: Int(length))

    macData.withUnsafeMutableBytes {macBytes in
        message.withUnsafeBytes {messageBytes in
            key.withUnsafeBytes {keyBytes in
                CCHmac(CCHmacAlgorithm(hashAlgorithm),
                       keyBytes,     key.count,
                       messageBytes, message.count,
                       macBytes)
            }
        }
    }
    return macData

    }

hashName: name of a hash function as String
message:  message as String
key:      key as String
returns:  digest as Data

func hmac(hashName:String, message:String, key:String) -> Data? {
    let messageData = message.data(using:.utf8)!
    let keyData = key.data(using:.utf8)!
    return hmac(hashName:hashName, message:messageData, key:keyData)
}



hashName: name of a hash function as String  
message:  message as String  
key:      key as Data  
returns:  digest as Data  

func hmac(hashName:String, message:String, key:Data) -> Data? {
    let messageData = message.data(using:.utf8)!
    return hmac(hashName:hashName, message:messageData, key:key)
}


// Examples
let clearString = ""clearData0123456""
let keyString   = ""keyData8901234562""
let clearData   = clearString.data(using:.utf8)!
let keyData     = keyString.data(using:.utf8)!
print(""clearString: \(clearString)"")
print(""keyString:   \(keyString)"")
print(""clearData: \(clearData as NSData)"")
print(""keyData:   \(keyData as NSData)"")

let hmacData1 = hmac(hashName:""SHA1"", message:clearData, key:keyData)
print(""hmacData1: \(hmacData1! as NSData)"")

let hmacData2 = hmac(hashName:""SHA1"", message:clearString, key:keyString)
print(""hmacData2: \(hmacData2! as NSData)"")

let hmacData3 = hmac(hashName:""SHA1"", message:clearString, key:keyData)
print(""hmacData3: \(hmacData3! as NSData)"")

Output:
clearString: clearData0123456
keyString:   keyData8901234562
clearData: <636c6561 72446174 61303132 33343536>
keyData:   <6b657944 61746138 39303132 33343536 32>

hmacData1: <bb358f41 79b68c08 8e93191a da7dabbc 138f2ae6>
hmacData2: <bb358f41 79b68c08 8e93191a da7dabbc 138f2ae6>
hmacData3: <bb358f41 79b68c08 8e93191a da7dabbc 138f2ae6>

MD2, MD4, MD5, SHA1, SHA224, SHA256, SHA384, SHA512 (Swift 3+)

These functions will hash either String or Data input with one of eight cryptographic hash algorithms.

The name parameter specifies the hash function name as a String
Supported functions are MD2, MD4, MD5, SHA1, SHA224, SHA256, SHA384 and SHA512
a
This example requires Common Crypto
It is necessary to have a bridging header to the project:
#import <CommonCrypto/CommonCrypto.h>
Add the Security.framework to the project.  


This function takes a hash name and String to be hashed and returns a Data:

name: A name of a hash function as a String  
string: The String to be hashed  
returns: the hashed result as Data  

func hash(name:String, string:String) -> Data? {
    let data = string.data(using:.utf8)!
    return hash(name:name, data:data)
}

Examples:
let clearString = ""clearData0123456""
let clearData   = clearString.data(using:.utf8)!
print(""clearString: \(clearString)"")
print(""clearData: \(clearData as NSData)"")

let hashSHA256 = hash(name:""SHA256"", string:clearString)
print(""hashSHA256: \(hashSHA256! as NSData)"")

let hashMD5 = hash(name:""MD5"", data:clearData)
print(""hashMD5: \(hashMD5! as NSData)"")

Output:
clearString: clearData0123456
clearData: <636c6561 72446174 61303132 33343536>

hashSHA256: <aabc766b 6b357564 e41f4f91 2d494bcc bfa16924 b574abbd ba9e3e9d a0c8920a>
hashMD5: <4df665f7 b94aea69 695b0e7b baf9e9d6>

","9400","<swift2><sha256><digest><commoncrypto>","12","24","1","2017-10-13 14:31:28","35750225","5","4","451475","","2016-12-26 20:08:10","2016-03-02 13:55:10",""
"22880627","SHA256 implementation in c","I am trying to program SHA256 implementation from this website: http://bradconte.com/sha256_c
in a MSP430 MCU board. I am using the open-source Energia IDE for programming. 
This is the testcode: 
 unsigned char  hash[32];
 SHA256_CTX ctx;
 sha256_init(&ctx);
 sha256_update(&ctx,(unsigned char*)""abc"",3);
 sha256_final(&ctx,hash);
 PrintHex(hash);

This converts to hex 
 void PrintHex(unsigned char * data) 
 {
    char tmp[16];
    for (int i=0; i<32; i++) { 
    sprintf(tmp, ""%02x"",data[i]); 
    Serial.print(tmp); 
    }
 }

The problem is that the output is always a wrong hash code.
This is the output:
    2bb53935edbba17dc04a04854518754d8a66484491b585b0d0700cd2512f5420

Is it the testcode or something else that I am doing wrong here?
","I ran that code on my system (Mac OS X, x86 64-bit) and it gave me this:
551ce4769446b343295ea7f819ba1c5557545e29a4de545746b2b246a9831f22

I think we can safely assume the code is crap: I verified that ba7816b... is the correct hash using some online tools, and now we see that your platform and mine both produce different results.  I noticed some comment in the code about endianness so I looked it up and your system is also little-endian, so that shouldn't be a problem.  I'd advise you to look for a different implementation.
","9355","<c><sha256>","3","2","2","2017-06-01 15:56:55","","5","","","","","2014-04-05 12:02:35",""
"22880627","SHA256 implementation in c","I am trying to program SHA256 implementation from this website: http://bradconte.com/sha256_c
in a MSP430 MCU board. I am using the open-source Energia IDE for programming. 
This is the testcode: 
 unsigned char  hash[32];
 SHA256_CTX ctx;
 sha256_init(&ctx);
 sha256_update(&ctx,(unsigned char*)""abc"",3);
 sha256_final(&ctx,hash);
 PrintHex(hash);

This converts to hex 
 void PrintHex(unsigned char * data) 
 {
    char tmp[16];
    for (int i=0; i<32; i++) { 
    sprintf(tmp, ""%02x"",data[i]); 
    Serial.print(tmp); 
    }
 }

The problem is that the output is always a wrong hash code.
This is the output:
    2bb53935edbba17dc04a04854518754d8a66484491b585b0d0700cd2512f5420

Is it the testcode or something else that I am doing wrong here?
","You should not assume the string encoding to be portable in C.
Try this code instead:
unsigned char message[] = {0x61, 0x62, 0x63};
unsigned char hash[32];
SHA256_CTX ctx;
sha256_init(&ctx);
sha256_update(&ctx,message,sizeof message);
sha256_final(&ctx,hash);
PrintHex(hash);

","9355","<c><sha256>","3","1","2","2017-06-01 15:56:55","","5","","","","","2014-04-05 12:02:35",""
"6780394","C++ how to make simple sha256 generator with boost?","I need a simple string to sha256 generator class. I do not want to build big libraries for that like openSSL or Cripto++ - all I want is to turn strings into sha256. How to create such class or where to get it?
","Like others have said, I was under the impression that hashing under SHA256 is not trivial enough to simply implement yourself as a subset of a bigger coding project. If you take a look at the wikipedia page for SHA-2, you will notice some pretty intense math. If you would like the actual encryption abstract (the math theory itself), it can be found here. If you're like most programmers whose emphasis is not in security, then you will probably want to simply use someone else's tested and tried implementation. You can find a good few here. Let me know if this helped. Sorry I couldn't answer your question with straight code or something of that nature.
","9093","<c++><math><boost><encryption><sha256>","3","2","4","2011-07-22 02:08:33","6781202","3","","","","","2011-07-21 17:47:54",""
"6780394","C++ how to make simple sha256 generator with boost?","I need a simple string to sha256 generator class. I do not want to build big libraries for that like openSSL or Cripto++ - all I want is to turn strings into sha256. How to create such class or where to get it?
","you want this?
static void
sha2_round(const unsigned char *data, sph_u32 r[8])
{
    int i;
    sph_u32 a, b, c, d, e, f, g, h;
    sph_u32 w[64];

    for (i = 0; i < 16; i ++)
        w[i] = sph_dec32be_aligned(data + (4 * i));
    for (i = 16; i < 64; i ++) {
        w[i] = SPH_T32(SSG2_1(w[i - 2]) + w[i - 7]
            + SSG2_0(w[i - 15]) + w[i - 16]);

go to http://www.saphir2.com/sphlib/
and download it.  it's under the GPL.  look in sha2.c
beware, it doesn't have a lot of documentation.  it's set up for people who already know what they're doing.
","9093","<c++><math><boost><encryption><sha256>","3","1","4","2011-07-22 02:08:33","6781202","3","","","","","2011-07-21 17:47:54",""
"6780394","C++ how to make simple sha256 generator with boost?","I need a simple string to sha256 generator class. I do not want to build big libraries for that like openSSL or Cripto++ - all I want is to turn strings into sha256. How to create such class or where to get it?
","GNU coreutils has a very simple source code.
just download coreutils, they even have a test suite you can build, and the source code is full of comments and docs.
","9093","<c++><math><boost><encryption><sha256>","3","0","4","2011-07-22 02:08:33","6781202","3","","","","","2011-07-21 17:47:54",""
"6780394","C++ how to make simple sha256 generator with boost?","I need a simple string to sha256 generator class. I do not want to build big libraries for that like openSSL or Cripto++ - all I want is to turn strings into sha256. How to create such class or where to get it?
","You find C source code directly in the section 8 of RFC 6234. Make sure you check the errata also.
","9093","<c++><math><boost><encryption><sha256>","3","2","4","2011-07-22 02:08:33","6781202","3","","","","","2011-07-21 17:47:54",""
"19620970","SHA256 signing stops working in .NET 4.5","We have a piece of code which creates a SigningCredentials object to use to sign xml document by using SHA256 algorithm. It works with .NET 3.5 perfectly. However, when we upgrade our codebase to .NET 4.5, it stops working. Same code, same certificate! I have spent hours on debugging and searching on the internet without any luck.
Could anyone please tell me what the problem here is? Thank you in advance.
Code to create SigningCredentials:
public SigningCredentials CreateSigningCredentials(X509Certificate2 cert)
{
    var ski = new SecurityKeyIdentifier(new X509RawDataKeyIdentifierClause(cert));
    return new SigningCredentials(new X509AsymmetricSecurityKey(cert), ""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"", ""http://www.w3.org/2001/04/xmlenc#sha256"", ski);
}

Exception: 
[CryptographicException: Invalid algorithm specified.
]
   System.Security.Cryptography.CryptographicException.ThrowCryptographicException(Int32 hr) +41
   System.Security.Cryptography.Utils.SignValue(SafeKeyHandle hKey, Int32 keyNumber, Int32 calgKey, Int32 calgHash, Byte[] hash, Int32 cbHash, ObjectHandleOnStack retSignature) +0
   System.Security.Cryptography.Utils.SignValue(SafeKeyHandle hKey, Int32 keyNumber, Int32 calgKey, Int32 calgHash, Byte[] hash) +118
   System.Security.Cryptography.RSACryptoServiceProvider.SignHash(Byte[] rgbHash, Int32 calgHash) +334
   System.Security.Cryptography.RSAPKCS1SignatureFormatter.CreateSignature(Byte[] rgbHash) +321
   System.IdentityModel.SignedXml.ComputeSignature(HashAlgorithm hash, AsymmetricSignatureFormatter formatter, String signatureMethod) +323
   System.IdentityModel.SignedXml.ComputeSignature(SecurityKey signingKey) +690
   System.IdentityModel.EnvelopedSignatureWriter.ComputeSignature() +338
   System.IdentityModel.EnvelopedSignatureWriter.OnEndRootElement() +278
   System.IdentityModel.Metadata.MetadataSerializer.WriteEntityDescriptor(XmlWriter inputWriter, EntityDescriptor entityDescriptor) +1109

","While this question was asked almost a year ago, it has received some up votes recently which may indicate that some other people are getting the same problem. Hopefully this answer can help :)
Briefly speaking, the error doesn't happen in all machines but only in some of them. I guess it depends on what CSPs have been registered on a specific machine. Anyway, in my specific case, the certificate was generated with either ""Microsoft RSA SChannel..."" or ""Microsoft strong cryptographic provider"" as the CSP. I generated a new certificate but used ""Microsoft Enhanced RSA and AES Cryptographic Provider"" as the CSP and it SHA256 signing started working for me.
Some references:
https://social.msdn.microsoft.com/Forums/vstudio/en-US/e391ba75-ce6e-431c-bfc9-26a71ae1b033/sha256-signing-stops-working-in-net-45?forum=Geneva
(as you can see, million thanks to Paul who helped me solve this issue)
http://hintdesk.com/c-how-to-fix-invalid-algorithm-specified-when-signing-with-sha256/
","8888","<.net><certificate><wif><signing><sha256>","17","3","3","2019-03-12 15:29:18","26460341","1","2","","","","2013-10-27 17:18:48",""
"19620970","SHA256 signing stops working in .NET 4.5","We have a piece of code which creates a SigningCredentials object to use to sign xml document by using SHA256 algorithm. It works with .NET 3.5 perfectly. However, when we upgrade our codebase to .NET 4.5, it stops working. Same code, same certificate! I have spent hours on debugging and searching on the internet without any luck.
Could anyone please tell me what the problem here is? Thank you in advance.
Code to create SigningCredentials:
public SigningCredentials CreateSigningCredentials(X509Certificate2 cert)
{
    var ski = new SecurityKeyIdentifier(new X509RawDataKeyIdentifierClause(cert));
    return new SigningCredentials(new X509AsymmetricSecurityKey(cert), ""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"", ""http://www.w3.org/2001/04/xmlenc#sha256"", ski);
}

Exception: 
[CryptographicException: Invalid algorithm specified.
]
   System.Security.Cryptography.CryptographicException.ThrowCryptographicException(Int32 hr) +41
   System.Security.Cryptography.Utils.SignValue(SafeKeyHandle hKey, Int32 keyNumber, Int32 calgKey, Int32 calgHash, Byte[] hash, Int32 cbHash, ObjectHandleOnStack retSignature) +0
   System.Security.Cryptography.Utils.SignValue(SafeKeyHandle hKey, Int32 keyNumber, Int32 calgKey, Int32 calgHash, Byte[] hash) +118
   System.Security.Cryptography.RSACryptoServiceProvider.SignHash(Byte[] rgbHash, Int32 calgHash) +334
   System.Security.Cryptography.RSAPKCS1SignatureFormatter.CreateSignature(Byte[] rgbHash) +321
   System.IdentityModel.SignedXml.ComputeSignature(HashAlgorithm hash, AsymmetricSignatureFormatter formatter, String signatureMethod) +323
   System.IdentityModel.SignedXml.ComputeSignature(SecurityKey signingKey) +690
   System.IdentityModel.EnvelopedSignatureWriter.ComputeSignature() +338
   System.IdentityModel.EnvelopedSignatureWriter.OnEndRootElement() +278
   System.IdentityModel.Metadata.MetadataSerializer.WriteEntityDescriptor(XmlWriter inputWriter, EntityDescriptor entityDescriptor) +1109

","Had the same problem with XmlDsig (trying to make enveloping signature of xml document with RSA-SHA256 algorithm).
First I were getting exception

System.Security.Cryptography.CryptographicException:
  SignatureDescription could not be created for the signature algorithm
  supplied.

Then I found mention of RSAPKCS1SHA256SignatureDescription - signature description implementation for RSA-SHA256 signatures.
Full implementation here: http://clrsecurity.codeplex.com/SourceControl/changeset/view/47833#269110
or here: https://gist.github.com/sneal/f35de432115b840c4c1f
You have to manually call once per appdomain:
CryptoConfig.AddAlgorithm(typeof(RSAPKCS1SHA256SignatureDescription), ""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"");

After that I got a new exception:

System.Security.Cryptography.CryptographicException: Invalid algorithm
  specified.

This brought me to your question. After reading suggested article I have made a new key and certificate (with OpenSSL) using Microsoft Enhanced RSA and AES Cryptographic Provider.
To my surprise, this new certificate allowed me to successfully make a signature.
After some more investigation I have found interesting answer of Andrew here https://stackoverflow.com/a/17285774/328785, where he used RSACryptoServiceProvider to prepare SecretKey for SignedXml class.
Specifically this part (my interpretation):
var store = new X509Store(StoreName.My, StoreLocation.CurrentUser);
store.Open(OpenFlags.OpenExistingOnly | OpenFlags.ReadOnly);
var certificates =  store.Certificates.Find(X509FindType.FindBySerialNumber,  ""54dba096"", true);
var certificate = certificates[0];

// next three lines
var cspParams = new CspParameters(24) { KeyContainerName = ""XML_DSIG_RSA_KEY"" };
var key = new RSACryptoServiceProvider(cspParams);
key.FromXmlString(certificate.PrivateKey.ToXmlString(true));

SignedXml sxml = new SignedXml(doc);
sxml.SigningKey = key;

And this solutions worked fine even with old key!
","8888","<.net><certificate><wif><signing><sha256>","17","15","3","2019-03-12 15:29:18","26460341","1","2","","","","2013-10-27 17:18:48",""
"19620970","SHA256 signing stops working in .NET 4.5","We have a piece of code which creates a SigningCredentials object to use to sign xml document by using SHA256 algorithm. It works with .NET 3.5 perfectly. However, when we upgrade our codebase to .NET 4.5, it stops working. Same code, same certificate! I have spent hours on debugging and searching on the internet without any luck.
Could anyone please tell me what the problem here is? Thank you in advance.
Code to create SigningCredentials:
public SigningCredentials CreateSigningCredentials(X509Certificate2 cert)
{
    var ski = new SecurityKeyIdentifier(new X509RawDataKeyIdentifierClause(cert));
    return new SigningCredentials(new X509AsymmetricSecurityKey(cert), ""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"", ""http://www.w3.org/2001/04/xmlenc#sha256"", ski);
}

Exception: 
[CryptographicException: Invalid algorithm specified.
]
   System.Security.Cryptography.CryptographicException.ThrowCryptographicException(Int32 hr) +41
   System.Security.Cryptography.Utils.SignValue(SafeKeyHandle hKey, Int32 keyNumber, Int32 calgKey, Int32 calgHash, Byte[] hash, Int32 cbHash, ObjectHandleOnStack retSignature) +0
   System.Security.Cryptography.Utils.SignValue(SafeKeyHandle hKey, Int32 keyNumber, Int32 calgKey, Int32 calgHash, Byte[] hash) +118
   System.Security.Cryptography.RSACryptoServiceProvider.SignHash(Byte[] rgbHash, Int32 calgHash) +334
   System.Security.Cryptography.RSAPKCS1SignatureFormatter.CreateSignature(Byte[] rgbHash) +321
   System.IdentityModel.SignedXml.ComputeSignature(HashAlgorithm hash, AsymmetricSignatureFormatter formatter, String signatureMethod) +323
   System.IdentityModel.SignedXml.ComputeSignature(SecurityKey signingKey) +690
   System.IdentityModel.EnvelopedSignatureWriter.ComputeSignature() +338
   System.IdentityModel.EnvelopedSignatureWriter.OnEndRootElement() +278
   System.IdentityModel.Metadata.MetadataSerializer.WriteEntityDescriptor(XmlWriter inputWriter, EntityDescriptor entityDescriptor) +1109

","Despite this question being quite old, I am pretty sure someone is bound to encounter it sooner or later.
Lately, we have been dealing with service that runs on a server that only supports TLS 1.2 and has SHA-1 hashing algorithm disabled. We need to sign entire pain.something.something file, which renders the most popular answer useless.
Here is what we found out:

If you use certificate private key as SigningKey, you can only use SHA-1 algorithm for signatures.
You need to obtain private key using GetRSAPrivateKey method.
You need to set SignatureMethod of signedXML to SecurityAlgorithms.RsaSha256Signature
You need to set DigestMethod of reference object to SecurityAlgorithms.Sha256Digest.

Then, you are good to go.
Here is also a sample code that does this:
private static void SignXmlDocumentEx(XmlElement el, X509Certificate2 cert)
{
    var dataId = string.Format(""Signature-{0}"", Guid.NewGuid());
    var signedXml = new System.Security.Cryptography.Xml.SignedXml(el);
    signedXml.SigningKey = cert.GetRSAPrivateKey();
    signedXml.SignedInfo.SignatureMethod = SecurityAlgorithms.RsaSha256Signature;
    signedXml.Signature.Id = dataId;
    var reference = new Reference(dataId);
    reference.AddTransform(new XmlDsigEnvelopedSignatureTransform());
    reference.Uri = """";
    reference.DigestMethod = SecurityAlgorithms.Sha256Digest;
    signedXml.AddReference(reference);
    signedXml.KeyInfo = new KeyInfo();
    signedXml.KeyInfo.AddClause(new KeyInfoX509Data(cert, X509IncludeOption.EndCertOnly));
    signedXml.ComputeSignature();
    el.AppendChild(signedXml.GetXml());
}

","8888","<.net><certificate><wif><signing><sha256>","17","0","3","2019-03-12 15:29:18","26460341","1","2","","","","2013-10-27 17:18:48",""
"16728558","Signed XML signature verification for SSO SAML (Using sha256)","Using VS 2008 with .Net Framework 3.5 on windows 2003 server.
We have implemented SSO with SAML for security. We work at service provider end where we validate the Signed XML SAML Assertuib token generated from client's system.
As of now whatever signed documents we came across were using the Signature Algorithm ""rsa-sha1"", but now we have new customer who sends a file with the signature algorithm as ""rsa-sha256"" and here is the problem started.
public static string VerifySignature()
{
    if (m_xmlDoc == null)
        return ""Could not load XMLDocument "";

    try
    {
        XmlNamespaceManager nsm = new XmlNamespaceManager(new NameTable());
        nsm.AddNamespace(""dsig"", SignedXml.XmlDsigNamespaceUrl);
        XmlElement sigElt = (XmlElement)m_xmlDoc.SelectSingleNode(
            ""//dsig:Signature"", nsm);

        // Load the signature for verification
        SignedXml sig = new SignedXml(m_xmlDoc);
        sig.LoadXml(sigElt);

        if (!sig.CheckSignature())
            return ""Invalid Signature"";
    }
    catch (Exception ex)
    {
        return ex.Message;
    }
    return string.Empty;
}

Now, when I try the same code for this new customer (with signature algorithm rsa-sha256h) - this is not working and I am getting the error ""SignatureDescription could not be created for the signature algorithm supplied.""
Going through many blogs and articles in last 2-3 days, I came to know that SignedXml does not support sha256. Fine. But what next.  Somewhere its mentioned that use the WIF, I have also checked & tried this.
I am also trying to use RSAPKCS1SignatureDeformatter's VerifySignature method. But not really sure what are the two parameters to be passed.
","This qualifies for ""simple"" but perhaps not ""solution"" :) For the few clients we've encountered this with, we've asked them to change their IdP to sign using SHA-1. They are able to change it, and when they do it works. 
Not a technical solution, but it has worked 'in the field' so I'd thought I'd mention it.
","8703","<c#><.net><saml><sha256><signedxml>","8","2","4","2017-07-31 16:08:02","","1","2","33264","","2016-03-04 15:35:37","2013-05-24 06:02:10",""
"16728558","Signed XML signature verification for SSO SAML (Using sha256)","Using VS 2008 with .Net Framework 3.5 on windows 2003 server.
We have implemented SSO with SAML for security. We work at service provider end where we validate the Signed XML SAML Assertuib token generated from client's system.
As of now whatever signed documents we came across were using the Signature Algorithm ""rsa-sha1"", but now we have new customer who sends a file with the signature algorithm as ""rsa-sha256"" and here is the problem started.
public static string VerifySignature()
{
    if (m_xmlDoc == null)
        return ""Could not load XMLDocument "";

    try
    {
        XmlNamespaceManager nsm = new XmlNamespaceManager(new NameTable());
        nsm.AddNamespace(""dsig"", SignedXml.XmlDsigNamespaceUrl);
        XmlElement sigElt = (XmlElement)m_xmlDoc.SelectSingleNode(
            ""//dsig:Signature"", nsm);

        // Load the signature for verification
        SignedXml sig = new SignedXml(m_xmlDoc);
        sig.LoadXml(sigElt);

        if (!sig.CheckSignature())
            return ""Invalid Signature"";
    }
    catch (Exception ex)
    {
        return ex.Message;
    }
    return string.Empty;
}

Now, when I try the same code for this new customer (with signature algorithm rsa-sha256h) - this is not working and I am getting the error ""SignatureDescription could not be created for the signature algorithm supplied.""
Going through many blogs and articles in last 2-3 days, I came to know that SignedXml does not support sha256. Fine. But what next.  Somewhere its mentioned that use the WIF, I have also checked & tried this.
I am also trying to use RSAPKCS1SignatureDeformatter's VerifySignature method. But not really sure what are the two parameters to be passed.
","For .net 4 and earlier, 
I found that the following works once you add the Security.Cryptography from http://clrsecurity.codeplex.com/ 
(Note X509CertificateFinder is my own, looks for the signature certificate in the certificate store by thumbprint)
        /// <summary>
        /// Validate an XmlDocuments signature
        /// </summary>
        /// <param name=""xnlDoc""> The saml response with the signature elemenet to validate </param>
        /// <returns> True if signature can be validated with certificate </returns>
        public bool ValidateX509CertificateSignature(XmlDocument xnlDoc)
        {
            XmlNodeList XMLSignatures = xnlDoc.GetElementsByTagName(""Signature"", ""http://www.w3.org/2000/09/xmldsig#"");

            // Checking If the Response or the Assertion has been signed once and only once.
            if (XMLSignatures.Count != 1) return false;

            var signedXmlDoc = new SignedXml(xnlDoc);
            signedXmlDoc.LoadXml((XmlElement)XMLSignatures[0]);

            var certFinder = new X509CertificateFinder();
            var foundCert = certFinder.GetSignatureCertificate();

            CryptoConfig.AddAlgorithm(typeof(RSAPKCS1SHA256SignatureDescription), ""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"");
            return signedXmlDoc.CheckSignature(foundCert,false);
        }

","8703","<c#><.net><saml><sha256><signedxml>","8","4","4","2017-07-31 16:08:02","","1","2","33264","","2016-03-04 15:35:37","2013-05-24 06:02:10",""
"16728558","Signed XML signature verification for SSO SAML (Using sha256)","Using VS 2008 with .Net Framework 3.5 on windows 2003 server.
We have implemented SSO with SAML for security. We work at service provider end where we validate the Signed XML SAML Assertuib token generated from client's system.
As of now whatever signed documents we came across were using the Signature Algorithm ""rsa-sha1"", but now we have new customer who sends a file with the signature algorithm as ""rsa-sha256"" and here is the problem started.
public static string VerifySignature()
{
    if (m_xmlDoc == null)
        return ""Could not load XMLDocument "";

    try
    {
        XmlNamespaceManager nsm = new XmlNamespaceManager(new NameTable());
        nsm.AddNamespace(""dsig"", SignedXml.XmlDsigNamespaceUrl);
        XmlElement sigElt = (XmlElement)m_xmlDoc.SelectSingleNode(
            ""//dsig:Signature"", nsm);

        // Load the signature for verification
        SignedXml sig = new SignedXml(m_xmlDoc);
        sig.LoadXml(sigElt);

        if (!sig.CheckSignature())
            return ""Invalid Signature"";
    }
    catch (Exception ex)
    {
        return ex.Message;
    }
    return string.Empty;
}

Now, when I try the same code for this new customer (with signature algorithm rsa-sha256h) - this is not working and I am getting the error ""SignatureDescription could not be created for the signature algorithm supplied.""
Going through many blogs and articles in last 2-3 days, I came to know that SignedXml does not support sha256. Fine. But what next.  Somewhere its mentioned that use the WIF, I have also checked & tried this.
I am also trying to use RSAPKCS1SignatureDeformatter's VerifySignature method. But not really sure what are the two parameters to be passed.
","Dotnet 4.6.2+ has the newer sha hashes built in. For dotnet 4 +, to get access to rsa-sha512, rsa-sha384, and rsa-sha256, you should include this code someplace.
/// <summary>Declare the signature type for rsa-sha512</summary>
public class RsaPkCs1Sha512SignatureDescription : SignatureDescription
{
    public RsaPkCs1Sha512SignatureDescription()
    {
        KeyAlgorithm = typeof(RSACryptoServiceProvider).FullName;
        DigestAlgorithm = typeof(SHA512CryptoServiceProvider).FullName;
        FormatterAlgorithm = typeof(RSAPKCS1SignatureFormatter).FullName;
        DeformatterAlgorithm = typeof(RSAPKCS1SignatureDeformatter).FullName;
    }

    public override AsymmetricSignatureDeformatter CreateDeformatter(AsymmetricAlgorithm key)
    {
        var sigProcessor = (AsymmetricSignatureDeformatter)CryptoConfig.CreateFromName(DeformatterAlgorithm);
        sigProcessor.SetKey(key);
        sigProcessor.SetHashAlgorithm(""SHA512"");
        return sigProcessor;
    }

    public override AsymmetricSignatureFormatter CreateFormatter(AsymmetricAlgorithm key)
    {
        var sigProcessor =
            (AsymmetricSignatureFormatter)CryptoConfig.CreateFromName(FormatterAlgorithm);
        sigProcessor.SetKey(key);
        sigProcessor.SetHashAlgorithm(""SHA512"");
        return sigProcessor;
    }
}

/// <summary>Declare the signature type for rsa-sha384</summary>
public class RsaPkCs1Sha384SignatureDescription : SignatureDescription {
    public RsaPkCs1Sha384SignatureDescription()
    {
        KeyAlgorithm = typeof(RSACryptoServiceProvider).FullName;
        DigestAlgorithm = typeof(SHA384CryptoServiceProvider).FullName;
        FormatterAlgorithm = typeof(RSAPKCS1SignatureFormatter).FullName;
        DeformatterAlgorithm = typeof(RSAPKCS1SignatureDeformatter).FullName;
    }

    public override AsymmetricSignatureDeformatter CreateDeformatter(AsymmetricAlgorithm key)
    {
        var sigProcessor = (AsymmetricSignatureDeformatter) CryptoConfig.CreateFromName(DeformatterAlgorithm);
        sigProcessor.SetKey(key);
        sigProcessor.SetHashAlgorithm(""SHA384"");
        return sigProcessor;
    }

    public override AsymmetricSignatureFormatter CreateFormatter(AsymmetricAlgorithm key)
    {
        var sigProcessor =
            (AsymmetricSignatureFormatter)CryptoConfig.CreateFromName(FormatterAlgorithm);
        sigProcessor.SetKey(key);
        sigProcessor.SetHashAlgorithm(""SHA384"");
        return sigProcessor;
    }
}

/// <summary>Declare the signature type for rsa-sha256</summary>
public class RsaPkCs1Sha256SignatureDescription : SignatureDescription
{
    public RsaPkCs1Sha256SignatureDescription()
    {
        KeyAlgorithm = typeof(RSACryptoServiceProvider).FullName;
        DigestAlgorithm = typeof(SHA256CryptoServiceProvider).FullName;
        FormatterAlgorithm = typeof(RSAPKCS1SignatureFormatter).FullName;
        DeformatterAlgorithm = typeof(RSAPKCS1SignatureDeformatter).FullName;
    }

    public override AsymmetricSignatureDeformatter CreateDeformatter(AsymmetricAlgorithm key)
    {
        var sigProcessor =
            (AsymmetricSignatureDeformatter) CryptoConfig.CreateFromName(DeformatterAlgorithm);
        sigProcessor.SetKey(key);
        sigProcessor.SetHashAlgorithm(""SHA256"");
        return sigProcessor;
    }

    public override AsymmetricSignatureFormatter CreateFormatter(AsymmetricAlgorithm key)
    {
        var sigProcessor =
            (AsymmetricSignatureFormatter)CryptoConfig.CreateFromName(FormatterAlgorithm);
        sigProcessor.SetKey(key);
        sigProcessor.SetHashAlgorithm(""SHA256"");
        return sigProcessor;
    }
}

Then, you should activate these sig descriptions by calling code like this.  You only need to call it once, so you can call it from a static constructor if you wish.
    CryptoConfig.AddAlgorithm(typeof(RsaPkCs1Sha512SignatureDescription),
        ""http://www.w3.org/2001/04/xmldsig-more#rsa-sha512"");
    CryptoConfig.AddAlgorithm(typeof(RsaPkCs1Sha384SignatureDescription),
        ""http://www.w3.org/2001/04/xmldsig-more#rsa-sha384"");
    CryptoConfig.AddAlgorithm(typeof(RsaPkCs1Sha256SignatureDescription),
        ""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"");

Tip o' the hat to Microsoft's Carlos Lopez and BitSchupster and Andrew on SO.
","8703","<c#><.net><saml><sha256><signedxml>","8","9","4","2017-07-31 16:08:02","","1","2","33264","","2016-03-04 15:35:37","2013-05-24 06:02:10",""
"16728558","Signed XML signature verification for SSO SAML (Using sha256)","Using VS 2008 with .Net Framework 3.5 on windows 2003 server.
We have implemented SSO with SAML for security. We work at service provider end where we validate the Signed XML SAML Assertuib token generated from client's system.
As of now whatever signed documents we came across were using the Signature Algorithm ""rsa-sha1"", but now we have new customer who sends a file with the signature algorithm as ""rsa-sha256"" and here is the problem started.
public static string VerifySignature()
{
    if (m_xmlDoc == null)
        return ""Could not load XMLDocument "";

    try
    {
        XmlNamespaceManager nsm = new XmlNamespaceManager(new NameTable());
        nsm.AddNamespace(""dsig"", SignedXml.XmlDsigNamespaceUrl);
        XmlElement sigElt = (XmlElement)m_xmlDoc.SelectSingleNode(
            ""//dsig:Signature"", nsm);

        // Load the signature for verification
        SignedXml sig = new SignedXml(m_xmlDoc);
        sig.LoadXml(sigElt);

        if (!sig.CheckSignature())
            return ""Invalid Signature"";
    }
    catch (Exception ex)
    {
        return ex.Message;
    }
    return string.Empty;
}

Now, when I try the same code for this new customer (with signature algorithm rsa-sha256h) - this is not working and I am getting the error ""SignatureDescription could not be created for the signature algorithm supplied.""
Going through many blogs and articles in last 2-3 days, I came to know that SignedXml does not support sha256. Fine. But what next.  Somewhere its mentioned that use the WIF, I have also checked & tried this.
I am also trying to use RSAPKCS1SignatureDeformatter's VerifySignature method. But not really sure what are the two parameters to be passed.
","Just update it to .NET framework 4.6.01590 or higher and it will support up to SHA-512 without any code change.
","8703","<c#><.net><saml><sha256><signedxml>","8","0","4","2017-07-31 16:08:02","","1","2","33264","","2016-03-04 15:35:37","2013-05-24 06:02:10",""
"6484463","One way hash (not for crypto/security), use SHA256 (not MD5, SHA-1)?","On a new system, we require a one-way-hash to compute a digital signature from binary input (e.g., a kilobyte of text, or larger text-and-binary files).  The need is similar to how Scons (build system) hashes command-lines and source files, and how Git (version control system) hashes files to compute a signature for storage/synchronization.
Recall that Scons uses MD5, and Git uses SHA-1.
While MD5 and SHA-1 have been ""broken"", neither Scons nor Git are using their hashes specifically for security (e.g., it's not to store passwords), so general practice still considers those algorithms acceptable for that usage.  (Of course, this is partially a rationalization due to legacy adoption.)
QUESTION:  Would you use SHA256 (not MD5 nor SHA-1) for a (non-crypto/security) one-way hash in a new system?
The concerns are:

MD5 and SHA-1 have a long history of adoption
SHA256 is relatively new (not as much history), but
seems to be currently recommended for new work (but
""stronger"" algorithm strength is not
specifically required for my
application)
SHA256 is more time-expensive to
compute
SHA256 produces a longer key (these
will be used as dir/file names, and
stored within index files), but I
suppose I could truncate the
produced key (hash is less strong,
but should be sufficient), or just assume storage is cheap and file systems can handle it.

I'd be particularly interested in an answer consistent with the Scons or Git communities saying, ""We'll keep ours forever!"" or ""We want to move to a new hash as soon as practical!"" (I'm not sure what their plans are?)
","Yes, I would use SHA-256. SHA-256 had a lot more than security purposes in mind; in fact one of the reasons that SHA1 needed to be replaced was for the very reason you need a hash function. A hash algorithm produces a finite site output; while having an undetermined amount of input. Eventually there will be a collision. The larger the output; the less likely of a collision (when using a proper hash algorithm).
Git went with SHA1 because they use it as file names; and they wanted it to be small and compact. SHA256 produces a much larger digest; consuming more disk space and more data to transmit over the wire. This question specifically addresses what would happen if git were to encounter collisions.
To look at your points:

SHA256 has been in the wild long enough that if there were problems; we should have seen them by now.
It isn't ""stronger"" per-se, it's less likely to produce a collision (if that is your criteria for stronger; then yes it is stronger).
SHA-256 is slower; yes. Much slower? Depends on what your needs are. For 95% of people; it's performance is acceptable assuming you're using a proper implementation.
In general, truncating the hash of SHA2 is an okay thing to do.

","8662","<git><hash><md5><scons><sha256>","14","27","4","2017-02-23 15:48:52","6484818","1","6","","","","2011-06-26 14:09:43",""
"6484463","One way hash (not for crypto/security), use SHA256 (not MD5, SHA-1)?","On a new system, we require a one-way-hash to compute a digital signature from binary input (e.g., a kilobyte of text, or larger text-and-binary files).  The need is similar to how Scons (build system) hashes command-lines and source files, and how Git (version control system) hashes files to compute a signature for storage/synchronization.
Recall that Scons uses MD5, and Git uses SHA-1.
While MD5 and SHA-1 have been ""broken"", neither Scons nor Git are using their hashes specifically for security (e.g., it's not to store passwords), so general practice still considers those algorithms acceptable for that usage.  (Of course, this is partially a rationalization due to legacy adoption.)
QUESTION:  Would you use SHA256 (not MD5 nor SHA-1) for a (non-crypto/security) one-way hash in a new system?
The concerns are:

MD5 and SHA-1 have a long history of adoption
SHA256 is relatively new (not as much history), but
seems to be currently recommended for new work (but
""stronger"" algorithm strength is not
specifically required for my
application)
SHA256 is more time-expensive to
compute
SHA256 produces a longer key (these
will be used as dir/file names, and
stored within index files), but I
suppose I could truncate the
produced key (hash is less strong,
but should be sufficient), or just assume storage is cheap and file systems can handle it.

I'd be particularly interested in an answer consistent with the Scons or Git communities saying, ""We'll keep ours forever!"" or ""We want to move to a new hash as soon as practical!"" (I'm not sure what their plans are?)
","Depends on what you're doing.  It takes a lot longer to compute SHA-256 hash.  Not a big deal for many applications, but what if your app were trying to compute hundreds or thousands per minute?  You might find the additional time is too much.
On the flip-side though, SHA-1 has a much higher chance of a collision than SHA-256.  Understand though that such chances are miniscule (1 in 2^160/2 I think for SHA-1) and likely would never be hit by most apps.  However, the more things you hash, the higher the chance.  If you're hashing millions or billions of things, this might be a concern.
","8662","<git><hash><md5><scons><sha256>","14","1","4","2017-02-23 15:48:52","6484818","1","6","","","","2011-06-26 14:09:43",""
"6484463","One way hash (not for crypto/security), use SHA256 (not MD5, SHA-1)?","On a new system, we require a one-way-hash to compute a digital signature from binary input (e.g., a kilobyte of text, or larger text-and-binary files).  The need is similar to how Scons (build system) hashes command-lines and source files, and how Git (version control system) hashes files to compute a signature for storage/synchronization.
Recall that Scons uses MD5, and Git uses SHA-1.
While MD5 and SHA-1 have been ""broken"", neither Scons nor Git are using their hashes specifically for security (e.g., it's not to store passwords), so general practice still considers those algorithms acceptable for that usage.  (Of course, this is partially a rationalization due to legacy adoption.)
QUESTION:  Would you use SHA256 (not MD5 nor SHA-1) for a (non-crypto/security) one-way hash in a new system?
The concerns are:

MD5 and SHA-1 have a long history of adoption
SHA256 is relatively new (not as much history), but
seems to be currently recommended for new work (but
""stronger"" algorithm strength is not
specifically required for my
application)
SHA256 is more time-expensive to
compute
SHA256 produces a longer key (these
will be used as dir/file names, and
stored within index files), but I
suppose I could truncate the
produced key (hash is less strong,
but should be sufficient), or just assume storage is cheap and file systems can handle it.

I'd be particularly interested in an answer consistent with the Scons or Git communities saying, ""We'll keep ours forever!"" or ""We want to move to a new hash as soon as practical!"" (I'm not sure what their plans are?)
","The probability of a non-malicious collision is vanishingly small, even with MD5. Here is a thought experiment:
A well stuffed hard drive may have 1M files. For the experiment, imagine there are 10M files. Let's say that the world population is 10.000M persons, each with one computer, and every file is different.
We would be contending with a number of different files of 10E6 * 10E9 = 1E17,  < 2^57
The probability of an MD5 collision in such a far fetched case would be less than 1 in 2^71, or less than one in aproximately 2E21! To put this in perspective, for a collision probability of 1 in 10M we would have to repeat the experiment roughly 2E14 times, which is to say replacing every file, every hour since the big bang, and then keep going for a few more billion years.
2E14 / 24 / 365 / 13500E6 = 1.69
Of course, with SHA1 or SHA256, the probabilities would be even smaller, and there would also be resistance to a malicious attack -- unlike MD5, it would not be possible (now) that someone constructed files purposely for having the same hash.
","8662","<git><hash><md5><scons><sha256>","14","7","4","2017-02-23 15:48:52","6484818","1","6","","","","2011-06-26 14:09:43",""
"6484463","One way hash (not for crypto/security), use SHA256 (not MD5, SHA-1)?","On a new system, we require a one-way-hash to compute a digital signature from binary input (e.g., a kilobyte of text, or larger text-and-binary files).  The need is similar to how Scons (build system) hashes command-lines and source files, and how Git (version control system) hashes files to compute a signature for storage/synchronization.
Recall that Scons uses MD5, and Git uses SHA-1.
While MD5 and SHA-1 have been ""broken"", neither Scons nor Git are using their hashes specifically for security (e.g., it's not to store passwords), so general practice still considers those algorithms acceptable for that usage.  (Of course, this is partially a rationalization due to legacy adoption.)
QUESTION:  Would you use SHA256 (not MD5 nor SHA-1) for a (non-crypto/security) one-way hash in a new system?
The concerns are:

MD5 and SHA-1 have a long history of adoption
SHA256 is relatively new (not as much history), but
seems to be currently recommended for new work (but
""stronger"" algorithm strength is not
specifically required for my
application)
SHA256 is more time-expensive to
compute
SHA256 produces a longer key (these
will be used as dir/file names, and
stored within index files), but I
suppose I could truncate the
produced key (hash is less strong,
but should be sufficient), or just assume storage is cheap and file systems can handle it.

I'd be particularly interested in an answer consistent with the Scons or Git communities saying, ""We'll keep ours forever!"" or ""We want to move to a new hash as soon as practical!"" (I'm not sure what their plans are?)
","For increased security (however this might be defined) with reduced opportunities for attackers or accidents you might want to consider salting or using keyed (HMAC) variants. Also small tricks like Git's prefix which includes the message length or a CRC can make it harder for an attacker to device a message not only having the same hash, but also a valid format.
You can also think about larger hashes like the trees used by Glacier (Amazon) or Branch Cache Hash (Microsoft) or some peer-to-peer networks like BitTorrent or other Merkle or Tiger Tree based constructs.
","8662","<git><hash><md5><scons><sha256>","14","1","4","2017-02-23 15:48:52","6484818","1","6","","","","2011-06-26 14:09:43",""
"6971316","Want to Convert a Website password Encryption from SHA1 to SHA256","just looking for some advise.
I have a website with around 2500 users - small but growing.
I built it with using SHA1 encryption on the passwords.
I've since read the SHA1 is insecure and would like to change to say SHA256 with a Salt.
Does anyone have any advice on how to make a transition like this?
Would be great if I could decrypt the passwords and just re-hash them but it doesn't appear doing able.
thx
Adam
","Just to clarify, SHA is a hashing algorithm, which is (generally) a one way street.  You can't decrypt hashes, which is kind of the strength of using them to authenticate passwords.  You're on the right track with moving to a salted hash, and here's how I would do it.
The only way you're getting passwords is to let the user type it in themselves.  As users visit your site and log in, update the passwords one by one.  In your authentication method, I would perform the hash you're doing now, and compare it against what's in the existing field (nothing new here).  Assuming it matches, go ahead and salt / re-hash using SHA256, and update the password field in the database.  If you want, keep a bit in your user table tracking which users have been updated.  
I'm making a lot of assumptions, but this is how I've solved the hash algorithm dance in the past.  Good luck!
","8534","<sha1><sha256>","8","7","4","2015-02-04 15:48:02","6971355","0","1","","","","2011-08-07 07:15:23",""
"6971316","Want to Convert a Website password Encryption from SHA1 to SHA256","just looking for some advise.
I have a website with around 2500 users - small but growing.
I built it with using SHA1 encryption on the passwords.
I've since read the SHA1 is insecure and would like to change to say SHA256 with a Salt.
Does anyone have any advice on how to make a transition like this?
Would be great if I could decrypt the passwords and just re-hash them but it doesn't appear doing able.
thx
Adam
","The usual way of going about this is this:

Make the hashed-password column larger to accommodate a sha256 hash, and add a 'salt' column
Set the salt field to NULL initially, and adjust your password-check code so that a NULL salt means sha1, and non-NULL means sha256
Once a sha1-use has logged in successfully, re-hash the password to sha256 with salt, and update the database.

Over time, users will migrate to sha256 by themselves; the only problem are users who log in only very sporadically or not at all. For these, you may want to send a reminder e-mail, or even threaten to shut their account down if they don't log in before day X (don't give the actual reason though...)
","8534","<sha1><sha256>","8","13","4","2015-02-04 15:48:02","6971355","0","1","","","","2011-08-07 07:15:23",""
"6971316","Want to Convert a Website password Encryption from SHA1 to SHA256","just looking for some advise.
I have a website with around 2500 users - small but growing.
I built it with using SHA1 encryption on the passwords.
I've since read the SHA1 is insecure and would like to change to say SHA256 with a Salt.
Does anyone have any advice on how to make a transition like this?
Would be great if I could decrypt the passwords and just re-hash them but it doesn't appear doing able.
thx
Adam
","I have another suggestion to migrate your password hash from SHA1 to SHA256 immediately without waiting for user to visit the site again to rehash the password. The change will be one time password hash migration and change to your logon validation function. 
Suppose your password hash are generated using the function: password + salt [Sha1]-> Hash-sha1
To migrate to Sha256, you may convert your password hash using the following algorithm:
Hash-sha1 + salt [Sha256]-> Hash-sha256   (The salt is used to increase the complexity of input.)
Depending on the acceptable value of your sha256 function, you can consider to encode the Hash-sha1 to base64 for printable ascii.
For your logon validation function, the password should be hashed using the following algorithm:
Password + salt [sha1] -> hash-sha1 + salt [sha 256] -> hash-sha256
The disadvantage is hashed twice (use some CPU time) but simplify the migration and better security.
","8534","<sha1><sha256>","8","1","4","2015-02-04 15:48:02","6971355","0","1","","","","2011-08-07 07:15:23",""
"6971316","Want to Convert a Website password Encryption from SHA1 to SHA256","just looking for some advise.
I have a website with around 2500 users - small but growing.
I built it with using SHA1 encryption on the passwords.
I've since read the SHA1 is insecure and would like to change to say SHA256 with a Salt.
Does anyone have any advice on how to make a transition like this?
Would be great if I could decrypt the passwords and just re-hash them but it doesn't appear doing able.
thx
Adam
","Switching to SHA256 will hardly make your website more secure.
SHA1 and SH512 are message digests, they were never meant to be password-hashing (or key-derivation) functions. (Although a message digest could be used a building block for a KDF, such as in PBKDF2 with HMAC-SHA1.)
A password-hashing function should defend against dictionary attacks and rainbow tables.
Currently, the only standard (as in sanctioned by NIST) password-hashing or key-derivation function is PBKDF2. Better choices, if using a standard is not required, are bcrypt and the newer scrypt. Wikipedia has pages for all three functions:

https://en.wikipedia.org/wiki/PBKDF2
https://en.wikipedia.org/wiki/Bcrypt
https://en.wikipedia.org/wiki/Scrypt

The page at https://crackstation.net/hashing-security.htm contains an extensive discussion of password security.
This being said, tdhammers offers good advice regarding how to handle the migration.
","8534","<sha1><sha256>","8","1","4","2015-02-04 15:48:02","6971355","0","1","","","","2011-08-07 07:15:23",""
"20142846","Why do all the variants of SHA256 appear as SHA256Managed?","I'm writing an extension method that simplifies the creation of hashes by removing a ton of boilerplate, my problem is however that whenever I step through the code, I can see that it always picks SHA256Managed, regardless of whether or not I call SHA256.Create(), SHA256Cng.Create(), SHA256Managed.Create() or SHA256CryptoServiceProvider.Create()
It's the same story when I pick a different hashing algorithm like MD5, but in the case of MD5 it always picks MD5CryptoServiceProvider regardless of class that I actually use...
Why is that?
Here's my code:
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace Utility.Methods
{
    public enum HashType { MD5, SHA512, SHA256, SHA384, SHA1 }
    public enum HashSubType {Normal, Cng, Managed, CryptoServiceProvider}

    public static class TextHasher
    {
        public static string Hash(this string input, HashType hash, HashSubType subType = HashSubType.Normal)
        {
            Func<HashAlgorithm, string> hashFunction = alg => HashingHelper(input, alg);

            switch (subType)
            {
                case HashSubType.Normal:
                    return hashFunction(NormalHashes(hash));
                case HashSubType.Cng:
                    return hashFunction(CngHashes(hash));
                case HashSubType.Managed:
                    return hashFunction(ManagedHashes(hash));
                case HashSubType.CryptoServiceProvider:
                    return hashFunction(CSPHashes(hash));
                default: return ""error""; // unreachable
            }
        }

        private static string HashingHelper(string text, HashAlgorithm algorithm)
        {
            Func<string, byte[]> getHash = input => algorithm.ComputeHash(Encoding.UTF8.GetBytes(input));

            var sb = new StringBuilder();
            Array.ForEach(getHash(text), b => sb.Append(b.ToString(""X"")));

            return sb.ToString();
        }

        private static HashAlgorithm NormalHashes(HashType hash)
        {
            switch (hash)
            {
                case HashType.MD5:
                    return MD5.Create();
                case HashType.SHA1:
                    return SHA1.Create();
                case HashType.SHA256:
                    return SHA256.Create();
                case HashType.SHA384:
                    return SHA384.Create();
                case HashType.SHA512:
                    return SHA512.Create();
                default: return null; // unreachable
            }
        }

        private static HashAlgorithm CngHashes(HashType hash)
        {
            switch (hash)
            {
                case HashType.MD5:
                    return MD5Cng.Create();
                case HashType.SHA1:
                    return SHA1Cng.Create();
                case HashType.SHA256:
                    return SHA256Cng.Create();
                case HashType.SHA384:
                    return SHA384Cng.Create();
                case HashType.SHA512:
                    return SHA512Cng.Create();
                default: return null; // unreachable
            }
        }

        private static HashAlgorithm ManagedHashes(HashType hash)
        {
            switch (hash)
            {
                case HashType.SHA1:
                    return SHA1Managed.Create();
                case HashType.SHA256:
                    return SHA256Managed.Create();
                case HashType.SHA384:
                    return SHA384Managed.Create();
                case HashType.SHA512:
                    return SHA512Managed.Create();
                default: return null; // unreachable
            }
        }

        private static HashAlgorithm CSPHashes(HashType hash)
        {
            switch (hash)
            {
                case HashType.MD5:
                    return MD5CryptoServiceProvider.Create();
                case HashType.SHA1:
                    return SHA1CryptoServiceProvider.Create();
                case HashType.SHA256:
                    return SHA256CryptoServiceProvider.Create();
                case HashType.SHA384:
                    return SHA384CryptoServiceProvider.Create();
                case HashType.SHA512:
                    return SHA512CryptoServiceProvider.Create();
                default: return null; // unreachable
            }
        }
    }
}

So, any help?
","That's because you are always calling the same static method, SHA256.Create. SHA256 is an abstract class and its descendants do not provide an alternate method. In fact, Resharper will give you a warning that you are accessing a static member from a derived type.
In fact, calling SHA256.Create is the same as calling HashAlgorithm.Create. Both classes call the same implementation internally and simply cast the result to different types.
The SHA256.Create method will create the default implementation that is specified in machine.config and can be overriden in your app.config
If you want to use a specific provider, use SHA256.Create(string) passing the name of the provider you want to use.
Examples are:
SHA256.Create(""System.Security.Cryptography.SHA256Cng"");
HashAlgorithm.Create(""System.Security.Cryptography.SHA256Cng"");
SHA256.Create(""System.Security.Cryptography.SHA256CryptoServiceProvider"");

EDIT
The documentation of HashAlgorithm.Create specifies a list of valid algorithm names. The MSDN article Mapping Algorithm Names to Cryptography Classes describes how you can map algorithm names to other providers (your own, third-party, hardware-accelerated or whatever) and use them instead of the default algorithms. 
EDIT 2
It is also possible to change the mappings programmatically. So, to map ""Dog"" to the SHA512CryptoServiceProvider, you just need to write:
CryptoConfig.AddAlgorithm(
             typeof(System.Security.Cryptography.SHA512CryptoServiceProvider),
             ""Dog"");
var t4 = HashAlgorithm.Create(""Dog"");

","8529","<c#><hash><md5><checksum><sha256>","8","13","1","2013-11-22 11:35:27","20143178","7","3","107625","","2013-11-22 10:58:16","2013-11-22 10:41:11",""
"37737857","Generate HMAC SHA256 hash using key in C++","I am looking for some function or a way that would return HMAC SHA256 hash in C++ using secret key. I have seen documentation of Crypto++ and OpenSSL but it does not accept an extra parameter of secret key for computation. Can someone help me by providing some info, code snippets or links.
","The specifications for the SHA256 hash algorithm, and for HMAC algorithms are open specifications that anyone can read, and implement themselves.
A simple Google search will easily find the public open specifications for these algorithms.
In fact, there's even a public reference implementation of SHA256 and HMAC in RFC 6234.
","8427","<c++><sha256><hmac>","3","0","3","2018-10-18 09:02:03","37738133","2","","608639","","2016-06-10 02:44:48","2016-06-09 23:40:13",""
"37737857","Generate HMAC SHA256 hash using key in C++","I am looking for some function or a way that would return HMAC SHA256 hash in C++ using secret key. I have seen documentation of Crypto++ and OpenSSL but it does not accept an extra parameter of secret key for computation. Can someone help me by providing some info, code snippets or links.
","OpenSSL docs for HMAC, clearly state the requirement of a 'key' as part of context initialization.
int HMAC_Init_ex(HMAC_CTX *ctx, const void *key, int key_len,
               const EVP_MD *md, ENGINE *impl);


HMAC() computes the message authentication code of the n bytes at d
  using the hash function evp_md and the key key which is key_len bytes
  long.

","8427","<c++><sha256><hmac>","3","1","3","2018-10-18 09:02:03","37738133","2","","608639","","2016-06-10 02:44:48","2016-06-09 23:40:13",""
"37737857","Generate HMAC SHA256 hash using key in C++","I am looking for some function or a way that would return HMAC SHA256 hash in C++ using secret key. I have seen documentation of Crypto++ and OpenSSL but it does not accept an extra parameter of secret key for computation. Can someone help me by providing some info, code snippets or links.
","You can use POCO library
Sample code:
class SHA256Engine : public Poco::Crypto::DigestEngine
{
public:
    enum
    {
        BLOCK_SIZE = 64,
        DIGEST_SIZE = 32
    };

    SHA256Engine()
            : DigestEngine(""SHA256"")
    {
    }

};


Poco::HMACEngine<SHA256Engine> hmac{secretKey};
hmac.update(string);

std::cout << ""HMACE hex:"" << Poco::DigestEngine::digestToHex(hmac.digest()) << std::endl;// lookout difest() calls reset ;)

Sample integration with POCO using cmake install:
mkdir build_poco/
cd build_poco/ && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=./install ../poco/

CMakeLists.txt
CMAKE_MINIMUM_REQUIRED(VERSION 3.8)
PROJECT(SamplePoco)

SET(CMAKE_CXX_STANDARD 14)

SET(SOURCE_FILES
        src/main.cpp
        )

SET(_IMPORT_PREFIX lib/build_poco/install)

INCLUDE(lib/build_poco/install/lib/cmake/Poco/PocoFoundationTargets.cmake)
INCLUDE(lib/build_poco/install/lib/cmake/Poco/PocoNetTargets.cmake)
INCLUDE(lib/build_poco/install/lib/cmake/Poco/PocoJSONTargets.cmake)
INCLUDE(lib/build_poco/install/lib/cmake/Poco/PocoXMLTargets.cmake)
INCLUDE(lib/build_poco/install/lib/cmake/Poco/PocoCryptoTargets.cmake)
INCLUDE(lib/build_poco/install/lib/cmake/Poco/PocoUtilTargets.cmake)
INCLUDE(lib/build_poco/install/lib/cmake/Poco/PocoNetSSLTargets.cmake)


ADD_EXECUTABLE(SamplePoco ${SOURCE_FILES})
TARGET_LINK_LIBRARIES(SamplePoco
        Poco::Foundation
        Poco::Crypto
        Poco::Util
        Poco::JSON
        Poco::NetSSL
        )
TARGET_INCLUDE_DIRECTORIES(SamplePoco PUBLIC src/)

Sample implementation used here: https://github.com/gelldur/abucoins-api-cpp
","8427","<c++><sha256><hmac>","3","2","3","2018-10-18 09:02:03","37738133","2","","608639","","2016-06-10 02:44:48","2016-06-09 23:40:13",""
"34855049","Using HMAC SHA256 in Ruby","I'm trying to apply HMAC-SHA256 for generate a key for an Rest API.
I'm doing something like this:
def generateTransactionHash(stringToHash)
  key = '123'
  data = 'stringToHash'
  digest = OpenSSL::Digest.new('sha256')

  hmac = OpenSSL::HMAC.digest(digest, key, data)
  puts hmac
end

The output of this is always this: (if I put '12345' as parameter or 'HUSYED815X', I do get the same)
ۯw/{o���p�T����:��a�h��E|q

The API is not working because of this... Can some one help me with that?
","According to the documentation OpenSSL::HMAC.digest

Returns the authentication code an instance represents as a binary string.

If you have a problem using that maybe you need a hex encoded form provided by OpenSSL::HMAC.hexdigest
Example
key = 'key'
data = 'The quick brown fox jumps over the lazy dog'
digest = OpenSSL::Digest.new('sha256')

OpenSSL::HMAC.digest(digest, key, data)
#=> ""\xF7\xBC\x83\xF40S\x84$\xB12\x98\xE6\xAAo\xB1C\xEFMY\xA1IF\x17Y\x97G\x9D\xBC-\x1A<\xD8""

OpenSSL::HMAC.hexdigest(digest, key, data)
#=> ""f7bc83f430538424b13298e6aa6fb143ef4d59a14946175997479dbc2d1a3cd8""

","8256","<ruby-on-rails><ruby><sha256><hmac>","12","15","3","2019-07-30 16:01:32","34877237","5","5","","","","2016-01-18 12:41:03",""
"34855049","Using HMAC SHA256 in Ruby","I'm trying to apply HMAC-SHA256 for generate a key for an Rest API.
I'm doing something like this:
def generateTransactionHash(stringToHash)
  key = '123'
  data = 'stringToHash'
  digest = OpenSSL::Digest.new('sha256')

  hmac = OpenSSL::HMAC.digest(digest, key, data)
  puts hmac
end

The output of this is always this: (if I put '12345' as parameter or 'HUSYED815X', I do get the same)
ۯw/{o���p�T����:��a�h��E|q

The API is not working because of this... Can some one help me with that?
","Try This:
hmac = OpenSSL::HMAC.hexdigest(OpenSSL::Digest.new('sha256'), key, data)

","8256","<ruby-on-rails><ruby><sha256><hmac>","12","12","3","2019-07-30 16:01:32","34877237","5","5","","","","2016-01-18 12:41:03",""
"34855049","Using HMAC SHA256 in Ruby","I'm trying to apply HMAC-SHA256 for generate a key for an Rest API.
I'm doing something like this:
def generateTransactionHash(stringToHash)
  key = '123'
  data = 'stringToHash'
  digest = OpenSSL::Digest.new('sha256')

  hmac = OpenSSL::HMAC.digest(digest, key, data)
  puts hmac
end

The output of this is always this: (if I put '12345' as parameter or 'HUSYED815X', I do get the same)
ۯw/{o���p�T����:��a�h��E|q

The API is not working because of this... Can some one help me with that?
","In my case (Ticketmatic) I had to create the HMAC like above and add an Authorization header to the request with the HMAC in it. 
hmac = OpenSSL::HMAC.hexdigest(OpenSSL::Digest.new('sha256'), secret_key, access_key + name + time)
req = Net::HTTP::Get.new(uri)
req['Authorization'] = ""TM-HMAC-SHA256 key=#{access_key} ts=#{time} sign=#{hmac}""
res = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) { |http| http.request(req) }

You can find a full gist here
And a blogpost with more explantion here
","8256","<ruby-on-rails><ruby><sha256><hmac>","12","-1","3","2019-07-30 16:01:32","34877237","5","5","","","","2016-01-18 12:41:03",""
"34515560","Compare two hashed password using same salt using SHA-256 algorith in Java, Spring security?","I need some guidance on the scenario where I need to check the password coming from UI form (i.e, Authentication object) which I need to hashed using SHA-256 + constant salt(before making comparison) and password coming from DB (DB also has hashed password + salt)  using Spring Security.
I am looking to compare these two different hashed value generated using same SALT value. How we can do it in java? Could anyone please share me a sample code?
","You could simply compare the two password strings passwordA.equals(passwordB) ...
This has some security shortcomings:

Passwords should not be handled as strings, but as char or byte arrays: see here why
An Equal comparison is (theoretically) vulnerable to a timing-attack: see a discussion about a solution in java
It might be wise to use standard-tool to do security related things (even when they seem to be simple). Spring security has a ton of tools that can do that for you. Have a look at BCryptPasswordEncoder for example. Using well tested and maintained frameworks for security purposes is always a good idea.
 BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
 String hashedPassword = passwordEncoder.encode(password);
 ...
 boolean result = passwordEncoder.matches(rawPassword, hashedPassword);



Also: Use a proper Algorithm for Password-Hashing! See this Answer on SO for some proposals 
SHA-256 is not one of them. Spring Security gives you the right tools for the jobs, so you could just use them.
","8254","<java><spring-security><sha256>","0","5","2","2016-01-14 06:09:41","","3","6","","user5268786","2015-12-29 20:20:51","2015-12-29 17:03:19",""
"34515560","Compare two hashed password using same salt using SHA-256 algorith in Java, Spring security?","I need some guidance on the scenario where I need to check the password coming from UI form (i.e, Authentication object) which I need to hashed using SHA-256 + constant salt(before making comparison) and password coming from DB (DB also has hashed password + salt)  using Spring Security.
I am looking to compare these two different hashed value generated using same SALT value. How we can do it in java? Could anyone please share me a sample code?
","It looks to me you're looking to compare two separate hashed values created using same salt. Am I right ? If yes, so here is the sample program taking a reference from https://ashishpshukla.wordpress.com/2010/07/02/sample-java-code-for-password-encryption-using-secure-hash-algorithm-sha-256/
import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;

public class PasswordEncoder {
    private static PasswordEncoder instance;
    private final static int ITERATION_COUNT = 5;

    private PasswordEncoder() {  }

    public static synchronized PasswordEncoder getInstance() {
        if (instance == null) {
            PasswordEncoder returnPasswordEncoder = new PasswordEncoder();
            return returnPasswordEncoder;
        }
        else
            return instance;
    }

    public synchronized String encode(String password, String saltKey)throws NoSuchAlgorithmException, IOException {
        String encodedPassword = null;
        byte[] salt = base64ToByte(saltKey);

        MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
        digest.reset();
        digest.update(salt);

        byte[] btPass = digest.digest(password.getBytes(""UTF-8""));
        for (int i = 0; i < ITERATION_COUNT; i++) {
            digest.reset();
            btPass = digest.digest(btPass);
        }

        encodedPassword = byteToBase64(btPass);
        return encodedPassword;
    }

    private byte[] base64ToByte(String str) throws IOException {
        BASE64Decoder decoder = new BASE64Decoder();
        byte[] returnbyteArray = decoder.decodeBuffer(str);
        return returnbyteArray;
    }

    private String byteToBase64(byte[] bt) {
        BASE64Encoder endecoder = new BASE64Encoder();
        String returnString = endecoder.encode(bt);
        return returnString;
    }

    public static void main(String[] args) throws NoSuchAlgorithmException, IOException {
        String password = ""Secrete@343"";
        String saltKey = ""PveFT7isDjGYFTaYhc2Fzw=="";
        String hash1,hash2 = null;

        // Assume from UI
        PasswordEncoder encoder1 = PasswordEncoder.getInstance();
        hash1 = encoder1.encode(password, saltKey);
        System.out.println(hash1);

        // Assume the same present in db
        PasswordEncoder encoder2 = PasswordEncoder.getInstance();
        hash2 = encoder2.encode(password, saltKey);
        System.out.println(hash2);

        if(hash1.equalsIgnoreCase(hash2))
            System.out.println(""Both hash Matches.."");
        else
            System.out.println(""Hash matches fails.."");
    }
}

The output: 
8WgbLik5EbdtJY4OWm2ZQ0tHiU2lmvXNVrPhFDz3W2Y=
8WgbLik5EbdtJY4OWm2ZQ0tHiU2lmvXNVrPhFDz3W2Y=
Both hash Matches..

","8254","<java><spring-security><sha256>","0","0","2","2016-01-14 06:09:41","","3","6","","user5268786","2015-12-29 20:20:51","2015-12-29 17:03:19",""
"839280","The correct way to encrypt a string using HmacSHA256 in VB.NET","I need to create a keyed hash for a string of XML to send to a 3rd party. This is the code I am using but it is producing a different hash than the example that the 3rd party has sent me. I have been through all the tutorials I can find and re-read MSDN again and again. What am I doing wrong? Or should I suspect a problem at the other end?
Public Shared Function HashString(ByVal StringToHash As String) As String
    Dim myEncoder As New System.Text.UTF32Encoding
    Dim Key() As Byte = myEncoder.GetBytes(My.Settings.PortalHASH)
    Dim XML() As Byte = myEncoder.GetBytes(StringToHash)
    Dim myHMACSHA256 As New System.Security.Cryptography.HMACSHA256(Key)
    Dim HashCode As Byte() = myHMACSHA256.ComputeHash(XML)
    Return Convert.ToBase64String(HashCode)
End Function

It needs to be base-64 encoded, which is why I have the last line.
Thanks
","I can't comment on the correctness of the VB, but from the obviousness of the naming, I can say it looks correct.
So there's not enough information here to say whats wrong; and you've likely said everything you know.  Therefore, the people to verify this for you would be your third party.  They'd be able to say what was wrong.
PS: strange that there is no nonce sent by the other party as a challenge?
","7998","<vb.net><hash><encryption><hmac><sha256>","0","0","2","2015-02-26 14:54:34","839638","5","","3911632","","2015-02-26 14:54:34","2009-05-08 10:49:34",""
"839280","The correct way to encrypt a string using HmacSHA256 in VB.NET","I need to create a keyed hash for a string of XML to send to a 3rd party. This is the code I am using but it is producing a different hash than the example that the 3rd party has sent me. I have been through all the tutorials I can find and re-read MSDN again and again. What am I doing wrong? Or should I suspect a problem at the other end?
Public Shared Function HashString(ByVal StringToHash As String) As String
    Dim myEncoder As New System.Text.UTF32Encoding
    Dim Key() As Byte = myEncoder.GetBytes(My.Settings.PortalHASH)
    Dim XML() As Byte = myEncoder.GetBytes(StringToHash)
    Dim myHMACSHA256 As New System.Security.Cryptography.HMACSHA256(Key)
    Dim HashCode As Byte() = myHMACSHA256.ComputeHash(XML)
    Return Convert.ToBase64String(HashCode)
End Function

It needs to be base-64 encoded, which is why I have the last line.
Thanks
","(Read my comments)
If My.Settings.PortalHASH is the Base64 encoded key you need to do this:
Dim Key() As Byte = Convert.FromBase64String(My.Settings.PortalHASH)

","7998","<vb.net><hash><encryption><hmac><sha256>","0","1","2","2015-02-26 14:54:34","839638","5","","3911632","","2015-02-26 14:54:34","2009-05-08 10:49:34",""
"39767297","How to use SHA256-HMAC in python code?","I am taking message and key from this URL
import hmac
import hashlib
import base64
my = ""/api/embedded_dashboard?data=%7B%22dashboard%22%3A7863%2C%22embed%22%3A%22v2%22%2C%22filters%22%3A%5B%7B%22name%22%3A%22Filter1%22%2C%22value%22%3A%22value1%22%7D%2C%7B%22name%22%3A%22Filter2%22%2C%22value%22%3A%221234%22%7D%5D%7D""
key = ""e179017a-62b0-4996-8a38-e91aa9f1""
print(hashlib.sha256(my + key).hexdigest())

I am getting this result:
2df1d58a56198b2a9267a9955c31291cd454bdb3089a7c42f5d439bbacfb3b88

Expecting result:
adcb671e8e24572464c31e8f9ffc5f638ab302a0b673f72554d3cff96a692740

","You are not making use of hmac at all in your code. 
Typical way to use hmac, construct an HMAC object from your key, message and identify the hashing algorithm by passing in its constructor:
h = hmac.new( key, my, hashlib.sha256 )
print( h.hexdigest() )

That should output 
adcb671e8e24572464c31e8f9ffc5f638ab302a0b673f72554d3cff96a692740

for your example data.
","7949","<python><oauth><sha256><hmac>","3","10","2","2018-08-15 15:09:37","39767589","0","2","","","","2016-09-29 10:04:04",""
"39767297","How to use SHA256-HMAC in python code?","I am taking message and key from this URL
import hmac
import hashlib
import base64
my = ""/api/embedded_dashboard?data=%7B%22dashboard%22%3A7863%2C%22embed%22%3A%22v2%22%2C%22filters%22%3A%5B%7B%22name%22%3A%22Filter1%22%2C%22value%22%3A%22value1%22%7D%2C%7B%22name%22%3A%22Filter2%22%2C%22value%22%3A%221234%22%7D%5D%7D""
key = ""e179017a-62b0-4996-8a38-e91aa9f1""
print(hashlib.sha256(my + key).hexdigest())

I am getting this result:
2df1d58a56198b2a9267a9955c31291cd454bdb3089a7c42f5d439bbacfb3b88

Expecting result:
adcb671e8e24572464c31e8f9ffc5f638ab302a0b673f72554d3cff96a692740

","Some code for you, easy to use:
import hmac
import hashlib
import binascii

def create_sha256_signature(key, message):
    byte_key = binascii.unhexlify(key)
    message = message.encode()
    return hmac.new(byte_key, message, hashlib.sha256).hexdigest().upper()

create_sha256_signature(""E49756B4C8FAB4E48222A3E7F3B97CC3"", ""TEST STRING"")

","7949","<python><oauth><sha256><hmac>","3","1","2","2018-08-15 15:09:37","39767589","0","2","","","","2016-09-29 10:04:04",""
"27762562","How to compare [32]byte with []byte in golang?","I want to compare output of sha256.Sum256() which is [32]byte with a []byte.
I am getting an error ""mismatched types [32]byte and []byte"". I am not able to convert []byte to [32]byte. 
Is there a way to do this? 
","I got the answer using this thread
SHA256 in Go and PHP giving different results
    converted := []byte(raw)
    hasher := sha256.New()
    hasher.Write(converted)
    return hex.EncodeToString(hasher.Sum(nil)) == encoded

This is not converting [32]byte to []byte but it is using different function which do not give output in [32]byte.
","7843","<go><sha256>","13","-3","2","2019-09-30 16:02:20","27762870","0","2","","","","2015-01-04 05:00:26",""
"27762562","How to compare [32]byte with []byte in golang?","I want to compare output of sha256.Sum256() which is [32]byte with a []byte.
I am getting an error ""mismatched types [32]byte and []byte"". I am not able to convert []byte to [32]byte. 
Is there a way to do this? 
","You can trivially convert any array ([size]T) to a slice ([]T) by slicing it:
x := [32]byte{}
slice := x[:] // shorthand for x[0:len(x)]

From there you can compare it to your slice like you would compare any other two slices, e.g.
func Equal(slice1, slice2 []byte) bool {
    if len(slice1) != len(slice2) {
        return false
    }

    for i := range slice1 {
        if slice1[i] != slice2[i] {
            return false
        }
    }

    return true
}

Edit: As Dave mentions in the comments, there's also an Equal method in the bytes package, bytes.Equal(x[:], y[:])
","7843","<go><sha256>","13","22","2","2019-09-30 16:02:20","27762870","0","2","","","","2015-01-04 05:00:26",""
"13237456","c# and java - difference between hmacsha256 hash","I have the following code in Java:
byte[] secretKey = secretAccessKey.getBytes(""UTF-8"");
SecretKeySpec signingKey = new SecretKeySpec(secretKey, ""HmacSHA256"");
Mac mac = Mac.getInstance(""HmacSHA256"");
mac.init(signingKey);
byte[] bytes = data.getBytes(""UTF-8"");
byte[] rawHmac = mac.doFinal(bytes);
String result = javax.xml.bind.DatatypeConverter.printBase64Binary(rawHmac);

and the following code in C#:
UTF8Encoding enc = new UTF8Encoding();
byte[] secretKey = enc.GetBytes(secretAccessKey);
HMACSHA256 hmac = new HMACSHA256(secretKey);
hmac.Initialize();
byte[] bytes = enc.GetBytes(data);
byte[] rawHmac = hmac.ComputeHash(bytes);
string result = Convert.ToBase64String(rawHmac);

The byte arrays ""secretKey"" and ""bytes"" are equivalent but the byte array ""rawHmac"" is different, and the string ""result"" is different. Can anyone see why?
","Don't do this:
byte[] bytes = data.getBytes();

That will use the platform default encoding to convert a string to a byte array. That can vary between platform, whereas you want something repeatable. I would suggest UTF-8:
byte[] bytes = data.getBytes(""UTF-8"");

(Do the same for the key, of course.)
You should then use the same encoding in your C# - not ASCII, unless you really want to not handle non-ASCII characters.
byte[] bytes = Encoding.UTF8.GetBytes(data);

It's also not clear how you're comparing the results afterwards - don't forget that byte is signed in Java, but unsigned in C#. It's probably simplest to convert the hash to hex or base64 for comparison purposes.
EDIT: I strongly suspect the last part was the problem - comparing the results.
Here are two short but complete programs (using the iharder.net base64 converter in Java) which produce the same base64 output:
Java:
import java.util.*;
import javax.crypto.*;
import javax.crypto.spec.*;

public class Test {
    public static void main (String[] args) throws Exception {
        String secretAccessKey = ""mykey"";
        String data = ""my data"";
        byte[] secretKey = secretAccessKey.getBytes();
        SecretKeySpec signingKey = new SecretKeySpec(secretKey, ""HmacSHA256"");
        Mac mac = Mac.getInstance(""HmacSHA256"");
        mac.init(signingKey);
        byte[] bytes = data.getBytes();
        byte[] rawHmac = mac.doFinal(bytes);
        System.out.println(Base64.encodeBytes(rawHmac));
    }
}

C#:
using System;
using System.Security.Cryptography;
using System.Text;

class Test
{
    static void Main()
    {
        String secretAccessKey = ""mykey"";
        String data = ""my data"";
        byte[] secretKey = Encoding.UTF8.GetBytes(secretAccessKey);
        HMACSHA256 hmac = new HMACSHA256(secretKey);
        hmac.Initialize();
        byte[] bytes = Encoding.UTF8.GetBytes(data);
        byte[] rawHmac = hmac.ComputeHash(bytes);
        Console.WriteLine(Convert.ToBase64String(rawHmac));
    }
}

Output from both:
ivEyFpkagEoghGnTw/LmfhDOsiNbcnEON50mFGzW9/w=

","7585","<c#><java><encryption><hmac><sha256>","8","14","2","2017-12-27 16:47:58","13237486","1","5","940153","","2012-11-05 17:53:53","2012-11-05 17:42:38",""
"13237456","c# and java - difference between hmacsha256 hash","I have the following code in Java:
byte[] secretKey = secretAccessKey.getBytes(""UTF-8"");
SecretKeySpec signingKey = new SecretKeySpec(secretKey, ""HmacSHA256"");
Mac mac = Mac.getInstance(""HmacSHA256"");
mac.init(signingKey);
byte[] bytes = data.getBytes(""UTF-8"");
byte[] rawHmac = mac.doFinal(bytes);
String result = javax.xml.bind.DatatypeConverter.printBase64Binary(rawHmac);

and the following code in C#:
UTF8Encoding enc = new UTF8Encoding();
byte[] secretKey = enc.GetBytes(secretAccessKey);
HMACSHA256 hmac = new HMACSHA256(secretKey);
hmac.Initialize();
byte[] bytes = enc.GetBytes(data);
byte[] rawHmac = hmac.ComputeHash(bytes);
string result = Convert.ToBase64String(rawHmac);

The byte arrays ""secretKey"" and ""bytes"" are equivalent but the byte array ""rawHmac"" is different, and the string ""result"" is different. Can anyone see why?
","This was a non-question, as demonstrated, the hashes are always the same.
The problem in my case was unrelated, the fact that Java uppercases percent encoding on UrlEncoder but .NET doesn't.
Goes to show how important it is to test in isolation!
","7585","<c#><java><encryption><hmac><sha256>","8","1","2","2017-12-27 16:47:58","13237486","1","5","940153","","2012-11-05 17:53:53","2012-11-05 17:42:38",""
"28647272","OpenSSL on Mac OS X for SHA-256 signature algorithm","I want to create a self-signed certificate (root ca) with OpenSSL. The signature algorithm needs to be a ECDSA signature with SHA-256 hash. 
On my Mac OS X (Yosemite), I have OpenSSL version 0.9.8zc (from Oct 15, 2014) installed. When I call openssl ciphers -v on the command line, it seems that my current OpenSSL version does not support SHA2 (with SHA-256 etc.). 
DHE-RSA-AES256-SHA      SSLv3 Kx=DH       Au=RSA  Enc=AES(256)  Mac=SHA1
DHE-DSS-AES256-SHA      SSLv3 Kx=DH       Au=DSS  Enc=AES(256)  Mac=SHA1
AES256-SHA              SSLv3 Kx=RSA      Au=RSA  Enc=AES(256)  Mac=SHA1
EDH-RSA-DES-CBC3-SHA    SSLv3 Kx=DH       Au=RSA  Enc=3DES(168) Mac=SHA1
EDH-DSS-DES-CBC3-SHA    SSLv3 Kx=DH       Au=DSS  Enc=3DES(168) Mac=SHA1
DES-CBC3-SHA            SSLv3 Kx=RSA      Au=RSA  Enc=3DES(168) Mac=SHA1
DES-CBC3-MD5            SSLv2 Kx=RSA      Au=RSA  Enc=3DES(168) Mac=MD5 
DHE-RSA-AES128-SHA      SSLv3 Kx=DH       Au=RSA  Enc=AES(128)  Mac=SHA1
DHE-DSS-AES128-SHA      SSLv3 Kx=DH       Au=DSS  Enc=AES(128)  Mac=SHA1
AES128-SHA              SSLv3 Kx=RSA      Au=RSA  Enc=AES(128)  Mac=SHA1
DHE-RSA-SEED-SHA        SSLv3 Kx=DH       Au=RSA  Enc=SEED(128) Mac=SHA1
DHE-DSS-SEED-SHA        SSLv3 Kx=DH       Au=DSS  Enc=SEED(128) Mac=SHA1
SEED-SHA                SSLv3 Kx=RSA      Au=RSA  Enc=SEED(128) Mac=SHA1
RC2-CBC-MD5             SSLv2 Kx=RSA      Au=RSA  Enc=RC2(128)  Mac=MD5 
RC4-SHA                 SSLv3 Kx=RSA      Au=RSA  Enc=RC4(128)  Mac=SHA1
RC4-MD5                 SSLv3 Kx=RSA      Au=RSA  Enc=RC4(128)  Mac=MD5 
RC4-MD5                 SSLv2 Kx=RSA      Au=RSA  Enc=RC4(128)  Mac=MD5 
EDH-RSA-DES-CBC-SHA     SSLv3 Kx=DH       Au=RSA  Enc=DES(56)   Mac=SHA1
EDH-DSS-DES-CBC-SHA     SSLv3 Kx=DH       Au=DSS  Enc=DES(56)   Mac=SHA1
DES-CBC-SHA             SSLv3 Kx=RSA      Au=RSA  Enc=DES(56)   Mac=SHA1
DES-CBC-MD5             SSLv2 Kx=RSA      Au=RSA  Enc=DES(56)   Mac=MD5 
EXP-EDH-RSA-DES-CBC-SHA SSLv3 Kx=DH(512)  Au=RSA  Enc=DES(40)   Mac=SHA1 export
EXP-EDH-DSS-DES-CBC-SHA SSLv3 Kx=DH(512)  Au=DSS  Enc=DES(40)   Mac=SHA1 export
EXP-DES-CBC-SHA         SSLv3 Kx=RSA(512) Au=RSA  Enc=DES(40)   Mac=SHA1 export
EXP-RC2-CBC-MD5         SSLv3 Kx=RSA(512) Au=RSA  Enc=RC2(40)   Mac=MD5  export
EXP-RC2-CBC-MD5         SSLv2 Kx=RSA(512) Au=RSA  Enc=RC2(40)   Mac=MD5  export
EXP-RC4-MD5             SSLv3 Kx=RSA(512) Au=RSA  Enc=RC4(40)   Mac=MD5  export
EXP-RC4-MD5             SSLv2 Kx=RSA(512) Au=RSA  Enc=RC4(40)   Mac=MD5  export

The latest version of OpenSSL seems to be 1.0.2, but the source available at https://www.openssl.org/source/ does not seem to be compilable for OS X, since the file ""Install.MacOS"" says right at the beginning:
""Thanks to Roy Wood  initial support for Mac OS (pre
X) is now provided.""
My try to install it nevertheless resulted in some errors on the command line.
Can anyone tell me if it is somehow possible to use the SHA-256 signature algorithm with an OpenSSL installation on Yosemite? It seems odd to me if this would not be possible, but I am no expert in this field.
Hoping for a good hint!
","Finally found out how to do it:

Install homebrew (see http://brew.sh/index.html) with command
ruby -e ""$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)""
Install newest openssl version with command brew install openssl
Run brew link --force openssl in terminal, open a new one and run which openssl in it -> will show you /usr/local/bin/openssl 
Tada! Now if you run openssl version it will show OpenSSL 1.0.2 22 Jan 2015 (if you didn't run brew link --force openssl before it would have shown OpenSSL 0.9.8zc 15 Oct 2014)

:)
(Found hints on Update OpenSSL on OS X with Homebrew, didn't know about homebrew before or that I needed it to get the up-to-date openssl running.
","7579","<macos><openssl><sha256><ecdsa>","2","5","3","2017-12-07 17:09:30","","2","","","","","2015-02-21 15:07:11",""
"28647272","OpenSSL on Mac OS X for SHA-256 signature algorithm","I want to create a self-signed certificate (root ca) with OpenSSL. The signature algorithm needs to be a ECDSA signature with SHA-256 hash. 
On my Mac OS X (Yosemite), I have OpenSSL version 0.9.8zc (from Oct 15, 2014) installed. When I call openssl ciphers -v on the command line, it seems that my current OpenSSL version does not support SHA2 (with SHA-256 etc.). 
DHE-RSA-AES256-SHA      SSLv3 Kx=DH       Au=RSA  Enc=AES(256)  Mac=SHA1
DHE-DSS-AES256-SHA      SSLv3 Kx=DH       Au=DSS  Enc=AES(256)  Mac=SHA1
AES256-SHA              SSLv3 Kx=RSA      Au=RSA  Enc=AES(256)  Mac=SHA1
EDH-RSA-DES-CBC3-SHA    SSLv3 Kx=DH       Au=RSA  Enc=3DES(168) Mac=SHA1
EDH-DSS-DES-CBC3-SHA    SSLv3 Kx=DH       Au=DSS  Enc=3DES(168) Mac=SHA1
DES-CBC3-SHA            SSLv3 Kx=RSA      Au=RSA  Enc=3DES(168) Mac=SHA1
DES-CBC3-MD5            SSLv2 Kx=RSA      Au=RSA  Enc=3DES(168) Mac=MD5 
DHE-RSA-AES128-SHA      SSLv3 Kx=DH       Au=RSA  Enc=AES(128)  Mac=SHA1
DHE-DSS-AES128-SHA      SSLv3 Kx=DH       Au=DSS  Enc=AES(128)  Mac=SHA1
AES128-SHA              SSLv3 Kx=RSA      Au=RSA  Enc=AES(128)  Mac=SHA1
DHE-RSA-SEED-SHA        SSLv3 Kx=DH       Au=RSA  Enc=SEED(128) Mac=SHA1
DHE-DSS-SEED-SHA        SSLv3 Kx=DH       Au=DSS  Enc=SEED(128) Mac=SHA1
SEED-SHA                SSLv3 Kx=RSA      Au=RSA  Enc=SEED(128) Mac=SHA1
RC2-CBC-MD5             SSLv2 Kx=RSA      Au=RSA  Enc=RC2(128)  Mac=MD5 
RC4-SHA                 SSLv3 Kx=RSA      Au=RSA  Enc=RC4(128)  Mac=SHA1
RC4-MD5                 SSLv3 Kx=RSA      Au=RSA  Enc=RC4(128)  Mac=MD5 
RC4-MD5                 SSLv2 Kx=RSA      Au=RSA  Enc=RC4(128)  Mac=MD5 
EDH-RSA-DES-CBC-SHA     SSLv3 Kx=DH       Au=RSA  Enc=DES(56)   Mac=SHA1
EDH-DSS-DES-CBC-SHA     SSLv3 Kx=DH       Au=DSS  Enc=DES(56)   Mac=SHA1
DES-CBC-SHA             SSLv3 Kx=RSA      Au=RSA  Enc=DES(56)   Mac=SHA1
DES-CBC-MD5             SSLv2 Kx=RSA      Au=RSA  Enc=DES(56)   Mac=MD5 
EXP-EDH-RSA-DES-CBC-SHA SSLv3 Kx=DH(512)  Au=RSA  Enc=DES(40)   Mac=SHA1 export
EXP-EDH-DSS-DES-CBC-SHA SSLv3 Kx=DH(512)  Au=DSS  Enc=DES(40)   Mac=SHA1 export
EXP-DES-CBC-SHA         SSLv3 Kx=RSA(512) Au=RSA  Enc=DES(40)   Mac=SHA1 export
EXP-RC2-CBC-MD5         SSLv3 Kx=RSA(512) Au=RSA  Enc=RC2(40)   Mac=MD5  export
EXP-RC2-CBC-MD5         SSLv2 Kx=RSA(512) Au=RSA  Enc=RC2(40)   Mac=MD5  export
EXP-RC4-MD5             SSLv3 Kx=RSA(512) Au=RSA  Enc=RC4(40)   Mac=MD5  export
EXP-RC4-MD5             SSLv2 Kx=RSA(512) Au=RSA  Enc=RC4(40)   Mac=MD5  export

The latest version of OpenSSL seems to be 1.0.2, but the source available at https://www.openssl.org/source/ does not seem to be compilable for OS X, since the file ""Install.MacOS"" says right at the beginning:
""Thanks to Roy Wood  initial support for Mac OS (pre
X) is now provided.""
My try to install it nevertheless resulted in some errors on the command line.
Can anyone tell me if it is somehow possible to use the SHA-256 signature algorithm with an OpenSSL installation on Yosemite? It seems odd to me if this would not be possible, but I am no expert in this field.
Hoping for a good hint!
","
Can anyone tell me if it is somehow possible to use the SHA-256 signature algorithm with an OpenSSL installation on Yosemite? 

Yes, but you need to install a more recent version OpenSSL. OS X's 0.9.8 lacks elliptic curve support (among other things).


The latest version of OpenSSL seems to be 1.0.2, but the source available at https://www.openssl.org/source/ does not seem to be compilable for OS X, since the file ""Install.MacOS"" says right at the beginning:
""Thanks to Roy Wood initial support for Mac OS (pre X) is now provided.""

Ignore that because its wrong.
See the OpenSSL wiki on Compilation and Installation. The 30 second fly-by on 64-bit OS X:
export KERNEL_BITS=64
cd openssl
./config shared no-ssl2 no-ssl3 no-comp enable-ec_nistp_64_gcc_128 --openssldir=/usr/local
make all
sudo make install

Ignore the prompt about make depend since you don't need it.

Related: if you want to build a fat OpenSSL, then see this question: Build Multiarch OpenSSL on OS X. The short answer is, don't try because it won't work due to OpenSSL makefiles.
If you want a fat library, the perform the following steps:
export KERNL_BITS=64
./configure ...
...

mv libcrypto.a libcrypto-x86_64.a 
mv libssl.a libssl-x86_64.a

make clean && make dclean
export KERNL_BITS=32
./configure ...
...

mv libcrypto.a libcrypto-i386.a 
mv libssl.a libssl-i386.a

lipo -create libcrypto-x86_64.a libcrypto-i386.a -output libcrypto.a
lipo -create libssl-x86_64.a libssl-i386.a -output libssl.a

sudo make install

Lather, rinse and repeat for the dylibs before running make install. Note: i386 should not use enable-ec_nistp_64_gcc_128 (IIRC).

When you need to use OpenSSL in your programs, you will use /usr/local/ssl/include as a header path, and /usr/local/ssl/lib as a library path.
As a matter of fact, I don't use library paths because OS X's linker ignores your request for static linking. I use static linking to avoid LD_PRELOAD and DYLD_LIBRARY_PATH problems and tricks (like compiling against 1.0.2 in /usr/local/ssl, but loading 0.9.8 at runtime in /usr/lib). So my compile like looks something like:
gcc foo.c bar.c /usr/local/ssl/lib/libcrypto.a -o foobar.exe

An archive is a collection of object files (*.o), so you specify them just like any other object file.
","7579","<macos><openssl><sha256><ecdsa>","2","1","3","2017-12-07 17:09:30","","2","","","","","2015-02-21 15:07:11",""
"28647272","OpenSSL on Mac OS X for SHA-256 signature algorithm","I want to create a self-signed certificate (root ca) with OpenSSL. The signature algorithm needs to be a ECDSA signature with SHA-256 hash. 
On my Mac OS X (Yosemite), I have OpenSSL version 0.9.8zc (from Oct 15, 2014) installed. When I call openssl ciphers -v on the command line, it seems that my current OpenSSL version does not support SHA2 (with SHA-256 etc.). 
DHE-RSA-AES256-SHA      SSLv3 Kx=DH       Au=RSA  Enc=AES(256)  Mac=SHA1
DHE-DSS-AES256-SHA      SSLv3 Kx=DH       Au=DSS  Enc=AES(256)  Mac=SHA1
AES256-SHA              SSLv3 Kx=RSA      Au=RSA  Enc=AES(256)  Mac=SHA1
EDH-RSA-DES-CBC3-SHA    SSLv3 Kx=DH       Au=RSA  Enc=3DES(168) Mac=SHA1
EDH-DSS-DES-CBC3-SHA    SSLv3 Kx=DH       Au=DSS  Enc=3DES(168) Mac=SHA1
DES-CBC3-SHA            SSLv3 Kx=RSA      Au=RSA  Enc=3DES(168) Mac=SHA1
DES-CBC3-MD5            SSLv2 Kx=RSA      Au=RSA  Enc=3DES(168) Mac=MD5 
DHE-RSA-AES128-SHA      SSLv3 Kx=DH       Au=RSA  Enc=AES(128)  Mac=SHA1
DHE-DSS-AES128-SHA      SSLv3 Kx=DH       Au=DSS  Enc=AES(128)  Mac=SHA1
AES128-SHA              SSLv3 Kx=RSA      Au=RSA  Enc=AES(128)  Mac=SHA1
DHE-RSA-SEED-SHA        SSLv3 Kx=DH       Au=RSA  Enc=SEED(128) Mac=SHA1
DHE-DSS-SEED-SHA        SSLv3 Kx=DH       Au=DSS  Enc=SEED(128) Mac=SHA1
SEED-SHA                SSLv3 Kx=RSA      Au=RSA  Enc=SEED(128) Mac=SHA1
RC2-CBC-MD5             SSLv2 Kx=RSA      Au=RSA  Enc=RC2(128)  Mac=MD5 
RC4-SHA                 SSLv3 Kx=RSA      Au=RSA  Enc=RC4(128)  Mac=SHA1
RC4-MD5                 SSLv3 Kx=RSA      Au=RSA  Enc=RC4(128)  Mac=MD5 
RC4-MD5                 SSLv2 Kx=RSA      Au=RSA  Enc=RC4(128)  Mac=MD5 
EDH-RSA-DES-CBC-SHA     SSLv3 Kx=DH       Au=RSA  Enc=DES(56)   Mac=SHA1
EDH-DSS-DES-CBC-SHA     SSLv3 Kx=DH       Au=DSS  Enc=DES(56)   Mac=SHA1
DES-CBC-SHA             SSLv3 Kx=RSA      Au=RSA  Enc=DES(56)   Mac=SHA1
DES-CBC-MD5             SSLv2 Kx=RSA      Au=RSA  Enc=DES(56)   Mac=MD5 
EXP-EDH-RSA-DES-CBC-SHA SSLv3 Kx=DH(512)  Au=RSA  Enc=DES(40)   Mac=SHA1 export
EXP-EDH-DSS-DES-CBC-SHA SSLv3 Kx=DH(512)  Au=DSS  Enc=DES(40)   Mac=SHA1 export
EXP-DES-CBC-SHA         SSLv3 Kx=RSA(512) Au=RSA  Enc=DES(40)   Mac=SHA1 export
EXP-RC2-CBC-MD5         SSLv3 Kx=RSA(512) Au=RSA  Enc=RC2(40)   Mac=MD5  export
EXP-RC2-CBC-MD5         SSLv2 Kx=RSA(512) Au=RSA  Enc=RC2(40)   Mac=MD5  export
EXP-RC4-MD5             SSLv3 Kx=RSA(512) Au=RSA  Enc=RC4(40)   Mac=MD5  export
EXP-RC4-MD5             SSLv2 Kx=RSA(512) Au=RSA  Enc=RC4(40)   Mac=MD5  export

The latest version of OpenSSL seems to be 1.0.2, but the source available at https://www.openssl.org/source/ does not seem to be compilable for OS X, since the file ""Install.MacOS"" says right at the beginning:
""Thanks to Roy Wood  initial support for Mac OS (pre
X) is now provided.""
My try to install it nevertheless resulted in some errors on the command line.
Can anyone tell me if it is somehow possible to use the SHA-256 signature algorithm with an OpenSSL installation on Yosemite? It seems odd to me if this would not be possible, but I am no expert in this field.
Hoping for a good hint!
","On OSX El Capitan

Install homebrew (see http://brew.sh/index.html)
Install newest openssl version with command brew install openssl
Run /usr/local/opt/openssl/bin/openssl sha256

Brew now refuses to link openssh to /usr/local/bin even if you use the --force option so you have to run openssh from the brew install location or link to it yourself.
","7579","<macos><openssl><sha256><ecdsa>","2","0","3","2017-12-07 17:09:30","","2","","","","","2015-02-21 15:07:11",""
"3026762","Is it okay to truncate a SHA256 hash to 128 bits?","MD5 and SHA-1 hashes have weaknesses against collision attacks. SHA256 does not but it outputs 256 bits. Can I safely take the first or last 128 bits and use that as the hash? I know it will be weaker (because it has less bits) but otherwise will it work?
Basically I want to use this to uniquely identify files in a file system that might one day contain a trillion files. I'm aware of the birthday problem and a 128 bit hash should yield about a 1 in a trillion chance on a trillion files that there would be two different files with the same hash. I can live with those odds.
What I can't live with is if somebody could easily, deliberately, insert a new file with the same hash and the same beginning characters of the file. I believe in MD5 and SHA1 this is possible.
","Yes, that will work.
For the record, there are known in-use collision attacks against MD5, but the SHA-1 attacks are at this point completely theoretical (no SHA-1 collision has ever been found... yet).
","7516","<hash><md5><sha256><sha>","14","0","3","2010-06-11 23:24:53","","5","1","","","","2010-06-11 22:54:43",""
"3026762","Is it okay to truncate a SHA256 hash to 128 bits?","MD5 and SHA-1 hashes have weaknesses against collision attacks. SHA256 does not but it outputs 256 bits. Can I safely take the first or last 128 bits and use that as the hash? I know it will be weaker (because it has less bits) but otherwise will it work?
Basically I want to use this to uniquely identify files in a file system that might one day contain a trillion files. I'm aware of the birthday problem and a 128 bit hash should yield about a 1 in a trillion chance on a trillion files that there would be two different files with the same hash. I can live with those odds.
What I can't live with is if somebody could easily, deliberately, insert a new file with the same hash and the same beginning characters of the file. I believe in MD5 and SHA1 this is possible.
","But is it worth it? If you have a hash for each file, then you essentially have an overhead for each file. Let's say that each file must take up at least 512 bytes (a typical disk sector) and that you're storing these hashes compactly enough so as to not have each hash take up much more than the hash size.
So, even if all your files are 512 bytes, the smallest, you're talking either 16 / 512 = 3.1% or 32 / 512 = 6.3%. In reality, I'd bet your average file size is higher (unless all your files are 1 sector...), so that overhead would be less.
Now, the amount of space you need for hashes scales linearly with the number of files you have. Is that extra space worth that much? Even if you had your mentioned trillion files - that's 1 000 000 000 000 * 16 = ~29 TiB, which is a lot of space, but keep in mind: your data would be 1 000 000 000 000 * 512 = 465 TiB. The numbers are worthless, really, since it's still 3% or 6% overhead. But at this level, where you have a half petabyte of storage, does 15 terabytes matter? At any level, does a 3% savings mean anything? And remember, if they're larger, you save less. (Which, they probably are: good luck getting a 512 byte sector size at that hard disk size.)
So, is this 3% or less disk savings worth the potential risk in security. (Which I'll leave unanswered, as it's waaay not my cup of tea.)
Alternatively, could you, say, group files together in some logical fashion, so that you have less files? (I mean, if you have trillions of 512 byte files, do you really want to hash every byte on disk?)
","7516","<hash><md5><sha256><sha>","14","4","3","2010-06-11 23:24:53","","5","1","","","","2010-06-11 22:54:43",""
"3026762","Is it okay to truncate a SHA256 hash to 128 bits?","MD5 and SHA-1 hashes have weaknesses against collision attacks. SHA256 does not but it outputs 256 bits. Can I safely take the first or last 128 bits and use that as the hash? I know it will be weaker (because it has less bits) but otherwise will it work?
Basically I want to use this to uniquely identify files in a file system that might one day contain a trillion files. I'm aware of the birthday problem and a 128 bit hash should yield about a 1 in a trillion chance on a trillion files that there would be two different files with the same hash. I can live with those odds.
What I can't live with is if somebody could easily, deliberately, insert a new file with the same hash and the same beginning characters of the file. I believe in MD5 and SHA1 this is possible.
","Yeah that will work. Theoretically it's better to XOR the two halves together but even truncated SHA256 is stronger than MD5. You should still consider the result a 128 bit hash rather than a 256 bit hash though.
My particular recommendation in this particular case is to store and reference using HASH + uniquifier where uniquifier is the count of how many distinct files you've seen with this hash before. This way you don't absolutely fall down flat if somebody tries to store future discovered collision vectors for SHA256.
","7516","<hash><md5><sha256><sha>","14","8","3","2010-06-11 23:24:53","","5","1","","","","2010-06-11 22:54:43",""
"26133529","oclHashcat SHA256 Line Length Exception","I am running this command in my Windows cmd:
oclHashcat.exe -m 1400 hash.txt

My hash is:
$5$JLj/jsZd$hOjXUxfucZeTUYE/MB2WMnY75/Cty8V9Z8/sslogefB

I keep getting an error ""Line-Length exception"" and I am not sure why.
","That hash you posted is sha256crypt. To make hashcat load it you need to use -m 7400 instead of -m 1400.
Here's a sample list of hashes in the way how hashcat wants to load them: https://hashcat.net/wiki/doku.php?id=example_hashes
You can typically recognize those crypt() based hashes if you see this format:
$id$salt$encrypted
Where ID can be one of

1  MD5, default 1000 iterations
2a/2y/2x Blowfish, default 64 iterations
5  SHA-256, default 5000 iterations
6  SHA-512, default 5000 iterations

There are some more, but those are the most common. 
There's also an optional round= field on which the user can defines the number of iterations different to the default value. In that case, the hash looks like this:
$id$rounds=XXX$salt$encrypted
Hashcat accepts user-defined rounds as well
","7488","<linux><hash><sha><sha256><ocl>","1","4","1","2014-10-01 17:05:13","26146691","0","1","","","","2014-10-01 03:10:58",""
"11784432","HMAC SHA256 hex digest in javascript","I'm trying to write a javascript lib to push events to Pusher.
In the environment I'm using I can't use nodejs, so no require('crypto') ... or at least I do not know of a way of using it outside node.
I'm following the example guide here: http://pusher.com/docs/rest_api; I'm stuck in the part 
where it says I should generate the HMAC SHA256 hex digest.
I am using this library http://code.google.com/p/crypto-js/#HMAC
So, following the instructions on Pusher i wrote
CryptoJS.HmacSHA256(
  'POST\n/apps/3/channels/project-3/events\nauth_key=278d425bdf160c739803&auth_timestamp=1272044395&auth_version=1.0&body_md5=7b3d404f5cde4a0b9b8fb4789a0098cb&name=foo',
  '7ad3773142a6692b25b8'
);

But that's giving me 20b132baa2aaf44ea1fab814f0788aaa44eed23a2d252c72e4dc2aaea0d6ac24 instead of b3152b2bb5a5b0bae66435a498797aa763e9b74f86cc97c9175424f8308b2f80.
What is bothering me is that I didn't do the ""hex digest"" part, so maybe that's what I'm missing, but I couldn't find a suitable lib to do this in javascript.
Do you spot any errors in what I did? Do you have a library to suggest?
Thanks in advance for any help.
","I was struggling with doing the exact same thing. Pusher's documentation should really be clearer about this issue. It turns out it's not the encyption methods. It's the order that you list your parameters. The body of your message has to be exactly formatted like this:
{""data"":""{\""message\"":\""hello world\""}"",""name"":""my_event"",""channel"":""test_channel""}
Data has to be first, then message, followed by name and then finally the channel name.
Then when you create your auth signature you have to list your parameters as so:
POST\n/apps/3/events\nauth_key=278d425bdf160c739803&auth_timestamp=1353088179&auth_version=1.0&body_md5=ec365a775a4cd0599faeb73354201b6f
So auth key is first, then the timestamp, followed by the auth version and finally the body md5.
I got it to work once I followed this exact pattern. Hopefully this helps!
","7355","<javascript><sha256><hmac>","3","2","1","2015-12-13 06:37:03","","6","","168868","","2012-08-03 01:01:27","2012-08-02 19:26:18",""
"9744392","How to get Ruby generated HMAC for SHA256 that is url safe to match Java?","I have a tomcat server running some Java code that lets users authenticate using an API key.  The request uses an HMAC created with SHA256.  I have a Ruby client that I am using to make the request and since I'm new to encryption I am having a difficult time getting it to generate a matching HMAC.  I have tried not making it URL safe, and that matches.  So I'm really wondering is how I can get the Ruby client to match with the URL safe version (since I can't change the Java code).  It's just got an extra = character at the end.  Thanks in advance for any help.
For Ruby I am using 1.9.3 and for Java I am using 6u31 along with the commons-codec-1.6.jar library from apache.
Code
Ruby:
require ""openssl""
require ""base64""

json_str = ""{'community':'LG7B734A', 'login_id':'user1', 'time':'1331928899'}""
digest = OpenSSL::Digest::Digest.new(""sha256"")
key = [ ""4cc45e4258121c3fec84147673e1bd88e51b1c177aafcfa2da72bd4655c9f933"" ]
hmac = OpenSSL::HMAC.digest(digest, key.pack(""H*""), json_str)

encoded_url_safe = Base64.urlsafe_encode64(hmac)
encoded = Base64.encode64(hmac)

puts(""Encoded (Url Safe): "" + encoded_url_safe)
puts(""Encoded           : "" + encoded)

Java:
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.binary.Hex;

import javax.crypto.spec.SecretKeySpec;
import javax.crypto.Mac;

public class ExampleHMAC
{
    public static void main(String[] args) throws Exception
    {
        String key = ""4cc45e4258121c3fec84147673e1bd88e51b1c177aafcfa2da72bd4655c9f933"";
        byte[] keyBytes = Hex.decodeHex(key.toCharArray());

        SecretKeySpec keySpec = new SecretKeySpec(keyBytes, ""HmacSHA256"");
        Mac mac = Mac.getInstance(""HmacSHA256"");
        mac.init(keySpec);

        String jsonStr = ""{'community':'LG7B734A', 'login_id':'user1', 'time':'1331928899'}"";
        byte[] hmacBytes = mac.doFinal(jsonStr.getBytes());

        String encodedUrlSafe = Base64.encodeBase64URLSafeString(hmacBytes);
        String encoded = Base64.encodeBase64String(hmacBytes);

        System.out.println(""Encoded (Url Safe): "" + encodedUrlSafe);
        System.out.println(""Encoded           : "" + encoded);
    }
}

Output
Ruby:
Encoded (Url Safe): QgYLqGm1M4qozdEjGC_CnJ8CdBm2jQpsU85kSWFcjKM=
Encoded           : QgYLqGm1M4qozdEjGC/CnJ8CdBm2jQpsU85kSWFcjKM=

Java:
Encoded (Url Safe): QgYLqGm1M4qozdEjGC_CnJ8CdBm2jQpsU85kSWFcjKM
Encoded           : QgYLqGm1M4qozdEjGC/CnJ8CdBm2jQpsU85kSWFcjKM=

","Ruby does not remove the trailing '=' - it is not an absolute requirement, as you can read in RFC 4648 it just states that removing them might be desirable in certain applications. But other than that it is guaranteed that Ruby's URL-safe encoding will be exactly the same as Java's.
So the only thing for you to do is strip off the trailing '==', you could for example use a regex:
encoded_url_safe_.gsub!(/=+$/, """")

","7131","<java><ruby><sha256><hmac>","11","6","1","2012-03-17 03:51:45","9747091","0","3","","","","2012-03-16 20:55:03",""
"11628256","PBKDF2 with SHA256 on android","I want to generate a derived hash of a password using PBKDF2 with SHA256. with this SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"") this work but it use SHA1.
With SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA256"") (or SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA256"",""SC"") when with spongycastle) i have an error.
How can i succeed to generate a hash using PBKDF2WithHmacSHA256?
","Bouncy Castle doesn't support PBKDF2WithHmacSHA256 so this won't work. You can try implementing it yourself. Look at the source of PKCS5S2ParametersGenerator.java and replace SHA1Digest with SHA256Digest. 
","7123","<android><encryption><sha256><pbkdf2>","7","2","2","2013-03-08 21:06:21","15303291","0","5","929227","","2012-07-24 12:54:33","2012-07-24 09:48:12",""
"11628256","PBKDF2 with SHA256 on android","I want to generate a derived hash of a password using PBKDF2 with SHA256. with this SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"") this work but it use SHA1.
With SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA256"") (or SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA256"",""SC"") when with spongycastle) i have an error.
How can i succeed to generate a hash using PBKDF2WithHmacSHA256?
","If you use version 1.47 or higher of SpongyCastle, you can invoke PBKDF2WithHmacSHA256 directly:
PKCS5S2ParametersGenerator generator = new PKCS5S2ParametersGenerator(new SHA256Digest());
generator.init(PBEParametersGenerator.PKCS5PasswordToUTF8Bytes(password), salt, iterations);
KeyParameter key = (KeyParameter)generator.generateDerivedMacParameters(keySizeInBits);

In versions of BC < 1.47, you could not specify SHA256 digest and it defaulted to SHA1.
","7123","<android><encryption><sha256><pbkdf2>","7","18","2","2013-03-08 21:06:21","15303291","0","5","929227","","2012-07-24 12:54:33","2012-07-24 09:48:12",""
"22801373","How to hash a string using SHA-256","I am trying to hash my users password which is of string type using SHA-256
I am using SHA-256 to hash the string using the following method
String text = ""abc"";
MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
byte[] hash = digest.digest(text.getBytes(""UTF-8""));

To convert the btye array to string , I used the following method
String doc2 = new String(hash, ""UTF-8"");

When i print doc2 to output , i get rubbish
�x����AA@�]�""#�a��z���a�

What am i doing wrong ??? How do i hash a string using SHA-256  and convert it back to string ??
","this will pring hex representation of hash
String s = DatatypeConverter.printHexBinary(hash)

you cannot get original string from hash
","7111","<java><string><hash><sha256>","2","8","2","2014-04-03 06:15:08","22801410","1","4","-1","","2017-05-23 12:33:51","2014-04-02 04:08:23",""
"22801373","How to hash a string using SHA-256","I am trying to hash my users password which is of string type using SHA-256
I am using SHA-256 to hash the string using the following method
String text = ""abc"";
MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
byte[] hash = digest.digest(text.getBytes(""UTF-8""));

To convert the btye array to string , I used the following method
String doc2 = new String(hash, ""UTF-8"");

When i print doc2 to output , i get rubbish
�x����AA@�]�""#�a��z���a�

What am i doing wrong ??? How do i hash a string using SHA-256  and convert it back to string ??
","SHA256 returns pure binary output, with all values from 00 to FF essentially equally likely for each character.
For text output, you'll need to convert it to a text form, like Base64 encoding
byte[] encodedBytes = Base64.encodeBase64(""Test"".getBytes());
System.out.println(""encodedBytes "" + new String(encodedBytes));

The only way to go from a cryptographically sound hash (or most hashes, even cryptographically unsound ones) back to the original input is to apply the hash to input after input until you get the same result - that's either the original input, or a collision.
","7111","<java><string><hash><sha256>","2","1","2","2014-04-03 06:15:08","22801410","1","4","-1","","2017-05-23 12:33:51","2014-04-02 04:08:23",""
"5017232","Using SHA-256 for CodeIgniter hashing","CodeIgniter uses MD5 or SHA1 for its hashing:
$str = do_hash($str); // SHA1

$str = do_hash($str, 'md5'); // MD5 

But, my project requires SHA-256. How would I resolve this?
","Can you not just call php's own hash()?
$str = hash ( ""sha256"", $str );

","7091","<php><security><codeigniter><hash><sha256>","3","9","1","2011-02-16 14:04:23","5017390","3","3","","","","2011-02-16 13:48:15",""
"3444503","Glassfish Security - jdbcRealm: How to configure login with SHA-256 digest","I use jdbcRealm for security in my glassfish v3.0.1 b22. It is set up so that it use the USER table inside my database for authentication by following this blog: http://blogs.oracle.com/foo/entry/mort_learns_jdbc_realm_authentication. I got it working fine, if I leave the digest algorithm as plain text. However when i try to use SHA-256 for digest algorithm, it stop working. 
What I did is specify in Glassfish - Security - Realm - jdbcRealm - digest that I want SHA-256 (I just type SHA-256 inside digest field). Then I wrote a simple Java program to convert password text into SHA-256 hash. I then paste that hash inside my password field in the database. By the way, password field is type varchar(30). I cant log in anymore. One thing I notice that my simple Java program generated different hash every time for the same text field.
Below are my simple java program:
        MessageDigest md = MessageDigest.getInstance(""SHA-256"");
        String text = ""admin"";
        md.update(text.getBytes(""UTF-8""));
        byte[] digest = md.digest();
        System.out.println(digest.toString());

","The jdbcRealm allows encoding values of hex or base64. You need to specify one of these in your realm configuration and in your code, convert the byte array into one of these formats:
Base64:
import com.sun.org.apache.xml.internal.security.utils.Base64;
...
byte[] digest = md.digest();
System.out.println(Base64.encode(digest));

Hex:
...
byte[] digest = md.digest();
StringBuffer sb = new StringBuffer();
for (int i = 0; i < digest.length; i++) {
    String hex = Integer.toHexString(0xff & digest[i]);
    if (hex.length() == 1) sb.append('0');
    sb.append(hex);
}
System.out.println(sb.toString());


btw, password field is type varchar(30)

You'll need to increase the size of your password field. SHA-256 base64 and hex values are 45 and 64 characters in length, respectively.
","6982","<java><glassfish><digest><sha256><jdbcrealm>","10","17","1","2013-12-04 21:40:24","3451928","1","11","1906862","","2013-12-04 21:40:24","2010-08-09 21:53:31",""
"36162622","How do I generate a hash code with hash sha256 in java?","I would like to know the code to do this in java please? 
This is what i have so far but it does not work?
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import static jdk.nashorn.tools.ShellFunctions.input;

public class Sha256hash 
{

    public static String main(String[] args) throws NoSuchAlgorithmException 
    {
        MessageDigest md = MessageDigest.getInstance(""SHA1"");
            md.reset();
            byte[] buffer = input.getBytes(""UTF-8"");
            md.update(buffer);
            byte[] digest = md.digest();

            String hexStr = """";
            for (int i = 0; i < digest.length; i++) {
                hexStr +=  Integer.toString( ( digest[i] & 0xff ) + 0x100, 16).substring( 1 );
            }
            return hexStr;
    }

}

","The main entry point can not return String. Furthermore, input is not declared. You maybe want to change the name of your function to generate with input as a parameter.
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import static jdk.nashorn.tools.ShellFunctions.input;

public class Sha256hash 
{

    public static String generate(String input) throws NoSuchAlgorithmException 
    {
        MessageDigest md = MessageDigest.getInstance(""SHA1"");
            md.reset();
            byte[] buffer = input.getBytes(""UTF-8"");
            md.update(buffer);
            byte[] digest = md.digest();

            String hexStr = """";
            for (int i = 0; i < digest.length; i++) {
                hexStr +=  Integer.toString( ( digest[i] & 0xff ) + 0x100, 16).substring( 1 );
            }
            return hexStr;
    }

}

This example works for me returning c3499c2729730a7f807efb8676a92dcb6f8a3f8f as result of processing the string example:
import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class Sha256hash 
{

    public static String generate(String input) throws NoSuchAlgorithmException, UnsupportedEncodingException 
    {
        MessageDigest md = MessageDigest.getInstance(""SHA1"");
            md.reset();
            byte[] buffer = input.getBytes(""UTF-8"");
            md.update(buffer);
            byte[] digest = md.digest();

            String hexStr = """";
            for (int i = 0; i < digest.length; i++) {
                hexStr +=  Integer.toString( ( digest[i] & 0xff ) + 0x100, 16).substring( 1 );
            }
            return hexStr;
    }

}

Main:
import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;

public class Tester {
    public static void main(String[] args) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        String someText = ""example"";
        System.out.println(Sha256hash.generate(someText));
    }
}

Finally, as Elliott has pointed out If you want to use SHA-256 you should change MessageDigest.getInstance(""SHA1""); to MessageDigest.getInstance(""SHA256""); Right now you are using SHA-1. Also pointed by Elliot you should use StringBuilder in the loop for improved efficiency.
","6884","<java><hash><sha256>","0","1","2","2016-03-22 19:25:15","36163051","6","3","34397","","2016-03-22 18:44:07","2016-03-22 18:41:16",""
"36162622","How do I generate a hash code with hash sha256 in java?","I would like to know the code to do this in java please? 
This is what i have so far but it does not work?
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import static jdk.nashorn.tools.ShellFunctions.input;

public class Sha256hash 
{

    public static String main(String[] args) throws NoSuchAlgorithmException 
    {
        MessageDigest md = MessageDigest.getInstance(""SHA1"");
            md.reset();
            byte[] buffer = input.getBytes(""UTF-8"");
            md.update(buffer);
            byte[] digest = md.digest();

            String hexStr = """";
            for (int i = 0; i < digest.length; i++) {
                hexStr +=  Integer.toString( ( digest[i] & 0xff ) + 0x100, 16).substring( 1 );
            }
            return hexStr;
    }

}

","I'm still unclear whether you want SHA-1 or SHA-256, so let's abstract the problem; firstly, an encode method to take a byte[] and return the hex (don't worry, you already wrote it; but I would prefer a StringBuilder over String concatenation. Java String is immutable, so you're creating garbage for later garbage collection with +) -
private static String encodeHex(byte[] digest) {
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < digest.length; i++) {
        sb.append(Integer.toString((digest[i] & 0xff) + 0x100, 16).substring(1));
    }
    return sb.toString();
}

Next, we can create a method that takes the algorithm name and the String to digest and returns that digest. Like
public static String digest(String alg, String input) {
    try {
        MessageDigest md = MessageDigest.getInstance(alg);
        byte[] buffer = input.getBytes(""UTF-8"");
        md.update(buffer);
        byte[] digest = md.digest();
        return encodeHex(digest);
    } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {
        e.printStackTrace();
        return e.getMessage();
    }
}

Then we can get a SHA-1 or a SHA-256 hash like
public static void main(String[] args) {
    System.out.println(digest(""SHA1"", """"));
    System.out.println(digest(""SHA-256"", """"));
}

Which outputs (as expected)
da39a3ee5e6b4b0d3255bfef95601890afd80709
e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855

","6884","<java><hash><sha256>","0","3","2","2016-03-22 19:25:15","36163051","6","3","34397","","2016-03-22 18:44:07","2016-03-22 18:41:16",""
"12708732","Generating a base64 encoded hash from CLI to match Java","I have a java code base that generates an URL safe base64 encoded hash from a string, and wondering if / how this would be possible with linux command line tools. I'm guessing the problem with what I am doing here is with the character set / encoding or to do with converting the string to a byte array. Java code:
MessageDigest md = MessageDigest.getInstance(""SHA-256"");
byte[] digest = md.digest(""testString"".getBytes());
// ^^ this is where the difference is?
String b64url = Base64.encodeBase64URLSafeString(digest);
// b64url: Ss8LOdnEdmcJo2ifVTrAGrVQVF_6RUTfwLLOqC-6AqM

Command line:
echo testString | sha256sum | cut -d"" "" -f1 | base64
# NDgxOGEyY2JkODYwOTY1NjJkODFmYzIwNmQ3ZTYyNWVlNGFjMTU5MmViNTc0MjQwMDQ4OTIzOTBl
# MDQzZTNlYwo=

Is it possible to generate base64 encoded sha256 via cli tools?
","You're base64 encoding a hexadecimal string, not the byte values of the hash, which is the equivalent of:
MessageDigest md = MessageDigest.getInstance(""SHA-256"");
byte[] digest = md.digest(""testString"".getBytes()); // Missing charset
String hex = Hex.encodeHexString(digest);
String base64 = Base64.encodeBase64(hex.getBytes());

","6850","<java><base64><gnu><sha256>","1","1","2","2012-10-03 13:04:24","12708980","1","3","","","","2012-10-03 12:42:18",""
"12708732","Generating a base64 encoded hash from CLI to match Java","I have a java code base that generates an URL safe base64 encoded hash from a string, and wondering if / how this would be possible with linux command line tools. I'm guessing the problem with what I am doing here is with the character set / encoding or to do with converting the string to a byte array. Java code:
MessageDigest md = MessageDigest.getInstance(""SHA-256"");
byte[] digest = md.digest(""testString"".getBytes());
// ^^ this is where the difference is?
String b64url = Base64.encodeBase64URLSafeString(digest);
// b64url: Ss8LOdnEdmcJo2ifVTrAGrVQVF_6RUTfwLLOqC-6AqM

Command line:
echo testString | sha256sum | cut -d"" "" -f1 | base64
# NDgxOGEyY2JkODYwOTY1NjJkODFmYzIwNmQ3ZTYyNWVlNGFjMTU5MmViNTc0MjQwMDQ4OTIzOTBl
# MDQzZTNlYwo=

Is it possible to generate base64 encoded sha256 via cli tools?
","You can use a StringBuilder to turn your hex into a meaningful string:
MessageDigest md = MessageDigest.getInstance(""SHA-256"");
byte[] digest = md.digest(""testString"".getBytes());
StringBuilder sb = new StringBuuilder();
for (byte b : digest) {
    sb.append(Integer.toHexString(b & 0xff));
}
String base64 = Base64.encodeBase64(sb.toString());

Combined with not including the newline in the echo command, works here ...
","6850","<java><base64><gnu><sha256>","1","1","2","2012-10-03 13:04:24","12708980","1","3","","","","2012-10-03 12:42:18",""
"24429734","why PHP's hash_hmac('sha256') gives different result than java sha256_HMAC","in PHP I have the following function:
base64_encode(hash_hmac('sha256', $data, $secret, false));

I'm trying to create a function in Java that will give the same result for the same ""data"" and ""secret"" parameters. 
I tried to use this function:
public static String base64sha256(String data, String secret) {
    Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
    SecretKeySpec secret_key = new SecretKeySpec(secret.getBytes(), ""HmacSHA256"");
    sha256_HMAC.init(secret_key);
    byte[] res = sha256_HMAC.doFinal(data.getBytes());
    return Base64.encodeToString(res, Base64.NO_WRAP);
}

But I get different results for the same input

Update: This function works. Enjoy.
public static String base64sha256(String data, String secret) {
    String hash = null;
    try {
        Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
        SecretKeySpec secret_key = new SecretKeySpec(secret.getBytes(""UTF-8""), ""HmacSHA256"");
        sha256_HMAC.init(secret_key);
        byte[] res = sha256_HMAC.doFinal(data.getBytes(""UTF-8""));
        hash = getHex(res);
        hash = Base64.encodeToString(hash.getBytes(""UTF-8""), Base64.NO_WRAP);
    } catch (Exception e){}
    return hash;
}

static final String HEXES = ""0123456789abcdef"";
public static String getHex( byte [] raw ) {
    if ( raw == null ) {
        return null;
    }
    final StringBuilder hex = new StringBuilder( 2 * raw.length );
    for ( final byte b : raw ) {
        hex.append(HEXES.charAt((b & 0xF0) >> 4))
                .append(HEXES.charAt((b & 0x0F)));
    }
    return hex.toString();
}

","The output of the php function are lowercase hex digits when the fourth parameter is false. Your second java version however produces uppercase hex digits. Either correct the case difference or you could change the fourth parameter of hash_hmac to true and it will probably match with your first Java version.
","6816","<java><php><sha256>","7","4","3","2016-07-27 22:40:59","24431502","5","5","1934296","","2014-06-26 14:00:37","2014-06-26 11:49:22",""
"24429734","why PHP's hash_hmac('sha256') gives different result than java sha256_HMAC","in PHP I have the following function:
base64_encode(hash_hmac('sha256', $data, $secret, false));

I'm trying to create a function in Java that will give the same result for the same ""data"" and ""secret"" parameters. 
I tried to use this function:
public static String base64sha256(String data, String secret) {
    Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
    SecretKeySpec secret_key = new SecretKeySpec(secret.getBytes(), ""HmacSHA256"");
    sha256_HMAC.init(secret_key);
    byte[] res = sha256_HMAC.doFinal(data.getBytes());
    return Base64.encodeToString(res, Base64.NO_WRAP);
}

But I get different results for the same input

Update: This function works. Enjoy.
public static String base64sha256(String data, String secret) {
    String hash = null;
    try {
        Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
        SecretKeySpec secret_key = new SecretKeySpec(secret.getBytes(""UTF-8""), ""HmacSHA256"");
        sha256_HMAC.init(secret_key);
        byte[] res = sha256_HMAC.doFinal(data.getBytes(""UTF-8""));
        hash = getHex(res);
        hash = Base64.encodeToString(hash.getBytes(""UTF-8""), Base64.NO_WRAP);
    } catch (Exception e){}
    return hash;
}

static final String HEXES = ""0123456789abcdef"";
public static String getHex( byte [] raw ) {
    if ( raw == null ) {
        return null;
    }
    final StringBuilder hex = new StringBuilder( 2 * raw.length );
    for ( final byte b : raw ) {
        hex.append(HEXES.charAt((b & 0xF0) >> 4))
                .append(HEXES.charAt((b & 0x0F)));
    }
    return hex.toString();
}

","For someone who might be facing a slight change (not working) in Java result compared to PHP, my issue was in returning the hash from HmacSHA256 as String, while you should return it and pass to Hex as byte[].
Here are the working methods to simulate PHP's hash_hmac()
public String hashValue(String message) {
    byte[] hash = toHmacSHA256(message);
    String hashHexed = toHex(hash);
    return hashHexed;
}

private String toHex(byte[] value) {
    String hexed = String.format(""%040x"", new BigInteger(1, value));
    return hexed;
}

private byte[] toHmacSHA256(String value) {
    byte[] hash = null;
    try {
        SecretKey secretKey = new SecretKeySpec(PRIVATE_KEY.getBytes(""UTF-8""), ""HmacSHA256"");
        Mac mac = Mac.getInstance(""HmacSHA256"");
        mac.init(secretKey);
        hash = mac.doFinal(value.getBytes(""UTF-8""));

    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (InvalidKeyException e) {
        e.printStackTrace();
    } catch (UnsupportedEncodingException e) {
        e.printStackTrace();
    }

    return hash;
}

","6816","<java><php><sha256>","7","0","3","2016-07-27 22:40:59","24431502","5","5","1934296","","2014-06-26 14:00:37","2014-06-26 11:49:22",""
"24429734","why PHP's hash_hmac('sha256') gives different result than java sha256_HMAC","in PHP I have the following function:
base64_encode(hash_hmac('sha256', $data, $secret, false));

I'm trying to create a function in Java that will give the same result for the same ""data"" and ""secret"" parameters. 
I tried to use this function:
public static String base64sha256(String data, String secret) {
    Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
    SecretKeySpec secret_key = new SecretKeySpec(secret.getBytes(), ""HmacSHA256"");
    sha256_HMAC.init(secret_key);
    byte[] res = sha256_HMAC.doFinal(data.getBytes());
    return Base64.encodeToString(res, Base64.NO_WRAP);
}

But I get different results for the same input

Update: This function works. Enjoy.
public static String base64sha256(String data, String secret) {
    String hash = null;
    try {
        Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
        SecretKeySpec secret_key = new SecretKeySpec(secret.getBytes(""UTF-8""), ""HmacSHA256"");
        sha256_HMAC.init(secret_key);
        byte[] res = sha256_HMAC.doFinal(data.getBytes(""UTF-8""));
        hash = getHex(res);
        hash = Base64.encodeToString(hash.getBytes(""UTF-8""), Base64.NO_WRAP);
    } catch (Exception e){}
    return hash;
}

static final String HEXES = ""0123456789abcdef"";
public static String getHex( byte [] raw ) {
    if ( raw == null ) {
        return null;
    }
    final StringBuilder hex = new StringBuilder( 2 * raw.length );
    for ( final byte b : raw ) {
        hex.append(HEXES.charAt((b & 0xF0) >> 4))
                .append(HEXES.charAt((b & 0x0F)));
    }
    return hex.toString();
}

","If trying to match output of drupal_hmac_base64 with Java 8, you can use the following code:
final String ALGORITHM = ""HmacSHA256"";
        Mac mac = Mac.getInstance(ALGORITHM);
        SecretKeySpec secret = new SecretKeySpec(authorizationKey.getBytes(), ALGORITHM);

        mac.init(secret);
        byte[] digest = mac.doFinal(body.getBytes());

        hash = Base64.getUrlEncoder().withoutPadding().encodeToString(digest);

        return signature.equals(hash);

Note that drupal returns a hash using raw binary data (3rd parameter TRUE). Also, base64 encoding in PHP matches the URL and Filename safe base64 encoder in Java https://docs.oracle.com/javase/8/docs/api/java/util/Base64.html#url.
","6816","<java><php><sha256>","7","1","3","2016-07-27 22:40:59","24431502","5","5","1934296","","2014-06-26 14:00:37","2014-06-26 11:49:22",""
"46453614","Decrypt SHA256 hash to original string?","Is it possible to take an original hash value, and then decode it back to the original string?
hash('sha256', $login_password_for_login) gets me a hash, as shown below, but I'd like to go from the hash value back to the original string.
With $login_password_for_login = 12345, the hash function gives me this: 
 5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5

I'd like to be able to retrieve the original number or string that I had for the login password.  How do I reverse the hash and get that original string?
","You don't 'decrypt' the hashes because hashing is not encryption.
As for undoing the hash function to get the original string, there is no way to go from hash to original item, as hashing is a one-direction action. You can take an item and get a hash, but you can't take the hash and get the original item.
Make a note that hashes should NOT be confused with encryption; encryption is a different process where you can take an item, encrypt it with some type of key (either preshared or symmetric keys like PGP keys), and then later decrypt it.  Hashes do not work that way.

In comments, you indicate that you're trying to save a passcode in the database.  The problem is, you don't want someone who can breach the DB to be immediately be able to decrypt passcodes, which is why hashing is so attractive.
The idea, then, is that you would consider using salted hashes, storing only the salt on a per-user basis in the DB as its own record, and then store the salted hash of their original password string in the database.
Then, to verify a password is entered proper, get the salt from the DB, get the user input for a given password, and then using the salt from the DB, get the salted hash for that input.  Take that resultant hash and compare it to the salted hash stored in the DB.  If they match, you have a validated password; if they don't match, it's invalid.
This way, there's actually no decryption of any passwords readily doable, which means in a data breach situation of your site the passwords are not easily able to be retrieved.  (This doesn't rule out someone breaching your database, copying down the data, and trying to brute-force the passwords, but depending on what you enforce for password complexity and the effort a hacker wants to actually go through to get credentials, this is less likely to happen)
I'd write an example of this in a language I understand, but as you don't define what language you're working with, it's not going to be possible for me to write a useful example for you here.
That said, if you're working with PHP, you may find this document on crackstation.net about doing secure salted password hashing properly; there's already PHP implementations to do this proper so you wouldn't have to write your own code, supposedly.
","6746","<hash><sha256>","-6","1","1","2019-02-23 09:56:44","","1","","603346","","2017-09-27 17:30:28","2017-09-27 17:10:57",""
"27817282","SHA256 giving 44 length output instead 64 length","I am using the following code to perform SHA256.
public static string GenerateSaltedHash(string plainTextString, string saltString)        
        {            
            byte[] salt = Encoding.UTF8.GetBytes(saltString);
            byte[] plainText = Encoding.UTF8.GetBytes(plainTextString);
            HashAlgorithm algorithm = new SHA256Managed();

            byte[] plainTextWithSaltBytes =
              new byte[plainText.Length + salt.Length];

            for (int i = 0; i < plainText.Length; i++)
            {
                plainTextWithSaltBytes[i] = plainText[i];
            }
            for (int i = 0; i < salt.Length; i++)
            {
                plainTextWithSaltBytes[plainText.Length + i] = salt[i];
            }
            byte[] bytes = algorithm.ComputeHash(plainTextWithSaltBytes);
            return Convert.ToBase64String(algorithm.ComputeHash(plainTextWithSaltBytes));                              
        }

As I am using SHA256, I expect the length of the result to be 64. But I am getting 44.
What is the issue? Will the shorter length output impact security?
","Base-64 is 6 bits per character (2^6 = 64).
256 bits / 6 bits per char = 42.6666 char

And that has obviously ended up as 44 due to padding (you will see one or 2 = on the end of the output).
You must be expecting base-16 (AKA hexadecimal) which is 4 bits per character (2^4 = 16). 
256 bits / 4 bits per char = 64 char

For hex use this:
return BitConverter.ToString(bytes).Replace(""-"", string.Empty);

","6661","<c#><sha256>","6","9","1","2019-09-13 05:37:08","27817617","3","","1032372","","2019-09-13 05:37:08","2015-01-07 10:25:44",""
"7358453","How to self generate certificate SHA-256?","I use Bouncy Castle libraries in C# to sign with SHA-256, and I'd like to use them in a test of a self generated certificate instead of a smartcard reader.   
Using the self certificate used before, I have a cryptographic exception:

specified algoritm not valid

If I use a SHA-1 signature with the same self certificate, it goes well. With the smartcard the same code run successfully.
What is the makecert parameter?
","There is no parameter for makecert to use SHA256 has a hashing algorithm for makecert.exe. You can only use -a md5 or -a sha1. 
Note there are also issues with certificates using a SHA256/384/512 hash on Windows XP and Windows 2003 and earlier operating systems (see http://blogs.msdn.com/b/alejacma/archive/2009/01/23/sha-2-support-on-windows-xp.aspx) and this may be what you are seeing.
","6654","<c#><bouncycastle><signature><sha256><makecert>","3","2","2","2013-06-05 09:23:11","16936158","0","2","63550","","2012-01-09 17:43:44","2011-09-09 07:33:45",""
"7358453","How to self generate certificate SHA-256?","I use Bouncy Castle libraries in C# to sign with SHA-256, and I'd like to use them in a test of a self generated certificate instead of a smartcard reader.   
Using the self certificate used before, I have a cryptographic exception:

specified algoritm not valid

If I use a SHA-1 signature with the same self certificate, it goes well. With the smartcard the same code run successfully.
What is the makecert parameter?
","The 4.5 version of makecert supports other signing algorithms such as sha256, sha384, or sha512. See makecert 4.5 (-a)
","6654","<c#><bouncycastle><signature><sha256><makecert>","3","8","2","2013-06-05 09:23:11","16936158","0","2","63550","","2012-01-09 17:43:44","2011-09-09 07:33:45",""
"27082396","How does one generate an HMAC string in Elixir?","I'm attempting to write an Amazon Product Advertising API client in Elixir. The developer guide describes the process for signing an API request in which the an HMAC-SHA26 hash must be created using the request and the ""Secret Access Key."" This is the function I wrote to handle signing the request:
defp sign_request(url) do
  url_parts = URI.parse(url)
  request = ""GET\n"" <> url_parts.host <> ""\n"" <> url_parts.path <> ""\n"" <> url_parts.query
  url <> ""&Signature="" <> :crypto.hmac(:sha256, 'ThisIsMySecretAccessKey', request)
end

The url passed into the function looks something like this: http://webservice.amazon.com/onca/xml?AssociateTag=ThisIsMyAssociateTag&AWSAccessKeyId=ThisIsMyAWSAccessKeyId&Keywords=stuff&Operation=ItemSearch&SearchIndex=Apparel&Service=AWSECommerceService&Timestamp=2014-11-22T12%3A00%3A00Z&Validate=True&Version=2013-08-01
The issue I'm having is that, while:crypto.hmac/3 returns a binary, that binary is not a string; passing the return value to String.valid?/1 returns false. So, I am unable to concatenate the return value onto the end of the url string to sign the request.
Am I using :crypto.hmac/3 incorrectly? Is there something I'm missing? Is there an alternate way I should be going about this?
","When you using :crypto.hmac/3 its return base 16 integer in binary format, your problem could be solved like this:
:crypto.hmac(:sha256, ""key"", ""The quick brown fox jumps over the lazy dog"")
|> Base.encode16

This is match example from https://en.wikipedia.org/wiki/Hash-based_message_authentication_code#Examples_of_HMAC_.28MD5.2C_SHA1.2C_SHA256.29
","6441","<hmac><sha256><otp><elixir><amazon-product-api>","11","26","1","2017-12-29 05:00:17","27085314","1","2","","","","2014-11-22 20:50:23",""
"7723469","HmacSHA256 objective-c encryptation","I wanna encpryt a string with a key, using HmacSHA256. The code everyone use is the one below, but there is one thing that doesn´t make sense.
Why would we use base64 at the end if all we want is the HmacSHA256 hash?
I tried seeing the hash generated after the method CCHmac is called with 
NSString *str = [[NSString alloc] initWithData:HMAC encoding:NSASCIIStringEncoding];
NSLog(@""%@"", str);

But i don´t get the hash generated, i get null, or garbage, like this:
2011-10-11 09:38:05.082 Hash_HmacSHA256[368:207] (null)
2011-10-11 09:38:05.085 Hash_HmacSHA256[368:207]    Rwªb7iså{yyþ§Ù(&oá÷ÛËÚ¥M`f
import < CommonCrypto/CommonHMAC.h>

NSString *key;
NSString *data;

const char *cKey  = [key cStringUsingEncoding:NSASCIIStringEncoding];
const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];

unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];

CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

NSData *HMAC = [[NSData alloc] initWithBytes:cHMAC
                                  length:sizeof(cHMAC)];

NSString *hash = [HMAC base64Encoding]; //This line doesn´t make sense

[key release];
[data release];

","First of all, for those wondering, this is in reference to my answer to this question: Objective-C sample code for HMAC-SHA1

The HMAC you generate is a 256-bit binary value that may or may not start with a 0 byte.
To be able to print it, you need a string representation (binary, hex, decimal, base64, etc.). Base64 is one of the most efficient among these, that's why I used a Base64 encoding there.
The reason you get garbage is that most (if not all) of the octets in the HMAC value are outside the range of printable ASCII characters. If the first octet is 0 (0x00), you get nil. This is why you need an encoding that supports arbitrary values. ASCII doesn't.
Of course, if you don't want to print the HMAC value, then may not need such an encoding, and can keep the HMAC as is (binary NSData).
","6360","<iphone><objective-c><encryption><sha256><hmac>","4","8","3","2013-02-08 16:24:50","7724837","0","4","516765","","2011-10-11 09:05:26","2011-10-11 08:49:06",""
"7723469","HmacSHA256 objective-c encryptation","I wanna encpryt a string with a key, using HmacSHA256. The code everyone use is the one below, but there is one thing that doesn´t make sense.
Why would we use base64 at the end if all we want is the HmacSHA256 hash?
I tried seeing the hash generated after the method CCHmac is called with 
NSString *str = [[NSString alloc] initWithData:HMAC encoding:NSASCIIStringEncoding];
NSLog(@""%@"", str);

But i don´t get the hash generated, i get null, or garbage, like this:
2011-10-11 09:38:05.082 Hash_HmacSHA256[368:207] (null)
2011-10-11 09:38:05.085 Hash_HmacSHA256[368:207]    Rwªb7iså{yyþ§Ù(&oá÷ÛËÚ¥M`f
import < CommonCrypto/CommonHMAC.h>

NSString *key;
NSString *data;

const char *cKey  = [key cStringUsingEncoding:NSASCIIStringEncoding];
const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];

unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];

CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

NSData *HMAC = [[NSData alloc] initWithBytes:cHMAC
                                  length:sizeof(cHMAC)];

NSString *hash = [HMAC base64Encoding]; //This line doesn´t make sense

[key release];
[data release];

","I spend a whole day, trying to convert the generated hash (bytes) into readable data. I used the base64 encoded you said and it didn´t work at all for me .
So what i did was this:
CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

// Now convert to NSData structure to make it usable again
NSData *out = [NSData dataWithBytes:cHMAC length:CC_SHA256_DIGEST_LENGTH];

// description converts to hex but puts <> around it and spaces every 4 bytes
NSString *hash = [out description];
hash = [hash stringByReplacingOccurrencesOfString:@"" "" withString:@""""];
hash = [hash stringByReplacingOccurrencesOfString:@""<"" withString:@""""];
hash = [hash stringByReplacingOccurrencesOfString:@"">"" withString:@""""];
// hash is now a string with just the 40char hash value in it
NSLog(@""%@"",hash);

","6360","<iphone><objective-c><encryption><sha256><hmac>","4","2","3","2013-02-08 16:24:50","7724837","0","4","516765","","2011-10-11 09:05:26","2011-10-11 08:49:06",""
"7723469","HmacSHA256 objective-c encryptation","I wanna encpryt a string with a key, using HmacSHA256. The code everyone use is the one below, but there is one thing that doesn´t make sense.
Why would we use base64 at the end if all we want is the HmacSHA256 hash?
I tried seeing the hash generated after the method CCHmac is called with 
NSString *str = [[NSString alloc] initWithData:HMAC encoding:NSASCIIStringEncoding];
NSLog(@""%@"", str);

But i don´t get the hash generated, i get null, or garbage, like this:
2011-10-11 09:38:05.082 Hash_HmacSHA256[368:207] (null)
2011-10-11 09:38:05.085 Hash_HmacSHA256[368:207]    Rwªb7iså{yyþ§Ù(&oá÷ÛËÚ¥M`f
import < CommonCrypto/CommonHMAC.h>

NSString *key;
NSString *data;

const char *cKey  = [key cStringUsingEncoding:NSASCIIStringEncoding];
const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];

unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];

CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

NSData *HMAC = [[NSData alloc] initWithBytes:cHMAC
                                  length:sizeof(cHMAC)];

NSString *hash = [HMAC base64Encoding]; //This line doesn´t make sense

[key release];
[data release];

","Don't do ""[out description]"" to get the hash as a string.
Do [hash base64Encoding] to get the base64 encoding of it. Use http://cybersam.com/ios-dev/http-basic-access-authentication-with-objective-c-and-ios/attachment/nsdataadditions to get the base64Encoding function. The additions class is a category that will add the function base64Encoding to NSData's implementation.
Or you can do [[NSString alloc]initWithData:out encoding:NSUTF8StringEncoding].
","6360","<iphone><objective-c><encryption><sha256><hmac>","4","1","3","2013-02-08 16:24:50","7724837","0","4","516765","","2011-10-11 09:05:26","2011-10-11 08:49:06",""
"11670542","java hmac/sha512 generation","I have this php code which generate a HMAC (and not a simple message digest):
<?php 
$key = ""0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF"";
$binkey = pack(""H*"", $key); 
echo strtoupper(hash_hmac('sha512', ""ABC"", $binkey)); 
?>

And with ABC input its output is:
100A6A016A4B21AE120851D51C93B293D95B7D8A44B16ACBEFC2D1C9DF02B6F54FA3C2D6802E52FED5DF8652DDD244788A204682D2D1CE861FDA4E67F2792643

And I need to clone it in java.
So here is my current java clone :
private String generateHMAC( String datas )
    {

        //                final Charset asciiCs = Charset.forName( ""utf-8"" );
        Mac mac;
        String result = """";
        try
        {
            byte[] bytesKey = PayboxConstants.KEY.getBytes( );
            final SecretKeySpec secretKey = new SecretKeySpec( bytesKey, ""HmacSHA512"" );
            mac = Mac.getInstance( ""HmacSHA512"" );
            mac.init( secretKey );
            final byte[] macData = mac.doFinal( datas.getBytes( ) );
            byte[] hex = new Hex( ).encode( macData );
            result = new String( hex, ""ISO-8859-1"" );
        }
        catch ( final NoSuchAlgorithmException e )
        {
            AppLogService.error( e );
        }
        catch ( final InvalidKeyException e )
        {
            AppLogService.error( e );
        }
        catch ( UnsupportedEncodingException e )
        {
            AppLogService.error( e );
        }

        return result.toUpperCase( );

    }

But it does not makes the job because for same input (ABC) its ouput is:
AA6492987D7A7AC81109E877315414806F1973CC47B897ECE713171A25A11B279329B1BFF39EA72A5EFB7EDCD71D1F34D5AAC49999A780BD13F019ED99685B80

I've tries a lot of other java code but none of them was an exact clone of php version.
What did I do wrong?
","I use this for SHA 512 in Java. It might help:
public static String sha512 ( String str )
    {
        try
        {
            return sha512 ( str.getBytes ( ""UTF-8"" ) );
        }
        catch ( UnsupportedEncodingException e )
        {
            e.printStackTrace ( );
            return """";
        }
    }

public static String sha512 ( byte[] array )
{
    try
    {
        MessageDigest m = MessageDigest.getInstance ( ""SHA-512"" );
        m.update ( array );
        String hash = new BigInteger ( 1, m.digest ( ) ).toString ( 16 );
        while ( hash.length ( ) < 32 )
        {
            hash = ""0"" + hash;
        }
        return hash;
    }
    catch ( NoSuchAlgorithmException e )
    {
        e.printStackTrace ( );
        return """";
    }
}

I also remember that there is detailed answer about MD-5 in a post in stackoverflow (just the algorythm is different)
","6360","<java><php><sha256><hmac>","2","-1","3","2012-07-26 14:59:24","11671975","0","7","657524","","2012-07-26 13:46:45","2012-07-26 13:37:57",""
"11670542","java hmac/sha512 generation","I have this php code which generate a HMAC (and not a simple message digest):
<?php 
$key = ""0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF"";
$binkey = pack(""H*"", $key); 
echo strtoupper(hash_hmac('sha512', ""ABC"", $binkey)); 
?>

And with ABC input its output is:
100A6A016A4B21AE120851D51C93B293D95B7D8A44B16ACBEFC2D1C9DF02B6F54FA3C2D6802E52FED5DF8652DDD244788A204682D2D1CE861FDA4E67F2792643

And I need to clone it in java.
So here is my current java clone :
private String generateHMAC( String datas )
    {

        //                final Charset asciiCs = Charset.forName( ""utf-8"" );
        Mac mac;
        String result = """";
        try
        {
            byte[] bytesKey = PayboxConstants.KEY.getBytes( );
            final SecretKeySpec secretKey = new SecretKeySpec( bytesKey, ""HmacSHA512"" );
            mac = Mac.getInstance( ""HmacSHA512"" );
            mac.init( secretKey );
            final byte[] macData = mac.doFinal( datas.getBytes( ) );
            byte[] hex = new Hex( ).encode( macData );
            result = new String( hex, ""ISO-8859-1"" );
        }
        catch ( final NoSuchAlgorithmException e )
        {
            AppLogService.error( e );
        }
        catch ( final InvalidKeyException e )
        {
            AppLogService.error( e );
        }
        catch ( UnsupportedEncodingException e )
        {
            AppLogService.error( e );
        }

        return result.toUpperCase( );

    }

But it does not makes the job because for same input (ABC) its ouput is:
AA6492987D7A7AC81109E877315414806F1973CC47B897ECE713171A25A11B279329B1BFF39EA72A5EFB7EDCD71D1F34D5AAC49999A780BD13F019ED99685B80

I've tries a lot of other java code but none of them was an exact clone of php version.
What did I do wrong?
","try that :
private String generateHMAC( String datas )
{
    MessageDigest md = MessageDigest.getInstance(""SHA-512"");

    md.update(datas.getBytes(""UTF-8"")); // Change this to ""UTF-16"" if needed
    byte[] digest = md.digest();

    StringBuffer hexString = new StringBuffer();
    for (int i=0;i<digest.length;i++) {
        hexString.append(Integer.toHexString(0xFF & digest[i]));
    }

    return  hexString.toString();
}

","6360","<java><php><sha256><hmac>","2","-1","3","2012-07-26 14:59:24","11671975","0","7","657524","","2012-07-26 13:46:45","2012-07-26 13:37:57",""
"11670542","java hmac/sha512 generation","I have this php code which generate a HMAC (and not a simple message digest):
<?php 
$key = ""0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF"";
$binkey = pack(""H*"", $key); 
echo strtoupper(hash_hmac('sha512', ""ABC"", $binkey)); 
?>

And with ABC input its output is:
100A6A016A4B21AE120851D51C93B293D95B7D8A44B16ACBEFC2D1C9DF02B6F54FA3C2D6802E52FED5DF8652DDD244788A204682D2D1CE861FDA4E67F2792643

And I need to clone it in java.
So here is my current java clone :
private String generateHMAC( String datas )
    {

        //                final Charset asciiCs = Charset.forName( ""utf-8"" );
        Mac mac;
        String result = """";
        try
        {
            byte[] bytesKey = PayboxConstants.KEY.getBytes( );
            final SecretKeySpec secretKey = new SecretKeySpec( bytesKey, ""HmacSHA512"" );
            mac = Mac.getInstance( ""HmacSHA512"" );
            mac.init( secretKey );
            final byte[] macData = mac.doFinal( datas.getBytes( ) );
            byte[] hex = new Hex( ).encode( macData );
            result = new String( hex, ""ISO-8859-1"" );
        }
        catch ( final NoSuchAlgorithmException e )
        {
            AppLogService.error( e );
        }
        catch ( final InvalidKeyException e )
        {
            AppLogService.error( e );
        }
        catch ( UnsupportedEncodingException e )
        {
            AppLogService.error( e );
        }

        return result.toUpperCase( );

    }

But it does not makes the job because for same input (ABC) its ouput is:
AA6492987D7A7AC81109E877315414806F1973CC47B897ECE713171A25A11B279329B1BFF39EA72A5EFB7EDCD71D1F34D5AAC49999A780BD13F019ED99685B80

I've tries a lot of other java code but none of them was an exact clone of php version.
What did I do wrong?
","You simply forgot to mimic pack()'s behavior in your Java code (whatever you need that for). 
Use
final SecretKeySpec secretKey = new SecretKeySpec( DatatypeConverter.parseHexBinary(PayboxConstants.KEY), ""HmacSHA512"" );

In your Java Code.
Where DatatypeConverter.parseHexBinary() is from the JAXB API.
Alternatively, if you don't want to include JAXB just for the purpose of converting HEX strings to bytes, you might want to use the code posted here.
","6360","<java><php><sha256><hmac>","2","7","3","2012-07-26 14:59:24","11671975","0","7","657524","","2012-07-26 13:46:45","2012-07-26 13:37:57",""
"10559203","SHA-256 hashes different between C# and Javascript","I am currently working on a project that will involve credit card swipes for admissions based on database rows. Like a will call system, the SHA-256 hash of the CC number must match the hash in the DB row in order to be considered the ""proper pickup"".
However, because the box office system is based in the browser, the CC number on pickup must be hashed client-side, using Javascript, and then compared to the previously downloaded will call data.
However when trying to hash the numbers, the hash always ends up different than what was hashed when the DB row was created (using VB.NET and SQL Server 2008 R2). For example, if a CC number in the database happened to be 4444333322221111, then the resulting hash from .NET would become xU6sVelMEme0N8aEcCKlNl5cG25kl8Mo5pzTowExenM=.
However, when using any SHA-256 hash library for Javascript I could find, the resulting hash would always be NbjuSagE7lHVQzKSZG096bHtQoMLscYAXyuCXX0Wtw0=.
I'm assuming this is some kind of Unicode/UTF-8 issue, but no matter what I try I cannot get the hashes to come out the same and it's starting to drive me crazy. Can anyone offer any advice?
Here's something that may provide some insight. Please go to http://www.insidepro.com/hashes.php?lang=eng and insert ""4444333322221111"" without quotes into the Password box. Afterwards, scroll down to the SHA-256 section.
You can see that there are four results, two of them are the hash codes I posted (the second from the top being the Javascript hash and the bottom one being the SQL hash). According to that page, the bottom hash result is generated using a base 64 string, as well as making the password into unicode format.
I've investigated this and tried many different functions to encode the password into unicode format, but no matter what little tweaks I try or other functions I make, I could never get it to match the hash code I need.
I am currently investigating the parameters used when calling the SHA-256 function on the server side.
UPDATE:
So just to make sure I wasn't crazy, I ran the Hash method I'm using for the CC numbers in the immediate window while debugging. Again, the result remains the same as before. You can see a screenshot here: http://i.imgur.com/raEyX.png
","Are you sure about your JavaScript SHA256 function ?

And your firstly generated hash ?
SHA-256(""4444333322221111""); // 35b8ee49a804ee51d5433292646d3de9b1ed42830bb1c6005f2b825d7d16b70d


hex: 35b8ee49a804ee51d5433292646d3de9b1ed42830bb1c6005f2b825d7d16b70d
HEX: 35B8EE49A804EE51D5433292646D3DE9B1ED42830BB1C6005F2B825D7D16B70D
h:e:x: 35:b8:ee:49:a8:04:ee:51:d5:43:32:92:64:6d:3d:e9:b1:ed:42:83:0b:b1:c6:00:5f:2b:82:5d:7d:16:b7:0d
base64: NbjuSagE7lHVQzKSZG096bHtQoMLscYAXyuCXX0Wtw0=

","6308","<javascript><sql-server><hash><sha256>","7","0","3","2012-05-14 16:44:24","10587594","8","3","1127181","","2012-05-11 22:32:02","2012-05-11 22:00:42",""
"10559203","SHA-256 hashes different between C# and Javascript","I am currently working on a project that will involve credit card swipes for admissions based on database rows. Like a will call system, the SHA-256 hash of the CC number must match the hash in the DB row in order to be considered the ""proper pickup"".
However, because the box office system is based in the browser, the CC number on pickup must be hashed client-side, using Javascript, and then compared to the previously downloaded will call data.
However when trying to hash the numbers, the hash always ends up different than what was hashed when the DB row was created (using VB.NET and SQL Server 2008 R2). For example, if a CC number in the database happened to be 4444333322221111, then the resulting hash from .NET would become xU6sVelMEme0N8aEcCKlNl5cG25kl8Mo5pzTowExenM=.
However, when using any SHA-256 hash library for Javascript I could find, the resulting hash would always be NbjuSagE7lHVQzKSZG096bHtQoMLscYAXyuCXX0Wtw0=.
I'm assuming this is some kind of Unicode/UTF-8 issue, but no matter what I try I cannot get the hashes to come out the same and it's starting to drive me crazy. Can anyone offer any advice?
Here's something that may provide some insight. Please go to http://www.insidepro.com/hashes.php?lang=eng and insert ""4444333322221111"" without quotes into the Password box. Afterwards, scroll down to the SHA-256 section.
You can see that there are four results, two of them are the hash codes I posted (the second from the top being the Javascript hash and the bottom one being the SQL hash). According to that page, the bottom hash result is generated using a base 64 string, as well as making the password into unicode format.
I've investigated this and tried many different functions to encode the password into unicode format, but no matter what little tweaks I try or other functions I make, I could never get it to match the hash code I need.
I am currently investigating the parameters used when calling the SHA-256 function on the server side.
UPDATE:
So just to make sure I wasn't crazy, I ran the Hash method I'm using for the CC numbers in the immediate window while debugging. Again, the result remains the same as before. You can see a screenshot here: http://i.imgur.com/raEyX.png
","According to online SHA-256 hash calculator and a base-64 to hex decoder, it is the .NET implementation that has not calculated the hash correctly. You may want to double check the parameters you pass to the hashing functions.
When you are dealing with two untrusted implementations, it is always a good idea to find another independent implementation, and choose the one that matches the third one as correct. Either that, or find some test vectors, and validate the implementations individually.

EDIT:
A quick experiment shows that the SHA-256 hash you get from .NET matches the hext string 3400340034003400330033003300330032003200320032003100310031003100 - little endian 16-bit characters. Make sure you pass in ASCII.
","6308","<javascript><sql-server><hash><sha256>","7","2","3","2012-05-14 16:44:24","10587594","8","3","1127181","","2012-05-11 22:32:02","2012-05-11 22:00:42",""
"10559203","SHA-256 hashes different between C# and Javascript","I am currently working on a project that will involve credit card swipes for admissions based on database rows. Like a will call system, the SHA-256 hash of the CC number must match the hash in the DB row in order to be considered the ""proper pickup"".
However, because the box office system is based in the browser, the CC number on pickup must be hashed client-side, using Javascript, and then compared to the previously downloaded will call data.
However when trying to hash the numbers, the hash always ends up different than what was hashed when the DB row was created (using VB.NET and SQL Server 2008 R2). For example, if a CC number in the database happened to be 4444333322221111, then the resulting hash from .NET would become xU6sVelMEme0N8aEcCKlNl5cG25kl8Mo5pzTowExenM=.
However, when using any SHA-256 hash library for Javascript I could find, the resulting hash would always be NbjuSagE7lHVQzKSZG096bHtQoMLscYAXyuCXX0Wtw0=.
I'm assuming this is some kind of Unicode/UTF-8 issue, but no matter what I try I cannot get the hashes to come out the same and it's starting to drive me crazy. Can anyone offer any advice?
Here's something that may provide some insight. Please go to http://www.insidepro.com/hashes.php?lang=eng and insert ""4444333322221111"" without quotes into the Password box. Afterwards, scroll down to the SHA-256 section.
You can see that there are four results, two of them are the hash codes I posted (the second from the top being the Javascript hash and the bottom one being the SQL hash). According to that page, the bottom hash result is generated using a base 64 string, as well as making the password into unicode format.
I've investigated this and tried many different functions to encode the password into unicode format, but no matter what little tweaks I try or other functions I make, I could never get it to match the hash code I need.
I am currently investigating the parameters used when calling the SHA-256 function on the server side.
UPDATE:
So just to make sure I wasn't crazy, I ran the Hash method I'm using for the CC numbers in the immediate window while debugging. Again, the result remains the same as before. You can see a screenshot here: http://i.imgur.com/raEyX.png
","Adam Liss had it right when he mentioned the byte arrays between strings in .NET/SQL Server are different than strings in Javascript. The array in .NET for the string 4444333322221111 would look like [52 0 52 0 52 0 52 0 51 0 51 0... etc.] and the same thing in Javascript would just look like [52 52 52 52 51 51 51 51...]. Thus, with different byte arrays, different hashes were generated.
I was able to remedy this for my application by modifying the base 64 SHA-256 hashing algorithm from here, where each character is pulled from the string one at a time in order to generate the hash.
Rather than having it do it this way, I first converted the string into a unicode-like byte array (like the .NET example above, 52 0 52 0 etc), fed that array to the hashing algorithm instead of the string, and did some very minor tweaks in order for it to grab each array member to generate the hash. Low and behold, it worked and now I have a very convenient method of hashing CC numbers in the same fashion as the .NET framework for quick and easy order lookup.
","6308","<javascript><sql-server><hash><sha256>","7","2","3","2012-05-14 16:44:24","10587594","8","3","1127181","","2012-05-11 22:32:02","2012-05-11 22:00:42",""
"13981832","How do I use Sha256 on a file(binary file such as images) in javascript?","I am trying to do a Sha256 on a file in Javascript. I used FileReader(HTML5) to read in a file. I use the readAsBinaryString function in the FileReader to pass in the images file. Then on the FileReader.onload function I pass in the evt.target.result to the SHA256 method in the CryptoJs API. I am able to successfully get a hash value but it is not correct. When I pass in a text file, it works fine but not image file. 
Code(Should be able to copy the code below to a HTML file and run it on firefox - press the ""entire file"" button):
<style>
  #byte_content {
    margin: 5px 0;
    max-height: 100px;
    overflow-y: auto;
    overflow-x: hidden;
  }
  #byte_range { margin-top: 5px; }
</style>

<input type=""file"" id=""files"" name=""file"" /> Read bytes: 
<span class=""readBytesButtons"">
  <button data-startbyte=""0"" data-endbyte=""4"">1-5</button>
  <button data-startbyte=""5"" data-endbyte=""14"">6-15</button>
  <button data-startbyte=""6"" data-endbyte=""7"">7-8</button>
  <button>entire file</button>
</span>
<div id=""byte_range""></div><BR>
<div id=""byte_content""></div><BR>
<div id=""crypto_sha256""></div>

<script src=""http://crypto-js.googlecode.com/svn/tags/3.0.2/build/rollups/sha256.js""></script>
<script src=""http://crypto-js.googlecode.com/svn/tags/3.0.2/build/components/enc-base64-min.js""></script>
<script>

  var sha256;

  function readBlob(opt_startByte, opt_stopByte) {

    var files = document.getElementById('files').files;
    if (!files.length) {
      alert('Please select a file!');
      return;
    }

    var file = files[0];
    var start = parseInt(opt_startByte) || 0;
    var stop = parseInt(opt_stopByte) || file.size - 1;

    var reader = new FileReader();

    // If we use onloadend, we need to check the readyState.
    reader.onloadend = function(evt) {
      if (evt.target.readyState == FileReader.DONE) { // DONE == 2
        document.getElementById('byte_content').textContent = evt.target.result;
        document.getElementById('byte_range').textContent = 
            ['Read bytes: ', start + 1, ' - ', stop + 1,
             ' of ', file.size, ' byte file'].join('');

        //**UPDATED SOLUTION: Since its binary data, the message needs to be converted from string to bytes using Latin1**
            sha256.update(CryptoJS.enc.Latin1.parse(evt.target.result));

        var hash = sha256.finalize();

        document.getElementById('crypto_sha256').textContent = ['SHA-256: ', hash].join('');
      }
    };

    var blob = file.slice(start, stop + 1);
    reader.readAsBinaryString(blob);
  }

  document.querySelector('.readBytesButtons').addEventListener('click', function(evt) {
    if (evt.target.tagName.toLowerCase() == 'button') {
      var startByte = evt.target.getAttribute('data-startbyte');
      var endByte = evt.target.getAttribute('data-endbyte');

      sha256 = CryptoJS.algo.SHA256.create();

      readBlob(startByte, endByte);
    }
  }, false);
</script>

Sample outputs:

Testing a ""text"" file:

SHA256 generated by Javascript:
78cb5e86455dc8e3bc20fe17e0213a938281216d57b31f8307f5bca67c37bb09
SHA256 generated by cygwin on the same file:
$ sha256sum Phillips.txt
78cb5e86455dc8e3bc20fe17e0213a938281216d57b31f8307f5bca67c37bb09 *SomeTestFile.txt

Testing a ""binary"" file(pdf):

SHA256 generated by Javascript:
57f93c1d20a8ad8ade984a1d9756c1a40600bd8a7527601945c4e0b5e042c605
SHA256 generated by cygwin on the same file:
$ sha256sum Smoke\ Detector\ Brochure.pdf
57f93c1d20a8ad8ade984a1d9756c1a40600bd8a7527601945c4e0b5e042c605 *Smoke Detector Brochure.pdf


","I know this question is quite old but I figured I'd share what I know anyways.
You can do this more easily by doing what I discuss in this answer https://stackoverflow.com/a/17848266/2226207
Basically you can include components/lib-typedarrays-min.js and then do the following in code.
var reader = new FileReader();

// If we use onloadend, we need to check the readyState.
reader.onloadend = function(evt) {
  if (evt.target.readyState == FileReader.DONE) { // DONE == 2

    var wordArray = CryptoJS.lib.WordArray.create(e.target.result);
    var hash = CryptoJS.SHA256(wordArray);
  }
};

var blob = file.slice(start, stop + 1);
reader.readAsArrayBuffer(blob);

I haven't tested the above solution but it should work fine.
","6258","<javascript><binary><filereader><sha256><cryptojs>","3","2","2","2015-04-22 13:18:40","","7","2","422930","","2012-12-24 15:25:14","2012-12-20 22:53:19",""
"13981832","How do I use Sha256 on a file(binary file such as images) in javascript?","I am trying to do a Sha256 on a file in Javascript. I used FileReader(HTML5) to read in a file. I use the readAsBinaryString function in the FileReader to pass in the images file. Then on the FileReader.onload function I pass in the evt.target.result to the SHA256 method in the CryptoJs API. I am able to successfully get a hash value but it is not correct. When I pass in a text file, it works fine but not image file. 
Code(Should be able to copy the code below to a HTML file and run it on firefox - press the ""entire file"" button):
<style>
  #byte_content {
    margin: 5px 0;
    max-height: 100px;
    overflow-y: auto;
    overflow-x: hidden;
  }
  #byte_range { margin-top: 5px; }
</style>

<input type=""file"" id=""files"" name=""file"" /> Read bytes: 
<span class=""readBytesButtons"">
  <button data-startbyte=""0"" data-endbyte=""4"">1-5</button>
  <button data-startbyte=""5"" data-endbyte=""14"">6-15</button>
  <button data-startbyte=""6"" data-endbyte=""7"">7-8</button>
  <button>entire file</button>
</span>
<div id=""byte_range""></div><BR>
<div id=""byte_content""></div><BR>
<div id=""crypto_sha256""></div>

<script src=""http://crypto-js.googlecode.com/svn/tags/3.0.2/build/rollups/sha256.js""></script>
<script src=""http://crypto-js.googlecode.com/svn/tags/3.0.2/build/components/enc-base64-min.js""></script>
<script>

  var sha256;

  function readBlob(opt_startByte, opt_stopByte) {

    var files = document.getElementById('files').files;
    if (!files.length) {
      alert('Please select a file!');
      return;
    }

    var file = files[0];
    var start = parseInt(opt_startByte) || 0;
    var stop = parseInt(opt_stopByte) || file.size - 1;

    var reader = new FileReader();

    // If we use onloadend, we need to check the readyState.
    reader.onloadend = function(evt) {
      if (evt.target.readyState == FileReader.DONE) { // DONE == 2
        document.getElementById('byte_content').textContent = evt.target.result;
        document.getElementById('byte_range').textContent = 
            ['Read bytes: ', start + 1, ' - ', stop + 1,
             ' of ', file.size, ' byte file'].join('');

        //**UPDATED SOLUTION: Since its binary data, the message needs to be converted from string to bytes using Latin1**
            sha256.update(CryptoJS.enc.Latin1.parse(evt.target.result));

        var hash = sha256.finalize();

        document.getElementById('crypto_sha256').textContent = ['SHA-256: ', hash].join('');
      }
    };

    var blob = file.slice(start, stop + 1);
    reader.readAsBinaryString(blob);
  }

  document.querySelector('.readBytesButtons').addEventListener('click', function(evt) {
    if (evt.target.tagName.toLowerCase() == 'button') {
      var startByte = evt.target.getAttribute('data-startbyte');
      var endByte = evt.target.getAttribute('data-endbyte');

      sha256 = CryptoJS.algo.SHA256.create();

      readBlob(startByte, endByte);
    }
  }, false);
</script>

Sample outputs:

Testing a ""text"" file:

SHA256 generated by Javascript:
78cb5e86455dc8e3bc20fe17e0213a938281216d57b31f8307f5bca67c37bb09
SHA256 generated by cygwin on the same file:
$ sha256sum Phillips.txt
78cb5e86455dc8e3bc20fe17e0213a938281216d57b31f8307f5bca67c37bb09 *SomeTestFile.txt

Testing a ""binary"" file(pdf):

SHA256 generated by Javascript:
57f93c1d20a8ad8ade984a1d9756c1a40600bd8a7527601945c4e0b5e042c605
SHA256 generated by cygwin on the same file:
$ sha256sum Smoke\ Detector\ Brochure.pdf
57f93c1d20a8ad8ade984a1d9756c1a40600bd8a7527601945c4e0b5e042c605 *Smoke Detector Brochure.pdf


","Here is a simple solution found : https://code.google.com/p/crypto-js/issues/detail?id=62

When you pass a string to a hasher, it's converted to bytes using UTF-8. That's to ensure foreign characters are not clipped. Since you're working with binary data, you'll want to convert the string to bytes using Latin1.

sha256.update(CryptoJS.enc.Latin1.parse(evt.target.result));

","6258","<javascript><binary><filereader><sha256><cryptojs>","3","2","2","2015-04-22 13:18:40","","7","2","422930","","2012-12-24 15:25:14","2012-12-20 22:53:19",""
"7909288","PHP / Javascript / JQuery - base64 sha256 encoding","I'm trying to port a PHP example of an API integration to Javascript / JQuery. In PHP, an encrypted string is created using the following code:
$sig = base64_encode(hash_hmac('sha256', $sign, $this->secretAccessKey, true)

whose functions are documented here:
http://php.net/manual/en/function.hash-hmac.php
http://us.php.net/base64_encode
In Javascript, I'm using JQuery's crypto to do the HMAC piece:
http://code.google.com/p/crypto-js/#HMAC-SHA256

and I'm trying to figure out if I also need to do a base64 encode, as it seems it is already in base64. This is the code I'm currently running:
var sigHash = Crypto.HMAC(Crypto.SHA256, sign, accessKey);

Is this correct? How would I create a javascript / jquery equivalent of the above PHP function?
","HMAC is a standard. So is SHA-256. So their outputs, regardless of which implementation, has to be the same.
There could only be differences in the Base64 encoding. Normally, the non-alphanumeric characters are + and /, but you cannot count on that. I've checked, and both implementations use the same non-alphanumeric characters.
However, you should still ""manually"" check a few thousand strings. The implementation in PHP is well tested. But I do not know if the same is true for the implementation in jQuery...
The syntax for Base64 encoded output is:
Crypto.util.bytesToBase64(
    Crypto.HMAC(Crypto.SHA256, sign, accessKey, { asBytes: true })
);

","6111","<php><javascript><jquery><sha256><hmac>","0","2","2","2012-04-23 16:40:38","7909335","0","1","","","","2011-10-26 21:41:52",""
"7909288","PHP / Javascript / JQuery - base64 sha256 encoding","I'm trying to port a PHP example of an API integration to Javascript / JQuery. In PHP, an encrypted string is created using the following code:
$sig = base64_encode(hash_hmac('sha256', $sign, $this->secretAccessKey, true)

whose functions are documented here:
http://php.net/manual/en/function.hash-hmac.php
http://us.php.net/base64_encode
In Javascript, I'm using JQuery's crypto to do the HMAC piece:
http://code.google.com/p/crypto-js/#HMAC-SHA256

and I'm trying to figure out if I also need to do a base64 encode, as it seems it is already in base64. This is the code I'm currently running:
var sigHash = Crypto.HMAC(Crypto.SHA256, sign, accessKey);

Is this correct? How would I create a javascript / jquery equivalent of the above PHP function?
","If you ever need inspiration for a JS implementation of a PHP function, have a look at PHPJS.org. The JavaScript equivalent for base64_encode can be found at: base64_encode.
","6111","<php><javascript><jquery><sha256><hmac>","0","1","2","2012-04-23 16:40:38","7909335","0","1","","","","2011-10-26 21:41:52",""
"33419006","PHP and C# HMAC SHA256","I need to convert the following php code in C#:
$res = mac256($ent, $key);
$result = encodeBase64($res);

where
function encodeBase64($data)
{
    $data = base64_encode($data);
    return $data;
}

and
function mac256($ent,$key)
{
    $res = hash_hmac('sha256', $ent, $key, true);//(PHP 5 >= 5.1.2)
    return $res;
}

I use the following C# code:
byte[] res = HashHMAC(ent, key);
string result = System.Convert.ToBase64String(res);

where 
public byte[] HashHMAC(string ent, byte[] key)
{
   byte[] toEncryptArray =System.Text.Encoding.GetEncoding(28591).GetBytes(ent);

   HMACSHA256 hash = new HMACSHA256(key);
   return hash.ComputeHash(toEncryptArray);
}

The complete php source code available at this link
I also check this post hmac_sha256 in php and c# differ
and this one C# equivalent to hash_hmac in PHP
But the results are not the same.
","This code should do the trick:
static byte[] hmacSHA256(String data, String key)
{
    using (HMACSHA256 hmac = new HMACSHA256(Encoding.ASCII.GetBytes(key)))
    {
        return hmac.ComputeHash(Encoding.ASCII.GetBytes(data));
    }
}

If I call this code:
Console.WriteLine(BitConverter.ToString(hmacSHA256(""1234"", ""1234"")).Replace(""-"", """").ToLower());

It returns:
4e4feaea959d426155a480dc07ef92f4754ee93edbe56d993d74f131497e66fb

When I run this in PHP:
echo hash_hmac('sha256', ""1234"", ""1234"", false);

It returns
4e4feaea959d426155a480dc07ef92f4754ee93edbe56d993d74f131497e66fb

","6065","<c#><php><sha256><hmac>","2","7","3","2015-11-12 12:52:50","33432788","3","1","-1","","2017-05-23 12:33:42","2015-10-29 15:55:04",""
"33419006","PHP and C# HMAC SHA256","I need to convert the following php code in C#:
$res = mac256($ent, $key);
$result = encodeBase64($res);

where
function encodeBase64($data)
{
    $data = base64_encode($data);
    return $data;
}

and
function mac256($ent,$key)
{
    $res = hash_hmac('sha256', $ent, $key, true);//(PHP 5 >= 5.1.2)
    return $res;
}

I use the following C# code:
byte[] res = HashHMAC(ent, key);
string result = System.Convert.ToBase64String(res);

where 
public byte[] HashHMAC(string ent, byte[] key)
{
   byte[] toEncryptArray =System.Text.Encoding.GetEncoding(28591).GetBytes(ent);

   HMACSHA256 hash = new HMACSHA256(key);
   return hash.ComputeHash(toEncryptArray);
}

The complete php source code available at this link
I also check this post hmac_sha256 in php and c# differ
and this one C# equivalent to hash_hmac in PHP
But the results are not the same.
","I'm pretty sure that you're dealing with the new RedSys SHA256 signature implementation. Also I saw that you have some issue with the 3DES encryption between PHP and C#.
First at all you must get the base 64 string with all the payment parameters. You can achieve it with this code:
public static string GetParameters(string merchantCode, string terminal, int currency, string transactionType, decimal amount, string merchantOrder, string merchantIdentifier, string merchantPost, string urlOk, string urlKo)
        {
            var jsonValues = new Dictionary<string, string>
            {
                { ""Ds_Merchant_Amount"", amount.ToString().Replace(CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, """") },
                { ""Ds_Merchant_Order"", merchantOrder},
                { ""Ds_Merchant_MerchantCode"", merchantCode },
                { ""Ds_Merchant_Currency"", currency.ToString() },
                { ""Ds_Merchant_TransactionType"", transactionType },
                { ""Ds_Merchant_Terminal"", terminal },
                { ""Ds_Merchant_Identifier"", merchantIdentifier },
                { ""Ds_Merchant_MerchantURL"", merchantPost },
                { ""Ds_Merchant_UrlOK"", urlOk},
                { ""Ds_Merchant_UrlKO"",  urlKo}
            }.Select(kvp => ""\""{0}\"":\""{1}\"""".Formato(kvp.Key.ToUpper(), kvp.Value));

            var jsonString = ""{"" + string.Join("","", jsonValues) + ""}"";

            return Convert.ToBase64String(ASCIIEncoding.ASCII.GetBytes(jsonString));
        }

Once you have the JSON string in base 64, you must apply 3DES to merchant order parameter with the key provided by RedSys:
public static string GetTransactionEncryptionKey(string merchantOrder, string encryptKey)
        {
            using (var tdes = new TripleDESCryptoServiceProvider())
            {
                tdes.IV = new byte[8] { 0, 0, 0, 0, 0, 0, 0, 0 };
                tdes.Key = Convert.FromBase64String(encryptKey);
                tdes.Padding = PaddingMode.Zeros;
                tdes.Mode = CipherMode.CBC;

                var toEncrypt = ASCIIEncoding.ASCII.GetBytes(merchantOrder);
                var result = tdes.CreateEncryptor().TransformFinalBlock(toEncrypt, 0, toEncrypt.Length);

                return Convert.ToBase64String(result);
            }
        }

As you can see, the encryption key provided by RedSys is base 64 string so you don't need to calculate the MD5 hash for the 3DES algorithm.
Then we go for the SHA256 signature:
public static string GetSignature(string base64Parameters, string base64tranEncryptKey)
        {
            using (var sha = new HMACSHA256(Convert.FromBase64String(base64tranEncryptKey)))
            {
                var hash = sha.ComputeHash(ASCIIEncoding.ASCII.GetBytes(base64Parameters));

                return Convert.ToBase64String(hash);
            }
        }

Good luck!
","6065","<c#><php><sha256><hmac>","2","3","3","2015-11-12 12:52:50","33432788","3","1","-1","","2017-05-23 12:33:42","2015-10-29 15:55:04",""
"33419006","PHP and C# HMAC SHA256","I need to convert the following php code in C#:
$res = mac256($ent, $key);
$result = encodeBase64($res);

where
function encodeBase64($data)
{
    $data = base64_encode($data);
    return $data;
}

and
function mac256($ent,$key)
{
    $res = hash_hmac('sha256', $ent, $key, true);//(PHP 5 >= 5.1.2)
    return $res;
}

I use the following C# code:
byte[] res = HashHMAC(ent, key);
string result = System.Convert.ToBase64String(res);

where 
public byte[] HashHMAC(string ent, byte[] key)
{
   byte[] toEncryptArray =System.Text.Encoding.GetEncoding(28591).GetBytes(ent);

   HMACSHA256 hash = new HMACSHA256(key);
   return hash.ComputeHash(toEncryptArray);
}

The complete php source code available at this link
I also check this post hmac_sha256 in php and c# differ
and this one C# equivalent to hash_hmac in PHP
But the results are not the same.
","Redsys provides libraries for php and java.
Starting from the java library, I've translated the ApiMacSha256 class to C#
public class ApiMacSha256 {
    //////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////
    ////////////                    FUNCIONES AUXILIARES:                              ///////////
    //////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////

    /** 3DES Function */
    private byte[] encrypt_3DES(byte[] key, string data) {
        //http://www.mywebexperiences.com/2012/12/11/crypting-data-using-3des-c/
        //http://stackoverflow.com/a/33479952/2938518
        using (var tdes = new TripleDESCryptoServiceProvider()) {
            tdes.IV = new byte[8] { 0, 0, 0, 0, 0, 0, 0, 0 };
            tdes.Key = key;
            tdes.Padding = PaddingMode.Zeros;
            tdes.Mode = CipherMode.CBC;

            var toEncrypt = Encoding.ASCII.GetBytes(data);
            var result = tdes.CreateEncryptor().TransformFinalBlock(toEncrypt, 0, toEncrypt.Length);

            return result;
        }
    }

    /** MAC Function */
    private byte[] mac256(string dsMerchantParameters, byte[] secretKo) {
        //http://stackoverflow.com/a/17315619/2938518
        byte[] hash;
        using (var hmac = new HMACSHA256(secretKo)) {
            hash = hmac.ComputeHash(Encoding.ASCII.GetBytes(dsMerchantParameters));
        }

        return hash;
    }

    /** Base64 Functions */
    private string encodeB64String(byte[] data) {
        return Convert.ToBase64String(data, Base64FormattingOptions.None);
    }

    //////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////
    ////////////        FUNCIONES PARA LA GENERACIÓN DEL FORMULARIO DE PAGO:          ////////////
    //////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////
    public String createMerchantSignature(string merchantParamsB64, string claveComercio, string OrderId) {
        byte[] clave = Convert.FromBase64String(claveComercio);
        byte[] secretKo = encrypt_3DES(clave, OrderId);

        // Se hace el MAC con la clave de la operación ""Ko"" y se codifica en BASE64
        byte[] hash = mac256(merchantParamsB64, secretKo);
        String res = encodeB64String(hash);
        return res;
    }
}

The main method 'createMerchantSignature', requires a string encoded in base64 of the merchant params embeded in a json structure, the secret key of the merchant and the OrderId.
","6065","<c#><php><sha256><hmac>","2","0","3","2015-11-12 12:52:50","33432788","3","1","-1","","2017-05-23 12:33:42","2015-10-29 15:55:04",""
"9652124","Is there an equivalent of PHP's hash_hmac in Python/Django?","I want to forward my visitors to a 3rd party paysite. This 3rd party will process their payment and POST to me a 64 character token generated from a unique order number and shared password using PHP's hash_hmac using the sha256 algorithm, like so:
$token = hash_hmac(""sha256"", ""12345"", ""sharedpassword"");

Then I want to use the same algorithm on my end to generate the (hopefully) the same token to verify the user has paid. The problem is I cannot find an equivalent function or way to replicate the function in Python. The closest I've come is Python's hashlib, but there doesn't appear to be a function that can take in 2 arguments - the data and the shared password. Does anyone know of an equivalent of hash_hmac that would be applicable in this case?
","You want hmac.
hmac.new(""sharedpassword"", ""12345"", hashlib.sha256).hexdigest()

","6064","<php><python><django><sha256>","23","52","1","2012-03-11 03:21:53","9652135","0","3","","","","2012-03-11 03:19:27","2017-09-10 10:01:42"
"33493109","Java Security - X509 Certificate Verification with Public Key","I am working on a project has so much security operations. I have never struggled security issues before. Therefore, my question can be beginner level.
In my problem, I am getting a byte array data has a certificate and some other parameters. I need to verify this certificate and its signature. But I couldn't handle signature verification. In fact, I don't know which public key should I use to verify. 
The code is below.
Thanks for help..!
public boolean startValidation(PublicKey publicKey) {
    CertificateFactory cf;
    try {
         cf = CertificateFactory.getInstance(""X.509"");
    } catch (CertificateException e) {
        e.printStackTrace();
        return false;
    }
    try {
        certificate = (X509Certificate) cf.generateCertificate(new ByteArrayInputStream(certBytes));
    } catch (CertificateException e) {
        e.printStackTrace();
        setCertError(0);
        return false;
    }
    if (!checkProvider()){
        setCertError(1);
        return false;
    }

    boolean[] usages = certificate.getKeyUsage();
    boolean usage = usages[0] && usages[2];
    if (!usage){
        setCertError(2);
    }

    try {
        certificate.checkValidity();
    } catch (CertificateNotYetValidException e) {
        e.printStackTrace();
        setCertError(3);
        return false;
    } catch (CertificateExpiredException e) {
        e.printStackTrace();
        setCertError(4);
        return false;
    }

    System.out.println(""Sign Algorithm Name "" + certificate.getSigAlgName());
    //Output is SHA256WithRSAEncryption

   // Problem area
    try {
        Signature signature = Signature.getInstance(""SHA256WithRSA"");
        signature.initVerify(publicKey); //Should I use this certificate.getPublicKey() or what ??
        if(signature.verify(certificate.getSignature())){
            System.out.println(""Accepted"");
        }else System.out.println(""Failure"");
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (InvalidKeyException e) {
        e.printStackTrace();
    } catch (SignatureException e) {
        e.printStackTrace();
    }

    System.out.println(""Public Key Format "" + publicKey.getFormat() + ""\nPublic Key Algorithm "" + publicKey.getAlgorithm() );
    System.out.println(""Subject DN -> "" + certificate.getSubjectDN().getName());


    return true;
}

","Typical PKI systems use Certificate Authorities to issue certificates to subjects (by signing them). By signing Certificate Authority forms a chain from the CA to the subject's certificate, this chain can contain multiple CA's if CA1 (root CA) sings CA2's (intermediate CA) certificate which in turn sings the subject's certificate. This is very common on the Internet (for SSL/TLS) and in digital signature scenarios.
So you most likely need at least one CA's certificate and it's public key to verify the subject's certificate. Your program can support multiple independent CA's as well. The CA's your program accepts are usually called Trust Anchors. Keeping the Trust Anchors in a KeyStore is also very convenient.
So, you'll probably end up with a KeyStore containing the Trust Anchors and intermediate CA's. From there on you'll need to form the chain and validate the signatures of all certificates in the chin from the root CA (Trust Anchor) to the subject's certificate that you're trying to validate.
For a proper certificate validation you'll need to check other things besides the chain's signature such as key usage, basic constraints, revocation information, etc. All of this is specified in the RFC5280 in Certificate Path Validation.
Luckily, there is already Java API in the form of CertPath API that can help you with that. A very rudimentary example that could fit your use case would be:
final CertificateFactory certificateFactory = CertificateFactory.getInstance(""X.509"");

final X509Certificate certificateToCheck = (X509Certificate) certificateFactory.generateCertificate(new ByteArrayInputStream(certBytes));

final KeyStore trustStore = KeyStore.getInstance(""JKS"");
InputStream keyStoreStream = ...
trustStore.load(keyStoreStrem, ""your password"".toCharArray());

final CertPathBuilder certPathBuilder = CertPathBuilder.getInstance(""PKIX"");
final X509CertSelector certSelector = new X509CertSelector();
certSelector.setCertificate(certificateToCheck);

final CertPathParameters certPathParameters = new PKIXBuilderParameters(trustStore, certSelector);
final CertPathBuilderResult certPathBuilderResult = certPathBuilder.build(certPathParameters);
final CertPath certPath = certPathBuilderResult.getCertPath();

final CertPathValidator certPathValidator = CertPathValidator.getInstance(""PKIX"");
final PKIXParameters validationParameters = new PKIXParameters(trustStore);
validationParameters.setRevocationEnabled(true); // if you want to check CRL
final X509CertSelector keyUsageSelector = new X509CertSelector();
keyUsageSelector.setKeyUsage(new boolean[] { true, false, true }); // to check digitalSignature and keyEncipherment bits
validationParameters.setTargetCertConstraints(keyUsageSelector);
final PKIXCertPathValidatorResult result = (PKIXCertPathValidatorResult) certPathValidator.validate(certPath, validationParameters);

System.out.println(result);

But be advised that there are many more nuances and details that must be properly addressed in order to make the implementation truly secure. Bad certificate path checking is common reason of security problems.
","5847","<java><rsa><digital-signature><x509certificate><sha256>","1","3","1","2015-11-03 23:30:47","33511089","6","1","","","","2015-11-03 06:57:13",""
"41298305","Signature length not correct","I need to verify a signature in java. I get an url with multiple params, one of them is the signature (hexadecimal format). The message signed is the SHA-256 hash of the concatenation of all the other params. I also have the certificate with the public key to be used for the check.
All the values I'm using for the test are given to me by an example which is supposed to be correct, I just create the concatenation string.
This is the code i run:
// signed message --> hash of concat
MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
digest.update( concat.getBytes() );
byte[] message = digest.digest();
System.out.println(""message length ""+message.length); // --> 32


// signature belonging to the message --> checkValue
System.out.println(""check value length "" +checkValue.length()); // --> 512
byte[] sigBytes = checkValue.getBytes();
System.out.println(""check value bytes ""+sigBytes.length); // --> 512

// public certificate of the CA 
File file3 = new File(certificatePath); 
byte[] encCertRSA = new byte[(int) file3.length()];
FileInputStream fis3 = new FileInputStream(file3);
fis3.read(encCertRSA);
fis3.close();
InputStream is = new ByteArrayInputStream( encCertRSA );

CertificateFactory f = CertificateFactory.getInstance(""X.509"");
X509Certificate certRSA = (X509Certificate)f.generateCertificate(is);
certRSA.checkValidity();
PublicKey pubKeyRSA = certRSA.getPublicKey();

Signature sig = Signature.getInstance(""SHA256withRSA"");
sig.initVerify(pubKeyRSA);

// supply the Signature object with the data for which a signature was generated --> hash of concat
sig.update(message);

boolean isValid = sig.verify( sigBytes );

System.out.println(""The signature of the email verifies: "" + isValid);

This is the error i get:
java.security.SignatureException: Signature length not correct: got 512 but was expecting 256
at sun.security.rsa.RSASignature.engineVerify(Unknown Source)
at java.security.Signature$Delegate.engineVerify(Unknown Source)
at java.security.Signature.verify(Unknown Source)

Am i doing anything wrong? I was expecting the signature to have a length of 256, not 512. I run a test doing a substring of the signature value to match the length of 256 and I don't get the error above, but the the sig.verify returns false.
","if you look the code you wrote there is System.out.println(""check value bytes ""+sigBytes.length); // --> ""512"" and then boolean isValid = sig.verify( sigBytes ); it looks like your sigBytes variable already has 512 as length before you check
","5688","<java><exception><signature><sha256><verify>","2","-1","1","2016-12-23 09:15:34","","0","3","","","","2016-12-23 09:04:55",""
"49365327","get SHA256 hash of public key","I have a certificate mycert.pem . I got the public key of the certificate by command:
openssl x509 -pubkey -noout -in mycert.pem  > pubkey.pem

How can I get the SHA256 hash of the public key?
","The openssl -pubkey outputs the key in PEM format (even if you use -outform DER). 
Assuming you have a RSA public key, you have to convert the key in DER format (binary) and then get its hash value:
 openssl rsa -in pubkey.pem -pubin -outform der | openssl dgst -sha256

","5678","<openssl><sha256><sha><sha2>","2","0","1","2018-03-19 14:58:10","","0","","","","","2018-03-19 14:26:37",""
"36876641","Generate HMAC-SHA256 hash with BouncyCastle","I need to generate a HMAC-SHA256 hash in a PCL (developing for Xamarin Forms) which doesn't support the .NET built-in HMAC/cryptography classes, so I'm working with BouncyCastle to implement my cryptography classes.
I need to generate a HMAC-SHA256 hash, but I haven't been able to find any example on Google, nor does BouncyCastle seem to have any documentation for this. Can anyone help me out?
","Thanks to the solution here I came up with this code:
public class HmacSha256
{
    public byte[] Hash(string text, string key)
    {
        var hmac = new HMac(new Sha256Digest());
        hmac.Init(new KeyParameter(Encoding.UTF8.GetBytes(key)));
        byte[] result = new byte[hmac.GetMacSize()];
        byte[] bytes = Encoding.UTF8.GetBytes(text);

        hmac.BlockUpdate(bytes, 0, bytes.Length);
        hmac.DoFinal(result, 0);

        return result;
    }
}

Corresponding unit test (uses FluentAssertions):
[TestClass]
public class HmacSha256Tests
{
    private readonly HmacSha256 _hmac = new HmacSha256();

    [TestMethod]
    public void Hash_GeneratesValidHash_ForInput()
    {
        // Arrange
        string input = ""hello"";
        string key = ""test"";
        string expected = ""F151EA24BDA91A18E89B8BB5793EF324B2A02133CCE15A28A719ACBD2E58A986"";

        // Act
        byte[] output = _hmac.Hash(input, key);

        string outputHex = BitConverter.ToString(output).Replace(""-"", """").ToUpper();

        // Assert
        expected.Should().Be(outputHex);
    }
}

","5671","<c#><.net><bouncycastle><sha256><hmac>","6","6","3","2017-11-09 14:54:20","36879373","1","1","","","","2016-04-26 22:06:08",""
"36876641","Generate HMAC-SHA256 hash with BouncyCastle","I need to generate a HMAC-SHA256 hash in a PCL (developing for Xamarin Forms) which doesn't support the .NET built-in HMAC/cryptography classes, so I'm working with BouncyCastle to implement my cryptography classes.
I need to generate a HMAC-SHA256 hash, but I haven't been able to find any example on Google, nor does BouncyCastle seem to have any documentation for this. Can anyone help me out?
","private static void CreateToken(string message, string key)
    {
        System.Text.ASCIIEncoding encoding = new System.Text.ASCIIEncoding();
        byte[]keyByte = encoding.GetBytes(key);


        HMACSHA256 hmacsha = new HMACSHA256(keyByte);
        byte[]messageBytes = encoding.GetBytes(message);

        byte[]hashmessage = hmacsha.ComputeHash(messageBytes);
        Console.WriteLine(ByteToString(hashmessage));
    }
    public static string ByteToString(byte[]buff) {
        string sbinary = """";

        for (int i = 0; i < buff.Length; i++) {
            sbinary += buff[i].ToString(""X2""); // hex format
        }
        return (sbinary);
    }

Above code saved my time while working for HMAC-SHA256, I hope this may help someone and here is the reference in detail http://billatnapier.com/security01.aspx
","5671","<c#><.net><bouncycastle><sha256><hmac>","6","0","3","2017-11-09 14:54:20","36879373","1","1","","","","2016-04-26 22:06:08",""
"36876641","Generate HMAC-SHA256 hash with BouncyCastle","I need to generate a HMAC-SHA256 hash in a PCL (developing for Xamarin Forms) which doesn't support the .NET built-in HMAC/cryptography classes, so I'm working with BouncyCastle to implement my cryptography classes.
I need to generate a HMAC-SHA256 hash, but I haven't been able to find any example on Google, nor does BouncyCastle seem to have any documentation for this. Can anyone help me out?
","Using this PCL offshoot of BouncyCastle https://www.nuget.org/packages/BouncyCastle-PCL/1.0.0.6 it's really easy, in fact identical to the windows api.
 public string ComputeHMAC(string message)
    {
        var keyBytes = Encoding.UTF8.GetBytes(Constants.API_KEY);
        var messageBytes = Encoding.UTF8.GetBytes(message);

        var hmac = new HMACSHA256(keyBytes);
        byte[] result = hmac.ComputeHash(messageBytes);

        return Convert.ToBase64String(result);
    }

And a unit test using the actual .Net version:
[Test, AutoMoqData]
    public void Hash_Algorithm_Correct (
        [NoAutoProperties] HashMacService sut,
        string message)
    {
        string expected;

        var key = Encoding.UTF8.GetBytes(Constants.API_KEY);

        using (var hmac = new HMACSHA256(key))
        {
            var hash = hmac.ComputeHash(Encoding.UTF8.GetBytes(message));
            expected = Convert.ToBase64String(hash);
        }

        var result = sut.ComputeHMAC(message);

        Assert.That(result, Is.EqualTo(expected));
    }

I was using PCLCrypto but it kept crashing on Xamarin iOS, this was much cleaner and could be unit tested, wheras PCLCrypto required the platform apis so had to be deployed to a device.
","5671","<c#><.net><bouncycastle><sha256><hmac>","6","2","3","2017-11-09 14:54:20","36879373","1","1","","","","2016-04-26 22:06:08",""
"11939026","Google OAuth2 Service Account Access Token Request gives 'Invalid Request' Response","I'm trying to communicate with my app's enabled BigQuery API via the server to server method.
I've ticked all the boxes on this Google guide for constructing my JWT as best I can in C#.
And I've Base64Url encoded everything that was necessary.
However, the only response I get from google is a 400 Bad Request
""error"" : ""invalid_request""

I've made sure of all of the following from these other SO questions:  

The signature is properly encrypted using RSA and SHA256
I am using POST and using application/x-www-form-urlencoded content type 
Escaped all the backslashes in the claim set 
Tried various grant_type and assertion values in the POST data

I get the same result when I use Fiddler. The error message is frustratingly lacking in detail! What else can I try?! Here's my code:
class Program
{
    static void Main(string[] args)
    {
        // certificate
        var certificate = new X509Certificate2(@""<Path to my certificate>.p12"", ""notasecret"");

        // header
        var header = new { typ = ""JWT"", alg = ""RS256"" };

        // claimset
        var times = GetExpiryAndIssueDate();
        var claimset = new
        {
            iss = ""<email address of the client id of my app>"",
            scope = ""https://www.googleapis.com/auth/bigquery"",
            aud = ""https://accounts.google.com/o/oauth2/token"",
            iat = times[0],
            exp = times[1],
        };

        // encoded header
        var headerSerialized = JsonConvert.SerializeObject(header);
        var headerBytes = Encoding.UTF8.GetBytes(headerSerialized);
        var headerEncoded = Base64UrlEncode(headerBytes);

        // encoded claimset
        var claimsetSerialized = JsonConvert.SerializeObject(claimset);
        var claimsetBytes = Encoding.UTF8.GetBytes(claimsetSerialized);
        var claimsetEncoded = Base64UrlEncode(claimsetBytes);

        // input
        var input = headerEncoded + ""."" + claimsetEncoded;
        var inputBytes = Encoding.UTF8.GetBytes(input);

        // signiture
        var rsa = certificate.PrivateKey as RSACryptoServiceProvider;
        var cspParam = new CspParameters
        {
            KeyContainerName = rsa.CspKeyContainerInfo.KeyContainerName,
            KeyNumber = rsa.CspKeyContainerInfo.KeyNumber == KeyNumber.Exchange ? 1 : 2
        };
        var aescsp = new RSACryptoServiceProvider(cspParam) { PersistKeyInCsp = false };
        var signatureBytes = aescsp.SignData(inputBytes, ""SHA256"");
        var signatureEncoded = Base64UrlEncode(signatureBytes);

        // jwt
        var jwt = headerEncoded + ""."" + claimsetEncoded + ""."" + signatureEncoded;

        Console.WriteLine(jwt);

        var client = new HttpClient();
        var uri = ""https://accounts.google.com/o/oauth2/token"";
        var post = new Dictionary<string, string>
        {
            {""assertion"", jwt},
            {""grant_type"", ""urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Ajwt-bearer""}
        };
        var content = new FormUrlEncodedContent(post);
        var result = client.PostAsync(uri, content).Result;

        Console.WriteLine(result);
        Console.WriteLine(result.Content.ReadAsStringAsync().Result);
        Console.ReadLine();
    }

    private static int[] GetExpiryAndIssueDate()
    {
        var utc0 = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
        var issueTime = DateTime.Now;

        var iat = (int)issueTime.Subtract(utc0).TotalSeconds;
        var exp = (int)issueTime.AddMinutes(55).Subtract(utc0).TotalSeconds;

        return new[]{iat, exp};
    }

    private static string Base64UrlEncode(byte[] input)
    {
        var output = Convert.ToBase64String(input);
        output = output.Split('=')[0]; // Remove any trailing '='s
        output = output.Replace('+', '-'); // 62nd char of encoding
        output = output.Replace('/', '_'); // 63rd char of encoding
        return output;
    }
}

","Looks like my guess in the comment above was correct.  I got your code working by changing:
""urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Ajwt-bearer""
to:
""urn:ietf:params:oauth:grant-type:jwt-bearer""
Looks like you were accidentally double-encoding it.
I now get a response which looks something like:
{
  ""access_token"" : ""1/_5pUwJZs9a545HSeXXXXXuNGITp1XtHhZXXxxyyaacqkbc"",
  ""token_type"" : ""Bearer"",
  ""expires_in"" : 3600
}

Edited Note: please make sure to have the correct date/time/timezone/dst configuration on your server. Having the clock off by even a few seconds will result in an invalid_grant error.  http://www.time.gov will give the official time from the US govt, including in UTC.
","5658","<c#><oauth-2.0><sha256><google-bigquery><jwt>","12","12","2","2012-12-17 14:04:03","11942278","2","5","-1","","2017-05-23 12:06:18","2012-08-13 17:09:54",""
"11939026","Google OAuth2 Service Account Access Token Request gives 'Invalid Request' Response","I'm trying to communicate with my app's enabled BigQuery API via the server to server method.
I've ticked all the boxes on this Google guide for constructing my JWT as best I can in C#.
And I've Base64Url encoded everything that was necessary.
However, the only response I get from google is a 400 Bad Request
""error"" : ""invalid_request""

I've made sure of all of the following from these other SO questions:  

The signature is properly encrypted using RSA and SHA256
I am using POST and using application/x-www-form-urlencoded content type 
Escaped all the backslashes in the claim set 
Tried various grant_type and assertion values in the POST data

I get the same result when I use Fiddler. The error message is frustratingly lacking in detail! What else can I try?! Here's my code:
class Program
{
    static void Main(string[] args)
    {
        // certificate
        var certificate = new X509Certificate2(@""<Path to my certificate>.p12"", ""notasecret"");

        // header
        var header = new { typ = ""JWT"", alg = ""RS256"" };

        // claimset
        var times = GetExpiryAndIssueDate();
        var claimset = new
        {
            iss = ""<email address of the client id of my app>"",
            scope = ""https://www.googleapis.com/auth/bigquery"",
            aud = ""https://accounts.google.com/o/oauth2/token"",
            iat = times[0],
            exp = times[1],
        };

        // encoded header
        var headerSerialized = JsonConvert.SerializeObject(header);
        var headerBytes = Encoding.UTF8.GetBytes(headerSerialized);
        var headerEncoded = Base64UrlEncode(headerBytes);

        // encoded claimset
        var claimsetSerialized = JsonConvert.SerializeObject(claimset);
        var claimsetBytes = Encoding.UTF8.GetBytes(claimsetSerialized);
        var claimsetEncoded = Base64UrlEncode(claimsetBytes);

        // input
        var input = headerEncoded + ""."" + claimsetEncoded;
        var inputBytes = Encoding.UTF8.GetBytes(input);

        // signiture
        var rsa = certificate.PrivateKey as RSACryptoServiceProvider;
        var cspParam = new CspParameters
        {
            KeyContainerName = rsa.CspKeyContainerInfo.KeyContainerName,
            KeyNumber = rsa.CspKeyContainerInfo.KeyNumber == KeyNumber.Exchange ? 1 : 2
        };
        var aescsp = new RSACryptoServiceProvider(cspParam) { PersistKeyInCsp = false };
        var signatureBytes = aescsp.SignData(inputBytes, ""SHA256"");
        var signatureEncoded = Base64UrlEncode(signatureBytes);

        // jwt
        var jwt = headerEncoded + ""."" + claimsetEncoded + ""."" + signatureEncoded;

        Console.WriteLine(jwt);

        var client = new HttpClient();
        var uri = ""https://accounts.google.com/o/oauth2/token"";
        var post = new Dictionary<string, string>
        {
            {""assertion"", jwt},
            {""grant_type"", ""urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Ajwt-bearer""}
        };
        var content = new FormUrlEncodedContent(post);
        var result = client.PostAsync(uri, content).Result;

        Console.WriteLine(result);
        Console.WriteLine(result.Content.ReadAsStringAsync().Result);
        Console.ReadLine();
    }

    private static int[] GetExpiryAndIssueDate()
    {
        var utc0 = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
        var issueTime = DateTime.Now;

        var iat = (int)issueTime.Subtract(utc0).TotalSeconds;
        var exp = (int)issueTime.AddMinutes(55).Subtract(utc0).TotalSeconds;

        return new[]{iat, exp};
    }

    private static string Base64UrlEncode(byte[] input)
    {
        var output = Convert.ToBase64String(input);
        output = output.Split('=')[0]; // Remove any trailing '='s
        output = output.Replace('+', '-'); // 62nd char of encoding
        output = output.Replace('/', '_'); // 63rd char of encoding
        return output;
    }
}

","Be sure to use DateTime.UtcNow instead of DateTime.Now in the GetExpiryAndIssueDate method.
","5658","<c#><oauth-2.0><sha256><google-bigquery><jwt>","12","5","2","2012-12-17 14:04:03","11942278","2","5","-1","","2017-05-23 12:06:18","2012-08-13 17:09:54",""
"17862491","Is there a keyed SHA256 hash algorithm that is FIPS compliant for .NET?","I am creating a keyed SHA256 hash using HMACSHA256 with the following code:
HMACSHA256 hmac = new HMACSHA256(Encoding.UTF8.GetBytes(secretKey);
byte[] hash = hmac.ComputeHash(Encoding.UTF8.GetBytes(data));

string hashResult = string.Empty;
for (int i = 0; i < hash.Length; i++)
{
    hashResult += hash[i].ToString(""x2""); // hex format
}

This is working just fine, however, it fails in a FIPS enabled environment because HMACSHA256 uses an underlying SHA256Managed implementation which is itself not FIPS compliant.
Searching through MSDN documentation I find that the only SHA256 implementation of KeyedHashAlgorithm is HMACSHA256.
I am required to sign web service requests with a keyed SHA256 hash (so I can't change the hash type), and I must be able to run in a FIPS enabled environment.
Googling shows that both SHA256CryptoServiceProvider and SHA256Cng are FIPS compliant ways to create SHA256 hashes, but neither seem to support the creation of keyed hashes.
","No, there is not.  Here is a list of ones that are (scroll down to FIPS.sys Algorithms section).
A work around I've used int he past is here, but I'm not sure if that will work for web services.  This solution could work.
","5569","<c#><.net><hash><sha256><fips>","3","4","3","2014-07-03 03:56:51","17862710","0","1","","","","2013-07-25 15:34:06",""
"17862491","Is there a keyed SHA256 hash algorithm that is FIPS compliant for .NET?","I am creating a keyed SHA256 hash using HMACSHA256 with the following code:
HMACSHA256 hmac = new HMACSHA256(Encoding.UTF8.GetBytes(secretKey);
byte[] hash = hmac.ComputeHash(Encoding.UTF8.GetBytes(data));

string hashResult = string.Empty;
for (int i = 0; i < hash.Length; i++)
{
    hashResult += hash[i].ToString(""x2""); // hex format
}

This is working just fine, however, it fails in a FIPS enabled environment because HMACSHA256 uses an underlying SHA256Managed implementation which is itself not FIPS compliant.
Searching through MSDN documentation I find that the only SHA256 implementation of KeyedHashAlgorithm is HMACSHA256.
I am required to sign web service requests with a keyed SHA256 hash (so I can't change the hash type), and I must be able to run in a FIPS enabled environment.
Googling shows that both SHA256CryptoServiceProvider and SHA256Cng are FIPS compliant ways to create SHA256 hashes, but neither seem to support the creation of keyed hashes.
","Officially you may be out of luck, but it should be relatively easy to build a HMAC_SHA256 out of SHA-256. Just take a look at the Wikipedia page to see how easy this is.
Note that it may be the case that HMAC was not approved in FIPS mode because it is vulnerable to side channel attacks. In that case you should make sure that there is some protection against side channel attacks.
It is a bit dangerous to build your own crypto algorithms out of cryptographic primitives. If you yourself will try and claim FIPS level security then this may become an issue. But for most users it is enough if you say that you only use NIST compliant algorithms. It is up to you how far you are willing to go down this line...
","5569","<c#><.net><hash><sha256><fips>","3","0","3","2014-07-03 03:56:51","17862710","0","1","","","","2013-07-25 15:34:06",""
"17862491","Is there a keyed SHA256 hash algorithm that is FIPS compliant for .NET?","I am creating a keyed SHA256 hash using HMACSHA256 with the following code:
HMACSHA256 hmac = new HMACSHA256(Encoding.UTF8.GetBytes(secretKey);
byte[] hash = hmac.ComputeHash(Encoding.UTF8.GetBytes(data));

string hashResult = string.Empty;
for (int i = 0; i < hash.Length; i++)
{
    hashResult += hash[i].ToString(""x2""); // hex format
}

This is working just fine, however, it fails in a FIPS enabled environment because HMACSHA256 uses an underlying SHA256Managed implementation which is itself not FIPS compliant.
Searching through MSDN documentation I find that the only SHA256 implementation of KeyedHashAlgorithm is HMACSHA256.
I am required to sign web service requests with a keyed SHA256 hash (so I can't change the hash type), and I must be able to run in a FIPS enabled environment.
Googling shows that both SHA256CryptoServiceProvider and SHA256Cng are FIPS compliant ways to create SHA256 hashes, but neither seem to support the creation of keyed hashes.
","I know this is old but it looks like Microsoft addressed this issue.  I'm running .NET 4.5.1 on Windows 8.  I can't speak to what version of the BCL this was fixed or OS.
this.m_hash1 = HMAC.GetHashAlgorithmWithFipsFallback((Func<HashAlgorithm>) (() => (HashAlgorithm) new SHA256Managed()), (Func<HashAlgorithm>) (() => HashAlgorithm.Create(""System.Security.Cryptography.SHA256CryptoServiceProvider"")));

","5569","<c#><.net><hash><sha256><fips>","3","2","3","2014-07-03 03:56:51","17862710","0","1","","","","2013-07-25 15:34:06",""
"9245235","Go, midstate SHA-256 hash","Having 128 bytes of data, for example:
00000001c570c4764aadb3f09895619f549000b8b51a789e7f58ea750000709700000000103ca064f8c76c390683f8203043e91466a7fcc40e6ebc428fbcc2d89b574a864db8345b1b00b5ac00000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000080020000

And wanting to perform SHA-256 hash on it, one would have to separate it into two 64 bytes of data and hash them individually before hashing the results together. If one was to often change some bits in the second half of the data, one could simplify the calculations and hash the first half of the data only once. How would one do that in Google Go? I tried calling
func SingleSHA(b []byte)([]byte){
    var h hash.Hash = sha256.New()
    h.Write(b)
    return h.Sum()
}

But instead of the proper answer
e772fc6964e7b06d8f855a6166353e48b2562de4ad037abc889294cea8ed1070

I got
12E84A43CBC7689AE9916A30E1AA0F3CA12146CBF886B60103AEC21A5CFAA268

When discussing the matter on Bitcoin forum, someone mentioned that there could be some problems with getting that midstate hash.
How do I calculate a midstate SHA-256 hash in Google Go?
","The Go code you have is the right way to compute sha256 of a stream of bytes.
Most likely the answer is that what you want to do is not sha256. Specifically:

one would have to separate it into two 64 bits of data and hash them individually before hashing the results together. If one was to often change some bits in the second half of the data, one could simplify the calculations and hash the first half of the data only once.

is not a valid way to calculate sha256 (read http://doc.golang.org/src/pkg/crypto/sha256/sha256.go to e.g. see that sha256 does its work on blocks of data, which must be padded etc.). 
The algorithm you described calculates something, but not sha256. 
Since you know the expected value you presumably have some reference implementation of your algorithm in another language so just do a line-by-line port to Go.
Finally, it's a dubious optimization in any case. 128 bits is 16 bytes. Hashing cost is usually proportional to the size of data. At 16 bytes, the cost is so small that the additional work of trying to be clever by splitting data in 8 byte parts will likely cost more than what you saved.
","5560","<hash><go><state><sha256><sha>","3","3","4","2017-10-05 18:59:15","9322486","2","1","102371","","2017-10-05 18:59:15","2012-02-12 00:11:14",""
"9245235","Go, midstate SHA-256 hash","Having 128 bytes of data, for example:
00000001c570c4764aadb3f09895619f549000b8b51a789e7f58ea750000709700000000103ca064f8c76c390683f8203043e91466a7fcc40e6ebc428fbcc2d89b574a864db8345b1b00b5ac00000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000080020000

And wanting to perform SHA-256 hash on it, one would have to separate it into two 64 bytes of data and hash them individually before hashing the results together. If one was to often change some bits in the second half of the data, one could simplify the calculations and hash the first half of the data only once. How would one do that in Google Go? I tried calling
func SingleSHA(b []byte)([]byte){
    var h hash.Hash = sha256.New()
    h.Write(b)
    return h.Sum()
}

But instead of the proper answer
e772fc6964e7b06d8f855a6166353e48b2562de4ad037abc889294cea8ed1070

I got
12E84A43CBC7689AE9916A30E1AA0F3CA12146CBF886B60103AEC21A5CFAA268

When discussing the matter on Bitcoin forum, someone mentioned that there could be some problems with getting that midstate hash.
How do I calculate a midstate SHA-256 hash in Google Go?
","In sha256.go, at the start of function Sum() the implementation is making a copy of the SHA256 state. The underlying datatype of SHA256 (struct digest) is private to the sha256 package.
I would suggest to make your own private copy of the sha256.go file (it is a small file). Then add a Copy() function to save the current state of the digest:
func (d *digest) Copy() hash.Hash {
    d_copy := *d
    return &d_copy
}

Then simply call the Copy() function to save a midstate SHA256 hash.
","5560","<hash><go><state><sha256><sha>","3","2","4","2017-10-05 18:59:15","9322486","2","1","102371","","2017-10-05 18:59:15","2012-02-12 00:11:14",""
"9245235","Go, midstate SHA-256 hash","Having 128 bytes of data, for example:
00000001c570c4764aadb3f09895619f549000b8b51a789e7f58ea750000709700000000103ca064f8c76c390683f8203043e91466a7fcc40e6ebc428fbcc2d89b574a864db8345b1b00b5ac00000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000080020000

And wanting to perform SHA-256 hash on it, one would have to separate it into two 64 bytes of data and hash them individually before hashing the results together. If one was to often change some bits in the second half of the data, one could simplify the calculations and hash the first half of the data only once. How would one do that in Google Go? I tried calling
func SingleSHA(b []byte)([]byte){
    var h hash.Hash = sha256.New()
    h.Write(b)
    return h.Sum()
}

But instead of the proper answer
e772fc6964e7b06d8f855a6166353e48b2562de4ad037abc889294cea8ed1070

I got
12E84A43CBC7689AE9916A30E1AA0F3CA12146CBF886B60103AEC21A5CFAA268

When discussing the matter on Bitcoin forum, someone mentioned that there could be some problems with getting that midstate hash.
How do I calculate a midstate SHA-256 hash in Google Go?
","I ran two Go benchmarks on your 128 bytes of data, using an Intel i5 2.70 GHz CPU. First,  1,000 times, I wrote all 128 bytes to the SHA256 hash and read the sum, which took a total of about 9,285,000 nanoseconds. Second, I wrote the first 64 bytes to the SHA256 hash once and then, 1,000 times, I wrote the second 64 bytes to a copy of the SHA256 hash and read the sum, which took a total of about 6,492,371 nanoseconds. The second benchmark, which assumed the first 64 bytes are invariant, ran in 30% less time than the first benchmark.
Using the first method, you could calculate about 9,305,331,179 SHA256 128-byte sums per day before buying a faster CPU. Using the second method, you could calculate 13,307,927,103 SHA256 128-byte sums per day, assuming the first 64 bytes are invariant 1,000 times in a row, before buying a faster CPU. How many SHA256 128-byte sums per day do you need to calculate? For how many SHA256 128-byte sums per day are the first 64 bytes are invariant?
What benchmarks did you run and what were the results?
","5560","<hash><go><state><sha256><sha>","3","0","4","2017-10-05 18:59:15","9322486","2","1","102371","","2017-10-05 18:59:15","2012-02-12 00:11:14",""
"9245235","Go, midstate SHA-256 hash","Having 128 bytes of data, for example:
00000001c570c4764aadb3f09895619f549000b8b51a789e7f58ea750000709700000000103ca064f8c76c390683f8203043e91466a7fcc40e6ebc428fbcc2d89b574a864db8345b1b00b5ac00000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000080020000

And wanting to perform SHA-256 hash on it, one would have to separate it into two 64 bytes of data and hash them individually before hashing the results together. If one was to often change some bits in the second half of the data, one could simplify the calculations and hash the first half of the data only once. How would one do that in Google Go? I tried calling
func SingleSHA(b []byte)([]byte){
    var h hash.Hash = sha256.New()
    h.Write(b)
    return h.Sum()
}

But instead of the proper answer
e772fc6964e7b06d8f855a6166353e48b2562de4ad037abc889294cea8ed1070

I got
12E84A43CBC7689AE9916A30E1AA0F3CA12146CBF886B60103AEC21A5CFAA268

When discussing the matter on Bitcoin forum, someone mentioned that there could be some problems with getting that midstate hash.
How do I calculate a midstate SHA-256 hash in Google Go?
","Bitcoin-related byte operations are a bit tricky, as they tend to switch endianness at a whim. First of, we take the initial []byte array representing
00000001c570c4764aadb3f09895619f549000b8b51a789e7f58ea750000709700000000103ca064f8c76c390683f8203043e91466a7fcc40e6ebc428fbcc2d89b574a864db8345b1b00b5ac00000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000080020000

Then, we separate out the first half of the array, obtaining:
00000001c570c4764aadb3f09895619f549000b8b51a789e7f58ea750000709700000000103ca06 4f8c76c390683f8203043e91466a7fcc40e6ebc428fbcc2d8

After that, we need to swap some bytes around. We reverse the order of bytes in every slice of 4 bytes, thusly obtaining:
0100000076C470C5F0B3AD4A9F619598B80090549E781AB575EA587F977000000000000064A03C10396CC7F820F8830614E94330C4FCA76642BC6E0ED8C2BC8F

And that is the array we will be using for calculating the midstate. Now, we need to alter the file hash.go, adding to type Hash interface:
Midstate() []byte

And change the file sha256.go, adding this function:
func (d *digest) Midstate() []byte {
    var answer []byte
    for i:=0;i<len(d.h);i++{
        answer=append(answer[:], Uint322Hex(d.h[i])...)
    }
    return answer
}

Where Uint322Hex converts an uint32 variable into a []byte variable. Having all that, we can call:
var h BitSHA.Hash = BitSHA.New()
h.Write(Str2Hex(""0100000076C470C5F0B3AD4A9F619598B80090549E781AB575EA587F977000000000000064A03C10396CC7F820F8830614E94330C4FCA76642BC6E0ED8C2BC8F""))
log.Printf(""%X"", h.Midstate())

Where Str2Hex turns a string into []byte. The result is:
69FC72E76DB0E764615A858F483E3566E42D56B2BC7A03ADCE9492887010EDA8

Remembering the proper answer:
e772fc6964e7b06d8f855a6166353e48b2562de4ad037abc889294cea8ed1070

We can compare them:
69FC72E7 6DB0E764 615A858F 483E3566 E42D56B2 BC7A03AD CE949288 7010EDA8
e772fc69 64e7b06d 8f855a61 66353e48 b2562de4 ad037abc 889294ce a8ed1070

So we can see that we just need to swap the bytes around a bit in each slice of 4 bytes and we will have the proper ""midstate"" used by Bitcoin pools and miners (until it will no longer be needed due to being deprecated).
","5560","<hash><go><state><sha256><sha>","3","5","4","2017-10-05 18:59:15","9322486","2","1","102371","","2017-10-05 18:59:15","2012-02-12 00:11:14",""
"24732170","Exact same hashing in java as PHP with salt? (SHA-256)","I can simply hash in PHP with a salt:
$orig_pw = ""abcd"";
$salt = 5f8f041b75042e56;
$password = hash('sha256', $orig_pw . $salt);

(This is not how I implement it, this is just an example. Salt is different for everyone)
And with this, the stored password is:
bc20a09bc9b3d3e1fecf0ed5742769726c93573d4133dbd91e2d309155fa9929

But if I try to do the same in Java, I get a different result. I tried String password = ""abcd"";
byte[] salt = hexStringToByteArray(""5f8f041b75042e56"");

try {
    System.out.println(new String(getHash(password, salt)));
} catch (NoSuchAlgorithmException e1) {
    e1.printStackTrace();
}

And the two methods:
public byte[] getHash(String password, byte[] salt) throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
        digest.reset();
        digest.update(salt);
        try {
            return digest.digest(password.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return null;
    }


public byte[] hexStringToByteArray(String s) {
        int len = s.length();
        byte[] data = new byte[len / 2];
        for (int i = 0; i < len; i += 2) {
            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
                                 + Character.digit(s.charAt(i+1), 16));
        }
        return data;
    }

The result is:
/¬1¶ĆĽëüFd?[$?¶»_9ËZ»ç¶S‘ĘĹ—×©

Which coded to hex is not even close to it:
2fac31b6434c14ebfc46643f5b243fb6bb5f39cb5abb10e7b65391454c97d7a90d0a

Can anyone help with this?
","I think 
digest.update(salt);
digest.digest(password.getBytes(""UTF-8""));

is equivalent to:
hash('sha256', $salt . $orig_pw);

So the hash and salt are swapped. Can you confirm this?
","5414","<java><php><sha256>","4","2","2","2014-07-14 10:23:42","24732921","0","4","3757728","","2014-07-14 08:20:48","2014-07-14 08:14:51",""
"24732170","Exact same hashing in java as PHP with salt? (SHA-256)","I can simply hash in PHP with a salt:
$orig_pw = ""abcd"";
$salt = 5f8f041b75042e56;
$password = hash('sha256', $orig_pw . $salt);

(This is not how I implement it, this is just an example. Salt is different for everyone)
And with this, the stored password is:
bc20a09bc9b3d3e1fecf0ed5742769726c93573d4133dbd91e2d309155fa9929

But if I try to do the same in Java, I get a different result. I tried String password = ""abcd"";
byte[] salt = hexStringToByteArray(""5f8f041b75042e56"");

try {
    System.out.println(new String(getHash(password, salt)));
} catch (NoSuchAlgorithmException e1) {
    e1.printStackTrace();
}

And the two methods:
public byte[] getHash(String password, byte[] salt) throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
        digest.reset();
        digest.update(salt);
        try {
            return digest.digest(password.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return null;
    }


public byte[] hexStringToByteArray(String s) {
        int len = s.length();
        byte[] data = new byte[len / 2];
        for (int i = 0; i < len; i += 2) {
            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
                                 + Character.digit(s.charAt(i+1), 16));
        }
        return data;
    }

The result is:
/¬1¶ĆĽëüFd?[$?¶»_9ËZ»ç¶S‘ĘĹ—×©

Which coded to hex is not even close to it:
2fac31b6434c14ebfc46643f5b243fb6bb5f39cb5abb10e7b65391454c97d7a90d0a

Can anyone help with this?
","Apart from the order being swapped, it looks like in PHP you're treating the salt value as a literal string to be appended to the password, while in Java you do a hex conversion of the salt first and then use the resulting bytes to update the MessageDigest. This will obviously yield different results. Looking only at the salt:
PHP: Salt -> To bytes (literal) -> SHA-256
Java: Salt -> To bytes (unhex) -> SHA-256
I just tried your Java code, and it's absolutely fine. I also tried to hash the same value in PHP as in Java and it gave me identical results.
The Java equivalent to your PHP code would be:
String password = ""abcd"";
String salt = ""5f8f041b75042e56"";

try {
    MessageDigest digest = MessageDigest.getInstance(""SHA-256"");

    return digest.digest((password + salt).getBytes(""UTF-8""));
} catch (UnsupportedEncodingException | NoSuchAlgorithmException e) {
    return null;
}

After hexing the bytes it returns the following result:
60359BC8A0B09898335AA5A037B1E1B9CE3A1FE0D4CEF13514901FB32F3BCEB0

And in PHP doing:
<?
echo hash('sha256', ""abcd"".""5f8f041b75042e56"");
?>

Returns exactly the same.
","5414","<java><php><sha256>","4","7","2","2014-07-14 10:23:42","24732921","0","4","3757728","","2014-07-14 08:20:48","2014-07-14 08:14:51",""
"9548700","Symfony2 Security Encoders not recognising UserInterface instance","I have recently started setting up the security for my Symfony2 project. I opted to encode with sha256 using a salt. When I tried to login with a sample account in the database (with self-calculated sha256 salt/hash), it kept failing without giving me any error messages and I could not figure out why.
I decided to put some simple code in the loginAction() method of my Controller. This is the method that Symfony2 calls when a user fails to login using the specified form. I entered the following code:
$factory = $this->get('security.encoder_factory');
$em = $this->container->get('doctrine')->getEntityManager();
$userRep = $em->getRepository('MyProjectMyBundle:Users');
$user = $userRep->find(2);

$encoder = $factory->getEncoder($user);
$password = $encoder->encodePassword('cookie', 'thisisasalt');
$user->setPassword($password);
print($password);

However, when I tried to login, Symfony2 gave me the following error:
Catchable Fatal Error: Argument 1 passed to Symfony\Component\Security\Core\Encoder\EncoderFactory::getEncoder() must be an instance of Symfony\Component\Security\Core\User\UserInterface, instance of MyProject\MyBundle\Entity\Users given, called in /var/www/Symfony/src/MyProject/MyBundle/Controller/MainController.php on line 35 and defined in /var/www/Symfony/vendor/symfony/src/Symfony/Component/Security/Core/Encoder/EncoderFactory.php line 33

So basically, it's saying that the argument of getEncoder() must be an instance of Symfony\Component\Security\Core\User\UserInterface. However, when I inspect MyProject\MyBundle\Entity\Users.php, it starts with the following lines:
<?php
namespace MyProject\MyBundle\Entity;

use Symfony\Component\Security\Core\User\UserInterface;
use Doctrine\ORM\Mapping as ORM;

...

So the Users class actually implements the UserInterface class. It contains all the functions in UserInterface class. I have created all these files in the way the Symfony2 tutorial told me to. What is the reason Symfony2 doesn't recognize my Users instance as an UserInterface instance?
P.S.: The database was created by someone else, I just have to work with it. The Users table contains many more information than just that required by UserInterface.
","Nevermind, I am an idiot.
I forgot that, in addition to including the UserInterface class, you also have to make sure your class implements the UserInterface.
I changed it to this:
class Users implements UserInterface

It now works perfectly.
","5230","<security><symfony><sha256><encoder>","3","13","1","2012-03-04 09:36:46","9553822","0","1","","","","2012-03-03 18:29:05",""
"14837421","I need to Hash a message with a key using Sha256 on windows 8","So in the old days I used to use System.Security.Cryptography which is not available in windows 8. what i found in windows 8 was windows.security
but i didn't find any examples on how to use Sha256 with a key.
This is the old code that I used with System.Security.Cryptography
        string appID = ""appid"";
        string key = ""password"";
        var hmacsha256 = new HMACSHA256(Encoding.Default.GetBytes(key));
        hmacsha256.ComputeHash(Encoding.Default.GetBytes(appID));
        string k = """";
        foreach (byte test in hmacsha256.Hash)
        {
            k += test.ToString(""X2"");
        }

","You can use the classes in Windows.Security.Cryptography to create a message authentication code (a keyed hash in the question).  Here is an example.  Please treat it as demo code, provided as-is.  Do a full security review of all code associated with security.
var clear = ""foobarbaz"";
var bytes = CryptographicBuffer.ConvertStringToBinary(clear, BinaryStringEncoding.Utf8);
var macProvider = MacAlgorithmProvider.OpenAlgorithm(MacAlgorithmNames.HmacSha256);
var rndKey = CryptographicBuffer.GenerateRandom(macProvider.MacLength);
var key = macProvider.CreateKey(rndKey);
var cypherMac = CryptographicEngine.Sign(key, bytes);
var asString = CryptographicBuffer.EncodeToBase64String(cypherMac);

","5216","<c#><windows-8><sha256>","1","1","4","2015-01-08 20:24:25","14843037","4","","1093516","","2013-02-16 21:57:53","2013-02-12 16:42:09",""
"14837421","I need to Hash a message with a key using Sha256 on windows 8","So in the old days I used to use System.Security.Cryptography which is not available in windows 8. what i found in windows 8 was windows.security
but i didn't find any examples on how to use Sha256 with a key.
This is the old code that I used with System.Security.Cryptography
        string appID = ""appid"";
        string key = ""password"";
        var hmacsha256 = new HMACSHA256(Encoding.Default.GetBytes(key));
        hmacsha256.ComputeHash(Encoding.Default.GetBytes(appID));
        string k = """";
        foreach (byte test in hmacsha256.Hash)
        {
            k += test.ToString(""X2"");
        }

","Per the .NET Framework documentation, the class you used is available in .NET 4.5 and supported on Windows 8.
http://msdn.microsoft.com/en-us/library/system.security.cryptography.hmacsha256.aspx
If you're talking about the WinRT runtime, this might be what you want:  http://channel9.msdn.com/Forums/TechOff/Porting-to-WinRT/4df7586e1ef5400682eda00f0143b610
","5216","<c#><windows-8><sha256>","1","1","4","2015-01-08 20:24:25","14843037","4","","1093516","","2013-02-16 21:57:53","2013-02-12 16:42:09",""
"14837421","I need to Hash a message with a key using Sha256 on windows 8","So in the old days I used to use System.Security.Cryptography which is not available in windows 8. what i found in windows 8 was windows.security
but i didn't find any examples on how to use Sha256 with a key.
This is the old code that I used with System.Security.Cryptography
        string appID = ""appid"";
        string key = ""password"";
        var hmacsha256 = new HMACSHA256(Encoding.Default.GetBytes(key));
        hmacsha256.ComputeHash(Encoding.Default.GetBytes(appID));
        string k = """";
        foreach (byte test in hmacsha256.Hash)
        {
            k += test.ToString(""X2"");
        }

","So this is the final working code
public static string ComputeSignature (string algorithmName, string content, string key, BinaryStringEncoding encoding = BinaryStringEncoding.Utf8)
{   
    var algorithmProvider = MacAlgorithmProvider.OpenAlgorithm(algorithmName);
    var contentBuffer = CryptographicBuffer.ConvertStringToBinary(content, encoding);
    var keyBuffer = CryptographicBuffer.ConvertStringToBinary(key, encoding);
    var signatureKey = algorithmProvider.CreateKey(keyBuffer);
    var signedBuffer = CryptographicEngine.Sign(signatureKey, contentBuffer);
    return CryptographicBuffer.EncodeToHexString(signedBuffer);
}

","5216","<c#><windows-8><sha256>","1","6","4","2015-01-08 20:24:25","14843037","4","","1093516","","2013-02-16 21:57:53","2013-02-12 16:42:09",""
"14837421","I need to Hash a message with a key using Sha256 on windows 8","So in the old days I used to use System.Security.Cryptography which is not available in windows 8. what i found in windows 8 was windows.security
but i didn't find any examples on how to use Sha256 with a key.
This is the old code that I used with System.Security.Cryptography
        string appID = ""appid"";
        string key = ""password"";
        var hmacsha256 = new HMACSHA256(Encoding.Default.GetBytes(key));
        hmacsha256.ComputeHash(Encoding.Default.GetBytes(appID));
        string k = """";
        foreach (byte test in hmacsha256.Hash)
        {
            k += test.ToString(""X2"");
        }

","This works for me:
using Windows.Security.Cryptography;
using Windows.Security.Cryptography.Core;

string str = ""your string"";
string hash = CryptographicBuffer.EncodeToHexString(HashAlgorithmProvider.OpenAlgorithm(HashAlgorithmNames.Sha256).HashData(CryptographicBuffer.ConvertStringToBinary(str, BinaryStringEncoding.Utf8)));

","5216","<c#><windows-8><sha256>","1","-1","4","2015-01-08 20:24:25","14843037","4","","1093516","","2013-02-16 21:57:53","2013-02-12 16:42:09",""
"6269719","Little endian data and sha 256","I have to generate sha256 hashes of data that is in little endian form. I would like to know if I have to convert it to big endian first, before using the sha 256 algorithm. Or if, the algorithm is ""endian-agnostic"".
EDIT: Sorry, I think I wasnt clear. What I would like to know is the following: The sha256 algorithm requires to pad the end of a message with certain bits. The first step is to add a 1 at the end of the message. Then, to pad it with zero up to the end. At the very end, you must add the length of the message in bits. What I would like to know is if this padding can be performed in little endian. For example, for a 640 bit message, I could write the last word as 0x280 (in big endian), or 0x8002000 (in little endian). Can this padding be done in little endian?
","The SHA-256 implementation itself should take care of padding - you shouldn't have to deal with that unless you're implementing your own specialized SHA-256 code.  If you are, note that the padding rules specified in the ""pre-processing step"" say that the length is a 64-bit big-endian integer.  See SHA-2 - Wikipedia
It's hard to even figure out what ""endian-agnostic"" would mean, but the order of all the bits, bytes and words for a hash algorithm matter a whole lot, so I sure wouldn't use that term.
","5200","<endianness><sha256>","5","1","3","2016-08-24 11:04:19","6631450","3","","110432","","2011-06-07 19:22:41","2011-06-07 18:10:12",""
"6269719","Little endian data and sha 256","I have to generate sha256 hashes of data that is in little endian form. I would like to know if I have to convert it to big endian first, before using the sha 256 algorithm. Or if, the algorithm is ""endian-agnostic"".
EDIT: Sorry, I think I wasnt clear. What I would like to know is the following: The sha256 algorithm requires to pad the end of a message with certain bits. The first step is to add a 1 at the end of the message. Then, to pad it with zero up to the end. At the very end, you must add the length of the message in bits. What I would like to know is if this padding can be performed in little endian. For example, for a 640 bit message, I could write the last word as 0x280 (in big endian), or 0x8002000 (in little endian). Can this padding be done in little endian?
","SHA256 is endian-agnostic if all you want is a good hash.  But if you are writing SHA256 and want to the same results with a correct implementation then you must play games on little endian hardware.  SHA256 combines arithmetic addition (mod 2*32) and boolean operation thus is not endian-agnostic internally.
","5200","<endianness><sha256>","5","6","3","2016-08-24 11:04:19","6631450","3","","110432","","2011-06-07 19:22:41","2011-06-07 18:10:12",""
"6269719","Little endian data and sha 256","I have to generate sha256 hashes of data that is in little endian form. I would like to know if I have to convert it to big endian first, before using the sha 256 algorithm. Or if, the algorithm is ""endian-agnostic"".
EDIT: Sorry, I think I wasnt clear. What I would like to know is the following: The sha256 algorithm requires to pad the end of a message with certain bits. The first step is to add a 1 at the end of the message. Then, to pad it with zero up to the end. At the very end, you must add the length of the message in bits. What I would like to know is if this padding can be performed in little endian. For example, for a 640 bit message, I could write the last word as 0x280 (in big endian), or 0x8002000 (in little endian). Can this padding be done in little endian?
","Let me reply regarding sha 256 as well as sha 512.
in short:
The algorithm itself is endian agnostic. The endian sensitive parts are when data is imported from a byte buffer to the algorithm working variables and when it is exported back to the digest result - also a byte buffer. If the import / export include casting, then endian matters. 
Where could casting occur: 
In sha 512 there is a working buffer of 128 bytes. 
In my code its defined like this:
    union
    {
        U64   w [80]; (see U64 example below)
        byte  buffer [128];
    };

Input data is copied to this byte buffer and then work is done on W. This means the data was casted to some 64 bit type. This data will have to be swapped. in my case its swapped for little endian machines.
A better method would be to prepare a get macro that takes each byte and places it in its correct place in the u64 type.
When the algorithm is done the digest result is output from the working variables to some byte buffer, if this is done by memcpy it will also have to be swapped.
Another casting could occur when implementing sha 512 - which is designed for 64 bit machines - on 32 bit machines. In my case I have a 64 bit type that is defined:
    typedef struct {
        uint high;
        uint low;
    } U64;

Assume I define it for little endian as well, as follows:
    typedef struct {
        uint low;
        uint high;
    } U64;

And then the k algorithm init is done like this:
    static const SHA_U64 k[80] =  
    { 
        {0xD728AE22, 0x428A2F98}, {0x23EF65CD, 0x71374491}, ...
        ...
        ...
    }

But i need the logic value of k[0].high to be the same in any machine. 
So in this example I will need another k array with high and low values swapped.
After the data is stored in the working parameters any bitwise manipulation would have the same result on both big/little endian machines. 
Good method would be to avoid any casting: 
Import bytes from input buffer to your working parameters using macro.
Work with logical values without thinking about the memory mapping.
Export output to digest result with a macro.
Macro for taking 32 bits from a byte buffer to int32 (BE = big endian):
    #define GET_BE_BYTES_FROM32(a) 
    ((((NQ_UINT32) (a)[0]) << 24) | 
    (((NQ_UINT32) (a)[1]) << 16)  | 
    (((NQ_UINT32) (a)[2]) << 8)   | 
    ((NQ_UINT32) (a)[3])) 

    #define GET_LE_BYTES_FROM32(a) 
    ((((NQ_UINT32) (a)[3]) << 24) | 
    (((NQ_UINT32) (a)[2]) << 16)  | 
    (((NQ_UINT32) (a)[1]) << 8)   | 
    ((NQ_UINT32) (a)[0])) 

","5200","<endianness><sha256>","5","2","3","2016-08-24 11:04:19","6631450","3","","110432","","2011-06-07 19:22:41","2011-06-07 18:10:12",""
"46509572","Excel formula-based function for SHA256 / SHA512 hashing without VBA or macros","It's the year 2017 and anybody who needs to use hashes should avoid 'broken' ones such as MD5, if security is important. Has anybody found or created a way to do more secure SHA256 or SHA512 hashing in Excel, without using VBA or macros?
A spectacular example of this being done before was over 3½ years ago with MD5 (as seen in this SO: MD5 Hash function in excel without using VBA).
Reason for avoiding VBA/Macros: Compatibility with mobile devices, such as Excel for iOS.
Side Note: The original Stack Overflow post has a successful answer with a dead link, here is a new link for reference: https://tzamtzis.gr/2017/web-analytics/excel-function-md5-hashing-without-vba/
","I've got one. Limits to 55 characters and designed more for educational purposes (i.e. how to see how SHA256 works in Excel....?).
To recap...

No VBA.
No named ranges.
No arrays.
Uses standard Excel functions found in 2007 and higher.
Format is *.xlsx

Download from OneDrive
or 
Download from Google Drive
","5138","<excel><hash><excel-formula><sha256><sha512>","6","3","1","2019-06-26 07:51:22","56767828","1","1","","","","2017-10-01 05:41:21",""
"43631322","Since which java version SHA-256 and SHA256withRSA are supported for timestamp at signed jar files","I have the following entry in the signature of my jar file
Timestamped by ""CN=GlobalSign TSA for Advanced - G3 - 001-02, O=GMO GlobalSign K.K., C=JP"" on Mo Apr 10 11:48:34 UTC 2017
 Timestamp digest algorithm: SHA-256
 Timestamp signature algorithm: SHA256withRSA, 2048-bit key

I already found out that the SHA-256 at the timestamp digest algoirthm and the SHA256withRSA at the timestamp signature algorithm are causing problems when running the jar file on a system which java version is below 1.7.0_76 (jar file is treaded as unsigned).
Can somebody tell me from which java versions on these two algorithms are supported at the timestamp digest and at the timestamp signature?
","One solution would be to just not time-stamp the jar file.
Waiting for some better recommendation...
","5127","<java><security><sha256>","5","0","2","2017-06-16 11:13:30","","3","1","","","","2017-04-26 10:17:50",""
"43631322","Since which java version SHA-256 and SHA256withRSA are supported for timestamp at signed jar files","I have the following entry in the signature of my jar file
Timestamped by ""CN=GlobalSign TSA for Advanced - G3 - 001-02, O=GMO GlobalSign K.K., C=JP"" on Mo Apr 10 11:48:34 UTC 2017
 Timestamp digest algorithm: SHA-256
 Timestamp signature algorithm: SHA256withRSA, 2048-bit key

I already found out that the SHA-256 at the timestamp digest algoirthm and the SHA256withRSA at the timestamp signature algorithm are causing problems when running the jar file on a system which java version is below 1.7.0_76 (jar file is treaded as unsigned).
Can somebody tell me from which java versions on these two algorithms are supported at the timestamp digest and at the timestamp signature?
","Java version below 1.7.0_76 not supporting SHA-256 for timestamping caused by https://bugs.openjdk.java.net/browse/JDK-8049480
(The fix included in 1.7.0_76 http://www.oracle.com/technetwork/java/javase/2col/7u76-bugfixes-2389098.html)
From ""Oracle JRE and JDK Cryptographic Roadmap"", SHA-1 still not be planned to disable on code signing.
So I think the best choice (to support old Java version) for now is using SHA-1 as Timestamping algorithm. (Use below 8u101, 7u111 for signing OR Use the -tsadigestalg option on 8u101, 7u111 or above)
I have tested jar file signed with
Digest algorithm: SHA-256
Signature algorithm: SHA256withRSA, 2048-bit key
Timestamp digest algorithm: SHA-1
Timestamp signature algorithm: SHA1withRSA, 2048-bit key

work fine with Java 7, 8, 9(ea+174) 
","5127","<java><security><sha256>","5","1","2","2017-06-16 11:13:30","","3","1","","","","2017-04-26 10:17:50",""
"6863937","GlassFish SHA-256 digest authentication","I have been storing my passwords in plain-text for development purposes but want to start storing the hashes instead, but have so far not yet succeeded in having GlassFish properly authenticate against a hashed password due to the following SecurityException:
SEVERE: jdbcrealm.invaliduserreason
WARNING: WEB9102: Web Login Failed: com.sun.enterprise.security.auth.login.common.LoginException: Login failed: Security Exception

First off, I am running GlassFish 3.1 and have setup the digest for my JDBC realm to SHA-256.
My User class has the following annotated password field:
@Basic(fetch = FetchType.LAZY)
@Column(length = 45, nullable = false)
private String password;

The following helper method is responsible for hashing the password:
private byte[] digest(String input) {
    byte[] output = null;
    try {
        MessageDigest md = MessageDigest.getInstance(""SHA-256"");
        output = md.digest(input.getBytes(""UTF-8""));
    } catch (NoSuchAlgorithmException ex) {
        Logger.getLogger(RegistrationController.class.getName()).log(Level.SEVERE, null, ex);
    } catch (UnsupportedEncodingException ex) {
        Logger.getLogger(RegistrationController.class.getName()).log(Level.SEVERE, null, ex);
    }
    return output;
}

I then set the password on the user as follows:
u.setPassword(Base64.encode(digest(password)).toString());

I wouldn't have Base64 encoded the because this seems to be undocumented but this question: Glassfish Security - jdbcRealm: How to configure login with SHA-256 digest suggests you do need to do so.
So I guess what I would like to know is, does GlassFish expect a String (VARCHAR) or a byte[] (BLOB) as the password field in the database, am I correctly hashing the password, and is it correct to additionally Base64 encode the password hash?
Thanks!
","
Does GlassFish expect a String (VARCHAR) or a byte[] (BLOB) as the password field in the database?

It expects a column that maps to the Java Type java.lang.String in JDBC, and those would typically be CHAR, VARCHAR etc. LOBs would not work as the JDBC realm implementation issues a ResultSet.getString method call invocation to obtain the password hash.

Am I correctly hashing the password, and is it correct to additionally Base64 encode the password hash?

Base64 encoding is not the only supported option. You can perform Hex encoding as well. But you must perform either of these, and configure the JDBC Realm to perform the same at runtime. In the absence of an encoding parameter, Glassfish will convert the byte sequence associated with the digest, to a sequence of characters in the charset configured for the realm.
I suspect the problem has something to do with the mention of UTF-8 encoding in the expression input.getBytes(""UTF-8""). It would be worth verifying if the Base64 encoding of the result provided by your digest method actually matches the password hashes stored in the database.
Also, considering the reason provided for the failure being jdbcrealm.invaliduserreason, I would also suspect that one of the following conditions might be true:

The encoding parameter is not specified for the JDBC Realm; it should preferably be one of base64 or hex (the case does not matter, going by the source code of the JDBC realm), otherwise you would end up in the scenario where the digest byte array is converted to a character array (which in my opinion is a bit flaky unless you can guarantee that the password provided by users are always in a particular encoding).
No password hash exists for the user in the database. See my previous answer on the SQL query executed; you might want to run the query yourself. You can log the statements issued by Derby (if you are using it as the database), by placing a file named derby.properties in the location of your Derby database with the property derby.language.logStatementText=true in it. On shutting down the database, the derby.log file will be populated with all the queries issued by the application server.
The SQL statement prepared by Glassfish is incorrect.
A connection to the database could not be established.

","5096","<java><java-ee><jdbc><glassfish><sha256>","2","2","1","2011-07-28 19:57:10","6864879","0","5","-1","","2017-05-23 11:44:35","2011-07-28 18:34:47",""
"16875249","How to check if string is a valid sha256 hash in PHP?","How do I manage to identify a sha256 hash using PHP?
Also, is there any way to identify if the string is a sha256 hash even if it was salted?
I don't need to know the real value of the hash (I know that is impossible), but I need only to validate the string, so I can work in a way if the string is a sha256 hash and work another way if it isn't.
","The only way to check if a hash is a valid SHA-256 hash is to check 256 bits in it- if it does, then yes some input CAN possibly generate that output.
Hashes are one way meaning I can give you a hash and you can never decrypt it (this is the difference between hashing and an encryption). This is good for storing passwords and such where the plain text value is irrelevant. 
","5073","<php><encryption><hash><sha><sha256>","4","5","2","2018-11-08 15:36:17","16875304","3","0","1891542","","2013-06-01 17:34:33","2013-06-01 17:24:10",""
"16875249","How to check if string is a valid sha256 hash in PHP?","How do I manage to identify a sha256 hash using PHP?
Also, is there any way to identify if the string is a sha256 hash even if it was salted?
I don't need to know the real value of the hash (I know that is impossible), but I need only to validate the string, so I can work in a way if the string is a sha256 hash and work another way if it isn't.
","I do not understand what you mean when you say: ""even if it was salted"". Salting happens before hashing, it offers some protection against rainbow table attacks and users using the same password on multiple sites. Depending on the base a simple regex can tell you if a particular string is a sha256 hash. i think most times we encounter hashes in base16, in that case this would work:
   if (preg_match(""/^([a-f0-9]{64})$/"", $hash) == 1) {
      return true;
   } else {
      return false;
   }

","5073","<php><encryption><hash><sha><sha256>","4","3","2","2018-11-08 15:36:17","16875304","3","0","1891542","","2013-06-01 17:34:33","2013-06-01 17:24:10",""
"25044053","Some info about CC_SHA256 objective-c","For a new project I need to hash a NSString with SHA256.
I have used the following code:
unsigned char hashedChars[32];
NSString *inputString;
inputString = [NSString stringWithFormat:@""hello""];
NSData * inputData = [inputString dataUsingEncoding:NSUTF8StringEncoding];
CC_SHA256(inputData.bytes, inputData.length, hashedChars);

I found this piece of code on stackoverflow.
I do not really get all the things this code do here are some questions about the code:
1.The CC_SHA256 makes a hash but this hash will be stored in inputData again? What I mean can I do something like this:
NSString *string=CC_SHA256(..) //of course you can't put it directly in a NSString, but you get the point

2.In the end the hash has to be a hexadecimal string, but what is the type that CC_SHA256 outputs (UTF-8??)?
3.The first parameter of CC_SHA256 why do I have to put bytes at the end and is ""inputData"" enough?
4.What is the need of the length of the string (second parameter)?
5.And the last parameter does not make any sense to me, can somebody please explain and why the hashedChars has to be 32?
","The argument list for CC_SHA256 is:
 extern unsigned char *CC_SHA256(const void *data, CC_LONG len, unsigned char *md);

From the man page: https://developer.apple.com/library/ios/documentation/System/Conceptual/ManPages_iPhoneOS/man3/CC_SHA256.3cc.html
Parameters explained:

*data is the input string, what you want to be hashed. It's a C string-type. A way to get this is to call 'inputData.bytes', with inputData a NSData object.
len is the length of the input string. As you'll realize if you'll start working with C strings, it's pretty normal for functions working with strings to ask for the length. That's because in C strings are just a sequence of bytes, and while text strings are generally terminated by a null byte, binary strings can have any length. It's also for safety (""buffer overflows"").
*md is the output. Again, this is returned as a C string, of fixed length 32 bytes for SHA256 (that's why you don't see an outputLength parameter).
The output is ""not relevant"", but can be used to check if the function ran properly: if(CC_SHA256(...)) { all ok; }

The result string is stored into *md, and it's a binary C string, 32 bytes long. It's 32 bytes long because that's the length of SHA256 digests; for example, 16 bytes for MD5, 20 bytes for SHA1, etc. It's just how the algorithm works!
The output is just a binary string. If you want to make it into hex format you need to store it into a NSData object, and then get a hex representation of it:
NSData *resultData = [NSData dataWithBytes:hashedChars length:32];

To get the hex representation then look at this SO answer: https://stackoverflow.com/a/25378464/192024
","5057","<objective-c><sha256>","3","7","2","2015-10-21 10:26:02","26361457","0","6","1226963","","2014-07-30 18:28:06","2014-07-30 18:15:21",""
"25044053","Some info about CC_SHA256 objective-c","For a new project I need to hash a NSString with SHA256.
I have used the following code:
unsigned char hashedChars[32];
NSString *inputString;
inputString = [NSString stringWithFormat:@""hello""];
NSData * inputData = [inputString dataUsingEncoding:NSUTF8StringEncoding];
CC_SHA256(inputData.bytes, inputData.length, hashedChars);

I found this piece of code on stackoverflow.
I do not really get all the things this code do here are some questions about the code:
1.The CC_SHA256 makes a hash but this hash will be stored in inputData again? What I mean can I do something like this:
NSString *string=CC_SHA256(..) //of course you can't put it directly in a NSString, but you get the point

2.In the end the hash has to be a hexadecimal string, but what is the type that CC_SHA256 outputs (UTF-8??)?
3.The first parameter of CC_SHA256 why do I have to put bytes at the end and is ""inputData"" enough?
4.What is the need of the length of the string (second parameter)?
5.And the last parameter does not make any sense to me, can somebody please explain and why the hashedChars has to be 32?
","If anyone trying to find a similar function for Android, the below snippet produces the same output as CC_SHA256
  public static String calculateSH256(String secret){
        final MessageDigest digest;
        try {
            digest = MessageDigest.getInstance(""SHA-256"");
            byte[] bytes = secret.getBytes(""UTF-8"");
            digest.update(bytes, 0, bytes.length);
            String sig = bytesToHex(digest.digest());
            return sig;
        }
        catch (NoSuchAlgorithmException | UnsupportedEncodingException e){
         throw new RuntimeException(""Cannot calculate signature"");  
        }          
    }


    final protected static char[] hexArray = ""0123456789abcdef"".toCharArray();

    private static String bytesToHex(byte[] bytes) {
        char[] hexChars = new char[bytes.length * 2];
        for ( int j = 0; j < bytes.length; j++ ) {
            int v = bytes[j] & 0xFF;
            hexChars[j * 2] = hexArray[v >>> 4];
            hexChars[j * 2 + 1] = hexArray[v & 0x0F];
        }
        return new String(hexChars);
    }

","5057","<objective-c><sha256>","3","3","2","2015-10-21 10:26:02","26361457","0","6","1226963","","2014-07-30 18:28:06","2014-07-30 18:15:21",""
"42889101","Convert passwords with sha256 to sha256 + salt","I have big database with user and passwords in sha256 hash. Now I write new version and I want to use sha256+salt. Is there a way to convert same passwords with sha256 to sha256+salt and have no trouble with login?
","The way to salt and hash a password is to take the plaintext password, add the salt to it and THEN hash it. When you have an existing password database already sha256-hashed you don't have the plaintext passwords, and you can't easily get them back in plaintext once hashed (which is a good thing).
What you could do instead would be to take the passwords in their current form, sha256 hashed, add the salt and then hash them a second time - or better: many times, with better hashing algorithms.
The function to verify the password would then repeat those steps to check that the password is correct. Assuming the second hash is just sha256-hashing once to make the example clearer, though it's not sufficiently secure:

step1 = sha256(plaintext_password)
password = sha256(step1 + salt)

If you really want to avoid working on top of your existing hash you could create a new table of users where you process passwords in the new way from the beginning, and then gradually migrate user's passwords over to the new table as they log in with their plaintext passwords, and remove them from the old table. 
A third solution could be to deactivate all the old accounts and require them to change their passwords before they can sign in again, via fx. e-mailing them a link to change their passwords.
Makes sense?
That said you will get more qualified answers at https://security.stackexchange.com . For instance I just found this question on why salt->sha256 hashing once is insufficiently secure, and another one here on how to process passwords for more secure storage.
","5049","<passwords><sha256><data-conversion>","0","-1","2","2018-04-17 00:44:43","42889415","1","","1000551","","2017-10-16 10:13:24","2017-03-19 16:31:38",""
"42889101","Convert passwords with sha256 to sha256 + salt","I have big database with user and passwords in sha256 hash. Now I write new version and I want to use sha256+salt. Is there a way to convert same passwords with sha256 to sha256+salt and have no trouble with login?
","Surely it is a good idea to make your password hashes more safe, but using a salted SHA-256 is the wrong way to go.
Best practise is to use a password hash function with a cost factor, which allows to control the necessary time to calculate a hash. Good algorithms are BCrypt, SCrypt, Argon2 and PBKDF2. In another answer I tried to explain how the switch to a new algorithm could be done.
The problem with the fast hashes like SHA-256 is the unbelievable speed of GPUs, one can brute-force about 3 Giga SHA-256 per second with affordable hardware.
","5049","<passwords><sha256><data-conversion>","0","2","2","2018-04-17 00:44:43","42889415","1","","1000551","","2017-10-16 10:13:24","2017-03-19 16:31:38",""
"23066005","SHA256 in PHP & Java","I'm porting some Java code to PHP code. In Java I have a hash SHA256 code as below:
public static String hashSHA256(String input)
        throws NoSuchAlgorithmException {
    MessageDigest mDigest = MessageDigest.getInstance(""SHA-256"");

byte[] shaByteArr = mDigest.digest(input.getBytes(Charset.forName(""UTF-8"")));
    StringBuilder hexStrBuilder = new StringBuilder();
    for (int i = 0; i < shaByteArr.length; i++) {
        hexStrBuilder.append(Integer.toHexString(0xFF & shaByteArr[i]));
    }

    return hexStrBuilder.toString();
}

In PHP, I hash as below:
$hash = hash(""sha256"", utf8_encode($input));

I run the sample code with both input = ""test"". However, I got 2 hash strings which are not the same:
Java: 9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2bb822cd15d6c15b0f0a8
PHP: 9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08

Can someone explain to me why and how to get them match each other? Please note that I cannot modify the Java implementation code, only to modify PHP.
Really appreciate!
","The PHP version is correct; the SHA-256 checksum of test is 9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08.
The Java version is returning the same checksum with two 0s stripped out. This is because of the way you're converting bytes into hex. Instead of &ing them with 0xFF, use String.format(), as in this answer:
hexStrBuilder.append(String.format(""%02x"", shaByteArr[i]));

I realise you say you cannot modify the Java code, but it is incorrect!
","5009","<java><php><hash><sha256>","3","7","2","2018-04-24 09:22:52","23066109","0","3","1587046","","2014-04-14 17:07:39","2014-04-14 17:02:46",""
"23066005","SHA256 in PHP & Java","I'm porting some Java code to PHP code. In Java I have a hash SHA256 code as below:
public static String hashSHA256(String input)
        throws NoSuchAlgorithmException {
    MessageDigest mDigest = MessageDigest.getInstance(""SHA-256"");

byte[] shaByteArr = mDigest.digest(input.getBytes(Charset.forName(""UTF-8"")));
    StringBuilder hexStrBuilder = new StringBuilder();
    for (int i = 0; i < shaByteArr.length; i++) {
        hexStrBuilder.append(Integer.toHexString(0xFF & shaByteArr[i]));
    }

    return hexStrBuilder.toString();
}

In PHP, I hash as below:
$hash = hash(""sha256"", utf8_encode($input));

I run the sample code with both input = ""test"". However, I got 2 hash strings which are not the same:
Java: 9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2bb822cd15d6c15b0f0a8
PHP: 9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08

Can someone explain to me why and how to get them match each other? Please note that I cannot modify the Java implementation code, only to modify PHP.
Really appreciate!
","The PHP version is correct. But we can modify the result to have the same result with java code.
function hash256($input) {
    $hash = hash(""sha256"", utf8_encode($input));
    $output = """";
    foreach(str_split($hash, 2) as $key => $value) {
        if (strpos($value, ""0"") === 0) {
            $output .= str_replace(""0"", """", $value);
        } else {
            $output .= $value;
        }
    }
    return $output;
}

echo hash256(""test"");

result: 9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2bb822cd15d6c15b0f0a8
","5009","<java><php><hash><sha256>","3","1","2","2018-04-24 09:22:52","23066109","0","3","1587046","","2014-04-14 17:07:39","2014-04-14 17:02:46",""
"2951541","How to generate RSA-SHA256 digital signature with OpenSSL libraries?","I need to generate a digital signature from C++ code, using OpenSSL libraries.
I understood that I need for that DSA \ DSA_do_sign, but didn't understand how exactly to use it.
Does someone have an example for that, or a reference for better than OpenSSL's supplied docs?
Thanks in advance!
","You seem to have RSA and DSA confused. However, if you want to sign using RSA-sha256, then use the EVP interface for signing. You can initialize with the EVP_SignInit_ex() method with EVP_sha256() for the type argument.
","4998","<c++><openssl><rsa><digital-signature><sha256>","4","3","1","2010-06-01 17:03:47","2951743","1","2","","","","2010-06-01 16:31:05",""
"52292180","pyspark generate row hash of specific columns and add it as a new column","

I am working with spark 2.2.0 and pyspark2.
I have created a DataFrame df and now trying to add a new column ""rowhash"" that is the sha2 hash of specific columns in the DataFrame.
For example, say that df has the columns: (column1, column2, ..., column10)
I require sha2((column2||column3||column4||...... column8), 256) in a new column ""rowhash"".
For now, I tried using below methods:
1) Used hash() function but since it gives an integer output it is of not much use
2) Tried using sha2() function but it is failing.
Say columnarray has array of columns I need.
def concat(columnarray):
    concat_str = ''
    for val in columnarray:
        concat_str = concat_str + '||' + str(val) 
    concat_str = concat_str[2:] 
    return concat_str 

and then 
df1 = df1.withColumn(""row_sha2"", sha2(concat(columnarray),256))

This is failing with ""cannot resolve"" error.
Thanks gaw for your answer. Since I have to hash only specific columns, I created a list of those column names (in hash_col) and changed your function as :
 def sha_concat(row, columnarray):
   row_dict = row.asDict()      #transform row to a dict
   concat_str = '' 
   for v in columnarray: 
       concat_str = concat_str + '||' + str(row_dict.get(v)) 
   concat_str = concat_str[2:] 
   #preserve concatenated value for testing (this can be removed later)
   row_dict[""sha_values""] = concat_str  
   row_dict[""sha_hash""] = hashlib.sha256(concat_str).hexdigest()
   return Row(**row_dict) 

Then passed as : 
    df1.rdd.map(lambda row: sha_concat(row,hash_col)).toDF().show(truncate=False)

It is now however failing with error: 
    UnicodeEncodeError: 'ascii' codec can't encode character u'\ufffd' in position 8: ordinal not in range(128)

I can see value of \ufffd in one of the column so I am unsure if there is a way to handle this ?
","

If you want to have the hash for each value in the different columns of your dataset you can apply a self-designed function via map  to the rdd of your dataframe.
import hashlib
test_df = spark.createDataFrame([
    (1,""2"",5,1),(3,""4"",7,8),              
    ], (""col1"",""col2"",""col3"",""col4""))

def sha_concat(row):
    row_dict = row.asDict()                             #transform row to a dict
    columnarray = row_dict.keys()                       #get the column names
    concat_str = ''
    for v in row_dict.values():
        concat_str = concat_str + '||' + str(v)         #concatenate values
    concat_str = concat_str[2:] 
    row_dict[""sha_values""] = concat_str                 #preserve concatenated value for testing (this can be removed later)
    row_dict[""sha_hash""] = hashlib.sha256(concat_str).hexdigest() #calculate sha256
    return Row(**row_dict)

test_df.rdd.map(sha_concat).toDF().show(truncate=False)

The Results would look like:
+----+----+----+----+----------------------------------------------------------------+----------+
|col1|col2|col3|col4|sha_hash                                                        |sha_values|
+----+----+----+----+----------------------------------------------------------------+----------+
|1   |2   |5   |1   |1b0ae4beb8ce031cf585e9bb79df7d32c3b93c8c73c27d8f2c2ddc2de9c8edcd|1||2||5||1|
|3   |4   |7   |8   |cb8f8c5d9fd7165cf3c0f019e0fb10fa0e8f147960c715b7f6a60e149d3923a5|8||4||7||3|
+----+----+----+----+----------------------------------------------------------------+----------+

","4996","<pyspark><string-concatenation><sha256>","4","0","2","2018-09-12 15:23:42","52297410","5","1","10189639","","2018-09-12 15:23:42","2018-09-12 09:45:28",""
"52292180","pyspark generate row hash of specific columns and add it as a new column","

I am working with spark 2.2.0 and pyspark2.
I have created a DataFrame df and now trying to add a new column ""rowhash"" that is the sha2 hash of specific columns in the DataFrame.
For example, say that df has the columns: (column1, column2, ..., column10)
I require sha2((column2||column3||column4||...... column8), 256) in a new column ""rowhash"".
For now, I tried using below methods:
1) Used hash() function but since it gives an integer output it is of not much use
2) Tried using sha2() function but it is failing.
Say columnarray has array of columns I need.
def concat(columnarray):
    concat_str = ''
    for val in columnarray:
        concat_str = concat_str + '||' + str(val) 
    concat_str = concat_str[2:] 
    return concat_str 

and then 
df1 = df1.withColumn(""row_sha2"", sha2(concat(columnarray),256))

This is failing with ""cannot resolve"" error.
Thanks gaw for your answer. Since I have to hash only specific columns, I created a list of those column names (in hash_col) and changed your function as :
 def sha_concat(row, columnarray):
   row_dict = row.asDict()      #transform row to a dict
   concat_str = '' 
   for v in columnarray: 
       concat_str = concat_str + '||' + str(row_dict.get(v)) 
   concat_str = concat_str[2:] 
   #preserve concatenated value for testing (this can be removed later)
   row_dict[""sha_values""] = concat_str  
   row_dict[""sha_hash""] = hashlib.sha256(concat_str).hexdigest()
   return Row(**row_dict) 

Then passed as : 
    df1.rdd.map(lambda row: sha_concat(row,hash_col)).toDF().show(truncate=False)

It is now however failing with error: 
    UnicodeEncodeError: 'ascii' codec can't encode character u'\ufffd' in position 8: ordinal not in range(128)

I can see value of \ufffd in one of the column so I am unsure if there is a way to handle this ?
","

You can use pyspark.sql.functions.concat_ws() to concatenate your columns and pyspark.sql.functions.sha2() to get the SHA256 hash.
Using the data from @gaw:
from pyspark.sql.functions import sha2, concat_ws
df = spark.createDataFrame(
    [(1,""2"",5,1),(3,""4"",7,8)],
    (""col1"",""col2"",""col3"",""col4"")
)
df.withColumn(""row_sha2"", sha2(concat_ws(""||"", *df.columns), 256)).show(truncate=False)
#+----+----+----+----+----------------------------------------------------------------+
#|col1|col2|col3|col4|row_sha2                                                        |
#+----+----+----+----+----------------------------------------------------------------+
#|1   |2   |5   |1   |1b0ae4beb8ce031cf585e9bb79df7d32c3b93c8c73c27d8f2c2ddc2de9c8edcd|
#|3   |4   |7   |8   |57f057bdc4178b69b1b6ab9d78eabee47133790cba8cf503ac1658fa7a496db1|
#+----+----+----+----+----------------------------------------------------------------+

You can pass in either 0 or 256 as the second argument to sha2(), as per the docs:

Returns the hex string result of SHA-2 family of hash functions (SHA-224, SHA-256, SHA-384, and SHA-512). The numBits indicates the desired bit length of the result, which must have a value of 224, 256, 384, 512, or 0 (which is equivalent to 256).

The function concat_ws takes in a separator, and a list of columns to join. I am passing in || as the separator and df.columns as the list of columns. 
I am using all of the columns here, but you can specify whatever subset of columns you'd like- in your case that would be columnarray. (You need to use the * to unpack the list.)
","4996","<pyspark><string-concatenation><sha256>","4","9","2","2018-09-12 15:23:42","52297410","5","1","10189639","","2018-09-12 15:23:42","2018-09-12 09:45:28",""
"46194754","How to Hex Encode a SHA-256 Hash","How to Hex Encode a SHA-256 hash properly in C#?
private static string ToHex(byte[] bytes, bool upperCase)
{
    StringBuilder result = new StringBuilder(bytes.Length * 2);

    for (int i = 0; i < bytes.Length; i++)
        result.Append(bytes[i].ToString(upperCase ? ""X2"" : ""x2""));

    return result.ToString();
}

private string hashRequestBody(string reqBody)
{
    string hashString;
    using (var sha256 = SHA256Managed.Create())
    {
        var hash = sha256.ComputeHash(Encoding.Default.GetBytes(reqBody));
        hashString = ToHex(hash, false);
    }

    MessageBox.Show(hashString);
    return hashString;
}

I did this, but the result is different with bank's sandbox I worked with.
TEST DATA:
{""CorporateID"":""BCAAPI2016"",""SourceAccountNumber"":""0201245680"",""TransactionID"":""00000001"",""TransactionDate"":""2017-09-13"",""ReferenceID"":""refID"",""CurrencyCode"":""IDR"",""Amount"":""10000"",""BeneficiaryAccountNumber"":""0201245681"",""Remark1"":""Transfer Test"",""Remark2"":""Online Transfer""}
Bank's sandbox result: e9d06986c1ed6b063bf59aa873030013725c518631deef2b2147e614017c2141
Mine: 1c83acc42cf905ca8afba27ef0640c70ad2856a366b57c17cf16f2894327676e
","I've seen several solutions to this problem, but your code is the most elegant.  I slightly re-factored it and tested it for this answer.  I also get the hash: 

1c83acc42cf905ca8afba27ef0640c70ad2856a366b57c17cf16f2894327676e

See working fiddle here: https://dotnetfiddle.net/QbsKTc
Perhaps this hash is different to the bank's because you changed the JSON string to remove private data?
using System;
using System.Security.Cryptography;
using System.Text;

public class Program
{
    public static void Main()
    {
        Console.WriteLine(SHA256HexHashString(""{\""CorporateID\"":\""BCAAPI2016\"",\""SourceAccountNumber\"":\""0201245680\"",\""TransactionID\"":\""00000001\"",\""TransactionDate\"":\""2017-09-13\"",\""ReferenceID\"":\""refID\"",\""CurrencyCode\"":\""IDR\"",\""Amount\"":\""10000\"",\""BeneficiaryAccountNumber\"":\""0201245681\"",\""Remark1\"":\""Transfer Test\"",\""Remark2\"":\""Online Transfer\""}""));
    }

    private static string ToHex(byte[] bytes, bool upperCase)
    {
        StringBuilder result = new StringBuilder(bytes.Length * 2);
        for (int i = 0; i < bytes.Length; i++)
            result.Append(bytes[i].ToString(upperCase ? ""X2"" : ""x2""));
        return result.ToString();
    }

    private static string SHA256HexHashString(string StringIn)
    {
        string hashString;
        using (var sha256 = SHA256Managed.Create())
        {
            var hash = sha256.ComputeHash(Encoding.Default.GetBytes(StringIn));
            hashString = ToHex(hash, false);
        }

        return hashString;
    }
}

","4969","<c#><hex><encode><sha256><sha>","2","4","1","2017-12-12 01:41:47","47764129","4","","8443113","","2017-09-13 10:53:19","2017-09-13 10:11:17",""
"48406005","How to Hash sha256 in swift 4 with a secret key?","I am currently working on a project (in swift 3/4) where I need to hash a HTTP request that is formatted as so:
    {""request"": {""method"": ""getMyPeople"", 
    ""params"": {""api_key"": 00de5089d590e413807343166da22a45,
    ""user_id"": 8 }, ""id"": ""1""}}

I am trying to hash in SHA-256 with a secret key, something that looks like this: 
    6b107c7ebebf056e1c45924d0546d35e

What I need:

I need to be able to hash with sha256 with a secret key.
I need that hashed request to be a string in hex form in order for me to make a request to the database

What I have:

Set up my header bridge file to use objective-c code
Looked into many solutions and none of them worked for me

Solutions I have tried: 
My most recent attempt is Zaph's post here (https://stackoverflow.com/a/39249920/8093921).
Where my issue occurs: 
My issue seems to occurring when I try to convert the form of 
 hashSHA256: <aabc766b 6b357564 e41f4f91 2d494bcc bfa16924 b574abbd ba9e3e9d a0c8920a>

as seen in Zaph's post, they leave it in this form where I need it in form of a string in hex. 
If anyone need any more clarification please let me know. 
Thank you in advance for the help!
","I admit that it can be confusing to get everything together but the final solution is quite simple:
extension String {

    func hmac(key: String) -> String {
        var digest = [UInt8](repeating: 0, count: Int(CC_SHA256_DIGEST_LENGTH))
        CCHmac(CCHmacAlgorithm(kCCHmacAlgSHA256), key, key.count, self, self.count, &digest)
        let data = Data(bytes: digest)
        return data.map { String(format: ""%02hhx"", $0) }.joined()
    }

}

Example:
let result = ""test"".hmac(key: ""test"")

Result:
88cd2108b5347d973cf39cdf9053d7dd42704876d8c9a9bd8e2d168259d3ddf7

","4930","<swift><hash><sha256>","0","7","1","2018-01-23 16:35:54","","6","","1226963","","2018-01-23 16:28:41","2018-01-23 16:03:04",""
"10946263","Java compare SHA-256 hashed string with a password clear text string","I am trying an example:   
String hashAlgorithm =""sha-256""
...
md=MessageDigest.getInstance(hashAlgorithm);
byte[] enteredPasswordDigest = md.digest(policy.getPassword().getBytes());
if (!MessageDigest.isEqual(enteredPasswordDigest, realPassword.getBytes())) {
    ...
}

However, the hashed password is stored as a string in the database. When I do that comparison, it fails. When I debug it, enteredPasswordDigest has 32 byte length and realPassword.getBytes() has 64 byte length.
What did I miss?
","Assuming realPassword is a String, the problem might be that Java strings are UTF16, ie 2 bytes per character. Try printing both byte arrays to get a better insight in whats going on.
","4908","<java><bytearray><sha256>","2","0","3","2012-06-11 05:24:46","10974816","1","","453596","","2012-06-08 12:45:22","2012-06-08 09:29:05",""
"10946263","Java compare SHA-256 hashed string with a password clear text string","I am trying an example:   
String hashAlgorithm =""sha-256""
...
md=MessageDigest.getInstance(hashAlgorithm);
byte[] enteredPasswordDigest = md.digest(policy.getPassword().getBytes());
if (!MessageDigest.isEqual(enteredPasswordDigest, realPassword.getBytes())) {
    ...
}

However, the hashed password is stored as a string in the database. When I do that comparison, it fails. When I debug it, enteredPasswordDigest has 32 byte length and realPassword.getBytes() has 64 byte length.
What did I miss?
","Simply,

take the entered password and hash/digest it
convert the byte[] to string
compare that string to the already-hashed-password string in the DB

Try this,
String hashedStr = new String(enteredPasswordDigest);
if (!hashedStr.equals(realPassword)) {
  ...
} else {
  ...
}

Docs: String.getBytes()

The behavior of this method when this string cannot be encoded in the
  default charset is unspecified.  The java.nio.charset.CharsetEncoder
  class should be used when more control over the encoding process is
  required.

","4908","<java><bytearray><sha256>","2","1","3","2012-06-11 05:24:46","10974816","1","","453596","","2012-06-08 12:45:22","2012-06-08 09:29:05",""
"10946263","Java compare SHA-256 hashed string with a password clear text string","I am trying an example:   
String hashAlgorithm =""sha-256""
...
md=MessageDigest.getInstance(hashAlgorithm);
byte[] enteredPasswordDigest = md.digest(policy.getPassword().getBytes());
if (!MessageDigest.isEqual(enteredPasswordDigest, realPassword.getBytes())) {
    ...
}

However, the hashed password is stored as a string in the database. When I do that comparison, it fails. When I debug it, enteredPasswordDigest has 32 byte length and realPassword.getBytes() has 64 byte length.
What did I miss?
","I solved my question with that point: Hashed password as a string at database is ""hex"". That is the main point. So I got the hex of entered password's byte array digest. Then I compared strings that has hex values.
","4908","<java><bytearray><sha256>","2","0","3","2012-06-11 05:24:46","10974816","1","","453596","","2012-06-08 12:45:22","2012-06-08 09:29:05",""
"7846841","How to calculate sha256 faster in java?","I have found out that calculating sha256 in java is slow. For example, it is slower than python. I wrote two simple benchmarks that calculate sha256 of 1GB of zeroes. In both cases the result is the same and correct, but the python time is 5653ms and the java time is 8623ms(53% slower). The result is similar every time and this is an important difference for me.
How to make the calculation in java faster?
Benchmarks:
Java:
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class BenchmarkSha256 {

  public static void main(String... args) throws NoSuchAlgorithmException {
    int size = 1024 * 1024;
    byte[] bytes = new byte[size];
    MessageDigest md = MessageDigest.getInstance(""SHA-256"");
    long startTime = System.nanoTime();
    for (int i = 0; i < 1024; i++)
      md.update(bytes, 0, size);
    long endTime = System.nanoTime();
    System.out.println(String.format(""%1$064x"", new java.math.BigInteger(1, md.digest())));
    System.out.println(String.format(""%d ms"", (endTime - startTime) / 1000000));
  }

}

Python:
#!/usr/bin/env python

import hashlib
import time

size = 1024 * 1024
bytes = bytearray(size)
md = hashlib.sha256()
startTime = time.time()
for i in range(0, 1024):
  md.update(bytes)
endTime = time.time()
print ""%s\n%d ms"" % (md.hexdigest(), (endTime - startTime) * 1000)

results:
~> java BenchmarkSha256
49bc20df15e412a64472421e13fe86ff1c5165e18b2afccf160d4dc19fe68a14
8623 ms

~> python BenchmarkSha256.py 
49bc20df15e412a64472421e13fe86ff1c5165e18b2afccf160d4dc19fe68a14
5653 ms

versions of java and python:
~> java -version
java version ""1.6.0_26""
Java(TM) SE Runtime Environment (build 1.6.0_26-b03)
Java HotSpot(TM) 64-Bit Server VM (build 20.1-b02, mixed mode)

~> python --version
Python 2.7

","I think that java is just slow by nature.  This question may be relevant to you Java: Calculate SHA-256 hash of large file efficiently
","4858","<java><optimization><sha256><sha>","7","0","5","2019-10-16 01:15:04","","5","3","1093147","","2017-01-18 23:10:27","2011-10-21 08:25:15",""
"7846841","How to calculate sha256 faster in java?","I have found out that calculating sha256 in java is slow. For example, it is slower than python. I wrote two simple benchmarks that calculate sha256 of 1GB of zeroes. In both cases the result is the same and correct, but the python time is 5653ms and the java time is 8623ms(53% slower). The result is similar every time and this is an important difference for me.
How to make the calculation in java faster?
Benchmarks:
Java:
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class BenchmarkSha256 {

  public static void main(String... args) throws NoSuchAlgorithmException {
    int size = 1024 * 1024;
    byte[] bytes = new byte[size];
    MessageDigest md = MessageDigest.getInstance(""SHA-256"");
    long startTime = System.nanoTime();
    for (int i = 0; i < 1024; i++)
      md.update(bytes, 0, size);
    long endTime = System.nanoTime();
    System.out.println(String.format(""%1$064x"", new java.math.BigInteger(1, md.digest())));
    System.out.println(String.format(""%d ms"", (endTime - startTime) / 1000000));
  }

}

Python:
#!/usr/bin/env python

import hashlib
import time

size = 1024 * 1024
bytes = bytearray(size)
md = hashlib.sha256()
startTime = time.time()
for i in range(0, 1024):
  md.update(bytes)
endTime = time.time()
print ""%s\n%d ms"" % (md.hexdigest(), (endTime - startTime) * 1000)

results:
~> java BenchmarkSha256
49bc20df15e412a64472421e13fe86ff1c5165e18b2afccf160d4dc19fe68a14
8623 ms

~> python BenchmarkSha256.py 
49bc20df15e412a64472421e13fe86ff1c5165e18b2afccf160d4dc19fe68a14
5653 ms

versions of java and python:
~> java -version
java version ""1.6.0_26""
Java(TM) SE Runtime Environment (build 1.6.0_26-b03)
Java HotSpot(TM) 64-Bit Server VM (build 20.1-b02, mixed mode)

~> python --version
Python 2.7

","Have you tried feeding in the data incrementally?  You can use messageDigest.update() with the bytes and then get the final digest with messageDigest.digest()?
Allocating a 1GB array in memory is a fairly chunky operation.  You may find that smaller incremental updates are faster in the end.
","4858","<java><optimization><sha256><sha>","7","4","5","2019-10-16 01:15:04","","5","3","1093147","","2017-01-18 23:10:27","2011-10-21 08:25:15",""
"7846841","How to calculate sha256 faster in java?","I have found out that calculating sha256 in java is slow. For example, it is slower than python. I wrote two simple benchmarks that calculate sha256 of 1GB of zeroes. In both cases the result is the same and correct, but the python time is 5653ms and the java time is 8623ms(53% slower). The result is similar every time and this is an important difference for me.
How to make the calculation in java faster?
Benchmarks:
Java:
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class BenchmarkSha256 {

  public static void main(String... args) throws NoSuchAlgorithmException {
    int size = 1024 * 1024;
    byte[] bytes = new byte[size];
    MessageDigest md = MessageDigest.getInstance(""SHA-256"");
    long startTime = System.nanoTime();
    for (int i = 0; i < 1024; i++)
      md.update(bytes, 0, size);
    long endTime = System.nanoTime();
    System.out.println(String.format(""%1$064x"", new java.math.BigInteger(1, md.digest())));
    System.out.println(String.format(""%d ms"", (endTime - startTime) / 1000000));
  }

}

Python:
#!/usr/bin/env python

import hashlib
import time

size = 1024 * 1024
bytes = bytearray(size)
md = hashlib.sha256()
startTime = time.time()
for i in range(0, 1024):
  md.update(bytes)
endTime = time.time()
print ""%s\n%d ms"" % (md.hexdigest(), (endTime - startTime) * 1000)

results:
~> java BenchmarkSha256
49bc20df15e412a64472421e13fe86ff1c5165e18b2afccf160d4dc19fe68a14
8623 ms

~> python BenchmarkSha256.py 
49bc20df15e412a64472421e13fe86ff1c5165e18b2afccf160d4dc19fe68a14
5653 ms

versions of java and python:
~> java -version
java version ""1.6.0_26""
Java(TM) SE Runtime Environment (build 1.6.0_26-b03)
Java HotSpot(TM) 64-Bit Server VM (build 20.1-b02, mixed mode)

~> python --version
Python 2.7

","Well, unless you are doing this to compare two command line programs, this is not the best test.  Primarily, these numbers are being polluted by the vast differences in overhead associated with each program.  VM start times will vary.  Memory allocation speeds will vary.
To clean this up a bit, simply take two time samples before and after each actual MD5 calculation within the code itself.
This will actually measure performance of the hashing operation itself.
","4858","<java><optimization><sha256><sha>","7","3","5","2019-10-16 01:15:04","","5","3","1093147","","2017-01-18 23:10:27","2011-10-21 08:25:15",""
"7846841","How to calculate sha256 faster in java?","I have found out that calculating sha256 in java is slow. For example, it is slower than python. I wrote two simple benchmarks that calculate sha256 of 1GB of zeroes. In both cases the result is the same and correct, but the python time is 5653ms and the java time is 8623ms(53% slower). The result is similar every time and this is an important difference for me.
How to make the calculation in java faster?
Benchmarks:
Java:
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class BenchmarkSha256 {

  public static void main(String... args) throws NoSuchAlgorithmException {
    int size = 1024 * 1024;
    byte[] bytes = new byte[size];
    MessageDigest md = MessageDigest.getInstance(""SHA-256"");
    long startTime = System.nanoTime();
    for (int i = 0; i < 1024; i++)
      md.update(bytes, 0, size);
    long endTime = System.nanoTime();
    System.out.println(String.format(""%1$064x"", new java.math.BigInteger(1, md.digest())));
    System.out.println(String.format(""%d ms"", (endTime - startTime) / 1000000));
  }

}

Python:
#!/usr/bin/env python

import hashlib
import time

size = 1024 * 1024
bytes = bytearray(size)
md = hashlib.sha256()
startTime = time.time()
for i in range(0, 1024):
  md.update(bytes)
endTime = time.time()
print ""%s\n%d ms"" % (md.hexdigest(), (endTime - startTime) * 1000)

results:
~> java BenchmarkSha256
49bc20df15e412a64472421e13fe86ff1c5165e18b2afccf160d4dc19fe68a14
8623 ms

~> python BenchmarkSha256.py 
49bc20df15e412a64472421e13fe86ff1c5165e18b2afccf160d4dc19fe68a14
5653 ms

versions of java and python:
~> java -version
java version ""1.6.0_26""
Java(TM) SE Runtime Environment (build 1.6.0_26-b03)
Java HotSpot(TM) 64-Bit Server VM (build 20.1-b02, mixed mode)

~> python --version
Python 2.7

","While you might be able to improve the performance of the Java tool a bit, the Python implementation will usually be faster because it is likely delegating to assembled libraries which run with significantly better performance.
If your project does not have any other significant dependencies on Java, I'd recommend going with the Python implementation.
","4858","<java><optimization><sha256><sha>","7","0","5","2019-10-16 01:15:04","","5","3","1093147","","2017-01-18 23:10:27","2011-10-21 08:25:15",""
"7846841","How to calculate sha256 faster in java?","I have found out that calculating sha256 in java is slow. For example, it is slower than python. I wrote two simple benchmarks that calculate sha256 of 1GB of zeroes. In both cases the result is the same and correct, but the python time is 5653ms and the java time is 8623ms(53% slower). The result is similar every time and this is an important difference for me.
How to make the calculation in java faster?
Benchmarks:
Java:
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class BenchmarkSha256 {

  public static void main(String... args) throws NoSuchAlgorithmException {
    int size = 1024 * 1024;
    byte[] bytes = new byte[size];
    MessageDigest md = MessageDigest.getInstance(""SHA-256"");
    long startTime = System.nanoTime();
    for (int i = 0; i < 1024; i++)
      md.update(bytes, 0, size);
    long endTime = System.nanoTime();
    System.out.println(String.format(""%1$064x"", new java.math.BigInteger(1, md.digest())));
    System.out.println(String.format(""%d ms"", (endTime - startTime) / 1000000));
  }

}

Python:
#!/usr/bin/env python

import hashlib
import time

size = 1024 * 1024
bytes = bytearray(size)
md = hashlib.sha256()
startTime = time.time()
for i in range(0, 1024):
  md.update(bytes)
endTime = time.time()
print ""%s\n%d ms"" % (md.hexdigest(), (endTime - startTime) * 1000)

results:
~> java BenchmarkSha256
49bc20df15e412a64472421e13fe86ff1c5165e18b2afccf160d4dc19fe68a14
8623 ms

~> python BenchmarkSha256.py 
49bc20df15e412a64472421e13fe86ff1c5165e18b2afccf160d4dc19fe68a14
5653 ms

versions of java and python:
~> java -version
java version ""1.6.0_26""
Java(TM) SE Runtime Environment (build 1.6.0_26-b03)
Java HotSpot(TM) 64-Bit Server VM (build 20.1-b02, mixed mode)

~> python --version
Python 2.7

","I ran a test on the following SHA-256 implementations: Java built-in, Groovy built-in, Apache Commons, Guava, and Bouncy Castle. My results on one run are here:
>groovy hash_comp.groovy
Hashing 1000000 iterations of SHA-256
time java: 2688         372023.8095238095 hashes/sec
time groovy: 1948       513347.0225872690 hashes/sec
time apache: 867        1153402.5374855825 hashes/sec
time guava: 953         1049317.9433368311 hashes/sec
time bouncy: 1890       529100.5291005291 hashes/sec

This was run on an Intel i5 8th Gen. Apache and Guava were easily to two fastest implementations. Apache Commons narrowly beat out Guava on 9/10 of my runs. My code for this test is available here.
Note that after running this test I started to wonder if you could go even faster by tapping into the CPU instruction set (Intel has SHA extensions). I'm not sure there is a JVM way to do this without JNI or JNA. I created another question here.
","4858","<java><optimization><sha256><sha>","7","0","5","2019-10-16 01:15:04","","5","3","1093147","","2017-01-18 23:10:27","2011-10-21 08:25:15",""
"40734309","MIGS Online Payments SHA256 HMAC Error","I've been told by Bendigo Bank that we need to change md5 to SHA256. I've followed their instructions and I am getting this error:
HTTP Status - 400
E5000: Cannot form a matching secure hash based on the merchant's request using either of the two merchant's secrets

Their example code is this:
<?php foreach($_POST as $key => $value) {
    if (strlen($value) > 0) { ?>
            <input type=""hidden"" name=""<?php echo($key); ?>"" value=""<?php echo($value); ?>""/><br>
    <?php           
        if ((strlen($value) > 0) && ((substr($key, 0,4)==""vpc_"") || (substr($key,0,5) ==""user_""))) {
            $hashinput .= $key . ""="" . $value . ""&"";
        }
    }
}
$hashinput = rtrim($hashinput,""&"");
?>
<!-- attach SecureHash -->
<input type=""hidden"" name=""vpc_SecureHash"" value=""<?php echo(strtoupper(hash_hmac('SHA256', $hashinput, pack('H*',$securesecret)))); ?>""/>
<input type=""hidden"" name=""vpc_SecureHashType"" value=""SHA256"">

And this is my post:
Array (
    [AgainLink] => http://fallscreekcountryclub.com.au/make-a-booking/submit-booking.html
    [b_terms] => 1
    [chargetypeid] => 33
    [deposit] => 580.00
    [notes] => 4 Nights - 26/11/2016 to 30/11/2016
    [propertyid] => 2
    [total] => 580.00
    [vpc_AccessCode] => 903876BC
    [vpc_Amount] => 58000
    [vpc_Command] => pay
    [vpc_Locale] => en
    [vpc_MerchTxnRef] => 1479746896
    [vpc_Merchant] => BBL5800396
    [vpc_OrderInfo] => Studio Deluxe
    [vpc_ReturnURL] => http://fallscreekcountryclub.com.au/make-a-booking/booking-complete.html
    [vpc_Version] => 1
)

And this is my code:
        $appendAmp = 0;
        $isencoded = '';
        $notencoded = '';
        foreach($_POST as $key => $value) {
            if (strlen($value) > 0) {
                if ($appendAmp == 0) :
                    $notencoded     .= $key . '=' . $value;
                    $isencoded      .= urlencode($key) . '=' . urlencode($value);
                    $appendAmp       = 1;
                else :
                    $notencoded     .= '&' . $key . '=' . $value;
                    $isencoded      .= '&' . urlencode($key) . '=' . urlencode($value);
                endif;
            }
        }

        if (strlen($SECURE_SECRET) > 0) {
            #$vpcURL .= ""&vpc_SecureHash="" . strtoupper(md5($md5HashData));
            $SecureHash     = strtoupper(hash_hmac('SHA256',$notencoded,pack('H*',$SECURE_SECRET)));
            $SecureHashType = 'SHA256';
        }
        $vpcURL .= $notencoded.'&vpc_SecureHash='.$SecureHash.'&vpc_SecureHashType='.$SecureHashType;

I have ""isencoded"" and ""notencoded"" because I've seen people say to not urlencode the string for vpc_ReturnURL until I build the vpcURL, but neither works.
The urlencoded version of the vpcURL is:
https://migs.mastercard.com.au/vpcpay?AgainLink=http%3A%2F%2Ffallscreekcountryclub.com.au%2Fmake-a-booking%2Fsubmit-booking.html&b_terms=1&chargetypeid=33&deposit=580.00&notes=4+Nights+-+26%2F11%2F2016+to+30%2F11%2F2016&propertyid=2&total=580.00&vpc_AccessCode=903876BC&vpc_Amount=58000&vpc_Command=pay&vpc_Locale=en&vpc_MerchTxnRef=1479746896&vpc_Merchant=BBL5800396&vpc_OrderInfo=Studio+Deluxe&vpc_ReturnURL=http%3A%2F%2Ffallscreekcountryclub.com.au%2Fmake-a-booking%2Fbooking-complete.html&vpc_Version=1&vpc_SecureHash=A5BA6503FC7A169A90C9AAC7039878F45D761180D874789172EB5A58298022E4&vpc_SecureHashType=SHA256 

And the non urlencoded version is:
https://migs.mastercard.com.au/vpcpay?AgainLink=http://fallscreekcountryclub.com.au/make-a-booking/submit-booking.html&b_terms=1&chargetypeid=33&deposit=580.00&notes=4 Nights - 26/11/2016 to 30/11/2016&propertyid=2&total=580.00&vpc_AccessCode=903876BC&vpc_Amount=58000&vpc_Command=pay&vpc_Locale=en&vpc_MerchTxnRef=1479746896&vpc_Merchant=BBL5800396&vpc_OrderInfo=Studio Deluxe&vpc_ReturnURL=http://fallscreekcountryclub.com.au/make-a-booking/booking-complete.html&vpc_Version=1&vpc_SecureHash=A5BA6503FC7A169A90C9AAC7039878F45D761180D874789172EB5A58298022E4&vpc_SecureHashType=SHA256 

Any ideas on what I've done wrong?? I called the bank, and they couldn't help me, they had no idea what I was even talking about..
I know the $SECURE_SECRET number is correct, as it's the same number I've used for the original md5 hash. So the problem lays with the sha256 hash, and I'm not sure why, or how to fix it.
","try to exclude  vpc_SecureHash and vpc_SecureHashType from the strings that get hashed. Here is the code snippet 
https://gist.github.com/lucasnetau/bcacb528d664f0ad1339086c1a585021
Let me know if it works..
","4804","<php><payment-gateway><sha256><hmac>","3","0","3","2017-03-25 15:33:13","40779058","0","1","","","","2016-11-22 05:21:17",""
"40734309","MIGS Online Payments SHA256 HMAC Error","I've been told by Bendigo Bank that we need to change md5 to SHA256. I've followed their instructions and I am getting this error:
HTTP Status - 400
E5000: Cannot form a matching secure hash based on the merchant's request using either of the two merchant's secrets

Their example code is this:
<?php foreach($_POST as $key => $value) {
    if (strlen($value) > 0) { ?>
            <input type=""hidden"" name=""<?php echo($key); ?>"" value=""<?php echo($value); ?>""/><br>
    <?php           
        if ((strlen($value) > 0) && ((substr($key, 0,4)==""vpc_"") || (substr($key,0,5) ==""user_""))) {
            $hashinput .= $key . ""="" . $value . ""&"";
        }
    }
}
$hashinput = rtrim($hashinput,""&"");
?>
<!-- attach SecureHash -->
<input type=""hidden"" name=""vpc_SecureHash"" value=""<?php echo(strtoupper(hash_hmac('SHA256', $hashinput, pack('H*',$securesecret)))); ?>""/>
<input type=""hidden"" name=""vpc_SecureHashType"" value=""SHA256"">

And this is my post:
Array (
    [AgainLink] => http://fallscreekcountryclub.com.au/make-a-booking/submit-booking.html
    [b_terms] => 1
    [chargetypeid] => 33
    [deposit] => 580.00
    [notes] => 4 Nights - 26/11/2016 to 30/11/2016
    [propertyid] => 2
    [total] => 580.00
    [vpc_AccessCode] => 903876BC
    [vpc_Amount] => 58000
    [vpc_Command] => pay
    [vpc_Locale] => en
    [vpc_MerchTxnRef] => 1479746896
    [vpc_Merchant] => BBL5800396
    [vpc_OrderInfo] => Studio Deluxe
    [vpc_ReturnURL] => http://fallscreekcountryclub.com.au/make-a-booking/booking-complete.html
    [vpc_Version] => 1
)

And this is my code:
        $appendAmp = 0;
        $isencoded = '';
        $notencoded = '';
        foreach($_POST as $key => $value) {
            if (strlen($value) > 0) {
                if ($appendAmp == 0) :
                    $notencoded     .= $key . '=' . $value;
                    $isencoded      .= urlencode($key) . '=' . urlencode($value);
                    $appendAmp       = 1;
                else :
                    $notencoded     .= '&' . $key . '=' . $value;
                    $isencoded      .= '&' . urlencode($key) . '=' . urlencode($value);
                endif;
            }
        }

        if (strlen($SECURE_SECRET) > 0) {
            #$vpcURL .= ""&vpc_SecureHash="" . strtoupper(md5($md5HashData));
            $SecureHash     = strtoupper(hash_hmac('SHA256',$notencoded,pack('H*',$SECURE_SECRET)));
            $SecureHashType = 'SHA256';
        }
        $vpcURL .= $notencoded.'&vpc_SecureHash='.$SecureHash.'&vpc_SecureHashType='.$SecureHashType;

I have ""isencoded"" and ""notencoded"" because I've seen people say to not urlencode the string for vpc_ReturnURL until I build the vpcURL, but neither works.
The urlencoded version of the vpcURL is:
https://migs.mastercard.com.au/vpcpay?AgainLink=http%3A%2F%2Ffallscreekcountryclub.com.au%2Fmake-a-booking%2Fsubmit-booking.html&b_terms=1&chargetypeid=33&deposit=580.00&notes=4+Nights+-+26%2F11%2F2016+to+30%2F11%2F2016&propertyid=2&total=580.00&vpc_AccessCode=903876BC&vpc_Amount=58000&vpc_Command=pay&vpc_Locale=en&vpc_MerchTxnRef=1479746896&vpc_Merchant=BBL5800396&vpc_OrderInfo=Studio+Deluxe&vpc_ReturnURL=http%3A%2F%2Ffallscreekcountryclub.com.au%2Fmake-a-booking%2Fbooking-complete.html&vpc_Version=1&vpc_SecureHash=A5BA6503FC7A169A90C9AAC7039878F45D761180D874789172EB5A58298022E4&vpc_SecureHashType=SHA256 

And the non urlencoded version is:
https://migs.mastercard.com.au/vpcpay?AgainLink=http://fallscreekcountryclub.com.au/make-a-booking/submit-booking.html&b_terms=1&chargetypeid=33&deposit=580.00&notes=4 Nights - 26/11/2016 to 30/11/2016&propertyid=2&total=580.00&vpc_AccessCode=903876BC&vpc_Amount=58000&vpc_Command=pay&vpc_Locale=en&vpc_MerchTxnRef=1479746896&vpc_Merchant=BBL5800396&vpc_OrderInfo=Studio Deluxe&vpc_ReturnURL=http://fallscreekcountryclub.com.au/make-a-booking/booking-complete.html&vpc_Version=1&vpc_SecureHash=A5BA6503FC7A169A90C9AAC7039878F45D761180D874789172EB5A58298022E4&vpc_SecureHashType=SHA256 

Any ideas on what I've done wrong?? I called the bank, and they couldn't help me, they had no idea what I was even talking about..
I know the $SECURE_SECRET number is correct, as it's the same number I've used for the original md5 hash. So the problem lays with the sha256 hash, and I'm not sure why, or how to fix it.
","
Use ksort() to sort your array before linking your parameters.
Don't use urlencode() to process the vpc_ReturnURL, which would make the SHA256 hash result incorrect. Here is what I found from official Troubleshooting Guide:


c)    Make sure that the vpc_ReturnURL is not URL encoded (i.e. the ""/"" becomes %2f)
      You can use the following link to decode a URL - http://meyerweb.com/eric/tools/dencoder/
      Sample sorted string based on this example as below: (Removed jsessionid, noheader, tdrid from output of 2b) i.e These elements can be removed prior to sorting the order

vpc_AccessCode=A837820A&vpc_Amount=100&vpc_Card=VC&vpc_CardNum=4222222222222&vpc_CardSecurityCode=100&vpc_Command=pay&vpc_Gateway=threeDSecure&vpc_Locale=en&vpc_MerchTxnRef=T2_7956&vpc_Merchant=TESTDIALECTTEST&vpc_ReturnURL=http://anjumpc:8080/dev-pg/payment/3dprocess.do&vpc_Version=1


Don't send/hash the values which keys don't start with vpc_ because MGIS doesn't care about those values and doesn't use those values in hash check. And the guide also mentioned about this:


b)    Remove unnecessary fields for Hash calculation such as vpc_SecureHashType, vpc_SecureHash and anything that does not begins with vpc_ or user_ - i.e fields highlighted in Bold in 2a above to be removed


(Ignore this, the SHA256 can be used on working MIGS merchant)

","4804","<php><payment-gateway><sha256><hmac>","3","1","3","2017-03-25 15:33:13","40779058","0","1","","","","2016-11-22 05:21:17",""
"40734309","MIGS Online Payments SHA256 HMAC Error","I've been told by Bendigo Bank that we need to change md5 to SHA256. I've followed their instructions and I am getting this error:
HTTP Status - 400
E5000: Cannot form a matching secure hash based on the merchant's request using either of the two merchant's secrets

Their example code is this:
<?php foreach($_POST as $key => $value) {
    if (strlen($value) > 0) { ?>
            <input type=""hidden"" name=""<?php echo($key); ?>"" value=""<?php echo($value); ?>""/><br>
    <?php           
        if ((strlen($value) > 0) && ((substr($key, 0,4)==""vpc_"") || (substr($key,0,5) ==""user_""))) {
            $hashinput .= $key . ""="" . $value . ""&"";
        }
    }
}
$hashinput = rtrim($hashinput,""&"");
?>
<!-- attach SecureHash -->
<input type=""hidden"" name=""vpc_SecureHash"" value=""<?php echo(strtoupper(hash_hmac('SHA256', $hashinput, pack('H*',$securesecret)))); ?>""/>
<input type=""hidden"" name=""vpc_SecureHashType"" value=""SHA256"">

And this is my post:
Array (
    [AgainLink] => http://fallscreekcountryclub.com.au/make-a-booking/submit-booking.html
    [b_terms] => 1
    [chargetypeid] => 33
    [deposit] => 580.00
    [notes] => 4 Nights - 26/11/2016 to 30/11/2016
    [propertyid] => 2
    [total] => 580.00
    [vpc_AccessCode] => 903876BC
    [vpc_Amount] => 58000
    [vpc_Command] => pay
    [vpc_Locale] => en
    [vpc_MerchTxnRef] => 1479746896
    [vpc_Merchant] => BBL5800396
    [vpc_OrderInfo] => Studio Deluxe
    [vpc_ReturnURL] => http://fallscreekcountryclub.com.au/make-a-booking/booking-complete.html
    [vpc_Version] => 1
)

And this is my code:
        $appendAmp = 0;
        $isencoded = '';
        $notencoded = '';
        foreach($_POST as $key => $value) {
            if (strlen($value) > 0) {
                if ($appendAmp == 0) :
                    $notencoded     .= $key . '=' . $value;
                    $isencoded      .= urlencode($key) . '=' . urlencode($value);
                    $appendAmp       = 1;
                else :
                    $notencoded     .= '&' . $key . '=' . $value;
                    $isencoded      .= '&' . urlencode($key) . '=' . urlencode($value);
                endif;
            }
        }

        if (strlen($SECURE_SECRET) > 0) {
            #$vpcURL .= ""&vpc_SecureHash="" . strtoupper(md5($md5HashData));
            $SecureHash     = strtoupper(hash_hmac('SHA256',$notencoded,pack('H*',$SECURE_SECRET)));
            $SecureHashType = 'SHA256';
        }
        $vpcURL .= $notencoded.'&vpc_SecureHash='.$SecureHash.'&vpc_SecureHashType='.$SecureHashType;

I have ""isencoded"" and ""notencoded"" because I've seen people say to not urlencode the string for vpc_ReturnURL until I build the vpcURL, but neither works.
The urlencoded version of the vpcURL is:
https://migs.mastercard.com.au/vpcpay?AgainLink=http%3A%2F%2Ffallscreekcountryclub.com.au%2Fmake-a-booking%2Fsubmit-booking.html&b_terms=1&chargetypeid=33&deposit=580.00&notes=4+Nights+-+26%2F11%2F2016+to+30%2F11%2F2016&propertyid=2&total=580.00&vpc_AccessCode=903876BC&vpc_Amount=58000&vpc_Command=pay&vpc_Locale=en&vpc_MerchTxnRef=1479746896&vpc_Merchant=BBL5800396&vpc_OrderInfo=Studio+Deluxe&vpc_ReturnURL=http%3A%2F%2Ffallscreekcountryclub.com.au%2Fmake-a-booking%2Fbooking-complete.html&vpc_Version=1&vpc_SecureHash=A5BA6503FC7A169A90C9AAC7039878F45D761180D874789172EB5A58298022E4&vpc_SecureHashType=SHA256 

And the non urlencoded version is:
https://migs.mastercard.com.au/vpcpay?AgainLink=http://fallscreekcountryclub.com.au/make-a-booking/submit-booking.html&b_terms=1&chargetypeid=33&deposit=580.00&notes=4 Nights - 26/11/2016 to 30/11/2016&propertyid=2&total=580.00&vpc_AccessCode=903876BC&vpc_Amount=58000&vpc_Command=pay&vpc_Locale=en&vpc_MerchTxnRef=1479746896&vpc_Merchant=BBL5800396&vpc_OrderInfo=Studio Deluxe&vpc_ReturnURL=http://fallscreekcountryclub.com.au/make-a-booking/booking-complete.html&vpc_Version=1&vpc_SecureHash=A5BA6503FC7A169A90C9AAC7039878F45D761180D874789172EB5A58298022E4&vpc_SecureHashType=SHA256 

Any ideas on what I've done wrong?? I called the bank, and they couldn't help me, they had no idea what I was even talking about..
I know the $SECURE_SECRET number is correct, as it's the same number I've used for the original md5 hash. So the problem lays with the sha256 hash, and I'm not sure why, or how to fix it.
","Hi i am sharing with u my working code. 
Enjoy.
   $secretHash=""xxxxxx"";
    $accessCode='xxxxx';
    $merchantId='xxxxx';    

    $data = array(
        ""vpc_AccessCode"" => $accessCode,
        ""vpc_Amount"" => '100',
        ""vpc_Command"" => 'pay',
        ""vpc_Locale"" => 'en',
        ""vpc_MerchTxnRef"" =>  ""REF_"".time(),
        ""vpc_Merchant"" => $merchantId,
        ""vpc_OrderInfo"" => ""Order_N_"".time(),
        ""vpc_ReturnURL"" => urlencode(""yourReturnUrl""),
        ""vpc_Version"" => '1',
        'vpc_SecureHashType' => 'SHA256'    
    );

    ksort($data);
    $hash = null;
    foreach ($data as $k => $v) {
        if (in_array($k, array('vpc_SecureHash', 'vpc_SecureHashType'))) {
            continue;
        }
        if ((strlen($v) > 0) && ((substr($k, 0, 4)==""vpc_"") || (substr($k, 0, 5) ==""user_""))) {
            $hash .= $k . ""="" . $v . ""&"";
        }
    }
    $hash = rtrim($hash, ""&"");

    $secureHash = strtoupper(hash_hmac('SHA256', $hash, pack('H*', $secretHash)));
    $paraFinale = array_merge($data, array('vpc_SecureHash' => $secureHash));
    $actionurl = 'https://migs.mastercard.com.au/vpcpay?'.http_build_query($paraFinale);

    //print_r($actionurl);
    header(""Location:"".$actionurl);

","4804","<php><payment-gateway><sha256><hmac>","3","8","3","2017-03-25 15:33:13","40779058","0","1","","","","2016-11-22 05:21:17",""
"6532606","What is the output format of SHA256","What is the output format of the SHA256? It is composed by letters and numbers only? And it is case insensitive?
","As with most (all?) crypto hashes, the output of SHA-256 is binary data. How that binary data is encoded in a text format is up to you. For example, you could encode it as hex, or base64.
","4792","<sha256><sha>","7","12","1","2011-06-30 09:22:35","6532636","0","","","","","2011-06-30 09:18:45",""
"14733065","Hash and encode variable before sending along with request","I'm trying to setup JMeter for connecting to a service which requires some hashing be done on some variables before I start and in-between requests.
I've created a User Defined Variable that has the authentication info in plain text.
Before the first HTTP Request is called I need to hash the password using SHA256, encode it using base64 and then convert to uppercase.
I will receive an auth_token within a JSON formated response body. Then I  need to do the same SHA256 -> base64 -> uppercase chain to that auth_token and from then on it will be used in the request header.
","
If you don't implement resource-critical scenarios (load-testing) you can possibly use e.g. JSR223 Sampler / JSR223 PostProcessor / JSR223 PreProcessor with a bit of code.
E.g.

Use JSR223 Sampler / PostProcessor / PreProcessor with the following [groovy] code:


import java.security.MessageDigest;
import org.apache.commons.codec.binary.Base64;
import org.testng.annotations.Test;

String [] params = Parameters.split("","");

String text = params[0];
MessageDigest md = MessageDigest.getInstance(""SHA-256"");

md.update(text.getBytes(""UTF-8""));
byte[] digest = md.digest();

byte[] encoded = Base64.encodeBase64(digest);
String encText = (new String(encoded)).toUpperCase();

vars.put(""encodedValue"",encText);


You can re-use this sampler both to hash both password and auth_token - via ""Parameters"" field in JSR223 Sampler configuration: use e.g. ${password} variable in the first case, and auth_token - in the second.
Hashed value you can refer as ${encodedValue} variable.

Similar groovy code used with __groovy function.
jmeter-plugins set contains ${__MD5(...)}, ${__base64Encode(...)}, ${__uppercase(...)} functions but that's not enough for your case (no SHA256 digest).
You can also look onto OS Process Sampler to implement the same using your OS (nice if linux) capabilities.

","4778","<scripting><base64><jmeter><sha256>","3","5","2","2017-11-15 10:01:29","14735572","0","","7294900","","2017-11-15 07:32:24","2013-02-06 15:48:41",""
"14733065","Hash and encode variable before sending along with request","I'm trying to setup JMeter for connecting to a service which requires some hashing be done on some variables before I start and in-between requests.
I've created a User Defined Variable that has the authentication info in plain text.
Before the first HTTP Request is called I need to hash the password using SHA256, encode it using base64 and then convert to uppercase.
I will receive an auth_token within a JSON formated response body. Then I  need to do the same SHA256 -> base64 -> uppercase chain to that auth_token and from then on it will be used in the request header.
","There's a new function __digest, currently in nightly builds

In your case to save in encodedValue variable the result of password variable use the following:
${__digest(SHA-256,${password},,,encodedValue)}

You can download Custom JMeter Functions plugin to call base 64 encoding function:
${__base64Encode(encodedValue, base64Value)}

And then call uppercase function:
${__uppercase(base64Value, finalValue)}

${finalValue} will hold the final value of this operations
","4778","<scripting><base64><jmeter><sha256>","3","1","2","2017-11-15 10:01:29","14735572","0","","7294900","","2017-11-15 07:32:24","2013-02-06 15:48:41",""
"10874081","HMAC SHA-256 and Facebook signed_request","So, I'm working on validating Facebook's signed_request using Java. Unfortunately, I keep running into issues with the validation process.  I've looked at this documentation, and emulated their algorithm, to no success. I've also followed this tutorial, and continued to come up with my calculated signature being different from the one that Facebook sent.
Or at least, that was what String.equals() was telling me.
So I decided to poke at it some more.
I set it up to iterate over the bytes in my calculated signature and the provided ones. Low and behold, the first 32 bytes of my signature matched theirs exactly. It was just missing another 400+ bytes of data.
At that point, I decided I should probably get a better notion of what the heck was going on. I looked up SHA-256, and found that, indeed, it only creates 32 bytes of information. So then I'm left with over 400 bytes of data which Facebook claims was generated using the HMAC SHA-256 algorithm. I thought I should compare the maximum length of SHA-256 with the length of the data I'm hashing, but that just showed that there was way, way, way a lot of room to spare (Message size: 575 bytes; Maximum Size: 2.305843009213694 x 10^18 bytes).
Is Facebook making shit up? Or am I missing something?
edit
This is the function I use to hash the data. I pass in my facebook secret code (for key), and the base64url encoded JSON object (for data). It consistently returns a byte array of length 32 with data that matches the first 32 bytes of the signature provided by facebook.
private byte[] hmacSHA256(String data, String key) throws Exception {
    SecretKeySpec secretKey = new SecretKeySpec(key.getBytes(""UTF-8""), ""HmacSHA256"");
    Mac mac = Mac.getInstance(""HmacSHA256"");
    mac.init(secretKey);
    mac.update(data.getBytes(""UTF-8""));
    byte[] hmacData = mac.doFinal();
    return hmacData;
}

","
I looked up SHA-256, and found that, indeed, it only creates 32 bytes of information. So then I'm left with over 400 bytes of data which Facebook claims was generated using the HMAC SHA-256 algorithm.

The data of the signed request is not „created” using HMAC SHA-256 – it’s signed with it.
The first part of the signed request, before the dot, is the signature – the rest is the data payload. You have to hash that payload data and compare the hash your getting with the signature – these two should match, to prove the signed request is genuine.
If that doesn’t help you see clearer, show us some code please.
","4755","<java><facebook><sha256>","1","0","2","2013-01-14 16:44:49","14322761","0","4","725871","","2012-06-03 22:44:01","2012-06-03 21:29:08",""
"10874081","HMAC SHA-256 and Facebook signed_request","So, I'm working on validating Facebook's signed_request using Java. Unfortunately, I keep running into issues with the validation process.  I've looked at this documentation, and emulated their algorithm, to no success. I've also followed this tutorial, and continued to come up with my calculated signature being different from the one that Facebook sent.
Or at least, that was what String.equals() was telling me.
So I decided to poke at it some more.
I set it up to iterate over the bytes in my calculated signature and the provided ones. Low and behold, the first 32 bytes of my signature matched theirs exactly. It was just missing another 400+ bytes of data.
At that point, I decided I should probably get a better notion of what the heck was going on. I looked up SHA-256, and found that, indeed, it only creates 32 bytes of information. So then I'm left with over 400 bytes of data which Facebook claims was generated using the HMAC SHA-256 algorithm. I thought I should compare the maximum length of SHA-256 with the length of the data I'm hashing, but that just showed that there was way, way, way a lot of room to spare (Message size: 575 bytes; Maximum Size: 2.305843009213694 x 10^18 bytes).
Is Facebook making shit up? Or am I missing something?
edit
This is the function I use to hash the data. I pass in my facebook secret code (for key), and the base64url encoded JSON object (for data). It consistently returns a byte array of length 32 with data that matches the first 32 bytes of the signature provided by facebook.
private byte[] hmacSHA256(String data, String key) throws Exception {
    SecretKeySpec secretKey = new SecretKeySpec(key.getBytes(""UTF-8""), ""HmacSHA256"");
    Mac mac = Mac.getInstance(""HmacSHA256"");
    mac.init(secretKey);
    mac.update(data.getBytes(""UTF-8""));
    byte[] hmacData = mac.doFinal();
    return hmacData;
}

","Since I also came in here looking for an answer to a similar problem.
This is the code that works for me:
import org.apache.commons.codec.binary.Base64;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

private JSONObject parseFBSignedRequest(String signedRequest, String secret) throws UnsupportedEncodingException, Exception {
    //split request into signature and data
    String[] signedRequests = signedRequest.split(""\\."", 2);
    //parse signature
    String sig = signedRequests[0];

    //parse data and convert to json object
    String data = signedRequests[1];

    //I assumed it is UTF8
    JSONObject jsonData = new JSONObject(new String(Base64.decodeBase64(data), ""UTF-8""));
    //check signature algorithm
    if(!jsonData.getString(""algorithm"").equals(""HMAC-SHA256"")) {
        //unknown algorithm is used
        return null;
    }

    //check if data is signed correctly
    if(!hmacSHA256(signedRequests[1], secret).equals(sig)) {
        //signature is not correct, possibly the data was tampered with
        return null;
    }
    return jsonData;
}

//HmacSHA256 implementation 
private String hmacSHA256(String data, String key) throws Exception {
    SecretKeySpec secretKey = new SecretKeySpec(key.getBytes(""UTF-8""), ""HmacSHA256"");
    Mac mac = Mac.getInstance(""HmacSHA256"");
    mac.init(secretKey);
    byte[] hmacData = mac.doFinal(data.getBytes(""UTF-8""));
    return new String(Base64.encodeBase64URLSafe(hmacData), ""UTF-8"");
}

","4755","<java><facebook><sha256>","1","6","2","2013-01-14 16:44:49","14322761","0","4","725871","","2012-06-03 22:44:01","2012-06-03 21:29:08",""
"2299846","Are there circumstances where a hash algorithm can be guaranteed unique?","If I'm hashing size-constrained similar data (social security numbers, for example) using a hash algorithm with a larger byte size than the data (sha-256, for example), will the hash guarantee the same level of uniqueness as the original data?
","If you're using a cryptographic hash like SHA, then the short answer is yes.
","4755","<hash><unique><sha256><hash-code-uniqueness>","7","1","5","2010-02-22 02:44:49","","0","","","","","2010-02-19 21:50:38",""
"2299846","Are there circumstances where a hash algorithm can be guaranteed unique?","If I'm hashing size-constrained similar data (social security numbers, for example) using a hash algorithm with a larger byte size than the data (sha-256, for example), will the hash guarantee the same level of uniqueness as the original data?
","You can always create a customized hash that guarantees uniqueness.  For data in a known domain (like SSN's), the exercise is relatively simple.
If your target hash value actually has more bits available than what you're hashing, the hash simply maps input values to one of the available output values.  This will be a simple linear mapping from input value as a multi-byte integer to the output as a multi-byte integer.
When your target hash value has fewer bits than what's being hashed, then uniqueness cannot ever be guaranteed. 
","4755","<hash><unique><sha256><hash-code-uniqueness>","7","5","5","2010-02-22 02:44:49","","0","","","","","2010-02-19 21:50:38",""
"2299846","Are there circumstances where a hash algorithm can be guaranteed unique?","If I'm hashing size-constrained similar data (social security numbers, for example) using a hash algorithm with a larger byte size than the data (sha-256, for example), will the hash guarantee the same level of uniqueness as the original data?
","One key feature of a cryptographically secure hash function is that you are safe from collisions beyond reasonable doubt, regardless of the input. This is also valid for input shorter than the output's size, which is the same of a longer message with little entropy. So you can use SHA-2 without worrying about collisions.
","4755","<hash><unique><sha256><hash-code-uniqueness>","7","1","5","2010-02-22 02:44:49","","0","","","","","2010-02-19 21:50:38",""
"2299846","Are there circumstances where a hash algorithm can be guaranteed unique?","If I'm hashing size-constrained similar data (social security numbers, for example) using a hash algorithm with a larger byte size than the data (sha-256, for example), will the hash guarantee the same level of uniqueness as the original data?
","The probability of a hash collision has nothing to do with the size of the input string (except to the extent that it indicates how many inputs you need to keep uniqueness among). It's possible to have a hash collision when you hash 0 and 1 using a perfect hash algorithm, although the possibility is 1/(2^bit-length). Which in the case of SHA-256 is effectively zero. 
Hash collisions are a birthday paradox problem. In the case of a 256 bit hash, the probability of a collision among two inputs is purely dependent on the count of inputs and is:

1 - (2^256)! / ((2^256^inputcount) * (2^256-inputcount)!) or as others have said -- basically zero for reasonable numbers of inputs.

","4755","<hash><unique><sha256><hash-code-uniqueness>","7","5","5","2010-02-22 02:44:49","","0","","","","","2010-02-19 21:50:38",""
"2299846","Are there circumstances where a hash algorithm can be guaranteed unique?","If I'm hashing size-constrained similar data (social security numbers, for example) using a hash algorithm with a larger byte size than the data (sha-256, for example), will the hash guarantee the same level of uniqueness as the original data?
","Others have pointed out that collisions should not be a concern; that is the whole point of cryptographically secure hash functions. I would just like to add the following:

If your input set is small enough (e.g. data is SSN -- there are less than a billion of them), then the absence of collision is amenable to verification: just test it exhaustively.
If the input set is too big to be exhaustively scanned, then it is expected that the absence of collision cannot be proven. Good hash functions are expected to act as random oracles, and on a random oracle you cannot prove such a property without trying exhaustively. Being able to prove the absence of collision would suspiciously look like a weakness of the function.

","4755","<hash><unique><sha256><hash-code-uniqueness>","7","2","5","2010-02-22 02:44:49","","0","","","","","2010-02-19 21:50:38",""
"7632145","How do I create a hash of a file on iOS?","I'm trying to create unique file names by renaming them using their hashed value in iOS. How can I do that?
","you could achieve this by extending NSString,
Try this in your .h:
@interface NSString(MD5)

- (NSString *)generateMD5Hash

@end

and this in your .m
- (NSString*)generateMD5Hash
{
  const char *string = [self UTF8String];
  unsigned char md5Buffer[CC_MD5_DIGEST_LENGTH];
  CC_MD5(string, strlen(string), md5Buffer);
  NSMutableString *output = [NSMutableString stringWithCapacity:CC_MD5_DIGEST_LENGTH * 2];
  for(int i = 0; i < CC_MD5_DIGEST_LENGTH; i++) 
    [output appendFormat:@""%02x"",md5Buffer[i]];
  return output;
}

you can implement this by making a new class called NSString+MD5, and inserting the code above in the corresponding files (.h and .m) 
EDIT: Do not forget to import 

< CommonCrypto/CommonDigest.h >

EDIT 2:
And for NSData;
@interface NSData(MD5)

- (NSString *)generateMD5Hash;

@end

your .m:
- (NSString *)generateMD5Hash
{
  unsigned char md5Buffer[CC_MD5_DIGEST_LENGTH];
  CC_MD5(self.bytes, (CC_LONG)self.length, md5Buffer);
  NSMutableString *output = [NSMutableString stringWithCapacity:CC_MD5_DIGEST_LENGTH * 2];
  for(int i = 0; i < CC_MD5_DIGEST_LENGTH; i++) 
    [output appendFormat:@""%02x"",md5Buffer[i]];

  return output;
}

Please note that the value returned is autorelease and might need to be retained by the receiver.
Hope this helps.
","4750","<iphone><ios><hash><md5><sha256>","7","8","3","2015-10-28 09:59:33","7632207","0","4","","","","2011-10-03 07:28:22",""
"7632145","How do I create a hash of a file on iOS?","I'm trying to create unique file names by renaming them using their hashed value in iOS. How can I do that?
","Why don't you simply generate unique identifiers and use it? like
CFUUIDRef uuidObj = CFUUIDCreate(nil);
NSString *uniqueId = (NSString*)CFUUIDCreateString(nil, uuidObj);
CFRelease(uuidObj);
NSLog(@""%@"",uniqueId);
[uniqueId autorelease];

","4750","<iphone><ios><hash><md5><sha256>","7","1","3","2015-10-28 09:59:33","7632207","0","4","","","","2011-10-03 07:28:22",""
"7632145","How do I create a hash of a file on iOS?","I'm trying to create unique file names by renaming them using their hashed value in iOS. How can I do that?
","Using NSData is an expensive choice. Better use NSFileHandler extension if you are dealing with big files anytime. 
","4750","<iphone><ios><hash><md5><sha256>","7","0","3","2015-10-28 09:59:33","7632207","0","4","","","","2011-10-03 07:28:22",""
"41954287","SHA256 base 64 hash generation in SQL Server","I need to generate a SHA256 base 64 hash from a table in SQL server but I can't find that algorithm in the list HASHBYTES arguments. 
Is there a way to generate it directly in SQL Server?
Duplicate disclamer:
My question is not duplicate of SHA256 in T-sql stored procedure as I am looking for the SHA256 base 64 version of the algorithm which is not listed in the page.
Numeric Example
I have this query result in SQL Server

Start date,End date,POD,Amount,Currency 
2016-01-01,2016-12-31,1234567890,12000,EUR

this give me the following string (using concatenate function) 

2016-01-012016-12-31123456789012000EUR

whit this convertion tool I get the following hash 

GMRzFNmm90KLVtO1kwTf7EcSeImq+96QTHgnWFFmZ0U

that I need to send to a customer.
","First, the generator link you provided outputs the base64 representation in not exactly correct format. Namely, it omits the padding sequence. Though theoretically optional, padding is mandatory in MS SQL Server (tested on 2012 and 2016 versions).
With this in mind, the following code gives you what you need:
declare @s varchar(max), @hb varbinary(128), @h64 varchar(128);

select @s = '2016-01-012016-12-31123456789012000EUR';

set @hb = hashbytes('sha2_256', @s);
set @h64 = cast(N'' as xml).value('xs:base64Binary(sql:variable(""@hb""))', 'varchar(128)');

select @hb as [BinaryHash], @h64 as [64Hash];

Apart from the aforementioned padding, there is another caveat for you to look for. Make sure that the input string is always of the same type, that is, either always varchar or always nvarchar. If some of your hashes will be calculated from ASCII strings and some from UTF-16, results will be completely different. Depending on which languages are used in your system, it might make sense to always convert the plain text to nvarchar before hashing.
","4672","<sql-server><sha256><sha>","3","11","1","2017-02-01 04:41:58","41972037","6","2","-1","","2017-05-23 12:00:10","2017-01-31 09:48:57",""
"5026448","Bouncy Castle crypto library hashing via SHA256","I want to perform SHA256 hashing in a Blackberry application. Searching, I found the Bouncy Castle project has a crypto library for this, but I can't find any samples to show how to use SHA256 hashing.
","Just reposting user598312's answer as a response instead of a comment, so people know the solution. 
private static byte[] getSHA512(String key) {
    SHA512Digest digester = new SHA512Digest();
    byte[] retValue = new byte[digester.getDigestSize()];
    digester.update(key.getBytes(), 0, key.length());
    digester.doFinal(retValue, 0);
    return retValue;
}

","4634","<blackberry><java-me><bouncycastle><sha256>","2","2","2","2012-10-28 22:46:48","","4","1","75204","","2011-02-17 19:40:37","2011-02-17 08:06:48",""
"5026448","Bouncy Castle crypto library hashing via SHA256","I want to perform SHA256 hashing in a Blackberry application. Searching, I found the Bouncy Castle project has a crypto library for this, but I can't find any samples to show how to use SHA256 hashing.
","BlackBerry has built-in implementations of nearly everything in the BouncyCastle API.  For SHA256, there is SHA256Digest.
","4634","<blackberry><java-me><bouncycastle><sha256>","2","0","2","2012-10-28 22:46:48","","4","1","75204","","2011-02-17 19:40:37","2011-02-17 08:06:48",""
"28333770","openSSL how to sign a certificate with SHA256","I would like to know how to use the openSSL tools to sign a certificate signing request with sha256 as the message digest.
I don't quite understand if the digest is already computed in the request, or if it is computed by the CA. 
For creating the request, the tool req allows to specify which message digest to use, and -sha256 is an option.
However, for signing the requests, openSSL provides two tools: ca and x509.
However, none of those allow for using sha256. According to the official documentation, ca only supports md5, sha1 and mdc2. x509 only supports md2, md5, sha1, mdc2.
Thank you.
","I think the documentation might be old, actually.  I believe it works, although it may or may not use the -md switch.  Have you tried it, yet?
According to this thread, sha2 support was included by default awhile ago.  So there's no reason it shouldn't work.
Indeed, this thread shows a user using -md sha256 with a ca command.  
Also, this thread seem to corroborate the the sha256 switch can be enabled in the openssl.cnf file as the default_md for the CA.
And this thread shows some issues with the --help documentation.
Good luck!
","4613","<ssl><openssl><ssl-certificate><sha256>","4","7","1","2016-12-26 13:52:36","28340604","1","","","","","2015-02-04 23:48:38",""
"26940690","How to hide password from Post request url and browser dump","This might be an old question but i still didn't find proper answer for this question, so please be patient.
I have a https login page,which is using a form post method and sending the credentials to the server...blah blah.
At the time of login, if you use IE and F12 for network monitoring, click start capturing. You can see some URL which has similar to login, servetloginauth(from gmail.com) and you can see the request body with your username and password.
Okay, one can argue, that only if the user didn't logout you can see that.
Now logout and don't close the browser and get browser dump(any browser, any version) off of Task Manager(i'm not sure how to do the same in Mac). 
Use WinHex editor to open the dump file and do Search/Find: ""password="" or the actual password(since u r testing your own login, you already knew your password).
You can see the password in clear text.
Now my question is, How can i mask the password:
1. Either in the Post request URL
2. Or when the browser is saving my credentials to the dump, i neeed it to be masked/encrypted or should not save the password at all.
My code for jsp:
<s:form id=""login"" name=""loginForm1"" action=""login"" namespace=""/"" method=""post"" enctype=""multipart/form-data"" >  
      <fieldset><!-- login fieldset -->
        <div><!-- div inside login fieldset -->
                <div....
                  <label for=""password"" class=""loginLabel"">Password</label>
                  <input type=""password"" name=""password"" id=""password"" class=""longField nofull absPosition"" size=""16"" autocomplete=""off"" alt=""Password"" placeholder=""Password"" title=""Password|<

Current solution i have as below, but i need any alternatives without much effort.

The password can be read from the memory if it is being sent as
  cleartext. Using the salted hash technique for password transmission
  will resolve this issue. Hashing is a cryptographic technique in which
  the actual value can never be recovered. In the salted hash technique,
  the passwords are stored as hashes in the database. The server
  generates a random string, salt, and sends it along with the Login
  page to the client. A JavaScript code on the page computes a hash of
  the entered password, concatenates the salt and computes a hash of the
  entire string. This value is sent to the server in the POST request.
The server then retrieves the user's hashed password from the
  database, concatenates the same salt and computes a hash. If the user
  had entered the correct password, these two hashes should match.
Now, the POST request will contain the salted hash value of the
  password and the cleartext password will not be present in the memory
SHA 256 is a strong hashing algorithm available today – readymade
  implementations in JavaScript are available and quoted in the ""Good
  Reads"" section.
Note: For pages containing sensitive information or pages wherein data
  can be modified in the database, use JavaScript to flush the memory of
  the browse

and the images are as below.



On an additional note, i can settle with something Citibank did for their customers on their website.
I logged in the website and in the dump i see my username is masked(as it appears in the website), i need something which does the same to the password field too. can someone explain me how to do it please.

","What you are suggesting has a serious security flaw.  If you calculate the hash on the browser and then send to the server (without the password) then the server can't trust that the browser actually calculated the hash.  A hacker might merely have read the file of hash values and construct a program to send the hash value in.  The security comes from the server (a trusted environment) having the password which can not be guessed from the hash, and then proving to itself that the password produces the hash.
If you send both the hash and the password, then you have not solved your problem about the password being available in clear text.
There would seem to be a way if you hash the password multiple times.  You can hash the password once (or more times) on the browser, and use that for subsequent hashing calls on the server.  It seems normal to hash multiple times (although it is unclear how much this really makes it more secure).  The point is that the browser would be holding an intermediate value which would not tell you the password that the user typed.  It would, however, still tell you the value that you need to send to the server to authenticate the user.  That value is infact a proxy for the password, and is usable as a password in calls to the server.   But ... it is not the password that the user typed in.
One final way looks that it might work:  use an asymmetric encryption.  The server provides a salt value and a public key.  The password is encrypted using the public key, which can only be decrypted by the private key that is held on the server.  Because the salt value changes every session, the encrypted value held in memory itself would not be usable across another session.  The server decrypts the value, extracts the salt, giving it the password from which to go ahead and do password authentication.
","4531","<java><jsp><ssl><https><sha256>","4","1","2","2017-08-08 14:00:21","","0","1","2183788","","2014-11-17 18:51:16","2014-11-14 23:42:38",""
"26940690","How to hide password from Post request url and browser dump","This might be an old question but i still didn't find proper answer for this question, so please be patient.
I have a https login page,which is using a form post method and sending the credentials to the server...blah blah.
At the time of login, if you use IE and F12 for network monitoring, click start capturing. You can see some URL which has similar to login, servetloginauth(from gmail.com) and you can see the request body with your username and password.
Okay, one can argue, that only if the user didn't logout you can see that.
Now logout and don't close the browser and get browser dump(any browser, any version) off of Task Manager(i'm not sure how to do the same in Mac). 
Use WinHex editor to open the dump file and do Search/Find: ""password="" or the actual password(since u r testing your own login, you already knew your password).
You can see the password in clear text.
Now my question is, How can i mask the password:
1. Either in the Post request URL
2. Or when the browser is saving my credentials to the dump, i neeed it to be masked/encrypted or should not save the password at all.
My code for jsp:
<s:form id=""login"" name=""loginForm1"" action=""login"" namespace=""/"" method=""post"" enctype=""multipart/form-data"" >  
      <fieldset><!-- login fieldset -->
        <div><!-- div inside login fieldset -->
                <div....
                  <label for=""password"" class=""loginLabel"">Password</label>
                  <input type=""password"" name=""password"" id=""password"" class=""longField nofull absPosition"" size=""16"" autocomplete=""off"" alt=""Password"" placeholder=""Password"" title=""Password|<

Current solution i have as below, but i need any alternatives without much effort.

The password can be read from the memory if it is being sent as
  cleartext. Using the salted hash technique for password transmission
  will resolve this issue. Hashing is a cryptographic technique in which
  the actual value can never be recovered. In the salted hash technique,
  the passwords are stored as hashes in the database. The server
  generates a random string, salt, and sends it along with the Login
  page to the client. A JavaScript code on the page computes a hash of
  the entered password, concatenates the salt and computes a hash of the
  entire string. This value is sent to the server in the POST request.
The server then retrieves the user's hashed password from the
  database, concatenates the same salt and computes a hash. If the user
  had entered the correct password, these two hashes should match.
Now, the POST request will contain the salted hash value of the
  password and the cleartext password will not be present in the memory
SHA 256 is a strong hashing algorithm available today – readymade
  implementations in JavaScript are available and quoted in the ""Good
  Reads"" section.
Note: For pages containing sensitive information or pages wherein data
  can be modified in the database, use JavaScript to flush the memory of
  the browse

and the images are as below.



On an additional note, i can settle with something Citibank did for their customers on their website.
I logged in the website and in the dump i see my username is masked(as it appears in the website), i need something which does the same to the password field too. can someone explain me how to do it please.

","You have to device for how the passwords are stored in the database. There are multiple ways to do this, but there is no way you can create anything that is IMPOSSIBLE to hack/read.
However, you can limit MITM attacks by hashing the password X number of times before sending it to the server.
When the hash is recived by the server, you do X number of new hash rounds. You should also figure out a how to manage your salt.
This should be sufficient for most applications. Also this is how most application does it these days.
gpEasy: http://gpeasy.com/ does this by hasing Sha-256, 50 times on client side. Then another 950 rounds on the server. In total 1000 rounds. This also includes a salt which is calculated by its ""current hash""
def hash(self, pw, loops = 50):
    pw = pw.strip()

    for i in range(loops):
        salt_len = re.sub(r'[a-f]', '', pw)

        try:
            salt_start = int(salt_len[0:0+1])
        except ValueError:
            salt_start = 0

        try:
            salt_len = int(salt_len[2:2+1])
        except ValueError:
            salt_len = 0    

        salt = pw[salt_start:salt_start+salt_len]
        pw = hashlib.sha512(pw.encode('utf-8') + salt.encode('utf-8')).hexdigest()
    return pw

This is a version of the mentioned algorithm for calculating hash with a salt from the first numbers in the hash.
","4531","<java><jsp><ssl><https><sha256>","4","1","2","2017-08-08 14:00:21","","0","1","2183788","","2014-11-17 18:51:16","2014-11-14 23:42:38",""
"42308516","SHA256 encryption and decryption (Python 2.7) - same word but different hash","I wanted to write a script that can encrypt and decrypt words. But I ran on a problem and cannot understand it. This code I used to encrypt is this:
 def encrypt():
    print ""Enter string for encryption: \n""
    rec = raw_input()
    enkr =hashlib.sha256(rec).hexdigest()
    print enkr

and code I am using to decrypt based on dictionary is this: 
def decrypt():
    print ""Enter hash for decryption: \n""
    rec = raw_input()
    print ""Enter path of wordlist""
    list = raw_input()
    wordl=open(list,""r"")
    wordk = wordl.readlines()
    for w in wordk:
        w = hashlib.sha256(w).hexdigest()
        if rec.lower() != w:
            print ""Not this "" + w
        elif rec.lower() ==w:
            print ""Found ! "" + w
            break
        else:
            print ""Nothing found ! ""

For example let's say i want to encrypt word ""admin"". I get this hash 8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918
and when i want to decrypt i get this 
fc8252c8dc55839967c58b9ad755a59b61b67c13227ddae4bd3f78a38bf394f7
and my question is, why am i getting two different hash with same function? Best regards, Khan
","8c69…a918 is the SHA256 hash of ""admin"".
fc82…94f7 is the SHA256 hash of ""admin\n"".
file.readlines() includes a trailing newline at the end of each line it reads. To remove that, you can use w.rstrip(""\n"").
","4488","<python><encryption><hash><sha256><sha>","0","3","2","2017-02-17 22:44:40","42308661","7","","14122","","2017-02-17 22:39:33","2017-02-17 22:33:56",""
"42308516","SHA256 encryption and decryption (Python 2.7) - same word but different hash","I wanted to write a script that can encrypt and decrypt words. But I ran on a problem and cannot understand it. This code I used to encrypt is this:
 def encrypt():
    print ""Enter string for encryption: \n""
    rec = raw_input()
    enkr =hashlib.sha256(rec).hexdigest()
    print enkr

and code I am using to decrypt based on dictionary is this: 
def decrypt():
    print ""Enter hash for decryption: \n""
    rec = raw_input()
    print ""Enter path of wordlist""
    list = raw_input()
    wordl=open(list,""r"")
    wordk = wordl.readlines()
    for w in wordk:
        w = hashlib.sha256(w).hexdigest()
        if rec.lower() != w:
            print ""Not this "" + w
        elif rec.lower() ==w:
            print ""Found ! "" + w
            break
        else:
            print ""Nothing found ! ""

For example let's say i want to encrypt word ""admin"". I get this hash 8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918
and when i want to decrypt i get this 
fc8252c8dc55839967c58b9ad755a59b61b67c13227ddae4bd3f78a38bf394f7
and my question is, why am i getting two different hash with same function? Best regards, Khan
","rec = raw_input() doesn't have a newline in it.
On the other hand, each line iterated upon by for w in wordk: has a trailing newline.
So you have to rstrip(""\n"") your lines or use splitlines() to get rid of the last newline character before performing the hash.
","4488","<python><encryption><hash><sha256><sha>","0","1","2","2017-02-17 22:44:40","42308661","7","","14122","","2017-02-17 22:39:33","2017-02-17 22:33:56",""
"38189100","Implementation of Kraken API in Java","So I currently working on an implementation of the Kraken API for Java. I am using this sample code I found on http://pastebin.com/nHJDAbH8.
The general usage as described by Kraken (https://www.kraken.com/help/api) is:

API-Key = API key 
API-Sign = Message signature using HMAC-SHA512 of
( URI path + SHA256( nonce + POST data ) ) and base64 decoded secret API
  key

and 

nonce = always increasing unsigned 64 bit integer
otp = two-factor password ( if two-factor enabled, otherwise not required )

however I am facing the following response:
{""error"":[""EAPI:Invalid key""]}

I already tried a couple of ways ( getting a new API, trying to change the sha256 methods, because I thought something is wrong with the way it is hashed ) 
So this is the code:
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.InvalidKeyException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

import org.apache.commons.codec.binary.Base64;

public class KrakenClient {

        protected static String key = ""myAPIKey"";     // API key
        protected static String secret = ""MySecret===="";  // API secret
        protected static String url = ""api.kraken.com"";     // API base URL
        protected static String version = ""0""; // API version


        public static void main(String[] args) throws Exception {
                queryPrivateMethod(""Balance"");
        }

        public static void queryPrivateMethod(String method) throws NoSuchAlgorithmException, IOException{

                long nonce = System.currentTimeMillis();

                String path = ""/"" + version + ""/private/"" + method; // The path like ""/0/private/Balance""

                String urlComp = ""https://""+url+path; // The complete url like ""https://api.kraken.com/0/private/Balance""

                String postdata = ""nonce=""+nonce;

                String sign = createSignature(nonce, path, postdata);

                postConnection(urlComp, sign, postdata);
        }

        /**
         * @param nonce
         * @param path
         * @param postdata
         * @return
         * @throws NoSuchAlgorithmException
         * @throws IOException
         */
        private static String createSignature(long nonce, String path,
                        String postdata) throws NoSuchAlgorithmException, IOException {

                return hmac(path+sha256(nonce + postdata),  new String(Base64.decodeBase64(secret)));
        }

        public static String sha256Hex(String text) throws NoSuchAlgorithmException, IOException{
                return org.apache.commons.codec.digest.DigestUtils.sha256Hex(text);
        }

        public static byte[] sha256(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException{
                MessageDigest md = MessageDigest.getInstance(""SHA-256"");

                md.update(text.getBytes());
                byte[] digest = md.digest();

                return digest;
        }

        public static void postConnection(String url1, String sign, String postData) throws IOException{

                URL url = new URL( url1 );
                HttpURLConnection connection = (HttpURLConnection) url.openConnection();

                connection.addRequestProperty(""API-Key"", key);
                connection.addRequestProperty(""API-Sign"", Base64.encodeBase64String(sign.getBytes()));
                //              connection.addRequestProperty(""API-Sign"", sign);
                connection.addRequestProperty(""User-Agent"", ""Mozilla/4.0"");
                connection.setRequestMethod( ""POST"" );
                connection.setDoInput( true );
                connection.setDoOutput( true );
                connection.setUseCaches( false );
                //              connection.setRequestProperty( ""Content-Type"",
                //                              ""application/x-www-form-urlencoded"" );
                connection.setRequestProperty( ""Content-Length"", String.valueOf(postData.length()) );

                OutputStreamWriter writer = new OutputStreamWriter( connection.getOutputStream() );
                writer.write( postData );
                writer.flush();


                BufferedReader reader = new BufferedReader(
                                new InputStreamReader(connection.getInputStream()) );

                for ( String line; (line = reader.readLine()) != null; )
                {
                        System.out.println( line );
                }

                writer.close();
                reader.close();
        }


        public static String hmac(String text, String secret){

                Mac mac =null;
                SecretKeySpec key = null;

                // Create a new secret key
                try {
                        key = new SecretKeySpec( secret.getBytes( ""UTF-8""), ""HmacSHA512"" );
                } catch( UnsupportedEncodingException uee) {
                        System.err.println( ""Unsupported encoding exception: "" + uee.toString());
                        return null;
                }
                // Create a new mac
                try {
                        mac = Mac.getInstance( ""HmacSHA512"" );
                } catch( NoSuchAlgorithmException nsae) {
                        System.err.println( ""No such algorithm exception: "" + nsae.toString());
                        return null;
                }

                // Init mac with key.
                try {
                        mac.init( key);
                } catch( InvalidKeyException ike) {
                        System.err.println( ""Invalid key exception: "" + ike.toString());
                        return null;
                }


                // Encode the text with the secret
                try {

                        return new String( mac.doFinal(text.getBytes( ""UTF-8"")));
                } catch( UnsupportedEncodingException uee) {
                        System.err.println( ""Unsupported encoding exception: "" + uee.toString());
                        return null;
                }
        }
}

","Here is a working example:
static String key = ""---myKey---"";
static String secret = ""---mySecret---"";
String nonce, signature, data, path;
static String domain = ""https://api.kraken.com"";

void account_balance() {
    nonce = String.valueOf(System.currentTimeMillis());
    data = ""nonce="" + nonce;
    path = ""/0/private/Balance"";
    calculateSignature();
    String answer = post(domain + path, data);
    // on empty accounts, returns {""error"":[],""result"":{}}
    // this is a known Kraken bug
    ...
}

String post(String address, String output) {
    String answer = """";
    HttpsURLConnection c = null;
    try {
        URL u = new URL(address); 
        c = (HttpsURLConnection)u.openConnection();
        c.setRequestMethod(""POST"");
        c.setRequestProperty(""API-Key"", key);
        c.setRequestProperty(""API-Sign"", signature);
        c.setDoOutput(true);
        DataOutputStream os = new DataOutputStream(c.getOutputStream());
        os.writeBytes(output);
        os.flush();
        os.close();
        BufferedReader br = null;
        if(c.getResponseCode() >= 400) {
            System.exit(1);
        }
        br = new BufferedReader(new InputStreamReader((c.getInputStream())));
        String line;
        while ((line = br.readLine()) != null)
            answer += line;
    } catch (Exception x) {
        System.exit(1);
    } finally {
        c.disconnect();
    }
    return answer;        
}

void calculateSignature() {
    signature = """";
    try {
        MessageDigest md = MessageDigest.getInstance(""SHA-256"");
        md.update((nonce + data).getBytes());
        Mac mac = Mac.getInstance(""HmacSHA512"");
        mac.init(new SecretKeySpec(Base64.decodeBase64(secret.getBytes()), ""HmacSHA512""));
        mac.update(path.getBytes());
        signature = new String(Base64.encodeBase64(mac.doFinal(md.digest())));
    } catch(Exception e) {}
    return;
}

","4401","<java><api><sha256><trading>","6","9","1","2017-03-29 00:13:20","43081507","6","3","3666197","","2016-11-14 11:53:40","2016-07-04 16:32:20",""
"22156286","Hashed password register / login","I'v googled around for way to do this properly and there's just a lot of variations on how to do so. So i've come up with this and wouldn't mind some critique and links to better practices.
// Register Form - User providese username(email) password(text) //
So i grab the data:
$user = mysql_real_escape_string($_POST['user']);
$pswd = mysql_real_escape_string($_POST['pass']);
$salt = hash( 'sha256', microtime() . rand() );
$encrypt = hash( 'sha256', $pswd . $salt );

Then insert into database user_email | encrypted_pass | salt
// Login Form - User providese username(email) password(text) //
So first based on user(email) i grab encrypted_pass and salt info. Then,
$user = mysql_real_escape_string($_POST['user']);
$pswd = mysql_real_escape_string($_POST['pass']);

$encrypted_pass_fromDB = $var['encrypted_pass'];
$salt_fromDB = $var['salt'];

if (hash( 'sha256', $passwrd . $salt_fromDB) === $encrypted_pass_fromDB)
     {
      echo ""GOT IT!"";
     }

I've read bcrypt is a better option, but for now i want to understand the SALT method better. Also, when i use $options = ['cost' => 11,]; i get an error Parse error: syntax error, unexpected '[' but that's a separate issue i guess. Used code based on PHP salt and hash SHA256 for login password
Any comments are appreciated! Thanks!
","The only thing that you are protected against when adding a salt to your hash is the use of huge tables of pre-computed hashes called ""Rainbow Tables"". These have not been a major problem in quite some time, though because:

Rainbow tables containing extended character sets are massive, some requiring upwards of 16GB of RAM to search.
Parallelized bruteforce cracking across multiple computers, or offloaded to cloud services like AWS are faster, cheaper, and makes the addition of simple salts virtually inconsequential.

Better algorithms hash the password thousands of times and apply the given salt in a cryptographically ""proper"" way to make it more difficult to crack. However, the hashing algorithms that they are based on like SHA and MD5 are designed to be small and fast, and bruteforcing them requires large amounts of CPU time, which is cheap and easy to parallelize.
Bcrypt is different. It uses the Blowfish algorithm which requires relatively large amounts of RAM, which is expensive, and thus difficult to parallelize. This is why everyone recommends it so strongly.
TL;DR Hashing is better than plaintext, salted is better than unsalted, bcrypt is miles better than pretty much everything else out there so frickin use it.
","4390","<php><salt><sha256>","-1","3","3","2014-03-04 20:15:53","22156638","3","","-1","","2017-05-23 12:16:36","2014-03-03 20:06:24",""
"22156286","Hashed password register / login","I'v googled around for way to do this properly and there's just a lot of variations on how to do so. So i've come up with this and wouldn't mind some critique and links to better practices.
// Register Form - User providese username(email) password(text) //
So i grab the data:
$user = mysql_real_escape_string($_POST['user']);
$pswd = mysql_real_escape_string($_POST['pass']);
$salt = hash( 'sha256', microtime() . rand() );
$encrypt = hash( 'sha256', $pswd . $salt );

Then insert into database user_email | encrypted_pass | salt
// Login Form - User providese username(email) password(text) //
So first based on user(email) i grab encrypted_pass and salt info. Then,
$user = mysql_real_escape_string($_POST['user']);
$pswd = mysql_real_escape_string($_POST['pass']);

$encrypted_pass_fromDB = $var['encrypted_pass'];
$salt_fromDB = $var['salt'];

if (hash( 'sha256', $passwrd . $salt_fromDB) === $encrypted_pass_fromDB)
     {
      echo ""GOT IT!"";
     }

I've read bcrypt is a better option, but for now i want to understand the SALT method better. Also, when i use $options = ['cost' => 11,]; i get an error Parse error: syntax error, unexpected '[' but that's a separate issue i guess. Used code based on PHP salt and hash SHA256 for login password
Any comments are appreciated! Thanks!
","You should use the built in crypt function:
http://php.net/crypt
You have two options:
Let PHP Crypt generate the salt
$user = mysql_real_escape_string($_POST['user']);
$pswd = mysql_real_escape_string($_POST['pass']);

//Salt is generated automatically
$encrypt = crypt( $pswd );

Generate the Salt yourself
$user = mysql_real_escape_string($_POST['user']);
$pswd = mysql_real_escape_string($_POST['pass']);

//These are the settings for the salt (Separated so you can understand it)
$algorithm = ""2a"";
$length = ""12"";

//Start the salt by specifying the algorithm and length
$salt = ""$"" . $algorithm . ""$"" . $length . ""$"";

//Add on random salt and make base64 adjusted for bcrypt's version
$salt .= substr( str_replace( ""+"", ""."", base64_encode( mcrypt_create_iv( 128, MCRYPT_DEV_URANDOM ) ) ), 0, 22 );

//Encrypt with your generated salt
$encrypt = crypt( $pswd, $salt );

Verifying it is easy:
if ( $encrypted_pass_fromDB_with_salt === crypt( $passwrd, $encrypted_pass_fromDB_with_salt ) ) echo ""ok"";

","4390","<php><salt><sha256>","-1","1","3","2014-03-04 20:15:53","22156638","3","","-1","","2017-05-23 12:16:36","2014-03-03 20:06:24",""
"22156286","Hashed password register / login","I'v googled around for way to do this properly and there's just a lot of variations on how to do so. So i've come up with this and wouldn't mind some critique and links to better practices.
// Register Form - User providese username(email) password(text) //
So i grab the data:
$user = mysql_real_escape_string($_POST['user']);
$pswd = mysql_real_escape_string($_POST['pass']);
$salt = hash( 'sha256', microtime() . rand() );
$encrypt = hash( 'sha256', $pswd . $salt );

Then insert into database user_email | encrypted_pass | salt
// Login Form - User providese username(email) password(text) //
So first based on user(email) i grab encrypted_pass and salt info. Then,
$user = mysql_real_escape_string($_POST['user']);
$pswd = mysql_real_escape_string($_POST['pass']);

$encrypted_pass_fromDB = $var['encrypted_pass'];
$salt_fromDB = $var['salt'];

if (hash( 'sha256', $passwrd . $salt_fromDB) === $encrypted_pass_fromDB)
     {
      echo ""GOT IT!"";
     }

I've read bcrypt is a better option, but for now i want to understand the SALT method better. Also, when i use $options = ['cost' => 11,]; i get an error Parse error: syntax error, unexpected '[' but that's a separate issue i guess. Used code based on PHP salt and hash SHA256 for login password
Any comments are appreciated! Thanks!
","PHP offers now such an easy way to generate safe password hashes, that we should use it, have a look at the function password_hash().
// Hash a new password for storing in the database.
// The function automatically generates a cryptographically safe salt.
$hashToStoreInDb = password_hash($password, PASSWORD_BCRYPT);

// Check if the hash of the entered login password, matches the stored hash.
// The salt and the cost factor will be extracted from $existingHashFromDb.
$isPasswordCorrect = password_verify($password, $existingHashFromDb);

Of course it is good to understand how a salt works (and how difficult it is to handle it correctly), so try it out but use the function above for your life system.
","4390","<php><salt><sha256>","-1","1","3","2014-03-04 20:15:53","22156638","3","","-1","","2017-05-23 12:16:36","2014-03-03 20:06:24",""
"33144955","Failure [INSTALL_PARSE_FAILED_NO_CERTIFICATES]","I can't install a APK which I've signed with SHA-256 on an Intermec device (running Android 4.2). The very same APK I can install without any problems on a Nexus 5 (running Android 6.0).
I already checked both devices and both devices do indeed support SHA-256.
The error I get is:
C:\work\n\apks>adb install marlin-app-android-01.00.TRUNK-SNAPSHOT.apk
5136 KB/s (9431036 bytes in 1.793s)
        pkg: /data/local/tmp/marlin-app-android-01.00.TRUNK-SNAPSHOT.apk
Failure [INSTALL_PARSE_FAILED_NO_CERTIFICATES]

I used this command to sign the APK (using JDK6):
jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 -keystore nemo.keystore marlin-app-android-01.00.TRUNK-SNAPSHOT.apk NEMO

When I try to install the APK to the Intermec I get this logcat output:
10-15 11:19:50.550      416-435/? W/ActivityManager﹕ No content provider found for permission revoke: file:///data/local/tmp/marlin-app-android-01.00.TRUNK-SNAPSHOT.apk
10-15 11:19:50.612      416-435/? W/ActivityManager﹕ No content provider found for permission revoke: file:///data/local/tmp/marlin-app-android-01.00.TRUNK-SNAPSHOT.apk
10-15 11:19:50.784      416-435/? W/PackageParser﹕ Exception reading AndroidManifest.xml in /data/app/vmdl381788980.tmp
    java.lang.SecurityException: META-INF/NEMO.SF has invalid digest for res/drawable-mdpi-v4/notification.png in /data/app/vmdl381788980.tmp
            at java.util.jar.JarVerifier.invalidDigest(JarVerifier.java:134)
            at java.util.jar.JarVerifier.verifyCertificate(JarVerifier.java:364)
            at java.util.jar.JarVerifier.readCertificates(JarVerifier.java:271)
            at java.util.jar.JarFile.getInputStream(JarFile.java:398)
            at android.content.pm.PackageParser.loadCertificates(PackageParser.java:446)
            at android.content.pm.PackageParser.collectCertificates(PackageParser.java:637)
            at com.android.server.pm.PackageManagerService.installPackageLI(PackageManagerService.java:7886)
            at com.android.server.pm.PackageManagerService.access$1900(PackageManagerService.java:172)
            at com.android.server.pm.PackageManagerService$5.run(PackageManagerService.java:6018)
            at android.os.Handler.handleCallback(Handler.java:725)
            at android.os.Handler.dispatchMessage(Handler.java:92)
            at android.os.Looper.loop(Looper.java:137)
            at android.os.HandlerThread.run(HandlerThread.java:60)
10-15 11:19:50.784      416-435/? E/PackageParser﹕ Package ch.post.it.nemo.marlin has no certificates at entry AndroidManifest.xml; ignoring!

Apparently there is a problem with the file: res/drawable-mdpi-v4/notification.png
Next I verified the signing with this command:
C:\work\n\apks>jarsigner -verify -verbose -certs marlin-app-android-01.00.TRUNK-SNAPSHOT.apk

and got this output (an excerpt):
       46162 Thu Oct 15 10:52:26 CEST 2015 META-INF/MANIFEST.MF
       33900 Thu Oct 15 10:52:26 CEST 2015 META-INF/NEMO.SF
        1322 Thu Oct 15 10:52:26 CEST 2015 META-INF/NEMO.RSA
sm     43636 Thu Oct 15 08:49:12 CEST 2015 AndroidManifest.xml

      X.509, CN=Nemo, OU=IT12, O=Swiss Post, L=Bern, ST=BE, C=CH
      [certificate is valid from 24.06.13 10:59 to 09.11.40 09:59]

sm    113713 Thu Oct 15 08:49:12 CEST 2015 res/drawable-mdpi-v4/notification.png

      X.509, CN=Nemo, OU=IT12, O=Swiss Post, L=Bern, ST=BE, C=CH
      [certificate is valid from 24.06.13 10:59 to 09.11.40 09:59]

sm      1270 Thu Oct 15 08:49:12 CEST 2015 res/drawable-xhdpi-v11/fa_envelope.png

      X.509, CN=Nemo, OU=IT12, O=Swiss Post, L=Bern, ST=BE, C=CH
      [certificate is valid from 24.06.13 10:59 to 09.11.40 09:59]

sm      1255 Thu Oct 15 08:49:12 CEST 2015 res/drawable-xhdpi-v11/ic_stat_check.png

      X.509, CN=Nemo, OU=IT12, O=Swiss Post, L=Bern, ST=BE, C=CH
      [certificate is valid from 24.06.13 10:59 to 09.11.40 09:59]

The notification.png file is listed in there and seems to be okay.
I noticed that NEMO.SF and NEMO.RSA are in the APK which seems to be like a diplicate and in some other posts people recommended to delete one of both and re-sign the APK. I already did this but it didn't help anything.
I've pretty much tried everything I could find out. So far without any luck. Thanks for any help and suggestions.
","","4335","<android><apk><code-signing><sha256><intermec>","5","","0","2015-10-15 09:36:44","","2","3","","","","2015-10-15 09:36:44",""
"44472974","How long time would it take to decrypt a sha256 hash?","how to crack this hash if we know it have a length of 64 caracters and no upcases caracters and no special caracters only numbers and lowercase?
if we could make about 1.000.000 guesses per second?  
","You cannot decrypt a hash, because a hash is not encryption, it is a hash.
It is impossible. The question how long it takes to do an impossible task is meaningless. You can only decrypt something that is encrypted. A hash doesn't encrypt, it hashes. You cannot decrypt a hash because it isn't encrypted in the first place.
A hash function is not injective. It simply cannot be reversed. Period.
A hash function maps a large (potentially infinite) input space to a smaller (usually finite) output space. The Pigeonhole Principle tells us that when we map a larger space to a smaller space, there must be at least some elements of the larger input space that map to the same element of the smaller output space. Since there are potentially multiple inputs that map to the same output, the function cannot be reversed. The information which of the multiple inputs was mapped to the output is lost forever.
A hash cannot be decrypted.
","4226","<sha256>","-5","1","2","2017-06-10 14:10:53","","2","","","","","2017-06-10 11:47:57",""
"44472974","How long time would it take to decrypt a sha256 hash?","how to crack this hash if we know it have a length of 64 caracters and no upcases caracters and no special caracters only numbers and lowercase?
if we could make about 1.000.000 guesses per second?  
","The phrase ""decrypt a sha256 hash?"" is problematic, a hash is not encryption thus it can't be decrypted. What can be done is computed hashes and try to find some input that creates the same hash. But that hash may not be the initial value, it may be some other value that happens to have a matching hash.
Past the end of human life on the earth:
12,700,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 years.
((36^64)/100000000)/31536000
36 character in set
64 number of characters
1,000,000 attempts/second
~315,36,000 seconds/year  
There will also be around 36^64 / 2^256 or 34,600,000,000,000,000,000,000 collisions found.
Note that the possible combinations of the string are greater than the number of possible hashes. Thus it is clear that something is being lost when the hash is computed as exemplified by the number of potential collisions.
","4226","<sha256>","-5","3","2","2017-06-10 14:10:53","","2","","","","","2017-06-10 11:47:57",""
"7445150","How to create SHA-256 hash value for an XML message body","I'm trying to create an XML file that is human readable but can be verified as being unmodified.
The approach I am taking is as follows:

Generate the xml message body (canonicalization applied (C14N))
Generate the hash value for the message body (SHA-256)
Encrypt the hash value (AES-256)
Generate a message header using the encrypted hash

I'm hitting problems at every stage of this task but the current issue is generating the hash value from the XML body.
I get an exception ""ReadContentAsBase64 method is not supported on this XmlReader. Use CanReadBinaryContent property to find out if a reader implements it."" but I don't know how else to implement the reading of the XElement.
An example of the xml is below
<?xml version=""1.0"" encoding=""UTF-8""?>
<Application>
    <MessageHeader>
        <MessageID>00000001</MessageID>
        <MessageCheck>
            dHPHxMJGgDCHtFttgPROo24yi+R1RGx6Ahno2r0nV7zrcgR2+BX4f+RmNCVCsT5g
        </MessageCheck>
    </MessageHeader>
    <MessageBody>
        <Receipt>
            <Status>OK</Status>
            <FormReference>E00000000001</FormReference>
        </Receipt>
    </MessageBody>
</Application>

And here is the code I've been trying to get working to no avail:
/// <summary>
/// Convert the message body into a Hash value
/// </summary>
/// <param name=""MessageBody"">XElement holding all the message body XML nodes</param>
/// <returns>a base 64 string representing the hash code</returns>
private string GenerateMessageBodyHash(XElement MessageBody)
{
    string hash = string.Empty;
    try
    {
        // Convert the XElement into a stream of data
        using (XmlReader xr = MessageBody.CreateReader())
        {
            // Now that we have a reader, lets read the data into a byte array
            List<byte> dataList = new List<byte>();

            byte[] buffer = new byte[1000];
            int fileIndex = 0;
            int bytesRead = 0;

            while ((bytesRead = xr.ReadContentAsBase64(buffer, fileIndex, buffer.Length)) != 0 )
            {
                // Update the position into the file
                fileIndex += bytesRead;

                //add the data into the list
                dataList.AddRange(buffer);

                // reset the buffer
                buffer = new byte[1000];
            }

            SHA256 shaM = new SHA256Managed();
            hash = Convert.ToBase64String( shaM.ComputeHash( dataList.ToArray() ) );
        }
    }
    catch (Exception ex)
    {
        // TODO: Add some logging in here
    }

    return hash;
}

","Aren't you trying to reinvent the wheel?
There's the System.Security.Cryptography.Xml.SignedXml class designed for such purposes.
","4101","<c#><hash><sha256>","1","1","2","2015-09-25 01:39:42","7467922","2","","","","","2011-09-16 13:08:57",""
"7445150","How to create SHA-256 hash value for an XML message body","I'm trying to create an XML file that is human readable but can be verified as being unmodified.
The approach I am taking is as follows:

Generate the xml message body (canonicalization applied (C14N))
Generate the hash value for the message body (SHA-256)
Encrypt the hash value (AES-256)
Generate a message header using the encrypted hash

I'm hitting problems at every stage of this task but the current issue is generating the hash value from the XML body.
I get an exception ""ReadContentAsBase64 method is not supported on this XmlReader. Use CanReadBinaryContent property to find out if a reader implements it."" but I don't know how else to implement the reading of the XElement.
An example of the xml is below
<?xml version=""1.0"" encoding=""UTF-8""?>
<Application>
    <MessageHeader>
        <MessageID>00000001</MessageID>
        <MessageCheck>
            dHPHxMJGgDCHtFttgPROo24yi+R1RGx6Ahno2r0nV7zrcgR2+BX4f+RmNCVCsT5g
        </MessageCheck>
    </MessageHeader>
    <MessageBody>
        <Receipt>
            <Status>OK</Status>
            <FormReference>E00000000001</FormReference>
        </Receipt>
    </MessageBody>
</Application>

And here is the code I've been trying to get working to no avail:
/// <summary>
/// Convert the message body into a Hash value
/// </summary>
/// <param name=""MessageBody"">XElement holding all the message body XML nodes</param>
/// <returns>a base 64 string representing the hash code</returns>
private string GenerateMessageBodyHash(XElement MessageBody)
{
    string hash = string.Empty;
    try
    {
        // Convert the XElement into a stream of data
        using (XmlReader xr = MessageBody.CreateReader())
        {
            // Now that we have a reader, lets read the data into a byte array
            List<byte> dataList = new List<byte>();

            byte[] buffer = new byte[1000];
            int fileIndex = 0;
            int bytesRead = 0;

            while ((bytesRead = xr.ReadContentAsBase64(buffer, fileIndex, buffer.Length)) != 0 )
            {
                // Update the position into the file
                fileIndex += bytesRead;

                //add the data into the list
                dataList.AddRange(buffer);

                // reset the buffer
                buffer = new byte[1000];
            }

            SHA256 shaM = new SHA256Managed();
            hash = Convert.ToBase64String( shaM.ComputeHash( dataList.ToArray() ) );
        }
    }
    catch (Exception ex)
    {
        // TODO: Add some logging in here
    }

    return hash;
}

","This is how I implemented the solution.
/// <summary>
/// Convert the message body into a Hash value
/// </summary>
/// <param name=""MessageBody"">XElement holding all the message body XML nodes</param>
/// <returns>a base 64 string representing the hash code</returns>
private string GenerateMessageBodyHash(XElement MessageBody)
{
    string hash = string.Empty;
    try
    {
        using( MemoryStream ms = new MemoryStream() )
        {
            XmlWriterSettings xws = new XmlWriterSettings();
            xws.OmitXmlDeclaration = true;
            xws.Indent = false;

            using( XmlWriter xw = XmlWriter.Create( ms, xws ))
            {
                // Assign the xml to be written to the writer and then memory stream
                MessageBody.WriteTo(xw);

                SHA256 shaM = new SHA256Managed();
                hash = Convert.ToBase64String(shaM.ComputeHash( ms ));
            }
        }
    }
    catch (Exception ex)
    {
        Log.WriteLine(Category.Warning, ""Exception detected generating the XML hash"", ex);
    }

    return hash;
}

","4101","<c#><hash><sha256>","1","2","2","2015-09-25 01:39:42","7467922","2","","","","","2011-09-16 13:08:57",""
"34586588","How to get SHA256 certificate thumbprint?","How to get the SHA256 thumbprint of the certificate ?. SHA 256 certificates have two thumbprint, I am able to retrieve the the primary thumbprint but not SHA256.
","If you want to get certificate's SHA256 thumbprint, you have to do some manual work. Built-in Thumbprint property is SHA1 only.
Yo have to use a SHA256 class and compute hash over certificate's content:
using System;
using System.Linq;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;

namespace MyNamespace {
    class MyClass {
        public static String GetSha2Thumbprint(X509Certificate2 cert) {
            Byte[] hashBytes;
            using (var hasher = new SHA256Managed()) {
                hashBytes = hasher.ComputeHash(cert.RawData);
            }
            return hashBytes.Aggregate(String.Empty, (str, hashByte) => str + hashByte.ToString(""x2""));
        }
    }
}

and you convert this code to an extension method if necessary.
","4072","<c#><x509certificate><sha256>","8","2","2","2016-01-08 07:26:37","34647126","4","2","477420","","2016-01-04 08:05:22","2016-01-04 07:37:23",""
"34586588","How to get SHA256 certificate thumbprint?","How to get the SHA256 thumbprint of the certificate ?. SHA 256 certificates have two thumbprint, I am able to retrieve the the primary thumbprint but not SHA256.
","public static String GetSha2Thumbprint(X509Certificate2 cert)
        {
            Byte[] hashBytes;
            using (var hasher = new SHA256Managed())
            {
                hashBytes = hasher.ComputeHash(cert.RawData);
            }
            string result = BitConverter.ToString(hashBytes)
                // this will remove all the dashes in between each two haracters
            .Replace(""-"", string.Empty).ToLower();         
            return result;
        }
After getting the Hashbytes , you have to do the bit convertion.

This posts also helped me . Hashing text with SHA-256 at Windows Forms
","4072","<c#><x509certificate><sha256>","8","0","2","2016-01-08 07:26:37","34647126","4","2","477420","","2016-01-04 08:05:22","2016-01-04 07:37:23",""
"13705850","is sjcl.encrypt using AES or SHA256","I'm using the SJCL library  to encrypt/decrypt messages. The question I have is that I don't know which is used AES or SHA256
Here is my code:
var h = sjcl.codec.hex, count = 2048 ;
salt = h.fromBits(sjcl.random.randomWords('10','0'));
var key = h.fromBits( sjcl.misc.pbkdf2(somePassword, h.toBits(salt), count) ) ;

Next I can encrypt/decrypt like
var encMessage = sjcl.encrypt(key, message) ;
sjcl.decrypt(key, encMessage) ;

AES or SHA256 or something else ?
","SHA256 and AES are 2 different types of algorithms.   
SHA256 is a cryptography hash function: http://en.wikipedia.org/wiki/SHA-2 
AES is a encryption algorithm: http://en.wikipedia.org/wiki/Advanced_Encryption_Standard 
So in your case when using encryption you are in fact using AES.
","4049","<javascript><encryption><aes><sha256><sjcl>","1","6","3","2012-12-04 16:17:11","13707185","0","1","474189","","2012-12-04 16:03:26","2012-12-04 15:04:31",""
"13705850","is sjcl.encrypt using AES or SHA256","I'm using the SJCL library  to encrypt/decrypt messages. The question I have is that I don't know which is used AES or SHA256
Here is my code:
var h = sjcl.codec.hex, count = 2048 ;
salt = h.fromBits(sjcl.random.randomWords('10','0'));
var key = h.fromBits( sjcl.misc.pbkdf2(somePassword, h.toBits(salt), count) ) ;

Next I can encrypt/decrypt like
var encMessage = sjcl.encrypt(key, message) ;
sjcl.decrypt(key, encMessage) ;

AES or SHA256 or something else ?
","Based on a cursory inspection of the source, I'd suggest it is using AES in CCM mode.
The SJCL homepage explains the cryptographic techniques used, although admittedly the per-function documentation does not explain it at all.
","4049","<javascript><encryption><aes><sha256><sjcl>","1","1","3","2012-12-04 16:17:11","13707185","0","1","474189","","2012-12-04 16:03:26","2012-12-04 15:04:31",""
"13705850","is sjcl.encrypt using AES or SHA256","I'm using the SJCL library  to encrypt/decrypt messages. The question I have is that I don't know which is used AES or SHA256
Here is my code:
var h = sjcl.codec.hex, count = 2048 ;
salt = h.fromBits(sjcl.random.randomWords('10','0'));
var key = h.fromBits( sjcl.misc.pbkdf2(somePassword, h.toBits(salt), count) ) ;

Next I can encrypt/decrypt like
var encMessage = sjcl.encrypt(key, message) ;
sjcl.decrypt(key, encMessage) ;

AES or SHA256 or something else ?
","pbkdf2 for key generation is using HMAC with SHA256. But the default encryption key size with sjcl for AES-CCM is only 128 bits. If you want AES-CCM-256, I think you need to do the following, you also don't have to call pbkdf2 directly.
var encMessage =sjcl.encrypt(somePassword,message,{count:2048,salt:salt,ks:256});

","4049","<javascript><encryption><aes><sha256><sjcl>","1","5","3","2012-12-04 16:17:11","13707185","0","1","474189","","2012-12-04 16:03:26","2012-12-04 15:04:31",""
"30672337","Code signing with both sha1 and sha256 simultaneously?","Due to Windows changing their security policies, we are planning to begin code-signing driver files with the SHA-256 algorithm instead of SHA-1. However, we still want to be able to support older OS's that still require SHA-1 signing.
Using Microsoft's signtool.exe we are able to code sign files successfully with both SHA-1 and SHA-256 digest algorithms using the /fd flag. However, if possible, we would like to sign the file with both algorithms simultaneously. Is this even possible? We would like to avoid having multiple sets of drivers that are signed with different algorithms and determining which set to install based on OS -- which would be our alternative approach.
If anyone has had experience with accomplishing this please explain what approach you took. If this isn't possible, an explanation of why it's impossible would be appreciated.
","You can append the second certifcate to the EXE/DLL/SYS by calling signtool sign /as [signing cert parameters] [name of file]
","4005","<code-signing><sha1><sha256><signtool><driver-signing>","8","6","1","2018-06-18 17:04:20","","6","3","3063884","","2018-06-18 17:04:20","2015-06-05 17:20:34",""
"35223147","How to setup signtool with SHA256 on Windows 7?","I have been using SHA1 signing for many years, but from 2016, Windows is forcing developers to use SHA256.
Windows Enforcement of Authenticode Code Signing and Timestamping
By using Windows 7 SDK signtool the functions to sign SHA-256 is ""unknown commands"", so this signtool is obsolete as a signtool and shouldn't be used any more.
To sign with SHA256 I downloaded the Windows 8.1 SDK to get signtool.exe which got the new functions(/fd and a few others). The BAT file and signtool works on Windows 8 and 10, so I know it works, but crashes on Windows 7 when it tries to timestamp the file.
Signing fails
I use a bat file to sign files, which looks like this(I edited the BAT file so it doesn't show variables, full paths, company name and passwords):
Path\signtool.exe sign /f ""Path\Certificate.p12"" /fd sha256 /p *password* /du ""URL"" /tr ""timestampServer?td=sha256"" /td sha256 /d ""Product name"" ""Filename""

I guess, I don't have the proper SDK to support some of the functions, but I can't find any info on the internet on how to setup this on a Windows 7. I tried to install MS Visual C++ 2015 Redistributable (x64) on my machine without solving the problem.
","Seems I'm no good at reading. I'm answering my own question as others could find it hard to find, just like I did.
Windows doesn't support the signtool.exe on Windows 7 any more, so that is why old/obsolete functions like SHA-1 signing is still working, but SHA-256 time stamping is a problem. I found this on MSDN:

Quote from MSDN: Note  You can only use SignTool to sign your Windows
  Store app packages on Windows 8 and later or Windows Server 2012 and
  later. You can't use SignTool to sign app packages on down level
  operating systems such as Windows 7 or Windows Server 2008 R2.

If you want to read the whole thing then look here:
How to sign an app package using SignTool
","3978","<windows><sha256><signtool><authenticode>","4","4","1","2016-02-17 14:17:37","35320007","1","","5503726","","2016-02-17 14:17:37","2016-02-05 11:33:40",""
"8921270","Delphi 2010 DCPCrypt2 Sha256 Hash doesn't equal PHP Hash","I'm writing a Delphi 2010 application that will connect to the PHP Web application to get specific data. Web page on the server accepts 3 GET parameters:

cityid   // Value needed for web application to return specific data
salt     // Current time stamp: Year Month Date Hour Minute Second Millisecond
token    // SHA-256 hash with security key for protection

The problem is with token. It's generated in Delphi using these functions:
function DigestToStr(Digest: array of byte): string;
var
  i: Integer;
begin
  Result := '';
  for i := 0 to Length(Digest) do
    Result := Result + LowerCase(IntToHex(Digest[i], 2));
end;

function GetStringHash(Source: string): string;
var
  Hash: TDCP_sha256;
  Digest: array[0..31] of Byte;
begin
  Hash := TDCP_sha256.Create(nil);
  Hash.Init;
  Hash.UpdateStr(Source);
  Hash.Final(Digest);
  Hash.Free;
  Result := DigestToStr(Digest);
end;

procedure TMain.Button3Click(Sendere: TObject);
var
  TheToken,Sha256:string;
begin
  salt:=FormatDateTime('yyyymmddhhnnsszzz',Now);
  TheToken:=salt+'THE_SECRET_KEY'+MCity;
  Sha256:=GetStringHash(TheToken);
end;

Delphi gives this string for a token: ec4338bb3e7819a1148ffc01713f6d164f4f5940c5758d896b0a3d53f30f8c24f0
PHP's hash function gives totally different string:
<?php
  hash('sha256','20120119115458592THE_SECRET_KEY1');
?>

8b4cff3b937bbcfae8fa7a67ce407b6185451a52e994ea2ef92a760676717490
I tried to look for similar questions on the Web, but found only symmetric encryption/description problems discussed, I don't need symmetric encryption for the token

UPDATE
I've figured out!!! The problem was in the wrong variable type!
I used string, and when I replaced it with AnsiString it worked out!
function GetStringHash(Source: AnsiString): string;
var
  ...

Besides that I replaced
  for i := 0 to Length(Digest) do

with
  for i := 0 to Length(Digest)-1 do

in DigestToStr function
Sorry for causing disturbance, but I hope this will help somebody!
","","3940","<php><delphi><hash><delphi-2010><sha256>","3","","0","2012-07-07 12:50:23","","3","1","24462","","2012-07-07 12:50:23","2012-01-19 05:04:16","2012-01-19 09:53:27"
"10067729","Fast SHA-2 Authentication with Apache, is it even possible?","Okay, I spent the last couple of days researching this, and I can't believe Apache's natively supported hashing functions are that outdated.
I discovered a couple of ways to do this, which are mod_perl and mod_authnz_external, both of which are too slow, because apache runs that whenever any object inside a protected directory is called. That means that a user may have to be authenticated hundreds of times in a single session.
Has anyone ever managed to get Apache to use something that's more secure than MD5 and SHA-1 without moving authentication away from Apache? Salted SHA-2 would be a real bonus.
Thanks!
","If you're on a GNU/Linux system with a version of glibc2 released in the last 5 or so years, you can modify htpasswd's crypt() implementation to prepend ""$6$"" to the salt, and then it'd be as simple as:
 # htpasswd -d -c .htpasswd someusername

When the salt starts with ""$6$"", glibc2 will use salted SHA-512, with the up to 16 characters after that being the salt, in the range [a-zA-Z0-9./].
See man 3 crypt.
I'm not aware of any patch to support this, but it should be a simple one.
EDIT: I'd also like to mention that one round of even salted SHA-512 is breakable if your attacker is determined enough. I'd recommend, and am using in most things I've been able to edit, 128000 rounds of PBKDF2 with HMAC-SHA512, but this would be a very extensive edit, unless you want to link htpasswd against openssl, which has a PKCS5_PBKDF2_HMAC() function.
EDIT 2: Also, using openssl to do strong hashing isn't hard, if you're interested:
abraxas ~ # cat pbkdf2.c 

#include <string.h>
#include <stdio.h>
#include <openssl/evp.h>
#include <openssl/sha.h>

#define PBKDF2_SALT_PREFIX          ""$pbkdf2sha512$""
#define PBKDF2_SALT_PREFIX_LENGTH   strlen(PBKDF2_SALT_PREFIX)
#define PBKDF2_PRF_ALGORITHM        EVP_sha512()
#define PBKDF2_DIGEST_LENGTH        SHA512_DIGEST_LENGTH
#define PBKDF2_SALT_LENGTH          32
#define PBKDF2_RESULT_LENGTH        PBKDF2_SALT_PREFIX_LENGTH + (2 * PBKDF2_DIGEST_LENGTH) + PBKDF2_SALT_LENGTH + 2
#define PBKDF2_ROUNDS               128000

void hash_password(const char* pass, const unsigned char* salt, char* result)
{
    unsigned int i;
    static unsigned char digest[PBKDF2_DIGEST_LENGTH];
    memcpy(result, PBKDF2_SALT_PREFIX, PBKDF2_SALT_PREFIX_LENGTH);
    memcpy(result + PBKDF2_SALT_PREFIX_LENGTH, salt, PBKDF2_SALT_LENGTH);
    result[PBKDF2_SALT_PREFIX_LENGTH + PBKDF2_SALT_LENGTH] = '$';
    PKCS5_PBKDF2_HMAC(pass, strlen(pass), salt, PBKDF2_SALT_LENGTH, PBKDF2_ROUNDS, PBKDF2_PRF_ALGORITHM, PBKDF2_DIGEST_LENGTH, digest);
    for (i = 0; i < sizeof(digest); i++)
        sprintf(result + PBKDF2_SALT_PREFIX_LENGTH + PBKDF2_SALT_LENGTH + 1 + (i * 2), ""%02x"", 255 & digest[i]);
}

int main(void)
{
    char result[PBKDF2_RESULT_LENGTH];
    char pass[] = ""password"";
    unsigned char salt[] = ""178556d2988b6f833f239cd69bc07ed3"";
    printf(""Computing PBKDF2(HMAC-SHA512, '%s', '%s', %d, %d) ...\n"", pass, salt, PBKDF2_ROUNDS, PBKDF2_DIGEST_LENGTH);
    memset(result, 0, PBKDF2_RESULT_LENGTH);
    hash_password(pass, salt, result);
    printf(""Result: %s\n"", result);
    return 0;
}

abraxas ~ # gcc -Wall -Wextra -O3 -lssl pbkdf2.c -o pbkdf2
abraxas ~ # time ./pbkdf2 

Computing PBKDF2(HMAC-SHA512, 'password', '178556d2988b6f833f239cd69bc07ed3', 128000, 64) ...
Result: $pbkdf2sha512$178556d2988b6f833f239cd69bc07ed3$3acb79896ce3e623c3fac32f91d4421fe360fcdacfb96ee3460902beac26807d28aca4ed01394de2ea37b363ab86ba448286eaf21e1d5b316149c0b9886741a7

real    0m0.320s
user    0m0.319s
sys 0m0.001s

abraxas ~ # 

","3904","<apache><sha256><sha2><mod-auth>","0","3","1","2013-04-04 15:20:24","","0","1","","","","2012-04-09 00:32:27",""
"17544537","Django pbkdf2_sha256 JS implementation","I have a database from django and I want to work with it from Node.js. I have a task: authenticate users. Known from database: algorithm pbkdf2_sha256, salt, 10000 iterations and base64-encoded hash. What steps I must to do in JS to encode some password to given base64-hash?
UPD: found the solution in here: python (django) hashlib vs Nodejs crypto  but Django-generated hash and JS-generated hash not match...
Django generate next: 
pbkdf2_sha256$10000$NmzpPCQiTe2R$U8ipSsOy3Xz7FwWDHdH/dTei8Xh4Q7NGtdzrCacSfvo=

JS:
pbkdf2_sha256$10000$NmzpPCQiTe2R$w4jCgWjDilrDmcOBd8K+I8OdwpkKwoVQZMKWH3FvYcKoAMKcwqlewobDocOEGMKZfQ==

Password: Simple123
","I faced a similar task where I have to authenticate users against Django passwords in Java. After trying unsuccessfully to achieve this goal using the default pbkdf2_sha256 hasher in Django, I ended up changing the method used to hash the Django password to be able to easily replicate the same algorithm in Java.
As described in Django documentation you can modify the order in which PASSWORD_HASHERS are defined in settings.py, I put this hasher in first position:
'django.contrib.auth.hashers.SHA1PasswordHasher'
In this way the password hash stored in the Django database is something like this:
sha1$upSZarr0w7CZ$304b22b1a9e7e5387e79f50e691043d3faf83c48
If you already have some passwords in the database they will be automatically converted by Django at first user login.
You can easily tokenize the hash using $ as separator; the first token is always sha1 (the algorithm used), the second token is the salt and the last token is the actual hash.
To match a password you can verify that
304b22b1a9e7e5387e79f50e691043d3faf83c48
is the SHA1 sum of the salt concatenated with the expected password:
SHA1(upSZarr0w7CZ + password) = 304b22b1a9e7e5387e79f50e691043d3faf83c48
In our case the security implications of using a weaker algorithm for password hashing was acceptable.
","3885","<javascript><django-authentication><sha256><pbkdf2>","9","0","3","2016-11-07 19:58:32","23560778","1","1","-1","","2017-05-23 12:33:44","2013-07-09 09:21:10",""
"17544537","Django pbkdf2_sha256 JS implementation","I have a database from django and I want to work with it from Node.js. I have a task: authenticate users. Known from database: algorithm pbkdf2_sha256, salt, 10000 iterations and base64-encoded hash. What steps I must to do in JS to encode some password to given base64-hash?
UPD: found the solution in here: python (django) hashlib vs Nodejs crypto  but Django-generated hash and JS-generated hash not match...
Django generate next: 
pbkdf2_sha256$10000$NmzpPCQiTe2R$U8ipSsOy3Xz7FwWDHdH/dTei8Xh4Q7NGtdzrCacSfvo=

JS:
pbkdf2_sha256$10000$NmzpPCQiTe2R$w4jCgWjDilrDmcOBd8K+I8OdwpkKwoVQZMKWH3FvYcKoAMKcwqlewobDocOEGMKZfQ==

Password: Simple123
","By using pbkdf2-sha256 (from your own link) I'm able to generate a hash that is identical to the one you have from Django.
var pbkdf2 = require('pbkdf2-sha256');
var validatePassword = function (key, string) {
    var parts = string.split('$');
    var iterations = parts[1];
    var salt = parts[2];
    return pbkdf2(key, new Buffer(salt), iterations, 32).toString('base64') === parts[3];
};
var djangoPass = 'pbkdf2_sha256$10000$NmzpPCQiTe2R$U8ipSsOy3Xz7FwWDHdH/dTei8Xh4Q7NGtdzrCacSfvo=';
console.log(validatePassword('Simple123', djangoPass)); // Logs: true

The above code should be sufficient to validate passwords stored in Django using Node.
","3885","<javascript><django-authentication><sha256><pbkdf2>","9","8","3","2016-11-07 19:58:32","23560778","1","1","-1","","2017-05-23 12:33:44","2013-07-09 09:21:10",""
"17544537","Django pbkdf2_sha256 JS implementation","I have a database from django and I want to work with it from Node.js. I have a task: authenticate users. Known from database: algorithm pbkdf2_sha256, salt, 10000 iterations and base64-encoded hash. What steps I must to do in JS to encode some password to given base64-hash?
UPD: found the solution in here: python (django) hashlib vs Nodejs crypto  but Django-generated hash and JS-generated hash not match...
Django generate next: 
pbkdf2_sha256$10000$NmzpPCQiTe2R$U8ipSsOy3Xz7FwWDHdH/dTei8Xh4Q7NGtdzrCacSfvo=

JS:
pbkdf2_sha256$10000$NmzpPCQiTe2R$w4jCgWjDilrDmcOBd8K+I8OdwpkKwoVQZMKWH3FvYcKoAMKcwqlewobDocOEGMKZfQ==

Password: Simple123
","I recently created a project to make this easier. My project is available for node and is called node-django-hashers. The code is below:
https://github.com/kalvish21/hashers
A sample usage:
var hashers = require('node-django-hashers');

var h = new hashers.PBKDF2PasswordHasher();
var hash1 = h.encode(""password"", h.salt());
console.log(h.verify(""password"", hash1)); // returns true
console.log(h.verify(""wrong_password"", hash1)); // returns false

This is compatible with django password hashing.
","3885","<javascript><django-authentication><sha256><pbkdf2>","9","2","3","2016-11-07 19:58:32","23560778","1","1","-1","","2017-05-23 12:33:44","2013-07-09 09:21:10",""
"10721831","ECDSA with SHA256 in Bouncy castle throws No Such Algorithm Exception","I am trying to generate a signature using ECDSA with SHA256 in Bouncy Castle as follows,

I add the provider in the begining
I have built the ECPrivatekey
Signature s_oSignature = Signature.getInstance(""SHA256withECDSA"",     
BouncyCastleProvider.PROVIDER_NAME);


but step 3 throws ""java.security.NoSuchAlgorithmException: no such algorithm: SHA256withECDSA for provider BC"".
But same ""SHA256withECDSA"" thing when replaced with ""SHA1withECDSA"" prceeds without any exception.
How is it possible? I am using ""bcprov-jdk14-121.jar"".
Can any one please help me as I have been struggling for a long time?
","I've never encountered this problem but here are a few things you can try. 

make sure you have the Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files installed and configured (download here at the bottom of the page)
try using the latest release of BouncyCastle and installing it as a provider in the runtime and not on-the-fly within the program

This problem is extremely odd as SHA256withECDSA is clearly listed in the specifications so it only leaves the option to try all possible options no matter how unlikely they are to help.
","3870","<java><bouncycastle><sha256><elliptic-curve>","3","2","1","2017-03-02 18:58:40","","1","2","1288","","2012-05-23 14:33:07","2012-05-23 14:16:31",""
"1293905","SHA256CryptoServiceProvider and related possible to use on WinXP?","Is it possible to use SHA256CryptoServiceProvider and related SHA2 providers on Windows XP? I know the providers use the cryptography services that are included in Vista and above is it possible to install these services in XP from Microsoft?
EDIT: I should've provided more information the documentation on the MSDN is wrong in regards to this being supported in Windows XP. See http://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=355031 where this is acknowledged and accepted by Microsoft as by design. However there is no work around listed anywhere (that I saw) so I wasn't sure if it's possible to install the services this requires to work properly or if it's like tilting at windwills trying to install IIS 6 or 7 on WinXP.
","From MSDN:
SHA256CryptoServiceProvider Class 
Platforms:
Windows Vista, Windows XP SP2, Windows Server 2003
","3727","<c#><security><encryption><sha256>","7","0","3","2010-08-02 14:04:39","3341727","0","1","37055","","2009-08-18 14:02:08","2009-08-18 13:37:00",""
"1293905","SHA256CryptoServiceProvider and related possible to use on WinXP?","Is it possible to use SHA256CryptoServiceProvider and related SHA2 providers on Windows XP? I know the providers use the cryptography services that are included in Vista and above is it possible to install these services in XP from Microsoft?
EDIT: I should've provided more information the documentation on the MSDN is wrong in regards to this being supported in Windows XP. See http://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=355031 where this is acknowledged and accepted by Microsoft as by design. However there is no work around listed anywhere (that I saw) so I wasn't sure if it's possible to install the services this requires to work properly or if it's like tilting at windwills trying to install IIS 6 or 7 on WinXP.
","I've had success with the following snippet, although I'm not really satisfied with it and nearly posted an SO question concerning the various seemingly haphazard ways to instantiate SHA512 at the time. This is tested on Windows XP, 7, and possibly Vista (can't remember).
using System.Security.Cryptography;

        SHA512 hash;
        try
        {
            hash = new SHA512Cng( );
        }
        catch ( PlatformNotSupportedException )
        {
            hash = SHA512.Create( );
        }

I think this should work the same with SHA256.
Also, comparing the output of both versions with a unix sha2 utility suggested that they both correctly implement SHA512.
","3727","<c#><security><encryption><sha256>","7","2","3","2010-08-02 14:04:39","3341727","0","1","37055","","2009-08-18 14:02:08","2009-08-18 13:37:00",""
"1293905","SHA256CryptoServiceProvider and related possible to use on WinXP?","Is it possible to use SHA256CryptoServiceProvider and related SHA2 providers on Windows XP? I know the providers use the cryptography services that are included in Vista and above is it possible to install these services in XP from Microsoft?
EDIT: I should've provided more information the documentation on the MSDN is wrong in regards to this being supported in Windows XP. See http://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=355031 where this is acknowledged and accepted by Microsoft as by design. However there is no work around listed anywhere (that I saw) so I wasn't sure if it's possible to install the services this requires to work properly or if it's like tilting at windwills trying to install IIS 6 or 7 on WinXP.
","It seems that MSDN documentation is right in the sense that it should be supported in XP SP3 by design, and if it is not, it's only because of a bug in .NET 3.5.
Both AesCryptoServiceProvider and SHA256CryptoServiceProvider use the same cryptograhics service named ""Microsoft Enhanced RSA and AES Cryptographic Provider"". Under XP, the name of the service is slightly different: ""Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype)"". The constructor of AesCryptoServiceProvider performs a simple check:
string providerName = ""Microsoft Enhanced RSA and AES Cryptographic Provider"";
if(Environment.OSVersion.Version.Major == 5 && Environment.OSVersion.Version.Minor == 1)
{
    providerName = ""Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype)"";
}

The constructors of SHAxxxCryptoServiceProvider classes do not check the (Prototype) name, and this is why they fail in XP. If they did, they would succeed.
There is a simple workaround on a given PC. Go to registry key HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography\Defaults\Provider, find its subkey named ""Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype)"", export it to .reg, edit this .reg and delete "" (Prototype)"" from its name. When you import it back, the original key will be duplicated to the new key without (Prototype), with the same contents. From now on, SHA256CryptoServiceProvider will work on this XPSP3 machine.
","3727","<c#><security><encryption><sha256>","7","13","3","2010-08-02 14:04:39","3341727","0","1","37055","","2009-08-18 14:02:08","2009-08-18 13:37:00",""
"29436657","JMeter SHA256 in request header","I am load testing an API using Jmeter. The Header of the request has an authentication request which needs me to Base64 the url+Nonce+Unix timestamp and SHA256 the resultant value with a secret key.
The above needs to be passed in header along with Nonce and timestamp.
For the above scenario should I create a custom function or use any preprocessor ?
","Your best bet is to use a BSF Pre-Processor in JavaScript mode to do everything the client normally would.  You'll have to take the client JS and modify it to work without FORM data.
You can build the entire header in JS exactly like a client would.  BSF Pre-Processor allows you to access jmeter run-time variables, so you would create a new one to store the SHA256 hash value, and use that in a HTTP Header Manager of the sample that needs the authorization.
-Addled
","3717","<jmeter><sha256>","0","0","4","2017-06-19 23:33:03","","1","","2588800","","2015-04-03 17:35:55","2015-04-03 17:10:36",""
"29436657","JMeter SHA256 in request header","I am load testing an API using Jmeter. The Header of the request has an authentication request which needs me to Base64 the url+Nonce+Unix timestamp and SHA256 the resultant value with a secret key.
The above needs to be passed in header along with Nonce and timestamp.
For the above scenario should I create a custom function or use any preprocessor ?
","You can do it via Beanshell PreProcessor as follows:

Add a HTTP Header Manager as a child of your HTTP Request sampler
Add aforementioned Beanshell PreProcessor the same way
Put the following code into the PreProcessor's ""Script"" area:
import org.apache.commons.httpclient.auth.DigestScheme; // necessary imports
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
import org.apache.jmeter.protocol.http.control.Header;

String url = sampler.getUrl().toString(); // get URL
String nonce = DigestScheme.createCnonce(); // get nonce
long timestamp = System.currentTimeMillis() / 1000L;

String combined = url + nonce + timestamp; // put everything together

byte[] base64 = Base64.encodeBase64(combined.getBytes()); // encode as Base64

String headerValue = DigestUtils.sha256Hex(base64); // encode SHA256 

sampler.getHeaderManager().add(new Header(""headerName"", headerValue)); // add generated header to request


sampler here is a shorthand reference to parent HTTP Request Sampler class which I believe is HTTPSamplerProxy so its methods are used to get URL and add generated header value. 
methods to generate MD5 hash and SHA256 hex are from Apache Commons libraries which are widely used under JMeter's hood. 


See How to use BeanShell: JMeter's favorite built-in component guide for more information on using Beanshell scripting in JMeter tests. 
","3717","<jmeter><sha256>","0","1","4","2017-06-19 23:33:03","","1","","2588800","","2015-04-03 17:35:55","2015-04-03 17:10:36",""
"29436657","JMeter SHA256 in request header","I am load testing an API using Jmeter. The Header of the request has an authentication request which needs me to Base64 the url+Nonce+Unix timestamp and SHA256 the resultant value with a secret key.
The above needs to be passed in header along with Nonce and timestamp.
For the above scenario should I create a custom function or use any preprocessor ?
","Downloaded eclipse. 
Wrote a custom jmeter package. 
Exported it as a .jar from eclipse to jmeter lib/ext folder.
Called the package function in beanshell sampler
Thanks for your answers
","3717","<jmeter><sha256>","0","0","4","2017-06-19 23:33:03","","1","","2588800","","2015-04-03 17:35:55","2015-04-03 17:10:36",""
"29436657","JMeter SHA256 in request header","I am load testing an API using Jmeter. The Header of the request has an authentication request which needs me to Base64 the url+Nonce+Unix timestamp and SHA256 the resultant value with a secret key.
The above needs to be passed in header along with Nonce and timestamp.
For the above scenario should I create a custom function or use any preprocessor ?
","@dmitrit's answer is helpful but I needed to do some tweaks to the code to get it to work. Here is what I did:
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;

String apiKey = vars.get(""ApiKey"");
String apiSecret = vars.get(""ApiSecret"");
long timestamp = System.currentTimeMillis() / 1000L;

String combined = apiKey + apiSecret + timestamp;

String generatedSignature = DigestUtils.sha256Hex(combined);

vars.put(""GeneratedSignature"", generatedSignature);

Note the main differences are:

Most important: DigestUtils.sha256Hex takes a String instead of a byte array. Converting first to bytes screwed up the hash, I think due to padding.
I added the resulting value to vars so it can be used later in Jmeter in the usual way (${GeneratedSignature}).
ApiKey and ApiSecret are defined elsewhere in a Jmeter User Defined Variables element.

With this I was able to make the following work with Mashery in accordance with their authentication instructions posted here.
","3717","<jmeter><sha256>","0","0","4","2017-06-19 23:33:03","","1","","2588800","","2015-04-03 17:35:55","2015-04-03 17:10:36",""
"21924562","Signature verification with OpenSSL","I'm attempting to use OpenSSL to verify a signature that was created using SHA256 with RSA (specifically the Java implementation in Signature.getInstance(""SHA256withRSA"")). I also have strings representing the hexadecimal forms of the public key exponent and modulus. (For example, the exponent is ""010001"", corresponding to 65537.) Here's the code.
int verify(string &plaintext, string &exp, string &mod, string &sig) {
  RSA *pub_key = RSA_new();
  if (!BN_hex2bn(&pub_key->n, mod.c_str()))
    exit(1);
  if (!BN_hex2bn(&pub_key->e, exp.c_str()))
    exit(1);
  int verified = RSA_verify(
      NID_sha256,
      reinterpret_cast<const unsigned char *>(plaintext.data()),
      plaintext.size(),
      reinterpret_cast<const unsigned char *>(sig.data()),
      sig.size(),
      pub_key);
  RSA_free(pub_key);
  return verified;
}

I also tried SHA256-hashing the plaintext first and passing that to RSA_verify (along with SHA256_DIGEST_LENGTH), but that didn't work either.
unsigned char hash[SHA256_DIGEST_LENGTH];
SHA256_CTX sha256;
SHA256_Init(&sha256);
SHA256_Update(&sha256, plaintext.data(), plaintext.size());
SHA256_Final(hash, &sha256);
// use hash instead of plaintext in call to verify

Unfortunately, both implementations return 0. Am I doing anything wrong here, or does it seem likely that one of my inputs is wrong?
","Okay, I figured it out. It turns out my input was bad. The signature wasn't encoded the way I thought it was.
Once I got the right signature, I had to use hash and SHA256_DIGEST_LENGTH as the message inputs.
","3667","<c++><openssl><rsa><digital-signature><sha256>","1","1","1","2017-04-12 08:49:47","21925200","0","","","","","2014-02-21 03:11:47",""
"46780451","Creating SHA256 hash with swift4","I've done some looking around but i've only been able to find examples that use Objective-C to create SHA256 hashes. Is there a way to do this with only Swift4?
","You can use like this :
func ccSha256(data: Data) -> Data {
    var digest = Data(count: Int(CC_SHA256_DIGEST_LENGTH))

    _ = digest.withUnsafeMutableBytes { (digestBytes) in
        data.withUnsafeBytes { (stringBytes) in
            CC_SHA256(stringBytes, CC_LONG(data.count), digestBytes)
        }
    }
    return digest
}

You can call like this :
let str = ""givesomestringtoencode""
let data = ccSha256(data: str.data(using: .utf8)!)
print(""sha256 String: \(data.map { String(format: ""%02hhx"", $0) }.joined())"")

Add the below in bridging header file:
#import <CommonCrypto/CommonHMAC.h>

","3659","<sha256><xcode9><swift4>","3","6","1","2017-10-17 16:54:49","46782191","1","","","","","2017-10-16 23:34:04",""
"22358406","Can Azure Cloud service use a sha256 certificate","We need to update our Azure Cloud service with a brand new cert.
The one I have been given specifies sha256 as the signature hash algorithm.
We previously had one with sha1.
When I tried to update and package of the Azure deployment the error I get states that the thumprint is not valid.

Error 8   The XML specification is not valid: The 'thumbprint' attribute is invalid - The value '‎‎REDACTED' is invalid according to its datatype 'http://schemas.microsoft.com/ServiceHosting/2008/10/ServiceConfiguration:ThumbprintType' - The Pattern constraint failed.

In the ServiceConfiguration.Cloud.cscfg file, the XML looks like this:
<Certificates>
  <Certificate name=""cert"" thumbprint=""REDACTED"" thumbprintAlgorithm=""sha1"" />
</Certificates>

with the thumprint attribute squiggly lined as the error above.
I've tried thumbprintAlgorithm=256, but this didn't work, presumably not a valid value.
Does it need to be sha1? Can Azure support sha256?
EDIT:
I found the following in the service defintion schema, that indicates sha256 is allowed:
<xs:attribute name=""thumbprintAlgorithm"" type=""ThumbprintAlgorithmTypes"" use=""required"">
  <xs:annotation>
    <xs:documentation>
      The hash algorithm that generates a digest of data (or thumbprint)
      for digital signatures such as MD5, SHA1, SHA256. This is different than
      the algorithm used in creating the signature inside the certificate.
    </xs:documentation>
  </xs:annotation>
</xs:attribute>

however, the only type value allowed by the schema is sha1 as follows:
<xs:simpleType name=""ThumbprintAlgorithmTypes"">
<xs:restriction base=""xs:string"">
  <xs:enumeration value=""sha1"">
    <xs:annotation>
      <xs:documentation>
        Algorithm currently used in certmgr.msc to display thumbprint.
      </xs:documentation>
    </xs:annotation>
  </xs:enumeration>
</xs:restriction>


Any ideas? Googling sha256 and that  XML node is not getting me far.
","http://msdn.microsoft.com/library/azure/gg465718.aspx
According to the link above:

The only thumbprint algorithm currently supported is sha1. If you are
  not certain which thumbprint algorithm your certificate supports, you
  can use the certmgr.msc snap in with the Microsoft Management Console
  (MMC) to inspect the certificate.

I've also seen this error when copy->paste the thumbprint from certmgr.msc into the .cscfg files.  This is because non-printable chars are actually copied to the clipboard and pasted into the thumbprint attribute.  Removing these chars by putting your cursor just before the first visible character in the hash and backspacing, alleviates the issue.
See:
http://codingfields.com/c-and-windows-azure-lessons-adding-ssl-certs/
http://answers.flyppdevportal.com/categories/azure/azuredevelopment.aspx?ID=8542a464-0d61-4c29-8ac2-3019a39d48a3
","3623","<ssl-certificate><azure-web-roles><sha><sha256>","9","20","2","2015-06-09 15:13:33","23187447","2","1","300685","","2014-03-12 17:03:21","2014-03-12 16:49:41",""
"22358406","Can Azure Cloud service use a sha256 certificate","We need to update our Azure Cloud service with a brand new cert.
The one I have been given specifies sha256 as the signature hash algorithm.
We previously had one with sha1.
When I tried to update and package of the Azure deployment the error I get states that the thumprint is not valid.

Error 8   The XML specification is not valid: The 'thumbprint' attribute is invalid - The value '‎‎REDACTED' is invalid according to its datatype 'http://schemas.microsoft.com/ServiceHosting/2008/10/ServiceConfiguration:ThumbprintType' - The Pattern constraint failed.

In the ServiceConfiguration.Cloud.cscfg file, the XML looks like this:
<Certificates>
  <Certificate name=""cert"" thumbprint=""REDACTED"" thumbprintAlgorithm=""sha1"" />
</Certificates>

with the thumprint attribute squiggly lined as the error above.
I've tried thumbprintAlgorithm=256, but this didn't work, presumably not a valid value.
Does it need to be sha1? Can Azure support sha256?
EDIT:
I found the following in the service defintion schema, that indicates sha256 is allowed:
<xs:attribute name=""thumbprintAlgorithm"" type=""ThumbprintAlgorithmTypes"" use=""required"">
  <xs:annotation>
    <xs:documentation>
      The hash algorithm that generates a digest of data (or thumbprint)
      for digital signatures such as MD5, SHA1, SHA256. This is different than
      the algorithm used in creating the signature inside the certificate.
    </xs:documentation>
  </xs:annotation>
</xs:attribute>

however, the only type value allowed by the schema is sha1 as follows:
<xs:simpleType name=""ThumbprintAlgorithmTypes"">
<xs:restriction base=""xs:string"">
  <xs:enumeration value=""sha1"">
    <xs:annotation>
      <xs:documentation>
        Algorithm currently used in certmgr.msc to display thumbprint.
      </xs:documentation>
    </xs:annotation>
  </xs:enumeration>
</xs:restriction>


Any ideas? Googling sha256 and that  XML node is not getting me far.
","Yes, Azure does support certificates that use SHA256.
To clarify, the Azure is looking at the thumbprint algorithm not the  signature hash algorithm in the ServiceConfiguration.Cloud.cscfg.  The thumbprint is the value used to pull the certificate from the certificate store and is unrelated to the Signature Hash Algorithm.
In the ServiceConfiguration.Cloud.cscfg file, the XML looks like this:
<Certificates>
  <Certificate name=""cert"" thumbprint=""REDACTED"" thumbprintAlgorithm=""sha1"" />
</Certificates>

Notice the above XML in the config specifies the thumbprint algorithm, which is SHA1 even in the case of your certificate that uses SHA256 for Signature Hash Algorithm, if your thumbprint was hashed using SHA256, you would have other schema validation problems because the hash is a different length then SHA1.
Here is a good explanation of the topic as it relates to Azure: http://blogs.msdn.com/b/plankytronixx/archive/2015/04/23/confusion-with-azure-cloud-service-sha1-and-sha256-certificates.aspx
","3623","<ssl-certificate><azure-web-roles><sha><sha256>","9","8","2","2015-06-09 15:13:33","23187447","2","1","300685","","2014-03-12 17:03:21","2014-03-12 16:49:41",""
"42057466","RSA SHA256 signature generation and validation","I am generating a RSA signature in C# by using BouncyCastle and validating the signature in Go. 
But for some reason the signature from the C# program will not validate in Go.
The details:
The public/private keypair is an example generated from Online RSA Key Generator
The hash byte array is one that is generated by using SHA265 and hardcoded for simplicity.
I've tried different signature algorithms for BouncyCastle, played around with key pairs but nothing seems to work. 
I've also validated that the byte array of the signature matches between the two languages...
Can anyone tell me what I am missing here? Or at least how to investigate further?
My C# code to generate the signature
    static void Main(string[] args)
    {
        byte[] hashBytes = new byte[32] { 152, 154, 255, 19, 168, 20, 167, 43, 232, 133, 146, 13, 183, 80, 186, 85, 180, 249, 95, 142, 234, 71, 93, 188, 29, 147, 220, 164, 248, 83, 196, 80 };
        String privateKeyPemStr = @""-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCIw68jARnmvTh+xvMcv5iugtoHXt60NWEebfbghLTFuTlQvK0e
xY5hxnN/uD2UVc/S3QGnBQn0AfynhxlEZkedpYBb5RWoVChGZMHu7hbZukMjByjx
ec0LjtuEQhY4m18XaVNmAQWD/EiROMGTghMwykkQ+SBtx4Gl/O/BB6F4SQIDAQAB
AoGAJLarODFee6OGG/paXvhMC2TTFLFyBVxjAuEwKdtWD9IGQdc0fhM4gqTccofJ
+B0FGiz7+ZMPtfImme5ZaRQv2wx7KOPbOdAyYxC7nLFCHYqDWZJ8/cCoS+hPJFd5
9OeGLGz3QKfEEPtYEAw4+E/UjilYAtRNREkISkYoB9Va8PUCQQDDHMPRSCfXbfZV
ufmlRZj2bH8sjVaSBbJIw+y9HKJ3ORRnKGjtIZ/+z70EwMwtbbQKnl71SruO5HB9
AUTtRka/AkEAs3GWQhplPbuH/fAlaEPy5GQilUNRt76NMsgtIFWPMXnt82cxTUUR
RIKwX7M96WBppPZ2Dy7uLrX8O+3fr6BK9wJATZ0lsBy57JKLiTJ/wmTbIjuqozhe
FZw6fYOiqt+3KSIFobuLcbkMgjp1AG0JS5D2K7swHvdpgMASl0dn+dMY1QJBAIPw
9QbN2bs2dJvnQ9oSfDoq1rLhuOheF/xK68Nmpc8/VBMwwTOLoVK6tWzoopFC7ur4
vX4Uh9WYwkpecab1OakCQD0SCs4zIggA/2NkUx8J5H07/drbm9uH+98EQUvzjTdz
qSW2jJPCA4GYYmtnnDRduukjmkJlbaaTdEH5YLCilF0=
-----END RSA PRIVATE KEY-----"";

        StringReader strReader = new StringReader(privateKeyPemStr);
        PemReader pemReader = new PemReader(strReader);
        AsymmetricCipherKeyPair keyPair = (AsymmetricCipherKeyPair)pemReader.ReadObject();
        RsaKeyParameters privateKey = (RsaKeyParameters)keyPair.Private;


        ISigner sig = SignerUtilities.GetSigner(""SHA256withRSA"");
        sig.Init(true, privateKey);
        sig.BlockUpdate(hashBytes, 0, hashBytes.Length);
        byte[] signedBytes = sig.GenerateSignature();

        var signedStr = Convert.ToBase64String(signedBytes);

        Console.WriteLine(signedStr);
        Console.ReadLine();            
    }

This is my Go code to validate the signature. I copy the result of the C# code into the signature variable
func main() {
pubKeyStr := `-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCIw68jARnmvTh+xvMcv5iugtoH
Xt60NWEebfbghLTFuTlQvK0exY5hxnN/uD2UVc/S3QGnBQn0AfynhxlEZkedpYBb
5RWoVChGZMHu7hbZukMjByjxec0LjtuEQhY4m18XaVNmAQWD/EiROMGTghMwykkQ
+SBtx4Gl/O/BB6F4SQIDAQAB
-----END PUBLIC KEY-----`
pemBlockPub, _ := pem.Decode([]byte(pubKeyStr))
pub, _ := x509.ParsePKIXPublicKey(pemBlockPub.Bytes)
publicKey, _ := pub.(*rsa.PublicKey)

signatureStr := ""YJxDTSMnFb4uh/orsUjHTHEsW1dkxuStsGP0PmjmObJhog/7OQfWgBcBZ58w0qWoknLGMVBBgZTgJtKq1ZSSTsx9uXhNKEhNEI3a+7ZhmPiHp6JRLbftsEoGKe7FKU8vXkp6Bo90qMOoJz54YI2xue8EA9b5PTgjkGbDbKdimF8=""
signatureBytes, err := base64.StdEncoding.DecodeString(signatureStr)
hashBytes := [32]byte{152, 154, 255, 19, 168, 20, 167, 43, 232, 133, 146, 13, 183, 80, 186, 85, 180, 249, 95, 142, 234, 71, 93, 188, 29, 147, 220, 164, 248, 83, 196, 80}

err := rsa.VerifyPKCS1v15(publicKey, crypto.SHA256, hashBytes[:], signatureBytes)

if err != nil {
    fmt.Printf(""err: %v\n"", err)
} else {
    fmt.Printf(""ok"")
}

}
If I use the following code in C# to validate the signature, it is fine. 
        String publicKeyPemStr = @""-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCIw68jARnmvTh+xvMcv5iugtoH
Xt60NWEebfbghLTFuTlQvK0exY5hxnN/uD2UVc/S3QGnBQn0AfynhxlEZkedpYBb
5RWoVChGZMHu7hbZukMjByjxec0LjtuEQhY4m18XaVNmAQWD/EiROMGTghMwykkQ
+SBtx4Gl/O/BB6F4SQIDAQAB
-----END PUBLIC KEY-----"";

        strReader = new StringReader(publicKeyPemStr);
        pemReader = new PemReader(strReader);
        RsaKeyParameters publicKey = (RsaKeyParameters)((AsymmetricKeyParameter)pemReader.ReadObject());

        sig = SignerUtilities.GetSigner(""SHA256withRSA"");
        sig.Init(false, publicKey);
        sig.BlockUpdate(hashBytes, 0, hashBytes.Length);

        if (sig.VerifySignature(signedBytes))
        {
            Console.WriteLine(""Ok"");
        }
        else
        {
            Console.WriteLine(""NOK"");
        }

        Console.ReadLine();

Did some additional tests, the following Go code produces a totally different signature string from the C# code although the private key is the same. Where is the difference??
func main() {
privKeyStr := `-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCIw68jARnmvTh+xvMcv5iugtoHXt60NWEebfbghLTFuTlQvK0e
xY5hxnN/uD2UVc/S3QGnBQn0AfynhxlEZkedpYBb5RWoVChGZMHu7hbZukMjByjx
ec0LjtuEQhY4m18XaVNmAQWD/EiROMGTghMwykkQ+SBtx4Gl/O/BB6F4SQIDAQAB
AoGAJLarODFee6OGG/paXvhMC2TTFLFyBVxjAuEwKdtWD9IGQdc0fhM4gqTccofJ
+B0FGiz7+ZMPtfImme5ZaRQv2wx7KOPbOdAyYxC7nLFCHYqDWZJ8/cCoS+hPJFd5
9OeGLGz3QKfEEPtYEAw4+E/UjilYAtRNREkISkYoB9Va8PUCQQDDHMPRSCfXbfZV
ufmlRZj2bH8sjVaSBbJIw+y9HKJ3ORRnKGjtIZ/+z70EwMwtbbQKnl71SruO5HB9
AUTtRka/AkEAs3GWQhplPbuH/fAlaEPy5GQilUNRt76NMsgtIFWPMXnt82cxTUUR
RIKwX7M96WBppPZ2Dy7uLrX8O+3fr6BK9wJATZ0lsBy57JKLiTJ/wmTbIjuqozhe
FZw6fYOiqt+3KSIFobuLcbkMgjp1AG0JS5D2K7swHvdpgMASl0dn+dMY1QJBAIPw
9QbN2bs2dJvnQ9oSfDoq1rLhuOheF/xK68Nmpc8/VBMwwTOLoVK6tWzoopFC7ur4
vX4Uh9WYwkpecab1OakCQD0SCs4zIggA/2NkUx8J5H07/drbm9uH+98EQUvzjTdz
qSW2jJPCA4GYYmtnnDRduukjmkJlbaaTdEH5YLCilF0=
-----END RSA PRIVATE KEY-----`

pemBlockPriv, _ := pem.Decode([]byte(privKeyStr))
privateKey, _ := x509.ParsePKCS1PrivateKey(pemBlockPriv.Bytes)

hashBytes := [32]byte{152, 154, 255, 19, 168, 20, 167, 43, 232, 133, 146, 13, 183, 80, 186, 85, 180, 249, 95, 142, 234, 71, 93, 188, 29, 147, 220, 164, 248, 83, 196, 80}

signatureByte, _ := rsa.SignPKCS1v15(rand.Reader, privateKey, crypto.SHA256, hashBytes[:])
signatureStr := base64.StdEncoding.EncodeToString(signatureByte)

fmt.Printf(""%v\n"", signatureStr)
}

","BouncyCastle will automatically calculate the sha256 of your message when you calculate the signature with sig.GenerateSignature(). What you should pass into sig.BlockUpdate() is the message that you want sha256 and rsa signed. So essentially you've used sha256 twice on your message.  
You can see this here: https://play.golang.org/p/mplEnmNbs9. On line 27 I added another call to sha256 on your hashBytes and then passed that to rsa.VerifyPKCS1v15() and works fine. 
","3567","<c#><go><rsa><bouncycastle><sha256>","1","1","1","2017-02-07 07:59:29","42084560","4","","4551184","","2017-02-07 06:47:30","2017-02-05 21:23:21",""
"5781753","Perl code to generate secret key for HMAC SHA256 signing?","I'm planning to use code similar to Amazon AWS samples to authenticate signed API requests. So users will have something like:
use Digest::SHA qw(hmac_sha256_base64);
my $digest = hmac_sha256_base64 ($request, $self->{SecretKey});

and attach $digest as a parameter to their request URI. The server-side will use the same algorithm to create a digest from the client URI and compare that to the value sent by the client.
What I can't find is Perl support for generating the SecretKey of the correct length to use when generating HMAC SHA256 digest. 
For my Amazon AWS account I'm being given a 40 ASCII character base64 encoded string.  
How do I generate a proper secret-key for my clients?
","I suggest you use a PBKDF2 algorithm.  PBKDF2 = ""Password-based Key Derivation Function (#2)"".   It is defined in PKCS #5 (RFC 2898).   This is the recommended way to derive a key from a password.  You will need a salt, as well. A typical iteration count is 1000.  
This page says it has a perl implementation of PBKDF2.  I haven't tried it. 
Apparently there is also a Crypto::PBKDF2, but it is saddled with dependencies you may not want.

EDIT 
I just tried Anthony Thyssen's perl program for pbkdf2 - it works great. Simple, easy.
","3562","<perl><hmac><sha256><secret-key>","2","1","1","2011-10-16 19:23:06","","0","","540162","","2011-10-16 19:23:06","2011-04-25 18:36:48",""
"19962424","Probability of collision with truncated SHA-256 hash","I have a database-driven web application where the primary keys of all data rows are obfuscated as follows: SHA256(content type + primary key + secret), truncated to the first 8 characters. The content type is a simple word, e.g. ""post"" or ""message"" and the secret is a 20-30 char ASCII constant. The result is stored in a separate indexed column for fast DB lookup.
How do I calculate the probability of a hash collision in this scenario? I am not a mathematician at all, but a friend claimed that due to the Birthday Paradox the collision probability would be ~1% for 10,000 rows with an 8-char truncation. Is there any truth to this claim?
","Yes, there is a collision probability & it's probably somewhat too high. The exact probability depends on what ""8 characters"" means.
Does ""8 characters"" mean:

A) You store 8 hex characters of the hash?  That would store 32 bits.
B) You store 8 characters of BASE-64? That would store 48 bits.
C) You store 8 bytes, encoded in some single-byte charset/ or hacked in some broken way into a character encoding?  That would store 56-64 bits, but if you don't do encoding right you'll encounter character conversion problems.
D) You store 8 bytes, as bytes? That genuinely stores 64 bits of the hash.

Storing binary data as either A) hex or D) binary bytes, would be my preferred options. But I'd definitely recommend either reconsidering your ""key obfuscation"" scheme or significantly expanding the stored key-size to reduce the (currently excessive) probability of key collision.
From Wikipedia:  http://en.wikipedia.org/wiki/Birthday_problem#Cast_as_a_collision_problem
The birthday problem in this more generic sense applies to hash functions: the expected number of N-bit hashes that can be generated before getting a collision is not 2^N, but rather only 2^(N/2).
Since in the most conservative above understanding of your design (reading it as A, 8 chars of hex == 32 bits) your scheme would be expected to suffer collisions if it stored on the scale of ~64,000 rows. I would consider such an outcome unacceptable for all serious, or even toy, systems.
Transaction tables may have volumes, allowing growth for the business, from 1000 - 100,000 transactions/day (or more). Systems should be designed to function 100 years (36500 days), with a 10x growth factor built in, so.. 
For your keying mechanism to be genuinely robust & professionally useful, you would need to be able to scale it up to potentially handle ~36 billion (2^35) rows without collision. That would imply 70+ bits of hash.
The source-control system Git, for example, stores 160 bits of SHA-1 hash (40 chars of hex == 20 bytes or 160 bits). Collisions would not be expected to be probable with < less than 2^80 different file revisions stored.

A possibility better design might be, rather than hashing & pseudo-randomizing the key entirely & hoping (against hope) to avoid collisions, to prepend/ append/ fold-in 8-10 bits of a hash into the key.
This would generates a larger key, containing all the uniqueness of the original key plus 8-10 bits of verification.  Attempts to access keys would then be verified, and more than 3 invalid requests would be treated as an attempt to violate security by ""probing"" the keyspace & would trigger semi-permanent lockout. 
The only major costs here, would be a modest reduction in the size of the available keyspace for a given int-size.  32-bit int to/from the browser would have 8-10 bits dedicated to security, thus leaving 22-24 for the actual key. So you'd use 64-bit ints where that was not sufficient.
","3536","<math><hash><probability><sha><sha256>","2","3","1","2014-02-16 00:33:33","","1","1","","","","2013-11-13 19:15:54",""
"36037935","NodeJS crypto.createHmac SHA256 not working properly","I'm currently trying to implement the authentication part of a library we're using but I've stumbled upon a weird issue with the signing of the data, the output of crypto.createHmac in NodeJS is roughly half the size of that of hash_hmac in PHP and this is the only part of the data which differs between PHP and NodeJS (and we need to use NodeJS here)
The exact code used for creating the signature in NodeJS is,
authorization[""oauth_signature""] = crypto.createHmac('SHA256', process.env.SECRET).update(toSign).digest('base64');

And for PHP it is
$authorization[""oauth_signature""] = base64_encode(hash_hmac(""SHA256"", $signatureString . $signingKey, $secret));

However the output of the NodeJS version is
7LkQP+qKR1gSdPq/AgH/3No3ps7EtZXnqwjivMixvM8=

And for PHP it is
NmQ0MWIzYmJiMjI2YzFlMDhiYzY3NzVmMWY0MzEwNDlhNDU3NDI0ZGJlMzU3NjJhYmMwYjgwYzZjMDE4NDM4OA==

Which has more then double the data
Do I have to use a different library for the NodeJS version rather then the build in one? We're hosting our NodeJS backend on Microsoft Azure btw, not sure if this is related but seems at least valid to mention.
Edit:
I've found the issue, hash_hmac in PHP automatically exports it's data as hexidecimal data, crypto.createHmac exports it's data as raw binary data which I directly converted into base64, all I needed to do was first export the data to hex and then convert that to base64.
","Try this;
var crypto = require('crypto');
var s = 'The quick brown fox jumps over the lazy dog';
console.log(
    new Buffer(
        crypto.createHmac('SHA256', 'SECRET').update(s).digest('hex')
    ).toString('base64')
);

DEMO
PHP equivalent;
base64_encode(hash_hmac(""SHA256"",'The quick brown fox jumps over the lazy dog', 'SECRET'))

","3526","<php><node.js><azure><sha256><hmac>","1","4","2","2016-09-09 14:10:36","36038378","0","1","4989676","","2016-03-17 01:47:23","2016-03-16 14:02:47",""
"36037935","NodeJS crypto.createHmac SHA256 not working properly","I'm currently trying to implement the authentication part of a library we're using but I've stumbled upon a weird issue with the signing of the data, the output of crypto.createHmac in NodeJS is roughly half the size of that of hash_hmac in PHP and this is the only part of the data which differs between PHP and NodeJS (and we need to use NodeJS here)
The exact code used for creating the signature in NodeJS is,
authorization[""oauth_signature""] = crypto.createHmac('SHA256', process.env.SECRET).update(toSign).digest('base64');

And for PHP it is
$authorization[""oauth_signature""] = base64_encode(hash_hmac(""SHA256"", $signatureString . $signingKey, $secret));

However the output of the NodeJS version is
7LkQP+qKR1gSdPq/AgH/3No3ps7EtZXnqwjivMixvM8=

And for PHP it is
NmQ0MWIzYmJiMjI2YzFlMDhiYzY3NzVmMWY0MzEwNDlhNDU3NDI0ZGJlMzU3NjJhYmMwYjgwYzZjMDE4NDM4OA==

Which has more then double the data
Do I have to use a different library for the NodeJS version rather then the build in one? We're hosting our NodeJS backend on Microsoft Azure btw, not sure if this is related but seems at least valid to mention.
Edit:
I've found the issue, hash_hmac in PHP automatically exports it's data as hexidecimal data, crypto.createHmac exports it's data as raw binary data which I directly converted into base64, all I needed to do was first export the data to hex and then convert that to base64.
","In the case of Azure you mentioned the keys are supplied in Base64 format. With the cryto library for node I found it worked when I passed in the key as a Buffer. Azure Authorization Signature header node code sample below:
const util = require('util');
const crypto = require('crypto');
var accountName = ""YOUR_ACCOUNT_NAME"";
var key = Buffer(""YOUR_BASE64_KEY"",'base64');
var hash = crypto.createHmac('sha256',key).update(stringToSign,'utf8').digest('base64');
var signature = util.format(""%s:%s"", accountName, hash);
var authorization = util.format(""SharedKey %s"", signature);

","3526","<php><node.js><azure><sha256><hmac>","1","0","2","2016-09-09 14:10:36","36038378","0","1","4989676","","2016-03-17 01:47:23","2016-03-16 14:02:47",""
"13254907","How can I create a matching HMAC value to verify a Shopify WebHook in .NET?","I have set up an endpoint to receive webhook requests from Shopify.
The requests from Shopify include an HMAC header that is created from a shared secret key and the body of the request.
I need to calculate the HMAC on my server and match it to the value in the request header to ensure that the request is authentic.
I can't seem to create the appropriate mechanism in .NET to create a matching HMAC value.
My algorithm at this point is as follows:
public static string CreateHash(string data)
    {
        string sharedSecretKey = ""MY_KEY"";

        byte[] keyBytes = Encoding.UTF8.GetBytes(sharedSecretKey);
        byte[] dataBytes = Encoding.UTF8.GetBytes(data);

        //use the SHA256Managed Class to compute the hash
        System.Security.Cryptography.HMACSHA256 hmac = new HMACSHA256(keyBytes);
        byte[] hmacBytes = hmac.ComputeHash(dataBytes);

        //retun as base64 string. Compared with the signature passed in the header of the post request from Shopify. If they match, the call is verified.
        return System.Convert.ToBase64String(hmacBytes);
    }

The Shopify docs for verifying their webhooks can be found HERE but only PHP and Ruby samples are included.
Can anyone see what I might be doing wrong? Should I be just passing the entire JSON request body as a string into this method?
","As you allude to in your question, you should be hashing the entire json request body in your method.
My .NET isn't too good, but Here's the part of the ruby example that shows you what to do:
post '/' do

  . . .

  data = request.body.read
  verified = verify_webhook(data, env[""HTTP_X_SHOPIFY_HMAC_SHA256""])

  . . .

end

You can see that we're just grabbing the body of the request (as a string) and throwing it into the verify method verbatim. Give it a try and hopefully you'll have more luck.
","3503","<c#><.net><shopify><hmac><sha256>","4","2","3","2019-02-06 10:37:59","13290583","0","1","428632","","2012-11-07 14:05:01","2012-11-06 16:07:08",""
"13254907","How can I create a matching HMAC value to verify a Shopify WebHook in .NET?","I have set up an endpoint to receive webhook requests from Shopify.
The requests from Shopify include an HMAC header that is created from a shared secret key and the body of the request.
I need to calculate the HMAC on my server and match it to the value in the request header to ensure that the request is authentic.
I can't seem to create the appropriate mechanism in .NET to create a matching HMAC value.
My algorithm at this point is as follows:
public static string CreateHash(string data)
    {
        string sharedSecretKey = ""MY_KEY"";

        byte[] keyBytes = Encoding.UTF8.GetBytes(sharedSecretKey);
        byte[] dataBytes = Encoding.UTF8.GetBytes(data);

        //use the SHA256Managed Class to compute the hash
        System.Security.Cryptography.HMACSHA256 hmac = new HMACSHA256(keyBytes);
        byte[] hmacBytes = hmac.ComputeHash(dataBytes);

        //retun as base64 string. Compared with the signature passed in the header of the post request from Shopify. If they match, the call is verified.
        return System.Convert.ToBase64String(hmacBytes);
    }

The Shopify docs for verifying their webhooks can be found HERE but only PHP and Ruby samples are included.
Can anyone see what I might be doing wrong? Should I be just passing the entire JSON request body as a string into this method?
","    private static bool Validate(string sharedSecretKey)
    {
        var data = GetStreamAsText(HttpContext.Current.Request.InputStream, HttpContext.Current.Request.ContentEncoding);
        var keyBytes = Encoding.UTF8.GetBytes(sharedSecretKey);
        var dataBytes = Encoding.UTF8.GetBytes(data);

        //use the SHA256Managed Class to compute the hash
        var hmac = new HMACSHA256(keyBytes);
        var hmacBytes = hmac.ComputeHash(dataBytes);

        //retun as base64 string. Compared with the signature passed in the header of the post request from Shopify. If they match, the call is verified.
        var hmacHeader = HttpContext.Current.Request.Headers[""x-shopify-hmac-sha256""];
        var createSignature = Convert.ToBase64String(hmacBytes);
        return hmacHeader == createSignature;
    }

    private static string GetStreamAsText(Stream stream, Encoding encoding)
    {
        var bytesToGet = stream.Length;
        var input = new byte[bytesToGet];
        stream.Read(input, 0, (int)bytesToGet);
        stream.Seek(0, SeekOrigin.Begin); // reset stream so that normal ASP.NET processing can read data
        var text = encoding.GetString(input);
        return text;
    }

","3503","<c#><.net><shopify><hmac><sha256>","4","7","3","2019-02-06 10:37:59","13290583","0","1","428632","","2012-11-07 14:05:01","2012-11-06 16:07:08",""
"13254907","How can I create a matching HMAC value to verify a Shopify WebHook in .NET?","I have set up an endpoint to receive webhook requests from Shopify.
The requests from Shopify include an HMAC header that is created from a shared secret key and the body of the request.
I need to calculate the HMAC on my server and match it to the value in the request header to ensure that the request is authentic.
I can't seem to create the appropriate mechanism in .NET to create a matching HMAC value.
My algorithm at this point is as follows:
public static string CreateHash(string data)
    {
        string sharedSecretKey = ""MY_KEY"";

        byte[] keyBytes = Encoding.UTF8.GetBytes(sharedSecretKey);
        byte[] dataBytes = Encoding.UTF8.GetBytes(data);

        //use the SHA256Managed Class to compute the hash
        System.Security.Cryptography.HMACSHA256 hmac = new HMACSHA256(keyBytes);
        byte[] hmacBytes = hmac.ComputeHash(dataBytes);

        //retun as base64 string. Compared with the signature passed in the header of the post request from Shopify. If they match, the call is verified.
        return System.Convert.ToBase64String(hmacBytes);
    }

The Shopify docs for verifying their webhooks can be found HERE but only PHP and Ruby samples are included.
Can anyone see what I might be doing wrong? Should I be just passing the entire JSON request body as a string into this method?
","As an improvement to the above code, you can convert it to an attribute with a few minor changes:
public class VerifyShopifyAttribute : ActionFilterAttribute
{
    private readonly string sharedSecret = ""abc"";

    public override void OnActionExecuting(HttpActionContext actionContext)
    {
        if (!ValidateHash(actionContext))
        {
            // reject the request with a 400 error
            var response = actionContext.Request.CreateErrorResponse(HttpStatusCode.BadRequest, ""Bad Request"");
            actionContext.Response = response;
        }
    }

    private bool ValidateHash(HttpActionContext actionContext)
    {
        var context = (HttpContextBase)actionContext.Request.Properties[""MS_HttpContext""];
        context.Request.InputStream.Seek(0, SeekOrigin.Begin);

        using (var stream = new MemoryStream())
        {
            context.Request.InputStream.CopyTo(stream);
            string requestBody = Encoding.UTF8.GetString(stream.ToArray());

            var keyBytes = Encoding.UTF8.GetBytes(sharedSecret);
            var dataBytes = Encoding.UTF8.GetBytes(requestBody);

            //use the SHA256Managed Class to compute the hash
            var hmac = new HMACSHA256(keyBytes);
            var hmacBytes = hmac.ComputeHash(dataBytes);

            //retun as base64 string. Compared with the signature passed in the header of the post request from Shopify. If they match, the call is verified.
            var hmacHeader = HttpContext.Current.Request.Headers[""x-shopify-hmac-sha256""];
            var createSignature = Convert.ToBase64String(hmacBytes);
            return hmacHeader == createSignature;
        }
    }
}

And then you can use it like so for all of your webhooks:
[RoutePrefix(""api"")]
public class ShopifyWebHookController : ApiController
{
    [VerifyShopify]
    [HttpPost]
    public IHttpActionResult HandleWebhook(...)
    {
        ...
    }
}

","3503","<c#><.net><shopify><hmac><sha256>","4","0","3","2019-02-06 10:37:59","13290583","0","1","428632","","2012-11-07 14:05:01","2012-11-06 16:07:08",""
"46988540","Java HmacSHA256 with key","i have tried several links from stackoverflow to get HmacSHA256 with key to work with java, but i always get 
 func check(body: String) -> String {
    let hash = body.hmac(HMACAlgorithm.sha256, key: Router.sigKey)
    print(""SIG: "" + Router.sigKey)
    print(""result of hash. \(hash)"")
    return hash
}

This function returns hash with key from given String. 
Key was: 0393e944ee8108bb66fc9fa4f99f9c862481e9e0519e18232ba61b0767eee8c6
String was: example
Result is: 27effb76c97022497e25d3a5d7e823462f212a82d9ebba35f179071568b0c335
When i use this website to check if my SHA256 is good with the same key, it returns same answer, so i know my code in swift is good. But when i try to do it in java, here is the source code.
public static String HMAC_SHA(){
    try {
        String secret = ""0393e944ee8108bb66fc9fa4f99f9c862481e9e0519e18232ba61b0767eee8c6"";
        String message = ""example"";
        Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
        SecretKeySpec secret_key = new SecretKeySpec(secret.getBytes(), ""HmacSHA256"");
        sha256_HMAC.init(secret_key);
        String hash = android.util.Base64.encodeToString(sha256_HMAC.doFinal(message.getBytes()), Base64.URL_SAFE);
        return new String(Hex.encodeHex(hash.getBytes()));
    }
    catch (Exception e){
        e.printStackTrace();
    }
    return null;
}

It returns this: 4a2d5f3764736c77496b6c2d4a644f6c312d676a526938684b6f4c5a36376f3138586b4846576977777a553d0a
Which is not even similar to the swift output. How can i achieve the same result with java from the swift code above, it would be helpful a lot!
","Your key contains values greater then the value 127 and, Mac and SecretKeySpec use bytes, which in Java can contain values from -128 to 127.

In the HmacSHA256 algorithm, the key is interpreted as a string of hexadecimal values. In the case of your secret, the decimal values of this key are:
3,147,233,68,238,129,8,187,102,252,159,164,249,159,156,134,36,129,233,224,81,158,24,35,43,166,27,7,103,238,232,198
As you can see, some of them have a value over 127. When creating the SecretKeySpec object and while doing calculations within the Mac class, Java uses byte[] to store this and related sequences. In Java, a byte can contain values from -128 to 127, which means that when storing this secret, the values > 127 will ""flip"" and will make sure the calculations following this will not go as you'd expect.
In the Swift case (and with C++, Ruby, and other languages), the conversion from hex to byte occurs without losing the actual value.
","3474","<java><swift><sha256><hmac>","0","-1","2","2018-08-20 21:24:15","","6","2","","","","2017-10-28 10:10:26",""
"46988540","Java HmacSHA256 with key","i have tried several links from stackoverflow to get HmacSHA256 with key to work with java, but i always get 
 func check(body: String) -> String {
    let hash = body.hmac(HMACAlgorithm.sha256, key: Router.sigKey)
    print(""SIG: "" + Router.sigKey)
    print(""result of hash. \(hash)"")
    return hash
}

This function returns hash with key from given String. 
Key was: 0393e944ee8108bb66fc9fa4f99f9c862481e9e0519e18232ba61b0767eee8c6
String was: example
Result is: 27effb76c97022497e25d3a5d7e823462f212a82d9ebba35f179071568b0c335
When i use this website to check if my SHA256 is good with the same key, it returns same answer, so i know my code in swift is good. But when i try to do it in java, here is the source code.
public static String HMAC_SHA(){
    try {
        String secret = ""0393e944ee8108bb66fc9fa4f99f9c862481e9e0519e18232ba61b0767eee8c6"";
        String message = ""example"";
        Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
        SecretKeySpec secret_key = new SecretKeySpec(secret.getBytes(), ""HmacSHA256"");
        sha256_HMAC.init(secret_key);
        String hash = android.util.Base64.encodeToString(sha256_HMAC.doFinal(message.getBytes()), Base64.URL_SAFE);
        return new String(Hex.encodeHex(hash.getBytes()));
    }
    catch (Exception e){
        e.printStackTrace();
    }
    return null;
}

It returns this: 4a2d5f3764736c77496b6c2d4a644f6c312d676a526938684b6f4c5a36376f3138586b4846576977777a553d0a
Which is not even similar to the swift output. How can i achieve the same result with java from the swift code above, it would be helpful a lot!
","    String key = ""0393e944ee8108bb66fc9fa4f99f9c862481e9e0519e18232ba61b0767eee8c6"";
    Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
    sha256_HMAC.init(new SecretKeySpec(key.getBytes(), ""HmacSHA256""));
    byte[] result = sha256_HMAC.doFinal(""example"".getBytes());
    System.out.println (DatatypeConverter.printHexBinary(result));
    // ONLY CONVERT TO HEX (= SWIFT) NOT FIRST TO BASE64

result as requested 
 27EFFB76C97022497E25D3A5D7E823462F212A82D9EBBA35F179071568B0C335

","3474","<java><swift><sha256><hmac>","0","2","2","2018-08-20 21:24:15","","6","2","","","","2017-10-28 10:10:26",""
"9571972","How to migrate from md5 to sha256 encryption","I have a database with thousands of md5 encrypted passwords and I need to migrate to sha256. What is the safest way to do this by keeping the old passwords with md5 access and the new one with sha256 encryption? Thanks.
","I'd add a new column for the sha256 hash. That way you can just check the new column for null on login and save the new hash when you have access to the plaintext password.
","3458","<encryption><md5><sha256>","0","1","3","2013-02-09 13:11:19","9572031","7","","","","","2012-03-05 18:34:19",""
"9571972","How to migrate from md5 to sha256 encryption","I have a database with thousands of md5 encrypted passwords and I need to migrate to sha256. What is the safest way to do this by keeping the old passwords with md5 access and the new one with sha256 encryption? Thanks.
","Alternatively to creating a new column for the sha256 you can use the existing column for both. Because sha256 hashes are much longer than md5 hashes you can detect the hash algorithm by looking at the length of the hash.
","3458","<encryption><md5><sha256>","0","5","3","2013-02-09 13:11:19","9572031","7","","","","","2012-03-05 18:34:19",""
"9571972","How to migrate from md5 to sha256 encryption","I have a database with thousands of md5 encrypted passwords and I need to migrate to sha256. What is the safest way to do this by keeping the old passwords with md5 access and the new one with sha256 encryption? Thanks.
","If possible, use PBKDF2 or bcrypt. Plain SHA-2 is too fast.
If you can't use either of them, then you should at least iterate SHA-256 a couple of thousand times to slow down a password guessing attack:
var hash = SHA256(SHA256(salt)+password)
for(int i=0; i<10000; i++)
   hash = SHA256(hash);
return hash;

Remember that every user needs to have a different salt, which is usually stored alongside the password hash. A per-application salt is not enough.

For upgrading I'd use the old hash as input to the new function. That way existing hashes gain most of the security increase of the upgrade without requiring the user to login. Don't keep the old MD5 hashes around.
Then on the first login of each user, upgrade his hash to a clean new hash that doesn't use MD5 anymore.
","3458","<encryption><md5><sha256>","0","2","3","2013-02-09 13:11:19","9572031","7","","","","","2012-03-05 18:34:19",""
"28453409","HMAC SHA256 macro in Excel","I search ed through google, tech forums, etc.... but I couldn't find a good tutorial/guide that answer my question:
I have a Cell in Excel with Text, and a Cell with a Key(both text), is there a way to have an HMAC for EXCEL function that get both cell as input and return the hmac text ?
thanks in advance
","A quick search on Google revealed a HMAC-SHA256 class written in VB6, located here: http://www.vbforums.com/showthread.php?635398-VB6-HMAC-SHA-256-HMAC-SHA-1-Using-Crypto-API
Whilst this is for VB6 (and is native code), it should be straightforward to adapt for use with VBA. As it sounds that you need a worksheet function (i.e. UDF) then you will also need to write this, using the above class.
If you're happy to call .NET assemblies from VBA, then you can simplify your code as most of the calculation work is already done for you (see        System.Security.Cryptography, more specifically HMACSHA256). An example (for HMACSHA1, but the principle is the same) is given here: Does VBA have a Hash_HMAC.
","3414","<excel><vba><excel-vba><hmac><sha256>","1","3","1","2015-02-11 11:53:24","","3","","","","","2015-02-11 11:38:20",""
"11340587","Converting hex to base64 in Objective C?","I had created a SHA256 encoding of the string using the following function,
const char *s=[@""123456"" cStringUsingEncoding:NSASCIIStringEncoding];
    NSData *keyData=[NSData dataWithBytes:s length:strlen(s)];

    uint8_t digest[CC_SHA256_DIGEST_LENGTH]={0};
    CC_SHA256(keyData.bytes, keyData.length, digest);
    NSData *out=[NSData dataWithBytes:digest length:CC_SHA256_DIGEST_LENGTH];
    NSString *hash=[out description];
    hash = [hash stringByReplacingOccurrencesOfString:@"" "" withString:@""""];
    hash = [hash stringByReplacingOccurrencesOfString:@""<"" withString:@""""];
    hash = [hash stringByReplacingOccurrencesOfString:@"">"" withString:@""""];

    NSLog(@""Hash : %@"", hash);

It gives me the output : 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92.
But I need the following output : jZae727K08KaOmKSgOaGzww/XVqGr/PKEgIMkjrcbJI=. It's base64.
How Can I convert the ""hex"" hash I generated to ""base64""?
I had use this website to generate base64 hash : http://www.online-convert.com/result/7bd4c809756b3c16cf9d1939b1e57584
","You should not be converting the NSString *hash that you generated from the description to base-64. It is a hex string, not the actual data bytes.
You should go straight from NSData *out to base-64 string, using any of the available base-64 encoders. For example, you can download an implementation from this post, and use it as follows:
const char *s=[@""123456"" cStringUsingEncoding:NSASCIIStringEncoding];
NSData *keyData=[NSData dataWithBytes:s length:strlen(s)];

uint8_t digest[CC_SHA256_DIGEST_LENGTH]={0};
CC_SHA256(keyData.bytes, keyData.length, digest);
NSData *out=[NSData dataWithBytes:digest length:CC_SHA256_DIGEST_LENGTH];
// The method below is added in the NSData+Base64 category from the download
NSString *base64 =[out base64EncodedString];

","3391","<iphone><objective-c><ios><xcode><sha256>","2","4","2","2012-07-05 10:42:41","11341607","2","","","","","2012-07-05 08:30:58",""
"11340587","Converting hex to base64 in Objective C?","I had created a SHA256 encoding of the string using the following function,
const char *s=[@""123456"" cStringUsingEncoding:NSASCIIStringEncoding];
    NSData *keyData=[NSData dataWithBytes:s length:strlen(s)];

    uint8_t digest[CC_SHA256_DIGEST_LENGTH]={0};
    CC_SHA256(keyData.bytes, keyData.length, digest);
    NSData *out=[NSData dataWithBytes:digest length:CC_SHA256_DIGEST_LENGTH];
    NSString *hash=[out description];
    hash = [hash stringByReplacingOccurrencesOfString:@"" "" withString:@""""];
    hash = [hash stringByReplacingOccurrencesOfString:@""<"" withString:@""""];
    hash = [hash stringByReplacingOccurrencesOfString:@"">"" withString:@""""];

    NSLog(@""Hash : %@"", hash);

It gives me the output : 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92.
But I need the following output : jZae727K08KaOmKSgOaGzww/XVqGr/PKEgIMkjrcbJI=. It's base64.
How Can I convert the ""hex"" hash I generated to ""base64""?
I had use this website to generate base64 hash : http://www.online-convert.com/result/7bd4c809756b3c16cf9d1939b1e57584
","I use this, (mentionned in How do I do base64 encoding on iphone-sdk?)
http://www.imthi.com/blog/programming/iphone-sdk-base64-encode-decode.php
Works well, and easily usable with ARC.
","3391","<iphone><objective-c><ios><xcode><sha256>","2","1","2","2012-07-05 10:42:41","11341607","2","","","","","2012-07-05 08:30:58",""
"13362796","How to call an external JavaScript files methods from JMeter","I'm trying to produce a HMAC SHA256 signature for a SOAP/XML-RPC JMeter Request that I am building.
I have found a JavaScript library that should do the trick for me:
http://code.google.com/p/crypto-js/#HMAC
The issue is that I can't find a way to call the external JavaScript files methods from JMeter.
Any help would really be appreciated with this or a suggestion for an alternative to preform the task.
","You don't need to use any external JS libraries to generate HMAC. This functionality is available in Java SE. You can use Beanshell Sampler to execute Java code.
If this functionality wouldn't be available in Java SE, you could:

use OS Process Sampler
use BSF Sampler, set language to javascript and attach file with script
put Jar of chosen library to Jmeter's lib folder. Then this library will be loaded by JMeter  at startup time and you can use it through Beanshell sampler

","3378","<javascript><jmeter><hmac><sha256><cryptojs>","3","2","1","2012-11-14 09:42:55","13367400","0","1","","","","2012-11-13 14:45:51",""
"37982451","How to generate HMAC-SHA256 in AngularJS?","How am I able to generate a HMAC-SHA256 signature in AngularJS? 
I cant find any sources regarding this topic.
","AngularJS is javascript. So, you need to be asking: ""How to generate hmac-sha256"" in javascript. This has been answered many times.
For example using ""jsSHA"" you can do:
var shaObj = new jsSHA(hashType, ""TEXT"");
shaObj.setHMACKey(""abc"", ""TEXT"");
shaObj.update(""This is a test"");
var hmac = shaObj.getHMAC(""HEX"");

","3338","<javascript><angularjs><restful-authentication><sha256><hmac>","2","7","1","2016-06-23 05:29:58","37982486","3","","4940630","","2016-06-23 05:29:58","2016-06-23 04:37:22",""
"27060248","Calculate SHA-256 hash and B64 of a file in JavaScript","what is the simplest way to calculate the SHA-256 of a file in JavaScript? (using the File API of W3C)
Once I have the sha-256 hash of this file, I need to generate the base64 of this hash?
What libraries do you suggest me to do that?
thanks in advance
","Have you thought of using CryptoJS
CryptoJS is a growing collection of standard and secure cryptographic algorithms implemented in JavaScript using best practices and patterns. They are fast, and they have a consistent and simple interface.
CryptoJS
Basically you can include components/lib-typedarrays-min.js and then do the following in code.
var reader = new FileReader();

// If we use onloadend, we need to check the readyState.
reader.onloadend = function(evt) {
  if (evt.target.readyState == FileReader.DONE) { // DONE == 2

    var wordArray = CryptoJS.lib.WordArray.create(e.target.result);
    var hash = CryptoJS.SHA256(wordArray);
  }
};

var blob = file.slice(start, stop + 1);
reader.readAsArrayBuffer(blob);

I haven't tested the above solution but it should work fine.
","3316","<javascript><hash><sha256>","1","3","2","2014-11-21 11:45:31","27060311","0","1","","","","2014-11-21 11:25:39",""
"27060248","Calculate SHA-256 hash and B64 of a file in JavaScript","what is the simplest way to calculate the SHA-256 of a file in JavaScript? (using the File API of W3C)
Once I have the sha-256 hash of this file, I need to generate the base64 of this hash?
What libraries do you suggest me to do that?
thanks in advance
","OpenSSL is a widely used tool for cryptography
","3316","<javascript><hash><sha256>","1","-3","2","2014-11-21 11:45:31","27060311","0","1","","","","2014-11-21 11:25:39",""
"51154233","How to decrypt of the encrypted value in dart?","I am testing the Cryptographic hashing functions for Dart.  I can't find any information about DECRYPTION?
Can anyone show me how to decryption of the encrypted value?
And this is example;
import 'dart:convert';
import 'package:crypto/crypto.dart'; 

void main() async { 
  var key = utf8.encode('p@ssw0rd'); 
  var bytes = utf8.encode(""Dart and Aqueduct makes my life easier. Thank you.""); 


  // TODO: ENCRYPTION 
  var hmacSha256 = new Hmac(sha256, key); // HMAC-SHA256 
  var digest = hmacSha256.convert(bytes); 
 
  print(“————ENCRYPTION—————“); 
  print(""HMAC digest as bytes: ${digest.bytes}""); 
  print(""HMAC digest as hex string: $digest""); 
  print('\r\n'); 


  // TODO: DECRYPTION 
     ???????????? 
  print(“————DECRYPTION—————“); 
  print(?????????); 

}

","An HMAC is a message authentication code. It is a digest used to verify that a message has not been tampered with, similar to a signature. It is constructed using a one-way hash function, in this case SHA256. It is not an encryption, and it cannot be reversed, therefore the value you have cannot be decrypted.
The only thing you can do with an HMAC is, given the HMAC and the corresponding plain-text, verifying the origin of the plain-text and that it has not been tampered with.
Looking at the GitHub page for the Dart crypto library, it looks like it only supports digest algorithms. There are no encryption algorithms listed, so you will need to use a different library if you want to do two-way encryption which can actually be decrypted. The Cipher library looks like it could be promising in this regard.
","3292","<encryption><dart><sha256><hmac>","0","0","3","2018-07-04 04:49:20","51155757","0","","","","","2018-07-03 12:06:58",""
"51154233","How to decrypt of the encrypted value in dart?","I am testing the Cryptographic hashing functions for Dart.  I can't find any information about DECRYPTION?
Can anyone show me how to decryption of the encrypted value?
And this is example;
import 'dart:convert';
import 'package:crypto/crypto.dart'; 

void main() async { 
  var key = utf8.encode('p@ssw0rd'); 
  var bytes = utf8.encode(""Dart and Aqueduct makes my life easier. Thank you.""); 


  // TODO: ENCRYPTION 
  var hmacSha256 = new Hmac(sha256, key); // HMAC-SHA256 
  var digest = hmacSha256.convert(bytes); 
 
  print(“————ENCRYPTION—————“); 
  print(""HMAC digest as bytes: ${digest.bytes}""); 
  print(""HMAC digest as hex string: $digest""); 
  print('\r\n'); 


  // TODO: DECRYPTION 
     ???????????? 
  print(“————DECRYPTION—————“); 
  print(?????????); 

}

","PointyCastle (https://pub.dartlang.org/packages/pointycastle) has been recommended in the past, but it appears to have not yet been updated for Dart 2. :(
","3292","<encryption><dart><sha256><hmac>","0","1","3","2018-07-04 04:49:20","51155757","0","","","","","2018-07-03 12:06:58",""
"51154233","How to decrypt of the encrypted value in dart?","I am testing the Cryptographic hashing functions for Dart.  I can't find any information about DECRYPTION?
Can anyone show me how to decryption of the encrypted value?
And this is example;
import 'dart:convert';
import 'package:crypto/crypto.dart'; 

void main() async { 
  var key = utf8.encode('p@ssw0rd'); 
  var bytes = utf8.encode(""Dart and Aqueduct makes my life easier. Thank you.""); 


  // TODO: ENCRYPTION 
  var hmacSha256 = new Hmac(sha256, key); // HMAC-SHA256 
  var digest = hmacSha256.convert(bytes); 
 
  print(“————ENCRYPTION—————“); 
  print(""HMAC digest as bytes: ${digest.bytes}""); 
  print(""HMAC digest as hex string: $digest""); 
  print('\r\n'); 


  // TODO: DECRYPTION 
     ???????????? 
  print(“————DECRYPTION—————“); 
  print(?????????); 

}

","Well actually searching a lot couldn't find anything better than this. The encrypt 0.2.0 new and has Dart 2 support. https://pub.dartlang.org/packages/encrypt#-installing-tab-
I need to something that makes My Flutter Mobile App and Aqueduct can share secure communication. Leo Cavalcante is a great guy. While we were talking yesterday he comes up quick answer. So this is another love of Dart. Because every people support each other.
It Supports:
    AES (Block Cipher)
    Salsa20 (Stream Cipher)
    RSA (Asymmetric) (working)
Use this package as a library

Depend on it
Add this to your package's pubspec.yaml file:

dependencies:
  encrypt: ""^0.2.0""

Install it
You can install packages from the command line:
with pub:

$ pub get
with Flutter:
$ flutter packages get
Alternatively, your editor might support pub get or flutter packages get. Check the docs for your editor to learn more.

Import it
Now in your Dart code, you can use:
  import 'package:encrypt/encrypt.dart';

","3292","<encryption><dart><sha256><hmac>","0","1","3","2018-07-04 04:49:20","51155757","0","","","","","2018-07-03 12:06:58",""
"49519987","How many combinations does SHA-256 have?","By using an online tool and wikipedia I found out that every sha-256 encrypted string is 64 chars longs containing numbers and characters. Hence I assumed that there are 34^36 combinations ( 2^216 simplified by an algebra calculator ).
After doing some research I found out that most people said there are 2^256 combinations. Could someone explain ? To make the context clear, I write a paper about cryptocurrencies and try to explain how many different combinations there are to encrypt and how long this could take ( therefore how many guesses it could take) and compare this to the amount of total atoms in the universe (roughly 10^85).
","SHA-256 produces 256 bits which is 32 bytes, not characters, each byte has 256 possible values.
There are 256 bits and each bit has 2 values (0 or 1), thus 2^256.
There are 32 bytes and each byte has 256 values, thus 256^32.
Note: 2^256 == 256^32 ~= 10^77.
The 32 bytes can be encoded many ways, in hexadecimal it would be 64 characters, in Base64 it would be 44 characters.
","3270","<bitcoin><sha256>","7","12","1","2018-03-27 19:32:20","49520766","2","1","","","","2018-03-27 18:24:20",""
"28933687","Golang Random Sha256","I am having trouble getting a random sha256 hash using a timestamp seed:
https://play.golang.org/p/2-_VPe3oFr (dont use playground - time always same)
Does anyone understand why it always returns the same result? (non-playground runs)
","Yes. This:
string(timestamp)

does not do what you think it does, see the spec. Long story short, the timestamp is not a valid unicode code point, so the result is always ""\uFFFD"".
","3239","<string><random><go><type-conversion><sha256>","4","3","2","2016-10-01 20:54:02","","2","","1705598","","2016-10-01 20:54:02","2015-03-09 00:45:47",""
"28933687","Golang Random Sha256","I am having trouble getting a random sha256 hash using a timestamp seed:
https://play.golang.org/p/2-_VPe3oFr (dont use playground - time always same)
Does anyone understand why it always returns the same result? (non-playground runs)
","Because you do this:
timestamp := time.Now().Unix()
log.Print(fmt.Sprintf(""%x"", sha256.Sum256([]byte(string(timestamp))))[:45])

You print the hex form of the SHA-256 digest of the data:
[]byte(string(timestamp))

What is it exactly?
timestamp is of type int64, converting it to string is:

Converting a signed or unsigned integer value to a string type yields a string containing the UTF-8 representation of the integer. Values outside the range of valid Unicode code points are converted to ""\uFFFD"".

But its value is not a valid unicode code point so it will always be ""\uFFFD"" which is efbfbd (UTF-8 encoded), and your code always prints the SHA-256 of the data []byte{0xef, 0xbf, 0xbd} which is (or rather its first 45 hex digits because you slice the result):
83d544ccc223c057d2bf80d3f2a32982c32c3c0db8e26

I guess you wanted to generate some random bytes and calculate the SHA-256 of that, something like this:
data := make([]byte, 10)
for i := range data {
    data[i] = byte(rand.Intn(256))
}
fmt.Printf(""%x"", sha256.Sum256(data))

Note that if you'd use the crypto/rand package instead of math/rand, you could fill a slice of bytes with random values using the rand.Read() function, and you don't even have to set seed (and so you don't even need the time package):
data := make([]byte, 10)
if _, err := rand.Read(data); err == nil {
    fmt.Printf(""%x"", sha256.Sum256(data))
}

","3239","<string><random><go><type-conversion><sha256>","4","10","2","2016-10-01 20:54:02","","2","","1705598","","2016-10-01 20:54:02","2015-03-09 00:45:47",""
"20784521","SHA256 hash calculation","for my employer I have to present customers of a web-app with checksums for certain files they download.
I'd like to present the user with the hash their client tools are also likely to generate, hence I have been comparing online hashing tools. My question is regarding their form of hashing, since they differ, strangely enough.
After a quick search I tested with 5:

http://www.convertstring.com/Hash/SHA256
http://www.freeformatter.com/sha256-generator.html#ad-output
http://online-encoder.com/sha256-encoder-decoder.html
http://www.xorbin.com/tools/sha256-hash-calculator
http://www.everpassword.com/sha-256-generator

Entering the value 'test' (without 'enter' after it) all 5 give me the same SHA256 result. However, and here begins the peculiar thing, when I enter the value 'test[enter]test' (so two lines) online tool 1, 2 and 3 give me the same SHA256 hash, and site 4 and 5 give me a different one (so 1, 2 and 3 are equal, and 4 and 5 are equal). This most likely has to do with the way the tool, or underlying code handles \r\n, or at least I think so.
Coincidentally, site 1, 2 and 3 present me with the same hash as my C# code does:
    var sha256Now = ComputeHash(Encoding.UTF8.GetBytes(""test\r\ntest""), new SHA256CryptoServiceProvider());

    private static string ComputeHash(byte[] inputBytes, HashAlgorithm algorithm)
    {
        var hashedBytes = algorithm.ComputeHash(inputBytes);
        return BitConverter.ToString(hashedBytes);
    }

The question is: which sites are 'right'? 
Is there any way to know if a hash is compliant with the standard?
UPDATE1: Changed the encoding to UTF8. This has no influence on the output hash being created though. Thx @Hans. (because my Encoding.Default is probably Encoding.UTF8)
UPDATE2: Maybe I should expand the question a bit, since it may have been under-explained, sorry. I guess what I am asking is more of a usability question than a technical one; Should I offer all the hashes with different line endings? Or should I stick to one? The client will probably call my company afraid that their file was changed somehow if they have a different way of calculating the hash. How is this usually solved?
","All those sites return valid values.
Sites 4 and 5 use \n as line break.

EDIT
I see you edited your question to add Encoding.Default.GetBytes in the code example.
This is interesting, because you see there is some string to byte array conversion to run before computing the hash. Line breaking (\n or \r\n) as well as text encoding are both ways to interpret your string to get different bytes values.
Once you have the same bytes as input, all hash results will be identical.

EDIT 2:
If you're dealing with bytes directly, then just compute the hash with those bytes. Don't try to provide different hash values; a hash must only return one value. If your clients have a different hash value than yours, then they are doing it wrong.
That being said, I'm pretty sure it won't ever happen because there isn't any way to misinterpret a byte array.
","3222","<c#><sha256>","3","2","2","2013-12-26 12:39:37","20784595","4","","1384767","","2013-12-26 12:23:28","2013-12-26 12:05:28",""
"20784521","SHA256 hash calculation","for my employer I have to present customers of a web-app with checksums for certain files they download.
I'd like to present the user with the hash their client tools are also likely to generate, hence I have been comparing online hashing tools. My question is regarding their form of hashing, since they differ, strangely enough.
After a quick search I tested with 5:

http://www.convertstring.com/Hash/SHA256
http://www.freeformatter.com/sha256-generator.html#ad-output
http://online-encoder.com/sha256-encoder-decoder.html
http://www.xorbin.com/tools/sha256-hash-calculator
http://www.everpassword.com/sha-256-generator

Entering the value 'test' (without 'enter' after it) all 5 give me the same SHA256 result. However, and here begins the peculiar thing, when I enter the value 'test[enter]test' (so two lines) online tool 1, 2 and 3 give me the same SHA256 hash, and site 4 and 5 give me a different one (so 1, 2 and 3 are equal, and 4 and 5 are equal). This most likely has to do with the way the tool, or underlying code handles \r\n, or at least I think so.
Coincidentally, site 1, 2 and 3 present me with the same hash as my C# code does:
    var sha256Now = ComputeHash(Encoding.UTF8.GetBytes(""test\r\ntest""), new SHA256CryptoServiceProvider());

    private static string ComputeHash(byte[] inputBytes, HashAlgorithm algorithm)
    {
        var hashedBytes = algorithm.ComputeHash(inputBytes);
        return BitConverter.ToString(hashedBytes);
    }

The question is: which sites are 'right'? 
Is there any way to know if a hash is compliant with the standard?
UPDATE1: Changed the encoding to UTF8. This has no influence on the output hash being created though. Thx @Hans. (because my Encoding.Default is probably Encoding.UTF8)
UPDATE2: Maybe I should expand the question a bit, since it may have been under-explained, sorry. I guess what I am asking is more of a usability question than a technical one; Should I offer all the hashes with different line endings? Or should I stick to one? The client will probably call my company afraid that their file was changed somehow if they have a different way of calculating the hash. How is this usually solved?
","Microsoft has a class called Crypto in System.Web.Helpers name space which has SHA256 hashing out of the box.
Example:
var plainText = ""Text"";
var hashedText = System.Web.Helpers.Crypto.SHA256(plainText);

","3222","<c#><sha256>","3","0","2","2013-12-26 12:39:37","20784595","4","","1384767","","2013-12-26 12:23:28","2013-12-26 12:05:28",""
"26506032","How do I verify a password which is hashed using a random salt?","I am developing a web application. Now from security perspective, salted hashing is required for the password while it is sent from client to server.
     Now my problem is, if I randomly generate a salt, append it to the password and hash the combination, how would this password be verified. As the salt generated is at random, hash of the salt+password combination would be different every time.
    If I send the same salt generated along with user credentials to the server, this will expose the salt. Exposed salt will create similar trouble as person trying to crack the password can append the exposed salt with different passwords to get the hash and match it. 
I have checked numerous websites and question on stack overflow but nothing matched my need exactly.
There are tools that can read the memory of browser and steal passwords entered. Therefore salted hashing is required at client side also.
","You have to keep the salt on the server side of the code. 
When you authenticate a user, you send the password to the server. The server appends the salt and then hashes the password. The salt should be stored somewhere in the serverside code or in the database.
You should never send the salt to the client side of the application.
","3195","<javascript><sha256><owasp><penetration-testing><saltedhash>","3","4","2","2018-08-30 20:13:09","","7","0","3001008","","2014-10-27 08:37:51","2014-10-22 11:04:52",""
"26506032","How do I verify a password which is hashed using a random salt?","I am developing a web application. Now from security perspective, salted hashing is required for the password while it is sent from client to server.
     Now my problem is, if I randomly generate a salt, append it to the password and hash the combination, how would this password be verified. As the salt generated is at random, hash of the salt+password combination would be different every time.
    If I send the same salt generated along with user credentials to the server, this will expose the salt. Exposed salt will create similar trouble as person trying to crack the password can append the exposed salt with different passwords to get the hash and match it. 
I have checked numerous websites and question on stack overflow but nothing matched my need exactly.
There are tools that can read the memory of browser and steal passwords entered. Therefore salted hashing is required at client side also.
","There's no problem to keep the salt on database. The salt is only there to make sure an attacker don't use some table that has a lot of calculated hashs and its corresponding passwords to find out the passwords of your compromised database. With salt the only option for attackers is brute force.
So, to make it harder for attackers to brute force and find out the passwords from hashs I suggest a long and secure random salt for each user.
Good explanation can be found on Why do we use the "salt" to secure our passwords?
","3195","<javascript><sha256><owasp><penetration-testing><saltedhash>","3","3","2","2018-08-30 20:13:09","","7","0","3001008","","2014-10-27 08:37:51","2014-10-22 11:04:52",""
"8494586","Creating a sha256 signature using openssl","I need to create a SHA256 signature using OpenSSL ?
I tried:
  openssl sha256 -sha256 -binary -sign (providing my priv key & contents)

But, I get the following error : openssl:Error: 'sha256' is an invalid command.
sha1 works fine, but I thought sha256 was supported as well.
","OpenSSL uses the command 'dgst' to calculate various digests (including SHA-256). The command also allows you to sign a digest (using a private key) and verify a signature (using a public key).
","3193","<openssl><rsa><sha1><signing><sha256>","3","3","1","2014-07-20 18:08:24","8510087","0","","738737","","2011-12-13 19:18:07","2011-12-13 18:54:53",""
"36934079","Hash string with SHA256 key","I can't get correct HASH. I really have no idea what is wrong with it.
All hashes i get wasn't correct as on this site:http://hash.online-convert.com/sha256-generator
                   public NavigatedPage ()
    {
                   string bytes = ""<?xml version=\""1.0\"" encoding=\""utf-8\"" ?><Command>  <LMI_PAYMENT_NO>1000</LMI_PAYMENT_NO><LMI_MERCHANT_ID>2096</LMI_MERCHANT_ID>  <LMI_HASH></LMI_HASH>  <LMI_PAYMENT_SYSTEM>18</LMI_PAYMENT_SYSTEM>  <LMI_PAYMENT_AMOUNT>1001</LMI_PAYMENT_AMOUNT>  <LMI_PAYMENT_DESC>Оплата договора</LMI_PAYMENT_DESC></Command>"";
                   string key = ""14653285"";
                   string message = bytes;//xml document in a string

                   System.Text.UTF8Encoding encoding = new System.Text.UTF8Encoding();

                   byte[] keyByte = encoding.GetBytes(key);

                    HMACSHA256 hmacsha256 = new HMACSHA256(keyByte);

                    byte[] messageBytes = encoding.GetBytes(message);

                    byte[] hashmessage = hmacsha256.ComputeHash(messageBytes);

                    var tempHash = ByteToString(hashmessage);
   }




public static string ByteToString(byte[] buff)
    {
        string sbinary = """";

        for ( int i = 0; i < buff.Length; i++ )
        {
            sbinary += buff[ i ].ToString(""X2""); // hex format
        }
        return ( sbinary );
    }

That's what i've done, but it gives me wrong result.
","When you put your string into the Text you want to convert to a SHA-256 hash: textbox on the site you linked, you have to remove the c# escape characters for your string (in this case replace \"" with "") then you get the same result - your code works.
This is because C# will see \"" as an escaped "" and the site will not (therefore including it in the hash)
Your Result
Their Result
","3181","<c#><hash><sha256>","1","3","1","2016-04-29 10:20:12","36935641","7","1","750510","","2016-04-29 09:51:58","2016-04-29 09:04:18",""
"35553334","convert byte array to string in java","I try to convert byte array to string in java using new String( bytes, ""UTF-8"") method, but they only return the object. like this @AB4634bSbbfa
So, I searched some way to solve this problem.
I finally get valid string array, by converting hex-code to basic-character array.
like this. char[] chars = {""0"", ""1"", ... ""e"", ""f""};
This never happened before why do i have to convert hex-code to get valid string.
Here is method.
byte array which is hashed by Mac-sha-256 with specific key when i hashed.
    public static String getHashString() {
        String algorithm = ""HmacSHA256"";

        String hashKey = ""some_key"";
        String message = ""abcdefg"";

        String hexed = """";

        try {
            Mac sha256_HMAC = Mac.getInstance(algorithm);
            SecretKeySpec secret_key = new SecretKeySpec(hashKey.getBytes(), algorithm);
            sha256_HMAC.init(secret_key);

            byte[] hash = sha256_HMAC.doFinal(message.getBytes(""UTF-8""));

            // it doesn't work for me.
//            hexed = new String(hash, ""UTF-8"");

            // it works.
            hexed = bytesToHex(hash);

        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (InvalidKeyException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }

        return hexed;
    }

    public static final char[] HEX_DIGITS = ""0123456789abcdef"".toCharArray();
    public static String bytesToHex(final byte[] data ) {
        final int l = data.length;
        final char[] hexChars = new char[l<<1];
        for( int i=0, j =0; i < l; i++ ) {
            hexChars[j++] = HEX_DIGITS[(0xF0 & data[i]) >>> 4];
            hexChars[j++] = HEX_DIGITS[0x0F & data[i]];
        }
        return new String(hexChars);
    }

Thanks.
","just do new String(byteArray);
","3166","<java><android><string><sha256><string-hashing>","0","-2","3","2016-02-22 12:52:55","","0","3","1770868","","2016-02-22 12:29:57","2016-02-22 12:12:19",""
"35553334","convert byte array to string in java","I try to convert byte array to string in java using new String( bytes, ""UTF-8"") method, but they only return the object. like this @AB4634bSbbfa
So, I searched some way to solve this problem.
I finally get valid string array, by converting hex-code to basic-character array.
like this. char[] chars = {""0"", ""1"", ... ""e"", ""f""};
This never happened before why do i have to convert hex-code to get valid string.
Here is method.
byte array which is hashed by Mac-sha-256 with specific key when i hashed.
    public static String getHashString() {
        String algorithm = ""HmacSHA256"";

        String hashKey = ""some_key"";
        String message = ""abcdefg"";

        String hexed = """";

        try {
            Mac sha256_HMAC = Mac.getInstance(algorithm);
            SecretKeySpec secret_key = new SecretKeySpec(hashKey.getBytes(), algorithm);
            sha256_HMAC.init(secret_key);

            byte[] hash = sha256_HMAC.doFinal(message.getBytes(""UTF-8""));

            // it doesn't work for me.
//            hexed = new String(hash, ""UTF-8"");

            // it works.
            hexed = bytesToHex(hash);

        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (InvalidKeyException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }

        return hexed;
    }

    public static final char[] HEX_DIGITS = ""0123456789abcdef"".toCharArray();
    public static String bytesToHex(final byte[] data ) {
        final int l = data.length;
        final char[] hexChars = new char[l<<1];
        for( int i=0, j =0; i < l; i++ ) {
            hexChars[j++] = HEX_DIGITS[(0xF0 & data[i]) >>> 4];
            hexChars[j++] = HEX_DIGITS[0x0F & data[i]];
        }
        return new String(hexChars);
    }

Thanks.
","I'm not sure the string you get in the end is what you're after. I think a common scenario is to use 
new BASE64Encoder().encode(hash)
which will return you the hashed message as String.
","3166","<java><android><string><sha256><string-hashing>","0","0","3","2016-02-22 12:52:55","","0","3","1770868","","2016-02-22 12:29:57","2016-02-22 12:12:19",""
"35553334","convert byte array to string in java","I try to convert byte array to string in java using new String( bytes, ""UTF-8"") method, but they only return the object. like this @AB4634bSbbfa
So, I searched some way to solve this problem.
I finally get valid string array, by converting hex-code to basic-character array.
like this. char[] chars = {""0"", ""1"", ... ""e"", ""f""};
This never happened before why do i have to convert hex-code to get valid string.
Here is method.
byte array which is hashed by Mac-sha-256 with specific key when i hashed.
    public static String getHashString() {
        String algorithm = ""HmacSHA256"";

        String hashKey = ""some_key"";
        String message = ""abcdefg"";

        String hexed = """";

        try {
            Mac sha256_HMAC = Mac.getInstance(algorithm);
            SecretKeySpec secret_key = new SecretKeySpec(hashKey.getBytes(), algorithm);
            sha256_HMAC.init(secret_key);

            byte[] hash = sha256_HMAC.doFinal(message.getBytes(""UTF-8""));

            // it doesn't work for me.
//            hexed = new String(hash, ""UTF-8"");

            // it works.
            hexed = bytesToHex(hash);

        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (InvalidKeyException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }

        return hexed;
    }

    public static final char[] HEX_DIGITS = ""0123456789abcdef"".toCharArray();
    public static String bytesToHex(final byte[] data ) {
        final int l = data.length;
        final char[] hexChars = new char[l<<1];
        for( int i=0, j =0; i < l; i++ ) {
            hexChars[j++] = HEX_DIGITS[(0xF0 & data[i]) >>> 4];
            hexChars[j++] = HEX_DIGITS[0x0F & data[i]];
        }
        return new String(hexChars);
    }

Thanks.
","Following is a sample which shows Conversion of Byte array to String :- 
public class TestByte
{    
public static void main(String[] argv) {

        String example = ""This is an example"";
        byte[] bytes = example.getBytes();

        System.out.println(""Text : "" + example);
        System.out.println(""Text [Byte Format] : "" + bytes);
        System.out.println(""Text [Byte Format] : "" + bytes.toString());

        String s = new String(bytes);
        System.out.println(""Text Decryted : "" + s);
     }}

","3166","<java><android><string><sha256><string-hashing>","0","4","3","2016-02-22 12:52:55","","0","3","1770868","","2016-02-22 12:29:57","2016-02-22 12:12:19",""
"18459917","C# Calculate and verify SHA256 value for SEPA (XML) paymentfile","i am struggling with the same issue like Markus Dreyer:
C# Calculate SHA256 value for SEPA (XML) paymentfile
According to the DFÜ Agreement i have to calculate a sha256 hash value:

The hash value is created using the entire contained document, including the opening and closing  tag.
The document is canonicalized according to Canonical XML, version 1.0. (http://www.w3.org/TR/2001/REC-xml-c14n-20010315).
In the case of included documents, the canonisation has also to be executed accord-ing to the main document.
SHA-256 is used as hash algorithm.

This is a sample valid xml File ( exported from an financial tool ) :
<?xml version=""1.0"" encoding=""UTF-8""?>
<conxml xmlns=""urn:conxml:xsd:container.nnn.002"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""urn:conxml:xsd:container.nnn.002 container.nnn.002.xsd"">
  <CreDtTm>2013-08-27T07:20:25Z</CreDtTm>
  <MsgPain001>
    <HashValue>33E579FE7A9AF6C32C100E8578EBD63E54A2DF47C6849F7A4BC8BEA9E2794197</HashValue>
    <HashAlgorithm>SHA256</HashAlgorithm>
    <Document xmlns=""urn:swift:xsd:$pain.001.002.02"">
      <pain.001.001.02>
        <GrpHdr>
          <MsgId>D005201308270920191</MsgId>
          <CreDtTm>2013-08-27T07:20:19Z</CreDtTm>
          <BtchBookg>true</BtchBookg>
          <NbOfTxs>1</NbOfTxs>
          <CtrlSum>0.50</CtrlSum>
          <Grpg>MIXD</Grpg>
          <InitgPty>
            <Nm>Test</Nm>
          </InitgPty>
        </GrpHdr>
        <PmtInf>
          <PmtInfId>D005201308270920191</PmtInfId>
          <PmtMtd>TRF</PmtMtd>
          <PmtTpInf>
            <SvcLvl>
              <Cd>SEPA</Cd>
            </SvcLvl>
          </PmtTpInf>
          <ReqdExctnDt>2013-08-27</ReqdExctnDt>
          <Dbtr>
            <Nm>Test</Nm>
          </Dbtr>
          <DbtrAcct>
            <Id>
              <IBAN>DE76200700000888888888</IBAN>
            </Id>
          </DbtrAcct>
          <DbtrAgt>
            <FinInstnId>
              <BIC>DEUTDEHHXXX</BIC>
            </FinInstnId>
          </DbtrAgt>
          <ChrgBr>SLEV</ChrgBr>
          <CdtTrfTxInf>
            <PmtId>
              <EndToEndId>NOTPROVIDED</EndToEndId>
            </PmtId>
            <Amt>
              <InstdAmt Ccy=""EUR"">0.50</InstdAmt>
            </Amt>
            <CdtrAgt>
              <FinInstnId>
                <BIC>DEUTDEHHXXX</BIC>
              </FinInstnId>
            </CdtrAgt>
            <Cdtr>
              <Nm>Erwin Mustermann</Nm>
            </Cdtr>
            <CdtrAcct>
              <Id>
                <IBAN>DE09200700000123456789</IBAN>
              </Id>
            </CdtrAcct>
            <RmtInf>
              <Ustrd>Sepa Test Gutschrift</Ustrd>
            </RmtInf>
          </CdtTrfTxInf>
        </PmtInf>
      </pain.001.001.02>
    </Document>
  </MsgPain001>
</conxml>

According to the Solution from Markus Dreyer, here is my code:
System.Text.UTF8Encoding enc = new UTF8Encoding(false);

XmlDocument doc = new XmlDocument();
doc.PreserveWhitespace = true;
doc.Load(@""path to file"");
XmlNodeList list = doc.GetElementsByTagName(""Document"");
String s = list.Item(0).OuterXml;


MemoryStream msIn = new MemoryStream(enc.GetBytes(s));

XmlDsigC14NTransform t = new XmlDsigC14NTransform(true);
t.LoadInput(msIn);
MemoryStream ms = new MemoryStream();
ms = (MemoryStream)t.GetOutput(typeof(MemoryStream));


byte[] digest = t.GetDigestedOutput(new SHA256Managed());
String result = BitConverter.ToString(digest).Replace(""-"", String.Empty);

In my calculation i got the value: 
55B2597B0688AB1A19760B542AA70AEF4F980D7BC9D6EBCF2B741F6299C661D3
but expected is the value from the file:
33E579FE7A9AF6C32C100E8578EBD63E54A2DF47C6849F7A4BC8BEA9E2794197
Have any of you an idea, what i am missing?
","By looking here http://www.mobilefish.com/download/sepa_xml/pain.001.001.02.xml, it seems you were missing the xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" namespace from the Document node (probably because it was stripped by an XML parser). I have modified a little your code so that it use the using syntax and I added the namespace if missing. Now it returns the right hash.
XmlDocument doc = new XmlDocument();
doc.PreserveWhitespace = true;
doc.LoadXml(xml);

XmlNodeList list = doc.GetElementsByTagName(""Document"");

XmlElement node = (XmlElement)list[0];
node.SetAttribute(""xmlns:xsi"", ""http://www.w3.org/2001/XMLSchema-instance"");

string s = node.OuterXml;

// The XmlDsigC14NTransform will strip the UTF8 BOM
using (MemoryStream msIn = new MemoryStream(Encoding.UTF8.GetBytes(s)))
{
    XmlDsigC14NTransform t = new XmlDsigC14NTransform(true);
    t.LoadInput(msIn);

    using (var hash = new SHA256Managed())
    {
        byte[] digest = t.GetDigestedOutput(hash);
        string result = BitConverter.ToString(digest).Replace(""-"", String.Empty);
    }
}

","3162","<c#><xml><sha256><digest><canonicalization>","3","3","1","2013-08-27 08:49:40","18460470","2","2","-1","","2017-05-23 10:32:15","2013-08-27 07:52:54",""
"34634453","Hash X509 certificate with SHA 256 in c#","I work on an EBICS implementation in C# and I need to send to my bank the hash of my three certificates in SHA256 format in order to enable EBICS link with it. 
I generated them in C# with BouncyCastle and now I have a X509Certificate2 object. 
So to hash my certificate I used the following code : 
String HashCertificate = Certificat.GetCertHashString();

And he return me the following result : 

21952A5F79CA3232A656794EE4532BECF5AE3960

But the length don't match with the lenght of the hash of the bank certificate : 

57436AD3D09989ED74F4FCCDBF7668C43F8BF87C933F90B065ED442A22E5B0BF

So I think the GetCertHashString() function return the hash of the certificate in SHA1 format and I have no idea how I can hash it in SHA256. 
Can you help me please ? 
Thank you in advance
","As MSDN says GetCertHashString method always

Returns the SHA1 hash value for the X.509v3 certificate as a hexadecimal string.

regardless of signature algorithm since it is Windows specific thumbprint used internally in certifcates store.
You can calculate any other hash by accessing certificate content from its RawData property, e.g. for SHA256:
using (var hasher = SHA256.Create())
{
    var hash = hasher.ComputeHash(cert.RawData);
    Console.WriteLine(BitConverter.ToString(hash));
}

","3144","<c#><hash><certificate><sha256><bank>","4","7","1","2016-01-06 14:59:45","34636194","0","1","","","","2016-01-06 13:35:23",""
"27879936","Why do i have a wrong (sha1) immediate startcom certificate in my chain on azure website?","My immediate certificate on https://paper-shape.com got a weak signature algorithm SHA1: https://www.ssllabs.com/ssltest/analyze.html?d=paper-shape.com
I followed theses instructions. I created my pfx file both per OpenSSL and per certificate export wizard.
The CRT and pem (immediate certificate from startcom) seem to be ok, because the following command shows ""Signature Algorithm: sha256WithRSAEncryption"" on both (CRT and PEM):

$ openssl x509 -text -in paper-shape.com.crt

Either something went wrong during my pfx creation process or azure website overrules my immediate certificate.
Has anybody an idea?
","You can find (and chain) the SHA-256 intermediate certificate for Class-1 in PEM format, here: https://www.startssl.com/certs/class1/sha2/pem/sub.class1.server.sha2.ca.pem
","3083","<azure><ssl-certificate><sha1><azure-web-sites><sha256>","5","5","3","2015-08-31 18:43:33","","2","","","","","2015-01-10 18:50:35",""
"27879936","Why do i have a wrong (sha1) immediate startcom certificate in my chain on azure website?","My immediate certificate on https://paper-shape.com got a weak signature algorithm SHA1: https://www.ssllabs.com/ssltest/analyze.html?d=paper-shape.com
I followed theses instructions. I created my pfx file both per OpenSSL and per certificate export wizard.
The CRT and pem (immediate certificate from startcom) seem to be ok, because the following command shows ""Signature Algorithm: sha256WithRSAEncryption"" on both (CRT and PEM):

$ openssl x509 -text -in paper-shape.com.crt

Either something went wrong during my pfx creation process or azure website overrules my immediate certificate.
Has anybody an idea?
","Check your locally-installed certificates (on Windows, 'certmgr.msc'). You may have an old SHA-1-signed copy of the StartCom intermediate certificate which is still valid (say, to 2017) and being used in preference to that provided by the server.
","3083","<azure><ssl-certificate><sha1><azure-web-sites><sha256>","5","6","3","2015-08-31 18:43:33","","2","","","","","2015-01-10 18:50:35",""
"27879936","Why do i have a wrong (sha1) immediate startcom certificate in my chain on azure website?","My immediate certificate on https://paper-shape.com got a weak signature algorithm SHA1: https://www.ssllabs.com/ssltest/analyze.html?d=paper-shape.com
I followed theses instructions. I created my pfx file both per OpenSSL and per certificate export wizard.
The CRT and pem (immediate certificate from startcom) seem to be ok, because the following command shows ""Signature Algorithm: sha256WithRSAEncryption"" on both (CRT and PEM):

$ openssl x509 -text -in paper-shape.com.crt

Either something went wrong during my pfx creation process or azure website overrules my immediate certificate.
Has anybody an idea?
","I have been facing this same problem, I was about to pull my hair out when the certificate seemed to be right in some browsers and OS and in others it claimed I was using SHA-1 and even https://shaaaaaaaaaaaaa.com was telling me that I had a SHA-2 signed crt.
So! Here is a huge thread in StartCom forum about this issue: https://forum.startcom.org/viewtopic.php?f=15&t=15929&st=0&sk=t&sd=a
The thing is that the browser is using an Intermediate crt that is SHA-1 signed.
The solution: you need to configurate the Intermadiate crt in your server!
You can see more details here:
https://sslmate.com/blog/post/chrome_cached_sha1_chains
","3083","<azure><ssl-certificate><sha1><azure-web-sites><sha256>","5","0","3","2015-08-31 18:43:33","","2","","","","","2015-01-10 18:50:35",""
"22383691","Decrypting objects back to original message in sha256 encoding scheme","I'm designing an application where users can save data on the back end at Parse.com. But, I want the data to be encrypted as a part of the privacy policy. So say the user has a message string as ""Hello World"". I'm encrypting it to a hash and uploading it to Parse Object. But, when the user needs it how do I decrypt it back to his end?
Encryption code:
public static string getHashSha256(string text)
    {
        byte[] bytes = Encoding.UTF8.GetBytes(text);
        SHA256Managed hashstring = new SHA256Managed();
        byte[] hash = hashstring.ComputeHash(bytes);
        string hashString = string.Empty;
        foreach (byte x in hash)
        {
            hashString += String.Format(""{0:x2}"", x);
        }
        return hashString;
    }

Other possible methods to achieve same is highly appreciated. thanks
","The purpose of a hash function is to have a simple/fast function that can compute the hash of a string, but a very hard time to go from hash --> string. 
You don't want SHA256 here, you want some sort of real encryption/decryption such as AES.
","3064","<c#><encryption><sha256>","0","4","3","2014-03-13 15:53:08","22383750","6","","2811860","","2014-03-13 15:45:49","2014-03-13 15:41:39",""
"22383691","Decrypting objects back to original message in sha256 encoding scheme","I'm designing an application where users can save data on the back end at Parse.com. But, I want the data to be encrypted as a part of the privacy policy. So say the user has a message string as ""Hello World"". I'm encrypting it to a hash and uploading it to Parse Object. But, when the user needs it how do I decrypt it back to his end?
Encryption code:
public static string getHashSha256(string text)
    {
        byte[] bytes = Encoding.UTF8.GetBytes(text);
        SHA256Managed hashstring = new SHA256Managed();
        byte[] hash = hashstring.ComputeHash(bytes);
        string hashString = string.Empty;
        foreach (byte x in hash)
        {
            hashString += String.Format(""{0:x2}"", x);
        }
        return hashString;
    }

Other possible methods to achieve same is highly appreciated. thanks
","Hashing is one way, for say like passwords, where you get a password from a user, hash it and check with an already saved hash.
Encryptions can be decrypted. They are two different things.
Try AES for encryption, if you are using .NET there is AESManaged and AES Cryptoservice provider.
For govt. installations FIPS compliance of your algorithm is required. which is the cryptoserviveprovider in this case. Please check your requirements as well.
","3064","<c#><encryption><sha256>","0","0","3","2014-03-13 15:53:08","22383750","6","","2811860","","2014-03-13 15:45:49","2014-03-13 15:41:39",""
"22383691","Decrypting objects back to original message in sha256 encoding scheme","I'm designing an application where users can save data on the back end at Parse.com. But, I want the data to be encrypted as a part of the privacy policy. So say the user has a message string as ""Hello World"". I'm encrypting it to a hash and uploading it to Parse Object. But, when the user needs it how do I decrypt it back to his end?
Encryption code:
public static string getHashSha256(string text)
    {
        byte[] bytes = Encoding.UTF8.GetBytes(text);
        SHA256Managed hashstring = new SHA256Managed();
        byte[] hash = hashstring.ComputeHash(bytes);
        string hashString = string.Empty;
        foreach (byte x in hash)
        {
            hashString += String.Format(""{0:x2}"", x);
        }
        return hashString;
    }

Other possible methods to achieve same is highly appreciated. thanks
","SHA256 is the wrong way to do this.
If you want a symmetric algorithm, where you have the same key for encryption and decryption you can take a look at:

Rijndael
AES
DES
TripleDES

For an asymetric algorithm, where you have different keys for encryption and decryption, you can take a look at RSA
If you need an example, just let me/us know
","3064","<c#><encryption><sha256>","0","0","3","2014-03-13 15:53:08","22383750","6","","2811860","","2014-03-13 15:45:49","2014-03-13 15:41:39",""
"16436903","no module _sha256 installing cellProfiler","I'm trying to install cellprofiler for developpers on linux and get a ""no module named _sha256"" error. I looked on a few blogs to find a solutions but nothing worked, can someone help me to fix this?
here's my configuration :
Python 2.7.3 (default, Aug  1 2012, 05:16:07) 
[GCC 4.6.3] on linux2

linux :
uname -m
i686

Distributor ID: Ubuntu
Description:    Ubuntu 12.04.2 LTS
Release:        12.04
Codename:       precise

and here is the error I get:
local@pc-ellenberg23:~/Softwares/cellProfiler/CellProfiler$ make -f Makefile.CP2 PREFIX=""${HOME}/usr/cp2""
All pre-checks executed successfully.
export PATH=""/home/local/usr/cp2/bin:/usr/lib/lightdm/lightdm:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/lib/jvm/java-7-openjdk-i386/bin:/usr/lib/jvm/java-7-openjdk-i386/bin:/usr/lib/jvm/java-7-openjdk-i386/bin"" && \
                    export LD_LIBRARY_PATH=""/home/local/usr/cp2/lib:${LD_LIBRARY_PATH}"" && \
                    sh setuptools-0.6c11-py2.6.egg --prefix=""/home/local/usr/cp2""
Traceback (most recent call last):
  File ""<string>"", line 1, in <module>
  File ""/home/local/Softwares/cellProfiler/CellProfiler/setuptools-0.6c11-py2.6.egg/setuptools/command/easy_install.py"", line 21, in <module>
  File ""/home/local/Softwares/cellProfiler/CellProfiler/setuptools-0.6c11-py2.6.egg/setuptools/package_index.py"", line 2, in <module>
  File ""/home/local/usr/cp2/lib/python2.6/urllib2.py"", line 93, in <module>
    import hashlib
  File ""/home/local/usr/cp2/lib/python2.6/hashlib.py"", line 138, in <module>
    sha224 = __get_builtin_constructor('sha224')
  File ""/home/local/usr/cp2/lib/python2.6/hashlib.py"", line 66, in __get_builtin_constructor
    import _sha256
ImportError: No module named _sha256
make: *** [/home/local/usr/cp2/bin/easy_install] Error 1

sorry if the error seems silly, i'm new on dealing with error message on linux installations
Thanks you very much
","You are missing a library dependency for the hashlib module.
On Ubuntu, you need to install the libsasl2-dev and libssl-dev packages, then recompile (make -f Makefile.CP2 clean; make -f Makefile.CP2 PREFIX=""${HOME}/usr/cp2""
) the CellProfiler dependencies.
","3063","<python><sha256><hashlib>","2","5","2","2013-05-14 13:50:35","16545044","1","","","","","2013-05-08 09:18:48",""
"16436903","no module _sha256 installing cellProfiler","I'm trying to install cellprofiler for developpers on linux and get a ""no module named _sha256"" error. I looked on a few blogs to find a solutions but nothing worked, can someone help me to fix this?
here's my configuration :
Python 2.7.3 (default, Aug  1 2012, 05:16:07) 
[GCC 4.6.3] on linux2

linux :
uname -m
i686

Distributor ID: Ubuntu
Description:    Ubuntu 12.04.2 LTS
Release:        12.04
Codename:       precise

and here is the error I get:
local@pc-ellenberg23:~/Softwares/cellProfiler/CellProfiler$ make -f Makefile.CP2 PREFIX=""${HOME}/usr/cp2""
All pre-checks executed successfully.
export PATH=""/home/local/usr/cp2/bin:/usr/lib/lightdm/lightdm:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/lib/jvm/java-7-openjdk-i386/bin:/usr/lib/jvm/java-7-openjdk-i386/bin:/usr/lib/jvm/java-7-openjdk-i386/bin"" && \
                    export LD_LIBRARY_PATH=""/home/local/usr/cp2/lib:${LD_LIBRARY_PATH}"" && \
                    sh setuptools-0.6c11-py2.6.egg --prefix=""/home/local/usr/cp2""
Traceback (most recent call last):
  File ""<string>"", line 1, in <module>
  File ""/home/local/Softwares/cellProfiler/CellProfiler/setuptools-0.6c11-py2.6.egg/setuptools/command/easy_install.py"", line 21, in <module>
  File ""/home/local/Softwares/cellProfiler/CellProfiler/setuptools-0.6c11-py2.6.egg/setuptools/package_index.py"", line 2, in <module>
  File ""/home/local/usr/cp2/lib/python2.6/urllib2.py"", line 93, in <module>
    import hashlib
  File ""/home/local/usr/cp2/lib/python2.6/hashlib.py"", line 138, in <module>
    sha224 = __get_builtin_constructor('sha224')
  File ""/home/local/usr/cp2/lib/python2.6/hashlib.py"", line 66, in __get_builtin_constructor
    import _sha256
ImportError: No module named _sha256
make: *** [/home/local/usr/cp2/bin/easy_install] Error 1

sorry if the error seems silly, i'm new on dealing with error message on linux installations
Thanks you very much
","I finally installed it manually, without using their makefile (installing all the dependencies, and executing the cellprofiler.py file. I had to change their code a litle bit (they use the system environment variable and it produces an error (searching my libjvm.so file in the wrong path(i386 instead of i686))
 It seems to generate the path for the libjvm.so file automatically from the java_home variable but in my case, the path created was wrong, (generated path : /usr/lib/jvm/java-6-openjdk-i386/jre/lib/i686/server/libjvm.so and the real path was: /usr/lib/jvm/java-6-openjdk-i386/jre/lib/i386/server/libjvm.so)
hope this will help if someone has the same problem.
Please let me know if someone found the solution for the _sha256 error.
","3063","<python><sha256><hashlib>","2","1","2","2013-05-14 13:50:35","16545044","1","","","","","2013-05-08 09:18:48",""
"38912801","how to make confirm password validation cakephp with hashing it","I'm using cakephp 2.xx, I want to hashing password with sha256 before it going to database,
before it I wanna make validation value password in my form input, validation which check password input and re-confirm password is match, if In my controller, when form catch validation, the password automatically hash
if ($this->request->data['Driver']['password'] != $this->request->data['Driver']['confirm_password']) {
      $this->request->data['Driver']['password'] = hash('sha256',$this->request->data['Driver']['password']);
}

necessarily, the password hash when form no catch validate at all, so how can I make validation in my model ? 
Thanks In Advance.
","In your model (Driver.php)
Validation
<?php 
    public $validate = array(

        'password' => array(
            'notempty' => array(
                'rule' => array('notempty'),                            
            ),
            'password_confirm'=>array(
                'rule'=>array('password_confirm'),
                'message'=>'Password Confirmation must match Password',                         
            ),    
        ),      
    );
?>

Custom validation rule
<?php 
    public function password_confirm(){ 
        if ($this->data['Driver']['password'] !== $this->data['Driver']['password_confirmation']){
            return false;       
        }
        return true;
    }
?>

Hashing,but I think that better to choose AuthComponent
<?php 
    public function beforeSave($options = array()) {        
        $this->data['Driver']['password'] = hash('sha256',$this->data['Driver']['password']);   
        return true;        
    }
?>

It's overall description and you probably would need to modify some parts of it
","3052","<php><validation><cakephp><hash><sha256>","0","4","1","2016-08-12 09:38:18","38914736","0","1","5096691","","2016-08-12 08:13:24","2016-08-12 07:57:14",""
"15018206","Java - SHA-256 hashing : Invalid AES key length : 64 bytes","public static String doGenerate() {
    int val = 10000000;
    Random r = new Random();
    int gen = r.nextInt(89999999);
    int gen1 = r.nextInt(89999999);
    gen = val + gen;
    gen1 = val + gen1;
    String reply = gen + """" + gen1;
    return reply;
}

This is the method I use to generate a key I need for the AES algorithm given below.
public static void decryptFile(String keyString, String fileName){
    try {
        KeyGenerator kgen = KeyGenerator.getInstance(""AES"");
        kgen.init(128);
        SecretKey key = (SecretKey) new SecretKeySpec(
            keyString.getBytes(), ""AES"");// kgen.generateKey();

        AESEncrypter encrypter = new AESEncrypter(key);

        encrypter.decrypt(new FileInputStream(
            new java.io.File("""").getCanonicalFile() +
            File.separator + ""Received""+
            File.separator + fileName),
            new FileOutputStream(new java.io.File("""").getCanonicalFile() +
            File.separator + ""Decrypted"" + 
            File.separator + fileName));
    } catch (Exception e) {
        e.printStackTrace();
    }
}

This is the AESEncrypter method.
  public AESEncrypter(SecretKey key) {
    // Create an 8-byte initialization vector
    byte[] iv = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
            0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };

    AlgorithmParameterSpec paramSpec = new IvParameterSpec(iv);
    try {
        ecipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        dcipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");

        // CBC requires an initialization vector
        ecipher.init(Cipher.ENCRYPT_MODE, key, paramSpec);
        dcipher.init(Cipher.DECRYPT_MODE, key, paramSpec);
    } catch (Exception e) {
        e.printStackTrace();
    }
}

After decrypting I get an invalid key exception: java.security.InvalidKeyException: Invalid AES key length: 64 bytes. Why is this happening? Is there a solution for this?
","Your key generation function is flawed - it produces only integers and converts those to strings, massively reducing the available key space and weakening your keys significantly. 
However, it does produce 16 byte values which are suitable for AES keys. I can only assume you've changed your code since you last received the error message?
I strongly recommend you revert to just using the KeyGenerator to produce your AES keys. That will do so in a secure fashion.
","3050","<java><aes><sha256>","1","1","1","2013-02-22 08:14:32","15019646","1","2","2095964","","2013-02-22 06:57:26","2013-02-22 06:29:01",""
"30666648","Why SHA256 hashes finish with "" = ""?","I've made a Webservice which returns a security Token after a successful authentification.
However when debugging I noticed that every hash the webservice returned finishes with ""="" such as:
""tINH0JxmryvB6pRkEii1iBYP7FRedDqIEs0Ppbw83oc=""
""INv7q72C1HvIixY1qmt5tNASFBEc0PnXRSb780Y5aeI=""
""QkM8Kog8TtCczysDmKu6ZOjwwYlcR2biiUzxkb3uBio=""
""6eNuCU6RBkwKMmVV6Mhm0Q0ehJ8Qo5SqcGm3LIl62uQ=""
""dAPKN8aHl5tgKpmx9vNoYvXfAdF+76G4S+L+ep+TzU=""
""O5qQNLEjmmgCIB0TOsNOPCHiquq8ALbHHLcWvWhMuI=""
""N9ERYp+i7yhEblAjaKaS3qf9uvMja0odC7ERYllHCI=""
""wsBTpxyNLVLbJEbMttFdSfOwv6W9rXba4GGodVVxgo=""
""sr+nF83THUjYcjzRVQbnDFUQVTkuZOZYe3D3bmF1D8=""
""9EosvgyYOG5a136S54HVmmebwiBJJ8a3qGVWD878j5k=""
""8ORZmAXZ4dlWeaMOsyxAFphwKh9SeimwBzf8eYqTis=""
""gVepn2Up5rjVplJUvDHtgIeaBL+X6TPzm2j9O2JTDFI=""

Why such a behavior ?
","These strings are encoded using base64,  = characters are used as paddings, to make the last block of a base64 string contains four characters.

The following Ruby code could be used to get base64 decoded string:
require 'base64'

s = ""tINH0JxmryvB6pRkEii1iBYP7FRedDqIEs0Ppbw83oc=""
puts Base64.decode64(s).bytes.map{|e| '%02x' % e}.join

Output: b48347d09c66af2bc1ea94641228b588160fec545e743a8812cd0fa5bc3cde87
","3022","<base64><behavior><sha256>","6","6","2","2015-06-05 23:10:23","30666838","6","1","","user1220978","2015-06-05 23:10:23","2015-06-05 12:31:29",""
"30666648","Why SHA256 hashes finish with "" = ""?","I've made a Webservice which returns a security Token after a successful authentification.
However when debugging I noticed that every hash the webservice returned finishes with ""="" such as:
""tINH0JxmryvB6pRkEii1iBYP7FRedDqIEs0Ppbw83oc=""
""INv7q72C1HvIixY1qmt5tNASFBEc0PnXRSb780Y5aeI=""
""QkM8Kog8TtCczysDmKu6ZOjwwYlcR2biiUzxkb3uBio=""
""6eNuCU6RBkwKMmVV6Mhm0Q0ehJ8Qo5SqcGm3LIl62uQ=""
""dAPKN8aHl5tgKpmx9vNoYvXfAdF+76G4S+L+ep+TzU=""
""O5qQNLEjmmgCIB0TOsNOPCHiquq8ALbHHLcWvWhMuI=""
""N9ERYp+i7yhEblAjaKaS3qf9uvMja0odC7ERYllHCI=""
""wsBTpxyNLVLbJEbMttFdSfOwv6W9rXba4GGodVVxgo=""
""sr+nF83THUjYcjzRVQbnDFUQVTkuZOZYe3D3bmF1D8=""
""9EosvgyYOG5a136S54HVmmebwiBJJ8a3qGVWD878j5k=""
""8ORZmAXZ4dlWeaMOsyxAFphwKh9SeimwBzf8eYqTis=""
""gVepn2Up5rjVplJUvDHtgIeaBL+X6TPzm2j9O2JTDFI=""

Why such a behavior ?
","This is because you don't see the raw bytes of the hash but rather the Base64 encoding.
Base64-encoding converts a block of 3 bytes to a block of four characters. This works well if the number of bytes is divisible by 3. If it is not, then you use a padding-character so the number of resulting characters is still divisible by 4.
So:
(no of bytes)%3 = 0  => no padding needed
(no of bytes)%3 = 1  => pad with ==
(no of bytes)%3 = 2  => pad with =

A SHA256-hash is 256 bit, that's 32 bytes. So you will get 40 characters for the first 30 bytes, 3 characters for the last 2 bytes and the padding will always be one =.
","3022","<base64><behavior><sha256>","6","14","2","2015-06-05 23:10:23","30666838","6","1","","user1220978","2015-06-05 23:10:23","2015-06-05 12:31:29",""
"26234075","File encryption using symmetric key","I'm trying to cipher files using symmetric key. Since I'm not able to o this, I'm doing some tests using the file (.txt) content and ciphering that same content using symmetric key and everything works fine:
filename1 = raw_input(""Insert file name: "")
with open(filename1,'rb') as f:
    s = f.read()

data1 = s


# insert password to create key

password1 = raw_input('Enter password (symmetric key): ')

# generate 16bytes (AES-128) key from inserted password
h1 = SHA256.new()
h1.update(password1)
key1 = h1.digest()[0:16]

# generate initialization 16bytes vector
iv1 = Random.new().read(16)

# criptogram creation (cipher data)
cipher1 = AES.new(key1, AES.MODE_CFB, iv1)
criptogram1 = iv1 + cipher1.encrypt(data1) 

But, what I need is to use the symmetric key ciphering to cipher files, not just the content like I'm doing at the moment. I need to be able to choose the file and then use the symmetric key in it.
Edit: For ""cipher files, not just the content""? I mean that I can encrypt something inside a .txt file, something written in it, but I want to be able to encrypt 'directly' the file, I don't want to open it and read what is inside and then encrypt that...
The example that I post, I'm entering a file name (e.g. xpto.txt) wich has something written inside (e.g. Hello world!), so in the example I'm just encrypting that content.
I want to get a file encrypted with out have to read what is inside of it. Because if I try to encrypt a picture, I'm not going to read inside it like in a .txt file, I want to get the entire file and encrypt it.
","If I got it right - You are able to encrypt something in current file, but You don't know how to, let's say, run script from ""myfile1.py"" which will encrypt lines from ""myfile2.txt""?
Well just read lines in the first file from the second file with command like:
with open('myfile2.txt') as myfile:
    mytext = myfile.readlines()

and then do encryption on mytext.
","3007","<python><encryption><sha256><encryption-symmetric>","-2","0","2","2014-10-07 21:20:27","","6","","3970839","","2014-10-07 12:38:51","2014-10-07 10:37:29",""
"26234075","File encryption using symmetric key","I'm trying to cipher files using symmetric key. Since I'm not able to o this, I'm doing some tests using the file (.txt) content and ciphering that same content using symmetric key and everything works fine:
filename1 = raw_input(""Insert file name: "")
with open(filename1,'rb') as f:
    s = f.read()

data1 = s


# insert password to create key

password1 = raw_input('Enter password (symmetric key): ')

# generate 16bytes (AES-128) key from inserted password
h1 = SHA256.new()
h1.update(password1)
key1 = h1.digest()[0:16]

# generate initialization 16bytes vector
iv1 = Random.new().read(16)

# criptogram creation (cipher data)
cipher1 = AES.new(key1, AES.MODE_CFB, iv1)
criptogram1 = iv1 + cipher1.encrypt(data1) 

But, what I need is to use the symmetric key ciphering to cipher files, not just the content like I'm doing at the moment. I need to be able to choose the file and then use the symmetric key in it.
Edit: For ""cipher files, not just the content""? I mean that I can encrypt something inside a .txt file, something written in it, but I want to be able to encrypt 'directly' the file, I don't want to open it and read what is inside and then encrypt that...
The example that I post, I'm entering a file name (e.g. xpto.txt) wich has something written inside (e.g. Hello world!), so in the example I'm just encrypting that content.
I want to get a file encrypted with out have to read what is inside of it. Because if I try to encrypt a picture, I'm not going to read inside it like in a .txt file, I want to get the entire file and encrypt it.
","After some research I managed to find a solution:
#read binary file to get bytes 
    while True:
        buf = fo.read(1024) #read 1024bytes from the file on each iteration of the loop 
        if len(buf) == 0:
             break

    fo.close()


    # insert password to create key

    password1 = raw_input('Enter password (symmetric key): ')

    # generate 16bytes (AES-128) key from inserted password
    h1 = SHA256.new()
    h1.update(password1)
    key1 = h1.digest()[0:16]

    # generate initialization 16bytes vector
    iv1 = Random.new().read(16)

    # criptogram creation (cipher data)
    cipher1 = AES.new(key1, AES.MODE_CFB, iv1)
    criptogram1 = iv1 + cipher1.encrypt(buf)

","3007","<python><encryption><sha256><encryption-symmetric>","-2","0","2","2014-10-07 21:20:27","","6","","3970839","","2014-10-07 12:38:51","2014-10-07 10:37:29",""
"5292938","Does Free Pascal have a way to implement SHA256 or SHA512?","In the Free Pascal libraries there's a hash library that enables use of MD5 and SHA1 hashing algorithms (http://wiki.freepascal.org/hash). But what if I wanted to use a higher one, such as SHA256 or SHA512? Could I achieve this using Free Pascal? Searching the FP Wiki retunrs zero hits for SHA256\SHA512. 
","For other hashes I use ""Delphi Encryption Compendium (DEC) 5.2"". I don't know if it works with FPC, but you should try. There is THash_SHA512 and THash_SHA256.
Download it from: http://www.torry.net/pages.php?id=519#939342
","2974","<freepascal><sha256><sha512>","4","1","3","2017-08-17 13:21:17","5361922","1","","1000551","","2017-08-17 13:21:17","2011-03-13 22:36:08",""
"5292938","Does Free Pascal have a way to implement SHA256 or SHA512?","In the Free Pascal libraries there's a hash library that enables use of MD5 and SHA1 hashing algorithms (http://wiki.freepascal.org/hash). But what if I wanted to use a higher one, such as SHA256 or SHA512? Could I achieve this using Free Pascal? Searching the FP Wiki retunrs zero hits for SHA256\SHA512. 
","In recent versions (say 2 years or so), there is a package ""hash"" with units ""sha1"" and ""md5"" that implement some basic hashes and checksums
If you need more, most people use DCPCrypt as it is easily converted
http://www.cityinthesky.co.uk/opensource/dcpcrypt
At least I see regularly posts on the lists that people are using it
","2974","<freepascal><sha256><sha512>","4","5","3","2017-08-17 13:21:17","5361922","1","","1000551","","2017-08-17 13:21:17","2011-03-13 22:36:08",""
"5292938","Does Free Pascal have a way to implement SHA256 or SHA512?","In the Free Pascal libraries there's a hash library that enables use of MD5 and SHA1 hashing algorithms (http://wiki.freepascal.org/hash). But what if I wanted to use a higher one, such as SHA256 or SHA512? Could I achieve this using Free Pascal? Searching the FP Wiki retunrs zero hits for SHA256\SHA512. 
","In Google codesearch I found several units that implement it in pascal. 
Query: sha256 | sha512 lang:pascal
One of the sources is from Double Commander, which is a norton/total commander clone that's developed with FreePascal and Lazarus, so there you go.
","2974","<freepascal><sha256><sha512>","4","3","3","2017-08-17 13:21:17","5361922","1","","1000551","","2017-08-17 13:21:17","2011-03-13 22:36:08",""
"7461819","What is the C++ equivalent of PHP's hash_hmac function?","I'm porting a PHP application to C++. The PHP application is using this function:

hash_hmac — Generate a keyed hash value using the HMAC method

If I have this code, what is it actually doing?
$sStr = hash_hmac ('sha256', $mydata,$mykey, $raw = true)

I know it encrypts some data using sha256 and my key, but how can I perform this in C++?
I've found the hmac and sha2 libraries, but am not sure if they are what I need.
","I would consider looking into OpenSSL, a portable and complete cryptographic library (despite its name, it doesn't just do SSL).  It has an HMAC library which you can surely wrap to get similar function.
Here's an example on how to use OpenSSL' HMAC library, taken from another question on StackOverflow (annotations mine):
  // Initialize HMAC object.
HMAC_CTX ctx;
HMAC_CTX_init(&ctx);

  // Set HMAC key.
HMAC_Init_ex(&ctx, key, 16, EVP_sha256(), NULL);

  // May be called repeatedly to insert all your data.
HMAC_Update(&ctx, data, 8);

  // Finish HMAC computation and fetch result.
HMAC_Final(&ctx, result, &result_len);

  // Done with HMAC object.
HMAC_CTX_cleanup(&ctx);

","2972","<php><c++><porting><sha256>","5","16","1","2012-07-12 17:28:10","7461837","2","2","367456","","2012-07-12 17:28:10","2011-09-18 13:38:21",""
"3172536","Issues with Python hashlib.sha256 (2.4.3)","So I have some code:
signature = hmac.new(
    key=AWS_SECRET_ACCESS_KEY,
    msg=string_to_sign,
    digestmod=hashlib.sha256).digest()

That runs perfectly on my own computer (has python 2.6.1). However, when I run this code on my server (Python 2.4.3) I get the following:
 /home/MYUSERNAME/public_html/Foo.com/cgi-bin/foo.py
   66     key=AWS_SECRET_ACCESS_KEY,
   67     msg=string_to_sign,
   68     digestmod=hashlib.sha1).digest()
   69  
   70 # Base64 encode the signature
digestmod = <built-in function openssl_sha256>, hashlib = <module 'hashlib' from '/usr/lib/python2.4/site-...shlib-20081119-py2.4-linux-i686.egg/hashlib.pyc'>, hashlib.sha1 = <built-in function openssl_sha1>, ).digest undefined
 /usr/lib/python2.4/hmac.py in new(key='xR6MsC/+Vc2xkd0YYbER0meR/IkWEU', msg='GET\necs.amazonaws.com\n/onca/xml\nAWSAccessKeyId=A...CommerceService&Timestamp=2010-07-03T18%3A56%3A48', digestmod=<built-in function openssl_sha1>)
  103     You can now feed arbitrary strings into the object using its update()
  104     method, and can ask for the hash value at any time by calling its digest()
  105     method.
  106     """"""
  107     return HMAC(key, msg, digestmod)
global HMAC = <class hmac.HMAC>, key = 'xR6MsC/+Vc2xkd0YYbER0meR/IkWEU', msg = 'GET\necs.amazonaws.com\n/onca/xml\nAWSAccessKeyId=A...CommerceService&Timestamp=2010-07-03T18%3A56%3A48', digestmod = <built-in function openssl_sha1>
 /usr/lib/python2.4/hmac.py in __init__(self=<hmac.HMAC instance>, key='xR6MsC/+Vc2xkd0YYbER0meR/IkWEU', msg='GET\necs.amazonaws.com\n/onca/xml\nAWSAccessKeyId=A...CommerceService&Timestamp=2010-07-03T18%3A56%3A48', digestmod=<built-in function openssl_sha1>)
   40 
   41         self.digestmod = digestmod
   42         self.outer = digestmod.new()
   43         self.inner = digestmod.new()
   44         self.digest_size = digestmod.digest_size
self = <hmac.HMAC instance>, self.outer undefined, digestmod = <built-in function openssl_sha1>, digestmod.new undefined

AttributeError: 'builtin_function_or_method' object has no attribute 'new'
      args = (""'builtin_function_or_method' object has no attribute 'new'"",) 

I know the obvious response is to just update Python on my server, but my host has to do that and I don;t know how long it'll take. I'm just curious if this is a common/known issue on 2.4.3 or if something else is going on.
Thanks
","hashlib is new in 2.5. You'll need the backport for older versions of Python.
","2967","<python><sha256><hashlib>","0","0","2","2011-12-31 23:54:11","3172558","0","","382718","","2010-07-03 19:13:57","2010-07-03 19:03:14",""
"3172536","Issues with Python hashlib.sha256 (2.4.3)","So I have some code:
signature = hmac.new(
    key=AWS_SECRET_ACCESS_KEY,
    msg=string_to_sign,
    digestmod=hashlib.sha256).digest()

That runs perfectly on my own computer (has python 2.6.1). However, when I run this code on my server (Python 2.4.3) I get the following:
 /home/MYUSERNAME/public_html/Foo.com/cgi-bin/foo.py
   66     key=AWS_SECRET_ACCESS_KEY,
   67     msg=string_to_sign,
   68     digestmod=hashlib.sha1).digest()
   69  
   70 # Base64 encode the signature
digestmod = <built-in function openssl_sha256>, hashlib = <module 'hashlib' from '/usr/lib/python2.4/site-...shlib-20081119-py2.4-linux-i686.egg/hashlib.pyc'>, hashlib.sha1 = <built-in function openssl_sha1>, ).digest undefined
 /usr/lib/python2.4/hmac.py in new(key='xR6MsC/+Vc2xkd0YYbER0meR/IkWEU', msg='GET\necs.amazonaws.com\n/onca/xml\nAWSAccessKeyId=A...CommerceService&Timestamp=2010-07-03T18%3A56%3A48', digestmod=<built-in function openssl_sha1>)
  103     You can now feed arbitrary strings into the object using its update()
  104     method, and can ask for the hash value at any time by calling its digest()
  105     method.
  106     """"""
  107     return HMAC(key, msg, digestmod)
global HMAC = <class hmac.HMAC>, key = 'xR6MsC/+Vc2xkd0YYbER0meR/IkWEU', msg = 'GET\necs.amazonaws.com\n/onca/xml\nAWSAccessKeyId=A...CommerceService&Timestamp=2010-07-03T18%3A56%3A48', digestmod = <built-in function openssl_sha1>
 /usr/lib/python2.4/hmac.py in __init__(self=<hmac.HMAC instance>, key='xR6MsC/+Vc2xkd0YYbER0meR/IkWEU', msg='GET\necs.amazonaws.com\n/onca/xml\nAWSAccessKeyId=A...CommerceService&Timestamp=2010-07-03T18%3A56%3A48', digestmod=<built-in function openssl_sha1>)
   40 
   41         self.digestmod = digestmod
   42         self.outer = digestmod.new()
   43         self.inner = digestmod.new()
   44         self.digest_size = digestmod.digest_size
self = <hmac.HMAC instance>, self.outer undefined, digestmod = <built-in function openssl_sha1>, digestmod.new undefined

AttributeError: 'builtin_function_or_method' object has no attribute 'new'
      args = (""'builtin_function_or_method' object has no attribute 'new'"",) 

I know the obvious response is to just update Python on my server, but my host has to do that and I don;t know how long it'll take. I'm just curious if this is a common/known issue on 2.4.3 or if something else is going on.
Thanks
","This is a hack to make hashlib backport work with hmac on python 2.4:
class mysha256:
    digest_size = 32
    def new(self, inp=''):
        return hashlib.sha256(inp)

and use hmac like this:
signature = hmac.new(
    key=AWS_SECRET_ACCESS_KEY,
    msg=string_to_sign,
    digestmod=mysha256()).digest()

","2967","<python><sha256><hashlib>","0","0","2","2011-12-31 23:54:11","3172558","0","","382718","","2010-07-03 19:13:57","2010-07-03 19:03:14",""
"26538588","How to sha256 hash a variable in Python","I am having trouble using sha256 hash for a variable. Here is my code 
var = 'password'
hashedWord = sha256(b var).hexdigest()
print(hashedWord)

I know it would be easier to do this
hashedWord = sha256(b'password').hexdigest()
print(hashedWord)

but I don't want to do it that way. Can anyone help?
","You need to encode strings to bytes:
var = 'password'
hashedWord = sha256(var.encode('ascii')).hexdigest()

Pick an encoding that works for your text; UTF-8 can encode all of Unicode but that may not produce the hash signature you are looking for; this depends on what other systems think the signature is.
","2896","<python><sha256>","0","2","2","2014-10-23 22:39:35","26538632","0","1","","","","2014-10-23 22:31:59",""
"26538588","How to sha256 hash a variable in Python","I am having trouble using sha256 hash for a variable. Here is my code 
var = 'password'
hashedWord = sha256(b var).hexdigest()
print(hashedWord)

I know it would be easier to do this
hashedWord = sha256(b'password').hexdigest()
print(hashedWord)

but I don't want to do it that way. Can anyone help?
","An alternative to Martijn's solution would be to store a byte string in the var variable.
var = b'password'
hashedWord = sha256(var).hexdigest()
print(hashedWord)
","2896","<python><sha256>","0","1","2","2014-10-23 22:39:35","26538632","0","1","","","","2014-10-23 22:31:59",""
"5581308","Code hash function over data in form - already have function but don't know where to call","I have form in my html page
<form id=""login_form"" method=""POST"" action=""index.php"">
    <table>
        <tr>
            <td><label style=""color:#47A3FF;"" for=""name"" title=""User name"">
                Username</label></td>
            <td><input style=""color:#47A3FF;"" dojoType=""dijit.form.TextBox""
                type=""text"" name=""username""></td>
        </tr>
        <tr>
            <td><label style=""color:#47A3FF;"" for=""loc"">Password: </label></td>
            <td><input style=""color:#47A3FF;"" dojoType=""dijit.form.TextBox""
                type=""password"" name=""password""></td>
        </tr>
        <tr>
            <td colspan=""2"" align=""center"">
                <button dojoType=""dijit.form.Button""  class=""soria"" style=""border: 1px solid black; float:right;""
                type=""submit"">Login</button></td>
        </tr>
    </table>
</form>

Do I need to use SHA256 when I send username and password over network ? How to use SHA256 over those data ( I have function sha256_hash which use string and return hashed value, but I don't know where to call that function ) ?
","You should hash the desired values when the form is submitted.
I guess something like this should work : 
HTML
<form onsubmit=""return myOnSubmit(this);"">

JavaScript
function myOnSubmit(aForm) {
    //Getting the two input objects
    var inputUsername = aForm['username'];
    var inputPassword = aForm['password'];

    //Hashing the values before submitting
    inputUsername.value = sha256_hash(inputUsername.value);
    inputPassword.value = sha256_hash(inputPassword.value);

    //Submitting
    return true;
}

EDIT : 
Because of the 'Hashing the values before submitting' part, it will not work if you have a maxlength property, because hashed values are much longer than just the clear password.
If you MUST use a maximum length, then you would need to implement HIDDEN FIELDS and changing those values, and making sure the fields containing the clear data aren't submitted (outside of the <FORM> tag).
","2877","<javascript><html><post><sha256>","3","3","2","2011-04-08 09:28:33","5581461","0","","464257","","2011-04-07 12:55:41","2011-04-07 12:50:16",""
"5581308","Code hash function over data in form - already have function but don't know where to call","I have form in my html page
<form id=""login_form"" method=""POST"" action=""index.php"">
    <table>
        <tr>
            <td><label style=""color:#47A3FF;"" for=""name"" title=""User name"">
                Username</label></td>
            <td><input style=""color:#47A3FF;"" dojoType=""dijit.form.TextBox""
                type=""text"" name=""username""></td>
        </tr>
        <tr>
            <td><label style=""color:#47A3FF;"" for=""loc"">Password: </label></td>
            <td><input style=""color:#47A3FF;"" dojoType=""dijit.form.TextBox""
                type=""password"" name=""password""></td>
        </tr>
        <tr>
            <td colspan=""2"" align=""center"">
                <button dojoType=""dijit.form.Button""  class=""soria"" style=""border: 1px solid black; float:right;""
                type=""submit"">Login</button></td>
        </tr>
    </table>
</form>

Do I need to use SHA256 when I send username and password over network ? How to use SHA256 over those data ( I have function sha256_hash which use string and return hashed value, but I don't know where to call that function ) ?
","<button dojoType=""dijit.form.Button""  class=""soria"" style=""border: 1px solid black; float:right;"" type=""submit"" onclick=""username.value=sha256_hash(username.value);password.value=sha256_hash(password.value)"">Login</button></td>

Generally when you send sensitive data, you have only to worry about password, so you can hash password and leave user as it.
","2877","<javascript><html><post><sha256>","3","1","2","2011-04-08 09:28:33","5581461","0","","464257","","2011-04-07 12:55:41","2011-04-07 12:50:16",""
"10317494","Accessing MS CryptoAPI with java","I was trying to make good use of the MS CAPI, and stumped into a great mischief... The SunMSCapi provider only, hmm, provides, per lack of better word, at least for signature, the following algorithms:    

MD2withRSA
MD5withRSA
SHA1withRSA    

And I am not eager to make use of algorithms such GOST3411withECGOST3410, or RIPEMD128withRSA, that BouncyCastle makes use, but it would be nice, and in this particular case, quite important if not essential, to be able to sign in, at least, the SHA256withRSA algorithm... (the 512 and so on and ECDSA encryption, would be a big plus, but i don't expect that much).
I am trying to find an alternative, but only found this wrapper, which looks fine, but I have to dig it a little more.
Does anyone knows another way, wrapper or provider to access mscapi (cryptoapi)?

Related:

SunMSCapi doc:
http://docs.oracle.com/javase/6/docs/technotes/guides/security/SunProviders.html#SunMSCAPI
Request for SHA256withRSA:
http://bugs.sun.com/view_bug.do?bug_id=6753664

","Take a look at RSA bsafe share which supports RSA with SHA-256.
","2859","<java><sha256><cryptoapi><mscapi>","8","1","2","2015-06-09 03:09:16","","5","2","608639","","2015-06-09 03:09:16","2012-04-25 14:11:26",""
"10317494","Accessing MS CryptoAPI with java","I was trying to make good use of the MS CAPI, and stumped into a great mischief... The SunMSCapi provider only, hmm, provides, per lack of better word, at least for signature, the following algorithms:    

MD2withRSA
MD5withRSA
SHA1withRSA    

And I am not eager to make use of algorithms such GOST3411withECGOST3410, or RIPEMD128withRSA, that BouncyCastle makes use, but it would be nice, and in this particular case, quite important if not essential, to be able to sign in, at least, the SHA256withRSA algorithm... (the 512 and so on and ECDSA encryption, would be a big plus, but i don't expect that much).
I am trying to find an alternative, but only found this wrapper, which looks fine, but I have to dig it a little more.
Does anyone knows another way, wrapper or provider to access mscapi (cryptoapi)?

Related:

SunMSCapi doc:
http://docs.oracle.com/javase/6/docs/technotes/guides/security/SunProviders.html#SunMSCAPI
Request for SHA256withRSA:
http://bugs.sun.com/view_bug.do?bug_id=6753664

","Java is cross platform, if you choose SunMSCapi, you can only run on windows with JDK 6+, and if want SHA256withRSA, you need run on JDK7+, it is there.
check code RSASignature.SHA256
","2859","<java><sha256><cryptoapi><mscapi>","8","1","2","2015-06-09 03:09:16","","5","2","608639","","2015-06-09 03:09:16","2012-04-25 14:11:26",""
"31351312","Is there an built-in way or plugin to get Jenkins to produce SHA256 hashes for my artifacts?","My new corporate overlords require that I have an SHA256 hash of each artifact on the customer portal. Of course, I can generate this myself or do it in build script or Makefile, but this feels like the sort of thing Jenkins would be able to do.
","Please take a look at the Jenkins Fingerprint Plugin (link). It can generate MD5 hashes for your build artefacts, and show those in the Jenkins UI. Unfortunately it doesn't generate SHA256 hashes for your artefacts.
","2805","<jenkins><build><jenkins-plugins><sha256>","3","0","2","2018-10-08 15:28:36","","2","","69401","","2015-07-11 18:42:01","2015-07-10 22:31:15",""
"31351312","Is there an built-in way or plugin to get Jenkins to produce SHA256 hashes for my artifacts?","My new corporate overlords require that I have an SHA256 hash of each artifact on the customer portal. Of course, I can generate this myself or do it in build script or Makefile, but this feels like the sort of thing Jenkins would be able to do.
","If your builds are running on Unix/Linux, from your Pipeline/Jenkinsfile, you can shell out to sha256sum:
sha256sum = sh(returnStdout: true, script: ""sha256sum '${fileName}'"")

If your builds are running on Windows, you can shell out to Get-FileHash (I haven't tested this):
sha256sum = powershell(
  returnStdout: true, 
  script: ""Get-FileHash -Algorithm sha256 -Path '${fileName}' | Select -ExpandProperty Hash""
)

","2805","<jenkins><build><jenkins-plugins><sha256>","3","3","2","2018-10-08 15:28:36","","2","","69401","","2015-07-11 18:42:01","2015-07-10 22:31:15",""
"13792514","How to convert a SHA256RSA signed Server certificate to SHA1RSA?","I am generating a private key with tomcat keystore. After the certificate request is generated and submitted, the server certificate seems to have signature SHA256RSA algorithm and eventually gives a ""cannot establish chain from reply error"". The root and intermediate certificates are all SHA1RSA.  While generating the key pair and certificate request it has been specified as SHA1RSA to be the signature algorithm.
Could anyone assist as in how to generate the server certificate with SHA256RSA?
Here are the steps I followed (broken into multiple lines for readability):
keytool -genkey -dname ""CN=xxxx, OU=Servers, O=xx, C=US"" \
    -alias tomcat -keyalg RSA -sigalg SHA1withRSA -keysize 2048 \
    -keypass xxx -keystore tomcat2k.keystore

keytool -certreq -v -alias tomcat -keyalg RSA -sigalg SHA1withRSA \
    -keysize 2048 -keypass xxx -file certreq.csr -keystore tomcat2k.keystore

Certificates received: Root, Intermediate (Both SHA1RSA), and Sever(SHA256RSA)
Root.
Intermediate gets imported.  Server Certificate fails to establish the chain.
","If you have access to openssl, I recommend to use that instead of keytool. If you generate a certificate signing request, use the option -sha256 to set the hashing algorithm you are looking for. 
First generate a certificate signing request:
$ openssl genrsa -des3 -out server.key 4096
$ openssl req -new -key server.key -out server.csr -sha256

Have the certificate signing request signed by you CA of choice. If you want a self signed certificate you can use the following, otherwise skip this step:
$ openssl genrsa -des3 -out ca.key 4096
$ openssl req -new -x509 -days 365 -key ca.key -out ca.pem
$ openssl x509 -req -days 365 -in server.csr -CA ca.pem -CAkey ca.key -set_serial 01 -out server.pem

Finally, convert the certificates signed server.pem certificate to p7b, which is what tomcat expects, and then import the p7b in the tomcat keystore.
$ openssl crl2pkcs7 -nocrl -certfile server.pem -out tomcat2k.p7b -certfile ca.pem
$ keytool -import -trustcacerts -alias server -file tomcat2k.p7b -keystore tomcat2k.jks

","2759","<tomcat><ssl-certificate><rsa><keystore><sha256>","4","0","1","2015-04-20 07:51:49","","1","","248065","","2012-12-10 00:00:42","2012-12-09 22:26:28",""
"16993486","How to programmatically calculate Chrome extension ID?","I'm building an automated process to produce extensions. Is there a code example of calculating the extension-ID directly and entirely bypassing interaction with the browser?
(I'm answering my own question, below.)
","I was only able to find a related article with a Ruby fragment, and it's only available in the IA: http://web.archive.org/web/20120606044635/http://supercollider.dk/2010/01/calculating-chrome-extension-id-from-your-private-key-233
Important to know:

This depends on a DER-encoded public key (raw binary), not a PEM-encoded key (nice ASCII generated by base64-encoding the DER key).
The extension-IDs are base-16, but are encoded using [a-p] (called ""mpdecimal""), rather than [0-9a-f].

Using a PEM-encoded public key, follow the following steps:

If your PEM-formatted public-key still has the header and footer and is split into multiple lines, reformat it by hand so that you have a single string of characters that excludes the header and footer, and runs together such that every line of the key wraps to the next.
Base64-decode the public key to render a DER-formatted public-key.
Generate a SHA256 hex-digest of the DER-formatted key.
Take the first 32-bytes of the hash. You will not need the rest.
For each character, convert it to base-10, and add the ASCII code for 'a'.

The following is a Python routine to do this:
import hashlib
from base64 import b64decode

def build_id(pub_key_pem):
    pub_key_der = b64decode(pub_key_pem)
    sha = hashlib.sha256(pub_key_der).hexdigest()
    prefix = sha[:32]

    reencoded = """"
    ord_a = ord('a')
    for old_char in prefix:
        code = int(old_char, 16)
        new_char = chr(ord_a + code)

        reencoded += new_char

    return reencoded

def main():
    pub_key = 'MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCjvF5pjuK8gRaw/2LoRYi37QqRd48B/FeO9yFtT6ueY84z/u0NrJ/xbPFc9OCGBi8RKIblVvcbY0ySGqdmp0QsUr/oXN0b06GL4iB8rMhlO082HhMzrClV8OKRJ+eJNhNBl8viwmtJs3MN0x9ljA4HQLaAPBA9a14IUKLjP0pWuwIDAQAB'

    id_ = build_id(pub_key)
    print(id_)

if __name__ == '__main__':
    main()

You're more than welcome to test this against an existing extension and its ID. To retrieve its PEM-formatted public-key:

Go into the list of your existing extensions in Chrome. Grab the extension-ID of one.
Find the directory where the extension is hosted. On my Windows 7 box, it is: C:\Users\\AppData\Local\Google\Chrome\User Data\Default\Extensions\
Grab the public-key from the manifest.json file under ""key"". Since the key is already ready to be base64-decoded, you can skip step (1) of the process.

The public-key in the example is from the ""Chrome Reader"" extension. Its extension ID is ""lojpenhmoajbiciapkjkiekmobleogjc"".
See also:

Google Chrome - Alphanumeric hashes to identify extensions
http://blog.roomanna.com/12-14-2010/getting-an-extensions-id

","2747","<python><google-chrome><google-chrome-extension><sha256>","8","9","3","2018-09-10 17:56:24","16993487","0","5","706421","","2013-06-07 21:55:48","2013-06-07 21:48:20",""
"16993486","How to programmatically calculate Chrome extension ID?","I'm building an automated process to produce extensions. Is there a code example of calculating the extension-ID directly and entirely bypassing interaction with the browser?
(I'm answering my own question, below.)
","A nice and simple way to get the public key from the .crx file using python, since chrome only generates the private .pem key for you. The public key is actually stored in the .crx file.
This is based on the format of the .crx file found here http://developer.chrome.com/extensions/crx.html
import struct
import hashlib
import string

def get_pub_key_from_crx(crx_file):
    with open(crx_file, 'rb') as f:
        data = f.read()
    header = struct.unpack('<4sIII', data[:16])
    pubkey = struct.unpack('<%ds' % header[2], data[16:16+header[2]])[0]
    return pubkey

def get_extension_id(crx_file):
    pubkey = get_pub_key_from_crx(crx_file)
    digest = hashlib.sha256(pubkey).hexdigest()

    trans = string.maketrans('0123456789abcdef', string.ascii_lowercase[:16])
    return string.translate(digest[:32], trans)

if __name__ == '__main__':
    import sys
    if len(sys.argv) != 2:
        print 'usage: %s crx_file' % sys.argv[0]

    print get_extension_id(sys.argv[1])

Although this isn't possible to do ""bypassing interaction with the browser"", because you still need to generate the .crx file with a command like
chrome.exe --pack-extension=my_extension --pack-extension-key=my_extension.pem

","2747","<python><google-chrome><google-chrome-extension><sha256>","8","3","3","2018-09-10 17:56:24","16993487","0","5","706421","","2013-06-07 21:55:48","2013-06-07 21:48:20",""
"16993486","How to programmatically calculate Chrome extension ID?","I'm building an automated process to produce extensions. Is there a code example of calculating the extension-ID directly and entirely bypassing interaction with the browser?
(I'm answering my own question, below.)
","Starting with Chrome 64, Chrome changed the package format for extensions to the CRX₃ file format, which supports multiple signatures and explicitly declares its CRX ID. Extracting the CRX ID from a CRX₃ file requires parsing a protocol buffer.
Here is a small python script for extracting the ID from a CRX₃ file.
This solution should only be used with trusted CRX₃ files or in contexts where security is not a concern: unlike CRX₂, the package format does not restrict what CRX ID a CRX₃ file declares. (In practice, consumers of the file (i.e. Chrome) will place restrictions upon it, such as requiring the file to be signed with at least one key that hashes to the declared CRX ID).
import binascii
import string
import struct
import sys

def decode(proto, data):
    index = 0
    length = len(data)
    msg = dict()
    while index < length:
        item = 128
        key = 0
        left = 0
        while item & 128:
            item = data[index]
            index += 1
            value = (item & 127) << left
            key += value
            left += 7
        field = key >> 3
        wire = key & 7
        if wire == 0:
            item = 128
            num = 0
            left = 0
            while item & 128:
                item = data[index]
                index += 1
                value = (item & 127) << left
                num += value
                left += 7
            continue
        elif wire == 1:
            index += 8
            continue
        elif wire == 2:
            item = 128
            _length = 0
            left = 0
            while item & 128:
                item = data[index]
                index += 1
                value = (item & 127) << left
                _length += value
                left += 7
            last = index
            index += _length
            item = data[last:index]
            if field not in proto:
                continue
            msg[proto[field]] = item
            continue
        elif wire == 5:
            index += 4
            continue
        raise ValueError(
            'invalid wire type: {wire}'.format(wire=wire)
        )
    return msg

def get_extension_id(crx_file):
    with open(crx_file, 'rb') as f:
      f.read(8); # 'Cr24\0\0\0\3'
      data = f.read(struct.unpack('<I', f.read(4))[0])
    crx3 = decode(
        {10000: ""signed_header_data""},
        [ord(d) for d in data])
    signed_header = decode(
        {1: ""crx_id""},
        crx3['signed_header_data'])
    return string.translate(
        binascii.hexlify(bytearray(signed_header['crx_id'])),
        string.maketrans('0123456789abcdef', string.ascii_lowercase[:16]))

def main():
    if len(sys.argv) != 2:
      print 'usage: %s crx_file' % sys.argv[0]
    else:
      print get_extension_id(sys.argv[1])

if __name__ == ""__main__"":
    main()

(Thanks to https://github.com/thelinuxkid/python-protolite for the protobuf parser skeleton.)
","2747","<python><google-chrome><google-chrome-extension><sha256>","8","5","3","2018-09-10 17:56:24","16993487","0","5","706421","","2013-06-07 21:55:48","2013-06-07 21:48:20",""
"7276109","Hash from ""email+salt "" as a token to verify email","I'm verifying user email address. 
The way most people tell  is to create some unique token store it in db and 
send to user.
I'm doing it with just hashing (sha256) email addres with sitewide salt
and sending this hash to user.
Am i missing something or is this enough to verify?
","You can do that and if nobody gets the serverside salt, it's save. In the end it's email validation, and if you don't need to do it for legal reasons, there is no need to make it more complicated.
But it depends on your goals. Do want it to be extra safe? Do you want to be easy to implement? Do you want it easy to maintain? Are you thinking about execution time of your scripts?
BTW: One very nasty thing when having a long link in an email: There may be email cients which break your link, so maybe add the code along with the link and if the code is not completly transfered through the link, have a form where the user can add the code.
","2713","<salt><email-validation><sha256><sha><saltedhash>","2","1","2","2011-11-11 21:55:54","7276292","3","1","631619","","2011-11-11 21:55:54","2011-09-01 20:28:15",""
"7276109","Hash from ""email+salt "" as a token to verify email","I'm verifying user email address. 
The way most people tell  is to create some unique token store it in db and 
send to user.
I'm doing it with just hashing (sha256) email addres with sitewide salt
and sending this hash to user.
Am i missing something or is this enough to verify?
","A couple of things that might be worth a look (or not).
If someone finds out your salt, then they can reconstruct your hashes and flood your system.  In this case you'd want to make sure that a user requested addition of their e-mail address to whatever you're creating.  (That is, I wouldn't get rid of storing the hash in the DB altogether.)
Also, if the salt is the same, the hash will be the same if they request again from that same e-mail address.  Do you want a different hash each time a request is made, even for the same e-mail address?  You could concatenate the server date/time to the e-mail address before you hash it to make it different each time.
","2713","<salt><email-validation><sha256><sha><saltedhash>","2","2","2","2011-11-11 21:55:54","7276292","3","1","631619","","2011-11-11 21:55:54","2011-09-01 20:28:15",""
"39634706","php pack('H*',$securesecret) equivalant in Java","In PHP Without pack function
$message = ""hello world"";
$key = ""7E066"";
echo hash_hmac('SHA256',$message, $key);

I get 0315a69471ebe855e9e221a374b30d8de08dcc833857f964737632698c87278e
In Java 
String data = ""hello world"";
String key  = ""7E066"";
System.out.println(hmacSha(key,data, ""HmacSHA256""));

private static String hmacSha(String KEY, String VALUE, String SHA_TYPE) {
        try {

            SecretKeySpec signingKey = new SecretKeySpec(KEY.getBytes(""UTF-8""), SHA_TYPE);
            Mac mac = Mac.getInstance(SHA_TYPE);
            mac.init(signingKey);
            byte[] rawHmac = mac.doFinal(VALUE.getBytes(""UTF-8""));

            byte[] hexArray = {
                    (byte)'0', (byte)'1', (byte)'2', (byte)'3',
                    (byte)'4', (byte)'5', (byte)'6', (byte)'7',
                    (byte)'8', (byte)'9', (byte)'a', (byte)'b',
                    (byte)'c', (byte)'d', (byte)'e', (byte)'f'
            };
            byte[] hexChars = new byte[rawHmac.length * 2];
            for ( int j = 0; j < rawHmac.length; j++ ) {
                int v = rawHmac[j] & 0xFF;
                hexChars[j * 2] = hexArray[v >>> 4];
                hexChars[j * 2 + 1] = hexArray[v & 0x0F];
            }
            return new String(hexChars);
        }
        catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }

I get 0315a69471ebe855e9e221a374b30d8de08dcc833857f964737632698c87278e too.
In PHP with Pack function
$message = ""hello world"";
$key = ""7E066"";
echo hash_hmac('SHA256',$message, pack('H*',$key));

I get 33e97719c1b98f64bd0394e7fe94f43eae927e15f9eda15aeff0830bc3dd2fc3
I don't understand what pack function does, I can not write same function in Java. Could anyone help me please?
","Try this:
public String pack(String hex) {
    String input = hex.length() % 2 == 0 ? hex : hex  + ""0"";
    StringBuilder output = new StringBuilder();
    for (int i = 0; i < input.length(); i+=2) {
        String str = input.substring(i, i+2);
        output.append((char)Integer.parseInt(str, 16));
    }
    return output.toString();
}

for this data it returns exactly that you need:
    String data = ""hello world"";
    String key  = ""7E066"";
    System.out.println(hmacSha(key,data, ""HmacSHA256""));
    System.out.println(hmacSha(pack(key), data, ""HmacSHA256""));

0315a69471ebe855e9e221a374b30d8de08dcc833857f964737632698c87278e
33e97719c1b98f64bd0394e7fe94f43eae927e15f9eda15aeff0830bc3dd2fc3

The trick is that the pack() PHP function for input hexadecimal string of the odd length shift it to the left,  i.e. add one zero to the right of the value. This is because it is only possible to calculate binary string for even-length input hexadecimal string.
","2712","<java><php><sha256><pack>","2","1","2","2018-09-21 14:10:16","","1","4","2681037","","2016-09-22 09:16:31","2016-09-22 09:05:26",""
"39634706","php pack('H*',$securesecret) equivalant in Java","In PHP Without pack function
$message = ""hello world"";
$key = ""7E066"";
echo hash_hmac('SHA256',$message, $key);

I get 0315a69471ebe855e9e221a374b30d8de08dcc833857f964737632698c87278e
In Java 
String data = ""hello world"";
String key  = ""7E066"";
System.out.println(hmacSha(key,data, ""HmacSHA256""));

private static String hmacSha(String KEY, String VALUE, String SHA_TYPE) {
        try {

            SecretKeySpec signingKey = new SecretKeySpec(KEY.getBytes(""UTF-8""), SHA_TYPE);
            Mac mac = Mac.getInstance(SHA_TYPE);
            mac.init(signingKey);
            byte[] rawHmac = mac.doFinal(VALUE.getBytes(""UTF-8""));

            byte[] hexArray = {
                    (byte)'0', (byte)'1', (byte)'2', (byte)'3',
                    (byte)'4', (byte)'5', (byte)'6', (byte)'7',
                    (byte)'8', (byte)'9', (byte)'a', (byte)'b',
                    (byte)'c', (byte)'d', (byte)'e', (byte)'f'
            };
            byte[] hexChars = new byte[rawHmac.length * 2];
            for ( int j = 0; j < rawHmac.length; j++ ) {
                int v = rawHmac[j] & 0xFF;
                hexChars[j * 2] = hexArray[v >>> 4];
                hexChars[j * 2 + 1] = hexArray[v & 0x0F];
            }
            return new String(hexChars);
        }
        catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }

I get 0315a69471ebe855e9e221a374b30d8de08dcc833857f964737632698c87278e too.
In PHP with Pack function
$message = ""hello world"";
$key = ""7E066"";
echo hash_hmac('SHA256',$message, pack('H*',$key));

I get 33e97719c1b98f64bd0394e7fe94f43eae927e15f9eda15aeff0830bc3dd2fc3
I don't understand what pack function does, I can not write same function in Java. Could anyone help me please?
","In my case work only this:
import org.apache.geronimo.mail.util.Hex;

public class TestEncoding {

    public static void main(String[] args) {
        System.out.println(Hex.decode((""48398018"")));
    }
}

Result: 
H9�
It was equivalent PHP code:
$nonce = 48398018;
pack('H*', $nonce);
echo $nonce;

Result: H9�
","2712","<java><php><sha256><pack>","2","0","2","2018-09-21 14:10:16","","1","4","2681037","","2016-09-22 09:16:31","2016-09-22 09:05:26",""
"10812140","Facebook Signed Request for iOS (HMAC SHA256)","I've been trying to generate HMAC SHA256 for Facebook signed request on iOS for weeks now. I am desperate need of help. 
Facebook signed requests have two parts which are separated by a period. First part is an HMAC256 of the payload while the 2nd part is Base64 encoded string of the payload. I've only been able to recreate the second part.

vlXgu64BQGFSQrY0ZcJBZASMvYvTHu9GQ0YM9rjPSso.eyJhbGdvcml0aG0iOiJITUFDLVNIQTI1NiIsIjAiOiJwYXlsb2FkIn0

I've been using the following code that everybody uses but it's generating a different hash:
#import <CommonCrypto/CommonHMAC.h>
#import ""NSData+Base64.h""

+(NSString*) hmacForSecret:(NSString*)secret data:(NSString*)data {

     const char *cKey  = [secret cStringUsingEncoding:NSASCIIStringEncoding];
     const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];
     unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];

     CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);
     NSData *HMAC = [[NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];

     return [HMAC base64EncodedString];
}

According to Facebook docs:
https://developers.facebook.com/docs/authentication/signed_request/
Correct HMAC256 output should be when using ""secret"" as the key: 
 vlXgu64BQGFSQrY0ZcJBZASMvYvTHu9GQ0YM9rjPSso

The payload to be encoded:
 {
     ""algorithm"": ""HMAC-SHA256"",
     ""0"": ""payload""
 }

NOTE: You can Base64 decode the 2nd part of the signed request to get this payload.
","The problem was with the Base64 encoder. It needs to be encoded as Base64Url see:
http://en.wikipedia.org/wiki/Base64#URL_applications
Here's the modifed base64EncodedString category method:
//NSData+Base64.h
 - (NSString *)base64EncodedString
 {
    size_t outputLength;

    char *outputBuffer = NewBase64Encode([self bytes], [self length], true, &outputLength);
    NSString *result = [[[NSString alloc] initWithBytes:outputBuffer length:outputLength encoding:NSASCIIStringEncoding] autorelease];
    free(outputBuffer);

     NSString *b64PayloadClean = [[result componentsSeparatedByCharactersInSet:[NSCharacterSet newlineCharacterSet]] componentsJoinedByString:@""""];

     //do URL encoding by replacing ""+"" and ""/"" to ""-"" and ""_"" respectively
     b64PayloadClean = [b64PayloadClean stringByReplacingOccurrencesOfString:@""="" withString:@""""];
     b64PayloadClean = [b64PayloadClean stringByReplacingOccurrencesOfString:@""+"" withString:@""-""];
     b64PayloadClean = [b64PayloadClean stringByReplacingOccurrencesOfString:@""/"" withString:@""_""];

    return b64PayloadClean;
 }

","2682","<iphone><objective-c><ios><facebook><sha256>","4","3","1","2012-06-01 02:21:27","10826496","2","4","82976","","2012-06-01 02:21:27","2012-05-30 07:51:59",""
"8668013","Objective C equivalent of MessageDigest in Java?","I'm taking a task converting Java code to Objective C.
This is the code in Java that I have to convert:
private String getHash(String input) 
{
    String ret = null;
    try 
    {
        MessageDigest md = MessageDigest.getInstance(""SHA-256"");

        byte[] bs = md.digest(input.getBytes(""US-ASCII""));


        StringBuffer sb = new StringBuffer();
        for (byte b : bs) 
        {
            String bt = Integer.toHexString(b & 0xff);
            if(bt.length()==1) 
            {
                sb.append(""0"");
            }
            sb.append(bt);
        }
        ret = sb.toString();
    } 
    catch (Exception e) 
    {
    }
    return ret;
}

Specifically, what can I use in Objective C which has the same functionality as the MessageDigest class?
","You want the OpenSSL library. See the answers to generate sha256 with openssl and C++ for an example (the title says C++, but OpenSSL is just a basic C library).
","2626","<java><objective-c><sha256><code-conversion>","8","0","3","2014-05-12 11:52:58","","0","6","50776","","2011-12-29 23:49:05","2011-12-29 12:42:43",""
"8668013","Objective C equivalent of MessageDigest in Java?","I'm taking a task converting Java code to Objective C.
This is the code in Java that I have to convert:
private String getHash(String input) 
{
    String ret = null;
    try 
    {
        MessageDigest md = MessageDigest.getInstance(""SHA-256"");

        byte[] bs = md.digest(input.getBytes(""US-ASCII""));


        StringBuffer sb = new StringBuffer();
        for (byte b : bs) 
        {
            String bt = Integer.toHexString(b & 0xff);
            if(bt.length()==1) 
            {
                sb.append(""0"");
            }
            sb.append(bt);
        }
        ret = sb.toString();
    } 
    catch (Exception e) 
    {
    }
    return ret;
}

Specifically, what can I use in Objective C which has the same functionality as the MessageDigest class?
","I found a apple framework to support SHA-256 in stackoverflow.com. Thx stackoverflow :)
CommonCrypto/CommonDigest.h
and I realized that I can use this function:
CC_SHA256(const void *data, CC_LONG len, unsigned char *md)

CC_SHA256_Final(unsigned char *md, CC_SHA256_CTX *c)

CC_SHA256_Init(CC_SHA256_CTX *c)

CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)

So I can go on my task except this Java code.
byte[] bs = md.digest(input.getBytes(""US-ASCII""));

and I want to know that any Objective C expression of Java circular code below?
for (byte b : bs)

PS : Chuck, I really appreciate for your help. Thank you. :)
","2626","<java><objective-c><sha256><code-conversion>","8","2","3","2014-05-12 11:52:58","","0","6","50776","","2011-12-29 23:49:05","2011-12-29 12:42:43",""
"8668013","Objective C equivalent of MessageDigest in Java?","I'm taking a task converting Java code to Objective C.
This is the code in Java that I have to convert:
private String getHash(String input) 
{
    String ret = null;
    try 
    {
        MessageDigest md = MessageDigest.getInstance(""SHA-256"");

        byte[] bs = md.digest(input.getBytes(""US-ASCII""));


        StringBuffer sb = new StringBuffer();
        for (byte b : bs) 
        {
            String bt = Integer.toHexString(b & 0xff);
            if(bt.length()==1) 
            {
                sb.append(""0"");
            }
            sb.append(bt);
        }
        ret = sb.toString();
    } 
    catch (Exception e) 
    {
    }
    return ret;
}

Specifically, what can I use in Objective C which has the same functionality as the MessageDigest class?
","Something like this:
#import <CommonCrypto/CommonDigest.h>

+(NSString*) sha256:(NSString *)input
{
    const char *s=[input cStringUsingEncoding:NSASCIIStringEncoding];
    NSData *keyData=[NSData dataWithBytes:s length:strlen(s)];

    uint8_t digest[CC_SHA256_DIGEST_LENGTH]={0};
    CC_SHA256(keyData.bytes, keyData.length, digest);
    NSData *out=[NSData dataWithBytes:digest length:CC_SHA256_DIGEST_LENGTH];
    NSString *hash=[out description];
    hash = [hash stringByReplacingOccurrencesOfString:@"" "" withString:@""""];
    hash = [hash stringByReplacingOccurrencesOfString:@""<"" withString:@""""];
    hash = [hash stringByReplacingOccurrencesOfString:@"">"" withString:@""""];
    return hash;
}

","2626","<java><objective-c><sha256><code-conversion>","8","3","3","2014-05-12 11:52:58","","0","6","50776","","2011-12-29 23:49:05","2011-12-29 12:42:43",""
"2486887","encrypt file with SHA256 using C/C++","How can I encode a file using sha256 and c/c++ ???
Thanks!
","SHA 256 stands for Secure Hash Algorithm ! It will only produce the hash of a given file . You can't retrieve the original file from a given hash otherwise hash functions are useless.
If you want to do encryption/decryption AES would be a better solution. Everything you need is in OpenSSL.
","2595","<c><encryption><encode><sha256>","-3","8","2","2012-04-10 15:48:50","2486900","1","","296997","","2012-04-10 15:48:50","2010-03-21 11:33:20",""
"2486887","encrypt file with SHA256 using C/C++","How can I encode a file using sha256 and c/c++ ???
Thanks!
","If you don't know what SHA is for, then you better ask someone who knows this stuff instead of doing it yourself. Even if you use a given library, chances are very high that you will produce snake oil. Security depends on much more than calling some encryption functions.
","2595","<c><encryption><encode><sha256>","-3","2","2","2012-04-10 15:48:50","2486900","1","","296997","","2012-04-10 15:48:50","2010-03-21 11:33:20",""
"10235161","How to iteratively sha256 in Python using native lib (ie hashlib), using byte[] as input and not hex string","Background:  I have an iterative hash algorithm I need to compute from a Python script and a Java web application.
Psuedo code:
hash = sha256(raw)
for x=1 to 64000 hash = sha256(hash)

where hash is a byte array of length 32, and not a hex string of length 64.
The reason I want to keep it in bytes is because, though Python can convert to hex string in between each iteration and keep the processing time under a second, Java takes 3 seconds for the String overhead.
So, the Java code looks like this:
// hash one time...
byte[] result = sha256(raw.getBytes(""UTF-8""));

// then hash 64k-1 more times
for (int x = 0; x < 64000-1; x++) {
  result = sha256(result);
}

// hex encode and print result
StringBuilder sb = new StringBuilder();
Formatter formatter = new Formatter(sb);
for (int i=0; i<buf.length; i++) {
  formatter.format(""%02x"", buf[i]);
}
System.out.println(sb.toString());

And the Python code looks like this:
import hashlib

# hash 1 time...
hasher = hashlib.sha256()
hasher.update(raw)
digest = hasher.digest()

# then hash 64k-1 times
for x in range (0, 64000-1):
  # expect digest is bytes and not hex string
  hasher.update(digest) 
  digest = hasher.digest()
print digest.encode(""hex"")

The Python result calculated the hash on the hex representation of the first digest (String), rather than the raw digest bytes.  So, I get varying outputs.
","Method .update of hasher appends argument to previous text (Python docs). Instead you should create new hasher each time you want to compute digest.
import hashlib

# hash 1 time...
digest = hashlib.sha256(raw).digest()

# then hash 64k-1 times
for x in range(0, 64000-1):
  digest = hashlib.sha256(digest).digest()
print digest.encode(""hex"")

","2570","<java><python><hash><hex><sha256>","2","5","1","2012-04-19 19:24:46","10235301","0","1","","","","2012-04-19 19:15:20",""
"24483668","Android encryption not working (PBKDF2WithHmacSHA256 encryption with AES/CBC/PKCS7Padding)","I am trying to write an encryption code using Cipher Algorithm ""AES/CBC/PKCS7Padding"", HMAC algorithm ""HmacSHA256"" and key derivation algorithm ""PBKDF2WithHmacSHA256"" with the help of android JNCryptor. But it shows:
CryptorException: Failed to generate key from password using PBKDF2WithHmacSHA256 
and 
NoSuchAlgorithmException: SecretKeyFactory PBKDF2WithHmacSHA256 implementation not found
 try {
   SecretKeyFactory factory = SecretKeyFactory
     .getInstance(KEY_DERIVATION_ALGORITHM);
   SecretKey tmp = factory.generateSecret(new PBEKeySpec(password,
     salt, getPBKDFIterations(), AES_256_KEY_SIZE * 8));
   return new SecretKeySpec(tmp.getEncoded(), AES_NAME);
  } catch (GeneralSecurityException e) {
   throw new CryptorException(String.format(
     ""Failed to generate key from password using %s."",
     KEY_DERIVATION_ALGORITHM), e);
  }

any help will be appreciated.
","Apologies for commenting and not realising you were talking about my software, JNCryptor.
You could take a look at a fork of the project, https://github.com/t0mm13b/AndroJNCryptor, which has attempted to make several Android-related improvements to the code. I believe your problem may be addressed in that code base.
As far as I know, there is no Android provider available that offers an algorithm named PBKDF2WithHmacSHA256. Quite frustrating!
","2555","<java><android><encryption><sha256><jncryptor>","2","2","1","2014-07-04 20:29:24","","8","7","474189","","2014-07-04 20:29:24","2014-06-30 05:53:36",""
"27994444","How do I calculate a SHA-256 Tomcat 8 DataSourceRealm compatible hash in Java code?","I'm using Tomcat 8.0.17 with JDK 1.8.0_25. I'm using Derby for the database.
I have a DataSourceRealm working with FORM authentication using SHA-256 digests.
My $WEBAPP/META-INF/context.xml looks like this:
<Context> 
  <ResourceLink global=""jdbc/demo"" name=""jdbc/demo"" type=""javax.sql.DataSource"" />
  <Realm className=""org.apache.catalina.realm.DataSourceRealm""
         digest=""SHA-256""
         dataSourceName=""jdbc/demo""
         userTable=""users"" userNameCol=""user_name"" userCredCol=""user_pass""
         userRoleTable=""user_roles"" roleNameCol=""role_name""/>
</Context> 

When using the digest tool that comes with Tomcat, I can manually update the users.user_pass column in the database with the output of the digest tool and everything works (note -s 0 since Tomcat does not work with salted hashes):
C:\>""%CATALINA_HOME%\bin\digest"" -a SHA-256 -s 0 hotdog
hotdog:$1$35602208e86ac7d6b3a63780a9538a9d1763a646d5b9f3930a0548e0983e0ca6

...

ij> update users set user_pass='$1$35602208e86ac7d6b3a63780a9538a9d1763a646d5b9f3930a0548e0983e0ca6' where user_name='demouser';
1 row inserted/updated/deleted

Now I am able to log in successfully.
Now how do I programmatically (in Java) generate SHA-256 hashed passwords to insert into the database? I've seen many examples of generating SHA-256 hashes and converting the byte string to hex. But the part that is throwing me off is the beginning of the hash when using the digest tool. It always generates hashes with '$' in the beginning. When converting a hash programmatically and encoding in hex, there will never be '$' characters included in the output (since there is no '$' in hex, only 0-F). But Tomcat seems to work fine with the digest tool output (which includes the dollar signs).
","I just tested it and I guess Tomcat just strips off everything up to the second dollar sign from the digest tool output. So I can generate a SHA-256 hash hex string in Java using Apache Commons:
String sha256hex = org.apache.commons.codec.digest.DigestUtils.sha256Hex(password);  

EDIT: so what is the significance of the '$' signs in the hash string that the digest tool is generating? I'm going to guess that it's salt-related?
","2540","<tomcat><datasource><sha256><jdbcrealm>","2","0","3","2017-11-22 13:48:42","","0","4","","","","2015-01-16 23:32:25",""
"27994444","How do I calculate a SHA-256 Tomcat 8 DataSourceRealm compatible hash in Java code?","I'm using Tomcat 8.0.17 with JDK 1.8.0_25. I'm using Derby for the database.
I have a DataSourceRealm working with FORM authentication using SHA-256 digests.
My $WEBAPP/META-INF/context.xml looks like this:
<Context> 
  <ResourceLink global=""jdbc/demo"" name=""jdbc/demo"" type=""javax.sql.DataSource"" />
  <Realm className=""org.apache.catalina.realm.DataSourceRealm""
         digest=""SHA-256""
         dataSourceName=""jdbc/demo""
         userTable=""users"" userNameCol=""user_name"" userCredCol=""user_pass""
         userRoleTable=""user_roles"" roleNameCol=""role_name""/>
</Context> 

When using the digest tool that comes with Tomcat, I can manually update the users.user_pass column in the database with the output of the digest tool and everything works (note -s 0 since Tomcat does not work with salted hashes):
C:\>""%CATALINA_HOME%\bin\digest"" -a SHA-256 -s 0 hotdog
hotdog:$1$35602208e86ac7d6b3a63780a9538a9d1763a646d5b9f3930a0548e0983e0ca6

...

ij> update users set user_pass='$1$35602208e86ac7d6b3a63780a9538a9d1763a646d5b9f3930a0548e0983e0ca6' where user_name='demouser';
1 row inserted/updated/deleted

Now I am able to log in successfully.
Now how do I programmatically (in Java) generate SHA-256 hashed passwords to insert into the database? I've seen many examples of generating SHA-256 hashes and converting the byte string to hex. But the part that is throwing me off is the beginning of the hash when using the digest tool. It always generates hashes with '$' in the beginning. When converting a hash programmatically and encoding in hex, there will never be '$' characters included in the output (since there is no '$' in hex, only 0-F). But Tomcat seems to work fine with the digest tool output (which includes the dollar signs).
","The result of the digester comes out in the format:

password:salt$iterations$digest

For example, password ""1234"", 20 character salt and 10 iterations would yield:

1234:d83beb29c66cd2f021a469875ffd4c608c25d855$10$eab99fbeedfd7d01b94cd3cf8484a99ad671726faa3e5d48c0699b489aa35658

","2540","<tomcat><datasource><sha256><jdbcrealm>","2","3","3","2017-11-22 13:48:42","","0","4","","","","2015-01-16 23:32:25",""
"27994444","How do I calculate a SHA-256 Tomcat 8 DataSourceRealm compatible hash in Java code?","I'm using Tomcat 8.0.17 with JDK 1.8.0_25. I'm using Derby for the database.
I have a DataSourceRealm working with FORM authentication using SHA-256 digests.
My $WEBAPP/META-INF/context.xml looks like this:
<Context> 
  <ResourceLink global=""jdbc/demo"" name=""jdbc/demo"" type=""javax.sql.DataSource"" />
  <Realm className=""org.apache.catalina.realm.DataSourceRealm""
         digest=""SHA-256""
         dataSourceName=""jdbc/demo""
         userTable=""users"" userNameCol=""user_name"" userCredCol=""user_pass""
         userRoleTable=""user_roles"" roleNameCol=""role_name""/>
</Context> 

When using the digest tool that comes with Tomcat, I can manually update the users.user_pass column in the database with the output of the digest tool and everything works (note -s 0 since Tomcat does not work with salted hashes):
C:\>""%CATALINA_HOME%\bin\digest"" -a SHA-256 -s 0 hotdog
hotdog:$1$35602208e86ac7d6b3a63780a9538a9d1763a646d5b9f3930a0548e0983e0ca6

...

ij> update users set user_pass='$1$35602208e86ac7d6b3a63780a9538a9d1763a646d5b9f3930a0548e0983e0ca6' where user_name='demouser';
1 row inserted/updated/deleted

Now I am able to log in successfully.
Now how do I programmatically (in Java) generate SHA-256 hashed passwords to insert into the database? I've seen many examples of generating SHA-256 hashes and converting the byte string to hex. But the part that is throwing me off is the beginning of the hash when using the digest tool. It always generates hashes with '$' in the beginning. When converting a hash programmatically and encoding in hex, there will never be '$' characters included in the output (since there is no '$' in hex, only 0-F). But Tomcat seems to work fine with the digest tool output (which includes the dollar signs).
","
    package testapp;
import java.security.NoSuchAlgorithmException;
import javax.xml.bind.DatatypeConverter;

/**
 *
 * @author Martin
 */
public class TestApp {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /*
        testing how to salted sha-256 like tomcat digest.sh -> credential:salt$iterations$hash
        /usr/local/apache-tomcat-8.0.26/bin/digest.sh -a SHA-256 NonGuesablePassword
NonGuesablePassword:a2eda424107c276748780bca8e7d46256321345e1fd0d0d0bcdbcee72dcc0a4a$1$8f2027b86b0b475be7d09c737995037864a4dbc44d90f24648680169b246a9c7
        */
        String pwd=""NonGuesablePassword"";
        String salt=""a2eda424107c276748780bca8e7d46256321345e1fd0d0d0bcdbcee72dcc0a4a"";
        String hash=""8f2027b86b0b475be7d09c737995037864a4dbc44d90f24648680169b246a9c7"";
         try {
             System.out.println(hash+"" 1st iteration hash"");
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""SHA-256"");

            md.update(DatatypeConverter.parseHexBinary(salt));
            md.update(pwd.getBytes());

        System.out.println(DatatypeConverter.printHexBinary(md.digest())+ "" 1st iteration"") ; // encrypte sha-256 versie
        System.out.println(DatatypeConverter.printHexBinary(md.digest())+ "" 2nd iteration"") ; // encrypte sha-256 versie

        } catch (NoSuchAlgorithmException na) {
            System.out.println(na.getMessage());

        }

    }

}


also: tomcat recognizes the 2 $ signs in the userCredCol field when using digest. Without the $ it uses the unsalted version and that's is equal to a salt size of 0 with 1 iteration eg ""$1$hash"" or ""hash"" are identical.
ALSO: not all tomcats have the same digest version. pe unlike 8.0.26 the 8.0.14 does not have the possibility for sha-256 with salt. putting salted info in userCredCol wil obviously not work.
","2540","<tomcat><datasource><sha256><jdbcrealm>","2","0","3","2017-11-22 13:48:42","","0","4","","","","2015-01-16 23:32:25",""
"18158727","Sha256 with pipe","Step 5-6 of manual:
https://en.bitcoin.it/wiki/Technical_background_of_Bitcoin_addresses
Calculating sha256sum secondly:

5 - Perform SHA-256 hash on the extended RIPEMD-160 result
  445C7A8007A93D8733188288BB320A8FE2DEBD2AE1B47F0F50BC10BAE845C094 
6 - Perform SHA-256 hash on the result of the previous SHA-256 hash
  D61967F63C7DD183914A4AE452C9F6AD5D462CE3D277798075B107615C1A8A30

I try to repeat step 6, but sha256sum is wrong:
# echo -n 445C7A8007A93D8733188288BB320A8FE2DEBD2AE1B47F0F50BC10BAE845C094 | sha256sum
7760845dcfd8c366ae89620be2f368d255d710bc7493628ca0dcded9ca476e5a  -
# echo -n 445C7A8007A93D8733188288BB320A8FE2DEBD2AE1B47F0F50BC10BAE845C094 | openssl sha256 
(stdin)= 7760845dcfd8c366ae89620be2f368d255d710bc7493628ca0dcded9ca476e5

even this wrong too:
# echo 445C7A8007A93D8733188288BB320A8FE2DEBD2AE1B47F0F50BC10BAE845C094 | openssl sha256 
(stdin)= 9edec8be4a03dd9e605f465c60ae4c77c752516f58384016c6c7384028b39f6e

I have read this:
Generating a sha256 from the Linux command line
How to get: D61967F63C7DD183914A4AE452C9F6AD5D462CE3D277798075B107615C1A8A30?
Is wiki wrong?
","You need to hash the raw byte data rather than its ASCII hex dump.
$ echo -n $'\x44\x5C\x7A\x80\x07\xA9\x3D\x87\x33\x18\x82\x88\xBB\x32\x0A\x8F\xE2\xDE\xBD\x2A\xE1\xB4\x7F\x0F\x50\xBC\x10\xBA\xE8\x45\xC0\x94' | sha256sum
d61967f63c7dd183914a4ae452c9f6ad5d462ce3d277798075b107615c1a8a30  -
$ echo -n $'\x44\x5C\x7A\x80\x07\xA9\x3D\x87\x33\x18\x82\x88\xBB\x32\x0A\x8F\xE2\xDE\xBD\x2A\xE1\xB4\x7F\x0F\x50\xBC\x10\xBA\xE8\x45\xC0\x94' | openssl sha256
(stdin)= d61967f63c7dd183914a4ae452c9f6ad5d462ce3d277798075b107615c1a8a30

","2526","<shell><sha256><bitcoin>","1","2","1","2013-08-10 05:02:18","18158784","0","","-1","","2017-05-23 12:05:18","2013-08-10 04:52:18",""
"16265046","Login with custom Java EE Realm","I've created a Java EE Application with glassfish and netbeans.
I installed the custom flexible jdbc Realm from here. 
I followed all the instructions and used the properties which are shown below(both to default and server-config)
datasource.jndi =    jdbc/e-health
sql.seed   = select salt from users where username = ?
sql.groups = select groupname from groups where username =  ?
sql.password = select password from users where username = ?
password.encoding = BASE64
password.digest = SHA-256
jaas.context = myRealm

My first question is where should i create the realm, in default-config or in server-config?
I also created the database(E-Health) with tables: users, groups
users: username, password, salt
groups: groupname, username(fk->users.username)

The reason that i want to use this realm is that i want to encrypt password with salt and with jdbc realm i don't have this option!
My problem is i cant login.
I use net beans IDE and created the login and loginError pages:
LOGIN.JSP :
<%@page contentType=""text/html"" pageEncoding=""UTF-8""%>
<!DOCTYPE html>
<html>
<head>
<meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8"">
<title>Login Page</title>
</head>
<body>
<form action=""j_security_check"" method=""POST"">
Username:<input type=""text"" name=""j_username""><br>
Password:<input type=""password"" name=""j_password"">
<input type=""submit"" value=""Login"">
</form>
</body>
</html>    

I've created a user using this code in the servlet:
if(userPath.equals(""/createUser""))
      {

            String Type = request.getParameter(""user_type"");

            String Id = request.getParameter(""amka"");
            String Name = request.getParameter(""name"");
            String Surname = request.getParameter(""surname"");
            String Nickname = request.getParameter(""nickname"");
            String Pass = request.getParameter(""password"");
            String Email = request.getParameter(""e-mail"");
            String City = request.getParameter(""city"");
            String Street = request.getParameter(""street"");
            String Phone = request.getParameter(""phone"");
            String At = request.getParameter(""at"");
            String Spec = request.getParameter(""spec"");


            //byte[] b_pass = Pass.getBytes(""UTF-8"");                //Κρυπτογράφηση password
            String salt = null;
            String hash=null;

           if (""doctor"".equals(Type))

           {

        //   ID = Integer.parseInt(Id);
               MessageDigest md;
    try {

            Random r = SecureRandom.getInstance(""SHA1PRNG""); 
            salt=new BigInteger(130, r).toString(32);  
            md = MessageDigest.getInstance(""SHA-256""); 
            md.update(salt.getBytes(""UTF-8"")); 
            byte[] digest = md.digest();
            salt=Base64.encodeBase64String(digest);

            md.update(Pass.concat(salt).getBytes(""UTF-8"")); 
            digest = md.digest();
            hash=Base64.encodeBase64String(digest); // μετατροπή σε Base64



            } 
              catch (NoSuchAlgorithmException ex) {
                Logger.getLogger(Servlet.class.getName()).log(Level.SEVERE, null, ex);
            }

           currentUser.setPassword(hash);
           currentUser.setUsername(Nickname);
           currentUser.setSalt(salt);
           UsersFacade.create(currentUser);

           currentGroup.setUsername(currentUser);
           currentGroup.setGroupname(Type);
           GroupsFacade.create(currentGroup);

           /*
           currentDoc.setIddoctors(ID);
           currentDoc.setName(Name);
            currentDoc.setSurname(Surname);
            currentDoc.setNickname(Nickname);
            currentDoc.setEmail(Email);
            currentDoc.setCity(City);
            currentDoc.setStreet(Street);
            currentDoc.setPhone(Phone);
            currentDoc.setSpec(Spec);
            DoctorsFacade.create(currentDoc);
             */

          }

The groups and roles i have created are doctors,pharms,micros,patients,admins.
I've created the roles in the web.xml and glassfish-web.xml:
WEB.XML
<session-config>
    <session-timeout>
        1
    </session-timeout>
</session-config>
<error-page>
    <error-code>500</error-code>
    <location>/WEB-INF/view/error.jsp</location>
</error-page>
<security-constraint>
    <display-name>AdminOnly</display-name>
    <web-resource-collection>
        <web-resource-name>admin</web-resource-name>
        <description/>
        <url-pattern>/admin/*</url-pattern>
    </web-resource-collection>
    <auth-constraint>
        <role-name>admins</role-name>
    </auth-constraint>
</security-constraint>
<security-constraint>
    <display-name>DocOnly</display-name>
    <web-resource-collection>
        <web-resource-name>doctor1</web-resource-name>
        <url-pattern>/view/doc_index.jsp</url-pattern>
    </web-resource-collection>
    <web-resource-collection>
        <web-resource-name>doctor2</web-resource-name>
        <description/>
        <url-pattern>/view/doctor.jsp</url-pattern>
    </web-resource-collection>
    <web-resource-collection>
        <web-resource-name>doctor3</web-resource-name>
        <description/>
        <url-pattern>/view/history.jsp</url-pattern>
    </web-resource-collection>
    <auth-constraint>
        <description/>
        <role-name>doctors</role-name>
    </auth-constraint>
</security-constraint>
<security-constraint>
    <display-name>PharmOnly</display-name>
    <web-resource-collection>
        <web-resource-name>pharm</web-resource-name>
        <description/>
        <url-pattern>/view/pharm.jsp</url-pattern>
    </web-resource-collection>
    <auth-constraint>
        <description/>
        <role-name>pharms</role-name>
    </auth-constraint>
</security-constraint>
<security-constraint>
    <display-name>MicroOnly</display-name>
    <web-resource-collection>
        <web-resource-name>micro</web-resource-name>
        <description/>
        <url-pattern>/view/micro.jsp</url-pattern>
    </web-resource-collection>
    <auth-constraint>
        <description/>
        <role-name>micros</role-name>
    </auth-constraint>
</security-constraint>
<security-constraint>
    <display-name>PatOnly</display-name>
    <web-resource-collection>
        <web-resource-name>patient</web-resource-name>
        <description/>
        <url-pattern>/view/patient.jsp</url-pattern>
    </web-resource-collection>
    <auth-constraint>
        <description/>
        <role-name>patients</role-name>
    </auth-constraint>
</security-constraint>
<login-config>
    <auth-method>FORM</auth-method>
    <realm-name>myRealm</realm-name>
    <form-login-config>
        <form-login-page>/login.jsp</form-login-page>
        <form-error-page>/loginError.html</form-error-page>
    </form-login-config>
</login-config>
<security-role>
    <description/>
    <role-name>admins</role-name>
</security-role>
<security-role>
    <description/>
    <role-name>doctors</role-name>
</security-role>
<security-role>
    <description/>
    <role-name>pharms</role-name>
</security-role>
<security-role>
    <description/>
    <role-name>micros</role-name>
</security-role>
<security-role>
    <description/>
    <role-name>patients</role-name>
</security-role>
<resource-ref>
    <res-ref-name>jdbc/e-health</res-ref-name>
    <res-type>javax.sql.DataSource</res-type>
    <res-auth>Container</res-auth>
    <res-sharing-scope>Shareable</res-sharing-scope>
</resource-ref>
</web-app>

GLASSFISH-WEB.XML
<glassfish-web-app error-url="""">
<security-role-mapping>
<role-name>doctors</role-name>
<group-name>doctors</group-name>
</security-role-mapping>
<security-role-mapping>
<role-name>micros</role-name>
<group-name>micros</group-name>
</security-role-mapping>
<security-role-mapping>
<role-name>pharms</role-name>
<group-name>pharms</group-name>
</security-role-mapping>
 <security-role-mapping>
<role-name>patients</role-name>
<group-name>patients</group-name>
</security-role-mapping>
<security-role-mapping>
<role-name>admins</role-name>
<group-name>admins</group-name>
</security-role-mapping>
<class-loader delegate=""true""/>
<jsp-config>
<property name=""keepgenerated"" value=""true"">
  <description>Keep a copy of the generated servlet class' java code.</description>
</property>
</jsp-config>
</glassfish-web-app>

For start i've created this annotation in the servlet:
@ServletSecurity(
@HttpConstraint(rolesAllowed = {""doctors""}) 
)             

And here's the credentials:
Username:John
Password(with salt):kwkBo2sKjPHPvqFTQReMGS8Cbj8PbAoFxvuk
Salt:4b8mHanRWrI9HitaES4s8x5F05WWFz3IN3+Hjp7XtRg=
and
Username: John
Groupname: doctors 
The encrypted password is: 12345
What have i done wrong?
I put in the form the credentials: John/12345 and error page is shown.
Do i have to decrypt some way the password? Doesn't this work by the realm itself?
","","2500","<java-ee><glassfish><salt><sha256><jdbcrealm>","0","","0","2013-04-30 14:27:38","","6","4","","","","2013-04-28 16:30:54",""
"14568728","SHA-256 hashing function in Java ME/J2ME","I've posted this question on the Nokia Developer forums so please bear with me.
I'm writing an app which needs to find the SHA-256 hash of a URL keyed with a unique value – i.e. hmac('sha256', '27/3', '9EWVFmHpHN6n2YKW9QtvUqX3xbsFQUBovlrFddqnF7fpcSDA2q'). What would be the best way to do this in Java ME/J2ME?
I've found many examples using the Mac class but this isn't supported in Java ME/J2ME.
Thanks in advance.
","BouncyCastle's latest J2ME compatible release (the lightweight API) contains among other things an SHA256 implementation - org.bouncycastle.crypto.digests.SHA256Digest - that should work for you.
","2498","<java-me><hmac><sha256>","0","1","2","2014-09-24 12:54:32","14586940","0","1","","","","2013-01-28 18:32:24",""
"14568728","SHA-256 hashing function in Java ME/J2ME","I've posted this question on the Nokia Developer forums so please bear with me.
I'm writing an app which needs to find the SHA-256 hash of a URL keyed with a unique value – i.e. hmac('sha256', '27/3', '9EWVFmHpHN6n2YKW9QtvUqX3xbsFQUBovlrFddqnF7fpcSDA2q'). What would be the best way to do this in Java ME/J2ME?
I've found many examples using the Mac class but this isn't supported in Java ME/J2ME.
Thanks in advance.
","I managed to get things working, the solution is as follows:
Digest  digest = new SHA256Digest();
HMac hmac = new HMac(digest);
hmac.init(new KeyParameter(appKeyHere));
hmac.update(requestURI, 0, lenOfReqURI);
byte[]  resBuf = new byte[digest.getDigestSize()];
hmac.doFinal(resBuf, 0);
String  resStr = new String(Hex.encode(resBuf)); // Contains final usable value

","2498","<java-me><hmac><sha256>","0","3","2","2014-09-24 12:54:32","14586940","0","1","","","","2013-01-28 18:32:24",""
"36692999","how can I encode string in HMAC-SHA256 using pl/sql?","I'm working on REST API authorization in PL/SQL using Oracle database 11g Express Edition. I have api_key, nonce and signature as IN variables for every procedure.
Signature is a HMAC-SHA256 encoded string containing api_secret stored in my database. I want check if signature matching my api_secret in database. 
My question is how can I encode string in HMAC-SHA256 using pl/sql? 
","
There is  SHA256 PL/SQL Implementation for Oracle 10g,11g by CruiserX.
Download the package from here.
Compile the package and package body in sqlplus.
Call the functions like this:
SQL> select sha256.encrypt('test message') from dual;
-- output: 3f0a377ba0a4a460ecb616f6507ce0d8cfa3e704025d4fda3ed0c5ca05468728
SQL> select sha256.encrypt_raw('74657374206D657373616765') from dual;
-- output: 3f0a377ba0a4a460ecb616f6507ce0d8cfa3e704025d4fda3ed0c5ca05468728

","2477","<oracle><plsql><sha256>","2","1","1","2017-07-03 06:30:59","","1","1","","","","2016-04-18 11:43:05",""
"39800989","Cannot invoke initializer for type UnsafeMutablePointer<UInt8>","I'm trying to convert my string into SHA256 hash, but I get the next error:
Cannot invoke initializer for type 'UnsafeMutablePointer<UInt8>' with an argument list of type '(UnsafeMutableRawPointer)'

That's my function:
func SHA256(data: String) -> Data {
    var hash = NSMutableData(length: Int(CC_SHA256_DIGEST_LENGTH))!

    if let newData: Data = data.data(using: .utf8) {
        let bytes = newData.withUnsafeBytes {(bytes: UnsafePointer<CChar>) -> Void in
            CC_SHA256(bytes, CC_LONG(newData.length), UnsafeMutablePointer<UInt8>(hash.mutableBytes))
        }
    }

    return hash as Data
}

so, for this part
UnsafeMutablePointer<UInt8>(hash.mutableBytes)

I get this error:
Cannot invoke initializer for type 'UnsafeMutablePointer<UInt8>' with an argument list of type '(UnsafeMutableRawPointer)'

How can I fix that and what I do wrong?
","You'd better use Data also for the result hash.
In Swift 3, withUnsafePointer(_:) and withUnsafeMutablePointer(:_) are generic types and Swift can infer the Pointee types correctly when used with ""well-formed"" closures, which means you have no need to convert Pointee types manually.
func withUnsafeBytes((UnsafePointer) -> ResultType)
func withUnsafeMutableBytes((UnsafeMutablePointer) -> ResultType)
func SHA256(data: String) -> Data {
    var hash = Data(count: Int(CC_SHA256_DIGEST_LENGTH))

    if let newData: Data = data.data(using: .utf8) {
        _ = hash.withUnsafeMutableBytes {mutableBytes in
            newData.withUnsafeBytes {bytes in
                CC_SHA256(bytes, CC_LONG(newData.count), mutableBytes)
            }
        }
    }

    return hash
}

In Swift 3, the initializers of UnsafePointer and UnsafeMutablePointer, which was used to convert Pointee types till Swift 2, are removed. But in many cases, you can work without type conversions of pointers.
","2467","<ios><swift><hash><swift3><sha256>","4","2","1","2018-05-26 00:11:37","39801746","1","2","","","","2016-09-30 22:31:42",""
"39287830","""Connection closed by peer"" error occurs in Android 7.0 Nougat while connecting to SHA256 CA installed Windows 2003 Server SP2 through HTTPS","My app communicates with server interface (classic ASP) through HTTPS.
It has been workd very well in prior version of Android 7.0 Nougat. (until 6.0)
But, Connection closed by peer Error occurs in Android 7.0 phone and AVD(Android virtual device).
Server is Windows 2003 Server SP2 (SSL Certificate was updated from SHA1 to SHA256 in Jul 23th, 2016), HTTPS, Classic ASP
Server's SSL certificate installation check status of GeoTrust is like below
(cryptoreport.geotrust.com/checker/views/certCheck.jsp)
GeoTrust check status screen shot of my Server's certificate
(Protocols not enabled : TLS1.1, TLS1.2)
In my opinion, Android 7.0 fails SSL handshaking with Windows 2003 Server of TLS1.0(only TLSv1.1, TLSv1.2 can support successful handshaking with SHA256 certificate?)
Is this right?
And I just found this hot fix : http://support.microsoft.com/kb/968730
Is this can be a solution?
How could I fix this problem
","Finally, we changed server to Win 2008...;;
That's the only solution in my opinion.
","2436","<android><https><sha256><sslhandshakeexception><android-7.0-nougat>","5","0","1","2018-07-16 03:38:48","","4","2","6786561","","2016-09-02 08:47:34","2016-09-02 08:32:43",""
"6587125","SHA256 implementation using Base64 for input and output","I've been asked to develop the company's backoffice for the iPad and, while developing the login screen, I've ran into an issue with the authentication process.
The passwords are concatenated with a salt, hashed using SHA-256 and stored in the database.
The backoffice is Flash-based and uses the as3crypto library to hash then password+salt and my problem is that the current implementation uses Base64 for both input and output.
This site demonstrates how this can be done: just select Hash and select Base64 for both input and output format and fire away. So far, all my attempts have yielded different results from the ones this site (and the backoffice code) give me.
While I think that in theory it should be relatively simply:

Base64 encode the pass+salt
Hash it using SHA-256
Base64 encode the result again

so far I haven't been able to do this and I'm getting quite the headache to be honest.
My code is becoming a living maze, i'll have to redo-it tomorrow I reckon.
Any ideas?
Cheers and thanks in advance
PS: Here's the Backoffice's Flash code for generating hashed passwords by the way:
var currentResult:ByteArray;
var hash:IHash = Crypto.getHash('sha256');
var data:ByteArray = Base64.decodeToByteArray(str + vatel);
currentResult = hash.hash(data);
return Base64.encodeByteArray(currentResult).toString();

","The backoffice code does not do

Base64 encode the pass+salt
Hash it using SHA-256
Base64 encode the result again

(as you wrote above) 
Instead, what it does is 

Base64 decode the pass+salt string into a byte array
Hash the byte array using SHA-256
Base64 encode the byte array, returning a string 

As per step 1 above, it's a unclear what kind of character encoding the input strings uses. You need to make sure that both systems use the same encoding for the input strings! UTF8, UTF16-LE or UTF16-BE makes a world of a difference in this case! 
Start by finding out the correct character encoding to use on the iOS side. 
Oh, and Matt Gallagher has written an easy to use wrapper class for hashes to use on iOS, HashValue.m, I've used it with good results. 
","2434","<ios><base64><sha256>","0","1","1","2011-07-06 09:19:23","6594112","1","","","","","2011-07-05 18:24:39",""
"29078785","The request signature we calculated does not match the signature you provided. Check your AWS Secret Access Key and signing method","My test request for Amazon Web Service API is returning with the following error:
<ItemSearchErrorResponse xmlns=""http://ecs.amazonaws.com/doc/2005-10-05/"">
  <Error>
    <Code>SignatureDoesNotMatch</Code>
    <Message>
     The request signature we calculated does not match the signature you provided. Check your AWS Secret Access Key and signing method. Consult the service documentation for details.
    </Message>
  </Error>
  <RequestId>ebe90459-1abd-403e-bfec-6916ebe07e1f</RequestId>
</ItemSearchErrorResponse>

Here is how I arrived at this:
<?php

$private_key = ""XXXXXXXXXXXXXXXXXXXXXX"";
$date = urlencode(date('Y-m-d\TH:i:s.Z\Z', time()));
$string_to_sign = ""GET webservices.amazon.com /onca/xml/ AWSAccessKeyId=XXXXXXXXXXXXXXXXXXXXXXXA&Keywords=Rocket&Operation=ItemSearch&SearchIndex=Toys&Service=AWSECommerceService&Timestamp="".$date."""";
$signature = urlencode(base64_encode(hash_hmac(""sha256"",$string_to_sign, $private_key, True)));
$url = ""http://webservices.amazon.com/onca/xml?AWSAccessKeyId=XXXXXXXXXXXXXXXXXXXXXXXX&Keywords=Rocket&Operation=ItemSearch&SearchIndex=Toys&Service=AWSECommerceService&Timestamp="".$date.""&Signature="".$signature."""";

header(""Location: "".$url."""");

?>

I basically wanted a signed REST request directly in the url (hence the header function) but left me stuck with the error. I double checked my access id and secret key so I know they are not the one causing the problem. Is this not the right way to produce the signature?
","It seems you're trying to use a V2 signature to call the REST API of AWS.
Please refer to the complete AWS REST API call documentation.
My bet is the problem is the absence of SignatureVersion, SignatureMethod and Version in the string before signing. Step five of the documentation linked above shows and example of the string to be signed:
GET\n
elasticmapreduce.amazonaws.com\n
/\n
AWSAccessKeyId=AKIAIOSFODNN7EXAMPLE&Action=DescribeJobFlows&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=2011-10-03T15%3A19%3A30&Version=2009-03-31

","2433","<php><xml><amazon-web-services><amazon><sha256>","0","0","1","2015-03-16 15:35:44","29080859","0","","4188998","","2015-03-16 15:01:13","2015-03-16 14:04:38",""
"9165613","Encryption in nodejs","I'm trying to port the following php code to javascript on node.js:

$mac = hash_hmac('SHA256', 'string', 'secret', true);
$coded = base64_encode($mac);

I've tried the following:

var Crypto = require('crypto');
var code = Crypto.util.bytesToBase64(Crypto.HMAC(Crypto.SHA256, 'string', 'secret', { asBytes: true }));

I get the error: 

TypeError: Object #Object has no method 'HMAC'

I'm new to node.js, what am I doing wrong?
Update:

var code = Crypto.createHmac('SHA256', secret_key).update(to_encode).digest('base64');

","The method is called createHmac
> Crypto = require('crypto');
{ Credentials: [Function: Credentials],
  createCredentials: [Function],
  Hash: [Function],
  createHash: [Function],
  Hmac: [Function],
  createHmac: [Function],
  Cipher: [Function],
  createCipher: [Function],
  createCipheriv: [Function],
  Decipher: [Function],
  createDecipher: [Function],
  createDecipheriv: [Function],
  Sign: [Function],
  createSign: [Function],
  Verify: [Function],
  createVerify: [Function],
  DiffieHellman: [Function],
  createDiffieHellman: [Function],
  pbkdf2: [Function],
  randomBytes: [Function],
  pseudoRandomBytes: [Function],
  rng: [Function],
  prng: [Function] }

","2426","<php><javascript><node.js><base64><sha256>","10","0","2","2012-12-06 17:14:38","9165705","0","2","1067361","","2012-02-06 19:20:45","2012-02-06 18:57:51",""
"9165613","Encryption in nodejs","I'm trying to port the following php code to javascript on node.js:

$mac = hash_hmac('SHA256', 'string', 'secret', true);
$coded = base64_encode($mac);

I've tried the following:

var Crypto = require('crypto');
var code = Crypto.util.bytesToBase64(Crypto.HMAC(Crypto.SHA256, 'string', 'secret', { asBytes: true }));

I get the error: 

TypeError: Object #Object has no method 'HMAC'

I'm new to node.js, what am I doing wrong?
Update:

var code = Crypto.createHmac('SHA256', secret_key).update(to_encode).digest('base64');

","You want to use the createHmac function instead.
Crypto.createHmac(""SHA256"", 'secret').update('string').digest('base64')

","2426","<php><javascript><node.js><base64><sha256>","10","10","2","2012-12-06 17:14:38","9165705","0","2","1067361","","2012-02-06 19:20:45","2012-02-06 18:57:51",""
"50737820","how to decode sha 256 encoded string using jquery/javascript or angular 2/4?","Using sha256.js plugin I can encode string but how to do the reverse process on client side.I want to decode sha256 encoded string using javascript or jquery plugin or npm package in angular 2/4
","You can't decode hash but compare with another string hashed.
You need an encrypted way like AES, RSA, etc. not hash
","2394","<javascript><decode><sha256>","-2","3","1","2018-06-07 11:52:06","50737895","5","1","2225619","","2018-06-07 11:52:06","2018-06-07 09:32:20",""
"18970066","Python - issue comparing two hashes","newbie playing around with hashes here and not getting the result I am looking for. Trying to get a hash from a txt file from the web, then comparing that hash to a local hash.
For testing purposes I'm using  SHA256.new(“10”).hexdigest() which is: 4a44dc15364204a80fe80e9039455cc1608281820fe2b24f1e5233ade6af1dd5 
CODE:
import urllib2
from Crypto.Hash import SHA256

source = urllib2.urlopen(""<xxURLxx>"")
line1 = source.readline()  # get first line of the txt file in source which is the hash

localHash = SHA256.new(""10"").hexdigest()

if localHash == line1: #  I know, shouldnt use == to compare hashes but it is my first try.
   print(""it works!"")
else:
   print(""it does not work..."")

Printing the hashes I get from the web file and the local hash they return the same characters. But if I hash each hash one more time I get different results.
Any ideas?
Had a look around S.O. and found:
Compare result from hexdigest() to a string
but the issue there was the lack of .digest() which I have.
Thank you in advance for any help.
","If I had to guess, I'd say that changing 
line1 = source.readline()

to 
line1 = source.readline().strip()

will fix the problem. strip() removes leading and trailing whitespace, including the newline ('\n') character that will almost certainly be at the end of the first line read by readline.
You can see whether there are ""invisible"" characters like that by using repr, which renders them explicitly using escape characters:
>>> print repr('\t')
'\t'

","2372","<python><hash><urllib2><sha256>","-1","0","1","2013-09-23 22:49:07","","8","2","-1","","2017-05-23 11:54:50","2013-09-23 22:38:49",""
"6424013","Rails: checksum of uploaded files","I am generating the checksum (sha256) of an uploaded image in Ruby on Rails. 
upload = params[:file]
data1 = upload.read
data2 = File.read(upload.tempfile)
checksum1 = Digest::SHA256.hexdigest(data1)
checksum2 = Digest::SHA256.hexdigest(data2)
puts checksum1
puts checksum2

Last two statements are returning different values. 
checksum1 is generated by reading the data using the UploadedFile object.
checksum2 is generated by reading the temporary file from the file system.
Does an object of ActionDispatch::Http::UploadedFile return anything more than the contents of the uploaded file? When I generate the checksum of the uploaded file written to the file-system, it is matching with checksum2 (temporary file checksum) , not with checksum1 (UploadedFile.read).
I am assuming that the checksum generated by reading the temporary file from the filesystem is more reliable as the object (UploadedFile) implementation might change. If needed, it will be easier to generate checksums of existing files on the file system.
So, what is the reason for the difference of checksums and which one is more reliable?
Thank you.

Update 1:
As per @pablo-castellazzi suggestion i generated the hash by using Digest::SHA256.file(upload.path).hexdigest . Let us call this checksum3
This checksum3 equals checksum1 but differs from checksum2

Update 2: If i use the binary mode to read the file as mentioned by @Arsen7 , then all the checksums are equal.
","Have you compared the 'data1' and 'data2' contents? Try to save them to files and take a look.
I suppose, you may want to call upload.rewind before you do the first read, but the first thing is to take a look at the raw data read from the files.
Update:
You did not say that you are on Windows. In this case you should take care and read the files in so-called 'binary' mode.
Change the File.read method to something like this:
data2 = nil
File.open(upload.path, ""rb"") {|f| data2 = f.read }

(Implement Pablo Castellazzi suggestion of using .path method)
I was suggesting that you open the files in some binary-safe editor (vim, for example) and compare what differs. You would notice that maybe most of the data is the same, but in one of the files line endings are different, or maybe you would spot some other differences.
In case of Windows, the most popular problem is the binary mode.
","2361","<ruby-on-rails><windows><file-upload><checksum><sha256>","5","2","2","2011-06-21 13:41:04","6424525","1","2","482728","","2011-06-21 13:41:04","2011-06-21 10:45:21",""
"6424013","Rails: checksum of uploaded files","I am generating the checksum (sha256) of an uploaded image in Ruby on Rails. 
upload = params[:file]
data1 = upload.read
data2 = File.read(upload.tempfile)
checksum1 = Digest::SHA256.hexdigest(data1)
checksum2 = Digest::SHA256.hexdigest(data2)
puts checksum1
puts checksum2

Last two statements are returning different values. 
checksum1 is generated by reading the data using the UploadedFile object.
checksum2 is generated by reading the temporary file from the file system.
Does an object of ActionDispatch::Http::UploadedFile return anything more than the contents of the uploaded file? When I generate the checksum of the uploaded file written to the file-system, it is matching with checksum2 (temporary file checksum) , not with checksum1 (UploadedFile.read).
I am assuming that the checksum generated by reading the temporary file from the filesystem is more reliable as the object (UploadedFile) implementation might change. If needed, it will be easier to generate checksums of existing files on the file system.
So, what is the reason for the difference of checksums and which one is more reliable?
Thank you.

Update 1:
As per @pablo-castellazzi suggestion i generated the hash by using Digest::SHA256.file(upload.path).hexdigest . Let us call this checksum3
This checksum3 equals checksum1 but differs from checksum2

Update 2: If i use the binary mode to read the file as mentioned by @Arsen7 , then all the checksums are equal.
","Assuming you are using Rails 3.x data1 checksum is correct. data2 content should be read with:
data2 = File.read(upload.path)

upload.tempfile is the instance holding the file object, not the path to the temporary file.
Here are the relevant implementation details.
Also this is weird, because File.read(File.read) should throw some kind of exception about a file not found or an invalid file name.
","2361","<ruby-on-rails><windows><file-upload><checksum><sha256>","5","1","2","2011-06-21 13:41:04","6424525","1","2","482728","","2011-06-21 13:41:04","2011-06-21 10:45:21",""
"31928141","is Base64.encodeBase64String() and new String(Base64.encodeBase64() TRUELY the same thing?","I am coding an android app that using sha256 encryption. I try using
String hash = Base64.encodeBase64String(sha256_HMAC.doFinal(message.getBytes())); 

But I I got a runtime error say java.lang.NoSuchMethodError: org.apache.commons.codec.binary.Base64.encodeBase64String. I researched the issue and someone on stack suggested that android as an older version of the org.apache.commons.codec.binary.Base64 implemented and there is a conflict between the version I am using and the the one that android implements so that why that method Base64.encodeBase64String is not found. here is the link to what i found as help java.lang.NoSuchMethodError: org.apache.commons.codec.binary.Base64.encodeBase64String() in Java EE application. The solution was to use 
String hash = new String(Base64.encodeBase64(sha256_HMAC.doFinal(data.getBytes(""UTF-8""))));

I did use that and it seems to work but because the has that I am getting does not match what the server I am working with is expecting. I am wondering if the two are truly equivalent.
I used this link to implement the sha256 http://www.jokecamp.com/blog/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages/#java
Here is my code I am using retrofit library for http method calls:
public static String ComputeHash(String[] dataArray, String privateKey) {

    String hash="""";

    String data = """";

    for (String item : dataArray) {
        data += item;
    }

    try {

        Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
        SecretKeySpec secret_key = new SecretKeySpec(privateKey.getBytes(), ""HmacSHA256"");
        sha256_HMAC.init(secret_key);

        //hash = Base64.encodeBase64String(sha256_HMAC.doFinal(data.getBytes()));
        //hash = Base64.encodeToString(sha256_HMAC.doFinal(data.getBytes(""UTF-8"")), Base64.DEFAULT);
        hash = new String(Base64.encodeBase64(sha256_HMAC.doFinal(data.getBytes(""UTF-8""))));

    } catch (Exception e) {
        Toast.makeText(MyApplication.getAppContext(), ""Error"", Toast.LENGTH_LONG).show();
    }
    return hash;
}

public <S> S createService(Class<S> serviceClass){

    stamp = String.valueOf(System.currentTimeMillis() / 1000);//get the number of seconds since the epoch

    String[] data = new String[]{""thisisatestpublickey"", 1438915015+"""", ""GET""};
    expectedSignature = ComputeHash(data, ""thisistestprivatekey"");

    RequestInterceptor requestInterceptor = new RequestInterceptor() {
        @Override
        public void intercept(RequestFacade request) {
            request.addHeader(""Authorization"", ""Basic YXZlbmdlcnM6bWlnaHR5bWluZHM="");
            request.addHeader(ApplicationConstants.PublicKeyHeaderName, ""thisisatestpublickey"");
            request.addHeader(ApplicationConstants.StampHeaderName, 1438915015+"""");
            request.addHeader(ApplicationConstants.SignatureHeaderName, expectedSignature);

        }
    };


}

","","2360","<android><base64><sha256>","2","","0","2015-08-10 22:50:50","","1","1","-1","","2017-05-23 12:19:23","2015-08-10 20:02:52",""
"26195426","Python to PHP - Base64 encode SHA256","Can anyone help me with converting the following Python script to PHP?
data = json.dumps({'text': 'Hello world'})

content_sha256 = base64.b64encode(SHA256.new(data).digest())

The value of content_sha256 should be

oWVxV3hhr8+LfVEYkv57XxW2R1wdhLsrfu3REAzmS7k=

I have tried to use the base64_encode function, and will only get the desired result if I use the string:
$data_string = ""{\""text\"": \""Hello world\""}"";
base64_encode(hash(""sha256"", $data_string, true));

but I want to get the desired result by using and array, not a quote-escaped string...
","You need to replace python json.dumps with php json_encode
$data_string = json_encode(array('text' => 'Hello world'));
base64_encode(hash(""sha256"", $data_string, true));

Both of these functions take an associative array and transform it into a string representation. It is then the string that you do a hash/base64 encoding on.
","2352","<php><python><sha256>","0","0","2","2014-10-08 17:36:03","26263004","3","0","2565737","","2014-10-04 17:49:23","2014-10-04 17:43:10",""
"26195426","Python to PHP - Base64 encode SHA256","Can anyone help me with converting the following Python script to PHP?
data = json.dumps({'text': 'Hello world'})

content_sha256 = base64.b64encode(SHA256.new(data).digest())

The value of content_sha256 should be

oWVxV3hhr8+LfVEYkv57XxW2R1wdhLsrfu3REAzmS7k=

I have tried to use the base64_encode function, and will only get the desired result if I use the string:
$data_string = ""{\""text\"": \""Hello world\""}"";
base64_encode(hash(""sha256"", $data_string, true));

but I want to get the desired result by using and array, not a quote-escaped string...
","Paul Crovella, you pointed out the correct direction. 
I have to do a string replace on the json encoded variable before I send it through the base64, to get the same string as the one made by Python:
$data_array = array(""text"" => ""Hello world"");
$data_string_json_encoded = json_encode($data_array);
$data_string_json_encoded_with_space_after_colon = str_replace("":"", "": "", $data_string_json_encoded);

$data_string_base64 = base64_encode(hash(""sha256"", $data_string_json_encoded_with_space_after_colon , true));

Then I get the desired result, the same as in the Python script:
oWVxV3hhr8+LfVEYkv57XxW2R1wdhLsrfu3REAzmS7k=
","2352","<php><python><sha256>","0","0","2","2014-10-08 17:36:03","26263004","3","0","2565737","","2014-10-04 17:49:23","2014-10-04 17:43:10",""
"3819712","Is any substring of a hash (md5, sha1) more ""random"" than another?","Here's 3 example md5 hashes
$ md5 -s ""1"" && md5 -s ""2"" && md5 -s ""3""
MD5 (""1"") = c4ca4238a0b923820dcc509a6f75849b
MD5 (""2"") = c81e728d9d4c2f636f067f89cc14862c
MD5 (""3"") = eccbc87e4b5ce2fe28308fd9f2a7baf3

Say I wanted to take 8 characters from any hash. Is the beginning part of the hash particularly more ""random"" than the end? middle? Or are all substrings equally ""random""?
","All substrings of a good hash (and md5 is reasonably good despite being cryptographically unsafe) are equally random, so yes, take any bits you like from the string, they should be equally distributed.
","2352","<md5><sha1><hashcode><sha256>","21","11","4","2018-04-16 01:03:57","3820818","2","3","184600","","2016-04-17 10:04:26","2010-09-29 07:54:23",""
"3819712","Is any substring of a hash (md5, sha1) more ""random"" than another?","Here's 3 example md5 hashes
$ md5 -s ""1"" && md5 -s ""2"" && md5 -s ""3""
MD5 (""1"") = c4ca4238a0b923820dcc509a6f75849b
MD5 (""2"") = c81e728d9d4c2f636f067f89cc14862c
MD5 (""3"") = eccbc87e4b5ce2fe28308fd9f2a7baf3

Say I wanted to take 8 characters from any hash. Is the beginning part of the hash particularly more ""random"" than the end? middle? Or are all substrings equally ""random""?
","I was curious myself, so I went ahead and wrote a program to test this. You'll need Crypto++ to compile the code.
Disclaimer:
When it comes to cryptography, or even just mathematics in general, I know just enough to shoot myself in the foot. So, take the following results with a grain of salt and keep in mind that I only have a cursory knowledge of the tools I'm using.
I only sampled three substrings: the first 8 bytes, the middle 8 bytes, and the last 8 bytes. Long story short, they're equally random.
However, when using a smaller sample space, it appears as if the last 8 bits are slightly more random. The larger the sampling space, the closer all three substrings approach complete randomness.

1000 iterations:
First:  0.995914
Middle: 0.996546
Last:   0.998104

5000 iterations:
First:  0.998387
Middle: 0.998624
Last:   0.999501

10000 iterations:
First:  0.999614
Middle: 0.999457
Last:   1

30000 iterations:
First:  1
Middle: 1
Last:   1


""Randomness"" is measured by Crypto++'s MaurerRandomnessTest class. For reference, the executable compiled from the above code has a randomness value of 0.632411 and a copy of Shakespeare's Macbeth downloaded from Project Gutenburg has a randomness value of 0.566991.
","2352","<md5><sha1><hashcode><sha256>","21","19","4","2018-04-16 01:03:57","3820818","2","3","184600","","2016-04-17 10:04:26","2010-09-29 07:54:23",""
"3819712","Is any substring of a hash (md5, sha1) more ""random"" than another?","Here's 3 example md5 hashes
$ md5 -s ""1"" && md5 -s ""2"" && md5 -s ""3""
MD5 (""1"") = c4ca4238a0b923820dcc509a6f75849b
MD5 (""2"") = c81e728d9d4c2f636f067f89cc14862c
MD5 (""3"") = eccbc87e4b5ce2fe28308fd9f2a7baf3

Say I wanted to take 8 characters from any hash. Is the beginning part of the hash particularly more ""random"" than the end? middle? Or are all substrings equally ""random""?
","Nitpick: ""random"" is the wrong word to use here, since hash functions are deterministic.
As for answering what you mean :), a desirable property of hash functions is achieving the Avalanche effect: basically, to have every bit of input cause drastic changes to the output. So, for a well-designed hash, every substring should be affected equally often (""be as random"") as any other.
","2352","<md5><sha1><hashcode><sha256>","21","11","4","2018-04-16 01:03:57","3820818","2","3","184600","","2016-04-17 10:04:26","2010-09-29 07:54:23",""
"3819712","Is any substring of a hash (md5, sha1) more ""random"" than another?","Here's 3 example md5 hashes
$ md5 -s ""1"" && md5 -s ""2"" && md5 -s ""3""
MD5 (""1"") = c4ca4238a0b923820dcc509a6f75849b
MD5 (""2"") = c81e728d9d4c2f636f067f89cc14862c
MD5 (""3"") = eccbc87e4b5ce2fe28308fd9f2a7baf3

Say I wanted to take 8 characters from any hash. Is the beginning part of the hash particularly more ""random"" than the end? middle? Or are all substrings equally ""random""?
","Measuring the randomness of the output of a hash function can be done using Statistical tests done on pseudo-random number generators.
According to the Handbook of Applied Cryptography §5.4.4 (sample chapters available for free), there are five basic tests:

Frequency test (monobit test)
Serial test (two-bit test)
Poker test
Runs test
Autocorrelation test

Then, of course, there's the Maurer's universal statistical test that kurige has already mentioned.
","2352","<md5><sha1><hashcode><sha256>","21","0","4","2018-04-16 01:03:57","3820818","2","3","184600","","2016-04-17 10:04:26","2010-09-29 07:54:23",""
"42754116","Java and JavaScript same sha256 hex","To get a Java SHA256 hash I use the following method:
public String getSha256(String text, String encoding){
    String sha = """";
    try {
        MessageDigest md = MessageDigest.getInstance(""SHA-256"");

        md.update(text.getBytes(encoding));
        byte[] digest = md.digest();
        sha = new String(digest);
        sha = sha.replace(""\n"", """");
    } catch (NoSuchAlgorithmException | UnsupportedEncodingException ex) {
        Logger.getLogger(Utils.class.getName()).log(Level.SEVERE, null, ex);
    }
    return sha;
}

Like so:
String testValue = getSha256(""test"", ""UTF-8"");

Then to get the HEX value out of it I do the following:
public String getHexFromString(String text){
    String hex = """";
    try {
        byte[] myBytes = text.getBytes(""UTF-8"");
        hex = DatatypeConverter.printHexBinary(myBytes);
    } catch (UnsupportedEncodingException ex) {
        Logger.getLogger(Utils.class.getName()).log(Level.SEVERE, null, ex);
    }
    return hex;
}

System.out.print(getHexFromString(testValue));

The result of this is:
C5B8E280A0C390EFBFBDCB864C7D65C5A12FC3AAC2A0C3855AC39015C2A3C2BF4F1B2B0BE2809A2CC3915D6C15C2B0C3B008

In javascript I do the following (using this library):
var hash = sjcl.hash.sha256.hash(""test"");
console.log(sjcl.codec.hex.fromBits(hash));

And the result is:
9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08

How can I get same hex in Java and Javascript?
What am I doing wrong, is it the Java or Javascript code?
","@JonSkeet was right, changed the method, it now looks like this:
public String getSha256Hex(String text, String encoding){
    String shaHex = """";
    try {
        MessageDigest md = MessageDigest.getInstance(""SHA-256"");

        md.update(text.getBytes(encoding));
        byte[] digest = md.digest();

        shaHex = DatatypeConverter.printHexBinary(digest);
    } catch (NoSuchAlgorithmException | UnsupportedEncodingException ex) {
        Logger.getLogger(Utils.class.getName()).log(Level.SEVERE, null, ex);
    }
    return shaHex;
}

And the result is:
9F86D081884C7D659A2FEAA0C55AD015A3BF4F1B2B0B822CD15D6C15B0F00A08

The only difference is that the Java hex is upper case, but thats a minor thing to solve. 
","2342","<javascript><java><hash><hex><sha256>","2","2","1","2017-03-13 00:28:04","","2","3","","","","2017-03-12 22:45:08",""
"2699903","Unable to verify body hash for DKIM","I'm writing a C# DKIM validator and have come across a problem that I cannot solve. Right now I am working on calculating the body hash, as described in Section 3.7 Computing the Message Hashes. I am working with emails that I have dumped using a modified version of EdgeTransportAsyncLogging sample in the Exchange 2010 Transport Agent SDK. Instead of converting the emails when saving, it just opens a file based on the MessageID and dumps the raw data to disk.
I am able to successfully compute the body hash of the sample email provided in Section A.2 using the following code:
SHA256Managed hasher = new SHA256Managed();
ASCIIEncoding asciiEncoding = new ASCIIEncoding();
string rawFullMessage = File.ReadAllText(@""C:\Repositories\Sample-A.2.txt"");
string headerDelimiter = ""\r\n\r\n"";
int headerEnd = rawFullMessage.IndexOf(headerDelimiter);
string header = rawFullMessage.Substring(0, headerEnd);
string body = rawFullMessage.Substring(headerEnd + headerDelimiter.Length);
byte[] bodyBytes = asciiEncoding.GetBytes(body);
byte[] bodyHash = hasher.ComputeHash(bodyBytes);
string bodyBase64 = Convert.ToBase64String(bodyHash);
string expectedBase64 = ""2jUSOH9NhtVGCQWNr9BrIAPreKQjO6Sn7XIkfJVOzv8="";
Console.WriteLine(""Expected hash: {1}{0}Computed hash: {2}{0}Are equal: {3}"",
  Environment.NewLine, expectedBase64, bodyBase64, expectedBase64 == bodyBase64);

The output from the above code is:
Expected hash: 2jUSOH9NhtVGCQWNr9BrIAPreKQjO6Sn7XIkfJVOzv8=
Computed hash: 2jUSOH9NhtVGCQWNr9BrIAPreKQjO6Sn7XIkfJVOzv8=
Are equal: True

Now, most emails come across with the c=relaxed/relaxed setting, which requires you to do some work on the body and header before hashing and verifying. And while I was working on it (failing to get it to work) I finally came across a message with c=simple/simple which means that you process the whole body as is minus any empty CRLF at the end of the body. (Really, the rules for Body Canonicalization are quite ... simple.)
Here is the real DKIM email (right click and save it, the browsers eat the ending CRLF) with a signature using the simple algorithm (completely unmodified). Now, using the above code and updating the expectedBase64 hash I get the following results:
Expected hash: VnGg12/s7xH3BraeN5LiiN+I2Ul/db5/jZYYgt4wEIw=
Computed hash: ISNNtgnFZxmW6iuey/3Qql5u6nflKPTke4sMXWMxNUw=
Are equal: False

The expected hash is the value from the bh= field of the DKIM-Signature header. Now, the file used in the second test is a direct raw output from the Exchange 2010 Transport Agent. If so inclined, you can view the modified EdgeTransportLogging.txt.
At this point, no matter how I modify the second email, changing the start position or number of CRLF at the end of the file I cannot get the files to match. What worries me is that I have been unable to validate any body hash so far (simple or relaxed) and that it may not be feasible to process DKIM through Exchange 2010.
","I tried this in python-dkim and I get a body hash mismatch too.
I think probably Exchange's GetMimeReadStream is not giving you the actual bytes as they were transmitted, therefore the hash doesn't match.  Probably it's disassembling the message into its mime parts, and then GetMimeReadStream gives you a valid representation of the message, but not the one it was originally sent with.
Perhaps there's another API that will give you the real raw bytes?
Or perhaps by this point in the process the message has been torn apart and the original message thrown away, and you need to hook in earlier.
Probably you should try intercepting a DKIM-signed message by sending it to a non-Exchange server, and see if that works with your code.  GetContentReadStream might possibly work?
Anyhow, what I would do next is try to find an API that gives you byte-for-byte what was sent.
","2341","<c#><.net><validation><sha256><dkim>","2","1","1","2010-06-01 01:22:44","2946809","2","1","57787","","2010-04-23 15:52:40","2010-04-23 15:40:08",""
"17220535",".Net 4.0 C# When loading SHA256 key SignatureAlgorithm changes to SHA1","I'm struggling with this now a whole week and hope someone could help me out.
I need to sign xml using SHA256 and xmldsig. 
For this I use the SignedXML Class. When looking into this class I see it uses the SignatureAlgorithm value of the loaded key to determine what Hashing type to use.
No matter how I load the key(via cert store of via loading cert file) it will show SHA1 as SignatureAlgorithm.
When I look up the details of my Certificate in the MMC cert store, it shows SHA256 as SignatureAlgorithm. 
I tried both openssl and makecert to generate a SHA256 cert key, but both will load as SHA1 in .Net
And so signedXml.ComputeSignature(); will use SHA1 as a SignatureMethod
.Net 4.0 should support SHA256 right?
","Found out that I was probably using the wrong class. 
Instead of Microsoft.Web.Services.Security.SignedXml of should use System.Security.Cryptography.Xml.SignedXml.
The latter doesn't use the SignatureAlgorithm of the used key to determine what Algorithm to use. 
Now I can set the Algorithm myself with 'SignedXml.SignedInfo.SignatureMethod' and use a SHA1 key.
","2312","<c#><.net><sha256><signedxml><xml-dsig>","1","1","2","2015-06-03 12:30:46","17234792","1","","","","","2013-06-20 17:56:46",""
"17220535",".Net 4.0 C# When loading SHA256 key SignatureAlgorithm changes to SHA1","I'm struggling with this now a whole week and hope someone could help me out.
I need to sign xml using SHA256 and xmldsig. 
For this I use the SignedXML Class. When looking into this class I see it uses the SignatureAlgorithm value of the loaded key to determine what Hashing type to use.
No matter how I load the key(via cert store of via loading cert file) it will show SHA1 as SignatureAlgorithm.
When I look up the details of my Certificate in the MMC cert store, it shows SHA256 as SignatureAlgorithm. 
I tried both openssl and makecert to generate a SHA256 cert key, but both will load as SHA1 in .Net
And so signedXml.ComputeSignature(); will use SHA1 as a SignatureMethod
.Net 4.0 should support SHA256 right?
","You have to declare a KeyedHashAlgorithm object and pass a string corresponding to SHA256 (documentation here).

The corresponding string for SHA256 is HMACSHA256

Then pass this object to the ComputeSignature method.

The code should be as follows:
KeyedHashAlgorithm kha = KeyedHashAlgorithm.Create(""HMACSHA256"");
signedXml.ComputeSignature(kha);

","2312","<c#><.net><sha256><signedxml><xml-dsig>","1","0","2","2015-06-03 12:30:46","17234792","1","","","","","2013-06-20 17:56:46",""
"38190999","Create certificates with sha-256 as the hash algorithm in oracle 11g using orapki/wallet manager","I am creating SSL enabled connection between oracle 11g database (11.2.0.1), and java client using thin client jdbc driver (type 4). We are creating the client/server/root certificates using orapki utility and putting the certificates in oracle wallet.
It seems the default hash algorithm for encryption, when we create certificates using orapki utility (in oracle 11g db) is md5. This was working fine, until we upgraded to jdk1.7 u101. This version of jdk no longer supports MD5. So it seems we need to use SHA-256 as the hash algorithm. I keep getting references that oracle wallet manager 11.2.0.1+ supports SHA-256, but I cannot find any documentation on how to specify SHA-256 as the hash algorithm while creating the certificates. 
Is there a way I can generate certificates through orapki/wallet manager with SHA-256 as the hash algorithm?
","You can use orapki with -sign_alg sha256 to sign your certificates with sha256 instead of md5.
For example: Creating a self signed certificate used as the trusted authority
orapki wallet create -wallet ./root -pwd welcome123 -nologo
orapki wallet remove -trusted_cert_all -wallet ./root -pwd welcome123  -nologo
orapki wallet add -wallet ./root -dn CN=Certification\ Authority\ For\ Testing,\ O=MyCompany,\ C=US -keysize 2048 -self_signed -validity 7300 -pwd welcome123 -sign_alg sha256  -nologo
orapki wallet export -wallet ./root -dn CN=Certification\ Authority\ For\ Testing,\ O=MyCompany,\ C=US -cert ./root/rootcertificate.crt -pwd welcome123  -nologo
keytool -printcert -file root/rootcertificate.crt
orapki wallet display -wallet ./root -pwd welcome123  -nologo

And the output is:
Owner: CN=Certification Authority For Testing, O=MyCompany, C=US
Issuer: CN=Certification Authority For Testing, O= MyCompany, C=US
Serial number: 0
Valid from: Wed Mar 09 03:35:42 PST 2016 until: Tue Mar 04 03:35:42 PST 2036
Certificate fingerprints:
     MD5:  D1:EB:E4:27:FB:B1:C9:4A:CB:9D:28:A6:5A:C7:E7:20
     SHA1: 39:DD:C2:4A:EA:97:BD:47:52:8C:E6:B9:2C:97:F9:F4:A8:A4:5E:85
     SHA256: 04:28:19:01:AC:83:C3:69:D0:C9:1C:6A:94:08:B7:31:0C:65:21:7F:8E:FB:19:50:22:02:C4:9C:69:B1:1E:F6
     Signature algorithm name: SHA256withRSA
     Version: 1

","2292","<ssl><encryption><oracle11g><sha256><hashalgorithm>","1","3","1","2016-07-09 09:50:50","38280515","0","1","","","","2016-07-04 19:13:42",""
"31428397","SHA 256 from Java to C#","I´m trying to create the equivalent code from Java to C# for the function below:
public static String SHA256 (List<String> parametros, String clave) 

{
try {
    MessageDigest sha = MessageDigest.getInstance(""SHA-256"");
    for(String param:parametros){
        byte p[] = new byte[param.length()];
        p = param.getBytes();
        sha.update(p);
    }
    byte bClave[] = new byte[clave.length()];
    bClave = clave.getBytes();
    byte[] hash = sha.digest(bClave);
    return ( hexString256 (hash));
   }catch (NoSuchAlgorithmException e){
   return (""Error"");
  }
}

Any suggestions for the  sha.update(p); line?
","If it's just about calculating SHA-256 hash of some data maybe this would give some idea:
// using System.Security.Cryptography;
public static string ComputeHashSha256(byte[] toBeHashed)
{
    using (var sha256 = SHA256.Create())
    {
        return Encoding.UTF8.GetString(sha256.ComputeHash(toBeHashed));
    }
}

UPDATE:
If the goal is to compute hash of a list strings after concatenating them you can use an additional method like (or combine them both in a single one if you wish):
public static string ComputeSHA256HashOfAListOfStrings(List<string> parameters)
{
    var concatted = string.Join(string.Empty, parameters);
    var byteOfConcattedString = Encoding.UTF8.GetBytes(concatted);
    return ComputeHashSha256(byteOfConcattedString);
}

Please note I just meant this sample to be a pointer for you because I don't exactly know what the Java code above does but I hope it helps a bit.
","2241","<java><c#><sha><sha256><message-digest>","1","1","1","2015-07-16 09:34:24","31436812","0","3","","","","2015-07-15 10:52:40",""
"37128276","How to compute an SHA256 hash and Base64 String encoding in JavaScript/Node","I am trying to recreate the following C# code in JavaScript.
SHA256 myHash = new SHA256Managed();
Byte[] inputBytes = Encoding.ASCII.GetBytes(""test"");
myHash.ComputeHash(inputBytes);
return Convert.ToBase64String(myHash.Hash);

this code returns ""n4bQgYhMfWWaL+qgxVrQFaO/TxsrC4Is0V1sFbDwCgg=""
This is what I have so far for my JavaScript code
var sha256 = require('js-sha256').sha256;
var Base64 = require('js-base64').Base64;

var sha256sig = sha256(""test"");

return Base64.encode(sha256sig);

the JS code returns ""OWY4NmQwODE4ODRjN2Q2NTlhMmZlYWEwYzU1YWQwMTVhM2JmNGYxYjJiMGI4MjJjZDE1ZDZjMTViMGYwMGEwOA==""
These are the 2 JS libraries that I have used
js-sha256
js-base64
Does anybody know how to make it work ? Am I using the wrong libs ?
","You don't need any libraries to use cryptographic functions in NodeJS.
const crypto = require('crypto');

const hash = crypto.createHash('sha256')
                   .update('test')
                   .digest('base64');
console.log(hash); // n4bQgYhMfWWaL+qgxVrQFaO/TxsrC4Is0V1sFbDwCgg=

","2217","<javascript><c#><node.js><base64><sha256>","4","6","1","2018-04-02 07:40:30","37128556","0","","1595699","","2018-04-02 07:40:30","2016-05-10 02:22:06",""
"24756562","C# SignatureDescription for SHA256","I am working on a c# signing application. At one point, a System.Security.Cryptography.SignatureDescription needs to be obtained. Does anyone know why description1 below contains a valid structure, while description2 is null? Changing from .Net3.5 to .Net4.5.1 did not help.
SignatureDescription description1 = CryptoConfig.CreateFromName(""http://www.w3.org/2000/09/xmldsig#rsa-sha1"") as SignatureDescription;

SignatureDescription description2 = CryptoConfig.CreateFromName(""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"") as SignatureDescription;

It didn't work for SHA512 either. URIs obtained from here.
","Apparently RSA-SHA256 is not supported in .Net 3.5. However there's a workaround which can be found here:
http://social.msdn.microsoft.com/Forums/vstudio/en-US/6438011b-92fb-4123-a22f-ad071efddf85/xml-digital-signature-with-sha256-algorithm
","2215","<c#><sign><sha256>","3","1","1","2014-07-28 11:38:55","24994458","4","","","","","2014-07-15 11:04:12",""
"8340557","Login token with sha256","I need to create a login token that I can pass from site 1 to site 2 in a querystring. I don't need to transfer a username or id, I just need to know on site 2 that the user has a valid login on site 1.
I currently create the token like this
timestamp|sha256(timestamp+secret)

On site 2 i create a sha256 of the given timestamp+secret, and match it with the given hash. I also check the timestamp, and doesn't validate if it's older than 5 min.
Is this a reasonably safe way of doing it?
Would it be easy to crack open the sha256 and get the secret?
","You can use an HMAC to provide an authenticated message between two parties that already have a shared secret key.  What you have described is very similar to an HMAC, because its a type of Message Authentication Code.  Although I would actually use an HMAC function to do this. 
To crack an hmac you have to brute force secret using the the Authentication Code (the hashed part of the message).  The attacker knows the timestamp,  so they can keep guessing the secret.  Just make the secret really large and very random, like some output from /dev/random is a good choice. 
","2206","<security><login><token><sha256>","3","4","2","2011-12-01 16:33:30","8344343","2","1","855606","","2011-12-01 12:27:26","2011-12-01 11:23:24",""
"8340557","Login token with sha256","I need to create a login token that I can pass from site 1 to site 2 in a querystring. I don't need to transfer a username or id, I just need to know on site 2 that the user has a valid login on site 1.
I currently create the token like this
timestamp|sha256(timestamp+secret)

On site 2 i create a sha256 of the given timestamp+secret, and match it with the given hash. I also check the timestamp, and doesn't validate if it's older than 5 min.
Is this a reasonably safe way of doing it?
Would it be easy to crack open the sha256 and get the secret?
","As @Rook says, you should use HMAC to authenticate your tokens. 
Additionally, You need to ensure that your tokens can't be stolen. E.g., if you send that token in cleartext—either from site 1 to the user, or from the user to site 2, anyone listening in (think Firesheep) could also ""prove"" they have an account. The best you can do to prevent that is to use SSL/TLS.
","2206","<security><login><token><sha256>","3","1","2","2011-12-01 16:33:30","8344343","2","1","855606","","2011-12-01 12:27:26","2011-12-01 11:23:24",""
"19882089","why is the output result of sha-256 always 256 bits and the execution time always the same?","Why is it, that no matter the size of the input of the SHA-256 algorithm (in bitcoin mining), it always outputs a result of 256 bits? 
furthermore, how come that no matter the size of the input, the computation time is always the same?
","Output size is the same as it (algorithm) was designed this way.
Input size matters - just compute hash of 1GB file and 1KB file and compare - you'll see speed diff.
","2197","<encryption><sha256><bitcoin><computation>","1","1","2","2013-11-09 19:33:10","19882154","1","","","","","2013-11-09 19:26:58",""
"19882089","why is the output result of sha-256 always 256 bits and the execution time always the same?","Why is it, that no matter the size of the input of the SHA-256 algorithm (in bitcoin mining), it always outputs a result of 256 bits? 
furthermore, how come that no matter the size of the input, the computation time is always the same?
","On your first question, the answer would be that it is by design - the SHA-256 algorithm is intended to take an arbitrary amount of input data and produce 256 bits of output, whilst also maintaining certain properties that make for an effective cryptographic hash. Other hash algorithms produce different output sizes (e.g. SHA-1 produces 160 bits of output, SHA-512 produces 512 bits of output, etc.).
Your second question is based on an incorrect assumption - the computation time is dependent on the size of the input - it will naturally take longer even just to read say, a 1MB file than it would to read a 1KB file, and since the hash is dependent on every bit of the input, a larger input will take longer to hash than a smaller one.
","2197","<encryption><sha256><bitcoin><computation>","1","3","2","2013-11-09 19:33:10","19882154","1","","","","","2013-11-09 19:26:58",""
"43599585","What is a JS regex to match a sha256 word hash within a text?","On the following text
MD5 ed076287532e86365e841e92bfc50d8c
SHA1 2ef7bde608ce5404e97d5f042f95f89f1c232871
SHA256 7f83b1657ff1fc53b92dc18148a1d65dfc2d4b1fa3d677284addd200126d9069 
ssdeep3:aBn:aB 
File size 12 bytes ( 12 bytes ) 
File type Text 
Magic literal ASCII text, with no line terminators 
TrID    Unknown!

I want to match the hash the SHA256 value in JS:
7f83b1657ff1fc53b92dc18148a1d65dfc2d4b1fa3d677284addd200126d9069 

","The following regex works for me: 
\b[A-Fa-f0-9]{64}\b

Check the explanation here: https://regex101.com/r/AXhQLz/1
","2178","<javascript><regex><hash><sha256>","4","6","1","2017-04-25 00:18:45","","4","","","","","2017-04-25 00:18:45","2017-04-29 18:14:27"
"16994115","MySQL SHA256 and Java MessageDigest SHA-256 don't match","I've been trying to encrypt some user passwords on a project but I can't seem to get it working properly. I've decided to use the SHA-256 algorithm and when I introduce a password to MySQL using the Sha2(Example,256) It adds two zeros to the crypted password. In Java I used this to hash the text on the program but can't get the equal result.
    try {
        MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
        byte[] hash = digest.digest(""ContrasenhaPassword"".getBytes(""UTF-8""));

        StringBuilder hexString = new StringBuilder();
        for (int i: hash) {
            hexString.append(Integer.toHexString(0XFF & i));
        }
        String Hashed = new String(hexString);
        System.out.println(hexString);
        System.out.println(Hashed);
        // Below, MySQL Output for SHA2('ContrasenhaPassword',256)
        System.out.println(""d17bf0da90f56b8fc627bac6523ffd284aa0d82c870e1a0428274de048f49d78"");
        System.out.println(Hashed.equals(hexString));
        } catch (Exception e) {
        e.printStackTrace();
        }

The output I get is:
        d17bf0da90f56b8fc627bac6523ffd284aa0d82c87e1a428274de048f49d78
        d17bf0da90f56b8fc627bac6523ffd284aa0d82c87e1a428274de048f49d78
        d17bf0da90f56b8fc627bac6523ffd284aa0d82c870e1a0428274de048f49d78
        false 
        BUILD SUCCESSFUL (total time: 0 seconds)

Any ideas?
","The difference is in how you're printing them out:
for (int i: hash) {
  hexString.append(Integer.toHexString(0XFF & i));
}

leaves off leading zeroes, so there's one byte formatted as ""e"" instead of ""0e"".  Probably the simplest alternative would be
for (int i: hash) {
  hexString.append(String.format(""%02x"", i));
}

Alternately, if you can use Guava, the whole thing can be done much more simply with
Hashing.sha256().hashString(""ContrasenhaPassword"", Charsets.UTF_8).toString()

which gives you the (properly formatted) hex-encoded SHA-256 hash in a single line.
","2144","<java><mysql><encryption><comparison><sha256>","3","6","2","2013-12-08 16:31:49","16994124","1","4","-1","","2017-05-23 11:47:08","2013-06-07 22:55:52",""
"16994115","MySQL SHA256 and Java MessageDigest SHA-256 don't match","I've been trying to encrypt some user passwords on a project but I can't seem to get it working properly. I've decided to use the SHA-256 algorithm and when I introduce a password to MySQL using the Sha2(Example,256) It adds two zeros to the crypted password. In Java I used this to hash the text on the program but can't get the equal result.
    try {
        MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
        byte[] hash = digest.digest(""ContrasenhaPassword"".getBytes(""UTF-8""));

        StringBuilder hexString = new StringBuilder();
        for (int i: hash) {
            hexString.append(Integer.toHexString(0XFF & i));
        }
        String Hashed = new String(hexString);
        System.out.println(hexString);
        System.out.println(Hashed);
        // Below, MySQL Output for SHA2('ContrasenhaPassword',256)
        System.out.println(""d17bf0da90f56b8fc627bac6523ffd284aa0d82c870e1a0428274de048f49d78"");
        System.out.println(Hashed.equals(hexString));
        } catch (Exception e) {
        e.printStackTrace();
        }

The output I get is:
        d17bf0da90f56b8fc627bac6523ffd284aa0d82c87e1a428274de048f49d78
        d17bf0da90f56b8fc627bac6523ffd284aa0d82c87e1a428274de048f49d78
        d17bf0da90f56b8fc627bac6523ffd284aa0d82c870e1a0428274de048f49d78
        false 
        BUILD SUCCESSFUL (total time: 0 seconds)

Any ideas?
","Can't you add the missing zero
for (int i: hash) 
{
    if(Integer.toHexString(0xFF & i).length() == 2)
        hexString.append(Integer.toHexString(0xFF & i));
    else
        hexString.append ( 0x00 + Integer.toHexString(0xFF & i));
}

It seems OK to me.
","2144","<java><mysql><encryption><comparison><sha256>","3","1","2","2013-12-08 16:31:49","16994124","1","4","-1","","2017-05-23 11:47:08","2013-06-07 22:55:52",""
"23450044","How can I convert a 64bit integer to a big-endian byte array in C++","(This is a follow-up question to Padding the message in SHA256.)
(I am trying to implement the SHA-256 hash function in C++. I am doing this purely for fun and learning purposes.)
I have my string message with length message_length. I have appended the string with the bit 1 followed by 0s so that the length of the string is now 448 bits mod 512 bits. 
I now need to append the string with the message_length as 64-bit big-endian integer to the string, but I can't quite figure out how to do this in C++.
For sake of argument then, lets say message_length is 3 bytes = 24 bits. 24 in hex is 18, so I would need to append 00 00 00 00 00 00 00 18 to the string.
So what I would like is a function that converts the integer 3 into the string 00 00 00 00 00 00 00 18 so that I can append this.
My question boils down to

How can I convert a 64bit integer to a big-endian byte array in C++

","Edit: I just reread your question (in the intend to edit it). I think you misunderstood the format SHA256 expects you to use. Instead of appending the string 00 00 00 00 00 00 00 18 (each byte hex encoded and separated by spaces) for a message length of 24 you need to append the raw bytes 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 and 0x18. They do not represent any printable characters. See below for a way to get these bytes. My example uses an integer whose byte representation happens to contain only printable characters (in ASCII).
Btw., the reason you pad to 448 bits is that you have 64 bits left in the full block size of 512 bits so you can put the big-endian encoding of the message length in there.

You can extract a single byte of num using num>>(8*i) & 0xff where you will get the least significant byte for i=0 and the most significant byte of an unsigned long (64bit) with i=7. Iterating through all positions you can get each byte:
   unsigned long num = 0x626967656e646961L;
   //Store big endian representation in a vector:
   std::vector<unsigned char> bigEndian;
   for(int i=7; i>=0; i--){
      bigEndian.push_back( (num>>(8*i)) & 0xff );
   }

If you need it as a string you can convert it using the iterator constructor of a string:
   std::string bigEndianString(bigEndian.begin(),bigEndian.end());

Complete code with test output:
#include <iostream>
#include <string>
#include <vector>
int main() {
   unsigned long num = 0x626967656e646961L;

   //Store big endian representation in a vector:
   std::vector<unsigned char> bigEndian;
   for(int i=7; i>=0; i--){
      bigEndian.push_back( (num>>(8*i)) & 0xff );
   }

   //Convert vector to string:
   std::string bigEndianString(bigEndian.begin(),bigEndian.end());

   //Test correctness:
   for(std::vector<unsigned char>::const_iterator it = bigEndian.begin(); it != bigEndian.end(); ++it) {
       std::cout << std::hex << (int)*it << ' ';
   }
   std::cout << std::endl << bigEndianString << std::endl;

}

","2141","<c++><hash><append><sha256><endianness>","1","2","1","2014-05-04 13:45:41","23456704","3","1","-1","","2017-05-23 11:57:29","2014-05-03 21:29:45",""
"12688502","Length of the result of SHA256 algo","I'm curious why the result of SHA256 can be saved within a binary(32), but it needs a varchar(64) for the same result to be saved.
I mean, 256 bits are 32 bytes, so, saving inside a binary(32) makes perfect sense. But then why trying to save it in a varchar requires an extra byte for each byte?
","Let's start at the beginning and see what a cryptographic function is and what it's output actually is: 

A cryptographic hash function is a hash function, that is, an
  algorithm that takes an arbitrary block of data and returns a
  fixed-size bit string, the (cryptographic) hash value.

That means that we obtain sequence of 1s and 0s back. In order to save that sequence correctly, you have to use MySQL's binary data-type column since it doesn't save any data about how to represent the saved data to the user - there is no encoding associated with it. That means that when you try to view the data, you'll most likely see garbled characters since the GUI programs will attempt to represent the value stored as an ASCII-encoded string (which is wrong).
I'll skip the reasons why the hash value is represented as a number, but the point is that it is. And it's a hexadecimal number. Let's take the 1st byte that you used: 
10101111 = that's decimal 175 or hexadecimal AF.
Sure, you can represent ASCII 175 as something, it will most likely be a weird character depending on the codepage being used. Problem with ASCII is that codes above 127 are arbitrary, which lead to inventing codepages, which lead to inventing Unicode etc. so I'll skip it for now. 
Point is, you can't rely on ASCII displaying 10101111 correctly in every scenario.
That means that 175 will have to be displayed using 3 bytes, not 1. Why? Because each character in 175 has to be displayed using its own byte.
That means that you can display your hash value as decimal number. That also means you can display your number as a hexadecimal number, which is significantly shorter to represent. 
Let's take 10101111 again.
In decimal it's 175, takes 3 bytes to show it on screen - 1 for 1, 1 for 7 and 1 for 5.
In hexadecimal it's AF, takes 2 bytes to show it on screen - significantly shorter. 
Each byte when translated to hex number has at least 2 digits (there are leading zeroes). With decimal numbers that's not the case, so you know that every time you want to represent 1 byte as a hex number - you'd have at least 2 digits. Ergo, your message is fixed width, it uses digits 0-9, letters A-F which are at the same position in every ASCII code page, ergo they'll look the same. 
So when you take AF and display it in ASCII, you need 1 byte for A and 1 byte for F.
There are 32 numbers, each has 2 digits, 32x2 = 64 bytes. 
The only mistake you probably did was using varchar(64). Using varchar for storing hashes is useless, if you know the hash width. Using char would be much better because you wouldn't waste that 1 byte that varchar column uses.
Hopefully, this clears it up a bit. It's actually more simple than it sounds :)
","2107","<mysql><sha256>","4","4","1","2012-10-02 12:56:23","12690697","6","2","","","","2012-10-02 10:19:12",""
"5711412","php to iphone code - CCHmac kCCHmacAlgSHA256","I am trying to login to my server using hmac sha256 encryption, i have working code in php, but can't get it working in iphone and traced it to that the hmac in iphone is yielding different output to php code, given same inputs
php code is
  $privatekey = '6-y6f""\%BjSM;HBo\'sPr"")5#t2nb-LG*;])f^Si[';
  $identity_arrow_getSecret = $privatekey;
  $date_c = ""2011-04-18T23:56:28+0800"";
  $uri = '/backend/1/User/Header';

  $stringToSign =  ""GET\n\n\n"" . $date_c . ""\n"" . $uri;
  $signature = hash_hmac(""sha256"", utf8_encode($stringToSign), $identity_arrow_getSecret);
  echo ""stringToSign is $stringToSign <HR>"";
  echo ""signature is $signature <HR>"";

objective-c code is
NSString* uri = @""/backend/1/User/Header"";
NSString* date_c = @""2011-04-18T23:56:28+0800""; //[dateFormatter stringFromDate:[NSDate date]];
NSString* stringToSign = [NSString stringWithFormat:@""GET\n\n\n%@\n%@"" , date_c , uri];
NSLog(@"" stringToSign : %@ <>\r\n"", stringToSign);

NSString* privatekey = @""6-y6f\""\%BjSM;HBo\'sPr\"")5#t2nb-LG*;])f^Si["";

const char *cKey  = [privatekey cStringUsingEncoding:NSASCIIStringEncoding];
const char *cData = [stringToSign cStringUsingEncoding:NSASCIIStringEncoding];

unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];

CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

NSString *hash = [HMAC base64EncodedString];
NSLog(@"" hash : %@ \r\n"", hash);

","You may want to check your Base64 class.  I use the Base64 class written by Kiichi Takeuchi and it gives me identical results to a routine I wrote in C# to verify, so I assume it's correct.
I had to make one small change to your code to verify, as the Base64 library only encodes an NSData structure.  Here's what it looks like:
CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);
NSData *nsd = [[NSData alloc] initWithBytes: cHMAC length:CC_SHA256_DIGEST_LENGTH];

NSString *hash = [Base64 encode:nsd];
[nsd release];
NSLog(@"" hash : %@ \r\n"", hash);

","2082","<iphone><objective-c><restful-authentication><hmac><sha256>","-1","1","1","2011-05-02 18:58:33","","0","1","","","","2011-04-19 03:53:47",""
"6782046","OpenSSL libs: 2 on Linux libcrypto and libssl and more than 13 on windows. What shall I link on windows to compile my sample?","So I look at this sample code:
#include <stdio.h>
#include <string.h>
#include ""openssl/sha.h""

void sha256(char *string, char outputBuffer[65])
{
    unsigned char hash[SHA256_DIGEST_LENGTH];
    SHA256_CTX sha256;
    SHA256_Init(&sha256);
    SHA256_Update(&sha256, string, strlen(string));
    SHA256_Final(hash, &sha256);
    int i = 0;
    for(i = 0; i < SHA256_DIGEST_LENGTH; i++)
    {
        sprintf(outputBuffer + (i * 2), ""%02x"", hash[i]);
    }
    outputBuffer[64] = 0;
}

int sha256_file(char *path, char outputBuffer[65])
{
    FILE *file = fopen(path, ""rb"");
    if(!file) return -534;

    byte hash[SHA256_DIGEST_LENGTH];
    SHA256_CTX sha256;
    SHA256_Init(&sha256);
    const int bufSize = 32768;
    byte *buffer = malloc(bufSize);
    int bytesRead = 0;
    if(!buffer) return ENOMEM;
    while((bytesRead = fread(buffer, 1, bufSize, file)))
    {
        SHA256_Update(&sha256, buffer, bytesRead);
    }
    SHA256_Final(hash, &sha256);

    sha256_hash_string(hash, outputBuffer);
    fclose(file);
    free(buffer);
    return 0;
}

int main()
{
    static unsigned char buffer[65];
    sha256(""string"", buffer);
    printf(""%s\n"", buffer);
}

What libs shall I link to my project to compile this on windows?
","I use the pre-compiled DLL flavor of OpenSSL and it works fine for me.
","2067","<c><windows><visual-studio-2010><openssl><sha256>","1","3","1","2011-07-21 20:36:04","6782417","0","","-1","","2017-05-23 11:47:50","2011-07-21 20:03:39",""
"6395651","Is it possible to calculate sha256 hashes in the browser using the user's video card, eg. by using WebGL or Flash?","Is it possible to calculate sha256 hashes in the browser using the user's video card, eg. by using WebGL or Flash?
I'm afraid this is all there is to ask, but if more elaboration is needed please do not hesitate to tell me in a comment.
Thanks.
","The next version of the Flash player (11) will support real hardware accelerated graphics, thus exposing the possibility to run pixel shaders on the graphics card. They could atleast in theory be used for general purpose computing. 
There are some examples on Thibault Imberts blog.
","2061","<javascript><flash><hash><webgl><sha256>","9","0","3","2019-04-25 14:10:04","6511344","3","5","","","","2011-06-18 11:28:07",""
"6395651","Is it possible to calculate sha256 hashes in the browser using the user's video card, eg. by using WebGL or Flash?","Is it possible to calculate sha256 hashes in the browser using the user's video card, eg. by using WebGL or Flash?
I'm afraid this is all there is to ask, but if more elaboration is needed please do not hesitate to tell me in a comment.
Thanks.
","This should be possible.  Given an implementation of SHA as a fragment shader, you should be able to read back the results using readPixels:

Read Back Pixels [5.13.12] Pixels in
  the current framebuffer can be read
  back into an  ArrayBufferView object.
void readPixels(int x, int y, long
  width, long height, enum format, enum
  type, Object pixels)
format: RGBA
type: UNSIGNED_BYTE

From the Kronos WebGL reference card (PDF)
For extra credit, do it all in an offscreen framebuffer, as described here.
","2061","<javascript><flash><hash><webgl><sha256>","9","6","3","2019-04-25 14:10:04","6511344","3","5","","","","2011-06-18 11:28:07",""
"6395651","Is it possible to calculate sha256 hashes in the browser using the user's video card, eg. by using WebGL or Flash?","Is it possible to calculate sha256 hashes in the browser using the user's video card, eg. by using WebGL or Flash?
I'm afraid this is all there is to ask, but if more elaboration is needed please do not hesitate to tell me in a comment.
Thanks.
","Looks like this can be done (although in this case it's not SHA256). 
The following is an example of a JavaScript library that uses WebGL2 to calculate hash values on the client side, for the Curl hashing algoritm: 
https://github.com/iotaledger/curl.lib.js/
In this case it's used to do Proof of Work for an IOTA transaction (https://www.iota.org/get-started/what-is-iota). This basically comes down to brute-forcing random inputs into the same hash function until the result matches a certain output. Therefore the gained hashing speed by using WebGL is very relevant. 
I have used it, and it works!
","2061","<javascript><flash><hash><webgl><sha256>","9","0","3","2019-04-25 14:10:04","6511344","3","5","","","","2011-06-18 11:28:07",""
"43315762","In Angular2 the SHA256 hash of a file generated does not match with SHA256 from other sites","I'm trying to generate SHA-256 hash for files.
I have used https://www.npmjs.com/package/crypto-js library for that. please see below code for that. 
import { Component, OnInit } from '@angular/core';
var SHA256 = require(""crypto-js/sha256"");
@Component({
  moduleId: module.id,
  selector: 'dashboard',
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.css']
})
export class DashboardComponent implements OnInit {
  hash: string;
  constructor() { }
  ngOnInit() {}

  onFilesChange(fileList : Array<File>){
    this.fileList = fileList;
    console.log(fileList);
    for(var file in fileList){
      this.hash = SHA256(file);
      console.log(this.hash.toString());
    }

  }

}

File : file for sha-256
with above code I got below sh256 hash : 5feceb66ffc86f38d952786c6d696c79c2dbc239dd4e91b46729d73a27fb57e9
but I refer many online sites like http://onlinemd5.com/,http://www.online-convert.com/,https://md5file.com/calculator
form online site I got below sha256 hash :
27bb4358e847d559bed9f34eeee51ca71f51542afb0de4017b80dd66a0656eca
can anyone tell me why I'm getting different hash?
","You can use:https://www.jokecamp.com/blog/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages/#js
 <script src=""http://crypto-js.googlecode.com/svn/tags/3.0.2/build/rollups/hmac-sha256.js""></script>
<script src=""http://crypto-js.googlecode.com/svn/tags/3.0.2/build/components/enc-base64-min.js""></script>

<script>
  var hash = CryptoJS.HmacSHA256(""Message"", ""secret"");
  var hashInBase64 = CryptoJS.enc.Base64.stringify(hash);
  document.write(hashInBase64);
</script>

","2046","<javascript><angular><sha256><cryptojs>","8","-2","1","2019-04-27 05:58:56","","0","","","","","2017-04-10 05:46:37",""
"12573630","Working with SHA256 hashing on iOS","I've looked at at least 6 pages on SO about iOS and SHA256, and I still can't figure out what's going on.
Generally, I'm used to doing SHA256 in PHP with the hash() function, and it returning a string value like: db1204372d8d9f14acc608b497227047d63ad868987883d0a29198be8e6ce853
I'm trying to implement SHA256 in my iOS app in order to beef up security between the app and the server, but the encoding part is giving me a headache...
I'm using an NSData category:
+ (NSData *)sha256:(NSData *)data {

NSMutableData *out = [NSMutableData dataWithLength:CC_SHA256_DIGEST_LENGTH];

CC_SHA256(data.bytes, data.length,  out.mutableBytes);

if ( CC_SHA256(data.bytes, data.length, out.mutableBytes) ) return out;

return nil;
}

However, no matter how I try to encode the resulting NSData object into an NSString (to send to the server), I end up with a string like this ã°ÄBüûôÈo¹$'®AädL¤xR¸U
My question - how can I implement a category that behaves the same as hash, such that passing the same value to either method should yield the same value?
Thanks for the helps
","Sorry that I'm very late to the party.
The result you get from php is the concatenation of the hexadecimal values of each byte. The value you got from ios is the actual byte string.
I suspect you are using something like [[NSString alloc] initWithData:theData encoding:NSUTF8StringEncoding] to get the string.
But you should convert NSData to the form you require using [data description] as described in How can i convert NSdata to hex string?.
","2030","<ios><iphone><encryption><hash><sha256>","2","0","1","2014-01-20 03:35:07","","1","1","2432334","","2013-11-01 12:59:02","2012-09-24 22:09:54",""
"28569033","Advantage of initialization variable to Hexadecimal","I am working on a hash function coded in c++ and i was wondering why main constant variables are initialized with hex value. Like
unsigned long i= 0x428a2f98 ;

Is this done for the sake of performance if yes than please explain, because i think it have be converted to integer value at some point.
","The way constants defined in the source code does not do anything for performance, as it will be converted to binary representation by compiler. It is there only for readability, for example binary data can be easier interpreted in hex than decimal notation.
","2024","<c++><hash><sha256><hash-function>","2","4","1","2015-02-17 19:04:40","","1","2","225074","","2015-02-17 19:04:40","2015-02-17 18:58:04",""
"32426890","Check if SHA256 hashed password in mysql is correct in login form not working","Hello I have a small problem with my code. The thing is that in minecraft server the user is asked to register and then his registration details go into mysql database and password is encrypted in SHA256 custom hash. Here is its algorithm:
    String salt = randomString(length:16);
String encryptedPassword = ""$SHA$"" + salt + ""$"" + sha256(sha256(password) + salt);

The problem is that I need to people to login to my website using that password and their username. But in order to check it I need to encode mine password and check if they are the same. But my code does not seem to work, I've tried everything. please help me. Thank you!!:
    <?php
    require_once 'config.php';
    $mysqli = new mysqli($hostname, $user, $pass, $db4);
if ($mysqli->connect_errno) {
    printf(""Connect failed: %s\n"", $mysqli->connect_error);
    exit();
}

$name = 'name';
$password = 'password';
$v = $mysqli->query(""SELECT password FROM authme WHERE username = '"".$name.""'""); 
                        if ($v->num_rows > 0) {
                            $row = $v->fetch_assoc(); 
                            echo $row['password']; 
                        } 
                        else { 
                            echo 'There is no user with such name';
                            exit();
                        }
function checkPassword($password,$row['password']){
     $parts = explode('$',$row['password']);
     $salt = $parts[2];
     $hashed = hash('sha256',hash('sha256', $password).$salt);
     $hashed = '$SHA$'.$salt.'$'.$hashed;
     if ($hashed == $row['password'])
     {
         return true;
     }
    else {
        return false;
    }
}
if (checkPassword($password, $row['password']) === true) {
    echo 'OMGGGGGGGGGGGGGGGGGGGG';
}
else {
    echo 'something went wrong';
}                       
$mysqli->close();
?>

","function checkPassword($password, $db_password)
{
    $parts = explode('$', $db_password);
    $salt = $parts[2];
    $hashed = hash('sha256',hash('sha256', $password).$salt);
    $hashed = '$SHA$'.$salt.'$'.$hashed;
    return ($hashed == $db_password) ? true : false;
}

You're passing a single variable into the function, so change all references of $row['password'] to something like $db_password for the function.
","2021","<php><mysql><sha256>","1","3","1","2015-09-06 21:38:24","32428560","0","","","","","2015-09-06 18:30:57",""
"5159350","ArgumentException ""Value was invalid"" when calling RSACryptoServiceProvider.SignData","I'm getting a System.ArgumentException ""Value was invalid"" when calling RSACryptoServiceProvider.SignData with the following code:
var csp = (RSACryptoServiceProvider)_certificate.PrivateKey;
string simpleName = CryptoConfig.MapNameToOID(""SHA256"");
return csp.SignData(data, simpleName);

The code is from a third party sample so it should work in the right circumstances. It seems it could be caused by my OS but I haven't found a solution so thought I'd post here to see if someone can help?
.NET Framework: 3.5
OS: Microsoft Windows Server 2003 R2 Enterprise Edition Service Pack 2
","From the link provided:
""The root cause for this is that the CryptoConfig does not understand SHA256CryptoServiceProvider. It was added as part of the green bits in .NET 3.5, and due to layering restrictions the red bits (such as mscorlib.dll where RSACryptoServiceProvider lives) does not know about its existence...
If you are using .Net Framework 4.0 then the resolution is to modify the “machine.config” file at:
%WINDIR%\Microsoft.NET\Framework\v4.0.xxxxx\ CONFIG  -> for x86
%WINDIR%\Microsoft.NET\Framework64\v4.0.xxxxx\CONFIG -> for x64

If you are using .Net Framework 3.5 then the resolution is to modify the “machine.config” file at:
%WINDIR%\Microsoft.NET\Framework\v2.0.xxxxx\ CONFIG  -> for x86
%WINDIR%\Microsoft.NET\Framework64\v2.0.xxxxx\CONFIG -> for x64

Here is the entry that you need to make at the ""machine.config"" file for supporting SHA256CryptoServiceProvider, SHA256Cng, SHA384CryptoServiceProvider, SHA384Cng, SHA512CryptoServiceProvider, and SHA512Cng.""
<mscorlib>
    <cryptographySettings>
      <cryptoNameMapping>
        <cryptoClasses>
          <cryptoClass SHA256CSP=""System.Security.Cryptography.SHA256CryptoServiceProvider, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"" />
          <cryptoClass SHA256CNG=""System.Security.Cryptography.SHA256Cng, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"" />
          <cryptoClass SHA384CSP=""System.Security.Cryptography.SHA384CryptoServiceProvider, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"" />
          <cryptoClass SHA384CNG=""System.Security.Cryptography.SHA384Cng, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"" />
          <cryptoClass SHA512CSP=""System.Security.Cryptography.SHA512CryptoServiceProvider, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"" />
          <cryptoClass SHA512CNG=""System.Security.Cryptography.SHA512Cng, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"" />
        </cryptoClasses>
        <nameEntry name=""SHA256"" class=""SHA256CSP"" />
        <nameEntry name=""SHA256CryptoServiceProvider"" class=""SHA256CSP"" />
        <nameEntry name=""System.Security.Cryptography.SHA256CryptoServiceProvider"" class=""SHA256CSP"" />
        <nameEntry name=""SHA256Next"" class=""SHA256CNG"" />
        <nameEntry name=""SHA256Cng"" class=""SHA256CNG"" />
        <nameEntry name=""System.Security.Cryptography.SHA256Cng"" class=""SHA256CNG"" />
        <nameEntry name=""SHA384"" class=""SHA384CSP"" />
        <nameEntry name=""SHA384CryptoServiceProvider"" class=""SHA384CSP"" />
        <nameEntry name=""System.Security.Cryptography.SHA384CryptoServiceProvider"" class=""SHA384CSP"" />
        <nameEntry name=""SHA384Next"" class=""SHA384CNG"" />
        <nameEntry name=""SHA384Cng"" class=""SHA384CNG"" />
        <nameEntry name=""System.Security.Cryptography.SHA384Cng"" class=""SHA384CNG"" />
        <nameEntry name=""SHA512"" class=""SHA512CSP"" />
        <nameEntry name=""SHA512CryptoServiceProvider"" class=""SHA512CSP"" />
        <nameEntry name=""System.Security.Cryptography.SHA512CryptoServiceProvider"" class=""SHA512CSP"" />
        <nameEntry name=""SHA512Next"" class=""SHA512CNG"" />
        <nameEntry name=""SHA512Cng"" class=""SHA512CNG"" />
        <nameEntry name=""System.Security.Cryptography.SHA512Cng"" class=""SHA512CNG"" />
      </cryptoNameMapping>
      <oidMap>
        <oidEntry OID=""2.16.840.1.101.3.4.2.1"" name=""SHA256"" />
        <oidEntry OID=""2.16.840.1.101.3.4.2.1"" name=""SHA256Next"" />
        <oidEntry OID=""2.16.840.1.101.3.4.2.2"" name=""SHA384"" />
        <oidEntry OID=""2.16.840.1.101.3.4.2.2"" name=""SHA384Next"" />
        <oidEntry OID=""2.16.840.1.101.3.4.2.3"" name=""SHA512"" />
        <oidEntry OID=""2.16.840.1.101.3.4.2.3"" name=""SHA512Next"" />
      </oidMap>
    </cryptographySettings>
  </mscorlib> 

Link: http://blogs.msdn.com/b/winsdk/archive/2010/08/18/getting-a-system-argumentexception-value-was-invalid-when-trying-to-sign-data-using-sha256cryptoserviceprovider.aspx
","1998","<security><rsa><sha256>","1","0","2","2011-05-09 19:41:29","5941047","0","","","","","2011-03-01 19:30:11",""
"5159350","ArgumentException ""Value was invalid"" when calling RSACryptoServiceProvider.SignData","I'm getting a System.ArgumentException ""Value was invalid"" when calling RSACryptoServiceProvider.SignData with the following code:
var csp = (RSACryptoServiceProvider)_certificate.PrivateKey;
string simpleName = CryptoConfig.MapNameToOID(""SHA256"");
return csp.SignData(data, simpleName);

The code is from a third party sample so it should work in the right circumstances. It seems it could be caused by my OS but I haven't found a solution so thought I'd post here to see if someone can help?
.NET Framework: 3.5
OS: Microsoft Windows Server 2003 R2 Enterprise Edition Service Pack 2
","After doing more digging around, I've manged to find a more suitable solution than editing the machine.config file.  You can specify the OID for the algorithm that you're interested in using yourself, and then pass that value to the RSA provider like so:
public static string Sign(string data)
{   
    RSACryptoServiceProvider rsaProvider = new RSACryptoServiceProvider(); 
    HashAlgorithm algorithm = new SHA256CryptoServiceProvider();
    const string sha256Oid = ""2.16.840.1.101.3.4.2.1"";

    byte[] dataBytes = Encoding.ASCII.GetBytes(data);
    byte[] hashBytes= algorithm.ComputeHash(dataBytes);
    byte[] signedBytes = rsaProvider.SignHash(hashBytes, sha256Oid);
    string signature = Convert.ToBase64String(signedBytes);

    return signature;
}

","1998","<security><rsa><sha256>","1","3","2","2011-05-09 19:41:29","5941047","0","","","","","2011-03-01 19:30:11",""
"22220344","PHP and C# SHA256 Hashes returning different strings","So, I found a question just like this with an accepted answer, so I hopped off and tried to implement the necessary changes. For some reason though, I am still getting two different strings, and I don't know what it is I'm doing wrong. I tried to comment on the accepted answer to find help, but I lack the reputation to do so. So, I figured I'd ask the question again (that question was 2 years old, too).
Let me explain what I'm doing.
In php...
$intermediatesalt = md5(uniqid(rand(), true));
$salt = substr($intermediatesalt, 0, 8);
$hashpassword = base64_encode(
hash('sha256', $salt . hash('sha256', $password), true)
);

The line that says $hashpassword was taken from the accepted answer from this question. I didn't write any of this php, my friend did. I only know enough about programming to alter the code, but I couldn't create anything in php, let alone HTML.
After the hash has been created, both the hash and the salt are stored on a database.
The C# method I'm using is also from the answer I found here.
    public static string ComputeHash(string plainText, string salt)
    {
        // Convert plain text into a byte array.
        byte[] plainTextBytes = Encoding.UTF8.GetBytes(plainText);
        byte[] saltBytes = Encoding.UTF8.GetBytes(salt);

        SHA256Managed hash = new SHA256Managed();

        // Compute hash value of salt.
        byte[] plainHash = hash.ComputeHash(plainTextBytes);

        byte[] concat = new byte[plainHash.Length + saltBytes.Length];

        System.Buffer.BlockCopy(saltBytes, 0, concat, 0, saltBytes.Length);
        System.Buffer.BlockCopy(plainHash, 0, concat, saltBytes.Length, plainHash.Length);

        byte[] tHashBytes = hash.ComputeHash(concat);

        // Convert result into a base64-encoded string.
        string hashValue = Convert.ToBase64String(tHashBytes);

        // Return the result.
        return hashValue;
    }

But for some bizarre reason, even though the person who asked the question got what s/he wanted, I am still getting an undesired result.
This is the block of code that loads player data then compares the the php generated hashed password with the c# generated hashed password.
        // load the player based on the given email
        PlayerStructure.Player newPlayer = MySQL.loadPlayer(email);

        // compute a hash based on the given password and the retrieved salt
        // then, compare it to the hashed password on the database
        string hPassword = Program.ComputeHash(password, newPlayer.salt);

        if (newPlayer.password != hPassword)
        {
            sendStatusMsg(index, ""Invalid password."");
            sendStatusMsg(index, ""1: "" + hPassword);
            sendStatusMsg(index, ""2: "" + newPlayer.password);

            return;
        }

MySQL.loadPlayer loads the hash string and the salt string from the database, and I had to use those sendStatusMessage methods to print strings as this is for a server application that takes up to 15 minutes to load data from the database in debug mode. So I run the debug exe instead, ergo no Console.WriteLine calls. newPlayer.password is the hashed password stored on the database (the password created with php). hPassword is the computed hash using the C# method I borrowed.
The salt is e0071fa9 and the plain-text password is 'test'.
This is the result I get with the sendStatusMsg methods:
Invalid password.
1: 3QQyVEfmBN4kJJHsRQ307TCDYxNMpc4k3r3udBaVz8Y=
2: moHRVv9C0JvpdTk28xGm3uvPPuhatK2rAHXd5he4ZJI=

Any ideas as to what I might be doing incorrectly? As I've stated before, I literally just used the answer on here (borrowing the code almost verbatim) and I'm still not getting my desired result. This is the question I referenced: Why isn't my PHP SHA256 hash equivalent to C# SHA256Managed hash
","Because as the answer to question you are linking to says, hash returns a hex-encoded string instead of raw bytes by default. You are passing true as the third parameter to override this behavior for the outer call to hash, but you are not doing the same for the inner call.
In fact why are there two hashes in the first place? The inner hash doesn't seem to serve any purpose at all.
","1995","<c#><php><hash><sha256>","1","0","3","2017-07-04 20:26:41","22220614","1","","-1","","2017-05-23 10:26:12","2014-03-06 09:35:08",""
"22220344","PHP and C# SHA256 Hashes returning different strings","So, I found a question just like this with an accepted answer, so I hopped off and tried to implement the necessary changes. For some reason though, I am still getting two different strings, and I don't know what it is I'm doing wrong. I tried to comment on the accepted answer to find help, but I lack the reputation to do so. So, I figured I'd ask the question again (that question was 2 years old, too).
Let me explain what I'm doing.
In php...
$intermediatesalt = md5(uniqid(rand(), true));
$salt = substr($intermediatesalt, 0, 8);
$hashpassword = base64_encode(
hash('sha256', $salt . hash('sha256', $password), true)
);

The line that says $hashpassword was taken from the accepted answer from this question. I didn't write any of this php, my friend did. I only know enough about programming to alter the code, but I couldn't create anything in php, let alone HTML.
After the hash has been created, both the hash and the salt are stored on a database.
The C# method I'm using is also from the answer I found here.
    public static string ComputeHash(string plainText, string salt)
    {
        // Convert plain text into a byte array.
        byte[] plainTextBytes = Encoding.UTF8.GetBytes(plainText);
        byte[] saltBytes = Encoding.UTF8.GetBytes(salt);

        SHA256Managed hash = new SHA256Managed();

        // Compute hash value of salt.
        byte[] plainHash = hash.ComputeHash(plainTextBytes);

        byte[] concat = new byte[plainHash.Length + saltBytes.Length];

        System.Buffer.BlockCopy(saltBytes, 0, concat, 0, saltBytes.Length);
        System.Buffer.BlockCopy(plainHash, 0, concat, saltBytes.Length, plainHash.Length);

        byte[] tHashBytes = hash.ComputeHash(concat);

        // Convert result into a base64-encoded string.
        string hashValue = Convert.ToBase64String(tHashBytes);

        // Return the result.
        return hashValue;
    }

But for some bizarre reason, even though the person who asked the question got what s/he wanted, I am still getting an undesired result.
This is the block of code that loads player data then compares the the php generated hashed password with the c# generated hashed password.
        // load the player based on the given email
        PlayerStructure.Player newPlayer = MySQL.loadPlayer(email);

        // compute a hash based on the given password and the retrieved salt
        // then, compare it to the hashed password on the database
        string hPassword = Program.ComputeHash(password, newPlayer.salt);

        if (newPlayer.password != hPassword)
        {
            sendStatusMsg(index, ""Invalid password."");
            sendStatusMsg(index, ""1: "" + hPassword);
            sendStatusMsg(index, ""2: "" + newPlayer.password);

            return;
        }

MySQL.loadPlayer loads the hash string and the salt string from the database, and I had to use those sendStatusMessage methods to print strings as this is for a server application that takes up to 15 minutes to load data from the database in debug mode. So I run the debug exe instead, ergo no Console.WriteLine calls. newPlayer.password is the hashed password stored on the database (the password created with php). hPassword is the computed hash using the C# method I borrowed.
The salt is e0071fa9 and the plain-text password is 'test'.
This is the result I get with the sendStatusMsg methods:
Invalid password.
1: 3QQyVEfmBN4kJJHsRQ307TCDYxNMpc4k3r3udBaVz8Y=
2: moHRVv9C0JvpdTk28xGm3uvPPuhatK2rAHXd5he4ZJI=

Any ideas as to what I might be doing incorrectly? As I've stated before, I literally just used the answer on here (borrowing the code almost verbatim) and I'm still not getting my desired result. This is the question I referenced: Why isn't my PHP SHA256 hash equivalent to C# SHA256Managed hash
","As Jon stated earlier, the php was slightly flawed. If anyone else is attempting to do something like this, know that
$hashpassword = base64_encode(
hash('sha256', $salt . hash('sha256', $password), true)
);

as opposed to
$hashpassword = base64_encode(
hash('sha256', $salt . hash('sha256', $password, true), true)
);

makes a HUGE difference. The second line of php is what did the trick.
I hope this helps!
","1995","<c#><php><hash><sha256>","1","0","3","2017-07-04 20:26:41","22220614","1","","-1","","2017-05-23 10:26:12","2014-03-06 09:35:08",""
"22220344","PHP and C# SHA256 Hashes returning different strings","So, I found a question just like this with an accepted answer, so I hopped off and tried to implement the necessary changes. For some reason though, I am still getting two different strings, and I don't know what it is I'm doing wrong. I tried to comment on the accepted answer to find help, but I lack the reputation to do so. So, I figured I'd ask the question again (that question was 2 years old, too).
Let me explain what I'm doing.
In php...
$intermediatesalt = md5(uniqid(rand(), true));
$salt = substr($intermediatesalt, 0, 8);
$hashpassword = base64_encode(
hash('sha256', $salt . hash('sha256', $password), true)
);

The line that says $hashpassword was taken from the accepted answer from this question. I didn't write any of this php, my friend did. I only know enough about programming to alter the code, but I couldn't create anything in php, let alone HTML.
After the hash has been created, both the hash and the salt are stored on a database.
The C# method I'm using is also from the answer I found here.
    public static string ComputeHash(string plainText, string salt)
    {
        // Convert plain text into a byte array.
        byte[] plainTextBytes = Encoding.UTF8.GetBytes(plainText);
        byte[] saltBytes = Encoding.UTF8.GetBytes(salt);

        SHA256Managed hash = new SHA256Managed();

        // Compute hash value of salt.
        byte[] plainHash = hash.ComputeHash(plainTextBytes);

        byte[] concat = new byte[plainHash.Length + saltBytes.Length];

        System.Buffer.BlockCopy(saltBytes, 0, concat, 0, saltBytes.Length);
        System.Buffer.BlockCopy(plainHash, 0, concat, saltBytes.Length, plainHash.Length);

        byte[] tHashBytes = hash.ComputeHash(concat);

        // Convert result into a base64-encoded string.
        string hashValue = Convert.ToBase64String(tHashBytes);

        // Return the result.
        return hashValue;
    }

But for some bizarre reason, even though the person who asked the question got what s/he wanted, I am still getting an undesired result.
This is the block of code that loads player data then compares the the php generated hashed password with the c# generated hashed password.
        // load the player based on the given email
        PlayerStructure.Player newPlayer = MySQL.loadPlayer(email);

        // compute a hash based on the given password and the retrieved salt
        // then, compare it to the hashed password on the database
        string hPassword = Program.ComputeHash(password, newPlayer.salt);

        if (newPlayer.password != hPassword)
        {
            sendStatusMsg(index, ""Invalid password."");
            sendStatusMsg(index, ""1: "" + hPassword);
            sendStatusMsg(index, ""2: "" + newPlayer.password);

            return;
        }

MySQL.loadPlayer loads the hash string and the salt string from the database, and I had to use those sendStatusMessage methods to print strings as this is for a server application that takes up to 15 minutes to load data from the database in debug mode. So I run the debug exe instead, ergo no Console.WriteLine calls. newPlayer.password is the hashed password stored on the database (the password created with php). hPassword is the computed hash using the C# method I borrowed.
The salt is e0071fa9 and the plain-text password is 'test'.
This is the result I get with the sendStatusMsg methods:
Invalid password.
1: 3QQyVEfmBN4kJJHsRQ307TCDYxNMpc4k3r3udBaVz8Y=
2: moHRVv9C0JvpdTk28xGm3uvPPuhatK2rAHXd5he4ZJI=

Any ideas as to what I might be doing incorrectly? As I've stated before, I literally just used the answer on here (borrowing the code almost verbatim) and I'm still not getting my desired result. This is the question I referenced: Why isn't my PHP SHA256 hash equivalent to C# SHA256Managed hash
","Please on PHP avoid using your own hashing mechanism, unless you are a security / crypto expert and (more important, know what you are doing).
Have a good look on how password_hash works in PHP (and if using a PHP version that doesn't support it - please upgrade it), you can always use Anthony Ferrara compatibility library for good effect:
https://github.com/ircmaxell/password_compat
If you follow his blog, you will get some hints about the issues at stake:
http://blog.ircmaxell.com/search/label/Security
:)      
","1995","<c#><php><hash><sha256>","1","-1","3","2017-07-04 20:26:41","22220614","1","","-1","","2017-05-23 10:26:12","2014-03-06 09:35:08",""
"14178068","SHA256-CRYPT / SHA512-CRYPT in node.js","I use dovecot as my mail transfer agent and I aim to use the strongest password scheme which is supported by my system: SHA512-CRYPT or SHA256-CRYPT (BLF-CRYPT doesn't work).
For my own written webinterface I look for a function or library in node.js for hashing a password (with SHA***-CRYPT).
","Have you seen this page:
cryto.createHash sha512 with hexDigest input type
You can use crypto.createHash function, but why SHA512? Are you sure you need it for your website?
","1992","<node.js><sha256><crypt><sha512>","0","-1","3","2018-08-06 06:43:52","17496244","0","","","","","2013-01-06 00:38:55",""
"14178068","SHA256-CRYPT / SHA512-CRYPT in node.js","I use dovecot as my mail transfer agent and I aim to use the strongest password scheme which is supported by my system: SHA512-CRYPT or SHA256-CRYPT (BLF-CRYPT doesn't work).
For my own written webinterface I look for a function or library in node.js for hashing a password (with SHA***-CRYPT).
","You may consider checking: https://github.com/mvo5/sha512crypt-node which contains a implementation for sha512crypt in JS. Its very new but passes the testvectors from the glibc reference implementation.
","1992","<node.js><sha256><crypt><sha512>","0","1","3","2018-08-06 06:43:52","17496244","0","","","","","2013-01-06 00:38:55",""
"14178068","SHA256-CRYPT / SHA512-CRYPT in node.js","I use dovecot as my mail transfer agent and I aim to use the strongest password scheme which is supported by my system: SHA512-CRYPT or SHA256-CRYPT (BLF-CRYPT doesn't work).
For my own written webinterface I look for a function or library in node.js for hashing a password (with SHA***-CRYPT).
","Check out my fork of shacrypt - a Node.js addon that supports SHA-256 crypt and SHA-512 crypt password hashing. 
I extended it to:

Support asynchronous operation where computation is performed in Node.js's libuv thread pool, so it won't block the event loop.
Allow the module to be built under Windows

You will need to have C++ build tools installed on your system to successfully install the package. If you are running under Windows, you can download Microsoft's Build Tools for Visual Studio 2017.
Link:
https://github.com/vlasky/shacrypt
","1992","<node.js><sha256><crypt><sha512>","0","1","3","2018-08-06 06:43:52","17496244","0","","","","","2013-01-06 00:38:55",""
"27133618","Asynchronous SHA256 Hashing","I have the following method:
public static string Sha256Hash(string input) {
    if(String.IsNullOrEmpty(input)) return String.Empty;
    using(HashAlgorithm algorithm = new SHA256CryptoServiceProvider()) {
        byte[] inputBytes = Encoding.UTF8.GetBytes(input);
        byte[] hashBytes = algorithm.ComputeHash(inputBytes);
        return BitConverter.ToString(hashBytes).Replace(""-"", String.Empty);
    }
}

Is there a way to make it asynchronous? I was hoping to use the async and await keywords, but the HashAlgorithm class does not provide any asynchronous support for this.
Another approach was to encapsulate all the logic in a:
public static async string Sha256Hash(string input) {
     return await Task.Run(() => {
         //Hashing here...
     });
}

But this does not seem clean and I'm not sure if it's a correct (or efficient) way to perform an operation asynchronously.
What can I do to accomplish this?
","The work that you're doing is inherently synchronous CPU bound work.  It's not inherently asynchronous as something like network IO is going to be.  If you would like to run some synchronous CPU bound work in another thread and asynchronously wait for it to be completed, then Task.Run is indeed the proper tool to accomplish that, assuming the operation is sufficiently long running to need to perform it asynchronously.
That said, there really isn't any reason to expose an asynchronous wrapper over your synchronous method.  It generally makes more sense to just expose the method synchronously, and if a particular caller needs it to run asynchronously in another thread, they can use Task.Run to explicitly indicate that need for that particular invocation.
","1975","<c#><.net><asynchronous><async-await><sha256>","8","7","3","2019-10-26 15:54:56","27133658","3","1","","","","2014-11-25 18:02:33",""
"27133618","Asynchronous SHA256 Hashing","I have the following method:
public static string Sha256Hash(string input) {
    if(String.IsNullOrEmpty(input)) return String.Empty;
    using(HashAlgorithm algorithm = new SHA256CryptoServiceProvider()) {
        byte[] inputBytes = Encoding.UTF8.GetBytes(input);
        byte[] hashBytes = algorithm.ComputeHash(inputBytes);
        return BitConverter.ToString(hashBytes).Replace(""-"", String.Empty);
    }
}

Is there a way to make it asynchronous? I was hoping to use the async and await keywords, but the HashAlgorithm class does not provide any asynchronous support for this.
Another approach was to encapsulate all the logic in a:
public static async string Sha256Hash(string input) {
     return await Task.Run(() => {
         //Hashing here...
     });
}

But this does not seem clean and I'm not sure if it's a correct (or efficient) way to perform an operation asynchronously.
What can I do to accomplish this?
","The overhead of running this asynchronously (using Task.Run) will probably be higher that just running it synchronously.
An asynchronous interface is not available because it is a CPU bound operation. You can make it asynchronous (using Task.Run) as you pointed out, but I would recommend against it.
","1975","<c#><.net><asynchronous><async-await><sha256>","8","1","3","2019-10-26 15:54:56","27133658","3","1","","","","2014-11-25 18:02:33",""
"27133618","Asynchronous SHA256 Hashing","I have the following method:
public static string Sha256Hash(string input) {
    if(String.IsNullOrEmpty(input)) return String.Empty;
    using(HashAlgorithm algorithm = new SHA256CryptoServiceProvider()) {
        byte[] inputBytes = Encoding.UTF8.GetBytes(input);
        byte[] hashBytes = algorithm.ComputeHash(inputBytes);
        return BitConverter.ToString(hashBytes).Replace(""-"", String.Empty);
    }
}

Is there a way to make it asynchronous? I was hoping to use the async and await keywords, but the HashAlgorithm class does not provide any asynchronous support for this.
Another approach was to encapsulate all the logic in a:
public static async string Sha256Hash(string input) {
     return await Task.Run(() => {
         //Hashing here...
     });
}

But this does not seem clean and I'm not sure if it's a correct (or efficient) way to perform an operation asynchronously.
What can I do to accomplish this?
","As stated by the other answerers, hashing is a CPU-bound activity so it doesn't have Async methods you can call. You can, however, make your hashing method async by asynchronously reading the file block by block and then hashing the bytes you read from the file. The hashing will be done synchronously but the read will be asynchronous and consequently your entire method will be async.
Here is sample code for achieving the purpose I just described.
public static async Threading.Tasks.Task<string> GetHashAsync<T>(this Stream stream) 
    where T : HashAlgorithm, new()
{
    StringBuilder sb;

    using (var algo = new T())
    {
        var buffer = new byte[8192];
        int bytesRead;

        // compute the hash on 8KiB blocks
        while ((bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length)) != 0)
            algo.TransformBlock(buffer, 0, bytesRead, buffer, 0);
        algo.TransformFinalBlock(buffer, 0, bytesRead);

        // build the hash string
        sb = new StringBuilder(algo.HashSize / 4);
        foreach (var b in algo.Hash)
            sb.AppendFormat(""{0:x2}"", b);
    }

    return sb?.ToString();
}

The function can be invoked as such 
using (var stream = System.IO.File.OpenRead(@""C:\path\to\file.txt""))
    string sha256 = await stream.GetHashAsync<SHA256CryptoServiceProvider>();

Of course,you could equally call the method with other hash algorithms such as SHA1CryptoServiceProvider or SHA512CryptoServiceProvider as the generic type parameter.
Likewise with a few modifications, you can also get it to hash a string as is specific to your case.
","1975","<c#><.net><asynchronous><async-await><sha256>","8","9","3","2019-10-26 15:54:56","27133658","3","1","","","","2014-11-25 18:02:33",""
"5413482","Saving a hashed string in Salesforce?","Not a SFDC expert but need to integrate a web form hosted in SFDC. For other reasons, this page needs to capture an initial password and send off the salted/sha256'd version of the password to another system or a human. I don't want to save the cleartext obviously.
What's the lightest touch way to hash the password before saving? I could do this in the browser except that I don't want to rely on Javascript.
","Apex has a Crypto class which has a generateDigest method you need, something like:
Blob hash = Crypto.generateDigest('SHA-256', Blob.valueOf(passwordString));

","1960","<hash><salesforce><sha256><apex-code>","2","1","2","2018-05-21 11:57:00","5419567","0","","1033581","","2018-05-21 11:57:00","2011-03-24 00:51:49",""
"5413482","Saving a hashed string in Salesforce?","Not a SFDC expert but need to integrate a web form hosted in SFDC. For other reasons, this page needs to capture an initial password and send off the salted/sha256'd version of the password to another system or a human. I don't want to save the cleartext obviously.
What's the lightest touch way to hash the password before saving? I could do this in the browser except that I don't want to rely on Javascript.
","Yes, you should add this code to an apex trigger.
trigger on sObject(before insert){
  for(sObject s: trigger.new){
    s.Hash__c = Crypto.generateDigest('SHA-256', Blob.valueOf(s.passwordString__c));
    s.passwordString__c = null;
  }
}

","1960","<hash><salesforce><sha256><apex-code>","2","2","2","2018-05-21 11:57:00","5419567","0","","1033581","","2018-05-21 11:57:00","2011-03-24 00:51:49",""
"33768598","ruby sha 256 hexidigest values are different from what python generates","I am using hashlib library in python and Digest::SHA256.hexdigest library in ruby
With python I tried, 
import hashlib
hasher = hashlib.sha256()
hasher.update(""xyz"")
hasher.digest()
hash = hasher.hexdigest()
print hash

output : 3608bca1e44ea6c4d268eb6db02260269892c0b42b86bbf1e77a6fa16c3c9282
With Ruby I tried,
require 'digest'
hasher   = Digest::SHA256.digest ""xyz""
hash   = Digest::SHA256.hexdigest(hasher)

output : ""18cefdae0f25ad7bb5f3934634513e54e5ac56d9891eb13ce456d3eb1f3e72e8""
Can anyone help me to understand why there is a difference? how can I get the same value as python ?
","I get the same results using the following code:
Python 3.5.0:
import hashlib
>>> hashlib.sha256(""xyz"".encode()).hexdigest()
'3608bca1e44ea6c4d268eb6db02260269892c0b42b86bbf1e77a6fa16c3c9282'

Ruby 2.2.3
require 'digest'
irb(main):001:0> Digest::SHA256.hexdigest(""xyz"")
=> ""3608bca1e44ea6c4d268eb6db02260269892c0b42b86bbf1e77a6fa16c3c9282""

OR

irb(main):002:0> H = Digest::SHA256.new()
=> #<Digest::SHA256: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855>
irb(main):003:0> H << ""xyz""
=> #<Digest::SHA256: 3608bca1e44ea6c4d268eb6db02260269892c0b42b86bbf1e77a6fa16c3c9282>
irb(main):004:0> H.hexdigest()
=> ""3608bca1e44ea6c4d268eb6db02260269892c0b42b86bbf1e77a6fa16c3c9282""

The issue lied within (in my opinion), that:
hasher = Digest::SHA256.digest ""xyz""
=> ""6\b\xBC\xA1\xE4N\xA6\xC4\xD2h\xEBm\xB0\""`&\x98\x92\xC0\xB4+\x86\xBB\xF1\xE7zo\xA1l<\x92\x82""`

which is not ""xyz:"". (disclaimer: I had barely used Ruby in the past).
","1954","<python><ruby><hash><sha256><hashlib>","2","0","2","2019-10-12 17:38:06","33768888","0","1","3009657","","2019-10-12 17:38:06","2015-11-17 22:50:38",""
"33768598","ruby sha 256 hexidigest values are different from what python generates","I am using hashlib library in python and Digest::SHA256.hexdigest library in ruby
With python I tried, 
import hashlib
hasher = hashlib.sha256()
hasher.update(""xyz"")
hasher.digest()
hash = hasher.hexdigest()
print hash

output : 3608bca1e44ea6c4d268eb6db02260269892c0b42b86bbf1e77a6fa16c3c9282
With Ruby I tried,
require 'digest'
hasher   = Digest::SHA256.digest ""xyz""
hash   = Digest::SHA256.hexdigest(hasher)

output : ""18cefdae0f25ad7bb5f3934634513e54e5ac56d9891eb13ce456d3eb1f3e72e8""
Can anyone help me to understand why there is a difference? how can I get the same value as python ?
","The ruby code you want is just 
require 'digest'
hash   = Digest::SHA256.hexdigest(""xyz"")

hexdigest takes as argument the string to digest, so what your previous code was doing was digesting the string (returning as a raw array of 32 bytes), and then computing the SHA256 of that & formatting as 64 hex characters.
The ruby digest library does also have an api similar to your python example:
hash = Digest::SHA256.new
hash.update 'xyz'
hash.hexdigest

For when you want to compute a hash incrementally
","1954","<python><ruby><hash><sha256><hashlib>","2","4","2","2019-10-12 17:38:06","33768888","0","1","3009657","","2019-10-12 17:38:06","2015-11-17 22:50:38",""
"32518363","Paypal SHA-256 changes, what impact for my IPN?","Today I received a mail from Paypal asking me to put my IPN up to date:
With a Link to see how to proceed
However my IPN is just something like this:
 <?php

    $req = 'cmd=_notify-validate';

    foreach ($_POST as $key => $value) {
    $value = urlencode(stripslashes($value));
    $req .= ""&$key=$value"";
    }

    $header = ""POST /cgi-bin/webscr HTTP/1.1\r\n"";


    $header .= ""Connection: close\r\n"";
    $header .= ""Host: www.paypal.com:443\r\n"";
    $header .= ""Content-Type: application/x-www-form-urlencoded\r\n"";
    $header .= ""Content-Length: "" . strlen($req) . ""\r\n\r\n"";


    $fp = fsockopen ('ssl://www.paypal.com', 443, $errno, $errstr, 30);

    if (!$fp) {
    // HTTP ERROR
    } else {
    fputs ($fp, $header . $req);
    while (!feof($fp)) {
    $res = fgets ($fp, 1024);
    if (strcmp (trim($res), ""VERIFIED"") == 0) {
    // process payment
    }
    else if (strcmp (trim($res), ""INVALID"") == 0) {

//some processes
    }
    }
    fclose ($fp);
    }
    ?>

Do I have anything to change?
PS: Since this thread has lot of success, I would like to say that I got all my 3 Paypal accounts blocked because my activity is ""too risky"" for them... I advise you to make as much as often payment to your bank account, otherwise you could have $4000 blocked like me and after 1 month they just take 3000$ back. Screw Paypal...
","As written on the link given by PayPal, you probably have nothing to change on your code.
But you have to verify that your Server/OS support SHA-2 (SHA-256).
You could find a list of some of them here : SHA-2 compatibility 
","1950","<php><ssl><paypal><paypal-ipn><sha256>","2","2","1","2015-10-03 07:41:07","32518656","0","","1415955","","2015-10-03 07:41:07","2015-09-11 07:54:42",""
"27368690","Verifying SHA256 Hash from MySQL Database in C#","I have created a program that is set up with a remote MySQL database. The database stores the login information for this program and the passwords are hashed using SHA256. If the user enters the correct information in the login form then they will proceed to the GUI.
My problem is verifying the hash on the user-end of things. How would I got about this? Most tutorials I have read are too over-explained and leave me confused.
Here is the code for my login button.
        try
        {
            string strConnect = ""Server=***;Port=***;Database=***;Uid=***;Pwd=***;"";
            MySqlConnection myConn = new MySqlConnection(strConnect);
            MySqlCommand selectCmd = new MySqlCommand(""select * from ***.*** where username='"" + txtUsername.Text + ""' and password='"" + txtPassword.Text + ""' ;"", myConn);
            MySqlDataReader myReader;
            myConn.Open();
            int count = 0;
            myReader = selectCmd.ExecuteReader();
            while (myReader.Read())
            {
                count = count + 1;
            }
            if (count == 1)
            {
                this.Close(); form2.Show();
            }
            else if (count > 1)
            {
                MessageBox.Show(""Theres 2 Users with that username Please contact administrator ...Access Denied"");
            }
            else
                MessageBox.Show(""Username or Password is Not correct .. Please try Again!"");

        }
        catch (Exception ex)
        {
            MessageBox.Show(ex.Message);
        }

","You just need to hash what the user typed in exactly the same way that you hashed the password when you stored it. Then, if the hashed password from the database matches the hashed password that the user just typed in, they typed the correct password.
Usually there is a random salt involved so if multiple people use the password ""password"" the hashed password won't look the same in the database. That has nothing to do with your current question, but should definitely be something you look into before you consider your ""storing passwords"" solution complete.
Here's an example of some code you might use:
byte[] passwordBytes = Encoding.Unicode.GetBytes(userTypedPassword);
//
// This is where you'd normally append or prepend the salt bytes
//
var hasher = System.Security.CryptographySHA256.Create();
byte[] hashedBytes = hasher.ComputeHash(passwordBytes);

Now it depends on how the hash is stored in the database, if it's just binary data you can compare the byte arrays. If it's stored as a base64 string, you can convert the bytes:
var hashedString = Convert.ToBase64String(hashedBytes);

...and then do a string comparison between the stored string and hashedString.
","1943","<c#><mysql><hash><sha256>","0","0","1","2014-12-08 23:15:56","27368728","0","1","","","","2014-12-08 23:07:56",""
"12041666","Why do I sometimes get different SHA256 hashes in Java and PHP?","So I have an odd little problem with the hashing function in PHP. It only happens some of the time, which is what is confusing me. Essentially, I have a Java app and a PHP page, both of which calculate the SHA256 of the same string. There hasn't been any issues across the two, as they calculate the same hash (generally). The one exception is that every once in a while, PHP's output is one character longer than Java's.
I have this code in PHP:
$token = $_GET[""token""];
$token = hash(""sha256"", $token.""<salt>"");
echo ""Your token is "" . $token;

99% of the time, I get the right hash. But every once in a while, I get something like this (space added to show the difference):
26be60ec9a36f217df83834939cbefa33ac798776977c1970f6c38ba1cf92e92 # PHP
26be60ec9a36f217df83834939cbefa33ac798776977c197 f6c38ba1cf92e92 # Java

As you can see, they're nearly identical. But the top one (computed by PHP) has one more 0 for some reason. I haven't really noticed a rhyme or reason to it, but it's certainly stumped me. I've tried thinking of things like the wrong encoding, or wrong return value, but none of them really explain why they're almost identical except for that one character.
Any help on this issue would be much appreciated.
EDIT: The space is only in the bottom one to highlight where the extra 0 is. The actual hash has no space, and is indeed a valid hash, as it's the same one that Java produces.
EDIT2: Sorry about that. I checked the lengths with Notepad++, and since it's different than my normal text editor, I misread the length by 1. So yes, the top one is indeed right. Which means that it's a bug in my Java code. I'm going to explore Ignacio's answer and get back to you.
","The top hash is the correct length; the bottom hash is output because the hexadecimal values were not zero-filled on output (note that it's the MSn of a byte). So, a bug in the Java program unrelated to the hash algorithm.
>>> '%04x %02x%02x %x%x' % (0x1201, 0x12, 0x01, 0x12, 0x01)
'1201 1201 121'

","1925","<java><php><sha256>","2","4","2","2012-08-20 17:07:25","12041846","6","1","212555","","2012-08-20 17:07:25","2012-08-20 16:42:57",""
"12041666","Why do I sometimes get different SHA256 hashes in Java and PHP?","So I have an odd little problem with the hashing function in PHP. It only happens some of the time, which is what is confusing me. Essentially, I have a Java app and a PHP page, both of which calculate the SHA256 of the same string. There hasn't been any issues across the two, as they calculate the same hash (generally). The one exception is that every once in a while, PHP's output is one character longer than Java's.
I have this code in PHP:
$token = $_GET[""token""];
$token = hash(""sha256"", $token.""<salt>"");
echo ""Your token is "" . $token;

99% of the time, I get the right hash. But every once in a while, I get something like this (space added to show the difference):
26be60ec9a36f217df83834939cbefa33ac798776977c1970f6c38ba1cf92e92 # PHP
26be60ec9a36f217df83834939cbefa33ac798776977c197 f6c38ba1cf92e92 # Java

As you can see, they're nearly identical. But the top one (computed by PHP) has one more 0 for some reason. I haven't really noticed a rhyme or reason to it, but it's certainly stumped me. I've tried thinking of things like the wrong encoding, or wrong return value, but none of them really explain why they're almost identical except for that one character.
Any help on this issue would be much appreciated.
EDIT: The space is only in the bottom one to highlight where the extra 0 is. The actual hash has no space, and is indeed a valid hash, as it's the same one that Java produces.
EDIT2: Sorry about that. I checked the lengths with Notepad++, and since it's different than my normal text editor, I misread the length by 1. So yes, the top one is indeed right. Which means that it's a bug in my Java code. I'm going to explore Ignacio's answer and get back to you.
","Actually it's the SECOND hash which seems to have an incorrect length (63). Could it be that it is generated by assembling two different tokens, and maybe the last one - which should be 16 characters - gets the initial zero removed?
","1925","<java><php><sha256>","2","2","2","2012-08-20 17:07:25","12041846","6","1","212555","","2012-08-20 17:07:25","2012-08-20 16:42:57",""
"15018301","Using SHA256 in PasswordDeriveBytes","Currently, I am working on a .NET application that needs encryption of the data that gets stored in a SQL Server 2008 database.
I used AES Encryption and the key is generated using a password and salt combination that are hashed using SHA1 by PasswordDeriveBytes. Now, I need to change the hash algorithm to SHA256 and as far as I know PasswordDeriveBytes accepts only MD5 and SHA1 as hash parameters. I just want to know if I can use PasswordDeriveBytes for implementing SHA256. 
If not, whats the alternative inbuilt class in .NET for the same purpose? Can I implement it manually? If implementing manually is the only solution, I may need help doing that. Thanks in advance.
","The alternative is Rfc2898DeriveBytes. It is much safer to use, especially if you require more than 20 bytes of output. It is of course not compatible with PasswordDeriveBytes. PasswordDeriveBytes is simply broken for any value over 20 bytes. Unfortunately PBKDF2 also has a drawback: it repeats all the iterations for any value over the hash size. In that case you may want to pair it with a KBKDF.
So it seems you cannot do this without reverting to an additional library. That's where Bouncy Castle may come it. It has a PBKDF2 functionality that you can simply initialize with a HMAC, which in turn you can initialize with a given hash algorithm. Please see the use of PBKDF2 in this stackoverflow question. You can simply replace the digest with Sha256Digest and you should be on your way.
Note: nothing is simple in crypto, it seems you need the bouncy source to achieve this.
","1921","<encryption><aes><sha1><sha256>","0","0","1","2013-02-22 14:30:14","15020566","0","","","","","2013-02-22 06:35:31",""
"12640296","Using Sha256 or Rfc2898DeriveBytes to create IC","Based on this: http://www.superstarcoders.com/blogs/posts/symmetric-encryption-in-c-sharp.aspx
I have written encryption/decryption of byte-arrays:
public static byte[] EncryptFile(string password, byte[] bytes, string salt)
    {
        using (RijndaelManaged aesEncryption = new RijndaelManaged())
        {
            DeriveBytes rgb = new Rfc2898DeriveBytes(password, Encoding.Unicode.GetBytes(salt));
            byte[] rgbKey = rgb.GetBytes(aesEncryption.KeySize >> 3);
            byte[] rgbIV = rgb.GetBytes(aesEncryption.BlockSize >> 3);
            aesEncryption.KeySize = 256;
            aesEncryption.Mode = CipherMode.CBC;
            aesEncryption.Padding = PaddingMode.PKCS7;
            aesEncryption.IV = rgbIV;
            aesEncryption.Key = rgbKey;
            using (ICryptoTransform crypto = aesEncryption.CreateEncryptor())
            {
                return crypto.TransformFinalBlock(bytes, 0, bytes.Length);
            }
        }
    }

    public static byte[] DecryptFile(string password, byte[] bytes, string salt)
    {
        using (RijndaelManaged aesEncryption = new RijndaelManaged())
        {
            DeriveBytes rgb = new Rfc2898DeriveBytes(password, Encoding.Unicode.GetBytes(salt));
            byte[] rgbKey = rgb.GetBytes(aesEncryption.KeySize >> 3);
            byte[] rgbIV = rgb.GetBytes(aesEncryption.BlockSize >> 3);
            aesEncryption.KeySize = 256;
            aesEncryption.Mode = CipherMode.CBC;
            aesEncryption.Padding = PaddingMode.PKCS7;
            aesEncryption.IV = rgbIV;
            aesEncryption.Key = rgbKey;
            using (ICryptoTransform crypto = aesEncryption.CreateDecryptor())
            {
                return crypto.TransformFinalBlock(bytes, 0, bytes.Length);
            }
        }
    }

But when calculating the IV and the key, should I instead use SHA256 instead of Rfc2898DeriveBytes? 
","No you should not use SHA256, SHA256 is a hashing function where Rfc2898DeriveBytes is used to implements password-based key derivation functionality.
A hash function can be used to verify data, where the Rfc2898DeriveBytes is used specifically to generate a key.
Via msdn Rfc2898DeriveBytes  and SHA256
","1919","<c#><encryption><sha256>","0","2","1","2016-08-16 15:25:08","12640395","2","","3739391","","2016-08-16 15:25:08","2012-09-28 12:45:55",""
"13652817","SHA-256 hashing yields the wrong result in Android","I am trying to encrypt 12345 using 1111 as salt using SHA-256 encoding and the answer I get is: 010def5ed854d162aa19309479f3ca44dc7563232ff072d1c87bd85943d0e930
which is not same as the value returned by this site.
Here's the code snippet:
public String getHashValue(String entity, String salt){
    byte[] hashValue = null;
    try {
        MessageDigest digest =  MessageDigest.getInstance(""SHA-256"");
        digest.update(entity.getBytes(""UTF-8""));
        digest.update(salt.getBytes(""UTF-8""));
        hashValue = digest.digest();
    } catch (NoSuchAlgorithmException e) {
        Log.i(TAG, ""Exception ""+e.getMessage());
    } catch (UnsupportedEncodingException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
    return BasicUtil.byteArrayToHexString(hashValue);
}

I have verified my printing method with a sample from SO and result is fine. Can someone tell me what's wrong here?
And just to clarify - when I encrypt same value & salt in iOS code, the returned value is same as the value given by the converting site.
","If you fill optional part for hmac secret in that site, HmacSHA256 algorithm will be used. 
Same result can be produced with this function:
public static String getHmac(String entity, String salt) throws Exception{
    Mac mac = Mac.getInstance(""HmacSHA256"");
    mac.init(new SecretKeySpec(salt.getBytes(), ""HmacSHA1""));
    byte[] bs = mac.doFinal(entity.getBytes());
    return new HexDumpEncoder().encode(bs); // use your favorite hex converter
}

If you want to get the same output from that site, try to hash this value ""123451111"" without hmac secret.
As obvious, calling MessageDigest.update twice is equivalent to calling it once with concatenated value.    
","1916","<android><hash><salt><sha256>","3","2","1","2016-02-29 01:32:04","13664633","2","6","4924793","","2016-02-29 01:32:04","2012-11-30 20:38:12",""
"4504876","PBKDF2-HMAC-SHA256 Objective-C implementation","Can someone point me to an implementation of PBKDF2 using HMAC-SHA256 to generate a key, in Objective-C.  This is part of the key generation process that I will later use for AES-CBC-Pad encryption.
Thanks in advance
","You can just simply borrow C implementation from OpenSSL or any other library.
","1907","<iphone><objective-c><hmac><sha256><pbkdf2>","4","4","1","2012-06-01 12:20:10","4571892","3","1","","","","2010-12-21 23:17:34",""
"3842420","Can't seem to generate hex-encoded string from SHA256 digest in Java","Can't seem to figure out where Im going wrong here:
 private static String generateHashFromFile(String filePath) {
  try {
   final int BUFSZ = 32768;
   MessageDigest sha = MessageDigest.getInstance(""SHA-256"");
   FileInputStream in = new FileInputStream(filePath);
   BufferedInputStream is = new BufferedInputStream(in, BUFSZ);
   byte[] buffer = new byte[BUFSZ];
   int num = -1;
   while((num = is.read(buffer)) != -1) {
    sha.update(buffer, 0, num);
   }
   is.close();
   byte[] hash = sha.digest();
   return byteArrayToHex(hash);
  } catch (NoSuchAlgorithmException e) {
   // TODO Auto-generated catch block
   e.printStackTrace();
  } catch (FileNotFoundException e) {
   // TODO Auto-generated catch block
   e.printStackTrace();
  } catch (IOException e) {
   // TODO Auto-generated catch block
   e.printStackTrace();
  }
  return null;
 }

 private static String byteArrayToHex(byte[] barray)
 {
     char[] c = new char[barray.length * 2];
     byte b;
     for (int i = 0; i < barray.length; ++i)
     {
         b = ((byte)(barray[i] >> 4));
         c[i * 2] = (char)(b > 9 ? b + 0x37 : b + 0x30);
         b = ((byte)(barray[i] & 0xF));
         c[i * 2 + 1] = (char)(b > 9 ? b + 0x37 : b + 0x30);
     }
     return new String(c);
 }

Im getting strings like:
"")469.76F5941+31E25)6,9,C26)978)4*917180A4C(B7C,E,D+6,7133C705167""
Clearly not hexadecimal!
Questions:

Is the hash generation code correct?
Is the hex encoding method correct?
Am I missing something with regards to encoding?

","A byte value is signed, and you are using the signed-preserving right-shift. This will result in negative values for b when computing the high-order nybble.
For example, consider what your code does with a byte value -112 (0x90). When right-shifting, it is first promoted to an int value, 0xFFFFFF90. Then it is shifted right 4 bits, preserving the sign, and becomes 0xFFFFFFF9. This is then cast back to a byte, which simply discards the high-order 24 bits, and 0xF9 (-7 decimal) is assigned to b. b is not greater than 9, so the resulting character is (-7 + 48), or ')'.
Do this instead:
int hi = (barray[i] & 0xF0) >>> 4, lo = barray[i] & 0xF;

The use of a byte as a local variable doesn't do any good on a 32- or 64-bit machine. In fact, the cast to byte is a wasted instruction.
","1899","<java><encoding><hash><hex><sha256>","0","0","3","2010-10-01 20:29:51","3842552","0","3","4913","","2010-10-01 19:33:56","2010-10-01 19:29:57",""
"3842420","Can't seem to generate hex-encoded string from SHA256 digest in Java","Can't seem to figure out where Im going wrong here:
 private static String generateHashFromFile(String filePath) {
  try {
   final int BUFSZ = 32768;
   MessageDigest sha = MessageDigest.getInstance(""SHA-256"");
   FileInputStream in = new FileInputStream(filePath);
   BufferedInputStream is = new BufferedInputStream(in, BUFSZ);
   byte[] buffer = new byte[BUFSZ];
   int num = -1;
   while((num = is.read(buffer)) != -1) {
    sha.update(buffer, 0, num);
   }
   is.close();
   byte[] hash = sha.digest();
   return byteArrayToHex(hash);
  } catch (NoSuchAlgorithmException e) {
   // TODO Auto-generated catch block
   e.printStackTrace();
  } catch (FileNotFoundException e) {
   // TODO Auto-generated catch block
   e.printStackTrace();
  } catch (IOException e) {
   // TODO Auto-generated catch block
   e.printStackTrace();
  }
  return null;
 }

 private static String byteArrayToHex(byte[] barray)
 {
     char[] c = new char[barray.length * 2];
     byte b;
     for (int i = 0; i < barray.length; ++i)
     {
         b = ((byte)(barray[i] >> 4));
         c[i * 2] = (char)(b > 9 ? b + 0x37 : b + 0x30);
         b = ((byte)(barray[i] & 0xF));
         c[i * 2 + 1] = (char)(b > 9 ? b + 0x37 : b + 0x30);
     }
     return new String(c);
 }

Im getting strings like:
"")469.76F5941+31E25)6,9,C26)978)4*917180A4C(B7C,E,D+6,7133C705167""
Clearly not hexadecimal!
Questions:

Is the hash generation code correct?
Is the hex encoding method correct?
Am I missing something with regards to encoding?

","Both your hash generation and hex encoding code works.  I would take a closer look at the contents of the file you're reading.
You can also write your hex encoding method like so:
public static String byteArrayToHex(byte[] barray) {
 StringBuffer sb = new StringBuffer();
 for (int i = 0; i < barray.length; i++) {
     String hex = Integer.toHexString(0xff & barray[i]);
     if (hex.length() == 1) sb.append('0');
     sb.append(hex);
 }
 return sb.toString();
}

","1899","<java><encoding><hash><hex><sha256>","0","1","3","2010-10-01 20:29:51","3842552","0","3","4913","","2010-10-01 19:33:56","2010-10-01 19:29:57",""
"3842420","Can't seem to generate hex-encoded string from SHA256 digest in Java","Can't seem to figure out where Im going wrong here:
 private static String generateHashFromFile(String filePath) {
  try {
   final int BUFSZ = 32768;
   MessageDigest sha = MessageDigest.getInstance(""SHA-256"");
   FileInputStream in = new FileInputStream(filePath);
   BufferedInputStream is = new BufferedInputStream(in, BUFSZ);
   byte[] buffer = new byte[BUFSZ];
   int num = -1;
   while((num = is.read(buffer)) != -1) {
    sha.update(buffer, 0, num);
   }
   is.close();
   byte[] hash = sha.digest();
   return byteArrayToHex(hash);
  } catch (NoSuchAlgorithmException e) {
   // TODO Auto-generated catch block
   e.printStackTrace();
  } catch (FileNotFoundException e) {
   // TODO Auto-generated catch block
   e.printStackTrace();
  } catch (IOException e) {
   // TODO Auto-generated catch block
   e.printStackTrace();
  }
  return null;
 }

 private static String byteArrayToHex(byte[] barray)
 {
     char[] c = new char[barray.length * 2];
     byte b;
     for (int i = 0; i < barray.length; ++i)
     {
         b = ((byte)(barray[i] >> 4));
         c[i * 2] = (char)(b > 9 ? b + 0x37 : b + 0x30);
         b = ((byte)(barray[i] & 0xF));
         c[i * 2 + 1] = (char)(b > 9 ? b + 0x37 : b + 0x30);
     }
     return new String(c);
 }

Im getting strings like:
"")469.76F5941+31E25)6,9,C26)978)4*917180A4C(B7C,E,D+6,7133C705167""
Clearly not hexadecimal!
Questions:

Is the hash generation code correct?
Is the hex encoding method correct?
Am I missing something with regards to encoding?

","Your hash generation code is correct. To convert byte[] barray into a hex string, you can simply do:
String c = new String();
for(short i = 0; i < barray.length; i++) {
    c += Integer.toString((barray[i] & 255) + 256, 16).substring(1).toUpperCase();
}

","1899","<java><encoding><hash><hex><sha256>","0","1","3","2010-10-01 20:29:51","3842552","0","3","4913","","2010-10-01 19:33:56","2010-10-01 19:29:57",""
"9162824","SHA256 hashed password validation in javascript","I'm trying to convert a c# program into javascript. 
The purpose is to validate a clear text password against its sha-256 hash stored in a database. This code will be executed server-side.
The c# program was implemented following this MSDN's article How to Hash Passwords. 
In order to validate my implementation, I was given an example hash for the password ""test"" with a randomly generated 4 characters long salt .
Here is what I wrote so far :
var unhashedPass = ""test"";
var originalHashedPass = ""F27B595D3CBBC60ACEAC68E4DA6A2629558FEC383E0B81F764E443C68B0E9808096CDF2D"";

var saltStringLength = 4;
var unicodeCharLength = 2;
var saltHexLength = unicodeCharLength * saltStringLength;
var saltHex = originalHashedPass.substr(0, saltHexLength);

var strSalt1 = String.fromCharCode(parseInt(saltHex.substr(0, 2), 16).toFixed());
var strSalt2 = String.fromCharCode(parseInt(saltHex.substr(2, 2), 16).toFixed());
var strSalt3 = String.fromCharCode(parseInt(saltHex.substr(4, 2), 16).toFixed());
var strSalt4 = String.fromCharCode(parseInt(saltHex.substr(6, 2), 16).toFixed());

//var strSalt = str2rstr_utf16le(strSalt1 + strSalt2 + strSalt3 + strSalt4);
var strSalt = strSalt1 + strSalt2 + strSalt3 + strSalt4;

var finalHash = saltHex + hex_sha256(strSalt + unhashedPass).toUpperCase();

return (finalHash == originalHashedPass);

This code is one of multiple variants I tried, attempting to transform the hexadecimal salt in a valid string (see commented line for example). None seemed to work.
hex_sha256 and str2rstr_utf16le functions come from this javascript SHA implementation 
I assume the c# part I fail to correctly ""translate"" in javascript is the conversion of the salt into a string.
binarySaltValue[0] = byte.Parse(saltValue.Substring(0, 2), System.Globalization.NumberStyles.HexNumber, CultureInfo.InvariantCulture.NumberFormat);
binarySaltValue[1] = byte.Parse(saltValue.Substring(2, 2), System.Globalization.NumberStyles.HexNumber, CultureInfo.InvariantCulture.NumberFormat);
binarySaltValue[2] = byte.Parse(saltValue.Substring(4, 2), System.Globalization.NumberStyles.HexNumber, CultureInfo.InvariantCulture.NumberFormat);
binarySaltValue[3] = byte.Parse(saltValue.Substring(6, 2), System.Globalization.NumberStyles.HexNumber, CultureInfo.InvariantCulture.NumberFormat);

I noticed that the c# implementation uses array of bytes but I guess I have to use strings in javascript.
I also wonder if my issue has something to do with the fact that the c# program is computing Unicode encoded strings. 
Do you have any suggestion ?

EDIT
To clarify my problem : I can't manage to validate in javascript the password ""test"" against it's SHA256 salted hash ""F27B595D3CBBC60ACEAC68E4DA6A2629558FEC383E0B81F764E443C68B0E9808096CDF2D"" (calculated earlier in a c# program).
","Since you're saying this is server side, I'm guessing Node, in which case:
https://github.com/brainfucker/hashlib
If it's something other than node:
https://github.com/h2non/jsHashes
but that will be slower than the first one since it's a pure JS implementation (the first is in C exposed to JS)
","1873","<c#><javascript><hash><passwords><sha256>","2","1","1","2012-02-07 09:21:17","","6","","240812","","2012-02-07 09:21:17","2012-02-06 15:49:25",""
"35759730","Error using PostgreSQL digest function trying to check password","I'm using PostgreSQL 9.5 and trying to comprehend how to store passwords with digest and crypt functions within the pgcrypto module.
I have a table like this: 
CREATE TABLE ""usuarios"" (
""id"" integer NOT NULL ,
""password"" varchar(120),
CONSTRAINT usuarios_pk PRIMARY KEY (""id"")
);

I succesfully saved the first row with this query: 
INSERT INTO public.usuarios VALUES (DEFAULT,digest('somesalt' || 'mypass','sha256'));

I took the idea of the global salt and the digest using the sha256 algorithm reading this post and the official documentation following the example using crypt() 
My problem is, when I try to compare the password in pgAdmin with the following query:
SELECT (usuarios.password = digest('somesalt' || 'mypass','sha256')) AS Match FROM usuarios; 

I get an error mismatching password type( varchar) and digest type (bytea). I have been looking around for a workaround or how the cast would be but cannot find it or, maybe cannot understand what's under my nose.
Any help?
","You need to cast your digest, eg (note the ::varchar after digest):
SELECT (usuarios.password = digest('somesalt' || 'mypass','sha256')::varchar) AS Match FROM usuarios;

Also note that sha256 isn't really good for password hashing, and the PostgreSQL has better functions for password hashing. Also see this SO answer.
","1859","<postgresql><sha256><digest>","0","0","1","2016-03-02 22:57:18","35759885","0","1","-1","","2017-05-23 12:08:35","2016-03-02 22:46:34",""
"25397741","c# sha256 compute password hash by using username as salt","I am trying to compute password hash with username as a salt. I have stored password_hash and password_salt in MySQL database. 
-- Generate salt
SET @salt = UNHEX(SHA2(UUID(), 256));

-- Create user and hash password with salt
INSERT INTO users (username, password_salt, password_hash)
  VALUES ('ajay', @salt, UNHEX(SHA2(CONCAT('ajay123', HEX(@salt)), 256)));

By using above method I insert the value in database. Now I am trying to login to my site by username and password but I have a problem in authenticating to user. I am trying to compute hash of password in c# but I am getting wrong one. I have tried following code.
 byte[] ComputedHashpass = ComputeHash(""ajay"", ""ajay123"");            
 var result = ComputedHashpass.SequenceEqual(passHash);

  public static byte[] ComputeHash(string salt,string password)
   {
       // Convert plain text into a byte array.
       byte[] plainTextBytes = Encoding.UTF8.GetBytes(password);
       byte[] saltBytes = Encoding.UTF8.GetBytes(salt);

       SHA256Managed hash = new SHA256Managed();

       // Compute hash value of salt.
       byte[] plainHash = hash.ComputeHash(plainTextBytes);

       byte[] concat = new byte[plainHash.Length + saltBytes.Length];

       System.Buffer.BlockCopy(saltBytes, 0, concat, 0, saltBytes.Length);
       System.Buffer.BlockCopy(plainHash, 0, concat, saltBytes.Length, plainHash.Length);

       byte[] tHashBytes = hash.ComputeHash(concat);

       // Convert result into a base64-encoded string.
       //string hashValue = Convert.ToBase64String(tHashBytes);

       // Return the result.
       //return hashValue;
       return tHashBytes;
   }

UPDATED METHOD
   public static byte[] ComputeHash(string salt,string password)
   {
       // Convert plain text into a byte array.
       byte[] plainTextBytes = Encoding.UTF8.GetBytes(password);
       byte[] saltBytes = Encoding.UTF8.GetBytes(salt);

       SHA256Managed hash = new SHA256Managed();

       // Compute hash value of salt.
       //byte[] plainHash = hash.ComputeHash(plainTextBytes);

       // Compute hash value of salt.
       byte[] saltHash = hash.ComputeHash(saltBytes);
       byte[] concat = new byte[plainTextBytes.Length + saltHash.Length];
       System.Buffer.BlockCopy(plainTextBytes, 0, concat, 0, plainTextBytes.Length);
       System.Buffer.BlockCopy(saltHash, 0, concat, plainTextBytes.Length, saltHash.Length);


       //byte[] concat = new byte[plainHash.Length + saltBytes.Length];

       //System.Buffer.BlockCopy(saltBytes, 0, concat, 0, saltBytes.Length);
       //System.Buffer.BlockCopy(plainHash, 0, concat, saltBytes.Length, plainHash.Length);

       byte[] tHashBytes = hash.ComputeHash(concat);

       // Convert result into a base64-encoded string.
       //string hashValue = Convert.ToBase64String(tHashBytes);

       // Return the result.
       //return hashValue;
       return tHashBytes;
   }

Here I used salt as username. Can some one help me to solve this. How can I compute the hash password?
I want to do following steps.
To check whether a username/password combination is valid:
1: Query the salt using the entered username
2: Apply the hash function to the password and salt
3: Compare the result against the stored hash

","Update 2
(Removed the previous text to not to confuse).
The updated code you wrote is not what I proposed.
This is something more like what I propsed:
-- Generate salt
SET @salt = UNHEX(SHA2(UUID(), 256));

-- Create user and hash password with salt
INSERT INTO users (username, password_salt, password_hash)
  VALUES ('ajay', @salt, UNHEX(SHA2(CONCAT('ajay123', @salt), 256)));


public static byte[] ComputeHash(string salt,string password)
{
  byte[] plainTextBytes = Encoding.UTF8.GetBytes(password);
  byte[] saltBytes = Encoding.UTF8.GetBytes(salt);

  byte[] concat = new byte[plainTextBytes.Length + saltBytes .Length];
  System.Buffer.BlockCopy(plainTextBytes, 0, concat, 0, plainTextBytes.Length);
  System.Buffer.BlockCopy(saltBytes , 0, concat, plainTextBytes.Length, saltBytes .Length);

  SHA256Managed hash = new SHA256Managed();

  byte[] tHashBytes = hash.ComputeHash(concat);

  return tHashBytes;
}

","1850","<c#><mysql><asp.net><hash><sha256>","1","1","1","2014-08-20 07:43:09","","0","1","1261518","","2014-08-20 07:02:22","2014-08-20 06:04:57",""
"13331478","Matching Java SHA2 Output vs MySQL SHA2 Output","When I reproduce a SHA2 hash via the following code:
MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
digest.digest(""A"".getBytes(""UTF-8""));

it gives me a byte array, which is: 85,-102,-22,-48,-126,100,-43,121,93,57,9,113,-116,-35,5,-85,-44,-107,114,-24,79,-27,85,-112,-18,-13,26,-120,-96,-113,-33,-3
But when I reproduce same hash via MySQL it gives me a string which is: 5cfe2cddbb9940fb4d8505e25ea77e763a0077693dbb01b1a6aa94f2
How can I convert tha Java's result so that I can compare it with MySQL's result?
","First check out your DB result it looks like your initial hash is actually a SHA-224 not SHA-256:
mysql> SELECT SHA2(""A"", 224);
+----------------------------------------------------------+
| SHA2(""A"", 224)                                           |
+----------------------------------------------------------+
| 5cfe2cddbb9940fb4d8505e25ea77e763a0077693dbb01b1a6aa94f2 |
+----------------------------------------------------------+
1 row in set (0.00 sec)

Instead of:
mysql> SELECT SHA2(""A"", 256);
+------------------------------------------------------------------+
| SHA2(""A"", 256)                                                   |
+------------------------------------------------------------------+
| 559aead08264d5795d3909718cdd05abd49572e84fe55590eef31a88a08fdffd |
+------------------------------------------------------------------+
1 row in set (0.06 sec)

From there you're on the right track you just need to convert the byte[] output to a hex string.
import java.security.MessageDigest;

public class TestSHA256 {

    public static void main(String[] args) {
        try {
            MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
            byte[] hash = digest.digest(""A"".getBytes(""UTF-8""));

            StringBuilder hexString = new StringBuilder();
            for (int i: hash) {
                hexString.append(Integer.toHexString(0XFF & i));
            }
            System.out.println(hexString);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

Output:
559aead08264d5795d399718cdd5abd49572e84fe55590eef31a88a08fdffd

","1828","<java><hash><sha256><sha2>","1","4","2","2016-05-05 14:30:00","13331845","6","4","675844","","2012-11-11 13:45:05","2012-11-11 13:21:55",""
"13331478","Matching Java SHA2 Output vs MySQL SHA2 Output","When I reproduce a SHA2 hash via the following code:
MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
digest.digest(""A"".getBytes(""UTF-8""));

it gives me a byte array, which is: 85,-102,-22,-48,-126,100,-43,121,93,57,9,113,-116,-35,5,-85,-44,-107,114,-24,79,-27,85,-112,-18,-13,26,-120,-96,-113,-33,-3
But when I reproduce same hash via MySQL it gives me a string which is: 5cfe2cddbb9940fb4d8505e25ea77e763a0077693dbb01b1a6aa94f2
How can I convert tha Java's result so that I can compare it with MySQL's result?
","Integer.toHexString(0XFF & i) must be replaced with String.format(""%02x"", 0XFF & i), otherwise it only produces a 1 character output, while 2 characters are expected.
","1828","<java><hash><sha256><sha2>","1","3","2","2016-05-05 14:30:00","13331845","6","4","675844","","2012-11-11 13:45:05","2012-11-11 13:21:55",""
"38102044","Printing a hash in C","I am trying to print a SHA256 hash in C but when I use the for loop shown below, the only way the hash is printed is when I add the newline to printf. Ideally I want to print it all on one line. 
void enclave_main()
{
    char string[] = ""Hello World"";
    int x;

    unsigned char digest[SHA256_DIGEST_LENGTH];
    SHA256_CTX sha256;
    SHA256_Init(&sha256);
    SHA256_Update(&sha256, string, strlen(string));
    SHA256_Final(digest, &sha256);

    for(x = 0; x < SHA256_DIGEST_LENGTH; x++)
        printf(""%02x\n"", digest[x]);

    sgx_exit(NULL);
}

","Standard output is (typically) line-buffered, which means output won't be flushed to the terminal until the buffer is full or you send a newline or you flush the stream manually with fflush().  
The easiest thing to do is print the newline after the loop:
for(x = 0; x < SHA256_DIGEST_LENGTH; x++)
        printf(""%02x"", digest[x]);
putchar( '\n' );

","1813","<c><hash><hex><byte><sha256>","2","4","1","2016-06-29 14:11:41","38102227","2","","2469027","","2016-06-29 14:09:22","2016-06-29 14:05:04",""
"19717294","What parts of a file does SHA256 use to compute a hash","I am working on transferring files over the network.  There is zero tolerance for data loss during the transfers.  I've been asked to compute the SHA256 values for the original and the copied file to verify the contents are the same.  So far I have made comparisons based on copying and pasting the file, and letting Windows rename the file with the -copy appended to the filename.  I have also tried renaming the file after the rename above, as well as removing the file extension.  So far they all produce the same hash. I've also coded altering file attributes (just changed lastWrittenTime and fileCreationTime) and this does not seem to have an effect on the hash.
Checksum result of copying and pasting a file(explorer appends ""-copy to name):

E7273D248F191A0F914837A21BE39D229D790CA242D38651BAA06DAC9EBB63F7
E7273D248F191A0F914837A21BE39D229D790CA242D38651BAA06DAC9EBB63F7

Checksum result of renaming the -copy in explorer:

E7273D248F191A0F914837A21BE39D229D790CA242D38651BAA06DAC9EBB63F7
E7273D248F191A0F914837A21BE39D229D790CA242D38651BAA06DAC9EBB63F7

Checksum result of changing file extension:

E7273D248F191A0F914837A21BE39D229D790CA242D38651BAA06DAC9EBB63F7
E7273D248F191A0F914837A21BE39D229D790CA242D38651BAA06DAC9EBB63F7

What part/s of the file are used when the hash is created?
Ok, zero tolerance was a bit much, if the hash doesn't match the file will have to be resent.
","The entire binary file contents are streamed through the hashing algorithm. File metadata (such as name, date etc) doesn't play a part.
","1810","<c#><.net><sha256>","1","11","2","2013-11-01 19:36:14","19717306","6","","2943131","","2013-11-01 19:36:14","2013-10-31 21:56:55",""
"19717294","What parts of a file does SHA256 use to compute a hash","I am working on transferring files over the network.  There is zero tolerance for data loss during the transfers.  I've been asked to compute the SHA256 values for the original and the copied file to verify the contents are the same.  So far I have made comparisons based on copying and pasting the file, and letting Windows rename the file with the -copy appended to the filename.  I have also tried renaming the file after the rename above, as well as removing the file extension.  So far they all produce the same hash. I've also coded altering file attributes (just changed lastWrittenTime and fileCreationTime) and this does not seem to have an effect on the hash.
Checksum result of copying and pasting a file(explorer appends ""-copy to name):

E7273D248F191A0F914837A21BE39D229D790CA242D38651BAA06DAC9EBB63F7
E7273D248F191A0F914837A21BE39D229D790CA242D38651BAA06DAC9EBB63F7

Checksum result of renaming the -copy in explorer:

E7273D248F191A0F914837A21BE39D229D790CA242D38651BAA06DAC9EBB63F7
E7273D248F191A0F914837A21BE39D229D790CA242D38651BAA06DAC9EBB63F7

Checksum result of changing file extension:

E7273D248F191A0F914837A21BE39D229D790CA242D38651BAA06DAC9EBB63F7
E7273D248F191A0F914837A21BE39D229D790CA242D38651BAA06DAC9EBB63F7

What part/s of the file are used when the hash is created?
Ok, zero tolerance was a bit much, if the hash doesn't match the file will have to be resent.
","First, a general recommendation: don't do this. Use rsync or something similar to do bulk file transfers. Rsync has years of optimisations and debugging behind it, has countless options to control how (and whether) the copying happens, and is available on Windows. Don't waste time building something that has already been built.
But if you must…
Hashing algorithms generally care about bytes, not files. When applying SHA256 to a file, you are simply reading the bytes and passing them through the algo.
If you want to hash paths, permissions, etc, you should do this at the directory level, because these things constitute the ""contents"" of a directory. There is no standard byte-level representation of directories, so you'll have make one up yourself. Something that looks like a directory listing in sorted order usually suffices. And make sure that each entry contains the hash of the corresponding thing, be it a file or another directory. This way, the hash of the directory uniquely specifies not only the name and attributes of each child, but, recursively, the entire contents of the subdirectory.
Note: the fact that identical files have the same hash can actually work in your favour, by avoiding transmission of the second file once the system realises that a file with the same hash is already present at the destination. Of course, you would have to code for this explicitly. But also note that doing so can allow super-cheap syncing when files have been moved or copied, since they will have the same hash as before. Only affected directories (from the immediate parent(s) to the root) will have different hash values.
Finally, a minor quibble: there is no such thing as zero tolerance. Forget whether SHA256 collisions will happen in the lifetime of the Universe. A gamma ray can flip the bit that says, ""These two files don't match!"" Such flippings happen exceedingly rarely, but more often than you might think. In a noisy quantum universe, we should avoid talking in absolutes.
","1810","<c#><.net><sha256>","1","3","2","2013-11-01 19:36:14","19717306","6","","2943131","","2013-11-01 19:36:14","2013-10-31 21:56:55",""
"44771701","SHA256 HMAC using OpenSSL 1.1 not compiling","The code below generates a signed hash using HMAC SHA256. This code compiles and works fine on Debian Jessie and Ubuntu 16.04 (OpenSSL 1.0.2g  1 Mar 2016).
#include <openssl/evp.h>
#include <openssl/hmac.h>
#include <iomanip>
#include <iostream>
#include <string>
#include <sstream>

using namespace std;

string HMAC256(string data, string key)
{
        stringstream ss;
        HMAC_CTX ctx;
        unsigned int  len;
        unsigned char out[EVP_MAX_MD_SIZE];
        HMAC_Init(&ctx, key.c_str(), key.length(), EVP_sha256());
        HMAC_Update(&ctx, (unsigned char*)data.c_str(), data.length());
        HMAC_Final(&ctx, out, &len);
        HMAC_cleanup(&ctx); 
        for (unsigned int i = 0;  i < len;  i++)
        {
          ss << setw(2) << setfill('0') << hex << static_cast<int> (out[i]);
        }
        return ss.str();
}

int main()
{
    cout << HMAC256(""AAAA"",""BBBB"") << endl;
    return 0;
}

HOWEVER....
When compiling it on Debian Stretch I get the following error:
hmac256.cpp: In function ‘std::__cxx11::string HMAC256(std::__cxx11::string, std::__cxx11::string)’:
hmac256.cpp:14:18: error: aggregate ‘HMAC_CTX ctx’ has incomplete type and cannot be defined
         HMAC_CTX ctx;
                  ^~~
hmac256.cpp:18:9: warning: ‘int HMAC_Init(HMAC_CTX*, const void*, int, const EVP_MD*)’ is deprecated [-Wdeprecated-declarations]
         HMAC_Init(&ctx, key.c_str(), key.length(), EVP_sha256());
         ^~~~~~~~~
In file included from /usr/include/openssl/hmac.h:13:0,
                 from hmac256.cpp:2:
/usr/include/openssl/hmac.h:28:1: note: declared here
 DEPRECATEDIN_1_1_0(__owur int HMAC_Init(HMAC_CTX *ctx, const void *key, int len,
 ^

And this has to do with the new OpenSSL version (OpenSSL 1.1.0f  25 May 2017). 
QUESTION
Why am I experiencing the problem with OpenSSL 1.1, and how to fix it in a way that maintains backward compatibility with OpenSSL 1.0? 
","For fixing the error, please read: Upgrade To OpenSSL 1.1.0. Basically, you need to create a new HMAC_CTX as follows:
HMAC_CTX *h = HMAC_CTX_new();
HMAC_Init_ex(h, key, keylen, EVP_sha256(), NULL);
...
HMAC_CTX_free(h);

For backward compatibility, you can consider using macros to control the code block to compile.
","1806","<c++><openssl><debian><sha256><hmac>","1","1","1","2018-03-24 14:25:42","49465808","2","","608639","","2017-06-27 03:46:11","2017-06-27 03:09:37",""
"48645151","Checksum of large files in nodejs","I am in the process of writing a script to make a database of my pictures. I have a script that sort of works. It goes through a folder with 5,670 files totalling 13.08 GB of data in 9 minutes and 24 seconds. Then I try it on newer, larger photos the execution seems to decrease drastically. Within 20 minutes is has only calculated the hash of three small preview files in a folder with 431 files totalling 7.58 GB.
What am I doing wrong?
var fs = require('fs')
var crypto = require('crypto')
var util = require('util')
var p = require('path')
var sqlite3 = require('sqlite3').verbose()
var db = new sqlite3.Database('./sqlite.db')
const hash_algorithm = 'sha256'

var fileCount = 0

function getFiles(directory) {
    fs.readdir(directory, function(err, files) {
        for (var i in files) {
            var filepath = directory + '/' + files[i]
            fileStat(filepath)
        }
    })
}

function fileStat(filepath) {
    fs.stat(filepath, function(err, stats) {
        if (stats.isDirectory()) {
            getFiles(filepath)
        } else {
            computeHash(filepath, hash_algorithm, function(err, hash) {
                if (err) {
                    throw err
                }
                insertStat(filepath, hash, stats.size)
            })
        }
    })
}

function computeHash(filepath, algorithm, callback) {
    var hash = crypto.createHash(algorithm)
    var rs = fs.createReadStream(filepath)

    rs.on('open', function() {})

    rs.on('error', function(err) {
        throw err
    })

    rs.on('data', function(chunk) {
        hash.update(chunk)
    })

    rs.on('end', function() {
        hash = hash.digest('hex')
        return callback(null, hash)
    })
}

function getExif(filepath, callback) {

}

function insertStat(filepath, hash, size) {
    var sql = ""INSERT INTO files VALUES ($filename, $path, $hash, $size)""
    var filename = filepath.split('/')
    filename = filename[filename.length - 1]
    db.run(sql, {$filename: filename, $path: filepath, $hash: hash, $size: size})
    if (verbose) console.log('%s: %s', ++fileCount, filepath)
}

db.serialize(function() {
    db.run('CREATE TABLE files (filename text, path text, hash text, size integer)')
})

var verbose = true
var path = process.argv[2] || '.'
path = p.resolve(path)

if (verbose) console.log('path: %s', path)
getFiles(path)

","All your process is asynchronous. While it's good practice in javascript, you should keep control of your memory consumption:

You start opening your files asynchronously with fs.stat. Which means ALL your files.
Then you load them in memory using buffers, but you can't start processing them until they're completely loaded an hit the on('end',..). Which means ALL your files are competing to be FULLY loaded in your RAM.

Got it? Your memory usage is 100% and you have to hope a file got fully loaded and processed to release some memory for another one. That's what you're doing wrong.
So you need to get your memory usage back under control. Ideally, you should control how many files are processed at once. As a quick fix, I suggest you make it synchronous with fs.statSync.

Side notes
Your process also involves a database. That's the usual suspect for performance. Your code must log any db error. Here I see no potential deadlock or full scan. So no worries. Just make sure your table files is created before you start inserting.
Never use for..in to loop into an array. Use array.forEach() instead.
Please use semi-columns ; in your code. Yes, JavaScript most of the time can do without, but it will avoid you weird bugs and ease interpreter's job.
","1781","<node.js><checksum><sha256>","3","5","1","2018-02-06 15:13:06","48646193","0","1","","","","2018-02-06 14:19:41",""
"20055687","Using PHP to convert Bitcoin Private Key but get wrong SHA256?","https://en.bitcoin.it/wiki/Wallet_import_format
Trying to follow this example here to do this in PHP, but I get stuck at step 3.
I can't seem to get the same SHA256 hash.
I take the extended key from step 2 800C28FCA386C7A227600B2FE50B7CAE11EC86D3BF1FBE471BE89827E19D72AA1D
and SHA256 it.
I should get 8147786C4D15106333BF278D71DADAF1079EF2D2440A4DDE37D747DED5403592 according to step 3 but I just get E2E4146A36E9C455CF95A4F259F162C353CD419CC3FD0E69AE36D7D1B6CD2C09
What am I doing wrong?
","This is because you are hashing the literal string
""800C28FCA386C7A227600B2FE50B7CAE11EC86D3BF1FBE471BE89827E19D72AA1D""

This is not what what needs to happen.  This is a string of bytes.  It's in HEX format just to make viewing it easier.  In reality, this represents a binary string.  That's what you need to be hashing.
hex2bin is your friend here.
<?php
$hex = '800C28FCA386C7A227600B2FE50B7CAE11EC86D3BF1FBE471BE89827E19D72AA1D';
echo hash('sha256', hex2bin($hex));

DEMO: https://eval.in/69440
Another example:
<?php
$key = '0C28FCA386C7A227600B2FE50B7CAE11EC86D3BF1FBE471BE89827E19D72AA1D';
$binKey = hex2bin($key);

$binKey = hex2bin(80).$binKey;

echo hash('sha256', $binKey);

DEMO: https://eval.in/69443
","1780","<php><sha256><bitcoin>","0","3","2","2017-10-24 05:07:10","20055791","9","0","1906862","","2013-12-04 21:34:38","2013-11-18 19:01:27",""
"20055687","Using PHP to convert Bitcoin Private Key but get wrong SHA256?","https://en.bitcoin.it/wiki/Wallet_import_format
Trying to follow this example here to do this in PHP, but I get stuck at step 3.
I can't seem to get the same SHA256 hash.
I take the extended key from step 2 800C28FCA386C7A227600B2FE50B7CAE11EC86D3BF1FBE471BE89827E19D72AA1D
and SHA256 it.
I should get 8147786C4D15106333BF278D71DADAF1079EF2D2440A4DDE37D747DED5403592 according to step 3 but I just get E2E4146A36E9C455CF95A4F259F162C353CD419CC3FD0E69AE36D7D1B6CD2C09
What am I doing wrong?
","Here is the working PHP-code example:
<?php

//EXAMPLE INPUT: 0C28FCA386C7A227600B2FE50B7CAE11EC86D3BF1FBE471BE89827E19D72AA1D
//EXAMPLE OUTPUT: 5HueCGU8rMjxEXxiPuD5BDku4MkFqeZyd4dZ1jvhTVqvbTLvyTJ
//see https://en.bitcoin.it/wiki/Wallet_import_format for more info

function decodeHex($hex)
{
    $hex = strtoupper($hex);
    $chars = '0123456789ABCDEF';
    $return = '0';
    for($i = 0; $i < strlen($hex); $i++)
    {
        $current = (string)strpos($chars, $hex[$i]);
        $return = (string)bcmul($return, '16', 0);
        $return = (string)bcadd($return, $current, 0);
    }
    return $return;
}

function encodeBase58($hex)
{
    $orighex = $hex;
    $chars = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
    $hex = decodeHex($hex);
    $return = '';
    while(bccomp($hex, 0) == 1)
    {
        $dv = (string)bcdiv($hex, '58', 0);
        $rem = (integer)bcmod($hex, '58');
        $hex = $dv;
        $return = $return.$chars[$rem];
    }
    $return = strrev($return);

    //leading zeros
    for($i = 0; $i < strlen($orighex) && substr($orighex, $i, 2) == '00'; $i += 2)
    {
        $return = '1' . $return;
    }

    return $return;
}

if(!isset($_SERVER['argv'][1]))
{
    exit(""Usage: php convert_bitcoin_private_key_to_wif_format.php private_key\n"");
}

$privateKey = $_SERVER['argv'][1];

//add a 0x80 byte in front of it 
$buffer = '80' . $privateKey; 
$extendedKey = $buffer;

//perform SHA-256 hash on the extended key 
$buffer = strtoupper(hash('sha256', hex2bin($buffer)));

//perform SHA-256 hash on result of SHA-256 hash 
$buffer = strtoupper(hash('sha256', hex2bin($buffer)));

//take the first 4 bytes of the second SHA-256 hash, this is the checksum 
$checksum = substr($buffer, 0, 8);

//add the checksum at the end of the extended key
$buffer = $extendedKey . $checksum;

//convert the result from a byte string into a base58 string
$buffer = encodeBase58($buffer);

echo($buffer . ""\n"");

?>

","1780","<php><sha256><bitcoin>","0","0","2","2017-10-24 05:07:10","20055791","9","0","1906862","","2013-12-04 21:34:38","2013-11-18 19:01:27",""
"36321614","SHA-256 algorithm and/or de-hashing algorithm","I recently got into trying to learn about cryptography and found out about SHA-2 (SHA-256 in particular) and am unable to find an actual algorithm that goes through the hashing steps in particular. If someone has a working algorithm for JavaScript to put a string through SHA-256 hashing that would be helpful.
I know it may not be possible, but I am attempting to learn how SHA-256 hashes strings in order to attempt to try to reverse SHA-256. 
NOTE: I realize that this is the most common form of security hashing and in no way am I attempting to do harmful acts with this knowledge (if I succeed).
Edit1: If possible, I'd like the SHA-256 algorithm to fit within a single .js file. I am implementing the SHA-256 into a Tampermonkey script for myself, and want to also try to learn to reverse it.
","Here is an implementation of SHA-256 in JS. Let me know when you crack it.
Sha-256 is a one way hashing function meaning that it uses your input as a seed and returns an output of fixed length (in this case 256 bits). The algorithm is deterministic and seemingly random. This means that for any given input it will return the same output but when put up against statistical testing there is no correlation between the input and output.
Thus, there is no way to reverse a sha256 hash without using a brute force method of hashing random inputs. With current computing power this is not really a feasible option.
","1775","<javascript><algorithm><hash><sha256>","0","4","3","2019-10-17 09:43:21","36361053","6","","4607778","","2016-03-31 01:19:59","2016-03-30 23:33:29",""
"36321614","SHA-256 algorithm and/or de-hashing algorithm","I recently got into trying to learn about cryptography and found out about SHA-2 (SHA-256 in particular) and am unable to find an actual algorithm that goes through the hashing steps in particular. If someone has a working algorithm for JavaScript to put a string through SHA-256 hashing that would be helpful.
I know it may not be possible, but I am attempting to learn how SHA-256 hashes strings in order to attempt to try to reverse SHA-256. 
NOTE: I realize that this is the most common form of security hashing and in no way am I attempting to do harmful acts with this knowledge (if I succeed).
Edit1: If possible, I'd like the SHA-256 algorithm to fit within a single .js file. I am implementing the SHA-256 into a Tampermonkey script for myself, and want to also try to learn to reverse it.
","(Prompted by @Spectre, I'll post my initial comment as well as as additional relevant information (provided my @Spectre as well as the OP himself) as an answer)

Reversing the actual SHA-256 algorithm: not feasible, and not the way to go around when attempting to crack a given hashed password
It's (near) impossible for you to reverse the hash; hash cracking is instead focused of 

finding the hash algorithm, including salts,
followed by the brute-force method of hashing probable passwords and attempting to match the resulting hashes with some hash that you intend to ""crack"". 

If we'll, for the discussion, assume all hash algorithms as non-reversable, and instantly identifiable, the the strength of the hash will roughly depend of the complexity of the hashing algorithm; in the sense that re-hashing (as performed when attempting dictionary attacks etc) with a more sophisticated hash method such as SHA-256 will be orders of time slower than when re-hashing is performed using a naive non-salted hashing algorithm, say non-salted MD5.
There's no harm in roughly learning ""the hows"", and I suggest reading this excellent Ars Technica article on the subject:

ARS Technica - 
How I became a password cracker - Cracking passwords is officially a ""script kiddie"" activity now.

As well as this excellent security.SE Q&A

How to securely hash passwords?


Additional references
Collecting relevant additional information from the comments to your question (as these might not persist the tide of time):

As @Specte points out, a relevant thread worth visting is:

Are there any SHA-256 javascript implementations that are generally considered trustworthy?

Regarding the subject of why reversing hash algorithms is infeasible, you've pointed to a relevant security.SE thread yourself:

Why are hash functions one way? If I know the algorithm, why can't I calculate the input from it?


","1775","<javascript><algorithm><hash><sha256>","0","1","3","2019-10-17 09:43:21","36361053","6","","4607778","","2016-03-31 01:19:59","2016-03-30 23:33:29",""
"36321614","SHA-256 algorithm and/or de-hashing algorithm","I recently got into trying to learn about cryptography and found out about SHA-2 (SHA-256 in particular) and am unable to find an actual algorithm that goes through the hashing steps in particular. If someone has a working algorithm for JavaScript to put a string through SHA-256 hashing that would be helpful.
I know it may not be possible, but I am attempting to learn how SHA-256 hashes strings in order to attempt to try to reverse SHA-256. 
NOTE: I realize that this is the most common form of security hashing and in no way am I attempting to do harmful acts with this knowledge (if I succeed).
Edit1: If possible, I'd like the SHA-256 algorithm to fit within a single .js file. I am implementing the SHA-256 into a Tampermonkey script for myself, and want to also try to learn to reverse it.
","I recently use crypto-js/sha256.
You can install it using nodejs by this command: 
npm install --save crypto-js

","1775","<javascript><algorithm><hash><sha256>","0","-1","3","2019-10-17 09:43:21","36361053","6","","4607778","","2016-03-31 01:19:59","2016-03-30 23:33:29",""
"32833234","Encrypting MachineKey with AES256","I've spent a while googling this to no avail so either this is trickier than I thought or I fundamentally misunderstand how this works. 
My web server has a service whose web.config file contains a machinekey. I want to encrypt it.
  <system.web>
    <compilation debug=""true"" targetFramework=""4.5.1"" />
    <httpRuntime targetFramework=""4.5"" />
      <machineKey validationKey=""[SOME KEY]""
          decryptionKey=""[SOME OTHER KEY]""
          validation=""HMACSHA256"" decryption=""AES"" />
  </system.web>

To encrypt it is a simple powershell command:
C:\Windows\Microsoft.NET\Framework\v4.0.30319> & "".\aspnet_regiis"" /PEF ""system.web/machineKey"" ""[PATH TO FILE]""

This works fine. It encrypts. Decryption via the same method works fine too. HOWEVER, it defaults to Triple DES encryption. This is what the encrypted version of the machine key gives me:
<machineKey configProtectionProvider=""RsaProtectedConfigurationProvider"">
      ...
          <EncryptionMethod Algorithm=""http://www.w3.org/2001/04/xmlenc#tripledes-cbc"" />
          ...
  </machineKey>

We don't want that. We want ASPNET_REGIIS to be encrypting with AES 256. My research so far tells me this can be done by specifying a ""ProtectedConfigurationProvider"" using the /PROV argument on the encryption script. This should make reference to an encryption provider in:
C:\Windows\Microsoft.NET\Framework\v4.0.30319\Config\machine.config
I currently only have one provider in there, the default (RsaProtectedConfigurationProvider), which appears to be the one using Triple DES.
Does anyone have an idea of what steps need to be taken to get the machineKey encrypted via ASPNET_REGIIS using AES 256? Have I got something here terribly wrong?
Any help you can provide is greatly appreciated. 
","Chris, I don´t know if it can help you, but try to put it manually into your web.config:
 <machineKey validationKey=""AutoGenerate,IsolateApps"" decryptionKey=""AutoGenerate,IsolateApps"" validation=""AES"" decryption=""AES""/>

I guess it´s safer than adopt your own keys.
","1770","<.net><aes><sha256><machinekey><aspnet-regiis.exe>","0","0","1","2015-09-29 01:54:34","","0","","","","","2015-09-28 23:14:46",""
"43093759","How to calculate SHA256 of large files in php","I would like to calculate SHA256 of large files in PHP. Currently, I am using Amazon Glacier to store old files and their API to upload the archive. Initially, I just used small files that cannot reach to MB-sized images. When I tried to upload more than 1MB, the API response said that the checksum I gave to them is different from what they had calculated.
Here is my code to upload the file:
//get the sha256 using the file path
$image = //image path;
$sha256 = hash_file(""sha256"", $image);

$archive = $glacier->uploadArchive([
        'accountId' => '', 
        'body' => """",
        'checksum' => $sha256,
        'contentSHA256' => $sha256,
        'sourceFile' => $image,
        'vaultName' => 'my-vault'
    ]);

And the error:
AWS HTTP error: Client error: `POST https://glacier.us-west-2.amazonaws.com/vaults/70/archives` resulted in a `400 Bad Request` response:{""code"":""InvalidParameterValueException"",""message"":""Checksum mismatch: expected 9f1d4da29b6ec24abde48cb65cc32652ff589467 (truncated...)

I tried the function like below to check for the final hash but it seems it's not the right hash when I print it:
private function getFinalHash($file)
{
    $fp = fopen($file, ""r"");
    $ctx = hash_init('sha256');
    while (!feof($fp)) {
        $buffer = fgets($fp, 1024);
        hash_update($ctx, $buffer);
    }
    $hash = hash_final($ctx, true); print_r($hash);exit;
    fclose($fp);
}

The resulted hash is like this: ŸM¢›nÂJ½äŒ¶\Ã&RÿX”gíÖ'„IoA\C÷×
I presume that the only problem here is getting the final hash of the file. The file size is 5.7 MB. 
I think there has something to with the correct way of providing the checksum but I don't know how I should do it with large files. I really need your help.
","Managed to get the desired output, and get the digest validated by the following routine.
<?php
    $fileName = isset($argv[1]) ? $argv[1] : die(""Usage : php sha256.php <<filename>> <<hash>>"" . PHP_EOL);
    if(!file_exists($fileName))
        die(""FATAL : The file specified does not exists!"");

    $hash = isset($argv[2]) ? $argv[2] : die(""Usage : php sha256.php <<filename>> <<hash>>"" . PHP_EOL);

    $ctx = hash_init('sha256');

    echo(""INFO : Reading file $fileName ..."");
    $file = fopen($fileName, 'r');
    while(!feof($file)){
        $buffer = fgets($file, 1024);
        hash_update($ctx, $buffer);
    }
    echo("" DONE!"" . PHP_EOL);

    echo(""INFO : Calculating SHA256 hash of $fileName ..."");
    $hashRaw = hash_final($ctx, false); // Here, set the $raw_output to false
    echo("" DONE!"" . PHP_EOL);

    echo ($hash . "" INPUT "" . PHP_EOL);
    echo ($hashRaw . "" OUTPUT "" . PHP_EOL);

    if($hash == $hashRaw)
        echo(""INFO : Hash Comparison: OK!"" . PHP_EOL);
    else
        echo(""WARN : Hash Comparison: MISMATCH!"" . PHP_EOL);
    echo(""END"" . PHP_EOL);

Your problem is, you are setting $raw_output to true in string hash_final ( HashContext $context [, bool $raw_output = FALSE ] ), which will generate the output as raw binary data. Either set it to false or don't use it at all, because it defaults to false (see the doc). Hope this helps.
","1758","<php><hash><sha256>","2","0","1","2018-08-15 09:04:44","","5","","3126973","","2018-08-15 09:04:44","2017-03-27 09:45:17",""
"46286341","Base64 and HMAC SHA-256 encoding/decoding in Java","I am trying to get my GDAX balance, but I think I can't handle the encoding/decoding properly in Java.
The API reference is here: https://docs.gdax.com/#authentication, and the part I'm trying to do is under Accounts -> List Accounts (only have to scroll down a little bit from the above link) to just get the balance.
Here is the code that I have. I can't seem to get it working despite how much searching I've done on Google and here. I keep getting a 400 error from the server, meaning ""Bad Request – Invalid request format"".
    // Decode the secret key
    byte[] decodedSecret;
    try
    {
        decodedSecret = Base64.decode(SECRET_KEY);
    }
    catch (Base64DecodingException ex)
    {
        System.out.println(""Failed to decode secret key."");
        return null;
    }

    // Make the header parameters
    long timestamp = (new GregorianCalendar()).getTimeInMillis() / 1000;
    String preSign = """" + timestamp + ""GET"" + BASE_URL + ""/accounts"";

    byte[] encodedhash;
    try
    {
        Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
        try
        {
            sha256_HMAC.init(new SecretKeySpec(decodedSecret, ""HmacSHA256""));
        }
        catch (InvalidKeyException ex)
        {
            System.out.println(""Failed due to invalid key exception."");
            System.out.println(ex.getMessage());
            return null;
        }
        encodedhash = sha256_HMAC.doFinal(preSign.getBytes());
    }
    catch (NoSuchAlgorithmException ex)
    {
        System.out.println(""Failed to make SHA-256 encode because of no such algorithm."");
        return null;
    }

    HashMap<String, String> parameters = new HashMap<>();
    parameters.put(""CB-ACCESS-KEY"", API_KEY);
    parameters.put(""CB-ACCESS-SIGN"", Base64.encode(encodedhash));
    parameters.put(""CB-ACCESS-TIMESTAMP"", """" + timestamp);
    parameters.put(""CB-ACCESS-PASSPHRASE"", PASSPHRASE);

    // Send the request
    String response = sendGet(BASE_URL + ""/accounts"", parameters);

Here is the code I have inside sendGet() as well, in case that is where the problem is. I know it works without parameters, but I don't know if it uses the parameters properly or not since I can't get it to work.
    // Set up the connection
    URL url = null;
    try
    {
        url = new URL(urlStr);
    }
    catch (MalformedURLException ex)
    {
        return null;
    }
    HttpURLConnection con;
    try
    {
        con = (HttpURLConnection) url.openConnection();
    }
    catch (IOException ex)
    {
        System.out.println(""Returning null because of failure to open connection."");
        return null;
    }
    try
    {
        con.setRequestMethod(""GET"");
    }
    catch (ProtocolException ex) {}
    if (parameters != null) // if there are parameters to add to the connection
    {
        for (Map.Entry<String, String> pair : parameters.entrySet()) // for each pair in parameters
        {
            try
            {
                con.addRequestProperty(pair.getKey(), pair.getValue());
            }
            catch (Exception ex)
            {
                System.out.println(""Failed to add "" + pair.getKey() + ""."");
            }
        }
    }

    // Get the response
    int responseCode;
    try
    {
        responseCode = con.getResponseCode();

        BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
        StringBuilder responseBldr = new StringBuilder();
        String line;
        while ((line = in.readLine()) != null) // while we have read another line
        {
            responseBldr.append(line);
        }
        in.close();
        return responseBldr.toString();
    }
    catch (IOException ex)
    {
        System.out.println(""Returning null from network IOException."");
        System.out.println(ex.getMessage());
        return null;
    }

","I got this working locally. Looks like you're double encoding your signature. 
the steps for creating a signature are:

create the initial string that forms the basis of the signature
decode your secret to get a KeySpec (new SecretKeySpec())
init your HMAC with the keyspec (sha256Hmac.init())
use the secret to encode the request signature (sha256Hmac.doFinal())
base64 encode the result of step 4.

The only error you've made in the above snippet is to then base64 encode it again in your headers.
HTH
","1749","<java><base64><sha256><hmac>","0","0","1","2018-02-15 13:19:27","","7","3","","","","2017-09-18 18:55:41",""
"19396926","passlib.hash import sha256_crypt gives error when compiled with py2exe","I have a code written in Python where I am hashing the password using passlib.hash, sha256_crypt and then later verifying the password using the same library .
I am able to run the code using the console i.e. using .py.
My problem occurs when I compile this program using py2exe:
ImportError: No module named passlib.hash

I am importing the module using following command :
from passlib.hash import sha256_crypt

and sometimes I see a warning saying no module namedsha256_crypt in the GUI but the program still runs correctly.
I am using Windows 7 and could not find any solution to this problem. I have checked my python home directory it seems on installing passlib-1.6.1 , passlib-1.6.1-py2.7.egg file is created under C:\Python2.7.5\Lib\site-packages, however there are no files named passlib/hash or sha_256.
","In order to load only the hashers which have been explicitly requested, Passlib plays a dynamic import trick: passlib.hash is actually a special object which only imports each hasher class when requested ... the real hasher classes are actually stored in modules over in passlib's internal package passlib.handlers (in particular, passlib.hash:sha256_crypt is actually stored under passlib.handlers.sha2_crypt:sha256_crypt). 
Py2exe on the other hand try to be smart, and tries to walk your application's import tree, and only bundle the modules which are actually loaded. I find it frequently (and understandably) fouls up whenever it runs into a python package pulling dynamic import tricks (like the above). This ends up with the py2exe-packaged apps giving strange and hard to track down import errors. 
I'm not positive this will fix your problem, but the easiest solution I know of is to tell py2exe to include the entire passlib package, and not bother trying to ""guess"" which parts should be included. This can be done by adding ""passlib"" to py2exe's packages option...
setup(
    # ... other stuff ...
    options={
            ""py2exe"":{
                    # ... other stuff ...
                    ""packages"": [""passlib""],
            }
    }
)

","1748","<python><encryption><hash><sha256><pycrypto>","2","2","2","2015-06-23 21:51:31","","0","","589259","","2013-10-20 21:54:58","2013-10-16 06:51:26",""
"19396926","passlib.hash import sha256_crypt gives error when compiled with py2exe","I have a code written in Python where I am hashing the password using passlib.hash, sha256_crypt and then later verifying the password using the same library .
I am able to run the code using the console i.e. using .py.
My problem occurs when I compile this program using py2exe:
ImportError: No module named passlib.hash

I am importing the module using following command :
from passlib.hash import sha256_crypt

and sometimes I see a warning saying no module namedsha256_crypt in the GUI but the program still runs correctly.
I am using Windows 7 and could not find any solution to this problem. I have checked my python home directory it seems on installing passlib-1.6.1 , passlib-1.6.1-py2.7.egg file is created under C:\Python2.7.5\Lib\site-packages, however there are no files named passlib/hash or sha_256.
","Eli Collins is actually right and pointed me in the right direction.
You can solve your problem by typing the import more specifically.
I solved my sha512 problem by changing the import to be looking like this
from passlib.handlers.sha2_crypt import sha512_crypt

My py2exe distribution now works very well.
I know it's a little late for you, but it still might help someone, like it helped me. Kudos for having filed the question and also kudos to Eli!
","1748","<python><encryption><hash><sha256><pycrypto>","2","2","2","2015-06-23 21:51:31","","0","","589259","","2013-10-20 21:54:58","2013-10-16 06:51:26",""
"48181364","Openssl | dgst -sha256 -hmac different signatures than online and in java","I have been trying to figure out why the command in bash is generating a different signature than online converters as well as my java code.
Online and in Java it a value=""value"" and a key=""key"" generates the following sha256 signature in hex: 
90fbfcf15e74a36b89dbdb2a721d9aecffdfdddc5c83e27f7592594f71932481

OR 

This is across the board from online tools to my java code.
Yet in bash it produces the following output:

Does anyone know what would cause this difference? And which one is incorrect or is it printing in a different format?
Online Converter 1 OR Online Converter 2
","","1725","<bash><openssl><sha256><hmac>","3","","0","2018-12-27 22:13:00","","4","","29157","","2018-12-27 22:13:00","2018-01-10 06:18:37",""
"25358931","Unable to decrypt AES encrypted string from Objective C","I want encrypt and decrypt in Android and IOS and PHP. 
In android and in PHP using 

Encryption type: AES
Encryption Mode: CBC
Padding : PKCS7Padding
Hash Algorithm: SHA-256

when i encrypt and decrypt on android it works perfectly. but when I try to decrypt IOS or PHP encrypted String that is in Base64 or Hex2Binary. On android it decrypt string but first 16 character for IOS case and 19 character for PHP code it doest not decrypt showing other characters. I am pasting android code 
            // Ignore this line this is for encoding
            //String input = ""Congratulation, You've sucessfully decoded!"";

            final byte[] iv = new byte[16];
            Arrays.fill(iv, (byte) 0x00);
            IvParameterSpec ivParameterSpec = new IvParameterSpec(iv);

            // When I tried with this its gives ""pad block corrupted"" exception else work as above i told

            /*byte[] key = CommonUtilities.encryptionKey.getBytes(""UTF-8"");
            System.out.println(key.length);
            MessageDigest sha = MessageDigest.getInstance(""SHA-256"");
            key = sha.digest(key);
            key = Arrays.copyOf(key, 16); // use only first 128 bit
            System.out.println(key.length);
            System.out.println(new String(key,""UTF-8""));
            SecretKeySpec secretKey = new SecretKeySpec(key, ""AES"");*/

            // encryptionKey = ""12345678901234561234567890123456""; Same in IOS and PHP
            SecretKeySpec skeySpec = new SecretKeySpec(CommonUtilities.encryptionKey.getBytes(""UTF-8""), ""AES"");
            Cipher ecipher = Cipher.getInstance(""AES/CBC/PKCS7Padding"");

            // Ignore these lines these are for encoding
            /*ecipher.init(Cipher.ENCRYPT_MODE, skeySpec, ivParameterSpec);
            byte[] dstBuff = ecipher.doFinal(input.getBytes(""UTF-8""));              
            System.out.println(""encrypted: "" + new String(dstBuff, ""UTF-8"")); 
            String enbin2hex = com.byte2hex(dstBuff);    
            String en = Base64.encodeToString(dstBuff, Base64.DEFAULT);*/    


            // this is Hex2Binay that IOS gives me to decrypt
            // Original Text: ""hello shani how are you doing , Stuck in encryption ?""
            String strBin2Hex = ""30BEF4AB063D0D72F91D8D11A7ADEE1B1EC58F67C4D9CC20F59FB56B8B23B7C665198CFF805897BD1AFB82E578AC82C6C18C0EA909E17540D0B95A81E8446168"";



            ecipher.init(Cipher.DECRYPT_MODE, skeySpec, ivParameterSpec);
            byte[] de = ecipher.doFinal(com.hex2Byte(strBin2Hex));  

            //de = removeTrailingNulls(de);
            //int bytesDecryptedAfter = de.length;

            System.out.println(""decrypted: "" + new String(de, ""UTF-8""));
            // Decrypted String ""igohj&t`hnh""kkr&are you doing , Stuck in encryption ?""

Here you can see unable to decrypt full string ""hello shani how "" missing characters.
In IOS using 

AES256
kCCOptionPKCS7Padding
// IOS encrypt code
- (NSData *)AES256EncryptWithKey:(NSString *)key {
char keyPtr[kCCKeySizeAES256+1];     bzero(keyPtr, sizeof(keyPtr)); // fill with zeroes (for padding)




// fetch key data
[key getCString:keyPtr maxLength:sizeof(keyPtr) encoding:NSUTF8StringEncoding];

 NSUInteger dataLength = [self length];

 //See the doc: For block ciphers, the output size will always be less than or
 //equal to the input size plus the size of one block.
 //That's why we need to add the size of one block here
 size_t bufferSize = dataLength + kCCBlockSizeAES128;
 void *buffer = malloc(bufferSize);

 size_t numBytesEncrypted = 0;
 CCCryptorStatus cryptStatus = CCCrypt(kCCEncrypt, kCCAlgorithmAES128, kCCOptionPKCS7Padding,
                                  keyPtr, kCCKeySizeAES256,
                                  ""0000000000000000"" /* initialization vector (optional) */,
                                  [self bytes], dataLength, /* input */
                                  buffer, bufferSize, /* output */
                                  &numBytesEncrypted);
 if (cryptStatus == kCCSuccess) {
     //the returned NSData takes ownership of the buffer and will free it on deallocation
     return [NSData dataWithBytesNoCopy:buffer length:numBytesEncrypted];
 }

 free(buffer); //free the buffer;
 return nil;
 }


Any idea what i am doing wrong.
Thanks for you time
","I see the issues:

Cipher mode (CBC in android code) isn't specified on iOS
Algorithm is specified explicitly on iOS (AES128), and not on Android
Algorithm does not accord to the key size on iOS 128/256.
Initial vector is different

So, instead of
CCCryptorStatus cryptStatus = CCCrypt(kCCEncrypt, kCCAlgorithmAES128, kCCOptionPKCS7Padding,
                                  keyPtr, kCCKeySizeAES256,
                                  ""0000000000000000"" /* initialization vector (optional) */,
                                  [self bytes], dataLength, /* input */
                                  buffer, bufferSize, /* output */
                                  &numBytesEncrypted);
 if (cryptStatus == kCCSuccess) {
     //the returned NSData takes ownership of the buffer and will free it on deallocation
     return [NSData dataWithBytesNoCopy:buffer length:numBytesEncrypted];
 }

I would try
char iv[kCCBlockSizeAES128 + 1]; bzero(iv, sizeof(iv))
CCCryptorStatus cryptStatus = CCCrypt(kCCEncrypt, kCCAlgorithmAES, kCCOptionPKCS7Padding,
                                  keyPtr, kCCKeySizeAES128,
                                  iv,
                                  [self bytes], dataLength, /* input */
                                  buffer, bufferSize, /* output */
                                  &numBytesEncrypted);
 if (cryptStatus == kCCSuccess) {
     //the returned NSData takes ownership of the buffer and will free it on deallocation
     return [NSData dataWithBytesNoCopy:buffer length:numBytesEncrypted];
 }

Ensure, that Android also uses AES128
","1712","<android><ios><aes><sha256><pkcs#7>","0","3","1","2017-08-07 05:07:57","25361274","10","7","1675469","","2014-08-18 09:46:22","2014-08-18 08:16:14",""
"50010017","Decode a base64 encoded HMAC-SHA256 hash with python","I need help finding out how I can decode a base64 encoded HMAC-SHA256 hash with python.
From an API I'm given a base64 encoded HMAC-SHA256 hash of a secret key.
The message I get from the API is: ""Mw2aXjiDQABoNi5jB09ie8iTkET4t6JiQJSh+/jIceY=""
My secret is: ""testapp""
Using the answer from this post Calculating a SHA hash with a string + secret key in python
import hmac
import hashlib
import base64
dig = hmac.new(b'testapp', msg=b'Mw2aXjiDQABoNi5jB09ie8iTkET4t6JiQJSh+/jIceY=, digestmod=hashlib.sha256).digest()
base64.b64encode(dig).decode()

I get ""WTEb7ZIAPb89b0NV8NnI9+0x5alkng1LZ7Ffz39bveE=""
I expected a response equal to my message. What am I doing wrong here ?
Any help is appreciated.
Best regards
Kresten
","","1710","<python><base64><sha256><hmac>","0","","0","2018-04-24 20:09:28","","1","","","","","2018-04-24 20:09:28",""
"51978889","How to generate a SHA256 hash of 32 bytes using nodejs (crypto) in order to avoid bad key size error thrown from tweetnacl.js?","I am using the crypto module of node.js to generate a SHA256 hash like this:
const key = crypto.createHmac('sha256', data).digest('hex');

Now, tweetnacl throws the error: bad key size when the key is passed in the secretbox:
nacl.secretbox(data, Rnonc, key);

The parameters are converted into Uint8Array since the secretbox requires arguments to be Uint8Array.
The error: bad key size is throw from here in tweetnacl since the crypto_secretbox_KEYBYTES is defined as 32 here. The problem is the key returned from crypto is in not 32 bytes size. 
I have searched SO and relevant sites, but couldn't find any feasible solution but according to this - the SHA256 hash converted to hex produces: 

32 separate hexadecimal numbers (or 32 bytes)

How can I generate a SHA256 key of 32 bytes in order to avoid this error using node.js? Is there something I am doing wrong in generating the SHA256 hash? 
","The following code snippet solved the issue of generating a 32 bytes SHA256 hash avoiding the bad key size error thrown from tweetnacl.js:
const CryptoJS = require('crypto-js');

let hash   = CryptoJS.SHA256('hello world');
let buffer = Buffer.from(hash.toString(CryptoJS.enc.Hex), 'hex');
let array  = new Uint8Array(buffer);

This always generates a Uint8Array of 32 bytes size. Notice here I had to use the crypto-js module although I preferred to use the native crypto module but I guess I would just use it for now as it is a working solution. 
Thanks to @Arihant for pointing to this (check the comment section)
","1709","<javascript><node.js><sha256><cryptojs><nacl-cryptography>","1","1","1","2018-08-26 07:59:45","51997639","7","1","4397077","","2018-08-26 07:59:45","2018-08-23 05:29:01",""
"6846876","sha256 hash PHP and store on MySQL","Right now I have a website which allows users to upload a file which gets stored in a local directory on my server.  After the file has been uploaded, I preform a bunch of quite expensive operations to generate an HTML file for the user (using two java programs).  Because these operations are so expensive, I now want to be able to use SHA256 to keep a database of every file which has been uploaded.  That way, if someone uploads a file and that file has already been processed, I don't have to process it again I can just display the existing HTML.
In order to know for sure that the HTML that is associated to a file is up to date, I would also like to have the version of two java programs which I run on the file associated with the hashed value.
So the logic goes like this: 
  1. A user submits a file.
  2. If the file is not already on the server, business as usual.
  3. If it is, check which versions of the two java programs it used to generate the html
  4. If the current version is newer, regenerate the html.
I don't know a lot about SHA or MySQL so any help would be much appreciated.  Really the questions boils down to this: How can I store a bunch of hashed value and its two version identifiers on a MySQL database and retrieve that information later.
If the question is unclear let me know so I can clear up confusion.
Thanks!
","hash_file() can create a sha256 hash of the file.
For the db, I would imagine a table as follows
Table name: File_Hash with the columns 'id' {PK, AI, int}, 'hash' {text}, 'engine' {int}, 'filepath' {varchar}
With this layout you can store a reference to the file in 'filepath', the sha256 file hash in 'hash' and identify the java program used in 'engine' (1 for the first java program, 2 for the other).
","1708","<php><mysql><hash><sha256>","0","0","1","2011-10-19 23:43:11","","7","","707795","","2011-10-19 23:43:11","2011-07-27 15:21:42",""
"36047831","Generating DKIM signatures VIA Python for Custom MTA","Ok, so I am not completely lost with DKIM. I know the general rules of encoding and setting DNS records with your public key, etc. What I am having issues with is incorporating the ""on the fly"" signing of outbound emails and injecting into my header because my MTA it is custom, written in python from the ground up, not out of the box. Wondering if anyone had a small python example of sending even 1 email with DKIM, and going through all the motions. Like generating the 256 bit crypto body using your private key that matches the sister (public) key in your dns settings. 
","This should help.  
https://launchpad.net/dkimpy
I looked at the tests and the command line tools included in the project to learn how to use it.
Here is a code fragment which will give you an idea of how to use it. Sorry I can't provide more.
    self.dkim_private = open(os.path.join(settings.PROJECT_DIR, 'private_key.pem')).read()
    ... snip ...
    msg = MIMEMultipart('alternative')
    msg['From'] = ""{0} <{1}>"".format(self.sendfrom_name, self.sendfrom)
    msg['To'] = self.sendto
    msg['Date'] = formatdate(localtime=True)
    msg['Message-ID'] = self.message_id
    msg['Subject'] = self.subject

    msg.attach(MIMEText(unicodedata.normalize('NFKD', self.body_text), 'plain'))
    msg.attach(MIMEText(self.body, 'html'))

    sig = dkim.sign(msg.as_string(), 'myselector',
                    from_domain, self.dkim_private,
                    include_headers=['from', 'to', 'subject', 'message-id'])
    msg['DKIM-Signature'] = sig[len(""DKIM-Signature: ""):]

Then you use can use smtplib to send the email.
The private and public keys can be generated easily here:
https://www.port25.com/support/domainkeysdkim-wizard/
","1704","<python><email><base64><sha256><dkim>","1","3","3","2018-01-16 00:11:16","37300501","0","","","","","2016-03-16 22:04:30",""
"36047831","Generating DKIM signatures VIA Python for Custom MTA","Ok, so I am not completely lost with DKIM. I know the general rules of encoding and setting DNS records with your public key, etc. What I am having issues with is incorporating the ""on the fly"" signing of outbound emails and injecting into my header because my MTA it is custom, written in python from the ground up, not out of the box. Wondering if anyone had a small python example of sending even 1 email with DKIM, and going through all the motions. Like generating the 256 bit crypto body using your private key that matches the sister (public) key in your dns settings. 
","I would like to thank Georg Zimmer for the above answer.  I ran into some difficulties running this on Python 3.6.2 as some of the ""byte"" / ""string"" items have changed since 2.x versions.  Below is code to make a MIMEMultipart (text/HTML) and signed with DKIM.  I used dkimpy-0.6.2.
My very first StackOverflow post.  Hope it helps you...
import smtplib, dkim, time, os

from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText


print('Content-Type: text/plain')
print('')
msg = MIMEMultipart('alternative')
msg['From'] = 'test@example.com'
msg['To'] = 'person@anotherexample.com'
msg['Subject'] = ' Test Subject'
msg['Message-ID'] = ""<"" + str(time.time()) + ""-1234567890@example.com"" + "">""

# Create the body of the message (a plain-text and an HTML version).
text = """"""\
Test email displayed as text only
""""""

html = """"""\
<!doctype html>
<html xmlns=""http://www.w3.org/1999/xhtml"" xmlns:v=""urn:schemas-microsoft-com:vml"" xmlns:o=""urn:schemas-microsoft-com:office:office"">
    <head>
        <title>Test DKMI Email</title>
    </head>
    <body>
        HTML Body of Test DKIM
    </body>
</html>
""""""

# Record the MIME types of both parts - text/plain and text/html.
part1 = MIMEText(text, 'plain')
part2 = MIMEText(html, 'html')

msg.attach(part1)
msg.attach(part2)

# DKIM Private Key for example.com RSA-2048bit
privateKey = open(os.path.join('C:\\dev\\python\\', '2048.example.com.priv')).read()

# Specify headers in ""byte"" form
headers=[b'from', b'to', b'subject', b'message-id']

# Generate message signature
sig = dkim.sign(msg.as_bytes(), b'introduction', b'example.com', privateKey.encode(), include_headers=headers)
sig = sig.decode()

# Add the DKIM-Signature
msg['DKIM-Signature'] = sig[len(""DKIM-Signature: ""):]

# Send the message via local SMTP server.
s = smtplib.SMTP('localhost')
# sendmail function takes 3 arguments: sender's address, recipient's address
# and message to send - here it is sent as one string.
s.sendmail(msg['From'], msg['To'], msg.as_string())
s.quit()

","1704","<python><email><base64><sha256><dkim>","1","2","3","2018-01-16 00:11:16","37300501","0","","","","","2016-03-16 22:04:30",""
"36047831","Generating DKIM signatures VIA Python for Custom MTA","Ok, so I am not completely lost with DKIM. I know the general rules of encoding and setting DNS records with your public key, etc. What I am having issues with is incorporating the ""on the fly"" signing of outbound emails and injecting into my header because my MTA it is custom, written in python from the ground up, not out of the box. Wondering if anyone had a small python example of sending even 1 email with DKIM, and going through all the motions. Like generating the 256 bit crypto body using your private key that matches the sister (public) key in your dns settings. 
","To build on the previous two answers, I have a few additional tips.

Be sure you run 

pip install dkimpy


Generate the private key. On Unix:

openssl genrsa -out dkimprivatekey.pem 1024

Generate the public. On Unix:

openssl rsa -in dkimprivatekey.pem -out public.pem -pubout

Add the public key to your DNS with the selector ""introduction"" (which is what the example above uses.
Provide the path and filename to your private key in the code above (the example above uses C:\dev\python\ and 2048.example.com.priv)

","1704","<python><email><base64><sha256><dkim>","1","0","3","2018-01-16 00:11:16","37300501","0","","","","","2016-03-16 22:04:30",""
"48905438","Digital signature in c# without using BouncyCastle","Without using 3rd party BouncyCastle library, is there a way to read a custom private key and sign the message ? (sha256 hash+encryption using private key)
","Microsoft provides a class SignedXML to sign files. To know more, checkout https://msdn.microsoft.com/en-us/library/system.security.cryptography.xml.signedxml(v=vs.110).aspx
","1694","<c#><rsa><signature><sha256><digital>","2","0","2","2019-10-07 14:33:41","","0","","7357245","","2018-02-21 12:06:51","2018-02-21 12:02:32",""
"48905438","Digital signature in c# without using BouncyCastle","Without using 3rd party BouncyCastle library, is there a way to read a custom private key and sign the message ? (sha256 hash+encryption using private key)
","Technically, yes.  Depending on what kind of key you have the answer gets more tricky.
Edit (2019-Oct): .NET Core 3.0 has built-in support for all of these formats, in their DER-encoded (vs PEM-encoded) forms.  I'm adding the .NET Core 3.0+ answers after a sub-heading within each file format.
PKCS#8 PrivateKeyInfo (PEM ""BEGIN PRIVATE KEY"")
If you have this type of file, and you're on .NET 4.6 or higher, then yes.  You need to have the DER encoded (vs PEM encoded) data blob (see below if it's PEM).
using (CngKey key = CngKey.Import(blob, CngKeyBlobFormat.Pkcs8PrivateBlob))
using (RSA rsa = new RSACng(key))
{
    return rsa.SignData(data, HashAlgorithmName.SHA256, RSASignaturePadding.Pkcs1);
}

4.6 is required for for RSA, 4.6.1 for ECDSA, 4.6.2 for DSA.
.NET Core 3.0+ PKCS#8 PrivateKeyInfo
The ImportPkcs8PrivateKey method is declared on AsymmetricAlgorithm, and all asymmetric built-in types (RSA, DSA, ECDsa, ECDiffieHellman) support it.
using (RSA rsa = RSA.Create())
{
    rsa.ImportPkcs8PrivateKey(blob, out _);
    return rsa.SignData(data, HashAlgorithmName.SHA256, RSASignaturePadding.Pkcs1);
}

PKCS#8 EncryptedPrivateKeyInfo (PEM ""BEGIN ENCRYPTED PRIVATE KEY"")
Congratulations, your private key transport is strong.  Sadly, this requires the maximum amount of code to be written if you want to actually handle it.  You don't want to handle it. You really, really, want to 

Create a certificate for the key
Put the cert and key into a PFX file
Load the PFX into an X509Certificate2
Use cert.GetRSAPrivateKey(), cert.GetDSAPrivateKey(), or cert.GetECDsaPrivateKey() (as appropriate)

See How is a private key encrypted in a pem certificate?, and then continue to the next section for the primer on the hard way.  You have a lot more work than it will talk about, though.  You need to read the file, understand the encryption scheme and parameters, decrypt the blob, then use CNG for reading the PKCS#8, or just keep diving down the rabbit hole and enjoy your file parser.
.NET Core 3.0+ PKCS#8 EncryptedPrivateKeyInfo
The ImportEncryptedPkcs8PrivateKey method is declared on AsymmetricAlgorithm, and all asymmetric built-in types (RSA, DSA, ECDsa, ECDiffieHellman) support it.
using (RSA rsa = RSA.Create())
{
    rsa.ImportEncryptedPkcs8PrivateKey(password, blob, out _);
    return rsa.SignData(data, HashAlgorithmName.SHA256, RSASignaturePadding.Pkcs1);
}

PKCS#1 RSAPrivateKey (PEM ""BEGIN RSA PRIVATE KEY"")
You're at the unfortunate confluence of ""relatively simple"" and ""relatively hard"" that is known to math majors as ""an exercise left to the reader"".
Strongly consider doing the PFX approach from EncryptedPrivateKeyInfo.  Alternatively, you can do this in custom code.  Custom code? Okay, let's do this. The reference texts that you need at this point are

ITU.T-REC X.680-201508.


This defines the ASN.1 language, which tells you how to read the RSAPrivateKey (et al) object structure definition.
For RSAPrivateKey this is mostly optional, since there aren't many nuances to SEQUENCE that it uses, and INTEGER is pretty straightforward.

ITU.T-REC X.690-201508

This document describes the BER (and CER) and DER encoding rules for ASN.1.
These key files are in DER.  (Unless they're in PEM, but we'll fix that soon)

The RFC appropriate to your object type.


RSAPrivateKey (RFC 3447)
EncryptedPrivateKeyInfo (RFC 5208)
PrivateKeyInfo (also RFC 5208)
Other formats are in other RFCs.


Okay, let's proceed.

If the file is PEM encoded (""-----BEGIN RSA PRIVATE KEY-----"" or ""-----BEGIN PRIVATE KEY-----"", etc) you need to ""un-PEM"" it.


The PEM format is


(newline or beginning of file)
5 hyphens, BEGIN, space, the type identifier, 5 hyphens, a newline
a base64-encoded payload (with newlines after every 72 text characters)
a newline (unless you ended with a newline because you were a multiple of 72 text characters)
5 hyphens, END, the same type identifier as before, 5 hyphens

The part we want is the payload.  Run it through Convert.FromBase64String, and now we have the DER-encoded byte[] for the key object.

Using the type definition and the ITU documents, write a parser for your key file format.
Parse the key.
Convert the parsed key to an RSAParameters object (or DSAParameters, or ECParameters, as appropriate)
Call RSA.Create() (etc)
Load the key via the ImportParameters method.
Good to go.

For step 4, there are some things to be careful about.  Specifically, the ASN.1/DER INTEGER components have two rules that RSAParameters does not like.

All leading 0x00 values are removed.
If the leading byte has the high bit set (>=0x80) but the number was supposed to be positive, insert a 0x00.

.NET wants the values as big-endian byte arrays (which is the same byte order as the DER encoding) with the following relationship:

Exponent is as big as it needs to be, so long as it doesn't start with 0x00.
Modulus is as big as it needs to be, so long as it doesn't start with 0x00.
D must be the same size as modulus (insert 0x00 as necessary)
P must be ""half-round-up"" the size of Modulus ((Modulus.Length + 1) / 2), insert 0x00 as necessary.
Q, DP, DQ, and InverseQ must have the same length as P.  (Insert 0x00 as necessary).

.NET Core 3.0+ PKCS#1 RSAPrivateKey
The ImportRSAPrivateKey method is declared on RSA, and since it parses data and calls ImportParameters it works for all RSA derived types (assuming they already supported parameter import).
using (RSA rsa = RSA.Create())
{
    rsa.ImportRSAPrivateKey(blob, out _);
    return rsa.SignData(data, HashAlgorithmName.SHA256, RSASignaturePadding.Pkcs1);
}

Some other format
Determine what RFC defines the ASN.1 structure for your key format, then keep that in mind and evaluate the RSAPrivateKey section.
DSAParameters and ECParameters each have their own spatial expectations.
Further reading
Some of these include not-always-elegant, but frequently functioning code:

Export private/public keys from X509 certificate to PEM
How to parse(Convert to RSAParameters) X.509 private key in C#?
How to fix bad length error for DecodeRSAPrivateKey?
How to decrypt using rsa from PEM file

","1694","<c#><rsa><signature><sha256><digital>","2","5","2","2019-10-07 14:33:41","","0","","7357245","","2018-02-21 12:06:51","2018-02-21 12:02:32",""
"38620241","How to generate a SHA256 encrypted string in C#?","For a project I need to generate a SHA256 encrypted string in C#.
The requirements are Key: todaysDate and Value: ""exampleString"".
How can i realize that in C#? As far as I see the SHA256-Class does not contain a property for key in C#.
","SHA256 isn't an encryption algorithm, it's a hash algorithm. In other words, it's a one way function whose job is to take an input of any length and produce an output of fixed length with low collisions that's always the same for the same input. Thus, it doesn't receive a key as an input because the nature of hashing is quite different from that of encryption.
If you want to encrypt something with a key and later decrypt it by having the same key, look into symmetric encryption like AES (e.g. using the AesManaged class).
","1692","<c#><sha256>","-3","3","3","2016-07-27 19:27:34","","3","","","","","2016-07-27 18:08:02",""
"38620241","How to generate a SHA256 encrypted string in C#?","For a project I need to generate a SHA256 encrypted string in C#.
The requirements are Key: todaysDate and Value: ""exampleString"".
How can i realize that in C#? As far as I see the SHA256-Class does not contain a property for key in C#.
","You should do your own homework. If we do it for you, you learn nothing.
Also, as Theodoros mentioned, SHA256 is a hash, not encryption. A hash is a cryptographic checksum that is used to validate or compare data. It can not be reversed into the original plaintext, which is a requirement of encryption.

How can i realize that in C#? As far as I see the SHA256-Class does not contain a property for key in C#.

Either you or the person who gave you the assignment doesn't understand what is being asked.
SHA256 doesn't have a key or a value, it only has data going in and a hash coming out. No matter how much data you run through it, the size of the hash does not change, although it's value does. You can think of a hash as a fingerprint for a particular dataset. 
","1692","<c#><sha256>","-3","1","3","2016-07-27 19:27:34","","3","","","","","2016-07-27 18:08:02",""
"38620241","How to generate a SHA256 encrypted string in C#?","For a project I need to generate a SHA256 encrypted string in C#.
The requirements are Key: todaysDate and Value: ""exampleString"".
How can i realize that in C#? As far as I see the SHA256-Class does not contain a property for key in C#.
","Maybe something like this:
public static string sha256_hash(string sValue) {
  StringBuilder oResHash = new StringBuilder();

  using (SHA256 oHash = SHA256Managed.Create()) {
    Encoding oEnc = Encoding.UTF8;
    byte[] baResult = oHash.ComputeHash(oEnc.GetBytes(sValue));

    foreach (byte b in baResult)
      oResHash.Append(b.ToString(""x2""));
  }

  return oResHash.ToString();
}

","1692","<c#><sha256>","-3","-1","3","2016-07-27 19:27:34","","3","","","","","2016-07-27 18:08:02",""
"48613002","Sha-256 Python Hasher","I wanted to create a python program thats asks for an input then hashes(sha-256) the input then prints it. Does this already exist? How would I go about doing so.
","using hashlib:
Python 3.x
import hashlib

inp = input('Enter something: ')
print(hashlib.sha256(inp.encode('utf-8')).hexdigest())

Python 2.x
import hashlib
inp = raw_input('Enter something: ')
print hashlib.sha256(inp.encode('utf-8')).hexdigest()

","1675","<python><hash><sha256>","3","7","2","2018-02-12 00:56:25","48613256","1","","","","","2018-02-04 21:05:04",""
"48613002","Sha-256 Python Hasher","I wanted to create a python program thats asks for an input then hashes(sha-256) the input then prints it. Does this already exist? How would I go about doing so.
","I have programmed a package wich is able to do this.
Install the package like this:
pip3 install py_essentials

Use the module to hash strings:
from py_essentials import hasher as hs
text = ""text123""
hash = hs.checksum(text, ""sha256"")

","1675","<python><hash><sha256>","3","-1","2","2018-02-12 00:56:25","48613256","1","","","","","2018-02-04 21:05:04",""
"48528514","How to sign SHA256 hash and verify it using bouncy castle?","I'm trying to sign SHA256 hash of a base64 encoded json string and validate it against the signature generated.
I'm using the below code to sign the hash:
Required output: PKCS#7 signature of SHA-256 hash of Base64 of payload JSON using private key
String input=""Base64encodedJsonData"";
byte[] hashedData = DigestUtils.sha256(input.getBytes()); 

   ContentSigner signer = new JcaContentSignerBuilder(""SHA256WithRSA"").build(privateKey);
    Certificate cert = keystore.getCertificate(""KEY_ALIAS"");

    CMSSignedDataGenerator generator = new CMSSignedDataGenerator();        
    JcaSignerInfoGeneratorBuilder jcaSignerInfoGeneratorBuilder = new JcaSignerInfoGeneratorBuilder(new JcaDigestCalculatorProviderBuilder().setProvider(""BC"").build());
    generator.addSignerInfoGenerator(jcaSignerInfoGeneratorBuilder.build(signer,(X509Certificate) cert));

    CMSTypedData cmsdata = new CMSProcessableByteArray(hashedData);
    CMSSignedData signeddata = generator.generate(cmsdata,true);
    byte[] signedBytes= signeddata.getEncoded();
        String encrypted = Base64.getEncoder().encodeToString(signedBytes);

Verification:I'm using the below code to verify the signed data.It is returning false,which indicates invalid signature.
        boolean verifiedStatus = false;

byte[] signedBytes = Base64
                .decodeBase64(encrypted.getBytes());
        cmsSignedData = new CMSSignedData(
                new CMSProcessableByteArray(hashedData)),
                signedBytes);
        Store certStore = cmsSignedData.getCertificates();
        SignerInformationStore signers = cmsSignedData.getSignerInfos();
        Iterator signersIterator = signers.getSigners().iterator();
        while (signersIterator.hasNext()) {
            SignerInformation signer = (SignerInformation) signersIterator
                    .next();
            Collection certCollection = certStore
                    .getMatches(signer.getSID());
            Iterator certIt = certCollection.iterator();
            X509CertificateHolder certHolder = (X509CertificateHolder) certIt
                    .next();
            X509Certificate x509Certificate = new JcaX509CertificateConverter()
                    .setProvider(BC).getCertificate(certHolder);
            verifiedStatus = signer
                    .verify(new JcaSimpleSignerInfoVerifierBuilder()
                            .setProvider(BC).build(x509Certificate));//returning false

If I sign the base64 encoded string directly(without hashing),its returning true.I'm I missing something in the above code? Is there any different way to sign the SHA256 hash using bouncy castle? 
","","1673","<java><hash><digital-signature><bouncycastle><sha256>","1","","0","2018-02-01 07:11:41","","6","2","4270246","","2018-02-01 07:11:41","2018-01-30 18:49:19",""
"42136983","AES encryption with SHA256","What i need is to encrypt a string in AES with Sha256 with a key
    java code for the same encryption is

private static final String AES_KEY = ""something"";

String encodedText = null;
try {
    final MessageDigest md = MessageDigest.getInstance(""SHA-256"");
    final byte[] digestOfPassword = md.digest(AES_KEY.getBytes(""utf-8""));
    final SecretKey key = new SecretKeySpec(digestOfPassword, ""AES"");
    final Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
    final IvParameterSpec iv = new IvParameterSpec(new byte[16]);
    cipher.init(Cipher.ENCRYPT_MODE, key, iv);
    final byte[] plainTextBytes = orignalText.getBytes(""utf-8"");
    final byte[] encodeTextBytes = cipher.doFinal(plainTextBytes);

    encodedText = new Base64().encodeToString(encodeTextBytes);

}

but i need equivalent in C#, what i was able to develop as
private static byte[] ivBytes = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04,
    0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };

// keyBytes
private static byte[] keyBytes = new byte[] { 0x60, 0x3d, (byte) 0xeb,
    0x10, 0x15, (byte) 0xca, 0x71, (byte) 0xbe, 0x2b, 0x73,
    (byte) 0xae, (byte) 0xf0, (byte) 0x85, 0x7d, 0x77, (byte) 0x81,
    0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, (byte) 0xd7, 0x2d,
    (byte) 0x98, 0x10, (byte) 0xa3, 0x09, 0x14, (byte) 0xdf,
    (byte) 0xf4 };

public string AES_Encrypt(string ToBeEncrypted, string password)
{
    RijndaelManaged aes = new RijndaelManaged();

    aes.BlockSize = 128;
    aes.KeySize = 256;

    // It is equal in java 
    /// Cipher _Cipher = Cipher.getInstance(""AES/CBC/PKCS5PADDING"");    
    aes.Mode = CipherMode.CBC;
    aes.Padding = PaddingMode.PKCS7;

    SHA256 sha = new SHA256Managed();
    aes.Key = sha.ComputeHash(Encoding.UTF8.GetBytes(password));
    aes.IV = ivBytes;

    ICryptoTransform encrypto = aes.CreateEncryptor();

    byte[] plainTextByte = ASCIIEncoding.UTF8.GetBytes(ToBeEncrypted);
    byte[] CipherText = encrypto.TransformFinalBlock(plainTextByte, 0, plainTextByte.Length);

    string enc = BitConverter.ToString(CipherText).Replace(""-"", string.Empty);
    return Convert.ToBase64String(CipherText) + ""----""+ Convert.ToBase64String(ASCIIEncoding.UTF8.GetBytes(enc));
}

I am so much confused with term SHA256 in AES, and PKCS5Padding. I have used the same key that is used for encryption,  but not able to get same output as java code gives.  
","In Java you are using an empty/zero: IV
final IvParameterSpec iv = new IvParameterSpec(new byte[16]);

In C# you are using 000102030405060708090A0B0C0D0E0F
private static byte[] ivBytes = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04,
    0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };

Since you're having both perform the encryption and you're comparing the encrypted results, this will have a massive effect on the output.  (If one was decrypting and the other encrypting the errors would be limited to the first 16 bytes).
I also feel compelled to point out that SHA-2-256 is a terrible key derivation function.  If you're trying to turn a password into a key you should use a real KDF, like PBKDF2 (password-based key derivation function (version) 2).  In .NET it's implemented as Rfc2898DeriveBytes.  In Java it seems to be the ""PBKDF2WithHmacSHA1"" SecretKeyFactory.
","1655","<java><c#><aes><sha256>","1","2","1","2017-02-09 17:38:24","42143347","0","2","6535399","","2017-02-09 17:25:38","2017-02-09 12:39:26",""
"984680","Difference in SHA hashes between ruby and C#","I'm developing an application, that makes use of some REST web services.
It's technical documentation says that I should pass SHA256 hash of some string in the request.
In an example request (in the documentation) a string:

hn-Rw2ZHYwllUYkklL5Zo_7lWJVkrbShZPb5CD1expires=1893013926label[0]=any/somestatistics=1d,2d,7d,28d,30d,31d,lifetimestatus=upl,livetitle=a

After executing:
digest = Digest::SHA256.digest(string_to_sign)
signature = Base64::encode64(digest).chomp.gsub(/=+$/, '')

results in a hash:

YRYuN2zO+VvxISNp/vKQM5Cl6Dpzoin7mNES0IZJ06U

This example is in ruby, as the documentation is for ruby developers.
I'm developing my application in C# and for the exactly same string, when I execute:
byte[] rawHash = sha256.ComputeHash(rawRequest, 0, rawRequest.Length);
string friendlyHash = Convert.ToBase64String(rawHash);

and remove the trailing ""="" signs, I get:

Vw8pl/KxnjcEbyHtfNiMikXZdIunysFF2Ujsow8hyiw

and therefore, the application fails to execute resulting in an signature mismatch error.
I've tried changing the encoding while converting the string to a byte array preceding the hashing and nothing changed.
Any ideas?
","Based on the document here, you are missing a - (that is a dash) in your string.  Seems that Acrobat helpfully removes it in a copy paste from the document...
Here is some code that I splatted together that gets the same value as the example (well it would if you trimmed the final =)
    string s = ""hn-Rw2ZH-YwllUYkklL5Zo_7lWJVkrbShZPb5CD1expires=1893013926label[0]=any/somestatistics=1d,2d,7d,28d,30d,31d,lifetimestatus=upl,livetitle=a"";

    SHA256Managed sh = new SHA256Managed();
    byte[] request = System.Text.UTF8Encoding.UTF8.GetBytes(s);
    sh.Initialize();
    byte[] b4bbuff = sh.ComputeHash(request, 0, request.Length);

    string b64 = Convert.ToBase64String(b4bbuff);

","1655","<c#><ruby><hash><sha256>","2","8","1","2009-06-12 02:36:15","984752","10","","2753","","2009-06-12 02:16:27","2009-06-12 01:52:13",""
"9554608","In ColdFusion how can I match a posted password to an SHA256 encrypted password in my table?","I am creating a log in form using ColdFusion, but I cannot figure out the syntax to check the password in my table which is encrypted using SHA256. I have researched this and so far only found complicated answers, mostly unrelated to what I need.
Here is the code I have for my query:
   <cfquery name=""qVerify"" datasource=""MyDSN"">
SELECT  *
   FROM cryptuser
   WHERE firstname = '#firstname#'
   AND   password = '#password#'
</cfquery>

So a password entered and posted via form needs to be matched to a password encrypted in my table, does anyone know if this is possible?
Many thanks.
","you would just need to encrypt the password entered by the user and then use that variable in your query.
<cfset EncryptedPassword = Encrypt(form.password,'your key','SHA-256')>

<cfquery name=""qVerify"" datasource=""MyDSN"">
SELECT  *
FROM cryptuser
WHERE firstname = <cfqueryparam cfsqltype=""cf_sql_varchar"" value=""#firstname#"">
AND   password = <cfqueryparam cfsqltype=""cf_sql_varchar"" value=""#EncryptedPassword#"">
</cfquery>

","1647","<coldfusion><sha256>","2","1","2","2012-03-04 21:29:52","9555528","0","","","","","2012-03-04 11:47:58",""
"9554608","In ColdFusion how can I match a posted password to an SHA256 encrypted password in my table?","I am creating a log in form using ColdFusion, but I cannot figure out the syntax to check the password in my table which is encrypted using SHA256. I have researched this and so far only found complicated answers, mostly unrelated to what I need.
Here is the code I have for my query:
   <cfquery name=""qVerify"" datasource=""MyDSN"">
SELECT  *
   FROM cryptuser
   WHERE firstname = '#firstname#'
   AND   password = '#password#'
</cfquery>

So a password entered and posted via form needs to be matched to a password encrypted in my table, does anyone know if this is possible?
Many thanks.
","To encrypt with SHA-256 you don't use the encrypt() function but rather the hash() function (SHA is a one-way hash):
<cfset EncryptedPassword = Hash(form.password, ""SHA-256"") />

I believe CF will return an all-uppercase hash so make sure you compare to the uppercase of the password encrypted in the database:
AND UPPER(password) = <cfqueryparam cfsqltype=""CF_SQL_VARCHAR"" value=""#EncryptedPassword#"" />

Also watch for encoding! It's possible that the data in the database could have a different encoding than the default (e.g., iso-8859-1 rather than utf-8).
Hope this helps.
","1647","<coldfusion><sha256>","2","5","2","2012-03-04 21:29:52","9555528","0","","","","","2012-03-04 11:47:58",""
"1480930","MySQL on Windows: Using SHA-2","I need to store sensitive data (usernames and passwords) and wanted to do things the right way (storing SHA-256 hashes of (password).(large random number) instead of cleartext passwords.
This needs to be done using MySQL and, as far as i know, only MySQL 6 plans to incorporate SHA-2, hence i assume some kind of external application needs to be setup; I would like to make a stored procedure that would calculate the hash of the password (concatenated with the nonce) and store it.
In your opinion, what would be the best way to implement this?
I've read a few post here on Stackoverflow and i'm currently heading towards Perl.
Cheers,
Hal
PS: OS -> Windows Server 2008
EDIT: damn editor, won't show the correct text. Fixed.
EDIT2: I am not trying to make my own version of SHA2, although it would certainly be fun; i need to use it on a stored procedure in order to hash the original password and I'm just not sure what external module/application/library I should use.
","Your language of choice more than likely provides an implementation of SHA-256. Do not write your own implementation. That is just asking for trouble.
If you posted what your programming language is, I'm sure people would be more than happy to post back with links to documentation for that language.
PS: If you don't have a language in mind already, here's a PHP script I wrote a while back:
Ok, so apparently I lost it. But here is a simpler version:
<?php echo hash(""sha256"", file_get_contents(""php://input"")).""\n"" ?>

And then you can call it like:
php hash.php

Then type in your information and close inpute (ctrl-x? on Windows)
","1636","<mysql><windows><sha256><sha2>","1","2","2","2010-12-18 15:54:18","1480945","0","","89825","","2009-09-26 10:30:57","2009-09-26 10:19:22",""
"1480930","MySQL on Windows: Using SHA-2","I need to store sensitive data (usernames and passwords) and wanted to do things the right way (storing SHA-256 hashes of (password).(large random number) instead of cleartext passwords.
This needs to be done using MySQL and, as far as i know, only MySQL 6 plans to incorporate SHA-2, hence i assume some kind of external application needs to be setup; I would like to make a stored procedure that would calculate the hash of the password (concatenated with the nonce) and store it.
In your opinion, what would be the best way to implement this?
I've read a few post here on Stackoverflow and i'm currently heading towards Perl.
Cheers,
Hal
PS: OS -> Windows Server 2008
EDIT: damn editor, won't show the correct text. Fixed.
EDIT2: I am not trying to make my own version of SHA2, although it would certainly be fun; i need to use it on a stored procedure in order to hash the original password and I'm just not sure what external module/application/library I should use.
","MySQL 5.5 supports SHA2. 
http://dev.mysql.com/doc/refman/5.5/en/encryption-functions.html#function_sha2
","1636","<mysql><windows><sha256><sha2>","1","1","2","2010-12-18 15:54:18","1480945","0","","89825","","2009-09-26 10:30:57","2009-09-26 10:19:22",""
"42367566","Java deprecation of SHA-1 signatures: correct way to sign with SHA-256?","In light of Java's deprecation of SHA-1 signed code, I am transitioning to SHA-256. However, I am not sure whether, in order to comply with the new requirements, I should explicitly request the -digestalg SHA-256 (if not, it sefaults to SHA-1, as per this). (Side-note: although the public-private key pair in my JKS are RSA, I found I also had to explicitly ask -sigalg SHA256withRSA.)
Java 9 ""early access"" seems to accept just fine the SHA1 digest algorithm, as long as the signature algorithm is SHA256withRSA. I searched for a clear explanation of these exact terms (in the context...as reported by a jarsigner verification: ""Digest algorithm"", ""Signature algorithm"") / their implications, without too much success, though.
The JREs I am targeting are 6 or better. Using Java 6 on the build machine as well.
[L.E.] More confusingly for me, it seems that the jarsigner (in Java 9) verifies the jars (read: no complaints raised) even when both the digest algorithm and the signature algorithm are SHA-1, just on account that I have used an SHA256 certificate.
[L.E. 2] Interestingly, signing on Java 9 w/o providing any of the custom flags, and using the same JKS, everything is signed as expected:
Digest algorithm: SHA-256
 Signature algorithm: SHA256withRSA, 2048-bit key
I very much think this behavior underlines the ""proper practice"", rather than Java 6's. This may very well become the answer to this question...once Java 9 will be release. 
As another side-note, the Java Crypto Roadmap announces the same plan (Disable SHA-1 in certificate chains anchored by roots included by default in Oracle's JDK; local or enterprise CAs are not affected. Signed code that is timestamped before 2017-01-01 is not affected.) for Java 6, 7, 8 as well.
","","1624","<java><sha256><sign>","2","","0","2017-02-22 18:40:40","","0","1","-1","","2017-05-23 12:10:32","2017-02-21 12:37:29",""
"27643645","Double hash SHA256 in Python","Im trying to reproduce the following:
=========================================
 from Bitcoin Wiki
Transaction puzzle
Transaction '...' is an interesting puzzle.
given hash = 6fe28c0ab6f1b372c1a6a246ae63f74f931e8365e15a089c68d6190000000000

To spend the transaction you need to come up with some data such that hashing the data twice results in the given hash. The required data happened to be the Genesis block, and the given hash was the genesis block hash
==========================================
genesis = '000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f'
The following function doublehashes input(it works for step 14 in this example)
def function(input):
    data = input.decode('hex_codec')
    result = binascii.hexlify(hashlib.sha256(hashlib.sha256(data).digest()).digest())
    print result

But inputting the genesis hash, it produces the following result:
string:
""ae253ca2a54debcac7ecf414f6734f48c56421a08bb59182ff9f39a6fffdb588""
hex: 
""61 65 32 35 33 63 61 32 61 35 34 64 65 62 63 61 63 37 65 63 66 34 31 34 66 36 37 33 34 66 34 38 63 35 36 34 32 31 61 30 38 62 62 35 39 31 38 32 66 66 39 66 33 39 61 36 66 66 66 64 62 35 38 38 0d 0a""
I'm obviously doing something wrong but can't seem to figure out what. 

ANSWER: As mentioned by Falsaltru;
The required hash was used earlier to calculate the blockhash, thus why the hash itself was 'not hard to find'.
","You can get the given hash by reversing the genesis (bytes):
>>> import binascii                                                                             
>>> genesis = '000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f'
>>> given_hash = '6fe28c0ab6f1b372c1a6a246ae63f74f931e8365e15a089c68d6190000000000'
>>> binascii.unhexlify(given_hash) == binascii.unhexlify(genesis)[::-1]
True

","1611","<python><hash><bitcoin><sha256>","1","1","1","2014-12-25 16:39:34","27643799","1","1","-1","","2017-04-13 12:47:33","2014-12-25 01:52:25",""
"52297519","How does abi.encodePacked(...) and sha256(..) work in Solidity?","I'm trying to implement a signature in a Solidity contract and I'm having problems when it comes to comparing hashes. I calculate the hash with the following code in solidity:
sha256(abi.encodePacked(param1, ...., paramN);

Where:
abi.encodePacked(param1, ..., paramN) = [bytes: 0x0102030405060701]
and
sha255(abi.encodePacked(param1, ..., paramN)) = [bytes32: 
 0x245138c905599c8579ab186fbdbd6e62396aac35a98a6568f8803eed049d1251]
The main problem I'm having is that by using python sha256 on 0102030405060701 the result I'm getting is 5bc31e3decf480124c79c114744d111ec82b62e466a097c3ced6fe76cbace9a5.
What am I doing wrong?
","The issue is that you're hashing the string ""0102030405060701"", but you should be hashing the bytes that hexadecimal value represents:
>>> import hashlib
>>> import binascii
>>> hashlib.sha256(b'0102030405060701').hexdigest()
'5bc31e3decf480124c79c114744d111ec82b62e466a097c3ced6fe76cbace9a5'
>>> hashlib.sha256(binascii.unhexlify('0102030405060701')).hexdigest()
'245138c905599c8579ab186fbdbd6e62396aac35a98a6568f8803eed049d1251'

Note that hashing the string yields the same (incorrect) value you mentioned in your question, but first converting to binary via unhexlify yields the correct result, matching what you got in Solidity.
","1608","<blockchain><ethereum><sha256><solidity><abi>","4","-1","1","2019-06-13 15:48:50","","4","","","","","2018-09-12 14:25:44",""
"26220655","How to hash output of sha256 with sha256 in rust","I've written some rust code which has a lifetime problem.
let mut sha256 = Sha256::new();
sha256.input_str(input.as_slice());

for i in range(0i,16) {
    println!(""i == {}, hash == {}"", i, sha256.result_str());
    let bytes = sha256.result_bytes().as_slice();
    sha256.input(bytes);
}

The error is:
$ cargo build && ./target/hello_world asdfasdf
   Compiling hello_world v0.1.0 (file:///home/chris/hello_world)
src/hello_world.rs:41:21: 41:42 error: borrowed value does not live long enough
src/hello_world.rs:41         let bytes = sha256.result_bytes().as_slice();
                                          ^~~~~~~~~~~~~~~~~~~~~
src/hello_world.rs:39:27: 43:6 note: reference must be valid for the block at 39:26...
src/hello_world.rs:39     for i in range(0i,16) {
src/hello_world.rs:40         println!(""i == {}, hash == {}"", i, sha256.result_str());
src/hello_world.rs:41         let bytes = sha256.result_bytes().as_slice();
src/hello_world.rs:42         sha256.input(bytes);
src/hello_world.rs:43     }
src/hello_world.rs:41:9: 41:53 note: ...but borrowed value is only valid for the statement at 41:8; consider using a `let` binding to increase its lifetime
src/hello_world.rs:41         let bytes = sha256.result_bytes().as_slice();
                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
error: aborting due to previous error
Could not compile `hello_world`.

To learn more, run the command again with --verbose.

How can I alter this, and still let it execute efficiently?
","That's because the result from result_bytes() is being discarded after that line and as_slice() is getting a reference to it. The borrow checker won't let it happen.
For it to work you should write it like:
let mut sha256 = Sha256::new();
sha256.input_str(input.as_slice());

for i in range(0i,16) {
    println!(""i == {}, hash == {}"", i, sha256.result_str());
    let bytes = sha256.result_bytes();
    sha256.reset();
    sha256.input(bytes.as_slice());
}

Hope it helped.
","1605","<rust><sha256><lifetime>","4","5","1","2014-10-07 17:26:38","26222884","1","1","","","","2014-10-06 16:30:10",""
"22944043","Echo output of sha256sum on a CD's files to a text file","I have a CD whose contents I need to hash using sha256sum and I need to store its output to a single text file. How can I do this in a single command? I tried ""echo sha256sum * >> shasum.txt"" but what it did was it only appended the text sha256sum to all the files in the root folder and not what I really intended for it to do. Help please?
Edit: How can I do this command such that it affects ALL the files in the subfolders?
","That was close. I think you want to do:
sha256sum * > shasum.txt

Edit:
if you got subfolders, then something like that should work:
find myFolder -type f | xargs sha256sum >  shasum.txt

or in the folder:
find . -type f | xargs sha256sum >  shasum.txt

if you want only some files you can filter with -name:
find . -type f -name ""*.wav"" | xargs sha256sum >  shasum.txt

if you have filenames with newlines or strange things, you can use -print0:
find . -type f -print0 | xargs -0 sha256sum >  shasum.txt

","1603","<linux><ubuntu><hash><sha><sha256>","0","1","1","2014-04-09 08:15:12","22949400","0","","1743334","","2014-04-09 03:12:27","2014-04-08 17:22:46",""
"19944720","Javascript using HMAC SHA256 with base64 encoded key","I am using the following function to create a base64 HMAC SHA256 hash
https://gist.github.com/hanih/7443134
function sha256() {
    var sha256;

    sha256 = ""undefined"" !== typeof exports ? exports : {};
    sha256.hexcase = 0;
    sha256.b64pad = ""="";
    var b64pad = ""="";
    var hexcase = 0;
    sha256.hex_sha256 = function(a) {
        return sha256.rstr2hex(sha256.rstr_sha256(sha256.str2rstr_utf8(a)));
    };
    sha256.b64_sha256 = function(a) {
        return sha256.rstr_sha256(sha256.str2rstr_utf8(a));
    };
    sha256.any_sha256 = function(a, c) {
        return sha256.rstr2any(sha256.rstr_sha256(sha256.str2rstr_utf8(a)), c);
    };
    sha256.hex_hmac_sha256 = function(a, c) {
        return sha256.rstr2hex(sha256.rstr_hmac_sha256(sha256.str2rstr_utf8(a), sha256.str2rstr_utf8(c)));
    };
    sha256.b64_hmac_sha256 = function(a, c) {
        return sha256.rstr2b64(sha256.rstr_hmac_sha256(sha256.str2rstr_utf8(a), sha256.str2rstr_utf8(c)));
    };
    sha256.b64_hmac_sha256_sha256 = function(a, c) {
        return sha256.rstr2b64(sha256.rstr_hmac_sha256(a, sha256.rstr_sha256(c)));
    };
    sha256.any_hmac_sha256 = function(a, c, b) {
        return sha256.rstr2any(sha256.rstr_hmac_sha256(sha256.str2rstr_utf8(a), sha256.str2rstr_utf8(c)), b);
    };
    sha256.sha256_vm_test = function() {
        return ""ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad"" == sha256.hex_sha256(""abc"").toLowerCase();
    };
    sha256.sha256_vm_test1 = function() {
        return ""d7a8fbb307d7809469ca9abcb0082e4f8d5651e46d3cdb762d02d0bf37c9e592"" == sha256.hex_sha256(""The quick brown fox jumps over the lazy dog"").toLowerCase();
    };
    sha256.rstr_sha256 = function(a) {
        return sha256.binb2rstr(sha256.binb_sha256(sha256.rstr2binb(a), 8 * a.length));
    };
    sha256.rstr_hmac_sha256 = function(a, c) {
        var b = sha256.rstr2binb(a);
        16 < b.length && ( b = sha256.binb_sha256(b, 8 * a.length));
        for (var d = Array(16), e = Array(16), f = 0; 16 > f; f++)
            d[f] = b[f] ^ 909522486, e[f] = b[f] ^ 1549556828;
        b = sha256.binb_sha256(d.concat(sha256.rstr2binb(c)), 512 + 8 * c.length);
        return sha256.binb2rstr(sha256.binb_sha256(e.concat(b), 768));
    };
    sha256.rstr2hex = function(a) {
        try { hexcase;
        } catch(c) {
            hexcase = 0;
        }
        for (var b = hexcase ? ""0123456789ABCDEF"" : ""0123456789abcdef"", d = """", e, f = 0; f < a.length; f++)
            e = a.charCodeAt(f), d += b.charAt(e >>> 4 & 15) + b.charAt(e & 15);
        return d;
    };
    sha256.rstr2b64 = function(a) {
        try { b64pad;
        } catch(c) {
            b64pad = """";
        }
        for (var b = """", d = a.length, e = 0; e < d; e += 3)
            for (var f = a.charCodeAt(e) << 16 | (e + 1 < d ? a.charCodeAt(e + 1) << 8 : 0) | (e + 2 < d ? a.charCodeAt(e + 2) : 0), g = 0; 4 > g; g++)
                b = 8 * e + 6 * g > 8 * a.length ? b + b64pad : b + ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"".charAt(f >>> 6 * (3 - g) & 63);
        return b;
    };
    sha256.rstr2any = function(a, c) {
        var b = c.length, d = [], e, f, g, h, j = Array(Math.ceil(a.length / 2));
        for ( e = 0; e < j.length; e++)
            j[e] = a.charCodeAt(2 * e) << 8 | a.charCodeAt(2 * e + 1);
        for (; 0 < j.length; ) {
            h = [];
            for ( e = g = 0; e < j.length; e++)
                if ( g = (g << 16) + j[e], f = Math.floor(g / b), g -= f * b, 0 < h.length || 0 < f)
                    h[h.length] = f;
            d[d.length] = g;
            j = h;
        }
        b = """";
        for ( e = d.length - 1; 0 <= e; e--)
            b += c.charAt(d[e]);
        d = Math.ceil(8 * a.length / (Math.log(c.length) / Math.log(2)));
        for ( e = b.length; e < d; e++)
            b = c[0] + b;
        return b;
    };
    sha256.str2rstr_utf8 = function(a) {
        for (var c = """", b = -1, d, e; ++b < a.length; )
            d = a.charCodeAt(b), e = b + 1 < a.length ? a.charCodeAt(b + 1) : 0, 55296 <= d && 56319 >= d && 56320 <= e && 57343 >= e && ( d = 65536 + ((d & 1023) << 10) + (e & 1023), b++), 127 >= d ? c += String.fromCharCode(d) : 2047 >= d ? c += String.fromCharCode(192 | d >>> 6 & 31, 128 | d & 63) : 65535 >= d ? c += String.fromCharCode(224 | d >>> 12 & 15, 128 | d >>> 6 & 63, 128 | d & 63) : 2097151 >= d && (c += String.fromCharCode(240 | d >>> 18 & 7, 128 | d >>> 12 & 63, 128 | d >>> 6 & 63, 128 | d & 63));
        return c;
    };
    sha256.str2rstr_utf16le = function(a) {
        for (var c = """", b = 0; b < a.length; b++)
            c += String.fromCharCode(a.charCodeAt(b) & 255, a.charCodeAt(b) >>> 8 & 255);
        return c;
    };
    str2rstr_utf16be = function(a) {
        for (var c = """", b = 0; b < a.length; b++)
            c += String.fromCharCode(a.charCodeAt(b) >>> 8 & 255, a.charCodeAt(b) & 255);
        return c;
    };
    sha256.rstr2binb = function(a) {
        for (var c = Array(a.length >> 2), b = 0; b < c.length; b++)
            c[b] = 0;
        for ( b = 0; b < 8 * a.length; b += 8)
            c[b >> 5] |= (a.charCodeAt(b / 8) & 255) << 24 - b % 32;
        return c;
    };
    sha256.binb2rstr = function(a) {
        for (var c = """", b = 0; b < 32 * a.length; b += 8)
            c += String.fromCharCode(a[b >> 5] >>> 24 - b % 32 & 255);
        return c;
    };
    sha256.sha256_S = function(a, c) {
        return a >>> c | a << 32 - c;
    };
    sha256.sha256_R = function(a, c) {
        return a >>> c;
    };
    sha256.sha256_Ch = function(a, c, b) {
        return a & c ^ ~a & b;
    };
    sha256.sha256_Maj = function(a, c, b) {
        return a & c ^ a & b ^ c & b;
    };
    sha256.sha256_Sigma0256 = function(a) {
        return sha256.sha256_S(a, 2) ^ sha256.sha256_S(a, 13) ^ sha256.sha256_S(a, 22);
    };
    sha256.sha256_Sigma1256 = function(a) {
        return sha256.sha256_S(a, 6) ^ sha256.sha256_S(a, 11) ^ sha256.sha256_S(a, 25);
    };
    sha256.sha256_Gamma0256 = function(a) {
        return sha256.sha256_S(a, 7) ^ sha256.sha256_S(a, 18) ^ sha256.sha256_R(a, 3);
    };
    sha256.sha256_Gamma1256 = function(a) {
        return sha256.sha256_S(a, 17) ^ sha256.sha256_S(a, 19) ^ sha256.sha256_R(a, 10);
    };
    sha256.sha256_Sigma0512 = function(a) {
        return sha256.sha256_S(a, 28) ^ sha256.sha256_S(a, 34) ^ sha256.sha256_S(a, 39);
    };
    sha256.sha256_Sigma1512 = function(a) {
        return sha256.sha256_S(a, 14) ^ sha256.sha256_S(a, 18) ^ sha256.sha256_S(a, 41);
    };
    sha256.sha256_Gamma0512 = function(a) {
        return sha256.sha256_S(a, 1) ^ sha256.sha256_S(a, 8) ^ sha256.sha256_R(a, 7);
    };
    sha256.sha256_Gamma1512 = function(a) {
        return sha256.sha256_S(a, 19) ^ sha256.sha256_S(a, 61) ^ sha256.sha256_R(a, 6);
    };
    sha256.sha256_K = [1116352408, 1899447441, -1245643825, -373957723, 961987163, 1508970993, -1841331548, -1424204075, -670586216, 310598401, 607225278, 1426881987, 1925078388, -2132889090, -1680079193, -1046744716, -459576895, -272742522, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, -1740746414, -1473132947, -1341970488, -1084653625, -958395405, -710438585, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, -2117940946, -1838011259, -1564481375, -1474664885, -1035236496, -949202525, -778901479, -694614492, -200395387, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, -2067236844, -1933114872, -1866530822, -1538233109, -1090935817, -965641998];
    sha256.binb_sha256 = function(a, c) {
        var b = [1779033703, -1150833019, 1013904242, -1521486534, 1359893119, -1694144372, 528734635, 1541459225], d = Array(64), e, f, g, h, j, k, m, o, p, n, l, q;
        a[c >> 5] |= 128 << 24 - c % 32;
        a[(c + 64 >> 9 << 4) + 15] = c;
        for ( p = 0; p < a.length; p += 16) {
            e = b[0];
            f = b[1];
            g = b[2];
            h = b[3];
            j = b[4];
            k = b[5];
            m = b[6];
            o = b[7];
            for ( n = 0; 64 > n; n++)
                d[n] = 16 > n ? a[n + p] : sha256.safe_add(sha256.safe_add(sha256.safe_add(sha256.sha256_Gamma1256(d[n - 2]), d[n - 7]), sha256.sha256_Gamma0256(d[n - 15])), d[n - 16]), l = sha256.safe_add(sha256.safe_add(sha256.safe_add(sha256.safe_add(o, sha256.sha256_Sigma1256(j)), sha256.sha256_Ch(j, k, m)), sha256.sha256_K[n]), d[n]), q = sha256.safe_add(sha256.sha256_Sigma0256(e), sha256.sha256_Maj(e, f, g)), o = m, m = k, k = j, j = sha256.safe_add(h, l), h = g, g = f, f = e, e = sha256.safe_add(l, q);
            b[0] = sha256.safe_add(e, b[0]);
            b[1] = sha256.safe_add(f, b[1]);
            b[2] = sha256.safe_add(g, b[2]);
            b[3] = sha256.safe_add(h, b[3]);
            b[4] = sha256.safe_add(j, b[4]);
            b[5] = sha256.safe_add(k, b[5]);
            b[6] = sha256.safe_add(m, b[6]);
            b[7] = sha256.safe_add(o, b[7]);
        }
        return b;
    };
    sha256.safe_add = function(a, c) {
        var b = (a & 65535) + (c & 65535);
        return (a >> 16) + (c >> 16) + (b >> 16) << 16 | b & 65535;
    };
    return sha256;

}

module.exports = sha256;

it contains a function named b64_hmac_sha256 that works fine.
I use a base 64 encoded key that I decode using the following function: 
https://gist.github.com/hanih/7443203
function urlDecode(str){
    str=str.replace(new RegExp('\\+','g'),' ');
    return unescape(str);
}
function urlEncode(str){
    str=escape(str);
    str=str.replace(new RegExp('\\+','g'),'%2B');
    return str.replace(new RegExp('%20','g'),'+');
}

var END_OF_INPUT = -1;

var base64Chars = new Array(
    'A','B','C','D','E','F','G','H',
    'I','J','K','L','M','N','O','P',
    'Q','R','S','T','U','V','W','X',
    'Y','Z','a','b','c','d','e','f',
    'g','h','i','j','k','l','m','n',
    'o','p','q','r','s','t','u','v',
    'w','x','y','z','0','1','2','3',
    '4','5','6','7','8','9','+','/'
);

var reverseBase64Chars = new Array();
for (var i=0; i < base64Chars.length; i++){
    reverseBase64Chars[base64Chars[i]] = i;
}

var base64Str;
var base64Count;
function setBase64Str(str){
    base64Str = str;
    base64Count = 0;
}
function readBase64(){    
    if (!base64Str) return END_OF_INPUT;
    if (base64Count >= base64Str.length) return END_OF_INPUT;
    var c = base64Str.charCodeAt(base64Count) & 0xff;
    base64Count++;
    return c;
}
function encodeBase64(str){
    setBase64Str(str);
    var result = '';
    var inBuffer = new Array(3);
    var lineCount = 0;
    var done = false;
    while (!done && (inBuffer[0] = readBase64()) != END_OF_INPUT){
        inBuffer[1] = readBase64();
        inBuffer[2] = readBase64();
        result += (base64Chars[ inBuffer[0] >> 2 ]);
        if (inBuffer[1] != END_OF_INPUT){
            result += (base64Chars [(( inBuffer[0] << 4 ) & 0x30) | (inBuffer[1] >> 4) ]);
            if (inBuffer[2] != END_OF_INPUT){
                result += (base64Chars [((inBuffer[1] << 2) & 0x3c) | (inBuffer[2] >> 6) ]);
                result += (base64Chars [inBuffer[2] & 0x3F]);
            } else {
                result += (base64Chars [((inBuffer[1] << 2) & 0x3c)]);
                result += ('=');
                done = true;
            }
        } else {
            result += (base64Chars [(( inBuffer[0] << 4 ) & 0x30)]);
            result += ('=');
            result += ('=');
            done = true;
        }
        lineCount += 4;
        if (lineCount >= 76){
            result += ('\n');
            lineCount = 0;
        }
    }
    return result;
}
function readReverseBase64(){   
    if (!base64Str) return END_OF_INPUT;
    while (true){      
        if (base64Count >= base64Str.length) return END_OF_INPUT;
        var nextCharacter = base64Str.charAt(base64Count);
        base64Count++;
        if (reverseBase64Chars[nextCharacter]){
            return reverseBase64Chars[nextCharacter];
        }
        if (nextCharacter == 'A') return 0;
    }
    return END_OF_INPUT;
}

function ntos(n){
    n=n.toString(16);
    if (n.length == 1) n=""0""+n;
    n=""%""+n;
    return unescape(n);
}

function decodeBase64(str){
    setBase64Str(str);
    var result = """";
    var inBuffer = new Array(4);
    var done = false;
    while (!done && (inBuffer[0] = readReverseBase64()) != END_OF_INPUT
        && (inBuffer[1] = readReverseBase64()) != END_OF_INPUT){
        inBuffer[2] = readReverseBase64();
        inBuffer[3] = readReverseBase64();
        result += ntos((((inBuffer[0] << 2) & 0xff)| inBuffer[1] >> 4));
        if (inBuffer[2] != END_OF_INPUT){
            result +=  ntos((((inBuffer[1] << 4) & 0xff)| inBuffer[2] >> 2));
            if (inBuffer[3] != END_OF_INPUT){
                result +=  ntos((((inBuffer[2] << 6)  & 0xff) | inBuffer[3]));
            } else {
                done = true;
            }
        } else {
            done = true;
        }
    }
    return result;
}

var digitArray = new Array('0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f');
function toHex(n){
    var result = ''
    var start = true;
    for (var i=32; i>0;){
        i-=4;
        var digit = (n>>i) & 0xf;
        if (!start || digit != 0){
            start = false;
            result += digitArray[digit];
        }
    }
    return (result==''?'0':result);
}

function pad(str, len, pad){
    var result = str;
    for (var i=str.length; i<len; i++){
        result = pad + result;
    }
    return result;
}

function encodeHex(str){
    var result = """";
    for (var i=0; i<str.length; i++){
        result += pad(toHex(str.charCodeAt(i)&0xff),2,'0');
    }
    return result;
}

var hexv = {
  ""00"":0,""01"":1,""02"":2,""03"":3,""04"":4,""05"":5,""06"":6,""07"":7,""08"":8,""09"":9,""0A"":10,""0B"":11,""0C"":12,""0D"":13,""0E"":14,""0F"":15,
  ""10"":16,""11"":17,""12"":18,""13"":19,""14"":20,""15"":21,""16"":22,""17"":23,""18"":24,""19"":25,""1A"":26,""1B"":27,""1C"":28,""1D"":29,""1E"":30,""1F"":31,
  ""20"":32,""21"":33,""22"":34,""23"":35,""24"":36,""25"":37,""26"":38,""27"":39,""28"":40,""29"":41,""2A"":42,""2B"":43,""2C"":44,""2D"":45,""2E"":46,""2F"":47,
  ""30"":48,""31"":49,""32"":50,""33"":51,""34"":52,""35"":53,""36"":54,""37"":55,""38"":56,""39"":57,""3A"":58,""3B"":59,""3C"":60,""3D"":61,""3E"":62,""3F"":63,
  ""40"":64,""41"":65,""42"":66,""43"":67,""44"":68,""45"":69,""46"":70,""47"":71,""48"":72,""49"":73,""4A"":74,""4B"":75,""4C"":76,""4D"":77,""4E"":78,""4F"":79,
  ""50"":80,""51"":81,""52"":82,""53"":83,""54"":84,""55"":85,""56"":86,""57"":87,""58"":88,""59"":89,""5A"":90,""5B"":91,""5C"":92,""5D"":93,""5E"":94,""5F"":95,
  ""60"":96,""61"":97,""62"":98,""63"":99,""64"":100,""65"":101,""66"":102,""67"":103,""68"":104,""69"":105,""6A"":106,""6B"":107,""6C"":108,""6D"":109,""6E"":110,""6F"":111,
  ""70"":112,""71"":113,""72"":114,""73"":115,""74"":116,""75"":117,""76"":118,""77"":119,""78"":120,""79"":121,""7A"":122,""7B"":123,""7C"":124,""7D"":125,""7E"":126,""7F"":127,
  ""80"":128,""81"":129,""82"":130,""83"":131,""84"":132,""85"":133,""86"":134,""87"":135,""88"":136,""89"":137,""8A"":138,""8B"":139,""8C"":140,""8D"":141,""8E"":142,""8F"":143,
  ""90"":144,""91"":145,""92"":146,""93"":147,""94"":148,""95"":149,""96"":150,""97"":151,""98"":152,""99"":153,""9A"":154,""9B"":155,""9C"":156,""9D"":157,""9E"":158,""9F"":159,
  ""A0"":160,""A1"":161,""A2"":162,""A3"":163,""A4"":164,""A5"":165,""A6"":166,""A7"":167,""A8"":168,""A9"":169,""AA"":170,""AB"":171,""AC"":172,""AD"":173,""AE"":174,""AF"":175,
  ""B0"":176,""B1"":177,""B2"":178,""B3"":179,""B4"":180,""B5"":181,""B6"":182,""B7"":183,""B8"":184,""B9"":185,""BA"":186,""BB"":187,""BC"":188,""BD"":189,""BE"":190,""BF"":191,
  ""C0"":192,""C1"":193,""C2"":194,""C3"":195,""C4"":196,""C5"":197,""C6"":198,""C7"":199,""C8"":200,""C9"":201,""CA"":202,""CB"":203,""CC"":204,""CD"":205,""CE"":206,""CF"":207,
  ""D0"":208,""D1"":209,""D2"":210,""D3"":211,""D4"":212,""D5"":213,""D6"":214,""D7"":215,""D8"":216,""D9"":217,""DA"":218,""DB"":219,""DC"":220,""DD"":221,""DE"":222,""DF"":223,
  ""E0"":224,""E1"":225,""E2"":226,""E3"":227,""E4"":228,""E5"":229,""E6"":230,""E7"":231,""E8"":232,""E9"":233,""EA"":234,""EB"":235,""EC"":236,""ED"":237,""EE"":238,""EF"":239,
  ""F0"":240,""F1"":241,""F2"":242,""F3"":243,""F4"":244,""F5"":245,""F6"":246,""F7"":247,""F8"":248,""F9"":249,""FA"":250,""FB"":251,""FC"":252,""FD"":253,""FE"":254,""FF"":255
};

function decodeHex(str){
    str = str.toUpperCase().replace(new RegExp(""s/[^0-9A-Z]//g""));
    var result = """";
    var nextchar = """";
    for (var i=0; i<str.length; i++){
        nextchar += str.charAt(i);
        if (nextchar.length == 2){
            result += ntos(hexv[nextchar]);
            nextchar = """";
        }
    }
    return result;

}

The problem happens when the decoded key contains uncommon characters
This encoded key works:
dGhpc2lzYWxvbmdlcm1lc3NhZ2VvZmNvdXJzZXRoaXNpc2Fsb25nZXJtZXNzYWdlb2Zjb3Vyc2U=

but this doesn't work
5VoyMfmtN7lBiFlyDcMX85Hjvw/oxj8IVcB0dn8N6CXr+F0nuPI2LQ3K/w==

","","1586","<javascript><hmac><sha256>","1","","0","2015-12-19 14:23:04","","0","","2432317","","2015-12-19 14:23:04","2013-11-13 03:29:20",""
"37418403","SHA-256 BigQuery function or UDF","Does anyone have a UDF or know of plans to support SHA-256 in BigQuery?
https://cloud.google.com/bigquery/query-reference#syntax_16
Best, 
Jeremy
","Try below as an example  
SELECT input, input_sha256 FROM JS(
(
  SELECT title AS input
  FROM [bigquery-public-data:hacker_news.stories]
  GROUP BY input
  LIMIT 40 
),
input,
""[ {'name': 'input', 'type': 'string'}, {'name': 'input_sha256', 'type': 'string'} ] "",

""function(row, emit) { 
  var CryptoJS=CryptoJS||function(h,s){var f={},g=f.lib={},q=function(){},m=g.Base={extend:function(a){q.prototype=this;var c=new q;a&&c.mixIn(a);c.hasOwnProperty('init')||(c.init=function(){c.$super.init.apply(this,arguments)});c.init.prototype=c;c.$super=this;return c},create:function(){var a=this.extend();a.init.apply(a,arguments);return a},init:function(){},mixIn:function(a){for(var c in a)a.hasOwnProperty(c)&&(this[c]=a[c]);a.hasOwnProperty('toString')&&(this.toString=a.toString)},clone:function(){return this.init.prototype.extend(this)}}, r=g.WordArray=m.extend({init:function(a,c){a=this.words=a||[];this.sigBytes=c!=s?c:4*a.length},toString:function(a){return(a||k).stringify(this)},concat:function(a){var c=this.words,d=a.words,b=this.sigBytes;a=a.sigBytes;this.clamp();if(b%4)for(var e=0;e<a;e++)c[b+e>>>2]|=(d[e>>>2]>>>24-8*(e%4)&255)<<24-8*((b+e)%4);else if(65535<d.length)for(e=0;e<a;e+=4)c[b+e>>>2]=d[e>>>2];else c.push.apply(c,d);this.sigBytes+=a;return this},clamp:function(){var a=this.words,c=this.sigBytes;a[c>>>2]&=4294967295<< 32-8*(c%4);a.length=h.ceil(c/4)},clone:function(){var a=m.clone.call(this);a.words=this.words.slice(0);return a},random:function(a){for(var c=[],d=0;d<a;d+=4)c.push(4294967296*h.random()|0);return new r.init(c,a)}}),l=f.enc={},k=l.Hex={stringify:function(a){var c=a.words;a=a.sigBytes;for(var d=[],b=0;b<a;b++){var e=c[b>>>2]>>>24-8*(b%4)&255;d.push((e>>>4).toString(16));d.push((e&15).toString(16))}return d.join('')},parse:function(a){for(var c=a.length,d=[],b=0;b<c;b+=2)d[b>>>3]|=parseInt(a.substr(b, 2),16)<<24-4*(b%8);return new r.init(d,c/2)}},n=l.Latin1={stringify:function(a){var c=a.words;a=a.sigBytes;for(var d=[],b=0;b<a;b++)d.push(String.fromCharCode(c[b>>>2]>>>24-8*(b%4)&255));return d.join('')},parse:function(a){for(var c=a.length,d=[],b=0;b<c;b++)d[b>>>2]|=(a.charCodeAt(b)&255)<<24-8*(b%4);return new r.init(d,c)}},j=l.Utf8={stringify:function(a){try{return decodeURIComponent(escape(n.stringify(a)))}catch(c){throw Error('Malformed UTF-8 data');}},parse:function(a){return n.parse(unescape(encodeURIComponent(a)))}}, u=g.BufferedBlockAlgorithm=m.extend({reset:function(){this._data=new r.init;this._nDataBytes=0},_append:function(a){'string'==typeof a&&(a=j.parse(a));this._data.concat(a);this._nDataBytes+=a.sigBytes},_process:function(a){var c=this._data,d=c.words,b=c.sigBytes,e=this.blockSize,f=b/(4*e),f=a?h.ceil(f):h.max((f|0)-this._minBufferSize,0);a=f*e;b=h.min(4*a,b);if(a){for(var g=0;g<a;g+=e)this._doProcessBlock(d,g);g=d.splice(0,a);c.sigBytes-=b}return new r.init(g,b)},clone:function(){var a=m.clone.call(this); a._data=this._data.clone();return a},_minBufferSize:0});g.Hasher=u.extend({cfg:m.extend(),init:function(a){this.cfg=this.cfg.extend(a);this.reset()},reset:function(){u.reset.call(this);this._doReset()},update:function(a){this._append(a);this._process();return this},finalize:function(a){a&&this._append(a);return this._doFinalize()},blockSize:16,_createHelper:function(a){return function(c,d){return(new a.init(d)).finalize(c)}},_createHmacHelper:function(a){return function(c,d){return(new t.HMAC.init(a, d)).finalize(c)}}});var t=f.algo={};return f}(Math); 
  (function(h){for(var s=CryptoJS,f=s.lib,g=f.WordArray,q=f.Hasher,f=s.algo,m=[],r=[],l=function(a){return 4294967296*(a-(a|0))|0},k=2,n=0;64>n;){var j;a:{j=k;for(var u=h.sqrt(j),t=2;t<=u;t++)if(!(j%t)){j=!1;break a}j=!0}j&&(8>n&&(m[n]=l(h.pow(k,0.5))),r[n]=l(h.pow(k,1/3)),n++);k++}var a=[],f=f.SHA256=q.extend({_doReset:function(){this._hash=new g.init(m.slice(0))},_doProcessBlock:function(c,d){for(var b=this._hash.words,e=b[0],f=b[1],g=b[2],j=b[3],h=b[4],m=b[5],n=b[6],q=b[7],p=0;64>p;p++){if(16>p)a[p]= c[d+p]|0;else{var k=a[p-15],l=a[p-2];a[p]=((k<<25|k>>>7)^(k<<14|k>>>18)^k>>>3)+a[p-7]+((l<<15|l>>>17)^(l<<13|l>>>19)^l>>>10)+a[p-16]}k=q+((h<<26|h>>>6)^(h<<21|h>>>11)^(h<<7|h>>>25))+(h&m^~h&n)+r[p]+a[p];l=((e<<30|e>>>2)^(e<<19|e>>>13)^(e<<10|e>>>22))+(e&f^e&g^f&g);q=n;n=m;m=h;h=j+k|0;j=g;g=f;f=e;e=k+l|0}b[0]=b[0]+e|0;b[1]=b[1]+f|0;b[2]=b[2]+g|0;b[3]=b[3]+j|0;b[4]=b[4]+h|0;b[5]=b[5]+m|0;b[6]=b[6]+n|0;b[7]=b[7]+q|0},_doFinalize:function(){var a=this._data,d=a.words,b=8*this._nDataBytes,e=8*a.sigBytes; d[e>>>5]|=128<<24-e%32;d[(e+64>>>9<<4)+14]=h.floor(b/4294967296);d[(e+64>>>9<<4)+15]=b;a.sigBytes=4*d.length;this._process();return this._hash},clone:function(){var a=q.clone.call(this);a._hash=this._hash.clone();return a}});s.SHA256=q._createHelper(f);s.HmacSHA256=q._createHmacHelper(f)})(Math); 
  (function(){var h=CryptoJS,j=h.lib.WordArray;h.enc.Base64={stringify:function(b){var e=b.words,f=b.sigBytes,c=this._map;b.clamp();b=[];for(var a=0;a<f;a+=3)for(var d=(e[a>>>2]>>>24-8*(a%4)&255)<<16|(e[a+1>>>2]>>>24-8*((a+1)%4)&255)<<8|e[a+2>>>2]>>>24-8*((a+2)%4)&255,g=0;4>g&&a+0.75*g<f;g++)b.push(c.charAt(d>>>6*(3-g)&63));if(e=c.charAt(64))for(;b.length%4;)b.push(e);return b.join('')},parse:function(b){var e=b.length,f=this._map,c=f.charAt(64);c&&(c=b.indexOf(c),-1!=c&&(e=c));for(var c=[],a=0,d=0;d< e;d++)if(d%4){var g=f.indexOf(b.charAt(d-1))<<2*(d%4),h=f.indexOf(b.charAt(d))>>>6-2*(d%4);c[a>>>2]|=(g|h)<<24-8*(a%4);a++}return j.create(c,a)},_map:'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='}})(); 
  emit( { input: row.input, input_sha256: CryptoJS.SHA256(row.input).toString(CryptoJS.enc.Hex) } ); 
}"" 
)

","1583","<google-bigquery><sha256>","6","2","3","2018-03-05 06:57:59","37418630","0","","","","","2016-05-24 15:51:58",""
"37418403","SHA-256 BigQuery function or UDF","Does anyone have a UDF or know of plans to support SHA-256 in BigQuery?
https://cloud.google.com/bigquery/query-reference#syntax_16
Best, 
Jeremy
","
12-19-2016 Update

BigQuery Standard SQL is now supporting below functions:   
•   MD5
•   SHA1
•   SHA256
•   SHA512

They take either STRING or BYTES as input and return BYTES as output.
see for more details 
","1583","<google-bigquery><sha256>","6","2","3","2018-03-05 06:57:59","37418630","0","","","","","2016-05-24 15:51:58",""
"37418403","SHA-256 BigQuery function or UDF","Does anyone have a UDF or know of plans to support SHA-256 in BigQuery?
https://cloud.google.com/bigquery/query-reference#syntax_16
Best, 
Jeremy
","This is now a feature in BigQuery using StandardSQL and here's how you return data as a string.
#StandardSQL
SELECT 
    TO_HEX(SHA256(""Hello"")) as hashed_string;

Output: 185f8db32271fe25f561a6fc938b2e264306ec304eda518007d1764826381969
","1583","<google-bigquery><sha256>","6","3","3","2018-03-05 06:57:59","37418630","0","","","","","2016-05-24 15:51:58",""
"45031419","How to sign XML with SHA256 & X.509 correctly?","I want to sign a XML with SHA256 by using a self-signed X.509 certificate. I was inspired by many articles in Stackoverflow and use this code:
X509Certificate2 cert = new X509Certificate2();
X509Store store = new X509Store(StoreName.Root, StoreLocation.LocalMachine);
store.Open(OpenFlags.ReadOnly);
foreach (X509Certificate2 cert2 in store.Certificates)
{
    if (cert2.Subject == ""CN=TestCerificate"")
    {
        cert = cert2;
        break;
    }
}

store.Close();

CryptoConfig.AddAlgorithm(typeof(RSAPKCS1SHA256SignatureDescription), ""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"");
var exportedKeyMaterial = cert.PrivateKey.ToXmlString(true);
var key = new RSACryptoServiceProvider(new CspParameters(24));
key.PersistKeyInCsp = false;
key.FromXmlString(exportedKeyMaterial);

XmlDocument doc = new XmlDocument();
doc.PreserveWhitespace = true;
doc.Load(""test.xml"");

SignedXml signedXml = new SignedXml(doc);
signedXml.SigningKey = key;
signedXml.SignedInfo.SignatureMethod = ""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"";

Reference reference = new Reference();
reference.AddTransform(new XmlDsigEnvelopedSignatureTransform());
reference.AddTransform(new XmlDsigExcC14NTransform());
reference.Uri = """";
reference.DigestMethod = ""http://www.w3.org/2001/04/xmlenc#sha256""; 
signedXml.AddReference(reference);

KeyInfo keyInfo = new KeyInfo();
keyInfo.AddClause(new KeyInfoX509Data(cert));
signedXml.KeyInfo = keyInfo;
signedXml.ComputeSignature();

doc.Save(""testSig.xml"");

Afterwards, the generated signed XML part of ""testSig.xml"" looks like this:
<Signature xmlns=""http://www.w3.org/2000/09/xmldsig#"">
    <SignedInfo>
      <CanonicalizationMethod Algorithm=""http://www.w3.org/TR/2001/REC-xml-c14n-20010315"" />
      <SignatureMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#dsa-sha1"" />
      <Reference URI="""">
        <Transforms>
          <Transform Algorithm=""http://www.w3.org/2000/09/xmldsig#enveloped-signature"" />
        </Transforms>
        <DigestMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#sha1"" />
        <DigestValue>ghOEPeYtAUs5Kb8VMOCIS3f2wIY=</DigestValue>
      </Reference>
    </SignedInfo>
    <SignatureValue>HANI0GrICbyc5tlmvtU9cB7txdxtuY4uDsntp5XVzaRQbts76ff3Qg==</SignatureValue>
  </Signature>

As you can see the XML says that ""SHA1"" was used to sign the XML instead (see nodes ""SignatureMethod"" & ""DigestMethod""). But I would expect, that the SHA256-URLs have to be stated in these nodes. Is this assumption correct? If yes, does anybody know how to solve this problem? I use C# 4.6.0.
With best regards,
Michael
","While you successfully called signedXml.ComputeSignature() that just does the computation, it doesn't insert a signature element into the document (the XmlDocument you pass in the constructor is just what document GetXml()'s node will parent to).
You need to call signedXml.GetXml() (after ComputeSignature) to get the computed ds:Signature element, then insert that into your document.
The fact that your document has a signature node already in it is confusing.  My first thought was that test.xml already had that signature in it, but your comment says that it was just some oops code from elsewhere. Lesson learned, I guess :).
","1582","<c#><xml><x509><sha256><xml-signature>","2","1","1","2017-07-12 14:44:44","45060913","2","","","","","2017-07-11 10:04:11",""
"45298354","how to sign a token with RSA SHA-256, in python?","I am trying to encode a JWT with python, I need to encode it in base64, with i did. and then I have to sign it with a private key before sending to the server. actually I am blocked, when to sign it I don't know how, I am searching on the web since yesterday, I am little bit lost. here is my code. 
import jwt

print (""\nStart.."")

encoded = jwt.encode({'some': 'payload'}, 'secret', algorithm='HS256')

print(""\nJWT : "",encoded)

try:
    decoded = jwt.decode(encoded, 'secret', algorithms=['HS256'])
except jwt.InvalidTokenError:
    print(""Invalid token!!"")

print(""\ndecoded : "", decoded)

print(""\nencodage : "")

#LOAD THE PRIVATE KEY


#SIGN THE ENCODED token

and there is the format of my key, it is an RSA private key. 
-----BEGIN RSA PRIVATE KEY-----
dsjkfhsdfkshkdfhks...
-----END RSA PRIVATE KEY-----

I gave a certificate to the server crt.crt, i think i need to encrypt with my private key, and then they will be able to decrypt the message, with a key from the certificate, that is what i understood.
Thanks in advance, 
G. B
","You can try and refer :
from Crypto.PublicKey import RSA
from Crypto.Cipher import HS256

def encrypt_text(input_text):
   utf8_text = input_text.encode('utf-8')
   pub_key = RSA.importKey(open(settings.RSA).read())
   cipher = HS256.new(public_key)
   cipher_text = base64.encodebytes(cipher.encrypt(utf8_text))
   return cipher_text.decode('utf-8')

Create Public and private key :
ssh-keygen -t rsa -C ""your_email@example.com""

Hope helpful
","1576","<python><jwt><private-key><sha256><rsa-sha256>","3","1","2","2018-09-13 20:47:02","","0","","","","","2017-07-25 08:51:50",""
"45298354","how to sign a token with RSA SHA-256, in python?","I am trying to encode a JWT with python, I need to encode it in base64, with i did. and then I have to sign it with a private key before sending to the server. actually I am blocked, when to sign it I don't know how, I am searching on the web since yesterday, I am little bit lost. here is my code. 
import jwt

print (""\nStart.."")

encoded = jwt.encode({'some': 'payload'}, 'secret', algorithm='HS256')

print(""\nJWT : "",encoded)

try:
    decoded = jwt.decode(encoded, 'secret', algorithms=['HS256'])
except jwt.InvalidTokenError:
    print(""Invalid token!!"")

print(""\ndecoded : "", decoded)

print(""\nencodage : "")

#LOAD THE PRIVATE KEY


#SIGN THE ENCODED token

and there is the format of my key, it is an RSA private key. 
-----BEGIN RSA PRIVATE KEY-----
dsjkfhsdfkshkdfhks...
-----END RSA PRIVATE KEY-----

I gave a certificate to the server crt.crt, i think i need to encrypt with my private key, and then they will be able to decrypt the message, with a key from the certificate, that is what i understood.
Thanks in advance, 
G. B
","according to the JWT RFC, the algorithm type for RSA + SHA256 is ""RS256"", but you're using ""HS256""
","1576","<python><jwt><private-key><sha256><rsa-sha256>","3","0","2","2018-09-13 20:47:02","","0","","","","","2017-07-25 08:51:50",""
"38559763","how to use SHA256 with salt(some key) in swift","I found we can hash some string with CommonCrypto.
and I see some examples but they don't use salt.
how can i use the SHA256 with salt?
","Combine your indata with a salt and run the hash calculation;
func hash(input: String, salt: String) -> String {
    let toHash = input + salt

    // TODO: Calculate the SHA256 hash of ""toHash"" and return it
    // return sha256(toHash)

    // Return the input data and hash for now
    return toHash
}

print(hash(""somedata"", salt: ""1m8f"")) // Prints ""somedata1m8f""

","1570","<swift><sha256><commoncrypto>","1","2","2","2018-04-12 22:05:26","","0","2","","","","2016-07-25 04:31:22",""
"38559763","how to use SHA256 with salt(some key) in swift","I found we can hash some string with CommonCrypto.
and I see some examples but they don't use salt.
how can i use the SHA256 with salt?
","Complete solution for Swift 4:
extension Data {

    var hexString: String {
        return map { String(format: ""%02hhx"", $0) }.joined()
    }

    var sha256: Data {
        var digest = [UInt8](repeating: 0, count: Int(CC_SHA256_DIGEST_LENGTH))
        self.withUnsafeBytes({
            _ = CC_SHA256($0, CC_LONG(self.count), &digest)
        })
        return Data(bytes: digest)
    }

}

extension String {

    func sha256(salt: String) -> Data {
        return (self + salt).data(using: .utf8)!.sha256
    }

}

Example:
let hash = ""test"".sha256(salt: ""salt"").hexString

","1570","<swift><sha256><commoncrypto>","1","1","2","2018-04-12 22:05:26","","0","2","","","","2016-07-25 04:31:22",""
"6231471","Why is this SHA256 function printing some weird characters?","This is the code
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <byteswap.h>
#include ""/usr/include/openssl/sha.h""
#include <evhttp.h>

bool hex2bin(unsigned char *p, const char *hexstr, size_t len);

bool hex2bin(unsigned char *p, const char *hexstr, size_t len)
{
while (*hexstr && len) {
    char hex_byte[3];
    unsigned int v;

    if (!hexstr[1]) {
        //applog(LOG_ERR, ""hex2bin str truncated"");
        return false;
    }

    hex_byte[0] = hexstr[0];
    hex_byte[1] = hexstr[1];
    hex_byte[2] = 0;

    if (sscanf(hex_byte, ""%x"", &v) != 1) {
        //applog(LOG_ERR, ""hex2bin sscanf '%s' failed"",
            //hex_byte);
        return false;
    }

    *p = (unsigned char) v;

    p++;
    hexstr += 2;
    len--;
}

return (len == 0 && *hexstr == 0) ? true : false;
}

int main(int argc, char **argv)
{
unsigned char hash[SHA256_DIGEST_LENGTH], hash1[SHA256_DIGEST_LENGTH];
uint32_t *hash32 = (uint32_t *) hash;
unsigned char data[128];
uint32_t *data32 = (uint32_t *) data;
int i;

   hex2bin(data, argv[1], sizeof(data));

for (i = 0; i < 128/4; i++)
    data32[i] = bswap_32(data32[i]);

SHA256(data, 80, hash1);
SHA256(hash1, SHA256_DIGEST_LENGTH, hash);

printf(""%s\n\n"",hash1);

return 0;   
}

Sorry for the long code. Also, don't mind the unnecessary includes, i just wasn't sure which were needed so i compiled regardless.
This is written in C(obviously) running under Linux, Ubuntu 11.04.
This program takes as an argument some string and must compute it's sha256 hash(twice, while doing various stuff before actually hashing it).
Although the program compiles,runs and takes the string, it spews some weird characters instead of a hash.
Why so?
P.S
This code is not mine, i just made it into a separate program for myself, but like i said, printing the hash fails with some weird characters!
P.S2
SHA256 is defined in the LibSSL's libcrypto library. The program is compiled with the -lcrypto argument using gcc.
","The output of a hash is almost always opaque binary data - i.e. any bytes.
You're trying to print those as if they were text. That means it'll be applying some encoding to the binary data, trying to interpret it as text.
Basically you should use the opposite of hex2bin in order to convert the arbitrary binary data into hex.
","1567","<c><sha256>","1","2","1","2011-06-03 19:06:09","6231525","0","","","","","2011-06-03 18:59:20",""
"9911229","Using SHA256 encrypting algorithm on Windows Phone 7","I'm using this code inside WPF application:
 public static string EncryptString(string stringToEncrypt)
    {
        SHA256 hash = SHA256.Create();

        byte[] stringHash = System.Text.Encoding.ASCII.GetBytes(stringToEncrypt);
        byte[] encryptedString = hash.ComputeHash(stringHash);

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < encryptedString.Length; i++)
            sb.Append(encryptedString[i].ToString(""X2""));

        return sb.ToString();
    }

But it doesn't work on Windows Phone 7 (SHA256.Create is not recognized).
","You will have to use the Silverlight SHA256 version as documented on MSDN. The blue phone icons marks members that are available on Windows Phone 7.
To create an instance you will have to call the constructor directly of the managed implementation:
var hash = new SHA256Managed();

","1567","<windows-phone-7><sha256><password-encryption>","2","5","1","2012-03-28 15:57:47","9911355","0","","","","","2012-03-28 15:50:50",""
"50009193","Openssl Generate RSA Keypair with SHA-256 signature digest","OpenSSL provides libraries like this to generate the RSA keypair.
RSA *rsa = RSA_generate_key(kBits, kExp, 0, 0);
I want to generate the keypair with SHA-256 signature digest algo. 
Basically, what is the programmatic  equivalent of this command ?
openssl genrsa -out rootca.key 2048 -sha256
","","1563","<openssl><rsa><sha256><key-pair>","0","","0","2018-04-24 19:08:51","","3","","","","","2018-04-24 19:08:51",""
"48843112","How to compare HMAC SHA256 signatures from request body in NodeJS","I am trying to use Dropbox's API, and I got it to successfully send me alerts via webhooks, but now I want to verify the signatures every time they send me an alert.
From dropbox's documentation, they write:
""Every notification request will include a header called X-Dropbox-Signature that includes an HMAC-SHA256 signature of the request body, using your app secret as the signing key. This lets your app verify that the notification really came from Dropbox.""
So I successfully catch that signature, and I use NodeJS built in crypto module to try to create my own signature with HMAC SHA256 and then compare my signature against the signature Dropbox sends me.
Here is my code for doing so:
  var sign = req.get(""X-Dropbox-Signature"");
  console.log(sign);
  var hmac = crypto.createHmac(algorithm, secret);
  hmac.update(JSON.stringify(req.body));
  hash = hmac.digest('hex');
  console.log(hash);

Where algorithm is just 'sha256'
and secret is my secret key that I got from my dropbox apps page.
I have to use JSON.stringify(req.body) because req.body is an object and hmac.update takes a string. I am wondering if that is where my error comes from?
I console log the sign which is the signature from dropbox, and then I console log the signature which I created using hmac, but it is a different signature.
Any suggestions to what I may be doing wrong?
","Greg is right. You need to use the raw body request to check the ingredients of the message. The following code employs the body-parser library to extract the raw body.
var bodyParser = require(""body-parser"");

app.use(bodyParser.json({verify:function(req,res,buf){req.rawBody=buf}}))

Then for the post method:
app.post('/webhooks', function(req, res) {

    const retrievedSignature = req.get(""X-header-Integrity"")
    //send this body string for validation with secret
    const bodyString = new Buffer(req.rawBody, 'utf8')

    let check = integrityCheck(retrievedSignature, bodyString, ""secret"")

});

","1563","<node.js><dropbox><dropbox-api><sha256><hmac>","2","3","1","2019-07-12 08:36:25","","1","","","","","2018-02-17 15:56:11",""
"22607740","MakeSignature.signDetached throws No Such Algorithm exception (SUN provider & SHA-256)","I am trying to digitally sign a PDF document with iText. Since I will be using a hardware encryptor with JCE provider eventually I am also trying to test getting rid of BountyCastle in my unit test and instead use the default SUN implementation for the time being (until the hardware encryptor arrives).
However, I get the following exception when I run my program:
Exception in thread ""main"" java.security.NoSuchAlgorithmException: no such algorithm: SHA256 for provider SUN
    at sun.security.jca.GetInstance.getService(GetInstance.java:87)
    at sun.security.jca.GetInstance.getInstance(GetInstance.java:206)
    at java.security.Security.getImpl(Security.java:698)
    at java.security.MessageDigest.getInstance(MessageDigest.java:215)
    at com.itextpdf.text.pdf.security.DigestAlgorithms.getMessageDigest(DigestAlgorithms.java:159)
    at com.itextpdf.text.pdf.security.ProviderDigest.getMessageDigest(ProviderDigest.java:61)
    at com.itextpdf.text.pdf.security.MakeSignature.signDetached(MakeSignature.java:130)
    at SignDoc.signPdf(SignDoc.java:142)
    at SignDoc.main(SignDoc.java:182)
The last few lines of codes are as below:
    //ExternalSignature es = new PrivateKeySignature(pk, ""SHA-256"", ""BC"");
    //ExternalDigest digest = new BouncyCastleDigest();
    //ExternalSignature es = new PrivateKeySignature(pk, ""SHA-256"", ""SUN"");
    ExternalSignature es = new PrivateKeySignature(pk, ""SHA-256"", ""SunRsaSign"");
    ExternalDigest digest = new ProviderDigest(""SUN"");
    MakeSignature.signDetached(appearance, digest, es, chain, null, null, null, 0, CryptoStandard.CMS);

As you can see, I am just copying the samples and changed the provider name and the call 'new BouncyCastleDigest()' to 'new ProviderDigest(""SUN"")'
Peeking at the source codes of iText (5.5.1-SNAPSHOT), I find the followings code fragments suspicious:

MakeSignature.java line 142 - 145
hashAlgorithm = externalSignature.getHashAlgorithm() is called and then used in
DigestAlgorithms.digest(data, externalDigest.getMessageDigest(hashAlgorithm));
PrivateKeySignature.java line 76
Since I am using PrivateKeySignature, I peek at PrivateKeySignature.java and find that it returns its private class member hashAlgorithm and this is how it obtains the value during Construction (line 76):
this.hashAlgorithm = 
DigestAlgorithms.getDigest(DigestAlgorithms.getAllowedDigests(hashAlgorithm));
DigestAlgorithms.java methods  getAllowedDigests() and getDigest()
In turn, getAllowedDigests() returns the OID of the algorithm if the algorithm name is found in the allowedDigests hash map (2.16.840.1.101.3.4.2.1 in my case), otherwise it returns null. 
getDigest gets the digest name back from the OID using the digestNames hash map.
However, the name in digestNames hash map that corresponds to the OID is SHA256, not SHA-256.

As a result, the final digest name got was ""SHA256"" as opposed to ""SHA-256"" and ""SHA256"" was causing the NoSuchAlgorithm exception in SUN provider.
(I tried getting a message digest instance directly using the SUN provider. It succeeded for SHA-256 but threw the same exception I am reporting here for SHA256.
Is this a problem with iText when using JCE providers other than BC? 
Appreciate if anyone could shed some light on my problem.
","As a temporary workaround, I added the followings to PrivateKeySignature.java:
// Temporary fix - to remove hyphenation in hashAlgorithm name
//        String signMode = hashAlgorithm + ""with"" + encryptionAlgorithm;
        String signMode = hashAlgorithm.replaceAll(""-"","""") + ""with"" + encryptionAlgorithm;
// End Temporary fix
It works for me at least for now. Has to investigate how standard names of different algorithms in different context go before a long term solution can be devised, I believe.
","1553","<itext><sha256>","1","0","1","2014-03-28 04:11:01","","3","","3420251","","2014-03-25 14:07:00","2014-03-24 11:11:31",""
"28324012","Is it safe (in matter of uniqueness) to use UUID to generate a unique identifier for specific string?","String myText;
UUID.nameUUIDFromBytes((myText).getBytes()).toString();

I am using above code to generate a representative for specific texts.
For example 'Moien' should always be represeted with ""e9cad067-56f3-3ea9-98d2-26e25778c48f"", not any changes like project rebuild should be able to change that UUID.
The reason why I'm doing this is so that I don't want those specific texts to be readable(understandable) to human. 
Note: I don't need the ability to regenerate the main text (e.g ""Moien"") after hashing .
I have an alternative way too : 
            MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
            byte[] hash = digest.digest((matcher.group(1)).getBytes(""UTF-8""));
            String a = Base64.encode(hash);

Which od you think is better for my problem? 
","UUID.nameUUIDFromBytes appears to basically just be MD5 hashing, with the result being represented as a UUID.
It feels clearer to me to use a base64-encoded hash explicitly, partly as you can then control which hash gets used - which could be relevant if collisions pose any sort of security risk. (SHA-256 is likely a better option than MD5 for exactly that reason.) The string will be longer from SHA-256 of course, but hopefully that's not a problem.
Note that in either case, I'd convert the string to text using a fixed encoding via StandardCharsets. Don't use the platform default (as per your first snippet) and prefer StandardCharsets over magic string values (as per your second snippet).
","1549","<java><hash><uuid><sha256>","3","4","1","2015-02-04 14:42:21","28324120","4","3","251173","","2015-02-04 14:42:08","2015-02-04 14:37:26",""
"45040171","Apple Pay - How to compare merchant public key with publicKeyHash from payment token?","I'm working on Apple Pay payment token decryption.
According to this instruction Payment Token Format Reference on step 2. I need use publicKeyHash field from header of payment token to determine which 
merchant certificate was used by Apple.
pulbicKeyHash is SHA–256 hash of the X.509 encoded public key bytes of the merchant’s certificate, Base64 encoded as a string.
I have one merchant certificate. So I assume that if i will take sha-256 hash of my certificate's public key and Base64 encode it i will get the same value that i receive in publicKeyHash field of payment token.
But I can't figure out what particular part of the certificate should I hash.
The initial merchant certificate provided by Apple is in .cer format.
I'have extracted public key from it to .pem format. Than i have tried both take hash -> base64encode of public key (String between -----BEGIN CERTIFICATE----- and -----END CERTIFICATE-----) and 
to take hash of base64 decoded .pem which i think should be .der and base 64 encode it. 
And both failed to match value received from Apple Pay. Also it have different length my base64 encoded hash have 88 char length, and publicKeyHash  field is 44 char in length.
When I have tried to base 64 decode publicKeyHash, I've got unreadeble characters like ""D�đ���$�f���@c���$����WP��""
But according to Apple documentation there should be sha-256 hash which can not contain such symbols.
Can somebody explain me what concrete steps should I perform in order to complete this merchant certificate check?
","In my case the main problem and solution was to use Payment Processing Certificate's public key hash and NOT Merchant Identity Certificate's public key hash, witch I was trying to compare with PublicKeyHash from payment token.
   In my excuse I can say that following text from Apple Documentation is pretty much ambiguous:

publicKeyHash SHA–256 hash, Base64 encoded as a string Hash of the
  X.509 encoded public key bytes of the merchant’s certificate.

As we have two kind of certificates merchant and payment processing. It was obvious for me that merchant certificate from documentation is merchant id certificate.
Only after re-read Payment Processing certificate description 

Payment Processing Certificate. A certificate used to securely
  transfer payment data. Apple Pay servers use the payment processing
  certificate’s public key to encrypt the payment data. Use the private
  key to decrypt the data when processing payments.

from Apple Pay JS documentation I have realized my mistake.
So I hope my experience can help somebody not to step on the same rake)
","1514","<encryption><base64><sha256><applepay>","0","2","3","2018-12-02 01:39:10","45716542","4","3","","","","2017-07-11 16:37:45",""
"45040171","Apple Pay - How to compare merchant public key with publicKeyHash from payment token?","I'm working on Apple Pay payment token decryption.
According to this instruction Payment Token Format Reference on step 2. I need use publicKeyHash field from header of payment token to determine which 
merchant certificate was used by Apple.
pulbicKeyHash is SHA–256 hash of the X.509 encoded public key bytes of the merchant’s certificate, Base64 encoded as a string.
I have one merchant certificate. So I assume that if i will take sha-256 hash of my certificate's public key and Base64 encode it i will get the same value that i receive in publicKeyHash field of payment token.
But I can't figure out what particular part of the certificate should I hash.
The initial merchant certificate provided by Apple is in .cer format.
I'have extracted public key from it to .pem format. Than i have tried both take hash -> base64encode of public key (String between -----BEGIN CERTIFICATE----- and -----END CERTIFICATE-----) and 
to take hash of base64 decoded .pem which i think should be .der and base 64 encode it. 
And both failed to match value received from Apple Pay. Also it have different length my base64 encoded hash have 88 char length, and publicKeyHash  field is 44 char in length.
When I have tried to base 64 decode publicKeyHash, I've got unreadeble characters like ""D�đ���$�f���@c���$����WP��""
But according to Apple documentation there should be sha-256 hash which can not contain such symbols.
Can somebody explain me what concrete steps should I perform in order to complete this merchant certificate check?
","This question and the accepted answer were still a bit vague on details, so here is exact tested method in java to check that token.paymentData.header.publicKeyHash matches Apple Pay Payment Processing Certificate:
private static void checkPublicKeyHash(String publicKeyHash, X509Certificate paymentProcessingCertificate)
        throws NoSuchAlgorithmException, CertificateException {

    String certHash = Base64.getEncoder().encodeToString(
            MessageDigest.getInstance(""SHA-256"").digest(
                    paymentProcessingCertificate.getPublicKey().getEncoded()));
    if (!Objects.equals(publicKeyHash, certHash)) {
        throw new DigestException(String.format(
                ""publicKeyHash %s doesn't match Payment Processing Certificate hash %s"",
                publicKeyHash, certHash));
    }
}

","1514","<encryption><base64><sha256><applepay>","0","2","3","2018-12-02 01:39:10","45716542","4","3","","","","2017-07-11 16:37:45",""
"45040171","Apple Pay - How to compare merchant public key with publicKeyHash from payment token?","I'm working on Apple Pay payment token decryption.
According to this instruction Payment Token Format Reference on step 2. I need use publicKeyHash field from header of payment token to determine which 
merchant certificate was used by Apple.
pulbicKeyHash is SHA–256 hash of the X.509 encoded public key bytes of the merchant’s certificate, Base64 encoded as a string.
I have one merchant certificate. So I assume that if i will take sha-256 hash of my certificate's public key and Base64 encode it i will get the same value that i receive in publicKeyHash field of payment token.
But I can't figure out what particular part of the certificate should I hash.
The initial merchant certificate provided by Apple is in .cer format.
I'have extracted public key from it to .pem format. Than i have tried both take hash -> base64encode of public key (String between -----BEGIN CERTIFICATE----- and -----END CERTIFICATE-----) and 
to take hash of base64 decoded .pem which i think should be .der and base 64 encode it. 
And both failed to match value received from Apple Pay. Also it have different length my base64 encoded hash have 88 char length, and publicKeyHash  field is 44 char in length.
When I have tried to base 64 decode publicKeyHash, I've got unreadeble characters like ""D�đ���$�f���@c���$����WP��""
But according to Apple documentation there should be sha-256 hash which can not contain such symbols.
Can somebody explain me what concrete steps should I perform in order to complete this merchant certificate check?
","Its shame I was not able to find openssl command to extract hash directly from the cert. So you have to create the public key first in order to get the public key hash. There are two ways to extract the public key. 
Step 1 
A. From your ecc private key (payment processing private key)
openssl ec -in ecc_private_key.key -pubout -out ec_public_key.pem

OR  
B. From the cert downloaded from apple pay portal (after uploading payment processing csr)
openssl x509 -inform der -in apple_pay.cer -pubkey -noout > apple_pay_public_key.pem

Both will give you public key in following format
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAENGbyXUzeZTdeyyNuXyc0nMzXmnLl
xMwd/t/sCZr3RPhytPbZpR/V4/xHqN/MVzozzq30I0/eUefbThEBl236Og==
-----END PUBLIC KEY-----

Step 2
You can use following code to extract the base64 hash from above public key remember to remove headers/footers and line feeds. 
I hoped I could have figured out how to use openssl tool to get hash from public key but anyway following c# code works for me. its very simple and easy to port to java/python/php or whatever your preference is. Or just use following code online at ideone.com
String publicKeyBase64 = ""MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAENGbyXUzeZTdeyyNuXyc0nMzXmnLlxMwd/t/sCZr3RPhytPbZpR/V4/xHqN/MVzozzq30I0/eUefbThEBl236Og=="";

byte[] publicKey = Convert.FromBase64String(publicKeyBase64);
SHA256 sha256 = SHA256Managed.Create();
byte[] hash = sha256.ComputeHash(publicKey);
String publicKeyHash = Convert.ToBase64String(hash);

Console.WriteLine(""Result: {0}"", publicKeyHash);

Please keep in mind that your system should be able to accept multiple keys at any given time and instead of just verifying you need to load the correct private key based on publicKeyHash you receive from device(iphone/ipad etc) considering the scenario when your current certificate is expiring (or you are revoking for any reason) otherwise your system may not be able to accept the transaction for a short period of time. As per my one of my encounter it took apple more than one hour, before new payment processing keys became active, after pressing activate in the portal.
","1514","<encryption><base64><sha256><applepay>","0","0","3","2018-12-02 01:39:10","45716542","4","3","","","","2017-07-11 16:37:45",""
"48455982","R Binance API HMAC SHA256 signed message","Im trying to send over signed api messages using the binance APIs I keep failing with a 404 error. can someone help me out with the below code please?
library(jsonlite)
library(httr)
library(dplyr)
library(digest)


timestamp <- 1516941586 #as.numeric(as.POSIXct(Sys.time()))

post_message <- paste0(timestamp, 'public.api' ) # data_client.id = client 
id # data_key = key

sha.message <- toupper(digest::hmac('private.api', object = post_message, 
algo = 'sha256', serialize = F))

url <- 'https://api.binance.com/api/v3/account'

body = list('timestamp' = timestamp, 'signature' = sha.message)
body2 <- paste(""?timestamp="",timestamp,""&signature="",sha.message, sep = """")


httr::POST(url, body2 = body, verbose())

here is the documentation https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md
","Based on example under section ""SIGNED Endpoint Examples for POST /api/v1/order"" in the website, you can follow something similar. You will need to replace with your own apiKey and secretKey.
library(httr)
library(openssl)

url <- 'https://api.binance.com/api/v3/account'
apiKey <- ""vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A""
secretKey <- ""NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j""

timestamp <- 1516941586
recvWindow <- 1e20
postmsg <- paste0(""timestamp="", timestamp, ""&recvWindow="", recvWindow)
signature <- openssl::sha256(postmsg, key=secretKey)

GET(url, 
    add_headers(""X-MBX-APIKEY""=apiKey),
    query=list(timestamp=timestamp, recvWindow=recvWindow, signature=signature), 
    verbose())

","1501","<r><api><post><sha256><hmac>","0","0","1","2018-01-26 06:10:27","48456395","0","","","","","2018-01-26 04:54:06",""
"4494402","Truncating a byte array vs. substringing the Encoded string coming out of SHA-256","I am not familiar with Hashing algorithms and the risks associated when using them and therefore have a question on the answer below that I received on a previous question . . .  

Based on the comment that the hash value must, when encoded to ASCII, fit within 16 ASCI characters, the solution is first, to choose some cryptographic hash function (the SHA-2 family includes SHA-256, SHA-384, and SHA-512) 
  then, to truncate the output of the chosen hash function to 96 bits (12 bytes) - that is, keep the first 12 bytes of the hash function output and discard the remaining bytes 
  then, to base-64-encode the truncated output to 16 ASCII characters (128 bits) 
  yielding effectively a 96-bit-strong cryptographic hash. 

If I substring the base-64-encoded string to 16 characters is that fundamentally different then keeping the first 12 bytes of the hash function and then base-64-encoding them? If so, could someone please explain (provide example code) for truncating the byte array?
I tested the substring of the full hash value against 36,000+ distinct values and had no collisions. The code below  is my current implementation.
Thanks for any help (and clarity) you can provide.
public static byte[] CreateSha256Hash(string data)
{
    byte[] dataToHash = (new UnicodeEncoding()).GetBytes(data);
    SHA256 shaM = new SHA256Managed();
    byte[] hashedData = shaM.ComputeHash(dataToHash);

    return hashedData;
}

public override void InputBuffer_ProcessInputRow(InputBufferBuffer Row)
{
    byte[] hashedData = CreateSha256Hash(Row.HashString);

    string s = Convert.ToBase64String(hashedData, Base64FormattingOptions.None);

    Row.HashValue = s.Substring(0, 16);


}

[Original post]
(http://stackoverflow.com/questions/4340471/is-there-a-hash-algorithm-that-produces-a-hash-size-of-64-bits-in-c)
","No, there is no difference. However, it's easier to just get the base64 string of the first 12 bytes of the array, instead of truncating the array:
public override void InputBuffer_ProcessInputRow(InputBufferBuffer Row) {

    byte[] hashedData = CreateSha256Hash(Row.HashString);

    Row.HashValue = Convert.ToBase64String(hashedData, 0, 12);

}

The base 64 encoding simply puts 6 bits in each character, so 3 bytes (24 bits) goes into 4 characters. As long as you are splitting the data at an even 3 byte boundary, it's the same as splitting the string at the even 4 character boundary.
If you try to split the data between these boundaries, the base64 string will be padded with filler data up to the next boundary, so the result would not be the same.
","1497","<c#><hash><bytearray><sha256>","0","1","2","2010-12-20 22:18:09","4494478","0","","","","","2010-12-20 22:01:52",""
"4494402","Truncating a byte array vs. substringing the Encoded string coming out of SHA-256","I am not familiar with Hashing algorithms and the risks associated when using them and therefore have a question on the answer below that I received on a previous question . . .  

Based on the comment that the hash value must, when encoded to ASCII, fit within 16 ASCI characters, the solution is first, to choose some cryptographic hash function (the SHA-2 family includes SHA-256, SHA-384, and SHA-512) 
  then, to truncate the output of the chosen hash function to 96 bits (12 bytes) - that is, keep the first 12 bytes of the hash function output and discard the remaining bytes 
  then, to base-64-encode the truncated output to 16 ASCII characters (128 bits) 
  yielding effectively a 96-bit-strong cryptographic hash. 

If I substring the base-64-encoded string to 16 characters is that fundamentally different then keeping the first 12 bytes of the hash function and then base-64-encoding them? If so, could someone please explain (provide example code) for truncating the byte array?
I tested the substring of the full hash value against 36,000+ distinct values and had no collisions. The code below  is my current implementation.
Thanks for any help (and clarity) you can provide.
public static byte[] CreateSha256Hash(string data)
{
    byte[] dataToHash = (new UnicodeEncoding()).GetBytes(data);
    SHA256 shaM = new SHA256Managed();
    byte[] hashedData = shaM.ComputeHash(dataToHash);

    return hashedData;
}

public override void InputBuffer_ProcessInputRow(InputBufferBuffer Row)
{
    byte[] hashedData = CreateSha256Hash(Row.HashString);

    string s = Convert.ToBase64String(hashedData, Base64FormattingOptions.None);

    Row.HashValue = s.Substring(0, 16);


}

[Original post]
(http://stackoverflow.com/questions/4340471/is-there-a-hash-algorithm-that-produces-a-hash-size-of-64-bits-in-c)
","Truncating is as easy as adding Take(12) here:
Change
 byte[] hashedData = CreateSha256Hash(Row.HashString);

To:
 byte[] hashedData = CreateSha256Hash(Row.HashString).Take(12).ToArray();

","1497","<c#><hash><bytearray><sha256>","0","0","2","2010-12-20 22:18:09","4494478","0","","","","","2010-12-20 22:01:52",""
"34941233","Why HMAC sha256 return different value on PHP & Javascript","I am trying to build a HMAC SHA256 string in Javascript using CryptoJS, my existing code is written in PHP using the Akamai library.
In some cases I am getting different results compared to PHP & I am unable to understand why it is giving me different results
    /* 
       <php> Using native hash_hmac
       Generating key by concatenating char 
    */ 

      $signature1 = hash_hmac('SHA256', ""st=1453362060~exp=1453363260~acl=/*"", chr(63));
      $signature2 = hash_hmac('SHA256', ""st=1453362060~exp=1453363260~acl=/*"", chr(63) . chr(23));
      $signature3 = hash_hmac('SHA256', ""st=1453362060~exp=1453363260~acl=/*"", chr(63) . chr(23) . chr(253));

    /*
       here is result from php
       signature1 : 3e086bb48ab9aafa85661f9ce1b7dac49befddf117ce2a42d93c92b6abe513ce ( matched: same as JavaScript)
       signature2 : 3667dd414a50f68f7ce083e540f27f68f7d0f18617b1fb1e4788bffeaeab59f6( matched: same as JavaScript)
       signature3 : dd5a20041661046fdee871c8b9e77b3190fbbf85937c098090a1d524719b6aa9 ( not matched: diff from JavaScript)
    */


    /* 
       <JavaScript> using CryptoJS
       Generating key by concatenating three char 
    */ 

    var signature1 = CryptoJS.HmacSHA256(""st=1453362060~exp=1453363260~acl=/*"", String.fromCharCode(63));
    var signature2 = CryptoJS.HmacSHA256(""st=1453362060~exp=1453363260~acl=/*"", String.fromCharCode(63) + String.fromCharCode(23));
    var signature3 = CryptoJS.HmacSHA256(""st=1453362060~exp=1453363260~acl=/*"", String.fromCharCode(63) + String.fromCharCode(23) + String.fromCharCode(253));

    /* 
       here is result from JavaScript
       signature1 : 3e086bb48ab9aafa85661f9ce1b7dac49befddf117ce2a42d93c92b6abe513ce ( matched: same as php)
       signature2 : 3667dd414a50f68f7ce083e540f27f68f7d0f18617b1fb1e4788bffeaeab59f6 ( matched: same as php)
       signature3 : 28075dc75de9f22f83e87772f09a89efb007f2e298167686832eff122ef6eb08 ( not matched: diff from php)
    */

First two HMAC values are matching but when I append the third char it produces different results, Can anyone please explain why this is. 
here is
PHPFiddle & 
JSFiddle
","CryptoJS add UTF8 encoding in ""Key"" while creating hash sha256 so that we are getting different value.
If i wrap utf8_encode in PHP side then we will get same hmac value as compare to JavaScript 
     // <php>
     $key = chr(63) . chr(23) . chr(253);
     signature3 = hash_hmac('SHA256', ""st=1453362060~exp=1453363260~acl=/*"", utf8_encode($key));

","1492","<javascript><php><sha256><hmac><cryptojs>","3","2","1","2016-08-17 15:59:22","34945401","0","4","5348307","","2016-08-17 15:59:22","2016-01-22 07:28:40",""
"26784060","How to use PHP crypt() function with a SHA256 salt string to generate the same hash it would generate if SHA256 wasn't supported on the server?","My web application uses the PHP crypt() function for password hashing. I wanted to use SHA256 algorithm, so I generated the users' salt strings accordingly. The problem is that i didn't realize that SHA256 was not supported on the server I was using (CRYPT_SHA_256). I've just moved my application to another server which supports SHA256 and basically none of my users can log in because their password strings and salt strings generate different hashes compared to the hashes generated on the previous server.
What do you think the best solution would be without asking every single user to change their passwords?
Thank you in advance, I appreciate any useful ideas.
","Actually the crypt() function should be able to verify your existing hashes, even if they are not SHA-256 as you wanted to generate. Since the new password API internally use the crypt() function, it should even be possible to verify your hashes with the new functions:
// Check if the hash of the entered login password, matches the stored hash.
// The salt and the cost factor will be extracted from $existingHashFromDb.
$isPasswordCorrect = password_verify($password, $existingHashFromDb);

To generate new hashes you should use the new function password_hash(), it will automatically create a safe salt. Evenmore it calculates a BCrypt hash, instead of the SHA-256 which is not appropriate to hash passwords.
// Hash a new password for storing in the database.
// The function automatically generates a cryptographically safe salt.
$hashToStoreInDb = password_hash($password, PASSWORD_BCRYPT);

","1484","<php><login><sha256><crypt><password-hash>","0","0","1","2014-11-07 11:45:50","","6","","2384186","","2014-11-06 16:16:48","2014-11-06 16:10:21",""
"28469602","SHA256 / SHA512: MySQL Code for Password Hashing and Salting","I need some help understanding how to hash and salt passwords for users in SQL using SHA256 or SHA512. I think for each user I have to generate a different salt? How do I check the password at login and update and existing password in MySQL?
I used this resource to do some research on implementation but it only shows Java code, how do I do this in MySQL? Would this be done in a stored procedure?
Thanks
","I am no authority on the security aspects but using SQL Server you could handle the different pieces in the following manner:

For Hashing:

You could use [HASHBYTES] and either of the SHA-2 algorithms based on your requirement. HASHBYTES('SHA2_256', @Password);
Be aware that this function takes only 8000 bytes and works on varchar, nvarchar, or varbinary, which should suffice in your case but just in case. 
You could also write a SQL CLR function in .NET to do the hashing if the input constraints dont work for you.

For the Salt:

Use GUIDs , using a part of the GUID might not give you the entropy required for a salt, so I recommend using the whole string.
or Use the RANDOM() function to generate a unique alphanumeric string with bit of logic. 

Process:

Add the Salt to the Password before hashing (HASHBYTES('SHA2_256', @Password + Salt);and store both the Hashed output and Salt for the user during the registration process.
On a subsequent login attempt, Add the user-entered password with the salt and get Hashed output and then compare it with the store hashed value. If the value matches then the user is legitimate else not. 
","1474","<mysql><sql><hash><salt><sha256>","0","0","1","2015-02-12 09:53:54","28470018","2","1","2386782","","2015-02-12 09:53:54","2015-02-12 04:57:29",""
"11662749","Breaking a File into Blocks","Working on an assignment for a self-study course that I'm taking in cryptography (I'm receiving no credit for this class). I need to compute hash values on a large file where the hash is done block by block. The thing that I am stumped on at the moment is how to break up the file into these blocks? I'm using python, which I'm very new to. 
f = open('myfile', 'rb')
BLOCK_SIZE = 1024
m = Crypto.Hash.SHA256.new()
thisHash = """"
blocks = os.path.getsize('myfile') / BLOCK_SIZE #ignore partial last block for now

for i in Range(blocks):
    b = f.read(BLOCK_SIZE)
    thisHash = m.update(b.encode())
    f.seek(block_size, os.SEEK_CUR) 

Am I approaching this correctly? The code seems to run up until the m.update(b.encode()) line executes. I don't know if I am way off base or what to do to make this work. Any advice is appreciated. Thanks!
(note: as you might notice, this code doesn't really produce anything at the moment - I'm just getting some of the scaffolding set up)
","You'll have to do a few things to make this example work correctly. Here are some points:

Crypto.Hash.SHA256.SHA256Hash.update() (you invoke it as m.update()) has no return value. To pull a human-readable hash out of the object, .update() it a bunch of times and then call .hexdigest()
You don't need to encode binary data before feeding it to the .update() function. Just pass the string containing the data block.
File pointers are advanced by file.read(). You don't need a separate .seek() operation.
.read() will return an empty string if you've hit EOF already. This is totally fine. Feel free just to pull in that partial block.
Variable names are case-sensitive. block_size is not the same variable as BLOCK_SIZE.

Making these few minor adjustments, and assuming you have all the right imports, you'll be on the right track.
","1471","<python><sha256>","3","5","2","2014-02-12 18:33:46","11663144","1","","","","","2012-07-26 05:15:09",""
"11662749","Breaking a File into Blocks","Working on an assignment for a self-study course that I'm taking in cryptography (I'm receiving no credit for this class). I need to compute hash values on a large file where the hash is done block by block. The thing that I am stumped on at the moment is how to break up the file into these blocks? I'm using python, which I'm very new to. 
f = open('myfile', 'rb')
BLOCK_SIZE = 1024
m = Crypto.Hash.SHA256.new()
thisHash = """"
blocks = os.path.getsize('myfile') / BLOCK_SIZE #ignore partial last block for now

for i in Range(blocks):
    b = f.read(BLOCK_SIZE)
    thisHash = m.update(b.encode())
    f.seek(block_size, os.SEEK_CUR) 

Am I approaching this correctly? The code seems to run up until the m.update(b.encode()) line executes. I don't know if I am way off base or what to do to make this work. Any advice is appreciated. Thanks!
(note: as you might notice, this code doesn't really produce anything at the moment - I'm just getting some of the scaffolding set up)
","Alternative solution would be breaking the file into blocks first and then perform hash block by block
This will break the file into chunks of 1024 bytes
with open(file,'rb') as f:
    while True:
        chunk = f.read(1024)
        if chunk:
            fList.append(chunk)
        else:
            numBlocks = len(fList)
            break

Note: last block size may be less than 1024 bytes
Now you can do the hash in whichever you want to.
","1471","<python><sha256>","3","0","2","2014-02-12 18:33:46","11663144","1","","","","","2012-07-26 05:15:09",""
"41667988","CMake check hash (MD5 / SHA256) for downloaded file","I am using CMake add_custom_command In a Util.cmake script to download a couple of files that will later be used in the build process. These files however may change and I would like to add a way to check the hash value of the local file against a provided value (within CMake) to decide if the file needs to be re-downloaded.
Currently, once the file has been downloaded, CMake will not consider re-downloading it, because the file already exists locally.
In the future, I want to provide a MD5 / SHA256 checksum of that file and make sure the local file is the corect one.
Here is what I am trying to do (this is just an concept example):
add_custom_command( OUTPUT ./file.dat
    COMMAND wget ${FILE_PATH}
)
if (opt_HASH)
    add_custom_command(OUTPUT ${local_HASH}
        COMMAND local_HASH=$(sha256sum ./file.dat)
        DEPENDS ./file.dat
    )
    if (NOT ${opt_HASH} STREQUAL ${local_HASH})
        # throw ERROR
    endif()
endif()

As you can see I only want to detect a mismatch right now and don't even want to auto-download the changed file. The opt_HASH is obviously provided through CMake, but what is important is that this call needs to depend on the file already being downloaded and I seem to be able to do that with a more simpler call to FILE().
PS: If it's somehow easier, I could also use MD5 over `SHA256.
","The usage of add_custom_target could be one solution. By default it will be executed always. The following should work on linux:
add_custom_target(UpdateExternalFiles
    COMMAND ""sha256sum -c file.dat.checksum ./file.dat || wget ${FILE_PATH}""
    COMMAND ""sha256sum ./file.dat >> file.dat.checksum""
)

First line verifies the checksum and loads the file on differences. The second line updates the checksum.
Note: This snipped assumed that file.dat.checksum will be created with the second command.
","1469","<c++><hash><download><cmake><sha256>","1","0","2","2017-09-19 14:11:06","","1","","","","","2017-01-16 00:39:24",""
"41667988","CMake check hash (MD5 / SHA256) for downloaded file","I am using CMake add_custom_command In a Util.cmake script to download a couple of files that will later be used in the build process. These files however may change and I would like to add a way to check the hash value of the local file against a provided value (within CMake) to decide if the file needs to be re-downloaded.
Currently, once the file has been downloaded, CMake will not consider re-downloading it, because the file already exists locally.
In the future, I want to provide a MD5 / SHA256 checksum of that file and make sure the local file is the corect one.
Here is what I am trying to do (this is just an concept example):
add_custom_command( OUTPUT ./file.dat
    COMMAND wget ${FILE_PATH}
)
if (opt_HASH)
    add_custom_command(OUTPUT ${local_HASH}
        COMMAND local_HASH=$(sha256sum ./file.dat)
        DEPENDS ./file.dat
    )
    if (NOT ${opt_HASH} STREQUAL ${local_HASH})
        # throw ERROR
    endif()
endif()

As you can see I only want to detect a mismatch right now and don't even want to auto-download the changed file. The opt_HASH is obviously provided through CMake, but what is important is that this call needs to depend on the file already being downloaded and I seem to be able to do that with a more simpler call to FILE().
PS: If it's somehow easier, I could also use MD5 over `SHA256.
","cmakes FILE command supports hashing:
https://cmake.org/cmake/help/v3.8/command/file.html
file(SHA256 ./file.dat CHECKSUM_VARIABLE)

should put the hash into the CHECKSUM_VARIABLE
","1469","<c++><hash><download><cmake><sha256>","1","1","2","2017-09-19 14:11:06","","1","","","","","2017-01-16 00:39:24",""
"38927124","Computing Signature/Hash in Javascript and have same result as C#","I have the following code in C#
var apiKey = ""SBB3aWxsIG1ha2UgbXbcQVBJIHN|Y3VyZQ=="";
var apiSecret = ""QaTW3xlf1U5ljdlAJSdltzT71fFF+eZ="";

var key = Convert.FromBase64String(apiSecret);
var provider = new System.Security.Cryptography.HMACSHA256(key);

var hash = provider.ComputeHash(Encoding.UTF8.GetBytes(apiKey));
var signature = Convert.ToBase64String(hash);

I am trying to get the same result in Javascript using the CryptJS library but from what i can tell i am not converting the key and secret to byte arrays and the encoding is incorrect. first try looks like:
var apiKey = ""SBB3aWxsIG1ha2UgbXbcQVBJIHN|Y3VyZQ=="";
var apiSecret = ""QaTW3xlf1U5ljdlAJSdltzT71fFF+eZ="";
var hash = CryptoJS.HmacSHA256(apiKey, apiSecret);
var sig = hash.toString(CryptoJS.enc.Base64);

","Inspire by https://stackoverflow.com/a/13837543/1810391
Javascript
var CryptoJS = require('crypto-js');

var apiKey = ""SBB3aWxsIG1ha2UgbXbcQVBJIHN|Y3VyZQ=="";
var apiSecret = ""QaTW3xlf1U5ljdlAJSdltzT71fFF+eZ="";

// var key = Convert.FromBase64String(apiSecret);
var key = CryptoJS.enc.Base64.parse(apiSecret);
console.log('key:' + key);

// var prehash = Encoding.UTF8.GetBytes(apiKey);
var prehash = CryptoJS.enc.Utf8.parse(apiKey);
console.log('Pre-hash:' + prehash);

// var provider = new System.Security.Cryptography.HMACSHA256(key);
// var hash = provider.ComputeHash(prehash);
var hash = CryptoJS.HmacSHA256(prehash, key);
console.log('hash:' + hash);

//var signature = Convert.ToBase64String(hash);
var signature = hash.toString(CryptoJS.enc.Base64);
console.log('signature:' + signature);

Javascript Output
key:41a4d6df195fd54e658dd940252765b734fbd5f145f9e6
Pre-hash:53424233615778734947316861325567625862635156424a49484e7c593356795a513d3d
hash:ecb6cdf5dd39872bb2cbce4321e2725e11b99c01af9c2a620ebbaf3d8d8607e7
signature:7LbN9d05hyuyy85DIeJyXhG5nAGvnCpiDruvPY2GB+c= 

C#
using System;
using System.Text;

namespace ConsoleApplication
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var apiKey = ""SBB3aWxsIG1ha2UgbXbcQVBJIHN|Y3VyZQ=="";
            var apiSecret = ""QaTW3xlf1U5ljdlAJSdltzT71fFF+eZ="";
            var key = Convert.FromBase64String(apiSecret);
            Console.Write(""key:"");
            prtByte(key);

            Console.Write(""Pre-hash:"");
            prtByte(Encoding.UTF8.GetBytes(apiKey));
            var provider = new System.Security.Cryptography.HMACSHA256(key);
            var hash = provider.ComputeHash(Encoding.UTF8.GetBytes(apiKey));
            Console.Write(""hash:"");
            prtByte(hash);

            var signature = Convert.ToBase64String(hash);
            Console.WriteLine(""signature:"" + signature);
        }
        public static void prtByte(byte[] b)
        {
            for (var i = 0; i < b.Length; i++)
            {
                Console.Write(b[i].ToString(""x2""));
            }
            Console.WriteLine();
        }
    }
}

C# Output
key:41a4d6df195fd54e658dd940252765b734fbd5f145f9e6
Pre-hash:53424233615778734947316861325567625862635156424a49484e7c593356795a513d3d
hash:ecb6cdf5dd39872bb2cbce4321e2725e11b99c01af9c2a620ebbaf3d8d8607e7
signature:7LbN9d05hyuyy85DIeJyXhG5nAGvnCpiDruvPY2GB+c=

","1469","<javascript><c#><hash><sha256><cryptojs>","7","14","1","2016-08-18 14:56:06","38988181","7","1","810571","","2016-08-16 19:02:47","2016-08-12 22:11:29",""
"1249413","Fastest path to Lua SHA256 RFC-2104 compliant HMAC signature?","I'm running Debian Linux, and for a Lua script I need to create a SHA256 checksum to authenticate requests to Amazon Web Services.  They don't say for sure but it looks as if they may want a base64 encoding of the resulting SHA256 checksum.

I'd be happy if someone had done a Lua binding.
I'd be content if someone could help me figure out how to use the command-line /usr/bin/sha256sum for this purpose.
I'd settle for a pointer to C code and deal with the hassle of the binding and the base64 encoding myself.

I surely don't need to reimplement SHA256 for myself; if someone has an implementation in ANSI standard C that they like, please let me know.  Or a better solution!
","It looks like mushclient has already written a Lua wrapper for a SHA-256 library.
","1465","<c><lua><amazon-web-services><sha256>","2","2","3","2009-08-27 20:57:58","1259947","0","","","","","2009-08-08 17:22:54",""
"1249413","Fastest path to Lua SHA256 RFC-2104 compliant HMAC signature?","I'm running Debian Linux, and for a Lua script I need to create a SHA256 checksum to authenticate requests to Amazon Web Services.  They don't say for sure but it looks as if they may want a base64 encoding of the resulting SHA256 checksum.

I'd be happy if someone had done a Lua binding.
I'd be content if someone could help me figure out how to use the command-line /usr/bin/sha256sum for this purpose.
I'd settle for a pointer to C code and deal with the hassle of the binding and the base64 encoding myself.

I surely don't need to reimplement SHA256 for myself; if someone has an implementation in ANSI standard C that they like, please let me know.  Or a better solution!
","How about LuaCrypto, a front-end for OpenSSL:
http://luacrypto.luaforge.net/
","1465","<c><lua><amazon-web-services><sha256>","2","2","3","2009-08-27 20:57:58","1259947","0","","","","","2009-08-08 17:22:54",""
"1249413","Fastest path to Lua SHA256 RFC-2104 compliant HMAC signature?","I'm running Debian Linux, and for a Lua script I need to create a SHA256 checksum to authenticate requests to Amazon Web Services.  They don't say for sure but it looks as if they may want a base64 encoding of the resulting SHA256 checksum.

I'd be happy if someone had done a Lua binding.
I'd be content if someone could help me figure out how to use the command-line /usr/bin/sha256sum for this purpose.
I'd settle for a pointer to C code and deal with the hassle of the binding and the base64 encoding myself.

I surely don't need to reimplement SHA256 for myself; if someone has an implementation in ANSI standard C that they like, please let me know.  Or a better solution!
","A work-around might be the free signing service at http://apisigning.com/
","1465","<c><lua><amazon-web-services><sha256>","2","0","3","2009-08-27 20:57:58","1259947","0","","","","","2009-08-08 17:22:54",""
"40557467","Xamarin PCLCrypto SHA256 give different hash","I have a project in Xamarin Forms XAML portable. i need to get a SHA256 from a string. I use the PCLCrypto for finding my hash, because System.Security.Cryptography doesn't exist in PCL.
I get a sha256 from an API to compare the values. This is the method I use to get the SHA256 hash:
private string getSha256(string data) {
            byte[] byteData = Encoding.UTF8.GetBytes(data);
            var hasher = WinRTCrypto.HashAlgorithmProvider.OpenAlgorithm(HashAlgorithm.Sha256);
            byte[] hash = hasher.HashData(byteData);
            string hashBase64 = Convert.ToBase64String(hash);
            return hashBase64;
        }

The string I use is 'secret'. I use this to check it:
http://www.xorbin.com/tools/sha256-hash-calculator
and it gives:
2bb80d537b1da3e38bd30361aa855686bde0eacd7162fef6a25fe97bf527a25b

But I'm getting two different hash codes:
API hash:
    2bb80d537b1da3e38bd30361aa855686bde0eacd7162fef6a25fe97bf527a25b
PCLCrypto hash I generated:
    K7gNU3sdo+OL0wNhqoVWhr3g6s1xYv72ol/pe/Unols=
Its the same string 'secret' but is resulting in different hashes. I also noticed PCLCrypto hash always ends with '='. 
Why are they different?
","If you use a converter like http://hash.online-convert.com/sha256-generator you'll see that the two hashes are the same (enter 'secret' in the Text box and click on Convert File).
The '2bb80...' string is the hex encoding of the hash, and the 'K7gNU...' string is the base64 encoding of the hash (which is what you asked for in your call to PCLCrypto).  The issue is that the hash itself is binary data, so to display it you need some conversion to string. You're seeing two common ways to do that, both using the same underlying hash.
","1460","<c#><xamarin.forms><sha256>","2","2","1","2016-11-12 05:24:54","40558600","0","","845356","","2016-11-12 05:24:54","2016-11-11 22:55:17",""
"16111754","SHA256 in Go and PHP giving different results","I'm trying to send a SHA256 hashed string over HTTP to a server, where I want to authenticate by performing a SHA256 hash and verifying the two match.  For testing purposes I'm using the same string, however my results do not match up.  Could this be something with default encoding schemes for my base64_encode calls?  Thanks.
In PHP I'm doing:
$sha = hash(""sha256"", $url, true);
$sha = base64_encode(urlencode($sha));

And in Go I'm doing
//convert string to byte slice
converted := []byte(to_hash)

//hash the byte slice and return the resulting string
hasher := sha256.New()
hasher.Write(converted)
return (base64.URLEncoding.EncodeToString(hasher.Sum(nil)))

","I was able to figure it out after a while.  I standardized both to hexadecimal encoding.  To accomplish this I changed the code as follows:
PHP:
$sha = hash(""sha256"", $url, false); //false is default and returns hex
//$sha = base64_encode(urlencode($sha)); //removed

Go:
//convert string to byte slice
converted := []byte(to_hash)

//hash the byte slice and return the resulting string
hasher := sha256.New()
hasher.Write(converted)
return (hex.EncodeToString(hasher.Sum(nil))) //changed to hex and removed URLEncoding

","1448","<php><go><sha><sha256>","5","6","1","2013-04-26 08:50:36","16113567","3","","367456","","2013-04-26 08:50:36","2013-04-19 19:02:12",""
"42777724","Best way to calculate UDP datagram checksum?","What is the best way to calculate a UDP datagram checksum? Out of Python's MD5, SHA256 or any other method, which method can surely help in identifying a corrupt packet? Also, my datagram is of the format:
packet = struct.pack('HH', seq_num, checksum) + payload

, where payload is the message I'm sending to the receiver. So, should I calculate the checksum in this case for the packet ?
","None of them. The checksum is just a simple mathematical sum of the bytes, not a hash.
Just read wikipedia's page for UDP:

“Checksum is the 16-bit one's complement of the one's complement sum of a pseudo header of information from the IP header, the UDP header, and the data, padded with zero octets at the end (if necessary) to make a multiple of two octets. ”

Hint cf that answer for an implementation
","1448","<python><udp><md5><checksum><sha256>","0","0","1","2017-03-14 04:51:49","42777865","1","","4806357","","2017-03-14 04:31:59","2017-03-14 04:23:29",""
"31170035","SHA256 hash of String in C# does not agree with hash on website","If I hash the string ""password"" in C# using SHA256 using the below method I get this as my output:
e201065d0554652615c320c00a1d5bc8edca469d72c2790e24152d0c1e2b6189

But this website(SHA-256 produces a 256-bit (32-byte) hash value) tells me the has is:
5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8

I'm clearly having a data format issue or something similar.  Any ideas why this C# SHA256Managed method is returning something different?  I'm sending the method ""password"" as the input parameter.  
    private static string CalculateSHA256Hash(string text)
    {
        UnicodeEncoding UE = new UnicodeEncoding();
        byte[] hashValue;
        byte[] message = UE.GetBytes(text);

        SHA256Managed hashString = new SHA256Managed();
        string hex = """";

        hashValue = hashString.ComputeHash(message);
        foreach (byte x in hashValue)
        {
            hex += String.Format(""{0:x2}"", x);
        }
        return hex;
    }

","UnicodeEncoding is UTF-16, guaranteed to inflate all your characters to two to four bytes to represent their Unicode code point (see also the Remarks section on MSDN).
Use (the static) Encoding.UTF8 instead, so most characters will fit in one byte. It depends on which system you need to mimic whether that will work for all strings.
","1442","<c#><hash><sha256>","6","13","1","2015-07-01 19:41:15","","2","","1729885","","2015-07-01 19:34:05","2015-07-01 19:28:38",""
"13757779","Discrepancy between sha256sum executable and PyCrypto library","I am trying to take the SHA256 sum of an ASCII encoded string. To begin, I tried the sha256sum executable: 
$ echo foo | sha256sum
b5bb9d8014a0f9b1d61e21e796d78dccdf1352f23cd32812f4850b878ae4944c

But when I use the PyCrypto library, I get something different: 
from Crypto.Hash import SHA256
h = SHA256.new();
h.update('foo');
print(h.hexdigest());

I get the following: 
c5aac592460a9ac7845e341090f6f9c81f201b63e5338ee8948a6fe6830c55dc

I suspect I am missing something about the first one, that is, echo foo might have a delimiter or something, but I haven't been able to figure out what.
What is different about these two situations?
","The command echo foo adds a newline at the end of the output, you should use the -n option:
$ echo -n foo | sha256sum
2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae  -
$ python
Python 2.7.3 (default, Sep 26 2012, 21:53:58) 
[GCC 4.7.2] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import hashlib
>>> hashlib.sha256('foo').hexdigest()
'2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae'

","1438","<python><command-line><sha256>","1","7","1","2012-12-07 06:42:35","13758209","0","","","","","2012-12-07 06:04:22",""
"49223904","How unique are the first 8-12 characters of SHA256 hashes?","Take this hash for example:
ba7816bf 8f01cfea 414140de 5dae2223 b00361a3 96177a9c b410ff61 f20015ad

It's too long for my purposes so I intend to use a small chunk from it, such as:
ba7816bf8f01
ba7816bf

Or similar. My intended use case:

Video gallery on a website, represented by thumbnails. They are in random order.
They play in the lightbox. They don't have a unique ID, only their URL is unique.
While the lightbox is open I add something to the end of the page URL with JS History API.


//example.com/video-gallery/lightbox/ba7816bf8f01


The suffix needs to be short and simple, definitely not a URL.
People share the URL.
The server can make sense of the lightbox/ba7816bf8f01 in relation to /video-gallery.
Visiting the URL, the lightbox needs to find which video the suffix belongs to and play it.

I thought I'd SHA256 the URL of the video, use the first few characters as an ad-hoc ID. How many characters should I use from the generated hash, to considerably reduce the chance of collision?
I got the idea from URLs and Hashing by Google.
","The Wikipedia page on birthday attacks has a table with the number of entries you need to produce a certain chance of collision with a certain number of bits as a random identifier. If you want to have a one in a million chance of a collision and expect to store a million documents, for example, you’ll need fewer than 64 bits (16 hex characters).
Base64 is a good way to fit more bits into the same length of string compared to hex, too, taking 1⅓ characters per byte instead of 2.
","1427","<url><hash><sha256><hash-collision>","1","1","1","2018-03-11 19:18:47","","5","","","","","2018-03-11 19:04:54",""
"26977333","coldfusion hashing and difference between hmacSHA256 and SHA256","I'm trying to mimic is this PHP functionality
<?php
    base64_encode( hash_hmac( 'SHA256', $a, $b, true) );
?>

is there a difference between the ""HmacSHA256"" and ""sha256""?
This works - but doesn't give me the same result:
<cfscript>
    toBase64( hmac( a, b, 'HmacSHA256', 'us-ascii' ) );
</cfscript>

this tells me ""sha256"" is unavail (because Im not using enterprise)
<cfscript>
    toBase64( hmac( a, b, 'SHA256', 'us-ascii' ) );
</cfscript>

Any way I can do this without enterprise? isn't there a java lib i can tie into for encoding?
thanks
","It looks like you might have to install libraries to get sha256

ColdFusion 10 introduced the hmac() function for generating secure, hashed message authentication codes (HMAC). This function makes dealing with 3rd-Party APIs much easier. Before ColdFusion 10, however, you would need to dip down into the Java layer to access the security libraries. This ColdFusion component - Crypto.cfc - attempts to make access to such libraries easier and more concise.

","1423","<php><encoding><coldfusion><hmac><sha256>","1","0","3","2015-12-13 22:46:18","26978853","0","","2370483","","2014-11-17 17:17:56","2014-11-17 16:34:06",""
"26977333","coldfusion hashing and difference between hmacSHA256 and SHA256","I'm trying to mimic is this PHP functionality
<?php
    base64_encode( hash_hmac( 'SHA256', $a, $b, true) );
?>

is there a difference between the ""HmacSHA256"" and ""sha256""?
This works - but doesn't give me the same result:
<cfscript>
    toBase64( hmac( a, b, 'HmacSHA256', 'us-ascii' ) );
</cfscript>

this tells me ""sha256"" is unavail (because Im not using enterprise)
<cfscript>
    toBase64( hmac( a, b, 'SHA256', 'us-ascii' ) );
</cfscript>

Any way I can do this without enterprise? isn't there a java lib i can tie into for encoding?
thanks
","This is a generic version of something I've used recently. Haven't tested this exact code, but give it a shot. I store the encrypted value of SECRET_KEY in the database in order to keep it out of the application code.
<cffunction name=""HmacSHA256"" access=""public"" output=""false"" returntype=""string"" hint=""Generates HmacSHA256 string."">
    <cfargument name=""message"" type=""string"" required=""true"" hint=""form data"" />
    <cfset var HMAC_SHA256 = ""HmacSHA256"" />
    <cfset var SECRET_KEY = ""{YOUR_SECRET_KEY}"" />

    <cfset var secretKeySpec = createObject(""java"", ""javax.crypto.spec.SecretKeySpec"").init( SECRET_KEY.getBytes(""UTF-8""), HMAC_SHA256 ) />
    <cfset var mac = createObject(""java"", ""javax.crypto.Mac"").getInstance(HMAC_SHA256) />
    <cfset mac.init( secretKeySpec ) />
    <cfset var rawHmac = mac.doFinal( arguments.message.getBytes(""UTF-8"") ) />
    <cfset var encoder = createObject(""java"", ""sun.misc.BASE64Encoder"") />
    <cfreturn encoder.encodeBuffer(rawHmac).replace(""\n"", """").replace(""\r"", """") />
</cffunction>
","1423","<php><encoding><coldfusion><hmac><sha256>","1","1","3","2015-12-13 22:46:18","26978853","0","","2370483","","2014-11-17 17:17:56","2014-11-17 16:34:06",""
"26977333","coldfusion hashing and difference between hmacSHA256 and SHA256","I'm trying to mimic is this PHP functionality
<?php
    base64_encode( hash_hmac( 'SHA256', $a, $b, true) );
?>

is there a difference between the ""HmacSHA256"" and ""sha256""?
This works - but doesn't give me the same result:
<cfscript>
    toBase64( hmac( a, b, 'HmacSHA256', 'us-ascii' ) );
</cfscript>

this tells me ""sha256"" is unavail (because Im not using enterprise)
<cfscript>
    toBase64( hmac( a, b, 'SHA256', 'us-ascii' ) );
</cfscript>

Any way I can do this without enterprise? isn't there a java lib i can tie into for encoding?
thanks
","The CF documentation for hmac is sorely lacking useful details. The reason your code does not work is that hmac() returns a hexadecimal string. Whereas the PHP call to hash-hmac returns binary. As a result, your CF script is base64 encoding a completely different value. That is why the two results do not match. 
You need to decode the hex string into binary first. Then encode the binary as base64 and the results will match:
resultAsHex = hmac(""Well done is better than well said."", ""key"", ""HmacSHA256"");
finalValue = binaryEncode( binaryDecode(resultAsHex, ""hex""), ""base64"" );
writeDump( finalValue );

As an aside, toBase64() is deprecated. The docs recommend using binaryEncode for new applications.
","1423","<php><encoding><coldfusion><hmac><sha256>","1","2","3","2015-12-13 22:46:18","26978853","0","","2370483","","2014-11-17 17:17:56","2014-11-17 16:34:06",""
"17315528","hashing ""SHA256"" with two parameters","I must convert a JAVA function that Hashing a string.
this is a function:
private static String hmacSha256(String value, String key) throws NoSuchAlgorithmException, InvalidKeyException {
byte[] keyBytes = key.getBytes();           
SecretKeySpec signingKey = new SecretKeySpec(keyBytes, ""HmacSHA256"");
Mac mac = Mac.getInstance(""HmacSHA256"");
mac.init(signingKey);
byte[] rawHmac = mac.doFinal(value.getBytes());
return String.format(""%0"" + (rawHmac.length << 1) + ""x"", new BigInteger(1, rawHmac));
}

My doubt is: this function take 2 parameters: 

String value: It is the string to crypt
String Key: It is another key

I already used the Sha256, but I always use it with only one parameter (one string to encrypt)
please, how can I wrote this function in c# or is there anyone who can explain to me the logical?
thank you
","You can use HMACSHA256 class to make it work:
    private static string ComputeHash(string key, string value)
    {
        var byteKey = Encoding.UTF8.GetBytes(key);
        string hashString;

        using (var hmac = new HMACSHA256(byteKey))
        {
            var hash = hmac.ComputeHash(Encoding.UTF8.GetBytes(value));
            hashString = Convert.ToBase64String(hash);
        }

        return hashString;
    }

","1406","<c#><java><sha256>","0","2","2","2013-06-26 09:01:30","","1","3","","","","2013-06-26 08:50:30",""
"17315528","hashing ""SHA256"" with two parameters","I must convert a JAVA function that Hashing a string.
this is a function:
private static String hmacSha256(String value, String key) throws NoSuchAlgorithmException, InvalidKeyException {
byte[] keyBytes = key.getBytes();           
SecretKeySpec signingKey = new SecretKeySpec(keyBytes, ""HmacSHA256"");
Mac mac = Mac.getInstance(""HmacSHA256"");
mac.init(signingKey);
byte[] rawHmac = mac.doFinal(value.getBytes());
return String.format(""%0"" + (rawHmac.length << 1) + ""x"", new BigInteger(1, rawHmac));
}

My doubt is: this function take 2 parameters: 

String value: It is the string to crypt
String Key: It is another key

I already used the Sha256, but I always use it with only one parameter (one string to encrypt)
please, how can I wrote this function in c# or is there anyone who can explain to me the logical?
thank you
","This is not plain SHA256, this is HMACSHA256 and there is allready a class in .Net.
HMACSHA256
","1406","<c#><java><sha256>","0","0","2","2013-06-26 09:01:30","","1","3","","","","2013-06-26 08:50:30",""
"15820699","What is the best cryptographic hash function that generates 16-bit hashes values in openssl?","I was thinking of just using SHA256 and then using only the first two bytes of the result. Is there anything wrong with this approach?
NOTE: The concern here is not malicious attacks, but to ensure the best possible protection against random bit flips.
","Any hash that satisfies the strict avalanche criterion (that is, if any bit is flipped in the input, every bit in the output will be flipped with a probability of 50%) may be used in this way, and that includes every cryptographic hash in common use, including SHA512. There are security implications to using very short hashes, but if they really aren't relevant, as you claim, you're free to select the fastest hash available (probably MD5).
Since short hashes will be particularly vulnerable to the birthday paradox, though, consider using longer hashes anyway. If you're generating so many hashes that 16 bits versus 256 bits is significant, you will run into duplicates even without malicious attackers.
","1405","<c><openssl><sha><sha256><cryptographic-hash-function>","2","2","1","2013-04-04 20:40:23","15821277","11","2","810671","","2013-04-04 20:19:30","2013-04-04 20:05:24",""
"24541465","OpenSSL Hmac and BouncyCastle Hmac Differ","I am trying to figure out why an hmac in openssl is not giving me the same result as an hmac in java.
in open ssl
echo -n ""Hello"" | openssl dgst -sha256 -hmac 04d6b077d60e323711b37813b3a68a71

Output:
cc598d8840fe409d5fcc1c1c856f9e8c311d1c458850615555857b023f1cd94c
In java
String key = ""04d6b077d60e323711b37813b3a68a71""
SecretKeySpec key2 = new SecretKeySpec(Hex.decode(key), ""RAW"");
String data = ""Hello"";
Mac hmac = Mac.getInstance(""Hmac-SHA256"", BouncyCastleProvider.PROVIDER_NAME);
hmac.init(key2)
byte[] bytes = hmac.doFinal(data.getBytes());
System.out.println(Hex.toHexString(bytes));

Output:
877f9c8eb44c20987e3978928fbfcea0f1cf99c88f9db904596921b7ecf0613b
I am at a loss why these are different.
","OpenSSL treats -hmac key option as if the key is just an array of bytes represented as corresponding ASCII characters. The key is thus limited to contain only printable characters.
You can get the same results in Java as in OpenSSL by using
SecretKeySpec key2 = new SecretKeySpec( key.getBytes(""ASCII""), ""RAW"" );

Alternatively you can use openssl dgst -sha256 -mac HMAC -macopt hexkey:string where string will be treated as a HEX encoded key.
","1388","<java><openssl><bouncycastle><hmac><sha256>","5","4","1","2014-07-03 09:23:33","24545919","3","","207421","","2014-07-03 01:36:54","2014-07-02 21:39:58",""
"5687766","SHA256 security question","Having that the result for some string STR was:
SHA256(STR)=3f7c54571faee024e3fd68603c5c95f6a4c8ef73a398840b974f3f57737a116f 

Would it be possible to get the result of SHA256(myOwnString+STR)? ('+' is used as concatenation)
Are there any known attacks for this scenario?
","myOwnString+STR would be a totally different string than STR -- so, those two would have totally different hashes ; and looking at those hashed, you'd have no way of guessing they result of your hashing function being applied to STR and something based on STR.
That's precisely why we generally recommend using a salt when hashing passwords -- see Salt (cryptography), about that.
","1371","<security><math><sha256><sha>","4","3","2","2011-04-16 18:03:51","5687819","2","1","635608","","2011-04-16 16:13:22","2011-04-16 16:09:24",""
"5687766","SHA256 security question","Having that the result for some string STR was:
SHA256(STR)=3f7c54571faee024e3fd68603c5c95f6a4c8ef73a398840b974f3f57737a116f 

Would it be possible to get the result of SHA256(myOwnString+STR)? ('+' is used as concatenation)
Are there any known attacks for this scenario?
","What you're describing is evaluating hash function's 'avalanche property';  if you change the input just a little bit, how much does the output change?  Any decent hashing function should be able to completely mangle the result drastically even if the input changes just one bit.  This is why things like salts and nonces work well, because adding few bytes to the initial string (which by itself might be weak, short or predictable, like passwords), changes the result of the hash to something completely different and unrelated to the original.
to answer your question more directly tho:  

A 2008 attack breaks preimage
  resistance for 46 out of 80 rounds of
  SHA-512, and 41 out of 64 rounds of
  SHA-256.[1] Collision attacks against
  up to 24 steps of SHA-256

and

There are two meet-in-the-middle preimage attacks against SHA-2 with a reduced number of rounds. The first one attacks 41-round SHA-256 out of 64 rounds with time complexity of 2253.5 and space complexity of 216, and 46-round SHA-512 out of 80 rounds with time 2511.5 and space 23. The second one attacks 42-round SHA-256 with time complexity of 2251.7 and space complexity of 212, and 42-round SHA-512 with time 2502 and space 222.

So yes, it's weakened, but it's nowhere near useless yet.  And I haven't found any attacks specific to dealing with input length extension.
","1371","<security><math><sha256><sha>","4","2","2","2011-04-16 18:03:51","5687819","2","1","635608","","2011-04-16 16:13:22","2011-04-16 16:09:24",""
"32479347","Java stored procedure SHA256 with RSA Signature not available","I have a problem with java stored procedure on oracle database version ""Oracle Database 11g Enterprise Edition 11.2.0.3.0 64bit Production"".
I need to use sha256withRsa to sign some datas. In this case I have used java stored procedure. The same source code work on Netbeans ide with JDK1.5 or JDK1.7 (tryed to change).
When I execute the same code on database side i get:
ORA-29532: Java call terminated by uncaught Java exception: java.security.NoSuchAlgorithmException: SHA256WithRSAEncryption Signature not available
This line of code is the cause:
Signature podpis = Signature.getInstance(""SHA256withRSA"");
How to solve this problem?
Java on database side is: JDK 1.5.0_10
","Run this class in netbeans and in plsql. To view output in plsql execute.
set serveroutput on;
dbms_java.set_output(20000); And you are looking for Signature.SHA256withRSA.
import java.security.Provider;
import java.security.Security;
import java.util.Enumeration;

/**
 *
 * @author alukasiewicz
 */
public class TestSignature {

   public static void print() throws Exception {
    try {
        Provider p[] = Security.getProviders();
      for (int i = 0; i < p.length; i++) {
          System.out.println(p[i]);
          for (Enumeration e = p[i].keys(); e.hasMoreElements();)
              System.out.println(""\t"" + e.nextElement());
      }
    } catch (Exception e) {
      System.out.println(e);
    }
  }
}

","1368","<java><oracle><procedure><sha256>","0","1","1","2015-09-10 07:39:58","32495910","3","","","","","2015-09-09 12:16:29",""
"25907802","Use X509Certificate2 to sign and validate ECDSA-SHA256 signatures","I used OpenSSL to create ECC certificates using SHA256. Now I want to use these certificates to sign data and to validate existing signatures.
I tried using the DSACryptoServiceProvider, but it only supports SHA1 or MD5. 
But it seems that ECDsaCng is able to support ECDSA-with-SHA256. The only problem that I have is that I don't know how to convert the Private and Public Key from my X509Certificate2 into the necessary CngKey. I read another question where someone described how to convert the Public Key. But in order to be able to sign data, I need the Private Key, too. 
So is there a way to get the CngKey of the Private and Public Key out of the X509Certificate2? The certificates are available in different formats. I have them as PFX file and separately as CER and PEM files. 
I would prefer to stick with the .NET Framework 4, but if it's not possible at all to use it, I would also switch to Bouncy Castle. 
","Support for this was added in .NET 4.6.1:
private static byte[] SignWithCert(X509Certificate2 cert, byte[] data)
{
    using (ECDsa ecdsa = cert.GetECDsaPrivateKey())
    {
        if (ecdsa == null)
            throw new ArgumentException(""Cert must have an ECDSA private key"", nameof(cert));

        return ecdsa.SignData(data, HashAlgorithmName.SHA256);
    }
}

private static bool VerifyWithCert(X509Certificate2 cert, byte[] data, byte[] signature)
{
    using (ECDsa ecdsa = cert.GetECDsaPublicKey())
    {
        if (ecdsa == null)
            throw new ArgumentException(""Cert must be an ECDSA cert"", nameof(cert));

        return ecdsa.VerifyData(data, signature, HashAlgorithmName.SHA256);
    }
}

","1345","<c#><ssl><sha256><x509certificate2><ecdsa>","4","4","1","2016-09-23 13:28:14","","0","2","","","","2014-09-18 08:31:04",""
"33542406","Dual-sign .cat file has error ""No signature was present in the subject""","I'm dual-signing a windows .sys and .cat files for a driver using a certificate purchased from Symantec  with the following command lines (the sys and cat files are both signed with the same options):
signtool.exe sign /v /ph /n ""MyCorp"" /ac ""C:\Signing\VeriSign Class 3 Public Primary Certification Authority - G5.cer"" /i ""VeriSign Class 3 Code Signing 2010 CA"" /t ""http://timestamp.verisign.com/scripts/timstamp.dll"" ""MyDriver.cat""
signtool.exe sign /v /ph /n ""MyCorp"" /ac ""C:\Signing\VeriSign Class 3 Public Primary Certification Authority - G5.cer"" /i ""Symantec Class 3 SHA256 Code Signing CA"" /tr ""http://timestamp.geotrust.com/tsa"" /as /fd sha256 /td sha256 ""MyDriver.cat""
Signtool.exe reports success when it exits. When I view the signatures by right clicking the signed files, choosing Properties, go to Digital Signatures tab, then I see the two signatures. The sha1 signature seems fine. When I view the details of the sha256 certificate on the .sys file, everything looks good. But, when I view the details of the sha256 certificate on the .cat file, I see the following error:

The driver won't install on a Window7 box that I configured to believe SHA1 was deprecated on 1st January 2015 (rather than the real date when they expire which is 1st Jan 2016).
I saw a note on this msdn page saying:

Note that only .sys files can be dual signed because they are PE
  files.

Is that quote trying to say in a roundabout way that .cat files cannot be dual signed?
How should cat files be signed so that they will install on all versions of windows?
","Is this only a visual/cosmetic issue or does your driver installation fail ?
A probably better and more solid alternative to dual-signing is an installer that includes both sha1- and sha2-signed binaries which installs the correct set depending on the os version. Since the major parts of the binaries are identical the compressed installer size also won't increase too much.
","1345","<windows><driver><code-signing><sha256>","4","0","3","2016-12-22 14:32:29","","0","2","","","","2015-11-05 10:38:33",""
"33542406","Dual-sign .cat file has error ""No signature was present in the subject""","I'm dual-signing a windows .sys and .cat files for a driver using a certificate purchased from Symantec  with the following command lines (the sys and cat files are both signed with the same options):
signtool.exe sign /v /ph /n ""MyCorp"" /ac ""C:\Signing\VeriSign Class 3 Public Primary Certification Authority - G5.cer"" /i ""VeriSign Class 3 Code Signing 2010 CA"" /t ""http://timestamp.verisign.com/scripts/timstamp.dll"" ""MyDriver.cat""
signtool.exe sign /v /ph /n ""MyCorp"" /ac ""C:\Signing\VeriSign Class 3 Public Primary Certification Authority - G5.cer"" /i ""Symantec Class 3 SHA256 Code Signing CA"" /tr ""http://timestamp.geotrust.com/tsa"" /as /fd sha256 /td sha256 ""MyDriver.cat""
Signtool.exe reports success when it exits. When I view the signatures by right clicking the signed files, choosing Properties, go to Digital Signatures tab, then I see the two signatures. The sha1 signature seems fine. When I view the details of the sha256 certificate on the .sys file, everything looks good. But, when I view the details of the sha256 certificate on the .cat file, I see the following error:

The driver won't install on a Window7 box that I configured to believe SHA1 was deprecated on 1st January 2015 (rather than the real date when they expire which is 1st Jan 2016).
I saw a note on this msdn page saying:

Note that only .sys files can be dual signed because they are PE
  files.

Is that quote trying to say in a roundabout way that .cat files cannot be dual signed?
How should cat files be signed so that they will install on all versions of windows?
","It does seem that .cat files cannot be dual signed.
My solution was to sign the .cat file using a SHA256 certificate, but with signtool command line options to create a SHA1 signature.
The .sys file associated with the driver I was still able to dual sign.
This seems to be working in all the scenarios I need.
","1345","<windows><driver><code-signing><sha256>","4","3","3","2016-12-22 14:32:29","","0","2","","","","2015-11-05 10:38:33",""
"33542406","Dual-sign .cat file has error ""No signature was present in the subject""","I'm dual-signing a windows .sys and .cat files for a driver using a certificate purchased from Symantec  with the following command lines (the sys and cat files are both signed with the same options):
signtool.exe sign /v /ph /n ""MyCorp"" /ac ""C:\Signing\VeriSign Class 3 Public Primary Certification Authority - G5.cer"" /i ""VeriSign Class 3 Code Signing 2010 CA"" /t ""http://timestamp.verisign.com/scripts/timstamp.dll"" ""MyDriver.cat""
signtool.exe sign /v /ph /n ""MyCorp"" /ac ""C:\Signing\VeriSign Class 3 Public Primary Certification Authority - G5.cer"" /i ""Symantec Class 3 SHA256 Code Signing CA"" /tr ""http://timestamp.geotrust.com/tsa"" /as /fd sha256 /td sha256 ""MyDriver.cat""
Signtool.exe reports success when it exits. When I view the signatures by right clicking the signed files, choosing Properties, go to Digital Signatures tab, then I see the two signatures. The sha1 signature seems fine. When I view the details of the sha256 certificate on the .sys file, everything looks good. But, when I view the details of the sha256 certificate on the .cat file, I see the following error:

The driver won't install on a Window7 box that I configured to believe SHA1 was deprecated on 1st January 2015 (rather than the real date when they expire which is 1st Jan 2016).
I saw a note on this msdn page saying:

Note that only .sys files can be dual signed because they are PE
  files.

Is that quote trying to say in a roundabout way that .cat files cannot be dual signed?
How should cat files be signed so that they will install on all versions of windows?
","cat files shall be double signed using the following procedure:

inf2cat.exe /driver:__Path__ /os:__WindowsVersions__
signtool.exe sign /v /ac __RootCert__ /t __TimeStampLink__ /sha1
  __Sha1ThumbPrint__ __CatFile__
signtool.exe sign /v /ac __RootCert__ /tr __TimeStampLink__ /td sha256
  /fd sha256 /as /sha1 __Sha2ThumbPrint__ __CatFile__

Use the  signing tools from windows kit v10.x (or above) to perform this.
","1345","<windows><driver><code-signing><sha256>","4","0","3","2016-12-22 14:32:29","","0","2","","","","2015-11-05 10:38:33",""
"24554946","Android (Java) method equivalent to Python HMAC-SHA256 in Hex","I am attempting to replicate the Python HMAC-SHA256 equivalent in Android (Java). The Python representation is shown bellow with the correct output:  
Python
print (hmac.new(key = binascii.unhexlify(""0123465789""),msg = binascii.unhexlify(""ABCDEF""),digestmod=hashlib.sha256).hexdigest()).upper()

Output
5B5EE08A20DDD645A31384E51AC581A4551E9BE5AC8BF7E690A5527F2B9372CB

However, I am unable to get the same output in Java using the code below:
Java
Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
SecretKeySpec secretKey = new SecretKeySpec(""0123465789"".getBytes(""UTF-8""), ""HmacSHA256"");      
sha256_HMAC.init(secretKey);
byte[] hash = sha256_HMAC.doFinal(""ABCDEF"".getBytes(""UTF-8""));      
String check = (new String(Hex.encodeHex(hash))).toUpperCase();
System.out.println(check);

Output
46F9FD56BDAE29A803BAD5BC668CB78DA4C54A51E6C031FB3BC2C42855047213

I am fairly positive that my problem is failing to code the Java equivalent of Python's: 
key = binascii.unhexlify(""0123465789"")

&
msg = binascii.unhexlify(""ABCDEF"") 

This is because when I do not perform the binascii.unhexlify on the Hex-String inputs in Python, I render identical results for both methods. However, the Python HMAC-SHA256 requires the binascii.unhexlify operation. 
I have done a lot of research and even attempted to import the method that Python uses to perform the binascii.unhexlify in Java but I am still unable to produce identical results. Any help and/or advise would be more than appreciated in solving this issue. Can anybody help me out?
","","1341","<java><android><python><hmac><sha256>","0","","0","2014-07-03 13:25:30","","3","4","","","","2014-07-03 13:25:30",""
"33433863","Implement new SHA256 signature for Redsys/Sermepa in Python","I have a django-based application that uses Redsys (earlier Sermepa) as a credit card payment platform. Recently we have received a message that urge us to migrate from old SHA1 signatures to SHA256 in order to keep using the platform securely.
Platform provide several examples of how to make the new requests generating a new signature, but only using PHP and Java. Now I am trying to port the provided solutions to Python without success. 
This is a sample working code in PHP (with fake key/data):
<?php
    // Init form with default data
    $order = ""ABCDEFGHI"";
    $merchant_parameters = array( 
        ""DS_MERCHANT_AMOUNT"" => ""1000"",
        ""DS_MERCHANT_ORDER"" => strval($order) ,
        ""DS_MERCHANT_MERCHANTCODE"" => ""012345678"",
        ""DS_MERCHANT_CURRENCY"" => ""978"",
        ""DS_MERCHANT_TRANSACTIONTYPE"" => ""0"",
        ""DS_MERCHANT_TERMINAL"" => ""1"",
    ); 

    // Key definition, decoding, and encrypt using $order
    $key = 'Bg8HYhVT79PDvOxbI/Newcm31QY/9999';
    echo 'key --> ' , $key , '<br/><br/>';
    $key_decoded = base64_decode($key);
    echo 'key-decoded --> ' , $key_decoded , '<br/><br/>';
    $ciphertext = mcrypt_encrypt(MCRYPT_3DES, $key_decoded, $order, MCRYPT_MODE_CBC,  implode(array_map(""chr"", array(0,0,0,0,0,0,0,0))) );
    echo 'ciphertext --> ' , $ciphertext , '<br/><br/>';

    // Transform array in encoded json
    $parameters = json_encode($merchant_parameters);
    echo 'parameters --> ' , $parameters , '<br/><br/>';
    $parameters_encoded = base64_encode($parameters);
    echo 'parameters_encoded --> ' , $parameters_encoded , '<br/><br/>';

    // Calculate MAC256 of encoded array
    $mac_256 = hash_hmac('sha256', $parameters_encoded, $ciphertext, true);
    echo 'mac_256 --> ' , $mac_256 , '<br/><br/>';

    // Encode MAC256 in base64 to get the signature
    $mac_256_encoded = base64_encode($mac_256);
    echo 'mac_256_encoded --> ' , $mac_256_encoded , '<br/><br/>';
?>

And this is my equivalent code in Python, with the same fake data:
# -*- encoding: utf-8 -*-
from pyDes import triple_des, CBC, PAD_PKCS5
import hashlib, json, base64, hmac
from json import JSONEncoder


# Init form with default data
order = ""ABCDEFGHI""
merchant_parameters = {}
merchant_parameters['DS_MERCHANT_AMOUNT'] = ""1000""
merchant_parameters['DS_MERCHANT_ORDER'] = order
merchant_parameters['DS_MERCHANT_MERCHANTCODE'] = ""012345678""
merchant_parameters['DS_MERCHANT_CURRENCY'] = ""978""
merchant_parameters['DS_MERCHANT_TRANSACTIONTYPE'] = ""0""
merchant_parameters['DS_MERCHANT_TERMINAL'] = ""1""


# Key definition, decoding, and encrypt using order
key = 'Bg8HYhVT79PDvOxbI/Newcm31QY/9999'
print '\n\nkey --> %s' % key
key_decoded  = base64.b64decode(key)
print '\n\nkey_decoded --> %s' % key_decoded
k = triple_des(key_decoded, CBC, ""\0\0\0\0\0\0\0\0"", pad=None,  padmode=PAD_PKCS5)
ciphertext  = k.encrypt(order)
print '\n\nciphertext --> %s' % ciphertext


#  Transform array in encoded json (with no lines
parameters = (json.dumps(merchant_parameters)).encode()
print '\n\nparameters --> %s' % parameters
parameters_encoded = ''.join(unicode(base64.encodestring(parameters), 'utf-8').splitlines())
print '\n\nparameters_encoded --> %s' % parameters_encoded


# Calculate MAC256 of encoded array
mac_256 = hmac.new(ciphertext, parameters_encoded, digestmod=hashlib.sha256).hexdigest()
print '\n\nmac_256 --> %s' % mac_256


# Encode MAC256 in base64 to get the signature
mac_256_encoded = base64.b64encode(mac_256)
print '\n\nmac_256_encoded --> %s' % mac_256_encoded

As can be seen if running the codes, resultant signatures are not equivalent, thus the payment platform rejects my Python request.
Can anybody notice where am I wrong regarding the signature generation?
Thanks in advance,
Álvaro.
","Got the same problem.
Actually, after JSON encoding I have had to clean the blank spaces between key/value pairs up.
But I am getting different signatures for the ciphertext. That causes that final signature is different from the examples.
Notice that in example code they do a trailing pad for order number in the 3DES encryption.
iv = b'\0\0\0\0\0\0\0\0'
k = DES3.new(key, DES3.MODE_CBC, iv)
ceros = b'\0'*(len(DS_MERCHANT_ORDER)%8)
clave = k.encrypt(DS_MERCHANT_ORDER+ceros.encode('UTF-8'))

Thanks 
EDITED:
Finally I fixed it:
To get the specific per operation key:
    iv = b'\0\0\0\0\0\0\0\0'
    k = DES3.new(key, DES3.MODE_CBC, iv)
    ceros = b'\0'*(len(DS_MERCHANT_ORDER)%8)
    claveOp = k.encrypt(DS_MERCHANT_ORDER+ceros.encode('UTF-8'))

To get the hmac.sha256:
    from Crypto.Hash import HMAC, SHA256
    # Realizo la codificacion SHA256
    dig = HMAC.new(claveOp , msg=DS_MERCHANT_PARAMETERS,    digestmod=SHA256).digest()
    signatureEnc = base64.b64encode(dig)

Hope it helps you
","1330","<python><payment-gateway><sha256>","0","1","2","2015-11-23 11:05:14","","0","1","","","","2015-10-30 10:31:46",""
"33433863","Implement new SHA256 signature for Redsys/Sermepa in Python","I have a django-based application that uses Redsys (earlier Sermepa) as a credit card payment platform. Recently we have received a message that urge us to migrate from old SHA1 signatures to SHA256 in order to keep using the platform securely.
Platform provide several examples of how to make the new requests generating a new signature, but only using PHP and Java. Now I am trying to port the provided solutions to Python without success. 
This is a sample working code in PHP (with fake key/data):
<?php
    // Init form with default data
    $order = ""ABCDEFGHI"";
    $merchant_parameters = array( 
        ""DS_MERCHANT_AMOUNT"" => ""1000"",
        ""DS_MERCHANT_ORDER"" => strval($order) ,
        ""DS_MERCHANT_MERCHANTCODE"" => ""012345678"",
        ""DS_MERCHANT_CURRENCY"" => ""978"",
        ""DS_MERCHANT_TRANSACTIONTYPE"" => ""0"",
        ""DS_MERCHANT_TERMINAL"" => ""1"",
    ); 

    // Key definition, decoding, and encrypt using $order
    $key = 'Bg8HYhVT79PDvOxbI/Newcm31QY/9999';
    echo 'key --> ' , $key , '<br/><br/>';
    $key_decoded = base64_decode($key);
    echo 'key-decoded --> ' , $key_decoded , '<br/><br/>';
    $ciphertext = mcrypt_encrypt(MCRYPT_3DES, $key_decoded, $order, MCRYPT_MODE_CBC,  implode(array_map(""chr"", array(0,0,0,0,0,0,0,0))) );
    echo 'ciphertext --> ' , $ciphertext , '<br/><br/>';

    // Transform array in encoded json
    $parameters = json_encode($merchant_parameters);
    echo 'parameters --> ' , $parameters , '<br/><br/>';
    $parameters_encoded = base64_encode($parameters);
    echo 'parameters_encoded --> ' , $parameters_encoded , '<br/><br/>';

    // Calculate MAC256 of encoded array
    $mac_256 = hash_hmac('sha256', $parameters_encoded, $ciphertext, true);
    echo 'mac_256 --> ' , $mac_256 , '<br/><br/>';

    // Encode MAC256 in base64 to get the signature
    $mac_256_encoded = base64_encode($mac_256);
    echo 'mac_256_encoded --> ' , $mac_256_encoded , '<br/><br/>';
?>

And this is my equivalent code in Python, with the same fake data:
# -*- encoding: utf-8 -*-
from pyDes import triple_des, CBC, PAD_PKCS5
import hashlib, json, base64, hmac
from json import JSONEncoder


# Init form with default data
order = ""ABCDEFGHI""
merchant_parameters = {}
merchant_parameters['DS_MERCHANT_AMOUNT'] = ""1000""
merchant_parameters['DS_MERCHANT_ORDER'] = order
merchant_parameters['DS_MERCHANT_MERCHANTCODE'] = ""012345678""
merchant_parameters['DS_MERCHANT_CURRENCY'] = ""978""
merchant_parameters['DS_MERCHANT_TRANSACTIONTYPE'] = ""0""
merchant_parameters['DS_MERCHANT_TERMINAL'] = ""1""


# Key definition, decoding, and encrypt using order
key = 'Bg8HYhVT79PDvOxbI/Newcm31QY/9999'
print '\n\nkey --> %s' % key
key_decoded  = base64.b64decode(key)
print '\n\nkey_decoded --> %s' % key_decoded
k = triple_des(key_decoded, CBC, ""\0\0\0\0\0\0\0\0"", pad=None,  padmode=PAD_PKCS5)
ciphertext  = k.encrypt(order)
print '\n\nciphertext --> %s' % ciphertext


#  Transform array in encoded json (with no lines
parameters = (json.dumps(merchant_parameters)).encode()
print '\n\nparameters --> %s' % parameters
parameters_encoded = ''.join(unicode(base64.encodestring(parameters), 'utf-8').splitlines())
print '\n\nparameters_encoded --> %s' % parameters_encoded


# Calculate MAC256 of encoded array
mac_256 = hmac.new(ciphertext, parameters_encoded, digestmod=hashlib.sha256).hexdigest()
print '\n\nmac_256 --> %s' % mac_256


# Encode MAC256 in base64 to get the signature
mac_256_encoded = base64.b64encode(mac_256)
print '\n\nmac_256_encoded --> %s' % mac_256_encoded

As can be seen if running the codes, resultant signatures are not equivalent, thus the payment platform rejects my Python request.
Can anybody notice where am I wrong regarding the signature generation?
Thanks in advance,
Álvaro.
","Hie,
finally I publish in pypi new version about redsys client. https://pypi.python.org/pypi/redsys/
Thanks Álvaro about to do sha256 signature.
","1330","<python><payment-gateway><sha256>","0","1","2","2015-11-23 11:05:14","","0","1","","","","2015-10-30 10:31:46",""
"19457726","A PHP equivalent for a VB.NET password hash function","I have the following Visual Basic .NET function that is used to generate password hashes that are stored in an internal database:
Public Function HashPassword(ByVal Password As String, ByVal Salt As String) As String
    Dim pwd As String = Password & Salt
    Dim hasher As New Security.Cryptography.SHA256Managed()
    Dim pwdb As Byte() = System.Text.Encoding.UTF8.GetBytes(pwd)
    Dim pwdh As Byte() = hasher.ComputeHash(pwdb)
    Return Convert.ToBase64String(pwdh)
End Function

I need help creating a PHP equivalent of the above function:
Example:
Assuming a password string of: warn
A salt value of: i<|Xf"":n_y_Yr""Lor`qAA].QK(2C8AJ:Z""\f&TC7bi=Acw_.w|
The returned hash should be: 0Yq3gR09U1GKfFRzmRxdJXK5jSQowHp/YLGA88p0s18=

I'm having trouble replicating the hash in PHP. 
Kind Regards,
Voxinator
","How about something like that?
private static function hash($string) {
    $result = '';
    if (substr($string, 0, 1) == '#')
        $result = $string;
    else {
        $result = '#' . hash('sha256', $string);
    }
    return $result;
}

You can just pass the user-provided password, or even an already hashed password as it will detect if already hashed or not. Of course this presumes that passwords starting with a #hash character are not allowed (and would be caught before).
","1324","<php><vb.net><hash><passwords><sha256>","2","0","3","2013-10-18 19:50:32","19457884","0","1","2498327","","2013-10-18 19:46:55","2013-10-18 19:34:20","2013-10-19 09:19:02"
"19457726","A PHP equivalent for a VB.NET password hash function","I have the following Visual Basic .NET function that is used to generate password hashes that are stored in an internal database:
Public Function HashPassword(ByVal Password As String, ByVal Salt As String) As String
    Dim pwd As String = Password & Salt
    Dim hasher As New Security.Cryptography.SHA256Managed()
    Dim pwdb As Byte() = System.Text.Encoding.UTF8.GetBytes(pwd)
    Dim pwdh As Byte() = hasher.ComputeHash(pwdb)
    Return Convert.ToBase64String(pwdh)
End Function

I need help creating a PHP equivalent of the above function:
Example:
Assuming a password string of: warn
A salt value of: i<|Xf"":n_y_Yr""Lor`qAA].QK(2C8AJ:Z""\f&TC7bi=Acw_.w|
The returned hash should be: 0Yq3gR09U1GKfFRzmRxdJXK5jSQowHp/YLGA88p0s18=

I'm having trouble replicating the hash in PHP. 
Kind Regards,
Voxinator
","first links in google :(
http://www.php.net/manual/en/function.hash.php with sha256
http://www.php.net/manual/en/function.base64-encode.php
$pwd = 'warn';
$salt = 'i<|Xf"":n_y_Yr""Lor`qAA].QK(2C8AJ:Z""\f&TC7bi=Acw_.w|';
$pwd .= $salt;
$r1 = hash('sha256', $pwd, true); // binary hash
$r2 = base64_encode($r1); // base64 representation
echo $r2;

output
0Yq3gR09U1GKfFRzmRxdJXK5jSQowHp/YLGA88p0s18=

","1324","<php><vb.net><hash><passwords><sha256>","2","2","3","2013-10-18 19:50:32","19457884","0","1","2498327","","2013-10-18 19:46:55","2013-10-18 19:34:20","2013-10-19 09:19:02"
"19457726","A PHP equivalent for a VB.NET password hash function","I have the following Visual Basic .NET function that is used to generate password hashes that are stored in an internal database:
Public Function HashPassword(ByVal Password As String, ByVal Salt As String) As String
    Dim pwd As String = Password & Salt
    Dim hasher As New Security.Cryptography.SHA256Managed()
    Dim pwdb As Byte() = System.Text.Encoding.UTF8.GetBytes(pwd)
    Dim pwdh As Byte() = hasher.ComputeHash(pwdb)
    Return Convert.ToBase64String(pwdh)
End Function

I need help creating a PHP equivalent of the above function:
Example:
Assuming a password string of: warn
A salt value of: i<|Xf"":n_y_Yr""Lor`qAA].QK(2C8AJ:Z""\f&TC7bi=Acw_.w|
The returned hash should be: 0Yq3gR09U1GKfFRzmRxdJXK5jSQowHp/YLGA88p0s18=

I'm having trouble replicating the hash in PHP. 
Kind Regards,
Voxinator
","To hash passowrds, i'm currently using a function similar to:
function hashPassword($str, $salt='786df') {
    hash('sha512', $salt.$str.'7');
}

This is a SH512 with a dynamic salt (per site) and a fixed salt (to have a salt if $salt is empty that is a php constant in fact). This solution is ultra secure, I understand it made hashes that are very hard to decrypt.
Like you did, you can use SHA256 by this way and then use base64_encode() (probably useless).
","1324","<php><vb.net><hash><passwords><sha256>","2","0","3","2013-10-18 19:50:32","19457884","0","1","2498327","","2013-10-18 19:46:55","2013-10-18 19:34:20","2013-10-19 09:19:02"
"8856700","Problems encoding Amazon Flexible Payments secret string in PHP","I am trying to use Amazon Payment Services, and they require me to do something like this:
Here is the complete signature so you can see I added the signature method:
$string_to_sign = ""GET\n
authorize.payments-sandbox.amazon.com\n
cobranded-ui/actions/start?
SignatureMethod=HmacSHA256&SignatureVersion=2&callerKey=my_key&callerReference=YourCallerReference&paymentReason=donation&pipelineName=SingleUse&returnUrl=http%3A%2F%2Fyourwebsite.com%2Freturn.html&transactionAmount=4.0"";

and then I encrypt it like below.
$encoded_string_to_sign = URLEncode(Base64_Encode(hash_hmac(""sha256"", $string_to_sign, 'my_secret_key')));

I do that, but then I get an error from them saying:
Caller Input Exception: The following input(s) are either invalid or absent:[signatureMethod]

Any idea what might be going wrong here?
Here is the entire code for this: (the variables are assigned values above)
<?php
$string_to_sign = 'GET
authorize.payments-sandbox.amazon.com/cobranded-ui/actions/startSignatureMethod=HmacSHA256&SignatureVersion=2&callerKey=AKIAJENBYSJCJX2IDWDQ&callerReference=YourCallerReference&paymentReason=donation&pipelineName=SingleUse&returnUrl=http%3A%2F%2Fproblemio.com&transactionAmount=4.0';

    $encoded_string_to_sign = URLEncode(Base64_Encode(hash_hmac(""sha256"", $string_to_sign, 'my_secret_key')));

$amazon_request_sandbox = 'https://authorize.payments-sandbox.amazon.com/cobranded-ui/actions/start?SignatureVersion=2&returnUrl='.$return_url.'&paymentReason='.$payment_reason.'&callerReference=YourCallerReference&callerKey='.$my_access_key_id.'&transactionAmount=4.0&pipelineName=SingleUse&SignatureMethod=HmacSHA256&Signature='.$encoded_string_to_sign;

//echo $amazon_request_sandbox; - use this if you want to see the resulting request and paste it into the browser

header('Location: '.$amazon_request_sandbox);
?>

Thanks!!
","Have you set your signature method? from the AWS documentation:

You must set the SignatureMethod request parameter to either
  HmacSHA256 or HmacSHA1 to indicate which signing method you're using

","1319","<php><sha256><amazon-fps>","7","2","7","2012-01-21 06:38:00","","6","","731255","","2012-01-19 20:18:39","2012-01-13 20:17:19",""
"8856700","Problems encoding Amazon Flexible Payments secret string in PHP","I am trying to use Amazon Payment Services, and they require me to do something like this:
Here is the complete signature so you can see I added the signature method:
$string_to_sign = ""GET\n
authorize.payments-sandbox.amazon.com\n
cobranded-ui/actions/start?
SignatureMethod=HmacSHA256&SignatureVersion=2&callerKey=my_key&callerReference=YourCallerReference&paymentReason=donation&pipelineName=SingleUse&returnUrl=http%3A%2F%2Fyourwebsite.com%2Freturn.html&transactionAmount=4.0"";

and then I encrypt it like below.
$encoded_string_to_sign = URLEncode(Base64_Encode(hash_hmac(""sha256"", $string_to_sign, 'my_secret_key')));

I do that, but then I get an error from them saying:
Caller Input Exception: The following input(s) are either invalid or absent:[signatureMethod]

Any idea what might be going wrong here?
Here is the entire code for this: (the variables are assigned values above)
<?php
$string_to_sign = 'GET
authorize.payments-sandbox.amazon.com/cobranded-ui/actions/startSignatureMethod=HmacSHA256&SignatureVersion=2&callerKey=AKIAJENBYSJCJX2IDWDQ&callerReference=YourCallerReference&paymentReason=donation&pipelineName=SingleUse&returnUrl=http%3A%2F%2Fproblemio.com&transactionAmount=4.0';

    $encoded_string_to_sign = URLEncode(Base64_Encode(hash_hmac(""sha256"", $string_to_sign, 'my_secret_key')));

$amazon_request_sandbox = 'https://authorize.payments-sandbox.amazon.com/cobranded-ui/actions/start?SignatureVersion=2&returnUrl='.$return_url.'&paymentReason='.$payment_reason.'&callerReference=YourCallerReference&callerKey='.$my_access_key_id.'&transactionAmount=4.0&pipelineName=SingleUse&SignatureMethod=HmacSHA256&Signature='.$encoded_string_to_sign;

//echo $amazon_request_sandbox; - use this if you want to see the resulting request and paste it into the browser

header('Location: '.$amazon_request_sandbox);
?>

Thanks!!
","Check if you included &SignatureMethod=HmacSHA256 on the request
This kind of errors has 3 basic natures:

Missing Keys/Values
Typos on Keys/Values
Incorrect encoding or spaces on Keys/Values

Hope that helps!
Regards
","1319","<php><sha256><amazon-fps>","7","5","7","2012-01-21 06:38:00","","6","","731255","","2012-01-19 20:18:39","2012-01-13 20:17:19",""
"8856700","Problems encoding Amazon Flexible Payments secret string in PHP","I am trying to use Amazon Payment Services, and they require me to do something like this:
Here is the complete signature so you can see I added the signature method:
$string_to_sign = ""GET\n
authorize.payments-sandbox.amazon.com\n
cobranded-ui/actions/start?
SignatureMethod=HmacSHA256&SignatureVersion=2&callerKey=my_key&callerReference=YourCallerReference&paymentReason=donation&pipelineName=SingleUse&returnUrl=http%3A%2F%2Fyourwebsite.com%2Freturn.html&transactionAmount=4.0"";

and then I encrypt it like below.
$encoded_string_to_sign = URLEncode(Base64_Encode(hash_hmac(""sha256"", $string_to_sign, 'my_secret_key')));

I do that, but then I get an error from them saying:
Caller Input Exception: The following input(s) are either invalid or absent:[signatureMethod]

Any idea what might be going wrong here?
Here is the entire code for this: (the variables are assigned values above)
<?php
$string_to_sign = 'GET
authorize.payments-sandbox.amazon.com/cobranded-ui/actions/startSignatureMethod=HmacSHA256&SignatureVersion=2&callerKey=AKIAJENBYSJCJX2IDWDQ&callerReference=YourCallerReference&paymentReason=donation&pipelineName=SingleUse&returnUrl=http%3A%2F%2Fproblemio.com&transactionAmount=4.0';

    $encoded_string_to_sign = URLEncode(Base64_Encode(hash_hmac(""sha256"", $string_to_sign, 'my_secret_key')));

$amazon_request_sandbox = 'https://authorize.payments-sandbox.amazon.com/cobranded-ui/actions/start?SignatureVersion=2&returnUrl='.$return_url.'&paymentReason='.$payment_reason.'&callerReference=YourCallerReference&callerKey='.$my_access_key_id.'&transactionAmount=4.0&pipelineName=SingleUse&SignatureMethod=HmacSHA256&Signature='.$encoded_string_to_sign;

//echo $amazon_request_sandbox; - use this if you want to see the resulting request and paste it into the browser

header('Location: '.$amazon_request_sandbox);
?>

Thanks!!
","I don't believe you need to base64 encode the hash (after all, it's already being urlencoded) -- try removing Base64_Encode.
","1319","<php><sha256><amazon-fps>","7","2","7","2012-01-21 06:38:00","","6","","731255","","2012-01-19 20:18:39","2012-01-13 20:17:19",""
"8856700","Problems encoding Amazon Flexible Payments secret string in PHP","I am trying to use Amazon Payment Services, and they require me to do something like this:
Here is the complete signature so you can see I added the signature method:
$string_to_sign = ""GET\n
authorize.payments-sandbox.amazon.com\n
cobranded-ui/actions/start?
SignatureMethod=HmacSHA256&SignatureVersion=2&callerKey=my_key&callerReference=YourCallerReference&paymentReason=donation&pipelineName=SingleUse&returnUrl=http%3A%2F%2Fyourwebsite.com%2Freturn.html&transactionAmount=4.0"";

and then I encrypt it like below.
$encoded_string_to_sign = URLEncode(Base64_Encode(hash_hmac(""sha256"", $string_to_sign, 'my_secret_key')));

I do that, but then I get an error from them saying:
Caller Input Exception: The following input(s) are either invalid or absent:[signatureMethod]

Any idea what might be going wrong here?
Here is the entire code for this: (the variables are assigned values above)
<?php
$string_to_sign = 'GET
authorize.payments-sandbox.amazon.com/cobranded-ui/actions/startSignatureMethod=HmacSHA256&SignatureVersion=2&callerKey=AKIAJENBYSJCJX2IDWDQ&callerReference=YourCallerReference&paymentReason=donation&pipelineName=SingleUse&returnUrl=http%3A%2F%2Fproblemio.com&transactionAmount=4.0';

    $encoded_string_to_sign = URLEncode(Base64_Encode(hash_hmac(""sha256"", $string_to_sign, 'my_secret_key')));

$amazon_request_sandbox = 'https://authorize.payments-sandbox.amazon.com/cobranded-ui/actions/start?SignatureVersion=2&returnUrl='.$return_url.'&paymentReason='.$payment_reason.'&callerReference=YourCallerReference&callerKey='.$my_access_key_id.'&transactionAmount=4.0&pipelineName=SingleUse&SignatureMethod=HmacSHA256&Signature='.$encoded_string_to_sign;

//echo $amazon_request_sandbox; - use this if you want to see the resulting request and paste it into the browser

header('Location: '.$amazon_request_sandbox);
?>

Thanks!!
","Your $string_to_sign variable is missing a '?' between start and SignatureMethod for your encoded Signature.

Signature version 2 is an enhanced signing method for both Amazon
  Simple Pay and Amazon Flexible Payments Service.
For inbound requests (from your application to Amazon Payments), it
  uses the entire request URI as the basis for the signature, with
  encryption based on the unique security credentials for your account.
For outbound requests (from Amazon Payments to your application),
  Amazon signs the response which you can verify using the
  VerifySignature API

EDIT:
As @Jonathan Spooner mentioned already and what I use is the function varifySignature() located in 

/amazon-fps-2010-08-28-php5-library/src/Amazon/FPS/Samples/Client.php

which can be downloaded here. It also has an example as to how to use it in 

/amazon-fps-2010-08-28-php5-library/src/Amazon/FPS/Samples/VerifySignatureSample.php

It makes the whole process much easier. It may be worth a shot...
","1319","<php><sha256><amazon-fps>","7","2","7","2012-01-21 06:38:00","","6","","731255","","2012-01-19 20:18:39","2012-01-13 20:17:19",""
"8856700","Problems encoding Amazon Flexible Payments secret string in PHP","I am trying to use Amazon Payment Services, and they require me to do something like this:
Here is the complete signature so you can see I added the signature method:
$string_to_sign = ""GET\n
authorize.payments-sandbox.amazon.com\n
cobranded-ui/actions/start?
SignatureMethod=HmacSHA256&SignatureVersion=2&callerKey=my_key&callerReference=YourCallerReference&paymentReason=donation&pipelineName=SingleUse&returnUrl=http%3A%2F%2Fyourwebsite.com%2Freturn.html&transactionAmount=4.0"";

and then I encrypt it like below.
$encoded_string_to_sign = URLEncode(Base64_Encode(hash_hmac(""sha256"", $string_to_sign, 'my_secret_key')));

I do that, but then I get an error from them saying:
Caller Input Exception: The following input(s) are either invalid or absent:[signatureMethod]

Any idea what might be going wrong here?
Here is the entire code for this: (the variables are assigned values above)
<?php
$string_to_sign = 'GET
authorize.payments-sandbox.amazon.com/cobranded-ui/actions/startSignatureMethod=HmacSHA256&SignatureVersion=2&callerKey=AKIAJENBYSJCJX2IDWDQ&callerReference=YourCallerReference&paymentReason=donation&pipelineName=SingleUse&returnUrl=http%3A%2F%2Fproblemio.com&transactionAmount=4.0';

    $encoded_string_to_sign = URLEncode(Base64_Encode(hash_hmac(""sha256"", $string_to_sign, 'my_secret_key')));

$amazon_request_sandbox = 'https://authorize.payments-sandbox.amazon.com/cobranded-ui/actions/start?SignatureVersion=2&returnUrl='.$return_url.'&paymentReason='.$payment_reason.'&callerReference=YourCallerReference&callerKey='.$my_access_key_id.'&transactionAmount=4.0&pipelineName=SingleUse&SignatureMethod=HmacSHA256&Signature='.$encoded_string_to_sign;

//echo $amazon_request_sandbox; - use this if you want to see the resulting request and paste it into the browser

header('Location: '.$amazon_request_sandbox);
?>

Thanks!!
","Have you tried this
base64_encode(hash_hmac('sha256', $Request, $AmazonSecretKey, true));
Pass a boolean to pass it as a raw output.
","1319","<php><sha256><amazon-fps>","7","1","7","2012-01-21 06:38:00","","6","","731255","","2012-01-19 20:18:39","2012-01-13 20:17:19",""
"8856700","Problems encoding Amazon Flexible Payments secret string in PHP","I am trying to use Amazon Payment Services, and they require me to do something like this:
Here is the complete signature so you can see I added the signature method:
$string_to_sign = ""GET\n
authorize.payments-sandbox.amazon.com\n
cobranded-ui/actions/start?
SignatureMethod=HmacSHA256&SignatureVersion=2&callerKey=my_key&callerReference=YourCallerReference&paymentReason=donation&pipelineName=SingleUse&returnUrl=http%3A%2F%2Fyourwebsite.com%2Freturn.html&transactionAmount=4.0"";

and then I encrypt it like below.
$encoded_string_to_sign = URLEncode(Base64_Encode(hash_hmac(""sha256"", $string_to_sign, 'my_secret_key')));

I do that, but then I get an error from them saying:
Caller Input Exception: The following input(s) are either invalid or absent:[signatureMethod]

Any idea what might be going wrong here?
Here is the entire code for this: (the variables are assigned values above)
<?php
$string_to_sign = 'GET
authorize.payments-sandbox.amazon.com/cobranded-ui/actions/startSignatureMethod=HmacSHA256&SignatureVersion=2&callerKey=AKIAJENBYSJCJX2IDWDQ&callerReference=YourCallerReference&paymentReason=donation&pipelineName=SingleUse&returnUrl=http%3A%2F%2Fproblemio.com&transactionAmount=4.0';

    $encoded_string_to_sign = URLEncode(Base64_Encode(hash_hmac(""sha256"", $string_to_sign, 'my_secret_key')));

$amazon_request_sandbox = 'https://authorize.payments-sandbox.amazon.com/cobranded-ui/actions/start?SignatureVersion=2&returnUrl='.$return_url.'&paymentReason='.$payment_reason.'&callerReference=YourCallerReference&callerKey='.$my_access_key_id.'&transactionAmount=4.0&pipelineName=SingleUse&SignatureMethod=HmacSHA256&Signature='.$encoded_string_to_sign;

//echo $amazon_request_sandbox; - use this if you want to see the resulting request and paste it into the browser

header('Location: '.$amazon_request_sandbox);
?>

Thanks!!
","You're most definitely missing the last parameter for hash_hmac which has to be set true to get RFC 2104-compliant HMAC signature:
base64_encode(
    hash_hmac($hash, $data, $key, true)
);

And in the complete example you're missing new lines in $string_to_sign.
","1319","<php><sha256><amazon-fps>","7","1","7","2012-01-21 06:38:00","","6","","731255","","2012-01-19 20:18:39","2012-01-13 20:17:19",""
"8856700","Problems encoding Amazon Flexible Payments secret string in PHP","I am trying to use Amazon Payment Services, and they require me to do something like this:
Here is the complete signature so you can see I added the signature method:
$string_to_sign = ""GET\n
authorize.payments-sandbox.amazon.com\n
cobranded-ui/actions/start?
SignatureMethod=HmacSHA256&SignatureVersion=2&callerKey=my_key&callerReference=YourCallerReference&paymentReason=donation&pipelineName=SingleUse&returnUrl=http%3A%2F%2Fyourwebsite.com%2Freturn.html&transactionAmount=4.0"";

and then I encrypt it like below.
$encoded_string_to_sign = URLEncode(Base64_Encode(hash_hmac(""sha256"", $string_to_sign, 'my_secret_key')));

I do that, but then I get an error from them saying:
Caller Input Exception: The following input(s) are either invalid or absent:[signatureMethod]

Any idea what might be going wrong here?
Here is the entire code for this: (the variables are assigned values above)
<?php
$string_to_sign = 'GET
authorize.payments-sandbox.amazon.com/cobranded-ui/actions/startSignatureMethod=HmacSHA256&SignatureVersion=2&callerKey=AKIAJENBYSJCJX2IDWDQ&callerReference=YourCallerReference&paymentReason=donation&pipelineName=SingleUse&returnUrl=http%3A%2F%2Fproblemio.com&transactionAmount=4.0';

    $encoded_string_to_sign = URLEncode(Base64_Encode(hash_hmac(""sha256"", $string_to_sign, 'my_secret_key')));

$amazon_request_sandbox = 'https://authorize.payments-sandbox.amazon.com/cobranded-ui/actions/start?SignatureVersion=2&returnUrl='.$return_url.'&paymentReason='.$payment_reason.'&callerReference=YourCallerReference&callerKey='.$my_access_key_id.'&transactionAmount=4.0&pipelineName=SingleUse&SignatureMethod=HmacSHA256&Signature='.$encoded_string_to_sign;

//echo $amazon_request_sandbox; - use this if you want to see the resulting request and paste it into the browser

header('Location: '.$amazon_request_sandbox);
?>

Thanks!!
","The only piece that wasn't suggested was that you need to use rawurlencode() on the transactionAmount that's part of the $string_to_sign.
Most other answers are a piece of the problem. For instance, you need to add a new line to the $string_to_sign after the GET (which you have), after the authorize.payments-sandbox.amazon.com, and after the /cobranded-ui/actions/start. You also need to set the $raw_output parameter to true in the hash_hmac() function.
I've included a complete working rewrite of your code (replace <Your_Access_Key> and <Your_Secret_Key>):
$return_url = rawurlencode('http://problemio.com');
$payment_reason = 'donation';
$transaction_amount = rawurlencode('4.0');

$secret_key = '<Your_Secret_Key>';
$my_access_key_id = '<Your_Access_Key>';

$string_to_sign = 'GET
authorize.payments-sandbox.amazon.com
/cobranded-ui/actions/start
SignatureMethod=HmacSHA256&SignatureVersion=2&callerKey=' . $my_access_key_id . '&callerReference=YourCallerReference&paymentReason=' . $payment_reason . '&pipelineName=SingleUse&returnUrl=' . $return_url . '&transactionAmount=' . $transaction_amount;

$encoded_string_to_sign = URLEncode(Base64_Encode(hash_hmac(""sha256"", $string_to_sign, $secret_key, true)));

$amazon_request_sandbox = 'https://authorize.payments-sandbox.amazon.com/cobranded-ui/actions/start?SignatureVersion=2&returnUrl=' . $return_url . '&paymentReason=' . $payment_reason . '&callerReference=YourCallerReference&callerKey=' . $my_access_key_id . '&transactionAmount=4.0&pipelineName=SingleUse&SignatureMethod=HmacSHA256&Signature=' . $encoded_string_to_sign;

However, I strongly suggest that you use the PHP library provided by the FPS community which can be downloaded here. I use this in production code and have never had an issue. Using the FPS library, your code would look like the following:
<?php

require_once 'CBUISingleUsePipeline.php';
require_once 'CBUIPipeline.php';

$secret_key = '<Your_Secret_Key>';
$my_access_key_id = '<Your_Access_Key>';

$return_url = 'http://problemio.com';
$transaction_amount = '4.0';
$caller_reference = '<Your_Caller_Reference>';
$payment_reason = 'donation';

$base = 'https://authorize.payments-sandbox.amazon.com/cobranded-ui/actions/start';

$pipeline = new Amazon_FPS_CBUISingleUsePipeline($my_access_key_id, $secret_key);
$pipeline->setMandatoryParameters($caller_reference, $return_url, $transaction_amount);
$pipeline->addParameter('paymentReason', $payment_reason);
$uRL = $pipeline->getURL($base);

?>

","1319","<php><sha256><amazon-fps>","7","3","7","2012-01-21 06:38:00","","6","","731255","","2012-01-19 20:18:39","2012-01-13 20:17:19",""
"48592450","Binance API call with SHA56 and Python requests","Haven't worked in Python much and I'm obviously not sending the proper signature being asked for. How do I hash it and pass it in properly?
SIGNED endpoints require an additional parameter, signature, to be sent in the query string or request body.
Endpoints use HMAC SHA256 signatures. The HMAC SHA256 signature is a keyed HMAC SHA256 operation. Use your secretKey as the key and totalParams as the value for the HMAC operation.
The signature is not case sensitive.
totalParams is defined as the query string concatenated with the request body.

Full Documentation:
https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md
import requests, json, time, hashlib


apikey = ""myactualapikey""
secret = ""myrealsecret""
test = requests.get(""https://api.binance.com/api/v1/ping"")
servertime = requests.get(""https://api.binance.com/api/v1/time"")

servertimeobject = json.loads(servertime.text)
servertimeint = servertimeobject['serverTime']

hashedsig = hashlib.sha256(secret)

userdata = requests.get(""https://api.binance.com/api/v3/account"",
    params = {
        ""signature"" : hashedsig,
        ""timestamp"" : servertimeint,
    },
    headers = {
        ""X-MBX-APIKEY"" : apikey,
    }
)
print(userdata)

I am getting
{""code"":-1100,""msg"":""Illegal characters found in parameter 'signature'; legal range is '^[A-Fa-f0-9]{64}$'.""}

","This:
hashedsig = hashlib.sha256(secret)

Gives you a hash object, not a string.  You need to get the string in hex form:
hashedsig = hashlib.sha256(secret).hexdigest()

You could have figured this out by comparing the documentation you linked (which shows they require hex strings) with your original hashedsig and the functions it provides.
Secondly, as a  commenter pointed out, you need to apply HMAC, not just SHA256:
params = urlencode({
    ""signature"" : hashedsig,
    ""timestamp"" : servertimeint,
})
hashedsig = hmac.new(secret.encode('utf-8'), params.encode('utf-8'), hashlib.sha256).hexdigest()

You can find similar code here: http://python-binance.readthedocs.io/en/latest/_modules/binance/client.html
","1308","<python><python-3.x><python-requests><sha256><sha>","2","4","1","2018-02-02 23:58:09","","1","","","","","2018-02-02 23:46:33",""
"36228865","How to decode Hash password to string in SHA 256","$password=PREFIXE.hash(""sha256"",$_POST['Password']).SUFFIXE;

How to decode Hash password to string in SHA 256
","As Frederico says you cant really encrypt but maybe a database could be of use in individual cases, google ""sha256 database"".
Note: using these kind of websites can pose a security risk e.g. if you enter a secure passwords in plain text into the encoding form they will save it and the corresponding hash to grow their database.
","1307","<php><hash><sha256>","-5","1","1","2016-03-26 00:14:35","","1","","","","","2016-03-25 22:11:04",""
"5519457","Membership Provider EncodePassword Method .NET 4.0","I am writing my own Custom Membership Provider but am using the Membership Providers own  EncodePassword method which is shown below:
internal string EncodePassword(string pass, int passwordFormat, string salt)

{
if (passwordFormat == 0) // MembershipPasswordFormat.Clear
    return pass;

byte[] bIn = Encoding.Unicode.GetBytes(pass);
byte[] bSalt = Convert.FromBase64String(salt);
byte[] bAll = new byte[bSalt.Length + bIn.Length];
byte[] bRet = null;

Buffer.BlockCopy(bSalt, 0, bAll, 0, bSalt.Length);
Buffer.BlockCopy(bIn, 0, bAll, bSalt.Length, bIn.Length);
if (passwordFormat == 1)
{ // MembershipPasswordFormat.Hashed
    HashAlgorithm s = HashAlgorithm.Create( Membership.HashAlgorithmType );
    bRet = s.ComputeHash(bAll);
} else
{
    bRet = EncryptPassword( bAll );
}

return Convert.ToBase64String(bRet);
}

I now know after hunting around for a number of hours that in .NET 4 the algorithm used is HMACSHA256. I understand that i need a key for the algorithm to work correctly.
My question is how do it do this?
Do i put the key in the config file and reference it in some way?
Any help would be appreciated!
Thanks.   
","Don't use SHA!. Go and download BCrypt.Net. SHA is too fast at hashing which makes anything encrypted with it easy to brute force. BCrypt is slower due to a configurable work factor, so whilst imperceptable to the user, when trying to brute force 700m keys a second, you simply can't.
Once you have bcrypt all you need to do to hash is:
private static readonly int BCRYPT_WORK_FACTOR = 10;
string hashedPassword = BCrypt.Net.BCrypt.HashPassword(account.HashedPassword, BCRYPT_WORK_FACTOR);

and to check a password:
bool matched = BCrypt.Net.BCrypt.Verify(password, match.HashedPassword))

I have written this up in a bit more depth here http://www.danharman.net/2011/06/25/encrypting-hashing-passwords-for-your-website/
","1302","<algorithm><.net-4.0><membership-provider><sha256>","2","2","1","2011-06-25 02:21:02","6475146","0","1","","","","2011-04-01 22:17:10",""
"52868232","Error: ""The JWT string must have two dots""","I try to parse Bearer Tokens from a Http Request to get the client information in the next step. It works most of the time really well but sometimes sentry throws me an error: ""The JWT string must have two dots"".
How can I prevent this case?
$bearerToken = Request::bearerToken();
$parsedToken = (new Parser())->parse($bearerToken);

","The hint from @FrankerZ with try / catch block works pretty well!
try {
   $bearerToken = Request::bearerToken();
   $parsedToken = (new Parser)->parse($bearerToken);
   $tokenId = $parsedToken->getHeader('jti');
   $this->client = Token::find($tokenId)->client;
} catch (Exception $e) {
   $this->client = [];
}

","1290","<php><laravel><authentication><sha256>","1","1","1","2019-09-23 13:26:46","58063548","2","1","","","","2018-10-18 06:35:36",""
"3974211","SHA-256 password generator","i saw a javascript implementation of sha-256.
i waana ask if it is safe (pros/cons wathever) to use sha-256 (using javascript implementation or maybe python standard modules) alogrithm as a password generator:
i remember one password, put it in followed(etc) by the website address and use the generated text as the password for that website.
repeat process every time i need password
same for other websites
","SHA-256 generates very long strings. You're better off using random.choice() with a string a fixed number of times.
","1287","<javascript><python><sha256>","1","0","2","2010-10-20 02:09:14","","3","1","","","","2010-10-20 02:01:12",""
"3974211","SHA-256 password generator","i saw a javascript implementation of sha-256.
i waana ask if it is safe (pros/cons wathever) to use sha-256 (using javascript implementation or maybe python standard modules) alogrithm as a password generator:
i remember one password, put it in followed(etc) by the website address and use the generated text as the password for that website.
repeat process every time i need password
same for other websites
","I think you are describing the approach used by SuperGenPass:
Take a master password (same for every site), concatenate it with the site's domain name, and then hash the thing.
Yes, SHA-256 would be secure for that, likely more secure than when SuperGenPass uses. However, you will end up with very long passwords, too long for many sites to accept, and also not guaranteed to contain numbers and letters and special characters at the same time, which some sites require.
Also, the general problem remains that if somehow (not by breaking the algorithm, but by other means) your master password does get leaked, all your passwords are belong to us.
Completely random passwords are most secure (if we ignore the problem of storing them securely somewhere).
","1287","<javascript><python><sha256>","1","1","2","2010-10-20 02:09:14","","3","1","","","","2010-10-20 02:01:12",""
"18532707","generate sha256 hash for a string in objective C equivalent to C# without using key","In c# I am doing
 HashAlgorithm hash=SHA256.create();
    string myHash = Convert.ToBase64String( hasher.ComputeHash(Encoding.UTF8.GetBytes(""hello"")));

and in objective c I am doing
const unsigned char arr[32];
        CC_SHA256([@""hello"" UTF8String], 32, &arr);
        NSMutableData *HM = [NSData dataWithBytes:(const void *)arr length:32];
        NSLog(@""macHah  %@"",[HM base64EncodingWithLineLength:0]);

but both of them generates different hash
","Try using the following :
- (NSData *)sha256:(NSData *)data
{
    unsigned char hash[CC_SHA256_DIGEST_LENGTH];
    if ( CC_SHA256([data bytes], [data length], hash) )
    {
        NSData *hashData = [NSData dataWithBytes:hash length:CC_SHA256_DIGEST_LENGTH];
        return hashData;
    }
    return nil;
}

","1281","<c#><objective-c><hash><sha256>","1","1","1","2013-08-30 12:31:23","18532910","0","0","1003917","","2013-08-30 12:18:56","2013-08-30 12:17:04",""
"51445431","Base64 encoding of a SHA256 string","I am currently doing a program in C #. When I tried to pass my string from sha256 to base64, I realized that it was not being encoded correctly.
For instance, given the sha256
cd69ef0284bba33bc0b320e6479c2da2d411a5e46af060d8639f0e0bfc24f26d

My code produces
Y2Q0Q2OUVGMDI4NEJCQTMzQkMwQjMyMEU2NDc5QzJEQTJENDExQTVFNDZBRjA2MEQ4NjM5RjBFMEJGQzI0RjI2RA==

What I'm expecting to get is
zWnvAoS7ozvAsyDmR5wtotQRpeRq8GDYY58OC/wk8m0

Why are encoded strings so different and what am I missing?
This is the code I am using
string t1 =""cd69ef0284bba33bc0b320e6479c2da2d411a5e46af060d8639f0e0bfc24f26d"";
var t2= System.Text.Encoding.GetEncoding(1252).GetBytes(t1);                                
string t3= System.Convert.ToBase64String(t2);

","The output of SHA-256 is a binary value, typically expressed as a byte array. You've converted that into a hex string, then base64-encoded that hex string.
Instead, you should be base64-encoding the original binary data, without converting it to hex first.
If you have to go via the hex first, you should parse that back to the original bytes, then base64 encode the result:
using System;
using System.Linq;

class Program
{
    static void Main(string[] args)
    {
        string text = ""cd69ef0284bba33bc0b320e6479c2da2d411a5e46af060d8639f0e0bfc24f26d"";
        byte[] data = ParseHex(text);
        Console.WriteLine(Convert.ToBase64String(data));
    }

    // Taken from https://stackoverflow.com/questions/795027/code-golf-hex-to-raw-binary-conversion/795036#795036
    static byte[] ParseHex(string text)
    {
        Func<char, int> parseNybble = c => (c >= '0' && c <= '9') ? c-'0' : char.ToLower(c)-'a'+10;
        return Enumerable.Range(0, text.Length/2)
            .Select(x => (byte) ((parseNybble(text[x*2]) << 4) | parseNybble(text[x*2+1])))
            .ToArray();
    }
}

... but it would be better just not to convert the hash into hex to start with.
","1281","<c#><base64><sha256>","0","4","1","2018-07-20 15:34:03","51445971","5","","9387047","","2018-07-20 15:17:00","2018-07-20 15:03:09",""
"32116405","Change the hash of a PE executable by changing the checksum header","I am writing a code that calculates the MD5/SHA256 of a program and later I want to be able to change it.
I wrote the code for calculating the MD5/SHA256, which is:
    using (var md5 = MD5.Create())
    {
        using (var stream = File.OpenRead(textBox1.Text))
        {
            MessageBox.Show(BitConverter.ToString(md5.ComputeHash(stream)).Replace(""-"", """"));
        }
    }
    using (var sha256 = SHA256.Create())
    {
        using (var stream = File.OpenRead(textBox1.Text))
        {
            MessageBox.Show(BitConverter.ToString(sha256.ComputeHash(stream)).Replace(""-"", """"));
        }
    }

Next I want to be able to change the values of MD5/SHA256 for the specified file. I have searched and all I found was this class:
class FileUtils
{
    #region VARIABLES
    private const int OFFSET_CHECKSUM = 0x12;
    #endregion

    #region METHODS
    public static ushort GetCheckSum(string fileName)
    {
        if (!File.Exists(fileName))
            throw new FileNotFoundException(""Invalid fileName"");
        return GetCheckSum(File.ReadAllBytes(fileName));
    }
    public static ushort GetCheckSum(byte[] fileData)
    {
        if (fileData.Length < OFFSET_CHECKSUM + 1)
            throw new ArgumentException(""Invalid fileData"");
        return BitConverter.ToUInt16(fileData, OFFSET_CHECKSUM);
    }
    public static void WriteCheckSum(string sourceFile, string destFile, ushort checkSum)
    {
        if (!File.Exists(sourceFile))
            throw new FileNotFoundException(""Invalid fileName"");
        WriteCheckSum(File.ReadAllBytes(sourceFile), destFile, checkSum);
    }
    public static void WriteCheckSum(byte[] data, string destFile, ushort checkSum)
    {
        byte[] checkSumData = BitConverter.GetBytes(checkSum);
        checkSumData.CopyTo(data, OFFSET_CHECKSUM);
        File.WriteAllBytes(destFile, data);
    }
    #endregion
    }

Which I don't really understand how it works and only changes the MD5. Is there an easier way to do this, for not so advanced users? If this class works for what I need, could someone explain to me how can I use it?
Edit: I am aware that the MD5 of the file can't be changed, my goal is not to change the MD5 of the actual file, I want to add some contents to the file which would change the MD5 and by doing that I want the file to remain unchanged in functionalities.
","You can't just decide that you want your file to have a different hash because the hash is a direct result of the data stored in that file. Two identical files, in terms of what they contain, will always produce the same hash, regardless of what their names are. 
Any changes to the content the file itself will result in an entirely different hash value. 
","1280","<c#><md5><checksum><sha256>","0","1","3","2015-08-20 12:10:21","32117119","9","","5204184","","2015-08-20 11:29:48","2015-08-20 10:57:14",""
"32116405","Change the hash of a PE executable by changing the checksum header","I am writing a code that calculates the MD5/SHA256 of a program and later I want to be able to change it.
I wrote the code for calculating the MD5/SHA256, which is:
    using (var md5 = MD5.Create())
    {
        using (var stream = File.OpenRead(textBox1.Text))
        {
            MessageBox.Show(BitConverter.ToString(md5.ComputeHash(stream)).Replace(""-"", """"));
        }
    }
    using (var sha256 = SHA256.Create())
    {
        using (var stream = File.OpenRead(textBox1.Text))
        {
            MessageBox.Show(BitConverter.ToString(sha256.ComputeHash(stream)).Replace(""-"", """"));
        }
    }

Next I want to be able to change the values of MD5/SHA256 for the specified file. I have searched and all I found was this class:
class FileUtils
{
    #region VARIABLES
    private const int OFFSET_CHECKSUM = 0x12;
    #endregion

    #region METHODS
    public static ushort GetCheckSum(string fileName)
    {
        if (!File.Exists(fileName))
            throw new FileNotFoundException(""Invalid fileName"");
        return GetCheckSum(File.ReadAllBytes(fileName));
    }
    public static ushort GetCheckSum(byte[] fileData)
    {
        if (fileData.Length < OFFSET_CHECKSUM + 1)
            throw new ArgumentException(""Invalid fileData"");
        return BitConverter.ToUInt16(fileData, OFFSET_CHECKSUM);
    }
    public static void WriteCheckSum(string sourceFile, string destFile, ushort checkSum)
    {
        if (!File.Exists(sourceFile))
            throw new FileNotFoundException(""Invalid fileName"");
        WriteCheckSum(File.ReadAllBytes(sourceFile), destFile, checkSum);
    }
    public static void WriteCheckSum(byte[] data, string destFile, ushort checkSum)
    {
        byte[] checkSumData = BitConverter.GetBytes(checkSum);
        checkSumData.CopyTo(data, OFFSET_CHECKSUM);
        File.WriteAllBytes(destFile, data);
    }
    #endregion
    }

Which I don't really understand how it works and only changes the MD5. Is there an easier way to do this, for not so advanced users? If this class works for what I need, could someone explain to me how can I use it?
Edit: I am aware that the MD5 of the file can't be changed, my goal is not to change the MD5 of the actual file, I want to add some contents to the file which would change the MD5 and by doing that I want the file to remain unchanged in functionalities.
","MD5 is computed by passing bytes(a file for example) and representing them uniquely in hexadecimal, You don't change the ""MD5"" of a file, the result MD5 will change as the file changes.
","1280","<c#><md5><checksum><sha256>","0","1","3","2015-08-20 12:10:21","32117119","9","","5204184","","2015-08-20 11:29:48","2015-08-20 10:57:14",""
"32116405","Change the hash of a PE executable by changing the checksum header","I am writing a code that calculates the MD5/SHA256 of a program and later I want to be able to change it.
I wrote the code for calculating the MD5/SHA256, which is:
    using (var md5 = MD5.Create())
    {
        using (var stream = File.OpenRead(textBox1.Text))
        {
            MessageBox.Show(BitConverter.ToString(md5.ComputeHash(stream)).Replace(""-"", """"));
        }
    }
    using (var sha256 = SHA256.Create())
    {
        using (var stream = File.OpenRead(textBox1.Text))
        {
            MessageBox.Show(BitConverter.ToString(sha256.ComputeHash(stream)).Replace(""-"", """"));
        }
    }

Next I want to be able to change the values of MD5/SHA256 for the specified file. I have searched and all I found was this class:
class FileUtils
{
    #region VARIABLES
    private const int OFFSET_CHECKSUM = 0x12;
    #endregion

    #region METHODS
    public static ushort GetCheckSum(string fileName)
    {
        if (!File.Exists(fileName))
            throw new FileNotFoundException(""Invalid fileName"");
        return GetCheckSum(File.ReadAllBytes(fileName));
    }
    public static ushort GetCheckSum(byte[] fileData)
    {
        if (fileData.Length < OFFSET_CHECKSUM + 1)
            throw new ArgumentException(""Invalid fileData"");
        return BitConverter.ToUInt16(fileData, OFFSET_CHECKSUM);
    }
    public static void WriteCheckSum(string sourceFile, string destFile, ushort checkSum)
    {
        if (!File.Exists(sourceFile))
            throw new FileNotFoundException(""Invalid fileName"");
        WriteCheckSum(File.ReadAllBytes(sourceFile), destFile, checkSum);
    }
    public static void WriteCheckSum(byte[] data, string destFile, ushort checkSum)
    {
        byte[] checkSumData = BitConverter.GetBytes(checkSum);
        checkSumData.CopyTo(data, OFFSET_CHECKSUM);
        File.WriteAllBytes(destFile, data);
    }
    #endregion
    }

Which I don't really understand how it works and only changes the MD5. Is there an easier way to do this, for not so advanced users? If this class works for what I need, could someone explain to me how can I use it?
Edit: I am aware that the MD5 of the file can't be changed, my goal is not to change the MD5 of the actual file, I want to add some contents to the file which would change the MD5 and by doing that I want the file to remain unchanged in functionalities.
","As far as I understand, you have or want two copies of the same PE executable file. Now you want to change either or both of these files, so that when you calculate a hash of the file's contents, they are different.
If you change the checksum, chances are the executable won't run anymore. If you're OK with that, you can easily use the class that you showed. It seems to assume a checksum consists of two bytes and is offset at byte 0x12 in the executable. I can't verify right now that it is correct, but at a glance it doesn't seem to be.
Anyway you can create your unique checksum per file and set it:
FileUtils.WriteCheckSum(sourceFile, destFile1, 1);
FileUtils.WriteCheckSum(sourceFile, destFile2, 2);

Now the two files will bear different contents, so the hash of their contents will be different.
","1280","<c#><md5><checksum><sha256>","0","1","3","2015-08-20 12:10:21","32117119","9","","5204184","","2015-08-20 11:29:48","2015-08-20 10:57:14",""
"40224275","not a valid sha512_crypt hash Python Flask Error","Hey for some reasons I get this error not a valid sha512_crypt hasheverytime I try to login on my login page. 
Piece of Register page:
                username = request.form['username']
                password = sha512_crypt.encrypt((str(request.form['password'])))
                email = request.form['email']

                cur.execute(""INSERT INTO users (name,password,email) VALUES (?,?,?)"",(username,password,email)

Piece of my login Page:
data = cur.execute(""SELECT password FROM users WHERE name= ?"", (request.form['username'],))

                data = cur.fetchone()[0]

                if sha512_crypt.verify(request.form['password'], data):
                    session['logged_in'] = True
                    session

                  #etc #etc #etc

So when I fill in a username and password from my DB I get an error: 
not a valid sha512_crypt hash
In my DB there are encrypted passwords, so my sha256 encryption works theoretically.
","You have password hashes in your database created with both sha256_crypt and sha512_crypt, but you're using sha512_crypt to verify both both. That won't work.
Either re-create the passwords for users with hashes created with sha256_crypt (they start with $5$), or use passlib.apps.custom_app_context, which verifies both. Here's an example from the docs:
# import the context under an app-specific name (so it can easily be replaced later)
from passlib.apps import custom_app_context as pwd_context

# encrypting a password...
hash = pwd_context.encrypt(""somepass"")

# verifying a password...
ok = pwd_context.verify(""somepass"", hash)

","1279","<python><flask><sha256>","0","1","1","2016-10-24 18:02:38","40224666","11","1","","","","2016-10-24 17:36:13",""
"37193767","Compare hashes in c","I am trying to compare and match hashes:
#include <stdio.h>
#include <string.h>
#include ""sha256.h""

int main()
{
   unsigned char password[]={""abc""}, gen_hash[32];
   SHA256_CTX ctx;

   sha256_init(&ctx);
   sha256_update(&ctx,password,strlen(password));
   sha256_final(&ctx,gen_hash);

   unsigned char orig_hash[] = {""ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad""};

   if(strcmp(orig_hash, gen_hash) == 0)
   {
    printf(""%s\n"", ""match"");
   }
   return 0;
}

But If I compare both hashes, they are not the same. Does anyone happen to know why? I thought both the variables are the same, but are they not?
","Two points:

Don't use strcmp but rather memcmp since the generated hash gen_hash won't have '\0' at the end.
You defined orig_hash as
unsigned char orig_hash[] = 
{""ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad""};

which is a string of characters. You should define it as a array of numbers:
unsigned char orig_hash[] = {0xba, 0x78, 0x16, 0xbf, ...};

","1279","<c><hash><sha256>","1","5","1","2016-05-12 20:08:24","37193949","8","1","4148092","","2016-05-12 20:08:24","2016-05-12 17:30:15",""
"30213659","node.js crypto signature and openssl signature does not match","I wanted to perform RSA-SHA512 on a file in node.js. I could calculate sha512 hash of the given data file which matches with that of openssl's.
However when trying to get the digital signature on the same hash, node.js signature differs from openssl signature.
Below is an example code snippet:
var data = new Buffer(512);
data = fs.readFileSync('/tmp/data');
var pem = fs.readFileSync('/tmp/boot2-prvKey.pem');
var privateKey = pem.toString('ascii');

var signer = crypto.createSign(""RSA-SHA256"");
signer.update(data);
var sign = signer.sign(privateKey, 'hex');
console.log(""SIGN "" + sign + '\n');

Openssl command to sign the data:
openssl rsautl -sign -in /tmp/data -inkey /tmp/boot2-prvKey.pem -out sig

Both of the above generates different signatures.
I have couple of questions
1) I want to calculate RSA-SHA256 of a file, so I calculate sha256 hash of the entire file first and pass this hash as an input to signing function.
Is that a correct approach?
2) If yes, what might have gone wrong in the code above ? If no, what would be the correct approach ?
node.js version I am using is 0.10.36 and openssl version is 1.0,1.
","The problem is that your Openssl command just sign your data without hash function.
You must first hash your data with openssl and with the same function as in your nodejs code (SHA-256) then sign the hash to obtain the final signature with your command: 
openssl rsautl -sign -in /tmp/data -inkey /tmp/boot2-prvKey.pem -out sig
You can see that in this command your havent specify any hash function.
To obtain a signature:  data -> SHA-256 = hash -> RSA =  signature
I havent enough time to test it and give you the right code, i hope it will be helpfull.
","1278","<node.js><openssl><rsa><digital-signature><sha256>","2","0","2","2015-05-15 10:11:55","30238876","2","1","1816580","","2015-05-13 11:42:16","2015-05-13 11:36:30",""
"30213659","node.js crypto signature and openssl signature does not match","I wanted to perform RSA-SHA512 on a file in node.js. I could calculate sha512 hash of the given data file which matches with that of openssl's.
However when trying to get the digital signature on the same hash, node.js signature differs from openssl signature.
Below is an example code snippet:
var data = new Buffer(512);
data = fs.readFileSync('/tmp/data');
var pem = fs.readFileSync('/tmp/boot2-prvKey.pem');
var privateKey = pem.toString('ascii');

var signer = crypto.createSign(""RSA-SHA256"");
signer.update(data);
var sign = signer.sign(privateKey, 'hex');
console.log(""SIGN "" + sign + '\n');

Openssl command to sign the data:
openssl rsautl -sign -in /tmp/data -inkey /tmp/boot2-prvKey.pem -out sig

Both of the above generates different signatures.
I have couple of questions
1) I want to calculate RSA-SHA256 of a file, so I calculate sha256 hash of the entire file first and pass this hash as an input to signing function.
Is that a correct approach?
2) If yes, what might have gone wrong in the code above ? If no, what would be the correct approach ?
node.js version I am using is 0.10.36 and openssl version is 1.0,1.
","When you supply an input to a signature program, it might assume that the input is not yet hashed, and will hash it before signing. The problem here is that Node is (re-)hashing the input, while rsautl is using the input as-is. (Note that even if you separately re-hash the input before supplying it to rsautl, it's still won't match because rsautl does not use ASN1 encoding; see below.)
To make OpenSSL produce a SHA256 hash before making an RSA signature (like Node does), you need to use the dgst command with the -sha256 and -sign arguments:
openssl dgst -sha256 -sign /tmp/boot2-prvKey.pem -hex < /tmp/data

This will hash /tmp/data and sign the hash with RSA, which is exactly what Node's RSA-SHA256 signer does.
See Difference between openSSL rsautl and dgst for more information:

The simple answer is that dgst -sign creates a hash, ASN1 encodes it, and then signs the ASN1 encoded hash, whereas rsautl -sign just signs the input without hashing or ASN1 encoding.

The behavior of Node's sign method is like dgst -sign rather than rsautl -sign.
Node does not appear to offer a built-in rsautl-like mechanism for signing without hashing and ASN1-encoding. For this reason, you may need to sign the document directly, rather than operate on a hash of the document. If you really can't do that for some reason, you can download the Node rsautl module from NPM, which provides Node bindings for rsautl.
","1278","<node.js><openssl><rsa><digital-signature><sha256>","2","5","2","2015-05-15 10:11:55","30238876","2","1","1816580","","2015-05-13 11:42:16","2015-05-13 11:36:30",""
"47426198","How to perform SHA-256 on binary values with Hashlib?","I’m using Python 2 and am attempting to performing sha256 on binary values using hashlib.
I’ve become a bit stuck as I’m quite new to it all but have cobbled together:

hashlib.sha256('0110100001100101011011000110110001101111’.decode('hex')).hexdigest()

I believe it interprets the string as hex based on substituting the hex value (‘68656c6c6f’) into the above and it returning 

2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824

And comparing to this answer in which ‘hello’ or ‘68656c6c6f’ is used.  
I think the answer lies with the decode component but I can’t find an example for binary only ‘hex’ or ‘utf-8’ 
Is anyone able to suggest what needs to be changed so that the function interprets as binary values instead of hex? 
","Here is code that does each of the data conversions you are looking for.  These steps can all be combined, but are separated here so you can see each value.
import hashlib
import binascii

binstr = '0110100001100101011011000110110001101111'
hexstr = ""{0:0>4X}"".format(int(binstr,2)) # '68656C6C6F'
data = binascii.a2b_hex(hexstr) # 'hello'
output = hashlib.sha256(data).hexdigest()
print output

OUTPUT:
2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824
","1278","<python><binary><decode><sha256><hashlib>","1","1","1","2017-11-22 04:29:06","","0","1","","","","2017-11-22 03:10:41",""
"36433799","PHP: openssl_verify not working with ECDSA keys","I need some help with the following ""pseudo"" code:
<?php

$stringToVerify = '50.009781OK101092014125505';
$ECDSA =     '3045022100b4b4064158cb12f5b3d902e1e4487e0c6dfafd96b5bb5ab9765fc088e054d67e0220153    f9bb5da20441c68ff0c3e8ba28cfe048e5c3152fc8c890def156cf09d5540';
$publicKey = ""-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEaq6djyzkpHdX7kt8DsSt6IuSoXjp
WVlLfnZPoLaGKc/2BSfYQuFIO2hfgueQINJN3ZdujYXfUJ7Who+XkcJqHQ==
-----END PUBLIC KEY-----"";

var_dump(openssl_verify($stringToVerify, pack(""H*"", $ECDSA), $publicKey,     OPENSSL_ALGO_SHA256));
var_dump(openssl_error_string());

openssl_verify() will always return non-TRUE value and the openssl_error_string() will return error message: 'error:0906D06C:PEM routines:PEM_read_bio:no start line'
Where might be a problem? Why openssl_verify() won't return TRUE?
OpenSSL version is 1.0.1r  28 Jan 2016
","The error:0906D06C:PEM routines:PEM_read_bio:no start line is non-fatal.  That means it didn't find a certificate along with the private key which is okay since there is only a public/private key in this case.
openssl_verify() returns -1 on failure, 1 if the signature is correct and 0 if it is incorrect.  Because of this you should be checking for all 3 values, not just true or false.
You should check the return value of openssl_verify for -1 indicating failure.  If it returns 0, then the key is valid but either the signature is invalid, the data was tampered with, or the wrong public key was used for verification.
Here's a fully illustrated example:
<?php

$stringToSign = ""hey this is some data I want to sign to confirm I said it and no one else..."";
$privateKey =
""-----BEGIN RSA PRIVATE KEY-----
MIIEpQIBAAKCAQEA0PWnPjB5x8Xs+uV0GRCGGE8xlLU67sx6CDdAU7FBsBe8X7pt
065MAUwrtRQvIhyKhd9wRg8LvgWm7vYnYi5tkdodOhRyVw+jd7Id9CsQwUNNG+JZ
vrEmHKCTXvWbv/fmL5DTCkRxoJj3KdNqUYA6M+JcGahgpGnsRmvWQ2mz4IZZi5ur
vjSPPdrBSWgts5uIv5tNfEwuEzbJtIENn0tysoksIiG/n8edBbxlTqCo8OJVfy1n
h21TdBEHsi9V0NyEtqAFKdHaZscA3yj9k2mWuqSg1c0VnGJ/+OmOvgLkDlz3f7vH
t7ULJxV/iyNdugh5XUD1YKRwhMqBqfTNlKyFvwIDAQABAoIBABEsPyRjQ37hi0pL
VTFCJGMXDxITmtZJQ7YtJEI8jRN1v+t2HNSKvIBWzDjDgeQhyFicNlPrpKFnQYLe
A/qTqjmUXVaKm6MADAUoREHu0B+x8kJaZdnAIUu0/qeNM9GhA+/gzRdI7LWwHI/5
agFsslvVPJB3QAoDEoHvFtrPcxL+kY+wZu8RUYG6TCX/QxD45iZhQkWFH6I6tXh+
5wO1Dt0sx1iQJYkaI9/iHGkKS04hnNCQKPSdBLx0p+w87W9aF3+hoafRGMLsHL8S
mzQTFTHryYdrczjFhFypPhgCm+gdm8OlhjpuRHdmEV6jm40snnPyq9w9gm1Etge9
v0otEjECgYEA7z8WOw0NGb+UHx8F+YKyaaVigkN/Pal0tBbBG/XIF2hubbldr3Z8
/XCfmY8sIdQvxOusSfD1aFCxS34t8V6kAerQKZ6p4+W4xb7+dF9/qfCqJXzQttug
M8EujgAdqlS+G/3FKzHBWmfTDlymLsldH2dC2I6U+Jo5kAzPyS5SxLsCgYEA35ef
E79OaCKNFGpK9VgsLnEKd9DtZS3abzOkx5242VRjWIjrsvEgLfuvLSGGYgSaeCMY
edsCQ3mfmS2Yjiov0eZ4b2PcK+16ndaGQceHwuoP/eeH/BGe+eLcDF/xBFx7yRnn
sVgDhePthBCwOOJm7M26cCVdMmO3GMHxopXdNM0CgYEAlfQvxeFfRbU7bOov/3y4
wNjlTopp1UdCG6JrdU/vEyTkmidmHhUhMGUH0+LWIXnyWvXwbgP2fWSeS5gRycis
+Xqo8H0/NNWGo4Mbz+sPhH+Q1aBO3V35IpdBy8Us0tb8tWSw0WsFKtoKgmT10Dtr
/8PkNQHhQ5S+4Zf2IL3FKQMCgYEAy4A0SMTVl/HadbpIfwTBMYOxA1wktPIG3S8j
yorCswsbYHk+DJ9pqnBn/6uDo7KM5MsMe9vZM5B+sevN7ZZ375LUCo3Y1iJOd1nI
2BXCeqSN6YnROprPFqBjpt+rfUyvXVk2hzKUAkhw5MJLoXpuMxkLlwZqzHH1M5NR
WakMrAECgYEA4Ij7J3591daJbS5+pFK7MujrSg6TTi2etyyXcNO6xIkEbiX69MIU
DZh9GfAVkh6k/WaA2MuThI39TZJiF0nBU+irQttK6LeVhZ2MK+dEJh7rTy1b7zv1
WXLfkc1viK7cnC2ROOChmRm64GURupdf7ACsR2r+vbTSEoevWKfXwIk=
-----END RSA PRIVATE KEY-----"";

$publicKey =
""-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0PWnPjB5x8Xs+uV0GRCG
GE8xlLU67sx6CDdAU7FBsBe8X7pt065MAUwrtRQvIhyKhd9wRg8LvgWm7vYnYi5t
kdodOhRyVw+jd7Id9CsQwUNNG+JZvrEmHKCTXvWbv/fmL5DTCkRxoJj3KdNqUYA6
M+JcGahgpGnsRmvWQ2mz4IZZi5urvjSPPdrBSWgts5uIv5tNfEwuEzbJtIENn0ty
soksIiG/n8edBbxlTqCo8OJVfy1nh21TdBEHsi9V0NyEtqAFKdHaZscA3yj9k2mW
uqSg1c0VnGJ/+OmOvgLkDlz3f7vHt7ULJxV/iyNdugh5XUD1YKRwhMqBqfTNlKyF
vwIDAQAB
-----END PUBLIC KEY-----"";

$signature = null;
$alg       = OPENSSL_ALGO_SHA256;

if (openssl_sign($stringToSign, $signature, $privateKey, $alg)) {
    echo ""Successfully signed data.\n"";

    $signature = base64_encode($signature); // as might be done in transport

    // verify which should succeed
    $success = openssl_verify($stringToSign, base64_decode($signature), $publicKey, $alg);

    if ($success === -1) {
        echo ""openssl_verify() failed with error.  "" . openssl_error_string() . ""\n"";
    } elseif ($success === 1) {
        echo ""Signature verification was successful!\n"";
    } else {
        echo ""Signature verification failed.  Incorrect key or data has been tampered with\n"";
    }

    // verify which should fail because data has been tampered with
    $stringToSign .= ""\nI am evil and demand you wire $1,000,000,000 to me."";

    $success = openssl_verify($stringToSign, base64_decode($signature), $publicKey, $alg);

    if ($success === -1) {
        echo ""openssl_verify() failed with error.  "" . openssl_error_string() . ""\n"";
    } elseif ($success === 1) {
        echo ""Signature verification was successful!\n"";
    } else {
        echo ""Signature verification failed.  Incorrect key or data has been tampered with!\n"";
    }
} else {
    echo ""openssl_sign() failed.  "" . openssl_error_string() . ""\n"";
}

","1272","<php><openssl><sha256><ecdsa>","0","0","1","2016-04-05 18:56:38","36434803","0","","6039389","","2016-04-05 18:11:02","2016-04-05 18:04:35",""
"33992392","Shopify C# HMAC SHA256 OAuth Validation","I'm trying to validate the Shopify HMAC during an OAUTH request and the hash I generate does not match the one provided as part of the request.
I've found some other threads but they are either outdated, as the documentation now states it uses a GET request instead of POST, or unanswered in java.
My C# code is as follows:
string key = ""mysecretkey"";

string message = string.Format(""shop={0}&timestamp={1}"", shop, timestamp);

System.Text.ASCIIEncoding encoding = new ASCIIEncoding();

byte[] keyBytes = encoding.GetBytes(key);

byte[] messageBytes = encoding.GetBytes(message);

System.Security.Cryptography.HMACSHA256 cryptographer = new System.Security.Cryptography.HMACSHA256(keyBytes);

byte[] bytes = cryptographer.ComputeHash(messageBytes);

string digest = BitConverter.ToString(bytes).Replace(""-"", """");

bool valid = digest == hmac.ToUpper();

I'm guessing the message is being built incorrectly but I've followed the official documentation with no luck.
Can someone help please?
","You are calculating a HMAC without using your key.
The documentation states that you should generate the HMAC digest using the shared key. What is the meaning of an HMAC value without the key anyways? Anybody could mimic the shopify server if Shopify had not use the pre-shared key between you and them for calculating the HMAC.
The following code block is from the documentation:
digest = OpenSSL::Digest.new('sha256')
secret = ""hush""
message = ""shop=some-shop.myshopify.com&timestamp=1337178173""

digest = OpenSSL::HMAC.hexdigest(digest, secret, message)
digest == ""2cb1a277650a659f1b11e92a4a64275b128e037f2c3390e3c8fd2d8721dac9e2""

Therefore, try cryptographer.Key = keyBytes; before computing the Hash 
byte[] keyBytes = encoding.GetBytes(key);

byte[] messageBytes = encoding.GetBytes(message);

System.Security.Cryptography.HMACSHA256 cryptographer = new System.Security.Cryptography.HMACSHA256(keyBytes);

cryptographer.Key = keyBytes;

byte[] bytes = cryptographer.ComputeHash(messageBytes);

","1270","<c#><oauth><shopify><sha256><hmac>","2","1","3","2017-05-03 07:37:36","34428449","4","2","-1","","2017-05-23 12:18:04","2015-11-30 06:09:09",""
"33992392","Shopify C# HMAC SHA256 OAuth Validation","I'm trying to validate the Shopify HMAC during an OAUTH request and the hash I generate does not match the one provided as part of the request.
I've found some other threads but they are either outdated, as the documentation now states it uses a GET request instead of POST, or unanswered in java.
My C# code is as follows:
string key = ""mysecretkey"";

string message = string.Format(""shop={0}&timestamp={1}"", shop, timestamp);

System.Text.ASCIIEncoding encoding = new ASCIIEncoding();

byte[] keyBytes = encoding.GetBytes(key);

byte[] messageBytes = encoding.GetBytes(message);

System.Security.Cryptography.HMACSHA256 cryptographer = new System.Security.Cryptography.HMACSHA256(keyBytes);

byte[] bytes = cryptographer.ComputeHash(messageBytes);

string digest = BitConverter.ToString(bytes).Replace(""-"", """");

bool valid = digest == hmac.ToUpper();

I'm guessing the message is being built incorrectly but I've followed the official documentation with no luck.
Can someone help please?
","OK the devs at Shopify got back to me with the answer. It seems you need to hash the entire contents of the querystring in alphabetical order except the signature and hmac. I had my own parameter (rlr) I was appending as well as one not mentioned in the docs (state).
 string message = """";// ""code=7af66fd73427a1634cee3103297230b8&rlr=9DFD5EA9-7747-4142-97D9-2D44BBA442F1&shop=appswiz.myshopify.com&state=fa992b8f-762e-4813-b707-6044e71ad3b5&timestamp=1448856806"";
        message = ""code=xxxxxxxx"";
        message += ""&rlr=xxxxx"";
        message += ""&shop=xxx.myshopify.com"";
        message += ""&state=xxxxxxxx"";
        message += ""&timestamp=1449111190"";
        hmac = ""xxxxxxx"";
        System.Text.ASCIIEncoding encoding = new ASCIIEncoding();
        byte[] keyBytes = encoding.GetBytes(key);
        byte[] messageBytes = encoding.GetBytes(message);
        System.Security.Cryptography.HMACSHA256 cryptographer = new System.Security.Cryptography.HMACSHA256(keyBytes);

        byte[] bytes = cryptographer.ComputeHash(messageBytes);

        string digest = BitConverter.ToString(bytes).Replace(""-"", """");
        return digest == hmac.ToUpper();

This now works.
","1270","<c#><oauth><shopify><sha256><hmac>","2","4","3","2017-05-03 07:37:36","34428449","4","2","-1","","2017-05-23 12:18:04","2015-11-30 06:09:09",""
"33992392","Shopify C# HMAC SHA256 OAuth Validation","I'm trying to validate the Shopify HMAC during an OAUTH request and the hash I generate does not match the one provided as part of the request.
I've found some other threads but they are either outdated, as the documentation now states it uses a GET request instead of POST, or unanswered in java.
My C# code is as follows:
string key = ""mysecretkey"";

string message = string.Format(""shop={0}&timestamp={1}"", shop, timestamp);

System.Text.ASCIIEncoding encoding = new ASCIIEncoding();

byte[] keyBytes = encoding.GetBytes(key);

byte[] messageBytes = encoding.GetBytes(message);

System.Security.Cryptography.HMACSHA256 cryptographer = new System.Security.Cryptography.HMACSHA256(keyBytes);

byte[] bytes = cryptographer.ComputeHash(messageBytes);

string digest = BitConverter.ToString(bytes).Replace(""-"", """");

bool valid = digest == hmac.ToUpper();

I'm guessing the message is being built incorrectly but I've followed the official documentation with no luck.
Can someone help please?
","Using Guy Lowe's answer I recently got this working:
    public bool ValidateShopifyHmac(string hmacHeader, string localData, string apiSecret) {
        var ascii = new ASCIIEncoding();
        var secretBytes = ascii.GetBytes(apiSecret);
        var cryptographer = new System.Security.Cryptography.HMACSHA256(secretBytes);
        var messageBytes = ascii.GetBytes(localData);
        var hashedMessage = cryptographer.ComputeHash(messageBytes);
        var digest = BitConverter.ToString(hashedMessage).Replace(""-"", """");
        return digest == hmacHeader.ToUpper();
    }

","1270","<c#><oauth><shopify><sha256><hmac>","2","0","3","2017-05-03 07:37:36","34428449","4","2","-1","","2017-05-23 12:18:04","2015-11-30 06:09:09",""
"52755574","Digital sign with sha256 with c#","here in Italy, we will need to digitally sign all invoices since January 2019.
I found a code that works well with sha-1, but I need to use sha256 as standard.
The code below, after successfully detect USB key, and ask me for the certificate to use try to sign ""NomeFile"" file After and output in ""NomeFile"".p7m, when the line
signedCms.ComputeSignature(signer,false);
runs, it happens:
1- if use sha-1 it asks me for the PIN and document is successfully created.
2- if use sha-256 don't ask for PIN and gives me Unknown error -1073741275 
I read a lot of posts that are all old (2011-2014). Other people have the same problem and seem that Microsoft has some bug using sha256.
Now we are at end of 2018 and I tried this code in .net 4, 4.6.1 and 4.7.2 but the error is the same.
Somebody can tell me if Microsoft corrects the problem with sha256 and what could be this strange error? (-1073741275) 
Error Stack
public String FirmaFile(String NomeFile, DateTime DataFirma, X509Certificate2 cert, out string RisFirma)
        {
            String NomeFirma = NomeFile + "".p7m"";
            RisFirma = """";

            try
            {


                // content contiene il file da firmare
                ContentInfo content = new ContentInfo((File.ReadAllBytes(NomeFile)));
                // assegniamo content ad un oggetto di tipo SignedCms
                SignedCms signedCms = new SignedCms(SubjectIdentifierType.IssuerAndSerialNumber, content, false);

                // si instanzia un oggetto CmsSigner che espone i metodi di firma.
                CmsSigner signer = new CmsSigner(cert);
                signer.IncludeOption = X509IncludeOption.EndCertOnly;

                //signer.DigestAlgorithm = new Oid(""2.16.840.1.101.3.4.2.1"");
                signer.DigestAlgorithm = new Oid(""SHA256"");
                signer.SignedAttributes.Add(new Pkcs9SigningTime(DataFirma));
                try
                {
                    // Viene calcolata la firma del file (in formato PKCS7)
                    signedCms.ComputeSignature(signer,false);
                }
                catch (CryptographicException CEx)
                {
                    RisFirma = ""Errore: "" + CEx.Message + "" Stack: "" + CEx.StackTrace;
                    return RisFirma;
                }
                // si pone il file firmato in un array.
                byte[] signature = signedCms.Encode();
                File.WriteAllBytes(NomeFirma, signature);
                RisFirma = ""true"";
            }
            catch (Exception Ex)
            {
                RisFirma = ""Errore in FirmaFile: "" + Ex.Message + "" Stack: "" + Ex.StackTrace;
            }
            return RisFirma;
        }

NB: I tried 2 version of OID
signer.DigestAlgorithm = new Oid(""2.16.840.1.101.3.4.2.1"");
signer.DigestAlgorithm = new Oid(""SHA256"");
All 2 give the same error.
I USE an INFOCERT USB KEY with driver bit4id (https://www.bit4id.com/it/4identity/) that is contained in USB Drive.
","use this:
private string podpisz(X509Certificate2 cert, string toSign)
{
    string output = """";

    try
    {
        RSACryptoServiceProvider csp = null;
        csp = (RSACryptoServiceProvider)cert.PrivateKey;

        // Hash the data
        SHA256Managed sha256 = new SHA256Managed();
        UnicodeEncoding encoding = new UnicodeEncoding();
        byte[] data = Encoding.Default.GetBytes(toSign);
        byte[] hash = sha256.ComputeHash(data);

        // Sign the hash
        byte[] wynBin = csp.SignHash(hash, CryptoConfig.MapNameToOID(""SHA256""));
        output = Convert.ToBase64String(wynBin);

    }
    catch (Exception)
    {

    }

    return output;
}

","1268","<c#><sha256><sign>","0","0","4","2018-10-19 17:15:12","","2","","6474201","","2018-10-11 12:31:49","2018-10-11 08:28:46",""
"52755574","Digital sign with sha256 with c#","here in Italy, we will need to digitally sign all invoices since January 2019.
I found a code that works well with sha-1, but I need to use sha256 as standard.
The code below, after successfully detect USB key, and ask me for the certificate to use try to sign ""NomeFile"" file After and output in ""NomeFile"".p7m, when the line
signedCms.ComputeSignature(signer,false);
runs, it happens:
1- if use sha-1 it asks me for the PIN and document is successfully created.
2- if use sha-256 don't ask for PIN and gives me Unknown error -1073741275 
I read a lot of posts that are all old (2011-2014). Other people have the same problem and seem that Microsoft has some bug using sha256.
Now we are at end of 2018 and I tried this code in .net 4, 4.6.1 and 4.7.2 but the error is the same.
Somebody can tell me if Microsoft corrects the problem with sha256 and what could be this strange error? (-1073741275) 
Error Stack
public String FirmaFile(String NomeFile, DateTime DataFirma, X509Certificate2 cert, out string RisFirma)
        {
            String NomeFirma = NomeFile + "".p7m"";
            RisFirma = """";

            try
            {


                // content contiene il file da firmare
                ContentInfo content = new ContentInfo((File.ReadAllBytes(NomeFile)));
                // assegniamo content ad un oggetto di tipo SignedCms
                SignedCms signedCms = new SignedCms(SubjectIdentifierType.IssuerAndSerialNumber, content, false);

                // si instanzia un oggetto CmsSigner che espone i metodi di firma.
                CmsSigner signer = new CmsSigner(cert);
                signer.IncludeOption = X509IncludeOption.EndCertOnly;

                //signer.DigestAlgorithm = new Oid(""2.16.840.1.101.3.4.2.1"");
                signer.DigestAlgorithm = new Oid(""SHA256"");
                signer.SignedAttributes.Add(new Pkcs9SigningTime(DataFirma));
                try
                {
                    // Viene calcolata la firma del file (in formato PKCS7)
                    signedCms.ComputeSignature(signer,false);
                }
                catch (CryptographicException CEx)
                {
                    RisFirma = ""Errore: "" + CEx.Message + "" Stack: "" + CEx.StackTrace;
                    return RisFirma;
                }
                // si pone il file firmato in un array.
                byte[] signature = signedCms.Encode();
                File.WriteAllBytes(NomeFirma, signature);
                RisFirma = ""true"";
            }
            catch (Exception Ex)
            {
                RisFirma = ""Errore in FirmaFile: "" + Ex.Message + "" Stack: "" + Ex.StackTrace;
            }
            return RisFirma;
        }

NB: I tried 2 version of OID
signer.DigestAlgorithm = new Oid(""2.16.840.1.101.3.4.2.1"");
signer.DigestAlgorithm = new Oid(""SHA256"");
All 2 give the same error.
I USE an INFOCERT USB KEY with driver bit4id (https://www.bit4id.com/it/4identity/) that is contained in USB Drive.
","I found this in internet, I try it and incredibly it worked!
Anyway the solution is bit more complex.
You have to use BouncyCastle (https://www.bouncycastle.org/) library.
But not the version avaiable, but a version that was modified by on user on another forum.
The link to the bouncy castle library modified is:
http://www.mediafire.com/download/uc63d1hepqyuhee/bccrypto-net-1.7-src-ext_with_CADES-BES.zip
You have to use crypto.dll library found in bin\release and reference it in your project.
Theese are all using I have now, probably not all are required for this specified case:
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Security.Cryptography;
using System.Security.Cryptography.Xml;
using System.Security.Cryptography.Pkcs;
using System.Security.Cryptography.X509Certificates;
using System.Xml;
using System.IO;
using System.Collections;
using CryptoUpgNet.NonExportablePK;
using Org.BouncyCastle.Asn1;
using Org.BouncyCastle.Asn1.Ess;
using Org.BouncyCastle.Cms;
using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Pkcs;
using Org.BouncyCastle.Security;

This is the function:
public byte[] FirmaFileBouncy(String NomeFile, X509Certificate2 cert, ref string RisFirma)
        {
            String NomeFirma = NomeFile + "".p7m"";

            try
            {
                SHA256Managed hashSha256 = new SHA256Managed();
                byte[] certHash = hashSha256.ComputeHash(cert.RawData);

                EssCertIDv2 essCert1 = new EssCertIDv2(new Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier(""2.16.840.1.101.3.4.2.1""), certHash);
                SigningCertificateV2 scv2 = new SigningCertificateV2(new EssCertIDv2[] { essCert1 });

                Org.BouncyCastle.Asn1.Cms.Attribute CertHAttribute = new Org.BouncyCastle.Asn1.Cms.Attribute(Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAASigningCertificateV2, new DerSet(scv2));
                Asn1EncodableVector v = new Asn1EncodableVector();
                v.Add(CertHAttribute);

                Org.BouncyCastle.Asn1.Cms.AttributeTable AT = new Org.BouncyCastle.Asn1.Cms.AttributeTable(v);
                CmsSignedDataGenWithRsaCsp cms = new CmsSignedDataGenWithRsaCsp();

                dynamic rsa = (RSACryptoServiceProvider)cert.PrivateKey;
                Org.BouncyCastle.X509.X509Certificate certCopy = DotNetUtilities.FromX509Certificate(cert);
                cms.MyAddSigner( rsa, certCopy,  ""1.2.840.113549.1.1.1"", ""2.16.840.1.101.3.4.2.1"", AT, null);

                ArrayList certList = new ArrayList();
                certList.Add(certCopy);

                Org.BouncyCastle.X509.Store.X509CollectionStoreParameters PP = new Org.BouncyCastle.X509.Store.X509CollectionStoreParameters(certList);
                Org.BouncyCastle.X509.Store.IX509Store st1 = Org.BouncyCastle.X509.Store.X509StoreFactory.Create(""CERTIFICATE/COLLECTION"", PP);

                cms.AddCertificates(st1);

                //mi ricavo il file da firmare
                FileInfo File__1 = new FileInfo(NomeFile);
                CmsProcessableFile file__2 = new CmsProcessableFile(File__1);
                CmsSignedData Firmato = cms.Generate(file__2, true);
                byte[] Encoded = Firmato.GetEncoded();

                File.WriteAllBytes(NomeFirma, Encoded);

                RisFirma = ""true"";

                return Encoded;

            } catch (Exception ex)  {

                RisFirma = ex.ToString();
                return null;
            }

        }

Edit: Using it repeatly with same certificate, it ask PIN only the first time. So is good to make multiple files at once with security standard active.
","1268","<c#><sha256><sign>","0","0","4","2018-10-19 17:15:12","","2","","6474201","","2018-10-11 12:31:49","2018-10-11 08:28:46",""
"52755574","Digital sign with sha256 with c#","here in Italy, we will need to digitally sign all invoices since January 2019.
I found a code that works well with sha-1, but I need to use sha256 as standard.
The code below, after successfully detect USB key, and ask me for the certificate to use try to sign ""NomeFile"" file After and output in ""NomeFile"".p7m, when the line
signedCms.ComputeSignature(signer,false);
runs, it happens:
1- if use sha-1 it asks me for the PIN and document is successfully created.
2- if use sha-256 don't ask for PIN and gives me Unknown error -1073741275 
I read a lot of posts that are all old (2011-2014). Other people have the same problem and seem that Microsoft has some bug using sha256.
Now we are at end of 2018 and I tried this code in .net 4, 4.6.1 and 4.7.2 but the error is the same.
Somebody can tell me if Microsoft corrects the problem with sha256 and what could be this strange error? (-1073741275) 
Error Stack
public String FirmaFile(String NomeFile, DateTime DataFirma, X509Certificate2 cert, out string RisFirma)
        {
            String NomeFirma = NomeFile + "".p7m"";
            RisFirma = """";

            try
            {


                // content contiene il file da firmare
                ContentInfo content = new ContentInfo((File.ReadAllBytes(NomeFile)));
                // assegniamo content ad un oggetto di tipo SignedCms
                SignedCms signedCms = new SignedCms(SubjectIdentifierType.IssuerAndSerialNumber, content, false);

                // si instanzia un oggetto CmsSigner che espone i metodi di firma.
                CmsSigner signer = new CmsSigner(cert);
                signer.IncludeOption = X509IncludeOption.EndCertOnly;

                //signer.DigestAlgorithm = new Oid(""2.16.840.1.101.3.4.2.1"");
                signer.DigestAlgorithm = new Oid(""SHA256"");
                signer.SignedAttributes.Add(new Pkcs9SigningTime(DataFirma));
                try
                {
                    // Viene calcolata la firma del file (in formato PKCS7)
                    signedCms.ComputeSignature(signer,false);
                }
                catch (CryptographicException CEx)
                {
                    RisFirma = ""Errore: "" + CEx.Message + "" Stack: "" + CEx.StackTrace;
                    return RisFirma;
                }
                // si pone il file firmato in un array.
                byte[] signature = signedCms.Encode();
                File.WriteAllBytes(NomeFirma, signature);
                RisFirma = ""true"";
            }
            catch (Exception Ex)
            {
                RisFirma = ""Errore in FirmaFile: "" + Ex.Message + "" Stack: "" + Ex.StackTrace;
            }
            return RisFirma;
        }

NB: I tried 2 version of OID
signer.DigestAlgorithm = new Oid(""2.16.840.1.101.3.4.2.1"");
signer.DigestAlgorithm = new Oid(""SHA256"");
All 2 give the same error.
I USE an INFOCERT USB KEY with driver bit4id (https://www.bit4id.com/it/4identity/) that is contained in USB Drive.
","To Grzegorz:
The source file is 5k
The correct signed file (IT01234567890_FPA01_2.xml.p7m is 8k
The file saved with your routine adding a 
File.WriteAllBytes(""c:\\temp\\IT01234567890_FPA01.xml.p7m"", wynBin);

after
byte[] wynBin = csp.SignHash(hash, CryptoConfig.MapNameToOID(""SHA256""));

is only 1kb and is not reckognized by Dike.
Sign not reckognized
Difference between files
","1268","<c#><sha256><sign>","0","0","4","2018-10-19 17:15:12","","2","","6474201","","2018-10-11 12:31:49","2018-10-11 08:28:46",""
"52755574","Digital sign with sha256 with c#","here in Italy, we will need to digitally sign all invoices since January 2019.
I found a code that works well with sha-1, but I need to use sha256 as standard.
The code below, after successfully detect USB key, and ask me for the certificate to use try to sign ""NomeFile"" file After and output in ""NomeFile"".p7m, when the line
signedCms.ComputeSignature(signer,false);
runs, it happens:
1- if use sha-1 it asks me for the PIN and document is successfully created.
2- if use sha-256 don't ask for PIN and gives me Unknown error -1073741275 
I read a lot of posts that are all old (2011-2014). Other people have the same problem and seem that Microsoft has some bug using sha256.
Now we are at end of 2018 and I tried this code in .net 4, 4.6.1 and 4.7.2 but the error is the same.
Somebody can tell me if Microsoft corrects the problem with sha256 and what could be this strange error? (-1073741275) 
Error Stack
public String FirmaFile(String NomeFile, DateTime DataFirma, X509Certificate2 cert, out string RisFirma)
        {
            String NomeFirma = NomeFile + "".p7m"";
            RisFirma = """";

            try
            {


                // content contiene il file da firmare
                ContentInfo content = new ContentInfo((File.ReadAllBytes(NomeFile)));
                // assegniamo content ad un oggetto di tipo SignedCms
                SignedCms signedCms = new SignedCms(SubjectIdentifierType.IssuerAndSerialNumber, content, false);

                // si instanzia un oggetto CmsSigner che espone i metodi di firma.
                CmsSigner signer = new CmsSigner(cert);
                signer.IncludeOption = X509IncludeOption.EndCertOnly;

                //signer.DigestAlgorithm = new Oid(""2.16.840.1.101.3.4.2.1"");
                signer.DigestAlgorithm = new Oid(""SHA256"");
                signer.SignedAttributes.Add(new Pkcs9SigningTime(DataFirma));
                try
                {
                    // Viene calcolata la firma del file (in formato PKCS7)
                    signedCms.ComputeSignature(signer,false);
                }
                catch (CryptographicException CEx)
                {
                    RisFirma = ""Errore: "" + CEx.Message + "" Stack: "" + CEx.StackTrace;
                    return RisFirma;
                }
                // si pone il file firmato in un array.
                byte[] signature = signedCms.Encode();
                File.WriteAllBytes(NomeFirma, signature);
                RisFirma = ""true"";
            }
            catch (Exception Ex)
            {
                RisFirma = ""Errore in FirmaFile: "" + Ex.Message + "" Stack: "" + Ex.StackTrace;
            }
            return RisFirma;
        }

NB: I tried 2 version of OID
signer.DigestAlgorithm = new Oid(""2.16.840.1.101.3.4.2.1"");
signer.DigestAlgorithm = new Oid(""SHA256"");
All 2 give the same error.
I USE an INFOCERT USB KEY with driver bit4id (https://www.bit4id.com/it/4identity/) that is contained in USB Drive.
","The error and symptom seem to indicate that the CSP (Cryptographic Service Provider) which is doing the signing operation doesn't support SHA-2.  If it's working in BouncyCastle then they are seemingly exporting the private key and re-importing it into their software provider.
In .NET 4.7.2 you could try the following:
...
try
{
    // Viene calcolata la firma del file (in formato PKCS7)
    signedCms.ComputeSignature(signer,false);
}
catch (CryptographicException CEx)
{
    try
    {
        // Try re-importing the private key into a better CSP:
        using (RSA tmpRsa = RSA.Create())
        {
            tmpRsa.ImportParameters(cert.GetRSAPrivateKey().ExportParameters(true));

            using (X509Certificate2 tmpCertNoKey = new X509Certificate2(cert.RawData))
            using (X509Certificate2 tmpCert = tmpCertNoKey.CopyWithPrivateKey(tmpRsa))
            {
                signer.Certificate = tmpCert;
                signedCms.ComputeSignature(signer,false);
            }
        }
    }
    catch (CryptographicException)
    {
        // This is the original exception, not the inner one.
        RisFirma = ""Errore: "" + CEx.Message + "" Stack: "" + CEx.StackTrace;
        return RisFirma;
    }
}

If the certificate is actually being loaded from a PFX file on the USB device, then the problem is that the PFX specifies to use an older software CSP which predated SHA-2.  Getting the PFX regenerated to use the newest RSA CSP would also solve the problem.
","1268","<c#><sha256><sign>","0","0","4","2018-10-19 17:15:12","","2","","6474201","","2018-10-11 12:31:49","2018-10-11 08:28:46",""
"20725481","Convert HMAC-SHA256 function from Java to Ruby","I'm trying to convert this hashing function to Ruby from Java.
Java code:
  Mac localMac = ""HMAC-SHA256"";
  String str1 = ""a4d1b77bbb1a4a5ca695ad72c84b77e5"";
  localMac.init(new SecretKeySpec(str1.getBytes(""UTF-8""), localMac.getAlgorithm()));
  byte[] arrayOfByte = localMac.doFinal(""{""_uid"":""3396112"",""_csrftoken"":""a23482932482sdsf4428"",""media_id"":""616150302791211280_187036957""}"");
  BigInteger localBigInteger = new BigInteger(1, arrayOfByte);
  String str3 = String.format(""%0"" + (arrayOfByte.length << 1) + ""x"", new Object[] { localBigInteger });
  return str3;

Ruby code:
require 'openssl'
require 'base64'

secret = ""a4d1b77bbb1a4a5ca695ad72c84b77e5""
digest = OpenSSL::Digest::Digest.new('sha256')
hash  = OpenSSL::HMAC.hexdigest(digest, secret,'{""_uid"":""3396112"",""_csrftoken"":""a23482932482sdsf4428"",""media_id"":""616150302791211280_187036957""}')
p hash

For some reason the hashes are never the same. Any help?
","You can do it like this
public static void main(String[] args) {
  String str1 = ""a4d1b77bbb1a4a5ca695ad72c84b77e5"";
  byte[] keyBytes = str1.getBytes();
  SecretKeySpec localMac = new SecretKeySpec(
      keyBytes, ""HmacSHA256"");
  final String inputStr = ""{\""_uid\"":\""3396112\"",\""_csrftoken\"":""
      + ""\""a23482932482sdsf4428\"",""
      + ""\""media_id\"":\""616150302791211280_187036957\""}"";
  try {
    Mac mac = Mac.getInstance(""HmacSHA256"");
    mac.init(localMac);
    // Compute the hmac on input data bytes
    byte[] arrayOfByte = mac.doFinal(inputStr
        .getBytes());
    BigInteger localBigInteger = new BigInteger(1,
        arrayOfByte);
    String str3 = String.format(""%0""
        + (arrayOfByte.length << 1) + ""x"",
        new Object[] { localBigInteger });
    System.out.println(str3);
  } catch (InvalidKeyException e) {
    e.printStackTrace();
  } catch (NoSuchAlgorithmException e) {
    e.printStackTrace();
  } catch (IllegalStateException e) {
    e.printStackTrace();
  }
}

Which will output e48d690dc6825e8f2895845be112fb1e5ee22f5283f2243512d6cca2714e8b35.
$ cat test.rb
#!/usr/bin/env ruby

require 'openssl'
require 'base64'

secret = ""a4d1b77bbb1a4a5ca695ad72c84b77e5""
digest = OpenSSL::Digest::Digest.new('sha256')
hash  = OpenSSL::HMAC.hexdigest(digest, secret,'{""_uid"":""3396112"",""_csrftoken"":""a23482932482sdsf4428"",""media_id"":""616150302791211280_187036957    ""}')
p hash
$ ./test.rb
""e48d690dc6825e8f2895845be112fb1e5ee22f5283f2243512d6cca2714e8b35""

","1268","<java><ruby><hmac><sha256>","-1","2","1","2013-12-22 02:28:46","","1","4","","","","2013-12-22 02:00:54",""
"31604699","c# SHA-256 Hash","I'm trying to use elastic transcoder of Amazon.
Here I need to sha-256 hash a string;
http://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html
I have tried any ways I have found on the net but I couldn't find the same result as page and some online hashing sites provides.
Here is the string to hash which you can find from the link above;
POST
/

content-type:application/x-www-form-urlencoded; charset=utf-8
host:iam.amazonaws.com
x-amz-date:20110909T233600Z

content-type;host;x-amz-date
b6359072c78d70ebee1e81adcbab4f01bf2c23245fa365ef83fe8f1f955085e2

Here is the expected result:

3511de7e95d28ecd39e9513b642aee07e54f4941150d8df8bf94b328ef7e55e2

I have tried many c# method but couldn't get this result;
but these online sites provides same results;
http://crypo.in.ua/tools/eng_sha256.php
Here is one of my method;
public static string getHashSha256(string text)
    {
        byte[] bytes = Encoding.UTF8.GetBytes(text);
        SHA256Managed hashstring = new SHA256Managed();
        byte[] hash = hashstring.ComputeHash(bytes);
        string hashString = string.Empty;
        foreach (byte x in hash)
        {
            hashString += String.Format(""{0:x2}"", x);
        }
        return hashString;
    }

","removing \r is the solution
s = s.Replace(""\r"", """");
","1257","<c#><hash><sha256>","1","0","1","2015-07-24 07:56:23","31605085","6","","2307070","","2015-07-24 07:36:15","2015-07-24 07:34:10",""
"31219009","Fast and light JavaScript SHA-256 secure hash implementation","I'm looking for a hash implementation that is;

secure (practically impossible to invert)
fast (few ms)
light (few KB)
runs in the browser

Ideally a SHA-256 implementation, since it is widely used and therefore widely tested against.
","Doing some tests suggests that forge is the fastest SHA-256 JavaScript implementation.
It is 284KB big but extracting the SHA-256 related code reduces the size to 4.5 KB, see https://github.com/brillout/forge-sha256.
","1255","<javascript><security><browser><sha><sha256>","0","1","1","2015-07-22 12:10:14","31219060","11","2","270274","","2015-07-22 12:06:23","2015-07-04 09:18:42","2015-07-13 00:23:07"
"28216458","laravel verify shopify webhook","How can I verify my shopify webhooks in laravel?
Currently I'm doing the following:
//Validate secret 
    if ( Request::header( 'X-Shopify-Hmac-Sha256' ) ) {
        $hmac_header = Request::header( 'X-Shopify-Hmac-Sha256' );
        $data = Request::json();
        $calculated_hmac = base64_encode( hash_hmac( 'sha256', $data, Config::get( 'constants.SHOPIFY_APP_SECRET' ), true ) );
        if ( $hmac_header != $calculated_hmac ) {
            return Response::json( array(
                    'error' => true,
                    'message' => ""invalid secret"" ),
                403 );
        }
    }else {
        return Response::json( array(
                'error' => true,
                'message' => ""no secret"" ),
            403 );
    }

But it fails with the following message:
#0 [internal function]: Illuminate\Exception\Handler->handleError(2, 'hash_hmac() exp...', '/Users/JS/Sites...', 58, Array)
#1 /Users/JS/Sites/xxx/api/app/controllers/CustomerController.php(58): hash_hmac('sha256', Object(Symfony\Component\HttpFoundation\ParameterBag), 'xxxxxxxxxx...', true)

I suspect it has sth to do with the way I get the request data: 
$data = Request::json();

Does anyone have a solution? Thx!
","Follow the example given in the Shopify docs: https://docs.shopify.com/api/webhooks/using-webhooks#verify-webhook
Replace 
$data = Request::json();

with 
$data = file_get_contents('php://input');

You can still use Request::json() elsewhere to get a ParameterBag for processing data from the webhook.
","1248","<laravel><shopify><sha256><webhooks><verify>","0","3","2","2017-12-29 12:59:33","29098031","0","","2874329","","2015-05-28 00:34:50","2015-01-29 13:53:55",""
"28216458","laravel verify shopify webhook","How can I verify my shopify webhooks in laravel?
Currently I'm doing the following:
//Validate secret 
    if ( Request::header( 'X-Shopify-Hmac-Sha256' ) ) {
        $hmac_header = Request::header( 'X-Shopify-Hmac-Sha256' );
        $data = Request::json();
        $calculated_hmac = base64_encode( hash_hmac( 'sha256', $data, Config::get( 'constants.SHOPIFY_APP_SECRET' ), true ) );
        if ( $hmac_header != $calculated_hmac ) {
            return Response::json( array(
                    'error' => true,
                    'message' => ""invalid secret"" ),
                403 );
        }
    }else {
        return Response::json( array(
                'error' => true,
                'message' => ""no secret"" ),
            403 );
    }

But it fails with the following message:
#0 [internal function]: Illuminate\Exception\Handler->handleError(2, 'hash_hmac() exp...', '/Users/JS/Sites...', 58, Array)
#1 /Users/JS/Sites/xxx/api/app/controllers/CustomerController.php(58): hash_hmac('sha256', Object(Symfony\Component\HttpFoundation\ParameterBag), 'xxxxxxxxxx...', true)

I suspect it has sth to do with the way I get the request data: 
$data = Request::json();

Does anyone have a solution? Thx!
","Here's my handler, works good:
        public function handle($request, Closure $next)
        {
            $data = file_get_contents('php://input');
            $calculated_hmac = base64_encode(hash_hmac('sha256', $data, [SECRET], true));
            if (!$hmac_header =  $request->header('X-Shopify-Hmac-Sha256') or 
    $hmac_header != $calculated_hmac or $request->email == 'jon@doe.ca') {

                return Response::json(['error' => true], 403);
            }

            return $next($request);
        }

note that:
$request->email == 'jon@doe.ca' for case if there is not received test hooks for some reason
[SECRET] is the code from the store notifications settings under the webhook callback URL (All your webhooks will be signed with [SECRET] so you can verify their integrity.)
","1248","<laravel><shopify><sha256><webhooks><verify>","0","0","2","2017-12-29 12:59:33","29098031","0","","2874329","","2015-05-28 00:34:50","2015-01-29 13:53:55",""
"44963287","How to reproduce java MessageDigest SHA-256 hash in PHP?","I currently have been given the following java code snippet as an example of how to calculate a hash based on a supplied 'in' and 'salt' variable. In these examples the variables are hardcoded for testing:
package generatehash;

import java.security.MessageDigest;
import sun.misc.BASE64Encoder;

public class GenerateHash {

    public static void main(String[] args) 
    {
        String in = ""abcdef12345"";
        String salt = ""test1"";
        try {
            MessageDigest hash = MessageDigest.getInstance(""SHA-256"");
            byte[] digest = hash.digest((in + salt).getBytes());
            String out = new BASE64Encoder().encode(digest);
            System.out.println(""Calculated: "" + out);
        } catch(java.security.NoSuchAlgorithmException e) {
            System.err.println(""SHA-256 is not a valid message digest algorithm. "" + e.toString());
        }
    }
}

The output here is:

Calculated: bfiUcT46ftaC76MCbGbpCFisFSlEY96/4CBwdtznaCE=

When attempting to run the PHP equivalent I tried the following:
<?php
ini_set('display_errors','On');
error_reporting(E_ALL);

$in = 'abcdef12345';
$salt = 'test1';

$out = hash('sha256', $in.$salt);

echo 'Calculated: ' . $out;

The output here is completely different:

Calculated:
  6df894713e3a7ed682efa3026c66e90858ac15294463debfe0207076dce76821

I've tried a number of variations but not hitting the mark. Is there something I'm missing here? Any help would be greatly appreciated.
","The Java result is in base64 while the php result is in hex. You missed the step of base64 encoding the raw PHP result .
$in = 'abcdef12345';
$salt = 'test1';

$out = hash('sha256', $in.$salt,true); //3rd parameter says return raw result
echo 'Calculated: ' . base64_encode($out);

Outputs:

Calculated: bfiUcT46ftaC76MCbGbpCFisFSlEY96/4CBwdtznaCE=

Example:
http://sandbox.onlinephpfunctions.com/code/bb12ed98c16e2b732f29292da75aeebc36da2d48
","1245","<java><php><security><hash><sha256>","0","1","1","2017-07-07 05:54:29","44963428","0","3","289430","","2017-07-07 05:54:29","2017-07-07 05:41:21",""
"47935981","How to transform the hex signature into a binary signature prior to verification","I need signature data in hex form, so I use:
openssl dgst -sha256 -hex -sign ./id_rsa my.data > my.signature
The openssl docs note that:

Hex signatures cannot be verified using openssl. Instead, use ""xxd -r"" or similar program to transform the hex signature into a binary signature prior to verification. Source

But, when I try to do this ...
echo ""$(cat my.signature)"" | xxd -r -p > binary.signature
... I get nothing
Can anyone see what I'm doing wrong?
","Dan, the hex signature file is not a plain hex string. It starts with non-hex prefix that xxd failes to parse. Something like RSA-SHA256(my.data)=. You need to remove it before verification.
cat my.signature | sed -e 's/.*= \([^ ]\+\)$/\1/' | xxd -r -p > binary.signature

One little tip. If you used ssh-keygen to create file id_rsa, then corresponding id_rsa.pub is not suitable for openssl, it is in ssh format. You need to generate a public key in PEM format. 
openssl rsa -in id_rsa -pubout > id_rsa.pub.pem

This is the right format for verification.
openssl dgst -verify id_rsa.pub.pem -signature binary.signature my.data
-> Verified OK

","1244","<hex><sha256><xxd>","2","3","1","2017-12-22 06:34:06","","1","","608639","","2017-12-22 06:34:06","2017-12-22 04:50:31",""
"49298903","how to hash Password and store in firebase","I have been trying to make a registration page. I'm using email authentication. My registered data is stored in a firebase database.
For security purposes, I want my password string to be hidden. So for that I'm using SHA-256 to hash but it's not working. 
Here is my code:
 protected void setUpUser() {
    user = new User();
    user.setName(name.getText().toString().trim());
    user.setPhoneNumber(phoneNumber.getText().toString().trim());
    user.setAddress(address.getText().toString().trim());
    user.setEmail(email.getText().toString().trim());
    user.setPassword(password.getText().toString().trim());
}


@Override
public void onClick(View v) {

    String pass = password.getText().toString();

    MessageDigest digest = null;
    try {
        digest = MessageDigest.getInstance(""SHA-256"");
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    }
    byte[] hash = digest.digest(pass.getBytes(StandardCharsets.UTF_8));

    mref = new Firebase(""https://tango-3a561.firebaseio.com/"");
    createNewAccount(email.getText().toString(), hash);
}



private void createNewAccount(String email, final byte[] password) {
    Log.d(TAG, ""createNewAccount:"" + email);
    if (!validateForm()) {
        return;
    }
    //This method sets up a new User by fetching the user entered details.
    setUpUser();
    //This method  method  takes in an email address and password, validates them and then creates a new user
    // with the createUserWithEmailAndPassword method.
    // If the new account was created, the user is also signed in, and the AuthStateListener runs the onAuthStateChanged callback.
    // In the callback, you can use the getCurrentUser method to get the user's account data.

    showProgressDialog();
    mAuth.createUserWithEmailAndPassword(email, String.valueOf(password))
            .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {
                @Override
                public void onComplete(@NonNull Task<AuthResult> task) {


                    Log.d(TAG, ""Register Successfully "" + task.isSuccessful());
                    hideProgressDialog();

                     // If sign in fails, display a message to the user. If sign in succeeds
                    // the auth state listener will be notified and logic to handle the
                    // signed in user can be handled in the listener.

                    if (!task.isSuccessful()) {

                       /* Toast.makeText(RegisterActivity.this, ""Registration failed."", Toast.LENGTH_SHORT).show();
                        hideProgressDialog();*/

                        if (task.getException() instanceof FirebaseAuthUserCollisionException){

                            Toast.makeText(RegisterActivity.this,""User with this email already exist."",Toast.LENGTH_SHORT).show();
                        }else {
                            Toast.makeText(RegisterActivity.this, ""Register Successful."", Toast.LENGTH_SHORT).show();
                            hideProgressDialog();
                        }

                      /*  if (password.length() < 6) {

                            Toast.makeText(getApplicationContext(), ""minimum password!"", Toast.LENGTH_SHORT).show();
                            hideProgressDialog();
                        } else {
                            Toast.makeText(getApplicationContext(), ""Registration failed.!"", Toast.LENGTH_SHORT).show();
                            hideProgressDialog();
                        }*/
                    } else {
                        onAuthenticationSuccess(task.getResult().getUser());
                        Toast.makeText(RegisterActivity.this, ""Register Successful."", Toast.LENGTH_SHORT).show();
                    } hideProgressDialog();
                }
            });

}


private void onAuthenticationSuccess(FirebaseUser mUser) {
    // Write new user
    saveNewUser(mUser.getUid(), user.getName(), user.getPhoneNumber(),user.getAddress(), user.getEmail(), user.getPassword());
    signOut();
    // Go to LoginActivity
    Intent i =new Intent(RegisterActivity.this, LoginActivity.class);
    startActivity(i);
}


private void saveNewUser(String userId, String name, String phone, String address, String email, String password) {

    User user = new User(userId,name,phone,address,email,password);

    mref.child(""Users"").child(name).setValue(user);
}



private void signOut() {
    mAuth.signOut();
}
//This method, validates email address and password
private boolean validateForm() {
    boolean valid = true;

    String userName = name.getText().toString();
    if (TextUtils.isEmpty(userName)) {
        name.setError(""Required."");
        valid = false;
    } else {
        name.setError(null);
    }

    String userEmail = email.getText().toString();
    if (TextUtils.isEmpty(userEmail)) {
        email.setError(""Required."");
        valid = false;
    } else {
        email.setError(null);
    }

    if (!Patterns.EMAIL_ADDRESS.matcher(userEmail).matches()) {
        email.setError(""Invalid Mail Address."");
        valid = false;
    } else {
        email.setError(null);
    }

    String userPassword = password.getText().toString();
    if (TextUtils.isEmpty(userPassword)) {
        password.setError(""Required."");
        valid = false;
    } else {
        password.setError(null);
    }

    String userPhoneNumber = phoneNumber.getText().toString();
    if (TextUtils.isEmpty(userPhoneNumber)){
        phoneNumber.setError(""Required"");
        valid = false;
    }else {
        phoneNumber.setError(null);
    }

    if (phoneNumber.length() < 10){
        phoneNumber.setError(""Should be 10 Digit"");
        valid = false;
    }else {
        phoneNumber.setError(null);
    }

    String userAddress = address.getText().toString();
    if (TextUtils.isEmpty(userAddress)){
        address.setError(""Required"");
        valid = false;
    }else {
        address.setError(null);
    }

  /*  if(!Patterns.EMAIL_ADDRESS.matcher(userEmail).matches()){
        Toast.makeText(getApplicationContext(),""please enter valid email"",Toast.LENGTH_LONG).show();
    }*/

  /* if (Patterns.PHONE.matcher(userPhoneNumber).matches()){
        Toast.makeText(getApplicationContext(),""please enter valid mobile no"",Toast.LENGTH_LONG).show();
    }*/

    if (userName.isEmpty() && userEmail.isEmpty() && userPassword.isEmpty() && userAddress.isEmpty() && userPhoneNumber.isEmpty()){
        Toast.makeText(getApplicationContext(),""all fields are mandatory"",Toast.LENGTH_LONG).show();
    }

    return valid;
}


public void showProgressDialog() {
    if (mProgressDialog == null) {
        mProgressDialog = new ProgressDialog(this);
        mProgressDialog.setMessage(""Loading"");
        mProgressDialog.setIndeterminate(true);
    }
    mProgressDialog.show();
}

public void hideProgressDialog() {
    if (mProgressDialog != null && mProgressDialog.isShowing()) {
        mProgressDialog.dismiss();
    }
}

@Override
public void onPointerCaptureChanged(boolean hasCapture) {

}
}


As you can see my password is not hashed.
","i have solved this type of issue with this code, check it out
public static String sha256(String base) {
    try{
        MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
        byte[] hash = digest.digest(base.getBytes(""UTF-8""));
        StringBuffer hexString = new StringBuffer();

        for (int i = 0; i < hash.length; i++) {
            String hex = Integer.toHexString(0xff & hash[i]);
            if(hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }

        return hexString.toString();
    } catch(Exception ex){
       throw new RuntimeException(ex);
    }
}

then you just call the method and pass the password field
String newPass =  sha256(pass).toString();

Edit: at your question, this would solve the problem
@Override
public void onClick(View v) {

    String pass = password.getText().toString();
    String newPass =  sha256(pass);

    mref = new Firebase(""https://tango-3a561.firebaseio.com/"");
    createNewAccount(email.getText().toString(), newPass );
}

change your method params 
private void createNewAccount(String email,String pass)....

hope it works, happy coding
","1220","<android><firebase><hash><firebase-authentication><sha256>","-1","0","1","2018-03-15 13:25:06","","1","","4638376","","2018-03-15 13:25:06","2018-03-15 11:58:25",""
"51953592","SHA256 is undefined","I was experimenting with CryptoJS library and came across with the problem that my imported hash function isn't visible inside a class. Here's my code:
CryptoJS = require('crypto-js');
SHA256 = require('crypto-js/sha256');

class trCrypt {
  constructor(input,key) {
this.input = input;
this.key = SHA512(key).toString();
  }
  encrypt(){
    this.step1 = CryptoJS.AES.encrypt(this.input,this.key);
    return this.step1.toString()
  }
  decrypt(){
    const bytes =  CryptoJS.AES.decrypt(this.step1);
    this.dec1 = bytes.toString(CryptoJS.enc.Utf8);
    return this.dec1
  }
}
a = new trCrypt('hello','world');
console.log(a.encrypt());
console.log(a.decrypt());

[SOLVED] Thanks for answer!
","In your code you've imported the CryptoJs module and the SHA256 function, but you've not imported the SHA512 function.
Try adding:
SHA512 = require('crypto-js/sha512');

On top of the script
","1218","<javascript><node.js><aes><sha256><cryptojs>","0","2","1","2018-08-22 10:21:03","51953666","3","","9950309","","2018-08-22 10:21:03","2018-08-21 17:06:10",""
"5033536","How to compare user input with db password when using PHP's sha256 hash method?","Say I set a new users password like this:
$salt = random_string(40) // some method that spits out a random
                          // 40 alpha-numeric character string

$password = hash('sha256', $_POST['password'] . $salt);

How do I then compare the users input to his hashed db password when he wants to log in?
","having stored the salt, you apply the same algorithm to what the user posts and compare the results with the stored password.
","1215","<php><hash><sha256>","1","1","2","2011-02-17 19:27:15","5033587","1","","","","","2011-02-17 19:21:25",""
"5033536","How to compare user input with db password when using PHP's sha256 hash method?","Say I set a new users password like this:
$salt = random_string(40) // some method that spits out a random
                          // 40 alpha-numeric character string

$password = hash('sha256', $_POST['password'] . $salt);

How do I then compare the users input to his hashed db password when he wants to log in?
","At login time,

Fetch the password hash and the salt you stored in the database at registration time (using the account name, or email-address)
Hash the provided password with the same method and the same salt
Compare the hash you get with the hash you stored. If they are the same, the password matches.

The key here is to store the salt.
","1215","<php><hash><sha256>","1","3","2","2011-02-17 19:27:15","5033587","1","","","","","2011-02-17 19:21:25",""
"32638581","Can I hash two strings into one hash?","I am pretty new to Python and wanted to create some code which hashed together two strings. In particular for my case I wanted to hash the hash of a file and a Bitcoins Blocks hash. The code bellow obviously doesn't work as sha256() takes only one argument. Do you guys know anyway around this? 
Thanks,
from __future__ import print_function
import blocktrail, time, csv, hashlib, sys

client = blocktrail.APIClient(api_key=""x"", api_secret=""x"", network=""BTC"", testnet=False)
address = client.address('x')

latest_block = client.block_latest()
hash_list = []
h = latest_block['hash']
sha256 = hashlib.sha256()
BUF_SIZE = 65536
print(""test"")

with open('entries#x.csv', 'rb') as entriesfile:
    buf = entriesfile.read(BUF_SIZE)
    while len(buf) > 0:
        sha256.update(buf)
        buf = entriesfile.read(BUF_SIZE)
    print(sha256.hexdigest())

entryhash = sha256.hexdigest()

hashofhe = hashlib.sha256(b'entryhash', 'h')

","Just concatenate the two strings then hash that.
","1208","<python><hash><sha256>","3","2","1","2015-09-17 19:37:00","32638616","6","","5120590","","2015-09-17 19:37:00","2015-09-17 19:33:59",""
"35970702","Converting encryption password from MD5 to SHA-256, does my protocol has a flaw?","I'm working on a website (PHP + MySQL) that I've got to upgrade. Passwords are stored in the database in MD5, and I'd like it to be something more secure, like SHA-256.
I've already red this question about ""converting"" password hashes, but I got an other idea, and I'd like to know if it brings a security problem or not.
Currently, the passwords are checked in php by hashing (in MD5) the given password and compare it with the hash stored in database, ie: if(md5($password) == $hash)
Let's assume that I hash all the MD5 hashes in SHA-256. I'd have the sha-256 hash of a md5 hash.
Side note: I know it's not more secure to rehash a hash, that's not the point of my question
When a user wants to connect, I'd just have to change the md5($pass) in hash('sha256', md5($password), false) to make it match the value stored in database (assuming $password is the right one)
It seemed a good idea to me as I don't need to keep track of the md5 hash after conversion, ad this doesn't need me to create any new column in my table. I know that this is not going to give me the SHA-256 hash of the original password stored with md5 hash, but this is not my goal. It's just to change the encryption method. Moreover, brute-forcing it seems inefficient, as it is very unlikely that dictionary would have hashes of words...
Does this way of doing it is flawed?
","Simple hashing of passwords is insufficient, it is subject to rainbow tables and is to fast.
Instead in PHP use Safe Password Hashing: password_hash() and password_verify() or a comparable function such as PBKDF2, Bcrypt or script. These function are more secure because of two additions: a repetition count and a random salt. It's all about raising the work factor the attacker must perform.
After all, the point is to have a secure system. Just making it more inconvenient for an attacker is not the answer, there are hacking programs out there to take advantage of poor password security.
","1199","<md5><sha256><password-encryption>","0","3","1","2016-03-13 17:22:35","","4","","","","","2016-03-13 13:17:45",""
"29321108","Crack sha256 when you know the pass form","Is it possible to write a code that can crack the sha256 hash when you know the form of password? For example the password form is *-********** which is 12-13 characters long and:

The first char is one number from 1 to 25
Second one is hyphen 
In each char from the third one to the end, you can put a...z, A...Z and 0...9

After guessing each pass, code converts the pass to sha256 and see whether the result hash is equal to our hash or not and then print the correct pass. 
I know all possible numbers is a big number (26+26+10)^10 but I want to know that:

Is it possible to write such code?
If yes, is it possible to run whole code in less than one day (because I think it takes a lot of time to complete the whole code)?
Since I can't ask you to write a code for me, how and where can I ask for this code?

","You cannot ""crack"" a SHA256 hash no matter how much information you know about the plaintext (assuming by crack you mean derive the plaintext from the hash). Even if you knew the password you could not determine any procedure for reversing the hash. In technical terms, there is no known way to perform a preimage attack on a SHA256 hash.
That means you have to resort to guessing or brute forcing the password:
You have a prefix, which can be any value in [1-25]- and 10 additional characters in [a-zA-Z0-9]. That means the total number of possible passwords is: 25 * 62^10 or 20,982,484,146,708,505,600.
If you were able to compute and check a billion passwords per second it would take you 20,982,484,146 seconds to generate every possible hash. If you start now you'll be finished in about 665 years.
If you are able to leverage some more computing power and generate a trillion hashes per second it would only take a bit more than half a year. The good news is that computing hashes can be done in parallel, so it is easy to utilize multiple machines. The bad news is that kind of computing power isn't going to be cheap.
To answer your questions:

Is it possible to write such code? It is possible to write a program that will iterate over the entire range of possible passwords and check it against the hash(es) you want to determine the plaintext for.
If yes, is it possible to run whole code in less than one day. Yes, if you can compute and check around 10^15 hashes per second.
How and where can I ask for this code? This is the least of your problems.

Fortunately, since bitcoin uses sha256, it is pretty easy to find rough numbers on the amount of computing power it takes to generate the number of hashes you need. 
If the numbers in this article are correct a Raspberry Pi can generate 2*10^5 hashes per second. I believe the newer Raspberry Pis are more powerful than that so I'm going to double that to 4*10^5. You need to generate about 10^15 hashes per second to be done in less than a day.
You're going to need 250,000,000 Raspberry Pis.
","1197","<sha256>","-4","4","1","2015-03-28 20:23:20","","1","","1565335","","2015-03-28 19:43:37","2015-03-28 18:42:33",""
"51728649","How to generate an Azure SAS token via Javascript (node.js)","I am trying to generate a valid SAS token (shared access signatures) to connect to the Azure IoT Hub,  but I keep getting the error Connection refused: Not authorized when using the token.
I know the way I am connecting is working because when using a SAS token generated with the Microsoft Device Explorer (https://github.com/Azure/azure-iot-sdk-csharp/tree/master/tools/DeviceExplorer) it works as expected.
To write the Javascript code I started from this documentation https://docs.microsoft.com/en-us/azure/storage/common/storage-dotnet-shared-access-signature-part-1 comparing with some working implementations:

in Python: https://github.com/Azure/azure-sdk-for-python/blob/master/azure-servicebus/azure/servicebus/servicebusservice.py
in Go/Golang: https://github.com/openenergi/go-event-hub/blob/master/msauth/sasl.go

What am I doing wrong in the following Javascript implementation? I think it may be related to the SHA256 signature combined with URL escaping the string but I am not sure how to test/verify this.
const crypto = require('crypto');

// on the Azure Portal:
// sharedAccessKeyName is the ""policy"" field
// sharedAccessKeyValue is the ""primary key""

const sign = (iotHubName, expirtyDeltaInSecondsFromNow, sharedAccessKeyName, sharedAccessKeyValue) => {
  // URL encode the IoT Hub host
  const encodedSasUrl = encodeURI(`${iotHubName}.azure-devices.net`.toLowerCase());
  // calculate the expiry end datetime as an epoch
  const expiry = parseInt(Date.now() / 1000 + expirtyDeltaInSecondsFromNow);
  // combine the previous two pieces of information
  const stringToSign = `${encodedSasUrl}\n${expiry}`;
  // sign the string using the primary key (sharedAccessKeyValue) and SHA256
  const hmac = crypto.createHmac('sha256', sharedAccessKeyValue);
  hmac.update(stringToSign);
  const hash = hmac.digest('hex');
  // encode the signed hash to base64 (making sure it's URL escaped)
  const encodedSignature = hash.toString('base64');
  // put all together into the SAS token
  const sasToken = `SharedAccessSignature sig=${encodedSignature}&se=${expiry}&skn=${sharedAccessKeyName}&sr=${encodedSasUrl}`;
  console.log(""sasToken:"", sasToken);
  return sasToken;
}

","Here is an example of generating SAS token via node.js.
var generateSasToken = function(resourceUri, signingKey, policyName, expiresInMins) {
    resourceUri = encodeURIComponent(resourceUri);

    // Set expiration in seconds
    var expires = (Date.now() / 1000) + expiresInMins * 60;
    expires = Math.ceil(expires);
    var toSign = resourceUri + '\n' + expires;

    // Use crypto
    var hmac = crypto.createHmac('sha256', new Buffer(signingKey, 'base64'));
    hmac.update(toSign);
    var base64UriEncoded = encodeURIComponent(hmac.digest('base64'));

    // Construct autorization string
    var token = ""SharedAccessSignature sr="" + resourceUri + ""&sig=""
    + base64UriEncoded + ""&se="" + expires;
    if (policyName) token += ""&skn=""+policyName;
    return token;
};


What am I doing wrong in the following Javascript implementation?

I am not an expert on javascript(node.js). Maybe you can figure it out via comparing above code and yours.
","1195","<node.js><azure><urlencode><sha256><azure-iot-hub>","1","1","1","2018-08-08 03:43:47","51738323","2","","1264920","","2018-08-07 14:11:53","2018-08-07 14:01:27",""
"34327341","TLS1.2 TLS hello rejected with a TCP reset","We recently faced an issue when one of our clients got a TCP reset from our server every time they sent a TLS1.2 Client Hello.
The SChannel error logged was :
""An TLS1.2 connection request was recieved from a remote client application, but none of the cipher suites supported by the client application are supported by the server. The SSL connection request has failed.""
Our server has SHA256 certificate.
","""When failing clients offers TLS1.2 without signature_algorithms extension, SChannel server assumes that this client only understands SHA1. If the SChannel server only has a SHA256 certificate, it will terminate the handshake. "" When we asked the client to add signature_algorithms extension to their client hello this issue was resolved.
","1189","<sha256><tls1.2>","0","0","1","2015-12-22 04:02:29","","1","1","","","","2015-12-17 05:36:54",""
"24541366","How can I convert Lua HMAC SHA256 digest to a hexadecimal string (creates Facebook appsecret_proof token)?","I've been spending time reading about the HTTPLuaModule for Nginx and find that there are some great ways developers have been able to SHA256 sign Amazon Web Services using a key and string. As a junior developer who is a Lua noob, I would like to use the HTTPLuaModule to generate Facebook appsecret_proof tokens. Currently I found that there is the LuaCrypto module for Lua to generate HMAC via SHA256 but it doesn't exactly match the implementation needed for Facebook's token: 

digest = crypto.hmac.digest('sha256', user-access-token, app-secret, true) ## what next to convert digest into hexadecimal string?

Unlike in the Amazon example above, the token doesn't need to be Base64 encode but instead the HMAC needs to be turned into a string of double length using only hexadecimal digits (hence hexidecimal!). 
In Python I can obtain the token with:

import hashlib
import hmac
token = hmac.new(app-secret, user-access-token, hashlib.sha256).hexadecimal()

Thoughts? Any better modules that have methods to convert digest's into hexadecimal strings?
","Should be as simple as:
local secretProof = digest:final()

source: http://mkottman.github.io/luacrypto/manual.html#reference
","1179","<facebook-graph-api><lua><hex><sha><sha256>","1","0","1","2014-07-03 00:11:54","24542167","0","","3011436","","2014-07-02 21:33:50","2014-07-02 21:30:59",""
"21851534","How to convert 32 bytes to a 256bit integer?","I'm busy porting a c++ app to c#.
The app contains code that hashes data into a 256bit integer.
uint256 res = data->GetHash();

The GetHash function looks like this:
uint256 hash;
SHA256((unsigned char*)&data, sizeof(data), (unsigned char*)&hash);
return hash;

In c# I use the BigMath library but get a different value to the c++ app.
My c# code looks like this:
SHA256Managed sha256 = new SHA256Managed();

byte[] bytes = GetByteArray(data);

Int256 hash256 = BigMath.Utils.ExtendedBitConverter.ToInt256(sha256.ComputeHash(bytes), 0, true);

The c++ apps' uint256 type uses 8 x 32bit ints, while I see the c# BigMath library uses 4 x 64bit ints.
This shouldn't cause a problem right? Surely the output should be the same from both?
I'm expecting that both sha256 and 256bit int standards will be the same across languages?
","","1176","<c#><c++><sha256>","0","","0","2014-02-18 11:53:54","","2","","2684539","","2014-02-18 11:53:54","2014-02-18 10:52:50",""
"30478694","Java 1.4 SHA265 Issue?","I'm currently supporting a legacy e-commerce application that runs on Java 1.4.
I understand that 1.4 does not support SSL certificates signed with SHA256, is this correct and will I have issues establishing connections with other sites requesting the use of this certificate?
Are there any known workarounds to solve this issue?
","That's not quite right: SHA-256 (and SHA-384, SHA-512) were introduced in 1.4.2
If there is no option to update you could use bouncycastle as your security provider. At http://www.bouncycastle.org/specifications.html#install (Section 5.0 Bouncy Castle Provider) you find information about registering it as a provider.
","1175","<java><security><sha256><java1.4>","0","1","1","2015-05-27 10:27:34","30479794","0","","","","","2015-05-27 09:41:26",""
"32264391","Javascript Sha256 vs PHP Sha256: Line breaks create different hash?","I am getting two different hash values when line breaks are added.
On this site http://www.xorbin.com/tools/sha256-hash-calculator there is a JavaScript Sha256 hash generator.
When I run a hash on ""onetwo"" I get:
25b6746d5172ed6352966a013d93ac846e1110d5a25e8f183b5931f4688842a1

When I use PHP
echo hash('sha256', 'onetwo');

I get:
25b6746d5172ed6352966a013d93ac846e1110d5a25e8f183b5931f4688842a1

But when I run a hash from the URL that includes a line break (return) like:
'one
two'

I get:
21066d108d5319ecb5a1fc4454f42ef22fc5f1c7df49c31d90294950e0ea8b2c

But when I use PHP I get:
29a776bb35efe730dabb1b1d3ad74dbf80cc3e9009e168241798ea73adca3dcf

Can any one point out why this is so?  Why does adding line breaks give different results?
Here is my PHP/HTML code as you will see I am using a form and submitting the data to be hashed.
<!DOCTYPE HTML>
<html>
  <head>
    <title>Sha256 Hash</title>
  </head>
  <body>
    <div style=""float: left;"">
      Start here and insert text below to be hashed.<br />
      <form name=""submit hash"" action="""" method=""POST"">
        <textarea name=""text"" style=""border: thin solid #000; width: 500px; padding: 10px; height: 500px;""><? if($_SERVER['REQUEST_METHOD'] == 'POST') echo $_POST['text']; ?></textarea>
        <br style=""clear: both;"" />
        <input type=""submit"" name=""submit"" value=""submit"" />
      </form>
    </div>
    <? if($_SERVER['REQUEST_METHOD'] == 'POST'): ?>
    <div style=""border: thin solid #000; margin: 10px; padding: 10px; float: left;"">
      <br />sha256:&nbsp;&nbsp;<b><?= hash('sha256',$_POST['text']); ?></b><br />
    </div>
    <? endif; ?>
  </body>
</html>

","I would expect it is the difference between carriage return and line feeds ( \r\n vs \n )
Your PHP inline test string probably only has \n
The web one probably has \r\n
Secondly, these are considered part of the content. Hashing it doesn't ignore it.
","1167","<javascript><php><hash><sha256>","2","3","2","2015-08-28 11:37:05","32268137","2","1","2613662","","2015-08-28 06:17:07","2015-08-28 06:09:58",""
"32264391","Javascript Sha256 vs PHP Sha256: Line breaks create different hash?","I am getting two different hash values when line breaks are added.
On this site http://www.xorbin.com/tools/sha256-hash-calculator there is a JavaScript Sha256 hash generator.
When I run a hash on ""onetwo"" I get:
25b6746d5172ed6352966a013d93ac846e1110d5a25e8f183b5931f4688842a1

When I use PHP
echo hash('sha256', 'onetwo');

I get:
25b6746d5172ed6352966a013d93ac846e1110d5a25e8f183b5931f4688842a1

But when I run a hash from the URL that includes a line break (return) like:
'one
two'

I get:
21066d108d5319ecb5a1fc4454f42ef22fc5f1c7df49c31d90294950e0ea8b2c

But when I use PHP I get:
29a776bb35efe730dabb1b1d3ad74dbf80cc3e9009e168241798ea73adca3dcf

Can any one point out why this is so?  Why does adding line breaks give different results?
Here is my PHP/HTML code as you will see I am using a form and submitting the data to be hashed.
<!DOCTYPE HTML>
<html>
  <head>
    <title>Sha256 Hash</title>
  </head>
  <body>
    <div style=""float: left;"">
      Start here and insert text below to be hashed.<br />
      <form name=""submit hash"" action="""" method=""POST"">
        <textarea name=""text"" style=""border: thin solid #000; width: 500px; padding: 10px; height: 500px;""><? if($_SERVER['REQUEST_METHOD'] == 'POST') echo $_POST['text']; ?></textarea>
        <br style=""clear: both;"" />
        <input type=""submit"" name=""submit"" value=""submit"" />
      </form>
    </div>
    <? if($_SERVER['REQUEST_METHOD'] == 'POST'): ?>
    <div style=""border: thin solid #000; margin: 10px; padding: 10px; float: left;"">
      <br />sha256:&nbsp;&nbsp;<b><?= hash('sha256',$_POST['text']); ?></b><br />
    </div>
    <? endif; ?>
  </body>
</html>

","@mrjoltcola is right.
When getting the value from the textarea the new lines are \r\n (CRLF).
You can validate this in your php code by printing the url encoded version of the string that you read like that:
var_dump(urlencode($_POST['text']));

This will print string(12) ""one%0D%0Atwo"" if you enter 
one
two

where %0D is the html code for carriage return and %0A for line feed as you can see here.
Now to get the same hash as in the javascript version you have to remove the carriage return. You can do that it in php like that:
$string_to_be_hashed = preg_replace( ""/\r\n/"", ""\n"", $_POST['text'] );

Then, if you hash the $string_to_be_hashed you will get the expected result.
In the javascript version this happens also internally. If you check the hash256 source code there is a Utf8Encode(string) function where the first line is string = string.replace(/\r\n/g,""\n""); which is essentialy the same.
","1167","<javascript><php><hash><sha256>","2","4","2","2015-08-28 11:37:05","32268137","2","1","2613662","","2015-08-28 06:17:07","2015-08-28 06:09:58",""
"46217775","Python: get sha256() hash digest of a single bit in Python","Or, in general, any arbitrary number or bits that is not a multiple of 8.
According to hashlib.py there is one constructor method named for SHA256. Then I use sha256() to create a SHA256 hash object. I can now feed this object with arbitrary strings using the update() method, and at any point I can ask it for the digest of the concatenation of the strings fed to it so far using the digest() or hexdigest() methods.
Well. I would like to feed 1 bit to SHA256 in line with this link ""What is the SHA-256 hash of a single '1' bit?""
In Python 2.7, of course. 
So, what is the procedure to hash 1-bit long input consisting of the bit ""1""? (not the 8-bit long byte[] { 1 } input)?
","Neither the hashlib API nor the underlying C module support anything but ""buffers of bytes"".
Since the SHA standard prescribes adding something to any message, regardless of length, you cannot even ""pre-pad"" your input in python to get around that restriction.
To demonstrate (taken from https://tools.ietf.org/html/rfc4634#section-4.1):
>>> sha256('abcde').hexdigest()
'36bbe50ed96841d10443bcb670d6554f0a34b761be67ec9c4a8ad2c0c44ca42c'

>>> sha256('abcde\x80' + 57*'\x00' + '\x28').hexdigest()
'45cb103e6385e1330c892d1566d4d82f0c1c256947e54206704973c6c2adf4f6'

Although calculating the hash of a message with a length that is not a multiple of 8 might technically be allowed, I would very much doubt that there are real world use cases for this (that require the use of only the python standard lib, no less).
","1153","<python><hash><sha256>","1","3","1","2017-09-15 18:29:20","46226468","5","1","","","","2017-09-14 11:22:11",""
"8308558","Can anyone describe the difference between password encryption and hash (sha-256)?","I need to save the password to database.I get confused in encryption,hash using sha-256 ,salt generation method .If any one explains the basic concept behind this then it will be helpful
","In short:
Encryption is a process with an inverse. In other words: If I encrypt some text, there is a process which is able to convert the new text back to the original, called decryption.
Hashing is fundamentally different from encryption, because it does not have such a process. What a hash is meant to do is provide you with a result, which is unique for that given input text (well, almost unique, let's keep it at unique). This way, people can verify if two input texts were equal, without knowing what the actual input text was. So, if people get their hands on your hashed password, they still cannot decrypt it. SHA is a family of methods which provide hashing.
Salts and Peppers are merely additional techniques to hashing, which describe the process of adding something before and after the input text before hashing. This improves the difficulty of brute-force cracking of hashes back to text. 
Brute force cracking means simply trying all possible inputs (aa, ab, ac, etc...) and see if you can generate a hash which matches the hash you have gotten via hacking some website or whatever. You can find more on that here: https://security.stackexchange.com/questions/3272/password-hashing-add-salt-pepper-or-is-salt-enough
","1149","<encryption><password-protection><salt><sha256>","1","1","2","2011-11-29 09:49:21","8308725","0","","","","","2011-11-29 09:39:21",""
"8308558","Can anyone describe the difference between password encryption and hash (sha-256)?","I need to save the password to database.I get confused in encryption,hash using sha-256 ,salt generation method .If any one explains the basic concept behind this then it will be helpful
","The follow is a very basic explanation, anyway...

Encryption is a reversible method to crypt the data. So if you have ""password"" a encryption method convert it into (for example) ""ufmehlejw"" and then you are able to get again ""password"".
An hash function (one of them is the sha-256) is a function that once it's used on a string you have no way to recover the original string.
A salt is a string which usually prorammers (and not only, of course) use to mix the given password. It's usually randomly generated. A salt is used to extend the original data before using an hash function. The goal of the salt is to avoid attackers to discover the original password of a user from a stolen hash using rainbow tables.

","1149","<encryption><password-protection><salt><sha256>","1","2","2","2011-11-29 09:49:21","8308725","0","","","","","2011-11-29 09:39:21",""
"29731329","CryptoJS SHA256 Large File Progressive Checksum","I am trying to use CryptoJS to get the checksum of large files( bigger than 500MB) so browser doesn't crash. I am already using a Web Worker with chunking. So, I am try to progressively use each chunk when I iterate through the chunks to update CryptoJS to start creating the checksum. However, it's still returning the wrong checksum at the end when I finalize. It's seems like it's only returning the checksum of the last chunk not the checksum of all the chunks. Can you let me know what I am doing wrong.
Also, I don't have to use CryptoJS as I find it to be slow but it seems the only library that can handle progressive encryption.
 var sha256 = CryptoJS.algo.SHA256.create(),
     sha256Update,
     checksum = [],
     chunker = function(workerData) {                            

       var file = workerData.fileBlob,
           totalFileSize = file.size,
           chunkLength = 3145728,
           start = 0,
           stop = chunkLength,
           i = 0, readSlicer,
           fileSlicer,
           chunk,
           chunkUint8,
           timerCounter = 0,
           hashConvert;

      var checker = function() {

          start = stop;
          stop += chunkLength;

          if(start >= totalFileSize) {
               console.log(""Done reading file!"", stop, totalFileSize);
               sha256Update.finalize();

               console.log(""CheckSum : "", sha256Update._hash.toString(CryptoJS.enc.Hex));
               return;
                               }
               readBlock(start, chunkLength, file);
      };

      var readBlock = function(start, chunkLength, file) {

          readSlicer = new FileReaderSync();
          fileSlicer = file.slice(start, stop + 1);

          chunk = readSlicer.readAsArrayBuffer(fileSlicer);
          chunkUint8 = new Uint8Array(chunk);
          var wordArr = CryptoJS.lib.WordArray.create(chunkUint8);
              sha256Update = sha256.update(wordArr);
              checksum.push(sha256Update);
              checker();

      };

          readBlock(start, chunkLength, file);
   };

","","1145","<javascript><hash><sha256><cryptojs><chunking>","3","","0","2016-05-16 01:06:03","","5","","1816580","","2015-04-19 16:17:48","2015-04-19 14:41:20",""
"28435450","Slightly different SHA256 on windows and linux","The code below generates SHA256 hash on Windows. As you can see it produces the hash from text ""doublecheck"" (5/NK+1ZAwTjzTY1PjZm0xcPRDf6KMQhmE4SVQnPOQ3M=) 
I've created the code in the linux which should produce same hash, but it is different. (5/NK+1ZAwTjzTY1PjZm0xcPRDf6KMQhmE4SVQnPOQ3O/enx3tzCun78sgwQIOK6fv1T6eLc=) 
Could anybody help me to fix any of those codes to get the same hashes?
Windows code:
    #include ""stdafx.h""
    #include ""Hash2.h""
    #include <Wincrypt.h>
    #pragma comment(lib, ""Crypt32.lib"")

    DWORD BufSize;
    #define BUF_SIZE 256
    TCHAR Buf[BUF_SIZE];

    CStringA BinaryToBase64(__in const byte * pbBinary, __in DWORD cbBinary)
    {
        ATLASSERT(pbBinary != NULL);
        if (pbBinary == NULL)
            AtlThrow(E_POINTER);
        ATLASSERT(cbBinary != 0);
        if (cbBinary == 0)
            AtlThrow(E_INVALIDARG);
        DWORD cchBase64;
        if (!CryptBinaryToStringA(pbBinary, cbBinary, CRYPT_STRING_BASE64 | CRYPT_STRING_NOCRLF, NULL, &cchBase64))
        {
            AtlThrowLastWin32();
        }
        CStringA strBase64;
        LPSTR pszBase64 = strBase64.GetBuffer(cchBase64);
        ATLASSERT(pszBase64 != NULL);
        if (!CryptBinaryToStringA(pbBinary, cbBinary, CRYPT_STRING_BASE64 | CRYPT_STRING_NOCRLF, pszBase64, &cchBase64))
            AtlThrowLastWin32();
        strBase64.ReleaseBuffer();
        return strBase64;
    }

    // creates sha256 hash from string
    LPCSTR CreateHash(LPCSTR tohash)
    {
        HCRYPTPROV hProv;
        HCRYPTHASH hash;
        if (CryptAcquireContext(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)) 
        {
            if (CryptCreateHash(hProv, CALG_SHA_256, 0, 0, &hash))
            {
                int sz = strlen(tohash);
                if (CryptHashData(hash, (BYTE *)tohash, sz, 0))
                {
                    ZeroMemory(&Buf, sizeof(Buf));
                    BufSize = sizeof(Buf);
                    if (!CryptGetHashParam(hash, HP_HASHVAL, (BYTE *)&Buf, &BufSize, 0))
                        AtlThrowLastWin32();
                }
                else
                    AtlThrowLastWin32();
                if (!CryptDestroyHash(hash))
                    AtlThrowLastWin32();
            }
            else
                AtlThrowLastWin32();
            if (!CryptReleaseContext(hProv, 0))
                AtlThrowLastWin32();
        }
        else
            AtlThrowLastWin32();
        CStringA stemp = BinaryToBase64(reinterpret_cast<BYTE *>(Buf), BufSize).Trim();
        int sizeOfString = (stemp.GetLength() + 1);
        LPSTR retVal = new char[sizeOfString];
        strcpy_s(retVal, sizeOfString, stemp);
        return retVal;
    }

    int _tmain(int argc, TCHAR* argv[], TCHAR* envp[])
    {
        LPCSTR text = ""doublecheck"";
        LPCSTR hash = CreateHash(text);
        printf(""\""%s\"" hashed = %s"", text, hash);
//output: ""doublecheck"" hashed = 5/NK+1ZAwTjzTY1PjZm0xcPRDf6KMQhmE4SVQnPOQ3M=
        getchar();
    }

Linux code:
#include <openssl/bio.h>
#include <openssl/evp.h>
#include <math.h> 
#include <stdio.h>
#include <string.h>
#include <openssl/sha.h>
#include <openssl/crypto.h> 

int Base64Encode(const char* message, char** buffer) { //Encodes a string to base64
BIO *bio, *b64;
FILE* stream;
int encodedSize = 4*ceil((double)strlen(message)/3);
*buffer = (char *)malloc(encodedSize+1);

stream = fmemopen(*buffer, encodedSize+1, ""w"");
b64 = BIO_new(BIO_f_base64());
bio = BIO_new_fp(stream, BIO_NOCLOSE);
bio = BIO_push(b64, bio);
BIO_set_flags(bio, BIO_FLAGS_BASE64_NO_NL); //Ignore newlines - write everything in one line
// edit: bad code BIO_write(bio, message, strlen(message));
BIO_write(bio, message, SHA256_DIGEST_LENGTH); // edit: correction
BIO_flush(bio);
BIO_free_all(bio);
fclose(stream);
return (0); //success
} 

int main() {
    unsigned char digest[SHA256_DIGEST_LENGTH];
    const char* string = ""doublecheck"";

    SHA256_CTX ctx;
    SHA256_Init(&ctx);
    SHA256_Update(&ctx, string, strlen(string));
    SHA256_Final(digest, &ctx);
    printf(""SHA256 digest: %s\n"", digest);

    char* base64EncodeOutput;
    Base64Encode((char*)digest, &base64EncodeOutput);
    printf(""Output (base64): %s\n"", base64EncodeOutput); 
// now the output here is: 5/NK+1ZAwTjzTY1PjZm0xcPRDf6KMQhmE4SVQnPOQ3M=  
    return 0;
}

","","1125","<c++><linux><windows><base64><sha256>","0","","0","2015-02-10 21:04:54","","9","","832347","","2015-02-10 21:04:54","2015-02-10 15:28:44",""
"20270081","Java how to do sha256 hashing equiavelent to php crypt function ? result is not the same?","I am using this http://raginggoblin.wordpress.com/2012/08/11/java-alternative-to-php-crypt-function/  for the equivalent of php crypt function or does it says here that it is...
But I have the same value in java and in php but the hashing result is different.. I was wondering if not hashing is different because its not executed the same way ? I post this two values to a WS.
JAVA:


 String doc_data=""{\""table\"":\""1048582\""}"";
 String data=""$5$rounds=5000$503$La071hYxZERff9GGq0cb.x2k96Xx25\/C4vxQztQ7B96"";
 String result=Crypt.crypt(doc_data, data);

PHP: 
 $params['result'] = crypt($params['doc_data'], @$this->initdata['data']);

I logged it and I put the exact data in from POST... but the result is not the same.. There is no way to do this right ? or there is no equivalent?
Before that library I used Guava..but still not the same
public static String crypt_sha256(String password, String salt) {
        int iteration_count = 5000;
        HashFunction func = Hashing.sha256();
        HashCode result = func.hashString(salt + param1, Charsets.UTF_8);

        for (int i = 0; i < iteration_count; i++) {
            result = func.hashBytes(result.asBytes());
        }

        return salt + result.toString();

}

","Oke, so far I tested a few library's and the Winner is Apache's Crypt.
http://commons.apache.org/proper/commons-codec/apidocs/org/apache/commons/codec/digest/Crypt.html
public static String crpyt_sha256_apache(String param1, String salt) {

        return Crypt.crypt(param1, salt);
    }

","1123","<java><php><hash><sha><sha256>","0","0","1","2013-11-29 13:03:08","20286510","2","","","","","2013-11-28 15:43:01",""
"17445525","Hmac Sha256 incorrect result value AWS-Java","public static void main(String[] args) throws SignatureException {
    String data = ""GET""+""\n""+""webservices.amazon.com""+""\n""+""/onca/xml""+""\n""+""AWSAccessKeyId=AKIAIOSFODNN7EXAMPLE&ItemId=0679722769&Operation=ItemLookup&ResponeGroup=ItemAttributes%2COffers%2CImages%2CReviews&Service=AWSECommerceService&Timestamp=2009-01-01T12%3A00%3A00Z&Version=2009-01-06"";
    String key = ""1234567890"";
    String result = calculateRFC2104HMAC(data, key);
    System.out.println(result);

}

private static final String HMAC_SHA_ALGORITHM = ""HmacSHA256"";


public static String calculateRFC2104HMAC(String data, String key)throws java.security.SignatureException{
    String result;
    try {

    // get an hmac_sha256 key from the raw key bytes
    SecretKeySpec signingKey = new SecretKeySpec(key.getBytes(""UTF-8""), HMAC_SHA_ALGORITHM);

    // get an hmac_sha256 Mac instance and initialize with the signing key
    Mac mac = Mac.getInstance(HMAC_SHA_ALGORITHM);
    mac.init(signingKey);

    // compute the hmac256 on input data bytes
    byte[] rawHmac = mac.doFinal(data.getBytes(""UTF-8""));

    // base64-encode the hmac256
    result = Base64.encodeBase64String(rawHmac);

    } catch (Exception e) {
        throw new SignatureException(""Failed to generate HMAC : "" + e.getMessage());
    }
    return result;
    }

So I am trying to calculate this hmac with sha256 for AWS, but I do not get the excpected result, even though this example is taken from official AWS docs: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/AuthJavaSampleHMACSignature.html And the only thing changed is the algorithm, which did not break the program, so it should work, but it does not.
The result I get: k1T/qvVoXgEvmdFhTEh71vLDznqEVCyKcslA5RRSB6s=
The result I expect: M/y0+EAFFGaUAp4bWv/WEuXYah99pVsxvqtAuC8YN7I=
Does anyone have any idea what is wrong?
","It may have to do with how the newline character is interpreted.  \n can be a cr, lf, or cr-lf depending on your OS.
","1107","<java><amazon-web-services><hmac><sha256>","0","0","2","2015-06-12 00:27:07","","1","3","2485334","","2013-07-03 10:33:30","2013-07-03 10:25:11",""
"17445525","Hmac Sha256 incorrect result value AWS-Java","public static void main(String[] args) throws SignatureException {
    String data = ""GET""+""\n""+""webservices.amazon.com""+""\n""+""/onca/xml""+""\n""+""AWSAccessKeyId=AKIAIOSFODNN7EXAMPLE&ItemId=0679722769&Operation=ItemLookup&ResponeGroup=ItemAttributes%2COffers%2CImages%2CReviews&Service=AWSECommerceService&Timestamp=2009-01-01T12%3A00%3A00Z&Version=2009-01-06"";
    String key = ""1234567890"";
    String result = calculateRFC2104HMAC(data, key);
    System.out.println(result);

}

private static final String HMAC_SHA_ALGORITHM = ""HmacSHA256"";


public static String calculateRFC2104HMAC(String data, String key)throws java.security.SignatureException{
    String result;
    try {

    // get an hmac_sha256 key from the raw key bytes
    SecretKeySpec signingKey = new SecretKeySpec(key.getBytes(""UTF-8""), HMAC_SHA_ALGORITHM);

    // get an hmac_sha256 Mac instance and initialize with the signing key
    Mac mac = Mac.getInstance(HMAC_SHA_ALGORITHM);
    mac.init(signingKey);

    // compute the hmac256 on input data bytes
    byte[] rawHmac = mac.doFinal(data.getBytes(""UTF-8""));

    // base64-encode the hmac256
    result = Base64.encodeBase64String(rawHmac);

    } catch (Exception e) {
        throw new SignatureException(""Failed to generate HMAC : "" + e.getMessage());
    }
    return result;
    }

So I am trying to calculate this hmac with sha256 for AWS, but I do not get the excpected result, even though this example is taken from official AWS docs: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/AuthJavaSampleHMACSignature.html And the only thing changed is the algorithm, which did not break the program, so it should work, but it does not.
The result I get: k1T/qvVoXgEvmdFhTEh71vLDznqEVCyKcslA5RRSB6s=
The result I expect: M/y0+EAFFGaUAp4bWv/WEuXYah99pVsxvqtAuC8YN7I=
Does anyone have any idea what is wrong?
","AWS uses to two different HMAC functions, the first returns the string representation, the other returns the binary representation. This is from my C++ implementation using OpenSSL, hope it helps:
string hmacHex(string key, string msg)
{
    unsigned char hash[32];

    HMAC_CTX hmac;
    HMAC_CTX_init(&hmac);
    HMAC_Init_ex(&hmac, &key[0], key.length(), EVP_sha256(), NULL);
    HMAC_Update(&hmac, (unsigned char*)&msg[0], msg.length());
    unsigned int len = 32;
    HMAC_Final(&hmac, hash, &len);
    HMAC_CTX_cleanup(&hmac);

    std::stringstream ss;
    ss << std::hex << std::setfill('0');
    for (int i = 0; i < len; i++)
    {   
        ss << std::hex << std::setw(2)  << (unsigned int)hash[i];
    }

    return (ss.str());
}

the string implementation
string hmac(string key, string msg)
{
    unsigned char hash[32];

    HMAC_CTX hmac;
    HMAC_CTX_init(&hmac);
    HMAC_Init_ex(&hmac, &key[0], key.length(), EVP_sha256(), NULL);
    HMAC_Update(&hmac, ( unsigned char* )&msg[0], msg.length());
    unsigned int len = 32;
    HMAC_Final(&hmac, hash, &len);
    HMAC_CTX_cleanup(&hmac);

    std::stringstream ss;
    ss << std::setfill('0');
    for (int i = 0; i < len; i++)
    {
        ss  << hash[i];
    }

    return (ss.str());
}

If you are using Java, I'd recommend using the corresponding SDK. I my experience the API's tend to change rather quickly.
","1107","<java><amazon-web-services><hmac><sha256>","0","0","2","2015-06-12 00:27:07","","1","3","2485334","","2013-07-03 10:33:30","2013-07-03 10:25:11",""
"35249059","signtool Dual Signing Failure","Question concerning a failure I'm having when attempting to dual sign with SHA1/SHA256.
I've had a SHA256 code signing certificate for a few years now, but before the new year (2016), I started using /fd SHA256 for the hashing algorithm to be compliant with Microsoft's deprecation of SHA1.
This worked fine, but of course the signature hash doesn't validate on older OS's. I don't care about XP, but I still sort of care about Vista.
I first sign for SHA1 using the following:
signtool sign /fd SHA1 /f ""cert.pfx"" /p ""password"" /t http://timestamp.verisign.com/scripts/timsetamp.dll ""file""

Then I try for my dual signature:
signtool sign /as /fd SHA256 /f ""cert.pfx"" /p ""password"" /tr http://timestamp.globalsign.com/?signature=sha2 ""file""

And signtool gives me this:

Done Adding Additional Store
SignTool Error: An unexpected internal error has occurred.
Error information: ""Error: SignerSign() failed."" (-2147024846/0x80070032)

Now I can successfully sign a file with a single algorithm (Either SHA1 OR SHA256), but I can't add the second signature. My only guess is that because I'm using the SAME certificate for both algorithms it doesn't like that. Do I need to have a different physical certificate for each algorithm? 
Just wondering because before the new year, I had been using a SHA256 certificate for years with a SHA1 algorithm and it validated fine on all Operating Systems.
","This is from mis-matched dlls.  signtool.exe needs the correct wintrust.dll and mssign32.dll otherwise I get 0x80070032 only when dual signing.
This site has a 8.1 download so you don't need the whole SDK
http://ksoftware.freshdesk.com/support/solutions/articles/17170-how-do-i-use-ksign-to-digitally-sign-files-
signtool 8.1 is at
http://cdn1.ksoftware.net/signtool_8.1.zip
","1100","<sha1><sha256><signtool>","6","1","1","2017-05-12 22:12:04","43947145","4","1","","","","2016-02-07 02:34:58",""
"27171847","XML Signature Reference digest uses parent namespace","I need to sign an XML-File in Java, which needs to contain 3 References.
While 2 of them are valid (expected digest == actual digest), one is invalid.
The relevant part of the XML Looks like:  
<QualifyingProperties xmlns=""http://uri.etsi.org/01903/v1.3.2#"" Target=""Signature1"">
    <SignedProperties Id=""SignedProperties_1"">
        <SignedSignatureProperties>
            <SigningTime>2014-11-27T13:49:36</SigningTime>
        </SignedSignatureProperties>
    </SignedProperties>
</QualifyingProperties>

The Reference only references the Element ""SignedProperties"" and its children.
As you can see the ""QualifyingProperties"" Element defines a namespace (xmlns=""http://uri.etsi.org/01903/v1.3.2#"") and i guess thats the problem:
After having a look at the log i found, that the ""Pre-Digest"" Value looks like:  
<SignedProperties xmlns=""http://uri.etsi.org/01903/v1.3.2#"" Id=""SignedProperties_1"">
    <SignedSignatureProperties>
        <SigningTime>2014-11-27T13:49:36</SigningTime>
    </SignedSignatureProperties>
</SignedProperties>

While the ""SignedProperties"" Element in the real file does not contain the namespace, but its parent does.
I found out, that the actual digest matches the SHA-256 of the ""Pre-Digest"" value, while the expected digest matches the SHA-256 of the real file (without the namespace).  
The Reference is created with the following code:
Reference sigPropRef = fac.newReference(""#SignedProperties_1"", fac.newDigestMethod(DigestMethod.SHA256, null),
    Collections.singletonList(sigPropTransform), ""http://uri.etsi.org/01903#SignedProperties"", ""reference-signedpropeties""
);

Where the sigPropTransform is a CanonicalizationMethod.EXCLUSIVE Transform.
My question is, how can i solve the problem, i.e. how can i prevent the namespace to be added to the ""SignedProperties"" Element, before calculating the digest?
If you need any other informations please leave a comment, i am pretty new to this theme, so i am not sure which informations are relevant and which not.
Thanks a lot!
EDIT: After playing arround a bit, it seems to me, that the ""actual digest"" is the digest, the validator calculated, while the ""expected digest"" is the digest inside the ""DigestValue"" Element.
That means, that the digest value inside my file matches the SHA-256 of the referenced filepart, but the validator for some reason calculates the digest WITh the parents namespace.
So i guess what i need is to include the parents namespace in my digest calculation.
EDIT: I continued playing arround and now i have not only the Pre-Digest value of the validator but also the one of my ""digest calculation"".
That one gives me:  
<SignedProperties Id=""SignedProperties_1""><SignedSignatureProperties><SigningTime>2014-11-27T15:51:26</SigningTime></SignedSignatureProperties></SignedProperties>  

when i give it the following Transform:  
Transform sigPropTransform = fac.newTransform(CanonicalizationMethod.EXCLUSIVE, (ExcC14NParameterSpec)null);  

And:  
<SignedProperties xmlns:ds=""some-url"" xmlns:msg=""some-other-url"" Id=""SignedProperties_1""><SignedSignatureProperties><SigningTime>2014-11-27T15:52:49</SigningTime></SignedSignatureProperties></SignedProperties>

when i don't give it any Transform.
The namespace xmlns=""http://uri.etsi.org/01903/v1.3.2#"" is never included.
How do i include it?
","I'm afraid that you cannot prevent adding a namespace - it's being add during canonicalizaton.
This one helped me when i had identical issue ;)
","1093","<java><xml><digital-signature><xml-namespaces><sha256>","0","1","2","2014-11-27 15:50:12","27174476","0","","3182091","","2014-11-27 14:54:38","2014-11-27 13:27:21",""
"27171847","XML Signature Reference digest uses parent namespace","I need to sign an XML-File in Java, which needs to contain 3 References.
While 2 of them are valid (expected digest == actual digest), one is invalid.
The relevant part of the XML Looks like:  
<QualifyingProperties xmlns=""http://uri.etsi.org/01903/v1.3.2#"" Target=""Signature1"">
    <SignedProperties Id=""SignedProperties_1"">
        <SignedSignatureProperties>
            <SigningTime>2014-11-27T13:49:36</SigningTime>
        </SignedSignatureProperties>
    </SignedProperties>
</QualifyingProperties>

The Reference only references the Element ""SignedProperties"" and its children.
As you can see the ""QualifyingProperties"" Element defines a namespace (xmlns=""http://uri.etsi.org/01903/v1.3.2#"") and i guess thats the problem:
After having a look at the log i found, that the ""Pre-Digest"" Value looks like:  
<SignedProperties xmlns=""http://uri.etsi.org/01903/v1.3.2#"" Id=""SignedProperties_1"">
    <SignedSignatureProperties>
        <SigningTime>2014-11-27T13:49:36</SigningTime>
    </SignedSignatureProperties>
</SignedProperties>

While the ""SignedProperties"" Element in the real file does not contain the namespace, but its parent does.
I found out, that the actual digest matches the SHA-256 of the ""Pre-Digest"" value, while the expected digest matches the SHA-256 of the real file (without the namespace).  
The Reference is created with the following code:
Reference sigPropRef = fac.newReference(""#SignedProperties_1"", fac.newDigestMethod(DigestMethod.SHA256, null),
    Collections.singletonList(sigPropTransform), ""http://uri.etsi.org/01903#SignedProperties"", ""reference-signedpropeties""
);

Where the sigPropTransform is a CanonicalizationMethod.EXCLUSIVE Transform.
My question is, how can i solve the problem, i.e. how can i prevent the namespace to be added to the ""SignedProperties"" Element, before calculating the digest?
If you need any other informations please leave a comment, i am pretty new to this theme, so i am not sure which informations are relevant and which not.
Thanks a lot!
EDIT: After playing arround a bit, it seems to me, that the ""actual digest"" is the digest, the validator calculated, while the ""expected digest"" is the digest inside the ""DigestValue"" Element.
That means, that the digest value inside my file matches the SHA-256 of the referenced filepart, but the validator for some reason calculates the digest WITh the parents namespace.
So i guess what i need is to include the parents namespace in my digest calculation.
EDIT: I continued playing arround and now i have not only the Pre-Digest value of the validator but also the one of my ""digest calculation"".
That one gives me:  
<SignedProperties Id=""SignedProperties_1""><SignedSignatureProperties><SigningTime>2014-11-27T15:51:26</SigningTime></SignedSignatureProperties></SignedProperties>  

when i give it the following Transform:  
Transform sigPropTransform = fac.newTransform(CanonicalizationMethod.EXCLUSIVE, (ExcC14NParameterSpec)null);  

And:  
<SignedProperties xmlns:ds=""some-url"" xmlns:msg=""some-other-url"" Id=""SignedProperties_1""><SignedSignatureProperties><SigningTime>2014-11-27T15:52:49</SigningTime></SignedSignatureProperties></SignedProperties>

when i don't give it any Transform.
The namespace xmlns=""http://uri.etsi.org/01903/v1.3.2#"" is never included.
How do i include it?
","After a few more tries i finally found the actuall problem, as well as the solution:
As i allready stated in the question, the digest calculation did not use the parents namespace, defined as xmlns=""http://uri.etsi.org/01903/v1.3.2#"".
This was, because i did never ""register"" it as a namespace, but i only added it as a normal Attribute.
To ""register"" the namespace i need to call setAttributeNS instead of setAttribute.
The code then looks something like:  
Element eQualifyingProperties= doc.createElement(""QualifyingProperties"");
eQualifyingProperties.setAttributeNS(""http://www.w3.org/2000/xmlns/"", ""xmlns"", ""http://uri.etsi.org/01903/v1.3.2#"");   

The first parameter is the namespace-uri of the Attribute and since the Attribute is a namespace it is the URI of the XML-Namespaces.
The second parameter is the attribute-name, since it should not have any praefix it is simply ""xmlns"".
The third parameter is the actual attibute-value, which is the namespace-uri i want to ""register"".
The Element eQualifyingProperties is the parent of the ""SignedProperties"" Element.  
After registering the namespace as a real namespace (not as an attribute), the defined Transform
Transform sigPropTransform = fac.newTransform(CanonicalizationMethod.EXCLUSIVE, (ExcC14NParameterSpec)null);  

includes it in the digest calculation.  
I found this solution in this answer on SO.
","1093","<java><xml><digital-signature><xml-namespaces><sha256>","0","0","2","2014-11-27 15:50:12","27174476","0","","3182091","","2014-11-27 14:54:38","2014-11-27 13:27:21",""
"6433102","Hash 256 with uniqid mt_rand","I'm having this login system, where I've just (finally) got hash 256 added. Earlier today I had a very long thread with @KingCrunch and some others, who helped me a lot. Thanks a lot again. 
But what I wan't to do now, is that I wanna have the $salt to be unique by using: 
$salt = uniqid(mt_rand());  $salt = uniqid(mt_rand());  
                            $password = hash('sha256', $salt.$_POST['password']);

Upon creating a new member, this is set, and added to database under row called ""salt"".
Now, when I try to login, with the created credentials it won't let me. 
$salt = $row['salt'];
$password = hash('sha256', $salt.$_POST['password']);
$username = mysql_real_escape_string($_POST['username']);
$sql= ""SELECT * FROM members WHERE username='$username' and password='$password'"";
$result=mysql_query($sql);
$row=mysql_fetch_array($result);

This is my login_ac.php, where I got $salt to be a row['salt']. I don't think this ever would be successful because I haven't told which column in row salt it has to pick. 
So my question is: How do I get this to work? Do have to create another query or something like that? 
I need $salt to be a pick from row['salt'] because I want salt to be unique.
","As was pointed out in that previous question, if usernames are unique, you don't need to query the database on password.  Just query on username.  Then the returned row will contain both salt and password, allowing you to complete the security validation in PHP.
","1092","<php><hash><sha256>","0","0","2","2011-06-22 01:49:53","6433145","0","1","-1","user212218","2017-05-23 10:08:08","2011-06-21 23:15:06",""
"6433102","Hash 256 with uniqid mt_rand","I'm having this login system, where I've just (finally) got hash 256 added. Earlier today I had a very long thread with @KingCrunch and some others, who helped me a lot. Thanks a lot again. 
But what I wan't to do now, is that I wanna have the $salt to be unique by using: 
$salt = uniqid(mt_rand());  $salt = uniqid(mt_rand());  
                            $password = hash('sha256', $salt.$_POST['password']);

Upon creating a new member, this is set, and added to database under row called ""salt"".
Now, when I try to login, with the created credentials it won't let me. 
$salt = $row['salt'];
$password = hash('sha256', $salt.$_POST['password']);
$username = mysql_real_escape_string($_POST['username']);
$sql= ""SELECT * FROM members WHERE username='$username' and password='$password'"";
$result=mysql_query($sql);
$row=mysql_fetch_array($result);

This is my login_ac.php, where I got $salt to be a row['salt']. I don't think this ever would be successful because I haven't told which column in row salt it has to pick. 
So my question is: How do I get this to work? Do have to create another query or something like that? 
I need $salt to be a pick from row['salt'] because I want salt to be unique.
","Unlike my answer in the other question I would retrieve the whole row of the user here and compare the hashes within php (to remember: I suggested to compare it within the sql query in the other question).
$username = mysql_real_escape_string($_POST['username']);
$sql= ""SELECT * FROM members WHERE username='$username'"";
$result=mysql_query($sql);
$row=mysql_fetch_array($result);

This will retrieve the row of the user. If the username does not exists within your database mysql_num_rows($result) will return 0 (as usual). However, you can then recreate the hash and compare it against the one saved within the database
if (hash('sha256', $row['salt'] . $_POST['password']) === $row['password']) {
  // fine
}

","1092","<php><hash><sha256>","0","1","2","2011-06-22 01:49:53","6433145","0","1","-1","user212218","2017-05-23 10:08:08","2011-06-21 23:15:06",""
"50615993","HMAC hashing with Base64 encoding with Javascript","I am working with Payeezy API to handle payment on a webapp, their API for purchase requires a HMAC of payload signed using api secret. An excerpt from the docs: 

Construct the data param by appending the parameters below in the same order as shown. a. apikey - API key of the developer. b. nonce - secure random number. c. timestamp - epoch timestamp in milliseconds. d. token - Merchant Token. e. payload - Actual body content passed as post request. Compute HMAC SHA256 hash on the above data param using the key below f. apiSecret - Consumer Secret token for the given api key Calculate the base64 of the hash which would be our required Authorization header value.

I found a library called jshashes on NPM and I tried to use their library to hash my header params, my code looks like this: 
const payload = {
        ""merchant_ref"": ""1-Sale"",
        ""transaction_type"": ""purchase"",
        ""method"": ""credit_card"",
        ""amount"": amount * 100,
        ""partial_redemption"": ""false"",
        ""currency_code"": ""USD"",
        ""credit_card"": {
          ""type"": type,
          ""cardholder_name"": cardholder_name,
          ""card_number"": card_number,
          ""exp_date"": exp_date,
          ""cvv"": cvv
        }
      }
      const data = apikey + nounce + timestamp + token + JSON.stringify(payload)
      const sha256 = new Hashes.SHA256()
      const shaData = sha256.b64_hmac(apiSecret, data)

The outcome compared to the sample hashed value looks like this:
//mine
beWtpCGDv/iBoAUDAThGFXIge9eli/Xtl7JIBuR1bd4= 


//payeezy sample 
NmUzMTNmYWU0YjExM2UxMmM0NjllZGI1NThjY2M5MmUzMzE3NTFlZmQ1NDQxYzAzMTgwMmIwNDQ0MWVmYTdhMw== 

from the looks of the character counts I could tell that my hashing process is not correct but I can't figure out where went wrong. 
I've seen similar questions being asked here but none answered, any help is appreciated.
ADDITION, I tried crypto library on Node.js:
const data = apikey + nounce + timestamp + token + JSON.stringify(payload)

  const hmac = crypto.createHmac('sha512', apiSecret)

  hmac.on('readable', () => {
    const data = hmac.read()
    if (data) {
      console.log(data.toString('base64'));
    }
  })

  hmac.write(data)
  hmac.end()

Same result, with only half the character length compared to the sample hashed value
UPDATE: After I used SHA512 on the data it finally returned a string that looks to have the same character length as the sample, but the validation is still not passing... 
","if you convert the base64 example from that site to a string


console.log(atob('NmUzMTNmYWU0YjExM2UxMmM0NjllZGI1NThjY2M5MmUzMzE3NTFlZmQ1NDQxYzAzMTgwMmIwNDQ0MWVmYTdhMw=='))



You get 
6e313fae4b113e12c469edb558ccc92e331751efd5441c031802b04441efa7a3

This is a 64 character (256 bit) hex string
So my guess is that they get the hex string HMAC, and base64 encode that - which seems awfully stupid, hex is safe to send as is, why make it 4/3rds larger!!
if they simply used the base64 of the HMAC, it'd only be 45 characters long!!
Instead they get the 64 character hex string and base64 encode that to get 88 characters!! strange design decision!!
So, your code should do the same
like
Data = Buffer.from(sha256.hex_hmac(apiSecret, data), 'utf-8').toString('base64');

not sure if there's a better way in node to convert hex encoded string to base64, but that works
And finally (actually this bit is just to ""match"" how the authorization is calculated on the example page as linked by the OP https://developer.payeezy.com/payeezy-api/apis/post/transactions-3) So, it's not necessary to make the payload larger for no reason)
Another point you need to know, the payload JSON needs to be in a specific format it seems ... 2 space indented ... again, this is a damned stupid waste of bandwidth ..  {""key"":1234} takes 12 characters 
{
  ""key"": 1234
}

takes 17
So, anyway, you need to do this:
JSON.stringify(payload,null, 2)

This last piece of the puzzle should make your code as follows
const data = apikey + nonce + timestamp + token + JSON.stringify(payload,null, 2)
const sha256 = new Hashes.SHA256()
const shaData = Buffer.from(sha256.hex_hmac(secret, data), 'utf-8').toString('base64');

","1084","<javascript><hash><sha256><hmac><payeezy>","0","1","1","2018-05-31 04:46:08","","11","","5411991","","2018-05-31 03:38:26","2018-05-31 02:56:57",""
"24003263","Sha256 hash differs from machine to machine","We have a process hashing images , and would like to be able to deploy the same process on other servers. How do I get the same Hash value for an image across different servers. Here is the code we u
static void Main(string[] args)
{
byte[] imageBytes;

string imagePath = @""C:\Work\Projects\test.jpg"";
System.Drawing.Image image = System.Drawing.Image.FromFile(imagePath);

using (System.IO.MemoryStream ms = new System.IO.MemoryStream())
{
image.Save(ms, System.Drawing.Imaging.ImageFormat.Jpeg);
imageBytes = ms.ToArray();

}

string photoCheckSumSha256 = ComputeSha256Checksum(imageBytes);
Console.WriteLine(photoCheckSumSha256);

 Console.ReadKey();

}



static string ComputeSha256Checksum(byte[] data)
{
using (System.IO.MemoryStream stream = new System.IO.MemoryStream(data))
{
System.Security.Cryptography.SHA256 sha256 = new System.Security.Cryptography.SHA256CryptoServiceProvider();
byte[] sha256Ret = sha256.ComputeHash(stream);

StringBuilder sb = new StringBuilder();
for (int i = 0; i < sha256Ret.Length; i++)
{
sb.Append(sha256Ret[i].ToString(""x2""));
}

return sb.ToString();
}
}

","Instead of reading the image and saving to a memory stream, try streaming the file directly to the SHA256 provider:
/* using declarations:
using System;
using System.IO;
using System.Security.Cryptography;
*/

static string ComputeFileChecksum(string filePath)
{
    if (File.Exists(filePath))
    {
        using (var fileStream = File.OpenRead(filePath))
        using (var sha256 = new SHA256CryptoServiceProvider())
        {
            var hashBytes = sha256.ComputeHash(fileStream);
            return Convert.ToBase64String(hashBytes);
        }
    }
    else
    {
        // TODO: handle non-existent file
        return string.Empty;
    }
}

","1075","<c#><sha256>","0","0","2","2014-06-03 22:35:58","","5","","","","","2014-06-02 21:03:58",""
"24003263","Sha256 hash differs from machine to machine","We have a process hashing images , and would like to be able to deploy the same process on other servers. How do I get the same Hash value for an image across different servers. Here is the code we u
static void Main(string[] args)
{
byte[] imageBytes;

string imagePath = @""C:\Work\Projects\test.jpg"";
System.Drawing.Image image = System.Drawing.Image.FromFile(imagePath);

using (System.IO.MemoryStream ms = new System.IO.MemoryStream())
{
image.Save(ms, System.Drawing.Imaging.ImageFormat.Jpeg);
imageBytes = ms.ToArray();

}

string photoCheckSumSha256 = ComputeSha256Checksum(imageBytes);
Console.WriteLine(photoCheckSumSha256);

 Console.ReadKey();

}



static string ComputeSha256Checksum(byte[] data)
{
using (System.IO.MemoryStream stream = new System.IO.MemoryStream(data))
{
System.Security.Cryptography.SHA256 sha256 = new System.Security.Cryptography.SHA256CryptoServiceProvider();
byte[] sha256Ret = sha256.ComputeHash(stream);

StringBuilder sb = new StringBuilder();
for (int i = 0; i < sha256Ret.Length; i++)
{
sb.Append(sha256Ret[i].ToString(""x2""));
}

return sb.ToString();
}
}

","There isn't even a guarantee that this will work the same way on the same machine from one run to another, as some implementations of JPEG encoding are non-deterministic.
Your algorithm so far is:

Get file.
Do arbitrary stuff with it that isn't actually used.
Store this in memory via a memory stream.
Take it out of memory via a memory stream.
Get hash of output of arbitrary stuff.

Your algorithm should be:

Get file.
Get hash of file.

You don't need to even care whether it is a JPEG file or not. The one possible advantage is that your code would throw an exception if .NET couldn't handle it as an image (a disadvantage in most cases, but an advantage if it's better to fail now than down the line). If that's necessary, you could call Image.FromFile() separately from the hashing.
","1075","<c#><sha256>","0","1","2","2014-06-03 22:35:58","","5","","","","","2014-06-02 21:03:58",""
"20653374","Netbeans java web service client consuming WCF service using message security with algorithmSuite Basic256Sha256","I have a WCF web service with message security and consuming it from a java web application created with Netbeans with a project using Metro (WSIT+jaxws). All works fine using standard algorithmSuite Basic256 but when I use Basic256Sha256 which is a requirement on the service I get a runtime error saying ""SOAPFaultException: An error occurred when verifying security for the message."". When I look i service log it says ""The algorithm 'http://www.w3.org/2000/09/xmldsig#hmac-sha1' is not accepted for operation 'SymmetricSignature' by algorithm suite Basic256Sha256."". The question is how I change the client to use SHA2 (Sha256). I'm using Certificate as client credential type.
WCF Binding:
        <!-- MESSAGE SECURITY -->
        <binding name=""myMessageBinding"">
          <transactionFlow />
          <security defaultAlgorithmSuite=""Basic256Sha256"" 
                    authenticationMode=""SecureConversation""
                    messageSecurityVersion=""WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10"">
            <secureConversationBootstrap defaultAlgorithmSuite=""Basic256Sha256""
                                         authenticationMode=""MutualCertificate"" requireDerivedKeys=""false""
                                         messageSecurityVersion=""WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10""
                                         requireSignatureConfirmation=""true"" />
          </security>
          <textMessageEncoding />
          <httpTransport />
        </binding>

","SecurityAlgorithmSuite.IsSymmetricSignatureAlgorithmSupported returns an unsupported algorithm for symetric signature error because Basic256Sha256 uses

http://www.w3.org/2001/04/xmldsig-more#hmac-sha256

as the algorithm used for signature generation and validation and

http://www.w3.org/2001/04/xmlenc#sha256

as the digest algorithm to be applied to the signed object to create or validate the hash for the xml signature.

http://www.w3.org/2000/09/xmldsig#hmac-sha1

is valid as symmetric signature for

Default
Basic256
Basic256Rsa15

using 

http://www.w3.org/2000/09/xmldsig#sha1

as digest algorithm.
It seems like your Java client is not using the same algorithm to sign the SOAP message, check the SignedInfo SignatureMethod element in the message received from the Java client for 

Algorithm=""http://www.w3.org/2000/09/xmldsig#hmac-sha1""

to ensure that the client is not signing using the same algorithm.
","1071","<wcf><netbeans><message><sha256><sha2>","0","1","1","2013-12-18 10:45:15","","1","","","","","2013-12-18 08:47:35",""
"45668105","sha256 hash from public key","I am trying to read sha256 has from a public key certificates. The certificate is shown below.
I am running following command to read sha256 hash but it is not giving proper result:
openssl x509 -in test.crt -pubkey -noout | openssl rsa -pubin -outform der | \
  openssl dgst -sha256 -binary | openssl enc -base64

I am getting some wrong value RTy7aSpufwRDWUudgZCwR5Xc7NETd6Imk4YlzvgKTRU=
Correct values are:
sha256/i1RfARNCYn9+K3xmRNTaXG9sVSK6TMgY9l8SDm3MUZ4=
sha256/7HIpactkIAq2Y49orFOOQKurWxmmSFZhBCoQYcRhJ3Y=
sha256/h6801m+z8v3zbgkRHpq6L29Esgfzhj89C1SyUCOQmqU=

I am wondering how three values came in, yes only one is correct but to validate these values i do run sample program given below:
public class Main {

    public static void main(String[] args) throws IOException {
        HttpLoggingInterceptor interceptor = new HttpLoggingInterceptor();
        interceptor.setLevel(HttpLoggingInterceptor.Level.BODY);
        String hostName = ""www.google.com"";
        CertificatePinner certificatePinner = new CertificatePinner.Builder()
                .add(hostName, ""sha256/pqrmt"")
                .build();
        OkHttpClient client = new OkHttpClient.Builder()
                .addNetworkInterceptor(interceptor)
                .certificatePinner(certificatePinner)
                .build();
        Request request = new Request.Builder()
                .url(""https://"" + hostName)
                .build();
        client.newCall(request).execute();

    }
}

Adding wrong key hash give me proper one on error logs, and using proper one allows me to communicate with ease.

-----BEGIN CERTIFICATE-----
MIIISDCCBzCgAwIBAgIILbxyxVw1oQAwDQYJKoZIhvcNAQELBQAwSTELMAkGA1UE
BhMCVVMxEzARBgNVBAoTCkdvb2dsZSBJbmMxJTAjBgNVBAMTHEdvb2dsZSBJbnRl
cm5ldCBBdXRob3JpdHkgRzIwHhcNMTcwODAyMTk0NTM5WhcNMTcxMDI1MTkyMzAw
WjBmMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwN
TW91bnRhaW4gVmlldzETMBEGA1UECgwKR29vZ2xlIEluYzEVMBMGA1UEAwwMKi5n
b29nbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvqjgh7NP
S0DNdmqg94u9ecHsxtCCNH5K7RQDbT7stPZaftCBuCXEDbhmqP44ne7kKkKyHqVx
OxzDyMrvMly/qDvd17X33kXjEdte3YOWTENQ7R//LIQ2qwxOCd7LcDhRLnbhV61k
yDJIPzjM79BX8b0u9+e2KAYfhYFANB+iZrk0/sLXmlv+T+E1bm4D19H55BstEPM8
SOTUj0cntYaN+5Rcy1s9p5CjWb1Sy/JXyBv+QLkrbj2JyQ+KlG2Fil4ue3ooF2iA
LZM+k2OgCizz5Kh6za1oKkL08/wJCaqHQJMhxX1ajXW93DwyojOqt40+6tF43rEU
Uxy87Joi+ZZNOQIDAQABo4IFFTCCBREwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsG
AQUFBwMCMIID4QYDVR0RBIID2DCCA9SCDCouZ29vZ2xlLmNvbYINKi5hbmRyb2lk
LmNvbYIWKi5hcHBlbmdpbmUuZ29vZ2xlLmNvbYISKi5jbG91ZC5nb29nbGUuY29t
ghQqLmRiODMzOTUzLmdvb2dsZS5jboIGKi5nLmNvgg4qLmdjcC5ndnQyLmNvbYIW
Ki5nb29nbGUtYW5hbHl0aWNzLmNvbYILKi5nb29nbGUuY2GCCyouZ29vZ2xlLmNs
gg4qLmdvb2dsZS5jby5pboIOKi5nb29nbGUuY28uanCCDiouZ29vZ2xlLmNvLnVr
gg8qLmdvb2dsZS5jb20uYXKCDyouZ29vZ2xlLmNvbS5hdYIPKi5nb29nbGUuY29t
LmJygg8qLmdvb2dsZS5jb20uY2+CDyouZ29vZ2xlLmNvbS5teIIPKi5nb29nbGUu
Y29tLnRygg8qLmdvb2dsZS5jb20udm6CCyouZ29vZ2xlLmRlggsqLmdvb2dsZS5l
c4ILKi5nb29nbGUuZnKCCyouZ29vZ2xlLmh1ggsqLmdvb2dsZS5pdIILKi5nb29n
bGUubmyCCyouZ29vZ2xlLnBsggsqLmdvb2dsZS5wdIISKi5nb29nbGVhZGFwaXMu
Y29tgg8qLmdvb2dsZWFwaXMuY26CFCouZ29vZ2xlY29tbWVyY2UuY29tghEqLmdv
b2dsZXZpZGVvLmNvbYIMKi5nc3RhdGljLmNugg0qLmdzdGF0aWMuY29tggoqLmd2
dDEuY29tggoqLmd2dDIuY29tghQqLm1ldHJpYy5nc3RhdGljLmNvbYIMKi51cmNo
aW4uY29tghAqLnVybC5nb29nbGUuY29tghYqLnlvdXR1YmUtbm9jb29raWUuY29t
gg0qLnlvdXR1YmUuY29tghYqLnlvdXR1YmVlZHVjYXRpb24uY29tggcqLnl0LmJl
ggsqLnl0aW1nLmNvbYIaYW5kcm9pZC5jbGllbnRzLmdvb2dsZS5jb22CC2FuZHJv
aWQuY29tghtkZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY26CHGRldmVsb3BlcnMu
YW5kcm9pZC5nb29nbGUuY26CBGcuY2+CBmdvby5nbIIUZ29vZ2xlLWFuYWx5dGlj
cy5jb22CCmdvb2dsZS5jb22CEmdvb2dsZWNvbW1lcmNlLmNvbYIYc291cmNlLmFu
ZHJvaWQuZ29vZ2xlLmNuggp1cmNoaW4uY29tggp3d3cuZ29vLmdsggh5b3V0dS5i
ZYILeW91dHViZS5jb22CFHlvdXR1YmVlZHVjYXRpb24uY29tggV5dC5iZTBoBggr
BgEFBQcBAQRcMFowKwYIKwYBBQUHMAKGH2h0dHA6Ly9wa2kuZ29vZ2xlLmNvbS9H
SUFHMi5jcnQwKwYIKwYBBQUHMAGGH2h0dHA6Ly9jbGllbnRzMS5nb29nbGUuY29t
L29jc3AwHQYDVR0OBBYEFJsK+1wBuADqH695FkUxvBBxBD13MAwGA1UdEwEB/wQC
MAAwHwYDVR0jBBgwFoAUSt0GFhu89mi1dvWBtrtiGrpagS8wIQYDVR0gBBowGDAM
BgorBgEEAdZ5AgUBMAgGBmeBDAECAjAwBgNVHR8EKTAnMCWgI6Ahhh9odHRwOi8v
cGtpLmdvb2dsZS5jb20vR0lBRzIuY3JsMA0GCSqGSIb3DQEBCwUAA4IBAQCWfamc
vElR0WkzwdaofPD66PsmqihYbgMAEOJBtt4isDLcVqG0tE8xwAYZO+EksklR6nXq
Pi8021W/qgh2XDmyGajc/psjSBdfAi2bw/kIMcXpQsJSR33n0kLJe4/5z5YwSJEt
M7f6DKlBzxalGrHc2rnkOw4xZEKYZ+nJQ5E3Lms0NKHFPxj3c5QvUYfiWhC4lY1m
RZRPIDQc9Bmcu+gJseRGYd8g+USo0829CMq42KaQM7nshxmwexXPv9ic9nV6f+Qi
nw1hL6RdI3+yHRSZCBPnlfpQfLLJatJmpwddP2ibT56zDDT4BQsP4/QeAbEOJ+Bp
0nJ0S+1OpCbjQXYL
-----END CERTIFICATE-----

","
sha256/i1RfARNCYn9+K3xmRNTaXG9sVSK6TMgY9l8SDm3MUZ4=

This pin matches the leaf certificate returned when accessing www.google.com:
$ openssl s_client -connect www.google.com:443 |\
   openssl x509  -pubkey -noout |\
   openssl pkey -pubin -outform der |\
   openssl dgst -sha256 -binary |\
   openssl enc -base64
...
depth=0 ... CN = www.google.com
i1RfARNCYn9+K3xmRNTaXG9sVSK6TMgY9l8SDm3MUZ4=

But, if you have a closer look at the certificate returned when accessing www.google.com you see that is has a CN of www.google.com. Instead the certificate you've included in your question has a CN of *.google.com, i.e. is a different certificate. This certificate is returned for example if you access  google.com instead of www.google.com:
$ openssl s_client -connect google.com:443 |\
   openssl x509  -pubkey -noout |\
   openssl pkey -pubin -outform der |\
   openssl dgst -sha256 -binary |\
   openssl enc -base64
...
depth=0 ... CN = *.google.com
RTy7aSpufwRDWUudgZCwR5Xc7NETd6Imk4YlzvgKTRU=

As you can see, the public key fingerprint you had computed was the correct one. Only your assumptions about the correct fingerprints where incorrect because you've checked these against the wrong site.
","1071","<java><ssl><sha256><rsa-sha256>","1","4","1","2017-08-14 11:39:09","45668526","5","","608639","","2017-08-14 11:39:09","2017-08-14 05:47:52",""
"34454208","Signing a VSTO Excel Add-in, targeting .NET Framework 4.0, using a SHA-2 certificate","I have a VSTO 2010 Excel add-in, targeting .Net Framework 4.0, Visual Studio 2010. 
We were using a SHA-1 certificate for the past few years for signing the manifest and the assemblies. The application has been deployed for a lot of end-users. Now with the SHA-1 deprecation policy coming into effect from January 2016, the renewed certificate that has been issued by the CA is keyed using SHA-256. 
Please have a look at the files generated by building a Excel 2010 VSTO Add-in, using various versions of Visual Studio:
NOTE: The certificate used for all the following cases is keyed using SHA-2 algorithm.
.VSTO generated by VS 2010 SP1, Target Framework 4.0:
The DigestMethod Algorithm mentioned for the dependentAssembly's hash is SHA1, even when SHA2 certificate was used.
<dependentAssembly dependencyType=""install"" codebase=""ExcelAddIn1.dll.manifest"" size=""18274"">
    <assemblyIdentity name=""ExcelAddIn1.dll"" version=""1.0.0.1"" publicKeyToken=""2142698160a31911"" language=""neutral"" processorArchitecture=""msil"" type=""win32"" />
    <hash>
        <dsig:Transforms>
            <dsig:Transform Algorithm=""urn:schemas-microsoft-com:HashTransforms.Identity"" />
        </dsig:Transforms>
        <dsig:DigestMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#sha1"" />
        <dsig:DigestValue>DIGEST VALUE</dsig:DigestValue>
    </hash>
</dependentAssembly>

Under publisherIdentity tag, the SignatureMethod and the DigestMethod used is SHA256, which is according to the certificate's algorithm.
<SignatureMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#rsa-sha256"" />

<DigestMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#sha256"" />

.VSTO generated by VS 2013 SP4 and VS 2015, Target Framework 4.0:
Please note the algorithm mentioned in <dsig:DigestMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#sha1"" /> tag is SHA1. Which is same as what gets generated by VS 2010.
<dependentAssembly dependencyType=""install"" codebase=""ExcelAddIn1.dll.manifest"" size=""16058"">
    <assemblyIdentity name=""ExcelAddIn1.dll"" version=""1.0.0.0"" publicKeyToken=""2142698160a31911"" language=""neutral"" processorArchitecture=""msil"" type=""win32"" />
    <hash>
        <dsig:Transforms>
            <dsig:Transform Algorithm=""urn:schemas-microsoft-com:HashTransforms.Identity"" />
        </dsig:Transforms>
        <dsig:DigestMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#sha1"" />
        <dsig:DigestValue>DIGEST VALUE</dsig:DigestValue>
    </hash>
</dependentAssembly>

Similarly, under publisherIdentity tag, SignatureMethod and DigestMethod are still using SHA1. The .vsto file build using VS 2010 and VS 2013 SP1 are having SHA2 here.
<SignatureMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#rsa-sha1"" />

<DigestMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#sha1"" />

Will this work/be supported even after January 2016/17?
.VSTO generated by VS 2013 SP4 and VS 2015, Target Framework 4.5.2:
Please note the algorithm mentioned in <dsig:DigestMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#sha2"" /> tag is SHA2.
<dependentAssembly dependencyType=""install"" codebase=""ExcelAddIn1.dll.manifest"" size=""16058"">
    <assemblyIdentity name=""ExcelAddIn1.dll"" version=""1.0.0.0"" publicKeyToken=""2142698160a31911"" language=""neutral"" processorArchitecture=""msil"" type=""win32"" />
    <hash>
        <dsig:Transforms>
             <dsig:Transform Algorithm=""urn:schemas-microsoft-com:HashTransforms.Identity"" />
        </dsig:Transforms>
        <dsig:DigestMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#sha2"" />
        <dsig:DigestValue>DIGEST VALUE</dsig:DigestValue>
    </hash>
</dependentAssembly>

SignatureMethod and DigestMethod are now indicating SHA2 algorithm.
<SignatureMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#rsa-sha2"" />

<DigestMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#sha2"" />

It seems that the update in VS 2013 SP3 (also available in VS 2015) is using/enforcing the algorithm as per the .Net Framework being targeted. 
For .Net Framework 4.0, the DigestMethod and SigntureMethod are always SHA1, irrespective of the certificate used. Now the add-in works on machine having only .Net 4.0 as the VSTO/clickonce loader does not have to deal with SHA2 at all.
So, considering that SHA-2 certificates have to be used starting January 2016, what should be the configuration used for signing the add-in with SHA-2 certificate?

VS 2010, .Net Framework 4.0 and SHA-2 certificate (Does not work without .Net Framework 4.5 or newer installed on the machine)
VS 2015, .Net Framework 4.0 and SHA-2 certificate (This is no different from using SHA-1 certificates. The VSTO files have only SHA-1 entries, not sure whether this will work after January 2016)
VS 2015, .Net Framework 4.5.2 and SHA-2 certificate (Not suitable for me. I need to keep the target framework as 4.0)

I am installing the Excel add-ins on machines offline. They are always loaded from the file system.
[HKEY_CURRENT_USER\Software\Microsoft\Office\Excel\Addins\ExcelAddin1]
""Description""=""ExcelAddin1 - COM add-in created with Visual Studio Tools for Office""
""FriendlyName""=""ExcelAddin1""
""Manifest""=""file:///C:/published/Addins/ExcelAddin1.vsto|vstolocal""
""LoadBehavior""=dword:00000003

Thank you.
","","1067","<excel><.net-4.0><vsto><digital-signature><sha256>","5","","0","2015-12-24 14:41:08","","1","1","376904","","2015-12-24 14:41:08","2015-12-24 14:23:14",""
"40641912","C# HMAC Sha256 equivalent in Node","I'm trying to port a C# application into Node. 
The app has this C# function to generate a Sha256 
    public static string CreateSHA256Signature(string targetText)
        {
            string _secureSecret = ""E49756B4C8FAB4E48222A3E7F3B97CC3"";
            byte[] convertedHash = new byte[_secureSecret.Length / 2];
            for (int i = 0; i < _secureSecret.Length / 2; i++)
            {
                convertedHash[i] = (byte)Int32.Parse(_secureSecret.Substring(i * 2, 2), System.Globalization.NumberStyles.HexNumber);
            }


            string hexHash = """";
            using (HMACSHA256 hasher = new HMACSHA256(convertedHash))
            {
                byte[] hashValue = hasher.ComputeHash(Encoding.UTF8.GetBytes(targetText));
                foreach (byte b in hashValue)
                {
                    hexHash += b.ToString(""X2"");
                }
            }
            return hexHash;
        }
    Response.Write(CreateSHA256Signature(""TEST STRING""));
    // returns 55A891E416F480D5BE52B7985557B24A1028E4DAB79B64D0C5088F948EB3F52E

I tried to use node crypto as following:
 console.log(crypto.createHmac('sha256', 'E49756B4C8FAB4E48222A3E7F3B97CC3').update('TEST STRING', 'utf-8').digest('hex'))
// returns bc0a28c3f60d323404bca7dfc4261d1280ce46e887dc991beb2c5bf5e7ec6100

How can I get the same C# result in node?
","Your key is different from the C# version. Try to convert the hex string to raw bytes. This way crypto knows to take the bytes instead of the actual string.
For example:
var crypto = require('crypto');

var key = Buffer.from('E49756B4C8FAB4E48222A3E7F3B97CC3', 'hex');
console.log(crypto.createHmac('sha256', key).update('TEST STRING').digest('hex'))

","1066","<c#><node.js><sha256><hmac>","1","2","2","2017-12-30 18:01:09","40642240","0","","","","","2016-11-16 20:41:26",""
"40641912","C# HMAC Sha256 equivalent in Node","I'm trying to port a C# application into Node. 
The app has this C# function to generate a Sha256 
    public static string CreateSHA256Signature(string targetText)
        {
            string _secureSecret = ""E49756B4C8FAB4E48222A3E7F3B97CC3"";
            byte[] convertedHash = new byte[_secureSecret.Length / 2];
            for (int i = 0; i < _secureSecret.Length / 2; i++)
            {
                convertedHash[i] = (byte)Int32.Parse(_secureSecret.Substring(i * 2, 2), System.Globalization.NumberStyles.HexNumber);
            }


            string hexHash = """";
            using (HMACSHA256 hasher = new HMACSHA256(convertedHash))
            {
                byte[] hashValue = hasher.ComputeHash(Encoding.UTF8.GetBytes(targetText));
                foreach (byte b in hashValue)
                {
                    hexHash += b.ToString(""X2"");
                }
            }
            return hexHash;
        }
    Response.Write(CreateSHA256Signature(""TEST STRING""));
    // returns 55A891E416F480D5BE52B7985557B24A1028E4DAB79B64D0C5088F948EB3F52E

I tried to use node crypto as following:
 console.log(crypto.createHmac('sha256', 'E49756B4C8FAB4E48222A3E7F3B97CC3').update('TEST STRING', 'utf-8').digest('hex'))
// returns bc0a28c3f60d323404bca7dfc4261d1280ce46e887dc991beb2c5bf5e7ec6100

How can I get the same C# result in node?
","For Python ninjas
import hmac
import hashlib
import binascii

def create_sha256_signature(key, message):
    byte_key = binascii.unhexlify(key)
    message = message.encode()
    return hmac.new(byte_key, message, hashlib.sha256).hexdigest().upper()

http://www.pyscoop.com/generate-hmac-sha256-signature-in-python/
","1066","<c#><node.js><sha256><hmac>","1","0","2","2017-12-30 18:01:09","40642240","0","","","","","2016-11-16 20:41:26",""
"20840345","Bitcoin address generation","The bitcoin wiki  says this:

How to create Bitcoin Address
0 - Having a private ECDSA key  
18E14A7B6A307F426A94F8114701E7C8E774E7F9A47E2C2035DB29A206321725

1 - Take the corresponding public key generated with it    0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6
2 - Perform SHA-256 hashing on the public key
600FFE422B4E00731A59557A5CCA46CC183944191006324A447BDB2D98D4B408


but when I run a sha256 on 0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6
I don't get 
600FFE422B4E00731A59557A5CCA46CC183944191006324A447BDB2D98D4B408

What I get is
32511e82d56dcea68eb774094e25bab0f8bdd9bc1eca1ceeda38c7a43aceddce

what am I doing wrong?
","Convert the hex string back to bytes and sha256 the bytes.
Something like that:
>>> hex_string = ('0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6')
>>> hex_data = hex_string.decode('hex')
>>> hashlib.sha256(hex_data).hexdigest()
'600ffe422b4e00731a59557a5cca46cc183944191006324a447bdb2d98d4b408'

","1062","<sha256><bitcoin>","4","8","1","2018-09-17 10:25:15","20860070","1","3","1278112","","2017-11-17 06:36:03","2013-12-30 13:16:07",""
"43634996","How long would it take for a sha256 digest loop to reach the original hash or start cycling?","If I started with a sha256 hash such as
3f46fdad8e5d6e04e0612d262b3c03649f4224e04d209295ef7de7dc3ffd78a7

and rehashed it continuously (without salting):
i) What is the shortest time it would take before it started cycling in a loop or back onto the same value if at all?
ii) If it did cycle back on itself, could we assume that it had been cracked? 
iii) How long would this take using modern GPU cracking techniques? 
iv) If all the intermediary hashes were recorded in some kind of rainbow tables - presumably all the hashes within that cycle would be compromised?
v) What is to stop someone computing these cycles and offering cracks to sha256 hashes - likewise for other hashing protocols...
For Extra marks - What is the probability this question would be asked in this forum 60 billion years ago?
","
If values generated by sha256 can be assumed to be distributed uniformly and randomly, then there exists with probability 1/e (about 37%) a 256-bit sequence whose sha256 hash is equal to itself. If so, the minimum sequence length is one.
On the other hand, based on the pigeonhole principle, we know that the sequence must repeat after no more than 2256 iterations. This doesn't say anything about the brokenness of sha256.
The maximum cycle length is 2256 ≈ 1.16×1077 iterations. If you can evaluate 1012 hashes per second, then working your way through all possible hashes would take you about 1065 seconds (about one quindecillion times the age of the earth). Even if you're fortunate enough find a loop in a tiny fraction of that time, you're still liable to be waiting for trillions of years.
Good luck with that. If every atom in our galaxy was used to store a separate hash value, you would run out of space after storing less than one billionth of the total number of hashes. (Source: number of atoms in milky way galaxy ≈ 1068)
See 3 and 4
A similar question was asked about 9 years ago.

","1050","<encryption><hash><gpu><sha256><cracking>","0","2","1","2017-04-26 14:13:35","43636715","0","","","","","2017-04-26 13:01:12",""
"21386760","Perl combine MD5 / SHA2 sum from multiple files to a MD5 / SHA2 sum","Below is the code which generates MD5 / SHA2 sum of individual files present under directory or sub directories recursively. 
#!/usr/bin/perl -w
use strict;
use warnings;
use File::Find;
use IO::File;
use Digest::MD5;
use Digest::SHA qw(sha256_hex);

find({ wanted => \&process_file, no_chdir => 1 }, @ARGV);

sub process_file {
    #my $md5 = Digest::MD5->new;
    my $sha2 = Digest::SHA->new(256);
    if (-f $_) {
        #print ""This is a file: $_\n"";
        open(FILE, $_) or die ""Can not open $_"";
        binmode(FILE);
        #my $md5sum = $md5->addfile(*FILE)->hexdigest;
        my $sha2sum = $sha2->addfile(*FILE)->hexdigest;
        #print sha256_hex(*FILE), ""  $_\n"";
        close FILE;
        print ""$sha2sum  $_\n"";
    }
}

The output of above code is given below.
~$ perl list.pl src
f21e1caa364eaad195d968d28187d5cf1a58c0b7b1f21a8ebcb9ca2539dde175  src/test1.pl
4b3277ec41ba0ff8ed6f9f2593c42e08c2f4e9b66df0d63de7c91559ff7e86fa  src/random.py
076231fcbe5887a163278b757f99fb05b27163775ec4706cb2365de3be0906ac  src/test.pl
8806c9f58fc91b2e1d6453a7af7e4f9f8b94e2d0f67a84a89b35bfbf517399be  src/size.pl
5a1b2080ecc53ced45ed3aa13e47118a9ca2f8505b1e89485b6b681d8e1d264c  src/test2.py
5f7c1ff9c7b3dd32f75558dd30324ec085c45a0d0c62190b9a96f211cdf216ea  src/java/test3.class
3728ee1a86443fffe9eafd84db82ce68c9640a0a984958f579b0da1a74283d7c  src/java/test4.wav
d7169ffbb231e93f47d1c54fddf2144b459bba228de48c30b4bc5a4d297be6fb  src/java/test5.java

Updated code to support sha256sum generation.
Now I want to generate a combined MD5 / SHA2 sum from these MD5 / SHA2 sums as input.
","
Digest::MD5 was first released as a Core module with perl v5.7.3 (March 2002) [1]. The oldest version of perl being widely used today is v5.8.8, so any perl you are going to encounter will have this module available.
The oldest version of Digest::MD5 which I could find (v1.99.59-TRIAL from 1998) already has the add and addfile methods. So whatever version of that module you encounter, you will have the add method available.

You can therefore safely rely on that functionality, instead of having to use some ugly and unportable hack like calling a command line tool.
Make sure that you traverse each directory in a specific order so that the checksum is reproducible.
Note that MD5 is an effectively broken algorithm, which shouldn't be used except to interface with legacy systems. The SHA-2 family of hash functions is preferable for most tasks where a fast hash is required.

[1] Use the corelist command line tool from Module::Corelist to query core modules of different perl versions.
","1050","<perl><sha256><md5sum><sha2>","2","1","2","2014-01-28 12:17:53","","4","","570200","","2014-01-27 19:09:25","2014-01-27 16:55:38","2014-04-19 05:49:36"
"21386760","Perl combine MD5 / SHA2 sum from multiple files to a MD5 / SHA2 sum","Below is the code which generates MD5 / SHA2 sum of individual files present under directory or sub directories recursively. 
#!/usr/bin/perl -w
use strict;
use warnings;
use File::Find;
use IO::File;
use Digest::MD5;
use Digest::SHA qw(sha256_hex);

find({ wanted => \&process_file, no_chdir => 1 }, @ARGV);

sub process_file {
    #my $md5 = Digest::MD5->new;
    my $sha2 = Digest::SHA->new(256);
    if (-f $_) {
        #print ""This is a file: $_\n"";
        open(FILE, $_) or die ""Can not open $_"";
        binmode(FILE);
        #my $md5sum = $md5->addfile(*FILE)->hexdigest;
        my $sha2sum = $sha2->addfile(*FILE)->hexdigest;
        #print sha256_hex(*FILE), ""  $_\n"";
        close FILE;
        print ""$sha2sum  $_\n"";
    }
}

The output of above code is given below.
~$ perl list.pl src
f21e1caa364eaad195d968d28187d5cf1a58c0b7b1f21a8ebcb9ca2539dde175  src/test1.pl
4b3277ec41ba0ff8ed6f9f2593c42e08c2f4e9b66df0d63de7c91559ff7e86fa  src/random.py
076231fcbe5887a163278b757f99fb05b27163775ec4706cb2365de3be0906ac  src/test.pl
8806c9f58fc91b2e1d6453a7af7e4f9f8b94e2d0f67a84a89b35bfbf517399be  src/size.pl
5a1b2080ecc53ced45ed3aa13e47118a9ca2f8505b1e89485b6b681d8e1d264c  src/test2.py
5f7c1ff9c7b3dd32f75558dd30324ec085c45a0d0c62190b9a96f211cdf216ea  src/java/test3.class
3728ee1a86443fffe9eafd84db82ce68c9640a0a984958f579b0da1a74283d7c  src/java/test4.wav
d7169ffbb231e93f47d1c54fddf2144b459bba228de48c30b4bc5a4d297be6fb  src/java/test5.java

Updated code to support sha256sum generation.
Now I want to generate a combined MD5 / SHA2 sum from these MD5 / SHA2 sums as input.
","Try:
use File::Find 'find';
use Digest::SHA 'sha256_hex';

my @allsums;

sub process_file {
  push @allsums, Digest::SHA->new(256)->addfile($_)->hexdigest . "" $_"" if -f $_;
}

find({ wanted => \&process_file, no_chdir => 1 }, @ARGV);

print sha256_hex(join ':', sort @allsums), ""\n"";

","1050","<perl><sha256><md5sum><sha2>","2","0","2","2014-01-28 12:17:53","","4","","570200","","2014-01-27 19:09:25","2014-01-27 16:55:38","2014-04-19 05:49:36"
"22231051","Encrypting a XML file in Java with a password","I'm doing this project for a client and the part i'm currently stuck on involves taking a XML String and encrypting it - this doesn't need to be state of the art, it just needs to encrypt it and decrypt it using a password.
So far the user enters a password which i've hashed using SHA-256, I then try and encrypt it by doing this:
public static String encryptString(String password, String source, String fileName, String fileDir) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, FileNotFoundException, IOException {
    FileOutputStream fos = null;
    CipherInputStream cis;

    byte key[] = password.getBytes();
    SecretKeySpec secretKey = new SecretKeySpec(key, ""DES"");

    Cipher encrypt = Cipher.getInstance(""DES/ECB/PKCS5Padding"");
    encrypt.init(Cipher.ENCRYPT_MODE, secretKey);

    InputStream fileInputStream = new ByteArrayInputStream(source.getBytes());//Here I am getting file data as byte array. You can convert your file data to InputStream  by other way too.

    File dataFile = new File(fileDir, fileName); //dataDir is location where my file is stored
    if (!dataFile.exists()) {
        cis = new CipherInputStream(fileInputStream, encrypt);
        try {
            fos = new FileOutputStream(dataFile);
            byte[] b = new byte[32];
            int i;
            while ((i = cis.read(b)) != -1) {
                fos.write(b, 0, i);
            }
            return fileName;
        } finally {
            try {
                if (fos != null) {
                    fos.flush();
                    fos.close();
                }
                cis.close();
                fileInputStream.close();
            } catch (IOException e) {
                //IOException
            }
        }
    }
    return """";
}

The password being passed in is the hashed password - from here I try and run it but I get a:
java.security.InvalidKeyException: Invalid key length: 64 bytes exception.
Can someone help please?
Or tell me of a better way to encrypt an XML file with a password?
Thanks
","From the docs.

If this cipher requires any algorithm parameters that cannot be
  derived from the given key, the underlying cipher implementation is
  supposed to generate the required parameters itself (using
  provider-specific default or random values) if it is being initialized
  for encryption or key wrapping, and raise an InvalidKeyException if it
  is being initialized for decryption or key unwrapping. The generated
  parameters can be retrieved using getParameters or getIV (if the
  parameter is an IV).

A very simple way of encrypting is taking your hash and XOR it with the bytes in the file in a loop (256 bits at a time). It's kind of a low-level approach but you won't need to debug the API. You should be able to implement this with very minimal code.
","1046","<java><xml><encryption><sha256><des>","0","0","1","2014-03-06 17:07:33","22231229","0","2","","","","2014-03-06 16:59:05",""
"4907584","How do I get the sha-256 hash of a section which contains code in a Portable Executable file, in Delphi?","I would like to get the sha-256 hash for a section which contains code(.text, CODE) in a Portable Executable file, in Delphi. 
So far, I've tried to get the start and end address of the section to which the AddressOfEntryPoint points to, but if I load the same file several times, I get different start and end addresses.  
Can anyone please help me?    
This is the code:
procedure TForm1.Button1Click(Sender: TObject);
var x:TJCLPEImage;
aoep,cs,ce: cardinal;
pise: Pimagesectionheader;
nos : integer;
i : integer;
begin

x := TJCLPEImage.Create();
x.FileName:=edit1.Text;
aoep := x.OptionalHeader32.AddressOfEntryPoint;
pise := Pointer(PByte(@(x.LoadedImage.FileHeader.OptionalHeader)) + x.LoadedImage.FileHeader.FileHeader.SizeOfOptionalHeader);

for i:=0 to x.ImageSectionCount-1 do
begin
if (pise.VirtualAddress <= aoep) and (aoep < (pise.VirtualAddress + pise.Misc.VirtualSize)) then
    break;

end;

inc(pise);

cs := DWORD(x.LoadedImage.MappedAddress) + DWORD(pise.PointerToRawData);
ce := cs + pise.Misc.VirtualSize;

Label1.caption:='Code start: '+Inttostr(cs);
Label2.caption:='Code end: '+inttostr(ce);

end;

Thank you.
","I cant comment to your question yet, so i am trying to reply here, but not sure if i am thinking right about what you are asking.
Seems you want a way to assure no one changed your file after it loaded in memory.
That's why you want a sha-256 hash of that section, and probably you need to get that section and then hash it.
I never used JCL classes to do that. But found this unit that maybe help for you. It allow you to edit PE files. Was written in 2007, so maybe you will need upgrade some code. But i am most sure you will find the bases to what you want.
http://www.coderprofile.com/networks/source-codes/71/portable-executable-file-unit
I could not test it at all. But till what i tested, the start address did not changed here..
To get the Sha-256, will find many VCL components (or at least ActiveX) to do that. I could advise you to use LIBEAY32.DLL, but that would probably add one more dll to your application. Unless you already use it.
Hope that help in anyway.
","1037","<delphi><portable-executable><sha256>","1","0","1","2012-04-15 08:41:16","","7","1","744588","","2012-04-15 08:41:16","2011-02-05 15:08:41",""
"33126900","What is the difference between “SHA-2” and “SHA-256”","I'm a bit confused on the difference between SHA-2 and SHA-256 and often hear them used interchangeably. I think SHA-2 a ""family"" of hash algorithms and SHA-256 a specific algorithm in that family. Can anyone clear up the confusion.
","Wikipedia:

The SHA-2 family consists of six hash functions with digests (hash
  values) that are 224, 256, 384 or 512 bits: SHA-224, SHA-256, SHA-384,
  SHA-512, SHA-512/224, SHA-512/256.

","1035","<sha256><sha2>","2","3","2","2015-10-16 19:00:19","33177802","0","","","","","2015-10-14 13:37:30",""
"33126900","What is the difference between “SHA-2” and “SHA-256”","I'm a bit confused on the difference between SHA-2 and SHA-256 and often hear them used interchangeably. I think SHA-2 a ""family"" of hash algorithms and SHA-256 a specific algorithm in that family. Can anyone clear up the confusion.
","The SHA-2 family consists of multiple closely related hash functions. It is essentially a single algorithm in which a few minor parameters are different among the variants.
The initial spec only covered 224, 256, 384 and 512 bit variants.
The most significant difference between the variants is that some are 32 bit variants and some are 64 bit variants. In terms of performance this is the only difference that matters.
On a 32 bit CPU SHA-224 and SHA-256 will be a lot faster than the other variants because they are the only 32 bit variants in the SHA-2 family. Executing the 64 bit variants on a 32 bit CPU will be slow due to the added complexity of performing 64 bit operations on a 32 bit CPU.
On a 64 bit CPU SHA-224 and SHA-256 will be a little slower than the other variants. This is because due to only processing 32 bits at a time, they will have to perform more operations in order to make it through the same number of bytes. You do not get quite a doubling in speed from switching to a 64 bit variant because the 64 bit variants do have a larger number of rounds than the 32 bit variants.
The internal state is 256 bits in size for the two 32 bit variants and 512 bits in size for all four 64 bit variants. So the number of possible sizes for the internal state is less than the number of possible sizes for the final output. Going from a large internal state to a smaller output can be good or bad depending on your point of view.
If you keep the output size fixed it can in general be expected that increasing the size of the internal state will improve security. If you keep the size of the internal state fixed and decrease the size of the output, collisions become more likely, but length extension attacks may become easier. Making the output size larger than the internal state would be pointless.
Due to the 64 bit variants being both faster (on 64 bit CPUs) and likely to be more secure (due to larger internal state), two new variants were introduced using 64 bit words but shorter outputs. Those are the ones known as 512/224 and 512/256.
The reasons for wanting variants with output that much shorter than the internal state is usually either that for some usages it is impractical to use such a long output or that the output need to be used as key for some algorithm that takes an input of a certain size.
Simply truncating the final output to your desired length is also possible. For example a HMAC construction specify truncating the final hash output to the desired MAC length. Due to HMAC feeding the output of one invocation of the hash as input to another invocation it means that using a hash with shorter output results in a HMAC with less internal state. For this reason it is likely to be slightly more secure to use HMAC-SHA-512 and truncate the output to 384 bits than to use HMAC-SHA-384.
The final output of SHA-2 is simply the internal state (after processing length extended input) truncated to the desired number of output bits. The reason SHA-384 and SHA-512 on the same input look so different is that a different IV is specified for each of the variants.
","1035","<sha256><sha2>","2","6","2","2015-10-16 19:00:19","33177802","0","","","","","2015-10-14 13:37:30",""
"16766282","How much entropy is there in SHA2(RAND(), 256)?","How many bits of entropy will
SELECT SHA2(RAND(), 256);

generate?
(Actual question: Is this a reasonable way of generating a random salt for a password?)
","The hash function SHA2 will not add any entrophy to the resulting salt, it just brings the result of rand() into another form. That means, all depends on the rand() function and it's implementation.
The function rand() is of course not random, if you know the state of the function (the last result), you can predict the next generated value. The state itself is based on a seed, sometimes this seed is set automatically by the application. PHP for example creates a seed from the current time and the process-id. Note that those values are somewhat predictable too, or at least will narrow down the range of possible results.
I don't know the MYSQL implementation of rand, but i would not recommend to use its rand() function to generate a salt. Actually i would never let the database generate the salt or the hash value of a password, because most databases do not provide an appropriate way to hash passwords. Instead use the development environment with a slow key-derivation function like BCrypt, such functions often create a safe salt automatically.
To answer your question, uniqueness is the main purpose of the salt, so there are weaker ways to generate a salt. Better would be a salt that is unpredictable too, so nobody can precalculate the salt (ranges of possible salts), and therefore can prepare an attack. The best way to get a salt is, to use the random source of the operating system (URANDOM).
","1028","<mysql><security><passwords><salt><sha256>","1","2","2","2013-05-28 16:03:00","16796586","3","0","","","","2013-05-27 04:26:52",""
"16766282","How much entropy is there in SHA2(RAND(), 256)?","How many bits of entropy will
SELECT SHA2(RAND(), 256);

generate?
(Actual question: Is this a reasonable way of generating a random salt for a password?)
","Let's break this down.
SHA2 can refer to one of 4 algorithms:

SHA224 - 224 bits of output
SHA256 - 256 bits of output
SHA384 - 384 bits of output
SHA512 - 512 bits of output

So they each take an arbitrary input (0 to 2^64-1 bits of data), and produce an output of a fixed size.
Note that no entropy is actually created here. However, when feeding in more than the output size bits of entropy, some is destroyed. And when we take into account the (small) possibility of collisions, sometimes inputs smaller than the output size can have entropy destroyed. Therefore, we can say that each function places an upper bound of entropy as its output size.
So hashing can't increase entropy. So that means our upper bound on entropy is the lesser of the output size of the hash, and the size of the input.
Now, your input is RAND(). Assuming that you're referring to MySQL's RAND() function, let's look at what's happening. The RAND() function produces a floating point result. Now, MySQL uses a 4-byte floating point value for FLOAT data types. That means that at most, the result contains 32 bits of entropy.
Therefore, the combination is already down to an upper bound of 32 bits of entropy. 
Thanks to the Birthday Paradox, at 32 bits of entropy, we're at a 50% chance of a collision in just 7,000 generations. That's way too low for an effective salt...
And that doesn't even touch the fact that RAND() is predictable (which isn't the end of the world in the case of a salt).
Instead, just use a library to handle the generation for you. In PHP, I'd suggest password-compat or phpass.
In other languages, I am not sure. But seriously, don't reinvent it. Just use a library (preferably one that uses bcrypt or scrypt) and be done with it. 
","1028","<mysql><security><passwords><salt><sha256>","1","5","2","2013-05-28 16:03:00","16796586","3","0","","","","2013-05-27 04:26:52",""
"33950993","php base64_encode hash_hmac and java gives different results","I saw some same questions in stack-overflow but it doesn't help me.
I have this php code
$signature=base64_encode(hash_hmac(""sha256"", trim($xmlReq), $signature_key, True));

I want to write java equivalent to that and this is my java code.
public static String encodeXML(String key, String data) {
    String result = """";
    try {
        Mac mac = Mac.getInstance(""HmacSHA256"");
        SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(""UTF-8""), ""HmacSHA256"");
        mac.init(secretKeySpec);
        result = Base64.encodeBase64String(mac.doFinal(data.getBytes(""UTF-8"")));
    } catch (NoSuchAlgorithmException | InvalidKeyException | UnsupportedEncodingException e) {
        log.error(""exception occured when encording HmacSHA256 hash"");
    }
    return result;
}

but they give different results. 
someone help. 
","PHP Test Code:
 $signature=base64_encode(hash_hmac(""sha256"", 'Message', 'secret', true));
 echo $signature;

Java Test Code:
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

import java.util.Base64;
public class TestJava {

   public static void main(String[] args) {
      try {
         String secret = ""secret"";
         String message = ""Message"";

         Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
         SecretKeySpec secret_key = new SecretKeySpec(secret.getBytes(), ""HmacSHA256"");
         sha256_HMAC.init(secret_key);

         Base64.Encoder encoder = Base64.getEncoder();
         String hash = encoder.encodeToString(sha256_HMAC.doFinal(message.getBytes()));
         System.out.println(hash);
     } catch (Exception e){
       System.out.println(""Error"");
     }
  }
}

Output for both should be:
     qnR8UCqJggD55PohusaBNviGoOJ67HC6Btry4qXLVZc=
","1027","<java><php><encoding><base64><sha256>","2","0","2","2015-11-27 15:23:35","33960446","0","4","","","","2015-11-27 05:49:36",""
"33950993","php base64_encode hash_hmac and java gives different results","I saw some same questions in stack-overflow but it doesn't help me.
I have this php code
$signature=base64_encode(hash_hmac(""sha256"", trim($xmlReq), $signature_key, True));

I want to write java equivalent to that and this is my java code.
public static String encodeXML(String key, String data) {
    String result = """";
    try {
        Mac mac = Mac.getInstance(""HmacSHA256"");
        SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(""UTF-8""), ""HmacSHA256"");
        mac.init(secretKeySpec);
        result = Base64.encodeBase64String(mac.doFinal(data.getBytes(""UTF-8"")));
    } catch (NoSuchAlgorithmException | InvalidKeyException | UnsupportedEncodingException e) {
        log.error(""exception occured when encording HmacSHA256 hash"");
    }
    return result;
}

but they give different results. 
someone help. 
","Apache Commons Codec
 import org.apache.commons.codec.binary.Base64;
 ....
 Base64.encodeBase64String(.....);

","1027","<java><php><encoding><base64><sha256>","2","1","2","2015-11-27 15:23:35","33960446","0","4","","","","2015-11-27 05:49:36",""
"10920926","calculate email hash for email using sha256","I am trying to retrieve contacts from hotmail in asp.net mvc. The response of hotmail api contains email as email hash and i know we cannot decrypt that email address hash. and There i saw one more field name field that contains actual contact email address.how could i calculate hash for that email address using sHA56 hasing.
","What about that? It assumes the strings to hash are encoded in UTF-8, the article you linked doesnt mention the Encoding that should be used.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Security.Cryptography;

namespace TestSHAHash
{
    class Program
    {
        static void Main(string[] args)
        {
            string email = ""Someone@Example.org"";
            string clientId = ""0000000603DB0F"";

            string toHash = (email.Trim() + clientId.Trim()).ToLowerInvariant();
            byte[] data = Encoding.UTF8.GetBytes(toHash);
            byte[] result;
            SHA256 shaM = new SHA256Managed();
            result = shaM.ComputeHash(data);
            string lowerHexaDecimal = BitConverter.ToString(result).Replace(""-"","""").ToLowerInvariant();
            Console.WriteLine(lowerHexaDecimal);
            Console.ReadLine();
        }
    }
}

","1018","<asp.net-mvc><c#-4.0><hotmail><sha256>","0","0","1","2012-06-06 20:03:26","10921071","0","0","999689","","2012-06-06 19:39:18","2012-06-06 19:33:52",""
"24093199","A ""pure"" scheme implementation (R5RS) of SHA256?","I can use SHA256 in Scheme using external libraries (Java, C or system dependent) or using a specific Scheme implementation (like Chicken e.g.), but I wonder if there is a ""pure"" scheme implementation.
","I wrote an implementation today. Alas, R5RS has neither bytevectors nor binary I/O, so this uses the R7RS APIs for bytevectors and binary I/O. It should be easy to bridge those APIs to your Scheme implementation's native APIs (for example, I actually tested my implementation on Racket and Guile).
A few notes:

This code assumes case-sensitivity. This is the default for R7RS, but not R5RS, so if you're using an R5RS implementation, beware.
It requires SRFIs 1, 26, 43, and 60.
I emphasise elegance and clarity over speed. In fact, the code is quite slow.
Contrary to what my profile says, I'm only licensing this code under the Apache Licence 2.0 (in addition to the standard Stack Overflow licence of CC BY-SA 3.0), and not under CC0 or anything resembling public domain.

Anyway, without further ado, here it is (also available as a Gist):
;;; Auxiliary definitions to avoid having to use giant tables of constants.

(define primes80 '(2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73
                   79 83 89 97 101 103 107 109 113 127 131 137 139 149 151 157
                   163 167 173 179 181 191 193 197 199 211 223 227 229 233 239
                   241 251 257 263 269 271 277 281 283 293 307 311 313 317 331
                   337 347 349 353 359 367 373 379 383 389 397 401 409))

(define (sqrt x)
  (fold (lambda (_ y) (/ (+ (/ x y) y) 2)) 4 (iota 7)))

(define (cbrt x)
  (fold (lambda (_ y) (/ (+ (/ x y y) y y) 3)) 4 (iota 8)))

(define (frac x scale base)
  (bitwise-and (floor (* x (arithmetic-shift 1 scale)))
               (- (arithmetic-shift 1 base) 1)))

;;; The actual initialisation and constant values.

(define sha1-init '(#x67452301 #xefcdab89 #x98badcfe #x10325476 #xc3d2e1f0))
(define sha2-init (map (lambda (x) (frac (sqrt x) 64 64)) (take primes80 16)))
(define-values (sha512-init sha384-init) (split-at sha2-init 8))
(define sha256-init (map (cut arithmetic-shift <> -32) sha512-init))
(define sha224-init (map (cut frac <> 0 32) sha384-init))

(define sha1-const (map (lambda (x) (frac (sqrt x) 30 32)) '(2 3 5 10)))
(define sha512-const (map (lambda (x) (frac (cbrt x) 64 64)) primes80))
(define sha256-const (map (cut arithmetic-shift <> -32) (take sha512-const 64)))

;;; Utility functions used by the compression and driver functions.

(define (u32+ . xs) (bitwise-and (apply + xs) #xffffffff))
(define (u64+ . xs) (bitwise-and (apply + xs) #xffffffffffffffff))
(define (bitwise-majority x y z)
  (bitwise-xor (bitwise-and x y) (bitwise-and x z) (bitwise-and y z)))

(define (bytevector-be-ref bv base n)
  (let loop ((res 0) (i 0))
    (if (< i n)
        (loop (+ (arithmetic-shift res 8) (bytevector-u8-ref bv (+ base i)))
              (+ i 1))
        res)))
(define (bytevector-u64-ref bv i)
  (bytevector-be-ref bv (arithmetic-shift i 3) 8))
(define (bytevector-u32-ref bv i)
  (bytevector-be-ref bv (arithmetic-shift i 2) 4))

(define (bytevector-be-set! bv base n val)
  (let loop ((i n) (val val))
    (when (positive? i)
      (bytevector-u8-set! bv (+ base i -1) (bitwise-and val 255))
      (loop (- i 1) (arithmetic-shift val -8)))))

(define (md-pad! bv offset count counter-size)
  (define block-size (bytevector-length bv))
  (unless (negative? offset)
    (bytevector-u8-set! bv offset #x80))
  (let loop ((i (+ offset 1)))
    (when (< i block-size)
      (bytevector-u8-set! bv i 0)
      (loop (+ i 1))))
  (when count
    (bytevector-be-set! bv (- block-size counter-size) counter-size
                        (arithmetic-shift count 3))))

(define (hash-state->bytevector hs trunc word-size)
  (define result (make-bytevector (* trunc word-size)))
  (for-each (lambda (h i)
              (bytevector-be-set! result i word-size h))
            hs (iota trunc 0 word-size))
  result)

;;; The compression functions.

(define (sha2-compress K Σ0 Σ1 σ0 σ1 mod+ getter hs)
  (define W (vector->list (apply vector-unfold
                                 (lambda (_ a b c d e f g h i j k l m n o p)
                                   (values a b c d e f g h i j k l m n o p
                                           (mod+ a (σ0 b) j (σ1 o))))
                                 (length K)
                                 (list-tabulate 16 getter))))
  (define (loop k w a b c d e f g h)
    (if (null? k)
        (map mod+ hs (list a b c d e f g h))
        (let ((T1 (mod+ h (Σ1 e) (bitwise-if e f g) (car k) (car w)))
              (T2 (mod+ (Σ0 a) (bitwise-majority a b c))))
          (loop (cdr k) (cdr w) (mod+ T1 T2) a b c (mod+ d T1) e f g))))
  (apply loop K W hs))

(define (sha512-compress bv hs)
  (define (rotr x y) (rotate-bit-field x (- y) 0 64))
  (define (shr x y) (arithmetic-shift x (- y)))
  (sha2-compress sha512-const
                 (lambda (x) (bitwise-xor (rotr x 28) (rotr x 34) (rotr x 39)))
                 (lambda (x) (bitwise-xor (rotr x 14) (rotr x 18) (rotr x 41)))
                 (lambda (x) (bitwise-xor (rotr x 1) (rotr x 8) (shr x 7)))
                 (lambda (x) (bitwise-xor (rotr x 19) (rotr x 61) (shr x 6)))
                 u64+ (cut bytevector-u64-ref bv <>) hs))

(define (sha256-compress bv hs)
  (define (rotr x y) (rotate-bit-field x (- y) 0 32))
  (define (shr x y) (arithmetic-shift x (- y)))
  (sha2-compress sha256-const
                 (lambda (x) (bitwise-xor (rotr x 2) (rotr x 13) (rotr x 22)))
                 (lambda (x) (bitwise-xor (rotr x 6) (rotr x 11) (rotr x 25)))
                 (lambda (x) (bitwise-xor (rotr x 7) (rotr x 18) (shr x 3)))
                 (lambda (x) (bitwise-xor (rotr x 17) (rotr x 19) (shr x 10)))
                 u32+ (cut bytevector-u32-ref bv <>) hs))

(define (sha1-compress bv hs)
  (define (getter x) (bytevector-u32-ref bv x))
  (define (rotl x y) (rotate-bit-field x y 0 32))
  (define W (vector->list (apply vector-unfold
                                 (lambda (_ a b c d e f g h i j k l m n o p)
                                   (values a b c d e f g h i j k l m n o p
                                           (rotl (bitwise-xor a c i n) 1)))
                                 80
                                 (list-tabulate 16 getter))))
  (define (outer f k w a b c d e)
    (if (null? k)
        (map u32+ hs (list a b c d e))
        (let inner ((i 0) (w w) (a a) (b b) (c c) (d d) (e e))
          (if (< i 20)
              (let ((T (u32+ (rotl a 5) ((car f) b c d) e (car k) (car w))))
                (inner (+ i 1) (cdr w) T a (rotl b 30) c d))
              (outer (cdr f) (cdr k) w a b c d e)))))
  (apply outer (list bitwise-if bitwise-xor bitwise-majority bitwise-xor)
               sha1-const W hs))

;;; The Merkle-Damgård ""driver"" function.

(define (md-loop init compress block-size trunc word-size counter-size in)
  (define leftover (- block-size counter-size))
  (define bv (make-bytevector block-size))
  (define pad! (cut md-pad! bv <> <> counter-size))
  (define hs->bv (cut hash-state->bytevector <> trunc word-size))

  (let loop ((count 0) (hs init))
    (define read-size (read-bytevector! bv in))
    (cond ((eof-object? read-size)
           (pad! 0 count)
           (hs->bv (compress bv hs)))
          ((= read-size block-size)
           (loop (+ count read-size) (compress bv hs)))
          ((< read-size leftover)
           (pad! read-size (+ count read-size))
           (hs->bv (compress bv hs)))
          (else
           (pad! read-size #f)
           (let ((pen (compress bv hs)))
             (pad! -1 (+ count read-size))
             (hs->bv (compress bv pen)))))))

;;; SHA-512/t stuff.

(define sha512/t-init (map (cut bitwise-xor <> #xa5a5a5a5a5a5a5a5) sha512-init))
(define (make-sha512/t-init t)
  (define key (string->utf8 (string-append ""SHA-512/"" (number->string t))))
  (define size (bytevector-length key))
  (define bv (make-bytevector 128))
  (bytevector-copy! bv 0 key)
  (md-pad! bv size size 16)
  (sha512-compress bv sha512/t-init))

(define (make-sha512/t t)
  (define init (make-sha512/t-init t))
  (define words (arithmetic-shift t -6))
  (if (zero? (bitwise-and t 63))
      (cut md-loop init sha512-compress 128 words 8 16 <>)
      (lambda (in)
        (bytevector-copy
         (md-loop init sha512-compress 128 (ceiling words) 8 16 in)
         0 (arithmetic-shift t -3)))))

;;; Public entry points.

(define sha1 (cut md-loop sha1-init sha1-compress 64 5 4 8 <>))
(define sha224 (cut md-loop sha224-init sha256-compress 64 7 4 8 <>))
(define sha256 (cut md-loop sha256-init sha256-compress 64 8 4 8 <>))
(define sha384 (cut md-loop sha384-init sha512-compress 128 6 8 16 <>))
(define sha512 (cut md-loop sha512-init sha512-compress 128 8 8 16 <>))
(define sha512/256 (make-sha512/t 256))
(define sha512/224 (make-sha512/t 224))

I implemented all the algorithms in FIPS 180-4, but you can strip out whatever you don't need.

As mentioned before, I tested this on Racket; the definitions I added to bridge to Racket's APIs are as follows:
#lang racket
(require (only-in srfi/1 iota)
         (only-in srfi/26 cut)
         (only-in srfi/43 vector-unfold)
         (only-in srfi/60 bitwise-if rotate-bit-field)
         (rename-in racket/base [build-list list-tabulate]
                                [bytes-copy! bytevector-copy!]
                                [bytes-length bytevector-length]
                                [bytes-ref bytevector-u8-ref]
                                [bytes-set! bytevector-u8-set!]
                                [foldl fold]
                                [make-bytes make-bytevector]
                                [read-bytes! read-bytevector!]
                                [string->bytes/utf-8 string->utf8]
                                [subbytes bytevector-copy]))

And here are the definitions for Guile (requires version 2.0.11 or above):
(use-modules (srfi srfi-1) (srfi srfi-26) (srfi srfi-43) (srfi srfi-60)
             (rnrs bytevectors) (ice-9 binary-ports))

(define* (bytevector-copy bv #:optional (start 0) (end (bytevector-length bv)))
  (define copy (make-bytevector (- end start)))
  (bytevector-copy! copy 0 bv start end)
  copy)
(define* (bytevector-copy! to at from #:optional (start 0)
                                                 (end (bytevector-length from)))
  ((@ (rnrs bytevectors) bytevector-copy!) from start to at (- end start)))
(define* (read-bytevector! bv #:optional (port (current-input-port)) (start 0)
                                         (end (bytevector-length bv)))
  (get-bytevector-n! port bv start (- end start)))

It should be easy to make something similar for your chosen implementation.

I also have a function that prints out the output as a hex string, for ready comparison with various command-line SHA-1 and SHA-2 utilities (e.g., sha1sum, sha256sum, sha512sum, etc.):
(define (hex bv)
  (define out (open-output-string))
  (do ((i 0 (+ i 1)))
      ((>= i (bytevector-length bv)) (get-output-string out))
    (let-values (((q r) (truncate/ (bytevector-u8-ref bv i) 16)))
      (display (number->string q 16) out)
      (display (number->string r 16) out))))

","1014","<hash><scheme><sha256><r5rs>","5","13","1","2016-05-30 00:17:01","24101699","1","8","","","","2014-06-07 02:56:10",""
"37335481","What is different about HashAlgorithm is new SHA256Managed() vs. SHA256Managed.Create()","I seem to be seeing SHA-2 being done 2 different ways. 
Yes I get that 1 is ""newed"" (instantiated) vs. a Create Method on the other but it seems that that achieve the same identical object 
HashAlgorithm sha2 = new SHA256Managed();

vs.            

SHA256 sha2 = SHA256Managed.Create();

Does ""sha2"" act the same? if not what is the difference and why are there 2 types written?
","The .Create method might give you a platform optimized version of implementation (though the current code from Microsoft might not use that opportunity in all possible places). 
For example, if this call is made on a machine with hardware encryption support, it might return a hardware-specific version.
Thus, it would be a better option to avoid using a specific implementation in your own code. 
","1013","<c#><hash><sha256><sha>","3","2","1","2016-05-23 03:35:59","37339029","6","","","","","2016-05-19 23:08:38",""
"36626223","CC_SHA256 generates same output for different input","Here's a basic CC_SHA256 example:
-(void)hash:(NSData *)input
{
    NSLog(@""Input is %@"", [self NSDataToHex:input]);

    NSMutableData *result = [NSMutableData dataWithLength:CC_SHA256_DIGEST_LENGTH];

    CC_SHA256(CFBridgingRetain(input), input.length, result.mutableBytes);

    NSLog(@""RESULT is %@"", result);
}

This algorithm appears to be working correctly. A little test:
NSString* str = @""abcde"";
NSData* data = [str dataUsingEncoding:NSUTF8StringEncoding];

[self hash:data];

NSString* str2 = @""fghijk"";
NSData* data2 = [str2 dataUsingEncoding:NSUTF8StringEncoding];

[self hash:data2];

Gives the following output:
Input is 6162636465
RESULT is <91681b5f 162cf494 238e5cac 0debbe92 c3ede9bf 4bcc7e79 845b774f b33e99f7>
Input is 666768696A6B
RESULT is <cccf7b6f 9acb96ae 84e9852b 1a753825 d6750555 57175c78 f86cf5fb bb3cfca7>

Now, if I change the second argument (input.length) to 3, I get the following output:
Input is 6162636465
RESULT is <5e83c408 f722bb9a 9f602d85 c186bcb1 ebb8fa2f 0df2cc08 5eaf2522 92b01570>
Input is 666768696A6B
RESULT is <5e83c408 f722bb9a 9f602d85 c186bcb1 ebb8fa2f 0df2cc08 5eaf2522 92b01570>

These hashes are the same. I would expect the CC_SHA256 algorithm to just hash the first 3 characters of my input, but apparently, it doesn't work like that. Furthermore, if I relaunch the simulator, the hashes that are generated are different than the first time (but still equal to each other).
Why is this behaviour happening? Please don't give an (obvious) workaround for this problem. I really want to know why the algorithm behaves this way.
","SHA (and any hashing algorithm) should be deterministic and so the fact that it varies between launches shows that you are likely using it incorrectly.
My guess is if you just pass in the reference of input you are hashing some internal data related to NSData and thus the first few bytes are the same but different between lanches. 
Check out one of these other questions (Sha256 in Objective-C for iPhone) for a proper implementation of SHA-256 on iOS.
(from above answer):
-(NSString*)sha256HashFor:(NSString*)input
{   
    const char* str = [input UTF8String];
    unsigned char result[CC_SHA256_DIGEST_LENGTH];
    CC_SHA256(str, strlen(str), result);

    NSMutableString *ret = [NSMutableString stringWithCapacity:CC_SHA256_DIGEST_LENGTH*2];
    for(int i = 0; i<CC_SHA256_DIGEST_LENGTH; i++)
    {
        [ret appendFormat:@""%02x"",result[i]];
    }
    return ret;
}

","1002","<objective-c><sha256>","1","3","1","2016-04-14 14:53:32","36626800","3","","","","","2016-04-14 14:29:46",""
"15084452","Convert a clientsecret into a private key","I'm working with Google Cloud Storage in AppEngine and I'm attempting to use a POST form to upload a file to GCS.  The problem I'm having is with the steps needed to sign the policy document.  I can easily fetch the client_secret, which is a String from the client_secrets.json that the API Console gave me.  however, in order to create a signature, I need to convert that string into a PrivateKey object.  Here's what my code looks like:
//create the policy document and encode it
String policyDocument = ...  //omitted for brevity
String encodedPolicy = Base64.encodeString(policyDocument);

//sign using SHA256 with RSA
String secretKey = ... //I fetch this from client_secrets.json
Signature sig = Signature.getInstance(""SHA256withRSA"");
sig.initSign(secretKey); //THIS IS THE PROBLEM!  
sig.update(encodedPolicy.getBytes(""UTF-8""));        
String signature = new String(Base64.encode(sig.sign()));

//put the values in the request attributes so we can fetch them from a JSP
req.setAttribute(""policy"", encodedPolicy);
req.setAttribute(""signature"", signature);

As noted above, my problem is in the line
sig.initSign(secretKey); //THIS IS THE PROBLEM!  

secretKey is a String.  Signature.initSign() expects a PrivateKey, or one of its descendant objects.  How do I convert the string in the client_secrets.json into a PrivateKey (or derived) object that I can pass Signature.initSign?
Any help would be greatly appreciated.  Thanks
OK, here's where I am right now.  I tried the suggestions below, and all of the documentation is urging me to use the client_secret in the client_secrets.json file downloaded from the Google API console, not the service account.  And besides, I'm trying to construct an example of a user's upload, not a service account.  
I found the following code on another page:
public static String signPolicyDocument(String policyDocument, String secret) {     
try {
        Mac mac = Mac.getInstance(""HmacSHA256"");
        byte[] secretBytes = secret.getBytes();
        SecretKeySpec signingKey = new SecretKeySpec(secretBytes, ""HmacSHA256"");
        mac.init(signingKey);
        byte[] signedSecretBytes = mac.doFinal(policyDocument.getBytes());          
        return new String(Base64.encode(signedSecretBytes));
    } catch (InvalidKeyException e) {
        throw new RuntimeException(e);
    } catch (NoSuchAlgorithmException e) {
        throw new RuntimeException(e);
    }

And it gets me all the way through the process...until I submit the resulting form.  Then I get the following response: 
The request signature we calculated does not match the signature you provided. Check your Google secret key and signing method.

What signing method is it looking for?
","Here's what I think you need to do:
KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(keyBytes);
PrivateKey privateKey = keyFactory.generatePrivate(keySpec);
sig.initSign(privateKey);

The keyBytes variable should contain a byte[] array with your service account key file in it.
","1000","<google-app-engine><sha256><google-cloud-storage>","2","1","3","2013-02-28 00:19:33","15119771","2","3","2110333","","2013-02-27 00:48:16","2013-02-26 08:24:24",""
"15084452","Convert a clientsecret into a private key","I'm working with Google Cloud Storage in AppEngine and I'm attempting to use a POST form to upload a file to GCS.  The problem I'm having is with the steps needed to sign the policy document.  I can easily fetch the client_secret, which is a String from the client_secrets.json that the API Console gave me.  however, in order to create a signature, I need to convert that string into a PrivateKey object.  Here's what my code looks like:
//create the policy document and encode it
String policyDocument = ...  //omitted for brevity
String encodedPolicy = Base64.encodeString(policyDocument);

//sign using SHA256 with RSA
String secretKey = ... //I fetch this from client_secrets.json
Signature sig = Signature.getInstance(""SHA256withRSA"");
sig.initSign(secretKey); //THIS IS THE PROBLEM!  
sig.update(encodedPolicy.getBytes(""UTF-8""));        
String signature = new String(Base64.encode(sig.sign()));

//put the values in the request attributes so we can fetch them from a JSP
req.setAttribute(""policy"", encodedPolicy);
req.setAttribute(""signature"", signature);

As noted above, my problem is in the line
sig.initSign(secretKey); //THIS IS THE PROBLEM!  

secretKey is a String.  Signature.initSign() expects a PrivateKey, or one of its descendant objects.  How do I convert the string in the client_secrets.json into a PrivateKey (or derived) object that I can pass Signature.initSign?
Any help would be greatly appreciated.  Thanks
OK, here's where I am right now.  I tried the suggestions below, and all of the documentation is urging me to use the client_secret in the client_secrets.json file downloaded from the Google API console, not the service account.  And besides, I'm trying to construct an example of a user's upload, not a service account.  
I found the following code on another page:
public static String signPolicyDocument(String policyDocument, String secret) {     
try {
        Mac mac = Mac.getInstance(""HmacSHA256"");
        byte[] secretBytes = secret.getBytes();
        SecretKeySpec signingKey = new SecretKeySpec(secretBytes, ""HmacSHA256"");
        mac.init(signingKey);
        byte[] signedSecretBytes = mac.doFinal(policyDocument.getBytes());          
        return new String(Base64.encode(signedSecretBytes));
    } catch (InvalidKeyException e) {
        throw new RuntimeException(e);
    } catch (NoSuchAlgorithmException e) {
        throw new RuntimeException(e);
    }

And it gets me all the way through the process...until I submit the resulting form.  Then I get the following response: 
The request signature we calculated does not match the signature you provided. Check your Google secret key and signing method.

What signing method is it looking for?
","To upload a file to GCS from Appengine you can use the blobstore Api. Follow the steps described in Using Blobstore with GCS. The advantage is that you don't have to worry about keys and the code is much simpler.
","1000","<google-app-engine><sha256><google-cloud-storage>","2","0","3","2013-02-28 00:19:33","15119771","2","3","2110333","","2013-02-27 00:48:16","2013-02-26 08:24:24",""
"15084452","Convert a clientsecret into a private key","I'm working with Google Cloud Storage in AppEngine and I'm attempting to use a POST form to upload a file to GCS.  The problem I'm having is with the steps needed to sign the policy document.  I can easily fetch the client_secret, which is a String from the client_secrets.json that the API Console gave me.  however, in order to create a signature, I need to convert that string into a PrivateKey object.  Here's what my code looks like:
//create the policy document and encode it
String policyDocument = ...  //omitted for brevity
String encodedPolicy = Base64.encodeString(policyDocument);

//sign using SHA256 with RSA
String secretKey = ... //I fetch this from client_secrets.json
Signature sig = Signature.getInstance(""SHA256withRSA"");
sig.initSign(secretKey); //THIS IS THE PROBLEM!  
sig.update(encodedPolicy.getBytes(""UTF-8""));        
String signature = new String(Base64.encode(sig.sign()));

//put the values in the request attributes so we can fetch them from a JSP
req.setAttribute(""policy"", encodedPolicy);
req.setAttribute(""signature"", signature);

As noted above, my problem is in the line
sig.initSign(secretKey); //THIS IS THE PROBLEM!  

secretKey is a String.  Signature.initSign() expects a PrivateKey, or one of its descendant objects.  How do I convert the string in the client_secrets.json into a PrivateKey (or derived) object that I can pass Signature.initSign?
Any help would be greatly appreciated.  Thanks
OK, here's where I am right now.  I tried the suggestions below, and all of the documentation is urging me to use the client_secret in the client_secrets.json file downloaded from the Google API console, not the service account.  And besides, I'm trying to construct an example of a user's upload, not a service account.  
I found the following code on another page:
public static String signPolicyDocument(String policyDocument, String secret) {     
try {
        Mac mac = Mac.getInstance(""HmacSHA256"");
        byte[] secretBytes = secret.getBytes();
        SecretKeySpec signingKey = new SecretKeySpec(secretBytes, ""HmacSHA256"");
        mac.init(signingKey);
        byte[] signedSecretBytes = mac.doFinal(policyDocument.getBytes());          
        return new String(Base64.encode(signedSecretBytes));
    } catch (InvalidKeyException e) {
        throw new RuntimeException(e);
    } catch (NoSuchAlgorithmException e) {
        throw new RuntimeException(e);
    }

And it gets me all the way through the process...until I submit the resulting form.  Then I get the following response: 
The request signature we calculated does not match the signature you provided. Check your Google secret key and signing method.

What signing method is it looking for?
","The final answer to this problem is like the conclusion of Wargames.  As WOPR said, ""A strange game...the only way to win is not to play.""  Avoid signing and policy document and all that crap and use the blobstore.
(See this:  https://developers.google.com/appengine/docs/java/blobstore/overview#using-blobstore-with-gcs)  
It's very easy to implement; when you create your temporary blobstore upload URL like so:
    //open the blobstore service and create the upload url
    BlobstoreService bs = BlobstoreServiceFactory.getBlobstoreService();        
    String uploadUrl = bs.createUploadUrl(""/display"",
            UploadOptions.Builder.withGoogleStorageBucketName(bucket));

The downside to this approach is the object name will be a string of characters you don't recognize.  You can open the blobstore viewer and see your object by file name in the blobstore, but in GCS its object name will be gobbledygook.  (A hash, maybe?  A randomly assigned ID)?
","1000","<google-app-engine><sha256><google-cloud-storage>","2","1","3","2013-02-28 00:19:33","15119771","2","3","2110333","","2013-02-27 00:48:16","2013-02-26 08:24:24",""
"14435132","What is DigestUtils sha256 encoding equivalent from JavaScript?","I call following and create the password hash.
ByteString password = ByteString.copyFrom(DigestUtils.sha256(""mypassword""));

But now I need to send the sha256 converted password message from client (JavaScript). I tired to use CryptoJS as following
 var pass = CryptoJS.SHA256(document.getElementById('password').value);
    var passhash = pass.toString(CryptoJS.enc.Latin1)
    login(passhash);

I tried all Base64, Latin1, and Hex types to get the string. But it will not produce the same password as the one in Java
","Problem was with character encoding. Following fixed the problem. 
in JS: 
var password = pass.toString(CryptoJS.enc.Utf16); 

In Java:
byte[] passhash = jsCryptoString.getBytes(""UTF-16BE"");

","997","<javascript><apache-commons><sha><sha256>","1","1","1","2013-01-21 09:39:17","14435856","2","1","","","","2013-01-21 08:49:10",""
"30305759","What is the right public key to verify a gtoken JWT from Google Identity Toolkit?","I am trying to verify the signature of the JSON Web Token ""gtoken"" that is returned by Google Identity Toolkit. 
However, it appears that the ""signature"" is 256 bytes but the public keys in the certificates found at https://www.googleapis.com/oauth2/v1/certs are only 128 bytes. Thus I get the error ""Signature longer than key"". 
I'm using this Perl code:
use JSON;
use CGI;
use LWP::Simple;
use Crypt::OpenSSL::X509;
use Crypt::OpenSSL::RSA;
use MIME::Base64;

my $cgi = CGI->new();
my $json = JSON->new();

my $gtoken = $cgi->cookie('gtoken');

my ($header64, $body64, $signature64) = split(/\./, $gtoken, 3);
my $signed64 = ""$header64.$body64"";

$signature64 =~ s/\-/+/g;
$signature64 =~ s/\_/\//g;
my $m = length($signature64) % 4;
$signature64.=""=="" if($m == 2);
$signature64.=""="" if($m == 3);
my $signature = decode_base64($signature64);
# Note that length($signature) == 256 here.

my $certs = $json->decode(get(""https://www.googleapis.com/oauth2/v1/certs""));
foreach my $cert (values %$certs) {
    eval {
        my $x509 = Crypt::OpenSSL::X509->new_from_string( $cert );
        my $rsa_pub = Crypt::OpenSSL::RSA->new_public_key($x509->pubkey());
        # Note that $rsa_pub->size() == 128 here.
        $rsa_pub->use_sha256_hash();
        $rsa_pub->verify($signed64, $signature);
    };
    warn $@ if $@;
}

Is there somewhere else I should look for a 2048 bit (256 byte) key used by google to sign JWTs for Google Identity Toolkit? Or is there a way to verify a 256 byte signature with a 128 byte public key? Or am I extracting the public key from the cert incorrectly? The fact that the signature is 256 bytes implies that the public key I use to verify the signature should also be 256 bytes as far as I can tell. 
I also tried using the JSON::WebToken CPAN module but had the same problem with the key being shorter than the signature. 
","Google provides the gitkit library ported to various languages, and it has (at least for the node.js version which I use) a method for retrieving the public key handily from a common uri. Perl doesn't seem to be one of the languages, so I suggest that you get the Python version and try to mimic it the Perl way.
Check here for API reference and the uri from which the gitgit library gets the public key: https://developers.google.com/identity/toolkit/web/reference/relyingparty/getPublicKeys.
Check here for the Python quick-start app. It's got the link to the library: https://developers.google.com/identity/toolkit/web/quickstart/python.
Good luck.
","996","<perl><x509><sha256><jwt><google-identity-toolkit>","1","1","1","2015-05-20 05:17:15","","3","","","","","2015-05-18 14:22:27",""
"29831433","Wrong SHA-256 hash of a string in MessageDigest","in some tests i using MessageDigest library in Groovy and sometimes this function returns incorrect value. Here is my code below:
import java.security.MessageDigest;
String.metaClass.toSHA256 = {
    def messageDigest = MessageDigest.getInstance(""SHA-256"")
    messageDigest.update(delegate.getBytes(""UTF-8""))
    new BigInteger(1, messageDigest.digest()).toString(16).padLeft(40, '0')
}

for example - i tryed to encode to SHA-256 this string:
582015-04-23 20:47:112015-04-23 23:59:000020502015-04-23 20:47:11tests-from-api[""afoot""]33facafaece3afd353bcbe88637d11b7

My method return
cb2814380117cd5621064c1d7512b32e3cb8c8cb2b1f20016f6da763598d738
But online generators, returns 0cb2814380117cd5621064c1d7512b32e3cb8c8cb2b1f20016f6da763598d738
it calculates wrong like 2 times in 40 tries
Could you help me how to fix it?
","You're missing a '0' at the start, because you're padding left to 40 characters (presumably having copied that code from something where the hash is expected to be 40 characters) instead of the 64 characters that actually makes up a SHA-256 hash (in hex).
So you could just fix the padLeft code - but personally I would just avoid using BigInteger for hex conversions. That's not what it's designed for - it's designed for maths operations on large integers.
Instead, use one of the many hex converters in common utility libraries - which are designed precisely to convert byte arrays to hex, with nothing about integers at all. If you don't want to use a library, there's plenty of code on Stack Overflow to convert a byte[] to hex.
","989","<java><groovy><sha256><message-digest>","-1","1","1","2015-04-23 18:28:13","29831560","2","","","","","2015-04-23 18:21:50",""
"42533731","system.security.cryptography.SHA256Managed in .NET 4.5 (Windows 10)","I am using the following VBA function to get the SHA256 value for a file;
Public Function FileToSHA256(sfilename As String) As String
    Dim enc
    Dim bytes
    Dim outstr As String
    Dim pos As Integer
    Set enc = CreateObject(""System.Security.Cryptography.SHA256Managed"")
    'Convert the string to a byte array and hash it
    bytes = GetFileBytes(sfilename)
    bytes = enc.ComputeHash_2((bytes))
    'Convert the byte array to a hex string
    For pos = 1 To LenB(bytes)
        outstr = outstr & LCase(Right(""0"" & Hex(AscB(MidB(bytes, pos, 1))), 2))
    Next
    FileToSHA256 = outstr 'Returns a 40 byte/character hex string
    Set enc = Nothing
End Function

Private Function GetFileBytes(ByVal path As String) As Byte()
    Dim lngFileNum As Long
    Dim bytRtnVal() As Byte
    lngFileNum = FreeFile
    If LenB(Dir(path)) Then ''// Does file exist?
        Open path For Binary Access Read As lngFileNum
        ReDim bytRtnVal(LOF(lngFileNum) - 1&) As Byte
        Get lngFileNum, , bytRtnVal
        Close lngFileNum
    Else
        Err.Raise 53
    End If
    GetFileBytes = bytRtnVal
    Erase bytRtnVal
End Function

This works perfectly under a Windows 7 environment on Word 2013. I do not know the .NET version this runs on (presuming 3.5).
It has now been launched onto a Windows 10 Environment (still Word 2013). I have been told by our IT dept that this is on .NET 4.5, but according to VBA its running from .NET frameworks 4.0.30319.
It now throws error  - 

Run-Time Error '-2146232576 (80131700)' Automation Error

on this line;
Set enc = CreateObject(""System.Security.Cryptography.SHA256Managed"")

I have MSCORLIB.DLL referenced in the project.
I can't figure out if I need to add additional references or change the code.
If a code change is necessary, it would need to cover the earlier version of .NET also, something with a case check to cover different versions, but I am not sure how to do this.
","I have been unable to get mscorlib to work. But I found a module which circumvents it all together. It may be of use to others who have limited/no access to the full .NET framework. 
http://khoiriyyah.blogspot.com/2012/06/vb6-hash-class-md5-sha-1-sha-256-sha.html
","986","<.net><vba><sha256>","3","0","1","2017-03-22 09:01:17","","2","2","141661","","2017-03-01 14:04:18","2017-03-01 14:00:28",""
"25044582","How to extend vertex shader capabalities for GPGPU","I'm trying to implement Scrypt hasher (for LTC miner) on GLSL (don't ask me why).
And, actually, I'm stucked with HMAC SHA-256 algorithm. Despite I've implemented SHA-256 correctly (it retuns corrent hash for input), fragment shader stops to compile when I add  the last step (hashing previous hash concated with oKey).
The shader can't do more than three rounds of SHA-256. It just stops to compile. What are the limits? It doesn't use much memory, 174 vec2 objects in total. It seems, it doesn't relate to memory, because any extra SHA256 round doesn't require new memory. And it seems, it doesn't relate to viewport size. It stops to work on both 1x1 and 1x128 viewports.
I've started to do miner on WebGL, but after limit appeared, I've tried to run the same shader in the Qt on the full featured OpenGL. In result, desktop OpenGL allows one SHA256 round lesser then OpenGL ES in WebGL (why?).
Forgot to mention. Shader fails on the linkage stage. The shader compiles well itself, but the program linkage fails.
I don't use any textures, any extensions, slow things etc. Just simple square (4 vec2 vertecies) and several uniforms for fragment shader. 
Input data is just 80 bytes, the result of fragment shader is binary (black or white), so the task ideally fits the GLSL principes. 
My videocard is Radeon HD7970 with plenty of VRAM, which is able to fit hundreds of scrypt threads (scrypt uses 128kB per hash, but I can't achieve just HMAC-SHA-256). My card supports OpenGL 4.4.
I'm newbie in OpenGL, and may understand something wrong. I understand that fragment shader runs for each pixel separately, but if I have 1x128 viewport, there are only 128x348 bytes used. Where is the limit of fragment shader. 
Here is the common code I use to let you understand, how I'm trying to solve the problem.
uniform vec2 base_nonce[2];
uniform vec2 header[20];    /* Header of the block */
uniform vec2 H[8];
uniform vec2 K[64];

void sha256_round(inout vec2 w[64], inout vec2 t[8], inout vec2 hash[8]) {
    for (int i = 0; i < 64; i++) {
        if( i > 15 ) {
            w[i] = blend(w[i-16], w[i-15], w[i-7], w[i-2]);
        }

        _s0 = e0(t[0]);
        _maj = maj(t[0],t[1],t[2]);
        _t2 = safe_add(_s0, _maj);
        _s1 = e1(t[4]);
        _ch = ch(t[4], t[5], t[6]);
        _t1 = safe_add(safe_add(safe_add(safe_add(t[7], _s1), _ch), K[i]), w[i]);

        t[7] = t[6]; t[6] = t[5]; t[5] = t[4];
        t[4] = safe_add(t[3], _t1);
        t[3] = t[2]; t[2] = t[1]; t[1] = t[0];
        t[0] = safe_add(_t1, _t2);
    }
    for (int i = 0; i < 8; i++) {
        hash[i] = safe_add(t[i], hash[i]);
        t[i] = hash[i];
    }
}

void main () {
    vec2 key_hash[8]; /* Our SHA-256 hash */
    vec2 i_key[16];
    vec2 i_key_hash[8];
    vec2 o_key[16];

    vec2 nonced_header[20]; /* Header with nonce */
    set_nonce_to_header(nonced_header);

    vec2 P[32]; /* Padded SHA-256 message */
    pad_the_header(P, nonced_header);

    /* Hash HMAC secret key */
    sha256(P, key_hash);

    /* Make iKey and oKey */
    for(int i = 0; i < 16; i++) {
        if (i < 8) {
            i_key[i] = xor(key_hash[i], vec2(Ox3636, Ox3636));
            o_key[i] = xor(key_hash[i], vec2(Ox5c5c, Ox5c5c));
        } else {
            i_key[i] = vec2(Ox3636, Ox3636);
            o_key[i] = vec2(Ox5c5c, Ox5c5c);
        }
    }

    /* SHA256 hash of iKey */

    for (int i = 0; i < 8; i++) {
        i_key_hash[i] = H[i];
        t[i] = i_key_hash[i];
    }

    for (int i = 0; i < 16; i++) { w[i] = i_key[i]; }
    sha256_round(w, t, i_key_hash);

    gl_FragColor = toRGBA(i_key_hash[0]);
}

What solutions can I use to improve the situation? Is there something cool in OpenGL 4.4, in OpenGL ES 3.1? Is it even possible to do such calculations and keep so much (128kB) in fragment shader? What are limits for the vertex shader? Can I do the same on the vertex shader instead the fragment?
","I try to answer on the my own question. 
Shader is a small processor with limited registers and cache memory. Also, there are limit for instruction execution. So, the whole architecture to fit all into one fragment shader is wrong.
On another way, you can change your shader programs during render tens or hundreds times. It is normal practice.
It is necessary to divide big computation into smaller parts and render them separately. Use render-to-texture to save your work. 
Due to the webgl statistic, 96.5% of clients has MAX_TEXTURE_SIZE eq 4096. It gives you 32 megabytes of memory. It can contain the draft data for 256 threads of scrypt computation. 
","982","<opengl><webgl><gpgpu><sha256><fragment-shader>","2","1","1","2014-07-31 09:27:32","25055363","8","1","523965","","2014-07-30 19:04:43","2014-07-30 18:46:35",""
"19246227","C# Hash complete xml","We are trying to hash a xml file, i already have it working that it hashes the contents of the XML.
For which i am using the following code:
        XmlDocument doc = new XmlDocument();
        doc.PreserveWhitespace = true;
        doc.Load(txtFile.Text);

        XmlNodeList list = doc.GetElementsByTagName(""Document"");

        XmlElement node = (XmlElement)list[0];
        //node.SetAttribute(""xmlns:xsi"", ""http://www.w3.org/2001/XMLSchema-instance"");
        string s = node.OuterXml;

        using (MemoryStream msIn = new MemoryStream(Encoding.UTF8.GetBytes(s)))
        {
            XmlDsigC14NTransform t = new XmlDsigC14NTransform(true);
            t.LoadInput(msIn);
            using (var hash = new SHA256Managed())
            {
                byte[] digest = t.GetDigestedOutput(hash);
                txtHash.Text = BitConverter.ToString(digest).Replace(""-"", String.Empty);
            }
        }

however, this only hashes the contents of the XML.
What i need is to hash the complete XML instead of only the contents.
If we only hash the contents, our hash doesnt compare with the control we get.
","You can read the file contents without creating a XmlDocument and hash the contents:
var file = File.ReadAllBytes(txtFile.Text);
using (var hash = new SHA256Managed())
{
   byte[] digest = hash.ComputeHash(file);
   txtHash.Text = BitConverter.ToString(digest).Replace(""-"", String.Empty);
}

","981","<c#><asp.net><hash><sha256>","0","0","1","2013-10-08 11:19:28","19246331","1","","","","","2013-10-08 11:14:08",""
"25414218","MySQL - Using SHA2 in WHERE Clause","thanks in advance! So here is my query
$query = ""
        SELECT
            A.id
            U.email,
            SHA2(U.email, 256) AS sha
        FROM S.Action A
        LEFT JOIN S.Users U
            ON U.ID = A.id
        WHERE A.id = "". $id .""
        "";

Which works fine, and 'sha' has the expected value. However, what I want to do is add this WHERE condition in 
AND SHA2(U.email, 256) = "". $pass .""

But as soon as that is entered, the query returns with nothing. When I dump out $pass and 'sha' after the query returns, without that WHERE condition, they match. But when I try to look at that match before everything is grabbed, it finds nothing. Is this something I cannot do?
","I suspect in the first example, $userid is an integer and the column id is some type of INT  as well, so it's being cast to integer and working fine 
The second where clause you're adding to query, the result of the SHA2 funciton is clearly not an integer but a string, so it should be in quotes:
   $query = ""
       SELECT
        A.id
        U.email,
        SHA2(U.email, 256) AS sha
       FROM S.Action A
       LEFT JOIN S.Users U
        ON U.ID = A.id
        WHERE A.id = "". $id ."" AND SHA2(U.email, 256) = '"".$pass.""'"";   

Note that if this input is coming from user input, you'll want to use parameters and not concatenate the query together as is done above. This could open your site up to SQL injection attacks.
","975","<mysql><sha256>","1","3","1","2014-08-20 21:43:26","25414256","0","","","","","2014-08-20 20:53:57",""
"28862395","How to use Javascript to call an external library's function inside of a function?","Hello so I am using the CryptoJS library to do a SHA256 hash. I am having the problem where it allows me to do something like this.
<script src=""https://crypto-js.googlecode.com/svn/tags/3.1.2/build/rollups/sha256.js""></script>

<script> var p = CryptoJS.sha256(""password""); </script>

but not this
<script src=""https://crypto-js.googlecode.com/svn/tags/3.1.2/build/rollups/sha256.js""></script>

<script>
 function login() {
 var p = CryptoJS.sha256(""password"");
 } </script>

This gives me an undefined function error.
I am new to JavaScript... so I may just not be that familiar with scopes and external libraries could someone help clarify this for me?
","If you call the function login() as you have it written all that will happen is that a hash of the word ""password"" will be generated and assigned to the variable p. -- and that is all! 
If you want a working function you need to do something with this variable p. You could start by looking at what is being generated by adding console.log(p) inside the function and taking a look at your console.
And if all you are looking for is the hash of ""password"" you can return p.
Good luck!
","974","<javascript><jquery><scope><sha256>","0","1","1","2015-09-17 01:38:13","","1","","1324","","2015-09-17 01:38:13","2015-03-04 18:44:04",""
"18541046","openssl sha256 difference between two way of calculating","I am using openssl sha256 function with C++. 
What is the difference between the below two way of calculating sha256 ?
Way1: Just call SHA256 method like below
SHA256((unsigned char*)buffer_to_hash, buffer_size, hashed_payload);
Way2: Use SHA256_CTX, SHA256_Init, SHA256_Update and SHA256_Final. As mentioned here
generate sha256 with openssl and C++
Both the programs produce the same result
Example for both methods have been mentioned here
","Modulo bugs and such, the two have basically different intents. The first does batch style processing. That is to say: you give it one complete string, and it produces a hash of that complete string.
The second does hashing incrementally. If you don't have (or want) access to the entire string to be hashed at once, it allows you to read some data, operate on it, read some more, operate on it, and so on until you've read all the data. At the end, you can get the overall hash of the entire data stream.
Just for example, let's assume you're running this on a computer with 4 Gigs of RAM, and you want to hash a 16 gigabyte file. Since the data won't fit in RAM (or even close to it) the second is probably a better choice for this case. Likewise, if you're receiving data over the network, but don't (necessarily) want to store all the raw packets just so you can hash them and (for example) acknowledge receipt.
","967","<c++><openssl><sha><sha256>","1","2","1","2013-08-31 05:06:35","","0","1","-1","","2017-05-23 11:51:58","2013-08-30 20:32:06",""
"36299388","Getting Server Seed","I have my friends website which has some online gaming system. And this game has something called server seed. Actually it will be in sha256 mode and i tried to get that hash value, but failed on it. It will be hidden on the present day of running game and will be revealed on the next day. Is there any way to get that server seed (probably the hash value or the original string). Thanks so much for helping me from this.b
","You are asking to reverse engineer SHA-256 ... which is impossible. I'm assuming this is for CSGO gambling websites or something so the only way you could know what the hash value of today's server seed is by knowing what the input is.
","967","<php><server><sha256>","0","0","1","2017-01-26 03:50:02","","0","","3787519","","2016-03-30 05:17:46","2016-03-30 03:56:18",""
"29313571","Implementing SHA-256 in C++","I am trying to implement SHA-256 in MSVC++. I am nearly there, except for extending the first 16 words of the message schedule array into the remaining 48. I have identified my problem to be at this point because it exactly matches the example from nist.gov until round 17 of the compression algorithm. My code for the message schedule is as follows:     
//Extend first 16 words into the remaining 48 words of the message schedule array:
for (int k = 16; k < 64; k++)
{
    bitset<32> s0 = rotr(W[k - 15], 7) ^= rotr(W[k - 15], 18) ^= (W[k - 15] >> 3);
    bitset<32> s1 = rotr(W[k - 2], 17) ^= rotr(W[k - 2], 19) ^= (W[k - 2] >> 10);
    W[k] = add(add(W[k - 16], s0), add(W[i - 7], s1));
}

bitset<32> add(bitset<32> a, bitset<32> b)
{
    unsigned long c = a.to_ulong();
    unsigned long d = b.to_ulong();
    return bitset<32>((c + d) % 4294967296);
}

bitset<32> rotr(bitset<32> b, int num)
{
    int temp = (int)b.to_ulong();
    temp = _rotr(temp, num);
    return bitset<32> (temp);
}

Where W[0..15] is a copy of the padded message (which matches the example).
Does anyone see a problem? The full code is here. It's about 170 lines.
","This question is quite old, but it hasn't been answered or closed, so I assume an answer is still welcome  
In extending the first 16 words of the message schedule array into the remaining 48, you probably meant for the third call to the add function to read add(W[k-7], s1) instead of add(W[i-7], s1)
Array index i-7 is less than zero for the first 7 chunks.
","967","<c++><algorithm><visual-studio><sha><sha256>","1","0","1","2019-01-27 14:02:54","","5","0","4723025","","2015-03-29 14:22:37","2015-03-28 04:08:30",""
"41070550","Shiro matching credentialsMatcher and user password creation not matching","I am using shiro as authentication for my java 1.8 application. My user creation will sha256 and salt.
Shiro will only match passwords when they are exact in the database an entered. For example if the database password was in plaintext and was 'password' and i entered 'password' it would work.
If i entered 'password' when the password is encrypted in the database it does not match and will fail.
How do i get shiro to create a sha256 and salted password from what was entered so the passwords will match?
My user creation code
EntityManagerFactory factory = 
                    Persistence.createEntityManagerFactory(""e"");

            EntityManager em = factory.createEntityManager();
            em.getTransaction().begin();

            com.e.dto.User user = new com.e.dto.User();

            DefaultPasswordService a = new DefaultPasswordService();
            password = a.encryptPassword(password);

            user.setUsername(username);
            user.setPassword(password);

            em.persist(user);

        em.getTransaction().commit();

shiro.ini
jdbcRealm=org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.authenticationQuery = SELECT password from user where username = ?
jdbcRealm.userRolesQuery = select role from userroles where userID = (select id FROM user WHERE username = ?)

ds = com.mysql.jdbc.jdbc2.optional.MysqlDataSource
ds.serverName = localhost
ds.user = root
ds.password = password
ds.databaseName = myDatabase
jdbcRealm.dataSource= $ds

credentialsMatcher = org.apache.shiro.authc.credential.HashedCredentialsMatcher
credentialsMatcher.hashAlgorithmName = SHA-256
credentialsMatcher.storedCredentialsHexEncoded = true
credentialsMatcher.hashIterations = 10000
credentialsMatcher.hashSalted = true

New Users password
$shiro1$SHA-256$500000$xRvz5dByhvAtFG7VHlCjHA==$xxakvEZdBF6cI+UmyR1OY098tAlscOKhpwQuT7THijw=

","To get the passwords to match the DefaultPasswordService object must be created in the ini and then set as org.apache.shiro.authc.credential.PasswordMatcher passwordService value
https://shiro.apache.org/static/1.3.1/apidocs/org/apache/shiro/authc/credential/PasswordService.html
passwordService = org.apache.shiro.authc.credential.DefaultPasswordService
# configure the passwordService to use the settings you desire

passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher
passwordMatcher.passwordService = $passwordService

","964","<java><security><shiro><sha256>","0","1","1","2016-12-10 23:44:22","","0","","","","","2016-12-09 23:45:16",""
"33909697","Can I find a sha256 hash based on results it produces?","Alright guys, basically I have this code:
$code =""39b7d32fcb743c244c569a56d6de4dc27577d6277d6cf155bdcba6d05befcb34"";
$code2 = ""9999999"";
$code3 = ""56985"";
$hash = hash(""sha256"",$code.""-"".$code2.""-"".$code3);
$result = hexdec(substr($hash,0,8)) % 15;
echo $result;

It's a random number generator range 0 to 14.
The code3 variable is the only one that keeps changing(and result of course), the other ones are static values. After each number is generated, the code3 value is increased by 1.
The thing is, I don't have the $code value, at least not currently, it periodically changes, and when it changes the previous code is revealed. My mission is to find the code value before it changes, it seems like a sha256 hash(correct me if I'm wrong). The current $code value is the only thing I don't have so my question is: Is it possible for me to find it based on last 10 or so results making like a hash cracking code comparing the results and giving me the possible hash or hashes? If so where do I start? Thank You
EDIT: I don't need to decrypt the hash or reverse it, I just need to find the hash as it is. The $code variable is a sha256 hash which I don't know and thats what I have to figure out. Even if it is by brute force method.
","sha256 hashes are one way and cannot be reversed!
Therefore it is not possible to get the codes back unless you use a brute-force method.
","963","<php><hash><sha256>","1","0","3","2015-11-25 07:14:23","","0","","5357463","","2015-11-25 06:56:07","2015-11-25 06:19:35",""
"33909697","Can I find a sha256 hash based on results it produces?","Alright guys, basically I have this code:
$code =""39b7d32fcb743c244c569a56d6de4dc27577d6277d6cf155bdcba6d05befcb34"";
$code2 = ""9999999"";
$code3 = ""56985"";
$hash = hash(""sha256"",$code.""-"".$code2.""-"".$code3);
$result = hexdec(substr($hash,0,8)) % 15;
echo $result;

It's a random number generator range 0 to 14.
The code3 variable is the only one that keeps changing(and result of course), the other ones are static values. After each number is generated, the code3 value is increased by 1.
The thing is, I don't have the $code value, at least not currently, it periodically changes, and when it changes the previous code is revealed. My mission is to find the code value before it changes, it seems like a sha256 hash(correct me if I'm wrong). The current $code value is the only thing I don't have so my question is: Is it possible for me to find it based on last 10 or so results making like a hash cracking code comparing the results and giving me the possible hash or hashes? If so where do I start? Thank You
EDIT: I don't need to decrypt the hash or reverse it, I just need to find the hash as it is. The $code variable is a sha256 hash which I don't know and thats what I have to figure out. Even if it is by brute force method.
","Hashing is the one-way transformation of a string of characters into a usually shorter fixed-length value or key that represents the original string.
The SHA (Secure Hash Algorithm) is one of a number of cryptographic hash functions. A cryptographic hash is like a signature for a text or a data file. SHA-256 algorithm generates an almost-unique, fixed size 256-bit (32-byte) hash. 
SHA-256 is one of the successor hash functions to SHA-1, and is one of the strongest hash functions available.
Every hashing cannot revert by calculation but you can map between brute force hashed plaintext like
a -> ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb
b -> 3e23e8160039594a33894f6564e1b1348bbd7a0088d42c4acb73eeaed59c009d
.
.

if you meet the same hashing data, it means that you know plaintext.
Normally,people generate the map of plaintext and hashed-text then they use database lookup.
So, this website provides the big hashing database that you can try revert it.
Although, you can use this method to revert hashing, no one have every possible word hasing database. It just contains only words on dictionary or commonly used words for password.
For more information you can use these keywords :  ""rainbow table"", ""hashing"" , ""reverse hashing lookup"", ""cryptographic hash functions""
","963","<php><hash><sha256>","1","1","3","2015-11-25 07:14:23","","0","","5357463","","2015-11-25 06:56:07","2015-11-25 06:19:35",""
"33909697","Can I find a sha256 hash based on results it produces?","Alright guys, basically I have this code:
$code =""39b7d32fcb743c244c569a56d6de4dc27577d6277d6cf155bdcba6d05befcb34"";
$code2 = ""9999999"";
$code3 = ""56985"";
$hash = hash(""sha256"",$code.""-"".$code2.""-"".$code3);
$result = hexdec(substr($hash,0,8)) % 15;
echo $result;

It's a random number generator range 0 to 14.
The code3 variable is the only one that keeps changing(and result of course), the other ones are static values. After each number is generated, the code3 value is increased by 1.
The thing is, I don't have the $code value, at least not currently, it periodically changes, and when it changes the previous code is revealed. My mission is to find the code value before it changes, it seems like a sha256 hash(correct me if I'm wrong). The current $code value is the only thing I don't have so my question is: Is it possible for me to find it based on last 10 or so results making like a hash cracking code comparing the results and giving me the possible hash or hashes? If so where do I start? Thank You
EDIT: I don't need to decrypt the hash or reverse it, I just need to find the hash as it is. The $code variable is a sha256 hash which I don't know and thats what I have to figure out. Even if it is by brute force method.
","The SHA-256 is designed, to make it impossible to find the original value by looking at the output. For short passwords it is feasible to do a brute-force attack and just try out any combination until one finds a match.
In your case the $code you need to find, is a 64 character string, which looks like the hex representation of a random 32 byte key. With 32 bytes of information you can describe about 1E77 combinations, so with 15 Giga SHA256/second you would still need about 1E58 years to brute-force.
So unless you can find out additional information about the key (e.g. a certain scheme), it is not possible to get the code. Nevertheless, the example is a bad implementation of a random number generator, it would be much safer and cheaper to read one byte from the random source of the operating system.
","963","<php><hash><sha256>","1","1","3","2015-11-25 07:14:23","","0","","5357463","","2015-11-25 06:56:07","2015-11-25 06:19:35",""
"35882476","creating HMAC in Nodejs with base64 encoded secret","I'm trying to generate HMAC of a message. The algo for HMAC generation is SHA256. The issue is i have a base64 encoded key(shared secret). How can i decode this secret to get the required hmac
Sample code:
var hmac = require('crypto').createHmac('SHA256', ""SOME_BASE64_ENCODED_SHARED_SECRET"").update(""MESSAGE"").digest('base64');

This hmac is sent to a java service. The way it does hmac generation is as follows:
Mac mac = Mac.getInstance(""HmacSha256"");
SecretKey sharedKey = new SecretKeySpec(Base64.getDecoder().decode(""SOME_BASE64_ENCODED_SHARED_SECRET""), ""TlsPremasterSecret"");
mac.init(sharedKey);
byte[] messageBytes = ""MESSAGE"".getBytes(""UTF-8"");
byte[] expectedHmac = mac.doFinal(messageBytes);
String hmac = Base64.getEncoder().encodeToString(expectedHmac));

Now, the HMACs generated by my nodejs code does not match with Java service code. How do i solve this problem?
","The base64-encoded secret needs to be decoded before passing it to crypto.createHmac():
var secret = new Buffer('SOME_BASE64_ENCODED_SHARED_SECRET', 'base64');
var hmac = require('crypto').createHmac('SHA256', secret)
                            .update('MESSAGE')
                            .digest('base64');

","961","<java><node.js><sha256><hmac>","0","1","2","2019-07-14 06:03:01","","2","","","","","2016-03-09 03:44:50",""
"35882476","creating HMAC in Nodejs with base64 encoded secret","I'm trying to generate HMAC of a message. The algo for HMAC generation is SHA256. The issue is i have a base64 encoded key(shared secret). How can i decode this secret to get the required hmac
Sample code:
var hmac = require('crypto').createHmac('SHA256', ""SOME_BASE64_ENCODED_SHARED_SECRET"").update(""MESSAGE"").digest('base64');

This hmac is sent to a java service. The way it does hmac generation is as follows:
Mac mac = Mac.getInstance(""HmacSha256"");
SecretKey sharedKey = new SecretKeySpec(Base64.getDecoder().decode(""SOME_BASE64_ENCODED_SHARED_SECRET""), ""TlsPremasterSecret"");
mac.init(sharedKey);
byte[] messageBytes = ""MESSAGE"".getBytes(""UTF-8"");
byte[] expectedHmac = mac.doFinal(messageBytes);
String hmac = Base64.getEncoder().encodeToString(expectedHmac));

Now, the HMACs generated by my nodejs code does not match with Java service code. How do i solve this problem?
","//include crypto
var crypto = require('crypto');

var yourMessage = 'your signature to be hashed using HMAC SHA256';
var sharedSecret = 'your shared secret key';
//generate hmac sha256 hash
var hmacSignature = crypto.createHmac('SHA256', new Buffer(sharedSecret, 'base64')).update(yourMessage).digest('base64');

Above worked for me too. 
Note: HMAC SHA256 is hash value, it cannot be decoded. Based on unique secret and unique message (generally date-time is used) a unique hash is created. Client sends this hash value and server generates its own hash value using same algorith, if both hash value match then authorization is successful.
I spent lot of time troubleshooting this. Hope above info help others.
","961","<java><node.js><sha256><hmac>","0","0","2","2019-07-14 06:03:01","","2","","","","","2016-03-09 03:44:50",""
"46176184","How an array is ""tightly packed"" in Solidity","I am trying to create a hash (sha256) of an array but I don't understand how it works.
for example : 
pragma solidity 0.4.11;
contract test { bytes32 public hash; bytes32 public hash2; bytes32 public hash3; bytes32 public hash4;
function test () {
    address[2] memory _add;
    _add[0] = 0xca35b7d915458ef540ade6068dfe2f44e8fa733c;
    _add[1] = 0xca35b7d915458ef540ade6068dfe2f44e8fa733c;
    hash = sha256(_add[0],_add[1]);
    hash2 = sha256(_add);

    _add[0] = 0;
    _add[1] = 0;
    hash3 = sha256(_add[0],_add[1]);
    hash4 = sha256(_add);
}

hash is different from hash2 and hash3 is different from hash4... why?
The ""tightly packed"" data should result in the same hash ... no?
Best,
","""Tightly packed"" no longer applies when dealing with an array. You must zerofill to 32 bytes.
Unfortunately, I couldn't find the docs to validate that, so all I can do is give an example to show it works.
Side Note: Are you sure you want sha256 instead of keccak256, which is used most other places in Ethereum?
Demo
I'll demonstrate with sha3 (the same as keccak256), but the concept is the same.
Baseline
In Remix, you'll find that:
sha3([0xca35b7d915458ef540ade6068dfe2f44e8fa733c, 0xca35b7d915458ef540ade6068dfe2f44e8fa733c]);

gives the result: 0x77e5189111eb6557e8a637b27ef8fbb15bc61d61c2f00cc48878f3a296e5e0ca
Rebuild, with Web3.py
from web3 import Web3, IPCProvider

web3 = Web3(IPCProvider())

addr = 'ca35b7d915458ef540ade6068dfe2f44e8fa733c'
zerofilled = addr.zfill(64)  # 64 hex chars == 32 bytes
two_packed = zerofilled * 2

sha = web3.sha3('0x' + two_packed, encoding='hex')
assert sha == '0x77e5189111eb6557e8a637b27ef8fbb15bc61d61c2f00cc48878f3a296e5e0ca'

For what it's worth, you can also get the result with:
web3.soliditySha3(
  ['address[2]'],
  [[
    '0xca35b7d915458ef540ade6068dfe2f44e8fa733c',
    '0xca35b7d915458ef540ade6068dfe2f44e8fa733c',
  ]],
)

","956","<sha256><sha><ethereum><solidity>","2","0","2","2017-09-13 16:17:46","","0","","8468225","","2017-09-12 12:43:57","2017-09-12 12:18:04",""
"46176184","How an array is ""tightly packed"" in Solidity","I am trying to create a hash (sha256) of an array but I don't understand how it works.
for example : 
pragma solidity 0.4.11;
contract test { bytes32 public hash; bytes32 public hash2; bytes32 public hash3; bytes32 public hash4;
function test () {
    address[2] memory _add;
    _add[0] = 0xca35b7d915458ef540ade6068dfe2f44e8fa733c;
    _add[1] = 0xca35b7d915458ef540ade6068dfe2f44e8fa733c;
    hash = sha256(_add[0],_add[1]);
    hash2 = sha256(_add);

    _add[0] = 0;
    _add[1] = 0;
    hash3 = sha256(_add[0],_add[1]);
    hash4 = sha256(_add);
}

hash is different from hash2 and hash3 is different from hash4... why?
The ""tightly packed"" data should result in the same hash ... no?
Best,
","Actually, the issue was that all the elements of the array are converted to Bytes32 (adding a padding of zeros)...
So basically :
data before hash = ca35b7d915458ef540ade6068dfe2f44e8fa733cca35b7d915458ef540ade6068dfe2f44e8fa733c
data before hash2 = 000000000000000000000000ca35b7d915458ef540ade6068dfe2f44e8fa733c000000000000000000000000ca35b7d915458ef540ade6068dfe2f44e8fa733c
data before hash3 = 00000000000000000000000000000000000000000000000000000000000000000000000000000000
data before hash4 = 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
","956","<sha256><sha><ethereum><solidity>","2","1","2","2017-09-13 16:17:46","","0","","8468225","","2017-09-12 12:43:57","2017-09-12 12:18:04",""
"8627375","Binary strings to Hex strings java","I have this code here, which get a plain text, and turns it to a 512-bit binary string.
Then, I would like to turn each 32-bit piece of the string to 8-bit of Hex string, but that part gives me a java.lang.NumberFormatException
// ----- Turning the message to bits
        byte[] binaryS = s.getBytes(""UTF-8"");
        String mesInBinary = """";
        for (byte b : binaryS) {
            mesInBinary += '0' + Integer.toBinaryString(b);
        }
        // ----- Message padding & Pre-Processing
        // Binary representation of the length of the message in bits
        String mesBitLength = Integer.toBinaryString(mesInBinary.length());
        // We need the size of the message in 64-bits, so we'll
        // append zeros to the binary length of the message so
        // we get 64-bit
        String appendedZeros = """";
        for (int i = 64 - mesBitLength.length() ; i > 0 ; i--)
            appendedZeros += '0';
        // Calculating the k zeros to append to the message after
        // the appended '1'
        int numberOfZeros = (448 - (mesInBinary.length() + 1)) % 512;
        // Append '1' to the message
        mesInBinary += '1';
        // We need a positive k
        while (numberOfZeros < 0)
            numberOfZeros += 512;
        for (int i = 1 ; i <= numberOfZeros ; i++)
            mesInBinary += '0';
        // append the message length in 64-bit format
        mesInBinary += appendedZeros + mesBitLength;
        System.out.println(mesInBinary);
        // ----- Parsing the padded message
        // Breaking the message to 512-bit pieces
        // And each piece, to 16 32-bit word blocks
        String[] chunks = new String[mesInBinary.length() / 512];
        String[] words = new String[64 * chunks.length];
        for (int i = 0 ; i < chunks.length ; i++) {
            chunks[i] = mesInBinary.substring((512 * i), (512 * (i + 1)));
            // Break each chunk to 16 32-bit blocks
            for (int j = 0 ; j < 16 ; j++) {
                words[j] = Long.toHexString(Long.parseLong(chunks[i].substring((32 * j), (32 * (j + 1)))));
            }
        }

The last code line is the problematic one and of which I get the execption. Any suggestions?
","The last statement* should specify a radix of 2, I think:
words[j] = Long.toHexString(
    Long.parseLong(chunks[i].substring((32 * j), (32 * (j + 1))), 2));

*Not the last line of code, MДΓΓ :-)
","950","<java><bits><sha256>","0","2","3","2011-12-24 23:32:07","8627405","2","","1037210","","2011-12-24 23:31:53","2011-12-24 23:13:57",""
"8627375","Binary strings to Hex strings java","I have this code here, which get a plain text, and turns it to a 512-bit binary string.
Then, I would like to turn each 32-bit piece of the string to 8-bit of Hex string, but that part gives me a java.lang.NumberFormatException
// ----- Turning the message to bits
        byte[] binaryS = s.getBytes(""UTF-8"");
        String mesInBinary = """";
        for (byte b : binaryS) {
            mesInBinary += '0' + Integer.toBinaryString(b);
        }
        // ----- Message padding & Pre-Processing
        // Binary representation of the length of the message in bits
        String mesBitLength = Integer.toBinaryString(mesInBinary.length());
        // We need the size of the message in 64-bits, so we'll
        // append zeros to the binary length of the message so
        // we get 64-bit
        String appendedZeros = """";
        for (int i = 64 - mesBitLength.length() ; i > 0 ; i--)
            appendedZeros += '0';
        // Calculating the k zeros to append to the message after
        // the appended '1'
        int numberOfZeros = (448 - (mesInBinary.length() + 1)) % 512;
        // Append '1' to the message
        mesInBinary += '1';
        // We need a positive k
        while (numberOfZeros < 0)
            numberOfZeros += 512;
        for (int i = 1 ; i <= numberOfZeros ; i++)
            mesInBinary += '0';
        // append the message length in 64-bit format
        mesInBinary += appendedZeros + mesBitLength;
        System.out.println(mesInBinary);
        // ----- Parsing the padded message
        // Breaking the message to 512-bit pieces
        // And each piece, to 16 32-bit word blocks
        String[] chunks = new String[mesInBinary.length() / 512];
        String[] words = new String[64 * chunks.length];
        for (int i = 0 ; i < chunks.length ; i++) {
            chunks[i] = mesInBinary.substring((512 * i), (512 * (i + 1)));
            // Break each chunk to 16 32-bit blocks
            for (int j = 0 ; j < 16 ; j++) {
                words[j] = Long.toHexString(Long.parseLong(chunks[i].substring((32 * j), (32 * (j + 1)))));
            }
        }

The last code line is the problematic one and of which I get the execption. Any suggestions?
","From the Long docs:
public static long parseLong(String s) throws NumberFormatException:

Parses the string argument as a signed decimal long. The characters in the string must all be decimal digits...

public static long parseLong(String s, int radix) throws NumberFormatException:

Parses the string argument as a signed long in the radix specified by the second argument. The characters in the string must all be digits of the specified radix...

You're calling the first version of Long.parseLong(), which expects a decimal number, not a binary one. Use the second version with a radix of 2 to indicate binary.
EDIT: The reason being that a 32-digit decimal number won't fit into a Long, but a binary one will.
","950","<java><bits><sha256>","0","0","3","2011-12-24 23:32:07","8627405","2","","1037210","","2011-12-24 23:31:53","2011-12-24 23:13:57",""
"8627375","Binary strings to Hex strings java","I have this code here, which get a plain text, and turns it to a 512-bit binary string.
Then, I would like to turn each 32-bit piece of the string to 8-bit of Hex string, but that part gives me a java.lang.NumberFormatException
// ----- Turning the message to bits
        byte[] binaryS = s.getBytes(""UTF-8"");
        String mesInBinary = """";
        for (byte b : binaryS) {
            mesInBinary += '0' + Integer.toBinaryString(b);
        }
        // ----- Message padding & Pre-Processing
        // Binary representation of the length of the message in bits
        String mesBitLength = Integer.toBinaryString(mesInBinary.length());
        // We need the size of the message in 64-bits, so we'll
        // append zeros to the binary length of the message so
        // we get 64-bit
        String appendedZeros = """";
        for (int i = 64 - mesBitLength.length() ; i > 0 ; i--)
            appendedZeros += '0';
        // Calculating the k zeros to append to the message after
        // the appended '1'
        int numberOfZeros = (448 - (mesInBinary.length() + 1)) % 512;
        // Append '1' to the message
        mesInBinary += '1';
        // We need a positive k
        while (numberOfZeros < 0)
            numberOfZeros += 512;
        for (int i = 1 ; i <= numberOfZeros ; i++)
            mesInBinary += '0';
        // append the message length in 64-bit format
        mesInBinary += appendedZeros + mesBitLength;
        System.out.println(mesInBinary);
        // ----- Parsing the padded message
        // Breaking the message to 512-bit pieces
        // And each piece, to 16 32-bit word blocks
        String[] chunks = new String[mesInBinary.length() / 512];
        String[] words = new String[64 * chunks.length];
        for (int i = 0 ; i < chunks.length ; i++) {
            chunks[i] = mesInBinary.substring((512 * i), (512 * (i + 1)));
            // Break each chunk to 16 32-bit blocks
            for (int j = 0 ; j < 16 ; j++) {
                words[j] = Long.toHexString(Long.parseLong(chunks[i].substring((32 * j), (32 * (j + 1)))));
            }
        }

The last code line is the problematic one and of which I get the execption. Any suggestions?
","for (int i = 0 ; i < chunks.length ; i++) 
{
     chunks[i] = mesInBinary.substring((512 * i), (512 * (i + 1)));
     // Break each chunk to 16 32-bit blocks
     for (int j = 0 ; j < 16 ; j++) 
     {
         words[j] = Long.toHexString(Long.parseLong(chunks[i].substring((32 * j), (32 * (j + 1))),2));
     }
 }

","950","<java><bits><sha256>","0","0","3","2011-12-24 23:32:07","8627405","2","","1037210","","2011-12-24 23:31:53","2011-12-24 23:13:57",""
"28142206","C HMAC Implementation output check","I'm attempting to implement HMAC via sha256, but my output differs from Wikipedia examples.  
Expected output: 
0xf7bc83f430538424b13298e6aa6fb143ef4d59a14946175997479dbc2d1a3cd8

Actual output:
0x18615993cb350238e00f3c9858befb04160c85b8b05d797486cc47d0d864c04b

Code:
#include <openssl/conf.h>
#include <openssl/evp.h>
#include <openssl/err.h>

#include <string.h>

unsigned char *hash(unsigned char *input, unsigned int in_len, unsigned int *out_len);
unsigned char *hmac(unsigned char *key, unsigned int key_len,
        unsigned char *data, unsigned int data_len,
        unsigned char *output, unsigned int *out_len);
void debug(unsigned char *in, unsigned int len);

int main(int argc, char **argv)
{
        unsigned int asdf;

        unsigned char *h = hmac(""key"", 3, ""The quick brown fox jumps over the lazy dog"",
                strlen(""The quick brown fox jumps over the lazy dog""),
                NULL, NULL);
}

void debug(unsigned char *in, unsigned int len)
{
        int i;

        for(i=0;i<len;i++) {

                printf(""%02x"", in[i]);

        }

        printf(""\n"");
}

unsigned char *hmac(unsigned char *key, unsigned int key_len,
        unsigned char *data, unsigned int data_len,
        unsigned char *output, unsigned int *out_len)
{
        #define BLOCK_SIZE 32

        int i, nkey, o_len;
        char i_pad[BLOCK_SIZE], o_pad[BLOCK_SIZE];

        /* Key init */

        if(key_len > BLOCK_SIZE)
                key = hash(key, key_len, &nkey);
        else if(key_len < BLOCK_SIZE) {
                // zero pad to the right
                char *n_key = malloc(BLOCK_SIZE);
                memset(n_key, '\0', BLOCK_SIZE);
                memcpy(n_key, key, key_len);
                key = n_key;
        }

        printf(""key:\n"");
        debug(key, BLOCK_SIZE);

        /* Padding init */

        for(i=0;i<BLOCK_SIZE;i++) {
                o_pad[i] = key[i] ^ 0x5c;
                i_pad[i] = key[i] ^ 0x36;
        }

        printf(""o_pad:\n"");
        debug(o_pad, BLOCK_SIZE);

        printf(""i_pad:\n"");
        debug(i_pad, BLOCK_SIZE);

        /* Stage 1: calculate hash(i_pad . data)*/

        unsigned char *stg1 = malloc(BLOCK_SIZE+data_len);
        memcpy(stg1, i_pad, BLOCK_SIZE);
        memcpy(stg1+BLOCK_SIZE, data, data_len);

        printf(""stg1 input:\n""); debug(stg1, BLOCK_SIZE+data_len);
        stg1 = hash(stg1, BLOCK_SIZE+data_len, &o_len);
        printf(""stg1 hashed:\n""); debug(stg1, BLOCK_SIZE);

        /* Stage 2: calculate hash(o_pad . stg1) */

        unsigned char *stg2 = malloc(BLOCK_SIZE+o_len);
        memcpy(stg2, o_pad, BLOCK_SIZE);
        memcpy(stg2+BLOCK_SIZE, stg1, o_len);

        printf(""stg2 input:\n""); debug(stg2, BLOCK_SIZE+o_len);
        stg2 = hash(stg2, BLOCK_SIZE*2+data_len, &o_len);
        printf(""stg2 hashed:\n""); debug(stg2, BLOCK_SIZE);

}

unsigned char *hash(unsigned char *input, unsigned int in_len, unsigned int *out_len)
{
        EVP_MD_CTX ctx;
        int i;
        unsigned char *ret = malloc(EVP_MAX_MD_SIZE);

        EVP_MD_CTX_init(&ctx);
        EVP_DigestInit_ex(&ctx, EVP_sha256(), NULL);

        EVP_DigestUpdate(&ctx, input, in_len);
        EVP_DigestFinal_ex(&ctx, ret, out_len);
        EVP_MD_CTX_cleanup(&ctx);

        return ret;
}

Can anyone spot any obvious flaws? Thanks.
","You are doing it all right with stg1, but in final stage you should make EVP_DigestUpdate twice instead of memcpy.
39c39
<         #define BLOCK_SIZE 32
---
>         #define BLOCK_SIZE 64
85,90d84
<         memcpy(stg2, o_pad, BLOCK_SIZE);
<         memcpy(stg2+BLOCK_SIZE, stg1, o_len);
< 
<         printf(""stg2 input:\n""); debug(stg2, BLOCK_SIZE+o_len);
<         stg2 = hash(stg2, BLOCK_SIZE*2+data_len, &o_len);
<         printf(""stg2 hashed:\n""); debug(stg2, BLOCK_SIZE);
91a86,96
>         EVP_MD_CTX ctx;
>         EVP_MD_CTX_init(&ctx);
>         EVP_DigestInit_ex(&ctx, EVP_sha256(), NULL);
>         EVP_DigestUpdate(&ctx, o_pad, BLOCK_SIZE);
>         EVP_DigestUpdate(&ctx, stg1, o_len);
>         EVP_DigestFinal_ex(&ctx, stg2, &o_len);
>         EVP_MD_CTX_cleanup(&ctx);
> 
>         printf(""output:\n"");
>         debug(stg2, o_len);
>         return stg2;

output:
f7bc83f430538424b13298e6aa6fb143ef4d59a14946175997479dbc2d1a3cd8
","949","<c><openssl><hmac><sha256>","0","0","1","2015-01-28 15:05:17","","2","","3933332","","2015-01-25 22:17:04","2015-01-25 22:15:34",""
"31680495","sha256/salt password key storage","I have created a registration form processed as follows:
function register_user() {
   global $conn;
   $name      = sanitize($_POST['name']);
   $email     = sanitize($_POST['email']);
   $password = sanitize($_POST['password']);
   $salt      = bin2hex(mcrypt_create_iv(32, MCRYPT_DEV_URANDOM));

   $saltedPW = $password . $salt;
   $hashedPW = hash('sha256', $saltedPW);

   mysqli_query($conn, ""INSERT INTO users (name, email, password, salt) VALUES ('$name', '$email', '$hashedPW', '$salt')"");

The login form is then processed as follows:
    function login($email, $password) {
    global $conn;
    $user_id = user_id_from_username($email);
    $query   = mysqli_query($conn, ""SELECT salt FROM users WHERE email = '$email'"");
    $row1    = mysqli_fetch_assoc($query);
    $salt    = $row1['salt'];

    $saltedPW = $password . $salt;
    $hashedPW = hash('sha256', $saltedPW);

    $result = mysqli_query($conn, ""SELECT COUNT(user_id) FROM users WHERE email = '$email' AND password = '$hashedPW'"");
    $row     = mysqli_fetch_row($result);

    return ($row[0] == 1) ? $user_id : false;
}

The user table is structured as follows:
user_id; name; email; password; salt (additional columns for password recovering, admin rights, etc.). Having submitted the details to my company's IT compliance department, someone with PHP experience (exceeding mine no doubt) has stated that I can't store the key for the encryption in the system - if someone got the file they could decrypt the password. My question is - is this correct? Is my process flawed? All of the research I have carried out indicates that an SHA256 hash with random salt is one of the best ways to go.
","Do not use sha256,md5 etc for password hashing. I think you should use BCrypt for password hashing. This is the most powerful password hashing algorithm at present. password_hash() and password_verify() are used to hash and verify password for BCrypt. PHP 5.5.0 or greater uses BCrypt as default algorithm for password_hash(). Do not use your own salt. Let password_hash() do it for you.
","949","<php><mysql><salt><sha256><password-hash>","0","2","2","2015-09-03 05:51:46","31682093","2","0","2224584","","2015-09-03 05:51:46","2015-07-28 15:15:53",""
"31680495","sha256/salt password key storage","I have created a registration form processed as follows:
function register_user() {
   global $conn;
   $name      = sanitize($_POST['name']);
   $email     = sanitize($_POST['email']);
   $password = sanitize($_POST['password']);
   $salt      = bin2hex(mcrypt_create_iv(32, MCRYPT_DEV_URANDOM));

   $saltedPW = $password . $salt;
   $hashedPW = hash('sha256', $saltedPW);

   mysqli_query($conn, ""INSERT INTO users (name, email, password, salt) VALUES ('$name', '$email', '$hashedPW', '$salt')"");

The login form is then processed as follows:
    function login($email, $password) {
    global $conn;
    $user_id = user_id_from_username($email);
    $query   = mysqli_query($conn, ""SELECT salt FROM users WHERE email = '$email'"");
    $row1    = mysqli_fetch_assoc($query);
    $salt    = $row1['salt'];

    $saltedPW = $password . $salt;
    $hashedPW = hash('sha256', $saltedPW);

    $result = mysqli_query($conn, ""SELECT COUNT(user_id) FROM users WHERE email = '$email' AND password = '$hashedPW'"");
    $row     = mysqli_fetch_row($result);

    return ($row[0] == 1) ? $user_id : false;
}

The user table is structured as follows:
user_id; name; email; password; salt (additional columns for password recovering, admin rights, etc.). Having submitted the details to my company's IT compliance department, someone with PHP experience (exceeding mine no doubt) has stated that I can't store the key for the encryption in the system - if someone got the file they could decrypt the password. My question is - is this correct? Is my process flawed? All of the research I have carried out indicates that an SHA256 hash with random salt is one of the best ways to go.
","
I can't store the key for the encryption in the system

You haven't. You're hashing, you're not encrypting. salt !== key

if someone got the file they could decrypt the password

No. Nothing is encrypted, so there's nothing to decrypt. They'd get only the resulting hash, which they'd still have to brute force.

Is my process flawed? 

Yes, but not because of their comments. It's flawed because you should never use SHA or MD5 or similar for passwords. They're designed to be fast, which is not what you want. You want something that intentionally takes a hunk of CPU, as to make brute force attacks untimely. This is exactly what the password_hash() function is for. Use it.
","949","<php><mysql><salt><sha256><password-hash>","0","5","2","2015-09-03 05:51:46","31682093","2","0","2224584","","2015-09-03 05:51:46","2015-07-28 15:15:53",""
"48152330","BigQuery SHA256 function","I need to hash some strings using SHA256.  Using BigQuery to do this results in what I understand to be a BASE64 result, where as I need something that is different.  
For example, if I want to hash ""def@gmail.com"" the result should be:

c392e50ebeca7bea4405e9c545023451ac56620031f81263f681269bde14218b

But doing this in BigQuery: 
SELECT SHA256(""def@gmail.com"") as sha256;

the result is: 

w5LlDr7Ke+pEBenFRQI0UaxWYgAx+BJj9oEmm94UIYs=

It's the first result that I need to get, any ideas if this is possible in BigQuery, I'm trying to avoid needing to use javascript for this.
","If you're using Standard SQL in BigQuery then you could use:
SELECT TO_HEX(SHA256(""def@gmail.com"")) as sha256;

results:
| sha256     |
| c392e50ebeca7bea4405e9c545023451ac56620031f81263f681269bde14218b |

","941","<hash><google-bigquery><sha256>","4","8","1","2018-03-06 09:58:00","48152715","3","","3286832","","2018-01-08 14:57:09","2018-01-08 14:28:15",""
"26808362","Validating JWT signed with hmac-sh256","I am working on a project to use the Katana OpenID Connect middleware to authenticate with a third party (OpenAM) provider. The provider is signing the JWT with hmac-sh256. When the OpenID middleware is validating the JWT via a call to ValidateToken it is throwing the following exception: 
{""IDX10503: Signature validation failed. Keys tried: 'System.IdentityModel.Tokens.X509AsymmetricSecurityKey\r\n'.\nExceptions caught:\n 'System.InvalidOperationException: IDX10618: AsymmetricSecurityKey.GetHashAlgorithmForSignature( ... ) threw an exception.\nAsymmetricSecurityKey: 'System.IdentityModel.Tokens.X509AsymmetricSecurityKey'\nSignatureAlgorithm: ...hmac-sha256', check to make sure the SignatureAlgorithm is supported.\nException: 'System.NotSupportedException: Crypto algorithm 'http://www.w3.org/2001/04/xmldsig-more#hmac-sha256' not supported in this context.\r\n at System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetHashAlgorithmForSignature(String algorithm)\r\n at ...... 
What am I missing or does the default SecurityTokenHandler really not support that algorithm? 
Thanks, 
Gordon 
","I'm not familiar with Katana but to me it looks like the wrong code path is triggered: the exception complains about an assymetric security key but the hmac-sha256 algorithm is based on a symmetric key (i.e. the client secret)
also note that you need a relatively recent version of OpenAM because it contained an HMAC related bug before: https://bugster.forgerock.org/jira/browse/CAF-112; something at least more recent than OpenAM-12.0.0-SNAPSHOT_20140417
","939","<hmac><sha256><jwt>","0","0","1","2014-11-08 07:05:47","","0","","","","","2014-11-07 19:10:04",""
"31958070","How to verify digest using openssl library?","I'm build a Licensing system in the following way. I generated a matching public and private keys:
openssl genrsa -out mykey.pem 1024
openssl rsa -in mykey.pem -des3 -out prv-key.pem
openssl rsa -in mykey.pem -pubout -out pub-key.pem

Now I took a license message which contains unique information about the user and license details. my product reads this message, verifies the information, and if everything goes as planned it reads the license policy and runs accordingly.
so I've taken that license file and digested it with a signature using my private key
openssl dgst -sha256 -sign prv-key.pem -out license.secret license

and now I'm sending both the license and the signed license files to the customer.
My Question is: How can i verify digest using the public key (pub-key.pem) on the Customer side from within a C program. 
I've looking libssl and openssl library but couldn't find a good example for digest verification
","","939","<c><openssl><key><sha256><digest>","3","","0","2017-03-18 16:11:09","","3","0","608639","","2017-03-18 16:11:09","2015-08-12 06:57:24",""
"38711717","sha256 with PHP session","New to security and wondering how secure this type of login is?  I am not protecting any bank/financial data by any means but trying to secure somewhat sensitive data that shouldn't be exposed to the general public.  I only require a password - no official logins are done.
This is in a file called access.php which houses a password input field.
<?php
session_start();
if (!isset($_SESSION['loggedIn'])) {
    $_SESSION['loggedIn'] = false;
}

// sha256() password 
$password = '13d249f2cb4127b40cfa757866850278793f814ded3c587fe5889e889a7a9f6c';

if (isset($_POST['password'])) {
    if (hash('sha256',$_POST['password']) == $password) {
        $_SESSION['loggedIn'] = true;
    } else {
        die ('That is the incorrect password - Please leave now');
    }
} 

if (!$_SESSION['loggedIn']):
?>

Then my index.php requires access.php at page load.  Should access live outside the public directory?  Am I missing anything else I should be considering?
","
New to security and wondering how secure this type of login is?


SHA-256: You're using the entirely wrong tool for the job. Use password_hash() and password_verify():


How to safely store a password
Cryptography terms explained for non-experts

Additionally, SHA-256 is vulnerable to length-extension attacks.
Using == to compare hashes has two vulnerabilities:


Timing attacks
Magic hash comparison (the more pressing concern)


So, to answer your question: Not very. The problem your code is trying to solve is well-known among security experts, and they've gone out of their way to make it simple for others to solve it. That's why password_hash()and password_verify() exist. Use them.
That said, welcome to software security. If you need some additional resources to aid your self-education, check out this application security reading list on Github.
","939","<php><security><session><sha256>","1","4","1","2016-08-02 13:58:18","38722430","1","1","","","","2016-08-02 04:20:44",""
"28221621","AWS signature version 4 sha256 hash not signing correctly?","I am trying to use the AWS signature version 4 to submit a request to S3.
When I submit my request I get the message 
The request signature we calculated does not match the signature you provided. Check your key and signing method.
I am not sure where to go from here. I have tried several different hash algorithms (sha1, md5) but always get the same response. I have verified the Access Key and Secret Key. I just created a new one pair on AWS, and it still fails.
Any help is appreciated!


<?php
$date = date('Ymd');
$x_date = $date . ""T000000Z"";
$credential = AWS_ACCESS_KEY . '/' . $date . '/us-west-2/s3/aws4_request';
$redirect = 'https://roofscope.com/scope/thank-you';

$conditions = array(
	array('bucket' => 'tracescope'),
	array('starts-with', '$key', 'user/user1/'),
	array('acl' => 'public-read'),
	array('success_action_redirect' => $redirect),
	array(""starts-with"", ""\$Content-Type"", ""image/""),
	array(""x-amz-credential"" => $credential),
	array(""x-amz-algorithm""=> ""AWS4-HMAC-SHA256""),
	array(""x-amz-date"" => $x_date),
);

$policy_b64 = $this->aws->getPolicy(3600 * 24, $conditions);
$signature = hash_hmac('sha256', $policy_b64, AWS_SECRET_KEY);
?>

<form action=""http://tracescope.s3.amazonaws.com/"" method=""post"" enctype=""multipart/form-data"">
	<input type=""input"" name=""key"" value=""test/${filename}""/><br/>
	<input type=""hidden"" name=""acl"" value=""public-read""/>
	<input type=""hidden"" name=""success_action_redirect"" value=""<?= $redirect; ?>""/>
	<input type=""input"" name=""Content-Type"" value=""image/jpeg""/><br/>
	<input type=""text"" name=""X-Amz-Credential"" value=""<?= $credential; ?>""/>
	<input type=""text"" name=""X-Amz-Algorithm"" value=""AWS4-HMAC-SHA256""/>
	<input type=""text"" name=""X-Amz-Date"" value=""<?= $x_date; ?>""/>
	<input type=""hidden"" name=""Policy"" value=""<?= $policy_b64; ?>"" />
	<input type=""hidden"" name=""X-Amz-Signature"" value=""<?= $signature; ?>""/>

	<input type=""file"" name=""file""/> <br/>

	<input type=""submit"" name=""submit"" value=""Upload to Amazon S3""/>
</form>



","try using my s3 policy signature verifier.
please do not key in your actual key.
use an example key and test the calculation for the example key on your side as well.
http://ttwd80.github.io/s3postcalculatorverify/
there is a ""Show / hide step"" link that explains the process step by step.
","935","<php><amazon-web-services><amazon-s3><signature><sha256>","2","1","1","2017-02-26 13:23:28","","2","","","","","2015-01-29 18:09:04",""
"49818160","How to Integrate PayUMoney payment gateway with Angular2/4/5","i am working with angular5 , i need to integrate PayUMoney payment gateway in my application , for that i added following form and test with ""https://test.payu.in/_payment"" domain.
Error :

Error Reason Transaction failed due to incorrectly calculated hash
  parameter.
Corrective Action Please ensure that the hash used in transaction
  request is calculated using the correct formula. Please note the
  correct formula for calculating the value of hash:
  sha512(key|txnid|amount|productinfo|firstname|email|udf1|udf2|udf3|udf4|udf5||||||SALT)
Based on above formula and applying for this transaction, hash should
  be calculated as mentioned below : hash =
  sha512(gtKFFx|ba7816bf8f01cfea414140de5da|500|merit application
  fees|bhagvat lande|landebm@gmail.com|||||||||||eCwWELxi) = Array
As seen above, correct hash value should have been - Array
But the hash posted in the transaction request from your end was -
  e95bd46ce3cf4b3c32a63ba5f51934ef8506e0e47027512f41bff125be02cd14

My Component with Form
<form #f method=""post"" id=""payu-payment-form"" action=""https://test.payu.in/_payment"">
        <input type=""hidden"" name=""hash"" value=""e95bd46ce3cf4b3c32a63ba5f51934ef8506e0e47027512f41bff125be02cd14""/>
        <input type=""hidden"" name=""key"" value=""gtKFFx"" />
        <input type=""hidden"" name=""txnid"" value=""ba7816bf8f01cfea414140de5da"" />
        <input type=""hidden"" name=""amount"" value=""500"" />
        <input type=""hidden"" name=""productinfo"" value=""merit application fees"" />
        <input type=""hidden"" name=""firstname"" value=""bhagvat lande"" />
        <input type=""hidden"" name=""email"" value=""******@gmail.com"" />
        <input type=""hidden"" name=""phone"" value=""+91**********"" />
        <input type=""hidden"" name=""surl"" value=""http://localhost:4200/#/payment/payment-success"" />
        <input type=""hidden"" name=""furl"" value=""http://localhost:4200/#/payment/payment-error"" />
        <input type=""hidden"" name=""service_provider"" value="""" />
        <button class=""btn btn-info"" type=""submit"" (click)=""f.submit()"" value=""submit"" formtarget=""_blank""> <i class=""fa fa-money""></i>&nbsp;Proceed To Pay</button>
      </form>

in above form i just generate one dummy hash key(SHA-256) and put their.
Questions : 

how to integrate PayUmoney payment gateway in ANgular2/4/5 ?
they provided formula on their documentation for generation hash key , it tooks all other forms fields and generate hash key (SHA-256) , is their any way to create hash key at client side and how to use that ?

thanks
","","933","<angular5><payment-gateway><sha256><payumoney><payu>","1","","0","2018-08-27 14:23:13","","0","","","","","2018-04-13 13:26:48",""
"50321301","How To Hash Social Security Numbers When Used As Identifiers","I have a service that let's users store information (such as messages, videos', etc.) for their extended family online to be shared when they pass away. Ex - Send this video to my nephew when I pass way telling him I love him. 
I have a JSON structured database that stores a users social security number as an identifier to their profile. 
 $salted_hashed_ssn: {
    //important information for extended family such as vidoes and email addresses
   }

When a user dies, their closest family members go to my site and input the deceased person's social security number. I then hash those and see if a match is made in my database. If a match is made, we then run functions to share the important information for the extended family. 
Preparing for the worst, I want to store the social security numbers as securely as possible. Because I only need to use the social security numbers as a identifier, I don't have to store the raw/plain text ssn values. Therefore, I can hash the ssns but I need to salt them to protect against lookup tables. My issue is that when the users input the deceased user's social security number I don't have a way to see which salt key was used. 
To make it random and prevent against lookup tables, how would you recommend I salt my social security numbers? Should I just take x number of characters each time? Ie - always grab the first 4 characters of the social security number, hash those, and them to the full SSN and then rehash?
let salted_hashed_ssn = SHA256(First 4 characters of SSN) + SHA256(SSN) ?
How would you recommend setting up the salt and hash?
","You can treat your SSN in the same way you would treat a password.  Remember, a salt doesn't have to be secret, it just has to be different for each entry.  So simply store your salt alongside your hash, this is perfectly safe.
I wouldn't recommend using SHA256 here, however.  Use bcrypt instead.  It handles the salt for you, which means you don't need to worry about the advice above anyway.  It's also far more resistant to brute forcing.  The SHA family was not designed for hashing in the way you are using it.
","931","<encryption><hash><sha256><sha>","1","1","1","2018-05-13 23:01:00","50321339","0","","","","","2018-05-13 22:55:01",""
"23093755","What is the ""secret key"" used in the JWT example in the RFC?","I have been reading the JWT RFC, and in section 3.1 they give an example JWT along with the MAC. 
I was wondering if: is it known what is the value of the secret key that they used with SHA-256 to generate the example in RFC?
I want to use the example in a test case so I'd like to reproduce it exactly.
","Turns out the key is given in Appendix 1.1 of the draft for ""JSON Web Signature (JWS)"" in the JSON Web Key format as:
{
    ""kty"":""oct"",
    ""k"":""AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow""
}

I misunderstood that the two links named ""Appendix A.1"" at the end of the ""JWT Example"" section actually go to different locations. Tha passage with the links is reproduced below:

This computation is illustrated in more detail in Appendix A.1 of [JWS].  See Appendix A.1 for an example of an encrypted JWT.
","927","<hmac><sha256><jwt>","-3","2","1","2014-06-30 14:18:26","23094305","0","","254477","","2014-04-15 20:33:08","2014-04-15 20:23:02",""
"23077420","How does an HMAC work, and why isn't this code generating the right response?","I'm trying to figure out how HMAC's work. Here is the documentation from AWS-S3
signing key = HMAC-SHA256(
  HMAC-SHA256(
    HMAC-SHA256(
      HMAC-SHA256(""AWS4"" + ""<YourSecretAccessKey>"",""20130524"")
      , ""us-east-1""
    )
    , ""s3""
  )
  ,""aws4_request""
)

The documentation says,

You can use this example as a test case to verify the signature that your code calculates; however, you must use the same bucket name, object key, time stamp, and the following example credentials:

I don't understand how the Node core crypto module works or how to read the HMAC spec.
Would it be right to describe the above like,
var h1 = crypto.createHmac( 'sha256', ""AWS4"" + 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY' );
  h1.setEncoding('hex');
  h1.write( '20130524' );
  h1.end();
var h2 = crypto.createHmac( 'sha256', h1.read() );
  h2.setEncoding('hex');
  h2.write( 'us-east-1' );
  h2.end();
var h3 = crypto.createHmac( 'sha256', h2.read() );
  h3.setEncoding('hex');
  h3.write( 's3' );
  h3.end();
var h4 = crypto.createHmac( 'sha256', h3.read() );
  h4.setEncoding('hex');
  h4.write('aws4_request');
  h4.end();
console.log( h4.read() )

And, if so.. Why do I get back,

d949da6fe2897897d73557446db35c06dc34feb7f74e7d949c6fe9d674a02103

And, not that which is given in the docs:

aeeed9bbccd4d02ee5c0109b86d86835f995330da4c265957d157751f604d404

I've also tried to write this a different way too, because I'm not sure how subsequent calls to .write() are handled
var h1 = crypto.createHmac( 'sha256', ""AWS4"" + 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY' );
  h1.setEncoding('hex');
  h1.write( '20130524' );
  h1.write( 'us-east-1' );
  h1.write( 's3' );
  h1.write('aws4_request');
  h1.end();
  console.log( h1.read() );

So I guess I have two questions

Based on the AWS docs what code does it take to get the signature given in the examples... 
What is the function of successive calls to .write() on a crypto stream? It doesn't append. And, it doesn't wrap in a new HMAC-SHA256.

","[This is more of a comment, but since I can't comment as a guest:]
Not sure if you need the setEncoding() call at that point. Just let it process, and call:
signature = hmac.read().toString('base64');

as the return output from hmac.read() is of type Buffer, so the toString() works fine on it.
","926","<node.js><amazon-web-services><amazon-s3><hmac><sha256>","0","0","2","2015-01-07 20:01:39","","0","1","","","","2014-04-15 07:40:46",""
"23077420","How does an HMAC work, and why isn't this code generating the right response?","I'm trying to figure out how HMAC's work. Here is the documentation from AWS-S3
signing key = HMAC-SHA256(
  HMAC-SHA256(
    HMAC-SHA256(
      HMAC-SHA256(""AWS4"" + ""<YourSecretAccessKey>"",""20130524"")
      , ""us-east-1""
    )
    , ""s3""
  )
  ,""aws4_request""
)

The documentation says,

You can use this example as a test case to verify the signature that your code calculates; however, you must use the same bucket name, object key, time stamp, and the following example credentials:

I don't understand how the Node core crypto module works or how to read the HMAC spec.
Would it be right to describe the above like,
var h1 = crypto.createHmac( 'sha256', ""AWS4"" + 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY' );
  h1.setEncoding('hex');
  h1.write( '20130524' );
  h1.end();
var h2 = crypto.createHmac( 'sha256', h1.read() );
  h2.setEncoding('hex');
  h2.write( 'us-east-1' );
  h2.end();
var h3 = crypto.createHmac( 'sha256', h2.read() );
  h3.setEncoding('hex');
  h3.write( 's3' );
  h3.end();
var h4 = crypto.createHmac( 'sha256', h3.read() );
  h4.setEncoding('hex');
  h4.write('aws4_request');
  h4.end();
console.log( h4.read() )

And, if so.. Why do I get back,

d949da6fe2897897d73557446db35c06dc34feb7f74e7d949c6fe9d674a02103

And, not that which is given in the docs:

aeeed9bbccd4d02ee5c0109b86d86835f995330da4c265957d157751f604d404

I've also tried to write this a different way too, because I'm not sure how subsequent calls to .write() are handled
var h1 = crypto.createHmac( 'sha256', ""AWS4"" + 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY' );
  h1.setEncoding('hex');
  h1.write( '20130524' );
  h1.write( 'us-east-1' );
  h1.write( 's3' );
  h1.write('aws4_request');
  h1.end();
  console.log( h1.read() );

So I guess I have two questions

Based on the AWS docs what code does it take to get the signature given in the examples... 
What is the function of successive calls to .write() on a crypto stream? It doesn't append. And, it doesn't wrap in a new HMAC-SHA256.

","I just spent 16 hours trying to figure this out and I got a working solution, based on your initial steps. Not the most elegant code but it works! See below.
Also, this is my first Stack Overflow post! So pardon any formatting mistakes!
var policy = {
  ""expiration"": ""2020-12-01T12:00:00.000Z"",
  ""conditions"": [
    {""bucket"": ""XXXTHISISYOURBUCKETXXX""},
    [""starts-with"", ""$key"", """"],
    {""x-amz-credential"": ""XXXTHISISYOURPUBLICKEYXXX/20150107/us-west-1/s3/aws4_request""},
    {""x-amz-algorithm"": ""AWS4-HMAC-SHA256""},
    {""x-amz-date"": ""20150107T000000Z""}
  ]
};

var base64Policy = Buffer( JSON.stringify( policy ) , 'utf-8' ).toString( 'base64' );

var a = crypto.createHmac( 'sha256' , 'AWS4' + 'XXXTHISISYOURSECRETKEYXXX' );

a.write( '20150107' );

a.end();

var b = crypto.createHmac( 'sha256' , a.read() );

b.write( 'us-west-1' );

b.end();

var c = crypto.createHmac( 'sha256' , b.read() );

c.write( 's3' );

c.end();

var d = crypto.createHmac( 'sha256' , c.read() );

d.write( 'aws4_request' );

d.end();

var e = crypto.createHmac( 'sha256' , d.read() );

e.write( new Buffer( base64Policy , 'utf-8') );

e.end();

var signature = e.read().toString( 'hex' );

console.log( signature );

var credentials = {

  policy : base64Policy,
  signature : signature

};

","926","<node.js><amazon-web-services><amazon-s3><hmac><sha256>","0","1","2","2015-01-07 20:01:39","","0","1","","","","2014-04-15 07:40:46",""
"45628882","PHP: SHA-256 force in UTF-8","Here's my problem with PHP: For E-payment integration with Postfinance, I need to verify the data send and received with a SHA-256 hash of all the fields, with a secret key between each one.
How can you be sure that the input string will be in UTF-8 just before the hashing?
The command utf8_encode() is used on the input string, and if I check with mb_check_encoding(), it's okay. I have the good response, and if I use mb_detect_encoding(), the response is ""ASCII"".
$pf_post = array();

$pf_post['AMOUNT'] = 100;
$pf_post['CURRENCY'] = ""CHF"";
$pf_post['ORDERID'] = 101;
$pf_post['TITLE'] = ""Paiement"";

$pf_key = ""mytestkey"";

foreach (array_keys($pf_post) as $lakey)
{
    $pf_string .= strtoupper($lakey) . ""="" . strval($pf_post[$lakey]) . $pf_key;
}

$pf_string = utf8_encode($pf_string);
$pf_sign = hash('sha256',$pf_string);

if (mb_check_encoding($pf_string, 'UTF-8')) {
    $debug .= ""STRING => Détection UTF8 OK !<br>"";
}
else {
    $debug .= ""STRING => Détection UTF8 !!! ERREUR !!!<br>"";
}

if (mb_check_encoding($pf_sign, 'UTF-8')) {
    $debug .= ""HASH => Détection UTF8 OK !<br>"";
}
else {
    $debug .= ""HASH => Détection UTF8 !!! ERREUR !!!<br>"";
}

$debug .= ""String Format: "" . mb_detect_encoding($pf_string) .
          "", Hash Format: "" . mb_detect_encoding($pf_sign) . ""<br>"";

And here's the debug:
STRING => Détection UTF8 OK !
HASH => Détection UTF8 OK !
String Format : ASCII, Hash Format : ASCII

If I use only digits in the fields, it will be okay ... if I use letters, it will be not every time okay ... and if use letters with accent ... it's wrong anytime!
In HTML header, I have:
<meta charset=""utf-8""/>

How can I fix this?
","Here are some examples:
$str = ""éóùùééééè""; // Will output 'éóùùééééè'
$strr = utf8_encode($str); // Will output 'Ã©Ã³Ã¹Ã¹Ã©Ã©Ã©Ã©Ã¨'

If you apply to an UTF-8 string, utf8_encode() will return a garbled UTF-8 output as shown in the example.
To ensure that you are using UTF-8, at the top of every script use mb_internal_encoding('UTF-8') and you can use this forceutf8 class.
<?php
    // Tell PHP that we're using UTF-8 strings until the end of the script
    mb_internal_encoding('UTF-8');

    include('Encoding.php'); // The class from GitHub

    // Same strings
    $str = 'éóùùééééè';
    $str1 = 'Ã©Ã³Ã¹Ã¹Ã©Ã©Ã©Ã©Ã¨'; //garbled UTF8 of éóùùééééè

    // Force input to UTF-8
    use \ForceUTF8\Encoding;
    echo Encoding::fixUTF8($str).'</br>'; // Will output éóùùééééè
    echo Encoding::fixUTF8($str1).'</br>'; // Will output éóùùééééè

    $str3 = Encoding::fixUTF8($str);
    $str4 = Encoding::fixUTF8($str1);


    // Then hash
    $hash1 = hash('sha256', $str3);
    $hash1 = hash('sha256', $str4);

    echo $hash1; // Will output 45b8151559a5136d58f85ebf51c24f26c47e51f4a89fe2962c8626e99ad64786
    echo $hash2; // Will output 45b8151559a5136d58f85ebf51c24f26c47e51f4a89fe2962c8626e99ad64786

    // mb_detect_encoding will always output ASCII
    echo  mb_detect_encoding($hash1). '</br>'; // Will output ASCII
    echo  mb_detect_encoding($hash1); //// Will output ASCII

And at the browser level you need:
<meta charset=""UTF-8"">

","925","<php><utf-8><sha256>","0","0","2","2019-07-08 12:35:01","","5","","63550","","2019-07-08 12:27:53","2017-08-11 07:00:11",""
"45628882","PHP: SHA-256 force in UTF-8","Here's my problem with PHP: For E-payment integration with Postfinance, I need to verify the data send and received with a SHA-256 hash of all the fields, with a secret key between each one.
How can you be sure that the input string will be in UTF-8 just before the hashing?
The command utf8_encode() is used on the input string, and if I check with mb_check_encoding(), it's okay. I have the good response, and if I use mb_detect_encoding(), the response is ""ASCII"".
$pf_post = array();

$pf_post['AMOUNT'] = 100;
$pf_post['CURRENCY'] = ""CHF"";
$pf_post['ORDERID'] = 101;
$pf_post['TITLE'] = ""Paiement"";

$pf_key = ""mytestkey"";

foreach (array_keys($pf_post) as $lakey)
{
    $pf_string .= strtoupper($lakey) . ""="" . strval($pf_post[$lakey]) . $pf_key;
}

$pf_string = utf8_encode($pf_string);
$pf_sign = hash('sha256',$pf_string);

if (mb_check_encoding($pf_string, 'UTF-8')) {
    $debug .= ""STRING => Détection UTF8 OK !<br>"";
}
else {
    $debug .= ""STRING => Détection UTF8 !!! ERREUR !!!<br>"";
}

if (mb_check_encoding($pf_sign, 'UTF-8')) {
    $debug .= ""HASH => Détection UTF8 OK !<br>"";
}
else {
    $debug .= ""HASH => Détection UTF8 !!! ERREUR !!!<br>"";
}

$debug .= ""String Format: "" . mb_detect_encoding($pf_string) .
          "", Hash Format: "" . mb_detect_encoding($pf_sign) . ""<br>"";

And here's the debug:
STRING => Détection UTF8 OK !
HASH => Détection UTF8 OK !
String Format : ASCII, Hash Format : ASCII

If I use only digits in the fields, it will be okay ... if I use letters, it will be not every time okay ... and if use letters with accent ... it's wrong anytime!
In HTML header, I have:
<meta charset=""utf-8""/>

How can I fix this?
","You should not encode the values to UTF-8 twice. I would suggest to encode only if really necessary. Example:
if (!mb_check_encoding($pf_string, 'UTF-8')) {
    $pf_string = mb_convert_encoding($pf_string, 'UTF-8');
}

","925","<php><utf-8><sha256>","0","0","2","2019-07-08 12:35:01","","5","","63550","","2019-07-08 12:27:53","2017-08-11 07:00:11",""
"32565052","HMAC-SHA256 issue in Shopify oauth (Output does not match)","I'm trying to publish an app on Shopify marketplace by following this documentation. And I'm stuck on step-3 of the oauth documentation wherein you have to do 'HMAC Signature Validation'.
Documentation states that you have to process the string (specified below) through HMAC-SHA256 using app's shared secret key.
String = ""shop=some-shop.myshopify.com&timestamp=1337178173""

I'm trying to implement the steps using Java. Following is gist of the code that I have used.
        private static final String HMAC_ALGORITHM = ""HmacSHA256"";
        String key = ""hush"";
        String data = ""shop=some-shop.myshopify.com&timestamp=1337178173"";    
        SecretKeySpec keySpec = new SecretKeySpec(key.getBytes(),HMAC_ALGORITHM);
        Mac mac = Mac.getInstance(HMAC_ALGORITHM);
        mac.init(keySpec);
        byte[] rawHmac = mac.doFinal(data.getBytes());
        System.out.println(Hex.encodeHexString(rawHmac));

The code produces the following string:
c2812f39f84c32c2edaded339a1388abc9829babf351b684ab797f04cd94d4c7

Through some random search on Shopify developer forum I found the link to a question.
The last message from @Shayne suggests that we have to make changes in data variable by adding protocol field.
But it didn't work out :(
Can anyone tell me what should be done?Do I have to make modifications in my code or the process in the documentation have changed.
Please help.
","The example is wrong apparently. Your hash code is OK. You'll need to make sure you include all parameters from the Shopify response e.g. the input for verification of a response would look like:
code={code}&protocol=https://&store={store}&timestamp={timestamp}

See: https://ecommerce.shopify.com/c/shopify-apis-and-technology/t/you-broke-my-build-hmac-verification-broken-282951
","923","<java><oauth><shopify><sha256><hmac>","1","1","3","2018-12-19 03:31:42","32572612","0","2","","","","2015-09-14 12:39:12",""
"32565052","HMAC-SHA256 issue in Shopify oauth (Output does not match)","I'm trying to publish an app on Shopify marketplace by following this documentation. And I'm stuck on step-3 of the oauth documentation wherein you have to do 'HMAC Signature Validation'.
Documentation states that you have to process the string (specified below) through HMAC-SHA256 using app's shared secret key.
String = ""shop=some-shop.myshopify.com&timestamp=1337178173""

I'm trying to implement the steps using Java. Following is gist of the code that I have used.
        private static final String HMAC_ALGORITHM = ""HmacSHA256"";
        String key = ""hush"";
        String data = ""shop=some-shop.myshopify.com&timestamp=1337178173"";    
        SecretKeySpec keySpec = new SecretKeySpec(key.getBytes(),HMAC_ALGORITHM);
        Mac mac = Mac.getInstance(HMAC_ALGORITHM);
        mac.init(keySpec);
        byte[] rawHmac = mac.doFinal(data.getBytes());
        System.out.println(Hex.encodeHexString(rawHmac));

The code produces the following string:
c2812f39f84c32c2edaded339a1388abc9829babf351b684ab797f04cd94d4c7

Through some random search on Shopify developer forum I found the link to a question.
The last message from @Shayne suggests that we have to make changes in data variable by adding protocol field.
But it didn't work out :(
Can anyone tell me what should be done?Do I have to make modifications in my code or the process in the documentation have changed.
Please help.
","Here's the java code you need to verify Shopify HMAC. The protocol parameter isn't required unless it was in the result from shopify, which it wasn't from me.
@Override
protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    String HMAC_ALGORITHM = ""HmacSHA256"";
    resp.setContentType(""text/html;charset=UTF-8"");
    Map<String,String[]> parameters = req.getParameterMap();
    String data = null;
    SortedSet<String> keys = new TreeSet<String>(parameters.keySet());
    for (String key : keys) {
        if (!key.equals(""hmac"")&&!key.equals(""signature"")){
        if (data == null){
            data = key + ""="" +req.getParameter(key);
        }
            else {
            data = data + ""&"" + key + ""="" + req.getParameter(key);
        }
    }
    }
    SecretKeySpec keySpec = new SecretKeySpec(SHARED_KEY.getBytes(),HMAC_ALGORITHM);
    Mac mac = null;
    try {
        mac = Mac.getInstance(HMAC_ALGORITHM);
        mac.init(keySpec);
        byte[] rawHmac = mac.doFinal(data.getBytes());
        if (Hex.encodeHexString(rawHmac).equals(req.getParameter(""hmac""))){
            //THE HMAC IS VERIFIED
        } else {
            //THE HMAC IS NOT VERIFIED
        }
    } catch (NoSuchAlgorithmException | InvalidKeyException e) {
        e.printStackTrace();
    }
}

Interestingly, the timestamp parameter in data turns into
×tamp=1459537704

instead of 
&timestamp=1459537704

","923","<java><oauth><shopify><sha256><hmac>","1","1","3","2018-12-19 03:31:42","32572612","0","2","","","","2015-09-14 12:39:12",""
"32565052","HMAC-SHA256 issue in Shopify oauth (Output does not match)","I'm trying to publish an app on Shopify marketplace by following this documentation. And I'm stuck on step-3 of the oauth documentation wherein you have to do 'HMAC Signature Validation'.
Documentation states that you have to process the string (specified below) through HMAC-SHA256 using app's shared secret key.
String = ""shop=some-shop.myshopify.com&timestamp=1337178173""

I'm trying to implement the steps using Java. Following is gist of the code that I have used.
        private static final String HMAC_ALGORITHM = ""HmacSHA256"";
        String key = ""hush"";
        String data = ""shop=some-shop.myshopify.com&timestamp=1337178173"";    
        SecretKeySpec keySpec = new SecretKeySpec(key.getBytes(),HMAC_ALGORITHM);
        Mac mac = Mac.getInstance(HMAC_ALGORITHM);
        mac.init(keySpec);
        byte[] rawHmac = mac.doFinal(data.getBytes());
        System.out.println(Hex.encodeHexString(rawHmac));

The code produces the following string:
c2812f39f84c32c2edaded339a1388abc9829babf351b684ab797f04cd94d4c7

Through some random search on Shopify developer forum I found the link to a question.
The last message from @Shayne suggests that we have to make changes in data variable by adding protocol field.
But it didn't work out :(
Can anyone tell me what should be done?Do I have to make modifications in my code or the process in the documentation have changed.
Please help.
","here is my prod code:
public class HMACValidator {

   public static String sha256HMAC(String key, String data) throws NoSuchAlgorithmException, InvalidKeyException, UnsupportedEncodingException, DecoderException {
    Mac hmac = Mac.getInstance(""HmacSHA256"");
    System.out.println(""data ""+data);
    SecretKeySpec secret_key = new SecretKeySpec(key.getBytes(""UTF-8""), ""HmacSHA256"");
    hmac.init(secret_key);
    return Hex.encodeHexString(hmac.doFinal(data.getBytes(""UTF-8"")));
    }

    public static boolean validateShopifyAskForPermission(String key, String hmac, String shop, String timestamp) throws Exception {
        return (sha256HMAC(key, ""shop=""+shop+""&timestamp=""+timestamp).compareTo(hmac) == 0);
    }
}

","923","<java><oauth><shopify><sha256><hmac>","1","0","3","2018-12-19 03:31:42","32572612","0","2","","","","2015-09-14 12:39:12",""
"39518616","Converting SHA256 from Java to C#","I have a simple question.
I need to rewrite a sha256 checksum method from java to C#
So I have this Java cod to work with :
Canonicalizer c14Canonicalizer = Canonicalizer.getInstance(Canonicalizer.ALGO_ID_C14N_EXCL_WITH_COMMENTS);
byte[] byteArray = c14Canonicalizer.canonicalizeSubtree(doc);

// At this point, the byteArray in Java and the data in C# matches up.
// That is, after the java bytes are converted to unsigned bytes using
// java.lang.Byte.toUnsignedInt()

MessageDigest md = MessageDigest.getInstance(""SHA-256"");
md.update(byteArray);
byte byteData[] = md.digest();

(byteArray is, you guessed it, a byte array :D)
From what I can find, the update() and digest() method should basicly be substitutet for the TransformBlock() and TransformFinalBlock() methods in the respective HashAlgorithm derived class (in this case SHA256).
So I've tried with something similar to this in C#:
var data = Encoding.UTF8.GetBytes(xmlString);

// At this point, the byteArray in Java and the data in C# matches up.
// That is, after the java bytes are converted to unsigned bytes using
// java.lang.Byte.toUnsignedInt()

using (var sha256 = SHA256.Create())
{
    byte[] shaBytes = new byte[data.Length];
    data.CopyTo(shaBytes, 0);

    sha256.TransformBlock(shaBytes, 0, shaBytes.Length, shaBytes, 0);

    sha256.TransformFinalBlock(shaBytes, 0, shaBytes.Length);
    return sha256.Hash;
}

(and again, data is a byte array)
However, the bytes do not match up. Am I missing something here?
(well of course I am, otherwise it would work, right? :S )
UPDATE
To give you some more info to go on, I have matched the bytes between the Java and C# code before running the code you see above. And then they do match. However, the bytes in the C# code comes from a UTF8-Encoded string while the Java bytes comes from a c14Canonicalizer.canonicalizeSubtree() method.
I'll update the above code examples to include their origins.
UPDATE
For what it's worth, the Java md.digest() method returns the following bytes:
-86, 44, 95, 84, 3, 50, 7, -119, -36, 46, 39, 32, -120, 7, 10, -86, -101, 110, -93, -72, -13, -93, -42, 111, 0, 59, -85, -63, -15, -98, -17, -52
when converted that translates to
170,44,95,84,3,50,7,137,220,46,39,32,136,7,10,170,155,110,163,184,243,163,214,111,0,59,171,193,241,158,239,204
while the C# code returns 
72,108,14,47,15,200,209,10,68,87,17,220,67,226,162,123,69,186,130,167,239,250,180,178,75,101,39,195,32,171,156,178
when using sha256.ComputeHash()
","Did you try the ComputeHash method ?
i.e :
var byteArray = Encoding.ASCII.GetBytes(""hello"");
var sha = SHA256.Create();
byte[] outputBytes = sha.ComputeHash(byteArray);
var result = BitConverter.ToString(outputBytes).Replace(""-"", """").ToLower();

EDIT
Can you try this ? 
XmlDocument doc = new XmlDocument();
doc.LoadXml(""xmlString"");
XmlDsigExcC14NWithCommentsTransform c14n = new XmlDsigExcC14NWithCommentsTransform();
c14n.LoadInnerXml(doc.ChildNodes);
Stream s = (Stream)c14n.GetOutput(typeof(Stream));
var sha = SHA256.Create();
byte[] outputBytes = sha.ComputeHash(s);

","919","<java><c#><sha256>","0","0","3","2016-09-16 08:17:21","39521676","4","3","4762137","","2016-09-15 20:58:55","2016-09-15 19:08:41",""
"39518616","Converting SHA256 from Java to C#","I have a simple question.
I need to rewrite a sha256 checksum method from java to C#
So I have this Java cod to work with :
Canonicalizer c14Canonicalizer = Canonicalizer.getInstance(Canonicalizer.ALGO_ID_C14N_EXCL_WITH_COMMENTS);
byte[] byteArray = c14Canonicalizer.canonicalizeSubtree(doc);

// At this point, the byteArray in Java and the data in C# matches up.
// That is, after the java bytes are converted to unsigned bytes using
// java.lang.Byte.toUnsignedInt()

MessageDigest md = MessageDigest.getInstance(""SHA-256"");
md.update(byteArray);
byte byteData[] = md.digest();

(byteArray is, you guessed it, a byte array :D)
From what I can find, the update() and digest() method should basicly be substitutet for the TransformBlock() and TransformFinalBlock() methods in the respective HashAlgorithm derived class (in this case SHA256).
So I've tried with something similar to this in C#:
var data = Encoding.UTF8.GetBytes(xmlString);

// At this point, the byteArray in Java and the data in C# matches up.
// That is, after the java bytes are converted to unsigned bytes using
// java.lang.Byte.toUnsignedInt()

using (var sha256 = SHA256.Create())
{
    byte[] shaBytes = new byte[data.Length];
    data.CopyTo(shaBytes, 0);

    sha256.TransformBlock(shaBytes, 0, shaBytes.Length, shaBytes, 0);

    sha256.TransformFinalBlock(shaBytes, 0, shaBytes.Length);
    return sha256.Hash;
}

(and again, data is a byte array)
However, the bytes do not match up. Am I missing something here?
(well of course I am, otherwise it would work, right? :S )
UPDATE
To give you some more info to go on, I have matched the bytes between the Java and C# code before running the code you see above. And then they do match. However, the bytes in the C# code comes from a UTF8-Encoded string while the Java bytes comes from a c14Canonicalizer.canonicalizeSubtree() method.
I'll update the above code examples to include their origins.
UPDATE
For what it's worth, the Java md.digest() method returns the following bytes:
-86, 44, 95, 84, 3, 50, 7, -119, -36, 46, 39, 32, -120, 7, 10, -86, -101, 110, -93, -72, -13, -93, -42, 111, 0, 59, -85, -63, -15, -98, -17, -52
when converted that translates to
170,44,95,84,3,50,7,137,220,46,39,32,136,7,10,170,155,110,163,184,243,163,214,111,0,59,171,193,241,158,239,204
while the C# code returns 
72,108,14,47,15,200,209,10,68,87,17,220,67,226,162,123,69,186,130,167,239,250,180,178,75,101,39,195,32,171,156,178
when using sha256.ComputeHash()
","I found the issue. The problem was the characters used for linebreaks in the xml-string. in my xml \r\n is used for linebreaks, what needed to be done was to change it to \n which seems to be what java uses.
I found the answer here where Gerben Rampaart had noticed the same thing on different online sha256-calculators and ken2k knew what the difference was
Once I had done that SHA256.TransformFinalBlock()worked like a charm.
The final solution looks something like this:
public byte[] GetDocumentHash(XmlDocument doc)
{
    string formattedXml;
    Transform canonicalTransform = new XmlDsigExcC14NWithCommentsTransform();
    canonicalTransform.LoadInput(doc);

    using (Stream canonicalStream = (Stream)canonicalTransform.GetOutput(typeof(Stream)))
    using (var stringWriter = new EncodingStringWriter(Encoding.UTF8))
    using (var xmlTextWriter = XmlWriter.Create(stringWriter, new XmlWriterSettings { NewLineChars = ""\n"", CloseOutput = false, Encoding = Encoding.UTF8, Indent = true, OmitXmlDeclaration = true }))
    {
        XmlDocument newDoc = new XmlDocument();
        newDoc.Load(canonicalStream);
        newDoc.WriteTo(xmlTextWriter);
        xmlTextWriter.Flush();
        formattedXml = stringWriter.GetStringBuilder().ToString();
    }

    byte[] bytesToCalculate = Encoding.UTF8.GetBytes(formattedXml);

    using (var sha256 = SHA256.Create())
    {
        byte[] shaBytes = new byte[bytesToCalculate.Length];
        bytesToCalculate.CopyTo(shaBytes, 0);

        sha256.TransformFinalBlock(shaBytes, 0, shaBytes.Length);
        return sha256.Hash;
    }
}

There's probably a lot of refactoring and refining needed, but it gets the job done.
A big thank you to all of you who helped me! 
","919","<java><c#><sha256>","0","0","3","2016-09-16 08:17:21","39521676","4","3","4762137","","2016-09-15 20:58:55","2016-09-15 19:08:41",""
"39518616","Converting SHA256 from Java to C#","I have a simple question.
I need to rewrite a sha256 checksum method from java to C#
So I have this Java cod to work with :
Canonicalizer c14Canonicalizer = Canonicalizer.getInstance(Canonicalizer.ALGO_ID_C14N_EXCL_WITH_COMMENTS);
byte[] byteArray = c14Canonicalizer.canonicalizeSubtree(doc);

// At this point, the byteArray in Java and the data in C# matches up.
// That is, after the java bytes are converted to unsigned bytes using
// java.lang.Byte.toUnsignedInt()

MessageDigest md = MessageDigest.getInstance(""SHA-256"");
md.update(byteArray);
byte byteData[] = md.digest();

(byteArray is, you guessed it, a byte array :D)
From what I can find, the update() and digest() method should basicly be substitutet for the TransformBlock() and TransformFinalBlock() methods in the respective HashAlgorithm derived class (in this case SHA256).
So I've tried with something similar to this in C#:
var data = Encoding.UTF8.GetBytes(xmlString);

// At this point, the byteArray in Java and the data in C# matches up.
// That is, after the java bytes are converted to unsigned bytes using
// java.lang.Byte.toUnsignedInt()

using (var sha256 = SHA256.Create())
{
    byte[] shaBytes = new byte[data.Length];
    data.CopyTo(shaBytes, 0);

    sha256.TransformBlock(shaBytes, 0, shaBytes.Length, shaBytes, 0);

    sha256.TransformFinalBlock(shaBytes, 0, shaBytes.Length);
    return sha256.Hash;
}

(and again, data is a byte array)
However, the bytes do not match up. Am I missing something here?
(well of course I am, otherwise it would work, right? :S )
UPDATE
To give you some more info to go on, I have matched the bytes between the Java and C# code before running the code you see above. And then they do match. However, the bytes in the C# code comes from a UTF8-Encoded string while the Java bytes comes from a c14Canonicalizer.canonicalizeSubtree() method.
I'll update the above code examples to include their origins.
UPDATE
For what it's worth, the Java md.digest() method returns the following bytes:
-86, 44, 95, 84, 3, 50, 7, -119, -36, 46, 39, 32, -120, 7, 10, -86, -101, 110, -93, -72, -13, -93, -42, 111, 0, 59, -85, -63, -15, -98, -17, -52
when converted that translates to
170,44,95,84,3,50,7,137,220,46,39,32,136,7,10,170,155,110,163,184,243,163,214,111,0,59,171,193,241,158,239,204
while the C# code returns 
72,108,14,47,15,200,209,10,68,87,17,220,67,226,162,123,69,186,130,167,239,250,180,178,75,101,39,195,32,171,156,178
when using sha256.ComputeHash()
","Below sample may be giving same result. Because you are making same operation long way. In your code, you are getting cleaned xml from XmlDsigExcC14NWithCommentsTransform then calculate hash. Below example calculate directly.
XmlDocument doc = new XmlDocument();
doc.LoadXml(""<a><xmlString>mkysoft</xmlString></a>"");
XmlDsigExcC14NWithCommentsTransform c14n = new XmlDsigExcC14NWithCommentsTransform();
c14n.LoadInput(doc);
var digest = c14n.GetDigestedOutput(SHA256.Create());

","919","<java><c#><sha256>","0","0","3","2016-09-16 08:17:21","39521676","4","3","4762137","","2016-09-15 20:58:55","2016-09-15 19:08:41",""
"46962816","Api key authentication for coinbase","I'm trying to write a request for API coinbase.com, but I can not correctly generate a signature. I've been trying to find my mistake for 2 days, but I can not. I analyzed the code for other languages on the page: https://developers.coinbase.com/docs/wallet/api-key-autumnicathion but I do not see any differences in implementation.
Help me please.
<?php
$g_coinbase_key = 'KcxisxqmWRVgtwsj';
$g_coinbase_secret = 'isOLGBLaEkCy3ROQMvmjonGmXK0KRmUS';

$time = time();
$method = ""GET"";
$path = '/v2/accounts/';
$sign = base64_encode(hash_hmac(""sha256"", $time.$method.$path, $g_coinbase_secret));
$ch = curl_init('https://api.coinbase.com'.$path);
$headers = array(
    ""CB-VERSION: 2017-10-26"",
    ""CB-ACCESS-SIGN: "".$sign,
    ""CB-ACCESS-TIMESTAMP: "".$time,
    ""CB-ACCESS-KEY: "".$g_coinbase_key,
    ""Content-Type: application/json""
);
curl_setopt($ch, CURLOPT_HTTPGET, true);
curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
$result = curl_exec($ch);
var_dump($result);
?>

Result:
{""errors"":[{""id"":""authentication_error"",""message"":""invalid signature""}]}

","Create signature like this:
$time = time();
$method = ""GET"";
$path = 'accounts';
$sign = base64_encode(hash_hmac(""sha256"", $time.$method.$path, base64_decode($g_coinbase_secret), true));

and replace
$ch = curl_init('https://api.coinbase.com'.$path);

with
$ch = curl_init('https://api.coinbase.com/v2/');

","917","<signature><sha256><coinbase-api><coinbase-php>","-1","0","1","2018-03-31 12:44:24","","0","0","8839979","","2017-10-26 20:10:02","2017-10-26 20:00:45",""
"30710146","PHP mysqlnd sha256_password plugin ""Access denied"", user works from cli mysql","I'm trying to secure a mysql connection with SSL and password encryption by  sha256.
My setup works as expected from the cli mysql and when using native mysql password.
When trying to connect as a user with sha256 pasword i get ""HY000/1045): Access denied for user 'sha256user'@'192.168.120.45' (using password: YES)"", but I can connect the same user by cli mysql.
I have the same problem both on locally and when trying from a remote host.
[root@vt0-0-7 bin]# /ct/nih/mysql-5.6/bin/mysql -u sha256user -p -h 192.168.120.30
Enter password: 

...

mysql> SHOW STATUS LIKE 'Ssl_cipher';
+---------------+--------------------+
| Variable_name | Value              |
+---------------+--------------------+
| Ssl_cipher    | DHE-RSA-AES256-SHA |
+---------------+--------------------+
1 row in set (0.02 sec)

mysql> 

My php setup:
[root@vt0-0-7 bin]# php --version
PHP 5.6.9 (cli) (built: Jun  3 2015 13:06:06) 
Copyright (c) 1997-2015 The PHP Group
Zend Engine v2.6.0, Copyright (c) 1998-2015 Zend Technologies
[root@vt0-0-7 bin]# 
[root@vto-0-5 bin]# php -i | grep -n mysqlnd
6:Configure Command =>  './configure'  '--prefix=/ct/nih/php-5.6.9/' '--with-mysql=mysqlnd' '--with-pdo-mysql=mysqlnd' '--with-xsl' '--with-libxml-dir' '--with-mysqli=mysqlnd' '--with-openssl' '--with-zlib' '--enable-ftp' '--with-apxs2=/ct/nih/httpd-2.2.29/bin/apxs' '--enable-sockets' '--with-curl' '--with-mcrypt' '--with-readline' '--with-pcre-regex=/ct/nih/pcre-8.20' '--enable-soap' '--without-sqlite3' '--without-pdo-sqlite' '--enable-mbstring'
280:Client API version => mysqlnd 5.0.11-dev - 20120503 - $Id:3c688b6bbc30d36af3ac34fdd4b7b5b787fe5555 $
298:Client API library version => mysqlnd 5.0.11-dev - 20120503 - $Id: 3c688b6bbc30d36af3ac34fdd4b7b5b787fe5555 $
316:mysqlnd
318:mysqlnd => enabled
319:Version => mysqlnd 5.0.11-dev - 20120503 - $Id: 3c688b6bbc30d36af3ac34fdd4b7b5b787fe5555 $
329:Loaded plugins => mysqlnd,debug_trace,auth_plugin_mysql_native_password,auth_plugin_mysql_clear_password,auth_plugin_sha256_password
332:mysqlnd statistics =>  
521:Client API version => mysqlnd 5.0.11-dev - 20120503 - $Id: 3c688b6bbc30d36af3ac34fdd4b7b5b787fe5555 $
[root@vto-0-5 bin]# 

When I use a user with ""native password"" PHP uses an SSL connection.
PHP connection code:
$this->dbh = mysqli_init();
$res = $this->dbh->ssl_set(DB_CLIENT_KEY, DB_CLIENT_CERT, DB_CA_CERT, NULL, NULL);
$user=""sha256user"";
$pass=""Sh@256Pa33"";
$connRes = $this->dbh->real_connect($dbHost, $user , $pass, $dbName, 3306, NULL, MYSQLI_CLIENT_SSL);

Edit:
MySQL is compiled locally with:
$> cmake . -DWITH_SSL=system

$> mysql --version
mysql  Ver 14.14 Distrib 5.6.25, for Linux (x86_64) using  EditLine wrapper
$> 

Does anyone have any idea where to look for the problem?
","This is an official MySQL bug since July 2015: http://bugs.mysql.com/bug.php?id=77595
","913","<php><mysql><ssl><sha256><mysqlnd>","3","1","1","2015-09-22 08:06:00","32711605","0","1","671282","","2015-06-09 08:15:19","2015-06-08 13:14:48",""
"48720900","File access denied in C# uwp","I am solving one issue. I am developing uwp app and I need to get sha256 hash of file selected with filepicker. 
I have complete part with filepicker, but when I select file from my computer with filepicker and I want to check hash of this file, I get error message about access denied.
Did anyone solved such a problem? I thought, that when I select file with filepicker, I can access it, right?
","Solved.
I problem was with init of stream, I inited a new stream by name, but it doesnt work this way.
I found, that if I go throught all files selected with filepicker, I would use object returned from filepicker.
Working example:
        var picker = new Windows.Storage.Pickers.FileOpenPicker();
        picker.ViewMode = Windows.Storage.Pickers.PickerViewMode.Thumbnail;
        picker.SuggestedStartLocation = Windows.Storage.Pickers.PickerLocationId.VideosLibrary;
        picker.FileTypeFilter.Add("".avi"");
        picker.FileTypeFilter.Add("".mp4"");
        picker.FileTypeFilter.Add("".mpeg"");
        picker.FileTypeFilter.Add("".mov"");
        picker.FileTypeFilter.Add("".mkv"");

        IReadOnlyList<StorageFile> files = await picker.PickMultipleFilesAsync();
        if (files.Count > 0)
        {
            // doing some needed staff

            StringBuilder output = new StringBuilder(""Picked files:\n\n"");

            // Application now has read/write access to the picked file(s)
            foreach (StorageFile file in files)
            {
                output.Append(file.Name + ""\n"");

                using (IRandomAccessStream filestream = await file.OpenAsync(FileAccessMode.ReadWrite))
                {
                    output.Append(""File SHA256 hash -> "" + BytesToString(Sha256.ComputeHash(filestream.AsStreamForRead())) + ""\n\n"");
                    await filestream.FlushAsync();
                }
            }
            this.filePickerInfo.Text = output.ToString();                
        }
        else
        {
            this.filePickerInfo.Text = ""Operation cancelled."";                
        }    

","912","<c#><uwp><sha256><filepicker>","1","3","1","2018-02-11 09:07:15","48729957","7","0","","","","2018-02-10 12:43:20",""
"43175240","Can Android 4.4 support cipher with SHA256?","I am working on a device running Android 4.4 (API level 19). But I need to develop an application connecting to a server only support TLSv1.2 and cipher of SHA256. I tried creating the SSL context with the legacy apache library and the updated apache 4.4.1.2 (cz.msebera.android). After creating the context and I get the supported cipher, nothing of them contains SHA256. The program is running fine on other Android 5.0+ devices.
My question is that any way I can support TLSv1.2 and cipher SHA256 on an Android 4.4 device?
Thanks.
","
... running Android 4.4 (API level 19)

According to the documentation of SSLSocket any ciphers using SHA-256 as HMAC are only available since API level 20.
","911","<android><ssl><encryption><sha256>","2","1","2","2017-08-15 00:59:22","45685090","0","2","","","","2017-04-03 01:14:45",""
"43175240","Can Android 4.4 support cipher with SHA256?","I am working on a device running Android 4.4 (API level 19). But I need to develop an application connecting to a server only support TLSv1.2 and cipher of SHA256. I tried creating the SSL context with the legacy apache library and the updated apache 4.4.1.2 (cz.msebera.android). After creating the context and I get the supported cipher, nothing of them contains SHA256. The program is running fine on other Android 5.0+ devices.
My question is that any way I can support TLSv1.2 and cipher SHA256 on an Android 4.4 device?
Thanks.
","Finally, I resolved the problem by creating my own SSL factory like this:
package com.bbpos.www.payment_gp.webservice; 

public class NoSSLv3SocketFactory extends SSLSocketFactory {
private final SSLSocketFactory delegate;

public NoSSLv3SocketFactory() {
    this.delegate = HttpsURLConnection.getDefaultSSLSocketFactory();
}

public NoSSLv3SocketFactory(SSLSocketFactory delegate) {
    this.delegate = delegate;
}

@Override
public String[] getDefaultCipherSuites() {
    return delegate.getDefaultCipherSuites();
}

@Override
public String[] getSupportedCipherSuites() {
    return delegate.getSupportedCipherSuites();
}

private Socket makeSocketSafe(Socket socket) {
    if (socket instanceof SSLSocket) {
        String[] protocols = {
                ""TLSv1.1"",
                ""TLSv1.2""
        };
        ((SSLSocket) socket).setEnabledProtocols(protocols);
    }
    return socket;
}

@Override
public Socket createSocket(Socket s, String host, int port, boolean autoClose) throws IOException {
    return makeSocketSafe(delegate.createSocket(s, host, port, autoClose));
}

@Override
public Socket createSocket(String host, int port) throws IOException {
    return makeSocketSafe(delegate.createSocket(host, port));
}

@Override
public Socket createSocket(String host, int port, InetAddress localHost, int localPort) throws IOException {
    return makeSocketSafe(delegate.createSocket(host, port, localHost, localPort));
}

@Override
public Socket createSocket(InetAddress host, int port) throws IOException {
    return makeSocketSafe(delegate.createSocket(host, port));
}

@Override
public Socket createSocket(InetAddress address, int port, InetAddress localAddress, int localPort) throws IOException {
    return makeSocketSafe(delegate.createSocket(address, port, localAddress, localPort));
}

}

And then initialize the factory at beginning of program:
TrustManager[] trustAllCerts = new TrustManager[]{new X509TrustManager() {

        public java.security.cert.X509Certificate[] getAcceptedIssuers() {
            return new java.security.cert.X509Certificate[0];
        }

        public void checkClientTrusted(java.security.cert.X509Certificate[] certs,
                                       String authType) {
        }

        public void checkServerTrusted(java.security.cert.X509Certificate[] certs,
                                       String authType) {
        }
    }};
    try {
        SSLContext sc;
        sc = SSLContext.getInstance(""TLS"");
        sc.init(null, trustAllCerts, new java.security.SecureRandom());
        SSLSocketFactory NoSSLv3Factory = new NoSSLv3SocketFactory(sc.getSocketFactory());
        HttpsURLConnection
                .setDefaultSSLSocketFactory(NoSSLv3Factory);
        HttpsURLConnection.setDefaultHostnameVerifier(new HostnameVerifier() {
            @Override
            public boolean verify(String hostname, SSLSession session) {
                return true;
            }
        });

    } catch (Exception e)
    {

    }

","911","<android><ssl><encryption><sha256>","2","0","2","2017-08-15 00:59:22","45685090","0","2","","","","2017-04-03 01:14:45",""
"9097398","Rails 3 - Sign Responses with HMAC-SHA256","I am using OpenSSL HMAC SHA256 method to sign all my requests to the server generating a HASH using a private key. My requests look like:
www.myserver.com/url/to/resource?par1=val1&par2=val2&par3=val3&hash=GENERATEDHASH
So my server calculates a hash using the parameters and the same key, if the hashes match he considers that the request is OK.
I want to sign the responses (using a HTTP header maybe) too. My idea is to calculate the hash  using the content of the response and add that hash to the header, so my other side can validate that response before processing it. 
Any ideas on how to do that?
","You might want to emulate Amazon's way of doing it?
http://docs.aws.amazon.com/AWSECommerceService/latest/DG/rest-signature.html
","906","<ruby><ruby-on-rails-3><ruby-on-rails-3.1><sha256><hmacsha1>","2","0","1","2013-02-14 19:55:50","","1","","","","","2012-02-01 14:22:33",""
"41221283","SQL Server 2008 R2, HASHBYTES SHA256 returning NULL","SQL Server 2008 R2 (SP2), HASHBYTES SHA2_256 returning NULL. Not sure if there is any settings to be configured to enable it. I understand SHA2_512 works on or above SQL 2012. But SHA2_256 should work in SQL 2008. Help me understand here please. 
Below is the screenshot showing I am on 2008 R2.

","from MSDN

256 bits (32 bytes) for SHA2_256, and 512 bits (64 bytes) for SHA2_512
  applies to SQL Server 2012 through SQL Server 2016.

that's why  you are getting null.
","900","<sql-server><sha256>","1","2","1","2016-12-19 11:17:22","41221369","0","","7055233","","2016-12-19 11:17:22","2016-12-19 11:09:17",""
"2986805","Are SHA-1, SHA-2 patented?","Do you need a license to use SHA-1 or SHA-2 for commercial purposes?
","I don't think so. SHA-1 was published by the National Institute of Standards and Technology and made available to anyone.
","896","<encryption><hash><sha1><sha256>","4","1","4","2010-06-08 14:15:58","2998109","0","0","","","","2010-06-07 02:41:52",""
"2986805","Are SHA-1, SHA-2 patented?","Do you need a license to use SHA-1 or SHA-2 for commercial purposes?
","No, you don't.
","896","<encryption><hash><sha1><sha256>","4","2","4","2010-06-08 14:15:58","2998109","0","0","","","","2010-06-07 02:41:52",""
"2986805","Are SHA-1, SHA-2 patented?","Do you need a license to use SHA-1 or SHA-2 for commercial purposes?
","It was originally created by the NSA For secure DSA Encryptions and then adopted by NIST to maintain all aspects of the algorithm Along with SHA(2 and 3).
This is an free to use, ""as is"" algorithm and is widely used by the DSA Encryptions
heres the RFC on the system.
http://www.itl.nist.gov/fipspubs/fip180-1.htm
","896","<encryption><hash><sha1><sha256>","4","4","4","2010-06-08 14:15:58","2998109","0","0","","","","2010-06-07 02:41:52",""
"2986805","Are SHA-1, SHA-2 patented?","Do you need a license to use SHA-1 or SHA-2 for commercial purposes?
","Neither SHA-1 or SHA-2 is patented or covered by any intellectual property of that kind. You can use them freely for any purpose. The NIST (which is the US federal institution which standardized SHA-1 and SHA-2) is actually running an open competition for the selection of the next standard hash function (provisionally dubbed ""SHA-3"") and an explicit requirement for candidates is that in the event they are ultimately selected, then they must be stripped of any patent or copyright or whatever. SHA-3 will be as freely usable as SHA-1 and SHA-2 are.
","896","<encryption><hash><sha1><sha256>","4","3","4","2010-06-08 14:15:58","2998109","0","0","","","","2010-06-07 02:41:52",""
"19474389","RSA Signature Verification with No Certificate JavaScript","Sorry if this question is horribly formatted, this is the first time I've asked one on this site...
So, currently, I am working on a JavaScript extension for Chrome that is supposed to verify an RSA signature without using a certificate.  And I just cannot, for the life of me, figure out what is going wrong! I've looked for hours for some answers or alternative methods but couldn't find anything that worked specifically for my code.  Here is my code so far to clarify my issue:
Signature generating function
function sign(sk, m, certname) {

    var key = new RSAKey();

    key.setPrivate(sk.n, sk.e, sk.d);

    var h = CryptoJS.SHA256(JSON.stringify(m)).toString(CryptoJS.enc.Hex);

    h = new BigInteger(h, 16);

    var sig = key.doPrivate(h).toString(16);

    var obj = { ""type"": ""SIGNED"", ""msg"": m, ""certname"": certname, ""sig"": sig };

    return JSON.stringify(obj);

}

Verification
function verify(pk, signed) {

var key = new RSAKey();
var s = JSON.stringify(signed.sig).toString(CryptoJS.enc.Hex);
s = parseInt(s, 16);
var e = JSON.stringify(pk.e).toString(CryptoJS.enc.Hex);
log(e);
var n = JSON.stringify(pk.n).toString(CryptoJS.enc.Hex);
log(n);
var v = Math.pow(s, e) % n;
var hash = CryptoJS.SHA256(signed.msg).toString(CryptoJS.enc.Hex);
log(v);
log(hash);
return (v == hash);

}

In the log, v is, for some reason, always has the value infinity.  Am I using the wrong technique?  Is there a way for my current function to be fixed or is it completely wrong?
Update:
I tried changing the code to:
function verify(pk, signed) {

var key = new RSAKey();
var s = JSON.stringify(signed.sig).toString(CryptoJS.enc.Hex);
s = new BigInteger(s, 16);
log(""s:  "" + s);
var e = JSON.stringify(pk.e).toString(CryptoJS.enc.Hex);
e = new BigInteger(e, 2);
log(""e:  "" + e);
var n = JSON.stringify(pk.n).toString(CryptoJS.enc.Hex);
n = new BigInteger(n, 16);
log(""n:  "" + n);
key.setPublic(n, e);
var v = key.doPublic(s).toString(16);
log(""v:  "" + v);
var hash = CryptoJS.SHA256(JSON.stringify(signed.msg)).toString(CryptoJS.enc.Hex);
log(""hash:  "" + hash);
return (v == hash);
}

I know the values I'm giving should result in a pass but now the logs are saying v = 1 whereas hash is (I would assume) what it should be.
","I figured it out, I was parsing the n and e values to a wrong type.  The working code was:
function verify(pk, signed) {

var key = new RSAKey();
var s = JSON.stringify(signed.sig).toString(CryptoJS.enc.Hex);
s = new BigInteger(s, 16);
log(""s:  "" + s);
key.setPublic(pk.n, pk.e);
var v = key.doPublic(s).toString(16);
log(""v:  "" + v);
var hash = CryptoJS.SHA256(JSON.stringify(signed.msg)).toString(CryptoJS.enc.Hex);
log(""hash:  "" + hash);
return (v == hash);

}

","895","<javascript><rsa><signature><verification><sha256>","2","2","1","2013-10-21 04:44:31","","2","","2899379","","2013-10-21 04:34:24","2013-10-20 05:57:39",""
"32982883","Using SHA256 method of OpenSSL library in C#","I'm coding a wrapper for OpenSSL for C#, and actually everything is working for me now, but i'm having a problem with one method. (I know about OpenSSL.Net, it just doesn't work as I need it and it is missing a lot of methods).
OpenSSL 1.0.1 has SHA256 that I'd like to use. The method itself in the OpenSSL lib C code:
unsigned char *SHA256(const unsigned char *d, size_t n, unsigned char *md)
{
    SHA256_CTX c;
    static unsigned char m[SHA256_DIGEST_LENGTH];

    if (md == NULL)
        md = m;
    SHA256_Init(&c);
    SHA256_Update(&c, d, n);
    SHA256_Final(md, &c);
    OPENSSL_cleanse(&c, sizeof(c));
    return (md);
} 

The function itself returns a pointer, and as parameters it needs the input data, the length of the data to hash, and an object for the hash.
I'm wrapping it in the next way:
[DllImport(DLLNAME, CallingConvention = CallingConvention.Cdecl)]
public extern static IntPtr SHA256(byte[] data, long len, ref byte[] result);

I'm trying to run it the next way:
byte[] d = Encoding.ASCII.GetBytes(""aaaaaaaaaaaaaaaa"");
byte[] r = new byte[32];
IntPtr x = NOpenSSL.Wrapper.SHA256(d, d.Length, ref r);
Console.WriteLine(d.Length + "" "" + x + "" "" + r.Length + "" "" + Encoding.ASCII.GetString(r));

And what i get for result: 16 1838788744 1. The d.Length is 16 OK, I get the x as a pointer OK, the r.Length becomes 1 byte that is impossible.
If I don't ref the byte[] in the method just simply give it to it nothing changes in the variable r.
Can anyone help me please what am i doing wrong?
Thank you for the help in advance!
","After some dicovery of the OpenSSL C source and experimenting with C# pointers and Marshaling it turned out the SHA256 method does not put the result hash in the variable md, but it returns a pointer to the hash. (First i thought it's the pointer of the SHA256-struct, but it is the actual hash.)
The working C# code is the following:
[DllImport(DLLNAME, CallingConvention = CallingConvention.Cdecl)]
public extern static IntPtr SHA256(byte[] data, long len, byte[] result);

-
byte[] data = Encoding.ASCII.GetBytes(""some_data_to_hash"");

IntPtr r = NOpenSSL.Wrapper.SHA256(data, data.Length, null);
byte[] output = new byte[32];
Marshal.Copy(r, output, 0, output.Length);

// output contains now the 32 bytes of the hashed data

Since we are not using the 3rd variable of the SHA256 method (we just pass null instead) the ref is needed to be removed from the DllImport.
(Note: https://www.openssl.org/docs/manmaster/crypto/sha.html says: If md is NULL, the digest is placed in a static array. Note: setting md to NULL is not thread safe.)
Using SHA512 is exactly the same just we need to replace the method name at both places in the code and change the output byte[] length from 32 to 64.
","891","<c#><openssl><wrapper><sha><sha256>","2","0","1","2015-10-14 04:41:58","33116765","1","","608639","","2015-10-07 22:32:09","2015-10-07 02:34:46",""
"43667908","How many iterations does the scram-sha-256 setting use in PostgreSQL 10?","How many iterations does the scram-sha-256 setting use in PostgreSQL 10?
The docs just say

Setting this parameter to scram-sha-256 will encrypt the password with SCRAM-SHA-256.

The build log reads.

Add SCRAM-SHA-256 support for password negotiation and storage (Michael Paquier, Heikki Linnakangas) This proves better security than the existing md5 negotiation and storage method.

","It's a compile-time variable in scram-common.h known as SCRAM_ITERATIONS_DEFAULT. Currently it's set to 4096.
That's substantially under the specs ""rule of thumb"" which is cited in Nov 2015 as being 15,000. It's currently the lowest value for permissible iterations. From RFC-7677

The strength of this mechanism is dependent in part on the hash
     iteration-count, as denoted by ""i"" in [RFC5802].  As a rule of thumb,
     the hash iteration-count should be such that a modern machine will
     take 0.1 seconds to perform the complete algorithm; however, this is
     unlikely to be practical on mobile devices and other relatively low-
     performance systems.  At the time this was written, the rule of thumb
     gives around 15,000 iterations required; however, a hash iteration-
     count of 4096 takes around 0.5 seconds on current mobile handsets.
     This computational cost can be avoided by caching the ClientKey
     (assuming the Salt and hash iteration-count is stable).  Therefore,
     the recommendation of this specification is that the hash iteration-
     count SHOULD be at least 4096, but careful consideration ought to be
     given to using a significantly higher value, particularly where
     mobile use is less important.

","888","<postgresql><passwords><sha256><sasl-scram><postgresql-10>","2","3","1","2017-04-27 21:14:52","43667915","0","0","124486","","2017-04-27 21:07:45","2017-04-27 21:06:59",""
"17885528","SHA-256 test vectors","I'm attempting to replicate the values found here http://www.nsrl.nist.gov/testdata/
SHA-256 should hash ""abc"" out to 
 BA7816BF 8F01CFEA 414140DE 5DAE2223 B00361A3 96177A9C B410FF61 F20015AD

but under linux with sha256 sum I am getting this.
edeaaff3f1774ad2888673770c6d64097e391bc362d7d6fb34982ddf0efd18cb

adam@adam-desktop:~/code/android-casual/trunk/CASUALcore$ echo ""abc"">./test.tmp
adam@adam-desktop:~/code/android-casual/trunk/CASUALcore$ sha256sum test.tmp
edeaaff3f1774ad2888673770c6d64097e391bc362d7d6fb34982ddf0efd18cb  test.tmp
adam@adam-desktop:~/code/android-casual/trunk/CASUALcore$ echo ""abc""|sha256sum
edeaaff3f1774ad2888673770c6d64097e391bc362d7d6fb34982ddf0efd18cb  -

","That's because echo appends a newline to the string.  Use echo -n instead:
$ echo ""abc"" | shasum -a 256
edeaaff3f1774ad2888673770c6d64097e391bc362d7d6fb34982ddf0efd18cb  -
$ echo -n ""abc"" | shasum -a 256
ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad  -

","888","<linux><testing><sha256>","1","3","1","2013-07-26 15:44:23","17885661","1","","","","","2013-07-26 15:37:58",""
"26538670","How do I truncate HmacSHA256 to 128 bits?","Java supports three MAC algorithms:

HmacMD5
HmacSHA1
HmacSHA256

I however need to sign someting using HMAC-SHA256-128, which is HmacSHA256 but truncated to 128 bits.
This example and variants of has circulated on stackoverflow:
String MAC = hmacHelper.calculatePlainMAC(""00000000"", ""HmacSHA256"");

String bgSecretKey=""1234567890ABCDEF1234567890ABCDEF"";

public String calculatePlainMAC(String ascii, String algorithm)
{
  Mac mac = null;
  final Charset asciiCs = Charset.forName(""US-ASCII"");
  try
  {
    SecretKeySpec signingKey = new SecretKeySpec(bgcSecretKey.getBytes(), algorithm);
    mac = Mac.getInstance(algorithm);
    mac.init(signingKey);
    byte[] rawHmac = mac.doFinal(asciiCs.encode(ascii).array());

    String result = """";
    for (final byte element : rawHmac)
    {
      result += Integer.toString((element & 0xff) + 0x100, 16);//.substring(1);
    }
    log.debug(""Result: "" + result);
    return result;
  }
  catch (NoSuchAlgorithmException e)
  {
    e.printStackTrace();
    return null;
  }
  catch (InvalidKeyException e)
  {
    e.printStackTrace();
    return null;
  }
}

Result:
1051cd18118219e1261f41401891fd1911a91cf1bc1751db13e10617c1221131231c31ab15613f14412c1681d7132178

This is all good, except that I need a 128-bit result, which I know is
FF365893D899291C3BF505FB3175E880

I have no idea how they reached this result. What I do know is that the HMAC algorithm used is HmacSHA256-128. From what I understand this algorithm will generate a 256-bit result, question is, how do I truncate this into a 128-bits result, returning the known result above?
","The following line always adds 3 characters to the string, starting with '1'. The commented substring(1) removes the 1. It is used so that single character results get a zero pre-pended.
result += Integer.toString((element & 0xff) + 0x100, 16);//.substring(1);

However, even when you fix this, the result does not contain the truncated result you are expecting.
05cd81829e26f44089fd91a9cfbc75db3e067c221323c3ab563f442c68d73278

This of course depends on the value of bgcSecretKey.
You need to use the same key/algorithm/truncation you used to derive the expected result.
","887","<java><hmac><sha256><javax.crypto>","0","0","1","2014-10-23 23:39:26","","2","3","3251434","","2014-10-23 23:39:26","2014-10-23 22:38:50",""
"48457980","Artifactory warns about ""Path checksum calculation job"" after upgrade to 5.8.3","I just migrated our OSS instance of Artifactory from 5.4.5 to 5.8.3 (standalone, using Derby)
I followed the recommendations at https://www.jfrog.com/confluence/display/RTF/Upgrading+Artifactory and basically did:

Actual upgrade to 5.8.3 (stop, replace some files, start)
SHA-256 job to calculate checksums on existing artifacts (stop, add property to confiuguration, start)

Both worked fine and the server is back up and running smoothly.
However, I now have a warning in logs/artifactory.log on instance start up

2018-01-24 16:12:07,633 [art-exec-4] [WARN ] (o.a.s.j.m.p.RepoPathChecksumMigrationJobDelegate:110) - Path Checksum calculation job (for existing artifacts) has been disabled and will not run, there are still 5348 artifacts without path checksum values in the database. Future version of Artifactory may enforce this conversion as a prerequisite for upgrades.

I cannot find any more substantial explanation for this warning. 
I am thinking that this is related to the artifacts layout on the file system (cf. https://www.jfrog.com/confluence/display/RTF/Checksum-Based+Storage#Checksum-BasedStorage-Overview). The artifacts are still laid according to their SHA-1checksums rather than their SHA-256 checksums.
Is my assumption correct? How do I ""fix"" this warning...
EDIT: Some more tests requested by @Ariel:

Restarting the server doesn't help, the warning is still there
Reenabling the migration job and restarting the server doesn't help either

echo ""artifactory.sha2.migration.job.enabled=true"" >> etc/artifactory.system.properties
Looking at the logs related to this migration, it seems that the migration job thinks that everything has been migrated, and the startup check finds 2,000 artifacts that should be migrated.

$ARTIFACTORY_HOME/logs/sha256_migration.log

2018-01-24 14:39:53,982 [art-exec-3] [INFO ] (o.a.s.j.m.s.Sha256MigrationJob:284) - artifactory.Sha256MigrationJob#83253c93-33ec-4c52-bc61-d2d33942dc28: all nodes reached minimal version '5.5.0-m001', continuing execution
2018-01-24 16:12:07,576 [art-exec-3] [INFO ] (o.a.s.j.m.s.Sha256MigrationJob:284) - artifactory.Sha256MigrationJob#6f5c6739-c365-4be2-80a4-d32063a75f8f: all nodes reached minimal version '5.5.0-m001', continuing execution
2018-01-24 16:12:07,651 [art-exec-3] [INFO ] (o.a.s.j.m.s.Sha256MigrationJob:186) - 3319 artifacts and 3292 binary entries are missing SHA256 values - starting calculation job.
2018-01-24 16:12:07,756 [art-exec-3] [INFO ] (o.a.s.j.m.s.Sha256MigrationJob:121) - SHA256 migration state: 0/3319 artifacts were handled.
[...]
2018-01-24 16:13:58,226 [art-exec-3] [INFO ] (o.a.s.j.m.s.Sha256MigrationJob:121) - SHA256 migration state: 3318/3319 artifacts were handled.
2018-01-24 16:13:58,227 [art-exec-3] [INFO ] (o.a.s.j.m.s.Sha256MigrationJob:270) - SHA256 migration job now filling in for missing SHA256 values for binary entries. Found 1 such entries
2018-01-24 16:14:01,065 [art-exec-3] [INFO ] (o.a.s.j.m.s.Sha256MigrationJob:338) - SHA256 migration job has finished successfully. 3319 artifacts and 1 binary entry calculations were submitted (including retries)
2018-01-24 16:29:06,072 [art-exec-3] [INFO ] (o.a.s.j.m.s.Sha256MigrationJob:284) - artifactory.Sha256MigrationJob#7cdeab66-229d-43a5-a788-301f72c10cc5: all nodes reached minimal version '5.5.0-m001', continuing execution
2018-01-29 06:04:57,405 [art-exec-3] [INFO ] (o.a.s.j.m.s.Sha256MigrationJob:284) - artifactory.Sha256MigrationJob#2c539185-b7f4-412f-b988-0688e8505649: all nodes reached minimal version '5.5.0-m001', continuing execution
2018-01-29 10:27:33,655 [art-exec-3] [INFO ] (o.a.s.j.m.s.Sha256MigrationJob:284) - artifactory.Sha256MigrationJob#19afc5d2-c12d-4821-8c1a-808655e8746c: all nodes reached minimal version '5.5.0-m001', continuing execution
2018-01-29 10:31:39,250 [art-exec-3] [INFO ] (o.a.s.j.m.s.Sha256MigrationJob:284) - artifactory.Sha256MigrationJob#c01bd20d-249a-4c6e-80ff-e26301db7e84: all nodes reached minimal version '5.5.0-m001', continuing execution
2018-01-29 10:34:57,321 [art-exec-3] [INFO ] (o.a.s.j.m.s.Sha256MigrationJob:284) - artifactory.Sha256MigrationJob#32fff21f-04d5-45a4-84d2-58083aaf6593: all nodes reached minimal version '5.5.0-m001', continuing execution


$ARTIFACTORY_HOME/logs/path_checksum_migration.log

2018-01-24 14:39:53,982 [art-exec-4] [INFO ] (o.a.s.j.m.p.RepoPathChecksumMigrationJob:284) - artifactory.RepoPathChecksumMigrationJob#2f7f690c-dc78-4074-b35f-e5085d41a2f7: all nodes reached minimal version '5.5.0-m001', continuing execution
2018-01-24 14:39:54,012 [art-exec-4] [WARN ] (o.a.s.j.m.p.RepoPathChecksumMigrationJob:111) - Path Checksum calculation job (for existing artifacts) has been disabled and will not run, there are still 5348 artifacts without path checksum values in the database. Future version of Artifactory may enforce this conversion as a prerequisite for upgrades.
2018-01-24 16:12:07,576 [art-exec-4] [INFO ] (o.a.s.j.m.p.RepoPathChecksumMigrationJob:284) - artifactory.RepoPathChecksumMigrationJob#4c3a71ed-f389-4bff-a7b9-62d20806b270: all nodes reached minimal version '5.5.0-m001', continuing execution
2018-01-24 16:12:07,634 [art-exec-4] [WARN ] (o.a.s.j.m.p.RepoPathChecksumMigrationJob:111) - Path Checksum calculation job (for existing artifacts) has been disabled and will not run, there are still 5348 artifacts without path checksum values in the database. Future version of Artifactory may enforce this conversion as a prerequisite for upgrades.
2018-01-24 16:29:06,072 [art-exec-4] [INFO ] (o.a.s.j.m.p.RepoPathChecksumMigrationJob:284) - artifactory.RepoPathChecksumMigrationJob#8e2c1a01-c3d9-4848-b48a-70813ffd26d1: all nodes reached minimal version '5.5.0-m001', continuing execution
2018-01-24 16:29:06,127 [art-exec-4] [WARN ] (o.a.s.j.m.p.RepoPathChecksumMigrationJob:111) - Path Checksum calculation job (for existing artifacts) has been disabled and will not run, there are still 2029 artifacts without path checksum values in the database. Future version of Artifactory may enforce this conversion as a prerequisite for upgrades.
2018-01-29 06:04:57,405 [art-exec-4] [INFO ] (o.a.s.j.m.p.RepoPathChecksumMigrationJob:284) - artifactory.RepoPathChecksumMigrationJob#b7ac1c4a-5dec-4065-a901-bb5a3d2a4b59: all nodes reached minimal version '5.5.0-m001', continuing execution
2018-01-29 06:04:57,505 [art-exec-4] [WARN ] (o.a.s.j.m.p.RepoPathChecksumMigrationJob:111) - Path Checksum calculation job (for existing artifacts) has been disabled and will not run, there are still 2029 artifacts without path checksum values in the database. Future version of Artifactory may enforce this conversion as a prerequisite for upgrades.
2018-01-29 10:27:33,655 [art-exec-4] [INFO ] (o.a.s.j.m.p.RepoPathChecksumMigrationJob:284) - artifactory.RepoPathChecksumMigrationJob#74cf399a-1c3b-4b11-a687-cc11b19d2887: all nodes reached minimal version '5.5.0-m001', continuing execution
2018-01-29 10:27:33,704 [art-exec-4] [WARN ] (o.a.s.j.m.p.RepoPathChecksumMigrationJob:111) - Path Checksum calculation job (for existing artifacts) has been disabled and will not run, there are still 2029 artifacts without path checksum values in the database. Future version of Artifactory may enforce this conversion as a prerequisite for upgrades.
2018-01-29 10:31:39,250 [art-exec-4] [INFO ] (o.a.s.j.m.p.RepoPathChecksumMigrationJob:284) - artifactory.RepoPathChecksumMigrationJob#ba1c5406-2f49-48f2-a9f2-a9e48c8d7807: all nodes reached minimal version '5.5.0-m001', continuing execution
2018-01-29 10:31:39,308 [art-exec-4] [WARN ] (o.a.s.j.m.p.RepoPathChecksumMigrationJob:111) - Path Checksum calculation job (for existing artifacts) has been disabled and will not run, there are still 2029 artifacts without path checksum values in the database. Future version of Artifactory may enforce this conversion as a prerequisite for upgrades.
2018-01-29 10:34:57,321 [art-exec-4] [INFO ] (o.a.s.j.m.p.RepoPathChecksumMigrationJob:284) - artifactory.RepoPathChecksumMigrationJob#b62872c1-4c00-4503-8628-bc2dd38d8c17: all nodes reached minimal version '5.5.0-m001', continuing execution
2018-01-29 10:34:57,372 [art-exec-4] [WARN ] (o.a.s.j.m.p.RepoPathChecksumMigrationJob:111) - Path Checksum calculation job (for existing artifacts) has been disabled and will not run, there are still 2029 artifacts without path checksum values in the database. Future version of Artifactory may enforce this conversion as a prerequisite for upgrades.

","The operation of Sha-256 is not being done automatically. You need to manually set it up so it will run. This was done in order not to cause overload on users environments.
If you wish to activate it follow this link:
https://www.jfrog.com/confluence/display/RTF/Checksum-Based+Storage#Checksum-BasedStorage-MigratingtheDatabasetoIncludeSHA-256
","882","<artifactory><sha256>","5","1","2","2018-03-09 15:15:38","48756037","0","2","1098296","","2018-01-29 11:27:59","2018-01-26 08:36:44",""
"48457980","Artifactory warns about ""Path checksum calculation job"" after upgrade to 5.8.3","I just migrated our OSS instance of Artifactory from 5.4.5 to 5.8.3 (standalone, using Derby)
I followed the recommendations at https://www.jfrog.com/confluence/display/RTF/Upgrading+Artifactory and basically did:

Actual upgrade to 5.8.3 (stop, replace some files, start)
SHA-256 job to calculate checksums on existing artifacts (stop, add property to confiuguration, start)

Both worked fine and the server is back up and running smoothly.
However, I now have a warning in logs/artifactory.log on instance start up

2018-01-24 16:12:07,633 [art-exec-4] [WARN ] (o.a.s.j.m.p.RepoPathChecksumMigrationJobDelegate:110) - Path Checksum calculation job (for existing artifacts) has been disabled and will not run, there are still 5348 artifacts without path checksum values in the database. Future version of Artifactory may enforce this conversion as a prerequisite for upgrades.

I cannot find any more substantial explanation for this warning. 
I am thinking that this is related to the artifacts layout on the file system (cf. https://www.jfrog.com/confluence/display/RTF/Checksum-Based+Storage#Checksum-BasedStorage-Overview). The artifacts are still laid according to their SHA-1checksums rather than their SHA-256 checksums.
Is my assumption correct? How do I ""fix"" this warning...
EDIT: Some more tests requested by @Ariel:

Restarting the server doesn't help, the warning is still there
Reenabling the migration job and restarting the server doesn't help either

echo ""artifactory.sha2.migration.job.enabled=true"" >> etc/artifactory.system.properties
Looking at the logs related to this migration, it seems that the migration job thinks that everything has been migrated, and the startup check finds 2,000 artifacts that should be migrated.

$ARTIFACTORY_HOME/logs/sha256_migration.log

2018-01-24 14:39:53,982 [art-exec-3] [INFO ] (o.a.s.j.m.s.Sha256MigrationJob:284) - artifactory.Sha256MigrationJob#83253c93-33ec-4c52-bc61-d2d33942dc28: all nodes reached minimal version '5.5.0-m001', continuing execution
2018-01-24 16:12:07,576 [art-exec-3] [INFO ] (o.a.s.j.m.s.Sha256MigrationJob:284) - artifactory.Sha256MigrationJob#6f5c6739-c365-4be2-80a4-d32063a75f8f: all nodes reached minimal version '5.5.0-m001', continuing execution
2018-01-24 16:12:07,651 [art-exec-3] [INFO ] (o.a.s.j.m.s.Sha256MigrationJob:186) - 3319 artifacts and 3292 binary entries are missing SHA256 values - starting calculation job.
2018-01-24 16:12:07,756 [art-exec-3] [INFO ] (o.a.s.j.m.s.Sha256MigrationJob:121) - SHA256 migration state: 0/3319 artifacts were handled.
[...]
2018-01-24 16:13:58,226 [art-exec-3] [INFO ] (o.a.s.j.m.s.Sha256MigrationJob:121) - SHA256 migration state: 3318/3319 artifacts were handled.
2018-01-24 16:13:58,227 [art-exec-3] [INFO ] (o.a.s.j.m.s.Sha256MigrationJob:270) - SHA256 migration job now filling in for missing SHA256 values for binary entries. Found 1 such entries
2018-01-24 16:14:01,065 [art-exec-3] [INFO ] (o.a.s.j.m.s.Sha256MigrationJob:338) - SHA256 migration job has finished successfully. 3319 artifacts and 1 binary entry calculations were submitted (including retries)
2018-01-24 16:29:06,072 [art-exec-3] [INFO ] (o.a.s.j.m.s.Sha256MigrationJob:284) - artifactory.Sha256MigrationJob#7cdeab66-229d-43a5-a788-301f72c10cc5: all nodes reached minimal version '5.5.0-m001', continuing execution
2018-01-29 06:04:57,405 [art-exec-3] [INFO ] (o.a.s.j.m.s.Sha256MigrationJob:284) - artifactory.Sha256MigrationJob#2c539185-b7f4-412f-b988-0688e8505649: all nodes reached minimal version '5.5.0-m001', continuing execution
2018-01-29 10:27:33,655 [art-exec-3] [INFO ] (o.a.s.j.m.s.Sha256MigrationJob:284) - artifactory.Sha256MigrationJob#19afc5d2-c12d-4821-8c1a-808655e8746c: all nodes reached minimal version '5.5.0-m001', continuing execution
2018-01-29 10:31:39,250 [art-exec-3] [INFO ] (o.a.s.j.m.s.Sha256MigrationJob:284) - artifactory.Sha256MigrationJob#c01bd20d-249a-4c6e-80ff-e26301db7e84: all nodes reached minimal version '5.5.0-m001', continuing execution
2018-01-29 10:34:57,321 [art-exec-3] [INFO ] (o.a.s.j.m.s.Sha256MigrationJob:284) - artifactory.Sha256MigrationJob#32fff21f-04d5-45a4-84d2-58083aaf6593: all nodes reached minimal version '5.5.0-m001', continuing execution


$ARTIFACTORY_HOME/logs/path_checksum_migration.log

2018-01-24 14:39:53,982 [art-exec-4] [INFO ] (o.a.s.j.m.p.RepoPathChecksumMigrationJob:284) - artifactory.RepoPathChecksumMigrationJob#2f7f690c-dc78-4074-b35f-e5085d41a2f7: all nodes reached minimal version '5.5.0-m001', continuing execution
2018-01-24 14:39:54,012 [art-exec-4] [WARN ] (o.a.s.j.m.p.RepoPathChecksumMigrationJob:111) - Path Checksum calculation job (for existing artifacts) has been disabled and will not run, there are still 5348 artifacts without path checksum values in the database. Future version of Artifactory may enforce this conversion as a prerequisite for upgrades.
2018-01-24 16:12:07,576 [art-exec-4] [INFO ] (o.a.s.j.m.p.RepoPathChecksumMigrationJob:284) - artifactory.RepoPathChecksumMigrationJob#4c3a71ed-f389-4bff-a7b9-62d20806b270: all nodes reached minimal version '5.5.0-m001', continuing execution
2018-01-24 16:12:07,634 [art-exec-4] [WARN ] (o.a.s.j.m.p.RepoPathChecksumMigrationJob:111) - Path Checksum calculation job (for existing artifacts) has been disabled and will not run, there are still 5348 artifacts without path checksum values in the database. Future version of Artifactory may enforce this conversion as a prerequisite for upgrades.
2018-01-24 16:29:06,072 [art-exec-4] [INFO ] (o.a.s.j.m.p.RepoPathChecksumMigrationJob:284) - artifactory.RepoPathChecksumMigrationJob#8e2c1a01-c3d9-4848-b48a-70813ffd26d1: all nodes reached minimal version '5.5.0-m001', continuing execution
2018-01-24 16:29:06,127 [art-exec-4] [WARN ] (o.a.s.j.m.p.RepoPathChecksumMigrationJob:111) - Path Checksum calculation job (for existing artifacts) has been disabled and will not run, there are still 2029 artifacts without path checksum values in the database. Future version of Artifactory may enforce this conversion as a prerequisite for upgrades.
2018-01-29 06:04:57,405 [art-exec-4] [INFO ] (o.a.s.j.m.p.RepoPathChecksumMigrationJob:284) - artifactory.RepoPathChecksumMigrationJob#b7ac1c4a-5dec-4065-a901-bb5a3d2a4b59: all nodes reached minimal version '5.5.0-m001', continuing execution
2018-01-29 06:04:57,505 [art-exec-4] [WARN ] (o.a.s.j.m.p.RepoPathChecksumMigrationJob:111) - Path Checksum calculation job (for existing artifacts) has been disabled and will not run, there are still 2029 artifacts without path checksum values in the database. Future version of Artifactory may enforce this conversion as a prerequisite for upgrades.
2018-01-29 10:27:33,655 [art-exec-4] [INFO ] (o.a.s.j.m.p.RepoPathChecksumMigrationJob:284) - artifactory.RepoPathChecksumMigrationJob#74cf399a-1c3b-4b11-a687-cc11b19d2887: all nodes reached minimal version '5.5.0-m001', continuing execution
2018-01-29 10:27:33,704 [art-exec-4] [WARN ] (o.a.s.j.m.p.RepoPathChecksumMigrationJob:111) - Path Checksum calculation job (for existing artifacts) has been disabled and will not run, there are still 2029 artifacts without path checksum values in the database. Future version of Artifactory may enforce this conversion as a prerequisite for upgrades.
2018-01-29 10:31:39,250 [art-exec-4] [INFO ] (o.a.s.j.m.p.RepoPathChecksumMigrationJob:284) - artifactory.RepoPathChecksumMigrationJob#ba1c5406-2f49-48f2-a9f2-a9e48c8d7807: all nodes reached minimal version '5.5.0-m001', continuing execution
2018-01-29 10:31:39,308 [art-exec-4] [WARN ] (o.a.s.j.m.p.RepoPathChecksumMigrationJob:111) - Path Checksum calculation job (for existing artifacts) has been disabled and will not run, there are still 2029 artifacts without path checksum values in the database. Future version of Artifactory may enforce this conversion as a prerequisite for upgrades.
2018-01-29 10:34:57,321 [art-exec-4] [INFO ] (o.a.s.j.m.p.RepoPathChecksumMigrationJob:284) - artifactory.RepoPathChecksumMigrationJob#b62872c1-4c00-4503-8628-bc2dd38d8c17: all nodes reached minimal version '5.5.0-m001', continuing execution
2018-01-29 10:34:57,372 [art-exec-4] [WARN ] (o.a.s.j.m.p.RepoPathChecksumMigrationJob:111) - Path Checksum calculation job (for existing artifacts) has been disabled and will not run, there are still 2029 artifacts without path checksum values in the database. Future version of Artifactory may enforce this conversion as a prerequisite for upgrades.

","This is poorly documented — I had to download the Artifactory OSS source code and grep for the answer — but apparently Path Checksum migration is a completely separate job from SHA-256 migration. 
You want artifactory.pathChecksum.migration.job.enabled=true in your artifactory.system.properties, I think.
","882","<artifactory><sha256>","5","8","2","2018-03-09 15:15:38","48756037","0","2","1098296","","2018-01-29 11:27:59","2018-01-26 08:36:44",""
"46197644","Android SHA256 signature algorythm with certificate having a SHA1 algorythm","My question is somewhat a follow up of this one: Can I specify digest algorithm apksigner uses? 
I'm signign an APK with apksigner and following reccomandations on above post, I raised the minSDK to 18+. As expected the resulting MANIFEST.MF and ANDROID.SF digest report SHA-256 digest hashes for the files in the packages instead of SHA-1 digest hashes.
Android-minSDK18.SF excerpt

Android-minSDK16.SF excerpt

However printing the .RSA certificate with keytool -printcert -file ""ANDROID - minSDK18.RSA"" or keytool -printcert -file ""ANDROID - minSDK16.RSA"" gives the same result specifing a SHA1withRSA Signature algorythm.

That is probably because SHA1withRSA is the Signature algorythm embedded in the certificate:

My question is to know if the signature algorythm of the certifiicate used to sign an APK has an impact related to the SHA-1 collision problems even when the APK is signed with SHA-256 algorythm.
","No, the signature algorithm inside the app signing certificate -- the algorithm used by certificate Issuer to sign the certificate -- has no impact on the security of your Android app. The reason is that Android does not verify this cryptographic signature inside the app signing certificate.
For more background, all that matters to Android in an app signing certificate is that:

it parses,
it declares that its public key can be used for digital signatures,
(only when updating an already installed app) it is identical to the app signing certificate of the currently installed version of the app.

","881","<android><apk><sha1><sha256><apksigner>","1","1","1","2017-09-13 15:55:27","46202006","0","","","","","2017-09-13 12:29:48",""
"20628346","wrong in calculationg the SHA 256","I need to calculate the SHA 256 for my password.
i already know that I can user the common codec from apache but this is not allowed in where i am working 
I tried to make a simple function to return the sha 256 from a plain text, which is:
public static String getSHA1(String plainText) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""SHA-256"");

            md.update(plainText.getBytes());
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < md.digest().length; i++) {
                hexString.append(Integer.toHexString(0xFF & md.digest()[i]));
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return null;
    }

my problem is whatever the input is, the result is the same. i always got this result
e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855

I can calculate the sha 256 online using this website http://onlinemd5.com/
but i need to calculate it from my code.
your help is appreciated and lovely.
","From the Javadoc for digest():

Completes the hash computation by performing final operations such as padding. The digest is reset after this call is made.

Call digest() once and put the results into a variable.
(By the way, had you searched for the digest, which is always a good idea whenever you get a fixed result, you would have seen that it's the SHA-256 digest for the empty string.) 
","879","<java><hash><sha256>","3","3","1","2013-12-17 07:31:05","20628383","1","","","","","2013-12-17 07:28:40",""
"47867216","sha256_crypt.encrypt always returning another hash","I am developing a webapp using python and flask. It has a user system, so, of course, a registration form. I am using, to encrypt the password of the user that wants to registrate, passlib.hash.sha256 . Here's what I am doing:
from passlib.hash import sha256_crypt as sha256
[...]
if request.method == ""POST"" and form.validate():
    username = request.form['username']
    password = request.form['password']
    confirm_password = request.form['confirm_password'] 
    email = request.form['email']

    password = sha256.encrypt(password) #Encryption.



    c, conn = connection('accounts') #Connection to the database


    x = c.execute(""SELECT * FROM accounts  WHERE username = '%s' OR email = '%s'"" %(thwart(username), thwart(email)))

    if x:
        flash(""We are very sorry, but this Username/Email-address is already taken. Please try again"")
    else:
        c.execute('INSERT INTO accounts VALUES (""%s"", ""%s"", ""%s"")' %(thwart(username), thwart(password), thwart(email)))
        conn.commit()
        flash('Succesfully Registered!')

In the database, the hash is always varying, even if the same password has been inputed. Does anybody know why? What am I doing wrong?
","Try pycrypto.sha256 instead, passlib seems not the the right solution for your requirement to compute an unsalted hash.
","875","<python><encryption><sha256>","0","-2","3","2019-03-15 23:26:39","47871642","4","0","2196561","","2017-12-19 01:37:35","2017-12-18 11:09:28",""
"47867216","sha256_crypt.encrypt always returning another hash","I am developing a webapp using python and flask. It has a user system, so, of course, a registration form. I am using, to encrypt the password of the user that wants to registrate, passlib.hash.sha256 . Here's what I am doing:
from passlib.hash import sha256_crypt as sha256
[...]
if request.method == ""POST"" and form.validate():
    username = request.form['username']
    password = request.form['password']
    confirm_password = request.form['confirm_password'] 
    email = request.form['email']

    password = sha256.encrypt(password) #Encryption.



    c, conn = connection('accounts') #Connection to the database


    x = c.execute(""SELECT * FROM accounts  WHERE username = '%s' OR email = '%s'"" %(thwart(username), thwart(email)))

    if x:
        flash(""We are very sorry, but this Username/Email-address is already taken. Please try again"")
    else:
        c.execute('INSERT INTO accounts VALUES (""%s"", ""%s"", ""%s"")' %(thwart(username), thwart(password), thwart(email)))
        conn.commit()
        flash('Succesfully Registered!')

In the database, the hash is always varying, even if the same password has been inputed. Does anybody know why? What am I doing wrong?
","Fristly, please note that sha256_crypt.encrypt(..) is deprecated since version 1.7 and is instead renamed to sha256_crypt.hash(..) so you have 
hash = sha256_crypt.hash(""password"")

for creating the hash. As the hash includes a random salt, you can't recalculate the hash and compare, instead you should lookup the hash in the table, and then use it in a sha256_crypt.verify() like:
sha256_crypt.verify(""password"", hash)

","875","<python><encryption><sha256>","0","2","3","2019-03-15 23:26:39","47871642","4","0","2196561","","2017-12-19 01:37:35","2017-12-18 11:09:28",""
"47867216","sha256_crypt.encrypt always returning another hash","I am developing a webapp using python and flask. It has a user system, so, of course, a registration form. I am using, to encrypt the password of the user that wants to registrate, passlib.hash.sha256 . Here's what I am doing:
from passlib.hash import sha256_crypt as sha256
[...]
if request.method == ""POST"" and form.validate():
    username = request.form['username']
    password = request.form['password']
    confirm_password = request.form['confirm_password'] 
    email = request.form['email']

    password = sha256.encrypt(password) #Encryption.



    c, conn = connection('accounts') #Connection to the database


    x = c.execute(""SELECT * FROM accounts  WHERE username = '%s' OR email = '%s'"" %(thwart(username), thwart(email)))

    if x:
        flash(""We are very sorry, but this Username/Email-address is already taken. Please try again"")
    else:
        c.execute('INSERT INTO accounts VALUES (""%s"", ""%s"", ""%s"")' %(thwart(username), thwart(password), thwart(email)))
        conn.commit()
        flash('Succesfully Registered!')

In the database, the hash is always varying, even if the same password has been inputed. Does anybody know why? What am I doing wrong?
","check your database structure. 
sha256 may require upto 70 values.
Increase the password field to about 100 values.
","875","<python><encryption><sha256>","0","1","3","2019-03-15 23:26:39","47871642","4","0","2196561","","2017-12-19 01:37:35","2017-12-18 11:09:28",""
"19293651","CryptoAPI's SignerTimeStampEx2 using PInvoke","I'm trying to use CryptoAPI from C# code to add SHA256 timestamps to signed assemblies. Here is the code I'm using:
Signer.TimestampSignedAssembly(""MyAssembly.exe"", ""http://tsa.starfieldtech.com"");

Signer class:
public static class Signer
{
    [StructLayoutAttribute(LayoutKind.Sequential)]
    struct SIGNER_SUBJECT_INFO
    {
        public uint cbSize;
        public IntPtr pdwIndex;
        public uint dwSubjectChoice;
        public SubjectChoiceUnion Union1;
        [StructLayoutAttribute(LayoutKind.Explicit)]
        internal struct SubjectChoiceUnion
        {
            [FieldOffsetAttribute(0)]
            public IntPtr pSignerFileInfo;
            [FieldOffsetAttribute(0)]
            public IntPtr pSignerBlobInfo;
        }
    }

    [StructLayoutAttribute(LayoutKind.Sequential)]
    struct SIGNER_FILE_INFO
    {
        public uint cbSize;
        public IntPtr pwszFileName;
        public IntPtr hFile;
    }

    [DllImport(""Mssign32.dll"", CharSet = CharSet.Unicode, SetLastError = true)]
    private static extern int SignerTimeStampEx2(
        uint dwFlags,               // DWORD
        IntPtr pSubjectInfo,        // SIGNER_SUBJECT_INFO
        string pwszHttpTimeStamp,   // LPCWSTR
        uint dwAlgId,               // ALG_ID
        IntPtr psRequest,           // PCRYPT_ATTRIBUTES
        IntPtr pSipData,            // LPVOID 
        out IntPtr ppSignerContext  // SIGNER_CONTEXT
        );

    public static void TimestampSignedAssembly(string appPath, string tsaServer)
    {
        if (tsaServer == null) throw new ArgumentNullException(""tsaServer"");

        var pSubjectInfo = IntPtr.Zero;            
        try
        {                
            pSubjectInfo = CreateSignerSubjectInfo(appPath);
            TimestampSignedAssembly(pSubjectInfo, tsaServer);
        }
        finally
        {                
            if (pSubjectInfo != IntPtr.Zero)
            {
                Marshal.DestroyStructure(pSubjectInfo, typeof(SIGNER_SUBJECT_INFO));
            }                
        }
    }

    private static IntPtr CreateSignerSubjectInfo(string pathToAssembly)
    {
        var info = new SIGNER_SUBJECT_INFO
        {
            cbSize = (uint)Marshal.SizeOf(typeof(SIGNER_SUBJECT_INFO)),
            pdwIndex = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(uint)))
        };
        var index = 0;
        Marshal.StructureToPtr(index, info.pdwIndex, false);

        info.dwSubjectChoice = 0x1; //SIGNER_SUBJECT_FILE
        var assemblyFilePtr = Marshal.StringToHGlobalUni(pathToAssembly);

        var fileInfo = new SIGNER_FILE_INFO
        {
            cbSize = (uint)Marshal.SizeOf(typeof(SIGNER_FILE_INFO)),
            pwszFileName = assemblyFilePtr,
            hFile = IntPtr.Zero
        };

        info.Union1 = new SIGNER_SUBJECT_INFO.SubjectChoiceUnion
        {
            pSignerFileInfo = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(SIGNER_FILE_INFO)))
        };

        Marshal.StructureToPtr(fileInfo, info.Union1.pSignerFileInfo, false);

        IntPtr pSubjectInfo = Marshal.AllocHGlobal(Marshal.SizeOf(info));
        Marshal.StructureToPtr(info, pSubjectInfo, false);

        return pSubjectInfo;
    }

    /* 
        Here CryptoAPI function SignerTimeStampEx2 called.
    */
    private static void TimestampSignedAssembly(IntPtr pSubjectInfo, string tsaServer)
    {            
        IntPtr context;
        var hResult = SignerTimeStampEx2(
            0x1,            // I have not found anywhere what value should have this parameter!
            pSubjectInfo,   
            tsaServer,      
            0x0000800c,     // 256 bit SHA hashing algorithm. This value taken form here: http://msdn.microsoft.com/en-us/library/windows/desktop/aa375549(v=vs.85).aspx
            IntPtr.Zero,    
            IntPtr.Zero,
            out context
            );

        if (hResult != 0)
        {
            throw new Exception(string.Format(""Error occured when adding timestamp - Error code: 0x{0:X}"", hResult));
        }
    }
}   

Despite the fact that I pass to SignerTimeStampEx2 function an argument (dwAlgId), indicating that it is necessary to add SHA256 timestamp (0x0000800c), SHA1 timestamp is always generated. 
Has anyone encountered with this problem? What I'm doing wrong? What values should I set for dwFlags and dwAlgId parameters? 
Thanks in advance!
","dwFlags needs to be SIGNER_TIMESTAMP_RFC3161 (2).  The reason you get an access violation is that SignerTimeStampEx2() is documented incorrectly.  It expects the algorithm as a PCSTR rather than a DWORD.  If you pass 0x800C it'll try to dereference that as a pointer, leading to the AV.  So replace ALG_ID dwAlgId in the function declaration with PCSTR pszTimeStampAlgorithmOid.  Pass szOID_NIST_sha256 to it, which should be defined as ""2.16.840.1.101.3.4.2.1"".
SignerTimeStampEx3() is also incorrectly incorrectly documented.  pszTimeStampAlgorithmOid should be declared as PCSTR rather than as PCWSTR.
In my experience, code signing and time stamping are more reliable if you specify both the file name and an open Win32 file handle in the SIGNER_FILE_INFO structure.
Whether you will actually get an SHA-256 time stamp also depends on the time stamping service you're using.  http://tsa.starfieldtech.com, http://timestamp.globalsign.com/ and http://timestamp.comodoca.com/rfc3161 issue SHA-256 timestamps.  Other services may issue SHA-1 time stamps even when requesting an SHA-256 time stamp. 
","872","<c#><timestamp><pinvoke><sha256><cryptoapi>","3","6","2","2017-03-01 13:07:47","34367072","4","","","","","2013-10-10 10:46:10",""
"19293651","CryptoAPI's SignerTimeStampEx2 using PInvoke","I'm trying to use CryptoAPI from C# code to add SHA256 timestamps to signed assemblies. Here is the code I'm using:
Signer.TimestampSignedAssembly(""MyAssembly.exe"", ""http://tsa.starfieldtech.com"");

Signer class:
public static class Signer
{
    [StructLayoutAttribute(LayoutKind.Sequential)]
    struct SIGNER_SUBJECT_INFO
    {
        public uint cbSize;
        public IntPtr pdwIndex;
        public uint dwSubjectChoice;
        public SubjectChoiceUnion Union1;
        [StructLayoutAttribute(LayoutKind.Explicit)]
        internal struct SubjectChoiceUnion
        {
            [FieldOffsetAttribute(0)]
            public IntPtr pSignerFileInfo;
            [FieldOffsetAttribute(0)]
            public IntPtr pSignerBlobInfo;
        }
    }

    [StructLayoutAttribute(LayoutKind.Sequential)]
    struct SIGNER_FILE_INFO
    {
        public uint cbSize;
        public IntPtr pwszFileName;
        public IntPtr hFile;
    }

    [DllImport(""Mssign32.dll"", CharSet = CharSet.Unicode, SetLastError = true)]
    private static extern int SignerTimeStampEx2(
        uint dwFlags,               // DWORD
        IntPtr pSubjectInfo,        // SIGNER_SUBJECT_INFO
        string pwszHttpTimeStamp,   // LPCWSTR
        uint dwAlgId,               // ALG_ID
        IntPtr psRequest,           // PCRYPT_ATTRIBUTES
        IntPtr pSipData,            // LPVOID 
        out IntPtr ppSignerContext  // SIGNER_CONTEXT
        );

    public static void TimestampSignedAssembly(string appPath, string tsaServer)
    {
        if (tsaServer == null) throw new ArgumentNullException(""tsaServer"");

        var pSubjectInfo = IntPtr.Zero;            
        try
        {                
            pSubjectInfo = CreateSignerSubjectInfo(appPath);
            TimestampSignedAssembly(pSubjectInfo, tsaServer);
        }
        finally
        {                
            if (pSubjectInfo != IntPtr.Zero)
            {
                Marshal.DestroyStructure(pSubjectInfo, typeof(SIGNER_SUBJECT_INFO));
            }                
        }
    }

    private static IntPtr CreateSignerSubjectInfo(string pathToAssembly)
    {
        var info = new SIGNER_SUBJECT_INFO
        {
            cbSize = (uint)Marshal.SizeOf(typeof(SIGNER_SUBJECT_INFO)),
            pdwIndex = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(uint)))
        };
        var index = 0;
        Marshal.StructureToPtr(index, info.pdwIndex, false);

        info.dwSubjectChoice = 0x1; //SIGNER_SUBJECT_FILE
        var assemblyFilePtr = Marshal.StringToHGlobalUni(pathToAssembly);

        var fileInfo = new SIGNER_FILE_INFO
        {
            cbSize = (uint)Marshal.SizeOf(typeof(SIGNER_FILE_INFO)),
            pwszFileName = assemblyFilePtr,
            hFile = IntPtr.Zero
        };

        info.Union1 = new SIGNER_SUBJECT_INFO.SubjectChoiceUnion
        {
            pSignerFileInfo = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(SIGNER_FILE_INFO)))
        };

        Marshal.StructureToPtr(fileInfo, info.Union1.pSignerFileInfo, false);

        IntPtr pSubjectInfo = Marshal.AllocHGlobal(Marshal.SizeOf(info));
        Marshal.StructureToPtr(info, pSubjectInfo, false);

        return pSubjectInfo;
    }

    /* 
        Here CryptoAPI function SignerTimeStampEx2 called.
    */
    private static void TimestampSignedAssembly(IntPtr pSubjectInfo, string tsaServer)
    {            
        IntPtr context;
        var hResult = SignerTimeStampEx2(
            0x1,            // I have not found anywhere what value should have this parameter!
            pSubjectInfo,   
            tsaServer,      
            0x0000800c,     // 256 bit SHA hashing algorithm. This value taken form here: http://msdn.microsoft.com/en-us/library/windows/desktop/aa375549(v=vs.85).aspx
            IntPtr.Zero,    
            IntPtr.Zero,
            out context
            );

        if (hResult != 0)
        {
            throw new Exception(string.Format(""Error occured when adding timestamp - Error code: 0x{0:X}"", hResult));
        }
    }
}   

Despite the fact that I pass to SignerTimeStampEx2 function an argument (dwAlgId), indicating that it is necessary to add SHA256 timestamp (0x0000800c), SHA1 timestamp is always generated. 
Has anyone encountered with this problem? What I'm doing wrong? What values should I set for dwFlags and dwAlgId parameters? 
Thanks in advance!
","I got it working finally. Here is the complete code of the Timestamper class:
public static class Timestamper
{
    [StructLayout(LayoutKind.Sequential)]
    struct SIGNER_SUBJECT_INFO
    {
        public uint cbSize;
        public IntPtr pdwIndex;
        public uint dwSubjectChoice;
        public SubjectChoiceUnion Union1;
        [StructLayoutAttribute(LayoutKind.Explicit)]
        internal struct SubjectChoiceUnion
        {
            [FieldOffsetAttribute(0)]
            public IntPtr pSignerFileInfo;
            [FieldOffsetAttribute(0)]
            public IntPtr pSignerBlobInfo;
        }
    }

    [StructLayoutAttribute(LayoutKind.Sequential)]
    struct SIGNER_FILE_INFO
    {
        public uint cbSize;
        public IntPtr pwszFileName;
        public IntPtr hFile;
    }

    [DllImport(""Mssign32.dll"", CharSet = CharSet.Unicode, SetLastError = true)]
    private static extern int SignerTimeStampEx2(
        uint dwFlags,                    // DWORD
        IntPtr pSubjectInfo,             // SIGNER_SUBJECT_INFO
        string pwszHttpTimeStamp,        // LPCWSTR
        IntPtr pszTimeStampAlgorithmOid, // PCSTR
        IntPtr psRequest,                // PCRYPT_ATTRIBUTES
        IntPtr pSipData,                 // LPVOID 
        out IntPtr ppSignerContext       // SIGNER_CONTEXT
     );

    public static void TimestampSignedAssembly(string appPath, string tsaServer)
    {
        if (tsaServer == null) throw new ArgumentNullException(""tsaServer"");

        IntPtr pSubjectInfo = IntPtr.Zero;
        try
        {
            pSubjectInfo = CreateSignerSubjectInfo(appPath);
            TimestampSignedAssembly(pSubjectInfo, tsaServer);
        }
        finally
        {
            if (pSubjectInfo != IntPtr.Zero)
            {
                Marshal.DestroyStructure(pSubjectInfo, typeof(SIGNER_SUBJECT_INFO));
            }
        }
    }

    private static IntPtr CreateSignerSubjectInfo(string pathToAssembly)
    {
        SIGNER_SUBJECT_INFO info = new SIGNER_SUBJECT_INFO
        {
            cbSize = (uint)Marshal.SizeOf(typeof(SIGNER_SUBJECT_INFO)),
            pdwIndex = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(uint)))
        };

        int index = 0;
        Marshal.StructureToPtr(index, info.pdwIndex, false);

        info.dwSubjectChoice = 0x1; //SIGNER_SUBJECT_FILE
        IntPtr assemblyFilePtr = Marshal.StringToHGlobalUni(pathToAssembly);

        SIGNER_FILE_INFO fileInfo = new SIGNER_FILE_INFO
        {
            cbSize = (uint)Marshal.SizeOf(typeof(SIGNER_FILE_INFO)),
            pwszFileName = assemblyFilePtr,
            hFile = IntPtr.Zero
        };

        info.Union1 = new SIGNER_SUBJECT_INFO.SubjectChoiceUnion
        {
            pSignerFileInfo = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(SIGNER_FILE_INFO)))
        };

        Marshal.StructureToPtr(fileInfo, info.Union1.pSignerFileInfo, false);

        IntPtr pSubjectInfo = Marshal.AllocHGlobal(Marshal.SizeOf(info));
        Marshal.StructureToPtr(info, pSubjectInfo, false);

        return pSubjectInfo;
    }

    /* 
        Here CryptoAPI function SignerTimeStampEx2 called.
    */
    private static void TimestampSignedAssembly(IntPtr pSubjectInfo, string tsaServer)
    {
        IntPtr context;
        int hResult = SignerTimeStampEx2(
            0x2, // SIGNER_TIMESTAMP_RFC3161
            pSubjectInfo,
            tsaServer,
            Marshal.StringToHGlobalAnsi(""2.16.840.1.101.3.4.2.1""), // szOID_NIST_sha256 constant, SHA256 hashing algorithm.
            IntPtr.Zero,
            IntPtr.Zero,
            out context
         );

        if (hResult != 0)
        {
            throw new Exception(string.Format(""Error occured when adding timestamp - Error code: 0x{0:X}"", hResult));
        }
    }
}

Usage example:
Timestamper.TimestampSignedAssembly(""Assembly.exe"", ""http://timestamp.comodoca.com/?td=sha256"");

","872","<c#><timestamp><pinvoke><sha256><cryptoapi>","3","0","2","2017-03-01 13:07:47","34367072","4","","","","","2013-10-10 10:46:10",""
"35242229","SHA256 fingerprint in hgrc","How can I force mercurial in .hgrc to check the SHA256 fingerprint when connecting to the repository server?
In .hgrc usually SHA1 fingerprints are used as
[hostfingerprints]
foo.bar.baz = a1:b2:c3:d4:e5:f6:11:22:33:44:55:66:77:88:99:00:f9:r8:d7:c6

Using a SHA256 fingerprint would cause hg to fail to connect:
abort: certificate for foo.bar.baz has unexpected fingerprint 00:11:22:33:44:55:66:77:88:99:0a:0b:0c:0d:0e:0f:a1:b1:c1:d1
(check hostfingerprint configuration)

Does mercurial always expect a SHA1 here or this be done by with the client configuration at all or does this have to be set on the server side?
e.g. openssl has -sha1 and -sha256 options.
","
Does mercurial always expect a SHA1 here

Yes. Just re-read actual for today description of hostfingerprints section in hgrc (bolding is my addition)

The fingerprint is the SHA-1 hash value of the DER encoded certificate. 

","862","<mercurial><verification><sha256><fingerprint>","2","2","1","2016-02-07 05:23:54","35250068","0","","-1","","2017-04-13 12:36:30","2016-02-06 14:37:28",""
"34651542","Calculating SHA256 hash with OpenSSL in FIPS mode","The background
I've compiled OpenSSL with the OpenSSL FIPS Object Module (following the instructions for cross compiling to Android).
Now in my code I want to use SHA256 (from what I can see at least some sha256 algorithms are FIPS approved).
The problem
After calling set_mode(1) to enable FIPS in runtime, the following code crashes in OpenSSLDie (presumably means disabled by FIPS)
SHA256_CTX sha256;
SHA256_Init(&sha256);
SHA256_Update(&sha256, data, len);
SHA256_Final(outputBuffer, &sha256);

The questions 

It seems that calling private_SHA256_Init instead works, but is it the correct way or does it circumvent the FIPS compliance?
If it isn't the correct way how can I calculate SHA256 in FIPS mode?
Since usage of non-approved algorithms is allowed if not for cryptography (by FIPS-140.2), would calling the private function be good then (for example to calculate SHA1, which seems out of the question at all in FIPS mode, but it's not to be used for crypto)

More info
versions used: openssl-1.0.1q, openssl-fips-2.0.11
","Usage of low-level functions such as SHA256_Init is deprecated, as far as I know.
Currently approved method for calculating digests using OpenSSL is via EVP. An example for SHA-256, taken from https://wiki.openssl.org/index.php/EVP_Message_Digests :
void digest_message(unsigned char *message, unsigned char **digest, unsigned int *digest_len)
{
    EVP_MD_CTX *mdctx;

    if((mdctx = EVP_MD_CTX_create()) == NULL)
        handleErrors();

    if(1 != EVP_DigestInit_ex(mdctx, EVP_sha256(), NULL))
        handleErrors();

    if(1 != EVP_DigestUpdate(mdctx, message, strlen(message)))
        handleErrors();

    if((*digest = (unsigned char *)OPENSSL_malloc(EVP_MD_size(EVP_sha256()))) == NULL)
        handleErrors();

    if(1 != EVP_DigestFinal_ex(mdctx, *digest, digest_len))
        handleErrors();

    EVP_MD_CTX_destroy(mdctx);
}

","861","<openssl><sha256><fips>","1","1","1","2016-01-07 10:23:07","34652674","0","","2134702","","2016-01-07 09:34:03","2016-01-07 09:28:58",""
"32785417","How to properly create a SHA256 Hash?","I am implementing SSO where I have to compute the SHA256 has of a string and I send the hash back to and endpoint where it authenicates the user.  I got SHA1 working by doing the following:
 var hash = SHA1.Create();
 var encoder = new ASCIIEncoding();
 byte[] combined = encoder.GetBytes(encryptedTokenStr);
 hash.ComputeHash(combined);
 string delimitedHexHash = BitConverter.ToString(hash.Hash);
 string completedSha1Hash = delimitedHexHash.Replace(""-"", """");

But If I change the Hash Algorithm Type to SHA256 and on the other sytem change the Hashing algorithm to SHA256 Salted (Suffix) Not sure if this is the same as SHA256?  The following code does not work properly, meaning it does not authenicate the user on the other side:
var hash = SHA256.Create();
var encoder = new UTF8Encoding();
byte[] combined = encoder.GetBytes(encryptedTokenStr);
hash.ComputeHash(combined);
string delimitedHexHash = BitConverter.ToString(hash.Hash);
string completedSha1Hash = delimitedHexHash.Replace(""-"", """");

","SHA256 is not the same as ""SHA256 Salted"".
Well, technically, they are both SHA256, it's just the input the differs. When doing SHA256, you hash the data itself. When doing ""salted"" (doesn't matter which hash function you use), you first add some ""salt"" to the input (addition could be different, but most often it's just concatenation; ""suffix"" hints that the salt is added after the input), and then hash the resulting data.
More details: https://en.wikipedia.org/wiki/Salt_%28cryptography%29
","860","<c#><sha256>","0","1","2","2015-09-25 16:24:32","","3","","","","","2015-09-25 15:17:01",""
"32785417","How to properly create a SHA256 Hash?","I am implementing SSO where I have to compute the SHA256 has of a string and I send the hash back to and endpoint where it authenicates the user.  I got SHA1 working by doing the following:
 var hash = SHA1.Create();
 var encoder = new ASCIIEncoding();
 byte[] combined = encoder.GetBytes(encryptedTokenStr);
 hash.ComputeHash(combined);
 string delimitedHexHash = BitConverter.ToString(hash.Hash);
 string completedSha1Hash = delimitedHexHash.Replace(""-"", """");

But If I change the Hash Algorithm Type to SHA256 and on the other sytem change the Hashing algorithm to SHA256 Salted (Suffix) Not sure if this is the same as SHA256?  The following code does not work properly, meaning it does not authenicate the user on the other side:
var hash = SHA256.Create();
var encoder = new UTF8Encoding();
byte[] combined = encoder.GetBytes(encryptedTokenStr);
hash.ComputeHash(combined);
string delimitedHexHash = BitConverter.ToString(hash.Hash);
string completedSha1Hash = delimitedHexHash.Replace(""-"", """");

","In my solution I use the following (copy and paste ready):
using System;
using System.Security.Cryptography;
using System.Text;

public string ComputeHash(string plainText, byte[] salt = null)
    {
        int minSaltLength = 4;
        int maxSaltLength = 16;

        byte[] saltBytes = null;

        if (salt != null)
        {
            saltBytes = salt;
        }
        else
        {
            Random r = new Random();
            int len = r.Next(minSaltLength, maxSaltLength);
            saltBytes = new byte[len];

            using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider())
            {
                rng.GetNonZeroBytes(saltBytes);
            }
        }
        byte[] plainData = ASCIIEncoding.UTF8.GetBytes(plainText);
        int plainLength = plainData.Length;
        int saltLength = saltBytes.Length;
        byte[] plainDataAndSalt = new byte[plainLength + saltLength];
        Array.Copy(plainData, 0, plainDataAndSalt, 0, plainLength);
        Array.Copy(saltBytes, 0, plainDataAndSalt, plainLength, saltLength);

        byte[] hashValue = null;

        using (SHA256Managed sha2 = new SHA256Managed())
        {
             hashValue = sha2.ComputeHash(plainDataAndSalt);
        }

        int hashLength = hashValue.Length;
        byte[] result = new byte[hashLength + saltLength];
        Array.Copy(hashValue, 0, result, 0, hashLength);
        Array.Copy(saltBytes, 0, result, hashLength, saltLength);

        return ASCIIEncoding.UTF8.GetString(result);
    }

Solution to your question/problem:
string hash = hash.ComputeHash(""your string"");

Or if server provide salt string for you:
byte[] salt = ASCIIEncoding.UTF8.GetBytes(""server salt string in plaintext"");
string hash = hash.ComputeHash(""your string to hash"", salt);

then return hash to the server.
","860","<c#><sha256>","0","0","2","2015-09-25 16:24:32","","3","","","","","2015-09-25 15:17:01",""
"29263809","Why is SHA2-256 hash not the same between MySQL and MS SQL Express?","I am building a reporting database and get data in CSV as well as from MS SQL Server. These are mostly personal records, tied together by SSN (well, not really SSN but something very similar). For security reasons, we are not storing the SSN, but rather the SHA2-256 hash of the SSN.
On MySql 5.6, I can simply use the built-in function:
sha2( string, 256).

For MS SQL Express (SQL Server 2008 running on Windows 7) I used this link (http://geekswithblogs.net/hroggero/archive/2009/09/19/strong-password-hashing-with-sql-server.aspx) to write an external UDF.
Each function should return the same string for the same argument .. and it does not. Even more puzzling is that the binary representation seems to be quite different:
MySql Output:   bfd6b995588ec54ce16871bc82a7ac86dd43a2c22309ea68e479a50043683937
MSSQL Output: 0x1B4F27012B7F6E7DA6563376E3CB560FCB07FDE2E33C6C3241A5D53885ABCF71

The MSSQL output is clearly a hex encoding (0-9, A-F) of the low and high 4 bit portions of each byte. But how does MySql represent the binary characters?
Ran the MySql queries both through SqlYog and through the DOS command-line ... no difference. 
I have checked the MySql documentation and everything else I could find on the web, no luck.
","Actually, MySql returns the same hex codes as MSSQL, just in lowercase. I did correct my C# code and now both functions return the same string. Hurrayyyyyyy
","858","<mysql><sql-server><hash><sha256>","-1","0","1","2015-03-25 19:18:01","","9","","1816580","","2015-03-25 19:12:52","2015-03-25 18:36:47",""
"20017511","How to shift bits across array of ints","Alright, I'll keep this plain & simple.
I'm working on a brute implementation of SHA-256 in Java, and to keep the class methods conducive to other classes in the app, I've decided to I/O the data as an array of 32-bit integers (int). Obviously, these kinds of uses rely heavily on use of bitwise operators, so how do I accomplish bitwise shifting across an array of ints, as such:
Given an array of data, suppose:
 int[16] data;

where the first 14 integers' worth of data is filled with 0x0000000, for the purposes of conversation, but the lowest two are filled respectively:
 data[14] = 0x12345678;
 data[15] = 0x01ABCDEF;

How do I accomplish a leftwise shift so that if shifted left by two,
 data[13] = 0x00000012;
 data[14] = 0x34567801;
 data[15] = 0xABCDEF00;

Anyone got any ideas?
","For bitwise shift left:
`x << n` is the same as `x *= 2^n`  

To see the overflowing bit (MSB):
    x / (2^32) >= 1 //Since we are using an 32 bit int

Likewise, for bitwise shift right:
`x >> n` is the same as `x /= 2^n`  

To see the overflowing bit (LSB):
    x % 2
Append the overflowing bit to the adjacent int by adding or subtracting set values. You should really use a BigInteger like I mentioned in my comment, anything else will require an implementation where you read and append the bits moving between array locations yourself.
","856","<java><int><bit-manipulation><shift><sha256>","0","-1","2","2013-11-18 07:39:45","20017761","10","","","","","2013-11-16 10:49:04",""
"20017511","How to shift bits across array of ints","Alright, I'll keep this plain & simple.
I'm working on a brute implementation of SHA-256 in Java, and to keep the class methods conducive to other classes in the app, I've decided to I/O the data as an array of 32-bit integers (int). Obviously, these kinds of uses rely heavily on use of bitwise operators, so how do I accomplish bitwise shifting across an array of ints, as such:
Given an array of data, suppose:
 int[16] data;

where the first 14 integers' worth of data is filled with 0x0000000, for the purposes of conversation, but the lowest two are filled respectively:
 data[14] = 0x12345678;
 data[15] = 0x01ABCDEF;

How do I accomplish a leftwise shift so that if shifted left by two,
 data[13] = 0x00000012;
 data[14] = 0x34567801;
 data[15] = 0xABCDEF00;

Anyone got any ideas?
","1) Write a helper method to convert your int[16] data to byte[64] bytedata.  
2) Create a BigInteger using the constructor BigInteger(byte[] val) 
3) Bitshift using shiftLeft(int n) and shiftRight(int n) 
4) Write a helper method to convert your byte[64] bytedata back to int[16] data. See byte array to Int Array here 
Other useful methods in BigInteger include clearBit(int n), setBit(int n), flipBit(int n), and testBit(int n)
","856","<java><int><bit-manipulation><shift><sha256>","0","0","2","2013-11-18 07:39:45","20017761","10","","","","","2013-11-16 10:49:04",""
"33222980","C# .NET Code to validate WSO2 API Gateway JWT signature, using SHA256withRSA algorithm","Can someone provide sample C# .NET code to validate the JWT issued by WSO2 API Gateway, which is signed using SHA256withRSA algorithm.  I'm pretty sure I need to set the TokenValidationParameters.IssuerSigningToken, and then call JwtSecurityTokenHandler.ValidateToken method, but I haven't been able to get it to work, or find any sample code.
This is what I have so far:
 // Use JwtSecurityTokenHandler to validate the JWT token
 var tokenHandler = new JwtSecurityTokenHandler();
 var convertedSecret = EncodeSigningToken(ConfigurationManager.AppSettings[""ClientSecret""]);

 // Read the JWT
 var parsedJwt = tokenHandler.ReadToken(token);


 // Set the expected properties of the JWT token in the TokenValidationParameters
 var validationParameters = new TokenValidationParameters()
 {
     NameClaimType = ""http://wso2.org/claims/enduser"",
     AuthenticationType = ""http://wso2.org/claims/usertype"",
     ValidAudience = ConfigurationManager.AppSettings[""AllowedAudience""],
     ValidIssuer = ConfigurationManager.AppSettings[""Issuer""],
     IssuerSigningToken = new BinarySecretSecurityToken(convertedSecret)
 };


 var claimsPrincipal = tokenHandler.ValidateToken(token, validationParameters, out parsedJwt);

","The JWT from the WSO2 API Gateway does not follow the specification (https://tools.ietf.org/html/rfc7519).
All the samples I have seen are of the form:
<Base64lEncodedHeader>.<Base64EncodedPayload>.<OPTIONAL, Base64EncodedSignature>

but should be:
<Base64UrlEncodedHeader>.<Base64UrlEncodedPayload>.<OPTIONAL, Base64UrlEncodedSignature>

The problem is the use of Base64 instead of Base64Url encoding.  Since the signature is based on <Base64EncodedHeader>.<Base64EncodedPayload>, and the MS JWT framework is validating the signature against the expected <Base64UrlEncodedHeader>.<Base64UrlEncodedPayload>, it will always fail validation.  I had to write my own custom signature verification code to work around this problem.  Then I strip off the signature from the token prior to parsing and decoding with JwtSecurityTokenHandler.
Here is the final code:
try
{
    // Get data and signature from unaltered token
    var data = Encoding.UTF8.GetBytes(token.Split('.')[0] + '.' + token.Split('.')[1]);
    var signature = Convert.FromBase64String(token.Split('.')[2]);

    // Get certificate from file
    var x509 = new X509Certificate2(HttpContext.Current.Server.MapPath(""~/App_Data/"" + ConfigurationManager.AppSettings[""CertFileName""]));

    // Verify the data with the signature
    var csp = (RSACryptoServiceProvider)x509.PublicKey.Key;
    if (!csp.VerifyData(data, ""SHA256"", signature))
    {
        // Signature verification failed; data was possibly altered
        throw new SecurityTokenValidationException(""Data signature verification failed. Token cannot be trusted!"");
    }

    // strip off signature from token
    token = token.Substring(0, token.LastIndexOf('.') + 1);

    // Convert Base64 encoded token to Base64Url encoding
    token = token.Replace('+', '-').Replace('/', '_').Replace(""="", """");

    // Use JwtSecurityTokenHandler to validate the JWT token
    var tokenHandler = new JwtSecurityTokenHandler();

    // Read the JWT
    var parsedJwt = tokenHandler.ReadToken(token);

    // Set the expected properties of the JWT token in the TokenValidationParameters
    var validationParameters = new TokenValidationParameters()
    {
        NameClaimType = ""http://wso2.org/claims/enduser"",
        AuthenticationType = ((JwtSecurityToken)parsedJwt).Claims.Where(c => c.Type == ""http://wso2.org/claims/usertype"").First().Value,
        ValidateAudience = false,
        ValidateLifetime = true,
        ValidateIssuer = true,
        ValidateIssuerSigningKey = false,
        RequireExpirationTime = true,
        RequireSignedTokens = false,
        //ValidAudience = ConfigurationManager.AppSettings[""AllowedAudience""],
        ValidIssuer = ConfigurationManager.AppSettings[""Issuer""],
        //IssuerSigningToken = new X509SecurityToken(cert),
        CertificateValidator = X509CertificateValidator.None
    };

    // Set both HTTP Context and Thread principals, so they will be in sync
    HttpContext.Current.User = tokenHandler.ValidateToken(token, validationParameters, out parsedJwt);
    Thread.CurrentPrincipal = HttpContext.Current.User;

    // Treat as ClaimsPrincipal, extract JWT expiration and inject it into request headers
    var cp = (ClaimsPrincipal)Thread.CurrentPrincipal;
    context.Request.Headers.Add(""JWT-Expiration"", cp.FindFirst(""exp"").Value);
}
catch (SecurityTokenValidationException stvErr)
{
    // Log error
    if (context.Trace.IsEnabled)
        context.Trace.Write(""JwtAuthorization"", ""Error validating token."", stvErr);
}
catch (System.Exception ex)
{
    // Log error
    if (context.Trace.IsEnabled)
        context.Trace.Write(""JwtAuthorization"", ""Error parsing token."", ex);
}

","850","<c#><rsa><jwt><sha256><wso2-am>","0","2","2","2019-04-12 16:26:41","33438681","0","","467122","","2015-10-19 21:38:04","2015-10-19 20:06:37",""
"33222980","C# .NET Code to validate WSO2 API Gateway JWT signature, using SHA256withRSA algorithm","Can someone provide sample C# .NET code to validate the JWT issued by WSO2 API Gateway, which is signed using SHA256withRSA algorithm.  I'm pretty sure I need to set the TokenValidationParameters.IssuerSigningToken, and then call JwtSecurityTokenHandler.ValidateToken method, but I haven't been able to get it to work, or find any sample code.
This is what I have so far:
 // Use JwtSecurityTokenHandler to validate the JWT token
 var tokenHandler = new JwtSecurityTokenHandler();
 var convertedSecret = EncodeSigningToken(ConfigurationManager.AppSettings[""ClientSecret""]);

 // Read the JWT
 var parsedJwt = tokenHandler.ReadToken(token);


 // Set the expected properties of the JWT token in the TokenValidationParameters
 var validationParameters = new TokenValidationParameters()
 {
     NameClaimType = ""http://wso2.org/claims/enduser"",
     AuthenticationType = ""http://wso2.org/claims/usertype"",
     ValidAudience = ConfigurationManager.AppSettings[""AllowedAudience""],
     ValidIssuer = ConfigurationManager.AppSettings[""Issuer""],
     IssuerSigningToken = new BinarySecretSecurityToken(convertedSecret)
 };


 var claimsPrincipal = tokenHandler.ValidateToken(token, validationParameters, out parsedJwt);

","WSO2 provides an option to change the format of JWT to be URL Encoded, after which custom code will not be required.
Documentation @ https://docs.wso2.com/display/AM260/Passing+Enduser+Attributes+to+the+Backend+Using+JWT mentions:
""However, for certain apps you might need to have it in Base64URL encoding. To encode the JWT using Base64URL encoding, add the URLSafeJWTGenerator class in the  element in the /repository/conf/api-manager.xml""
","850","<c#><rsa><jwt><sha256><wso2-am>","0","0","2","2019-04-12 16:26:41","33438681","0","","467122","","2015-10-19 21:38:04","2015-10-19 20:06:37",""
"48852587","hyperledger-composer: Hashing file (sha256)","Unfortunately is Node.js 'require' not supported - I was hoping to import Stanford Javascript Crypto Library - by the transaction processor. So my question: I would like to compute a sha256 hash of a file's content in a transaction. Is there a ""painless"" way of computing a sha256 hash using the transaction processor?
Thanks for your help!
","Don't try to use Node. Just include a JavaScript function right in the transaction definition. Use a separate file if you want. I did a quick Google and found a few such as
https://github.com/emn178/js-sha256/blob/master/src/sha256.js
I do my file hashing in the client but use a JavaScript function within my transaction function to generate a GUID so the process is the same.
","849","<hash><sha256><hyperledger-composer>","1","1","2","2018-02-22 17:11:07","48854047","0","","","","","2018-02-18 14:10:22",""
"48852587","hyperledger-composer: Hashing file (sha256)","Unfortunately is Node.js 'require' not supported - I was hoping to import Stanford Javascript Crypto Library - by the transaction processor. So my question: I would like to compute a sha256 hash of a file's content in a transaction. Is there a ""painless"" way of computing a sha256 hash using the transaction processor?
Thanks for your help!
","Quick example using the library found by David Berger:
https://github.com/emn178/js-sha256/blob/master/src/sha256.js
(downloading file from the web, then computing the hash).
Probably it would be wiser to use an external REST service to compute the hash (maybe with https://hyperledger.github.io/composer/integrating/call-out, but headers are missing?)
Edit: It works only using playground (client side), see Function in logic.js works in playground but not in REST server, right still learning... Maybe I should try with https://www.npmjs.com/package/request... or my own external REST service.
/**
* This part will only work on playground. Should try with
* @param {String} documentUrl 
*/
function getContent(documentUrl)
{
    return fetch(documentUrl, {
        method: 'GET'
    }).then((response) => {
        return response.text()
        .then((text) => {
          return text;
        });
     });
}

/**
 * @param {String} documentUrl
 */
function generateHash(documentUrl)
{
    return getContent(documentUrl)
    .then((documentContent) => {
        let hash = sha256.create();
        hash.update(documentContent);
        return hash.hex();
    });
}

So, case closed, but it was - I must admit - an easy one. Now I'm facing more complicated problems calling external rest APIs using Http, rest endpoints instead of using wrappers... The good point: the code will be stripped of unnecessary stuff. Still, the learning curve of hyperleder composer is far less steep than hyperledger fabric alone. Great tool!
","849","<hash><sha256><hyperledger-composer>","1","0","2","2018-02-22 17:11:07","48854047","0","","","","","2018-02-18 14:10:22",""
"44316955","Get-Filehash SHA256 encryption in powershell drops last 4 digits when run from a batch file","When I run the Get-Filehash from powershell it works however:
When I run it from a batch file, it drops last 4 digits.
powershell.exe -NoProfile -ExecutionPolicy -Command ""Get-FileHash filename.edi -Algorithm SHA256 | Out-File c:\app\testfileout.txt""


Algorithm       Hash                                                           
---------       ----                                                           
SHA256          3EFEC59BFB0573061C5CD2F72A684663B60CA3D0D91C67CBDBBE366A59FE...


How do I get the output file to ONLY be:

3EFEC59BFB0573061C5CD2F72A684663B60CA3D0D91C67CBDBBE366A59FE4A8F


Which gives me the full hash inside Powershell when I run this:
Get-FileHash filename.edi -Algorithm SHA256 | Out-File c:\app\testfileout.txt

I need just the hash without the headers as well as the final 4 digits.
Does anyone have a script that already does this?
","It returns an object so all you need to do is use Select-Object with ExpandProperty:
powershell.exe -NoProfile -ExecutionPolicy -Command ""Get-FileHash filename.edi -Algorithm SHA256 | Select-Object -ExpandProperty Hash | Out-File c:\app\testfileout.txt""

or reference the object property by dot notation:
powershell.exe -NoProfile -ExecutionPolicy -Command ""(Get-FileHash filename.edi -Algorithm SHA256).Hash | Out-File c:\app\testfileout.txt""

","847","<powershell><encryption><cmd><sha256>","1","2","2","2017-06-01 22:17:21","","1","","5047996","","2017-06-01 22:05:10","2017-06-01 20:56:00",""
"44316955","Get-Filehash SHA256 encryption in powershell drops last 4 digits when run from a batch file","When I run the Get-Filehash from powershell it works however:
When I run it from a batch file, it drops last 4 digits.
powershell.exe -NoProfile -ExecutionPolicy -Command ""Get-FileHash filename.edi -Algorithm SHA256 | Out-File c:\app\testfileout.txt""


Algorithm       Hash                                                           
---------       ----                                                           
SHA256          3EFEC59BFB0573061C5CD2F72A684663B60CA3D0D91C67CBDBBE366A59FE...


How do I get the output file to ONLY be:

3EFEC59BFB0573061C5CD2F72A684663B60CA3D0D91C67CBDBBE366A59FE4A8F


Which gives me the full hash inside Powershell when I run this:
Get-FileHash filename.edi -Algorithm SHA256 | Out-File c:\app\testfileout.txt

I need just the hash without the headers as well as the final 4 digits.
Does anyone have a script that already does this?
","

With pure cmd, you can do it like this:
cmd /V /C for /F ""tokens=*"" %H in ('certutil -hashfile ""filename.edi"" SHA256 ^^^| find /V "":""') do @(set ""HASH=%H"" ^& echo !HASH: =!) > ""C:\app\testfileout.txt""

In a batch-file, it may look like this:
setlocal EnableDelayedExpansion
for /F ""tokens=*"" %%H in ('
    certutil -hashfile ""filename.edi"" SHA256 ^| find /V "":""
') do @(
    set ""HASH=%%H"" & echo !HASH: =!
) > ""C:\app\testfileout.txt""
endlocal

","847","<powershell><encryption><cmd><sha256>","1","1","2","2017-06-01 22:17:21","","1","","5047996","","2017-06-01 22:05:10","2017-06-01 20:56:00",""
"42956922","How to give hex string to Hmac SHA256 objective C?","I am trying to generate hmac SHA256 in objective C in the following way:
const char *cKey  = [key cStringUsingEncoding:NSUTF8StringEncoding];
const char *cData = [data cStringUsingEncoding:NSUTF8StringEncoding];
unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];
CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

This works fine as long as the key is a string. Problem is on the external server command used to generate mac is:
openssl dgst -binary -sha256 -mac HMAC -macopt hexkey:$key 

There hmac is getting generated considering key as hexkey . So obviously hmac generated is different.
How do i tell the CCMac function in objective C to consider the key as hex key? I already tried converting the string key to byte array and passing it to CCMAC but still didn't work.
In android I have achieved the same by converting the hex number to a Big Integer and then doing getBytes on it, use it to create the secret key.
Hope some of you will be able to guide me.  
","Is this what you're looking for?
- (NSData *)dataFromHexString:(NSString *)sHex {
    const char *chars = [sHex UTF8String];
    int i = 0;
    NSUInteger len = sHex.length;

    NSMutableData *data = [NSMutableData dataWithCapacity:len / 2];
    char byteChars[3] = {'\0','\0','\0'};
    unsigned long wholeByte;

    while (i < len) {
        byteChars[0] = chars[i++];
        byteChars[1] = chars[i++];
        wholeByte = strtoul(byteChars, NULL, 16);
        [data appendBytes:&wholeByte length:1];
    }

    return data;
}

- (NSData *)hmacForHexKey:(NSString *)hexkey andStringData:(NSString *)data
{

    NSData *keyData = [self dataFromHexString:hexkey];

    const char *cKey  = [keyData bytes];
    const char *cData = [data cStringUsingEncoding:NSUTF8StringEncoding];

    unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];

    CCHmac(kCCHmacAlgSHA256, cKey, keyData.length, cData, strlen(cData), cHMAC);

    return [[NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];

}

- (NSData *)hmacForKey:(NSString *)key andStringData:(NSString *)data
{

    const char *cKey  = [key cStringUsingEncoding:NSUTF8StringEncoding];
    const char *cData = [data cStringUsingEncoding:NSUTF8StringEncoding];

    unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];

    CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

    return [[NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];

}

- (void)testIt {

    NSString *key = @""This is my random key."";
    NSString *hexKey = @""54686973206973206d792072616e646f6d206b65792e"";

    NSString *data = @""This is a data string."";

    NSData *hmac1 = [self hmacForKey:key andStringData:data];
    NSLog(@""hmacForKey   : %@"", hmac1);

    NSData *hmac2 = [self hmacForHexKey:hexKey andStringData:data];
    NSLog(@""hmacForHexKey: %@"", hmac2);
}

","843","<ios><objective-c><xcode><sha256><hmac>","0","3","1","2017-03-22 20:13:53","42961779","3","","799369","","2017-03-22 16:13:34","2017-03-22 16:00:59",""
"40598198","Impact of SHA1 Certificate Deprecation","I am currently developing in an environment where EAP-TLS authentication is being used on an embedded WiFi radio. On that radio, we load multiple certificates for authentication (a client certificate, a private key file for the client, and a root CA certificate). I have recently come across this Windows Blog post
and a few other posts about the deprecation of the SHA1 hash algorithm for certificate signing.
My main question/concern is that the radio that I am using does not support the use of any certificates stronger than SHA1 (no SHA2 support at all) and I wanted to know if EAP-TLS and other 802.1X methods are going to be affected by this shift to SHA2. Will CAs (either the Root CA if the customer created their own or the Intermediate CA, in the case that my customers use a third party Root CA) be able to issue SHA1 certificates still or will that be stopped as well?
I appreciate any help and support regarding this issue.
","SHA1 deprecation policy in Microsoft products affects only certificates issued by members of Trusted Root Program. SHA1 will continue to work for certificates issued by private CAs: http://social.technet.microsoft.com/wiki/contents/articles/32288.windows-enforcement-of-sha1-certificates.aspx
","840","<certificate><sha1><sha256><client-certificates><certificate-authority>","1","2","1","2016-11-14 21:45:53","40598353","1","","","","","2016-11-14 21:34:23",""
"50951813","fatal error: sha256.h: No such file or directory","I compile a sketch in Arduino IDE, the code includes sha256.h library:
...  
#include ""sha256.h""
...

When the codes are compiled, the error says:
fatal error: sha256.h: No such file or directory

I try to install sha256 library from Sketch > Include Library > Manage Libraries, but there are no such library listed.
Where can I get the included library?
","Without having more information like the names of some of the functions being called that need this header file it's hard to pin it down. There are several Arduino libraries out there that have a sha256.h header file.
You might try:
ESP8266-Arduino-cryptolibs - not available through the library manager, so you'd copy this manually into the Arduino libraries folder 
""AWS-SDK-ESP8266"" - available through the library manager
There are others that aren't ESP8266-specific; a simple Google search for 'sha256.h esp8266' or 'sha256.h arduino' will find them.
","836","<arduino><esp8266><sha256><nodemcu>","0","0","1","2018-06-23 02:47:38","50953031","0","","6629458","","2018-06-23 02:47:38","2018-06-20 15:24:56",""
"235493","Is my OCaml implementation of SHA256 sane?","I'm a novice OCaml programmer and thought I would throw myself into the deep end by attempting to implement a very tricky algorithm.  I'm open to all criticisms great and small be they stylistic or security or performance related.  
One criticism that I'm already aware of is that the algorithm requires the entire message to fit in memory (whereas the reference implementation of SHA256 can process a block at a time).
I'm especially concerned about if any of the recursive-functions are not tail-recursive.
I have tested the code and it does produce proper message digests on x86_64 Linux.
Thanks in advance for your consideration.
Edit:
Should nothing jump out at you please don't spend too much time here.  I'm looking for obviously broken behavior, not rewrites.
let as_bytes bits =
  match (bits mod 8) with
    | 0 -> (bits / 8)
    | _ -> failwith ""as_bytes: bits must be multiple of 8""
let as_bits bytes = bytes * 8
let k = [|
    0x428a2f98l; 0x71374491l; 0xb5c0fbcfl; 0xe9b5dba5l;
    0x3956c25bl; 0x59f111f1l; 0x923f82a4l; 0xab1c5ed5l;
    0xd807aa98l; 0x12835b01l; 0x243185bel; 0x550c7dc3l;
    0x72be5d74l; 0x80deb1fel; 0x9bdc06a7l; 0xc19bf174l;
    0xe49b69c1l; 0xefbe4786l; 0x0fc19dc6l; 0x240ca1ccl;
    0x2de92c6fl; 0x4a7484aal; 0x5cb0a9dcl; 0x76f988dal;
    0x983e5152l; 0xa831c66dl; 0xb00327c8l; 0xbf597fc7l;
    0xc6e00bf3l; 0xd5a79147l; 0x06ca6351l; 0x14292967l;
    0x27b70a85l; 0x2e1b2138l; 0x4d2c6dfcl; 0x53380d13l;
    0x650a7354l; 0x766a0abbl; 0x81c2c92el; 0x92722c85l;
    0xa2bfe8a1l; 0xa81a664bl; 0xc24b8b70l; 0xc76c51a3l;
    0xd192e819l; 0xd6990624l; 0xf40e3585l; 0x106aa070l;
    0x19a4c116l; 0x1e376c08l; 0x2748774cl; 0x34b0bcb5l;
    0x391c0cb3l; 0x4ed8aa4al; 0x5b9cca4fl; 0x682e6ff3l;
    0x748f82eel; 0x78a5636fl; 0x84c87814l; 0x8cc70208l;
    0x90befffal; 0xa4506cebl; 0xbef9a3f7l; 0xc67178f2l
  |]
  let hash s =
    let add_int32 x y = Int32.add x y in

    let left_int32 x n = Int32.shift_left x n in
    let right_int32 x n = Int32.shift_right_logical x n in
    let or_int32 x y = Int32.logor x y in
    let xor_int32 x y = Int32.logxor x y in
    let and_int32 x y = Int32.logand x y in
    let not_int32 x = Int32.lognot x in

    let rotate x n = (or_int32 (right_int32 x n) (left_int32 x (32 - n))) in
    let shift x n = right_int32 x n in
    let ch x y z = xor_int32 (and_int32 x y) (and_int32 (not_int32 x) z) in
    let maj x y z = (xor_int32 (and_int32 x y) (xor_int32 (and_int32 x z) (and_int32 y z))) in
    let sum0 x = (xor_int32 (rotate x  2) (xor_int32 (rotate x 13) (rotate x 22))) in
    let sum1 x = (xor_int32 (rotate x  6) (xor_int32 (rotate x 11) (rotate x 25))) in
    let rh00 x = (xor_int32 (rotate x  7) (xor_int32 (rotate x 18) (shift  x  3))) in
    let rh01 x = (xor_int32 (rotate x 17) (xor_int32 (rotate x 19) (shift  x 10))) in

    let as_bytes bits =
      match (bits mod 8) with
        | 0 -> (bits / 8)
        | _ -> failwith ""as_bytes: bits must be multiple of 8""
    in
    let as_bits bytes = bytes * 8 in
    let sha = [|
      0x6a09e667l;
      0xbb67ae85l;
      0x3c6ef372l;
      0xa54ff53al;
      0x510e527fl;
      0x9b05688cl;
      0x1f83d9abl;
      0x5be0cd19l
    |]
    in
    let message = Buffer.create (as_bytes 512) in (* smallest possible buffer is at least 512 bits *)
      begin
        Buffer.add_string message s;
        let original_length = as_bits (Buffer.length message) in 
        Buffer.add_char message '\x80'; (* append '1' bit *)
          let pad_start = as_bits (Buffer.length message) in
          let pad_blocks = if (original_length mod 512) < 448 then 1 else 2 in
          let message_length = ((original_length / 512) + pad_blocks) * 512 in
            begin (* appending k bits of 0 (where message_length-64 is our k) *)
              for i = as_bytes pad_start to (as_bytes (message_length - (as_bytes  64)))-8 do
                Buffer.add_char message '\x00'
              done;
              Buffer.add_buffer message (Bin.pack64 (Int64.of_int original_length))
            end
      end;
      let rec process_block i blocks =
        let array_of_block i = 
          let boff = i*(as_bytes 512) in
          let to_int32 x = (Int32.of_int (int_of_char x)) in
          let w = Array.make (as_bytes 512) 0l in
            begin
              for t = 0 to 15 do
                w.(t) <- (or_int32 (left_int32 (to_int32 (Buffer.nth message (boff + (t*4  )))) 24)
                         (or_int32 (left_int32 (to_int32 (Buffer.nth message (boff + (t*4+1)))) 16)
                         (or_int32 (left_int32 (to_int32 (Buffer.nth message (boff + (t*4+2))))  8)
                                               (to_int32 (Buffer.nth message (boff + (t*4+3))))   )));
              done;
              for t = 16 to 63 do
                w.(t) <- add_int32 (add_int32 (rh01 w.(t-2)) w.(t-7)) (add_int32 (rh00 w.(t-15)) w.(t-16))
              done;
              w
            end
        in
          if i = blocks then 
            let sha256 = Buffer.create (as_bytes 256) in
            let rec pack_sha256 i =
              match i with
                | 8 -> Buffer.contents sha256
                | _ ->
                    begin
                      Buffer.add_buffer sha256 (Bin.pack32 sha.(i));
                      pack_sha256 (i+1)
                    end
            in pack_sha256 0
          else
            begin
              let w = array_of_block i in
              let tem = [| 0l; 0l |] in
                begin
                  let a = ref sha.(0) in 
                  let b = ref sha.(1) in
                  let c = ref sha.(2) in
                  let d = ref sha.(3) in 
                  let e = ref sha.(4) in
                  let f = ref sha.(5) in
                  let g = ref sha.(6) in
                  let h = ref sha.(7) in
                    for t = 0 to 63 do
                      begin
                        tem.(0) <- add_int32 (add_int32 !h (sum1 !e)) (add_int32 (ch !e !f !g) (add_int32 k.(t) w.(t)));
                        tem.(1) <- add_int32 (sum0 !a) (maj !a !b !c);
                        h := !g;
                        g := !f;
                        f := !e;
                        e := add_int32 !d tem.(0);
                        d := !c;
                        c := !b;
                        b := !a;
                        a := add_int32 tem.(0) tem.(1);
                       end
                    done;
                    sha.(0) <- add_int32 sha.(0) !a;
                    sha.(1) <- add_int32 sha.(1) !b;
                    sha.(2) <- add_int32 sha.(2) !c;
                    sha.(3) <- add_int32 sha.(3) !d;
                    sha.(4) <- add_int32 sha.(4) !e;
                    sha.(5) <- add_int32 sha.(5) !f;
                    sha.(6) <- add_int32 sha.(6) !g;
                    sha.(7) <- add_int32 sha.(7) !h;

                    (* good faith attempt to clear memory *)
                    for i = 0 to 63 do w.(t) <- 0 done;
                    tem.(0) <- 0; tem.(1) <- 0;
                    a := 0; b := 0; c := 0; d := 0; e := 0; f := 0; g := 0; h := 0;
                end;
            process_block (i+1) blocks
          end
  in process_block 0 ((Buffer.length message) / (as_bytes 512))

  let hexdigits s =
    let rec hexdigits_inner hx i =
      match i with
        | 32 -> hx
        | _ -> hexdigits_inner (hx ^ (Printf.sprintf ""%02x"" (int_of_char s.[i]))) (i+1)
    in
      hexdigits_inner """" 0

The pack functions, defined in a separate file, are thus:
let pack64 x = 
  let b = Buffer.create 8 in 
    for i = 0 to 7 do
      let shft = (7-i)*8 in
        Buffer.add_char b (char_of_int (Int64.to_int (Int64.logand (Int64.shift_right x shft) 0xFFL)));
    done;
    b

let pack x n = 
  if (n mod 8) = 0 then
    let n' = n/8 in
    let b = Buffer.create n' in 
      for i = 0 to n'-1 do
        let shft = ((n'-1)-i)*8 in
          Buffer.add_char b (char_of_int (Int32.to_int (Int32.logand (Int32.shift_right x shft) 0xFFl)));
      done;
      b
  else
    raise (Invalid_argument (""pack: "" ^ (string_of_int n) ^ "" is not a multiple of 8""))

let pack32 x = pack x 32
let pack16 x = pack x 16
let pack8 x = pack x 8

","The first thing you should do is get the test vectors from the standard and verify if your implementation generates the exact same result. If it does not, it's broken.
You can also generate other test vectors if you have a ""known sane"" implementation (the openssl command probably has one).
Finally, run some performance tests with progressively larger files, and compare with a known fast implementation (the openssl one should be quite fast). If it fails (exausting all memory or being too slow), you have to fix something on it.
If it passes all these tests, it should be good enough. There shouldn't be many security concerns with a hashing algorithm (unless you are hashing sensitive data, where you would have to be very careful to overwrite all the memory you used).
","835","<ocaml><digest><sha256><sha>","0","4","1","2008-10-24 23:47:09","235620","1","","18446","mbac32768","2008-10-24 22:44:03","2008-10-24 22:36:57",""
"41340208","Get Sha256 public key from certificate","Currently, am working on client server application(Chat) am implementing  security for server and clients, few of the client is written in java SMACK library, they are using TLS Pining for JAVA it needs sha2 hash [https://github.com/Flowdalic/java-pinning][1] 
Server is implemented using C#, I have certificate on server side how can I get the sha2 public key with below format from the certificate, below is my code.
cer =new X509Certificate2(ConfigurationManager.AppSettings[""CertificateName""],""123456"");

string hellow= cer.GetCertHashString(); //it will return sha1 hash 

what I need is the below format and sha2-256 key from the certificate
SHA2-256 key

83:F9:17:1E:06:A3:13:11:88:89:F7:D7:93:02:BD:1B:7A:20:42:EE:0C:FD:02:9A:BF:8D:D0:6F:FA:6C:D9:D3

","I have found the solution for my question, let me share.
If you want to get certificate's SHA256 thumbprint, you have to do some manual work. Built-in Thumbprint property is SHA1 only.
Yo have to use a SHA256 class and compute hash over certificate's content:
using System;
using System.Linq;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;

namespace MyNamespace {
    class MyClass {
        public static String GetSha2Thumbprint(X509Certificate2 cert) {
            Byte[] hashBytes;
            using (var hasher = new SHA256Managed()) {
                hashBytes = hasher.ComputeHash(cert.RawData);
            }
            return BitConverter.ToString(hashBytes).Replace(""-"", "":"");
        }
    }
}

","835","<c#><certificate><sha256><x509certificate2>","1","2","1","2016-12-27 10:03:50","41343032","0","3","4375301","","2016-12-27 07:29:05","2016-12-27 06:37:26",""
"13326274","OpenSSL Certificate For IDEAL","I have been creating a website to link into an Advanced Integration with IDEAL. The issue is when I am creating the self signed certificates and loading them into the site, I am receiving this error: 
Failure Signing Data: error:0906A068:PEM routines:PEM_do_header:bad password read - SHA256
I have followed the instructions to create these certificates and keys from the instructions given by IDEAL. 
Here are the commands I have been writing in OPENSSL:
genrsa –des3 –out priv.pem –passout pass:pass 2048
req –x509 –sha1 –new –key priv.pem –passin pass:pass –days 3650 –out cert.cer
Could anyone point in the direction of where the mistake/error lies.
Thanks
","Remove the passphrase:
openssl rsa -in key.pem -out key_unprot.pem

","831","<ssl><openssl><certificate><integration><sha256>","1","0","1","2013-07-09 07:45:41","","0","","1358452","","2012-11-11 17:59:54","2012-11-10 21:31:22",""
"20058189","Does SHA256 have good cross platform support?","I'm currently designing a new REST API which I'm considering requiring message signing. At a high level the model is like this:

The API consumer is given an API Key and Secret
The API consumer uses the Secret to create a message digest HMAC of the message it sends into the API.

I've been considering using SHA256 for the signing, but want to be sure it will work with:

Android/Java
iOS
all other major platform, etc.

I realize SHA-1 has good support, but I really need to use something stronger, if possible.
","SHA256 is supported by CommonCrypto in iOS. Java supports it via MessageDigest.getInstance(""SHA-256""), Android as well (Java). And lets not forget Windows Phone where it's supported as well. That's pretty major in my opinion.
As you already pointed out you shouldn't use SHA1 as it's not secure enough anymore.
","822","<java><android><ios><encryption><sha256>","1","3","2","2014-11-04 20:29:51","","7","3","238704","","2013-11-19 01:29:06","2013-11-18 21:21:30",""
"20058189","Does SHA256 have good cross platform support?","I'm currently designing a new REST API which I'm considering requiring message signing. At a high level the model is like this:

The API consumer is given an API Key and Secret
The API consumer uses the Secret to create a message digest HMAC of the message it sends into the API.

I've been considering using SHA256 for the signing, but want to be sure it will work with:

Android/Java
iOS
all other major platform, etc.

I realize SHA-1 has good support, but I really need to use something stronger, if possible.
","SHA-256withRSA is NOT supported in older android versions (verified the same in Android 4.0.3, 4.1.1). I have experienced this problem while using JSCEP. The digest algorithm returned by SCEP server is SHA-256. But SHA-256withRSA is not present in any default SecurityProviders in those android versions. Found a relevant link:
Which versions of Android support which package signing algorithms? 
This link shows that SHA-256withRSA was added later:
https://android-review.googlesource.com/44360
","822","<java><android><ios><encryption><sha256>","1","-1","2","2014-11-04 20:29:51","","7","3","238704","","2013-11-19 01:29:06","2013-11-18 21:21:30",""
"39177117","Python3; Bitcoin; sha256 hash; private key to wallet import format double hash not working","I am trying to write my own private key to wif format code. I believe I have the base58 encoding correct, but I am not getting the same output. When I look further back into my code, I notice that my output of my double sha256 hash is not the same, which leads to a different checksum and throws everything off down the line.
Here is a bit of code where my problem lies. This part is rewritten just for this post and leaves all my other steps out that are not needed to be shown for this issue.
import hashlib

a = ""800C28FCA386C7A227600B2FE50B7CAE11EC86D3BF1FBE471BE89827E19D72AA1D""


def double_hash(num):
    first_hash = hashlib.sha256(num.encode()).hexdigest()
    print(first_hash, ""first hash"")
    second_hash = hashlib.sha256(first_hash.encode()).hexdigest()
    return second_hash


def main():
    print(double_hash(a))


if __name__ == ""__main__"":
    main()

# ---- Output ----
# >>> e2e4146a36e9c455cf95a4f259f162c353cd419cc3fd0e69ae36d7d1b6cd2c09 first hash
# >>> fe32ab4c7a99d37256148b0dabc6390272ebe2572b943abc2580bfdacac98fbc

# ---- Expected output ----
# 8147786C4D15106333BF278D71DADAF1079EF2D2440A4DDE37D747DED5403592 first hash
# 507A5B8DFED0FC6FE8801743720CEDEC06AA5C6FCA72B07C49964492FB98A714

Here is my source:
https://en.bitcoin.it/wiki/Wallet_import_format
","I am not sure how I even came about this. I was thinking that the string representation of the hex number must be converting into some other number. So I made an attempt to get it into binary format. From trial and error and I stumbled upon trying to unhexlify it and it worked.  
import hashlib
import binascii

a = ""800C28FCA386C7A227600B2FE50B7CAE11EC86D3BF1FBE471BE89827E19D72AA1D""


def double_hash(num):
    first_hash = hashlib.sha256(binascii.unhexlify(num)).hexdigest()
    print(first_hash, ""first hash"")
    second_hash = hashlib.sha256(binascii.unhexlify(first_hash)).hexdigest()
    return second_hash


def main():
    print(double_hash(a))


if __name__ == ""__main__"":
    main()

# ---- Output ----
# 8147786c4d15106333bf278d71dadaf1079ef2d2440a4dde37d747ded5403592 first hash
# 507a5b8dfed0fc6fe8801743720cedec06aa5c6fca72b07c49964492fb98a714

# ---- Expected output ----
# 8147786C4D15106333BF278D71DADAF1079EF2D2440A4DDE37D747DED5403592 first hash
# 507A5B8DFED0FC6FE8801743720CEDEC06AA5C6FCA72B07C49964492FB98A714

","819","<python-3.x><hash><sha256><private-key><bitcoin>","0","0","1","2016-08-27 05:04:22","","0","","","","","2016-08-27 03:17:40",""
"36581223","Lockbox 3 - Delphi 7 - SHA-256","I am trying to use Lockbox 3.6.3 in Delphi 7. Specifically, I want to use the TSHA2 class.
However, when I try to compile a Delphi 7 project that uses the TSHA2 class i get various compilation errors. 
The TPLB3.IntegerUtils unit generates errors in functions inside an IntegerUtils_Pascal conditional defines. There are four functions that are declared with an inline directive that is not valid for Delphi 7.
The TPLB3.Common.inc file uses $IF and $IFEND that are not valid in Delphi 7. 
I am under the impression that Lockbox 3.6.3 can be compiled using Delphi 7. Is I could not find any documentation that listed anything specific that needed to be done in order to compile with Delphi 7. 
The only class I need in Delphi 7 is the TSHA2 class using the SHA_256 TSHA2FamiliyMember.
Any information on how to compile the Lockbox 3.6.3 classes in a Delphi 7 project would be appreciated.
","","817","<delphi><delphi-7><sha256><lockbox-3>","1","","0","2016-04-13 05:12:41","","4","","","","","2016-04-12 18:26:23",""
"43571694","Generate SHA-256 hash for a XML in Java","I'm trying to add a caching feature for http requests  (for one of my projects) and I thought of using Etag as the hash value. But if the Etag is not there i thought of using the payload to generate a unique hash value. As we all know same xml pay loads might have different structures. For example Sample A and Sample B are same. But their string structures are not the same. What I need is a way to generate the same hash key from both xml samples.
Sample A
<note>
   <to>Tove</to>
   <from>Jani</from>
   <heading>Reminder</heading>
   <body>Don't forget me this weekend!</body>
</note>

Sample B
<note>
   <to>Tove</to>
   <heading>Reminder</heading>
   <from>Jani</from>
   <body>Don't forget me this weekend!</body>
</note>

","org.w3c.dom.document.normalizeDocument() document does not alter the order of child elements.
You could do this by a recursive parse of the document. However, consider whether this is more expensive than the operation you're trying to cache in the first place... 
Method 

At each level copy all the nodes to a java.util.List implementation, i.e. ArrayList. This is required because org.w3c.dom.NodeList does not allow modification
Sort the list using Collections.sort()
Remove children from their parent
Add children back in sorted order

Note this does not deal with multiple elements of same name with different contents, but does solve your example
For example:
public static void main(String[] args) throws Exception {
    Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new File(""test.xml""));
    sort(doc);

    TransformerFactory tf = TransformerFactory.newInstance();
    Transformer transformer = tf.newTransformer();
    transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, ""yes"");
    StringWriter writer = new StringWriter();
    transformer.transform(new DOMSource(doc), new StreamResult(writer));

    System.out.println(writer);
}

private static void sort(Node doc) {
    List<Node> children = new ArrayList<>();
    for (int i = 0; i < doc.getChildNodes().getLength(); i++) {
        children.add(doc.getChildNodes().item(i));
    }
    for (Node child : children) {
        doc.removeChild(child);
    }
    Collections.sort(children, (a, b) -> {
        return a.getNodeName().compareTo(b.getNodeName());
    });
    for (Node child : children) {
        doc.appendChild(child);
    }
    for (Node child : children) {
        sort(child);
    }
}

","813","<java><xml><hash><sha256>","2","1","1","2017-04-23 15:38:30","43573126","7","","","","","2017-04-23 13:19:05",""
"40910494","How to convert plain text to SHA-256 hash in Netezza?","Can anyone please help me with some sql query where I can convert plain text to SHA-256 hash in Netezza..
Thanks in advance..
","The docs show that this is simply calling the hash function with the second argument equal to 2.
select hash('string', 2)

But I'm presuming you'd like it in hexadecimal format, so wrap it in rawtohex.
select rawtohex(hash('string', 2))

","812","<hash><sha256><netezza><password-encryption>","0","2","1","2016-12-02 15:26:38","40935645","0","","","","","2016-12-01 12:18:39",""
"36444414","Can I store sha256 hashed passwords in plain text?","So I have php code which saves a hashed version of a password to a file called passwords.txt. As it currently stands, anyone who knows the directory of the file (www.example.com/datacache/passwords.txt) can access it. Is this the incorrect way of doing it? I thought I followed the guide to correct password treatment to the letter, but this seems oddly insecure. Thoughts? Suggestions?
Thank you!
","Ideally you'd save them in a secure SQL database, or something of that description; hashing is supposed to be a second line of defence.
So if your database data gets breached and a hacker gets a hold of it, they won't be able to log on to everyone's account. 
Usually the process with any type of Hash is that, once it's brought out, it would be the most secure it will ever be, and then gradually over time, with the collection of people and increased computer power, the hash will be ""broken"" usually through a collection of Rainbow tables, and will end up with a website such as THIS which is what happened with Md5.
If you are going to store them in a .txt file, the minimum you can do on top of what you've already done, is to make sure you SALT the hashed password. 
Salting a hashed password decreases its chance of being cracked. Please refer to links below on how you would go about Salting your hash.
Great video by Computerphile on YouTube about the topic
Good tutorial by CrackStation on how to Salt a Hash
Good examples by W3Schools on Hashing/Salting
","811","<php><security><passwords><sha256><password-hash>","0","0","2","2016-04-06 20:34:00","36445996","2","0","2224584","","2016-04-06 19:01:28","2016-04-06 07:35:54",""
"36444414","Can I store sha256 hashed passwords in plain text?","So I have php code which saves a hashed version of a password to a file called passwords.txt. As it currently stands, anyone who knows the directory of the file (www.example.com/datacache/passwords.txt) can access it. Is this the incorrect way of doing it? I thought I followed the guide to correct password treatment to the letter, but this seems oddly insecure. Thoughts? Suggestions?
Thank you!
","Actually there are two questions here:
1) Is it ok to store the hashes in a file
Saving passwords in a file is not better or worse than storing it in a database. The point with a file is, that it should be stored outside of the WWW root directory. Most providers offer a private directory, which can be accessed by code, but canot be reached for HTTP requests.
2) Is it safe to use SHA-256 for hashing passwords
No SHA-* and MD5 should not be used directly to hash passwords, because they are too fast and therefore can be brute-forced too easily. Instead one should use a slow function like BCrypt, PBKDF2 or SCrypt, they offer a cost factor and add a safe salt automatically.
PHP offers a password API with two functions password_hash() and password_verify(). Use them, they are future proof and will produce BCrypt hashes.
// Hash a new password for storing in the database.
// The function automatically generates a cryptographically safe salt.
$hashToStoreInDb = password_hash($password, PASSWORD_DEFAULT);

// Check if the hash of the entered login password, matches the stored hash.
// The salt and the cost factor will be extracted from $existingHashFromDb.
$isPasswordCorrect = password_verify($password, $existingHashFromDb);

If you're running an old version of PHP that doesn't have this API, upgrade. If for some reason you can't, check out password_compat.
","811","<php><security><passwords><sha256><password-hash>","0","1","2","2016-04-06 20:34:00","36445996","2","0","2224584","","2016-04-06 19:01:28","2016-04-06 07:35:54",""
"29604301","SHA-256 custom length digest","I need to allow old users of a website to have access to the new website with the same credentials. The database server version is Microsoft SQL Server 2005 and i dont have permissions to make changes to the database. The password column of the database is set to varchar(50) and a digest is 48 characters. The only information that i have for the passwords is that they have been hashed with sha-256 algoritm but as far as i know a sha-256 digest is 64 characters and not 48. Is it possible to produce the same 48 length digests with sha256?
","The only two primitive hash functions with native output size of 192 bits (48hex * 1byte/2hex * 8bit/byte) are HAVAL-192 and TIGER-192. None of the others match up exactly.
If they have indeed been hashed with sha256, then they may be truncated (as a hex encoded sha-256 digest is 64 characters.
To deduce the exact situation will take some work. Here are the different ways you can approach it.

If I had access to the original source code, I'd look at that. Considering you asked the question, I'll assume that's not possible.
If I could write a record into the old system, I'd set a sentinel password (or find an account I knew the password to). Something that I know. Then I'd find the hashed result from the DB.
So now we know p=password and h=4d9e.... 
From there, start by just hashing the password with sha256 and see what you come up with. If you're lucky, you'll find a pattern quickly (like the last half of the hash is just cut off). If you're not lucky, it'll take some digging and trial and error.
So, for example:
p = ""password""
h = ""5e884898da28047151d0e56f8dc6292773603d0d6aabbdd6""

The result would be: sha256(p)[0:48] as sha256(p) == ""5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8""
h = ""51d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8""

The result would be: sha256(p)[16:48]
And so on.
If I didn't have access to a known password, there would be no way of testing the hypothesis. So if you don't have the source code, and don't know an account in the system, you're basically out of luck. So make those first 2 your top priority.

Beware that you may have to get creative. It's entirely possible that something weird has been done. Such as:
salt = h[0:8]
tmp = sha256(p + salt)
h = salt + (tmp[0:16] xor tmp[16:16])

So have fun :-)
","809","<java><sql-server><security><sha><sha256>","1","1","1","2015-04-13 14:28:20","","2","","","","","2015-04-13 11:34:58",""
"32809795","Does SHA256 favor integers?","While coding earlier I noticed something strange about SHA256, in that it seems to generate more integers than letters for the hash. At first I thought I was just imagining it, so I put together a quick test to make sure. Astonishingly, my test seems to prove that SHA256 favors integer values in the hash that it generates. I want to know why this is. Shouldn't the difference between a hash index being a letter and a number be the exact same? Here is my testing example:
namespace TestingApp
{
    static class Program
    {
        private static string letters = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"";
        private static char[] characters = letters.ToCharArray();
        private static Random _rng = new Random();

        static void Main(string[] args)
        {
            int totalIntegers = 0;
            int totalLetters = 0;
            for (int testingIntervals = 0; testingIntervals < 3000; testingIntervals++)
            {
                string randomString = NextString(10);
                string checksum = DreamforceChecksum.GenerateSHA256(randomString);
                int integerCount = checksum.Count(Char.IsDigit);
                int letterCount = checksum.Count(Char.IsLetter);
                Console.WriteLine(""String: "" + randomString);
                Console.WriteLine(""Checksum: "" + checksum);
                Console.WriteLine(""Integers: "" + integerCount);
                Console.WriteLine(""Letters: "" + letterCount);
                totalIntegers += integerCount;
                totalLetters += letterCount;
            }
            Console.WriteLine(""Total Integers: "" + totalIntegers);
            Console.WriteLine(""Total Letters: "" + totalLetters);
            Console.Read();
        }

        private static string NextString(int length)
        {
            StringBuilder builder = new StringBuilder();
            for (int i = 0; i < length; i++)
            {
                builder.Append(characters[_rng.Next(characters.Length)]);
            }
            return builder.ToString();
        }
    }
}

and my checksum/hashing class:
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace DreamforceFramework.Framework.Cryptography
{
    public static class DreamforceChecksum
    {
        private static readonly SHA256Managed _shaManagedInstance = new SHA256Managed();
        private static readonly StringBuilder _checksumBuilder = new StringBuilder();
        public static string GenerateSHA256(string text)
        {
            byte[] bytes = Encoding.UTF8.GetBytes(text);
            byte[] hash = _shaManagedInstance.ComputeHash(bytes);
            _checksumBuilder.Clear();
            for (int index = 0; index < hash.Length; index++)
            {
                _checksumBuilder.Append(hash[index].ToString(""x2""));
            }
            return _checksumBuilder.ToString();
        }

        public static byte[] GenerateSHA256Bytes(string text)
        {
            byte[] bytes = Encoding.UTF8.GetBytes(text);
            byte[] hash = _shaManagedInstance.ComputeHash(bytes);
            _checksumBuilder.Clear();
            for (int index = 0; index < hash.Length; index++)
            {
                _checksumBuilder.Append(hash[index].ToString(""x2""));
            }
            return Encoding.UTF8.GetBytes(_checksumBuilder.ToString());
        }

        public static bool ValidateDataIntegrity(string data, string targetHashcode)
        {
            return GenerateSHA256(data).Equals(targetHashcode);
        }
    }
}

I have ran my test multiple times, and every time it seems that more integers are generated within the hash than letters. Here are 3 test runs:



Does anyone know why SHA256 seems to favor numbers instead of an equal distribution of both letters and numbers?
","Given that there are 10 digits and 6 letters possible, the proportion should be roughly 10:6. That's right in line with your results.
","802","<c#><algorithm><hash><sha256>","7","25","2","2015-09-27 18:12:20","32809846","1","1","3214889","","2015-09-27 18:12:20","2015-09-27 15:49:08",""
"32809795","Does SHA256 favor integers?","While coding earlier I noticed something strange about SHA256, in that it seems to generate more integers than letters for the hash. At first I thought I was just imagining it, so I put together a quick test to make sure. Astonishingly, my test seems to prove that SHA256 favors integer values in the hash that it generates. I want to know why this is. Shouldn't the difference between a hash index being a letter and a number be the exact same? Here is my testing example:
namespace TestingApp
{
    static class Program
    {
        private static string letters = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"";
        private static char[] characters = letters.ToCharArray();
        private static Random _rng = new Random();

        static void Main(string[] args)
        {
            int totalIntegers = 0;
            int totalLetters = 0;
            for (int testingIntervals = 0; testingIntervals < 3000; testingIntervals++)
            {
                string randomString = NextString(10);
                string checksum = DreamforceChecksum.GenerateSHA256(randomString);
                int integerCount = checksum.Count(Char.IsDigit);
                int letterCount = checksum.Count(Char.IsLetter);
                Console.WriteLine(""String: "" + randomString);
                Console.WriteLine(""Checksum: "" + checksum);
                Console.WriteLine(""Integers: "" + integerCount);
                Console.WriteLine(""Letters: "" + letterCount);
                totalIntegers += integerCount;
                totalLetters += letterCount;
            }
            Console.WriteLine(""Total Integers: "" + totalIntegers);
            Console.WriteLine(""Total Letters: "" + totalLetters);
            Console.Read();
        }

        private static string NextString(int length)
        {
            StringBuilder builder = new StringBuilder();
            for (int i = 0; i < length; i++)
            {
                builder.Append(characters[_rng.Next(characters.Length)]);
            }
            return builder.ToString();
        }
    }
}

and my checksum/hashing class:
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace DreamforceFramework.Framework.Cryptography
{
    public static class DreamforceChecksum
    {
        private static readonly SHA256Managed _shaManagedInstance = new SHA256Managed();
        private static readonly StringBuilder _checksumBuilder = new StringBuilder();
        public static string GenerateSHA256(string text)
        {
            byte[] bytes = Encoding.UTF8.GetBytes(text);
            byte[] hash = _shaManagedInstance.ComputeHash(bytes);
            _checksumBuilder.Clear();
            for (int index = 0; index < hash.Length; index++)
            {
                _checksumBuilder.Append(hash[index].ToString(""x2""));
            }
            return _checksumBuilder.ToString();
        }

        public static byte[] GenerateSHA256Bytes(string text)
        {
            byte[] bytes = Encoding.UTF8.GetBytes(text);
            byte[] hash = _shaManagedInstance.ComputeHash(bytes);
            _checksumBuilder.Clear();
            for (int index = 0; index < hash.Length; index++)
            {
                _checksumBuilder.Append(hash[index].ToString(""x2""));
            }
            return Encoding.UTF8.GetBytes(_checksumBuilder.ToString());
        }

        public static bool ValidateDataIntegrity(string data, string targetHashcode)
        {
            return GenerateSHA256(data).Equals(targetHashcode);
        }
    }
}

I have ran my test multiple times, and every time it seems that more integers are generated within the hash than letters. Here are 3 test runs:



Does anyone know why SHA256 seems to favor numbers instead of an equal distribution of both letters and numbers?
","The output is hexadecimal. 0-9 and a-f
","802","<c#><algorithm><hash><sha256>","7","2","2","2015-09-27 18:12:20","32809846","1","1","3214889","","2015-09-27 18:12:20","2015-09-27 15:49:08",""
"3696570","Problem with hash256 in Objective C","when i use this code for generate an hash256 in my iPhone app:
 unsigned char hashedChars[32];
  NSString *inputString;
  inputString = [NSString stringWithFormat:@""hello""];
  CC_SHA256([inputString UTF8String],
      [inputString lengthOfBytesUsingEncoding:NSASCIIStringEncoding ], 
      hashedChars);
  NSData * hashedData = [NSData dataWithBytes:hashedChars length:32];

The hash256 of inputString, is created correctly, but if i use a string like this @""\x00\x25\x53\b4"", the hash256 is different from the real string with ""\x"" characters.
I think that the problem is in encoding ""UTF8"" instead of ascii.
Thanks!
","I would be suspicious of the first character, ""\x00"" - thats going to terminate anything that thinks its dealing with ""regular C strings"".
Not sure whether lengthOfBytesUsingEncoding: takes that stuff into account, but its something I'd experiment with.
","795","<iphone><objective-c><sha256>","0","1","2","2010-09-13 15:29:13","","2","","224671","","2010-09-12 20:52:55","2010-09-12 20:51:16",""
"3696570","Problem with hash256 in Objective C","when i use this code for generate an hash256 in my iPhone app:
 unsigned char hashedChars[32];
  NSString *inputString;
  inputString = [NSString stringWithFormat:@""hello""];
  CC_SHA256([inputString UTF8String],
      [inputString lengthOfBytesUsingEncoding:NSASCIIStringEncoding ], 
      hashedChars);
  NSData * hashedData = [NSData dataWithBytes:hashedChars length:32];

The hash256 of inputString, is created correctly, but if i use a string like this @""\x00\x25\x53\b4"", the hash256 is different from the real string with ""\x"" characters.
I think that the problem is in encoding ""UTF8"" instead of ascii.
Thanks!
","You're getting the bytes with [inputString UTF8String] but the length with [inputString lengthOfBytesUsingEncoding:NSASCIIStringEncoding]. This is obviously wrong. Moreover (assuming you mean ""\xB4"" and that it turns into something not in ASCII), ""\xB4"" is not likely to be in ASCII. The docs for NSString say

Returns 0 if the specified encoding cannot be used to convert the receiver

So you're calculating the hash of the empty string. Of course it's wrong.
You're less likely to have problems if you only generate the data once:
NSData * inputData = [inputString dataUsingEncoding:NSUTF8StringEncoding];
CC_SHA256(inputData.bytes, inputData.length, hashedChars);

","795","<iphone><objective-c><sha256>","0","1","2","2010-09-13 15:29:13","","2","","224671","","2010-09-12 20:52:55","2010-09-12 20:51:16",""
"32339704","How to compare an Fedora iso download file with its sha-256 checksum text file in Windows using Java?","I wanted to verify the sha256-checksum of the Fedora ISO image I have downloaded with its checksum text file. I have the iso and checksum text file both on a directory. And I followed the Fedora verifying downloaded image (https://docs.fedoraproject.org/en-US/Fedora/22/html/Installation_Guide/sect-verifying-images.html) instructions for Windows and got an error ""The file is too long, this operation is currently limited to supporting files less than 2 gigabytes in size"" while using Windows8.1 powershell. The ISO image file is 2.165GB size. Is there a Java api or tool available now so that I don't have to reinvent the wheel? I don't have a Linux/
","If you are using Powershell 4.0 or greater (which you are since you said you are using Windows 8.1), you can utilize the Get-FileHash cmdlet. Example:
Get-FileHash -Algorithm SHA256 .\en_visual_studio_enterprise_2015_x86_x64_dvd_6850497.iso

","793","<java><powershell><checksum><iso><sha256>","3","2","2","2015-09-01 20:12:31","32339885","1","1","","","","2015-09-01 19:42:55",""
"32339704","How to compare an Fedora iso download file with its sha-256 checksum text file in Windows using Java?","I wanted to verify the sha256-checksum of the Fedora ISO image I have downloaded with its checksum text file. I have the iso and checksum text file both on a directory. And I followed the Fedora verifying downloaded image (https://docs.fedoraproject.org/en-US/Fedora/22/html/Installation_Guide/sect-verifying-images.html) instructions for Windows and got an error ""The file is too long, this operation is currently limited to supporting files less than 2 gigabytes in size"" while using Windows8.1 powershell. The ISO image file is 2.165GB size. Is there a Java api or tool available now so that I don't have to reinvent the wheel? I don't have a Linux/
","The Fedora documentation has you covered (and I guess you need a reference to it). 
Keep in mind that the documentation typically lags a little in the non-core items, so if you find that the latest release is missing a document that you've become accustomed to finding, look one or two releases back (as I did in this case).
There are both Windows GUI and Windows CLI verification methods, with references to a number of utilities to calculate the sha256sum
","793","<java><powershell><checksum><iso><sha256>","3","0","2","2015-09-01 20:12:31","32339885","1","1","","","","2015-09-01 19:42:55",""
"18379220","Shopify verify webhook call in Scala","I'm implementing a simple web service for a Shopify webhook to call using Play2. I want to verify the call is from Shopify using the 'X-Shopify-Hmac-Sha256' header parameter included.
The Shopify docs only contain a Ruby and Php samples, not too hard to translate I thought. Well I seem to be struggling.
Here is my simple Scala shopify util object:
    import play.api.mvc.Request
    import play.api.mvc.AnyContent
    import javax.crypto.Mac
    import javax.crypto.spec.SecretKeySpec
    import play.api.Logger
    import javax.crypto.SecretKey
    import org.apache.commons.codec.binary.Base64

    object ShopifyUtils {
        def verifyWebhookCall(request : Request[AnyContent], secretKey: String) : Boolean = {

          if (!request.headers.get(""X-Shopify-Hmac-Sha256"").isDefined)
              false
          else
          {
            val headerHash = request.headers.get(""X-Shopify-Hmac-Sha256"").getOrElse("""")
            val body = request.body.asJson.get.toString

            Logger.info(""json '"" + request.body.asJson.get.toString + ""' = "" + encode(secretKey, request.body.asJson.get.toString) );
            Logger.info(""body '"" + request.body.toString() + ""' = "" + encode(secretKey, request.body.toString) )

            Logger.info(""headerHash "" + headerHash);

            val calcHash = encode(secretKey, body)
            headerHash.equals(calcHash)
          }
        }

        def encode(key: String , data: String): String = {
          val sha256_HMAC = Mac.getInstance(""HmacSHA256"");
          val secret_key = new SecretKeySpec(key.getBytes(), ""HmacSHA256"");
          sha256_HMAC.init(secret_key);

          return new String( Base64.encodeBase64( sha256_HMAC.doFinal( data.getBytes ) ) ).trim
        }
    }

The hash I generate is never the same as the one Shopify sends. 
Either my shared secret key is wrong (which I don't see how it can be) or I'm not hashing the same content as Shopify does (I've tried various request.body output formats).
Any tips/guides/suggestions gratefully received.
Tim
","Just read in the raw POST body and run verify your signature against that. By grabbing the body as JSON and turning it into a string you might be subtly manipulating the response we send you.
Here's how I've done it for a few projects where I've worked with webhooks (in ruby):
class WebhookVerifier
  attr_accessor :expected_hmac, :data
  def initialize(options = {})
    @expected_hmac = options.fetch(:expected_hmac, '')
    content = options.fetch(:content, StringIO.new)
    content.rewind
    @data = content.read
  end    

  def valid?
    digest = OpenSSL::Digest::Digest.new('sha256')
    calculated_hmac = Base64.encode64(OpenSSL::HMAC.digest(digest, ShopifyApp.configuration.secret, data)).strip
    calculated_hmac == expected_hmac
  end
end

","793","<scala><playframework-2.0><shopify><sha256>","1","2","2","2018-07-04 16:02:27","18383535","0","","509357","","2018-07-04 16:02:27","2013-08-22 11:32:45",""
"18379220","Shopify verify webhook call in Scala","I'm implementing a simple web service for a Shopify webhook to call using Play2. I want to verify the call is from Shopify using the 'X-Shopify-Hmac-Sha256' header parameter included.
The Shopify docs only contain a Ruby and Php samples, not too hard to translate I thought. Well I seem to be struggling.
Here is my simple Scala shopify util object:
    import play.api.mvc.Request
    import play.api.mvc.AnyContent
    import javax.crypto.Mac
    import javax.crypto.spec.SecretKeySpec
    import play.api.Logger
    import javax.crypto.SecretKey
    import org.apache.commons.codec.binary.Base64

    object ShopifyUtils {
        def verifyWebhookCall(request : Request[AnyContent], secretKey: String) : Boolean = {

          if (!request.headers.get(""X-Shopify-Hmac-Sha256"").isDefined)
              false
          else
          {
            val headerHash = request.headers.get(""X-Shopify-Hmac-Sha256"").getOrElse("""")
            val body = request.body.asJson.get.toString

            Logger.info(""json '"" + request.body.asJson.get.toString + ""' = "" + encode(secretKey, request.body.asJson.get.toString) );
            Logger.info(""body '"" + request.body.toString() + ""' = "" + encode(secretKey, request.body.toString) )

            Logger.info(""headerHash "" + headerHash);

            val calcHash = encode(secretKey, body)
            headerHash.equals(calcHash)
          }
        }

        def encode(key: String , data: String): String = {
          val sha256_HMAC = Mac.getInstance(""HmacSHA256"");
          val secret_key = new SecretKeySpec(key.getBytes(), ""HmacSHA256"");
          sha256_HMAC.init(secret_key);

          return new String( Base64.encodeBase64( sha256_HMAC.doFinal( data.getBytes ) ) ).trim
        }
    }

The hash I generate is never the same as the one Shopify sends. 
Either my shared secret key is wrong (which I don't see how it can be) or I'm not hashing the same content as Shopify does (I've tried various request.body output formats).
Any tips/guides/suggestions gratefully received.
Tim
","Thanks to csaunders for pointing me in the right direction.
I was using the default BodyParser AnyContent that implicitly converts the response body to json when the Content-type of the request specifies 'application/json'.
I had to modify my controller object to specify the 'raw' BodyParser:
    import play.api._
    import play.api.libs.iteratee.Enumerator
    import play.api.mvc.SimpleResult
    import play.api.mvc.ResponseHeader
    import play.api.libs.json._
    import play.Application
    import play.api.mvc._

    import javax.crypto.Mac
    import javax.crypto.spec.SecretKeySpec
    import play.api.Logger
    import javax.crypto.SecretKey
    import org.apache.commons.codec.binary.Base64

    object Purchase extends Controller { 

      val shopifyAppSecretKey = ""11111111111111111111111111111111""

      def processPurchase() = Action( parse.raw ) {request =>

        val bodyRaw = request.body.asBytes(3000).getOrElse(Array[Byte]())
        val calculatedHash = encodeByteArray(shopifyAppSecretKey, bodyRaw)
        val shopifyHash = request.headers.get(""X-Shopify-Hmac-Sha256"").getOrElse("""")

        Logger.info(""keys '"" + shopifyHash + ""' || '"" + calculatedHash + ""' "" + calculatedHash.equals(shopifyHash))

        val json: JsValue = Json.parse( new String(bodyRaw) )

        Ok( ""Ok"" ).as(HTML)
      }

      def encodeByteArray(key: String , data: Array[Byte]): String = {
        val sha256_HMAC = Mac.getInstance(""HmacSHA256"");
        val secret_key = new SecretKeySpec(key.getBytes(), ""HmacSHA256"");
        sha256_HMAC.init(secret_key);

        return new String( Base64.encodeBase64( sha256_HMAC.doFinal( data ) ) ).trim
      }
    }

Using the 'raw' BodyParser means that you have to convert the byte array to a string yourself and then parse that string manually to get your json but thats no real problem.
Now all is working as expected.
Thanks,
Tim
","793","<scala><playframework-2.0><shopify><sha256>","1","1","2","2018-07-04 16:02:27","18383535","0","","509357","","2018-07-04 16:02:27","2013-08-22 11:32:45",""
"25911334","C# HMAC SHA-256-128 Calculation result not as expected","I'm trying to create a signature to our bank from a specified key but my results is not the same as the info I got from the bank. Can anyone see what I am doing wrong?
Link to bank for reference (text in Swedish)
Example data are inside the citationmarks .. :)
Filedata:           ""00000000""
Key:                ""1234567890ABCDEF1234567890ABCDEF""
Expected result:    ""FF365893D899291C3BF505FB3175E880""
My result:          ""05CD81829E26F44089FD91A9CFBC75DB""
My code:
        // Using ASCII teckentabell
        System.Text.ASCIIEncoding encoding = new System.Text.ASCIIEncoding();

        // Using HMAC-SHA256
        byte[] keyByte = encoding.GetBytes(""1234567890ABCDEF1234567890ABCDEF"");
        HMACSHA256 hmacsha256 = new HMACSHA256(keyByte);

        byte[] messageBytes = encoding.GetBytes(""00000000"");
        byte[] hashmessage = hmacsha256.ComputeHash(messageBytes);

        byte[] truncArray = new byte[16];
        Array.Copy(hashmessage, truncArray, truncArray.Length);

        // conversion of byte to string            
        string sigill = ByteArrayToString(truncArray);

        // show sigill
        MessageBox.Show(""Sigill:\n"" + sigill, ""Sigill"", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

","Key is a string of hexadecimal digits representing a binary key, not a string of individual characters.
For the correct output you need to convert it to an array of bytes:
var key = ""1234567890ABCDEF1234567890ABCDEF"";
byte[] keyByte = new byte[key.Length / 2];

for (int i = 0; i < key.Length; i += 2)
{
   keyByte[i / 2] = Convert.ToByte(key.Substring(i, 2), 16);
}

HMACSHA256 hmacsha256 = new HMACSHA256(keyByte);

byte[] messageBytes = encoding.GetBytes(""00000000"");
byte[] hashmessage = hmacsha256.ComputeHash(messageBytes);

byte[] truncArray = new byte[16];
Array.Copy(hashmessage, truncArray, truncArray.Length);

","787","<c#><hmac><sha256>","4","4","1","2014-09-18 11:28:59","25911485","2","1","","","","2014-09-18 11:21:58",""
"30654044","error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed","I have a FreeBSD server
FreeBSD hotspot.brightlan.net 6.2-RELEASE-p6 FreeBSD 6.2-RELEASE-p6 #0: Sat Jul 21 13:42:25 EDT 2007
On this server I have an application in php using curl which connects to Authorize.net through their api. Recently they updated their SSL certificates to support sha256 and hence the SSL certificate also changed. After this change the application is failing to connecting. If I do a 
curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE)
it connects successfully but I want to go with a full verification of the server during SSL handshake.
I have noted the same gets connected from a different Linux ubuntu server after updating ca certificate file by specifying using CURLOPT_CAINFO option.
But on this FreeBSD, it does not get connected. I have also noted that the SSL certificate is issued on a wildcard character i.e. *.authorize.net. Because of this, on the ubuntu server also, I had to disable CURLOPT_SSL_VERIFYHOST. But on this FreeBSD server, it is simply not working with this option even.
The server is a bit old with php version 
PHP 4.4.7 (cgi-fcgi) (built: May  4 2007 13:35:10)
Any help is appreciated.
","Note that your are running a very old system which is no longer supported and has probably accumulated lots of security issues. I'm not sure, but I think this version of FreeBSD comes with openssl 0.9.7 which is too old to support certificates signed with SHA-256.  
Check your version with openssl version and see https://support.globalsign.com/customer/portal/articles/1499561-sha-256-compatibility
","786","<freebsd><authorize.net><sha256>","0","0","2","2015-06-23 07:20:50","30996291","0","","","","","2015-06-04 20:59:33",""
"30654044","error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed","I have a FreeBSD server
FreeBSD hotspot.brightlan.net 6.2-RELEASE-p6 FreeBSD 6.2-RELEASE-p6 #0: Sat Jul 21 13:42:25 EDT 2007
On this server I have an application in php using curl which connects to Authorize.net through their api. Recently they updated their SSL certificates to support sha256 and hence the SSL certificate also changed. After this change the application is failing to connecting. If I do a 
curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE)
it connects successfully but I want to go with a full verification of the server during SSL handshake.
I have noted the same gets connected from a different Linux ubuntu server after updating ca certificate file by specifying using CURLOPT_CAINFO option.
But on this FreeBSD, it does not get connected. I have also noted that the SSL certificate is issued on a wildcard character i.e. *.authorize.net. Because of this, on the ubuntu server also, I had to disable CURLOPT_SSL_VERIFYHOST. But on this FreeBSD server, it is simply not working with this option even.
The server is a bit old with php version 
PHP 4.4.7 (cgi-fcgi) (built: May  4 2007 13:35:10)
Any help is appreciated.
","I have finally found that the version of the openssl version is behind the problem. SHA256 was not supported until 0.9.8o. So I tried upgrading openssl to latest one. As my system is quite old, latest versions are not being supported. 
So I started compiling 0.9.8o successfully but it breaks SSH as is internally used. So my objective now is to upgrade openssl to 0.9.8o without breaking SSH server.
I started digging down a bit and found out ways to link different version of Openssl as was also mentioned by ""Steffen Ullrich"" above. I was able to compile and link with openssl 0.9.8o both statically and dynamically and found below observation.
when we compile php with openssl enabled, curl does not use its linked openssl to connect to the site. Here I had compiled both php as well as curl with separate versions of openssl(I have even tried compiling and linking curl with static openssl). The version of openssl which was compiled with php use to take precedence while connecting to the site and hence fails to connect in my case(due to SHA256 ssl certificate & php-openssl-0.9.7e). 
However, if I recompile php with higher version of openssl(0.9.8o), then it is able to connect.
Also, if I compile php without enabling openssl, then curl is able to connect as it uses its linked openssl 0.9.8o.
I do not know if this is a bug or was meant to be like this in php, or maybe fixed in latest available versions of php/curl. 
But I think from curl's perspective, it is not the correct thing to use the version of openssl linked with php for connecting to the site. It should use its linked openssl version(0.9.8o) for connecting to the site. While if anybody is connecting to the website the version of openssl(0.9.7e) linked to php should be used.
","786","<freebsd><authorize.net><sha256>","0","0","2","2015-06-23 07:20:50","30996291","0","","","","","2015-06-04 20:59:33",""
"12866168","Debugging a SHA-256 implementation","I've been working on a SHA-256 implementation using MASM32, and got some source done.  However, I can't get it working correctly and have looked at it, rewrote bits of it, and copied some source into the inline Delphi ASM and got it running perfectly, yet my original ASM source has problems.  Given that I'm not incredibly experienced with it, Would it be possible for someone to look at the source and tell me if they see something I'm missing?  I already did a Delphi implementation and have it working perfectly, so I know it's not the algorithm itself at fault but the ASM code itself.
I was planning on optimizing tasks after I simply got it working.  But bear in mind that I am still learning (self-taught), so if you see something I do that is on the stupid side in this source, I'd like to be able to learn, too.  But my main concern is getting it working since I'm not seeing where the error(s) are.
(Removed the ASM code for space concerns, since I know the problem now)
Edit: I figured out what the problem was.  Which leads into the next logical question since I don't know: Why did this code cause a problem?
Changing the following at the end of the SHA256Loop macro:
ADD  h, ECX  
ADD  h, EBX  ; h := t1 + t2;

To this:
ADD  ECX, EBX  ; h := t1 + t2;
MOV  h, ECX

Fixed it.  Why couldn't I do two ADD instructions to the memory and get the same result as the ADD to register and then a MOV to memory?
","Your first example with two ADD instructions depends on the previous contents of h. The second example is independent of the previous contents of h. If the value of h is not guaranteed to be zero, then those two examples will behave differently.
","786","<debugging><assembly><sha256><masm32>","0","1","1","2012-10-13 02:21:42","12869395","0","","886783","","2012-10-13 02:12:10","2012-10-12 19:55:12",""
"7980283","How to decrypt a DRM video file with SHA-256 Algorithm in Android and play the same file","I have a problem that I have a DRM video file which is encrypted with SHA-256(512 bytes) algorithm I have to decrypt it and play the same video. I am new to Android that's why I can't understand it and unable to proceed further regarding the same. Please suggest me the Solution for this or any tutorial for understand the same. Actually my client's need is following:
""MPEG video
The transport for this is described below.  The video is DRM’d so that it cannot be widely copied.The DRMoverwrites the header of the video file and addsthe metadata to the end of the file.  The file structurelooks like:
<video file><metadata><metadata_offset(i8)><type(i4)>

The first 2^21 bytes of the file will be xor-ed with the following pattern.  SHA-256 (512-bit mode) is used to make a 2^11 byte pattern.  The first SHA call will be made on “xyzzy” + the FB username + the UUID of the video + “@a2+;%d3-“ .  
The following calls will use the output of the previous stage plus two ASCII bytes representing a counter that starts at 1 and goes to 2^5.  The pattern is then xor-ed across the file 2^10 times.
The type is a four byte integer in network byte order.  It has to be zero for this release.""
I am unable to understand what I should do for the above. Please suggest me for the same.
","","779","<android><drm><sha256>","1","","0","2011-11-02 12:27:11","","3","","","","","2011-11-02 12:27:11",""
"23776432","How can I Encode String , ByteArray in ActionScript as VB or C#","I want to hash password using mx.utils.SHA256 or SHA256 algo based password in ActionScript for my SQLite local database hashed password. So that I can match the inserted password with the database stored HashedPassword. For this I am using Salt too.
I want the same things with ActionScript which I have done in VB code. 
How can I change the following in ActionScript from VB.NET?
 Encoding.UTF8.GetBytes(""String"") 

String Salt - type parameter.
System.Text.Encoding.Default.GetBytes(Salt.ToString.ToCharArray))

byte HashOut - type parameter.
Convert.ToBase64String(HashOut)

Array.Copy() method Copies one Byte Array to another according to specified length:
 Array.Copy(Data, DataAndSalt, Data.Length) // concatenation of Arrays in context of `ActionScript` 

","Fairly simple process, but the documentation of Actionscript's SHA256 class is pretty lackluster, What you need to do is:

Write your salted string to a ByteArray
Call SHA256.computeDigest()

EG:
public function hashMyString(mySaltedInput:String):String
{
    var bytes:ByteArray = new ByteArray;
    bytes.writeUTFBytes(mySaltedInput):
    return SHA256.computeDigest(bytes);
}

","777","<c#><vb.net><actionscript-3><apache-flex><sha256>","2","2","2","2015-03-17 15:34:50","23931866","2","","1825888","","2014-05-22 06:36:29","2014-05-21 07:16:04",""
"23776432","How can I Encode String , ByteArray in ActionScript as VB or C#","I want to hash password using mx.utils.SHA256 or SHA256 algo based password in ActionScript for my SQLite local database hashed password. So that I can match the inserted password with the database stored HashedPassword. For this I am using Salt too.
I want the same things with ActionScript which I have done in VB code. 
How can I change the following in ActionScript from VB.NET?
 Encoding.UTF8.GetBytes(""String"") 

String Salt - type parameter.
System.Text.Encoding.Default.GetBytes(Salt.ToString.ToCharArray))

byte HashOut - type parameter.
Convert.ToBase64String(HashOut)

Array.Copy() method Copies one Byte Array to another according to specified length:
 Array.Copy(Data, DataAndSalt, Data.Length) // concatenation of Arrays in context of `ActionScript` 

","I have Created the whole code according to my requirements Own My Own , Which was done in the VB  and now both are producing the same results . 

Encoding.UTF8.GetBytes(""String"") VB code in ActionScript is
yourByteArray.writeMultiByte(""String"", ""iso-8859-1"");
System.Text.Encoding.Default.GetBytes(Salt.ToString.ToCharArray)) 
VB code in ActionScript is 
byterrSalt.writeMultiByte(Salt,Salt);
Array.Copy(Data, DataAndSalt, Data.Length) 
it was for concatenation of byte array which has been done in
actions script is done by

var DataAndSalt:ByteArray = new ByteArray();
DataAndSalt.writeBytes(Data);
DataAndSalt.writeBytes(Salt);
DataAndSalt ByteArray Will have both byteArray now Data + Salt 
Data is ByteArray and you can Concatenate Many Byte Arrays  by .writeBytes(YourByteArray)

. Convert.ToBase64String(HashOut) is done By the following fucntion
private static const BASE64_CHARS:String = ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="";



public static function encodeByteArray(data:ByteArray):String {
        // Initialise output
        var output:String = """";

        // Create data and output buffers
        var dataBuffer:Array;
        var outputBuffer:Array = new Array(4);

        // Rewind ByteArray
        data.position = 0;

        // while there are still bytes to be processed
        while (data.bytesAvailable > 0) {
            // Create new data buffer and populate next 3 bytes from data
            dataBuffer = new Array();
            for (var i:uint = 0; i < 3 && data.bytesAvailable > 0; i++) {
                dataBuffer[i] = data.readUnsignedByte();
            }

            // Convert to data buffer Base64 character positions and 
            // store in output buffer
            outputBuffer[0] = (dataBuffer[0] & 0xfc) >> 2;
            outputBuffer[1] = ((dataBuffer[0] & 0x03) << 4) | ((dataBuffer[1]) >> 4);
            outputBuffer[2] = ((dataBuffer[1] & 0x0f) << 2) | ((dataBuffer[2]) >> 6);
            outputBuffer[3] = dataBuffer[2] & 0x3f;

            // If data buffer was short (i.e not 3 characters) then set
            // end character indexes in data buffer to index of '=' symbol.
            // This is necessary because Base64 data is always a multiple of
            // 4 bytes and is basses with '=' symbols.
            for (var j:uint = dataBuffer.length; j < 3; j++) {
                outputBuffer[j + 1] = 64;
            }

            // Loop through output buffer and add Base64 characters to 
            // encoded data string for each character.
            for (var k:uint = 0; k < outputBuffer.length; k++) {
                output += BASE64_CHARS.charAt(outputBuffer[k]);
            }
        }

        // Return encoded data
        return output;

    }


Thank You 
Udit Bhardwaj
","777","<c#><vb.net><actionscript-3><apache-flex><sha256>","2","0","2","2015-03-17 15:34:50","23931866","2","","1825888","","2014-05-22 06:36:29","2014-05-21 07:16:04",""
"1411639","SHA256 For Ruby Not Working On Mac","On my mac 10.5 when I use the command OpenSSL::Digest::Digest.new('sha256') I get Unsupported digest algorithm (sha256). Does anyone know how to solve this?
","The OS X supplied Ruby 1.8.6p287 does not seem to have this compiled in, however the one bundled with MacPorts, 1.8.7p160 does have it.
It's generally better to use the MacPorts version since it is more up-to-date.
","776","<ruby><sha256>","2","1","1","2010-12-19 00:13:19","","0","0","","","","2009-09-11 15:31:27",""
"35472403","Why PBKDF2 SHA256 generated hash value not equal between C and java","I have a Android client and Server, the client needs to validate the session key before communication or processing data with the server. The client was Android app and its encryption method was wrote in Java, the server`s was wrote in C.
I call the session key as ""magic token"", and the magic token is generated by PBKDF2 algorithm with 1000 iterations of SHA256 hash on server. The client fetch the magic token from server and the client itself needs to regenerate the magic token again in order to compare the fetched one and generated one. if they are equal, means the session key is valid and the client can go further operations. 
But my problem is when I trying to generate the magic token using the same algorithm, salt, iteration count with server side, the generated hash value are not the same. Maybe it caused by PBKDF2 algorithm or sha256 are not exactly same for different platforms. I feel really confused and anyone can help me find out where the error comes from? 
NOTE, both C and Java source code are open sourced project hosted on github as linked below. Thanks in advance.
C language style as below
static unsigned char salt[8] = { 0xda, 0x90, 0x45, 0xc3, 0x06, 0xc7, 0xcc, 0x26 };

    int
seafile_derive_key (const char *data_in, int in_len, int version,
                    unsigned char *key, unsigned char *iv)
{
    if (version == 2) {
        PKCS5_PBKDF2_HMAC (data_in, in_len,
                           salt, sizeof(salt),
                           KEYGEN_ITERATION2,
                           EVP_sha256(),
                           32, key);
        PKCS5_PBKDF2_HMAC ((char *)key, 32,
                           salt, sizeof(salt),
                           10,
                           EVP_sha256(),
                           16, iv);
        return 0;
    } else if (version == 1)
        return EVP_BytesToKey (EVP_aes_128_cbc(), /* cipher mode */
                               EVP_sha1(),        /* message digest */
                               salt,              /* salt */
                               (unsigned char*)data_in,
                               in_len,
                               KEYGEN_ITERATION,   /* iteration times */
                               key, /* the derived key */
                               iv); /* IV, initial vector */
    else
        return EVP_BytesToKey (EVP_aes_128_ecb(), /* cipher mode */
                               EVP_sha1(),        /* message digest */
                               NULL,              /* salt */
                               (unsigned char*)data_in,
                               in_len,
                               3,   /* iteration times */
                               key, /* the derived key */
                               iv); /* IV, initial vector */
}

        void
    seafile_generate_magic (int version, const char *repo_id,
                            const char *passwd, char *magic)
    {
        GString *buf = g_string_new (NULL);
        unsigned char key[32], iv[16];

        /* Compute a ""magic"" string from repo_id and passwd.
         * This is used to verify the password given by user before decrypting
         * data.
         */
        g_string_append_printf (buf, ""%s%s"", repo_id, passwd);

        seafile_derive_key (buf->str, buf->len, version, key, iv);

        g_string_free (buf, TRUE);
        rawdata_to_hex (key, magic, 32);
    }

the complete file for C can be found on github
and my java (Android) language style as below
private static String generateMagic(String repoID, String password, int version) throws NoSuchAlgorithmException, InvalidKeySpecException, UnsupportedEncodingException, SeafException, NoSuchPaddingException, InvalidAlgorithmParameterException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException {
    if (version != 1 && version != 2) {
        throw SeafException.unsupportedEncVersion;
    }

    String src = repoID + password;
    char[] salt = {0xda, 0x90, 0x45, 0xc3, 0x06, 0xc7, 0xcc, 0x26};
    final byte[] slt = new String(salt).getBytes(""UTF-8"");
    // If you use version 1.47 or higher of SpongyCastle, you can invoke PBKDF2WithHmacSHA256 directly.
    // In versions of BC < 1.47, you could not specify SHA256 digest and it defaulted to SHA1.
    // see http://stackoverflow.com/questions/6898801/how-to-include-the-spongy-castle-jar-in-android
    PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator(new SHA256Digest());
    gen.init(PBEParametersGenerator.PKCS5PasswordToUTF8Bytes(src.toCharArray()), slt, ITERATION_COUNT);
    byte[] keyBytes;

    if (version == 2) {
        keyBytes = ((KeyParameter) gen.generateDerivedMacParameters(KEY_LENGTH * 8)).getKey();
    } else
        keyBytes = ((KeyParameter) gen.generateDerivedMacParameters(16 * 8)).getKey();

    // final SecretKey key = deriveKeyPbkdf2(slt, src, version);
    // final byte[] bytes = key.getEncoded();
    return toHex(keyBytes);
}

the complete file for Java can be found on github
EDIT
Finally, I found the error, it was caused by char[] salt,
the correct one as 
byte[] salt = {(byte) 0xda, (byte) 0x90, (byte) 0x45, (byte) 0xc3, (byte) 0x06, (byte) 0xc7, (byte) 0xcc, (byte) 0x26};

","","775","<java><c><sha256><encryption-symmetric><pbkdf2>","4","","0","2016-02-18 04:22:38","","2","1","3962551","","2016-02-18 04:22:38","2016-02-18 03:41:51",""
"34976389","SmartScreen blocks binary signed with SHA-2","I have my binary signed with valid SHA-2 certificates (both Authenticode and timestamp), but SmartScreen on Windows 10 still blocks it and Edge reports that ""The signature of this file is corrupt or invalid"".
I've checked other binaries from popular sources, like Firefox. They still sign with SHA1 timestamp certificate, but Windows doesn't report any problems. Can someone advice what's happening?
Link to my binary:
https://dl.dropboxusercontent.com/u/21463705/Stackoverflow/Win32Project1.exe
My certificate screenshot
","I am having much the same problem and haven't yet puzzled out the solution. I think the reason that other binaries signed with SHA1 work is because they were signed before 1st January 2016. The Critical Service Announcement we received states that:

Files signed previously with a SHA-1 certificate will continue to work on Windows 7 and above for an additional year as long as they were time-stamped before January 1, 2016.

and further that,

Starting on Jan. 1, 2017, all SHA-1 signed files will be blocked on Windows 7 and above, regardless of when they were time-stamped.

","774","<windows><sha1><sha256><signing>","3","0","2","2016-03-02 08:03:18","35455143","0","1","","","","2016-01-24 13:30:54",""
"34976389","SmartScreen blocks binary signed with SHA-2","I have my binary signed with valid SHA-2 certificates (both Authenticode and timestamp), but SmartScreen on Windows 10 still blocks it and Edge reports that ""The signature of this file is corrupt or invalid"".
I've checked other binaries from popular sources, like Firefox. They still sign with SHA1 timestamp certificate, but Windows doesn't report any problems. Can someone advice what's happening?
Link to my binary:
https://dl.dropboxusercontent.com/u/21463705/Stackoverflow/Win32Project1.exe
My certificate screenshot
","Our installers were suffering from the same issue. Even when I only SHA-2-signed using an SHA-2 certificate, Edge still reported the signature to be invalid.
We were using the same code signing authority, ""VeriSign Class 3 Code Signing 2010 CA"", which itself is signed using an SHA-1 signature:

This seems to be the cause of SmartScreen's ""The signature of this file is corrupt or invalid"" error message.
I contacted Symantec (they run VeriSign now) and they issued a replacement certificate for us. Unlike the previous one, the one is signed by ""Symantec Class 3 SHA256 Code Signing CA"" and executables signed with in no longer trigger the ""signature corrupt or invalid"" error in SmartScreen.

I still get a warning because our installers don't have enough reputation yet, but that's a completely different issue.
Update: Symantec is now discontinuing the use of SHA-1 Intermediate CA Certificates used for signing SHA-256 Code Signing certificates.
","774","<windows><sha1><sha256><signing>","3","4","2","2016-03-02 08:03:18","35455143","0","1","","","","2016-01-24 13:30:54",""
"31537166","SHA256 in Mysql 5.1.69","we use a MySQL 5.1.69 and want to change a table with MD5 hashed values by SQL-Script to a sha256 hashed values. 
The MySQL functions MD5 and SHA1 works, but the MySQL 5.1.69 doesn't support SHA2. How can I install this function to the Database??
thank you!
","","765","<mysql><sha256><mysql-5.1>","2","","0","2015-07-21 10:57:16","","3","","","","","2015-07-21 10:57:16",""
"39067469","Soap signature with WebServicesClientProtocol and sha256","I am trying to implement a SOAP client using Web reference. Resulting signature is valid but uses sha1 algorithm.
Is there a way how to use sha256 instead? 
Several solutions can be found but they all work with XmlDocument (SignedXml) directly.
Following code sets SignatureMethod to sha256 but sha1 is used anyway.
var client = new EetRef.EETService();// Inherits from Microsoft.Web.Services3.WebServicesClientProtocol
var cert = new X509Certificate2(""01000004.p12"", ""eet"");
var token = new X509SecurityToken(cert);
var messageToken = new MessageSignature(token);
//Trying to register sha256 provider.
CryptoConfig.AddAlgorithm(typeof(RsaPkCs1Sha256SignatureDescription), ""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"");
//messageToken.SignedInfo.SignatureMethod is null
messageToken.SignedInfo.SignatureMethod = ""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"";
client.RequestSoapContext.Security.Tokens.Add(token);
client.RequestSoapContext.Security.Elements.Add(messageToken);
client.CallSomeMethod();

Resulting soap:Header
<soap:Header>
    <wsa:Action wsu:Id=""Id-9ef8e35c-6107-4d31-83ba-6006b0e76557"">http://fs.mfcr.cz/eet/OdeslaniTrzby</wsa:Action>
    <wsa:MessageID wsu:Id=""Id-7e6b8643-0760-4356-8062-c914a2b0b5a9"">urn:uuid:575cf2f5-296b-4dff-ab3d-0d3bf75c72a5</wsa:MessageID>
    <wsa:ReplyTo wsu:Id=""Id-abc8e30a-5a23-49c6-9ac3-d53c652e21e1"">
      <wsa:Address>http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous</wsa:Address>
    </wsa:ReplyTo>
    <wsa:To wsu:Id=""Id-d8a0047e-48f2-4bd7-8d16-c89ff1cdf128"">https://pg.eet.cz/eet/services/EETServiceSOAP/v2</wsa:To>
    <wsse:Security soap:mustUnderstand=""1"">
      <wsu:Timestamp wsu:Id=""Timestamp-9a3390ec-8f6d-4bf9-8d8f-b3d591ff599f"">
        <wsu:Created>2016-08-21T17:53:50Z</wsu:Created>
        <wsu:Expires>2016-08-21T17:58:50Z</wsu:Expires>
      </wsu:Timestamp>
      <wsse:BinarySecurityToken ValueType=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3"" EncodingType=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary"" xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"" wsu:Id=""SecurityToken-6d5709b8-0ba3-413a-ba48-942ad6e763f1"">MIID7DCCAtSgAwIBAgIEAQAABDANBgkqhkiG9w0BAQsFADBYMQswCQYDVQQGEwJDWjEaMBgGA1UEAwwRR0ZSIEVFVCB0ZXN0IENBIDExLTArBgNVBAoMJEdlbmVyw6FsbsOtIGZpbmFuxI1uw60gxZllZGl0ZWxzdHbDrTAeFw0xNjA1MTkxMjQ4MjVaFw0xODA1MTkxMjQ4MjVaMFQxCzAJBgNVBAYTAkNaMRMwEQYDVQQDDApDWjAwMDAwMDE5MRowGAYDVQQKDBFQcsOhdm5pY2vDoSBvc29iYTEUMBIGA1UEBRMLVDAwMDAwMDAwMDQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDFCIfnLl3YjNyxM3y2FAVovKQMetfyyj/lfLY3DoN1z/8gaVRfcqTZbwh9Btg0HafSmrWBvfgjEC/pG9HNawYZ9nPE+WIP9bXkoOfDTmmVtX4n6OLi2Di+U7+FmPJzykV0ujsOsfcGnQ0f63xZYoGJIwLJuz3gmAF//DfnOeTT7OUZeOKobBSYkQOKv1j05QqQZ7HP+5oq7+hNylFrjuEi5OAeVgJAYScE4COvcpqPKpb7OeR9f78knYFffg5zp/6bi6qkP5uGYEuuQvbW1mATjoqbAWz8c7HNA56uNFlz8V+z9bL0f/xwQjgy4d+5qelTX46tq0vJ2XM9dJaF8ytJAgMBAAGjgcEwgb4wHgYDVR0RBBcwFYETZXBvZHBvcmFAZnMubWZjci5jejAfBgNVHSMEGDAWgBR6WvwNy+w2pg3aaRlmjJvvgsOpNDAdBgNVHQ4EFgQU8oKPLNlNY0/h8jWEmz3EZ1O3bBMwTAYDVR0gBEUwQzBBBgpghkgBZQMCATACMDMwMQYIKwYBBQUHAgIwJRojVGVudG8gY2VydGlmaWthdCBKRSBQT1VaRSBURVNUT1ZBQ0kwDgYDVR0PAQH/BAQDAgbAMA0GCSqGSIb3DQEBCwUAA4IBAQBVulEYg6noEHqAW3DfNWLvW9XdHFZQj3L5EE3Nwdd0CtMZm4/RZ/CvSENkk+GWv0YCUqHPJzhcKs0NETMKW7L6CI+hY17rD5SHhuoCYzSMlcuMA6gZJr8wIxSWerQrvuZ4uAUMistWG9cgwETZjkGU9JK+H98wdAm2co7WaRweDsNx04aSXagUMDAmRY/jNe7c8/HvwIdnXftbIl56wbYlYiCIG2qS+6lVO+09EIEP40kz1PXlqFZbPLCSlT2YsYiqizfkCX/Ka+AebJykAQ3pOqD6PQ+Y2AMAIRX8AypcN6Yj9p+oof9rda8boA8rA7wwzlJs/+ipWt2ceqPPuL9x</wsse:BinarySecurityToken>
      <Signature xmlns=""http://www.w3.org/2000/09/xmldsig#"">
        <SignedInfo>
          <ds:CanonicalizationMethod Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#"" xmlns:ds=""http://www.w3.org/2000/09/xmldsig#"" />
          <SignatureMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#rsa-sha1"" />
          <Reference URI=""#Id-9ef8e35c-6107-4d31-83ba-6006b0e76557"">
            <Transforms>
              <Transform Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#"" />
            </Transforms>
            <DigestMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#sha1"" />
            <DigestValue>9NhSyQ67wzxd4lwaG+0PL6ztgMs=</DigestValue>
          </Reference>
          <Reference URI=""#Id-7e6b8643-0760-4356-8062-c914a2b0b5a9"">
            <Transforms>
              <Transform Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#"" />
            </Transforms>
            <DigestMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#sha1"" />
            <DigestValue>cLktOiRAwoDSlKMMM8++gqc/TS8=</DigestValue>
          </Reference>
          <Reference URI=""#Id-abc8e30a-5a23-49c6-9ac3-d53c652e21e1"">
            <Transforms>
              <Transform Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#"" />
            </Transforms>
            <DigestMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#sha1"" />
            <DigestValue>iOJ6axh+PU+ciOe+rSKpJbjlw9w=</DigestValue>
          </Reference>
          <Reference URI=""#Id-d8a0047e-48f2-4bd7-8d16-c89ff1cdf128"">
            <Transforms>
              <Transform Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#"" />
            </Transforms>
            <DigestMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#sha1"" />
            <DigestValue>yoaPc5P0gQPQipRira4FPlbUZlY=</DigestValue>
          </Reference>
          <Reference URI=""#Timestamp-9a3390ec-8f6d-4bf9-8d8f-b3d591ff599f"">
            <Transforms>
              <Transform Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#"" />
            </Transforms>
            <DigestMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#sha1"" />
            <DigestValue>eE1zIA5xoOnHWWbdb90X2bylySs=</DigestValue>
          </Reference>
          <Reference URI=""#Id-a5b17a91-2f27-4bb2-baa5-0f5afe812ace"">
            <Transforms>
              <Transform Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#"" />
            </Transforms>
            <DigestMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#sha1"" />
            <DigestValue>8iCvJtbGDPGtZ60+mwZof++5ym4=</DigestValue>
          </Reference>
        </SignedInfo>
        <SignatureValue>Hy8yVARA8FIUxXfxkGU3i3zp2CZN4xREGrdEY4RQxC11rwrX8+i1hkwkE/KapH97iFcx4ryBF9sy+K64SoDEndmAipgHcdeZhbixBKVno7eLPnnaKtSQf6YGRgaOcvLdf/ELwYNXQa5fMbBmlL5rX15fXhPhjEJagMidppiDCLy48MGfd3fGJEwAlu5I2hh8jjumzJuuzk7pLB7oY9sCArcNCFDY2FSHgnnFEDT0krHnmYUePJZ8qjSrZ44D0YdChC07l9GpXLaNxVklMIRqpa3ALjohVV7bkFSskbs+to8ueXq6cUX3kwUiRTyf3lHxKfVjLAX16fEbguHiZVHa3A==</SignatureValue>
        <KeyInfo>
          <wsse:SecurityTokenReference>
            <wsse:Reference URI=""#SecurityToken-6d5709b8-0ba3-413a-ba48-942ad6e763f1"" ValueType=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3"" />
          </wsse:SecurityTokenReference>
        </KeyInfo>
      </Signature>
    </wsse:Security>
  </soap:Header>
  <soap:Body wsu:Id=""Id-a5b17a91-2f27-4bb2-baa5-0f5afe812ace"">
  ...

The certificate is a playground certificate and can be downloaded from http://www.etrzby.cz/assets/cs/prilohy/CA_PG_v1.zip (The certificate supports SHA256)
","To anyone who is working on implementing EET (in Czech Republic). I did not found a solution using Web reference.
But there is an Apache licenced library on Github:
https://github.com/l-ra/openeet
","765","<c#><soap><digital-signature><sha256>","2","1","1","2016-09-10 19:59:14","","2","1","","","","2016-08-21 18:21:39",""
"38416392","How do you timestamp a sha256 certificate with a sha256 signature to secure Excel VBA Macro code in Excel 2013?","This quote was taken from an answer to another question about Excel Security settings. The answer proposed using a digital certificate to sign macros to resolve the security issue. Towards the end of the answer, it was noted that:
""When you digitally sign macros, it is important to obtain a time stamp. . .""
This is tricky in Office 2013, for a variety of reasons. First, there are two different ways to attach a signature to a spreadsheet. They are known as visible and invisible signatures. The visible signatures can be applied to the whole document using the File > Protect Workbook > Add a digital signature commands. To apply an invisible one to the VBA code alone, from the VBA editor, use the Tools > Digital Signature commands then Choose a certificate to sign with. 
It would be preferable to simply protect the VBA code and not the entire spreadsheet, because as soon as you run the macro, the code writes its output into the spreadsheet, and since it's a protected workbook, the code errors out and comes to a halt. This workbook was designed as a demonstration and was saved with a read only recommendation and requires a password to modify it. We want the user to be able to have the macro write to the spreadsheet, but not to save the file with changes under the same name. Since applying a digital signature to the VBA only protects the VBA, when it writes to the spreadsheet, there is no error.
The problem is obtaining a timestamp on the certificate protecting the VBA. 
There are a bewildering array of registry and group policy settings that affect timestamping, and it's quite unclear which settings are required to obtain a sha256 timestamp on my sha256 certificate when used to only protect the VBA. I've tried everything available that looks as though it could affect timestamping without joy.
While I've been able to sign spreadsheets and get that signature timestamped using the newer Office XAdES counter signature, the certificate used to sign the VBA project is not timestamped itself. 
Entries it the following registry key are required:
HKCU\Software\Microsoft\Office\15.0\Common\Signatures
I believe the following values in the key only affect timestamping the whole workbook XAdES signature.
MinXAdESLevel DWORD 2
TSALocation http://timestamp.comodoca.com/rfc3161
XAdESLevel DWORD 5
From experimenting, I have found that it was possible to get the cert protecting the VBA countersigned with a timestamp by using the following registry entries:
HKCU\Software\Microsoft\VBA\Security:
TimeStampURL http://timestamp.comodoca.com/rfc3161
TimeStampRetryCount DWORD 2
TimeStampRetryDelay DWORD 5
Unfortunately, I was only able to obtain a SHA1 timestamp when doing it this way. Soon, that will be like having no timestamp at all on Windows 10. 
Does anyone know how to get a SHA256 timestamp in this situation?
","By default, Office does not use a timestamping service when signing or validating code. Using a timestamping service usually takes more time than the default digital signing process. To use a timestamping service, Office needs to communicate with a certificate authority s timestamp server over the Internet to complete the action. You cannot timestamp a digital signature unless you are connected to the Internet.
There is no built-in Office user interface to use this option. To have Office use a timestamping service with all future digital signatures, you need to set these registry keys.
The values should be entered under ONE key. Please use the following instructions:
Create a Security key at the VBA level:
HKEY_CURRENT_USER\Software\Microsoft\VBA\Security
Add a String value Item to the Security key named TimeStampURL with the value set to the time stamp URL below.
The SHA-1 timestamping URL is timestamp.verisign.com/scripts/timstamp.dll
The timstamp.dll filename is required to conform to old MS-DOS naming convention).
The SHA-1 with RFC 3161 timestamping URL is http://sha1timestamp.ws.symantec.com/sha1/timestamp
The SHA-256 with RFC 3161 timestamping URL is http://sha256timestamp.ws.symantec.com/sha256/timestamp
Add a DWORD value item to the Security key named TimeStampRetryCount with the value data set to '3' (In my case I used 3 but you can pick a different number)
Add a DWORD value item to the Security key named TimeStampRetryDelay with the value data set to '3' (In my case I used 3 but you can pick a different number).
To reduce the likelihood that a malicious user can derive a digital certificate's private key from its public key, a commercially obtained digital certificate expires after one year. Office will not allow you to use an expired certificate to sign macros, and will also warn the end user when a digital signature for a file has expired. The end user will see a warning in the usual Digital Signature security warning, which indicates that the certificate is no longer trustworthy. The user can determine if the certificate has expired by looking in the Details dialog box for the certificate.
To prevent you from having to resign your software and Visual Basic for Applications projects every time your certificate expires, some commercial certificate authorities provide a timestamping service. If you use a timestamping service when signing code, a hash of your code is sent to a server to record a timestamp for your code. When using a timestamping service, a user's software can distinguish between code signed with an expired certificate that should not be trusted, and code that was signed with a certificate that was valid at the time the code was signed, but which has subsequently expired.
","764","<excel><vba><timestamp><certificate><sha256>","1","2","1","2016-12-14 14:33:54","","2","1","6595949","","2016-07-17 18:14:24","2016-07-16 22:57:41",""
"49831860","Signing a message with hmac and sha256 in dart","I try to generate a sha256 HMAC using a base64-decoded secret key on a message. I would like to use the dart language. In python, I could do it with the following code:
# PYTHON CODE
import hmac, hashlib, base64
...
message = 'blabla'
secret = 'DfeRt[...]=='
secret_b64 = base64.b64decode(secret)
signature = hmac.new(secret_b64, message, hashlib.sha256)
signature_b64 = signature.digest().encode('base64').rstrip('\n')

Here is what I tried with dart:
// DART CODE
import 'package:crypto/crypto.dart';
import 'dart:convert';
...
String message = 'blabla';
String secret = 'DfeRt[...]=='
var secret_b64 = BASE64.decode(secret);
var hmac = new Hmac(sha256, secret_b64);
// what now?

But then I don't know how to go on. I found some old example code which looks like the following
var message_byte = UTF8.encode(message);
hmac.add(message_byte);

However, the method ""add"" does not exist any more in the Hmac class. I also tried this, but I am not sure if this is correct
var message_byte = UTF8.encode(message);    
var signature = hmac.convert(message_byte);
var signature_b64 = BASE64.encode(signature.bytes);

Can someone help me out?
","If you have the whole 'message' available then just call convert(). If the message is large or in pieces then deal with it in chunks.
Your example is simple, when spelled out step by step.
  String base64Key = 'DfeRt...';
  String message = 'blabla';

  List<int> messageBytes = utf8.encode(message);
  List<int> key = base64.decode(base64Key);
  Hmac hmac = new Hmac(sha256, key);
  Digest digest = hmac.convert(messageBytes);

  String base64Mac = base64.encode(digest.bytes);

Please read the Effective Dart guide. Note how constants are now lower case, variables in Dart use camel case, etc
","763","<dart><base64><sha256><hmac>","0","1","1","2018-04-14 20:42:55","49836010","4","","6280224","","2018-04-14 15:08:09","2018-04-14 13:16:07",""
"26968594","pbkdf2_sha256 C# implementation","I've got a database where passwords are stored as pbkdf2_sha256. 
I want to create a tool (in C#) which should create new passwords.
My problem is: How can I encrypt the password in C#?
I found a Java-Class which works for me, but I can not use this sample in C#. Is there a smilar way?
I tried also other classes but they do not seem to work. 
EDIT:
I found this class for C#. But when I call the ValidatePassword-Method it returns false. (Password and Hash are correct). 
EDIT2:
I found also this C# class but it doesn't seem to work. What did I wrong?
Here is the code which I use:
var salt = ""FbSnXHPo12gb"";
var password = ""geheim"";
var interactions = 12000;


using (var hmac = new HMACSHA256())
{
    var df = new Pbkdf2(hmac, password, salt, interactions);
    Console.WriteLine(BitConverter.ToString(df.GetBytes(32)));
    Console.WriteLine(String.ByteArrayToString(df.GetBytes(32)));
    Console.WriteLine(UTF8Encoding.UTF8.GetString(df.GetBytes(32)));
    Console.WriteLine(Convert.ToBase64String(df.GetBytes(32)));
}

//hash I should get: 
//pbkdf2_sha256$12000$FbSnXHPo12gb$LEpQrzPJXMI0m3tQuIE5mknqCv1GWgT5X2rWyLHN0Xk=

//hash I get:
//Rc8oMeSrbWyIJ+aXvGegFowKcIlwk8eIRyxXUf/a+t0=

","Do not convert hexadecimal output to base-64 string but convert bytes to it directly. And also notice that you will get new bytes on each df.GetBytes call. Equivalent example would be:
var salt = ""FbSnXHPo12gb"";
var password = ""geheim"";
var interactions = 12000;


using (var hmac = new HMACSHA256())
{
    var df = new Pbkdf2(hmac, password, salt, interactions);
    Console.WriteLine(Convert.ToBase64String(df.GetBytes(32)));
}

//hash I should get: 
//pbkdf2_sha256$12000$FbSnXHPo12gb$LEpQrzPJXMI0m3tQuIE5mknqCv1GWgT5X2rWyLHN0Xk=

//hash I get:
//LEpQrzPJXMI0m3tQuIE5mknqCv1GWgT5X2rWyLHN0Xk=

Notice that Java class has a header (""pbkdf2_sha256$12000$FbSnXHPo12gb$"") while C# class only returns hash.
","760","<c#><security><sha256><password-encryption><pbkdf2>","1","3","2","2015-01-17 04:28:41","26998465","1","","3651723","","2014-11-18 07:44:14","2014-11-17 08:40:22",""
"26968594","pbkdf2_sha256 C# implementation","I've got a database where passwords are stored as pbkdf2_sha256. 
I want to create a tool (in C#) which should create new passwords.
My problem is: How can I encrypt the password in C#?
I found a Java-Class which works for me, but I can not use this sample in C#. Is there a smilar way?
I tried also other classes but they do not seem to work. 
EDIT:
I found this class for C#. But when I call the ValidatePassword-Method it returns false. (Password and Hash are correct). 
EDIT2:
I found also this C# class but it doesn't seem to work. What did I wrong?
Here is the code which I use:
var salt = ""FbSnXHPo12gb"";
var password = ""geheim"";
var interactions = 12000;


using (var hmac = new HMACSHA256())
{
    var df = new Pbkdf2(hmac, password, salt, interactions);
    Console.WriteLine(BitConverter.ToString(df.GetBytes(32)));
    Console.WriteLine(String.ByteArrayToString(df.GetBytes(32)));
    Console.WriteLine(UTF8Encoding.UTF8.GetString(df.GetBytes(32)));
    Console.WriteLine(Convert.ToBase64String(df.GetBytes(32)));
}

//hash I should get: 
//pbkdf2_sha256$12000$FbSnXHPo12gb$LEpQrzPJXMI0m3tQuIE5mknqCv1GWgT5X2rWyLHN0Xk=

//hash I get:
//Rc8oMeSrbWyIJ+aXvGegFowKcIlwk8eIRyxXUf/a+t0=

","I have a fork of Jither's PBKDF2 C# DeriveBytes code at my Github repository, including a PBKDF2-HMAC-SHA-256 variant, a large set of test vectors, and an interface that both generates hashes and can check the results, if that example helps you.
","760","<c#><security><sha256><password-encryption><pbkdf2>","1","0","2","2015-01-17 04:28:41","26998465","1","","3651723","","2014-11-18 07:44:14","2014-11-17 08:40:22",""
"35715853","Meteor,why same password after hashing, different string stored in database","I found that Meteor default use sha-256 to hash password. but I am confused that same password for each account after hashing become different string stored in the database. Anyone would tell the detail implementation, thx
","Per the Meteor docs, accounts-password uses bcrypt.
If you look at the source code of loginWithPassword, you should be able to find out where the salt is stored.  As a second source, read MasterAM's answer to Laravel & Meteor password hashing which indicates that Meteor from 2011 on uses $2y$ hash strings, i.e. PHP CRYPT_BLOWFISH, which uses

CRYPT_BLOWFISH - Blowfish hashing with a salt as follows: ""$2a$"", ""$2x$"" or ""$2y$"", a two digit cost parameter, ""$"", and 22 characters from the alphabet ""./0-9A-Za-z"". Using characters outside of this range in the salt will cause crypt() to return a zero-length string. The two digit cost parameter is the base-2 logarithm of the iteration count for the underlying Blowfish-based hashing algorithmeter and must be in range 04-31, values outside this range will cause crypt() to fail. Versions of PHP before 5.3.7 only support ""$2a$"" as the salt prefix: PHP 5.3.7 introduced the new prefixes to fix a security weakness in the Blowfish implementation. Please refer to » this document for full details of the security fix, but to summarise, developers targeting only PHP 5.3.7 and later should use ""$2y$"" in preference to ""$2a$"". 

Thus, look for the $2y$ string in the database, and extract the salt from it.
","759","<meteor><hash><passwords><sha256>","2","2","1","2016-03-02 05:18:20","35739065","3","","","","","2016-03-01 06:09:05",""
"48758588","How do I sign a sha-256 hash with a private key in C++","I've been trying to generate a signature for contents of a text file with RSA implementation in C++ but unsure of how to do that.
I've created a private/public key and I've generated a SHA-256 hash of the message contents of a text file with the library Message Digest. I was told to use modular exponentiation to sign the hash value but how do I do modexp a hash message if it is not a number?
For some reason, I can't wrap my head around using mod exponentiation for my SHA-256 message to get a signature with my private key.
","","755","<c++><encryption><hash><rsa><sha256>","0","","0","2018-02-13 02:32:38","","3","1","","","","2018-02-13 02:32:38",""
"11742460","openssl sha256 diff","I am using openssl 1.0.1c ,  linux x86_64
i am creating file contains ""hello"" (without new line character)

openssl dgst -sha256 hello_file


i get : 5891b5b522d5df086d0ff0b110fbd9d21bb4fc7163af34d08286a2e846f6be03


If i am using any other online calc (1 , 2 , 3  , 4 ,  5 (because of lack of reputation i cant do more hyperlinks)

i get : 2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824

The most confusing part is if i am trying online calculator with ""hello(new line character)""
then 

1 return : 5891b5b522d5df086d0ff0b110fbd9d21bb4fc7163af34d08286a2e846f6be03

and  it is exactly what i am getting with openssl. While all others return

2, 3, 4 , 5 : cd2eca3535741f27a8ae40c31b0c41d4057a7a7b912b33b9aed86485d1c84676

I knew about new line issue with echo, but i didn't knew that each file appended with the new line.So how can i get sha256 of file without new line character ? And what is wrong with all other calculators ?
Thanks in advance
Kirill

3    convertstring.com/Hash/SHA256
4    webutils.pl/index.php?idx=sha1
5    quickhash.com
","You are correct, your hello_file has a newline:
$ echo 'hello' > hello_file; openssl sha256 hello_file; xxd hello_file
SHA256(hello_file)= 5891b5b522d5df086d0ff0b110fbd9d21bb4fc7163af34d08286a2e846f6be03
0000000: 6865 6c6c 6f0a                           hello.

Removing the new line would depend on your editor, if your situation is similar to mine when i found this post, messing with a hash of a password you can just do something like this:
$ echo -n 'hello' > hello_file; openssl sha256 hello_file; xxd hello_file
SHA256(hello_file)= 2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824
0000000: 6865 6c6c 6f                             hello

You can do something like this to remove the last character(or two):
$ echo ""hello"" > hello_file; od -c hello_file; truncate hello_file --size=-1; od -c hello_file
0000000   h   e   l   l   o  \n
0000006
0000000   h   e   l   l   o
0000005

It looks as if the other calculators are appending a dos style carriage return + new line
$ echo -en 'hello\r\n' > hello_file; openssl sha256 hello_file; xxd hello_file
SHA256(hello_file)= cd2eca3535741f27a8ae40c31b0c41d4057a7a7b912b33b9aed86485d1c84676
0000000: 6865 6c6c 6f0d 0a                        hello..

","754","<openssl><sha256>","2","3","1","2016-09-20 19:12:00","17578180","0","","","","","2012-07-31 14:29:20",""
"45897556","SHA 256 of what?","https://www.binance.com/restapipub.html
I have been trying to code a trading bot. I have figured out the data and decision making part of the program. Now I need to code the making order part of the program.
I checked their website and found that I need to supply the sha256 of 

clientsecret|totalparams

and that 

totalParams is defined as the query string concatenated with the request body

So far this is what I have:
import requests

headers = {
    'X-MBX-APIKEY': MY_API_KEY,
}

data = [
  ('symbol', 'LTCBTC'),
  ('side', 'BUY'),
  ('type', 'LIMIT'),
  ('timeInForce', 'GTC'),
  ('quantity', '1'),
  ('price', '0.1'),
  ('recvWindow', '6000000'),
  ('timestamp', '1499827319559'),
  ('signature', NO_IDEA ),
]

requests.post('https://www.binance.com/api/v1/order', headers=headers, data=data)

I need to figure out what the signature and by extension totalparams would be.
","hashlib provides various hash function including sha256, e.g.:
 import hashlib
 hashlib.sha256('|'.join([clientsecret, totalparams]).encode('utf-8')).hexdigest()

","751","<python><request><sha256>","0","0","3","2017-08-26 17:26:13","45897593","0","","6436616","","2017-08-26 16:44:44","2017-08-26 16:36:22",""
"45897556","SHA 256 of what?","https://www.binance.com/restapipub.html
I have been trying to code a trading bot. I have figured out the data and decision making part of the program. Now I need to code the making order part of the program.
I checked their website and found that I need to supply the sha256 of 

clientsecret|totalparams

and that 

totalParams is defined as the query string concatenated with the request body

So far this is what I have:
import requests

headers = {
    'X-MBX-APIKEY': MY_API_KEY,
}

data = [
  ('symbol', 'LTCBTC'),
  ('side', 'BUY'),
  ('type', 'LIMIT'),
  ('timeInForce', 'GTC'),
  ('quantity', '1'),
  ('price', '0.1'),
  ('recvWindow', '6000000'),
  ('timestamp', '1499827319559'),
  ('signature', NO_IDEA ),
]

requests.post('https://www.binance.com/api/v1/order', headers=headers, data=data)

I need to figure out what the signature and by extension totalparams would be.
","The documentation just wants you to use the request body, the query string on the url, and the client secret together in one string (the query string and request body are concatenated together, and then the client secret is prepended with a | character).
You can use a prepared request; this gives you access to the query string and request body before sending:
import requests
import hashlib
from urllib.parse import urlparse

def calculate_signature(secret, data=None, params=None):
    # the actual URL doesn't matter as this request is never sent.
    request = requests.Request('POST', 'http://example.com',
                               data=data, params=params)
    prepped = request.prepare()
    query_string = urlparse(prepped.url).query
    # neither the URL nor the body are encoded to bytes yet
    total_params = query_string + prepped.body
    return hashlib.sha256('{}|{}'.format(secret, total_params).encode('ASCII')).hexdigest()

MY_API_KEY = 'XXX'
CLIENT_SECRET = 'XXX'

headers = {
    'X-MBX-APIKEY': MY_API_KEY,
}

data = [
  ('symbol', 'LTCBTC'),
  ('side', 'BUY'),
  ('type', 'LIMIT'),
  ('timeInForce', 'GTC'),
  ('quantity', '1'),
  ('price', '0.1'),
  ('recvWindow', '6000000'),
  ('timestamp', '1499827319559'),
]

data.append(
    ('signature', calculate_signature(CLIENT_SECRET, data=data)))

response = requests.post('https://www.binance.com/api/v1/order', data=data, headers=headers)

The prepared request object was only used to give you the request body to sign. Their API is a little convoluted in that they then expect you to append the signature to the request body itself rather than in a header (which is what most REST APIs do).
The calculate_signature() function produces the same results as the documentation:
>>> from urllib.parse import parse_qsl
>>> documentation_secret = 'NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j'
>>> requestBody = parse_qsl('symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTC&quantity=1&price=0.1&recvWindow=6000000&timestamp=1499827319559')
>>> calculate_signature(documentation_secret, requestBody)
'24b39c6588d0f2378a2b641e68c00e87bc81d997146ca3c5482337857a045041'
>>> queryString = parse_qsl('symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTC')
>>> requestBody = parse_qsl('quantity=1&price=0.1&recvWindow=6000000&timestamp=1499827319559')
>>> calculate_signature(documentation_secret, requestBody, queryString)
'77eb3b3727bc8c523646e2a35f52a8eb4cc4418b24c113f3ea0b3b59248579d4'

","751","<python><request><sha256>","0","2","3","2017-08-26 17:26:13","45897593","0","","6436616","","2017-08-26 16:44:44","2017-08-26 16:36:22",""
"45897556","SHA 256 of what?","https://www.binance.com/restapipub.html
I have been trying to code a trading bot. I have figured out the data and decision making part of the program. Now I need to code the making order part of the program.
I checked their website and found that I need to supply the sha256 of 

clientsecret|totalparams

and that 

totalParams is defined as the query string concatenated with the request body

So far this is what I have:
import requests

headers = {
    'X-MBX-APIKEY': MY_API_KEY,
}

data = [
  ('symbol', 'LTCBTC'),
  ('side', 'BUY'),
  ('type', 'LIMIT'),
  ('timeInForce', 'GTC'),
  ('quantity', '1'),
  ('price', '0.1'),
  ('recvWindow', '6000000'),
  ('timestamp', '1499827319559'),
  ('signature', NO_IDEA ),
]

requests.post('https://www.binance.com/api/v1/order', headers=headers, data=data)

I need to figure out what the signature and by extension totalparams would be.
","from the page you linked there is example of how to calculate it:
echo -n ""NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j|symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTC&quantity=1&price=0.1&recvWindow=6000000&timestamp=1499827319559"" | sha256sum
24b39c6588d0f2378a2b641e68c00e87bc81d997146ca3c5482337857a045041  -

simple function to calculate the sig without too many requests manipulations (because we know data is list of tuples it will be ordered and passed down correctly, if it was dict it might not preserve the order)
import hashlib
from urllib.parse import urlencode
data = [...]  # your params

def calc_sig(data, your_secret_key):
    sig_content = '%s|%s' % (your_secret_key, urlencode(data))
    return hashlib.sha256(sig_content).hexdigest()

","751","<python><request><sha256>","0","0","3","2017-08-26 17:26:13","45897593","0","","6436616","","2017-08-26 16:44:44","2017-08-26 16:36:22",""
"52421714","SHA-256 Hashing with secret key swift","I am a newbie to encryption and hashing algorithms. I need to Hash a string with a secret key using the SHA-256 algorithm. 
I tried multiple links from stack overflow and some other tutorials as well, Using those links,  the output I received in iOS is different from the output I am getting in Android. I have used the same string and secret key on both platforms.
Android Code Snippet -
MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
digest.update(secret_key);
byte[] channelKeyLong = digest.digest(message.getBytes(""utf-8""));

INPUT - 
secret_key = ""35285324354d562c245b031232115124372e5242394f51301f62224e1e432910""
message = ""Guest""

OUTPUT = ""99D71664BD5A35E0185C020BACB709DEB24A81555E275CA9328F8CB4E6F186C3""
iOS Code snipet  -
extension String {
  func generateSHA256(key: String) -> String {
        var digest = [UInt8](repeating: 0, count: Int(CC_SHA256_DIGEST_LENGTH))
        CCHmac(CCHmacAlgorithm(kCCHmacAlgSHA256), key, key.count, self, self.count, &digest)
        let data = Data(bytes: digest)
        return data.map { String(format: ""%02hhx"", $0) }.joined()
    }
}

INPUT - 
secret_key = ""35285324354d562c245b031232115124372e5242394f51301f62224e1e432910""
message = ""Guest""

IMPLEMENTATION  ->  OUTPUT =  message.generateSHA256(secret_key)
`OUTPUT = ""944a37b9768970c5da4f35295008470603391223a05d2b17eed668f1678d447c""'
Please suggest any other method which I can implement in iOS to produces the same output as received in android.
","Don't know about how the android doing SHA-256 but for the iOS I can say, the code you are doing is perfect and the results is right. You should update your question to: ""How can I get ""SHA-256 for Android same as the iOS""
You can check for SHA-256 HashMap online here 
Just enter the input and secret key and select SHA-256 from list.
secret_key = ""35285324354d562c245b031232115124372e5242394f51301f62224e1e432910""
message = ""Guest""

You will see the output, which is same as the one you getting from the iOS Code in your question.
944a37b9768970c5da4f35295008470603391223a05d2b17eed668f1678d447c

Hope it helps!
","749","<ios><swift><sha256>","0","1","2","2018-09-20 13:14:08","","5","0","6518479","","2018-09-20 09:46:46","2018-09-20 09:24:02",""
"52421714","SHA-256 Hashing with secret key swift","I am a newbie to encryption and hashing algorithms. I need to Hash a string with a secret key using the SHA-256 algorithm. 
I tried multiple links from stack overflow and some other tutorials as well, Using those links,  the output I received in iOS is different from the output I am getting in Android. I have used the same string and secret key on both platforms.
Android Code Snippet -
MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
digest.update(secret_key);
byte[] channelKeyLong = digest.digest(message.getBytes(""utf-8""));

INPUT - 
secret_key = ""35285324354d562c245b031232115124372e5242394f51301f62224e1e432910""
message = ""Guest""

OUTPUT = ""99D71664BD5A35E0185C020BACB709DEB24A81555E275CA9328F8CB4E6F186C3""
iOS Code snipet  -
extension String {
  func generateSHA256(key: String) -> String {
        var digest = [UInt8](repeating: 0, count: Int(CC_SHA256_DIGEST_LENGTH))
        CCHmac(CCHmacAlgorithm(kCCHmacAlgSHA256), key, key.count, self, self.count, &digest)
        let data = Data(bytes: digest)
        return data.map { String(format: ""%02hhx"", $0) }.joined()
    }
}

INPUT - 
secret_key = ""35285324354d562c245b031232115124372e5242394f51301f62224e1e432910""
message = ""Guest""

IMPLEMENTATION  ->  OUTPUT =  message.generateSHA256(secret_key)
`OUTPUT = ""944a37b9768970c5da4f35295008470603391223a05d2b17eed668f1678d447c""'
Please suggest any other method which I can implement in iOS to produces the same output as received in android.
","Your Android code and your iOS code is not equivalent. 
Your Android code simply computes the SHA256 digest of your key value concatenation with your message. 
You are first calling update with your key and then calling digest with your messsge. The documentation states:

Performs a final update on the digest using the specified array of bytes, then completes the digest computation. That is, this method first calls update(input), passing the input array to the update method, then calls digest().

Your iOS code, on the other hand, is computing a HMAC of your message using the supplied key.  This is not the same thing. 
You need to compute the SHA256 in the same way that you do on Android;

Use CC_SHA256_Init
call CC_SHA256_Update with your key and message
Call CC_SHA256_Final to get the hash

Probably easier in Swift is to use SwiftyRSA. All you need to do then is create an instance of ClearMessage initialised with your concatenation key and message and then call the digest function on it. 
","749","<ios><swift><sha256>","0","3","2","2018-09-20 13:14:08","","5","0","6518479","","2018-09-20 09:46:46","2018-09-20 09:24:02",""
"51372652","How to verify the signing certificate on an APK matches the SHA256 fingerprint?","
Refer to the screenshot, please.
If I have gotten the APK file, how to verify the signing certificate on the APK matches the mentioned SHA256 fingerprint?
","apk files are just zip files which you can unzip them. after unzipping the apk, find the CERT.RSA file in META-INF folder and run this command
keytool -printcert -file C:\Path\To\CERT.RSA

in its output you can find the SHA256 fingerprint
","741","<android><certificate><apk><sha256><fingerprinting>","1","2","1","2019-11-03 11:29:41","51373733","0","1","1587329","","2019-11-03 11:29:41","2018-07-17 03:04:22",""
"30952382","keytool SHA256 (android keystore) not generating","I have been using SHA1 only so far. Now I need SHA256 so that I tried to get it from the keystore file which is made from Android studio.
Until now, I couldn't get the result. 
The result is like this. 
Engineerui:Docs/B0006$ keytool -v -list -keystore ./AndAppRelease.keystore
keystore 암호를 입력하십시오:  

Keystore 유형: JKS
Keystore 공급자: SUN

Keystore에는 1 항목이 포함되어 있습니다.

별칭 이름: theAliasName
작성일: keyStore.getCreationDate(alias)
항목 유형: PrivateKeyEntry
인증서 체인 길이: 1
인증서[1]:
소유자: O=Company Inc., L=aCity, ST=aState, C=US
발급자: O=Company Inc., L=aCity, ST=aState, C=US
일련 번호: aSerialnum
유효 기간 시작: Fri Sep 21 15:39:04 KST 2012 끝: Sat Sep 09 15:39:04 KST 2062
인증 지문:
     MD5:  aMD5String
     SHA1: aSHA1String
     서명 알고리즘 이름: SHA1withRSA
     버전: 3


*******************************************
*******************************************

Any idea or thought? 
Thank you very much!
","","740","<keytool><sha256><android-keystore>","3","","0","2015-06-20 09:25:51","","0","","","","","2015-06-20 09:25:51",""
"4183151","Ruby and SHA256 - Difference between MacOS and Windows?","I wrote this little test script in Ruby (on MacOS):
#!/usr/bin/ruby
require 'digest/sha2'

def calc_sha(file)
  # calc hash
  hash = Digest::SHA2.new
  File.open(file, 'r') do |fh|
    fh.each_line do |l|
      hash << l
    end
  end

  hash.to_s
end

puts calc_sha('dont-panic.jpeg')
puts '40075d8441ab6a9abeceb7039552704320f471667b8f9ac3c18b9b5b0a1fee7e'
puts calc_sha('dont-panic.jpeg') ==  '40075d8441ab6a9abeceb7039552704320f471667b8f9ac3c18b9b5b0a1fee7e'

Which outputs (on MacOS):
~/shatest $ ./sha.rb 
40075d8441ab6a9abeceb7039552704320f471667b8f9ac3c18b9b5b0a1fee7e
40075d8441ab6a9abeceb7039552704320f471667b8f9ac3c18b9b5b0a1fee7e
true

Then I run the exact same Script in Windows XP:
F:\shatest>ruby sha.rb
9c787b71392551238b24915c888dbd44f4ff465c8e8aadca7af3bb6aaf66a3ca
40075d8441ab6a9abeceb7039552704320f471667b8f9ac3c18b9b5b0a1fee7e
false

Can anyone tell me whats the Problem here?
","You're opening a JPEG (i.e. a binary file) and then reading every line of text from it. Don't do that. Any time you treat binary data as text, you're just asking for odd behaviour.
I don't know much about Ruby at all, but I'd generally expect to open the file, and repeatedly read chunks of binary data from it, updating the hash with that. Don't do anything which talks about ""lines"" or uses text at all.
","738","<ruby><windows><macos><sha256>","0","2","1","2010-11-15 09:55:21","4183207","0","","","","","2010-11-15 09:50:15",""
"54908161","Leading zeros when computing SHA-256 hash","I am trying to compare the SHA-256 hash values of the same file with Python and Java. However, in some instances, the Python hash value has leading zeros, whereas the Java version does not. For instance, hashing somefile.txt in both programs yields:
Python: 000c3720cf1066fcde30876f498f060b0b3ad4e21abd473588f1f31f10fdd890
Java : c3720cf1066fcde30876f498f060b0b3ad4e21abd473588f1f31f10fdd890
Is it safe to simply remove leading 0's and compare or is there an implementation which does not produce the leading zeros?
Python Code 
def sha256sum(filename):
    h  = hashlib.sha256()
    b  = bytearray(128*1024)
    mv = memoryview(b)
    with open(filename, 'rb', buffering=0) as f:
        for n in iter(lambda : f.readinto(mv), 0):
            h.update(mv[:n])
    return h.hexdigest()

print(sha256sum('/somepath/somefile.txt'))

# 000c3720cf1066fcde30876f498f060b0b3ad4e21abd473588f1f31f10fdd890

Java Code
public static String calculateSHA256(File updateFile) {
    MessageDigest digest;
    try {
        digest = MessageDigest.getInstance(""SHA-256"");
    } catch (NoSuchAlgorithmException e) {
        Log.e(TAG, ""Exception while getting digest"", e);
        return null;
    }

    InputStream is;
    try {
        is = new FileInputStream(updateFile);
    } catch (FileNotFoundException e) {
        Log.e(TAG, ""Exception while getting FileInputStream"", e);
        return null;
    }

    byte[] buffer = new byte[8192];
    int read;
    try {
        while ((read = is.read(buffer)) > 0) {
            digest.update(buffer, 0, read);
        }
        byte[] shaSum = digest.digest();
        BigInteger bigInt = new BigInteger(1, shaSum);
        String output = bigInt.toString(16);
        return output;
    } catch (IOException e) {
        throw new RuntimeException(""Unable to process file for SHA256"", e);
    } finally {
        try {
            is.close();
        } catch (IOException e) {
            Log.e(TAG, ""Exception on closing SHA256 input stream"", e);
        }
    }
}

Log.i(""Output"", calculateSHA256(somefile))

// I/Output: c3720cf1066fcde30876f498f060b0b3ad4e21abd473588f1f31f10fdd890

","The BigInteger conversion is ignoring leading zeros in your SHA-256 hash. Instead you should encode byte[] directly. As suggested in this answer you can use String.format():
StringBuilder sb = new StringBuilder();
for (byte b : shaSum) {
    sb.append(String.format(""%02X"", b));
}
return sb.toString();

When encoded as hex string the SHA-256 value has 64 characters, as per wiki example:

SHA256("""")
0x e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855

","737","<java><android><python><hash><sha256>","2","2","1","2019-02-27 15:01:48","54908272","1","","1602555","","2019-02-27 15:01:38","2019-02-27 14:51:28",""
"7514512","PHP crypt() with sha256 in Zend Server CE 5.5 truncates the supplied salt","During an upgrade from Zend Server CE 5.1 to Zend Server CE 5.5, PHP also got an upgrade from 5.3.5 to 5.3.8. After this transition the login function for a zend application I'm working on suddenly broke.
Trying to debug it, it looks likes the implementation of crypt() doesn't reflect the PHP manual, or I've misunderstood it. If I would venture a guess, it's the latter.
I'm using a 16 character long salt as part of a larger salt using SHA256, which is used as the example in the PHP manual.
$password = //string entered at login
$salt = '$5$rounds=250000$1234abcd5678defg$';

After I've hashed the entered password
$hash = crypt($password, $salt);

I get a string like this as the return value:
$5$rounds=250000$1234abcd5678$tI.Oiz.YwWjIwT3K.SLU8SwUZ9J0/odBCkbE6t0igeB

What baffles me is that the 16 character salt, that is part of the larger part (1234abcd5678defg above), now is truncated to 12 characters.
Is this as intended? The crypt() function also seems to return different results now than before - is that usual between versions of PHP? Nothing in the changelog suggest any radical changes to the encryption algorithms.
","This is the response I received from Zend:
Thank you for the feedback. The issue you reported is considered a bug. The developers will provide a fix, which will be included in one of the upcoming releases of the product.
","736","<php><sha256><crypt><zend-server-ce>","5","2","1","2011-10-20 08:36:09","7833157","10","1","74012","","2011-09-22 14:57:37","2011-09-22 12:09:14",""
"47041120","Convert string to Guid using SHA256 without truncating","Is there a way to convert a string to a GUID using SHA256 without truncating the 16 bytes?
Currently I have this:
using SHA256 sha2 = SHA256.Create())
{
     var hash = sha2.ComputeHash(Encoding.Default.GetBytes(string));
     return new Guid(hash.Take(16).ToArray());
}

","A hash is not the same as a Guid. Trying to equate the 2 is incorrect.
If you want a unique identifier:
return new Guid();

That'll give you one.
If you want the hash, store is as bytes or a string, not a Guid
","735","<c#><hash><guid><sha256><sha>","2","1","1","2017-10-31 17:47:04","","10","","","","","2017-10-31 17:21:43",""
"21287714","Hashing issue between guava versions","I was using guava 14 to do String hashing like so:
Hashing.sha256().newHasher().putString(""String"").hash().toString();

=>
4d1ca6dce72e20ce214b706168340683bb6b571a7c977c1a9fe029a1cc1c4d06

just upgraded to guava16,
calling this function:
Hashing.sha256().newHasher().putString(""String"", Charsets.UTF-8).hash().toString() gives me a different result.
=>
b2ef230e7f4f315a28cdcc863028da31f7110f3209feb76e76fed0f37b3d8580

I suspect that the old version was using default charset, but switching Charsets on guava16 doesn't give me the same result as in guava14. What did I do wrong here?
","As stated in the docs of Guava 15, the replacement for the old putString(String) method is putUnencodedChars.
","734","<hash><guava><sha256>","4","7","2","2014-04-05 12:08:06","21289011","0","","2015318","","2014-04-05 12:08:06","2014-01-22 15:55:18",""
"21287714","Hashing issue between guava versions","I was using guava 14 to do String hashing like so:
Hashing.sha256().newHasher().putString(""String"").hash().toString();

=>
4d1ca6dce72e20ce214b706168340683bb6b571a7c977c1a9fe029a1cc1c4d06

just upgraded to guava16,
calling this function:
Hashing.sha256().newHasher().putString(""String"", Charsets.UTF-8).hash().toString() gives me a different result.
=>
b2ef230e7f4f315a28cdcc863028da31f7110f3209feb76e76fed0f37b3d8580

I suspect that the old version was using default charset, but switching Charsets on guava16 doesn't give me the same result as in guava14. What did I do wrong here?
","As Louis said, the replacement is Hasher.putUnencodedChars(). Or, you can use the shortcuts on the HashFunction interface:
Hashing.sha256().hashUnencodedChars(""String"").toString();

","734","<hash><guava><sha256>","4","1","2","2014-04-05 12:08:06","21289011","0","","2015318","","2014-04-05 12:08:06","2014-01-22 15:55:18",""
"20237769","confusion setting up i2p base32 with 52 characters","I am trying to configure and eepsite and their base32 is too long, does i2p use b32 or sha256? or b32 converted to 256, for an eepsite? the example given is 52 characters http://www.i2p2.de/naming.html#base32 and base32 is not 52 characters, it's 32 characters http://online-calculators.appspot.com/base32/ . What am I missing?
Is there a tool that addresses i2p specifically?
","Base32 is a notation for encoding arbitrary byte data. There is no restriction on the maximum length of Base32-encoded data - the ""32 characters"" refers to the set of characters that are used to write the arbitrary byte data in Base32 notation. The resulting string will only contain characters from that set. The only restriction is that the length of the Base32-encoded string must be a multiple of 40 bits.
The Base32 addresses in I2P are the Base32 encoding of the SHA256 hash of the I2P Destination.
Here is a Python script to convert Base64-encoded I2P Destinations into an I2P B32 address (from the i2p.scripts branch in the I2P Monotone repositories):
#!/usr/bin/env python
#
# Written by duck
# http://forum.i2p/viewtopic.php?t=4367
#
import base64, hashlib, sys

if len(sys.argv) != 2:
    print 'Usage: 64to32.py <base64key>'
    sys.exit(1)

key = sys.argv[1]
raw_key = base64.b64decode(key, '-~')
hash = hashlib.sha256(raw_key)
base32_hash = base64.b32encode(hash.digest())
print base32_hash.lower().replace('=', '')+'.b32.i2p

","731","<linux><encryption><sha256><tunnel><base32>","1","2","1","2014-02-17 00:45:18","21818909","0","1","2528910","","2013-11-28 07:58:40","2013-11-27 08:57:21",""
"42510621","How to implement SHA256 on Java Card 2.2.1?","I'm trying to implement RSA sign on Java Card version 2.2.1. I have implemented RSA 2048 and tested this successfully, but when trying to hash using the MessageDigest class, I'm unable to get the correct answer in response.
Here is my code:
MessageDigest md = MessageDigest.getInstance(MessageDigest.ALG_SHA, false);
md.reset();
md.doFinal(toSign, bOffset, bLength, tempBuffer, (short) 0);`

But I do not get the correct answer; neighther for ALG_SHA nor for ALG_MD5.
I'm wondering what the problem is. All samples I have seen use the same methods and parameters.
","The Java Card 2.2.1 specification does not support SHA-256 (or any of the other SHA-2 message digests). It only supports SHA1 and MD5, two complete different cryptographic hash functions. Consequently, neither MessageDigest.ALG_SHA nor MessageDigest.ALG_MD5 will get you an instance of MessageDigest that could calculate the SHA-256 hash function.
Only Java Card 2.2.2 and onwards supports various SHA2 functions. In that specification, the MessageDigest class would also support

SHA-256: MessageDigest.ALG_SHA_256,
SHA-384: MessageDigest.ALG_SHA_384, and
SHA-512: MessageDigest.ALG_SHA_512.

So if you are lucky and your card actually supports Java Card 2.2.2, you could actually use those constants to obtain a proper MessageDigest object.
If your card does not support Java Card 2.2.2, then, of course, you can't use should not1 be able to use those constants. You could still check the manual of your card if it supports some proprietary implementation of the MessageDigest that also has support for SHA-256, though I highly doubt that.


1) Thanks to vlp for pointing out that there are actually cards that are Java Card 2.2.1 (or below) that seemingly support using the constants for SHA-2 algorithms introduced in the Java Card 2.2.2 API. This might just be caused by other implementation bugs and nobody seems to have tested if these algorithms actually work on those cards. See the JCAlgTest list for findings on that.
","731","<digital-signature><smartcard><sha256><javacard><message-digest>","2","4","1","2018-05-29 15:06:46","42516380","4","3","2425802","","2018-05-29 15:06:46","2017-02-28 13:54:40",""
"56186457","How to Hash Value in Flutter Using SHA256?","Hashing Value (String or Int OR etc...) in Flutter ## Heading ##
I have Value like  ""Almahery""
How to Hash in in SHA 256 ?
","
Import (Crypto) : 
import 'package:crypto/crypto.dart';

Then add this code:   
var bytes1 = utf8.encode(""Almahery"");         // data being hashed
var digest1 = sha256.convert(bytes1);         // Hashing Process
print(""Digest as bytes: ${digest1.bytes}"");   // Print Bytes
print(""Digest as hex string: $digest1"");      // Print After Hashing


","730","<algorithm><hash><dart><flutter><sha256>","0","2","1","2019-05-26 12:25:07","","0","1","","","","2019-05-17 12:28:09",""
"44664267","Calculate hmac value with base64 encode using sha256 python","I'm trying to transform a php code into python language.
the php function calculates the hmac value using sha256 and base64 encoding.
My Php function:
<?php

define('SHOPIFY_APP_SECRET', 'some_key');

function verify_webhook($data)
{
$calculated_hmac = base64_encode(hash_hmac('sha256', $data, 
SHOPIFY_APP_SECRET, true));
echo $calculated_hmac;
}

$data = ""some_data"";
$verified = verify_webhook($data);
?>

My Python function:
import base64
import hmac
import binascii
from hashlib import sha256

API_SECRET_KEY = ""some_key""
data = ""some_data""

def verify_webhook():
    dig = hmac.new(
        API_SECRET_KEY,
        msg=data,
        digestmod=sha256
        ).digest()
    calculated_hmac = base64.b64encode(bytes(binascii.hexlify(dig)))
    print(calculated_hmac)

verify_webhook()

I got different outputs even I have the same key and data. I still don't know what I'm missing here. please help!
Python output:

YWM3NjlhMDZjMmViMzdmM2E3YjhiZGY4NjhkNTZhOGZhMDgzZDM4MGM1OTkyZTM4YjA5MDNkMDEwNGEwMzJjMA==

Php output:

N7JyAyKocoDx/Opx36nGqAuUKdyGH+ROX+J5AJgQ+/g=

","I was able to match your php output using Python 3:
>>> dig = hmac.new( bytes(API_SECRET_KEY,'ascii'), 
                    msg=bytes(data, 'ascii'), digestmod=sha256 )
>>> dig.digest()
b'7\xb2r\x03""\xa8r\x80\xf1\xfc\xeaq\xdf\xa9\xc6\xa8\x0b\x94)\xdc\x86\x1f\xe4N_\xe2y\x00\x98\x10\xfb\xf8'
>>> base64.b64encode(dig.digest())
b'N7JyAyKocoDx/Opx36nGqAuUKdyGH+ROX+J5AJgQ+/g='

","729","<php><python><base64><sha256><hmac>","3","0","1","2017-09-23 20:18:27","","0","0","4017403","","2017-09-23 20:18:27","2017-06-20 22:56:54",""
"32957555","Why are my Java and command line SHA256 outputs different?","I'm getting different outputs from hashing a string on the command line vs. in Java on Android.  I'm sure I'm doing something wrong, but I don't see what.
Command line:
kevin@aphrodite:~$ echo derp | sha256sum
ee673d13de31533a375b41d9e57731d9bb4dbddbd6c1d2364f15be40fd783346  -

Java:
final String plaintext = ""derp"";
final MessageDigest md;
try {
    md = MessageDigest.getInstance(""SHA-256"");
} catch (NoSuchAlgorithmException e) {
/* SHA-256 should be supported on all devices. */
    throw new RuntimeException(e);
}
final String inputHash = bytesToHex(md.digest(plaintext.getBytes()));
Log.debug(TAG, ""input hash: "" + inputHash);

Java output:
10-05 13:32:57.412: D/Config(12082): input hash: 3f4146a1d0b5dac26562ff7dc6248573f4e996cf764a0f517318ff398dcfa792

Here's the bytesToHex(...) method, which I found in another Q&A.  I confirmed that it's doing the right thing by logging Integer.toHexString(b) for each b.
private static final char[] hexDigit = ""0123456789abcdef"".toCharArray();

private static String bytesToHex(byte[] bytes) {
    char[] hexChars = new char[bytes.length * 2];
    for (int i = 0; i < bytes.length; ++i) {
        int b = bytes[i] & 0xFF;
        hexChars[i * 2] = hexDigit[b >>> 4];
        hexChars[i * 2 + 1] = hexDigit[b & 0x0F];
    }
    return new String(hexChars);
}

","Because echo includes a trailing new-line. You can use
echo -n derp | sha256sum

or add \n to your plaintext like
final String plaintext = ""derp\n"";

","728","<java><sha256>","7","11","1","2015-10-05 20:55:49","32957602","2","3","438154","","2015-10-05 20:47:21","2015-10-05 20:43:26",""
"26820180","Why am I getting different results between C++ and PHP SHA256 hashes?","I'm trying to generate a SHA256 hash in PHP which will be stored in a database and used for authentication by a C++ program.
In php the hash looks like this:
$mail = strtoupper(utf8_decode('tester@tester.com'));
$password = strtoupper(utf8_decode('password'));

$email = hash_init('sha256');
         hash_update($email, $mail);
$mail  = strtoupper(hash_final($email)); // In C++ the output is uppercase

$sha   = hash_init('sha256');
         hash_update($sha, $mail);
         hash_update($sha, ':');
         hash_update($sha, $password);
$pass  = hash_final($sha);

Or written another way:
$pass = hash('sha256', strtoupper(hash('sha256', $mail)).':'.$password);

In C++ the process looks like this:
Utf8ToUpperOnlyLatin(email);
Utf8ToUpperOnlyLatin(password);

SHA256Hash email;
email.UpdateData(name);
email.Finalize();

SHA256Hash sha;
sha.UpdateData(ByteArrayToHexStr(email.GetDigest(), email.GetLength()));
sha.UpdateData("":"");
sha.UpdateData(password);
sha.Finalize();

return ByteArrayToHexStr(sha.GetDigest(), sha.GetLength(), true);

And the methods:
std::string ByteArrayToHexStr(uint8 const* bytes, uint32 arrayLen, bool reverse /* = false */)
{
    int32 init = 0;
    int32 end = arrayLen;
    int8 op = 1;

    if (reverse)
    {
        init = arrayLen - 1;
        end = -1;
        op = -1;
    }

    std::ostringstream ss;
    for (int32 i = init; i != end; i += op)
    {
        char buffer[4];
        sprintf(buffer, ""%02X"", bytes[i]);
        ss << buffer;
    }

    return ss.str();
}

bool Utf8ToUpperOnlyLatin(std::string& utf8String)
{
    std::wstring wstr;
    if (!Utf8toWStr(utf8String, wstr))
        return false;

    std::transform(wstr.begin(), wstr.end(), wstr.begin(), wcharToUpperOnlyLatin);

    return WStrToUtf8(wstr, utf8String);
}

SHA256Hash::SHA256Hash()
{
    SHA256_Init(&mC);
    memset(mDigest, 0, SHA256_DIGEST_LENGTH * sizeof(uint8));
}

void SHA256Hash::UpdateData(const uint8 *dta, int len)
{
    SHA256_Update(&mC, dta, len);
}

void SHA256Hash::UpdateData(const std::string &str)
{
    UpdateData((uint8 const*)str.c_str(), str.length());
}

void SHA256Hash::Initialize()
{
    SHA256_Init(&mC);
}

void SHA256Hash::Finalize(void)
{
    SHA256_Final(mDigest, &mC);
}

The output using the two methods is:
C++: 09FEBAB417CF2FA563AC89963519CCAC53D5F556F8BF20D7EEB818A0584A514E
PHP: 4e514a58a018b8eed720bff856f5d553accc19359689ac63a52fcf17b4bafe09

And if I were to swap
$mail  = strtoupper(hash_final($email)); // In C++ the output is uppercase

for
$mail  = hash_final($email);

The PHP output would be
89ba15a964331258bcc763f44473c492854bf9c2694cc2306da64ccef8ffeab2

Why can't I seem to get PHP and C++ to produce the same result?
Thank you.
","The C++ implementation used the inverse of the bytes returned by the hash. Both methods were correct, but the outputs did not match do to a minor oversight. Thanks to Geoffliu for pointing that out.
","726","<php><c++><hash><sha256>","1","1","1","2014-11-08 20:44:08","26821882","3","","","","","2014-11-08 17:49:51","2014-11-09 11:17:28"
"35180006",".Net signing with strong name key file and SHA256","We currently sign our assemblies using an SHA1 strong name key file in Visual Studio using the .Net 4.0 framework.  The main reason we use strong naming is the ability to use ""InternalsVisibleTo"" in our assemblies.  Since SHA1 is now deprecated I believe we should be switching to SHA256.
I have attempted to generate and use SHA256 as the strong name key file in Visual Studio in .Net 4.0 but it cannot generate one, although I can create an SHA256 through .Net 4.5 and then assign that to my .Net 4.0 project and it appears to accept it when I use the ""Sign the assembly"" feature in Visual Studio.
My question is does .Net 4.0 have the ability to correctly utilize the SHA256 strong name file generated in .Net 4.5?
Thanks for your help.
","There are 2 options to create Personal Exchange File (*.pfx), 

Using Makecert
""makecert.exe"" -n ""CN=Local"" - r -pe -a sha256 -len 2048 -cy authority -e 
03/03/2017 -sv Local.pvk Local.cer
""pvk2pfx.exe"" -pvk Local.pvk -spc Local.cer -pfx Local.pfx -po 
MyPassword -sy 24
Using OpenSSL
openssl.exe req -x509 -nodes -sha256 -days 3650 -subj ""/CN=Local"" -newkey 
rsa:2048 -keyout Local.key -out Local.crt
openssl.exe pkcs12 -export -in Local.crt -inkey Local.key -CSP ""Microsoft 
Enhanced RSA and AES Cryptographic Provider"" -out Local.pfx

The OpenSSL is more reliable way of doing this.
","725","<.net><.net-4.0><sha1><sha256><sha>","1","1","1","2016-08-17 16:43:05","","4","2","","","","2016-02-03 14:41:05",""
"39503427","Generating SHA256 in iOS","I tried to generate SHA256 in iOS using Arcane library with following data:
String: Amount=50&BillerID=59&ChannelID=2&Context=34|check|test&ReturnURL=https://uat.myfatoora.com/ReceiptPOC.aspx&TxnRefNum=000000000020003&UserName=DCS
Key: 71DD0F73AFFBB47825FF9864DDE95F3B 
Result was 409dc622b3bef5c9fc46e45c3210111fcb4536d3a55833316fe0dc8154b3ea34
which I thought to be correct. However, the Windows counterpart is generating SHA256 using following code:
Windows Phone Source Code:

public static string HmacSha256(string secretKey, string value)
    {
        var msg = CryptographicBuffer.ConvertStringToBinary(value, BinaryStringEncoding.Utf8);
        byte[] convertedHash = new byte[secretKey.Length / 2];

        for (int i = 0; i < secretKey.Length / 2; i++)
        {
            convertedHash[i] = (byte)Int32.Parse(secretKey.Substring(i * 2, 2), System.Globalization.NumberStyles.HexNumber);
        }

        // Create HMAC.
        var objMacProv = MacAlgorithmProvider.OpenAlgorithm(MacAlgorithmNames.HmacSha256);
        CryptographicHash hash = objMacProv.CreateHash(convertedHash.AsBuffer());

        hash.Append(msg);
        return CryptographicBuffer.EncodeToHexString(hash.GetValueAndReset());

    }

and the result is: 94a20ca39c8487c7763823ec9c918d9e38ae83cb741439f6d129bcdef9edba73 which is different from what I got. Can somebody help me with this and let me know what the above code is doing and how can I replicate it in iOS.
Edit:
 iOS Source code

 let key = self.md5(string: ""71DD0F73AFFBB47825FF9864DDE95F3B"")

    let hash = HMAC.SHA256(str, key: key)

","The Windows code takes the string, interprets it as a hexadecimal number, and converts two characters a time into one byte. 
Your Mac code most like takes the string as it is. Since the key starts with ""71"", your windows code takes that as a single byte with value 0x71 = 129, your Mac code takes it as two bytes with values '7' = 55 and '1' = 49. 
All you need to do is convert the bytes on the Mac exactly as you do it on Windows. You might have to do the unthinkable and look at the source code of the Mac library to see how it does the actual hash calculation. 
","724","<ios><windows-phone><sha256><hmac>","1","1","3","2017-06-15 13:01:46","39737481","2","","2227743","","2017-06-15 13:01:46","2016-09-15 05:00:43",""
"39503427","Generating SHA256 in iOS","I tried to generate SHA256 in iOS using Arcane library with following data:
String: Amount=50&BillerID=59&ChannelID=2&Context=34|check|test&ReturnURL=https://uat.myfatoora.com/ReceiptPOC.aspx&TxnRefNum=000000000020003&UserName=DCS
Key: 71DD0F73AFFBB47825FF9864DDE95F3B 
Result was 409dc622b3bef5c9fc46e45c3210111fcb4536d3a55833316fe0dc8154b3ea34
which I thought to be correct. However, the Windows counterpart is generating SHA256 using following code:
Windows Phone Source Code:

public static string HmacSha256(string secretKey, string value)
    {
        var msg = CryptographicBuffer.ConvertStringToBinary(value, BinaryStringEncoding.Utf8);
        byte[] convertedHash = new byte[secretKey.Length / 2];

        for (int i = 0; i < secretKey.Length / 2; i++)
        {
            convertedHash[i] = (byte)Int32.Parse(secretKey.Substring(i * 2, 2), System.Globalization.NumberStyles.HexNumber);
        }

        // Create HMAC.
        var objMacProv = MacAlgorithmProvider.OpenAlgorithm(MacAlgorithmNames.HmacSha256);
        CryptographicHash hash = objMacProv.CreateHash(convertedHash.AsBuffer());

        hash.Append(msg);
        return CryptographicBuffer.EncodeToHexString(hash.GetValueAndReset());

    }

and the result is: 94a20ca39c8487c7763823ec9c918d9e38ae83cb741439f6d129bcdef9edba73 which is different from what I got. Can somebody help me with this and let me know what the above code is doing and how can I replicate it in iOS.
Edit:
 iOS Source code

 let key = self.md5(string: ""71DD0F73AFFBB47825FF9864DDE95F3B"")

    let hash = HMAC.SHA256(str, key: key)

","The key here is you need to convert your secret, which is a hex string, into NSData. In other words, NSData byte stream would ""look"" like the secret.
This should do what you want:
    // Hex string to NSData conversion from here http://stackoverflow.com/questions/7317860/converting-hex-nsstring-to-nsdata
    NSString *secret = @""71DD0F73AFFBB47825FF9864DDE95F3B"";
    NSData *dataIn = [@""Amount=50&BillerID=59&ChannelID=2&Context=34|check|test&ReturnURL=https://uat.myfatoora.com/ReceiptPOC.aspx&TxnRefNum=000000000020003&UserName=DCS"" dataUsingEncoding:NSUTF8StringEncoding];
    NSMutableData *macOut = [NSMutableData dataWithLength:CC_SHA256_DIGEST_LENGTH];

    secret = [secret stringByReplacingOccurrencesOfString:@"" "" withString:@""""];
    NSMutableData *secretData = [[NSMutableData alloc] init];
    unsigned char whole_byte;
    char byte_chars[3] = {'\0','\0','\0'};
    int i;
    for (i=0; i < [secret length]/2; i++) {
        byte_chars[0] = [secret characterAtIndex:i*2];
        byte_chars[1] = [secret characterAtIndex:i*2+1];
        whole_byte = strtol(byte_chars, NULL, 16);
        [secretData appendBytes:&whole_byte length:1];
    }

    CCHmac(kCCHmacAlgSHA256, secretData.bytes, secretData.length, dataIn.bytes, dataIn.length, macOut.mutableBytes);

    NSMutableString *stringOut = [NSMutableString stringWithCapacity:macOut.length];
    const unsigned char *macOutBytes = macOut.bytes;

    for (NSInteger i=0; i<macOut.length; ++i) {
        [stringOut appendFormat:@""%02x"", macOutBytes[i]];
    }

    NSLog(@""dataIn: %@"", dataIn);
    NSLog(@""macOut: %@"", macOut);
    NSLog(@""stringOut: %@"", stringOut);

Output: 
2016-09-27 20:18:54.181 JKS[27562:5321334] dataIn: <416d6f75 6e743d35 30264269 6c6c6572 49443d35 39264368 616e6e65 6c49443d 3226436f 6e746578 743d3334 7c636865 636b7c74 65737426 52657475 726e5552 4c3d6874 7470733a 2f2f7561 742e6d79 6661746f 6f72612e 636f6d2f 52656365 69707450 4f432e61 73707826 54786e52 65664e75 6d3d3030 30303030 30303030 32303030 33265573 65724e61 6d653d44 4353>
2016-09-27 20:18:54.181 JKS[27562:5321334] macOut: <94a20ca3 9c8487c7 763823ec 9c918d9e 38ae83cb 741439f6 d129bcde f9edba73>
2016-09-27 20:18:54.181 JKS[27562:5321334] stringOut: 94a20ca39c8487c7763823ec9c918d9e38ae83cb741439f6d129bcdef9edba73

Updated with Swift (code should be cleaned up)

// http://stackoverflow.com/questions/29799361/generate-a-hmac-swift-sdk8-3-using-cchmac
func generateHMAC(key: String, data: String) -> String {
    let keyData = key.dataFromHexadecimalString()! as NSData
    let dataIn = data.data(using: .utf8)! as NSData
    var result: [CUnsignedChar]
    result = Array(repeating: 0, count: Int(CC_SHA256_DIGEST_LENGTH))
    CCHmac(CCHmacAlgorithm(kCCHmacAlgSHA256), keyData.bytes, keyData.length, dataIn.bytes, dataIn.length, &result)

    let hash = NSMutableString()
    for val in result {
        hash.appendFormat(""%02hhx"", val)
    }

    return hash as String
}

You can use this extension to convert the hex string to Data
// Modified slightly http://stackoverflow.com/questions/26501276/converting-hex-string-to-nsdata-in-swift
extension String {

    func dataFromHexadecimalString() -> Data? {
        var data = Data(capacity: characters.count / 2)

        let regex = try! NSRegularExpression(pattern: ""[0-9a-f]{1,2}"", options: .caseInsensitive)
        regex.enumerateMatches(in: self, options: [], range: NSMakeRange(0, characters.count)) { match, flags, stop in
            let byteString = (self as NSString).substring(with: match!.range)
            var num = UInt8(byteString, radix: 16)
            data.append(&num!, count: 1)
        }

        return data
    }
}

And to use do something like:
    let secret = ""71DD0F73AFFBB47825FF9864DDE95F3B""
    let value = ""Amount=50&BillerID=59&ChannelID=2&Context=34|check|test&ReturnURL=https://uat.myfatoora.com/ReceiptPOC.aspx&TxnRefNum=000000000020003&UserName=DCS""

    print(""\(generateHMAC(key: secret, data: value))"")

Your output should be 94a20ca39c8487c7763823ec9c918d9e38ae83cb741439f6d129bcdef9edba73
You will need #import <CommonCrypto/CommonCrypto.h> in your bridging header.
","724","<ios><windows-phone><sha256><hmac>","1","2","3","2017-06-15 13:01:46","39737481","2","","2227743","","2017-06-15 13:01:46","2016-09-15 05:00:43",""
"39503427","Generating SHA256 in iOS","I tried to generate SHA256 in iOS using Arcane library with following data:
String: Amount=50&BillerID=59&ChannelID=2&Context=34|check|test&ReturnURL=https://uat.myfatoora.com/ReceiptPOC.aspx&TxnRefNum=000000000020003&UserName=DCS
Key: 71DD0F73AFFBB47825FF9864DDE95F3B 
Result was 409dc622b3bef5c9fc46e45c3210111fcb4536d3a55833316fe0dc8154b3ea34
which I thought to be correct. However, the Windows counterpart is generating SHA256 using following code:
Windows Phone Source Code:

public static string HmacSha256(string secretKey, string value)
    {
        var msg = CryptographicBuffer.ConvertStringToBinary(value, BinaryStringEncoding.Utf8);
        byte[] convertedHash = new byte[secretKey.Length / 2];

        for (int i = 0; i < secretKey.Length / 2; i++)
        {
            convertedHash[i] = (byte)Int32.Parse(secretKey.Substring(i * 2, 2), System.Globalization.NumberStyles.HexNumber);
        }

        // Create HMAC.
        var objMacProv = MacAlgorithmProvider.OpenAlgorithm(MacAlgorithmNames.HmacSha256);
        CryptographicHash hash = objMacProv.CreateHash(convertedHash.AsBuffer());

        hash.Append(msg);
        return CryptographicBuffer.EncodeToHexString(hash.GetValueAndReset());

    }

and the result is: 94a20ca39c8487c7763823ec9c918d9e38ae83cb741439f6d129bcdef9edba73 which is different from what I got. Can somebody help me with this and let me know what the above code is doing and how can I replicate it in iOS.
Edit:
 iOS Source code

 let key = self.md5(string: ""71DD0F73AFFBB47825FF9864DDE95F3B"")

    let hash = HMAC.SHA256(str, key: key)

","

#import <CommonCrypto/CommonHMAC.h>

+ (NSString *)hmacSHA256EncryptString{


    NSString * parameterSecret = @""input secret key"";
    NSString *plainString = @""input encrypt content string"";
    const char *secretKey  = [parameterSecret cStringUsingEncoding:NSUTF8StringEncoding];
    const char *plainData = [plainString cStringUsingEncoding:NSUTF8StringEncoding];
    unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];
    CCHmac(kCCHmacAlgSHA256, secretKey, strlen(secretKey), plainData, strlen(plainData), cHMAC);
    NSData *HMACData = [NSData dataWithBytes:cHMAC length:sizeof(cHMAC)];
    const unsigned char *bufferChar = (const unsigned char *)[HMACData bytes];
    NSMutableString *hmacString = [NSMutableString stringWithCapacity:HMACData.length * 2];
    for (int i = 0; i < HMACData.length; ++i){
        [hmacString appendFormat:@""%02x"", bufferChar[i]];
    }
    return hmacString;
    
}



","724","<ios><windows-phone><sha256><hmac>","1","0","3","2017-06-15 13:01:46","39737481","2","","2227743","","2017-06-15 13:01:46","2016-09-15 05:00:43",""
"46306938","HMAC SHA256 Function in VBA on Mac","I'm trying to generate a base64 hash based on two inputs - a message and a key, both being strings, using HMAC SHA256. I've spent hours looking for answers and did come across a few sites or other posts on Stack Overflow, but unfortunately none seem to be what I need.
Is it possible to code a function myself on VBA? I'm using Mac so those CreateObject commands I saw elsewhere won't be available.
Here is what I found so far that I think could be relevant - hope it helps others who are trying to achieve the same using other languages or Windows.
https://www.jokecamp.com/blog/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages/#csharp
http://www.vbforums.com/showthread.php?635398-VB6-HMAC-SHA-256-HMAC-SHA-1-Using-Crypto-API
","","723","<vba><macos><excel-vba><sha256><hmac>","0","","0","2017-09-19 17:54:47","","3","","","","","2017-09-19 17:54:47",""
"24166076","Pre-processing SHA256 Python implementation","I am working my way through the SHA256 implementation on wikipedia but have came up stuck. I have just tried to write the code for the message pre-processing and my length for the final message is 504 bits, not the 512 required.
Wikipedia: SHA256

Pre-processing:
append the bit '1' to the message
append k bits '0', where k is the minimum number >= 0 such that the resulting message
  length (modulo 512 in bits) is 448.
append length of message (without the '1' bit or padding), in bits, as 64-bit big-endian integer
  (this will make the entire post-processed length a multiple of 512 bits)

I'm unsure where the flaw is, I've been over the code quite a few times.
def joe_sha256 ( input_string ):
    ""Joe's SHA256 implementation""

    # Create a binary version of the input string
    binary_string = create_binary ( input_string )

    # Append '1' bit to the end as per the SHA256 specification
    appended_1_bit_string = append_bit_1 ( binary_string )

    # Append 'k' bits to allow for len(string) % 512 == 488
    appended_k_string = append_k_bit ( appended_1_bit_string )

    # Append length of message
    length_of_message = append_length_of_message ( binary_string )

    # Create final message
    final_message = appended_k_string + length_of_message

    print(len(final_message)) # This prints out 504, it should be 512!!!!

    return final_message # Just for testing.


def create_binary ( input_string ):
    ""Takes a string and outputs its binary form""
    A = ''.join(format(ord(x), 'b').zfill(8) for x in input_string)
    return A


def append_bit_1 ( input_string ):
    ""Appends the bit 1 to the binary form""
    input_string = input_string + '1'
    return input_string


def append_k_bit ( input_string ):
    ""Makes sure the length of input will become X % 512 == 488""
    if len(input_string) % 512 == 488:
        return input_string
    else:
        while len(input_string) % 512 != 488:
            input_string = input_string + '0'
        return input_string


def append_length_of_message ( input_string ):
    """"
    # Get value
    hex = format(len(input_string),'x')

    # Construct the 64 bit number?
    final_num = ''
    length = 16-len(hex)
    for x in range(length):
        final_num = final_num + '0'

    final_num = final_num + hex

    return final_num

","There are two problems:
1) The 488 magic number in your code should be 448.
2) You're only using 16 ""bits"" (characters) in append_length_of_message().
HIH!
","722","<python><python-3.x><sha256>","2","2","1","2014-06-11 15:07:23","24166425","0","","","","","2014-06-11 14:51:44",""
"44087012","sha256 of locally built docker image","How do I get the sha256 checksum of an already locally built docker image?
I want to use the checksum to annotate a FROM instruction in a derived image:
FROM name@sha256:checksum

I already tried checksums from docker inspect.

Neither the first nor the last of the checksums in the Layers list worked.
The one in ""Id"" did not work.
The one in ""Parent"" did not work.
The one in ""Container"" did not work.
The one in ""Image"" did not work.

Some of them I only tried out of desperation to finally find the correct checksum for my docker image, but I cannot find the correct checksum. Only thing I did not try yet, because of the number of layers, is to go through all of the layers in case they are in a random order. But to put them there like that would not make sense to begin with.
The error I see when I run docker build -t <some name> . in the directory of the Dockerfile of the derived image when it is not working is:
Step 1/7 : FROM name@sha256:<checksum> repository name not found: does not exist or no pull access

Info

Docker version: Docker version 17.05.0-ce, build 89658be (obtained via docker --version)
Output of docker info:
Containers: 0
 Running: 0
 Paused: 0
 Stopped: 0
Images: 3841
Server Version: 17.05.0-ce
Storage Driver: aufs
 Root Dir: /var/lib/docker/aufs
 Backing Filesystem: extfs
 Dirs: 2620
 Dirperm1 Supported: true
Logging Driver: json-file
Cgroup Driver: cgroupfs
Plugins: 
 Volume: local
 Network: bridge host macvlan null overlay
Swarm: inactive
Runtimes: runc
Default Runtime: runc
Init Binary: docker-init
containerd version: 9048e5e50717ea4497b757314bad98ea3763c145
runc version: 9c2d8d184e5da67c95d601382adf14862e4f2228
init version: 949e6fa
Security Options:
 apparmor
 seccomp
  Profile: default
Kernel Version: 4.4.0-78-generic
Operating System: Ubuntu 16.04.2 LTS
OSType: linux
Architecture: x86_64
CPUs: 4
Total Memory: 7.684GiB
Name: xiaolong-hp-pavilion
ID: QCJS:JPK4:KC7J:6MYF:WWCA:XQM2:7AF7:HWWI:BRZK:GT6B:D2NP:OJFS
Docker Root Dir: /var/lib/docker
Debug Mode (client): false
Debug Mode (server): false
Registry: https://index.docker.io/v1/
Experimental: false
Insecure Registries:
 127.0.0.0/8
Live Restore Enabled: false

WARNING: No swap limit support


","The checksum docker is looking for in the FROM line comes from the registry server. In the inspect output, you'll see this in the RepoDigest section:
docker inspect -f '{{.RepoDigests}}' $image_name

If you haven't pushed this image to a registry server, then you won't be able to use this hash value.
E.g.:
$ docker inspect -f '{{.RepoDigests}}' busybox:latest
[busybox@sha256:32f093055929dbc23dec4d03e09dfe971f5973a9ca5cf059cbfb644c206aa83f]

$ cat df.testsha
FROM busybox@sha256:32f093055929dbc23dec4d03e09dfe971f5973a9ca5cf059cbfb644c206aa83f
CMD echo ""hello world""

$ docker build -f df.testsha -t test-sha .
Sending build context to Docker daemon  23.35MB
Step 1/2 : FROM busybox@sha256:32f093055929dbc23dec4d03e09dfe971f5973a9ca5cf059cbfb644c206aa83f
 ---> 00f017a8c2a6
Step 2/2 : CMD echo ""hello world""
 ---> Running in c516e5b6a694
 ---> 68dc47866183
Removing intermediate container c516e5b6a694
Successfully built 68dc47866183
Successfully tagged test-sha:latest

$ docker run --rm test-sha
hello world

","722","<docker><sha256><docker-image>","3","2","1","2017-05-20 20:37:21","44090520","0","","1829329","","2017-05-20 20:37:21","2017-05-20 14:23:02",""
"44293192","Seeking information on hardware SHA-2 acceleration","This year AMD has released a new series of x86-64 CPUs named RyZen for desktop. RyZen's specification shows it provides new SSE based SHA1 and SHA-256 instructions wiki: Intel SHA extension:

sha1 instructions: SHA1RNDS4, SHA1NEXTE, SHA1MSG1, SHA1MSG2; 
sha-256 instructions: SHA256RNDS2, SHA256MSG1, SHA256MSG2

I am curious, Do any of the APIs/Libraries already exist that are able to laverage these instruction for ultra fast hashing to be used in PHP or other server side languages, when you use AMD RyZen CPU ? 
If not, when should we expect it to be available ?
Since Intel has provided specification for hardware SHA around year 2013, it seems at least a couple of compilers must have provied support for it.
","Support of hardware-accelerated SHA256 was added to openssl 1.0.2 [22 Jan 2015]:
https://git.openssl.org/gitweb/?p=openssl.git;a=blob;f=CHANGES

1962  Changes between 1.0.1l and 1.0.2 [22 Jan 2015]

2012   *) Support for new and upcoming Intel processors, including AVX2,
2013      BMI and SHA ISA extensions. This includes additional ""stitched""
2014      implementations, AESNI-SHA256 and GCM, and multi-buffer support
2015      for TLS encrypt.


So, with enabled hardware and recent openssl, any php/python library which uses openssl to compute SHA256 may use hardware accelerated SHA256 digest computation (if enabled in the openssl and if this implementation will be selected by the library). And command-line too: openssl dgst -sha256 -binary file_to_be_hashed.
There are some raw bindings of openssl library in php: http://php.net/manual/en/function.openssl-digest.php and OPENSSL_ALGO_SHA256 is there since PHP 5.5: which openssl version support for sha256 in php
Linux Kernel CryptoAPI may use hardware SHA1/SHA2 since 4.4 version: https://www.phoronix.com/scan.php?page=news_item&px=Linux-4.4-Crypto (http://lkml.iu.edu/hypermail/linux/kernel/1511.0/00383.html); but it is unlikely that PHP/other scripting library will use kernel cryptoapi.
","716","<hash><sha1><sha256><sha><sha2>","1","2","1","2017-05-31 20:06:33","44293460","1","2","5266667","","2017-05-31 20:06:33","2017-05-31 19:26:57",""
"47653043","Signing ClickOnce applications using mage.exe and Sha256 timestamp server url","Iam facing An error while  trying to sign clickonce(.application) with MAGE.exe and SHA256 RFC 3161 timestamp.
mage.exe -s /path/to/our/.application"" -cf certfile -ti [RFC 3161 timestamp] 
I receive the following error:
""Internal error, please try again later. Parameter is incorrect.""
If I try to sign without timestamp or SHA1 timestamp everything works fine.
Can you please suggest the correct approach to sign click once applications using SHA256 RFC 3161 timestamp
","The problem is solved on .NET Framework 4.7.2. 
.NET Blog - Announcing the .NET Framework 4.7.2
https://blogs.msdn.microsoft.com/dotnet/2018/04/30/announcing-the-net-framework-4-7-2/
See the area.
ClickOnce – Enable SHA256 timestamping of Deployment Manifests
","716","<clickonce><sha256><mage><rsa-sha256>","5","1","1","2018-07-22 21:43:54","","2","","","","","2017-12-05 11:54:38",""
"48519229","How to validate DKIM body hash manually?","
This is an auto forwarded email.
I'm trying to verify the bh field as per rfc5322.
But the sha256 hash value received is not matching this value.
The message body is: for forwarded mail 
Any suggestions to validate the bh= field correctly?
I have included some sample header field data. Please do explain (relaxed) canonical procedure too
    DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed; t=1516798995;
        s=jan2017; d=headsup.co.in; i=sender@headsup.co.in;
        h=Date:From:To:Message-Id:Subject:MIME-Version:Content-Type; l=627;
        bh=ODw8icD/S+4UGcXgR4ocNpxXDh4PolWtd1IUXjh0AUs=;
        b=G2vTZ+uQ+krw49l+4aMnaeZjUvAJXPPRA8bvOhs3XZNbd2Ng+odB/F5PI3tRpdhr
        C0CJA5KPv4VncP2V1PjNdkgKLjs1eTzLSaqmPjhhQDc8mWQRT0rzcPP3V9v6BeXF987
        54Zns/QWtR+RbSacFXvUjyBEOlaWUVAmaVcqw5S8=

    //Message: for forwarded mail
  //Example Data
    Date: Wed, 24 Jan 2018 18:33:08 +0530
    From: sender <sender@headsup.co.in>
    To: ""receiver"" <receiver@gmail.com>
    Message-Id: <1612843d10d.d305604a24030.1212846966506749871@headsup.co.in>
    Subject: Test Arc Seal
    MIME-Version: 1.0
    Content-Type: multipart/alternative; 
        boundary=""----=_Part_76205_1329960269.1516798988558""
    X-Priority: Medium  






//Cannonicalization code (relaxed)
package canonicalization;

import java.io.IOException;



public class Canonicalization {


        public String canonicalizeHeader(String name, String value) {
            name = name.trim().toLowerCase();
            value = value.replaceAll(""\\s+"", "" "").trim();
            return name + "":"" + value;
        }

        public String canonicalizeBody(String body) {

            if (body == null || """".equals(body)) {
                return ""\r\n"";
            }

            body = body.replaceAll(""[ \\t\\x0B\\f]+"", "" "");
            body = body.replaceAll("" \r\n"", ""\r\n"");

            // The body must end with \r\n
            if (!body.endsWith(""\r\n"")) {
                return body + ""\r\n"";
            }

            // Remove trailing empty lines ...
            while (body.endsWith(""\r\n\r\n"")) {
                body = body.substring(0, body.length() - 2);
            }

            return body;

        }
        public static void main(String[] args) {
            Canonicalization obj=new Canonicalization();
            System.out.println(obj.canonicalizeHeader(""Date"","" Wed, 24 Jan 2018 18:33:08 +0530""));
            System.out.println(obj.canonicalizeHeader(""From"","" sender <sender@headsup.co.in>""));
            System.out.println(obj.canonicalizeHeader(""To"","" \""receiver\"" <receiver@gmail.com>""));

            System.out.println(obj.canonicalizeBody(""for forwarded mail""));

        } 
}

","You don't provide any code to illustrate how you are attempting to verify the body hash, but most likely you are incorrectly canonicalizing the input fed to the hashing function.
","714","<email><sha256><dkim>","0","0","2","2018-02-01 13:21:55","48563804","0","","9234434","","2018-01-31 08:16:01","2018-01-30 10:31:35",""
"48519229","How to validate DKIM body hash manually?","
This is an auto forwarded email.
I'm trying to verify the bh field as per rfc5322.
But the sha256 hash value received is not matching this value.
The message body is: for forwarded mail 
Any suggestions to validate the bh= field correctly?
I have included some sample header field data. Please do explain (relaxed) canonical procedure too
    DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed; t=1516798995;
        s=jan2017; d=headsup.co.in; i=sender@headsup.co.in;
        h=Date:From:To:Message-Id:Subject:MIME-Version:Content-Type; l=627;
        bh=ODw8icD/S+4UGcXgR4ocNpxXDh4PolWtd1IUXjh0AUs=;
        b=G2vTZ+uQ+krw49l+4aMnaeZjUvAJXPPRA8bvOhs3XZNbd2Ng+odB/F5PI3tRpdhr
        C0CJA5KPv4VncP2V1PjNdkgKLjs1eTzLSaqmPjhhQDc8mWQRT0rzcPP3V9v6BeXF987
        54Zns/QWtR+RbSacFXvUjyBEOlaWUVAmaVcqw5S8=

    //Message: for forwarded mail
  //Example Data
    Date: Wed, 24 Jan 2018 18:33:08 +0530
    From: sender <sender@headsup.co.in>
    To: ""receiver"" <receiver@gmail.com>
    Message-Id: <1612843d10d.d305604a24030.1212846966506749871@headsup.co.in>
    Subject: Test Arc Seal
    MIME-Version: 1.0
    Content-Type: multipart/alternative; 
        boundary=""----=_Part_76205_1329960269.1516798988558""
    X-Priority: Medium  






//Cannonicalization code (relaxed)
package canonicalization;

import java.io.IOException;



public class Canonicalization {


        public String canonicalizeHeader(String name, String value) {
            name = name.trim().toLowerCase();
            value = value.replaceAll(""\\s+"", "" "").trim();
            return name + "":"" + value;
        }

        public String canonicalizeBody(String body) {

            if (body == null || """".equals(body)) {
                return ""\r\n"";
            }

            body = body.replaceAll(""[ \\t\\x0B\\f]+"", "" "");
            body = body.replaceAll("" \r\n"", ""\r\n"");

            // The body must end with \r\n
            if (!body.endsWith(""\r\n"")) {
                return body + ""\r\n"";
            }

            // Remove trailing empty lines ...
            while (body.endsWith(""\r\n\r\n"")) {
                body = body.substring(0, body.length() - 2);
            }

            return body;

        }
        public static void main(String[] args) {
            Canonicalization obj=new Canonicalization();
            System.out.println(obj.canonicalizeHeader(""Date"","" Wed, 24 Jan 2018 18:33:08 +0530""));
            System.out.println(obj.canonicalizeHeader(""From"","" sender <sender@headsup.co.in>""));
            System.out.println(obj.canonicalizeHeader(""To"","" \""receiver\"" <receiver@gmail.com>""));

            System.out.println(obj.canonicalizeBody(""for forwarded mail""));

        } 
}

","The code works fine for emails sent in plaintext format (Content-Type: text/plain;)
But by default, emails are sent by Rich Text Format (Content-Type: multipart/alternative;), hence the body hashes did not match
","714","<email><sha256><dkim>","0","0","2","2018-02-01 13:21:55","48563804","0","","9234434","","2018-01-31 08:16:01","2018-01-30 10:31:35",""
"42784876","Using PyCrypto to calculate SHA256 hash of RSA public key","I used OpenSSL to generate a 2048-bit RSA key:
openssl genrsa -out mykey.pem 2048
openssl rsa -pubout -in mykey.pem -out mypubkey.pub

I would like to use OpenSSL to calculate the SHA256 hash value of the public key (not the file, just the key)
I used the command: dgst -sha256 mypubkey.pub
The hash value generated by OpenSSL was:
876e4b63c2fa294c27e07c7449f5cb7ce2edae6deb74370440550700db67bbc3
Am I doing it right? As in getting the SHA256 hash value of the public key value and not the whole key file.
Also, how do I use PyCrypto to verify this?
The public key was:
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApOa9doLz8vrN9aNfGf/m
iUT1czZz2PDWIVY5OtUXSB/Xm/26+QBKTR0si4vF2FW3rwn6ayBcYvGzsmtmwwA8
tfRWw78XrgeHevynKvZXVbsggI2gJqwPQr/xvmyfUrYj/EOgG72ryJo219dFJBCR
4gB6K/ZfIS8qLO4c4+z2WaXxZDDeur2X21UttTzIk878NT+VASmdt/avjsc7K5bD
Wu2Wmtg82LTPHCp56NgV08tMX9QUacidJzQ02eK1hWuDkpz1BRWXbE3Jas+sNBqN
mWMSRZ3sxMblQKNXVaXy/0IU9M5EHZEC135M2lHiumzJSZPs0pckjJFOTT2pTo2c
wQIDAQAB

","","713","<rsa><sha256><pycrypto>","0","","0","2017-03-14 14:52:47","","3","","608639","","2017-03-14 14:52:47","2017-03-14 11:33:28",""
"48355306","NodeJS/JS How to correctly hash object json and string (concatenation) via sha256","Good morning, 
I want to hash object params and string (concatenation) via sha256., but I do not know how to do it correctly. 
My object: 
var params = {
   ""name"": ""kacper"",
   ""age"": 23
};
var string = ""string to hash"";

I used for it library sha256 from npm, but my encode hash is incorectly.
Attempt hash:
var sha256 = require('sha256');
var hashing = sha256(params+stirng);
console.log(hashing);


Thans for yours help.
","Let's first understand what params+string does exactly. params is converted into a string, resulting in [object Object]. Then your final string is [object Object]string to hash.
Instead, you might want to get the entire params object as a string. This can be done with JSON.stringify.
console.log(JSON.stringify(params) + string);

the result is then {""name"":""kacper"",""age"":23}string to hash.
Is this what you were looking for? It might be a better practice to make an object with params and string as fields.
var obj = {
  ""params"": {
    ""name"": ""kacper"",
    ""age"": 23
  },
  ""string"": ""string to hash""
}

console.log(sha256(JSON.stringify(obj)));

","711","<javascript><json><node.js><hash><sha256>","1","1","1","2018-01-20 11:36:47","","0","","","","","2018-01-20 11:01:32",""
"11004861","bcrypt or progressive passes of sha256?","It seems that the current best practice for storing passwords on the web is to use bcrypt as opposed to sha256 or any other hashing algorithm.  Bcrypt seems fantastic, with one flaw as I see it:  if I have a database filled with passwords using a work factor of 10 and I want to increase that work factor to 12 because computational power has increased, then I have no way of doing this without knowing the users password, meaning waiting until they login again.  This causes problems for uses who have abandoned their account.
It seems to me then that an alternate solution would be to use sha256 and do a number of passes equal to 2^(work factor).  If I do this, then when I want to increase the work factor I can just do the difference in the number of passes for every stored password.
I've written a bit of code to do exactly that, and I'd like to get feedback from everyone on whether this is a good idea or not.
https://github.com/rbrcurtis/pcrypt
","Did a lot of digging and reading papers on these various encryption algorithms. What finally gave me a sort-of answer was this question on crypto.stackexchange.com. My algorithm is somewhat similar to shacrypt, which I hadn't heard of previously, but is still not as good as bcrypt. Reason being that bcrypt, in addition to the work factor, also requires more memory to process than the sha2 family. This means that it cannot as effectively be parallelized in GPUs (although to some extent it can be, and more easily in an FPGA) while sha2 can (and easily).  As such, no matter how many passes of sha2 one does, it will still not be as effective as bcrypt.  
As an aside, scrypt is significantly better still because it has both a work factor for CPU and a memory factor (and as such is essentially impossible to parallelize in a GPU or FPGA).  The only issue is that the nodejs library for scrypt is essentially unusable at present so that might be something to put some effort into.
","710","<sha256><bcrypt><password-storage>","2","1","2","2014-03-14 19:20:38","","8","1","","","","2012-06-12 21:04:59",""
"11004861","bcrypt or progressive passes of sha256?","It seems that the current best practice for storing passwords on the web is to use bcrypt as opposed to sha256 or any other hashing algorithm.  Bcrypt seems fantastic, with one flaw as I see it:  if I have a database filled with passwords using a work factor of 10 and I want to increase that work factor to 12 because computational power has increased, then I have no way of doing this without knowing the users password, meaning waiting until they login again.  This causes problems for uses who have abandoned their account.
It seems to me then that an alternate solution would be to use sha256 and do a number of passes equal to 2^(work factor).  If I do this, then when I want to increase the work factor I can just do the difference in the number of passes for every stored password.
I've written a bit of code to do exactly that, and I'd like to get feedback from everyone on whether this is a good idea or not.
https://github.com/rbrcurtis/pcrypt
","A potential solution for upping the number of bcrypt passes(or work factor. I don't actually use bcrypt but this is an algorithm-agnostic answer):
For each entry the table where your passwords are stored, also store the number of passes it was hashed with. When you up to more passes, save all new passwords with that number of passes, and set all passwords with less passes than that to expire in 7 days. When they make a new password, hash it with the right number of passes.
Alternatively, you can not reset the password, but the next time they try to login, rehash their password and store it in the table. This does mean that if people haven't logged in, in a long time, their passwords are more susceptible to breach in the event of a DB comprimise. That being said, it's more worth it for the attacker to attack the mass of people with more passes, than the few with less passes(nevermind, because of salts, this last sentence is wrong).
","710","<sha256><bcrypt><password-storage>","2","0","2","2014-03-14 19:20:38","","8","1","","","","2012-06-12 21:04:59",""
"7893805","How does MySQL know which algorithm to use when reading logins stored in mysql.user?","I see that MySQL 5.5 allows use of SHA-2() for setting passwords, and that straight MD5 hashes are insecure and should no longer be used (ditto for default PASSWORD function).  
Before I go UPDATE happy and change a bunch of passwords, how does MySQL know which algorithm to use to check my supplied password?  Does it magically know what algorithm was used to encrypt the user's password, or do we specify this in the conf file? 
UPDATE:
I tested with a new account to see what happens.  Using PASSWORD('mypass') works however applying SHA1('mypass') results in that account not being able to log in.  
","Probably by the length of the hash stored in the table.  An MD5 hash would be 128 bits, a SHA1 hash would be 160 bits, and a SHA2 hash would be at least 224 bits.
","708","<mysql><passwords><sha256><sha2>","1","1","1","2011-10-25 19:03:17","7893858","2","","721073","","2011-10-25 19:03:17","2011-10-25 18:08:39",""
"35477438","MATH? SHA256 Roulette / Lottery computable?","There is a website where you can play roulette, you can put on the colors only (red, black = double, green = 14x)
The rolls are computed by the following way:
There is a serverSeed EVERY 24 hours its different
This is a precomputed value generated some time in the past.
Seeds are generated in a chain such that today's seed is the hash of tomorrow's seed. Since there is no way to reverse SHA-256 we can prove each seed was generated in advance by working backwards from a precomputed chain.
There is a lotto and round_id too but they are given only the serverSeed is hidden until next day.
Example:
$server_seed = ""39b7d32fcb743c244c569a56d6de4dc27577d6277d6cf155bdcba6d05befcb34"";
$lotto = ""0422262831"";
$round_id = ""1"";
$hash = hash(""sha256"",$server_seed.""-"".$lotto.""-"".$round_id);
$roll = hexdec(substr($hash,0,8)) % 15;
echo ""Round $round_id = $roll"";

This is how rolls are generated with making a new hash everyround as the round ID increments by 1 every roll, the serverSeed and the lotto remains the same whole day.
There is also a history page on the website where you can check every rolled color and number in the past.
My Question: Is there anyway to compute the next roll by the already rolled numbers? (I dont talk about reversing the SHA256 serverSeed or anything like that!!!)
But really isnt any math in this?
I know its MIGHT be all random but i cant imagine this is random.
Here are the yesterday's rolls where you can see the Round IDs too.
I saw the rolls a lot of time repeat sometimes but sometimes its not... I cant believe it doesnt have any math in it.
>>>> LUCK? OR MATH? <<<<
Waiting for answers...
","The method is an example of ""KDF in Counter Mode"" as defined in NIST SP 800-108, with SHA256 as ""PRF"". As far as i know this method is considered a secure random number generator. So the answer is ""There is no math in it, repetitions are just luck"".
","705","<math><random><repeat><sha256><seed>","0","0","1","2016-02-18 12:04:51","","0","1","","","","2016-02-18 09:25:58",""
"23245672","Ruby OpenSSL vs Linux openssl","I have a difficulty reconciling Ruby's OpenSSL library with the standard Linux command line openssl.
What I'm trying to do here is encrypt the string mysecretstring with the password foobar but first hashing the password using sha256 (mimicking the code in the aescrypt gem).
Here is what I do in IRB:
2.0.0-p353 :041 > aes = OpenSSL::Cipher::Cipher.new(""AES-256-CBC"")
 => #<OpenSSL::Cipher::Cipher:0x000000026b8d50> 
2.0.0-p353 :042 > aes.encrypt
 => #<OpenSSL::Cipher::Cipher:0x000000026b8d50> 
2.0.0-p353 :043 > aes.key=OpenSSL::Digest::SHA256.new('foobar').digest
 => ""\xC3\xAB\x8F\xF17 \xE8\xAD\x90G\xDD9Fk<\x89t\xE5\x92\xC2\xFA8=J9`qL\xAE\xF0\xC4\xF2"" 
2.0.0-p353 :044 > Base64.encode64(aes.update('mysecretstring')+aes.final)
 => ""305V0Kbklj/HoBSK4ferhA==\n"" 
2.0.0-p353 :045 > 

So far so good. Now I want to see how this matches what I can do with openssl directly in the linux command line.
[(master)]$ echo -n ""foobar"" | openssl dgst -sha256 -c
(stdin)= c3:ab:8f:f1:37:20:e8:ad:90:47:dd:39:46:6b:3c:89:74:e5:92:c2:fa:38:3d:4a:39:60:71:4c:ae:f0:c4:f2
[(master)]$ echo -n ""mysecretstring"" | openssl enc -e -aes-256-cbc -a
enter aes-256-cbc encryption password:
Verifying - enter aes-256-cbc encryption password:
U2FsdGVkX18EOcTrTMNQuCRnstUe6oY9b5RLuTOFcNo=
[(master)]$ 

where in the last two steps I pasted the string c3:ab:8f:f1:37:20:e8:ad:90:47:dd:39:46:6b:3c:89:74:e5:92:c2:fa:38:3d:4a:39:60:71:4c:ae:f0:c4:f2 
that I got by hashing the password 'foobar' in the first step.
Why am I not getting the same answer, and more importantly, what do I need to do in the linux cmd to mimic what I get from Ruby?
","You need to use the -K option in your openssl line. Then you can provide the hexadecimal key. Otherwise OpenSSL uses it's own key derivation mechanism to derive a key from the password. When supplying -K you should also supply -iv. In this case, to be compatible, the IV should consist of 16 bytes set to zero.
So try the following line:
echo -n ""mysecretstring"" | openssl enc -e -aes-256-cbc -a -K c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2 -iv 00000000000000000000000000000000

","702","<ruby><openssl><aes><sha256>","3","1","1","2014-04-27 11:00:10","","0","","2019611","","2014-04-23 13:31:06","2014-04-23 13:21:15",""
"36030528","Convert C# HMAC SHA256 to PHP","I've a C# method which I have to convert to PHP. I tried several things, but I still get different results. Unfortunately I cannot change anything on the C# application. It has to be as it is. Maybe one of you could help?
C#:
static public void Main ()
{
    string StringToSign = ""test"";
    string Key = ""123456"";

    //Calculate Signature
    string Signature = CalculateSignature(StringToSign, Key);

    Console.WriteLine (""StringToSign: "" + StringToSign);
    Console.WriteLine (""Key: "" + Key);
    Console.WriteLine (""Signature Caculated: "" + Signature + ""\r\n"");
}

static private string CalculateSignature(String StringToSign, String Key)
{
    Encoding enc = Encoding.GetEncoding(65001);

    byte[] KeyHex = StringHexValuesToByteArray(Key);
    byte[] StringToSign_byte = enc.GetBytes(StringToSign);

    //Check Signature
    HMACSHA256 hmac = new HMACSHA256(KeyHex);
    byte[] hashValue = hmac.ComputeHash(StringToSign_byte);

    return BitConverter.ToString(hashValue).Replace(""-"", """");
}

static public byte[] StringHexValuesToByteArray(string str)
{
    if (str.Length % 2 != 0)
        return null;

    string s = string.Empty;
    byte[] ret = new byte[str.Length / 2];

    for (int run = 0; run < str.Length / 2; run++)
    {
        s = str.Substring(run * 2, 2);
        ret[run] = Convert.ToByte(s, 16);
    }
    return ret;
}

PHP:
public function send() {

    $stringToSign = 'test';
    $key = '123456';

    //Calculate Signature
    $signature = $this->calculateSignature($stringToSign, $key);

    print_r(""StringToSign: "" . $stringToSign . PHP_EOL);
    print_r(""Key: "" . $key . PHP_EOL);
    print_r(""Signature Caculated: "" . $signature . PHP_EOL);
}

private function calculateSignature($stringToSign, $key) {

    // check signature
    $hash = strtoupper(hash_hmac('sha256', $stringToSign, $key, false));
    return $hash;
}

For better understanding, here is the output of the code blocks above:
C#

StringToSign: test 
Key: 123456 
Signature Caculated:
  DA3617974490FB780F04F06287BF93B0F24A7F15970471146428B943FFDC7850

PHP

StringToSign: test
GroupKey: 123456
Signature Caculated: 9D2BB116E1DF997FFE8A5139FC1D187F976C19579A138414A112BC2E39020EBA

","If you want to modify the PHP to make it equivalent to C#
Change
$hash = strtoupper(hash_hmac('sha256', $stringToSign, $key, false));

to
$hash = strtoupper(hash_hmac('sha256', $stringToSign, hex2bin($key), false));

Be sure to check the code will work for non-ASCII characters like àèéìòù.
ideone here.
If you want to modify the C# code to make it equivalent to PHP
You are complicating everything:
static private string CalculateSignature(String stringToSign, String key)
{
    byte[] key_byte = Encoding.UTF8.GetBytes(key);
    byte[] stringToSign_byte = Encoding.UTF8.GetBytes(stringToSign);

    //Check Signature
    HMACSHA256 hmac = new HMACSHA256(key_byte);
    byte[] hashValue = hmac.ComputeHash(stringToSign_byte);

    return BitConverter.ToString(hashValue).Replace(""-"", """");
}

There is nothing hex. And instead of using Encoding.GetEncoding(65001) it is normally better to use Encoding.UTF8, because it is clearer for everyone.
Note that there could be problems with the encoding. Try calculating the hmac of something like àèéìòù to see which encoding the PHP is using.
","701","<c#><php><sha256><hmac>","1","1","1","2016-03-16 09:09:06","36030632","0","0","4991113","","2016-03-16 08:56:37","2016-03-16 08:43:00",""
"35692720","Meteor, how to change the way to hash password from sha-256 to md5","When do integration from an old system to a new system which base on Rocket.Chat, and Rocket.Chat base on meteor.  the old system use md5 to hash password, but in meteor is sha-256. Now I need change the way from sha-256 to md5 in meteor. Any thoughts, thx.
","Meteor accounts-password has a dependency called bcrypt with is more secure than md5.
","701","<meteor><passwords><integration><md5><sha256>","2","0","1","2016-02-29 17:03:31","","3","","","","","2016-02-29 05:44:18",""
"46075829","Different results generating SHA256 hash with .Net and react native library (same input)","In .Net I'm generating a hash this way:
Convert.ToBase64String(SHA256.Create().ComputeHash(Encoding.UTF8.GetBytes(""123456"")));

The result is: ""jZae727K08KaOmKSgOaGzww/XVqGr/PKEgIMkjrcbJI=""
Now I'm generating a hash in a React Native app with this library:
import { sha256 } from 'react-native-sha256';
return await sha256('123456');

And the result is: ""8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92""
Not sure what I'm doing wrong...
EDIT:
Final solution (thanks Martin Backasch):
var inputBytes = Encoding.UTF8.GetBytes(""123456"");
var hashBytes = SHA256.Create().ComputeHash(inputBytes);
return BitConverter.ToString(hashBytes).Replace(""-"", string.Empty).ToLower();

","The result from the library is HEX.
You have to convert it to Base64
Try it here.
Input:  
""8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92""

Output:
""jZae727K08KaOmKSgOaGzww/XVqGr/PKEgIMkjrcbJI=""


You can convert your C# result from Base64 to HEX by using the example given by microsoft or as a quick snippet:
var yourResult = Convert.ToBase64String(SHA256.Create()
                                              .ComputeHash(Encoding.UTF8
                                                                   .GetBytes(""123456"")));

var apiResult = ""8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92"";

var yourHexResult = BitConverter.ToString(Convert.FromBase64String(yourResult))
                                .Replace(""-"", string.Empty)
                                .ToLower();

Debug.Assert(yourHexResult == apiResult, ""yourHexResult != apiResult"");

","698","<c#><react-native><sha256>","1","3","1","2017-09-07 05:57:57","46076736","0","","2295643","","2017-09-07 05:57:57","2017-09-06 12:54:31",""
"18699268","I'm generating a SHA256 hash of few files and some of them return 63 characters instead of 64. How can it be possible?","I need the hash function always to return 64 char hex but sometimes, depending on a file, it returns 63 and that's a problem for me. Due to business reasons I need always 64 chars. And that happens completely random with Any kind and size of file.  Does anyone know why it happens? Follow my code:
public static String geraHash(File f) throws NoSuchAlgorithmException, FileNotFoundException  
{  
    MessageDigest digest = MessageDigest.getInstance(""SHA-256"");  
    InputStream is = new FileInputStream(f);  
    byte[] buffer = new byte[8192];  
    int read = 0;  
    String output = null;  
    try  
    {  
        while( (read = is.read(buffer)) > 0)  
        {  
            digest.update(buffer, 0, read);  
        }  
        byte[] md5sum = digest.digest();  
        BigInteger bigInt = new BigInteger(1,md5sum);
        output = bigInt.toString(16);  
    }  
    catch(IOException e)  
    {  
        throw new RuntimeException(""Não foi possivel processar o arquivo."", e);  
    }  
    finally  
    {  
        try  
        {  
            is.close();  
        }  
        catch(IOException e)  
        {  
            throw new RuntimeException(""Não foi possivel fechar o arquivo"", e);  
        }  
    }  

    return output;  
}  

","In fact, there is 32 byte. Just first half of first byte is zero. (first byte looks like: 0000 xxxx)
So, when you are converting it to string, it has 63 hex value which is 31.5 bytes, so it is 32 bytes in bytes. This (32 byte) is exactly what it should to be.
You can just write 0 start of string when its length is 63.
if (output.length == 63){
    output = ""0"" + output;
}

or
while (output.length < 64){
    output = ""0"" + output;
}

","698","<java><sha256>","0","0","1","2013-09-09 13:37:16","","2","3","161455","","2013-09-09 13:33:26","2013-09-09 13:23:52",""
"30191859","Iterative hashing returns different values in Python and Java","I'm trying to port a python (2.7) script to Java. It iterates a sha256 hash several times but they end up with different results. I've noticed the first time they return the same result, but from there on it differs.
Here is the Python implementation:
import hashlib

def to_hex(s):
  print "" "".join(hex(ord(i)) for i in s)

d = hashlib.sha256()

print ""Entry:""
r = chr(1)
to_hex(r)

for i in range(2):
  print ""Loop"", i
  d.update(r)
  r = d.digest()
  to_hex(r)

And in Java:
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class LoopTest {

  public static void main(String[] args) {
    MessageDigest d;
    try {
      d = MessageDigest.getInstance(""SHA-256"");
    } catch (NoSuchAlgorithmException e) {
      System.out.println(""NoSuchAlgorithmException"");
      return;
    }

    System.out.println(""Entry:"");
    byte[] r = new byte[] {1};
    System.out.println(toHex(r));

    for(int i = 0; i < 2; i++) {
      System.out.printf(""Loop %d\n"", i);
      d.update(r);
      r = d.digest();
      System.out.println(toHex(r));
    }
  }

  private static String toHex(byte[] bytes) {
    StringBuilder sb = new StringBuilder(bytes.length);
    for (byte b: bytes) {
       sb.append(String.format(""0x%02X "", b));
    }
    return sb.toString();
  }
}

The outputs are, for python:
$ python looptest.py
Entry:
0x1
Loop 0
0x4b 0xf5 0x12 0x2f 0x34 0x45 0x54 0xc5 0x3b 0xde 0x2e 0xbb 0x8c 0xd2 0xb7 0xe3 0xd1 0x60 0xa 0xd6 0x31 0xc3 0x85 0xa5 0xd7 0xcc 0xe2 0x3c 0x77 0x85 0x45 0x9a
Loop 1
0x98 0x1f 0xc8 0xd4 0x71 0xa8 0xb0 0x19 0x32 0xe3 0x84 0xac 0x1c 0xd0 0xa0 0x62 0xc4 0xdb 0x2c 0xe 0x13 0x58 0x61 0x9a 0x83 0xd1 0x67 0xf5 0xe8 0x4e 0x6a 0x17

And for java:
$ java LoopTest
Entry:
0x01
Loop 0
0x4B 0xF5 0x12 0x2F 0x34 0x45 0x54 0xC5 0x3B 0xDE 0x2E 0xBB 0x8C 0xD2 0xB7 0xE3 0xD1 0x60 0x0A 0xD6 0x31 0xC3 0x85 0xA5 0xD7 0xCC 0xE2 0x3C 0x77 0x85 0x45 0x9A
Loop 1
0x9C 0x12 0xCF 0xDC 0x04 0xC7 0x45 0x84 0xD7 0x87 0xAC 0x3D 0x23 0x77 0x21 0x32 0xC1 0x85 0x24 0xBC 0x7A 0xB2 0x8D 0xEC 0x42 0x19 0xB8 0xFC 0x5B 0x42 0x5F 0x70

What could be the reason for this difference?
Edit:
Thanks for the answers @dcsohl and @Alik I understand the reason now. Since I'm porting the Python script to Java I had to keep the Python one as it is so I modified the Java program like this:
byte[] r2 = new byte[]{};
for(int i = 0; i < 2; i++) {
  System.out.printf(""Loop %d\n"", i);
  d.update(r);
  r2 = d.digest();
  System.out.println(toHex(r2));
  byte[] c = new byte[r.length + r2.length];
  System.arraycopy(r, 0, c, 0, r.length);
  System.arraycopy(r2, 0, c, r.length, r2.length);
  r = c;
}

","The two languages run update() and digest() differently.
The python documentation for update() says

Update the hash object with the string arg. Repeated calls are equivalent to a single call with the concatenation of all the arguments: m.update(a); m.update(b) is equivalent to m.update(a+b).

I tested this by using the shell sha256sum command.
echo -n '\0x01\0x4b\0xf5\0x12\0x2f\0x34\0x45\0x54\0xc5\0x3b\0xde\0x2e\0xbb\0x8c\0xd2\0xb7\0xe3\0xd1\0x60\0xa\0xd6\0x31\0xc3\0x85\0xa5\0xd7\0xcc\0xe2\0x3c\0x77\0x85\0x45\0x9a' | sha256sum
981fc8d471a8b01932e384ac1cd0a062c4db2c0e1358619a83d167f5e84e6a17 *-

You started with \0x01 so that's the first byte, and then the rest of the bytes are the hash of 0x01. The resultant hash matches your Python output.
Now look at this - I omitted the initial \0x01 and got the hash back - it matches your Java output.
> echo -n '\0x4b\0xf5\0x12\0x2f\0x34\0x45\0x54\0xc5\0x3b\0xde\0x2e\0xbb\0x8c\0xd2\0xb7\0xe3\0xd1\0x60\0xa\0xd6\0x31\0xc3\0x85\0xa5\0xd7\0xcc\0xe2\0x3c\0x77\0x85\0x45\0x9a' | sha256sum
9c12cfdc04c74584d787ac3d23772132c18524bc7ab28dec4219b8fc5b425f70 *-

But why? Shouldn't the initial \0x01 be included? It would be, except that the javadoc for digest() says:

Completes the hash computation by performing final operations such as padding. The digest is reset after this call is made.

So your initial \0x01 gets dropped when you call digest() in java, and you are simply digesting the old digest without the initial \0x01 entry.
","695","<java><python><sha256>","3","2","2","2015-05-12 14:17:47","30192502","0","3","3557327","","2015-05-12 14:17:47","2015-05-12 13:07:34",""
"30191859","Iterative hashing returns different values in Python and Java","I'm trying to port a python (2.7) script to Java. It iterates a sha256 hash several times but they end up with different results. I've noticed the first time they return the same result, but from there on it differs.
Here is the Python implementation:
import hashlib

def to_hex(s):
  print "" "".join(hex(ord(i)) for i in s)

d = hashlib.sha256()

print ""Entry:""
r = chr(1)
to_hex(r)

for i in range(2):
  print ""Loop"", i
  d.update(r)
  r = d.digest()
  to_hex(r)

And in Java:
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class LoopTest {

  public static void main(String[] args) {
    MessageDigest d;
    try {
      d = MessageDigest.getInstance(""SHA-256"");
    } catch (NoSuchAlgorithmException e) {
      System.out.println(""NoSuchAlgorithmException"");
      return;
    }

    System.out.println(""Entry:"");
    byte[] r = new byte[] {1};
    System.out.println(toHex(r));

    for(int i = 0; i < 2; i++) {
      System.out.printf(""Loop %d\n"", i);
      d.update(r);
      r = d.digest();
      System.out.println(toHex(r));
    }
  }

  private static String toHex(byte[] bytes) {
    StringBuilder sb = new StringBuilder(bytes.length);
    for (byte b: bytes) {
       sb.append(String.format(""0x%02X "", b));
    }
    return sb.toString();
  }
}

The outputs are, for python:
$ python looptest.py
Entry:
0x1
Loop 0
0x4b 0xf5 0x12 0x2f 0x34 0x45 0x54 0xc5 0x3b 0xde 0x2e 0xbb 0x8c 0xd2 0xb7 0xe3 0xd1 0x60 0xa 0xd6 0x31 0xc3 0x85 0xa5 0xd7 0xcc 0xe2 0x3c 0x77 0x85 0x45 0x9a
Loop 1
0x98 0x1f 0xc8 0xd4 0x71 0xa8 0xb0 0x19 0x32 0xe3 0x84 0xac 0x1c 0xd0 0xa0 0x62 0xc4 0xdb 0x2c 0xe 0x13 0x58 0x61 0x9a 0x83 0xd1 0x67 0xf5 0xe8 0x4e 0x6a 0x17

And for java:
$ java LoopTest
Entry:
0x01
Loop 0
0x4B 0xF5 0x12 0x2F 0x34 0x45 0x54 0xC5 0x3B 0xDE 0x2E 0xBB 0x8C 0xD2 0xB7 0xE3 0xD1 0x60 0x0A 0xD6 0x31 0xC3 0x85 0xA5 0xD7 0xCC 0xE2 0x3C 0x77 0x85 0x45 0x9A
Loop 1
0x9C 0x12 0xCF 0xDC 0x04 0xC7 0x45 0x84 0xD7 0x87 0xAC 0x3D 0x23 0x77 0x21 0x32 0xC1 0x85 0x24 0xBC 0x7A 0xB2 0x8D 0xEC 0x42 0x19 0xB8 0xFC 0x5B 0x42 0x5F 0x70

What could be the reason for this difference?
Edit:
Thanks for the answers @dcsohl and @Alik I understand the reason now. Since I'm porting the Python script to Java I had to keep the Python one as it is so I modified the Java program like this:
byte[] r2 = new byte[]{};
for(int i = 0; i < 2; i++) {
  System.out.printf(""Loop %d\n"", i);
  d.update(r);
  r2 = d.digest();
  System.out.println(toHex(r2));
  byte[] c = new byte[r.length + r2.length];
  System.arraycopy(r, 0, c, 0, r.length);
  System.arraycopy(r2, 0, c, r.length, r2.length);
  r = c;
}

","In Java d.digest returns message digest and resets digest in the end.
In Python d.digest doesn't reset digest. Thus, repeated calls d.update actually concatenate with what was passed on previous calls
You can simply put d = hashlib.sha256() inside the loop
import hashlib

def to_hex(s):
  print "" "".join(hex(ord(i)) for i in s)



print ""Entry:""
r = chr(1)
to_hex(r)

for i in range(2):
  print ""Loop"", i
  d = hashlib.sha256()
  d.update(r)
  r = d.digest()
  to_hex(r)

to get the same results as you java program
Entry:
0x1
Loop 0
0x4b 0xf5 0x12 0x2f 0x34 0x45 0x54 0xc5 0x3b 0xde 0x2e 0xbb 0x8c 0xd2 0xb7 0xe3 0xd1 0x60 0xa 0xd6 0x31 0xc3 0x85 0xa5 0xd7 0xcc 0xe2 0x3c 0x77 0x85 0x45 0x9a
Loop 1
0x9c 0x12 0xcf 0xdc 0x4 0xc7 0x45 0x84 0xd7 0x87 0xac 0x3d 0x23 0x77 0x21 0x32 0xc1 0x85 0x24 0xbc 0x7a 0xb2 0x8d 0xec 0x42 0x19 0xb8 0xfc 0x5b 0x42 0x5f 0x70

","695","<java><python><sha256>","3","1","2","2015-05-12 14:17:47","30192502","0","3","3557327","","2015-05-12 14:17:47","2015-05-12 13:07:34",""
"35912919","Sign file with SHA-256 Algorithm","I have a function that signing an XML file with a X509Certificate2 certificate. My problem is that the signature is inserted as SHA-1 and SHA-256 instead. What did I do wrong in my code?
CmsSigner cms = new CmsSigner(oCert);
//if apply this row receive unknow error!
//cms.DigestAlgorithm = new Oid(""2.16.840.1.101.3.4.2.1""); 

ContentInfo ci = new ContentInfo(File.ReadAllBytes(cFileXml));
SignedCms cmssigned = new SignedCms(ci);
cmssigned.ComputeSignature(cms);
byte[] encodedmessage = cmssigned.Encode();

File.WriteAllBytes(cFile + "".p7m"", encodedmessage);

","I say to myself. This is the simply solution:
                string PIN = Leo.LeggiFirmacert();
            System.Security.SecureString SecurePIN = new System.Security.SecureString();
            foreach (char ch in PIN)
            { SecurePIN.AppendChar(ch); }
            var rsa = (RSACryptoServiceProvider)cert.PrivateKey;
            string ContinerName = rsa.CspKeyContainerInfo.KeyContainerName;
            string CspName = rsa.CspKeyContainerInfo.ProviderName;
            int CspType = rsa.CspKeyContainerInfo.ProviderType;
            CspParameters csp = new CspParameters(CspType, CspName, ContinerName, new System.Security.AccessControl.CryptoKeySecurity(), SecurePIN);
            SHA256Managed hashSha256 = new SHA256Managed();
            byte[] certHash = hashSha256.ComputeHash(cert.RawData);
            EssCertIDv2 essCert1 = new EssCertIDv2(new Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier(""2.16.840.1.101.3.4.2.1""), certHash);
            SigningCertificateV2 scv2 = new SigningCertificateV2(new EssCertIDv2[] { essCert1 });

            Org.BouncyCastle.Asn1.Cms.Attribute CertHAttribute = new Org.BouncyCastle.Asn1.Cms.Attribute(Org.BouncyCastle.Asn1.Pkcs.PkcsObjectIdentifiers.IdAASigningCertificateV2, new DerSet(scv2));
            Asn1EncodableVector v = new Asn1EncodableVector();
            v.Add(CertHAttribute);
            Org.BouncyCastle.Asn1.Cms.AttributeTable AT = new Org.BouncyCastle.Asn1.Cms.AttributeTable(v);
            CmsSignedDataGenWithRsaCsp cms = new CmsSignedDataGenWithRsaCsp();
            Org.BouncyCastle.Crypto.AsymmetricKeyParameter keyParameter = null;
            Org.BouncyCastle.X509.X509Certificate certCopy = DotNetUtilities.FromX509Certificate(cert);
            cms.MyAddSigner(rsa, certCopy, keyParameter, ""1.2.840.113549.1.1.1"", ""2.16.840.1.101.3.4.2.1"", AT, null);
            ArrayList certList = new ArrayList();
            certList.Add(certCopy);
            Org.BouncyCastle.X509.Store.X509CollectionStoreParameters PP = new Org.BouncyCastle.X509.Store.X509CollectionStoreParameters(certList);

            Org.BouncyCastle.X509.Store.IX509Store st1 = Org.BouncyCastle.X509.Store.X509StoreFactory.Create(""CERTIFICATE/COLLECTION"", PP);

            cms.AddCertificates(st1);

            FileInfo File__1 = new FileInfo(NomeFile);
            CmsProcessableFile file__2 = new CmsProcessableFile(File__1);
            CmsSignedData Firmato = cms.Generate(file__2, true);
            byte[] Encoded = Firmato.GetEncoded();
            RisFirma = """";

            return Encoded;

","694","<c#><sha256>","0","0","1","2016-03-11 08:48:43","","4","","107625","","2016-03-10 10:01:44","2016-03-10 09:49:46",""
"45320337","Different result HMAC SHA-256 in C++ and PHP","I encode string to base64 and generate HMAC SHA256 with this base64 string.  I encode the result of HMAC(char bytes) to base64.
I use C++: openssl library.
And got a different results in PHP and C++:
C++:
JSON: {""req_hash"":""someUniqCodeHash"",""answer"":true}
BASE64: eyJyZXFfaGFzaCI6InNvbWVVbmlxQ29kZUhhc2giLCJhbnN3ZXIiOnRydWV9
HMAC: P/p2YlxL8xdhmn+QIAlVLFDS50ai4JE/l1pMMrKZKrE=
PHP:
JSON: {""req_hash"":""someUniqCodeHash"",""answer"":true}
BASE64: eyJyZXFfaGFzaCI6InNvbWVVbmlxQ29kZUhhc2giLCJhbnN3ZXIiOnRydWV9
HMAC: P/p2YlxL8xdhmn+QIAlVLFDS50ai4JE/l1pMMrKZKrE=
And if you can see, HMAC same result!
c++: P/p2YlxL8xdhmn+QIAlVLFDS50ai4JE/l1pMMrKZKrE= 
php: P/p2YlxL8xdhmn+QIAlVLFDS50ai4JE/l1pMMrKZKrE=
But, when I change JSON like this (changed true to false):
JSON: {""req_hash"":""someUniqCodeHash"",""answer"":false}
i got this:
C++:
JSON: {""req_hash"":""someUniqCodeHash"",""answer"":false}
BASE64: eyJyZXFfaGFzaCI6InNvbWVVbmlxQ29kZUhhc2giLCJhbnN3ZXIiOmZhbHNlfQ==
HMAC: znUOWS2MMLpjIBSpq2GfSNivaL8IUDcZXZs24D0=
PHP:
JSON: {""req_hash"":""someUniqCodeHash"",""answer"":false}
BASE64: eyJyZXFfaGFzaCI6InNvbWVVbmlxQ29kZUhhc2giLCJhbnN3ZXIiOmZhbHNlfQ==
HMAC: znUOWS2MMLpjIBSpq2GfSNivaL8IUDcZXZs24D0AHZA=
Why the HMAC result is different?
You can see: 
C++: znUOWS2MMLpjIBSpq2GfSNivaL8IUDcZXZs24D0=
PHP: znUOWS2MMLpjIBSpq2GfSNivaL8IUDcZXZs24D0AHZA=
In PHP HMAC string added some chars: ...AHZA=. 
What is this?
And my PHP code:
 <?php
 $b = base64_encode('{""req_hash"":""someUniqCodeHash"",""answer"":false}');
 $hmac =$b.""."".base64_encode(hash_hmac('sha256',$b,'eyJhZGRyZXNzX3RvIjp7JzEnOidjbGll',true));

My C++ code:
std::string sfjson = ""{\""req_hash\"":\""someUniqCodeHash\"",\""answer\"":false}"";
std::cout << ""JSON: "" << sfjson << ""\n"";

std::string fencoded_data = base64_encode_str(sfjson);
std::cout << ""BASE64: "" << fencoded_data << ""\n"";

unsigned char* digest;
std::string key = ""eyJhZGRyZXNzX3RvIjp7JzEnOidjbGll"";

digest = HMAC(EVP_sha256(), reinterpret_cast<const unsigned char*>(key.c_str()), key.length(), reinterpret_cast<const unsigned char*>(fencoded_data.c_str()), fencoded_data.length(), NULL, NULL);

std::string sName(reinterpret_cast<char*>(digest));

std::string hmac_data = base64_encode_str(sName);

std::cout << ""HMAC: "" << hmac_data << ""\n"";

Base64 from there: https://gist.github.com/rustem-art/5f6b510c65bbbfd279386225b978f960
","I found the solution! ;)
Never use NULL as:
digest = HMAC(EVP_sha256(),
              reinterpret_cast<const unsigned char*>(key.c_str()), key.length(),
              reinterpret_cast<const unsigned char*>(data.c_str()), data.length(),
              NULL, NULL);

Use special variable (in my code is: diglen and result) for return function.
unsigned int diglen;

unsigned char result[EVP_MAX_MD_SIZE];

digest = HMAC(EVP_sha256(),
              reinterpret_cast<const unsigned char*>(key.c_str()), key.length(),
              reinterpret_cast<const unsigned char*>(data.c_str()), data.length(),
              result, &diglen);

","687","<php><c++><openssl><sha256><hmac>","0","0","1","2017-07-26 09:23:46","45322729","1","","","","","2017-07-26 07:34:07",""
"24399465","Perl hmac sha256 different than PHP's using pack","I have to create a hash in Perl using SHA256 HMAC like this PHP example:
<?php
$key = pack('H*','THIS_IS_KEY');
$str ='THIS IS DE ENCODED STRING';
echo strtoupper(hash_hmac('sha256',$str, $key));
?>

I get:
601B7C81389A37FC83C05275138280E8788CF9108528BC75D5C09CEA75904D5E
But if I do the same in a Perl script:
use Digest::SHA qw(hmac_sha256_hex);
my $key = pack('H*','THIS_IS_KEY');
my $str ='THIS IS DE ENCODED STRING';
print uc(hmac_sha256_hex($str, $key));
exit;

I get:
C683FD81DEFB7CDA3C031F5280682E80851FDC246310DB8C44057BC6364454E0
If I don't pack key neither Perl or PHP I get the same result, unfortunately I have to generate Perl exactly the same result as the example using PHP ""pack"".
I would appreciate if someone can help me find a solution.
Thanks in advance
Welch
","The code doesn't understand how the pack() function actually works. The key is what is different between the PHP and Perl scripts, so let's reduce it to just that calculation. Here's a simpler PHP program:
<?php
  $key = pack('H*', 'THIS_IS_KEY');
  echo $key;
?>

If we echo that into php | hexdump, we get:
00000000 0000 0000 000e

Here's a similar Perl program:
my $key = pack('H*', 'THIS_IS_KEY');
print $key;

And if we echo that into perl | hexdump, we get:
0000000 2cd1 cff2 204e

Those are two significantly different keys. In both cases, the pack() call is using an H* format, which means that pack() is expecting to receive an unbounded hex string (a string containing hexadecimal characters 0-9A-F). The problem is that 'THIS_IS_KEY' is not a sequence of hex values (with the exception of the 'E'). If you run the test code through the php binary itself, you'll also see these lines:
PHP Warning:  pack(): Type H: illegal hex digit T in - on line 2
PHP Warning:  pack(): Type H: illegal hex digit H in - on line 2
PHP Warning:  pack(): Type H: illegal hex digit I in - on line 2
PHP Warning:  pack(): Type H: illegal hex digit S in - on line 2
PHP Warning:  pack(): Type H: illegal hex digit _ in - on line 2
PHP Warning:  pack(): Type H: illegal hex digit I in - on line 2
PHP Warning:  pack(): Type H: illegal hex digit S in - on line 2
PHP Warning:  pack(): Type H: illegal hex digit _ in - on line 2
PHP Warning:  pack(): Type H: illegal hex digit K in - on line 2
PHP Warning:  pack(): Type H: illegal hex digit Y in - on line 2

Note that it's every character except for 'E' that throws an error, and note that in your hex output, every character gets converted to a null nibble except for 'E'. Perl actually tries to make something of nonsense characters and converts them to some sort of representation it can use (e.g. 'K' becomes 4, which kind of makes sense since it's the 5th character after F, which would correspond to 14 in hex). Anyway, it's undefined what the behavior should be passed a string that doesn't match the format.
So, what are your solutions?
Well, if you really need to keep 'THIS_IS_KEY' as your key, then the equivalent Perl key is '000000000E0'. If your example key is only a representation of the key value, generally replace the non-hex characters from the PHP key with '0' in the Perl script. PHP appears to be treating non-hex characters as '0' in the hex string.
As for a real solution, either convert your string key to a hex representation or use a straight hex value as your key before passing to pack(). I don't know the details of the key selection or why the ""key"" is being packed anyway. The SHA256 portion of the code just takes a byte-string as the key. It could be a straight ASCII key as far as it's concerned, as long as both scripts use the same sequence of bytes.
","686","<perl><hmac><sha256><digest>","3","1","1","2014-07-16 03:39:44","24771812","3","0","3302863","","2014-06-25 12:53:25","2014-06-25 02:55:25",""
"20161966","How to use random SALT for password hashing?","I've been looking at some other topics on stackoverflow but they are way too complex for the beginner me. I was wondering, how is it possible to generate a random salt?
Let's say I generate a random salt and concatenate it to my password(which has been converted to SHA256). How will I go about to check for the salt when the user logs in, in this case where a random salt is generated and concatenated to the pass?
I would appreciate if you could give me a simple code snippet on how it would work. 
Thanks.
","From password_verify:

password_hash() returns the algorithm, cost and salt as part of the returned hash.

In other words, the salt is handled for you if you use these two functions; you don't need to worry about it.
Check those two manual pages for code examples (I'd paste them here, but the manual's not going anywhere and it's probably best to read the entire pages).
","684","<php><encryption><sha256>","1","2","1","2013-11-23 20:55:47","","3","2","","","","2013-11-23 11:53:46","2013-11-23 17:40:02"
"34269086","OTP base Authentication","I would like to implement OTP based authentication for my Web API application. I have some idea on the OTP authentication. 
For OTP we have generate an random alphanumeric, I have store this in my db. And send this OTP to user mobile phone. User will submit this OTP and mach this OTP with db.
This is the normal flow.
I need to secure it more, Hows it possible. Means, need to hash the OTP by sha256. Then I want to store this hashed value in DB. Upto here it's fine. 
From next step, Shall I send this OTP as plain text to user mobile. Then mobile client application pass this OTP as a plain text, Hash this plain text OTP in server and compared this with DB? 
Is it correct, Or Instead of plain text, Does I want to pass OTP as a hash to the user phone number, Is it so, Is it secured.
I have confused about this little bit.
Please help me.
","","683","<c#><authentication><asp.net-web-api2><sha256><one-time-password>","1","","0","2015-12-14 14:14:51","","4","","1806780","","2015-12-14 14:14:51","2015-12-14 14:11:03",""
"14537101","Different answer SHA-256 code (online generator - Lua-script)","What's the reason, that I get different results from an online SHA-256 calculator HASH-code and the code generated by the Lua script I've pasted?
Answer online: ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad
Answer script (with SciTE): a006267b0042805304ec162a0070030510452429204488c160351215ac00c19
--
--  Adaptation of the Secure Hashing Algorithm (SHA-244/256)
--  Found Here: http://lua-users.org/wiki/SecureHashAlgorithm
--
--  Using an adapted version of the bit library
--  Found Here: https://bitbucket.org/Boolsheet/bslf/src/1ee664885805/bit.lua
--
--  Adapted into a single function by GravityScore
--

local function sha256(msg)
        local function band(int1, int2, int3, ...)
                local ret =
                ((int1%0x00000002>=0x00000001 and int2%0x00000002>=0x00000001 and 0x00000001) or 0)+
                ((int1%0x00000004>=0x00000002 and int2%0x00000004>=0x00000002 and 0x00000002) or 0)+
                ((int1%0x00000008>=0x00000004 and int2%0x00000008>=0x00000004 and 0x00000004) or 0)+
                ((int1%0x00000010>=0x00000008 and int2%0x00000010>=0x00000008 and 0x00000008) or 0)+
                ((int1%0x00000020>=0x00000010 and int2%0x00000020>=0x00000010 and 0x00000010) or 0)+
                ((int1%0x00000040>=0x00000020 and int2%0x00000040>=0x00000020 and 0x00000020) or 0)+
                ((int1%0x00000080>=0x00000040 and int2%0x00000080>=0x00000040 and 0x00000040) or 0)+
                ((int1%0x00000100>=0x00000080 and int2%0x00000100>=0x00000080 and 0x00000080) or 0)+
                ((int1%0x00000200>=0x00000100 and int2%0x00000200>=0x00000100 and 0x00000100) or 0)+
                ((int1%0x00000400>=0x00000200 and int2%0x00000400>=0x00000200 and 0x00000200) or 0)+
                ((int1%0x00000800>=0x00000400 and int2%0x00000800>=0x00000400 and 0x00000400) or 0)+
                ((int1%0x00001000>=0x00000800 and int2%0x00001000>=0x00000800 and 0x00000800) or 0)+
                ((int1%0x00002000>=0x00001000 and int2%0x00002000>=0x00001000 and 0x00001000) or 0)+
                ((int1%0x00004000>=0x00002000 and int2%0x00004000>=0x00002000 and 0x00002000) or 0)+
                ((int1%0x00008000>=0x00004000 and int2%0x00008000>=0x00004000 and 0x00004000) or 0)+
                ((int1%0x00010000>=0x00008000 and int2%0x00010000>=0x00008000 and 0x00008000) or 0)+
                ((int1%0x00020000>=0x00010000 and int2%0x00020000>=0x00010000 and 0x00010000) or 0)+
                ((int1%0x00040000>=0x00020000 and int2%0x00040000>=0x00020000 and 0x00020000) or 0)+
                ((int1%0x00080000>=0x00040000 and int2%0x00080000>=0x00040000 and 0x00040000) or 0)+
                ((int1%0x00100000>=0x00080000 and int2%0x00100000>=0x00080000 and 0x00080000) or 0)+
                ((int1%0x00200000>=0x00100000 and int2%0x00200000>=0x00100000 and 0x00100000) or 0)+
                ((int1%0x00400000>=0x00200000 and int2%0x00400000>=0x00200000 and 0x00200000) or 0)+
                ((int1%0x00800000>=0x00400000 and int2%0x00800000>=0x00400000 and 0x00400000) or 0)+
                ((int1%0x01000000>=0x00800000 and int2%0x01000000>=0x00800000 and 0x00800000) or 0)+
                ((int1%0x02000000>=0x01000000 and int2%0x02000000>=0x01000000 and 0x01000000) or 0)+
                ((int1%0x04000000>=0x02000000 and int2%0x04000000>=0x02000000 and 0x02000000) or 0)+
                ((int1%0x08000000>=0x04000000 and int2%0x08000000>=0x04000000 and 0x04000000) or 0)+
                ((int1%0x10000000>=0x08000000 and int2%0x10000000>=0x08000000 and 0x08000000) or 0)+
                ((int1%0x20000000>=0x10000000 and int2%0x20000000>=0x10000000 and 0x10000000) or 0)+
                ((int1%0x40000000>=0x20000000 and int2%0x40000000>=0x20000000 and 0x20000000) or 0)+
                ((int1%0x80000000>=0x40000000 and int2%0x80000000>=0x40000000 and 0x40000000) or 0)+
                ((int1>=0x80000000 and int2>=0x80000000 and 0x80000000) or 0)

                return (int3 and band(ret, int3, ...)) or ret
        end

        local function bxor(int1, int2, int3, ...)
                local ret =
                ((int1%0x00000002>=0x00000001 ~= (int2%0x00000002>=0x00000001) and 0x00000001) or 0)+
                ((int1%0x00000004>=0x00000002 ~= (int2%0x00000004>=0x00000002) and 0x00000002) or 0)+
                ((int1%0x00000008>=0x00000004 ~= (int2%0x00000008>=0x00000004) and 0x00000004) or 0)+
                ((int1%0x00000010>=0x00000008 ~= (int2%0x00000010>=0x00000008) and 0x00000008) or 0)+
                ((int1%0x00000020>=0x00000010 ~= (int2%0x00000020>=0x00000010) and 0x00000010) or 0)+
                ((int1%0x00000040>=0x00000020 ~= (int2%0x00000040>=0x00000020) and 0x00000020) or 0)+
                ((int1%0x00000080>=0x00000040 ~= (int2%0x00000080>=0x00000040) and 0x00000040) or 0)+
                ((int1%0x00000100>=0x00000080 ~= (int2%0x00000100>=0x00000080) and 0x00000080) or 0)+
                ((int1%0x00000200>=0x00000100 ~= (int2%0x00000200>=0x00000100) and 0x00000100) or 0)+
                ((int1%0x00000400>=0x00000200 ~= (int2%0x00000400>=0x00000200) and 0x00000200) or 0)+
                ((int1%0x00000800>=0x00000400 ~= (int2%0x00000800>=0x00000400) and 0x00000400) or 0)+
                ((int1%0x00001000>=0x00000800 ~= (int2%0x00001000>=0x00000800) and 0x00000800) or 0)+
                ((int1%0x00002000>=0x00001000 ~= (int2%0x00002000>=0x00001000) and 0x00001000) or 0)+
                ((int1%0x00004000>=0x00002000 ~= (int2%0x00004000>=0x00002000) and 0x00002000) or 0)+
                ((int1%0x00008000>=0x00004000 ~= (int2%0x00008000>=0x00004000) and 0x00004000) or 0)+
                ((int1%0x00010000>=0x00008000 ~= (int2%0x00010000>=0x00008000) and 0x00008000) or 0)+
                ((int1%0x00020000>=0x00010000 ~= (int2%0x00020000>=0x00010000) and 0x00010000) or 0)+
                ((int1%0x00040000>=0x00020000 ~= (int2%0x00040000>=0x00020000) and 0x00020000) or 0)+
                ((int1%0x00080000>=0x00040000 ~= (int2%0x00080000>=0x00040000) and 0x00040000) or 0)+
                ((int1%0x00100000>=0x00080000 ~= (int2%0x00100000>=0x00080000) and 0x00080000) or 0)+
                ((int1%0x00200000>=0x00100000 ~= (int2%0x00200000>=0x00100000) and 0x00100000) or 0)+
                ((int1%0x00400000>=0x00200000 ~= (int2%0x00400000>=0x00200000) and 0x00200000) or 0)+
                ((int1%0x00800000>=0x00400000 ~= (int2%0x00800000>=0x00400000) and 0x00400000) or 0)+
                ((int1%0x01000000>=0x00800000 ~= (int2%0x01000000>=0x00800000) and 0x00800000) or 0)+
                ((int1%0x02000000>=0x01000000 ~= (int2%0x02000000>=0x01000000) and 0x01000000) or 0)+
                ((int1%0x04000000>=0x02000000 ~= (int2%0x04000000>=0x02000000) and 0x02000000) or 0)+
                ((int1%0x08000000>=0x04000000 ~= (int2%0x08000000>=0x04000000) and 0x04000000) or 0)+
                ((int1%0x10000000>=0x08000000 ~= (int2%0x10000000>=0x08000000) and 0x08000000) or 0)+
                ((int1%0x20000000>=0x10000000 ~= (int2%0x20000000>=0x10000000) and 0x10000000) or 0)+
                ((int1%0x40000000>=0x20000000 ~= (int2%0x40000000>=0x20000000) and 0x20000000) or 0)+
                ((int1%0x80000000>=0x40000000 ~= (int2%0x80000000>=0x40000000) and 0x40000000) or 0)+
                ((int1>=0x80000000 ~= (int2>=0x80000000) and 0x80000000) or 0)

                return (int3 and bxor(ret, int3, ...)) or ret
        end

        local function bnot(int)
                return 4294967295 - int
        end

        local function rshift(int, by)
                local shifted = int / (2 ^ by)
                return shifted - shifted % 1
        end

        local function rrotate(int, by)
                local shifted = int / (2 ^ by)
                local fraction = shifted % 1
                return (shifted - fraction) + fraction * (2 ^ 32)
        end

        local k = {
                0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
                0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
                0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
                0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
                0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
                0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
                0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
                0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
                0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
                0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
                0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
                0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
                0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
                0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
                0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
                0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,
        }


        local function str2hexa(s)
                local h = string.gsub(s, ""."", function(c)
                        return string.format(""%02x"", string.byte(c))
                end)
                return h
        end

        local function num2s(l, n)
                local s = """"
                for i = 1, n do
                        local rem = l % 256
                        s = string.char(rem) .. s
                        l = (l - rem) / 256
                end
                return s
        end

        local function s232num(s, i)
                local n = 0
                for i = i, i + 3 do n = n*256 + string.byte(s, i) end
                return n
        end

        local function preproc(msg, len)
                local extra = 64 - ((len + 1 + 8) % 64)
                len = num2s(8 * len, 8)
                msg = msg .. ""\128"" .. string.rep(""\0"", extra) .. len
                return msg
        end

        local function initH256(H)
                H[1] = 0x6a09e667
                H[2] = 0xbb67ae85
                H[3] = 0x3c6ef372
                H[4] = 0xa54ff53a
                H[5] = 0x510e527f
                H[6] = 0x9b05688c
                H[7] = 0x1f83d9ab
                H[8] = 0x5be0cd19
                return H
        end

        local function digestblock(msg, i, H)
                local w = {}
                for j = 1, 16 do w[j] = s232num(msg, i + (j - 1) * 4) end
                for j = 17, 64 do
                        local v = w[j - 15]
                        local s0 = bxor(rrotate(v, 7), rrotate(v, 18), rshift(v, 3))
                        v = w[j - 2]
                        local s1 = bxor(rrotate(v, 17), rrotate(v, 19), rshift(v, 10))
                        w[j] = w[j - 16] + s0 + w[j - 7] + s1
                end

                local a, b, c, d, e, f, g, h = H[1], H[2], H[3], H[4], H[5], H[6], H[7], H[8]
                for i = 1, 64 do
                        local s0 = bxor(rrotate(a, 2), rrotate(a, 13), rrotate(a, 22))
                        local maj = bxor(band(a, b), band(a, c), band(b, c))
                        local t2 = s0 + maj
                        local s1 = bxor(rrotate(e, 6), rrotate(e, 11), rrotate(e, 25))
                        local ch = bxor (band(e, f), band(bnot(e), g))
                        local t1 = h + s1 + ch + k[i] + w[i]
                        h, g, f, e, d, c, b, a = g, f, e, d + t1, c, b, a, t1 + t2
                end

                H[1] = band(H[1], a)
                H[2] = band(H[2], b)
                H[3] = band(H[3], c)
                H[4] = band(H[4], d)
                H[5] = band(H[5], e)
                H[6] = band(H[6], f)
                H[7] = band(H[7], g)
                H[8] = band(H[8], h)
        end

        msg = preproc(msg, #msg)
        local H = initH256({})
        for i = 1, #msg, 64 do digestblock(msg, i, H) end
        return str2hexa(num2s(H[1], 4) .. num2s(H[2], 4) .. num2s(H[3], 4) .. num2s(H[4], 4) ..
                num2s(H[5], 4) .. num2s(H[6], 4) .. num2s(H[7], 4) .. num2s(H[8], 4))
end

test = sha256(""abc"");
print(test);

","There are two major bugs in your code.
The reference Lua 5.2 algorithm at http://lua-users.org/wiki/SecureHashAlgorithm, from which this code is adapted, gives correct answers.
First, the functions band, rrotate and rshift do not work properly because they expect unsigned integers and they sometimes receive negative values. To fix that, add a line telling something like int = int % 2^32 at the start of all those functions to ensure the numbers are between 0 and 4294967295.
There is a second problem. Compared to the reference implementation, the ending lines in the form of H[1] = band(H[1] + a) have been transformed into H[1] = band(H[1], a). This is not the same thing! Replace them with something like H[1] = (H[1] + a) % 2^32 and now the function gives correct answers.
","683","<lua><sha256>","3","3","1","2013-01-26 16:06:25","14538567","3","","1008957","","2013-01-26 15:00:04","2013-01-26 12:51:46",""
"23987734","Rehashing passwords without asking all users to change them","A former developer used the PHP hash() function with the SHA256 algorithm to store password hashes. To improve the security of the system, I'd like to start using crypt() with the Blowfish algorithm (unfortunately we don't have PHP 5.5 and thus password_hash() is not available).
Since SHA256 is a non-reversible hashing algorithm, is there a way to start using crypt() with the salted passwords without asking everyone to reset their password?
","I'm assuming you never stored the clear-text user account passwords, as this would be truly an awful thing to do.  SO therefore you no longer have the data that you need to create the new password digests.
I'm thinking you're going to need everyone to update their passwords.
","683","<php><hash><passwords><sha256><crypt>","1","0","7","2014-06-03 09:03:46","23987876","1","","","","","2014-06-02 05:20:02",""
"23987734","Rehashing passwords without asking all users to change them","A former developer used the PHP hash() function with the SHA256 algorithm to store password hashes. To improve the security of the system, I'd like to start using crypt() with the Blowfish algorithm (unfortunately we don't have PHP 5.5 and thus password_hash() is not available).
Since SHA256 is a non-reversible hashing algorithm, is there a way to start using crypt() with the salted passwords without asking everyone to reset their password?
","There may be other faster and more efficient ways to do this, but if you want to do this without it affecting your users, this is how I would do it -
Add another column to your table, a basic flag that can go True or False. Default it to false. Then implement the following pseudocode :
if(flag=true)
{
 use crypt() and authenticate user
}
else
{
use hash() and authenticate user
use crypt() on the provided password (once authenticated)
update the record to put the new password into the table
set flag=true
}

Essentially it check if the password is updated or not, and updates it if it isn't. You can eventually take this function off, once your users have made the transition. But as it adds almost no load, I would recommend keeping it!
Its a bit roundabout, but it will have the minimal amount of work for your users to do, and it will run in the background without giving them any indication of it happening!
","683","<php><hash><passwords><sha256><crypt>","1","0","7","2014-06-03 09:03:46","23987876","1","","","","","2014-06-02 05:20:02",""
"23987734","Rehashing passwords without asking all users to change them","A former developer used the PHP hash() function with the SHA256 algorithm to store password hashes. To improve the security of the system, I'd like to start using crypt() with the Blowfish algorithm (unfortunately we don't have PHP 5.5 and thus password_hash() is not available).
Since SHA256 is a non-reversible hashing algorithm, is there a way to start using crypt() with the salted passwords without asking everyone to reset their password?
","Id say use a marker field to annotate which users have been previously hashed, then crypt the existing hash. For anyone with a true in the marker field when authenticating it becomes a 2 step process, hash the password then crypt it for a match check.
Whenever they update their password you would set the marker field to false. i.e. phase in and just crypt for a match check.
","683","<php><hash><passwords><sha256><crypt>","1","0","7","2014-06-03 09:03:46","23987876","1","","","","","2014-06-02 05:20:02",""
"23987734","Rehashing passwords without asking all users to change them","A former developer used the PHP hash() function with the SHA256 algorithm to store password hashes. To improve the security of the system, I'd like to start using crypt() with the Blowfish algorithm (unfortunately we don't have PHP 5.5 and thus password_hash() is not available).
Since SHA256 is a non-reversible hashing algorithm, is there a way to start using crypt() with the salted passwords without asking everyone to reset their password?
","Yes, what you will need to do is add an extra column that stores the crypt() output. When a user logs in, and their password successfully hash()es to what you have in the database, you can now crypt() that password, and remove the old hash from the database. 
This only works when users log-in, so you will have a period of time where some users are using the old system, and some users are using the new one. 
","683","<php><hash><passwords><sha256><crypt>","1","0","7","2014-06-03 09:03:46","23987876","1","","","","","2014-06-02 05:20:02",""
"23987734","Rehashing passwords without asking all users to change them","A former developer used the PHP hash() function with the SHA256 algorithm to store password hashes. To improve the security of the system, I'd like to start using crypt() with the Blowfish algorithm (unfortunately we don't have PHP 5.5 and thus password_hash() is not available).
Since SHA256 is a non-reversible hashing algorithm, is there a way to start using crypt() with the salted passwords without asking everyone to reset their password?
","Here's a possible solution:
Add a column to the user table to indicate which hashing method has been used on the user's password. At login time you'll know the user's password since he's just entered it, so once the current hash has been passed, crate a new has from the password and update the flag column
This assumes that you're passing free text passwords across the internet which you shouldn't do unless you're using SSL.
Alternatively, if you're hashing the password on the client before sending it, update the client software to handle two hashing algorithms and send both. Use your flag to identify which to check.
In both cases once all (or the majority of) your users have switched, deleted the old hashes and force the issue for the remaining users.
","683","<php><hash><passwords><sha256><crypt>","1","1","7","2014-06-03 09:03:46","23987876","1","","","","","2014-06-02 05:20:02",""
"23987734","Rehashing passwords without asking all users to change them","A former developer used the PHP hash() function with the SHA256 algorithm to store password hashes. To improve the security of the system, I'd like to start using crypt() with the Blowfish algorithm (unfortunately we don't have PHP 5.5 and thus password_hash() is not available).
Since SHA256 is a non-reversible hashing algorithm, is there a way to start using crypt() with the salted passwords without asking everyone to reset their password?
","You should use the compatibility library then. It will make it easier for you when you move to 5.5.
Re-hashing without asking the user for the password... well, you can wait until the next time users log in, and then use the password extension's password_verify() function. If it fails then you can fall back on the old SHA256 hash. If the SHA256 hash matches then you can rehash the password using password_hash() and save it in the old hash's place:
if (password_verify($password, $hash)) {
    // Matches...
} elseif (hash('sha256', $password) == $hash) {
    // Matches...
    $newHash = password_hash($password);
    // Save $newHash in the old hash's place
} else {
    die('Invalid password...');
}

It is technically possible to crack a lot of the hashes, but there are too many problems with that (you would not get all of them, it is most likely not feasible, it may not even be legal, etc.).
","683","<php><hash><passwords><sha256><crypt>","1","3","7","2014-06-03 09:03:46","23987876","1","","","","","2014-06-02 05:20:02",""
"23987734","Rehashing passwords without asking all users to change them","A former developer used the PHP hash() function with the SHA256 algorithm to store password hashes. To improve the security of the system, I'd like to start using crypt() with the Blowfish algorithm (unfortunately we don't have PHP 5.5 and thus password_hash() is not available).
Since SHA256 is a non-reversible hashing algorithm, is there a way to start using crypt() with the salted passwords without asking everyone to reset their password?
","Another approach you may want to consider is hash chaining: since you can't reverse SHA256, just define your new hash function as crypt(sha256($passwd)). Since you presumably already have sha256($passwd) on file for all your passwords, it's possible to crypt() each one of them with an appropriate salt to update your existing hashes (without having to wait for the user to log in).
","683","<php><hash><passwords><sha256><crypt>","1","3","7","2014-06-03 09:03:46","23987876","1","","","","","2014-06-02 05:20:02",""
"32453873","How to truncate a SHA256 key to emulate a 128 key in Ruby","I want to truncate a 256 key to simulate a 128 key. This is easy enough in Python with [:16]
>>> hashed_master_key = hashlib.sha256(master_key).digest()
>>> len(hashed_master_key)
32
>>> hashed_master_key = hashlib.sha256(master_key).digest()[:16]
>>> len(hashed_master_key)
16

How can we do the same using Ruby?
2.2.1 :028 > hashed_master_key = Digest::SHA256.digest master_key
 =>     ""\x94DS\xF2:;\x8FU\x9C:v\xB6\xD4\x1C\xB4\xD0\x88/D\xA3\xF0\x91\xBC\x19\x14\x98\xE9\nS^.4"" 
2.2.1 :029 > hashed_master_key.length
 => 32 

","The hashing is not relevant here. Both libraries output the digest as a simple string. So in Python [:16] just takes the first 16 characters
The Ruby equivalent is just as simple:
hashed_master_key = Digest::SHA256.digest( master_key )[0,16]

More Ruby String methods are documented at http://ruby-doc.org/core-2.2.3/String.html

NB in Ruby you can often omit the method parameter brackets ( ) and this is a popular style of writing Ruby you will see in documentation and examples. However, that can get in the way of method chaining as used here. If you see Ruby example method calls without brackets, and you'd like to add more to a single line of code, you can feel free to add the brackets back to allow it.
","678","<python><ruby><sha256><hashlib>","0","3","1","2015-09-08 09:32:52","","0","","202576","","2015-09-08 09:23:11","2015-09-08 09:18:51",""
"48094412","OpenSSL and Java yield different SHA256 RSA signatures","I created a RSA keypair with OpenSSL:
openssl genpkey -algorithm RSA -out private_key.pem -pkeyopt rsa_keygen_bits:4096
openssl rsa -pubout -in private_key.pem -out public_key.pem

These are the keys:
-----BEGIN PRIVATE KEY-----
MIIJQgIBADANBgkqhkiG9w0BAQEFAASCCSwwggkoAgEAAoICAQC7ZRktot/dOrNX
nyc8u1qtQM7Pb+OOLupSkqsVKeBaT1J/Yru9XF2EqlUo9aBSsjZLw1Q7TP8Ocj2s
Boj09otqgb9fjo/OPybhvr+z1FdmwRSShnZ5aGvNdM3eVklr98DrY+anYLPGE8GM
H3WL4tFKFtu2HK5E8NLLAuZx3SoNRnFJ2MZV4irf/vkdSOVRo9+u6f2Hj/0Swftq
SRfkF2gXJUUG0cesrFSPqYyFH5qbH6dDkwTAH27WcFt+X/YNkkzyC/wVtI/b0Ng1
Adjiqa84kxHADoeyPBmRNlCio3T4bx3hDYkSEhpRJQGMqEQdPTdU3lQBixCked3m
aOWW1+SGcqCvNnDAQsgdPa8PaQimYbefwQPDDT3fdKev/Vsip5/9B605QPONaRfO
IUg/Kfh/TL722t4ccFHZfXBKBF/JapMy0aY7e8U5CtkIu0Uh9Y2ZEHTaOMMxXCOK
UuO2rL4ki2MlnwC+zaduolKPPm8pI2tbVv2I9vtT3hSQOMrDFBeCtCVuv0lbu8Em
t+VhtPYvqbUvKlsoC0IzRhdnPhUjkJhZh6pnwxFBgkzpry+3mNQgTLAmHx86xROE
MqI7haMTXyakEKDEjM87Wl0fM8BqxxOILJ/1dp5iNAj7sn3F1EPhjwZHhswzlQQI
r68NPNvuGhYr0ch7ufezybKOlbKGJwIDAQABAoICAHKHiWng350gITfuJ1bw0qyM
rVkOcy8U8VViGnmmzF2lmTANsdw7tVQ9niqYZFHmZVTMnpBXsJKts4+NtuqwO+ju
P34xbSaKZkMWB6fqoThFzUL4NzRgY3KAbsnyRpFcLGYw+mlVqsnmjSYMnBTQnUUA
z2tv//pWjR5SOXFh0C+o29hcSmt2/OlFtg713GGXHECU9cSCdhOexv/giF95Br8O
oi9Wywh3kn7zCtTZye4A3INqOT8Kdv1MUj7ce080GR7dwEWrwzh/XYSYCmwNdO/I
wtJ0ju6Z2K5tWb7s07J6hvJjCWEn+zmYumey914/aa/O6dy/l35OlRYbCia08A9H
6udkJIOJrB/LX+GRFibHOEROLFGc58IDA0Pfty6BnQ19oPy2yFOVcN9IgnAzlYCk
8B/uwT234E3Eyp0sJ64okuo4w12G3myRzz9Lnt0KruC9pYCO0tFW1kgxO9OVdYbM
Tc1v8uU9Ho6/ajVDjXJGftXb1o2nHWKzS4rew2nOxdIOn83p8TO2Paheasf2x9D/
wP/rOua46TRuwIaIp3RS9E0PGACoRCBKUgydtf8TJL9ns92AYK4Yk2wsyGou5hmj
ImNv9C0KLHDmJSIu7EFhGh16teLA2885HpU1ayPeIRYkyl5Q8I4Js3zhYx36EYdb
BZEQR+NZliLMZ9DjcYDxAoIBAQDhm8qyQnLEjHCMGAOazBbRvfLMdBOLJ0mmueRp
sb5RGB5k+84wROjg8Dmhv5BkG13EXwbzaL2vwfCLl3ABOt4daPETQjaQBxwBDjR0
IZTGH5iqkn9s1giz9Yr+0iAl39+1PfcsiAupax2o88KerJxC8BkMlXasiNCaef4N
GEA4+JxKGO1TJV5xkHXXzSvl1HxBZbZn9Bgq/UnLNzyTpC8bkxEPXecc8orBr4kp
MOgHhU731CYMtMs1OegnBxjr40pYfBEKkXL7iXtnfhoNDetYdmYrfd5vCzHh1FzS
BXubutHwJL341i98oQyVCuMLKCfu8+h7IJ09WmYMRRNjmqGFAoIBAQDUo34YJEh3
4dqJLE3fmOq+6CdLz/IfvefJul1VCEOYqJ/x0K7AUr7GvGruwiL3yEShnaJE13mD
GkKE6PvRVlKLx+a7jjnaS2RTfGmtUrcxOEQ+1NRIHV/REvfT+QOroxiO4/Choz71
h11ZFNWCdRaFls2x5+Bm4d1J4OnR7BtGs+CsBX9Gy4j4bEr/FdsRNQEQvGH96e6a
kLsNp11eDTe65l/T7nlpgxFQtmMLDAkynUzcbM7rtV196z60VZ3OF7ojl+70eSdE
YzhOqfGuxEoYA5HswvOQxL82pa6PrkNjAaBIoe+kVohBINfYu8QNbY/qPiRDvnVj
8nJy0tpXpYK7AoIBAHiW41NA/UNdpdLcCyE0sYXOt/bcnI2mpFF/zz1HimiiMazc
gyt9ydRh0wxH7o/zqL0L5hU5CRrm2QJkIbQmmQ6zRxh6LdvyUN+njhX81R7JSLrz
rzSneuNl/bOS8SgNb+/afUHKPiGCZcom8QILVULaPylgwpwaTRYk2sx5B+rrx+47
QK9OrBqbksGUo0AnwXrbORJ7gGeKF2WN0s0/1wYwJ9BE6wGoCs7YWsIvp/ZNJRaG
yQfFo1CB8TrbKlD7noOJXTp+4CzfIZ0B5D7SD9erAZWBo+FK5JDHCA4ibB2jUA/C
M+DL63n8Q1NvDEisYBvzN3KIzkM7DIzGZ0S4JFkCggEAZd289ovLO8MzEivrUobL
TpGg4azI7XPoqrdhJu9CksuVdB7o2LHLOyHgiGjwn4uNdW8y4Y/oYmoeG9YRbQPR
n60wWAGWrYEYmvYrGiFaKXYvG3qSB8oqsNpJZ38PxxXnGe0Qxh6SdsVWbuqQLmMx
WuYXvHa9BgyGGnJpEWvu1TwvEbnAc4XmJDyc4P7zZ5bg38efmiiLafiT48Kd9ASZ
AiyDE+BWwblMfkIhyJUHgvvgamil6D2GgGBGNdYeNzEetxZ+Hxg7O4Pc4bKAWZ0n
ccGkEqyCSoQ2plNRAPwWxENvKdyKFUxvEeROA0JQda5bF3iVnu6LBkqLkX55oytj
KQKCAQEA2mm6ZBf63is/N0Z/fVYkeUE4K2MD1AVOUisNzXvkxDiw7RxrsQO9KA/9
AudcftN1STNoCSmDilm/4L4YTbKUrl0wj2kFZGOm8bH/RSWBHeI9ZrYpXBMBvh90
ZxhuRzYp7dynppH1QFijDt3kPMJq2Dw0ErCPds90JfztFLfZK2BikTcFkbUQia+z
hwhHs75o7RnLOse+kxHP0nci2lhxJD7MwZR8HKsLqZuv7VNPIigWSC9pFYWr/TM1
eYTR9iGpRLGN+MBwpZIr94z02nrl0GhNNoyq+skDjtJ2Bi66YIe/IJu86mIZu5Ma
FxHiQ4CS5eVAn5hotPLcR/0B56rCZw==
-----END PRIVATE KEY-----

-----BEGIN PUBLIC KEY-----
MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAu2UZLaLf3TqzV58nPLta
rUDOz2/jji7qUpKrFSngWk9Sf2K7vVxdhKpVKPWgUrI2S8NUO0z/DnI9rAaI9PaL
aoG/X46Pzj8m4b6/s9RXZsEUkoZ2eWhrzXTN3lZJa/fA62Pmp2CzxhPBjB91i+LR
ShbbthyuRPDSywLmcd0qDUZxSdjGVeIq3/75HUjlUaPfrun9h4/9EsH7akkX5Bdo
FyVFBtHHrKxUj6mMhR+amx+nQ5MEwB9u1nBbfl/2DZJM8gv8FbSP29DYNQHY4qmv
OJMRwA6HsjwZkTZQoqN0+G8d4Q2JEhIaUSUBjKhEHT03VN5UAYsQpHnd5mjlltfk
hnKgrzZwwELIHT2vD2kIpmG3n8EDww0933Snr/1bIqef/QetOUDzjWkXziFIPyn4
f0y+9treHHBR2X1wSgRfyWqTMtGmO3vFOQrZCLtFIfWNmRB02jjDMVwjilLjtqy+
JItjJZ8Avs2nbqJSjz5vKSNrW1b9iPb7U94UkDjKwxQXgrQlbr9JW7vBJrflYbT2
L6m1LypbKAtCM0YXZz4VI5CYWYeqZ8MRQYJM6a8vt5jUIEywJh8fOsUThDKiO4Wj
E18mpBCgxIzPO1pdHzPAascTiCyf9XaeYjQI+7J9xdRD4Y8GR4bMM5UECK+vDTzb
7hoWK9HIe7n3s8myjpWyhicCAwEAAQ==
-----END PUBLIC KEY-----

Next, I created file containing my message:
echo ""Hello, World"" > message.txt

Then I signed the message with my private key and stored the signature to a file in base64:
openssl dgst -sha256 -sign private_key.pem -out signature message.txt
base64 signature > signature.txt

This is the signature of the message:
huMEGAIfj+RQ4XHLVYEkGlgbcz5Wv62QBWk6MsxbiDBIX1ZgjhjKY3zr8livAs3x4QjfOmxqs+hOGDo9einXlNWWinslD9q+0ScoJPauK2UuIbAzLsOFoUGJBlFvCALClDlP+oIkT8qLzVPL2gONln3G68p/yZdKIQldaVMDA3mQEBJgHLKxShW1iveqhXF9P6SijE6PstTZ21KEOgMKXVjqbA8EdYucWZv1IwllFXfWJuk36MrgcfGTDesjK95LgCaZ0MjQqsiQQFA3tmZSntE8oRs7UK2fBkx/RCoFIHut4szdaUUvvxLNXVq5hgEjxysvw8Pls86iC/kfu84fJL6Xc3z9vcw4j4H2u5iJS+XGCcW4Jk+2UNprkyLtTu3uWvz21ruIZTlPhDNXdMexr9DNf7WyIsIZ3zeM1/O/Jgx6j890jN7Tth+wIIqawWuSBjd5PT3WyAqOJNtc5u0EhKlNWkoMorHuf4hWjf07XMJuS3F7PMsOGYaEwHXpc1JNN2U94TKyyPBfEpecvlo84FjKW6cpb+PINQcOVh3UeXCInk32/T4/rv4Ro6DCFlNKGobOozRSTt9a8vnQ2zOgc8omZiQzpvU8o8i92tgYtY9bIrOmIBgD+Lm/eJctjcm/qFOcNwVqj6s9Zth/pMuW+/tLxV/bsdK0XNCjGV+zAqM=

This is how the same signature is created in Java:
Signature signature = Signature.getInstance(""SHA256withRSA"");
String privateKeyString = ""-----BEGIN PRIVATE KEY-----"" + paste the key from above +""-----END PRIVATE KEY-----"";
privateKeyString = privateKeyString.replaceAll(""\\n"", """").replace(""-----BEGIN PRIVATE KEY-----"", """").replace(""-----END PRIVATE KEY-----"", """");

PKCS8EncodedKeySpec encodedPrivateKeySpec = new PKCS8EncodedKeySpec(Base64.decodeBase64(privateKeyString));
KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
PrivateKey privateKey = keyFactory.generatePrivate(encodedPrivateKeySpec);
signature.initSign(privateKey);

signature.update(""Hello, World"".getBytes(""UTF-8""));
byte[] signatureValue = signature.sign();
System.out.println(Base64.encodeBase64String(signatureValue));

And finally the Java output: 
DYGB6T1QAKMjgyU++rh5Ee41ED0PtvOcU1Bz+WWUM82ONC42y0VSR3a2dyxsay0YL0U8UXHF7l5F51vxxayif1F8h3tsMsyV4PKVCgOYaJooTloOJT+R5oh7mywg1lCd/u9KYHYIc7x+MopDEfiCGWETMFHt7GUqRViV3PdTtYWzKy87GN74bnzQQMqmY+BH+IZhdpdt4IC7RFh9FCwLf7RBhfX3t/dhfFhdee34r/N8aQfxos9d23IDsvudtc0zlP2uluejDqUei4FQGdKuiLCBNQJGwK6yUDXIQ0N3sm19hmysqevsj/hmLPu1BC0Uj9ryxpdL8ViYE4Sj7fLZqUD/LyMbdO4a6WbLSlLbWnd4BYfzFND6919QcUGrcqb1W1Vz5Tso3mceNT8LUb0A69F6yVnbJX1zoQaUDbHnlStsKOopfVlmLgniOXOLlzoqTUzxwRUi8+Iv4EHTLZKP//CO4iAxXR+w/LihFuUTXtTZ+Fcxj1eRbeifyqmOqsGCvPHxjqvr5FvmadusyvgkM18UQvN8f/ohReokQqlr7iW0uUPtefSuffYgNxBjm1bE6kl+/xYE21A/annfdi3dDIeif9+/NM95NQOOD3/YEFaw+H2sbBnskdMmpu5P3QKms4ppJTkZjSPn+Meg5ZAW68Pu74WNFed6qs9SjvW0nQU=

My question: Why are the two signature different? I tried verifying both with OpenSSL and Java respectively and it succeeds in both cases. But of course, verifying the OpenSSL signature in Java fails.
","If I add a \n:
        signature.update(""Hello, World\n"".getBytes(""UTF-8""));

I get:
huMEGAIfj+RQ4XHLVYEkGlgbcz5Wv62QBWk6MsxbiDBIX1ZgjhjKY3zr8livAs3x4QjfOmxqs+hOGDo9einXlNWWinslD9q+0ScoJPauK2UuIbAzLsOFoUGJBlFvCALClDlP+oIkT8qLzVPL2gONln3G68p/yZdKIQldaVMDA3mQEBJgHLKxShW1iveqhXF9P6SijE6PstTZ21KEOgMKXVjqbA8EdYucWZv1IwllFXfWJuk36MrgcfGTDesjK95LgCaZ0MjQqsiQQFA3tmZSntE8oRs7UK2fBkx/RCoFIHut4szdaUUvvxLNXVq5hgEjxysvw8Pls86iC/kfu84fJL6Xc3z9vcw4j4H2u5iJS+XGCcW4Jk+2UNprkyLtTu3uWvz21ruIZTlPhDNXdMexr9DNf7WyIsIZ3zeM1/O/Jgx6j890jN7Tth+wIIqawWuSBjd5PT3WyAqOJNtc5u0EhKlNWkoMorHuf4hWjf07XMJuS3F7PMsOGYaEwHXpc1JNN2U94TKyyPBfEpecvlo84FjKW6cpb+PINQcOVh3UeXCInk32/T4/rv4Ro6DCFlNKGobOozRSTt9a8vnQ2zOgc8omZiQzpvU8o8i92tgYtY9bIrOmIBgD+Lm/eJctjcm/qFOcNwVqj6s9Zth/pMuW+/tLxV/bsdK0XNCjGV+zAqM=

","675","<java><encryption><openssl><rsa><sha256>","1","1","1","2018-01-04 11:57:02","48094770","1","","","","","2018-01-04 11:35:46",""
"36428662","Sha256 hash in Objective C and Java","Sha256 hash function gives a longer hashed string in objective c than Java. Extra Zeros being added in objective C, how can I rationalise the hashing?
Objective C:
-(NSString*) sha256:(NSString *)clear{
   const char *s=[clear cStringUsingEncoding:NSASCIIStringEncoding];
   NSData *keyData=[NSData dataWithBytes:s length:strlen(s)];
   uint8_t digest[CC_SHA256_DIGEST_LENGTH]={0};
   CC_SHA256(keyData.bytes, keyData.length, digest);
   NSData *out=[NSData dataWithBytes:digest
   length:CC_SHA256_DIGEST_LENGTH];
   NSString *hash=[out description];
   hash = [hash stringByReplacingOccurrencesOfString:@"" "" withString:@""""];
   hash = [hash stringByReplacingOccurrencesOfString:@""<"" withString:@""""];
   hash = [hash stringByReplacingOccurrencesOfString:@"">"" withString:@""""];

   return hash;
}

Java
 public static  String generateHashString(String data)
    {
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-256"");
            byte[] dataInBytes = data.getBytes(StandardCharsets.UTF_8);
            md.update(dataInBytes);
            byte[] mdbytes = md.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i=0;i<mdbytes.length;i++) {
                hexString.append(Integer.toHexString(0xFF & mdbytes[i]));
            }

            return hexString.toString();

        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }

        return null;
    }

","Integer.toHexString() on an integer less than 16 will only be one character long, whereas you want the extra '0' character.
You could use String.format():
for (int i = 0; i < mdbytes.length; i++) {
    hexString.append(String.format(""%02x"", 0xFF & mdbytes[i]));
}

Also, you really should be using StringBuilder rather than StringBuffer in this case because only a single thread is involved.
See Java code To convert byte to Hexadecimal for some alternative solutions to hex-encoding a byte array in Java.
","668","<java><objective-c><sha256>","2","1","1","2017-11-19 01:24:36","36429115","0","4","1033581","","2017-11-19 01:24:36","2016-04-05 14:04:11",""
"37846548","Bitcoin mining: block structure","Hello my dear friends,
I am writing a program using GoLang to mine bitcoins. It's part of my college conclusion project and likely won't be used to mine bitcoins since it's not gonna be efficient enough running on regular PC's (facing a race against those huge chinese mining pools). Though it's not originally intended for real usage, my college expects nothing less than a flawless piece of software to mine real bitcoins (in parallel).
So far, I have implemented quite an extensive code, therefore, you guys may assume I already have means to achieve:


Get pending transactions to fill my block (from https://blockchain.info)
Build the merkle tree over the transactions data retrieved
Calculate a sha256 of a given data input (I also understand the concepts behind such hash functions)


I have organized my questions regarding this subject below:

Question 1) I can't precisely tell how to build a block header which would be appended to the block chain. I know it has fields like the root of our merkle tree (which I already know how to calculate) or a version field, but if I was to produce a block header as an array of bytes, how would I do it ? I'd like to see how to calculate each field we need to build the header and how our byte array (representing the header) would look like. 
Any dummy data may be used for this example, my focus stays on understanding the process and the data structure.
Please, note I have already read this: https://bitcoin.org/en/developer-reference#block-headers

I have studied quite a lot regarding how the bitcoin protocol works to achieve the code I currently have, but I feel extremely limited on the information I can find online regarding the internal details of the bitcoin protocol:

Question 2) Is there any online technical information you guys would consider useful for me to read regarding the headers subject and/or anything else in bitcoin? Keep in mid that I still have quite some code to write, therefore, I'm taking all the information I can get : )

Thanks in advance!
","","668","<go><sha256><bitcoin><blockchain><mining>","3","","0","2016-06-15 22:01:26","","4","0","","","","2016-06-15 22:01:26",""
"23982425","C++ SHA256 is different from command line SHA256","I'm trying to compute a SHA256 hash of the string iEk21fuwZApXlz93750dmW22pw389dPwOkm198sOkJEn37DjqZ32lpRu76xmw288xSQ9
When I run my C++ code, I get a string that's not even a valid SHA256 hash. However, when I run echo -n iEk21fuwZApXlz93750dmW22pw389dPwOkm198sOkJEn37DjqZ32lpRu76xmw288xSQ9 | openssl sha256, I get the correct hash. Here's my C++ code:
#include <iostream>
#include <time.h>
#include <sstream>
#include <string>
#include <iomanip>
#include <typeinfo>
#include <openssl/sha.h>
#include <cstdio>
#include <cstring>

std::string hash256(std::string string) {
    unsigned char digest[SHA256_DIGEST_LENGTH];

    SHA256_CTX ctx;
    SHA256_Init(&ctx);
    SHA256_Update(&ctx, string.c_str(), std::strlen(string.c_str()));
    SHA256_Final(digest, &ctx);

    char mdString[SHA256_DIGEST_LENGTH*2+1];
    for (int i = 0; i < SHA256_DIGEST_LENGTH; i++)
        std::sprintf(&mdString[i*2], ""%02x"", (unsigned int)digest[i]);

    return std::string(mdString);
}

int main(int argc, char *argv[])
{
    const char *hash = hash256(""iEk21fuwZApXlz93750dmW22pw389dPwOkm198sOkJEn37DjqZ32lpRu76xmw288xSQ9"").c_str();
    std::cout << hash << std::endl;
    return 0;
}

Another thing to note: When I run my code in an online compiler, such as Coliru, I get the correct hash. I am compiling with G++ on Cygwin with OpenSSL version OpenSSL 1.0.1g 7 Apr 2014
","As pointed out by @Alan Stokes, you have Undefined Behavior due to a dangling reference to the internal structure of the string.  Change your declaration of hash in main: 
std::string hash = hash256(""..."");

","666","<c++><hash><openssl><sha><sha256>","1","1","1","2014-06-01 19:05:03","23983386","4","","","","","2014-06-01 17:17:19",""
"50928530","qz-tray sha-256 not defined","I am trying to print the simple data text using Angular and Qz-Tray. But everytime I try to Print the error is displayed: 
qz-tray.js:35 ReferenceError: Sha256 is not defined
at Object.hash (qz-tray.js:408)
at WebSocket._qz.websocket.connection.sendData (qz-tray.js:184)
at qz-tray.js:280
at j (rsvp.min.js:1)
at new t (rsvp.min.js:1)
at Object.promise (qz-tray.js:395)
at Object.dataPromise (qz-tray.js:272)
at Object.print (qz-tray.js:805)
at PrinterService.push../src/app/shared/services/print.service.ts.PrinterService.printData (print.service.ts:46)
at FoddListComponent.push../src/app/layout/foodlist/foddlist.component.ts.FoddListComponent.createPdf (foddlist.component.ts:122)

I have included all the 3 .js files in index.html
Here is my index.html:
<head>
<meta charset=""utf-8"">
<title>ABC</title>
<base href=""/"">

<meta name=""viewport"" content=""width=device-width, initial-scale=1"">
<link rel=""icon"" type=""image/x-icon"" href=""favicon.ico"">

<script src=""https://cdn.jsdelivr.net/npm/rsvp@4/dist/rsvp.min.js""></script>
<script type=""text/javascript"" src=""https://cdnjs.cloudflare.com/ajax/libs/js-sha256/0.9.0/sha256.js""></script>
<script type=""text/javascript"" src=""./qz-tray.js""></script>


","You probably forget the import:
import * as sha256 from 'js-sha256';
qz.api.setSha256Type(function(data) { return sha256(data); });

","666","<angular><sha256><rsvp.js><qz-tray>","1","2","3","2018-10-29 15:45:11","","0","","","","","2018-06-19 12:31:37",""
"50928530","qz-tray sha-256 not defined","I am trying to print the simple data text using Angular and Qz-Tray. But everytime I try to Print the error is displayed: 
qz-tray.js:35 ReferenceError: Sha256 is not defined
at Object.hash (qz-tray.js:408)
at WebSocket._qz.websocket.connection.sendData (qz-tray.js:184)
at qz-tray.js:280
at j (rsvp.min.js:1)
at new t (rsvp.min.js:1)
at Object.promise (qz-tray.js:395)
at Object.dataPromise (qz-tray.js:272)
at Object.print (qz-tray.js:805)
at PrinterService.push../src/app/shared/services/print.service.ts.PrinterService.printData (print.service.ts:46)
at FoddListComponent.push../src/app/layout/foodlist/foddlist.component.ts.FoddListComponent.createPdf (foddlist.component.ts:122)

I have included all the 3 .js files in index.html
Here is my index.html:
<head>
<meta charset=""utf-8"">
<title>ABC</title>
<base href=""/"">

<meta name=""viewport"" content=""width=device-width, initial-scale=1"">
<link rel=""icon"" type=""image/x-icon"" href=""favicon.ico"">

<script src=""https://cdn.jsdelivr.net/npm/rsvp@4/dist/rsvp.min.js""></script>
<script type=""text/javascript"" src=""https://cdnjs.cloudflare.com/ajax/libs/js-sha256/0.9.0/sha256.js""></script>
<script type=""text/javascript"" src=""./qz-tray.js""></script>


","As @Bart has indicated, this means the sha256 is missing from your imports.  He has provided a JavaScript (AngularJS) example because you have angular in your question tags however your example uses HTML tags.  For completeness, here's the HTML requirements:
<!-- Required scripts -->
<script type=""text/javascript"" src=""rsvp-3.1.0.min.js""></script>
<script type=""text/javascript"" src=""sha-256.min.js""></script>
<script type=""text/javascript"" src=""qz-tray.js""></script>

Alternately, you can avoid RSVP by doing the following:
qz.api.setPromiseType(function promise(resolver) { return new Promise(resolver); });

And, if running HTTPS with JavaScript running on a compatible browser you can avoid SHA256 by doing the following:
function sha256 (str) {
    // We transform the string into an arraybuffer.
    var buffer = new TextEncoder('utf-8').encode(str)
    return crypto.subtle.digest('SHA-256', buffer).then(function (hash) {
        return hex(hash)
    })
}

function hex (buffer) {
    var hexCodes = []
    var view = new DataView(buffer)
    for (var i = 0; i < view.byteLength; i += 4) {
        // Using getUint32 reduces the number of iterations needed (we process 4 bytes each time)
        var value = view.getUint32(i)
        // toString(16) will give the hex representation of the number without padding
        var stringValue = value.toString(16)
        // We use concatenation and slice for padding
        var padding = '00000000'
        var paddedValue = (padding + stringValue).slice(-padding.length)
        hexCodes.push(paddedValue)
    }

    // Join all the hex strings into one
    return hexCodes.join('')
}

qz.api.setSha256Type(function (data) {
    return sha256(data)
})

... but most people are just fine with @Bart's code snippet.  Here's the full snippet from the QZ Tray wiki, AngularJS section:
import * as qz from 'qz-tray';
import * as sha256 from 'js-sha256';

qz.api.setSha256Type(function(data) { return sha256(data); });
qz.api.setPromiseType(function promise(resolver) { return new Promise(resolver); });

qz.websocket.connect()
.then(qz.printers.getDefault)
.then(function(printer) {
   console.log(""The default printer is: "" + printer);
})
.then(qz.websocket.disconnect)
.catch(function(err) {
   console.error(err);
});

","666","<angular><sha256><rsvp.js><qz-tray>","1","1","3","2018-10-29 15:45:11","","0","","","","","2018-06-19 12:31:37",""
"50928530","qz-tray sha-256 not defined","I am trying to print the simple data text using Angular and Qz-Tray. But everytime I try to Print the error is displayed: 
qz-tray.js:35 ReferenceError: Sha256 is not defined
at Object.hash (qz-tray.js:408)
at WebSocket._qz.websocket.connection.sendData (qz-tray.js:184)
at qz-tray.js:280
at j (rsvp.min.js:1)
at new t (rsvp.min.js:1)
at Object.promise (qz-tray.js:395)
at Object.dataPromise (qz-tray.js:272)
at Object.print (qz-tray.js:805)
at PrinterService.push../src/app/shared/services/print.service.ts.PrinterService.printData (print.service.ts:46)
at FoddListComponent.push../src/app/layout/foodlist/foddlist.component.ts.FoddListComponent.createPdf (foddlist.component.ts:122)

I have included all the 3 .js files in index.html
Here is my index.html:
<head>
<meta charset=""utf-8"">
<title>ABC</title>
<base href=""/"">

<meta name=""viewport"" content=""width=device-width, initial-scale=1"">
<link rel=""icon"" type=""image/x-icon"" href=""favicon.ico"">

<script src=""https://cdn.jsdelivr.net/npm/rsvp@4/dist/rsvp.min.js""></script>
<script type=""text/javascript"" src=""https://cdnjs.cloudflare.com/ajax/libs/js-sha256/0.9.0/sha256.js""></script>
<script type=""text/javascript"" src=""./qz-tray.js""></script>


","I have got the similar issue. Resolve it by importing sha56 module by require. Here is code. try once let me know if you are facing any issues.
declare var require: any;
import { Injectable } from '@angular/core';
import * as qz from 'qz-tray';
var sha1= require('js-sha256');

qz.api.setSha256Type(function (data) {
  var hashed = sha1(data);
  return hashed;
});

","666","<angular><sha256><rsvp.js><qz-tray>","1","1","3","2018-10-29 15:45:11","","0","","","","","2018-06-19 12:31:37",""
"31772674","Apache Shiro salt hashed password","I need to salt a hashed(SHA-256) password using Apache Shiro. I used the following method, but it uses plainText password as a parameter. But I need to get an alredy hashed password from the frontend and salt it and store in the server side. Otherwise if I use the following method I will have to pass the plain password all the way through frontend, which is not secure. So please suggest me a way to overcome this problem.
String hashedPassword = new Sha256Hash(plainTextPassword, salt);

","You cannot salt the password after it has been hashed. Salting works by combining the salt with the plain text password, and hashing the entire thing. This is why Shiro's Sha256Hash requires you to give it the plain text password.
It is common to pass the plain text password from the front end to the service layer as long as this communication is secure (e.g. HTTPS for web UIs). The only thing you should not do is store the plain text password in a database (which a correctly configured Shiro will not do) because your database may be compromised.
When passing the plain text password from the front end to your service, it will only exist in memory for a short time before being garbage collected. To obtain the password someone would have to either break your SSL connection (in which case you are screwed anyway) or compromise your server and dump the memory (in which case you are screwed anyway).
","665","<hash><shiro><sha256>","1","3","1","2015-08-03 09:14:57","31775144","0","","1606632","","2015-08-03 09:14:57","2015-08-02 14:06:38",""
"26215025","Oracle Primavera P6 8.3 password hash","I am facing the problem of generate the same SHA256 hash of the password as stored in primavera's database in users table.
Every sha256 hash generator I found make the same SHA256 hashes between them but different from priavera's one!
I need to integrate our custom application with primavera so I want to use primavera's users/password to make authentication of the users. Theoretically I need to get user's password, calculate the sha256 hash and compare it with the primavera's hash.
But as I can see there is not really SHA256 hash or primavera uses some password salt stuff.
Is any body know, how exactly primavera calculates password hashes?
","It isn't a straight sha256 hash - that would be too easy. P6 can authenticate through other mechanisms as well as their native one and could change their algorithm whenever they want.
I would advise authenticating to P6 through either the P6 java api or web services. This will protect you against Primavera changes to their authentication algorithms, decouple you from changes to how your company authenticates with P6 (e.g. native or AD/LDAP) and also allow you to delegate p6 access to p6 rather than working that out as well.
Bottom line - if you want to integrate your custom application with P6 then use the P6 integration apis.
","659","<hash><sha256><password-encryption><primavera>","0","0","1","2014-10-26 07:35:28","","0","","","","","2014-10-06 11:12:46",""
"40445019","DigestValue of the xml document in php","Could anyone please help me how to accomplish the correct DigestValue in the XML document? I have some XML examples from the creator, but somehow I cannot generate the same SHA256 hash in PHP.
The documentation says that the <soap:Body> should be hashed using SHA256 algorithm. Well, from what I understand I need to

canonicalize the xml (c14n)
create a SHA256 hash from it
base64 encode it

The hash result from this example should be obviously
TWpSLQpOXSUe8k6Q8lAd7DyMhWkTIcbHNifrPnWDG/M=
How to accomplish it in php from the code below?
I tried this:
$xml='<soap:Body xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"" wsu:Id=""id-AB79979F3364F5119A14761286403964""><Trzba xmlns=""http://fs.mfcr.cz/eet/schema/v3""><Hlavicka dat_odesl=""2016-09-19T19:06:37+02:00"" prvni_zaslani=""false"" uuid_zpravy=""ab1bc7a0-5ab0-4d61-a170-2982f2d83784""/><Data celk_trzba=""34113.00"" cerp_zuct=""679.00"" cest_sluz=""5460.00"" dan1=""-172.39"" dan2=""-530.73"" dan3=""975.65"" dat_trzby=""2016-08-05T00:30:12+02:00"" dic_popl=""CZ1212121218"" id_pokl=""/5546/RO24"" id_provoz=""273"" porad_cis=""0/6460/ZQ42"" pouzit_zboz1=""784.00"" pouzit_zboz2=""967.00"" pouzit_zboz3=""189.00"" rezim=""0"" urceno_cerp_zuct=""324.00"" zakl_dan1=""-820.92"" zakl_dan2=""-3538.20"" zakl_dan3=""9756.46"" zakl_nepodl_dph=""3036.00""/><KontrolniKody><pkp cipher=""RSA2048"" digest=""SHA256"" encoding=""base64"">JvCv0lXfT74zuviJaHeO91guUfum1MKhq0NNPxW0YlBGvIIt+I4QxEC3QP6BRwEkIS14n2WN+9oQ8nhQPYwZX7L4W9Ie7CYv1ojcl/YiF4560EdB3IpRNRj3UjQlwSZ5ucSM9vWqp0UTbhJDSUk5/WjC/CEiSYv7OQIqa0NJ0f0+ldzGveLRSF34eu2iqAhs/yfDnENlnMDPVB5ko/zQO0vcC93k5DEWEoytTIAsKd6jKSO7eama8Qe+d0wq9vBzudkfLgCe2C1iERJuyHknhjo9KOx10h5wk99QqVGX8tthpAmryDcX2N0ZGkzJHuzzebnYsxXFYI2tKOJLiLLoLQ==</pkp><bkp digest=""SHA1"" encoding=""base16"">3F9119C1-FBF34535-D30B60F8-9859E4A6-C8C8AAFA</bkp></KontrolniKody></Trzba></soap:Body>';
$doc = new DOMDocument('1.0','UTF-8');
$doc->loadXML($xml);
echo base64_encode(hash('SHA256',$doc->C14N(true),true));

But this is returning me other hash value :-( Maybe I am just taking the wrong part of the XML source. Any ideas from what part of text/how did they count the hash and how to have the same result in php? The whole working example (taken from [http://www.etrzby.cz/assets/cs/prilohy/CZ1212121218.valid.v3.1.xml) is this:
<?xml version=""1.0"" encoding=""UTF-8""?><soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""><SOAP-ENV:Header xmlns:SOAP-ENV=""http://schemas.xmlsoap.org/soap/envelope/""><wsse:Security xmlns:wsse=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"" xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"" soap:mustUnderstand=""1""><wsse:BinarySecurityToken EncodingType=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary"" ValueType=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3"" wsu:Id=""X509-A79845F15C5549CA0514761283545351"">MIIEmDCCA4CgAwIBAgIEdHOXJzANBgkqhkiG9w0BAQsFADB3MRIwEAYKCZImiZPyLGQBGRYCQ1oxQzBBBgNVBAoMOsSMZXNrw6EgUmVwdWJsaWthIOKAkyBHZW5lcsOhbG7DrSBmaW5hbsSNbsOtIMWZZWRpdGVsc3R2w60xHDAaBgNVBAMTE0VFVCBDQSAxIFBsYXlncm91bmQwHhcNMTYwOTMwMDkwMzU5WhcNMTkwOTMwMDkwMzU5WjBDMRIwEAYKCZImiZPyLGQBGRYCQ1oxEzARBgNVBAMTCkNaMDAwMDAwMTkxGDAWBgNVBA0TD3ByYXZuaWNrYSBvc29iYTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJnNUPW8rAlLi2KAwu12W1vqLj02mWIifq/Jp0/tUjf9B8RpkDAD3GOqDdVuHSfxej92WiEouDy7X8uXzIDdZu4pXA3t3KntxM8rAlu2U6SqtF3kTR+AJCdwfkM53U3z4/qoyKqdQ8lGuMxJKs7X5uIjcY/UDSXMK9OTmXRhndjYcX1oILr5F2ONf1Z0kWyl/S9wI0cl0gQ1F91mzqgnlH80u2inMmmBp42ndR4TGS1nvjer5D73bkLg07TdeqnUg609WwjUJN96OKZMsKXzBMzt09NbhQcABWnAWbRTSVhsAdDO8vfmWx2C+gXUlkIvtO+9fbj81GS1xdNoAkpARUcCAwEAAaOCAV4wggFaMAkGA1UdEwQCMAAwHQYDVR0OBBYEFL/0b0Iw6FY33UT8iJEy1V7nZVR6MB8GA1UdIwQYMBaAFHwwdqzM1ofR7Mkf4nAILONf3gwHMA4GA1UdDwEB/wQEAwIGwDBjBgNVHSAEXDBaMFgGCmCGSAFlAwIBMAEwSjBIBggrBgEFBQcCAjA8DDpUZW50byBjZXJ0aWZpa8OhdCBieWwgdnlkw6FuIHBvdXplIHBybyB0ZXN0b3ZhY8OtIMO6xI1lbHkuMIGXBgNVHR8EgY8wgYwwgYmggYaggYOGKWh0dHA6Ly9jcmwuY2ExLXBnLmVldC5jei9lZXRjYTFwZy9hbGwuY3JshipodHRwOi8vY3JsMi5jYTEtcGcuZWV0LmN6L2VldGNhMXBnL2FsbC5jcmyGKmh0dHA6Ly9jcmwzLmNhMS1wZy5lZXQuY3ovZWV0Y2ExcGcvYWxsLmNybDANBgkqhkiG9w0BAQsFAAOCAQEAvXdWsU+Ibd1VysKnjoy6RCYVcI9+oRUSSTvQQDJLFjwn5Sm6Hebhci8ERGwAzd2R6uqPdzl1KCjmHOitypZ66e+/e9wj3BaDqgBKRZYvxZykaVUdtQgG0819JZmiXTbGgOCKiUPIXO80cnP7U1ZPkVNV7WZwh0I2k/fg1VLTI5HA/x4BeD77wiEOExa7eqePJET0jpTVK3LxSW59LLIJROh4/kfKQbTvDL5Ypw8WagAMVCPvWnGJIcUru+ApLU4pZD9bdHSa1Ib4LpFhtWrkHYM/XqKbj2bNKKjTo5T3sU0Bf2QD3QzkmcjlNVG0V+qAgimwTdPueU/mtExw+7z1/A==</wsse:BinarySecurityToken><ds:Signature xmlns:ds=""http://www.w3.org/2000/09/xmldsig#"" Id=""SIG-A79845F15C5549CA0514761283545705""><ds:SignedInfo><ds:CanonicalizationMethod Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#""><ec:InclusiveNamespaces xmlns:ec=""http://www.w3.org/2001/10/xml-exc-c14n#"" PrefixList=""soap""/></ds:CanonicalizationMethod><ds:SignatureMethod Algorithm=""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256""/><ds:Reference URI=""#id-A79845F15C5549CA0514761283545594""><ds:Transforms><ds:Transform Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#""><ec:InclusiveNamespaces xmlns:ec=""http://www.w3.org/2001/10/xml-exc-c14n#"" PrefixList=""""/></ds:Transform></ds:Transforms><ds:DigestMethod Algorithm=""http://www.w3.org/2001/04/xmlenc#sha256""/><ds:DigestValue>M8/dBI/LLuwxP8ZoeRKVVpzIhQhyUDI0l6bglhNWKC0=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>DlFiF51sdtc0zeqgCsuSY6EU5emX7Hka6Ox3gviR4dpqyrwj6O8cm4oWkUTl+erINf9CpOG2y1z5y83+DubuGmiOPsACeEZjwF5TCme/uU1tzXs+LsLS8WXZvuMUejFOrUFEUKyzRvHJW5lskV/DhiMsTwJ/MEtGtjRVuWnAEcHxq/3ALsc3HfSi/qAqAiGlz3OpIKf3Hai6iiD37eJwHNd9QdJy4D32DJwY4Gw21ku7TO3FiLdtBT+Xdr3At8sWbbihFwErKrutT/FAVQKffUzCjHdEm9//W/shHufxYdnEh0m8cYp5Z5xK2bfnfhaKPB0rUZrrcw8T7LlvZKGogg==</ds:SignatureValue><ds:KeyInfo Id=""KI-A79845F15C5549CA0514761283545482""><wsse:SecurityTokenReference xmlns:wsse=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"" xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"" wsu:Id=""STR-A79845F15C5549CA0514761283545513""><wsse:Reference URI=""#X509-A79845F15C5549CA0514761283545351"" ValueType=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3""/></wsse:SecurityTokenReference></ds:KeyInfo></ds:Signature></wsse:Security></SOAP-ENV:Header><soap:Body xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"" wsu:Id=""id-A79845F15C5549CA0514761283545594""><Trzba xmlns=""http://fs.mfcr.cz/eet/schema/v3""><Hlavicka dat_odesl=""2016-08-19T19:06:37+02:00"" prvni_zaslani=""false"" uuid_zpravy=""2da635a5-d712-459d-9674-c12f335c39f7""/><Data celk_trzba=""34113.00"" cerp_zuct=""679.00"" cest_sluz=""5460.00"" dan1=""-172.39"" dan2=""-530.73"" dan3=""975.65"" dat_trzby=""2016-08-05T00:30:12+02:00"" dic_popl=""CZ00000019"" dic_poverujiciho=""CZ683555118"" id_pokl=""/5546/RO24"" id_provoz=""273"" porad_cis=""0/6460/ZQ42"" pouzit_zboz1=""784.00"" pouzit_zboz2=""967.00"" pouzit_zboz3=""189.00"" rezim=""0"" urceno_cerp_zuct=""324.00"" zakl_dan1=""-820.92"" zakl_dan2=""-3538.20"" zakl_dan3=""9756.46"" zakl_nepodl_dph=""3036.00""/><KontrolniKody><pkp cipher=""RSA2048"" digest=""SHA256"" encoding=""base64"">a0asEiJhFCBlVtptSspKvEZhcrvnzF7SQ55C4DhnStnSu1b37GUI2+Dlme9P94UCPZ1oCUPJdsYOBZ3IX6aEgEe0FJKXYX0kXraYCJKIo3g64wRchE7iblIOBCK1uHh8qqHA66Isnhb6hqBOOdlt2aWO/0jCzlfeQr0axpPF1mohMnP3h3ICaxZh0dnMdju5OmMrq+91PL5T9KkR7bfGHqAoWJ0kmxY/mZumtRfGil2/xf7I5pdVeYXPgDO/Tojzm6J95n68fPDOXTDrTzKYmqDjpg3kmWepLNQKFXRmkQrkBLToJWG1LDUDm3UTTmPWzq4c0XnGcXJDZglxfolGpA==</pkp><bkp digest=""SHA1"" encoding=""base16"">9356D566-A3E48838-FB403790-D201244E-95DCBD92</bkp></KontrolniKody></Trzba></soap:Body></soap:Envelope>

","","658","<php><xml><sha256>","1","","0","2016-11-06 01:10:31","","6","","","","","2016-11-06 01:10:31",""
"5712635","what are the php commands to create and retrieve password with SHA-256 encryption?","Newbie here. I'm trying to encrypt the user password using SHA-256 after they've made their account and then when the user tries to log in, it will try to match their input with any of the encrypted passwords in the mysql database. I was wondering if someone could give me an example code?
","Hashing works one-way, so you cannot really 'retrieve' what you have hashed.
When you save the password on registration, use something like this:
$hash=hash('sha256', $password);

And only save $hash in the database. When the user tries to log in, hash the password he tries to use and compare it to the one in the database (hashing will always give the same result for the same input). If they are the same, he can be logged in (if all additional checks are satisfied).
If you want to let the user recover his forgotten pass, refer to this earlier question.
Also, the best practice in hashing passwords is to use some kind of salt, which is out of the scope of this question, but please google it.
","653","<php><authentication><encryption><sha256>","2","6","2","2014-08-15 16:34:27","5712694","1","","468793","","2011-06-07 09:32:10","2011-04-19 06:49:39",""
"5712635","what are the php commands to create and retrieve password with SHA-256 encryption?","Newbie here. I'm trying to encrypt the user password using SHA-256 after they've made their account and then when the user tries to log in, it will try to match their input with any of the encrypted passwords in the mysql database. I was wondering if someone could give me an example code?
","If using PHP >= 5.5, you should be using password_hash() for storing passwords, and password_verify() to check. If using PHP >= 5.3, you should be using this compatibility module. If using an earlier version of PHP, you should upgrade.
Do not roll your own password hashing. There is no stressing this enough. Take a look at John the Ripper to see how fast passwords that have only been hashed with cryptographic hashes (that are designed to be fast!) can be cracked.
","653","<php><authentication><encryption><sha256>","2","0","2","2014-08-15 16:34:27","5712694","1","","468793","","2011-06-07 09:32:10","2011-04-19 06:49:39",""
"7003441","SHA Encryption - Are Salts Really Needed?","I'm using Jquery SHA512.js to sent encrypt and send a username and password to the server.
At the server I'm doing the following to create my DB stored HASH:
$dbhash = = hash('sha256',(hash('sha512',$user) . hash('sha256',$extremesalt)));
This all works fine.
My Question is what value is the Salt?
At the point the Salt is applied to the password, the password is already on the server and not in transit across the Internet. Also the Salt is stored next to the password hash. 
Therefore it appears someone would need to get my table with hash's and if they did they could also get the salt and the rest of my code and do what they wanted with my site in general.
I can see its good to apply a salt and I will do so but as it only occurs on the server and not from the browser to the server I question its value. Am I missing something?
One other question - is it possible to apply a salt from the browser to the server. I assume not or at least if you did it would be visible if one checked the source (eg: in my cause visible in jquery). Thus of no real value.
thx
","The point of the salt is to make it harder to see if 2 people's passwords are the same. One thing about SHA is that it's not easily reversible. Most attacks involve generating hashes for common passwords so for reasonably complicated passwords it becomes harder especially with salts (some people use usernames as salts, others use randomly generated numbers). Usually you want to do this on the server side code (I don't think it's safe to do on browser code). You should also never store the actual password on the server you only store the hash (and maybe the salt if you don't already know it)
Upon a second look I see that you're using 2 hashes one after the other 256 and then a 512. This is a bad idea, use one and stick with it. You waste time computing multiple hashes.
","644","<php><jquery><sha256>","0","4","4","2011-08-09 22:25:15","","0","","","","","2011-08-09 21:51:00",""
"7003441","SHA Encryption - Are Salts Really Needed?","I'm using Jquery SHA512.js to sent encrypt and send a username and password to the server.
At the server I'm doing the following to create my DB stored HASH:
$dbhash = = hash('sha256',(hash('sha512',$user) . hash('sha256',$extremesalt)));
This all works fine.
My Question is what value is the Salt?
At the point the Salt is applied to the password, the password is already on the server and not in transit across the Internet. Also the Salt is stored next to the password hash. 
Therefore it appears someone would need to get my table with hash's and if they did they could also get the salt and the rest of my code and do what they wanted with my site in general.
I can see its good to apply a salt and I will do so but as it only occurs on the server and not from the browser to the server I question its value. Am I missing something?
One other question - is it possible to apply a salt from the browser to the server. I assume not or at least if you did it would be visible if one checked the source (eg: in my cause visible in jquery). Thus of no real value.
thx
","Mixing hashes like that is rather pointless. Taking an sha512 hash and running it through sha256 necessarily cuts the keyspace in half, so all you've done is waste cpu time and double the odds of a collision. The odds will still be vanishingly small/microscopic, but it's still something to consider.
The salt is there as a butt-covering mechanism. If for some reason your database were to leak (e.g. a dump file got ""lost""), it would be trivial to generate an sha256/512 rainbow table of common passwords and see if there's any hits on your table. The hash is there to make it far more expensive to generate a rainbow table. e.g. ""password"" is easy to hash and check for. ""password#^$@#%#^Y#@#$@#^%$^Y%%$"" is far less likely to be rainbowed.
","644","<php><jquery><sha256>","0","2","4","2011-08-09 22:25:15","","0","","","","","2011-08-09 21:51:00",""
"7003441","SHA Encryption - Are Salts Really Needed?","I'm using Jquery SHA512.js to sent encrypt and send a username and password to the server.
At the server I'm doing the following to create my DB stored HASH:
$dbhash = = hash('sha256',(hash('sha512',$user) . hash('sha256',$extremesalt)));
This all works fine.
My Question is what value is the Salt?
At the point the Salt is applied to the password, the password is already on the server and not in transit across the Internet. Also the Salt is stored next to the password hash. 
Therefore it appears someone would need to get my table with hash's and if they did they could also get the salt and the rest of my code and do what they wanted with my site in general.
I can see its good to apply a salt and I will do so but as it only occurs on the server and not from the browser to the server I question its value. Am I missing something?
One other question - is it possible to apply a salt from the browser to the server. I assume not or at least if you did it would be visible if one checked the source (eg: in my cause visible in jquery). Thus of no real value.
thx
","I don't know your app, but wouldn't you want to just send the username/pwd to the server using SSL and let the public key encryption of SSL take care of the encryption for you.  The server can then generate an appropriate hash to either store the hashed password or to compare to a previously stored hash for verification.
","644","<php><jquery><sha256>","0","0","4","2011-08-09 22:25:15","","0","","","","","2011-08-09 21:51:00",""
"7003441","SHA Encryption - Are Salts Really Needed?","I'm using Jquery SHA512.js to sent encrypt and send a username and password to the server.
At the server I'm doing the following to create my DB stored HASH:
$dbhash = = hash('sha256',(hash('sha512',$user) . hash('sha256',$extremesalt)));
This all works fine.
My Question is what value is the Salt?
At the point the Salt is applied to the password, the password is already on the server and not in transit across the Internet. Also the Salt is stored next to the password hash. 
Therefore it appears someone would need to get my table with hash's and if they did they could also get the salt and the rest of my code and do what they wanted with my site in general.
I can see its good to apply a salt and I will do so but as it only occurs on the server and not from the browser to the server I question its value. Am I missing something?
One other question - is it possible to apply a salt from the browser to the server. I assume not or at least if you did it would be visible if one checked the source (eg: in my cause visible in jquery). Thus of no real value.
thx
","$dbhash = = hash('sha256',(hash('sha512',$user) . hash('sha256',$extremesalt)));

Should be (no need for double hashing) 
$dbhash = = hash('sha512',$pass + $salt);

Where pass is the password and salt is something unique about the user (userid for example). If you opt for random value you need to store it with the hash.
","644","<php><jquery><sha256>","0","0","4","2011-08-09 22:25:15","","0","","","","","2011-08-09 21:51:00",""
"3079921","Windows C SHA256 Invalid Generation Issue","Hey there. I'm having a very strange problem with creating sha256 hashes. I made a simple C console program that takes a file path as an argument and uses the standalone sha256 code that can be found here. I compiled the program using MinGW 5.1.6 on Windows 7 x64.
When testing the program on a file, the resultant hash is wrong. I made sure of this by using md5deep on the file, and then by using sha256sum on the file under Linux.
I also verified it was not the code by compiling and running the same code on my Linux box with the same file; the hash it produced was identical to the ones produced by md5deep and sha256sum.
I also adapted Aaron Gifford's sha256 implementation into a different version of my simple program and performed the test again on both Windows and Linux and ended up with the same result.
Could it be possible that the issue is being caused by compiler flags that have not been switched on?
My knowledge of C isn't amazing and my knowledge of compiler options is even worse, so any help would be kindly appreciated.
The code for the simple program is below:
#include <stdio.h>
#include ""sha256.h""

#define BUFLEN 16384

int main(int argc, char *argv[]) {
    sha256_context ctx256;
    sha256_starts(&ctx256);
    int kl, l, fd;
    unsigned char buf[BUFLEN];
    FILE *file = (FILE*) 0;
    char *filepath;

    fd = fileno(stdin);

    filepath = argv[1];
    file = fopen(filepath, ""r"");

    fd = fileno(file);
    while ((l = read(fd, buf, BUFLEN)) > 0) {
        kl += l;
        sha256_update(&ctx256, buf, l);
    }
    fclose(file);
    uint8 sha256sum[32];
    sha256_finish(&ctx256, sha256sum);
    int i;
    for (i = 0; i < 32; i++) {
        printf(""%02x"", sha256sum[i]);
    }
    printf(""\n"");

    return 0;
}

","Binary mode gets ignored on Linux, but it applies in Windows. For reference on what it does, see http://msdn.microsoft.com/en-us/library/yeby3zcb%28VS.71%29.aspx. In short, \r\n gets translated to \n in non-binary mode.
","643","<c><windows><linux><mingw><sha256>","0","0","1","2010-11-25 20:26:08","","2","","","","","2010-06-20 16:14:02",""
"33300844","HMAC sha256 returning different values in c# than python","I need to port some python code into c# and I'm having some trouble with this line:

Python

hmac.new(key, message,digestmod=hashlib.sha256).digest()


C#

HMACSHA256 hm = new HMACSHA256(key);
byte[] result = hm.ComputeHash(enc.GetBytes(message));

Why am I getting a different result in C# when key and message are the same (checked byte-by-byte) ? 
","You can get different hashes for the same message if you use different encodings when converting the message into a byte array. It is not clear which encoding you are using, but the point is that they should match.
For example:
hmac.new(""mykey"", ""mymessage"",digestmod=hashlib.sha256).digest()


gTM3eMvH4WsjwCGzp4gZNV5a62dEcWw/gjTMPngjJpQ=

In C# you get different results depending on your 'enc' variable.
Encoding enc = Encoding.GetEncoding(""ASCII"");


gTM3eMvH4WsjwCGzp4gZNV5a62dEcWw/gjTMPngjJpQ=

Encoding enc = Encoding.GetEncoding(""Unicode"");


2wqHPyE5oiI3ukxOaKo9ao6AN8fcwjgdDInBHTXTwGQ=

","642","<c#><python><sha256>","1","5","1","2015-10-23 11:55:36","33301723","0","1","","","","2015-10-23 11:06:11",""
"49024459","Hashing a csv file in python with a key","I have a csv file with 1000+ emailadreses which I want to hash using a SHA256 HMAC and a shared key, encoded to Base64.
There was a similiar problem here, but I can't adapt the solution to work for me. I am new to python and I don't know where to change the code in order to make use of the shared key. 
This is the slightly adapted code from the answer:
import csv
import hashlib
import hmac
import base64

IN_PATH = 'test.csv'
OUT_PATH = 'test_hashed.csv'
ENCODING = 'utf8'
HASH_COLUMNS = dict(Mail='md5')


def main():
    with open(IN_PATH, 'rt', encoding=ENCODING, newline='') as in_file, \
            open(OUT_PATH, 'wt', encoding=ENCODING, newline='') as out_file:
        reader = csv.DictReader(in_file)
        writer = csv.DictWriter(out_file, reader.fieldnames)
        writer.writeheader()
        for row in reader:
            for column, method in HASH_COLUMNS.items():
                data = row[column].encode(ENCODING)
                digest = hashlib.new(method, data).hexdigest()
                row[column] = '0x' + digest.upper()
            writer.writerow(row)

if __name__ == '__main__':
    main()

The input file (.csv) looks like this:
Mail
DHSKA@gmail.com
DJÖANw12@gmail.com
JSNÖS83@ymail.com
HDKDLSA@gmail.com
KKKDLAmS19@yamil.com

And with the code above, the output file looks like this:
0xB6A77B6EB853CC4CC8342B312293FA9C
0xEB439592D8EEC2A38A597350EF80E512
0x833EB6AEC1D03D7D8C94606E0D749B80
0x8007D8D1702E8A749EBD6033A52A7897
0x415E067487C4A5FBDB86AB0F855DB114

But since I do want to use a HMAC with secret key and sha256, the above solution doesn't work for me and I don't know how to incorporate this approach. 
The key would be something like this: 
123Abc

I was trying to do something like this, but for the whole file:
import hmac
import hashlib
import base64

secret = ""123Abc""
secret_bytes = bytes(secret, 'latin-1')
data = ""DHSKA@gmail.com""
data_bytes = bytes(data, 'latin-1')

digest = hmac.new(secret_bytes, msg=data_bytes, digestmod=hashlib.sha256).digest()
signature = base64.b64encode(digest).decode()

Thus, my question is how I can incorporate the HMAC SHA 256 hashing wile using the a secret key, in the above code? I just can't figure out which parameters to change?
","I don't think you need to trouble yourself with the dictionary; you don't have a variable number of columns here, you are applying your transformation to just one column.
It'll be easier to follow if you just put your working HMAC method into a function:
import hmac
import hashlib
import base64

secret = ""123Abc""
secret_bytes = bytes(secret, 'latin-1')

def create_signature(email, secret_bytes):
    data_bytes = email.encode('latin-1')
    digest = hmac.new(secret_bytes, msg=data_bytes, digestmod=hashlib.sha256).digest()
    signature = base64.b64encode(digest).decode()
    return signature

This now neatly produces a Base64 string with a HMAC digest from an email address and your (encoded) secret:
>>> create_signature('DHSKA@gmail.com', secret_bytes)
'3KaSw4QeA5l0rz49uutaDGemn4Et4CQnbnngm6mmpjE='

Now you can apply that to the 'Mail' column values, and write out the new CSV with the results:
with open(IN_PATH, 'rt', encoding=ENCODING, newline='') as in_file, \
        open(OUT_PATH, 'wt', encoding=ENCODING, newline='') as out_file:
    reader = csv.DictReader(in_file)
    writer = csv.DictWriter(out_file, reader.fieldnames)
    writer.writeheader()
    for row in reader:
        row['Mail'] = create_signature(row['Mail'], secret_bytes)
        writer.writerow(row)

Demo:
>>> import sys, csv, io
>>> demo_input = io.StringIO('''\
... Mail
... DHSKA@gmail.com
... DJÖANw12@gmail.com
... JSNÖS83@ymail.com
... HDKDLSA@gmail.com
... KKKDLAmS19@yamil.com
... ''')
>>> demo_output = io.StringIO()
>>> with demo_input as in_file:
...     reader = csv.DictReader(in_file)
...     writer = csv.DictWriter(demo_output, reader.fieldnames)
...     writer.writeheader()
...     for row in reader:
...         row['Mail'] = create_signature(row['Mail'], secret_bytes)
...         writer.writerow(row)
...
46
46
46
46
46
>>> print(demo_output.getvalue())
Mail
3KaSw4QeA5l0rz49uutaDGemn4Et4CQnbnngm6mmpjE=
dP9IU66yKnYP/6mFRZ6TAAAN3lmxAcUPk9o1iFfpGDs=
ajNdCZF8ndw2SrgtSzcVCbeSpFsXI/Z6Ep0IC2fj+WU=
TgeFEj8CgvcQbVcLHTIIY1ULLnYkWAZaia5k01IQiJY=
Xu94abwV/5/HUXY+T3NpUgulGvew+L0UYzkPuRSv/98=

","640","<python><python-3.x><sha256><hmac>","1","1","1","2018-02-28 14:12:46","49031320","4","","100297","","2018-02-28 14:12:46","2018-02-28 07:51:27",""
"44545577","HMAC and SHA256 - how to validate using nonce","Im trying to integrate with a Web API. Looking at how they use SHA256 and HMAC to generate their signature.  However they also use whats known as an ""nonce"", which I had to look up.  This api generates the ""signature"" using a secret that both of us know, combined with the url of the request.
So, do I use the same nonce they are using to generate a signature on my end to do the validation with?
Im looking at a sample of how they are generating their signature like this on the client end.
        var message = ""https://my.server.com/new-callback?reqID=test&nonce=8cf95201-4d3c-4397-9117-d7ee6ad89d93"";
        var secret = ""g394g732vhsdfiv34"";
        var hash = CryptoJS.HmacSHA256(message, secret);
        var signature = hash.toString(CryptoJS.enc.Base64); 

result of signature...


    // ihyCCfTHog7TDQYT4tQM5ISYSjEIaChSeJmIo3UMa+U= 
However, I dont get the same result using this tool 
http://www.freeformatter.com/hmac-generator.html
So to validate this on my end (within the api), I need to use the same inputs to compute the signature and then simply compare the resulting strings, correct?  
What purpose does this ""nonce"" component serve?  From what Ive read, it more or less serves the same purpose as a GUID.
What am I missing?
","The output I get from http://www.freeformatter.com/hmac-generator.html is hex encoded and the value you provided (ihyCCfTHog7TDQYT4tQM5ISYSjEIaChSeJmIo3UMa+U=) is base64 encoded.
If you decode the base64 encoded message, convert it to hex and compare it to the result from freeformatter (which is 8a1c8209f4c7a20ed30d0613e2d40ce484984a3108682852789988a3750c6be5) - they both match. You might be interested in https://stackoverflow.com/a/12987042/3906760 for conversion functions.
And yes: You compute the HMAC on both sides and compare the result. If it matches (no no one else knows the secret) you're safe.
The nonce is a random value in order to prevent replay-attacks (cf. https://en.wikipedia.org/wiki/Cryptographic_nonce).
","640","<javascript><sha256><hmac>","-1","1","1","2017-06-14 13:15:06","44545766","0","","3906760","","2017-06-14 13:15:06","2017-06-14 13:00:44",""
"36359686","Printing SHA256 sum","I am trying to build a C program to find an unknown string equivalent to a given SHA256 sum. The final program should generate strings of the format ""###ENCRYPTION,"" then find it's SHA sum and compare to the known value. However, I am having problems simply generating the SHA sum. For some reason, my method of printing the sum drops out 1 character:
000ENCRYPTION=f6bc212596f37e1855fb2bbfaf49b514c5ea79e332c57bb6**0**c493bafd38baff5

But my code generates:
000ENCRYPTION=f6bc212596f37e1855fb2bbfaf49b514c5ea79e332c57bb6c493bafd38baff5

This link seems to seems to describe a similar problem but it does not quite fit my problem.
I have already built a program in Python to do the same thing, but now I want to build one in C to compare run times.
(I also used the CommonCrypto Library from OS X  but OpenSSL would work too.)
Any help would be greatly appreciated!
#include <stdio.h>
#include <CommonCrypto/CommonDigest.h>
#include <string.h>

int main() {
int c=0;
char *input_sum=""9dcaea0ae17e31d47640cb7c390976d8962823a55ea03fe43b0d061f5624069f""; // currently unused
char *end=""ENCRYPTION"";
char temp[100]; // need to learn more about allocating memory
unsigned char output[32]; // initializes output variable

printf(""Sum=f6bc212596f37e1855fb2bbfaf49b514c5ea79e332c57bb60c493bafd38baff5\n""); // Sum of 000ENCRYPTION from command line

while( c < 5 ) { // limited to 5 right now for testing
    sprintf(temp, ""%03d"", c); // creates leading zeros
    sprintf(temp + 3, ""%s"", end); // appends string ""end""; should ideally be moved outside loop
    c++;
    puts(temp); // visual check of input into cc_sha256

    CC_SHA256(temp, (CC_LONG)strlen(temp), output); // function does sha256sum

    int i; // for loop prints resulting byte array from cc_sha256 to hex; I believe the problem is here
    for (i = 0; i < 32; i++) {
        printf(""%x"", output[i]);
    }
    printf(""\n"");

}
return 0;
}

","Where the output should be 0c, your code only outputs the c part. This is because printf by default prints the result with the minimum number of characters possible. In this case, you should tell printf that the proper result always contains two hexadecimal digits by giving it a width, and by specifying that a zero should be placed in the most-significant nibble if the input is less than 0x10:
printf(""%02x"", output[i]);

","640","<c><sha256>","0","0","1","2016-04-01 17:57:26","","3","","-1","","2017-05-23 11:59:47","2016-04-01 15:03:01",""
"46459565","SHA256 hashing a value in Python and VB.NET produce different hashes","I am trying to re implement a hashing function in Python that had previously been written in VB.NET. The function takes a string and returns the hash. The hash is then stored in a database.
Public Function computeHash(ByVal source As String)
            If source = """" Then
                    Return """"
            End If
            Dim sourceBytes = ASCIIEncoding.ASCII.GetBytes(source)
            Dim SHA256Obj As New Security.Cryptography.SHA256CryptoServiceProvider
            Dim byteHash = SHA256Obj.ComputeHash(sourceBytes)
            Dim result As String = """"
            For Each b As Byte In byteHash
                    result += b.ToString(""x2"")
            Next
            Return result

which returns 
    61ba4908431dfec539e7619d472d7910aaac83c3882a54892898cbec2bbdfa8c
My Python reimplementation:
def computehash(source):
    if source == """":
        return """"
    m = hashlib.sha256()
    m.update(str(source).encode('ascii'))
    return m.hexdigest()

which returns
    e33110e0f494d2cf47700bd204e18f65a48817b9c40113771bf85cc69d04b2d8
The same ten character string is used as the input for both functions.
Can anyone tell why the functions return different hashes? 
","I used Microsoft's example to create a Visual Basic .Net implementation on TIO. It is functionally equivalent to your implementation and I verified your string builder produces the same output as I'm unfamiliar with VB.
A similar python 3 implementation on TIO produces the same hash as the VB example above.
import hashlib
m = hashlib.sha256()
binSrc = ""abcdefghij"".encode('ascii')
# to verify the bytes
[print(""{:2X}"".format(c), end="""") for c in binSrc]
print()
m.update(binSrc)
print(m.hexdigest()) 

So I can't reproduce your problem. Perhaps if you created a Minimal, Complete and verifiable example we might be able to assist you more.
","630","<python><vb.net><hash><sha256><hashlib>","0","1","1","2017-09-29 06:59:31","46483397","2","","","","","2017-09-28 01:27:30",""
"11251824","How can I compute a SHA-256 hash in Progress 9.1 other than writing the algorithm myself?","I am currently updating our payroll system (written in progress) to implement RTI. RTI requires a SHA-256 Hash to be created for linking the BACS payment to the RTI submission for each record. There is a SHA-1 object i can call in OE10 which does the job (only SHA1 though). I realize that SHA-256 is implemented in the latest release of OE 11 but some of our clients do not have or do not want to upgrade to OE11. Currently i use an old JAR routine to generate a SHA1 hash for the sending of p45/46 etc via the Government portal. I would like to stop using java and therefore would like to implement this in progress
Any advice/pointers much appreciated
Kind Regards
Craig H
","Progress version 9 was designed and released in the late 1990s.  This kind of functionality was not on the radar back then and v9 is now retired -- so no more releases.
OpenEdge 10 is much newer, is a simple upgrade, and supports SHA-256 out of the box.  I suggest that you upgrade.
","629","<sha256><progress-4gl>","1","0","1","2012-06-29 12:25:15","","0","","","","","2012-06-28 19:46:25",""
"33729678","Verify sha256 hash","I am trying to verify that this hash was not messed with, and use the time stamp to do so. I know there is no way to reverse a hash without brute force. How would I be able to verify it at a later date? 
Is there a php code I dont know about? 
Please and thank you.
$log = fopen($datalog, 'a') or die(""can't open file"");

echo "" "";
echo ""IP: "";
echo $address;
$addressHash = hash_hmac('sha256', $address,  $key);
$add64 = base64_encode($addressHash);
fwrite ($log, $add64);
echo "" "";
echo ""INFO: "";
echo $info;
$infoHash = hash_hmac('sha256', $info,  $key);
$info64 = base64_encode($infoHash);
fwrite ($log, $info64);
echo "" "";
echo ""TIMESTAMP: "";
echo $datetimeStamp;
$tsHash = hash_hmac('sha256', $datetimeStamp,  $key);
$ts64 = base64_encode($tsHash);
fwrite ($log, $ts64);
echo "" "";
echo ""COUNTRY: "";
echo $country;
$countryHash = hash_hmac('sha256', $country,  $key);
$country64 = base64_encode($countryHash);
fwrite ($log, $country64);
echo "" "";
echo ""LATITUDE: "";
echo $lat;
$latHash = hash_hmac('sha256', $lat,  $key);
$lat64 = base64_encode($latHash);
fwrite ($log, $lat64);
echo "" "";
echo ""LONGITUDE: "";
echo $long;
$longHash = hash_hmac('sha256', $long,  $key);
$long64 = base64_encode($longHash);
fwrite ($log, $long64);

fclose($log);

}

","Generate the string you think php is hashing and pass it to a different sha256 calculator to compare the results.
There are online calculators - just google sha256 online to get one. Alternatively, on linux/OSX there is a terminal sha256 calculator (sha256sum on my linux). It could be used in the terminal as follows:
echo ""string to sha"" | sha256sum

Hope this helps.
","627","<php><hash><encode><sha256>","0","0","1","2015-11-16 06:45:28","","1","","","","","2015-11-16 06:36:35",""
"37995507","Encrypt password to protect security attacks using sha256 with javascript","I want to encrypt my password using sha256 on jsp page itself using javascript to protect various security attacks and send this encrypted password to spring controller. But I am not able to get hashed string generated.
 This is my javascript code. First alert is coming but not the second one. Do i need to include any jar or js for sha256 to work?
document.getElementById('loginButton').onclick = function() {
        var txt_string = document.getElementById('loginPassword').value; // gets data from input text
        alert('normal  password is' + txt_string);
        // encrypts data and adds it in #strcrypt element
        var hashedpassword = SHA256(txt_string);
        alert('hashed password is' + hashedpassword);
        return false;
    }

","SHA256 is not included by default by javascript you need to use a library, quick google search give this page http://www.movable-type.co.uk/scripts/sha256.html you can also take a look at this question Are there any SHA-256 javascript implementations that are generally considered trustworthy?
","626","<javascript><jsp><sha256>","0","0","1","2016-06-23 15:48:02","37995667","4","","","","","2016-06-23 15:10:04",""
"48885321","XML SignatureMethod and DigestMethod","Following a code example:
<ds:Signature xmlns:ds=""http://www.w3.org/2000/09/xmldsig#"">
<ds:SignedInfo>
  <ds:CanonicalizationMethod Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#"" />
  <ds:SignatureMethod Algorithm=""http://www.w3.org/2000/09/xmldsig-more#rsa-sha256"" />
  <ds:Reference URI="""">
    <ds:Transforms>
      <ds:Transform Algorithm=""http://www.w3.org/2001/09/xmldsig#enveloped-signature"" />
      <ds:Transform Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#"" />
    </ds:Transforms>
    <ds:DigestMethod Algorithm=""http://www.w3.org/2001/04/xmlenc#sha256"" />
    <ds:DigestValue>...</ds:DigestValue>
  </ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>...</ds:SignatureValue>
<ds:KeyInfo>
  <ds:KeyName>...</ds:KeyName>
</ds:KeyInfo>


There is a SignatureMethod Algorithm (http://www.w3.org/2000/09/xmldsig#rsa-sha256) and a DigestMethod Algorithm (http://www.w3.org/2000/09/xmldsig-more#rsa-sha256).
  As far as I am correctly informed, SignatureMethod Algorithm means that the content of the XML is first hashed (by SHA256) and then signed by RSA.
Now I read an article about increasing security Level by changing to SHA512. 
What would be the most effect on my code? Would it be more slow? And what are the main arguments for SHA512 to definitely change. Thank you.
","SHA-256 is already providing you with 128 bits of security when it comes to collision resistance. So there isn't all that much need to upgrade; cracking 128 bits of security is not thought possible. The SHA-3 competition has shown us that - besides length extension attacks - SHA-2 is still pretty secure. SHA-512 upgrades your security to 256 bits, so if that's your target then it makes sense to use it. 
Quantum computers could in the end half that 128 bit security to 64 bits of security using Grovers algorithm. That's currently however not feasible at all, and as such a quantum computer could very likely also attack RSA, so upgrading for that reason doesn't seem all that useful.
SHA-512 is often faster on modern computers than SHA-256. That sounds strange, but SHA-512 uses 64 bit operations internally while SHA-256 uses 32 bit. As CPUs are more geared towards 64 bit operation on the desktop you could speed up the processing time and be more secure. Expect a performance hit when switching to 32 bit processing or - worse - 8 or 16 bit embedded CPU's though.

There is also SHA-2 512/256 which is the same as SHA-512 but for the output size (and a few constants). It is however not as prevalent as SHA-256 which doesn't make it a good option in most situations.
The signed data is usually much larger than the SignedInfo, processed by the signature generation algorithm. So changing the DigestMethod makes most sense.
Finally, not that you need about a 16KiB RSA key to be able to hit 256 bits of security. So if you want to upgrade everything to 256 bit security levels you may want to switch to ECDSA with a 512 or 521 bit named curve.
","625","<digital-signature><sha256><xml-signature><sha512>","0","0","1","2018-02-22 13:47:20","48929027","0","","8799866","","2018-02-20 12:40:38","2018-02-20 12:28:30",""
"6285005","Sha256 function in PHP with init?","Are there any function in PHP where you can set init state for sha256?
I would like to translate this javascript to php https://github.com/jwhitehorn/jsMiner/blob/4fcdd9042a69b309035dfe9c9ddf716119831a16/engine.js#L149-165
","Here is a php sha256 class with init state
https://github.com/codler/Bitcoin-phpMiner/blob/ed2e422a025ebf8555ecd53ce03aad631550b3e7/sha256.php
","622","<php><function><init><sha256>","0","0","1","2011-11-24 21:13:41","8262531","4","","","","","2011-06-08 20:43:13",""
"46946106","HMAC SHA256 base64 encoded","There is a Node.JS code which creates a signature for Azure.
var signature = crypto.createHmac(""sha256"", key).update(body).digest(""base64"");  

How can I create the same signature using LUA. (I think I need to use Lua-Lockbox for this)
https://github.com/somesocks/lua-lockbox
I can see it has Hmac, sha256 and base64 primitives but I'm not sure how I can implement this code as LUA
Is there any clue?
","I don't know lua-lockbox, but it looks like this should work:
local stream = require ""lockbox.util.stream""
local hmac = require ""lockbox.mac.hmac""
local sha256 = require ""lockbox.digest.sha2_256""
local base64 = require ""lockbox.util.base64""

local body = stream.fromString(""thisisthebody"")
local key = {(""thekey""):byte(1,-1)}

local digest = hmac()
    .setBlockSize(64)
    .setDigest(sha256)
    .setKey(key)
    .init()
    .update(body)
    .finish()
    .asBytes()

local base64_digest = base64.fromArray(digest)

print(base64_digest)

","621","<lua><base64><sha256><hmac>","0","1","1","2018-03-21 20:57:56","","0","","","","","2017-10-26 04:55:07",""
"12167006","C# SHA256 on files with very long file paths","I get a List<string> of files via recursion through FileFinderEx via win32 api (DllImport of kernel32). (There's several questions that go over how this is done).
I handle fully qualified paths greater than MAX_PATH by using \\?\UNC\ and \\?\.
Also, from win32 api I can grab the ""short path"" (8.3 name) of file via GetShortPathNameW.
Now that I have the List<string> of fully qualified paths to files, I want to iterate over each path and place their SHA256 into another list (same index).  So roughly, something like this:
List<string> files = new List<string>();
//win api function populates files ...
List<string> hash = new List<string>();
for (int i = 0; i < files.Count; i++)
{
    using (var stream = new BufferedStream(File.OpenRead(files[i]), 1200000))
    {
        SHA256Managed sha = new SHA256Managed();
        byte[] checksum = sha.ComputeHash(stream);
        hash.Add(BitConverter.ToString(checksum).Replace(""-"", String.Empty));
        stream.Close();
    }
}

The problem I face is even if I give it the ""short path"" (8.3 name) the File.OpenRead always throws exception if the fully qualified UNC name is greater than MAX_PATH (260 I believe).
So... now what?  Is there some win32 api function I can import to do the reading instead of File.OpenRead?  Or is there some other .NET method to open files with long file paths?  Any tips to get around this limitation?
","Take a look at the CreateFile function in kernel32.dll. Despite it's name, you can use it to either read or create a file, and the Unicode version will allow you to use paths longer than MAX_PATH.
[DllImport(""kernel32.dll"", CharSet = CharSet.Unicode)]
internal static extern SafeFileHandle CreateFile(
    string lpFileName,
    EFileAccess dwDesiredAccess,
    EFileShare dwShareMode,
    IntPtr lpSecurityAttributes,
    ECreationDisposition dwCreationDisposition,
    EFileAttributes dwFlagsAndAttributes,
    IntPtr hTemplateFile);

There is a good series of posts (part 1 here) on the BCL Team's blog from a few years back covering the topic of long paths in Windows and .NET, which I think you'd find useful. 
","620","<c#><windows><filepath><sha256>","0","2","1","2012-08-28 20:57:45","12167421","0","","655203","","2012-08-28 20:37:51","2012-08-28 20:24:41",""
"29034546","Need help converting this PHP sha256 hashing code to swift (iOS)","I need to convert this pice of PHP code to swift to create hashes, I am using a hash pattern in PHP to hash 2 strings with SHA256 and I would like to do this in swift, any ideas?
The SELF::SECRET is a secret key, and the SELF::HASH_PATTERN is my pattern and looks something like this: ""00101010011100001010""
public function hash($first, $second) {
    // Append the secret to the values.
    $first = self::SECRET . $first;
    $second = $second . self::SECRET;

    // Hash the values.
    $hash = hash_init('sha256');
    hash_update($hash, $first);
    $hash1 = hash_final($hash);
    $hash = hash_init('sha256');
    hash_update($hash, $second);
    $hash2 = hash_final($hash);

    // Create a new hash with pieces of the two we just made.
    $result = '';
    for ($i = 0; $i < strlen(self::HASH_PATTERN); $i++) {
        $result .= substr(self::HASH_PATTERN, $i, 1) ? $hash2[$i] : $hash1[$i];
    }

    return $result;
}

Thanks!
UPDATE:
    This is the part which I can't figure out:
    $hash = hash_init('sha256');
    hash_update($hash, $first);
    $hash1 = hash_final($hash);

UPDATE:
After a few hours of doing research and coding I finally got it figured out.
This is the code that I wrote, maybe not the best, but it works :)
I used a small class from github for generating SHA256 strings in swift called NSHash
func create_token(first:String, second:String) -> String {

    var newFirst = constants.secret + first as NSString
    var newSecond = second + constants.secret as NSString

    var hash1 = newFirst.SHA256()
    var hash2 = newSecond.SHA256()

    var result = """"

    for var i = 0; i < countElements(constants.hash_pattern); i++ {

        var character = ""\(constants.hash_pattern[i])"" as String
        var number:Int = character.toInt()!

        if number == 1 {

            result = ""\(result)\(hash2[i])""


        }else {
            result = ""\(result)\(hash1[i])""

        }

     }

    return result
}

","","618","<php><ios><swift><hash><sha256>","1","","0","2015-03-13 16:15:00","","2","","4323401","","2015-03-13 16:15:00","2015-03-13 14:16:20",""
"41972328","Docker History Base Image Add:sha256hash","I'm trying to better understand the docker history output. When I run docker history nginx:latest I get output that nearly matches the Dockerfile:
/bin/sh -c #(nop) CMD [""nginx"" ""-g"" ""daemon off;""]
/bin/sh -c #(nop) EXPOSE 443/tcp 80/tcp/bin/sh -c ln -sf /dev/stdout /var/log/nginx/access.log  && ln -sf /dev/stderr /var/log/nginx/error.log
/bin/sh -c apt-key adv --keyserver hkp://pgp.mit.edu:80 --recv-keys 573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62  && echo ""deb http://nginx.org/packages/mainline/debian/ jessie nginx"" >> /etc/apt/sources.list && apt-get update && apt-get install --no-install-recommends --no-install-suggests -y       ca-certificates nginx=${NGINX_VERSION} nginx-module-xslt nginx-module-geoip nginx-module-image-filter nginx-module-perl nginx-module-njs gettext-base  && rm -rf /var/lib/apt/lists/*
/bin/sh -c #(nop) ENV NGINX_VERSION=1.11.9-1~jessie
/bin/sh -c #(nop) MAINTAINER NGINX Docker Maintainers ""docker-maint@nginx.com""
/bin/sh -c #(nop) CMD [""/bin/bash""]
/bin/sh -c #(nop) ADD file:89ecb642d662ee7edbb868340551106d51336c7e589fdaca4111725ec64da957 in /

with three notable exceptions

All of the lines start with /bin/sh -c #(nop) except for the third line which is the RUN command in the Dockerfile - no big deal
The commands are in reverse (the last command in the Dockerfile is the first command listed with docker history) - also no big deal
This one's the kicker - The FROM debian:jessie line from the Dockerfile is translated to:
ADD file:89ecb642d662ee7edbb868340551106d51336c7e589fdaca4111725ec64da957 in /
CMD [""/bin/bash""]

It took me a little while to realize that the last two commands above (the ADD and CMD [""/bin/bash""] lines) were carried over from the base image debian:jessie. Once I figured that out, I thought to myself, ""self, the file:89ec...da957 must be the sha256 hash of the rootfs.tar.xz included as the file system. But no, the sha256 hash of the rootfs.tar.xz is 467328e24c316fd058f086eb8eb77706f3f448ad8886d202e7c9687d30692eca.
Herein lies my question: Where does the hash listed in docker history come from? And why is it different than the actual hash of rootfs.tar.xz?
I've thoroughly reviewed much of Docker's documentation, with no luck, including:

https://docs.docker.com/engine/userguide/storagedriver/imagesandcontainers/
https://docs.docker.com/engine/reference/commandline/history/
https://docs.docker.com/engine/reference/builder/

The hash is consistent across all images that use debian:jessie as the base image. Even docker history debian:jessie shows the same hash:
/bin/sh -c #(nop) CMD [""/bin/bash""]
/bin/sh -c #(nop) ADD file:89ecb642d662ee7edbb868340551106d51336c7e589fdaca4111725ec64da957 in /

and I think you might agree, that there is only one file that could possibly have a hash in the debian:jessie Dockerfile:
FROM scratch
ADD rootfs.tar.xz /
CMD [""/bin/bash""]

If anyone could provide some insight or point me to a resource I have yet to find, it would be much appreciated.
","The docker brew debian image is made of intermediate containers, as described in ""Understand images, containers, and storage drivers"".

See issue 25925: each layer being stored in (for instance) /var/lib/docker/aufs/mnt/.
So ADD file:89ecb642d662ee7edbb868340551106d51336c7e589fdaca4111725ec64da95 would add all files found in /var/lib/docker/aufs/mnt/89ecb642d662ee7edbb868340551106d51336c7e589fdaca4111725ec64da95.
(Note: I mentioned the (nop) part in ""Docker missing layer IDs in output"")
","617","<linux><docker><hash><dockerfile><sha256>","5","1","1","2017-02-01 05:49:31","41972756","0","3","","","","2017-02-01 05:12:48",""
"27499971","Validate Stored Encrypted Password in SQL Server 2012","In SQL Server I run a command:
Select HASHBYTES('SHA2_256', '12345678') as EncryptedString

It gives 0xEF797C8118F02DFB649607DD5D3F8C7623048C9C063D532CC95C5ED7A898A64F this string as an output, this string has 66 characters.
On the same side, Itried to encrypt password from C# code, using this:
public string GetSHAEncryptedCode(string Text)
{
    //SHA1 sha26 = new SHA1CryptoServiceProvider();
    SHA256 sha26 = new SHA256CryptoServiceProvider();
    byte[] sha256Bytes = System.Text.Encoding.UTF8.GetBytes(Text);
    byte[] cryString = sha26.ComputeHash(sha256Bytes);
    string sha256Str = string.Empty;
    for (int i = 0; i < cryString.Length; i++)
    {
        sha256Str += cryString[i].ToString(""X"");
    }
    return sha256Str;
}

Suupose, if I enter same ""12345678"" in C# code it returns me a string of 62 character long, string is EF797C8118F02DFB64967DD5D3F8C762348C9C63D532CC95C5ED7A898A64F. Now how could i validate the encrypted string coming from sql server and the other string from C# code in order to login the user from login page?
","Your C# format string is incorrect - it it missing leading 0s when the hex value is less than 10.
Instead you need to use ""X2"" as the format string so that it is padded to 2 numbers:
public string GetSHAEncryptedCode(string Text)
{
    //SHA1 sha26 = new SHA1CryptoServiceProvider();
    SHA256 sha26 = new SHA256CryptoServiceProvider();
    byte[] sha256Bytes = System.Text.Encoding.UTF8.GetBytes(Text);
    byte[] cryString = sha26.ComputeHash(sha256Bytes);
    string sha256Str = string.Empty;
    for (int i = 0; i < cryString.Length; i++)
    {
        sha256Str += cryString[i].ToString(""X2"");
    }
    return sha256Str;
}

This correctly returns EF797C8118F02DFB649607DD5D3F8C7623048C9C063D532CC95C5ED7A898A64F and then you can just append 0x to the start.
In any case, you should not really be converting the values to a string anyway. HASHBYTES() and sha256.ComputeHash() both return byte arrays, so it is more efficient and safer to just compare those instead. You can use the methods described in this answer to do that.
Or maybe better still, I assume you are storing the password in the database as encrypted (aren't you...?), so just encrypt the input value to a byte array in C#, then pass that to the database and use something like
SELECT * FROM users WHERE username = @username AND password = @passwordBytes
","615","<c#><asp.net><sql-server-2012><sha256>","-4","1","1","2014-12-16 10:48:07","27501091","3","0","1469208","","2014-12-16 10:48:07","2014-12-16 07:55:46",""
"33667272","HMAC SHA256 in .NET .1.1","I have to dare with a web application developed in .NET 1.1 Framework, with no possibilities to upgrade to major versions.
Having said that, I need to encrypt a text using HMAC SHA256.
I see that System.Security.Cryptography namespace in .NET 1.1 provides me a way to has a message in SHA256. But I need to use HMAC (Hash-based Message Authentication Code) with SHA256, so I send not only the text to encrypt, but also a key.
I see that .NET Framework 2.0 and later has an specific class HMACSHA256 to manage this. But haven't found an implementation for .NET 1.1.
¿Any help?
Thanks in advance
","You can add to your project the file from Microsoft:
namespace System.Security.Cryptography {
    [System.Runtime.InteropServices.ComVisible(true)]
    public class HMACSHA256 : HMAC {
        //
        // public constructors
        //

        public HMACSHA256 () : this (Utils.GenerateRandom(64)) {}

        public HMACSHA256 (byte[] key) {
            m_hashName = ""SHA256"";

#if FEATURE_CRYPTO
            m_hash1 = GetHashAlgorithmWithFipsFallback(() => new SHA256Managed(), () => HashAlgorithm.Create(""System.Security.Cryptography.SHA256CryptoServiceProvider""));
            m_hash2 = GetHashAlgorithmWithFipsFallback(() => new SHA256Managed(), () => HashAlgorithm.Create(""System.Security.Cryptography.SHA256CryptoServiceProvider""));
#else
            m_hash1 = new SHA256Managed();
            m_hash2 = new SHA256Managed();
#endif // FEATURE_CRYPTO

            HashSizeValue = 256;
            base.InitializeKey(key);
        }
    }
}

It seems that all calls are based on class that exists in .Net 1.1
","614","<c#><asp.net><sha256><hmac><.net-1.1>","0","1","1","2015-11-12 09:00:19","","2","","","","","2015-11-12 08:38:13",""
"31773305","OpenSSL and PHP SHA256 digests differ","I've trying to calculate the base64 encoded sha256 hash of some JavaScript at the command line using OpenSSL and via PHP. 
cat test.js | openssl dgst -sha256 -binary | openssl enc -base64
(p5CrWBV6O1Xp7BlWwdVXTeGeSx3uo/IsNaYOIOblAZk=)

echo base64_encode(hash(""sha256"", ""alert('Test');"", true));
(2D7QyY5W4ziVZhF/vzeGy8oHgnz4TjqaoifV41mHi3c=)

The resulting base64 encoded values are not the same, but the input to each method is the same. Stepping back, the sha256 hash digests do not match before base64 encoding.
cat test.js | openssl dgst -sha256
(a790ab58157a3b55e9ec1956c1d5574de19e4b1deea3f22c35a60e20e6e50199)

echo hash(""sha256"", ""alert('Test');"");
(d83ed0c98e56e3389566117fbf3786cbca07827cf84e3a9aa227d5e359878b77)

I'm not sure where the problem is.
","cat is adding an extra newline character, which is going along for the ride in the digest. Try running the digest on the file directly:
openssl dgst -sha256 -binary test.js | ...

","612","<php><openssl><base64><sha256>","1","0","2","2015-10-27 08:17:53","31783932","0","","1414715","","2015-10-27 08:17:53","2015-08-02 15:15:32",""
"31773305","OpenSSL and PHP SHA256 digests differ","I've trying to calculate the base64 encoded sha256 hash of some JavaScript at the command line using OpenSSL and via PHP. 
cat test.js | openssl dgst -sha256 -binary | openssl enc -base64
(p5CrWBV6O1Xp7BlWwdVXTeGeSx3uo/IsNaYOIOblAZk=)

echo base64_encode(hash(""sha256"", ""alert('Test');"", true));
(2D7QyY5W4ziVZhF/vzeGy8oHgnz4TjqaoifV41mHi3c=)

The resulting base64 encoded values are not the same, but the input to each method is the same. Stepping back, the sha256 hash digests do not match before base64 encoding.
cat test.js | openssl dgst -sha256
(a790ab58157a3b55e9ec1956c1d5574de19e4b1deea3f22c35a60e20e6e50199)

echo hash(""sha256"", ""alert('Test');"");
(d83ed0c98e56e3389566117fbf3786cbca07827cf84e3a9aa227d5e359878b77)

I'm not sure where the problem is.
","I found the issue in the end thanks to some support on Twitter. 
When editing the JS file with nano, it was appending a newline character on the end. Editing the file using nano -L test.js resolved the problem. 
","612","<php><openssl><base64><sha256>","1","1","2","2015-10-27 08:17:53","31783932","0","","1414715","","2015-10-27 08:17:53","2015-08-02 15:15:32",""
"37087320","How to Generate a Bitcoin Address in Ruby","I'm trying to generate Bitcoin addresses in ruby by using this guide:
https://bhelx.simst.im/articles/generating-bitcoin-keys-from-scratch-with-ruby/
But something isn't quite right, because the addresses being generated aren't coming out quite right.
Here's the class I'm using:
require 'openssl'
require 'ecdsa'
require 'securerandom'
require 'base58'

class BitcoinAddressGenerator

  ADDRESS_VERSION = '00'

  def self.generate_address
    # Bitcoin uses the secp256k1 curve
    curve = OpenSSL::PKey::EC.new('secp256k1')

    # Now we generate the public and private key together
    curve.generate_key

    private_key_hex = curve.private_key.to_s(16)
    puts ""private_key_hex: #{private_key_hex}""
    public_key_hex = curve.public_key.to_bn.to_s(16)
    puts ""public_key_hex: #{public_key_hex}""

    pub_key_hash = public_key_hash(public_key_hex)
    puts ""pub_key_hash: #{pub_key_hash}""

    address = generate_address_from_public_key_hash(public_key_hash(public_key_hex))

    puts ""address: #{address}""
  end

  def self.generate_address_from_public_key_hash(pub_key_hash)
    pk = ADDRESS_VERSION + pub_key_hash
    encode_base58(pub_key_hash + checksum(pub_key_hash))
  end

  def self.int_to_base58(int_val, leading_zero_bytes=0)
    alpha = ""123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz""
    base58_val, base = '', alpha.size
    while int_val > 0
      int_val, remainder = int_val.divmod(base)
      base58_val = alpha[remainder] + base58_val
    end
    base58_val
  end

  def self.encode_base58(hex)
    leading_zero_bytes = (hex.match(/^([0]+)/) ? $1 : '').size / 2
    (""1""*leading_zero_bytes) + int_to_base58( hex.to_i(16) )
  end

  def self.checksum(hex)
    sha256(sha256(hex))[0...8]
  end

  # RIPEMD-160 (160 bit) hash
  def self.rmd160(hex)
    Digest::RMD160.hexdigest([hex].pack(""H*""))
  end

  def self.sha256(hex)
   Digest::SHA256.hexdigest([hex].pack(""H*""))
  end

  # Turns public key into the 160 bit public key hash
  def self.public_key_hash(hex)
    rmd160(sha256(hex))
  end

end

It outputs something like:
private_key_hex: C96DE079BAE4877E086288DEDD6F9F70B671862B7E6E4FC0EC401CADB81EDF45
public_key_hex: 0422435DF80F62E643D3CFBA66194052EC9ED0DFB47A1B26A4731079A5FF84FBF98FF0A540B6981D75BA789E6192F3B38BABEF6B0286CAEB4CAFCB51BB96D97B46
public_key_hash: db34927cc5ec0066411f366d9a95f9c6369c6e1d
address: Lz3xnxx6Uh79PEzPpWSMMZJVWR36hJgVL

If I plug this address into blockchain.info and similar tools it says that it's an invalid address.
Any help would be greatly appreciated.
","In your generate_address_from_public_key_hash method, the checksum should be over the hash including the address prefix. You’re not actually using the pk variable at all at the moment after you assign it. The code should look something like:
def self.generate_address_from_public_key_hash(pub_key_hash)
  pk = ADDRESS_VERSION + pub_key_hash
  encode_base58(pk + checksum(pk)) # Using pk here, not pub_key_hash
end

The mistake seems to also be on the page you link to, I guess the author must have made a copy/paste error.

As an aside, keeping everything in hex strings and decoding back and forth seems an odd way of doing this. I would have thought it would be easier to use raw binary strings, and only encode to hex when printing out values.
","612","<ruby><sha256><bitcoin>","3","2","1","2019-07-28 10:00:04","37088682","0","","","","","2016-05-07 10:24:02",""
"42229761","PKHash RipeMD160 in python","I am trying to understand how the crypto algorithms RIPEMD and SHA256 work. The bitcoin method for computing PKHash is RIPEMD160(SHA256(PublicKey)).
I am trying to first implement the RIPEMD of SHA256(PublicKey).
pkHashStep1=hashlib.sha256(public_key.decode('hex')).digest()
print 'MyTransaction pkHashStep1 {}'.format(pkHashStep1)

MyTransaction pkHashStep1 ▒▒▒so▒/▒▒e▒▒▒¡▒7▒?9▒▒.▒ӟ!n▒h

This outputs a string that I cannot use directly, but the hashlib library can use this. Trying pkHashStep1.decode('hex') and bin(pkHashStep1) throws an error. How does it convert the hash to a usable hexstring/bin??
Currently, I have publicKey as input to my RipeMD method, instead of the pkHashStep1, and have to separately do
input=hashlib.sha256(publicKey.decode('hex')).hexdigest()

FYI: I know there is a ripemd method in hashlib. Suggesting I use it is not an answer
https://stackoverflow.com/a/2124289/4219479
","glibdud's comment got me to the answer. 
hashlib.sha256(public_key.decode('hex')).digest().encode('hex')=
hashlib.sha256(public_key.decode('hex')).hexdigest()

","610","<python><sha256><ripemd>","0","0","1","2017-02-15 03:38:13","42240269","1","","-1","","2017-05-23 11:53:23","2017-02-14 15:16:44",""
"42123064","Generate and check download file checksum in Makefile","As part of my makefile I need to download and build ZLib. However I want to ensure that when I download ZLib, it is correct by comparing the sha256 of the downloaded .tar.gz against the known correct sha256 value. This need to work on multiple platforms.
I have so far something like the following, however the value of ZLIB_SHA256_ACTUAL always seems to be blank when I compare it with ZLIB_SHA256, so my makefile always exits with an error because the checksums are not the same. I am newish to Makefiles, can someone tell me what I am doing wrong please?
ZLIB_VER = 1.2.11
ZLIB_SHA256 = c3e5e9fdd5004dcb542feda5ee4f0ff0744628baf8ed2dd5d66f8ca1197cb1a1

SHA256_CMD = sha256sum
ifeq ($(PLATFORM), OS_MACOSX)
        SHA256_CMD = openssl sha256 -r
endif
ifeq ($(PLATFORM), OS_SOLARIS)
        SHA256_CMD = digest -a sha256
endif

libz.a:
        -rm -rf zlib-$(ZLIB_VER)
        curl -O -L http://zlib.net/zlib-$(ZLIB_VER).tar.gz
        ZLIB_SHA256_ACTUAL = $(SHA256_CMD) zlib-$(ZLIB_VER).tar.gz
        ifneq ($(ZLIB_SHA256), $(ZLIB_SHA256_ACTUAL))
                $(error zlib-$(ZLIB_VER).tar.gz checksum mismatch, expected=""$(ZLIB_SHA256)"" actual=""$(ZLIB_SHA256_ACTUAL)"")
        endif
        tar xvzf zlib-$(ZLIB_VER).tar.gz
        cd zlib-$(ZLIB_VER) && CFLAGS='-fPIC' ./configure --static && make
        cp zlib-$(ZLIB_VER)/libz.a .

","A makefile consists of two different programming languages in one file.  Most of the file uses makefile syntax, that make understands and parses.  But the recipes of the rules use shell syntax, which make doesn't try to interpret: it just passes the contents of the recipe to the shell to interpret.
The recipe is the part of the makefile indented with a TAB character, after a target definition.  So in your example above, the target definition is libz.a: and all the lines after that which are indented with a TAB, are recipe lines.  They are passed to the shell, not run by make.
The recipe is a single block of lines; you cannot intersperse recipe lines with makefile lines.  Once make sees the first non-recipe line, that's the end of the recipe and make starts treating the remaining lines as if they were makefile lines.
Let's look at your rule:
libz.a:
        -rm -rf zlib-$(ZLIB_VER)
        curl -O -L http://zlib.net/zlib-$(ZLIB_VER).tar.gz

OK, this is fine: you've created a target libz.a and provided two command lines, which are valid shell commands, in your recipe.
        ZLIB_SHA256_ACTUAL = $(SHA256_CMD) zlib-$(ZLIB_VER).tar.gz

OK, now you have problems; this is a make variable assignment, not a shell command, but since you've indented it with a TAB make will not interpret it: make will just pass it to the shell.  That's not a valid shell command (in the shell, variable assignments cannot have spaces around the equal sign); this is trying to run a program named literally ZLIB_SHA256_ACTUAL and pass it the arguments = and the expansion of the SHA256_CMD variable.  Even if this was recognized as a make assignment it wouldn't do what you want since it would just set the value of the variable to the string openssl sha256 -r zlib-1.2.11.tar.gz: you want to run that command and set the variable to the output.
Then the next lines:
        ifneq ($(ZLIB_SHA256), $(ZLIB_SHA256_ACTUAL))
                $(error zlib-$(ZLIB_VER).tar.gz checksum mismatch, expected=""$(ZLIB_SHA256)"" actual=""$(ZLIB_SHA256_ACTUAL)"")
        endif

Again, this is wrong because these are make commands but you've put them into a recipe which means they'll be passed to the shell, but the shell doesn't know anything about them.
However, they never get the chance to be passed to the shell because the one thing make does with a recipe before it sends it off to the shell is expand all make variables and functions.  So, when make expands this it runs the error function and that immediately fails and make never has a chance to try to run the recipe.
This is the tricky part of make.  Maybe I've just confused you with all of the above stuff.
The short, simple answer is: you have to use shell commands to perform operations in a recipe.  You cannot use make commands (like ifeq etc.), and if you want to set variables in a recipe they have to be shell variables, not make variables.
So, you want something like this, which uses shell syntax not make syntax for the variable assignment and test.
EDIT Note your SHA generation command doesn't print just the SHA it also prints the name of the file, so you can't compare them as strings: they'll never be the same.  You need to do something fancier; there are many ways to go about it.  Here I decided to use case to do the comparison:
libz.a:
        -rm -rf zlib-$(ZLIB_VER)
        curl -O -L http://zlib.net/zlib-$(ZLIB_VER).tar.gz
        ZLIB_SHA256_ACTUAL=`$(SHA256_CMD) zlib-$(ZLIB_VER).tar.gz`; \
        case ""$$ZLIB_SHA256_ACTUAL "" in \
            ($(ZLIB_SHA256)\ *) : ok ;; \
            (*) echo zlib-$(ZLIB_VER).tar.gz checksum mismatch, expected=\""$(ZLIB_SHA256)\"" actual=\""$$ZLIB_SHA256_ACTUAL\""; \
            exit 1 ;; \
        esac
        tar xvzf zlib-$(ZLIB_VER).tar.gz
        cd zlib-$(ZLIB_VER) && CFLAGS='-fPIC' ./configure --static && $(MAKE)
        cp zlib-$(ZLIB_VER)/libz.a .

Note that each logical line in the recipe is passed to a new instance of the shell, so if you want to set a shell variable and test its value you have to combine physical lines into one logical line with the backslash/newline syntax.
Also, when running a sub-make in a recipe you should always use the variable $(MAKE) and never use just make.
","608","<makefile><sha256>","0","3","1","2017-02-10 13:23:31","42125834","0","","","","","2017-02-08 20:33:51",""
"40812263","Get private key file with sha256 in C #","Currently I perform this operation through openssl, and I have had no problem with the generated file
openssl dgst -sha256 -sign privateKey.key -out file.txt.signature file.txt

Now, we want to automate the generation of the file using C #, but I have not been able to get the same result.
public class Program
{

    static void Main(string[] args)
    {
        Console.WriteLine(CreateToken(""key..."", ""text""));
        Console.ReadLine();
    }

    public static string CreateToken(string key, string message)
    {
        System.Text.ASCIIEncoding encoding = new System.Text.ASCIIEncoding();
        byte[] keyByte = encoding.GetBytes(key);

        HMACSHA256 hmacsha256 = new HMACSHA256(keyByte);

        byte[] messageBytes = encoding.GetBytes(message);
        byte[] hashmessage = hmacsha256.ComputeHash(messageBytes);

        return System.Text.Encoding.UTF8.GetString(hashmessage);
    }

}

I'm new to working with this, what would be the right way?
Am I not retrieving the information properly ?, Should I get the content directly from the file?
Thank you very much.
","Signature generation is not the same thing as HMAC message authentication and it uses a different key. As HMAC can use a key of any size, it will probably take the private key, but that's not how it is supposed to work. RSA is an asymmetric algorithm that uses private and public keys, MAC uses symmetric, secret keys. The dgst -sign instead uses RSA PKCS#1 v1.5 padding to sign the file.
From the OpenSSL Wiki on dgst:

When signing a file, dgst will automatically determine the algorithm (RSA, ECC, etc) to use for signing based on the private key's ASN.1 info. When verifying signatures, it only handles the RSA, DSA, or ECDSA signature itself, not the related data to identify the signer and algorithm used in formats such as x.509, CMS, and S/MIME. 

HMAC is not the same thing as SHA-256 either. RSA signature generation uses a hash, not a HMAC. You should use the SHA256 class to create a hash. HMAC is a message authentication code build using the SHA-256 hash. However, the SHA class is not needed as signature generation usually includes the hash generation (you sign a message, not a hash value).
So to create a signature, take a look at the RSAPKCS1SignatureFormatter class, it includes an example at the bottom. Try again using this example.
Make sure your message only contains ASCII (both in the text file as in your string) or your result may fail as well.
","608","<c#><openssl><digital-signature><sha256>","0","0","1","2016-12-01 21:46:22","","1","","238704","","2016-11-25 21:06:03","2016-11-25 21:04:45",""
"24342838","How to create digital signature(RSA) of file's checksum?","Welcome!
My job is to implement digital signature. I've read everything about creating public and private key but I'm stuck with this silly thing. 
How do I encrypt this checksum(SHA256) using RSA algorithm? I mean part: c(m) = m ^ e mod n. Should I convert this checksum(which is HEX?) to int, so that then I can compute ^e mod n?
","You don't encrypt the checksum but sign it. If you use C#, take a look at RSACryptoServiceProvider class, in particular in MSDN's Cryptographic Signatures section which contains detailed description of the process. 
However it seems that you are reinventing the wheel and going too low-level. Maybe higher-level libraries like BouncyCastle or free CryptoBlackbox package of our SecureBlackbox will be easier to use.
","606","<c#><rsa><digital-signature><sha256>","0","1","1","2015-06-09 17:43:26","","3","","1816580","","2015-06-09 17:43:26","2014-06-21 15:00:20",""
"30472316","A VB.NET equivalent of a PHP hash function","I am having trouble converting this PHP code to VB.
$hashpw = hash('sha256', $salt.$password.$salt)

I have this VB code
Public Function HashPassword(ByVal Password As String, ByVal Salt As String) As String
    Dim pwd As String = Salt & Password & Salt
    Dim hasher As New Security.Cryptography.SHA256Managed()
    Dim pwdb As Byte() = System.Text.Encoding.UTF8.GetBytes(pwd)
    Dim pwdh As Byte() = hasher.ComputeHash(pwdb)
    Return Convert.ToBase64String(pwdh)
End Function

but it seems that the password I retrieve from the database is not equivalent to the returned value from the VB code above. The password was encrypted using the PHP code above.
Can anyone help me with this?
Very much appreciated. Thank you.
","The php hash function returns the data encoded in hexadecimal not base64. 
Return BitConverter.ToString(pwdh).Replace(""-"", """")

","605","<php><vb.net><hash><sha256>","1","1","1","2015-05-27 03:32:06","30472560","0","","","","","2015-05-27 02:51:14",""
"29612613","Unable to produce Proper Encryption Key in Ruby using HMAC","I am attempting to follow the documentation per Access Control and interrogating code like azure-documentdb-node SDK and I am unable to do so.
I get the following error: 401 Unauthorized: {""code"":""Unauthorized"",""message"":""The input authorization token can't serve the request. Please check that the expected payload is built as per the protocol, and check the key being used. Server used the following payload to sign: 'post\ndbs\n\n13 april 2015 18:21:05 gmt\n\n'\r\nActivityId: ...
My ruby code looks like the following:
require 'openssl'
require 'rest-client'
require 'base64'
require 'uri'
require 'json'
require 'time'

def get_databases url, master_key
  time = Time.now.httpdate
  authorization = get_master_auth_token ""get"", """", ""dbs"", time, master_key
  header = { ""authorization"" => authorization, ""x-ms-date"" => time, ""x-ms-version"" => ""2015-04-08"" }
  RestClient.get url, header
end

def get_master_auth_token verb, resource_id, resource_type, date, master_key
  digest = OpenSSL::Digest::SHA256.new
  key = Base64.decode64 master_key
  text = verb + ""\n"" +
    resource_type + ""\n"" +
    resource_id + ""\n"" +
    date + ""\n"" +
    ""\n""
  hmac = OpenSSL::HMAC.digest digest, key, text.downcase
  auth_string = ""type="" + ""master"" + ""&ver="" + ""1.0"" + ""&sig="" + hmac
  URI.escape auth_string
end

Thanks!
EDIT: After Ryan's advice and example I've simplified the code down to the following snippit that should be a match for the node code he has posted BUT it still fails in ruby:
def hard_coded_get_databases master_key, url
  verb = ""get""
  resource_type = ""dbs""
  resource_id = """"
  date = Time.now.httpdate
  serv_version = '2014-08-21'
  master_token = ""master""
  token_version = ""1.0""
  key = Base64.decode64 master_key
  text = verb + ""\n"" + resource_type + ""\n"" + resource_id + ""\n"" + date + ""\n\n""
  body = text.downcase.force_encoding ""utf-8""
  signature = OpenSSL::HMAC.digest OpenSSL::Digest::SHA256.new, key, body
  auth_token = URI.escape(""type=""+master_token + ""&ver=""+token_version + ""&sig=""+signature)

  header = { ""accept"" => ""application/json"", ""x-ms-version"" => serv_version, ""x-ms-date"" => date, ""authorization"" => auth_token }
  RestClient.get url, header
end

EDIT2: I believe I've isolated the problem to how I am doing the master key authentication.
Taking Ryan's example we can trim his node code down the following:
var crypto = require(""crypto"")

function encode_message(masterKey, message) {
    var key = new Buffer(masterKey, ""base64""); // encode/decode? base64 the masterKey
    var body = new Buffer(message.toLowerCase(), ""utf8""); // convert message to ""utf8"" and lower case
    return crypto.createHmac(""sha256"", key).update(body).digest(""base64""); // encrypt the message using key
 }

If I call this node code I can produce the following key:
encode_message(""blah"", 'get\ncolls\n\nTue, 14 Apr 2015 13:34:22 GMT\n\n')
'IYlLuyZtVLx5ANkGMAxviDHgC/DJJXSj1gUGLvN0oM8='

If I produce the equivalent ruby code to create the authentication my ruby code looks like the following:
require 'base64'
require 'openssl'

def encode_message master_key, message
  key = Base64.urlsafe_decode64 master_key
  hmac = OpenSSL::HMAC.digest 'sha256', key, message
  Base64.urlsafe_encode64 hmac
end

If I call this code I get the following:
2.2.1 :021 > encode_message(""blah"", ""get\ncolls\n\nTue, 14 Apr 2015 13:34:22 GMT\n\n"")
 => ""N6BL3n4eSvYA8dIL1KzlTIvR3TcYpdqW2UNPtKWrjP8=""

Clearly the 2 encoded auth tokens are not the same. (Ryan again thanks so much for the help to get this far).
","i'll start off by apologizing for my limited Ruby knowledge but let me try assist here;
in your get_master_auth_token function it appears you are decoding the key before using it. is this correct? if so, why?
here is a node.js sample that uses the master key, builds up the auth header value and does a simple http call to list the collections in a database
var crypto = require(""crypto"");
var https = require(""https"");

https.globalAgent.options.secureProtocol = ""TLSv1_client_method"";

var verb = 'get'; 
var resourceType = 'dbs'; //the resource you are trying to get. dbs, colls, docs etc. 
var resourceId = ''; //the parent resource id. note: not the id, but the _rid. but for you, because you are trying to lookup list of databases there is no parent
var masterKey = '...'; //your masterkey 
var date = new Date().toUTCString();

var auth = getAuthorizationTokenUsingMasterKey(verb, resourceId, resourceType, date, masterKey);

var options = {
hostname: '...', //your hostname (without https://)
port: 443,
path: '/dbs/',
method: 'GET',
    headers: {
        accept: 'application/json',
        'x-ms-version': '2014-08-21',
        'x-ms-date': date,
        authorization: auth,
    }
};

for (var i = 0; i < 1000; i++) {
    var req = https.request(options, function (res) {
        process.stdout.write(new Date().toUTCString() + "" - statusCode: "" + res.statusCode + ""\n"");
        res.on('data', function (d) {
        }).on('error', function (e) {
        })
    });

    //console.log(req);

    req.end();
}

function getAuthorizationTokenUsingMasterKey(verb, resourceId, resourceType, date, masterKey) {
    var key = new Buffer(masterKey, ""base64"");

    var text = (verb || """") + ""\n"" + 
        (resourceType || """") + ""\n"" + 
        (resourceId || """") + ""\n"" + 
        (date || """") + ""\n"" + 
        ("""") + ""\n"";

    var body = new Buffer(text.toLowerCase(), ""utf8"");
    var signature = crypto.createHmac(""sha256"", key).update(body).digest(""base64"");

    var MasterToken = ""master"";    
    var TokenVersion = ""1.0"";

    return encodeURIComponent(""type="" + MasterToken + ""&ver="" + TokenVersion + ""&sig="" + signature);
}

In your example, the resourceId passed to the getAuthorizationTokenUsingMasterKey method should be """" and the resourceType should be ""dbs"" as you have it. 
I did notice that in some cases you have to URI Encode the value, but I think you are doing that already as the very last line of the func. 
the only difference I can spot in your code vs my code is that you appear to be decoding the master_key which I don't do. 
what I would recommend you do is run this node sample and compare the values of the strings we have in body & signature to the your values. they need to match. 
","597","<ruby><azure><hmac><sha256><azure-cosmosdb>","1","0","2","2015-04-14 16:07:11","29632213","1","","553893","","2015-04-14 15:53:02","2015-04-13 18:37:19",""
"29612613","Unable to produce Proper Encryption Key in Ruby using HMAC","I am attempting to follow the documentation per Access Control and interrogating code like azure-documentdb-node SDK and I am unable to do so.
I get the following error: 401 Unauthorized: {""code"":""Unauthorized"",""message"":""The input authorization token can't serve the request. Please check that the expected payload is built as per the protocol, and check the key being used. Server used the following payload to sign: 'post\ndbs\n\n13 april 2015 18:21:05 gmt\n\n'\r\nActivityId: ...
My ruby code looks like the following:
require 'openssl'
require 'rest-client'
require 'base64'
require 'uri'
require 'json'
require 'time'

def get_databases url, master_key
  time = Time.now.httpdate
  authorization = get_master_auth_token ""get"", """", ""dbs"", time, master_key
  header = { ""authorization"" => authorization, ""x-ms-date"" => time, ""x-ms-version"" => ""2015-04-08"" }
  RestClient.get url, header
end

def get_master_auth_token verb, resource_id, resource_type, date, master_key
  digest = OpenSSL::Digest::SHA256.new
  key = Base64.decode64 master_key
  text = verb + ""\n"" +
    resource_type + ""\n"" +
    resource_id + ""\n"" +
    date + ""\n"" +
    ""\n""
  hmac = OpenSSL::HMAC.digest digest, key, text.downcase
  auth_string = ""type="" + ""master"" + ""&ver="" + ""1.0"" + ""&sig="" + hmac
  URI.escape auth_string
end

Thanks!
EDIT: After Ryan's advice and example I've simplified the code down to the following snippit that should be a match for the node code he has posted BUT it still fails in ruby:
def hard_coded_get_databases master_key, url
  verb = ""get""
  resource_type = ""dbs""
  resource_id = """"
  date = Time.now.httpdate
  serv_version = '2014-08-21'
  master_token = ""master""
  token_version = ""1.0""
  key = Base64.decode64 master_key
  text = verb + ""\n"" + resource_type + ""\n"" + resource_id + ""\n"" + date + ""\n\n""
  body = text.downcase.force_encoding ""utf-8""
  signature = OpenSSL::HMAC.digest OpenSSL::Digest::SHA256.new, key, body
  auth_token = URI.escape(""type=""+master_token + ""&ver=""+token_version + ""&sig=""+signature)

  header = { ""accept"" => ""application/json"", ""x-ms-version"" => serv_version, ""x-ms-date"" => date, ""authorization"" => auth_token }
  RestClient.get url, header
end

EDIT2: I believe I've isolated the problem to how I am doing the master key authentication.
Taking Ryan's example we can trim his node code down the following:
var crypto = require(""crypto"")

function encode_message(masterKey, message) {
    var key = new Buffer(masterKey, ""base64""); // encode/decode? base64 the masterKey
    var body = new Buffer(message.toLowerCase(), ""utf8""); // convert message to ""utf8"" and lower case
    return crypto.createHmac(""sha256"", key).update(body).digest(""base64""); // encrypt the message using key
 }

If I call this node code I can produce the following key:
encode_message(""blah"", 'get\ncolls\n\nTue, 14 Apr 2015 13:34:22 GMT\n\n')
'IYlLuyZtVLx5ANkGMAxviDHgC/DJJXSj1gUGLvN0oM8='

If I produce the equivalent ruby code to create the authentication my ruby code looks like the following:
require 'base64'
require 'openssl'

def encode_message master_key, message
  key = Base64.urlsafe_decode64 master_key
  hmac = OpenSSL::HMAC.digest 'sha256', key, message
  Base64.urlsafe_encode64 hmac
end

If I call this code I get the following:
2.2.1 :021 > encode_message(""blah"", ""get\ncolls\n\nTue, 14 Apr 2015 13:34:22 GMT\n\n"")
 => ""N6BL3n4eSvYA8dIL1KzlTIvR3TcYpdqW2UNPtKWrjP8=""

Clearly the 2 encoded auth tokens are not the same. (Ryan again thanks so much for the help to get this far).
","I have found the answer.  Thanks to Magnus Stahre ... he is the man for helping me figure it out.
It was the encoding as I thought and the trick is this:
def encode_message master_key, message
  key = Base64.urlsafe_decode64 master_key
  hmac = OpenSSL::HMAC.digest 'sha256', key, message.downcase
  Base64.encode64(hmac).strip
end

I was downcasing in my code too early AND my Base64.encode64 was failing to strip away a newline character that ruby was adding on the end.
","597","<ruby><azure><hmac><sha256><azure-cosmosdb>","1","1","2","2015-04-14 16:07:11","29632213","1","","553893","","2015-04-14 15:53:02","2015-04-13 18:37:19",""
"37342435","Password Hashing - Why salt 60,000 times","I'm working for a Fortune 100 company and I'm thrown into being tasked with security moving from SHA1 to SHA-2 .   This is not my area of expertise, but as I study cryptography I am questioning the outdated information etc...

SHA-2 is obviously needed over SHA-1 but when the security team KNOWS that the hashing of password + salt is using SHA,  with GPU being so ridiculously fast at cracking billions of hashes - I do not get why for passwords i'm not being told to use bcrypt or another equivalent that is slow   ,  WHY?
I'm shown a powerpoint slide in which i'm told to create my salt 60,000 times.  I searched all over the internet and I'm not seeing any such advise or examples.  Why?

I'm using C# 
string SaltAndPwd = string.Concat(plainTextPassword, salt);
SHA256 sha2 = SHA256Managed.Create();
byte[] buff = sha2.ComputeHash(Encoding.Unicode.GetBytes(SaltAndPwd));

I suppose that I'm not told to create a salt over and over, but to create the hash over and over.
Would this logic be appropriate?  
string plainTextPassword = ""aF7Cvs+QzZKM=4!"";  
string salt = ""o9kc5FvhWQU=="";
SHA256 sha2 = SHA256Managed.Create();

for(var i = 0; i <= 60000; i++)
{
   byte[] buff = sha2.ComputeHash(Encoding.Unicode.GetBytes(SaltAndPwd));
}

How do I make this hashing to work properly?
Update  found the powerpoint slide

Update with Code - Problem with implementation on verification of the hash
Problem is when I use the check on the code I'm trying 
if (resultHash.Equals(hassPassword))   and it does not match...
    public string BuildVerify()
    {

        string password = """";
        string salt = """";
        byte[] result;


        using (var sha256 = SHA256.Create())
        {
            password = ""hovercraft"";

            // step 1: you can use RNGCryptoServiceProvider for something worth using
            var passwordHashing = new PasswordHashing();
            salt = passwordHashing.CreateRandomSalt();

            // step 2
            string hash =
               Convert.ToBase64String(sha256.ComputeHash(Encoding.UTF8.GetBytes(salt + password)));

            // step 3
            result = sha256.ComputeHash(Encoding.UTF8.GetBytes(salt + hash));

            // step 4
            for (int i = 0; i < 60000; i++)
            {
                result =
                 sha256.ComputeHash(Encoding.UTF8.GetBytes(salt + Convert.ToBase64String(result)));
            }
        }


        // TESTING  VERIFY this works ..

        string SaltAndPwd = string.Concat(password, salt);
        SHA256 sha2 = SHA256Managed.Create();
        byte[] buff = sha2.ComputeHash(Encoding.Unicode.GetBytes(SaltAndPwd));
        string resultHash = Convert.ToBase64String(buff);
        string hassPassword = Convert.ToBase64String(result);

        if (resultHash.Equals(hassPassword))
        {
            // perfect 
        }




        return """";

    }


public class PasswordHashing
{

    public string CreateRandomSalt()
    {
        string password = """";
        password = HashPassword.CreateSalt(8) + ""="";
        password = password.Replace(""/"", ""c"");
        return password;
    }

}

/// 
    public static string CreateSalt(int size)
    {
        RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();

        byte[] buff = new byte[size];
        rng.GetBytes(buff);
        return Convert.ToBase64String(buff);
    }

NEW Question 
  figured that I would go ahead and create a new question , thanks everyone in advance.
Verification of Hashing password is not working
","
I do not get why for passwords i'm not being told to use bcrypt or another equivalent that is slow

I'm guessing this is why they're asking you to hash 60000 time. To add a work factor and slow down brute force attacks.

How do I make this hashing to work properly?

Something like this:
using (var sha256 = SHA256.Create())
{
    string password = ""hovercraft"";

    // step 1: you can use RNGCryptoServiceProvider for something worth using
    string salt = GenerateSalt();

    // step 2
    string hash = 
       Convert.ToBase64String(sha256.ComputeHash(Encoding.UTF8.GetBytes(salt + password)));

    // step 3
    byte[] result = sha256.ComputeHash(Encoding.UTF8.GetBytes(salt + hash));

    // step 4
    for (int i = 0; i < 60000; i++)
    {
        result = 
         sha256.ComputeHash(Encoding.UTF8.GetBytes(salt + Convert.ToBase64String(result)));
    }
}

","597","<c#><hash><sha256><sha>","5","9","2","2016-05-20 19:11:12","37343128","16","1","-1","","2017-05-23 12:07:59","2016-05-20 09:02:29",""
"37342435","Password Hashing - Why salt 60,000 times","I'm working for a Fortune 100 company and I'm thrown into being tasked with security moving from SHA1 to SHA-2 .   This is not my area of expertise, but as I study cryptography I am questioning the outdated information etc...

SHA-2 is obviously needed over SHA-1 but when the security team KNOWS that the hashing of password + salt is using SHA,  with GPU being so ridiculously fast at cracking billions of hashes - I do not get why for passwords i'm not being told to use bcrypt or another equivalent that is slow   ,  WHY?
I'm shown a powerpoint slide in which i'm told to create my salt 60,000 times.  I searched all over the internet and I'm not seeing any such advise or examples.  Why?

I'm using C# 
string SaltAndPwd = string.Concat(plainTextPassword, salt);
SHA256 sha2 = SHA256Managed.Create();
byte[] buff = sha2.ComputeHash(Encoding.Unicode.GetBytes(SaltAndPwd));

I suppose that I'm not told to create a salt over and over, but to create the hash over and over.
Would this logic be appropriate?  
string plainTextPassword = ""aF7Cvs+QzZKM=4!"";  
string salt = ""o9kc5FvhWQU=="";
SHA256 sha2 = SHA256Managed.Create();

for(var i = 0; i <= 60000; i++)
{
   byte[] buff = sha2.ComputeHash(Encoding.Unicode.GetBytes(SaltAndPwd));
}

How do I make this hashing to work properly?
Update  found the powerpoint slide

Update with Code - Problem with implementation on verification of the hash
Problem is when I use the check on the code I'm trying 
if (resultHash.Equals(hassPassword))   and it does not match...
    public string BuildVerify()
    {

        string password = """";
        string salt = """";
        byte[] result;


        using (var sha256 = SHA256.Create())
        {
            password = ""hovercraft"";

            // step 1: you can use RNGCryptoServiceProvider for something worth using
            var passwordHashing = new PasswordHashing();
            salt = passwordHashing.CreateRandomSalt();

            // step 2
            string hash =
               Convert.ToBase64String(sha256.ComputeHash(Encoding.UTF8.GetBytes(salt + password)));

            // step 3
            result = sha256.ComputeHash(Encoding.UTF8.GetBytes(salt + hash));

            // step 4
            for (int i = 0; i < 60000; i++)
            {
                result =
                 sha256.ComputeHash(Encoding.UTF8.GetBytes(salt + Convert.ToBase64String(result)));
            }
        }


        // TESTING  VERIFY this works ..

        string SaltAndPwd = string.Concat(password, salt);
        SHA256 sha2 = SHA256Managed.Create();
        byte[] buff = sha2.ComputeHash(Encoding.Unicode.GetBytes(SaltAndPwd));
        string resultHash = Convert.ToBase64String(buff);
        string hassPassword = Convert.ToBase64String(result);

        if (resultHash.Equals(hassPassword))
        {
            // perfect 
        }




        return """";

    }


public class PasswordHashing
{

    public string CreateRandomSalt()
    {
        string password = """";
        password = HashPassword.CreateSalt(8) + ""="";
        password = password.Replace(""/"", ""c"");
        return password;
    }

}

/// 
    public static string CreateSalt(int size)
    {
        RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();

        byte[] buff = new byte[size];
        rng.GetBytes(buff);
        return Convert.ToBase64String(buff);
    }

NEW Question 
  figured that I would go ahead and create a new question , thanks everyone in advance.
Verification of Hashing password is not working
","To me this looks like an attempt to reimplement a PBKDF2 algorithm, to get a cost factor.
Usually it is not recommended to make experiments with security functions, instead one should use a proven well tested algorithm. Your concern about the algorithm above is justified, try to convince your team to switch to BCrypt.Net or to PBKDF2.
When you go for PBKDF2, then you can either use the built in dotnet class Rfc2898DeriveBytes to calculate a PBKDF2 with HMACSHA1 (which is the standard even today), or you can use an implementation which supports other hash functions like PBKDF2 with SHA-256.
","597","<c#><hash><sha256><sha>","5","4","2","2016-05-20 19:11:12","37343128","16","1","-1","","2017-05-23 12:07:59","2016-05-20 09:02:29",""
"29136561","How to compute SHA256 hash for bitcoin header","I am trying to understand the proof of work algorithm. I computed a block header (which includes the nonce):
""02000000aaf8ab82362344f49083ee4edef795362cf135293564c4070000000000000000c009bb6222e9bc4cdb8f26b2e8a2f8d163509691a4038fa692abf9a474c9b21476800755c02e17181fe6c1c3""

I have to apply SHA256 to this twice. The correct answer is supposed to be:
""00000000000000001354e21fea9c1ec9ac337c8a6c0bda736ec1096663383429""

I tried pack, unpack, hex, etc., but I can't get this output. What is the correct Ruby code to convert the input to the output using SHA256?
","header_hex = ""02000000aaf8ab82362344f49083ee4edef795362cf135293564c4070000000000000000c009bb6222e9bc4cdb8f26b2e8a2f8d163509691a4038fa692abf9a474c9b21476800755c02e17181fe6c1c3""

# Decode header hex into binary string
header = [header_hex].pack(""H*"")

# Apply SHA256 twice
require ""digest""
d1 = Digest::SHA256.digest(header)
d2 = Digest::SHA256.digest(d1)

# Convert to hex
result = d2.unpack(""H*"").join
# => ""293438636609c16e73da0b6c8a7c33acc91e9cea1fe254130000000000000000""

Oops, for some reason the result is somewhat ""backwards"". Perhaps it is a byte-ordering issue? Let's try that again with the binary data reversed:
result = d2.reverse.unpack(""H*"").join
# => ""00000000000000001354e21fea9c1ec9ac337c8a6c0bda736ec1096663383429""

Bingo!
Edit: Just to clarify, this was a trial-and-error solution. I don't have any special insight into the proof of work algorithm!
","594","<ruby><bitcoin><sha256>","0","4","1","2015-03-19 04:14:33","29137107","0","","314166","","2015-03-19 03:16:24","2015-03-19 03:06:58",""
"50796527","PBKDF2 using SHA 256 in .NET","I need to update some code that is using the PBKDF2 implementation in .Net, Rfc2898DeriveBytes to hash user credentials. 
It is my understanding that this function uses SHA-1 under the hood. I need to update the underlying hashing algorithm of the systems password hashing to use SHA-256 (This is a client IT-SEC requirement). 
Having done some reading it seems it is best practice to continue to to use a Key derivation function, however PBKDF2 doesn't allow you to dictate the algorithm is should use, which is obviously a problem for me.
Our system is using .NET 4.5.1 and currently is not an option to upgrade that and I am reasonably confident it is not an option to reference any new .NET core .dlls that I've heard contain a new implementation of PBKDF2 that allows you to specify your algorithm.
I want to avoid home made implementations at all cost,s as that's the 1st rule of Crypto-Club right?
Any guidance on what is best practice would be appreciated. 
Thanks
","You can specify an algorithm now, msdn page
Note: Available since 4.7.2
The names are available in System.Security.Cryptography.HashAlgorithmName
","593","<c#><.net><hash><sha256><pbkdf2>","1","1","3","2018-06-11 18:45:31","","6","","","","","2018-06-11 11:18:15",""
"50796527","PBKDF2 using SHA 256 in .NET","I need to update some code that is using the PBKDF2 implementation in .Net, Rfc2898DeriveBytes to hash user credentials. 
It is my understanding that this function uses SHA-1 under the hood. I need to update the underlying hashing algorithm of the systems password hashing to use SHA-256 (This is a client IT-SEC requirement). 
Having done some reading it seems it is best practice to continue to to use a Key derivation function, however PBKDF2 doesn't allow you to dictate the algorithm is should use, which is obviously a problem for me.
Our system is using .NET 4.5.1 and currently is not an option to upgrade that and I am reasonably confident it is not an option to reference any new .NET core .dlls that I've heard contain a new implementation of PBKDF2 that allows you to specify your algorithm.
I want to avoid home made implementations at all cost,s as that's the 1st rule of Crypto-Club right?
Any guidance on what is best practice would be appreciated. 
Thanks
","I'll tell you what I would do: I would take the source of the newest (not exactly the newest because it uses Span<>... Just a little older :-) ) of Rfc2898DeriveBytes from the corefx github
You'll need the full code of:

https://github.com/dotnet/corefx/blob/29cb063b95661470340b6ba7e1381495c05bfff2/src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/Rfc2898DeriveBytes.cs
https://github.com/dotnet/corefx/blob/45b724f6b6391910edea8a70f3f22a4a7996696d/src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithmName.cs
https://github.com/dotnet/corefx/blob/bffef76f6af208e2042a2f27bc081ee908bb390b/src/System.Security.Cryptography.Encoding/src/Internal/Cryptography/Helpers.cs

plus two methods (GenerateRandom and WriteInt) from

https://github.com/dotnet/corefx/blob/827f47f48df00923b802427486b062d62dd243b5/src/System.Security.Cryptography.Algorithms/src/Internal/Cryptography/Helpers.cs

Then you'll have some calls to SR.*something* that you'll have to replace to some messages like ""some error"", plus a SR.Format that you have to replace with string.Format.
Then you'll have (nearly) the newest version of Rfc2898DeriveBytes that has a constructor that accepts as a parameter HashAlgorithmName.SHA256.
This should be the end result: https://ideone.com/lb2Qya
I had the bad idea of putting the source code in the namespace My.System... bad bad idea... I had to prefix global:: to all the namespaces :-(
","593","<c#><.net><hash><sha256><pbkdf2>","1","0","3","2018-06-11 18:45:31","","6","","","","","2018-06-11 11:18:15",""
"50796527","PBKDF2 using SHA 256 in .NET","I need to update some code that is using the PBKDF2 implementation in .Net, Rfc2898DeriveBytes to hash user credentials. 
It is my understanding that this function uses SHA-1 under the hood. I need to update the underlying hashing algorithm of the systems password hashing to use SHA-256 (This is a client IT-SEC requirement). 
Having done some reading it seems it is best practice to continue to to use a Key derivation function, however PBKDF2 doesn't allow you to dictate the algorithm is should use, which is obviously a problem for me.
Our system is using .NET 4.5.1 and currently is not an option to upgrade that and I am reasonably confident it is not an option to reference any new .NET core .dlls that I've heard contain a new implementation of PBKDF2 that allows you to specify your algorithm.
I want to avoid home made implementations at all cost,s as that's the 1st rule of Crypto-Club right?
Any guidance on what is best practice would be appreciated. 
Thanks
","You can P/Invoke to BCryptDeriveKeyPBKDF2, assuming you're on Win7+.
private static void PBKDF2(
    string password,
    byte[] salt,
    int iterationCount,
    string hashName,
    byte[] output)
{
    int status = SafeNativeMethods.BCryptOpenAlgorithmProvider(
        out SafeNativeMethods.SafeBCryptAlgorithmHandle hPrf,
        hashName,
        null,
        SafeNativeMethods.BCRYPT_ALG_HANDLE_HMAC_FLAG);

    using (hPrf)
    {
        if (status != 0)
        {
            throw new CryptographicException(status);
        }

        byte[] passBytes = Encoding.UTF8.GetBytes(password);

        status = SafeNativeMethods.BCryptDeriveKeyPBKDF2(
            hPrf,
            passBytes,
            passBytes.Length,
            salt,
            salt.Length,
            iterationCount,
            output,
            output.Length,
            0);

        if (status != 0)
        {
            throw new CryptographicException(status);
        }
    }
}

[SuppressUnmanagedCodeSecurity]
private static class SafeNativeMethods
{
    private const string BCrypt = ""bcrypt.dll"";
    internal const int BCRYPT_ALG_HANDLE_HMAC_FLAG = 0x00000008;

    [DllImport(BCrypt, CharSet = CharSet.Unicode)]
    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
    internal static extern int BCryptDeriveKeyPBKDF2(
        SafeBCryptAlgorithmHandle hPrf,
        byte[] pbPassword,
        int cbPassword,
        byte[] pbSalt,
        int cbSalt,
        long cIterations,
        byte[] derivedKey,
        int cbDerivedKey,
        int dwFlags);

    [DllImport(BCrypt)]
    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
    private static extern int BCryptCloseAlgorithmProvider(IntPtr hAlgorithm, int flags);

    [DllImport(BCrypt, CharSet = CharSet.Unicode)]
    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
    internal static extern int BCryptOpenAlgorithmProvider(
        out SafeBCryptAlgorithmHandle phAlgorithm,
        string pszAlgId,
        string pszImplementation,
        int dwFlags);

    internal sealed class SafeBCryptAlgorithmHandle : SafeHandleZeroOrMinusOneIsInvalid
    {
        public SafeBCryptAlgorithmHandle() : base(true)
        {
        }

        protected override bool ReleaseHandle()
        {
            return BCryptCloseAlgorithmProvider(handle, 0) == 0;
        }
    }
}

","593","<c#><.net><hash><sha256><pbkdf2>","1","1","3","2018-06-11 18:45:31","","6","","","","","2018-06-11 11:18:15",""
"43039407","How to calculate sha256 for large files in PHP","I would like to ask your assistance on how to calculate sha256 of large files in PHP. Currently, I used Amazon Glacier to store old files and use their API to upload the archive. Initially, I just used small files that cannot reach to MB-sized images. When I tried to upload more than 1MB, the API response said that the checksum I gave to them is different from what they had calculated.
Here is my code to upload the file:
//get the sha256 using the file path
$image = //image path;
$sha256 = hash_file(""sha256"", $image);

$archive = $glacier->uploadArchive([
            'accountId' => '', 
            'body' => """",
            'checksum' => $sha256,
            'contentSHA256' => $sha256,
            'sourceFile' => $image,
            'vaultName' => 'my-vault'
        ]);

And the error:
AWS HTTP error: Client error: `POST https://glacier.us-west-2.amazonaws.com/vaults/70/archives` resulted in a `400 Bad Request` response:{""code"":""InvalidParameterValueException"",""message"":""Checksum mismatch: expected 9f1d4da29b6ec24abde48cb65cc32652ff589467 (truncated...)

I tried the function like below to check for the final hash but it seems it's not the right hash when I print it:
private function getFinalHash($file)
{
    $fp = fopen($file, ""r"");
    $ctx = hash_init('sha256');
    while (!feof($fp)) {
        $buffer = fgets($fp, 1024);
        hash_update($ctx, $buffer);
    }
    $hash = hash_final($ctx, true); print_r($hash);exit;
    fclose($fp);

}

The resulted hash is like this: ŸM¢›nÂJ½äŒ¶\Ã&RÿX”gíÖ'„IoA\C÷×
The Amazon Glacier API documentation shows how to compute the checksum as stated:

For each 1 MB chunk of payload data, compute the SHA-256 hash. The last chunk of data can be less than 1 MB. For example, if you are uploading a 3.2 MB archive, you compute the SHA-256 hash values for each of the first three 1 MB chunks of data, and then compute the SHA-256 hash of the remaining 0.2 MB data. These hash values form the leaf nodes of the tree.

I think there has something to with the correct way in providing the checksum but I don't know how I should do it with large files using PHP. I really need your help regarding this one.
","Glacier have theirs own way to count SHA256-TREE-HASH. 
Here you have working code on PHP.
This function returns SHA256 hash created from 1MB parts as they want. It works perfect for me, even for large or small files.
private function getFinalHash($path, $MB = 1048576)
{
    $fp = fopen($path, ""rb"");
    $hashes = [];
    while (($buffer = fread($fp, $MB))!=="""") {
        $hashes[] = hash(""sha256"", $buffer, true);
    }
    if(count($hashes)==1){
        return bin2hex($hashes[0]);
    }
    while(true){
        $hashes_new = [];
        foreach($hashes as $k => $hash){
            if ($k % 2 == 0) {
                if(isset($hashes[$k+1])){
                    $hashes_new[] = hash(""sha256"", $hash.$hashes[$k+1], true);
                }
            }
        }
        if(count($hashes)>2 && count($hashes) % 2 != 0){
            $hashes_new[] = $hashes[count($hashes)-1];
        }
        if(count($hashes_new)>1){
            $hashes = $hashes_new;
        }else{
            fclose($fp);
            return bin2hex($hashes_new[0]);
        }
    }
}

","592","<php><amazon-web-services><zend-framework2><sha256><amazon-glacier>","0","1","2","2019-06-11 16:03:41","","4","","6729008","","2017-03-27 09:59:22","2017-03-27 06:36:18",""
"43039407","How to calculate sha256 for large files in PHP","I would like to ask your assistance on how to calculate sha256 of large files in PHP. Currently, I used Amazon Glacier to store old files and use their API to upload the archive. Initially, I just used small files that cannot reach to MB-sized images. When I tried to upload more than 1MB, the API response said that the checksum I gave to them is different from what they had calculated.
Here is my code to upload the file:
//get the sha256 using the file path
$image = //image path;
$sha256 = hash_file(""sha256"", $image);

$archive = $glacier->uploadArchive([
            'accountId' => '', 
            'body' => """",
            'checksum' => $sha256,
            'contentSHA256' => $sha256,
            'sourceFile' => $image,
            'vaultName' => 'my-vault'
        ]);

And the error:
AWS HTTP error: Client error: `POST https://glacier.us-west-2.amazonaws.com/vaults/70/archives` resulted in a `400 Bad Request` response:{""code"":""InvalidParameterValueException"",""message"":""Checksum mismatch: expected 9f1d4da29b6ec24abde48cb65cc32652ff589467 (truncated...)

I tried the function like below to check for the final hash but it seems it's not the right hash when I print it:
private function getFinalHash($file)
{
    $fp = fopen($file, ""r"");
    $ctx = hash_init('sha256');
    while (!feof($fp)) {
        $buffer = fgets($fp, 1024);
        hash_update($ctx, $buffer);
    }
    $hash = hash_final($ctx, true); print_r($hash);exit;
    fclose($fp);

}

The resulted hash is like this: ŸM¢›nÂJ½äŒ¶\Ã&RÿX”gíÖ'„IoA\C÷×
The Amazon Glacier API documentation shows how to compute the checksum as stated:

For each 1 MB chunk of payload data, compute the SHA-256 hash. The last chunk of data can be less than 1 MB. For example, if you are uploading a 3.2 MB archive, you compute the SHA-256 hash values for each of the first three 1 MB chunks of data, and then compute the SHA-256 hash of the remaining 0.2 MB data. These hash values form the leaf nodes of the tree.

I think there has something to with the correct way in providing the checksum but I don't know how I should do it with large files using PHP. I really need your help regarding this one.
","THe trick is, that the sha256 hash is computed by the AWS SDK for PHP which your are using.
So you do not need to calculate the hash by yourself.
Here is an example:
$client = new GlacierClient(array(
    'key'    => '[aws access key]',
    'secret' => '[aws secret key]',
    'region' => '[aws region]', // (e.g., us-west-2) )); $result = 
$client->uploadArchive(array(
        'vaultName' => $vaultName,
        'body'      => fopen($filename, 'r'), )); 
$archiveId = $result->get('archiveId');

","592","<php><amazon-web-services><zend-framework2><sha256><amazon-glacier>","0","0","2","2019-06-11 16:03:41","","4","","6729008","","2017-03-27 09:59:22","2017-03-27 06:36:18",""
"56619355","ES256 JWT Signing in PHP for Apple AppStoreConenct API Auth","I'm trying to authenticate to Apple's AppStoreConnect API with an ES256 signed JWT (per their instructions at https://developer.apple.com/documentation/appstoreconnectapi) using PHP. 
Sending my request always results in a 401 NOT_AUTHORIZED error.
I've verified that the the contents of my header and claims are correct - I even found a Ruby script online for generating an ES256 signed JWT and using my Apple provided Issuer, Key ID, Private Key, it works swimmingly - Apple accepts the token. That tells me that my credentials are good and I'm doing something wrong in php.
Unless I've simply stared at this code for too long, the JWT format is correct, base64 encoded correctly, and the bearer token is set correctly in the header.
To rule out an issue with request sending I've tried both GuzzleHTTP and CLI cURL - both a 401.

Here's the relevant code. You'll see that the create method is encoding the header and claims, signing the ""payload"", and concatenating all 3.
public function create()
{
    $header = $this->encode(
        json_encode([
            'kid' => 'my_key_id',
            'alg' => 'ES256',
            'typ' => 'JWT',
        ])
    );

    $claims = $this->encode(
        json_encode([
            'iss' => 'my_issuer_uuid',
            'exp' => time() + (20 * 60),
            'aud' => 'appstoreconnect-v1',
        ])
    );

    $signature = $this->encode(
        $this->sign(""$header.$claims"")
    );

    return $header . '.' . $claims . '.' . $signature;
}

This code successfully returns an open ssl resource, $data has the expected contents.
public function sign($data)
{
    if (!$key = openssl_pkey_get_private('file://my_key_file.p8')) {
        throw new \Exception('Failed to read PEM');
    }

    if (!openssl_sign($data, $signature, $key, OPENSSL_ALGO_SHA256)) {
        throw new \Exception('Claims signing failed');
    }

    return $signature;
}

Base64 URL encoding... $data has the expected contents.
public function encode($data)
{
    return str_replace(['+', '/', '='], ['-', '_', ''], base64_encode($data));
}

At this point I'm stumped to what it is I'm doing wrong or missing. I'm hoping some extra eyes will find something! Using the token that my code dumps out: 
curl  https://api.appstoreconnect.apple.com/v1/users --Header ""Authorization: Bearer <token>”

...always returns a 401. I suspect there's something wrong in the signing portion of the code as it's the only part I haven't been able to verify (again, worked in Ruby), though looking at all the docs and examples for openssl_sign, I'm pretty sure it's right.
For reference, this is the Ruby script I mention https://shashikantjagtap.net/generating-jwt-tokens-for-app-store-connect-api/
","The signature returned by OpenSSL is an ASN.1 sequence that contains additional information. You have to remove the extra data before concatenation.
You can use that simple class I wrote (method fromDER) to convert the OpenSSL signature.
","588","<php><jwt><sha256><ecdsa><appstoreconnect>","1","0","2","2019-07-22 16:19:16","","0","1","","","","2019-06-16 13:37:45",""
"56619355","ES256 JWT Signing in PHP for Apple AppStoreConenct API Auth","I'm trying to authenticate to Apple's AppStoreConnect API with an ES256 signed JWT (per their instructions at https://developer.apple.com/documentation/appstoreconnectapi) using PHP. 
Sending my request always results in a 401 NOT_AUTHORIZED error.
I've verified that the the contents of my header and claims are correct - I even found a Ruby script online for generating an ES256 signed JWT and using my Apple provided Issuer, Key ID, Private Key, it works swimmingly - Apple accepts the token. That tells me that my credentials are good and I'm doing something wrong in php.
Unless I've simply stared at this code for too long, the JWT format is correct, base64 encoded correctly, and the bearer token is set correctly in the header.
To rule out an issue with request sending I've tried both GuzzleHTTP and CLI cURL - both a 401.

Here's the relevant code. You'll see that the create method is encoding the header and claims, signing the ""payload"", and concatenating all 3.
public function create()
{
    $header = $this->encode(
        json_encode([
            'kid' => 'my_key_id',
            'alg' => 'ES256',
            'typ' => 'JWT',
        ])
    );

    $claims = $this->encode(
        json_encode([
            'iss' => 'my_issuer_uuid',
            'exp' => time() + (20 * 60),
            'aud' => 'appstoreconnect-v1',
        ])
    );

    $signature = $this->encode(
        $this->sign(""$header.$claims"")
    );

    return $header . '.' . $claims . '.' . $signature;
}

This code successfully returns an open ssl resource, $data has the expected contents.
public function sign($data)
{
    if (!$key = openssl_pkey_get_private('file://my_key_file.p8')) {
        throw new \Exception('Failed to read PEM');
    }

    if (!openssl_sign($data, $signature, $key, OPENSSL_ALGO_SHA256)) {
        throw new \Exception('Claims signing failed');
    }

    return $signature;
}

Base64 URL encoding... $data has the expected contents.
public function encode($data)
{
    return str_replace(['+', '/', '='], ['-', '_', ''], base64_encode($data));
}

At this point I'm stumped to what it is I'm doing wrong or missing. I'm hoping some extra eyes will find something! Using the token that my code dumps out: 
curl  https://api.appstoreconnect.apple.com/v1/users --Header ""Authorization: Bearer <token>”

...always returns a 401. I suspect there's something wrong in the signing portion of the code as it's the only part I haven't been able to verify (again, worked in Ruby), though looking at all the docs and examples for openssl_sign, I'm pretty sure it's right.
For reference, this is the Ruby script I mention https://shashikantjagtap.net/generating-jwt-tokens-for-app-store-connect-api/
","After struggling alot, i finally got it working using https://github.com/lcobucci/jwt 
use Curl\Curl;
use Lcobucci\JWT\Builder;
use Lcobucci\JWT\Signer\Key;
use Lcobucci\JWT\Signer\Ecdsa\Sha256;

$signer = new Sha256();
$privateKey = new Key('file://AuthKey_XYZ.p8');
$time = time();

$Issuer_ID = ""FROM_APPLE_PAGE"";
$Key_ID = ""FROM_APPLE_PAGE"";

$token = (new Builder())->issuedBy($Issuer_ID)// Configures the issuer (iss claim)
->permittedFor(""appstoreconnect-v1"")// Configures the audience (aud claim)
->identifiedBy('XXYYZZ', true)// Configures the id (jti claim), replicating as a header item
->withHeader('kid', $Key_ID)
->withHeader('type', 'JWT')
    ->withHeader('alg', 'ES256')
    ->issuedAt($time)// Configures the time that the token was issue (iat claim)
    ->expiresAt($time + 1200)// Configures the expiration time of the token (exp claim)
    ->withClaim('uid', 1)// Configures a new claim, called ""uid""
    ->getToken($signer, $privateKey); // Retrieves the generated token


$token->getHeaders(); // Retrieves the token headers
$token->getClaims(); // Retrieves the token claims

","588","<php><jwt><sha256><ecdsa><appstoreconnect>","1","1","2","2019-07-22 16:19:16","","0","1","","","","2019-06-16 13:37:45",""
"51987434","How to generate checksum & convert to 64 bit in Javascript for very large files without overflowing RAM?","Question:   

How to generate a checksum correctly, which is unique, consistent independent of browsers? Also, I would like to convert a SHA256/MD5 checksum string to 64-bit.
How to properly read a file without huge RAM requirement to generate checksum? i.e. how do we deal with 1 GB file without compromising RAM

e.g. Is it possible to read a file without loading it into memory? (see the answer)
This project seems promising, but couldn't get it worked either.

My intention is to generate the checksum progressively/incrementally in chunks of X MBs. This may help to avoid using too much RAM at a time.
Following is the code, which is not working as expected:
let SIZE_CHECKSUM = 10 * Math.pow(1024, 2); // 10 MB; But can be 1 MB too
async function GetChecksum (file: File):
Promise<string>
{
  let hashAlgorithm: CryptoJS.lib.IHasher<Object> = CryptoJS.algo.SHA256.create();
  let totalChunks: number = Math.ceil(file.size / SIZE_CHECKSUM);
  for (let chunkCount = 0, start = 0, end = 0; chunkCount < totalChunks; ++chunkCount)
  {
    end = Math.min(start + SIZE_CHECKSUM, file.size);
    let resultChunk: string = await (new Response(file.slice(start, end)).text());
    hashAlgorithm.update(resultChunk);
    start = chunkCount * SIZE_CHECKSUM;
  }
  let long: bigInt.BigInteger = bigInt.fromArray(hashAlgorithm.finalize().words, 16, false);
  if(long.compareTo(bigInt.zero) < 0)
    long = long.add(bigInt.one.shiftLeft(64));
  return long.toString();
}

It shows different results in different browsers.
","There is a logical issue in the code at below line:
start = chunkCount * SIZE_CHECKSUM;  // <--- bug

The variable start is initialized to 0 and then again reset to 0 in the 1st iteration, which is not right.
Following is the way to get a 32 bytes SHA5 checksum with the same library mentioned in the question: ""emn178/js-sha256"".
That library doesn't provide a Typescript interface, but we can define trivially as following:
// Sha256.d.ts  (also name the corresponding JS file as ""Sha256.js"")
declare class Sha256 {
  update (data: ArrayBuffer): Sha256;
  hex (): string;
}

declare var sha256: any;
declare interface sha256 {
  create (): Sha256;
}

Then use it as following:
import ""./external/Sha256""

async function GetChecksum (file: File):
Promise<string>
{
  let algorithm = sha256.create(); 
  for(let chunkCount = 0, totalChunks = Math.ceil(file.size / SIZE_CHECKSUM); 
      chunkCount < totalChunks;
      ++chunkCount)
  {
    let start = chunkCount * SIZE_CHECKSUM, end = Math.min(start + SIZE_CHECKSUM, file.size); 
    algorithm.update(await (new Response(file.slice(start, end)).arrayBuffer()));
  }
  return algorithm.hex();
}

Above code generates same checksums in all my browsers for any chunk size.
","584","<javascript><algorithm><typescript><checksum><sha256>","7","2","1","2018-08-28 05:41:45","52038255","1","2","514235","","2018-08-27 05:21:28","2018-08-23 13:51:11",""
"43808961","Hashing passwords and signature with HMAC any security advantages?","I'm getting a bit confused about hashing passwords with a salt and the way of HMAC an password or using as a signature and so on. I've read a lot of articles about it but it seems that i don't got the point of using this or that.
I got this examples of using that ways (questions marked by a number):
Hashed passwords
Password from user is hashed with SHA-256 and a unique salt for each user stored in the database. Password and salt is just concatenated like this hash(key + password) and run multiple rounds of hashing.

That may be vulnerable for an length extension attack right? 
Would changing the order of values make any prevention of length
extension attacks? So changing hash(key + password) to hash(password + key)?

A better way of hashing the user password seems to be HMAC. In this case using hmac-sha256(password, salt). 

But is this really better and more secure to use HMAC here? 

Some people said it makes no sense to use a salt as a password for HMAC
    but the salt is not visible for the user because it is just stored
    in the database. For me it's nothing other than a password. 
API authentication/validation
For an API all users got a unique and random api_key and an api_secret.
The api_key is sent in all requests by an header to identify the user. That should be a kind of ""stateless authentication"".
The api_secret will be used in backend to generate a signature using hmac-sha256((api_key + nonce), api_secret). 
The nonce is a random value that is send in another header as plain text and as well as a hashed value to verify that the nonce itself won't be manipulated (well not really needed because it will change the whole signature)... so a kind of nonce-signature: 
rand = random();
hash = hmac-sha256(rand, api_secret);
nonce = rand + ""-"" + hash;


But is this really more secure than just make something like hash(api_key + nonce + api_secret) and leave the nonce without any nonce-signature?
Is there any security issue by providing multiple HMAC-hashes at the same time that are hashed with the same api_secret?
Any other toughts about that in point of security?

It's hard for me to understand what the more or less secure ways of creating a secure hash are. Some people said ""ok, this is secure... you should do this"" and then other people said ""oh you forgot this or that attack or vulnerable"". So i try to understand how and why in a simple and ""i-am-a-dummie-way"". 
","SHA-256 is not a great hashing method. Use bcrypt, PBKDF2, or scrypt.
Make your salts the same length and put them first
Peppering (HMAC-ing passwords) is useful if you think you have the chance a SQL injection vulnerability down the road, and a lower chance of an application server vulnerability.
Correct peppering means your application server holds the key and it is not stored in your database. 
If you accidentally have a SQL injection down the road, a hacker might steal all your peppered passwords, but wouldn't be able to steal the key
It sounds like you're going to be doing hashing on every request, which is going to painfully slow. You should hash once and provide a token
","577","<security><hash><restful-authentication><sha256><hmac>","0","0","1","2017-05-05 18:59:01","","0","","","","","2017-05-05 15:43:31",""
"24651088","What is the role of SHA hash in signing a document in OpenSSL library?","I am following OpenSSL directives to generate signatures. I am using ruby 2.1.0 and am generating signatures like this:
document = ""This is a simple string document to be signed""
key = OpenSSL::PKey::RSA.new([private_key])
digest = OpenSSL::Digest::SHA256.new
signature = key.sign digest, document

The signature is transmitted and reaches the destination where it is to be verified. To verify, I do like this:
key = OpenSSL::PKey::RSA.new([pubkey])
digest = OpenSSL::Digest::SHA256.new
key.verify digest, signature, document # => valid

This is working because if we change just one letter of the document or signature, this returns invalid result:
key.verify digest, signature, changed_document # => Invalid

But with a different SHA, the verification command still results in a valid result:
digest = OpenSSL::Digest::SHA256.new('this will generate different SHA')
key.verify digest, signature, document # => valid

It confused me. Shouldn't a different SHA hash result in invalid result? What is the role of digest here?
","Passing an argument to OpenSSL::Digest::SHA256.new causes that data to be added to the digest.
However, the openssl signing functions reset the digest before it is used and so that extra data has no effect in this particular case.
","574","<ruby><ruby-on-rails-4><openssl><digital-signature><sha256>","4","2","1","2014-07-09 10:57:02","","0","2","314166","","2014-07-09 10:40:07","2014-07-09 10:22:45",""
"47100802","JMeter BeanShell SHA-256 different hash values","I'm calling a api serice that requires a http header with the hash value of the request body.
I'm trying to use a beanshell post processor in JMeter to automatically create the sha-256 hash of the request body. The hash value is right up until I introduce a line break in the request body (which is a pain as the JSON message spans several lines!)
I assume it's something to do with hidden characters however I can't work out what is going wrong! :(
When I compare the hash generated by JMeter to seperate Hash generator tools it is an exact match until there are line breaks, then JMeter is wrong. 
Why is JMeter generating an incorrect hash when there are line breaks?
My code is:
[import org.apache.commons.httpclient.auth.DigestScheme; // necessary imports
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
import org.apache.jmeter.protocol.http.control.Header;
import org.apache.jmeter.services.FileServer;
import javax.xml.bind.DatatypeConverter;
import java.security.*;

String body = sampler.getArguments().getArgument(0).getValue();
String hash = DigestUtils.sha256Hex(body);
log.info(hash);

","What is your input data and what output do you expect? 
Since JMeter 3.1 it is recommended to switch to JSR223 Test Elements and Groovy language so:

Given the following request body:
{
    ""foo"": ""bar""
}

And the next Groovy code to generate a SHA-256 hex string:
def sha256Hex = { input ->  
  java.security.MessageDigest.getInstance(""SHA-256"")   
    .digest(input.getBytes(""UTF-8"")).encodeHex().toString()  
}
log.info(sha256Hex(sampler.getArguments().getArgument(0).getValue()))


I'm getting dbc67f71c921b5b7649481a5123d94dfa919748d2962889681d96438033c548f value which is basically the same I can see using https://hash.online-convert.com/sha256-generator generator. 
","571","<jmeter><sha256><beanshell>","0","0","1","2017-11-06 09:16:01","","5","1","8881846","","2017-11-03 20:39:44","2017-11-03 16:51:35",""
"39046487","Computing the JWT signature for Google OAuth Service Account using erlang?","I have created google service account and have JSON file containing private_key, client_email etc.
JWT should be created to get access token.
I have followed following step
Header computation:
Header = jsx:encode(#{<<""alg"">> => <<""RS256"">>,<<""typ"">> => <<""JWT"">>}).
Base64Header = base64:encode(Header).

Claims computation:
Claims = jsx:encode(#{
  <<""iss"">> => <<""google-123@some-test.iam.gserviceaccount.com"">>,
  <<""scope"">> => <<""https://www.googleapis.com/auth/cloud-platform"">>,
  <<""aud"">> => <<""https://www.googleapis.com/oauth2/v4/token"">>,
  <<""exp"">> => 1471629262,
  <<""iat"">> => 1471627282
}).
Base64Claims = base64:encode(Claims).


Input = {Base64Header}.{Base64Claim}

And,
How we can sign the UTF-8 representation of the Input using SHA256withRSA (also known as RSASSA-PKCS1-V1_5-SIGN with the SHA-256 hash function) with the private_key to compute JWT Signature?
","There are libraries already built to do this. One (which I am using) is Erlang JOSE.
%% In OTP 17 or later
Signed = jose_jwt:sign(RSAPrivate, #{ <<""alg"">> => <<""RS256"">> }, Payload),
{_JWS, Token} = jose_jws:compact(Signed).

","571","<erlang><google-oauth><jwt><sha256><rsa-sha256>","0","0","1","2016-08-21 07:53:34","39062047","0","","","","","2016-08-19 19:34:18",""
"53529347","HMAC SHA256 Powershell convert","Why does the following powershell script:
$privateKey = ""843c1f887b""
$requestData = ""1543448572|d.lastname@firm.com|Firstname Lastname""
function signRequest {
    $hmacsha = New-Object System.Security.Cryptography.HMACSHA256
    $hmacsha.key = [Text.Encoding]::ASCII.GetBytes($privateKey)
    $signature = $hmacsha.ComputeHash([Text.Encoding]::ASCII.GetBytes($requestData))
    $signature = [Convert]::ToBase64String($signature)
    $outi = $signature
    return $signature
}

convert to hash:
FipK51tOtzb2m2yFQAf5IK6BNthClnqE24luMzYMPuo=

and other online hmac sha256 generators with the same input to:
162a4ae75b4eb736f69b6c854007f920ae8136d842967a84db896e33360c3eea

any suggestions what I'm doing wrong in the script?
Thanks!
","Your code produces the correct HMAC, you're just base64-encoding it instead of output a hex string like all the other tools.
Change this line
$signature = [Convert]::ToBase64String($signature)

to
$signature = [System.BitConverter]::ToString($signature).Replace('-','').ToLower()

Explanation:

[BitConverter]::ToString($signature) produces a hexadecimal string (16-2A-4A-E7...)
String.Replace('-','') removes the - (162A4AE7...)
String.ToLower() lowercases the final string (162a4ae7...)

","567","<powershell><sha256><hmac>","1","1","1","2018-11-28 23:07:09","53529409","0","","","","","2018-11-28 22:55:59",""
"49776226","HmacSHA256 in WebAssembly compiled with Emscripten","I'm trying to implement JWT token (encoding only) in WebAssembly, the goal is to have a very light weight wasm module. As a web developer my C knowledge is limited. For now I've implemented the following function (ported from JS) to encode url-safe Base64 encoder, which works perfectly.
char _keyStr[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_="";
char ret_val[200];

char* encode (char *data){
    int len = strlen(data);
    int i = 0;
    int j = 0;

    while(i<len){
        char chr1 = data[i++];
        int chr2Out = (i > len - 1)? 1:0;
        char chr2 = data[i++];
        int chr3Out = (i > len - 1)? 1:0;;
        char chr3 = data[i++];


        char enc1 = chr1 >> 2;
        char enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
        char enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
        char enc4 = chr3 & 63;

        if (chr2Out) {
            enc3 = enc4 = 64;
        } else if (chr3Out) {
            enc4 = 64;
        }

        ret_val[j++] = _keyStr[enc1];
        ret_val[j++] = _keyStr[enc2];
        ret_val[j++] = _keyStr[enc3];
        ret_val[j++] = _keyStr[enc4];

    }
    ret_val[j] = '\0';
    return ret_val;
}

My next challenge is to be able to sign my JWT payload with HmacSHA256.
The following JS fiddle, describes what I want to accomplish with C.
https://jsfiddle.net/gm7boy2p/813/
I'm struggling with integrating a 3rd party code and complie it with emcc.
I'm looking for a light weight library or a snippet.
Example code or any help would be appreciated.

Update: After extra research, reading this stackoverflow question and this article, it looks like using openssl or any other external library with WebAssembly is far from trivial. So what I'm looking for now is a standalone C function that I could integrate to my existing code.
","It is true that you cannot use the system libraries when using web-assembly. So the only solution is to compile them from source in a way the that is compliant with the libraries already provided by the cross-compiler (ie emscripten)
So for your question, I found the library cryptopp, satisfying your use case. The example here showcase how you can use this library.
Now how can you compile this library for your case? Since it comes with a make file, all you need to do is call 
emmake make -f GNUmakefile-cross -j8

This will generate a .a file, which is actually a .bc file and can be linked with your existing C/C++ program, that you wish to run on web. Just make sure to include the headers of this file appropriately. It would even be better if you make a makefile for your project.
P.S I got this working locally in my system, by adding these line at the end of the GNUmakefile-cross file
cryptest.html: libcryptopp.a $(TESTOBJS)
    $(CXX) -s DISABLE_EXCEPTION_CATCHING=0 --preload-file TestData -o $@ $(strip $(CXXFLAGS)) $(TESTOBJS) ./libcryptopp.a $(LDFLAGS) $(LDLIBS)

I changed the test.cpp file to include sample code for ""HMAC"" and then called the following lines from the command line
emmake make -f GNUmakefile-cross cryptest.html -j8

The output ie cryptest.html, when opened in firefox worked flawlessly.
","564","<c><jwt><sha256><emscripten><webassembly>","15","7","3","2018-04-23 01:42:58","49862020","3","4","1116068","","2018-04-13 08:51:36","2018-04-11 13:19:46",""
"49776226","HmacSHA256 in WebAssembly compiled with Emscripten","I'm trying to implement JWT token (encoding only) in WebAssembly, the goal is to have a very light weight wasm module. As a web developer my C knowledge is limited. For now I've implemented the following function (ported from JS) to encode url-safe Base64 encoder, which works perfectly.
char _keyStr[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_="";
char ret_val[200];

char* encode (char *data){
    int len = strlen(data);
    int i = 0;
    int j = 0;

    while(i<len){
        char chr1 = data[i++];
        int chr2Out = (i > len - 1)? 1:0;
        char chr2 = data[i++];
        int chr3Out = (i > len - 1)? 1:0;;
        char chr3 = data[i++];


        char enc1 = chr1 >> 2;
        char enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
        char enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
        char enc4 = chr3 & 63;

        if (chr2Out) {
            enc3 = enc4 = 64;
        } else if (chr3Out) {
            enc4 = 64;
        }

        ret_val[j++] = _keyStr[enc1];
        ret_val[j++] = _keyStr[enc2];
        ret_val[j++] = _keyStr[enc3];
        ret_val[j++] = _keyStr[enc4];

    }
    ret_val[j] = '\0';
    return ret_val;
}

My next challenge is to be able to sign my JWT payload with HmacSHA256.
The following JS fiddle, describes what I want to accomplish with C.
https://jsfiddle.net/gm7boy2p/813/
I'm struggling with integrating a 3rd party code and complie it with emcc.
I'm looking for a light weight library or a snippet.
Example code or any help would be appreciated.

Update: After extra research, reading this stackoverflow question and this article, it looks like using openssl or any other external library with WebAssembly is far from trivial. So what I'm looking for now is a standalone C function that I could integrate to my existing code.
","I managed to create a small (library-ish) code snippet in C. I checked the results from here.
Also shown here:

The SHA256 code is taken from here. Used in cgminer.
I just modified it a bit (removed references etc.) to make it work stand-alone. Here is the total code and test software.

sha2.h:

/*
 * FIPS 180-2 SHA-224/256/384/512 implementation
 * Last update: 02/02/2007
 * Issue date:  04/30/2005
 *
 * Copyright (C) 2013, Con Kolivas <kernel@kolivas.org>
 * Copyright (C) 2005, 2007 Olivier Gay <olivier.gay@a3.epfl.ch>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the project nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef SHA2_H
#define SHA2_H

#define SHA256_DIGEST_SIZE ( 256 / 8)
#define SHA256_BLOCK_SIZE  ( 512 / 8)

#define SHFR(x, n)    (x >> n)
#define ROTR(x, n)   ((x >> n) | (x << ((sizeof(x) << 3) - n)))
#define CH(x, y, z)  ((x & y) ^ (~x & z))
#define MAJ(x, y, z) ((x & y) ^ (x & z) ^ (y & z))

#define SHA256_F1(x) (ROTR(x,  2) ^ ROTR(x, 13) ^ ROTR(x, 22))
#define SHA256_F2(x) (ROTR(x,  6) ^ ROTR(x, 11) ^ ROTR(x, 25))
#define SHA256_F3(x) (ROTR(x,  7) ^ ROTR(x, 18) ^ SHFR(x,  3))
#define SHA256_F4(x) (ROTR(x, 17) ^ ROTR(x, 19) ^ SHFR(x, 10))

typedef struct {
    unsigned int tot_len;
    unsigned int len;
    unsigned char block[2 * SHA256_BLOCK_SIZE];
    unsigned int h[8];
} sha256_ctx;

extern unsigned int sha256_k[64];

void sha256_init(sha256_ctx * ctx);
void sha256_update(sha256_ctx *ctx, const unsigned char *message,
                   unsigned int len);
void sha256_final(sha256_ctx *ctx, unsigned char *digest);
void sha256(const unsigned char *message, unsigned int len,
            unsigned char *digest);

#endif /* !SHA2_H */


main.c:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include ""sha2.h""

#define UNPACK32(x, str)                      \
{                                             \
*((str) + 3) = (unsigned char) ((x)      );       \
*((str) + 2) = (unsigned char) ((x) >>  8);       \
*((str) + 1) = (unsigned char) ((x) >> 16);       \
*((str) + 0) = (unsigned char) ((x) >> 24);       \
}

#define PACK32(str, x)                        \
{                                             \
*(x) =   ((unsigned int) *((str) + 3)      )    \
| ((unsigned int) *((str) + 2) <<  8)    \
| ((unsigned int) *((str) + 1) << 16)    \
| ((unsigned int) *((str) + 0) << 24);   \
}

#define SHA256_SCR(i)                         \
{                                             \
w[i] =  SHA256_F4(w[i -  2]) + w[i -  7]  \
+ SHA256_F3(w[i - 15]) + w[i - 16]; \
}

unsigned int sha256_h0[8] =
{ 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19 };

unsigned int sha256_k[64] =
{ 0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
    0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
    0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
    0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
    0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
    0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
    0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2 };

/* SHA-256 functions */

void sha256_transf(sha256_ctx *ctx, const unsigned char *message,
                   unsigned int block_nb)
{
    unsigned int w[64];
    unsigned int wv[8];
    unsigned int t1, t2;
    const unsigned char *sub_block;
    int i;

    int j;

    for (i = 0; i < (int)block_nb; i++) {
        sub_block = message + (i << 6);

        for (j = 0; j < 16; j++) {
            PACK32(&sub_block[j << 2], &w[j]);
        }

        for (j = 16; j < 64; j++) {
            SHA256_SCR(j);
        }

        for (j = 0; j < 8; j++) {
            wv[j] = ctx->h[j];
        }

        for (j = 0; j < 64; j++) {
            t1 = wv[7] + SHA256_F2(wv[4]) + CH(wv[4], wv[5], wv[6])
            + sha256_k[j] + w[j];
            t2 = SHA256_F1(wv[0]) + MAJ(wv[0], wv[1], wv[2]);
            wv[7] = wv[6];
            wv[6] = wv[5];
            wv[5] = wv[4];
            wv[4] = wv[3] + t1;
            wv[3] = wv[2];
            wv[2] = wv[1];
            wv[1] = wv[0];
            wv[0] = t1 + t2;
        }

        for (j = 0; j < 8; j++) {
            ctx->h[j] += wv[j];
        }
    }
}

void sha256(const unsigned char *message, unsigned int len, unsigned char *digest)
{
    sha256_ctx ctx;

    sha256_init(&ctx);
    sha256_update(&ctx, message, len);
    sha256_final(&ctx, digest);
}

void sha256_init(sha256_ctx *ctx)
{
    int i;
    for (i = 0; i < 8; i++) {
        ctx->h[i] = sha256_h0[i];
    }

    ctx->len = 0;
    ctx->tot_len = 0;
}

void sha256_update(sha256_ctx *ctx, const unsigned char *message,
                   unsigned int len)
{
    unsigned int block_nb;
    unsigned int new_len, rem_len, tmp_len;
    const unsigned char *shifted_message;

    tmp_len = SHA256_BLOCK_SIZE - ctx->len;
    rem_len = len < tmp_len ? len : tmp_len;

    memcpy(&ctx->block[ctx->len], message, rem_len);

    if (ctx->len + len < SHA256_BLOCK_SIZE) {
        ctx->len += len;
        return;
    }

    new_len = len - rem_len;
    block_nb = new_len / SHA256_BLOCK_SIZE;

    shifted_message = message + rem_len;

    sha256_transf(ctx, ctx->block, 1);
    sha256_transf(ctx, shifted_message, block_nb);

    rem_len = new_len % SHA256_BLOCK_SIZE;

    memcpy(ctx->block, &shifted_message[block_nb << 6],
           rem_len);

    ctx->len = rem_len;
    ctx->tot_len += (block_nb + 1) << 6;
}

void sha256_final(sha256_ctx *ctx, unsigned char *digest)
{
    unsigned int block_nb;
    unsigned int pm_len;
    unsigned int len_b;

    int i;

    block_nb = (1 + ((SHA256_BLOCK_SIZE - 9)
                     < (ctx->len % SHA256_BLOCK_SIZE)));

    len_b = (ctx->tot_len + ctx->len) << 3;
    pm_len = block_nb << 6;

    memset(ctx->block + ctx->len, 0, pm_len - ctx->len);
    ctx->block[ctx->len] = 0x80;
    UNPACK32(len_b, ctx->block + pm_len - 4);

    sha256_transf(ctx, ctx->block, block_nb);

    for (i = 0; i < 8; i++) {
        UNPACK32(ctx->h[i], &digest[i << 2]);
    }
}

unsigned char * HMAC_SHA256(const char * msg, const char * key)
{
    unsigned int blocksize = 64;
    unsigned char * Key0 = (unsigned char *)calloc(blocksize, sizeof(unsigned char));
    unsigned char * Key0_ipad = (unsigned char *)calloc(blocksize, sizeof(unsigned char));
    unsigned char * Key0_ipad_concat_text = (unsigned char *)calloc( (blocksize + strlen(msg)), sizeof(unsigned char));
    unsigned char * Key0_ipad_concat_text_digest = (unsigned char *)calloc( blocksize, sizeof(unsigned char));
    unsigned char * Key0_opad = (unsigned char *)calloc(blocksize, sizeof(unsigned char));
    unsigned char * Key0_opad_concat_prev = (unsigned char *)calloc(blocksize + 32, sizeof(unsigned char));

    unsigned char * HMAC_SHA256 = (unsigned char *)malloc(32 * sizeof(unsigned char));

    if (strlen(key) < blocksize) {
        for (int i = 0; i < blocksize; i++) {
            if (i < strlen(key)) Key0[i] = key[i];
            else Key0[i] = 0x00;
        }
    }
    else if (strlen(key) > blocksize) {
        sha256(key, strlen(key), Key0);
        for (unsigned char i = strlen(key); i < blocksize; i++) {
            Key0[i] = 0x00;
        }
    }

    for (int i = 0; i < blocksize; i++) {
        Key0_ipad[i] = Key0[i] ^ 0x36;
    }
    for (int i = 0; i < blocksize; i++) {
        Key0_ipad_concat_text[i] = Key0_ipad[i];
    }
    for (int i = blocksize; i < blocksize + strlen(msg); i++) {
        Key0_ipad_concat_text[i] = msg[i - blocksize];
    }

    sha256(Key0_ipad_concat_text, blocksize + (unsigned int)strlen(msg), Key0_ipad_concat_text_digest);

    for (int i = 0; i < blocksize; i++) {
        Key0_opad[i] = Key0[i] ^ 0x5C;
    }

    for (int i = 0; i < blocksize; i++) {
        Key0_opad_concat_prev[i] = Key0_opad[i];
    }
    for (int i = blocksize; i < blocksize + 32; i++) {
        Key0_opad_concat_prev[i] = Key0_ipad_concat_text_digest[i - blocksize];
    }

    sha256(Key0_opad_concat_prev, blocksize + 32, HMAC_SHA256);
    return HMAC_SHA256;
}


int main()
{
    unsigned char * result;

    result = HMAC_SHA256(""Sample #1"", ""MyKey"");

    unsigned char arr[32] = { 0 };
    memcpy(arr, result, 32);

    for(int i = 0; i < 32; i++) {
        printf(""%#02x, "", arr[i]);
    }
    return 0;
}

Here are the results for the sample run:


EDIT: 
Info on the HMAC_SHA256 function can be found here. The one I wrote is just for demonstration purposes. One can modify it accordingly.
EDIT 2: 
I added the code for Base64 format. I used the information found on Wikipedia. Sample test run works for OP's input and output. Results are as shown:



Updated main.c

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>

#include ""sha2.h""

#define HMAC_SHA256_FAIL_STRING ""HMAC_SHA256 has failed."" // fprintf(stderr, ""%s\n"", strerror(errno));

#define UNPACK32(x, str)                      \
{                                             \
*((str) + 3) = (unsigned char) ((x)      );       \
*((str) + 2) = (unsigned char) ((x) >>  8);       \
*((str) + 1) = (unsigned char) ((x) >> 16);       \
*((str) + 0) = (unsigned char) ((x) >> 24);       \
}

#define PACK32(str, x)                        \
{                                             \
*(x) =   ((unsigned int) *((str) + 3)      )    \
| ((unsigned int) *((str) + 2) <<  8)    \
| ((unsigned int) *((str) + 1) << 16)    \
| ((unsigned int) *((str) + 0) << 24);   \
}

#define SHA256_SCR(i)                         \
{                                             \
w[i] =  SHA256_F4(w[i -  2]) + w[i -  7]  \
+ SHA256_F3(w[i - 15]) + w[i - 16]; \
}

char Base64_Table[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"";

unsigned int sha256_h0[8] =
{ 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19 };

unsigned int sha256_k[64] =
{ 0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
    0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
    0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
    0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
    0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
    0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
    0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2 };

/* SHA-256 functions */

void sha256_transf(sha256_ctx *ctx, const unsigned char *message,
                   unsigned int block_nb)
{
    unsigned int w[64];
    unsigned int wv[8];
    unsigned int t1, t2;
    const unsigned char *sub_block;
    int i;

    int j;

    for (i = 0; i < (int)block_nb; i++) {
        sub_block = message + (i << 6);

        for (j = 0; j < 16; j++) {
            PACK32(&sub_block[j << 2], &w[j]);
        }

        for (j = 16; j < 64; j++) {
            SHA256_SCR(j);
        }

        for (j = 0; j < 8; j++) {
            wv[j] = ctx->h[j];
        }

        for (j = 0; j < 64; j++) {
            t1 = wv[7] + SHA256_F2(wv[4]) + CH(wv[4], wv[5], wv[6])
            + sha256_k[j] + w[j];
            t2 = SHA256_F1(wv[0]) + MAJ(wv[0], wv[1], wv[2]);
            wv[7] = wv[6];
            wv[6] = wv[5];
            wv[5] = wv[4];
            wv[4] = wv[3] + t1;
            wv[3] = wv[2];
            wv[2] = wv[1];
            wv[1] = wv[0];
            wv[0] = t1 + t2;
        }

        for (j = 0; j < 8; j++) {
            ctx->h[j] += wv[j];
        }
    }
}

void sha256(const unsigned char *message, unsigned int len, unsigned char *digest)
{
    sha256_ctx ctx;

    sha256_init(&ctx);
    sha256_update(&ctx, message, len);
    sha256_final(&ctx, digest);
}

void sha256_init(sha256_ctx *ctx)
{
    int i;
    for (i = 0; i < 8; i++) {
        ctx->h[i] = sha256_h0[i];
    }

    ctx->len = 0;
    ctx->tot_len = 0;
}

void sha256_update(sha256_ctx *ctx, const unsigned char *message,
                   unsigned int len)
{
    unsigned int block_nb;
    unsigned int new_len, rem_len, tmp_len;
    const unsigned char *shifted_message;

    tmp_len = SHA256_BLOCK_SIZE - ctx->len;
    rem_len = len < tmp_len ? len : tmp_len;

    memcpy(&ctx->block[ctx->len], message, rem_len);

    if (ctx->len + len < SHA256_BLOCK_SIZE) {
        ctx->len += len;
        return;
    }

    new_len = len - rem_len;
    block_nb = new_len / SHA256_BLOCK_SIZE;

    shifted_message = message + rem_len;

    sha256_transf(ctx, ctx->block, 1);
    sha256_transf(ctx, shifted_message, block_nb);

    rem_len = new_len % SHA256_BLOCK_SIZE;

    memcpy(ctx->block, &shifted_message[block_nb << 6],
           rem_len);

    ctx->len = rem_len;
    ctx->tot_len += (block_nb + 1) << 6;
}

void sha256_final(sha256_ctx *ctx, unsigned char *digest)
{
    unsigned int block_nb;
    unsigned int pm_len;
    unsigned int len_b;

    int i;

    block_nb = (1 + ((SHA256_BLOCK_SIZE - 9)
                     < (ctx->len % SHA256_BLOCK_SIZE)));

    len_b = (ctx->tot_len + ctx->len) << 3;
    pm_len = block_nb << 6;

    memset(ctx->block + ctx->len, 0, pm_len - ctx->len);
    ctx->block[ctx->len] = 0x80;
    UNPACK32(len_b, ctx->block + pm_len - 4);

    sha256_transf(ctx, ctx->block, block_nb);

    for (i = 0; i < 8; i++) {
        UNPACK32(ctx->h[i], &digest[i << 2]);
    }
}

char * HMAC_SHA256(char * msg, char * key)
{
    size_t blocksize;

    blocksize = 64;
    char * Key0 = (char *)calloc(blocksize, sizeof(char));
    if (Key0 == NULL) {
        return HMAC_SHA256_FAIL_STRING;
    }

    blocksize = 64;
    char * Key0_ipad = (char *)calloc(blocksize, sizeof(char));
    if (Key0_ipad == NULL) {
        free(Key0);
        return HMAC_SHA256_FAIL_STRING;
    }

    blocksize = 64 + strlen(msg);
    char * Key0_ipad_concat_text = (char *)calloc( blocksize, sizeof(char));
    if (Key0_ipad_concat_text == NULL) {
        free(Key0);
        free(Key0_ipad);
        return HMAC_SHA256_FAIL_STRING;
    }

    blocksize = 64;
    char * Key0_ipad_concat_text_digest = (char *)calloc( blocksize, sizeof(char));
    if (Key0_ipad_concat_text_digest == NULL) {
        free(Key0);
        free(Key0_ipad);
        free(Key0_ipad_concat_text);
        return HMAC_SHA256_FAIL_STRING;
    }

    blocksize = 64;
    char * Key0_opad = (char *)calloc(blocksize, sizeof(char));
    if (Key0_opad == NULL) {
        free(Key0);
        free(Key0_ipad);
        free(Key0_ipad_concat_text);
        free(Key0_ipad_concat_text_digest);
        return HMAC_SHA256_FAIL_STRING;
    }

    blocksize = 64 + 32;
    char * Key0_opad_concat_prev = (char *)calloc(blocksize + 32, sizeof(char));
    if (Key0_opad_concat_prev == NULL) {
        free(Key0);
        free(Key0_ipad);
        free(Key0_ipad_concat_text);
        free(Key0_ipad_concat_text_digest);
        free(Key0_opad);
        return HMAC_SHA256_FAIL_STRING;
    }

    blocksize = 64;
    char * HMAC_SHA256 = (char *)malloc(blocksize/2 * sizeof(char));
    if (HMAC_SHA256 == NULL) {
        free(Key0);
        free(Key0_ipad);
        free(Key0_ipad_concat_text);
        free(Key0_ipad_concat_text_digest);
        free(Key0_opad);
        free(Key0_opad_concat_prev);
        return HMAC_SHA256_FAIL_STRING;
    }

    if (strlen(key) < blocksize) {
        char * tmp = key;
        char * tmp2 = Key0;
        for (int i = 0; i < blocksize; i++) {
            if (i < strlen(key)) *tmp2++ = *tmp++;
            else *tmp2++ = 0x00;
        }
    }
    else if (strlen(key) > blocksize) {
        sha256((unsigned char *)key, strlen(key), (unsigned char *)Key0);
        for (unsigned char i = strlen(key); i < blocksize; i++) {
            Key0[i] = 0x00;
        }
    }

    for (int i = 0; i < blocksize; i++) {
        Key0_ipad[i] = Key0[i] ^ 0x36;
    }
    for (int i = 0; i < blocksize; i++) {
        Key0_ipad_concat_text[i] = Key0_ipad[i];
    }
    for (int i = blocksize; i < blocksize + strlen(msg); i++) {
        Key0_ipad_concat_text[i] = msg[i - blocksize];
    }

    sha256((unsigned char *)Key0_ipad_concat_text, blocksize + (unsigned int)strlen(msg), (unsigned char *)Key0_ipad_concat_text_digest);

    for (int i = 0; i < blocksize; i++) {
        Key0_opad[i] = Key0[i] ^ 0x5C;
    }

    for (int i = 0; i < blocksize; i++) {
        Key0_opad_concat_prev[i] = Key0_opad[i];
    }
    for (int i = blocksize; i < blocksize + 32; i++) {
        Key0_opad_concat_prev[i] = Key0_ipad_concat_text_digest[i - blocksize];
    }

    sha256((unsigned char *)Key0_opad_concat_prev, blocksize + 32, (unsigned char *)HMAC_SHA256);

    free(Key0);
    free(Key0_ipad);
    free(Key0_ipad_concat_text);
    free(Key0_ipad_concat_text_digest);
    free(Key0_opad);
    free(Key0_opad_concat_prev);
    return HMAC_SHA256;
}

char * Base64_Stringify(char * hash, size_t length)
{
    size_t no_op = 0;
    size_t Base64_size;
    char * Base64;
    unsigned long tmp = length;
    if (tmp % 3 == 0) {
        Base64_size = 4 * tmp / 3;
        Base64 = (char *)calloc(Base64_size + 1, sizeof(char));
    }
    else if (tmp % 3 == 1) {
        tmp += 2;
        Base64_size = 4 * tmp / 3;
        Base64 = (char *)calloc(Base64_size + 1, sizeof(char));
        Base64[Base64_size - 1] = '=';
        Base64[Base64_size - 2] = '=';
        no_op = 2;
    }
    else if (tmp % 3 == 2) {
        tmp += 1;
        Base64_size = 4 * tmp / 3;
        Base64 = (char *)calloc(Base64_size + 1, sizeof(char));
        Base64[Base64_size - 1] = '=';
        no_op = 1;
    }

    unsigned int b64_case = 0;
    size_t j = 0;
    for (int i = 0; i < Base64_size - no_op; i++) {
        switch (b64_case) {
            case 0:
            {
                Base64[i] = Base64_Table[(hash[j] & 0xFC) >> 2];
                j++;
                b64_case = 1;
            }
                break;
            case 1:
            {
                Base64[i] = Base64_Table[((hash[j-1] & 0x03) << 4) | ((hash[j] & 0xF0) >> 4)];
                b64_case = 2;
            }
                break;
            case 2:
            {
                Base64[i] = Base64_Table[((hash[j] & 0x0F) << 2) | ((hash[j+1] & 0xC0) >> 6)];
                j++;
                b64_case = 3;
            }
                break;
            case 3:
            {
                Base64[i] = Base64_Table[(hash[j] & 0x3F)];
                j++;
                b64_case = 0;
            }
                break;

            default:
                break;
        }
    }

    return Base64;
}


int main()
{
    char * HMAC_SHA256_result;
    char * Base64_Stringify_result;

    HMAC_SHA256_result = HMAC_SHA256(""test"", ""secret"");
    Base64_Stringify_result = Base64_Stringify(HMAC_SHA256_result, 32);

    unsigned char arr[32] = { 0 };
    memcpy(arr, HMAC_SHA256_result, 32);

    for(int i = 0; i < 32; i++) {
        printf(""%#02x, "", arr[i]);
    }
    printf(""\n\n"");

    for(int i = 0; i < strlen(Base64_Stringify_result); i++) {
        printf(""%c"", Base64_Stringify_result[i]);
    }
    printf(""\n\n"");
    return 0;
}

I'm leaving the old main.c for reference. You can also modify the updated main.c functions, e.g. the error codes when calloc fails...
","564","<c><jwt><sha256><emscripten><webassembly>","15","4","3","2018-04-23 01:42:58","49862020","3","4","1116068","","2018-04-13 08:51:36","2018-04-11 13:19:46",""
"49776226","HmacSHA256 in WebAssembly compiled with Emscripten","I'm trying to implement JWT token (encoding only) in WebAssembly, the goal is to have a very light weight wasm module. As a web developer my C knowledge is limited. For now I've implemented the following function (ported from JS) to encode url-safe Base64 encoder, which works perfectly.
char _keyStr[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_="";
char ret_val[200];

char* encode (char *data){
    int len = strlen(data);
    int i = 0;
    int j = 0;

    while(i<len){
        char chr1 = data[i++];
        int chr2Out = (i > len - 1)? 1:0;
        char chr2 = data[i++];
        int chr3Out = (i > len - 1)? 1:0;;
        char chr3 = data[i++];


        char enc1 = chr1 >> 2;
        char enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
        char enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
        char enc4 = chr3 & 63;

        if (chr2Out) {
            enc3 = enc4 = 64;
        } else if (chr3Out) {
            enc4 = 64;
        }

        ret_val[j++] = _keyStr[enc1];
        ret_val[j++] = _keyStr[enc2];
        ret_val[j++] = _keyStr[enc3];
        ret_val[j++] = _keyStr[enc4];

    }
    ret_val[j] = '\0';
    return ret_val;
}

My next challenge is to be able to sign my JWT payload with HmacSHA256.
The following JS fiddle, describes what I want to accomplish with C.
https://jsfiddle.net/gm7boy2p/813/
I'm struggling with integrating a 3rd party code and complie it with emcc.
I'm looking for a light weight library or a snippet.
Example code or any help would be appreciated.

Update: After extra research, reading this stackoverflow question and this article, it looks like using openssl or any other external library with WebAssembly is far from trivial. So what I'm looking for now is a standalone C function that I could integrate to my existing code.
","I've created a simple example of how you can create the hmac with the libgcrypt library. You just need to install it in your system and them compile the program with the -lgcrypt flag to link the library.
As you've asked a standalone function, I created a function which you can call with the key and message that returns a string with the base64 encoded result, which is exactly what you asked for in your JSFiddle.
#include <stdio.h>
#include <string.h>
#include <gcrypt.h>
#include <stdint.h>


static char encoding_table[] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
                                'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
                                'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
                                'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
                                'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
                                'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
                                'w', 'x', 'y', 'z', '0', '1', '2', '3',
                                '4', '5', '6', '7', '8', '9', '+', '/'};
static char *decoding_table = NULL;
static int mod_table[] = {0, 2, 1};


char *base64_encode(const unsigned char *data,
                    size_t input_length,
                    size_t *output_length) {

    *output_length = 4 * ((input_length + 2) / 3);

    char *encoded_data = calloc(1,*output_length+1);
    if (encoded_data == NULL) return NULL;

    for (int i = 0, j = 0; i < input_length;) {

        uint32_t octet_a = i < input_length ? (unsigned char)data[i++] : 0;
        uint32_t octet_b = i < input_length ? (unsigned char)data[i++] : 0;
        uint32_t octet_c = i < input_length ? (unsigned char)data[i++] : 0;

        uint32_t triple = (octet_a << 0x10) + (octet_b << 0x08) + octet_c;

        encoded_data[j++] = encoding_table[(triple >> 3 * 6) & 0x3F];
        encoded_data[j++] = encoding_table[(triple >> 2 * 6) & 0x3F];
        encoded_data[j++] = encoding_table[(triple >> 1 * 6) & 0x3F];
        encoded_data[j++] = encoding_table[(triple >> 0 * 6) & 0x3F];
    }

    for (int i = 0; i < mod_table[input_length % 3]; i++)
        encoded_data[*output_length - 1 - i] = '=';

    return encoded_data;
}

//don't forget to free the return pointer!
char* hmacSHA256(gcry_mac_hd_t hd, const char* key, size_t key_size, const char* msg, size_t msg_size) {
    unsigned char output[32];
    size_t outputSize = 32;
    gcry_mac_reset(hd);
    gcry_mac_setkey(hd,key,strlen(key));
    gcry_mac_write(hd,msg,strlen(msg));
    gcry_mac_read(hd,output,&outputSize);
    return base64_encode(output,outputSize,&outputSize);
}

int main() {
    const char* const key = ""secret"";
    const char* const msg = ""test"";
    //hmacsha256 returns 256 bits, meaning 32 bytes
    unsigned char output[32];
    size_t outputSize = 32;
    gcry_mac_hd_t hd;
    gcry_mac_open(&hd,GCRY_MAC_HMAC_SHA256,0,NULL);

    char* tmp = hmacSHA256(hd,key,strlen(key),msg,strlen(msg));
    printf(""HMAC-SHA256: '%s'\n"",tmp);
    free(tmp);

    tmp = hmacSHA256(hd,""secrett"",7,msg,strlen(msg));
    printf(""HMAC-SHA256: '%s'\n"",tmp);
    free(tmp);

    gcry_mac_close(hd);
    return 0;
}

Important remarks:
-Don't forget to free the return value of the hmacSHA256 function and to call gcry_mac_close when you are done hashing.
-I've included the size of the key and size of the message in the function's arguments because this way you can do the HMAC of binary data as well as ASCII/UTF-8 encoded strings. If you're not going to use binary data, feel free to remove the sizes from the arguments and calculating the size inside of the function with strlen like I did in the main when I called the function.
-I didn't wrap the creation of the gcry_mac_hd_t in the function because it's more efficient to reuse the same handler and just reset it every time you need to reuse it then to create a new one every time you need it. This optimization is even more noticeable if you call this function many times in the same execution!
","564","<c><jwt><sha256><emscripten><webassembly>","15","3","3","2018-04-23 01:42:58","49862020","3","4","1116068","","2018-04-13 08:51:36","2018-04-11 13:19:46",""
"48177791","how to specify signature length for java.security.Signature sign method","For my application, I'm trying to sign some byte contents using java.security.Signature class. The problem I'm having is that signature is never generated at a fixed length. For instance, sometimes it is generated at a length of 135, 136 or 137 bytes. Is there a way to specify the length or some padding at the end? Any other ideas or comments are appreciated.
    private byte[] ecdsaSign(ECPrivateKey key, byte[] content) throws Exception {
                Signature ecdsaSign = Signature.getInstance(""SHA256withECDSA"", ""SC"");
                ecdsaSign.initSign(key);
                ecdsaSign.update(content);
                byte[] signature = ecdsaSign.sign();
                return signature;
}

","For ECDSA Java crypto uses the ASN.1 DER encoding standardized by X9.62, SEC1 and rfc 3279 sec 2.2.3, which varies slightly in length. This is covered in more detail on another Stack: https://crypto.stackexchange.com/questions/1795/how-can-i-convert-a-der-ecdsa-signature-to-ASN.1 and https://crypto.stackexchange.com/questions/33095/shouldnt-a-signature-using-ecdsa-be-exactly-96-bytes-not-102-or-103 and https://crypto.stackexchange.com/questions/37528/why-do-openssl-elliptic-curve-digital-signatures-differ-by-one-byte 
This is also true for DSA, but not RSA, where signatures (and cryptograms since RSA supports both signature and encryption) are fixed length for a given key, as defined by I2OS and OS2I in PKCS1. 
If you want a different encoding, such as the fixed-length one used by PKCS11 (and your provider name ""SC"" suggests that possibility), you must convert it.
Added 2019-10: you no longer have to do it yourself in Java; BouncyCastle since 1.61 (2019-02) correctly supports this, as does SunEC in Java 9 up (2018-12). See later near-dupe Java ECDSAwithSHA256 signature with inconsistent length .
","563","<java><security><signature><sha256>","0","2","1","2019-10-16 13:01:54","48180561","0","","","","","2018-01-09 22:49:34",""
"18087222","All hash values are identical using Microsoft SHA256","Using the following code I always get the same hash regardless of the input. Any ideas why that might be?
    private static SHA256 sha256;
    internal static byte[] HashForCDCR(this string value)
    {
        byte[] hash;
        using (var myStream = new System.IO.MemoryStream())
        {
            using (var sw = new System.IO.StreamWriter(myStream))
            {
                sw.Write(value);
                hash = sha256.ComputeHash(myStream);
            }
        }

        return hash;
    }

","You may need to flush your stream. For optimal performance StreamWriter doesn't write to stream immediately . It waits for its internal buffer to fill. Flushing the writer immediately flush the content of the internal buffer to underline stream.
     sw.Write(value);
     sw.Flush();
     myStream.Position = 0;
     hash = sha256.ComputeHash(myStream);

","560","<c#><hash><sha><sha256>","1","1","3","2013-08-06 22:51:35","18087660","0","1","477420","","2013-08-06 18:22:54","2013-08-06 18:00:00",""
"18087222","All hash values are identical using Microsoft SHA256","Using the following code I always get the same hash regardless of the input. Any ideas why that might be?
    private static SHA256 sha256;
    internal static byte[] HashForCDCR(this string value)
    {
        byte[] hash;
        using (var myStream = new System.IO.MemoryStream())
        {
            using (var sw = new System.IO.StreamWriter(myStream))
            {
                sw.Write(value);
                hash = sha256.ComputeHash(myStream);
            }
        }

        return hash;
    }

","You are computing hash of empty portion of the stream (the one immediately after content you wrote with sw.Write) so it always the same.
Cheap fix: sw.Flush();myStream.Position = 0;. Better fix is to finish writing and create new read only stream for encryption based on original stream:
using (var myStream = new System.IO.MemoryStream())
{
    using (var sw = new System.IO.StreamWriter(myStream))
    {
        sw.Write(value);
    }
    using (var readonlyStream = new MemoryStream(myStream.ToArray(), writable:false)
    {
       hash = sha256.ComputeHash(readonlyStream);
    }
}

","560","<c#><hash><sha><sha256>","1","3","3","2013-08-06 22:51:35","18087660","0","1","477420","","2013-08-06 18:22:54","2013-08-06 18:00:00",""
"18087222","All hash values are identical using Microsoft SHA256","Using the following code I always get the same hash regardless of the input. Any ideas why that might be?
    private static SHA256 sha256;
    internal static byte[] HashForCDCR(this string value)
    {
        byte[] hash;
        using (var myStream = new System.IO.MemoryStream())
        {
            using (var sw = new System.IO.StreamWriter(myStream))
            {
                sw.Write(value);
                hash = sha256.ComputeHash(myStream);
            }
        }

        return hash;
    }

","I will probably use the solution that Alexei Levenkov called a ""cheap fix"". However, I did come across one other way to make it work, which I will post for future readers:
var encoding = new System.Text.UTF8Encoding();
var bytes = encoding.GetBytes(value);
var hash = sha256.ComputeHash(bytes);
return hash;

Jacob
","560","<c#><hash><sha><sha256>","1","0","3","2013-08-06 22:51:35","18087660","0","1","477420","","2013-08-06 18:22:54","2013-08-06 18:00:00",""
"24542626","Objective-C HMAC-256 To Sign HTTP Request - Seeing different results","I'm working in Objective-C with a REST API that needs to sign each HTTP request according to this spec (https://web-payments.org/specs/source/http-signatures/). 
It all seems straightforward, but I'm having troubles getting what the right ""signature"" value should be. I'm getting different results in Objective-C VS some of these online sha generators (http://www.freeformatter.com/hmac-generator.html, http://hash.online-convert.com/sha256-generator).
I put together some sandboxed test code to get this figured out outside of my project.
Here's my test code:
#import <Foundation/Foundation.h>
#import <CommonCrypto/CommonCrypto.h>

NSString * hmacSHA256(NSString *key, NSString *data) {
    const char *cKey  = [key cStringUsingEncoding:NSASCIIStringEncoding];
    const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];
    unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];
    CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);
    NSMutableString *result = [NSMutableString string];
    for(int i = 0; i < sizeof cHMAC; i++) {
        [result appendFormat:@""%02x"", cHMAC[i]];
    }
    return result;
}

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        NSMutableString * data = [NSMutableString string];
        [data appendString:@""(request-line) get /\n""];
        [data appendString:@""date: Wed, 02 Jul 2014 22:12:37 GMT""];
        NSString * key = @""5a30f5477e2fdea27c5bdef8d5b0b13bfc8c2c77c608169da637a58ac0bff23895b58f8de5ef982a"";
        NSLog(@""%@"",data);
        NSString * signature = hmacSHA256(key,data);
        NSLog(@""signature: %@"",signature);
    }
    return 0;
}

When I run this test code, I get this as a signature:
8315081c226a7b0a77093cf12ec6ce4e112fedff12ddfcfd752c909b58a9ae5e

But when I paste in these lines:
(request-line) get /
date: Wed, 02 Jul 2014 22:12:37 GMT

To one of the online generators (http://www.freeformatter.com/hmac-generator.html, http://hash.online-convert.com/sha256-generator) both of these generators give me the same signature:
71b09a1d0b8cde88f2b0c5bb78a06c4539994435e5e47700aa56d2194b9c2f08

So how exactly am I supposed to convert the above ""unsigned char cHMAC"" variable into the proper string?
Thanks.
","Your problem is the line endings in your text. In reality, your program is generating the correct hash, but you're entering a different string into the web tool, which is why you're getting a different result. Here's the text you're feeding to your program:
(request-line) get /\ndate: Wed, 02 Jul 2014 22:12:37 GMT

And here's what you're feeding to the web tool (assuming you're doing so on Windows, which checks out based on my tests):
(request-line) get /\r\ndate: Wed, 02 Jul 2014 22:12:37 GMT

Note the '\r\n'. By default, Windows (and, most likely, all web browsers) uses a carriage return AND a line feed character as an EOL sequence. Unix/Linux uses only a line feed, and Mac uses only a carriage return.
If you want to check any other hashes, either add a '\r' into your program for testing, or use a program like Notepad++ where you can control the line endings to create files and then upload them to the second site you listed.
","560","<objective-c><rest><hmac><sha256>","0","1","1","2014-07-02 23:52:33","24542755","3","","","","","2014-07-02 23:22:10",""
"50038666","How to convert a crypto::sha2::Sha256 hash into a &[u8] representation?","I'm currently trying to generate an ED25519 keypair from a SHA256 hash (via rust-crypto crate):
extern crate crypto; // rust-crypto = ""0.2.36""

use crypto::ed25519;
use crypto::sha2::Sha256;
use crypto::digest::Digest;

fn main() {
    let phrase = ""purchase hobby popular celery evil fantasy someone party position gossip host gather"";
    let mut seed = Sha256::new();
    seed.input_str(&phrase);
    let (_priv, _publ) = ed25519::keypair(&seed); // expects slice
}

However, I totally fail to understand how to correctly pass the SHA256 to the ed25519::keypair() function. I traced down that &seed.result_str() results in:
""fc37862cb425ca4368e8e368c54bb6ea0a1f305a225978564d1bdabdc7d99bdb""

This is the correct hash, while &seed.result_str().as_bytes() results in:
[102, 99, 51, 55, 56, 54, 50, 99, 98, 52, 50, 53, 99, 97, 52, 51, 54, 56, 101, 56, 101, 51, 54, 56, 99, 53, 52, 98, 98, 54, 101, 97, 48, 97, 49, 102, 51, 48, 53, 97, 50, 50, 53, 57, 55, 56, 53, 54, 52, 100, 49, 98, 100, 97, 98, 100, 99, 55, 100, 57, 57, 98, 100, 98]

Which is something I do not want, something entirely different. The question now breaks down to:
   |
36 |     let (_priv, _publ) = ed25519::keypair(&seed);
   |                                           ^^^^^ expected slice, found struct `crypto::sha2::Sha256`
   |
   = note: expected type `&[u8]`
              found type `&crypto::sha2::Sha256`

How to correctly convert the crypto::sha2::Sha256 hash into a [u8] representation?
","The Sha256 API may be a little confusing at first because it is designed so that it doesn't allocate any new memory for the data. That's to avoid wasting a memory allocation, in case you want to allocate it yourself. Instead, you give it a buffer to write to:
// Create a buffer in which to write the bytes, making sure it's
// big enough for the size of the hash
let mut bytes = vec![0; seed.output_bytes()];
// Write the raw bytes from the hash into the buffer
seed.result(&mut bytes);

// A reference to a Vec can be coerced to a slice
let (_priv, _publ) = ed25519::keypair(&bytes);

","560","<rust><sha256><sha>","7","3","1","2019-01-18 17:27:31","50042649","4","","493729","","2019-01-18 17:27:31","2018-04-26 08:47:37",""
"47619934","SHA256 giving different result for same string input","I have simple code to generate hash code using SHA256, however, it gives different result for the same input. However, if I declare the same string value in quotes for example _input= ""test"" then it returns the same result. 
public static System.String generateKey(System.String _input)
{
     System.Byte[] convertedArr;
     SHA256Managed sh = new System.Security.Cryptography.SHA256Managed();
        convertedArr = sh.ComputeHash(System.Text.Encoding::UTF8.GetBytes(_inputString),0, System.Text.Encoding::UTF8.GetByteCount(_input));
        hashCode = System.Convert::ToBase64String(convertedArr);
    return hashCode;
    }

","Note: 
convertedArr = sh.ComputeHash(System.Text.Encoding::UTF8.GetBytes(_inputString),0, System.Text.Encoding::UTF8.GetByteCount(_input));
The input to the hash is _inputString but the length is taken from _input, they are not the same. _inputString != _input.
The function defintion:
public static System.String generateKey(System.String _input)

Current code: 
convertedArr = sh.ComputeHash(System.Text.Encoding::UTF8.GetBytes(_inputString),0, System.Text.Encoding::UTF8.GetByteCount(_input));

Debuggable (semio-pseudo) code:
inputBytes  = System.Text.Encoding::UTF8.GetBytes(_input)
inputLength = System.Text.Encoding::UTF8.GetByteCount(_input)
hashBytes   = convertedArr = sh.ComputeHash(inputBytes, 0, inputLength);

With this the input and length can easily be verified. The chance of the error is less because _input is only used once.
Note: In practice I would get the length from inputBytes but I am not fluent in X++ so I did not make that change.
","559","<axapta><x++><sha256>","1","1","1","2017-12-04 04:47:40","","11","","9046641","","2017-12-03 16:25:15","2017-12-03 15:30:50",""
"13061200","SHA256 hash function giving unexpected result","I'm using C# and wondering why the .Net function PasswordDeriveBytes returns a different result from other SHA256 algorithums.
I'm calling it as follows:
byte[] saltValueBytes = Encoding.ASCII.GetBytes(saltValue);
var hash = PasswordDeriveBytes(""1234567890"", saltValueBytes, ""SHA256"", 1);
byte[] SHA256Pass = hash.GetBytes();

I am expecting to get the hash c775e7b757ede630cd0aa1113bd102661ab38829ca52a6422ab782862f268646
but instead I get 
b????????A?n?z$?]??9,m^????@n?
I dont know what the problem is.  how this function works and why the result i'm getting does not look like a SHA 256 hash.
thanks
","How are you displaying your bytes?  It looks like you took them and tried to convert them directly to a string, which gives you some wierd-looking characters (and about half the number of characters expected).  See this answer for some options for doing the conversion to a hex string like it appears you were expecting.
","558","<c#><encryption><hash><sha256>","0","4","2","2012-10-30 04:03:46","13087108","2","","","","","2012-10-25 03:39:46",""
"13061200","SHA256 hash function giving unexpected result","I'm using C# and wondering why the .Net function PasswordDeriveBytes returns a different result from other SHA256 algorithums.
I'm calling it as follows:
byte[] saltValueBytes = Encoding.ASCII.GetBytes(saltValue);
var hash = PasswordDeriveBytes(""1234567890"", saltValueBytes, ""SHA256"", 1);
byte[] SHA256Pass = hash.GetBytes();

I am expecting to get the hash c775e7b757ede630cd0aa1113bd102661ab38829ca52a6422ab782862f268646
but instead I get 
b????????A?n?z$?]??9,m^????@n?
I dont know what the problem is.  how this function works and why the result i'm getting does not look like a SHA 256 hash.
thanks
","PasswordDeriveBytes is not a hash function, it is a key derivation function. It follows PBKDF1 precisely until you exceed 20 bytes of output, for which PBKDF1 was designed. When that happens it turns into a proprietary, badly programmed, insecure and unknown key stretching function.
PBKDF1 uses SHA-1 to implement the key derivation. SHA-256 is a rather more secure hash function with a larger output. So you will never ever have the same output for both functions. If you would, you will have broken one of the two - or much more likely you will have made a mistake.
Note that you should use PBKDF2 over PBKDF1 as it is more secure and does provide key stretching.
","558","<c#><encryption><hash><sha256>","0","2","2","2012-10-30 04:03:46","13087108","2","","","","","2012-10-25 03:39:46",""
"40398664","sha-256 without salt not always returning the same hash","Can anyone tell me why the following code does not always return the same hash? AFAIK the only way a hash can be different is due to a random salt, but according to the documentation I'm disabling salts by setting the salt size to 0.
public static void main(String[] args ) {
    char[] password = ""test_pass"".toCharArray();
    String str = encodePassword(password);

    System.out.printf(
        ""Byte digest '%s'\n"", 
        String.valueOf(Hex.encodeHex(Base64.decodeBase64(str)))
    );
}

static StandardByteDigester digester = new StandardByteDigester();
{
    digester.setAlgorithm(""SHA-256"");
    digester.setIterations(100000);
    digester.setSaltSizeBytes(0);
    digester.initialize();
}

public static String encodePassword(char[] rawPass) {
    return new String(Base64.encodeBase64(digester.digest(toBytes(rawPass))));
}

public static byte[] toBytes(char[] ch) { 
    Charset charset = Charset.defaultCharset();
    ByteBuffer buff = charset.encode(CharBuffer.wrap(ch));
    byte[] tmp = new byte[buff.limit()];
    buff.get(tmp);
    return tmp;    
}

","Your bug is related to the fact that you initialize your static field StandardByteDigester digester in an instance initializer block instead of a static initializer bloc such that it is never called as you never create an instance of your class so at the end it uses the default configuration with random salt.
Try this:
static {
    digester.setAlgorithm(""SHA-256"");
    digester.setIterations(100000);
    digester.setSaltSizeBytes(0);
    digester.initialize();
}


Your code could be simplified if your method encodePassword took a String instead of a char array as you could simply call getBytes(Charset) as next:
public static String encodePassword(String rawPass) {
    return new String(
        Base64.encodeBase64(digester.digest(rawPass.getBytes(StandardCharsets.UTF_8))),
        StandardCharsets.US_ASCII
    );
}

NB: It is not a good practice to rely on the platform's default charset as your code would then be platform's dependent so here as base 64 characters are all included in US_ASCII, let's use this charset to decode.
","553","<java><encryption><sha256><sha><jasypt>","1","3","1","2016-11-03 11:57:04","40399048","1","","1997376","","2016-11-03 10:07:12","2016-11-03 10:03:25",""
"23661278","Binding Hashed Password to SQL Prepared Statement","I am having trouble pulling back data from my DB when using a hashed password. I use hash_hmac/sha256 as follows:
function get_password_hash($password){
return hash_hmac('sha256',$password,'xxxxxxx',false);
}

$p is a non-hashed password; with this stored in my database, the below works perfectly:
$loginQuery = $dbc->prepare(""SELECT id, username FROM users WHERE (email=? AND pass=?)"");
$loginQuery->bind_param('ss',$e,$p);
$loginQuery->execute();
$loginQuery->bind_result($id,$username);

while($loginQuery->fetch()){
$_SESSION['user_id'] = $id;
$_SESSION['username'] = $username;
} 

If i update my database to hold the hashed password instead, and update the above to be as follows, the SQL statement brings nothing back from my database.
$pas = get_password_hash($p);
$loginQuery = $dbc->prepare(""SELECT id, username FROM users WHERE (email=? AND pass=?)"");
$loginQuery->bind_param('ss',$e,$pas);
$loginQuery->execute();
$loginQuery->bind_result($id,$username);

while($loginQuery->fetch()){
$_SESSION['user_id'] = $id;
$_SESSION['username'] = $username;
} 

I understand that this is because the database record holds the hashed password in a varbinary field but in my SQL query, I am using a string.
The parameter type options i can use in the prepared statement are String, Blob, Double and Integer; which of these relate to varbinary fields in my DB?
I saw a similar post which suggested a fix using pack() to convert string to binary; how would this work here?
","","553","<php><prepared-statement><sha256><varbinary>","0","","0","2014-05-14 17:44:05","","10","","1952277","","2014-05-14 17:44:05","2014-05-14 17:28:00",""
"24377945","How to use HMAC in Lua - Lightroom plugin","First thing I have to mention is I'm really really new to Lua and please be patient if you think my question is too dumb
Here is my requirement

I need to use HMAC-sha256 for Lightroom plugin development as I'm using that for security.

I was trying to use this but with no luck
https://code.google.com/p/lua-files/wiki/hmac
These are the steps I followed

Got the code of
https://code.google.com/p/lua-files/source/browse/hmac.lua and saved
as 'hmac.lua' file in my plugin directory
Got the code from this
https://code.google.com/p/lua-files/source/browse/sha2.lua and saved
as 'sha2.lua' file

Now in the file I use it like this
local hmac = require'hmac'
local sha2 = require'sha2'

--somewhere doend the line inside a function
local hashvalue = hmac.sha2('key', 'message')

but unfortunately this does not work and I'm not sure what I'm doing wrong.
Can anyone advice me what I'm doing wrong here? Or is there an easier and better way of doing this with a good example.
EDIT:
I'm doing this to get the result. When I include that code the plugin does stops working. I cannot get the output string when I do this
hashvalue = hmac.sha2('key', 'message')

local LrLogger = import 'LrLogger'
myLogger = LrLogger('FlaggedFiles')
myLogger:enable(""logfile"")
myLogger:trace (""=========================================\n"") 
myLogger:trace ('Winter is coming, ' .. hashvalue)
myLogger:trace (""=========================================\n"")

and the Lightroom refuses to load the plugin and there is nothing on the log as well
Thank you very much for your help
","I'd first make sure your code works outside of Lightroom. It seems that HMAC module you referenced has some other dependencies: it requires ""glue"", ""bit"", and ""ffi"" modules. Of these, bit and ffi are binary modules and I'm not sure you will be able to load them into Lightroom (unless they are already available there). In any case, you probably won't be able to make it run in LR if you don't have required modules and can't make it run without issues outside of LR.
","552","<lua><adobe><hmac><sha256><lightroom>","4","2","3","2015-10-14 13:55:09","","0","2","545697","","2014-06-24 23:43:40","2014-06-24 03:38:03",""
"24377945","How to use HMAC in Lua - Lightroom plugin","First thing I have to mention is I'm really really new to Lua and please be patient if you think my question is too dumb
Here is my requirement

I need to use HMAC-sha256 for Lightroom plugin development as I'm using that for security.

I was trying to use this but with no luck
https://code.google.com/p/lua-files/wiki/hmac
These are the steps I followed

Got the code of
https://code.google.com/p/lua-files/source/browse/hmac.lua and saved
as 'hmac.lua' file in my plugin directory
Got the code from this
https://code.google.com/p/lua-files/source/browse/sha2.lua and saved
as 'sha2.lua' file

Now in the file I use it like this
local hmac = require'hmac'
local sha2 = require'sha2'

--somewhere doend the line inside a function
local hashvalue = hmac.sha2('key', 'message')

but unfortunately this does not work and I'm not sure what I'm doing wrong.
Can anyone advice me what I'm doing wrong here? Or is there an easier and better way of doing this with a good example.
EDIT:
I'm doing this to get the result. When I include that code the plugin does stops working. I cannot get the output string when I do this
hashvalue = hmac.sha2('key', 'message')

local LrLogger = import 'LrLogger'
myLogger = LrLogger('FlaggedFiles')
myLogger:enable(""logfile"")
myLogger:trace (""=========================================\n"") 
myLogger:trace ('Winter is coming, ' .. hashvalue)
myLogger:trace (""=========================================\n"")

and the Lightroom refuses to load the plugin and there is nothing on the log as well
Thank you very much for your help
","If you just need to get SHA256 hash there is a way to do it Lightroom
I posted my question here and was able to get an answer. But there there was no reference of this on SDK documentation (Lightroom SDK)
local sha = import 'LrDigest'
d = sha.SHA256.digest (""Hello world"")

but unfortunately there was no HMAC so I decided to use md5 with a salt because this was taking too much of my time
","552","<lua><adobe><hmac><sha256><lightroom>","4","0","3","2015-10-14 13:55:09","","0","2","545697","","2014-06-24 23:43:40","2014-06-24 03:38:03",""
"24377945","How to use HMAC in Lua - Lightroom plugin","First thing I have to mention is I'm really really new to Lua and please be patient if you think my question is too dumb
Here is my requirement

I need to use HMAC-sha256 for Lightroom plugin development as I'm using that for security.

I was trying to use this but with no luck
https://code.google.com/p/lua-files/wiki/hmac
These are the steps I followed

Got the code of
https://code.google.com/p/lua-files/source/browse/hmac.lua and saved
as 'hmac.lua' file in my plugin directory
Got the code from this
https://code.google.com/p/lua-files/source/browse/sha2.lua and saved
as 'sha2.lua' file

Now in the file I use it like this
local hmac = require'hmac'
local sha2 = require'sha2'

--somewhere doend the line inside a function
local hashvalue = hmac.sha2('key', 'message')

but unfortunately this does not work and I'm not sure what I'm doing wrong.
Can anyone advice me what I'm doing wrong here? Or is there an easier and better way of doing this with a good example.
EDIT:
I'm doing this to get the result. When I include that code the plugin does stops working. I cannot get the output string when I do this
hashvalue = hmac.sha2('key', 'message')

local LrLogger = import 'LrLogger'
myLogger = LrLogger('FlaggedFiles')
myLogger:enable(""logfile"")
myLogger:trace (""=========================================\n"") 
myLogger:trace ('Winter is coming, ' .. hashvalue)
myLogger:trace (""=========================================\n"")

and the Lightroom refuses to load the plugin and there is nothing on the log as well
Thank you very much for your help
","Spent quite some time trying to find a solution :-/
LrDigest is not documented, thanks Adobe!
Solution:
local LrDigest = import ""LrDigest""
LrDigest.HMAC.digest(string, 'SHA256', key)

","552","<lua><adobe><hmac><sha256><lightroom>","4","0","3","2015-10-14 13:55:09","","0","2","545697","","2014-06-24 23:43:40","2014-06-24 03:38:03",""
"28777582","Reading Certificate Data from Signed Executables with Multiple Signatures","Microsoft is moving away from SHA1. As a result many executables now have two or more signatures; one using a SHA1 digest for backward compatibility and one using a SHA256.
For example if you look at the properties of vstest.executionengine.exe from Visual Studio 2013 (look at the properties on Windows 8 or Server 2012) you'll see it has 3 different signatures from 3 different certificates.
I already have code that uses a combination of CryptQueryObject, CryptMsgGetParam, and .NET SignedCms, but it only sees 1 of the 3 signatures. There appears to be only one message with one signer.
I need to get the certificate information for all signatures. How are multiple signatures modeled - is it multiple messages, or multiple signers in a single message? Did Microsoft add new APIs or new flags to access multiple signatures?
","It turns out that Microsoft (sort of) hides subsequent signatures.  When adding another signature, the entire CMS structure is added as an unsigned attribute.
So for example a dual-signed Authenticode signature decoded as a .NET SignedCms will have one signer, and that SignerInfo will have a value in UnsignedAttributes.  If you take the attribute ASN RawData value and pass it to SignedCms.Decode, you get the second signature.
// decode inner signature    
signedCms2.Decode(signedCms1.SignerInfos[0].UnsignedAttributes[0].Values[0].RawData);

It also appears that instead of adding another attribute to the root signature signer, the attribute is added in the inner-most signers attributes.
Also note that not all attributes are inner signatures, I think you need to check for a proper Oid on the attribute.
Is suspect that this was the best way for Microsoft to keep backward compatibility.
","551","<digital-signature><sha1><sha256><cryptoapi><authenticode>","4","6","1","2015-05-08 22:10:14","","0","2","13302","","2015-02-28 08:32:59","2015-02-28 02:53:24",""
"27193461","SHA256 salt with PHP and MySQL - Insert error","I'm using the following code to salt and hash passwords in a MySQL database:
<?php
function make($string, $salt = '') {
    return hash('sha256', $string . $salt);
}
function salt($length) {
    return mcrypt_create_iv($length, MCRYPT_DEV_URANDOM);
}

$salt = salt(32);
$password = make('password', $salt);
?>

However when I attempt to insert the generated salt into the database, there are some cases where this error occurs:
You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'ÜöOòƒ·¡]ŽÖ', 1)' at line 1

I assume that is because of unrecognized characters being generated. What would be a solution for this?
","You're inserting raw binary garbage. That will naturally (and semi-randomly) contain SQL metachatacters, like a '. This means your query is vulnerable to sql injection attacks.
You don't show any of your actual PHP code, but you should either be using a prepared statement, or doing manual escaping, e.g.
$stmt = mysqli_prepare($conn, ""INSERT .... (password_hash) VALUES (?)"");
$stmt->execute(array($raw_hash));

or
$quoted = mysql_real_escape_string($raw_hash);
$sql = ""INSERT ... (password_hash) VALUES ('$quoted')"";

Alternatively, you could encode that hash string, e.g. use base64, so that the encoded hash becomes a relatively harmless string. But even then you should be using proper query construction techniques.
","550","<php><mysql><insert><salt><sha256>","0","3","1","2014-11-28 17:27:44","27193512","1","","","","","2014-11-28 17:23:26",""
"40643742","crypto-js trouble with index.html (Angular 2 project)","I used the following command to get crypto-js into my node_modules folder
npm install crypto-js

Then, after I had it downloaded, within my index.html file I use the following command so that I can call the CryptoJS.SHA256() method.
<html>
  <head>
    <script src=""node_modules/crypto-js/sha256""></script>
  </head>
</html>

(I left out the other script calls, meta and title tags)
However when I run my project using 'npm start', I get the following errors

What exactly does this mean? I am not sure how to solve something that is 'not found' even though it is where is should be. Am I maybe missing something else?
","Your using external javascript that is not exposed to angular.  Only the web dom is aware of the crypto js module. It looks like you just want to use SHA256.  I would just implement a type script version of the function and go from there.  Here is an example.
https://github.com/dchest/fast-sha256-js
","546","<html><angular><typescript><sha256><cryptojs>","0","0","1","2016-11-16 23:52:19","","0","","","","","2016-11-16 22:49:06",""
"39602039","SHA 256 in NodeJs","I am facing issue implementing this JAVA code in NodeJS
        MessageDigest md = MessageDigest.getInstance(""SHA-256"");
        md.update(val.getBytes());
        byte byteData[] = md.digest();

        StringBuffer sb = new StringBuffer();

        for (int i = 0; i < byteData.length; i++) {
            sb.append(
                Integer.toString(
                    (byteData[i] & 0xff) + 0x100, 16
                ).substring(1)
            );
        }

        return sb.toString();

This is not strictly SHA-256. I wouldd like to understand what different is happening here.
I understand the way to generate a SHA-256 in NodeJS is: 
crypto.createHash('sha256').update(message).digest('hex')
But in this case, it gives me a different result than the JAVA code.
Do I need to get the digest binary and then generate the hex in a way different than what digest(hex) does ?
","","545","<java><node.js><sha256>","1","","0","2016-09-20 19:20:19","","4","4","2921001","","2016-09-20 19:20:19","2016-09-20 19:09:54",""
"48306258","Hashfunction of a hex value not a string in crypto-js","Say I need to get the SHA-256 hash of 0xF0FD93 as a hex value not a string.
var SHA256 = require('crypto-js/sha256');
hash = SHA256(0xF0FD93);
console.log(hash.toString()); //4ea5c508a6566e76240543f8feb06fd457777be39549c4016436afda65d2330e

I should get a2ad9b3ba41abb6e4e4cafa6467efe65f58f0fb9a01b0f96c6548188ded27356 according to this http://extranet.cryptomathic.com/hashcalc/index.
edit I solved it:
var CryptoJS = require('crypto-js')

var message = CryptoJS.enc.Hex.parse('F0FD93');
var hash = CryptoJS.SHA256(message);
console.log(hash.toString()); // a2ad9b3ba41abb6e4e4cafa6467efe65f58f0fb9a01b0f96c6548188ded27356

var wrongMessage = ('F0FD93');
var wrongHash = CryptoJS.SHA256(wrongMessage);

console.log(wrongHash.toString()); //c55b21323979adf4f963998e272827739a86ddeb8afc85b4e5dea3cdef7274be

","","543","<javascript><sha256><hash-function>","2","","0","2018-01-17 18:32:36","","3","","9229824","","2018-01-17 18:32:36","2018-01-17 16:56:21",""
"23228209","Piping shasum to grep, but grep returning all lines of piped input, even ones that don't match","I'm trying to script the download of the node.js source and corresponding SHASUMS256.txt, checksum it, grep for OK, and return no results just exit code 0 on success using grep's -q flag:
wget http://nodejs.org/dist/latest/node-v0.10.26.tar.gz
wget http://nodejs.org/dist/latest/SHASUMS256.txt
sha256sum -c SHASUMS256.txt|grep -q OK

However, grep is returning a selection of the non-matching lines ""no such file or directory"" errors (though not all, confusingly):
> sha256sum -c SHASUMS256.txt|grep -q OK 
sha256sum: node-v0.10.26-darwin-x64.tar.gz: No such file or directory
sha256sum: node-v0.10.26-darwin-x86.tar.gz: No such file or directory
sha256sum: node-v0.10.26-linux-x64.tar.gz: No such file or directory
sha256sum: node-v0.10.26-linux-x86.tar.gz: No such file or directory
sha256sum: node-v0.10.26-sunos-x64.tar.gz: No such file or directory
sha256sum: node-v0.10.26-sunos-x86.tar.gz: No such file or directory
sha256sum: node-v0.10.26-x86.msi: No such file or directory
sha256sum: node-v0.10.26.pkg: No such file or directory
sha256sum: node.exe: No such file or directory

Any idea what the problem is here?  All I want from this script is return code 0 if the checksum succeeds (eg grep matches OK), or return code non-0 if it fails.
","
When you pipe the output of a command as input to other command, only stdout of first command is passed as stdin to the second command. 
The lines you see are sent by the sha256sum program to stderr.
You can verify that by sending stderr of sha256sum command also to grep by
sha256sum -c SHASUMS256.txt 2>&1 |grep -q OK


Hope that helps.
","543","<grep><checksum><sha256>","3","3","1","2014-04-22 21:19:12","23228588","0","2","284981","","2014-04-22 21:19:12","2014-04-22 19:10:19",""
"45260029","Bit Coin Hashing Algorithm","I, like many hopeless romantics in the online world, believe that I can successfully mine bit coins. Problems is, I can't get the basic algorithm correct for taking data from a previous mine block and creating the hash for the next mined block. I understand from several articles that we start with the current hash of a block, reverse and append the merkel root, add the nonce, then get the SHA256 hash of that string.
     static void Main(string[] args)
    {

        //get the hash of the current block
        string currentHash = 
        @""000000000000000000c5c04011f9a3fb5f46064fed7e06dcdae69024ed6484c1"";

        //get the merkel root
        string merkel = 
        @""f73a382814c51cbc5a59ab9817ac54c63decb7b3dac5b049df5213c029162bdf"";

        //reverese the merkel root
        char[] c = merkel.ToCharArray();
        Array.Reverse(c);
        merkel = new string(c);

        //get a hash object that returns SHA256
        Hash hash = new Hash();

        //get the nonce that mined the block
        uint nonce = 3546041956;

        //string together current hash, merkel root and the hex of the nonce
        string stringTotal = currentHash + merkel + nonce.ToString(""x2"");

        //calculate the SHA256 hash of the 
        string nextHash = hash.GetHash(stringTotal);

        Console.WriteLine(nextHash);

        Console.ReadKey();
    }

Anyone know the correct algorithm? I used this block https://blockchain.info/block-height/477065 and tried to calculate the hash for the next block.
","So I was curious about the same thing. This is what I came up with. It's obviously not production quality, but it gets the idea across and seems to work. 
It probably would have been much easier if it weren't for the reverse and swap logic that was practically undocumented everything I was looking.
Anyways, hope this helps. I found a bunch of help here if you're interested: http://trogers.net/2018/01/29/how-to-validate-a-bitcoin-blocks-proof-of-work-c/
class Program
{
    static void Main(string[] args)
    {
        // https://blockchain.info/block-height/286819
        int version = 2;
        string previousBlock = ""000000000000000117c80378b8da0e33559b5997f2ad55e2f7d18ec1975b9717"";
        string merkelRoot = ""871714dcbae6c8193a2bb9b2a69fe1c0440399f38d94b3a0f1b447275a29978a"";
        uint nonce = 856192328;
        long timestamp = new DateTimeOffset(DateTime.SpecifyKind(DateTime.Parse(""2014-02-20 04:57:25""), DateTimeKind.Utc)).ToUnixTimeSeconds();
        uint bits = 419520339;

        var header = new StringBuilder()
            .Append(ReverseAndSwap(version.ToString(""D8"")))
            .Append(ReverseAndSwap(previousBlock))
            .Append(ReverseAndSwap(merkelRoot))
            .Append(ReverseAndSwap(timestamp.ToString(""x2"")))
            .Append(ReverseAndSwap(bits.ToString(""x2"")))
            .Append(ReverseAndSwap(nonce.ToString(""x2"")))
            .ToString();

        Debug.Assert(string.CompareOrdinal(header, ""0200000017975b97c18ed1f7e255adf297599b55330edab87803c81701000000000000008a97295a2747b4f1a0b3948df3990344c0e19fa6b2b92b3a19c8e6badc141787358b0553535f011948750833"") == 0);

        var bytes = HexToBytes(header);

        SHA256 sha = new SHA256Managed();

        bytes = sha.ComputeHash(sha.ComputeHash(bytes)).Reverse().ToArray();

        var hash = BytesToHex(bytes);

        Debug.Assert(string.CompareOrdinal(hash, ""0000000000000000e067a478024addfecdc93628978aa52d91fabd4292982a50"") == 0);
    }

    private static string ReverseAndSwap(string input)
    {
        StringBuilder sb = new StringBuilder();

        for (var i = input.Length - 1; i >= 0; i--)
        {
            sb.Append(input[i - (i % 2 == 0 ? -1 : 1)]);
        }

        return sb.ToString();
    }

    public static byte[] HexToBytes(string hex)
    {
        byte[] hexAsBytes = new byte[hex.Length / 2];

        for (int index = 0; index < hexAsBytes.Length; index++)
        {
            string byteValue = hex.Substring(index * 2, 2);
            hexAsBytes[index] = byte.Parse(byteValue, NumberStyles.HexNumber, CultureInfo.InvariantCulture);
        }

        return hexAsBytes;
    }

    public static string BytesToHex(byte[] bytes)
    {
        var output = new StringBuilder(bytes.Length * 2);

        for (int i = 0; i < bytes.Length; ++i)
        {
            output.AppendFormat(""{0:x2}"", bytes[i]);
        }

        return output.ToString();
    }
}

","542","<c#><sha256>","2","0","1","2018-04-11 19:00:06","","13","1","","","","2017-07-22 23:01:29",""
"18286467","Why am I not getting the sha256 right?","I am using crypto++ library for some exercise. I am expecting the same output as from the sha256sum tool invoked from the shell.
// typedef unsigned char byte;
byte out[CryptoPP::SHA256::DIGESTSIZE];
byte in=65;  // 'A'
CryptoPP::SHA256().CalculateDigest(out, &in, 1);
for(int i=0; i < CryptoPP::SHA256::DIGESTSIZE; i++)
    std::cout << std::hex << (int)out[i];
std::cout << std::endl;

559aead08264d5795d399718cdd5abd49572e84fe55590eef31a88a08fdffd
$ echo A | sha256sum

06f961b802bc46ee168555f066d28f4f0e9afdf3f88174c1ee6f9de004fc30a0
Why are the two not equal?
","echo appends a newline, so you're comparing the hashes of different strings. Use printf instead:
$ printf 'A' | sha256sum
559aead08264d5795d3909718cdd05abd49572e84fe55590eef31a88a08fdffd  -
$ printf 'A\n' | sha256sum
06f961b802bc46ee168555f066d28f4f0e9afdf3f88174c1ee6f9de004fc30a0  - 

","541","<c++><hash><stdout><sha256><gnu-coreutils>","0","7","2","2017-12-16 17:12:35","18286495","0","","","","","2013-08-17 07:50:37",""
"18286467","Why am I not getting the sha256 right?","I am using crypto++ library for some exercise. I am expecting the same output as from the sha256sum tool invoked from the shell.
// typedef unsigned char byte;
byte out[CryptoPP::SHA256::DIGESTSIZE];
byte in=65;  // 'A'
CryptoPP::SHA256().CalculateDigest(out, &in, 1);
for(int i=0; i < CryptoPP::SHA256::DIGESTSIZE; i++)
    std::cout << std::hex << (int)out[i];
std::cout << std::endl;

559aead08264d5795d399718cdd5abd49572e84fe55590eef31a88a08fdffd
$ echo A | sha256sum

06f961b802bc46ee168555f066d28f4f0e9afdf3f88174c1ee6f9de004fc30a0
Why are the two not equal?
","In your command line, you're checksumming A + a line feed. 
If your unix version supports it, use echo -n to echo without adding the line feed;
$ echo -n A | sha256sum
559aead08264d5795d3909718cdd05abd49572e84fe55590eef31a88a08fdffd  -

","541","<c++><hash><stdout><sha256><gnu-coreutils>","0","6","2","2017-12-16 17:12:35","18286495","0","","","","","2013-08-17 07:50:37",""
"47678782","HmacSHA256 algorithm in Android API 23","I am trying to generate hash value in my Android app (API 23). I followed this link- https://developer.android.com/reference/javax/crypto/Mac.html and below code should work as per it.
Mac hmacSha256 = Mac.getInstance(""HmacSHA1"");

But this gives compile time error- 


java.security.NoSuchAlgorithmException

I searched and tried few solutions from across other Stackoverflow posts but they didn't work.
Tried this- MessageDigest digest = MessageDigest.getInstance(""SHA-256""); got same error.
My overall intention is to convert the below C# code in Java so I can use it in my Android app-
string GenerateAuthToken(string verb, string resourceType, string resourceId, string date, string key, string keyType, string tokenVersion)
{
    var hmacSha256 = new System.Security.Cryptography.HMACSHA256 { Key = Convert.FromBase64String(key) };

    verb = verb ?? """";
    resourceType = resourceType ?? """";
    resourceId = resourceId ?? """";

    string payLoad = string.Format(System.Globalization.CultureInfo.InvariantCulture, ""{0}\n{1}\n{2}\n{3}\n{4}\n"",
            verb.ToLowerInvariant(),
            resourceType.ToLowerInvariant(),
            resourceId,
            date.ToLowerInvariant(),
            """"
    );

    byte[] hashPayLoad = hmacSha256.ComputeHash(System.Text.Encoding.UTF8.GetBytes(payLoad));
    string signature = Convert.ToBase64String(hashPayLoad);

    return System.Web.HttpUtility.UrlEncode(String.Format(System.Globalization.CultureInfo.InvariantCulture, ""type={0}&ver={1}&sig={2}"",
        keyType,
        tokenVersion,
        signature));
}

So I am just going and converting each line manually step by step and stuck at this point. Any ideas I can make this work?
","You typed the algorithm incorrectly
It's HmacSHA256 not hmacSHA256
You need to be careful when choosing the algorithms because they're case sensitive.
From your snapshot I can see that you used
Mac hmacSHA256 = Mac.getInstance(""hmacSHA256"");

It's incorrect because you're trying to get the instance of hmacSHA256 witch does not exists!
The correct one would be
Mac hmacSHA256 = Mac.getInstance(""HmacSHA245"");

The first H should be on caps
","541","<java><c#><android><sha256>","-1","0","1","2017-12-06 17:34:12","","4","","5014099","","2017-12-06 17:07:37","2017-12-06 16:13:20",""
"34289094","Alternative for calculating sha256 to using deprecated openssl code","The SHA256_XXX family declared in /usr/include/openssl/sha.h has been deprecated in OS-X 10.7 and above. 
int SHA256_Init(SHA256_CTX *c) DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;
int SHA256_Update(SHA256_CTX *c, const void *data, size_t len) DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;
int SHA256_Final(unsigned char *md, SHA256_CTX *c) DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;
unsigned char *SHA256(const unsigned char *d, size_t n,unsigned char *md) DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;
void SHA256_Transform(SHA256_CTX *c, const unsigned char *data) DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;

Although it's currently working, I wonder what is the alternative for later OS X versions. 
","Currently approved technique for all digests is via EVP.
https://www.openssl.org/docs/manmaster/crypto/EVP_DigestInit.html#EXAMPLE
Exemplary function for SHA256 (from https://wiki.openssl.org/index.php/EVP_Message_Digests)
void digest_message(unsigned char *message, unsigned char **digest, unsigned int *digest_len)
{
    EVP_MD_CTX *mdctx;

    if((mdctx = EVP_MD_CTX_create()) == NULL)
        handleErrors();

    if(1 != EVP_DigestInit_ex(mdctx, EVP_sha256(), NULL))
        handleErrors();

    if(1 != EVP_DigestUpdate(mdctx, message, strlen(message)))
        handleErrors();

    if((*digest = (unsigned char *)OPENSSL_malloc(EVP_MD_size(EVP_sha256()))) == NULL)
        handleErrors();

    if(1 != EVP_DigestFinal_ex(mdctx, *digest, digest_len))
        handleErrors();

    EVP_MD_CTX_destroy(mdctx);
}

","540","<c++><c><macos><openssl><sha256>","3","3","2","2015-12-16 07:29:54","34289838","3","","608639","","2015-12-16 07:29:54","2015-12-15 12:17:32","2015-12-16 07:54:20"
"34289094","Alternative for calculating sha256 to using deprecated openssl code","The SHA256_XXX family declared in /usr/include/openssl/sha.h has been deprecated in OS-X 10.7 and above. 
int SHA256_Init(SHA256_CTX *c) DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;
int SHA256_Update(SHA256_CTX *c, const void *data, size_t len) DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;
int SHA256_Final(unsigned char *md, SHA256_CTX *c) DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;
unsigned char *SHA256(const unsigned char *d, size_t n,unsigned char *md) DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;
void SHA256_Transform(SHA256_CTX *c, const unsigned char *data) DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;

Although it's currently working, I wonder what is the alternative for later OS X versions. 
","Common Crypto supports SHA256 and other cryptographic methods and is available for OS X and iOS. Add Security.framework and include <CommonCrypto/CommonDigest.h>. Common Crypto is a ""C"" API.
","540","<c++><c><macos><openssl><sha256>","3","2","2","2015-12-16 07:29:54","34289838","3","","608639","","2015-12-16 07:29:54","2015-12-15 12:17:32","2015-12-16 07:54:20"
"50338392","How to: New order Binance API via RStudio","I am trying to create a new order via the Binance API using RStudio.
I found the Binance Official API Docs and figured out that I should use 
POST /api/v3/order (HMAC SHA256).

The following script doesn't work out for me:
url='https://api.binance.com/api/v3/account'

GET(url, 
    add_headers(""X-MBX-APIKEY""= *[my API key]*),
    query=list(""symbol""=""ETHBTC"", 
               ""side""=""BUY"", 
               ""type""=""MARKET"", 
               ""quantity""=1, 
               recvWindow=5000, 
               ""timestamp""=1499827319559, 
               ""signature""=**???**), 
    verbose())

Does anyone know what I'm doing wrong and how I can create an order via the Binance API using RSTUDIO and how I can create my signature?
","library(httr)

timestamp <-
  as.character(jsonlite::fromJSON(content(
    GET(""https://api.binance.com/api/v1/time""), ""text""
  ))$serverTime + 999)

query <-
  list(
    ""symbol"" = ""VENBTC"",
    ""side"" = ""BUY"",
    ""type"" = ""MARKET"",
    ""quantity"" = 1,
    ""recvWindow"" = 5000,
    ""timestamp"" = timestamp
  )

signature <-
  digest::hmac(
    key = ""*[my secret key]*"",
    object = paste(names(query), query, sep = ""="", collapse = ""&""),
    algo = ""sha256""
  )

POST(
  url,
  add_headers(""X-MBX-APIKEY"" = ""*[my API key]*""),
  query = c(query, signature = signature),
  verbose()
)

","539","<r><api><sha256><hmac><binance>","1","1","1","2018-05-18 16:33:12","50415056","13","","3982755","","2018-05-14 20:33:44","2018-05-14 20:17:10",""
"38847126","SHA256 Hash algorithm produces different results in iOS using Common Crypto and OpenSSL","Are the Hash functions different in Apple's Common Crypto and OpenSSL? I'm trying to generate SHA256 of the same string using the below two methods and both produce different results. Am I doing anything different? I am under the impression that the SHA256 algorithm is common across platforms and produce the same result in iOS, Android, Windows etc. 
NOTE: When I tried the same thing in Android using MessageDigest.getInstance(""SHA-256"") I got the same result as CommonCrypto Hash result but the OpenSSL result is different.
// Apple Common Crypto - SHA256
- (NSData *)sha256:(NSData *)data {
    unsigned char hashResult[CC_SHA256_DIGEST_LENGTH];
    if ( CC_SHA256([data bytes], (unsigned int)[data length], hashResult) ) {
        NSData *sha256 = [NSData dataWithBytes:hashResult length:CC_SHA256_DIGEST_LENGTH];
        return sha256;
    }   
}

// SRP OpenSSL - SHA256
- (NSData *)sha256_2:(NSData *)data {
    unsigned char hashResult[SHA256_DIGEST_LENGTH];
    unsigned char *bin = (unsigned char *) [data bytes];
    NSInteger length = sizeof(bin);
    [_srpAuth hashWrapper:SRP_SHA256 input:bin size:length output:hashResult];
    NSData *sha256 = [NSData dataWithBytes:hashResult length:SHA256_DIGEST_LENGTH];
    return sha256;
}

","NSInteger length = sizeof(bin);

Will give you the size of an unsigned char pointer - 4 bytes on a 32 bit device and 8 on a 64 bit.
What you want is
NSInteger length = data.length

as that will give you the number of bytes to be hashed
","538","<android><ios><hash><sha256><commoncrypto>","-1","2","1","2016-08-09 11:31:11","38848845","4","1","","","","2016-08-09 09:37:15",""
"39841363","ColdFusion hmac() returns different values with toBase64 and binaryEncode","I am attempting to use ColdFusion's hmac() function to calculate an HMAC value using binaryEncode(binaryObj,'Base64') instead of toBase64() since that function is deprecated. It works perfectly with toBase64() but not with binaryEncode(). The docs are not very informative. Can someone help me understand why I cannot get the same value using binaryEncode?
From what I understand, the hmac() function returns the results in hexadecimal format. binaryEncode() expects a binary value, so thehmac() results must be first converted from hex to binary, before it can be converted to base64.
<cfset string = ""1234567890"" />
<cfset secretKey = ""abcdefghijklmnopqrstuvwxyz"" />
<!--- Get Hex results from HMAC() --->
<cfset hmacHex = hmac(string,secretKey,'HMACSHA256') />
<!--- Decode the binary value from hex --->
<cfset hmacAsBinary = binaryDecode(hmacHex,'hex') />
<!--- Convert binary object to Base64 --->
<cfset hmacBase64 = binaryEncode(hmacAsBinary, 'base64') />
<cfoutput>
    <!--- incorrect hmac signature --->
    hmacBase64: #hmacBase64#<br>
    <!--- correct hmac signature --->
    toBase64: #toBase64(hmac(string,secretKey,'HMACSHA256'))#<br>
</cfoutput>

The results are: 
hmacBase64: VEVGNnqg9b0eURaDCsA4yIOz5c+QtoJqIPInEZOuRm4=
toBase64: NTQ0NTQ2MzY3QUEwRjVCRDFFNTExNjgzMEFDMDM4Qzg4M0IzRTVDRjkwQjY4MjZBMjBGMjI3MTE5M0FFNDY2RQ==

One thing I noticed is the results are much longer when using toBase64(). I can't seem to figure out why I can't use binaryEncode(). However, I would like to, since toBase64() is being deprecated. Any insight is much appreciated. Thanks!
","Update based on comments:
Well using ToBase64(Hmac(...)) is not the correct way to convert a hex string to base64 ;-) However, it sounds like the API requires something other than a straight conversion.  If so, just do what the ToBase64(hmac(...)) code is doing. ie Decode the hex string as UTF8 and re-encode it as base64: 
matchingResult = binaryEncode(charsetDecode(hmacHex, ""utf-8""), ""base64"")

Short answer:
The two methods are encoding totally different values. That is why the results do not match. The correct way to convert the hex string to base64 is using BinaryEncode/Decode().
Longer answer:

<!--- correct hmac signature --->
toBase64: #toBase64(hmac(string,secretKey,'HMACSHA256'))#<br>

Actually that is not the correct way to convert hex to base64. 
Hexadecimal and Base64 are just different ways of representing a binary value. In order to get the same results, the two methods need to start with the same binary. In this case, are actually encoding totally different values. Hence the difference in the results. 
With a hexadecimal string, each byte is represented by two characters. So the binary will be half the size of the original string. In the case of HMAC(HMACSHA256), the resulting hex string is 64 characters long. So the binary value should be 32 bytes. To obtain the correct binary value, the string must be decoded as hex:
original string length = #len(hmacHex)#
binary size = #arrayLen(binaryDecode(hmacHex, ""hex""))#

The problem with ToBase64 is that it decodes the string incorrectly. It treats the input as UTF8 and decodes the characters in the string individually. So the binary value is double the size it should be. Notice it is 64 bytes, instead of 32? That is why the final string is longer as well. 
UTF8 binary size = #arrayLen(charsetDecode(hmacHex, ""utf-8""))# 
ToBase64 binary size = #arrayLen(binaryDecode(toBase64(hmacHex), ""base64""))#

So again, the two methods produce different results because they are encoding totally different values. However, strictly speaking, only the first method is correct. To re-encode a hex string as base64 use binaryEncode/binaryDecode: 
correctResult = binaryEncode(binaryDecode(hmacHex, ""hex""), ""base64"")

","531","<coldfusion><binary><hex><sha256><hmac>","1","4","1","2019-09-07 23:48:47","39841764","0","","-1","","2019-09-07 23:48:47","2016-10-03 22:25:48",""
"46429683","PHP alternative of ""PBKDF2WithHmacSHA256"" from Java","I need to generate in PHP the same hash as as the PBKDF2WithHmacSHA256 algorithm generates in Java.
I did some research and found two functions that seem to be connected to PBKDF2 and HMAC:

hash_pbkdf2 - http://php.net/manual/en/function.hash-pbkdf2.php
hash_hmac - http://php.net/manual/en/function.hash-hmac.php

What PHP functions should I use? Is it even possible with native PHP functions?
Edit #1
My Java code, the same result I need achieve in PHP
public static byte[] derivateKey(char[] password, byte[] salt, int iterations, int keyLengthBits) {
        try {
            SecretKeyFactory skf = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA256"");
            PBEKeySpec spec = new PBEKeySpec(password, salt, iterations, keyLengthBits);
            SecretKey key = skf.generateSecret(spec);
            byte[] res = key.getEncoded();
            return res;

        } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
            throw new IllegalStateException(""Could not create hash"", e);
        }
    }

","The Java code you've provided is basically hash_pbkdf2(). You just need to pass the correct params:
function derivateKey($password, $salt, $iterations, $keyLengthBits)
{
    return hash_pbkdf2(
        'sha256',
        $password,
        $salt,
        $iterations,
        $keyLengthBits / 8,
        true
    );
}

Obviously, PHP's hash_pbkdf2() accepts the hash algorithm as a parameter, but the potentially tricky differences are these:

It doesn't comply with RFC 2898 in that its length is applied after hex-encoding, so that last parameter must be set to true to make it consistent with the spec.
It accepts the output length in bytes instead of bits (hence why we divide by 8 above).

The only thing I'm not sure about is what key.getEncoded() does in your sample code ... there's no encoding algorithm specified anywhere.
I found some docs suggesting it is supposed to be RAW, so the example I'm providing should match it. If it doesn't, you'll have to encode it yourself.
","529","<php><sha256><hmac><pbkdf2>","0","2","1","2017-09-27 08:44:52","46430311","4","","1315357","","2017-09-26 14:59:02","2017-09-26 14:50:14",""
"41937369","GDAX signature example","I just can’t seem to get the signature right and I think some sample data would help me diagnose the problem. Can anyone offer some sample data to help me “calibrate” and make sure my code is functioning properly?

prehash string
base64-encoded secret
base64-decoded secret
sha256 HMAC using the base64-decoded secret key on the prehash string
base64-encoded result

I am working in VBA.  Any additional tips/advice would be appreciated.
","The answer is no one will provide you with the sample data you are requesting as that would mean they in a sense would be sharing their own private passphrase, API key and secret with you.  

go to gdax.com and click on API.
Generate copy the generated passphrase (do not lose this)
Go thru remaining steps to generate API key and secret (do not lose this)
Use the API reference to create authentication requests (signing, HMAC, Etc.)
Consider an easier way to interact with REST API than VBA.

","527","<base64><sha256><hmac>","-1","0","2","2018-01-30 06:41:12","","1","","3047063","","2017-02-01 14:39:18","2017-01-30 13:42:36",""
"41937369","GDAX signature example","I just can’t seem to get the signature right and I think some sample data would help me diagnose the problem. Can anyone offer some sample data to help me “calibrate” and make sure my code is functioning properly?

prehash string
base64-encoded secret
base64-decoded secret
sha256 HMAC using the base64-decoded secret key on the prehash string
base64-encoded result

I am working in VBA.  Any additional tips/advice would be appreciated.
","Sample data for ""calibration"" of your software can use the following inputs:

timestamp: 1517266319.000
method: GET
requestpath: /accounts
secret: D1/0wNj3wsKg8XcTs4KCfZUVzsHXIOW7w38Moj+YximHA5VQS7zAG47bgNSNGIGtFtYQ0vei2JiSPvX3JkBsA==

The correct signature for the above inputs is:

jQxycBtZQKEWUZjtIaFnD1zoUDQebGeHmoIW3KHvmtg=

This is confirmed by both the NodeJS and Python code samples.
","527","<base64><sha256><hmac>","-1","0","2","2018-01-30 06:41:12","","1","","3047063","","2017-02-01 14:39:18","2017-01-30 13:42:36",""
"52634129","Hmac-SHA256 not returning expected hash","I realize there are a ton of questions on here about this, but after looking through a good portion of them I haven't really seen anything addressing my issue.
Using SHA256 on the following input I get the correct output:
var canonString = 'GET\n'+
                    '/\n'+
                    'Action=ListUsers&Version=2010-05-08\n'+
                    'content-type:application/x-www-form-urlencoded; charset=utf-8\n'+
                    'host:iam.amazonaws.com\n'+
                    'x-amz-date:20150830T123600Z\n'+
                    '\n'+
                    'content-type;host;x-amz-date\n'+
                    'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855';

console.log(CryptoJS.SHA256(canonString).toString()); //returns the expected value of f536975d06c0309214f805bb90ccff089219ecd68b2577efef23edd43b7e1a59

So SHA256 is working properly on that. Similarly, using the Hmac-SHA256 on the following input I get the correct response:
var kDate = CryptoJS.HmacSHA256(""20150830"", ""AWS4wJalrXUtnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY"");
var kRegion = CryptoJS.HmacSHA256('us-east-1', kDate);
var kService = CryptoJS.HmacSHA256('iam', kRegion);
var kSigning = CryptoJS.HmacSHA256(""aws4_request"", kService);

console.log(kSigning.toString()); //returns the expected value of c4afb1cc5771d871763a393e44b703571b55cc28424d1a5e86da6ed3c154a4b9

So this Hmac-SHA256 function works correctly on this input. However, on the following input, Hmac-SHA256 DOES NOT return the expected output.
var stringToSign = 'AWS4-HMAC-SHA256\n'+
                '20150830T123600Z\n'+
                '20150830/us-east-1/iam/aws4_request\n'+
                CryptoJS.SHA256(canonString).toString();

CryptoJS.HmacSHA256(kSigning.toString(), stringToSign); //Returns 8a96b6691875490d30d05731cc9aa26be1fd64cf611ed929753b6498075aa886
//Expected value is 5d672d79c15b13162d9279b0855cfba6789a8edb4c82c400e06b5924a6f2b5d7
//Trying in opposite order just in case
CryptoJS.HmacSHA256(stringToSign, kSigning.toString()); //Returns fe52b221b5173b501c9863cec59554224072ca34c1c827ec5fb8a257f97637b1
//Still not expected value which is 5d672d79c15b13162d9279b0855cfba6789a8edb4c82c400e06b5924a6f2b5d7

So, something is clearly going wrong with my stringToSign, and I don't know what it is. I was thinking that the newline character is being interpreted as two different characters and not just a single character. However, escaping it like '\\n' did not fix it either! I am at a loss here. Here are the two docs I've been following (doc1 doc2). Does anyone know why I can't get the expected output?
","Remember that the sha256 digest is a byte sequence: it is not a ""normal string"". It looks like CryptoJS is converting the true sha256 digest to something else for convenience, so make it not do that and you're good to go.
Using Node's crypto library (which is a built-in API) rather than CryptoJS (which has absolutely terrible documentation, so using it is kind of questionable):
const crypto = require(""crypto"");

function HMAC(key, text) {
    return crypto.createHmac(""sha256"", key).update(text).digest();
}

And then we form the canonical hash:
const canonString = [
    'GET',
    '/',
    'Action=ListUsers&Version=2010-05-08',
    'content-type:application/x-www-form-urlencoded; charset=utf-8',
    'host:iam.amazonaws.com',
    'x-amz-date:20150830T123600Z',
    '',
    'content-type;host;x-amz-date',
    'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'
].join('\n');

// note: plain hash, not a secret-key-seeded hash
const canonHash = crypto.createHash(""sha256"").update(canonString).digest();
console.log(""Canonical hash is   :"", canonHash.toString('hex'));

This yields f536975d06c0309214f805bb90ccff089219ecd68b2577efef23edd43b7e1a59. We then continue:
const kSecret = ""wJalrXUtnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY"";
const kDate = HMAC(""AWS4"" + kSecret,""20150830"");
const kRegion = HMAC(kDate,""us-east-1"");
const kService = HMAC(kRegion,""iam"");
const kSigning = HMAC(kService,""aws4_request"");
console.log(""kSigning hash is    :"", kSigning.toString('hex'));

Which yields c4afb1cc5771d871763a393e44b703571b55cc28424d1a5e86da6ed3c154a4b9: note that we do not do any hex conversion, because the hex digest is not the sha256 digest, it's a completely different string. We only convert to hex string to make the digest legible in the console log.
Then finally:
const stringToSign = [
    'AWS4-HMAC-SHA256',
    '20150830T123600Z',
    '20150830/us-east-1/iam/aws4_request',
    canonHash.toString('hex')
].join('\n');

const signed = HMAC(kSigning, stringToSign);
console.log(""Final signed hash is:"", signed.toString('hex'));

Which yields 5d672d79c15b13162d9279b0855cfba6789a8edb4c82c400e06b5924a6f2b5d7. Note that here, we had to turn the canonical hash into a hexadecimal string, as per the instructions in the pages you link to, but we do not touch the kSigning digest, that has to stay a real sha256 byte string.
","526","<javascript><amazon-web-services><hash><sha256><hmac>","1","1","1","2018-10-04 17:15:09","52635721","3","0","5425667","","2018-10-04 17:15:09","2018-10-03 19:10:13",""
"47710926","eGHL Payment: Hash value mismatched. if passing multiple parameter in url with '&'","I am implementing eGHL payment method with PHP. I have a found a weird error on their api or may be in PHP.
I am generating a hash using hash().
<?php   $callback = 'http://localhost/test/eghl.php?query=abce123';

        $orderid = '2512718999';
        $amount = '81.50';
        $currency = 'MYR';
        $merchant = 'IDNOXXXXX';
        $password = 'PASSXXXXX';
        $ip = '127.0.0.1';
        $timeout = '600';

        $string = $password . $merchant . $orderid . $callback . $amount . $currency . $ip . $timeout;

        $hash = hash('sha256', $string);
?>

then put these values into form
<form action=""https://test2pay.ghl.com/IPGSG/Payment.aspx"" method=""post"" name=""adminForm"" enctype=""multipart/form-data"">


            <p>
                <strong>eGHL Payments </strong>
            </p>

            <input name=""TransactionType"" value=""SALE"" type=""hidden""> 
            <input name=""PymtMethod"" value=""ANY"" type=""hidden""> 
            <input name=""ServiceID"" value=""<?php echo $merchant; ?>"" type=""hidden""> 
            <input name=""PaymentID"" value=""<?php echo $orderid; ?>"" type=""hidden"">
            <input name=""OrderNumber"" value=""<?php echo $orderid; ?>"" type=""hidden"">
            <input name=""PaymentDesc"" value=""Demo - #<?php echo $orderid; ?>"" type=""hidden""> 
            <input name=""MerchantReturnURL"" value=""<?php echo $callback; ?>"" type=""hidden"">
            <input name=""Amount"" value=""<?php echo $amount; ?>"" type=""hidden""> 
            <input name=""CurrencyCode"" value=""<?php echo $currency; ?>"" type=""hidden""> 
            <input name=""CustIP"" value=""<?php echo $ip; ?>"" type=""hidden""> 
            <input name=""CustName"" value=""Suraj Mishra"" type=""hidden""> 
            <input name=""CustEmail"" value=""demo@example.com"" type=""hidden""> 
            <input name=""CustPhone"" value=""9876543210"" type=""hidden""> 
            <input name=""PageTimeout"" value=""<?php echo $timeout; ?>"" type=""hidden""> 
            <input name=""HashValue"" value=""<?php echo $hash; ?>"" type=""hidden""> 
            <input class=""k2store_checkout_button btn btn-primary"" value=""Click Here to Complete Order"" type=""submit"">
            <input name=""order_id"" value=""1512718995"" type=""hidden"">
            <input name=""orderpayment_id"" value=""53"" type=""hidden"">
            <input name=""orderpayment_type"" value=""payment_eghl"" type=""hidden"">
            <input name=""task"" value=""confirmPayment"" type=""hidden"">
          <!-- I am making a plugin for k2Store in joomla so i need to use view & task parameters too or do you know any better way ? !-->
        </form>

Everything till fine yet but the error comes when i add some more parameters in $callback url

http://localhost/test/eghl.php?query=abce123&another=value123
Then eGHL getting this error response Hash value mismatched.

Array
(
    [query] => abce123
    [test] => value
    [TransactionType] => SALE
    [PymtMethod] => CC
    [ServiceID] => IDNOXXXXX
    [PaymentID] => 2512718999
    [OrderNumber] => 2512718999
    [Amount] => 81.50
    [CurrencyCode] => MYR
    [TxnID] => 
    [TxnStatus] => 1
    [Param6] => 
    [Param7] => 
    [TxnMessage] => Hash value mismatched.
    [HashValue] => 1fff3118058ee7c87d70cd0b43b0f8a018ffa1c88bcf0951c08ff6606219e775
    [HashValue2] => 7516c7fd788d36a6bae8a10b57b647c6f79e30f3f10dc387b6dd4c4650a11341
)

I have tried urlencode but not helpful in this case I need it because I have to build my callback url in following format required for work with k2Store Plugin _postpayment dispatcher.
http://localhost/joomla/index.php?option=com_k2store&view=checkout&task=confirmPayment&orderpayment_type=payment_eghl

if i removed & from $callback its give me successful response like this 
[Amount] => 81.50
[CurrencyCode] => MYR
[HashValue] => 7c9a56fee7f7f5c16af4f3b5075e4d836e9ae1a1d9dacb96aea5349222be5f7d
[HashValue2] => 333eb4135c2b94330feca670c0c0815f038e4da3ed571e2daf7f462b4ba44d02
[TxnID] => sit00000000002512728991
[IssuingBank] => HostSim
[TxnStatus] => 0
[AuthCode] => sit000
[BankRefNo] => sit00000000002512728991
[TokenType] => OCP
[Token] => xTyQRgpPE2bZtv96KeBQtw==
[RespTime] => 2017-12-08 20:39:49
[TxnMessage] => Transaction Successful

Any help would be appreciated and most welcome
","You need to replace & with ; in your URL
","524","<php><hash><joomla><payment-gateway><sha256>","1","1","1","2018-03-23 02:22:52","49441426","15","1","817493","","2017-12-08 12:41:46","2017-12-08 09:07:12",""
"49907259","Objective c RSA with OAEP padding sha256 prior ios 10","I am working on an encryption method in the iPhone with the RSA encryption method, so far i could achieve getting the encryption string with this method, the string is successfully decrypted by the server.
SecKeyRef keyRef = [self addPublicKey:pubKey];

SecKeyAlgorithm algorithm = kSecKeyAlgorithmRSAEncryptionOAEPSHA256;

if (!keyRef) {
    return nil;
}

BOOL canEncrypt =  SecKeyIsAlgorithmSupported(keyRef, kSecKeyOperationTypeEncrypt, algorithm);

if (canEncrypt) {
    CFErrorRef error = NULL;
    NSData *encryptedData = (NSData *)CFBridgingRelease(
                                                        SecKeyCreateEncryptedData(keyRef, algorithm, (__bridge CFDataRef) content, &error)
    );

    if (encryptedData) {
        return encryptedData;
    }else{
        NSError *err = CFBridgingRelease(error);
        NSLog(@""Ocurrió un error %@"", err.localizedDescription);
        return nil;
    }
}

This method works for ios 10 and newer, what i need is to know how to set the algorithm in prior ios versions, my code is the following
SecKeyRef keyRef = [self addPublicKey:pubKey];
if (!keyRef) {
    return nil;
}

size_t cipherBufferSize = SecKeyGetBlockSize(keyRef);
uint8_t *cipherBuffer = malloc(cipherBufferSize * sizeof(uint8_t));
memset((void *)cipherBuffer, 0*0, cipherBufferSize);

NSData *plainTextBytes = content;
size_t blockSize = cipherBufferSize - 11;
size_t blockCount = (size_t)ceil([plainTextBytes length] / (double)blockSize);

NSMutableData *encryptedData = [NSMutableData dataWithCapacity:0];

for (int i=0; i<blockCount; i++) {

    int bufferSize = (int)MIN(blockSize,[plainTextBytes length] - i * blockSize);
    NSData *buffer = [plainTextBytes subdataWithRange:NSMakeRange(i * blockSize, bufferSize)];
    OSStatus status = SecKeyEncrypt(keyRef,
                                    kSecPaddingOAEP,
                                    (const uint8_t *)[buffer bytes],
                                    [buffer length],
                                    cipherBuffer,
                                    &cipherBufferSize);

    if (status == noErr){
        NSData *encryptedBytes = [NSData dataWithBytes:(const void *)cipherBuffer length:cipherBufferSize];
        [encryptedData appendData:encryptedBytes];

    }else{

        if (cipherBuffer) {
            free(cipherBuffer);
        }
        return nil;
    }
}
if (cipherBuffer) free(cipherBuffer);

So far i can see that in the version of ios 10 you can set the algorithm with this line
SecKeyAlgorithm algorithm = kSecKeyAlgorithmRSAEncryptionOAEPSHA256;

my question is, how do i get that algorithm in the early version of ios, the second code i post can't be decrypted.
Thanks for your help
","If you are using OAEP padding with SecKeyEncrypt, you can only use kSecPaddingOAEP, which is SHA1. Unfortunately you cannot use OAEP SHA256 with SecKeyEncrypt.
","523","<ios><encryption><rsa><sha256>","4","0","1","2018-09-28 16:06:13","","0","1","","","","2018-04-18 19:06:03",""
"32845083","how do i create a sha256 hash of a file(jpeg,pdf and tiff) using objective-c","i used the following code that i took from here.
- (NSData *)sha256:(NSData *)data {

unsigned char hash[CC_SHA256_DIGEST_LENGTH];

if ( CC_SHA256([data bytes], [data length], hash) ) {

    NSData *sha256 = [NSData dataWithBytes:hash length:CC_SHA256_DIGEST_LENGTH];

    return sha256;
}
return nil;
}

NSData *imageHash=[self sha256:imageData];

imageHashtag =  [imageHash base64EncodedStringWithOptions:NSDataBase64Encoding64CharacterLineLength];

I am having some problems with this though- the hash being created includes / and = that are not supposed to be there.
Can someone help me figure out the mistake i am making here? and how can i solve it?
edit: I found the possible problem- i was converting the sha hash that was an base64 encoded data back into another base64string.
but when i used the following code to convert the hashdata into string, i only get nil.
so can someone help me with converting the sha hash into a string?
imageHashtag = [NSString stringWithUTF8String:[imageHash bytes]];

the imagehash does have 32 bits of data, but imagehashtag is nil.
","we added the following code to solve the problem:
    NSString *hash=[sha256 description];
    hash = [hash stringByReplacingOccurrencesOfString:@"" "" withString:@""""];
    hash = [hash stringByReplacingOccurrencesOfString:@""<"" withString:@""""];
    hash = [hash stringByReplacingOccurrencesOfString:@"">"" withString:@""""];

    return hash;

to solve our problem.
","522","<ios><objective-c><sha256>","1","1","1","2015-10-08 10:41:02","33013475","0","","-1","","2017-05-23 12:24:08","2015-09-29 13:18:52",""
"29973642","sha256 wrong hash in contiki os","I found an implementation of SHA256 on the net. It consists of a single file sha256.c, I've tested the function successfully on Linux.
Here's the link for the file: http://bradconte.com/sha256_c
When I try to use it in contiki, the output is not right. 
Here's a piece of the code :
unsigned char text1[]={""sallam""}, hash[32];
int idx;
SHA256_CTX ctx;
sha256_init(&ctx);
sha256_update(&ctx, text1, strlen(text1));
sha256_final(&ctx, hash);
print_hash(hash);

Here's the function I use to print the hash:
void print_hash(unsigned char hash[])
{
    int idx;
    for (idx=0; idx < 32; idx++)
       printf(""%02x"",hash[idx]);
    printf(""\n"");
}

I've already tried to change the format ouptut to %x but it didn't help.
I think it has something to do with little-endian vs big-endian (endianness) issues.
","The SHA256 library you're using does not handle non-32 bit platforms properly. It fails in Contiki since for MSP430 platforms the size of int is 16 bits, rather than 32 bits that the authors implicitly assumes.
The line 4 in file sha256.c:
#define uint unsigned int // 32-bit word

should be changed to:
#define uint uint32_t // 32-bit word

Make sure to #include <stdint.h> before this line to get the proper platform-independent typedef of uint32_t.
","522","<c><sha256><contiki>","1","3","1","2017-06-28 06:32:58","","5","","2435820","","2015-05-01 10:41:38","2015-04-30 16:58:50",""
"20966076","Amazon Signature Signing Process Canonical Request Encryption Issue","My issue is with steps 6, 7, and 8 on this page: http://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html
Steps 6 and 7 are easy to follow.  For illustration purposes, you can use a free generator: http://hash.online-convert.com/sha256-generator
Action=ListUsers&Version=2010-05-08 converts to b6359072c78d70ebee1e81adcbab4f01bf2c23245fa365ef83fe8f1f955085e2, just like it says it will.  But on step 8, in which it says to use the same algorithm,
    POST
/

content-type:application/x-www-form-urlencoded; charset=utf-8
host:iam.amazonaws.com
x-amz-date:20110909T233600Z

content-type;host;x-amz-date
b6359072c78d70ebee1e81adcbab4f01bf2c23245fa365ef83fe8f1f955085e2

does not convert to 3511de7e95d28ecd39e9513b642aee07e54f4941150d8df8bf94b328ef7e55e2 at all.  Rather, I get 8b483975a604a39ca8882bc11bc0101df17c9ecc64a96206e504babc614fcb37.  The example is very unclear to me.  I'm likely interpreting it incorrectly, but how?
","I managed to run this down - turns out that my canonical header was line-separated by \r\n rather than just \n. I changed from a stringbuilder to just concatenated strings separated with \n an it worked fine.
","521","<encryption><amazon><amazon-dynamodb><sha256><canonicalization>","2","1","2","2014-09-24 07:10:06","","2","","3015044","","2014-01-07 08:10:05","2014-01-07 07:20:21",""
"20966076","Amazon Signature Signing Process Canonical Request Encryption Issue","My issue is with steps 6, 7, and 8 on this page: http://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html
Steps 6 and 7 are easy to follow.  For illustration purposes, you can use a free generator: http://hash.online-convert.com/sha256-generator
Action=ListUsers&Version=2010-05-08 converts to b6359072c78d70ebee1e81adcbab4f01bf2c23245fa365ef83fe8f1f955085e2, just like it says it will.  But on step 8, in which it says to use the same algorithm,
    POST
/

content-type:application/x-www-form-urlencoded; charset=utf-8
host:iam.amazonaws.com
x-amz-date:20110909T233600Z

content-type;host;x-amz-date
b6359072c78d70ebee1e81adcbab4f01bf2c23245fa365ef83fe8f1f955085e2

does not convert to 3511de7e95d28ecd39e9513b642aee07e54f4941150d8df8bf94b328ef7e55e2 at all.  Rather, I get 8b483975a604a39ca8882bc11bc0101df17c9ecc64a96206e504babc614fcb37.  The example is very unclear to me.  I'm likely interpreting it incorrectly, but how?
","I have met the same problem here.
After trying, the reason is \r\n rather than \n too.
I solved it by replacing \r\n with \n, and upload the whole file to compute hash string instead of copy-paste!
Hope this information helps you!
","521","<encryption><amazon><amazon-dynamodb><sha256><canonicalization>","2","0","2","2014-09-24 07:10:06","","2","","3015044","","2014-01-07 08:10:05","2014-01-07 07:20:21",""
"32384849","Azure REST API - Server failed to authenticate","I'm creating Windows Phone 8.1 Store App with ability to upload some blobs into Azure Storage. I cannot use WindowsAzure.Storage lib (very weird), so I'm trying to use REST. I cannot figure out, what's wrong.
try
{
    string time = DateTime.Now.ToString(""R"", System.Globalization.CultureInfo.InvariantCulture);
    string tosign = ""GET\n"" +
                        ""\n"" +  //Content-Encoding
                        ""\n"" +  //Content-Language
                        ""0\n"" +  //Content-Length
                        ""\n"" +  //Content-MD5
                        ""\n"" +  //Content-Type
                        ""\n"" +  //Date
                        ""\n"" +  //If-modified-since
                        ""\n"" +  //If-match
                        ""\n"" +  //If-none-match
                        ""\n"" +  //If-unmodified-since
                        ""\n"" +  //Range
                        ""x-ms-date:"" + time + ""\nx-ms-version:2015-02-21\n"" +   //CanonicalizedHeaders
                        ""/storage_name/\ncomp:list"";    //CanonicalizedResource

    string hashKey = ""DHpNuYG5MXhamfbKmFPClUlNi38QiM2uqIqz07pgvpv2gmXJRwxaMlcV05pFCYsrelGYKPed9QphyJ/YnUrh5w==""; //Primary access key

    MacAlgorithmProvider macAlgorithmProvider = MacAlgorithmProvider.OpenAlgorithm(MacAlgorithmNames.HmacSha256);
    var messageBuffer = CryptographicBuffer.ConvertStringToBinary(tosign, BinaryStringEncoding.Utf8);
    IBuffer keyBuffer = CryptographicBuffer.ConvertStringToBinary(hashKey, BinaryStringEncoding.Utf8);
    CryptographicKey hmacKey = macAlgorithmProvider.CreateKey(keyBuffer);
    IBuffer signedMessage = CryptographicEngine.Sign(hmacKey, messageBuffer);
    string hashedString = CryptographicBuffer.EncodeToBase64String(signedMessage);

    var client = new HttpClient();
    Uri uri = new Uri(""https://storage_name.blob.core.windows.net/?comp=list"");
    client.DefaultRequestHeaders.Add(""x-ms-date"", time);
    client.DefaultRequestHeaders.Add(""x-ms-version"", ""2015-02-21"");
    client.DefaultRequestHeaders.Add(""Authorization"", ""SharedKey storage_name:"" + hashedString);
    var response = await client.GetAsync(uri);
}
catch(Exception ex)
{
    Debug.WriteLine(ex.ToString());
}

Error: Server failed to authenticate the request. Make sure the value of Authorization header is formed correctly including the signature.
How I can make it work?
","Your cryptography code is awry. :-)
Code Samples
What follows are working code samples that ""call the HMAC-SHA256 algorithm on the UTF-8-encoded signature string and encode the result as Base64."" In the below samples, the hashKey parameter is the ""Primary Access Key"" from Azure and the toSign parameter is the ""Signature String"" from the docs.
Encoding the Signature on Windows Phone 8.1
On Windows Phone 8.1 we use the Windows.Security.Cryptography namespace like this:
public string GetEncodedSignature(string toSign, string hashKey)
{
    // UTF-8-encoded signature string
    var utf8 = BinaryStringEncoding.Utf8;
    var msgBuffer = CryptographicBuffer.ConvertStringToBinary(toSign, utf8);

    // primary access key
    // note the use of DecodeFromBase64String
    var keyBuffer = CryptographicBuffer.DecodeFromBase64String(hashKey);

    // make the HMAC-SHA256 algorithm
    var alg = MacAlgorithmNames.HmacSha256;
    var objMacProv = MacAlgorithmProvider.OpenAlgorithm(alg);
    CryptographicHash hash = objMacProv.CreateHash(keyBuffer);

    // call the HMAC-SHA256 algorithm
    hash.Append(msgBuffer);
    IBuffer hashMsg = hash.GetValueAndReset();

    // retrieve the result!
    var result = CryptographicBuffer.EncodeToBase64String(hashMsg);

    return result;
}

Encoding the Signature in .NET
I also created an example for .NET that uses the System.Security.Cryptography namespace.
public static string GetEncodedSignature(string toSign, string hashKey)
{
    byte[] bytes;
    byte[] unicodeKey = Convert.FromBase64String(hashKey);
    var utf8encodedString = Encoding.UTF8.GetBytes(toSign);
    using (var hmac = new HMACSHA256(unicodeKey))
    {
        bytes = hmac.ComputeHash(utf8encodedString);
    }

    var signature = Convert.ToBase64String(bytes);
    return signature;
}

Both code samples produce the same encoded signature when given the same inputs. You can see one of them in more detail at this Fiddle that generates the HTTP Request.
See Also
MSDN Article Authentication for the Azure Storage Services
","520","<c#><azure><windows-runtime><windows-phone-8.1><sha256>","4","3","2","2016-05-20 15:20:48","","1","1","41956","","2015-09-04 03:57:06","2015-09-03 20:27:12",""
"32384849","Azure REST API - Server failed to authenticate","I'm creating Windows Phone 8.1 Store App with ability to upload some blobs into Azure Storage. I cannot use WindowsAzure.Storage lib (very weird), so I'm trying to use REST. I cannot figure out, what's wrong.
try
{
    string time = DateTime.Now.ToString(""R"", System.Globalization.CultureInfo.InvariantCulture);
    string tosign = ""GET\n"" +
                        ""\n"" +  //Content-Encoding
                        ""\n"" +  //Content-Language
                        ""0\n"" +  //Content-Length
                        ""\n"" +  //Content-MD5
                        ""\n"" +  //Content-Type
                        ""\n"" +  //Date
                        ""\n"" +  //If-modified-since
                        ""\n"" +  //If-match
                        ""\n"" +  //If-none-match
                        ""\n"" +  //If-unmodified-since
                        ""\n"" +  //Range
                        ""x-ms-date:"" + time + ""\nx-ms-version:2015-02-21\n"" +   //CanonicalizedHeaders
                        ""/storage_name/\ncomp:list"";    //CanonicalizedResource

    string hashKey = ""DHpNuYG5MXhamfbKmFPClUlNi38QiM2uqIqz07pgvpv2gmXJRwxaMlcV05pFCYsrelGYKPed9QphyJ/YnUrh5w==""; //Primary access key

    MacAlgorithmProvider macAlgorithmProvider = MacAlgorithmProvider.OpenAlgorithm(MacAlgorithmNames.HmacSha256);
    var messageBuffer = CryptographicBuffer.ConvertStringToBinary(tosign, BinaryStringEncoding.Utf8);
    IBuffer keyBuffer = CryptographicBuffer.ConvertStringToBinary(hashKey, BinaryStringEncoding.Utf8);
    CryptographicKey hmacKey = macAlgorithmProvider.CreateKey(keyBuffer);
    IBuffer signedMessage = CryptographicEngine.Sign(hmacKey, messageBuffer);
    string hashedString = CryptographicBuffer.EncodeToBase64String(signedMessage);

    var client = new HttpClient();
    Uri uri = new Uri(""https://storage_name.blob.core.windows.net/?comp=list"");
    client.DefaultRequestHeaders.Add(""x-ms-date"", time);
    client.DefaultRequestHeaders.Add(""x-ms-version"", ""2015-02-21"");
    client.DefaultRequestHeaders.Add(""Authorization"", ""SharedKey storage_name:"" + hashedString);
    var response = await client.GetAsync(uri);
}
catch(Exception ex)
{
    Debug.WriteLine(ex.ToString());
}

Error: Server failed to authenticate the request. Make sure the value of Authorization header is formed correctly including the signature.
How I can make it work?
","Probably you've already worked this out but if not or for anyone else, I've just had the same issue and for me what fixed it is changing the Content-Length to ""\n"" (instead of ""0\n""). From version 2015-02-21 and later you don't need to specify the length.
try
{
    string time = DateTime.Now.ToString(""R"", System.Globalization.CultureInfo.InvariantCulture);
    string tosign = ""GET\n"" +
                        ""\n"" +  //Content-Encoding
                        ""\n"" +  //Content-Language
                        ""\n"" +  //Content-Length
                        ""\n"" +  //Content-MD5
                        ""\n"" +  //Content-Type
                        ""\n"" +  //Date
                        ""\n"" +  //If-modified-since
                        ""\n"" +  //If-match
                        ""\n"" +  //If-none-match
                        ""\n"" +  //If-unmodified-since
                        ""\n"" +  //Range
                        ""x-ms-date:"" + time + ""\nx-ms-version:2015-02-21\n"" +   //CanonicalizedHeaders
                        ""/storage_name/\ncomp:list"";    //CanonicalizedResource

    string hashKey = ""DHpNuYG5MXhamfbKmFPClUlNi38QiM2uqIqz07pgvpv2gmXJRwxaMlcV05pFCYsrelGYKPed9QphyJ/YnUrh5w==""; //Primary access key


   string hashedString = GetEncodedSignature(tosign, hashKey); //Shaun's answer method

    var client = new HttpClient();
    Uri uri = new Uri(""https://storage_name.blob.core.windows.net/?comp=list"");
    client.DefaultRequestHeaders.Add(""x-ms-date"", time);
    client.DefaultRequestHeaders.Add(""x-ms-version"", ""2015-02-21"");
    client.DefaultRequestHeaders.Add(""Authorization"", ""SharedKey storage_name:"" + hashedString);
    var response = await client.GetAsync(uri);
}
catch(Exception ex)
{
    Debug.WriteLine(ex.ToString());
}

","520","<c#><azure><windows-runtime><windows-phone-8.1><sha256>","4","1","2","2016-05-20 15:20:48","","1","1","41956","","2015-09-04 03:57:06","2015-09-03 20:27:12",""
"52716046","Sign a string with RSA SHA 256 with ONLY the Private Key as a String .NET","We're doing an integration with Google via RESTful API and I need to sign a payload of a JWT with RSA-SHA256 and all I have is a Private Key as a string, that looks like
-----BEGIN PRIVATE KEY-----
MIIEvgIBfADANBg9qhkdsiG9w0BAQEFAASCBKgw
......
-----END PRIVATE KEY-----

I've been looking everywhere for a solution, but everyone's talking about X509Certificate2 which needs a p12 file, or some Certificates. Now I don't have either of those, I only have a string that is the private key.
Google recommends https://jwt.io/ and it works with the key string, but well, I need my CODE to do it. There are 3 libraries listed in the page:

One of them belongs to Microsoft and has absolutely no documentation.
Another one is using X509Certificate2 or specifically for string keys only has a link to this place http://www.donaldsbaconbytes.com/2016/08/create-jwt-with-a-private-rsa-key/ which uses some Certificate files I don't have, making it a wrong and unhelpful link to begin with.
Same creators of #2 have another lib, but it's for phones and it actually has a method for RSA256 signing which takes private key as a string of exactly my format.

So my question is - is there some working solution for my case? Because I can't believe that no one else has integrations with Google.
","I know of a way to convert this to a pfx that you can use in C#.
First, install OpenSSL if you haven't already. (You could get the latest ""Win64 OpenSSL v#.#.#x Light"" from http://slproweb.com/products/Win32OpenSSL.html, though I take no responsibility for this source.)
You may want to add ""C:\Program Files\OpenSSL\bin\"" to your account's path variable, so that ""openssl.exe"" can be used from anywhere in the command line.
In a command window, navigate to where your private key file is. Let's call it ""priv.key"". Issue the following two commands, ignoring the comments:
# Create public self-signed certificate CRT file (with 7000yr validity) from private key (may leave all info empty)
openssl req -x509 -sha256 -new -key priv.pem -out pub.crt -days 2555000

# Combine into PFX container (encrypted with AES-256) (certificate needs to be included for .NET to read successfully)
openssl pkcs12 -export -aes256 -CSP ""Microsoft Enhanced RSA and AES Cryptographic Provider"" -inkey priv.pem -in pub.crt -out priv.pfx

Note that on the last command, I am creating an encrypted pfx (this is optional - I believe you could replace -aes256 by -nodes to skip it), and I am configuring the cryptographic provider such that the key can be used for SHA256 operations without C# complaining.
You now have a pfx file that you can load using the constructor of X509Certificate2.
I tend to use this cheat sheet for common OpenSSL commands:
https://www.sslshopper.com/article-most-common-openssl-commands.html
","519","<c#><jwt><rsa><sha256><sign>","1","1","1","2018-10-09 08:13:40","","5","","","","","2018-10-09 08:00:09",""
"28497352","JasyptStringDigester with SHA2 becomes very slow suddenly","In my web application, login passwords are hashed and saved with JasyptStringDigester with SHA256. During login, password input by user will be hashed with same digester for comparsion. 
However, after the application runs about 2 days, login becomes very slow suddenly. Once it happens, I have to restart the server to recover.
With Thread dump, I found out that the slowdown is caused by the digester and it uses up CPU resources. I have tried to change JCE provider from default one to bouncycastle but it didn't help.
I have also checked the momery usage in JVM when this problem occurs, but there are plenty of them.
Environment:
JDK 7u60
JBoss 7.1.1 Final
Digester configuration(used as singleton):


<bean id=""jasyptStringDigester"" class=""org.jasypt.digest.StandardStringDigester"">
		 <property name=""provider"" ref=""bouncyCastleProvider"" />
          <property name=""algorithm"" value=""SHA-256"" />
          <property name=""iterations"" value=""100000"" />
          <property name=""saltGenerator"">
               <bean id=""zeroSaltGenerator"" class=""org.jasypt.salt.ZeroSaltGenerator""/>
          </property>
          <property name=""saltSizeBytes"" value=""10""/>
</bean>

 
<bean id=""bouncyCastleProvider"" class=""org.bouncycastle.jce.provider.BouncyCastleProvider""/>



Thread dump:


	""ajp--10.88.90.34-8009-22"" daemon prio=10 tid=0x00007ff2100ad800 nid=0xc7e runnable [0x00007ff1a9ae4000]
   java.lang.Thread.State: RUNNABLE
        at org.bouncycastle.crypto.digests.SHA256Digest.Sum0(Unknown Source)
        at org.bouncycastle.crypto.digests.SHA256Digest.processBlock(Unknown Source)
        at org.bouncycastle.crypto.digests.GeneralDigest.finish(Unknown Source)
        at org.bouncycastle.crypto.digests.SHA256Digest.doFinal(Unknown Source)
        at org.bouncycastle.jcajce.provider.digest.BCMessageDigest.engineDigest(Unknown Source)
        at java.security.MessageDigest.digest(MessageDigest.java:353)
        at java.security.MessageDigest.digest(MessageDigest.java:399)
        at org.jasypt.digest.StandardByteDigester.digest(StandardByteDigester.java:979)
        - locked <0x0000000748e4a9c0> (a org.bouncycastle.jcajce.provider.digest.SHA256$Digest)
        at org.jasypt.digest.StandardByteDigester.digest(StandardByteDigester.java:933)



Would anyone help please? I have been stuck into this problem for a long time. A similar issue was found in https://bugs.openjdk.java.net/browse/JDK-8023983 but I couldn't find any solution.
Thanks.
","Which OS? 
If it is Linux, once it slows down take a look at the available entropy (cat /proc/sys/kernel/random/entropy_avail). If that number is less than 250 or so, you need more randomness on the system. It is a common issue on servers. Network traffic or disk IO can help.
To make it more difficult to diagnose, you might actually get a brief speed up as you log in. That is because the log in itself generates some network traffic which helps add some randomness to the entropy pool. On the other hand, SSHing into the box may be painfully slow as it needs some randomness for the SSH session keys. In either case (speed up after log in or slow log in), entropy is a likely issue.
You can consider adding some additional sources of randomness, such as haveged or rng-tools.
You may see suggestions to copy some ""randomness"" from /dev/urandom to /dev/random, which will appear to fix the problem. But /dev/urandom does not actually have any randomness, it is just a PRNG seeded with randomness. So this just avoids the issue by compromising the security of the crypto you are using. Just say no.  
","519","<java><jboss7.x><sha256><digest><jasypt>","3","0","2","2017-03-24 12:47:55","","0","","","","","2015-02-13 10:22:48",""
"28497352","JasyptStringDigester with SHA2 becomes very slow suddenly","In my web application, login passwords are hashed and saved with JasyptStringDigester with SHA256. During login, password input by user will be hashed with same digester for comparsion. 
However, after the application runs about 2 days, login becomes very slow suddenly. Once it happens, I have to restart the server to recover.
With Thread dump, I found out that the slowdown is caused by the digester and it uses up CPU resources. I have tried to change JCE provider from default one to bouncycastle but it didn't help.
I have also checked the momery usage in JVM when this problem occurs, but there are plenty of them.
Environment:
JDK 7u60
JBoss 7.1.1 Final
Digester configuration(used as singleton):


<bean id=""jasyptStringDigester"" class=""org.jasypt.digest.StandardStringDigester"">
		 <property name=""provider"" ref=""bouncyCastleProvider"" />
          <property name=""algorithm"" value=""SHA-256"" />
          <property name=""iterations"" value=""100000"" />
          <property name=""saltGenerator"">
               <bean id=""zeroSaltGenerator"" class=""org.jasypt.salt.ZeroSaltGenerator""/>
          </property>
          <property name=""saltSizeBytes"" value=""10""/>
</bean>

 
<bean id=""bouncyCastleProvider"" class=""org.bouncycastle.jce.provider.BouncyCastleProvider""/>



Thread dump:


	""ajp--10.88.90.34-8009-22"" daemon prio=10 tid=0x00007ff2100ad800 nid=0xc7e runnable [0x00007ff1a9ae4000]
   java.lang.Thread.State: RUNNABLE
        at org.bouncycastle.crypto.digests.SHA256Digest.Sum0(Unknown Source)
        at org.bouncycastle.crypto.digests.SHA256Digest.processBlock(Unknown Source)
        at org.bouncycastle.crypto.digests.GeneralDigest.finish(Unknown Source)
        at org.bouncycastle.crypto.digests.SHA256Digest.doFinal(Unknown Source)
        at org.bouncycastle.jcajce.provider.digest.BCMessageDigest.engineDigest(Unknown Source)
        at java.security.MessageDigest.digest(MessageDigest.java:353)
        at java.security.MessageDigest.digest(MessageDigest.java:399)
        at org.jasypt.digest.StandardByteDigester.digest(StandardByteDigester.java:979)
        - locked <0x0000000748e4a9c0> (a org.bouncycastle.jcajce.provider.digest.SHA256$Digest)
        at org.jasypt.digest.StandardByteDigester.digest(StandardByteDigester.java:933)



Would anyone help please? I have been stuck into this problem for a long time. A similar issue was found in https://bugs.openjdk.java.net/browse/JDK-8023983 but I couldn't find any solution.
Thanks.
","I had exactly the same problem, entropy is not the cause. SHA256 digest doesn't need random. The problem is JIT (Just in time) compilation mechanism that allow to compile some Hotspot function directly in native code. There is a known issue in JDK7 see : http://www.oracle.com/technetwork/java/javase/documentation/javase7supportreleasenotes-1601161.html that disable the native compiler when code cache is full. In this case SHA digest is not executed natively and become very long !
To reproduce just disable the compiler :
-Djava.compiler=NONE 

The solution is to migrate to Java 8, a workaround for Java 7 is to increase the CodeCache size according to your needs by using the JVM option. 
-XX:ReservedCodeCacheSize=300m
You can monitor your code cache through JConsole :

I hope it will help :)
Eric
","519","<java><jboss7.x><sha256><digest><jasypt>","3","2","2","2017-03-24 12:47:55","","0","","","","","2015-02-13 10:22:48",""
"11512114","Actual password visualisation in SQL table when using sha256","I am training to secure the login process.
I have used sha 256 in the sign_up.php:
$username= check_input($_POST['username']);
$password= check_input($_POST['password']);
//the password is encrypted in sha256
$secure_sign_up_password = hash('sha256', $password);

and then of course in my users table in my SQL database, I can read:

in the column 'login' the actual typed login 
example: if somebody type 'michael', I will see 'Michael' in the SQL database
in the column 'password' the actual typed login 
example: if somebody type 'fruit', I will see the hashed value like 'e8bfab56c53980cd014206c8da2f8c9b9708eaacc61' in the SQL database

My question is simple but maybe a bit naive (I'm a newbie): I thought that I could still be able to read the actual password somewhere in my database and that hashing was only made to protect the password from getting intercepted and read while it was being sent. I never know, somebody might ask me to send him his real password. But the only thing I can see is the 'hashed' one in the password column.

Is it made to be like this?  
Is it possible to visualize also the real password?

","This is by design.  Nobody should know what my password is, except for me.  Even you as a (insert fancy title here) should not know my password.  If I forget it, that's my problem, but your site should offer me a way to reset it.  Then when I reset, your site should store the hash once again.  The plain-text password should never be stored anywhere.
","519","<php><sql><sha256>","1","3","4","2012-07-17 13:36:02","11512514","0","","558021","","2012-07-16 20:53:38","2012-07-16 20:35:22",""
"11512114","Actual password visualisation in SQL table when using sha256","I am training to secure the login process.
I have used sha 256 in the sign_up.php:
$username= check_input($_POST['username']);
$password= check_input($_POST['password']);
//the password is encrypted in sha256
$secure_sign_up_password = hash('sha256', $password);

and then of course in my users table in my SQL database, I can read:

in the column 'login' the actual typed login 
example: if somebody type 'michael', I will see 'Michael' in the SQL database
in the column 'password' the actual typed login 
example: if somebody type 'fruit', I will see the hashed value like 'e8bfab56c53980cd014206c8da2f8c9b9708eaacc61' in the SQL database

My question is simple but maybe a bit naive (I'm a newbie): I thought that I could still be able to read the actual password somewhere in my database and that hashing was only made to protect the password from getting intercepted and read while it was being sent. I never know, somebody might ask me to send him his real password. But the only thing I can see is the 'hashed' one in the password column.

Is it made to be like this?  
Is it possible to visualize also the real password?

","If you would be able to ""decode"" those passwords, it wouldn't be a very safe system.  Once someone gained access to your database - they would be able to gain access to every ones passwords without them knowing...
If you have ever forgotten a password for a site (and we all have - don't deny it!), you'll recall that they usually* don't simply send you your password (in plain text) as a reminder to your email - they'll give you the opportunity to reset it.  This way (verifying usually through your email/phone number) they'll know that you are indeed the person who opened the account.
* If they send you your password in plain text that probably means they are storing it like that or in some other easily decrypted form.  This site is most likely not as secure as they would like to think...

If you are interested in leaving yourself a ""backdoor"" of sorts to be able to access any of your users accounts, what you might think of doing is having a special login form from inside your administrator account, that allows you to use the encoded password to log in.  That means that you simply leave out the hash('sha256', $password) and pass the $password already encoded (which you extract from your database).  It's a bit hacky, and if you already have an administrator account then there wouldn't be much use to be able to log in as a different user because you are already all powerful!
","519","<php><sql><sha256>","1","4","4","2012-07-17 13:36:02","11512514","0","","558021","","2012-07-16 20:53:38","2012-07-16 20:35:22",""
"11512114","Actual password visualisation in SQL table when using sha256","I am training to secure the login process.
I have used sha 256 in the sign_up.php:
$username= check_input($_POST['username']);
$password= check_input($_POST['password']);
//the password is encrypted in sha256
$secure_sign_up_password = hash('sha256', $password);

and then of course in my users table in my SQL database, I can read:

in the column 'login' the actual typed login 
example: if somebody type 'michael', I will see 'Michael' in the SQL database
in the column 'password' the actual typed login 
example: if somebody type 'fruit', I will see the hashed value like 'e8bfab56c53980cd014206c8da2f8c9b9708eaacc61' in the SQL database

My question is simple but maybe a bit naive (I'm a newbie): I thought that I could still be able to read the actual password somewhere in my database and that hashing was only made to protect the password from getting intercepted and read while it was being sent. I never know, somebody might ask me to send him his real password. But the only thing I can see is the 'hashed' one in the password column.

Is it made to be like this?  
Is it possible to visualize also the real password?

","
Never never never hold password in open format in database. If someone find exploit in system, he will be able to make any sql query and get users passwords. And hacker will be able to login into system as user, because he knows username and password
If user want restore password, make functionality for regenerating password. Never store password in plain text.
SHA256 is hash function. Mathematically it means - data can be ""hashed"" only in one way. I mean, that from hash you cannot restore data. You can read this http://en.wikipedia.org/wiki/Hash_function about hash functions and this about http://en.wikipedia.org/wiki/Sha256 sha256
Result: If someone crack you database and get username and password, he is unable to login into system. Because hacker have only hash data and can't get exactly password for login.
As i mentioned before, hash function can be ""hash"" data only in one way. But some hackers build VERY big data massive for some predefined algorithms. I mean, that they build hash tables for passwords. Such hash tables looks something like this:


    password    hash
    ------------------
    a           some_hash1
    b           some_hash2
    ...         .....
    qwerty      some_hash3
    some_data   some_hash3 -- yes, data can have collisions. See wiki about hash functions

And if hacker hacked you database and have such table, he able to restore password. For example, hacker get for admin user hash ""some_hash3"", then hacker search such hash in hash table, find that hash ""some_hash3"" have password ""qwerty"" and ""some_data"" and hacker will try to login with such passwords.
Result: Use salt. For nowadays hackers have such tables for 6 symbols passwords. But you can ""suck"" them in very simple technic: When you store password in database, add to password some value (salt) and get from such value hash:
// somewhere in code, where creating/updating users password

$password = hash('sha256', $salt.$password);

and when you will check password, use the same logic
Thanks
","519","<php><sql><sha256>","1","2","4","2012-07-17 13:36:02","11512514","0","","558021","","2012-07-16 20:53:38","2012-07-16 20:35:22",""
"11512114","Actual password visualisation in SQL table when using sha256","I am training to secure the login process.
I have used sha 256 in the sign_up.php:
$username= check_input($_POST['username']);
$password= check_input($_POST['password']);
//the password is encrypted in sha256
$secure_sign_up_password = hash('sha256', $password);

and then of course in my users table in my SQL database, I can read:

in the column 'login' the actual typed login 
example: if somebody type 'michael', I will see 'Michael' in the SQL database
in the column 'password' the actual typed login 
example: if somebody type 'fruit', I will see the hashed value like 'e8bfab56c53980cd014206c8da2f8c9b9708eaacc61' in the SQL database

My question is simple but maybe a bit naive (I'm a newbie): I thought that I could still be able to read the actual password somewhere in my database and that hashing was only made to protect the password from getting intercepted and read while it was being sent. I never know, somebody might ask me to send him his real password. But the only thing I can see is the 'hashed' one in the password column.

Is it made to be like this?  
Is it possible to visualize also the real password?

","sha256 hashes and other hashes are one way. See http://en.wikipedia.org/wiki/Cryptographic_hash_function. If you want to be able to decrypt what you write in the password fields in your database, you might want to use another approach.
Instead of creating a hash, you could encrypt with a key, that you do not share with your users. Look at http://www.php.net/manual/en/book.mcrypt.php. The key would be part of your code though, as it's symmetric encryption.
To do it really safe, try real PKI encryption (encrypt with a public key, decrypt with a private one). Look at php.net/manual/en/function.gnupg-encrypt.php or php.net/manual/en/book.openssl.php.
But as other here have said, such things are reasonably NOT done ;)
","519","<php><sql><sha256>","1","0","4","2012-07-17 13:36:02","11512514","0","","558021","","2012-07-16 20:53:38","2012-07-16 20:35:22",""
"42660069","Base64 decode becomes weird text","I am trying something new with base64. The sha-256(base64) method. It has an output to base64 so I thought I can just decode it to base64. Well then it becomes this, � ��a�bcfVx&� zS�JZ����#�5�. Is there like no way to decode that type of base64 or even a hash because it hash sha-256? This is the original hash: viAQv+m8YcpiY2ZWeCYOtCAcelPjSlq3kaO+I801D7w=
This is just to get to know more about hashing and data security. I know what the output of the original hash was but I just want to train my knowledge.
Is there any way to decrypt this? Thanks in advance.
PS: I also tried to go to hexidecimal first and then it gave me this, � ���a�bcfVx&� zS�JZ����#�5�
Please help.
","SHA-256, cryptographic functions in general, produce sequence of binary bytes, not displayable characters.
When it is necessary to have a displayable version the data is generally encoded to Base64 or hexadecimal. Decoding back to binary produces many un-displayable bytes.
When one tries to display bytes with non-displayable values ofter a place holder glyph such as � is displayed.
","519","<encryption><hash><base64><sha256>","0","2","1","2017-03-08 02:29:55","","4","","","","","2017-03-07 23:08:22",""
"33281806","Upgraded OpenSSL - How do I get Apache HTTPD to Use?","I recently had a need to upgrade an old server.  The server fulfills a very specific purpose and as such has not been kept up to date.  With the recent push for SSL to utilize SHA256 I needed to upgrade a few packages.
Short Background
The server is RHEL3 (yes, that is correct).  
I downloaded and built OpenSSL 0.9.8q and ensured it was the only instance of OpenSSL on the server (moving the old instance to a backup directory).  I then downloaded and built cURL 7.15.5 with the ./configure  --with-ssl=/usr/local/ssl - pointing the with-ssl to my new OpenSSL directory.
Once cURL was built I tested my connection to the resource that is requiring sha256 using cURL.  My connection test was successful using cURL.
On to my problem and question 
I downloaded httpd 2.0.59 and built it with --enable-ssl and --enable-so, but my tests did not work.  
I also tried to d/l & build httpd 2.0.63 but I was having trouble getting 2.0.63 working at all.  I then took the mod_ssl built from 2.0.63 and put it into the 2.0.59 directory...no luck either.
I feel I am missing some element that connects httpd to my newly installed OpenSSL.  What do I need to do to ensure mod_ssl is using my new version of OpenSSL on the server?
I understand I am quite a few releases behind with my httpd instances, but again, this is an old server with a specific purpose.  My only goal is to get it working with sha256, not buy a new server with the latest RHEL, etc.
Thank for any input/assistance.
","Running 
./configure --help |grep ssl

gives
--with-ssl=DIR          SSL/TLS toolkit (OpenSSL)

So just like the curl build you could try adding that.
Assuming you are not going to do the sensible thing and upgrade the OS.
","519","<apache><ssl><rhel><sha256>","1","2","1","2015-10-22 13:45:52","","0","","575657","","2015-10-22 13:32:09","2015-10-22 13:08:07",""
"47735709","C# to Java Base64 and HmacSHA256 encryption","I have the following code in C# which generates a hash value from a Base64 encoded string.
var hmacSha256 = new System.Security.Cryptography.HMACSHA256 { Key = Convert.FromBase64String(key) };

string verb = ""post"";
string resourceType = ""docs"";
string resourceId = ""dbs/ToDoList/colls/Items"";
string date = DateTime.UtcNow.ToString(""R"");

string payLoad = string.Format(System.Globalization.CultureInfo.InvariantCulture, ""{0}\n{1}\n{2}\n{3}\n{4}\n"",
        verb.ToLowerInvariant(),
        resourceType.ToLowerInvariant(),
        resourceId,
        date.ToLowerInvariant(),
        """"
);

byte[] hashPayLoad = hmacSha256.ComputeHash(System.Text.Encoding.UTF8.GetBytes(payLoad));
string signature = Convert.ToBase64String(hashPayLoad);

string authToken = System.Web.HttpUtility.UrlEncode(String.Format(System.Globalization.CultureInfo.InvariantCulture, ""type={0}&ver={1}&sig={2}"",
    keyType,
    tokenVersion,
    signature));

This works perfectly fine and I wanted to convert it to Java code for my Android app. I checked references from these sources-
C# vs Java HmacSHA1 and then base64
c# and java - difference between hmacsha256 hash
and wrote below code in Java-
String restServiceVersion = ""2017-02-22"";

String verb = ""post"";
String resourceType = ""docs"";
String resourceId = ""dbs/ToDoList/colls/Items"";

String dateString = org.apache.http.impl.cookie.DateUtils.formatDate(new Date(System.currentTimeMillis()));

String gmtIndex = ""GMT"";
int index = dateString.indexOf(gmtIndex);

String dateStringFinal = dateString.substring(0, index + 3).toLowerCase();

String payLoad = verb +""\n"" + resourceType + ""\n"" + resourceId + ""\n"" + dateStringFinal + ""\n\n"";

System.out.println(payLoad);

String secretAccessKey = MASTER_KEY;
String data = payLoad;
byte[] secretKey = Base64.decode(secretAccessKey, Base64.DEFAULT);
SecretKeySpec signingKey = new SecretKeySpec(secretKey, ""HmacSHA256"");
Mac mac = Mac.getInstance(""HmacSHA256"");
mac.init(signingKey);
byte[] bytes = data.getBytes(""UTF-8"");
byte[] rawHmac = mac.doFinal(bytes);

String authToken = ""type=master&ver=1.0&sig="" + Base64.encodeToString(rawHmac, Base64.DEFAULT);

The authToken value generated in Java does not match with C#. Also the byte array generated from Base64 decoding differs.
I am not sure if this is the correct approach. Can someone please take a look? All I need is to convert the above working C# code to Java for my Android app.
","Most likely explanation: you have invisible unicode characters (e.g. ""zero-width non-joiner"") embedded in your BASE64 strings. One platform is stripping these out when base-64 decoding, the other is not, resulting in different keys.
","517","<java><c#><android><base64><sha256>","-1","0","1","2017-12-10 05:44:23","","8","","","","","2017-12-10 03:55:27",""
"22254659","Is there a PHP equivalent to Java MessageDigest","I have a Java method that I need to implement in PHP.  It is to create an authentication string to gain access to an API.  It consists of a code given by the company as well as an API key, also given by the company, and, according to the Java example below, it also includes a GMT timestamp in minutes since epoch.  
According to the documentation it says ""The timestamp calculated as the number of minutes passed since epoch.  A GMT time zone must be used for calculating the timestamp.  If the system time of a requesting server is off by more than one minute from actual current time , the call will be rejected by the server with a 400 Bad Request code"".
I have to provide as parameters the code as well as the SHA-256 encrypted token that I create.
Here is the Java:
String createToken() {
    String token = """";

    MessageDigest lclMD = null;
    try {
        lclMD = MessageDigest.getInstance(""SHA-256""); }
    catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    }

    lclMD.update((EnvConstants.code + EnvConstants.api_key + Long.toString(getEpochMinutes())).getBytes());
    byte[] lclResult = lclMD.digest();

    sig = new String(Hex.encodeHex(lclResult));
    return token; 
}

long getEpochMinutes () {
    Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(""GMT"")); 
    long now = System.currentTimeMillis();

    cal.setTimeInMillis(now);
    return (cal.getTimeInMillis() / 60000L); 
}

This is what I have tried in PHP:
$time = (string)time()/60;   // to get the minutes since epoch, I have also tried it not casting it to a string
$code = 'thisisthecode';
$api_key = 'XXXXXXX';
$hash = hash('sha256', $code . $api_key . $time);

$curl = curl_init();
$url = ""http://api.url/user/XXXX?code=thisisthecode&token=$hash""; 
curl_setopt($curl, CURLOPT_URL, $url);
$result = curl_exec($curl);
return $result;

When I run this code I always get a 400 Bad Request error.
To be clear, I don't know Java and now I'm guessing if I know PHP well enough because I can't get this to work.
Can anyone help me out with this?  I'm banging my head against the concrete.
Thank you for any and all help. 
","$key = openssl_digest($stringSHA, 'sha512', true);
","515","<java><php><encryption><sha256>","0","0","1","2019-10-23 03:33:08","","3","3","922721","","2014-03-09 17:50:26","2014-03-07 15:51:59",""
"38628496","cryptojs sha256 hash length getting 64 bit instead of 32 bit","I am using the crypto js from the https://code.google.com/archive/p/crypto-js/
I am facing an issue as the .NET generated sha256 hash is 32 bit but the hash generated with the cryptojs is 64 bit .. 
Please advice how to get the 32 bit hash from cryptojs sha256 algorithm.
CryptoJS.SHA256(""xxxxxxxxxxxxxxxxxxx.."").toString()

","","514","<sha256><cryptojs>","0","","0","2016-07-28 07:04:19","","2","","6534219","","2016-07-28 07:04:19","2016-07-28 06:21:41",""
"37680340","Generate SHA256 CSRs PHP Openssl","I'm trying to develop some sort of PKI management too with PHP, and I'm finding many issues (partially due documentation) using PHP Openssl.
For example, I learnt via hard way (try-and-error) that PHP openssl doesn't check really for OPENSSL_CONF environment variable, the only real way to use a different config file is to use the $configArray('config' => file_path) argument.
Currently I'm stuck trying to generate a CSR using SHA256 hash method. For the tests I'm using this minimal (but working) openssl.conf configuration:
distinguished_name  = req_distinguished_name
[req]
default_md          = sha256
[req_distinguished_name]
[end_req_ext]
keyUsage                = digitalSignature,keyEncipherment
extendedKeyUsage        = serverAuth,clientAuth

(note that the 'default_md' setting is overriden by the $configArray['digest_alg'] parameter.
I use this code for testing:
$config = array(
    'digest_alg' => ""sha256"",
    'private_key_bits' => 384,
    'config'    => ""/tmp/opensslmy.conf""
);

$dn = array(
    ""countryName"" => ""UK"",
    ""stateOrProvinceName"" => ""Somerset"",
    ""localityName"" => ""Glastonbury"",
    ""organizationName"" => ""The Brain Room Limited"",
    ""organizationalUnitName"" => ""PHP Documentation Team"",
    ""commonName"" => ""Wez Furlong""
);

$key = openssl_pkey_new($config);
if (!$key) {
    print ""Error on PKEY_NEW: "".openssl_error_string().""\n"";
    exit(1);
}

$csr = openssl_csr_new ( $dn , $key, $config );
$pem = """";
if (openssl_csr_export($csr, $pem)) {
    print $pem.""\n"";
} else {
    print ""Error on CSR_NEW: "".openssl_error_string().""\n"";
}

It fails:
PHP Warning:  openssl_csr_new(): Error signing request in /home/mark/Desktop/ssltest.php on line 25
PHP Warning:  openssl_csr_export() expects parameter 1 to be resource, boolean given in /home/mark/Desktop/ssltest.php on line 27
Error on CSR_NEW: error:0E06D06C:configuration file routines:NCONF_get_string:no value

If set the initial $config array 'digest_alg' to either md5 or sha1 it works like a charm and succsfully generates a CSR with the given hash algorithm.
I also tried to remove that 'digest_alg' key from the config array and specify it exclusively in the config file (as for my experience I know even for the openssl req -new command, the -sha256 doesn't work and that is the only way to generate sha256 CSRs)
I'm currently using PHP 5.5.9 and OpenSSL 1.0.1f.
I'm doing something wrong?
Too old PHP versions?
","The problem is not the algorithm, but it's the to small private_key_bits size. This will trigger an error and fails the creation of the CSR.
","512","<php><openssl><sha256>","1","0","1","2018-08-15 22:20:42","","0","","","","","2016-06-07 13:08:15",""
"48038036","Sequential SHA 256 hashes give different outputs for the same input","I thought that this would be a fairly common and straightforward problem, but I searched and was not able to find it. 
I am a novice Python user, mostly self-taught. I'm trying what I thought would be a fairly straightforward exercise: generating a hash value from an input phrase. Here is my code: 
import hashlib
target = input(""Give me a phrase: "").encode('utf-8')
hashed_target = hashlib.sha256(target)
print(hashed_target)

I execute this and get the prompt:
    Give me a phrase: 
I entered the phrase ""Give me liberty or give me death!"" and got the hash output 0x7f8ed43d6a80.
Just to test, I tried again with the same phrase, but got a different output: 0x7f1cc23bca80.
I thought that was strange, so I copied the original input and pasted it in, and got a third, different hash output: 0x7f358aabea80.
I'm sure there must be a simple explanation. I'm not getting any errors, and the code looks straightforward, but the hashes, while similar, are definitely different. 
Can someone help?
","You are directly printing an object, which returns a memory address in the __repr__ string. You need to use the hexdigest or digest methods to get the hash:
>>> import hashlib
>>> testing=hashlib.sha256(b""sha256 is much longer than 12 hex characters"")
>>> testing
<sha256 HASH object @ 0x7f31c1c64670>
>>> hashed_testing=testing.hexdigest()
>>> hashed_testing
'a0798cfd68c7463937acd7c08e5c157b7af29f3bbe9af3c30c9e62c10d388e80'
>>> 

","512","<python><hash><sha256><hashlib>","1","10","1","2017-12-31 00:05:39","","0","","355230","","2017-12-31 00:05:39","2017-12-30 21:28:07",""
"35759330","How to use SHA256 With salt?","I have a hash function on sa-mp
new MyHash[256];
SHA256_PassHash(inputtext, ""78sdjs86d2h"", MyHash, sizeof(MyHash));
if(!strcmp(MyHash, PlayerInfo[playerid][pKey]))

I assume 78sdjs86d2h is the salt, but how do I set the salt in PHP?
I am using this code, and it hashes but not with my salt.
if(isset($_POST['username']) && isset($_POST['password'])){

    mysql_query('SET NAMES utf8');
    $var = mysql_real_escape_string(""\xbf\x27 OR 1=1 /*"");

    $username = mysql_real_escape_string($_POST['username']);
    $parola = mysql_real_escape_string($_POST['password']);
    $hash = hash('sha256', $parola);

    $check = get_row(""SELECT ID FROM players WHERE Name='$username' && password='$hash' LIMIT 1"");
    if(isset($check['ID']))
    {
        $_SESSION['username'] = $_POST['username'];
        $_SESSION['password'] = $_POST['password'];
        $id = $check['ID'];
        header(""location: index.php"");
    }
    else
    {
        printf(""%s"", $hash);
        $err = 'Username sau parola incorecte';
    }
}

How do I  make it hash with my own salt?
","UPDATE: Tried this way
$username = mysqli_real_escape_string($DB_H, addslashes($_POST['username']));
$password1 = $_POST['password'];
$salt      = '78sdjs86d2h';
$parola    = hash('sha256', $password1 . $salt);

The result:  33ca067dc70ef75fc1a1107f4345f3a819ecca657d3d9646d26822fd691cd10c
The original:  BFD2832240F5FC1FD12004634EBE9FDE97BD0D4690695DFAC1350D0AE037398F
","508","<sha256>","-1","-1","1","2016-03-02 23:08:41","","1","","2734189","","2016-03-02 23:08:41","2016-03-02 22:20:20",""
"13872399","PHP HMAC SHA256 Hashing","im trying to recreate a script from Java to PHP
Usually in php we do hash_mac('sha256',string,key) But the generated signature in php doesnt match the java one...
Here is the java algo:
  Mac localMac = getValidMac();
  localMac.init(new SecretKeySpec(str1.getBytes(""UTF-8""), localMac.getAlgorithm()));
  byte[] arrayOfByte = localMac.doFinal(paramString.getBytes());
  BigInteger localBigInteger = new BigInteger(1, arrayOfByte);
  String str4 = String.format(""%0"" + (arrayOfByte.length << 1) + ""x"", new Object[] { localBigInteger });
  str3 = str4;
  return str3;

Is there anything different in Java appending some strings to the key?
","","505","<java><php><sha256><hmac>","0","","0","2012-12-14 04:04:56","","2","3","168868","","2012-12-14 04:04:56","2012-12-14 03:52:16",""
"48788710","Verify signature using NIST P-256 type key and SHA-256 algorithm","I encounter a problem with validation of signature in Java using SHA-256 algorithm and NIST P-256 type key.
I have a X509 certificate (provided by Certificate Authority) which contains a public key and I should certify authenticity of the message that I receive.
Signature that I receive is encoded in Base32 (on 103 characters) and I decode it to binary. I obtain a bytes array of 64 octets.
Informations on public key :
Sun EC public key, 256 bits
  public x coord: 76693623628200764797317561328856095594448010045454057728566183687964056347177
  public y coord: 111784915166853162657631137717721670318464358783507947441022826650722573271612
  parameters: secp256r1 [NIST P-256, X9.62 prime256v1] (1.2.840.10045.3.1.7)

(EDIT) Method that I use to verify authenticity of my message :
public static void verify(String message, String signatureReceived, String pathToCertificate) {

    try {

        final X509Certificate certificat = getCertificate(pathToCertificate);
        final PublicKey publicKey = certificat.getPublicKey();

        final byte[] signatureReceivedInBinary = BaseEncoding.base32().decode(signatureReceived);

        byte[] rBytes = Arrays.copyOfRange(signatureReceivedInBinary, 0, 32);
        byte[] sBytes = Arrays.copyOfRange(signatureReceivedInBinary, 32, 64);

        BigInteger r = new BigInteger(1, rBytes);
        BigInteger s = new BigInteger(1, sBytes);

        ASN1Integer asn1R = new ASN1Integer(r);
        ASN1Integer asn1S = new ASN1Integer(s);

        DERSequence seq = new DERSequence(new ASN1Integer[]{asn1R, asn1S});
        byte[] encoded = seq.getEncoded();

        Signature signature = Signature.getInstance(""SHA256withECDSA"");

        signature.initVerify(publicKey);
        signature.update(message.getBytes(""UTF-8""));

        if (signature.verify(encoded)) {
            System.out.println(""Signature OK"");
        } else {
            System.out.println(""Signature KO"");
        }

    } catch (Exception e) {
        e.printStackTrace();
    }

}

Main class :
public static void main(String[] args)
        throws NoSuchAlgorithmException, CertificateException, IOException,
        KeyStoreException {

    final String message = ""MessageToValidate"";
    final String certificatPath = ""<PATH_TO_CERTIFICATE>\\public_certificat.crt"";
    final String signature = ""UBFF4NY7MIXQVUZYMRDRGXBTVWIVMCNP76TN7SA24QUJ4AAHG4WTLA2QZ5TSC54F2OQRMWOAKSHLXJLNHXH4GJPBHBWXBO3PMSDOVZI"";

    try {
        Test.verify(message, signature, certificatPath);
    } catch (final Exception e) {
        System.out.println(e.getMessage());
    }

}

When I execute my application, I obtain this error : 
Exception in thread ""main"" java.security.SignatureException: Could not verify signature
    at sun.security.ec.ECDSASignature.engineVerify(ECDSASignature.java:325)
    at java.security.Signature$Delegate.engineVerify(Signature.java:1219)
    at java.security.Signature.verify(Signature.java:652)
    at fr.altes.music.utils.Test.verify(Test.java:56)
    at fr.altes.music.Application.main(Application.java:54)
Caused by: java.security.SignatureException: Invalid encoding for signature
    at sun.security.ec.ECDSASignature.decodeSignature(ECDSASignature.java:400)
    at sun.security.ec.ECDSASignature.engineVerify(ECDSASignature.java:322)
    ... 4 more
Caused by: java.io.IOException: Sequence tag error
    at sun.security.util.DerInputStream.getSequence(DerInputStream.java:330)
    at sun.security.ec.ECDSASignature.decodeSignature(ECDSASignature.java:376)
    ... 5 more

","","504","<java><x509certificate><signature><sha256><ecdsa>","5","","0","2018-02-16 19:38:45","","1","","9360042","","2018-02-16 19:38:45","2018-02-14 13:44:58",""
"4930985","SHA256 implementation for J2ME","Please provide the implementation class for SHA256 algoritham in J2ME.I want this encoding to be done in blackberry apps.
","Look here http://www.docjar.com/html/api/gnu/java/security/hash/Sha256.java.html
More about SHA-2 (SHA-256/512) are here
","499","<blackberry><java-me><sha256>","0","-2","1","2012-04-18 04:08:54","","0","","996493","","2012-04-18 04:08:54","2011-02-08 08:35:19",""
"42624289","encrypt a password using pbkdf2-sha256 in ionic2","
how to encrpt password in ionic2 typescript file.I refered the below link and imported pbkdf2 module  in to  ionic2 app.
  enter link description here
but i got error like  webpack_require.i(...) is not a function.can anyone help me solving out this...



import { Component } from '@angular/core';
import { NavController, NavParams } from 'ionic-angular';
import { pbkdf2 } from '../../../node_modules/pbkdf2-sha256/lib/pbkdf2.js';
/*
  Generated class for the Firstpage page.

  See http://ionicframework.com/docs/v2/components/#navigation for more info on
  Ionic pages and navigation.
*/
@Component({
  selector: 'page-firstpage',
  templateUrl: 'firstpage.html'
})
export class FirstpagePage {
 	key : any = ""passwd"";
 	salt :any =""salt"";
 	res :any ; 
  constructor(public navCtrl: NavController, public navParams: NavParams) {}

  ionViewDidLoad() {
    console.log('ionViewDidLoad FirstpagePage');
  }
  encrypt(){
  console.log(""-----"");
  
	this.res = pbkdf2(this.key, this.salt, 1, 64);
	console.log(this.res.toString('hex')) 
  }
}



","Try to define pbkdf2 in the constructor.


constructor(public navCtrl: NavController, public navParams: NavParams,
 public crypt:pbkdf2) {}



","499","<ionic2><sha256><pbkdf2>","0","1","1","2017-03-07 09:27:39","","0","","","","","2017-03-06 11:20:28",""
"36177095","Is SHA256 a good enough way to store passwords? (in py3)","Suppose I wish to store passwords in my code. Is SHA256 a good enough way to store them?
Here's what the code looks like:
#!/usr/bin/python3
#The password is 'helloWorld'

import hashlib

hashedString = ""11d4ddc357e0822968dbfd226b6e1c2aac018d076a54da4f65e1dc8180684ac3""

for i in range(3):
  x = input('Password: ') # For now, ignore the fact that it's exposed.
  if hashlib.sha256(x.encode()).hexdigest() == hashedString:
    print('Access granted!')
    exit()
  else:
    print('Wrong password.')
print('3 attempts!')

Now, there are problems with this, such as the possibility that there are other strings with the same SHA256 hash.
So is there another way to store them (without giving explicit information such as password length, etc.)?
","I would recommend PBKDF2 if its available. Check this link out and see if it provides what you need. 

The difference is that:
  -  PBKDF2 by design is slow
  -  SHA256 is a good hash function; it is not slow, by design
Password hashing algorithms such as PBKDF2, bcrypt, and scrypt are meant for use with passwords and are purposefully slow. Cryptographic hashing algorithms are fast. Fast is good in most situations, but not here. Slowing down the algorithm (usually by iteration) make the attacker's job much harder. Password hashes also add a salt value to each hash to make it unique so that an attacker can not attack multiple hashes at the same time.

See this post for more info on why to pick PBKDF2.
EDIT: PBKDF2 also provides padding, so you wont give out any information about password length.
","498","<python-3.x><passwords><sha256>","0","1","2","2016-03-23 16:43:09","","0","","","","","2016-03-23 11:35:04",""
"36177095","Is SHA256 a good enough way to store passwords? (in py3)","Suppose I wish to store passwords in my code. Is SHA256 a good enough way to store them?
Here's what the code looks like:
#!/usr/bin/python3
#The password is 'helloWorld'

import hashlib

hashedString = ""11d4ddc357e0822968dbfd226b6e1c2aac018d076a54da4f65e1dc8180684ac3""

for i in range(3):
  x = input('Password: ') # For now, ignore the fact that it's exposed.
  if hashlib.sha256(x.encode()).hexdigest() == hashedString:
    print('Access granted!')
    exit()
  else:
    print('Wrong password.')
print('3 attempts!')

Now, there are problems with this, such as the possibility that there are other strings with the same SHA256 hash.
So is there another way to store them (without giving explicit information such as password length, etc.)?
","Actually there are two different questions contained in your question.
1) Is it safe enough to store the password with SHA-256?
No, normally this is not safe enough, a SHA-* hash can be calculated very fast, so you can brute-force with 14 Giga SHA-256 per second. If your password is very strong, a single iteration of SAH-256 can be safe enough. As soon as others can determine the password, or if humans should be able to remember it, you absolutely should switch to BCrypt, PBKDF2 or SCrypt.
2) Are collisions a problem?
No, it is extremely unlikely that you find another password producing the same hash, in practise this can be ignored. There is another good answer about the likeliness of such a collision.
","498","<python-3.x><passwords><sha256>","0","1","2","2016-03-23 16:43:09","","0","","","","","2016-03-23 11:35:04",""
"51088470","react native using sha256","I'm trying to use this react-native library to do sha256 hashing. Here is my code:
import React, {Component} from 'react'
import { AppRegistry, Text, View} from 'react-native'
import {sha256} from 'react-native-sha256'

export default class CyrptoTest extends Component {
    constructor(props){
        super(props)
    }

    componentDidMount(){
        sha256(""test"").then(hash => {
            console.log(hash)
        })
    }

    render(){
            return(
                <View style={{padding:30}}>
                    <Text>this is CryptoTest 1</Text>
                </View>
            )
    }
}

I am getting this error: undefined is not an object (evaluating 'sha256lib.sha256')
I do not know why this is or how to fix this, any help is appreciated, thanks
PS:
Before I did any of this I first ran this in the command line:
yarn add react-native-sha256
react-native link

Also to run the app in my emulator on my mac I do this:
react-native start
react-native run-ios

","","498","<react-native><sha256>","2","","0","2018-06-28 18:21:38","","5","","6828647","","2018-06-28 18:21:38","2018-06-28 17:23:55",""
"32739491","Validate password hashed in Django using BCryptSHA256PasswordHasher in Node.js app","I am trying to migrate some users created in a Django app over to a Node.js app. Users created in the Django app have had their pssswords hashed using the BCryptSHA256PasswordHasher hasher and these are stored in a PostgreSQL database. I am able to get the whole password string from Postgres where these are stored in the form:
<algorithm>$<iterations>$<salt>$<hash>.

What I am trying to do is figure out how to take a known password (say Password1) and, using the salt from the field in Postgres, get the Node.js hashed string to match the Django string. In this way I can authenticate those users who have been migrated over.
I have made several attempts at using the bcrypt and bcryptjs npm's for Node.js but so far I'm having no luck.
A working example using any of the Node.js npm's would be great.
","I managed to figure this out after a fair bit of trial & error. This is the solution:
var crypto = require('crypto'),
    bcrypt = require(""bcrypt"");

exports.auth = function (password) {
    var preHash = crypto.createHash('sha256').update(password).digest('hex');
    var hash = bcrypt.hashSync(preHash, salt);

    return hash;
}

where the salt parameter should for example be:
$2a$12$imuoSFEBx8JJh5L9cCDJKO

The only thing I am still unclear on is the first part of the salt string '$2a$'. In my Django password field this is actually '$2b$' which according to the bcrypt page on Wikipedia is valid, yet when trying to use $2b$ in the salt passed to bcrypt (and bcryptjs too) an error is thrown. I can work around this but perhaps bcrypt just needs to be updated.
","496","<django><node.js><django-authentication><bcrypt><sha256>","2","2","1","2015-09-23 14:02:10","","2","","","","","2015-09-23 12:22:53",""
"46775391","How long to crack HMAC sha256 digest private key given data","We've built a javascript module which can be embedded in third-party webpages.  When this client module is initialized, it executes a transaction within our web application via a cross-site request.
The transaction consists of an external uuid, an email, and some additional meta properties. This message is signed with an HMAC sha256 digest, using our partner's private API key.
Ruby example:
data = {
  uuid: ""ABCAFAFDS"",
  email: ""email@gmail.com"",
  meta: {}
}

private_key = ""Qd9fe0y2ezqfae4Qj6At""
signature = OpenSSL::HMAC.hexdigest(
  OpenSSL::Digest.new(""sha256""),
  private_key,
  data.to_json
)

Within the third-party webpage, the javascript client is then initialized with the signature and the data:
new Client(signature, data).execute();
Initially, our plan was to allow the client to create a partial / incomplete transaction within our system and then require a subsequent back-end request via our REST API to confirm / finalize the transaction. Assuming that we can secure the front-end, however, it would be preferential to remove the back-end confirmation requirement.
Can we reasonably secure the client code using signed messages in this fashion? If the data and the signed message is available in the client, how difficult would it be for a bad actor to brute force the API private key length, given the length above?
","most internet traffic has signed tokens on the client these days.  All your gmail logins, facebook logins, etc do this so it is fairly standard.  I'd recommend using an existing standard (and 3rd party library) rather than roll your own token though.  This will let you leverage other people's expertise in this area.
JWT (json web token) is in common use and there are many libraries for working with JWT's.  See https://jwt.io for more information.
","495","<javascript><sha256><hmac>","0","2","1","2017-10-16 17:04:35","46775500","1","","","","","2017-10-16 16:57:42",""
"34074040","How can I Match SHA256 between classic asp and asp.net","I am in the process of increasing a sites security to include sha256 encryption along with a salt in a classic ASP page. to do this i am using code from this site. http://www.freevbcode.com/ShowCode.asp?ID=2565
I will eventually upgrade the site to .net so i want to make sure i can match the encrypted password in both classic asp and .net. 
In classic asp i am calling the encryption like so. 
GeneratedNewPassword = SHA256(Password & Random & NewGuid)

and generated a password of this: 2551baf9ab959dcb4224b3c3080b5888e0866be1a53f4a123645b71020272a3c
I then tried to create this same thing in .net
string hashedPassword = Security.HashSha1(password + random + dbUserGuid);
SHA256 sha256 = SHA256Managed.Create(); //utf8 here as well
byte[] bytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(password + random + dbUserGuid));
string result = Convert.ToBase64String(bytes);

Which generated a string like this: fzC5FX4ShhZrdqy8MVM7PPVnW4D2gaX6DlinPDRFT2I=
I am guessing it has something to do with the utf that I am using, but not sure. 
Any help would be appreciated. 
","I figured out my mistake. My guid coming in from my database in classic asp was upper case and in .net it was lower case. Once I did a toUpper on the incoming guid my hashes matched. 
Thanks for the help. 
","493","<c#><asp-classic><sha256>","1","0","1","2015-12-04 00:00:28","","3","","","","","2015-12-03 18:59:04",""
"33092256","Encrypt and Decrypt iOS/Node.js Security Inquiry","I'm currently using AES128 on both platforms and my code from this answer

Note: I changed the code a bit to deviate from using an IV because I thought it was overkill for the purpose of my application. 

node.js:
    var CryptoJS = require(""crypto-js"");
    var crypto = require('crypto');
    var password = ""1234567890123456"";
    var salt = ""gettingsaltyfoo!"";
    var hash = CryptoJS.SHA256(salt);
    var key = CryptoJS.PBKDF2(password, hash, { keySize: 256/32, iterations: 1000 });
    var algorithm = 'aes128';
    console.log(key.toString(CryptoJS.enc.Base64));

function encrypt(text){
  var cipher = crypto.createCipher(algorithm,key.toString(CryptoJS.enc.Base64));
  var crypted = cipher.update(text,'utf8','hex');
  crypted += cipher.final('hex');
  return crypted;
}

function decrypt(text){
  var decipher = crypto.createDecipher(algorithm,key.toString(CryptoJS.enc.Base64));
  var dec = decipher.update(text,'hex','utf8');
  dec += decipher.final('utf8');
  return dec;
}


iOS:
        #import <CommonCrypto/CommonCrypto.h>
NSString* password = @""1234567890123456"";
NSString* salt = @""gettingsaltyfoo!"";
-(NSString *)decrypt:(NSString*)encrypted64{

    NSMutableData* hash = [NSMutableData dataWithLength:CC_SHA256_DIGEST_LENGTH];
    NSMutableData* key = [NSMutableData dataWithLength:CC_SHA256_DIGEST_LENGTH];
    CC_SHA256(salt.UTF8String, (CC_LONG)strlen(salt.UTF8String), hash.mutableBytes);
    CCKeyDerivationPBKDF(kCCPBKDF2, password.UTF8String, strlen(password.UTF8String), hash.bytes, hash.length, kCCPRFHmacAlgSHA1, 1000, key.mutableBytes, key.length);
    NSLog(@""Hash : %@"",[hash base64EncodedStringWithOptions:0]);
    NSLog(@""Key : %@"",[key base64EncodedStringWithOptions:0]);


    NSData* encryptedWithout64 = [[NSData alloc] initWithBase64EncodedString:encrypted64 options:0];
    NSMutableData* decrypted = [NSMutableData dataWithLength:encryptedWithout64.length + kCCBlockSizeAES128];
    size_t bytesDecrypted = 0;
    CCCrypt(kCCDecrypt,
            kCCAlgorithmAES128,
            kCCOptionPKCS7Padding,
            key.bytes,
            key.length,
            NULL,
            encryptedWithout64.bytes, encryptedWithout64.length,
            decrypted.mutableBytes, decrypted.length, &bytesDecrypted);
    NSData* outputMessage = [NSMutableData dataWithBytes:decrypted.mutableBytes length:bytesDecrypted];
    NSString* outputString = [[NSString alloc] initWithData:outputMessage encoding:NSUTF8StringEncoding];
    NSLog(@""Decrypted : %@"",outputString);


    return outputString;
}
-(NSString *)encrypt:(NSString *)toEncrypt{
    NSMutableData* hash = [NSMutableData dataWithLength:CC_SHA256_DIGEST_LENGTH];
    NSMutableData* key = [NSMutableData dataWithLength:CC_SHA256_DIGEST_LENGTH];
    CC_SHA256(salt.UTF8String, (CC_LONG)strlen(salt.UTF8String), hash.mutableBytes);
    CCKeyDerivationPBKDF(kCCPBKDF2, password.UTF8String, strlen(password.UTF8String), hash.bytes, hash.length, kCCPRFHmacAlgSHA1, 1000, key.mutableBytes, key.length);

    NSData* message = [toEncrypt dataUsingEncoding:NSUTF8StringEncoding];
    NSMutableData* encrypted = [NSMutableData dataWithLength:message.length + kCCBlockSizeAES128];
    size_t bytesEncrypted = 0;
    CCCrypt(kCCEncrypt,
            kCCAlgorithmAES128,
            kCCOptionPKCS7Padding,
            key.bytes,
            key.length,
            NULL,
            message.bytes, message.length,
            encrypted.mutableBytes, encrypted.length, &bytesEncrypted);
    NSString* encrypted64 = [[NSMutableData dataWithBytes:encrypted.mutableBytes length:bytesEncrypted] base64EncodedStringWithOptions:0];
    NSLog(@""Encrypted : %@"",encrypted64);
    return encrypted64;
}

MY QUESTION: Is it okay if I hardcode the salt like this? I'm trying to encrypt and decrypt the password (the var password and NSString password will probably be hardcoded into something). I've read online that I need to keep my salt with my password in my db. If it's not okay if I hardcode my salt, how do I send it from iOS to node.js and be consistent with the salt? Should my iOS request look like this?
{
key:""someKeyGeneratedOnTheSpotWithRandomSalt"",
password:""somePasswordGeneratedFromKey""
}

and in my backend check the password by pulling these fields from the database?
{
key:""someKeyGeneratedWhenTheUserFirstSignedUp"",
password:""somePasswordGeneratedFromTheOrginalKeyWhenUserFirstSignedUp""
}

And then decrypt both passwords using the key and password generated from both scenarios? 
OR is it okay to have a hardcoded salt, say the username, so that way the key is always the same per user?
Basically I'm confused on whether or not I have the right idea for my encryption model. 
Thanks for any assistance. 
","Typically a random salt is used and prepended to the encrypted data. It is also common to all prepend the PBKDF2 iteration count along with a version number helps for future-proofing. Finally, skipping an iv reduces the protection of the first block and you might consider an authentication hash.
This is similar to what RNCryptor does. See RNCryptor-Spec-v3.md for a detail of a encrypted message.
Notes:
I don't understand CC_SHA256 of the salt, that shouldn't be necessary.  
NSData* outputMessage = [NSMutableData dataWithBytes:decrypted.mutableBytes 
length:bytesDecrypted];
is unnecessary, just set the length of decrypted
decrypted.length = bytesDecrypted;
and use decrypted in place of outputMessage.
","492","<ios><node.js><encryption><sha256><password-encryption>","4","1","1","2015-10-13 01:49:15","33092785","1","2","-1","","2017-05-23 11:59:43","2015-10-13 00:25:08",""
"49889096","C# Sign Data with SHA-256withECDSA using BouncyCastle produce different Signature everytime","I am following this tutorial to sign data with SHA-256withECDSA. 
Using the same private key and message, it generated different signature result every time. The only change I made is return Base64 encoded string instead of Base58
Is it supposed to be the same signature every time?
public static string GetSignature(string privateKey, string message)

{

    var curve = SecNamedCurves.GetByName(""secp256k1"");

    var domain = new ECDomainParameters(curve.Curve, curve.G, curve.N, curve.H);
    var keyParameters = new

            BC.Crypto.Parameters.ECPrivateKeyParameters(new BC.Math.BigInteger(privateKey),

            domain);

    ISigner signer = SignerUtilities.GetSigner(""SHA-256withECDSA"");

    signer.Init(true, keyParameters);

    signer.BlockUpdate(Encoding.ASCII.GetBytes(message), 0, Encoding.ASCII.GetBytes(message).Length);

    var signature = signer.GenerateSignature();

    return Convert.ToBase64String(signature);

}

Example result
MEQCIB0rqb8Dbrh+e2akoCVJaUS4tyJYqfRf8vdz/W2fUOomAiB3D2BaMYjwSgKRQyTd/W+YEn+wT0I4dq1hmgBfe/Sh7g==

MEUCIQDsWxG8Zr7MCemgGylAN+Y32qJYuDmqZMpaPwxTKosJ3AIgE3oSsBjcua/aCvfNXiMfcUM9U92p9aRlAIEopw/wvd0=

MEYCIQCjQ0EDHVFhASuUSPnCGjCb0O1sq3Op+aAl01afjIVviQIhAOnGyGN9cKswFn97de0o/Im9Hswo6AdnLhKIZSUcYbDY

MEYCIQCAqcHyhRcbLtuyimJ4XCHvJcz0p0Wd7FgJ1+07sOsC/gIhAKYwlhRv98C/3XeZE1TujkB9qMn2C99GaguJoWng9+2y

MEUCIQD7ObA0n0JpRNQDe+3udpeKGEk79KsrjHsjv/4Wlj2bigIgZERRSQBEN91HTJHqn+prlwSCKUT4AJx061Gi0tv8Xuw=

","So the answer is: it should be non deterministic - everytime is different
https://en.wikipedia.org/wiki/Nondeterministic_algorithm
","492","<c#><bouncycastle><sha256><ecdsa>","1","2","1","2018-04-23 03:22:41","49972959","2","","2680527","","2018-04-23 03:21:32","2018-04-17 23:52:00",""
"37941450","Difference between RSAwithSHA256 and SHA256","I need to sign XML SAML message with the SAML 2.0 standardised algorithm (RSAwithSHA256). But my saml plugin (passport-saml) only seems to support sha1 and sha256. The SHA256 sounds pretty close to RSAwithSHA256, but probably is not the same thing? What is the difference, and how could I use RSAwithSHA256 instead? I probably need to edit the passport-saml library, to allow the use of RSAwithSHA256 algorithm?
","I try to explain the differences, but not how to solve your issue.
RSA is a Public Key Cryptographic algorithm (Public and Private Key-Pair algorithm) and it assures Confidentiality, Authenticity (includes Identification) and Non-Repudiation.
SHA-256 is a Hashing algorithm, that produce a unique, fixed size 256-bit (32-byte) hash and it assures Message Integrity.
Hashing algorithm employed as follows, 

Sender sends message and its hash to receiver. [Hashing employed]
Receiver hash the message to generate new hash. [Hashing employed]  
Receiver check whether the new hash is equal to original hash. 


If its equal, then message integrity is confirmed and receiver process the message further. 
If its unequal, then message is tampered and receiver discard the message.


Here, how receiver confirms that message and its hash are indeed sent by expected sender? There is no authentication or identification of sender by receiver in the above case.
To do that, we have to use both Public Key Cryptography and Hashing Algorithms (like RSAWithSHA256) together to satisfy the above said requirement.
So, when employ Public Key Cryptography and Hashing Algorithms together, 

Sender sends message and its encrypted hash (using private-key of sender) to receiver. [Encryption and Hashing employed]
Receiver decrypt the encrypted hash (using public-key of sender). [Decryption and Hashing employed]
Receiver hash the message to generate new hash. [Hashing employed]
Receiver check whether the new hash is equal to decrypted hash.


If its equal, then message integrity, authenticity and
identification of sender is confirmed and receiver process the
message further.
If its unequal, then message is tampered or not sent by intended
sender (since encrypted hash is not generated with private-key of expected sender) and receiver discard the message.


","489","<javascript><passport.js><saml-2.0><sha256><rsa-sha256>","0","2","1","2016-06-21 21:56:38","37955051","0","1","","","","2016-06-21 10:06:20",""
"38459375","Android Application Certificate","How can I get certificate sha256 hash of another application installed on android device?
I am using solution mentioned in How to get APK signing signature?. But it is giving signature that does not seems to be certificate hash.
","Despite the name, that is the public portion of the certificate.
My CWAC-Security library has a SignatureUtils class with a getSignatureHash() method that calculates the SHA-256 hash of this information. The results are the same as if you used Java's keytool to dump the hash from the keystore.
The core code is fairly short:
public static String getSignatureHash(Context ctxt, String packageName)
  throws NameNotFoundException, NoSuchAlgorithmException {
    MessageDigest md=MessageDigest.getInstance(""SHA-256"");
    Signature sig=
        ctxt.getPackageManager()
            .getPackageInfo(packageName, PackageManager.GET_SIGNATURES).signatures[0];

    return(toHexStringWithColons(md.digest(sig.toByteArray())));
  }

  // based on https://stackoverflow.com/a/2197650/115145

  public static String toHexStringWithColons(byte[] bytes) {
    char[] hexArray=
        { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B',
            'C', 'D', 'E', 'F' };
    char[] hexChars=new char[(bytes.length * 3) - 1];
    int v;

    for (int j=0; j < bytes.length; j++) {
      v=bytes[j] & 0xFF;
      hexChars[j * 3]=hexArray[v / 16];
      hexChars[j * 3 + 1]=hexArray[v % 16];

      if (j < bytes.length - 1) {
        hexChars[j * 3 + 2]=':';
      }
    }

    return new String(hexChars);
  }

","487","<android><hash><certificate><sha256>","0","3","2","2016-07-19 13:11:30","","0","","-1","","2017-05-23 12:32:36","2016-07-19 13:00:37",""
"38459375","Android Application Certificate","How can I get certificate sha256 hash of another application installed on android device?
I am using solution mentioned in How to get APK signing signature?. But it is giving signature that does not seems to be certificate hash.
","You can try something like this:
    PackageManager packageManager = getPackageManager();
    int flag = PackageManager.GET_SIGNATURES;

    PackageInfo packageInfo = null;
        try {
            packageInfo = packageManager.getPackageInfo(packageName, flag);

            byte[] certificates = packageInfo.signatures[0].toByteArray();
            InputStream input = new ByteArrayInputStream(certificates);
            CertificateFactory factory = CertificateFactory.getInstance(""X509"");
            X509Certificate certificate = (X509Certificate) factory.generateCertificate(input);

            MessageDigest messageDigest = MessageDigest.getInstance(""SHA1"");
            byte[] publicKey = messageDigest.digest(certificate.getEncoded());

        } catch (PackageManager.NameNotFoundException exception) {
            exception.printStackTrace();
        } catch (CertificateException e) {
            e.printStackTrace();
        } catch (NoSuchAlgorithmException e2) {
            e2.printStackTrace();
        }

","487","<android><hash><certificate><sha256>","0","0","2","2016-07-19 13:11:30","","0","","-1","","2017-05-23 12:32:36","2016-07-19 13:00:37",""
"35865563","How to validate a SHA256 signed result with a public key","I need to validate a user by using an external authorize API. This API requires me to send a SHA-256 hash of something unique on my client side. I should use this to validate the signature later on.
I'm generating the Hash like this. As text I'm sending a unique Session ID:
private static string CalculateSHA256Hash(string text)
{
    UnicodeEncoding UE = new UnicodeEncoding();
    byte[] hashValue;
    byte[] message = UE.GetBytes(text);

    SHA256Managed hashString = new SHA256Managed();
    string hex = """";

    hashValue = hashString.ComputeHash(message);

    foreach (byte x in hashValue)
    {
        hex += String.Format(""{0:x2}"", x);
    }

    return hex;
}

From the API I received a public signing key as a string:
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA185vTa2xheB 
<..>
SLhDuNk0SkiL7f8KbOG3tP9IDmAcAfoZWw/o2XjUxVLp1uw9V/hj4oJoapyS2sW4
cwIDAQAB
-----END PUBLIC KEY-----

I should use this key somehow to validate the response. The response I receive is this 512 character long string:
""57ec50faf72340f9618cf690160ab6b251a2d76fcce61583779804a07f8ac1f520bf09a4f5918a3
<...>
245f8d00b2cce3fa1ecc849f8771be0c8""

Now I should be able to Validate the signature I've received with the Public-key-string and my own hashed value.
How do I do this?
Edit
The hasing & padding scheme used on the API is ""SHA256_RSA_PKCS_PSS""
","","487","<c#><validation><rsa><sha256>","1","","0","2016-10-12 09:32:12","","2","","1351076","","2016-10-12 09:32:12","2016-03-08 11:00:23",""
"48972597","How to use sha256sum --check option to fail if incorrect hash on a docker script","I'm writing a docker script and therefore I cannot rely on bash scripts. I need the docker script to fail if the sha256sum of a downloaded file (though wget) hash is incorrect. I see that there exists a check option in sha256sum, but I can't find how to use it.
It's something like sha256sum -c hash file but it won't work for me. I think I actually must supply a file to -c, something like using echo.
","Two Examples:
sha256sum /etc/passwd > checksum
sha256sum -c checksum

Output:

/etc/passwd: OK

or
sha256sum /etc/passwd > checksum
sha256sum --status -c checksum
echo ""$?""

Output:

0

","485","<bash><shell><docker><sha256><sha>","0","1","2","2019-09-12 11:34:37","48972723","1","","3776858","","2018-02-25 11:23:50","2018-02-25 10:47:53",""
"48972597","How to use sha256sum --check option to fail if incorrect hash on a docker script","I'm writing a docker script and therefore I cannot rely on bash scripts. I need the docker script to fail if the sha256sum of a downloaded file (though wget) hash is incorrect. I see that there exists a check option in sha256sum, but I can't find how to use it.
It's something like sha256sum -c hash file but it won't work for me. I think I actually must supply a file to -c, something like using echo.
","Here's an example of sha256sum -c used with a file.
echo ""68a2297eb099d1a76097905a2ce334e3155004ec08cdea85f24527be3c48e856  go1.13.linux-amd64.tar.gz""|sha256sum -c - 

go1.13.linux-amd64.tar.gz: OK
You pass in the checksum space filename as the above example shows for go1.13.
","485","<bash><shell><docker><sha256><sha>","0","0","2","2019-09-12 11:34:37","48972723","1","","3776858","","2018-02-25 11:23:50","2018-02-25 10:47:53",""
"30190723","How can I use SHA-256 Certificate to generate XML Signature in .Net 2.0?","My application has a requirement to sign a XML document with a SHA-256 certificate. Previously application was based on .Net 4.5. So I used this post to achieve the requirement and it was working fine. But now there is a requirement to downgrade the application to use .Net 2.0.
Even second option in the above post is for the applications based on .Net 3.5 and above. How can I use SHA256RSA certificate to sign a XML document in .Net 2.0? At least is there any other library I can use?
","","484","<xml><.net-2.0><digital-signature><sha256><xml-signature>","1","","0","2015-05-12 12:20:47","","3","","","","","2015-05-12 12:20:47",""
"38787349","Translation from Python to JavaScript: HMAC-SHA256","I'd like to convert the following piece of Python code to JavaScript:
signature_string = self.format(""{apip_id}{identity_id}{method}{uri}{content_hash}{timestamp}{nonce}"") # pyhton unicode string in UTF-8 format
signature_bytes = signature_string.encode('utf-8') # previous string is converted in a python bytes string
apip_key_bytes = base64.b64decode(self.apip_key.encode('utf-8')) # pyhton unicode string is converted in a python bytes string and then in ??
hasher = hmac.new(apip_key_bytes, signature_bytes, hashlib.sha256) # hash is calculated
hash_bytes = hasher.digest() # hash coded in a python bytes string
return base64.b64encode(hash_bytes).decode('utf-8') # the hash in bytes is converted to a base64 string

I tried to use crypto.JS and developed following code but I don't think I get the correct result, This is my conversion in JavaScript of the above code
function stringToAsciiByteArray(str) {
    var bytes = [];
    for (var i = 0; i < str.length; ++i) {
        var charCode = str.charCodeAt(i);
        if (charCode > 0xFF) // char > 1 byte since charCodeAt returns the    UTF-16 value
        {
        throw new Error('Character ' + String.fromCharCode(charCode) + '  can\'t be represented by a US-ASCII byte.');
        }
       bytes.push(charCode);
    }
    return bytes;
}

var signature_bytes = stringToAsciiByteArray(signature_string);
var apip_key_bytes = stringToAsciiByteArray(apip_key);

CryptoJS.enc.u8array = {
    stringify: function(wordArray) {
        // Shortcuts
        var words = wordArray.words;
        var sigBytes = wordArray.sigBytes;

        // Convert
        var u8 = new Uint8Array(sigBytes);
        for (var i = 0; i < sigBytes; i++) {
            var byte = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
            u8[i] = byte;
        }

        return u8;
    },
    parse: function(u8arr) {
        // Shortcut
        var len = u8arr.length;

        // Convert
        var words = [];
        for (var i = 0; i < len; i++) {
            words[i >>> 2] |= (u8arr[i] & 0xff) << (24 - (i % 4) * 8);
        }

        return CryptoJS.lib.WordArray.create(words, len);
    }
};

var wordArray1 = CryptoJS.enc.u8array.parse(signature_bytes);
var wordArray2 = CryptoJS.enc.u8array.parse(apip_key_bytes);
var hash_bytes = CryptoJS.HmacSHA256(wordArray1, wordArray2);
return window.btoa(hash_bytes);

The hash code I get after this procedure I don't think it's correct, it doesn't work, am I doing something wrong?
","","483","<javascript><python><sha256><hmac><cryptojs>","2","","0","2016-08-05 17:22:31","","7","","1816580","","2016-08-05 17:22:31","2016-08-05 10:46:13",""
"16036105","Converting Encryption used in C# to PHP","I have been trying to convert a C# encryption technique to PHP. The C# code is as given below. I have no experience in C#. I had to take over project in C#
private void button1_Click(object sender, EventArgs e)
{
    //byte[] response = ComputeHash(""pradeep14520"", BitConverter.GetBytes(""0x9A111B734E4F10469668""));
    //byte[] response = ComputeHash(""pradeep14520"", dictionary.ElementAt(0).Value.Salt);
    byte[] response =ComputeHash(""pradeep14520"", StringToByteArray(""9A111B734E4F10469668""));
    string hex = BitConverter.ToString(response).Replace(""-"", string.Empty);
    string base64 = Convert.ToBase64String(response); // 683CA8E00E8CE41A079B7C86CE4960AC2376CD85F2AEAB2E4DF99FFA7F7FA4F3
}

 private byte[] ComputeHash(string password, byte[] storedSalt)
    {
        byte[] passwordBytes = Encoding.Unicode.GetBytes(password);
        if ((int)storedSalt.Length > 0)
        {
            byte[] passwordAndSalt = new byte[(int)passwordBytes.Length + (int)storedSalt.Length];
            passwordBytes.CopyTo(passwordAndSalt, 0);
            storedSalt.CopyTo(passwordAndSalt, (int)passwordBytes.Length);
            passwordBytes = passwordAndSalt;
        }

        return new SHA256Managed().ComputeHash(passwordBytes);
    }

I have commented the sample response in the button click function. I tried to implement the same functionality using PHP. with the below code after referring this link
.I have found that there is no need to produce byte arrays in PHP as strings are byte arrays in php.
$originalSalt = 'pradeep14520';
    $originalSalt .= '9A111B734E4F10469668';
    hash(""sha256"",iconv(mb_detect_encoding($originalSalt, mb_detect_order(), false), ""UTF-8"", $originalSalt),true);

I have passed the last argument to the hash function as false inorder to get raw output.
But i am getting different Output for PHP and C#
for PHP :afc80d1a6cae81e8f868b054dafbb74bdd86399d771fceef574e4b373506b704
for C#  :683CA8E00E8CE41A079B7C86CE4960AC2376CD85F2AEAB2E4DF99FFA7F7FA4F3

Plz help.
Thanks in advance.
Based on the suggestion provided by Daniel Hilgarth i have modified the code and made it work.
   $password = 'pradeep14520';
$originalSalt = hex2bin('9A111B734E4F10469668');
echo    strtoupper(hash(""sha256"",mb_convert_encoding($password,""UTF-16LE"").$originalSalt,false));

I hope it will help someone..
","The problem here is that the C# code uses Encoding.Unicode. This is UTF-16, i.e. it returns two bytes per character, even if the character is representable in ASCII.
You need to use an equivalent of this in PHP or change your C# code to use either Encoding.UTF8 or Encoding.ASCII, depending on what PHP strings really are.
","478","<c#><php><bytearray><sha256>","-1","1","1","2013-05-22 12:18:22","16036208","1","","-1","","2017-05-23 11:57:18","2013-04-16 11:41:49","2013-04-16 14:00:29"
"5926169","How do I convert the first 32 bits of the fractional part of a Float into a Word32?","Say I have a Float. I want the first 32 bits of the fractional part of this Float? Specifically, I am looking at getting this part of the sha256 pseudo-code working (from the wikipedia)
# Note 1: All variables are unsigned 32 bits and wrap modulo 232 when calculating
# Note 2: All constants in this pseudo code are in big endian

# Initialize variables
# (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
h[0..7] := 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19

I naively tried doing floor (((sqrt 2) - 1) * 2^32), and then converting the returned integer to a Word32. This does not at all appear to be the right answer. I figured that by multipling by 2^32 power, I was effectively left shifting it 32 places (after the floor). Obviously, not the case. Anyway, long and the short of it is, how do I generate h[0..7] ?
","The best way to get h[0..7] is to copy the hex constants from the Wikipedia page. That way you know you will have the correct ones.
But if you really want to compute them:
scaledFrac :: Integer -> Integer
scaledFrac x =
    let s = sqrt (fromIntegral x) :: Double
    in  floor ((s - fromInteger (floor s)) * 2^32)

[ printf ""%x"" (scaledFrac i) | i <- [2,3,5,7,11,13,17,19] ]

","477","<haskell><floating-point><sha256><sha>","4","5","1","2012-05-16 19:21:16","5926247","1","1","44390","","2012-05-16 19:21:16","2011-05-08 07:21:08",""
"46176405","AMP update-cache request returns 403","I am trying to implement Google AMP update-cache request using this documentation.
My implementation
As suggested in the tutorial, firstly I get the cache information from https://cdn.ampproject.org/caches.json and then I iterate through these caches to perform update.
Simplified code for single cache (as there is just one at the moment anyways):
Main logic
String firstPartUrl = ""https://amp--frontend-dpo-styria--publishing-com.cdn.ampproject.org""
String secondPartUrl = ""/update-cache/c/s/amp-frontend.dpo.styria-publishing.com/octopus/5267614?amp_action=flush&amp_ts=1505218616""

secondPartUrl = signRequestUrl(secondPartUrl);

performRequest(firstPartUrl, secondPartUrl);

Signing function
private String signRequestUrl(String requestUrl) throws Exception {
    URL url = Resources.getResource(""rsa/private-key-pcks8.pem"");
    String privateKey = Resources.toString(url, Charsets.UTF_8);

    String signature = signSHA256RSA(requestUrl, privateKey);

    StringBuilder builder = new StringBuilder(requestUrl);
    builder.append(""&amp_url_signature="");
    builder.append(signature);
    return builder.toString();
}

public static String signSHA256RSA(String input, String privateKey) throws Exception {
    // Remove markers and new line characters in private key
    String realPK = privateKey.replaceAll(""-----END PRIVATE KEY-----"", """")
            .replaceAll(""-----BEGIN PRIVATE KEY-----"", """")
            .replaceAll(""\r\n"", """")//windows
            .replaceAll(""\n"", """");//unix

    byte[] b1 = Base64.getDecoder().decode(realPK);
    PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(b1);
    KeyFactory kf = KeyFactory.getInstance(""RSA"");

    Signature privateSignature = Signature.getInstance(""SHA256withRSA"");
    privateSignature.initSign(kf.generatePrivate(spec));
    privateSignature.update(input.getBytes());
    byte[] s = privateSignature.sign();
    return Base64.getUrlEncoder().withoutPadding().encodeToString(s);
}

My public key is published here: https://amp-frontend.dpo.styria-publishing.com/.well-known/amphtml/apikey.pub
URL produced by the app looks like this:
https://amp--frontend-dpo-styria--publishing-com.cdn.ampproject.org/update-cache/c/s/amp-frontend.dpo.styria-publishing.com/octopus/5267614?amp_action=flush&amp_ts=1505218616&amp_url_signature=YiQ_ZEXq-FyoTQfk4YdL-n3rR0JqF6PQ8J86iCBcyNFino7t5_zSSqLR4vDoNz6o9Bj_5UbYFdpRa-J04MoL_-mizxo6M8OftcgbKjBNfgvXjG4SIzKZGxVWkBIWBLAoaEXqnkAeEsyyjBAxmX7Z3O4_GAY77Rqdb4vGKtbszSK5QHKmHAzRRYUnu2wMlYkPNTA_3yyHaZZPs0cRpksrDHLABZbGKgluMtL1lbKPSye1XK_9PBneATiSmSKlxuIyVqeFWlxwMgzEY5gz9QZCR0Tv1GvOZv6dAgqXnVR9t2vb2OYNqrR0_WO9BuNwpRu3Sz1OA1_FuukbL5G41cuj2w
What I tried
I even tried to follow the signing steps in the command line, but even after that the URL I obtained returned 403.
I tried following tips from this question (making sure that I use SHA256 and setting content-type of apikey to text/plain, but it did not help)
My question
Do you know why is Google AMP still returning 403? I suspected, that there might be an issue with my Base64 encoding, because the documentation is not very clear about that, but I am not sure.
EDIT
I realized there might be a problem with the implementation of the function building secondPartUrl - specifically the timestamp. I created the timestamp using ZonedDateTime.now(), which is obviously wrong, as I am in different Timezone than UTC. However, changing it to Instant.now() did not help.
","","477","<java><spring><sha256><amp-html><rsa-sha256>","1","","0","2017-09-13 12:35:00","","0","","1725013","","2017-09-13 12:35:00","2017-09-12 12:27:46",""
"46143154","Computing SHA1 hash of a file in Google Drive","I need to compute the SHA-256 hash of a file uploaded via ajax to Google Drive  in my appscript deployed as a web-app. In the server code, I am computing it like this:
function getHash(file) {
  var hashBytes = Utilities.computeDigest(Utilities.DigestAlgorithm.SHA_256, file.getBlob().getDataAsString());
  // convert raw bytes into a base16-encoded string
  var hash = """";
  for(var i=0; i<hashBytes.length; i++) {
    var byte = hashBytes[i];
    if(byte < 0) {
      byte += 256;
    }
    var byteString = byte.toString(16);
    // if byte is not represented by 2 chars it must be 0-padded
    if(byteString.length == 1) {
      byteString = '0' + byteString;
    }
    hash += byteString;
return hash;
  }

However, the computed hash is different than the one I get for the same file e.g. executing
shasum -a 256 myfile
in a bash shell. Is there something wrong in my getHash() function?
I'd need this function to work on any file type.
","","477","<javascript><hash><google-apps-script><google-drive-api><sha256>","0","","0","2017-09-10 16:49:35","","4","","","","","2017-09-10 16:49:35",""
"37382953","how do i crack sha-256 via bruteforce with ruby?","As the title says, how would one go about cracking a sha256 hash via brute-force with ruby?
I have searched everywhere, but I can't find anything. I am trying to decrypt it from a string input from the user.
","I'm not going to write your code for you, but I will give you a start.

Create an array of all letters and digits.
Use Array#repeated_permutation to go through all possible 5 character strings.
Use the Digest module to generate the SHA-256 digest.

","476","<ruby><sha256>","-6","3","1","2016-05-23 06:19:38","","23","","","","","2016-05-23 05:05:25","2016-06-02 06:10:51"
"40961021","Reducing the hash value of SHA 256 using modulus","I am trying to create an alternative to a bloom filter. I am using an array of bits that has capacity to hold 100 billion bits (around 25 GB). Initially, all the bits will be set to zero.The steps I will take to create it are as follows :  

I will take an input and generate a hash using SHA-256(due to less chances of collision) and perform modulus operation with 100 billion on the generated hash to obtain a value say N.
I will set the bit on the Nth position in the array to 1.
If the bit is already set on the Nth position, then I will add the input to a bucket specific for that bit.

How do I find the increase in the number of collisions as a result of performing modulus on the hash value ? 
If I have 40 billion entries as the input, what are the chances of collisions using the proposed method? 
","","474","<sha256><hash-function><bloom-filter>","0","","0","2016-12-07 03:38:04","","3","","706119","","2016-12-07 03:38:04","2016-12-04 16:47:06",""
"30326370","snmp tls with sha256 certificate failed in net-snmp.5.7.3","The SNMPTLS with SHA1 certificate works fine in 5.7.3. I upgraded netsnmp to 5.7.3 for SHA256 support but the snmpd demon shows error
""error finding server identity keys""
Command :
snmpget -v 3 --defSecurityModel=tsm -u joecool -l authPriv -T our_identity=manager -T their_identity=snmpd tlstcp:192.168.1.125:10161 sysContact.0

The snmpget command throws following error
tlstcp: failed to ssl_connect
snmpget: Unknown host (tlstcp:192.168.1.125:10161)

snmpd demon throws error :
TLSTCP: Failed to create a SSL BIO

The configuration in snmpd.conf is shown below :
 master agentx
 agentXTimeout 100
 [snmp] localCert 0D:C1:CA:B7:2A:83:5E:43:42:1E:A1:0D:07:2C:97:2B:B5:75:20:2B
 rwcommunity public
 certSecName 10 9A:C9:59:BC:A8:C4:C1:01:4B:6F:0E:57:CB:3E:3E:6E:AD:08:E0:9E --cn
 rwuser -s tsm ""joecool""

starting snmpd 
 snmpd -f -Lo -C -c /usr/share/snmp/snmpd.conf -Dtsm,dtls,openssl,cert tlstcp:10161 dtlsudp:10161 udp:161

The detailed error log is given below :

Blockquote
Turning on AgentX master support.
  cert:util:config: parsing 10 9A:C9:59:BC:A8:C4:C1:01:4B:6F:0E:57:CB:3E:3E:6E:AD:08:E0:9E --cn
  cert:find:params: looking for remote_peer(2) in MULTIPLE(0x200), hint 3196293592
  cert:find:params: looking for remote_peer(2) in FINGERPRINT(0x2), hint 3196293592
  cert:find:params: hint = 9A:C9:59:BC:A8:C4:C1:01:4B:6F:0E:57:CB:3E:3E:6E:AD:08:E0:9E
  cert:find:params: looking for remote_peer(2) in FILE(0x1), hint 3196293592
  cert:find:params: hint = 9A:C9:59:BC:A8:C4:C1:01:4B:6F:0E:57:CB:3E:3E:6E:AD:08:E0:9E
  cert:map:add: pri 10, fp 9ac959bca8c4c1014b6f0e57cb3e3e6ead08e09e
  cert:find:params: looking for identity(1) in DEFAULT(0x0), hint 0
  cert:find:params: looking for identity(1) in MULTIPLE(0x200), hint 234144
  cert:find:params: looking for identity(1) in FINGERPRINT(0x2), hint 234144
  cert:find:params: hint = 0D:C1:CA:B7:2A:83:5E:43:42:1E:A1:0D:07:2C:97:2B:B5:75:20:2B
  cert:find:params: looking for identity(1) in FILE(0x1), hint 234144
  cert:find:params: hint = 0D:C1:CA:B7:2A:83:5E:43:42:1E:A1:0D:07:2C:97:2B:B5:75:20:2B
  error finding server identity keys
  dtlsudp: netsnmp_dtlsudp_transport(): transports/snmpDTLSUDPDomain.c, 1421:
  A SNMP version other than 3 was requested with (D)TLS; using 3 anyways
  tsm: TSM: Reached our session initialization callback
  NET-SNMP version 5.7.3
  `

","","473","<snmp><sha><sha256><net-snmp>","3","","0","2015-05-19 13:00:05","","0","1","","","","2015-05-19 13:00:05",""
"47441602","SHA256 Hash to float number","I've been trying to convert a hash to a float number, so far I have only achieved to generate a number from it.
How would I convert a SHA256 Hash to a float number ranging from 0.0 to 1.0?
How I got a number,
var hash = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855';
var number = hash.substr(0, 8);
number = parseInt(number, 16);
number = Math.abs(number) % 11;
console.log('Number (0 - 10): ' + number);

","Something like this:
var hash = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855';
var number = 0.0;
for(let i=0;i<hash.length;i++) {
    number += parseInt(hash.charAt(i), 16) / 16;
}
number /= hash.length;
console.log('number = ' + number);

In this example, I give the equal weight to each of the 32 numbers (which seems reasonable since a hash is really not a number). But, you can give different weights to different bytes. For instance, you can give a weight of 2^31 to the first byte, and 2^30 for the second byte, etc. and normalize the final number accordingly.
Edit: You can also do the comparison for multiple bytes at a time. E.g., 16 numbers with each coming from 2 bytes, or 8 numbers with each coming from 4 bytes, etc. As you increase the ""unit"" size, the resulting final number will have a ""higher fidelity"" to the original hash value.
","473","<javascript><sha256><cryptojs>","-1","0","2","2017-11-26 01:37:08","","11","","8390842","","2017-11-22 18:38:22","2017-11-22 18:27:10",""
"47441602","SHA256 Hash to float number","I've been trying to convert a hash to a float number, so far I have only achieved to generate a number from it.
How would I convert a SHA256 Hash to a float number ranging from 0.0 to 1.0?
How I got a number,
var hash = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855';
var number = hash.substr(0, 8);
number = parseInt(number, 16);
number = Math.abs(number) % 11;
console.log('Number (0 - 10): ' + number);

","The comment by Mörre contains the best answer. Simply take the first 52-bits of the hash (or any convenient 52 bits of the hash) and assign it to a javascript number. A 52-bit integer can be stored exactly as an IEEE 754 double. Then simply divide the number by 252, which should only effect the exponent bits of the number. The result is a floating point number x, 0 <= x < 1, with as much entropy as is possible given the constraints.
","473","<javascript><sha256><cryptojs>","-1","1","2","2017-11-26 01:37:08","","11","","8390842","","2017-11-22 18:38:22","2017-11-22 18:27:10",""
"23701529","PHP Fastest Way to generate random numbers and hashing em?","I have made a script that generate random 64 length strings, hashing and storing those strings in a .txt file!
<?php
/**
 * Created by PhpStorm.
 * User: Ali
 * Date: 5/16/14
 * Time: 3:13 PM
 */
set_time_limit('60');
ini_set('max_execution_time', 60);
include(""timer.php"");
$timer = new timer();
$timer->start();
function random_text( $type = 'alnum', $length = 64 )
{
    switch ( $type ) {
        case 'alnum':
            $pool = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ._';
            break;
        case 'alpha':
            $pool = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
            break;
        case 'hexdec':
            $pool = '0123456789abcdef';
            break;
        case 'numeric':
            $pool = '0123456789';
            break;
        case 'nozero':
            $pool = '123456789';
            break;
        case 'distinct':
            $pool = '2345679ACDEFHJKLMNPRSTUVWXYZ';
            break;
        default:
            $pool = (string) $type;
            break;
    }


    $crypto_rand_secure = function ( $min, $max ) {
        $range = $max - $min;
        if ( $range < 0 ) return $min; // not so random...
        $log = log( $range, 2 );
        $bytes = (int) ( $log / 8 ) + 1; // length in bytes
        $bits = (int) $log + 1; // length in bits
        $filter = (int) ( 1 << $bits ) - 1; // set all lower bits to 1
        do {
            $rnd = hexdec( bin2hex( openssl_random_pseudo_bytes( $bytes ) ) );
            $rnd = $rnd & $filter; // discard irrelevant bits
        } while ( $rnd >= $range );
        return $min + $rnd;
    };

    $token = """";
    $max = strlen( $pool );
    for ( $i = 0; $i < $length; $i++ ) {
        $token .= $pool[$crypto_rand_secure( 0, $max )];
    }
    return $token;
}
ob_start();
$i = 0;
$times_to_run = 80000;
$array = array();
while ($i++ < $times_to_run)
{
   $string = random_text();
   $hash = hash('sha256', $string);
   $print = $string . ':'.$hash.' ';
   echo $print;
}
$result = ob_get_contents();
ob_end_clean();
echo $file_name;
$exploded = explode("" "", $result);
$date = date(""Y-m-d-h-i-s"");
$file_name = $date . '.txt';
$handle = fopen($file_name, ""w"") or die(""Cannot Create File! ("".$file_name."")"");
foreach($exploded as $str)
{
    fwrite($handle, $str);
    fwrite($handle, ""\r\n"");
}
$timer->stop();
echo $timer->result();

when running this script (currently 80k strings at once) once I reached 60 secs of execution time, I got a timeout message (tcp)... I see that i have two txt files each one have 80002 strings, Im wondering why double text files instead of one?
Another Question, How can I speed up the php script up? get a more advanced host maybe?
I need to generate 10^12 hashes in a short period and 160k hashes in 2 minutes will take a lot of time to accomplish...
thanks developers!
","

Why do you want to use OpenSSL random method? You could use mt_rand or array_rand
$chars = str_split($pool);
$str = ''; 
for ($i=0; $i<64; $i++) {
    // Either:
    $str .= $chars[mt_rand(0, count($chars)-1)];
    // Or:
    // $str .= $chars[array_rand($chars)];
}

return $str;

","471","<php><string><hash><sha256>","2","0","1","2014-06-25 21:37:42","","4","","","","","2014-05-16 17:44:30",""
"36170667","PHP hash sha256 not working fine on server","I'm working on web services and an API requires a variable called $signature that is equal to:
// Signature is generated by SHA256 (Api-Key + Shared Secret + Timestamp (in seconds))

$signature = hash(""sha256"", $apiKey.$sharedSecret.time());

The rest of the code is as follows and it uses PECL 2.5.3:
$client = new http\Client;
$request = new http\Client\Request;

$request->setRequestUrl('https://api.test.hotelbeds.com/hotel-api/1.0/status');
$request->setRequestMethod('GET');
$request->setHeaders(array(
'cache-control' => 'no-cache',
'x-signature' => $signature,
'api-key' => '******************************',
'accept' => 'application/json'
));


$client->enqueue($request)->send();
$response = $client->getResponse();

echo $response->getBody();

The thing is, if I generate and var_dump the $signature value on my local server and then paste it like this:
'x-signature' => 'b67bfd70f9ba8564eddfde0aa02dffb8aa6e24f937886ae80f77efcee139e5e5',

And then run the script on the proyect server, it gives me a correct response, but if I just put:
'x-signature' => $signature,...
It gives me a ""Not authorized error"". I don't know what's going wrong, I have printed the time on the proyect server and the difference is like 10 numbers between each other, even if I put them equally, the problem persists. 
The PHP version from my local server is 5.5.12 and the one from the proyect server is 5.4.16.
So, it could be the time function, which I don't think it is, or that the hash function differs from PHP versions, but that would be strange.
Please help.
","I resolved it by changing the time zone on server and correcting the time on there.
","470","<php><web-services><api><hash><sha256>","0","1","1","2016-03-23 17:51:23","36185315","8","","22674","","2016-03-23 07:35:43","2016-03-23 05:45:29",""
"41980161","sign a string in java and SHA256","I am trying for days(!) to sign the following string with SHA256 with a secret key:  ""aaa"" the result should be (URL endcoded) :
kvoJVZMPomuGyYP3cmiJkYz2L3usuZNfh2f9LaUxO3U%3D
Can anyone help please ? 
GET
sellercentral.amazon.com
/gp/mws/registration/register.html
AWSAccessKeyId=AKIAFJPPO5KLY6G4XO7Q&SignatureMethod=HmacSHA256&SignatureVersion=2&id=1014f5ad-c359-4e86-8e50-bb8f8e431a9e&returnPathAndParameters=%2Forders%2FlistRecentOrders.jsp%3FsessionId%3D123

This is the code I am using but I can't get the same result:
private static final String QUERY = ""GET\n""+
        ""sellercentral.amazon.com\n""+
        ""/gp/mws/registration/register.html\n""+
        ""AWSAccessKeyId=AKIAFJPPO5KLY6G4XO7Q&SignatureMethod=HmacSHA256&SignatureVersion=2&id=1014f5ad-c359-4e86-8e50-bb8f8e431a9e&returnPathAndParameters=%2Forders%2FlistRecentOrders.jsp%3FsessionId%3D123"";


    public static void main(String[] args) throws Exception {
         System.out.println(encode(""aaa"", QUERY));
    }

public static String encode(String key, String data) throws Exception {
      Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
      SecretKeySpec secret_key = new SecretKeySpec(key.getBytes(), ""HmacSHA256"");
      sha256_HMAC.init(secret_key);
      return Base64.encodeBase64String(sha256_HMAC.doFinal(data.getBytes()));
}

","Just to help others if they get Amazon documentation for the IRP (integrated registration pipeline) - note that their example result for signing a query string is wrong. 
","469","<java><encryption><sha256>","0","0","1","2017-02-09 05:46:29","","4","3","","","","2017-02-01 12:43:44",""
"20760540","SHA256 encoding in javascript","I am struggling with SHA256 encoding.
There is a Python example but I don't understand it quite well.
Example (Python):
message = nonce + client_id + api_key
signature = hmac.new(API_SECRET, msg=message, digestmod=hashlib.sha256).hexdigest().upper()

Can somebody make a simple blueprint so I can work from there?
","Crypto-js implements SHA256
If you include the library, you should be able to run the following (assuming 'message' and 'API_SECRET' are the same as the python code) 
var signature = CryptoJS.HmacSHA256(message,API_SECRET).toString(CryptoJS.enc.Hex).toUpperCase();

","469","<javascript><python><encryption><parameters><sha256>","0","0","1","2013-12-24 13:07:17","20761532","0","","2718351","","2013-12-24 12:33:03","2013-12-24 11:59:41",""
"45075690","combining file chunk hash value to file fingerprint","We need a file fingerprint for all uploaded files in server. Now, sha256 is chosen to be the hash function.
For large files, each file is split into several file chunks of equal size (except the last one) to transfer. sha256 values of each file chunk are provided by clients. They are re-calculated and checked by server.
However, those sha256 values cannot be combined into the sha256 value for the whole file.
So I consider changing the definition of file fingerprint: 
For files smaller than 1GB, the sha256 value is the fingerprint.
For files larger than 1GB, it is sliced into 1GB chunks. Each chunk has its own sha256 value, denoted as s0, s1, s2 (all are integer value).
When the first chunk received:

h0 = s0

When second chunk received

h1 = SHA256(h0 << 256 + s1)

This is essentially concatenating two hash values and hash it again. This process is repeated until all chunks received. And the final value hn is used as the file fingerprint.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
I have googled a lot. And read a few articles on combine_hash functions in various languages or frameworks. Different author chooses different bit mangling hash functions and most of them are said to be working well.
In my case, however, the efficiency is not a concern. But the fingerprint is stored and used as the file content identifier system-wide.
My primary concern is if the naive method listed above will introduce more conflicts than sha256 itself? 
If sha256 is not a good choice for combining hash values in our case, is there any recommendations?
","You are essentially reinventing Merkle tree.
What you'll have to do is to split your large files into equally-sized chunks (sans last fragment), compute hash for each of those chunks, and then combine them pairwise until there is a single ultimate hash value. Note that the ""root"" hash will not be equal to the hash of the original file, but that's not required to validate the integrity of the entire file.
","468","<hash><sha256>","0","1","1","2017-07-13 08:50:54","","0","","","","","2017-07-13 08:46:58",""
"16447566","Storing a SHA256 of first and last name along with 4 last digits of credit card number","I'm trying to find the best way to uniquely identify customers before they make a purchase to ensure a coupon code isn't used twice by the same person. I do not intend to make my website full PCI compliant since I'm not planning on storing Credit Card numbers (only does POST.) I want to generate a SHA 256 (one way encryption) of the first name concatenated with the last name and the credit card number and store this into my database. Would this require PCI-compliance, although it is a one way encryption? What about using the first name + last name + last 4 digits of the credit card, would it still require full PCI compliance?
Thanks,
","The fact that you're able to obtain the full card numbers at all means that you're going to be involved with PCI compliance, regardless of how you plan to generate the hash.
If you are able to hash the card numbers, and only store a hash then this will certainly make your path towards PCI compliance easier, but you will still need to work through the other issues to ensure that (eg) no rogue employee can gather the card data prior to hashing.
Hashing with SHA256 is acceptable, so long as each card has a unique salt. Your plan to use first name + last name as a salt would probably be considered acceptable here.
Ideally though you'd work with a payment gateway that captured and tokenised the card details. This would mean you never have access to the full card number and would all but eliminate your responsibilities with PCI compliance, and also mean that you could probably just use the token id in place of the card number, and no hashing required.
","464","<credit-card><sha256><pci-compliance>","0","1","1","2013-05-09 09:13:50","16458270","4","","987843","","2013-05-08 18:28:03","2013-05-08 18:21:00",""
"48203090","ValueError: malformed sha256_crypt hash (checksum must be exactly 43 chars)","I've a question about this error. I'm relatively new to this with flask, databases and sha256_crypt so I hope someone can easily help me with this. 
I've made a login page and when I try to login with a right username, I alway get this error in my browser, when the password is right and when it's wrong.
error:

""builtins.ValueError
   ValueError: malformed sha256_crypt hash (checksum must be exactly 43 chars)""

code where I think the problem should be:                                      
@app.route('/login', methods=['GET','POST']) 
def login():
    if request.method == 'POST':
    #get form fields
    username = request.form['username']
    password_candidate = request.form['password']

    #create cursor 
    cur = mysql.connection.cursor()

    #get user by username
    result = cur.execute(""SELECT * FROM users WHERE username = %s"", [username])

    if result > 0:
        #get stored hash
        data = cur.fetchone()
        password = data['password']

        #compare passwords 
        if sha256_crypt.verify(password_candidate, password):
            app.logger.info('PASSWORD MATCHED')
        else:
            app.logger.info('PASSWORD DOES NOT MATCH')

    else:
        app.logger.info('NO SUCH USER FOUND')



return render_template('login.html')

I have already searched a lot but I cant seem to find how to fix it and make it possible to login with a username and password from the database.
Thank you in advance
Robbe 
","As far as i can see you are using the sha256_ crypt to encrypt your passwords. This will require at least a minimum of 100 characters in your database. It might be that your database can't hold all the characters you are sending it to it.
","463","<python><database><flask><sha256><password-encryption>","1","1","1","2018-01-14 15:35:00","","1","","4900669","","2018-01-11 09:08:51","2018-01-11 08:58:42",""
"18732710","Hash a string in Java/PHP no matter the language","Refer to this question for background.
Hashing using algorithms like SHA-256 in Java and PHP produce the same result when the string given is in English, but how can I make the two languages produce the same result when the input is in a language other than English (like Chinese for example)?
Java
public static String encodePassword(String password) {
    try {
        MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
        byte[] hash = digest.digest(password.getBytes(""UTF-8"")); //I've tried messing around with the encoding
        String result = """";
        for(int i : hash) {
            result += String.format(""%02x"", 0xff & i);
            }
        return result;
    } catch (Exception e) {
        e.printStackTrace();
        return null;
    }
}

PHP
For PHP I use the hash function:
hash(""sha256"", $password);

Output (with input as 国)
Java
Encoding set to UTF-8: d1566afa505af0f03b9156d0a9a518a25c2d4568b095ef4ee2dca7fcbb6c29c9

Encoding set to iso-8859-1: 8a8de823d5ed3e12746a62ef169bcf372be0ca44f0a1236abc35df05d96928e1
PHP
e1c8436bc8529d791d58c74fefa160dfd678ca8db8f879b8392a42be84f78db3
","This might help.
public static String SHA(String text)
        throws NoSuchAlgorithmException, UnsupportedEncodingException {
    MessageDigest md;
    md = MessageDigest.getInstance(""SHA-256"");
    byte[] md5 = new byte[64];
    md.update(text.getBytes(""iso-8859-1""), 0, text.length());
    md5 = md.digest();
    return convertedToHex(md5);
}

","462","<java><php><hash><sha256>","2","0","1","2014-06-18 23:33:03","","2","3","-1","","2017-05-23 11:50:10","2013-09-11 04:29:52",""
"49998326","javascript - Different SHA256 using the same file in Angularjs app and bash","I need to get the digest of an uploaded file in my AngularJS app, but the result digest is different from the file digest I get with bash. 
I started using jshashes, but when I saw that the resultant hash (on the web app) was different from the one which I get locally using bash I decided to move to CryptoJS. But the result is the same,the hash from the uploaded file is still different.
Here's my code:
var reader = new FileReader();    
reader.readAsBinaryString(controller.file);
controller.fileHash = CryptoJS.SHA256(reader.result).toString(CryptoJS.enc.Hex);

As you can see the code is quite simple, just reads the uploaded file from the variable using FileReader and convert the value into a BinaryString, hash the content and finally assign the result to another controller valriable to show it in the html.
In my shell (local environment) to get the file digest I run the following command:
$ shasum -a 256 [path/to/file]

In order to upload files, i'm using ng-file-upload
What I'm missing? If anyone can help me or guide me to see the solution I will be very greatful.
Thank you in advance.
Update 1:
As @destroyer said in the comments below readAsBinaryString is deprecated and it's an asynchronous method, so here's my actual code:
var reader = new FileReader();
reader.onload = function() {
    controller.fileHash = CryptoJS.SHA256(reader.result).toString(CryptoJS.enc.Hex);
};
reader.readAsArrayBuffer(controller.file);

I tried this solution in order to convert the ArrayBuffer object into a BinaryString. But the result is still wrong.
Update 2: 
Here's an image of a console log og the object I want to hash

","readAsBinaryString is deprecated, you should use readAsArrayBuffer.
Either way, those functions start an asynchronous operation, the result of which you read inside the FileReader instance's load event.
var reader = new FileReader();    
reader.onload = function(){
  controller.fileHash = CryptoJS.SHA256(reader.result).toString(CryptoJS.enc.Hex);
};
reader.readAsArrayBuffer(controller.file);

Reflecting on our conversation in comments: the problem was that crypto-js does not operate on binary files, but on strings.
You can get a SHA256 implementation that supports ArrayBuffers directly in js-sha256.
","458","<javascript><angularjs><sha256><cryptojs><ng-file-upload>","0","1","1","2018-04-24 16:54:05","50002592","5","","2132144","","2018-04-24 14:00:42","2018-04-24 09:41:16",""
"27998768","PHP hash() returns empty string... sometimes","I have extremely annoying issues with the php hash() function. For some strings the returned hash is just an empty string, for others it works fine.
I wrote the following:
$new_salted_pw = $salt.$pepper.$new_pw; 
echo $new_salted_pw.""... ""; 
$hash = hash(""sha256"", $new_salted_pw);
if($hash>120)       
    $hash = substr($hash, 120);

echo $hash;

I used the passwords geheim23 and Geheim23 for testing, so only 1 character difference.
The result is:
k0g3po32ggd0sv8oehgklbp2bd8eddxXMaxGTPJSQZSAJzgZSgaZxvUfGeheim23... d79e2044baa8a0a7363c88b4a2224277ac883eabc22cd28d61c1cdc31bb1c3fc
k0g3po32ggd0sv8oehgklbp2bd8eddxXMaxGTPJSQZSAJzgZSgaZxvUfgeheim23...
No hash for the second one. It's empty. Same code, no result.
Even more interestingly, hashing geheim23 in exactly the same way works in a different part of my script without problems. 
And that's when I decided to ask Stackoverflow if it knows why PHP is doing this to me, how to fix it, or what function I could use instead of hash().
Thank you.
","The problem is not with the hash() function! The problem is in the substr() function. You have to change this:
(Here you started at the position 120, but you want the string form 0 to 120)
$hash = substr($hash, 120);

to:
$hash = substr($hash,0,  120);

Also i think you want to check if the length is longer that 120 and not if the hash value is bigger than 120 so change this:
if($hash>120)   

to this:
if(strlen($hash) > 120)   

For more information about substr() see the manual: http://php.net/manual/en/function.substr.php
And a quote from there:

string substr ( string $string , int $start [, int $length ] )

","456","<php><hash><sha256>","1","2","2","2015-01-17 11:44:46","27998800","0","","","","","2015-01-17 11:02:39",""
"27998768","PHP hash() returns empty string... sometimes","I have extremely annoying issues with the php hash() function. For some strings the returned hash is just an empty string, for others it works fine.
I wrote the following:
$new_salted_pw = $salt.$pepper.$new_pw; 
echo $new_salted_pw.""... ""; 
$hash = hash(""sha256"", $new_salted_pw);
if($hash>120)       
    $hash = substr($hash, 120);

echo $hash;

I used the passwords geheim23 and Geheim23 for testing, so only 1 character difference.
The result is:
k0g3po32ggd0sv8oehgklbp2bd8eddxXMaxGTPJSQZSAJzgZSgaZxvUfGeheim23... d79e2044baa8a0a7363c88b4a2224277ac883eabc22cd28d61c1cdc31bb1c3fc
k0g3po32ggd0sv8oehgklbp2bd8eddxXMaxGTPJSQZSAJzgZSgaZxvUfgeheim23...
No hash for the second one. It's empty. Same code, no result.
Even more interestingly, hashing geheim23 in exactly the same way works in a different part of my script without problems. 
And that's when I decided to ask Stackoverflow if it knows why PHP is doing this to me, how to fix it, or what function I could use instead of hash().
Thank you.
","You should use password_hash() and password_verify() for hashing/verifying passwords.
These functions are available in PHP > 5.5 but I don't know any reason why anyone should do a new project for older version.
Some point why you should use that:

It's easy to use
You don't care about salt
It's made for hashing password (not like md5, sha*, etc.)

","456","<php><hash><sha256>","1","0","2","2015-01-17 11:44:46","27998800","0","","","","","2015-01-17 11:02:39",""
"37461283","How to use proper RSAPKCS1SHA256SignatureDescription with A3 Ceritificate?","As signing around 100 blocks of a single XML file thru a loop, I´ve got an error from server: 
""The value of the 'Algorithm' attribute does not equal its fixed value.""
So  the server is expecting:
<SignatureMethod Algorithm=""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"" /> 
instead of :
<SignatureMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#rsa-sha1"" />
Researching I have found that the solution would be adding the rigth function:
string signatureRSAMethod = @""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"";
signer.SignedInfo.SignatureMethod = signatureRSAMethod;
Then an exception apear:
SignatureDescription could not be created for the signature algorithm supplied
again the solution would be adding the line of code:
CryptoConfig.AddAlgorithm( typeof(RSAPKCS1SHA256SignatureDescription), signatureRSAMethod); 

Finally the file was singed and sent ones, but, unfortunately on a second try, the private key had disappeared from my certificate, its being 3 lost so far, two were cards with readers and a Token one. Anyway, I'm suspicious something is violating some security rule that makes the private key disappear. Am I using it in a wrong way?
","I have figured out that I only need to add on the CryptoConfig ones, so I took the line below from the loop and put it on form show it solved my  problem. 

CryptoConfig.AddAlgorithm( typeof(RSAPKCS1SHA256SignatureDescription), signatureRSAMethod);

","455","<c#><sha256><sign>","0","0","1","2016-06-02 20:26:00","","0","","3638222","","2016-05-26 12:54:06","2016-05-26 12:46:01",""
"14448359","bcrypt passphrase with multiple rounds of AES encryption?","I'm trying to write a simple Python solution to encrypt a file securely using a passphrase. I figured I would use something like bcrypt or pbkdf2 so that as time goes on, I could make my password hashes more and more difficult to brute force. I also figured I would use AES for the actual encryption, as it's a pretty safe standard. I'm not fixed on the encryption cipher, but I really like bcrypt. 
I'm having quite a difficult time figuring out how to actually perform the encryption. Let's say I have a passphrase and a file I'd like to encrypt. I'd assume that I essentially need to do something like this:
from Crypto.Cipher import AES
from bcrypt import gensalt, hashpw
from hashlib import sha256

def encryptify(passphrase, file_name):
    target_file = open(file_name, 'r')

    # generate password, takes time
    passphrase_rounds = 15
    passphrase_salt = gensalt(rounds)
    passphrase = sha256(hashpw(passphrase, passphrase_salt)).hexdigest()

    # encrypt the file
    encrypted_file = AES.new(passphrase, AES.MODE_CBC).encrypt(target_file.read())

At the final step, it fails with a ValueError, telling me that my key must be 16, 24, or 32 bytes long. What I'm not understanding is if what I'm doing is secure and why the last step is failing. I thought that SHA256 outputs 32 characters of data? 
I'm particularly concerned about taking a bcrypt passphrase and throwing it through sha256, are there any potential security risks by doing this? I wouldn't imagine so, but then again, I'm not a cryptographer. 
","I can't comment about safety, but if you want your actual 32 bytes of SHA256, you need to call digest, not hexdigest. hexdigest returns a hexadecimal string representation (that would be 64 characters).
","455","<python><encryption><aes><bcrypt><sha256>","0","1","1","2013-01-21 22:30:15","14448388","0","","","","","2013-01-21 22:27:50",""
"24730381","HMAC_256 using Message Authentication Code on Solaris","This problem is really leaving me astounded

Take a input file and create a HMAC_256 value from it using a private key
Base64 encode HMAC_256 hash

Code
#Create HMAC-SHA2 hash from shell parameter
filehash=`echo $1 | mac -a sha256_hmac -k test.key`
echo ""HMAC_SHA256 hash : ""$filehash
#Base64 encode filehash using openssl
filehash_64=`echo ""$filehash"" | /usr/sfw/bin//openssl enc -base64 | tr '\n' ' ' | cut -d "" "" -f2 `
echo ""64 bit encoded hash : ""$filehash_64

Using a test.key of

Bob123

Shell Input

Hello

Shell Output
SHA256 hash : 411796cfb1e6c30c1b39b589c79d6f8bf1fdde8d58fda4a6ec1e59538ecaa39a

64 bit encoded hash : ZWMxZTU5NTM4ZWNhYTM5YQo=


However if I go to these sites and do a HMAC_256 test they both generate a different hash
http://asecuritysite.com/encryption/hmac
http://jetcityorange.com/hmac/
They both Output a HMAC_256 hash of

a30410f584726f32ba3e6e823bfdecbdf28448d64e4ab8f11f6a2e66818b50fe

Why are they generating a different hash? I am assuming they are correct as they both have the same.

Does Solaris 10 have a bug with its MAC (Message Authentication Code)
tool?
Is it UTF8 or ASCII problem?
Is it a server problem, Windows / Unix?

I don't understand why I am generating a different hash to them, even though I am using the same hashing algorithm and key.
","I'll guess that the problem is newline characters.  The echo command puts a newline after ""Hello"", so if you don't want it, use ""echo -n"".  Also make sure that there is no newline character in your key file.
","452","<bash><unix><base64><hmac><sha256>","0","2","1","2014-07-14 06:25:44","24730605","3","","","","","2014-07-14 06:06:51",""
"31407920","Verify a SHA-256 signature with public key from modulus and exponent","I have been wrapping my head around this problem for some time now. I am to implement a signature check, which is already implemented using c# but we need to implement it on iOS also.
The c# code looks like this.
var signedData = version + ""#"" + string.Join(""#"", deltas.Select(s => s.Key + ""="" + s.Value));
var signature = Convert.FromBase64String(vertification);
using (RSACryptoServiceProvider rsa = new RSACryptoServiceProvider())
{ //TODO: Configuration 
rsa.FromXmlString(""<RSAKeyValue><Modulus>a long text here</Modulus><Exponent>a small text here</Exponent></RSAKeyValue>""); 
var valid = rsa.VerifyData(Encoding.UTF8.GetBytes(signedData), new SHA256Managed(), signature); 
return valid; 
}

A little catch is that we can't use any cocoa pods or external libraries.
","","451","<c#><ios><objective-c><sha256>","0","","0","2015-07-14 13:22:41","","3","","","","","2015-07-14 13:22:41",""
"34006088","Force charset to generate SHA-256 in PHP","I'm trying to generate a SHA-256 hex in PHP with ISO-8859-1 encoding, but did not find a way to do it.
Here's the ""test case"" (hardcoded) that I'm trying to complete:
function getHash($str) {
    return hash('sha256', $str);
}

$str1 = ""Luiz"";
$result1 = getHash($str1);
$expect1 = '0dd0029404cbe8bbad2cd84ec0f5089e4ca29d46719323b15595ffa765a88ffe';
$success1 = $result1 == $expect1 ? 'true' : 'false';

$str2 = ""Luíz"";
$result2 = getHash($str2);
$expect2 = '7e957af88c30f35d2fa32d6dd1c9931d3bb8a52b798277bfcbe06736f03d6828';
$success2 = $result2 == $expect2 ? 'true' : 'false';

echo ""Test 1: "".$str1.""<br/>"";
echo ""Result should be: "".$expect1.""<br/>"";
echo ""Result is: "".$result1.""<br/>"";
echo ""Success? "".$success1;

echo ""<br/><br/><br/>"";

echo ""Test 2: "".$str2.""<br/>"";
echo ""Result should be: "".$expect2.""<br/>"";
echo ""Result is: "".$result2.""<br/>"";
echo ""Success? "".$success2;

The first test case works just fine, but the second one fails (because of the encoding).
I've tried everything that I could... pack, unpack, bin2Hex, mb_convert_encoding... Nothing worked.
The reason I'm trying to do this is to integrate with a third-party product, that expects a SHA-256 hash in ISO-8859-1.
Their example, in Java, goes like this:
public class TokenGenerator {
    private static String getSha256Hash(final String x) {
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-256"");
            byte[] hash = md.digest(x.getBytes(""ISO-8859-1""));
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < hash.length; i++) {
                String hex = Integer.toHexString(0xff & hash[i]);
                if(hex.length() == 1) hexString.append('0');
                hexString.append(hex);
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }

        return null;
    }

    public static void main(String[] args) {
        String str = ""EXAMPLE_STRING"";
        System.out.println(getSha256Hash(str));
    }
}

As you can see in the example above, the Java version forces the hash to be in ISO-8859-1.
I believe that the PHP implementation only works with UTF-8, but I'm not certain.
Is there any way to do it?
","","451","<php><hash><encoding><character-encoding><sha256>","2","","0","2015-11-30 19:09:17","","4","3","","","","2015-11-30 19:09:17",""
"34134848","Different RSA signatures when using OpenSSL and Android","After looking through SO at similar questions, i have yet to find the answer.
I am singing a document using both 
openssl rsautl -sign ... and openssl dgst -sign ...
Both options obviously provide different outputs.
My problem is, when i sign my file on the android application using :
public byte[] signData(byte[] data, PrivateKey privateKey) {
    Signature signature = null;
    try {
        signature = Signature.getInstance(""SHA256withRSA"");
        signature.initSign(privateKey);
        signature.update(data);
        return signature.sign();
    } catch (Exception e) {
        e.printStackTrace();
        return null;
    }
}

This function returns a completely different HEX string.
And the verification method on android :
byte[] sigBytes = hexStringToByteArray(signature);    
X509EncodedKeySpec spec = new X509EncodedKeySpec(keyBytes);
KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
PublicKey publicKey = keyFactory.generatePublic(spec);
Signature signCheck = Signature.getInstance(""android "");
signCheck.initVerify(publicKey);
signCheck.update(data.getBytes(""UTF-8""));
boolean isVerified = signCheck.verify(sigBytes);

Only verifies the HEX string generated by the android application.
Using the openssl commands (have tried using most of the available parameters) i cannot seem to generate the same HEX string.
FYI: i sign on both android and command line with RSA and with SHA256.
From android i get the following hex string : 0A241F28C2C4CF8A71879FAFB9F16CF4908560B76BF2DDDB7757B7C5B150C4C5EE76E86D50CC237552E08F4C4154EB83BC9CEFF0E3540B515D131E711E8CE46E4EF8DFC941E0BAE1945FDB348D66839721D27F626E9869118A7EA0D181E367A19AF4335E44256F6DAB35B23871DC95CB47CDFC489852A093F9F25FCBC451FE90EEAD5D033C65FEE1CBF67D77581BF79F27A38574879A5B903D48D0C5705E1F8F0263F262D76B08A523A27AD4D8394050CEAC2EDD92021CCDB34038699AAA49B1BFDF6823ADEFA185B036A6DF30955A152D51B64BCAF83AF79B6F7EEE783AC4217D6CE6604AF7E016C53B0D86E70AEDD4178AE039B12ED2731AD45321DEF9E394
and from openssl (openssl dgst -sha256 -binary -sign private.pem data.txt | hexdump), i get : 818DB0A4F8AE1A1374643E61CD835C38B9C78275E97F7D29CBB739E912C94F5B625FF3F9F916BE5A5D6BB6BBBA5B55D14C93CF5E53525471E135B92B8D30ED501F72429A5792CBA2B07EEF780515BD70226038E5A7567914EFA4D676685777C96AB1067BFBB2B95B2FCCBACB5BD6D9E6723D22DB715DE1EF4284509620E0C540C8D08B367FA966245671C16D35ECA52CC0640C2C0C733989B7703922AC07D0817D2440A0C4640508FEE6CBC62221847D2893716A712292B701A5C65901D05636855D9D31253C1F53EF3E7B1741A460A0F7DEDCEF4CA4039AA5385B49BE486A6380488FB5A0DEEF8BDD0F70874866EF6FC2EC4CFFC6BDD71271F1AE30112F8BD0
Please help, cheers.
","I had different output signing String with command ""openssl pkeyutl -sign ..."" and java code: 
Signature sig = Signature.getInstance(""SHA256withRSA"");

changing to this fingerprint finally I got the same output:
Signature sig = Signature.getInstance(""NONEwithRSA"");

","448","<android><security><openssl><digital-signature><sha256>","2","1","1","2018-12-28 09:30:42","53956308","4","2","3836149","","2015-12-07 16:21:18","2015-12-07 13:33:52",""
"23997022","install sha256sum on synology NAS","I want to execute a shell script on my NAS server (Synology). In this script I need to generate a key using sha256sum.
The problem is sha256sum is not installed on the NAS.
I have installed ipkg but ipgk install sha256sum doesn't work and I don't know what package I have to install to get it.
Usually, I'm working on Ubuntu and this function is installed with Linux.
So where can I found it compatible with DSM Linux ?
PS : For same reason, I don't know how to do to have print function too...
","I have finally found the answer alone : with IPKG, I have to install md5deep. With this package I have the function sha256deep which is doing the same thing that sha256sum.
","447","<linux><package><sha256><synology>","-1","0","1","2014-06-04 12:35:48","24037608","1","","","","","2014-06-02 14:33:10",""
"48613706","Python Random String Sha256 Hasher","I wanted to create a python program that first takes a input (which is a sha256hash) named inputhash. Then takes numbers 0 to 9 and letters a to z (which is 36 total options)and rearranges them in 32 spots and saves it into a str variable, lets say its randomstring. Then chooses a random number(lets say its called correctnumber) from 0 to 99 and places that number at the end of randomstring. Finally it hashes(sha256) randomstring and if it doesnt match inputhash it repeats the process till it does. When it finally does it prints the variable correctnumber. How do you create this?
This is how you sha256 hash
import hashlib
var = 'password'
hashedWord = hashlib.sha256(var.encode('ascii')).hexdigest()

But I have know idea on the other features. Thanks
THIS DOESNT HAVE TO BE IN PYTHON. If another language is easier/better do that language. 
","If i understood your question correctly, you want to bruteforce a SHA256 hash with a character set of 32 lower alphanumeric characters, plus one or two digits. If so, this code is unlikely to solve your problem, (it's practically impossible, and python is a very bad choice for this task) but it may give you some ideas.  
You can create all the possible character combinations with itertools.product() and produce them with a generator, so it won't have a big inpact on memory.  
def string_generator(size=32):
    chars = string.ascii_lowercase + string.digits
    for i in itertools.product(chars, repeat=size):
        yield i

Now we can iterate over the items in that generator and for each item append a digit in range(100) to create possible matches. If the hash of a possible match equals the input hash, congrats you've found the correct number!  
The complete code:  
import string
import itertools
import hashlib

def string_generator(size=32):
    chars = string.ascii_lowercase + string.digits
    for i in itertools.product(chars, repeat=size):
        yield ''.join(i)

def bruteforce(hash):
    possible_strings = string_generator()
    for i in possible_strings:
        for n in range(100):
            s = i + str(n)
            print('\r' + s, end=' ')
            if hashlib.sha256(s.encode('ascii')).hexdigest() == hash:
                print('\rHash found: ' + s)
                return n 
    print('\nNot found.') 

s = bruteforce('my hash')

","446","<python><random><sha256>","0","1","1","2019-03-30 11:23:01","","16","","8281499","","2018-02-08 04:46:36","2018-02-04 22:37:40","2018-02-08 21:58:30"
"32109133","How can I verify that my security is up to paypal standards?","Tomorrow paypal will be flipping the switch for two hours on mandatory sha-256 and g5 root certificates. Here's the link:
https://www.paypal-knowledge.com/infocenter/index?page=content&widgetview=true&id=FAQ1766&viewlocale=en_US&direct=en
We use payflow pro which is at the bottom of the third table. How can I verify that we are up to date before the two hour test occurs?
","The 2 hour period will basically test it for you
There are several resources linked in the document you reference, most notably this. However, you need to be sure you have 1. Discontinued use of the VeriSign G2 Root Certificate, and 2. Updated your integration to support certificates using the SHA-256 algorithm.
The document I linked should guide you down the correct path.
","442","<paypal><sha256><root-certificate>","0","0","1","2015-08-21 15:33:29","","0","","","","","2015-08-20 03:34:50",""
"56446163","System.Security.Cryptography.SHA256Cng .NET Core","I have one .net core app as console and I'm trying to get some values from Azure Db. This code works perfect on .NET Framework (standard) and I always get my data but I need to work with .NET Core. In short, I have one method which GetConfig from another (.dll) and everytime I get exception:
Exception
System.AggregateException: 'One or more errors occurred. (Could not load type 'System.Security.Cryptography.SHA256Cng' from assembly 'System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.)'

I know .NET Core has System.Core but it doesn't have ""SHA256Cng"", just ""SHA256"". Maybe Can I use .net framework .dll or is there another way to solve this problem? 
PS. Need to use only .NET Core (.net console app and other).
Thanks.
Method
public ITenantConfigurationProvider CreateTenantConfigurationProvider(ITenantClient client, string tenantId)
        {
            return client.GetConfigAsync(tenantId).Result;
        }

","I believe the SHA256 class is part of 'System.Security.Cryptography'. Do you have that library?
","441","<c#><azure><dll><.net-core><sha256>","2","0","3","2019-07-12 07:00:37","","2","","11599540","","2019-06-05 07:01:26","2019-06-04 14:41:20",""
"56446163","System.Security.Cryptography.SHA256Cng .NET Core","I have one .net core app as console and I'm trying to get some values from Azure Db. This code works perfect on .NET Framework (standard) and I always get my data but I need to work with .NET Core. In short, I have one method which GetConfig from another (.dll) and everytime I get exception:
Exception
System.AggregateException: 'One or more errors occurred. (Could not load type 'System.Security.Cryptography.SHA256Cng' from assembly 'System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.)'

I know .NET Core has System.Core but it doesn't have ""SHA256Cng"", just ""SHA256"". Maybe Can I use .net framework .dll or is there another way to solve this problem? 
PS. Need to use only .NET Core (.net console app and other).
Thanks.
Method
public ITenantConfigurationProvider CreateTenantConfigurationProvider(ITenantClient client, string tenantId)
        {
            return client.GetConfigAsync(tenantId).Result;
        }

","Use SHA256.Create() instead of new SHA256Cng()
","441","<c#><azure><dll><.net-core><sha256>","2","1","3","2019-07-12 07:00:37","","2","","11599540","","2019-06-05 07:01:26","2019-06-04 14:41:20",""
"56446163","System.Security.Cryptography.SHA256Cng .NET Core","I have one .net core app as console and I'm trying to get some values from Azure Db. This code works perfect on .NET Framework (standard) and I always get my data but I need to work with .NET Core. In short, I have one method which GetConfig from another (.dll) and everytime I get exception:
Exception
System.AggregateException: 'One or more errors occurred. (Could not load type 'System.Security.Cryptography.SHA256Cng' from assembly 'System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.)'

I know .NET Core has System.Core but it doesn't have ""SHA256Cng"", just ""SHA256"". Maybe Can I use .net framework .dll or is there another way to solve this problem? 
PS. Need to use only .NET Core (.net console app and other).
Thanks.
Method
public ITenantConfigurationProvider CreateTenantConfigurationProvider(ITenantClient client, string tenantId)
        {
            return client.GetConfigAsync(tenantId).Result;
        }

","The only solution I found is to create a .NET framework project because .NET Core does not support this class.
","441","<c#><azure><dll><.net-core><sha256>","2","0","3","2019-07-12 07:00:37","","2","","11599540","","2019-06-05 07:01:26","2019-06-04 14:41:20",""
"29976179","Hashes not similar between PHP and Paw REST Client","I'm building a HMAC API and I have issues testing the hashing with Paw.
On Paw I have this payload:
GET:/hello/world:"""":9a6e30f2016370b6f2dcfb6880501d7f2305d69bout

and a custom HMAC-SHA256 variable (actually function like this that sets it in the X-Hash header.
X-Hash: 4Cq2yehWumDcUk1dYyfhm6qWjJVBkOCB8o12f5l0WGE=

In my PHP API I have the same thing:
GET:/hello/world:"""":9a6e30f2016370b6f2dcfb6880501d7f2305d69bout

and used:
hash_hmac('sha256', $this->getPayload(), '9a6e30f2016370b6f2dcfb6880501d7f2305d69bout', false);

So when comparing the hashes:
Paw: 4Cq2yehWumDcUk1dYyfhm6qWjJVBkOCB8o12f5l0WGE=
PHP: 6961b9d1f6e986c49d963cbebd691fa68dfa59b4ce3b7f05320c2d43eae3c7c3

They are very different. Any idea why is that?
Update
Paw Code:  
function evaluate(context){
  var loc = getLocation(context.getCurrentRequest().url);

  var payload = """";
  payload += context.getCurrentRequest().method + ':';
  payload += loc.pathname + ':';
  payload += JSON.stringify(context.getCurrentRequest().body) + ':';
    payload += ""9a6e30f2016370b6f2dcfb6880501d7f2305d69bout""; // Private key
  return payload;
};

function getLocation(href) {
    var match = href.match(/^(https?\:)\/\/(([^:\/?#]*)(?:\:([0-9]+))?)(\/[^?#]*)(\?[^#]*|)(#.*|)$/);
    return match && {
        protocol: match[1],
        host: match[2],
        hostname: match[3],
        port: match[4],
        pathname: match[5],
        search: match[6],
        hash: match[7]
    }
}

PHP Code (with lots of comments):
if (strpos(strtoupper($authHeader), 'HMAC') !== 0) {
    echo 'out';
    throw new HttpForbiddenException();
}
else {
    $hmacSignature = $app->request->headers()->get('X-Hash');
    $publicKey = $app->request->headers()->get('X-Public');

    if ( empty($hmacSignature) || empty($publicKey) ) {
        echo 'out2';
        throw new HttpForbiddenException();
    }
    else {

        $this->hmacManager->setPublicKey($publicKey);
        print '$publickey = ' . $publicKey . '<br>';

        // Validate if base64_encoded or not
        if( base64_decode($hmacSignature, true) !== FALSE ) {
            $binaryString = base64_decode($hmacSignature);
            $hmacSignature = bin2hex($binaryString);
            print 'decoding ' . '<br>';
        }
        $this->hmacManager->setHmacSignature($hmacSignature);
        print '$hmacSignature = ' . $hmacSignature . '<br>';

        $this->hmacManager->setRequestMethod($app->request->getMethod());
        print 'method = ' . $app->request->getMethod() . '<br>';
        $this->hmacManager->setRequestResourceUri($app->request->getResourceUri());
        print 'uri = ' . $app->request->getResourceUri() . '<br>';

        $requestBody = $app->request()->getBody();
        if (Utils::isJson($requestBody)) {
            $requestBody = json_decode($requestBody);
        }
        $this->hmacManager->setRequestBody(json_encode($requestBody));
        print 'body = ' . json_encode($requestBody) . '<br>';

        print 'private key = ' . $this->hmacManager->getPrivateKey() . '<br>';

        $payload = '';
        $payload .= $this->hmacManager->getRequestMethod() . "":"";
        $payload .= $this->hmacManager->getRequestResourceUri() . "":"";
        $payload .= $this->hmacManager->getRequestBody() . "":"";
        $payload .= $this->hmacManager->getPrivateKey();
        print 'PHP payload [' . $payload . ']';
        $this->hmacManager->setPayload($payload);

        $hmacValue = $this->hmacManager->generateHmac();
        $isValid = $this->hmacManager->isValid($this->hmacManager->generateHmac(), $hmacSignature);

        if ($isValid !== true) {
            echo 'out3';
            throw new HttpForbiddenException();
        }
    }
}

generateHmac from another class:
public function generateHmac()
{
    print 'Generating HMAC' . '<br>';
    $algorithm = $this->getAlgorithm();
    print 'algo ' . $algorithm . '<br>';
    $privateKey = $this->getPrivateKey();
    print 'privk ' . $privateKey . '<br>';

    if (empty($algorithm)) {
        throw new \RuntimeException('Algorithm must be set and not empty');
    } elseif (empty($privateKey)) {
        throw new \RuntimeException('Private key must be set and not empty');
    }

    print 'payload ' . $this->getPayload() . '<br>';
    $hash = hash_hmac($this->getAlgorithm(), $this->getPayload(), $this->getPrivateKey(), false);
    print 'php hasj: ' . $hash . '<br>';

    return $hash;
}

Finally, here's the output statements:
$publickey = 95f97b93560f951b4cae46c86d03d9b1a81d4ae8
decoding 
$hmacSignature = e02ab6c9e856ba60dc524d5d6327e19baa968c954190e081f28d767f99745861

method = GET
uri = /hello/world
body = """"
private key = 9a6e30f2016370b6f2dcfb6880501d7f2305d69bout
PHP payload [GET:/hello/world:"""":9a6e30f2016370b6f2dcfb6880501d7f2305d69bout]

Generating HMAC
algo sha256
privk 9a6e30f2016370b6f2dcfb6880501d7f2305d69bout
payload GET:/hello/world:"""":9a6e30f2016370b6f2dcfb6880501d7f2305d69bout
php hash: 6961b9d1f6e986c49d963cbebd691fa68dfa59b4ce3b7f05320c2d43eae3c7c3

Hope it helps!
","The paw hash is base64 encoded while the PHP one is in hexadecimal. So decode the paw hash first:
$binary = base64_decode($pawHash);
$hex = bin2hex($binary);

And then compare this to your own hash.
","437","<php><hmac><sha256><paw-app>","5","4","2","2015-05-11 12:36:15","29976249","0","1","-1","","2017-05-23 12:32:58","2015-04-30 19:28:13",""
"29976179","Hashes not similar between PHP and Paw REST Client","I'm building a HMAC API and I have issues testing the hashing with Paw.
On Paw I have this payload:
GET:/hello/world:"""":9a6e30f2016370b6f2dcfb6880501d7f2305d69bout

and a custom HMAC-SHA256 variable (actually function like this that sets it in the X-Hash header.
X-Hash: 4Cq2yehWumDcUk1dYyfhm6qWjJVBkOCB8o12f5l0WGE=

In my PHP API I have the same thing:
GET:/hello/world:"""":9a6e30f2016370b6f2dcfb6880501d7f2305d69bout

and used:
hash_hmac('sha256', $this->getPayload(), '9a6e30f2016370b6f2dcfb6880501d7f2305d69bout', false);

So when comparing the hashes:
Paw: 4Cq2yehWumDcUk1dYyfhm6qWjJVBkOCB8o12f5l0WGE=
PHP: 6961b9d1f6e986c49d963cbebd691fa68dfa59b4ce3b7f05320c2d43eae3c7c3

They are very different. Any idea why is that?
Update
Paw Code:  
function evaluate(context){
  var loc = getLocation(context.getCurrentRequest().url);

  var payload = """";
  payload += context.getCurrentRequest().method + ':';
  payload += loc.pathname + ':';
  payload += JSON.stringify(context.getCurrentRequest().body) + ':';
    payload += ""9a6e30f2016370b6f2dcfb6880501d7f2305d69bout""; // Private key
  return payload;
};

function getLocation(href) {
    var match = href.match(/^(https?\:)\/\/(([^:\/?#]*)(?:\:([0-9]+))?)(\/[^?#]*)(\?[^#]*|)(#.*|)$/);
    return match && {
        protocol: match[1],
        host: match[2],
        hostname: match[3],
        port: match[4],
        pathname: match[5],
        search: match[6],
        hash: match[7]
    }
}

PHP Code (with lots of comments):
if (strpos(strtoupper($authHeader), 'HMAC') !== 0) {
    echo 'out';
    throw new HttpForbiddenException();
}
else {
    $hmacSignature = $app->request->headers()->get('X-Hash');
    $publicKey = $app->request->headers()->get('X-Public');

    if ( empty($hmacSignature) || empty($publicKey) ) {
        echo 'out2';
        throw new HttpForbiddenException();
    }
    else {

        $this->hmacManager->setPublicKey($publicKey);
        print '$publickey = ' . $publicKey . '<br>';

        // Validate if base64_encoded or not
        if( base64_decode($hmacSignature, true) !== FALSE ) {
            $binaryString = base64_decode($hmacSignature);
            $hmacSignature = bin2hex($binaryString);
            print 'decoding ' . '<br>';
        }
        $this->hmacManager->setHmacSignature($hmacSignature);
        print '$hmacSignature = ' . $hmacSignature . '<br>';

        $this->hmacManager->setRequestMethod($app->request->getMethod());
        print 'method = ' . $app->request->getMethod() . '<br>';
        $this->hmacManager->setRequestResourceUri($app->request->getResourceUri());
        print 'uri = ' . $app->request->getResourceUri() . '<br>';

        $requestBody = $app->request()->getBody();
        if (Utils::isJson($requestBody)) {
            $requestBody = json_decode($requestBody);
        }
        $this->hmacManager->setRequestBody(json_encode($requestBody));
        print 'body = ' . json_encode($requestBody) . '<br>';

        print 'private key = ' . $this->hmacManager->getPrivateKey() . '<br>';

        $payload = '';
        $payload .= $this->hmacManager->getRequestMethod() . "":"";
        $payload .= $this->hmacManager->getRequestResourceUri() . "":"";
        $payload .= $this->hmacManager->getRequestBody() . "":"";
        $payload .= $this->hmacManager->getPrivateKey();
        print 'PHP payload [' . $payload . ']';
        $this->hmacManager->setPayload($payload);

        $hmacValue = $this->hmacManager->generateHmac();
        $isValid = $this->hmacManager->isValid($this->hmacManager->generateHmac(), $hmacSignature);

        if ($isValid !== true) {
            echo 'out3';
            throw new HttpForbiddenException();
        }
    }
}

generateHmac from another class:
public function generateHmac()
{
    print 'Generating HMAC' . '<br>';
    $algorithm = $this->getAlgorithm();
    print 'algo ' . $algorithm . '<br>';
    $privateKey = $this->getPrivateKey();
    print 'privk ' . $privateKey . '<br>';

    if (empty($algorithm)) {
        throw new \RuntimeException('Algorithm must be set and not empty');
    } elseif (empty($privateKey)) {
        throw new \RuntimeException('Private key must be set and not empty');
    }

    print 'payload ' . $this->getPayload() . '<br>';
    $hash = hash_hmac($this->getAlgorithm(), $this->getPayload(), $this->getPrivateKey(), false);
    print 'php hasj: ' . $hash . '<br>';

    return $hash;
}

Finally, here's the output statements:
$publickey = 95f97b93560f951b4cae46c86d03d9b1a81d4ae8
decoding 
$hmacSignature = e02ab6c9e856ba60dc524d5d6327e19baa968c954190e081f28d767f99745861

method = GET
uri = /hello/world
body = """"
private key = 9a6e30f2016370b6f2dcfb6880501d7f2305d69bout
PHP payload [GET:/hello/world:"""":9a6e30f2016370b6f2dcfb6880501d7f2305d69bout]

Generating HMAC
algo sha256
privk 9a6e30f2016370b6f2dcfb6880501d7f2305d69bout
payload GET:/hello/world:"""":9a6e30f2016370b6f2dcfb6880501d7f2305d69bout
php hash: 6961b9d1f6e986c49d963cbebd691fa68dfa59b4ce3b7f05320c2d43eae3c7c3

Hope it helps!
","We've just added new Base 64 to Hex conversion dynamic values, this should solve your problem.
Wrap your HMAC signature dynamic value inside the new Base 64 to Hex one, and you'll get a valid hexadecimal signature:

You can install this new dynamic value here: Base 64 to Hex Dynamic Value
","437","<php><hmac><sha256><paw-app>","5","2","2","2015-05-11 12:36:15","29976249","0","1","-1","","2017-05-23 12:32:58","2015-04-30 19:28:13",""
"33310959","sha256.TransformBlock in Win10 Universal App","I have this working code in .NET 4.5:
var sha256 = System.Security.Cryptography.SHA256.Create();
var message = new byte[] {1, 2, 3};
var s = new byte[32];
var m = sha256.ComputeHash(message);
sha256.TransformBlock(m, 0, m.Length, m, 0);
sha256.TransformFinalBlock(s, 0, s.Length);
var x = sha256.Hash;  // x = {236, 196, 174, 128, 243....}

And I'm trying to replicate it in an universal Windows 10 App.
However I cannot find TransformBlock / TransformFinalBlock functions on the SHA256-object in the new .NET libraries.
I've added a dependency to version 4.0.0-beta-23409 of System.Security.Cryptography.Algorithms. And the errors I'm getting are:

error CS1061: 'SHA256' does not contain a definition for 'TransformBlock' and no extension method 'TransformBlock' accepting a first argument of type 'SHA256' could be found (are you missing a using directive or an assembly reference?)
error CS1061: 'SHA256' does not contain a definition for 'TransformFinalBlock' and no extension method 'TransformFinalBlock' accepting a first argument of type 'SHA256' could be found (are you missing a using directive or an assembly reference?)
error CS1061: 'SHA256' does not contain a definition for 'Hash' and no extension method 'Hash' accepting a first argument of type 'SHA256' could be found (are you missing a using directive or an assembly reference?)

How do I achieve the same result as in .NET 4.5?
","The solution was found in another class, IncrementalHash.
Apparently, Microsoft wanted to separate the stateful (TransformBlock and TransformFinalBlock) and ""stateless"" (ComputeHash) parts of HashAlgorithm, because they didn't have good isolation.
Anyway, here's how to replicate the code in a Universal Windows 10 App:
var message = new byte[] { 1, 2, 3 };
var s = new byte[32];
byte[] m;
byte[] x;

using (HashAlgorithm sha256 = SHA256.Create())
{
    m = sha256.ComputeHash(message);
}

using (IncrementalHash sha256 = IncrementalHash.CreateHash(HashAlgorithmName.SHA256))
{
    sha256.AppendData(m);
    sha256.AppendData(s);
    x = sha256.GetHashAndReset();
}

","435","<c#><.net><win-universal-app><sha256>","1","0","1","2015-10-25 15:26:22","33331413","2","","","","","2015-10-23 20:33:47",""
"40531417","Verifying -sha256 signature using OpenSSL","Maven checksum plugin generated 2 files for me:

Schedule.war 
Schedule.war.sha256

On our Windows 2008 R2 production  machine we only have OpenSSL, so I thought about using OpenSSL to verify signature against the war file. We are not allowed to install any other software.
SO far I got it to print out the on CMD hash of war file but not verify.
Can someone help me with the command to also verify?
This is what I have so far:
C:\Users\Administrator>openssl dgst -sha256 -signature Schedule.war.sha256 Schedule.war
SHA256(Schedule.war)= 3t4g5h6j7kf72333c2894f2942b7b5871d844b25576f7f6fif8fnf8e8w8e5

","I just went with:
openssl dgst -sha256 Schedule.war
SHA256(Schedule.war)= 3t4g5h6j7kf72333c2894f2942b7b5871d844b25576f7f6fif8fnf8e8w8e5

And manually open .sha256 file and compare.
","430","<windows><openssl><command><sha256>","0","0","1","2016-11-10 19:27:06","","1","","608639","","2016-11-10 18:31:11","2016-11-10 15:36:44",""
"36432905","EVP_DigestUpdate and ""invalid conversion from ‘unsigned char*’ to ‘const char*’""","Here's the example taken from EVP Message Digests on the OpenSSL wiki:
void digest_message(unsigned char *message, unsigned char **digest, unsigned int *digest_len)
{
    EVP_MD_CTX *mdctx;

    if((mdctx = EVP_MD_CTX_create()) == NULL)
        handleErrors();

    if(1 != EVP_DigestInit_ex(mdctx, EVP_sha256(), NULL))
        handleErrors();

    if(1 != EVP_DigestUpdate(mdctx, message, strlen(message)))
        handleErrors();

    if((*digest = (unsigned char *)OPENSSL_malloc(EVP_MD_size(EVP_sha256()))) == NULL)
        handleErrors();

    if(1 != EVP_DigestFinal_ex(mdctx, *digest, digest_len))
        handleErrors();

    EVP_MD_CTX_destroy(mdctx);
}

The problem is when I try to compile it I get the following error:
evp_test.cpp:18:60: error: invalid conversion from ‘unsigned char*’ to ‘const char*’ [-fpermissive]
 if(1 != EVP_DigestUpdate(mdctx, message, strlen(message)))

In file included from /usr/include/c++/5/cstring:42:0

So strlen being called on message causes the error because strlen expects a const char? Is this because strings are arrays of const chars? 
What should I be doing differently to solve the issue?
","It has been fixed:
void digest_message(const unsigned char *message, size_t message_len,
                    unsigned char **digest, unsigned int *digest_len)
{
    EVP_MD_CTX *mdctx;

    if((mdctx = EVP_MD_CTX_create()) == NULL)
        handleErrors();

    if(1 != EVP_DigestInit_ex(mdctx, EVP_sha256(), NULL))
        handleErrors();

    if(1 != EVP_DigestUpdate(mdctx, message, message_len))
        handleErrors();

    if((*digest = (unsigned char *)OPENSSL_malloc(EVP_MD_size(EVP_sha256()))) == NULL)
        handleErrors();

    if(1 != EVP_DigestFinal_ex(mdctx, *digest, digest_len))
        handleErrors();

    EVP_MD_CTX_destroy(mdctx);
}

You were right that strlen needs an array of char, and not an unsigned char or byte.
The bigger problem was the design/engineering. An explicit length parameter was needed because there's no guarantee a byte array is NULL terminated like a C-string. In fact, a byte array might have a few NULLs embedded in it.
","429","<c++><hash><openssl><sha256>","1","0","1","2016-04-05 23:10:43","36438610","1","","608639","","2016-04-05 23:07:07","2016-04-05 17:13:26",""
"23376826","Batch creating seafile users (cloudstorage) with php: Password hash doesn't match","I am trying to create seafile users with php. http://www.seafile.com
The hash of a user who is already existing looks like:
PBKDF2SHA256$10000$9ee87caa42ed5b5fd3f62781d8df82af5e2d9e5e5250d22bf70336cc5e2fb060$478602208097c48b47042e25d026fec1b0363551a4f52aa2e2674f3093010215

So I assume the hashing algo is sha256 using the pbkdf2 key derivation function with 10k rounds. The first part after that should be the salt seperated by an $, then there is supposed to be the pwd hash.
Seafile is open-sourced so I tried to find the code for generating this hash and found this one:
There is a function called hash_password_pbkdf2_sha256() which should do this job.
When I'm trying to create the same hash like above with php (Password is ""12345678"")
hash_pbkdf2('sha256', '12345678','9ee87caa42ed5b5fd3f62781d8df82af5e2d9e5e5250d22bf70336cc5e2fb060', 10000, 64)

I get 148f4d331b647bafa2b15d145814d56fbe40e13221aff6e53329680b4cadbc84 which is not equal to above 478602208097c48b47042e25d026fec1b0363551a4f52aa2e2674f3093010215
Any ideas how to fix this?
","The C function validate_passwd_pbkdf2_sha256 in the file you pointed calls hex_to_rawdata (salt_str, salt, SHA256_DIGEST_LENGTH) before it hashes the password. PHP equivalent would be hex2bin.
hash_pbkdf2(
  'sha256',
  '12345678',
  hex2bin('9ee87caa42ed5b5fd3f62781d8df82af5e2d9e5e5250d22bf70336cc5e2fb060'),
  10000,
  64
);

produces the expected 478602208097c48b47042e25d026fec1b0363551a4f52aa2e2674f3093010215
","429","<php><hash><sha256><password-encryption><pbkdf2>","2","3","1","2014-05-15 05:45:29","23670177","0","2","2966689","","2014-04-30 09:52:38","2014-04-29 23:02:49",""
"49589019","Password match verification with SHA-256","What I am trying to do is generate the same hashed password at the login and register page. The login page hash must match the register hash inside the data base. I am using java and the following code.
Register page:
     // Encrypt password
     try {
        MessageDigest msgDigest = MessageDigest.getInstance(""SHA-256"");
        msgDigest.reset();
        byte[] passByte = pass.getBytes(""UTF-8"");
        pass = msgDigest.digest(passByte).toString();
        System.out.println(pass);
    } catch (NoSuchAlgorithmException ex) {
        Logger.getLogger(NewCustomer.class.getName()).log(Level.SEVERE, null, ex);
    } catch (UnsupportedEncodingException ex) {
        Logger.getLogger(NewCustomer.class.getName()).log(Level.SEVERE, null, ex);
    }

Login page:
    // Encrypt password
    try {
        MessageDigest msgDigest = MessageDigest.getInstance(""SHA-256"");
        msgDigest.reset();
        byte[] passByte = ipwd.getBytes(""UTF-8"");
        ipwd = msgDigest.digest(passByte).toString();
        System.out.println(ipwd);
    } catch (NoSuchAlgorithmException ex) {
        Logger.getLogger(NewCustomer.class.getName()).log(Level.SEVERE, null, ex);
    } catch (UnsupportedEncodingException ex) {
        Logger.getLogger(NewCustomer.class.getName()).log(Level.SEVERE, null, ex);
        }

","So I figured out a way to achieve this but it isn't as secure as it could be. I have another file setting the pwd to call the method.
The following code is what I came up with.
    public void encryptPass(String pwd) {
            MessageDigest md;
            try {
                md = MessageDigest.getInstance(""MD5"");
                byte[] passBytes = pwd.getBytes();
                md.reset();
                byte[] digested = md.digest(passBytes);
                StringBuffer sb = new StringBuffer();
                for (int i = 0; i < digested.length; i++) {
                    sb.append(Integer.toHexString(0xff & digested[i]));
                }
                encryptedPasscode = sb.toString();
            } catch (NoSuchAlgorithmException e) {
                Logger.getLogger(CryptWithMD5.class.getName()).log(Level.SEVERE, null, e);
                System.out.println(""Error Code: 1002"" + e); // Error code for No Algorithm Exception
            }
        }

","428","<java><sql><login><sha256>","0","0","1","2018-09-28 15:49:04","49659692","4","","8575458","","2018-09-28 15:49:04","2018-03-31 14:51:28",""
"35051226","Convert SHA256 Password Hashing Class to bcrypt in PHP","I have this hash class that I need to convert from SHA256 to bcrypt because I'm using it to store passwords.  I can't seem to translate the documentation to my situation. 
<?php
class Hash{
    public static function make($string, $salt = ''){
        return hash('sha256', $string . $salt);
    }

    public static function salt($length){
        return mcrypt_create_iv($length);
    }

    public static function unique(){
        return self::make(uniqid());
    }
}

","The best way seemed to be to just change the logic in the forms from 
password_hash(Input::get('password'),PASSWORD_DEFAULT),

to      
password_hash(Input::get('password'), PASSWORD_BCRYPT, array('cost' => 12)),

My existing password_verify worked from my user class.
","426","<php><bcrypt><sha256>","1","3","1","2016-01-28 02:44:28","35051954","6","","1415724","","2016-01-28 01:21:48","2016-01-28 01:15:42",""
"39151674","Why does Go sha256 give different result than Ubuntu command sha256sum?","Golang playground link given in a SO question uses the sha256 lib of Go gives a different result than running the following command in Ubuntu linux.
echo ""sha1 this string"" | sha256sum
Go's result: fceab3bb749b11a43b89f21ccd28e3f5d8b38d5b23eeea960fc169ab482ee2cd
Linux result: 62d44fd0392ed998179bfd4a162141d7000d1f9aa4fae26465e2e4f57d3a420e
Is this not the correct way to create a digest in Go? Can someone explain what is going on here?
","Because echo appends a \n character. Try doing echo -n:
echo -n ""sha1 this string"" | gsha256sum
fceab3bb749b11a43b89f21ccd28e3f5d8b38d5b23eeea960fc169ab482ee2cd  -

","425","<ubuntu><go><sha256><digest>","2","8","1","2016-08-29 17:57:35","39151726","1","1","150978","","2016-08-29 17:57:35","2016-08-25 17:45:11",""
"26498110","How can we prove that a bitcoin block is always solvable?","I'm trying to implement a simple cryptocurrency similar to bitcoin, just to understand it deeply down to the code level.
I understand that a bitcoin block contains a hash of the previous block, many transactions and an reward transaction for the solver.
the miner basically runs SHA256 on this candidate block combined with an random number. As long as the first certain digits of a hash result are zeros, we say this block is solved, and we broadcast the result to the entire network to claim the reward.
but I have never seen anyone proving that a block is solvable at all. I guess this is guaranteed by SHA256? because the solution size is fixed, after trying enough inputs, you are guaranteed to hit every hash result? but how can you prove that the solution distribution of a block is even (uniform), so that you can indeed cover all hash results?
now, suppose a block is indeed always solvable, can I assume that using 64bit for the random integer is enough to solve it? how about 32bit? or I have to use an infinite bit integer?
for example, in the basiccoin project:
the code for proof of work is the following:
    def POW(block, hashes):
    halfHash = tools.det_hash(block)
    block[u'nonce'] = random.randint(0, 10000000000000000000000000000000000000000)
    count = 0
    while tools.det_hash({u'nonce': block['nonce'],
                          u'halfHash': halfHash}) > block['target']:
        count += 1
        block[u'nonce'] += 1
        if count > hashes:
            return {'error': False}
        if restart_signal.is_set():
            restart_signal.clear()
            return {'solution_found': True}
        ''' for testing sudden loss in hashpower from miners.
        if block[u'length']>150:
        else: time.sleep(0.01)
        '''
    return block

this code randoms a number between [0, 10000000000000000000000000000000000000000] as a start point, and then it just increases the value one by one:
block[u'nonce'] += 1

I'm not a python programmer, I don't know how python handles the type of the integer. there is no handling of integer overflow.
I'm trying to implement similar thing with c++, I don't know what kind of integer can guarantee a solution.
","
but how can you prove that the solution distribution of a block is even (uniform), so that you can indeed cover all hash results?

SHA256 is deterministic so if you rehash the txns it will always provide the same 256 hash.
The client nodes keep all the txn and the hashes in the merkle tree for the network clients to propagate and verify the longest possible block chain.
The merkle tree is the essential data structure for recording the hashes of previous blocks.
From there the chain of hash confirmations can be tracked from the origin (genesis) block.
","421","<hash><bitcoin><sha256>","2","0","1","2014-12-08 02:43:32","","4","","514025","","2014-10-21 23:51:07","2014-10-21 23:31:19",""
"31992916","SHA-256 different values in Java and vb.net","Starting over isn't an option because an already running project uses SHA-256   
Here's the java code  --->>> just a simple code to hash any string  
    public static String SHA256 (String text) throws NoSuchAlgorithmException,    UnsupportedEncodingException
    {
textByte = text.getBytes(""UTF-8"");  
MessageDigest md = MessageDigest.getInstance(""SHA-256"");
textByte = md.digest(textByte);
return Base64.encodeToString(textByte,Base64.NO_CLOSE);
}

and the VB code as follows
 Public Function EncryptPassword(ByVal password As String) As String
        Dim hashedPassword As String = Nothing
        Dim hashProvider As SHA256Managed = Nothing
        Try
            Dim passwordBytes() As Byte
            passwordBytes = System.Text.Encoding.Unicode.GetBytes(password)
            hashProvider = New SHA256Managed
            hashProvider.Initialize()
            passwordBytes = hashProvider.ComputeHash(passwordBytes)
            hashedPassword = Convert.ToBase64String(passwordBytes)
        Catch ex As Exception
        Finally
            If Not hashProvider Is Nothing Then
                hashProvider.Clear()
                hashProvider = Nothing
            End If
        End Try
        Return hashedPassword
    End Function

","Well it might not be the only problem but System.Text.Encoding.Unicode in VB is UTF-16LE where as your Java code is using UTF-8.
","421","<java><vb.net><sha256>","0","2","1","2015-08-13 16:01:50","","1","3","","","","2015-08-13 15:47:00",""
"33895459","Magento REDSYS SHA256 issue error 180 on TPV and no order confirmation","We have a commerce in Magento version 1.8.1 and using Redsys module to implement payment trough VISA.
With the new implementation of SHA256 for SSL, Redsys provides the following module to upgrade/install Redsys module (actually version 2.8.3):
http://www.redsys.es/wps/wcm/connect/redsys/52db13b8-af9e-4d1c-b796-3890b72ddb75/redsys_magento_V2.8.3.zip?MOD=AJPERES 
Installation went alright: placed things where it should be and started debugging.
So, here we go: All runs, it appears to work perfectly on first try BUT orders are still in ""New"" state and not in ""Processing"". Also TPV platform, in Notifications, tells a ""180"" which means it returns to my commerce but something goes wrong.
Obviously something is going bad in the return it the code is the genuine code of the module.
Any idea on this?
","Use new Magento module community support http://redsys-magento.devopensource.com/
this is compatible SHA256
","417","<magento><sha256>","0","1","3","2015-12-01 09:07:14","33896517","0","","747965","","2015-11-24 15:04:06","2015-11-24 13:53:09",""
"33895459","Magento REDSYS SHA256 issue error 180 on TPV and no order confirmation","We have a commerce in Magento version 1.8.1 and using Redsys module to implement payment trough VISA.
With the new implementation of SHA256 for SSL, Redsys provides the following module to upgrade/install Redsys module (actually version 2.8.3):
http://www.redsys.es/wps/wcm/connect/redsys/52db13b8-af9e-4d1c-b796-3890b72ddb75/redsys_magento_V2.8.3.zip?MOD=AJPERES 
Installation went alright: placed things where it should be and started debugging.
So, here we go: All runs, it appears to work perfectly on first try BUT orders are still in ""New"" state and not in ""Processing"". Also TPV platform, in Notifications, tells a ""180"" which means it returns to my commerce but something goes wrong.
Obviously something is going bad in the return it the code is the genuine code of the module.
Any idea on this?
","Found a solution, the codification of Order Id as sent to Redsys in line 79:
In  \app\code\local\Excellenceredsys\Redsys\controllers\IndexController.php
$numpedido =  str_pad($orderId, 12, ""0"", STR_PAD_LEFT); 
so the result is: 0001XXXXXXXXXX (at least for my commerce)
That's generating a problem in line 301:
$order = Mage::getModel('sales/order')->loadByIncrementId($orde);
It isn't able to get order by id because of the padding zeros.

Quick Solution: $order = Mage::getModel('sales/order')->loadByIncrementId($orde*1);
No Var Type Change Solution: take off the padding zeros, maybe with a substr function.

","417","<magento><sha256>","0","0","3","2015-12-01 09:07:14","33896517","0","","747965","","2015-11-24 15:04:06","2015-11-24 13:53:09",""
"33895459","Magento REDSYS SHA256 issue error 180 on TPV and no order confirmation","We have a commerce in Magento version 1.8.1 and using Redsys module to implement payment trough VISA.
With the new implementation of SHA256 for SSL, Redsys provides the following module to upgrade/install Redsys module (actually version 2.8.3):
http://www.redsys.es/wps/wcm/connect/redsys/52db13b8-af9e-4d1c-b796-3890b72ddb75/redsys_magento_V2.8.3.zip?MOD=AJPERES 
Installation went alright: placed things where it should be and started debugging.
So, here we go: All runs, it appears to work perfectly on first try BUT orders are still in ""New"" state and not in ""Processing"". Also TPV platform, in Notifications, tells a ""180"" which means it returns to my commerce but something goes wrong.
Obviously something is going bad in the return it the code is the genuine code of the module.
Any idea on this?
","I had the same issue.  The orders were OK but they stay in pending status and I didn't receive the email with the order but I received the email from redsys with the transaction.
I changed line 301 and the status is processing and I receive the email with the order from the customer.
","417","<magento><sha256>","0","1","3","2015-12-01 09:07:14","33896517","0","","747965","","2015-11-24 15:04:06","2015-11-24 13:53:09",""
"45007908","Calculating SHA256 twice - what for?","I'm trying to understand Bitcoin protocol, and sometimes see instructions like this:

The TransactionId is defined by SHA256(SHA256(txbytes))

or

The hash of the public key is generated by performing a SHA256 hash on the public key, and then performing a RIPEMD160 hash on the result, with Big Endian notation. The function could look like this: RIPEMD160(SHA256(pubkey))

For what purpose do hash calculatig twice?
","""A common rationale for hashing twice is to guard against the length-extension property of the hash""
Full answer here https://crypto.stackexchange.com/questions/50017/why-hashing-twice
","417","<hash><bitcoin><sha256><sha><sha2>","0","1","1","2017-07-11 12:01:00","45034034","2","","","","","2017-07-10 09:06:11",""
"32333189","Limit a hashed and encoded string to 44 characters: NodeJs","Here is a sample input. 
426155Grtyhr8888xxxxxxx7777BDTR56654.88555G77D6666FF555W44RT46G666D55TY_3rtyDeeeeeEEE9

And follow the steps given bellow. 

add a salt to the string. My salt is: 'tttttttttt'
Hash this salted string using ""SHA-256"".
encode using base64

I need to out put a string 44 characters long. Here I have provide a sample code I made.
var str_salted = str+'tttttttttt';
var sha256 = require('sha256');
var str_myHash = sha256(str_salted);
var str_encoded = new Buffer(str_myHash).toString('base64');
console.log(str_encoded);

This code outputs a very long string. I need to limit this string to 44 characters. How can I do this.
","I found the answer. Here I used crypto for solve this problem. 
Following is my code.
var crepto = require('crypto');
var output = crypto.createHash(""sha256"").update(str_salted).digest(""base64"");

If any string hased using ""sha256"" and digest to base64, it provides a 44 long string. 
","416","<node.js><base64><sha256>","0","1","1","2015-09-01 14:27:58","","2","1","","","","2015-09-01 13:39:40",""
"37219937","Upgrading from SHA1 to SHA2 breaks everything in C# application","I have been tasked with checkmarx and whitehat sentinel security fixes.  Problem is that changing from SHA1 to SHA2 doesn't automagically work.  The new Hash is NOT going to match all the hundreds of users passwords in the database table.
What am I suppose to do, make everyone change their password?
C# code change:
//SHA1 sha = SHA1.Create();
SHA256 sha = SHA256Managed.Create();

byte[] buff = sha.ComputeHash(Encoding.Unicode.GetBytes(SaltAndPwd));

","As you know well, hashing is one-way which means cannot be decrypted back to original value and nothing can convert without knowing original value. Even SHA2 has 'different' and more advanced hashing algorithm.  
One bad option is, marking users differently who were registered before SHA2. However, The users with old SHA1 might be exposed to hacking like LinkedIn site was hacked when using SHA1.  
My idea is same with you. Just like when we see Password Change Recommendation in Big internet sites, Just simply make short process like validating old password and get new password from users.
Nuget package like PWDTK which is of SHA2 might help..
","416","<c#><security><sha1><sha256><sha>","1","1","1","2016-05-14 09:39:59","37225083","2","","","","","2016-05-13 21:59:24",""
"51680635","401 Unauthorized error Binance API in r","I am trying to create a new order via the Binance API using RStudio.
I found the Binance Official API Docs and figured out that I should use:
POST /api/v3/order (HMAC SHA256).

The following script doesn't work out and gives a status code: HTTP/1.1 401 Unauthorized
key <- ""*[my key]*""
secret <- ""*[my secret key]*""
url='https://api.binance.com/api/v3/order'
timestamp <- as.character(jsonlite::fromJSON(content(GET('https://api.binance.com/api/v1/time'), ""text""))$serverTime + 999)
query <- list( ""symbol"" = ""XLMBTC"", ""side"" = ""BUY"", ""type"" = ""MARKET"", ""quantity"" = 10, ""recvWindow"" = 5000, ""timestamp"" = timestamp )
signature <- digest::hmac(key = secret, object = paste(names(query), query, sep = ""="", collapse = ""&""), algo = ""sha256"")
POST(url, add_headers(""X-MBX-APIKEY""= key), query = c(query, signature = signature), verbose())

Is there a bug in my coding? I tried this once before and then it worked perfectly well. However, now I cannot come up with a working script.
Here you can find documentation about the Binance API:
https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md 
Can anybody help me out?
","It's already solved. Ik checked this website for the solution:
https://gunbot.shop/error-response-code-400-on-binance-how-to-fix/ 
The problem was that my API and SECRET key were broken.
","414","<r><api><sha256><hmac><binance>","0","1","1","2018-12-04 21:57:38","51683419","0","1","","","","2018-08-03 22:10:00",""
"44862587","Signing Data Using C#","I have file which I am signing using RSA algorithm using two methods:

bouncycastle 
openssl 

both results in two different output and openssl results in valid file. I don't know why my c# code is giving wrong output.
Here is my code for bouncy castle in c#
    private void GenerateSignatureFile(string sourceFile)
    {
        try
        {
            var stringToSign = ReadText(sourceFile).ToString();                
            var sig = Sign(stringToSign);                
            var fileContent = Encoding.UTF8.GetString(sig);
            using (var sw = File.CreateText(Path.Combine(_projectLocation, _sigFileName)))
            {
                sw.WriteLine(fileContent);
            }

        }
        catch (Exception ex)
        {
            LoggingService.Log(ex.Message);
        }
    }


    public byte[] Sign(String data)
    {
        var key = readPrivateKey();
        /* Make the key */
        var keyParameter = new RsaKeyParameters(key.IsPrivate, ((RsaPrivateCrtKeyParameters)key).Modulus, ((RsaPrivateCrtKeyParameters)key).Exponent);

        /* Init alg */
        ISigner sig = SignerUtilities.GetSigner(""SHA256withRSA"");

        /* Populate key */
        sig.Init(true, key);

        /* Get the bytes to be signed from the string */
        var bytes = Encoding.UTF8.GetBytes(data);

        /* Calc the signature */
        sig.BlockUpdate(bytes, 0, bytes.Length);
        return sig.GenerateSignature();
    }

    public static IEnumerable<string> ReadText(string scriptPath)
    {
        var buffer = new StringBuilder();
        foreach (var line in File.ReadLines(scriptPath))
        {
            if (line == ""GO"")
            {
                yield return buffer.ToString();
                buffer.Clear();
            }
            else
            {
                buffer.AppendLine(line);
            }
        }
    }

  private AsymmetricKeyParameter readPrivateKey()
    {
        AsymmetricCipherKeyPair keyPair;

        using (var reader = new StringReader(_privateKey))
            keyPair = (AsymmetricCipherKeyPair)new PemReader(reader).ReadObject();

        return keyPair.Private;
    }

and in openssl I use following command to sign data 
openssl dgst -sha256 -sign content_private_key.pem -out content.zip.sig content.zip

I don't know why my c# code is resulting in different output. 
","I don't think that ReadText will always return the text identical to the binary text that openssl processes. To be sure, just write the bytes variable to file after the following line was executed:
var bytes = Encoding.UTF8.GetBytes(data);

For instance you could compare the two files using sha256sum.
If this is indeed the culprit then simply read in the file as binary and sign that.
","414","<c#><rsa><digital-signature><sha256>","0","0","1","2017-09-07 08:33:31","44866194","0","1","608639","","2017-07-02 21:06:34","2017-07-01 15:28:11",""
"31060347","NSString to String throwing ""fatal error: unexpectedly found nil while unwrapping an Optional value""","The following Swift code is crashing on the return statement with the following error: 

fatal error: unexpectedly found nil while unwrapping an Optional value

According to the debugger the result variable has a non-null value. I really want the function to accept Strings and return a String, not NSData. Hoping this is a dumb question and I'm just not seeing it. Been stuck on this for hours!
println(hmac_sha256(""sample_data"", inKey: ""sample_key""))

    func hmac_sha256(inData: String, inKey: String) -> (String) {

         let data: NSData = inData.dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: false)!
         let key: NSData = inKey.dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: false)!

         var result = NSMutableData(length: Int(CC_SHA256_DIGEST_LENGTH))

         CCHmac(CCHmacAlgorithm(kCCHmacAlgSHA256), key.bytes, size_t(key.length), data.bytes, size_t(data.length), result!.mutableBytes)

         return NSString(data: result!, encoding: NSUTF8StringEncoding) as! String
     }

","You cannot expect to be able to turn arbitrary data into an NSString with UTF-8 encoding. For example, UTF-8 can never, ever include a byte 0xff and therefore data containing that byte value can never be turned into an NSString. 
So no matter how hard you want to get an NSString, you won't get it. 
","413","<ios><swift><hmac><sha256>","0","2","2","2015-06-25 21:12:01","","1","","","","","2015-06-25 20:39:22",""
"31060347","NSString to String throwing ""fatal error: unexpectedly found nil while unwrapping an Optional value""","The following Swift code is crashing on the return statement with the following error: 

fatal error: unexpectedly found nil while unwrapping an Optional value

According to the debugger the result variable has a non-null value. I really want the function to accept Strings and return a String, not NSData. Hoping this is a dumb question and I'm just not seeing it. Been stuck on this for hours!
println(hmac_sha256(""sample_data"", inKey: ""sample_key""))

    func hmac_sha256(inData: String, inKey: String) -> (String) {

         let data: NSData = inData.dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: false)!
         let key: NSData = inKey.dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: false)!

         var result = NSMutableData(length: Int(CC_SHA256_DIGEST_LENGTH))

         CCHmac(CCHmacAlgorithm(kCCHmacAlgSHA256), key.bytes, size_t(key.length), data.bytes, size_t(data.length), result!.mutableBytes)

         return NSString(data: result!, encoding: NSUTF8StringEncoding) as! String
     }

","Got it. I think I was missing the big picture. The goal was to convert NSData to a hex string. I found a nifty method on github for this here: https://github.com/CryptoCoinSwift/SHA256-Swift/blob/master/SHA256.swift
","413","<ios><swift><hmac><sha256>","0","0","2","2015-06-25 21:12:01","","1","","","","","2015-06-25 20:39:22",""
"31492897","Golang - Dropbox webhook signature validation hmac","I am writing a program that needs to use Dropbox's webhooks. I haven't been able to find any Go implementation already in place, so I've decided to write mine. Unfortunately, it doesn't seem to work. 
I think the issue here is with hmac, as I am most probably doing something wrong, but I just can't seem to understand where exactly the issue here. Any idea?
The following is what I have:
package dboxwebhook

import (
    ""bytes""
    ""crypto/hmac""
    ""crypto/sha256""
    ""errors""
    ""io""
    ""io/ioutil""
    ""log""
)

type Signature struct {
    AppSecret []byte
    Signature []byte
}

func (w *Signature) Check(reqBody io.ReadCloser) error {

    if bytes.Compare(w.Signature, nil) == 0 {
        return errors.New(""DropBox signature doesnt exist"")
    }

    // building HMAC key (https://golang.org/pkg/crypto/hmac/)
    mac := hmac.New(sha256.New, w.AppSecret)
    requestBody, err := ioutil.ReadAll(reqBody)
    if err != nil {
        return err
    }

    mac.Write(requestBody)
    expectedMac := mac.Sum(nil)

    log.Println(w.AppSecret)
    log.Println(expectedMac)
    log.Println(w.Signature)

    // compare if it corresponds with the signature sent by DropBox
    comparison := hmac.Equal(w.Signature, expectedMac)

    if !comparison {
        return errors.New(""Signature Check unsuccessful"")
    }

    return nil

}

To test this, the only way I know is to use this Python script from Dropbox.
","The Dropbox signature is sent as string in the HTTP header X-Dropbox-Signature.
So as to use it with hmac.Equal, you need to decode the hex string representation to a slice of byte first using package encoding/hex.
    import ""encoding/hex""

    [...]
    hexSignature, err := hex.DecodeString(w.Signature)
    [...]

Then you can use the hex bytes in the comparison
    [...]
    // compare if it corresponds with the signature sent by DropBox
    comparison := hmac.Equal(hexSignature, expectedMac)
    [...]

","402","<go><dropbox-api><hmac><sha256><webhooks>","0","2","1","2018-01-02 14:59:50","","7","","1305693","","2015-07-20 19:35:01","2015-07-18 15:52:24",""
"53374359","Why is hashlib so faster than other codes for sha256 and how can I get my code close to hashlib performance?","Bellow is a code that compares hashlib.sha256() to my sha256_test() function which is written in raw python in terms of hash rate performance. 
from time import time_ns as time
import hashlib

def pad512(bytes_):
    L       = len(bytes_)*8
    K       = 512 - ((L + 1) % 512)
    padding = (1 << K) | L
    return bytes_ + padding.to_bytes((K + 1)//8, 'big')

def mpars (M):
    chunks = []
    while M:
        chunks.append(M[:64])
        M = M[64:]
    return chunks

def sha256_transform(H, Kt, W):
    a, b, c, d, e, f, g, h = H
    # Step 1: Looping
    for t in range(0, 64):
        T1 = h + g1(e) + Ch(e, f, g) + Kt[t] + W[t]
        T2 = (g0(a) + Maj(a, b, c))
        h = g
        g = f
        f = e
        e = (d + T1) & 0xffffffff
        d = c
        c = b
        b = a
        a = (T1 + T2) & 0xffffffff
    # Step 2: Updating Hashes
    H[0] = (a + H[0]) & 0xffffffff
    H[1] = (b + H[1]) & 0xffffffff
    H[2] = (c + H[2]) & 0xffffffff
    H[3] = (d + H[3]) & 0xffffffff
    H[4] = (e + H[4]) & 0xffffffff
    H[5] = (f + H[5]) & 0xffffffff
    H[6] = (g + H[6]) & 0xffffffff
    H[7] = (h + H[7]) & 0xffffffff
    return H

Ch   = lambda x, y, z: (z ^ (x & (y ^ z)))
##    """"""The x input chooses if the output is from y or z.
##    Ch(x,y,z)=(x∧y)⊕(¬x∧z)""""""
Maj  = lambda x, y, z: (((x | y) & z) | (x & y))
##    """"""The result is set according to the majority of the 3 inputs.
##    Maj(x, y,z) = (x ∧ y) ⊕ (x ∧ z) ⊕ ( y ∧ z)""""""

ROTR = lambda x, y: (((x & 0xffffffff) >> (y & 31)) | (x << (32 - (y & 31)))) & 0xffffffff
SHR  = lambda x, n: (x & 0xffffffff) >> n

s0   = lambda x: (ROTR(x, 7) ^ ROTR(x, 18) ^ SHR(x, 3))
s1   = lambda x: (ROTR(x, 17) ^ ROTR(x, 19) ^ SHR(x, 10))

g0   = lambda x: (ROTR(x, 2) ^ ROTR(x, 13) ^ ROTR(x, 22))
g1   = lambda x: (ROTR(x, 6) ^ ROTR(x, 11) ^ ROTR(x, 25))

def sha256_test (bytes_):
    #Parameters
    initHash = [
                0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A,
                0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19,
                ]
    Kt = [
        0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,
        ]

    padM   = pad512(bytes_)
    chunks = mpars(padM)
    # Preparing Initaial Hashes
    H = initHash    
    # Starting the Main Loop
    for chunk in chunks:
        W = []
        # Step 1: Preparing Wt
        for t in range(0, 16):
            W.append((((((chunk[4*t] << 8) | chunk[4*t+1]) << 8) | chunk[4*t+2]) << 8) | chunk[4*t+3])
        for t in range(16, 64):
            W.append((s1(W[t-2]) + W[t-7] + s0(W[t-15]) + W[t-16]) & 0xffffffff)
        # Step 2: transform the hash
        H = sha256_transform(H, Kt, W)
        # Step 3: Give Out the digest
        Hash = b''
        for j in H:
            Hash += (j.to_bytes(4, byteorder='big'))

    return Hash

if __name__ == ""__main__"":

    k = 10000
    M = bytes.fromhex('00000000000000000001d2c45d09a2b4596323f926dcb240838fa3b47717bff6') #block #548867
    start = time()
    for i in range(0, k):
        o1 = sha256_test(sha256_test(M))
    end    = time()
    endtns1 = (end-start)/k
    endts1  = endtns1 * 1e-9
    print('@sha256_TESTs() Each iteration takes:  {} (ns) and {} (sec).'.format(endtns1, endts1))
    print('@sha256_TESTs() Calculated Hash power: {} (h/s)'.format(int(2/endts1)))

    start = time()
    for i in range(0, k):
        o2 = hashlib.sha256(hashlib.sha256(M).digest()).digest()
    end    = time()
    endtns2 = (end-start)/k
    endts2  = endtns2 * 1e-9
    print('@hashlib.sha256() Each iteration takes:  {} (ns) and {} (sec).'.format(endtns2, endts2))
    print('@hashlib.sha256() Calculated Hash power: {} (Kh/s)'.format(int(2/endts2/1024)))

    print('Outputs Match       : ', o1 == o2)
    print('hashlib is ~{} times faster'.format(int(endtns1/endtns2)))

When calculating the hash rate, is 1 Kilo Hash considered to be 1000 hashes or 1024 hashes?! 
If I am correct about calculating the hash rate I conclude that my PC can generate a hash rate of ~900 (h/s) using my own sha256_test() function while hashlib.sha256() outperforms this with ~300 Kh/s.
Firstly, I would like to know the mechanism behind hashlib's outstanding performance. When I read the code in hashlib.py, there isn't much code inside it and I can't understand how the hash values are computed. Is that possible to see the code behind hashlib.sha256()? 
Secondly, Is there any possibility to improve my code so that it can get close to a performance of 300 (Kh/s)? I have read about Cython, I am just not sure how much is it capable of improving such an algorithm.
Thirdly, Is that technically possible to be faster than hashlib in python?
","Well looking at hashlib.py won't help you too much to be honest, but it may give you a hint. What you have done is pure python code, whereas hashlib relies on a C implementation and that would run in circles around pure python with ease. Namely you need to look at this. So if you want to even get close to these numbers, you'd need to look into cython, C, C++ or Rust.
","401","<python><python-3.x><hash><sha256><hashlib>","1","1","1","2018-11-19 12:36:00","","0","","10618020","","2018-11-19 12:15:38","2018-11-19 12:10:01",""
"43385112","Bitcoin sha256 to hex generates different result than expected","I am trying to follow the instructions on deriving the WIF of a Hex bitcoin private key from - https://en.bitcoin.it/wiki/Wallet_import_format
However, when I try to hash the string (including 0x80 byte) I get different result than the expected.
I should have gotten 8147786C4D15106333BF278D71DADAF1079EF2D2440A4DDE37D747DED5403592.
Instead I receive e2e4146a36e9c455cf95a4f259f162c353cd419cc3fd0e69ae36d7d1b6cd2c09.
I read extensively on google and I understood that I should convert the string to binaries. I did, and then hashed the char array from those binaries to the same result.
Code is now working thanks to @Heinan Cabouly and @JaredPar
Here is the working code:
using System;
using System.Security.Cryptography;
using System.Text;
using System.Linq;

namespace Base58Encode
{

    internal class Program
    {
        public static string Str = ""800C28FCA386C7A227600B2FE50B7CAE11EC86D3BF1FBE471BE89827E19D72AA1D"";
        public static byte[] Bytes;
        public static void Main()
        {
            Bytes = StringToByteArray(Str);
            SHA256Managed sha = new SHA256Managed();
            string hashstr = String.Empty;
            byte[] encrypt = sha.ComputeHash(Bytes);
            foreach (byte b in encrypt)
            {
                hashstr += b.ToString(""x2"");
            }
            Console.WriteLine(hashstr);
            //prints e2e4146a36e9c455cf95a4f259f162c353cd419cc3fd0e69ae36d7d1b6cd2c09
            //instead of 8147786C4D15106333BF278D71DADAF1079EF2D2440A4DDE37D747DED5403592
            Console.ReadLine();

        }
        public static byte[] StringToByteArray(string hex)
        {
            return Enumerable.Range(0, hex.Length)
                         .Where(x => x % 2 == 0)
                         .Select(x => Convert.ToByte(hex.Substring(x, 2), 16))
                         .ToArray();

        }
    }
}

This is how to hash a hex string SHA-256 in C#.
Thanks to all! Helped me out a lot!
","As said here before me, the method you used for conversion isn't suitable. You can use this method (taken from stackoverflow by @JaredPar):
public static byte[] StringToByteArray(string hex) {
    return Enumerable.Range(0, hex.Length)
                 .Where(x => x % 2 == 0)
                 .Select(x => Convert.ToByte(hex.Substring(x, 2), 16))
                 .ToArray();
}

You call this function with your str (which represents the HEX string), and it will return the HEX representation.
From there, you can continue with your function as written.
","401","<c#><arrays><string><sha256><bitcoin>","0","2","1","2017-05-10 06:48:00","43385385","2","","608639","","2017-05-10 06:48:00","2017-04-13 06:33:10",""
"45978507","if a Bitcoin mining nounce is just 32 bits long how come is it increasingly difficult to find the winning hash?","I'm learning about mining and the first thing that surprised me is that the nounce part of the algorithm which is supposed to be randomly looped until you get a number smaller than the target hash .. is just 32 bits long.
Can you explain why then is it so difficult to loop an unsigned int and how come is it increasingly difficult over time? Thank you.
","Because it's not just the 32bit nonce that is involved in the calculation. The 1MB of transaction data is also part of the mining input. There is then a non-trivial amount of arithmetic to arrive at the output, which then can be compared with the target.
Bitcoin mining is looping over all 4billion uints until you find a ""right"" one.
The way that difficulty is increased, is that only some of the bits of the output matter. E.g. early on the lowest 11 bits had to be some specific pattern, the remaining 21bits could be anything. In theory there would be 2million ""right"" values for each transaction block, uniformly distributed across the range of a uint. Then the ""difficulty"" is increased so that 13 bits have to be some pattern, so now there are 4x fewer ""right"" answers, so it takes (on average) 4x longer to find one.
","399","<algorithm><hash><bitcoin><sha256>","1","1","2","2017-08-31 14:16:43","45983705","0","","","","","2017-08-31 09:54:58",""
"45978507","if a Bitcoin mining nounce is just 32 bits long how come is it increasingly difficult to find the winning hash?","I'm learning about mining and the first thing that surprised me is that the nounce part of the algorithm which is supposed to be randomly looped until you get a number smaller than the target hash .. is just 32 bits long.
Can you explain why then is it so difficult to loop an unsigned int and how come is it increasingly difficult over time? Thank you.
","The task is: try different nonce values in your potential block until you reach a block having a hash value below some given threshold.
I can't find the source right now, but I'm quite sure that since the introduction of special mining ASICs the 32-bit nonce is no longer enough to keep the miners busy for the planned 10 minutes interval between blocks. They are able to compute 4 billion block hashes in less than 10 minutes.
Increasing the difficulty didn't help anymore, as that reached the point where none of the 4 billion possible nonce values gave a hash below the threshold.
So they found some additional fields in the block that are now used as nonce-extension. The principle is still the same: try different values until you reach a block with a hash below the threshold, only now it's more than 32 bits that can be varied, allowing for the threshold to be lowered beyond the former 32-bit-implied barrier.
","399","<algorithm><hash><bitcoin><sha256>","1","2","2","2017-08-31 14:16:43","45983705","0","","","","","2017-08-31 09:54:58",""
"44201689","pipe dd to sha256sum","I need to get the sha256 hash of a chunk of a binary file.
I wrote a little shell script for that task:
dd if=$1 skip=$2 count=$3 bs=1 | sha256sum

When I test it, I get the following result:
bernardo@bernardo-ThinkCentre-Edge72:~$ ./test.sh test.bin 10 20
20+0 records in
20+0 records out
20 bytes (20 B) copied, 0,000100981 s, 198 kB/s
7d9330a7c51eabe36a81a6cff308ac4d2035e63d7a356fc112f4fcd16208f43d  -

Does that mean the hash is based solely on the chunk output by dd, or did it also use dd's feedback ""20+0 records in...""?
","This is the actual block stream hash (does not include the STDOUT text in the hash). You can verify this by dumping the contents to a separate file and checksumming that file using the of= option. You will get the same hash results. 
You can also hash a few 0'd out blocks and you will find the same hash results with different count increment output enumerated 
(meaning it is outside the calculation).
I.E.
root@host:~# dd if=/dev/sda count=2 bs=1M | sha256sum #Hash first two blocks as a single chunk
2+0 records in/out
2097152 bytes (2.1 MB) copied, 0.0121433 s, 173 MB/s
2e7e3388326c978b7b08d884ad3f737eb8ca6bce3fe57d7294ca96a768da6d81  -
root@host:~# dd if=/dev/sda count=2 bs=1M >> /some_nonexistent_file && sha256sum /some_nonexistent_file #Write and hash output stream result.
2+0 records in/out
2097152 bytes (2.1 MB) copied, 0.00182897 s, 1.1 GB/s
2e7e3388326c978b7b08d884ad3f737eb8ca6bce3fe57d7294ca96a768da6d81 /some_nonexistent_file
","398","<sha256><dd>","0","0","1","2018-04-25 21:39:40","","0","","","","","2017-05-26 12:30:27",""
"10103394","SHA256Digest is returning a weird hash","In a BlackBerry application, I am using this code in order to get a hash from a password:
        SHA256Digest sha256d = new SHA256Digest();
        byte[] passwordData = null;

        try {
            passwordData = password.getBytes(""UTF-8"");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }

        DigestOutputStream outputStream = new DigestOutputStream(sha256d, null);
        try {
            outputStream.write(passwordData);
        } catch (IOException e) {
            e.printStackTrace();
        }

        byte[] hashedValue = sha256d.getDigest();
        tempSHA256Password = new String(hashedValue);
        System.out.println(tempSHA256Password);

At the end of this code block, the tempSHA256Password is going to be something that looks like this: ëÇ#ÎiGê8óq =ßÝ÷<rê¨_FR»ã ... so in no way what I am expecting. I am expecting a string that looks like this: ebc723ce6947ea38f371a03d0cdfddf73c840f7215eaa85f031446529bbb16e3
What am I doing wrong?
","What you see is binary form of hash. You must convert it to hex.
","397","<java><blackberry><sha256>","0","1","4","2012-04-11 13:20:02","10103463","0","","279362","","2012-04-11 10:46:38","2012-04-11 09:36:26",""
"10103394","SHA256Digest is returning a weird hash","In a BlackBerry application, I am using this code in order to get a hash from a password:
        SHA256Digest sha256d = new SHA256Digest();
        byte[] passwordData = null;

        try {
            passwordData = password.getBytes(""UTF-8"");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }

        DigestOutputStream outputStream = new DigestOutputStream(sha256d, null);
        try {
            outputStream.write(passwordData);
        } catch (IOException e) {
            e.printStackTrace();
        }

        byte[] hashedValue = sha256d.getDigest();
        tempSHA256Password = new String(hashedValue);
        System.out.println(tempSHA256Password);

At the end of this code block, the tempSHA256Password is going to be something that looks like this: ëÇ#ÎiGê8óq =ßÝ÷<rê¨_FR»ã ... so in no way what I am expecting. I am expecting a string that looks like this: ebc723ce6947ea38f371a03d0cdfddf73c840f7215eaa85f031446529bbb16e3
What am I doing wrong?
","This is the problem:
tempSHA256Password = new String(hashedValue);

That tries to create a string from arbitrary binary data as if it were text encoding with the platform default encoding. It sounds like you're looking for hex instead. There are loads of different hex encoding utility libraries in Java - you might want to look at Apache Commons Codec for example.
","397","<java><blackberry><sha256>","0","4","4","2012-04-11 13:20:02","10103463","0","","279362","","2012-04-11 10:46:38","2012-04-11 09:36:26",""
"10103394","SHA256Digest is returning a weird hash","In a BlackBerry application, I am using this code in order to get a hash from a password:
        SHA256Digest sha256d = new SHA256Digest();
        byte[] passwordData = null;

        try {
            passwordData = password.getBytes(""UTF-8"");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }

        DigestOutputStream outputStream = new DigestOutputStream(sha256d, null);
        try {
            outputStream.write(passwordData);
        } catch (IOException e) {
            e.printStackTrace();
        }

        byte[] hashedValue = sha256d.getDigest();
        tempSHA256Password = new String(hashedValue);
        System.out.println(tempSHA256Password);

At the end of this code block, the tempSHA256Password is going to be something that looks like this: ëÇ#ÎiGê8óq =ßÝ÷<rê¨_FR»ã ... so in no way what I am expecting. I am expecting a string that looks like this: ebc723ce6947ea38f371a03d0cdfddf73c840f7215eaa85f031446529bbb16e3
What am I doing wrong?
","You can't print directly a binary value:
tempSHA256Password = new String(hashedValue);
System.out.println(tempSHA256Password);

So if you want to convert it to hex you can use this method :
static final String HEXES = ""0123456789ABCDEF"";
public static String getHex( byte [] raw ) {
  if ( raw == null ) {
    return null;
  }
  final StringBuffer hex = new StringBuffer( 2 * raw.length );
  for ( final byte b : raw ) {
    hex.append(HEXES.charAt((b & 0xF0) >> 4))
     .append(HEXES.charAt((b & 0x0F)));
  }
  return hex.toString();
}

This method comme from here, you have also other example if interested.
","397","<java><blackberry><sha256>","0","3","4","2012-04-11 13:20:02","10103463","0","","279362","","2012-04-11 10:46:38","2012-04-11 09:36:26",""
"10103394","SHA256Digest is returning a weird hash","In a BlackBerry application, I am using this code in order to get a hash from a password:
        SHA256Digest sha256d = new SHA256Digest();
        byte[] passwordData = null;

        try {
            passwordData = password.getBytes(""UTF-8"");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }

        DigestOutputStream outputStream = new DigestOutputStream(sha256d, null);
        try {
            outputStream.write(passwordData);
        } catch (IOException e) {
            e.printStackTrace();
        }

        byte[] hashedValue = sha256d.getDigest();
        tempSHA256Password = new String(hashedValue);
        System.out.println(tempSHA256Password);

At the end of this code block, the tempSHA256Password is going to be something that looks like this: ëÇ#ÎiGê8óq =ßÝ÷<rê¨_FR»ã ... so in no way what I am expecting. I am expecting a string that looks like this: ebc723ce6947ea38f371a03d0cdfddf73c840f7215eaa85f031446529bbb16e3
What am I doing wrong?
","Insted of tempSHA256Password = new String(hashedValue);
try this code:
StringBuffer buffer = new StringBuffer();
for(byte b : hashedValue)
{
    buffer.append(String.format(""%02x"",b<0 ? b+256 : b));
}
tempSHA256Password = buffer.toString();

","397","<java><blackberry><sha256>","0","6","4","2012-04-11 13:20:02","10103463","0","","279362","","2012-04-11 10:46:38","2012-04-11 09:36:26",""
"45732763","How to do login using jmeter, where entered username and password both are in encrypted mode","I'm trying to do login to my site using jmeter tool. 
But when I entered a valid username and password and press the submit button, inside the browser you can check that one post request is getting fired with cryptographic values.
So, due to cryptographic values of username and password. I am not able to do login to the site.
Note: SHA-256 algorithm is used for cryptographic. 
For more details on this issue, please refer below mentioned image.

So, can anyone help me how do I able to do login to my site?
","You can hash your expected (regular) value with Sha256 because you can't decrypt it, See decrypt sha256

SHA-256 is a cryptographic (one-way) hash function, so there is no
direct way to decode it. The entire purpose of a cryptographic hash
  function is that you can't undo it.

You can add JSR223 Sampler with the following sha256 conversion which put value in variable:
String sha256hex = org.apache.commons.codec.digest.DigestUtils.sha256Hex(""myPassword"");
vars.put(""myPassword"", sha256hex);

and then you can use variable ${myPassword}
","397","<encryption><jmeter><sha256>","1","2","1","2019-04-07 12:52:27","","2","","7382406","","2017-09-04 10:06:25","2017-08-17 10:32:40",""
"35322393","Firebase custom authentication, generating uid using SHA256 of email address","I'm using custom authentication for Firebase in one of my apps. I'm generating the uid of the user by SHA256 hash of the user's email address.
My question is, how secure is this? Do I need to worry about collisions? Cause if there is a collision it would give complete account access to another user whose email's hash is the same.
If this is not secure can anyone please recommend me a way to generate a unique string from an email address that won't have collisions?
","","395","<email><hash><firebase><sha256>","2","","0","2016-02-10 17:48:41","","6","","","","","2016-02-10 17:48:41",""
"50899819","Computing a test hash with python pbkdf2_hmac-sha256 + salt not the same vaules","For a encryption class i'm in we were tasked to make a program to check a password if the computer knows the following defined information. The teacher gave us a working set of fixed information.
I am trying to write a python code to verfiery a given set of user data based upon the known and fixed...
digest method: HMAC-SHA256
rounds: 100000
salt:""e65814e4382759f85550029e723dc7e7""
password:""governor washout beak""
to output the derived: ""5f37a3bd08ac1c7d163294a3cb192ed1407b62bbc6a6259fee55f6e53f754273""
This is my code to generate the derived to check the against the above derived...
key = hashlib.pbkdf2_hmac('sha256', b'governor washout beak', b'e65814e4382759f85550029e723dc7e7', 100000, dklen=32)
print(binascii.hexlify(key))

however I get ""0ce7d2e654c0ba80e67348c9610ca1851312458166ee8c9e6d46666832a21b11""
instead. I don't understand what is missing.
","the error is the code takes the salt from ascii >> binary not hex >> binary so 
You want to use the binascii module:
import binascii

hexstr = 'e65814e4382759f85550029e723dc7e7'

binascii.unhexlify(hexstr)

b""\xe6X\x14\xe48'Y\xf8UP\x02\x9er=\xc7\xe7""

","392","<python><sha256>","1","0","1","2018-06-18 06:53:57","","2","1","9953941","","2018-06-17 19:49:45","2018-06-17 19:30:41",""
"33876117","redsys migration in classic asp","I have a classic asp site with a shop and I have to migrate to the new SHA256 method (in Spain it's Redsys the company who provide the TPV service). It's a Spanish site but I suppose the problem is for everybody.
They have libraries for php and asp.net but no for classic asp.
The problem is when you create the signature. In the manual they say:

decode a string with BASE 64
Do a 3DES encryption
Calculate de HMAC SHA256
Encode in BASE 64

Could somebody say where to find the libraries for that (free please)
","They won't tell you how to calculate the signature (like they did with the SHA1 implementation).  Your only solution will be to use the APIs they provide.  They have PHP, Java and ASP.NET covered but they're still working on the API for classic ASP, so you'll have to wait!
Don't worry about the cut-off date of 23rd of November, they'll keep SHA1 online for a whole lot longer as they're completely missed their own deadlines.
","390","<asp-classic><sha256>","-1","0","2","2016-02-26 11:51:56","","2","","2571021","","2015-11-23 19:17:04","2015-11-23 16:40:58",""
"33876117","redsys migration in classic asp","I have a classic asp site with a shop and I have to migrate to the new SHA256 method (in Spain it's Redsys the company who provide the TPV service). It's a Spanish site but I suppose the problem is for everybody.
They have libraries for php and asp.net but no for classic asp.
The problem is when you create the signature. In the manual they say:

decode a string with BASE 64
Do a 3DES encryption
Calculate de HMAC SHA256
Encode in BASE 64

Could somebody say where to find the libraries for that (free please)
","Here you can download and use the RedSysAPI libraries for ASP Classic sites: https://github.com/ictmanagement/redsysHMAC256_API_ASP
It implements all the required steps for comunicating with RedSys servers, and you can use the same official documentation because the API interface is the same that RedSysAPI_PHP. You have also examples.
The most important is that you are not required neither to install any ActiveX in your server, nor install PHP.
I hope it will be usefull for you!!
","390","<asp-classic><sha256>","-1","1","2","2016-02-26 11:51:56","","2","","2571021","","2015-11-23 19:17:04","2015-11-23 16:40:58",""
"41265499","What is the correct BigQuery syntax for SHA256 cryptographic hashing?","According to this announcement, Google BigQuery now supports SHA256 encryption calls in SQL (bypassing the previous need to use embedded JavaScript.) However, the documentation for the function isn't yet live according to the post.
We tried ""SELECT SHA256('string_value')..."" but the function is not recognized. 
Anyone have early knowledge on what is the correct syntax for SHA256 encryption on BigQuery?
","This new function is supported in Standard SQL mode only!
","387","<encryption><hash><google-bigquery><sha256>","0","1","1","2016-12-23 10:24:43","41265564","1","","1174302","","2016-12-23 10:24:43","2016-12-21 14:46:46",""
"50489951","OPENSSL Convert binary bytes to SHA256 C++","I'm basically trying to get a checksum for my mnemonic words.
I have the binary bytes and want to convert them to sha256 to get the first 4 bits and validate it. 
Took me about 2 days to realize that hashing is different from a text string to sha256 than bytes to sha256.
The below function works but it hashes as strings not as bytes. 
string sha256(const string str)
{
    unsigned char hash[SHA256_DIGEST_LENGTH];
    SHA256_CTX sha256;
    SHA256_Init(&sha256);
    SHA256_Update(&sha256, str.c_str(), str.size());
    SHA256_Final(hash, &sha256);
    stringstream ss;
    for(int i = 0; i < SHA256_DIGEST_LENGTH; i++)
    {
        ss << hex << setw(2) << setfill('0') << (int)hash[i];
    }
    return ss.str();
}

I'm new to openssl and wasn't able to find any solutions online.
If someone could adapt my function to hash the binary bytes input correctly I would really appreciate it. 
Thanks. 
To clarify here's an example:
10111110011001010101110111001111010100011111011010110001110101111011110111000101101001100011110100010100011101000011011011100000
this used as text gives me this hash:
2d7ffa3c8f9c3fc043045f2564101eabf80bcdb983d1d560b6b93f52ea824942
and used as bytes give me this correct hash:
5e5c92432e692f803539715bb624cd2e35b5b491c6bc67aee87ae82600dedf12
I used this website to hash: https://cryptii.com/hash-function
","So it seems you need to interpret your input as a stream of bits. Group them into bytes and off you go:
unsigned char hash[SHA256_DIGEST_LENGTH];
SHA256_CTX sha256;
SHA256_Init(&sha256);
uint8_t str[] = { 0b10111110, 0b01100101, 0b01011101, 0b11001111, 0b01010001, 0b11110110, 0b10110001, 0b11010111, 0b10111101, 0b11000101, 0b10100110, 0b00111101, 0b00010100, 0b01110100, 0b00110110, 0b11100000 };
SHA256_Update(&sha256, str, sizeof(str));
SHA256_Final(hash, &sha256);

Hash output:
5e5c92432e692f803539715bb624cd2e35b5b491c6bc67aee87ae82600dedf12

Live demo
","386","<c++><openssl><checksum><sha256>","1","0","1","2018-05-23 13:54:31","50490229","6","","8215595","","2018-05-23 13:45:30","2018-05-23 13:39:44",""
"48173628","Golang: sha256 returns two different values for the same input","I'm working on implementing some crypto function which require among other things hash operations (I want to compute a hash of a custom struct) So I wanted to use the SHA256 hash function from the crypto golang package. However, I've noticed that when I run my hash function multiple times for the same input sometimes it returns different values. My understanding is that SHA function return the same hash outputs for a single input value. Below is my implementation of the hash function:
func myHash(s MyStruct) []byte{

    bytes := []byte(fmt.Sprintf(""%v"", s))

    h := sha256.New()
    h.Write(bytes)

    return h.Sum(nil)
}

And myStruct has the following fields:
type MyStruct struct {
    elliptic.Curve // I use elliptic.P224() as my curve
    X, Y, Z *big.Int
}

The output of myHash function run multiple times for the same input value SInput is as follows:
[38 39 88 96 46 192 74 20 93 238 4 18 134 253 238 154 210 89 64 204 13 27 60 78 228 33 57 20 173 80 67 196]

[38 39 88 96 46 192 74 20 93 238 4 18 134 253 238 154 210 89 64 204 13 27 60 78 228 33 57 20 173 80 67 196]

[38 39 88 96 46 192 74 20 93 238 4 18 134 253 238 154 210 89 64 204 13 27 60 78 228 33 57 20 173 80 67 196]

[172 219 215 153 250 30 31 136 175 47 25 178 231 84 90 173 31 130 136 131 169 23 98 198 198 109 255 76 228 134 100 191]

[31 114 57 247 85 214 151 174 124 255 5 200 17 200 198 107 105 56 53 126 233 242 228 74 17 87 238 7 136 100 80 160]

[38 39 88 96 46 192 74 20 93 238 4 18 134 253 238 154 210 89 64 204 13 27 60 78 228 33 57 20 173 80 67 196]

[38 39 88 96 46 192 74 20 93 238 4 18 134 253 238 154 210 89 64 204 13 27 60 78 228 33 57 20 173 80 67 196]

[38 39 88 96 46 192 74 20 93 238 4 18 134 253 238 154 210 89 64 204 13 27 60 78 228 33 57 20 173 80 67 196]

[38 39 88 96 46 192 74 20 93 238 4 18 134 253 238 154 210 89 64 204 13 27 60 78 228 33 57 20 173 80 67 196]

[172 219 215 153 250 30 31 136 175 47 25 178 231 84 90 173 31 130 136 131 169 23 98 198 198 109 255 76 228 134 100 191]

[172 219 215 153 250 30 31 136 175 47 25 178 231 84 90 173 31 130 136 131 169 23 98 198 198 109 255 76 228 134 100 191]

[38 39 88 96 46 192 74 20 93 238 4 18 134 253 238 154 210 89 64 204 13 27 60 78 228 33 57 20 173 80 67 196]

What am I doing wrong?
","When you call fmt.Sprintf(""%v"") and pass pointers (including struct fields which are pointers, such as the P224 Curve contains), it prints the addresses, not the values. Because the addresses will be different every run, you'll get different hashes every run. Try using something deterministic, it will be better-suited to the purpose - maybe JSON or Gob, or write your own simple serializer.
","385","<go><hash><sha256>","-2","5","1","2018-08-28 03:40:39","48173708","2","0","1033581","","2018-08-28 03:40:39","2018-01-09 17:25:42",""
"34592829","Optimized bulk read for the CC_SHA256_Update","I've got the following code to calculate sha_256 of an input, and i wonder how can know what is the optimal data chunk size for each iteration of CC_SHA256_Update. Does it constant value or a variable that depend on system environment ? 
 CC_SHA256_CTX sha256;
 CC_SHA256_Init(&sha256);

 const long bufSize = 32768; //how can i find the optimized size ? 
 char* buffer = (char *) malloc(bufSize);

 int bytesRead = 0;
 if(!buffer) {
     return -1;
 }

 while((bytesRead = (int) fread(buffer, 1, bufSize, file))) {
     CC_SHA256_Update(&sha256, buffer, bytesRead);
 }

EDIT : I've tried a different approach as described in the selected answer below, and acquire the data using mmap (rather then malloc+fread). unfortunately, id didn't improve run time efficiency (it slightly increased)
int fsize(const char *filename) {
    struct stat st; 
    if (stat(filename, &st) == 0)
        return st.st_size;
    return -1; 
}

int fd = open(path, O_RDONLY);

int sz = fsize(path);  
char * buffer = mmap((caddr_t)0, sz, PROT_READ  , MAP_SHARED, fd, 0);

CC_SHA256_CTX sha256;
CC_SHA256_Init(&sha256);

CC_SHA256_Update(&sha256, buffer, sz);

CC_SHA256_Final(output, &sha256);

close(fd);
return 0;

","I think only testing with different sizes would make that clear, but multiples of 64kB (allocation granularity) might be preferred.
But for best performance, you might consider using memory mapping directly over file. That would eliminate the need to copy all data from kernel mode (OS disk cache) to user mode. You would be accessing the OS cache directly, and you would probably need to call CC_SHA256_Update() only once.
","384","<c><openssl><sha256>","1","3","1","2016-01-05 15:00:41","34593087","1","","4333809","","2016-01-05 15:00:41","2016-01-04 13:59:42",""
"12366671","SHA256 Algorithm in Turbo C not able to compile","I am trying to run the SHA256 algorithm in c which is given on wesite
[Koders Code Search][2]
For that I am using Turbo C Compilar on windows machine and it is installed on with directory path set to
1 C:\Program Files\TC\    
2 C:\Program Files\TC\INCLUDE
3 C:\Program Files\TC\lib

I kept all the header files in 3 
C:\Program Files\TC\INCLUDE

folder
which are required to run this SHA256.c file.
Whenever i try to compile the code then setupd gives error saying 
Illegle file name SHA256.exe and 3 SHA256.obj.

I m not able to find out the root cause why I m getting this error, what mistake I m doing.

Thanks in advance.
","Turbo C is an old DOS application. As such it doesn't work with long file and directory names. Long as in, longer than 8 characters in the name and 3 characters in the extension. So, 12345678.txt would be OK, but 123456789.txt or 12345678.html would not.
You really want to move the TC directory out of C:\Program Files to C:\ or C:\Project and name all your files and directories that Turbo C (and your programs compiled with it) will access having in mind the 8.3 limitation described above.
Oh, and there should be no funky characters in 8.3 names, no spaces, non-English letters, etc etc. Use only English letters, numbers and underscores (pretty much like in C itself).
Remember to update the PATH environment variable and any path settings in Turbo C IDE to reflect the new location.
Also, it's a bad practice to put your project files into the directories, where the compiler stores its header files, any of its files for that matter.
","382","<c><algorithm><sha256><turbo-c>","0","1","1","2012-09-11 10:25:48","","5","","152522","","2012-09-11 09:35:12","2012-09-11 09:28:59",""
"52072150","Is there any method to convert a SHA256 hash string to a Java string?","I have the following code and I want a Java string from a SHA256 hash string. Is there a way to convert hex string to its original value?
public class CryptoHash {
    public static void main( String[] args ) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance( ""SHA-256"" );
        String text = ""Text to hash, cryptographically."";

        // Change this to UTF-16 if needed
        md.update( text.getBytes( StandardCharsets.UTF_8 ) );
        byte[] digest = md.digest();

        String hex = String.format( ""%064x"", new BigInteger( 1, digest ) );
        System.out.println( hex );
    }
}

","Simple Answer: No, there is no way.
Longer Answer: There may be a way using a Brute Force Strategy. But it would take a long time, too long to be efficient.
See, Hash in general is made to make it impossible to reverse. You convert the String into some Hash and this cannot be reversed.
You may take a look at how Hashes and Encrypting work.
https://www.cryptocompare.com/coins/guides/how-does-a-hashing-algorithm-work/
If it would be that easy, using just one line of code, the whole idea and process of hashing would be problematic.
Edit: If you want to convert a String to Hash, then to Hex and finally to ASCII your result will be the original Hash. Therefore, the idea won't work out. You cannot decrypt it this way.
","381","<java><android><sha256>","0","1","1","2018-08-30 07:54:52","","22","","9081738","","2018-08-30 07:54:52","2018-08-29 07:45:18",""
"38253904","Python and Java MAC SHA256 encoding generating VERY SIMILAR KEY","I'm creating a signed request (SHA256 and base64) using Java and validating this request in Python. The keys that I generated are really similar:
Java:
UjuGTll3GF7H8MHWyJc41NAEcd-OZOeJLT9PiAevcsw

Python :
UjuGTll3GF7H8MHWyJc41NAEcd+OZOeJLT9PiAevcsw

The only diference happens with char + and char -. I cannot change the java code because I don't have access to it, I only know that it uses javax.crypto.Mac. However, my python code is:
import hmac
import hashlib
hmac.new(api_secret, url, hashlib.sha256).digest().encode('base64')

The variables api_secret and url have the same input in both languages (Java and Python)
What am I missing?
","digest() returns a string, so encode is just the standard encode method. According to the list of standard encodings, specifying base64 as the encoding means that base64.encodestring will be used. The alphabet used by that function includes + and /, which are the last two characters in the standard Base64 alphabet:
>>> base64.encodestring(chr(248))
'+A==\n'

If you want an encoded string that uses - and _ instead of + and /, you need to use base64.urlsafe_b64encode:
>>> base64.urlsafe_b64encode(chr(248))
'-A=='

So you'd need to do something like:
base64.urlsafe_b64encode(hmac.new(api_secret, url, hashlib.sha256).digest())

For this to work, though, you need to check that the Java code is also producing _ instead of /, like urlsafe_b64encode.
","379","<java><python><base64><sha256><hmac>","4","1","1","2016-07-07 20:04:59","38254255","0","","5037341","","2016-07-07 19:40:18","2016-07-07 19:35:09",""
"13444873","Correct hash function for primary keys","Wondering which hashing algorithm I should be using to create primary keys from strings.  Right now I'm using SHA-1.  
In the past I've used SHA-256, although I have heard that 256 might be 'overkill' for my purposes.  I've also heard some things about maybe using MD5, but I don't know much about the pros and cons of that one.
Thanks!
","Depends a lot on your use case: whether a malicious user can gain anything if finding a collision, for starters. There is a big difference between a hashing function and a cryptographically-secure hashing algorithm. I will assume your use case is a normal programming question.
MD5 is broken. Seeing how that has recently caused problems to hashing of dictionary keys in various languages, I would not use it for anything.
SHA-1 is more and more broken as time passes. Even though you may not need a cryptographically-secure algorithm, I would use SHA-256 unless the difference in performance is really significant, premature optimization being evil and all that.
","377","<hash><random><md5><sha1><sha256>","3","1","1","2012-11-19 08:47:17","13445141","2","1","","","","2012-11-18 21:36:48",""
"37354199","Verification of Hashing password is not working","I have asked a question of which I did get a lot of great feedback, along with a good answer.  I assume that I am doing something wrong with my verification check of the 2 hashes.  Perhaps the code in the loop is fine, but my code with understanding of bytes and base64 etc. is the problem? 
Here is the original question.
Password Hashing - Why salt 60,000 times
Problem is these hashes do not match  if (resultHash.Equals(hashPassword))
Code 
public string BuildVerify()
{

    string password = """";
    string salt = """";
    byte[] result;


    using (var sha256 = SHA256.Create())
    {
        password = ""hovercraft"";

        // step 1: you can use RNGCryptoServiceProvider for something worth using
        var passwordHashing = new PasswordHashing();
        salt = passwordHashing.CreateRandomSalt();

        // step 2
        string hash =
           Convert.ToBase64String(sha256.ComputeHash(Encoding.UTF8.GetBytes(salt + password)));

        // step 3
        result = sha256.ComputeHash(Encoding.UTF8.GetBytes(salt + hash));

        // step 4
        for (int i = 0; i < 60000; i++)
        {
            result =
             sha256.ComputeHash(Encoding.UTF8.GetBytes(salt + Convert.ToBase64String(result)));
        }
    }


    // TESTING  VERIFY this works ..

    string SaltAndPwd = string.Concat(password, salt);
    SHA256 sha2 = SHA256Managed.Create();
    byte[] buff = sha2.ComputeHash(Encoding.Unicode.GetBytes(SaltAndPwd));
    string resultHash = Convert.ToBase64String(buff);
    string hashPassword = Convert.ToBase64String(result);

    if (resultHash.Equals(hashPassword))
    {
        // perfect 
    }





    return """";

}


public class PasswordHashing
{

     public string CreateRandomSalt()
     {
        string password = """";
        password = HashPassword.CreateSalt(8) + ""="";
        password = password.Replace(""/"", ""c"");
        return password;
     }

  }

public static string CreateSalt(int size)
{
    RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();

    byte[] buff = new byte[size];
    rng.GetBytes(buff);
    return Convert.ToBase64String(buff);
}

Update - issue 
Ok, I'm using the code from the answer, but obviously my assumptions are not correct as I cannot use my code to verify 
            // This should be stored in your DB for example along with the hash result
            var newsalt = SOPasswordHasher.GetSalt();

            // We calculate the hash then store the result. Next time you want to authenticate someone
            // You'll have to reuse the same salt and recalculate the hash then compare 
            // the stored hash with the new one
            var result = Convert.ToBase64String(SOPasswordHasher.Hash(""hovercraft"", newsalt));

            string SaltAndPwd = string.Concat(""hovercraft"", newsalt);
            SHA256 sha2 = SHA256Managed.Create();
            byte[] buff = sha2.ComputeHash(Encoding.Unicode.GetBytes(SaltAndPwd));
            string resultHash = Convert.ToBase64String(buff);

            if (result.Equals(resultHash))
            {
                // perfect 
            }

","Here's a reusable class that you can use (relying less on converting to base64):
class SOPasswordHasher
{
    /// <summary>
    /// Password Hasher
    /// </summary>
    /// <param name=""password"">The password you want to hash</param>
    /// <param name=""salt"">byte array of (crypto-secure) random values</param>
    /// <param name=""iterations"">Number of iterations. default is 60,000</param>
    /// <returns>Byte array containing the hashed password</returns>

    public static byte[] Hash(string password, byte[] salt, int iterations = 60000)
    {
        using (var sha256 = SHA256.Create())
        {
            byte[] passwordBytes = Encoding.UTF8.GetBytes(password);

            // step 2
            byte[] hash = sha256.ComputeHash(passwordBytes.Concat(salt).ToArray());

            // step 3
            byte[] result = sha256.ComputeHash(salt.Concat(hash).ToArray());

            // step 4
            for (int i = 0; i < iterations; i++)
            {
                result =
                    sha256.ComputeHash(salt.Concat(result).ToArray());
            }

            return result;
        }
    }

    public static byte[] GetSalt(int size = 32)
    {
        byte[] salt = new byte[size];
        using (var cryptoServiceProvider = new RNGCryptoServiceProvider())
        {
            cryptoServiceProvider.GetBytes(salt);
        }
        return salt;
    }
}

and here's a usage example:
// This should be stored in your DB for example along with the hash result
var salt = SOPasswordHasher.GetSalt();

// We calculate the hash then store the result. Next time you want to authenticate someone
// You'll have to reuse the same salt and recalculate the hash then compare 
// the stored hash with the new one
var result = Convert.ToBase64String(SOPasswordHasher.Hash(""hovercraft"", salt));

Important: I make no guarantee that this code is safe to use since I'm not a security expert. Bruce Schneier said it best: ""Amateurs Produce Amateur Cryptography""
","376","<c#><security><hash><sha256><sha>","1","2","1","2016-05-20 19:59:46","37354671","13","","-1","","2017-05-23 11:52:44","2016-05-20 19:09:39",""
"51444782","SHA256 encryption in JAVA and PYTHON produce different results","I would appreciate your help to understand why my SHA256 encryption function in JAVA and in PYTHON does not produce the result (difference in 1 digit, one more in python):
hash to encrypt is: ""thisisatest""
Java results is: a7c96262c21db9a06fd49e307d694fd95f624569f9b35bb3ffacd88044f9787
Python result is: 
a7c96262c21db9a06fd49e307d694fd95f624569f9b35bb3ffacd880440f9787
Python code:  
import hashlib

def encrypt_string(hash_string):
    sha_signature = \
        hashlib.sha256(hash_string.encode()).hexdigest()
    return sha_signature


hash_string = ""thisisatest""
print(encrypt_string(hash_string), end="""")

Java code:  
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class OpenAPIPasswordEncryptor1 {


    private static MessageDigest sha256;

    // generated password is stored encrypted (using also user name for hashing)
    public synchronized static String encrypt(String hash) {
        try {

            StringBuilder builder = new StringBuilder();
            builder.append(hash);

            // first time , encrypt user name , password and static key
            String encryptedCredentials = encryptionIterator(builder.toString());
           return encryptedCredentials;
        } 

        catch (Exception e) {
            e.printStackTrace();
        }

        return """";
    }

    private static String encryptionIterator(String content) {
        try {
            sha256 = MessageDigest.getInstance(""SHA-256"");
            // append the static key to each iteration
            byte[] passBytes = (content).getBytes();
            sha256.reset();
            byte[] digested = sha256.digest(passBytes);
            StringBuffer sb = new StringBuffer();
            for (int i = 0; i < digested.length; i++) {
                sb.append(Integer.toHexString(0xff & digested[i]));
            }

            return sb.toString();
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        }

        return """";
    }

    // generate password for developers
    public static void main(String[] args) {
        String hash = ""thisisatest"";
        String encrypt = encrypt(hash);
        System.out.println(""Your Password Is '"" + encrypt + ""'"");
    }
}

","The problem is that Integer.toHexString(int) drops the leading zero if the (unsigned) byte value is 15 or less.  As a quick workaround, you could use this:
sb.append(String.format(""%02x"", 0xff & digested[i]));

Although more efficient implementations are certainly possible.
To produce the same bug in Python, use this:
def encrypt_string(hash_string):
    sha_signature = hashlib.sha256(hash_string.encode()).digest()
    return """".join([""{:x}"".format(b) for b in sha_signature])

","375","<java><python><sha256>","0","3","1","2018-07-20 15:05:42","","4","","451475","","2018-07-20 15:05:42","2018-07-20 14:28:18",""
"33210862","Decrypting message hashed with SHA256","I was given a 16 byte key(used to encrypt message in RC4). First 8 bytes are unknown for me. I know that key was created by hashing a message using SHA256(secret) and getting first 16 characters from string obtained from this hashing function. Unfortunately i don't see a way to get the first 8 bytes of this key. As i know SHA256 is one way hashing function(we cant decrypt it). So how i can use half of the key to get a whole? I would be grateful for giving me some advice.
","You answered your own question. The point of a hash is that it's very hard to get the original value, and that the hash changes completely when even a single bit is different. 
The 8 bytes you're looking for could be anything, dependent solely on the original value that was being hashed. If you don't know the original value, there is no way to determine what the first 8 bytes of the hash are. 
","375","<c#><sha256><rc4-cipher><sha2>","0","1","1","2015-10-19 11:17:49","33213015","0","","5462101","","2015-10-19 11:04:24","2015-10-19 09:23:19",""
"51883048","Should right padding an HMAC SHA256 secret key with \0 return the same hash?","When using the JavaX HMAC/SHA256 hashing libraries, if I right pad my secret key with non-zero bytes, the hash for the same message is different; as expected. 
hmacSHA256digest(  ""secret"".getBytes(""UTF-8""), msg) = ""244d9c89069406d40803722ec6a793e5e04c55234d9ca03039a7b505cb3f8f00""
hmacSHA256digest(""secret\1"".getBytes(""UTF-8""), msg) = ""4f94305c91ca9d8dec13ffcff7e455d6f0c49373e1bbc4035da2b500b11063fb"" 

However, if I right-pad the secret key with an arbitrary number of \0 bytes, the hash comes back as the same for different byte arrays like:

""secret""
""secret\0""
""secret\0\0""

So, JavaX HMAC SHA256 is returning the same hash, even though the byte[] array returned from getBytes(""UTF-8"") for the secret just has a few additional zeros at the end (so it's not a UTF-8 issue):
hmacSHA256digest(   ""secret"".getBytes(""UTF-8""), msg) 
= ""244d9c89069406d40803722ec6a793e5e04c55234d9ca03039a7b505cb3f8f00""

hmacSHA256digest(   ""secret\0"".getBytes(""UTF-8""), msg) 
= ""244d9c89069406d40803722ec6a793e5e04c55234d9ca03039a7b505cb3f8f00""

hmacSHA256digest(   ""secret\0\0"".getBytes(""UTF-8""), msg) 
= ""244d9c89069406d40803722ec6a793e5e04c55234d9ca03039a7b505cb3f8f00""

Calls to other JavaX methods for MD5 and plain SHA256 do not return the same hash when extra \0 s are appended to the secret, so they pass our security test case for hash uniqueness across different secrets. Is the failure of this zero-padded-secrets case with MAC/SHA256 a possible attack vector?
This is the example code:
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.security.InvalidKeyException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;

static void testRightZeroPaddedSecretsHaveDifferentHashes() {
    try {
        byte[] msg = ""msg"".getBytes(""UTF-8"");

        // HMAC SHA256
        byte[] b3 = hmacSHA256digest(msg, ""secret"".getBytes(""UTF-8""));
        byte[] b4 = hmacSHA256digest(msg, ""secret\0"".getBytes(""UTF-8""));

        // Plain SHA256
        byte[] b5 = SHA256digest(msg, ""secret"".getBytes(""UTF-8""));
        byte[] b6 = SHA256digest(msg, ""secret\0"".getBytes(""UTF-8""));

        boolean same34 = Arrays.equals(b3, b4);
        boolean same56 = Arrays.equals(b5, b6);
        System.out.println(
                ""\n"" + Arrays.toString(b3) +
                ""\n"" + Arrays.toString(b4) +
                ""\nHMAC SHA256 - identical hash results? = "" + same34 +
                ""\n"" +
                ""\n"" + Arrays.toString(b5) +
                ""\n"" + Arrays.toString(b6) +
                ""\nPlain SHA256 - identical hash results? = "" + same56
        );
    } catch (Throwable e) {
        e.printStackTrace();
    }
}

static byte[] hmacSHA256digest(byte[] msg, byte[] secret) {
    try {
        SecretKeySpec keySpec = new SecretKeySpec(secret, ""HmacSHA256"");
        Mac mac = Mac.getInstance(""HmacSHA256"");
        mac.init(keySpec);
        byte[] hmac = mac.doFinal(msg);
        return hmac;
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (InvalidKeyException e) {
        e.printStackTrace();
    }
    return null;
}

static byte[] SHA256digest(byte[] msg, byte[] secret) {
    try {
        MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
        digest.update(msg);
        byte[] hash = digest.digest(secret);
        return hash;
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    }
    return null;
}

And sample output:
[-2, 79, -100, 65, -113, 104, 63, 3, 79, 106, -7, 13, 29, -43, -72, 106, -64, 53, 93, -39, 99, 50, -59, -100, -57, 69, -104, -48, 115, 97, 7, -10] 
[-2, 79, -100, 65, -113, 104, 63, 3, 79, 106, -7, 13, 29, -43, -72, 106, -64, 53, 93, -39, 99, 50, -59, -100, -57, 69, -104, -48, 115, 97, 7, -10] 
HMAC SHA256 - identical hash results? = true

[-88, 92, 89, -29, -65, -48, -127, 51, 125, -120, 78, -38, 25, 57, -91, 91, -50, 111, -33, 40, -3, 0, -95, 89, -50, -88, 39, 118, 101, -56, 91, 126] 
[-40, 39, 49, -64, 58, 40, 124, 64, 110, -100, 50, 115, -32, 114, -107, 24, -73, -17, -37, 11, 67, -26, -48, -65, 109, -24, 119, 45, 74, -31, -81, 119]
Plain SHA256 - identical hash results? = false

Since JavaX HMAC SHA256 failed this zero-padded-secrets test case that passed for the plain SHA256/MD5 algorithms mentioned above, can anyone explain the difference in the behavior and if this can be exploited? 
","This is the correct behavior of the HMAC construct, by design.
The secret key should ideally be of the size of the block size of the underlying hash algorithm. For SHA-256, the block size is 512 bits, so your key should be 64 bytes.
From the RFC 2104, if a key is longer than the block size, it will be shortened by way of passing it through the hash function and using the hash as the key. If the key is shorter than the block size, it will be extended by appending zeros.
This is the first step of the HMAC algorithm:

(1) append zeros to the end of K to create a B byte string 
  (e.g., if K is of length 20 bytes and B=64, then K will be appended with 44 zero bytes 0x00)

The recommendation from the RFC is to use keys that are at least the size of the output of the hash function, 32 bytes in your case. Even though this will still fail your test case that the key can be padded with zeroes and produce the same HMAC.
","375","<security><sha256><hmac><zero-padding>","0","1","1","2018-09-05 14:51:28","52188085","2","","1181073","","2018-08-17 17:40:49","2018-08-16 18:11:37",""
"32987803","ipa extraction after you download an app from iTunes","We are currently providing ios app via Itunes. The main function of the app is to verify `app integrity' and it is done by checking hash value (sha256) of the execution file in .ipa once we download it. 
With the 32bit app we downloaded from iTunes, we can extract .ipa file to get execution file without problems. However, it does not seem to be possible with 64bit ios apps. (maybe there is a way and we couldn't find it. if this is the case please enlighten us.) Since we are planning provide our service both with 32 and 64bit, we do need to extract execution file from 64bit app.
So there are two questions we would like to ask regarding on this ipa extraction.
1. The hash value(sha256) of the app before we upload to iTunes and the value after we download it from iTunes is different. Why is that?
2. Is there any way we can extract .ipa (32/64 bit both) after we download the app from iTunes?
","","374","<ios><iphone><itunes><sha256>","1","","0","2015-10-07 08:51:21","","0","","","","","2015-10-07 08:51:21",""
"33014878","C# sha256 into PHP","I've got a table of hashes and salts previously created by by another company. The hash was done in C# and the hash method is sha256. The logic behind this is sha256(password+salt).
An example of inputs:
password = 'rosnicka'
salt     = 'zxwqTy+XjaY=' 
hash     = '3jdt1+JL3MPmjYr2OoXdoUwNfuweuDCZa8/3g7SfsNg='

When I tried to run a hashing function in PHP 
the output of this is 
""1125ed47a7aa11bc1c54c841b5eb7a6e72aa8ad27e010e6e25baa5b2a86cffb3"" 
I get the same results using only hashing calculators
I contacted them to find out what I'm doing wrong. They told me, that are storing ASCII version of the hash in the database. What should I do in order to get the same hash in PHP or what to do in order to convert their hash to the original sha256 hash?
thanks a lot!
","As alex K said:
base64_encode(hash('sha256', 'rosnicka'.base64_decode('zxwqTy+XjaY='), true));

will do the trick
","374","<c#><php><ascii><sha256>","1","2","1","2015-10-08 15:54:14","33020545","9","1","246342","","2015-10-08 11:50:44","2015-10-08 11:47:18",""
"53813676","SHA256withRSA Signature Verification in nodejs returning false every time","I am trying to verify signature added to a XML as per the instructions on the link below. It is returning false. I tried some code in Java too but will prefer NodeJS to work. Any other module recommendation is also welcome. 
Instructions on the website for Validation
Steps to validate signature :

Read the entire XML and separate the s=""xxxx"" tag from it.
Use a signature validation algorithm leveraging ""SHA256withRSA"" based hashing and encryption technique
Signature value present in ""s"" tag, remaining XML (without ""s"" tag) and UIDAI public key (available here.) is to be fed to the algorithm to validate digital signature.
Sample code snippets provided here.

Please find below my code: [using NodeJS Crypto module]


var crypto = require('crypto');
let fs = require('fs');

const CERT = '-----BEGIN CERTIFICATE-----\n' +
    'MIIDhTCCAm2gAwIBAgIEYhPgKjANBgkqhkiG9w0BAQsFADBrMQswCQYDVQQGEwJJ\n' +
    'TjESMBAGA1UECBMJS2FybmF0YWthMRIwEAYDVQQHEwlCYW5nYWxvcmUxEDAOBgNV\n' +
    'BAoTB2hjbC1hdWExEDAOBgNVBAsTB2hjbC1hdWExEDAOBgNVBAMTB2hjbC1hdWEw\n' +
    'HhcNMTgwMTAzMTMyNTQ5WhcNMTkwMTAzMTMyNTQ5WjBrMQswCQYDVQQGEwJJTjES\n' +
    'MBAGA1UECBMJS2FybmF0YWthMRIwEAYDVQQHEwlCYW5nYWxvcmUxEDAOBgNVBAoT\n' +
    'B2hjbC1hdWExEDAOBgNVBAsTB2hjbC1hdWExEDAOBgNVBAMTB2hjbC1hdWEwggEi\n' +
    'MA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCBgQBr8wRk6QbtUsq6YvxEnY22\n' +
    'wr9mW62qVXpaWLVHYcbuVtBALf5LXFK3WnLAY15xKKQ9m9WZa8w2ZMpo20UePoLM\n' +
    'QSda0Gk4gFhe0Dl+czlNSLMnMlYc4qWrPrpUlFTi7KZKDLKrQKpQjacY/OKqUVYj\n' +
    '98IPsbp/IivpSvkwIaS3J1cyORNYCdtDLhpAbUUX0rCrJJXl3245BCJ/3jbtpQ+F\n' +
    '7Cc81sBVYT31b+L04G3h5Ih3hsFg24xrJES1WglsBZBNAbFnSE2CjMfNLUIikZjz\n' +
    'RfcQ5MZgU2/mGjlgGrLV/GX+8yQ0VRryWEmTNDDb0skGkY3ZQafgOHa0Vxg9AgMB\n' +
    'AAGjMTAvMA4GA1UdDwEB/wQEAwIHgDAdBgNVHQ4EFgQUagX6xg6PhyaYYI6cjAip\n' +
    'lBHT5S8wDQYJKoZIhvcNAQELBQADggEBAG1z3DQoXjo9u+QfflnymFvcwRcc+vQ1\n' +
    'xE/5n85G5Gl6PD1fw0HSOOEMbt2obx/L367UVX0+bSi0eG7lFADSfL9G5B+RN+wP\n' +
    '0ItLNoG8uc9F0SbQMUw21WLEnkQydjjg+7wp4PXPxyEtaRNYLjus7UbU/xnHTf6W\n' +
    'ltI9ngHEr1w69H9d17KiQsFBeGjg0qfH9CGhhKT2q0ETKWQSPI3fwCx3Z4AmS2nZ\n' +
    'tog4WzWZlOMLHoPeYsFGv4gTgzbRWX0jc6HZ0057TDo+XWErcSuxBSGX8jEGLfp2\n' +
    'tW4LOAE3autC9HsG4OQBiR+nEbMEHbm3Pv8meRvfgTV6P6qQiICeMaI=\n' +
    '-----END CERTIFICATE-----\n';

verifier = crypto.createVerify('sha256WithRSAEncryption');
verifier.update('<OKV v=""1"" n=""Ravi Krishna Nalagatla"" i="""" d=""10121993"" e=""ac342bb947d5aa49847a0a05f87c388759a6cb156e04eac6ae995e9dca5ba1d9"" m=""254618fd06a2e7308247c7f0fb547f58174ab3b99e7b042d6705a5457235f32a"" g=""male"" a=""S/O Narasimham, 45, 74, 4, 7, Secunderabad, Hyderabad, Andhra Pradesh - 500003"" r=""328020181115111938451""/>'); //XML without S attribute
const signature =""VFKxVswVqlPDYOnp7rHUTtLVR3/NQN/p1dI61s1KSy102OgRI5YbXLj9Ng8Cy1fo6a5S62d0NldczYpztM5/E8Z6YUhtknhdVLD24fPijrFoUEqVC2S2fr8FUsCdVXNJEYd2v+UZ2grGYYi68rslaLO7z8SChoedsupRj2F1mwRyrof4u6kdAK5BxvubHPlEZ34Gv3ivuyJnJAKEyDkoymlm2GOAnaLUIxN5vdyBANZMOv9geH2poFOdUGVvOjDbpTPBF3Y5ADosYQYoErsONJ68x3iJsiZcG6dw1gPIW5J3B+X2vgXtFbF9xjFs7rZV9jk7Q8bJos5W8JuVjwV37g==""; //value of S attribute

var result = verifier.verify(CERT, signature);

console.log(result, 'result'); // **It is returning false always**. 



","Seems like the certificate in sample code and the certificate to be used are different. Try using below certificate I found in the URL you shared.
https://uidai.gov.in/images/ekyc_public_key.cer
Also, the sample data seems invalid. I tried it on Live data XML(can't share here) with the certificate. It returned me true after two changes:

One extra space needs to be removed from XML after the s element is removed. 
Pass Signature as a buffer with base64 decoding. 
const signature = new Buffer(""hchpGi49Pm8z5KDAnnmqHEUzVSE1ovQsWzhjx0RnRrh33H0oHYOpw1vQ9HuQwOtjtoNtKrpU+2ikduVkxw1DXI0jVnNsw6F0vQeELBOBw2qQ4QdJ0Zwx0A3+nBF0zHVaJE/fUhIhzLjGsfoGF5ohEotkQxtFcP5lrlfQDUj69LEu2RpcW7kBYH9PAQCGcs0b5hhcdP0eR6F2gYhi7dV5ieDL1c6Ta6NW1HroWEQI0Lk0NmeXuh2efzJfk4S8uc0MrhBUzLAa4N9WDUyegYcfTKJHtt6vpxVIyqs3ObQn9osHj9WmDMWVZiJvRz7tMaQdDU6gh74p734UPjk5CioUnw=="", 'base64');

","369","<javascript><node.js><rsa><sha256><cryptojs>","1","1","1","2018-12-17 12:41:05","53815476","1","","","","","2018-12-17 10:52:00",""
"29843175","Convert SHA256 algorithm from VBScript to PHP","I have the following SHA256 algorithm implementation in vbscript which i found it here and i am trying to convert it to php. With a little bit of googling and luck i found here the implementation in php. 
Here is the vbscript: 
(you can run it from windows cmd eg: test.vbs passwordtohash) 
Private m_lOnBits(30)
Private m_l2Power(30)
Private K(63)

Private Const BITS_TO_A_BYTE = 8
Private Const BYTES_TO_A_WORD = 4
Private Const BITS_TO_A_WORD = 32

m_lOnBits(0) = CLng(1)
m_lOnBits(1) = CLng(3)
m_lOnBits(2) = CLng(7)
m_lOnBits(3) = CLng(15)
m_lOnBits(4) = CLng(31)
m_lOnBits(5) = CLng(63)
m_lOnBits(6) = CLng(127)
m_lOnBits(7) = CLng(255)
m_lOnBits(8) = CLng(511)
m_lOnBits(9) = CLng(1023)
m_lOnBits(10) = CLng(2047)
m_lOnBits(11) = CLng(4095)
m_lOnBits(12) = CLng(8191)
m_lOnBits(13) = CLng(16383)
m_lOnBits(14) = CLng(32767)
m_lOnBits(15) = CLng(65535)
m_lOnBits(16) = CLng(131071)
m_lOnBits(17) = CLng(262143)
m_lOnBits(18) = CLng(524287)
m_lOnBits(19) = CLng(1048575)
m_lOnBits(20) = CLng(2097151)
m_lOnBits(21) = CLng(4194303)
m_lOnBits(22) = CLng(8388607)
m_lOnBits(23) = CLng(16777215)
m_lOnBits(24) = CLng(33554431)
m_lOnBits(25) = CLng(67108863)
m_lOnBits(26) = CLng(134217727)
m_lOnBits(27) = CLng(268435455)
m_lOnBits(28) = CLng(536870911)
m_lOnBits(29) = CLng(1073741823)
m_lOnBits(30) = CLng(2147483647)

m_l2Power(0) = CLng(1)
m_l2Power(1) = CLng(2)
m_l2Power(2) = CLng(4)
m_l2Power(3) = CLng(8)
m_l2Power(4) = CLng(16)
m_l2Power(5) = CLng(32)
m_l2Power(6) = CLng(64)
m_l2Power(7) = CLng(128)
m_l2Power(8) = CLng(256)
m_l2Power(9) = CLng(512)
m_l2Power(10) = CLng(1024)
m_l2Power(11) = CLng(2048)
m_l2Power(12) = CLng(4096)
m_l2Power(13) = CLng(8192)
m_l2Power(14) = CLng(16384)
m_l2Power(15) = CLng(32768)
m_l2Power(16) = CLng(65536)
m_l2Power(17) = CLng(131072)
m_l2Power(18) = CLng(262144)
m_l2Power(19) = CLng(524288)
m_l2Power(20) = CLng(1048576)
m_l2Power(21) = CLng(2097152)
m_l2Power(22) = CLng(4194304)
m_l2Power(23) = CLng(8388608)
m_l2Power(24) = CLng(16777216)
m_l2Power(25) = CLng(33554432)
m_l2Power(26) = CLng(67108864)
m_l2Power(27) = CLng(134217728)
m_l2Power(28) = CLng(268435456)
m_l2Power(29) = CLng(536870912)
m_l2Power(30) = CLng(1073741824)

K(0) = &H428A2F98
K(1) = &H71374491
K(2) = &HB5C0FBCF
K(3) = &HE9B5DBA5
K(4) = &H3956C25B
K(5) = &H59F111F1
K(6) = &H923F82A4
K(7) = &HAB1C5ED5
K(8) = &HD807AA98
K(9) = &H12835B01
K(10) = &H243185BE
K(11) = &H550C7DC3
K(12) = &H72BE5D74
K(13) = &H80DEB1FE
K(14) = &H9BDC06A7
K(15) = &HC19BF174
K(16) = &HE49B69C1
K(17) = &HEFBE4786
K(18) = &HFC19DC6
K(19) = &H240CA1CC
K(20) = &H2DE92C6F
K(21) = &H4A7484AA
K(22) = &H5CB0A9DC
K(23) = &H76F988DA
K(24) = &H983E5152
K(25) = &HA831C66D
K(26) = &HB00327C8
K(27) = &HBF597FC7
K(28) = &HC6E00BF3
K(29) = &HD5A79147
K(30) = &H6CA6351
K(31) = &H14292967
K(32) = &H27B70A85
K(33) = &H2E1B2138
K(34) = &H4D2C6DFC
K(35) = &H53380D13
K(36) = &H650A7354
K(37) = &H766A0ABB
K(38) = &H81C2C92E
K(39) = &H92722C85
K(40) = &HA2BFE8A1
K(41) = &HA81A664B
K(42) = &HC24B8B70
K(43) = &HC76C51A3
K(44) = &HD192E819
K(45) = &HD6990624
K(46) = &HF40E3585
K(47) = &H106AA070
K(48) = &H19A4C116
K(49) = &H1E376C08
K(50) = &H2748774C
K(51) = &H34B0BCB5
K(52) = &H391C0CB3
K(53) = &H4ED8AA4A
K(54) = &H5B9CCA4F
K(55) = &H682E6FF3
K(56) = &H748F82EE
K(57) = &H78A5636F
K(58) = &H84C87814
K(59) = &H8CC70208
K(60) = &H90BEFFFA
K(61) = &HA4506CEB
K(62) = &HBEF9A3F7
K(63) = &HC67178F2

Private Function LShift(lValue, iShiftBits)
    If iShiftBits = 0 Then
        LShift = lValue
        Exit Function
    ElseIf iShiftBits = 31 Then
        If lValue And 1 Then
            LShift = &H80000000
        Else
            LShift = 0
        End If
        Exit Function
    ElseIf iShiftBits < 0 Or iShiftBits > 31 Then
        Err.Raise 6
    End If

    If (lValue And m_l2Power(31 - iShiftBits)) Then
        LShift = ((lValue And m_lOnBits(31 - (iShiftBits + 1))) * m_l2Power(iShiftBits)) Or &H80000000
    Else
        LShift = ((lValue And m_lOnBits(31 - iShiftBits)) * m_l2Power(iShiftBits))
    End If
End Function

Private Function RShift(lValue, iShiftBits)
    If iShiftBits = 0 Then
        RShift = lValue
        Exit Function
    ElseIf iShiftBits = 31 Then
        If lValue And &H80000000 Then
            RShift = 1
        Else
            RShift = 0
        End If
        Exit Function
    ElseIf iShiftBits < 0 Or iShiftBits > 31 Then
        Err.Raise 6
    End If

    RShift = (lValue And &H7FFFFFFE) \ m_l2Power(iShiftBits)

    If (lValue And &H80000000) Then
        RShift = (RShift Or (&H40000000 \ m_l2Power(iShiftBits - 1)))
    End If
End Function

Private Function AddUnsigned(lX, lY)
    Dim lX4
    Dim lY4
    Dim lX8
    Dim lY8
    Dim lResult

    lX8 = lX And &H80000000
    lY8 = lY And &H80000000
    lX4 = lX And &H40000000
    lY4 = lY And &H40000000

    lResult = (lX And &H3FFFFFFF) + (lY And &H3FFFFFFF)

    If lX4 And lY4 Then
        lResult = lResult Xor &H80000000 Xor lX8 Xor lY8
    ElseIf lX4 Or lY4 Then
        If lResult And &H40000000 Then
            lResult = lResult Xor &HC0000000 Xor lX8 Xor lY8
        Else
            lResult = lResult Xor &H40000000 Xor lX8 Xor lY8
        End If
    Else
        lResult = lResult Xor lX8 Xor lY8
    End If

    AddUnsigned = lResult
End Function

Private Function Ch(x, y, z)
    Ch = ((x And y) Xor ((Not x) And z))
End Function

Private Function Maj(x, y, z)
    Maj = ((x And y) Xor (x And z) Xor (y And z))
End Function

Private Function S(x, n)
    S = (RShift(x, (n And m_lOnBits(4))) Or LShift(x, (32 - (n And m_lOnBits(4)))))
End Function

Private Function R(x, n)
    R = RShift(x, CInt(n And m_lOnBits(4)))
End Function

Private Function Sigma0(x)
    Sigma0 = (S(x, 2) Xor S(x, 13) Xor S(x, 22))
End Function

Private Function Sigma1(x)
    Sigma1 = (S(x, 6) Xor S(x, 11) Xor S(x, 25))
End Function

Private Function Gamma0(x)
    Gamma0 = (S(x, 7) Xor S(x, 18) Xor R(x, 3))
End Function

Private Function Gamma1(x)
    Gamma1 = (S(x, 17) Xor S(x, 19) Xor R(x, 10))
End Function

Private Function ConvertToWordArray(sMessage)
    Dim lMessageLength
    Dim lNumberOfWords
    Dim lWordArray()
    Dim lBytePosition
    Dim lByteCount
    Dim lWordCount
    Dim lByte

    Const MODULUS_BITS = 512
    Const CONGRUENT_BITS = 448

    lMessageLength = Len(sMessage)

    lNumberOfWords = (((lMessageLength + ((MODULUS_BITS - CONGRUENT_BITS) \ BITS_TO_A_BYTE)) \ (MODULUS_BITS \ BITS_TO_A_BYTE)) + 1) * (MODULUS_BITS \ BITS_TO_A_WORD)
    ReDim lWordArray(lNumberOfWords - 1)

    lBytePosition = 0
    lByteCount = 0
    Do Until lByteCount >= lMessageLength
        lWordCount = lByteCount \ BYTES_TO_A_WORD

        lBytePosition = (3 - (lByteCount Mod BYTES_TO_A_WORD)) * BITS_TO_A_BYTE

        lByte = AscB(Mid(sMessage, lByteCount + 1, 1))

        lWordArray(lWordCount) = lWordArray(lWordCount) Or LShift(lByte, lBytePosition)
        lByteCount = lByteCount + 1
    Loop

    lWordCount = lByteCount \ BYTES_TO_A_WORD
    lBytePosition = (3 - (lByteCount Mod BYTES_TO_A_WORD)) * BITS_TO_A_BYTE

    lWordArray(lWordCount) = lWordArray(lWordCount) Or LShift(&H80, lBytePosition)

    lWordArray(lNumberOfWords - 1) = LShift(lMessageLength, 3)
    lWordArray(lNumberOfWords - 2) = RShift(lMessageLength, 29)

    ConvertToWordArray = lWordArray
End Function

Public Function SHA256(sMessage)
    Dim HASH(7)
    Dim M
    Dim W(63)
    Dim a
    Dim b
    Dim c
    Dim d
    Dim e
    Dim f
    Dim g
    Dim h
    Dim i
    Dim j
    Dim T1
    Dim T2

    HASH(0) = &H6A09E667
    HASH(1) = &HBB67AE85
    HASH(2) = &H3C6EF372
    HASH(3) = &HA54FF53A
    HASH(4) = &H510E527F
    HASH(5) = &H9B05688C
    HASH(6) = &H1F83D9AB
    HASH(7) = &H5BE0CD19

    M = ConvertToWordArray(sMessage)

    For i = 0 To UBound(M) Step 16
        a = HASH(0)
        b = HASH(1)
        c = HASH(2)
        d = HASH(3)
        e = HASH(4)
        f = HASH(5)
        g = HASH(6)
        h = HASH(7)

        For j = 0 To 63
            If j < 16 Then
                W(j) = M(j + i)
            Else
                W(j) = AddUnsigned(AddUnsigned(AddUnsigned(Gamma1(W(j - 2)), W(j - 7)), Gamma0(W(j - 15))), W(j - 16))
            End If

            T1 = AddUnsigned(AddUnsigned(AddUnsigned(AddUnsigned(h, Sigma1(e)), Ch(e, f, g)), K(j)), W(j))
            T2 = AddUnsigned(Sigma0(a), Maj(a, b, c))

            h = g
            g = f
            f = e
            e = AddUnsigned(d, T1)
            d = c
            c = b
            b = a
            a = AddUnsigned(T1, T2)
        Next

        HASH(0) = AddUnsigned(a, HASH(0))
        HASH(1) = AddUnsigned(b, HASH(1))
        HASH(2) = AddUnsigned(c, HASH(2))
        HASH(3) = AddUnsigned(d, HASH(3))
        HASH(4) = AddUnsigned(e, HASH(4))
        HASH(5) = AddUnsigned(f, HASH(5))
        HASH(6) = AddUnsigned(g, HASH(6))
        HASH(7) = AddUnsigned(h, HASH(7))
    Next

    SHA256 = LCase(Right(""00000000"" & Hex(HASH(0)), 8) & Right(""00000000"" & Hex(HASH(1)), 8) & Right(""00000000"" & Hex(HASH(2)), 8) & Right(""00000000"" & Hex(HASH(3)), 8) & Right(""00000000"" & Hex(HASH(4)), 8) & Right(""00000000"" & Hex(HASH(5)), 8) & Right(""00000000"" & Hex(HASH(6)), 8) & Right(""00000000"" & Hex(HASH(7)), 8))
End Function

Set args = Wscript.Arguments

For Each arg In args
  sDigest = SHA256(arg)
  Wscript.Echo ""#### ""&sDigest
Next

Here is the phpSha.php file:
<?php
class auth_sha256
{
    /**
      * On Bits for sha256 mapping
      *
      * @access    private
      * @var        array
      */
    private $m_lOnBits    = array(1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535,131071,262143,524287,1048575,2097151,4194303,8388607,16777215,33554431,67108863,134217727,268435455,536870911,1073741823,2147483647);

    /**
      * 2nd power sha256 mapping
      *
      * @access    private
      * @var        array
      */
    private $m_l2Power    = array(1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288,1048576,2097152,4194304,8388608,16777216,33554432,67108864,134217728,268435456,536870912,1073741824);

    /**
      * Hex mapping sha256 mapping
      *
      * @access    private
      * @var        array
      */
    private $K            = array(0x428A2F98,0x71374491,0xB5C0FBCF,0xE9B5DBA5,0x3956C25B,0x59F111F1,0x923F82A4,0xAB1C5ED5,0xD807AA98,0x12835B01,0x243185BE,0x550C7DC3,0x72BE5D74,0x80DEB1FE,0x9BDC06A7,0xC19BF174,0xE49B69C1,0xEFBE4786,0xFC19DC6,0x240CA1CC,0x2DE92C6F,0x4A7484AA,0x5CB0A9DC,0x76F988DA,0x983E5152,0xA831C66D,0xB00327C8,0xBF597FC7,0xC6E00BF3,0xD5A79147,0x6CA6351,0x14292967,0x27B70A85,0x2E1B2138,0x4D2C6DFC,0x53380D13,0x650A7354,0x766A0ABB,0x81C2C92E,0x92722C85,0xA2BFE8A1,0xA81A664B,0xC24B8B70,0xC76C51A3,0xD192E819,0xD6990624,0xF40E3585,0x106AA070,0x19A4C116,0x1E376C08,0x2748774C,0x34B0BCB5,0x391C0CB3,0x4ED8AA4A,0x5B9CCA4F,0x682E6FF3,0x748F82EE,0x78A5636F,0x84C87814,0x8CC70208,0x90BEFFFA,0xA4506CEB,0xBEF9A3F7,0xC67178F2);

    /**
      * Perform SHA256 encoding
      *
      * @access    public
      * @param    string        String to encode
      * @return    string        Encoded string
      */
    public function SHA256($sMessage)
    {
        $HASH    = array( 0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A, 0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19);
        $M        = $this->ConvertToWordArray( $sMessage );

        for( $i = 0, $ij = count($M); $i < $ij; $i+=16 )
        {
            $a = $HASH[0];
            $b = $HASH[1];
            $c = $HASH[2];
            $d = $HASH[3];
            $e = $HASH[4];
            $f = $HASH[5];
            $g = $HASH[6];
            $h = $HASH[7];

            for( $j = 0; $j<63; $j++ )
            {
                if($j < 16) 
                {
                    $W[$j] = $M[$j + $i];
                }
                else
                {
                    $W[$j] = $this->AddUnsigned($this->AddUnsigned($this->AddUnsigned($this->Gamma1($W[$j - 2]), $W[$j - 7]), $this->Gamma0($W[$j - 15])), $W[$j - 16]);
                }

                $T1 = $this->AddUnsigned($this->AddUnsigned($this->AddUnsigned($this->AddUnsigned($h, $this->Sigma1($e)), $this->Ch($e, $f, $g)), $this->K[$j]), $W[$j]);
                $T2 = $this->AddUnsigned($this->Sigma0($a), $this->Maj($a, $b, $c));

                $h = $g;
                $g = $f;
                $f = $e;
                $e = $this->AddUnsigned($d, $T1);
                $d = $c;
                $c = $b;
                $b = $a;
                $a = $this->AddUnsigned($T1, $T2);
            }

            $HASH[0] = $this->AddUnsigned($a, $HASH[0]);
            $HASH[1] = $this->AddUnsigned($b, $HASH[1]);
            $HASH[2] = $this->AddUnsigned($c, $HASH[2]);
            $HASH[3] = $this->AddUnsigned($d, $HASH[3]);
            $HASH[4] = $this->AddUnsigned($e, $HASH[4]);
            $HASH[5] = $this->AddUnsigned($f, $HASH[5]);
            $HASH[6] = $this->AddUnsigned($g, $HASH[6]);
            $HASH[7] = $this->AddUnsigned($h, $HASH[7]);
        }

        for ($i=0; $i < 8; $i++)
        {
            $HASH[$i] = str_repeat(""0"",8-strlen(dechex($HASH[$i]))) . strtolower(dechex($HASH[$i]));
        }

        return $HASH[0].$HASH[1].$HASH[2].$HASH[3].$HASH[4].$HASH[5].$HASH[6].$HASH[7];
    }

    /**
      * Left shift a value x bits
      *
      * @access    private
      * @param    string        String to shift
      * @param    integer        Number of bits to shift
      * @return    string        Shifted string
      */
    private function LShift($lValue, $iShiftBits) 
    {
        if ($iShiftBits == 0) 
        {
            return $lValue;
        }
        elseif ($iShiftBits == 31) 
        {
            if ($lValue & 1) 
            {
                return 0x80000000;
            }
            else
            {
                return 0;
            }
        }
        elseif ($iShiftBits < 0 Or $iShiftBits > 31) 
        {
            exit();
        }

        if ($lValue & $this->m_l2Power[31 - $iShiftBits]) 
        {
            return (($lValue & $this->m_lOnBits[31 - ($iShiftBits + 1)]) * $this->m_l2Power[$iShiftBits]) | 0x80000000;
        }
        else 
        {
            return (($lValue & $this->m_lOnBits[31 - $iShiftBits]) * $this->m_l2Power[$iShiftBits]);
        }
    }

    /**
      * Right shift a value x bits
      *
      * @access    private
      * @param    string        String to shift
      * @param    integer        Number of bits to shift
      * @return    string        Shifted string
      */
    private function RShift($lValue, $iShiftBits)
    {
        if ($iShiftBits == 0) 
        {
            return $lValue;
        }
        elseif ($iShiftBits == 31) 
        {
            if ($lValue & 0x80000000) 
            {
                $RShift = 1;
            }
            else 
            {
                $RShift = 0;
            }
        }
        elseif ($iShiftBits < 0 Or $iShiftBits > 31) 
        {
            exit();
        }

        $RShift = floor(($lValue & 0x7FFFFFFE) / $this->m_l2Power[$iShiftBits]);

        if ($lValue & 0x80000000) 
        {
            $RShift = ($RShift | floor(0x40000000 / $this->m_l2Power[$iShiftBits - 1]));
        }

        return $RShift;
    }

    /**
      * Add unsigned
      *
      * @access    private
      * @param    integer        Number
      * @param    integer        Number
      * @return    string        Added unsigned integer
      */
    private function AddUnsigned($lX, $lY)
    {
        $lX8 = $lX & 0x80000000;
        $lY8 = $lY & 0x80000000;
        $lX4 = $lX & 0x40000000;
        $lY4 = $lY & 0x40000000;

        $lResult = ($lX & 0x3FFFFFFF) + ($lY & 0x3FFFFFFF);

        if ($lX4 & $lY4) 
         {
            $lResult = $lResult ^ 0x80000000 ^ $lX8 ^ $lY8;
        }
        elseif ($lX4 | $lY4) 
        {
            if ($lResult & 0x40000000) 
            {
                $lResult = $lResult ^ 0xC0000000 ^ $lX8 ^ $lY8;
            }
            else 
            {
                $lResult = $lResult ^ 0x40000000 ^ $lX8 ^ $lY8;
            }
        }
        else 
        {
            $lResult = $lResult ^ $lX8 ^ $lY8;
        }

        return $lResult;
    }

    /**
      * Ch
      *
      * @access    private
      * @param    integer        $x
      * @param    integer        $y
      * @param    integer        $z
      * @return    mixed        No idea...
      */
    private function Ch($x, $y, $z)
    {
        return (($x & $y) ^ ((~ $x) & $z));
    }

    /**
      * Maj
      *
      * @access    private
      * @param    integer        $x
      * @param    integer        $y
      * @param    integer        $z
      * @return    mixed        No idea...
      */
    private function Maj($x, $y, $z)
    {
        return (($x & $y) ^ ($x & $z) ^ ($y & $z));
    }

    /**
      * S
      *
      * @access    private
      * @param    integer        $x
      * @param    integer        $n
      * @return    mixed        No idea...
      */
    private function S($x, $n)
    {
        return ($this->RShift($x , ($n & $this->m_lOnBits[4])) | $this->LShift($x , (32 - ($n & $this->m_lOnBits[4]))));
    }

    /**
      * R
      *
      * @access    private
      * @param    integer        $x
      * @param    integer        $n
      * @return    mixed        No idea...
      */
    private function R($x, $n)
    {
        return $this->RShift($x , ($n & $this->m_lOnBits[4]));
    }

    /**
      * Sigma0
      *
      * @access    private
      * @param    integer        $x
      * @return    mixed        No idea...
      */
    private function Sigma0($x)
    {
        return ($this->S($x, 2) ^ $this->S($x, 13) ^ $this->S($x, 22));
    }

    /**
      * Sigma1
      *
      * @access    private
      * @param    integer        $x
      * @return    mixed        No idea...
      */
    private function Sigma1($x)
    {
        return ($this->S($x, 6) ^ $this->S($x, 11) ^ $this->S($x, 25));
    }

    /**
      * Gamma0
      *
      * @access    private
      * @param    integer        $x
      * @return    mixed        No idea...
      */
    private function Gamma0($x)
    {
        return ($this->S($x, 7) ^ $this->S($x, 18) ^ $this->R($x, 3));
    }

    /**
      * Gamma1
      *
      * @access    private
      * @param    integer        $x
      * @return    mixed        No idea...
      */
    private function Gamma1($x)
    {
        return ($this->S($x, 17) ^ $this->S($x, 19) ^ $this->R($x, 10));
    }

    /**
      * Convert to a word array
      *
      * @access    private
      * @param    string        Word to convert
      * @return    array        Word array
      */
    private function ConvertToWordArray($sMessage)
    {
        $BITS_TO_A_BYTE = 8;
        $BYTES_TO_A_WORD = 4;
        $BITS_TO_A_WORD = 32;
        $MODULUS_BITS = 512;
        $CONGRUENT_BITS = 448;

        $lMessageLength = strlen($sMessage);

        $lNumberOfWords = (floor(($lMessageLength + floor(($MODULUS_BITS - $CONGRUENT_BITS) / $BITS_TO_A_BYTE)) / floor($MODULUS_BITS / $BITS_TO_A_BYTE)) + 1) * floor($MODULUS_BITS / $BITS_TO_A_WORD);
        for($i = 0; $i < $lNumberOfWords; $i++)
        {
            $lWordArray[$i]="""";
        }

        $lBytePosition = 0;
        $lByteCount = 0;
        do
        {
            $lWordCount = floor($lByteCount / $BYTES_TO_A_WORD);

            $lBytePosition = (3 - ($lByteCount % $BYTES_TO_A_WORD)) * $BITS_TO_A_BYTE;

            $lByte = ord(substr($sMessage, $lByteCount, 1));

            $lWordArray[$lWordCount] = $lWordArray[$lWordCount] | $this->LShift($lByte , $lBytePosition);
            $lByteCount++;
        }
        while ($lByteCount < $lMessageLength);

        $lWordCount = floor($lByteCount / $BYTES_TO_A_WORD);
        $lBytePosition = (3 - ($lByteCount % $BYTES_TO_A_WORD)) * $BITS_TO_A_BYTE;

        $lWordArray[$lWordCount] = $lWordArray[$lWordCount] | $this->LShift(0x80 , $lBytePosition);

        $lWordArray[$lNumberOfWords - 1] = $this->LShift($lMessageLength , 3);
        $lWordArray[$lNumberOfWords - 2] = $this->RShift($lMessageLength , 29);

        return $lWordArray;
    }
} 

you can run it with the test.php file:
<?php 
     require_once ( 'phpSha.php');

     $sha = new auth_sha256();

     $password  = $sha->SHA256('hello');

     echo $password;

?>

When i run the vbscript with password hello the sha256 hash is the 2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824
and the result for the string hello with php sha256 implementation is: 0e52daf0a5e0f63d5cd8e0d63b667960d5b02c51ee85c243572ea4b636ea90c4
Can somebody help me to figure out what is wrong and the hashes don't match?
","Why don't you just use the PHP hash function?
echo hash('sha256','hello');

","369","<php><vbscript><sha><sha256><digest>","1","0","1","2015-04-24 10:10:58","","0","","","","","2015-04-24 09:06:01",""
"37033365","Login with hashed password asp mvc","I am creating a simple application, i have created the hash for the password at register, but can not apply the hash at login. Currently i can not login with new users who have hashed passwords. Any help would be much appreciated. Currently i have: (Register)
    public String HashPassword(String password)
    {
        var combinedPassword = String.Concat(password);
        var sha256 = new SHA256Managed();
        var bytes = UTF8Encoding.UTF8.GetBytes(combinedPassword);
        var hash = sha256.ComputeHash(bytes);
        return Convert.ToBase64String(hash);
    }

    public void AddUserAccount(UserSignUpView user)
    {

        using (DemoDBEntities db = new DemoDBEntities())
        {

            SYSUser SU = new SYSUser();
            SU.PasswordEncryptedText = HashPassword(user.Password);
            SU.LoginName = user.LoginName;

            SU.RowCreatedSYSUserID = user.SYSUserID > 0 ? 

            user.SYSUserID : 1;
            SU.RowModifiedSYSUserID = user.SYSUserID > 0 ? 

            user.SYSUserID : 1; ;
            SU.RowCreatedDateTime = DateTime.Now;
            SU.RowMOdifiedDateTime = DateTime.Now;



            db.SYSUsers.Add(SU);
            db.SaveChanges();

This all works fine to register and hash. This is what i have for login:
public Boolean ValidatePassword(String enteredPassword, String storedHash)
    {
        var hasher = HashPassword(enteredPassword);
        return String.Equals(storedHash, hasher);
    }
    public string GetUserPassword(string enteredPassword)
    {
        using (DemoDBEntities db = new DemoDBEntities())
        {
            var hash = HashPassword(enteredPassword);
            var user = db.SYSUsers.Where(o => 
            o.PasswordEncryptedText.Equals(enteredPassword));
            if (user.Any())
                return user.FirstOrDefault().PasswordEncryptedText;
            else
                return string.Empty;
        }
    }

In the controller i have:
    public ActionResult LogIn(UserLoginView ULV, string returnUrl)

    {
        if (ModelState.IsValid)
        {

            UserManager UM = new UserManager();
            string password = UM.GetUserName(ULV.LoginName);
            string hash = UM.GetUserPassword(ULV.Password);
            //var password = ComputeHash(password, new SHA256CryptoServiceProvider());



            if (string.IsNullOrEmpty(hash))
                ModelState.AddModelError("""", ""The user  login or password provided is incorrect."");
            else {
                if (ULV.Password.Equals(hash)&&(ULV.LoginName.Equals(password)))
                {
                    FormsAuthentication.SetAuthCookie(ULV.LoginName, false);
                    return RedirectToAction(""Welcome"", ""Home"");
                }
                else {
                    ModelState.AddModelError("""", ""The password provided is incorrect."");
                }
            }
        }

","It looks like you are getting the hashed password from the database with the line string hash = UM.GetUserPassword(ULV.Password); and then comparing it to the value that was entered with this line ULV.Password.Equals(hash).  Since one is hashed and the other is not, they will never be equal.
","368","<asp.net><asp.net-mvc><hash><sha256>","-1","0","2","2016-05-04 18:08:19","","1","","","","","2016-05-04 16:33:27",""
"37033365","Login with hashed password asp mvc","I am creating a simple application, i have created the hash for the password at register, but can not apply the hash at login. Currently i can not login with new users who have hashed passwords. Any help would be much appreciated. Currently i have: (Register)
    public String HashPassword(String password)
    {
        var combinedPassword = String.Concat(password);
        var sha256 = new SHA256Managed();
        var bytes = UTF8Encoding.UTF8.GetBytes(combinedPassword);
        var hash = sha256.ComputeHash(bytes);
        return Convert.ToBase64String(hash);
    }

    public void AddUserAccount(UserSignUpView user)
    {

        using (DemoDBEntities db = new DemoDBEntities())
        {

            SYSUser SU = new SYSUser();
            SU.PasswordEncryptedText = HashPassword(user.Password);
            SU.LoginName = user.LoginName;

            SU.RowCreatedSYSUserID = user.SYSUserID > 0 ? 

            user.SYSUserID : 1;
            SU.RowModifiedSYSUserID = user.SYSUserID > 0 ? 

            user.SYSUserID : 1; ;
            SU.RowCreatedDateTime = DateTime.Now;
            SU.RowMOdifiedDateTime = DateTime.Now;



            db.SYSUsers.Add(SU);
            db.SaveChanges();

This all works fine to register and hash. This is what i have for login:
public Boolean ValidatePassword(String enteredPassword, String storedHash)
    {
        var hasher = HashPassword(enteredPassword);
        return String.Equals(storedHash, hasher);
    }
    public string GetUserPassword(string enteredPassword)
    {
        using (DemoDBEntities db = new DemoDBEntities())
        {
            var hash = HashPassword(enteredPassword);
            var user = db.SYSUsers.Where(o => 
            o.PasswordEncryptedText.Equals(enteredPassword));
            if (user.Any())
                return user.FirstOrDefault().PasswordEncryptedText;
            else
                return string.Empty;
        }
    }

In the controller i have:
    public ActionResult LogIn(UserLoginView ULV, string returnUrl)

    {
        if (ModelState.IsValid)
        {

            UserManager UM = new UserManager();
            string password = UM.GetUserName(ULV.LoginName);
            string hash = UM.GetUserPassword(ULV.Password);
            //var password = ComputeHash(password, new SHA256CryptoServiceProvider());



            if (string.IsNullOrEmpty(hash))
                ModelState.AddModelError("""", ""The user  login or password provided is incorrect."");
            else {
                if (ULV.Password.Equals(hash)&&(ULV.LoginName.Equals(password)))
                {
                    FormsAuthentication.SetAuthCookie(ULV.LoginName, false);
                    return RedirectToAction(""Welcome"", ""Home"");
                }
                else {
                    ModelState.AddModelError("""", ""The password provided is incorrect."");
                }
            }
        }

","This worked:
            string password = UM.GetUserName(ULV.LoginName);
            string hash = UM.GetUserPassword(ULV.Password);
            string hashit = HashPassword(ULV.Password);

          public string GetUserPassword(string enteredPassword)
    {
        using (DemoDBEntities db = new DemoDBEntities())
        {
            var hash = HashPassword(enteredPassword);
            var user = db.SYSUsers.Where(o => o.PasswordEncryptedText.Equals(hash));
            if (user.Any())
                return user.FirstOrDefault().PasswordEncryptedText;
            else
                return string.Empty;
        }
    }

","368","<asp.net><asp.net-mvc><hash><sha256>","-1","0","2","2016-05-04 18:08:19","","1","","","","","2016-05-04 16:33:27",""
"49396064","AttributeError: HMAC instance has no attribute '__len__' python","currently working on signing a signature for AWS s3. on my last hash where I compute the signature I am getting the following error: 
 signature = hmac.new(signingkey, policy, hashlib.sha256).digest()
  File ""/usr/lib/python2.7/hmac.py"", line 136, in new
    return HMAC(key, msg, digestmod)
  File ""/usr/lib/python2.7/hmac.py"", line 71, in __init__
    if len(key) > blocksize:
AttributeError: HMAC instance has no attribute '__len__'

the code: 
datekey = hmac.new(str(""AWS4"") + AWS_UPLOAD_SECRET_KEY,stringdate , hashlib.sha256).digest()
            dateregionkey = hmac.new(datekey, AWS_UPLOAD_REGION, hashlib.sha256).digest()
            dateregionservicekey = hmac.new(dateregionkey,""s3"", hashlib.sha256).digest()
            signingkey = hmac.new(dateregionservicekey, ""aws4_request"")
            signature = hmac.new(signingkey, policy, hashlib.sha256).digest()

any ideas of what is causing this? Always something like this in coding. we get nothing for free -_-
","signingkey = hmac.new(dateregionservicekey, ""aws4_request"").digest()

otherwise signingkey  is a hmac object
","367","<amazon-s3><hex><sha256><hmac><attributeerror>","0","0","1","2018-03-21 00:16:14","49396188","0","","","","","2018-03-21 00:02:16",""
"31583811","PHP sha256 password hashing returns different digest when running on linux","I have the following php class that generates a sha256 digest.
<?php

class AuthSha256
{
/**
 * On Bits for sha256 mapping
 *
 * @access  private
 * @var     array
 */
private $m_lOnBits  = array(1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535,131071,262143,524287,1048575,2097151,4194303,8388607,16777215,33554431,67108863,134217727,268435455,536870911,1073741823,2147483647);

/**
 * 2nd power sha256 mapping
 *
 * @access  private
 * @var     array
 */
private $m_l2Power  = array(1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288,1048576,2097152,4194304,8388608,16777216,33554432,67108864,134217728,268435456,536870912,1073741824);

/**
 * Hex mapping sha256 mapping
 *
 * @access  private
 * @var     array
 */
private $K          = array(0x428A2F98,0x71374491,0xB5C0FBCF,0xE9B5DBA5,0x3956C25B,0x59F111F1,0x923F82A4,0xAB1C5ED5,0xD807AA98,0x12835B01,0x243185BE,0x550C7DC3,0x72BE5D74,0x80DEB1FE,0x9BDC06A7,0xC19BF174,0xE49B69C1,0xEFBE4786,0xFC19DC6,0x240CA1CC,0x2DE92C6F,0x4A7484AA,0x5CB0A9DC,0x76F988DA,0x983E5152,0xA831C66D,0xB00327C8,0xBF597FC7,0xC6E00BF3,0xD5A79147,0x6CA6351,0x14292967,0x27B70A85,0x2E1B2138,0x4D2C6DFC,0x53380D13,0x650A7354,0x766A0ABB,0x81C2C92E,0x92722C85,0xA2BFE8A1,0xA81A664B,0xC24B8B70,0xC76C51A3,0xD192E819,0xD6990624,0xF40E3585,0x106AA070,0x19A4C116,0x1E376C08,0x2748774C,0x34B0BCB5,0x391C0CB3,0x4ED8AA4A,0x5B9CCA4F,0x682E6FF3,0x748F82EE,0x78A5636F,0x84C87814,0x8CC70208,0x90BEFFFA,0xA4506CEB,0xBEF9A3F7,0xC67178F2);


/**
 * Perform SHA256 encoding
 *
 * @access  public
 * @param   string      String to encode
 * @return  string      Encoded string
 */
public function SHA256($sMessage)
{

    $HASH   = array( 
        0x6A09E667, 
        0xBB67AE85, 
        0x3C6EF372, 
        0xA54FF53A, 
        0x510E527F, 
        0x9B05688C, 
        0x1F83D9AB, 
        0x5BE0CD19);

    $M      = $this->ConvertToWordArray( $sMessage );

    for( $i = 0; $i < count($M); $i+=16 )
    {
        $a = $HASH[0];
        $b = $HASH[1];
        $c = $HASH[2];
        $d = $HASH[3];
        $e = $HASH[4];
        $f = $HASH[5];
        $g = $HASH[6];
        $h = $HASH[7];

        for( $j = 0; $j<=47; $j++ )
        {
            if($j < 16) 
            {
                $W[$j] = $M[$j + $i];
            }
            else
            {
                $W[$j] = $this->AddUnsigned($this->AddUnsigned($this->AddUnsigned($this->Gamma1($W[$j - 2]), $W[$j - 7]), $this->Gamma0($W[$j - 15])), $W[$j - 16]);
            }

            $T1 = $this->AddUnsigned($this->AddUnsigned($this->AddUnsigned($this->AddUnsigned($h, $this->Sigma1($e)), $this->Ch($e, $f, $g)), $this->K[$j]), $W[$j]);
            $T2 = $this->AddUnsigned($this->Sigma0($a), $this->Maj($a, $b, $c));

            $h = $g;
            $g = $f;
            $f = $e;
            $e = $this->AddUnsigned($d, $T1);
            $d = $c;
            $c = $b;
            $b = $a;
            $a = $this->AddUnsigned($T1, $T2);
        }

        $HASH[0] = $this->AddUnsigned($a, $HASH[0]);
        $HASH[1] = $this->AddUnsigned($b, $HASH[1]);
        $HASH[2] = $this->AddUnsigned($c, $HASH[2]);
        $HASH[3] = $this->AddUnsigned($d, $HASH[3]);
        $HASH[4] = $this->AddUnsigned($e, $HASH[4]);
        $HASH[5] = $this->AddUnsigned($f, $HASH[5]);
        $HASH[6] = $this->AddUnsigned($g, $HASH[6]);
        $HASH[7] = $this->AddUnsigned($h, $HASH[7]);
    }

    return 
         strtolower(
         substr(""00000000"".dechex($HASH[0]), -6)
        .substr(""00000000"".dechex($HASH[1]), -6)
        .substr(""00000000"".dechex($HASH[2]), -6)
        .substr(""00000000"".dechex($HASH[3]), -6)
        .substr(""00000000"".dechex($HASH[4]), -6)
        .substr(""00000000"".dechex($HASH[5]), -6)
        .substr(""00000000"".dechex($HASH[6]), -6)
        .substr(""00000000"".dechex($HASH[7]), -6));
}

/**
 * Left shift a value x bits
 *
 * @access  private
 * @param   string      String to shift
 * @param   integer     Number of bits to shift
 * @return  string      Shifted string
 */
private function LShift($lValue, $iShiftBits) 
{
    if ($iShiftBits == 0) 
    {
        return $lValue;
    }
    elseif ($iShiftBits == 31) 
    {
        if ($lValue & 1) 
        {
            $un = unpack(""l"", pack(""l"", hexdec('0x80000000')));
            return reset($un);
        }
        else
        {
            return 0;
        }
    }
    elseif ($iShiftBits < 0 Or $iShiftBits > 31) 
    {
        exit();
    }

    if ($lValue & $this->m_l2Power[31 - $iShiftBits]) 
    {
        $un2=unpack(""l"", pack(""l"", hexdec('0x80000000')));
        return (($lValue & $this->m_lOnBits[31 - ($iShiftBits + 1)]) * $this->m_l2Power[$iShiftBits]) | reset($un2);
    }
    else 
    {
        return (($lValue & $this->m_lOnBits[31 - $iShiftBits]) * $this->m_l2Power[$iShiftBits]);
    }
}

/**
 * Right shift a value x bits
 *
 * @access  private
 * @param   string      String to shift
 * @param   integer     Number of bits to shift
 * @return  string      Shifted string
 */
private function RShift($lValue, $iShiftBits)
{
    if ($iShiftBits == 0) 
    {
        return $lValue;
    }
    elseif ($iShiftBits == 31) 
    {
        $un3 = unpack(""l"", pack(""l"", hexdec('0x80000000')));
        if ($lValue & reset($un3))
        {
            $RShift = 1;
        }
        else 
        {
            $RShift = 0;
        }
    }
    elseif ($iShiftBits < 0 Or $iShiftBits > 31) 
    {
        exit();
    }

    $unpack = unpack(""l"", pack(""l"", hexdec('0x7FFFFFFE')));
    $rese = reset($unpack);
    $RShift = floor(($lValue & $rese) / $this->m_l2Power[$iShiftBits]);

    $unpack1 = unpack(""l"", pack(""l"", hexdec('0x80000000')));
    if ($lValue & reset($unpack1))
    {
        $unpack2 = unpack(""l"", pack(""l"", hexdec('0x40000000')));
        $RShift = ($RShift | floor(reset($unpack2)) / $this->m_l2Power[$iShiftBits - 1]);
    }

    return $RShift;
}

/**
 * Add unsigned
 *
 * @access  private
 * @param   integer     Number
 * @param   integer     Number
 * @return  string      Added unsigned integer
 */
private function AddUnsigned($lX, $lY)
{
    $unp1 = unpack(""l"", pack(""l"", hexdec('0x80000000')));
    $unp2 = unpack(""l"", pack(""l"", hexdec('0x80000000')));
    $unp3 = unpack(""l"", pack(""l"", hexdec('0x40000000')));
    $unp4 = unpack(""l"", pack(""l"", hexdec('0x40000000')));
    $lX8 = $lX & reset($unp1);
    $lY8 = $lY & reset($unp2);
    $lX4 = $lX & reset($unp3);
    $lY4 = $lY & reset($unp4);

    $unp5 = unpack(""l"", pack(""l"", hexdec('0x3FFFFFFF')));
    $lResult = ($lX & reset($unp5)) + ($lY & reset($unp5));

    if ($lX4 & $lY4) 
    {
        $lResult = $lResult ^ reset($unp1) ^ $lX8 ^ $lY8;
    }
    elseif ($lX4 | $lY4) 
    {
        if ($lResult & reset($unp3))
        {
            $unp6 = unpack(""l"", pack(""l"", hexdec('0xC0000000')));
            $lResult = $lResult ^ reset($unp6) ^ $lX8 ^ $lY8;
        }
        else 
        {
            $lResult = $lResult ^ reset($unp3) ^ $lX8 ^ $lY8;
        }
    }
    else 
    {
        $lResult = $lResult ^ $lX8 ^ $lY8;
    }

    return $lResult;
}

/**
 * Ch
 *
 * @access  private
 * @param   integer     $x
 * @param   integer     $y
 * @param   integer     $z
 * @return  mixed       No idea...
 */
private function Ch($x, $y, $z)
{
    return (($x & $y) ^ ((~ $x) & $z));
}

/**
 * Maj
 *
 * @access  private
 * @param   integer     $x
 * @param   integer     $y
 * @param   integer     $z
 * @return  mixed       No idea...
 */
private function Maj($x, $y, $z)
{
    return (($x & $y) ^ ($x & $z) ^ ($y & $z));
}

/**
 * S
 *
 * @access  private
 * @param   integer     $x
 * @param   integer     $n
 * @return  mixed       No idea...
 */
private function S($x, $n)
{
    return ($this->RShift($x , ($n & $this->m_lOnBits[4])) | $this->LShift($x , (32 - ($n & $this->m_lOnBits[4]))));
}

/**
 * R
 *
 * @access  private
 * @param   integer     $x
 * @param   integer     $n
 * @return  mixed       No idea...
 */
private function R($x, $n)
{
    return $this->RShift($x , ($n & $this->m_lOnBits[4]));
}

/**
 * Sigma0
 *
 * @access  private
 * @param   integer     $x
 * @return  mixed       No idea...
 */
private function Sigma0($x)
{
    return ($this->S($x, 2) ^ $this->S($x, 13) ^ $this->S($x, 22));
}

/**
 * Sigma1
 *
 * @access  private
 * @param   integer     $x
 * @return  mixed       No idea...
 */
private function Sigma1($x)
{
    return ($this->S($x, 6) ^ $this->S($x, 11) ^ $this->S($x, 25));
}

/**
 * Gamma0
 *
 * @access  private
 * @param   integer     $x
 * @return  mixed       No idea...
 */
private function Gamma0($x)
{
    return ($this->S($x, 7) ^ $this->S($x, 18) ^ $this->R($x, 3));
}

/**
 * Gamma1
 *
 * @access  private
 * @param   integer     $x
 * @return  mixed       No idea...
 */
private function Gamma1($x)
{
    return ($this->S($x, 17) ^ $this->S($x, 19) ^ $this->R($x, 10));
}

/**
 * Convert to a word array
 *
 * @access  private
 * @param   string      Word to convert
 * @return  array       Word array
 */
private function ConvertToWordArray($sMessage)
{
    $BITS_TO_A_BYTE = 8;
    $BYTES_TO_A_WORD = 4;
    $BITS_TO_A_WORD = 32;
    $MODULUS_BITS = 512;
    $CONGRUENT_BITS = 448;

    $lMessageLength = strlen($sMessage);

    $lNumberOfWords = (floor(($lMessageLength + floor(($MODULUS_BITS - $CONGRUENT_BITS) / $BITS_TO_A_BYTE)) / floor($MODULUS_BITS / $BITS_TO_A_BYTE)) + 1) * floor($MODULUS_BITS / $BITS_TO_A_WORD);
    for($i = 0; $i < $lNumberOfWords; $i++)
    {
        $lWordArray[$i]="""";
    }

    $lBytePosition = 0;
    $lByteCount = 0;
    do
    {
        $lWordCount = floor($lByteCount / $BYTES_TO_A_WORD);

        $lBytePosition = (3 - ($lByteCount % $BYTES_TO_A_WORD)) * $BITS_TO_A_BYTE;

        $lByte = ord(substr($sMessage, $lByteCount, 1));

        $lWordArray[$lWordCount] = $lWordArray[$lWordCount] | $this->LShift($lByte , $lBytePosition);
        $lByteCount++;
    }
    while ($lByteCount < $lMessageLength);

    $lWordCount = floor($lByteCount / $BYTES_TO_A_WORD);
    $lBytePosition = (3 - ($lByteCount % $BYTES_TO_A_WORD)) * $BITS_TO_A_BYTE;

    $lWordArray[$lWordCount] = $lWordArray[$lWordCount] | $this->LShift(0x80 , $lBytePosition);

    $lWordArray[$lNumberOfWords - 1] = $this->LShift($lMessageLength , 3);
    $lWordArray[$lNumberOfWords - 2] = $this->RShift($lMessageLength , 29);

    return $lWordArray;
}
}

here is sample code for generating a digest
<?php 
require_once('AuthSha256.php');

 $pwd = '1!aAqwerty';
 $c = new AuthSha256();
 print_r($c-> SHA256($pwd));
?>

When i execute  this class on Linux I get this digest 97bc61212297bf380d5462d827b182adf6f956c855ec9c1c but when I execute the exactly same code on windows I get for the same password '1!aAqwerty' a completely different digest. 20fc88c269c75bda2902f99d020fa966c4e550b42bedddd9.
Does anybody know why is this happening?
","","367","<php><linux><windows><sha256><digest>","0","","0","2015-07-23 09:48:51","","10","","","","","2015-07-23 09:48:51",""
"22002999","Is it smart to encrypt data with SHA256 using counter mode?","I have to encrypt users vpn passwords for a project. They are only stored at the local machine but i want to avoid plain text passwords on the hard drive. 
I re-salt and hash the users master-password to encrypt the vpn-passwords using XTEA in counter mode... 
Then i thought it's also possible to encrypt the vpn-passwords using sha256 in a sort of counter mode.
pseudo c code:
    string masterpasswd, txtdata;
    uint32_t data[] = unicode(txtdata);
    uint32_t key[8] = sha256(masterpasswd+salt);
    for(int i=0;i<data_size;i++) {
      encrypted[i] = data[i] ^ key[i];
      key=sha256(key+i);
    }

I don' want to use openssl because i am lazy ;)
Is this a smart solution?
","No - what happens when your data is larger than your key, for the users whose password is ""correct horse battery staple""?
Either 

your code breaks because it tries to go for the 9th byte of an 8 byte key

or

your actual implementation (rather than your pseudo-code) ends up wrapping around to byte 0 of the key again, i.e. ECB mode, which is the one mode you should never ever use (see Adobe), since ""passwordpassword"" would then result in the same encrypted output twice, which is a huge hint.

More seriously, don't do this.  You should use PBKDF2 (for OpenSSL, that's PKCS5_PBKDF2_HMAC() with EVP_sha512() as the hash function - you'll need evp.h and sha.h)  to derive an encryption key of the required size from your master password and salt, and then use, say, OpenSSL to actually do the encryption using something other than ecb mode.
","366","<c++><c><qt><encryption><sha256>","1","3","2","2014-02-25 08:37:19","","5","","3349128","","2014-02-25 01:55:56","2014-02-25 01:44:15",""
"22002999","Is it smart to encrypt data with SHA256 using counter mode?","I have to encrypt users vpn passwords for a project. They are only stored at the local machine but i want to avoid plain text passwords on the hard drive. 
I re-salt and hash the users master-password to encrypt the vpn-passwords using XTEA in counter mode... 
Then i thought it's also possible to encrypt the vpn-passwords using sha256 in a sort of counter mode.
pseudo c code:
    string masterpasswd, txtdata;
    uint32_t data[] = unicode(txtdata);
    uint32_t key[8] = sha256(masterpasswd+salt);
    for(int i=0;i<data_size;i++) {
      encrypted[i] = data[i] ^ key[i];
      key=sha256(key+i);
    }

I don' want to use openssl because i am lazy ;)
Is this a smart solution?
","You can be even more lazy and use existing class for Qt Simple Crypt :)
","366","<c++><c><qt><encryption><sha256>","1","-1","2","2014-02-25 08:37:19","","5","","3349128","","2014-02-25 01:55:56","2014-02-25 01:44:15",""
"45957488","How can I decrypt a SHA256 Hash string when I know the answer is a random number from a known nuimber range?","A random number is selected from a range of 1 to 50 (for example). 
This number then encrypted with a salt key to a SHA256 Hash string.
What I wanted to know is if there is any way I can decrypt this Hash String to get the encrypted random number behind it? 
Thank you in advance.
","","361","<encryption><hash><sha256><salt><sha>","0","","0","2017-08-30 10:04:42","","9","","","","","2017-08-30 10:04:42",""
"48688912","Sign string with private key X509 certificate","I have an X509 certificate in current user storage (Windows 10). What is the simplest approach to verifying a signature in JavaScript which was generated by RSACryptoServiceProvider in C# / .NET?
I already have the C# method:
public static string GetSign(string data, AsymmetricAlgorithm privateKey)
 {
            var rsa = (RSACryptoServiceProvider)privateKey;            
            TextWriter textWriter = new StringWriter();
            CertifycateKeyHelper.ExportPrivateKey(rsa, textWriter);
            RSACryptoServiceProvider rsaClear = new RSACryptoServiceProvider();
            rsaClear.ImportParameters(rsa.ExportParameters(true));
            var signature = rsaClear.SignData(Encoding.UTF8.GetBytes(data), 
               new SHA256CryptoServiceProvider());
            return BytesToHex(signature);
 }

Also, how can I go the other direction, generate an RSA SHA256 signature  javascript and verify it in C# with an instance of RSACryptoServiceProvider?
","First of all, you need a library to parse an X.509 certificate. Then you need a way to validate and verify the certificate or to trust it explicitly (certificate pinning). If you cannot trust the certificate and the public key within it then verifying the signature is moot; it won't enable you to trust the data signed with it.
Parsing, validating and verifying an X.509 certificate is not an easy task, which means that you cannot do without a library. If you can pin the certificate then you can get away with just retrieving the public key from it. You could also extract the public key using different means and pin (i.e. store) the public key itself.
After you've trusted the certificate you can extract the public key from it and perform the signature verification. Note that the M$ documentation sucks and doesn't specify the signature generation algorithm. It uses PKCS#1 v1.5 padding.

For signature generation, you need to transfer the private key in a secure fashion, parse the private key and then perform the signature generation.

StackOverflow is not here to do the work for you so I just provided the steps you need to follow.
","361","<javascript><c#><rsa><digital-signature><sha256>","-1","1","1","2018-02-11 16:36:39","48733725","7","","238704","","2018-02-08 17:04:22","2018-02-08 15:20:40",""
"46555379","Golang crypto/sha256 - same inputs produce different outputs","I have a problem with Golang's crypto/sha256 package. I am sending the same input to sha256.Sum256 two separate times, and the output is different each time.
My code is the following:
//Run the HMAC-SHA256 on the given kmac and message and return the generated MAC tag
func PCSSHA256(kmac []byte, message []byte) [32]byte {
    //NOTE: bitwise XOR ^ only works on integers.
    kmac64 := append(kmac, []byte(strings.Repeat(""0"", 48))[0:]...) //Pad to obtain a 64 byte unit
    tohashinner := make([]byte, 64)
    for i := 0; i < 64; i++ {
            tohashinner[i] = kmac64[i] ^ 0x36
    }
    tohashouter := make([]byte, 64)
    for i := 0; i < 64; i++ {
            tohashouter[i] = kmac64[i] ^ 0x5c
    }
    tohashinnerwmess := append(tohashinner, message[0:]...)
    firsthashval := sha256.Sum256(tohashinnerwmess)

    fmt.Printf(""tohashinner in || bounds:\n||%s||\n"", tohashinner)
    fmt.Printf(""tohashouter in || bounds:\n||%s||\n"", tohashouter)
    fmt.Printf(""tohashinnerwmess in || bounds:\n||%s||\n"", tohashinnerwmess)
    fmt.Printf(""firsthashval after Hex Encode in || bounds:\n||%s||\n"", hex.EncodeToString(firsthashval[:]))

    tag := sha256.Sum256(append(tohashouter, firsthashval[0:]...))

    fmt.Printf(""Input message in || bounds:\n||%s||\n"", message)
    fmt.Printf(""Input kmac in || bounds:\n||%s||\n"", kmac)
    fmt.Printf(""Tag generated by PCSSHA256 after Hex Encode in || bounds:\n||%s||\n"", hex.EncodeToString(tag[:]))
    return tag
}

Below is the fmt.Printf output for the first run:
tohashinner in || bounds:
||gdebc`anolwtursp||
tohashouter in || bounds:
||

llllllllllllllllllllllllllllllllllllllllllllllll||
tohashinnerwmess in || bounds:
||gdebc`anolwturspThis is a sample message. It is to be used for testing.
||
firsthashval after Hex Encode in || bounds:
||7b7bec6f1a9e8860a40730f76f3c5a5f3576a90008630e0dc3fbdc088430ce0f||
Input message in || bounds:
||This is a sample message. It is to be used for testing.
||
Input kmac in || bounds:
||QRSTUVWXYZABCDEF||
Tag generated by PCSSHA256 after Hex Encode in || bounds:
||fd54280dbbca722e41024100c8fa171fa640c814cb4c06380efced71d37504d5||

And here is the output for the second run:
tohashinner in || bounds:
||gdebc`anolwtursp||
tohashouter in || bounds:
||

llllllllllllllllllllllllllllllllllllllllllllllll||
tohashinnerwmess in || bounds:
||gdebc`anolwturspThis is a sample message. It is to be used for testing.
||
firsthashval after Hex Encode in || bounds:
||632b978ee2b3498754b761e3e091832a6e8f8308ea89f55749a0754f481564d1||
Input message in || bounds:
||This is a sample message. It is to be used for testing.
||
Input kmac in || bounds:
||QRSTUVWXYZABCDEF||
Tag generated by PCSSHA256 after Hex Encode in || bounds:
||e81de52ce8c7d86ef9937011e2978b452d300b85051cf68f7bd99572558e3cee||

In both of the outputs, everything is the same except for firsthashvalue and the resulting tag. Since tohashinnerwmess (a variable I'm using solely to figure out what's going wrong) is equivalent in both cases and it is the only thing being fed into sha256.Sum256, I'm confused as to why firsthashvalue is different for the two inputs.
I'm pretty sure that sha256.Sum256 is deterministic and is expected to return the same output for a given input - tested this in the Go Playground, and indeed it returned the same thing - so I assume the problem lies either with my code or my understanding of Sum256's inner workings. If anyone could explain what I am doing wrong, that would be greatly appreciated. 
Thank you.
EDITS:
- On the first run, the message input to the PCSSHA256 function is directly read from a file using ioutil.ReadFile() while on the second run, an encrypted message is first processed block by block via AES and then passed to PCSSHA256.
","Answer: It is an issue with my code. My message is padded by 8 extra 0s in the second case when converted to Hex - this padding is not visible when printed as a string.
","360","<go><sha256>","0","0","1","2017-10-04 01:36:29","46555750","6","","4309985","","2017-10-04 01:27:45","2017-10-04 00:35:23",""
"18680099","Echo Uncaught Exception","I am making a bitcoin faucet using the coinbase api, and was looking to validate the address. I looked online to see if there are any good scripts, and couldnt find any so I decided to test and see if it was already built in the API, and it was! The the thing is that instead of just saying that is not a valid address it php displays a LONG error... 

Fatal error: Uncaught exception 'Coinbase_ApiException' with message 'Please enter a valid email or bitcoin address' in C:\xampp\htdocs\nahtnam\lib\Coinbase\Rpc.php:84 Stack trace: #0 C:\xampp\htdocs\nahtnam\lib\Coinbase\Coinbase.php(39): Coinbase_Rpc->request('POST', 'transactions/se...', Array) #1 C:\xampp\htdocs\nahtnam\lib\Coinbase\Coinbase.php(118): Coinbase->post('transactions/se...', Array) #2 C:\xampp\htdocs\nahtnam\faucet.php(54): Coinbase->sendMoney('17FSKMPAyXGR7EQ...', '0.00000555', 'this is a test') #3 {main} thrown in C:\xampp\htdocs\nahtnam\lib\Coinbase\Rpc.php on line 84

Is ther any way i can just set $address_error to ""Please enter a valid Address"" (not email) if this occurs and also not display the error? Thanks!
","Use try and catch. 
try {
    if(/*invalid address check returns true*/)
        throw 'Invalid address';
} catch(Exception $e) {
    echo 'Exception: ' . $e->getMessage();
}

","360","<php><sha256><bitcoin>","0","1","2","2013-09-09 15:56:32","18680291","3","0","","user2672373","2013-09-08 03:47:30","2013-09-08 03:28:37",""
"18680099","Echo Uncaught Exception","I am making a bitcoin faucet using the coinbase api, and was looking to validate the address. I looked online to see if there are any good scripts, and couldnt find any so I decided to test and see if it was already built in the API, and it was! The the thing is that instead of just saying that is not a valid address it php displays a LONG error... 

Fatal error: Uncaught exception 'Coinbase_ApiException' with message 'Please enter a valid email or bitcoin address' in C:\xampp\htdocs\nahtnam\lib\Coinbase\Rpc.php:84 Stack trace: #0 C:\xampp\htdocs\nahtnam\lib\Coinbase\Coinbase.php(39): Coinbase_Rpc->request('POST', 'transactions/se...', Array) #1 C:\xampp\htdocs\nahtnam\lib\Coinbase\Coinbase.php(118): Coinbase->post('transactions/se...', Array) #2 C:\xampp\htdocs\nahtnam\faucet.php(54): Coinbase->sendMoney('17FSKMPAyXGR7EQ...', '0.00000555', 'this is a test') #3 {main} thrown in C:\xampp\htdocs\nahtnam\lib\Coinbase\Rpc.php on line 84

Is ther any way i can just set $address_error to ""Please enter a valid Address"" (not email) if this occurs and also not display the error? Thanks!
","Expanding on aliasm2k's answer, you probably want to do it more like this:
EDIT: Changed answer slightly based on comments discussion
I think I was a bit unclear on what you were asking for in the comments.  
 try {
     $result = $Coinbase->sendMoney($bitcoinaddress, '0.00000555', 'this is a test');
 catch(Exception $e) {
     echo $e->getMessage(); 
     exit;   //optional but you probably want to quit here and show the user
             //the original form along with the error message to fix 
 }

This is just going to echo ""Please enter a valid email or bitcoin address."" You wont get all of that other info because you are catching the exception and  just displaying the message. 
Possible error messages are listed here.
Also, if I can give you a slightly off-topic hint:
If you want to find info about a particular address that has been used, try the blockchain block explorer api. 
And to simply check if an address is valid, you need to calculate that in your code or find a library function to do so. There's no master-list of addresses that an api would have. The last 4 bytes of the address are a double-sha-256 checksum of the preceding characters. That's sort-of an imprecise description I'm giving you, by the way,  but check here for a working php example
","360","<php><sha256><bitcoin>","0","1","2","2013-09-09 15:56:32","18680291","3","0","","user2672373","2013-09-08 03:47:30","2013-09-08 03:28:37",""
"46335741","Java RSA Decrypt BadPaddingException","I'm working on small tool to encrypt and decrypt data base on RSA Algo.
I used openSSL to create private and public key. then import to java code and encrypt and decrypt data.
Fisrt, I use follow command to generate public and private key
openssl genrsa -out private_key.pem 2048
openssl req -new -x509 -sha256 -key private_key.pem -out public_key.cer -days 3650

Next, get public key from file:
    private static PublicKey getPublicKey(String publicKey) throws IOException, GeneralSecurityException {
        String publicKeyPEM = getKey(publicKey);
        return getPublicKeyFromString(publicKeyPEM);
    }

    private static PublicKey getPublicKeyFromString(String key) throws IOException, GeneralSecurityException {
        String publicKeyPEM = key;
        publicKeyPEM = publicKeyPEM.replace(""-----BEGIN CERTIFICATE-----\n"", """");
        publicKeyPEM = publicKeyPEM.replace(""-----END CERTIFICATE-----"", """");
        byte[] encoded = Base64.decodeBase64(publicKeyPEM);
        CertificateFactory fact = CertificateFactory.getInstance(""X.509"");
        InputStream is = new ByteArrayInputStream(encoded);
        X509Certificate cer = (X509Certificate) fact.generateCertificate(is);
        return cer.getPublicKey();
    }

And private key from file
private static PrivateKey getPrivateKey(String privateKey) throws IOException, GeneralSecurityException {
        String privateKeyPEM = getKey(privateKey);
        return getPrivateKeyFromString(privateKeyPEM);
    }

    private static PrivateKey getPrivateKeyFromString(String key) throws IOException, GeneralSecurityException {
        String privateKeyPEM = key;
        privateKeyPEM = privateKeyPEM.replace(""-----BEGIN RSA PRIVATE KEY-----\n"", """");
        privateKeyPEM = privateKeyPEM.replace(""\n-----END RSA PRIVATE KEY-----\n"", """");
        KeyFactory kf = KeyFactory.getInstance(""RSA"");
        byte[] data = DatatypeConverter.parseBase64Binary(privateKeyPEM);
        ASN1Sequence primitive = (ASN1Sequence) ASN1Sequence
                .fromByteArray(data);
        Enumeration<?> e = primitive.getObjects();
        BigInteger v = ((DERInteger) e.nextElement()).getValue();

        int version = v.intValue();
        if (version != 0 && version != 1) {
            throw new IllegalArgumentException(""wrong version for RSA private key"");
        }
        /**
         * In fact only modulus and private exponent are in use.
         */
        BigInteger modulus = ((DERInteger) e.nextElement()).getValue();
        BigInteger publicExponent = ((DERInteger) e.nextElement()).getValue();
        BigInteger privateExponent = ((DERInteger) e.nextElement()).getValue();
        BigInteger prime1 = ((DERInteger) e.nextElement()).getValue();
        BigInteger prime2 = ((DERInteger) e.nextElement()).getValue();
        BigInteger exponent1 = ((DERInteger) e.nextElement()).getValue();
        BigInteger exponent2 = ((DERInteger) e.nextElement()).getValue();
        BigInteger coefficient = ((DERInteger) e.nextElement()).getValue();
        RSAPrivateKeySpec spec = new RSAPrivateKeySpec(modulus, privateExponent);
        PrivateKey pk = kf.generatePrivate(spec);

        return pk;
    }

Then encrypt
private static byte[] encrypt(String text, PublicKey key) {
        byte[] cipherText = null;
        try {
            // get an RSA cipher object and print the provider
            final Cipher cipher = Cipher.getInstance(ALGORITHM);
            // encrypt the plain text using the public key
            cipher.init(Cipher.ENCRYPT_MODE, key);
            cipherText = cipher.doFinal(text.getBytes());
        } catch (Exception e) {
            e.printStackTrace();
        }
        return cipherText;
    }

And decrypt
private static String decrypt(byte[] text, PrivateKey key) {
        try {
            // get an RSA cipher object and print the provider
            final Cipher cipher = Cipher.getInstance(ALGORITHM);

            // decrypt the text using the private key
            cipher.init(Cipher.DECRYPT_MODE, key);
            byte[] decryptTxt = cipher.doFinal(text);
            return new String(decryptTxt);
        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        }


    }

So, encryption success, but in decrypt, I got following exception:
javax.crypto.BadPaddingException: Decryption error
    at sun.security.rsa.RSAPadding.unpadV15(RSAPadding.java:380)
    at sun.security.rsa.RSAPadding.unpad(RSAPadding.java:291)
    at com.sun.crypto.provider.RSACipher.doFinal(RSACipher.java:363)
    at com.sun.crypto.provider.RSACipher.engineDoFinal(RSACipher.java:389)
    at javax.crypto.Cipher.doFinal(Cipher.java:2165)
    at pgp.RSAUtil.decrypt(RSAUtil.java:46)
    at pgp.RSAUtil.getDecryptData(RSAUtil.java:67)
    at pgp.PGPForm$2.actionPerformed(PGPForm.java:109)
    at javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:2022)
    at javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2348)
    at javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:402)
    at javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:259)
    at javax.swing.plaf.basic.BasicButtonListener.mouseReleased(BasicButtonListener.java:252)
    at java.awt.Component.processMouseEvent(Component.java:6533)
    at javax.swing.JComponent.processMouseEvent(JComponent.java:3324)
    at java.awt.Component.processEvent(Component.java:6298)
    at java.awt.Container.processEvent(Container.java:2236)
    at java.awt.Component.dispatchEventImpl(Component.java:4889)
    at java.awt.Container.dispatchEventImpl(Container.java:2294)
    at java.awt.Component.dispatchEvent(Component.java:4711)
    at java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4888)
    at java.awt.LightweightDispatcher.processMouseEvent(Container.java:4525)
    at java.awt.LightweightDispatcher.dispatchEvent(Container.java:4466)
    at java.awt.Container.dispatchEventImpl(Container.java:2280)
    at java.awt.Window.dispatchEventImpl(Window.java:2746)
    at java.awt.Component.dispatchEvent(Component.java:4711)
    at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:758)
    at java.awt.EventQueue.access$500(EventQueue.java:97)
    at java.awt.EventQueue$3.run(EventQueue.java:709)
    at java.awt.EventQueue$3.run(EventQueue.java:703)
    at java.security.AccessController.doPrivileged(Native Method)
    at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:80)
    at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:90)
    at java.awt.EventQueue$4.run(EventQueue.java:731)
    at java.awt.EventQueue$4.run(EventQueue.java:729)
    at java.security.AccessController.doPrivileged(Native Method)
    at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:80)
    at java.awt.EventQueue.dispatchEvent(EventQueue.java:728)
    at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)
    at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
    at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
    at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
    at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
    at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)
Exception in thread ""AWT-EventQueue-0"" java.lang.NullPointerException
    at java.util.Base64$Decoder.decode(Base64.java:549)
    at pgp.PGPForm$2.actionPerformed(PGPForm.java:110)
    at javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:2022)
    at javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2348)
    at javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:402)
    at javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:259)
    at javax.swing.plaf.basic.BasicButtonListener.mouseReleased(BasicButtonListener.java:252)
    at java.awt.Component.processMouseEvent(Component.java:6533)
    at javax.swing.JComponent.processMouseEvent(JComponent.java:3324)
    at java.awt.Component.processEvent(Component.java:6298)
    at java.awt.Container.processEvent(Container.java:2236)
    at java.awt.Component.dispatchEventImpl(Component.java:4889)
    at java.awt.Container.dispatchEventImpl(Container.java:2294)
    at java.awt.Component.dispatchEvent(Component.java:4711)
    at java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4888)
    at java.awt.LightweightDispatcher.processMouseEvent(Container.java:4525)
    at java.awt.LightweightDispatcher.dispatchEvent(Container.java:4466)
    at java.awt.Container.dispatchEventImpl(Container.java:2280)
    at java.awt.Window.dispatchEventImpl(Window.java:2746)
    at java.awt.Component.dispatchEvent(Component.java:4711)
    at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:758)
    at java.awt.EventQueue.access$500(EventQueue.java:97)
    at java.awt.EventQueue$3.run(EventQueue.java:709)
    at java.awt.EventQueue$3.run(EventQueue.java:703)
    at java.security.AccessController.doPrivileged(Native Method)
    at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:80)
    at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:90)
    at java.awt.EventQueue$4.run(EventQueue.java:731)
    at java.awt.EventQueue$4.run(EventQueue.java:729)
    at java.security.AccessController.doPrivileged(Native Method)
    at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:80)
    at java.awt.EventQueue.dispatchEvent(EventQueue.java:728)
    at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)
    at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
    at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
    at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
    at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
    at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)

So, without -sha256 in public key when run openSSL, this source code work fine. When I add it, I got exceptions above.
Any solutions? Thanks and regards.
","","358","<java><encryption><rsa><sha256><rsa-sha256>","0","","0","2017-09-21 04:56:34","","3","","","","","2017-09-21 04:56:34",""
"23621003","Validating a bitcoin address in Perl","Hi I'm trying to use some Perl code to check whether a bitcoin public address is valid or not. I obtained the code from here:
http://rosettacode.org/wiki/Bitcoin/address_validation#Perl
However the code doesn't even validate the example public address provided on the page without failing. It seems to generally be doing what it should - unpacking the checksum and checking it. The code is a little too arcane for me to understand though. I would appreciate any help in figuring out where the problem is. Here's a valid public address to use in testing: 1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62i
#!/usr/bin/perl -w

use strict;
use warnings;
use bigrat;

my @b58 = qw{
      1 2 3 4 5 6 7 8 9
    A B C D E F G H   J K L M N   P Q R S T U V W X Y Z
    a b c d e f g h i j k   m n o p q r s t u v w x y z
};
my %b58 = map { $b58[$_] => $_ } 0 .. 57;

sub unbase58 {
    use integer;
    my @out;
    for my $c ( map { $b58{$_} } shift =~ /./g ) {
        for (my $j = 25; $j--; ) {
            $c += 58 * ($out[$j] // 0);
            $out[$j] = $c % 256;
            $c /= 256;
        }
    }
    return @out;
}

sub check_bitcoin_address {
    # does nothing if the address is valid
    # dies otherwise
    use Digest::SHA qw(sha256);
    my @byte = unbase58 shift;
    die ""wrong checksum"" unless
    join('', map { chr } @byte[21..24]) eq
    substr sha256(sha256 pack 'C*', @byte[0..20]), 0, 4;
}


check_bitcoin_address(""1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62i""); # Fails with ""wrong checksum""

","","354","<perl><sha256><bitcoin>","0","","0","2014-05-13 01:23:33","","5","","990785","","2014-05-13 01:23:33","2014-05-13 00:27:38",""
"43081695","Set random Password and Salt","I want to create random password and salt.
Now I have a function based who Encrypt password like:
public string EncryptPassword(string password, string salt)
{
        using (var sha256 = SHA256.Create())
        {
             var saltedPassword = string.Format(""{0}{1}"", salt, password);
             byte[] saltedPasswordAsBytes = Encoding.UTF8.GetBytes(saltedPassword);
             return Convert.ToBase64String(sha256.ComputeHash(saltedPasswordAsBytes));
        }
}

So I want to do same encode password and salt but with random values, and before encode it I want to know what password is. How can I do it?
I have something like this:
 public string EncryptPasswordRandom()
 {
         var password = // some random password, how can I generate it?
         var salt = // how can I generate it?

         using (var sha256 = SHA256.Create())
         {
              var saltedPassword = string.Format(""{0}{1}"", salt, password);
              byte[] saltedPasswordAsBytes = Encoding.UTF8.GetBytes(saltedPassword);
              return Convert.ToBase64String(sha256.ComputeHash(saltedPasswordAsBytes));
         }
 }

Help is very appreciated. Regards

Note: I have a web application who works well, I can register user and
  login, this random password is for recovery password  and made one
  random

","System.Web.Membership has a GeneratePassword method that will do the job.
As for randomly generating the salt Guid.New() should work.
This answer addresses generating the salt in a high entropy fashion.
It might help if you explain what you are attempting to accomplish as well. At face value it looks like an odd requirement unless this is in a test of some sort.
","352","<c#><asp.net-mvc><sha256>","0","-1","1","2017-03-28 23:54:00","","6","","7775568","","2017-03-28 23:54:00","2017-03-28 23:32:05",""
"35022520","Hash SHA256 java not the same in PHP","I am trying to solve this issue with my php code.
the original code build in spring security 3.0 framework. and am trying to get the same results in php since am not able to make changes for Java code.
public boolean matches(CharSequence rawPassword, String encodedPassword) {
             byte[] digested = decode(encodedPassword);
             byte[] salt = EncodingUtils.subArray(digested, 0, 8);
             return matches(digested, digest(rawPassword, salt));
            }
            private byte[] decode(CharSequence encodedPassword) {
             return Hex.decode(encodedPassword);
            }

            Hex.decode:
             public static byte[] decode(CharSequence s) {
              int nChars = s.length();
              if (nChars % 2 != 0) {
               throw new IllegalArgumentException(""Hex-encoded string must have an even number of characters"");
              }

              byte[] result = new byte[nChars / 2];

              for (int i = 0; i < nChars; i += 2) {
               int msb = Character.digit(s.charAt(i), 16);
               int lsb = Character.digit(s.charAt(i + 1), 16);

               if (msb < 0 || lsb < 0) {
                throw new IllegalArgumentException(""Non-hex character in input: "" + s);
               }
               result[i / 2] = (byte)((msb << 4) | lsb);
              }
              return result;
             }

            EncodingUtils.subArray:
             public static byte[] subArray(byte[] array, int beginIndex, int endIndex) {
              int length = endIndex - beginIndex;
              byte[] subarray = new byte[length];
              System.arraycopy(array, beginIndex, subarray, 0, length);
              return subarray;
             }

            private byte[] digest(CharSequence rawPassword, byte[] salt) {
             byte[] digest = digester.digest(EncodingUtils.concatenate(salt, secret, Utf8.encode(rawPassword)));
             return EncodingUtils.concatenate(salt, digest);
            }

            public byte[] digest(byte[] value) {
             synchronized(messageDigest) {
              for (int i = 0; i < iterations; i++) {
               value = messageDigest.digest(value);
              }
              return value;
             }
            }

and for my php code am using 
function alogs($password, $salt, $algo = 'SHA256', $count = 1024 ,$length = 80)
   {
     $password = strtolower($salt).strtolower($password);
           for ($j = 1; $j < $count; $j++)
               $password = hash($algo, $password);
                  return $password ? substr($password, 0, $length) : $password;
   }

for the password am using : 'cwtcn'
and salt '12345678'
iterations 1024
results in java
encodedPassword:    
12345678e5246d4bb776fa6837cbecd5496a0c577c6b1d51a457e4ba68f600787deaad935640e1d2
in php 
123456781fdf4f326d05115f5ac31407302aa8cd614f11950e15bd6723b0266bb23812b9
","","351","<java><php><spring><hash><sha256>","1","","0","2016-01-26 19:45:22","","2","1","","","","2016-01-26 19:45:22",""
"16141688","String with accent crashes SHA256 encryption","I want to create hash from a string. If the string has characters with accent (like é, ő), it crashes with NSASCIIStringEncoding. It doesn't crash with NSUTF8StringEncoding, but on the server it doesn't match.
+(NSString *) getSHA256FromString: (NSString *)clear {

    const char *s=[clear cStringUsingEncoding: NSASCIIStringEncoding];// NSUTF8StringEncoding works, but isn't the same on server
    NSData *keyData=[NSData dataWithBytes:s length:strlen(s)];

    uint8_t digest[CC_SHA256_DIGEST_LENGTH]={0};
    CC_SHA256(keyData.bytes, keyData.length, digest);
    NSData *out=[NSData dataWithBytes:digest length:CC_SHA256_DIGEST_LENGTH];
    NSString *hash=[out description];
    hash = [hash stringByReplacingOccurrencesOfString:@"" "" withString:@""""];
    hash = [hash stringByReplacingOccurrencesOfString:@""<"" withString:@""""];
    hash = [hash stringByReplacingOccurrencesOfString:@"">"" withString:@""""];
    return hash;

}

","","349","<ios><objective-c><hash><sha256>","1","","0","2013-04-22 07:33:26","","7","","","","","2013-04-22 07:33:26",""
"31269947","AWS REST API v4, SignatureDoesNotMatch, wrong Signature using example values/algo steps","Why am I getting different values for ""Signature"" from the example here (from which I copied values and algorithm steps)?
Input:     
var YourSecretAccessKey = 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY';
var date = '20130524';

var signing_key = getSignatureKey(YourSecretAccessKey, date, 'us-east-1', 's3');

StringToSign: AWS4-HMAC-SHA256
20130524T000000Z
20130524/us-east-1/s3/aws4_request
3bfa292879f6447bbcda7001decf97f4a54dc650c8942174ae0a9121cf58ad04

var Signature = Crypto.HmacSHA256( signing_key, StringToSign );

Output
Signature: c4b97c8d906d49d5fb7a14479fc69b033cbf2d1b9bb67df6058ec8ab4714ee97

As you can see, the Signature result is different from the example from Amazon here: http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html
Signature: aeeed9bbccd4d02ee5c0109b86d86835f995330da4c265957d157751f604d404

Maybe my getSignatureKey function isn't performing the Hmac.Sha256 functions correctly? 
function getSignatureKey(key, dateStamp, regionName, serviceName) {

   var hs = Crypto.HmacSHA256;
   var kSigning = hs(hs(hs(hs(""AWS4"" + YourSecretAccessKey,dateStamp),regionName),serviceName),""aws4_request"");

   return kSigning;
}

I get this signing_key, fwiw:
//signing_key: 582cf07cc7ea5cd0a5c0a1f6422cf32eef38fdae7a4073d17ba0195cbf5c85ce

The example doesn't show the signing_key result, so I can't know if the signing_key is correct. What I know is the resulting Signature is not like in the example result.
The example url result will give ""Request has expired"", which is expected, but when using a current date, I get SignatureDoesNotMatch.
Something is wrong with the Signature generation.
Thanks for any help!
","","347","<rest><amazon-web-services><amazon-s3><hmac><sha256>","0","","0","2015-07-07 15:45:15","","2","","2920409","","2015-07-07 15:45:15","2015-07-07 13:29:13",""
"19605453","How to run the sha2.c of polarssl","I was trying to use the sha2.c file from polarssl at this link,
https://polarssl.org/sha-256-source-code
I am actually quite a newbie to this, but I was able to get this on Eclipse and when I tried to build it, it gives the error
c:/mingw/x86_64-w64-mingw32/lib/../lib/libmingw32.a(lib64_libmingw32_a-crt0_c.o):crt0_c.c:(.text+0x3d): undefined reference to `WinMain'
do I have to pass some kind of data in the arguments? how can I find out how to use it?
","The problem is not in the source file you downloaded, but the fact that you need to make 'an application'. Eclipse cannot compile 'just some functionality' unless you instruct it to build a library. You will have to provide a WinMain / main function so that Windows knows what to do when you start the application.
That is what the compiler is complaining about, there is no main() functions it can compile into the application!
Easiest way to start is to start a Generic C Application in Eclipse and then add this sha2 source file and header to that project. The Generic C application project already has a main function you can work from..
","347","<sha256>","1","1","1","2013-11-09 09:36:19","19874492","1","","","","","2013-09-30 04:19:08",""
"38910891","changing a function to use SHA256 hashing rather than SHA1 hashing","Can someone kindly help me with the following question
I have the following function which works fine
function Decrypt-String($Encrypted, $Passphrase, $salt, $init) 
{ 
    if($Encrypted -is [string]){ 
        $Encrypted = [Convert]::FromBase64String($Encrypted) 
       } 

    $r = new-Object System.Security.Cryptography.RijndaelManaged 
    $pass = [Text.Encoding]::UTF8.GetBytes($Passphrase) 
    $salt = [Text.Encoding]::UTF8.GetBytes($salt) 
    $r.Key = (new-Object Security.Cryptography.PasswordDeriveBytes $pass, $salt, ""SHA1"", 5).GetBytes(32) #256/8 
    $r.IV = (new-Object Security.Cryptography.SHA1Managed).ComputeHash( [Text.Encoding]::UTF8.GetBytes($init) )[0..15] 

    $d = $r.CreateDecryptor() 
    $ms = new-Object IO.MemoryStream @(,$Encrypted) 
    $cs = new-Object Security.Cryptography.CryptoStream $ms,$d,""Read"" 
    $sr = new-Object IO.StreamReader $cs 
    Write-Output $sr.ReadToEnd() 
    $sr.Close() 
    $cs.Close() 
    $ms.Close() 
    $r.Clear() 
}

There are two place in the code which reference SHA1
I want to switch to SHA256, although both the .NET classed above support SHA256 it throws the following error is I single change the bold text from SHA1 to SHA256
Exception calling ""ReadToEnd"" with ""0"" argument(s): ""Padding is invalid and cannot be removed.""
At J:\UTemp\063146ee-175d-4a33-b485-7c6dd0e309f6.ps1:28 char:5
+     Write-Output $sr.ReadToEnd()
+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException
    + FullyQualifiedErrorId : CryptographicException

Exception calling ""Close"" with ""0"" argument(s): ""Padding is invalid and cannot be removed.""
At J:\UTemp\063146ee-175d-4a33-b485-7c6dd0e309f6.ps1:29 char:5
+     $sr.Close()
+     ~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException
    + FullyQualifiedErrorId : CryptographicException

Any assistance most welcome
Ernie
","","346","<.net><powershell><sha1><sha256><sha2>","0","","0","2016-08-12 06:45:43","","5","","311712","","2016-08-12 06:45:43","2016-08-12 05:56:18",""
"32625570","Verifying Python generated SHA256 strings using Ruby","I'm converting a Python project to Rails, both of them uses the same database and I'm trying to use Ruby to verify the passwords that are saved using Python library called passlib.hash.sha256_crypt. I want to use Ruby to verify the user input whether it is the valid password compared to the saved password using any Ruby library but couldn't find any suitable gem for that.
Example password saved in SHA256 using Python Passlib library:
$5$rounds=110000$4QB3mR7z8SVQwVDt$1jT2mdn9XHRD.O8gsCJXoUTDWJSLrY09uD8KZp78ou6
which is password
The gems that I've found are:

Ruby Digest library
: not generating in the format of $5$.....
Unix Crypt : generate digests in relevant format but unable to verify the result
Gibberish : only advance in AES mode decryption, not generating in the format of $5$.....

Unix Crypt is the most relevant solution but the generated digest for the string ""password"" is different from the Python generated. I tried to remove the rounds from the saved digest and verify it but it failed, I think it's because they are using different rounds to generate the digest.
[7] pry(main)> UnixCrypt::SHA256.build(""password"")
=> ""$5$qbpSpYyYoTCr0q4G$/jyjVRgg3Y4vQj39f9OWwUQhKOh70bTB50jH7WfsZl2""
[10] pry(main)> UnixCrypt.valid?(""password"", ""$5$rounds=110000$4QB3mR7z8SVQwVDt$1jT2mdn9XHRD.O8gsCJXoUTDWJSLrY09uD8KZp78ou6"")
=> false
[11] pry(main)> UnixCrypt.valid?(""password"", ""$5$4QB3mR7z8SVQwVDt$1jT2mdn9XHRD.O8gsCJXoUTDWJSLrY09uD8KZp78ou6"")
=> false

Based on @Niel Slater's comment, I used UnixCrypt's build to rehash ""password"", and it's still different from the Python hashed string.
[81] pry(main)> UnixCrypt::SHA256.build(""password"", ""4QB3mR7z8SVQwVDt"", 110000)
=> ""$5$rounds=110000$4QB3mR7z8SVQwVDt$hF/KhMEITeydgv58fXf2brManFYwhhy.dMqGnrkrLb1""

Any workaround on this, or is there any simpler method to verify the user password in Ruby? I'm not familiar with encryption, any detailed explanation on rounds and digests are welcomed too.
","Your problem is that you think $5$rounds=110000$4QB3mR7z8SVQwVDt$1jT2mdn9XHRD.O8gsCJXoUTDWJSLrY09uD8KZp78ou6 is a hash of password for some reason. It is not.
In Python:
hash = sha256_crypt.encrypt(""password"", rounds=110000, salt='4QB3mR7z8SVQwVDt')
# '$5$rounds=110000$4QB3mR7z8SVQwVDt$hF/KhMEITeydgv58fXf2brManFYwhhy.dMqGnrkrLb1'

In Ruby:
UnixCrypt::SHA256.build(""password"",'4QB3mR7z8SVQwVDt', 110000 )
# ""$5$rounds=110000$4QB3mR7z8SVQwVDt$hF/KhMEITeydgv58fXf2brManFYwhhy.dMqGnrkrLb1""

Also:
UnixCrypt.valid?(""password"", 
   ""$5$rounds=110000$4QB3mR7z8SVQwVDt$hF/KhMEITeydgv58fXf2brManFYwhhy.dMqGnrkrLb1"")
# => true

So the Ruby gem unix-crypt is the simplest choice for your problem, as it matches the Python library passlib with the least effort (no need to figure out the details, just use the same params and string values throughout).
","344","<python><ruby-on-rails><ruby><sha256>","1","0","1","2015-09-17 09:47:57","32627023","1","","2923253","","2015-09-17 09:31:38","2015-09-17 08:18:32",""
"54030949","How to specify HMAC key as hexadecimal in Java","I'm able to successfully get a HMAC SHA256 using the following code:
 public static String getHac(String dataUno,  String keyUno) throws InvalidKeyException, NoSuchAlgorithmException, UnsupportedEncodingException {

         SecretKey secretKey = null;    
         Mac mac = Mac.getInstance(""HMACSHA256"");

         byte[] keyBytes = keyUno.getBytes(""UTF-8"");     

         secretKey = new SecretKeySpec(keyBytes,mac.getAlgorithm());

         mac.init(secretKey);   

         byte[] text = dataUno.getBytes(""UTF-8"");

         System.out.println(""Hex encode: "" + Hex.encode(keyUno.getBytes()));

         byte[] encodedText = mac.doFinal(text);    
         return new String(Base64.encode(encodedText)).trim();

    }

which yields:
HMAC: 9rH0svSCPHdbc6qUhco+nlkt2O7HE0rThV4M9Hbv5aY=
However, i would like getting this:
HMAC:eVXBY4RZmFQcOHHZ5FMRjDLOJ8vCuVGTjy7cHN7pqfo=
I tried an online tool and it appears that the difference between my code and online tool is that I am working with a text in the key type.
Test values:
String data = ""5515071604000fAIkwJtkeiA:APA91bH_Pb5xB2lrmKWUst5xRuJ3joVE-sb9KoT0zXZuupIEfdHjii-cODj-JMnjyy7hFJUbIRAre9o2yaCU43KaFDmxKlhJhE36Dw0bZ2VntDUn_Zd1EJBuSyCYiUtmmkHfRvRy3hIb"";
String key = ""fc67bb2ee0648a72317dcc42f232fc24f3964a9ebac0dfab6cf47521e121dc6e"";
getHac(""5515071604000fAIkwJtkeiA:APA91bH_Pb5xB2lrmKWUst5xRuJ3joVE-sb9KoT0zXZuupIEfdHjii-cODj-JMnjyy7hFJUbIRAre9o2yaCU43KaFDmxKlhJhE36Dw0bZ2VntDUn_Zd1EJBuSyCYiUtmmkHfRvRy3hIb"", ""fc67bb2ee0648a72317dcc42f232fc24f3964a9ebac0dfab6cf47521e121dc6e""));
the execution of my method return
9rH0svSCPHdbc6qUhco+nlkt2O7HE0rThV4M9Hbv5aY=
(the online returns the same value with key type text selected)
and i expected 
eVXBY4RZmFQcOHHZ5FMRjDLOJ8vCuVGTjy7cHN7pqfo=
(the online returns the same value with key type hex selected)
","Assuming that you are using Apache Commons Codec 1.11, use the following:
byte[] keyBytes = Hex.decodeHex(keyUno);

getHac Method
You code just slightly modified looks like this then:
public static String getHac(String dataUno,  String keyUno) 
        throws InvalidKeyException, NoSuchAlgorithmException, UnsupportedEncodingException, DecoderException {

    SecretKey secretKey;
    Mac mac = Mac.getInstance(""HMACSHA256"");

    byte[] keyBytes = Hex.decodeHex(keyUno);

    secretKey = new SecretKeySpec(keyBytes, mac.getAlgorithm());

    mac.init(secretKey);

    byte[] text = dataUno.getBytes(""UTF-8"");

    byte[] encodedText = mac.doFinal(text);
    return new String(Base64.encodeBase64(encodedText)).trim();
}

Test
This Java method gives then expected result:
eVXBY4RZmFQcOHHZ5FMRjDLOJ8vCuVGTjy7cHN7pqfo=

","344","<java><encryption><key><sha256><hmacsha1>","0","2","1","2019-01-04 07:38:43","54031252","1","","8908738","","2019-01-04 00:21:50","2019-01-03 22:57:47",""
"32233280","NodeJs check the salt of a sha-256 encrypted string","My client is sending me a SHA-256 encrypted string. And also it is having a  salt. Myself and my client both are knowing the above salt. I need to check weather the string is having correct salt or not. 
","","343","<node.js><sails.js><salt><bcrypt><sha256>","1","","0","2015-08-26 17:44:44","","9","","","","","2015-08-26 17:44:44",""
"39275323","Wrong HMAC using PHP 5.0.4","I'm trying to enable HMAC Hashing (SHA256) with PHP 5.0.4 and using phpseclib (to my knowledge in this case phpseclib relies on a native PHP spec), the sample code I'm using it's pretty simple:

    include('Crypt/Hash.php');

    $hash = new Crypt_Hash('sha256');
    $hash->setKey('abcdefg');
    echo bin2hex($hash->hash('something'));

it generates an HMAC with this string:
e678e33c727ddf7172d3521cf9c0c2a15b66e03eb96d77795fa4adb338dc24a9
But apparently, this string is invalid because doing the same with this online tools:
http://www.freeformatter.com/hmac-generator.html
http://beautifytools.com/hmac-generator.php
http://www.jetcityorange.com/hmac/
I get this string:
9a43ff294bdfed399e2d5a3d739a4efb7eccc23269b80b3f0d855937d35ae06f
What am I doing wrong?
Note: SHA1 encoding works perfectly.
Thanks in advance.
","It was a problem related to float to int conversions on 32-bit Linux pre-PHP 5.3. Developers of phpseclib fixed the issue on version 1.0.4 & 2.0.4
","343","<php><hash><sha256><hmac><phpseclib>","0","1","1","2016-10-13 06:41:11","39890700","10","","","","","2016-09-01 15:16:26",""
"13778653","Ruby to PHP AES","Im trying to convert some ruby code that encrypts data with AES 265 in CBC mode to php but its not working, the converted php code returns a null string. Here is what i have:
Ruby:
require 'openssl'

module AESCrypt
  def self.encrypt(message, password)
    Base64.encode64(self.encrypt_data(message.to_s.strip, self.key_digest(password), nil, ""AES-256-CBC""))
  end

  def self.decrypt(message, password)
    base64_decoded = Base64.decode64(message.to_s.strip)
    self.decrypt_data(base64_decoded, self.key_digest(password), nil, ""AES-256-CBC"")
  end

  def self.key_digest(password)
    OpenSSL::Digest::SHA256.new(password).digest
  end

def self.decrypt_data(encrypted_data, key, iv, cipher_type)
    aes = OpenSSL::Cipher::Cipher.new(cipher_type)
    aes.decrypt
    aes.key = key
    aes.iv = iv if iv != nil
    aes.update(encrypted_data) + aes.final  
  end

def self.encrypt_data(data, key, iv, cipher_type)
    aes = OpenSSL::Cipher::Cipher.new(cipher_type)
    aes.encrypt
    aes.key = key
    aes.iv = iv if iv != nil
    aes.update(data) + aes.final      
  end
end

And the php code:
echo base64_encode($encrypted_data = mcrypt_encrypt(MCRYPT_RIJNDAEL_128, hash('sha256', 'p4ssw0rd'), 'hey', MCRYPT_MODE_CBC));

","have a look at 
https://github.com/nirnanaaa/xlix/blob/master/xlix/lib/Xlix/Bundle/Crypto/Aes/TwoLevel.php 
I wrote this a while ago for my crypto functions based on a GIST I have found on the web
","343","<php><ruby><aes><sha256><cbc-mode>","2","2","1","2013-02-27 15:00:39","13778727","0","1","","","","2012-12-08 14:58:02",""
"35301560","How to set sha256 signature algorithm for soap signature in .Net","I created a PKCS12 certificate that is installed in my windows trust store. When I create a soap signature by using this certificate in .Net I get the signature algorithm as SHA1. Is it possible to change this algorithm for message signature as it is throwing error when processing the response.
","i have been researching a couple of days (5+), i havent been able to find a solution, i am using wse 3.0 and for that is pretty much imposible.
so if you are using wse 2.0 or 3.0, the answer is no, you cant change the inner cyrpto provider, or even subclass the securitytoken class and override the signatureformatter getter.
","341","<sha256>","1","0","1","2016-06-08 21:33:23","","0","","","","","2016-02-09 20:28:56",""
"11226043","Sha256 + salt algorithem in windows phone 7","I want to encrypt my userid and password using SHA256 algorithm and salt key for sending to the server through a xml. How can I achieve this ?
I did a sample code with SHA256 and pasted bleow. How I use salt key in this ?    
      void myBtn_Click(object sender, RoutedEventArgs e)
      {
        var sha = new  SHA256Managed();
        var bytes = System.Text.Encoding.UTF8.GetBytes(testPass.Text);
        byte[] resultHash = sha.ComputeHash(bytes);
        string sha256 = ConvertToString(resultHash);
      }

       public static string ConvertToString(byte[] buff)
       {
         string sbinary = """";

         for (int i = 0; i < buff.Length; i++)
         {
             //hex-formatted
            sbinary += buff[i].ToString(""X2"");
         }
         return (sbinary);
       }

","SHA is a hash algorithm and not an encryption algorithm. The password cannot be extracted from your result string. Are you sure you are taking the right approach? Would you care to explain the scenario a bit better?
","341","<windows-phone-7><encryption><salt><sha><sha256>","0","1","1","2012-06-27 12:25:59","","2","","","","","2012-06-27 12:19:43",""
"51193250","Are MD5, SHA-256, SHA-512 suitable for calculating hash values of large files?","Here is a function that shall calculate hash values for files. But I always get wrong hash codes from time to time.
string filePath = @""G:\TV\movie.ts""; // about 10 GByte
private void Test()
{

  for (int i = 0; i < 99; i++)
  {
    byte[] bytes;
    try
    {
      var SHA256 = System.Security.Cryptography.SHA256.Create();
      var MD5 = System.Security.Cryptography.MD5.Create();
      var SHA512 = System.Security.Cryptography.SHA512.Create();
      using (var stream = File.OpenRead(filePath))
      {
        stream.Position = 0;
        bytes = MD5.ComputeHash(stream);
        Debug.Print(i + "": "" + BitConverter.ToString(bytes).Replace(""-"", """"));

        stream.Position = 0;
        bytes = SHA256.ComputeHash(stream);
        Debug.Print(i + "": "" + BitConverter.ToString(bytes).Replace(""-"", """"));

        stream.Position = 0;
        bytes = SHA512.ComputeHash(stream);
        Debug.Print(i + "": "" + BitConverter.ToString(bytes).Replace(""-"", """"));
      }
      MD5.Dispose();
      SHA256.Dispose();
      SHA512.Dispose();
    }
    catch (IOException e)
    {
      Debug.Print(e.ToString());
    }
  }
}

Result for one large file (movie ~10GB).
For MD5 (short) and SHA256 (middle) I marked the deviations bold.
When you look at the SHA512 (long) results you'll see that from the 8x I performed the test, I got
4x1B04E14AD6A0D1CC9D131D37D92C90146C118655B50935033A67BC0F436E9CAC424B569CCDB392D12B477DA751F30CD677023D78A55AA3CC97F8F8CD9F941D97
3xF9A6C6C61579FF989F17FB78DD23F1A4B6290588002EE58FB2C9427C75DD35D4745D15DB868CFCC94A49C9227E6C058FB89E862E50E8A06C527FC8C72EDCAFC7
1x1A3050206C8F3E94FC918F140215ADF2A9F463EAF083D421F5AF3FC450A634E9DF04C62889C3F295D504DDE34014CEF4A908C01D26770E250311816F77826B23
That shows, that when it goes wrong, it often results in the same wrong hash.
So the question is, why do I get wrong results with every algorythm from time to time?
0: 920651841DF511BC45B51DABF76F08D8
0: ADA7EDB960A0EBB298E6BAB8FBF5E2C3D7D2E170B2C19B0B6432A469F2A398B7
0: 1B04E14AD6A0D1CC9D131D37D92C90146C118655B50935033A67BC0F436E9CAC424B569CCDB392D12B477DA751F30CD677023D78A55AA3CC97F8F8CD9F941D97  
1: 920651841DF511BC45B51DABF76F08D8
1: ADA7EDB960A0EBB298E6BAB8FBF5E2C3D7D2E170B2C19B0B6432A469F2A398B7
1: 1A3050206C8F3E94FC918F140215ADF2A9F463EAF083D421F5AF3FC450A634E9DF04C62889C3F295D504DDE34014CEF4A908C01D26770E250311816F77826B23  
2: 920651841DF511BC45B51DABF76F08D8
2: ADA7EDB960A0EBB298E6BAB8FBF5E2C3D7D2E170B2C19B0B6432A469F2A398B7
2: 1B04E14AD6A0D1CC9D131D37D92C90146C118655B50935033A67BC0F436E9CAC424B569CCDB392D12B477DA751F30CD677023D78A55AA3CC97F8F8CD9F941D97  
3: 944638B455C6C4DBF1B4149B16360C4E
3: ADA7EDB960A0EBB298E6BAB8FBF5E2C3D7D2E170B2C19B0B6432A469F2A398B7
3: F9A6C6C61579FF989F17FB78DD23F1A4B6290588002EE58FB2C9427C75DD35D4745D15DB868CFCC94A49C9227E6C058FB89E862E50E8A06C527FC8C72EDCAFC7  
4: 920651841DF511BC45B51DABF76F08D8
4: ADA7EDB960A0EBB298E6BAB8FBF5E2C3D7D2E170B2C19B0B6432A469F2A398B7
4: 1B04E14AD6A0D1CC9D131D37D92C90146C118655B50935033A67BC0F436E9CAC424B569CCDB392D12B477DA751F30CD677023D78A55AA3CC97F8F8CD9F941D97  
5: 920651841DF511BC45B51DABF76F08D8
5: 03DD7ADCA595F925E9226D1022D2FFB06F59710677E01472E4267E635DC4020A
5: F9A6C6C61579FF989F17FB78DD23F1A4B6290588002EE58FB2C9427C75DD35D4745D15DB868CFCC94A49C9227E6C058FB89E862E50E8A06C527FC8C72EDCAFC7  
6: 920651841DF511BC45B51DABF76F08D8
6: ADA7EDB960A0EBB298E6BAB8FBF5E2C3D7D2E170B2C19B0B6432A469F2A398B7
6: 1B04E14AD6A0D1CC9D131D37D92C90146C118655B50935033A67BC0F436E9CAC424B569CCDB392D12B477DA751F30CD677023D78A55AA3CC97F8F8CD9F941D97  
7: 945F30E57094D2725B727D69F7BE7F4C
7: ADA7EDB960A0EBB298E6BAB8FBF5E2C3D7D2E170B2C19B0B6432A469F2A398B7
7: F9A6C6C61579FF989F17FB78DD23F1A4B6290588002EE58FB2C9427C75DD35D4745D15DB868CFCC94A49C9227E6C058FB89E862E50E8A06C527FC8C72EDCAFC7
","It seems, as stated in some comments, that it was a hardware problem. After resetting the BIOS, it seems to work all right again.
","340","<c#><.net><md5><sha256><sha512>","-1","1","1","2018-07-05 19:59:40","","7","0","2141621","","2018-07-05 14:03:40","2018-07-05 13:58:52",""
"37899561","SHA-256 with salt verifying from Java in PHP","Users on my system are registered in Java application (source: https://github.com/madtomic/LogIt-1/tree/master/src/main/java/io/github/lucaseasedup/logit/security) and hashing password using SHA-256 with salt. I want now add login system on my WWW page. But I can't verify the passwords.
Example user:

Password: test 
Salt: oqhyqTbtEXYYRf8r9jJn 
Hash from JAVA:
adf6a822c860ad7dc39eb035be1e362ad72f4535eed9a41dc8f99a122d78f5ef

PHP test code:
$_POST['salt'] = ""oqhyqTbtEXYYRf8r9jJn"";
$_POST['hash'] = ""adf6a822c860ad7dc39eb035be1e362ad72f4535eed9a41dc8f99a122d78f5ef"";
$_POST['pass'] = ""test"";


echo(""<br>HASH_HMAC "".hash_hmac(""sha256"", $_POST['pass'], $_POST['salt']));

echo(""<br>HASH "".hash(""sha256"", $_POST['salt']. $_POST['pass']));

echo(""<br> HASH #2 "". hash('sha256', $_POST['salt'] . hash('sha256', $_POST['pass']) ));

echo('<br>Java hash: ' . $_POST['hash']);

Result:

HASH_HMAC cc3dcc320479034414506c4ad44fda205b4f5687ff988fa4316edb94d05364ff
HASH b7d8154812a95e0fad70533feb8b1c8b3a53e9efcff936eb5c308d481b6594e6
HASH #2 183d017d9169efbfd5f62ddfacd8d6ef631be287f17e9767fe3978bbc366444c
Java hash: adf6a822c860ad7dc39eb035be1e362ad72f4535eed9a41dc8f99a122d78f5ef

Anything from PHP match Java hash :( What I should do?
","I think you can just use the PHP hash function and concatenate your salt with the password.
$salt = 'oqhyqTbtEXYYRf8r9jJn';
$pass = 'test';
echo hash('sha256', $pass . $salt);

Output:

adf6a822c860ad7dc39eb035be1e362ad72f4535eed9a41dc8f99a122d78f5ef

Demo: https://eval.in/591374
","339","<java><php><hash><sha256>","0","1","1","2016-06-18 17:16:21","37899660","2","","794749","","2016-06-18 17:12:57","2016-06-18 17:05:31",""
"27751402","Progress Bar With SHA256 Hashing in ANSI C","For a project that I am working on right now, I was wondering how I could add a progress indicator to the Openssl SHA256 hashing function. I will be working with some large files (1-10+ GB) and would like to be able to see the progress completed versus left. I have implemented the Stack Overflow questions here and here, and have the SHA256 hash generating working correctly (it only lacks a progress indicator).
I am fairly new to C, so this will be a learning experience for me. I thought that I might be able to use fread or SHA256_Update somehow, but I am having trouble understanding exactly how I would get a response of how much of the file has been read. 

char _genSHA256Hash(char *path, char outputBuffer[65])
{
  FILE *file = fopen(path, ""rb"");
  if(!file) return -1;

  unsigned char hash[SHA256_DIGEST_LENGTH];
  SHA256_CTX sha256;
  SHA256_Init(&sha256);
  const int bufSize = 32768;
  char *buffer = malloc(bufSize);
  int bytesRead = 0;
  if(!buffer) return -1;
  while((bytesRead = fread(buffer, 1, bufSize, file)))
  {
      SHA256_Update(&sha256, buffer, bytesRead);
  }
  SHA256_Final(hash, &sha256);

  sha256_hash_string(hash, outputBuffer);

  //fclose(file);
  //free(buffer);

  return 0;
}

EDIT: I have added the sha256_hash_string function:
void sha256_hash_string (unsigned char hash[SHA256_DIGEST_LENGTH], char outputBuffer[65]) {
    int i = 0;

    for(i = 0; i < SHA256_DIGEST_LENGTH; i++)
    {
        sprintf(outputBuffer + (i * 2), ""%02x"", hash[i]);
    }

    outputBuffer[64] = 0;
}


Thank you,
Tim
","You already have information about how much of the file has been read, you just need to account for it:
int bytesRead = 0;
int totRead = 0;
while((bytesRead = fread(buffer, 1, bufSize, file))) {
    totRead += bytesRead;
    ...

All you need now is the total size of the file. You can get this with:
struct stat sb;
if (stat(path, &sb) == -1) {
    perror(""stat"");
    return 0;
}

totRead keeps a running counter; bytesRead is reset each time through the loop. Then, in your loop, totRead / sb.st_size represents the percentage of your hashing progress.
","339","<c><hash><sha256>","0","1","1","2015-01-03 22:13:17","27758146","1","","-1","","2017-05-23 12:28:27","2015-01-03 03:22:07",""
"43571729","Authenticate users using SHA256 in Mysql using asp.net","I have hashed the passwords using SHA256. I have generated a random salt generator which every time generates a random salt which is added up to the password, which then gets encrypted and is being stored in the database. Now I am trying to authenticate the users and I am not sure how to do that. Here is what I am doing:
public static String ByteArrayToHexString(byte[] ba)
    {
        System.Text.StringBuilder hex = new StringBuilder(ba.Length * 2);
        foreach (byte b in ba)
        {
            hex.AppendFormat(""{0:x2}"", b);
        }
        return hex.ToString();
    }

    public String CreateSalt(int size) // Function to generate a random salt 
    {
        var rng = new System.Security.Cryptography.RNGCryptoServiceProvider();
        var buff = new byte[size];
        rng.GetBytes(buff);
        return Convert.ToBase64String(buff);
    }

    public String GenerateSHA256Hash(String input, String salt) // Function to add user input and randomly generated salt
    {
        byte[] bytes = System.Text.Encoding.UTF8.GetBytes(input + salt);
        System.Security.Cryptography.SHA256Managed sha256hashstring = new System.Security.Cryptography.SHA256Managed();
        byte[] hash = sha256hashstring.ComputeHash(bytes);
        return ByteArrayToHexString(hash);
    }

I can store it successfully but now how can I authenticate the users?
Thanks in Advance...!!! :) 
","
You have hashed your passwords not encrypted.
You need also to save the salt in some place. if not you cannot authenticate.

After that, when user send their pass you can use the same function GenerateSHA256Hash() to check if user pass + salt return same hash like you have previously saved.
","335","<mysql><asp.net><authentication><encryption><sha256>","0","0","2","2017-04-23 19:10:57","43572335","1","","7878412","","2017-04-23 13:50:23","2017-04-23 13:22:23",""
"43571729","Authenticate users using SHA256 in Mysql using asp.net","I have hashed the passwords using SHA256. I have generated a random salt generator which every time generates a random salt which is added up to the password, which then gets encrypted and is being stored in the database. Now I am trying to authenticate the users and I am not sure how to do that. Here is what I am doing:
public static String ByteArrayToHexString(byte[] ba)
    {
        System.Text.StringBuilder hex = new StringBuilder(ba.Length * 2);
        foreach (byte b in ba)
        {
            hex.AppendFormat(""{0:x2}"", b);
        }
        return hex.ToString();
    }

    public String CreateSalt(int size) // Function to generate a random salt 
    {
        var rng = new System.Security.Cryptography.RNGCryptoServiceProvider();
        var buff = new byte[size];
        rng.GetBytes(buff);
        return Convert.ToBase64String(buff);
    }

    public String GenerateSHA256Hash(String input, String salt) // Function to add user input and randomly generated salt
    {
        byte[] bytes = System.Text.Encoding.UTF8.GetBytes(input + salt);
        System.Security.Cryptography.SHA256Managed sha256hashstring = new System.Security.Cryptography.SHA256Managed();
        byte[] hash = sha256hashstring.ComputeHash(bytes);
        return ByteArrayToHexString(hash);
    }

I can store it successfully but now how can I authenticate the users?
Thanks in Advance...!!! :) 
","To authenticate users, you must store the salt with the user record. You do not need to encrypt the salt. 
When someone tries to log in, you retrieve both the salt and the hash for the user. You use the salt to hash the attempted password and you compare this new hash with the hash you had saved for the user. If you combine the same salt with the same input in the same way as the original, and use the same hashing algorithm, you'll end up with the same hash, and so you can authenticate users by comparing the hashes.
I strongly urge you, though, to avoid writing this code yourself at all. It's just so easy to write authentication code that seems to work correctly — let's good attempts in, and seems to keep bad attempts out —  but is subtly flawed in ways such that you come back a year later and find out you were hacked six months ago. 
Instead, rely as much as possible on whatever solution is provided for your platform. If there isn't one availalbe, find a pre-existing library. Security and authentication code is one thing you want to leave to experts.
","335","<mysql><asp.net><authentication><encryption><sha256>","0","1","2","2017-04-23 19:10:57","43572335","1","","7878412","","2017-04-23 13:50:23","2017-04-23 13:22:23",""
"53080807","sha256 hash collisions between two strings","I have to find two string which are passed in URL as parameter 'str1' and 'str2' and satisfies these conditions ?
if($_GET['str1'] !== $_GET['str2'] and $_GET['str1'] and $_GET['str2']) 
{
    $hash1 = hash('sha256', $salt . $_GET['str1']);
    $hash2 = hash('sha256', $salt . $_GET['str2']);

    if($hash1 === $hash2) {
       #print str1 and str2
    }

}

How will I find out?
","The only possible solution to break that is to make the hash function not work.
Hash function expects string input (or typecast to string), so making input as array will break the hash and both return false/not working.
Meaning both is strictly the same.  
It's a cheat, but it satisfies all parts of the code as it currently is.
<?php
$_GET['str1'] = [""a""];
$_GET['str2'] = [""b""];
$salt = ""aaabdnelnFnekknfn"";

if($_GET['str1'] !== $_GET['str2'] and $_GET['str1'] and $_GET['str2']) 
{
    $hash1 = hash('sha256', $salt . $_GET['str1']);
    $hash2 = hash('sha256', $salt . $_GET['str2']);

    if($hash1 === $hash2) {
       var_dump($_GET['str1'],$_GET['str2']);
    }

}

https://3v4l.org/SPYKb
","334","<php><encryption><hash><sha256><sha>","2","5","1","2018-10-31 10:29:56","53081240","8","1","","","","2018-10-31 10:04:51",""
"44920567","SHA-256 with salt for hashing produces different values for signature in java","We have to build a signature string hashed using SHA-256 with random salt and using 10000 iterations. However, when I run the below code with salt, output hash value is not matching at all for the same input string. If I run the code without the salt, hashed value matches. Can someone point out the right way to add a random salt to the SHA-256 digest and get the firstValue/secondValue same below.
import java.security.MessageDigest;
import java.security.SecureRandom;
import org.springframework.security.crypto.codec.Hex;

public class someTester{

    public static void main(String[] args) {
        String signatureInput = ""someStringWhichisSensitive"";
        String firstSignValue = getSignature(signatureInput);
        String secondSignValue = getSignature(signatureInput);
        System.out.println(""firstSignValue=""+firstSignValue);
        System.out.println(""secondSignValue=""+secondSignValue);
    }

    private static String getSignature(String signatureInput){
        MessageDigest md;
        String signatureValue = null;
        try {
            // Create a random salt
            SecureRandom sr = new SecureRandom();
            byte[] bSalt = new byte[8];
            sr.nextBytes(bSalt);
            md = MessageDigest.getInstance(""SHA-256"");
//          digest.update(bSalt);

            byte[] bDigest = md.digest(signatureInput.getBytes());
            // Iterate through 10000 times
            for (int i = 0; i < 10000; i++) {
                bDigest = md.digest(bDigest);
            }
            signatureValue = new String(Hex.encode(bDigest));
        } catch (Exception e) {
            System.out.println(""Exception while calculating SHA-256 digest value""+e);
        }
        return signatureValue;
    }
}

","","334","<sha256>","1","","0","2017-07-31 11:07:02","","0","3","7725621","","2017-07-31 11:07:02","2017-07-05 08:14:46",""
"44097864","How to verify locally built docker images?","In this question it turned out, that I cannot use the sha256 mechanism in the FROM line in a Dockerfile to verify I am using the correct locally built non-DockerHub image in another derived image.
Is there another way to verify locally built Docker images? Some best practice maybe?
","From docs:

By default, docker pull pulls images from Docker Hub. It is also
  possible to manually specify the path of a registry to pull from

You can start a private docker registry on you localhost with the following command:
docker run -d -p 5000:5000 --restart=always --name registry registry:2

Say your image name isubuntu Then push image to that specific registry with:
docker push localhost:5000/ubuntu

In your Dockerfile you can use:
From localhost:5000/ubuntu

","334","<docker><checksum><sha256><docker-image>","0","1","1","2017-05-22 14:00:51","","1","","-1","","2017-05-23 11:47:29","2017-05-21 14:10:04",""
"26981140","JavaFX table view don't display scrambled strings","My problem is that my JavaFX TableView cannot display my String that is crypted with SHA-256. It works with a normal string. Here my code for the my scramble method.
private String scrambleName(String name, String surname)
{
MessageDigest messageDigest;
String cryptedName;

StringBuilder builder = new StringBuilder();
builder.append(name);
builder.append("" "");
builder.append(surname);

String fullName = builder.toString();

try
{
    messageDigest = MessageDigest.getInstance(""SHA-256"");
    messageDigest.update(fullName.getBytes());
    cryptedName = new String(messageDigest.digest());
    return cryptedName;
} catch (NoSuchAlgorithmException ex)
{
    Logger.getLogger(Scrambler.class.getName()).log(Level.SEVERE, null, ex);
}
return null;
}

This method returns a string for my scrambled vote object.
public class ScrambledVote
{
private int key;
private String scrambledName;
private int age;
private String party;

public ScrambledVote(int key, String scrambledName, int age, String party)
{
this.key = key;
this.scrambledName = scrambledName;
this.age = age;
this.party = party;
}
//Getter Setter

I load the data from a file. The command line output works fine. But the TableView throws an exception.
Exception in thread ""JavaFX Application Thread"" java.lang.ArrayIndexOutOfBoundsException: 0
at com.sun.javafx.font.directwrite.DWGlyphLayout.getIndices(DWGlyphLayout.java:198)
at com.sun.javafx.font.directwrite.DWGlyphLayout.renderShape(DWGlyphLayout.java:401)
at com.sun.javafx.font.directwrite.DWGlyphLayout.layout(DWGlyphLayout.java:154)
at com.sun.javafx.text.PrismTextLayout.shape(PrismTextLayout.java:832)
at com.sun.javafx.text.PrismTextLayout.layout(PrismTextLayout.java:1062)
at com.sun.javafx.text.PrismTextLayout.ensureLayout(PrismTextLayout.java:221)
at com.sun.javafx.text.PrismTextLayout.getBounds(PrismTextLayout.java:244)
at com.sun.javafx.scene.control.skin.Utils.computeTextHeight(Utils.java:129)
at com.sun.javafx.scene.control.skin.LabeledSkinBase.computePrefHeight(LabeledSkinBase.java:832)
at javafx.scene.control.Control.computePrefHeight(Control.java:543)
at javafx.scene.Parent.prefHeight(Parent.java:918)
at javafx.scene.layout.Region.prefHeight(Region.java:1438)
at com.sun.javafx.scene.control.skin.TableRowSkinBase.computePrefHeight(TableRowSkinBase.java:544)
at javafx.scene.control.Control.computePrefHeight(Control.java:543)
at javafx.scene.Parent.prefHeight(Parent.java:924)
at javafx.scene.layout.Region.prefHeight(Region.java:1438)
at com.sun.javafx.scene.control.skin.VirtualFlow.resizeCellSize(VirtualFlow.java:1782)
at com.sun.javafx.scene.control.skin.VirtualFlow.addTrailingCells(VirtualFlow.java:1212)
at com.sun.javafx.scene.control.skin.VirtualFlow.layoutChildren(VirtualFlow.java:1102)
at javafx.scene.Parent.layout(Parent.java:1076)
at javafx.scene.Parent.layout(Parent.java:1082)
at javafx.scene.Parent.layout(Parent.java:1082)
at javafx.scene.Scene.doLayoutPass(Scene.java:576)
at javafx.scene.Scene$ScenePulseListener.pulse(Scene.java:2386)
at com.sun.javafx.tk.Toolkit$3.run(Toolkit.java:321)
at com.sun.javafx.tk.Toolkit$3.run(Toolkit.java:319)
at java.security.AccessController.doPrivileged(Native Method)
at com.sun.javafx.tk.Toolkit.runPulse(Toolkit.java:319)
at com.sun.javafx.tk.Toolkit.firePulse(Toolkit.java:348)
at com.sun.javafx.tk.quantum.QuantumToolkit.pulse(QuantumToolkit.java:479)
at com.sun.javafx.tk.quantum.QuantumToolkit.pulse(QuantumToolkit.java:460)
at com.sun.javafx.tk.quantum.QuantumToolkit$13.run(QuantumToolkit.java:327)
at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:95)
at com.sun.glass.ui.win.WinApplication._runLoop(Native Method)
at com.sun.glass.ui.win.WinApplication.access$300(WinApplication.java:39)
at com.sun.glass.ui.win.WinApplication$4$1.run(WinApplication.java:112)
at java.lang.Thread.run(Thread.java:745)

How can my TableView display this kind of scrambled String?
@FXML
protected void loadFile()
{
allScrambledVotes.clear();
HashTable hashTable = new HashTable(txtPath.getText());
LinkList[] allVotes = hashTable.getArray();
Scrambler scrambler = new Scrambler();
int k = 0;
for (LinkList vote : allVotes)
{
    for (int j = 0; j < vote.getSize(); j++)
    {
    Vote v = vote.findVote(j);
    scrambler.put(k, v);
    allScrambledVotes.add(scrambler.get(k));
    System.out.println(allScrambledVotes.get(k));
    k++;
    }
}
table.setItems(allScrambledVotes);
System.out.println(""Hello World"");
} 

I forget my loadFile method. I load the data from a hashtable with my own functions. The error occurs after the Hello World sysout.
","The digest() method returns an array of bytes: these are not the ascii values of the string representation of the digest. You're getting the error (I think) because JavaFX is unable to render a character for some of the byte values you have.
Instead of
cryptedName = new String(messageDigest.digest());
return cryptedName;

try something along the lines of
StringBuilder cryptedName = new StringBuilder();
for (byte b : messageDigest.digest()) {
    cryptedName.append(String.format(""%02x"", b));
}
return cryptedName.toString();

Here is a complete example:
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import javafx.application.Application;
import javafx.beans.binding.StringBinding;
import javafx.beans.property.ReadOnlyStringWrapper;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.stage.Stage;
;

public class TableViewSample extends Application {

    private final TableView<Person> table = new TableView<>();
    private final ObservableList<Person> data =
        FXCollections.observableArrayList(
            new Person(""Jacob"", ""Smith"", ""jacob.smith@example.com""),
            new Person(""Isabella"", ""Johnson"", ""isabella.johnson@example.com""),
            new Person(""Ethan"", ""Williams"", ""ethan.williams@example.com""),
            new Person(""Emma"", ""Jones"", ""emma.jones@example.com""),
            new Person(""Michael"", ""Brown"", ""michael.brown@example.com"")
        );

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage stage) {
        Scene scene = new Scene(new Group());
        stage.setTitle(""Table View Sample"");
        stage.setWidth(450);
        stage.setHeight(500);

        final Label label = new Label(""Address Book"");
        label.setFont(new Font(""Arial"", 20));

        table.setEditable(true);


        TableColumn<Person, String> firstNameCol = new TableColumn<>(""First Name"");
        firstNameCol.setMinWidth(100);
        firstNameCol.setCellValueFactory(
                new PropertyValueFactory<>(""firstName""));

        TableColumn<Person, String> lastNameCol = new TableColumn<>(""Last Name"");
        lastNameCol.setMinWidth(100);
        lastNameCol.setCellValueFactory(
                new PropertyValueFactory<>(""lastName""));

        TableColumn<Person, String> emailCol = new TableColumn<>(""Email"");
        emailCol.setMinWidth(200);
        emailCol.setCellValueFactory(
                new PropertyValueFactory<>(""email""));

        TableColumn<Person, String> digestCol = new TableColumn<>(""Digest"");
        digestCol.setMinWidth(200);
        digestCol.setCellValueFactory(
                new PropertyValueFactory<>(""digestedName""));

        table.setItems(data);
        table.getColumns().addAll(firstNameCol, lastNameCol, emailCol, digestCol);

        final VBox vbox = new VBox();
        vbox.setSpacing(5);
        vbox.setPadding(new Insets(10, 0, 0, 10));
        vbox.getChildren().addAll(label, table);

        ((Group) scene.getRoot()).getChildren().addAll(vbox);

        stage.setScene(scene);
        stage.show();
    }

    public static class Person {

        private final SimpleStringProperty firstName;
        private final SimpleStringProperty lastName;
        private final SimpleStringProperty email;

        private final MessageDigest digest ;    

        private final ReadOnlyStringWrapper digestedName ;

        private Person(String fName, String lName, String email) {
            this.firstName = new SimpleStringProperty(fName);
            this.lastName = new SimpleStringProperty(lName);
            this.email = new SimpleStringProperty(email);
            try {
                digest = MessageDigest.getInstance(""SHA-256"");
            } catch (NoSuchAlgorithmException e) {
                throw new Error(e);
            }

            this.digestedName = new ReadOnlyStringWrapper();
            digestedName.bind(new StringBinding() {
                {
                    bind(firstName, lastName);
                }
                @Override
                public String computeValue() {
                    String fullName = getFirstName() + "" "" + getLastName();
                    return scrambleName(fullName);
                }
            });
        }

        private String scrambleName(String fullName) {
            digest.update(fullName.getBytes());
            StringBuilder result = new StringBuilder();
            for (byte b : digest.digest()) {
                result.append(String.format(""%02x"", b));
            }
            return result.toString();
        }

        public String getFirstName() {
            return firstName.get();
        }

        public void setFirstName(String fName) {
            firstName.set(fName);
        }

        public String getLastName() {
            return lastName.get();
        }

        public void setLastName(String fName) {
            lastName.set(fName);
        }

        public String getEmail() {
            return email.get();
        }

        public void setEmail(String fName) {
            email.set(fName);
        }

        public String getDigestedName() {
            return digestedName.get();
        }
    }
} 

","333","<java><javafx><tableview><sha256><tablecolumn>","0","0","1","2014-11-17 22:02:30","26982004","0","3","4262710","","2014-11-17 21:24:01","2014-11-17 20:15:41",""
"13303986","Registered User password from DB and entered password during login do not match","I have registered a new user and saved the username, password & salt in the DB using the following hashing method:
    if(isset($_POST['register']))
    {
    $password = $_POST['password']

    function sanitize($data)
    {
        $data=trim($data);
        $data=htmlspecialchars($data);
        $data=mysql_real_escape_string($data);
        return $data;
    }

    $password = sanitize($password);

    function createSalt()
    {
        $salt = bin2hex(mcrypt_create_iv(32,MYCRYPT_DEV_URANDOM));
        $hash = hash(""sha256"", $salt);
        $final = $salt.$hash;
        return $final;
    }

    $hashedPassword = hash(""sha256"", $password);
    $salt = createSalt();
    $hashedPassword = hash(""sha256"", $hashedPassword.$salt);

    $query = sprintf(""INSERT INTO users(username, password, salt) VALUES('%s','%s','%s')"",$username, $hashedPassword, $salt);
}

And Later while trying the login.php, I am entering the same password which I saved during registration and using the below code to check if the entered password is the same as the one in the DB
if(isset($_POST['login']]))
{
            $password = $_POST['password']

    function sanitize($data)
    {
        $data=trim($data);
        $data=htmlspecialchars($data);
        $data=mysql_real_escape_string($data);
        return $data;
    }

    function validateUser()
    {
        session_regenerate_id (); //this is a security measure
        $_SESSION['valid'] = 1;
        $_SESSION['username'] = $username;
    }

    $password = sanitize($password);

    $query = sprintf(""SELECT * FROM users WHERE username = '%s'"",$username);
    $sql = mysql_query($query);
    $count = mysql_num_rows($sql);

    $row = mysql_fetch_array($sql);

    if($count<1)
    {
        echo $count;
        unset($_POST['login']);
        header(""location:login.php"");
        exit;
    }

    $hash = hash(""sha256"", $password);
    $salt = $row['salt'];
    $hash = hash(""sha256"",$hash.$salt);

    echo $hash.""<br />"".$row['password'].""<br /><br />"";

    if($hash != $row['password'])
    {
        unset($_POST['login']);
        header(""location:login.php"");
        exit;   
    }
    else
    {
        validateUser();
        unset($_POST['login']);
        header(""location:index.php"");
        exit;   
    }
}

These passwords are not getting matched.
Kindly let me know what's wrong in this code.
","There is nothing wrong with your code.
the salt value stored in the database is truncated because the varchar value is low increase the varchar value of your salt column to 200-300 something and than try this.. it will run fine.
I facepalmed when I found out this was screwing the result..
Dins
","333","<php><hash><sha256>","0","0","2","2012-11-09 08:37:29","13304574","2","","1693142","","2012-11-09 08:31:36","2012-11-09 07:36:30",""
"13303986","Registered User password from DB and entered password during login do not match","I have registered a new user and saved the username, password & salt in the DB using the following hashing method:
    if(isset($_POST['register']))
    {
    $password = $_POST['password']

    function sanitize($data)
    {
        $data=trim($data);
        $data=htmlspecialchars($data);
        $data=mysql_real_escape_string($data);
        return $data;
    }

    $password = sanitize($password);

    function createSalt()
    {
        $salt = bin2hex(mcrypt_create_iv(32,MYCRYPT_DEV_URANDOM));
        $hash = hash(""sha256"", $salt);
        $final = $salt.$hash;
        return $final;
    }

    $hashedPassword = hash(""sha256"", $password);
    $salt = createSalt();
    $hashedPassword = hash(""sha256"", $hashedPassword.$salt);

    $query = sprintf(""INSERT INTO users(username, password, salt) VALUES('%s','%s','%s')"",$username, $hashedPassword, $salt);
}

And Later while trying the login.php, I am entering the same password which I saved during registration and using the below code to check if the entered password is the same as the one in the DB
if(isset($_POST['login']]))
{
            $password = $_POST['password']

    function sanitize($data)
    {
        $data=trim($data);
        $data=htmlspecialchars($data);
        $data=mysql_real_escape_string($data);
        return $data;
    }

    function validateUser()
    {
        session_regenerate_id (); //this is a security measure
        $_SESSION['valid'] = 1;
        $_SESSION['username'] = $username;
    }

    $password = sanitize($password);

    $query = sprintf(""SELECT * FROM users WHERE username = '%s'"",$username);
    $sql = mysql_query($query);
    $count = mysql_num_rows($sql);

    $row = mysql_fetch_array($sql);

    if($count<1)
    {
        echo $count;
        unset($_POST['login']);
        header(""location:login.php"");
        exit;
    }

    $hash = hash(""sha256"", $password);
    $salt = $row['salt'];
    $hash = hash(""sha256"",$hash.$salt);

    echo $hash.""<br />"".$row['password'].""<br /><br />"";

    if($hash != $row['password'])
    {
        unset($_POST['login']);
        header(""location:login.php"");
        exit;   
    }
    else
    {
        validateUser();
        unset($_POST['login']);
        header(""location:index.php"");
        exit;   
    }
}

These passwords are not getting matched.
Kindly let me know what's wrong in this code.
","Actually i didn't see why this should not work, the code you have shown, should produce the same value, maybe you could check, whether the salt you read from the database is really the same as you wrote to the database.
Nevertheless i would not engourage to go further on this route, there are quite a lot of problems here.

First of all, SHA-256 is not a good choice to hash passwords, instead use a slow key-derivation function like BCrypt.
You should not escape input data without need, and if you need to escape them, you should do it only for the specific target system (htmlspecialchars and mysql_real_escape_string make no sense if you are going to calculate a hash anyway).
To create a salt, you use the random source, that is good. Using a hash afterwards creating the salt, will in no way make the salt more random.
There is no need to have two separate fields for password and salt in the database. Php's crypt() function will create a hash value, that already contains the salt.

I would invite you to read this tutorial about hashing passwords, you will find a PHP example too, and i would recommend to use the phpass library.
","333","<php><hash><sha256>","0","0","2","2012-11-09 08:37:29","13304574","2","","1693142","","2012-11-09 08:31:36","2012-11-09 07:36:30",""
"49452793","PKCS7 and ""NONEwithRSA"" signature","I need to compute some data signature, using un-encapsulated pkcs7 with sha256 and RSA.
No problem with raw content, using :
public byte[] signRawContent(final byte[] content)
    throws CMSException, IOException, OperatorCreationException, CertificateEncodingException {

    // Create generator of pkcs7-signature message
    CMSSignedDataGenerator generator = new CMSSignedDataGenerator();
    ContentSigner signer = new JcaContentSignerBuilder(""SHA256WithRSA"").setProvider(""BC"").build(privateKey);
    generator.addSignerInfoGenerator(
        new JcaSignerInfoGeneratorBuilder(new JcaDigestCalculatorProviderBuilder().setProvider(""BC"").build()).build(signer, certificate));
    generator.addCertificate(new X509CertificateHolder(certificate.getEncoded()));

    CMSTypedData cmsTypedData = new CMSProcessableByteArray(content);
    CMSSignedData cmsSignedData = generator.generate(cmsTypedData, false);
    return cmsSignedData.getEncoded();
}

But I have another user cases, where I don't have the raw content, only its hash (sha256)
Bouncycastle doesn't support ""NONEwithRSA"" or ""RSA"" for pkcs7 signature, 
so I tried to use a custom ContentSigner, without obtaining the same 
signature that with the raw content version.
public byte[] signHash(final byte[] sha256) throws IOException,
    OperatorCreationException, CertificateEncodingException, CMSException {

    // Create generator of pkcs7-signature message
    CMSSignedDataGenerator generator = new CMSSignedDataGenerator();
    // custom content signer to bypass hash
    ContentSigner signer = new ContentSigner() {
        @Override public AlgorithmIdentifier getAlgorithmIdentifier() {
            return new DefaultSignatureAlgorithmIdentifierFinder().find(""SHA256WithRSA"");
        }

        @Override public OutputStream getOutputStream() {
            return new ByteArrayOutputStream();
        }

        @Override public byte[] getSignature() {
            try {
                Signature signer = Signature.getInstance(""NONEwithRSA"");
                signer.initSign(privateKey);
                signer.update(sha256);
                return signer.sign();
            } catch (Exception e){
            throw new RuntimeOperatorException(""exception obtaining signature: "" + e.getMessage(), e);
            }
        }
    };

    generator.addSignerInfoGenerator(
        new JcaSignerInfoGeneratorBuilder(new JcaDigestCalculatorProviderBuilder().setProvider(""BC"").build()).build(signer, certificate));
    generator.addCertificate(new X509CertificateHolder(certificate.getEncoded()));

    CMSTypedData cmsTypedData = new CMSProcessableByteArray(sha256);
    CMSSignedData cmsSignedData = generator.generate(cmsTypedData, false);
    return cmsSignedData.getEncoded();
}

I even tried to rebuild the content digest, no luck
 // build digest
 MessageDigest messageDigest = MessageDigest.getInstance(""SHA-256"");
 messageDigest.update(sha256);
 byte[] outputDigest = messageDigest.digest();
 AlgorithmIdentifier sha256Aid = new AlgorithmIdentifier(NISTObjectIdentifiers.id_sha256, DERNull.INSTANCE);
 DigestInfo di = new DigestInfo(sha256Aid, outputDigest);

 //sign SHA256 with RSA
 Signature rsaSignature = Signature.getInstance(""RSA"");
 rsaSignature.initSign(privateKey);
 byte[] encodedDigestInfo = di.toASN1Primitive().getEncoded();
 rsaSignature.update(encodedDigestInfo);
 return rsaSignature.sign();

So is there a way to get a pkcs7 form a sha256?
Thanks
","Found a working solution:
private static final String SIGNATURE_ALGO = ""SHA256WithRSA"";

/**
 * Get the pkcs7-signature from a document hash (sha256Hex)
 *
 * @param contentSha256Hex
 *     the original document content hash (sha256Hex) to be signed
 * @return the pkcs7 signature
 *
 * note: see TestSha1WithRsaAndAttributeTable() in bouncycastle/test/src/cms/test/SignedDataTest.cs
 * */
public byte[] signSha256Hex(final String contentSha256Hex)
    throws CertificateEncodingException, IOException, OperatorCreationException, CMSException, DecoderException {

    byte[] hash = Hex.decodeHex(contentSha256Hex);

    /*
     * The trick is to manually set digest attribute with hash value,
     * then generate signature without content.
     */

    // CMS attributes
    ASN1EncodableVector v = new ASN1EncodableVector();
    v.add(new Attribute(CMSAttributes.messageDigest, new DERSet(new DEROctetString(hash)))); // set digest (sha256)

    return signCms_Sha256WithRsa(
        new CMSAbsentContent(),
        new DefaultSignedAttributeTableGenerator(new AttributeTable(v)));

}

private byte[] signCms_Sha256WithRsa(CMSTypedData content, CMSAttributeTableGenerator signedAttributes)
    throws CMSException, IOException, CertificateEncodingException, OperatorCreationException {

    CMSSignedDataGenerator generator = new CMSSignedDataGenerator();

    // content signer
    ContentSigner signer = new JcaContentSignerBuilder(SIGNATURE_ALGO).setProvider(""BC"").build(privateKey);
    generator.addSignerInfoGenerator(
        new JcaSignerInfoGeneratorBuilder(new JcaDigestCalculatorProviderBuilder().setProvider(""BC"").build())
            .setSignedAttributeGenerator(signedAttributes)
            .build(signer, certificate));

    // add certificate
    generator.addCertificate(new X509CertificateHolder(certificate.getEncoded()));

    // sign
    CMSSignedData cmsSignedData = generator.generate(content, false);
    return cmsSignedData.getEncoded();
}

","333","<java><rsa><bouncycastle><sha256><pkcs#7>","0","0","1","2018-06-20 07:32:57","50942691","0","","","","","2018-03-23 15:06:31",""
"42519317","Delphi OpenCL integration - sha256","is there any simple way to generate string list using TStringList or TMemoryStrean and send it dynamically to opencl code and calculate their sha256 hash with my graphic card?
I have 10M+ files generated (on a hourly basis) from my application and need to write their sha256 hash (one shot - bulk) to the same file name as original but with .hsh extension.
I am using Delphi 7 with DCPcrypt2 unit that generating me hashes for now,  but it has very slow performance.
I have Intel graphic card compatible with OpenCL and want to make performance test and improve my app performance.
my part of code how I am doing it for now:
uses ..... ,DCPcrypt2,DCPsha256;

type
  ...
  sha256: TDCP_sha256;

var 
  result, ss:string;
  i, x: integer;
  myDigestSha2: array[0..31] of byte;
  f:textfile;

//collecting file names in a cycle that running few minutes to the TStringList

...

  for x := 1 to TStringList1.items.count do 
  begin
    ss := TStringList1.items[x];
    sha256.Burn;
    sha256.Init;
    sha256.UpdateStr(ss);
    sha256.Final(myDigestSha2);

    for i:= 0 to 31 do
      result := result + IntToHex(myDigestSha2[i],2);

    assignfile(f,'myfile.hsh');
    rewrite(f);
    writeln (f,result);
    closefile(f);
  end;

however this code works, it's very slow and eating a lot of my CPU.
Thanks for answers and sorry for my bad English;
","","333","<delphi><opencl><sha256>","1","","0","2017-03-01 06:19:39","","17","","22545","","2017-03-01 06:19:39","2017-02-28 21:44:04",""
"28135289","Converted to and form UTF8 after SHA256 yields different results, why?","var test = ""sdfsdfsdfasfwerqwer"";

var q = UTF8Encoding.UTF8.GetBytes(test);

var sha256 = SHA256.Create();

var hash = sha256.ComputeHash(q);

var z = UTF8Encoding.UTF8.GetString(hash);

var t = UTF8Encoding.UTF8.GetBytes(z);

In the above example, hash and t have different values. Why is this?
","hash is not an UTF-8 encoded byte array, just some random bytes. Note: not all byte arrays are valid as UTF-8, UTF-8 has its own rules. Therefore, it cannot necessarily be decoded into a string. (Specifically, invalid bytes are usually decoded into a question mark in .NET.)
You can try a regular 8-bit encoding which supports all possible byte arrays, like ISO-8859-1. Of course you will still get garbage when you try to read that as a string, but it should work back and forth.
If you are trying to transfer a random byte array as a string, I suggest you use BASE-64 encoding, which converts byte arrays to an ASCII string, which should be safe in all circumstances.
","332","<c#><utf-8><sha256>","0","3","1","2015-01-25 10:17:59","28135316","0","","","","","2015-01-25 10:15:18",""
"55128038","How to generate SHA256 hash from inline javascript?","I have the inline javascript that just contains jQuery.noConflict(); within the src tags. I tried plugging this string into a SHA256 generator and it gives me 1B631C545E0E9ACDA2FA9ADEF7CE9415A95FC6A325EA80268D1793BF913180AE which doesnt even look like the valid format to add to a whitelist for my content-security-policy.
Luckily chrome shows the expected hash sha256-ewwxYHPE+l68SkoQL0cNlN2qNMJgDV+Bu7SNHV7o76k= so i am able to add this to my whitelist instead. However, I am still curious what I am doing wrong
","","331","<sha256><content-security-policy>","1","","0","2019-03-12 18:04:27","","1","0","","","","2019-03-12 18:04:27",""
"37504047","How do I generate a list of random strings and hashes and output it in an HTML table?","I'm trying to generate a list of, let's say 10, random strings and it's SHA-256 hash in an HTML table. 
I have found the following code submitted by another user to generate the random string:
function generateRandomString($length = 10) {
$characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
$charactersLength = strlen($characters);
$randomString = '';
for ($i = 0; $i < $length; $i++) {
    $randomString .= $characters[rand(0, $charactersLength - 1)];
}
return $randomString;
}

How do I loop the function and how do I output the string and the hash of the string in an HTML table?
","Try this code:
<?php
function generate($length)
{
    $string = '';
    if($length > 128)
    {
        $string .= generate($length-128);
    }
    else
    {
        $string = substr(hash('sha512',mt_rand()),0,$length);
    }
    return $string;
}

$table = '<table>%s</table>';
$item = '<tr><td>%s</td><td>%s</td></tr>';
$res = '';
for($i=0;$i<10;$i++)
{
    $str = generate(10);
    $hash = hash('sha256', $str);

    $res .= sprintf($item, $hash, $str);
}

echo sprintf($table, $res);

","330","<php><html><hash><sha256>","2","1","1","2016-05-29 01:35:06","37504189","4","","1415724","","2016-05-29 01:35:06","2016-05-28 21:52:17",""
"37870031","digest returns the same value with different data","I'm using Javascript Forge to get a digest for some data, right now the experiment is with different documents and the following lines of code always returns the same hash:
function obtainData() {
    getDocument(getHash);
}

function getDocument(callback) {
    var file = dInput.files[0];
    var reader = new FileReader();
    reader.onload = function(e){
        var contents = e.target.result;
        var array = callback(contents)
        console.log(array.digest().toHex());
    }
    reader.readAsArrayBuffer(file);
}

function getHash(buffer) {
    digestHash = forge.md.sha256.create();
    digestHash.update(buffer);
    //always the same with different bytes everytime
    console.log(digestHash.digest().toHex());
    return digestHash;
}

why is this happening? Am I missing something?
Tried with different browsers and still the same digestHash value
","Try scoping digestHash like so:
function getHash(buffer) {
    // in your post the below line is missing 'var'
    // without the below 'var' digestHash will be global
    var digestHash = forge.md.sha256.create(); 
    digestHash.update(buffer);
    //always the same with different bytes everytime
    console.log(digestHash.digest().toHex());
    return digestHash;
}

","330","<javascript><hash><sha256><webcrypto-api>","0","0","3","2016-06-20 09:39:38","","0","","1816580","","2016-06-20 09:25:45","2016-06-16 21:58:31",""
"37870031","digest returns the same value with different data","I'm using Javascript Forge to get a digest for some data, right now the experiment is with different documents and the following lines of code always returns the same hash:
function obtainData() {
    getDocument(getHash);
}

function getDocument(callback) {
    var file = dInput.files[0];
    var reader = new FileReader();
    reader.onload = function(e){
        var contents = e.target.result;
        var array = callback(contents)
        console.log(array.digest().toHex());
    }
    reader.readAsArrayBuffer(file);
}

function getHash(buffer) {
    digestHash = forge.md.sha256.create();
    digestHash.update(buffer);
    //always the same with different bytes everytime
    console.log(digestHash.digest().toHex());
    return digestHash;
}

why is this happening? Am I missing something?
Tried with different browsers and still the same digestHash value
","The reason all hash values are the same for different documents or data is that method that tries to digest always refers to the object that contains the data ([object Object]), so it will always get the same result. So, to circumvent this I decided to use webcrypto.
function getHash(buffer) {
    console.log(buffer);
    var crypto = window.crypto || window.msCrypto;
    var digestHash;

    var promise = crypto.subtle.digest({name:""SHA-256""},
    convertStringToArrayBufferView(buffer));

    promise.then(function (result) {
        digestHash = convertArrayBufferToHexadecimal(result);
        console.log(digestHash);
    });

    return digestHash;
}

function convertStringToArrayBufferView(str) {
    var bytes = new Uint8Array(str.length);
    for(var i = 0; i < str.length; i++){
        bytes[i] = str.charCodeAt(i);
    }
    return bytes;
}

function convertArrayBufferToHexadecimal(buffer) {
    var data_view = new DataView(buffer);
    var i, len, hex = '', c;
    for(i = 0, len = data_view.byteLength; i<len; i+=1){
        c = data_view.getUint8(i).toString(16);
        if(c.length < 2){
            c = '0' + c;
        }
        hex += c;
    }

    return hex;
}

I found this solution on http://qnimate.com/. There´s a section on Hashing with WebCrypto. 
","330","<javascript><hash><sha256><webcrypto-api>","0","1","3","2016-06-20 09:39:38","","0","","1816580","","2016-06-20 09:25:45","2016-06-16 21:58:31",""
"37870031","digest returns the same value with different data","I'm using Javascript Forge to get a digest for some data, right now the experiment is with different documents and the following lines of code always returns the same hash:
function obtainData() {
    getDocument(getHash);
}

function getDocument(callback) {
    var file = dInput.files[0];
    var reader = new FileReader();
    reader.onload = function(e){
        var contents = e.target.result;
        var array = callback(contents)
        console.log(array.digest().toHex());
    }
    reader.readAsArrayBuffer(file);
}

function getHash(buffer) {
    digestHash = forge.md.sha256.create();
    digestHash.update(buffer);
    //always the same with different bytes everytime
    console.log(digestHash.digest().toHex());
    return digestHash;
}

why is this happening? Am I missing something?
Tried with different browsers and still the same digestHash value
","Forge library usually works with Uint8. converting content to Uint8Array should works properly
reader.onload = function(e){
    var contents = e.target.result;
    var  binary = arrayBufferToString(contents);
    var array = callback(binary)
    console.log(array.digest().toHex());
}


function arrayBufferToString( buffer ) {
    var binary = '';
    var bytes = new Uint8Array( buffer );
    var len = bytes.byteLength;
    for (var i = 0; i < len; i++) {
        binary += String.fromCharCode( bytes[ i ] );
    }
    return binary;
}

Using WebCryptographiApi is also a good solution 


function obtainData() {
  getDocument(getHash);
}

function arrayBufferToString( buffer ) {
  var binary = '';
  var bytes = new Uint8Array( buffer );
  var len = bytes.byteLength;
  for (var i = 0; i < len; i++) {
    binary += String.fromCharCode( bytes[ i ] );
  }
  return binary;
}

function getDocument(callback) {
  var file = dInput.files[0];
  var reader = new FileReader();
  reader.onload = function(e){
    var contents = e.target.result;
    var array = callback(contents)
    console.log(array.digest().toHex());
  }
  reader.readAsArrayBuffer(file);
}

function getHash(buffer) {
  digestHash = forge.md.sha256.create();
  digestHash.update(arrayBufferToString(buffer));
  return digestHash;
}
<script src=""https://cdn.rawgit.com/artjomb/96b970358e20410fa64daa2e844aeb0f/raw/5375e7171ef297d436d65b962149dcc0e1960b2b/forge_v0.6.39.min.js""></script>
<input id=""dInput"" type=""file"">
<button onclick=""obtainData()"">hash</button>



","330","<javascript><hash><sha256><webcrypto-api>","0","2","3","2016-06-20 09:39:38","","0","","1816580","","2016-06-20 09:25:45","2016-06-16 21:58:31",""
"56173051","Is there a way to convert sha256 to md5 hashing","I'm trying to import users credentials from one database schema to another one without users needing to create a new password, So first user table (the one I need to import to the new site) uses sha256+salt(I think) and my new site is using md5+salt (I think) I have access to all files and stuff so I could locate the salt that's being used if I can somehow reverse engineer the sha256 to make it md5?
Is there a way to do this? if so how would I approach it?
an example of the password would be:
old site: e3e922af8a36de975983b075b3bf5336bbb26c8008aa5d9b39aef8d85cb7eb32
new site: $S$Dbj.yBTjHV97QNLHwuoykWxzpNL9bxxFl4b8uoP1u1rJzCyDZb.e
I'll appreciate any input, Thank you!
Update: new site uses base64encode + salt which I know what is, just to be clear I'm not trying to actually be able to see their password in plain text, Can I convert sha256 -> base64encode with some mysql commands or something if I know the salt?
","Unless you're prepared to crack their password, no, you can't convert as SHA2-256 hash to an MD5 one. You need to know the content that generated the hash in the first place.
When migrating from one hashing type to another the best plan is to normalize all your password hashes into a consistent form first and the Modular Crypt Format is the most widely supported.
If you can wrangle your old hashes into that form then you should be able to use them with password_verify. You can also update user passwords as they log-in by re-writing them with password_hash which uses Bcrypt by default.
Over time you can stomp out old SHA2-256 and MD5 passwords and limit your exposure.
","328","<mysql><hash><md5><sha256><salt>","0","0","1","2019-05-16 18:03:11","","7","","6656351","","2019-05-16 17:31:00","2019-05-16 16:36:35",""
"49890541","Verificiation of a Signature HMAC","I am trying to create a signature then verify for a message of 40 bytes using the SHA-256 algorithm. I thought I did everything correctly, but it is giving me false for verification, and I cannot find out what I did wrong. I double and triple and quadruple checked, but couldn't find out. Any help would be appreciated.
here are the two functions I have created to sign and verify signature for a message. 
   public static byte[] sigAuth(byte[] message, File file, PrivateKey privateKey) throws NoSuchAlgorithmException, InvalidKeyException, SignatureException, IOException{
            SecretKeySpec secretKey = new SecretKeySpec(sharedKey, ""hmacSHA256"");
            Mac macHMAC = Mac.getInstance(""HmacSHA256"");
            macHMAC.init(secretKey);
            byte[] authMessageInHMACC = macHMAC.doFinal(message);

            Signature signature = Signature.getInstance(""SHA256withRSA"");
            signature.initSign(privateKey);
            signature.update(authMessageInHMACC);
            byte[] finalSignature = signature.sign();

            FileOutputStream fos = new FileOutputStream(file);
            fos.write(message);
            fos.write(finalSignature);
            fos.close(); 

            return finalSignature;
        }

        public static boolean verify(File file, PublicKey pubKey) throws NoSuchAlgorithmException, InvalidKeyException, SignatureException, IOException{
            byte fileContent[] = new byte[(int)sharedKeyFile.length()];
            FileInputStream fos = new FileInputStream(file);
            fos.read(fileContent);
            fos.close();
            /Split message from signed hash 
            byte[] messageOnly = new byte[40];

            byte[] hash = new byte[256];

            //messageauthmessage
            int j = 0;
            int k = 0;
            for (int i = 0; i < fileContent.length;i++){
                if(i < 40){
                    messageOnly[i] = fileContent[i];
                    j++;
                } else {
                    hash[k] = fileContent[j+1];
                    k++;
                }
            }

            SecretKeySpec secretKey = new SecretKeySpec(sharedKey, ""hmacSHA256"");
            Mac macHMAC = Mac.getInstance(""HmacSHA256"");
            macHMAC.init(secretKey);
            byte[] authMessageInHMACC = macHMAC.doFinal(messageOnly);

            Signature pubSignature = Signature.getInstance(""SHA256withRSA"");
            pubSignature.initVerify(pubKey);
            pubSignature.update(authMessageInHMACC);
            boolean verified = pubSignature.verify(hash);
            return verified;
        }

"," messageOnly[i] = fileContent[i];

should be 
 messageOnly[j] = fileContent[i];

and
hash[k] = fileContent[j+1];

should be
hash[k] = fileContent[i];

","327","<java><hash><signature><sha256>","0","0","1","2018-04-18 03:14:57","49890579","0","","","","","2018-04-18 03:09:45",""
"29755850","How to get the same output in C and php via PKCS5_PBKDF2_HMAC and hash_hmac","I'm trying to duplicate a hashing function in C to be used on an existing database of hashes and salts. However once I reduced how PHP gets a sha256 hash and how c gets one, I can't get the same hashes. 
I have looked though quite a few methods of getting the same hashes in C, but I can't quite figure out what's wrong the C code. The C code works, but the output is not the same.
Here is the base of my PHP code, it takes password and uses a single space as a salt, the rest of the code is just to visualize and see the output:
<?php
$salt = ' ';
$password = 'password';
$temp1 = hash_hmac('sha256', $salt, $password, true);


echo ""======================\r\n<br>"";
echo ""password  [${password}]\r\n<br>"";
echo ""salt          [${salt}]\r\n<br>"";
echo ""======================\r\n<br>"";
    echo gettype($temp1) . ""\r\n<br>"";
    echo ""each char as dechex(ord(x))\r\n<br>"";
    for ($i = 0; $i < strlen($temp1); ++$i) {
        $x = dechex(ord($temp1[$i]));
        echo ""[$x] "";
    }

echo ""-------------------------\r\n<br>"";
    echo ""base64_encode\r\n<br>"";
echo base64_encode($temp1).""\r\n<br>""; ?>

and the output
====================== 
password    [password] 
salt    [ ] 
====================== 
string 
each char as dechex(ord(x)) 
[52] [33] [c] [6b] [2f] [b6] [22] [cd] [bb] [73] [93] [c2] [5c] [be] [6c] [f4] [d3] [a6] [26] [cc] [ef] [aa] [9] [5e] [e0] [93] [33] [8] [83] [8d] [9] [63] ------------------------- 
base64_encode 
UjMMay+2Is27c5PCXL5s9NOmJszvqgle4JMzCIONCWM= 

The C I'm using, this is the simplest of examples I could find. I am only looking to get the same hash output. It does not have to use this method. I also included the base64 include function I'm using just in case:
    #include <string.h>
#include <stdio.h>
#include <openssl/evp.h>
#include <openssl/sha.h>
#include <openssl/pem.h>
#include <openssl/hmac.h>
#define PBKDF2_DIGEST_LENGTH        SHA256_DIGEST_LENGTH
#define PBKDF2_SALT_PREFIX          """"
#define PBKDF2_SALT_PREFIX_LENGTH   strlen(PBKDF2_SALT_PREFIX)
#define PBKDF2_PRF_ALGORITHM_OLD        EVP_sha512()
#define PBKDF2_DIGEST_LENGTH_OLD       SHA512_DIGEST_LENGTH
#define PBKDF2_SALT_LENGTH          32
#define PBKDF2_RESULT_LENGTH        PBKDF2_SALT_PREFIX_LENGTH + (2 * PBKDF2_DIGEST_LENGTH) + PBKDF2_SALT_LENGTH + 2
#define PBKDF2_ROUNDS               1000


#define PBKDF2_PRF_ALGORITHM        EVP_sha256()


char *base64encode (const void *b64_encode_this, int encode_this_many_bytes){
    BIO *b64_bio, *mem_bio;      //Declares two OpenSSL BIOs: a base64 filter and a memory BIO.
    BUF_MEM *mem_bio_mem_ptr;    //Pointer to a ""memory BIO"" structure holding our base64 data.
    b64_bio = BIO_new(BIO_f_base64());                      //Initialize our base64 filter BIO.
    mem_bio = BIO_new(BIO_s_mem());                           //Initialize our memory sink BIO.
    BIO_push(b64_bio, mem_bio);            //Link the BIOs by creating a filter-sink BIO chain.
    BIO_set_flags(b64_bio, BIO_FLAGS_BASE64_NO_NL);  //No newlines every 64 characters or less.
    BIO_write(b64_bio, b64_encode_this, encode_this_many_bytes); //Records base64 encoded data.
    BIO_flush(b64_bio);   //Flush data.  Necessary for b64 encoding, because of pad characters.
    BIO_get_mem_ptr(mem_bio, &mem_bio_mem_ptr);  //Store address of mem_bio's memory structure.
    BIO_set_close(mem_bio, BIO_NOCLOSE);   //Permit access to mem_ptr after BIOs are destroyed.
    BIO_free_all(b64_bio);  //Destroys all BIOs in chain, starting with b64 (i.e. the 1st one).
    BUF_MEM_grow(mem_bio_mem_ptr, (*mem_bio_mem_ptr).length + 1);   //Makes space for end null.
    (*mem_bio_mem_ptr).data[(*mem_bio_mem_ptr).length] = '\0';  //Adds null-terminator to tail.
    return (*mem_bio_mem_ptr).data; //Returns base-64 encoded data. (See: ""buf_mem_st"" struct).
}

int main(void)
{
    static unsigned char hb[PBKDF2_DIGEST_LENGTH];
    static unsigned char hashBlock[PBKDF2_DIGEST_LENGTH];

    char *password = ""password"";
    char *salt = "" "";
    int passes = 1;


    PKCS5_PBKDF2_HMAC(password, strlen(password), salt, strlen(salt) , passes, PBKDF2_PRF_ALGORITHM, PBKDF2_DIGEST_LENGTH, hb);

    unsigned int i = 0;
    printf(""printf hex\n"");
    while(i<32)
    {
        printf(""[%x] "",  hb[i]);
        ++i;
    }
    printf(""\n\n"");
    printf(""base-64 encode\n"");
    printf(""%s \n"", base64encode(hb, 32));

    return 0;
}

The output that C produces, basically to visualize the output:
    ./pbkdf2_hack
printf hex
[f8] [8b] [fe] [58] [64] [f8] [a] [ef] [c0] [da] [b2] [97] [42] [ce] [b3] [83] [67] [85] [a5] [f2] [c8] [94] [7b] [2d] [82] [5d] [8a] [a5] [c0] [46] [9a] [24]

base-64 encode
+Iv+WGT4Cu/A2rKXQs6zg2eFpfLIlHstgl2KpcBGmiQ=

Compiling, in case something needs to be different here:
gcc pbkdf2_example.c -lcrypto -o pbkdf2_example

","By trying various combinations I found the proper way of updating the hash.
I didn't really search for documentation so its probably my fault.
I am posting this so someone hopefully doesn't have the same frustration I've had.
#include <string.h>
#include <stdio.h>
#include <openssl/evp.h>
#include <openssl/sha.h>
#include <openssl/pem.h>
#include <openssl/hmac.h>
#define PBKDF2_DIGEST_LENGTH        SHA256_DIGEST_LENGTH
#define PBKDF2_DIGEST_LENGTH_OLD       SHA512_DIGEST_LENGTH
#define PBKDF2_ROUNDS               1000
#define PBKDF2_PRF_ALGORITHM        EVP_sha256()

void PBKDF2_HMAC_SHA_256(const char* pass, const unsigned char* salt, int iterations, unsigned char outputbytes, char* HexResult)
{
    unsigned int i;
    unsigned char digest[outputbytes];
    PKCS5_PBKDF2_HMAC(pass, strlen(pass), salt, strlen(salt), 1, EVP_sha256(), outputbytes, digest);
    for (i = 0; i < sizeof(digest); i++)
       sprintf(HexResult + (i * 2), ""%02x"", 255 & digest[i]);
}

char *base64encode (const void *b64_encode_this, int encode_this_many_bytes){
    BIO *b64_bio, *mem_bio;      //Declares two OpenSSL BIOs: a base64 filter and a memory BIO.
    BUF_MEM *mem_bio_mem_ptr;    //Pointer to a ""memory BIO"" structure holding our base64 data.
    b64_bio = BIO_new(BIO_f_base64());                      //Initialize our base64 filter BIO.
    mem_bio = BIO_new(BIO_s_mem());                           //Initialize our memory sink BIO.
    BIO_push(b64_bio, mem_bio);            //Link the BIOs by creating a filter-sink BIO chain.
    BIO_set_flags(b64_bio, BIO_FLAGS_BASE64_NO_NL);  //No newlines every 64 characters or less.
    BIO_write(b64_bio, b64_encode_this, encode_this_many_bytes); //Records base64 encoded data.
    BIO_flush(b64_bio);   //Flush data.  Necessary for b64 encoding, because of pad characters.
    BIO_get_mem_ptr(mem_bio, &mem_bio_mem_ptr);  //Store address of mem_bio's memory structure.
    BIO_set_close(mem_bio, BIO_NOCLOSE);   //Permit access to mem_ptr after BIOs are destroyed.
    BIO_free_all(b64_bio);  //Destroys all BIOs in chain, starting with b64 (i.e. the 1st one).
    BUF_MEM_grow(mem_bio_mem_ptr, (*mem_bio_mem_ptr).length + 1);   //Makes space for end null.
    (*mem_bio_mem_ptr).data[(*mem_bio_mem_ptr).length] = '\0';  //Adds null-terminator to tail.
    return (*mem_bio_mem_ptr).data; //Returns base-64 encoded data. (See: ""buf_mem_st"" struct).
}

/*
    const * , not changing the value or pointer

*/
void DisplayItem(const unsigned char *hb, const char *title) {

    unsigned int i = 0;
    printf(""printf hex\n"");
    while(i<32)
    {
        printf(""[%x] "",  hb[i]);
        ++i;
    }
    printf(""base-64 encode %s\n"", title);
    printf(""%s \n"", base64encode(hb, 32));
    printf(""\n\n"");

}

int main(void)
{
    static unsigned char hb[PBKDF2_DIGEST_LENGTH];
    static unsigned char hashBlock[PBKDF2_DIGEST_LENGTH];
    unsigned char finalBlock[PBKDF2_DIGEST_LENGTH];
    SHA256_CTX ctx;
    HMAC_CTX hmac_ctx;

    char* title = """";
    unsigned char *password = ""password"";
    unsigned char *salt = "" "";
    int passes = 1;

    memset(hb, 0, PBKDF2_DIGEST_LENGTH);
    HMAC_Init(&hmac_ctx, password, strlen(password), PBKDF2_PRF_ALGORITHM);
    HMAC_Update(&hmac_ctx, salt, strlen(salt));
    HMAC_Final(&hmac_ctx, hb, NULL);
    DisplayItem(hb, ""HMAC_CTX pass salt - correct working setup"");

    memset(hb, 0, PBKDF2_DIGEST_LENGTH);
    SHA256_Init(&ctx);
    SHA256_Update(&ctx, salt, strlen(salt));
    SHA256_Update(&ctx, password, strlen(password));
    SHA256_Final(hb, &ctx);
    DisplayItem(hb, ""SHA256_CTX salt pass"");


    memset(hb, 0, PBKDF2_DIGEST_LENGTH);
    SHA256_Init(&ctx);
    SHA256_Update(&ctx, password, strlen(password));
    SHA256_Update(&ctx, salt, strlen(salt));
    SHA256_Final(hb, &ctx);
    DisplayItem(hb, ""SHA256_CTX  pass salt"");

    memset(hb, 0, PBKDF2_DIGEST_LENGTH);
    HMAC_Init(&hmac_ctx, salt, strlen(salt), PBKDF2_PRF_ALGORITHM);
    HMAC_Update(&hmac_ctx, password, strlen(password));
    HMAC_Final(&hmac_ctx, hb, NULL);
    DisplayItem(hb, ""HMAC_CTX salt pass"");


    memset(hb, 0, PBKDF2_DIGEST_LENGTH);
    PKCS5_PBKDF2_HMAC(password, strlen(password), salt, strlen(salt), 1, PBKDF2_PRF_ALGORITHM, PBKDF2_DIGEST_LENGTH, hb);
    DisplayItem(hb, ""PKCS5_PBKDF2_HMAC pass salt"");

    memset(hb, 0, PBKDF2_DIGEST_LENGTH);
    PKCS5_PBKDF2_HMAC(salt, strlen(salt), password, strlen(password), 1, PBKDF2_PRF_ALGORITHM, PBKDF2_DIGEST_LENGTH, hb);
    DisplayItem(hb, ""PKCS5_PBKDF2_HMAC salt pass"");
    /*
    char *outputfoo[PBKDF2_DIGEST_LENGTH];
    memset(outputfoo, 0, PBKDF2_DIGEST_LENGTH);
    PBKDF2_HMAC_SHA_256(password, salt, 1, hb, outputfoo);
    printf(""xxxxxx    %s \n"", outputfoo);
    */



    return 0;
}

","322","<php><c><hash><sha256>","1","0","1","2015-04-21 16:03:17","29777489","0","","1921715","","2015-04-20 18:45:26","2015-04-20 18:40:09",""
"9242853","Are all hash code algorithms of the same type calculated the same way?","I was just wondering if all SHA256 Hashes are calculated the same way. Like if I give the input to this lib like the following, how could I reproduce the same output with another SHA256 Hash algorithm?
lib1_gf_InitializeHashInput();
lib1_gf_AddIntegerToHashInput(a);
lib1_gf_AddIntegerToHashInput(b);
lib1_gf_AddIntegerToHashInput(c);
lib1_gf_AddIntegerToHashInput(d);
lib1_gf_AddIntegerToHashInput(e);
lib1_gf_AddIntegerToHashInput(f);
lib1_gf_AddIntegerToHashInput(g);
lib1_gf_AddIntegerToHashInput(h);
lib1_gf_AddIntegerToHashInput(i);
string HASHCODE = lib1_gf_GenerateSHA256HashCode();

void lib1_gf_AddIntegerToHashInput (int lp_integer) {
    lib1_gf_AddByteToHashInput(lp_integer);
    lib1_gf_AddByteToHashInput(lp_integer >> 8);
    lib1_gf_AddByteToHashInput(lp_integer >> 16);
    lib1_gf_AddByteToHashInput(lp_integer >> 24);
}

void lib1_gf_AddByteToHashInput (byte lp_byte) {
    HashInputData[HashInputSize] = lp_byte;
    HashInputSize += 1;
}

Here's the lib link (yes it is sha256 as well as md5): http://www.sc2mapster.com/assets/md5-hash/
Direct Download link: http://www.sc2mapster.com/media/files/541/355/Hash_lib.SC2Lib
","The short answer is yes -- except that's too short, thank you SO.  SHA256 is a specification for a particular algorithm that should always present the same results for the same input, no matter whose implementation you use.
","322","<hash><hashcode><sha256>","-1","1","2","2012-02-11 18:47:10","","0","","1203564","","2012-02-11 18:47:10","2012-02-11 18:30:11",""
"9242853","Are all hash code algorithms of the same type calculated the same way?","I was just wondering if all SHA256 Hashes are calculated the same way. Like if I give the input to this lib like the following, how could I reproduce the same output with another SHA256 Hash algorithm?
lib1_gf_InitializeHashInput();
lib1_gf_AddIntegerToHashInput(a);
lib1_gf_AddIntegerToHashInput(b);
lib1_gf_AddIntegerToHashInput(c);
lib1_gf_AddIntegerToHashInput(d);
lib1_gf_AddIntegerToHashInput(e);
lib1_gf_AddIntegerToHashInput(f);
lib1_gf_AddIntegerToHashInput(g);
lib1_gf_AddIntegerToHashInput(h);
lib1_gf_AddIntegerToHashInput(i);
string HASHCODE = lib1_gf_GenerateSHA256HashCode();

void lib1_gf_AddIntegerToHashInput (int lp_integer) {
    lib1_gf_AddByteToHashInput(lp_integer);
    lib1_gf_AddByteToHashInput(lp_integer >> 8);
    lib1_gf_AddByteToHashInput(lp_integer >> 16);
    lib1_gf_AddByteToHashInput(lp_integer >> 24);
}

void lib1_gf_AddByteToHashInput (byte lp_byte) {
    HashInputData[HashInputSize] = lp_byte;
    HashInputSize += 1;
}

Here's the lib link (yes it is sha256 as well as md5): http://www.sc2mapster.com/assets/md5-hash/
Direct Download link: http://www.sc2mapster.com/media/files/541/355/Hash_lib.SC2Lib
","SHA256 algorithm is one. 
So, yes, SHA256 hash is calculated always the same way. 
Note that source code of SHA256 (and other SHA) hash generation algorithm is here.
","322","<hash><hashcode><sha256>","-1","0","2","2012-02-11 18:47:10","","0","","1203564","","2012-02-11 18:47:10","2012-02-11 18:30:11",""
"30155648","SHA-256 on the database side","I'm making a mobile app for tv series. Basically like a tracker, to know what episodes to watch and when. And I wanted to store the information like episodes watched, user shows on a database. (the info about shows I get from a rest api)
So the thing is I don't find the need to have a server here, I just don't know what it should do.
And the problem is I'd like to make the database secure. And from what I've read the best practice is to create a salt using a cryptographically strong random number generator and prepend it to the password and then hash the whole thing using a hash algorithm, for example the SHA-256.
Then I store a hashed password and the salt in the database, and when I want to check if the password is correct, just hash it again and compare to the one in database.
So I have a special class in Java that can create such a salt, and all I needed to know is where and how to hash the whole thing. And what is what I'm asking about. I would not like to create a server that would just hash passwords.
Also another thing is how to go about implementing auto-login, which I also wanted to add once I figured this out.
I hope it's clearer now what I want to accomplish here.
","Sounds like you're building a mobile app that stands alone, ie doesn't talk to a server.
You want the app to be password protected (even if their phone already is), and you want to store this password hashed, so that the pwd cannot be recovered on say a lost then rooted phone.
SHA256 is a fine hash but what you want is a real slow hash. Use bcrypt, PBKDF2, or scrypt.
The salt is not a secret.
When the user creates their account, create the salt, hash the pwd with the salt and store the password and salt somewhere. Each time the user logs in, get the salt, hash the password the same as before, and compare to saved password. If same, user authenticates.
You don't need to store the pwd in sqlite. It's probably easier just to store it in a text file.
","321","<database><security><hash><password-protection><sha256>","-3","0","1","2015-05-11 05:28:11","","17","","2627343","","2015-05-10 19:59:14","2015-05-10 19:17:25",""
"48617664","node js sha256 generated string does not match","I am trying to validate signature with HMAC  for an API service
Their documentation
The signature in the X-Line-Signature request header must be verified to confirm that the request was sent from the LINE Platform.
Authentication is performed as follows:
The signature in the X-Line-Signature request header must be verified to confirm that the request was sent from the LINE Platform.

Authentication is performed as follows:

1)With the channel secret as the secret key, your application retrieves the digest value in the request body created using the HMAC-SHA256 algorithm.

2)The server confirms that the signature in the request header matches the digest value which is Base64 encoded.

Here is the implementation with nodejs
 const crypto    = require('crypto');
    const signature = crypto.createHmac('SHA256', doc.line.channelSecret).update(JSON.stringify(req.body)).digest('base64');

But the generated signature and the signature from the header is does not match
UPDATED
const crypto = require('crypto');

const channelSecret = ...; // Channel secret string
const body = ...; // Request body string
const signature =
  createHmac('SHA256', channelSecret)
  .update(body).digest('base64');
// Compare X-Line-Signature request header and the signature

","","321","<javascript><node.js><express><sha256>","0","","0","2018-02-05 08:31:53","","16","","2804362","","2018-02-05 08:31:53","2018-02-05 07:31:09",""
"45859120","Different SHA1 but same SHA256","I am iterating through a folder containing binary files and am trying to compute for each file's hash values, specifically sha1 and sha256. On my runs, I weirdly get the same sha256 values for all files, but the sha1 values are different (thus correct).
Below is a screenshot of an output file which shows sha1 hashing was done correctly. But sha256 isn't. (Sorry filenames of each binary file is also its sha1)

Is there something wrong with my process? This is the relevant code in Python. I AM NOT SEEING SOMETHING. Sorry.
out.write(""FILENAME,SHA1,SHA256\n"")
for root, dirs, files in os.walk(input_path):
    for ffile in files:
        myfile = os.path.join(root, ffile)
        nice = os.path.join(os.getcwd(), myfile)

        fo = open(nice, ""rb"")
        a = hashlib.sha1(fo.read())
        b = hashlib.sha256(fo.read())
        paylname = os.path.basename(myfile)
        mysha1 = str(a.hexdigest())
        mysha256 = str(b.hexdigest())
        fo.close()

        out.write(""{0},{1},{2}\n"".format(paylname, mysha1, mysha256))

","as i put in my comment above, you are reading the whole file for the first hash, but you need to seek back to the start of the file to read it a second time for the second hash. alternatively you could store it in a variable, and pass that to each hash.
out.write(""FILENAME,SHA1,SHA256\n"")
for root, dirs, files in os.walk(input_path):
    for ffile in files:
        myfile = os.path.join(root, ffile)
        nice = os.path.join(os.getcwd(), myfile)

        fo = open(nice, ""rb"")
        a = hashlib.sha1(fo.read())
        fo.seek(0,0) # seek back to start of file
        b = hashlib.sha256(fo.read())
        paylname = os.path.basename(myfile)
        mysha1 = str(a.hexdigest())
        mysha256 = str(b.hexdigest())
        fo.close()

        out.write(""{0},{1},{2}\n"".format(paylname, mysha1, mysha256))

","321","<python><sha1><sha256><hashlib>","-3","1","1","2017-08-24 10:27:43","45859189","4","","2408651","","2017-08-24 10:26:24","2017-08-24 10:23:38","2017-08-24 10:28:19"
"43348239","Logging in users while password encrypted","I'm developing an application with Java EE and actually having some trouble to find out how to validate users, the main problem is, Authentication being based on email and password while password is encrypted in the databse through Jasypt SHA-256 encryption algorithm.
Can I get an advice?
ConfigurablePasswordEncryptor passwordEncryptor = new ConfigurablePasswordEncryptor();
    passwordEncryptor.setAlgorithm( ""SHA-256"" );
    passwordEncryptor.setPlainDigest( false );
    String motDePasseChiffre = passwordEncryptor.encryptPassword( motDePasse );

    utilisateur.setMdp( motDePasseChiffre );

EDIT
So I have this ConfigurablePasswordEncryptor passwordEncryptor = new ConfigurablePasswordEncryptor();
    valid=passwordEncryptor.checkPassword(mdp,utilisateur.getMdp());
which returns a boolean, whether the plain password is the encrypted password or not.
I'm having Tomcat errors:

org.jasypt.exceptions.EncryptionOperationNotPossibleException
      org.jasypt.digest.StandardByteDigester.matches(StandardByteDigester.java:1106)
      org.jasypt.digest.StandardStringDigester.matches(StandardStringDigester.java:1052)
      org.jasypt.util.password.ConfigurablePasswordEncryptor.checkPassword(ConfigurablePasswordEncryptor.java:251)
      projet.helpdesk.form.ConnexionForm.connecterUtilisateur(ConnexionForm.java:47)
      projet.helpdesk.servlets.Authentification.doPost(Authentification.java:30)
      javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
      javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
      org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)

","Try encrypting the password from input , and check if the encrypted password(from Input) matches the encrypted password present in the database.
EDIT
Answers From the comments
Do not encrypt passwords, when the attacker gets the DB he will also get the encryption key. Just using a hash function is not sufficient and just adding a salt does little to improve the security. Iterate over an HMAC with a random salt for about a 100ms duration and save the salt with the hash. Use a function such as password_hash, PBKDF2, Bcrypt or similar functions. The point is to make the attacker spend a lot of time finding passwords by brute force
","317","<java-ee><encryption><login><passwords><sha256>","-1","-1","2","2019-01-10 07:34:39","43348369","5","0","1615903","","2017-04-12 05:28:51","2017-04-11 14:03:00",""
"43348239","Logging in users while password encrypted","I'm developing an application with Java EE and actually having some trouble to find out how to validate users, the main problem is, Authentication being based on email and password while password is encrypted in the databse through Jasypt SHA-256 encryption algorithm.
Can I get an advice?
ConfigurablePasswordEncryptor passwordEncryptor = new ConfigurablePasswordEncryptor();
    passwordEncryptor.setAlgorithm( ""SHA-256"" );
    passwordEncryptor.setPlainDigest( false );
    String motDePasseChiffre = passwordEncryptor.encryptPassword( motDePasse );

    utilisateur.setMdp( motDePasseChiffre );

EDIT
So I have this ConfigurablePasswordEncryptor passwordEncryptor = new ConfigurablePasswordEncryptor();
    valid=passwordEncryptor.checkPassword(mdp,utilisateur.getMdp());
which returns a boolean, whether the plain password is the encrypted password or not.
I'm having Tomcat errors:

org.jasypt.exceptions.EncryptionOperationNotPossibleException
      org.jasypt.digest.StandardByteDigester.matches(StandardByteDigester.java:1106)
      org.jasypt.digest.StandardStringDigester.matches(StandardStringDigester.java:1052)
      org.jasypt.util.password.ConfigurablePasswordEncryptor.checkPassword(ConfigurablePasswordEncryptor.java:251)
      projet.helpdesk.form.ConnexionForm.connecterUtilisateur(ConnexionForm.java:47)
      projet.helpdesk.servlets.Authentification.doPost(Authentification.java:30)
      javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
      javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
      org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)

","Do not encrypt passwords, when the attacker gets the DB he will also get the encryption key. Just using a hash function is not sufficient and just adding a salt does little to improve the security. Iterate over an HMAC with a random salt for about a 100ms duration and save the salt with the hash. Use a function such as password_hash, PBKDF2, Bcrypt or similar functions. The point is to make the attacker spend a lot of time finding passwords by brute force
","317","<java-ee><encryption><login><passwords><sha256>","-1","0","2","2019-01-10 07:34:39","43348369","5","0","1615903","","2017-04-12 05:28:51","2017-04-11 14:03:00",""
"38447129","JAVA hmac-sha256 library error","I need a function that hmac-sha256 encodes 2 strings. I found this block of code but my eclipse compiler keeps saying ""Hex cannot be resolved"".
public static String encode(String key, String data) throws Exception {
      Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
      SecretKeySpec secret_key = new SecretKeySpec(key.getBytes(""UTF-8""), ""HmacSHA256"");
      sha256_HMAC.init(secret_key);

      return Hex.encodeHexString(sha256_HMAC.doFinal(data.getBytes(""UTF-8"")));
    }

I also tried this: and got the error ""Base64 cannot be resolved"".
  public static String encode(String key, String data) throws Exception {
      Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
      SecretKeySpec secret_key = new SecretKeySpec(key.getBytes(""UTF-8""), ""HmacSHA256"");
      sha256_HMAC.init(secret_key);

      return Base64.encodeBase64String(sha256_HMAC.doFinal(data.getBytes(""UTF-8"")));
    }

My imports are:
import java.security.MessageDigest;
import java.util.Random;
import java.lang.Object;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import javax.xml.bind.DatatypeConverter;

and i'm using JRE System Library(JavaSE-1.7).
My question is how do I fix those error codes?
","Put Apache Commons Codec in your class path and fix your import statements to include the right classes from it.
","317","<java><eclipse><hex><base64><sha256>","0","0","1","2016-07-18 22:57:21","","1","3","","","","2016-07-18 22:50:45",""
"54152223","Using https POST for transaction but don't understand how to transition from MD5 to transHashSHA2 in my code","I got an email today saying:

Authorize.Net is phasing out the MD5 based transHash element in favor of the SHA-256 based transHashSHA2. The setting in the Merchant Interface which controls the MD5 Hash option will be removed by the end of January 2019, and the transHash element will stop returning values at a later date to be determined.  
We have identified that you have this feature configured and may be relying on MD5 based transHash in transaction responses for verifying the sender is Authorize.Net.

I use the http POST method to submit my transaction and do the MD5 check on the response using a bit of C code that was written long ago. What should I do with my POST to transition and how to handle the 'transHasSHA2' stuff? Currently in C I am linking libssl and using the MD5_ functions.
Damn, I did this all so long ago, and a January 2019 deadline is awfully close!
","The email sent by Authorze.Net included a link to a page that explains how to transition to the new hash:

Transaction Hash Upgrade Guide
Authorize.Net is phasing out the MD5 based transHash element in favor of the SHA-512 based transHashSHA2. The setting
  in the Merchant Interface which controls the MD5 Hash option will be
  removed by the end of January 2019, and the transHash element will
  stop returning values at a later date to be determined.
When you receive a transaction response from Authorize.Net, it
  includes the transHashSHA2 element.  transHashSHA2 contains
  the HMAC-SHA512 hash that Authorize.Net generated for the transaction.
  To use it, construct a HMAC-SHA512 hash using your Signature Key,
  converted to byte format, as the HMAC key, and a message constructed
  from your API Login ID, the transaction ID, and the transaction
  amount. Compare your hash result with transHashSHA2. If the two
  values match, the transaction response came from Authorize.Net.
Note: The value of transHashSHA2 will be null if you do not
  generate the Signature Key first.
To use the Signature Key to validate the value of transHashSHA2:  
Step 1. Generate a Signature Key and store it in a secure location on your server.
Step 2. Convert the Signature Key into a byte array.
Step 3. Create a message string that starts with a caret (""^""), followed by the following three fields delimited by carets, and
  terminated with another caret:
•    The API Login ID that you send in createTransactionRequest in
  the name element.
•    The transaction ID that we send in createTransactionResponse
  in the transId element.
•    The transaction amount that we send in
  createTransactionResponse in the amount element.
For example, if your API Login ID is ""ANet123"", the value of
  transId is ""20987654321"", and the value of amount is ""9.99"", the message string would look like this:
^ANet123^20987654321^9.99^
Step 4. Use HMAC-SHA512 to hash the byte array form of the Signature Key from Step 2 with the message string from Step 3.
Step 5. Compare the value of transHashSHA2 with the output from the HMAC-SHA512 hash mentioned in Step 4.

","313","<md5><sha256><authorize.net>","1","0","1","2019-01-16 11:04:41","","3","","250259","","2019-01-12 14:43:14","2019-01-11 18:36:47",""
"54381661","How to generate PBKDF2 with HMAC SHA256 on Powershell Linux?","I'm working on a cross-platform PowerShell implementation of lesspass-cli (a stateless password manager).
Python
The Python implementation uses PBKDF2 with SHA256 for the  HMAC digest algorithm:
hashlib.pbkdf2_hmac(
    ""sha256"", master_password.encode(""utf-8""), salt.encode(""utf-8""), 100000, 32
)

Powershell/.NET
I didn't find a PowerShell version for that.
From what I understand in the .NET Core documentation System.Security.Cryptography.Rfc2898DeriveBytes only implement SHA1. 
One asnwer in Rfc2898 / PBKDF2 with SHA256 as digest in c# point to an implement SHA256 implementation in coreFx.
Question

Does CoreFx means it's available in Powershell Linux/Windows?
How do I use PBKDF2 with SHA256 as digest in my PowerShell module?

","","313","<linux><powershell><cross-platform><sha256><pbkdf2>","0","","0","2019-01-29 01:17:06","","1","","1402846","","2019-01-29 01:17:06","2019-01-26 18:53:30",""
"45731490","Can openssl smime -verify with sha256 certificate","I've been using the following to correctly verify S/MIME documents with SHA1 signatures, but I recently have come upon the need to do the same with SHA256 signatures as SHA1s have been shown to be insecure.
# openssl smime -verify -noverify -inform SMIME -certfile cert.pem -in rawfile.txt -out verified.txt

Has anyone done this?  I've tried adding switches:
openssl sha -sha256

As was suggested when verifying just the digest files, but it throws an error.
Ultimately I'm looking to do this via PHP with something like openssl_pkcs7_verify, but I've not gotten even the commandline to work, yet so I'm stumped.
This is on centOS, OpenSSL 1.0.1e-fips 11 Feb 2013
","It turns out that openssl is able to determine its sha256 and verify without a switch, if your version of openssl supports sha256.
","311","<php><openssl><mime><sha256><verify>","-1","0","1","2017-08-19 11:09:59","","0","","","","","2017-08-17 09:35:17",""
"32561649","Coming SHA-256 : Do I need to update my IPN listener that does not use a secure URL?","I currently use only payment buttons, and an IPN php script I got from https://github.com/paypal/ipn-code-samples that is dated Nov 10, 2014.
My script simply posts back to www.paypal.com without encryption.
Is encryption becoming mandatory ?
","You have to verify that your Server supports SHA-2 (SHA-256). Use of SSL with SHA-2 would be manditory.
Since Chrome is deprecating support for SHA-1 by the end of 2015, all PayPal support for SHA-1 will be deprecated by the end of 2016.
You can test your server compatibility here shaaa..
","311","<php><paypal><paypal-ipn><sha256>","4","1","3","2015-09-16 09:44:23","","0","","","","","2015-09-14 09:42:08",""
"32561649","Coming SHA-256 : Do I need to update my IPN listener that does not use a secure URL?","I currently use only payment buttons, and an IPN php script I got from https://github.com/paypal/ipn-code-samples that is dated Nov 10, 2014.
My script simply posts back to www.paypal.com without encryption.
Is encryption becoming mandatory ?
","Your IPN listener will be responsible to recieve PayPal call-backs and POST them to PayPal for verification. On that point, connection between your server to PayPal endpoint will need encryption with SHA-2. 
So literally yes, you would need to check your server key store  / trust store and make sure it includes SHA-2 compatible certs.
You may refer to this PayPal microsite for detailed instructions, these information are open to merchants seeing any impact
","311","<php><paypal><paypal-ipn><sha256>","4","3","3","2015-09-16 09:44:23","","0","","","","","2015-09-14 09:42:08",""
"32561649","Coming SHA-256 : Do I need to update my IPN listener that does not use a secure URL?","I currently use only payment buttons, and an IPN php script I got from https://github.com/paypal/ipn-code-samples that is dated Nov 10, 2014.
My script simply posts back to www.paypal.com without encryption.
Is encryption becoming mandatory ?
","PayPal sandbox environment is supporting SHA2(SHA-256) only. You may make test in below link (need to login with your Live credential) to check if your server could deal with the upgrade now.
https://developer.paypal.com/developer/ipnSimulator/
If the test passes, that means your server is able to deal with SHA-2 and you do not need to upgrade the certificate any more. If it fails, please contact your server provider to help you upgrade the SSL certificate.
","311","<php><paypal><paypal-ipn><sha256>","4","0","3","2015-09-16 09:44:23","","0","","","","","2015-09-14 09:42:08",""
"43685361","Matching Hashed and Salted Passwords from Database","I have built a custom realm using Apache Shiro to account for our application having more than one location for user accounts and stored passwords. Originally I was using Shiro to hash and match the passwords, but the custom realm means I have to do some of these things manually.
After looking I came across this code:
public String sha256(String base) {
    try{        
        MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
        byte[] hash = digest.digest(base.getBytes(""UTF-8""));
        StringBuffer hexString = new StringBuffer();

        for (int i = 0; i < hash.length; i++) {
            String hex = Integer.toHexString(0xff & hash[i]);
            if(hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }

        return hexString.toString();
    } catch(Exception ex){
       throw new RuntimeException(ex);
    }
}

I added a salt and it works great, so I'm wondering if I can just store the returned value in a database when creating a username\password pair and then later retrieve it to match the provided password (plus the salt). That seems like it should work, but when I did this previously with Shiro the SHA256 password hasher did NOT return the same value with the same base password each time, yet it was able to always match it. I wanted to make sure I'm following a valid (and most importantly secure) methodology for handling passwords.
","A couple things:
You can create a hash of a string buy using something like: new Sha256Hash(password, salt)
Take a look at this example
If you have multiple places your users are stored, you should probably have a different realm for each store .
","309","<java><authentication><shiro><sha256>","1","0","1","2017-05-02 11:50:13","","0","3","1393620","","2017-04-28 17:24:55","2017-04-28 16:58:19",""
"49140944","Can we calculate the difference between two hash checksums?","More exactly, let's say we have two images and we do the MD5 or SHA-256 of each.
Is there an algorithm to calculate the percentage difference/similarity between the two checksums? To say image_1 is 26% similar to image_2 ?
I don't necessarily want MD5 or SHA, any other fast mechanism will do.
*LE : ANY fast mechanism for determining percentage of difference/similarity between two large data strings will do (I think Damerau-Levenshtein would prove slow)
","Can you calculate the difference between two hashes?
Sure.
Can you use that difference to infer anything about the original files?
No, that's the entire point of a cryptographic hash; even a minor change should generate a significantly different hash. Otherwise they would lose their usefulness in security related aspects.
","306","<javascript><hash><md5><checksum><sha256>","0","1","1","2018-03-06 22:47:20","","4","","2637919","","2018-03-06 22:45:46","2018-03-06 22:20:13",""
"41255879","How can I create SHA256 with two keys in swift , ios","we have used SHA256 in our objective C project using IGSignature library. 
now we are converting objective-C project to swift. used common crypto, but it use only one key. if anyone knows about this hope your help.
","Hope following code will help you....
    var post = String()
    post += ""FIRSTKEY=\(""value"")""
    post += ""SECONDKEY=\(""value"")""



    let shaEncode =   self.sha256(string: post)
    print(""SHA-> \(datastring)"")

func sha256(string: String) -> Data? {
    guard let messageData = string.data(using:String.Encoding.utf8) else { return nil }
    var digestData = Data(count: Int(CC_SHA256_DIGEST_LENGTH))

    _ = digestData.withUnsafeMutableBytes {digestBytes in
        messageData.withUnsafeBytes {messageBytes in
            CC_SHA256(messageBytes, CC_LONG(messageData.count), digestBytes)
        }
    }
    return digestData
}

","305","<ios><swift3><sha256>","0","0","1","2016-12-21 09:56:21","","0","","","","","2016-12-21 05:40:06",""
"46408363","Best suitable hashbyte algorithm for SQL Server 2008 R2","I have source table with 399 columns in SQL Server 2008 R2.
I want to add one more column with hashbyte on above table and store on the database which is SQL Server 2016 using SSIS package.
PS - I can't ask source owner to upgrade his/her SQL Server to 2016 hence could not use SHA2_256. also few points are :
 1. There are couple of tables having more than 200 columns, and one is having 
    exact 399 columns.
 2. I had use MD5 algorithm, but I read MD5 might give you deprecated value in 
    SQL 2016. Hence it is advisable to use only SHA2_256 or SHA2_512. 
 3. About the code, its simple truncate and load into destination tables with 
    some transformations. 
 4. I am using HASH to identify entire row for update or insert as CHECKSUM is 
    not reliable.
","","305","<sql-server-2008-r2><sql-server-2016><sha256><hashbytes>","0","","0","2017-09-26 03:00:20","","4","","7815038","","2017-09-26 03:00:20","2017-09-25 15:00:02",""
"34945096","PBE With SHA256 and tripleDES Cryptor change byte size?","I'm using an updated version of Java's PBEWithMD5andDES to encrypt the ID of a customer. 
My new version is PBEWithSHA256AndTripleDES. This works good but I have one issue with it. The end result of my encrypted ID is always 8 bytes which results in an encryption of something like (this just some random number and result to show what I mean) 56872 = 84 FE A5 01 5D 6E 4F 98. 
Is it possible to adjust the end result? so that 56872 would result in an encrypted result of say 84 FE A5 01 5D 6E 4F 98 87 FF 3A AA B9 F1?
","After investigating the workings of DES, TripleDES and AES I somewhat learned how they work and now understand that it's practically always 8 bytes for DES and TripleDES. 
In order to go to 16 bytes I updated my implementation to now use AES cryptography. 
","304","<c#><encryption><sha256><tripledes>","0","-1","1","2016-01-24 16:13:00","34978097","0","","1055690","","2016-01-24 16:13:00","2016-01-22 11:00:28",""
"16111978","Hash computation in Google safe browsing V2 implementation","I am trying to test my implementation of the google safe browsing api version 2. 
To test a part of my code that sends requests for full hashes for a given prefix, I captured a short session of traffic where I visited a known currently blacklisted url ""utfvq.portrelay.com"" and firefox sent a request to google for full hashes and google responded with a list of hashes. 
The prefixes firefox sent are(Hex encoded) : 2e2e372e,2e26382e,2e2e382e,6545382e
The 4 matching full hashes it received are :  
2e26382e2e2e436d2e2e2e2e322e3b2e2e2e2e2e4a2e2e2e7b2e2e2e6a492e2e
6545382e2e2a5b792e652e2e2e2e2e2e2e2e70442e7d2e2e2e222e2e502e2e2e
2e2e382e6c36252e2e522e2e592e2e2e2e2e3f592e2e2e782e2e572e4e2e2e2e
2e2e372e2e2e2e2e55682e542e51622e552e2e68352e2e2e2e2e2e2e2ed2755

In my implementation however, the hash prefixes I generate do not seem to match the hash prefixes that firefox sent. Hence, I am not getting any full hash matches in my client. 
I have followed googles description of the API closely and made sure the previous steps such as url canonicalization are implemented properly. 
The url, SHA256 hashes I get are 
utfvq.portrelay.com/  : 5c2383012676e63656c13167e1cc4f55309c4e1b73c22556e36ec1487e8b8697
portrelay.com/ : 842638fe92ee436da7808d0232d03bcaa0f5c8b64ad5eee97bf28dbb6a49f8ae
Can some one point out why the hashes do not match. I have followed the API guide to the best of my knowledge. Is there some implementation detail I am missing ?
","It turned out to be a basic character encoding error on my part. 
The SHA hashes I compute in my code are correct. The way I looked at the hashes that firefox sent was wrong. I copied the characters from a text file where it stored any byte not with in regular ascii range as a dot(.). Then I converted these to Hex values which is a kind of ""lossy"" encoding. This is why there were so many ""2e"" hex chars in the hashes. Now I am using just the original bytes and they match.  
","304","<api><sha256><safe-browsing>","0","0","1","2013-04-29 18:11:09","","0","","1190934","","2013-04-19 19:21:27","2013-04-19 19:15:45",""
"45343723","Using AWS S3 version 2 signature with SHA256?","I try to upload a file towards AWS S3 bucket through cURL.
With version 2 authentication and SHA1 it works well, but I'm not able to make it works with SHA256 (and version 2).
According to the online documentation normally we can do such a thing : 
The hash-based protocol used to calculate the signature. This can be either HMAC-SHA1 or HMAC-SHA256 for Signature Version 2. 

(http://docs.aws.amazon.com/general/latest/gr/signature-version-2.html)
Does anyone know if it's possible to use SHA256 with version 2 signature ? 
","","303","<amazon-web-services><curl><amazon-s3><sha256>","0","","0","2017-07-27 07:11:10","","2","","","","","2017-07-27 07:11:10",""
"34322823","How to lower the time to brute force a hash sha256 based on a chain?","I have a list of sha256 hashes
hash1
hash2
hash3
hash4

Each hash value is a hash from the above value(hash(""sha256"",""hash1"") = hash2). I need to brute force the one thats next in the line(hash0). Is there a way I can lower the time of bruteforcing it knowing that its value hashed equals to the net one in the chain? If so, how can it be done? Or in the worst case scenario, how much time would i take to decrypt it?
Pardon me I am a really bad explainer.
Thank You in advance.
","It might take a while:
On an iPhone 6s SHA256 takes 2.5ms.
Seconds in a year: 23.82K or about 2^25.
Dividing yields 10G or 2^34  hashes per year.
Dividing again 2^256 / 2^34 = 2^222 or in decimal about
100,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 years.
Look at the bright side, that is much less than a google years!
This is why it is said that brute forcing SHA256 is not possible.
But you might get lucky and it will take less than a seconds. Do you feel lucky?
","302","<hash><sha256>","1","0","1","2015-12-16 22:37:31","34323141","1","","","","","2015-12-16 21:55:42",""
"45689367","How to edit SHA256 in java","It was hard for me to explain in the title, but I would like to create a program which takes certain text, say hello0, hash it in sha256, and see if it has two leading zeros. If so, print hash. If not, make it hello1, then hello2 and so on until two leading zeros are found. Here is a few ways I found on how to create my sha256 hash from text:
import java.security.MessageDigest;

public class sha 
{
public static void main(String[] args)throws Exception
{

int yeah = 40;
String password = ""previousblock14currentblock"" + yeah;


    MessageDigest md = MessageDigest.getInstance(""SHA-256"");
    md.update(password.getBytes());

    byte byteData[] = md.digest();

    //convert the byte to hex format method 1
    StringBuffer sb = new StringBuffer();
    for (int i = 0; i < byteData.length; i++) {
     sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
    }

    System.out.println(""Hex format : "" + sb.toString());

    StringBuffer hexString = new StringBuffer();
 for (int i=0;i<byteData.length;i++) {
  String hex=Integer.toHexString(0xff & byteData[i]);
      if(hex.length()==1) hexString.append('0');
      hexString.append(hex);
 }
 System.out.println(""Hex format : "" + hexString.toString());

}
}

When you run the code you receive Hex format : 0a0a30b1031fa60b8fa9478a070b03333df75017fd61c1b1c7e16bd929831ef5. This has one leading zero but I want two. I don't know what to do next, but i believe I set everything up correctly. How would I go about creating a while or if statement, each time adding yeah by 1? Would this be the best way of doing it? 
The issue is that when I create a while loop the sha256 hash wont update, so it always prints 0a0a30b1031fa60b8fa9478a070b03333df75017fd61c1b1c7e16bd92983‌​1ef5. I'm wondering if I'm doing something wrong and wanted to see how someone else would do it.
thank you for your help.
","public class Sha {

    private static String byteArrayToHexString(byte[] array) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < array.length; i++) {
            sb.append(Integer.toString((array[i] & 0xff) + 0x100, 16).substring(1));
        }
        return sb.toString();
    }

    public static void main(String[] args) throws Exception {

        final int MAX_PASS_ATTEMPTS = 40000;

        final String PASS_PREFIX = ""previousblock14currentblock"";

        MessageDigest md = MessageDigest.getInstance(""SHA-256"");

        for (int i = 0; i < MAX_PASS_ATTEMPTS; i++) {
            String password = PASS_PREFIX + i;

            md.reset();
            md.update(password.getBytes());
            byte[] hash = md.digest();

            //System.out.println(byteArrayToHexString(hash));

            if (hash[0] == 0 && hash[1] == 0) {
                System.out.println(""Password: "" + password);
                System.out.println(""Hash: "" + byteArrayToHexString(hash));
                return;
            }
        }       

        System.out.println(""No luck after "" + MAX_PASS_ATTEMPTS + "" tries."");
    }
}

By the way, this is the great resource to learn about Java control flow statements.
","302","<java><hash><sha256>","-1","1","1","2017-08-15 16:33:43","45689738","4","4","8321959","","2017-08-15 16:33:43","2017-08-15 08:38:46",""
"17444061","SHA256 HMAC does not give the expected answer","String stringToSign = ""GET"" + ""\n"" +
                    ""webservices.amazon.com"" + ""\n"" +
                    ""/onca/xml"" + ""\n"" +
                    ""AWSAccessKeyId=AKIAIOSFODNN7EXAMPLE&ItemId=0679722769&Operation=ItemLookup&ResponeGroup=ItemAttributes%2COffers%2CImages%2CReviews&Service=AWSECommerceService&Timestamp=2009-01-01T12%3A00%3A00Z&Version=2009-01-06"";


    SecretKeySpec keySpec = new SecretKeySpec(
            ""1234567890"".getBytes(),
            ""HmacSHA256"");

    Mac mac = Mac.getInstance(""HmacSHA256"");
    mac.init(keySpec);


    byte[] result = mac.doFinal(stringToSign.getBytes());
    String encodedResult = Base64.encodeBase64String(result);
    System.out.println(""encodedResult: ""+encodedResult);

    String urlEncodedResult = URLEncoder.encode(encodedResult, ""UTF-8"").replace(""+"", ""%2B"").replace(""*"", ""%2A"").replace(""%7E"", ""~"");
    System.out.println(""ulrEncodedResult: ""+urlEncodedResult);

This is for the REST authentication for AWS. The result I get is:
ulrEncodedResult: k1T%2FqvVoXgEvmdFhTEh71vLDznqEVCyKcslA5RRSB6s%3D
The expected result is:
ulrEncodedResult: M%2Fy0%2BEAFFGaUAp4bWv%2FWEuXYah99pVsxvqtAuC8YN7I%3D
All the exact steps for authentication are show here:http://docs.aws.amazon.com/AWSECommerceService/2011-08-01/DG/rest-signature.html
Can anyone spot the mistake that I am making? 
","One concern is that this:
""1234567890"".getBytes()

and this
stringToSign.getBytes()

don't specify the character encoding used (e.g. UTF8). It'll be dependent on your platform or JVM settings, and that may be different from what you want (which is, I suspect, UTF8). I would prefer to use the getBytes(CharSet) variant.
","299","<java><hmac><sha256>","0","0","1","2013-07-03 09:15:33","","0","2","","","","2013-07-03 09:13:49",""
"16017672","I'm creating a j2me app to generate one time password in netbeans 7.3.i need to do compute sha-256 hash on a string","otp=otp.concat(imei).concat(imsi).concat(username).concat(password).concat(hr).concat(min).concat(day).concat(year).concat(month).concat(dday);
            MessageDigest md = MessageDigest.getInstance(""SHA-256"");
            md.update(otp.getBytes(),0,otp.getBytes().length);
            byte byteData[]=null;
            md.digest(byteData,0,32);
            StringBuffer sb = new StringBuffer();
            for (int  j= 0; j < byteData.length; j++) {
            sb.append(Integer.toString((byteData[j] & 0xff) + 0x100, 16).substring(1));
            }

This code works in a java pgm but when i run this in the emulator,i get this exception:
The application has unexpectedly quit. Contact the application provider to resolve the issue.
SHA-256

Pls.help me
","","299","<java-me><sha256>","0","","0","2013-04-15 14:49:50","","2","3","1613422","","2013-04-15 14:49:50","2013-04-15 14:25:57",""
"37239143","SHA256 signature generation not matching: Java vs Objective C","I am converting a Java code to Objective C to match signature in request with SHA256.
Here are my inputs and outputs:

#

Java:
SecretKeySpec key = new SecretKeySpec(client_secret.getBytes(""UTF-8""), ""HmacSHA256"");

Mac mac = Mac.getInstance(""HmacSHA256""); 

mac.init(key); 

byte[] bytes = mac.doFinal(baseString.getBytes(""UTF-8""));

String signature = new String(Base64.encodeBase64(bytes));

log.info(""signature=""+signature);

Output is: signature=q4T4uuz482U+guKa8oRn8Enq9xJjSRYvQlYxF6TSAFQ=
Obj C:
-- (NSString*) HMACWithSec:(NSString*) secret data:(NSString*) data {

    const char *cKey = [secret cStringUsingEncoding:NSASCIIStringEncoding];

    //Making it NSUTF8StringEncoding does not help

    const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];

    unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];

    CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

    NSData *hash = [[NSData alloc] initWithBytes: cHMAC length:CC_SHA256_DIGEST_LENGTH];

    // I tried making a Hex string out of the bytes and then covering it back to ASCII or UTF-8, did not work.

    NSString* signature = [hash base64EncodedStringWithOptions:0];

    //All base 64 methods returns same. I found this as most convenient.

    NSLog(@""%@"", signature);

    return signature;
}

Output is: HcqgsyTj0DRYlGT1QV9L48LcvX9Zc+eX8ShXjJQEDKc=
#
I tried the following too:
NSString *s8 = [NSString stringWithCharacters:(const char *)cHMAC length:sizeof(cHMAC)];

Output is arbitrary chars.
Explanation: 
Both inputs are same for secret and data. I verified with cKey and cData. After I am getting the bytes in obj c into ""cHMAC"". Making it a NSData and then getting the base64 string is not generating the same string.
Question:
What did I miss out? Any insight helps.
","","299","<objective-c><sha256>","0","","0","2016-05-15 15:47:24","","3","4","3830346","","2016-05-15 15:47:24","2016-05-15 13:56:15",""
"46093811","How to convert this java hash sha 256 method to javascript using jssha to be used in node","I am trying to override loopback deafult password hashing i have previously posted in Stack but to no avail
How to override the default password hashing method and validation method of loopback?
I have this Java method 
 public static String digest(String string, String salt) throws Exception {
    MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
    digest.reset();
    digest.update(salt.getBytes(""UTF-8""));

    byte[] btPass = digest.digest(string.getBytes(""UTF-8""));
    int iter = 1000;
    for (int i = 0; i < iter; i++) {
        digest.reset();
        btPass = digest.digest(btPass);
    }
    HexBinaryAdapter adapter = new HexBinaryAdapter();
    return adapter.marshal(btPass);
}

How to use this same in Javascript Node js using jssha 1.6.0
I tried using this but the hash seems to be different for both methods can anyone help me on this 
var shaObj = new jsSHA(plain + salt, 'TEXT');
//console.log('passphrase : text', text);
//console.log('passphrase : salt', salt);
//salt = salt || '';
//var shaObj = new jsSHA(salt + text + massiveSalt, 'TEXT');
console.log(shaObj.getHash('SHA-256', 'HEX'));

this.$password = plain;
console.log(plain);

","        var shaObj = new jsSHA(""salt""+plain, ""BYTES"");
        var hash = shaObj.getHash(""SHA-256"", ""HEX"");

        for (var i = 0; i < 1000; i++) {
            shaObj = new jsSHA(hash, ""HEX"");
            hash = shaObj.getHash(""SHA-256"", ""HEX"");
        }

        console.log(hash);

This should work 
","299","<javascript><java><node.js><hash><sha256>","0","0","1","2017-09-07 11:26:37","","0","","","","","2017-09-07 10:16:28",""
"47309060","How to Generate PKCS7 for Sha256 hash of any file or plain text in java and verification process?","Code for Pkcs7 generation 
@SuppressWarnings({ ""unchecked"", ""rawtypes"" })
public static byte[] createDetachedSignature() throws NoSuchAlgorithmException, NoSuchProviderException, DSCException, InvalidKeyException, SignatureException, CertificateEncodingException, OperatorCreationException, CMSException, IOException{

    //byte[] contentToSign = generateHash(""Test"".getBytes(Charset.forName(""UTF-8""))).getBytes();
    //System.out.println(""Original Content :: ""+new String(contentToSign));

    DSCUtil.initKeyStore();
    DSCertificate dscCert = DSCUtil.findBySerialNumber(new BigInteger(""1396617567""));

    PrivateKey privKey = dscCert.getPrivateKey();
    Signature signature = Signature.getInstance(""SHA256WithRSA"");
    signature.initSign(privKey);
    signature.update(""Test"".getBytes(Charset.forName(""UTF-8"")));

    //X509Certificate cert = dscCert.getCertificate();
   // List certList = new ArrayList();
    CMSTypedData msg = new CMSProcessableByteArray(signature.sign());
    //certList.add(cert);

    Store certs = new JcaCertStore(Arrays.asList(dscCert.getCertChain()));
    CMSSignedDataGenerator gen = new CMSSignedDataGenerator();
    ContentSigner sha1Signer = new JcaContentSignerBuilder(""SHA256withRSA"").build(privKey);
    gen.addSignerInfoGenerator(
            new JcaSignerInfoGeneratorBuilder(new JcaDigestCalculatorProviderBuilder().build())
                    .build(sha1Signer, dscCert.getCertificate()));
    gen.addCertificates(certs);
    CMSSignedData sigData = gen.generate(msg, true);

    //BASE64Encoder encoder = new BASE64Encoder();


    String signedContent = Base64.encodeBase64String((byte[]) sigData.getSignedContent().getContent());
    System.out.println(""Signed content: "" + signedContent + ""\n"");

    String envelopedData = Base64.encodeBase64String(sigData.getEncoded());
    System.out.println(""Enveloped data: "" + envelopedData);


    return envelopedData.getBytes();
}

Code for verification
@SuppressWarnings({ ""deprecation"", ""rawtypes"" })
public static boolean verifyTextwithPKCS7(String input, byte[] pkcs7Resp) throws NoSuchAlgorithmException, NoSuchProviderException {
    boolean result = false;
    if (pkcs7Resp.length <= 0) {
        return result;
    }
    //String hash = generateHash(input.getBytes(Charset.forName(""UTF-8"")));
    try {
        CMSSignedData cms = new CMSSignedData(new CMSProcessableByteArray(input.getBytes()),
                pkcs7Resp);
        System.out.println(new String((byte[]) cms.getSignedContent().getContent()));
        CertStore certStore = cms.getCertificatesAndCRLs(""Collection"", ""BC"");
        SignerInformationStore signers = cms.getSignerInfos();
        Collection c = signers.getSigners();
        Iterator it = c.iterator();
        while (it.hasNext()) {
            SignerInformation signer = (SignerInformation) it.next();
            Collection certCollection = certStore.getCertificates(signer.getSID());
            Iterator certIt = certCollection.iterator();
            X509Certificate cert = (X509Certificate) certIt.next();
            result = signer.verify(cert, ""BC"");
            System.out.println(new String(signer.getContentDigest()));
        }
    } catch (Exception e) {
        e.printStackTrace();
        result = false;
    }
    return result;
}

Please tell me either any problem in Generation of PKCS#7 or in verification process.
if my process is wrong then please suggest me the right mechanism with some code snippet. 
","","298","<java><sha256><pkcs#7><java-security><message-digest>","0","","0","2017-11-15 20:59:34","","3","","472495","","2017-11-15 20:59:34","2017-11-15 13:45:58",""
"47227706","openssl dgst -sha256 -hmac and JAVA solution differ","I want to replicate: 
echo -n ""a"" | openssl dgst -binary -sha256 -hmac ""a""

in Groovy (Java). 
So far I've done this: 
def sha = Mac.getInstance(""HmacSHA256"")
SecretKeySpec secret_key = new SecretKeySpec(""a"".getBytes(), ""HmacSHA256"")
sha.init(secret_key)
def shaCrypted = new String(sha.doFinal('a'.getBytes()))
println(shaCrypted)

but unfortunately I don't get the same results. 
Can anyone tell me what I am missing? 
Thanks in advance!
","","298","<java><command><sha256><hmac><hmacsha1>","1","","0","2017-11-10 17:42:18","","3","2","608639","","2017-11-10 17:42:18","2017-11-10 16:56:42",""
"52851157","AWS KMS and on Premises HSM","Can anyone define the process flow for data encrypt and decrypt for me running a local HSM in the data centre connected via IPSEC tunnel to AWS.
Using our Local HSM for these actions. What is the process flow for encrypting and decrypting objects, data? The data is obviously not sent down the line to the HSM, but what exactly is? Planning on keeping the CMKs on prem in the local HSM.
","
The data is obviously not sent down the line to the HSM, but what exactly is?

Encrypting all data through a local HSM or even KSM directly woudn't be very efficient.  So what KMS or your local HSM should encrypt is the encryption key.
In KMS or your local HSM you can generate a master service/purpose key. 
You can encrypt data using a random encryption key and then encrypt the data encryption key using the KMS / HSM (with the service key). Just store the master key id, encrypted data key and IV next to the encrypted content.
","298","<amazon-web-services><encryption><sha256><hsm><aws-kms>","0","0","1","2018-10-17 16:11:00","","0","","","","","2018-10-17 09:08:45",""
"1323134","What is wrong with this ""StretchKey"" implementation?","I'm trying to create a Delphi version of this algorithm:
void PWSfileV3::StretchKey(const unsigned char *salt, unsigned long saltLen,
                           const StringX &passkey,
                           unsigned int N, unsigned char *Ptag)
{
  /*
  * P' is the ""stretched key"" of the user's passphrase and the SALT, as defined
  * by the hash-function-based key stretching algorithm in
  * http://www.schneier.com/paper-low-entropy.pdf (Section 4.1), with SHA-256
  * as the hash function, and N iterations.
  */
  int passLen = 0;
  unsigned char *pstr = NULL;

  ConvertString(passkey, pstr, passLen);
  unsigned char *X = Ptag;
  SHA256 H0;
  H0.Update(pstr, passLen);
  H0.Update(salt, saltLen);
  H0.Final(X);

#ifdef UNICODE
  trashMemory(pstr, passLen);
  delete[] pstr;
#endif

  ASSERT(N >= MIN_HASH_ITERATIONS); // minimal value we're willing to use
  for (unsigned int i = 0; i < N; i++) {
    SHA256 H;
    // The 2nd param in next line was sizeof(X) in Beta-1
    // (bug #1451422). This change broke the ability to read beta-1
    // generated databases. If this is really needed, we should
    // hack the read functionality to try both variants (ugh).
    H.Update(X, SHA256::HASHLEN);
    H.Final(X);
  }
}

Update: (Missing function)
void ConvertString(const StringX &text,
                   unsigned char *&txt,
                   int &txtlen)
{
  LPCTSTR txtstr = text.c_str(); 
  txtlen = text.length();

#ifndef UNICODE
  txt = (unsigned char *)txtstr; // don't delete[] (ugh)!!!
#else
#ifdef _WIN32
  txt = new unsigned char[3*txtlen]; // safe upper limit
  int len = WideCharToMultiByte(CP_ACP, 0, txtstr, txtlen,
    LPSTR(txt), 3*txtlen, NULL, NULL);
  ASSERT(len != 0);
#else
  mbstate_t mbs;
  memset(&mbs, '\0', sizeof(mbs));
  size_t len = wcsrtombs(NULL, &txtstr, 0, &mbs);
  txt = new unsigned char[len+1];
  len = wcsrtombs((char *)txt, &txtstr, len, &mbs);
  ASSERT(len != (size_t)-1);
#endif
  txtlen = len;
  txt[len] = '\0';
#endif /* UNICODE */
}

Here is what I've got (D2009 version): 
(Please note: T256BitArray is defined as Array[0..31] of byte)
procedure StretchKey(Const Salt:T256BitArray; Const Passkey:string; Const Iterations:LongWord; Var KeyResult:T256BitArray);
var
   pStr : RawByteString;
   wHash : THash_sha256;
   loop : integer;
begin
  pStr := AnsiString(PassKey);

  wHash := THash_SHA256.Create;
  try
     wHash.Init;
     wHash.Calc(pStr[1], Length(pStr));
     wHash.Calc(Salt, Length(Salt));
     wHash.Done;
     PStr := wHash.DigestStr;
  finally
     FreeAndNil(wHash);
  end;

  for loop := 0 to Iterations-1 do
  begin
     wHash := THash_sha256.Create;
     try
        wHash.Init;
        wHash.Calc(PStr[1], wHash.DigestSize);
        wHash.Done;
        PStr := wHash.DigestStr;
     finally
        FreeAndNil(wHash);
     end;
  end;

  move(pStr[1], KeyResult, sizeof(KeyResult));
end;

The original code snippet is from the Password Safe opensource application.
I'm attempting to open an existing Password Save (v3) database for reading.
It appears that it doesn't matter what I do I can not make the algorithm generate the required hash.  
In the above Delphi snippet I'm using the DEC v5.2 2009 component set.  I've also tried the DCPcrypt library.  Funny enough I get the same values from both libraries but nothing comes out being compatible with the hash from the PWSv3 file.
The SHA256 components I've used both pass the SHA256 test vector hashes so I'm assuming that it's something I've done wrong in recoding the method.
Am I missing something?
SOLVED: Everything is correct.  The problem comes in with the converstion of the passkey string.  I've figured out that I have to use the WideCharToMultiByte function to get the correct code page conversion.
","The loop in the lower part should not have a wHash.Init; in it.
","296","<delphi><delphi-2009><sha256>","2","0","2","2009-09-15 16:02:28","1428099","3","","84634","","2009-08-25 17:58:22","2009-08-24 15:42:01",""
"1323134","What is wrong with this ""StretchKey"" implementation?","I'm trying to create a Delphi version of this algorithm:
void PWSfileV3::StretchKey(const unsigned char *salt, unsigned long saltLen,
                           const StringX &passkey,
                           unsigned int N, unsigned char *Ptag)
{
  /*
  * P' is the ""stretched key"" of the user's passphrase and the SALT, as defined
  * by the hash-function-based key stretching algorithm in
  * http://www.schneier.com/paper-low-entropy.pdf (Section 4.1), with SHA-256
  * as the hash function, and N iterations.
  */
  int passLen = 0;
  unsigned char *pstr = NULL;

  ConvertString(passkey, pstr, passLen);
  unsigned char *X = Ptag;
  SHA256 H0;
  H0.Update(pstr, passLen);
  H0.Update(salt, saltLen);
  H0.Final(X);

#ifdef UNICODE
  trashMemory(pstr, passLen);
  delete[] pstr;
#endif

  ASSERT(N >= MIN_HASH_ITERATIONS); // minimal value we're willing to use
  for (unsigned int i = 0; i < N; i++) {
    SHA256 H;
    // The 2nd param in next line was sizeof(X) in Beta-1
    // (bug #1451422). This change broke the ability to read beta-1
    // generated databases. If this is really needed, we should
    // hack the read functionality to try both variants (ugh).
    H.Update(X, SHA256::HASHLEN);
    H.Final(X);
  }
}

Update: (Missing function)
void ConvertString(const StringX &text,
                   unsigned char *&txt,
                   int &txtlen)
{
  LPCTSTR txtstr = text.c_str(); 
  txtlen = text.length();

#ifndef UNICODE
  txt = (unsigned char *)txtstr; // don't delete[] (ugh)!!!
#else
#ifdef _WIN32
  txt = new unsigned char[3*txtlen]; // safe upper limit
  int len = WideCharToMultiByte(CP_ACP, 0, txtstr, txtlen,
    LPSTR(txt), 3*txtlen, NULL, NULL);
  ASSERT(len != 0);
#else
  mbstate_t mbs;
  memset(&mbs, '\0', sizeof(mbs));
  size_t len = wcsrtombs(NULL, &txtstr, 0, &mbs);
  txt = new unsigned char[len+1];
  len = wcsrtombs((char *)txt, &txtstr, len, &mbs);
  ASSERT(len != (size_t)-1);
#endif
  txtlen = len;
  txt[len] = '\0';
#endif /* UNICODE */
}

Here is what I've got (D2009 version): 
(Please note: T256BitArray is defined as Array[0..31] of byte)
procedure StretchKey(Const Salt:T256BitArray; Const Passkey:string; Const Iterations:LongWord; Var KeyResult:T256BitArray);
var
   pStr : RawByteString;
   wHash : THash_sha256;
   loop : integer;
begin
  pStr := AnsiString(PassKey);

  wHash := THash_SHA256.Create;
  try
     wHash.Init;
     wHash.Calc(pStr[1], Length(pStr));
     wHash.Calc(Salt, Length(Salt));
     wHash.Done;
     PStr := wHash.DigestStr;
  finally
     FreeAndNil(wHash);
  end;

  for loop := 0 to Iterations-1 do
  begin
     wHash := THash_sha256.Create;
     try
        wHash.Init;
        wHash.Calc(PStr[1], wHash.DigestSize);
        wHash.Done;
        PStr := wHash.DigestStr;
     finally
        FreeAndNil(wHash);
     end;
  end;

  move(pStr[1], KeyResult, sizeof(KeyResult));
end;

The original code snippet is from the Password Safe opensource application.
I'm attempting to open an existing Password Save (v3) database for reading.
It appears that it doesn't matter what I do I can not make the algorithm generate the required hash.  
In the above Delphi snippet I'm using the DEC v5.2 2009 component set.  I've also tried the DCPcrypt library.  Funny enough I get the same values from both libraries but nothing comes out being compatible with the hash from the PWSv3 file.
The SHA256 components I've used both pass the SHA256 test vector hashes so I'm assuming that it's something I've done wrong in recoding the method.
Am I missing something?
SOLVED: Everything is correct.  The problem comes in with the converstion of the passkey string.  I've figured out that I have to use the WideCharToMultiByte function to get the correct code page conversion.
","I've solved the issue.
Everything with my implementation is correct. The problem comes in with the converstion of the passkey string. I've figured out that I absolutely had to use the WideCharToMultiByte function to get the correct code page conversion.
Here is the corrected code:
procedure StretchKey(Const Salt:T256BitArray; Const Passkey:string; Const Iterations:LongWord; Var KeyResult:T256BitArray);
var
   pStr : RawByteString;
   wHash : THash_sha256;
   loop : integer;
   wStr : AnsiString;
   wLen : integer;
begin
  wLen := 3*length(PassKey);
  SetLength(wStr, wLen);

  wLen := WideCharToMultiByte(GetACP, 0, PChar(PassKey), length(PassKey), PAnsiChar(wStr), wLen, nil, nil);
  SetLength(wStr, wLen);

  pStr := wStr;

  wHash := THash_SHA256.Create;
  try
     wHash.Init;
     wHash.Calc(pStr[1], Length(pStr));
     wHash.Calc(Salt, Length(Salt));
     wHash.Done;
     PStr := wHash.DigestStr;
  finally
     FreeAndNil(wHash);
  end;

  for loop := 0 to Iterations-1 do
  begin
     wHash := THash_sha256.Create;
     try
        wHash.Init;
        wHash.Calc(PStr[1], wHash.DigestSize);
        wHash.Done;
        PStr := wHash.DigestStr;
     finally
        FreeAndNil(wHash);
     end;
  end;

  move(pStr[1], KeyResult, sizeof(KeyResult));
end;

","296","<delphi><delphi-2009><sha256>","2","0","2","2009-09-15 16:02:28","1428099","3","","84634","","2009-08-25 17:58:22","2009-08-24 15:42:01",""
"55017754","Mask information in CSV file using sha256 in Python","I have a CSV file that contains Name, Address, and Password. I want to mask Address and password using sha256 in Python.
Here is what I have tried so far:
import hashlib
import csv

def hash_pw(input_file_name, output_file_name): 
    hash_lookup = {} 

    with open(input_file_name, newline='') as f_input, open(output_file_name, 'w', newline='') as f_output: 
        csv_input = csv.reader(f_input)
        csv_output = csv.writer(f_output) 

        for user, hash in csv_input: 
            csv_output.writerow([user, hash_lookup[hash]]) 

hash_pw('input.csv', 'output.csv')

I don't know how to specify to mask only address and password columns?
Any help would be appreciated. Thank you   
","First of all, as your input.csv file contains three items, your loop needs to read three items. You could then have a function that takes text and returns the hashed values. You can then use this function to hash the address and password fields.
I suggest returning the hex digest so that it can be easily written to your output.csv file:
import hashlib
import csv

def hash(text):
    return hashlib.sha256(text.encode('utf-8')).hexdigest()


def hash_file(input_file_name, output_file_name): 
    hash_lookup = {} 

    with open(input_file_name, newline='') as f_input, open(output_file_name, 'w', newline='') as f_output: 
        csv_input = csv.reader(f_input)
        csv_output = csv.writer(f_output) 
        csv_output.writerow(next(csv_input))    # Copy the header row to the output

        for user, address, password in csv_input: 
            csv_output.writerow([user, hash(address), hash(password)]) 

hash_file('input.csv', 'output.csv')

So if your input.csv contained the following:
Name,Address,Password
Fred,1 Rock Close,MyPassword
Wilma,1 Rock Close,Password1234

The output.csv would then look like:
Name,Address,Password
Fred,fc3b252cf37b3d247a38068a5f58cc8fc6b9ea3e938831c6d90f8eb9e923d782,dc1e7c03e162397b355b6f1c895dfdf3790d98c10b920c55e91272b8eecada2a
Wilma,fc3b252cf37b3d247a38068a5f58cc8fc6b9ea3e938831c6d90f8eb9e923d782,a0f3285b07c26c0dcd2191447f391170d06035e8d57e31a048ba87074f3a9a15

As you can see, the values for the address are the same. The header row can be copied first before hashing the remaining rows.
","296","<python-3.x><csv><hash><mask><sha256>","1","0","1","2019-03-07 15:25:07","55021591","4","1","4985733","","2019-03-06 11:08:31","2019-03-06 07:30:30",""
"31009358","TLS MAC message verification","I'm developing a SSL de-cipher in python but I'm having some problems on HMAC verification:
I've extracted all keyring related material (client IV, MAC, Key and Server IV, MAC, key). 
When I receive the first Application_Data message (0x17), I am able to decrypt it, but unable to verify message integrity.
On RFC 2246 (https://www.ietf.org/rfc/rfc2246.txt), tells:

The MAC is generated as:
   HMAC_hash(MAC_write_secret, seq_num + TLSCompressed.type +
                 TLSCompressed.version + TLSCompressed.length +
                 TLSCompressed.fragment));

where ""+"" denotes concatenation.
seq_num
         The sequence number for this record.
hash
         The hashing algorithm specified by
         SecurityParameters.mac_algorithm.

Taking this as an example:
Chosen cipher_suite is TLS_RSA_WITH_AES_256_CBC_SHA256

client_mac = ""some random stuff""
message_type = 0x17
message_version = 0x0303
encrypted_message_length = 1184 (IV|Message|MAC|Offset)
decrypted_message_length = 1122 (removing IV, MAC and offset)
message = ""some message of length 1122""


client_mac is extracted from keyring_material
message_type is 0x17, because as an Application_data message type, the correct value should be 0x17
message version is 0x0303 as it's TLS 1.2
message length is 1122, removing preceding IV, offset and MAC verification, message, gets a final length of 1122
seq_number is 1 as it's the first message

HMAC_SHA256 calculation, in python, is as follows:
import hashlib
import hmac
hmac.new(<client_mac>,label+message,hashlib.sha256).digest()

My question is, how do I calculate label?
As RFC mentions, ""+"" denotes concatenation, but concatenation of what

HEX values converted to string


""1"" + ""17"" + ""0303"" + ""462""

INT values converted to strings


""1"" + ""23"" + ""771"" + ""1122""


And other thing to mention, TLSCompressed.version means:

0x0303
771
""1.2""
""12""
""TLS 1.2""

In this maillist (http://www.ietf.org/mail-archive/web/tls/current/msg14357.html) I found a supposed clarification of MAC values, 

   MAC(MAC_write_key, seq_num +
       TLSCipherText.type +
       TLSCipherText.version +
       length of ENC(content + padding + padding_length) +
       IV +
       ENC(content + padding + padding_length));

where the length is encoded as two bytes in the usual way.

but it makes no sense to me, because it's useless to re-encode decrypted values to check to compute MAC. And from last line ""where length is encoded as two bytes in the usual way"", does it means that I should use 

struct.pack(""!H"",length)

Then remove ""\x"" and use this value? or should I encode this value in HEX and then concatenate it?
I'm a bit lost, because RFC are not clear about how values should be used.
I've been trying several combinations (even brute forcing), but none of them worked, I hope you can light my way.
","Well, after diggin' a bit I've managed to solve the issue.
RFC 5246, in section 6.2.3.1 (http://tools.ietf.org/html/rfc5246#section-6.2.3.1) 

The MAC is generated as:
  MAC(MAC_write_key, seq_num +
                        TLSCompressed.type +
                        TLSCompressed.version +
                        TLSCompressed.length +
                        TLSCompressed.fragment);

where ""+"" denotes concatenation.

But it does not points the data size, either representation format (hex, string...).
The way every field must be represented is as follows:

seq_num:

Description: A int counter, starting in 0, which will be incremented every frame received or sended. For a TCP Session, two seq_numbers must be used, one for the server and other for the client, incrementing everytime each of them sends a frame.
Representation: This value must be represented as Unsigned Long Long with 8 bytes
Representation example: 
struct.pack(""!Q"",seq_num)

TLSCompressed.type

Description: This field is extracted from TLS Record layer (the encrypted payload). For example, if it's an Application Data frame, we must use 0x17.
Representation: This value must be represented as Signed Char, with 2 bytes.
Representation example:
struct.pack(""!b"",TLSCompressed.type)

TLSCompressed.version

Description: This field is also extracted from TLS Record layer (the encrypted payload). For example, if the frame is transferred using TLS 1.2, we must use it's hex representation 0x0303.
Representation: This value must be represented as Unsigned Short, with 2 bytes.
Representation example:
struct.pack(""!H"",TLSCompressed.version)

TLSCompressed.length

Description: This field represents the actual length of the decrypted payload.
Representation: This value must be represented as Unsigned Short, with 2 bytes.
Representation example:
struct.pack(""!H"",TLSCompressed.length)

TLSCompressed.fragment

Description: This field is the actual **decrypted payload.
Representation: This value must be represented as a string


As a python example, the HMAC hashing will be as follows for our previous example:
hmac_digest = hmac.new(mac_secret,'',digestmod=hashlib.sha256)
hmac_digest.update(struct.pack('!QbHH',seq_num,TLSCompressed.type,TLSCompressed.version, len(decrypted)))
hmac_digest.update(decrypted)
hmac_digest.digest()

","295","<python><macos><ssl><hmac><sha256>","1","2","1","2015-07-10 07:07:21","","0","","4370109","","2015-06-23 17:35:10","2015-06-23 17:20:09",""
"18848724","Generating digital signature in php","I used to generate digital signature in Ruby like so:
def generate_signature
  data = ""Databeingpassed""
  secret_key = ""Somesecretkey"" 
  digest = OpenSSL::Digest::Digest.new('sha256')
  Base64.encode64(OpenSSL::HMAC.digest(digest, secret_key, data)).strip
end

Output: 2XBK7UXA9oDsfJj1TBE2maptpB6i1MJ4uadY1AXlQOQ=

How to achieve the same with Php, I'm using the following code in php, but the outputs are different
function generate_signature() {
  $data = ""Databeingpassed""
  $secret_key = ""Somesecretkey"" 

  $message = hash('sha256', $secret_key, $data);
  return base64_encode($message);
}

Output: hgy/KMG3zTSgjUrzA/3nNvN+vApna6A7JqtZwx+r9Ng=

Any ideas?
","I've found a way, in case if someone will need:
function generate_signature() {
  $data = ""Databeingpassed""
  $secret_key = ""Somesecretkey"" 

  return base64_encode(hash_hmac('sha256', $data, $secret_key, true));
}

The output:
2XBK7UXA9oDsfJj1TBE2maptpB6i1MJ4uadY1AXlQOQ=

","295","<php><ruby><digital-signature><sha256>","0","0","1","2013-09-17 12:17:57","18849647","0","0","952129","","2013-09-17 12:13:02","2013-09-17 11:31:43",""
"37973594","SHA256 in C# on Windows vs. openssl on unix","I am computing a hash on unix with the following:
echo -n ""Test123"" | openssl dgst -binary -sha256 | openssl base64

This gives:
9JKwVu6ULKgdcQq8I2QugjqDhkvHgiqq8bsBtM7PNGc=

I have the following C# code:
string enc;
using(SHA256Managed sha = new SHA256Managed())
{
    enc = Convert.ToBase64String(sha.ComputeHash(Encoding.UTF8.GetBytes(""Test123"")));
}

And this gives:
2bX1jws4GYKTIxhIoUB09Z66PoJZQ+y+hq5R8dnx9I4=

I do not understand why these are not identical?
","I knew this had to be something stupid and it was.  On the problematic box I was logged in as root so I was on a K-shell.  From there it doesn't handle the echo -n the same way as from a C-shell.  Leaving this here because I will probably have this problem again in five years :)
","294","<c#><unix><openssl><sha256>","0","0","1","2016-06-22 18:35:27","","12","","54420","","2016-06-22 16:48:41","2016-06-22 16:25:15",""
"53716552","OpenSSL and CryptoJS SHA256 encryption conversion","My problem is that the newer versions of OpenSSL aren't compatible with default settings of CryptoJS.

The default hash used by openssl enc for password-based key derivation
  changed in 1.1.0 to SHA256 versus MD5 in lower versions.
  https://unix.stackexchange.com/questions/344150/why-can-one-box-decrypt-a-file-with-openssl-but-another-one-cant/344586#344586

By default, CryptoJS uses MD5 for its key derivation. OpenSSL used MD5, but now in OpenSSL versions >=1.1.0 it's using SHA256.
So if I pass -md md5 to OpenSSL, CryptoJS is compatible:
echo ""Hello World"" | openssl enc -aes-256-cbc -md md5 -pass pass:""Secret Passphrase"" -e -base64

output: U2FsdGVkX19aufvaqQQ89scaApBos6oFCyqPj7IKUFk=
CryptoJS:
CryptoJS.AES.decrypt('U2FsdGVkX19aufvaqQQ89scaApBos6oFCyqPj7IKUFk=', 'Secret Passphrase').toString(CryptoJS.enc.Utf8);

output: ""Hello World""

But now if I want to use SHA256 instead of MD5 (removing the -md md5):
echo ""Hello World"" | openssl enc -aes-256-cbc -pass pass:""Secret Passphrase"" -e -base64

output: U2FsdGVkX1/5LLkFkTpawh1im4a/fCco5hS42cjn/fg=
CryptoJS:
CryptoJS.AES.decrypt('U2FsdGVkX1/5LLkFkTpawh1im4a/fCco5hS42cjn/fg=', 'Secret Passphrase').toString(CryptoJS.enc.Utf8);

output: null
How do I tell CryptoJS to use SHA256 instead of MD5 for its key derivation?
","It seems that CryptoJS ""as-is"" does not provide this flexibility. This is because the use of MD5 is hard coded into the function used to derive the key from the passphrase. You can see it happening here in OpenSSLKdf:
var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);

KDF stands for Key Derivation Function, and no digest is provided when it is created. That EvpKDF.create() in itself does have the possibility for different types of digests, as you can see in its configuration options:
        cfg: Base.extend({
            keySize: 128/32,
            hasher: MD5,
            iterations: 1
        }),

It also shows that MD5 is the default.
All of this implies that the decryption will work if you modify that first line to the following:
var key = EvpKDF.create({ keySize: keySize + ivSize, hasher: C_algo.SHA256 }).compute(password, salt);

and indeed, after editing (as a test) that file cipher-core.js in your locally installed module, your last line of code does result in the desired Hello World.
The only way I see to reproduce this without modifying the CryptoJS module itself is by duplicating a whole chunk of code from the module into your own code.
","294","<linux><encryption><openssl><sha256><cryptojs>","3","3","1","2018-12-11 06:14:06","53718402","0","","","","","2018-12-11 02:34:22",""
"37815179","C# Sha256 hash doesn't equal PHP","I'm building a website and their current login system is in C#. I'm building the site in PHP and would like to keep the passwords the same for their customers. In order to do that, I need to make their hashing function the same as mine. I'm having a bit of trouble since I don't know much about C#.
Here are the C# functions that I've found that are useful to setting the password when I decompiled the code:
string salt = ui.UserGUID.ToString();
if (!string.IsNullOrEmpty(UserInfoProvider.UserSaltColumn))
  salt = ui.GetStringValue(UserInfoProvider.UserSaltColumn, string.Empty);
ui.SetValue(""UserPassword"", (object) UserInfoProvider.GetPasswordHash(userPassword, stringValue, salt));

The GetPasswordHash function will return this:
return SecurityHelper.GetSHA2Hash(password + salt + UserInfoProvider.PasswordSalt);

The GetSHA2Hash function is where I think my problems are. Here's the one-liner of the function:
return ValidationHelper.GetStringFromHash(new SHA256Managed().ComputeHash(Encoding.Default.GetBytes(inputData)));

And finally, here's the GetStringFromHash function:
StringBuilder stringBuilder = new StringBuilder();
  foreach (byte hashByte in hashBytes)
    stringBuilder.Append(string.Format(""{0:x2}"", (object) hashByte));
  return stringBuilder.ToString();

In the first code, stringValue is sha256 which pulls the second like of code. The salt is stored in the database so I know what that value is, and I know a non-encrypted password to test. In the second piece of code, the ""salt"" variable is null so it's only hashing the password and the salt in the database.
I have tried several different pieces of PHP code to try to get the passwords to match, but nothing so far. Here's a few of the things I've tried:
$hash = hash('sha256', ord(""Password"" . ""The Salt""));
$hash = hash('sha256', ""Password"" . ""The Salt"");
$hash = (hash('sha256', mb_convert_encoding(""Password"" . ""The Salt"",""UTF-8""), true));

I know the last piece of code is formatting the string into hexadecimal, but I am at a loss right now. I'm hoping it's a simple fix. I spent the better part of yesterday tracking down all the functions and trying to get it to work before bringing it here.
Thanks in advance. 

Solved. Apparently, the GUID was being lowercased in the first line: 
string salt = ui.UserGUID.ToString(); 

and that was causing the issues to be wrong. I created an online fiddle and when I was getting the same output as PHP, I knew there was something was was being changed. Looked into it a little more and then we found the problem. Here's the final PHP in case it helps future people:
$hash = hash('sha256', ""Password"" . strtolower(""The Salt""));

","","293","<c#><php><hash><sha256>","0","","0","2016-06-14 17:01:53","","8","","1013985","","2016-06-14 17:01:53","2016-06-14 14:41:22",""
"40572472","Generating SHA256 in Swift (iOS)","I am trying to generate SHA256 using the following function:- 
 func generateHMAC(key: String, data: String) -> String {
    let keyData = key.dataFromHexadecimalString()! as NSData
    let dataIn = data.dataUsingEncoding(NSUTF16StringEncoding)
    var result: [CUnsignedChar]
    result = Array(count: Int(CC_SHA256_DIGEST_LENGTH), repeatedValue: 0)
    CCHmac(CCHmacAlgorithm(kCCHmacAlgSHA256), keyData.bytes, keyData.length, dataIn!.bytes, dataIn!.length, &result)

    let hash = NSMutableString()
    for val in result {
        hash.appendFormat(""%02hhx"", val)
    }

    return hash as String
}

Input is
AccountNumber: 100195
Amount: 10 
BillerID: 59 
ChannelID: 2 
Context: 11|test
CountryID: 1 
CustomerID: 34
EmailID: ankur.arya@me.com
ReturnURL: https://uat.myfatoora.com/ReceiptPOC.aspx 
SECURITYTOKEN: 6B4A47A6-40A0-4C9D-A925-5CECA2910881 
TxnRefNum: 991107844408242 
UserName: USP

and the output is 
4cd1acc736a9702c8cdb1a546d1c274a67cb285dbdbb972aab39ee51c2a2‌​26c8

However, this doesn’t match with the output of backend which uses the following algo
private string CreateSHA256POC(bool useRequest)
    {
        // Hex Decode the Secure Secret for use in using the HMACSHA256 hasher
        // hex decoding eliminates this source of error as it is independent of the character encoding
        // hex decoding is precise in converting to a byte array and is the preferred form for representing binary values as hex strings. 
        secureHash = """";
        byte[] convertedHash = new byte[_secureSecret.Length / 2];
        for (int i = 0; i < _secureSecret.Length / 2; i++)
        {
            convertedHash[i] = (byte)Int32.Parse(_secureSecret.Substring(i * 2, 2), System.Globalization.NumberStyles.HexNumber);
        }

        // Build string from collection in preperation to be hashed
        StringBuilder sb = new StringBuilder();
        SortedList<String, String> list = (useRequest ? requestFields : responseFields);
        foreach (KeyValuePair<string, string> kvp in list)
        {
            // if (kvp.Key.StartsWith(""vpc_"") || kvp.Key.StartsWith(""user_""))
            sb.Append(kvp.Key + ""="" + kvp.Value + ""&"");
        }
        // remove trailing & from string
        if (sb.Length > 0)
            sb.Remove(sb.Length - 1, 1);

        // Create secureHash on string
        string hexHash = """";
        using (HMACSHA256 hasher = new HMACSHA256(convertedHash))
        {
            byte[] hashValue = hasher.ComputeHash(Encoding.UTF8.GetBytes(sb.ToString()));
            foreach (byte b in hashValue)
            {
                hexHash += b.ToString(""X2"");
                secureHash = hexHash;
            }
        }
        return hexHash;
    }

and their output is 
41D8E81C128100A76185F24CE00BC6A4FEA30839E6DE3DFFBC3B5814E4FD0C4E

Secret key is 
71DD0F73AFFBB47825FF9864DDE95F3B

Can you please help me to update my method in Swift to get the same result as backend. 
Thanks. 
","","286","<c#><ios><swift><sha256><hmac>","2","","0","2016-11-14 05:53:49","","12","","1960149","","2016-11-14 05:53:49","2016-11-13 09:42:07",""
"48562665","Logic for Generating Signature - for SHA-2 Hashing (Java)","I'm using a specification document for accessing API, and it says that hash is calculated on the signature generated from the following logic:
Signature = (field1 + field2 + field3 + field4 + field5 + field6) + (field7 + field8)

I'm just wondering what does this mean? 
So, when I concatenate the fields and hash using sha-256, I'm getting a different hash format than the expected 32 byte; a sample hash has this format:
PajZG3NEUUHgrycwtPKcKkvTdBg/Kkx6OhlULgSV+ko=
as opposed to this example:
c7477242d3901f537387b2b6c61099380634c013a060960a5bf4d87734d54f0e
This is my code:
stringToHash = ""field1field2field3field4field5field6field7field8"";
MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
byte[] hash = digest.digest(stringToHash.getBytes(StandardCharsets.UTF_8));
String encoded = Base64.getEncoder().encodeToString(hash);

What could I be missing?
","I found out the answer from this link: http://www.mytecbits.com/tools/cryptography/sha2generator
This code does it:
String input = ""String to hash"";
MessageDigest objSHA = MessageDigest.getInstance(""SHA-256"");
byte[] bytSHA = objSHA.digest(input.getBytes());
BigInteger intNumber = new BigInteger(1, bytSHA);
String stringHashCode = intNumber.toString(16);

// pad with 0 if the hexa digits are less then 64.
 while (stringHashCode.length() < 64) {
    stringHashCode = ""0"" + stringHashCode;
}

","286","<sha256><sha2>","0","0","1","2018-02-08 04:48:43","","5","","125816","","2018-02-01 12:24:05","2018-02-01 12:21:03",""
"13151140","express secret key length","Are there any recommendations for the length of the secret key used to cryptographically hash session data in connect/express? I see everything from 60+ character strings to the canonical 'keyboard cat'.
For my immediate use case, I intend to use SSL for the entire site and the payoff for a brute-force attack is medium to low.
","Obviously the longer the better, but making it 60+ is a bit overkill. If the key is a random string ( which it should be ), then do you realize how many combinations you can get with 60 characters? A lot. :)
","284","<security><node.js><session><express><sha256>","2","1","1","2012-10-31 07:39:29","13153302","0","1","","","","2012-10-31 04:08:27",""
"49389298","command to get sha256 hash of certificate chain","I got my server certificate mycert.pem . 
I would like to see the certificate chain hash value.
My question is:
How can I use command line to get the SHA256 hash of certificate chain?
","","284","<openssl><certificate><ssl-certificate><sha256><sha>","1","","0","2018-03-20 16:19:33","","0","","","","","2018-03-20 16:19:33",""
"29903560","Matching Hashed + Salted Passwords","I'm learning about encryption and security and I'm a little confused by a (possibly simple) concept.
I understand how hashing and salts work for the most part, but I don't understand how functions match passwords. For example, here is part of passlib's documentation:
>>> # import the hash algorithm
>>> from passlib.hash import sha256_crypt

>>> # generate new salt, and hash a password
>>> hash = sha256_crypt.encrypt(""toomanysecrets"")
>>> hash
'$5$rounds=80000$zvpXD3gCkrt7tw.1$QqeTSolNHEfgryc5oMgiq1o8qCEAcmye3FoMSuvgToC'

>>> # verifying the password
>>> sha256_crypt.verify(""toomanysecrets"", hash)
True
>>> sha256_crypt.verify(""joshua"", hash)
False

On the 4th line, it mentions generating a new salt, but as far as I can tell the salt is never stored alongside the password.
Why can I can store the hashed password as a string in a database and verify it later without providing a salt? 
","Per the documentation:

An sha256-crypt hash string has the format $5$rounds=rounds$salt$checksum

The salt (in your case 'zvpXD3gCkrt7tw.1') is stored within the string itself; that's why it doesn't need to be stored separately.
","282","<python><encryption><hash><sha256><conceptual>","1","3","1","2015-04-27 18:46:39","","0","","","","","2015-04-27 18:41:33",""
"45357369","get only the first 10 characters of 256 bit hash instead of complete hash value","Username ABC
Password DEF
Salt = Username + Password IE;  ABCDEF(saltkey)  
Now, this salt key is hashed using SHA256 algorithm and the output for the saltkey(ABCDEF) after hashing it is: jjaiBx04mbD1ZvsLKuG6PyBFfJcYbl7iCnDCsi2l4tk=
Now how do I truncate this to a smaller hash so that the result is just the first 10 characters of it let say: jjaiBx04mb
","You can use String.Substring:
int start = 0;
int length = 10;
string result = myString.Substring(start, length);

This will return the substring of the original string that starts at position start and has length length. 
Therefore, giving start a value of 0 will yield the first length characters of the original string.
However, if I may make a suggestion, assuming that it is within your control, do not create salts this way. Use a completely random sequence of characters, preferably created using a secure random generator, and store it alongside the username and hashed password. Also, do make your salt fairly long. I'm sure you can spare the extra few bytes of DB space it will require.
","281","<c#><xamarin.forms><sha256><salt-creation>","-2","2","1","2017-07-27 17:46:03","","2","","8185379","","2017-07-27 17:46:03","2017-07-27 17:28:29","2017-07-27 17:39:26"
"53933570","Signature mismatch error on payfort sdk_token generation","String ACCESS_CODE = ""My_PAYFORTAcces_Code""
String MERCHANT_ID = ""My_Payfory_Merchet_ID""

I found the issue I think the issue is with Signature generation,
I tried signature generation using  with the string 
“TESTSHAINaccess_code=ACCESS_CODEdevice_id=ffffffff-d6ab-d802-b274-478d7792a1b7language=enmerchant_identifier=MERCHANT_IDservice_command=SDK_TOKENTESTSHAIN” I got my signature as “9c804f2c08e36749c75389afc12c50e68307c31052e6434c072cd5b36cc8c607” and when I tried with “PASSaccess_code=ACCESS_CODElanguage=enmerchant_identifier=MERCHANT_IDmerchant_reference=53469903-eaac-459c-91b9-78cb026b0712service_command=TOKENIZATIONPASS” I got “4568f58e22f46b75fb6157cbc131ab194e1f9a066bdc501171a018d2c1d22e14” as my signature.  
Once I tried to generate the sdk_token using the both signature I  got “{""response_code"":""00008"",""response_message"":""Signature mismatch"",""service_command"":""SDK_TOKEN"",""device_id"":""ffffffff-d6ab-d802-b274-478d7792a1b7"",""signature"":""30eb8f03adc12dd714aac83249ad0b3e763cfadcd6c996bdf49d86125c23335"",""merchant_identifier"":""My_Payfory_Merchet_ID"",""access_code"":""My_PAYFORTAcces_Code"",""language"":""en"",""status"":""00""}”
Here is my code to generate signature, Please check and let me know its correct or not,
@TargetApi(Build.VERSION_CODES.KITKAT) 
    public static String generateSHA256(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException { 
        MessageDigest md = MessageDigest.getInstance(""SHA-256""); 
        byte[] textBytes = text.getBytes(StandardCharsets.UTF_8); 
        md.update(textBytes, 0, textBytes.length); 
        byte[] sha1hash = md.digest(); 
        return convertToHex(sha1hash); 
    } 

    private static String convertToHex(byte[] data) { 
        StringBuilder buf = new StringBuilder(); 
        for (byte b : data) { 
            int halfbyte = (b >>> 4) & 0x0F; 
            int two_halfs = 0; 
            do { 
                buf.append((0 <= halfbyte) && (halfbyte <= 9) ? (char) ('0' + halfbyte) : (char) ('a' + (halfbyte - 10))); 
                halfbyte = b & 0x0F; 
            } while (two_halfs++ < 1); 
        } 
        return buf.toString(); 
    } 

","This solved My problem,
I changes my string to generate the signature to,
Constants.PayfortRequestPhrase + ""access_code="" + Constants.PayfortAccessCode 
+ ""device_id="" + deviceId + ""language=enmerchant_identifier="" +
Constants.PayfortMerchantIdentifier + ""service_command=SDK_TOKEN"" + Constants.PayfortRequestPhrase 

RequestPhrase , AccessCode and MerchantIdentifier I got from pay-fort Account. and the signature generation code remains the same.
","281","<android><digital-signature><sha256><payfort>","1","0","1","2018-12-27 13:41:31","53946061","0","","","","","2018-12-26 14:48:18",""
"36699326","Ruby hmac sha256 hash differs for variable versus literal","HMAC SHA256 hash generated changes when variable is used in the hashing function than using the literal.
I have to concatenate 4 parameters to generate a message string that is hashed using secret key. The concatenated message string generates a different hash than using the value of message as a literal.
require 'base64'
require 'openssl'

securityKey = 'A93reRTUJHsCuQSHR+L3GxqOJyDmQpCgps102ciuabc='
content = 'hello'
id = '1000000855'
tsp = '1460852115'
guid = '75c6016eaa1e43b4807ba25232797714'

contentmd5 = Base64.encode64(OpenSSL::Digest::MD5.digest(content))
inputString = id + tsp + guid + contentmd5
puts inputString
#Input String is 
#'1000000855146085211575c6016eaa1e43b4807ba25232797714XUFAKrxLKna5cZ2REBfFkg=='

digest = OpenSSL::Digest.new('sha256')
hmac = OpenSSL::HMAC.digest(digest, securityKey, inputString)
securityToken = Base64.encode64(hmac)
puts securityToken
#Hash generated is 7ihOEZNeoJMwjLt84I8WfN5b0VwgYNOg8abPA3nZ0SM=

digest = OpenSSL::Digest.new('sha256')
hmac = OpenSSL::HMAC.digest(digest, securityKey, '1000000855146085211575c6016eaa1e43b4807ba25232797714XUFAKrxLKna5cZ2REBfFkg==')
securityToken = Base64.encode64(hmac)
puts securityToken
#Hash generated is gPNytNGMbhg8b27rklqmEK/9xjNAcOq+7nldzyDL4g0=

","looks like Base64.encode64 appends a ""\n"" to the end of its output so
from docs

encode64(bin) Returns the Base64-encoded
  version of bin. This method complies with RFC 2045. Line feeds are
  added to every 60 encoded characters.

this
contentmd5 = Base64.encode64(OpenSSL::Digest::MD5.digest(content))

returns
""XUFAKrxLKna5cZ2REBfFkg==\n""

not
 ""XUFAKrxLKna5cZ2REBfFkg==""

--
you can use strict_encode64 to not include line feeds so:
contentmd5 = Base64.strict_encode64(OpenSSL::Digest::MD5.digest(content))

returns
 => ""XUFAKrxLKna5cZ2REBfFkg==""

","277","<ruby><hash><string-concatenation><sha256><hmac>","1","2","1","2016-04-18 16:34:16","36699426","0","","","","","2016-04-18 16:19:43",""
"41113797","Does adding an explicit column of SHA-256 hash for a CLOB field improve the search(exact match) performance on that CLOB field","We have a requirement to implement a table(probably an orable db table or a mssql db table) as follows:

One column stores a string value, the length of this string value is highly variable, typically from several bytes to 500 megabytes(occasionally beyond 1 gigabytes )
Based on above, we decided to use CLOB type in db.(using system file is not an option somehow)
The table is very large up to several millions of records.
One of most frequent and important operation against this table is searching records by this CLOB column and the search string needs to EXACTlY match this CLOB column value.

My question is besides adding an index on CLOB column, whether we need to do some particular optimisation to improve the search performance?
One of my team member suggested adding an extra column in which to calculate SHA-256 hash of CLOB column above and search by this hash value instead of CLOB column. In terms of his opinion, the grounds of doing so are hash values are equal length other than variable so that indexing on that makes search faster.
However, I don't think this way makes big difference because assuming adding an explicit hash improves search performance database should be intelligent enough to do it by its own, likely storing this hash value in some hidden places of db system. Why bother we developers do it explicitly, on the other hand, this hash value theoretically creates collision although it's rare.
The only benefit I can imagine is when the client side of database does a search of which the keyword is very large, you can reduce network roundtrip by hashing this large value to a small length value, therefore network transferring is faster.
So any database gurus, please shed lights on this question. Many thanks!       
","Regular indexes don't work on CLOB columns.  Instead you would need to create an Oracle Text index, which is primarily for full text searching of key words/phrases, rather than full text matching.
In contrast by computing a hash function on the column data, you can then create an index on the hash value since it's short enough to fit in a standard VARCHAR2 or RAW column.  Such a hash function can significantly reduce your search space when trying to find exact matches.
Further your concern over hash collisions, while not unfounded can be mitigated.  First off, hash collisions are relatively rare, but when they do occur, the documents are unlikely to be very similar, so a direct text comparison could be used in situations where a collision is detected.  Alternatively due to the way hashing functions work, where small changes to the original document result in significant changes in the hash value, and where the same change to different documents affects the hash value differently, you could compute a secondary hash of a subset (or super set) of the original text to act as a collision avoidance mechanism.
","276","<oracle><indexing><sha256><clob>","1","1","1","2016-12-14 19:58:11","41125915","5","","1766831","","2016-12-14 19:58:11","2016-12-13 04:34:23",""
"17083175","CRC-64 for an SHA256 hach","hiii,
I have a question , if i calculate a crc for an sha256 hash to get a char with 64bits, Will I have a collision ? it's secure for reverse function ? 
thnx 
","IANAC.
I don't really understand what you mean by ""Will I have a collision"" - 64 bits can of course never represent 256 bits so yes, very very many of your possible sha256 hashes can collapse to the same 64 bit CRC.
If you just want a shorter value for your hash, I'd suggest folding instead, for example by xor:ing every consecutive byte in your hash with each other.
Or by xor:ing the first half of your 256 bit string with the second half to yield a 128 bit value, and then xor:ing that result's first half with the result's second half again to yield a 64 bit value.
This 64 bit value will of course never be able to represent all the possible values of the 256 bit hash either but it will not be possible to start with this value and calculate a collision for your original 256 bit hash.
","275","<crc><sha256>","0","0","1","2013-06-14 03:43:34","17100745","0","1","","","","2013-06-13 09:05:05",""
"45725461","How to ignore signature hash algorithm requested by server during TLS1.2 handshake?","I have a C# application making a successful TCP TLS 1.0 connection with mutual authentication to another company's server. It is implemented using SslStream class. We are just one of many clients of this very large organisation. 
This TCP link above must undergo TLS 1.2 + SHA2 upgrade. After doing all necessary steps on our side and successful testing with our local servers we are still failing all attempts to connect to the remote server. A lengthy investigation revealed that during TLS Handshake the server is sending to us a certificate request with only option for Signature Hash Algorithm = SHA1-RSA (see picture below). Our cerificate is SHA256. As a result, SslStream is not sending our certificate to the server at all and the server sees this as a Handshake Failure and closes down the connection.

The reason for this nuisance is that our counterparty uses very old (10.x) version of F5 firewall to terminate SSL. It only sends SHA1/RSA Signature Hash Algorithm in the certificate request although it supports the client’s SHA2 certificates.
While admitting the facts above, our counterparty is unable to upgrade F5 soon enough. They suggested to ignore the requested Signature Hash Algorithm and send our SHA256 certificate anyway. Apparently other clients connecting to them were able to do that somehow. 
Unfortunately,.Net's SslStream does not provide that level of fine tuning for TLS handshake. 
Hence the question: is it possible to ignore the server's request for SHA1RSA-based certificate at all? What options do I have? Are there SslStream alternatives that implement TLS 1.2? Is there an open-source third-party solution? Any suggestion would be helpful. Thanks in advance.
","The issue above was eventually resolved without any special code changes: a proxy server added on our side. It took care of communication with the other party. The proxy server is able to ignore the specific SHA1/RSA Signature Hash Algorithm in the incoming certificate request.
","274","<c#><tls1.2><sha256><sslstream><ssl-client-authentication>","3","0","1","2019-08-20 01:35:48","57565686","1","1","906869","","2017-08-17 03:24:54","2017-08-17 01:55:26",""
"53405081","Generate HMAC Signature on PHP","how do you apply the system below to php?
StringToSign = HTTPMethod+"":""+RelativeUrl+"":""+AccessToken+"":""+
Lowercase(HexEncode(SHA-256(RequestBody)))+"":""+Timestamp

Signature = HMAC-SHA256(apiSecret, StringToSign)

my script :
$encoderData = json_encode($bodyToHash, JSON_UNESCAPED_SLASHES);
$hash        = hash(""sha256"", $encoderData);
$stringToSign   = $Method. "":"" .$url . "":"" . $auth_token . "":"" . $hash . "":"" . $Timestamp;
$auth_signature = hash_hmac('sha256', $secret_key, $stringToSign,false);

Thank you,
","I don't know what you mean but
You can try this;
<?php
    $stringToSign = 'abcd';
    $apiSecret = 'secretkey';

    $hashed = hash_hmac('sha256', $stringToSign, $apiSecret);
?>

","273","<php><sha256><hmac>","-3","0","2","2018-12-05 08:42:58","","3","","10683556","","2018-11-21 04:41:53","2018-11-21 03:59:35",""
"53405081","Generate HMAC Signature on PHP","how do you apply the system below to php?
StringToSign = HTTPMethod+"":""+RelativeUrl+"":""+AccessToken+"":""+
Lowercase(HexEncode(SHA-256(RequestBody)))+"":""+Timestamp

Signature = HMAC-SHA256(apiSecret, StringToSign)

my script :
$encoderData = json_encode($bodyToHash, JSON_UNESCAPED_SLASHES);
$hash        = hash(""sha256"", $encoderData);
$stringToSign   = $Method. "":"" .$url . "":"" . $auth_token . "":"" . $hash . "":"" . $Timestamp;
$auth_signature = hash_hmac('sha256', $secret_key, $stringToSign,false);

Thank you,
","doing some BCA stuff? :p
you can use this function if you wan to use GET:
strtolower(hash('sha256', ''));

","273","<php><sha256><hmac>","-3","0","2","2018-12-05 08:42:58","","3","","10683556","","2018-11-21 04:41:53","2018-11-21 03:59:35",""
"45943737","Is there any equivalent command to compute the sha256withRSA signature by openssl?","I have a file to be signed by following command:
$ openssl sha256 -sign privatekey.pem myfile.txt > right.result

Is there any equivalent command to get the same result? I have tried the following method (calculate the sha256 digest firstly, then sign the digest). But it can not work:
$ openssl sha256 -binary myfile.txt > my.digest
$ openssl rsautl -sign -inkey privatekey.pem -in my.digest > wrong.result

The content of ""wrong.result"" is always different from ""right.result"". Could someone tell me the reason? Thank you very much!
","Using openssl sha256 -sign ... makes openssl compute the PKCS#1 ""SHA256withRSA"" algorithm, fully specified by RFC-8017.
This does not simply means doing a SHA-256 digest and sign it with RSA, as you did in the second part of your example.
Here is why:
According to this RFC, the signature must have the same length than the RSA modulus. Your RSA modulus is 512 bits long (default value using openssl genrsa) or more, so the computed signature MUST have a length of 512 bits (or more). Even if the hash function (HMAC-SHA256) returns values of 256 bits length.
So, to compute a signature with 512 bits, from a 256 bits only HMAC-SHA256 digest, RFC-8017 requires you to use the I2OSP Integer-to-Octet-String primitive, that takes 2 arguments: your 256 bits hash, and the integer 512 (the length of your RSA modulus). I2OSP will output a 512 bits length octet string. finally, this is this octets string that will be encrypted with your RSA private key.
But you have not computed this intermediate Integer-to-Octet-String value.This is why your signatures do not match.
","268","<openssl><rsa><sha256>","-1","-1","1","2017-08-29 18:39:17","","1","","","","","2017-08-29 16:09:02",""
"37313059","SHA 256 Encryption using edtftpj-pro-4.6.2","Can you please indicate how can I enable SHA 256 encryption during SFTP connectivity. Currently I am using below code to connect to SFTP. Thanks in advance for your help.
        SSHFTPClient ftp = new SSHFTPClient();
        ftp.setRemoteHost(""hostname"");
        ftp.setRemotePort(23);
        ftp.setAuthentication(""username"", ""password"");
        ftp.getValidator().setHostValidationEnabled(false);
        ftp.connect();

","Try:
ftp.setAlgorithmEnabled(SSHFTPAlgorithm.MAC_SHA2_256, true);

See here for an example.
","267","<sftp><sha256><edtftpj>","1","0","1","2016-09-01 05:13:05","","1","","","","","2016-05-19 02:38:48",""
"4302252","Preventing preimage attack on limited set of values","I have asked about the cost of running a preimage attack on the hashes of social security numbers. The excellent answer I got was that the type of social security numbers only has 366,000,000 hashes, which would make it easy to run a preimage attack. 
My question now is whether it is possible to avoid a preimage attack altogether. My scenario is that several clients need to store the social security number on a central server. The hashing must be consistent between the clients. The clients could communicate with online web services.
","Your problem is similar to what must be done when using passwords. Passwords fit in human brains, and, as such, cannot be much difficult to guess.
There are two complementary ways to mitigate risks when using low-entropy secrets:

Use iterated/repeated hashing to make each ""guess"" more expensive for the attacker.
Use salts to prevent cost sharing. The attacker shall pay the full dictionary search attack for every single attacked password/SSN.

One way to make hashing more expensive is to hash the concatenation of n copies of the data, with a n as big as possible (depending on the computing power of the clients, and, ultimately, the patience of the user). For instance, for (dummy) SSN ""123456789"", use H(123456789123456789123456789...123456789). You would count n in millions here; on a basic PC, SHA-256 can easily process a hundred megabytes per second.
A salt is a piece of public data which is used along the data to hash (the SSN), and which is different for each user. A salt needs not be secret, but it should not be reused (or at least not often). Since SSN tend to be permanent (an individual has a unique SSN for his whole life), then you can use the user name as salt (this contrasts with passwords, where a user can change his password, and should use a new salt for every new password). Hence, if user Bob Smith has SSN 123456789, you would end up using: H(""Bob Smith 123456789 Bob Smith 123456789 Bob Smith 123456789... Smith 123456789"") with enough repetitions to make the process sufficiently slow.
Assuming you can make the user wait for one second (it is difficult to make a user wait for more) on a not-so-new computer, it can be expected that even a determined attacker will have trouble trying more than a few hundred SSN per second. The cost of cracking a single SSN will be counted in weeks, and, thanks to the use of the user name as a salt, the attacker will have no shortcut (e.g. salting defeats precomputed tables, including the much-hyped ""rainbow tables"").
","266","<hash><sha256>","2","1","1","2010-11-29 16:08:48","4305588","0","0","-1","","2017-05-23 12:29:04","2010-11-29 09:13:10",""
"53420305","Can't generate signature for Lazada's API in NodeJS","I am trying to consume Lazada API through HTTP requests in NodeJS and it requires a signature as one of the parameters. 
To generate that, I'm using the js-256 package but for some reason I'm getting an IncompleSignature error. 
The exact error message:  
{ type: 'ISV',
  code: 'IncompleteSignature',
  message: 'The request signature does not conform to lazada standards',
  request_id: '0be6e79215428302067761224' }

My code:
var sha256 = require('js-sha256');


module.exports = function(app, Request){

    app.get('/', function(req,res){

        var access_token = ""myToken"";
        var app_key = ""myAppKey"";
        var order_id = ""36835322434"";
        var sign_method = ""sha256"";
        var timestamp = new Date().timestamp;

        var concatenatedString = ""/order/items/getaccess_token""+access_token
        +""app_key""+app_key
        +""order_id""+order_id
        +""sign_method""+sign_method
        +""timestamp""+new Date().getTime();


        var hash = sha256.hmac.create(""myAppSecret"");
        hash.update(concatenatedString);

        var httpRequestLink = ""http://api.lazada.co.th/rest/order/items/get?access_token=""+access_token
        +""&app_key=""+app_key
        +""&order_id=""+order_id
        +""&sign_method=""+sign_method
        +""&timestamp=""+new Date().getTime()
        +""&sign=""+hash.hex();

        Request.get(httpRequestLink, (error, response, body) => {
            if(error) {
                return console.log(error);
            }
            console.log(JSON.parse(body));
        }); 

    });

}

Would really appreciate if someone can help me out here. Thanks
","I'll suggest to add npm package lazada-open-platform-sdk url https://www.npmjs.com/package/lazada-open-platform-sdk.
You can easily call lazada api's by its functions and mostly all are integrated by them.For finanace and seller apis which are not integrated by package for that you can use access_token generated by generateAccessToken and call apis.
","266","<node.js><encryption><e-commerce><signature><sha256>","0","0","1","2018-11-29 06:11:53","","1","","","","","2018-11-21 20:52:31",""
"53696137","HMAC SHA256 Produces Different Result if String vs Variable in Liquid, Shopify","I'm doing some URL verification between a Shopify site and my app. On Shopify, in a .liquid file, I'm creating an HMAC value using Shopify's built in hmac_sha256 string filter. I'm using a secret key and a Twitch user ID which I've stored in a customer tag.
The hash value is passed as a query parameter to my app, which uses the crypto module in node.js to generate a hash and compare it with the hash from the url.
Things get strange here: In the .liquid file, when I type the Twitch ID directly into the string filter, the hash value generated by the .liquid file is the same value my app generates, and everything looks good:
{{ ""12345678""  | hmac_sha256: ""secret_key"" }}
However, when I pass the same Twitch ID as a variable into the string filter, the hash value the liquid file generates is different than the first time:
{{ twitchId  | hmac_sha256: ""secret_key"" }}
I've already tried removing whitespace and newline characters from the Twitch ID variable just in case there were any. I don't even have a guess as to what the problem could be. Maybe the variable (which is a string) is encoded differently than when I type it in directly?
For reference, the javascript code checking for matching hashes:
    // Get query string params:
    const { hash, twitchId } = req.query;
    console.log('Twitch ID in query: ' + twitchId);

    // Verify user
    const generatedUserHash = crypto
    .createHmac('sha256', userVerifySecret)
    .update(twitchId)
    .digest('hex');

    console.log('Passed hash: ' + hash + ' Generated hash: ' + generatedUserHash);

    if (generatedUserHash == hash) {
        return true;
    } else {
        return false;
    }

","You need to show how you are assigning the ID to the variable. Without seeing that, there is no way to validate your question.
I did a quick test, and proved I get the same HMAC with a string and a variable, so it must be that you are doing something weird in your assignment:
<h1>{{ ""12345678""  | hmac_sha256: ""secret_key"" }}</h1>
{% capture fizz %}12345678{% endcapture%}
<h1>{{ fizz   | hmac_sha256: ""secret_key""}}</h1>

Produces:
fcfebc0d424982ce8c7a986264beb0d4b1de44507501451e142236404e5b9778
fcfebc0d424982ce8c7a986264beb0d4b1de44507501451e142236404e5b9778
","265","<node.js><shopify><liquid><sha256><hmac>","0","1","2","2018-12-09 23:20:20","53697698","1","","","","","2018-12-09 19:58:40",""
"53696137","HMAC SHA256 Produces Different Result if String vs Variable in Liquid, Shopify","I'm doing some URL verification between a Shopify site and my app. On Shopify, in a .liquid file, I'm creating an HMAC value using Shopify's built in hmac_sha256 string filter. I'm using a secret key and a Twitch user ID which I've stored in a customer tag.
The hash value is passed as a query parameter to my app, which uses the crypto module in node.js to generate a hash and compare it with the hash from the url.
Things get strange here: In the .liquid file, when I type the Twitch ID directly into the string filter, the hash value generated by the .liquid file is the same value my app generates, and everything looks good:
{{ ""12345678""  | hmac_sha256: ""secret_key"" }}
However, when I pass the same Twitch ID as a variable into the string filter, the hash value the liquid file generates is different than the first time:
{{ twitchId  | hmac_sha256: ""secret_key"" }}
I've already tried removing whitespace and newline characters from the Twitch ID variable just in case there were any. I don't even have a guess as to what the problem could be. Maybe the variable (which is a string) is encoded differently than when I type it in directly?
For reference, the javascript code checking for matching hashes:
    // Get query string params:
    const { hash, twitchId } = req.query;
    console.log('Twitch ID in query: ' + twitchId);

    // Verify user
    const generatedUserHash = crypto
    .createHmac('sha256', userVerifySecret)
    .update(twitchId)
    .digest('hex');

    console.log('Passed hash: ' + hash + ' Generated hash: ' + generatedUserHash);

    if (generatedUserHash == hash) {
        return true;
    } else {
        return false;
    }

","Turns out my variable twitchId was getting instantiated after I was trying to use it in the sha256 filter. I was instantiating it in my theme.liquid file, and I was trying to access it in a liquid file in my app (the request from the Shopify site is responded to with a liquid file).
I guess I wrongly assumed the theme.liquid file is loaded before the file in my response to Shopify. I assumed this because javascript variables I instantiate in my theme.liquid file are available in my response liquid file (I think this has something to do with liquid variables being created server-side and javascript variables being created client-side).
I am now instantiating the twitchId variable in my response liquid file. So that solved it.
","265","<node.js><shopify><liquid><sha256><hmac>","0","0","2","2018-12-09 23:20:20","53697698","1","","","","","2018-12-09 19:58:40",""
"56926017","How to use SHA256 in NodeJS","How to simplely convert a string to SHA256 string in Node.js.
And convert a SHA256 string to a normal string?
const shajs = require('sha.js');



console.log('starts');
const code = 'WEASDSAEWEWAEAWEAWEWA';
const normal = 'anne';
const encrypted = shajs('sha256')
    .update(normal)
    .digest('hex');
const unencrypted = shajs('sha256')
    .read(normal)
    .toString('hex');
console.log(normal);
console.log(encrypted);
console.log(unencrypted);
console.log('end');

Where should i put the HASH CODE?
","SHA256 is a one-way hash function which means you can only convert a string into a hash value not its reverse. To check password, you need to rehash plain password and compare it with the one you already stored in database. 
","265","<node.js><sha256>","0","1","1","2019-07-08 07:12:43","56929950","3","","707451","","2019-07-08 06:42:12","2019-07-07 20:50:59",""
"30097652","Hash and sha256 - Objective-c and Java. Return wrong","Why am i getting another hash? ObjC returns wrong hash. Why?
Objective-c:
NSString *key = @""rain"";
NSString *data = @""http://google.com"";
const char *cKey  = [key cStringUsingEncoding:NSUTF8StringEncoding];
const char *cData = [data cStringUsingEncoding:NSUTF8StringEncoding];
unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];

CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

NSData *HMAC = [[NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];
NSString *hash = [HMAC base64EncodedStringWithOptions:0];
NSLog(@""%@"", hash);

hash: J6PCNtA36h/6OdxdmKRFr0mLN3GgFQWAji2ciuTkmhE=
Java:
public class HelloWorld{

   public static String encode(String key, String data) throws Exception {
    Base64.Decoder decoder= Base64.getDecoder();
    Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
    SecretKeySpec secret_key = new SecretKeySpec(decoder.decode(key), ""HmacSHA256"");
    sha256_HMAC.init(secret_key);
    byte[] mac_data = sha256_HMAC.doFinal(data.getBytes());
    Base64.Encoder encoder = Base64.getEncoder();
    return encoder.encodeToString(mac_data);
}

 public static void main(String []args){
     try{
    System.out.println(encode(""rain"", ""http://google.com""));
     }
     catch(Exception e)
     {

     }
 }
}

hash: Ua2G90mCKIlx2WF2U5VsOkZcEn6GzfONa4pL0waCLnY=
Help me please.
","","264","<java><objective-c><hash><sha><sha256>","1","","0","2015-05-07 10:28:30","","1","3","2246798","","2015-05-07 10:28:30","2015-05-07 09:56:38",""
"32638867","SHA256 hashing with C# and openTK","As you can probably guess im looking to create a bitcoin miner but the cryptography really isnt my thing and i've been unable to find much help through google, so how does hashing with standart openCL actually work?
(Yes, i know its a broad question but any pointers would be highly appreciated)
","I think what you need is available in the .NET Framework, have you seen the SHA256 implementations in System.Security.Cryptography?
MSDN - SHA256
","262","<c#><.net><hash><sha256><opentk>","-1","1","1","2015-09-17 20:05:43","","5","","","","","2015-09-17 19:53:31",""
"32401239","Shiros Sha256Hash and alternative algorithms","Is Sha256Hash from Apache Shiro based upon a common specification like PBKDF2WithHmacSHA256?
The following example proves, Shiros Sha256Hash doesn't create a valid PBKDF2WithHmacSHA256 hashes.
public static byte[] getEncryptedPassword(
    String password,
    byte[] salt,
    int iterations,
    int derivedKeyLength
) throws NoSuchAlgorithmException, InvalidKeySpecException {
    KeySpec keySpec = new PBEKeySpec(
        password.toCharArray(),
        salt,
        iterations,
        derivedKeyLength * 8
    );
    SecretKeyFactory f = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA256"");
    return f.generateSecret(keySpec).getEncoded();
}

@Test
public void testHashing(){
    byte[] salt = new SecureRandomNumberGenerator().nextBytes().getBytes();
    byte[] hash1 = new Sha256Hash(""1234"", salt, 1024).getBytes();
    byte[] hash2 = getEncryptedPassword(""1234"", salt, 1024, 32);
    assertTrue(hash1.equals(hash2));
}

Is there a common way to use PBKDF2WithHmacSHA256 with shiro, or do I have to implement my own CredentialMatcher?
","Per the Shiro user list on nabble no, Shiro does not provide PBKDF2 (or BCrypt or SCrypt).
Note that Java 8 does have PBKDF2-HMAC-SHA-512 available now as PBKDF2WithHmacSHA512 - use that instead.  SHA-512 in particular has 64-bit operations that reduce the advantage GPU based attackers have.  Use more iterations than just 1024, as well - see what your system can handle comfortably under load!    
","258","<shiro><hmac><sha256><pbkdf2>","2","1","1","2016-02-08 06:14:17","","0","1","","","","2015-09-04 15:05:28",""
"44028412","Java integer/double to unsigned byte","Now I understand java doesn't have unsigned bytes, but I'm not sure how to solve this if not.
I'm trying to implement SHA256 hashing in java, and i'm in the processing of converting the message to 512-bit.
int l = bytes.length; //total amount of bytes in the original message
int k = 0;
while((l+1+k) % 512 != 448) {
        k++;
}
//k is the total amount of 0's to be padded
int rest = k % 8;  //get the amount of 0's to be added in the byte with the 1
byte tmp =(byte) Math.pow(2, rest);

So the key instruction is the last row, if rest = 7 the resulting int is 128, but the bytes are signed in java and so the byte becomes 0x80 instead of 0xF0.
How can I achieve this in Java?
If anyone has a idea on how to implement this part please let me know.
","Starting from the assumption your message consists of bytes, the padding always works out as mupltiple of 8 bits, aka bytes. This ensures the most significant pad bit is always located in bit 7 of the first padding byte following the message, thus the padding, if any, is always started by 0x80, follwed by as many 0x00 as needed.
This can be implemented in a very simple manner:
public static byte[] padMsg(byte[] rawMsg) {
    int rawLen = rawMsg.length;
    int padLen = (64 - (rawLen & 0x3F)) & 0x3F;
    if (padLen == 0)
        return rawMsg;
    // all extra bytes in padded msg are zeros.
    byte[] paddedMsg = Arrays.copyOf(rawMsg, rawLen + padLen);
    // ensure topmost pad bit is a one
    paddedMsg[rawLen] = (byte) 0x80;
    return paddedMsg;
}

This takes the message length and gets the remainder. The remainder of a power of two (in this case 64), is most effectively gotten by simply and-masking with (power - 1), and this is where the 0x3F in the code comes from (= 64 - 1).
The remainder is taken again after calculating (64 - remainder) as prelimary padding length, to catch the special case where remainder is 0, leading to a wrong padding length of 64 bytes (which should be 0 padding).
Once the padding length in bytes is known, the case padding = 0 is caught. In any other case the message length is increased (with 0x00 bytes, Arrays.copyOf does this automatically). Then the first padding byte is replaced with 0x80 and the padded message that is now guaranteed to be a multiple of 64 bytes long is returned.
","257","<java><int><byte><unsigned><sha256>","1","1","1","2017-05-19 13:52:08","","10","","7606004","","2017-05-17 18:47:07","2017-05-17 14:58:18",""
"54896500","Get SHA256 file hash value without a filename from ""shasum"" in macOS","On macOS (Mojave), doesn't the ""shasum"" command has an option, which returns only the hash value without the filename?
$ shasum -a 256 archive.tar.gz
35fe34e225a06d......00e72ee61a437b7226f9f   archive.tar.gz

My current workaround which works in macOS' default state (w/no additional install):
$ shasum -a 256 archive.tar.gz | awk '{ print $1 }'
35fe34e225a06d......00e72ee61a437b7226f9f

$ php -r ""echo hash_file('sha256', 'archive.tar.gz'), PHP_EOL;""
35fe34e225a06d......00e72ee61a437b7226f9f

But, I want to make it simpler if there's a command option for it. 
Is there any command options or do I have to make an alias of the workarounds?
","An array assignment works:
sha=($(shasum -a 256 archive.tar.gz))
echo $sha
35fe34e225a06d......00e72ee61a437b7226f9f

Or you can use cut:
shasum -a 256 archive.tar.gz | cut -f1 -d' '
35fe34e225a06d......00e72ee61a437b7226f9f

","257","<bash><macos><hash><sha256>","2","4","1","2019-02-27 08:40:56","","0","","8367711","","2019-02-27 08:40:56","2019-02-27 01:07:20",""
"38656703","SHA-256 digest differ while length < 64 bytes","UPDATE:
CryptoAuthLib solve the problem. Many thanks @zaph
I'm working on ATSHA204 security chip, where a part of work is to calculate SHA-256 alike the chip does. I'm using
CryptoAuthentication ATSHA204A Development Library 2.0.1 [from hxxp://www.atmel.com/tools/CRYPTOAUTHENTICATIONATSHA204DEVELOPMENTLIBRARY.aspx] Implemented in C.
Well, while try any data >= 64 bytes, everything works fine. But anything < 64 bytes differ with the CHIP's calculation. 
Have a look below, 
message: 
20 4D 56 EF 56 F6 27 71 
AD CF D7 07 FC BA BE 21 
A8 7D 7C AF F5 54 6F ED 
27 2C F9 ED 75 B3 94 C7 
1C 04 02 00 EE 01 23 00 
00 00 00 00 00 00 00 00 
00 00 00 00 00 00 00 00 
00 00 00 00 00 00 00 00 
0E EA 11 36 8E 89 D2 11 
07 C1 1B 64 B6 D0 34 DA 
A6 DB 66 0F 14 FB DB C6 
26 7D 6A 3A 62 83 47 13

digest from Atmel's algorithm: 
8C E2 28 98 6A 21 A3 40 
A4 42 97 CE 4C 80 70 DF 
87 97 61 B3 FC CD A2 BF 
8D F0 89 EE 29 B8 68 BF


And while taking something < 64 length to same implementation, 
message:
11 CC 32 8B 30 ED 04 81
73 96 A9 F8 3B F7 9E 72
23 DC 05 29 3C 65 36 70
3A 03 1C E2 C2 2D 99 4E
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 16 00 00

digest from Atmel's algorithm:
40 3D DC C0 93 A6 4B A5
01 36 7D 59 EC 8C C4 59
15 20 6D 52 A7 D5 ED 40
9B 95 31 D3 49 37 F3 F8


What should add with message which less than 64 bytes to get digest alike the CHIP calculation. [unfortunately yet failed any reply from ATMEL community]
","","257","<c><sha256><atsha204>","1","","0","2018-08-04 09:54:09","","7","","889576","","2018-08-04 09:54:09","2016-07-29 10:36:53",""
"47103277","Amazon MWS - Don't understand how to generate HMAC","In the moment I'm struggling a little bit with the generation of HMAC for Amazon MWS.
I thought I understood how it works.
With the Scratchpad I generated a request. Scratchpad shows the string to sign and also the SHA 256 HMAC and the Base64 HMAC.
The string to sign consists of 4 lines like it's described in the docu.
There are several Onlineconverter for HMAC. I tried:
https://www.freeformatter.com/hmac-generator.html
https://codebeautify.org/hmac-generator
When I convert the string to sign which Scratchpad generated (the 4 lines), I get an other SHA 256 HMAC then Scratchpad generated.
Also there are several Onlineconverter for Base64. I tried:
https://www.freeformatter.com/base64-encoder.html
https://www.base64encode.org
When I convert the SHA 256 HMAC which Scratchpad generated, I get an other Base64-String then Scrathpad generated.
This confuses me. What I don't understand?
Other point:
Later I think I want to use GET and not POST. Do I get this right, that the string to sign for GET also has to be in 4 lines and not in one line as it would be executed later? That's how I understand the docu.
I used these links:
http://docs.developer.amazonservices.com/en_US/dev_guide/DG_QueryString.html
http://docs.developer.amazonservices.com/en_US/dev_guide/DG_SigningQueryRequest.html
https://mws.amazonservices.com/scratchpad/index.html
","To answer my own questions.

Generate SHA256 with an Onlineconverter:
I suppose the Problem is the LF. The Onlineconverter maybe have problem with it. Maybe they use CRLF. Better don't try to check your SHA256 with Onlineconverters.

Generate base64 with an Onlineconverter:
The SHA256 Scratchpad shows is not the value you convert with base64. You have to convert the Hex-Value of the SHA256.

Query to sign with GET:
If you want to use GET, the query to sign has to look like the query to sign for POST. Also the four lines. Only swap POST with GET.
","254","<base64><sha256><hmac><amazon-mws>","0","1","1","2017-11-11 09:19:41","47236309","3","","8882254","","2017-11-03 21:19:16","2017-11-03 19:35:13",""
"50884630","Node.JS crypto.createHmac('sha256') command line analog","In Node.js I use following code
hash = crypto.createHmac('sha256', SECRET).update(file).digest('hex');

to calculate HMAC. However Linux command line analog produces different hash code:
> openssl sha256 -hmac ""SECRET"" file

What is wrong in command line? What are correct arguments?
","","248","<node.js><linux><command-line><sha256><cryptojs>","1","","0","2018-06-16 03:08:49","","6","","","","","2018-06-16 03:08:49",""
"43880365","How to crack SHA-256 whose preimage consists of multiple words?","I want to crack the preimage of a SHA-256 hash, it is an exercise and my only hint is: Concatenation of four visible words.
I have tried to google the hash and put it into several online crackers / rainbow tables already. I think bruteforce is not an option because four words should be too long in sum, even if each word on its own is short.
So the only thing left would be a dictionary attack, right? But four word dictionaries should be too large to search through, I have tried to generate some via hashcat-utils/combinator.bin and got a RAM overflow at about 50GB even for a short input dictionary. For more popular English nouns (top100) I have created small dictionaries of 4 words with no success either.
Any ideas how to approach this further?
PS: visiblevisiblevisiblevisible is unfortunately not the answer - I tried these puns as well. :-)
","","244","<hash><concatenation><sha256><cracking>","3","","0","2017-05-09 21:45:06","","3","1","","","","2017-05-09 21:45:06",""
"26353216","Remove spaces in SHA256 output","Can anyone solve my problem related to SHA256 in iOS?
#import <CommonCrypto/CommonDigest.h>

NSData *dataIn = [@""XXXXX"" dataUsingEncoding:NSASCIIStringEncoding];
NSMutableData *macOut = [NSMutableData dataWithLength:CC_SHA256_DIGEST_LENGTH];

CC_SHA256(dataIn.bytes, dataIn.length,  macOut.mutableBytes);

NSLog(@""dataIn: %@"", dataIn);
NSLog(@""macOut: %@"", macOut);

I getting output like this :
2014-10-14 10:46:43.602 sha256[480:70b] dataIn: <416e616e 64>
2014-10-14 10:46:43.604 sha256[480:70b] macOut: <e9fb6a39 4db5ffd6 dba9b31a c7d9a90d 56f90767 afaf1e14 d6dcaa37 db180932>

what i actually need is i need to remove space in macOut. i.e  like this
","Add this below your code:
NSString *macOutString = [NSString stringWithFormat:@""%@"", macOut];
NSString *encryptedString = [macOutString stringByReplacingOccurrencesOfString:@"" "" withString:@""""];
NSLog(@""macOut: %@"", encryptedString);

You can also verify the encryption with - http://www.xorbin.com/tools/sha256-hash-calculator
","244","<ios><encryption><sha256>","0","0","2","2014-10-14 06:19:35","26353555","4","","3527656","","2014-10-14 06:19:35","2014-10-14 05:27:19",""
"26353216","Remove spaces in SHA256 output","Can anyone solve my problem related to SHA256 in iOS?
#import <CommonCrypto/CommonDigest.h>

NSData *dataIn = [@""XXXXX"" dataUsingEncoding:NSASCIIStringEncoding];
NSMutableData *macOut = [NSMutableData dataWithLength:CC_SHA256_DIGEST_LENGTH];

CC_SHA256(dataIn.bytes, dataIn.length,  macOut.mutableBytes);

NSLog(@""dataIn: %@"", dataIn);
NSLog(@""macOut: %@"", macOut);

I getting output like this :
2014-10-14 10:46:43.602 sha256[480:70b] dataIn: <416e616e 64>
2014-10-14 10:46:43.604 sha256[480:70b] macOut: <e9fb6a39 4db5ffd6 dba9b31a c7d9a90d 56f90767 afaf1e14 d6dcaa37 db180932>

what i actually need is i need to remove space in macOut. i.e  like this
","Create NSData, NSString category use this code at https://github.com/mdznr/iOS-Passcode/blob/master/Passcode/NSString%2Bsha256.m
","244","<ios><encryption><sha256>","0","0","2","2014-10-14 06:19:35","26353555","4","","3527656","","2014-10-14 06:19:35","2014-10-14 05:27:19",""
"53500733","Run sha256sum (from Cygwin) on file with special character and blank (quoting does not work)","I have Cygwin installed in order to use Linux command line tools on Windows. I also added it to my PATH. In general, it works fine, but I observe this weird behavior:
I want to run sha256sum on the file C:\Users\s1504gl\Desktop\Täst .txt. Note the german Umlaut ä and the whitespace before the file extension. In order to avoid problems with paths, I always quote paths in command line calls, such as:
sha256sum ""C:\Users\s1504gl\Desktop\Täst .txt""

However, PowerShell returns

/usr/bin/sha256sum: '""C:\Users\s1504gl\Desktop\T'$'\303\244''st .txt""': No such file or directory

When I rename the file to either Täst.txt or Test .txt, it works. So the combination of the special character ä and the whitespace seems to cause the problem. Exchanging double quotes by single quotes does not change anything in this case.
I am pretty sure it has to to with PowerShell since the example works without any problems on my Linux machine.
Is there some other way of escaping special characters and/or blanks that I do not know?
","Run from Cygwin terminal
sha256sum ""/cygdrive/C/Users/s1504gl/Desktop/Täst\ .txt""

In general Cygwin program do not accept Windows paths and works surely with POSIX path
","244","<powershell><cygwin><sha256>","0","0","2","2018-12-19 19:19:27","53857865","0","","1630171","","2018-11-27 18:31:32","2018-11-27 13:23:38",""
"53500733","Run sha256sum (from Cygwin) on file with special character and blank (quoting does not work)","I have Cygwin installed in order to use Linux command line tools on Windows. I also added it to my PATH. In general, it works fine, but I observe this weird behavior:
I want to run sha256sum on the file C:\Users\s1504gl\Desktop\Täst .txt. Note the german Umlaut ä and the whitespace before the file extension. In order to avoid problems with paths, I always quote paths in command line calls, such as:
sha256sum ""C:\Users\s1504gl\Desktop\Täst .txt""

However, PowerShell returns

/usr/bin/sha256sum: '""C:\Users\s1504gl\Desktop\T'$'\303\244''st .txt""': No such file or directory

When I rename the file to either Täst.txt or Test .txt, it works. So the combination of the special character ä and the whitespace seems to cause the problem. Exchanging double quotes by single quotes does not change anything in this case.
I am pretty sure it has to to with PowerShell since the example works without any problems on my Linux machine.
Is there some other way of escaping special characters and/or blanks that I do not know?
","I found the following workaround:
I create a temporary file from R, containing all the necessary commands and then run this tempfile using bash which is also included in Cygwin. This way, I escape from the problem occurring due to different encodings in Windows and the Linux tools from Cygwin.
","244","<powershell><cygwin><sha256>","0","0","2","2018-12-19 19:19:27","53857865","0","","1630171","","2018-11-27 18:31:32","2018-11-27 13:23:38",""
"49307988","How to generate random number between 0 and 1 using a sha256 hash","I have a randomly generated sha256 hash and would like to generate a number between 0 and 1 based on this hash. How do I go about doing this? 


var hash = crypto.createHmac(""sha256"", config.server_seed).update(this.roundID).digest(""hex"");

var randomNumber = parseInt(hash, 16) // am I along the right tracks here? 



","You're on the right track, you just need to divide randomNumber by the SHA256 hash space size, which is Math.pow(2, 256):
var hash = crypto.createHmac(""sha256"", config.server_seed).update(this.roundID).digest(""hex"");

var randomNumber = parseInt(hash, 16) / Math.pow(2, 256);

Although I'm not sure why you would want to do this...
","242","<javascript><encryption><hash><sha256>","0","1","1","2018-03-15 19:51:00","49308076","2","","","","","2018-03-15 19:44:03",""
"40781604","Need to make changes to security algorithms from md5 to SHA-256 HMAC php","I am a newbie to world of web development and I have been ask by a friend to upgrade their payment gateway from md5 to SHA-256 HMAC.
I have tried to change it on my own, however I am getting errors when go to the secure gateway, I think there are some issue on my code that I not quiet understand
Existing code:
if($type == ""Credit Card"") {
    unset($_POST[""type""]);
    unset($_POST[""order_id""]);
    $SECURE_SECRET = ""MIGS_SS"";  
    $vpcURL = $_POST[""virtualPaymentClientURL""] . ""?"";  
    unset($_POST[""SubButL""]);
    unset($_POST[""virtualPaymentClientURL""]); 
    $md5HashData = $SECURE_SECRET;
    ksort ($_POST);
    $appendAmp = 0;

foreach($_POST as $key => $value) {
  if (strlen($value) > 0) {      
if ($appendAmp == 0) {
  $vpcURL .= urlencode($key) . '=' . urlencode($value);
  $appendAmp = 1;
  } else {
  $vpcURL .= '&' . urlencode($key) . ""="" . urlencode($value);
}
  $md5HashData .= $value;
  }
}

if (strlen($SECURE_SECRET) > 0) {
  $vpcURL .= ""&vpc_SecureHash="" . strtoupper(md5($md5HashData));
}

header(""Location: "".$vpcURL);
} else {
header(""Location: index.php?dz=eft&id="".$order_id.""\n\n"");
}

The new code I got:
            foreach($_POST as $key => $value) {
         // create the hash input and URL leaving out any fields that have no  value
            if (strlen($value) > 0) {
        ?>
             <input type=""hidden"" name=""<?php echo($key); ?>""  value=""<?php    echo($value); ?>""/><br>
      <?php             
            if ((strlen($value) > 0) && ((substr($key, 0,4)==""vpc_"") ||       (substr($key,0,5) ==""user_""))) {
         $hashinput .= $key . ""="" . $value . ""&"";
        }
        }

       }

       $hashinput = rtrim($hashinput, ""&"");
        ?>      
             <!-- attach SecureHash -->
             <input type=""hidden"" name=""vpc_SecureHash""  value=""<?php echo(strtoupper(hash_hmac('SHA256', $hashinput, pack('H*',$securesecret)))); ?>""/>
            <input type=""hidden"" name=""vpc_SecureHashType"" value=""SHA256"">

How can I use it in my code?
If you could u write the correct code here where I should change? 
","Why are you changing entire code..
Just change md5 function to sha.
if (strlen($SECURE_SECRET) > 0) {
  $vpcURL .= ""&vpc_SecureHash="" . strtoupper(md5($md5HashData));
}

to 
if (strlen($SECURE_SECRET) > 0) {
  $vpcURL .= ""&vpc_SecureHash="" . strtoupper(sha1($md5HashData));
}

","242","<php><md5><sha256>","0","0","1","2016-11-26 12:37:48","40781766","1","0","178163","","2016-11-26 12:37:48","2016-11-24 08:47:46",""
"39013731","Wrong bytes are sometimes written to disk. Hardware problems?","I have written a UDP based transfer protocol using C++ 11 (VS2013). It's blazing fast - and works great 99,9% of the time.

But I have observed a few times that the wrong bytes are written to disk (Samsung 250 GB SSD 850 EVO) - or atleast it seems so.
Here's basically what sometime happens when I transfer a 6GB test file:

The file is split up into smaller UDP datapackages - 64K in size. (Network layer disassebles and reassembles the UDP datagrams to a larger package).
Client sends the datapackage (udp) to the server - the payload is encrypted using AES256 (OpenSSL) and contains data + metadata. The Payload also contains a SHA256 Hash of the entire payload - as an extra integrity check on top up the UDP checksum. 
Server receives the datapackage, sends an ""ACK"" package back to the Client and then calculates the SHA256 Hash. The hash is identical to the Clients hash - all is good
Server then writes the data of the package to disk (Using fwrite instead of streams due to the huge performance differences). The server only processes one package at a time - and each filepointer has a mutex guard which protects it from being closed by another worker thread that closes filepointers that have been inactive for 10 secs.
Client receives UDP ""ACK"" packages and re-sends packages that have not been acked (meaning they didn't make it). The rate of incoming ACK packages controls the sending speed of the client (aka. congestion control/throtteling). The order of packages received on the server does not matter since each package contains a Position value (where in the file the data should be written).

After the entire file is transferred I do a full SHA256 hash of the 6GB file on both the server and the client, but to my terror I have observed twice the last few days that the hash is NOT the same (when making approx 20 test transfers).
After comparing the files in Beyond Compare, I usually find that there is one or two bits (in a 6 GB file) that is wrong on the serverside.
See screenshot below:
Server code - invoked after DataPackage hash has been verified
void WriteToFile(long long position, unsigned char * data, int lengthOfData){

    boost::lock_guard<std::mutex> guard(filePointerMutex);

    //Open if required
    if (filePointer == nullptr){
        _wfopen_s(&filePointer, (U(""\\\\?\\"") + AbsoluteFilePathAndName).c_str(), L""wb"");
    }

    //Seek
    fsetpos(filePointer, &position);

    //Write - not checking the result of the fwrite operation - should I?
    fwrite(data, sizeof(unsigned char), lengthOfData, filePointer);

    //Flush
    fflush(filePointer);

    //A separate worker thread is closing all stale filehandles 
    //(and setting filePointer to NULLPTR). This isn't invoked until 10 secs
    //after the file has been transferred anyways - so shouldn't matter
}

So to sum up:

The char * was correct in memory on the server - otherwise the Servers SHA256 Hash would have failed - right? (a hash collision with sha256 is extremely unlikely).
Corruption seems to happen when writing to disk. Since there are about 95.000 of these 64k packages written to disk when sending a 6GB file - and it only happens once or twice (when it happens at all) - means that it is a rare phenomenon

How can this happen? Is my hardware (bad ram/disk) to blame for this?
Do I actually need to read from disk after writing, and doing e.g. memcmp in order to be 100% sure that the correct bytes are written to disk?
(Oh boy - what a performance hit that will be...)
","On my local pc - it turned out that it was a RAM issue. Found out by running memtest86.
Nevertheless - I modified the code for our software that runs on our production servers - making it read from disk to verify that the correct bytes were in fact written. These servers write about 10TB to disk every day - and after a week of running the new code - the error happened once. The software corrects this by writing and verifying again - but it's still interesting to see that it actually happened. 
1 bit out of 560000000000000 bits were written wrong to disk. Amazing.
I will probably run memtest86 on this server later to see if this is also a RAM issue - but I'm not really super concerned about this anymore since file integrity is more or less ensured, and the servers are showing no signs of hardware problems otherwise.
So - if file integrity is extremely important to you (like it is for us) - then don't trust your hardware 100% and validate reading/writing operations. Anomalies might be an early sign of HW problems.
","242","<c++><hardware><ram><sha256>","6","4","1","2016-10-26 06:52:32","40255548","22","4","1303478","","2016-08-18 11:52:23","2016-08-18 08:49:02",""
"23380851","SHA256Cng in Javascript","I need to be able to produce a hash value in javascript that will match on the server.  
These are the sample input:  
string plaintext = ""1398836885"";
string salt = ""8xTpd9gMxF22nBcotVChIH5ocxplLQzI3Ba7xXBkMyyOVVr6e5/mupqxFHYVQD0U77BEbQ9auMWglUK63PeqCX4eB8kzBoOEAr1nXqpT3jjNwdYPQPdRvwPjdI/357CP"";

the correct hash result is:
ovsvdWYOUIXU+LAfIYtOf7N60v6Qap6qBgS3IVwBG6k=  

The code for getting plaintext is:  
var now = ((long)(DateTime.UtcNow - new DateTime(1970, 1, 1)).TotalSeconds).ToString();  

And the code that Generates the correct hash:  
Usage:  
var _hash = Hashbrowns.Hash(plaintext, salt);  

Code:  
public static class Hashbrowns
{
    private const string chars = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz"";

    public static string Hash(string plaintext, string salt = null)
    {
        return Hashbrowns.Hash<SHA256Cng>(plaintext, salt);
    }

    public static string Hash<TAlgorithm>(string plaintext, string salt = null) where TAlgorithm : HashAlgorithm, new()
    {
        var algorithm = Activator.CreateInstance<TAlgorithm>();

        if (string.IsNullOrWhiteSpace(salt))
        {
            salt = Config.Salt;
        }

        var data = Encoding.UTF8.GetBytes(plaintext + salt);
        return Convert.ToBase64String(algorithm.ComputeHash(data));
    }

    public static string HashPassword(string value)
    {
        return Hash(value, Config.Salt + Config.Spice);
    }

    public static string RandomString(int length)
    {
        var random = new Random();
        return new string(
            Enumerable
                .Repeat(Hashbrowns.chars, length)
                .Select(o => o[random.Next(o.Length)])
                .ToArray()
            );
    }
}  

JAVASCRIPT PART
In my javascript code, I use Crypto Js to get SHA256:  
<script type=""text/javascript"" src=""plugin/CryptoJS v3.1.2/rollups/sha256.js""></script>  


Hash: function(){

    var o = ""13988354648xTpd9gMxF22nBcotVChIH5ocxplLQzI3Ba7xXBkMyyOVVr6e5/mupqxFHYVQD0U77BEbQ9auMWglUK63PeqCX4eB8kzBoOEAr1nXqpT3jjNwdYPQPdRvwPjdI/357CP"",
            hash256 = CryptoJS.SHA256(o),           
        ;

    console.log(hash256.toString(CryptoJS.enc.Base64)); 

}  

And the result is:  
a2fb2f75660e5085d4f8b01f218b4e7fb37ad2fe906a9eaa0604b7215c011ba9  

Obviously, they are not the same.  
Luckily, there was a version of JAVA code, that can produce same result. I just got this code from outsource developer, and I'm telling you, I'm not so familiar with JAVA.  
StringBuilder sb = new StringBuilder();

    MessageDigest md = MessageDigest.getInstance(""SHA-256"");
    md.reset();
    byte[] buffer = hash.getBytes(""UTF-8"");
    md.update(buffer);
    byte[] digest = md.digest();

    for (int i  = 0; i < digest.length; i++){
      sb.append(Integer.toString((digest[i] & 0xff) + 0x100, 16).substring(1));
    }

    hashKey = Base64.encodeToString(digest, Base64.DEFAULT);

}

They said that they were able to get the correct result using this code. And if this code is possible to convert into javascript code, this may solved the problem.  
BTW, this code is part of a simple mobile app (html base) that will be published using PhoneGap. There is no API on the server that I can use to produce hash.
","The hashing part is actually working fine - you're getting the same binary data in both cases - the only difference is that your output in the Javascript is in hex, rather than base64. This C# code:
using System;

class Test
{
    static void Main()
    {
        string base64 = ""ovsvdWYOUIXU+LAfIYtOf7N60v6Qap6qBgS3IVwBG6k="";
        byte[] rawData = Convert.FromBase64(base64);
        Console.WriteLine(BitConverter.ToString(rawData));
    }
}

... prints out:
A2-FB-2F-75-66-0E-50-85-D4-F8-B0-1F-21-8B-4E-7F-B3-7A-D2-FE-90-6A-9E-AA-06-04-B7-21-5C-01-1B-A9

That's the same as your Javascript output, modulo casing and the ""-"" between bytes.
Having just tried this myself with Crypto-js, I think the problem is that you don't have the enc-base64.js component, which isn't included in the rollup. Just add:
<script type=""text/javascript"" src=""plugin/CryptoJS v3.1.2/components/enc-base64.js""></script>

... and everything should be okay. (Check that you've got that file, of course...)
","241","<c#><java><javascript><hash><sha256>","0","2","1","2014-04-30 06:26:49","23380960","0","3","","","","2014-04-30 06:10:42",""
"51323259","Can you access browser memory dump in Javascript","I know it has been asked before. But I am yet not sure about the solution(whether it is at all possible).
In firefox, even in IE, if I login to gmail, and take the memory dump of the browser process, password is clearly visible in plain text.
Though this does not happen at all for chrome.
So, was just wondering can we at all, at least hash(using salted has) or remove the password from browser memory dump in javascript for our website?
","","239","<javascript><browser><sha256>","1","","0","2018-07-13 10:38:52","","1","","","","","2018-07-13 10:38:52",""
"18731678","Combine CRC32(), MD5() && SHA256 to make a Salt Combination is too much ?","The problem maybe that it would overcharge the server Memory while Creating Hashes and maybe twice while loading it.
So did you think is better to make a function that specializes in this or just use the default  SHA256 instead?
","I assume the context here is hashing passwords. Why reimplement what already exists? If you have PHP 5.5, you can take advantage of the new password hashing library, which drastically simplifies the whole process.
If you're running an older version of PHP, I'd use a tried and tested framework, such as phpass.
","239","<php><md5><salt><sha256><hash>","0","0","1","2013-09-11 02:32:46","18731715","1","","","","","2013-09-11 02:22:04",""
"43949371","How to simulate CCHmacContext() in iOS Objective C?","i want to transform this method that created Swift3 to Objective C.
func HMAC_CREATOR(MIX_STR mixStr:String,KEY_DATA_UINT8 keyDataUint8:Array<UInt8>) -> String {
        let signatureData : Data = mixStr.data(using: .utf8)!
        let digest = UnsafeMutablePointer<UInt8>.allocate(capacity:Int(CC_SHA256_DIGEST_LENGTH))
        var hmacContext = CCHmacContext()
        CCHmacInit(&hmacContext, CCHmacAlgorithm(kCCHmacAlgSHA256), (keyDataUint8), (keyDataUint8.count))
        CCHmacUpdate(&hmacContext, [UInt8](signatureData), [UInt8](signatureData).count)
        CCHmacFinal(&hmacContext, digest)
        let macData = Data(bytes: digest, count: Int(CC_SHA256_DIGEST_LENGTH))
        return  macData.hexEncodedString()
    }

","A fairly straight translation of your code into Objective-C is:
#include <CommonCrypto/CommonCrypto.h>

NSString *HMAC_CREATOR(NSString *mixStr, UInt8 *keyData, size_t keyDataLength) {
    NSData *signatureData = [mixStr dataUsingEncoding: NSUTF8StringEncoding];

    CCHmacContext hmacContext;
    CCHmacInit(&hmacContext, kCCHmacAlgSHA256, keyData, keyDataLength);
    CCHmacUpdate(&hmacContext, signatureData.bytes, signatureData.length);

    NSMutableData *digest = [[NSMutableData alloc] initWithCapacity: CC_SHA256_DIGEST_LENGTH];
    CCHmacFinal(&hmacContext, digest.mutableBytes);

    // hexEncodedString is not a member of NSData so I'm not sure what this is supposed to be.
    // Probably added in Swift by an extension
    return [digest hexEncodedString];
}

The tricky part is right there at the end.  Evidently you Swift code includes a function (perhaps in an extension) that adds a method called hexEncodedString to NSData.
","238","<ios><objective-c><swift><sha256><cchmac>","-1","1","1","2017-05-13 07:15:11","","5","","","","","2017-05-13 05:00:43","2017-05-13 11:10:58"
"52413010","select sha256 decrypt and md5 conversion postgresql and java","Good afternoon, I need to convert a UUID to sha256 and later to md5, in java it worked, but if I do it by pgadmin(postgres) 1 character is different
in java
public class outro {

public static void main(String[] args) {
    String prontuarioBaseUUID = ""a1d347fc-094f-49de-91b9-f2765c58b94d"";
    System.out.println(uuidSha2Encrypt(prontuarioBaseUUID));

}

public static String uuidSha2Encrypt(String uuid) {
    try {
        MessageDigest md = MessageDigest.getInstance(""SHA-256"");
        md.update(uuid.getBytes());
        return UUID.nameUUIDFromBytes(md.digest()).toString();
    } catch (NoSuchAlgorithmException ns) {
        throw new RuntimeException(""Algoritmo SHA-256 não disponível"", ns);
    }
}

result d5fabb45-dbd1-399b-a6c1-515367b8a2d4
in pgadmin postgres

select uuid_in(md5(digest('a1d347fc-094f-49de-91b9-f2765c58b94d', 'sha256'))::cstring) from tb_paciente

result d5fabb45-dbd1-b99b-a6c1-515367b8a2d4
what is problem? thxx

d5fabb45-dbd1-399b-a6c1-515367b8a2d4
d5fabb45-dbd1-b99b-a6c1-515367b8a2d4

","There's problem with your Java method in that it doesn't include the namespace required by UUID v3. You need to prepend the namespace to the name before calling UUID.nameUUIDFromBytes:
private static final UUID NAMESPACE = UUID.fromString(""00000000-0000-0000-0000-000000000000"");

public static void main(String[] args) {
    // Charset should match SERVER_ENCODING
    System.out.println(uuidV3(NAMESPACE, ""test"".getBytes(StandardCharsets.UTF_8)));
}

public static UUID uuidV3(UUID namespace, byte[] name) {
    byte[] ns = toBytes(namespace);
    byte[] nsAndName = concatenate(ns, name);
    return UUID.nameUUIDFromBytes(nsAndName);
}

public static byte[] concatenate(byte[] a, byte[] b) {
    byte[] result = new byte[a.length + b.length];
    System.arraycopy(a, 0, result, 0, a.length);
    System.arraycopy(b, 0, result, a.length, b.length);
    return result;
}

public static byte[] toBytes(UUID uuid) {
    ByteBuffer buffer = ByteBuffer.wrap(new byte[16]);
    buffer.putLong(uuid.getMostSignificantBits());
    buffer.putLong(uuid.getLeastSignificantBits());
    return buffer.array();
}

I've used the nil namespace in the above example, but it could be anything.
The test above prints
96e17d7a-ac89-38cf-95e1-bf5098da34e1

Which matches the output of the equivalent postgres query:
select uuid_generate_v3(uuid_nil(), 'test');

","238","<java><postgresql><md5><sha256>","2","4","1","2018-09-19 21:14:24","","2","","","","","2018-09-19 19:30:04",""
"53329780","How to decode Base64 encoding of a SHA256 hash in JAVA","I am trying to decode Base64 encoding of a SHA256 to hash SHA256
(Base64 encoding of a SHA256 in database) 
qcvcu40M9h9UH9rkrCjjT3CujLyDj/XPD/OMIHGX2PY=  (44 length)
To convert it to SHA256 HASH 
1751f72c730da90e3c6f88ab900c61f491d57d98d148e309d1704141e1b4e586   (64 length)
--- Not working codes --
String value = ""qcvcu40M9h9UH9rkrCjjT3CujLyDj/XPD/OMIHGX2PY="";
byte[] decode = Base64.decodeBase64(value);
value = new String(decode, Charset.forName(""UTF-8""));
","","237","<base64><sha256>","0","","0","2018-11-16 00:33:08","","0","","","","","2018-11-16 00:33:08",""
"54177511","How do you connect to MySQL using PHP's mysqli when using sha256_password (access denied)","I'm using MySQL 5.7.24 and PHP 7.2.10. MySQL is configured with SSL. I have a user my_user with password abc123. I have tried configuring with both authentication plugins:
ALTER USER 'my_user'@'192.168.192.150' IDENTIFIED WITH sha256_password BY 'abc123';
ALTER USER 'my_user'@'192.168.192.150' IDENTIFIED WITH mysql_native_password BY 'abc123';

From my PHP server, I can successfully connect using the mysql command line client without specifying anything other than the host, user, and password. However, from PHP, I can connect only when using mysql_native_password. Not when using sha256_password.
The following PHP code works fine with mysql_native_password:
$mysqli = mysqli_init();
$mysqli->options(MYSQLI_OPT_CONNECT_TIMEOUT, 5);

$con = $mysqli->real_connect('192.168.192.100', 'my_user', 'abc123', 'my_db', 
3306, null, MYSQLI_CLIENT_SSL | MYSQLI_CLIENT_SSL_DONT_VERIFY_SERVER_CERT);
var_dump($mysqli->query('SELECT 1;'));

However, when I use sha256_password, I get the error ""Access denied for user 'my_user'@'192.168.192.150' (using password: YES)."" I've tried alternately adding both of the following statements (before real_connect) with no success (but, I would add, I shouldn't need either of these, since I can connect with the command line client without specifying these options*).
$mysqli->ssl_set(null, null, 'ca.pem', null, null);
$mysqli->ssl_set('client-key.pem', 'client-cert.pem', 'ca.pem', null, null);

So how is one supposed to use sha256_password from mysqli in PHP?
*NOTE: My PHP server is a different machine than my MySQL server. There is no my.cnf on the PHP that server that contains the ssl-ca, ssl-cert, and ssl-key options, so I really, try can connect without them using mysql.
UPDATE 1
In case it's helpful, here's some diagnostic info from phpinfo:
mysqli

MysqlI Support => enabled
Client API library version => mysqlnd 5.0.12-dev - 20150407 - $Id: 38fea24f2847fa7519001be390c98ae0acafe387 $
Active Persistent Links => 0
Inactive Persistent Links => 0
Active Links => 0

Directive => Local Value => Master Value
mysqli.allow_local_infile => On => On
mysqli.allow_persistent => On => On
mysqli.default_host => no value => no value
mysqli.default_port => 3306 => 3306
mysqli.default_pw => no value => no value
mysqli.default_socket => no value => no value
mysqli.default_user => no value => no value
mysqli.max_links => Unlimited => Unlimited
mysqli.max_persistent => Unlimited => Unlimited
mysqli.reconnect => Off => Off
mysqli.rollback_on_cached_plink => Off => Off

mysqlnd

mysqlnd => enabled
Version => mysqlnd 5.0.12-dev - 20150407 - $Id: 38fea24f2847fa7519001be390c98ae0acafe387 $
Compression => supported
core SSL => supported
extended SSL => supported
Command buffer size => 4096
Read buffer size => 32768
Read timeout => 86400
Collecting statistics => Yes
Collecting memory statistics => No
Tracing => n/a
Loaded plugins => mysqlnd,debug_trace,auth_plugin_mysql_native_password,auth_plugin_mysql_clear_password,auth_plugin_caching_sha2_password,auth_plugin_sha256_password
API Extensions => mysqli,pdo_mysql

openssl

OpenSSL support => enabled
OpenSSL Library Version => OpenSSL 1.1.0g  2 Nov 2017
OpenSSL Header Version => OpenSSL 1.1.0g  2 Nov 2017
Openssl default config => /usr/lib/ssl/openssl.cnf

Directive => Local Value => Master Value
openssl.cafile => no value => no value
openssl.capath => no value => no value

","","236","<php><mysql><ssl><mysqli><sha256>","0","","0","2019-01-14 08:08:50","","0","","1653225","","2019-01-14 08:08:50","2019-01-14 07:50:23",""
"42663932","How to assign a variable to a hash_hmac sha256 string or data in php?","I am using mastercard payment gateway .
All works fine if I hardcode the data or string of the hash_hmac sha256.
the working version:
$vpcURL = 'https://migs.mastercard.com.au/vpcpay?';
$secret = strtoupper(""MYSECRET CODE"");

$data =""vpc_AccessCode=0E5AC9E6&vpc_Amount=1000&vpc_Command=pay&vpc_Locale=en&vpc_MerchTxnRef=TEST_TRN&vpc_Merchant=TESTSITE&vpc_OrderInfo=123&vpc_ReturnURL=https://www.examplesite.com/payment-confirmation/&vpc_Version=1"";

$sha256_hmac = strtoupper(hash_hmac('sha256', $data, pack('H*', $secret)));
header(""Location: "" . $vpcURL . ""&"" . $data . ""&vpc_SecureHash="" . $sha256_hmac.""&vpc_SecureHashType=SHA256"");

but I can not pass the hardcoded value to the vpc_Amount
I am getting the amount from a form where user can input the amount they wish.
So I am getting the amount from:
$totalAmount = $_POST['totalAmount'];

Now I want to pass this $totalAmount to the $data.
So I change the $data to this:
$data =""vpc_AccessCode=0E5AC9E6&vpc_Amount=$totalAmount&vpc_Command=pay&vpc_Locale=en&vpc_MerchTxnRef=TEST_TRN&vpc_Merchant=TESTSITE&vpc_OrderInfo=123&vpc_ReturnURL=https://www.examplesite.com/payment-confirmation/&vpc_Version=1"";

When I use this the payment gateway directly goes to the confirmation page : https://www.examplesite.com/payment-confirmation/ and the all the values are empty.
I think it is a simple syntex error..
How can I fix this?
how to pass the $totalAmount to $data correctly?
print_r ($data); gives this:

vpc_AccessCode=0E5AC9E6&vpc_Amount=58,258.00&vpc_Command=pay&vpc_Locale=en&vpc_MerchTxnRef=TEST_TRN&vpc_Merchant=TESTSITE&vpc_OrderInfo=123&vpc_ReturnURL=https://www.examplesite.com/payment-confirmation/?vpc_Version=1

UPDATE
if I update the code to 
$real_integer_amount = filter_var($totalAmount, FILTER_SANITIZE_NUMBER_INT);

$data =""vpc_AccessCode=0E5BC9E7&vpc_Amount={$real_integer_amount}&vpc_Command=pay&vpc_Locale=en&vpc_MerchTxnRef=TEST_TRN&vpc_Merchant=TESTSITE&vpc_OrderInfo=123&vpc_ReturnURL=https://www.examplesite.com/payment-confirmation/?vpc_Version=1"";

in confirmation page it shows the real amount and others are empty but still not going to the payment gateway where user can input their card details
","I can't imagine the receiving server wants commas in the value. Also, you should build a query string like this to avoid problems with unescaped values:
<?php
$vpcURL = 'https://migs.mastercard.com.au/vpcpay?';
$secret = strtoupper(""MYSECRET CODE"");
$totalAmount = str_replace("","", """", $_POST[""totalAmount""]);

$data = [
    ""vpc_AccessCode"" => ""0E5AC9E6"",
    ""vpc_Amount"" => $totalAmount,
    ""vpc_Command"" => ""pay"",
    ""vpc_Locale"" => ""en"",
    ""vpc_MerchTxnRef"" => ""TEST_TRN"",
    ""vpc_Merchant"" => ""TESTSITE"",
    ""vpc_OrderInfo"" => ""123"",
    ""vpc_ReturnURL"" => ""https://www.examplesite.com/payment-confirmation/"",
    ""vpc_Version"" => ""1"",
];
$data = http_build_query($data);

$sha256_hmac = strtoupper(hash_hmac('sha256', $data, pack('H*', $secret)));
header(""Location: "" . $vpcURL . ""&"" . $data . ""&vpc_SecureHash="" . $sha256_hmac.""&vpc_SecureHashType=SHA256"");

","235","<php><string><sha256><hmac><mastercard>","-1","0","2","2017-03-08 07:26:12","42665324","7","","2767193","","2017-03-08 06:27:07","2017-03-08 05:51:42",""
"42663932","How to assign a variable to a hash_hmac sha256 string or data in php?","I am using mastercard payment gateway .
All works fine if I hardcode the data or string of the hash_hmac sha256.
the working version:
$vpcURL = 'https://migs.mastercard.com.au/vpcpay?';
$secret = strtoupper(""MYSECRET CODE"");

$data =""vpc_AccessCode=0E5AC9E6&vpc_Amount=1000&vpc_Command=pay&vpc_Locale=en&vpc_MerchTxnRef=TEST_TRN&vpc_Merchant=TESTSITE&vpc_OrderInfo=123&vpc_ReturnURL=https://www.examplesite.com/payment-confirmation/&vpc_Version=1"";

$sha256_hmac = strtoupper(hash_hmac('sha256', $data, pack('H*', $secret)));
header(""Location: "" . $vpcURL . ""&"" . $data . ""&vpc_SecureHash="" . $sha256_hmac.""&vpc_SecureHashType=SHA256"");

but I can not pass the hardcoded value to the vpc_Amount
I am getting the amount from a form where user can input the amount they wish.
So I am getting the amount from:
$totalAmount = $_POST['totalAmount'];

Now I want to pass this $totalAmount to the $data.
So I change the $data to this:
$data =""vpc_AccessCode=0E5AC9E6&vpc_Amount=$totalAmount&vpc_Command=pay&vpc_Locale=en&vpc_MerchTxnRef=TEST_TRN&vpc_Merchant=TESTSITE&vpc_OrderInfo=123&vpc_ReturnURL=https://www.examplesite.com/payment-confirmation/&vpc_Version=1"";

When I use this the payment gateway directly goes to the confirmation page : https://www.examplesite.com/payment-confirmation/ and the all the values are empty.
I think it is a simple syntex error..
How can I fix this?
how to pass the $totalAmount to $data correctly?
print_r ($data); gives this:

vpc_AccessCode=0E5AC9E6&vpc_Amount=58,258.00&vpc_Command=pay&vpc_Locale=en&vpc_MerchTxnRef=TEST_TRN&vpc_Merchant=TESTSITE&vpc_OrderInfo=123&vpc_ReturnURL=https://www.examplesite.com/payment-confirmation/?vpc_Version=1

UPDATE
if I update the code to 
$real_integer_amount = filter_var($totalAmount, FILTER_SANITIZE_NUMBER_INT);

$data =""vpc_AccessCode=0E5BC9E7&vpc_Amount={$real_integer_amount}&vpc_Command=pay&vpc_Locale=en&vpc_MerchTxnRef=TEST_TRN&vpc_Merchant=TESTSITE&vpc_OrderInfo=123&vpc_ReturnURL=https://www.examplesite.com/payment-confirmation/?vpc_Version=1"";

in confirmation page it shows the real amount and others are empty but still not going to the payment gateway where user can input their card details
","what I posted in first works very fine.. 
if I change vpc_amount to any (hardcoded) values that works.. 
the problem was when I assign the $totalAmount to vpc_amount the variable ($totalAmount) holds decimal points and thousand separators.. 
that makes this issue.. 
I just wanted to sanitize the variable before passing this totalAmount to the datato make it works..
so I've updated it as:
$real_integer_amount = filter_var($totalAmount, FILTER_SANITIZE_NUMBER_INT);

and now this works fine..
so the final working code is :
$vpcURL = 'https://migs.mastercard.com.au/vpcpay?';
$secret = strtoupper(""My Secret Code"");

$real_integer_amount = filter_var($totalAmount, FILTER_SANITIZE_NUMBER_INT);

$data =""vpc_AccessCode=0E5AC9E6&vpc_Amount=$real_integer_amount&vpc_Command=pay&vpc_Locale=en&vpc_MerchTxnRef=TEST_TRN&vpc_Merchant=TESTSITE&vpc_OrderInfo=123&vpc_ReturnURL=https://www.trinitycollege.lk/payment-confirmation/&vpc_Version=1"";

$sha256_hmac = strtoupper(hash_hmac('sha256', $data, pack('H*', $secret)));
header(""Location: "" . $vpcURL . ""&"" . $data . ""&vpc_SecureHash="" . $sha256_hmac.""&vpc_SecureHashType=SHA256"");

@MagnusEriksson : thanks for the time and suggestions.. URL encoding did nothing with this issue.
@pvg there was no any spelling mistakes.. if I just use {$totalAmount} in the $data it did not work.. but this needed this : FILTER_SANITIZE_NUMBER_INT
@miken32 thank you for your answer. I've tried to use your code just by replacing the params with my actual detail.. but it gave me this error ""HTTP Status - 400 E5000: Cannot form a matching secure hash based on the merchant's request using either of the two merchant's secrets""
I've double checked the spelling and values/params
This may help someone else in future..
","235","<php><string><sha256><hmac><mastercard>","-1","0","2","2017-03-08 07:26:12","42665324","7","","2767193","","2017-03-08 06:27:07","2017-03-08 05:51:42",""
"26735580","C code openssl sha256 gives wrong output","I Have this code to perform a simple sha256 for a string.
theword are extracted from a textfile, line by line.
char sha256fromString()
{
SHA256_CTX ctx;
SHA256_Init(&ctx);
SHA256_Update(&ctx, keyword, strlen(keyword));
SHA256_Final(outkey, &ctx);
return outkey;
}

keyword is derived from :
FILE *fp;
char filename[] = ""file.txt"";

if ((fp = fopen(filename, ""r"")) == 0)
{
     fprintf(stderr, ""%s: failed to open file %s\n"", argv[0], filename);
     exit(1);
}

while (fgets(keyword, sizeof(keyword), fp) != NULL)

{

This gives me for input 
0:
9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa

I need:
5feceb66ffc86f38d952786c6d696c79c2dbc239dd4e91b46729d73a27fb57e9

","","231","<c++><c><openssl><sha><sha256>","0","","0","2014-11-04 12:49:32","","6","","","","","2014-11-04 12:49:32",""
"19599424","MySQL/PHP - Database User Login Conversion","I have a vBulletin Database that I'm trying to switch users to a custom system, I've converted the usernames, and the passwords, I then converted the double MD5'd passwords to SHA256, but I'm left with one issue, which is the salt.
What would be the easiest way to either convert the old vBulletin salt, or to check to see if the password is correct, and then generate a new salt for the first time they login? 
Checking script:
$vbconvert = md5(md5($_POST[""password""]));
$check_password = hash('sha256', $vbconvert . $row['salt']); 
for($round = 0; $round < 65536; $round++) 
{ 
      $check_password = hash('sha256', $check_password . $row['salt']); 
} 

if($check_password === $row['password']) 
{ 

      $login_ok = true; 
} 

In short, what is the easiest way to either convert or create a new salt?
","Do you know about the PHP function password_hash(), it is the recommended way to hash passwords. It automatically generates a cryptographically safe salt for each password and includes it in the resulting 60-character string.
$2y$10$nOUIs5kJ7naTuTFkBy1veuK0kSxUFXfuaOKdOKf9xYT0KKIGSJwFa

The example above is a possible result of password_hash(), have a look at the part $nOUIs5kJ7naTuTFkBy1veu, this is the generated salt and it will be used by the function password_verify() to check the password.
You won't have to worry about the salt anymore, no additional database field is necessary, just store the hash and you are fine!
The easiest way to migrate your passwords, is to wait for the user to login the next time. When he enters the password, you can check if the hash is already migrated, then check with password_verify(). If it is not yet migrated then check it with your old vBulletin code, if the password is correct then use password_hash() to generate a new hash and store it.
","231","<php><mysql><md5><salt><sha256>","0","0","1","2013-10-30 12:07:54","","1","","","","","2013-10-25 21:05:58",""
"35914327","Error 0x2F067065 in ts_rsp_verify.c:291","I receive an error when I run the Openssl verification command on Ubuntu 14.04 with Openssl 1.0.1f 6 Jan 2014. The error is 0x2F067065 with the error string time stamp routines:TS_CHECK_SIGNING_CERTS:ess signing certificate error.
Timestamping provider suspects it is a Openssl bug. Openssl is busy with the new release and is not responsive on this matter that is low priority.
What is this error, how can I fix it? Could someone please help?

This is when the error occurs:
openssl ts -verify -digest e16db7d30581e44a5540f19553852b5a4e4e26f9adc365cc846f94038ee33025 \
-in /tmp/namirial.tsr -CAfile /tmp/NamirialCATSA.pem

Verification: FAILED
140236013643424:error:2F067065:time stamp routines:TS_CHECK_SIGNING_CERTS:ess signing
certificate error:ts_rsp_verify.c:291:

If necessary, I have a complete reproduction scenario I can send privately. The error is systematic and stable.
This is the PHP code where I call openssl library to perform the validation, any help on how to find a similar library (since it seems that is a bug in Openssl, thus I need to use another library) and how to call it form PHP in Ubuntu?
    public static function validate ($hash, $base64_response_string, $response_time, $tsa_cert_file)
{
    //if (strlen($hash) !== 40)
    //if (strlen($hash) !== 64)  // sha256
        //throw new Exception(""Invalid Hash"");

    $binary_response_string = base64_decode($base64_response_string);

    if (!strlen($binary_response_string))
        throw new Exception(""There was no response-string"");    

    if (!intval($response_time))
        throw new Exception(""There is no valid response-time given"");

    if (!file_exists($tsa_cert_file))
        throw new Exception(""The TSA-Certificate could not be found"");

    $responsefile = self::createTempFile($binary_response_string);
    $cmd = ""openssl ts -verify -digest "".escapeshellarg($hash)."" -in "".escapeshellarg($responsefile)."" -CAfile "".escapeshellarg($tsa_cert_file);

    $retarray = array();
    exec($cmd."" 2>&1"", $retarray, $retcode);
    if(unlink($responsefile)) {
            If ($debugMN) {echo "" File Deleted Tempfile in validate""; }       
    }

    /*
     * just 2 ""normal"" cases: 
     *  1) Everything okay -> retcode 0 + retarray[0] == ""Verification: OK""
     *  2) Hash is wrong -> retcode 1 + strpos(retarray[somewhere], ""message imprint mismatch"") !== false
     * 
     * every other case (Certificate not found / invalid / openssl is not installed / ts command not known)
     * are being handled the same way -> retcode 1 + any retarray NOT containing ""message imprint mismatch""
     */

    if ($retcode === 0 && strtolower(trim($retarray[0])) == ""verification: ok"")
    {
        if (self::getTimestampFromAnswer ($binary_response_string) != $response_time)
            throw new Exception(""The responsetime of the request was changed"");

        return true;
    }
    foreach ($retarray as $retline)
    {
        if (stripos($retline, ""message imprint mismatch"") !== false)
            return false;
    }
    throw new Exception(""Systemcommand failed: "".implode("", "", $retarray));
}

Thank you in advance
","You did not ask any question so there is nothing to answer here but either way I'll try to shed some light into your darkness :)
Your provider most likely adds some attribute certificate into the TS responses - I'd guess he's using DSE200 with TAC enabled just likely everyone else seeing similar issues - and OpenSSL currently does not support such scenarios. You can take a look at this older thread from openssl-users mailinglist where this issue had been discussed in details.
","227","<ubuntu><openssl><certificate><sha256><timestamping>","0","0","1","2016-03-11 12:29:43","","5","","6007485","","2016-03-11 12:29:43","2016-03-10 10:49:42",""
"40602337","C# store user's sensitive credential data for 3rd party system","In our application, I need to ask user to enter credentials such as login, apikey for a 3rd party system, so our application can make API call to that system using the credential. The 3rd party system is using SOAP with login/password, or Oauth using with APIKey to generate token etc.
What is the best practice to store user's sensitive credential data?
Currently I have two databases in different servers, one for storing unique salt value for each client, and another database for storing encrypted data, Rijndael Encryption which is computed with salt values. Every time I want to make API call to 3rd party system, I retrieve data from both databases and decrypted data into credentials to use.
From what I heard, this is not a good practice, password should be hashed not encrypted. but if I hash the credential, the information is lost and I can never restore it for calling 3rd party system. 
","","226","<c#><encryption><hash><sha256><rijndael>","1","","0","2016-11-15 05:17:30","","4","","","","","2016-11-15 04:57:37",""
"15115925","In-built key Generation Algorithm using SHA256","I am working on an application in c# .Net where data needs to be encrypted and Since data privacy is my ultimate motive , I am doing it using AES Encryption and I use PasswordDervieBytes for determining the Secret Key. Now Since it uses SHA1 which is broken , I would like to know whether there is an in-built function which uses SHA256 for obtaining my secret key. I also know that RFC2898 can be used but then it also uses SHA1... So, Is there an In-built function which uses SHA256 algorithm ? Thank You in advance for your valuable answers !! 
","There is a SHA256Managed class that will hash the input. It will not encrypt it...
","226","<sha256><encryption-symmetric><data-security>","0","0","1","2013-02-27 15:40:20","","1","","","","","2013-02-27 15:31:12",""
"37603842","KentorAuthServices - Service Provider certificate error with SHA2","Configuring Service Provider certificate in our .NEt Mvc web application using the store.
When configured  use=""Both"" -> It is saying not a valid cert for encrypt/Decrypt
When Configured use=""Signing"" -> It is saying 
Exception Details: System.Security.Cryptography.CryptographicException: Invalid provider type specified.
enter image description here
","I was finally able to resolve the certificate issue. They were two reasons.
1)  X509Certificate2 doesn’t support certificates associated with a CNG private key provider. I have to regenerate certificate using RSA key provider.
2)  Once the certificate is installed to store, Give the full access to “Network Service” as the IIS application runs in this context. For locally, I gave access to ""Everyone""
Hope this helps someone looking at this issue!
","224","<asp.net-mvc><saml-2.0><sha256><kentor-authservices>","0","0","1","2016-06-06 20:23:09","","2","","6352291","","2016-06-06 20:23:09","2016-06-02 23:43:47",""
"47951935","How to transform JavaScript HMAC code to CryptoSwift implementation?","I want to transform this JavaScript HMAC code to Swift using CryptoSwift library.
var crypto = require(""crypto"");
var currentDate = Moment.utc().format(""YYYYMMDDHH"");
var hmac = crypto.createHmac(""sha256"", ""secretTokenKey123"");
hmac.update(currentDate);
var code = hmac.digest(""hex"").toUpperCase();

What is the best way to do that?
This is what I tried, but did not return the correct code:
    let formatter = DateFormatter()
    formatter.dateFormat = ""yyyyMMddHH""
    let dateString = formatter.string(from: Date())
    let baseString = secretToken + dateString
    print(baseString.sha256().uppercased())

I also tried this, but it returns the same wrong code
    var digest = SHA2(variant: .sha256)
    var bytes: Array<UInt8>?
    do {
        _ = try digest.update(withBytes: secretToken.bytes)
        _ = try digest.update(withBytes: dateString.bytes)
        bytes = try digest.finish()
    } catch {}
    if let result = bytes?.toHexString().uppercased() {
        print(result)
    }

I also tried to use HMCA from CryptoSwift directly. But I do not know what message I need to authenticate:
HMAC(key: secretToken.bytes, variant: .sha256).authenticate(???)

","I just discovered the solution myself:
HMAC(key: secretToken.bytes, variant: .sha256).authenticate(dateString.bytes).toHexString().uppercased()

","223","<javascript><ios><swift><sha256><cryptoswift>","1","2","2","2018-01-21 01:55:30","","4","","608639","","2018-01-21 01:55:30","2017-12-23 11:03:38",""
"47951935","How to transform JavaScript HMAC code to CryptoSwift implementation?","I want to transform this JavaScript HMAC code to Swift using CryptoSwift library.
var crypto = require(""crypto"");
var currentDate = Moment.utc().format(""YYYYMMDDHH"");
var hmac = crypto.createHmac(""sha256"", ""secretTokenKey123"");
hmac.update(currentDate);
var code = hmac.digest(""hex"").toUpperCase();

What is the best way to do that?
This is what I tried, but did not return the correct code:
    let formatter = DateFormatter()
    formatter.dateFormat = ""yyyyMMddHH""
    let dateString = formatter.string(from: Date())
    let baseString = secretToken + dateString
    print(baseString.sha256().uppercased())

I also tried this, but it returns the same wrong code
    var digest = SHA2(variant: .sha256)
    var bytes: Array<UInt8>?
    do {
        _ = try digest.update(withBytes: secretToken.bytes)
        _ = try digest.update(withBytes: dateString.bytes)
        bytes = try digest.finish()
    } catch {}
    if let result = bytes?.toHexString().uppercased() {
        print(result)
    }

I also tried to use HMCA from CryptoSwift directly. But I do not know what message I need to authenticate:
HMAC(key: secretToken.bytes, variant: .sha256).authenticate(???)

","HAMC SHA256 in Common Crypto
func hmacSHA256(message:Data, key:Data) -> Data {
    var macData = Data(count: Int(CC_SHA256_DIGEST_LENGTH))

    macData.withUnsafeMutableBytes {macBytes in
        message.withUnsafeBytes {messageBytes in
            key.withUnsafeBytes {keyBytes in
                CCHmac(CCHmacAlgorithm(kCCHmacAlgSHA256),
                       keyBytes,     key.count,
                       messageBytes, message.count,
                       macBytes)
            }
        }
    }
    return macData
}

let clearData = ""clearData0123456"".data(using:.utf8)!
let keyData   = ""keyData8901234562"".data(using:.utf8)!
let hmacData  = hmacSHA256(message:clearData, key:keyData)
print(""hmacData: \(String(describing: hmacData as NSData))"")

hmacData: fcc487ce7dc1115a69a37dc3710610a87ad2fc9c85e2e0a52f0e7ee1dc9407c1
Note:
Include #import <CommonCrypto/CommonCrypto.h> in a bridging header.
Add Security.framework to the project
","223","<javascript><ios><swift><sha256><cryptoswift>","1","0","2","2018-01-21 01:55:30","","4","","608639","","2018-01-21 01:55:30","2017-12-23 11:03:38",""
"15396139","Hashing passwords with exact same inputs doesn't output the same value","I'm trying to hash the password if you sign up on my website, but it doesn't work.
This is my code to hash the password upon signing up:  
$escapedName = mysql_real_escape_string($_POST['user']); 
$escapedPW = mysql_real_escape_string($_POST['password']);

$salt = bin2hex(mcrypt_create_iv(32, MCRYPT_DEV_URANDOM));

$hashedPW = hash('sha256', $escapedPW . $salt);

Then I just insert it in a database (the hashed password and the salt).
For example, when I hash Sas, with the following salt:
abac7ad23185ad19967f0d13e962197962782f0b7ec32d9889c27a93a9e800fa
This is the hashed password:
8ca5c5f31fafbf382533dbcbfc22b3635d776ec7770c7eac58d8ef9f1fa3613c
But when I try to hash the password on log in, with the exact same password and salt, this becomes the hashed pass:
6eb4b16444f18cee19db32bd29a39970e3019c5b1972a982ae4cb9a59642dffc
This is the code I use to login:  
$escapedName = mysql_real_escape_string($_POST['user']);
$escapedPW = mysql_real_escape_string($_POST['password']);
$saltQuery = mysql_query(""SELECT salt FROM members WHERE user='{$escapedName}'"");
while($result = mysql_fetch_assoc($saltQuery)) {
    $salt = $result['salt'];
}

$hashedPW = hash('sha256', $escapedPW . $salt);

$sql = mysql_query(""SELECT * FROM members WHERE user='$escapedName' AND pass='$hashedPW'; "");
while ($res = mysql_fetch_assoc($query2)) {
    $username = $res['user'];
    $PW = $res['pass'];
}

I hope it's not too much code and I also hope you will understand my question.
","Whatever you're doing, it's insecure if you WANT the hashes to be the same! See http://php.net/crypt for proper password hashing.
All you need:
function check_password($password) {  
    ...//get db password to compare
    if (crypt($post_password, $db_results[0]['password']) == $db_results[0]['password']) {  
        return true;  
    } else { return false; }
}

","222","<php><encryption><sha256>","0","0","3","2013-03-13 21:34:39","15396796","5","","","","","2013-03-13 20:47:24",""
"15396139","Hashing passwords with exact same inputs doesn't output the same value","I'm trying to hash the password if you sign up on my website, but it doesn't work.
This is my code to hash the password upon signing up:  
$escapedName = mysql_real_escape_string($_POST['user']); 
$escapedPW = mysql_real_escape_string($_POST['password']);

$salt = bin2hex(mcrypt_create_iv(32, MCRYPT_DEV_URANDOM));

$hashedPW = hash('sha256', $escapedPW . $salt);

Then I just insert it in a database (the hashed password and the salt).
For example, when I hash Sas, with the following salt:
abac7ad23185ad19967f0d13e962197962782f0b7ec32d9889c27a93a9e800fa
This is the hashed password:
8ca5c5f31fafbf382533dbcbfc22b3635d776ec7770c7eac58d8ef9f1fa3613c
But when I try to hash the password on log in, with the exact same password and salt, this becomes the hashed pass:
6eb4b16444f18cee19db32bd29a39970e3019c5b1972a982ae4cb9a59642dffc
This is the code I use to login:  
$escapedName = mysql_real_escape_string($_POST['user']);
$escapedPW = mysql_real_escape_string($_POST['password']);
$saltQuery = mysql_query(""SELECT salt FROM members WHERE user='{$escapedName}'"");
while($result = mysql_fetch_assoc($saltQuery)) {
    $salt = $result['salt'];
}

$hashedPW = hash('sha256', $escapedPW . $salt);

$sql = mysql_query(""SELECT * FROM members WHERE user='$escapedName' AND pass='$hashedPW'; "");
while ($res = mysql_fetch_assoc($query2)) {
    $username = $res['user'];
    $PW = $res['pass'];
}

I hope it's not too much code and I also hope you will understand my question.
","Sorry I can't comment but something tells me that there is a length restriction on the salt column in your database.
Example: The salt field might only allow a 64 characters while the generated salt might be longer therefore when you save the salt it gets trimmed which ultimately changes the hashed password.
If that's the case, you might want to trim the salt before saving it.
I'd advise using PDO to make queries against your database.
","222","<php><encryption><sha256>","0","1","3","2013-03-13 21:34:39","15396796","5","","","","","2013-03-13 20:47:24",""
"15396139","Hashing passwords with exact same inputs doesn't output the same value","I'm trying to hash the password if you sign up on my website, but it doesn't work.
This is my code to hash the password upon signing up:  
$escapedName = mysql_real_escape_string($_POST['user']); 
$escapedPW = mysql_real_escape_string($_POST['password']);

$salt = bin2hex(mcrypt_create_iv(32, MCRYPT_DEV_URANDOM));

$hashedPW = hash('sha256', $escapedPW . $salt);

Then I just insert it in a database (the hashed password and the salt).
For example, when I hash Sas, with the following salt:
abac7ad23185ad19967f0d13e962197962782f0b7ec32d9889c27a93a9e800fa
This is the hashed password:
8ca5c5f31fafbf382533dbcbfc22b3635d776ec7770c7eac58d8ef9f1fa3613c
But when I try to hash the password on log in, with the exact same password and salt, this becomes the hashed pass:
6eb4b16444f18cee19db32bd29a39970e3019c5b1972a982ae4cb9a59642dffc
This is the code I use to login:  
$escapedName = mysql_real_escape_string($_POST['user']);
$escapedPW = mysql_real_escape_string($_POST['password']);
$saltQuery = mysql_query(""SELECT salt FROM members WHERE user='{$escapedName}'"");
while($result = mysql_fetch_assoc($saltQuery)) {
    $salt = $result['salt'];
}

$hashedPW = hash('sha256', $escapedPW . $salt);

$sql = mysql_query(""SELECT * FROM members WHERE user='$escapedName' AND pass='$hashedPW'; "");
while ($res = mysql_fetch_assoc($query2)) {
    $username = $res['user'];
    $PW = $res['pass'];
}

I hope it's not too much code and I also hope you will understand my question.
","Your inputs to the hash function must be different for some reason or other.
Add log output messages that print your inputs before you hash for both use cases (create user and login).  Also be sure to put quotes around the inputs in your logging to show whitespace issues.
Compare the raw inputs as well as the output of the hash function in both cases, and there will be a difference somewhere.  If there is no difference, and the output of the hash is the same, then there is a problem in your query that is looking up the user in the login case. 
","222","<php><encryption><sha256>","0","1","3","2013-03-13 21:34:39","15396796","5","","","","","2013-03-13 20:47:24",""
"5869742","If I know the hashes of two parts of some data, can I calculate the hash of the full data from those hashes?","If I know the hashes of two (or more) parts of some data, can I calculate the hash of the full data from those hashes?
Which hash types can this be done for?  SHA1, SHA256, MD5?  (Security of hashes is not important for my use case.)
i.e. 
data0 = '0123'
data1 = '45678'
all_data = data0 + data1
hash0 = hash(data0)
hash1 = hash(data1)

Does fn exist such that
hash(all_data) == fn(hash0, hash1)

Does fn exist for MD5, SHA1 or SHA256?
Thanks,
Chris.
","Short answer. No.
Hashes are completely different for minimal deviations and untill you can't calculate them back this won't work. Even if you can calculate them back, the result will be a list of possibilities you can choose from. So there is nothing deterministic.
","222","<hash><md5><sha1><sha256>","2","2","2","2013-11-19 05:43:53","5869852","1","","129805","","2011-05-03 13:01:59","2011-05-03 12:53:39",""
"5869742","If I know the hashes of two parts of some data, can I calculate the hash of the full data from those hashes?","If I know the hashes of two (or more) parts of some data, can I calculate the hash of the full data from those hashes?
Which hash types can this be done for?  SHA1, SHA256, MD5?  (Security of hashes is not important for my use case.)
i.e. 
data0 = '0123'
data1 = '45678'
all_data = data0 + data1
hash0 = hash(data0)
hash1 = hash(data1)

Does fn exist such that
hash(all_data) == fn(hash0, hash1)

Does fn exist for MD5, SHA1 or SHA256?
Thanks,
Chris.
","Hashing through data0 puts the system in some intermediate state. Your hash(data1) was calculated from a clean state. You cannot fix hash1 to make up for that missing intermediate state (for a good hash function).
","222","<hash><md5><sha1><sha256>","2","0","2","2013-11-19 05:43:53","5869852","1","","129805","","2011-05-03 13:01:59","2011-05-03 12:53:39",""
"50831281","Converting an Sha256 hashed value into NSString in swift 4","i am converted my string with SHA256 encrypt method with reference SHA256 in swift . now i need to decrypt string back.thanks in advance 
","Seems like you have misunderstood SHA256. SHA256 is a hashing methodology and not a encryption methodology. 

A hash function is any function that can be used to map data of
  arbitrary size to data of a fixed size. The values returned by a hash
  function are called hash values, hash codes, digests, or simply hashes

wiki
Hash functions generates a unique value to each string/data passed to it as parameters and there is no way to get the string/data back from hash values. Hash functions are like one way stream
The only way you can use hash functions is to generate a unique value for each string you have. 
Here is one of the use case for SHA256 to help you better understand
For example, if your app has username and password for each user, saving password in DB as plain text is not much appreciated. Rather what we do is generate a hash key and save hash key in DB as password.
whenever user tries to login in future u get the password passed as param to your API generate the SHA for that and compare it with what you have saved in your DB. Because SHA256 generates a unique value for each string/Data passed to it no two passwords can have same hash value. That confirms that user is trying to login with proper credentials.
Hope this gives you idea of how to use SHA256
","219","<ios><swift><sha256>","-2","1","1","2018-06-13 15:13:11","50831461","2","","1226963","","2018-06-13 15:13:11","2018-06-13 07:21:31",""
"56267059","I have JWT middleware set up in ASP.NET Core 2.2 Web API. It only works with RSA256 and NOT HS256","For the problem stated in the title, when I attempt an RSA256 Access Token, the JWT Decode decodes it and more importantly, ""OnTokenValidated"" gets called from the JwtBearer events. Here's the code shortened for brevity. Remember, this works fine with RSA, but NOT HS (some parts of the code were left out for brevity). Any help is a God-send as I've struggled with this for more than a few hours. Please let me know if you can help:
public void ConfigureServices(IServiceCollection services)
 {
            var tokenValidationParameters = new TokenValidationParameters
                    {
/* I understand that I need to (and I did unsuccessfully) change these for HS256) */
                        IssuerSigningKey = new RsaSecurityKey(RSA.Create(2048)),
                        ValidateIssuer = true,
                        ValidIssuer = appSettings.Auth0Issuer,
                        ValidateIssuerSigningKey = true,
                        ValidateLifetime = false,
                        RequireExpirationTime = true,
                        ValidAudience = appSettings.Auth0Audience,
                        ValidateAudience = true
                    };

            services.AddAuthentication(
                x =>
                {
                    x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                }).AddJwtBearer(
                x =>
                {
                    x.Authority = appSettings.Auth0Tenant;
                    x.Events = new JwtBearerEvents
                    {
                        OnTokenValidated = context =>
                                           {
                                               string token = context.Request.Headers[""Authorization""].ToString().Replace(""Bearer "", string.Empty);
                                               IDictionary<string, object> headers = AuthenticationHelper.JwtHeaders(token);

                                               // Validate the HS256 Key using a PSK
                                               if (headers.ContainsKey(""alg"") && headers[""alg""].ToString() == ""HS256"")
                                               {
                                                   string secret = appSettings.Auth0MachineToMachineSecret;
                                                   string payload = AuthenticationHelper.JwtDecode(token, secret);
                                                   this.SetTokenInfo(JObject.Parse(payload), context, appSettings.Auth0AppMeta);
                                               }

                                               // Validate token with a public RSA key published by the IDP as a list of JSON Web Keys (JWK)
                                               // step 0: you've read the keys from the jwks_uri URL found in http://<IDP authority URL>/.well-known/openid-configuration endpoint
                                               if (!headers.ContainsKey(""alg"") || headers[""alg""].ToString() != ""RS256"")
                                               {
                                                   context.Fail(""No algorithm was present or validated"");
                                                   return Task.CompletedTask;
                                               }

                                               List<IDPKey> idpKeys = AuthenticationHelper.GetIdpKeys(appSettings.Auth0Tenant);
                                               IDPKey iDpKey = AuthenticationHelper.FindIdpKey(headers, ""kid"", idpKeys);

                                               if (iDpKey == null)
                                               {
                                                   context.Fail($""Invalid authorization scheme: {context.Request}"");
                                                   return Task.CompletedTask;
                                               }

                                               try
                                               {
                                                   //If everything is good set the Authorization as true and the CRM user.
                                                   JObject payload = AuthenticationHelper.ParsePayload(token);
                                                   this.SetTokenInfo(payload, context, appSettings.Auth1AppMeta);
                                               }
                                               catch (JoseException ex)
                                               {
                                                   context.Fail(ex);
                                               }

                                               context.Success();

                                               return Task.CompletedTask;
                                           },
                        OnAuthenticationFailed = context =>
                                                 {
                                                     return Task.FromException(context.Exception);
                                                 }
                    };
                    x.TokenValidationParameters = tokenValidationParameters;
                });
 }

","They had given me an expired token instead of a valid one. Now both HS256 and RSA256 fire the ""OnTokenValidated"" JwtBearer event. 
","218","<.net-core><jwt><rsa><sha256><jose>","0","0","1","2019-05-28 18:23:43","56348061","2","0","","","","2019-05-23 01:45:20","2019-06-07 09:30:36"
"55290792","AES 256 Text Encryption returning different values","I'm trying to replicate an encryption method based on another C# method that I found.
The C# Encryption method EncryptText(word, password) call to another method AES_Encrypt(byte[] bytesToBeEncrypted, byte[] passwordBytes) to encrypt plain text:
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using System.Security.Cryptography;
using System.IO;
using System.Text;

namespace Rextester
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var f = EncryptText(""763059"", ""515t3ma5m15B4d35"");//(word, password)
            Console.WriteLine(f);
        }

        public static byte[] AES_Encrypt(byte[] bytesToBeEncrypted, byte[] passwordBytes)
        {
            byte[] encryptedBytes = null;
            byte[] saltBytes = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 };

            using (MemoryStream ms = new MemoryStream())
            {
                using (RijndaelManaged AES = new RijndaelManaged())
                {
                    AES.KeySize = 256;
                    AES.BlockSize = 128;

                    var key = new Rfc2898DeriveBytes(passwordBytes, saltBytes, 1000);
                    AES.Key = key.GetBytes(AES.KeySize / 8);
                    AES.IV = key.GetBytes(AES.BlockSize / 8);

                    AES.Mode = CipherMode.CBC;

                    using (var cs = new CryptoStream(ms, AES.CreateEncryptor(), CryptoStreamMode.Write))
                    {
                        cs.Write(bytesToBeEncrypted, 0, bytesToBeEncrypted.Length);
                        cs.Close();
                    }
                    encryptedBytes = ms.ToArray();
                }
            }

            return encryptedBytes;
        }

        public static string EncryptText(string input, string password)
        {
            byte[] bytesToBeEncrypted = Encoding.UTF8.GetBytes(input);
            byte[] passwordBytes = Encoding.UTF8.GetBytes(password);

            passwordBytes = SHA256.Create().ComputeHash(passwordBytes);

            byte[] bytesEncrypted = AES_Encrypt(bytesToBeEncrypted, passwordBytes);
            string result = Convert.ToBase64String(bytesEncrypted);

            return result;
        }
    }
}

Using word 763059 and password 515t3ma5m15B4d35, the output is the following:

3cHrXxxL1Djv0K2xW4HuCg==

UPDATE:
Now, I created a Java Class main where I'm trying to replicate previous code:
public class main {

    final static String PASSWORD = ""515t3ma5m15B4d35"";
    final static byte[] SALT = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
    final static int KEY_SIZE = 256;
    final static int BLOCK_SIZE = 128;
    final static int ITERATIONS = 1000;

    public static void main(String[] args) {
        System.out.println(encryptText(""763059"", PASSWORD));
    }

    public static String encryptText(String word, String password) {
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-256"");
            md.update(password.getBytes(""UTF-8""));
            password = new String(md.digest(), ""UTF-8"");

            SecretKeyFactory factory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
            KeySpec spec = new PBEKeySpec(password.toCharArray(), SALT, ITERATIONS, KEY_SIZE);
            SecretKey tmp = factory.generateSecret(spec);
            SecretKeySpec skey = new SecretKeySpec(tmp.getEncoded(), ""AES"");

            byte[] iv = new byte[BLOCK_SIZE / 8];
            IvParameterSpec ivspec = new IvParameterSpec(iv);
            Cipher ci = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
            ci.init(Cipher.ENCRYPT_MODE, skey, ivspec);
            byte[] result = ci.doFinal(word.getBytes(""UTF-8""));

            return DatatypeConverter.printBase64Binary(result);

        } catch (NoSuchAlgorithmException | UnsupportedEncodingException | IllegalBlockSizeException | BadPaddingException | InvalidKeyException | InvalidAlgorithmParameterException | NoSuchPaddingException | InvalidKeySpecException ex) {
            return null;
        }
    }

}

UPDATE:
I read about using 256 bits keys in Java, and I found that I need to add Java Cryptography Extensions to allow 256 keys (Because I'm working with JDK7).
Then I added the libreries to the project, also I change the line:
KeySpec spec = new PBEKeySpec(password.toCharArray(), SALT, ITERATIONS, KEY_SIZE);

With the Key Value:
final static int KEY_SIZE = 256;

Now the output is the following:

J1xbKOjIeXbQ9njH+67RNw==

I still can't achieve my goal. Any Suggestion?
","I am not any C# expert, but there are a few things to be  checked:
Reading the documentation about Rfc2898DeriveBytes I see the function is using SHA1 hash, so try you may try to use PBKDF2WithHmacSHA1 
On both instances (Rfc2898DeriveBytes, PBEKeySpec) you should make sure you the key size is the same (256 bit), it is surely wrong in your Java code
You may try to encode and print the keys to really make sure they are the same. 

I need to add Java Cryptography Extensions to allow 256 keys.

Depends on your JVM version. I believe Oracle JDK since v. 1.8u162 by default contains the Unlimited Strength JCE policy. If you take any current JRE version, you should be ok
Additional: you are using (static) zero array IV, which is not secure 
","217","<java><c#><encryption><aes><sha256>","1","0","2","2019-03-30 00:11:17","55426884","7","2","6595116","","2019-03-27 15:07:54","2019-03-21 23:38:32",""
"55290792","AES 256 Text Encryption returning different values","I'm trying to replicate an encryption method based on another C# method that I found.
The C# Encryption method EncryptText(word, password) call to another method AES_Encrypt(byte[] bytesToBeEncrypted, byte[] passwordBytes) to encrypt plain text:
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using System.Security.Cryptography;
using System.IO;
using System.Text;

namespace Rextester
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var f = EncryptText(""763059"", ""515t3ma5m15B4d35"");//(word, password)
            Console.WriteLine(f);
        }

        public static byte[] AES_Encrypt(byte[] bytesToBeEncrypted, byte[] passwordBytes)
        {
            byte[] encryptedBytes = null;
            byte[] saltBytes = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 };

            using (MemoryStream ms = new MemoryStream())
            {
                using (RijndaelManaged AES = new RijndaelManaged())
                {
                    AES.KeySize = 256;
                    AES.BlockSize = 128;

                    var key = new Rfc2898DeriveBytes(passwordBytes, saltBytes, 1000);
                    AES.Key = key.GetBytes(AES.KeySize / 8);
                    AES.IV = key.GetBytes(AES.BlockSize / 8);

                    AES.Mode = CipherMode.CBC;

                    using (var cs = new CryptoStream(ms, AES.CreateEncryptor(), CryptoStreamMode.Write))
                    {
                        cs.Write(bytesToBeEncrypted, 0, bytesToBeEncrypted.Length);
                        cs.Close();
                    }
                    encryptedBytes = ms.ToArray();
                }
            }

            return encryptedBytes;
        }

        public static string EncryptText(string input, string password)
        {
            byte[] bytesToBeEncrypted = Encoding.UTF8.GetBytes(input);
            byte[] passwordBytes = Encoding.UTF8.GetBytes(password);

            passwordBytes = SHA256.Create().ComputeHash(passwordBytes);

            byte[] bytesEncrypted = AES_Encrypt(bytesToBeEncrypted, passwordBytes);
            string result = Convert.ToBase64String(bytesEncrypted);

            return result;
        }
    }
}

Using word 763059 and password 515t3ma5m15B4d35, the output is the following:

3cHrXxxL1Djv0K2xW4HuCg==

UPDATE:
Now, I created a Java Class main where I'm trying to replicate previous code:
public class main {

    final static String PASSWORD = ""515t3ma5m15B4d35"";
    final static byte[] SALT = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
    final static int KEY_SIZE = 256;
    final static int BLOCK_SIZE = 128;
    final static int ITERATIONS = 1000;

    public static void main(String[] args) {
        System.out.println(encryptText(""763059"", PASSWORD));
    }

    public static String encryptText(String word, String password) {
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-256"");
            md.update(password.getBytes(""UTF-8""));
            password = new String(md.digest(), ""UTF-8"");

            SecretKeyFactory factory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
            KeySpec spec = new PBEKeySpec(password.toCharArray(), SALT, ITERATIONS, KEY_SIZE);
            SecretKey tmp = factory.generateSecret(spec);
            SecretKeySpec skey = new SecretKeySpec(tmp.getEncoded(), ""AES"");

            byte[] iv = new byte[BLOCK_SIZE / 8];
            IvParameterSpec ivspec = new IvParameterSpec(iv);
            Cipher ci = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
            ci.init(Cipher.ENCRYPT_MODE, skey, ivspec);
            byte[] result = ci.doFinal(word.getBytes(""UTF-8""));

            return DatatypeConverter.printBase64Binary(result);

        } catch (NoSuchAlgorithmException | UnsupportedEncodingException | IllegalBlockSizeException | BadPaddingException | InvalidKeyException | InvalidAlgorithmParameterException | NoSuchPaddingException | InvalidKeySpecException ex) {
            return null;
        }
    }

}

UPDATE:
I read about using 256 bits keys in Java, and I found that I need to add Java Cryptography Extensions to allow 256 keys (Because I'm working with JDK7).
Then I added the libreries to the project, also I change the line:
KeySpec spec = new PBEKeySpec(password.toCharArray(), SALT, ITERATIONS, KEY_SIZE);

With the Key Value:
final static int KEY_SIZE = 256;

Now the output is the following:

J1xbKOjIeXbQ9njH+67RNw==

I still can't achieve my goal. Any Suggestion?
","Finally I decided to use the BouncyCastle API to use the functionality of RijndaelEngine, as well as to generate the 256-bit key with PKCS5S2ParametersGenerator.
I created the RijndaelEncryption class to be able to perform the encryption as in the C# code:
public class RijndaelEncryption {

    public String encryptString(String word, String password, byte[] salt, int iterations, int keySize, int blockSize) {
        try {
            byte[] pswd = sha256String(password, ""UTF-8"");
            PKCS5S2ParametersGenerator key = keyGeneration(pswd, salt, iterations);
            ParametersWithIV iv = generateIV(key, keySize, blockSize);
            BufferedBlockCipher cipher = getCipher(true, iv);
            byte[] inputText = word.getBytes(""UTF-8"");
            byte[] newData = new byte[cipher.getOutputSize(inputText.length)];
            int l = cipher.processBytes(inputText, 0, inputText.length, newData, 0);
            cipher.doFinal(newData, l);
            return new String(Base64.encode(newData), ""UTF-8"");
        } catch (UnsupportedEncodingException | IllegalStateException | DataLengthException | InvalidCipherTextException e) {
            return null;
        }
    }

    public BufferedBlockCipher getCipher(boolean encrypt, ParametersWithIV iv) {
        RijndaelEngine rijndael = new RijndaelEngine();
        BufferedBlockCipher cipher = new PaddedBufferedBlockCipher(new CBCBlockCipher(rijndael));
        cipher.init(encrypt, iv);
        return cipher;
    }

    public ParametersWithIV generateIV(PKCS5S2ParametersGenerator key, int keySize, int blockSize) {
        try {
            ParametersWithIV iv = null;
            iv = ((ParametersWithIV) key.generateDerivedParameters(keySize, blockSize));
            return iv;
        } catch (Exception e) {
            return null;
        }
    }

    public PKCS5S2ParametersGenerator keyGeneration(byte[] password, byte[] salt, int iterations) {
        try {
            PKCS5S2ParametersGenerator key = new PKCS5S2ParametersGenerator();
            key.init(password, salt, iterations);
            return key;
        } catch (Exception e) {
            return null;
        }
    }

    public byte[] sha256String(String password, Charset charset) {
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-256"");
            md.update(password.getBytes(charset));
            return md.digest();
        } catch (NoSuchAlgorithmException ex) {
            return null;
        }
    }

    public byte[] sha256String(String password, String charset) {
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-256"");
            md.update(password.getBytes(charset));
            return md.digest();
        } catch (NoSuchAlgorithmException | UnsupportedEncodingException ex) {
            return null;
        }
    }
}

And I tested in main method:
public static void main(String[] args) {
     RijndaelEncryption s = new RijndaelEncryption();
     byte[] salt = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
     String encryptStr = s.encryptString(""763059"", ""515t3ma5m15B4d35"", salt, 1000, 256, 128);
     System.out.println(""Encryptation: "" + encryptStr);
}

To get:

Encryptation: 3cHrXxxL1Djv0K2xW4HuCg==

","217","<java><c#><encryption><aes><sha256>","1","0","2","2019-03-30 00:11:17","55426884","7","2","6595116","","2019-03-27 15:07:54","2019-03-21 23:38:32",""
"7129067","Are HMACSHA256 hashes transferable from one server to another?","If I use HMACSHA256.ComputeHash in my password encoding scheme and generate password hashes on one server then later need to migrate to a different server, will my hashes still encode the same? I recall seeing something about machineKey settings being involved in cryptography operations, but I'm not entirely familiar.
","Whether or not they will still encode the same depends on how you create the HMACSHA256 object.  It will use whatever key you instantiate it with to do the hashes or, if you don't specify a key, it will generate a random key.  As long as you pass it the same key, it will generate the same hashes.
","215","<.net><sha256><hmac><password-encryption>","0","3","2","2011-08-23 09:33:00","7129086","1","","55948","","2011-08-20 04:08:36","2011-08-20 01:51:47",""
"7129067","Are HMACSHA256 hashes transferable from one server to another?","If I use HMACSHA256.ComputeHash in my password encoding scheme and generate password hashes on one server then later need to migrate to a different server, will my hashes still encode the same? I recall seeing something about machineKey settings being involved in cryptography operations, but I'm not entirely familiar.
","HMAC computes a hash from a secret and the data you want to authenticate. In order for two servers to compute the same HMAC they'll have to share the secret, which possibly makes it not that secret. In order too be able to verify old password the secret will need either to be fixed or to be somehow referenced along the stored password if it can changes, making it practically a salt.
Using HMAC in a password storage setting is pretty odd, it's not a proper password derivation function (way too fast, not memory intensive enough) and the secret don't bring much value if any, seeing it must be fixed (unlike proper HMAC usage where the secret is agreed upon by the communicating parties for a session and forgotten about after).
","215","<.net><sha256><hmac><password-encryption>","0","0","2","2011-08-23 09:33:00","7129086","1","","55948","","2011-08-20 04:08:36","2011-08-20 01:51:47",""
"43887118","Comparate a String with SHA-256 sentences","I want to compare two strings : 

""password""
""5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8"" (the same but in SHA-256).

Normally, the function isPassValid() will return me true, but I have a false response. Why ?
This is my code :
public static boolean isPassValid(){
    String hash = bin2hex(getHash(""password""));
    return hash.equals(""5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8"");
}

private static byte[] getHash(String password) {
    MessageDigest digest=null;
    try {
        digest = MessageDigest.getInstance(""SHA-256"");
    } catch (NoSuchAlgorithmException e1) {
        e1.printStackTrace();
    }
    assert digest != null;
    digest.reset();
    return digest.digest(password.getBytes());
}

private static String bin2hex(byte[] data) {
    return String.format(""%0"" + (data.length*2) + ""X"", new BigInteger(1, data));
}

","Your line:
return String.format(""%0"" + (data.length*2) + ""X"", new BigInteger(1, data));

returns an uppercase hexadecimal string where the string you're comparing to has lowercase hex characters. Either change the ""X"" to ""x"" or do the compare with equalsIgnoreCase().
","215","<android><sha256>","1","5","1","2017-05-10 08:29:25","43887261","0","3","5364583","","2017-05-10 08:26:21","2017-05-10 08:22:27",""
"23181223","AWS SimpleDB - SignatureDoesNotMatch - PCL for Xamarin application","I'm trying to create a SimpleDB persistence framework for a Xamarin component. I can't use the .NET SDK since not all the required assemblies are present in a PCL project. For that reason I'm trying create REST request myself but i keep getting SignatureDoesNotMatch when trying to POST my request.
Can someone help and see if there is something wrong with my signature generation.
Here is the request to be signed
https://sdb.amazonaws.com/?Action=PutAttributes&DomainName=test&ItemName=0&Attribute.1.Name=test&Attribute.1.Value=test&AWSAccessKeyId=AAAAAAAAAAAAAAAAAAAA&Version=2009-04-15&SignatureVersion=2&SignatureMethod=HmacSHA256&Timestamp=2014-04-20T11%3A04%3A10%2B02%3A00
Here is the string being signed
POST\n
sdb.amazonaws.com\n
/\n
&AWSAccessKeyId=AAAAAAAAAAAAAAAAAAAA&Action=PutAttributes&Attribute.1.Name=test&Attribute.1.Value=test&DomainName=test&ItemName=0&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp=2014-04-20T11%3A03%3A12%2B02%3A00&Version=2009-04-15
Here is the signed request.
https://sdb.amazonaws.com/?Action=PutAttributes&DomainName=test&ItemName=0&Attribute.1.Name=test&Attribute.1.Value=test&AWSAccessKeyId=AAAAAAAAAAAAAAAAAAAA&Version=2009-04-15&Signature=h0lNLh%2BfpDLzM2ipBozPnH6dDKFU%2BFTDwH82H42ptI8%3D&SignatureVersion=2&SignatureMethod=HmacSHA256&Timestamp=2014-04-20T11%3A05%3A05%2B02%3A00
Test AWSAccessKeyId = AAAAAAAAAAAAAAAAAAAA
Test AWSSecretKey = BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
I have included C# files of my hashing and the request builder
public class PutAttributesRequestMarshaller
{
    private const string ACTION = ""PutAttributes"";
    private const string METHOD = ""POST"";
    private const string SIGNATURE_METHOD = ""HmacSHA256"";
    private const string SIGNATURE_VERSION = ""2"";
    private const string VERSION = ""2009-04-15"";
    private SortedDictionary<string, string> AttributesDic = new SortedDictionary<string, string> ();
    private PutAttributesRequest request;

    public PutAttributesRequestMarshaller (PutAttributesRequest request)
    {
        this.request = request;

        for (int i = 0; i < request.Attributes.Count; i++) {
            ReplaceableAttribute Attribute = request.Attributes [i];
            AttributesDic.Add (""Attribute."" + (i + 1) + "".Name"", Attribute.Name);
            AttributesDic.Add (""Attribute."" + (i + 1) + "".Value"", Attribute.Value);
            if (Attribute.Replace.Value) {
                AttributesDic.Add (""Attribute."" + (i + 1) + "".Replace"", Attribute.Replace.ToString ().ToLower ());
            }
        }
    }

    public String Marshal ()
    {
        StringBuilder sb = new StringBuilder ();

        sb.Append (""https://"" + Region + ""/"");
        sb.Append (""?Action="" + ACTION);
        sb.Append (""&DomainName="" + request.DomainName);
        sb.Append (""&ItemName="" + request.ItemName);
        sb.Append (Attributes);
        sb.Append (""&Version="" + VERSION);
        sb.Append (""&Timestamp="" + Timestamp);

        string signature = GenerateSignature ();
        string encoded = System.Net.WebUtility.UrlEncode (signature);

        sb.Append (""&Signature="" + encoded);
        sb.Append (""&SignatureVersion="" + SIGNATURE_VERSION);
        sb.Append (""&SignatureMethod="" + SIGNATURE_METHOD);
        sb.Append (""&AWSAccessKeyId="" + AWSAccessKeyId);

        return sb.ToString ();
    }

    private string Attributes {
        get {
            StringBuilder sb = new StringBuilder ();
            var enumerator = AttributesDic.GetEnumerator ();
            while (enumerator.MoveNext ()) {
                var entry = enumerator.Current;
                sb.Append (""&"");
                sb.Append (System.Net.WebUtility.UrlEncode (entry.Key));
                sb.Append (""="");
                sb.Append (System.Net.WebUtility.UrlEncode (entry.Value));
            }
            return sb.ToString ();
        }
    }

    private  string AWSAccessKeyId {
        get {
            return ServiceContainer.Resolve<SimpleDBClient> ().AWSAccessKeyId;
        }
    }

    private  string AWSSecretKey {
        get {
            return ServiceContainer.Resolve<SimpleDBClient> ().AWSSecretKey;
        }
    }

    private  string Timestamp {
        get {

            DateTime withOutMili = DateTime.Now;
            string formatted = withOutMili.ToString (""yyyy-MM-ddTHH:mm:sszzzzz"");
            string encoded = System.Net.WebUtility.UrlEncode (formatted);
            return encoded;
        }
    }

    public  string Region {
        get {
            return ServiceContainer.Resolve<SimpleDBClient> ().Region;
        }
    }

    private string GenerateSignature ()
    {
        StringBuilder sb = new StringBuilder ();
        sb.Append (METHOD + ""\n"");
        sb.Append (Region + ""\n"");
        sb.Append (""/\n"");
        sb.Append (""&AWSAccessKeyId="" + AWSAccessKeyId);
        sb.Append (""&Action="" + ACTION);
        sb.Append (Attributes);
        sb.Append (""&DomainName="" + request.DomainName);
        sb.Append (""&ItemName="" + request.ItemName);
        sb.Append (""&SignatureMethod="" + SIGNATURE_METHOD);
        sb.Append (""&SignatureVersion="" + SIGNATURE_VERSION);
        sb.Append (""&Timestamp="" + Timestamp);
        sb.Append (""&Version="" + VERSION);

        string signature = sb.ToString ();

        ISHA256Service service = ServiceContainer.Resolve<ISHA256Service> ();

        string hashed = service.CreateHash (signature, AWSSecretKey);

        return hashed;
    }

    private  SimpleDBClient Client {
        get {
            return ServiceContainer.Resolve<SimpleDBClient> ();
        }
    }

public string CreateHash (string message, string secret)
    {
        var encoding = new System.Text.ASCIIEncoding ();
        byte[] keyByte = encoding.GetBytes (secret);
        byte[] messageBytes = encoding.GetBytes (message);
        using (var hmacsha256 = new HMACSHA256 (keyByte)) {
            byte[] hashmessage = hmacsha256.ComputeHash (messageBytes);
            return Convert.ToBase64String (hashmessage);
        }
    }

Thank you in advance.
","I found several problems with my code, the biggest was to that i used 2 different timestamps.
","214","<rest><post><hmac><sha256><amazon-simpledb>","0","0","1","2014-04-26 15:10:33","23312737","0","","","","","2014-04-20 10:54:27",""
"55237215","SHA_256 Hash in Bigquery","I am trying to find the SQL equivalent of hash in bigquery.
SQL :
 SELECT    CAST(HASHBYTES('SHA2_256', CONCAT(
                                            COL1, COL2, COL3
                                        )) AS BINARY(32)) AS HashValue

Big Query:
SELECT  SHA2_256(CONCAT(COL1, '', COL2 )) AS HashValue.

I can't find any examples where hashing is done on multiple columns. The datatype of the columns are different as well.
Any help is really appreciated.
","Using Standard SQL (SHA256 function) you could cast all your fields to string, concatenate them and use the hash. Something like this:
SELECT SHA256( 
              CONCAT(
                  CAST(integer_field1 as STRING), 
                  CAST(integer_field2 as STRING), 
                  CAST(timestamp_field as STRING) 
                  )
         ) as sha256_hash FROM `table`

","214","<google-bigquery><sha256>","0","1","2","2019-03-19 10:17:54","55238545","0","","7813005","","2019-03-19 10:13:43","2019-03-19 09:12:07",""
"55237215","SHA_256 Hash in Bigquery","I am trying to find the SQL equivalent of hash in bigquery.
SQL :
 SELECT    CAST(HASHBYTES('SHA2_256', CONCAT(
                                            COL1, COL2, COL3
                                        )) AS BINARY(32)) AS HashValue

Big Query:
SELECT  SHA2_256(CONCAT(COL1, '', COL2 )) AS HashValue.

I can't find any examples where hashing is done on multiple columns. The datatype of the columns are different as well.
Any help is really appreciated.
","You can see follow this change request

These are now implemented. Thanks again for sharing feedback on needing these ?> functions. Please see:
TO_HEX: https://cloud.google.com/bigquery/docs/reference/standard-sql/functions-and-operators#to_hex
FROM_HEX: https://cloud.google.com/bigquery/docs/reference/standard-sql/functions-and-operators#from_hex

2 related questions I found for you are:
Is it possible to hash using MD5 in BigQuery?
Random Sampling in Google BigQuery
","214","<google-bigquery><sha256>","0","1","2","2019-03-19 10:17:54","55238545","0","","7813005","","2019-03-19 10:13:43","2019-03-19 09:12:07",""
"22643764","PHP Hashing Login Issue","I'm a bit of a n00b in regards to hashing passwords, so go easy on me. Basically, I've put together some code that first of all sanitises the string's entered by the user on registration. Once that's done, a random salt is generated. The password is then appended to the salt:
  $salt = bin2hex(mcrypt_create_iv(32, MCRYPT_DEV_URANDOM));

    $saltedPW =  $p . $salt;

I then hash the password using a sha256 and go ahead and insert the user into the database, which all appears to be working correctly:
   $hashedPW = hash('sha256', $saltedPW);

    $q = ""INSERT INTO user (id, name, email, password, verified, user_level, salt) VALUES
    (NULL, '$n', '$em', '$hashedPW', 'no', '1', '$salt')"";

    $r = @mysqli_query ($dbc, $q); //run the query

Then, when it comes to the user logging in, I again sanitise the user-entered string, get the salt from the database assign it to a variable before appending the password to it as follows:
       $saltQuery = ""SELECT salt FROM user WHERE email = '$email'"";

        $result = mysqli_query($dbc, $saltQuery);

        $row = mysqli_fetch_assoc($result);

        $salt = $row['salt'];

        $saltedPW =  $password . $salt;

The salted password is then hashed using a sha256, as before, and I attempt to get the user information from the database:
    $hashedPW = hash('sha256', $saltedPW);

      $query = ""SELECT * FROM user WHERE email = '$email' AND password = '$hashedPW'"";

        $r = @mysqli_query ($dbc, $query);

However, the login fails, and when I print off the query I get the following result, when I presume the password should equal the user's entered string, which in this case is 'password' for testing purposes:
  SELECT * FROM user WHERE email = 'test@test.com' AND password = '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8'

Is there anything you can see there that I'm doing wrong that would cause the login to fail? Thanks
","SHA256 is a message digest, not a password hashing function, so you certainly should not be using it as such.
Cryptography is hard, and to do it well is even harder - it is for this reason that you should avoid rolling your own encryption functions and use ones that are tried and true, such as bcrypt or the newer scrypt.
PHP provides access to the bcrypt alogirthm through the password_hash function, which automatically generates a salt and encrypts the password using a much greater degree of security than SHA256. You would use it like so:
$hashedPassword = password_hash($password);

Then, when the user logs in, you would hash the password he inputted using the same function, and retrieve that user from the database.
","214","<php><mysql><hash><salt><sha256>","0","2","1","2014-03-25 19:08:37","","0","","","","","2014-03-25 18:52:52",""
"49740720","Possible to combine/concatenate MD5 hashes?","For CRC32, it is possible to combine two hashes, such that given two streams A and B, we can find out CRC(A+B) knowing only CRC(A), CRC(B), and length(B). (Implementation available here, along with an explanation for how this works by Mark Adler here).
This allows us, for example, to compute a hash on a single stream in parallel, or to compute a hash on a large (as in 'doesn't fit in memory'), severely fragmented stream using only forward seeking on its containing medium (this offers enormous potential for speedup on very slow media).
There don't appear to be implementations for such behavior available for other, more complex, hashing algorithms like MD5. Is this behavior fundamentally impossible with MD5? Is it just so difficult to do that no one bothered trying yet? What about more complex algorithms like SHA1 or SHA256? I would love to hear any insights on this.
","This should not be possible for any cryptographic hash. If it were possible, then that hash could no longer be considered cryptographic.
","213","<hash><md5><sha1><sha256><crc32>","0","2","1","2018-04-10 01:57:31","49744126","4","","","","","2018-04-09 19:56:29",""
"20499926","Does SHA256 round trip","If you take a 32-bit sequence, and perform a CRC32 on it, you get another 32-bit sequence as the result; if you do CRC32 of this, you get another, and so on. It is easy to show that if you keep doing this, you end up with a single loop of 2^32 bit sequences, before starting over.
Simple question: does anyone know if the same holds true (or not) for SHA256, starting with a 256-bit sequence? Would a similar process cycle through a loop of all 2^256 possible 256-bit sequences before starting over? Or are there known (or likely) shorter loops within this hash?
Brian
","SHA256 has not been designed to meet the property of 2^256 loop. However, as far as I know, nobody has proven there is no such loop. Also, there are not known any shorter loops because if anybody found some, then he would find also a collision and from the nature of the cryptographic hash function, it muse be difficult.
So, since nobody has not proven it, yes, there is a probability the 2^256 cycle would exists. However, it's extremely unlikely an I'm willing to bet my left testicle for it. :-)
Let me also note that, IMO to design a cryptographic hash function which has 2^256 loop would be extremely difficult even for the best crypto experts.
","212","<hash><sha256>","5","2","1","2014-01-26 19:58:13","","0","","","","","2013-12-10 16:31:49",""
"29977151","Unable to verify HMAC during Shopify EASDK","I'm working on an embedded app, and I can't get this to work at all... Here's the request that I'm receiving from Shopify to load my app:
http://myserver/myapp/?hmac=123&shop=myshop.myshopify.com&signature=abc&timestamp=1430425019

This all looks good to me, so I go through and remove the signature and hmac, and end up with this string
shop=myshop.myshopify.com&timestamp=1430425019

I then pass this off to my SHA256 handler, using the Credential Set defined in my app through the Partners login.
hmacSha256( ""123abc"", hashString) )

These values never match up. What am I doing wrong here? If I use the test values from the Shopify documentation regarding how the HMAC should be calculated, I get a matching value, so I know my HMAC function is working correctly.
","","206","<shopify><sha256>","2","","0","2015-04-30 20:24:58","","1","1","","","","2015-04-30 20:24:58",""
"38314245","Why is there a '1' in the padding of SHA-2","I'm looking at the SHA-256 algorithm. The padding consists of a single '1', followed by as many 0's as needed to made the size of the block congruent to 448 mod(512), and then the size of the message (excluding the 1 and the padding) as a 64 bit unsigned integer. 
I'm unclear as to the reason for the '1'. A reason that pops-up in unofficial sources is that it serves to prevent birthday attacks but the lenght at the end seems suffiscient to that purpose. 
Elsewhere it is said that the 1 is needed to make the padding Merkle–Damgård-compliant (MD-compliant) but unless something really eluded me the size feild at the end is clearly suffiscient. 
see: 
https://en.wikipedia.org/wiki/Merkle%E2%80%93Damg%C3%A5rd_construction#MD-compliant_padding
Finally a source wrote that this was necessary to process an empty string (why?) and another to make the padding reversible (what for?).
I'm always suspicious when I find so many different explainations. Can anyone explain me this with an example.
BTW, this padding is defined in ISO/IEC 9797-1 as Padding Method 2 (with no explainations). 
","","206","<padding><sha256><sha><sha2>","1","","0","2016-07-11 18:58:35","","1","","","","","2016-07-11 18:58:35",""
"14922624","Why does this code hash null?","The following code passes on the username check, but fails on the password.  
As you can see, the hashes are echoed, but for some reason, they output e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855, which is the sha256sum of /dev/null. As the password does not seem to echo at all, i can only assume it cannot get the POST, but why?
login
<form action=""dologin"" method=""post"">
Username: <input type=""text"" name=""username"">
Password: <input type=""password"" name=""password"">
<input type=""submit"">
</form>

dologin
    if ( $_POST[username] == $actualusername ) {
        // Hash the password
        $hashedpassword = hash('sha256', $_POST[password]);
        echo $_POST[password];
        echo $hashedpassword;
        if ( $hashedpassword == $actualpassword ) {
            echo '<h2>Logged in</h2>';
        } else {
        echo '<h2>Incorrect password</h2>';
        echo $hashedpassword;
        }
    } else {
        echo '<h2>Incorrect username</h2>';
    }

","Does closing the input tags solve you problem?
Also, you can use 
isset($_POST[""blabla""])

To test if the value is set in $_POST. 
","205","<php><forms><post><passwords><sha256>","-1","2","1","2013-02-17 15:34:33","14922690","4","","1239965","","2013-02-17 15:32:18","2013-02-17 15:22:43",""
"55708441","Getting SHA256 in base64 format using DigestUtils","I'm trying to get the SHA256 hash of a string in base64 format.
I'm using DigestUtils from org.apache.commons.codec.digest. I don't know how to get the Base64 format, even though I can get the Hex format.
Sha256String = org.apache.commons.codec.digest.DigestUtils.sha256Hex(StringText);

Using ""a"" as stringtest, this line returns
ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb

But what I actually need is ypeBEsobvcr6wjGzmiPcTaeG7/gUfE5yuYB3ha/uSLs.
I have been reading nonstop, and can't understand how to do it. 
Now I'm trying this
Byte[] digest = org.apache.commons.codec.digest.DigestUtils.sha256(StringText);

And this I need to store it in a variable, so I'm trying this
String OutStr = new String(digest);

With no luck. I don't know where else to search help, for I had read all the google searches a lot of times (and if the answer is there, I'm not seeing it)
I don't code in java, but this time I need this to get working! Love!
","You can use the Base64.Encoder.encodeToString() method to convert the byte array into a Base64.
Here is a short example: (since I am not familiar with your util, just replace the some data with your byte array)
byte[] data = someData;
MessageDigest digester = MessageDigest.getInstance(""SHA-256"");
digester.update(data);
String base64Encoded = Base64.getEncoder().encodeToString(digester.digest());

","205","<java><hash><base64><sha256>","1","0","1","2019-04-16 13:19:14","55708750","1","","7404943","","2019-04-16 13:19:14","2019-04-16 12:42:40",""
"37341332","Android SHA256 hashing","I have a web application in which I have used this particular code to hash the password
$hashed = hash('sha256', $password); 
$randomstring = md5(uniqid(rand(), true)); 
$salt = substr($randomstring, 0, 8); 
$hashed = hash('sha256', $salt . $hashed); 

I am building android app to the same web app which uses the same database as web app. How do I change this code into android so that I can use it to register and login into the android app which has same things as that of web app. I just need the android version of that particular sha256 hashing part that I used in my web app
","","205","<php><android><hash><sha256>","0","","0","2016-05-20 08:10:24","","2","","","","","2016-05-20 08:10:24",""
"20629083","two of three byte different in sha256 hash function","I am using this function to calculate the SHA 256 
public static String getSHA1(String plainText) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""SHA-256"");

            md.update(plainText.getBytes(Charset.forName(""UTF-8"")));
            StringBuffer hexString = new StringBuffer();
            byte[] bytes = md.digest();
            for (int i = 0; i < bytes.length; i++) {
                hexString.append(Integer.toHexString(0xFF & bytes[i]));
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return null;
    }

And to be sure of my results, I check this online website
http://onlinemd5.com/
the results between my code and the online is almost the same, but you know that it must be equal. for instance
my plain testis:
1234567

the website result
8BB0CF6EB9B17D0F7D22B456F121257DC1254E1F01665370476383EA776DF414

 my code result
8bb0cf6eb9b17df7d22b456f121257dc1254e1f1665370476383ea776df414

and this is more examples:
7777777
8C1CDB9CB4DBAC6DBB6EBD118EC8F9523D22E4E4CB8CC9DF5F7E1E499BBA3C10
8c1cdb9cb4dbac6dbb6ebd118ec8f9523d22e4e4cb8cc9df5f7e1e499bba3c10


147258
7A2EC40FF8A1247C532309355F798A779E00ACFF579C63EEC3636FFB2902C1AC
7a2ec4ff8a1247c53239355f798a779e0acff579c63eec3636ffb292c1ac


888888
92925488B28AB12584AC8FCAA8A27A0F497B2C62940C8F4FBC8EF19EBC87C43E
92925488b28ab12584ac8fcaa8a27af497b2c6294c8f4fbc8ef19ebc87c43e

I do know that this is maybe about the encoding. but look i used utf-8 which is what the website used
","This is the problem:
hexString.append(Integer.toHexString(0xFF & bytes[i]));

This will lose any leading 0s - in other words, any byte less than 16 will come out as a single hex digit instead of two.
There are plenty of fixes for this. For example:

Manually append 0 if the value is between 0 and 15 (ick)
Use String.format(""%02x"", bytes[i] & 0xff)
Use a full ""byte array to hex conversion"" method in a utility library (there are loads around)

","204","<java><hash><sha><sha256>","0","3","1","2013-12-17 08:18:23","20629118","2","3","","","","2013-12-17 08:16:02",""
"43234050","Testing equality of SHA-256 digests using bitwise operators","I'm implementing a token system in a nodeJS app where I need to check the equality of two strings that have been hashed using SHA256. My initial idea was that I can simply test equality using a strict equal operator (hash1 === hash2) because digests should produce the same string if they had the same input. However, I've seen an article from Paragon Initiative claiming it's safer to compare the strings using bitwise operators on each character's ascii code. 
To compare the digest tokens, the Paragon code uses the following code snippet (PHP):
public static function hash_equals($hash1, $hash2)
    ...

    $res = 0;
    $len = \strlen($hash1);
    for ($i = 0; $i < $len; ++$i) {
        $res |= \ord($hash1[$i]) ^ \ord($hash2[$i]);
    }
    return $res === 0;
}

Basically, the characters at each index using a bitwise XOR and then saved to a flag value using a bitwise OR. If any of the characters mismatch, then the difference is saved in $res.
Is this any more effective than using a strict string comparison? Hash digests are just strings and I don't know why a simple string comparison would be less effective than explicitly checking every sing byte in the strings.
Article Ref: https://paragonie.com/blog/2015/04/secure-authentication-php-with-long-term-persistence
Code Ref: https://github.com/psecio/gatekeeper/blob/7b8ec374e208148692316a34c1b4700d5407ef9b/src/Psecio/Gatekeeper/Gatekeeper.php
Update:
I looked into it and the scmp tool on npm can be used for constant-time string comparisons in Javascript.
As of 4/5/2017, it had no vulnerabilities according to the nsp and snyk tools.
","Edit: Use built in hash_equals in PHP for timing attack resistant compares.
See hash_equals PHP doc. Explanation left below.
The reason you shouldn't use string comparisons for testing hashes and such is that they are optimized to return as soon as they can tell the strings aren't equal.
In normal code, this is a good thing.  You want the result as quickly as possible.  When it comes to security though, that leaks information.
If an attacker repeatedly submits different strings and is able to measure a difference in the amount of time until he is denied access, he can use that as a way to determine how much of the substring he has correctly guessed.
Please see this post on security.stackexchange.com and this blog post on timing attacks for more information.
","204","<php><node.js><sha256>","1","2","2","2017-04-05 15:37:34","43234369","0","","3417197","","2017-04-05 15:37:34","2017-04-05 14:25:56",""
"43234050","Testing equality of SHA-256 digests using bitwise operators","I'm implementing a token system in a nodeJS app where I need to check the equality of two strings that have been hashed using SHA256. My initial idea was that I can simply test equality using a strict equal operator (hash1 === hash2) because digests should produce the same string if they had the same input. However, I've seen an article from Paragon Initiative claiming it's safer to compare the strings using bitwise operators on each character's ascii code. 
To compare the digest tokens, the Paragon code uses the following code snippet (PHP):
public static function hash_equals($hash1, $hash2)
    ...

    $res = 0;
    $len = \strlen($hash1);
    for ($i = 0; $i < $len; ++$i) {
        $res |= \ord($hash1[$i]) ^ \ord($hash2[$i]);
    }
    return $res === 0;
}

Basically, the characters at each index using a bitwise XOR and then saved to a flag value using a bitwise OR. If any of the characters mismatch, then the difference is saved in $res.
Is this any more effective than using a strict string comparison? Hash digests are just strings and I don't know why a simple string comparison would be less effective than explicitly checking every sing byte in the strings.
Article Ref: https://paragonie.com/blog/2015/04/secure-authentication-php-with-long-term-persistence
Code Ref: https://github.com/psecio/gatekeeper/blob/7b8ec374e208148692316a34c1b4700d5407ef9b/src/Psecio/Gatekeeper/Gatekeeper.php
Update:
I looked into it and the scmp tool on npm can be used for constant-time string comparisons in Javascript.
As of 4/5/2017, it had no vulnerabilities according to the nsp and snyk tools.
","Comparing hashes the way you compare normal strings could make your program/app/website/whatever vulnerable to timing attacks.
Normal string comparison is fast, you'll get the result as soon as possible. But when it comes to security, that comparison will leak information. By measuring the difference in time it takes to check certain strings an attacker can determine how much of a substring he has guessed correctly. (Anthony Ferrara has posted a very nice article explaining this in detail)
To prevent that from happening we have to check the two hashes using the exact same time. In PHP (>5.6.0) you can use the timing attack safe string comparison function hash_equals().
","204","<php><node.js><sha256>","1","0","2","2017-04-05 15:37:34","43234369","0","","3417197","","2017-04-05 15:37:34","2017-04-05 14:25:56",""
"36355345","Is it save to store passwords encrypted with sha256_crypt but without additional salt","Is it save to create a hash of user passwords with sha256_crypt.encrypt(""secretUserPassword"") and store it to a database without adding a slat to the hash?
If so, what protects the hashes against rainbow table attacks?  
This is how I create a new user in my web application and store it to the database: 
admin = User()
admin.name = 'admin'
admin.password = sha256_crypt.encrypt(""secretAdminPassword"")
db.persist_user(admin)

This is how I check the credentials and login the user
username = request.form['username']
password = request.form['password']   
user = user_from_db(username)
if sha256_crypt.verify(password, user.password):
   login_user(user)

","The documentation states that the function sha256_crypt.encrypt(""password"") not only calculates a SHA-256 hash, it also...

adds a salt automatically
does many rounds of hashing

Both points are essential to get a safe password hashing function. Using it without a self made salt is preferred, because there are several pitfalls in creating a cryptographically safe salt, so best leave it to the library.
","203","<python><security><salt><sha256><passlib>","1","1","1","2016-04-02 14:23:44","36374470","6","","","","","2016-04-01 11:36:04",""
"43092630","Image in report viewer doesn't show after change certificate","I have reporting service and web application on different server. After certificate on web application has been change to SHA256, Images that once showed on the report is never show again (Image source is from web server).
When I look upon SSRS log file, I found an error that indicate that it can't get an image
""Remote certificate error RemoteCertificateChainErrors...""

I also try to export certificate from web and install it on report server but it does not help.
How can I fix this problem?
","Is it possible that you/they have installed certificate incorrectly? Maybe intermediate CA certificate is necessary to be provided by server for clients could validate the whole chain. It is easy to forget to provide that one.
The procedure differs from server to server. There's solution for tomcat. For nginx it is enough to provide concatenated certificates in one file like this:
-----BEGIN CERTIFICATE-----
[CA indermediate cert]
------END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
[your domain cert]
------END CERTIFICATE-----

SSRS cert installation procedure, not familiar with that one. However, intermediate cert is mentioned there too.
","202","<reporting-services><sha256>","2","1","2","2017-04-17 13:36:28","","2","","","","","2017-03-29 11:47:49",""
"43092630","Image in report viewer doesn't show after change certificate","I have reporting service and web application on different server. After certificate on web application has been change to SHA256, Images that once showed on the report is never show again (Image source is from web server).
When I look upon SSRS log file, I found an error that indicate that it can't get an image
""Remote certificate error RemoteCertificateChainErrors...""

I also try to export certificate from web and install it on report server but it does not help.
How can I fix this problem?
","Try changing the Pictures to the PNG Format. SSRS does not play well with JPEGs
","202","<reporting-services><sha256>","2","0","2","2017-04-17 13:36:28","","2","","","","","2017-03-29 11:47:49",""
"43492628","Not same hash SHA256 SQL Server/PHP?","I have an SQL Server database, and I want to start session in PHP for users.
I can interact with my database, but I have some problem with SQL Server hash.
I use Primavera for create user+password so the password is hashed and generated automatically by Primavera. I want to create an application with PHP, and I need to start session with these user+password informations.
(Primavera is an application which create the database on SQL Server)
For users I can see the password like this:

SHA-256:CB4F6845EDF88E23:2710:9FFB6G

And with PHP
echo hash(""SHA256"",""*thepass*"").""<br>"";

I have this:

76f7e6226e348ac43e2566ef1(...)

So I can't start session.
","","201","<php><sql-server><hash><sha256><sha>","0","","0","2017-05-04 08:30:32","","8","","157957","","2017-05-04 08:30:32","2017-04-19 10:09:19",""
"32685574","Trying to open developer options with small coding test","I am trying to open up the Developer Mode of a program called Scelight. The program has a little test before it will let you in.
The problem reads:

Create a .txt file (saved in a specific location) having the hexadecimal representation of the SHA-256 checksum of the decimal representation of the max value of an 8-byte signed integer shifted right by a value of 0x1a and XOR-ed with the hex value CafeBabe.

My code is:
long a = 9223372036854775807L;
a = a >> 0x1a;
long hex2 = 0xcafebabe;
long out4 = a ^ hex2;

Update:
Using Eclipse and Java for this code. This is suggested to be used by the developer. 
Confirmed by developer that 0xcafebabe is what is supposed to be used. Within Eclipse though 0xCafeBabe will give the same result as 0xcafebabe.
This gives me -136549677759 as a result, which I then put into the .txt file and save. Unfortunately this is not correct as developer options are not becoming available.

a0946923280760e172171605e3c85d096ffa39dfbc308161b05b93e77120e453

This is the result for -136549677759 and it does not work. I believe that we are looking for the checksum of the final result.
","Disclosure: I'm the author of Scelight.
Notes beforehand: the problem statement does not require you to use Java, any programming language can be used.

Solution in Java

having the hexadecimal representation of the SHA-256 checksum of...

We need to calculate the SHA-256 checksum of something, and the checksum has to be presented using hexadecimal numbers. Case (lower or upper case letters) in the hexadecimal representation does not matter.

the max value of an 8-byte signed integer

This is Long.MAX_VALUE = (1L<<63)-1 = 9223372036854775807L.
long a = Long.MAX_VALUE;


shifted right by a value of 0x1a

a >>= 0x1a;


and XOR-ed with the hex value CafeBabe.

You need to use a value of type long being 0xcafebabe. But note that if you use the value 0xcafebabe, that is a constant of type int and if you convert it to long, the sign bit will be used to extended it:
System.out.printf(""%x"", (long)0xcafebabe); // Prints ffffffffcafebabe

So use a long constant:
a ^= 0xcafebabeL;

The result so far:
a = 134033261889


...having the hexadecimal representation of the SHA-256 checksum of the decimal representation of...

The SHA-256 checksum (exception handling omitted!):
byte[] result = MessageDigest.getInstance(""SHA-256"").digest((""""+a).getBytes());

Notes about String.getBytes(): yes, it returns the bytes of the string using the platform's default charset. But since the string only contains digits (optionally a negative sign but in our case it is positive), it is ok. In a mission critical application encoding should be specified, something like this: (""""+a).getBytes(StandardCharsets.UTF_8).
And the hexadecimal representation:
for (byte b : result) {
    System.out.printf(""%02x"",b);
}

Note the ""%02x"" format string, hex representation of a byte must be 2 hex digits, first being 0 if it is equal to or less than 0xf.
The first 8 characters of the output (trimmed, at least run the code if you want the full output):
e0dd2851...

The full runnable code:
public static void main(String[] args) throws Exception {
    long a = Long.MAX_VALUE;
    a >>= 0x1a;
    a ^= 0xcafebabeL;

    byte[] result = MessageDigest.getInstance(""SHA-256"").digest(("""" + a).getBytes());
    for (byte b : result) {
        System.out.printf(""%02x"", b);
    }
}

The full runnable code in ""compact"" mode:
for (byte b : MessageDigest.getInstance(""SHA-256"")
        .digest(Long.toString((Long.MAX_VALUE >> 0x1a ^ 0xcafebabeL)).getBytes()))
    System.out.printf(""%02x"", b);

Solution in Go
Solution in Go is even shorter:
a := int64(math.MaxInt64)
a >>= 0x1a
a ^= 0xcafebabe
fmt.Printf(""%x"", sha256.Sum256([]byte(fmt.Sprint(a))))

And the ""compact"" one-liner:
fmt.Printf(""%x"", sha256.Sum256([]byte(fmt.Sprint(int64(1<<63-1)>>0x1a^0xcafebabe))))

The Go solutions can be tried on the Go Playground.
","200","<java><bitwise-operators><sha256>","0","0","1","2016-08-22 06:34:07","32708433","3","3","1705598","","2015-09-22 07:53:58","2015-09-21 00:02:17",""
"48747911","Can't write Node.js analog to PHP hash checking","Following PHP lines works great, but I can't do such in Node
$secret_key = hash('sha256', XXXX, true);
$hash = hash_hmac('sha256', YYYY, $secret_key);

As documentation sais hash() returns raw binary data, but it seems like utf8 string. Trying to do such in Node.js
const secret = crypto.createHash('sha256')
const secret_key = secret.update(XXXX).digest('utf8')

const hmac = crypto.createHmac('sha256', secret_key)
const result = hmac.update(YYYY).digest('hex')

So PHP's $hash and Node.js result are not the same. Have tried secret key with 'hex' with no success. How to reproduce it in Node exactly as in PHP?
","I guess your mistake is making node export your secret key as ""utf8"" instead of a hexadecimal representation.
In PHP your key seems to be presented as hex values as well.
Try using ""hex"" in the first case as well and see what happens:
const secret = crypto.createHash('sha256')
const secret_key = secret.update(XXXX).digest('hex')

const hmac = crypto.createHmac('sha256', secret_key)
const result = hmac.update(YYYY).digest('hex')

","200","<php><node.js><hash><sha256><hmac>","0","0","2","2018-02-12 13:53:09","48748102","0","1","","","","2018-02-12 13:42:16",""
"48747911","Can't write Node.js analog to PHP hash checking","Following PHP lines works great, but I can't do such in Node
$secret_key = hash('sha256', XXXX, true);
$hash = hash_hmac('sha256', YYYY, $secret_key);

As documentation sais hash() returns raw binary data, but it seems like utf8 string. Trying to do such in Node.js
const secret = crypto.createHash('sha256')
const secret_key = secret.update(XXXX).digest('utf8')

const hmac = crypto.createHmac('sha256', secret_key)
const result = hmac.update(YYYY).digest('hex')

So PHP's $hash and Node.js result are not the same. Have tried secret key with 'hex' with no success. How to reproduce it in Node exactly as in PHP?
","If you leave out the encoding of the first digest altogether, then you get equal strings:
const secret = crypto.createHash('sha256')
const secret_key = secret.update('XXXX').digest()

const hmac = crypto.createHmac('sha256', secret_key)
const result = hmac.update('YYYY').digest('hex')

console.log(result);

Corresponding PHP code:
<?php
$secret_key = hash('sha256', 'XXXX', true);
$hash = hash_hmac('sha256', 'YYYY', $secret_key);

echo $hash;


PHP:    c4888731de466cefaa5c831b54132d3d9384310eb1be36f77f3f6542266cb307
NodeJS: c4888731de466cefaa5c831b54132d3d9384310eb1be36f77f3f6542266cb307


","200","<php><node.js><hash><sha256><hmac>","0","1","2","2018-02-12 13:53:09","48748102","0","1","","","","2018-02-12 13:42:16",""
"51992212","Universal App Links and multiple debug SHA256 fingerprints","We are in the process on integrating Universal App Links. The setup requires a file named assetlinks.json to be uploaded to a web service, so that associations can be verified.
When generating a fingerprint for a debug build, the default debug.keystore is used. This means that each developer will have a different SHA256 fingerprint.
Obviously, having each developer generate the fingerprint specified to his or her machine and then adding it to the sha256_cert_fingerprints array in the assetlinks.json file is not palpable.
Is there a modification that can be made to the assetlinks.json file or a process we can use so that testing Universal App Links while debugging will work on any developers machine?
","You can share the debug.keystore between developers or create a new one that is only used for testing/debugging universal apps and is shared.
","197","<android><sha256><android-keystore><applinks>","2","1","1","2018-08-23 20:50:48","","0","","7874124","","2018-08-23 20:50:48","2018-08-23 18:33:54",""
"47531807","Generate string subject to first two bytes of SHA256 of this string equal 0","I have a string s like:
username-password-{random}

I would like to generate the hash SHA256 of the string s, such that first 2 bytes of the hash equal to 0, like:
0000afcbd546843....

So, username-password- is fixed and we can random the {random} part, is there any way to control the random part to get the SHA256 satisfy that condition.
I have the code bash script below, but I have run many time, it does not meet the condition.
pt=""0000""
counter=10000000
while [ $counter -le 20000000 ]
do
        echo $counter
        fibyte=$(echo -n """"username-password-""$counter"" | sha256sum | cut -c1-4)
        if [ ""$fibyte"" == ""$pt"" ]
        then
                echo """"username-password-""$counter""
                echo =======================================================
                break
        fi
        ((counter++))

done
echo DONE

","An important and highly crucial property of a cryptographical hash is that the result of the hashing operation cannot be predicted from the input.  So no, unless somebody breaks SHA256, there is no way to control the output.
Trying different inputs until you get an output which meets your constraints isn't really feasible.  If your current code can generate 10,000 attempts per second (in reality it's certainly a lot less, but humor me), you would need to run it for 1.767e68 seconds which is (Wolfram Alpha to the rescue 4.1e50 times the estimated age of the universe to get the result you want, give or take a few universes.
","196","<linux><bash><random><sha256>","1","0","1","2017-11-28 13:04:39","","5","","","","","2017-11-28 12:36:34",""
"34747097","Modifying hash function","I need to modify hash code,so that instead of 256 hash value,I get 64 bit hash value following the rule that instead of 256 bit fromula.
h=A||B||C||D||E||F||G||H

where A, B, D, E, F, G, H is 32 bit words, || concat operation. I must receive 64 bit hash with formula
 h=B xor D xor F xor H || A xor C xor E xor G.

I am using following Sha256 implementation but I am unable to find part where this has to be done-
http://www.zedwood.com/article/cpp-sha256-function
Where sha should be something like
SHA-256(""10301231030456"") = 0xe4a6aade78b1c5ad21a76adca6beb75634c1ff45e7aba9d18f861211d43d69e1

the goal is to receive:
SHA-256-mod(""10301231030456"") = 0xed99b2cb7e462d56

Thank you
","Try to cast your 256 bit array to unsigned long mod_args[8];
std::string sha = sha256(""10301231030456"");

char hash[32];

for (int i = 0, j = 0; i < sha.length(); i += 2, j++)
{
    std::string sub = sha.substr(i, 2);
    hash[j] = strtoul(sub.c_str(), NULL, 16);
}

unsigned long mod_args[8];
memcpy(mod_args, hash, 32);

than getting 2 pieces of 64 bit:
unsigned long a = mod_args[1] ^ mod_args[3] ^ mod_args[5] ^ mod_args[7];
unsigned long b = mod_args[0] ^ mod_args[2] ^ mod_args[4] ^ mod_args[6]; 

than getting result by concat that two pieces
unsigned long long result = (((unsigned long long)a) << 32) | b;

or 
unsigned long long result = (((unsigned long long)b) << 32) | a;

considering what piece of hash must be older a or b
the complete solution is:
#define B_OLDER_THAN_A

int main()
{
    std::string sha = sha256(""10301231030456"");

    char hash[32];

    for (int i = 0, j = 0; i < sha.length(); i += 2, j++)
    {
        std::string sub = sha.substr(i, 2);
        hash[j] = strtoul(sub.c_str(), NULL, 16);
    }

    unsigned long mod_args[8];
    memcpy(mod_args, hash, 32);

    unsigned long a = mod_args[1] ^ mod_args[3] ^ mod_args[5] ^ mod_args[7];
    unsigned long b = mod_args[0] ^ mod_args[2] ^ mod_args[4] ^ mod_args[6];

#ifdef B_OLDER_THAN_A
    unsigned long long result = (((unsigned long long)b) << 32) | ((unsigned long long)a);
#else
    unsigned long long result = (((unsigned long long)a) << 32) | ((unsigned long long)b);
#endif

    unsigned char output[8] = { 0 };

    memcpy(output, (char*)(&result), 8);

    for (int i = 0; i < 8; i++)
        std::cout << setfill('0') << setw(2) << hex << (unsigned int)(output[i]);

    std::cout << endl;


    return 0;
}

","194","<c++><hash><xor><sha256>","1","2","1","2016-01-13 12:21:29","34747522","3","","5348281","","2016-01-13 12:21:29","2016-01-12 15:07:46","2016-01-12 16:38:04"
"37226864","create bitcoin address in ruby","I am trying to create a bitcoin address in ruby according to the documentation of bitcoin wiki (bitcoin creation according bitcoin wiki).
Starting point is just some random string which emulates the output of ripmed160.
Unfortunately I don't quite succeed in doing so, here is my code:
require 'base58_gmp'
tx_hash = ""a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5""

ripmed160 = tx_hash[0..39]
ripmed160_with_pre = ""00"" + ripmed160

sha1 = Digest::SHA256.hexdigest ripmed160_with_pre
sha2 = Digest::SHA256.hexdigest sha1

bin_address = Integer(""0x"" + ripmed160_with_pre + sha2[0..7])

bitcoin_address = ""1"" + Base58GMP.encode(bin_address, 'bitcoin')  # => ""1GPcbTYDBwJ42MfKkedxjmJ3nrgoaNd2Sf""

I get something that looks like a bitcoin address but it is not recognised by blockchain.info so I guess it is invalid.
Can you please help me to make that work.
","When you calculate the SHA256 checksum, make sure to calculate it over the actual bytes of the previous step, not the hex encoding of those bytes:
# First convert to actual bytes.
bytes = [ripmed160_with_pre].pack('H*')

# Now calculate the first hash over the raw bytes, and
# return the raw bytes again for the next hash
# (note: digest not hexdigest).
sha1 = Digest::SHA256.digest bytes

# Second SHA256, using the raw bytes from the previous step
# but this time we can use hexdigest as the rest of the code
# assumes hex encoded strings
sha2 = Digest::SHA256.hexdigest sha1

","193","<ruby><sha256><bitcoin>","1","1","1","2016-05-14 20:22:00","37227324","3","","3866773","","2016-05-14 20:22:00","2016-05-14 12:48:44",""
"56214026","JWT verify signature using HMACSHA256 and show ""Invalid Signature"" by Swift","I have a question about JWT. 
I try to create own signature and use hard-code secret key ""hello1234567890987654321test1234"". 
And I use my function to create a signature and post to https://jwt.io/ to decode.
Then this webside show me ""Invalid Signature"".
What's wrong about me HMACSHA256 function? 
And I found the ""-"",""_"" in webside and convert ""+"",""/"" in my output signature. 
How to fix my output signature? 
Is this signature is correct?
I also find two HMACSHA256 methods searching in Google. I don't know which is better one. 
please give me some advice about choosing this.
Thanks.
Image:

Method1:
enum CryptoAlgorithm {
    case MD5, SHA1, SHA224, SHA256, SHA384, SHA512
    var HMACAlgorithm: CCHmacAlgorithm {
        var result: Int = 0
        switch self {
        case .MD5:      result = kCCHmacAlgMD5
        case .SHA1:     result = kCCHmacAlgSHA1
        case .SHA224:   result = kCCHmacAlgSHA224
        case .SHA256:   result = kCCHmacAlgSHA256
        case .SHA384:   result = kCCHmacAlgSHA384
        case .SHA512:   result = kCCHmacAlgSHA512
        }
        return CCHmacAlgorithm(result)
    }
    var digestLength: Int {
        var result: Int32 = 0
        switch self {
        case .MD5:      result = CC_MD5_DIGEST_LENGTH
        case .SHA1:     result = CC_SHA1_DIGEST_LENGTH
        case .SHA224:   result = CC_SHA224_DIGEST_LENGTH
        case .SHA256:   result = CC_SHA256_DIGEST_LENGTH
        case .SHA384:   result = CC_SHA384_DIGEST_LENGTH
        case .SHA512:   result = CC_SHA512_DIGEST_LENGTH
        }
        return Int(result)
    }
}

extension String {
    func hmac1(algorithm: CryptoAlgorithm, key: String) -> String {
        var result: [CUnsignedChar]
        if let ckey = key.cString(using: String.Encoding.utf8), let cdata = self.cString(using: String.Encoding.utf8) {
            result = Array(repeating: 0, count: Int(algorithm.digestLength))
            CCHmac(algorithm.HMACAlgorithm, ckey, ckey.count-1, cdata, cdata.count-1, &result)
        } else {
            fatalError(""Nil returned when processing input strings as UTF8"")
        }

        return Data(bytes: result, count: result.count).base64EncodedString()
    }
}

Method2: 
enum HMACAlgorithm {
    case MD5, SHA1, SHA224, SHA256, SHA384, SHA512

    func toCCHmacAlgorithm() -> CCHmacAlgorithm {
        var result: Int = 0
        switch self {
        case .MD5:
            result = kCCHmacAlgMD5
        case .SHA1:
            result = kCCHmacAlgSHA1
        case .SHA224:
            result = kCCHmacAlgSHA224
        case .SHA256:
            result = kCCHmacAlgSHA256
        case .SHA384:
            result = kCCHmacAlgSHA384
        case .SHA512:
            result = kCCHmacAlgSHA512
        }
        return CCHmacAlgorithm(result)
    }

    func digestLength() -> Int {
        var result: CInt = 0
        switch self {
        case .MD5:
            result = CC_MD5_DIGEST_LENGTH
        case .SHA1:
            result = CC_SHA1_DIGEST_LENGTH
        case .SHA224:
            result = CC_SHA224_DIGEST_LENGTH
        case .SHA256:
            result = CC_SHA256_DIGEST_LENGTH
        case .SHA384:
            result = CC_SHA384_DIGEST_LENGTH
        case .SHA512:
            result = CC_SHA512_DIGEST_LENGTH
        }
        return Int(result)
    }
}

extension String {
    func hmac2(algorithm: HMACAlgorithm, key: String) -> String {
        let cKey = key.cString(using: String.Encoding.utf8)
        let cData = self.cString(using: String.Encoding.utf8)
        var result = [CUnsignedChar](repeating: 0, count: Int(algorithm.digestLength()))
        CCHmac(algorithm.toCCHmacAlgorithm(), cKey!, strlen(cKey!), cData!, strlen(cData!), &result)
        let hmacData:NSData = NSData(bytes: result, length: (Int(algorithm.digestLength())))
        let hmacBase64 = hmacData.base64EncodedString(options: .lineLength76Characters)
        return String(hmacBase64)
    }
}

Usage: 
class ViewController: UIViewController {

    override func viewDidLoad() {
        super.viewDidLoad()

        let headerString: String = ""eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9""
        let payloadString: String = ""eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ""
        let totalString: String = headerString + ""."" + payloadString

        let signature1 = totalString.hmac1(algorithm: .SHA256, key: ""hello1234567890987654321test1234"")
        let signature2 = totalString.hmac2(algorithm: .SHA256, key: ""hello1234567890987654321test1234"")

        print(""signature1 : \(signature1)"") // signature1 : L9YSDasvO2B5i8FZUczC+MAtSsTuM0Dj+FEpfn6uoRs=
        print(""signature2 : \(signature2)"") // signature2 : L9YSDasvO2B5i8FZUczC+MAtSsTuM0Dj+FEpfn6uoRs=

    }
}

","The problem is the encoding.
JWT uses base64url encoding :

A JWT is represented as a sequence of URL-safe parts separated by
     period ('.') characters.  Each part contains a base64url-encoded
     value.

but you are using base64 encoding in the signature, as shown in your code example. 
The difference between base64url encoding and base64 encoding is, that the characters '+' and '/' from the normal base64 output will be replaced by '-' and '_' and the trailing '=' (padding) will be omitted.
You say:

And I found the ""-"",""_"" in webside and convert ""+"",""/"" in my output signature. 

With '-' and '_' instead of '+' and '/' you have a correct output.
When you have a base64url encoded signature like this

eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.L9YSDasvO2B5i8FZUczC-MAtSsTuM0Dj-FEpfn6uoRs

the signature wil be verified.
","192","<ios><swift><jwt><sha256><hmac>","2","1","1","2019-05-20 08:26:37","56216090","1","","8169327","","2019-05-20 03:57:22","2019-05-20 03:37:11",""
"35500806","Base64 getting error when compile java source in Oracle sql","I'm able to create a function to compare hash data between my web project(Grails project) and sql query result.
According to this link, 

I apply groovy code into groovy class, then I got the result.
In query, first I compile java source, then compile function, and call function.

However, I got trouble when tried to import org.apache.commons.codec.binary.Base64. 
Code below:
create or replace and compile java source named testhmacSHA256 as
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import org.apache.commons.codec.binary.Base64;
public class testhmacSHA256 {
  public static String encrypt(String secret, String message) { 
  try {
      Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
     SecretKeySpec secret_key = new SecretKeySpec(secret.getBytes(), ""HmacSHA256"");
     sha256_HMAC.init(secret_key);

     String hash = Base64.encodeBase64String(sha256_HMAC.doFinal(message.getBytes()));
     return hash;
    }
    catch (Exception e){
     System.out.println(""Error"");
    }
  }
}
/

Obviously, Base64 can't be found. 
So my question is that is there any alternative way for importing base64, or just a way to use hmac-sha 256 in oracle sql 11g.
Any helps will be appreciated. Thanks.
","Open conf/BuildConfig.groovy and in section dependency add:
build ""commons-codec:commons-codec:1.10""

it should like:
dependency {
    //... another dependiences if any
    build ""commons-codec:commons-codec:1.10""
} 

Refresh dependiences and recompile project.
If you have any problems please paste in question your conf/BuildConfig.groovy source file.
","190","<java><grails><oracle11g><sha256><hmac>","0","0","1","2016-02-22 11:15:03","","4","3","3724625","","2016-02-19 09:45:39","2016-02-19 08:39:46",""
"39669113","Trying to create a sha256 key and hash in Elixir (converting from python code)","I am in the middle of creating an Elixir project that uses Google Cloud Storage. Some of our customer requirements dictate that each customer utilize their own separate encryption keys.
I can create them using the Google code provided manually, however I was wondering about automating this (mostly out of my curiosity). The python code provided by Google is:
import base64
import hashlib
import os
key = os.urandom(32)
print ""Key: %sSHA256 hash: %s"" % (base64.encodestring(key), base64.encodestring(hashlib.sha256(key).digest()))

I thought I put together some Elixir code to do the trick:
key = 32 |> :crypto.strong_rand_bytes |> Base.encode64
hash = :sha256 |> :crypto.hash(key) |> Base.encode64
IO.puts ""Key: #{key}\nSHA256 hash: #{hash}""

However, when I try to use my Elixir-generated key and hash Google complains as so:
{
  ""domain"": ""global"",
  ""extendedHelp"": ""https://cloud.google.com/storage/docs/encryption#customer-supplied_encryption_keys"",
  ""message"": ""Missing a SHA256 hash of the encryption key, or it is not base64 encoded, or it does not match the encryption key."",
  ""reason"": ""customerEncryptionKeySha256IsInvalid""
}

Naturally, the Python code works, so there seems to be some difference going on here.
Anyone have any ideas as to why this is? Thanks!
","It seems that in elixir, you are hashing the base64 encoded key, while the original python implementation hashes the raw bytes of the key.
The following should work:
key = :crypto.strong_rand_bytes(32)
base64_key = Base.encode64(key)
base64_hash = :sha256 |> :crypto.hash(key) |> Base.encode64
IO.puts ""Key: #{base64_key}\nSHA256 hash: #{base64_hash}""

","190","<python><google-cloud-storage><elixir><sha256>","0","2","1","2016-09-23 21:43:03","39669969","0","","","","","2016-09-23 20:34:58",""
"36493429","Hashing a string in PHP in the same way as in VB.NET","I have following encryption function and don't know in which language this code is written. as per my knowledge this function is encrypting string in SHA256.
Use Namespace: Imports System.Security.Cryptography
Data: Agent Code ~ Userid ~ Security ID~ MerchantID~ Terminalid~ LoginKey
Public Function EncryptSHA(ByVal Data As String) As String
Dim sh As New SHA256Managed
Try
Convert.ToBase64String(sh.ComputeHash(Encoding.ASCII.GetBytes(Data)))
Dim eNC_data As Byte() = ASCIIEncoding.ASCII.GetBytes(Data)
Dim eNC_str As String = Convert.ToBase64String(eNC_data)
Return eNC_str
Catch ex As ExceptionGeneral.Err_Handler(""General"", ""EncryptSHA"", ex.Message)
Return Nothing
End Try
End Function

I am working on php and want same php encryption function in php . 
Please someone explain what encryption this function is using ??
Here is my php code :
$data='Agent Code ~ Userid ~ Security ID~ MerchantID~ Terminalid~ LoginKey';
$encryptcode = hash('SHA256', $data);

Sorry for my bad english.
","SHA256 is a hash function and that's a oneway enryption. There is no way to decrypt it. The whole purpose of a cryptographic hash function is that you can't reverse it. It is used for example to verify a users password: Compare the hash of a users password with the hash saved in the database, to verify a users identity.
If you want to break it you can try these techniques:

Brute force
Rainbow tables

","189","<php><vb.net><hash><sha256>","-1","0","1","2016-04-08 08:47:00","","3","","1816580","","2016-04-08 08:47:00","2016-04-08 06:58:04",""
"13194814","Splitting a sha256 hash","
Possible Duplicate:
Is it okay to truncate a SHA256 hash to 128 bits? 

Can anyone tell me to what degree entropy would be affected if only the first 35 characters of a sha256 hash were to be returned?  What is the risk in doing this?
","Well, not sure what exactly you are asking for.
Your 35 chars represent 17.5 bytes that are 140bits
256 bit: 2^256 = 1.1E+77
140 bit: 2^140 = 1,4E+42

So entropy is dramatically reduced. Hope this helps.
","187","<php><sha256>","1","2","1","2012-11-02 12:54:49","","5","","-1","","2017-05-23 12:05:40","2012-11-02 11:58:58","2012-11-03 01:00:46"
"53971974","Base64 and SHA256 results of C# and Python are different","I'm a newcomer and beginner, because my English is not good, I will make a long story short, please help me.  
A public key is Base64 decode and SHA256.
Use C# and Python  (Python result is correct.)
Why do I get different results?  
If you like, I hope to get the answer by C# code(my English is very poor.)
Thank you very much.
Same public key : MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0k9N59vMq/1BP6lwgyxVPeWj6EFTMW+wJqyl+vePi1vKzJBCXWPZ5Ls7PmNaTaAQ5TVC5WVoxveuvaYLGm514Y7EDTrL8BrPWcK73Gw7E/IQyfOC+/Mw6mBnANyWiVAu9qIi2/PWasA2J/XR97kfUfuM716NKUNzBmmju8pfyPu+ee9Zfh0fUclF0g48AJMZaw8g6SxiWnQ8XhABkMHXyqVio5cdt5omupDcZ17HHBXsP3KHNX5Tu8ZDrCbFH566p1WGjM6W2Wr2YffzC8WPyFTS/6eiAde5iVjS2VHqRkmgQvrH794kGUC7ZUitP7p6gYCvhdffqxLQslvga9cPNQIDAQAB
Base64 decode ==> SHA256 
Python:
pubkey_der = base64.b64decode(pubKey)  
sha = hashlib.sha256(pubkey_der).hexdigest()
for i in sha:
    print(i),
print('\n'),

result:890e947269d4e6d9c73883157f65aa6f12e20ad0a05ff518b5f9cb43cea28b89
C#:  
private void button_go2_Click(object sender, EventArgs e)
{
   string b64 = DecodeBase64(pubKey);
   string result = GetSHA256HashFromString(b64);
}


 private static string DecodeBase64(string pubKey)
        {
            string decode = string.Empty;
            byte[] bytes = Convert.FromBase64String(pubKey);
            decode = Encoding.UTF8.GetString(bytes);
            return decode; 
        }


 public string GetSHA256HashFromString(string strData)
        {
            byte[] bytValue = System.Text.Encoding.UTF8.GetBytes(strData);
            try
            {
                SHA256 sha256 = new SHA256CryptoServiceProvider();
                byte[] retVal = sha256.ComputeHash(bytValue);
                StringBuilder sb = new StringBuilder();
                for (int i = 0; i < retVal.Length; i++)
                {
                    sb.Append(retVal[i].ToString(""x2""));
                }
                return sb.ToString();
            }
            catch (Exception ex)
            {
                throw new Exception(""GetSHA256HashFromString() fail,error:"" + ex.Message);
            }
        }

result:1eb61f3f380bccf54e61e05cdbe6e14c3871c6c827b33dc03b2cf47c1fc0df4c
","","186","<c#><python><base64><sha256>","3","","0","2018-12-29 17:54:12","","7","","10846941","","2018-12-29 17:54:12","2018-12-29 17:50:12",""
"25916022","Compiled sha256 lib for mysql but it produces other hash than dovecot's sha256","I need to ""teach"" mysql server to use sha256 algorithm.
I downloaded source from http://stuge.se/mysql-sha256/mysql-sha256-3.tar.bz2, compiled and put in /usr/local/lib/mysql/plugin/. Then i created function in mysql
mysql> create function sha256 returns string soname 'sha256.so';

It went fine but mysql and dovecot produce different hashes.
[root@taz /usr/ports/mail/postgrey]# mysql -u root -p -e ""SELECT sha256('test')""
Enter password:
+------------------------------------------------------------------+
| sha256('test')                                                   |
+------------------------------------------------------------------+
| b1499ffe49c3b4f354e30349bca8e62f08604eab6b687322df47d4f8fce76f19 |
+------------------------------------------------------------------+

[root@taz /usr/ports/mail/postgrey]# doveadm pw -s SHA256.hex -p test
{SHA256.HEX}9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08

[root@taz /usr/ports/mail/postgrey]# doveadm pw -s SHA256 -p test
{SHA256}n4bQgYhMfWWaL+qgxVrQFaO/TxsrC4Is0V1sFbDwCgg=

Why hashes are different? MD5 and SHA1 hashes are same, only SHA256 are different.
","Using the command line, I get this result:
echo -n test|sha256sum 
9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08  -

which leads me to believe that dovecot gives the correct answer (I also tried an online sha256 calculator which gives the same result).
That probably means there is a bug in the source code you downloaded. Get in contact with the person who wrote this mysql-sha256-3.tar.bz2 and let them know of the bug.
","185","<mysql><hash><sha256>","1","0","1","2014-09-19 08:46:26","25916121","0","","","","","2014-09-18 14:54:33",""
"47600624","SQL Server : Hashbytes with Umlauts","I have a strange situation figured out, when the Hashbyte function of SQL Server is not outputting the correct result when converting it to SHA2_256 with a string containing umlauts (ä,ö,ü,ß). 
I run the example code in SQL Server: 
 declare @cryptString varchar(50) 
 set @cryptString = 'test'

 select convert(Varchar(64), Hashbytes('SHA2_256', @cryptstring), 2)

The result is:
9F86D081884C7D659A2FEAA0C55AD015A3BF4F1B2B0B822CD15D6C15B0F00A08

When I'm checking the SHA256 conversion on https://hashgenerator.de/ the result is the same. 
My problem: when I'm trying to crypt for example 'müller', the result in SQL Server is:
26A45113433596C5DD53643C7652381202E8009E532A280E513D887174A9ED14

When I'm checking the SHA256 conversion on https://hashgenerator.de/ the result is different. 
2dbd218072117713f2d5996a726a9b216ed791ffd0783b6ba4ab6d61b8333192

I think it could be a encoding problem, but I searched for hours and can't find any clue to solve this problem. 
I appreciate any kind of help to solve this problem.
","You have this:
declare @cryptString varchar(50) 

And you try to use it to hold this value:
müller

That's bad. You need an nvarchar for anything that could go beyond basic ascii characters.
But that's just for starters. nvarchar uses UTF-16 (see the section headed ""Supplementary Characters"" about halfway down the page). The web site may be using UTF-32 or (likely) UTF-8 to encode those characters. Either one will use slightly different byte representations, which will produce completely different hash values. 
I believe you're seeing UTF-8 at https://hashgenerator.de/, because UTF-8 matches ASCII when only using ASCII characters. With UTF-8, simple values like test would then produce the same result for both the web site and the database.
To fix this, understand the SQL hash will use either ASCII or UTF-16, and so you must change your encoding on whatever other platform you're using to match the database. The simplest option is probably to always use UTF-16 for these values, but you could also choose to stick with varchar on the database and convert your text to ascii before calculating the hash elsewhere (with the understanding that you'll lose some fidelity).
","185","<sql><sql-server><database><sha256><hashbytes>","0","1","1","2017-12-01 21:51:33","47600782","0","","13302","","2017-12-01 21:51:33","2017-12-01 19:56:48",""
"5133466","How To Secure Encrypted Password Even The Weakest One?","I am always looking for ways to secure my user's passwords. I am currently using some combination of hashing algorithm with random salt.
The main thing in this problem is when my user set a very very weak password. No matter how hard my mixed-up hashing algorithm, and how long my salt is, I think it can be cracked in less than 1 year.
I've been thinking for a new way. I've made a script that will re-encrypt the password every time the user sign-out by adding a random salt on the old hashed password, then encrypt it again. So, every time the user come back, the encrypted password is different. Get it?
But the main problem on this idea is, I must store the new salt every time the user sign-out. Imagine my code will look like, if the user is sign-in and sign-out everyday?
Any idea?
Oh, I have an idea. How about regenerate new encrypted password every year?
","There are two problems with your main assumptions. The first one is about the problem of storing the salt. You already do for the salted password solution. With your new approach, salt would change over time, and that's it. So you could have used this method and the only extra cost would be the re-calculation of the hash value at every login (when you actually have the password string itself).
The second problem is the more important one: a re-hashing will not change anything. As soon as your attacker gets hold of one salted hash value, it will be enough to mount a dictionary attack. The fact that you change your salts and the hash in your database will not make it any more difficult. So there is no need to recalculate a hash after the first one is created. 
","184","<encryption><passwords><md5><sha256><sha512>","1","0","3","2011-02-27 19:14:38","","1","1","","","","2011-02-27 13:30:46",""
"5133466","How To Secure Encrypted Password Even The Weakest One?","I am always looking for ways to secure my user's passwords. I am currently using some combination of hashing algorithm with random salt.
The main thing in this problem is when my user set a very very weak password. No matter how hard my mixed-up hashing algorithm, and how long my salt is, I think it can be cracked in less than 1 year.
I've been thinking for a new way. I've made a script that will re-encrypt the password every time the user sign-out by adding a random salt on the old hashed password, then encrypt it again. So, every time the user come back, the encrypted password is different. Get it?
But the main problem on this idea is, I must store the new salt every time the user sign-out. Imagine my code will look like, if the user is sign-in and sign-out everyday?
Any idea?
Oh, I have an idea. How about regenerate new encrypted password every year?
","Re-encryption doesn't help with your problem.
The only thing you can do is create a multi part hash, and hope the attacker doesn't get all of them. I usually use a two part salt:
One part is a random per user value stored in the database alongside the password.
The other part is a per application salt. You can store it in the application config or in a special password store the OS offers.
The advantage of that split is that it's not enough if the attacker just gains access to the database, but he needs to get access to wherever your application salt is stored. So for example a simple sql injection stealing your database isn't enough. If the attacker can execute code it probably won't help at all.

And you should use some method to slow down hashing. Typical hash functions are fast, so brute-force is fast too. But if you iterate the hash-function a million times it still doesn't slow down a valid login much, but slows down brute-force a lot.
You can achieve that using a Password Based Key Derivation Function such as PBKDF2.
","184","<encryption><passwords><md5><sha256><sha512>","1","3","3","2011-02-27 19:14:38","","1","1","","","","2011-02-27 13:30:46",""
"5133466","How To Secure Encrypted Password Even The Weakest One?","I am always looking for ways to secure my user's passwords. I am currently using some combination of hashing algorithm with random salt.
The main thing in this problem is when my user set a very very weak password. No matter how hard my mixed-up hashing algorithm, and how long my salt is, I think it can be cracked in less than 1 year.
I've been thinking for a new way. I've made a script that will re-encrypt the password every time the user sign-out by adding a random salt on the old hashed password, then encrypt it again. So, every time the user come back, the encrypted password is different. Get it?
But the main problem on this idea is, I must store the new salt every time the user sign-out. Imagine my code will look like, if the user is sign-in and sign-out everyday?
Any idea?
Oh, I have an idea. How about regenerate new encrypted password every year?
","You could use ""key stretching"": iterate the hash, say, a million times, after salting.
Then store hash value, salt, and iteration count.
Then an attacker could check a million times fewer passwords per second than when you hash once. But a very short password will still fall: note that you yourself, to verify the legitimate password, need to do the same operation. Suppose you accept a 1 second time for yourself to check, then the attacker can also check passwords at 1 second per password, on a similar machine (and more if he used more or faster machines!). And 1 second per password can still be enough to check for weak and short password, standard dictionaries etc. There really is no defending against it, only making it harder.
","184","<encryption><passwords><md5><sha256><sha512>","1","1","3","2011-02-27 19:14:38","","1","1","","","","2011-02-27 13:30:46",""
"7168543","What's wrong with these passwords?","When I try to put a new user's password into a MySQL database, it doesn't encrypt it correctly. Here's the code I'm using: 
$encPassword = hash('sha256', $_POST['password']); 
    $query = sprintf(""INSERT INTO users(`userName`,`email`,`password`) 
        VALUES('%s','%s',PASSWORD('%s'))"", 
        mysql_real_escape_string($_POST['userName']), 
        mysql_real_escape_string($_POST['email']), 
        mysql_real_escape_string($encPassword))or die(mysql_error()); 
    $sql = mysql_query($query); 

When I check the database though, it doesn't store the password as sha256 encrypted. It only has 16 random characters (it should have ~50). What's wrong with it?
","Check you have correct column lenght allowed in your table. That's the most common problem. Your field must be at least VARCHAR(64)
","183","<php><mysql><encryption><passwords><sha256>","1","4","4","2011-08-23 23:55:51","7168602","5","","","","","2011-08-23 23:01:07",""
"7168543","What's wrong with these passwords?","When I try to put a new user's password into a MySQL database, it doesn't encrypt it correctly. Here's the code I'm using: 
$encPassword = hash('sha256', $_POST['password']); 
    $query = sprintf(""INSERT INTO users(`userName`,`email`,`password`) 
        VALUES('%s','%s',PASSWORD('%s'))"", 
        mysql_real_escape_string($_POST['userName']), 
        mysql_real_escape_string($_POST['email']), 
        mysql_real_escape_string($encPassword))or die(mysql_error()); 
    $sql = mysql_query($query); 

When I check the database though, it doesn't store the password as sha256 encrypted. It only has 16 random characters (it should have ~50). What's wrong with it?
","Have you checked the value of $encPassword before the INSERT?
","183","<php><mysql><encryption><passwords><sha256>","1","0","4","2011-08-23 23:55:51","7168602","5","","","","","2011-08-23 23:01:07",""
"7168543","What's wrong with these passwords?","When I try to put a new user's password into a MySQL database, it doesn't encrypt it correctly. Here's the code I'm using: 
$encPassword = hash('sha256', $_POST['password']); 
    $query = sprintf(""INSERT INTO users(`userName`,`email`,`password`) 
        VALUES('%s','%s',PASSWORD('%s'))"", 
        mysql_real_escape_string($_POST['userName']), 
        mysql_real_escape_string($_POST['email']), 
        mysql_real_escape_string($encPassword))or die(mysql_error()); 
    $sql = mysql_query($query); 

When I check the database though, it doesn't store the password as sha256 encrypted. It only has 16 random characters (it should have ~50). What's wrong with it?
","It's because you are using PASSWORD('%s') function in your query, (so you are double hashing your password). 
Just insert it as other values ('%s')
","183","<php><mysql><encryption><passwords><sha256>","1","0","4","2011-08-23 23:55:51","7168602","5","","","","","2011-08-23 23:01:07",""
"7168543","What's wrong with these passwords?","When I try to put a new user's password into a MySQL database, it doesn't encrypt it correctly. Here's the code I'm using: 
$encPassword = hash('sha256', $_POST['password']); 
    $query = sprintf(""INSERT INTO users(`userName`,`email`,`password`) 
        VALUES('%s','%s',PASSWORD('%s'))"", 
        mysql_real_escape_string($_POST['userName']), 
        mysql_real_escape_string($_POST['email']), 
        mysql_real_escape_string($encPassword))or die(mysql_error()); 
    $sql = mysql_query($query); 

When I check the database though, it doesn't store the password as sha256 encrypted. It only has 16 random characters (it should have ~50). What's wrong with it?
","I don't think you should use the PASSWORD keyword: http://dev.mysql.com/doc/refman/5.1/en/encryption-functions.html#function_password

The PASSWORD() function is used by the authentication system in
    MySQL Server; you should not use it in your own applications. For
    that purpose, consider MD5() or SHA1() instead. Also see RFC 2195,
    section 2 (Challenge-Response Authentication Mechanism (CRAM)),
    for more information about handling passwords and authentication
    securely in your applications.

But, you've already hashed the password on the 1st line of code. Just insert that directly into the database...
","183","<php><mysql><encryption><passwords><sha256>","1","3","4","2011-08-23 23:55:51","7168602","5","","","","","2011-08-23 23:01:07",""
"52974244","concatenate & Hex 256sha Hash a Signature","I am trying to create a request in postman that pulls some parameters and puts them in the proper order and then hashes in sha256 hex. I understand I need to use a pre-request script but am struggling with what to use and how to get parameters in the script.
Example of the concatenate string - hex_sha256('[session:Key][session:Password][session:Sent][session:UnitAgencyTypeId][session:UnitName][session:UserInit][session:UserName][session:UserSub][session:Secret]')"")]
Any help would be really appreciated
","The script sandbox provided by Postman includes crypto-js, which can be used to compute SHA256 hashes. This can be done as follows:
var SHA256 = require('crypto-js').SHA256,
    hash = SHA256('your_content_goes_here');

As for the parameters, it is possible to use various parts of a request, as well as Postman variables to construct the input for your hashing needs. See https://www.getpostman.com/docs/v6/postman/scripts/postman_sandbox_api_reference for a complete reference on all helpers provided by the Postman sandbox.
","183","<postman><sha256>","0","0","1","2018-10-24 18:33:22","","0","","","","","2018-10-24 16:49:20",""
"54170442","Creating a hash of a message in C#","I'm want to use a REST API which requires a signature, which is a hash of the message using a secret key. I have a JavaScript implementation of it which works, but when I try to do the same thing in C#, it produces a different result which, according to the API response, does not seem to be correct.
The JavaScript code that produces the desired signature:
let signature = crypto.createHmac('sha256', secret_key).update(message).digest('hex');

The C# code that does not produce the same desired signature:
var hash = new HMACSHA256(key);
byte[] signature = hash.ComputeHash(message);
StringBuilder hexDigest = new StringBuilder();
foreach (byte b in signature)
     hexDigest.Append(String.Format(""{0:x2}"", b).ToUpper());

Would appreciate if someone can tell me what I need to change in the C# code to reproduce the same result.
","I don't know what to change in the code you provided. But let me guide you.
You probably have different keys or messages because of text encoding. For example, with Javascript I've tried the following code:
const secret_key = 'abcdefg';
const message = 'Hello, World!';
let signature = crypto.createHmac('sha256', secret_key).update(message).digest('hex');

The signature is 37c559140f3c04743337019ef0f693ee8a469c9d41a925b8f3b624796dce0ba0.
In C# I used the UTF8 encoding and got the same result.
var key = Encoding.UTF8.GetBytes(""abcdefg"");
var hash = new HMACSHA256(key);
var message = Encoding.UTF8.GetBytes(""Hello, World!"");
byte[] signature = hash.ComputeHash(message);
    StringBuilder hexDigest = new StringBuilder();
    foreach (byte b in signature)
         hexDigest.Append(String.Format(""{0:x2}"", b));

If I used Encoding.Unicode, I would get different signature  eb2b452cf518dc647a5014b7dd46da2e7bd2300aae394ea9cbb4eba492c093f5.
","181","<javascript><c#><sha256><hmac>","0","2","1","2019-01-13 16:24:18","54170691","0","1","","","","2019-01-13 15:41:20",""
"46618809","verify js pbkdf2-sha256 hash with python passlib","I encrypt a random string in python file and hashit in javascript using pbkdf2-sha256 but some how the verification fails with python passlib . any idea why?
my python code is :
from passlib.hash import pbkdf2_sha256
import os,random,string
t = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in 
range(7))
h = os.popen('node 
D:/mojtaba/repos/restaurant_app/frontend/node_modules/a.js '+t).read()[:-2]
a = pbkdf2_sha256.verify(t,h)
print(a)

and js file contains :
var pbkdf2 = require('pbkdf2-sha256');
var salt = 'WitFCKH03htDKAVA6L3Xmg';
var algorithm = ""pbkdf2-sha256"";
var iterations = 29000;
var hashed = pbkdf2(process.argv[2], new Buffer(salt), iterations, 
32).toString('base64');
var finalPass = '$'+algorithm +'$'+ iterations +'$'+  salt +'$'+  hashed;
console.log(finalPass)

and result is always false 
","","180","<javascript><python><sha256><passlib>","1","","0","2017-10-08 06:53:55","","0","","6186875","","2017-10-08 06:53:55","2017-10-07 09:46:50",""
"16964888","PHP - Is it possible to hash an array of numbers?","I am currently working on setting up a number hashing system for a client. If I hash the numbers one by one with hash('sha256', $number) I can then insert them into a database and look them up correctly later on with no problems.
If I send an array of numbers such as: (1041, 1042, 1043, 1044, 1045) through the same hash ('sha256', $array) the output does not match up to the output I get when done one by one. Is there a particular reason this happens? Is it a bad idea to hash arrays?
Code example
If I pass the number 1031 by itself as follows I will get: 3e34b5dc434bcf3186f089d362691cfac1b17231601f2f402dc79015be878d83
$number = 1031;
$hash = hash('sha256', $number);

If the number 1031 gets passed through the following hash the result I get is: d83e4573f6d32ca3f17b77046809c1effe3b462b4cd7338d2c80568e63c76599
while($row = mysqli_fetch_assoc($query)){
     $numbers = $row['pnumbers'];
     $hash = hash('sha256', $numbers);
 }

So I guess my question boils down to: Is it possible to hash multiple numbers at one time and retrieve the same output as if I were to hash them one by one? Or am I missing something or doing something wrong?
","No it's impossible without a for(each) loop. What do you suspect the output will be, an array that contains the hashes? Here you can find the documentation of the hash-function
","178","<php><mysql><arrays><numbers><sha256>","0","0","1","2013-06-06 14:42:45","16965112","0","","","","","2013-06-06 14:33:47",""
"43720040","Should we be using the sha256 digest algorithm?","We are using a Digicert EV sha256 certificate to sign our code. However, we are using a sha1 ""digest algorithm"".
I've never really understood the implications of this but I do know that it gets around the ""smart screen"" warning that was presented for software that has been signed using sha1 after 1st Jan 2016. I assume that is because it knows we are using an EV certificate?
My main question is, should we be using a sha256 ""digest algorithm"" going forward (and a sha256 timestamp algorithm)? I see that sha1 is still quite common, having checked some of the applications on my PC.
","","177","<windows><code-signing><sha1><sha256>","0","","0","2017-05-01 13:48:19","","3","","101642","","2017-05-01 13:48:19","2017-05-01 13:38:52",""
"41336554","storing a hash password","i would like to hash a varchar and store it in db but i 've got a problem
when checking its value ,i thought i just had to hash it again and compare to db value      
 ALTER PROCEDURE [dbo].[AddLecteur]
                @userName NVARCHAR(50), 
                @PasswordHash NVARCHAR(50),

                @biblioPrincip int  

            AS
            BEGIN
               SET NOCOUNT ON
        declare @ErrorMessage NVARCHAR(250)
        declare @salt varbinary(4)=crypt_gen_random(4)
        BEGIN TRY

            INSERT INTO lecteur(nom, motPassword, biblioPrincipal)
            VALUES(@userName,HASHBYTES('SHA2_256',cast( @PasswordHash as varbinary(max))+@salt),  @biblioPrincip)

            SET @ErrorMessage='Success'

        END TRY
        BEGIN CATCH
            SET @ErrorMessage=ERROR_MESSAGE() 
        END CATCH

            END

the value inserted is ‰¥_#ç¢¿K¤IFÕšxHà6œûäÜô4îõ„R¨Ó
        am i not supposed to get the same value when checking the user if i use a salt inserted at the creation of the user and hash the user input the same way?
        the second trigger hashing a proposal to compare to the one above generated when creating the user
 ALTER PROCEDURE [dbo].[CheckngUser]
    @userName varchar(50),
    @password nvarchar(50),
    @libelle varchar(50)


    AS
    BEGIN

    declare @salt varbinary(4)
    set @salt=(select lecteur.salt from lecteur where lecteur.nom=@userName)
    select HASHBYTES('SHA2_256',cast( @password as varbinary(max))+@salt), 

    le.id,le.nom,le.[motPassword],bi.libellé from lecteur as le
    inner join biblio as bi on le.biblioPrincipal=bi.id
    where le.nom=@userName and le.motPassword=HASHBYTES('SHA2_256',cast( 

    @password as varbinary(max))+@salt)
    END

why do i have this value here  0x7774FB52EB1FB5D3DD731A8B64B4BA1A73F4893F8A3C9084248D774D83C3E326
","","177","<sql><stored-procedures><hash><sha256>","0","","0","2016-12-27 16:25:19","","5","","5898944","","2016-12-27 16:25:19","2016-12-26 21:43:14",""
"14237622","Encryption hmac result is shorter in C than C#","Sometimes you have to implement C-Code and Encryption so I have a Problem with my C-Code implementation of hmac256 or sha2_hmac Implementation:
unsigned char key[19] = { ""abcdef"" };
size_t keylen = 18;
unsigned char input[64] = {""123456789""}; 
size_t ilen = 63;         
unsigned char output[32];
int is224 = 0;


sha2_hmac(key, keylen, input, ilen, output, is224);

char result[64] = {};
char result2[64] = {};

for(int j = 0; j < 32; j++) {
        sprintf(result, ""%X"", output[j]);
        strcat(result2, result);
}

But the result is too short, when I compare it to the C# Code.
","You have to adjust your sprintf() function call like this:
sprintf(result, ""%02X"", output[j]);

","176","<c><hmac><sha256>","2","2","1","2013-01-09 14:41:10","14237668","3","","","","","2013-01-09 14:37:54",""
"38698734","POI XSSF / XLSX hashing indeterminism with MessageDigest SHA-256","There seems to be a problem with getting deterministic hash values for the POI XLSX format, with MessageDigest SHA-256 implementation, even for empty ByteArray streams. This happens randomly, after several hundreds or even only thousands of iterations.
The relevant code snippets used to reproduce the problem:
// TestNG FileTest:
@Test(enabled = true) // indeterminism at random iterations, such as 400 or 1290
public void emptyXLSXTest() throws IOException, NoSuchAlgorithmException {
    final Hasher hasher = new HasherImpl();
    boolean differentSHA256Hash = false;
    for (int i = 0; i < 10000; i++) {
        final ByteArrayOutputStream excelAdHoc1 = BusinessPlanInMemory.getEmptyExcel(""xlsx"");
        final ByteArrayOutputStream excelAdHoc2 = BusinessPlanInMemory.getEmptyExcel(""xlsx"");

        byte[] expectedByteArray = excelAdHoc1.toByteArray();
String expectedSha256 = hasher.sha256(expectedByteArray);
byte[] actualByteArray = excelAdHoc2.toByteArray();
String actualSha256 = hasher.sha256(actualByteArray);

if (!expectedSha256.equals(actualSha256)) {
            differentSHA256Hash = true;
            System.out.println(""ITERATION: "" + i);
            System.out.println(""EXPECTED HASH: "" + expectedSha256);
            System.out.println(""ACTUAL HASH: "" + actualSha256);
            break;
        }
    }
    Assert.assertTrue(differentSHA256Hash, ""Indeterminism did not occur"");
}

Referenced Hasher and POI code:
// HasherImpl class:
public String sha256(final InputStream stream) throws IOException, NoSuchAlgorithmException {
    final MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
    final byte[] bytesBuffer = new byte[300000]; 
    int bytesRead = -1;
    while ((bytesRead = stream.read(bytesBuffer)) != -1) {
        digest.update(bytesBuffer, 0, bytesRead);
    }
    final byte[] hashedBytes = digest.digest();
    return bytesToHex(hashedBytes);
}

Tried to eliminate indeterminism due to meta data like creation time, to no avail:
// POI BusinessPlanInMemory helper class:
public static ByteArrayOutputStream getEmptyExcel(final String fileextension) throws IOException {
    Workbook wb;

    if (fileextension.equals(""xls"")) {
        wb = new HSSFWorkbook();
    }
    else {
        wb = new XSSFWorkbook();
        final POIXMLProperties props = ((XSSFWorkbook) wb).getProperties();
        final POIXMLProperties.CoreProperties coreProp = props.getCoreProperties();
        coreProp.setCreated("""");
        coreProp.setIdentifier(""1"");
        coreProp.setModified("""");
    }

    wb.createSheet();

    final ByteArrayOutputStream excelStream = new ByteArrayOutputStream();
    wb.write(excelStream);
    wb.close();
    return excelStream;
}

The HSSF / XLS format seems not to be affected by the problem described.
Does anybody have a clue, what could be causing this, if not a bug in POI itself? Basically, the code above refers to 
https://poi.apache.org/spreadsheet/examples.htmlBusinessPlan example

Thanks for your input!
","This is not a definitive answer but this is my suspicion what happens:
docx and xlsx file formats are basically a bunch of zipped-up xml-files. This can easily be seen when renaming them to .zip and opening with your favorite zip-tool.
When examining a file created by word I noticed that the change-timestamp of all files contained in the archive is always 1980-01-01 00:00:00 while in those created with POI it will show the actual timestamp the file was created.
So my I suspect that your problem occurs when there is a timestamp-difference between one or more of the files in excelAdHoc1 and excelAdHoc2. This might happen when the clock switches to the next second while creating one or the other file.
This would not affect XLS-files since the HSSF-format is not of the ""zipped xml""-type and thus does not contain any nested files that might have different timestamps.
To change the timestamps after writing the file you could try using the `java.util.zip``-package. I haven't tested it but this should do the trick:
ZipFile file = new ZipFile(pathToFile);
Enumeration<ZipEntry> e = file.entries();
while(e.hasMoreElements()) {
    ZipEntry entry = e.nextElement();
    entry.setTime(0L);
}

","176","<java><apache-poi><testng><sha256>","3","2","2","2018-08-18 11:05:24","","0","4","","","","2016-08-01 12:20:34",""
"38698734","POI XSSF / XLSX hashing indeterminism with MessageDigest SHA-256","There seems to be a problem with getting deterministic hash values for the POI XLSX format, with MessageDigest SHA-256 implementation, even for empty ByteArray streams. This happens randomly, after several hundreds or even only thousands of iterations.
The relevant code snippets used to reproduce the problem:
// TestNG FileTest:
@Test(enabled = true) // indeterminism at random iterations, such as 400 or 1290
public void emptyXLSXTest() throws IOException, NoSuchAlgorithmException {
    final Hasher hasher = new HasherImpl();
    boolean differentSHA256Hash = false;
    for (int i = 0; i < 10000; i++) {
        final ByteArrayOutputStream excelAdHoc1 = BusinessPlanInMemory.getEmptyExcel(""xlsx"");
        final ByteArrayOutputStream excelAdHoc2 = BusinessPlanInMemory.getEmptyExcel(""xlsx"");

        byte[] expectedByteArray = excelAdHoc1.toByteArray();
String expectedSha256 = hasher.sha256(expectedByteArray);
byte[] actualByteArray = excelAdHoc2.toByteArray();
String actualSha256 = hasher.sha256(actualByteArray);

if (!expectedSha256.equals(actualSha256)) {
            differentSHA256Hash = true;
            System.out.println(""ITERATION: "" + i);
            System.out.println(""EXPECTED HASH: "" + expectedSha256);
            System.out.println(""ACTUAL HASH: "" + actualSha256);
            break;
        }
    }
    Assert.assertTrue(differentSHA256Hash, ""Indeterminism did not occur"");
}

Referenced Hasher and POI code:
// HasherImpl class:
public String sha256(final InputStream stream) throws IOException, NoSuchAlgorithmException {
    final MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
    final byte[] bytesBuffer = new byte[300000]; 
    int bytesRead = -1;
    while ((bytesRead = stream.read(bytesBuffer)) != -1) {
        digest.update(bytesBuffer, 0, bytesRead);
    }
    final byte[] hashedBytes = digest.digest();
    return bytesToHex(hashedBytes);
}

Tried to eliminate indeterminism due to meta data like creation time, to no avail:
// POI BusinessPlanInMemory helper class:
public static ByteArrayOutputStream getEmptyExcel(final String fileextension) throws IOException {
    Workbook wb;

    if (fileextension.equals(""xls"")) {
        wb = new HSSFWorkbook();
    }
    else {
        wb = new XSSFWorkbook();
        final POIXMLProperties props = ((XSSFWorkbook) wb).getProperties();
        final POIXMLProperties.CoreProperties coreProp = props.getCoreProperties();
        coreProp.setCreated("""");
        coreProp.setIdentifier(""1"");
        coreProp.setModified("""");
    }

    wb.createSheet();

    final ByteArrayOutputStream excelStream = new ByteArrayOutputStream();
    wb.write(excelStream);
    wb.close();
    return excelStream;
}

The HSSF / XLS format seems not to be affected by the problem described.
Does anybody have a clue, what could be causing this, if not a bug in POI itself? Basically, the code above refers to 
https://poi.apache.org/spreadsheet/examples.htmlBusinessPlan example

Thanks for your input!
","Ok, I've found a way to reset all XSLX file entry file time attributes, according to some example found here at SO. Unfortunately, only file entries seem to be accessible by methods like via ZipFile or OPCPackage. I could not find a solution to also access and reset the folders inside the archive, which also have differing time attributes. 
So far, I didn't succeed in eliminating the differing properties of the POI-generated XLSX-archives, to get same SHA256 hashes out of two otherwise identical files, for which the differing attributes seem to be the reason.
private void resetOPCPTimeAttributes(File file)
        throws InvalidFormatException, IOException, OpenXML4JException, XmlException {

    OPCPackage opcp = ZipPackage.open(file);
    resetZipfileContentTimeAttributes(opcp.getParts());

    opcp.flush();
    opcp.close();
}

private void resetZipfileContentTimeAttributes(List<PackagePart> parts) throws InvalidFormatException {

    ArrayList<PackagePart> subParts = null;
    for (PackagePart part: parts) {

        PackageProperties props = part.getPackage().getPackageProperties();
        props.setLastModifiedByProperty("""");
        props.setCreatedProperty("""");
        props.setModifiedProperty("""");

        subParts = part.getPackage().getParts();

        while (subParts != null) {
            resetZipfileContentTimeAttributes(subParts);
        }
    }
}

Edit:
In the meantime (until I or someone else finds a solution for manipulating folder meta data inside the Zip archive), I've switched to the deep comparing solution here: Comparing XLSX files
","176","<java><apache-poi><testng><sha256>","3","1","2","2018-08-18 11:05:24","","0","4","","","","2016-08-01 12:20:34",""
"41578756","sha256 signature with OpenSSL returns unreadable string","I'm trying OPENSSL_ALGO_SHA256 on php7. Everything is looking fine without any error, but a result looks terrible. How can I fix that?
openssl_sign($plaintext, $signature, $privateKeyId, OPENSSL_ALGO_SHA256);
echo $signature;

result:

","","175","<php><sha256><php-openssl>","1","","0","2017-01-10 21:55:05","","2","","608639","","2017-01-10 21:55:05","2017-01-10 21:28:48",""
"38670045","How to aproach this in android? signed byte","I have a piece of problem that I want to achieve in android. 

The formula is

Server Seed + Client Seed (->byte[4]) + Bet Number (->byte[4])
Double SHA2-512 hash the result
Keep taking groups of 3 bytes and converting to an integer, until a value less than 16 million is found. If you run out of bytes, hash it
  again and start over.
Find the value's modulus of 1 million
The modulus is the bet result!


Which have an example code in C#
static bool VerifyBetResult(string serverSeed, int clientSeed, int betNumber,
                            long betResult, string serverSeedHash = null)
{
    Func<string, byte[]> strtobytes = s => Enumerable
        .Range(0, s.Length / 2)
        .Select(x => byte.Parse(s.Substring(x * 2, 2), NumberStyles.HexNumber))
        .ToArray();
    byte[] server = strtobytes(serverSeed);
    byte[] client = BitConverter.GetBytes(clientSeed).Reverse().ToArray();
    byte[] num = BitConverter.GetBytes(betNumber).Reverse().ToArray();
    byte[] serverhash = serverSeedHash == null ? null : strtobytes(serverSeedHash);
    byte[] data = server.Concat(client).Concat(num).ToArray();
    using (SHA512 sha512 = new SHA512Managed())
    {
        if (serverhash != null)
            using (SHA256 sha256 = new SHA256Managed())
                if (!sha256.ComputeHash(server).SequenceEqual(serverhash))
                    throw new Exception(""Server seed hash does not match server seed"");
        byte[] hash = sha512.ComputeHash(sha512.ComputeHash(data));
        while (true)
        {
            for (int x = 0; x <= 61; x += 3)
            {
                long result = (hash[x] << 16) | (hash[x + 1] << 8) | hash[x + 2];
                if (result < 16000000)
                    return result % 1000000 == betResult;
            }
            hash = sha512.ComputeHash(hash);
        }
    }
}

Using these values
serverSeed = e600f76aa6c520dff7db34559bd05cb1048b1830a07cd81844147a19048fc9be;
clientSeed = 443944;
betNumber = 0;
serverHash = ca90022ac66a6a77d8b5072e101bff505c2bff552b1b9a0785f0c438d5b6228f;

I want to find the (result % 1000000) which should be = 563383
But I got -25564 and the serverHash does not match the serverSeed when hashing the seed to sha256
Update
This is my code:
private byte[] reverse(byte[] b){
    int i = b.length - 1;
    byte newB[] = new byte[4];
    for(int x = 0; x < b.length; x++){
        newB[x] = b[i];
        i--;
    }
    return newB;
}

private byte[] strToByte(String s) {
    int len = s.length();
    byte[] data = new byte[len/2];

    for(int i = 0; i < len; i+=2){
        data[i/2] = (byte) ((Character.digit(s.charAt(i), 16) << 4) + Character.digit(s.charAt(i+1), 16));
    }
    return data;
}

private long verifyBet(){
    //MessageDigest md256 = null;
    MessageDigest md512 = null;
    try {
        //md256 = MessageDigest.getInstance(""SHA-256"");
        md512 = MessageDigest.getInstance(""SHA-512"");
    } catch (Exception e) {
        e.printStackTrace();
    }
    String //res = ""ServerSeed = "",
        sSeed = ""e600f76aa6c520dff7db34559bd05cb1048b1830a07cd81844147a19048fc9be"";
        //sHash = ""ca90022ac66a6a77d8b5072e101bff505c2bff552b1b9a0785f0c438d5b6228f"";
    int cSeed = 443944,
        num = 0;
    byte serverSeed[] = strToByte(sSeed),
        //serverHash[] = strToByte(sHash),
        clientSeed[] = reverse(ByteBuffer.allocate(4).putInt(cSeed).array()),
        betNumber[] = reverse(ByteBuffer.allocate(4).putInt(num).array());
    byte data[] = ByteBuffer.allocate(serverSeed.length + clientSeed.length + betNumber.length)
        .put(serverSeed).put(clientSeed).put(betNumber).array();
    data = md512.digest(data);
    data = md512.digest(data);
    long secret = 0;
    boolean found = false;
    while(!found){
        for(int x = 0; x <= 61; x += 3){
            long result = (data[x] << 16 | data[x+1] << 8) | data[x+2];
            if (result < 16000000){
                secret = result % 1000000;
                found = true;
            }
        }
        data = md512.digest(data);
    }
    return secret;
}

After much more research I found that byte in java is signed while the code I am basing from is calculating in unsigned byte which is why I am getting result in negative..
How can I get set of bytes in 'unsigned' form?
","After so much research and testing. I finally got it. This is the code.
private byte[] strToByte(String s) {
    int len = s.length();
    byte[] data = new byte[len/2];

    for(int i = 0; i < len; i+=2){
        data[i/2] = (byte) ((Character.digit(s.charAt(i), 16) << 4) + Character.digit(s.charAt(i+1), 16));
    }
    return data;
}

private long verifyBet(int _num){
    MessageDigest md512 = null;
    try {
        md512 = MessageDigest.getInstance(""SHA-512"");
    } catch (Exception e) {
        e.printStackTrace();
    }
    String sSeed = ""e600f76aa6c520dff7db34559bd05cb1048b1830a07cd81844147a19048fc9be"";
    int cSeed = 443944,
        num = _num;
    byte serverSeed[] = strToByte(sSeed),
        clientSeed[] = ByteBuffer.allocate(4).putInt(cSeed).array(),
        betNumber[] = ByteBuffer.allocate(4).putInt(num).array();
    byte data[] = ByteBuffer.allocate(serverSeed.length + clientSeed.length + betNumber.length)
        .put(serverSeed).put(clientSeed).put(betNumber).array();
    data = md512.digest(data);
    data = md512.digest(data);
    long secret = 0;
    boolean found = false;
    while(!found){
        for(int x = 0; x <= 61; x += 3){
            long result = ((data[x] & 0xFF) << 16 | (data[x+1] & 0xFF) << 8) | data[x+2] & 0xFF;
            if (result < 16000000){
                secret = result % 1000000;
                found = true;
                x = 62;
            }
        }
        data = md512.digest(data);
    }
    return secret;
}

","174","<android><sha256><sha512>","-2","0","1","2016-07-31 03:55:09","","0","3","6090391","","2016-07-30 13:44:05","2016-07-30 03:19:59",""
"23726117","Credentials are incorrect when using hashed passwords","I am trying to store user passwords using sha 256 encryption. I have the following method to encrypt passwords:
    public static String hashPassword(String password) {
       MessageDigest mdEnc = null;
       try {
         mdEnc = MessageDigest.getInstance(""SHA-256"");
       }  catch (NoSuchAlgorithmException e) {
        return null;
       }
       mdEnc.update(password.getBytes(), 0, password.length());

       return new BigInteger(1, mdEnc.digest()).toString(16);
}

I have the following declared in my security domain, but every time I try to login, it says the credentials are incorrect. When I don't use encryption, and remove the hashAlgorithm and hashEncoding properties, and store the passwords in the clear, authentication works fine. Can anyone see any problem with my encryption method?
<module-option name=""hashAlgorithm"" value=""SHA-256""/>
<module-option name=""hashEncoding"" value=""base64""/>

I tried to follow an example that had a straightforward encryption method:
import org.jboss.security.auth.spi.Util;

public class PasswordGenerator {
   public static void main(String[] args) {
     for (String arg : args) {
        System.out.println(new PasswordGenerator().generate(arg));
     }
    }
   private String generate(String password) {
     return Util.createPasswordHash(""SHA-256"", ""BASE64"", null, null,password);
   }
}

The problem is that it says that the jar that contains the Util class was in the module directory of the JBoss installation, but it must have been an older example because I don't see it.
","Your issue is using the BigInteger to create the hexadecimal encoding; BigInteger can be created using big endian encoding in a byte array. However, if the byte array starts with one or more 00 valued bytes, then these bytes may be stripped. Use Guava, Apache Codec or Bouncy Castle to create a hexadecimal string instead.
That said, you should use a password based key derivation function (PBKDF) such as PBKDF2 (present in the standard Java API), bcrypt or scrypt to store password ""hashes"". These output bytes as well, so if you require text, you will still need to encode it.
Also note that String.getBytes() uses the platform encoding, which you should only use to communicate with the standard. Instead, you should supply a character encoding to String.getBytes() method, e.g. use  String.getBytes(StandardCharsets.UTF_8).
","173","<java><encryption><jboss><sha256>","0","1","1","2014-05-19 07:46:56","23727398","0","3","474189","","2014-05-19 07:46:56","2014-05-18 19:41:37",""
"16915234","Unable to sign text block with Private Key","I am trying to create a digital signature of a load of clipboard text. I am:

Creating a SHA-256 hash of the plain text.
Encrypting this hash with my PRIVATE key.
Attempting to decrypt this with my PUBLIC key.

I'm doing this as I am of the understanding that anything signed with my PRIVATE key can be decrypted with my PUBLIC - such as this for verification?  Is this wrong?
I'm encrypting the hash with these methods:
                public static string EncryptText(string text, int keySize, string publicKey)
            {
                var encrypted = Encrypt(Encoding.UTF8.GetBytes(text), keySize, publicKey);
                return Convert.ToBase64String(encrypted);
            }

            public static byte[] Encrypt(byte[] data, int keySize, string publicKeyXml)
            {
                if (data == null || data.Length == 0) throw new ArgumentException(""Data are empty"", ""data"");
                int maxLength = GetMaxDataLength(keySize);
                if (data.Length > maxLength) throw new ArgumentException(String.Format(""Maximum data length is {0}"", maxLength), ""data"");
                if (!IsKeySizeValid(keySize)) throw new ArgumentException(""Key size is not valid"", ""keySize"");
                if (String.IsNullOrEmpty(publicKeyXml)) throw new ArgumentException(""Key is null or empty"", ""publicKeyXml"");

                using (var provider = new RSACryptoServiceProvider(keySize))
                {
                    provider.FromXmlString(publicKeyXml);
                    return provider.Encrypt(data, OptimalAsymmetricEncryptionPadding);
                }
            }

but passing my PRIVATE KEY down instead of my PUBLIC KEY.
Then to verify the signature, I am using:
                public static string DecryptText(string privateKey, int keySize, string text)
            {
                var decrypted = Decrypt(Convert.FromBase64String(text), keySize, privateKey);
                return Encoding.UTF8.GetString(decrypted);
            }

            public static byte[] Decrypt(byte[] data, int keySize, string publicAndPrivateKeyXml)
            {
                if (data == null || data.Length == 0) throw new ArgumentException(""Data are empty"", ""data"");
                if (!IsKeySizeValid(keySize)) throw new ArgumentException(""Key size is not valid"", ""keySize"");
                if (String.IsNullOrEmpty(publicAndPrivateKeyXml)) throw new ArgumentException(""Key is null or empty"", ""publicAndPrivateKeyXml"");

                using (var provider = new RSACryptoServiceProvider(keySize))
                {
                    provider.FromXmlString(publicAndPrivateKeyXml);
                    return provider.Decrypt(data, OptimalAsymmetricEncryptionPadding);
                }
            }

but passing down my PUBLIC KEY rather than the PRIVATE KEY. At this point, I am getting an error ""Key does not exist"".
I'm presuming this is the case because the PRIVATE KEY contains the relevant key information for the PUBLIC KEY so it can decode this one-way.
How can I sign a block of text in this way that allows me to distribute a signature with it, that can be decrypted by anybody who knows my PUBLIC KEY? 
","After much trawling, I found this page:
http://juzzbott.com.au/blog/signing-and-verifying-data-within-csharp
","173","<public-key-encryption><signing><private-key><sha256><public-key>","0","0","1","2013-06-04 20:35:52","","0","","","","","2013-06-04 10:15:29",""
"50709293","Why OpenSSL in C++ produces different output than command line","I looked up some code samples for OpenSSL in order to hash some content using SHA256 and sign it using an RSA key - I also need to encode the resulting string to hex. I used this source for reference: https://gist.github.com/irbull/08339ddcd5686f509e9826964b17bb59
This is the higher level method that accepts the message
std::string Sign(const std::string& key, const 
std::string& message, bool bPrivate)
{


    RSA* rsa = CreateRSAFromString(key, isPrivate);

    if(!rsa)
    {
        // Print errors here...
        return """";
    }

    unsigned char* outMessage;           
    size_t outMessageLength;

    RSASign(rsa, 
            (unsigned char*) message.c_str(), 
            message.length(), 
            &outMessage, 
            &outMessageLength);


    std::string myString(reinterpret_cast<const char*>(outMessage), outMessageLength);

    // Convert the string to hex
    std::string hexOutMessage = ToHex(myString);
    free(outMessage);
    return hexOutMessage;
}

The actual RSA sign method appears pretty straightforward. From my understanding, this should first hash the content using SHA256 then proceeds to encrypting with RSA.
bool RSASign(RSA* rsa,
        const unsigned char* msg,
        size_t msgLength,
        unsigned char** outMsg,
        size_t* outMsgLength)
{ 
EVP_MD_CTX* context = EVP_MD_CTX_create();

EVP_PKEY* privateKey = EVP_PKEY_new(); 
EVP_PKEY_assign_RSA(privateKey, rsa);  


if(EVP_DigestSignInit(context, NULL, EVP_sha256(), NULL, privateKey) <= 0)
{
    return false;   // Initialize the digest failed
}

if (EVP_DigestSignUpdate(context, msg, msgLength) <= 0) 
{
    return false;   // Adding the message failed
}

if (EVP_DigestSignFinal(context, NULL, outMsgLength) <= 0)
{
    return false;   // Finalization failed, cannot create signature
}

*outMsg = (unsigned char*)malloc(*outMsgLength);
if(EVP_DigestSignFinal(context, *outMsg, outMsgLength) <= 0)
{
    return false;   // Error creating encoded message
}
EVP_MD_CTX_destroy(context);
// End of context

return true;
}

For completeness, this is where the actual creation of the RSA object happens:
RSA* CreateRSAFromString(const std::string& key, bool isPrivate)
{
RSA* rsa = NULL;
BIO* keybio = BIO_new_mem_buf((void*)key.c_str(), -1);  

if(!keybio)
{
    return NULL;
}

rsa = isPrivate ? PEM_read_bio_RSAPrivateKey(keybio, NULL, NULL, NULL):
                  PEM_read_bio_RSA_PUBKEY(keybio, NULL,NULL, NULL);
return rsa;
}

I want to verify if my process is correct, because when outputting the hex result, I get totally different results between the commandline and C++. Specifically, the equivalent command I am trying to achieve is the following:
dgst -sha256 -sign certifcate.pem -out signed.txt inputFile.json

If I can ensure the OpenSSL side of things is correct, then I can probably deduce it is my conversion to hex that introduces the discrepancy. No errors or failures were outputted on the OpenSSL side of things.
","","172","<c++><encryption><openssl><rsa><sha256>","0","","0","2018-06-05 21:37:02","","5","","","","","2018-06-05 21:37:02",""
"50599799","Ruby: difference between hexencode and hexdigest","Today I read the documentation on Rubies hexdigest method, e.g.
Digest::SHA256.hexdigest('123')
=> ""a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3""

The documentation says:

Returns the hex-encoded hash value of a given string. This is almost equivalent to Digest.hexencode(Digest::Class.new(*parameters).digest(string)).

Highlighting is by me: What does almost mean here? How is it different?
Of course my example string above yields the same result:
Digest.hexencode(Digest::SHA256.digest('123'))
=> ""a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3""

Can anyone point me to the cases where the result can be different? I want to understand whether the ""almost"" points to an important difference or if the difference is irrelevant for me.
","As in the module Digest::Instance described hexdigest(string) return hexencode_str_new(value);. In the module Digest described hexencode(string) return hexencode_str_new(value); too. So, there are no differences if use same instance type. ""almost"" because in the documentation example can be Digest::SHA512 or other.
","172","<ruby><sha256><digest>","1","0","1","2018-05-30 09:08:36","","2","","","","","2018-05-30 08:24:52",""
"37619638","Signing URL in c++ for google bucket upload","I need to upload an image to google cloud bucket using cURL in c++.
google is  not providing c++ sdk support.As per their example and pseudo code  we have to do the following process;

Blockquote

   Policy = Base-64-Encoding-Of(PolicyDocument)
   MessageDigest = SHA256withRSA(SecretKey, Policy)
   Signature = Base64-Encoding-Of(MessageDigest)

As per their process, I have done the base64 encoding,but I couldn't find anything how to perform SHA256withRSA ?
Kindly help me for the SHA256withRSA in c++ . 
","You can generate signatures like this with the openssl library or the command line utility usually packaged with it.
So with the understanding that I have never worked with Google Cloud Platform, and am only trying to expand on their documentation, to do this by hand you'd need
1) a .pem version of your Google Cloud credentials.  lets call it private.pem
Use the process shown at https://cloud.google.com/storage/docs/authentication#converting-the-private-key
2) a policy document.  Create that with a text editor, following the example given in your original URL
 vi policy.txt

3) a base64 encoding of that policy document.  use the Linux tool base64 to make that.  You'll get a long string from that.  Lets call that STRINGA.  Lets say its saved in STRINGA.txt
base64 < policy.txt > STRINGA.txt

4) a signature generated from STRINGA
openssl sha -sha256 -sign private.pem < STRINGA.txt | base64 >SIGNED.txt
5) do a POST from a html form that includes
<input type=""hidden"" name=""policy"" value=""Put STRINGA string here"">
<input type=""hidden"" name=""signature"" value=""Put SIGNED string here"">

similar to what's given as an example in your original URL
https://cloud.google.com/storage/docs/xml-api/post-object#usage_and_examples
I took their example base64 encoded policy document from their HTML code and note with interest that they use \r\n as a line end on the interior but there is no line end after the final } bracket.
","171","<c++><rsa><google-cloud-storage><sha256><signing>","0","1","1","2016-06-08 17:04:08","37620411","9","","3471712","","2016-06-03 16:54:00","2016-06-03 16:46:37","2016-06-03 18:10:10"
"46232228","Android Studio genegare SHA2 APK","I can generate signed SHA1 APK on Android Studio and also can convert to SHA256 APK using jarsigner and zipalign 4, which is a 2 steps solution.
Is there any way to build SHA256 APK, same as SHA1 with android studio or any gradlew command depends on gradle configutaion.
Thanks in advance
","","170","<android><android-studio><sha256>","1","","0","2017-09-15 05:28:17","","3","","","","","2017-09-15 05:28:17",""
"56364643","What's the difference between a Docker image's Image ID and its Digest?","This has been surprisingly confusing for me. I thought Docker's Image ID is its SHA256 hash. However, apparently the result from docker image ls --digests (listed under the column header DIGEST) is different from the IMAGE ID of that image.
For example
docker image ls --digests alpine
REPOSITORY          TAG                 DIGEST                                                                    IMAGE ID            CREATED             SIZE
alpine              latest              sha256:769fddc7cc2f0a1c35abb2f91432e8beecf83916c421420e6a6da9f8975464b6   055936d39205        2 weeks ago         5.53MB

while 
docker image ls --no-trunc
REPOSITORY                                             TAG                 IMAGE ID                                                                  CREATED             SIZE
...
alpine                                                 latest              sha256:055936d3920576da37aa9bc460d70c5f212028bda1c08c0879aedf03d7a66ea1   2 weeks ago         5.53MB

Clearly sha256:055936d3920576da37aa9bc460d70c5f212028bda1c08c0879aedf03d7a66ea1 (IMAGE ID) and sha256:769fddc7cc2f0a1c35abb2f91432e8beecf83916c421420e6a6da9f8975464b6 (DIGEST) are not the same value. But why? What's the purpose of having two different sha256 hashes of the same image. How are they calculated, respectively?
I was confused by this when reading the book Docker Deep Dive, and I haven't been able to find a clear answer either in the book or online.
","Thanks for michalk's comment. The short answer is:

The ""digest"" is a hash of the manifest, introduced in Docker registry v2.
The image ID is a hash of the local image JSON configuration.

","169","<docker><hash><sha256>","3","3","1","2019-05-31 08:15:44","56391252","2","","","","","2019-05-29 16:07:51",""
"51818162","Perl SHA-256 algorithm generates output different from the equivalent Java","

I have the following Java code:
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;

public class MyClass {

    public static void main(String args[]) {

        byte[] salt = {
             84,  65,  -51,  83,   -4,  -17,  -32,  61,
            -26,  33, -106, -81,  -14,   70,  -30,  59,
             41, -19,   -1,  19, -104, -100,  -31,  31,
             57,  -6, -115, -99,    0,   38, -123, -11
        };

        byte[] password = { 100, 112, 107, 57, 52, 110, 50 };

        try {

            MessageDigest messageDigest;

            messageDigest = MessageDigest.getInstance(""SHA-256"");

            messageDigest.reset();
            messageDigest.update(salt);

            byte[] hash = messageDigest.digest(password);

            for (int i = 1; i < 1000; i++)
            {
                messageDigest.reset();
                hash = messageDigest.digest(hash);
            }

            StringBuffer stringBuffer = new StringBuffer(hash.length * 2);

            for (int i = 0; i < hash.length; i++)
            {
                stringBuffer.append(Character.forDigit(hash[i] >> 4 & 0xF, 16));
                stringBuffer.append(Character.forDigit(hash[i] & 0xF, 16));
            }

            System.out.println(""HashArray: "" + Arrays.toString(hash));
            System.out.println(""HashString: "" + stringBuffer.toString());
        }
        catch (NoSuchAlgorithmException e) {
          e.printStackTrace();
        }
    }
}

The output is
HashArray: [-127, -38, -46, -2, 51, -2, -83, -42, 3, 83, -78, -72, -115, -28, 108, 58, -76, -35, -13, 33, 63, -96, 104, 101, -76, 23, 102, -28, -60, 4, 85, 82]

and
HashString: 81dad2fe33feadd60353b2b88de46c3ab4ddf3213fa06865b41766e4c4045552

I tried to translate the Java code to Perl, but I have a understanding problem. In Java, I use two arrays to generate the hash. If I use the same arrays in Perl, I don't get the same result.
Here is my Perl code:
use strict;
use warnings;

use Digest::SHA 'sha256';

my @salt = (
     ""84"",  ""65"",  -""51"",  ""83"",   ""-4"",  ""-17"",  ""-32"",  ""61"",
    ""-26"",  ""33"", ""-106"", ""-81"",  ""-14"",   ""70"",  ""-30"",  ""59"",
     ""41"", ""-19"",   ""-1"",  ""19"", ""-104"", ""-100"",  ""-31"",  ""31"",
     ""57"",  ""-6"", ""-115"", ""-99"",    ""0"",   ""38"", ""-123"", ""-11""
);

my @password = ( ""100"", ""112"", ""107"", ""57"", ""52"", ""110"", ""50"" );

my $alg = 256;
my $sha = Digest::SHA->new($alg);

$sha->add(@salt);
$sha->add(@password);

for ( my $i = 1; $i < 1000; $i++ ) {
    $sha->add(@password)
}

my $output = $sha->hexdigest;
print ""\nHash: $output\n"";

Output is
Hash: 3883ae8f7438cc7e8fac86d25aa5789c4434294a70ea13d5e8f547fc7a8e45c2

Can someone explain how to get the Perl code to produce the same output as the Java?
","Two problems:

The Java version works with bytes, the Perl version with strings of digits. Use pack to convert the strings to their byte equivalents.
In the Java version, you are applying the hash to the hash computed so far, in the Perl code, you just hash the same value again and again.

 
#!/usr/bin/perl
use warnings;
use strict;

use Digest::SHA 'sha256';

my @salt = (84, 65, -51, 83, -4, -17, -32, 61, -26, 33, -106, -81,
            -14, 70, -30, 59, 41, -19, -1, 19, -104, -100, -31, 31,
            57, -6, -115, -99, 0, 38, -123, -11);

my @password = (100, 112, 107, 57, 52, 110, 50);

my $alg = 256;
my $sha = Digest::SHA->new($alg);

$sha->add(pack 'c*', @salt);
$sha->add(pack 'c*', @password);

$sha->add($sha->digest) for 1 .. 999;

my $output = $sha->hexdigest;
print ""\nHash: $output\n"";

","168","<java><perl><sha256>","0","2","1","2018-08-13 11:30:45","51821343","6","","10192031","","2018-08-13 09:53:43","2018-08-13 08:30:36",""
"16205633","SHA_256 functions corrupting memory space","I've been trying to use the SHA_256 functions in sha256.h on a FreeBSD 9.1 system but it seems to be corrupting memory space of my program causing all kinds of manic behavior. I wrote up a quick program to just to play with those functions and still am having problems.
In the example below, int i is changed when I call SHA256_Init(), as shown by the output from the printf() statements surrounding it.
This is what I get running the code.
$ ./miner ""hello world""  
i = 0  
i = 32  
0000000032      9010a9cf81ce2c28a642fd03ddf6da5790c65c30cd4a148c4257d3fe488bacc7

Why is this value changing to 32? Am I missing something? The code is below...
#include <sha256.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>

#define DIFFICULTY 0

int main(int argc, const char **argv) {
    uint nonce, i, j;
    SHA256_CTX ctx;
    size_t arglen;
    unsigned char digest[32];
    char * data;

    if(argc < 1) exit(1);
    arglen = strlen(argv[1]);
    data = malloc(arglen + 1);
    char digestStr[65];
    i = 0;
    do {
        nonce = i;
        strncpy(data, argv[1], arglen + 1);

        printf(""i = %i\n"", i);
        SHA256_Init(&ctx);
        printf(""i = %i\n"", i);

        SHA256_Update(&ctx, data, arglen);
        SHA256_Update(&ctx, (unsigned char *) &nonce, sizeof(nonce));
        SHA256_Final(digest, &ctx);
        SHA256_End(&ctx, digestStr);
        printf(""%010i\t%s\n"", i, digestStr);

        j = 0;
        while(j < 32 && digest[j] == '\0') {
            j++;
        }
        i++;
    } while(j < DIFFICULTY);

    free(data);
    return 0;
}

","I just had this exact same problem and solved it.
The issue is that your are including a different header  in your code than the SHA2 library you linked into your application is using.
In my case the SHA256_CTX struct was a different size in the openSSL library.  The openSSL library's struct was 8 bytes bigger than the struct length in the  file.
The function SHA256_Init(&ctx) does a memset on the SHA256_CTX struct which then corrupts 8 extra random bytes after the struct.  I say random because it will do different things in a release vs debug build because the optimizing compiler will move your variables around.
","167","<c><sha256><message-digest>","0","1","1","2013-12-05 21:06:43","","3","","","","","2013-04-25 02:56:29",""
"48630814","Why do I get incorrect values when implementing HMAC-SHA256?","I'm trying to make a function in Rust that will return a HMAC-SHA256 digest. I've been working from the description at Wikipedia and RFC 2104. 
I've been struggling with returning the correct HMAC. I'm using ring for the SHA256 digests but no matter what I try, I can't seem to get the right result. I suspect it might have something to do with .as_ref().to_vec() conversions. Even if that's true, I don't know how to continue from that. Not everything from RFC 2104 is implemented in the following code, but it highlights my issue.
extern crate ring;
use ring::{digest, test};

pub fn hmac(k: Vec<u8>, mut m: Vec<u8>) -> Vec<u8> {
    // Initialize ipad and opad as byte vectors with SHA256 blocksize
    let ipad = vec![0x5C; 64];
    let opad = vec![0x36; 64];
    // iround and oround are used to seperate the two steps with XORing
    let mut iround = vec![];
    let mut oround = vec![];

    for count in 0..k.len() {
        iround.push(k[count] ^ ipad[count]);
        oround.push(k[count] ^ opad[count]);
    }

    iround.append(&mut m); // m is emptied here
    iround = (digest::digest(&digest::SHA256, &iround).as_ref()).to_vec();
    oround.append(&mut iround); // iround is emptied here
    oround = (digest::digest(&digest::SHA256, &oround).as_ref()).to_vec();
    let hashed_mac = oround.to_vec();

    return hashed_mac;
}

#[test]
fn test_hmac_digest() {
    let k = vec![0x61; 64];
    let m = vec![0x62; 64];
    let actual = hmac(k, m);
    // Expected value taken from: https://www.freeformatter.com/hmac-generator.html#ad-output
    let expected = test::from_hex(""f6cbb37b326d36f2f27d294ac3bb46a6aac29c1c9936b985576041bfb338ae70"").unwrap();
    assert_eq!(actual, expected);
}

These are the digests:
Actual = [139, 141, 144, 52, 11, 3, 48, 112, 117, 7, 56, 151, 163, 65, 152, 195, 163, 164, 26, 250, 178, 100, 187, 230, 89, 61, 191, 164, 146, 228, 180, 62]

Expected = [246, 203, 179, 123, 50, 109, 54, 242, 242, 125, 41, 74, 195, 187, 70, 166, 170, 194, 156, 28, 153, 54, 185, 133, 87, 96, 65, 191, 179, 56, 174, 112]

","As mentioned in a comment, you have swapped the bytes for the inner and outer padding. Refer back to the Wikipedia page:
o_key_pad = key xor [0x5c * blockSize]   //Outer padded key
i_key_pad = key xor [0x36 * blockSize]   //Inner padded key

Here's what my take on the function would look like. I believe it has less allocation:
extern crate ring;

use ring::{digest, test};

const BLOCK_SIZE: usize = 64;

pub fn hmac(k: &[u8], m: &[u8]) -> Vec<u8> {
    assert_eq!(k.len(), BLOCK_SIZE);

    let mut i_key_pad: Vec<_> = k.iter().map(|&k| k ^ 0x36).collect();
    let mut o_key_pad: Vec<_> = k.iter().map(|&k| k ^ 0x5C).collect();

    i_key_pad.extend_from_slice(m);

    let hash = |v| digest::digest(&digest::SHA256, v);

    let a = hash(&i_key_pad);

    o_key_pad.extend_from_slice(a.as_ref());

    hash(&o_key_pad).as_ref().to_vec()
}

#[test]
fn test_hmac_digest() {
    let k = [0x61; BLOCK_SIZE];
    let m = [0x62; BLOCK_SIZE];
    let actual = hmac(&k, &m);

    // Expected value taken from: https://www.freeformatter.com/hmac-generator.html#ad-output
    let expected = test::from_hex(""f6cbb37b326d36f2f27d294ac3bb46a6aac29c1c9936b985576041bfb338ae70"").unwrap();
    assert_eq!(actual, expected);
}

","166","<rust><sha256><hmac>","2","2","1","2018-02-06 02:59:10","48634777","4","","155423","","2018-02-05 20:34:59","2018-02-05 20:19:05",""
"28571322","How to create the smallest file possible that contains a SHA256 hash?","I'm using Powershell 2.0.
I have a variable that contains a single SHA256 hash value (which corresponds to the hash of a file, here $filename):
$filename = ""C:\aaa\aaa.exe""
$sha256Value = ... # The hash for $filename

I want to save that value to a file. Here the first solution I tried:
$sha256Value | Out-File -FilePath ($filename + "".sha256"")

The size of the file (not on disk) is 134 bytes. With this command, it generates a line break in the .sha256 files.
The second solution I tried:
[IO.File]::AppendAllText(($filename + "".sha256""),$sha256Value,[System.Text.Encoding]::UTF8)

With the second option, the file size (not on disk) is 67 bytes and it also doesn't contain a line break.
Also just by removing the UTF8 encoding, I can get the file size down to 64 bytes.
Is there any other solution that would decrease the file size? Also, is it possible to get the same file size for the first solution (i.e. with Out-File)?
","You can write the bytes directly:
[text.encoding]::utf8.getbytes($sha256Value) | set-content ($filename + "".sha256"") -encoding byte

","166","<powershell><hash><powershell-2.0><line-breaks><sha256>","0","2","1","2015-02-17 21:36:35","","6","","2419003","","2015-02-17 21:27:40","2015-02-17 21:21:11",""
"53563027","Hashing with Google Guava in Java outputting with lowercase characters while online hashing site outputs in uppercase","I'm hashing a password in Java using google's Hashing. 
password = Hashing
        .sha256()
        .hashString(input, StandardCharsets.UTF_8)
        .toString();

When I pass any text to that line, it hashes and outputs everything with lowercase characters, for example, if I pass ""foo"", the value of password becomes:
2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae

However, if I use this site to hash ""foo"", the value it outputs is
2C26B46B68FFC68FF99B453C1D30413413422D706483BFA0F98A5E886266E7AE

As far as I can tell that's just the exact same password except with uppercase letters instead of lowercase.
What's causing those to output different values, and how can I get guava to output with uppercase letters (without just calling toUpperCase, unless that's really the only way)
","The main reason why Guava is making the result string in lower case, is because of the implementation of: com.google.common.hash.HashCode.toString() method.
You can simply call toUpperCase() method, from String class, on your result hash string value:
password = Hashing
        .sha256()
        .hashString(input, StandardCharsets.UTF_8)
        .toString()
        .toUpperCase();

","166","<java><hash><guava><sha256>","0","5","1","2018-11-30 18:44:25","","3","1","","","","2018-11-30 18:33:03",""
"46488363","Wrong result after hasing string with SHA-256","I am trying to hash a string using SHA-256 but the result is wrong and contains special characters.
Code:
String password = ""test"";
MessageDigest md = MessageDigest.getInstance(""SHA-256"");
byte[] sha256Result = md.digest(password.getBytes(StandardCharsets.UTF_8));
String result = new String(sha256Result, StandardCharsets.UTF_8);

Result string:
��Ё�L}e�/��Z���O+�,�]l��

","The hashing procceed correctly, but the result is consisted of array of bytes. To make it readable, use the StringBuffer. As example of conversion, take a look on the example on Mkyong's webpage.
StringBuffer sb = new StringBuffer();
    for (int i = 0; i < sha256Result.length; i++) {
    sb.append(Integer.toString((sha256Result[i] & 0xff) + 0x100, 16).substring(1));
}

","164","<java><android><string><character-encoding><sha256>","0","1","2","2018-06-08 07:48:48","46488473","1","4","3764965","","2018-06-08 07:48:48","2017-09-29 11:58:59","2017-09-30 10:22:52"
"46488363","Wrong result after hasing string with SHA-256","I am trying to hash a string using SHA-256 but the result is wrong and contains special characters.
Code:
String password = ""test"";
MessageDigest md = MessageDigest.getInstance(""SHA-256"");
byte[] sha256Result = md.digest(password.getBytes(StandardCharsets.UTF_8));
String result = new String(sha256Result, StandardCharsets.UTF_8);

Result string:
��Ё�L}e�/��Z���O+�,�]l��

","I think the way you hash it is ok. If you want it as a hex string after:
import javax.xml.bind.annotation.adapters.HexBinaryAdapter;
String hex = (new HexBinaryAdapter()).marshal(md.digest(password.getBytes(StandardCharsets.UTF_8)));

","164","<java><android><string><character-encoding><sha256>","0","1","2","2018-06-08 07:48:48","46488473","1","4","3764965","","2018-06-08 07:48:48","2017-09-29 11:58:59","2017-09-30 10:22:52"
"35003883","Code Signed Application Generates Warning Message","Being fully aware of the depreciation of SHA1 and having access to an SHA256 certificate (issued by Comodo) which I have installed to my system and am using to code-sign project executables (in this case, the project executable is an INNO compiled setup file), I am continuing to receive complaints from users about seeing this warning message : 

This is the command that I am using to code sign with (I have added the path to SignTool.exe to the system Path variable so I do not qualify it completely when I call it; Also, the command is in a .bat file):
SignTool.exe sign /v /a /fd sha256 /du ""http://www.foo.bar"" %1

My first guess is that I am not using the SignTool sign command correctly. I know that the certificate is installed because I have seen it when I looked with the Certmgr.msc. More evidence that the code sign is successful : 

Why is this still happening?
","I'm not sure what the problem is specifically, but you can verify the signature after signing using SignTool.exe
I use it with the following arguments:
signtool.exe verify /pa /v [pathToSignedFile]
","163","<windows><sha1><sha256><codesign>","2","-1","1","2017-03-08 16:43:50","","0","","1165477","","2016-01-25 22:49:43","2016-01-25 22:44:07",""
"34150652","Hashing a list of email addresses in SQL","I have a list of around 40,000 email addresses. I need to hash them using SHA-256 & generate an individual hash for each email address. I've been told that I can do this via SQL but after a lot of Googling & trying to guess my way through it as a layperson I haven't had any success.
","In many SQL variants including MySQL, Redshift, Postgresql you can do this using the md5() or FUNC_SHA1() functions.
For example using md5:
SELECT md5(email) AS uid
from schema.table;

In PHP you can use the md5() or sha1() functions
sha1($email);

","163","<sql><hash><sha256>","1","2","1","2019-08-16 21:04:05","","2","","1839439","","2019-08-16 21:04:05","2015-12-08 07:53:34",""
"49858254","Make server use SHA256 even if Client does not send Signature Algorithm in the request","Am using a .net application where the client connects to our server using TCP SSL Stream. Application is using .net 4.5 and running as a windows service in Windows server 2012 R2.
We are using SHA256 certificate and Client is not able to negotiate with strict TLS 1.2. was getting ""client and server cannot communicate, because they do not possess a common algorithm - SSLStream""
stream.AuthenticateAsServer(serverCertificate, false, SslProtocols.Tls12, True);

Thanks to Steffen Ullrich for this answer which helped me troubleshoot further.
When we use SHA1 Certificate Client is able to successfully negotiate with TLS 1.2
from RFC

If the client does not send the signature_algorithms extension, the
  server MUST do the following:
If the negotiated key exchange algorithm is one of (RSA, DHE_RSA,
  DH_RSA, RSA_PSK, ECDH_RSA, ECDHE_RSA), behave as if client had sent
  the value {sha1,rsa}.

My client is supporting SHA256 but they are not sending signature algorithm as part of the TLS 1.2 request and server by default negotiates with SHA1 and not SHA256.
SHA256,SHA1 works fine with TLS 1.0
SHA1 works with strict TLS 1.2
SHA256 not working with strict TLS 1.2

So my question Is there a way i can make the server to negotiate using SHA256 also even if my client does not send signature algorithm?
","","163","<.net><ssl><tls1.2><windows-server-2012-r2><sha256>","0","","0","2018-04-16 14:36:13","","6","","1481690","","2018-04-16 14:36:13","2018-04-16 13:14:16",""
"42063110","Converting a Password Hashing Script from GO to Nodejs","I have a hard time converting an existing GO script to NodeJS. It basically a hashing script which takes in 2 arguments agreedUponKey and salt and returns a password hash.
package main

import (
    ""fmt""
    ""hash""
    ""crypto/sha256""
)

func main() {
    var agreedUponKey string
    var salt string
    var h hash.Hash

    agreedUponKey = ""giri""
    salt = ""XYZabc987""

    h = sha256.New()
    h.Write([]byte(agreedUponKey))
    h.Write([]byte(salt))

    sha256Sum := h.Sum(nil)
    print(""calculated passwordHash:"", sha256Sum)

    var hexHash = make([]byte, 0, 64)
    for _, v := range sha256Sum {
        hexHash = append(hexHash,[]byte(fmt.Sprintf(""%02x"", v))...)
    }

    print(""calculated passwordHash:"", string(hexHash))
}

I have managed to code up to the below point 
var crypto = require('crypto');
var convert = require('convert-string');

function test(pwd,key) {
  console.log(""Password :"",pwd);
  var byteKey=convert.stringToBytes(key);
  var bytePwd=convert.stringToBytes(pwd);    
  var hash = crypto.createHash('sha256').update(byteKey+bytePwd).digest('base64');
  console.log(""hashcode of password :"",hash);
};
test(""XYZabc987"",""giri"");

The 2 hashes are different. Any help would be greatly appreciated. I am a Noob in GO Lang
Please Note : You can use https://play.golang.org/ to compile and run the Go Script
","var crypto = require('crypto');
function test(pwd, key) {
    var input = key.concat(pwd)
    var hash = crypto.createHash('sha256').update(input).digest('hex');
    console.log(""hashcode of password :"", hash);
};
test(""XYZabc987"", ""giri"");

You could verify the correct hash using this online tool.
","161","<node.js><go><hash><passwords><sha256>","0","1","1","2017-02-06 09:43:48","42064617","2","","629685","","2017-02-06 09:05:11","2017-02-06 08:16:16",""
"52295989","Fetching and hashing a file from a URL in a Zapier code action in JavaScript","I was looking for a way to hash files manipulated in a Zapier code action and since Zapier does not provide such crypto transforms by default, I went on to implement it in Javascript. 
The code below does this:

fetch the file from a public URL 
hash said file using sha256
return the hash in the output



const crypto = require('crypto');
    
return fetch(inputData.fileUrl)
  .then((res)=>{
    console.log(res.ok);
    console.log(res.status);
    console.log(res.statusText);
    return res.buffer()
  })
  .then((buffer)=>{
    const hash = crypto.createHash('sha256');
    hash.update(buffer);
    callback (null, {""hashValue"":hash.digest('hex')});
  })
  .catch(callback)



I am basically calling 'fetch' on the S3 URL, returning the result as a buffer() call on the response object. I then create a 'crypto' object from said buffer, from which I create a sha256 hash and hex digest.
Note: 
Javascript code actions in Zapier can only take strings as input parameters, so any files you want to hash need to transit through a storage space (e.g. AWS S3 bucket) that has a publicly accessible URL. If you manipulate private/sensitive data, you may want to delete the file in a subsequent action in your zap. Beware also of non ascii characters in the URL (e.g. fetching from AWS S3 returns a 403 Forbidden error if your URL includes such characters as '€')
I hope Zapier users will find this useful, e.g. to automate workflows where you need to ensure file data integrity (accounting, invoicing ...)
","","160","<javascript><amazon-s3><fetch><sha256><zapier>","2","","0","2018-09-13 23:07:49","","5","","6625131","","2018-09-13 23:07:49","2018-09-12 13:06:52",""
"37442354","WCF Client error using 'Basic128Sha256Rsa15'","I get the following error when moving from using SHA1 to SHA256 encryption via my WCF client-side config file. This is for a .NET 3.5 client running on a Windows 2003 server. 
I've implemented changes related to using SHA256 for SAML data found here
Snippet from my app.config:
  <customBinding>
    <binding name=""HAServiceBrokerSOAP11BindingHewitt"">
      <security defaultAlgorithmSuite=""Basic128Sha256Rsa15""

Error message I receive in client error log:
System.InvalidOperationException: The binding ('CustomBinding', 'http://tempuri.org/') has been configured with a security algorithm suite 'Basic128Sha256Rsa15' that is not supported
","I finally got things working. I'll post my resolution in case others land here via a search. 
One thing I tried that didn't work for me but may work for someone else is to use the Common Language Runtime version 4.0. CLR version 2.0 is what is used with .NET 3.5 assemblies. Here are the lines I added to my config file just after the  element: 


  <startup useLegacyV2RuntimeActivationPolicy=""true"">
        <supportedRuntime version=""v4.0""/>
        <supportedRuntime version=""v2.0.50727""/>
   </startup>



What finally worked for me was to upgrade the code from VS 2008 .NET 3.5 to VS 2010 .NET 4.0 and recompile the entire assembly. .NET 4.0 is not supported in VS 2008. .NET 4.0 assemblies use the CLR 4.0 version.
","158","<wcf><sha256>","0","1","1","2016-07-25 21:22:29","38577648","0","","","","","2016-05-25 16:01:26",""
"22902823","I need some help against the money mis in sha256","Having a private ECDSA key 18E14A7B6A307F426A94F8114701E7C8E774E7F9A47E2C2035DB29A206321725
1 - Take the corresponding public key generated with it 0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6
2 - Perform SHA-256 hashing on the public key 600FFE422B4E00731A59557A5CCA46CC183944191006324A447BDB2D98D4B408
but when I run a sha256 on 0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6
I don't get
600FFE422B4E00731A59557A5CCA46CC183944191006324A447BDB2D98D4B408
What I get is
32511e82d56dcea68eb774094e25bab0f8bdd9bc1eca1ceeda38c7a43aceddce
what am I doing wrong?   
","You have to:

Hash with SHA-256 the public key: 0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6
Hash with RIPEMD-160 the key: 600FFE422B4E00731A59557A5CCA46CC183944191006324A447BDB2D98D4B408

Which should result in 010966776006953D5567439E5E39F86A0D273BEE.

","156","<key><sha256><bitcoin><ecdsa>","0","0","1","2014-04-09 15:52:28","22925519","0","","1413338","","2014-04-09 15:52:28","2014-04-07 02:50:13",""
"36159096","Convert a column value in SHA256 in bash","I have a big csv file delimited with ""|"". How do I encrypt the 2nd column value into SHA256 using bash for full file.
Thanks in advance
","for data in cat test.txt; do d1=$(echo $data | cut -d ""|"" -f1); d2=$(echo $data | cut -d ""|"" -f2 | sha256sum); rest=$(echo $data | cut -d ""|"" -f3-); echo ""$d1|$d2|$rest"";done >> new_file.txt
","155","<sha256>","0","0","1","2016-03-22 23:59:06","","1","","","","","2016-03-22 15:50:22",""
"18716648","Calculating the b- value in a DKIM string in VB.NET","I am trying to calculate the b= string in the DKIM-Signature for a e-mail message. However I am getting no luck with the methodes available.
I have created a RSACryptoServiceProvider and imported a private key using the fromXMLString option.
creating a signature from a hash and verifying it works fine.
Dim hashdata As Byte() = Encoding.ASCII.GetBytes(headers.ToString)
Dim signature As Byte() = RSA.SignData(hashdata, CryptoConfig.MapNameToOID(""SHA256""))
If RSA.VerifyData(hashdata, ""SHA256"", signature) = True Then
    headers.AppendLine(""Signature: RSA-SHA256 "")
Else
    headers.AppendLine(""Signature: None"")
End If

The above code verifies the signature, but the DKIM does not pass valid as a whole.
I have seen a example of bouncyCastle ""
ISigner sig = SignerUtilities.GetSigner(""SHA256WithRSAEncryption"");

But I cant use this in my programming. 
Can someone help me on the way on how to properly sign a canonicalized header for dkim purpose ?
","","155","<vb.net><rsa><sha256><dkim>","1","","0","2013-09-10 10:36:01","","0","","","","","2013-09-10 10:36:01",""
"45046140","In the pkcs11interop project code, I see CKM_ECDSA_SHA256, but in the nuget package I added to my solution its not there","I need to use ECDSA with sha256 with a hsm and I am using c# with the http://www.pkcs11interop.net/ wrapper. The Github code has CKM_ECDSA_SHA256, but not the 3.3.0 release even though the release is the latest as of Jan 24 and the enum was added much earlier.
Why cannot I access the enum? I could use CKM_ECDSA and hash before signing, but that would defeat the purpose of using the hsm for its speed.
","CKM_ECDSA_SHA256 enum member was added on 1 March 2017 as a part of larger patch that added support for PKCS#11 v2.40. It was not present in Pkcs11Interop v3.3.0 but it is present in master branch on GitHub which is yet to be released as Pkcs11Interop v4.0.0.
Meanwhile you can use overloaded method which accepts ulong instead of CKM and define missing constant in your code:
const ulong CKM_ECDSA_SHA256 = 0x00001044;

","155","<c#><sha256><pkcs#11><ecdsa><pkcs11interop>","1","1","1","2017-07-12 17:10:34","45051663","0","","","","","2017-07-11 23:45:53",""
"44047558","java AES Decryption code in VB.net","I have pretty working AES encryption/decryption code in java,
but for some reason I needed to migrate it to VB.net but I have no idea how to do that
java code
public class DECODECLASS {
public static final int CHUNK_SIZE = 6144;
public static final String PKCS7_PADDING = ""AES/CBC/PKCS7Padding"";
public static final int STARTING_LOCATION = 0;
public static final int STREAM_FINISH_LOCATION = -1;

public void encrypt(File inputFile, File outputFile) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, IOException, IllegalBlockSizeException, BadPaddingException {
    FileInputStream fis = new FileInputStream(inputFile);
    FileOutputStream fos = new FileOutputStream(outputFile);
    Cipher cipher = Cipher.getInstance(PKCS7_PADDING);
    byte[] keyBytes = new byte[32];
    System.arraycopy(MessageDigest.getInstance(""SHA-256"").digest(), STARTING_LOCATION, keyBytes, STARTING_LOCATION, keyBytes.length);
    cipher.init(1, new SecretKeySpec(keyBytes, ""AES""), new IvParameterSpec(new byte[16]));
    CipherInputStream inputStream = new CipherInputStream(fis, cipher);
    byte[] data = new byte[CHUNK_SIZE];
    while (true) {
        int count = inputStream.read(data, STARTING_LOCATION, CHUNK_SIZE);
        if (count != STREAM_FINISH_LOCATION) {
            fos.write(data, STARTING_LOCATION, count);
        } else {
            fis.close();
            fos.close();
            inputStream.close();
            return;
        }
    }
}

public void decrypt(File inputFile, File outputfile) throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidAlgorithmParameterException, IOException, IllegalBlockSizeException, BadPaddingException {
    FileInputStream fis = new FileInputStream(inputFile);
    FileOutputStream fos = new FileOutputStream(outputfile);
    Cipher cipher = Cipher.getInstance(PKCS7_PADDING);
    byte[] keyBytes = new byte[32];
    System.arraycopy(MessageDigest.getInstance(""SHA-256"").digest(), STARTING_LOCATION, keyBytes, STARTING_LOCATION, keyBytes.length);
    cipher.init(2, new SecretKeySpec(keyBytes, ""AES""), new IvParameterSpec(new byte[16]));
    CipherInputStream inputStream = new CipherInputStream(fis, cipher);
    byte[] data = new byte[CHUNK_SIZE];
    while (true) {
        int count = inputStream.read(data, STARTING_LOCATION, CHUNK_SIZE);
        if (count != STREAM_FINISH_LOCATION) {
            fos.write(data, STARTING_LOCATION, count);
        } else {
            fis.close();
            fos.close();
            inputStream.close();
            return;
        }
    }
} }

I tried java to VB converter but no luck as 

javax.crypto.Cipher and java.security.MessageDigest

are not available in VB I found some alternative Here , Here and some from Here  but got no clue,
Because this is my first post so sorry for any mistake or inconvenience ,and heartily thanks for stackoverflow community for always being there for help.
Any help is most welcomed.
","","154","<java><c#><vb.net><aes><sha256>","1","","0","2017-05-18 12:17:45","","1","2","-1","","2017-05-23 12:26:24","2017-05-18 12:17:45",""
"17619343","C# Error using Base64 convert on hash","Basically I am getting a saved hash (converted to base64) from an access database and comparing it (after converting it back) with another and should return true if they match, but for some reason it returns false. There is data in the database. I think the problem occurs when the hash is converted back from base64. Can anyone see what I am doing wrong?
private static bool MatchSHA(byte[] p1, byte[] p2)
    {
        bool result = false;
        if (p1 != null && p2 != null)
        {
            if (p1.Length == p2.Length)
            {
                result = true;
                for (int i = 0; i < p1.Length; i++)
                {
                    if (p1[i] != p2[i])
                    {
                        result = false;
                        break;
                    }
                }
            }
        }
        return result;
    }


private static byte[] GetSHA(string userID, string password)
    {
        SHA256CryptoServiceProvider sha = new SHA256CryptoServiceProvider();
        return sha.ComputeHash(System.Text.Encoding.ASCII.GetBytes(userID + password));
    }
public void RunTest()
    {
        string userId = ""test"";
        string password = ""Password"";
        string enteredPassword = ""Password"";
        var hashedPassword = GetSHA(userId, password);
        string encodedPassword = Convert.ToBase64String(hashedPassword);
        try
        {
            string connString = (@""Provider=Microsoft.ACE.OLEDB.12.0; Data Source=|DataDirectory|Password.accdb"");
            OleDbConnection conn = new OleDbConnection(connString);
            conn.Open();
            OleDbCommand cmd = conn.CreateCommand();
            cmd.CommandText = @""SELECT * FROM [Users] WHERE [UserId] = @UserId"";
            cmd.Parameters.AddWithValue(""@UserId"", userId);
            OleDbDataReader dbReader = cmd.ExecuteReader();
            while (dbReader.Read())
            {
               var compareHash = Convert.FromBase64String(dbReader[""Password""].ToString());
               errorLabel.Text = ""Hash from DB: "" + dbReader[""Password""].ToString();

                 if (MatchSHA(compareHash, GetSHA(userId, enteredPassword)))
                 {
                     loginLabel.Text = ""EnteredPassword. True"";
                 }
                 else
                 {
                     loginLabel.Text = ""EnteredPassword. False"";
                 }

            }
            conn.Close();

        }
        catch (OleDbException obe)
        {
            errorLabel.Text = obe.ToString();
        }
    }

","","152","<c#><ms-access><base64><sha256>","0","","0","2013-07-12 16:31:14","","17","","","user1955810","2013-07-12 16:31:14","2013-07-12 16:14:41",""
"52177885","Golang crypto/hmac global hash object","I try to use global hmac hash for generating signature. Code works well, but generated signature doesn't satisfy 3rd party integration checker. If hmac hash will be created for each 'signature generation' process it will works fine.
Works fine - signature is accepted by 3rd party:
func tokenSignatureFunc(key string) tokenSignType {
    signToken := func(token string) []byte {
        h := hmac.New(sha256.New, []byte(key))
        h.Write([]byte(token))
        signature := h.Sum(nil)
        base64Signature := make([]byte, base64.StdEncoding.EncodedLen(len(signature)))
        base64.StdEncoding.Encode(base64Signature, signature)
        return base64Signature
    }
    return signToken
}

Doesn't work - signature is not accepted by 3rd party:
func tokenSignatureFunc(key string) tokenSignType {
    h := hmac.New(sha256.New, []byte(key))
    signToken := func(token string) []byte {
        h.Write([]byte(token))
        signature := h.Sum(nil)
        base64Signature := make([]byte, base64.StdEncoding.EncodedLen(len(signature)))
        base64.StdEncoding.Encode(base64Signature, signature)
        return base64Signature
    }
    return signToken
}

","Try this, it may be failing due to base64 padding. Use RawStdEncoding instead
func HMAC256(payload string, secret string) string {
   sig := hmac.New(sha256.New,[]byte(secret))
   sig.Write([]byte(payload))
   return b64Encode(string(sig.Sum(nil)[:]))
}


func b64Encode(text string) string {
   return base64.RawStdEncoding.EncodeToString([]byte(text))
 }

","152","<go><sha256><hmac>","-1","0","1","2018-09-08 06:58:29","","6","","","","","2018-09-05 05:47:03",""
"48418088","sha1 to sha256 hash adjustment","I have a statement "":
    $hash = strtoupper(sha1($_POST['orderID'] . $_POST['currency'] . 
    $_POST['amount'] . $_POST['PM'] . $_POST['ACCEPTANCE'] . 
    $_POST['STATUS'] . $_POST['CARDNO'] . $_POST['PAYID'] . 
    $_POST['NCERROR'] . $_POST['BRAND'] . 'Kerkkl01'));

statement is needed to  login and sent a payment request
This statement needs to be converted to a SHA-256, as my payment provider wants me to connect with SHA-256.
The sha1() is a normal php function, so my thought was to change the sha1() into sha256() and change the SHA-IN  parameter from 'Kerkkl01' to '543GropTeter01?!890' as a stronger/longer encryption phrase is needed. 
But...no way this is working. So how do I change from a SHA-1  to a SHA-256 connection in the above given $hash ?
","","152","<encryption><hash><sha1><sha256>","0","","0","2018-01-24 14:04:44","","2","","4138716","","2018-01-24 14:04:44","2018-01-24 08:39:59",""
"6735682","SHA256 function changes input variables","I just started using sha functions of OpenSSL under windows with vc2k10 and I've got a problem. since I couldn't find much detailed documentation about it I'm asking here:
the SHA256(const unsigned char *in, size_t n,unsigned char *out) function seems to change what in pointer points to. is this a bug or feature?
thanks
","Are you sure that your in and out don't point to the same memory?
It's unlikely that there is  both a bug in the opensll lib and visual studio's implementation of const
","152","<c><pointers><openssl><sha256>","0","0","1","2011-07-18 16:02:38","","1","","","","","2011-07-18 15:53:41",""
"55017871","Issue regarding Hmac SHA256 in different programming languages","I am facing an issue while trying to integrate HMACSHA256 (hashing) in different programmng languages. I have tried to implement the standard algorith with standard predefined methods in Java and C# and I am getting different results in different languages. Please see below my implementations in Java and C#:
Java:
    public static String convertSHAWithSalt(String value, String salt)
                throws NoSuchAlgorithmException, InvalidKeyException {
            String data = """";
            try {
                MessageDigest md = MessageDigest.getInstance(""SHA-256"");
                md.update(salt.getBytes(StandardCharsets.UTF_8));
                byte[] bytes = md.digest(value.getBytes(StandardCharsets.UTF_8));
                StringBuilder sb = new StringBuilder();
                for (byte b : bytes) {
                    sb.append(Integer.toString((b & 0xff) + 0x100, 16).substring(1));
                }
                data = sb.toString();
                System.out.println(data);
                } catch (NoSuchAlgorithmException e) {
                  e.printStackTrace();
               }
            }

Result for string value 'abcd' and an empty salt value: 88d4266fd4e6338d13b845fcf289579d209c897823b9217da3e161936f031589
C#:
       public static string createHash(string message, string secret)
        {

            byte[] keyByte = System.Text.Encoding.UTF8.GetBytes(secret);

            byte[] messageBytes = System.Text.Encoding.UTF8.GetBytes(message);

            HMACSHA256  hmacsha256 = new HMACSHA256(keyByte);
            byte[] hashmessage = hmacsha256.ComputeHash(messageBytes);
            return BitConverter.ToString(hashmessage).Replace(""-"", """").ToLower();
        }

Result for string value 'abcd' and an empty salt value: 527ff4c28c22a090fe39908139363e81b8fb10d0695a135518006abfa21cf5a2
Please suggest why there is a difference in both of the results. I have also tried the below implementation in java but it is not working for empty salt value:
public static String convertSHAWithSalt(String value, String salt)
            throws NoSuchAlgorithmException, InvalidKeyException {
        String data = """";
        Mac sha256Hmac = Mac.getInstance(""HmacSHA256"");
            SecretKeySpec secretkey = new SecretKeySpec(salt.getBytes(StandardCharsets.UTF_8), ""HmacSHA256"");
            sha256Hmac.init(secretkey);
            data = bytesToHex(sha256Hmac.doFinal(data.getBytes(StandardCharsets.UTF_8)));
            System.out.println(data);
    }

","There is a difference between SHA-256 and HMAC-SHA-256. 
HMAC-SHA-256 (see also HMAC) is an algorithm for generating a MAC using the SHA-256-hash-algorithm.
The result of the first Java-code and the C#-code are different, because the Java-code uses SHA-256 and the C#-code HMAC-SHA-256.
Since you want to use HMAC-SHA-256 I focus on that and I ignore the first Java-code.
The result of the C#-code for the text 
This is an arbitrary text!

with the key 
1234567890

is
25583e6e0b6c2c3a5c50ebd9ea48138a960a7ca2a215fae2b4b82ee99734deb4

The second Java-code uses HMAC-SHA-256 as well. If you replace the lines 
data = bytesToHex(sha256Hmac.doFinal(data.getBytes(StandardCharsets.UTF_8)));
System.out.println(data);

with
data = bytesToHex(sha256Hmac.doFinal(value.getBytes(StandardCharsets.UTF_8)));
return data;

then, the ouput is the same (provided that your (not posted) bytesToHex-method works in a proper way, see e.g. How to convert a byte array to a hex string in Java?).
Btw, in the second Java-code you should change the labeling salt to something like key since that's the common wording in the context of a MAC. A salt is typically used in combination with a password hashing like in your first Java-code.
Note: In the Java-code it's not allowed to use an empty byte-array as SecretKeySpec-input. This throws an IllegalArgumentException (Empty key). However, the HMACSHA256-ctor in the C#-code accepts an empty byte-array and internally pads it with 0-values. Thus, with regard to your testcase (text: abcd, empty key) you can simulate in the Java-code the empty byte-array by a byte-array containing a single 0-value. Then, the output of the Java-code equals the output of the C#-code. Sure, an empty key should only be used for this testcase.
","151","<java><c#><encryption><hash><sha256>","0","1","1","2019-03-06 12:59:22","55023714","2","","","","","2019-03-06 07:38:05",""
"55425543","Sha256 hash generated from Java differs from OpenSSL and Sha256Sum utilities. Why?","Here is a java code that generates a sha256 hash for a string in java.
public static void main(){

    String data = ""hello world"";

    // Generate the Sha256 hash using Apache Common Codec library
    String hash = DigestUtils.sha256Hex( data);

    System.out.println(""Apache : Sha256hash: ""+ hash);

    // Generate Sha 256 hash by using guava library
    final String hashed = Hashing.sha256()
            .hashString(data, StandardCharsets.UTF_8)
            .toString();


    System.out.println(""Guava  : Sha256hash: ""+ hashed);
}

When I run the program I get the following values. Both hashes are exactly same.
Apache : Sha256hash: b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9
Guava  : Sha256hash: b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9

Now, I generated the Sha256 hash for the string ""hello world"" from command line.
command line util sha2
echo ""hello world"" | sha2 -256
SHA-256 ((null)) = a948904f2f0f479b8f8197694b30184b0d2ed1c1cd2a1ec0fb85d299a192a447

OpenSSL util
echo 'hello world' | openssl dgst -sha256
a948904f2f0f479b8f8197694b30184b0d2ed1c1cd2a1ec0fb85d299a192a447

As you see from these examples, the values generated from Command line differ from values generated from Java ( Apache and Guava )
The input string is same, but the hashes are different. Why this difference happens?
","I literally had a revision to this answer recently.
The issue is echo adds a newline to your data. If you used echo -n or openssl dgst -sha256 <<< 'hello world' you'd get the right value.
See OpenSSL create SHA hash from shell stdin
","151","<java><apache><openssl><guava><sha256>","2","5","1","2019-03-29 21:25:00","55425563","0","","","","","2019-03-29 21:13:23",""
"56405195","""Signature not valid"" when getting API data (VBA-Excel)","I have an issue when I try to retrieve some data in excel through VBA code.
I used the following as basis: https://github.com/BitMEX/api-connectors/tree/master/official-http/vba
and it works, I was able to update it according to my need and place an order (testnet) 
I now try to retrieve the book but I always get ""Signature not valid"" as response.
Can you please help understand what's I am doing wrong?
The data I want to receive is the following:
https://testnet.bitmex.com/api/explorer/#!/OrderBook/OrderBook_getL2
As Hash function, I use the HexHash function available in the link provided above (and it works for the 'Post' instruction but can't make it works for the ""GET"" instruction.
Thanks in advance
Bellow a working code (POST function):
Sub placeorder()
Dim Json, httpObject As Object
Dim nonce As Double
Dim verb, apiKey, apiSecret, signature, symbol, price, qty, url, postdata, replytext, nonceStr As String

' Set monotonically (w time) increasing nonce
nonce = DateDiff(""s"", ""1/1/1970"", Now)

' Set api key and secret
apiKey = ""aaa""
apiSecret = ""bbb""

' Build query
symbol = ""XBTUSD""
price = 8000
qty = 1

verb = ""POST""
url = ""/api/v1/order""
postdata = ""symbol="" & symbol & ""&price="" & price & ""&quantity="" & qty

' Stringize nonce
nonceStr = nonce

' Compute signature using hexhash script
signature = HexHash.HexHash(verb + url + nonceStr + postdata, apiSecret, ""SHA256"")

' Set up HTTP req with headers
Set httpObject = CreateObject(""MSXML2.XMLHTTP"")
httpObject.Open ""POST"", ""https://testnet.bitmex.com"" & url, False
httpObject.setRequestHeader ""Content-Type"", ""application/x-www-form-urlencoded""
httpObject.setRequestHeader ""api-nonce"", nonceStr
httpObject.setRequestHeader ""api-key"", apiKey
httpObject.setRequestHeader ""api-signature"", signature
httpObject.Send (postdata)

' Catch response
replytext = httpObject.ResponseText

end sub()

Bellow a NON-working code (GET function):
Sub getorderbook2()
Dim Json, httpObject As Object
Dim nonce As Double
Dim verb, apiKey, apiSecret, signature, symbol, url, getdata, replytext, 
depth As String
Dim nonceStr As String

' Set monotonically (w time) increasing nonce
nonce = DateDiff(""s"", ""1/1/1970"", Now)

' Set api key and secret
apiKey = ""aaa""
apiSecret = ""bbb""

' Build query
symbol = ""XBTUSD""
depth = 3

verb = ""GET""
url = ""/api/v1/orderBook/L2""
getdata = ""symbol="" & symbol & ""&depth="" & depth

' Stringize nonce
nonceStr = nonce

' Compute signature using hexhash script
signature = HexHash.HexHash(verb + url + nonceStr + getdata, apiSecret, ""SHA256"")

' Set up HTTP req with headers
Set httpObject = CreateObject(""MSXML2.XMLHTTP"")
httpObject.Open ""GET"", ""https://testnet.bitmex.com"" & url, False
httpObject.setRequestHeader ""Content-Type"", ""application/x-www-form-urlencoded""
httpObject.setRequestHeader ""api-nonce"", nonceStr
httpObject.setRequestHeader ""api-key"", apiKey
httpObject.setRequestHeader ""api-signature"", signature
httpObject.Send (getdata)

' Catch response
replytext = httpObject.ResponseText
end sub ()

In the second section, I always get an error message in return ""Signature not valid""
","Switching between GET and POST requires more than just changing the verb in the request. A GET request needs to have the data as part of the URL string so try:
url = url & ""?"" & getdata
getdata = """"
httpObject.Open ""GET"", ""https://testnet.bitmex.com"" & url, False

You also need to change this line from:
httpObject.Send (getdata)

to:
httpObject.Send

The way in which you construct the api-signature value is also different for GET requests to this API - see here for details. The changes I have suggested should lead to the correct signature being generated. If you need to URL encode data in VBA then this answer might help.
Other issues:

Dim a, b As String is equivalent to Dim a As Variant, b As String. To declare multiple String variables you need to write Dim a As String, b As String
CreateObject(""MSXML2.XMLHTTP"") accesses the older version 3.0 of MSXML2. To access the most recent version 6.0, you need CreateObject(""MSXML2.XMLHTTP.6.0"")

","151","<excel><vba><api><sha256><sha>","2","1","1","2019-06-02 01:48:09","56411679","5","","11586215","","2019-06-01 10:31:29","2019-06-01 08:50:10",""
"53987423","How to perform sha256 hash using sjcl.hash.sha256.hash on a file content?","I am trying to perform SHA256 hash on a file content using javascript.
I get the file using the following function
var fileReader = new FileReader();
var fileByteArray = [];
fileReader.onload = function(evt) {
    if (evt.target.readyState == FileReader.DONE) {
        var arrayBuffer = evt.target.result,
        array = new Uint8Array(arrayBuffer);
        fileHash = generateHashOfFileContent(array); 
        console.log('fileHash1: ' + fileHash);
    }
}
fileReader.readAsArrayBuffer(this.files[0]);

And the hash function is 
function generateHashOfFileContent(fileData){
  var bitArray = sjcl.hash.sha256.hash(fileData);
  var digest_sha256 = sjcl.codec.hex.fromBits(bitArray);
  console.log(""Sha256 ""+digest_sha256);
  return digest_sha256;
}

But it produce wrong hash data when I select a binary file
I can only produce actual hash using a text file and change the fileReader.readAsArrayBuffer(this.files[0]); ------->  fileReader.readAsText(this.files[0]);
Can someone help me to figure out the problem
","","150","<javascript><hash><sha256><sjcl>","1","","0","2018-12-31 12:16:16","","0","","","","","2018-12-31 12:16:16",""
"48009620","c# and java - difference between hmacsha256 hash Redux","While testing the code in a previous post on the differences between the java and c# hmacsha256 implementation outputs, I noticed that the outputs were slightly different, i.e. when I ran java code the output was
ivEyFpkagEoghGnTw_LmfhDOsiNbcnEON50mFGzW9_w=

but in C# code I get
ivEyFpkagEoghGnTw/LmfhDOsiNbcnEON50mFGzW9/w=

Has anybody seen this, i.e. there is a _ in the java example but an / in the c# example
Java Code
import java.util.*;
import javax.crypto.*;
import javax.crypto.spec.*;

public class Test {
    public static void main (String[] args) throws Exception {
        String secretAccessKey = ""mykey"";
        String data = ""my data"";
        byte[] secretKey = secretAccessKey.getBytes();
        SecretKeySpec signingKey = new SecretKeySpec(secretKey, ""HmacSHA256"");
        Mac mac = Mac.getInstance(""HmacSHA256"");
        mac.init(signingKey);
        byte[] bytes = data.getBytes();
        byte[] rawHmac = mac.doFinal(bytes);
        System.out.println(Base64.getUrlEncoder().encodeToString(rawHmac));
    }
}

C# Code
using System;
using System.Security.Cryptography;
using System.Text;

class Test
{
    static void Main()
    {
        String secretAccessKey = ""mykey"";
        String data = ""my data"";
        byte[] secretKey = Encoding.UTF8.GetBytes(secretAccessKey);
        HMACSHA256 hmac = new HMACSHA256(secretKey);
        hmac.Initialize();
        byte[] bytes = Encoding.UTF8.GetBytes(data);
        byte[] rawHmac = hmac.ComputeHash(bytes);
        Console.WriteLine(Convert.ToBase64String(rawHmac));
    }
}

","This seems to be a design choice for the Base64 encoders, one of them chose to use the _ character and one of them chose to use the / character (C# also uses the + character instead of the - character). If you need to use that string across languages you can use myString.replace(oldChar, newChar) (myString.Replace(oldChar, newChar) in C#) to replace the mismatch characters.

If you want C# Base64 strings to look like Java's Base64 strings you can use Microsoft.IdentityModel.Tokens.Base64UrlEncoder, but this is a Nuget package you would have to install. This uses - and _ instead of + and /.
","150","<java><c#><encryption><sha256><hmac>","0","0","1","2017-12-28 15:46:22","48009699","0","","2587452","","2017-12-28 15:46:22","2017-12-28 14:53:46",""
"40277653","Computing JWS Signature for Google oAuth2 (Javascript)","I'm in the process of setting up server-to-server auth for my react app to be able to pull data from the Google Spreadsheet API without the user having to authenticate. 
I'm going through the docs: https://developers.google.com/identity/protocols/OAuth2ServiceAccount
I'm having an issue with this bit:
Sign the UTF-8 representation of the input using SHA256withRSA (also known as RSASSA-PKCS1-V1_5-SIGN with the SHA-256 hash function) with the private key obtained from the Google API Console. The output will be a byte array.
What would this look like using javascript?
I've got the private key from my Google API console, and i've got the UTF-8 representation of the input ready to go.
I'm just not sure how I go about signing it using SHA256withRSA with the private key.
Thanks!
","Okay, so you've got all the ingredients, now you just want to make the product! 
Here's how you can sign input:
Use the crypto lib: https://github.com/thenativeweb/crypto2
Find the correct hashing algorithm (they are listed on there github) and away you go. Here is an example
crypto2.sign(YOUR_INPUT_HERE, your_private_key, (err, signature) => {
    console.log (signature); // View the contents
});

","149","<javascript><rsa><sha256><oauth2>","1","0","1","2016-10-27 06:37:39","40277783","0","","","","","2016-10-27 06:29:28",""
"50536662","PBKDF2 Lua Implementation Issue","I am trying to write a PBKDF2 implementation in pure lua. I am writing it because I want to use it in a sandboxed lua environment that does not allow outside libraries. I had a look at the standard document from the IETF and had at it. Below is the code I have come up with:
do
    package.preload[""pbkdf2""] = function()

        local hmac = require 'hmac'
        local len = string.len
        local gsub = string.gsub
        local format = string.format
        local byte = string.byte
        local char = string.char
        local concat = table.concat
        local ceil = math.ceil

        local function toBytes(str)
            local tmp = {}
            for i = 1, len(str) do
                tmp[i] = byte(str, i)
            end
            return tmp
        end

        local function toString(bArray)
            local tmp = {}
            for i = 1, #bArray do
                tmp[i] = char(bArray[i])
            end
            tmp = concat(tmp)
            return tmp
        end

        -- transform a string of bytes in a string of hexadecimal digits
        local function asHex(s)
            local h = gsub(s, ""."", function(c)
                return format(""%02x"", byte(c))
            end)
            return h
        end

        local num2string = function(l, n)
            local s = {}
            for i = 1, n do
                local idx = (n + 1) - i
                s[idx] = char(l & 255)
                l = l >> 8
            end
            s = concat(s)
            return s
        end

        local buildBlock = function(hFun, password, salt, c, int)
            local tmp
            local tmp2

            for i = 1, c do
                if i == 1 then
                    print(int)
                    print(salt .. int)
                    -- PRF(password, salt || INT_32_BE(i)
                    -- return result of hash as a byte string
                    tmp = hmac.hash(hFun, password, salt .. num2string(int, 4), true)
                else
                    -- returns result of hash as byte string
                    tmp2 = hmac.hash(hFun, password, tmp, true)
                    -- transform to byte arrays
                    tmp2 = toBytes(tmp2)
                    tmp = toBytes(tmp)
                    assert(#tmp == #tmp2)
                    -- apply XOR over bytes in both arrays
                    -- save results to final array
                    for j = 1, #tmp do
                        -- perform XOR operation on both elements in the respective arrays
                        tmp[j] = tmp[j] ~ tmp2[j]
                    end
                    -- transform back into byte string to pass to next hash
                    tmp = toString(tmp)
                end
            end
            return tmp
        end

        local truncate = function(str, pos)
            return string.sub(str, 1, pos)
        end

        local deriveKey = function(hFun, message, salt, c, dLen)
            local hLen = hFun.outputSize

            -- the derived key cannot be larger than (2^32 * hLen)
            if dLen > (2^32) * hLen then error(""The derived key cannot be larger than 2^32 times the output size of the hash function."") end

            -- the block size is the desired key length divided by the output size of the underlying hash function, rounded up
            local blockSize = ceil(dLen/hLen)

            -- to store our blocks
            local final = {}

            for i = 1, blockSize do
                -- lets make our blocks in here
                final[i] = buildBlock(hFun, message, salt, c, i)
            end

            local result
            if #final == 1 then
                result = final[1] -- we only have one block
            else
                result = concat(final) -- turns final into a bytestring to be outputted
            end
            --if #result > dLen then truncate(final, dLen) end
            assert(#result == dLen)
            return asHex(result) -- outputs as a hex value
        end
        return {deriveKey = deriveKey}
    end
end

This code is not getting the correct answers. Testing this code with test vectors provided here, assuming that the underlying PRF is HMAC-SHA256, the output is below:
key: ""password""
salt: ""salt""
c: 1
dkLen: 32

Got: 13463842ec330934dc124494b40d8baade465b72f3fcadad741f2d0e052fd2f5
Expected: 120fb6cffcf8b32c43e7225256c4f837a86548c92ccc35480805987cb70be17b

key: ""password""
salt: ""salt""
c: 2
dkLen: 32

Got: 8b82aed26f503effdbc6c14bc7f0338b2b90e387f14ac1f91f9ad74e618f9558
Expected: AE4D0C95AF6B46D32D0ADFF928F06DD02A303F8EF3C251DFD6E2D85A95474C43

I believe it may have something to do with the string to byte encoding, but I cannot pinpoint what exactly is causing the issue. When I was testing my HMAC code, I had to rely on online generators because I couldn't find vectors for HMAC-SHA224 and HMAC-SHA256. Some calculators would give me completely different output values for the same key, message combination. That could be because of how they are processing the inputs, but I am not sure. I would appreciate it if someone more experienced could help me out with this.
EDIT: This problem is solved. Seems that all that was needed was to pass int as a binary string of length 4. I updated the code with the fixes.
EDIT 2: I read the standard again to realize the solution was in my face the entire time (standard says to encode i as a 32-bit big endian integer).
","The solution was to convert int to a binary string of length 4. Thanks to @EgorSkriptunoff for his insight.
","149","<lua><sha256><hmac><pbkdf2>","0","0","1","2018-05-26 02:58:52","50538907","6","","9821157","","2018-05-26 02:58:52","2018-05-25 20:48:12",""
"7411035","Should I prefer hash algorithms with longer outputs for storing passwords?","I'm building a site where security is somewhat important (then again, when is it not important?) and I was looking for the best way to store my passwords. I know that MD5 has issues with collisions as well as SHA-1, so I was looking into storing my passwords via either SHA-256 or SHA-512.
Is it wiser to store a longer hash variant as opposed to a smaller one? (ie 512  vs 256) Does it take significantly more time to crack a SHA-512 encoded password versus a SHA-256 encoded password? 
Also, I've read about using ""salts"" for the passwords. What is this and how does it work? Do I simply store the salt value in another database field? How do I use that as a part of the hash value calculation?  
","Collisions are not relevant in your scenario, so MD5's weaknesses are not relevant. However, the most important thing is to use a hash that takes a long time to compute. Read http://codahale.com/how-to-safely-store-a-password/ and http://www.jasypt.org/howtoencryptuserpasswords.html (even if you're not using Java the techniques are still valid).
I would stay away from MD5 in any case, since there are other hashes that perform just as well.
","149","<security><database-design><hash><sha256><sha512>","0","0","3","2011-09-18 08:15:47","7424633","3","1","","","","2011-09-14 03:47:09",""
"7411035","Should I prefer hash algorithms with longer outputs for storing passwords?","I'm building a site where security is somewhat important (then again, when is it not important?) and I was looking for the best way to store my passwords. I know that MD5 has issues with collisions as well as SHA-1, so I was looking into storing my passwords via either SHA-256 or SHA-512.
Is it wiser to store a longer hash variant as opposed to a smaller one? (ie 512  vs 256) Does it take significantly more time to crack a SHA-512 encoded password versus a SHA-256 encoded password? 
Also, I've read about using ""salts"" for the passwords. What is this and how does it work? Do I simply store the salt value in another database field? How do I use that as a part of the hash value calculation?  
","For password storage, you need more than a mere hash function; you need:

an extremely slow hash function (so that brute force attacks are more difficult)
and a salt: a publicly known value, stored along the hash, distinct for each hash password, and entering in the password hashing process. The salt prevents an attacker from efficiently attacking several passwords (e.g. using precomputed hash tables).

So you need bcrypt.
For the point of the hash output size: if that size is n bits, then n shall be such that an attacker cannot realistically compute the hash function 2n times; 80 bits are quite enough for that. An output of 128 bits is thus already overkill. You still would not want to use MD5, because it is way too fast (100000 nested invocations of MD5 might be slow enough, though) and because some structural weaknesses have been found in MD5, which do not directly impact its security for hashing passwords, but are bad public relations nonetheless. Anyway, you should use bcrypt, not a homemade structure.
","149","<security><database-design><hash><sha256><sha512>","0","3","3","2011-09-18 08:15:47","7424633","3","1","","","","2011-09-14 03:47:09",""
"7411035","Should I prefer hash algorithms with longer outputs for storing passwords?","I'm building a site where security is somewhat important (then again, when is it not important?) and I was looking for the best way to store my passwords. I know that MD5 has issues with collisions as well as SHA-1, so I was looking into storing my passwords via either SHA-256 or SHA-512.
Is it wiser to store a longer hash variant as opposed to a smaller one? (ie 512  vs 256) Does it take significantly more time to crack a SHA-512 encoded password versus a SHA-256 encoded password? 
Also, I've read about using ""salts"" for the passwords. What is this and how does it work? Do I simply store the salt value in another database field? How do I use that as a part of the hash value calculation?  
","Some of the answers here are giving you dubious advice.  I recommend you to head over to the IT Security Stack Exchange and search on ""password hashing"".  You will find lots of advice, and much of it has been carefully vetted by folks on the security stack exchange.  Or, you could just listen to @Thomas Pornin, who knows what he is talking about.
","149","<security><database-design><hash><sha256><sha512>","0","0","3","2011-09-18 08:15:47","7424633","3","1","","","","2011-09-14 03:47:09",""
"18235944","Password Hashes Characters in Applications","I appreciate your time.
I'm trying to understand something. Why is it that hashes that I generate manually only seem to include alphanumeric characters 0-9, a-f, but all of the hashes used by our favorite applications seem to contain all of the letters [and capitalized ones at that]?
Example:
Manual hash using sha256:
# sha256sum <<< asdf
d1bc8d3ba4afc7e109612cb73acbdddac052c93025aa1f82942edabb7deb82a1  -

You never see any letters above f. And nothing is capitalized. 
But if I create a SHA hash using htpasswd, it's got all the alphanumerics:
# htpasswd -snb test asdf
test:{SHA}PaVBVZkYqAjCQCu6UBL2xgsnZhw=

Same thing happens if you look at a password hash in a website CMS database for example. There must be some extra step I'm missing or the end format is different than the actual hash format. I thought it might be base64 encoded or something, but it did not seem to decode. 
Can someone please explain what's happening behind the scenes here? My friend explained that piping ""asdf"" to sha256sum is showing the checksum, which is not the actual hash itself. Is that correct? If so, how can I see the actual hash?
Thank you so much in advanced!
","It is base64 encoded. 
Base64 encoding ends an an equal sign. So that is the first indicator. Although the htpasswd man page doesn't mention it, other Apache docs about ""the password encryption formats generated and understood by Apache"" does say that the SHA format understood by Apache is base64 encoded.
","148","<algorithm><unix><hash><passwords><sha256>","2","0","2","2013-08-14 16:41:59","18236929","0","","","","","2013-08-14 15:29:52",""
"18235944","Password Hashes Characters in Applications","I appreciate your time.
I'm trying to understand something. Why is it that hashes that I generate manually only seem to include alphanumeric characters 0-9, a-f, but all of the hashes used by our favorite applications seem to contain all of the letters [and capitalized ones at that]?
Example:
Manual hash using sha256:
# sha256sum <<< asdf
d1bc8d3ba4afc7e109612cb73acbdddac052c93025aa1f82942edabb7deb82a1  -

You never see any letters above f. And nothing is capitalized. 
But if I create a SHA hash using htpasswd, it's got all the alphanumerics:
# htpasswd -snb test asdf
test:{SHA}PaVBVZkYqAjCQCu6UBL2xgsnZhw=

Same thing happens if you look at a password hash in a website CMS database for example. There must be some extra step I'm missing or the end format is different than the actual hash format. I thought it might be base64 encoded or something, but it did not seem to decode. 
Can someone please explain what's happening behind the scenes here? My friend explained that piping ""asdf"" to sha256sum is showing the checksum, which is not the actual hash itself. Is that correct? If so, how can I see the actual hash?
Thank you so much in advanced!
","There's two things going on here.
First, your manual hash is using a different algorithm than htpasswd. The -s flag causes htpasswd to use SHA1, not SHA256. Use sha1sum instead of sha256sum.
Second, the encoding of the hashes are different. Your manual hash is Hex encoded, the htpasswd hash is Base64 encoded. The htpasswd hash will decode, it just decodes to binary. If you try to print this binary it will look like =¥AU™¨Â@+ºPöÆ'f (depending on what character encoding you're using), and that may be why you believe it's not decoding.
If you convert the Base64 directly to Hex (you can use an online tool like this one), you'll find that sha1sum will generate the same hash.

My friend explained that piping ""asdf"" to sha256sum is showing the checksum, which is not the actual hash itself.

Your friend is incorrect. You're seeing the Hex encoding of the hash. But the piping does affect the hash that's generated, it adds a newline character, so what you're actually hashing is asdf\n. Use this command instead:
echo -n ""asdf"" | sha1sum

","148","<algorithm><unix><hash><passwords><sha256>","2","1","2","2013-08-14 16:41:59","18236929","0","","","","","2013-08-14 15:29:52",""
"37126061","Call SHA256 in C on Unix system (eg. OpenBSD)","I'm currently writing a program in C on OpenBSD. I need to compute a SHA256 hash of several strings. I know there is a tool sha256 that I could use on the console, but I need to use either that or a native Unix library to compute it.
Is there any .h file I have to include I may have missed?
I already tried to search the man pages and the internet, but ended every time with the console tool, but I need to call it via my C program. 
I know there is a library with crypt, which supports Blowfish; I'd need a library with sha256 to call it like the blowfish version:
printf(""hash: %s"" crypt(tohash, salt));

Edit: the proposed post with solution doesn't address this problem, since the post addresses C++ and OpenSSL; here we have only C and no external libraries.
","","147","<c><unix><sha256><openbsd>","0","","0","2016-05-09 23:05:23","","3","","15168","","2016-05-09 23:05:23","2016-05-09 21:53:21","2016-05-09 23:31:03"
"35864126","Store SHA256 in sql-server","First of all sorry about my level of ignorance about security so I hope this won't be a silly question. I need to develop a payment gateway and I've just realized I need to store an SHA256 key for authentication operations. So, I think  I can store that key in a configuration row inside a one row SqlServer table, so here is my question: do i need to take any measure such as encrypt the key or take any action in order to protect this information? Thanks in advance,
","","147","<sql-server><security><sha256>","0","","0","2016-03-08 09:53:46","","4","","","","","2016-03-08 09:53:46",""
"25221120","Port ColdFusion Java hashing function to Ruby","I'm trying to port a java hashing function to Ruby but keep ending up with a different hash than expected. Below is the relevant java functions (coldfusion):
 public string function hashAdministrator(required string pass) {
   MessageDigest = createObject('java','java.security.MessageDigest');
   for(i=1; i<=5; i++) {
     md = MessageDigest.getInstance('SHA-256');
     md.update(pass.getBytes('UTF-8'));
     pass = enc(md.digest());
   }
   return pass;
 }

 private string function enc(strArr) {
   //local.strArr = str.getBytes('UTF-8');
   local.hex = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];

   savecontent variable=""local.out"" {
     for (local.item in strArr) {
       writeOutput(hex[bitshrn(bitAnd(240,local.item),4)+1]);
       writeOutput(hex[bitAnd(15,local.item)+1]);
     }
   };
   return local.out;
 }

Below is my ruby code:
 # encoding: utf-8

 require 'digest/sha2'

 class RailoPassword

   attr_accessor :pass

   def admin_password
     password = ''
     5.times do
       md = Digest::SHA2.new
       md.update(self.pass)
       password = self.enc(md.digest.bytes.to_a)
     end
     password
   end


   def enc(strarr)
     hex = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']

     a = ''
     strarr.each do |item|
       a << hex[((0xF0 & item) >> 4)]
       a << hex[(0x0F & item)]
     end
     a
   end
 end

The actual implementation in ruby:
 a = RailoPassword.new
 a.pass = 'test1234'
 puts 'expected: 0be431aeebf55fdc30296e1224fb80b0edbebcddaedb65fcbad1315e906dde65'
 puts ""actual:   #{a.admin_password}""

Expected hash: 0be431aeebf55fdc30296e1224fb80b0edbebcddaedb65fcbad1315e906dde65
Returned hash: 937e8d5fbb48bd4949536cd65b8d35c426b80d2f830c5c308e2cdec422ae2244
The returned hash is the same as if I just got the hex digest from Digest::SHA2:
 1.9.3-p547 :335 > Digest::SHA2.hexdigest('test1234')
  => ""937e8d5fbb48bd4949536cd65b8d35c426b80d2f830c5c308e2cdec422ae2244""

Any assistance would be greatly appreciated.
","Shouldn't you do:
password = self.pass

and then
md.update(password)

?
","147","<java><ruby><encryption><coldfusion><sha256>","2","1","2","2014-08-12 07:37:22","25258669","1","","","","","2014-08-09 17:17:28",""
"25221120","Port ColdFusion Java hashing function to Ruby","I'm trying to port a java hashing function to Ruby but keep ending up with a different hash than expected. Below is the relevant java functions (coldfusion):
 public string function hashAdministrator(required string pass) {
   MessageDigest = createObject('java','java.security.MessageDigest');
   for(i=1; i<=5; i++) {
     md = MessageDigest.getInstance('SHA-256');
     md.update(pass.getBytes('UTF-8'));
     pass = enc(md.digest());
   }
   return pass;
 }

 private string function enc(strArr) {
   //local.strArr = str.getBytes('UTF-8');
   local.hex = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];

   savecontent variable=""local.out"" {
     for (local.item in strArr) {
       writeOutput(hex[bitshrn(bitAnd(240,local.item),4)+1]);
       writeOutput(hex[bitAnd(15,local.item)+1]);
     }
   };
   return local.out;
 }

Below is my ruby code:
 # encoding: utf-8

 require 'digest/sha2'

 class RailoPassword

   attr_accessor :pass

   def admin_password
     password = ''
     5.times do
       md = Digest::SHA2.new
       md.update(self.pass)
       password = self.enc(md.digest.bytes.to_a)
     end
     password
   end


   def enc(strarr)
     hex = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']

     a = ''
     strarr.each do |item|
       a << hex[((0xF0 & item) >> 4)]
       a << hex[(0x0F & item)]
     end
     a
   end
 end

The actual implementation in ruby:
 a = RailoPassword.new
 a.pass = 'test1234'
 puts 'expected: 0be431aeebf55fdc30296e1224fb80b0edbebcddaedb65fcbad1315e906dde65'
 puts ""actual:   #{a.admin_password}""

Expected hash: 0be431aeebf55fdc30296e1224fb80b0edbebcddaedb65fcbad1315e906dde65
Returned hash: 937e8d5fbb48bd4949536cd65b8d35c426b80d2f830c5c308e2cdec422ae2244
The returned hash is the same as if I just got the hex digest from Digest::SHA2:
 1.9.3-p547 :335 > Digest::SHA2.hexdigest('test1234')
  => ""937e8d5fbb48bd4949536cd65b8d35c426b80d2f830c5c308e2cdec422ae2244""

Any assistance would be greatly appreciated.
","This:
def admin_password
    password = ''
    5.times do
        md = Digest::SHA2.new
        md.update(self.pass)
        password = self.enc(md.digest.bytes.to_a)
    end
    password
end

does not match your CFML logic. It should be this (I'm a Ruby newbie, so apologies if this ain't perfect Ruby):
def admin_password
    # password = '' # get rid of this
    5.times do
        md = Digest::SHA2.new
        md.update(self.pass)
        self.pass = self.enc(md.digest.bytes.to_a) # update the correct variable here
    end
    self.pass # and return the correct variable here
end

Having done that, both code blocks return the same value, 0be431aeebf55fdc30296e1224fb80b0edbebcddaedb65fcbad1315e906dde65
And, to be frank, had you also done what @owlstead had suggested and done some debugging, this would have been immediately apparent to you. So there's a lesson there too: if you ask for help, pay attention to the help that's offered.
","147","<java><ruby><encryption><coldfusion><sha256>","2","1","2","2014-08-12 07:37:22","25258669","1","","","","","2014-08-09 17:17:28",""
"54361974","How to compute PDF signature hash?","This question is related to this one, but a bit more specific. I am suspecting I am not computing the hash of my pdf properly. 
I would like to compute the SHA256 hash of a signed PDF. 
According to PDF32000 I should: 

Get the \ByteRange values
Concatenate the two chunks
Compute the SHA256

Here is what I did:
$ grep -aPo 'ByteRange\[\s*(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s*\]' dummy-signed.pdf
ByteRange[ 0 59718 72772 5058]

$ dd if=dummy-signed.pdf of=head.bin bs=1 skip=0 count=59718
59718 bytes (60 kB, 58 KiB) copied, 0.630196 s, 94.8 kB/s

$ dd if=dummy-signed.pdf of=tail.bin bs=1 skip=72772 count=5058
5058 bytes (5.1 kB, 4.9 KiB) copied, 0.064317 s, 78.6 kB/s

$ cat head.bin tail.bin > whole.bin

$ sha256sum whole.bin
04b69f55f12fa5cc7923f4307154f2702efde43b32e4a8d9dbb0507a56fcecd3  whole.bin

I checked that I am not including the < and > chars:
$ hexdump -C head.bin | tail -n3
0000e930  20 20 20 20 20 20 20 20  20 20 20 20 20 2f 43 6f  |             /Co|
0000e940  6e 74 65 6e 74 73                                 |ntents|
0000e946

$ hexdump -C tail.bin | head -n3
00000000  2f 46 69 6c 74 65 72 2f  41 64 6f 62 65 2e 50 50  |/Filter/Adobe.PP|
00000010  4b 4c 69 74 65 2f 4d 28  44 3a 32 30 31 39 30 31  |KLite/M(D:201901|
00000020  32 38 31 33 34 30 35 38  2b 30 31 27 30 30 27 29  |28134058+01'00')|

Unfortunately it seems my signature is wrong, but after decoding the PKCS7 signature I double checked the hash is sha256WithRSAEncryption, so after verifying this digest I get another hash than the one I computed. 
My /SubFilter is: 
$ grep -aPo '/SubFilter.*?(?=>)' dummy-signed.pdf
/SubFilter/adbe.pkcs7.detached/Type/Sig

And my PDF version is: 
$ grep -aPo '%PDF-\d.\d' dummy-signed.pdf
%PDF-1.6

So from PDF32000 with adbe.pkcs7.detached and PDF 1.6 the HASH should be SHA256 which is compatible with what I found in the PKCS7. 
Just for the record, the hash I get from the signature is: 
#!/bin/bash
PKCS7='out.pkcs7'

# Extract Digest (SHA256)
OFFSET=$(openssl asn1parse -inform der -in $PKCS7 | \
    perl -ne 'print $1 + $2 if /(\d+):d=\d\s+hl=(\d).*?256 prim.*HEX DUMP/m')
dd if=$PKCS7 of=signed-sha256.bin bs=1 skip=$OFFSET count=256

# Extract Public key 
openssl pkcs7 -print_certs -inform der -in $PKCS7 | \
    tac | sed '/-----BEGIN/q' | tac > client.pem
openssl x509 -in client.pem -pubkey -noout > client.pub.pem

# Verify the signature
openssl rsautl -verify -pubin -inkey client.pub.pem < signed-sha256.bin > verified.bin

# Get Hash and compare with the computed hash from the PDF
openssl asn1parse -inform der -in verified.bin | grep -Po '\[HEX DUMP\]:\K\w+$' | tr A-F a-f

$ ./verify-signature.sh
256+0 records in
256+0 records out
256 bytes copied, 0.029548 s, 8.7 kB/s
2a3f629f7bdce750321da7f219ec5759dc9ed14818acbd3cd0b6092d5371c03a

You can access the test PDF file dummy-signed.pdf from my gist
curl https://gist.githubusercontent.com/nowox/94dd54e484df877e1232c18bd7b91c97/raw/d249f3757137e9b665e895c900f08b1156f1bc4f/dummy-signed.pdf.base64 | base64 --decode > dummy-signed.pdf

","In short
You try to extract the wrong hash value from the signature container.
In detail
I didn't recognize this earlier because I'm not really an openssl expert. Analyzing the example PDF, though, the cause of the confusion became clear.
In a PKCS#7 / CMS signature container there usually are (at least) two hash values of interest:

the hash value of the signed document data in the messageDigest signed attribute and
the hash value of the signed attributes (in case of the old RSA signing scheme) in the encrypted signature bytes.

The messageDigest signed attribute in the signature container in your example document looks like this (appearances might differ if you asn1-dump in openssl but the value should be recognizable nonetheless):
5306   47: . . . . . . SEQUENCE {
    <06 09>
5308    9: . . . . . . . OBJECT IDENTIFIER messageDigest (1 2 840 113549 1 9 4)
         : . . . . . . . . (PKCS #9)
    <31 22>
5319   34: . . . . . . . SET {
    <04 20>
5321   32: . . . . . . . . OCTET STRING    
         : . . . . . . . . . 04 B6 9F 55 F1 2F A5 CC    ...U./..
         : . . . . . . . . . 79 23 F4 30 71 54 F2 70    y#.0qT.p
         : . . . . . . . . . 2E FD E4 3B 32 E4 A8 D9    ...;2...
         : . . . . . . . . . DB B0 50 7A 56 FC EC D3                            
         : . . . . . . . . }
         : . . . . . . . }
         : . . . . . . }

As you can recognize, this attribute contains the hash value you calculated.
You on the other hand try to extract the signed hash value from the decrypted signature bytes which is not the hash of the document but instead the hash of the signed attributes!
Additionally something appears to go wrong in that extraction step, the value you should retrieve is
AB86B27177E388A1EE69A5C7479D74621E84473E0CAB5C647471B724FEFCE826

and not the 
2a3f629f7bdce750321da7f219ec5759dc9ed14818acbd3cd0b6092d5371c03a

you got.
","145","<bash><pdf><hash><sha256>","1","1","1","2019-01-28 16:41:11","54406546","4","0","2612235","","2019-01-28 12:55:29","2019-01-25 09:04:40",""
"56124326","How to decode SHA256 hash value and retrieve data in Solidity","I am working on a project in solidity where i am encode a string to SHA256 hash value, and now i want to decode SHA256 hash value and retrieve the actual data. please help hoe to do it.
Below is the code i using to hash a string.
pragma solidity ^0.4.26;

contract TestShaAlgo {
  function getSha256(string str) public view returns (bytes32) {
  bytes32 hash = sha256(abi.encodePacked(str));
  return hash;
  }
}

","A hash function is a ONE WAY function, this means that you can't ever get your original data back from the hash.
A hash function is not an encryption function. You can imagine a hash function as a ""fingerprint"" - it identifies the data, but it's not the data itself.
To encrypt your data, use an encryption function, not a hash function.
","143","<blockchain><ethereum><solidity><sha256><smartcontracts>","0","3","1","2019-05-14 06:42:46","56124344","0","","11310931","","2019-05-14 06:39:21","2019-05-14 06:36:32",""
"10208191","Android Hash not working","I'm trying to hash a url using Sha-256 but i'm having a few problems. i have converted the bytes into a string and when i log that string its showing up incorrect instead of a 32 character long se of rand characters its showing this:
04-18 11:46:00.427: V/myApp(797): �C�rE�������.mm""7�{���""��Q]m
Any help would be greatly appreciated
heres my code:
public void hash() throws NoSuchAlgorithmException, UnsupportedEncodingException{

        MessageDigest md = MessageDigest.getInstance(""SHA-256"");
        md.update(fixturesFeedURL.getBytes(""UTF-8""));
        byte[] digest = md.digest();
        String strhash = new String(digest);
        Log.v(""myApp"", strhash);
    }   

","Here is how I do it for MD5 :
MessageDigest md = MessageDigest.getInstance(""MD5"");
byte[] b = md.digest(input.getBytes());
StringBuffer output = new StringBuffer();
for (int i = 0; i < b.length; i++) {
  String tmpStr = ""0"" + Integer.toHexString((0xff & b[i]));
  output.append(tmpStr.substring(tmpStr.length() - 2));
}
return output.toString();

Probably just a matter of changing the MessageDigest algorithm...
","143","<android><hash><character-encoding><sha256>","-1","0","2","2012-04-18 11:23:54","","1","4","","","","2012-04-18 11:15:01",""
"10208191","Android Hash not working","I'm trying to hash a url using Sha-256 but i'm having a few problems. i have converted the bytes into a string and when i log that string its showing up incorrect instead of a 32 character long se of rand characters its showing this:
04-18 11:46:00.427: V/myApp(797): �C�rE�������.mm""7�{���""��Q]m
Any help would be greatly appreciated
heres my code:
public void hash() throws NoSuchAlgorithmException, UnsupportedEncodingException{

        MessageDigest md = MessageDigest.getInstance(""SHA-256"");
        md.update(fixturesFeedURL.getBytes(""UTF-8""));
        byte[] digest = md.digest();
        String strhash = new String(digest);
        Log.v(""myApp"", strhash);
    }   

","your problem is converting the byte array to String - you could use this to do it:
http://commons.apache.org/codec/apidocs/org/apache/commons/codec/binary/Hex.html#encodeHex(byte[])
","143","<android><hash><character-encoding><sha256>","-1","0","2","2012-04-18 11:23:54","","1","4","","","","2012-04-18 11:15:01",""
"16040348","Hashing a large file","Say I have a large file. I break it into bytes of block size 1024. Now the last block would either be 1024 or less. I then find the hash value of last block and append it to the previous block and then calculate the combined hash of appended hashvalue and the original block of size 1024.
I mean to ask do I have to append the 32 bit hash value in binary format or the hex coded
H0<---[Block1||H2]<---[Block2||H3]<---[Block3||H4]<--- ... <---[Last Block]
","","143","<hash><sha256>","0","","0","2013-04-16 15:44:48","","3","","2286998","","2013-04-16 15:44:48","2013-04-16 14:56:43",""
"36215070","How to get the same result with JAVA and CryptoJS using SHA256?","I am trying to make same result with Java in the javascript using CryptoJs. But I am failed many times. I found the CryptoJs to generate Hash value in the javascript recently .  But It was defficult to make same result between javascript and java. I want to get hash value (checksum) from zip or xls ,doc . And the Java application have to check if it has same hash value or not.  Does anyone know  whats going wrong on my javascript? 
====== java source ==========
public static String getFileHashSHA256(String fileName) throws Exception {

    int buff = 16384;

    RandomAccessFile file = new RandomAccessFile(fileName, ""r"");
    MessageDigest hashSum = MessageDigest.getInstance(""SHA-256"");

    byte[] buffer = new byte[buff];
    byte[] partialHash = null;

    long read = 0;

    long offset = file.length();
    int unitsize;

    while (read < offset) {

        unitsize = (int) (((offset - read) >= buff) ? buff : (offset - read));
        file.read(buffer, 0, unitsize);

        hashSum.update(buffer, 0, unitsize);

        read += unitsize;
    }
    file.close();

    partialHash = new byte[hashSum.getDigestLength()];
    partialHash = hashSum.digest();

    StringBuffer sb = new StringBuffer();
    for (int i = 0; i < partialHash.length; i++) {
        sb.append(Integer.toString((partialHash[i] & 0xff) + 0x100, 16).substring(1));
    }

    return sb.toString();

}

result hash value :  2f3512d3caad7b43f0036bafa7c80e78e9fca6a253857d24b1c38dc5cdab1399
========= javascript source ==============
var fileToLoad = document.getElementById(""fileToLoad"").files[0];

var fileReader = new FileReader();
fileReader.readAsBinaryString(fileToLoad);
fileReader.onload = function(fileLoadedEvent) 
{

    var hash = CryptoJS.SHA256(fileLoadedEvent.target.result).toString();
    console.log(hash);

};

result hash value : cc7cf3ed59fb26a43d2596e54c48bced09ad22bff68e2cb5a1ea7cc80b48387d
The both hash value is diffrent even though it bring from a same zip file.
","","143","<javascript><java><hash><sha256><cryptojs>","0","","0","2016-03-25 08:06:43","","5","3","6112693","","2016-03-25 08:06:43","2016-03-25 06:22:28","2016-03-26 13:03:48"
"55856773","Python SHA256 hash computation","I'm writing a SHA256 implementation in Python, padding, parsing and message schedule seem to work fine, my problem lies in the hash computation. Currently I'm just trying to calculate the working variable 'a'.
This is the value I get (In hex)

5d6aebe0

Expected Output, according to this:

5D6AEBCD

Here is my code:
Set the working variables to the constants specified in FIPS-180
a = int('6a09e667', 16)
b = int('bb67ae85', 16)
c = int('3c6ef372', 16)
d = int('a54ff53a', 16)
e = int('510e527f', 16)
f = int('9b05688c', 16)
g = int('1f83d9ab', 16)
h = int('5be0cd19', 16)

Set the two important variables that depend on value t:
W = int('61626380', 16)
K = int('428a2f98', 16)

From the pseudo code on wikipedia:
S1 = hash.ROTR(e, 6) ^ hash.ROTR(e, 11) ^ hash.ROTR(e, 25)
ch = (e & f) ^ ((~e) & g)#((e1) & g)
temp1 = (h + S1 + ch + K + W) % math.pow(2, 32)
S0 = hash.ROTR(a, 2) ^ hash.ROTR(a, 13) ^ hash.ROTR(a, 22)
maj = (a & b) ^ (a & c) ^ (b & c)
temp2 = (S0 + maj) % math.pow(2, 32)
a = int((temp1 + temp2) % math.pow(2, 32))

ROTR function:
@staticmethod
def ROTR(x, n, w=32):
    return (x >> n) | (x << w - n)

Or, split into functions, like specified in FIPS-180 (Prodcuces the same output)
T1 = int((h + hash.SIGMA1(e) + hash.Ch(e, f, g) + hash.K[t] + W) % math.pow(2, 32))
T2 = int((hash.SIGMA0(a) + hash.Maj(a, b, c)) % math.pow(2, 32))
a = int((T1 + T2) % math.pow(2, 32))

Hash class:
@staticmethod
def ROTR(x, n, w=32):
    return (x >> n) | (x << w - n)
def SIGMA0(x):
    return hash.ROTR(x, 2) ^ hash.ROTR(x, 13) ^ hash.ROTR(x, 22)
def SIGMA1(x):
    return hash.ROTR(x, 6) ^ hash.ROTR(x, 11) ^ hash.ROTR(x, 25)
def Ch(x, y, z):
    return (x & y) ^ (~x & z)
def Maj(x, y, z):
    return (x & y) ^ (x & z) ^ (y & z)

I'm using Python 3 btw. Thanks in advance.
","You need to add a lot more masking here to cut down overflowing bits. For example, your ROTR:
def ROTR(x, n, w=32):
    return (x >> n) | (x << w - n)

leaves all the high bits of x intact above the w boundary; you'd want to construct a mask from w and mask off the high bits, e.g.:
def ROTR(x, n, w=32):
    return ((x >> n) | (x << w - n)) & ((1 << w) - 1)

Similar masks are needed anytime you might have overflowed the assumed ""register width"". They can also replace the error-prone use of % math.pow(2, 32) you've got going on, changing:
int((temp1 + temp2) % math.pow(2, 32))

to:
(temp1 + temp2) & ((1 << 32) - 1)

or equivalently:
(temp1 + temp2) % 2 ** 32

This also needs to happen for bitwise negation where the overflow isn't as obvious: Python's ints are infinite precision, and bitwise negation of a non-negative value makes a negative value, effectively adding infinite 1 bits on the left (in the pseudo-two's complement behavior the language specifies). So ~x must become ~x & ((1 << 32) - 1) or the like to force it back to a positive value containing only the low 32 bits.
This has to be done globally (so temp1 and temp2 are actually int, not float values when you compute with them). In general, math.pow is completely useless; you either want to use the ** operator (which doesn't coerce to float and executes more efficiently) or the built-in pow function (which is only needed for its three argument for doing efficient modular exponentiation).
","140","<python><python-3.x><hash><sha256><sha>","1","3","1","2019-04-25 20:13:16","55856886","3","","573034","","2019-04-25 19:59:30","2019-04-25 19:56:49",""
"27030721","wrong hashing string to sha256 all line in text area","Help me to hash my string to sha256.
I have script hashing and work, but I see problem, when I want to display a hashing result from all line in the textarea.
<form action=""#"" method=""post"">My string:<br/>
  <textarea type=""text"" id=""string"" rows=""1"" cols=""20""></textarea><br/>
  <button id=""encrypt"">Encrypt</button>
  <p>SHA256 hashing:</p><br/>
  <textarea type=""text"" id=""hash256"" rows=""1"" cols=""90""></textarea><br/>
</form>
<script type=""text/javascript"">

  // MY SHA256 JAVASCRIPT HERE function SHA256(s) bla bla bla

  document.getElementById('encrypt').onclick = function() {
    var string = document.getElementById('string').value;
    // gets data from input text
    document.getElementById('hash256').value = SHA256(string);
    return false;
  }
</script>

I want to generate output the hash once in three rows
ex :

insert
line 1 > blue
line 2 > orange
line 3 > green

output in one click

line 1 >
  16477688c0e00699c6cfa4497a3612d7e83c532062b64b250fed8908128ed548
line 2 >
  1b4c9133da73a711322404314402765ab0d23fd362a167d6f0c65bb215113d94
line 3 >
  ba4788b226aa8dc2e6dc74248bb9f618cfa8c959e0c26c147be48f6839a0b088

","If you sure your hashing script works ok maybe problem is with data.
Try
document.getElementById('hash256').value = SHA256(string.toString());

","140","<javascript><hash><textarea><sha256>","0","0","2","2014-11-20 03:55:45","27031139","0","1","663627","","2014-11-20 03:45:51","2014-11-20 02:32:56",""
"27030721","wrong hashing string to sha256 all line in text area","Help me to hash my string to sha256.
I have script hashing and work, but I see problem, when I want to display a hashing result from all line in the textarea.
<form action=""#"" method=""post"">My string:<br/>
  <textarea type=""text"" id=""string"" rows=""1"" cols=""20""></textarea><br/>
  <button id=""encrypt"">Encrypt</button>
  <p>SHA256 hashing:</p><br/>
  <textarea type=""text"" id=""hash256"" rows=""1"" cols=""90""></textarea><br/>
</form>
<script type=""text/javascript"">

  // MY SHA256 JAVASCRIPT HERE function SHA256(s) bla bla bla

  document.getElementById('encrypt').onclick = function() {
    var string = document.getElementById('string').value;
    // gets data from input text
    document.getElementById('hash256').value = SHA256(string);
    return false;
  }
</script>

I want to generate output the hash once in three rows
ex :

insert
line 1 > blue
line 2 > orange
line 3 > green

output in one click

line 1 >
  16477688c0e00699c6cfa4497a3612d7e83c532062b64b250fed8908128ed548
line 2 >
  1b4c9133da73a711322404314402765ab0d23fd362a167d6f0c65bb215113d94
line 3 >
  ba4788b226aa8dc2e6dc74248bb9f618cfa8c959e0c26c147be48f6839a0b088

","var lines = document.getElementById('string').value.split('\n');

for (var i=0; i <= lines.length; i++ ) {
    document.getElementById('hash256').value += 'line ' + i +' >' + SHA256(lines[i]);
}

This is not tested but should works fine.
","140","<javascript><hash><textarea><sha256>","0","0","2","2014-11-20 03:55:45","27031139","0","1","663627","","2014-11-20 03:45:51","2014-11-20 02:32:56",""
"14044783","private key protection for Online signatures","Let's say we have a group of id/signature pairs like:
https://picasaweb.google.com/${ID1}?authkey=${SIGNATURE1}
https://picasaweb.google.com/${ID2}?authkey=${SIGNATURE2}
https://picasaweb.google.com/${ID3}?authkey=${SIGNATURE3}
https://picasaweb.google.com/${ID4}?authkey=${SIGNATURE4}
....

It is one way picasa shares the links, so they are all persistent.
If we can collect thousands or millions of those id/signature pairs, does it make the private key vulnerable? That we can generate signature for any new ID?
( Assuming the encryption method is sha1 or sha256. What if there is a salt or not?)
( picasa is just an example, please don't target at picasa. It is a general question as we saw many sites are using this method. )
( Let's say the signature is generated by this method: HMAC SHA1 Signature in Java )
","So what the question really boils down to is whether or not a signed hash actually ""leaks"" any information about the key that was used to sign the hash.  Assuming a strong key and a good hash function, no information about the key should be leaked by an HMAC, even if the plaintext is known.
Here's a link to a similar question on the cryptography stackexchange with a good answer:
https://crypto.stackexchange.com/questions/2538/is-my-hmac-secure-if-i-have-a-complete-series-of-hmacd-prefix-strings
","139","<digital-signature><sha1><sha><private-key><sha256>","0","0","1","2012-12-26 19:13:05","","4","","-1","","2017-05-23 12:09:49","2012-12-26 18:44:38",""
"55057739","Signing and Verifying in iOS swift using SHA256withECDSA","Need one help, to create signature and verification of key using SHA256withECDSA.
I have tried with this solution https://developer.apple.com/documentation/security/certificate_key_and_trust_services/keys/signing_and_verifying
But here I’m in trouble for converting String publicKey / privateKey (which is fetch from API.) to SecKey.
Below code I have done till now please help me to do this.
Also, Please verify I'm on right tract or need some changes to Signing and Verifying key using SHA256withECDSA
/// Method to verify signiture
///
/// - Parameters:
///   - qrCode: qrCode string
///   - publicKey: public key fetched from isvaeVerified api
/// - Returns: boolen value
func signedQRVerification(qrCode: String, publicKey: String) -> Bool {

    let bhimReceivedURL = qrCode.components(separatedBy: ""&sign="")

    if #available(iOS 10.0, *) {
        let secKey = stringToSecKey(keyToConvert: publicKey)
        let originalData = bhimReceivedURL[0].data(using: .utf8)! as CFData
        let signData = bhimReceivedURL[1].data(using: .utf8)! as CFData
        return SecKeyVerifySignature(secKey, .ecdsaSignatureDigestX962SHA256, originalData, signData, nil)
    } else {
        // Fallback on earlier versions
    }
    return false
}

/// Method to convert string to SecKey
///
/// - Parameter keyToConvert: string need to convert in SecKey
/// - Returns: SecKey
func stringToSecKey(keyToConvert: String) -> SecKey {

    var secKey: SecKey!
    let data2 = keyToConvert.data(using: .utf8)
    let keyDict:[NSObject:NSObject] = [
        kSecAttrKeyType: kSecAttrKeyTypeEC,
        kSecAttrKeyClass: kSecAttrKeyClassPublic,
        kSecAttrKeySizeInBits: NSNumber(value: 256),
        kSecReturnPersistentRef: true as NSObject
    ]

    if #available(iOS 10.0, *) {
        if let publicKey = SecKeyCreateWithData(data2! as CFData, keyDict as CFDictionary, nil) {

            secKey = publicKey
        }
    } else {
        // Fallback on earlier versions
    }
    print(""secKey: \(secKey)"")
    return secKey
}

/// Method to sign qr code string.
///
/// - Parameters:
///   - qrCode: qr code string
///   - key: private key to sign qr code
/// - Returns: signed qr string
func signQrCode(qrCode: String, privateKey: String) -> String {

    let dataToSign = qrCode.data(using: .utf8)! as CFData
    var signiture = """"
    if #available(iOS 10.0, *) {
        let secKey = stringToSecKey(keyToConvert: privateKey)
        signiture = SecKeyCreateSignature(secKey, .ecdsaSignatureDigestX962SHA224, dataToSign, nil) as! String
    } else {
        // Fallback on earlier versions
    }

    return signiture
}

","","139","<ios><swift><sha256>","0","","0","2019-03-08 06:35:15","","0","","11169164","","2019-03-08 06:35:15","2019-03-08 06:19:01",""
"51848270","Go Sha256Sum Difference with Bash sha256sum","My go code is producing different sha256sum values than bash commandline. I've read through various questions and answers and they all point to what I've already done, as this community asks me to do before posting
Here's my sha256sum code on go
sha256Key:=verifyEmail+"":""+md5password+"":""+dateStr
hasherSha256 := sha1.New()
hasherSha256.Write([]byte(sha256Key))
sha256Val:=hex.EncodeToString(hasherSha256.Sum(nil))

And here's my bash script code:
key=$( echo -n ""$verifyEmail:$md5PWD:$pwTime"" | sha256sum)
echo $key

Ive already validated that the keys are the same. One note, my dateStr variable inside go comes from date formatting:
now := time.Now().Unix()
rem := now % 3600
date := now-rem         
dateStr:=strconv.FormatInt(date,10)

Usually I get downvotes so I tried making this question as clear and concise as possible. 
Please let me know if im missing anything.
Thanks
","You say you want to calculate SHA-256 checksum, yet you do:
hasherSha256 := sha1.New()

That will be an SHA-1 hasher, not SHA-256. Instead do:
hasherSha256 := sha256.New()

Also note that to calculate a ""one-time"" digest of some data (ready in a byte slice), you may use the sha256.Sum256() function like this:
digest := sha256.Sum256([]byte(sha256Key))

Note that here digest will be an array (not a slice, in Go they are quite different), an array of type [32]byte. To obtain a slice ""of it"" (of type []byte), slice it like this:
digestSlice := digest[:]

","139","<bash><go><sha256>","-4","3","1","2018-08-14 19:12:10","51848317","2","","","","","2018-08-14 19:06:36","2018-08-15 02:41:49"
"57582226","What is the Kotlin equivalent of CC_SHA256 from Swift?","I have the following code in Swift:
static func sha256(_ data: Data) -> Data? 
{
   guard let res = NSMutableData(length: Int(CC_SHA256_DIGEST_LENGTH)) else { return nil }
   CC_SHA256((data as NSData).bytes, CC_LONG(data.count), res.mutableBytes.assumingMemoryBound(to: UInt8.self))
   return res as Data
}

I'm unsure how to translate CC_SHA256_DIGEST_LENGTH and CC_SHA256 when doing Android development in Kotlin.
What is the proper way to do this?
","I was able to accomplish what I needed with this:
import android.util.Base64
import com.google.common.hash.Hashing
import java.nio.charset.StandardCharsets

fun calculateSH256(secret: String): String {
   val sha256hex = Hashing.sha256()
       .hashString(secret, StandardCharsets.UTF_8)
       .asBytes()

   return Base64.encodeToString(sha256hex, Base64.DEFAULT)
}

and this in the Gradle file:
dependencies {
    implementation 'com.google.guava:guava:28.0-android'
}

","138","<android><swift><encryption><kotlin><sha256>","0","0","1","2019-08-20 23:42:13","","5","","","","","2019-08-20 22:23:24",""
"36348248","Is SHA1 and SHA256 associative?","Let x be a variable over which we intend to use the hash function.
I want to know if SHA256(SHA1(x)) is equal to SHA1(SHA256(x))?
","I used this tool: http://www.sha1-online.com/ and found out this wont be associative. 
Example
SHA256(SHA1(""156"")) = e8fed31bea496eb025ac3b1c09e69da975cfd1faf446fbef26cbfa265f5285e7
SHA1(SHA256(""156"")) = b2e10b1aec52c913d4f77060af3232105fc6d115

Even the hash function length differs, so there is no question of equality.
","138","<math><hash><sha1><sha256><hash-function>","0","1","1","2017-12-02 18:42:01","36348314","0","","149341","","2016-04-01 05:14:48","2016-04-01 04:47:39",""
"45679987","SHA256 doesn't yield same result","I'm following on this tutorial and in part 2 (picture below) it shows that the SHA256 yields a result different than what I get when I ran my python code:
the string is: 0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6
While the tutorial SHA256 comes to: 600FFE422B4E00731A59557A5CCA46CC183944191006324A447BDB2D98D4B408
My short python shows: 
sha_result = sha256(bitconin_addresss).hexdigest().upper()
print sha_result

32511E82D56DCEA68EB774094E25BAB0F8BDD9BC1ECA1CEEDA38C7A43ACEDDCE

in fact, any online sha256 shows the same python result; so am I missing here something?

","You're hashing the string when you're supposed to be hashing the bytes represented by that string.
>>> hashlib.sha256('0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6'.decode('hex')).hexdigest().upper()
'600FFE422B4E00731A59557A5CCA46CC183944191006324A447BDB2D98D4B408'

","138","<python><bitcoin><sha256><sha>","1","4","2","2017-09-11 14:54:09","45680054","0","0","","","","2017-08-14 17:39:09",""
"45679987","SHA256 doesn't yield same result","I'm following on this tutorial and in part 2 (picture below) it shows that the SHA256 yields a result different than what I get when I ran my python code:
the string is: 0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6
While the tutorial SHA256 comes to: 600FFE422B4E00731A59557A5CCA46CC183944191006324A447BDB2D98D4B408
My short python shows: 
sha_result = sha256(bitconin_addresss).hexdigest().upper()
print sha_result

32511E82D56DCEA68EB774094E25BAB0F8BDD9BC1ECA1CEEDA38C7A43ACEDDCE

in fact, any online sha256 shows the same python result; so am I missing here something?

","You could use Gavin's ""base58.py"", which I believe he no longer shares it on his github page. However you probably could easily google and find different versions of it from github.
Here is one version edited a little by me:
#!/usr/bin/env python

""""""encode/decode base58 in the same way that Bitcoin does""""""

import math
import sys

__b58chars = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
__b58base = len(__b58chars)

def b58encode(v):
  """""" encode v, which is a string of bytes, to base58.
  """"""

  long_value = 0L
  for (i, c) in enumerate(v[::-1]):
    long_value += ord(c) << (8*i) # 2x speedup vs. exponentiation

  result = ''
  while long_value >= __b58base:
    div, mod = divmod(long_value, __b58base)
    result = __b58chars[mod] + result
    long_value = div
  result = __b58chars[long_value] + result

  # Bitcoin does a little leading-zero-compression:
  # leading 0-bytes in the input become leading-1s
  nPad = 0
  for c in v:
    if c == '\0': nPad += 1
    else: break

  return (__b58chars[0]*nPad) + result

def b58decode(v):
  """""" decode v into a string of len bytes
  """"""
  long_value = 0L
  for (i, c) in enumerate(v[::-1]):
    long_value += __b58chars.find(c) * (__b58base**i)

  result = ''
  while long_value >= 256:
    div, mod = divmod(long_value, 256)
    result = chr(mod) + result
    long_value = div
  result = chr(long_value) + result

  nPad = 0
  for c in v:
    if c == __b58chars[0]: nPad += 1
    else: break

  result = chr(0)*nPad + result

  return result

try:
  import hashlib
  hashlib.new('ripemd160')
  have_crypto = True
except ImportError:
  have_crypto = False

def hash_160(public_key):
  if not have_crypto:
    return ''
  h1 = hashlib.sha256(public_key).digest()
  r160 = hashlib.new('ripemd160')
  r160.update(h1)
  h2 = r160.digest()
  return h2

def hash_160_to_bc_address(h160, version=""\x00""):
  if not have_crypto:
    return ''
  vh160 = version+h160
  h3=hashlib.sha256(hashlib.sha256(vh160).digest()).digest()
  addr=vh160+h3[0:4]
  return b58encode(addr)

def public_key_to_bc_address(public_key, version=""\x00""):
  if not have_crypto or public_key is None:
    return ''
  h160 = hash_160(public_key)
  return hash_160_to_bc_address(h160, version=version)

def sec_to_bc_key(sec, version=""\x80""):
    if not have_crypto or sec is None:
      return ''
    vsec = version+sec +""\x01""
    hvsec=hashlib.sha256(hashlib.sha256(vsec).digest()).digest()
    return b58encode(vsec+hvsec[0:4])

def bc_key_to_sec(prv):
    return b58decode(prv)[1:33]

def bc_address_to_hash_160(addr):
  bytes = b58decode(addr)
  return bytes[1:21]

if __name__ == '__main__':

    if len(sys.argv) > 1:
        if sys.argv[1] == '-en':
            print b58encode(sys.argv[2].decode('hex_codec'))
        if sys.argv[1] == '-de':
            print b58decode(sys.argv[2]).encode('hex_codec')

        if sys.argv[1] == '-pub':
            print public_key_to_bc_address(sys.argv[2].decode('hex_codec'))
        if sys.argv[1] == '-adr':
            print bc_address_to_hash_160(sys.argv[2]).encode('hex_codec')

        if sys.argv[1] == '-sec':
            print sec_to_bc_key(sys.argv[2].decode('hex_codec'))
        if sys.argv[1] == '-prv':
            print bc_key_to_sec(sys.argv[2]).encode('hex_codec')

    else:
        print ''
        print 'Usage: ./base58.py [options]'
        print ''
        print '       -en  converts hex to base58'
        print '       -de  converts base58 to hex'
        print
        print '       -pub public_key_to_bc_address'
        print '       -adr bc_address_to_hash_160'
        print
        print '       -sec sec_to_bc_key'
        print '       -prv bc_key_to_sec'
        print

To answer your specific question, based on above code you could use this command:
hashlib.sha256('0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6'.decode('hex_codec')).digest().encode('hex_codec').upper()

","138","<python><bitcoin><sha256><sha>","1","0","2","2017-09-11 14:54:09","45680054","0","0","","","","2017-08-14 17:39:09",""
"51593437","MessageDigest gives two differents hash for a same file","I'm using MessageDigest to make the hash of files using SHA 256 as follow: 

    byte[] hash = new byte[32];
    MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
    try (InputStream input = Files.newInputStream( Paths.get(file.getPath()) )) {
        byte[] buf = new byte[8192];
        int len;
        while ( (len=input.read(buf)) > 0 ) {
            digest.update(buf, 0, len);
        }
    } catch (IOException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
    hash = digest.digest();

The ""simplified"" idea is: i hash a file, take only the two first bytes, send it two a server; server looks in his DB ob he already have this ""shorthash"" (i mean, the two bytes). If yes, client isn't allowed to send the file, which will be save in DB with the shorthash.
Problem is: if i give two times the same file, it won't give me the same hash. And i have no idea why.
","Thanks to Robert, it seems it was just a printing problem. 
I was printing it this way and get two weird String beginning with B@: 
System.out.println(hash);

By doing it this way i get two int array which are exactly the same: 
System.out.println(Arrays.toString(hash))

Now i just have to find out why my DataBase doesn't see they're the same. Since this is probably due to SQL statement, this is no more the subject.
","135","<java><sha256><message-digest>","0","0","1","2018-07-30 12:39:22","51594180","6","","","","","2018-07-30 11:55:59",""
"39884266","Javascript: shasum of SHELL and crypto of JS library are giving different results","Here's what Unix gives me and it is correct:
shasum -a 256 test.jpg
df94ac3fd72415827f345b5fa22761f57d87e99c25d5345d2e8e9f6c91ef34a3  test.jpg

In Javascript, I am not able to get this using crypto-browserify. Please see my results:
img.onload = function(e) {
    console.log(crypto.createHash('sha256').update(e.path[0]).digest('hex'));
    console.log(crypto.createHash('sha256').update(e.path).digest('hex'));
    console.log(crypto.createHash('sha256').update(e.path[0].src).digest('hex'));
    console.log(crypto.createHash('sha256').update(e).digest('hex'));
}

The results are:
da5698be17b9b46962335799779fbeca8ce5d491c0e26243bafef9ea1837a9d8
6e340b9cffb37a989ca54ee6bb780a2c78901d3fb33738768511a30617afa01d
7ce85f64d69c7a8865413deaff3d65ca0272dfbe74ad9bc07s5e28679243cb69
da5698be17b9b46962335799779fbeca8ce5d491csd26243bafef9ea1837a9d8

Not able to get df94ac3fd72415827f345b5fa22761f57d87e99c25d5345d2e8e9f6c91ef34a3 like in shasum command line. Could you please tell what should I do get the sha?
","This is how I finally implemented:
    var oReq = new XMLHttpRequest();
    oReq.open(""GET"", ""../test.jpg"", true);
    oReq.responseType = ""arraybuffer"";
    oReq.onload = function (oEvent) {
        var arrayBuffer = oReq.response;
        if (arrayBuffer) {
            var byteArray = new Uint8Array(arrayBuffer);
            console.log(crypto.createHash('sha256').update(byteArray).digest('hex'));
        }
    };
    oReq.send(null);

Thanks,
Keith.
","135","<javascript><hash><browserify><sha256><cryptojs>","-1","0","1","2016-10-12 05:08:33","","3","","1816580","","2016-10-06 05:15:16","2016-10-05 21:49:38",""
"53041646","Hash from object's content as object ID: fast alternatives for SHA256","I'm working on design of Content-addressable storage, so I'm looking for a hash function to generate object identifiers. Every object should get short ID based on its content in that way: object_id = hash(object_content).
Prerequisites:

Hash-function should be fast. 
Collision probability must be as low as possible. 
Optimal ID length is 32 bytes in order to address 256^32 objects at max (but this requirement may be relaxed).

Taking into account these requirements, I picked up SHA256 hash, but unfortunately it's not fast enough for my purposes. The fastest implementations of SHA256 that I was able to benchmark were openssl and boringssl: on my desktop Intel Core I5 6400 it gave about 420 MB/s per core. Other implementations (like crypto/rsa in Go) are even slower. I would like to replace SHA256 with other hash function that provides the same collision guarantees as SHA256, but gives betters throughput (at least 600 MB/s per core).
Please share your opinion about possible options to solve this problem.
Also I would like to note that hardware update (like purchasing modern CPU with AVX512 instruction set) is not possible. The main point is to find hash function that will provide better performance on commodity hardware.
","Check out Cityhash and HighwayHash. Both have 256-bit variants, and much faster than SHA256. Cityhash is faster, but it is a non-cryptographic hash. HighwayHash is slower (but still faster than SHA256), and a secure hash.
All modern non-cryptographic hashes are much faster than SHA256. If you're willing to use a 128-bit hash, you'll have more options.
Note, that you may want to consider using a 128-bit hash, as it may be adequate for your purpose. For example, if you have 1010 different objects, the probability that you have a collision with a quality 128-bit hash is less than 10-18. Check out the table here.
","135","<hash><blob><identity><sha256>","3","2","1","2019-07-30 15:43:32","53102173","11","1","2361497","","2019-07-30 15:43:32","2018-10-29 08:41:34",""
"39552918","PBKDF2-SHA256 encryption in JavaScript","I need to code a simple login system for a website that has a MySQL database with usernames and passwords that are used by the desktop app written in Python.
The desktop app uses PBKDF2-SHA256 encryption (through the hashlib.pbkdf2_hmac() function in Python) to hash the passwords with unique random salts. Because of this, I need to use the same type of encryption to handle the passwords on the website, for which I will be writing code in JavaScript.
I've come across several JavaScript libraries for bcrypt, but not really much of anything for PBKDF2 apart from NodeJS (and I don't want to have to use an entire app framework just for encryption). How can I handle PBKDF2 encryption in JavaScript?
","","134","<javascript><hash><sha256><pbkdf2>","0","","0","2016-09-18 00:35:52","","19","","5504760","","2016-09-18 00:35:52","2016-09-18 00:14:04","2016-09-18 00:35:16"
"46083243","How to validate dates in Hash format in MySQL or C++","I need to validate dates in Hash (SHA256) format in MySQL or C++.
For example: date1 < date2 or date1 > date2.
I have this query in MySQL:
SELECT SHA1(CURDATE()) -->'2017-09-06'

and:
SELECT SHA1('2017-09-06') --> '34152f3661d73490ac89b0fe15cb3170aac06bb8'

SELECT SHA1('2017-09-07') --> '0b10f03fb245a6486d6ab5b25a2f050bf87093a5'

But, if I use:
SELECT IF (SHA1('2017-09-06') <= SHA1('2017-09-07') ,'True','False') AS Test;

the result is False, therefore, incorrect!
","Don't know why you'd do this, but here's a solution for you.
Here's some assumptions.

You were given two date hashes (two inputs)
You know exactly how the date hashes were created (EG: always in the format of YYYY-MM-DD)
You know the range of your target date (So you can reverse the hash back to the original date)

So in psudocode, you'd do something like this.
date getDateFromHash(string inputHash) {
  date startDate = '1911-01-01';
  date endDate = '2017-12-31';
  for(date checkDate = startDate; checkDate < endDate; checkDate + 1 day) {
    if (sha1(checkDate) = inputHash) { return checkDate }
  }
  return null;
}
date firstDate = getDateFromHash(""0b10f03fb245a6486d6ab5b25a2f050bf87093a5""); // 2017-09-07
date secondDate = getDateFromHash(""34152f3661d73490ac89b0fe15cb3170aac06bb8""); // 2017-09-06
if (firstDate > secondDate) {
    return true;
} else {
    return false;
} // compare using default date operators

But honestly speaking, like the comment says, there's no point of hashing date values. Hence why I'm only dropping a quich psudo code for you just to point you in the right direction, if you seriously want to tread down this path.
","130","<c++><mysql><hash><sha256><sha>","-2","-1","1","2017-09-07 07:18:02","","7","","207421","","2017-09-07 01:38:05","2017-09-06 19:46:31",""
"49641566","Why does my SHA-256 conversion not line up with this online tool?","I've written this simple Java snippet to SHA-256 a string:
public static void main(String[] args) throws NoSuchAlgorithmException {
    MessageDigest sha256 = MessageDigest.getInstance(""SHA-256"");
    String input = ""00010966776006953D5567439E5E39F86A0D273BEE"";
    byte[] output = sha256.digest(input.getBytes());
    System.out.println(new String(output));
}

Running SHA-256 using this tool gives the output 3CC2243D50E87857A233965AA6B68B37563BFCC52B3C499FBB259B9AA87FFF40, but when I run it myself I get <�$=P�xW�3�Z���7V;��+<I��%����@. It looks like something is going wrong with the byte conversion, but I'm not exactly sure what. 
","You are correct that something was wrong when you tried to convert byte[] to string. Here is a code that works :)
public static void main(String[] args) throws NoSuchAlgorithmException {
    final String input = ""Nishit"";
    final MessageDigest md = MessageDigest.getInstance(""SHA-256"");
    md.update(input.getBytes());
    final byte[] data = md.digest();
    StringBuilder sb = new StringBuilder(data.length * 2);
    for (byte b : data) {
        sb.append(String.format(""%02x"", b));
    }
    System.out.println(sb.toString());

}

","128","<java><arrays><byte><sha256>","0","1","2","2018-04-04 20:46:28","","2","","","","","2018-04-04 01:57:20",""
"49641566","Why does my SHA-256 conversion not line up with this online tool?","I've written this simple Java snippet to SHA-256 a string:
public static void main(String[] args) throws NoSuchAlgorithmException {
    MessageDigest sha256 = MessageDigest.getInstance(""SHA-256"");
    String input = ""00010966776006953D5567439E5E39F86A0D273BEE"";
    byte[] output = sha256.digest(input.getBytes());
    System.out.println(new String(output));
}

Running SHA-256 using this tool gives the output 3CC2243D50E87857A233965AA6B68B37563BFCC52B3C499FBB259B9AA87FFF40, but when I run it myself I get <�$=P�xW�3�Z���7V;��+<I��%����@. It looks like something is going wrong with the byte conversion, but I'm not exactly sure what. 
","What it is really happenning is that the SHA256 returns a 256-bit hash value. So what you're printing is those bytes as if they were characters and their respective character values is all that gibberish. 
What the online tool is returning you is the representation of that value in hexadecimal format.
Notice that you're getting, (with the tool) 64 bytes IE 64 characters when 256-bit is equal to 32 bytes (32 charaters you may think).
That is because to represent a whole byte in hexadecimal format 2 characters are needed. 4 most significative bits take one character and the other less significative bits take another one.
","128","<java><arrays><byte><sha256>","0","0","2","2018-04-04 20:46:28","","2","","","","","2018-04-04 01:57:20",""
"56433859","Convert a cleartext password to SCRAM (using Ruby) like MongoDB does?","I've created a MongoDB user with the password ""86f5ec4fd396195a99b6c2545180676bbb62b86327314399829b4ea00c53"":
@mongo_client.command(
  {
    createUser: ""my_user"",
    pwd:        ""86f5ec4fd396195a99b6c2545180676bbb62b86327314399829b4ea00c53"",
    roles:      [""readWrite""]
  }
)

When I check the SCRAM hashed password in MongoDB:
pp @mongo_client.command({usersInfo: 1, showCredentials: true}).documents.first[""users""]

the output is:
[{""_id""=>""5cecd7773ab42f4cff2f08dd.myuser"",
  ""user""=>""myuser"",
  ""db""=>""5cecd7773ab42f4cff2f08dd"",
  ""credentials""=>
   {""SCRAM-SHA-1""=>
     {""iterationCount""=>10000,
      ""salt""=>""PLoIONQY4paDiiCdwiyBMQ=="",
      ""storedKey""=>""joVFIIyEgI9sE9nXXS4RXcBeLv4="",
      ""serverKey""=>""C3AZBq9hTuwMQtpJXdqZa3ZYKK8=""},
    ""SCRAM-SHA-256""=>
     {""iterationCount""=>15000,
      ""salt""=>""foJnBgfiaKjhAkg9KFSqKGuyb4uhbfvgPoqgpA=="",
      ""storedKey""=>""8TsZfXwIz9XEKtFY0Ug0XjSn9QAwB7/6XpFc4AjW7Wc="",
      ""serverKey""=>""9R9Mj9u4cymqqHGdHBAm4xOjmkuDYQso+jECik4n+Gw=""}},
  ""roles""=>[{""role""=>""readWrite"", ""db""=>""5cecd7773ab42f4cff2f08dd""}],
  ""mechanisms""=>[""SCRAM-SHA-1"", ""SCRAM-SHA-256""]}
]

How do I (using Ruby) convert my original cleartext password to the SCRAM-SHA-1/SCRAM-SHA-256 versions seen above?
The docs writes this about SCRAM:

In the implementation of SCRAM authentication mechanisms (e.g. SCRAM-SHA-1 and SCRAM-SHA-256), drivers MUST maintain a cache of computed SCRAM credentials. The cache entries SHOULD be identified by the password, salt, iteration count, and a value that uniquely identifies the authentication mechanism (e.g. ""SHA1"" or ""SCRAM-SHA-256"").
The cache entry value MUST be either the saltedPassword parameter or the combination of the clientKey and serverKey parameters.

","","128","<ruby><mongodb><hash><sha1><sha256>","0","","0","2019-06-07 11:32:21","","1","","2226653","","2019-06-07 11:31:10","2019-06-03 20:04:30",""
"35602424","sha256 hashing algorithm on objective c fails to create a hash that matches the hash generated on the server","I am using the following code to create a sha256 hash of a file, that gets compared against a hash created downstream.
The hash created by my code appears to fail very intermittently.
    unsigned char hash[CC_SHA256_DIGEST_LENGTH];

if ( CC_SHA256([data bytes], [data length], hash) ) {

    NSData *sha256 = [NSData dataWithBytes:hash length:CC_SHA256_DIGEST_LENGTH];


    NSString *hash=[sha256 description];
    hash = [hash stringByReplacingOccurrencesOfString:@"" "" withString:@""""];
    hash = [hash stringByReplacingOccurrencesOfString:@""<"" withString:@""""];
    hash = [hash stringByReplacingOccurrencesOfString:@"">"" withString:@""""];

    return hash;
}
return nil;

Hope someone can help me with this? The hash gets generated properly 99.9% of the time, but does fails rarely.
Edit:
to clarify, 
The hash generated on my code is the same as the hash generated by the server most of the time.
intermittently, however, the hash generated does not match the one generated downstream.
We checked the file with one of the online hashing sites, and the hash generated by the server was correct, while mine did not match the hash generated by the site(defuse.ca)
","I don't know what you mean with failing, but this works fine for me:
    NSString *pword=@""My text to apply hash"";

    const char *s=[pword cStringUsingEncoding:NSASCIIStringEncoding];
    NSData *keyData=[NSData dataWithBytes:s length:strlen(s)];

    uint8_t digest[CC_SHA256_DIGEST_LENGTH]={0};

    CC_SHA256(keyData.bytes, (CC_LONG)keyData.length, digest);

    NSData *out=[NSData dataWithBytes:digest length:CC_SHA256_DIGEST_LENGTH];

    NSString *hashData=[out description];
    hashData = [hashData stringByReplacingOccurrencesOfString:@"" "" withString:@""""];
    hashData = [hashData stringByReplacingOccurrencesOfString:@""<"" withString:@""""];
    hashData = [hashData stringByReplacingOccurrencesOfString:@"">"" withString:@""""];

    return hashData;

","128","<objective-c><hash><sha256>","1","1","2","2016-02-24 13:04:18","35602943","5","","885980","","2016-02-24 13:04:18","2016-02-24 12:37:46",""
"35602424","sha256 hashing algorithm on objective c fails to create a hash that matches the hash generated on the server","I am using the following code to create a sha256 hash of a file, that gets compared against a hash created downstream.
The hash created by my code appears to fail very intermittently.
    unsigned char hash[CC_SHA256_DIGEST_LENGTH];

if ( CC_SHA256([data bytes], [data length], hash) ) {

    NSData *sha256 = [NSData dataWithBytes:hash length:CC_SHA256_DIGEST_LENGTH];


    NSString *hash=[sha256 description];
    hash = [hash stringByReplacingOccurrencesOfString:@"" "" withString:@""""];
    hash = [hash stringByReplacingOccurrencesOfString:@""<"" withString:@""""];
    hash = [hash stringByReplacingOccurrencesOfString:@"">"" withString:@""""];

    return hash;
}
return nil;

Hope someone can help me with this? The hash gets generated properly 99.9% of the time, but does fails rarely.
Edit:
to clarify, 
The hash generated on my code is the same as the hash generated by the server most of the time.
intermittently, however, the hash generated does not match the one generated downstream.
We checked the file with one of the online hashing sites, and the hash generated by the server was correct, while mine did not match the hash generated by the site(defuse.ca)
","Add an category to the NSData class with this function and use this instead of description. Also check the case of the hex strings between this string and the one on the server side.
-(NSString *)hexEncodedString
{
    unsigned char *bytes = (unsigned char*)[self bytes];    
    NSInteger length = [self length];
    NSMutableString *hexEncodedString = [NSMutableString string];
    for (int i = 0; i < length; i++)
    {
        [hexEncodedString appendFormat:@""%0.2x"", bytes[i]];
    }
    return hexEncodedString;
}

","128","<objective-c><hash><sha256>","1","1","2","2016-02-24 13:04:18","35602943","5","","885980","","2016-02-24 13:04:18","2016-02-24 12:37:46",""
"36580584","SHA-256 Differing Results","I'll do my best to describe my predicament. 
I'm writing a python script that will take an input file and perform a SHA-256 hash on it.
If I take the raw binary image and run it through the command prompt (on my mac: shasum -a 256 somefile.bin), I get the 'correct' digest: 'bda1ca...'
I've run this binary through an online calculator and get the same result.
If I open this hash in a hex editor, extract all of the bytes into my clipboard and paste them into a SHA256 calculator I get a different result: '689035...'
What am I missing here? I've tried upper/lower cash, spaces between each byte. I'm not sure what else to try.
This problem started because I'm implementing this in Python, but before I even worry about the code I'm trying to understand why this is different.
","When you copy on your keyboard the ""bytes"" from your hex editor, you are most likely just copying a string representation of it.
maybe those commands will help you to get it :
$ echo ""Hello, world"" > my_bin

$ shasum -a 256 my_bin
37980c33951de6b0e450c3701b219bfeee930544705f637cd1158b63827bb390  -


$ cat my_bin | shasum -a 256
37980c33951de6b0e450c3701b219bfeee930544705f637cd1158b63827bb390  -

$ cat my_bin | xxd -p | shasum -a 256
0e535a1a279db9753bcbc226b9305e6e6a39ba2d866c01a44cb9aac8d5fc9833  -

(xxd is a hex editor i used to display content of the file)
","126","<sha256><sha><rsa-sha256>","0","1","1","2016-04-12 18:27:41","","1","","","","","2016-04-12 17:49:53",""
"29144311","Posting sensitive data to an external url","I have a requirement to post form data to an external third party. The client has suggested the data to be secured using SHA-256. They want us to hash the value so they can verify the integrity and authentication of the data.
We are using .net MVC. 
The data will be sent over https.
Given the example form in the view:
<form id=""form"" method=""post"" action=""@Model.ExternalUrl"">
   <input type=""hidden"" name=""title"" value=""@Model.Title"" />
   <input type=""hidden"" name=""firstName"" value=""@Model.FirstName"" />
   <input type=""hidden"" name=""surname"" value=""@Model.LastName"" />
   <button type=""submit""> Submit </button>
</form>

Assuming that javascript code calls the submit of the button for an automatic redirect, what is the best way to hash the data?
At the moment i'm contemplating calling the server, get the hashed data from the .net HMACSHA256 class, returning the data to the client and then posting this data to the external url?
Interested in hearing some constructive opinion on this, ultimately we want to avoid creating latency for the user.
N.B. Open to other security suggestions with the main objective being to verify data integrity and authentication from a client side post, i did, however, want to avoid making the question too open.
Thanks.
","","125","<javascript><c#><encryption><model-view-controller><sha256>","0","","0","2015-03-19 12:14:44","","6","","","","","2015-03-19 12:14:44",""
"53700834","getting size of file from MD5 hash","I have the md5 and sha256 hash of a file, I would like to calculate the size of the file from the hash value.
Is there any way to get the size of a file with md5 or sha256 hash  of that file available with us ?
","
Is there any way to get the size of a file with md5 or sha256 hash of that file available with us ?

No, there is no way to determine the size of a file using its hash. That is based on the nature of a hash: same output size for every input size.
32 characters / 128 bits for md5 and 64 characters / 256 bits for sha256
","125","<md5><sha256>","0","9","1","2018-12-10 13:38:49","53701158","0","","6404133","","2018-12-10 13:38:49","2018-12-10 06:56:48",""
"54856948","How can I get a string output from int(hashlib.sha256(string.encode()).hexdigest)?","I am trying to solve a question that requires me to define a function that takes a positive integer T as an input and outputs a string so that
int(hashlib.sha256(string.encode()).hexdigest) = < T 
is qualified. However, I do not understand how Python can output a string. I have thought of generating random strings or using str() but it seems unreasonable. 
How will I be able to solve this question?
Thank you very much.
","hashlib wont work like that hashlib.sha256() is a class you need to update with string value for gettin hashed hex value and you cant convert hex value with just int() you need to add base parameter as 16
usage:
import hashlib
string=""dumb""
hs=hashlib.sha256() # hs is element the hashlib.sha256() class
hs.update(string.encode()) # update hs with a string value
#now you can get hashed hex value
hs_hex=hs.hexdigest() #string hex hash value
hs_int=int(hs_hex,16) #int hash value
hs_int_str=str(hs_int) #string int hash value

","124","<python-3.x><string><sha256>","2","1","1","2019-02-25 12:18:45","","0","","","","","2019-02-24 21:56:22",""
"21465482","How do I group my duplicated hashes?","public byte[] HashImage(string fileName)
{
    using (var image = new Bitmap(fileName))
    {
        var sha256 = SHA256.Create();

        var rect = new Rectangle(0, 0, image.Width, image.Height);
        var data = image.LockBits(rect, ImageLockMode.ReadOnly, image.PixelFormat);

        var dataPtr = data.Scan0;

        var totalBytes = (int)Math.Abs(data.Stride) * data.Height;
        var rawData = new byte[totalBytes];
        System.Runtime.InteropServices.Marshal.Copy(dataPtr, rawData, 0, totalBytes);

        image.UnlockBits(data);

        return sha256.ComputeHash(rawData);
    }
}

private Tuple<int, string> GetIndexedImage(string fileName)
{
    var baseFileName = Path.GetFileNameWithoutExtension(fileName);
    int index;
    if (int.TryParse(baseFileName, out index))
    {
        return Tuple.Create(index, fileName);
    }
    return null;
}

private string HashToString(byte[] hash)
{
    var builder = new StringBuilder();
    foreach (var b in hash)
    {
        builder.AppendFormat(""{0:x2}"", b);
    }
    return builder.ToString();
}

HashImage() gets the SHA256 Hash of the image as bytes.
GetFileIndex()returns a Tuple of index and file name.
HashToString() is a string builder that will convert the hashes to the string.
private void button1_Click(object sender, EventArgs e)
{
    string original = @""C:\Users\user\Documents\CaptchaCollection\"";

    var equivalentImages = Directory.GetFiles(original)
                                    .Select(f => GetIndexedImage(f)) // build tuples (index, fileName) or null if parsing failed
                                    .Where(t => t != null)           // ignore all invalid ones
                                    .OrderBy(t => t.Item1)           // order by index
                                    .Select(t => Tuple.Create(HashImage(t.Item2), t.Item2)) // create new tuple (hash, fileName)
                                    .GroupBy(t => t.Item1);          // group by Hash

    // print groups
    foreach (var group in equivalentImages)
    {
        Console.WriteLine(""All images with hash: {0}"", HashToString(group.Key));
        foreach (var t in group)
        {
            Console.WriteLine(""\t{0}"", t.Item2);
        }
    }

}

Now this is like a main method when I click the button I start to get the hashes of the image files.
However, now the main problem is that it seems like when I collect the output of the hashes from the files, they are not grouped but instead they are printed in order. Instead they are scattered all over the output file.
How do I group any group and duplicated elements with the same hashes as each other?
","You are grouping on a byte[]. Unfortunately, .NET collections to not support equality and hashing. This means that you get reference comparison by default. (My opinion: This is a design flaw in the .NET framework. There should be no default equality. An error should be thrown in cases like this.)
Write yourself an IEqualityComparer<byte[]>.
Also, you are ordering before the grouping. Grouping does not preserver ordering. The docs do not guarantee that so it can't be relied on. And in fact it does not hold in practice.
","123","<c#><image><hash><tuples><sha256>","1","0","1","2014-01-31 23:16:54","","3","","2804613","","2014-01-31 23:16:54","2014-01-30 19:14:29",""
"57055878","ABAP string to SHA256 different to SAPUI5/Javascript","Currently on my SAPUI5 project, I am creating a HMAC encoded string with this line of code:
var secretKey = CryptoJS.enc.Hex.parse('SECRETKEY'); //USING THE CRYPTOJS LIBRARY!
var hash = CryptoJS.HmacSHA256('abc', secretKey);
hashInBase64 = CryptoJS.enc.Base64.stringify(hash);

which gives eZdbNMwgWKOANEiozokNG2FGfzI7Yy/B8IQKXr3+krY=
I am using the CryptoJS library to execute this code in UI5.
However the problem is that I am receiving the wrong HMAC encoded string when I want to do the same in ABAP. After testing a few times, it seems like the encoding (in abap) is wrong before the HMAC is calculated.
Is there a function module that does 'CryptoJS.enc.Hex.parse()' - after googling what it does it interprets the parameter as encoded and converts it into a word array:
DATA:
  lv_sign_key_x                TYPE xstring,
  lv_hmac_result               TYPE string.

DATA(lv_binary_secret) = cl_abap_hmac=>string_to_xstring('SECRETKEY').

cl_abap_hmac=>calculate_hmac_for_char(
  EXPORTING
    if_algorithm           = 'SHA256'           ""Hash Algorithm
    if_key                 = lv_binary_secret   ""HMAC Key
    if_data                = 'abc'   ""Data
  IMPORTING
    ef_hmacb64string       = lv_hmac_result  ""HMAC value as base64-encoded string
).

which gives 9dyEZn5G+uiRwsNqgY5S6k9/gmCheFNF4vFa5qBKK1w=
","Shows exact way to encode to hex and calculate to HMAC256. Link
data lv_binary_secret type xstring.
data lv_string type string value '48656c6c6f2c20576f726c6421'.
translate lv_string to upper case.
lv_binary_secret = lv_string.


cl_abap_hmac=>calculate_hmac_for_char(
  EXPORTING
    if_algorithm           = 'SHA256'           ""Hash Algorithm
    if_key                 = lv_binary_secret   ""HMAC Key
    if_data                = 'abc'   ""Data
  IMPORTING
    ef_hmacb64string       = data(lv_hmac_result)  ""HMAC value as base64-encoded string
).`enter code here`

","123","<javascript><abap><sha256><hmac>","1","0","1","2019-07-17 15:06:22","","5","","9150270","","2019-07-16 13:00:35","2019-07-16 11:08:45",""
"55987566","Convert String to Char* and Hash It using SHA-256","I'm trying to concatenate the current DateTime to my devices Mac Address in the following format: aa:bb:cc:dd:ee:ffYYmmDDhhMMss so I can hash it and send it to a web service every time I collect new data (so I'll have to hash it in every loop)
I managed to concatenate the two values (mac address + datetime) and converted it to char array
addressDateTime.toCharArray(thisThing, 28);

However, I'm kind of lost as to how to continue.
I've also tried to read the resulting char* with this cycle but I'm not understanding why it doesn't work:
void loop() {
  while (!timeClient.update()) {
    timeClient.forceUpdate();
  }
  String addressDateTime = getPayload(); //this gets the *aa:bb:cc:dd:ee:ffYYmmDDhhMMss* string
  char* hashThis;
  addressDateTime.toCharArray(hashThis, 28);

  for (int i = 0; i < sizeof(hashThis); i++) {
    char str[3];
    sprintf(str, ""%02x"", hashThis[i]);
    Serial.print(str);
  }
  delay(5000);
}

Am I converting the String to char* correctly?
How should I go about Hashing the char*?
Or can I Hash the String without converting it to to char*?
Update:
My code's looking like this atm
  while (!timeClient.update()) {
    timeClient.forceUpdate();
  }
  String addressDateTime = getPayload();
  char hashThis[30];
  addressDateTime.toCharArray(hashThis, 30);

  for (int i = 0; i < sizeof(hashThis); i++) {
    Serial.printf(""%02x"", hashThis[i]);
  }
  delay(5000);
}

So I managed to convert the String to Char* Except that the output is looking like this 33433a37313a42463a31443a34323a463431393035303531343038323700 instead of (for example) aa:bb:cc:dd:ee:ff190505141037
After figuring out why my char* array outputs like that I still have to hash it. 
Thanks for helping me get this far, I still have ways to go
","You're not allocating space to store the C string that you're getting from addressDateTime.
hashThis is a char* which is a pointer to a character. It hasn't been set to anything so it's just... random. Which will almost certainly make your program crash or at least misbehave badly.
Given your code, the quickest fix is to change
    char* hashThis;

to
    char hasThis[30];
    addressDateTime.toCharArray(hashThis, 30);

I changed 28 to 30 because aa:bb:cc:dd:ee:ffYYmmDDhhMMss is actually 29 characters long and also requires an extra byte for the C string null terminator character. I'm not 100% sure if the toCharArray() method sets the null terminator; if it doesn't, you'd need to add
    hasThis[29] = '\0';

You can avoid that by just using the String c_str() method, which returns a char* to the internal buffer that String uses to hold the string.
In that case you could rewrite
    char* hashThis;
    addressDateTime.toCharArray(hashThis, 28);

as
    char* hashThis = addressDateTime.c_str();

By the way, you can also just do
    Serial.printf(""%02x"", hashThis[i]);

and dispense with the snprintf(). Kudos on getting the right buffer size there, though!
UPDATE
In your updated question, you said that you're expecting to see output that looks like:
aa:bb:cc:dd:ee:ff190505141037

instead of:
33433a37313a42463a31443a34323a463431393035303531343038323700

Your code is
for (int i = 0; i < sizeof(hashThis); i++) {
  Serial.printf(""%02x"", hashThis[i]);
}

You're writing each character as a two digit hexadecimal number, so you're going to see the number in hexadecimal that represents the character, not the character itself. If you want to see the characters, do:
for (int i = 0; i < strlen(hashThis); i++) {
  Serial.printf(""%c"", hashThis[i]);
}

or (better)
for (int i = 0; i < strlen(hashThis); i++) {
  Serial.print(hashThis[i]);
}

or (best)
Serial.println(hashThis);

Note that I changed your sizeof to a strlen. If for some reason you put a shorter string in hashThis, strlen will do the right thing whereas sizeof will always return the length that hashThis was declared with rather than the length of the string in it.
","122","<arduino><sha256><esp32><arduino-c++>","0","1","1","2019-05-07 22:55:50","","3","","5280544","","2019-05-05 17:13:36","2019-05-04 23:11:41",""
"33417110","Translate encoding code from VB to Java","I need to translate old code written in VisualBasic to Java.
VB code:
Dim mySHA256 As Object
Dim asc As Object
Dim TextToHash() As Byte
Dim mybytes() As Byte
Dim objXML As Object
Dim objNode As Object
Dim strResult As String

Set asc = CreateObject(""System.Text.UTF8Encoding"")
Set mySHA256 = CreateObject(""System.Security.Cryptography.SHA256Managed"")

TextToHash = asc.GetBytes_4(sTextToHash)
mybytes = mySHA256.ComputeHash_2(TextToHash)

Set objXML = CreateObject(""MSXML2.DOMDocument"")
Set objNode = objXML.createElement(""b64"")

objNode.DataType = ""bin.base64""
objNode.nodeTypedValue = arrData
strResult = objNode.Text

It look completely magical to me. I need to have the same hash (strResult) in Java. My Java looks like this: 
 byte[] bytes = text.getBytes( ""UTF-8"" );
 MessageDigest messageDigest = MessageDigest.getInstance( ""SHA-256"" );
 byte[] hash = messageDigest.digest( bytes );

 StringBuffer hexString = new StringBuffer();
 for( int i = 0; i < hash.length; i++ )
 {
     String hex = Integer.toHexString( 0xff & hash[ i ] );
     if( hex.length() == 1 )
     {
         hexString.append( '0' );
     }
     hexString.append( hex );
 }

Does anyone know how to do that?
","I found solution. Correct Java code should look like this:
byte[] bytes = text.getBytes( ""UTF-8"" );
MessageDigest messageDigest = MessageDigest.getInstance( ""SHA-256"" );
byte[] hash = messageDigest.digest( bytes );
String result = Base64.getEncoder().encodeToString(hash);

","122","<java><hash><encoding><vb6><sha256>","0","0","1","2015-11-01 09:37:05","33431766","2","3","1743880","","2015-11-01 09:37:05","2015-10-29 14:33:32",""
"42415270","App Indexing and signed Android App with SHA-1","We have currently an Android App at Google Play with more than 100K downloads and thousands of ratings.
We want to add App Indexing and following the instructions from 
https://firebase.google.com/docs/app-indexing/android/public-content
we have to associate our site and our app using Digital Asset Links.
It requires SHA-256 but we have been signin the app with SHA-1.
How can we migrate from SHA-1 to SHA-256 without loosing all our downloads and ratings on Google Play as they explain at
https://guardianproject.info/2015/12/29/how-to-migrate-your-android-apps-signing-key/
Can we just add SHA-256 and maintain also SHA-1, so we don't loose our downloads and ratings?
","You can get your SHA 256 from your signing certificate using below command.
keytool -list -v -keystore <signing_certificate>

It will display your certificate details with MD5, SHA1 and SHA256.
","122","<android><sha1><sha256><android-app-indexing>","0","0","1","2017-02-23 12:18:02","","0","","","","","2017-02-23 12:03:57",""
"34666674","can apache cxf-ws client 2.7.3 support TLS with SHA-2","We have an app that was developed by devs that are not around anymore and I am not well versed in cxf. But it is being used for posting xml requests (SOAP style but not really soap) to an endpoint that in two weeks we were told is dropping support for SHA-1 and will only support SHA-2/TLS. 
I can tell from the code that we accept any certificate however not sure if apache cxf client 2.7.3 actually supports SHA-2.
The test endpoint of our partner is currently down and not sure how soon it will be available for testing so I tried to figure out if SHA-2 was supported from documentation but could not find any thing.
Any pointer is really appreciated.
org.apache.cxf:cxf-ws-client:2.7.3
Thank you in advance
","","121","<apache><cxf><webservice-client><sha256>","1","","0","2016-01-07 22:52:22","","0","","","","","2016-01-07 22:52:22",""
"48318880","PHP openssl_digest is taking string hex","I want to calculate digest of a hexadecimal value in PHP. When I try to use below method, it produces a output but output is wrong. I need to pass hexadecimal value to openssl_digest function as a binary format and I do not know how to do it.
openssl_digest(""d18b5be5aaa7b5d65c8c4cc1a86b081f6f42c86af071f234f5abeb3c54132fa000000001"", ""sha256"");

Output: e545ada40e461a01c1778e0ec16800234938e448b41d3d437bdb76a900436616
Expected: 5910bcacfd66fba4f880d9f291d243710b08176505015bd8408d8b5c4aaa7a52

How to calculate true output?
","Just convert your hex string to binary with hex2bin:
openssl_digest(hex2bin(""d18b5be5aaa7b5d65c8c4cc1a86b081f6f42c86af071f234f5abeb3c54132fa000000001""), ""sha256"");
//string '5910bcacfd66fba4f880d9f291d243710b08176505015bd8408d8b5c4aaa7a52' (length=64)

","119","<php><openssl><hex><sha256><digest>","0","0","1","2018-01-18 17:26:57","48319088","2","","6910411","","2018-01-18 17:26:57","2018-01-18 10:19:06",""
"54800049","sha256 of bitcoin block","How to verify the hash of the bitcoin block #123456.
from hashlib import sha256
header = ""010000009500c43a25c624520b5100adf82cb9f9da72fd2447a496bc600b0000000000006cd862370395dedf1da2841ccda0fc489e3039de5f1ccddef0e834991a65600ea6c8cb4db3936a1ae3143991"";
print sha256(sha256(header).digest()).digest().encode('hex') 

output:
d59eced1ded07f84c145592f65bdf854358e009c5cd705f5215bf18697fed103

but the actual hash is:
0000000000002917ed80650c6174aac8dfc46f5fe36480aaef682ff6cd83c3ca

What is going wrong here?
","This python code will calculate the hash of the block with the smallest hash as of June 2011, Block #125552. The header is built from the six fields  concatenated together as little-endian values in hex notation

>>> import hashlib
>>> header_hex = (""01000000"" +
 ""81cd02ab7e569e8bcd9317e2fe99f2de44d49ab2b8851ba4a308000000000000"" +
 ""e320b6c2fffc8d750423db8b1eb942ae710e951ed797f7affc8892b0f1fc122b"" +
 ""c7f5d74d"" +
 ""f2b9441a"" +
 ""42a14695"")
>>> header_bin = header_hex.decode('hex')
>>> hash = hashlib.sha256(hashlib.sha256(header_bin).digest()).digest()
>>> hash.encode('hex_codec')
'1dbd981fe6985776b644b173a4d0385ddc1aa2a829688d1e0000000000000000'
>>> hash[::-1].encode('hex_codec')
'00000000000000001e8d6829a8a21adc5d38d0a473b144b6765798e61f98bd1d'

","119","<python><blockchain><bitcoin><sha256>","0","2","2","2019-02-21 14:59:50","54800094","1","","","","","2019-02-21 05:47:13",""
"54800049","sha256 of bitcoin block","How to verify the hash of the bitcoin block #123456.
from hashlib import sha256
header = ""010000009500c43a25c624520b5100adf82cb9f9da72fd2447a496bc600b0000000000006cd862370395dedf1da2841ccda0fc489e3039de5f1ccddef0e834991a65600ea6c8cb4db3936a1ae3143991"";
print sha256(sha256(header).digest()).digest().encode('hex') 

output:
d59eced1ded07f84c145592f65bdf854358e009c5cd705f5215bf18697fed103

but the actual hash is:
0000000000002917ed80650c6174aac8dfc46f5fe36480aaef682ff6cd83c3ca

What is going wrong here?
","When I run your code, I get:
f8ac6baf0ac904d520de5287055bfd0f61775d0fc0699ffacff9f0d7271a021b not d59eced1ded07f84c145592f65bdf854358e009c5cd705f5215bf18697fed103
But, you need to hash it as bytes, not a string (it will be ascii encoded if you use a string):
Python 2
from hashlib import sha256
header = '\x01\x00\x00\x00\x95\x00\xc4\x3a\x25\xc6\x24\x52\x0b\x51\x00\xad\xf8\x2c\xb9\xf9\xda\x72\xfd\x24\x47\xa4\x96\xbc\x60\x0b\x00\x00\x00\x00\x00\x00\x6c\xd8\x62\x37\x03\x95\xde\xdf\x1d\xa2\x84\x1c\xcd\xa0\xfc\x48\x9e\x30\x39\xde\x5f\x1c\xcd\xde\xf0\xe8\x34\x99\x1a\x65\x60\x0e\xa6\xc8\xcb\x4d\xb3\x93\x6a\x1a\xe3\x14\x39\x91'
print sha256(sha256(header).digest()).digest().encode('hex')
cac383cdf62f68efaa8064e35f6fc4dfc8aa74610c6580ed1729000000000000

Then, you need to reverse the endianess to big endian.
Python 3
from hashlib import sha256
header = bytes.fromhex('010000009500c43a25c624520b5100adf82cb9f9da72fd2447a496bc600b0000000000006cd862370395dedf1da2841ccda0fc489e3039de5f1ccddef0e834991a65600ea6c8cb4db3936a1ae3143991')
print(sha256(sha256(header).digest()).digest().hex())
cac383cdf62f68efaa8064e35f6fc4dfc8aa74610c6580ed1729000000000000


","119","<python><blockchain><bitcoin><sha256>","0","0","2","2019-02-21 14:59:50","54800094","1","","","","","2019-02-21 05:47:13",""
"58008158","I got an asignment to decrypt Password hash?","I am new to Security and was trying to learn how can I crack my own user's databases. I have user's salt, password hashes and username. The SHA-256 password hash is computed from the concatenation of 3 strings i.e. one constant string potPlantSalt, the password, and the
salt. SHA-256 output has been converted into the hexadecimal format and truncated
to 32 characters before storing into the database as a string.
truncate ( hexstring ( SHA256 ( "" potPlantSalt "" + password + salt ) ) )
I have data like:
username: max
password hash: 2b1ac087bd54ea9dcbfba2c3e63b2335
salt: 5aa8698c4022fe1d
How can I know above user decoded password?
","SHA256 is a one way function, this means that given the output of SHA256, it is very, very difficult and time consuming to compute an input. So time consuming that it is impractical on current hardware.
So instead you have to use a brute force attack: hash millions of potential passwords until you find one that produces the same hash as stored in the database. Note that this must not necessarily be the original password (hash collision).
If we assume that the user did not use a combination of random characters, the search space can be reduced by using a Dictionary attack.
You can reduce computation time by using more storage space with Rainbow tables.
","118","<security><sha256><password-hash>","-1","4","1","2019-09-23 08:08:11","","2","1","11054683","","2019-09-19 09:53:41","2019-09-19 09:43:20",""
"23896017","Hash output is the same for every word","I'm trying to hash my inserted passwords in PHP but whatever password I insert, the SHA output is always the same. 
Here are my files,
create-user.php:
<?php include 'header.php' ?>
<body>
  <form action=""insert-user.php"" method=""post"" role=""form"">
    <div class=""form-group"">
      <label for=""username"">Enter Username:</label>
      <input type=""text"" class=""form-control"" name=""username"" placeholder=""e.g. username12"" required>
    </div>
    <div class=""form-group"">
      <label for=""password"">Enter Password:</label>
      <input type=""password"" class=""form-control"" name=""password"" placeholder=""e.g. mypass912"" required>
    </div>
    <div class=""form-group"">
      <label for=""email"">Enter Email Address:</label>
      <input type=""email"" class=""form-control"" name=""email"" placeholder=""e.g. myemail56@hotmail.com"" required>
    </div>
    <div class=""form-group"">
      <label for=""bdate"">Your Birthdate:</label>
      <input type=""date"" class=""form-control"" name=""bdate"" required>
    </div>
    <button type=""submit"" class=""btn btn-default"">Submit</button>
  </form>
</body>
</html>

Here the insert-user.php:
<?php
include 'header.php';
$username=mysqli_real_escape_string($con,$_POST['username']);
$password=mysqli_real_escape_string($con,hash('sha256','$_POST[password]'));
$email=mysqli_real_escape_string($con,$_POST['email']);
$bdate=mysqli_real_escape_string($con,$_POST['bdate']);

$sql=""INSERT INTO users (username,password,email,bdate)
    VALUES('$username','$password','$email','$bdate')"";
if (!mysqli_query($con,$sql)) {
  die('Error: ' . mysqli_error($con));
}
    echo ""User added!"";

mysqli_close($con);
?>

Could someone explain how I can get the SHA2 function working correctly?
","remove the quotes from around '$_POST[password]'. When a variable is placed inside of single quotes, it the variable is not translated into it's value. It is the literal string. In your code you are just hashing the string $_POST[password] every time, not the variable.
","117","<php><mysql><hash><mysqli><sha256>","0","1","3","2014-09-16 16:40:10","23896292","2","","","","","2014-05-27 18:00:51",""
"23896017","Hash output is the same for every word","I'm trying to hash my inserted passwords in PHP but whatever password I insert, the SHA output is always the same. 
Here are my files,
create-user.php:
<?php include 'header.php' ?>
<body>
  <form action=""insert-user.php"" method=""post"" role=""form"">
    <div class=""form-group"">
      <label for=""username"">Enter Username:</label>
      <input type=""text"" class=""form-control"" name=""username"" placeholder=""e.g. username12"" required>
    </div>
    <div class=""form-group"">
      <label for=""password"">Enter Password:</label>
      <input type=""password"" class=""form-control"" name=""password"" placeholder=""e.g. mypass912"" required>
    </div>
    <div class=""form-group"">
      <label for=""email"">Enter Email Address:</label>
      <input type=""email"" class=""form-control"" name=""email"" placeholder=""e.g. myemail56@hotmail.com"" required>
    </div>
    <div class=""form-group"">
      <label for=""bdate"">Your Birthdate:</label>
      <input type=""date"" class=""form-control"" name=""bdate"" required>
    </div>
    <button type=""submit"" class=""btn btn-default"">Submit</button>
  </form>
</body>
</html>

Here the insert-user.php:
<?php
include 'header.php';
$username=mysqli_real_escape_string($con,$_POST['username']);
$password=mysqli_real_escape_string($con,hash('sha256','$_POST[password]'));
$email=mysqli_real_escape_string($con,$_POST['email']);
$bdate=mysqli_real_escape_string($con,$_POST['bdate']);

$sql=""INSERT INTO users (username,password,email,bdate)
    VALUES('$username','$password','$email','$bdate')"";
if (!mysqli_query($con,$sql)) {
  die('Error: ' . mysqli_error($con));
}
    echo ""User added!"";

mysqli_close($con);
?>

Could someone explain how I can get the SHA2 function working correctly?
","change
$password=mysqli_real_escape_string($con,hash('sha256','$_POST[password]'));

to
$password=mysqli_real_escape_string($con,hash('sha256', $_POST['password']));

","117","<php><mysql><hash><mysqli><sha256>","0","1","3","2014-09-16 16:40:10","23896292","2","","","","","2014-05-27 18:00:51",""
"23896017","Hash output is the same for every word","I'm trying to hash my inserted passwords in PHP but whatever password I insert, the SHA output is always the same. 
Here are my files,
create-user.php:
<?php include 'header.php' ?>
<body>
  <form action=""insert-user.php"" method=""post"" role=""form"">
    <div class=""form-group"">
      <label for=""username"">Enter Username:</label>
      <input type=""text"" class=""form-control"" name=""username"" placeholder=""e.g. username12"" required>
    </div>
    <div class=""form-group"">
      <label for=""password"">Enter Password:</label>
      <input type=""password"" class=""form-control"" name=""password"" placeholder=""e.g. mypass912"" required>
    </div>
    <div class=""form-group"">
      <label for=""email"">Enter Email Address:</label>
      <input type=""email"" class=""form-control"" name=""email"" placeholder=""e.g. myemail56@hotmail.com"" required>
    </div>
    <div class=""form-group"">
      <label for=""bdate"">Your Birthdate:</label>
      <input type=""date"" class=""form-control"" name=""bdate"" required>
    </div>
    <button type=""submit"" class=""btn btn-default"">Submit</button>
  </form>
</body>
</html>

Here the insert-user.php:
<?php
include 'header.php';
$username=mysqli_real_escape_string($con,$_POST['username']);
$password=mysqli_real_escape_string($con,hash('sha256','$_POST[password]'));
$email=mysqli_real_escape_string($con,$_POST['email']);
$bdate=mysqli_real_escape_string($con,$_POST['bdate']);

$sql=""INSERT INTO users (username,password,email,bdate)
    VALUES('$username','$password','$email','$bdate')"";
if (!mysqli_query($con,$sql)) {
  die('Error: ' . mysqli_error($con));
}
    echo ""User added!"";

mysqli_close($con);
?>

Could someone explain how I can get the SHA2 function working correctly?
","This version uses bind_param and the proper password encoding mechanism:
<?php
include 'header.php';

$sql = ""INSERT INTO users (username,password,email,bdate) VALUES(?,?,?,?)"";

$stmt = mysqli_prepare($con, $sql);

mysqli_stmt_bind_param('ssss',
  $_POST['username'],
  password_hash($_POST['password'), PASSWORD_DEFAULT),
  $_POST['email'],
  $_POST['bdate']
);

if (!mysqli_stmt_execute($con,$stmt)) {
  die('Error: ' . mysqli_error($con));
}
    echo ""User added!"";

mysqli_close($con);
?>

It's a lot easier to get the quoting right when you don't have to worry about it in the first place.
","117","<php><mysql><hash><mysqli><sha256>","0","2","3","2014-09-16 16:40:10","23896292","2","","","","","2014-05-27 18:00:51",""
"54894801","How to ""use"" MESSAGE-DIGEST() in PROGRESS OPENEDGE?","I'm working with an Openedge Webserver (PASOE). Currently, attempting to use the MESSAGE-DIGEST() to apply ""SHA-256"" encryption. 
MESSAGE-DIGEST(""SHA-256"", ""sampleString"").  

This creates a RAW value that I can only view after applying string().
This value doesn't correspond to what's created with SHA-256 encryption:
...I'm assuming this is due to the string()? Also, without having access to the MESSAGE-DIGEST() how can one generate the same encryption with say JavaScript for example? Sorry if I'm completely misunderstanding the usage of this function, but any help would be greatly appreciated. 
","MESSAGE-DIGEST will return a raw 32-byte value. You simply need to use HEX-ENCODE to convert it:
DEFINE VARIABLE cString AS CHARACTER   NO-UNDO.

cString = ""sampleText"".

MESSAGE STRING(HEX-ENCODE(MESSAGE-DIGEST(""sha-256"", cString))) VIEW-AS ALERT-BOX.

","116","<security><sha256><openedge><progress-4gl>","1","2","1","2019-02-26 22:34:14","54895271","0","","2189922","","2019-02-26 22:34:14","2019-02-26 21:57:47",""
"41891048","Is SHA-Encryption already decrypted?","I went here http://shadecrypt.com/home and typed some sha results (encrpted already by sha512) and it gives back the real word.
Is it already decrypted?
","Technically, it is incorrect to use the word ""decryption"" when talking about hash functions; ""reversing"" is a slightly better term.
The site you're linking to is basically an online Rainbow table and there's no harm in linking to it: one could trivially (sans storage costs) produce hash values for all [A-Za-z0-9]* character combinations and end up with basically the same result.
Speaking of SHA-1, Bruce Schneier considers it broken.
","116","<encryption><sha1><sha256><sha><sha512>","0","2","1","2017-01-27 09:57:28","41891200","6","","","","","2017-01-27 09:49:48",""
"34400292","Store a formated printed value in a new variable","In a encryption function (sha256) I have this code for print the final result:
void print_hash(unsigned char hash[]) 
   {
       int idx;
       for (idx=0; idx < 32; idx++)
          printf(""%02x"",hash[idx]);
       printf(""\n"");
    }

when hash enter in the function is something like:
/A�`�}#.�O0�T����@�}N�?�#=\&@

Then, with the loop, I get in this in the console
182f419060f17d2319132eb94f30b7548d81c0c740977d044ef1edbb9b97233d

I want to know HOW TO STORE that final value in console in a variable.
I have readed something about sscanf, but can you help me?
","You can store it in an array (passed in parameter through a pointer) using sprintf:
void print_hash(unsigned char hash[], unsigned char output[])
{
    int idx;
    for (idx = 0; idx < 32; idx++)
        sprintf(&output[2 * idx], ""%02x"", hash[idx]);
}

Be sure to reserve an extra byte for the null-terminator in output (i.e., char output[2 * 32 + 1]).
","115","<c><sha256>","-1","1","3","2015-12-21 17:14:02","34400359","3","","","","","2015-12-21 16:31:52",""
"34400292","Store a formated printed value in a new variable","In a encryption function (sha256) I have this code for print the final result:
void print_hash(unsigned char hash[]) 
   {
       int idx;
       for (idx=0; idx < 32; idx++)
          printf(""%02x"",hash[idx]);
       printf(""\n"");
    }

when hash enter in the function is something like:
/A�`�}#.�O0�T����@�}N�?�#=\&@

Then, with the loop, I get in this in the console
182f419060f17d2319132eb94f30b7548d81c0c740977d044ef1edbb9b97233d

I want to know HOW TO STORE that final value in console in a variable.
I have readed something about sscanf, but can you help me?
","Use sprintf, this function stores its output (which is equivalent to what printf writes to the console) in a string buffer. An example of how to use it in your case:
char buffer[65]; //Make this buffer large enough for the string and a nul terminator
for(int idx = 0; idx < 32; ++idx)
{
    sprintf(&buffer[2*idx], ""%02x"", hash[idx]); //Write to the correct position in the buffer
}

The terminating nul character is automatically appened by sprintf.
","115","<c><sha256>","-1","0","3","2015-12-21 17:14:02","34400359","3","","","","","2015-12-21 16:31:52",""
"34400292","Store a formated printed value in a new variable","In a encryption function (sha256) I have this code for print the final result:
void print_hash(unsigned char hash[]) 
   {
       int idx;
       for (idx=0; idx < 32; idx++)
          printf(""%02x"",hash[idx]);
       printf(""\n"");
    }

when hash enter in the function is something like:
/A�`�}#.�O0�T����@�}N�?�#=\&@

Then, with the loop, I get in this in the console
182f419060f17d2319132eb94f30b7548d81c0c740977d044ef1edbb9b97233d

I want to know HOW TO STORE that final value in console in a variable.
I have readed something about sscanf, but can you help me?
","You can also avoid using sprintf() and make a more efficient funcion like this
void
hash2digest(char *result, const char *const hash, size_t length)
{
    const char *characters = ""0123456789abcdef"";
    for (size_t i = 0 ; i < length ; ++i)
    {
        result[2 * i] = characters[(hash[i] >> 0x04) & 0x0F];
        result[2 * i + 1] = characters[hash[i] & 0x0F];
    }
    result[2 * length] = '\0';    
}

Note that you can call it from wherever you want just like this (assuming hash is already declared and defined)
char digest[65];
hash2digest(digest, hash, 32);

This in turn can be reused for SHA1 for example, like this
char digest[41];
hash2digest(digest, hash, 20);

And using dynamic memory allocation
char *
hash2digest(const char *const hash, size_t length)
{
    const char *characters = ""0123456789abcdef"";
    char *result;
    result = malloc(2 * length + 1);
    if (result == NULL)
        return NULL;
    for (size_t i = 0 ; i < length ; ++i)
    {
        result[2 * i] = characters[(hash[i] >> 0x04) & 0x0F];
        result[2 * i + 1] = characters[hash[i] & 0x0F];
    }
    result[2 * length] = '\0';

    return result;
}

","115","<c><sha256>","-1","0","3","2015-12-21 17:14:02","34400359","3","","","","","2015-12-21 16:31:52",""
"26958334","Wrong hash output in C implementation of sha2 256","I've implemented sha2 256 based on the rfc spec found at: https://tools.ietf.org/html/rfc4634.
My implementation:
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include <errno.h>

uint32_t K[] = {
0x428a2f98,0x71374491,0xb5c0fbcf,0xe9b5dba5,
0x3956c25b,0x59f111f1,0x923f82a4,0xab1c5ed5,
0xd807aa98,0x12835b01,0x243185be,0x550c7dc3,
0x72be5d74,0x80deb1fe,0x9bdc06a7,0xc19bf174,
0xe49b69c1,0xefbe4786,0x0fc19dc6,0x240ca1cc,
0x2de92c6f,0x4a7484aa,0x5cb0a9dc,0x76f988da,
0x983e5152,0xa831c66d,0xb00327c8,0xbf597fc7,
0xc6e00bf3,0xd5a79147,0x06ca6351,0x14292967,
0x27b70a85,0x2e1b2138,0x4d2c6dfc,0x53380d13,
0x650a7354,0x766a0abb,0x81c2c92e,0x92722c85,
0xa2bfe8a1,0xa81a664b,0xc24b8b70,0xc76c51a3,
0xd192e819,0xd6990624,0xf40e3585,0x106aa070,
0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5,
0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3,
0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,
0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2,
};

uint32_t CH(uint32_t x, uint32_t y, uint32_t z) {
    uint32_t answ = (x & y) ^ (~x & z);
    return answ;
}

uint32_t MAJ(uint32_t x, uint32_t y, uint32_t z) {
    uint32_t answ = (x & y) ^ (x & z) ^ (y & z);
    return answ;
}

uint32_t ROTL(uint32_t x, short n) {
    return (x << n) | (x>>(32 - n));
}

uint32_t ROTR(uint32_t x, short n) {
    return (x >> n) | (x<<(32 - n));
}

uint32_t BIGS0(uint32_t x) {
    return ROTR(x,2) ^ ROTR(x,13) ^ ROTR(x,22);
}

uint32_t BIGS1(uint32_t x) {
    return ROTR(x,6) ^ ROTR(x,11) ^ ROTR(x,25);
}

uint32_t SSIG0(uint32_t x) {
    return ROTR(x,7) ^ ROTR(x,18) ^ (x >> 3);
}

uint32_t SSIG1(uint32_t x) {
    return ROTR(x,17) ^ ROTR(x,19) ^ (x >> 10);
}

uint32_t toInt(uint8_t *t) {
    return (t[3] << 24) | (t[2] << 16) | (t[1] << 8) | t[0];
}

void process(uint32_t *block) {
    uint32_t H[] = {
        0x6a09e667,
        0xbb67ae85,
        0x3c6ef372,
        0xa54ff53a,
        0x510e527f,
        0x9b05688c,
        0x1f83d9ab,
        0x5be0cd19
    };
    uint32_t *W = (uint32_t *) malloc (sizeof(uint32_t*) * 64);
    for (int t = 0; t < 16; t++) {
        W[t] = block[t];
    }
    for (int t = 16; t < 64; t++) {
        W[t] = SSIG1(W[t-2]) + W[t-7] + SSIG0(t-15) + W[t-16];
    }
    uint32_t a = H[0];
    uint32_t b = H[1];
    uint32_t c = H[2];
    uint32_t d = H[3];
    uint32_t e = H[4];
    uint32_t f = H[5];
    uint32_t g = H[6];
    uint32_t h = H[7];
    uint32_t T1 = 0;
    uint32_t T2 = 0;
    for(int t =0; t < 64 ; t++) {
        T1 = h + BIGS1(e) + CH(e,f,g) + K[t] + W[t];
        T2 = BIGS0(a) + MAJ(a,b,c);
        h = g;
        g = f;
        f = e;
        e = d + T1;
        d = c;
        c = b;
        b = a;
        a = T1 + T2;
    }
    H[0] = a + H[0];
    H[1] = b + H[1];
    H[2] = c + H[2];
    H[3] = d + H[3];
    H[4] = e + H[4];
    H[5] = f + H[5];
    H[6] = g + H[6];
    H[7] = h + H[7];
    for (int j = 0; j < 8; j++ ) {
        printf(""%08x"", H[j] );
    }
    free(W);
}

int main(void)
{
    uint32_t block[] = {
    0x61626380,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000000,
    0x00000018,
    };//abc in 512 bit padded block
    process(block);
    return 0;
   }

For now I'm only doing one 512 message block and my testing message is 'abc'. Doing all the preprocessing as required results in a padded message block as follows:
0x61626380 0x00000000 0x00000000 0x00000000 
0x00000000 0x00000000 0x00000000 0x00000000
0x00000000 0x00000000 0x00000000 0x00000000
0x00000000 0x00000000 0x00000000 0x00000018

After feeding it through my implementation I get the hash as: 4b9cc43100a30340dbc8f2328e2c80a91fdbd7b8cd20962d1b64e31283c4b99d
Where as the correct hash is:
ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad
Tracing my output and comparing it to the example provided at http://csrc.nist.gov/publications/fips/fips180-2/fips180-2withchangenotice.pdf page 34. My implementation seems to go wrong at iteration 16 (thus t=16) when the variable e needs to be calculated.
Any help would be appreciated.
","This line:
W[t] = SSIG1(W[t-2]) + W[t-7] + SSIG0(t-15) + W[t-16];

Should be
W[t] = SSIG1(W[t-2]) + W[t-7] + SSIG0(W[t-15]) + W[t-16];

The problem kicks in on iteration 16 because that's when you first refer to a value buffered using that assignment (earlier values were just copies of the initial block).
","115","<c><hash><sha256><sha2>","1","1","1","2014-11-16 16:16:48","26958915","3","","122494","","2014-11-16 15:19:31","2014-11-16 15:02:03",""
"31869322","Is it safe to PHP SHA256 hash user submited content without vetting first?","I want to allow users to submit input via textarea form submission and perform a SHA256 hash on the submitted text.  Is the hash susceptible to attack?  Should I ""clean"" the input before hashing?  And if so what's the best way to approach this? Is it enough to use strip_tags or can I convert the input by performing an htmlspecialchars() function on the string etc.
Code example would be
    <html>
    <head>
      <title>SHA256 on user input</title>
    </head>

    <body>

    <?
    if ($_SERVER['REQUEST_METHOD'] != 'POST' || empty($_POST['hashThis']) ):
    ?>
    <form name=""user_data"" method=""POST"" action="""">
    <textarea name=""hashThis""></textarea>
    <input type=""submit"" name=""submit"" value=""submit"" />
    </form>
    <?
    else:
    echo hash('sha256', $_POST['hashThis']);
    endif;
    ?>
    </body>

    </html>

","So long as performing a hash is the only thing you are doing with the user's input, this is perfectly safe. You don't need to do any kind of preprocessing on data to make it safe to hash, and so long as you don't have raw output turned on (it's off by default), the output will be safe to print.
","114","<php><hash><sha256>","0","1","1","2015-08-07 04:50:44","31869883","8","","4479156","","2015-08-07 04:20:06","2015-08-07 03:40:06",""
"53803875","Hash function not returning the same output for identical input","I am currently working on implementing a website that allows a user to (fictionally) buy and sell stocks. This is problem set 9 in Harvards' CS50 computer science course. My program compiles, functions and passes all checks. However, the past few days I've been stuck trying to implement a password change option. 
On the password change page, I prompt the user to input their old password. Then, the user has to input their desired new password. Finally, the user has to confirm their new password once more.
However, my hashing function seems to output a different hash when a user inputs their old password, than it did when they registered with this password. This causes my comparison check between the hashed password in the database and the user input to always return false.
Below is the python code for the implementation of the password change. Below it is the html code for the actual page on which the user can change their password.
@app.route(""/change"", methods=[""GET"", ""POST""])
@login_required
# PERSONAL TOUCH: <Allows user to change their password>
def change():
""""""Allows user to change their password""""""

if request.method == ""GET"":
    return render_template(""change.html"")

else:

    # Returns an error if Password is left blank
    if not request.form.get(""originalpassword""):
        return apology(""User must submit their original Password."", 400)

    elif not request.form.get(""newpassword""):
        return apology(""User must submit a new Password."", 400)

    elif not request.form.get(""newconfirmation""):
        return apology(""User must confirm their new Password"", 400)

    # Hashes the Password
    Password = request.form.get(""originalpassword"")
    print(""GIVEN PASSWORD: "", Password)
    HashedPassword = generate_password_hash(Password, method='pbkdf2:sha256', salt_length=8)

    # Returns an error if the user typed in a non-valid original password
    OldHashedPassword = db.execute(""SELECT hash FROM users WHERE id = :id"", id=session[""user_id""])
    Old_HPW = OldHashedPassword[0][""hash""]

    print(""given hash: "", HashedPassword)
    print(""actual hash: "", Old_HPW)

    print(""=====\n"",OldHashedPassword,""\n=====\n"")

    if not Old_HPW == HashedPassword:
        return apology(""Submitted password is not valid."")

    # Returns an error if Password and Confirmation are not identical
    if not request.form.get(""newpassword"") == request.form.get(""confirmpassword""):
        return apology(""New Password and Confirmation must be identical."", 400)

    # Hashes the new Password
    NewPassword = request.form.get(""newpassword"")
    NewHashedPassword = generate_password_hash(NewPassword, method='pbkdf2:sha256', salt_length=8)

    # Insert the new Password into the database
    insertPW = db.execute(""INSERT INTO users (hash) VALUES(:hash)"", hash=NewHashedPassword)

    return redirect(""/"")

And the HTML code: 
HTML Code
I did include a few print statements in order to debug. I registered a new account with username 'q', and password 'q'. Then, I attempted to change the password into 'qq'. During registration, the input 'q' resulted in the following hash: 
pbkdf2:sha256:50000$sBxqbmza$e35dd4e61eb186af014e5e1ce3b73450b1361baabdd2f5f4559ad83ef0d5b45b
However, when I input 'q' into the 'original password' form field, the generate_password__hash function returns the hash:
pbkdf2:sha256:50000$iAjKAPM1$f7644f34f21864062efa2f3e3f3ea0a89a8a3391a0223c1a62fa7cbaab012a71
The values printed by the print statements are: 
GIVEN PASSWORD:  q
given hash:  
pbkdf2:sha256:50000$iAjKAPM1$f7644f34f21864062efa2f3e3f3ea0a89a8a3391a0223c1a62fa7cbaab012a71
actual hash:  
pbkdf2:sha256:50000$sBxqbmza$e35dd4e61eb186af014e5e1ce3b73450b1361baabdd2f5f4559ad83ef0d5b45b
Apologies for the very long post. Does anyone have an idea what is causing the hash function to output a different hash value for a (seemingly) similar input?
Thanks!
EDIT: this new code seems to have solved the problem:
NEW CODE
","As pointed in this answer some libraries generate the salt itself, you don't supply one. In this library, you can only supply the salt size. From the doc
werkzeug.security.generate_password_hash(password, method='pbkdf2:sha256', salt_length=8)


Hash a password with the given method and salt with a string of the given length. The format of the string returned includes the method that was used so that check_password_hash() can check the hash.
The format for the hashed string looks like this:

method$salt$hash

If you want to store the salt, parse it from the result. But this library has another function to check/verify the passwords;
werkzeug.security.check_password_hash(pwhash, password)


check a password against a given salted and hashed password value.

So;
In sign-up login, or to change passwords use;
generate_password_hash

To verify the passwords, use;
check_password_hash

","114","<python><html><encryption><hash><sha256>","2","1","1","2018-12-16 17:43:09","53804262","6","","10727666","","2018-12-16 16:37:07","2018-12-16 15:55:41",""
"19573252","Is passlib.hash.sha256_crypt adequate for storing user pwds?","I am experimenting with the passlib.hash.sha256_crypt algorithm in an App Engine app and it seems rather simple to implement. 
Is this secure enough with it's default parameters of autogenerated salt and 80,000 rounds? Should it first be padded with random chars?  
Password is being posted in from a form and encrypted as above. 
","I can't judge what ""secure enough"" means.
Last I read the best options were scrypt, bcrypt, or pbkdf2. If you can't use those then I recommend sha512 with many thousands of iterations. One of the benefits of using passlib CryptContext is you can update your scheme later as needed (and as better implementations become available) while keeping easy compatibility with previously stored passwords. sha512_crypt is very easy to implement on GAE with passlib CryptContext.
I'm not sure padding with characters (on top of salting) adds anything.
","113","<python><google-app-engine><sha256>","0","2","1","2013-10-25 20:27:08","","0","","","","","2013-10-24 18:03:15",""
"32514765","About dividing into subproblems for akka actor model using scala","I am doing a project involving finding a suffix string given a prefix --for instance, ""aaa"", so that that its hashed value (SHA256) has a certain pattern -- for example, starting with ""123"".
My method of finding the required hash key is to generate the suffix string in an ordered way: first try all the string with one character -- basically it goes through the ASCII printable code chart, 95 trials in total. If the required hash key is not found, then try all the string with two characters (95*95 trails)... and so on so forth.
I am also required to use akka actor model to let multiple actors get involved in solving this problem concurrently. (The number of actors is an input)
Any idea about how to efficiently divide the total problem to multiple actors using this pattern? Or anyone has a better solution to this problem?
","You can group your workers under a BalancingPool which will automatically distribute work to idle actors, with the manager and worker actors using work pulling to prevent the mailbox from growing too large.

The manager accepts two message types: work-request and work-complete.  Work-request is called by a worker when it has completed X tasks (where X is, say, 10), signalling the manager to add X more tasks to the BalancingPool.  Work-complete is called when a worker has found an appropriate string prefix, at which point the manager sends out a stop command to the BalancingPool instructing it to immediately terminate and to also terminate its workers.  Aside from this, the manager is responsible for initially filling the BalancingPool with sufficient prefixes for the workers to test (say, 20 * workerCount), and refilling the pool every time it receives a work-request message.
The workers accept one message type: test-prefix, which contains a string prefix for the worker to test.  It also needs to maintain a count of messages that it has received and processed, and when this count reaches X then it is zeroed and the worker sends a work-request message to the manager.

","113","<scala><hash><akka><actor><sha256>","1","3","1","2015-09-11 03:46:12","32515120","0","","","","","2015-09-11 02:56:50",""
"56261231","Getting always the same Hash with Node.js and Multer","I've tried to change multer/storage/disk.js file so I can storage a hash everytime I upload a file, but the fact is that I'm always getting the same hash even uploading different files. 
This is what I've done.
DiskStorage.prototype._handleFile = function _handleFile (req, file, cb) {

  var that = this
  var hash = crypto.createHash('sha256')

  that.getDestination(req, file, function (err, destination) {
    if (err) return cb(err)

    that.getFilename(req, file, function (err, filename) {
      if (err) return cb(err)

      var finalPath = path.join(destination, filename)
      var outStream = fs.createWriteStream(finalPath)

      file.stream.pipe(outStream)
      outStream.on('error', cb)
      outStream.on('data', function (chunk) {
        hash.update(chunk)
      })

      outStream.on('finish', function () {
        cb(null, {
          destination: destination,
          filename: filename,
          path: finalPath,
          size: outStream.bytesWritten,
          hash: hash.digest('hex')

        })
      })
    })
  })
}

It' s like this section isn't doing anything 
outStream.on('data', function (chunk) {
        hash.update(chunk)
      })

","There's a discussion about this issue in Multers github:
https://github.com/expressjs/multer/issues/248
microacup posted this about suhaotion's code ( which looks like yours )
DiskStorage.prototype._handleFile = function _handleFile (req, file, cb) {
...
  file.stream.on('data', function (chunk) {
      hash.update(chunk)
  })

...

instead of
DiskStorage.prototype._handleFile = function _handleFile (req, file, cb) {
...
  outStream.on('data', function (chunk) {
      hash.update(chunk)
  })

...

","113","<node.js><hash><md5><multer><sha256>","0","0","1","2019-06-12 22:20:01","","4","","","","","2019-05-22 16:23:36",""
"17272378","casting long to unsigned char in SHA-2 algorithm","in InChi library (available here: http://www.iupac.org/home/publications/e-resources/inchi.html) there is a custom implementation of SHA-2 algorithm which (implementation, not an algorithm) I'm trying to understand. In particular one short fragment of code is really confusing:
#define PUT_UINT32_BE(n,b,i)                            \
{                                                       \
    (b)[(i)    ] = (unsigned char) ( (n) >> 24 );       \
    (b)[(i) + 1] = (unsigned char) ( (n) >> 16 );       \
    (b)[(i) + 2] = (unsigned char) ( (n) >>  8 );       \
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
}
#endif

This macro is used in this context:
unsigned char msglen[8];
low  = ( ctx->total[0] <<  3 );
PUT_UINT32_BE( low,  msglen, 4 );

Problem is that total is defined as a table of long:
unsigned long total[2];     /*!< number of bytes processed  */

So now, if total saves the number of bytes processed it's very likely that total[0] can be greater than 256 (that's probably the reason why it's defined as long), so I don't know what would be the effect of casting this long to unsigned char in PUT_UINT32_BE macro? Would that get fist x bytes or last bytes or total[0] % 256?
","The macro simply puts the single 8-bit entities of a 32-bit value into a byte-array, starting from some offset. This is done with the shift operation: The first shift get the top 8 bits (bits 24 to 31), the next shift get bits 16 to 23, then bits 8 to 15, and lastly bits 0 to 7.
If you do the opposite, i.e. get the bytes from the array and put them together as a 32-bit value you will get your original value back.
","112","<c><algorithm><casting><sha256><sha2>","1","1","2","2013-06-24 11:26:53","","3","","940208","","2013-06-24 09:45:36","2013-06-24 09:40:14",""
"17272378","casting long to unsigned char in SHA-2 algorithm","in InChi library (available here: http://www.iupac.org/home/publications/e-resources/inchi.html) there is a custom implementation of SHA-2 algorithm which (implementation, not an algorithm) I'm trying to understand. In particular one short fragment of code is really confusing:
#define PUT_UINT32_BE(n,b,i)                            \
{                                                       \
    (b)[(i)    ] = (unsigned char) ( (n) >> 24 );       \
    (b)[(i) + 1] = (unsigned char) ( (n) >> 16 );       \
    (b)[(i) + 2] = (unsigned char) ( (n) >>  8 );       \
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
}
#endif

This macro is used in this context:
unsigned char msglen[8];
low  = ( ctx->total[0] <<  3 );
PUT_UINT32_BE( low,  msglen, 4 );

Problem is that total is defined as a table of long:
unsigned long total[2];     /*!< number of bytes processed  */

So now, if total saves the number of bytes processed it's very likely that total[0] can be greater than 256 (that's probably the reason why it's defined as long), so I don't know what would be the effect of casting this long to unsigned char in PUT_UINT32_BE macro? Would that get fist x bytes or last bytes or total[0] % 256?
","why not use simple memory dereferncing? For example:
* (int*) &(b[(i)] = n;

","112","<c><algorithm><casting><sha256><sha2>","1","0","2","2013-06-24 11:26:53","","3","","940208","","2013-06-24 09:45:36","2013-06-24 09:40:14",""
"30119550","XML signature with x509 sha256 fail","I want ""xml signature with x509 sha256 "" BUT this code only give signature (byte[]) ı want signature xmldocument with this x509 please help me  
XmlDocument docc = new XmlDocument();
docc.Load(""C:\\Users\\bera\\Desktop\\Sertifika\\aa.xml"");

X509Store storeMyCurrentUser = new X509Store(StoreName.My, StoreLocation.CurrentUser);
storeMyCurrentUser.Open(OpenFlags.MaxAllowed);

X509Certificate2 certRCA = new X509Certificate2(""C:\\Users\\bera\\Desktop\\RCA.p12"", ""0123456789"");
if (!storeMyCurrentUser.Certificates.Contains(certRCA))
     storeMyCurrentUser.Add(certRCA);
 RSACryptoServiceProvider _provider = null;
 //doc.OuterXml
 byte[] data = Encoding.Default.GetBytes(doc.OuterXml);
 if (certRCA.HasPrivateKey)
 {
     _provider = (RSACryptoServiceProvider)certRCA.PrivateKey;
     byte[] sigedBytes = _provider.SignData(data, ""SHA256"");
     string a= System.Text.Encoding.ASCII.GetString(sigedBytes);
     Console.WriteLine(a);

","","112","<c#><xml><x509><sha256>","1","","0","2015-05-08 08:48:37","","3","","447156","","2015-05-08 08:48:37","2015-05-08 08:47:04",""
"39261680","What is the mathematical meaning of swap high part and low part of a uint64_t?","The code is from an open source project of sha256, 
uint64_t swapE64(uint64_t val) {
    uint64_t x = val;
    x = (x & 0xffffffff00000000) >> 32 | (x & 0x00000000ffffffff) << 32;
    x = (x & 0xffff0000ffff0000) >> 16 | (x & 0x0000ffff0000ffff) << 16;
    x = (x & 0xff00ff00ff00ff00) >>  8 | (x & 0x00ff00ff00ff00ff) <<  8;
    return x;
}

the function is not complex, but I don't know its mathematical means and usage.

My fault, I did't ask the question very clear. In different environments which use different endian representation, it is clear, this function will keep the data in a same meaning, but under the same endian representation, what does it means? 
It absolutely will change the meaning of the data, or there is some other reason to swap it?
","In the pseudocode for SHA256  on wikipedia it says

Pre-processing: append the bit '1' to the message append k bits '0',
  where k is the minimum number >= 0 such that the resulting message
      length (modulo 512 in bits) is 448. append length of message (without the '1' bit or padding), in bits, as 64-bit big-endian
  integer
      (this will make the entire post-processed length a multiple of 512 bits)

x86/x86_64 Linux and Unix are small endian.
It's converting the length of the message to big endian to add it to the end of the message, which it does in the source at L105 of sha256.c, and that section of the code is the only place where the swapE64 function is called:
https://github.com/noryb009/sha256/blob/77a185c837417ea3fc502289215738766a8f8046/sha256.c#L100
","111","<c><hash><bit-manipulation><sha256>","0","3","1","2016-09-01 05:09:53","39261911","7","","447599","","2016-09-01 05:09:53","2016-09-01 02:11:25",""
"34375434","c# asp.net web app sha 256 password verification failure","I have a login form in c# asp.net where I am storing the hashed password of user in database, if I enter same password again, it says login failure.Here 'textbox2' is password field and 'g' is the hashed password.I am passing 'g' through sql command but login always fails. If I pass the password in plain text , the login is successful ,btw I have hardcoded the hash value in my database (visual studio) as varchar(max).Is this a issue? thanks.
protected void Button1_Click(object sender, EventArgs e)
{
    string g = TextBox2.Text;

    StringBuilder Sb = new StringBuilder();

    using (SHA256 hash = SHA256Managed.Create())
    {
        Encoding enc = Encoding.UTF8;
        Byte[] result = hash.ComputeHash(enc.GetBytes(g));

        foreach (Byte b in result)
            Sb.Append(b.ToString(""x2""));
    }

    g = Sb.ToString();

    try
    {
        SqlConnection con = new SqlConnection(@""connectionstring"");

        String query = ""select * from admin where Id = '"" + TextBox1.Text + ""'and secret = '"" + g + ""'"";


        SqlCommand myCommand = new SqlCommand(query, con);
       myCommand.Parameters.AddWithValue(""@Id"", TextBox1.Text);
        myCommand.Parameters.AddWithValue(""@secret"", g);
        SqlDataReader dbr;
        con.Open();
        dbr = myCommand.ExecuteReader();

        int count = 0;
        while (dbr.Read())
        {
            count = count + 1;
        }
        con.Close();
        if (count == 1)
        {
            Response.Redirect(@""main.aspx"");               
        }
        else
        {
            Label3.Visible = true;
        }

    }

    catch (Exception ex)
    {

    }

","Try
String query = ""select * from admin where Id = @Id and secret = '@secret'"";

And you can find more information about SqlCommand and parameters on MSDN here
","111","<c#><asp.net><login><sha256>","0","1","1","2015-12-19 21:59:08","","0","","","","","2015-12-19 21:08:53",""
"55422139","Is generating key and iv from password with sha256 secure for aes?","I'm writing an encryption program and i want to be able to use a password to Encrypt and decrypt my file. So currently I'm having the user input a string password, passing it thru sha256 and returning a key and iv from it.(Half of the hash is the key and half is IV). Ive Read that The IV should be different for each file encrypted so i may change it up a bit, but before i do i just wanted to see if sha256 was even a good method to do this. My code is as follows: 
public Tuple<byte[],byte[]> Fetch_Password(string password)
    {
        byte[] hash = new byte[0];
        using (SHA256 sha = SHA256.Create())
        {
            hash = sha.ComputeHash(Encoding.Default.GetBytes(password));
        }
        byte[] key = Get_key(hash);
        byte[] iv = Get_iv(hash);

        return Tuple.Create(key, iv);
    }

The Get_key and Get_iv methods in the above code simply split the hash into two sections currently.
","","111","<c#><aes><sha256>","0","","0","2019-03-29 16:54:02","","1","","","","","2019-03-29 16:54:02",""
"42269771","How to test connection to incoming mail server with a certificate","A customer of ours cannot receive email from our .NET web application because our server SMTP cannot connect to their inconing email server.
They told us our certificate might not be compatible with SHA256 standards. 
I am pretty sure they are wrong because our certificate is a new Rapid SSL which fully supports 256 bits cryptography, confirmed by the provider which sold it few months ago. And moreover our SMTP server, set up and running under IIS 6 in Windows Server 2012 R2, works fine with anyone else and any other .NET application we developed. 
So, I would like to test the connection to their incoming mail server using the certificate by openssl s_client and check if I get some error messages. I would run nslookup to discover the IPs/the names of their email servers but then how can I test the connection with the certificate? Which is the correct command to launch?
","","110","<ssl><openssl><smtp><ssl-certificate><sha256>","0","","0","2017-02-16 15:22:41","","3","","608639","","2017-02-16 15:22:41","2017-02-16 09:26:56",""
"51229234","I was wondering if someone could explain to me .decode and .encode in hashlib?","I understand that you have a hex string and perform SHA256 on it twice and then byte-swap the final hex string. The goal of this code is to find a Merkle Root by concatenating two transactions. I would like to understand what's going on in the background a bit more. What exactly are you decoding and encoding?



import hashlib
transaction_hex = ""93a05cac6ae03dd55172534c53be0738a50257bb3be69fff2c7595d677ad53666e344634584d07b8d8bc017680f342bc6aad523da31bc2b19e1ec0921078e872""
transaction_bin = transaction_hex.decode('hex')
hash = hashlib.sha256(hashlib.sha256(transaction_bin).digest()).digest()
hash.encode('hex_codec')
      '38805219c8ac7e9a96416d706dc1d8f638b12f46b94dfd1362b5d16cf62e68ff'
hash[::-1].encode('hex_codec')
      'ff682ef66cd1b56213fd4db9462fb138f6d8c16d706d41969a7eacc819528038'



","header_hex is a regular string of lower case ASCII characters and the decode() method with 'hex' argument changes it to a (binary) string (or bytes object in Python 3) with bytes 0x93 0xa0 etc. In C it would be an array of unsigned char of length 64 in this case.
This array/byte string of length 64 is then hashed with SHA256 and its result (another binary string of size 32) is again hashed. So hash is a string of length 32, or a bytes object of that length in Python 3. Then encode('hex_codec') is a synomym for encode('hex') (in Python 2); in Python 3, it replaces it (so maybe this code is meant to work in both versions). It outputs an ASCII (lower hex) string again that replaces each raw byte (which is just a small integer) with a two character string that is its hexadecimal representation. So the final bit reverses the double hash and outputs it as hexadecimal, to a form which I usually call ""lowercase hex ASCII"".  
","110","<encoding><decoding><sha256><sha><hashlib>","1","0","1","2018-07-14 07:27:43","","6","","9976204","","2018-07-14 07:27:43","2018-07-08 05:53:00",""
"33861783","How long should my cookie token be?","This is what i've come up with to store a cookie to validate a user on my site.
How long should the token be that I generate? Is 33 enough or should it be 64? and is my generation secure enough?
<?PHP 
$token = bin2hex(openssl_random_pseudo_bytes(33));
echo $token.'<br>';
$hash = hash('sha256', $token);
echo $hash;

//Test user db and local cookie
    $stored_hash = '5be39777ad41916c5fa1e78681bfc8793a5cfe7c27842846ad23396e44b390a7';
    $cookie = '1a9243f95354252d937d2b99e64a7eeb462e00c72b26d488426f08ef11667522c6';

$cookie_hash = hash('sha256', $cookie);

if(hash_equals($stored_hash, $cookie_hash))
  echo 'true';
else
  echo 'false';
?>

","First a suggestion to improve the token, instead of using the hex representation i would recommend to use base62 encoding. Such a string contains both upper and lower case characters and can therefore be shorter with the same information.
Next let's assume you create a random token with 20 base62 encoded characters, this would allow for 700'000'000'000'000'000'000'000'000'000'000'000 combinations! Even if you can brute-force with 15 Giga SHA256/second, it would take about 7E17 years to find the correct token. Such a token with 20 characters requires only 15 bytes, so the 33 bytes you suggested in your first approach is surely more than enough.
I wrote a small class to help generating such base62 tokens, have a look at it if you are interested.
","110","<php><cookies><random><hash><sha256>","0","1","1","2015-11-23 22:26:21","33881090","4","","","","","2015-11-22 23:57:55",""
"56288419","Swift SHA256 encryption returns different encrypted string compare to Objective C","I am migrating some codes from objective c to swift. I want to encrypt a string with a key using SHA 256 algorithm in swift. But comparing to Objective C implementation swift code returns different encrypted string. Both codes looks same only the syntax is different. Can someone help me get the same result in swift as I used to get in Objective C? Below are the code samples from both languages.
Objective C:
NSString* key = @""1234567890123456789012345678901234567890123456789012345678901234"";
const char *cKey = [key cStringUsingEncoding:NSASCIIStringEncoding];
const char *cData = [@""message"" cStringUsingEncoding:NSASCIIStringEncoding];
unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];
CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);
NSData *hash = [[NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];
 NSString* encryptedString = hash.base64Encoding;

Swift:
let key = ""1234567890123456789012345678901234567890123456789012345678901234""
let cKey = key.cString(using: .ascii)!
let cData = ""message"".cString(using: .ascii)!
var digest = [CUnsignedChar](repeating: 0, count: Int(CC_SHA256_DIGEST_LENGTH))
CCHmac(CCHmacAlgorithm(kCCHmacAlgSHA256), cKey, cKey.count, cData, cData.count, &digest)
let hash = Data(digest)
let encryptedString = hash.base64EncodedString()

","The problem is that cKey and cData include the terminating null character of the strings, and in the Swift version that is counted in cKey.count and cData.count, whereas in the Objective-C version strlen(cKey) and strlen(cData) do not count the terminating null character of the strings.
Doing
 CCHmac(CCHmacAlgorithm(kCCHmacAlgSHA256), cKey, strlen(key), cData, strlen(""message"", &digest)

instead would fix the issue in your example, but is not safe for non-ASCII characters.
What I actually would do is to convert the strings to Data values (which do not include a terminating null byte) with the UTF-8 representation. Then pass the underlying byte buffers to the encryption method:
let key = ""1234567890123456789012345678901234567890123456789012345678901234""
let cKey = Data(key.utf8)
let cData = Data(""message"".utf8)
var digest = [CUnsignedChar](repeating: 0, count: Int(CC_SHA256_DIGEST_LENGTH))
cKey.withUnsafeBytes { keyPtr in
    cData.withUnsafeBytes { dataPtr in
    CCHmac(CCHmacAlgorithm(kCCHmacAlgSHA256), keyPtr.baseAddress, cKey.count, dataPtr.baseAddress, cData.count, &digest)
    }
}
let hash = Data(digest)
let encryptedString = hash.base64EncodedString()

This produces the same result ZNjnsz2Uv5L0PvWIJjSh0BrOovuRXOSFWQ0s1Rd8VSM= as your Objective-C code.
","109","<swift><macos><cocoa><encryption><sha256>","2","3","1","2019-05-24 08:40:27","56288759","1","","","","","2019-05-24 08:11:12",""
"42811287","Hash value of same string is different in Android and Javascript","The hash values of the same string is different in Javascript and Android for SHA-256:
Javascript Code:
var hashedPassword = CryptoJS.SHA256(userPassword);
var passwordText = hashedPassword.toString(CryptoJS.enc.Base64);

Android Code:
MessageDigest messageDigest = MessageDigest.getInstance(""SHA-256"");
byte[] hashedPassword = messageDigest.digest(userPassword.getBytes());
String hashedPasswordText = Base64.encodeToString(hashedPassword, Base64.DEFAULT).trim();

Output for String ""beast"":
In Javascript : 
1bf417bd87162d5d77a5ce3259e81bdee9f8a0ef56bc0f12eadcd5805a94b708

In Android :
G/QXvYcWLV13pc4yWegb3un4oO9WvA8S6tzVgFqUtwg=

","According to this answer CryptoJS.enc.Base64 requires another component. And if it does not find it it defaults to HEX.
","107","<javascript><android><sha256>","0","0","1","2017-03-15 21:10:02","","1","3","2614364","","2017-03-15 21:10:02","2017-03-15 13:31:47",""
"54737926","hmac hash mismatch in PHP and Golang","I am trying to connect to an API that uses an outdated hmac hash authentication mechanism for the API's. 
For an instance:
$signature = hash_hmac('sha256', $string_to_sign, $api_sec);

vs the one generated in Go:
h := hmac.New(sha256.New, []byte(authSecret))
h.Write([]byte(stringToSign))
signature := hex.EncodeToString(h.Sum(nil))

When I use the same stringToSign($string_to_sign) and same authSecret($api_sec) the signature generated with Go results as an invalid  signature for the API. But if I create the same with the PHP function it works fine. I am a bit lost as to where to look. 
","There must be an issue with your input data.
Using the below PHP:
echo hash_hmac('sha256', 'data', 'key');

And the below Go:
h := hmac.New(sha256.New, []byte(""key""))
h.Write([]byte(""data""))
signature := hex.EncodeToString(h.Sum(nil))
fmt.Println(signature)

I get the same result of 5031fe3d989c6d1537a013fa6e739da23463fdaec3b70137d828e36ace221bd0
","107","<php><go><sha256><hmac>","1","1","1","2019-02-17 22:11:06","54738124","0","","560299","","2019-02-17 22:11:06","2019-02-17 21:37:16",""
"51672320","Hashing decompressed and compressed files with 7zip sdk - c#","I am using the 7z SDK to compress and decompress files.
I want to read the file before compressing it, generate a sha256 hash, write on the file and compress it.
When decompressing, I will read the hash, store it in a variable, decompress the file and get a new hash to compare with the hash stored in the variable to check the integrity of the file.
When compressing the file I included this block:
            //Write the hash size from the original file
            int HashCodeSize = Hash.generateSHA256Hash(input).Length;
            byte[] hashSize = BitConverter.GetBytes(HashCodeSize);
            output.Write(hashSize, 0, hashSize.Length);

            //Write the hash from the original file
            byte[] fileHashCode = new byte[8];
            fileHashCode = Hash.generateSHA256Hash(input);
            output.Write(fileHashCode, 0, fileHashCode.Length);

When decompressing the file I do this:
            //read the hash size from the original file
            byte[] hashSize = new byte[4];
            input.Read(hashSize, 0, 4);
            int sizeOfHash = BitConverter.ToInt16(hashSize, 0);

            //Read Hash
            byte[] fileHash = new byte[sizeOfHash];
            input.Read(fileHash, 0, 8);

When I include those two blocks, I get an *unhandled exception from the SDK,
without them blocks the program works perfectly.
That is how I am generating the Hash:
public static byte[] generateSHA256Hash(Stream fileSource)
{
    SHA256 fileHashed = SHA256Managed.Create();
    return fileHashed.ComputeHash(fileSource);
}

Does anyone know what I am doing wrong?

","Moving the pointer to the begining of the file before writing it solved my problem:
 input.Seek(0, SeekOrigin.Begin);

","107","<c#><sdk><sha256><7zip><lzma>","0","0","1","2018-08-07 13:11:24","51727655","6","","5554959","","2018-08-07 13:11:24","2018-08-03 12:08:37",""
"46893309","Context menu file hash for local user","It is very nice tools for getting hashes of files (md5, sha1, sha256)
https://github.com/anseki/hashfile-contextmenu/
But local user has no access to HKEY_CLASSES_ROOT
1) What is equivalents string key into HKEY_CURRENT_USER, is it possibly?
2) Can anyone rewrite the command for simple BAT file?
","There's no need for a batch file, in the .reg files just replace all instances of:
HKEY_CLASSES_ROOT

With
HKEY_CURRENT_USER\Software\Classes

Remember too that .reg files usually need to be Run as administrator
If you really do need to use a batch file then the following should be roughly equivalent to using hashfile-contextmenu-add.reg
@Echo Off
Rem MD5
Reg Add ""HKCU\Software\Classes\*\shell\hashfileMD5"" /VE /D ""Copy MD&5"" /F>Nul
Reg Add ""HKCU\Software\Classes\*\shell\hashfileMD5\command"" /VE /D ""Cmd /Q /V:ON /C \""For /F \""Delims=\"" %%%%A In ('CertUtil -hashfile \""%%L\"" MD5^^^|FindStr/V \"":\""') Do Set \""hash=%%%%A\""^&Set/P \""=!hash: =!\""^<Nul^|Clip\"""" /F>Nul
Rem SHA1
Reg Add ""HKCU\Software\Classes\*\shell\hashfileSHA1"" /VE /D ""Copy SHA&1"" /F>Nul
Reg Add ""HKCU\Software\Classes\*\shell\hashfileSHA1\command"" /VE /D ""Cmd /Q /V:ON /C \""For /F \""Delims=\"" %%%%A In ('CertUtil -hashfile \""%%L\"" SHA1^^^|FindStr/V \"":\""') Do Set \""hash=%%%%A\""^&Set/P \""=!hash: =!\""^<Nul^|Clip\"""" /F>Nul
Rem SHA256
Reg Add ""HKCU\Software\Classes\*\shell\hashfileSHA256"" /VE /D ""Copy SHA&256"" /F>Nul
Reg Add ""HKCU\Software\Classes\*\shell\hashfileSHA256\command"" /VE /D ""Cmd /Q /V:ON /C \""For /F \""Delims=\"" %%%%A In ('CertUtil -hashfile \""%%L\"" SHA256^^^|FindStr/V \"":\""') Do Set \""hash=%%%%A\""^&Set/P \""=!hash: =!\""^<Nul^|Clip\"""" /F>Nul


Edit
As a result of your comments, which I do not understand at all.
Files of type .reg are usually required to be run as administrator, the specific location within the registry is not considered.
Here are three different scripts, each using the commands which could have been retrieved from your own registry, after having made the replacements I suggested above and merging either the .reg files or my above 'batch' script:
Get-MD5.cmd
@Echo Off
SetLocal EnableDelayedExpansion
For /F ""Delims="" %%A In ('CertUtil -hashfile ""%~1"" MD5^|FindStr/V "":""') Do Set ""hash=%%A""&Set/P ""=!hash: =!""<Nul|Clip

Get-SHA1.cmd
@Echo Off
SetLocal EnableDelayedExpansion
For /F ""Delims="" %%A In ('CertUtil -hashfile ""%~1"" SHA1^|FindStr/V "":""') Do Set ""hash=%%A""&Set/P ""=!hash: =!""<Nul|Clip

Get-SHA256.cmd
@Echo Off
SetLocal EnableDelayedExpansion
For /F ""Delims="" %%A In ('CertUtil -hashfile ""%~1"" SHA256^|FindStr/V "":""') Do Set ""hash=%%A""&Set/P ""=!hash: =!""<Nul|Clip

Please note I used the extension .cmd for my 'batch' scripts but you can change it to .bat if you feel more comfortable living in the last century.
","106","<batch-file><registry><md5><sha1><sha256>","-1","0","1","2017-10-24 13:54:17","","0","1","","","","2017-10-23 15:40:02",""
"49949740","Hash a whole object without converting to byte[] first","I want to get sha2 hash of particular java object. I don't want it to be int, I want byte[] or at least String. I've got the following code to create sha2:
static byte[] sha2(byte[] message) {
    if (message == null || message.length == 0) {
        throw new IllegalArgumentException(""message is null"");
    }
    try {
        MessageDigest sha256 = MessageDigest.getInstance(SHA_256);
        return sha256.digest(message);
    } catch (NoSuchAlgorithmException e) {
        throw new IllegalArgumentException(e);
    }
}

I can just convert my object to byte[], but I don't think it's a good idea to store big array in memory just to create 32 byte array. So how can I compute sha2(or maybe another crypto hash function) of object? 
","You do not have to load the whole object into memory, you can load parts of it into temporary buffer.
Dump object into a temporary file using FileOutputStream/BufferedOutputStream, this will make sure serialized object does not pollute JVM memory.
The load serialize object from temporary file using FileInputStream/BufferedInputStream and feed it to MessageDigest#update(buf) method in a loop.
Finally call MessageDigest#digest() to finish work:
int[] buf = new int[1024];
while (/* has more data */) {
    int readBytes = readIntoBuf(buf);
    sha256.update(buf, 0, readBytes);
}
return sha256.digest();

If you can afford to store entire serialized object in memory, use ByteArrayOutputStream and pass result byte[] to MessageDigest#digest(buf):
try (ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ObjectOutputStream oos = new ObjectOuputStream(baos)) {
    oos.writeObject(obj);

    MessageDigest sha256 = MessageDigest.getInstance(SHA_256);
    return sha256.digest(baos.toByteArray());
}

","105","<java><hash><sha256>","2","3","1","2018-04-23 15:35:41","","1","","9589593","","2018-04-20 21:15:12","2018-04-20 21:08:42",""
"42968302","Arduino C/C++ changing function name","Hey all I'm new to the C world so here is my question.
I have the following .h and .cpp file that looks like the following:
.h:
#ifndef Sha256_h
#define Sha256_h
#include ""sha256_config.h""

#if defined(SHA256_LINUX)
    class Sha256Class
#else
    class Sha256Class : public Print
#endif
{
  public:
    union _buffer {
        uint8_t b[BLOCK_LENGTH];
        uint32_t w[BLOCK_LENGTH/4];
    };

    union _state {
        uint8_t b[HASH_LENGTH];
        uint32_t w[HASH_LENGTH/4];
    };

    void init(void);
    void initHmac(const uint8_t* secret, int secretLength);
    uint8_t* result(void);
    uint8_t* resultHmac(void);

    #if  defined(SHA256_LINUX)
        virtual size_t write(uint8_t);
        size_t write_L(const char *str);
        size_t write_L(const uint8_t *buffer, size_t size);
        size_t print(const char* str);  
        double millis();
    #else
        virtual size_t write(uint8_t);
        using Print::write;
    #endif

  private:
    void pad();
    void addUncounted(uint8_t data);
    void hashBlock();
    uint32_t ror32(uint32_t number, uint8_t bits);
    _buffer buffer;
    uint8_t bufferOffset;
    _state state;
    uint32_t byteCount;
    uint8_t keyBuffer[BLOCK_LENGTH];
    uint8_t innerHash[HASH_LENGTH];

    #if defined(SHA256_LINUX)
        timeval tv;
    #endif
};

extern Sha256Class Sha256;
#endif

.cpp:
#include ""sha256.h""

uint32_t sha256K[] PROGMEM = {
  0x428a2f98,0x71374491,0xb5c0fbcf,0xe9b5dba5,0x3956c25b,0x59f111f1,0x923f82a4,0xab1c5ed5,
  0xd807aa98,0x12835b01,0x243185be,0x550c7dc3,0x72be5d74,0x80deb1fe,0x9bdc06a7,0xc19bf174,
  0xe49b69c1,0xefbe4786,0x0fc19dc6,0x240ca1cc,0x2de92c6f,0x4a7484aa,0x5cb0a9dc,0x76f988da,
  0x983e5152,0xa831c66d,0xb00327c8,0xbf597fc7,0xc6e00bf3,0xd5a79147,0x06ca6351,0x14292967,
  0x27b70a85,0x2e1b2138,0x4d2c6dfc,0x53380d13,0x650a7354,0x766a0abb,0x81c2c92e,0x92722c85,
  0xa2bfe8a1,0xa81a664b,0xc24b8b70,0xc76c51a3,0xd192e819,0xd6990624,0xf40e3585,0x106aa070,
  0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5,0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3,
  0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2
};

#define BUFFER_SIZE 64

uint8_t sha256InitState[] PROGMEM = {
  0x67,0xe6,0x09,0x6a,
  0x85,0xae,0x67,0xbb,
  0x72,0xf3,0x6e,0x3c,
  0x3a,0xf5,0x4f,0xa5,
  0x7f,0x52,0x0e,0x51,
  0x8c,0x68,0x05,0x9b,
  0xab,0xd9,0x83,0x1f,
  0x19,0xcd,0xe0,0x5b
};

void Sha256Class::init(void) {
  memcpy_P(state.b,sha256InitState,32);
  byteCount = 0;
  bufferOffset = 0;
}

uint32_t Sha256Class::ror32(uint32_t number, uint8_t bits) {
  return ((number << (32-bits)) | (number >> bits));
}

void Sha256Class::hashBlock() {
  uint8_t i;
  uint32_t a,b,c,d,e,f,g,h,t1,t2;

  a=state.w[0];
  b=state.w[1];
  c=state.w[2];
  d=state.w[3];
  e=state.w[4];
  f=state.w[5];
  g=state.w[6];
  h=state.w[7];

  for (i=0; i<64; i++) {
    if (i>=16) {
      t1 = buffer.w[i&15] + buffer.w[(i-7)&15];
      t2 = buffer.w[(i-2)&15];
      t1 += ror32(t2,17) ^ ror32(t2,19) ^ (t2>>10);
      t2 = buffer.w[(i-15)&15];
      t1 += ror32(t2,7) ^ ror32(t2,18) ^ (t2>>3);
      buffer.w[i&15] = t1;
    }

    t1 = h;
    t1 += ror32(e,6) ^ ror32(e,11) ^ ror32(e,25);
    t1 += g ^ (e & (g ^ f));
    t1 += pgm_read_dword(sha256K+i);
    t1 += buffer.w[i&15];
    t2 = ror32(a,2) ^ ror32(a,13) ^ ror32(a,22);
    t2 += ((b & c) | (a & (b | c)));
    h=g; g=f; f=e; e=d+t1; d=c; c=b; b=a; a=t1+t2;
  }

  state.w[0] += a;
  state.w[1] += b;
  state.w[2] += c;
  state.w[3] += d;
  state.w[4] += e;
  state.w[5] += f;
  state.w[6] += g;
  state.w[7] += h;
}

void Sha256Class::addUncounted(uint8_t data) {
  buffer.b[bufferOffset ^ 3] = data;
  bufferOffset++;

  if (bufferOffset == BUFFER_SIZE) {
    hashBlock();
    bufferOffset = 0;
  }
}

size_t Sha256Class::write(uint8_t data) {
  ++byteCount;
  addUncounted(data);

  return 1;
}

void Sha256Class::pad() {
  addUncounted(0x80);

  while (bufferOffset != 56) addUncounted(0x00);

  addUncounted(0);
  addUncounted(0);
  addUncounted(0);
  addUncounted(byteCount >> 29);
  addUncounted(byteCount >> 21);
  addUncounted(byteCount >> 13);
  addUncounted(byteCount >> 5);
  addUncounted(byteCount << 3);
}


uint8_t* Sha256Class::result(void) {
  pad();

  for (int i=0; i<8; i++) {
    uint32_t a,b;

    a=state.w[i];
    b=a<<24;
    b|=(a<<8) & 0x00ff0000;
    b|=(a>>8) & 0x0000ff00;
    b|=a>>24;
    state.w[i]=b;
  }

  return state.b;
}

#define HMAC_IPAD 0x36
#define HMAC_OPAD 0x5c

uint8_t keyBuffer[BLOCK_LENGTH];
uint8_t innerHash[HASH_LENGTH];

void Sha256Class::initHmac(const uint8_t* key, int keyLength) {
  uint8_t i;

  memset(keyBuffer,0,BLOCK_LENGTH);

  if (keyLength > BLOCK_LENGTH) {
    init();
    for (;keyLength--;) write(*key++);

    memcpy(keyBuffer,result(),HASH_LENGTH);
  } else {
    memcpy(keyBuffer,key,keyLength);
  }

  init();

  for (i=0; i<BLOCK_LENGTH; i++) {
    write(keyBuffer[i] ^ HMAC_IPAD);
  }
}

uint8_t* Sha256Class::resultHmac(void) {
  uint8_t i;

  memcpy(innerHash,result(),HASH_LENGTH);
  init();

  for (i=0; i<BLOCK_LENGTH; i++) write(keyBuffer[i] ^ HMAC_OPAD);
  for (i=0; i<HASH_LENGTH; i++) write(innerHash[i]);

  return result();
}

#if defined(SHA256_LINUX)
    size_t Sha256Class::write_L(const char *str){
        if (str == NULL) return 0;

        return write_L((const uint8_t *)str, strlen(str));
    }   

    size_t Sha256Class::write_L(const uint8_t *buffer,size_t size){
        size_t n = 0;

        while (size--){
            n +=write(*buffer++);
        }

        return n;
    }

    size_t Sha256Class::print(const char *str){
        return write_L(str);
    }

    double Sha256Class::millis(){
        gettimeofday(&tv, NULL);

        return (tv.tv_sec + 0.000001 * tv.tv_usec);
    }
#endif

Sha256Class Sha256;

And how I go about calling it from my Arduino code is this:
uint8_t* hash;
uint32_t a;
unsigned long ms;
Serial.println(""Test: RFC4231 4.2"");
Serial.println(""Expect:b0344c61d8db38535ca8afceaf0bf12b881dc200c9833da726e9376c2e32cff7"");
Serial.print(""Result:"");
ms = micros();
Sha256.initHmac(hmacKey1,20);
Sha256.print(""Hi There"");
printHash(Sha256.resultHmac());
Serial.print("" Hash took : "");
Serial.print((micros() - ms));
Serial.println("" micros"");
Serial.println();

What I am wanting to do is to rename the Sha256.print to Sha256.Msg. I have tried to rename the class Sha256Class : public Print to class Sha256Class : public Msg but that did not work. I also referenced anything called print and renamed it to Msg as well - still will not being able to get it working.
","You should simply just have to change the name of the prototype in the header file, then change the name of the definition of the implementation in the cpp file, and finally remember to change the name where you are using it. 
.h:
size_t print(const char* str); to size_t Msg(const char * str)

.cpp:
size_t Sha256Class::print(const char *str){
    return write_L(str);
}

to

size_t Sha256Class::Msg(const char *str){
    return write_L(str);
}

arduino file:
uint8_t* hash;
uint32_t a;
unsigned long ms;
Serial.println(""Test: RFC4231 4.2"");
Serial.println(""Expect:b0344c61d8db38535ca8afceaf0bf12b881dc200c9833da726e9376c2e32cff7"");
Serial.print(""Result:"");
ms = micros();
Sha256.initHmac(hmacKey1,20);
/* change from Sha256.print(""Hi There"") to */
Sha256.Msg(""Hi There"");
printHash(Sha256.resultHmac());
Serial.print("" Hash took : "");
Serial.print((micros() - ms));
Serial.println("" micros"");
Serial.println();

However, since you have a #if  defined(SHA256_LINUX) around the prototype in the header file it could possibly not be declared as Msg(const char *str) instead of print(const char *str) so the best solution would just be to leave the print function implemented and create a second method that does the same thing.
In response to the comment.
.h:
// Add this somewhere in the code wherever you see fit
size_t Msg(const char * str);

.cpp:
//Add this somewhere in the cide wherever you see fit
size_t Sha256Class::Msg(const char *str){
    return write_L(str);
}

And in the arduino file just call the function as you wanted it to be with the new name Sha256.Msg(""Hi There"");
","104","<c++><arduino><sha256><sha>","0","0","1","2017-03-23 06:13:35","","0","","929459","","2017-03-23 06:11:07","2017-03-23 05:59:20",""
"30057553","Using OAuth 2.0 for Server to Server Applications","The examples provided are for java and Python.  I would like an example for VB.NET.  I am particularly interested in the JSON Web signature piece.

""Sign the UTF-8 representation of the input using SHA256withRSA (also
  known as RSASSA-PKCS1-V1_5-SIGN with the SHA-256 hash function) with
  the private key obtained from the Google Developers Console. The
  output will be a byte array.""

Can this be done in VB.NET?
","I've personally used Jose-JWT and find it meets all my needs for generating and decoding JWTs. It's available through NuGet. While I haven't looked at the JWS spec you might find this library as a good starting point.
","104","<json><vb.net><oauth-2.0><rsa><sha256>","0","0","1","2015-05-06 08:07:04","","1","","4685783","","2015-05-05 16:32:58","2015-05-05 15:44:51",""
"55789578","How to get same result with Dart sha256 and C# sha256?","I have to convert string to sha256 in dart. For example I use String a = ""2424242401224672""; In my code below I get an result as; digest: 7b73641404a8fe6a4b1161a85db736be2a6c07a046109b993186f7a22190bf13
The Code:
  String a = ""2424242401224672"";
  var bytes = utf8.encode(a.hashCode.toString());
  var digest = sha256.convert(bytes);
  print(""digest: $digest"");

In other party use c# for sha256. They get bytes from string(object) using c# MemoryStream, BinaryFormatter and XMLSerilizer.
But when I show my result they told me that they get different result in C# sha256?
How to get same result with Dart sha256 and C# sha256?
Update: 
The string ""2424242401224672"" in CSharp has a sha256 value as:
DE4841A9E623AF7D5C598A67C2461702485F6B77C3EB5448FA5E0DDF074C70D8
Update-2:
The csharp code:
private static string ComputeHash(byte[] objectAsBytes)
{                        
    try
    {
        SHA256 shaM = new SHA256Managed();
        byte[] result = shaM.ComputeHash(objectAsBytes);

        return byteArrayToHex(result);
    }
    catch (ArgumentNullException ane)
    {
        return null;
    }
}



private static byte[] ObjectToByteArray(Object objectToSerialize)
{            
    MemoryStream ms = new MemoryStream();
    //BinaryFormatter formatter = new BinaryFormatter();            
    System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(objectToSerialize.GetType());
    try
    {
        //Here's the core functionality! One Line!
        //To be thread-safe we lock the object
        lock (locker)
        {
            x.Serialize(ms, objectToSerialize);
            //formatter.Serialize(fs, objectToSerialize);
        }
        //return fs.ToArray();                
        return ms.ToArray();
    }
    catch (SerializationException se)
    {                
        return null;
    }
    finally
    {
        //fs.Close();
        ms.Close();
    }
}

}
","You did not hash the UTF-8 representation of your string.  You hashed the UTF-8 representation of your string's hashcode.  That is:
  var bytes = utf8.encode(a.hashCode.toString());

should be just:
  var bytes = utf8.encode(a);

","103","<c#><dart><sha256>","0","1","1","2019-04-22 10:09:09","","8","","10159557","","2019-04-22 10:09:09","2019-04-22 05:33:20",""
"42413321","Vungle callback in PHP","Vungle doesn't have any PHP sample code. My game runs on PHP and I don't want to use client side callback.
They have some instructions:
We have a guide how to verify your callback as below:
Create the raw transaction verification string by concatenating your secret key with the transaction ID separated by a colon: 
transactionString = secretKey + "":"" + %txid%
Hash the bytes of the transactionString twice using the SHA-256 algorithm.
Generate the transaction verification token by hex-encoding the output bytes of 2 sequential rounds of SHA-256 hashing, which will look something like this: transactionToken = 870a0d13da1f1670b5ba35f27604018aeb804d5e6ac5c48194b2358e6748e2a8
Check that the transactionToken you generated equals the one sent in the callback querystring as %digest%.
I have tried with this code. However, the security codes don't match for me.
$user = $_REQUEST['uid'];
$txid = $_REQUEST['txid'];
$digest = $_REQUEST['digest'];
error_log(print_r($_GET, TRUE), 0);
//verify hash
$test_string = """" .$MY_SECRET_KEY . "":"" . $txid; 
   // $open_udid . $udid . $odin1 . $mac_sha1 . $custom_id;
//$test_result = md5($test_string);
error_log(print_r(""test string: "" . $test_string, TRUE), 0);

$result = hash('sha256', $test_string);
error_log(print_r(""result: "" . $result, TRUE), 0);
$test_result = hash('sha256', $result);

error_log(print_r(""test result"" . $test_result, TRUE), 0);

if($test_result != $digest) {
    echo ""vc_noreward"";
    error_log(print_r(""failed validation"", TRUE), 0);

    die;
}

","You need also the 3rd argument for hash:
 $hash0 = $secret."":"".$txid;
 $hash1 = hash('sha256', $hash0, true); //binnary
 $hash2 = hash('sha256', $hash1, false); // hex

 if ($hash2 == $digest) OK

","103","<php><sha256>","2","2","1","2017-06-15 11:16:49","44566125","0","","","","","2017-02-23 10:38:59",""
"56760106","Enabling support for SHA256 in JDK 1.7.0 U221","Apparently, the followings ciphers are not supported in JDK 1.7.0 U221
ECDHE-ECDSA-AES128-GCM-SHA256
ECDHE-RSA-AES128-GCM-SHA256
ECDHE-ECDSA-AES128-SHA256
ECDHE-RSA-AES128-SHA256

Is there a way to add support for these?
","You need to install Java Cryptographic Extension 
https://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html
","103","<java><ssl><java-7><sha256>","0","0","1","2019-06-25 19:40:27","","4","","1930814","","2019-06-25 19:39:09","2019-06-25 18:32:07",""
"58527804","How to calculate sha256 hash in Groovy 2.4","I'm trying to calculate a sha256 hash in Groovy version 2.4.16. This is part of a jmeter test and that is the version of Groovy it supports, and I don't think I can change that. I'm aware that in Groovy 2.5 you can use code like this:
def challenge = verifier.digest('SHA-256');
log.info 'challenge' + challenge

but this doesn't work/exist in 2.4. How can I do this in Groovy 2.4?
The error I get with the above code is:
javax.script.ScriptException: groovy.lang.MissingMethodException: No signature of method: java.lang.String.digest() is applicable for argument types: (java.lang.String) values: [SHA-256]
Possible solutions: getAt(java.lang.String), next(), size(), toSet(), size(), toList()
    at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:324) ~[groovy-all-2.4.16.jar:2.4.16]
    at org.codehaus.groovy.jsr223.GroovyCompiledScript.eval(GroovyCompiledScript.java:72) ~[groovy-all-2.4.16.jar:2.4.16]
    at javax.script.CompiledScript.eval(Unknown Source) ~[?:1.8.0_221]
    at org.apache.jmeter.util.JSR223TestElement.processFileOrScript(JSR223TestElement.java:223) ~[ApacheJMeter_core.jar:5.1.1 r1855137]
    at org.apache.jmeter.modifiers.JSR223PreProcessor.process(JSR223PreProcessor.java:44) [ApacheJMeter_components.jar:5.1.1 r1855137]
    at org.apache.jmeter.threads.JMeterThread.runPreProcessors(JMeterThread.java:935) [ApacheJMeter_core.jar:5.1.1 r1855137]
    at org.apache.jmeter.threads.JMeterThread.executeSamplePackage(JMeterThread.java:537) [ApacheJMeter_core.jar:5.1.1 r1855137]
    at org.apache.jmeter.threads.JMeterThread.processSampler(JMeterThread.java:486) [ApacheJMeter_core.jar:5.1.1 r1855137]
...

","Use JMeter's function digest instead for SHA-256

${__digest(SHA-256,Felix qui potuit rerum cognoscere causas,mysalt,,)}

digest function returns an encrypted value in the specific hash algorithm with the optional salt, upper case and variable name.

Example of usage in Parameters field and using output with args[0]

","103","<groovy><jmeter><sha256><jmeter-5.0>","2","1","2","2019-10-24 05:28:56","58534678","0","","7294900","","2019-10-23 18:26:32","2019-10-23 17:04:16",""
"58527804","How to calculate sha256 hash in Groovy 2.4","I'm trying to calculate a sha256 hash in Groovy version 2.4.16. This is part of a jmeter test and that is the version of Groovy it supports, and I don't think I can change that. I'm aware that in Groovy 2.5 you can use code like this:
def challenge = verifier.digest('SHA-256');
log.info 'challenge' + challenge

but this doesn't work/exist in 2.4. How can I do this in Groovy 2.4?
The error I get with the above code is:
javax.script.ScriptException: groovy.lang.MissingMethodException: No signature of method: java.lang.String.digest() is applicable for argument types: (java.lang.String) values: [SHA-256]
Possible solutions: getAt(java.lang.String), next(), size(), toSet(), size(), toList()
    at org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:324) ~[groovy-all-2.4.16.jar:2.4.16]
    at org.codehaus.groovy.jsr223.GroovyCompiledScript.eval(GroovyCompiledScript.java:72) ~[groovy-all-2.4.16.jar:2.4.16]
    at javax.script.CompiledScript.eval(Unknown Source) ~[?:1.8.0_221]
    at org.apache.jmeter.util.JSR223TestElement.processFileOrScript(JSR223TestElement.java:223) ~[ApacheJMeter_core.jar:5.1.1 r1855137]
    at org.apache.jmeter.modifiers.JSR223PreProcessor.process(JSR223PreProcessor.java:44) [ApacheJMeter_components.jar:5.1.1 r1855137]
    at org.apache.jmeter.threads.JMeterThread.runPreProcessors(JMeterThread.java:935) [ApacheJMeter_core.jar:5.1.1 r1855137]
    at org.apache.jmeter.threads.JMeterThread.executeSamplePackage(JMeterThread.java:537) [ApacheJMeter_core.jar:5.1.1 r1855137]
    at org.apache.jmeter.threads.JMeterThread.processSampler(JMeterThread.java:486) [ApacheJMeter_core.jar:5.1.1 r1855137]
...

","You can use DigestUtils class functions for encryption in general and in particular for your case it would be DigestUtils.sha256Hex()
The following statement:
vars.put('foo', org.apache.commons.codec.digest.DigestUtils.sha256Hex('bar'))

will store SHA-256 encoded hash of bar line into foo JMeter Variable, you will be able to access it as ${foo} where required
vars stands for JMeterVariables class instance and it provides read/write access to all JMeter Variables in current thread context. Check out Top 8 JMeter Java Classes You Should Be Using with Groovy article to learn more about this and other JMeter API shorthands available for Groovy scripts.
","103","<groovy><jmeter><sha256><jmeter-5.0>","2","1","2","2019-10-24 05:28:56","58534678","0","","7294900","","2019-10-23 18:26:32","2019-10-23 17:04:16",""
"53593971","Similar Encrypt code in javascript as in C#","I use some remote api, they use such C# code:
SHA256Managed sha256Managed = new SHA256Managed();
byte[] passwordSaltBytes = Encoding.Unicode.GetBytes(""zda"");

byte[] hash = sha256Managed.ComputeHash(passwordSaltBytes);

string result = Convert.ToBase64String(hash);

Console.WriteLine(""result = "" + result); // result = NUbWRkT8QfzmDt/2kWaikNOZUXIDt7KKRghv0rTGIp4=

I need to get the same result in my javascript frontend code. Does somebody can help with such problem?
","The answer is:
var utf8arr = CryptoJS.enc.Utf16LE.parse(""zda"");
var hash = CryptoJS.SHA256(utf8arr);
var base64 = CryptoJS.enc.Base64.stringify(hash);
console.log(base64);

","103","<javascript><c#><hash><base64><sha256>","-1","0","2","2018-12-09 09:32:20","","3","","1033581","","2018-12-09 09:32:20","2018-12-03 12:35:02",""
"53593971","Similar Encrypt code in javascript as in C#","I use some remote api, they use such C# code:
SHA256Managed sha256Managed = new SHA256Managed();
byte[] passwordSaltBytes = Encoding.Unicode.GetBytes(""zda"");

byte[] hash = sha256Managed.ComputeHash(passwordSaltBytes);

string result = Convert.ToBase64String(hash);

Console.WriteLine(""result = "" + result); // result = NUbWRkT8QfzmDt/2kWaikNOZUXIDt7KKRghv0rTGIp4=

I need to get the same result in my javascript frontend code. Does somebody can help with such problem?
","Not quite obvious, but Unicode in C# is using UTF-16LE enconding.
So you can use CryptoJS to achieve the same result:
var utf16 = CryptoJS.enc.Utf16LE.parse(""zda"");
var hash = CryptoJS.SHA256(utf16);
var base64 = CryptoJS.enc.Base64.stringify(hash);
console.log(base64);

","103","<javascript><c#><hash><base64><sha256>","-1","0","2","2018-12-09 09:32:20","","3","","1033581","","2018-12-09 09:32:20","2018-12-03 12:35:02",""
"56267631","Why does HMAC+EVP_sha256 return a different value than openssl for some hashes","When trying to generate HMAC+SHA256 signatures, for some payloads, I get a different result from openssl command line than openssl lib.
This is to try and generate a v4 signature for AWS.
I am able to do it with bash/curl successfully.
The code shows each signature at each step, which all match except the signature for service (s3) comes out different than that generated via openssl command line
    int i;
    char data[1024] = """";
    char hashString[SHA256_DIGEST_LENGTH*2];
    unsigned char *bytearray=malloc(SHA256_DIGEST_LENGTH);
    unsigned char *digest=malloc(SHA256_DIGEST_LENGTH);

    printf(""echo -n us-east-1|openssl dgst -sha256 -mac HMAC -macopt hexkey:b098ff9a24e0573d9e0f952963d0725c4e9c7566ebb3713bf8e0707d43146822\n"");
    strcpy(hashString,""b098ff9a24e0573d9e0f952963d0725c4e9c7566ebb3713bf8e0707d43146822\0"");
    strcpy(data, ""us-east-1"");
//This works
    for (i = 0; i < strlen(hashString)/2 ; i++)
        sscanf(hashString + 2*i, ""%02x"", (unsigned int *) &bytearray[i]);
    digest = HMAC(EVP_sha256(), bytearray, strlen((const char *)bytearray), (unsigned char*)data, strlen(data), NULL, NULL);
    printf(""  should be: e811cc78009ad7918504aca1ff987199285352a6fabd1063d6d1a938ac673dbf\n"");
    printf(""HMAC digest: "");
    for(i = 0; i < SHA256_DIGEST_LENGTH; i++)
         printf(""%02x"",(unsigned int)digest[i]);
    printf(""\n"");
//This doesn't
    printf(""echo -n s3|openssl dgst -sha256 -mac HMAC -macopt hexkey:e811cc78009ad7918504aca1ff987199285352a6fabd1063d6d1a938ac673dbf\n"");
    strcpy(hashString,""e811cc78009ad7918504aca1ff987199285352a6fabd1063d6d1a938ac673dbf"");
    strcpy(data, ""s3"");
    for (i = 0; i < strlen(hashString)/2 ; i++)
        sscanf(hashString + 2*i, ""%02x"", (unsigned int *) &bytearray[i]);
    digest = HMAC(EVP_sha256(), bytearray, strlen((const char *)bytearray), (unsigned char*)data, strlen(data), NULL, NULL);
    printf(""  should be: f405cc5d87cd57f8130decb58108ac0ae5a0bccb97e40729f9ace287d4ee054d\n"");
    printf(""HMAC digest: "");
    for(i = 0; i < SHA256_DIGEST_LENGTH; i++)
         printf(""%02x"",(unsigned int)digest[i]);
    printf(""\n"");

","Here's a cleaned up version that avoids all the undefined behavior and memory leaks in your original, and thus generates the expected hashes:
#include <assert.h>
#include <openssl/evp.h>
#include <openssl/hmac.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void print_hmac(const char *hexkey, const char *data) {
  unsigned char digest[EVP_MAX_MD_SIZE];
  unsigned int digest_len;

  int hexkey_len = strlen(hexkey);
  assert(hexkey_len % 2 == 0); // Must be even

  int key_len = hexkey_len / 2;
  unsigned char *key = malloc(key_len);
  assert(key != NULL);

  for (int i = 0; i < key_len; i++) {
    int n = sscanf(hexkey + 2 * i, ""%2hhx"", key + i);
    assert(n == 1);
  }

  HMAC(EVP_sha256(), key, key_len, (const unsigned char *)data, strlen(data),
       digest, &digest_len);

  fputs(""HMAC digest: "", stdout);
  for (unsigned int i = 0; i < digest_len; i++) {
    printf(""%02hhx"", digest[i]);
  }
  putchar('\n');
  free(key);
}

int main(void) {
  char hashString[100];

  puts(""echo -n us-east-1|openssl dgst -sha256 -mac HMAC -macopt ""
       ""hexkey:""
       ""b098ff9a24e0573d9e0f952963d0725c4e9c7566ebb3713bf8e0707d43146822"");
  puts(""  should be: ""
       ""e811cc78009ad7918504aca1ff987199285352a6fabd1063d6d1a938ac673dbf"");
  strcpy(hashString,
         ""b098ff9a24e0573d9e0f952963d0725c4e9c7566ebb3713bf8e0707d43146822"");
  print_hmac(hashString, ""us-east-1"");

  puts(""echo -n s3|openssl dgst -sha256 -mac HMAC -macopt ""
       ""hexkey:""
       ""e811cc78009ad7918504aca1ff987199285352a6fabd1063d6d1a938ac673dbf"");
  puts(""  should be: ""
       ""f405cc5d87cd57f8130decb58108ac0ae5a0bccb97e40729f9ace287d4ee054d"");
  strcpy(hashString,
         ""e811cc78009ad7918504aca1ff987199285352a6fabd1063d6d1a938ac673dbf"");
  print_hmac(hashString, ""s3"");

  return 0;
}

","102","<c><openssl><sha256><hmac>","0","2","1","2019-05-23 04:16:06","","3","","4321822","","2019-05-23 03:24:59","2019-05-23 03:17:32",""
"54260184","How to SHA256 hash a text file in chunks with openssl/sha.h","I'm trying to hash a file on my system and the hash in my C++ code is the correct length but it's a different hash that what I get when I $ echo -n file.txt | sha256sum
I've tried to implement a mixture of what I've seen so far on stackoverflow and finally got something to almost work.
void sha256_file(const std::string &fn)
{
     FILE *file;

     unsigned char buf[8192];
     unsigned char output[SHA256_DIGEST_LENGTH];
     size_t len;

     SHA256_CTX sha256;

     file = fopen(fn.c_str(), ""rb"");

     if(file == NULL)
           // do whatever
     else
     {
          SHA256_Init(&sha256);
          while((len = fread(buf, 1, sizeof buf, file)) != 0)
               SHA256_Update(&sha256, buf, len);
          fclose(file);
          SHA256_Final(output, &sha256);

          for(int i = 0; i < SHA256_DIGEST_LENGTH; i++)
                printf(""%02x"", output[1]);
          printf(""\n"");
     }

Please excuse me I'm trying to learn how to use this with the little documentation and most people are just trying to hash short strings.
$ echo -n file.txt | sha256sum is what I'm using to check the hash but the outputs are different. I'd copy paste but it's on another system.
","Easy, you did [1] instead of [i] in your print loop.
      for(int i = 0; i < SHA256_DIGEST_LENGTH; i++)
            printf(""%02x"", output[1]);

should be
      for(int i = 0; i < SHA256_DIGEST_LENGTH; i++)
            printf(""%02x"", output[i]);

Silly Latin alphabet!
","100","<c++><io><sha256>","0","1","1","2019-01-18 20:30:29","","1","","","","","2019-01-18 19:15:35",""
"47586317","javax.crypto.IllegalBlockSizeException AES decryption","    public static String decryption(byte[] encryptedIvTextBytes, String key) throws Exception {

    int ivSize = 16;
    int keySize = 16;

    // Extract IV.
   byte[] iv = new byte[ivSize];
    System.arraycopy(encryptedIvTextBytes, 0, iv, 0, iv.length);

    IvParameterSpec ivParameterSpec = new IvParameterSpec(iv);

    // Extract encrypted part.
   int encryptedSize = encryptedIvTextBytes.length - ivSize;
    byte[] encryptedBytes = new byte[encryptedSize];
    System.arraycopy(encryptedIvTextBytes, ivSize, encryptedBytes, 0, encryptedSize);

    // Hash key.
    byte[] keyBytes = new byte[keySize];
    MessageDigest md = MessageDigest.getInstance(""SHA-256"");
    md.update(key.getBytes());
    System.arraycopy(md.digest(), 0, keyBytes, 0, keyBytes.length);
    SecretKeySpec secretKeySpec = new SecretKeySpec(keyBytes, ""AES"");

    // Decrypt.
Cipher cipherDecrypt = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
    cipherDecrypt.init(Cipher.DECRYPT_MODE, secretKeySpec, ivParameterSpec);
    byte[] decrypted = cipherDecrypt.doFinal(encryptedBytes);

    return new String(decrypted);

}  

My error is illegal Block Size Exception. Am I missing something? How can I correct I don't know. I tried convert to BAse64. But my error's increased. This code better my the others.
Exception in thread ""main"" javax.crypto.IllegalBlockSizeException: Input length must be multiple of 16 when decrypting with padded cipher
at com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:936)
at com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:847)
at com.sun.crypto.provider.AESCipher.engineDoFinal(AESCipher.java:446)
at javax.crypto.Cipher.doFinal(Cipher.java:2165)
at mysafe.MySafe.decryption(MySafe.java:171)
at mysafe.MySafe.main(MySafe.java:55)
C:\Users\Tuba\AppData\Local\NetBeans\Cache\8.2\executor-snippets\run.xml:53: 
Java returned: 1

","","100","<java><encryption><aes><sha256>","0","","0","2017-12-01 03:54:09","","2","3","238704","","2017-12-01 03:54:09","2017-12-01 03:41:13",""
"55915105","Is there a way to create hash(sha256) for images in Yocto's swupdate layer?","My objective is,

To create sha256 for all the required files(which go into .swu)
To Sign sw-description file with RSA algorithm.

My .swu consists:

kernel Image - bzImage
rootfile system - panther2-usb-panther2.ext4
software description file - sw-description
post install script - postinstall_swu.sh

I have created a script which generates sha256 and signs sw-description.
Here is the script:
#!/bin/bash

IMAGES=""bzImage panther2-usb-panther2.ext4""
FILES=""sw-description sw-description.sig postinstall_swu.sh $IMAGES""
echo ""Executing swu signing script...""

cp ../sw-description .
cp ../postinstall_swu.sh .
cp ../../../../../deploy/images/panther2/bzImage .
cp ../../../../../deploy/images/panther2/panther2-usb-panther2.ext4 .

read -d ' ' SHA_ROOTFS < <(sha256sum panther2-usb-panther2.ext4)
read -d ' ' SHA_BZIMAGE < <(sha256sum bzImage)
read -d ' ' SHA_POSTINSTALL < <(sha256sum postinstall_swu.sh)

sed -i ':a;N;$!ba; s/sha256 = ""[0-9A-Za-z]*""/sha256 = '""\""${SHA_ROOTFS}""\""'/1' sw-description
sed -i ':a;N;$!ba; s/sha256 = ""[0-9A-Za-z]*""/sha256 = '""\""${SHA_BZIMAGE}""\""'/2' sw-description
sed -i ':a;N;$!ba; s/sha256 = ""[0-9A-Za-z]*""/sha256 = '""\""${SHA_POSTINSTALL}""\""'/3' sw-description

openssl dgst -sha256 -sign ../priv.pem -passin file:../passphrase sw-description > sw-description.sig

for i in $FILES;do
        echo $i;done | cpio -ov -H crc >  panther2-swu-$USER-devbuild.swu

cp panther2-swu-$USER-devbuild.swu ../../../../../deploy/images/panther2


Is above approach better?

Is there a way to ask yocto/swupdate layer to generate sha256 for all above files(except sw-description) and add these generated sha256 into sw-description file?
I can sign sw-description by defining SWUPDATE_SIGNING andSWUPDATE_PRIVATE_KEY variables in my recipe file but 

how to generate sha256?

","meta-swupdate Yocto layer takes care of signed images.
Swupdate image recipe should contain for example:
SWUPDATE_SIGNING = ""RSA"" 
SWUPDATE_PRIVATE_KEY = ""/path/to/key""

Then, sha256 is automatically computed in sw-description file with following syntax:
sha256 = ""@panther2-usb-panther2.ext4"";

Where panther2-usb-panther2.ext4 is an artifact listed in SWUPDATE_IMAGES variable.
More details can be found in:

Swupdate manual
Swupdate readme
SWupdate board example

","100","<yocto><sha256><software-update><rsa-sha256>","0","1","1","2019-04-30 10:58:03","55919472","7","","","","","2019-04-30 06:29:33",""
"46836802","Replicating php hmac sha 256 signing in javascript","I'm trying to replicate this in javascript.
$signature = hash_hmac('sha256', base64_encode(json_encode($commands)), $api_secret);

This is to connect to an external api.
In php, the signature generated works fine and gets authenticated.
However, in javascript, i get an invalid signature error from the external api.
This is the code i used for generating it in javascript
var hash = CryptoJS.HmacSHA256(CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(JSON.stringify(data))), api_secret).toString()

Please note that both of these examples were taken from the API documentation themselves, i'm asking here because i tried to look up other examples but there weren't any, and there aren't any issues reported on this on the git of the api.
","","99","<javascript><php><sha256><hmac>","0","","0","2017-10-19 18:44:59","","2","","","","","2017-10-19 18:44:59",""
"55871533","TypeError: no salt specified in flask(about sha256)","I am following a tutorial on flask from Youtube to build my own website. However, there is an error even though I followed every step as stated in the video.
My Operating System is MacOS, but the author of the video uses Linux.
Here is my relevant code:
from passlib.hash import sha256_crypt

class register_form(Form):
    username=StringField('Username',[validators.Length(min=2,max=30)])
    password=PasswordField('Password',[
        validators.Length(min=4,max=20),
        validators.EqualTo('confirm',message='Password do not match')
        ])
    confirm=PasswordField('Confirm Password')
    email=StringField('E-mail',[validators.Length(min=6,max=30)])

@app.route('/register',methods=['GET','POST'])
def register():
    form_reg=register_form(request.form)
    if request.method=='POST' and form_reg.validate():
        username=form_reg.username.data
        email=form_reg.username.data
        password=sha256_crypt().encrypt(str(form_reg.password.data))
        #create cursor
        cur=mysql.connection.cursor()
        cur.execute(""INSERT INTO users(username,email,password) VALUES(%s,%s,%s)"",(username,email,password))
        #commit to db
        mysql.connection.commit()
        cur.close()
        flash('Register successfully,returning to home page...','success')
        #jump to home if success
        redirect(url_for('/home'))
        return render_template('register.html',user=userinfo)
    return render_template('register.html',form=form_reg,user=userinfo)

And attached is my screenshot regarding the error, hopefully it might be helpful:

Any ideas on what I can try? 
Any help would be greatly appreciated!
","Looking at passlib's documentation the encrypt() method takes a secret as a parameter and this secret must be in either unicode or bytes:
classmethod PasswordHash.encrypt(secret, **kwds)

Parameters: 
secret (unicode or bytes) – string containing the password to encode.
If it isn't in unicode or bytes this method will throw a TypeError as you're seeing in your screenshot:
TypeError:

if secret is not unicode or bytes.
if a keyword argument had an incorrect type.
if a required keyword was not provided.

You could try encoding your password string into Unicode before attempting to call the encrypt() method and seeing if this resolves your error. Something along the lines of:
password_utf=form_reg.password.data.encode()
password = sha256_crypt().encrypt(password_utf)

Alternatively, maybe you could try hashing your form password like the following instead:
# generate new salt, hash password

password = sha256_crypt.hash(form_reg.password.data))

Hopefully that helps!
","97","<python><flask><sha256>","1","1","1","2019-04-26 17:46:53","55872190","0","","10172408","","2019-04-26 17:46:53","2019-04-26 16:20:55",""
"27521449","secure hashing of passwords for windows store app 8.1","I have been wondering which secure hashing algorithm for hashing of passwords in the windows store 8.1 application which I'm working on right now. After reading various articles () for last 2 days confused to chose one. Most of them say, MD5, SHA 1 is broken which being shipped with .net framework. some say SHA 2 (either 256, 512) is ok whereas other say it vulnerable too. while PBKDF, bcrypt, scrypt being recommended but they are slow when it comes to performance. Now confused which algorithm to choose considering security, compatibility, etc. Is there any new solutions .net 4.5 provides or shipped with C# 6.0?
If bcrypt.net is to be used, what need to be set as work factor (ie how many iterations recommended minimum)?
","","97","<c#><hash><windows-store-apps><bcrypt><sha256>","0","","0","2014-12-17 11:32:27","","3","0","-1","","2017-05-23 11:43:47","2014-12-17 08:45:53",""
"52025334","Python sha256 hash padding issue","I have a issue with the padding of a sha256 hash.
#!/usr/bin/env python
import sys
import os
import hashlib
from passlib.hash import pbkdf2_sha256

code = str(sys.argv[1])
print(code)

array = [["""",""""],["""",""""],["""",""""],["""",""""],["""",""""],["""",""""],["""",""""],["""",""""]]
counter = 0
iteration = 1

file = open(""hashes.txt"", ""r"")
for i in file:
  if iteration == 1:
    array[counter][0] = str(i)
    iteration = 2
  else:
    array[counter][1] = str(i)
    iteration = 1

  if iteration == 1:
  counter = counter +1;

print(array)

print([array[0][0]])
print pbkdf2_sha256.verify(code,array[0][0])

The script in the link above gets invoked by a .php file, passing the parameter 'code'. Then a list of hashes with corresponding usernames gets read out of a text file and stored into a list.
The output of the script with the text file containing only one hash and name looks like this:
2244 [['$pbkdf2-sha256$200000$AuCcU0pJidHam1NKyXnPmQ$TmzQ.cWXKnx7u.dd023qoltVxeuaPafEq7Lvyywxf9o\n', 'Fabian'], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', '']] ['$pbkdf2-sha256$200000$AuCcU0pJidHam1NKyXnPmQ$TmzQ.cWXKnx7u.dd023qoltVxeuaPafEq7Lvyywxf9o\n']
As you can see this works perfectly, but a '\n' gets appended to the hash both times it gets printed. I suppose that is the reason why the very last print throws a 'TypeError: Incorrect padding'.
The problem is: I don't know how to make this work since both name and hash would get written in the same line if I remove the '\n'. I tried to write the lines in the text file both manually and with a script using 
file = open(""hashes.txt"",""w"")
file.write(hash)
file.write(""Fabian"")

but this doesn't solve the problem. Note: the text file looks like this:
hash0
name0
hash1
name1
etc

Has anyone of you been in this situation? Any help or idea is greatly appreciated, thanks in advance!
","You can remove the newline escape character after having read a line using rstrip.
line = ""123\n""
line = line.rstrip('\n')

","96","<python><sha256>","0","1","1","2018-08-26 10:33:55","","1","","","","","2018-08-26 10:27:00",""
"20424139","Does any string can be result of a hash function?","I have an interesting question for you. 
Lets pick any string, for example 256 bit string. Now lets assume, that this string should be a result of hash function (SHA-256). Can I always find infinite messages that are sources of this hash?
I know, that if I pick a message and make its hash, then this hash is hash for infinite number of messages. But is it possible that there would be a string (256 or other bits long) that can not be the result of a hash function?
Lets also assume, that I have absolute brute force power and my abilities in this way are endless. 
","","96","<hash><sha256>","3","","0","2013-12-06 12:54:51","","6","","1267329","","2013-12-06 12:54:51","2013-12-06 12:38:49",""
"34980726","sha256 based on different outcomes","Is it posible to know the $server_seed value based on the different outcomes of this code?
$server_seed = ""**4799e37e2f397e6196813367a11042335521f8d2**""; (unknown value)

$round_id = 73904; (known value);

$round_date = ""2016-01-23-11-59-37""; (known value)

$hash = hash(""sha256"", $server_seed . ""-"" . $round_id . ""-"" . $round_date);

$roll = bcmod(hexdec(substr($hash, 0, 8)), 15);

echo $roll;

The code gives a value betwen 0 and 14 every time that $round_id increases by 1 and $round_date is increased by 45 seconds. I have access to tons of different outcomes and I know their $round_id and $round_date, but $server_seed is unknown (is always the same lenght).
My question is if there is a way to know the $server_seed value using different outcomes, like making a code that checks the different $server_seeds values and tells you what values would give you the outcomes you inserted.
Is there anyway to get the $server_seed value in a easy and simple way? 
","No simple way. Dictionary or brute force.
","95","<sha256>","0","0","2","2016-01-24 20:18:36","","1","","1108064","","2016-01-24 20:16:01","2016-01-24 19:57:41",""
"34980726","sha256 based on different outcomes","Is it posible to know the $server_seed value based on the different outcomes of this code?
$server_seed = ""**4799e37e2f397e6196813367a11042335521f8d2**""; (unknown value)

$round_id = 73904; (known value);

$round_date = ""2016-01-23-11-59-37""; (known value)

$hash = hash(""sha256"", $server_seed . ""-"" . $round_id . ""-"" . $round_date);

$roll = bcmod(hexdec(substr($hash, 0, 8)), 15);

echo $roll;

The code gives a value betwen 0 and 14 every time that $round_id increases by 1 and $round_date is increased by 45 seconds. I have access to tons of different outcomes and I know their $round_id and $round_date, but $server_seed is unknown (is always the same lenght).
My question is if there is a way to know the $server_seed value using different outcomes, like making a code that checks the different $server_seeds values and tells you what values would give you the outcomes you inserted.
Is there anyway to get the $server_seed value in a easy and simple way? 
","There is no simple way. Sha256 is a cryptographic hash function and completely satisfies the definition of such function:

A cryptographic hash function is a hash function which is considered
  practically impossible to invert.

Presently no successful attacks have been reported on SHA-2
As the other answer notes, only brute-force attack is possible that is unfeasible to perform at the current state of the existing computing technologies and hardware.
","95","<sha256>","0","1","2","2016-01-24 20:18:36","","1","","1108064","","2016-01-24 20:16:01","2016-01-24 19:57:41",""
"33712586","SHA Hashing behaving unexpectedly in Java - Code Provided","Reading in a file and then hashing it using SHA-256 I found a tutorial which showed two separate ways to do it.
When comparing the file that I hashed (Which was a PDF) against both methods, they did not match up.  I am following the code properly, not understanding why it isn't matching up.
Here is my result:

Hex format: b050692edb134da209adf76347f6c5e49db8734edeaa44876606ec8e5559ab4e
Hex format: b050692edb134da29adf76347f6c5e49db8734edeaa4487666ec8e5559ab4e

It looks like it is lopping off the two zeros in the middle, I just don't understand why
Java Code
import java.io.FileInputStream;
import java.security.MessageDigest;

public class SHAHash{
   public static void main(String[] args)throws Exception{
      MessageDigest md = MessageDigest.getInstance(""SHA-256"");
      FileInputStream fis = new FileInputStream(""myfile"");

      byte[] dataBytes = new byte[1024];
      int nread = 0;
      while((nread = fis.read(dataBytes))!= -1){
         md.update(dataBytes, 0, nread);
      };

      byte[] mdbytes = md.digest();

      StringBuffer sb1 = new StringBuffer();
      for(int i = 0; i < mdbytes.length; i++){
        sb1.append(Integer.toString((mdbytes[i] & 0xFF) + 0x100, 16).substring(1));
      }
      System.out.println(""Hex format: "" + sb1.toString());

      StringBuffer sb2 = new StringBuffer();
      for(int i = 0; i < mdbytes.length; i++){
         sb2.append(Integer.toHexString(0xFF & mdbytes[i]));
      }
      System.out.println(""Hex format: "" + sb2.toString());
   }
}

","Instead of StringBuffer you should be using StringBuilder (the methods aren't synchronized and you aren't using multiple threads, it's like the difference between a Vector and an ArrayList). Also, you need to preserve leading 0(s). You could correct your second loop with something like String.format(String, Object...). Putting that together like,
StringBuilder sb2 = new StringBuilder();
for (int i = 0; i < mdbytes.length; i++) {
    sb2.append(String.format(""%02x"", 0xFF & mdbytes[i]));
}
System.out.println(""Hex format: "" + sb2.toString());

","95","<java><hash><sha256>","1","2","2","2015-11-14 20:39:23","33712786","1","3","","","","2015-11-14 19:46:12",""
"33712586","SHA Hashing behaving unexpectedly in Java - Code Provided","Reading in a file and then hashing it using SHA-256 I found a tutorial which showed two separate ways to do it.
When comparing the file that I hashed (Which was a PDF) against both methods, they did not match up.  I am following the code properly, not understanding why it isn't matching up.
Here is my result:

Hex format: b050692edb134da209adf76347f6c5e49db8734edeaa44876606ec8e5559ab4e
Hex format: b050692edb134da29adf76347f6c5e49db8734edeaa4487666ec8e5559ab4e

It looks like it is lopping off the two zeros in the middle, I just don't understand why
Java Code
import java.io.FileInputStream;
import java.security.MessageDigest;

public class SHAHash{
   public static void main(String[] args)throws Exception{
      MessageDigest md = MessageDigest.getInstance(""SHA-256"");
      FileInputStream fis = new FileInputStream(""myfile"");

      byte[] dataBytes = new byte[1024];
      int nread = 0;
      while((nread = fis.read(dataBytes))!= -1){
         md.update(dataBytes, 0, nread);
      };

      byte[] mdbytes = md.digest();

      StringBuffer sb1 = new StringBuffer();
      for(int i = 0; i < mdbytes.length; i++){
        sb1.append(Integer.toString((mdbytes[i] & 0xFF) + 0x100, 16).substring(1));
      }
      System.out.println(""Hex format: "" + sb1.toString());

      StringBuffer sb2 = new StringBuffer();
      for(int i = 0; i < mdbytes.length; i++){
         sb2.append(Integer.toHexString(0xFF & mdbytes[i]));
      }
      System.out.println(""Hex format: "" + sb2.toString());
   }
}

","The difference between both is that the first adds 0x100 and then only takes a substring.
That way the toString call in the first loop always returns a string with a leading 1 followed by the actual value. That way the zero is preserved.
The second loop produces wrong output because the zero digit gets lost.
","95","<java><hash><sha256>","1","0","2","2015-11-14 20:39:23","33712786","1","3","","","","2015-11-14 19:46:12",""
"39411808","SecKeyRawSign returning error -1, ""generic error""?","I am working on an iOS application that needs to generate a key pair on the device, store the private key in the Secure Enclave, and then access it later to use for signing (does not need to be exported, ever). When I sign, I always hash the data using SHA256, following a couple of stack Overflow answers, and it seems to be working when I print the results. However, after obtaining a valid private key reference from the KeyChain, hashing the data to be signed, and specifying that it is a SHA256 hash, SecKeyRawSign still returns -1. This is just listed as a 'generic error', and my setup seems like it should be valid. Some insight on what's going wrong would be greatly appreciated. Here are my methods to generate and sign:
private func genKeyPair() -> (privateAlias: String, publicKey: NSData)? {

    // Generate a keyhandle, which will be returned as an alias for the private key
    let numBytes = Int(keyHandleLength)
    var randomBytes = [UInt8](count: numBytes, repeatedValue: 0)
    SecRandomCopyBytes(kSecRandomDefault, numBytes, &randomBytes)
    let data = NSData(bytes: &randomBytes, length: numBytes)
    let alias = data.base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue: 0))

    let access = SecAccessControlCreateWithFlags(nil, kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly, .TouchIDCurrentSet, nil)!

    // Key pair parameters
    var keyParams: [String:AnyObject] = [
        kSecAttrKeyType as String: kSecAttrKeyTypeEC,
        kSecAttrKeySizeInBits as String: 256
    ]

    // Private key parameters
    keyParams[kSecPrivateKeyAttrs as String] = [
        kSecAttrIsPermanent as String: true,
        kSecAttrLabel as String: alias,
        kSecAttrApplicationTag as String: applicationTag,
        kSecAttrAccessControl as String: access
    ]

    // Public key parameters
    keyParams[kSecPublicKeyAttrs as String] = [
        kSecAttrIsPermanent as String: true,
        kSecAttrLabel as String: alias + ""-pub"",
        kSecAttrApplicationTag as String: applicationTag
    ]

    var pubKeyRef, privKeyRef: SecKey?
    var err = SecKeyGeneratePair(keyParams, &pubKeyRef, &privKeyRef)

    guard let _ = pubKeyRef where err == errSecSuccess else {

        print(""Error while generating key pair: \(err)."")
        return nil

    }

    // Export the public key for application use
    let query = [
        kSecClass as String: kSecClassKey,
        kSecAttrLabel as String: alias + ""-pub"",
        kSecAttrKeyType as String: kSecAttrKeyTypeEC,
        kSecReturnData as String: true
    ]
    var pubKeyOpt: AnyObject?
    err = SecItemCopyMatching(query, &pubKeyOpt)

    if let pubKey = pubKeyOpt as? NSData where err == errSecSuccess {

        print(""Successfully retrieved public key!"")
        return (alias, pubKey)

    } else {

        print(""Error retrieving public key: \(err)."")
        return nil

    }

}

private func sign(bytes data: NSData, usingKeyWithAlias alias: String) -> NSData? {

    let query = [
        kSecClass as String: kSecClassKey,
        kSecAttrLabel as String: alias,
        kSecAttrApplicationTag as String: applicationTag,
        kSecAttrKeyType as String: kSecAttrKeyTypeEC,
        kSecReturnRef as String: true
    ]

    var privateKey: AnyObject?
    var error = SecItemCopyMatching(query, &privateKey)

    guard error == errSecSuccess else {

        print(""Could not obtain reference to private key with alias \""\(alias)\"", error: \(error)."")
        return nil

    }

    print(""\nData: \(data)"")
    print(""Length: \(data.length)"")

    let hashedData = NSMutableData(length: Int(CC_SHA256_DIGEST_LENGTH))!
    CC_SHA256(data.bytes, CC_LONG(data.length), UnsafeMutablePointer(hashedData.mutableBytes))

    print(""\nHashed data: \(hashedData)"")
    print(""Length: \(hashedData.length)"")

    var signedHashLength = SecKeyGetBlockSize(privateKey as! SecKeyRef)
    let signedHash = NSMutableData(length: signedHashLength)!

    error = SecKeyRawSign(privateKey as! SecKeyRef, .PKCS1SHA256, UnsafePointer<UInt8>(hashedData.mutableBytes), hashedData.length, UnsafeMutablePointer<UInt8>(signedHash.mutableBytes), &signedHashLength)

    print(""\nSigned hash: \(signedHash)"")
    print(""Length: \(signedHashLength)\n"")

    guard error == errSecSuccess else {

        print(""Failed to sign data, error: \(error)."")
        return nil

    }

    return signedHash

}

","","94","<swift><security><public-key-encryption><sha256>","1","","0","2016-09-09 12:38:44","","0","1","","","","2016-09-09 12:38:44",""
"52285385","Makecat failure: no members found","I am trying to modify existing input cdf file to use SHA256 instead of SHA1 by adding following two lines under [CatalogHeader] section:
CatalogVersion=2
HashAlgorithms=SHA256

Executing makecat.exe now gives me following failure message even though nothing under [CatalogFiles] has changed:
Failed: CryptCATCDFEnumMembersByCDFTagEx. Last Error: 0x00000057
Failed: No members found. Last Error: 0x00000057

Failed 0x00000057 (87)

Makecat does find and hash all files if I take out two lines I added.
Can anybody give me an idea what might be going wrong here?
Here is an example cdf file for MCVE:
[CatalogHeader]
Name=MCVE.cat
CatalogVersion=2
HashAlgorithms=SHA256

[CatalogFiles]
MCVE.xml=MCVE.xml

MCVE.xml is any old xml file you can find.
","I encountered the same problem but was able to get it to work by putting '< HASH >' (without spaces) in front of each file entry. Example:
[CatalogFiles]
<HASH>manifest.json=.\manifest.json
<HASH>bsi.json=.\bsi.json

However, this causes the catalog file's entries to be tagged by their hash, instead of their filename, when viewing the .cat file in Windows Explorer. You can somewhat work around this by adding a custom attribute to display the filename in the catalog entry's details, as follows:
[CatalogFiles]
<HASH>manifest.json=.\manifest.json
<HASH>manifest.jsonATTR1=0x11010001:File:manifest.json
<HASH>bsi.json=.\bsi.json
<HASH>bsi.jsonATTR1=0x11010001:File:bsi.json

The attribute type is composed of (https://docs.microsoft.com/en-us/windows/desktop/seccrypto/makecat):

0x10000000: attribute is included in the catalog's hash
0x01000000: don't create a duplicated attribute with SHA1 hash (when using SHA256 and catalog version 2)
0x00010000: attribute is in plaintext, not base64
0x00000001: attribute is a keyvalue pair (e.g. File=bsi.json)

I discovered this workaround after running into the same problem as you when I found this example here: https://www-user.tu-chemnitz.de/~heha/viewzip.cgi/basteln/PC/USB2LPT/usb2lpt.zip/src/Makefile?auto=MAK
Hope this helps.
","94","<windows><sha256>","0","1","1","2018-11-08 10:12:40","","2","","10350075","","2018-09-12 17:00:06","2018-09-11 23:22:52",""
"54315881","Validate a SHA256 (python generated) in C","I'm trying to validate a hash generated by python using the passlib (https://passlib.readthedocs.io/en/stable/lib/passlib.hash.sha256_crypt.html) in C code using openssl/sha.h.
For the password ""senhateste"" the python passlib has generated the following hash: 
$5$rounds=535000$e.cy1Y7iWc0OQjNC$7QbwABQMlBdHHd.UURPF.eoc0VTGOtM7yxxrOIe4OxC

where there is a number of rounds, a salt and a checksum (separated by $).
I was trying to generate a hash for the raw password in C to compare with the one generated by Python code, but I got only an array of bytes (like the ones of online sha256 hash tools).
I was thinking in make a loop hashing the password for the same number of rounds provided by Pyhton. But I can't figure out where I should use the salt. 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <openssl/sha.h>

int main (void) {
     int i;
     unsigned char s[] = ""senhateste"";
     unsigned char *d = (unsigned char *) malloc(SHA256_DIGEST_LENGTH);

    SHA256(s,strlen((char*)s), d);

    for(i=0;i<SHA256_DIGEST_LENGTH;i++)
    {
        printf(""%02x"",d[i]);
    }
    printf(""\n"");

    free(d);
   return 0;
}

Any suggestion?
","","93","<python><c><sha256>","0","","0","2019-01-22 20:30:34","","2","","6622587","","2019-01-22 20:30:34","2019-01-22 20:19:47",""
"55754050","Why Does My Java Private Key Signature Not Match My Openssl Signature?","So the signature that I'm getting from Java doesn't match what I'm getting in openssl.  Here's an example of what I'm doing:
In a terminal using openssl I'm doing this.
    echo +pkCdYME5SzI7A2PV0r8/8FqYGZyvTp+4DoGkdaMYRs= hash
    openssl dgst -sha256 -sign ""private.key"" -out hash.sha256 hash
    base64 < hash.sha256 > hash.bin
    cat hash.bin
    results posted below

Java Code: (hash matches the one I'm using for openssl)
    private String createSignature(String hash) throws ProductException {
      try {
        Signature privateSignature = Signature.getInstance(""SHA256withRSA"");
        privateSignature.initSign(getPrivateKey());
        privateSignature.update(hash.getBytes(UTF_8));
        byte[] signature = privateSignature.sign();
        String result = Base64.encodeBase64String(signature);
        System.out.println(result); //THIS RESULT SHOULD MATCH BUT DOESN'T
        return result;
      } catch (NoSuchAlgorithmException | SignatureException | InvalidKeyException e) {
        throw new ProductException(Codes.AUTHENTICATION_ERROR, e);
      }
    }   
    private PrivateKey getPrivateKey() throws ProductException {
      try {
        String key = IOUtils.toString(this.getClass().getResourceAsStream(""private.key""));
        PemObject pem = new PemReader(new StringReader(key)).readPemObject();
        byte[] content = pem.getContent();
        KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
        PKCS8EncodedKeySpec ks = new PKCS8EncodedKeySpec(content);
        return keyFactory.generatePrivate(ks);
      } catch (IOException | NoSuchAlgorithmException | InvalidKeySpecException e) {
        throw new ProductException(Codes.AUTHENTICATION_ERROR, e);
      }
    }

PLEASE HELP!  I've scoured the interwebs and I don't know what I'm doing wrong.
My openssl signature = 
O8DRek17ySzz+p2N8brH/9CdY3b+GN5bnyaTtn+ZP3SDIBvtqkk/lp+zb1BZ80a6xCIID8CTjNU+/svrV/q/rXEqEQc3jk3ZVUo0RJB52rgW26EQWyieAdqRlIbQqPhaCIrpWrs+WImGk7cPnkTEueIm+EzxG8ptjF5cAZH3lustVLt8SM9sXjQJzxzMgF2g0XN+1GQniAdWT/oNJXv0ZG7PSFACfcoSTSdN4wHkVAG4/PF/d6H+M5eTkEu6NhXfbfBBtavGmBiDgM6FPFDJ4r+2Rzvc/vpSiglUUQgxD58PTH47Y8xMc4t4/yahrchi2if2cJ7e89RBb1IHNus+eB8zPS0MHBn2OWDUM66P1KRanwzebDfg08VhRbW8zVnmNUNzXxAdCWa3kwsDe7hx+36oHfJwoyqIFwjJi8TKZm0JLKMf0SaLh/6zK0bIdgoXw23AfJni1ewmUqZbpE6Q4A0TgxaJg1aozb06l7Nb523FqV6ScRZ0wJK3s51Dduy5j1V1jt0+YYd+0zACyYfr5a+vypEygzsZ2Rzu3Q/l4VoPlZF2dr50TLnbhTvFnyK9mvc0zaTmsuHI5UJAbcpFBTXiDWb0DoWo4PkHRVFPvIMai37UxW4c5V0ybchlQHrEKYQ8NigYHGX5j8GsFhZJgg73Het1YwoWdsz1PksoYTY=
My Java Signature = 
8dKc1otqL+thKQ7yTPeHX7T5fuOgv6PmHvlP5QyEHEXZILwD/234polMSs20i4na9wCuUdcSA+mHEKpY7Dkyd8VLTcZZ8RC8AlPE5bvzXc/uZhyPpBuSA7mDDOARbg3mx5usq4ythdqxj6OvdOBAJXXFB6Jc/c1XVd8IxDnRJoz5MlwxZIp94TAyW11QbMGNZuzcbsdEdsBuXU1MR4gzVfMLJjMcIM3YTtsP3bktsPAs5W2Asp9lDg5GuIOgWgXpTlj3VY6NF64SCI1tY4LhE7zq16YXQ6ykJ490YSVX5J9z+cDvZcVgfvgKCZuk4wgnXo6PbE4Wm4FDuzu35DEQi9Y5EEHzXlb5aNFQP3S6lumyfqOCmZlQcNVS53ur1fY4P8cnOuHZelyYS1Dw54q0SDCjFuANK2Ltl8rIZOZQWbg6jo45HbpaHUgt1NMkmj/UC/rLSnofa/YYbcJ2YZbqUdyX/yTBlzEuLR0/4Bgv9zvBw8HI0h3icv7/1NYaKo/eBSki6HNyDh2pDWX6IHQTFMzdFKeoXVAQLfaJREIpMPu+rDExI6Ozl0r9D61fY+XtMrptGNTFzf1h4cwUAZAC737Ahc6qsr+jQkDWDJt6oJbgziNE4C2JZriRtvRDACpryt6MGH1QnYPGYfCVs/xSxaYEtGJsjRRkG+lkpojcJ+A=
","Most likely your issue comes from using echo for preparing an input to your signature function.
By default, echo appends a newline to whatever its output is, and the byte representing it messes up the signature.
Try echo -n that skips the newline and see if it works.
","93","<java><openssl><signature><sha256><private-key>","0","1","1","2019-05-31 12:42:28","","2","","","","","2019-04-18 21:39:44",""
"37560786","Incorrect output from my implementation of SHA-256","For a personal project, I'm working on implementing SHA-256 in Python 3, without using the hashlib module (since that would defeat the purpose of learning how SHA-256 works). I've been working from the Wikipedia pseudocode, but my code gives incorrect output (compared to the hashlib output). I've been staring at the code for an hour, and besides a headache, I've made no headway on figuring out what I've done wrong.
The code:
#!/usr/bin/env python3

import hashlib
import sys

# ror function taken from http://stackoverflow.com/a/27229191/2508324
def ror(val, r_bits, max_bits=32):
    return ((val & (2**max_bits-1)) >> r_bits%max_bits)|(val << (max_bits-(r_bits%max_bits)) & (2**max_bits-1))

h = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]

k = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
   0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
   0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
   0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
   0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
   0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
   0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
   0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]

s = sys.stdin.read().encode()
msg = [int(x,2) for c in s for x in '{:08b}'.format(c)]
msg.append(1)
while len(msg) % 512 != 448:
    msg.append(0)
msg.extend([int(x,2) for x in '{:064b}'.format(len(s))])

for i in range(len(msg)//512):
    chunk = msg[512*i:512*(i+1)] # sloth love chunk
    w = [0 for _ in range(64)]
    for j in range(16):
        w[j] = int(''.join(str(x) for x in chunk[32*j:32*(j+1)]),2)
    for j in range(16, 64):
        s0 = ror(w[j-15], 7) ^ ror(w[j-15], 18) ^ (w[j-15] >> 3)
        s1 = ror(w[j-2], 17) ^ ror(w[j-2], 19) ^ (w[j-2] >> 10)
        w[j] = (w[j-16] + s0 + w[j-7] + s1) % 2**32
    work = h[:]
    for j in range(64):
        S1 = ror(work[4], 6) ^ ror(work[4], 11) ^ ror(work[4], 25)
        ch = (work[4] & work[5]) ^ (~work[4] & work[6])
        temp1 = (work[7] + S1 + ch + k[j] + w[j]) % 2**32
        S0 = ror(work[0], 2) ^ ror(work[0], 13) ^ ror(work[0], 22)
        maj = (work[0] & work[1]) ^ (work[0] & work[2]) ^ (work[1] & work[2])
        temp2 = (S0 + maj) % 2**32
        work = [(temp1 + temp2) % 2**32] + work[:-1]
        work[4] = (work[4] + temp1) % 2**32
    h = [(H+W)%2**32 for H,W in zip(h,work)]

print(''.join('{:08x}'.format(H) for H in h))
print(hashlib.sha256(s).hexdigest())

If the implementation was correct, the two outputs would match. Instead, I get this (with input abc):
$ echo -n abc | ./sha256.py
203b1d9016060802fe5ef80436611159de1868b58d44940e3d3979eab5f4d193
ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad

I have thoroughly examined the code, but I do not see any differences between it and the Wikipedia pseudocode. I suspect the error is in the compression loop (for j in range(64):). I've manually debugged and reviewed the state of the program up through initializing the first 16 words of the w array, and it all checks out.
Any help would be greatly appreciated!
","SHA1 works on bits, not bytes. Therefore, the 64 bit length at the end of the padding is expressed in bits as well; the mistake is in the line
msg.extend([int(x,2) for x in '{:064b}'.format(len(s))])

which should be
msg.extend([int(x,2) for x in '{:064b}'.format(len(s) * 8)])

","93","<python><python-3.x><sha256><sha>","0","0","1","2016-06-02 10:57:00","37589888","4","","","user2508324","2016-06-02 10:07:02","2016-06-01 06:15:35",""
"45201146","Equivalent code of hash in .Net to Python 2.7","I have a code in .Net to generate HMAC SHA256 hash. I tried my best to get the equivalent code in Python 2.7 but it differs. Where am I going wrong?
.Net code
using System;
using System.Security.Cryptography;
using System.Text;                  
public class Program
{
    public static void Main()
    {
        var key = Guid.Parse(""7a640e1f-df45-4652-a9d5-4bdc2003deac"").ToByteArray();
        var payload = Encoding.UTF8.GetBytes(""ab38eadaeb746599f2c1ee90f8267f31f467347462764a24d71ac1843ee77fe3#40011234567890##34567####MitErpNavn#34567#20170719192159"");
        Console.WriteLine(key);
        Console.WriteLine(payload);
        for(var i = 0; i < key.Length;i++)
        {
            var b = key[i];
            Console.WriteLine(b);
        }
        using(var ha = new HMACSHA256(key))
        {
           var hash = ha.ComputeHash(payload);
           var result = Convert.ToBase64String(hash); 
           Console.WriteLine(result);

        }
    }
}

Output: f0UqIWmJBea+rTixF1jiCNhEt12yPN4R7gJclYMM3mE=

Python 2.7
import hmac
import hashlib
import base64
import uuid

erp_key = '7a640e1f-df45-4652-a9d5-4bdc2003deac'
payload = 'ab38eadaeb746599f2c1ee90f8267f31f467347462764a24d71ac1843ee77fe3#40011234567890##34567####MitErpNavn#34567#20170719192159'
erp_uuid = uuid.UUID(erp_key)
dig = hmac.new(erp_uuid.bytes, msg=payload, digestmod=hashlib.sha256).digest()
hash_key = base64.b64encode(dig).decode()

print hash_key

Output: wI/WinRP4mHfHLnFCSHn6j4VphSOO8CjLqkAVJi1HTQ=

","Finally I am able to fix the issue. I hope someone else can also get help from this
import hmac
import hashlib
import base64
import uuid
import array

erp_key = '7a640e1f-df45-4652-a9d5-4bdc2003deac'
payload = 'ab38eadaeb746599f2c1ee90f8267f31f467347462764a24d71ac1843ee77fe3#40011234567890##34567####MitErpNavn#34567#20170719192159'

erp_uuid = uuid.UUID(erp_key)
map_arr = array.array('B', erp_uuid.bytes_le)
makeitastring = """".join(chr(x) for x in map_arr)

dig = hmac.new(makeitastring, payload, hashlib.sha256).digest()
hash_key = base64.b64encode(dig).decode()

encodedSignature = base64.encodestring(dig).replace('\n', '')

print encodedSignature

Output: f0UqIWmJBea+rTixF1jiCNhEt12yPN4R7gJclYMM3mE=

","93","<.net><python-2.7><sha256><hmac>","0","0","1","2017-07-21 09:22:31","45214204","0","","472495","","2017-07-19 21:35:09","2017-07-19 21:16:02",""
"58187594","How to use decrypt with RSA private key and SHA256 on python","I am learning for school to encrypt and decrypt a file using public and private keys en encoding.
I used this code to encode the message. (which generates public key ≠ not private key error)
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256
from Crypto.PublicKey import RSA



def signing():
    #open file = message als binary
    message = open('C:/Users/Gebruiker/Desktop/message.txt', ""rb"").read()
    #open public key -> key     
    key = RSA.import_key(open('C:/Users/Gebruiker/Desktop/public.pem').read())
    #message becomes a hash
    h = SHA256.new(message)  
    #f = open file as write binary
    f = open('C:/Users/Gebruiker/Desktop/message.signature', 'wb')
    # sign hash message with private key  
    signature = pkcs1_15.new(key).sign(h) 
    #write signed hash to file 
    f.write(signature)
    f.close()

But now i am trying to decode this message and I found all these people that do it in different ways and work with different type of encoding and encrypting. And I cant find a clear answer.
what i have right now is this
First i have to read the message so
def decrypt():
    f = open('C:/Users/Gebruiker/Desktop/message.signature', 'rb').read()

then i open up my private key
    key = RSA.import_key(open('C:/Users/Gebruiker/Desktop/private.pem').read())

Because I write and read in binary i have to turn it back into a hash
    h = SHA256.new(f)

And then i have to decrypt the hash using my private key.???
Instead i see a lot of people using something like this.
    h = pkcs1_15.new(key).sign(h)  # sign hash message with private key

which i don't get. You are supposed to decode it right? not sign it again. this part makes no sense to me.    
Now I have 2 problems.

I get an encoding error saying my public key is not a private key. Which is kinda the point of public keying right. so only private key can decrypt? Why am i getting an error?
I don't know how to proceed with the decrypting of my message

Can anybody help me with this? 
Thanks a lot!
","There is confusion in your question. Signature generation for RSA requires modular exponentiation using the values of the private key, not the public key. Modular exponentiation is also used for encryption with the public key. But although the same mathematical formula is used - at least on the surface - doesn't mean that signature generation is encryption with the private key because such a thing does not exist. Current PKCS#1 standards go out of their way to explain this fact, even though earlier PKCS#1 standards used to identify signature generation with RSA encryption.
What you are trying to do is to verify the message. That's the function you would expect rather than sign. Verification is performed by a trusted public key, not by a private key. You are not trying to decode the message, you are trying to verify that the bytes of the message are indeed signed by the private key that belongs to the same key pair as the trusted public key. Generally, the message is not recovered, not even partially. PKCS#1 is called signature generation with appendix, which contrasts with other schemes called signature generation giving message recovery. The appendix is the signature value, it needs to be appended (included with) the message to be of any use.
Actually, the fact that you can at least recover the hash over the message is specific to some schemes like PKCS#1 signature generation (officially called RSASSA-PKCS1-v1_5 in the standard). Other schemes such as PSS in the same standard may not even recover the hash. This is OK as long the verification (which can take place given the data and therefore hash) can succeed or fail. In other words, the verification should at least result in a boolean true / false, but it doesn't need to generate any other information.
Or, in simplified pseudo-code:
ciphertext = encrypt(publicKey, plaintext)
(recovered) plaintext = decrypt(privateKey, ciphertext)

and
signature = sign(privateKey, data)
verificationResult = verify(publicKey, data, signature)

where the data hashing algorithm is a configuration parameter for the signature generation & verification algorithm. If you want to include it you could e.g. include it as initial parameter:
signature = sign(SHA256alg, privateKey, data)
verificationResult = verify(SHA256alg, publicKey, data, signature)


Finally, you are talking about ""decoding"". You decode messages that have been encoded using an encoding scheme. Encoding/decoding does not presume the presence of a key. We're talking about encryption / decryption and signature generation / verification instead. Examples of encoding are hexadecimals / base 64 that convert binary to text. Character encoding such as UTF-8 is about converting text to binary.
","93","<python><encryption><key><rsa><sha256>","1","3","2","2019-10-01 16:11:04","58188546","0","","","","","2019-10-01 15:00:46",""
"58187594","How to use decrypt with RSA private key and SHA256 on python","I am learning for school to encrypt and decrypt a file using public and private keys en encoding.
I used this code to encode the message. (which generates public key ≠ not private key error)
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256
from Crypto.PublicKey import RSA



def signing():
    #open file = message als binary
    message = open('C:/Users/Gebruiker/Desktop/message.txt', ""rb"").read()
    #open public key -> key     
    key = RSA.import_key(open('C:/Users/Gebruiker/Desktop/public.pem').read())
    #message becomes a hash
    h = SHA256.new(message)  
    #f = open file as write binary
    f = open('C:/Users/Gebruiker/Desktop/message.signature', 'wb')
    # sign hash message with private key  
    signature = pkcs1_15.new(key).sign(h) 
    #write signed hash to file 
    f.write(signature)
    f.close()

But now i am trying to decode this message and I found all these people that do it in different ways and work with different type of encoding and encrypting. And I cant find a clear answer.
what i have right now is this
First i have to read the message so
def decrypt():
    f = open('C:/Users/Gebruiker/Desktop/message.signature', 'rb').read()

then i open up my private key
    key = RSA.import_key(open('C:/Users/Gebruiker/Desktop/private.pem').read())

Because I write and read in binary i have to turn it back into a hash
    h = SHA256.new(f)

And then i have to decrypt the hash using my private key.???
Instead i see a lot of people using something like this.
    h = pkcs1_15.new(key).sign(h)  # sign hash message with private key

which i don't get. You are supposed to decode it right? not sign it again. this part makes no sense to me.    
Now I have 2 problems.

I get an encoding error saying my public key is not a private key. Which is kinda the point of public keying right. so only private key can decrypt? Why am i getting an error?
I don't know how to proceed with the decrypting of my message

Can anybody help me with this? 
Thanks a lot!
","The convention is to encrypt with a receives public RSA key so that only the holder of the corresponding private key can decrypt the message.
Also by convention, you would use your private RSA key to create a signatur that everybody else with the corresponding public key can verify. 
In principle you could use a public key for creating a signature, but this would be an erroneous use case of the key, and is often prevented in the libraries implementing RSA. In your case you get a ""public key ≠ not private key error"" as you try to use a public key in a sign(..) call.
When signing you don't use the full message as input to RSA, but instead calculates a hash (you use SHA256). This hash would not need to be ""decryped"" in the signature verification, but instead recalculated on the original message, that you want to verify.
","93","<python><encryption><key><rsa><sha256>","1","1","2","2019-10-01 16:11:04","58188546","0","","","","","2019-10-01 15:00:46",""
"53196075","Any way to mimic port password encryption to python?","Some legacy Java uses a package called jasypt to encrypt password.
It uses StrongPasswordEncryptor to encrypt passwords.  
It seems like to use below,   from their doc page
Algorithm: SHA-256.
Salt size: 16 bytes.
Iterations: 100000. 
There source code shows 
 public StrongPasswordEncryptor() {
        super();
        this.digester = new StandardStringDigester();
        this.digester.setAlgorithm(""SHA-256"");
        this.digester.setIterations(100000);
        this.digester.setSaltSizeBytes(16);
        this.digester.initialize();
    }

Now that we don't use Java anymore, we'd like to continue to do the same encryption in python, but not sure how to port this portion of the code.
I do have the salt and pair of plain-text password and encrypted password to verify if python port works correctly, just don't know what lib and what functions to encrypt. Tried hashlib.pbkdf2_hmac without any luck.
Example plain-text password is : Testing123
Salt is : 0DD2E486FAE5B121491CBE78A9B67AF1
Encrypted password is :D1JAI76bwIkEkOIy7IZoLasAFKX0Yy7ujU/M7UBezC7NqxSD3clDyaFB1lz96K98
Here is the snippet in Java code that actually encrypts the password:
import javax.inject.Inject;
import javax.inject.Named;
import org.jasypt.util.password.StrongPasswordEncryptor;
import com.foobar.users.PasswordEncoder;

public class PasswordEncoderImpl implements PasswordEncoder {

    private String salt;
    private StrongPasswordEncryptor encryptor;

    @Inject
    public PasswordEncoderImpl(@Named(""appHash"") String appHash) {
        this.salt = appHash;
        encryptor = new StrongPasswordEncryptor();
    }

    @Override
    public String encode(String password) {
        return encryptor.encryptPassword(password + salt);
    }

    @Override
    public boolean verifyPassword(String password, String encryptedPassword){
        return encryptor.checkPassword(password+salt, encryptedPassword);
    }

}

","Ok, I got half solution for now:
Here is a simplified Java code that checks if the given password is valid:
private void start() throws Exception {

    String salt = ""0DD2E486FAE5B121491CBE78A9B67AF1"";
    String password = ""Testing123"";
    String previousResult = ""QI2KU2VsI/aNr4U3XQ0AdaOk6Qhl4XTaN2ym5cYXxRr8tz/23EvWQHI8sNhRmoP1"";

    StrongPasswordEncryptor passwordEncryptor = new StrongPasswordEncryptor();
    String encryptedPass = passwordEncryptor.encryptPassword(password + salt);


    System.out.println(checkPass(salt, password, previousResult));
    System.out.println(passwordEncryptor.checkPassword(password + salt, previousResult));
}

private boolean checkPass(String salt, String password, String previousResult) throws NoSuchAlgorithmException {
    byte[] bytes = previousResult.getBytes(StandardCharsets.US_ASCII);
    byte[] decode = Base64.getDecoder().decode(bytes);

    byte[] secretSalt = new byte[16];
    System.arraycopy(decode, 0, secretSalt, 0, 16);

    byte [] message = (password + salt).getBytes(StandardCharsets.UTF_8);
    byte[] digest = digest(message, secretSalt);

    return Arrays.equals(digest, decode);
}


private byte[] digest(byte [] message, final byte[] salt) throws NoSuchAlgorithmException {

    byte[] digest;

    MessageDigest md = MessageDigest.getInstance(""sha-256"");
    md.reset();

    md.update(salt);
    md.update(message);


    digest = md.digest();
    for (int i = 0; i < (100000 - 1); i++) {
        md.reset();
        digest = md.digest(digest);
    }

    byte[] secondArray = digest;
    final byte[] result = new byte[salt.length + secondArray.length];

    System.arraycopy(salt, 0, result, 0, salt.length);
    System.arraycopy(secondArray, 0, result, salt.length, secondArray.length);

    return result;
}

","92","<java><python-3.x><encryption><sha256><jasypt>","2","1","1","2018-11-07 22:55:19","","5","","1912128","","2018-11-07 20:47:56","2018-11-07 19:01:01",""
"50499653","How can I use sha256 in stead of sha1 as Signature Algorithm? phpsecllib","On the samples page: http://phpseclib.sourceforge.net/x509/guide.html there is a sample ""Example: CA-signed cert"" I have been playing with it, but whatever I do, I only get sha1 signatures. I tried to setHash('sha256'), but no luck. How can this sample code generate sha256 signatures?
Thanks!
","$x509->sign($issuer, $subject, 'sha256WithRSAEncryption');

The $issuer private key needs to be an instance of RSA for that to work but that's how you'd do it.
It probably ignores the setHash('sha256') thing because (1) not all the hashes you can use with RSA have OIDs that X509.php knows about and (2) options available in RSA - like PSS signatures - aren't supported by X509.php and may not have OIDs defined by any IETF RFC and may not be supported by another other X509 implementation out there.
","91","<sha1><sha256><phpseclib><sethash>","-1","0","1","2018-05-24 05:07:44","","2","","3800096","","2018-05-24 01:55:54","2018-05-24 01:33:27",""
"34684638","How can I test that signed binaries will validate after Windows starts enforcing the new rules for SHA-1 certificates?","So... Microsoft has announced that SHA-1 code signing certificates are deprecated as of January 1st 2016. I've done a fair bit of reading, I've had our certificate reissued using SHA-256 instead of SHA-1, and I think I understand how to dual-sign binaries so the signatures will validate on older versions of Windows that don't support SHA-256.
Here's the problem: despite the fact that these rules are supposed to apply from January 1st 2016, it doesn't look like Windows has started enforcing them yet. I've signed a number of EXE files with our old SHA-1 certificate, timestamped them with dates after January 1st 2016, and Windows still seems to consider the signatures to be valid (at least on fully-updated installations of Windows 7 and Windows 10). I've checked this by right-clicking on a signed file in Explorer, selecting ""Properties"", then going to the Digital Signatures tab and double-clicking the certificate. It tells me ""The digital signature is OK"".
Am I misunderstanding something here? Or is there some kind of tool that I can use to check that a signed EXE (or MSI, or whatever) will be valid after Windows stops accepting SHA-1 certificates? I don't want to release products now and discover at some point in the future that the signatures are no longer valid. That would be embarrassing.
","","90","<windows><code-signing><sha1><sha256>","2","","0","2016-01-08 19:29:14","","0","1","","","","2016-01-08 19:29:14",""
"54262612","What data is used to calculate the sha256 messagedigest of this asn.1 message?","Given the following asn.1 message, how is the sha256 message digest, ""8798168E6F7F3118EDE8522B6336DFB56CFDF95DB7063CB7230EF00B4D666D1A"", calculated?  I realize it is a 32 byte hash of some data. What specific data is used to calculate the hash? This is a tr34 document.  Using openssl, I should be able to come up with the same hash as long as I'm using the same chunck of data from the message. 
-----BEGIN TR34_Sample_UBT_KDH PEM File-----
MIIEPAYJKoZIhvcNAQcCoIIELTCCBCkCAQExDTALBglghkgBZQMEAgEwWwYJKoZI
hvcNAQcBoE4ETDBKMEExCzAJBgNVBAYTAlVTMRUwEwYDVQQKEwxUUjM0IFNhbXBs
ZXMxGzAZBgNVBAMTElRSMzQgU2FtcGxlIENBIEtSRAIFNAAAAAehggHYMIIB1DCB
vQIBATANBgkqhkiG9w0BAQsFADBBMQswCQYDVQQGEwJVUzEVMBMGA1UEChMMVFIz
NCBTYW1wbGVzMRswGQYDVQQDExJUUjM0IFNhbXBsZSBDQSBLREgXDTEwMTEwMjE3
MzMzMFoXDTEwMTIwMjE3MzMzMFowSDAWAgU0AAAACBcNMTAxMTAyMTcyODEzWjAW
AgU0AAAAChcNMTAxMTAyMTczMTQ2WjAWAgU0AAAACxcNMTAxMTAyMTczMzI1WjAN
BgkqhkiG9w0BAQsFAAOCAQEANvBqPIisvPqfjjsIUO7gmpz3tbKRiG5RDTSf5fBc
G9t9nznk6mUIgo8u0+55Y8hYdFJ5XDlGKwYNW5csmnte+JChk8VyJdHIjVbu0dA/
fpp1hw1gTRXgEv/XuFBupLoU57UQGMFtjZ77asXFFWhrE04WsdZ/Hov0PI/JpguW
FK3M6a9pwnqUU9QmNE9rFEUO5YOCFHQeq/f4fxUqkxn62e07SBoRPAM2PSmt0C4w
MTopOvwYe3JSmPsUxdmXlnhaJswZzwfCvJojuPb27hmgB5BPS/Yy3P3n8oJfMS/m
KOPQxxzVC7CO5ATipfARoLWrTyphJ14lAJ2uAGYO/zLWwzGCAdowggHWAgEBMEow
QTELMAkGA1UEBhMCVVMxFTATBgNVBAoTDFRSMzQgU2FtcGxlczEbMBkGA1UEAxMS
VFIzNCBTYW1wbGUgQ0EgS0RIAgU0AAAABjALBglghkgBZQMEAgGgZTAYBgkqhkiG
9w0BCQMxCwYJKoZIhvcNAQcBMBgGCiqGSIb3DQEJGQMxCgQIfeocAIlOJGowLwYJ
KoZIhvcNAQkEMSIEIIeYFo5vfzEY7ehSK2M237Vs/fldtwY8tyMO8AtNZm0aMA0G
CSqGSIb3DQEBAQUABIIBAE80v8n2d8D3kBFwR7HqYM/TMltuf10kfDrB8LYMqLLp
JXOhQctjYBetCTDQ0kK75szZyaapV1cjmowsmfwejK6IrS1qtueiVsjFLmqROECz
QiqSdSZ/iPZ82Brdkwd//jD20n2XYIpdmBUhSL7XD65DPz963KcSYARf9bPkK1wK
FB9ozwsW4YeuT2Rv0QpwCBJEKspvIpKM8D8pJQHT+3cEMGurGVQtvXaG396YuOJs
qg4mLN+92YRSBY61rRrlFxX4ARwtn6a9RuHW8P+dOTYkT9t0msZByYdJrk8V2oyQ
VtM8wqN6incGM24kRrcZvoU5lsEz9brY6Uz/wvC+JB0=
-----END TR34_Sample_UBT_KDH PEM File-----

Here is another form of the message:


","This is a CMS-formerly-PKCS7 SignedData message defined in rfc5652 et pred with signedattrs. The digest you quote, which is the messagedigest element in signedattrs, is as described in 5.4 the digest of the value part of the OCTET STRING eContent in encapContentInfo, as described in 5.2.
Since you didn't show any code to start from, here's just about the absolute minimum:
#include <stdio.h>
#include <openssl/cms.h>
#include <openssl/bio.h>
#include <openssl/asn1.h>

int main (void){
  unsigned char hash[32]; 

  // TEST CODE doesn't check or handle errors; DON'T USE FOR REAL
  BIO *in = BIO_push (BIO_new(BIO_f_base64()), BIO_new_file (""54262612.pem"",""r""));
  // file's PEM type not understood by PEM_read_PKCS7; rather than fixing
  PKCS7 *outer = d2i_PKCS7_bio (in, NULL); // just bypass it
  // assume signeddata with (nonomitted) content octetstring; should check
  ASN1_OCTET_STRING *cont = outer->d.sign->contents->d.data;

  // assume hash is sha256; should check digestalgs and signerinfo(s)
  EVP_Digest (cont->data, cont->length, hash, NULL, EVP_sha256(), NULL);
  for( int i = 0; i < 32; i++ ) printf (""%02x"", hash[i]); putchar ('\n');
  return 0;
}

","90","<openssl><sha256>","0","1","1","2019-01-19 05:40:54","","0","","","","","2019-01-18 23:14:19",""
"56128055","is php sha256 safe today (may 2019)?","Is sha256 secure to use in the login page of my website then encrypt it by base64_encode?
I need your recommendations.
Thanks from all.
    $username = $_POST['username'];
    $password=  $_POST['password'];
    $sPassword= hash('sha256',$password);
    $ePassword= base64_encode($sPassword);

    $insertSQLQuery = $conn->query(""INSERT INTO tbl_users (username,password) 
VALUES ('$username ','$ePassword')"");

","It is if you use a salt. sha256 uses an algorithm that is only in one way, you can cipher a string but you cannot revert the operation. The problem is that it exists databases with tons of data of every possible string up to around 12 characters ciphered to the different cipher systems and you can get the original string by querying the database in a matter of seconds. That's why you should use a salt. 
A salt is a predefined long string used as a key joined to your password before the encrypting. As @Jaquarh comments you should create and store a different salt for each user. You can for example generate a random string.
Also you should use data binding to your query to prevent sql injections.
In your code you can make it much more secured the following way:
$salt = substr(md5(rand()), 0, 20) //this will generate a 20 characters random string
$username = $_POST['username'];
$password=  $_POST['password'].$salt;
$sPassword= hash('sha256',$password);
$ePassword= base64_encode($sPassword);

$insertSQLQuery = $conn->prepare(""INSERT INTO tbl_users (username,password) 
VALUES ('?','?')"");
//You may want to validate your $username and $ePassword here
$insertSQLQuery->execute(array($username, $ePassword));

PD: remember that you will need to store that salt to check the password later when the user logs in for example, you will need to add the salt to the password that the user has introduced in the log in form before encrypting and querying the database
","88","<php><sha256>","0","0","4","2019-05-16 08:49:22","","3","","285587","","2019-05-14 11:37:10","2019-05-14 10:14:48",""
"56128055","is php sha256 safe today (may 2019)?","Is sha256 secure to use in the login page of my website then encrypt it by base64_encode?
I need your recommendations.
Thanks from all.
    $username = $_POST['username'];
    $password=  $_POST['password'];
    $sPassword= hash('sha256',$password);
    $ePassword= base64_encode($sPassword);

    $insertSQLQuery = $conn->query(""INSERT INTO tbl_users (username,password) 
VALUES ('$username ','$ePassword')"");

","There is no need to use the hash() method and is extremely pointless creating your own hashing techniques when PHP has its own built in functions to achieve this.
password_hash() and password_verify.
Alluding to @David's answer. You should also create a salt: its a unique ""addition"" you concat to the password before hashing it to ensure further security measurements and data integrity. Luckily enough for us, PHP's built in function password_hash() does this when you provide it with the pre defined PASSWORD_BCRYPT algorithm.
FYI: As alluded to by @treyBake your query is open to SQL injections. Make use of prepared statements and do sanity checks!
if(
   isset(($username = $_POST['username'])) &&
   isset(($password = $_POST['password']))
) {
    ($con->prepare('INSERT INTO tbl_users (username, password) VALUES (? ,?)'))
         ->execute(array(
             $username,
             password_hash(base64_encode($password), PASSWORD_BCRYPT)
         ));
}

","88","<php><sha256>","0","3","4","2019-05-16 08:49:22","","3","","285587","","2019-05-14 11:37:10","2019-05-14 10:14:48",""
"56128055","is php sha256 safe today (may 2019)?","Is sha256 secure to use in the login page of my website then encrypt it by base64_encode?
I need your recommendations.
Thanks from all.
    $username = $_POST['username'];
    $password=  $_POST['password'];
    $sPassword= hash('sha256',$password);
    $ePassword= base64_encode($sPassword);

    $insertSQLQuery = $conn->query(""INSERT INTO tbl_users (username,password) 
VALUES ('$username ','$ePassword')"");

","To large for a comment!
About:
$sPassword= hash('sha256',$password);
$ePassword= base64_encode($sPassword);

This construct makes no sense. hash('sha256',$password) returns a string of 64 hex digits. base64_encode() blow it up to 88 chars. Both are human readable and so it is useless.
My recommendation: Either you use $sPassword (and skip the second step) or you change your code to:
$sPassword= hash('sha256',$password,true);
//                                 ^^^^^
$ePassword= base64_encode($sPassword);

In this case, hash() returns a string with 32 binary chars and base64_encode() blows it up to 44 chars. And this is smaller than 64 hex digits.
Anyway: Remove the possible SQL injection for $username.
","88","<php><sha256>","0","0","4","2019-05-16 08:49:22","","3","","285587","","2019-05-14 11:37:10","2019-05-14 10:14:48",""
"56128055","is php sha256 safe today (may 2019)?","Is sha256 secure to use in the login page of my website then encrypt it by base64_encode?
I need your recommendations.
Thanks from all.
    $username = $_POST['username'];
    $password=  $_POST['password'];
    $sPassword= hash('sha256',$password);
    $ePassword= base64_encode($sPassword);

    $insertSQLQuery = $conn->query(""INSERT INTO tbl_users (username,password) 
VALUES ('$username ','$ePassword')"");

","I am using these methods. Also, you can change the $key value for your favorite value. like me. For preventing from Injection use PDO
https://phpdelusions.net/pdo
function HeratHostEn( $q ) {
    $key = ""NazirAhmadHeratHost"";
    $cryptKey  = 'qJB0rGtIn5UB1xG03efyCp'.$key;
    $qEncoded  = base64_encode( mcrypt_encrypt( MCRYPT_RIJNDAEL_256, md5($cryptKey), $q, MCRYPT_MODE_CBC, md5( md5( $cryptKey ) ) ) );
    return( $qEncoded );
}

function HeratHostDe( $q ) {
    $key = ""NazirAhmadHeratHost"";
    $cryptKey  = 'qJB0rGtIn5UB1xG03efyCp'.$key;
    $qDecoded      = rtrim( mcrypt_decrypt( MCRYPT_RIJNDAEL_256, md5( $cryptKey ), base64_decode( $q ), MCRYPT_MODE_CBC, md5( md5( $cryptKey ) ) ), ""\0"");
    return( $qDecoded );
}

","88","<php><sha256>","0","0","4","2019-05-16 08:49:22","","3","","285587","","2019-05-14 11:37:10","2019-05-14 10:14:48",""
"34703699","Understanding piece of code written in PHP using Zend framework","I am java developer and I am trying to use one WEB Service API (ticketutils) where they have explained two examples first one with PHP and second one with C#. Unfortunately I am not able to get any of them. I have mentioned PHP example below. 
 public function GenerateSignature($Secret,$PathAndQuery)
     {
       return base64_encode(\Zend_Crypt_Hmac::compute($Secret, 'sha256',
       $PathAndQuery, \Zend_Crypt_Hmac::BINARY));
     }

Can anyone please explain me how can I achieve the same with Java code? I have tried below code but it seems it's not generating proper outcome. 
public static String generateSignature(String secrete, String pathAndQuery){
        String encoded = null;
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-256"");
            md.update(secrete.getBytes(""UTF-8""));
            md.update(pathAndQuery.getBytes(""UTF-8""));
            byte[] digest = md.digest();
            encoded = Base64.getEncoder().encodeToString(digest);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return encoded;
    }

NOTE : I have used Java-8 for while writing above code. 
","The Java API for message digests is very similar to the C# one. Please follow this example:
https://docs.oracle.com/javase/7/docs/api/java/security/MessageDigest.html
","88","<java><php><zend-framework><encoding><sha256>","0","0","2","2016-01-10 18:35:40","34705409","2","3","","","","2016-01-10 08:57:11",""
"34703699","Understanding piece of code written in PHP using Zend framework","I am java developer and I am trying to use one WEB Service API (ticketutils) where they have explained two examples first one with PHP and second one with C#. Unfortunately I am not able to get any of them. I have mentioned PHP example below. 
 public function GenerateSignature($Secret,$PathAndQuery)
     {
       return base64_encode(\Zend_Crypt_Hmac::compute($Secret, 'sha256',
       $PathAndQuery, \Zend_Crypt_Hmac::BINARY));
     }

Can anyone please explain me how can I achieve the same with Java code? I have tried below code but it seems it's not generating proper outcome. 
public static String generateSignature(String secrete, String pathAndQuery){
        String encoded = null;
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-256"");
            md.update(secrete.getBytes(""UTF-8""));
            md.update(pathAndQuery.getBytes(""UTF-8""));
            byte[] digest = md.digest();
            encoded = Base64.getEncoder().encodeToString(digest);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return encoded;
    }

NOTE : I have used Java-8 for while writing above code. 
","Hash a Secret keyword with sha256..Then use the keyword to encode anything in Base64..
Have a look at 
http://www.jokecamp.com/blog/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages/#java
Not exactly what you are looking for but you can turn the process into a function which takes two arguments and returns the Base64 value..
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import org.apache.commons.codec.binary.Base64;

public class ApiSecurityExample {
  public static void main(String[] args) {
    try {
     String secret = ""secret"";
     String message = ""Message"";

     Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
     SecretKeySpec secret_key = new SecretKeySpec(secret.getBytes(), ""HmacSHA256"");
     sha256_HMAC.init(secret_key);

     String hash = Base64.encodeBase64String(sha256_HMAC.doFinal(message.getBytes()));
     System.out.println(hash);
    }
    catch (Exception e){
     System.out.println(""Error"");
    }
   }
}

","88","<java><php><zend-framework><encoding><sha256>","0","1","2","2016-01-10 18:35:40","34705409","2","3","","","","2016-01-10 08:57:11",""
"53308897","Certificate signing produces different signature when on server","I am trying to sign some data using a certificate private key.  The issue I'm finding is that the signature is different depending on if I'm executing it locally or on a server.
I'm using the following code as a test, running under the same user both locally and on the server:
using System;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Text;

namespace TestSignature
{
    class Program
    {
        static void Main(string[] args)
        {

            var key = SigningKeyFromCertificate(StoreName.My, StoreLocation.LocalMachine, X509FindType.FindByThumbprint, ""thumbprint"");
            var alg = CryptoConfig.MapNameToOID(""SHA256"");
            var data = Encoding.UTF8.GetBytes(""test"");
            var sig = key.SignData(data, alg);

            Console.WriteLine(Convert.ToBase64String(sig));

        }

        private static RSACryptoServiceProvider SigningKeyFromCertificate(StoreName storeName, StoreLocation storeLocation, X509FindType findType, string findValue)
        {
            X509Store store = new X509Store(storeName, storeLocation);
            store.Open(OpenFlags.ReadOnly);

            var certs = store.Certificates.Find(findType, findValue, false);
            if (certs?.Count > 0)
            {
                var cert = certs[0];
                if (cert.HasPrivateKey)
                {
                    // Force use of Enhanced RSA and AES Cryptographic Provider to allow use of SHA256.
                    var key = cert.PrivateKey as RSACryptoServiceProvider;
                    var enhanced = new RSACryptoServiceProvider().CspKeyContainerInfo;
                    var parameters = new CspParameters(enhanced.ProviderType, enhanced.ProviderName, key.CspKeyContainerInfo.UniqueKeyContainerName);
                    return new RSACryptoServiceProvider(parameters);
                }
                else
                {
                    throw new Exception($""No private key access to cert '{findValue}.'"");
                }
            }
            else
            {
                throw new Exception($""Cert '{findValue}' not found!"");
            }
        }
    }
}

Locally, I get the following signature:
YUjspKhLl7v3u5VQkh1PfHytMTpEtbAftxOA5v4lmph3B4ssVlZp7KedO5NW9K5L222Kz9Ik9/55NirS0cNCz/cDhEFRtD4daJ9qLRuM8oD5hCj6Jt9Vc6WeS2he+Cqfoylnv4V9plfi1xw8y7EyAf4C77BGkXOdyP5wyz2Xubo=

On the server, I get this one instead:
u1RUDwbBlUpOgNNkAjXhYEWfVLGpMOa0vEfm6PUkB4y9PYBk1lDmCAp+488ta+ipbTdSDLM9btRqsQfZ7JlIn/dIBw9t5K63Y7dcDcc7gDLE1+umLJ7EincMcdwUv3YQ0zCvzc9RrP0jKJManV1ptQNnODpMktGYAq1KmJb9aTY=

Any idea of what could be different?  I would think, with the same certificate, the same code, and the same data, the signature should be the same.
(The example is written in C# 4.5.2.)
","You have some code to reopen the CAPI key handle under PROV_RSA_AES:
// Force use of Enhanced RSA and AES Cryptographic Provider to allow use of SHA256.
var key = cert.PrivateKey as RSACryptoServiceProvider;
var enhanced = new RSACryptoServiceProvider().CspKeyContainerInfo;

var parameters = new CspParameters(
    enhanced.ProviderType,
    enhanced.ProviderName,
    key.CspKeyContainerInfo.UniqueKeyContainerName);

return new RSACryptoServiceProvider(parameters);

But key.CspKeyContainerInfo.UniqueKeyContainerName isn't the name of the key (it's the name of the file on disk where the key lives), so you're opening a brand new key (you're also generating a new ephemeral key just to ask what the default provider is).  Since it's a named key it persists, and subsequent application executions resolve to the same key -- but a different ""same"" key on each computer.
A more stable way of reopening the key is
var cspParameters = new CspParameters
{
    KeyContainerName = foo.CspKeyContainerInfo.KeyContainerName,
    Flags = CspProviderFlags.UseExistingKey,
};

(since the provider type and name aren't specified they will use the defaults, and by saying UseExistingKey you get an exception if you reference a key that doesn't exist).

That said, the easiest fix is to stop using RSACryptoServiceProvider.  .NET Framework 4.6 (and .NET Core 1.0) have a(n extension) method on X509Certificate2, GetRSAPrivateKey(), it returns an RSA (which you should avoid casting) which is usually RSACng (on Windows), but may be RSACryptoServiceProvider if only CAPI had a driver required for a HSM, and may be some other RSA in the future.  Since RSACng handles SHA-2 better there's almost never a need to ""reopen"" the return object (even if it's RSACryptoServiceProvider, and even if the type isn't PROV_RSA_AES (24), that doesn't mean the HSM will fail to do SHA-2).
","88","<c#><certificate><signature><sha256>","3","2","1","2018-11-16 16:06:44","53341529","8","","","","","2018-11-14 21:20:17",""
"50928253","calculate hash of binary file containing certain bytes","I'm having trouble understanding the principle/method, on how to ""manually"" calculate a file's hash (sha256) which consist of certain bytes.
To put into an example:
I have this binary file consisting of these bytes.
2C F2 BA A3 0E 26 5A 3B  2A 1F 01 4A 01 66 60 02

How to get following (correct) hash of the file? ea3cbd30dc6c18914d2cdafdd8bec0ff4ce5995c7b484cce3237900336abb574
","1.
Convert all bytes to ASCII.
2.
Hash ASCII string to get correct hash from the file.
Doing this manually is not recommended, since e.g. copy and paste, or other factors can easily distort your ASCII string. So optimally this is written within a program to calculate everything altogether.
","87","<binaryfiles><sha256>","0","-1","1","2018-06-19 18:37:27","50934860","0","","9486208","","2018-06-19 18:27:01","2018-06-19 12:17:57",""
"54458825","How to Add Custom authentication in feathersjs authentication with SHA256 for Password","I notice that Feathersjs authentication using bcrypt for password. 
This is the code in hooks.js 
const { authenticate } = require('@feathersjs/authentication').hooks;

const {
  hashPassword, protect
} = require('@feathersjs/authentication-local').hooks;


module.exports = {
  before: {
    all: [],
    find: [ authenticate('jwt') ],
    get: [ authenticate('jwt') ],
    create: [ hashPassword() ],
    update: [ hashPassword(),  authenticate('jwt') ],
    patch: [ hashPassword(),  authenticate('jwt') ],
    remove: [ authenticate('jwt') ]
  },

  after: {
    all: [ 
      // Make sure the password field is never sent to the client
      // Always must be the last hook
      protect('password')
    ],
    find: [],
    get: [],
    create: [],
    update: [],
    patch: [],
    remove: []
  },

  error: {
    all: [],
    find: [],
    get: [],
    create: [],
    update: [],
    patch: [],
    remove: []
  }
};

Now I want to change the default hashpassword to sha256, not bycrpt. Does anyone have the solution? 
Thanks 
","","87","<node.js><authentication><bcrypt><sha256><feathersjs>","0","","0","2019-01-31 10:47:26","","3","","","","","2019-01-31 10:47:26",""
"50519967","Errors with sha-256 python implementation","Over the last few days I have been studying how hashing algorithms like SHA-256 actually work. To get a better understanding for the process I decided to implement it in python (3.6). By stitching together concepts from various websites like wiki and NIST pages I constructed the following code. I know the process is close to what it should be but when I test it results vary slightly from what they should be. For example, 'a' hashed with SHA-256 should be 'ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb' however, my program returns 'ca978112ca1bbdcafac231b319a23dc4da786eff81147c4e72b9807785afee48bb'. The answers are very similar but are not the same. What am i doing wrong. Thank you for your time looking into it. 
def hash(string):
    return(process(pad(string)))

def pad(string):
    data = """"
    length = len(string) * 8
    for c in string:
        data += bin(ord(c))[2:].zfill(8)
    data += ""1""
    while len(data)%512 != 448: 
        data += ""0""
    data += bin(length)[2:].zfill(64)
    return data

def process(bins):
    main_block=[
        0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]

    h0 = 0x6a09e667
    h1 = 0xbb67ae85
    h2 = 0x3c6ef372
    h3 = 0xa54ff53a
    h4 = 0x510e527f
    h5 = 0x9b05688c
    h6 = 0x1f83d9ab
    h7 = 0x5be0cd19

    for c in chunks(bins, 512):
        words = chunks(c, 32)
        w = [0]*64

        w[:15] = [int(n, 2) for n in words]
        for i in range(16, len(w)):
            tmp1 = rightRotate(w[i-15], 7) ^ rightRotate(w[i-15], 18) ^ rightShift(w[i-15], 3)
            tmp2 = rightRotate(w[i-2], 17) ^ rightRotate(w[i-2], 19) ^ rightShift(w[i-2], 10)
            w[i] = (w[i-16] + tmp1 + w[i-7] + tmp2) & 0xffffffff

    a = h0
    b = h1
    c = h2
    d = h3
    e = h4
    f = h5
    g = h6
    h = h7

    for i in range(0, 64):
        s1 = rightRotate(e, 6) ^ rightRotate(e, 11) ^ rightRotate(e, 25)
        ch = g ^ (e & (f ^ g))
        tmp1 = h + s1 + ch + main_block[i] + w[i]
        s0 = rightRotate(a, 2) ^ rightRotate(a, 13) ^ rightRotate(a, 22)
        maj = (a&b) ^ (a&c) ^ (b&c)
        tmp2 = s0 + maj

        h = g
        g = f
        f = e
        e = d + tmp1 & 0xffffffff
        d = c
        c = b
        b = a
        a = tmp1 + tmp2 & 0xffffffff

    h0 += a 
    h1 += b
    h2 += c 
    h3 += d 
    h4 += e 
    h5 += f 
    h6 += g
    h7 += h

    return '%08x%08x%08x%08x%08x%08x%08x%08x' % (h0, h1, h2, h3, h4, h5, h6, h7) 

def rightShift(x, n):
    return (x & 0xffffffff) >> n

def rightRotate(x, y):
    return (((x & 0xffffffff) >> (y & 31)) | (x << (32 - (y & 31)))) & 0xffffffff

def chunks(l, n):
        return [l[i:i+n] for i in range(0, len(l), n)]

string = ""a""
print(hash(string))

","You are failing to mask out h* after calculating, resulting in spurious leading ""1""s.
h0 &= 0xffffffff
 ...
h7 &= 0xffffffff

","86","<python><hash><sha256>","0","2","1","2018-10-21 17:53:45","50520005","0","","1033581","","2018-10-21 17:53:45","2018-05-25 00:38:27",""
"45155098","Login with Amazon","I want to implement login functionality with an amazon seller central account. I was following the steps online for setup with amazon login and in one of the steps I have to register my android app in order to receive an api key. While registering the account, it asks for a signature value (32 hexadecimal pair value SHA-256) which i am not able to find out. The problem is my android application hasn't been released, so I am unsure if a build application also has a signature value or not? 
Can someone please let me know how to get the signature for an unreleased android app?
","First you need to sign your app. You can do it easily in Android Studio. Check ""Sign an APK"" section from the link
https://developer.android.com/studio/publish/app-signing.html
You don't need to release your app for getting the signature.
","86","<android><login><sha256><api-key>","0","0","1","2017-07-18 00:12:10","","0","","","","","2017-07-17 23:21:47",""
"54316829","How to fix encryption of sha256 hmac on google closure library?","Multiple Hmac encrypters ouput a different result of google closure library.
I've tried multiple Hmac encrypters and they output the same result. However, when using google closure library, both in NodeJS and ClojureScript, it outputs a totally different result.
require(""google-closure-library"");

function bytesToHex(b) {
    var hexchars = '0123456789abcdef';
    var hexrep = new Array(b.length * 2);
    for (var i = 0; i < b.length; ++i) {
      hexrep[i * 2] = hexchars.charAt((b[i] >> 4) & 15);
      hexrep[i * 2 + 1] = hexchars.charAt(b[i] & 15);
    }
    return hexrep.join('');
}

goog.require('goog.crypt.Hmac');
goog.require('goog.crypt.Sha256');

function getHmac(key, message) {
    var hasher = new goog.crypt.Sha256();
    var hmacer = new goog.crypt.Hmac(hasher, key, 64);
    return bytesToHex(hmacer.getHmac(message));
}

console.log(getHmac('ac13', 'msg'));

sha256 Hmac of key 'ac13' and message 'msg' has proven to be a4a21ba4ddef094c847d4a75ef9a026d329ee12563f3ab00e63261abae55c18d on multiple encryption libraries. 
","It works just fine. Hmac requires an array of numbers, not a string.
(defn hmac [key message]
    (let [decode goog.crypt/stringToByteArray
          hasher (goog.crypt.Sha256.)
          hmacer (goog.crypt.Hmac. hasher (decode key))]
        (.getHmac hmacer (decode message))))

(prn (goog.crypt/byteArrayToHex (hmac ""ac13"" ""msg"")))
=> ""a4a21ba4ddef094c847d4a75ef9a026d329ee12563f3ab00e63261abae55c18d""

","86","<javascript><clojurescript><sha256><hmac><google-closure-library>","4","4","1","2019-01-24 05:44:56","54340063","2","","","","","2019-01-22 21:39:17",""
"57851612","How to do signature using SHA256withRSA algorithm in C#","I tried search solution to my query, I couldn't able find match I am looking for, this is very basic, but to my better understanding I am posting below query.
I want to encode and do signature for my string using ""SHA256withRSA"" algorithm. I could able to see lot of sample code in java using ""SHA256withRSA"" but in C# I could see first we are hashed data using SHA256 then we are sign hash using RSACryptoServiceProvider. 
My questions are:

In C# we have separate algorithm of ""SHA256withRSA"", If yes, help with sample code.
If no then what would be better approach to achieve it in C#?

","Do not use RSACryptoServiceProvider unless you are doing interop with CAPI, like opening a named key.
To do RSA signing with SHA-(2-)256:
byte[] signature = rsa.SignData(data, HashAlgorithmName.SHA256, RSASignaturePadding.Pkcs1);

You can get the RSA object from a cert:
using (RSA rsa = cert.GetRSAPrivateKey())
{
    ...
}

Or you can make one up from existing RSA parameters:
using (RSA rsa = RSA.Create(rsaParameters))
{
   ...
}

Or you can make up a new key from nothing:
using (RSA rsa = RSA.Create(2048))
{
    // you’ll need to save the parameters somewhere to have a stable key
    rsaParameters = rsa.ExportParameters(true));
    ...
}

","85","<c#><rsa><sha256><rsa-sha256>","0","0","1","2019-09-09 20:29:06","57860811","0","","1364007","","2019-09-09 10:24:37","2019-09-09 09:52:00",""
"43575031","How to get salt from MySql database using Asp.net?","How can I retrieve salt from MySql database using Asp.Net ?
I want to use that retrieved salt to add to the user entered password to generate an SHA256 hash and then authenticate the user.
Here is what I am trying to do to fetch the salt:
String userNameEntered = UserN_TextBox.Text;
String passwordEntered = Password_TextBox.Text;
String connectionString = System.Configuration.ConfigurationManager.ConnectionStrings[""ConnectionString""].ToString();
connection = new MySqlConnection(connectionString);
connection.Open();
MessageBox.Show(""Successfully connected to database"");
String queryString = ""select salt from xyz.abc_table where salt = @Salt"";
command = new MySqlCommand(queryString, connection);
command.Parameters.AddWithValue(""@Salt"", queryString);
reader = command.ExecuteReader();
Response.Write(""Salt retrived is"" + reader);
reader.Close();
connection.Close();

When I execute this code, it returns the MySql Data Reader library rather than the salt in the database....
Thanks in advance... :) 
","Here I have solved my problem. Here is the solution to the problem. It might help someone:
try
        {

            String connectionString = System.Configuration.ConfigurationManager.ConnectionStrings[""ConnectionString""].ToString();
            connection = new MySqlConnection(connectionString);
            connection.Open();
            MessageBox.Show(""Successfully connected to database"");
            String queryString = ""select salt from xyz.abc_table where email_address = @E_Address"";
            command = new MySqlCommand(queryString, connection);
            command.Parameters.AddWithValue(""@E_Address"", UserN_TextBox.Text);
            reader = command.ExecuteReader();
            if (reader.Read())
            {
                Response.Write(""Retrived Salt is "" + reader[""salt""]);
                reader.Close();
                connection.Close();
            }

        }
        catch (Exception ex)
        {
            MessageBox.Show(""Failed due to"" +ex);
        }

","84","<mysql><asp.net><forms-authentication><sha256><saltedhash>","0","0","1","2017-04-26 23:44:38","43578005","6","","5377805","","2017-04-26 23:44:38","2017-04-23 18:41:10",""
"53351867","SHA256 Hash doesn't match the one listed on Bitcoin Wiki","I am trying to create a bitcoin address by following the steps shown here. However, I am getting a different hash then the one shown in step 2.
Calculating the SHA256 hash on:
0250863ad64a87ae8a2fe83c1af1a8403cb53f53e486d8511dad8a04887e5b2352

Gives me the output:
a9ce83de3a0ff3516b7c50cdd787e9f69f152f227d93c9512774231e7132e925

The problem is according to the Bitcoin wiki I should get the following hash: 
0b7c28c9b7290c98d7438e70b3d3f7c848fbd7d1dc194ff83f4f7cc9b1378e98

Can someone explain why I am not getting the same hash as the wiki?
","You are treating 0250863ad64a87ae8a2fe83c1af1a8403cb53f53e486d8511dad8a04887e5b2352 as an ascii string, whereas you should be treating it as a hex representation of 32 bytes.
If you use it as a string, you get:
echo -n ""0250863ad64a87ae8a2fe83c1af1a8403cb53f53e486d8511dad8a04887e5b2352"" | openssl sha256
(stdin)= a9ce83de3a0ff3516b7c50cdd787e9f69f152f227d93c9512774231e7132e925

If you treat it as bytes, you get the right result:
echo -n ""0250863ad64a87ae8a2fe83c1af1a8403cb53f53e486d8511dad8a04887e5b2352"" | xxd -p -r | openssl sha256
(stdin)= 0b7c28c9b7290c98d7438e70b3d3f7c848fbd7d1dc194ff83f4f7cc9b1378e98

","84","<encryption><bitcoin><sha256>","1","1","1","2018-11-18 00:35:19","53352824","0","","7245977","","2018-11-18 00:35:19","2018-11-17 13:54:11",""
"24474648","Add OpenSSL library to vc project","i download the library openssl (LAtest) from here. 
I create a new empty project and i add the existing item sha256t.c to my project. But i can't add library openssl to my project to work perfectly. I would like to know the steps can i folow to do it.
I am using visual studio 2013 and windows 7 operating system.
","","84","<c><visual-studio-2013><openssl><sha256>","0","","0","2014-06-29 09:09:41","","2","","","","","2014-06-29 09:09:41",""
"56028137","Proof of work Algorithm for a simple blockchain implementation (F#)","I am currently trying to learn about blockchains and have understood the ground principles. So I am trying to implement a simple blockchain
The problem is that I cannot get a proof of work algorithm to function.
let sha256 = System.Security.Cryptography.SHA256.Create()
let hash (n : int) =
    sha256.ComputeHash (BitConverter.GetBytes n)
    |> BitConverter.ToString
    |> fun x -> x.Replace (""-"", """")

let verify x = hash x |> fun p1 -> p1.EndsWith ""0000""

let rec proofOfWork p0 x =
  if verify (p0 + x) then
     x
  else
     proofOfWork p0 (x + 1)

[<EntryPoint>]
let main argv =

   let s = proofOfWork 100 1
   let s' = proofOfWork s 1 
   let s'' = proofOfWork s' 1

   0 

This returns a closed loop of ""10312 -> 100 -> 10312"" which seems to be fairly incorrect which makes sense if you think about it. So how would you actually go about creating one of these algorithms as I followed a guide in python which made an algorithm like this in exactly the same manner?
","There is a problem with your proof of work algorithm. Your PoW algorithm should take some data X and find a number Y such that the hash of Y appended to X result in a number that in your case end with 4 trailing zeros. 
A possible solution 
let rec proofOfWork p0 x =
  let pow' = (string x) + (string p0) |> int
  if verify (pow') then
     x
  else
     proofOfWork p0 (x + 1)

","84","<f#><blockchain><sha256>","1","1","1","2019-05-13 09:46:34","","1","","","","","2019-05-07 17:57:27",""
"57439671","How to HMAC SHA256 sign a string with a double array key or an hex string key using google apps script?","Following the AWS example on Signature Version 4, I am trying to reproduce the example using a Google Sheets with Google apps scripting. I face an issue with the kregion signature in the example. While I can confirm that the AWS example is valid using an online signature tool, I am never able to reproduce the example output using any Google app script. As HMAC SHA256 signature works fine for an earlier part of the example (kdate), the issue seems to come from the way data is stored or used.
What works for kDate is the following with parts from another stackoverflow entry to convert byte array to hex string and with the help of Google apps script documentation for computeHmacSha256Signature:
var input=""20120215"";
var key=""AWS4""+""wJalrXUtnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY"";//Do not worry, this is an example key, not my actual key
var signature=Utilities.computeHmacSha256Signature(input,key);
signature=signature.map(function(chr){return (chr+256).toString(16).slice(-2)}).join('');//convert byte array to hex string
Logger.log(signature);//valid 969fbb94feb542b71ede6f87fe4d5fa29c789342b0f407474670f0c2489e0a0d

Here is the same thing for the kRegion:
var input=""us-east-1"";
var key=""969fbb94feb542b71ede6f87fe4d5fa29c789342b0f407474670f0c2489e0a0d"";
var signature=Utilities.computeHmacSha256Signature(input,key);
signature=signature.map(function(chr){return (chr+256).toString(16).slice(-2)}).join('');
Logger.log(signature);//non-valid a59e30f9d899c47b3dd68ea1c0ab3bb529e03a8f4ed2f54cb64af547330a22a0

I am not surprised that it doesn't produce the valid example kRegion output 69daa0209cd9c5ff5c8ced464a696fd4252e981430b10e3d3fd8e2f197d7a70c because the key is stored as a hex string which doesn't make much sense. Here is the same thing with an attempt at decoding the hex string to a byte array inspired from this github entry:
var input=""us-east-1"";
var key=""969fbb94feb542b71ede6f87fe4d5fa29c789342b0f407474670f0c2489e0a0d"";
var a=[];
for(var i=0, len=key.length; i<len; i+=2) {
  a.push(parseInt(key.substr(i,2),16));
}
key=a;
Logger.log(key);//[150.0, 159.0, 187.0, 148.0, 254.0, 181.0, 66.0, 183.0, 30.0, 222.0, 111.0, 135.0, 254.0, 77.0, 95.0, 162.0, 156.0, 120.0, 147.0, 66.0, 176.0, 244.0, 7.0, 71.0, 70.0, 112.0, 240.0, 194.0, 72.0, 158.0, 10.0, 13.0]
var signature=Utilities.computeHmacSha256Signature(input,key);
signature=signature.map(function(chr){return (chr+256).toString(16).slice(-2)}).join('');
Logger.log(signature);//non-valid ac7a5b21190d18b323886d48cd3c4c7486a0f1dd4edb80d245a221a95f5e689b

Using an online converter, i can confirm that the key is well converted. Yet, the output signature is still wrong.
I was wondering whether it could be because the key bytes are stored as doubles. So, I tried the following with no difference on the output signature:
var input=""us-east-1"";
var key=[0x96, 0x9f, 0xbb, 0x94, 0xfe, 0xb5, 0x42, 0xb7, 0x1e, 0xde, 0x6f, 0x87, 0xfe, 0x4d, 0x5f, 0xa2, 0x9c, 0x78, 0x93, 0x42, 0xb0, 0xf4, 0x07, 0x47, 0x46, 0x70, 0xf0, 0xc2, 0x48, 0x9e, 0x0a, 0x0d];
var signature=Utilities.computeHmacSha256Signature(input,key);
signature=signature.map(function(chr){return (chr+256).toString(16).slice(-2)}).join('');
Logger.log(signature);//non-valid ac7a5b21190d18b323886d48cd3c4c7486a0f1dd4edb80d245a221a95f5e689b

Then I thought maybe both parameters of the computeHmacSha256Signature function need to be byte arrays:
var input=[0x75, 0x73, 0x2d, 0x65, 0x61, 0x73, 0x74, 0x2d, 0x31];
var key=[0x96, 0x9f, 0xbb, 0x94, 0xfe, 0xb5, 0x42, 0xb7, 0x1e, 0xde, 0x6f, 0x87, 0xfe, 0x4d, 0x5f, 0xa2, 0x9c, 0x78, 0x93, 0x42, 0xb0, 0xf4, 0x07, 0x47, 0x46, 0x70, 0xf0, 0xc2, 0x48, 0x9e, 0x0a, 0x0d];
var signature=Utilities.computeHmacSha256Signature(input,key);//leads to error ""Cannot convert Array to (class)[].""
signature=signature.map(function(chr){return (chr+256).toString(16).slice(-2)}).join('');
Logger.log(signature);

The above leads to error ""Cannot convert Array to (class)[]."". Which seems to indicate that the computeHmacSha256Signature function is more comfortable with the string input.
I got yet another invalid kRegion output signature by using the output signature of kDate without converting it to a string:
var input=""20120215"";
var key=""AWS4""+""wJalrXUtnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY"";
var signature=Utilities.computeHmacSha256Signature(input,key);
input=""us-east-1"";
key=signature;
signature = Utilities.computeHmacSha256Signature(input,key);
signature=signature.map(function(chr){return (chr+256).toString(16).slice(-2)}).join('');
Logger.log(signature);//non-valid c3b37a4dc2e085fcd35411493526592a33ef1d7d38454a25e574a34fe190d7be

I tried many other conversions with no success.
","
You want to achieve the result of the sample scripts of ""Examples of How to Derive a Signing Key for Signature Version 4"" using Google Apps Script.

In your case, you want to retrieve the value of f4780e2d9f65fa895f9c67b32ce1baf0b0d8a43505a000a1a9e090d414db404d from the following sample values as kSigning.
key = 'wJalrXUtnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY'
dateStamp = '20120215'
regionName = 'us-east-1'
serviceName = 'iam'



If my understanding is correct, how about this sample script?
Important points:

At Google Apps Script, the data which was encrypted by Utilities.computeHmacSha256Signature() is the bytes array of the signed hexadecimal. In the sample scripts, the bytes array is converted to the unsigned hexadecimal. So it is required to be converted.


But, when the byte array is created by Utilities.computeHmacSha256Signature(), the created byte array can be used for Utilities.computeHmacSha256Signature() without converting.


From above situation, the sample script for Google Apps Script can be made as follows.
Sample script:
In this sample script, in order to check whether the script is correct, I tested the script using the sample values at https://docs.aws.amazon.com/general/latest/gr/signature-v4-examples.html.
function myFunction() {
  // These are the sample values of https://docs.aws.amazon.com/general/latest/gr/signature-v4-examples.html
  var key = 'wJalrXUtnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY';
  var dateStamp = '20120215';
  var regionName = 'us-east-1';
  var serviceName = 'iam';

  // I prepared the following script.
  var kDate = Utilities.computeHmacSha256Signature(dateStamp, ""AWS4"" + key);
  var kRegion = Utilities.computeHmacSha256Signature(Utilities.newBlob(regionName).getBytes(), kDate);
  var kService = Utilities.computeHmacSha256Signature(Utilities.newBlob(serviceName).getBytes(), kRegion);
  var kSigning = Utilities.computeHmacSha256Signature(Utilities.newBlob(""aws4_request"").getBytes(), kService);
  kSigning = kSigning.map(function(e) {return (""0"" + (e < 0 ? e + 256 : e).toString(16)).slice(-2)}).join("""");

  Logger.log(kSigning) // Result
}


About above script, for example, kDate is the byte array. So regionName is required to be converted to the byte array. Please be careful this.

Result:
f4780e2d9f65fa895f9c67b32ce1baf0b0d8a43505a000a1a9e090d414db404d

This value is the same with the sample value. By this, it was found that the prepared script returns the correct value.
References:

computeHmacSha256Signature(value, key)
map()

If I misunderstood your question and this was not the result you want, I apologize.
","84","<amazon-web-services><google-apps-script><digital-signature><sha256><hmac>","3","5","1","2019-08-10 08:04:32","57440295","0","2","2590508","","2019-08-10 06:30:55","2019-08-10 05:50:51",""
"43641241","Is sha2 hashed field require varchar 32 or 64 field?","As I know sha2 generate 256 bit hash. 
256bit/8 = 32bytes. 
So, It should take only varchar(32) field in the database. But I saw an article saying sah2 database field require varchar(64) field in the database. Is that true? Can someone explain, Please!!
","Hashes are generally represented as hexadecimal strings:
string(64) ""316a2017faa1ee410aadfb159097b8af260a258aa4210c550844cab89083111d""

In this case, SHA256 is 64 bytes. However, you may choose to store it in its binary form. This will make it take half as much space (32 bytes) but will make it unreadable in your database shell:
string(32) ""̵9�~Rbgc\�7ME���)Fw�w��E�kc5""

Whether you store as a 64 byte string or a 32 byte binary is up to you.
","83","<php><mysql><sha256>","-1","0","2","2017-04-26 17:56:02","43641316","1","1","","","","2017-04-26 17:50:28",""
"43641241","Is sha2 hashed field require varchar 32 or 64 field?","As I know sha2 generate 256 bit hash. 
256bit/8 = 32bytes. 
So, It should take only varchar(32) field in the database. But I saw an article saying sah2 database field require varchar(64) field in the database. Is that true? Can someone explain, Please!!
","Use varchar(64) or string(64). You need 64 characters to represent the 256 bits in SHA-256, it's represented in hexadecimal so each digit represents 4 bits and that's 256/4 = 64.
","83","<php><mysql><sha256>","-1","0","2","2017-04-26 17:56:02","43641316","1","1","","","","2017-04-26 17:50:28",""
"30870637","Pulling previous Artifactory builds into Jenkins workspace for use in comparing SHA-256 hashes","I am using maven 3 to build in Jenkins and publish to Artifactory.  At build, I run a shell to calculate SHA-256 hashes on the workspace.  We need to use Jenkins to deploy these builds.  Is there a way to pull a particular build from Artifactory into Jenkins without changing the metadata for Maven?  I just want to pull the build into the Jenkins workspace, re-run the SHA-256 and compare the results.
","","83","<maven><jenkins><artifactory><sha256>","1","","0","2015-06-16 14:33:05","","2","","","","","2015-06-16 14:33:05",""
"16661249","Is there an issue with putting a longer input string to a hashing algorithm than the algorithm outputs?","Currently I'm designing a hashing system for user emails, but what happens if the user email is longer than the hash output. I usually use sha1 sha256 or sha512 if it makes a difference based on algorithm... It just seems like at a point the algorithm wouldn't be able to keep on producing unique outputs.
","Hash values usually have a fixed length from 13 (DES) to 86 (SHA2) characters. It's perfectly normal if you give longer input. Think of it like a ""cross sum"" that you can do with arbitrary long numbers as well.
Regarding the uniqueness, using the standard crypt(3) function with SHA-512 and characters in the set a-zA-Z./ you have 54 different characters and a 86 character long string so 54^86 different values. That's a lot :-)
(Don't use the 13 char long DES crypt though, that's bruteforceable with modern hardware and always use ""salt"" values so that the same input string gives different hash values and you can't use a ""rainbow table"" attack).
","83","<hash><unique><sha1><sha256><sha512>","0","0","1","2013-06-13 12:45:00","17087438","0","","","","","2013-05-21 02:30:17",""
"33403855","Most efficient way to loop through 10 character string in java?","I have seen a lot of different ways to do this but due to lack of experience in this area I'm not sure which is best. My program saves a lot of time the more efficient it is so I've come to you guys to ask.
All I need is a loop to hit every possible combination for a 10 character string in java involving: 
    abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
So from aaaaaaaaaa to AAAAAAAAAA to 9999999999 using all the character combinations above.
Also mini-question (not necessary but please comment if you can help), what language would be quickest to write a database of Sha-256 hashes. In java I'm getting 1.5 million hashes a second on my current computer, but when I write them all to a text file it slows to 200k a second. Would a light weight scripting language like Python be quicker or is there any way to legally buy more computational power to run my programs?
All help is greatly appreciated!
","","82","<java><string><performance><loops><sha256>","0","","0","2015-10-29 00:16:03","","6","","","","","2015-10-29 00:16:03",""
"17658387","API request authentication in iphone","I've been trying to generate an authentication for a API request as follows: base64(sha256(payload+secret))
I've been using the following code but the base64 string that's been generated isn't correct.
- (void)viewDidLoad
{
[super viewDidLoad];
NSString *data = @""{""
    @""\""testing\"":{""
    @""\""uri\"":\""https://example.com/something.php\"",""
    @""\""id\"":\""0\""""
    @""}""
    @""}"";
NSString *key = @""secret"";
NSString *hashString = [NSString stringWithFormat:@""%@%@"",data,key];
const char *cKey = [hashString cStringUsingEncoding:NSUTF8StringEncoding];
NSData *sdata = [NSData dataWithBytes:cKey length:hashString.length];
unsigned char sHMAC[64];
CC_SHA256((__bridge const void *)(sdata), sdata.length, sHMAC);
NSData *hash = [[NSData alloc] initWithBytes:sHMAC length:sizeof(sHMAC)];
NSString *s = [self base64forData:hash];
NSLog(@""Authentication: %@"",s);
}

//Base64 encoding
- (NSString*)base64forData:(NSData*)theData {
const uint8_t* input = (const uint8_t*)[theData bytes];
NSInteger length = [theData length];

static char table[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="";

NSMutableData* data = [NSMutableData dataWithLength:((length + 2) / 3) * 4];
uint8_t* output = (uint8_t*)data.mutableBytes;

NSInteger i;
for (i=0; i < length; i += 3) {
    NSInteger value = 0;
    NSInteger j;
    for (j = i; j < (i + 3); j++) {
        value <<= 8;

        if (j < length) {
            value |= (0xFF & input[j]);
        }
    }

    NSInteger theIndex = (i / 3) * 4;
    output[theIndex + 0] = table[(value >> 18) & 0x3F];
    output[theIndex + 1] = table[(value >> 12) & 0x3F];
    output[theIndex + 2] = (i + 1) < length ? table[(value >> 6) & 0x3F] : '=';
    output[theIndex + 3] = (i + 2) < length ? table[(value >> 0) & 0x3F] : '=';
}

return [[NSString alloc] initWithData:data encoding:NSASCIIStringEncoding];
}

I've been struggling with this one for a couple of weeks already. 
Thank you for your kind assistance!
","You have an extra comma in your JSON dictionary. Maybe this is messing it up?
Also, notice that your hashString looks like this: 
{""testing"":{""uri"":""https://example.com/something.php"",""id"":""0"",}}secret

Is this intended?
Also, for your traditional c-code, it has all been done before. See e.g. this answer.
","82","<ios><objective-c><base64><sha256>","0","1","1","2013-07-15 17:46:24","","0","","2253208","","2013-07-15 17:46:24","2013-07-15 15:49:18",""
"52566923","Example AWS4 S3 POST signature calculation fails","var crypto = require('crypto')
var secret = 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY'
var date = '20151229'
var region = 'us-east-1'
var service = 's3'
var terminator = 'aws4_request'

var policyEncoded = 'eyAiZXhwaXJhdGlvbiI6ICIyMDE1LTEyLTMwVDEyOjAwOjAwLjAwMFoiLA0KICAiY29uZGl0aW9ucyI6IFsNCiAgICB7ImJ1Y2tldCI6ICJzaWd2NGV4YW1wbGVidWNrZXQifSwNCiAgICBbInN0YXJ0cy13aXRoIiwgIiRrZXkiLCAidXNlci91c2VyMS8iXSwNCiAgICB7ImFjbCI6ICJwdWJsaWMtcmVhZCJ9LA0KICAgIHsic3VjY2Vzc19hY3Rpb25fcmVkaXJlY3QiOiAiaHR0cDovL3NpZ3Y0ZXhhbXBsZWJ1Y2tldC5zMy5hbWF6b25hd3MuY29tL3N1Y2Nlc3NmdWxfdXBsb2FkLmh0bWwifSwNCiAgICBbInN0YXJ0cy13aXRoIiwgIiRDb250ZW50LVR5cGUiLCAiaW1hZ2UvIl0sDQogICAgeyJ4LWFtei1tZXRhLXV1aWQiOiAiMTQzNjUxMjM2NTEyNzQifSwNCiAgICB7IngtYW16LXNlcnZlci1zaWRlLWVuY3J5cHRpb24iOiAiQUVTMjU2In0sDQogICAgWyJzdGFydHMtd2l0aCIsICIkeC1hbXotbWV0YS10YWciLCAiIl0sDQoNCiAgICB7IngtYW16LWNyZWRlbnRpYWwiOiAiQUtJQUlPU0ZPRE5ON0VYQU1QTEUvMjAxNTEyMjkvdXMtZWFzdC0xL3MzL2F3czRfcmVxdWVzdCJ9LA0KICAgIHsieC1hbXotYWxnb3JpdGhtIjogIkFXUzQtSE1BQy1TSEEyNTYifSwNCiAgICB7IngtYW16LWRhdGUiOiAiMjAxNTEyMjlUMDAwMDAwWiIgfQ0KICBdDQp9'

console.log('Calculated answer:', crypto
    .createHmac('sha256', 'AWS4' + secret)
    .update(date)
    .update(region)
    .update(service)
    .update(terminator)
    .update(policyEncoded)
    .digest('hex'))

console.log('Correct answer   :', '8afdbf4008c03f22c2cd3cdb72e4afbb1f6a588f3255ac628749a66d7f09699e')

I wrote the code to calculate the signature for AWS4 S3 upload from the browser.
The example StringToSign comes from here:
Signature v4 calculation example for POST
The expected output is also present on the same page.
The algorithm to sign is presented here:
Calculating a signature v4 for POST
But the result I am getting does not match the correct answer. Please help to locate the error.
I've googled and searched dozens of answers here on SO already, spend 10+ hours.
","It does not work because .update() merely writes new data into a hash stream. AWS requires you to hash the result of previous steps with a new key like this:
var x
x = crypto.createHmac('sha256', 'AWS4' + secret).update(date).digest()
x = crypto.createHmac('sha256', x).update(region).digest()
x = crypto.createHmac('sha256', x).update(service).digest()
x = crypto.createHmac('sha256', x).update(terminator).digest()
x = crypto.createHmac('sha256', x).update(policyEncoded).digest()
console.log('Calculated answer:', x.toString('hex'))
console.log('Correct answer   :', '8afdbf4008c03f22c2cd3cdb72e4afbb1f6a588f3255ac628749a66d7f09699e')

Output:
Calculated answer: 8afdbf4008c03f22c2cd3cdb72e4afbb1f6a588f3255ac628749a66d7f09699e
Correct answer   : 8afdbf4008c03f22c2cd3cdb72e4afbb1f6a588f3255ac628749a66d7f09699e

","81","<node.js><amazon-s3><digital-signature><sha256><hmac>","1","1","2","2018-11-27 00:20:50","53491021","0","","1968972","","2018-09-29 09:57:13","2018-09-29 09:17:29",""
"52566923","Example AWS4 S3 POST signature calculation fails","var crypto = require('crypto')
var secret = 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY'
var date = '20151229'
var region = 'us-east-1'
var service = 's3'
var terminator = 'aws4_request'

var policyEncoded = 'eyAiZXhwaXJhdGlvbiI6ICIyMDE1LTEyLTMwVDEyOjAwOjAwLjAwMFoiLA0KICAiY29uZGl0aW9ucyI6IFsNCiAgICB7ImJ1Y2tldCI6ICJzaWd2NGV4YW1wbGVidWNrZXQifSwNCiAgICBbInN0YXJ0cy13aXRoIiwgIiRrZXkiLCAidXNlci91c2VyMS8iXSwNCiAgICB7ImFjbCI6ICJwdWJsaWMtcmVhZCJ9LA0KICAgIHsic3VjY2Vzc19hY3Rpb25fcmVkaXJlY3QiOiAiaHR0cDovL3NpZ3Y0ZXhhbXBsZWJ1Y2tldC5zMy5hbWF6b25hd3MuY29tL3N1Y2Nlc3NmdWxfdXBsb2FkLmh0bWwifSwNCiAgICBbInN0YXJ0cy13aXRoIiwgIiRDb250ZW50LVR5cGUiLCAiaW1hZ2UvIl0sDQogICAgeyJ4LWFtei1tZXRhLXV1aWQiOiAiMTQzNjUxMjM2NTEyNzQifSwNCiAgICB7IngtYW16LXNlcnZlci1zaWRlLWVuY3J5cHRpb24iOiAiQUVTMjU2In0sDQogICAgWyJzdGFydHMtd2l0aCIsICIkeC1hbXotbWV0YS10YWciLCAiIl0sDQoNCiAgICB7IngtYW16LWNyZWRlbnRpYWwiOiAiQUtJQUlPU0ZPRE5ON0VYQU1QTEUvMjAxNTEyMjkvdXMtZWFzdC0xL3MzL2F3czRfcmVxdWVzdCJ9LA0KICAgIHsieC1hbXotYWxnb3JpdGhtIjogIkFXUzQtSE1BQy1TSEEyNTYifSwNCiAgICB7IngtYW16LWRhdGUiOiAiMjAxNTEyMjlUMDAwMDAwWiIgfQ0KICBdDQp9'

console.log('Calculated answer:', crypto
    .createHmac('sha256', 'AWS4' + secret)
    .update(date)
    .update(region)
    .update(service)
    .update(terminator)
    .update(policyEncoded)
    .digest('hex'))

console.log('Correct answer   :', '8afdbf4008c03f22c2cd3cdb72e4afbb1f6a588f3255ac628749a66d7f09699e')

I wrote the code to calculate the signature for AWS4 S3 upload from the browser.
The example StringToSign comes from here:
Signature v4 calculation example for POST
The expected output is also present on the same page.
The algorithm to sign is presented here:
Calculating a signature v4 for POST
But the result I am getting does not match the correct answer. Please help to locate the error.
I've googled and searched dozens of answers here on SO already, spend 10+ hours.
","Short version of exebook answer:
var hmac = require('crypto').createHmac
var secret = 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY'
var req = {
  date: '20151229',
  region: 'us-east-1',
  service: 's3',
  terminator: 'aws4_request',
  policyEncoded: 'eyAiZXhwaXJhdGlvbiI6ICIyMDE1LTEyLTMwVDEyOjAwOjAwLjAwMFoiLA0KICAiY29uZGl0aW9ucyI6IFsNCiAgICB7ImJ1Y2tldCI6ICJzaWd2NGV4YW1wbGVidWNrZXQifSwNCiAgICBbInN0YXJ0cy13aXRoIiwgIiRrZXkiLCAidXNlci91c2VyMS8iXSwNCiAgICB7ImFjbCI6ICJwdWJsaWMtcmVhZCJ9LA0KICAgIHsic3VjY2Vzc19hY3Rpb25fcmVkaXJlY3QiOiAiaHR0cDovL3NpZ3Y0ZXhhbXBsZWJ1Y2tldC5zMy5hbWF6b25hd3MuY29tL3N1Y2Nlc3NmdWxfdXBsb2FkLmh0bWwifSwNCiAgICBbInN0YXJ0cy13aXRoIiwgIiRDb250ZW50LVR5cGUiLCAiaW1hZ2UvIl0sDQogICAgeyJ4LWFtei1tZXRhLXV1aWQiOiAiMTQzNjUxMjM2NTEyNzQifSwNCiAgICB7IngtYW16LXNlcnZlci1zaWRlLWVuY3J5cHRpb24iOiAiQUVTMjU2In0sDQogICAgWyJzdGFydHMtd2l0aCIsICIkeC1hbXotbWV0YS10YWciLCAiIl0sDQoNCiAgICB7IngtYW16LWNyZWRlbnRpYWwiOiAiQUtJQUlPU0ZPRE5ON0VYQU1QTEUvMjAxNTEyMjkvdXMtZWFzdC0xL3MzL2F3czRfcmVxdWVzdCJ9LA0KICAgIHsieC1hbXotYWxnb3JpdGhtIjogIkFXUzQtSE1BQy1TSEEyNTYifSwNCiAgICB7IngtYW16LWRhdGUiOiAiMjAxNTEyMjlUMDAwMDAwWiIgfQ0KICBdDQp9'
}
var signature = Object.keys(req).
  reduce((h, k) => hmac('sha256', h).update(req[k]).digest(), 'AWS4' + secret).
  toString('hex')
console.log(signature)
//8afdbf4008c03f22c2cd3cdb72e4afbb1f6a588f3255ac628749a66d7f09699e

","81","<node.js><amazon-s3><digital-signature><sha256><hmac>","1","1","2","2018-11-27 00:20:50","53491021","0","","1968972","","2018-09-29 09:57:13","2018-09-29 09:17:29",""
"50220571","Calculating the time needed to find an sha256 with d zeroes","I have a question about simple hashing that I couldn't manage to find to answer on the web.
I am generating random strings, hashing them with sha256 and assume that to find a string that after hashing it has d zeroes at it's beginning took me x seconds. How can I calclute with x how much time it will take me to find a string that after hashing has d+1 zeroes at it's beginning?
Thanks
","","81","<hash><sha256>","0","","0","2018-05-07 18:42:20","","4","","","","","2018-05-07 18:42:20",""
"33220323","How to generate the sha256 hash of a phpmailer generated and sent mail","is there a way to generate a SHA256 hash of a mail generated and sent via Phpmailer plugin or maybe a method for saving the sent mail in an eml file in a host folder?
","Solved by saving the generated mail in this way:
$mail->preSend();
file_put_contents('namethefile.eml', $mail->getSentMIMEMessage());
","80","<hash><phpmailer><send><sha256>","1","1","1","2015-10-19 17:36:04","","0","","","","","2015-10-19 17:21:34",""
"37646706","Why is hashed password not matching from value in database?","I have a registration form whose snippet is as follows-
$email=$_GET['email'];
$pass=$_GET['pass'];
$salt = dechex(mt_rand(0, 2147483647)) . dechex(mt_rand(0, 2147483647));
        $password = hash('sha256', $pass.$salt);
        for($round = 0; $round < 65536; $round++) 
        { 
            $password = hash('sha256', $password.$salt);
        }
        mysql_query(""INSERT INTO user_tbl(email, password, salt) VALUES ('$email','$password','$salt')"");

For a specific password following string is getting stored in db-
df22e53c7fb2d599d64597a04fd28ca47bc79675ac50a2381c9a17fd4e07b263

Now i also have a login form. Whose code snippet is as follows-
$email=$_GET['email'];
$pass=$_GET['password'];
$result=mysql_query(""SELECT * from user_tbl where email='$email'"");
$row=mysql_fetch_array($result);
$salt = $row['salt'];
$password = hash('sha256', $pass.$salt);
for($round = 0; $round < 65536; $round++) 
   { 
       $password = hash('sha256', $password.$salt);
   }
if(strcmp($row['password'],$password)!=0)
{
    echo ""wrongpassword"";
    exit();
}
else
{
    echo ""Success"";
}

Now i could see that the hashed password which the login form is evaluating to is also df22e53c7fb2d599d64597a04fd28ca47bc79675ac50a2381c9a17fd4e07b263 . Which is same as what registration form is submitting to database.
They should match. But they are not. The String compare test is always failing.
The length of both fields i.e. password and salt are 200 each and are of type VARCHAR which is sufficient i think because above algo will generate a 64 character long string only. Still What is the problem? Please help me out here. 
","You just need a simple correction in your IF condition:
if(strcmp($row['password'],$password)!==0) // change here :)
{
    echo ""wrongpassword"";
    exit();
}
else
{
    echo ""Success"";
}

Please see the documentation: http://php.net/manual/en/function.strcmp.php
","80","<javascript><php><mysql><hash><sha256>","0","0","1","2016-06-05 21:13:14","","3","","","","","2016-06-05 20:59:35",""
"56599650","Ktor basic auth from UserHashedTableAuth","In this sample from Ktor website https://ktor.io/samples/feature/auth.html they use an account ""test"" with password ""test"" as example.
@UseExperimental(KtorExperimentalAPI::class)
val hashedUserTable = UserHashedTableAuth(
    getDigestFunction(""SHA-256"") { ""ktor${it.length}"" },
    table = mapOf(
        ""test"" to Base64.getDecoder().decode(""GSjkHCHGAxTTbnkEDBbVYd+PUFRlcWiumc4+MWE9Rvw="") // sha256 for ""test""
    )
)

I need to create another entry, but I can't figure out how they got that hash. I tried to sha256 the word ""test"", salted or not, tried to base64 the result... Nothing matches that hash so I'm unable to create another user.
Anyone could enlighten me here on how to create a compatible hash with that code?
","After a lot of try and errors... Here's how to duplicate that: 
echo -n ktor4test | openssl dgst -binary -sha256 | openssl base64

I hope this helps someone in the future not to waste the same time as myself.
","78","<authentication><kotlin><base64><sha256><ktor>","0","1","1","2019-06-14 16:00:13","56601712","0","","","","","2019-06-14 13:54:44",""
"56992571","SHA256 doesn't yield same result between C# and SQL Server when using Spanish words","I am using SHA256 to get a hashed hexadecimal string. It works fine when using regular characters, however when a string to be hashed includes accents/diacritics, then I get a different result in C# and T-SQL. I would prefer to make the change on the SQL Server end. 

Example word that does match: bird  
Example word that does not match: MUÑOZ

C#
using (SHA256 sha2 = SHA256.Create())  
{
    var hash = sha2.ComputeHash(Encoding.UTF8.GetBytes(fullAddress));
    string hexString = string.Empty;

    for (int i = 0; i < hash.Length; i++)
    {
        hexString += hash[i].ToString(""X2""); //Convert the byte to Hexadecimal representation, Notice that we use ""X2"" instead of ""X""
    }

    sha2.Dispose();
    return hexString;
}

SQL
declare @fullAddress nvarchar(500)
set @fullAddress = 'MUÑOZ'
select CONVERT([varchar](256), HASHBYTES('SHA2_256', @fullAddress), 2) 

",".NET, Windows and SQL Server use UTF16, not UTF8. The two snippets are hashing different bytes. When the same encoding is used, the hash strings are identical.
This :
using (var sha2 = System.Security.Cryptography.SHA256.Create())  
{
    var hash = sha2.ComputeHash(Encoding.Unicode.GetBytes(""MUÑOZ""));
    {
        string hexString = string.Empty;

        for (int i = 0; i < hash.Length; i++)
        {
            hexString += hash[i].ToString(""X2"");
        }
        Console.WriteLine(hexString);        
    }    
}

Produces :
276DB000BF524070F106A2C413942159AB5EF2F5CA5A5B91AB2F3B6FA48EE1ED

Which is the same as SQL Server's hash string
","78","<c#><sql-server><sha256><hashbytes>","0","4","1","2019-07-11 15:46:48","56992979","11","","1391692","","2019-07-11 15:39:31","2019-07-11 15:23:09",""
"46594842","Converting a varbinary sha2 hash without SQL server","I am brand new to hashes, so I apologize in advance for the newbieness. 
What I Want to Do
I have a large list of sha256 hashes that correspond to email addresses. I have no way of knowing the original email addresses. The sha256 hashes were generated from SQL server and appear to be in varbinary. An example is: 0x3EFE04CD91AE58D9AE6019A330DDE09928C1586AC0F998B379AAF46772AAE326. 
What I need to do is generate SHA256 hashes of another list of email addresses which I do have and then compare the newly generated hashes with the original list to find the matches.
My problem
I do not have SQL server, and I have not been able to find a way to generate the varbinary type of hash. All of the solutions that I find using R, online hash generators, and mysql generate the hash using characters such as 5e524c1ccbb13fe78f4a370fa67b14b338e0034dd341f257a5ad33a992f5e5fb. 
It is entirely possible that it's just my ignorance here, and I would appreciate any reading to help me learn more about this. Ideally, my solution would be done using R, and I already have the code prepared to do it. Of course, none of the generated hashes match given the above problem. 
My questions is: How can I convert the varbinary sha256 hash to a character using either mysql, R, or JavaScript? I prefer R or mysql for this if possible. 
I appreciate any insights in advance! 
","","78","<mysql><r><hash><sha256>","0","","0","2017-10-05 21:09:53","","2","","","","","2017-10-05 21:09:53",""
"49020043","Return values are negative bytes from bouncy castle API for SHA256","
Hi,
I am using bouncy castle API as below.



iterations = 10000
  password = abcdefghi 
  salt = zyxwvutsrqpo


>Need return value as 8 bytes.
public byte[] getEncodedHash(String password, String salt, int iterations)    throws UnsupportedEncodingException {
PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator(newSHA256Digest());
try {
gen.init(password.getBytes(""UTF-8""), salt.getBytes(), iterations);
} catch (UnsupportedEncodingException ex) {
throw ex;
}
byte[] dk = ((KeyParameter) gen.generateDerivedParameters(64)).getKey();
return dk;        
}

Calling above function as below.
==================================
byte[] hashbyte = hasher.getEncodedHash(pass, salt, iterations);
System.out.println(Arrays.toString(hashbyte));

Output as below:
==================
[44, -6, -117, 7, -30, -68, 4, -9]

>Why am I getting negative bytes and is there anyway to get only positive bytes?

When I have checked with client which they are using Python script and they always get positive integers (I need to develop in Java using bouncy castle).  Surprising is, whatever positive numbers I have, they match exactly on their side at respective index (output from Python script).
Appreciate your valuable input on this.

","","78","<java><bouncycastle><sha256>","0","","0","2018-02-28 00:23:57","","5","","","","","2018-02-28 00:15:12","2018-02-28 00:22:26"
"55028350","Hash value from C function","I have a problem and hope you can help me.
I have a function written in C that returns hash a value. My 
headache is when I execute the  program from another tool it takes a lot of time to run, probably because inside my function I run a command that hashes my value in SHA256, so I would like to know if there is another way to do it, maybe a function or something like that.
Here is what I have:
const char *EncryptSHA256 (char *Arg1) {  
    char command[128];
    char result[512];

    //I want to replace from here
    snprintf(command, sizeof command, ""echo -n %s | sha256sum | cut -c1-64"",Arg1);  

    FILE *fpipe;

    if (0 == (fpipe = (FILE*)popen(command, ""r""))) {
        perror(""popen() failed."");
        exit(1);
    }

    fread(result, 1, 512, fpipe);

    pclose(fpipe);
    const char *sha256 = &result[0];
    //to here

    return sha256;
}  

","Your code has undefined behavior because you return a pointer to result, a local array with automatic storage. Reading from this array by the caller has undefined behavior.
You should at least make result static so its contents remain readable after EncryptSHA256 returns to its caller.
Regarding the inefficiency of the method, here is a public domain implementation of SHA256 that you can use directly inside your program:
/* public domain sha256 implementation based on fips180-3 */

#include <stddef.h>
#include <stdint.h>
#include <string.h>

/* Public API */

struct sha256 {
    uint64_t len;    /* processed message length */
    uint32_t h[8];   /* hash state */
    uint8_t buf[64]; /* message block buffer */
};

/* reset state */
void sha256_init(struct sha256 *s);
/* process message */
void sha256_update(struct sha256 *s, const void *m, size_t len);
/* get message digest */
/* state is ruined after sum, keep a copy if multiple sum is needed */
/* part of the message might be left in s, zero it if secrecy is needed */
void sha256_sum(struct sha256 *s, uint8_t md[32]);

/* Implementation */

static uint32_t ror(uint32_t n, int k) {
    return (n >> k) | (n << (32 - k));
}
#define Ch(x,y,z)  (z ^ (x & (y ^ z)))
#define Maj(x,y,z) ((x & y) | (z & (x | y)))
#define S0(x)      (ror(x,2) ^ ror(x,13) ^ ror(x,22))
#define S1(x)      (ror(x,6) ^ ror(x,11) ^ ror(x,25))
#define R0(x)      (ror(x,7) ^ ror(x,18) ^ (x>>3))
#define R1(x)      (ror(x,17) ^ ror(x,19) ^ (x>>10))

static const uint32_t K[64] = {
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
    0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
    0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
    0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
    0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
    0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
    0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

static void processblock(struct sha256 *s, const uint8_t *buf) {
    uint32_t W[64], t1, t2, a, b, c, d, e, f, g, h;
    int i;

    for (i = 0; i < 16; i++) {
        W[i]  = (uint32_t)buf[4 * i + 0] << 24;
        W[i] |= (uint32_t)buf[4 * i + 1] << 16;
        W[i] |= (uint32_t)buf[4 * i + 2] << 8;
        W[i] |= buf[4 * i + 3];
    }
    for (; i < 64; i++)
        W[i] = R1(W[i-2]) + W[i-7] + R0(W[i-15]) + W[i-16];
    a = s->h[0];
    b = s->h[1];
    c = s->h[2];
    d = s->h[3];
    e = s->h[4];
    f = s->h[5];
    g = s->h[6];
    h = s->h[7];
#define ROUND(a,b,c,d,e,f,g,h,i) \
        t1 = h + S1(e) + Ch(e,f,g) + K[i] + W[i]; \
        t2 = S0(a) + Maj(a,b,c); \
        d += t1; \
        h = t1 + t2;
    for (i = 0; i < 64; ) {
        ROUND(a, b, c, d, e, f, g, h, i); i++;
        ROUND(h, a, b, c, d, e, f, g, i); i++;
        ROUND(g, h, a, b, c, d, e, f, i); i++;
        ROUND(f, g, h, a, b, c, d, e, i); i++;
        ROUND(e, f, g, h, a, b, c, d, i); i++;
        ROUND(d, e, f, g, h, a, b, c, i); i++;
        ROUND(c, d, e, f, g, h, a, b, i); i++;
        ROUND(b, c, d, e, f, g, h, a, i); i++;
    }
#undef ROUND
    s->h[0] += a;
    s->h[1] += b;
    s->h[2] += c;
    s->h[3] += d;
    s->h[4] += e;
    s->h[5] += f;
    s->h[6] += g;
    s->h[7] += h;
}

static void pad(struct sha256 *s) {
    unsigned r = s->len % 64;

    s->buf[r++] = 0x80;
    if (r > 56) {
        memset(s->buf + r, 0, 64 - r);
        r = 0;
        processblock(s, s->buf);
    }
    memset(s->buf + r, 0, 56 - r);
    s->len *= 8;
    s->buf[56] = s->len >> 56;
    s->buf[57] = s->len >> 48;
    s->buf[58] = s->len >> 40;
    s->buf[59] = s->len >> 32;
    s->buf[60] = s->len >> 24;
    s->buf[61] = s->len >> 16;
    s->buf[62] = s->len >> 8;
    s->buf[63] = s->len;
    processblock(s, s->buf);
}

void sha256_init(struct sha256 *s) {
    s->len = 0;
    s->h[0] = 0x6a09e667;
    s->h[1] = 0xbb67ae85;
    s->h[2] = 0x3c6ef372;
    s->h[3] = 0xa54ff53a;
    s->h[4] = 0x510e527f;
    s->h[5] = 0x9b05688c;
    s->h[6] = 0x1f83d9ab;
    s->h[7] = 0x5be0cd19;
}

void sha256_sum(struct sha256 *s, uint8_t md[20]) {
    int i;

    pad(s);
    for (i = 0; i < 8; i++) {
        md[4 * i + 0] = s->h[i] >> 24;
        md[4 * i + 1] = s->h[i] >> 16;
        md[4 * i + 2] = s->h[i] >> 8;
        md[4 * i + 3] = s->h[i];
    }
}

void sha256_update(struct sha256 *s, const void *m, unsigned long len) {
    const uint8_t *p = m;
    unsigned r = s->len % 64;

    s->len += len;
    if (r) {
        if (len < 64 - r) {
            memcpy(s->buf + r, p, len);
            return;
        }
        memcpy(s->buf + r, p, 64 - r);
        len -= 64 - r;
        p += 64 - r;
        processblock(s, s->buf);
    }
    for (; len >= 64; len -= 64, p += 64)
        processblock(s, p);
    memcpy(s->buf, p, len);
}

You would change your function to this:
const char *EncryptSHA256(char *Arg1) {  
    struct sha256 s;
    unsigned char md[32];
    static char result[65];

    sha256_init(&s);
    sha256_update(&s, Arg1, strlen(Arg1));
    sha256_sum(&s, md);
    for (int i = 0; i < 32; i++) {
        sprintf(result + i * 2, ""%02x"", md[i]);
    }
    return result;
}

You could also change the API to pass an array of 32 unsigned characters to get the binary form if it is more convenient.
","78","<c><hash><sha256>","0","0","1","2019-03-06 22:30:51","55033209","3","","4593267","","2019-03-06 22:30:51","2019-03-06 16:55:00",""
"39701172","Password Migration from Django to Mysql","Hello I have my existing web application in Django. Now I am migrating to node js and I am using the bcrypt algorithm for hashing the password. So, the problem is: In Django , it uses pbkdf2_sha256 algorithm for storing password. How do I migrate password from Django so that my matching algorithm match the peviously stored password correctly?
","Use the node.js crypto.pbkdf2 function, see crypto.pbkdf2. PBKDF2 is the suggested passsword hashing method in the NIST SP 800-63-3 Draft document.
","77","<node.js><bcrypt><sha256><pbkdf2>","0","0","1","2016-09-26 11:47:19","","0","","","","","2016-09-26 11:05:51",""
"48971826","PDFGeneratorAPI - generating the signature","PDFGeneratorAPI seems like a quite powerful tool for generating and designing online PDF-documents. But i spent some time to generate the correct signature key in c# and translate the PHP-example they have on the website:
   $key = 'abcdefghijk';
   $secret = 'abcdefghijkabcdefghijk';
   $workspace = 'OB1234';
   $resource = 'templates;


  $data = [
    'key' => $key,
    'resource' => $resource,
    'workspace' => $workspace
  ];
  ksort($data);

  $signature = hash_hmac('sha256', implode('', $data), $secret);

The first problem is, that the PHP ksort does sort the array not in the same way as c#. I don't know exactly why, but i got a string array where ""t"" was sorted before ""O"". Is it sorting based on ASCII codes?
And i struggled a bit to find the right translation in c#
Regards,
Florian
","This works:
    public string CreateSignature(string secret= ""abcdefghijkabcdefghijk"", string APIKey= ""abcdefghijk"", string resource = ""templates"")
    {

        List<string> _apiStringArray = new List<string>() {APIKey, resource, ""'OB1234"" };

        // _apiStringArray.Sort();

        string _apistring = String.Join("""", _apiStringArray.ToArray());
        string _signature;

        var encoding = new System.Text.ASCIIEncoding();
        byte[] keyByte = encoding.GetBytes(secret);
        byte[] messageBytes = encoding.GetBytes(_apistring);
        using (var hmacsha256 = new HMACSHA256(keyByte))
        {
            byte[] hashmessage = hmacsha256.ComputeHash(messageBytes);
            _signature =  BitConverter.ToString(hashmessage).Replace(""-"", """").ToLower();


        }

   return _signature;

    }

But still wondering about the sorting
Florian
","77","<sha256>","0","0","1","2018-02-25 08:55:02","","0","","","","","2018-02-25 08:52:00",""
"49863030","ruby encode ""\x\x"" format to utf8 string or store in rails postgres db in current form","I created at sha256 in a solidity contract and it returns
""Y\xED\x90b\x82\xCDz\xCC\xD4\xA2\xD7\x9E\a\xBB\x13-'\xCC\xA2\x1F\x04Kv%!\xB6\xE8\xF8\xE9\xCB \x8B""
Then when trying to save in postgres in a string data type field, I get 
ActiveRecord::StatementInvalid (PG::CharacterNotInRepertoire: ERROR:  invalid byte sequence for encoding ""UTF8"": 0xed 0x90 0x62
What is the best way to either store as is in rails and postgres or convert it to a UTF8 string?
","It looks like this data should be stored in binary format.
","75","<ruby-on-rails><postgresql><utf-8><sha256><solidity>","1","2","1","2018-04-16 19:45:34","49865108","4","","1890135","","2018-04-16 18:11:29","2018-04-16 17:24:26",""
"30920500","How to find out used hash Algorithm","I'm remaking .net 1.1 web into php. I have a huge database with users and their passwords, that are stored as hash.
In C# code I found this row 
user.HashPassword = Globals.ComputeHash(user.Password, Globals.HashAlgoritm, null);

I looked in globals and there are 
<add key=""hashAlgoritm"" value=""SHA256""/>

But If I try to hash password in PHP with SHA256, results are different.
Example:
1) Password: emilekstrasa
2) C# password stored in DB: +3KhJwJelkTKk3J22dS03Aby7qKPV0WJYcd1tGhs71rTXjdVFQ==
3) Computed hash in PHP: 83672fe909062f7a28b2bdd8772bb88a42479fb0413e1ad50c83194a69316220

Isn't it posssible that 3) is only hexadec form of 2) ?
Thanks for advices.
","","75","<hash><sha256>","1","","0","2015-06-18 16:35:59","","6","","","","","2015-06-18 16:07:31",""
"35664325","Best way to create a file that acts as a checksum and verifies the sender?","I'm looking to send a file to multiple people, but I also want them to know that:

The file has not been changed since I sent it to them.
They know that it was me who sent the file.

I'm coding in Python, so I was thinking of pulling in the file, taking a hash of it, and then encrypting the hash with my private key. I would send the original file along with this new file (probably just a .txt) to whoever I want. My friends could then decrypt the hash using my public key and compare it to a hash they take of the original file. I'd like to use something at least on the level of SHA-256. I do not want to use MD5 or SHA-1.
Note- The original file I am sending does not have to be encrypted, just looking for some integrity and non-repudiation.
Would this fulfill the two requirements above? And is there an easy way to implement this in Python?
","
I was thinking of pulling in the file, taking a hash of it, and then encrypting the hash with my private key

That's exactly what we commonly call signing or digital-signature, which fulfills your two requirements.

Would this fulfill the two requirements above?

Yes. Signing a message doesn't prevent it from being manipulated. It's only getting infeasible of generating a signature for a manipulated message without the private key.

And is there an easy way to implement this in Python?

Sure, pyCrypto supports RSA and DSA. You should try ed25519, though, because its signatures are smaller.
","75","<python><encryption><hash><sha256><pki>","2","1","1","2016-02-27 08:36:44","","3","1","","","","2016-02-27 00:50:41",""
"39368227","Optimize SHA256 checking in php","I have SHA256 hash text, and i know original text is a string and consist of 0-9 numbers and letters a-z, A-Z  that is in range (000000-ZZZZZZ).
This code checks all possible options, and returns the original text
This code working long time (for example if string length is 5 then it works 30 minutes, for case if length 6 it works 30*62 minutes ) and i think this is not best solution for this case.
Please help optimize it.
    $count=0;
    $start_date =microtime(true); 

$s=array(0,1,2,3,4,5,6,7,8,9,""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"",""m"",""n"",""o"",""p"",""q"",""r"",""s"",""t"",""u"",""v"",""w"",""x"",""y"",""z"",""A"",""B"",""C"",""D"",""E"",""F"",""G"",""H"",""I"",""J"",""K"",""L"",""M"",""N"",""O"",""P"",""Q"",""R"",""S"",""T"",""U"",""V"",""W"",""X"",""Y"",""Z"");
for($g=0;$g<62;$g++)
{
    for($h=0;$h<62;$h++)
    {
        for($i=0;$i<62;$i++)
        {
            for($j=0;$j<62;$j++)
            {
                for($k=0;$k<62;$k++)
                {
                    for($l=0;$l<62;$l++)
                    {
                        $count++;
                        if (hash(""sha256"",$s[$g].$s[$h].$s[$i].$s[$j].$s[$k].$s[$l])=='0a482c589594109cea209233a1f3bfa51f8a52e4534c40e9511c6030ee0f594a')// string is ZZZZZZ
                        {
                            echo $s[$g].$s[$h].$s[$i].$s[$j].$s[$k].$s[$l].""<br/>"";
                            echo $count.""<br/>"";
                            $end_date =microtime(true);
                            echo ($end_date-$start_date)/60;
                            break(6);
                        }
                    }
                }
            }
        }   
    }   
}

","You can't optimize it to break 0-9a-zA-Z fastest. Of course You can optimize this code a little (also change PHP for Python or something faster), but only gave You boost from 30 minutes to 10 minutes for 5 chars. 6 chars needs much about 6 hours. And 7 chars measured in days. 8 chars in years etc. It's impossible to do it faster.
You should know that an sha256 is a method of encryption, that in assumption do not allow to decrypt, that's the purpose of this method. Unfortunately (fortunately for You), in the case of short strings it's possible to decrypt in short time.
","74","<php><optimization><cycle><sha256><sha>","-1","0","1","2016-09-08 06:47:34","","5","","2873907","","2016-09-07 11:26:32","2016-09-07 11:06:24",""
"46344609","How to cast a segment of an array into an array in Go?","I'm using the hash function sha256.Sum256(data []byte) [sha256.Size]byte. 
I need that the returned digest is stored at the end of another bigger array.
var x [sha256.BlockSize+sha256.Size]byte 
? = sha256.Sum256(data)

The only solution I found so far is the following:
var x [sha256.BlockSize+sha256.Size]byte 
var d = sha256.Sum256(data)
copy(x[sha256.BlockSize:], d[:]) 

Is it possible to avoid this copy ? 
","You can avoid the copy if you abandon using the sha256.Sum256() function, and you first create a hash.Hash by calling sha256.New().
Using a hash.Hash you can calculate the digest using the Hash.Sum() method, and what's important here is that you can pass a slice to it indicating that you want the results to be appended to that.
For the target slice, you can pass a slice value pointing to the element in your x array where you want the result, e.g. with 0 length (as result will be appended to this slice, not filled into it):
var x [sha256.BlockSize+sha256.Size]byte
h := sha256.New()
h.Write(data)
h.Sum(x[sha256.BlockSize:sha256.BlockSize])

See this example to demonstrate it:
data := []byte(""hello"")
fmt.Println(sha256.Sum256(data))

var x [sha256.BlockSize + sha256.Size]byte
h := sha256.New()
h.Write(data)
res := h.Sum(x[sha256.BlockSize:sha256.BlockSize])
fmt.Println(res)
fmt.Println(x)

First I print the result using sha256.Sum256() so we have an ""authentic"" result to comapre to. Then I call and print the result of Hash.Sum(). Last we print the x array to verify the result is in it.
Output (try it on the Go Playground):
[44 242 77 186 95 176 163 14 38 232 59 42 197 185 226 158 27 22 30 92 31 167 66 94 115 4 51 98 147 139 152 36]
[44 242 77 186 95 176 163 14 38 232 59 42 197 185 226 158 27 22 30 92 31 167 66 94 115 4 51 98 147 139 152 36]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 44 242 77 186 95 176 163 14 38 232 59 42 197 185 226 158 27 22 30 92 31 167 66 94 115 4 51 98 147 139 152 36]
Update:
You wrote that you knew about this but intentionally avoided this to avoid allocating a hash.Hash. Know that sha256.Sum256() uses the same implementation that is returned by sha256.New() under the hood, so this solution is most likely not slower (did not benchmark). Also you can reuse the hasher! So in fact this can be made faster. To reuse, call the Hash.Reset() method.
Update #2:
You indicated you have to do this in every web request. In this case probably using sha256.Sum256() is the best choice. If you do need to boost performance, you could opt to ""clone"" the sha256 package, and in your cloned version you could modify the Sum256() function to receive a slice where the results could be stored directly (my linked other answer shows the first step toward this), but seriously, copying 32 bytes (size of SHA-256 digest) is so fast, not worth the hassle, and performance gain would not be huge.
See related question: How to efficiently hash (SHA 256) in golang data where only the last few bytes changes
","74","<arrays><go><slice><sha256>","3","5","1","2017-09-21 15:19:24","","0","","1705598","","2017-09-21 13:39:07","2017-09-21 12:59:28",""
"39184256","sha256 result dosen't change","First time using sha256.
With this code, the result always equals to 4aa6892909e369933b9f1babc10519121e2dfd1042551f6b9bdd4eae51f1f0c2
what is wrong?
def signning(self,D_path):
    BUF_SIZE = 65536 
    hashed = hashlib.sha256()

    with open(D_path, 'rb') as f:
        while True:
            data = f.read(BUF_SIZE)
            if not data:
                break
            hashed.update(data)

    hashed_D = hashed.hexdigest()
    print hashed_D

","Yeah, there is nothing wrong with your code, here's a little example showing that hashlib.sha256 is deterministic:
import random
import string
import hashlib

random.seed(1)

for i in range(5):
    data = ''.join(random.choice(string.ascii_uppercase + string.digits)
                   for _ in range(10))

    hashed = hashlib.sha256()
    hashed.update(data)
    print data, ""->"", hashed.hexdigest()

Run this script over and over and you'll be getting the same output cos the input is always the same ;)
","74","<python><python-2.7><sha256><sha>","-1","0","1","2016-08-27 21:13:37","39184317","4","","3689166","","2016-08-27 21:13:37","2016-08-27 18:09:29",""
"48076537","sha256 cripted communication between client and server, using javascript, ajax and java","I realized a form in html, the password is sent to a servlet using a post method. In this way, data are not encripted, so I would like convert my password in sha256 before send it to a servlet.
Can I do this using javascript code? 
","","74","<javascript><java><ajax><sha256>","0","","0","2018-01-03 11:32:42","","5","","","","","2018-01-03 11:32:42",""
"56621046","Migrate from SHA256 hashed passwords to BCRYPT in PHP7+MySQL","I have an old web application with a few users registered that is using the unsecure hash(""sha256"", trim($_POST[""password""])) to store the hashed password in MySQL database. Now I want to update the web application to use the more secure BCRYPT password_hash() however I don't want to email all registered users alerting them to change their password. So I was thinking on implementing BCRYPT on the sha256() hashed password this way:
To save the password I will sha256() hash the user's password:
$hashed_password = password_hash(hash(""sha256"", trim($_POST[""password""])), PASSWORD_BCRYPT);

Then I will save the BCRYPT hashed password in the database.
And to verify the user's password I would simply do this:
$hashed_password = ""select hashed_password from users where email = 'abc@email.com'"";

if(password_verify(hash(""sha256"", trim($_POST[""password""])), $hashed_password))
{
    echo ""Welcome"";
}
else
{
    echo ""Wrong Password!"";
}

This way I will just update the user's password in the MYSQL database by looping each registered user, then I will retrieve the sha256() hashed password, and finally I will just re-save it after it has been BCRYPTed with password_hash():
$new_password = password_hash($old_sha256_hashed_password, PASSWORD_BCRYPT);

$mysql->save_user_password($new_password, $user_id);

So users will still be able to login with their old password.
What do you think about this solution?
Is it still safe even if I sha256() hash the password before BCRYPT it?
","Since your current hashing system (unsalted SHA256) is indeed very unsecure, you could give immediate protection to the passwords with double hashing. As soon as possible, when the user logs in the next time, I would switch to the new algorithm and remove double hashing.
Make old hashes more secure:
$doubleHashToStoreInDb = password_hash($oldUnsaltedSha256HashFromDb, PASSWORD_DEFAULT);

Doing this for each row will protect the otherwise unsecurely stored passwords. Note the PASSWORD_DEFAULT parameter, it should be prefered over a specific algorithm, because it is future proof. And mark the double hashes, so you can distinguish between double hashes and already converted hashes, see why.
Handle new user registrations:
$hashToStoreInDb = password_hash($_POST['password'], PASSWORD_DEFAULT);

Just use the new algorithm without double hashing.
Verify logins:
if (checkIfDoubleHash($storedHash))
{
  $correctPassword = password_verify(oldPasswordHash($_POST[""password""]), $storedHash);
  if ($correctPassword)
    storeConvertedHash(password_hash($_POST['password'], PASSWORD_DEFAULT));
}
else
{
  $correctPassword = password_verify($_POST['password'], $storedHash);
}

// Hashes the user password with a deprecated hashing scheme
function oldPasswordHash($password)
{
  return hash(""sha256"", trim($password));
}

Double hashes will be converted to the new password hash function, this is possible because we have the original user password at this moment. New hashes are verified with password_verify() which is a future proof and backwards compatible function.
Adapting the password algorithm to future hardware is not a one-time task, it will be necessary as soon as new hardware will become faster. PHP offers the function password_needs_rehash() to find out whether a rehashing is necessary, then you can also calculate a new hash and store it.
","73","<php><mysql><passwords><bcrypt><sha256>","2","1","1","2019-06-17 08:05:53","56626811","4","","","","","2019-06-16 17:18:54",""
"39183777","Codeigniter query not forming properly","I wrote a query with a sha2 hash function in codeigniter, but the resultant query is not forming properly.
Here's my code in model :
public function validate_user($data = NULL)
{
    $email = $data[""email""];
    $password = $data[""password""];
    $this->db->select('user_id');
    $query = $this->db->get_where('users', array('sha2(username, NULL)' => $data[""username""], 'password' => $password));
    return $query->row_array();
}

And here's the error I'm getting ( due to malformed query ) :
You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''FCD8FE02F495400DC020499AC31FC75ABA05005622FD7A2F01D37153724CB395' AND `password' at line 3

SELECT `user_id` FROM `users` WHERE sha2(username, NULL) 'FCD8FE02F495400DC020499AC31FC75ABA05005622FD7A2F01D37153724CB395' AND `password` = '2668dcd9bac3c8bb60742f139876d1d6'

Why is the = symbol not coming between sha2(username, NULL) and 'FCD8FE02F495400DC020499AC31FC75ABA05005622FD7A2F01D37153724CB395'
The actual query should turn out to be :
SELECT `user_id` FROM `users` WHERE sha2(username, NULL) = 'FCD8FE02F495400DC020499AC31FC75ABA05005622FD7A2F01D37153724CB395' AND `password` = '2668dcd9bac3c8bb60742f139876d1d6'

And not :
SELECT `user_id` FROM `users` WHERE sha2(username, NULL) 'FCD8FE02F495400DC020499AC31FC75ABA05005622FD7A2F01D37153724CB395' AND `password` = '2668dcd9bac3c8bb60742f139876d1d6'

Any ideas what I'm doing wrong ?
","This is actually a simple query and using Codeigniter methods to build the statement is not helping in this case.
Try using a much simpler bound query like this one.
$sql = ""SELECT user_id FROM users WHERE sha2(username, 256) = ? AND `password` = ?"";
$query = $this->db->query($sql, array($data[""username""], $data[""password""]));
return $query->row_array();

Note I put in the second parameter to the mysql sha2() call. I think both params are required and if either is missing or null then sha2() returns null. 
","73","<php><mysql><codeigniter><hash><sha256>","1","1","1","2016-08-28 03:52:08","39187852","4","","","","","2016-08-27 17:17:43",""
"48700356","Are there any alternative services for virusTotal intelliegent search, to search an app by its SHA256?","I am trying to find an alternative to virus-total's intelligence search (that takes SHA1 or SHA256 or md5) and gives the app information.
","I found the answer.
Apart from VirusTotal, there are a few services that give us files from SHA1/SHA256/MD5 hash values.
I have noted them in the following--

Meta Defender
Jotti
Hybrid-Analysis
VirusBay
ReversingLabs

Among these I found ReversingLabs is one of the most efficient, but a costly service.
","72","<android><hash><md5><sha1><sha256>","0","0","1","2018-02-23 09:59:04","48945255","0","","2649012","","2018-02-09 10:02:49","2018-02-09 07:02:45",""
"19438629","Google API PHP Client causing my hash to produce different result","I'm using sha256 on my hash, but when i include google api php client https://code.google.com/p/google-api-php-client/, somehow my hash is changed
so
include 'google-api-php-client.php';
$my_hash = hash('sha256', $my_salted_data);

will produce different result from
$my_hash = hash('sha256', $my_salted_data);

Do you guys know what happened?
","I found what the problem is, After I see Google API PHP Client source code, i found that the script will set default timezone to UTC if not defined in php.ini and my hash algorithm use date function using different timezone, so my hash will produce different result
","72","<php><hash><sha256><google-api-php-client>","0","1","1","2013-10-17 23:29:50","19439047","0","","","","","2013-10-17 22:48:23",""
"58541017","Why do i get sha256.js when using jquery ajax to a php script","I am running a script, where it saves changes to a PHP script in background with jquery-ajax and made a function that throws an error if the script posts something to the site. When it throws an error I use console.log for chrome debugging.
It worked well until now. Now like 1 out of 5 times, I get this in the console.
<script src=""/____proof-of-work/sha256.js""></script>
<script>
    challengeString = ""fc1bc435f0be5062b3420hc4970e8f77d8359904b50356959054180e014c24211a"";
    nonce = 0;
    hash = sha256(challengeString + nonce);
    while(1) {
        hash = sha256(challengeString + nonce);
        if (hash.substr(0, 4) === '0000')
            break;
        nonce += 1;
    }
    window.location.replace(""/____proof-of-work/validate/"" + nonce + ""/"" + window.location.href);
</script>

I can't really figure out where this comes from. I have never seen this code before, and I have tried to google it, but not a real solution on this.
What can it be, and how to get rid of this?
","","72","<javascript><jquery><ajax><google-chrome><sha256>","0","","0","2019-10-24 12:17:01","","7","","3792790","","2019-10-24 12:17:01","2019-10-24 12:04:03",""
"58095139","Is it safe to store sha256 hash of the original unencripted file that is to be stored in encrypted form?","I am working on a document management system and in order to detect changes in files/duplicates of files I am using sha256 to get the digests for comparison. This is being done in python. The system can be configured to encrypt the files before storage.
The question is whether it is still safe to store the digest for the unencrypted file.
This digest is used as an identifier for the stored files and is also used to detect if the file being added to the system already exists. I am okay with the chance of collision of sha256 algorithm for this purpose. I have also read that the digest produced by sha256 cannot be used to recreate the original data.
Assuming the file cannot be reconstructed from the hash and the fact that the file is stored in encrypted form, it should be safe to keep the original hash for comparisons/searching right... or should I rethink my strategy? these comparisons are going to be internal to the application and will not be exposed to the user in anyway.
","Preimage resistence of SHA-256 is 2^256, and collision resistance is 2^128 (brief summary). On the other hand, you can simply check the number of combinations needed to guess the key to decrypt the file. SHA-256 preimage attack complexity is comparable to cracking 256-bit key for symmetric encryption. So, in general, I'd say, this approach is secure enough, because it's easier to restore the original file by guessing the key rather than finding preimage from SHA-256. 
Would be good to know which algorithm and parameters you're going to use for file encryption, maybe in your case the answer would be different.
","71","<python><encryption><public-key-encryption><sha256><hashlib>","3","1","1","2019-09-25 09:56:09","58095767","7","","","","","2019-09-25 09:19:07",""
"53872332","Awk command taking too much time for multiple files to execute while performing SHA2","I am trying to run awk sha2 command on multiple files at same time, but its taking so much time. File contains 5lacs rows and i am converting first column to SHA2. Here is my code 
output=""-SHA2.txt""
FILES=""${filePath}/*""
for f in $FILES
  do
        echo $f
        awk -F '\\[\\^' 'BEGIN {OFS = ""[^""}
        NR==1; NR>1{
        tmp=""echo -n ""$1"" | sha256sum | cut -f1 -d\"" \""""
        tmp | getline cksum
        $1=cksum;
        print $0;
        close(tmp)
        }' $f > $f$output &
  done

This code was taking too much time more than 2 hrs to print 174 files. Each one has 500 000 lines. 
","Instead of invoking awk once per input file:
for f in *; do
    awk '{print}' ""$f"" > ""${f}.${sfx}""
done

Try invoking awk just once total:
awk -v sfx=""$sfx"" 'FNR==1{close(out); out=FILENAME"".""sfx} {print > out}' *

btw this:
    tmp=""echo -n ""$1"" | sha256sum | cut -f1 -d\"" \""""
    tmp | getline cksum
    $1=cksum;
    print $0;
    close(tmp)

should be written as this for robustness:
    cmd = ""printf \047"" $1 ""\047 | sha256sum""
    if ( (cmd | getline cksum) > 0 ) {
        split(cksum,arr)
        $1 = arr[1]
    }
    else {
        print ""Failed to get checksum"" | ""cat>&2""
    }
    close(cmd)
    print

","71","<linux><awk><sha256>","-1","0","2","2019-03-29 12:36:01","","6","","4420967","","2018-12-20 18:05:05","2018-12-20 16:15:52",""
"53872332","Awk command taking too much time for multiple files to execute while performing SHA2","I am trying to run awk sha2 command on multiple files at same time, but its taking so much time. File contains 5lacs rows and i am converting first column to SHA2. Here is my code 
output=""-SHA2.txt""
FILES=""${filePath}/*""
for f in $FILES
  do
        echo $f
        awk -F '\\[\\^' 'BEGIN {OFS = ""[^""}
        NR==1; NR>1{
        tmp=""echo -n ""$1"" | sha256sum | cut -f1 -d\"" \""""
        tmp | getline cksum
        $1=cksum;
        print $0;
        close(tmp)
        }' $f > $f$output &
  done

This code was taking too much time more than 2 hrs to print 174 files. Each one has 500 000 lines. 
","I've experienced problems using close with getline takes a lot of time. If close is removed, then its very quick. But getline misfunctions in that case.
","71","<linux><awk><sha256>","-1","0","2","2019-03-29 12:36:01","","6","","4420967","","2018-12-20 18:05:05","2018-12-20 16:15:52",""
"31389188","How to create a digital certificate by using SHA algorithm? Error: Can't access the key of the subject ('MySPC.pvk')","I thought of to create a certificate by using SHA 256 and certify the the website which i hosted in IIS.First i tried to create certificate by using following command.
makecert -pe -n ""CN=My SPC"" -a sha256 -cy end ^
         -sky signature ^
         -ic MyCA.cer -iv MyCA.pvk ^
         -sv MySPC.pvk MySPC.cer

but i am getting error like 
More?          -sky signature ^
More?          -ic MyCA.cer -iv MyCA.pvk ^
More?          -sv MySPC.pvk MySPC.cer
Error: Can't access the key of the subject ('MySPC.pvk')
Failed

i dont know why i am getting.Next question i am having is if evrything creates succefully where do i find certificate MySPC.cer ? next question is how to assign  this to an website hosted in IIS? can any body suggest me a solution
","","71","<.net><iis><sha256><digital-certificate>","0","","0","2018-04-09 12:52:03","","6","","1033581","","2018-04-09 12:52:03","2015-07-13 16:58:36",""
"52721901","Impact of dropping SHA1 code signing (SHA256 only)","I would like to know what is the impact of dropping SHA1 code signing in favour of SHA256-only code signing as of October 2018. I am currently dual code signing my executables to ensure they will get validated on all versions of Windows starting from Windows 7 / Windows Server 2008 R2. There are many articles online showing code signing requirement matrices, but it's not so clear how many environments in practice won't validate SHA256-only signatures. From what I understood, SHA256 code signing support came in an update in Windows 7, but I don't know if this update is widely installed.
The reason I am asking is because I know it is just a matter of time before SHA256 is supported on all versions of Windows that are not in their end of life, and I am considering using AzureSignTool (https://github.com/vcsjones/AzureSignTool) which doesn't support SHA1 code signing.
","
it's not so clear how many environments in practice won't validate SHA256-only signatures.

Windows 7 / Windows Server 2008 R2 without KB3033929 will be affected.
Windows 8 or later is OK.

From what I understood, SHA256 code signing support came in an update in Windows 7, but I don't know if this update is widely installed.

I don't know too.
KB3033929 is included automatic Windows Update, but sometimes I get a question about this from Windows7 user (who don't install KB3033929).
","70","<code-signing><sha1><sha256><authenticode>","1","1","1","2018-11-15 06:34:59","53313709","0","","","","","2018-10-09 13:10:25",""
"56928169","How to identify my AES encryption is 128 or 256?","Good day,
I have a existing AES encryption java class in my workspace, however, I would like to know its using 128 or 256, I tried to google it but still unable to get it, the following is the code:
static {
AesKeyCipher aesKeyCipher = new AesKeyCipher(
                        ""747065a6cb23cacf3d4ae71edc929c678e8c15a50379b655b74a30eb77106d68"" );
                cipher = aesKeyCipher;
}

public static String encrypt(final String saltText, final String plainText)
            throws UnsupportedEncodingException, GeneralSecurityException {
        final byte[] salt = saltText.getBytes( ""UTF-8"" );
        final byte[] plain = plainText.getBytes( ""UTF-8"" );

        for ( int i = 0; i < salt.length; i++ ) {
            if ( i >= plain.length ) {
                break;
            }
            plain[ i ] = (byte) ( salt[ i ] ^ plain[ i ] );
        }

        byte[] encrypted = cipher.encrypt( plain ); // this will call to the following encrypt method

        final String cipherText = new String(
                DatatypeConverter.printBase64Binary( encrypted ) );
        return cipherText;
    }


// this is the encrypt method call by first method
public byte[] encrypt(final byte[] data) throws GeneralSecurityException {
        try {
            final String currentTransform = ""/ECB/NoPadding"";
            final Cipher cipher = getCipher( currentTransform );
            final SecretKey secretKey = getSecretKey( );
            final AlgorithmParameterSpec params = getAlgorithmParameterSpec( );
            if ( params == null ) {
                cipher.init( Cipher.ENCRYPT_MODE, secretKey );
            } else {
                cipher.init( Cipher.ENCRYPT_MODE, secretKey, params );
            }
            return cipher.doFinal( data );
        } catch ( final GeneralSecurityException e ) {
            e.printStackTrace( );
            throw new EncryptionException( e );
        }
    }

And here is the class of my AesKeyCipher:
public class AesKeyCipher extends AbstractSecretKeyCipher implements
        SecretKeyCipher {

    @Override
    protected Cipher getCipher(String transform)
            throws GeneralSecurityException {
        return Cipher.getInstance( getSecretKey( ).getAlgorithm( ) );
    }

    @Override
    protected SecretKey getSecretKey() throws GeneralSecurityException {
        return new SecretKeySpec( hexStringToByteArray( this.key ), ""AES"" );
    }

    private static byte[] hexStringToByteArray(final String data) {
        int k = 0;
        byte[] results = new byte[data.length( ) / 2];
        for ( int i = 0; i + 1 < data.length( ); i += 2, k++ ) {
            results[ k ] = (byte) ( Character.digit( data.charAt( i ), 16 ) << 4 );
            results[ k ] += (byte) ( Character.digit( data.charAt( i + 1 ), 16 ) );
        }
        return results;
    }

}

Kindly advise on how to identify on it.
","","69","<java><encryption><aes><sha256><128-bit>","0","","0","2019-07-08 04:01:03","","13","","2485458","","2019-07-08 04:01:03","2019-07-08 03:43:47",""
"53361269","OpenSSL HMACSHA256 produces different result comparing to .NET","I am using C# and C++ with OpenSSL to compute HMACSHA256 has with a key and both produce different results. What am I doing wrong?
C# code:
public static string CreateSignature(string signingString, string sharedKey)
{
    var key = Encoding.ASCII.GetBytes(sharedKey);
    var hmac = new HMACSHA256(key);
    var data = Encoding.ASCII.GetBytes(signingString);
    var hash = hmac.ComputeHash(data);

    return Convert.ToBase64String(hash);
}

C++ code:
std::string SignatureProvider::getSignature(std::string stringToSign, std::string key)
{
    const char* pKey = key.c_str();
    const char* pData = stringToSign.c_str();
    unsigned char* result = nullptr;
    unsigned int len = 32;

    result = (unsigned char*)malloc(sizeof(char) * len);

    HMAC_CTX ctx;
    HMAC_CTX_init(&ctx);
    HMAC_Init_ex(&ctx, pKey, strlen(pKey), EVP_sha256(), NULL);

    HMAC_Update(&ctx, (unsigned char*)&pData, strlen(pData));
    HMAC_Final(&ctx, result, &len);
    HMAC_CTX_cleanup(&ctx);

    return base64_encode(result, len);
}

std::string base64_encode(unsigned char const* bytes_to_encode, unsigned int in_len) 
{
    std::string ret;
    int i = 0;
    int j = 0;
    unsigned char char_array_3[3];
    unsigned char char_array_4[4];

    while (in_len--) {
        char_array_3[i++] = *(bytes_to_encode++);
        if (i == 3) {
            char_array_4[0] = (char_array_3[0] & 0xfc) >> 2;
            char_array_4[1] = ((char_array_3[0] & 0x03) << 4) + ((char_array_3[1] & 0xf0) >> 4);
            char_array_4[2] = ((char_array_3[1] & 0x0f) << 2) + ((char_array_3[2] & 0xc0) >> 6);
            char_array_4[3] = char_array_3[2] & 0x3f;

            for (i = 0; (i <4); i++)
                ret += base64_chars[char_array_4[i]];
            i = 0;
        }
    }

    if (i)
    {
        for (j = i; j < 3; j++)
            char_array_3[j] = '\0';

        char_array_4[0] = (char_array_3[0] & 0xfc) >> 2;
        char_array_4[1] = ((char_array_3[0] & 0x03) << 4) + ((char_array_3[1] & 0xf0) >> 4);
        char_array_4[2] = ((char_array_3[1] & 0x0f) << 2) + ((char_array_3[2] & 0xc0) >> 6);

        for (j = 0; (j < i + 1); j++)
            ret += base64_chars[char_array_4[j]];

        while ((i++ < 3))
            ret += '=';
    }
    return ret;
}

I just included base64 conversion for completeness, but it is already different before it. 
","Why don't you use HMAC function itself? I have tried with this code and both C++ and c# code result in same HMAC :
std::string getSignature(std::string stringToSign, std::string key)
{
    const char* pKey = key.c_str();
    const char* pData = stringToSign.c_str();
    unsigned char* result = nullptr;
    unsigned int len = 32;

    result = (unsigned char*)malloc(sizeof(char) * len);
    int nkeyLen = strlen(pKey);
    int dataLen = strlen(pData);

    result = HMAC(EVP_sha256(), pKey, nkeyLen, (unsigned char*)pData, dataLen, NULL, NULL);

    return base64_encode(result, len);
}

","69","<c#><c++><sha256><hmac><rsa-sha256>","2","0","1","2018-11-18 16:30:15","53362580","9","","7444103","","2018-11-18 16:30:15","2018-11-18 13:15:41",""
"55601142","How can I verify the Git-Installer via Hash?","Is there any way to verify the Windows-download?
I couldn't find a hash on the official git site
","First of all, Git and GitHub are very different things. Your question isn't clear about which it refers to. I'm pretty sure you either mean the GitHub Desktop installer or the Git for Windows installer.
The official Git for Windows project does publish SHA-256 hashes for its releases.
GitHub doesn't publish hashes of its installers but it does sign them, which is even better. Right-click the installer, go to Properties, then to Digital Signatures.
","69","<git><hash><md5><sha256><pgp>","0","0","1","2019-04-10 13:24:11","55601369","1","","11336842","","2019-04-10 13:24:11","2019-04-09 20:49:40","2019-04-09 21:13:05"
"56290814","How to encode RSA-OAEP with SHA256 hashing in Ruby or ROR","I am encoding a JSON data in Ruby by using RSA-OAEP with SHA256 hashing algorithm but I am not sure how to achieve in Ruby. I found a gem chilkat
I have tried to encode the JSON data using Chilkat getting nil all times. See below code
[28] pry(main)> pubkey = Chilkat::CkPublicKey.new()
=> #<Chilkat::CkPublicKey:0x00007fe3393c54a0 @__swigtype__=""_p_CkPublicKey"">
[29] pry(main)>

[30] pry(main)> rsa = Chilkat::CkRsa.new()
=> #<Chilkat::CkRsa:0x00007fe339447e00 @__swigtype__=""_p_CkRsa"">

[31] pry(main)> rsa.put_OaepPadding(true)
=> nil

[32] pry(main)> rsa.put_OaepHash(""SHA1"")
=> nil

[33] pry(main)> rsa.ImportPublicKeyObj(pubkey)
=> true

[34] pry(main)> rsa.put_EncodingMode(""base64"")
=> nil
[35] pry(main)>

","Given that you're using a public key to ""encode"", I think what you really meant is to ""encrypt"".  With public key encryption, the public key is used to encrypt, and the private key is used to decrypt.  The opposite is the case for signatures: Use the private key to sign, and the public key to verify.
Here's an example for RSA-OAEP with SHA256
https://www.example-code.com/ruby/rsa_oaep_sha256.asp
","69","<ruby-on-rails><ruby><rsa><sha256><chilkat>","1","0","1","2019-05-24 15:46:52","","0","","","","","2019-05-24 10:28:59",""
"24481867","How do I fix this miscode with my Console RPG SHA-256 game save protection?","So I'm making a console rpg and after the task of making my save/load functions (Works perfectly) I began making a sha-256 checksum so the save file can't be edited. I've pretty much all of the code but when I save the game and the checksum of that save file with my save function, I go back to load it and it always goes to the statement that says the checksums do not match and when I check the chksum.dat the hash is the same every time, I'm truly stumped on this, here is my code:
(There is more code but it's irrelevant, I think)
#include <iostream>
#include <conio.h>
#include <windows.h>
#include <string>
#include <stdlib.h>
#include <stdio.h>
#include <cstdlib>
#include <windows.h>
#include <fstream>
#include ""sha256.h""
using namespace std;


string userinput = ""nul"";
string name = ""nul"";
string currentenchant = ""nul"";
string checksum1 = ""nul"";
string checksum2 = ""nul"";
string checksum3 = ""nul"";
int namelength=0;
int magnumb=0;
int stonenumb=5;
int glowingstone=0;
int redgem=0;
int raind=0;
int trainswordatk=10;
int trainswordspd=10;
int trainswordlevel=0;
int swordmagicdmg=15;
int equippedmagic=0;
int equippedmagicmax=1;
int savelength=0;
bool trainsword=false;
bool firetrainsword=false;
bool icetrainsword=false;
bool poisontrainsword=false;
bool beginchest=false;
bool swordmagic=false;
bool swordmagicequip=false;

 void SaveGame()
{
  ofstream data(""data.dat"");
  data << ""\n"";
  data <<name;
  data << ""\n"";
  data <<userinput;
  data << ""\n"";
  data <<currentenchant;
  data << ""\n"";
  data <<magnumb;
  data << ""\n"";
  data <<stonenumb;
  data << ""\n"";
  data <<glowingstone;
  data << ""\n"";
  data <<redgem;
  data << ""\n"";
  data <<raind;
  data << ""\n"";
  data <<trainswordatk;
  data << ""\n"";
  data <<trainswordspd;
  data << ""\n"";
  data <<trainswordlevel;
  data << ""\n"";
  data <<trainsword;
  data << ""\n"";
  data <<firetrainsword;
  data << ""\n"";
  data <<icetrainsword;
  data << ""\n"";
  data <<poisontrainsword;
  data << ""\n"";
  data <<beginchest;
  data << ""\n"";
  data <<swordmagic;
  data << ""\n"";
  data <<swordmagicdmg;
  data << ""\n"";
  data <<swordmagicequip;
  data << ""\n"";
  data <<equippedmagicmax;
  data << ""\n"";
  data <<equippedmagic;
  data << ""\n"";
  data <<namelength;
  data << ""\n"";
  ofstream data1(""data.dat"");
  ofstream chksum(""chksum.dat"");
  checksum1 = sha256(""data.dat"");
  chksum << checksum1;
}

void LoadGame()
{
int add = 0;
string line;
ifstream chksum(""chksum.dat"");
getline(chksum, line) >> checksum2;
ifstream chcsum(""data.dat"");
checksum3 = sha256(""data.dat"");
if (checksum3==checksum2)
{
  goto goodcheck;
 } else if (checksum3!=checksum2) {
    cout << ""Your current save has been modified     from your previous one.\n\n"";
    cout << ""Current: "" << checksum3 <<    ""\nPrevious: "" << checksum2 << ""\n\n"";
    getch();
    exit(0);
   } else {
cout << ""There has been an error loading your game, please try again.\n\n"";
getch();
return;
}

goodcheck:
ifstream data(""data.dat"");
while(data.is_open()){
    if (add==0) getline(data, line) >> name;
    if (add==1) getline(data, line) >> userinput;
    if (add==2) getline(data, line) >> currentenchant;
    if (add==3) getline(data, line) >> magnumb;
    if (add==4) getline(data, line) >> stonenumb;
    if (add==5) getline(data, line) >> glowingstone;
    if (add==6) getline(data, line) >> redgem;
    if (add==7) getline(data, line) >> raind;
    if (add==8) getline(data, line) >> trainswordatk;
    if (add==9) getline(data, line) >> trainswordspd;
    if (add==10) getline(data, line) >> trainswordlevel;
    if (add==11) getline(data, line) >> trainsword;
    if (add==12) getline(data, line) >> firetrainsword;
    if (add==13) getline(data, line) >> icetrainsword;
    if (add==14) getline(data, line) >> poisontrainsword;
    if (add==15) getline(data, line) >> beginchest;
    if (add==16) getline(data, line) >> swordmagic;
    if (add==17) getline(data, line) >> swordmagicdmg;
    if (add==18) getline(data, line) >> swordmagicequip;
    if (add==19) getline(data, line) >> equippedmagicmax;
    if (add==20) getline(data, line) >> equippedmagic;
    if (add==21) getline(data, line) >> namelength;
    if (add==22) getline(data, line) >> savelength;
    //if (add==23) getline(data, line) >> ; (These are for future use convenience)
    //if (add==24) getline(data, line) >> ;
    //if (add==25) getline(data, line) >> ;
    //if (add==26) getline(data, line) >> ;
    //if (add==27) getline(data, line) >> ;
    //if (add==28) getline(data, line) >> ;
    //if (add==29) getline(data, line) >> ;
    //if (add==30) getline(data, line) >> ;
    //if (add==31) getline(data, line) >> ;
    //if (add==32) getline(data, line) >> ;
    if (add==22) data.close();
    add++;
  }
  cout << ""Game loaded.\n"";
  getch();
 }

","This line
getline(chksum, line) >> checksum2;

reads a line from the file into line and then reads another string into checksum2. This doesn't match how you write to the checksum file.
Step through in a debugger until you get to that line and you will find that line contains the checksum and checksum2 is empty.
Change it to
getline(chksum, checksum2);

Note: You really should make some of your variables into local variables and name them appropriately. It may be easy for you to follow your program now, but in 6 months time you will find it a lot harder, when it isn't fresh in your mind.
","69","<c++><console><sha256>","-2","1","1","2014-06-30 04:00:32","","6","","2535","","2014-06-30 01:37:24","2014-06-30 01:25:29","2014-06-30 05:38:29"
"53499303","Not getting required SHA 256 Base64 value","I'm new to Objective c and I'm doing public key pinning on ios (Objective c) and its not matched with already locally saved Base64 hash value. But its working fine in Android environment. I'm unable to figure out what is wrong.
My code returns hash : /bGwd9wYf8ZpJagve4Y3kxrMfW2+CYCQW6LjY5JmkwU=
Saved Hash : HWP97J5yrux7HtfsHUNFMxdetf3JmXkc55EBmMmJLpM
SecTrustRef serverTrust = challenge.protectionSpace.serverTrust;
SecCertificateRef certificate = SecTrustGetCertificateAtIndex(serverTrust, 0);
SecKeyRef keyRef= SecCertificateCopyPublicKey(certificate);
CFErrorRef error = NULL;
NSData* remoteCertificateData = (NSData*)CFBridgingRelease(SecKeyCopyExternalRepresentation(keyRef, &error));
NSData *keyData=remoteCertificateData;

uint8_t digest[CC_SHA256_DIGEST_LENGTH]={0};
CC_SHA256(keyData.bytes, keyData.length, digest);
NSData *data=[NSData dataWithBytes:digest length:CC_SHA256_DIGEST_LENGTH];
NSString *base64String = [data base64EncodedStringWithOptions:0];

if ([base64String isEqualToString:ExistinHash])
{
    NSURLCredential *credential = [NSURLCredential credentialForTrust:serverTrust];
    [[challenge sender] useCredential:credential forAuthenticationChallenge:challenge];
    completionHandler(NSURLSessionAuthChallengeUseCredential, credential);
}
else
{
    // In secure connection
}

","","68","<ios><objective-c><iphone><base64><sha256>","0","","0","2018-11-27 12:05:11","","0","1","","","","2018-11-27 12:05:11",""
"53361681","SHA256 Swift to Objective C equivalence","Hello everyone I'm working for the first time with SHA256 and I'm trying to follow a tutorial on this my problem is to write the equivalence in Objective C of SHA 256. I'm trying to understand the function that I show you below but I still have problems on how to find the equivalence in Objective C of this Swift function
let rsa2048Asn1Header:[UInt8] = [
        0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86,
        0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00
    ]

 private func sha256(data : Data) -> String {
        var keyWithHeader = Data(bytes: rsa2048Asn1Header)
        keyWithHeader.append(data)
        var hash = [UInt8](repeating: 0,  count: Int(CC_SHA256_DIGEST_LENGTH))
        keyWithHeader.withUnsafeBytes {
            _ = CC_SHA256($0, CC_LONG(keyWithHeader.count), &hash)
        }
        return Data(hash).base64EncodedString()
    }

Can you help me ?
","Working with raw bytes in Objective-C is generally a little more straightforward than Swift.  An implementation like this should be equivalent.
#define RSA_2048_ASN1_HDR_LEN 24

- (NSString *)sha256:(NSData *)data {
    NSMutableData *keyWithHeader = [NSMutableData dataWithBytes:rsa2048Asn1Header length:RSA_2048_ASN1_HDR_LEN];
    [keyWithHeader appendData:data];
    UInt8 hash[CC_SHA256_DIGEST_LENGTH] = { 0 };
    CC_SHA256(keyWithHeader.bytes, (CC_LONG) keyWithHeader.length, hash);
    return [[NSData dataWithBytes:hash length:CC_SHA256_DIGEST_LENGTH] base64EncodedStringWithOptions:0];
}

Note that you'll also need to import the common crypto library into your Objective-C file as well:
#import <CommonCrypto/CommonDigest.h>

","68","<ios><objective-c><swift><nsdata><sha256>","-1","2","1","2018-11-18 14:31:16","53361976","3","","","","","2018-11-18 13:57:57",""
"51861644","Validate Facebook signed_request signature in Javascript","I'm building a Facebook Page app in Classic ASP. I've been unable to match the signature that Facebook passes into the app as the first part of the POSTed signed_request.
Because there are few libraries for cryptography in VBScript, I'm using server side Javascript and the crypto-js library from https://code.google.com/archive/p/crypto-js/
I've tried to translate the PHP code example from Facebook's docs at https://developers.facebook.com/docs/games/gamesonfacebook/login#parsingsr into Javascript. I can generate an HMAC SHA256 hash of the signed_request payload but that doesn't match the signed_request signature.
I think the problem is that Facebook's signature is in a different format. It looks to be binary (~1抚Ö.....) while the HMAC SHA256 hash I'm generating is a hexadecimal string (7f7e8f5f.....). In Facebook's PHP example the hash_hmac function uses the raw binary parameter. So I think I need to either convert Facebook's signature to hexadecimal or my signature to binary in order to do an ""apples-to-apples"" comparison and get a match.
Here's my code:
/* Use the libraries from https://code.google.com/archive/p/crypto-js/
crypto-js/crypto-js.min.js
crypto-js/hmac-sha256.min.js
crypto-js/enc-base64.min.js
*/

var signedRequest = Request.queryString(""signed_request"")

var FB_APP_SECRET = ""459f038....."";

var arSR = signedRequest.split(""."");
var encodedSig = arSR[0];
var encodedPayload = arSR[1];

var payload = base64UrlDecode(encodedPayload);
var sig = base64UrlDecode(encodedSig);

var expectedSig;

expectedSig = CryptoJS.HmacSHA256(encodedPayload, FB_APP_SECRET); // Unaltered payload string; no match
expectedSig = CryptoJS.HmacSHA256(payload, FB_APP_SECRET); // base64-decoded payload string; no match

if (sig == expectedSig) {
    Response.write(payload);
} else {
    Response.write(""Bad signature"");
}

function base64UrlDecode(input) {
    // Replace characters and convert from base64.
    return Base64.decode(input.replace(""-"", ""+"").replace(""_"", ""/""));
}

","After looking into the crypto-js documentation about encoding I found the solution. The de-/encoding methods provided by crypto-js are listed under 'Encoders' at the bottom of https://code.google.com/archive/p/crypto-js/ (Thanks for the nudge, CBroe.)
The solution was to use .toString() on the signatures. It seems like crypto-js uses a word format that was preventing a comparison match. I did also switch to using the base64 decoding provided by crypto-js in order to stick with one library.
Here's my updated code:
/* Use the libraries from https://code.google.com/archive/p/crypto-js/
crypto-js/crypto-js.min.js
crypto-js/hmac-sha256.min.js
crypto-js/enc-base64.min.js
*/

var signedRequest = Request.queryString(""signed_request"")

var FB_APP_SECRET = ""459f038....."";

var arSR = signedRequest.split(""."");
var encodedSig = arSR[0];
var encodedPayload = arSR[1];

var payload = base64UrlDecode(encodedPayload);
var sig = base64UrlDecode(encodedSig);

var expectedSig = CryptoJS.HmacSHA256(encodedPayload, FB_APP_SECRET); /******** Correct payload */

if (sig.toString() != expectedSig.toString()) { /******* Use .toString() to convert to normal strings */
    Response.write(payload);
} else {
    Response.write(""Bad signature"");
}

function base64UrlDecode(input) {
    return CryptoJS.enc.Base64.parse( /******** Decode */
        input.replace(""-"", ""+"").replace(""_"", ""/"") // Replace characters
    );
}

","67","<javascript><facebook><sha256><hmac>","0","0","1","2018-08-17 16:24:41","51899527","1","","1000551","","2018-08-15 15:26:09","2018-08-15 15:20:57",""
"51148670","How to hash integers within a for loop","I want to hash a range of integers. How can I define the argument in sha256 as we know it takes just string and buffer?
c=list()
import hashlib
   for i in range(0,10):
   d=hashlib.sha256(i).hexdigest()
   c.append(d)
   print(c)

","","67","<for-loop><hash><integer><sha256>","1","","0","2018-07-03 08:00:36","","4","","1356096","","2018-07-03 08:00:36","2018-07-03 07:17:56",""
"49374318","libGDX: How to generate SHA256?","How do I generate SHA256 from a String in libGDX?
It has to work on all platforms (Desktop, Android, iOS, Web), so I can't use Apache Commons Codec or any other third party library...
Any ideas?
","Nevermind, I solved this by generating & handling hash values directly in my REST API and not in my libGDX application.
","66","<hash><libgdx><cross-platform><sha256>","0","0","1","2018-03-20 16:02:34","49388921","1","","","","","2018-03-19 23:59:41",""
"24150876","Identify whether a package contains GPL license","I have few thousands packages which contains GPL/APL/BSD license. Currently to identify whether a package contains a GPL license, I am iterating over each package looking for LICENCE file and then checking its contents and matching that with the sample GPL template. I am following heuristic that if matching is greater than 90% then it is GPL license. 
         if match > 0.9: licence = True 
But I don't think this is a correct way to do and also very slow.
So I was thinking, it is possible If I know the values of sha1sum, sha256sum values of all the files present in a package, can this help to identify whether package contains GPL license of not?
For example in my package sha1sum value for LICENCE is:
b7077bddb5a97beca2da00c07cc56b602e2ac6cc  LICENCE
So If content of LICENCE will same then the sha1sum value corresponding to it will be same? if thats true then I can identify LICENCE file with sha1sum value. Also Is there a another way to identify LICENCE file in a package?
","There are several versions of the GPL, so you would need to check for several of them. Also, some projects do not include the license/copyright file directly but instead say something to the affect of ""This project is licensed under GPL v2"". So you would find some, maybe even most, but not all of the projects using the GPL (or any other license).
","66","<package><sha1><sha256>","-5","1","2","2015-06-05 04:28:16","24150922","5","","64046","","2015-06-05 04:28:16","2014-06-10 21:09:15",""
"24150876","Identify whether a package contains GPL license","I have few thousands packages which contains GPL/APL/BSD license. Currently to identify whether a package contains a GPL license, I am iterating over each package looking for LICENCE file and then checking its contents and matching that with the sample GPL template. I am following heuristic that if matching is greater than 90% then it is GPL license. 
         if match > 0.9: licence = True 
But I don't think this is a correct way to do and also very slow.
So I was thinking, it is possible If I know the values of sha1sum, sha256sum values of all the files present in a package, can this help to identify whether package contains GPL license of not?
For example in my package sha1sum value for LICENCE is:
b7077bddb5a97beca2da00c07cc56b602e2ac6cc  LICENCE
So If content of LICENCE will same then the sha1sum value corresponding to it will be same? if thats true then I can identify LICENCE file with sha1sum value. Also Is there a another way to identify LICENCE file in a package?
","There is no relation at all. SHA-1 is a hash algorithm, which could be used for checking integrity of files or check whether file was tampered with. It doesn't describe information in any way (though, it's possible to use hashes to identify files, so if you know hash of GPL-licensed file, you can calculate hashsum of your file and compare it to see whether it matches).
","66","<package><sha1><sha256>","-5","0","2","2015-06-05 04:28:16","24150922","5","","64046","","2015-06-05 04:28:16","2014-06-10 21:09:15",""
"35245012","Possible to send password in plain text with SHA-256?","I just registered on a site where I had to specify sensitive information, eg. my card number. I got a confirmation mail where my password was in plain text. I learned that password should NEVER be in plain text. If they can, that means that my sensitive information are stored in plain text too.
I contacted their support and they claim that they are using the encryption method SHA-256 for the passwords. Is it safe? Is it still possible to send plain text password even after encryption?
","
Is it still possible to send plain text password even after encryption?

[Rather than ‘encryption’, which could be reversible, you mean ‘hashing’, assuming the use of the term “SHA-256” was correct. SHA-256 is a one-way hash, the whole point of which is it's not directly recoverable.]
No, but they could conceivably have sent the mail directly after you entered the password, rather than storing it and retrieving it.
In any case a plain SHA-256 salted hash, is considered an unconscionably weak way to store a password today; you would hope for a deliberately slow password-hashing algorithm such as bcrypt.

Is it safe?

No! They sent you your password over the public unprotected e-mail infrastructure! That is, if anything, a worse sin than storing plaintext passwords in the database...
","65","<security><sha256>","0","1","1","2016-02-07 17:28:50","","4","","","","","2016-02-06 18:49:16",""
"54701686","Matching CryptoJS.SHA256() with hashlib.sha256() for a JSON","As a part of IEFT standard, I need to hash the body of a JSON request.
I have a reference code in JS that is known to produce the right hash, but now I'm stuck with matching the result in Python.
The JSON body:
body = {""description"":""Test ticket""}

The JS code:
bodyHash = CryptoJS.SHA256(body).toString(CryptoJS.enc.Base64)

Please note it's not JSON.stringify(body)! The ""correct"" hash (the one I'm looking to match):
TqXFCKZWbnYkBUP4/rBv1Fd3e+OVScQBZDav2mXSMw4=

The Python solution should be along the lines of:
body_hash = base64.b64encode(hashlib.sha256(repr(body).encode('utf-8')).digest()).decode('ascii')

Which produces something different:
z0RpYmKAIfVibpSLJx/iRDZaNHJkJ2+rcenc1KEEAUw=

Is there even a way to match those hashes? How the JS object is hashed in CryptoJS?
","","65","<javascript><python><json><sha256><cryptojs>","2","","0","2019-02-15 01:54:31","","3","","","","","2019-02-15 01:54:31",""
"56103221","Decrypt a encrypted secret using PyCrypto AES & sha256","I have a encrypted message in a file, encrypted by the following code.
I wrote a function to decrypt this message. I know the password used to encrypt it.
But I got the following error:
python3 decrypt.py enim_msg.txt 
Traceback (most recent call last):
  File ""decrypt.py"", line 45, in <module>
    print("":: Decrypted: \n"" + bytes.decode(decrypted))
UnicodeDecodeError: 'utf-8' codec can't decode byte 0x88 in position 2: invalid start byte

How can I fix this problem pls ?
Is My decrypt function wrong ?
My code :
Encrypt function
import os
from Crypto import Random
from Crypto.Cipher import AES
from Crypto.Hash import SHA256

def encrypt(key, filename):
    chunksize = 64*1024
    outputFile = ""en"" + filename
    filesize = str(os.path.getsize(filename)).zfill(16)
    IV = Random.new().read(16)

    encryptor = AES.new(key, AES.MODE_CBC, IV)

    with open(filename, 'rb') as infile:
        with open(outputFile, 'wb') as outfile:
            outfile.write(filesize.encode('utf-8'))
            outfile.write(IV)

            while True:
                chunk = infile.read(chunksize)

                if len(chunk) == 0:
                    break
                elif len(chunk) % 16 != 0:
                    chunk += b' ' * (16 - (len(chunk) % 16))

                outfile.write(encryptor.encrypt(chunk))

def getKey(password):
    hasher = SHA256.new(password.encode('utf-8'))
    return hasher.digest()

Decrypt function I wrote
def decrypt(enc, password):
    #print("":: enc => "" + enc)
    private_key = hashlib.sha256(password.encode(""utf-8"")).digest()
    iv = enc[:16]
    cipher = AES.new(private_key, AES.MODE_CBC, iv)

    return cipher.decrypt(enc[16:])

How I call this function
password = ""azerty123""
secret_file_path = sys.argv[1]

the_file = open(secret_file_path, ""rb"")
encrypted = the_file.read()
decrypted = decrypt(encrypted, password)
the_file.close()

print("":: Decrypted: \n"" + bytes.decode(decrypted))

","The bytes.decrypt() function by default expects an UTF-8 encoded string. But not every sequence of bytes is a valid UTF-8 sequence. In your case cipher.decrypt() (which may return any sequence of bytes) returned a byte-sequence, which is not a valid UTF-8 sequence. Thus the bytes.decode() function raised an error.
The actual reason why cipher.decrypt() returned a non-UTF-8 string is a bug in your code: 
Your encrypted file format contains non-utf-8 data. Its format is like:

16 bytes len info (unencrypted, UTF-8 encoded)
16 bytes IV (unencrypted, binary i.e. non-UTF-8 encoded)
n bytes payload (encrypted, UTF-8 encoded)

You have to ensure that on decryption you only decode parts of your file, that are UTF-8 encoded. Furthermore you have to ensure that you decrypt only encrypted parts of your file (as mentioned in your comments)
","65","<python><encryption><aes><sha256>","-1","0","1","2019-05-12 21:54:33","","3","","","","","2019-05-12 20:30:43",""
"55211240","C: sha256 hash function outputs in fields of structure array inducing crash when writing structure contents to disk","I am attempting to write a program which will store credential information in an array of structures and then print that information out into a file (this is for learning purposes only, don't worry). To do this, I create an array of structures and then raster through that array to assign the pertinent information to each field. This proceeds without issue. I then attempt to raster through the array again to write each structure's fields to a file whereupon the program crashes after the first write (ie only one structure's worth of content is successfully written to the output file). 
I created the following simplified / stripped down variant of my program which reproduces the error. I believe the problem lies within the set_hash_entry function as the error only manifested after that function was re-introduced into my stripped down code in place of a hard coded test value. 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include ""openssl/sha.h""
#include <time.h>
#include <math.h>

struct password_struct {
    char password[17];
    char hash[65];
    float entropy;
};

struct password_struct* allocate_heap_memory(int num_passwords);
void orchestrate_value_setting(int num_passwords, struct password_struct* user_password_structs);
void orchestrate_file_output(int num_passwords, struct password_struct* user_password_structs);
void write_results_to_disk(char file_name[], struct password_struct* user_password_structs);
void set_hash_entry(struct password_struct* user_password_structs);

int main(void) {

    int num_passwords = 2;

    struct password_struct* user_password_structs = allocate_heap_memory(num_passwords);

    struct password_struct* allocated_memory_start_ptr = user_password_structs;

    orchestrate_value_setting(num_passwords, user_password_structs);

    user_password_structs = allocated_memory_start_ptr; // Resetting pointer to allow cycling back through all structures for appending data to output file
    orchestrate_file_output(num_passwords, user_password_structs);

    free(allocated_memory_start_ptr);
}


struct password_struct* allocate_heap_memory(int num_passwords) {

    struct password_struct* user_password_structs = malloc(num_passwords * sizeof(struct password_struct));

    if (!user_password_structs) {
        printf(""Malloc failed, exiting\n"");
        exit(0);
    }

    return user_password_structs;

}

void set_hash_entry(struct password_struct* user_password_structs){

    int pass_entry_length = strlen(user_password_structs->password);
    SHA256_CTX context;
    unsigned char generated_hash[65]; //sha256 standard digest length + 1;    
    SHA256_Init(&context);
    SHA256_Update(&context, (unsigned char *)user_password_structs->password, pass_entry_length);
    SHA256_Final(generated_hash, &context);

    char* hash_ptr = &user_password_structs->hash[0];

    int i;
    for (i=0; i < (64); i++) {
        snprintf(&hash_ptr[i*2], (64), ""%02x"", generated_hash[i]); // Need to convert from hex to char representation
    }
    user_password_structs->hash[64] = '\0';
    printf(""%s\n"", user_password_structs->hash);

}

void orchestrate_value_setting(int num_passwords, struct password_struct* user_password_structs) {

        char pw1[10] = ""test"";
        char pw2[10] = ""test2"";
        float entropy1 = 5.0;
        float entropy2 = 10.0;
        strcpy(user_password_structs->password, pw1);
        set_hash_entry(user_password_structs);
        user_password_structs->entropy = entropy1;
        user_password_structs++;

        strcpy(user_password_structs->password, pw2);
        set_hash_entry(user_password_structs);
        user_password_structs->entropy = entropy2;
        user_password_structs++;


}

void orchestrate_file_output(int num_passwords, struct password_struct* user_password_structs) {

    printf(""Writing data to disk...\n"");

    char file_name[20] = ""name"";
    int i;
    for (i = 0; i < num_passwords; i++) {
        write_results_to_disk(file_name, user_password_structs);
        user_password_structs++;
    }
}

void write_results_to_disk(char file_name[], struct password_struct* user_password_structs) {

    FILE *file_pointer = fopen(file_name, ""a"");
    if (file_pointer == NULL) {
        printf(""Error: Failed to open file\n"");
        exit(1);
    }

    fprintf(file_pointer, ""%s:%s:%f\n"", user_password_structs->password, user_password_structs->hash, user_password_structs->entropy);
    fclose(file_pointer);


}

After running this program, the following output is produced:
9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08
60303ae22b998861bce3b28f33eec1be758a213c86c93c076dbe9f558c11c752
Writing data to disk...
*** Error in `./diagnostic': free(): invalid next size (normal): 0x0804b0c0 ***
Aborted (core dumped)

I naively assumed this was an overflow issue related to my 
snprintf(&hash_ptr[i*2], (64), ""%02x"", generated_hash[i]);

operation, but increasing the size of the hash buffer in the struct does not seem to help. Any help would be greatly appreciated!
I compiled as follows: gcc -o diagnostic -g diagnostic.c -lcrypto -lm
","char hash[65];

Okay, hash has room for 65 characters.
char* hash_ptr = &user_password_structs->hash[0];

So, hash_ptr points to hash, so it points to room for 65 characters.
for (i=0; i < (64); i++) {
    snprintf(&hash_ptr[i*2], (64), ""%02x"", generated_hash[i]); // Need to convert from hex to char representation
}

When i is 60, i*2 is 120. So you're trying to write to the 120th position of a buffer with room for 65 characters.
Change that (64) to 32 in the loop or change hash[65] to a bigger buffer.
Using valgrind found this immediately. You should learn to use some too that detects buffer overflows, use after free, double frees, and similar problems.
","64","<c><pointers><struct><openssl><sha256>","0","1","1","2019-03-17 20:11:44","55211428","2","","3734522","","2019-03-17 20:04:12","2019-03-17 19:50:38",""
"56729748","how to calculate SHA-256 of a bitmap image in android studio?","How to calculate SHA-256 of a bitmap image in android studio?
I have already tried converting image into byte array and then find its message digest but it gives a completely different answer than what I find using online SHA-256 converters. I know how to calculate SHA-256 for a string but I am unable to calculate SHA-256 for a bitmap image.
","","64","<java><android><sha256><message-digest>","0","","0","2019-06-24 08:29:59","","2","","6164611","","2019-06-24 08:29:59","2019-06-24 04:11:38",""
"46525251","Understanding Difference of Scala/Java App versus CLI for base64(sha256(""foobar""))","Why does the following Scala program not output the same result as the following command-line result for base64-encoding the result of applying a SHA256, i.e. base64Encode( sha256( ""foobar"" ) )
CLI
$echo -n ""foobar"" | openssl dgst -sha256 | base64
YzNhYjhmZjEzNzIwZThhZDkwNDdkZDM5NDY2YjNjODk3NGU1OTJjMmZhMzgzZDRhMzk2MDcxNGNhZWYwYzRmMgo=

Scala REPL
import java.security.MessageDigest
import java.util.Base64

val md = MessageDigest.getInstance(""sha-256"")
val inputBytes: Array[Byte] = ""foobar"".getBytes(""UTF-8"")
md.update(inputBytes)
val sha256d: Array[Byte] = md.digest()
val base64d: Array[Byte] = Base64.getEncoder().encode(sha256d)
new String(base64d, ""UTF-8"")

// outputs the following

res5: String = w6uP8Tcg6K2QR905Rms8iXTlksL6OD1KOWBxTK7wxPI=

Why do they output different values?
","echo -n ""foobar"" | openssl dgst -binary -sha256 | base64
I think -binary flag gives you in essence the same as Array[Byte] result type in Scala. So it is safer to feed to Base64 encoder array of bytes than something we are not sure what :)
","64","<scala><base64><sha256>","1","2","1","2017-10-03 23:11:51","46526181","4","3","608639","","2017-10-03 23:11:51","2017-10-02 12:14:26",""
"30638076","Having a C# encryption decryption methods , wanted there copy in JAVA","private static string Encrypt(string plainText)
{
    byte[] keyBytes = Encoding.UTF8.GetBytes(_secretKey);
    byte[] hashedKeyBytes = new SHA256CryptoServiceProvider().ComputeHash(keyBytes);
    var secretKeyHashString = string.Concat(hashedKeyBytes.Select(hb => hb.ToString(""x2"")));
    byte[] cryptoKeyHash = new SHA256CryptoServiceProvider().ComputeHash(Encoding.UTF8.GetBytes(secretKeyHashString));
    byte[] cryptoKey = cryptoKeyHash.Take(16).ToArray();

    var aes = new AesCryptoServiceProvider()
    {
        Padding = PaddingMode.PKCS7,
        Key = cryptoKey,
        Mode = CipherMode.CBC,
        IV = _initialisationVector
    };

    RijndaelManaged aesEnc = new RijndaelManaged();
    byte[] plainTextBytes = Encoding.UTF8.GetBytes(plainText);

    var encryptor = aes.CreateEncryptor();
    byte[] encryptedBytes = encryptor.TransformFinalBlock(plainTextBytes, 0, plainTextBytes.Length);
    var encryptedString = Convert.ToBase64String(encryptedBytes);

    return encryptedString;
}

private static string Decrypt(string encryptedText)
{
    byte[] keyBytes = Encoding.UTF8.GetBytes(_secretKey);
    byte[] hashedKeyBytes = new SHA256CryptoServiceProvider().ComputeHash(keyBytes);
    var secretKeyHashString = string.Concat(hashedKeyBytes.Select(hb => hb.ToString(""x2"")));
    byte[] cryptoKeyHash = new SHA256CryptoServiceProvider().ComputeHash(Encoding.UTF8.GetBytes(secretKeyHashString));
    byte[] cryptoKey = cryptoKeyHash.Take(16).ToArray();

    byte[] initialisationVector = { 0, 133, 36, 86, 84, 150, 188, 164, 28, 210, 112, 158, 141, 87, 11, 227 };
    var aes = new AesCryptoServiceProvider()
    {
        Padding = PaddingMode.PKCS7,
        Key = cryptoKey,
        Mode = CipherMode.CBC,
        IV = _initialisationVector
    };
    var decryptor = aes.CreateDecryptor();

    var encryptedBytes = Convert.FromBase64String(encryptedText);
    var decryptedBytes = decryptor.TransformFinalBlock(encryptedBytes, 0, encryptedBytes.Length);
    var decryptedString = Encoding.UTF8.GetString(decryptedBytes);

    return decryptedString;
}

","Java provides its own encryption/decryption interface 
http://www.codejava.net/coding/file-encryption-and-decryption-simple-example
","64","<java><encryption><aes><sha256>","-2","0","1","2015-06-04 08:31:23","","0","","2603965","","2015-06-04 08:16:51","2015-06-04 07:55:22",""
"36647526","OTRS: using SHA-256 algorithm for IMAPS sessions","We are using OTRS, which receive mail through external mail provider via IMAPS.
Mail provider is going to stop supporting mail clients which use unsafe SHA-1 signing algorithm. To continue using this mail provider we must be sure that our OTRS uses exactly SHA-256 algorithm to sign certificates during IMAPS session.
How could I check, what signing algorithm is used for IMAPS? Where can i find configs for this?
OTRS: 4.0.13
OS: CentOS 7.1
","","64","<email><ssl><imap><sha256><otrs>","1","","0","2016-04-15 12:54:55","","1","","5621443","","2016-04-15 12:54:55","2016-04-15 12:44:47",""
"58236865","Which is the best hashing function for generating unique key for every nodes of a Tree?","I have a tree structure. I would like to generate a unique key for each node of the key such that collision is minimal. 
For eg:
root -
     |
    (a)--
    |    |
    |   (b)--
    |       |
    |      (a)--(v = 50)
    |
     ----(c)--
          |   |
          |   (b)--(v = ""a string"")
          |
          |
           ---(a)--(v = 2.45)

I need to generate a unique key for every node in the tree hierarchy.
            Key strings                hash
-------------------------------------------------
a -                                    ?
a/b                                    ?
a/b/a                                  ?
a/b/a/v=50                             ?
a/c/                                   ?
a/c/b                                  ?
a/c/b/v=""a string""                     ?
a/c/a                                  ?
a/c/a/v==2.45                          ?

I am planning to use md5 or sh4256 for generating hashes from the key strings. The question is is there a better way than this? I mean an algorithm which can make a key out of string which is unique? 
Or are there any better function than md5 or sha256 considering the application runs on an embedded system with limited computation power?
","","64","<c><hash><tree><md5><sha256>","0","","0","2019-10-04 12:57:57","","7","","10950093","","2019-10-04 12:57:57","2019-10-04 12:54:14",""
"58404400","What is the fastest way to SHA-256 encode many short String values in Java (on an Intel CPU)?","There question is slightly related to these two questions, but with these two differences: 1) I want to know how to hook specific Intel instructions from the JVM (hopefully via existing libary) 2) I don't care about one large file, but millions of short (< 50 characters) String and Number objects.
I noticed that Intel provides native extensions (https://software.intel.com/en-us/articles/intel-sha-extensions) for creating SHA256 hashes. Is there any existing library in Java that can hook these native extensions? Is there a JVM implementation that natively hooks these extensions?
Is there a different implementation I should choose for millions of small String and Number values over a single giant file?
As a test, I tried 5 different hashing algorithms: Java built-in, Groovy built-in, Apache Commons, Guava, and Bouncy Castle. Only Apache and Guava seemed to push beyond 1 million hashes/sec on my Intel i5 hardware.
>groovy hash_comp.groovy
Hashing 1000000 iterations of SHA-256
time java: 2968         336927.2237196765 hashes/sec
time groovy: 2451       407996.7360261118 hashes/sec
time apache: 1025       975609.7560975610 hashes/sec
time guava: 901         1109877.9134295228 hashes/sec
time guava: 1969        507872.0162519045 hashes/sec

>groovy hash_comp.groovy
Hashing 1000000 iterations of SHA-256
time java: 2688         372023.8095238095 hashes/sec
time groovy: 1948       513347.0225872690 hashes/sec
time apache: 867        1153402.5374855825 hashes/sec
time guava: 953         1049317.9433368311 hashes/sec
time bouncy: 1890       529100.5291005291 hashes/sec

When I ran 10 times in a row, Apache Commons hashing was the consistent winner when hashing 1 million strings (it won 9/10 times). My test code is available here.
The question remains, is there a way to tap into the Intel SHA hashing extensions from the JVM?
","","63","<java><optimization><hash><intel><sha256>","1","","0","2019-10-27 22:08:43","","11","","311525","","2019-10-27 22:08:43","2019-10-16 01:06:34",""
"29839790","Coldfusion 9 Hash Binary SHA-256","I have a problem with hashing binary data. I need to do get the SHA-256 Hash of a PDF-File located on a server. I do it like this: 
<cfset t01= getTickCount()>
<cfhttp
    name=""inv1""
    method=""get""
    getAsBinary=""yes""
    url=""http://url.to.pdf.com/INVOICEXY.pdf"" 
    result=""inv""
    />

<cfset t02= getTickCount()>

<cfoutput>
    <cfdump var=""#inv.Filecontent#"" />
    CFHTTP: #t02 - t01# ms
</cfoutput>


<cfscript>

imageBinary = inv.Filecontent;
function hashBytes( bytes ){

    // Get our instance of the digest algorithm that we'll use
    // to hash the byte array.
    var messageDigest = createObject( ""java"", ""java.security.MessageDigest"" ).getInstance(""SHA-256"");

    // Get the digest for the given byte array. This returns the
    // digest in byte-array format.
    var digest = messageDigest.digest( bytes );

    // Now that we have our digested byte array (as another byte
    // array), we have to convert that into a HEX string. For
    // this, we'll need a HEX buffer.
    writeDump(digest);
    var hexBuffer = [];

    // Each integer in the byte digest needs to be converted into
    // a HEX character (with possible leading zero).
    for (i = 1 ; i <= arrayLen( bytes ) ; i++){

        // Get only the last 8-bits of the integer.
        var tail = bitAnd( 255, bytes[i] );

        // Get the hex-encoding of the byte.
        var hex = ucase( formatBaseN( tail, 16 ) );

        // In order to make sure that all of the HEX characters
        // are two-digits, we have to prepend a zero for any
        // value that was originall LTE to 16 - the largest value
        // that won't result in two HEX characters.
        arrayAppend(
            hexBuffer,
            (tail <= 16 ? (""0"" & hex) : hex)
        );

    }

    // Return the flattened character buffer.
    return( arrayToList( hexBuffer, """" ) );

}

imageHash = hashBytes( imageBinary );

// Create an instance of our DigestUtils class - this class
// simplifies some of the operations we just saw in the
// MessageDigest class above, turning them into simple,
// one-line calls.

writeOutput( ""Fingerprint:SHA "" & imageHash );


The function hashBytes is from Ben Nadel. The output I get from this function is a huge mess consisting of 53760 characters. I don't know what I'am doing wrong. 
I also tried this: 
<cfscript>

 imageBinary = inv.Filecontent;
 digestUtils = createObject(
        ""java"",
        ""org.apache.commons.codec.digest.DigestUtils""
    );

    // Get the hash of the byte array using our hashBytes() function
    // which dips down into the Java layer directly.
    imageHash = ucase( digestUtils.sha256Hex( imageBinary ) );

    // Output the image ""fingerprint"".
    writeOutput( ""Fingerprint: "" & imageHash );

</cfscript>

Here I get an Error 

The sha256Hex method was not found

although I have the commons-codec-1.8.jar in the wwwroot\WEB-INF\lib folder, which should contain a version of DigestUtils including sha256Hex() 
Thanks a lot!
Edit:
I solved the problem for the long return of chars. It was a horrible mistake. In the original Code of Ben Nadel was this line of code for (var byte in digest){... which does not work in Coldfusion 9. So I changed it to this: for (i = 1 ; i <= arrayLen( bytes ) ; i++){... instead of this: for (i = 1 ; i <= arrayLen( digest ) ; i++){... and var tail = bitAnd( 255, bytes[i] ); to var tail = bitAnd( 255, digest[i] );
","","62","<hash><coldfusion><binary><sha256>","3","","0","2015-04-24 06:45:38","","3","","2061835","","2015-04-24 06:45:38","2015-04-24 05:57:44","2015-04-24 18:21:24"
"53990803","C# Return Value SHA256Managed is NULL","I have a class where it is responsible for generating a hash according to what I send to it. However, the return of the SHA256Managed.Create(text) method is always returning null. 
The following is my code:
using System.Security.Cryptography;
using System.Text;

namespace Autenticacao_no_ASP_.NET_MVC.Utils
{
    public class Hash
    {
        public static string GerarHash(string texto)
        {
            SHA256 sha256 = SHA256Managed.Create(texto);
            byte[] bytes = Encoding.UTF8.GetBytes(texto);
            byte[] hash = sha256.ComputeHash(bytes);
            StringBuilder result = new StringBuilder();

            for (int i = 0; i < hash.Length; i++)
            {
                result.Append(hash[i].ToString(""X""));
            }

            return result.ToString();
        }
    }
}


sha256 which is being returned null.

","Preferred way to create SHA256 (use SHA256 to pick implementation):
SHA256 sha256 = SHA256.Create();

Parameter of Create is name of algorithm - you don't really need to pass one unless you use base class to pick which one to use. To fix you code remove or use correct parameter: 
SHA256 sha256 = SHA256Managed.Create(); 

or 
SHA256 sha256 = SHA256Managed.Create(""SHA256"");

Note that both calls actually are implemented by base SHA256 class and first just pick ""default"" implementation. 
See SHA256.Create for reference. 
","62","<c#><asp.net><asp.net-mvc><sha256>","1","3","1","2018-12-31 19:45:55","","16","1","102937","","2018-12-31 19:31:47","2018-12-31 19:24:56",""
"49178972","Number 1 is randomly appended to the end of my JWT secret after URL encoding","I have searched every nook and cranny for a solution to my problem but I cannot seem to find one. 
I have a class that utilizes methods to create a JSON Web Token. The web token I create needs match the following (notice there is not a number 1 on the far right of my secret): 
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHBrZXkiOiIxMjMtNDU2LTc4OS0wIiwicmVzb3VyY2UiOiJnZXRfZ2VvY29kZSJ9.xGLb92d6yVLqLf5TnrahMCxm-OGTHmXiXLvnRUqLWYM

The token I generate matches the token above, except for the fact that a number 1 is randomly appended on the far right end of my token:
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHBrZXkiOiIxMjMtNDU2LTc4OS0wIiwicmVzb3VyY2UiOiJnZXRfZ2VvY29kZSJ9.xGLb92d6yVLqLf5TnrahMCxm-OGTHmXiXLvnRUqLWYM1

As you can see, that is the section of the JWT that holds the secret. Let me demonstrate how I am generating and encrypting the token so you can help with diagnosing the issue. I will show you the entire class then walk you through the methods. 
Here is the entire class: 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using System.Security.Cryptography;

namespace Project.JWT
{
    public class Token
    {

        public string CreateToken(string resource, string appkey, string secret, string algorithm)
        {
            if (algorithm != ""HS256"")
                return ""Algorithm not supported"";

            JwtPayload payload = new JwtPayload
            {
                appkey = appkey,
                resource = resource
            };

            return EncodeToken(payload, secret);

        }

        public static string EncodeToken(JwtPayload jwtPayload, string secret)
        {
            const string algorithm = ""HS256"";

            var header = new Header
            {
                typ = ""JWT"",
                alg = algorithm
            };

            var jwt = Base64Encode(JsonConvert.SerializeObject(header)) + ""."" + Base64Encode(JsonConvert.SerializeObject(jwtPayload));

            jwt += ""."" + Sign(jwt, secret);

            return jwt;
        }


        public static string Base64Encode(dynamic obj)
        {
            Type strType = obj.GetType();

            var base64EncodedValue = Convert.ToBase64String(strType.Name.ToLower() == ""string"" ? Encoding.UTF8.GetBytes(obj) : obj);
            return base64EncodedValue;
        }


        private static string Sign(string str, string key)
        {


            byte[] signature;

            using (var crypto = new HMACSHA256(Encoding.UTF8.GetBytes(key)))
            {
                signature = crypto.ComputeHash(Encoding.UTF8.GetBytes(str));
            }

            return System.Web.HttpServerUtility.UrlTokenEncode(signature);

        }

    }


    public class Header
    {
        public string alg { get; set; }
        public string typ { get; set; }
    }

    public class JwtPayload
    {
        public string appkey { get; set; }
        public string resource { get; set; }
    }


}

First, The CreateToken method is passed the credentials to create the payload. It then calls the EncodeToken method that takes the payload and secret as a parameter. Keep in mind that my secret is a hard-coded string that never changes throughout the lifetime of the app; So I know that is not randomly generating the number 1. 
Line 39, The header and payload are converted into a base 64 string and joined together by a dot which generates the first two parts of my token perfectly:  
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHBrZXkiOiIxMjMtNDU2LTc4OS0wIiwicmVzb3VyY2UiOiJnZXRfZ2VvY29kZSJ9

Then, I call the Sign method on line 41 which request the signing of my token using the SHA256 algorithm. 
The Sign method accepts the combined header and payload as str then the secret is passed through as key. 
On line 62, I begin the creation of the signature using my custom key, which is ""testsecret"". 
Then I URL encode the signature on line 67, just before returning it. When I return it, line 41 combines the three parts of the token together, thus leaving me with a perfect JWT...... except for the number ""1"" at the far right end of the secret. 
please help. 
","It's to do with the way that HttpServerUtility.UrlTokenEncode works, emphasis mine:

Encodes a byte array into its equivalent string representation using base 64 digits, which is usable for transmission on the URL

You'll know that depending on its length a Base64 string will be padded with = appended to the end.  The = is not considered URL safe and so is replaced with an integer denoting the count, in this case 1.
You can test this by debugging and replace the line below...
return System.Web.HttpServerUtility.UrlTokenEncode(signature);

...with this...
return Convert.ToBase64String(signature);

...and inspecting the return value. 
You'll see that it ends with a = so HttpServerUtility.UrlTokenEncode replaces it with a 1.
","62","<c#><jwt><sha256>","2","1","1","2018-03-09 13:50:50","","0","","","","","2018-03-08 17:22:08",""
"56620198","How do I pad bits to a string in C?","I am implementing the sha256 algorithm in C. I don't need help with the algorithm. One of the tasks while implementing the algorithm is to pad bits to a message such that the message is either 512 bits long or its length is a multiple of 512 bits.
I initially thought that padding bits to a message would simply mean padding zeroes to it. But since the message is a character message(a string), I don't think my logic is correct.
I don't have a problem in the code. I just don't know how to pad bits to the string(msg in the code)
    #include<stdio.h>
    #include<stdlib.h>
    int main(int argc,char *argv[])
    {
       char *msg=(char*)malloc(sizeof(char)*512);
       printf(""\n Enter a message"");
       scanf(""%s"",msg);
       //I don't know how to pad bits to msg
       return 0;
    }

","
I initially thought that padding bits to a message would simply mean padding zeroes to it.

There are algorithms that expect a constant size of the block, ex. AES or sha256. They are called, literally, ""block algorithms"", ex. block ciphers. When dealing with messages shorter then the size of the block you have to fill the unused bits with something. 
Usually, by convention, for simplicity, they are filled with zero. There are standards that say with what you may pad the unused bits/bytes. Sometimes they are filled with random bytes or as with a single 1 and then zeros 0000...00 bits, etc. See ex. this wiki page
The client has to know the length of the message. In case of C strings, I would just pad it with zero bytes. C strings end with a zero byte anyway, so the user can just strlen(received_message) and he will know the length of the string.
In case of dealing with arbitrary data, you have to pass the length of the message in some way. Maybe some other way or with the message, at the beginning of it, for example. So, for example, you can choose the first 4 bytes to represent the message length. Or you can specify that the message starts with a C string with the message length encoded using a number represented in base 16 using ASCII characters (so you can read the message length with %x) and after the string your message continues.

How do I pad bits to a string in C?

Just initialize the msg memory with zeros, either with calloc or meset:
#include<stdio.h>
#include<stdlib.h>
int main(int argc,char *argv[]) {
   char *msg = calloc(128, sizeof(*msg));
   if (msg == NULL) abort();
   printf(""\n Enter a message"");
   if (scanf(""%127s"", msg) != 1) abort()
   # bits are padded with zeros, proceed with your algorithm
   return 0;
}

or you can memset only the unused bytes in the memory:
#include<stdio.h>
#include<stdlib.h>
#include <string.h>
int main(int argc,char *argv[]) {
   char *msg = malloc(128 * sizeof(*msg));
   if (msg == NULL) abort();
   printf(""\n Enter a message"");
   if (scanf(""%127s"", msg) != 1) abort();
   memset(&msg[strlen(msg)], 0, 128 - strlen(msg));
   # bits are padded with zeros, proceed with your algorithm
   return 0;
}

Notes to your code:

Don't cast result of malloc
Don't use scanf, it is unsafe. Especially never use %s with scanf.

","62","<c><padding><sha256>","-2","0","1","2019-06-16 15:55:28","","7","","","","","2019-06-16 15:25:32",""
"44846903","Acquire youtube reporting access token","I'm trying to follow the Using OAuth 2.0 for Server to Server Applications guide to get an access token so that I can use the Youtube Reporting API.
But no matter what I do, I always this result:
Warning: file_get_contents(https://www.googleapis.com/oauth2/v4/token): failed to open stream: HTTP request failed! HTTP/1.0 400 Bad Request 

Here's my code
$contents = file_get_contents('BCGA-557d334b8526.json');
$account = json_decode($contents, TRUE);
$privateKeyString = $account['private_key'];
$time = time();
$expiration = $time + 3600;

$header = '{""alg"":""RS256"",""typ"":""JWT""}';
$claim_set = '{""iss"":""youtube-reporting@ataproject-850089.iam.gserviceaccount.com"",""scope"":""https://www.googleapis.com/auth/yt-analytics.readonly"",""aud"":""https://www.googleapis.com/oauth2/v4/token"",""exp"":""' . $expiration . '"",""iat"":""' . $time . '""}';

$unsignedToken = base64_encode($header) . '.' . base64_encode($claim_set);

$signature = hash_hmac('sha256', $unsignedToken, $privateKeyString, true);

$jwt = base64_encode($header) . '.' . base64_encode($claim_set) . '.' . base64_encode($signature);



$url = ""https://www.googleapis.com/oauth2/v4/token"";
$data = array('grant_type' => 'urn:ietf:params:oauth:grant-type:jwt-bearer', 'assertion' => $jwt);

// use key 'http' even if you send the request to https://...
$options = array(
    'http' => array(
        'header'  => ""Content-type: application/x-www-form-urlencoded\r\n"",
        'method'  => 'POST',
        'content' => http_build_query($data)
    )
);
$context = stream_context_create($options);
$result  = file_get_contents($url, false, $context);
if ($result === FALSE) { /* Handle error */ }

var_dump($result);

Any suggestions? 
","You forgot
'grant_type' => 'refresh_token'

","61","<php><sha256><youtube-analytics-api>","1","0","1","2019-10-28 15:02:14","","0","","","","","2017-06-30 12:49:25",""
"36457397","SHA256 hash in Python 2.2","I need to create a SHA256 hash in Python 2.2, but a don't found any way to do this. All I found is for Python 2.4 or higher.
Anyone has a ideia to how I can do this?
","","60","<python><sha256><python-2.2>","0","","0","2016-04-06 16:47:37","","4","1","","","","2016-04-06 16:47:37","2016-04-06 17:15:38"
"36653674","Does Paypal security upgrades affects subscription button?","I have a webpage with a subscription button, on user's click it redirects to paypal.com/cgi-bin/webscr.
I change the business input to my business sandbox account and change endpoint to sandbox.paypal.com/cgi-bin/webscr.
My sandbox buyer account appears to been working good since the balance change when test transaction is perform.
I would like to know if this test means my page meets the new Paypal security changes (TLS 1.2 and HTTP/1.1 protocols and SHA-256 and G5 certificates).
Thanks in advance.
","Security upgrade will not impact the subscription button. As you mentioned, you test sandbox transactions, if everything is fine in sandbox environment, you don't need to take any actions.
","60","<paypal><sha256><endpoint><tls1.2><http-1.1>","0","0","1","2016-04-18 05:40:33","","0","","","","","2016-04-15 17:44:25",""
"48339010","Recreating secure token functionality from C# into Java","I have an application I am converting from C# to Java (eventually I want to make this an android app).
To give some background: the application connects to a web server, with a JSON formatted request for a 'key' to log in. Within the JSON is a token which is generated by the following code:
public static string GenToken(string secret, string str)
    {
        string token;
        using (var stream = new System.IO.MemoryStream(Encoding.UTF8.GetBytes(str)))
        {

            using (var hmac = new System.Security.Cryptography.HMACSHA256(Encoding.UTF8.GetBytes(secret)))
            {
                var hash = hmac.ComputeHash(stream);        
                var hashStr = BitConverter.ToString(hash);        
                token = string.Format(""{0}.{1}"", hashStr.Replace(""-"", """"), str);

            }
        }

        return Convert.ToBase64String(Encoding.UTF8.GetBytes(token));
    }

The closest I have found is some code I found here but this is still not producing the same result as the C# code.
What I need is something that will produce the same result in Java as this bit of c# code. Otherwise the authentication fails. 
For reference, I am testing using the values:
secret = 7353388933d07b2a1ef462c9d3f4e8ca;
str = {""userId"":""bcf4fc83-291a-11e7-9def-06948e004f29"",""expires"":1516015203090}

This outputs 
OTQyMDk1NTI2Mzc3NDYyRjk1RTYzQzUzNUVCNzg3MDQ1NjlBNDQ5OEM1MTM1N0I2QTQ3REY1OTA5M0Q3MjMzQS57InVzZXJJZCI6ImJjZjRmYzgzLTI5MWEtMTFlNy05ZGVmLTA2OTQ4ZTAwNGYyOSIsImV4cGlyZXMiOjE1MTYwMTUyMDMwOTB9 

EDIT
I have gotten as far as realising that 
using (var stream = new System.IO.MemoryStream(Encoding.UTF8.GetBytes(str)))

Is producing a hex value of 
 7B-22-75-73-65-72-49-64-22-3A-22-62-63-66-34-66-63-38-33-2D-32-39-31-61-2D-31-31-65-37-2D-39-64-65-66-2D-30-36-39-34-38-65-30-30-34-66-32-39-22-2C-22-65-78-70-69-72-65-73-22-3A-31-35-31-36-30-31-35-32-30-33-30-39-30-7D

Which I have been able to do with the following in Java (removing the need to replace the dashes)
public static String toHex(String arg) {
    return String.format(""%040X"", new BigInteger(1, arg.getBytes(StandardCharsets.UTF_8)));
}

But I'm well and truly stuck after this point.
Thanks in advance
","The C# code:

converts the hash to its hexadecimal representation hashStr. To convert a byte array to a hexadecimal string in Java see this post.
removes ""-"" that were introduced by BitConverter. You won't need to do this in Java, since adding ""-"" is specific to BitConverter.
concatenates hashStr and str with a dot in between to get a token. This is trivial in Java: token = hashStr + ""."" + str.
converts the token to a base64 encoding. To do this in Java, use Base64.encodeBase64String as was done in your example

The code you're referring to does not perform these steps. Did you consider adding these steps to the Java code?
","59","<java><c#><base64><sha256>","0","1","1","2018-01-19 11:13:07","","0","","9221380","","2018-01-19 11:13:07","2018-01-19 10:31:42",""
"28642357","PHP/WEB: How to store hashed passwords","I understand how to hash/salt/etc passwords on a php page. However, I do not know how to actually store those passwords
For instance, if I just need to have a PHP document validate one password against another (that is stored on the server), how do I actually store the password it needs to be validated against? If I just have it sitting in a file, someone could read the source PHP to find that file, read the file, and then send a fake POST with that hashed password. If I have it salted, they just need to read the source code and then remove the salt. Can they see the PHP source?
Hopefully that makes sense. I just need to know how to store hashed/salted passwords on my web server. Can I just put them in a .txt?? What happens if someone reads that .txt, can't they just send a fake POST and the server will accept it??
Thanks in advance!
","
Don't put them in a .txt file. At least not one in a web-accessible directory. I would advise storing them in a database.
If someone does gain access to your password hashes, they can't use it to login, at least not directly, because you would be re-hashing the hash when verifying the password, thus producing a different, non-matching hash. However, having access to the password hash does make it a lot easier to crack the actual password via dictionary or brute-force, since checking to see if the password is a match can be done locally and does not require making a request to your server. For this reason, be sure to keep the hashes reasonably safe, and if they do get leaked, force password resets on your users.

Incidentally, you don't have to worry about users being able to view your PHP source code, unless they are able to find an exploit in your code that will disclose the source code.
","59","<php><security><hash><sha256>","-1","1","1","2015-04-03 15:48:49","28642403","1","","4466228","","2015-04-03 14:58:27","2015-02-21 05:08:24",""
"52799186","Java Socket Programming with UDP","I am trying to send some number and hash using server client. I am using the UDP protocol to do so. I create a packet using wither the number or the hash, as I was supposed to, and sent it using the socket. The client receives it and consequently, just prints the received value. But when I receive number and hash in the client, I don't get the same. What can be the possible issue?
I am giving my server and client code and the output I get here.
Server Code:
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.ArrayList;
import javax.xml.bind.DatatypeConverter;

public class main {

    public static void main(String[] args) throws IOException, NoSuchAlgorithmException {

        int n = 10;
        SecureRandom rand = new SecureRandom();
        ArrayList<String> clue = new ArrayList<String>();
        ArrayList<String> cluenum = new ArrayList<String>();
        MessageDigest digestnew = MessageDigest.getInstance(""SHA-256"");
        byte[] finalmsgblock = ""End"".getBytes();

        for(int i = 0; i < n; i++)
        {
            int num = rand.nextInt(100);
            String num1 = Integer.toString(num);
            byte[] num2 = digestnew.digest(num1.getBytes(StandardCharsets.UTF_8));
            String num3 = ""Clue: "" + DatatypeConverter.printHexBinary(num2);
            clue.add(i,num3);
            cluenum.add(i, num1);

        }
        System.out.println(clue);
        System.out.println(cluenum);

        // Create a Socket
        DatagramPacket packet, packet1;
        InetAddress address;
        DatagramSocket socket;
        socket = new DatagramSocket();
        address = InetAddress.getByName(""127.0.0.1"");

        for(int i = 0; i < n; i++)
        {
            byte[] newdata = clue.get(i).getBytes(StandardCharsets.UTF_8);
            packet = new DatagramPacket (newdata, newdata.length, address, 1502);
            socket.send(packet);
            System.out.println(""Sent clue!"");

            byte[] newdata1 = cluenum.get(i).getBytes(StandardCharsets.UTF_8);
            packet1 = new DatagramPacket (newdata1, newdata1.length, address, 1502);
            socket.send(packet1);
            System.out.println(""Sent cluenum!"");
        }

        DatagramPacket  packet11 = new DatagramPacket (finalmsgblock, finalmsgblock.length, address, 1502);
        socket.send(packet11);

    }

}

Client Code:
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.nio.charset.StandardCharsets;
import java.security.SecureRandom;
import java.util.ArrayList;
import javax.xml.bind.DatatypeConverter;

public class main {

    public static void main(String[] args) throws IOException {
        int n = 10;
        SecureRandom rand = new SecureRandom();
        ArrayList<String> clue = new ArrayList<String>();
        ArrayList<String> cluenum = new ArrayList<String>();

        // Create the socket
        int port = 1502;
        DatagramSocket socket;
        byte[] buf = new byte[10000];
        DatagramPacket packet = new DatagramPacket(buf, buf.length);
        InetAddress address = InetAddress.getByName(""127.0.0.1"");
        socket = new DatagramSocket(port, address);
        int i1 = 0;
        int i2 = 0;

        while(true)
        {
            socket.receive (packet);
            byte[] data = new byte[packet.getLength()];
            System.arraycopy(packet.getData(), packet.getOffset(), data, 0, packet.getLength());
            String n1 = new String(data);
            if(new String(data).equals(""End""))
            {
                break;
            }
            else
            {
                if(n1.startsWith(""Clue: ""))
                {
                    String n2 = (n1.replace(""Clue: "", """"));
                    byte[] num = n2.getBytes(StandardCharsets.UTF_8);
                    String num1 = DatatypeConverter.printHexBinary(num);
                    clue.add(i1, num1);
                    i1 = i1 + 1;
                }
                else
                {
                    byte[] num = n1.getBytes(StandardCharsets.UTF_8);
                    String num1 = DatatypeConverter.printHexBinary(num);
                    cluenum.add(i2, num1);
                    i2 = i2 + 1;
                }
            }
        }

        System.out.println(clue);
        System.out.println(cluenum);
    }

}

The output that I get is given below:
Server Output:
[Clue: BBB965AB0C80D6538CF2184BABAD2A564A010376712012BD07B0AF92DCD3097D, 
 Clue: 44C8031CB036A7350D8B9B8603AF662A4B9CDBD2F96E8D5DE5AF435C9C35DA69,
 Clue: 6E4001871C0CF27C7634EF1DC478408F642410FD3A444E2A88E301F5C4A35A4D, 
 Clue: A46E37632FA6CA51A13FE39A567B3C23B28C2F47D8AF6BE9BD63E030E214BA38,                 
 Clue: C837649CCE43F2729138E72CC315207057AC82599A59BE72765A477F22D14A54,    
 Clue: CD70BEA023F752A0564ABB6ED08D42C1440F2E33E29914E55E0BE1595E24F45A, 
 Clue: 7902699BE42C8A8E46FBBB4501726517E86B22C56A189F7625A6DA49081B2451, 
 Clue: 19581E27DE7CED00FF1CE50B2047E7A567C76B1CBAEBABE5EF03F7C3017BB5B7, 
 Clue: EF2D127DE37B942BAAD06145E54B0C619A1F22327B2EBBCFBEC78F5564AFE39D, 
 Clue: 1A6562590EF19D1045D06C4055742D38288E9E6DCD71CCDE5CEE80F1D5A774EB]
 [83, 84, 93, 82, 57, 89, 7, 9, 5, 50]

Client Output:
[42424239363541423043383044363533384346323138344241424144324135363441303130333736373132303132424430374230414639324443443330393744, 34344338303331434230333641373335304438423942383630334146363632413442394344424432463936453844354445354146343335433943333544413639, 36453430303138373143304346323743373633344546314443343738343038463634323431304644334134343445324138384533303146354334413335413444, 41343645333736333246413643413531413133464533394135363742334332334232384332463437443841463642453942443633453033304532313442413338, 43383337363439434345343346323732393133384537324343333135323037303537414338323539394135394245373237363541343737463232443134413534, 43443730424541303233463735324130353634414242364544303844343243313434304632453333453239393134453535453042453135393545323446343541, 37393032363939424534324338413845343646424242343530313732363531374538364232324335364131383946373632354136444134393038314232343531, 31393538314532374445374345443030464631434535304232303437453741353637433736423143424145424142453545463033463743333031374242354237, 45463244313237444533374239343242414144303631343545353442304336313941314632323332374232454242434642454337384635353634414645333944, 31413635363235393045463139443130343544303643343035353734324433383238384539453644434437314343444535434545383046314435413737344542]
[3833, 3834, 3933, 3832, 3537, 3839, 37, 39, 35, 3530]
I tried, but couldn't format the client output
Edit: I have tried sending only the numbers alone and it still doesn't work. Please let me know what can be the possible issues?
","You are sending hex encoded data from the server. Then your client should not convert that hex again with DatatypeConverter.printHexBinary(num)
Instead of the client doing 
   String n2 = (n1.replace(""Clue: "", """"));
   byte[] num = n2.getBytes(StandardCharsets.UTF_8);
   String num1 = DatatypeConverter.printHexBinary(num);
   clue.add(i1, num1);

Just do
 String n2 = (n1.replace(""Clue: "", """"));
 clue.add(i1, n2);

(And do it similarly in the else clause of your client.)
","59","<java><sockets><client-server><sha256>","0","1","1","2018-10-15 00:07:05","52806189","1","","238704","","2018-10-15 00:07:05","2018-10-14 03:17:47",""
"53726412","Convert Bitstamp API Python Example Code to Laravel/PHP SHA256 Algorythm","According to the Bitstamp API docs here https://www.bitstamp.net/api/ the following Python code may be used to generate a SHA256 signature:
import hmac
import hashlib

message = nonce + customer_id + api_key
signature = hmac.new(
    API_SECRET,
    msg=message,
    digestmod=hashlib.sha256
).hexdigest().upper()

I'm trying to use Laravel/PHP with the GuzzleHttp Client to do the same. My code is:
$client  = new \GuzzleHttp\Client();
        $nonce = time();
        $message = $nonce . $bitstamp_customer_id . $bitstamp_api_key;
        $signature = strtoupper(hash_hmac(""sha256"", $message, $bitstamp_api_secret));
$response = $client->request('POST', 'https://www.bitstamp.net/api/v2/balance/', [
            'form_params' => [
                'key' => $bitstamp_api_key,
                'signature' => $signature,
                'nonce' => $nonce,
            ]
        ]);

No matter what I try I get:
Client error:POST https://www.bitstamp.net/api/v2/balance/resulted in a403 Authentication Failedresponse: {""status"": ""error"", ""reason"": ""API key not found"", ""code"": ""API0001""}
I've checked the three critical Bitstamp parameters and recreated the API key multiple times. The three parameters which I have doulble checked are:

bitstamp_customer_id
bitstamp_api_key
bitstamp_api_secret

I'm concluding I'm not translating the Python code correctly and would like some help.
","O gosh, I had to press the big green ACTIVATE button and confirm via email.
","59","<php><python><api><guzzle><sha256>","0","0","1","2018-12-11 14:49:14","","0","","","","","2018-12-11 14:36:51",""
"52725468","padding algorithm more than 512 bits in sha256","if anyone answered my quesion i would be very much grateful,
my question is  in sha256 , if we have 512 bits message length how can i do padding , because in sha256 l+1+k=448mod512, it will overflow 512 bit block, i mean to say that for hashing computation we need to divide 512 bit block into 16 x 32 blocks , and the process is the message bit length (l) + k number of '0' + binary representation of l(length of message). my point is 512 bit after k number 0f '0' and bit representation of l(length of message) we will get more than 512 bits , how ae we going to divide into 16 x 32 bit blocks.  
","You don't need to pad your data to be a certain length in order to get a sha256 checksum value; the algorithm will handle a few bytes as well as megabytes of data:
Linux> echo 'hey' |  sha256sum
4e955fea0268518cbaa500409dfbec88f0ecebad28d84ecbe250baed97dba889  -
Linux> echo '' |  sha256sum
01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b  -
Linux> ls -oh L0_2018_08_28_Disk1_8mtbno4o_3_1.bkp 
-rw-r-----. 1 nfsnobody 348M Aug 28 23:48 L0_2018_08_28_Disk1_8mtbno4o_3_1.bkp
Linux> sha256sum L0_2018_08_28_Disk1_8mtbno4o_3_1.bkp
34438a1bc45f613b7be8797b1139aaa66a60d73844f2d7554184b17c621b4576  L0_2018_08_28_Disk1_8mtbno4o_3_1.bkp

If you want to learn about the actual algorithm, one open-source implementation says 

Algorithm specification can be found here:
  http://csrc.nist.gov/publications/fips/fips180-2/fips180-2withchangenotice.pdf

","59","<message><sha256><digest>","1","0","1","2018-10-09 17:51:10","","2","","","","","2018-10-09 16:26:25",""
"50885798","SHA return different result i MariaDB","I have a table that is filled with some value, for setting the value I use a stored procedure that also calculate a hash function and save in database.
In case of updating value hash should be recalculated. For recalculating hash I use the following procedure:
DELIMITER $$
CREATE PROCEDURE `sp_UpdateHash`(IN rkey int)
Begin
DECLARE AuthCode VarChar(10);

SET @input = concat('SELECT r_ac into @AuthCode
    FROM table_rec
    where r_key=',rkey);

PREPARE squery FROM @input;
EXECUTE squery;
SET @hashed = SHA2(@AuthCode,256);
select @hashed;
DEALLOCATE PREPARE squery;
end;

and procedure just for calculating hash:
CREATE PROCEDURE `sp_GetHash`(IN AuthCode VarChar(10))
BEGIN
    DECLARE hashed VarChar(64);
    SET hashed = SHA2(AuthCode,256);
    select hashed as 'Hash';
END

AuthCode identical, but hash is different when I try to process value after select command I get a wrong code. If I compare two hashes with other results, for example from an online generator, the result is similar to the second function: sp_GetHash
Do you have any idea why?
","The problem was in one field that has a different coding from the table, and when I use it in the query it has a different size.
","58","<mariadb><sha256>","0","0","1","2018-06-23 06:49:08","","2","","","","","2018-06-16 07:15:49",""
"37585646","IoT Hub - modify complex token creation (via MQTT)","as per my heading I would really like to look into doing this, let me explain why.
History : I have successfully done a full host and client and its working 100% on via .NET. The big but is that our clients in the field are running on a microcontroller (not a microprocessor) that has poor encryption libraries (embedded C, in particular PIC). Our firmware engineer guy is currently battling to get the HMAC part of the SAS token generation to work. The other pieces of the hub is possible (MQTT, TLS, URL encoding, EPOCH etc) but the HMAC SHA256 is a struggle. 
I am aware of the protocol gateway offered where you can replace the gateway’s authentication provider. Does anyone have any sample code/guide that I can follow. The dev guide offered by Microsoft seems limited or maybe im just being silly and missing the plot.
Thanks so much for any help! 
","Light bulb moment ;) So we going to keep our TCP channel open and will get the unit to help auth over this channel. I will ACK back the key (will encrypt that in a much simpler way ;)) 
","58","<azure><mqtt><sha256><hmac><azure-iot-hub>","1","1","1","2016-06-09 11:38:29","37724922","0","","","","","2016-06-02 07:45:33",""
"56301628","Java mac sha256 hashing does not match with php hmac sha256 using pack?","I'm trying to setup a secure hash key in java (android). It's not getting the same result as that of php side (which I use as a reference and it works).
I've gone through many similar questions, but (only one, I tried it but doesn't work) none doesn't solved it clearly. Here's the codes I've tested.
// php code
$secureHash = 'ABCD';
$secret = '123AE45F';
echo '<br> using pack--';
echo hash_hmac('sha256', $secureHash, pack('H*', $secret));
echo '<br> without using pack--';
echo hash_hmac('sha256', $secureHash, $secret, false);

result with pack : f7a009f2c3e654fa48296917ab6372ecb7aa2a24c43fccb70af743f66b6dba55
result without pack : fc602f0f6faf2072be9c0b995ee3d603f61414c4beb027b678c90946db6903a2
// Java code
private String getHashCode(String message, String secretKey) {
    Mac mac;
    String result = null;

    try {
        byte[] byteKey = secretKey.getBytes(StandardCharsets.UTF_8);

        final String hmacSHA256 = ""HmacSHA256"";
        mac = Mac.getInstance(hmacSHA256);
        SecretKeySpec keySpec = new SecretKeySpec(secretKey.getBytes(), hmacSHA256);
        sha256HMAC.init(keySpec);

        byte[] mac_data = sha256HMAC.doFinal(message.getBytes(StandardCharsets.UTF_8));
        result = bytesToHex(mac_data);

        System.out.println(""getHashCode: result "" + result);
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (InvalidKeyException e) {
        e.printStackTrace();
    }

    return result;
}

In the Java code I'm getting the output as 
fc602f0f6faf2072be9c0b995ee3d603f61414c4beb027b678c90946db6903a2
same as php code without pack. How can I achieve the same output as PHP, ie using the pack('H*', $secret) in Java code ?
","Thanks to this stackoverflow answer by @rolfl, instead of string.getBytes java function on the secret key, I used his function to get the bytes,
    public byte[] hexToString(String hex) {
        // hexToString that works at a byte level, not at character level
        byte[] output = new byte[(hex.length() + 1) / 2];
        for (int i = hex.length() - 1; i >= 0; i -= 2) {
            int from = i - 1;
            if (from < 0) {
                from = 0;
            }
            String str = hex.substring(from, i + 1);
            output[i/2] = (byte)Integer.parseInt(str, 16);
        }
        return output;
    }

Now I get the same as php side for hex type secret key.
","58","<java><php><android><hash><sha256>","0","0","1","2019-05-25 09:07:42","56303350","0","","3192693","","2019-05-25 09:07:42","2019-05-25 04:11:30",""
"32353321","SHA256 has table cli and openssl library","I'm trying to understand how the openssl library works compared to the CLI, and can't manage to find how to use SHA256 in both of those to get the same answer.
im using OpenSSL 1.0.1e-fips 11 Feb 2013
my CLI command is 
echo a | openssl sha256

output
(stdin)= 87428fc522803d31065e7bce3cf03fe47596631e5e07bbd7a0fde60c4cf25c7
C program
int main( int argc, char *argv[] ) {
    unsigned char       msg[ 100 ];
    long unsigned int   msg_len;
    unsigned char       md[ SHA256_DIGEST_LENGTH ];      // SHA256_DIGEST_LENGTH = 32

    msg_len = 100;
    memset( msg, 0, msg_len );
    msg[ 0 ] = 'a';
    msg[ 1 ] = '\0';

    if ( ! simpleSHA256( msg, msg_len, md ) ) {
        return 1;
    }

    hex_print( md );          // for 0<=i<=32 do printf( ""%02x"", md[ i ] );
}

where
bool simpleSHA256( void *input, unsigned long length, unsigned char *md ) {
    SHA256_CTX    context;
    if ( ! SHA256_Init( &context ) )
        return false;
    if ( ! SHA256_Update( &context, (unsigned char*)input, length ) )
        return false;
    if ( ! SHA256_Final( md, &context ) ) 
        return false;

    return true;
}

with output:
653504743d03afc72051d85fce9bcb8afd05d7911e5c9fe91265fa36d7d98b0

what am I doing wrong? cause both of those are suppose to give back the same output
","When you do echo a it prints the letter and a newline. So the string you use in the C program should be ""a\n"".
Also, you do the checksum of all of the array, not only the two letters used in the command line example. Use the proper length instead.
","58","<c><openssl><sha256>","0","3","1","2015-09-02 12:43:39","32353400","1","","507793","","2015-09-02 12:42:10","2015-09-02 12:34:25",""
"58635099","Why does SHA256 hash not match after uploading and downloading file?","I'm creating a feature for an app to store a file on a webserver while maintaining data about the file on SQL Server. I generate a SHA256 hash and store it as BINARY(32) and then upload the file to a WebDav server using HTTPClient. Later when I want to view the file in the app, I do a GET request, download the file, and check the SHA256 hash with the stored hash. It doesn't match :( Why?
I've tried checking the hash on the server and the local machine and it doesn't match either. I've done a ton of research and made sure I wasn't hashing the filename (you can see the code below).
public static byte[] GetSHA256(string path) {
    using (var stream = File.OpenRead(path)) {
        using (var sha256 = SHA256.Create()) {
            return sha256.ComputeHash(stream);
        }
   }
}

To Upload a file:
public async Task<bool> Upload(string path, string name) {
    var storedHash = GetSHA256(path/name);
    //Store this hash in a database, omitted for brevity
    using (var file = File.OpenRead(path)) {
        var content = new MultipartFormDataContent();
        content.Headers.ContentType.Media = ""multipart/form-data"";
        content.Add(new StreamContent(file));
        var result = await HttpClient.PutAsync(uri, content);
  }
}

To download:
var result = await HttpClient.GetAsync(uri);
using (var stream = await result.Content.ReadAsStreamAsync()) {
    var fileInfo = new FileInfo(""TestFile"");
    using(var fileStream = fileInfo.Open(FileMode.CreateNew, FileAccess.ReadWrite, FileShare.Delete)) {
        await stream.CopyToAsync(fileStream);
    }
}
var downloadedFileHash = GetSHA256(""TestFile"");

//check if downloadedFileHash matches the storedHash by comparing byte[] length and content with for loop.

I expect that the hash would match. I know I'm missing a few using statements and other code but I omitted a bunch for brevity.
EDIT: The hashes for the downloaded files stay the same so the problem isn't downloading but uploading. I uploaded the same files multiple times but get back different hashes for each one. But the different hashes stay constant.
","Sorry y'all, you can delete this question because I found the problem/answer but am still confused why this is occurring.
Turns out webdav was adding extra headers to my file for some reason, see: Header info being written into file when PUT-ing to a Webdav server
Strangest thing. So I encountered this post. https://blogs.msdn.microsoft.com/robert_mcmurray/2011/10/18/sending-webdav-requests-in-net-revisited/
Rewrote my code to be
public static async Task<HttpResponseMessage> Upload(string path, string name, FileStream file) {
    var method = new HttpMethod(@""PUT"");
    var message = new HttpRequestMessage(method, path/name) {
        Content = new StreamContent(file)
    };

    return await HttpClient.SendAsync(message);
}

And it works... But I'm wonder how the two methods of uploading differ.
","58","<c#><.net><dotnet-httpclient><sha256><webdav>","0","0","1","2019-10-31 17:05:44","","3","1","12166409","","2019-10-31 00:17:18","2019-10-30 23:44:54",""
"17020159","compresse a SHA256 digest to 16 unique char","i'm working in crypto and i want to tokenize a SHA256 digest to 16 or Plus Char , so i want to ask you if you have any idea to compresse or crypte the Digest or if i can have 114bit from 256bit it will be great to do get the tokenize .
thank you 
Cdt,
aia
","","57","<compression><converter><token><sha256>","0","","0","2013-06-10 08:55:40","","2","","","","","2013-06-10 08:55:40",""
"53156294","Python just executed 1 line","hi I'm new to python code. I tried to make a program to generate a private key from hex.
I make a hex list as .txt like
80000000000000000000000000000000000000000000000
and importing into code
when I try to execute the file only the first line is executed
whereas in the txt file there are 5 lines
is there a way for all lists to be executed?
where is my code error?
output_file = open(""output.txt"", ""w"")

# Step 2: let's add 80 in front of it
with open(""generate.txt"", ""r"") as extended_key:
    data = extended_key.readline().replace(""\n"", """")


# Step 3: first SHA-256
first_sha256 = hashlib.sha256(binascii.unhexlify(data)).hexdigest()
# Step 4: second SHA-256
second_sha256 = hashlib.sha256(binascii.unhexlify(first_sha256)).hexdigest()
# Step 5-6: add checksum to end of extended key
final_key = data+second_sha256[:8]
# Step 7: finally the Wallet Import Format is the base 58 encode of final_key
WIF = base58.b58encode(binascii.unhexlify(final_key))

output_file.write (WIF)

","You should use readlines() to obtain a list containing all the lines and then loop over this list.
","57","<python><loops><sha256>","-1","0","2","2018-11-06 06:50:59","","1","","","","","2018-11-05 14:24:48",""
"53156294","Python just executed 1 line","hi I'm new to python code. I tried to make a program to generate a private key from hex.
I make a hex list as .txt like
80000000000000000000000000000000000000000000000
and importing into code
when I try to execute the file only the first line is executed
whereas in the txt file there are 5 lines
is there a way for all lists to be executed?
where is my code error?
output_file = open(""output.txt"", ""w"")

# Step 2: let's add 80 in front of it
with open(""generate.txt"", ""r"") as extended_key:
    data = extended_key.readline().replace(""\n"", """")


# Step 3: first SHA-256
first_sha256 = hashlib.sha256(binascii.unhexlify(data)).hexdigest()
# Step 4: second SHA-256
second_sha256 = hashlib.sha256(binascii.unhexlify(first_sha256)).hexdigest()
# Step 5-6: add checksum to end of extended key
final_key = data+second_sha256[:8]
# Step 7: finally the Wallet Import Format is the base 58 encode of final_key
WIF = base58.b58encode(binascii.unhexlify(final_key))

output_file.write (WIF)

","Replace the above segment with this. fileOb.read() reads the whole content whereas fileOb.readline() reads only one line.
# Step 2: let's add 80 in front of it
with open(""generate.txt"", ""r"") as extended_key:
    data = extended_key.read().replace(""\n"", "" "") #to read all the lines and replace the newline characters by spaces

","57","<python><loops><sha256>","-1","0","2","2018-11-06 06:50:59","","1","","","","","2018-11-05 14:24:48",""
"56803256","Unable to create the correct SHA256 hash","I am working on a project where i need to create a SHA256 hash as per the steps shown below and compare it with existing hash for verification.
Below mentioned are the steps mentioned for creating hash:
Hashing logic for Mobile Number : 
Sha256(Sha256(Mobile+SharePhrase))*number of times last digit of Aadhaar number
(Ref ID field contains last 4 digits).

Example : 
Mobile: 1234567890
Aadhaar Number:XXXX XXXX 3632
Passcode : Lock@487
Hash: Sha256(Sha256(1234567890Lock@487))*2 

I am doing it this way
byte[] digCloneOutput = new byte[32];
private void getPhoneHash(String numberToHash) {

    String phn = (getPhn+""""+ed_shareCode.getText().toString().trim());

    Log.e(""phn"", phn);

    MessageDigest md = null;

    byte[] digest;
    byte[] digClone = new byte[0];

    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.KITKAT) {
        digest = phn.getBytes(Charset.forName(""UTF-8""));
        digClone = digest.clone();
    }

    try
    {
        md = MessageDigest.getInstance(""SHA-256"");
    }
    catch (NoSuchAlgorithmException e)
    {
        throw new IllegalStateException(""SHA-256 hash should be available"", e);
    }

    for(int i = 0; i< 2; i++){
        md.update(digClone);
        digClone = md.digest();
        Log.e(""Intermediate hash"",""""+ digClone);
    }


    for (int i = 0; i < digClone.length; i++)
    {

        digCloneOutput[i] = (byte) (digClone[i]*lastDigAdhr);
        //  md.update(digClone);
        //  printDigest(""Intermediate hash"", digClone);
    }

    printDigest( digCloneOutput);
}


public  void printDigest(byte[] digest)
{
    StringBuffer hexString = new StringBuffer();
    for (int i = 0; i < digest.length; i++) {
    String hex = Integer.toHexString(0xff & digest[i]);
    if(hex.length() == 1) hexString.append('0');
    hexString.append(hex);
}

    Log.e(""Final HashString to compare"", String.valueOf(hexString));

}

Final hash with which i have to compare looks like this 
6d0af38001b278389875d2119a187ac5d4df16f5dd75fa5272499059c1149803
but the hash created by my logic never matches the original hash. 
I am struggling from last 2 days on this. Any help will be appreciated. Thanks in advance
","For SHA-256 I use this simple code hope it will help you
fun encryptToSha256(data: String): String {
    val digest = MessageDigest.getInstance(""SHA-256"")
    digest.update(data.toByteArray())
    return bytesToHexString(digest.digest())
}

private fun bytesToHexString(bytes: ByteArray): String {
    val sb = StringBuffer()
    for (i in bytes.indices) {
        val hex = Integer.toHexString(0xFF and bytes[i].toInt())
        if (hex.length == 1) {
            sb.append('0')
        }
        sb.append(hex)
    }
    return sb.toString()
}

","57","<java><android><sha256>","1","0","1","2019-06-28 09:08:51","","0","","","","","2019-06-28 08:13:52",""
"53559511","How to convert the output of sha256 to unique representation of binary bits?","Let's say the output of a sha256 hash function encoded to base64 is ""ypeBEsobvcr6wjGzmiPcTaeG7/gUfE5yuYB3ha/uSLs"". Since the output is produced from sha256 hash function it is 256bits long. But how can i find out from the string output ""ypeBEsobvcr6wjGzmiPcTaeG7/gUfE5yuYB3ha/uSLs"" the corresponding bits?
","","57","<hash><bit><sha256>","0","","0","2018-11-30 14:33:52","","4","","","","","2018-11-30 14:33:52",""
"18208496","Detecting whether any text is encrypted or not","I am researching Cryptography. I wanted to know how one can differentiate between normal text & text encrypted by sha256 algorithm, either using python or using regular expressions.
","SHA256 is not encryption algorithm, it's cryptographic hash function, so you cannot encrypt anything with it. What are you trying to distinguish?
","55","<python-3.x><sha256>","-1","0","1","2013-08-21 11:54:56","","1","","1240046","","2013-08-14 05:02:24","2013-08-13 11:56:50",""
"57577140","How to create signature using PHP","I need to use an API but first to login I need to create signature.
1. Concatenate the API key with the current timestamp in the format below:
<<APIKEY>>_<<timestamp(yyyy'-'MM'-'ddTHH:mm:ss.fffZ)>>

and this step is easy:
hash('sha256', $data);

result is:
9952375a30708b46739986482303cae30ad51fc9a362b5794d298dfc22f7ec02
and this is correct result
The next step is:
2. The combination of the created signature along with the provided API secret key will act as the
digital signature of the call.

I have API secret key like:
    -----BEGIN PUBLIC KEY-----
9IGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCgBSU90PX4WyXFAZ/+M84dJNEi
/0j5OermfydTU4g2JvnpO6BOQjNpb5+mOLjVoij7DWTdDtx1WThRm04N3DVuyh+a
5cledvMbcngvyiXpQCdskT9bVmI4QLbmRny46S7MER1jhziMQRfRw9gbmlB2iCEq
n21kDr842Q+WDtLE4QIDAQA9
-----END PUBLIC KEY-----

How I can get Digital signature with a combination of created signature and provided API secret key?
There is an Python example like:
key = api_key + '_' + timestamp

print ""message"", key

sha_hash = hashlib.sha256(key).hexdigest()

print ""sha256 hash:"", sha_hash


rsa_key = RSA.importKey(pub_key)
cipher = PKCS1_v1_5.new(rsa_key)
signature = base64.encodestring(cipher.encrypt(sha_hash))

but how I can get signature using PHP?
","While there are numerous ways to accomplish this, I recommend leveraging the openssl_public_encrypt method. There are other crypt functions and even pure PHP implementations of RSA but they are likely not as current and well maintained as openSSL is going to be on a linux system. Don't forget all the disruption in SSL/TLS these last years. Everything from retiring older protocols and weaker cyphers to POODLE type exploits.
If for whatever reason that is not an option I would probably look into phpseclib. https://github.com/phpseclib/phpseclib
Really might come down to what makes the most sense for your project... OS, portability, speed, etc.
Here is that Python snippet converted to equivalent PHP code.
<?php
$key = $api_key . '_' . $timestamp;

echo ""message:"" . $key;

$sha_hash = hash('sha256', $key);

echo ""sha256 hash:"" .  $sha_hash;

$rsa_key = ""your public key goes in here""; //see https://www.php.net/manual/en/function.openssl-pkey-get-public.php

openssl_public_encrypt($sha_hash, $encrypted, $rsa_key);
$signature = base64_encode($encrypted);


","55","<php><rsa><digital-signature><sha256><public-key>","1","2","1","2019-08-22 16:26:02","57578429","4","","569976","","2019-08-22 16:26:02","2019-08-20 15:37:36",""
"56369753","Creating Azure storage authorization header using python","I am trying to create the Authorization header for using Azure storage REST APIs. What a nightmare. The reason I am trying to do this is because I am trying to use a workflow builder (Alteryx) to call the API so my only programmatic options are Alteryx, python, or command line. 
I think I'm close, but I just don't understand these last three lines of code, following this article - https://docs.microsoft.com/en-us/azure/storage/common/storage-rest-api-auth?toc=%2fazure%2fstorage%2fblobs%2ftoc.json
// Now turn it into a byte array.
byte[] SignatureBytes = Encoding.UTF8.GetBytes(MessageSignature);
// Create the HMACSHA256 version of the storage key.
HMACSHA256 SHA256 = new HMACSHA256(Convert.FromBase64String(storageAccountKey));
// Compute the hash of the SignatureBytes and convert it to a base64 string.
string signature = Convert.ToBase64String(SHA256.ComputeHash(SignatureBytes));
So if I follow this correctly, I have to create a SHA256 version of the storage key but then I make a SHA256 hash of the SHA256 hash of the signaturebytes?
I'm current googling and not getting far, but basically trying to do the same thing above in .net using python.
","In python, you can just use this line of code:
signed_string = base64.b64encode(hmac.new(base64.b64decode(storage_account_key), msg=string_to_sign.encode('utf-8'), digestmod=hashlib.sha256).digest()).decode()

Here is the complete code of using List blobs api:
import requests
import datetime
import hmac
import hashlib
import base64

storage_account_name = 'xx'
storage_account_key = 'xxx'
container_name='aa1'
api_version = '2017-07-29'
request_time = datetime.datetime.utcnow().strftime('%a, %d %b %Y %H:%M:%S GMT')

string_params = {
    'verb': 'GET',
    'Content-Encoding': '',
    'Content-Language': '',
    'Content-Length': '',
    'Content-MD5': '',
    'Content-Type': '',
    'Date': '',
    'If-Modified-Since': '',
    'If-Match': '',
    'If-None-Match': '',
    'If-Unmodified-Since': '',
    'Range': '',
    'CanonicalizedHeaders': 'x-ms-date:' + request_time + '\nx-ms-version:' + api_version + '\n',
    'CanonicalizedResource': '/' + storage_account_name +'/'+container_name+ '\ncomp:list\nrestype:container'
}

string_to_sign = (string_params['verb'] + '\n' 
                  + string_params['Content-Encoding'] + '\n'
                  + string_params['Content-Language'] + '\n'
                  + string_params['Content-Length'] + '\n'
                  + string_params['Content-MD5'] + '\n' 
                  + string_params['Content-Type'] + '\n' 
                  + string_params['Date'] + '\n' 
                  + string_params['If-Modified-Since'] + '\n'
                  + string_params['If-Match'] + '\n'
                  + string_params['If-None-Match'] + '\n'
                  + string_params['If-Unmodified-Since'] + '\n'
                  + string_params['Range'] + '\n'
                  + string_params['CanonicalizedHeaders']
                  + string_params['CanonicalizedResource'])

signed_string = base64.b64encode(hmac.new(base64.b64decode(storage_account_key), msg=string_to_sign.encode('utf-8'), digestmod=hashlib.sha256).digest()).decode()

headers = {
    'x-ms-date' : request_time,
    'x-ms-version' : api_version,
    'Authorization' : ('SharedKey ' + storage_account_name + ':' + signed_string)
}

url = ('https://' + storage_account_name + '.blob.core.windows.net/'+container_name+'?restype=container&comp=list')

r = requests.get(url, headers = headers)
print(r.status_code)
print('\n\n'+r.text)

Test result:

","55","<utf-8><sha256><azure-storage-account>","0","1","1","2019-05-30 02:13:37","56370810","0","","","","","2019-05-29 23:26:06",""
"52656652","Hmac with SHa256 Or SHa256 with key appended in the input string? Which is more secure?","Which is a more secure way, Hashing using SHa256 and appending key in the input string, Or use that key and compute Hmac with SHA256? Or any other other hashing technique which uses a key.
","Hmac is more secure.
What you are proposing is called ""Suffix-MAC"" in Crypto101 page 135.  The problem with Suffix-MAC is a collision in the hash function can be used to create existential forgeries.  That is, if h(m1) = h(m2), and if I know suffix-mac(m1), then I also know suffix-mac(m2).
Bellare proved that HMAC is more robust because you don't need collision resistance of the hash function for it to be secure.  This is why HMAC-SHA1 is still considered okay even though SHA1 is not considered okay.
","54","<hash><sha256><hmac>","1","2","1","2018-10-06 12:42:20","52679205","0","1","4062630","","2018-10-05 09:54:44","2018-10-05 00:10:13",""
"12540015","What's the point of hashing if they've already got a massive rainbow table with all of your users?","I am trying to figure out something about this article:
http://techcrunch.com/2012/09/20/facebook-crm-ads/
So, Facebook claims that they respect the privacy of your customer database and that's why they let you upload the hashed email addresses. BUT, what's the point?
It only works by virtue that they've also hashed all the email addresses of their uses to make the hits.
Presumably, the only good this does is that Facebook doesn't know the email addresses of your customers that aren't already Facebook users. 
Am I missing anything else?
","That's not to protect the email addresses from facebook, but to protect them the rest of the way. If there's a data leak somewhere in the process, chances are that only the hashed addresses will get leaked, making them much harder to misuse.
","54","<hash><sha256>","0","0","1","2012-09-22 01:53:23","","0","","","","","2012-09-22 01:41:50",""
"53873975","How is the encryption process with certificates done by Adobe Acrobat?","I'm trying to validate a pdf document signed digital by myself using Adobe Acrobat v2019.008.
In the 'Contents' field of the pdf, I was able to obtain the public key and the encrypted hash. With this, I was able to generate the decrypted hash using rsa key.decryptPublic, let's call it h1.
Then, using the 'ByteRange' field, I cropped the pdf document and generated the hash using SHA256, but the value is different than h1.
I've tried to generate the hash using the content in format utf-8 and hex, but in both cases I've got a different value than h1.
How do I have to process the pdf document to get exactly h1? Might this be related to a special process of the content done by Adobe Acrobat?
Many thanks!
fs.readFile('./pdf-test/dummy.pdf', (err, data) => {
  const pdfString = data.toString();
  const byteRange = getByteRange(pdfString);
  const content = getContent(pdfString);
  const dataHex = data.toString('hex');
  const pdfHex = dataHex.substr(byteRange[0] * 2, byteRange[1] * 2) + dataHex.substr(byteRange[2] * 2, byteRange[3] * 2);
  const hashPdf = sha256(pdfHex);
  console.log('hashPdf', hashPdf);
  console.log('hex', sha256(pdfHex));
  console.log('utf8', sha256(Buffer.from(pdfHex, 'hex').toString('utf8')));
  const publicKey = getPublicKey(content);
  const encryptedHash = getEncryptedHash(content);
  const key = new NodeRSA(publicKey);
  const decrypted = key.decryptPublic(encryptedHash, 'hex');
  const hash = decrypted.substr(decrypted.length - 64);
  console.log('hash', hash);
});

","","53","<pdf><rsa><digital-signature><acrobat><sha256>","0","","0","2018-12-20 18:25:29","","5","","2632264","","2018-12-20 18:25:29","2018-12-20 18:09:01",""
"53341401","qt mysql database md5 password cheking problem","I am making registration/login form with qt c++ saving registration information in mysql password is hashed by md5 also I've tried sha256 same there, so main problem it saves password hashed and I've got no problem with that but when i'm comparing it in login window it doesn't compares and password wrong message appears. without hashing everything works fine, with hashing checking problem. Thanks for help))
if (db.open()) {
    QString email = ui->email->text();
    QString password = QString(""%1"").arg(QString(QCryptographicHash::hash(ui->password->text().toUtf8(),QCryptographicHash::Md5).toHex()));

    // Insert Query
    QSqlQuery query(QSqlDatabase::database(""MyConnection""));
    query.prepare(""SELECT * FROM users WHERE email = :email AND password = :password"");
    query.bindValue("":email"", email);
    query.bindValue("":password"", password);

    if (!query.exec()) {
        QMessageBox::information(this,""Failed"",""Error please try again"");
    }
    else {
        QString emailLog = query.value(1).toString();
        QString passwordLog = query.value(4).toString();

        if (query.next()) {
            QMessageBox::information(this,""SUCCESS"",""SUCCESS"");
            ui->plstryagain->close();
            db.close();
        } else {
            QMessageBox::information(this,""Wrong"",""Wrong Password try again"");
            ui->plstryagain->show();
            db.close();
        }
    }
}
else {
    QMessageBox::information(this, ""Database Error"", ""Can't Connect To Database"");
}

","","53","<c++><mysql><qt><md5><sha256>","0","","0","2018-11-16 19:29:09","","2","","3479456","","2018-11-16 19:29:09","2018-11-16 15:58:56",""
"48842138","Getting different hashes from two identical strings","I'm making some experiments with hashing. I'm getting a problem while doing a simple test.
This is my code:
String newWord = readFile(""C:\\Users\\javip\\Desktop\\Workspace SSII\\listado-general.txt"").get(5);
System.out.println(newWord);
String qwerty = ""qwerty2"";
System.out.println(qwerty);
System.out.println(newWord.equals(qwerty));
String sha256hex = DigestUtils.sha256Hex(newWord); 
System.out.println(DigestUtils.sha256Hex(qwerty));
System.out.println(DigestUtils.sha256Hex(sha256hex));

And here it is what my console prints:
qwerty2
qwerty2
true
42ad28944380f770cf17432c3494c07c32f680173b42c3562888f096e738ef7a
ebd11cf2e1a82248edff75899ba331ffa35787c070767da0c695bba8e2be5355

What am I doing wrong? I know by comprobation in some SHA256 encrypters of Intenet that 

42ad28944380f770cf17432c3494c07c32f680173b42c3562888f096e738ef7a

is the correct hash for ""qwerty2"" using SHA256.
","Your last line:
System.out.println(DigestUtils.sha256Hex(sha256hex));

is effectively:
System.out.println(DigestUtils.sha256Hex(DigestUtils.sha256Hex(newWord)));

i.e. you're printing the hash of the hash.
","52","<java><hash><sha256>","1","2","1","2018-02-17 14:07:21","48842176","3","","","","","2018-02-17 14:03:27",""
"56190591","SHA256 encrypt lines in a file using Windows","How would I SHA256 encrypt each line in a csv file in Windows?
It's a simple csv file of email addresses and I want that converted to SHA256 hashes, not the clear text emails.
macOS/Linux is my home OS, so I'm a little lost to know if this is possible on Windows? 
","","52","<windows><powershell><encryption><sha256>","0","","0","2019-05-17 16:52:35","","3","","","","","2019-05-17 16:52:35",""
"57937729","Generating a SHA-256 Hash with trailing zeroes","Using Linux terminal I'm able to generate hashes with leading zeroes, but I'm confused on how I would be able to generate hashes based on the number of trailing zeroes.
","","52","<sha256>","0","","0","2019-09-14 17:21:01","","3","","","","","2019-09-14 17:21:01",""
"43398610","Incorrect wxMaxima sha256sum() output","I'm trying to calculate a hash using sha256sum function from stringproc package.
The output is obviously wrong for me (Windows 7, maxima-5.38.1).
E.g. hash from the docs example:
(%i1) string: sha256sum(""foo bar baz"");
(%o1) dbd318c1c462aee872f41109a4dfd3048871a03dedd0fe0e757ced57dad6f2d7

For me it outputs 562fae81675643664087303002ecc95c547cf8a6c8173f3bc046da4244bcaef4
Other hash functions from the same package (SHA1, MD5) seem to work fine.
I've also tried running from xMaxima as well as the sha1.lisp file from version 5.37.2 with the very same result.
Somehow I suspect this to be related with maxima to run under Windows.
Did anybody see such issues?
Thanks a lot.
","This was a bug in Maxima. As described by one of developers:

The correct result was only computed when Maxima was compiled with gcl

Since then it was fixed. I've tested and can confirm that sha256sum() now gives correct hashes.
One can download the fixed sha1.lisp file here.
","51","<sha256><maxima>","0","0","1","2017-05-03 06:05:14","","2","","","","","2017-04-13 17:43:49",""
"42000143","What is the security flaw in this authentification process over unsecure HTTP?","First question here :)
I've been reading many questions about how to secure login on sites without https. They are all very interesting and most answers boil down to ""Use SSL if you care about security!"". I agree with this, yet I also wonder, what is the flaw in this particular procedure (one user(=me), no sessions: the password is always sent with the complete content of the <html> tag, which replaces the current contents of that file.):

Server sends two variables to page: random token A and B=derivedfrom(A). 
client sends back md5(password+timestamp+B) and A.
Server derives B from A to perform the same md5hash as client and matches hashes of server and client.  
Server allows no more than 1 request per second per IP address. 

Assuming the attacker knows all valid pairs of A and B, is there any way for him/her to authenticate succesfully apart from replay attacks (during a 100ms timeframe that the hash is valid) and pure luck that he guesses the right hash for this particular timeframe? 
Of course, the attacker could still try all possible passwords, but that doesn't change by using https.
I'm not suggesting this is a useful strategy for sites that cannot use https, just wondering if there is a theoretical flaw that I didn't think of.
How would you force your way in if the site has no traffic at the moment?
","There are several flaws here:

You should not use md5. Please use some other hashing algorithm (e.g. sha256)
In order to do what you are saying, the server needs to store the passwords in plaintext. This is a very bad practise, as if you get hacked, all the passwords will be compromised. Instead, you should store a salted hash of the password. More info here: https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet
This method is infeasible, as the timestamp cannot be possibly known by the server, except if the clock of the client and the server are synchronised to the millisecond (don't assume that they will be). Even if the clocks are completely synced, this will still not work. The time from when the client takes the timestamp until the packet reaches the server is variable, and the server would need to know exactly that time. Without the correct timestamp, the server won't be able to calculate the hash. Removing the timestamp will lead to replay attacks.
An attacker performing a man-in-the-middle attack can alter the HTML (or whatever) code on the fly and remove the hashing function (assuming it's performed in JavaScript). The browser will then transmit the password in clear. Of course the authentication will fail, but the attacker will have the password.
Probably other flaws also exist, but these are enough for the method to be inefficient I believe.

Bottom line: Do not use HTTP for user authentication. I have not heard of any cases of secure authentication over HTTP. If SSL is very expensive, you can use it only for the login page. It is still a very bad practise, as an attacker can perform session hijacking by stealing session cookies (and other man-in-the-middle attacks), but at least the password will not be revealed this way.
","51","<security><authentication><md5><sha256>","1","1","2","2017-02-08 17:50:25","42000867","0","1","7501010","","2017-02-08 17:50:25","2017-02-02 10:46:54",""
"42000143","What is the security flaw in this authentification process over unsecure HTTP?","First question here :)
I've been reading many questions about how to secure login on sites without https. They are all very interesting and most answers boil down to ""Use SSL if you care about security!"". I agree with this, yet I also wonder, what is the flaw in this particular procedure (one user(=me), no sessions: the password is always sent with the complete content of the <html> tag, which replaces the current contents of that file.):

Server sends two variables to page: random token A and B=derivedfrom(A). 
client sends back md5(password+timestamp+B) and A.
Server derives B from A to perform the same md5hash as client and matches hashes of server and client.  
Server allows no more than 1 request per second per IP address. 

Assuming the attacker knows all valid pairs of A and B, is there any way for him/her to authenticate succesfully apart from replay attacks (during a 100ms timeframe that the hash is valid) and pure luck that he guesses the right hash for this particular timeframe? 
Of course, the attacker could still try all possible passwords, but that doesn't change by using https.
I'm not suggesting this is a useful strategy for sites that cannot use https, just wondering if there is a theoretical flaw that I didn't think of.
How would you force your way in if the site has no traffic at the moment?
","What you describe is a minor technical detail in a larger procedure, which you do not go into detail at all. I'm assuming that the larger purpose of that procedure is to log in? Then what happens after this token is exchanged? Does the user receive some sort of permanent token like a cookie? Then this is susceptible to:

man in the middle attacks reading all communication
local network packet sniffing, famously publicised by the Firesheep attack

Even if (that's a large if) this particular token scheme were flawless, the entire communication chain is observable by third parties and all private data (including identifying cookies) can be read in the clear by unauthorised users in a privileged network position (→ session hijacking).
","51","<security><authentication><md5><sha256>","1","1","2","2017-02-08 17:50:25","42000867","0","1","7501010","","2017-02-08 17:50:25","2017-02-02 10:46:54",""
"21813012","Is it necessary to use single hash function for signature generation and HMAC?","I am trying to figure out if we need to use single hash function across all the places in a ssh session. i.e - signature generation/verification and HMAC calculation/validation. Is it possible to use two different hash function for signature and HMAC ? I am planning to implement SHA-256 for signature generation/verification in an embedded system. But I am concerned that if I use SHA-256 for HMAC also then there will be much impact on performance considering the lesser CPU capacity of the embedded system. I am new to cryptography so I am not much aware of these stuffs. It will be great if you could please help.
","","51","<hash><signature><hmac><sha256>","1","","0","2014-02-16 15:12:53","","0","","","","","2014-02-16 15:12:53",""
"52278162","Checksum changed when generated with the same object","I have an algorithm use to generate and return a checkSum when an update operation is called. The second update need to send the given checksum, who is the proof that the object is exactly the same. Otherwise, an exception is throw.
Here is my class used to manage the checksum : 
public class TokenUpdate
{
    internal readonly DateTime expireDateTime;
    private static readonly Object locker = new Object();
    internal readonly byte[] _dataTokenKey;

    public TokenUpdate(object insuranceAgreement, DateTime newExpireDateTime)
    {
        expireDateTime = newExpireDateTime;
        _dataTokenKey = GetSignedToken(insuranceAgreement);

    }

    public TokenUpdate(byte[] dataTokenKey, DateTime newExpireDateTime)
    {
        expireDateTime = newExpireDateTime;
        _dataTokenKey = dataTokenKey;

    }
    public bool IsExpired
    {
        get
        {
            return !(expireDateTime > DateTime.Now);
        }
    }

    public byte[] GetSignedToken(object insuranceAgreement)
    {
        byte[] tokenKey;

        byte[] tokenData;

        // serialize data in byte[]
        using (var ms = new MemoryStream())
        {
            using (var writer = new BinaryWriter(ms))
            {
                writer.Write(ObjectToByteArray(insuranceAgreement));
                tokenData = ms.ToArray();
            }
        }


        using (var sha1 = new SHA256Managed())
        {
            tokenKey = sha1.ComputeHash(tokenData);
        }


        return tokenKey;
    }

    public string GetTokenString()
    {
        byte[] tokenData;

        // serialize data in byte[]
        using (var ms = new MemoryStream())
        {
            using (var writer = new BinaryWriter(ms))
            {
                writer.Write(expireDateTime.Ticks);
                tokenData = ms.ToArray();
            }
        }


        return Convert.ToBase64String(tokenData.Concat(_dataTokenKey).ToArray());
    }

    public static TokenUpdate BuildToken(object insuranceAgreement, DateTime expireDateTime)
    {
        if (insuranceAgreement == null)
        {
            return null;
        }

        return new TokenUpdate(insuranceAgreement, expireDateTime);
    }

    public static bool AreEqual(TokenUpdate token, object toCompare)
    {
        var compareToken = new TokenUpdate(toCompare, DateTime.Now);


        return token._dataTokenKey.SequenceEqual(compareToken._dataTokenKey);
    }

    public static TokenUpdate GetTokenFromString(string tokenString)
    {
        TokenUpdate returnedToken = null;
        byte[] buffer;
        try
        {
            buffer = Convert.FromBase64String(tokenString);
        }
        catch (FormatException)
        {
            return null;
        }

        if (buffer.Length != 40)
        {
            return null;
        }

        var data = buffer.Take(buffer.Length - 32).ToArray();
        var sig = buffer.Skip(data.Length).Take(32).ToArray();
        using (var ms = new MemoryStream(data))
        using (var reader = new BinaryReader(ms))
        {
            var ticks = reader.ReadInt64();
            var expires = new DateTime(ticks);
            returnedToken = new TokenUpdate(sig, expires);
        }

        return returnedToken;
    }

    internal static byte[] ObjectToByteArray(object objectToSerialize)
    {
        if (objectToSerialize == null)
        {
            return null;
        }

        MemoryStream fs = new MemoryStream();
        BinaryFormatter formatter = new BinaryFormatter();
        try
        {
            //Here's the core functionality! One Line!
            //To be thread-safe we lock the object
            lock (locker)
            {
                formatter.Serialize(fs, objectToSerialize);
            }
            return fs.ToArray();
        }
        catch (SerializationException se)
        {
            throw;
        }
        finally
        {
            fs.Close();
        }
    }
}

With some unit test everything is fine, but running some stress-test show us that in 30% of case, the second update is rejected because the comparaison of the checksum sent with the one generated from the data in the database is failing.
I checked and I'm almost sure there is no inner-update between the two others.
I'm wondering, is the hash algorithm related to the SHA256Managed class related to the mac adresse of the system datetime ?
It may cause the issue because we are load-balanced.
","","51","<c#><.net><sha256>","0","","0","2018-09-11 14:23:36","","6","","","","","2018-09-11 14:23:36",""
"53799024","Standalone sha256 and ripemd160 hash implementations","I've been looking for standalone header-only sha256 and ripemd160 hash functions, preferably MIT licence, but GPL and others are fine too.
I found pico256, header only, I can integrate into a project.  But I can't find both hash functions I need.  I am not sure if I can just rip the bits out I want from OpenSSL, it's too big and complex.
If I can find a reasonable description of sha256 and ripemd160, I might have a go at implementing them myself.
Until then, does anyone know of either
a) standalone sha256 and ripemd160 C or C++ code I can compile into a project, or
b) a small library I can static link into a project?
I'm not sure how to do that with OpenSSL; I'm on Windows 10 and it always seems to want a DLL it generates for shared libraries.  Maybe I'm just not building correctly for static linking without DLLs.
Thank you for any pointers or tips.
","","50","<hash><sha256><sha><ripemd>","0","","0","2018-12-16 02:44:48","","1","","","","","2018-12-16 02:44:48",""
"53905249","SHA-256 Execution time is less than HmacSHA256 in java","I want to compare sha256 and ""Hmac with sha256"" execution time.


 public static void main(String[] args) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        // TODO code application logic here
     byte[] data = {0,3,0,6,0,0,8,0,9,0,0,8,0,0,5,0}; 
   
     MessageDigest md = MessageDigest.getInstance(""SHA-256"");

     long SHaStart = System.nanoTime();

    md.digest(data);
  
    long SHaTime = System.nanoTime() - SHaStart;
    System.out.println(""SHaTime:""+SHaTime);
}





public static void main(String[] args) throws NoSuchAlgorithmException, UnsupportedEncodingException, InvalidKeyException {
        // TODO code application logic here

         byte[] keyBytes   = new byte[]{0,1,2,3,4,5,6,7,8 ,9,10,11,12,13,14,15};
String algorithm  = ""RawBytes"";
SecretKeySpec secretKey = new SecretKeySpec(keyBytes, algorithm);
        
        
javax.crypto.Mac mac = javax.crypto.Mac.getInstance(""HmacSHA256"");
mac.init(secretKey);
byte[] data = {0,3,0,6,0,0,8,0,9,0,0,8,0,0,5,0};

long macStart = System.nanoTime();
 mac.doFinal(data);

long MAcTime = System.nanoTime() - macStart;
System.out.println(""macTime:""+MAcTime);
    }



the result is: SHaTime:489589 and macTime:180070,
as I know caculating sha256 is a part of caculating Hmac; so it should take less time. can any one help me with it please?
","","50","<java><sha256><jce><message-authentication-code>","0","","0","2018-12-23 16:39:18","","2","","2630326","","2018-12-23 16:39:18","2018-12-23 16:31:12",""
"57825076","How to verify HMAC in HAProxy","Is it possible to check HMAC validity in HAProxy? Ideally I'd like to set an acl if the HMAC is valid so I can use this in rules.
Our Ubuntu 18.04 build server (running Jenkins) sits behind a firewall with only specific IP ranges white-listed.
We have an HAProxy (1.8) instance receiving all inbound requests and routing to the appropriate backend service.
The problem is SonarCloud have changed their webhooks from a defined set of IP addresses to using HMAC to validate authenticity. This means the webhooks are blocked by the firewall unless we open it to all internet traffic.
https://sonarcloud.io/documentation/project-administration/webhooks/#securing-your-webhooks
If we can congifure HAProxy to validate the HMAC then we can open the server to all traffic & use HAProxy to validate these requests (as well as other existing IP whitelisted ranges).
","HAProxy doesn't do HMAC natively, but it can be done using  HAProxy's Lua integration.
One approach would be to find a Lua library that can do the flavor of HMAC that you need, and then write an HAProxy converter in Lua to take the appropriate inputs and do the calculation of the digest for comparison.
I implemented something similar, once, using HAProxy 1.6 with Lua 5.x where the client sent a URL signed using HMAC-SHA1, and the proxy successfully checked it for validity.
Unfortunately, I no longer have access to that code, but I wrote this HAProxy converter to do utf-8-aware URL-escaping (percent encoding) in Lua... I mention it here because it's a complete, working example of one way to extend HAProxy functionality using Lua, including the Lua code and HAProxy configuration needed to use it, so it might help you work toward a solution.
","50","<haproxy><sha256><hmac><sonarcloud>","1","1","2","2019-10-09 12:06:11","58303784","0","1","","","","2019-09-06 15:44:29",""
"57825076","How to verify HMAC in HAProxy","Is it possible to check HMAC validity in HAProxy? Ideally I'd like to set an acl if the HMAC is valid so I can use this in rules.
Our Ubuntu 18.04 build server (running Jenkins) sits behind a firewall with only specific IP ranges white-listed.
We have an HAProxy (1.8) instance receiving all inbound requests and routing to the appropriate backend service.
The problem is SonarCloud have changed their webhooks from a defined set of IP addresses to using HMAC to validate authenticity. This means the webhooks are blocked by the firewall unless we open it to all internet traffic.
https://sonarcloud.io/documentation/project-administration/webhooks/#securing-your-webhooks
If we can congifure HAProxy to validate the HMAC then we can open the server to all traffic & use HAProxy to validate these requests (as well as other existing IP whitelisted ranges).
","Thanks to Michael for the pointer to HAProxy/Lua integration. My solution noted here for reference.
Created the following Lua script (hmac_validate.lua):
hmac = require('openssl.hmac')

local function tohex(s)
    return (string.gsub(s, ""."", function (c)
        return string.format(""%.2x"", string.byte(c))
    end))
end -- tohex

function validate_sonar_hmac(txn, hmac_header_key, hmac_secret)
    local payload = txn.req:dup() -- take a copy of the request content
    local body = string.sub(payload,string.find(payload,""\r\n\r\n"")+4) -- strip off the headers
    local signature = txn.sf:req_fhdr(hmac_header_key) -- get the HMAC signature sent on the request

    -- calculate hmac from body & secret
    local sc_hmac = hmac.new(hmac_secret, ""sha256"")
    local calculated_signature = tohex(sc_hmac:final(body))

    local signatures_match = calculated_signature == signature
    if not signatures_match then
        core.Alert(""Sonar Cloud HMAC signature mismatch - received '""..signature..""' but calculated '""..calculated_signature..""'"")
    end

    txn:set_var(""req.sonar_request_valid"", signatures_match)
end;

core.register_action(""validate-sonar-hmac"", {""http-req""}, validate_sonar_hmac, 2)

HA Proxy config changed to add these lines:
global
    lua-load /etc/haproxy/hmac_validate.lua

frontend
    acl sonarcloud hdr(X-Sonar-Webhook-HMAC-SHA256) -m found
    http-request lua.validate-sonar-hmac X-Sonar-Webhook-HMAC-SHA256 {{ sonarcloud_hmac_secret }} if sonarcloud
    http-request deny if sonarcloud !{ var(req.sonar_request_valid) -m bool }

","50","<haproxy><sha256><hmac><sonarcloud>","1","1","2","2019-10-09 12:06:11","58303784","0","1","","","","2019-09-06 15:44:29",""
"56570557","Is it okay to have a DynamoDB table with a SHA256 Key?","I'm creating a User Table on DynamoDB, and I wanted to set the primary key as a sha256 hash string of the user's email address.
Is it a good idea to keep a SHA256 value as a primary key in a DynamoDB table? Would this be better for lookups or worse?
","The idea is that the primary key uniquely identifies each item in a DynamoDB table, 
Which can be simple (a partition key only) or composite (a partition key combined with a sort key).
SHA-256 generates an almost-unique 256-bit (32-byte) signature for a text.
An alternative is using UUID V1 for being used as Primary keys,
Here's an interesting content on the use of UUID -
https://www.sohamkamani.com/blog/2016/10/05/uuid1-vs-uuid4/
Best Practices for Designing and Using Partition Keys Effectively -
https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/bp-partition-key-design.html
","50","<nosql><amazon-dynamodb><sha256>","0","0","1","2019-06-13 03:02:51","","0","","","","","2019-06-12 21:24:35",""
"54474061","How to encrypt user passwords without symfony security","I am using Symfony 4.0. I want to encrypt my user passwords with sha256 when they are registered. I don't want to use Symfony security but if there is no other way I will use it.
I tried with md5 and worked but with sha256 throws me an 
exception.
Warning: Use of undefined constant sha256 - assumed 'sha256' (this will 
throw an Error in a future version of PHP)

That's my controller.  
 public function register(Request $request)
{
    $user = new User();
    $form = $this->createForm(UserType::class, $user);

    $form->handleRequest($request);
    if ($form->isSubmitted() && $form->isValid()) {
        $user = $form->getData();
        $entityManager = $this->getDoctrine()->getManager();
        //$user->setPassword(hash(sha256,$user->getPassword()));
        $user->setPassword(md5($user->getPassword()));
        $entityManager->persist($user);
        $entityManager->flush();
        $flashbag = $this->get('session')->getFlashBag();
        $flashbag->add(""SuccessfullRegister"", ""You successfully registered in our site!"");
        return $this->redirectToRoute('EventsAndPeople');
    }
    return $this->render('home/RegisterForm.html.twig', array(
        'form' => $form->createView(),
    ));
}

For some reason, md5 works but sha256 doesn't. 
","sha256 is not a constant, you have to supply this as a string. Change this line:
$user->setPassword(hash(sha256, $user->getPassword()));

to
$user->setPassword(hash(""sha256"", $user->getPassword()));

Note that i added quotation marks aroud sha256.
","50","<php><symfony><controller><sha256>","-1","2","1","2019-02-01 07:51:30","54475111","2","","9268638","","2019-02-01 07:18:56","2019-02-01 06:30:15",""
"55283403","Get matching checksums between Java and C#","I am porting a method that creates a checksum for a file (base64 encoded) from a C# application to Java.  In C#, this is the method:
public static string GetChecksum(byte[] bytes)
{
    using (var stream = new MemoryStream(bytes))
    {
      var sha = new SHA256Managed();
      byte[] checksum = sha.ComputeHash(stream);
      return BitConverter.ToString(checksum).Replace(""-"", String.Empty);
    }
}

Here is what I have in Java so far, but it's definitely not matching the value returned from C#:
private static String getCheckSum(String base64Data) throws Exception {
        MessageDigest md = MessageDigest.getInstance(""SHA-256"");
        md.update(base64Data.getBytes(""UTF-8""));
        byte[] enc = md.digest();

        StringBuilder sb = new StringBuilder();
        for (byte b : enc) {
            sb.append(String.format(""%02x"", b));
        }

        return sb.toString().replace(""-"", """").toUpperCase();
    }

I've tried not having the charset in the getBytes() method, I've tried with the charset US-ASCII.
This stuff is not in my wheelhouse and I'm not sure how to proceed.  Any help is appreciated.
","You can use Guava library to compute hash.
String sha256hex = Hashing.sha256()
  .hashString(originalString, StandardCharsets.UTF_8)
  .toString();

Apache commons codec also has library to compute hash.
String sha256hex = DigestUtils.sha256Hex(originalString);

","49","<java><c#><checksum><sha256>","1","0","2","2019-03-21 15:05:08","55283493","5","","","","","2019-03-21 15:00:57",""
"55283403","Get matching checksums between Java and C#","I am porting a method that creates a checksum for a file (base64 encoded) from a C# application to Java.  In C#, this is the method:
public static string GetChecksum(byte[] bytes)
{
    using (var stream = new MemoryStream(bytes))
    {
      var sha = new SHA256Managed();
      byte[] checksum = sha.ComputeHash(stream);
      return BitConverter.ToString(checksum).Replace(""-"", String.Empty);
    }
}

Here is what I have in Java so far, but it's definitely not matching the value returned from C#:
private static String getCheckSum(String base64Data) throws Exception {
        MessageDigest md = MessageDigest.getInstance(""SHA-256"");
        md.update(base64Data.getBytes(""UTF-8""));
        byte[] enc = md.digest();

        StringBuilder sb = new StringBuilder();
        for (byte b : enc) {
            sb.append(String.format(""%02x"", b));
        }

        return sb.toString().replace(""-"", """").toUpperCase();
    }

I've tried not having the charset in the getBytes() method, I've tried with the charset US-ASCII.
This stuff is not in my wheelhouse and I'm not sure how to proceed.  Any help is appreciated.
","In Java to decode Base64 String you have this (since Java8) : 
byte[] decodedBytes = Base64.getDecoder().decode(encodedString);
String decodedString = new String(decodedBytes);

from : https://www.baeldung.com/java-base64-encode-and-decode
","49","<java><c#><checksum><sha256>","1","1","2","2019-03-21 15:05:08","55283493","5","","","","","2019-03-21 15:00:57",""
"52771457","Hashing different arrays of JSON objects get the same hash value for everyone","I'm trying to hash an array of JSON objects but for some reason the generated hasd doesn't change in some circumstances.
These examples were tested in nodejs by using the sha256 hashing algorithm package.
arr1 = [{a: 1}];
sha(arr1);
'6e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d'

arr2 = [{a: 1, b:2}]
sha(arr2);
'6e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d'

arr3 = [{a: 1111111111111}];
sha(arr3);
'6e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d'

As yo can see all arrays has the same hash generated value even when they has different properties.
arr4 = [{a: 1}, {b: 2}];
sha(arr4);
'96a296d224f285c67bee93c30f8a309157f0daa35dc5b87e410b78630a09cfc7'

This one has a different hash because it has two objects instead of only one.
So my question is about to understand what is wrong with the first three arrays if I need to get a different hash of each one.
","Your sha() method probably expects a String and will thus typecast your objects to String:


arr1 = [{a: 1}];
sha(arr1);

arr2 = [{a: 1, b:2}]
sha(arr2);

arr3 = [{a: 1111111111111}];
sha(arr3);

arr4 = [{a: 1}, {b: 2}];
sha(arr4);

function sha(v) {
  console.log(v.toString());
}



So if you want an hash from these objects, you'd have to convert these to string correctly, e.g by encoding them to JSON strings first.
","49","<javascript><node.js><json><hash><sha256>","0","2","1","2018-10-12 02:55:05","","2","","","","","2018-10-12 02:45:59",""
"51671482","Unexpectedly nil hashing a password","I'm trying to hash a password with SHA256 method: 
class CryptoHandler {

    static func sha256(_ str: String) -> String? {
        let data = str.data(using: String.Encoding.utf8)
        let shaData = sha256(data!)
        let rc = String(data: shaData, encoding: String.Encoding.utf8) as String?
        return rc
    }

     static func sha256(_ data: Data) -> Data { var res = [UInt8](repeating: 0, count: Int(CC_SHA256_DIGEST_LENGTH)); data.withUnsafeBytes { _ = CC_SHA256($0, CC_LONG(data.count), &res) }; return Data(bytes: res) }


    static func getHashedPassword (pwd: String) -> String{
        let hash = sha256(pwd)
        return hash!
    }
}

When I try to execute getHashedPassword (""0123456789"") I have the following error in return hash! line:

Thread 1: Fatal error: Unexpectedly found nil while unwrapping an
  Optional value

Why this happens? How I can solve it?
","let rc = String(data: shaData, encoding: String.Encoding.utf8) as String?

will return nil value and you are forcing to compiler a value using return hash! Exclamation mark at the end of hash constant in getHashedPassword method.
You can fix it by modifying getHashedPassword method by accepting an optional value
ex: 
static func getHashedPassword (pwd: String) -> String? 
{
   let hash = sha256(pwd)
   return hash 
} 

","49","<swift><sha256>","-3","0","2","2018-08-03 12:45:14","51672258","7","","","","","2018-08-03 11:20:20",""
"51671482","Unexpectedly nil hashing a password","I'm trying to hash a password with SHA256 method: 
class CryptoHandler {

    static func sha256(_ str: String) -> String? {
        let data = str.data(using: String.Encoding.utf8)
        let shaData = sha256(data!)
        let rc = String(data: shaData, encoding: String.Encoding.utf8) as String?
        return rc
    }

     static func sha256(_ data: Data) -> Data { var res = [UInt8](repeating: 0, count: Int(CC_SHA256_DIGEST_LENGTH)); data.withUnsafeBytes { _ = CC_SHA256($0, CC_LONG(data.count), &res) }; return Data(bytes: res) }


    static func getHashedPassword (pwd: String) -> String{
        let hash = sha256(pwd)
        return hash!
    }
}

When I try to execute getHashedPassword (""0123456789"") I have the following error in return hash! line:

Thread 1: Fatal error: Unexpectedly found nil while unwrapping an
  Optional value

Why this happens? How I can solve it?
","The crash occurs because you cannot create a String from encrypted Data. You have to use base64 or hex representation.
This code creates a hex encoded string and doesn't use optionals at all.
class CryptoHandler {

    static func sha256(_ str: String) -> String {
        let data = Data(str.utf8)
        let shaData = sha256(data)
        return shaData.hexString
    }

    static func sha256(_ data: Data) -> Data {
        var res = [UInt8](repeating: 0, count: Int(CC_SHA256_DIGEST_LENGTH));
        data.withUnsafeBytes { _ = CC_SHA256($0, CC_LONG(data.count), &res) };
        return Data(bytes: res)
    }

    static func getHashedPassword (pwd: String) -> String{
        let hash = sha256(pwd)
        return hash
    }
}

extension Data {
    var hexString : String {
        return self.map{ String(format:""%02x"", $0) }.joined()
    }
}

CryptoHandler.getHashedPassword(pwd:""0123456789"")

","49","<swift><sha256>","-3","1","2","2018-08-03 12:45:14","51672258","7","","","","","2018-08-03 11:20:20",""
"48087146","Xcode iOS password get AF 'posted' with ""some"" hash / type of encryption - what kind?","I'm testing an app not yet published. I have a client side register/log-in, using Alamofire to post and then retrieve and parse JSON. Unless Alamofire has ""blackboxed"" some type of hash, I am not aware of having coded any kind of hash anywhere, yet.
When I went to look into why the test passwords (passed via SSL, HTTPS, and without any effort to encrypt, yet) were showing up on the server side looking like the result of a hash, I compared that result to a deliberate server side Sha256 hash (done on the raw, plain text password matching the original that got passed from the app). I am seeing this:
""ccc"" ---->  Sha256 hash = 64daa44ad493ff28a96effab6e77f1732a3d97d83241581b37dbd70a7a4900fe
""ccc"" ----> ""simple iOS post"" (via Alamofire) = 9df62e693988eb4e1e1444ece0578579

As you can see, the values are very different, and this means unless I know what happened on the way over, I cannot authenticate anyone on the server side, nor can I use any server side password reset functions, because I have no idea what kind of hash was used.
Can anyone help me know what happened to hash the password?
Here's the simple Alamofire-based code doing the post (Xcode 9, Swift 4):
//creating parameters for the post request
let parameters: Parameters=[
    ""username"":textFieldUserName.text!,
    ""password"":textFieldPassword.text!,
    ""name"":textFieldName.text!,
    ""email"":textFieldEmail.text!,
    ""phone"":textFieldPhone.text!,
    ""user_type"":String(user_type),
    ""user_privileges"":String(user_privileges)
]

print(""Post Contents ('parameters') = \(parameters)"")

//Sending http post request
Alamofire.request(URL_USER_REGISTER, method: .post, parameters: parameters).responseJSON
    {
        response in
        //printing response
        print(response)

        //getting the json value from the server
        if let result = response.result.value {

            //converting it as NSDictionary
            let jsonData = result as! NSDictionary
        }
    }

","Well, I feel sheepish. I found a hash being applied in the PHP on the server side. 
md5($pass);

No need to bother with this one. Now wish I had not even posted it. But, maybe it will help someone.
","49","<post><alamofire><swift4><xcode9><sha256>","0","0","1","2018-01-04 03:23:40","","0","","6390798","","2018-01-04 03:23:40","2018-01-04 00:37:57",""
"56988544","How to correct my PHP code to get the same hash key as C# code","I want my PHP code to do the same as C# code with 
SHA2 256
c# Code
string HashSHA2(string input)
{
   SHA256 sha256Hash = SHA256.Create();
   byte[] hash = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(input));
   return string.Join("""", hash.Select(b => b.ToString(""x2"")).ToArray());
}

and this is my PHP Code:
/**
 * @param $input
 * @return string
 */
function HashSHA2($input)
{
    $utfInput = utf8_encode($input);
    $hash = hash_hmac('sha256', $utfInput, true);

    $byte_array = unpack('H*', $hash);
    $e = '';
    foreach ($byte_array as $element)
    {
        $e .= hex2bin(md5($element));
    }
    $returned = base64_encode($e);
    return $returned;
}

So please can anyone help me as I'm not good at .NET
running PHP 5.6
the Request Object passed as an input to the hash is:
V4hm4EGKcvSp+/5ItCHFM/HmK1e9stgrVlb6miR8Na55iU5/Xr5OBOt5bmLybXjzkWWZOmbkKk+3SNGNyCRqyzjmdWdTJE+IV4Dl82mLQVJ/tbtPCHnkxJvHofWZNqp8DbZMKLvY/jh8oCWhhRJG9VOgNut40UEpjd9V8kvj+fw22c+gdLFx6dwCR0Don6dyf8n62MKLc/S79KTYmKswNYPkF9B5ihTh3uh98stDJdjLq0fPkqI7Mm7h3J4v64GnMJjzlZPE7y0qK809t76THcWoeSpRCG9pGm6sCwk3vMkqcdKifdGWpFEQXENeUhUuhc6QDQk90Agx3thAzF8WdiHolW5BRPIkgzjKm6DkkLhSwPv+zQBqDRWaNqLbOWqR7/oYGH5wq/lHI4uNK8wgS+W9RWTwLNpxeu4HmF+2T9d2RJpwppFWbNEVLHDzkar0e/Jthd9rmjDUWXPrutRfmfYRF1dOv6dGetubJfGSkT3jIlm8r1HQigmR1j+qvciKw6vR5516SeSmhZgwDVxLLEQk7B/ktjqKCD6XpqSREkERbPVZ+kAtqhtTjwyEFns6MvhkbAAgldzHSaBlIUllSC1XLKE7BUK+nrkVxhLgFJdEzw+1SYXbESMYoKw8jzTG1z8YFZ4tFr2lQR10iR+0NQcnLuZqCtLw1kD8gmm34/lIkBtuSQejR6vOAlmU4esHQ+dAwh9NWEy2ZezC6XoNimS6Awht8tYkHakt2501Tuj1Egi6ReEsUerqk/d7SF/TzWADttJSEAVD9lmBebBkq7Rhi38dh6T9mt4Nr3RzGslkWdTrTsecgp8SaT799ohGP+Ld/ICzTGr/5Lf8dNrD/PHbRUVPJr5M04XyScumAIG5KiS2XckPF9wNzIWNwJ6e8o6Rw94rPJP1NFBLa0eq1bLlWnu39bjvi0cs1PJtYeSFdJpUU/t+GW19hmSNFQRZiz8b9SpJ+GNrVuZyNVwl+FVVHU2KbirDRMtu8gB9PM2Mkaiv6F7dsaciXkvUZIG8iJnOZw5FTwavA0gTSAL/ijNJxi89EVVf2a3Isxmkclmg8rXcLhRtW5gzUFEuwanj/8xTM6FEn8oD9KEbtqfL1wbbbEySJDgzmiFZ0XQRu1Jp53psCWJbnAHwnztIDCD3ejbw+iSuTzN7CFTsgV7BpkBfeCNZDbITVqc4rJU3EBGV+FMxl15Ws55b1jNYBhF0ZYVuhayKArl84gjrnCqa2wIZ24DiNd2oD4bXIEAQLfcxQLDHrR2x93LmR6fwLsGbx3d2k7vDJLHEtzJdYypmXksev/uPr90j4y6fBH56AFsD/e4I1L41nAw+y/umlEX7mUXxXgP7aTDkn6gwBy/g9ExJzMUxcRvExYebJmwfNm1pVEMwpjVfAaXSzx0deC4GwZT6+S1z9bKBPR7isg9O+qo6HanCPjZyMhEqVxVy5/cGbaRzpHaR/pXdOMQzVv7x9dTKbxAj6lymY2gjyw493dvScUXmB6Q7VmmQLdd+NzaG2zmHFakzSnNvzEkOgzzzRsRXzjG65uPZMiL5VjCB0++m5hbiqLelcuJqk5wPnFRJKRvN2PVVCAMat1XBQlUJMRK3X80dJU+Edky6GfKS1rcF0C+5JIui0T5ltrimCQsHijtS2YLFOhthLUM9Bg7jyie86Od+eYg1vgoMxwiigtJf4vO3q17qbYA5MfxJVtpxyX0dx3Q+GwLeVJUO+EUlWwmZ0d8jgNIESbZICf4KFjM9rSNLTIrAHV+S507HI17O4cDKWApZOwtZqcgoNrhXtGJ7wGXIw8OUPVSTJRzUfWdgz2gcYuoJPcL32qKPrPbQtx1ZZi4B60BwFDTkXg6RZbu0/PtH7GKQ/giBhEJlVPeqLZSfdvl35Z7GCsCpNG0UgVZUjYcy1fGaCPgnaK5m64A7QzZPMmYanydrI61GFfT2pDzyWFH/wk6ATOfIhdOieAZ1nf0O8hQ7BRDRS/yX9n8/VCyOO/mppQekT0joJgDpxTWnhftu9Mq3khSuFLvInG4DqOHvYtZwJLyvuz/uR3yXC8gzBJCvvg2pbTv1JQ==

and the hash result is:
ac9968952f3e108ac2d0ed6da6dc5876fb18140cc40340c1a50e19d64708cfac

","","49","<c#><php><hash><sha256>","0","","0","2019-07-11 12:48:47","","6","","1880412","","2019-07-11 12:48:47","2019-07-11 11:51:37",""
"53222094","Log-In page with hashed password","I am quite new in Android development and hereby I would like to ask you for some help. Basically I have created the text fields of a Android Log-in page (username field & password field) and it works well without hashing a password. But now I want to use SHA256. My knowledge is still not enough to put those two together. So as follows:
public static String SHA256 (String text) throws NoSuchAlgorithmException {

    MessageDigest md = MessageDigest.getInstance(""SHA-256"");

    md.update(text.getBytes());
    byte[] digest = md.digest();

    String hashedpass = Base64.encodeToString(digest, Base64.DEFAULT);
}


private JSONObject buidJsonObject() throws JSONException {

    JSONObject jsonObject = new JSONObject();
    jsonObject.accumulate(""Username"", etName.getText().toString()); // <- here I get directly what I have typed in
    jsonObject.accumulate(""Password"", hashedpass); // <- here I want to have it hashed with SHA256. 

    return jsonObject;
}

Could you help me with these? Thank you
","","49","<java><android><sha256>","0","","0","2018-11-09 10:13:55","","8","","2649012","","2018-11-09 10:13:55","2018-11-09 08:22:01",""
"58507800","How to Windows Forms decrypt password SQL Entity Framework","I have the following question, I need to make a project in windows forms that consults data of an SQL database that was generated by Entity Framework, so I am trying to compare passwords between the one that I enter by WF with the one I have in the database, the The question is that EF encrypts the password data and therefore if I have to compare it then, I need to decrypt it. This is an assumption, there is no other way to compare this data. And this is the code I have
public partial class MainWindow : Window
{
    private Models.SecurityController _security;
    public MainWindow()
    {
        InitializeComponent();
        _security = new Models.SecurityController();
    }

    private void Button_Click(object sender, RoutedEventArgs e)
    {
        var email = EmailInput.Text;
        var pass = PassInput.Password;
        email = email.Replace("" "", """");
        if (email == """" )
        {
            EmailInput.Focus();
            Errorlbl.Content = ""Por favor utiliza un mail valido"";
        }
        else if (pass == """")
        {
            PassInput.Focus();
            Errorlbl.Content = ""Por favor utiliza una contraseña"";
        }
        else if (email != null && pass != null)
        {
            using (DBEnt db = new DBEnt())
            {
                var item = db.AspNetUsers.Where(u => u.Email.Equals(email)).FirstOrDefault();

                if (item == null)
                {
                    Errorlbl.Content = ""Usuario mail invalido"";
                }
                else {
                    Errorlbl.Content = ""Usuario valido"";
                }

                var query =
                db.AspNetUsers.Where(u => u.Email.Equals(email)).FirstOrDefault();
                var hashedpassword = query.PasswordHash;
                var unhashed = _security.Decrypt(pass, hashedpassword);
            }
        }
    }
}

up to this point hashedpassword returns menull
And all this is the SecurityController class
class SecurityController
{
    public string Encrypt(string key, string data)
    {
        string encData = null;
        byte[][] keys = GetHashKeys(key);

        try
        {
            encData = EncryptStringToBytes_Aes(data, keys[0], keys[1]);
        }
        catch (CryptographicException) { }
        catch (ArgumentNullException) { }

        return encData;
    }

    public string Decrypt(string key, string data)
    {
        string decData = null;
        byte[][] keys = GetHashKeys(key);

        try
        {
            decData = DecryptStringFromBytes_Aes(data, keys[0], keys[1]);
        }
        catch (CryptographicException) { }
        catch (ArgumentNullException) { }

        return decData;
    }

    private byte[][] GetHashKeys(string key)
    {
        byte[][] result = new byte[2][];
        Encoding enc = Encoding.UTF8;

        SHA256 sha2 = new SHA256CryptoServiceProvider();

        byte[] rawKey = enc.GetBytes(key);
        byte[] rawIV = enc.GetBytes(key);

        byte[] hashKey = sha2.ComputeHash(rawKey);
        byte[] hashIV = sha2.ComputeHash(rawIV);

        Array.Resize(ref hashIV, 16);

        result[0] = hashKey;
        result[1] = hashIV;

        return result;
    }

    //source: https://msdn.microsoft.com/de-de/library/system.security.cryptography.aes(v=vs.110).aspx
    private static string EncryptStringToBytes_Aes(string plainText, byte[] Key, byte[] IV)
    {
        if (plainText == null || plainText.Length <= 0)
            throw new ArgumentNullException(""plainText"");
        if (Key == null || Key.Length <= 0)
            throw new ArgumentNullException(""Key"");
        if (IV == null || IV.Length <= 0)
            throw new ArgumentNullException(""IV"");

        byte[] encrypted;

        using (AesManaged aesAlg = new AesManaged())
        {
            aesAlg.Key = Key;
            aesAlg.IV = IV;

            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);

            using (MemoryStream msEncrypt = new MemoryStream())
            {
                using (CryptoStream csEncrypt =
                        new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                {
                    using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                    {
                        swEncrypt.Write(plainText);
                    }
                    encrypted = msEncrypt.ToArray();
                }
            }
        }
        return Convert.ToBase64String(encrypted);
    }

    //source: https://msdn.microsoft.com/de-de/library/system.security.cryptography.aes(v=vs.110).aspx
    private static string DecryptStringFromBytes_Aes(string cipherTextString, byte[] Key, byte[] IV)
    {
        byte[] cipherText = Convert.FromBase64String(cipherTextString);

        if (cipherText == null || cipherText.Length <= 0)
            throw new ArgumentNullException(""cipherText"");
        if (Key == null || Key.Length <= 0)
            throw new ArgumentNullException(""Key"");
        if (IV == null || IV.Length <= 0)
            throw new ArgumentNullException(""IV"");

        string plaintext = null;

        using (Aes aesAlg = Aes.Create())
        {
            aesAlg.Key = Key;
            aesAlg.IV = IV;

            ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);

            using (MemoryStream msDecrypt = new MemoryStream(cipherText))
            {
                using (CryptoStream csDecrypt =
                        new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                {
                    using (StreamReader srDecrypt = new StreamReader(csDecrypt))
                    {
                        plaintext = srDecrypt.ReadToEnd();
                    }
                }
            }
        }
        return plaintext;
    }
}

Maybe I'm getting very complicated, does anyone know how I can do this better or if I'm doing well?
","","47","<c#><sql><entity-framework><sha256>","0","","0","2019-10-22 15:37:37","","1","","","","","2019-10-22 15:37:37",""
"57003235","Can anyone translate this function from python to javascript?","I have a script in python that takes a salt and returns proof using
sha256.
I do not know very much about javascript, or about any of the libraries. 
import sys
from hashlib import sha256

def generate_proof(salt):
    secret_salt =  SECRET + salt
    hexadecimal = secret_salt.decode('hex')
    proof = sha256(hexadecimal).hexdigest()
    return proof

Could someone please translate or explain how I can translate this method into javascript?
I think my biggest problem is finding the sha256 equivalent library in JS.
","//  node.js
const filename = process.argv[2];
const crypto = require('crypto');
const fs = require('fs');

const hash = crypto.createHash('sha256');

const input = fs.createReadStream(filename);
input.on('readable', () => {
  // Only one element is going to be produced by the
  // hash stream.
  const data = input.read();
  if (data)
    hash.update(data);
  else {
    console.log(`${hash.digest('hex')} ${filename}`);
  }
});

","47","<javascript><python-2.7><authentication><sha256>","-4","0","1","2019-07-12 08:53:26","57003501","1","1","","","","2019-07-12 08:37:56","2019-07-12 09:06:03"
"56599332","Converting hex to ByteString in Swift","We are trying to connect to Periodic's API using Swift 5. In order to do that, part of the process is encoding a concatenated string in HMAC SHA-256. In our code, we accomplish this by the following code:
let hmac = premac.digest(.sha256, key: ""API KEY"")

Which is using the SwiftCrypto library to accomplish this. According to Periodic's CTO, we are getting close but the issue is that this function's output is giving us a HEX version when we really need the bytestring level. 
We are unsure how to proceed. 
","","46","<swift><sha256><hmac>","1","","0","2019-06-14 14:08:03","","1","","","","","2019-06-14 13:35:39",""
"58384610","How to reproduce an SHA256-based HMAC from R in Python 3","I am trying to reproduce salted sha256 output from R code in Python:
library(openssl)
res = sha256(""test@gmail.com"", key = ""111"")  
res
# [1] ""172f052058445afd9fe3afce05bfec573b5bb4c659bfd4cfc69a59d1597a0031""

import hashlib, binascii
dk = hashlib.pbkdf2_hmac(='sha256', b'test@gmail.com', b'111', 0)
binascii.hexlify(dk)
# b'494c86307ffb9e9e31c4ec8782af6498e91272c011a316c242d9164d765be257'

How can I make output in python match R?
","I can't quite reproduce your issue. The following keys match
In R:
library(openssl)
sha256(""test@gmail.com"")
#[1] ""87924606b4131a8aceeeae8868531fbb9712aaa07a5d3a756b26ce0f5d6ca674""

In Python3:
import hashlib
print(hashlib.sha256(b""test@gmail.com"").hexdigest())
#87924606b4131a8aceeeae8868531fbb9712aaa07a5d3a756b26ce0f5d6ca674


Update in response to your comment
The first thing to notice is that in R sha256 with a non-NULL key argument will calculate the hash-based message authentication code (HMAC). From ?sha256:

All hash functions either calculate a hash-digest for ‘key ==
       NULL’ or HMAC (hashed message authentication code) when ‘key’ is
       not ‘NULL’.

So if you want to use a key you will need to compare the resulting HMAC in R with the SHA2556-based HMAC in Python.
In R:
library(openssl)
sha256(""test@gmail.com"", key = ""111"")
#[1] ""172f052058445afd9fe3afce05bfec573b5bb4c659bfd4cfc69a59d1597a0031""

In Python 3:
import hmac
import hashlib
print(hmac.new(b""111"", b""test@gmail.com"", hashlib.sha256).hexdigest())
#172f052058445afd9fe3afce05bfec573b5bb4c659bfd4cfc69a59d1597a0031

","46","<python><r><sha256><hmac><salt>","1","2","1","2019-10-16 16:33:05","58385388","1","","599911","","2019-10-16 16:33:05","2019-10-14 22:05:13",""
"56180627","Trying to convert SHA from javascript to c#","I am trying to verify a seed sent to me from a server. the seed is used to shuffle decks of cards with MersenneTwister. At the end of the game the deck of cards is sent to me from the server, so I can check the deck with the seed.
I know I have the seed correct, but I get a different deck than the one provided by the server after I hash.
I tried all different kinds of text encoding, no combination produces the same deck that I get from the server. I know the SHA they're using is from http://caligatio.github.com/jsSHA/ , mayber there is an error in there somewhere?

// Next, perform the shuffle on a deck of cards and verify the deck is exactly the one that we got.
// 1. Python's random module first hashes the game seed using SHA
// 2. The hash is turned into a sequence of bytes
// 3. The bytes are appended to the seed
// 4. The result is used to seed a Mersenne Twister

// Concat the original seed with the hash of the seed
                var hash_bytes = new Array()
                for( var i = 0; i < game_info_package.game_seed.length; i++ ) {
                    hash_bytes.push(game_info_package.game_seed.charCodeAt(i));
                }

                var hashed_game_seed = (new jsSHA(game_info_package.game_seed, ""ASCII"")).getHash(""SHA-512"", ""HEX"");
                for( var i = 0; i < 128; i += 2 ) {
                    hash_bytes.push(parseInt(hashed_game_seed.substring(i, i+2), 16));
                }

                // Convert the hash_bytes into an array of 32-bit words starting from the right
                var word_array = byte_array_to_words(hash_bytes);

                // Create a MT rng
                var twister = new MersenneTwister();
                twister.init_by_array(word_array, word_array.length);

                // At this point we need to shuffle the deck (it must match the one on the server or else we'll get the wrong answer)
                var check_cards = new Array();
                for( var deck = 0; deck < this.RULESET['number_of_decks']; deck++ ) {
                    check_cards = check_cards.concat(this.STANDARD_CARDS.slice(0));
                }
                shuffle(twister, check_cards)
                check_cards_string = check_cards.join("""");

                // Get the deck out of the deal_hash_source (deck should be part of the game hash)
                var first_close_paren = game_info_package.deal_hash_source.indexOf(')');
                var game_cards        = game_info_package.deal_hash_source.slice(1, first_close_paren);

                // This verifies the deck order hasn't changed
                if( check_cards_string == game_cards ) {//...}

List<byte> hash_bytes = new List<byte>();//all bytes

byte[] seedbytes = System.Text.Encoding.BigEndianUnicode.GetBytes( game_seed );
foreach(byte b in seedbytes){
    hash_bytes.Add(b);
}

//1.  hashes the game seed using SHA
byte[] bytes = System.Text.Encoding.BigEndianUnicode.GetBytes( game_seed );
SHA512 sha = SHA512.Create();
byte[] hashed_ = sha.ComputeHash(bytes);//2. The hash is turned into a sequence of bytes

//append to hash_bytes
foreach(byte b in hashed_){
    hash_bytes.Add(b);
}
//List -> Array
byte[] _bytes = new byte[hash_bytes.Count];
for(int i = 0; i < hash_bytes.Count; i++){
    _bytes[i] = hash_bytes[i];
}

// Convert the hash_bytes into an array of 32-bit words starting from the right
uint[] word_array = byte_array_to_words_fromright(_bytes);

// Create a MT rng
//MersenneTwister.RandomMersenne twister;
RandomMersenne twister = new RandomMersenne();
twister.RandomInitByArray(word_array, word_array.Length);

// At this point we need to shuffle the deck (it must match the one on the server or else we'll get the wrong answer)
string[] check_cards = new string[(STANDARD_CARDS.Length * numberofdecks)];
string deckcheckstring = """";
for( int deck = 0; deck < numberofdecks; deck++ ) {
    for(int i = 0; i<52; i++){
        int cardspace = (deck*52) + i;
        check_cards[cardspace] = STANDARD_CARDS[i];
        deckcheckstring += check_cards[cardspace];
    }
}
//Debug.Log(deckcheckstring);

string[] shuf = shuffle(twister, check_cards);

Both blocks of code should produce the same shuffle
","","46","<javascript><c#><sha256><sha><sha512>","0","","0","2019-05-17 06:18:22","","0","","","","","2019-05-17 06:18:22",""
"57021172","How to Generate Signature in Python 2.7","I need to generate a HmacSHA256 signature using python with the following parameters to the signature:
merchantId = ""testMerchantExample""
apiHost = ""apitest.example.com"" 
apiUrl = ""/v1/example?startDate=2019-07-01&organizationId="" + merchantId  

keyId = ""KeyIdHere""
keyString = ""KeyStringHere""

signatureParams = ""host: ""+apiHost+""\n""
        + ""date: "" + date + ""\n""
        + ""(request-target): get ""+apiUrl+""\n""
        + ""merchant-id: "" + merchantId

These parameters need to then be passed into the function to generate the SHA256 signature.
I dont know how to do this in Python 2.7, I have seen some examples generating signatures etc. But none with these parameters. They use the following python libs:
import hmac
   import hashlib
Any help would be appreciated.
Here is code that I found online, it works and generated the signature correctly yay:
import hmac
import hashlib 
import binascii

def create_sha256_signature(key, message):
    byte_key = binascii.unhexlify(key)
    message = message.encode()
    return hmac.new(byte_key, message, hashlib.sha256).hexdigest().upper()

","","46","<python-2.7><sha256>","0","","0","2019-07-13 18:31:24","","0","","6268313","","2019-07-13 18:31:24","2019-07-13 16:59:06",""
"57902680","how to hash two arguments","Want to hash two strings the below code throws an error that SHA 256 can hash one value only.
Is there any other way to hash two arguments?
sign =hex(hashlib.sha256(secret,param_str))

TypeError: sha256() takes at most 1 argument (2 given)

","There are methods described in https://docs.python.org/2/library/hashlib.html)
Some examples.
Method 1:
import hashlib, binascii
def generate_hash1(secret, param_str): 
      bsecret = secret.encode('utf-8')
      bparam_str = param_str.encode('utf-8')
      dk = hashlib.pbkdf2_hmac('sha256', bsecret, bparam_str, 100000)
      return binascii.hexlify(dk)

Method 2:
import hashlib
def generate_hash2(secret, param_str):
  dk = hashlib.sha256()
  bsecret = secret.encode('utf-8')
  bparam_str = param_str.encode('utf-8')
  dk.update(bsecret)
  dk.update(bparam_str)
  return dk.hexdigest()

Method 3 (equivalent to Method 2)
import hashlib
def generate_hash3(secret, param_str):
  dk = hashlib.sha256()
  s = secret + param_str  # concatenate strings, then hash
  dk.update(s.encode('utf-8'))
  return dk.hexdigest()

Results
print(generate_hash1(""my secret"", ""password"")) #b'8843eb1e289740e6379eed8191497788dd527164beafce1fb09e7f60adb54e1d'
print(generate_hash2(""my secret"", ""password"")) # 45bf5f14029ae0e54807be1ed048bb82d33c2100781b03007f989744961a49a9
print(generate_hash3(""my secret"", ""password"")) # 45bf5f14029ae0e54807be1ed048bb82d33c2100781b03007f989744961a49a9

","46","<python><sha256>","-1","1","1","2019-09-12 10:02:40","57902811","2","","11229126","","2019-09-12 09:22:17","2019-09-12 08:26:37",""
"44372799","file within directory contains entire directory's current sha-256","I want to create a file in my directory, where the file contains the sha256 sum of that directory, including that file, and AFTER the file is created. The difficulty here being that the sha256 of the directory will be affected by updating the file with said sha256. Is this possible?
I can see how this is almost asking the computer to predict the future, but I wonder if there is some recursive algorithm to do this. For example if there is some consistent relation between the checksum of and object, and the checksum of that object with one byte changed.
This is a question of curiosity that came out of this problem: I'm trying to recreate the output of git describe --tags for a repository missing the .git directory (presumably saving this data in the repository).
","This is not possible. There might not even be a solution. To take a simple example: imagine that the value of a SHA256 hash was only 1 bit, instead of 256 bits. Suppose that, if we put the hash 0 into the file, the entire directory hashes to a value of 1; and if we put 1 into the file, the entire directory hashes to a value of 0. Then there is no solution. The same thing can happen with the full 256-bits hash. I'm not sure of the likelyhood though.
If there is a solution, you can eventually find it with an exhaustive search of all possible checksums. By the very nature of secure hashes, it won't get significantly faster than that. But this will probably run until the Sun becomes a red giant and swallows the Earth.
To improve your actual situation (beware the XY problem), you can try instructing your build system to stick the result of git rev-parse HEAD somewhere in a source file before building, or have your program execute this at runtime.
","45","<git><githooks><sha256>","0","0","1","2017-06-16 10:31:40","","2","","5986907","","2017-06-16 09:18:16","2017-06-05 15:53:49",""
"49359953","amazon complians I am not using correct algorithm to sign requests I am","so I might need to add the string ""AWS4"" I am using angular and python. 
on the python end I calcuate the signature then send it over to the front end to then send the file to aws. I'll just show the signature and payload code: 
signature = base64.b64encode(hmac.new(aws_secret, policy, hashlib.sha256).digest())
            data = {
                ""policy"" : policy,
                ""signature"": signature,
                ""key"": AWS_UPLOAD_ACCESS_KEY_ID,
                ""file_bucket_path"": upload_start_path,
                ""venuemenuobject"" : serializesamplemenu.data,
                ""startpath"" : upload_start_path,
                ""url"": url
            }
            return Response(data)

then creating the form with the file and sending the request. 
 let fd = new FormData();
              fd.append('acl', 'private');
              fd.append('Content-Type', contenttype);
              fd.append('AWSAccessKeyId',awspolicy.key);
              fd.append('Policy', awspolicy.policy);
              fd.append('key', awspolicy.startpath);
              fd.append('filename', filename);
              fd.append('Signature', awspolicy.signature);
              fd.append('file', content);
              console.log('the formdata object called');
              this.awsservice.uploadtos3(awspolicy.url,fd)
                .subscribe(
                  (req: any)=>{
                    console.log('the data was uploaded');
                    console.log(req);
                  }
                );

and the error: 
The authorization mechanism you have provided is not supported. Please use AWS4-HMAC-SHA256.

according to the docs https://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html 
we need to add the headers to our request. 
So I did that. And yet Still no go. 
samplemenucreateandpolicy(venuepk, payload){

    const url =  samplemenupolicyandcreate + '/' + String(venuepk);
    return this.http.post(url, payload);
  }

  uploadtos3(url, payload, rawheader){
    let headers = new HttpHeaders();
    const authheader = 'AWS4-HMAC-SHA256 Credential=' + String(rawheader.key) + '/' + String(rawheader.date) + '/' + String(rawheader.region) +'/iam/aws4_request, SignedHeaders=content-type;x-amz-date, Signature=' + String(rawheader.signature);
    headers.append('Authorization',authheader);

    return this.http.post(url, payload, {headers: headers});

  }

how do I fix this? 
","You are definitely using Signature Version 2, not V4.
signature = base64.b64encode(hmac.new(aws_secret, policy, hashlib.sha256).digest())

...and here...
fd.append('AWSAccessKeyId',awspolicy.key);

This parameter is X-Amz-Credential, and contains additional information along with the aws-access-key-id.

according to the docs ... we need to add the headers to our request.

You are confusing two different interfaces.
What you are doing is a form POST upload, which does not use the Authorization header.
Review https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-post-example.html.
","45","<python><angular><amazon-s3><sha256>","0","0","1","2018-03-19 18:53:12","49370391","0","","","user9487981","2018-03-19 10:57:05","2018-03-19 09:50:24",""
"54292507","What data is used in the following tr34 asn.1 message for the generation of the signature?","I'm trying to validate the signature at the bottom of this message. I have the public key, but I don't know what part of the data is used. 
-----BEGIN TR34_Sample_UBT_KDH PEM File-----
MIIEPAYJKoZIhvcNAQcCoIIELTCCBCkCAQExDTALBglghkgBZQMEAgEwWwYJKoZI
hvcNAQcBoE4ETDBKMEExCzAJBgNVBAYTAlVTMRUwEwYDVQQKEwxUUjM0IFNhbXBs
ZXMxGzAZBgNVBAMTElRSMzQgU2FtcGxlIENBIEtSRAIFNAAAAAehggHYMIIB1DCB
vQIBATANBgkqhkiG9w0BAQsFADBBMQswCQYDVQQGEwJVUzEVMBMGA1UEChMMVFIz
NCBTYW1wbGVzMRswGQYDVQQDExJUUjM0IFNhbXBsZSBDQSBLREgXDTEwMTEwMjE3
MzMzMFoXDTEwMTIwMjE3MzMzMFowSDAWAgU0AAAACBcNMTAxMTAyMTcyODEzWjAW
AgU0AAAAChcNMTAxMTAyMTczMTQ2WjAWAgU0AAAACxcNMTAxMTAyMTczMzI1WjAN
BgkqhkiG9w0BAQsFAAOCAQEANvBqPIisvPqfjjsIUO7gmpz3tbKRiG5RDTSf5fBc
G9t9nznk6mUIgo8u0+55Y8hYdFJ5XDlGKwYNW5csmnte+JChk8VyJdHIjVbu0dA/
fpp1hw1gTRXgEv/XuFBupLoU57UQGMFtjZ77asXFFWhrE04WsdZ/Hov0PI/JpguW
FK3M6a9pwnqUU9QmNE9rFEUO5YOCFHQeq/f4fxUqkxn62e07SBoRPAM2PSmt0C4w
MTopOvwYe3JSmPsUxdmXlnhaJswZzwfCvJojuPb27hmgB5BPS/Yy3P3n8oJfMS/m
KOPQxxzVC7CO5ATipfARoLWrTyphJ14lAJ2uAGYO/zLWwzGCAdowggHWAgEBMEow
QTELMAkGA1UEBhMCVVMxFTATBgNVBAoTDFRSMzQgU2FtcGxlczEbMBkGA1UEAxMS
VFIzNCBTYW1wbGUgQ0EgS0RIAgU0AAAABjALBglghkgBZQMEAgGgZTAYBgkqhkiG
9w0BCQMxCwYJKoZIhvcNAQcBMBgGCiqGSIb3DQEJGQMxCgQIfeocAIlOJGowLwYJ
KoZIhvcNAQkEMSIEIIeYFo5vfzEY7ehSK2M237Vs/fldtwY8tyMO8AtNZm0aMA0G
CSqGSIb3DQEBAQUABIIBAE80v8n2d8D3kBFwR7HqYM/TMltuf10kfDrB8LYMqLLp
JXOhQctjYBetCTDQ0kK75szZyaapV1cjmowsmfwejK6IrS1qtueiVsjFLmqROECz
QiqSdSZ/iPZ82Brdkwd//jD20n2XYIpdmBUhSL7XD65DPz963KcSYARf9bPkK1wK
FB9ozwsW4YeuT2Rv0QpwCBJEKspvIpKM8D8pJQHT+3cEMGurGVQtvXaG396YuOJs
qg4mLN+92YRSBY61rRrlFxX4ARwtn6a9RuHW8P+dOTYkT9t0msZByYdJrk8V2oyQ
VtM8wqN6incGM24kRrcZvoU5lsEz9brY6Uz/wvC+JB0=
-----END TR34_Sample_UBT_KDH PEM File-----

","","45","<openssl><sha256>","0","","0","2019-01-21 14:53:30","","5","","","","","2019-01-21 14:53:30",""
"39307192","Digest mimatch for sha256","I am trying to encode the string abc using sha256 and below is the output I got. 
ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad

But, if I use the command openssl sha256 -hex on Linux command line, I get the below output for the same string.
edeaaff3f1774ad2888673770c6d64097e391bc362d7d6fb34982ddf0efd18cb

Why is there a difference in the outputs?
Where am I doing wrong?
","","45","<openssl><echo><sha256>","0","","0","2016-09-03 23:35:28","","2","","608639","","2016-09-03 23:35:28","2016-09-03 13:01:02",""
"57122379","sha256 true hsashing returns unknown characters like question marks and squars","I hashed some strings(passwords) using sha256. 
 - when I try hash(""sha256"", $string) everything is good and normal
 - when I try hash(""sha256"", $string, True) I get a string of alphabets and numbers and question marks and and some unknown characters.
i.e string = hello; 
sha256 = 2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824;
sha256(true) = ,�M�_��&�;*Ź�\�B^s3b���$;
why does this happen (true sha256)?
what is the difference between sha256 and true sha256? why are these 2 different?
how can I decrypt my hashed(true sha256) strings?
","SHA-256 is a cryptographic (one-way) hash function, so there is no direct way to decode it.
 The entire purpose of a cryptographic hash function is that you can't undo it.
One thing you can do is a brute-force strategy, where you guess what was hashed, then hash it with the same function and see if it matches. Unless the hashed data is very easy to guess, it could take a long time though.

It should be noted


Sha256 does not encrypt the data/content of your string, it instead generates a fixed size hash, using your input string as a seed.

This being the case - I could feed in the content of an encyclopedia, which would be easilly 100 mb in size of text, but the resulting string would still be 256 bits in size.
","45","<php><sha256>","-1","0","1","2019-07-20 06:52:57","","2","","11797275","","2019-07-20 06:52:57","2019-07-20 06:37:23",""
"46462406","Why does sha256sum not accept its own output under windows?","I want to check files with sha256sum -c file.sha under Windows, using the sha256sum.exe from my git installation.
I'm trying to create the checksum files with sha256sum -b file.exe > file.sha.
But sha256sum is complaining: no properly formatted SHA256 checksum lines found.
Here is the complete procedure with my cscope.exe as an example:
PS C:\Program Files\Git\usr\bin> .\sha256sum.exe -b 'D:\Tools\Cscope\cscope.exe' > 'D:\Tools\Cscope\cscope.sha'
PS C:\Program Files\Git\usr\bin> cat 'D:\Tools\Cscope\cscope.sha'
\3f8c98e1571cd36878a3d2eab33b9859f2d03d79d7dc3f6c52afca957e76526f *D:\\Tools\\Cscope\\cscope.exe
PS C:\Program Files\Git\usr\bin> .\sha256sum.exe -c 'D:\Tools\Cscope\cscope.sha'
/usr/bin/sha256sum: 'D:\Tools\Cscope\cscope.sha': no properly formatted SHA256 checksum lines found
PS C:\Program Files\Git\usr\bin>

Any idea why this does not work?
How should the sha file be formatted to be accepted by sha256sum.exe?
","","45","<windows><git><powershell><sha256>","1","","0","2017-09-28 06:31:52","","8","0","","","","2017-09-28 06:31:52","2017-09-28 08:44:37"
"31760965","How to correctly convert TAG value to the right format so that to Verify HMAC?","I'm working on HMAC generation and verifying to check data integrity. I can correctly generate the MAC value but when sending it through socket to another program for verification, I faced with formatting mismatch. I appreciate your support. Thanks.
unsigned char* MAC(unsigned char* key,unsigned char* message)  
{
    unsigned char* result;
    unsigned int result_len = 32;  
    int i;

    result = (unsigned char*) malloc(sizeof(char) * result_len);
    result = HMAC(EVP_sha256 (), key , strlen (key), message , strlen(message) , NULL, NULL);

return result;
} 

int verifyMAC(unsigned char* key,unsigned char* message, unsigned char* receivedTag)
{
printf(""\n\n ==================== MAC Verification ==================\n\n"");
    unsigned char* newHash; // newly generated hash value
    unsigned int newHash_len = 32;  
    int  i,flag=0;

    newHash = (unsigned char*) malloc(sizeof(char) * newHash_len);
newHash = HMAC(EVP_sha256 (), key , strlen (key), message , strlen(message) , NULL, NULL);

for (i=0; i!=newHash_len; i++)
    {
            if (receivedTag[i]!=newHash[i])
            {
                    printf(""DATA MISMATCH: Found %02X instead of %02X at index %d!\n"", newHash[i], receivedTag[i], i);
                    break;
            }
    }
    if (i==newHash_len)
    {
            printf(""MAC verified!\n"");
    flag = 1;
    } 

return flag;
}

int main(int argc, char *argv[])
{

unsigned char* key = ""1234567890"";
unsigned char* message = (unsigned char*) ""hello world"";
  ....
}

Console result:
Hashed data:  E4  5F  60  72  61  7C  CE  5E  06  A9  5B  E4  81  C4  33  51  02  3D  99  23  35  99  EA  C9  FD  AF  FC  95  81  42  62  9A 
==================== MAC Verification ==================
DATA MISMATCH: Found E4 instead of 65 at index 0!
ERROR: data is modified
","I thought this problem was somewhat interesting so I went through the trouble to recreate the scenario. Maybe this is not even right. But a simple case of what I thought the problem is:
void main(int argc, char *argv[])
{
    //the original hash
    unsigned char newHash[] = {0xE4, 0x5F, 0x60, 0x72, 0x61, 0x7C, 0xCE, 0x5E, 0x06, 0xA9, 0x5B, 0xE4, 0x81, 0xC4, 0x33, 0x51, 
        0x02, 0x3D, 0x99, 0x23, 0x35, 0x99, 0xEA, 0xC9, 0xFD, 0xAF, 0xFC, 0x95, 0x81, 0x42, 0x62, 0x9A};
    //what I think is recieved from the socket
    unsigned char* receivedTag = ""e45f6072617cce5e06a95be481c43351023d99233599eac9fdaffc958142629a"";

    for (int i=0; i!=32; i++)
    {
            if (receivedTag[i]!=newHash[i])
            {
                    printf(""DATA MISMATCH: Found %02X instead of %02X at index %d!\n"", newHash[i], receivedTag[i], i);
                    break;
            }
    }
    return;
}

and the output was
DATA MISMATCH: Found E4 instead of 65 at index 0!

So, I thought the solution would be to just convert the Hex array to string just like it was received from the socket.
Maybe this is not the most elegant of ways to do things. But a solution None the less.
char* hexStringToCharString(unsigned char hash[], int length);
void main(int argc, char *argv[])
{
    //the original hash
    unsigned char newHash[] = {0xE4, 0x5F, 0x60, 0x72, 0x61, 0x7C, 0xCE, 0x5E, 0x06, 0xA9, 0x5B, 0xE4, 0x81, 0xC4, 0x33, 0x51, 
        0x02, 0x3D, 0x99, 0x23, 0x35, 0x99, 0xEA, 0xC9, 0xFD, 0xAF, 0xFC, 0x95, 0x81, 0x42, 0x62, 0x9A};
    //what I think is recieved from the socket
    unsigned char* receivedTag = ""e45f6072617cce5e06a95be481c43351023d99233599eac9fdaffc958142629a"";

    char *newString = hexStringToCharString(newHash, 32);

    for (int i=0; i!=strlen(newString); i++)
    {
            if (receivedTag[i]!=newString[i])
            {
                    printf(""DATA MISMATCH: Found %02X instead of %02X at index %d!\n"", newHash[i], receivedTag[i], i);
                    break;
            }
    }
    free(newString);

    printf(""Yay\n"");
    return;
}

char* hexStringToCharString(unsigned char hash[], int length){

    char temp[3];
    //need length*2 characters which is 64 plus one for null!
    char *theString = (char *)malloc(sizeof(char)*((length*2)+1));
    strcpy(theString, """");
    for(int i=0;i<length;i++){
        sprintf(temp, ""%02x"", hash[i]);
        strcat(theString, temp);
    }
    return theString;

}

The output in this case
Yay

So, Maybe this is entirely wrong. But if you find this solution needs editing then comment below.
","45","<c><hex><hmac><sha256><hmacsha1>","0","1","1","2015-08-02 16:29:06","31774012","2","","","","","2015-08-01 10:45:04",""
"46626619","500 error with MySQLdb Python when pulling data from tables","I am unsure why this code is giving me a 500 error on my web app with Flask, can someone tell me where my logic is wrong? I have a feeling it has to do with the sha256_crypt.verify() functions, but unsure how to get around this. Just trying to pull all the data on a user from my tables and put it into the session variable. Let me know, thanks!
@app.route('/login/', methods=['GET','POST'])
def login_page():
    error = ''
    try:
        c, conn = connection()
        if request.method == ""POST"":
            c.execute(""SELECT * FROM clients WHERE email = (%s)"", (thwart(request.form['email']),))
            pdata = c.fetchone()[3]

            if sha256_crypt.verify(request.form['password'], pdata):
                #get info from clients table
                c.execute(""SELECT * FROM clients WHERE email = (%s)"", (email,))
                clients_results = fetchall()
                clientcid = clients_results[0]
                #get info from cpersonals table
                c.execute(""SELECT * FROM cpersonals WHERE cid = (%s)"", (clientcid,))
                cpersonals_results = fetchall()

                conn.commit()
                c.close()
                conn.close()


                session['logged_in'] = 'client'
                session['clientcid'] = clientcid
                session['email'] = email
                session['phone'] = clients_results[1]
                session['rating'] = clients_results[4]
                session['first_name'] = cpersonals_results[1]
                session['last_name'] = cpersonals_results[2]
                session['address'] = cpersonals_results[3]
                session['czip'] = cpersonals_results[4]
                session['reg_date'] = cpersonals_results[5]
                flash(""You are now logged in."")
                return redirect(url_for(""ask""))

            else:
                error = ""Invalid credentials, try again.""

        return render_template(""login.html"", error = error)

    except Exception as e:
        #flash(e)
        error = ""Invalid credentials, try again.""
        return render_template(""login.html"", error = error)

Log: (sorry not sure how to post this properly)
   .991239 mod_wsgi (pid=5585): Target WSGI script '/var/www/FlaskApp/flaskapp.wsgi' cannot be loaded as Python module., referer: http://138.197.210.172/view_unanswered/
 .948625   mod_wsgi (pid=5585): Exception occurred processing WSGI script '/var/www/FlaskApp/flaskapp.wsgi'., referer: http://138.197.210.172/view_unanswered/
 .948649   Traceback (most recent call last):, referer: http://138.197.210.172/view_unanswered/
 .948670     File ""/var/www/FlaskApp/flaskapp.wsgi"", line 7, in <module>, referer: http://138.197.210.172/view_unanswered/
 .948744       from FlaskApp import app as application, referer: http://138.197.210.172/view_unanswered/
 .948857     File ""/var/www/FlaskApp/FlaskApp/__init__.py"", line 270, referer: http://138.197.210.172/view_unanswered/
 .948869       conn.commit(), referer: http://138.197.210.172/view_unanswered/
 .948873                   ^, referer: http://138.197.210.172/view_unanswered/
 .948877   IndentationError: unindent does not match any outer indentation level, referer: http://138.197.210.172/view_unanswered/
06.003866   mod_wsgi (pid=5586): Target WSGI script '/var/www/FlaskApp/flaskapp.wsgi' cannot be loaded as Python module., referer: http://138.197.210.172/account/
06.003919   mod_wsgi (pid=5586): Exception occurred processing WSGI script '/var/www/FlaskApp/flaskapp.wsgi'., referer: http://138.197.210.172/account/
06.003942   Traceback (most recent call last):, referer: http://138.197.210.172/account/
06.003964     File ""/var/www/FlaskApp/flaskapp.wsgi"", line 7, in <module>, referer: http://138.197.210.172/account/
06.004030       from FlaskApp import app as application, referer: http://138.197.210.172/account/
06.004076     File ""/var/www/FlaskApp/FlaskApp/__init__.py"", line 270, referer: http://138.197.210.172/account/
06.004083       conn.commit(), referer: http://138.197.210.172/account/
06.004087                   ^, referer: http://138.197.210.172/account/
06.004090   IndentationError: unindent does not match any outer indentation level, referer: http://138.197.210.172/account/
09.513219   mod_wsgi (pid=5585): Target WSGI script '/var/www/FlaskApp/flaskapp.wsgi' cannot be loaded as Python module., referer: http://138.197.210.172/
09.513258   mod_wsgi (pid=5585): Exception occurred processing WSGI script '/var/www/FlaskApp/flaskapp.wsgi'., referer: http://138.197.210.172/
09.513280   Traceback (most recent call last):, referer: http://138.197.210.172/
09.513301     File ""/var/www/FlaskApp/flaskapp.wsgi"", line 7, in <module>, referer: http://138.197.210.172/
09.513335       from FlaskApp import app as application, referer: http://138.197.210.172/
09.513357   ImportError: cannot import name app, referer: http://138.197.210.172/
09.550576   mod_wsgi (pid=5586): Target WSGI script '/var/www/FlaskApp/flaskapp.wsgi' cannot be loaded as Python module., referer: http://138.197.210.172/view_unanswered/
09.550615   mod_wsgi (pid=5586): Exception occurred processing WSGI script '/var/www/FlaskApp/flaskapp.wsgi'., referer: http://138.197.210.172/view_unanswered/
09.550639   Traceback (most recent call last):, referer: http://138.197.210.172/view_unanswered/
09.550661     File ""/var/www/FlaskApp/flaskapp.wsgi"", line 7, in <module>, referer: http://138.197.210.172/view_unanswered/
09.550697       from FlaskApp import app as application, referer: http://138.197.210.172/view_unanswered/
09.550718   ImportError: cannot import name app, referer: http://138.197.210.172/view_unanswered/
12.922623  mod_wsgi (pid=5585): Target WSGI script '/var/www/FlaskApp/flaskapp.wsgi' cannot be loaded as Python module., referer: http://138.197.210.172/
12.922697  mod_wsgi (pid=5585): Exception occurred processing WSGI script '/var/www/FlaskApp/flaskapp.wsgi'., referer: http://138.197.210.172/
12.922743  Traceback (most recent call last):, referer: http://138.197.210.172/
12.922768    File ""/var/www/FlaskApp/flaskapp.wsgi"", line 7, in <module>, referer: http://138.197.210.172/
12.922807      from FlaskApp import app as application, referer: http://138.197.210.172/
12.922838  ImportError: cannot import name app, referer: http://138.197.210.172/
12.955475   mod_wsgi (pid=5586): Target WSGI script '/var/www/FlaskApp/flaskapp.wsgi' cannot be loaded as Python module., referer: http://138.197.210.172/
12.955537   mod_wsgi (pid=5586): Exception occurred processing WSGI script '/var/www/FlaskApp/flaskapp.wsgi'., referer: http://138.197.210.172/
12.955561   Traceback (most recent call last):, referer: http://138.197.210.172/
12.955584     File ""/var/www/FlaskApp/flaskapp.wsgi"", line 7, in <module>, referer: http://138.197.210.172/
12.955620       from FlaskApp import app as application, referer: http://138.197.210.172/
12.955641   ImportError: cannot import name app, referer: http://138.197.210.172/

","I fixed this awhile back and wanted to update the post in case anyone else runs into this. 
So all I did was take the c.execute() functions out of the sha256_crpt IF statement, and put them at the beginning of the function for the page that login redirects to. Every user visits the first page so the user session will always have these values.
As such:
@app.route('/ask/', methods=['GET','POST'])
def ask():
    #clients come here first
    error = ''
    try:
        c, conn = connection()
        #grab all the clients info
        email = session['email']
        c.execute(""SELECT cid FROM clients WHERE email = (%s)"", (thwart(email),))
        clientcid = c.fetchone()[0]
        c.execute(""SELECT phone FROM clients WHERE email = (%s)"", (thwart(email),))
        phone = c.fetchone()[0]
        c.execute(""SELECT rating FROM clients WHERE email = (%s)"", (thwart(email),))
        rating = c.fetchone()[0]
        c.execute(""SELECT first_name FROM cpersonals WHERE cid = (%s)"", (clientcid,))
        first_name = c.fetchone()[0]
        c.execute(""SELECT last_name FROM cpersonals WHERE cid = (%s)"", (clientcid,))
        last_name = c.fetchone()[0]
        c.execute(""SELECT address FROM cpersonals WHERE cid = (%s)"", (clientcid,))
        address = c.fetchone()[0]
        c.execute(""SELECT city FROM cpersonals WHERE cid = (%s)"", (clientcid,))
        city = c.fetchone()[0]
        c.execute(""SELECT state FROM cpersonals WHERE cid = (%s)"", (clientcid,))
        state = c.fetchone()[0]
        c.execute(""SELECT zip FROM cpersonals WHERE cid = (%s)"", (clientcid,))
        czip = c.fetchone()[0]
        c.execute(""SELECT reg_date FROM cpersonals WHERE cid = (%s)"", (clientcid,))
        reg_date = c.fetchone()[0]
        conn.commit()
        c.close()
        conn.close()


        session['logged_in'] = 'client'
        session['clientcid'] = clientcid
        session['phone'] = phone
        session['rating'] = rating
        session['first_name'] = first_name
        session['last_name'] = last_name
        session['address'] = address
        session['city'] = city
        session['state'] = state
        session['czip'] = czip
        session['reg_date'] = reg_date

","45","<python><mysql><mysql-python><sha256>","0","0","1","2017-11-19 01:48:30","47372962","7","","3765517","","2017-10-08 01:27:57","2017-10-08 01:08:15",""
"58613142","C++ openssl SHA256 running slower than JDK SHA256 implementation","I am working on a project and as a part of it, I have to roughly simulate the Bitcoin Proof of Work computation. This involves iteratively computing SHA256 twice on a concatenation of a fixed ""BlockHash"" string and a 32-bit int nonce which is incremented every iteration. If the computed hash is less than a ""TargetHash"" string, we break the loop and print the nonce value.
I am trying to compare two sequential implementations, one written using C++ using OpenSSL's SHA256 implementation, and the other in Java using JDK's internal SHA256 implementation. I was expecting the OpenSSL implementation to be much faster than JDK, but the opposite is happening.
Here is my Java code:
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;


public class SHA256 {
    /**
     * convert byte[] to hex string
     *
     * @param hash
     * @return hex string
     */
    private static String bytesToHex(byte[] hash) {
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < hash.length; i++) {
            String hex = Integer.toHexString(0xff & hash[i]);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }

    /**
     * get a sha256 of the input string
     *
     * @param inputString
     * @return resulting hash in hex string
     */
    public static String SHA256(String inputString) {
        try {
            MessageDigest sha256 = MessageDigest.getInstance(""SHA-256"");
            return bytesToHex(sha256.digest(inputString.getBytes(StandardCharsets.UTF_8)));
        } catch (NoSuchAlgorithmException ex) {
            System.err.println(ex.toString());
            return null;
        }
    }

    public static void main(String[] args){
        String blockHash = SHA256(""Some random string to generate a block hash."");
        System.out.println(""blockHash: "" + blockHash);
        String targetHash = ""000000938023b712892a41e8438e3ff2242a68747105de0395826f60b38d88dc"";
        String tmp_hash=""undefined"";
        int nonce = 0;
        for(nonce=Integer.MIN_VALUE; nonce<=Integer.MAX_VALUE; nonce++) {
            tmp_hash = SHA256(SHA256(blockHash+String.valueOf(nonce)));
            if(targetHash.compareTo(tmp_hash)>0)
                break;
        }
        System.out.println(""Resulting Hash: "" + tmp_hash);
        System.out.println(""Nonce:"" + nonce);
    }
}

And this is my C++ implementation:
#include <iostream>
#include <climits>
#include <cstring>
#include <sstream>
#include <string>
#include <iomanip>
#include ""format.h""

using namespace std;

#include <openssl/sha.h>

string sha256(const string str)
{
    unsigned char hash[SHA256_DIGEST_LENGTH];
    SHA256_CTX sha256;
    SHA256_Init(&sha256);
    SHA256_Update(&sha256, str.c_str(), str.size());
    SHA256_Final(hash, &sha256);
    stringstream ss;
    for(int i = 0; i < SHA256_DIGEST_LENGTH; i++)
    {
        ss << hex << setw(2) << setfill('0') << (int)hash[i];
    }
    return ss.str();
}


int main(int argc, char *argv[])
{   
    string input = ""Some random string to generate a block hash."";
    string blockHash = sha256(input);
    cout << ""blockHash: "" << blockHash << endl;
    string targetHash = ""000000938023b712892a41e8438e3ff2242a68747105de0395826f60b38d88dc"";
    string tmp_hash=""undefined"";
    int nonce = 0;

    for(nonce = INT_MIN; nonce <= INT_MAX; nonce++){
        tmp_hash = sha256(sha256(fmt::format(""{}{}"", blockHash, nonce)));
        if(strcmp(tmp_hash.c_str(), targetHash.c_str()) < 0)
            break;
    }

    cout<<""Resulting Hash: ""<<tmp_hash<<endl;
    cout<<""Nonce: ""<<nonce<<endl;

    return 0;
}

The outputs using linux 'time' utility to measure runtime:
javac SHA256.java
time java SHA256
blockHash: 596143a6a70a23c86e4b218afeb05d151ed45a39e96368e213d17e0a491d894a
Resulting Hash: 0000008ce61c628ffb00b6668687504fd5d44da0a57adb40d6ff59f8e4af0a4a
Nonce:-2135751361

real    0m22.258s
user    0m22.977s
sys 0m0.097s

g++ -O2 -DFMT_HEADER_ONLY main.cpp -lcrypto -lssl
time ./a.out
blockHash: 596143a6a70a23c86e4b218afeb05d151ed45a39e96368e213d17e0a491d894a
Resulting Hash: 0000008ce61c628ffb00b6668687504fd5d44da0a57adb40d6ff59f8e4af0a4a
Nonce: -2135751361

real    0m35.703s
user    0m35.693s
sys 0m0.005s

This is just for an easy TargetHash, for more difficult ones, the difference is even greater. I am pretty sure here openssl sha256 implementation isn't a bottleneck and something else is, but being new to C++ I am not sure what. I was earlier using to_string(nonce) and s1.compare(s2), which I replaced with fmt::format and strcmp because they're faster, but still could only gain a few seconds. Any ideas will be really appreciated.
","The bottleneck for your c++ code is your custom bytes_to_string function. Calling stringstream functions in a loop simply hits the performance.
You might want to look at this answer to another question.

replace the stringstream functions with the following code snippet. It is faster because it manipulates the string memory directly.
static const char characters[] = ""0123456789ABCDEF"";
std::string result (SHA256_DIGEST_LENGTH * 2, ' ');
for(int i = 0; i < SHA256_DIGEST_LENGTH; i++)
{
    result[2*i] = characters[(unsigned int) hash[i] >> 4];
    result[2*i+1] = characters[(unsigned int) hash[i] & 0x0F];
}
return result;

","44","<java><c++><openssl><bitcoin><sha256>","0","1","1","2019-10-29 18:36:51","58613334","3","1","","","","2019-10-29 18:05:37",""
"58306935","Unable to obtain the same sha256 hash in python and javascript","I am following the steps to call a PSD2 endpoint, base64 code the message, then get SHA256 to obtain the Hash from it and get the base64 of the hash. I am using the same values of the examples to check if I am doing it right. They also provide a website with a js library to check the result.
https://imgur.com/vsaTbvX
Input:
ewogICJpbnN0cnVjdGVkQW1vdW50IiA6IHsKICAgICJjdXJyZW5jeSIgOiAiRVVSIiwKICAgICJhbW91bnQiIDogIjE2LjAwIgogIH0sCiAgImRlYnRvckFjY291bnQiIDogewogICAgImliYW4iIDogIkVTNTE0MDAwMDAwMTA1MDAwMDAwMDAwMSIsCiAgICAiY3VycmVuY3kiIDogIkVVUiIKICB9LAogICJjcmVkaXRvck5hbWUiIDogIkNyZWQuIE5hbWUiLAogICJjcmVkaXRvckFjY291bnQiIDogewogICAgImliYW4iIDogIkVTNjYyMTAwMDQxODQwMTIzNDU2Nzg5MSIsCiAgICAiY3VycmVuY3kiIDogIkVVUiIKICB9LAogICJjcmVkaXRvckFkZHJlc3MiIDogewogICAgInN0cmVldCIgOiAiRWplbXBsbyBkZSBjYWxsZSIsCiAgICAiYnVpbGRpbmdOdW1iZXIiIDogIjE1IiwKICAgICJjaXR5IiA6ICJDb3Jkb2JhIiwKICAgICJwb3N0YWxDb2RlIiA6ICIxNDEwMCIsCiAgICAiY291bnRyeSIgOiAiRVMiCiAgfSwKICAicmVtaXR0YW5jZUluZm9ybWF0aW9uVW5zdHJ1Y3R1cmVkIiA6ICJQYWdvIiwKICAiY2hhcmdlQmVhcmVyIiA6ICJDUkVEIgp9

Expected Output:
pfHPQFso5E7SlQfg9kSVhZuod4k9KnFFEtFs472L5WI=

What I am doing:
import base64
import hashlib


# get_input returns the input base64 in bytes
result = base64.b64encode(hashlib.sha256(get_input()).digest())

In that case, the result is:
b'JRtx3taNOfx00oj2xuyoAxocxfJnL/wEXLYf9+t9jCk='

Instead of the expected result.
This result is the same as the result in that JS page changing the input type from base64 to text, so I assume the input is correct. But with hashlib there are not input type options. So my question is: What I have to do to get the expected output with that input in python?
","Try to decode the result:
result = base64.b64encode(hashlib.sha256(""hi"".encode()).digest())
print(result)
print(result.decode('utf-8'))

Output:
b'j0NDRmSPa5bfid2pAcUXaxCm2Dlh3TwayItZstwyeqQ='
j0NDRmSPa5bfid2pAcUXaxCm2Dlh3TwayItZstwyeqQ=

source: https://docs.python.org/3/howto/unicode.html
","44","<python><base64><sha256><hashlib><psd2>","0","0","2","2019-10-10 07:21:50","58317494","3","","","","","2019-10-09 14:54:29",""
"58306935","Unable to obtain the same sha256 hash in python and javascript","I am following the steps to call a PSD2 endpoint, base64 code the message, then get SHA256 to obtain the Hash from it and get the base64 of the hash. I am using the same values of the examples to check if I am doing it right. They also provide a website with a js library to check the result.
https://imgur.com/vsaTbvX
Input:
ewogICJpbnN0cnVjdGVkQW1vdW50IiA6IHsKICAgICJjdXJyZW5jeSIgOiAiRVVSIiwKICAgICJhbW91bnQiIDogIjE2LjAwIgogIH0sCiAgImRlYnRvckFjY291bnQiIDogewogICAgImliYW4iIDogIkVTNTE0MDAwMDAwMTA1MDAwMDAwMDAwMSIsCiAgICAiY3VycmVuY3kiIDogIkVVUiIKICB9LAogICJjcmVkaXRvck5hbWUiIDogIkNyZWQuIE5hbWUiLAogICJjcmVkaXRvckFjY291bnQiIDogewogICAgImliYW4iIDogIkVTNjYyMTAwMDQxODQwMTIzNDU2Nzg5MSIsCiAgICAiY3VycmVuY3kiIDogIkVVUiIKICB9LAogICJjcmVkaXRvckFkZHJlc3MiIDogewogICAgInN0cmVldCIgOiAiRWplbXBsbyBkZSBjYWxsZSIsCiAgICAiYnVpbGRpbmdOdW1iZXIiIDogIjE1IiwKICAgICJjaXR5IiA6ICJDb3Jkb2JhIiwKICAgICJwb3N0YWxDb2RlIiA6ICIxNDEwMCIsCiAgICAiY291bnRyeSIgOiAiRVMiCiAgfSwKICAicmVtaXR0YW5jZUluZm9ybWF0aW9uVW5zdHJ1Y3R1cmVkIiA6ICJQYWdvIiwKICAiY2hhcmdlQmVhcmVyIiA6ICJDUkVEIgp9

Expected Output:
pfHPQFso5E7SlQfg9kSVhZuod4k9KnFFEtFs472L5WI=

What I am doing:
import base64
import hashlib


# get_input returns the input base64 in bytes
result = base64.b64encode(hashlib.sha256(get_input()).digest())

In that case, the result is:
b'JRtx3taNOfx00oj2xuyoAxocxfJnL/wEXLYf9+t9jCk='

Instead of the expected result.
This result is the same as the result in that JS page changing the input type from base64 to text, so I assume the input is correct. But with hashlib there are not input type options. So my question is: What I have to do to get the expected output with that input in python?
","The website is decoding the input string from base64, hashing it, and then encoding the hash as base64.
>>> s = 'ewogICJpbnN0cnVjdGVkQW1vdW50IiA6IHsKICAgICJjdXJyZW5jeSIgOiAiRVVSIiwKICAgICJhbW91bnQiIDogIjE2LjAwIgogIH0sCiAgImRlYnRvckFjY291bnQiIDogewogICAgImliYW4iIDogIkVTNTE0MDAwMDAwMTA1MDAwMDAwMDAwMSIsCiAgICAiY3VycmVuY3kiIDogIkVVUiIKICB9LAogICJjcmVkaXRvck5hbWUiIDogIkNyZWQuIE5hbWUiLAogICJjcmVkaXRvckFjY291bnQiIDogewogICAgImliYW4iIDogIkVTNjYyMTAwMDQxODQwMTIzNDU2Nzg5MSIsCiAgICAiY3VycmVuY3kiIDogIkVVUiIKICB9LAogICJjcmVkaXRvckFkZHJlc3MiIDogewogICAgInN0cmVldCIgOiAiRWplbXBsbyBkZSBjYWxsZSIsCiAgICAiYnVpbGRpbmdOdW1iZXIiIDogIjE1IiwKICAgICJjaXR5IiA6ICJDb3Jkb2JhIiwKICAgICJwb3N0YWxDb2RlIiA6ICIxNDEwMCIsCiAgICAiY291bnRyeSIgOiAiRVMiCiAgfSwKICAicmVtaXR0YW5jZUluZm9ybWF0aW9uVW5zdHJ1Y3R1cmVkIiA6ICJQYWdvIiwKICAiY2hhcmdlQmVhcmVyIiA6ICJDUkVEIgp9'
>>> decoded = base64.b64decode(s)
>>> hash_ = hashlib.sha256(decoded)
>>> r = base64.b64encode(hash_.digest())
>>> r.decode()
'pfHPQFso5E7SlQfg9kSVhZuod4k9KnFFEtFs472L5WI='

","44","<python><base64><sha256><hashlib><psd2>","0","1","2","2019-10-10 07:21:50","58317494","3","","","","","2019-10-09 14:54:29",""
"55906679","Converting sha1 to sha256","I have a .sh file generating an openssl sha256 key
$(echo -n ${DATA} | openssl sha256 -binary | base64)
And need to generate same key to compare it to using sha256 in my php file, the old one is sha1.
This is my php code right now, which outputs fine sha1 string.
$params['Code'] = base64_encode(sha1($params['Product'] . $params['Model'] . $params['Number'],true));
I changed sha1 to sha256, and I get internal server error.
","It seems you want to use this:
$data = $params['Product'] . $params['Model'] . $params['Number'];
$params['Code'] = base64_encode(hash('sha256', $data, true));

but I also fail to understand why this is difficult to arrive at, given the first comment by Magnus Eriksson.
Note that we have no way to verify that this will result in the same output, as you expect.
","44","<php><binary><sha256>","0","1","1","2019-04-29 16:24:39","55907348","6","","","","","2019-04-29 15:42:38",""
"44567924","Is it possible to create a bloackchain network which will not in increase in difficulty?","I would like to create a blockchain network which will stay at the same level of complexity, is such a thing possible?
Thanks
","There is nothing preventing you from creating a cryptocurrency that has a fixed difficulty, however it'd not be very useful.
The difficulty in Bitcoin serves the simple purpose of ensuring that the money creation process and the confirmation process follows a predictable schedule of once every 10 minutes. If we were to fix the difficulty, then the network could not react to the influx or reduction of computational resources. So when new mining hardware joins the network the expected time between blocks would reduce, while when hardware leaves, the time between blocks lengthens. This has two effects:

The introduction of new currency to the network becomes unpredictable, i.e., when people join the network currency gets created faster and faster, resulting in a hyper-inflation. Financial systems heavily rely on predictability of the money supply.
The confirmation times are unpredictable, which is bad when people start leaving the network, we'd wait longer and longer for confirmations. On the other side, people joining the network also has adverse effects, since blocks do not have time to be propagated in the network, resulting in blockchain forks, which in turn undermines the reassurance we get from a confirmation.

Realistically speaking, there is no upside of fixing a difficulty. If you're a user, you'd get the same number of blocks (not really since they'd be stale due to blockchain forks most of the time), but the coins you'd be mining are worthless because everybody else also gets a fixed amount for their investment. And on the other side the system would be hardly usable at all.
","44","<bitcoin><sha256><blockchain>","-1","2","1","2017-06-16 14:02:45","44591241","0","","","","","2017-06-15 12:47:00",""
"54622813","Does SHA-256 provide message integrity?","Suppose a user designed a new scheme to detect whether a message is modified by an attacker (protecting data integrity). The scheme is to append to each message a SHA-256 hash of that message. Will there be any vulnerability in the design?
","","44","<sha256>","0","","0","2019-02-11 01:17:51","","0","","","","","2019-02-11 01:17:51",""
"54776058","Updating hashlib from input data in Python","I'm trying to find a way to update a hashlib object based on the digest output from a different hashlib object. This sounds confusing, but essentially:
import hashlib

part1 = b'abcdefg'
part2 = b'hijklmnop'

# Normal way
hasher1 = hashlib.sha256()
hasher1.update(part1)
hasher1.update(part2)

# Way I need to do it (different hashlib objects)
hasher2 = hashlib.sha256()
hasher2.update(part1)
hasher3 = hashlib.sha256(hasher2.digest())
hasher3.update(part2)

print(hasher1.digest() == hasher3.digest()) # False, but I wish it was True

I had hoped that these two would return the same digest, but that is not the case. Any thoughts on how to ""continue"" a hash using a new hashlib object?
EDIT:
My question was unclear, sorry. I need to be able to calculate the hash on a message block on one computer, then send the resulting hash to a second computer and ""continue"" the hash on the second computer with a second message block. So the flow is like:
hasher2 = hashlib.sha256()
hasher2.update(part1)
intermediate_result = hasher2.digest()

### send intermediate result over some sort of connection ###

hasher3 = hashlib.sha256(intermediate_result)
hasher3.update(part2)
final_result = hasher3.digest()

So because of this part in the middle where it has to go between two software programs, I can't use the .copy() method.
","","44","<python><sha256><hashlib>","0","","0","2019-02-20 21:32:36","","0","","612580","","2019-02-20 21:32:36","2019-02-19 22:41:57",""
"56377337","How to fix length of hashed value in passlib context python?","I am using below code for encrypting password.
from passlib.context import CryptContext

pwd_context = CryptContext(
    schemes=[""pbkdf2_sha256""],
    default=""pbkdf2_sha256"",
    pbkdf2_sha256__default_rounds=30000
 )

 def encrypt_password(password):
    return pwd_context.encrypt(password)


 def check_encrypted_password(password, hashed):
    return pwd_context.verify(password, hashed)

When I call encrypt_password('password') function it will encrypt my password into hash value and give me output as follow..
'$pbkdf2-sha256$30000$X6vVGgNgzFmrlVIq5RyjVA$VGQ5x.yuabpdNMDMNc1S3/umqXMl3605DyjJ/lgXAM0'

The output of encypted password hashed value is too long value. I want to get output in fixed sized like ""30 characters or 40 characters"". How to get fix sized output.? Can anyone help me to understand this. 
Thank You !
","","44","<python><encryption><hash><sha256><passlib>","1","","0","2019-05-30 17:31:42","","2","","7846700","","2019-05-30 17:31:42","2019-05-30 11:22:42",""
"39008401","Text Processing - Extracting Cleartext","My script below simply hashes ""Bob"" with sha256sum. However, is it possible to reverse this process? So, basically using the output of the script to find the cleartext 'Bob'.
#!/bash/bash
echo -n Bob | sha256sum

I've looked around online about this but all the topics are about hashing strings and not the other way around. I'm sorry if this is a dumb question as I am new to scripting.
","sha256sum is supposed to be a one-way hash.  If you could readily invert it, that would be proof that it was a failure.
sha256sum was designed to be a cryptographic hash function and, as Wikipedia explains:

The ideal cryptographic hash function has four main properties:

it is quick to compute the hash value for any given message
it is infeasible to generate a message from its hash value except by trying all possible messages
a small change to a message should change the hash value so extensively that the new hash value appears uncorrelated with the old
  hash value
it is infeasible to find two different messages with the same hash value


So, no, there is no sensible way to invert it.
","44","<bash><shell><hash><sha256>","1","2","1","2016-08-18 02:33:36","","1","","","","","2016-08-18 00:58:39",""
"35741874","Supporting new PayPal certificates on AppHarbor (SHA-256)","PayPal recently announced that they upgrade the certificate to SHA-256 with VeriSign G5 Root Certificate. 
https://www.paypal-knowledge.com/infocenter/index?page=content&widgetview=true&id=FAQ1766&viewlocale=en_US
Does AppHarbor have this root certificate installed?
Does it support SHA-256?
Thank you
","Yes SHA-256 is supported, and root certificates are updated regularly and automatically. I can also confirm that the VeriSign G5 Root Certificate mentioned in the PayPal article is installed and trusted on the platform.
","43","<ssl><certificate><sha256><appharbor><verisign>","4","1","1","2017-01-05 13:29:35","41486375","0","","279813","","2017-01-05 08:29:33","2016-03-02 08:24:11",""
"43818000","How rewrite CCHmac in iOS Swift 3 from Objective C?","I want to convert this code from Objective C to Swift 3 :
const char *cKey  = [keyStr cStringUsingEncoding:NSISOLatin1StringEncoding];
const char *cData = [mixStr cStringUsingEncoding:NSASCIIStringEncoding];
unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];
CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);
NSMutableString *mac = [NSMutableString string];
for (int i=0; i<sizeof cHMAC; i++){
    [mac appendFormat:@""%02hhx"", cHMAC[i]];
}  

So i write this but output in Objective C has 64 count and in my Swift code has 44 count.Therefor i think my swift code is wrong:  
let cKey = encryptedStrKEYDataString.cString(using: String.Encoding.isoLatin1)
let cData = mix.cString(using: String.Encoding.isoLatin1)
let algorithm = CCHmacAlgorithm(kCCHmacAlgSHA256)
let size = Int(CC_SHA256_DIGEST_LENGTH)
var result = [CUnsignedChar](repeating: 0, count: size )
CCHmac(algorithm, cKey!, Int(strlen(cKey!)), cData!, Int(strlen(cData!)), &result)
let hmacData:NSData = NSData(bytes: result, length: size)
let hmacBase64 = hmacData.base64EncodedString(options: [.lineLength64Characters])

","","43","<ios><objective-c><swift><sha256><hmac>","0","","0","2017-05-06 08:06:27","","5","","3319132","","2017-05-06 08:06:27","2017-05-06 07:40:10","2017-05-06 07:50:40"
"57253260","How to shorten a URL in groovy?","I have created a URL that consist of some parameter like client id , expiry date and so on. Among these parameters I have one parameter called ""Signature"" which is hmac encrypted to maintain the security. Now the final URL getting generated is of length greater than the column length in which it is supposed tobe stored. Changing the length of the DB column is not a feasible solution. Now how should i shorten the URL to store it in the column?
The first approach i took was to also encryt the generated URL using HMAC encryption. But as this generated URL is to be used by a third party application and that HMAC encrypted values are impossible to be decryted to the original data . Now I am not sure how to store this URL in groovy file
","","43","<encryption><groovy><sha256><hmacsha1>","0","","0","2019-07-29 11:49:26","","4","","","","","2019-07-29 11:49:26",""
"53447454","Valid request signature generation","I am trying to connect to an external API and more specifically to replicate this Ruby code here: working code . My env variables are correct, and that is if I change them, I get an Account not found response. If I use the Ruby code provided in the link above, it works. 
    $date = new \DateTime(now());
    $date->setTimezone(new \DateTimeZone('Europe/Athens'));

    # Generates a date in this format: Wed, 21 Nov 2018 22:37:14 GMT
    $date = $date->format(\DateTime::RFC7231);
    $body = [
        'data' => [
            'type' => 'profile'
        ]
    ];
    $request_target = 'post /profiles';

    # Generates a digest using the request body
    $digest = 'SHA-256=' . base64_encode(hash('sha256', json_encode($body), true));

    $content_type = 'application/vnd.api+json';
    $accept_type = 'application/vnd.api+json';
    $version = '2016-09-01';

    # Generates the signing string. Note that the parts of the string are
    # concatenated with a newline character
    $signing_string = implode('\n', [
        ""(request-target): {$request_target}"",
        ""date: {$date}"",
        ""digest: {$digest}""
    ]);

    # Creates the HMAC-SHA256 digest using the API secret and then base64
    # encodes that value
    $signature = trim(base64_encode(hash_hmac('sha256', $signing_string, env('COGNITO_SECRET'), true)));

    # Creates the authorization header and concatenates it together using
    # a comma
    $authorization = implode(',', [
        'Signature keyId=""' . env('COGNITO_API_KEY') .'""',
        'algorithm=""hmac-sha256""',
        'headers=""(request-target) date digest""',
        'signature=""' . $signature . '""'
    ]);

    $headers = [
        'Content-Type' => $content_type,
        'Cognito-Version' => $version,
        'Accept' => $accept_type,
        'Date' => $date,
        'Digest' => $digest,
        'Authorization' => $authorization,
    ];

    try {

        # Put everything together and execute the request. Note that the headers
        # are defined in the same order as they are defined in the Authorization
        # header above. They can be in any order, but they must be consistent.
        $client = new Client();
        $response = $client->post(env('COGNITO_ENDPOINT') . '/profiles', [
            RequestOptions::HEADERS => $headers,
            RequestOptions::JSON => $body,
            //'debug' => true
        ]);

    } catch (RequestException $e) {
        return $this->respondWithGeneralError(json_decode($e->getResponse()->getBody()));
    }catch (\Exception $e){
        return $this->respondWithGeneralError($e->getMessage());
    }

    return $this->respondWithSuccess('auth', $response);

But I am unable to create the correct signature, as I am getting a response of Failed to verify request signature from the endpoint.
Can anyone spot any errors or miss-placements in my code?
","I think this is problem
$signing_string = implode('\n'

you have a mistake with quotes, you need to use double quotes
","42","<php><api><hash><php-7><sha256>","0","0","1","2018-11-23 14:32:06","53448563","0","","","","","2018-11-23 13:17:22",""
"55066474","SHA256 digest differs between array initializer and string","I use the sha256 function of Microchip ATECC508A security chip. My code looks like this:
int main(void) {
    uint8_t message[32] = {0}; // Method 1
    //uint8_t message[32] = ""00000000000000000000000000000000""; // Method 2
    foobar(message, sizeof(message));
}

void foobar(uint8_t *message, int length) {
    uint8_t digest[32];
    sha256(message, length, digest);
    // printf statements for calculated hashes ...
}


Method 1: 66687AADF862BD776C8FC18B8E9F8E20089714856EE233B3902A591D0D5F2925
Method 2: 84E0C0EAFAA95A34C293F278AC52E45CE537BAB5E752A00E6959A13AE103B65A

Method 2 delievers the corresponding hash I expect for 32 zeros, but when I use the static array initializer in method 1, the hash is wrong and I don't know why. I've checked the resulting sha256 hashes here.
I would appreciate any help, thank you very much.
EDIT:
I was able to to initialize the whole array with characters of zeros with:
uint8_t message[32] = { [0 ... 31] = '0'}. 
This only works on gcc compilers.
","In the second case, the array is not filled with the number 0 but is filled with the character '0'.  
In ASCII, the encoding for '0' is 48, so assuming your system uses ASCII then every element of your array has the value 48.
","42","<c><hash><sha256>","1","6","1","2019-03-08 16:26:49","55066518","3","1","7839759","","2019-03-08 16:26:49","2019-03-08 15:38:46",""
"57829571","Different hashes given by Spring Security 4 in Grails 4.0.0 using sha256","I'm trying to use password hashes generated with sha256  from a legacy project in  grails 2.3.8 I was trying to prepend {sha256} to the hashes in the data base in order avoid 'There is no PasswordEncoder mapped for the id ""null""' Exception but I've noticed every time the encoder generate a hash is a different hash, so when I type the password never matches with the original hash. 
I think is because salt but I didn't set a salt source 
This is my configuration in application.groovy
grails.plugin.springsecurity.password.algorithm = 'sha256'
grails.plugin.springsecurity.password.hash.iterations = 1

This are some hashes generated with the same password: 'support' and this is the username='zzzz'
{sha256}36a0d0f4ce590497957078784dddbefe675c2ea06f4ed7c1b1ad57f2442b4c27f3b611def0ad5141

{sha256}5b4c2a5616cfe3a2b1f82e58890c5c8ff7cf8dba81d8ec692c493143719b3c6bca54ca1b48dba218

","","41","<java><grails><spring-security><sha256>","0","","0","2019-09-06 23:49:16","","3","","18157","","2019-09-06 23:49:16","2019-09-06 23:40:19",""
"50872487","AWS hmac encryption discrepencies","I am facing a very strange issue and have spent 3+ days on it. I am going through AWS's signing request version 4 documentation and am investigating their HMAC signing process.
I am using node-forge to calculate an HMAC-sha256 based upon a given string and key, using this AWS doc: https://docs.aws.amazon.com/general/latest/gr/signature-v4-examples.html
These are the exact same strings as the documentation encoded as the documentation says to UTF-8:
const hash_type = 'sha256';
const hmac = forge.hmac.create();
const key = forge.util.encodeUtf8('c4afb1cc5771d871763a393e44b703571b55cc28424d1a5e86da6ed3c154a4b9');
const string = forge.util.encodeUtf8('AWS4-HMAC-SHA256\n' +
  '20150830T123600Z\n' +
  '20150830/us-east-1/iam/aws4_request\n' +
  'f536975d06c0309214f805bb90ccff089219ecd68b2577efef23edd43b7e1a59');
hmac.start('sha256', key);
hmac.update(string);
console.log('SIGNATURE: ' +  hmac.digest().toHex());

My function, along with every single HMAC calculator I use online give the caluclated hash as fe52b221b5173b501c9863cec59554224072ca34c1c827ec5fb8a257f97637b1
Even the AWS Code provided by them for both javascript and python derived the same values and calculates the same hash as I received. 
However, according to the documentation in their doc's, it should be:
5d672d79c15b13162d9279b0855cfba6789a8edb4c82c400e06b5924a6f2b5d7
I have tried over 10+ calculators that all return the same value I received until I found 1 online calculator, only 1, that calculates the same as amazon at https://cryptii.com/hmac
I know HMAC is a mathematical function that is absolute, the same input will give the same output, which means that the input is different or that it is transformed along the way in a way that is abstracted from me.
Any tips?
","","40","<amazon-web-services><encryption><sha256><hmac>","0","","0","2018-06-15 09:16:05","","2","","","","","2018-06-15 09:16:05",""
"57845504","What hashing algorithm can safely be used to hash sets of keywords in-order to generate unique keys for a database table?","I have a need to enforce that entries into my database table contain unique sets of keywords or the entry should be denied. Order does not matter, just that each set of keywords need to be unique. For example:
take this existing sample record in database:
record
-- content
-- keywords: ['apple', 'pear', 'orange']
A new record with a keyword array ['apple', 'pear', 'orange'] denied
A new record with a keyword array ['apple', 'orange', 'pear'] denied
A new record with a keyword array ['apple', 'pear', 'orange', 'grape'] accepted
As a solution, it was suggested to me that i hash the sets of keywords (lexically ordered), and use that hash as the unique key for the database entry.
Great suggestion, but two problems:
How do i handle case sensitivity in this scenario?
And is it realistic to believe that collisions are close enough to impossible if i decide to use, say for example SHA-1, to hash large sets of keywords (up to 30) and use that hash as my unique key for the database entry without requiring a check for a duplicate?
We're using firebase as our backend, and google charges per document read basis, thus, having to check for duplicates before insertion is not an acceptable nor scalable solution, since a query like that would cost us a fortune if we had to check prior to every record insertion should my table include millions of records.
","
Having to check for duplicates before insertion is not an acceptable nor scalable solution, since a query like that would cost a fortune should my table include millions of records.

Your concerns are misplaced. Databases are great at using indexes to look things up -- millions of records isn't even an especially large number.
Convert the list of keywords into a canonical form (e.g, by alphabetizing the keywords), then join the words with a separator that won't appear in the keywords (like a comma) and use the result as a unique key in your database. You don't need to use a hash.
","40","<database><hash><sha1><sha256>","0","0","1","2019-09-08 20:52:51","","4","","2934896","","2019-09-08 20:52:51","2019-09-08 20:24:44",""
"54706117","Changing internal state of hash in Python","In a C program, I can change the internal state of the SHA256 algo as follows:
SHA256_CTX c;
SHA256_Init(&c);
for (i =0; i<64; i++)
    SHA256_Update(&c, ""$"", 1);

# 0x44332211 is just for example
c.h[0] = htole32(0x44332211);
c.h[1] = htole32(0x44332211);
c.h[2] = htole32(0x44332211);
c.h[3] = htole32(0x44332211);
c.h[4] = htole32(0x44332211);
c.h[5] = htole32(0x44332211);
c.h[6] = htole32(0x44332211);
c.h[7] = htole32(0x44332211);

Python provides hashlib.sha256. I want to ask if there is any way in which the internal state of sha256 algo can be updated in Python similar to what I did in C above ?
","","40","<python><sha256>","0","","0","2019-02-15 09:22:30","","2","","","","","2019-02-15 09:22:30",""
"54645525","How to resolve ""ValueError: I/O operation on closed file"" when output results to file?","I have a piece of code that converting email addresses to HASH using SHA256 algorithm. When running the code, the expected results are presented, but when i'm trying to output the results - i'm getting an error :
ValueError: I/O operation on closed file
import os
import hashlib

with open(""emails.txt"", ""r"") as text:
    for line in text.readlines():
        line = line.rstrip(""\n"")

        m = hashlib.sha256(line)
        print(m.hexdigest())

with open(""Output.txt"", ""w"") as text_file:
    for row in text:
        print row
        text_file.write(""%s\n"" % str(row))

can anyone help me to get all the results to external file?
","Because of the line for row in text:, you are trying to loop over text which at this point in the script is a closed file. You could structure the code as such:
import os
import hashlib

with open(""emails.txt"", ""r"") as text:
    with open(""Output.txt"", ""w"") as text_file:
        for line in text.readlines():
            line = line.rstrip(""\n"")
            m = hashlib.sha256(line.encode()).hexdigest() 
            print m
            print line
            text_file.write(""%s:%s\n"" % (str(line), m))

","40","<python-2.7><output><sha256>","0","0","1","2019-02-12 11:43:55","54645606","0","","10632369","","2019-02-12 10:28:48","2019-02-12 08:12:56",""
"35971593","Why sometime we see hashes such as md5 and sha256 when we download software?","I know that is md5 and sha256 are hashing and authenticating mechanism, but I wonder why when I want to download some softwares I## Heading ## found them in front of my face :/
For example: if you want to download php package you will see
php-7.0.4.tar.bz2 (sig) [13,698Kb] 
md5: 0171201350941327399a5c3e678a86e5
sha256: a246c503709c189ba8e1e22ed2cb22abc27da43a997ff1b3318e181baf529dcc
","The hashes are provided so the after download you can perform the same hash on the download to insure you have the correct and non-corrupted version.
This may be important if you obtain the download from another source.
","40","<security><encryption><md5><sha256>","0","1","1","2016-03-16 23:33:51","","1","","5054414","","2016-03-16 23:33:51","2016-03-13 14:41:13",""
"51573934","Create 2 way map for sha256.","Assuming we are looking at the data set of all sha256.
Each sha256 value whan aplying the sha256 function on it will result in a different sha256 value. 
Since our data set is in the same size as the result set we can assume we have a 1 to 1 function. 
Is there a way to map all the value and create a backwared function. (Assuming we are looking only on the above data set. 
In a reseanable computational time (not 110 years) 
","
Since our data set is in the same size as the result set we can assume we have a 1 to 1 function.

This is a faulty assumption. There is no reason to believe that SHA256 is a unique mapping across 256-bit inputs; there is, in all probability, at least one (and probably many) pairs of 256-inputs which have the same SHA256 hash.

Is there a way to map all the value and create a backwared function.

No. There are 2256 ≈ 1.16×1077 possible SHA256 hashes. As a point of comparison, there are roughly 2.4×1067 atoms in our galaxy. Even if you could turn the entire Milky Way into a computer and write one hash onto each atom, you would run out of atoms long before you finished.
","40","<algorithm><computer-science><sha256>","0","2","1","2018-07-28 18:22:18","51574010","4","","","","","2018-07-28 18:05:01",""
"53480285","Hexify sha digest result without using hashlib","I've got digest value of data in string format, and I'd like to hexify it.
Here's the sample string '\xf0z\xd8[\xfc\x7f'
However, I cannot use hashlib since I don't have the original data from which the hash was created from. 
trying .digesthex() on the string wouldn't work since str object don't have that method. Is there any alternative ?
","For each character in the original string, use ord to obtain the numeric value of the character and then use a string format operation to express that numeric value as a string containing a pair of hex digit characters.  Accumulate those two-digit strings into a single string.
    mystring = '\xf0z\xd8[\xfc\x7f'
    result = ''
    for ch in mystring:
        number = ord(ch)
        hexdigits = '{:02x}'.format(number)
        result += hexdigits
    print result   

You can do all of that on one line by using a list comprehension to collect the pairs of hex digit strings into a list and then using the join method with an empty separator string to glue the hex digit strings together into a single string.
    mystring = '\xf0z\xd8[\xfc\x7f'
    result   = ''.join([ '{:02x}'.format(ord(ch)) for ch in mystring ])
    print result

Or instead of a list comprehension you can use map with a lambda to build the list of hex digit pairs.
    mystring = '\xf0z\xd8[\xfc\x7f'
    result   = ''.join(map(lambda ch: '{:02x}'.format(ord(ch)), mystring))
    print result

The map version is harder to read but it might run slightly faster.
","39","<python><encryption><hash><sha256><hashlib>","0","1","1","2018-11-26 21:26:13","53489310","1","","","","","2018-11-26 11:37:14",""
"53967794","Xml validation failed with RSA256with rsa Algorithm","I am trying to validate offline aadhar ekyc XML file with the sample code. But the validation keeps failing, I am not sure if it's the code error or error in the .cer file. 
I am using SHA256withRSA algorithm to validate the XML file as mention in the documentation and sample code.
Same thing happening with Python Code.
Is there any special encoding feed into the validation function?
using System;
using System.Security.Cryptography.X509Certificates;
using System.Xml;


namespace test
{
class MainClass
{


    public static void Main(string[] args)
    {
        // link -> 
//https://drive.google.com/file/d/1aSv3HJUFf5_42Z-FqpdVHEk5b3VA3T3D/view


        string XMLFilePath = ""offlineaadhaar.xml""; //Get the XML file

// link -> 
//https://drive.google.com/file/d/1FW4ciIhZqJuelOcGF2x6VaBCSDO9J-gM/view


string KeyFilePath = ""okyc-publickey.cer""; //Get the public key certificate file

        XmlDocument ObjXmlDocument = new XmlDocument();

        ObjXmlDocument.Load(XMLFilePath); //Load the XML

        XmlAttributeCollection SignatureElement = ObjXmlDocument.DocumentElement.Attributes; //Get the all XML attribute

        string SignatureValue = SignatureElement.GetNamedItem(""s"").InnerXml; // Get Signature value




        SignatureElement.RemoveNamedItem(""s"");//Remove the signature ""s"" attribute from XML and get the new XML to validate

        //Console.WriteLine(SignatureElement);

        /*----------------Read and parse the public key as string-----------------------*/
        X509Certificate2 ObjX509Certificate2 = new X509Certificate2(KeyFilePath, ""public""); //Initialize the public ket certificate file


        Org.BouncyCastle.X509.X509Certificate objX509Certificate;
        Org.BouncyCastle.X509.X509CertificateParser objX509CertificateParser = new Org.BouncyCastle.X509.X509CertificateParser();

        objX509Certificate = objX509CertificateParser.ReadCertificate(ObjX509Certificate2.GetRawCertData());
        /*----------------End-----------------------*/


        //Console.WriteLine(objX509Certificate);

        /* Init alg */
        Org.BouncyCastle.Crypto.ISigner signer = Org.BouncyCastle.Security.SignerUtilities.GetSigner(""SHA256withRSA"");

        //Console.WriteLine(signer);
        /* Populate key */
        signer.Init(false, objX509Certificate.GetPublicKey());


        /* Get the signature into bytes */
        var expectedSig = Convert.FromBase64String(SignatureValue);



        /* Get the bytes to be signed from the string */
        var msgBytes = System.Text.Encoding.UTF8.GetBytes(ObjXmlDocument.InnerXml);


        /* Calculate the signature and see if it matches */
        signer.BlockUpdate(msgBytes, 0, msgBytes.Length);


        Console.WriteLine(msgBytes.Length);


        bool Flag = signer.VerifySignature(expectedSig);

        if (Flag)
        {
            Console.WriteLine(""XML Validate Successfully"");

        }
        else
        {
            Console.WriteLine(""XML Validation Failed"");


        }
    }
}
}

","","38","<c#><xml><rsa><bouncycastle><sha256>","0","","0","2018-12-29 08:03:31","","3","","","","","2018-12-29 08:03:31",""
"57918493","How to Validate a Xero webhook payload with HMACSHA256 python 3","Based on the instructions here (https://developer.xero.com/documentation/webhooks/configuring-your-server) for setting up and validating the intent to receive for the Xero webhook.
The computed signature should match the signature in the header for a correctly signed payload.
But, using python 3, the computed signature doesn't match the signature in the header in any way at all. Xero would send numerous requests to the subscribing webhook url for both correctly and incorrect. In my log, all those requests returned as 401. So, below is my test code which also proved to not match. I don't know what is missing or I what did wrong.
Don't worry about the key been show here, i have generated another key but this was the key assigned to me to use for hashing at this point.
based on their instruction, running this code should make the signature match one of the headers. But not even close at all.
XERO_KEY = 
""lyXWmXrha5MqWWzMzuX8q7aREr/sCWyhN8qVgrW09OzaqJvzd1PYsDAmm7Au+oeR5AhlpHYalba81hrSTBeKAw==""

def create_sha256_signature(key, message):
    message = bytes(message, 'utf-8')
    return base64.b64encode(hmac.new(key.encode(), message, 
                 digestmod=hashlib.sha256).digest()).decode()

# first request header (possibly the incorrect one)
header = ""onoTrUNvGHG6dnaBv+JBJxFod/Vp0m0Dd/B6atdoKpM=""

# second request header (possibly the correct one)
header = ""onoTrUNvGHG6dnaBv+JBJxFodKVp0m0Dd/B6atdoKpM=""
payload = {
    'events':[],
    'firstEventSequence':0,
    'lastEventSequence':0,
    'entropy':
    'YSXCMKAQBJOEMGUZEPFZ'
}
payload = json.dumps(payload, separators=("","", "":"")).strip()
signature = create_sha256_signature(XERO_KEY, str(payload))
if hmac.compare_digest(header, signature):
     print(True)
     return 200
else:
     print(False)
     return 401

","The problem was because when I was receiving the request payload, I was using
# flask request
request.get_json()

this will automatically parse my request data into a json format, hence the reason why the calculated signature never matched
So, what I did was change the way I receive the request payload:
request.get_data()

This will get the raw data. 
","38","<webhooks><python-3.7><sha256><hmac><xero-api>","0","0","1","2019-09-17 06:00:46","","0","","","","","2019-09-13 06:41:17",""
"52437554","Error when using SHA256 via spring in xml config","I'm trying to use java.security.MessageDigest with spring like so.
Bean definition...
    <spring:bean id=""messageDigest"" name=""messageDigest"" class=""java.security.MessageDigest"" factory-method=""getInstance"">
        <spring:constructor-arg value=""${hash.algorithm}""/>
    </spring:bean>

And this is me using the bean...
<invoke name=""invokeMessageDigestDigest"" object-ref=""messageDigest"" method=""digest"" methodArguments=""#[flowVars.myCustomTextOne]"" methodArgumentTypes=""byte[]"" />

This works for me.
The problem is as soon as I try to use this somewhere else in my application like so....
<invoke name=""invokeMessageDigestDigest"" object-ref=""messageDigest"" method=""digest"" methodArguments=""#[flowVars.myCustomTextTwo]"" methodArgumentTypes=""byte[]"" />

I get ...
Failed to instantiate [java.security.MessageDigest]: Factory method 'getInstance' threw exception; nested exception is java.security.NoSuchAlgorithmException: SHA256 MessageDigest not available

I tried to add some magic to the bean definition using scope=prototype because I was thinking it might have something funny to do with bean instantiation but this did not fix the issue.
Can anyone shed any light on this for me?
thanks in advance
","The correct name of the algorithm is SHA-256 as per https://docs.oracle.com/javase/6/docs/technotes/guides/security/StandardNames.html#MessageDigest. SHA256 is just an alias provided by the Bouncycastle library
","38","<spring><sha256>","0","0","1","2018-09-21 08:17:24","52439478","0","","1600419","","2018-09-21 06:13:03","2018-09-21 06:06:39",""
"58137815","read checksum from artifactory given the artifact url","I want to read checksum from artifactory given the artifactory url and append it to an attribute. 
I tried to look for examples but people are hardcoding the checksum value like below. 
If I hardcode the value, I will have to update it when I have new artifact. I do not want to do that.
Please let me know if there is anyway to get this value from artifactory. 
I have a code to compute checksum in the my chef code using digest. I will compare the checksum from artifactory and the checksum I computed in the recipe. 
  source 'http://www.example.com/tempfiles/testfile'
  mode '0755'
  checksum '3a7dac00b1' # A SHA256 (or portion thereof) of the file.
end

To compare the computed checksum with the local checksum, I have seen people hardcoding local checksum value. Instead I want to read it from artifactory through chef. ex: 

```computed_checksum = Digest::SHA2.file(temp.path).hexdigest Artifactory_checksum = Read from artifactory ? 

if Artifactory_checksum != computed_chceksum throws error.....''''

","require 'open-uri'
require 'tempfile'

jar_file = 'https://repo1.maven.org/maven2/mysql/mysql-connector-java/8.0.17/mysql-connector-java-8.0.17.jar'

temp = Tempfile.new
temp << open(jar_file).read
temp.flush

actual_sha1 = Digest::SHA1.file(temp.path).hexdigest

sha1_file = 'https://repo1.maven.org/maven2/mysql/mysql-connector-java/8.0.17/mysql-connector-java-8.0.17.jar.sha1'

expected_sha1 = open(sha1_file).read.strip

p actual_sha1 == expected_sha1


","38","<ruby-on-rails><artifactory><checksum><sha256><chef-recipe>","0","0","1","2019-09-27 17:51:01","","0","","9351683","","2019-09-27 17:44:18","2019-09-27 15:51:03",""
"48218043","can't read sha256 from nested array within mongodb","I have below structure of the mongoose collection.
const sha256 = require('crypto-js/sha256');

    var Temp = new Schema();

    Temp.add({
        item1: String,
        item2: String,
        data: [
            {
                arrItem1: Number,
                arrItem2: String
            }
        ],
        recurData: [Temp],
        currentHash: {
            type: String,
            default: ''
        },
        previousHash: {
            type: String,
            default: ''
        }
    });

I am calculating the currentHash value as below:
return sha256(this.item1 + JSON.stringify(this.data) + this.previousHash).toString();

So, the issue is when I try to read the currentHash value as below and I am getting the output as ""undefined"".
var Temp = new Temp({//Initialised the data});
var latestDocument = Temp.recurData[Temp.RecurData.length - 1];
console.log(latestDocument.currentHash);

Could someone please advise if it's an existing issue or am I doing something wrong ?
","Found out the resolution that the ordering of the properties inside the schema is incorrect. It should be placed as the last property. 
const sha256 = require('crypto-js/sha256');

    var Temp = new Schema();

    Temp.add({
        item1: String,
        item2: String,
        data: [
            {
                arrItem1: Number,
                arrItem2: String
            }
        ],        
        currentHash: {
            type: String,
            default: ''
        },
        previousHash: {
            type: String,
            default: ''
        },
        recurData: [Temp]
    });

","38","<node.js><mongodb><mongoose><sha256>","0","0","1","2018-01-12 03:58:08","48219319","0","","","","","2018-01-12 00:49:36",""
"55100846","why do I get mac_bad_record error with my tls1.2 implementation","so I'm writing my own tls 1.2 implementation for learning's sake and because the server I'm connecting to use a modified version of the protocol that ask for a non random client_random anyway (TL;DR: I'm having a bad_record_mac error on finished message with my implementation and can't find where I made a mistake)
I have to precise the only cipher suite I'm concerned about is TLS_RSA_WITH_AES_128_CBC_SHA
so first I create my client random and the handshake begins with the server sending server_random and the RSA public key in the certificate
I generate a random pre_master_secret and encrypt it with the RSA public key (done by a native module of the language, so no mess up by me on this) and send it back in a client_key_exchange message
I then generate the master_secret from: PRF(pre_master_secret, ""master secret"", client_random+server_random) where PRF is:
class TlsMasterSecret {
    constructor(pre_master_secret, client_random, server_random) {
        this.master_secret = TlsMasterSecret.PRF(pre_master_secret, Buffer.from(""master secret"", ""ascii""), Buffer.concat([client_random, server_random]), 48);
        this.master_secret = this.master_secret.slice(0, 48);
        this.key_block = TlsMasterSecret.PRF(this.master_secret, Buffer.from(""key expansion"", ""ascii""),Buffer.concat([server_random, client_random]), 104);
        // 20 20 16 16
        this.client_write_MAC_key = this.key_block.slice(0, 20);
        this.server_write_MAC_key = this.key_block.slice(20, 40);
        this.client_write_key = this.key_block.slice(40, 56);
        this.server_write_key = this.key_block.slice(56, 72);
    }
    static PRF(secret, label, seed, neededLength) {
        return TlsMasterSecret.P_hash(secret, Buffer.concat([label, seed]), neededLength)
    }
    static P_hash(secret, seed, neededLength) {
        const A = [seed];
        let resultHash = Buffer.from("""", ""hex"");
        // HMAC_SHA256 generates 32 bytes per update
        const iterations = Math.ceil(neededLength / 32);
        // generate A
        for(let i = 1; i < iterations + 1; i++) {
            A[i] = TlsMasterSecret.HMAC_hash(secret, A[i-1]);
        }
        // calculates the hash
        for(let i = 1; i < iterations + 1; i++) {
            resultHash = Buffer.concat([resultHash, TlsMasterSecret.HMAC_hash(secret, A[i])]);
        }
        return resultHash;
    }
    static HMAC_hash(secret, seed) {
        const hmac = crypto.createHmac(""sha256"", secret);
        hmac.update(seed);
        return hmac.digest();
    }
}

then I create the Finished message from 0x1400000c followed by 12 bytes of verify_data
verify_data is generated like this: 
// I strip the record layer headers off the messages
client_hello = 0x0100002f03032668f90d7d3b3420f7712a3004247d233d90cc63fb4b23f77912b31c8c89893b000008002f0035003c003d0100
server_hello = 0x0200002603031296263fba0a7955a83b2bf9c3716c8ee1c52e9065b89ee5649b31391d7ce84700002f00
certificate = 0b00034e00034b00034830820344308202ada00302.......
server_hello_done = 0e000000
client_key_exchange = 100000820080673f1772e35c7565a1e0c2fae5ee1b5bf92211ba9e4de14620f43856d954cf737aa04c48f8b2ffa182f652fedd68523056acda3c7cd101c5a2c3a625655df67ad9fb7ca082cf68476f174ea7b83eab980b7b15657036ad0e26883c9bfe368847a02b052817cb80dabafc6af1dac8064ea0dc676e0f8ea74f84a122135f31b612

handshake_messages = client_hello + server_hello + certificate + server_hello_done + client_key_exchange

verify_data = PRF(master_secret, ""client finished"", sha256(handshake_messages))[0..12]

then I create the MAC that will go along this message:

// hmac_sha1(secret, seed)
// seq_num is a uint64 @ 0 for the first message, 0x00000000
// type = 0x16
// version = 0x0303
// length = 0x0010
// content = 0x1400000c + verify_data
MAC = hmac_sha1(client_write_MAC_key, seq_num + type + version + length + content)
plaintext = content + MAC

IV = randomBytes(16)

// aes_128_cbc(key, IV, message)
ciphertext = aes_128_cbc(client_write_key, IV, plaintext)

final = 0x16 + 0x0303 + 0x0040 + IV + ciphertext

if you read all of this and still willing to help thank you so much
I think I followed the specification but I'm getting a bad_record_mac error in wireshark so there's something wrong somewhere, I just can't find it :(
","","38","<node.js><aes><tls1.2><sha1><sha256>","0","","0","2019-04-15 16:06:05","","1","","","user11290143","2019-04-15 16:06:05","2019-03-11 11:27:43",""
"51571145","Enabling Content-Security-Policy on a minimal web app","I'm new to CSP and my goal is to enable the simplest possible CSP header. 
Based on reading the spec and MDN docs I thought my app should work but unfortunately no luck on Chrome Canary v70. 
I setup a minimal repo to reproduce. Can you see where I've gone wrong?
","Turns out I was misunderstanding the details a bit. I'll post my solution here in case it helps someone else in the same boat.
My goal is to serve a React SPA with CSP enabled. The app happens to use Material-UI, which uses JSS, which injects inline styles - which of course are blocked by default with CSP.
Because it's a static SPA for the frontend and modifying HTTP headers is out of scope of the SPA, I instead generate a nonce on the web server. The nonce gets injected into the CSP HTTP Header and also in the index.html  tag consistent with what JSS expects.
The upside is CSP is protecting the SPA, and we don't have to use unsafe-inline escape hatch. The downside, but a small one, is that index.html is dynamic now and can't be cached. But seeing as the file is already tiny (<1kb) the benefits of CSP seem worth that tradeoff.
","38","<http-headers><sha256><content-security-policy>","-1","0","1","2018-07-30 12:19:03","","0","","","","","2018-07-28 11:55:34",""
"58344459","SHA256 on Linux 4.4 embedded real-time system","I am currently working with a real-time embedded system using custom Linux 4.4.115 provided by our vendor. Out of the box, it supports MD5 hashing, but we have a requirement of SHA256. The hashing is purely for user account login. 
I was able to install OpenSSL on the box. I can create the SHA256 hash of a password but I am unsure about how to set it as a user account password. I've tried putting the hashed password in /etc/passwd but that obviously doesn't work. So after research I discovered I need to put it in the /etc/shadow file. This file does not exist on this system which means the Shadow package is not installed. 
I went to install the Shadow package but I've run out of space. Is there anyway that I can use this SHA256 password without the /etc/shadow file? Recompiling the kernel is a last resort, we'd like to avoid that.
","Honestly you might have to just recompile the kernel so you can get the shadow package. From experience and all the research I'm seeing online I don't see any other way of storing the SHA256 user passwords without the /etc/shadow file path. Obviously if you're root you can $ sudo passwd user to change / set the user passwords to the hashed SHA256 passwords but the only place that I'm seeing them ever stored is the /etc/shadow file.
The only reason I say that is because the only way I know of verifying the data for the user passwords is pwck -r /etc/shadow & pwck -r /etc/passwd so without those file paths I don't see any other way of storing / verifying the user password data.
Have you tried the pwconv command to create the /etc/shadow file from the /etc/passwd file?
","37","<security><real-time><embedded-linux><sha256>","1","0","1","2019-10-11 22:50:45","","1","","168986","","2019-10-11 20:19:01","2019-10-11 15:32:51",""
"54654836","Few strings are failed to encrypt using AES256 in Java","This specific case is coming whenever i tried to encrypt single char strings in application. When i tried to encrypt the same string with main method then i was able to encrypt it. But when i run with the application then this specific issue is coming. I felt this is strange because it is working with the main method.
My encryption code will be as follows.
public static String encryptWithAES256(String strToEncrypt) throws Exception
{
    MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
    byte[] encodedhash = digest.digest(KEY.getBytes(StandardCharsets.UTF_8));
    IvParameterSpec ivspec = new IvParameterSpec(Arrays.copyOf(KEY.getBytes(),16));
    SecretKeySpec secretKey = new SecretKeySpec(encodedhash, AES_ENCRYPTION_ALGORITHM);
    Cipher cipher = Cipher.getInstance(CIPHER_TRANSFORMATION);
    cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivspec);
    return new String(Base64.encodeBase64(cipher.doFinal(strToEncrypt.getBytes(CHARACTER_ENCODING))));
}

","","37","<java><encryption><aes><sha256>","0","","0","2019-02-12 16:41:49","","5","","","","","2019-02-12 16:41:49",""
"57815949","Override default algorithm in RSA object to support OaepSHA256 padding","Creating RSA or RSACryptoServiceProvider object in .Net 4.6 is defaulting KeyExchangeAlgorithm RSA-PKCS1-KeyEx which supports only OaepSHA1 padding. 
Getting ""Specified padding mode is not valid for this algorithm"" on trying to use other padding like ""OaepSHA256"".
Is there a way to override algorithm in RSA object to an algorithm that supports this padding to make it supportive for all paddings.

UPDATE
RSACng works. In my scenario I am using containerkey to store private key in the machine using RSACryptoServiceProvider to retrieve private key when required using containerkey name. As a workaround to use RSACng I am importing properties exporting from RSACryptoServiceProvider object like shown below. Is there a better way to do this?   
using (var rsa = new RSACryptoServiceProvider(cspParams))
            {
                using(var rsaCng = new RSACng())
                {
                    rsaCng.ImportParameters(rsa.ExportParameters(true));

                    decryptedResult = rsaCng.Decrypt(encryotedText, RSAEncryptionPadding.OaepSHA256)
                }
            }

","RSA supports OaepSHA256 in .NET Framework since .NET Framework 4.6 and in .NET Core since 1.0 (as well as OaepSHA1, OaepSHA256, OaepSHA384, OaepSHA512 and the standard for PKCS#1, see the documentation here).
As for support in older versions of .NET Framework - I don't believe it's possible because the Cryptography API treats cryptographic algorithm implementations as opaque black-boxes without much room for extensibility (i.e. you can't really subclass an existing implementation, but you can reimplement your own easily enough). I note this is partly because the API simply wraps Windows' built-in crypto functionality which is opaque anyway (like how System.Drawing wraps GDI without much room for extension there either).
As for the ""Specified padding mode is not valid for this algorithm"" error - the issue is you're using RSACryptoServiceProvider instead of RSACng. You should prefer the Cryptographic-Next-Generation (Cng) implementations over CryptoServiceProvider implementations, see this article for more details.
If you're targeting .NET Framework 4.6 or later, or .NET Core 1.0 or later, you can use it like so:
using Sytem.Security.Cryptography;

Byte[] inputPlaintext = ...
RSAEncryptionPadding oaepsha256 = RSAEncryptionPadding.OaepSHA256;
using( RSA rsaImpl = new RSACng() )
{
    Byte[] ciphertext = rsaImpl.Encrypt( inputPlaintext, oaepsha256 );
}

","37","<c#><rsa><sha256><rsacryptoserviceprovider>","1","2","1","2019-09-06 05:23:27","","7","","9916788","","2019-09-06 05:23:27","2019-09-06 04:56:34",""
"55407006","Cannot correctly encode string when reading from text file (encoding into sha256...)","Basically what I want to accomplish (simplified...):
I want to make 100 bitcoin addresses from my own password that look kind of like:
password_1
password_2
password_3
So when I do this in the program, I am getting the correct result: 
def public_key(src):
    privatekey = (int(hashlib.sha256(src).hexdigest(), 16))
    return generate_address(privatekey)
def private_key(src):
    privatekey = hashlib.sha256(src).hexdigest()
    return str(privatekey)
herewego = ""password_1"".encode('utf-8')
somevariable = public_key(herewego)
print somevariable 

^ This works as intended...but if I put ""password_1"" in a txt file and try to read this line, it gives totally different result? 
for addr in file:
 address =  addr.encode('utf-8')
 print public_key(address)

So the issue is obviously that Notepad encodes the text file in say ansi or utf-8, it doesn't matter but the line read from there must be looking different to python than when I enter the "" ...."" within python? So what coding to use or if it's impossible: what alternative to Notepad? This is for Python 2.7 in windows by the way.
","There might be newline characters, you could try 
for addr in file:
address =  addr.rstrip('\n').encode('utf-8')
print public_key(address)

","37","<python><blockchain><bitcoin><sha256><ecdsa>","1","0","1","2019-03-28 21:33:33","55407176","0","","","","","2019-03-28 21:19:56",""
"57855713","Porting SHA 256 to Excel. A question: Argument as Binary, not ASCII","I am writing an a question about this code: 
Porting SHA-256 library to Excel
If I use the above function in Excel, I am not doing a SHA on the binary data, but in the ASCII representation of the data. As I want to ""mine bitcoin in Excel"" (only a didactic experiment , of course) I need to pass a binary string to this function, proper sequence of 0 and 1 bits, instead of ascii representation of 1 (4 bits). 
I can do that in the excel cells or It can be a VBA code, it doesn't matter to me. 
Here the excel I used:
https://drive.google.com/file/d/1Qdy_PpUj4ZWLGBXCsSSBmQgTMhQITLVz
The SHA256 function that I am  using in the excel sheet is hashing the binary as a text rather than using the bits from it. This results in the output of this excel function being different from the desired one. Below is a simple example in python that will illustrate it.
import hashlib
string1 = '876dd0a3ef4a2816ffd1c12ab649825a958b0ff3bb3d6f3e1250f13ddbf0148cc40297f730dd7b5a99567eb8d27b78758f607507c52292d02d4031895b52f2ff'
string

hashlib.sha256(bytes.fromhex(string1)).hexdigest()
>>> 'cd93fc352d3b9f27392b3052c61190609fdc80194ade62771ce9588808980be9'

hashlib.sha256(string2.encode('utf-8')).hexdigest()
>>> 'c9aee68969373b4aecc87382fb2aa28276c6b9a9bfb6956615b4b29eb14d51d2'

The first output is the actual one you should get from the first round of hashing. The second output is the one that I am getting from the excel function. That is because this function is hashing that binary in the same way as hashing a string like 'hello world'.
So I need to transform the input value in this excel function from text to binary data before doing the sha round. 
Link to my issue on Stackexchange: https://bitcoin.stackexchange.com/questions/90259/merkle-root-for-block-100000-calculation-in-excel
Thanks
Various CHAR()/CODE() manipulations on the argument of the function, but I failed.
Additional details on the provided StackOverflow example.
","","37","<excel><sha256>","0","","0","2019-09-09 14:26:07","","2","0","12041783","","2019-09-09 14:26:07","2019-09-09 14:08:48",""
"54581205","ruby and javascript hmac signatures do not match giving same values","i am trying to conect my backend in ruby on rails with and end point and it asks for hmac signature of every request. they gave me an .html with some javascript that returns in the explorer console their value of hmac given a key and a payload, but when i do the equivalent code in ruby on rails it gives me a diferent value given the same parameters. next i am pasting the html AND my code in ruby, i need my ruby code to give the javascript answer.
i have tried changing the encoding of the inputs o my code to ascii, iso8859-1, and utf-8.
i have comprared my hmac answer to answers given by multiple hmac generator in the internet and they give my answer exepto for 1 page whitch gives the javascript answer.
this is the one that gives de javascript answer: https://www.liavaag.org/English/SHA-Generator/HMAC/
this is the javascreipt from the third party
function toHex (message) {
 var str = '', c;
 for (var i = 0; i < message.length; i++) {
  c = message.charCodeAt(i);
  str += c.toString(16) ;
 }
 return str;
}

function sign(originalMessage, key){
 var message =toHex(originalMessage);
 var signature, hmac;    
 hmac = new sjcl.misc.hmac(sjcl.codec.hex.toBits(key), 
sjcl.hash.sha256);
 signature =sjcl.codec.hex.fromBits(hmac.encrypt(sjcl.codec.hex.toBits(message)));
  return signature;
}

this is my code:
    def toHex(message)
      str = ''
      caracter = 0
      cont = 0
      while(cont < message.length) do
        caracter = message[cont].ord
        str = str + caracter.to_s(16)
        cont = cont + 1
      end
      return str
    end
def sign(original_message, key)
  #byebug
  message = toHex(original_message)
  signature = ''
  signature = OpenSSL::HMAC.hexdigest(""SHA256"", key, message)
  return signature
end

","","37","<javascript><ruby><openssl><sha256><hmac>","0","","0","2019-06-06 16:08:01","","3","","","","","2019-02-07 19:49:38",""
"54606597","Is md5's padding the same that sh256?","I am trying to code in C both algorithms md5 and sha256 using the multiple documentations I found on the internet. 
My md5 seems to work fine, but not my sha256.
Here is what I am trying to figure out, Is the padding step exactly the same for both of those algorithms or am I missing something ?
echo -n toto | ./md5
01110100 01101111 01110100 01101111 10000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000
00100000 00000000 00000000 00000000 00000000 00000000 00000000
00000000
f71dbe52628a3f83a77ab494817525c6

echo -n ""toto"" | ./sha256
01110100 01101111 01110100 01101111 10000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000
00100000 00000000 00000000 00000000 00000000 00000000 00000000
00000000
cda8272de630c5dd9770c5f5030d2d53650b6e986229d21291c5803ff4da592c

Here is my data after padding, the md5 is fine with this, but sha256 is not, and I am wondering if my error could come from a misunderstanding of this step.
thank you !
","When you add message length (after padding) MD5 uses little-endian, but SHA256 uses big-endian. Paddings are not the same.
","37","<algorithm><hash><md5><padding><sha256>","1","0","1","2019-02-09 23:04:08","","0","","","","","2019-02-09 13:17:37",""
"54147778","Can we use sha256 directly in sql query string?","I'm working on a project that requires 10000 records to be inserted in mysql table with one sql query and it is inserting it alright with simple for loop along with a serial number from php script. Where I'm stuck is that I want to concatenate my serial number with freshly generated value of sha256. All its doing is generating serial upto 10000 and concatenating one similar hash value but what I require is each generated serial number is to concatenate with different hashes (sha256) and inserted into table with that single query. I think it would be more easier to do if sha256 is directly carried inside sql query? Any help is highly appreciated! Thanks!  
","","36","<mysql><sql><sha256>","0","","0","2019-01-11 14:43:58","","1","","6234225","","2019-01-11 14:43:58","2019-01-11 13:46:22","2019-01-12 07:54:04"
"56961880","passlib checksum doesn't verifies with SHA2 of MySQL","I am using vernemq to authorize users from database using SHA256 algorithm. I observe that when creating new entry in table using buildin mqsql function SHA2,
INSERT INTO vmq_auth_acl 
    (mountpoint, client_id, username, 
     password, publish_acl, subscribe_acl)
SELECT 
    '', 'newUser2', 'newUser2', SHA2(""CJJPL9"", 256), 
     '[{""pattern"":""botOut""}] ', 
     '[{""pattern"":""botIn/#""}]';

which generates hash value something like this 54d0e30d0a00d86451a3353a2123fc1f006faaba6b55ef0d168390f26cbab82a and Vernemq server successfully verifies this user when logged in using CJJPL9 password. 
But when I add this entry into this table from python code using passlib library sha256_crypt.encrypt(""CJJPL9""), which generates hash as follows 
 $5$rounds=80000$wnsT7Yr92oJoP28r$cKhJImk5mfuSKV9b3mumNzlbstFUplKtQXXMo4G6Ep5. I know, due to salt, the hashs will be different, but there is a clear difference in the formatting of both hashes and as a result, verneMQ server fails to verify the credentials for this user. The formatting of passlib library says that it keeps only 43 characters from 256-bit checksum. I also tried testing by only keeping the checksum part of the passlib hash string, but still no luck.
I want to know what is the difference between encryption of MySQL SAH2(""CJJPL9"", 256) and sha256_crypt.encrypt(""CJJPL9""). 
","","36","<mysql><hash><sha256><passlib><mqtt-vernemq>","0","","0","2019-07-10 00:12:18","","8","","","","","2019-07-10 00:12:18",""
"56248866","Artifactory Upgrade from 4 to 6 - SHA256 re-indexing takes very long","I am upgrading Artifactory Pro from 4.12.2 to 6.5.2. On my test instance, with around 12k artifacts, the re-indexing of the database after the upgrade takes around 12 hours. I'm afraid in my prod instance it will take close to a month (around 800k artifacts). 
- Has anyone seen this before? I did not find any articles that would indicate such a long time
- Is there a way to tune parameters to speed up the indexing?
- Is there a way to predict how much time my prod indexing would take? If it is based on number/size/type of artifacts?
Specifications:
Artifactory in HA mode installed on linux server. DB MSSQL 2016. Filestore - NAS shared mount between the HA nodes. Upgrading from 4.12.2 to 6.5.2.
","Firstly, as you state you have Artifactory with HA, leads me to that you have an Enterprise subscription. Please note that Enterprise subscription allows you to contact the JFrog Support-Team at support@jfrog.com. 
Now with regards to your scenario and questions, please note that JFrog mentions in their wiki page regarding SHA-2 migration, that the process is ""resource intensive operation"".
As you mentioned, the process can indeed take weeks/months for big filestores, but it can be tweaked by using the system properties mentioned on the same wiki page.
If you do decide to tweak it and add more workers for example, I highly recommend you to keep monitoring your database, as if the SHA2 migration will cause an impact on the database performance, your production can be affected. 
As for statistics, there is no way to predict the time this process can take as it depends on the workers you specified for the job, the resources the instance has, etc.. 
I hope this clarifies further. 
","36","<upgrade><artifactory><sha256><reindex>","0","4","1","2019-05-22 13:03:10","","0","","","","","2019-05-22 03:23:12",""
"26511461","Is it possible to infer on the complexity of the input text of a sha256 hash?","Consider the following example:
require(digest)

text_short <- ""The short text.""
text_long <- ""The long text. This is a longer text for the purpose of testing.""

text_short_hashed <- digest(text_short, algo=""sha256"")
[1] ""6e504cb5660d8614be9465a3a9c0e0db9889d897cfd9e7432f98e5df566e9e95""
text_long_hashed <- digest(text_long, algo=""sha256"")
[1] ""25face2d475dcb2b547f85a0109ae3a506385dcb72f639af1a354220d91a9426""

Is there any way to calculate or estimate the complexity of text_short and text_long based on their hashes: text_short_hashed and text_long_hashed? Complexity could be the length.
Thanks.
","No. The point of a secure hash is that you can't extract any information about the original text from the hash. 
","36","<r><complexity-theory><sha256>","0","3","1","2014-10-22 15:43:19","","0","","","","","2014-10-22 15:39:48",""
"51141283","Reimplementation of an old c++ project that uses SHA2 in nodejs?","I've to convert an old c++ project in nodejs. That project relies in sha2 (polarssl) to do some cryptography. I tried to do this using crypto but I failed since the outputs are completely different.  
//here i declare 2 keys
unsigned char key1[] = {0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F};
unsigned char key2[] = {0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC};
sha2_context sha_ctx;


// Part 1: Compute the key with key1 and key 2
sha2_starts( &sha_ctx, 0 );
sha2_update( &sha_ctx, key1, sizeof(key1) );
sha2_update( &sha_ctx, key2, sizeof(key2) );
sha2_finish( &sha_ctx, digest );


// Part 2: The HMAC SHA-2 HMAC start
sha2_hmac_starts( &sha_ctx, digest, 32, 0 );

// SHA-2 Update
sha2_hmac_update( &sha_ctx, buffer, 16 );

// SHA-2 Finish
sha2_hmac_finish( &sha_ctx, digest );

Here's my attempts:

Using crypto HMAC (I tried it even if I thought it was not the correct way)

var  {key1, key2, key_expected, key_expected_hex} = common;
// They use http://asf.atmel.com/docs/latest/uc3c/html/sha2_8h.html
function test(){
    var hmac = crypto.createHmac('SHA256', new Buffer([0x00]))
    hmac.update(key1);
    hmac.update(key2);
    var r = hmac.digest('hex');
    console.log({
        output: r,
        expected: key_expected_hex
    })
    return r === key_expected_hex;
}


Using npm 'sha2' library

const {SHA256} = require(""sha2"");
function test(){
    var hmac = SHA256(key1);
    hmac = SHA256(key2);
    console.log(hmac);
    var r = hmac.toString('hex');;
    console.log({
        output: r,
        expected: key_expected_hex
    })
    return r === key_expected_hex;
}

Can someone help me out pointing me in the right direction?
","In node.js the Part 1 consisting of computing the key for the hmac used in Part 2, should not use hmac but only sha256 as in the C++ code :
const crypto = require('crypto');

const key1 = new Buffer([0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F]);
const key2 = new Buffer([0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC]);

// Part 1: Compute the key from key1 and key2                                   
var h = crypto.createHash('sha256');
h.update(key1);
h.update(key2);
var keyForHmac = h.digest();
console.log('key:  ' + keyForHmac.toString('hex'));

// Part 2: The HMAC SHA-256                                                     
var buffer = new Buffer([/* data to be HMACed */]);
var hmac = crypto.createHmac('sha256', keyForHmac);
hmac.update(buffer);
var hmacDigest = hmac.digest();
console.log('hmac: ' + hmacDigest.toString('hex'));

","35","<c++><node.js><sha256>","0","0","1","2018-07-02 21:20:41","51143127","1","0","1084568","","2018-07-02 21:20:41","2018-07-02 17:44:57",""
"58232535","How to SHA-256 hash text in a chrome extension with SubtleCrypto","I am hashing a text field with Subtle Crypto and getting an [object ArrayBuffer].
The relevant code is here:
async function asyncCall() {
  var enc = new TextEncoder(); // always utf-8
  var enc2 = new TextDecoder(); // always utf-8
  var digest3 = enc.encode(localStorage.getItem(""Item 1""));
  const digest2 = await crypto.subtle.digest(""SHA-256"", (digest3));

  localStorage.setItem(""Item Hashed"", (digest2));
  field2.value = localStorage.getItem(""Item Hashed"");
};

When I hash any text (""Item 1"" is localStorage text that is defined with a text field) with this, I get [object ArrayBuffer] as the result. Why am I not getting something that looks like a SHA256 hash?
","","35","<javascript><google-chrome-extension><hash><sha256>","0","","0","2019-10-04 08:23:19","","2","1","","","","2019-10-04 08:23:19",""
"49084875","SHA-256 checksum error while installing gnuplot","I unfortunately keep getting this error, while trying to install gnuplot (with x11) - even after deleting the announced file an try it again...

Does anybody have an idea how to solve this problem?
","Not sure if it will work for you, but first do this:
brew cleanup && brew update 

and then try again. More info in here. Hope it helps!
","34","<gnuplot><sha256><gnuplot-iostream>","0","0","1","2018-03-03 20:27:49","","0","","5964833","","2018-03-03 20:27:49","2018-03-03 13:52:12",""
"56945404","define hash cod SHA256 NodeJS","How to select the hash code on NodeJS?
I have a system made in another language with passwords on SHA256
The function there is:
#define HASH_CODE = 'WEASDSAEWEWAEAWEAWEWA';
SHA256_PassHash(HASH_CODE, password, 64);

First, param is the hash code, second is the var will be encrypted, third is the base64
I made the encrypt on NodeJS, but I have no control on hash code, so the systems don't make the same hash, how to select the code on the register on NodeJS so the system communicates with others?
const code = 'WEASDSAEWEWAEAWEAWEWA';
const normal = 'anne';
const crypto = require('crypto');
const encrypted = crypto
     .createHash('sha256')
     .update(normal)
     .digest('base64');
console.log(encrypted);

A exemple of compatibly code, this login on PHP
login.php
<?php require_once('../mysql_conn.php'); ?> 
    <?php
    session_start();
    $HASH_SENHA = 'WEASDSAEWEWAEAWEAWEWA';

    if(isset($_SESSION['Username']))
    {
        header(""location: ../myaccount.php"");
        exit();
    } 
    if(isset($_POST['usr']) && isset($_POST['psw']) && isset($_POST['botao'])) 
    { 
        $usuario = mysqli_real_escape_string($MYSQL_CONNECT, $_POST['usr']);  
        $senha = strtoupper(hash(""sha256"", $_POST['psw'] . $HASH_SENHA));  
        $query = mysqli_query($MYSQL_CONNECT, ""SELECT * FROM accounts WHERE Username='$usuario' AND Senha='$senha' LIMIT 1"");  

        if(mysqli_num_rows($query) < 1)  
        {
            echo ""<script type=\""text/javascript\"">
                        alert('Incorrect Username or Password.');
                        window.location = '../login.php';
                  </script>"";
            exit();
        }
        else 
        {
            //login efetuado 
            $dados = mysqli_fetch_assoc($query);  


            if (isset($_SESSION['loc'])) {
                header(""location:"".$_SESSION['loc']);
            }
            else header(""location:../index.php"");

        }  
    }
    ?> 

","By looking at the PHP code you've provided.
hash(""sha256"", $_POST['psw'] . $HASH_SENHA)

It's hashing the string concatenation of $_POST['psw'] and $HASH_SENHA
So, the equivalent code in Node.js should look like below
Node.js
const crypto = require('crypto');
const code = 'WEASDSAEWEWAEAWEAWEWA';
const input = 'password 123';

const encrypted = crypto
     .createHash('sha256')
     .update(input + code)  // concatenation
     .digest('hex');        // get hash in hex format

console.log(encrypted);

Output
3b3107f01da624da6bb014abe532aa7416869811ebe321784b26770cd2dd74ff

","34","<node.js><sha256><sha>","0","0","1","2019-07-10 04:47:58","56963565","3","","11751693","","2019-07-09 17:04:57","2019-07-09 04:34:48",""
"35613059","iOS API key From Ruby Code","I have this code in Ruby which generates a Digital Signature based on an API KEY and some content, i have try to create some iOS code to replicate this but no success can someone help me out.
Ruby
key = ""ZSyEULZSKlZS/SxjUbKG1cly10gyv68hvOeIYV6QLBM="".unpack('m*').to_s
hmac = HMAC::SHA256.new key
s = ""some\nrandom\data\n""
hmac << s
ds_coded = [hmac.digest].pack('m*')

iOS
const char *cKey  = [@""ZSyEULZSKlZS/SxjUbKG1cly10gyv68hvOeIYV6QLBM="" cStringUsingEncoding:NSASCIIStringEncoding];
const char *cData = [@""some\nrandom\data\n"" cStringUsingEncoding:NSASCIIStringEncoding];
unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];
CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey),cData , strlen(cData), cHMAC);
NSData *HMAC = [[NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];
NSString *hash = NSString *hash = [HMAC base64EncodedStringWithOptions:0];

Both digital signature are always different. What can i change in my iOS code to make it the same as the Ruby code.
thanks
","This what at the end worked for me. 
NSData *saltData = [[NSData alloc] initWithBase64EncodedString:key options:0];
NSData *paramData = [somdata dataUsingEncoding:NSASCIIStringEncoding];
NSMutableData* hash = [NSMutableData dataWithLength:CC_SHA256_DIGEST_LENGTH ];
CCHmac(kCCHmacAlgSHA256, saltData.bytes, saltData.length, paramData.bytes, paramData.length, hash.mutableBytes);
NSString *base64Hash = [hash base64EncodedStringWithOptions:0];

","34","<ios><ruby><digital-signature><sha256><hmac>","0","0","1","2016-02-25 14:53:19","","3","","2199955","","2016-02-24 21:33:52","2016-02-24 21:04:11",""
"54972582","SHA256 is not generating right hash in php","Following is the procedure for generating a sha256 based hashed. 
Generated Hash
The hash query string parameter is to be followed by the generated hash for that specific request. To generate the hash:

Take the body of the HTTP POST request
Add the provided API Secret to the end of the body
Converts it to SHA256 and converts the hashed message to hexadecimal format

For example, assuming the provided API Secret is ""secretapikey"" and the HTTP POST body contains the following:
{ ""apiKey"": 123, ""invoiceId"": 1 }
The generated hash will be:
d48cf8a852713844603d7c8cbefb3e81cfb29e7540d98f06affdf58322c1038e
Below is the steps taken to produce the above generated hash:
HTTP POST Body =>   { ""apiKey"": 123, ""invoiceId"": 1 }
Secret  => secretapikey
Text to be hashed   => { ""apiKey"": 123, ""invoiceId"": 1 }secretapikey
SHA-256 Hash    => d48cf8a852713844603d7c8cbefb3e81cfb29e7540d98f06affdf58322c1038e
I have to concatinate two strings ({ ""apiKey"": 123, ""invoiceId"": 1 }secretapikey) and then hash them to send to an api end point. But the Hash generated by following code is not according to hash generated by an online sha256:-
$secretapikey = ""secretapikey"";
$postbody = array();
$postbody['apiKey'] = ""123"";
$postbody['invoiceId'] = 1;

$jpb = json_encode($postbody);

$hashed = $jpb.$secretapikey; //Here is Problem. It is not concatenated according to requirement


$result = hash('SHA256', $hashed);

echo $result;

This is the value of $result
d2c5d184be42ff4ae3a0046d0727c026f38c1e92f8960cb9d17d496c7b89b7b3

whereas it should be 
d48cf8a852713844603d7c8cbefb3e81cfb29e7540d98f06affdf58322c1038e

","hash('SHA256', $hashed); is doing its job right
and $hashed = $jpb.$secretapikey; is joining the two strings correctly.
The reason you don't get the hash you expect is that the JSON you use for the test is
{ ""apiKey"": 123, ""invoiceId"": 1 }
while the JSON produced by json_encode($postbody);
is {""apiKey"":123,""invoiceId"":1}
without spaces.
","34","<php><string><sha256>","0","2","1","2019-03-03 19:58:24","","1","","1579327","","2019-03-03 19:58:24","2019-03-03 19:04:01",""
"31285260","convert String in unknown format","i have this string in sha256
3249c65b5da8899116f55e99c000467c28e6dc4fb955e666f61c40068284bce7
And I could not turn it converted in this formula
1436328553-oALyBXPB7Pl88GTlICgFOWQbgbCnb7X6mLIldxlbBxq5Gfkqng6LnWHf2YLA5P58-134303-1342760
watch the second string egal of this
7a918b6eaac0c00abc20463adcbe0a7424ebc2647c0f96e79a7ce8d16e1c0f9b
but to the Hmac512 Hashing i will convert the first to second format to get the valid hash
please help me i'm beginner please
thnx
","","34","<hash><sha256><sha2>","0","","0","2015-07-08 06:41:42","","8","","","","","2015-07-08 06:41:42",""
"48776275","JavaScript Max Information Density","Simple question:
I need to store a signed 32-bit integer as a string and convert it back later, the more information density / shorter the string the better. The code that I'm already using is
var num;
var str = num.toString(36);
var num2 = parseInt(str, 36);

The default radix used in toString is 10 and the max radix is 36. Is there a way to use a greater radix, hopefully even 128 or 256?
Less simple question:
I'm using this to store a SHA-256 hash, which is an array of length 8 with 32-bit elements. Is there a more efficient storage method for this over a comma-delimited list of the above strings?
","","34","<javascript><tostring><sha256><information-theory>","0","","0","2018-02-13 22:58:04","","9","","5279386","","2018-02-13 22:58:04","2018-02-13 21:53:42",""
"39224726","Bash Whitespace being calculated","I am having issues with this script taking using the whitespace from my file that contains a list of words with each word on a separate line, I have double check and after each word there is a simple (return) no space yet the script is still calculating with whitespace 
ok at that hash then type in:
""hello
""
So hello followed by enter to start a new line. Look at that hash value
That is what I am getting a hash value that is a sting + the enter. As a result my script isnt working the way it is supposed to. Can anyone help.
","echo outputs with enter
You can use 
 echo -n ""$test2"" | sha256sum

","33","<bash><hash><sha256><sha>","0","1","1","2016-08-30 13:21:50","","0","","6773778","","2016-08-30 13:21:50","2016-08-30 10:15:06",""
"53121802","Does changing certificate invalidate all secret generated with IdentityServer4.Models.Secret Sha256() method?","I'm currently building my web application with identity server 4. I dynamically create clients with a secret generated with Sha256() method of identityserver 4.
However, i'm worrying that when i will renew or change my certificate all those secret will be invalidate which will pose a serious problem.
Are SHA256 linked with the certificat ? Or only Token will be invalidate?
Thanks!
","No, the signing credential used for token signing and validation has nothing to do with the hashing of secrets.
","33","<.net-core><identityserver4><sha256>","0","0","1","2018-11-02 16:43:31","","0","","","","","2018-11-02 15:48:15",""
"57873061","SignedData giving Invalid algorithm specified.exception","I tried to sign and valid my signed data using myCert.pfx file private and public key. But while signing the data I am getting "" Invalid algorithm specified."" exception
.Net framework we are using is 4.5 and the code is as below
public static void CallMainMethod()
{
    string str = ""Sign and verify the data"";
    X509Certificate2 certificate = LoadPrivateKey();

    byte[] hashBytes = GetDataHash(str);
    byte[] signature = GetDigitalSignature(hashBytes);
} 

 private static X509Certificate2 LoadPrivateKey()
{
    return new X509Certificate2(@""d:\Keys\myCert.pfx"", ""Pass#@123"");
}

 private static byte[]  GetDataHash(string sampleData)
{
    //choose any hash algorithm
    SHA256Managed managedHash = new SHA256Managed();
    return managedHash.ComputeHash(Encoding.Unicode.GetBytes(sampleData));
}

private static byte[] GetDigitalSignature(byte[] data)
{
    X509Certificate2 certificate = LoadPrivateKey();
    RSACryptoServiceProvider provider = (RSACryptoServiceProvider)certificate.PrivateKey;   
    return provider.SignHash(data, ""SHA256"");
}

","I believe that legacy RSACryptoServiceProvider doesn't support SHA2 algorithms. Rewrite last method as follows:
private static byte[] GetDigitalSignature(byte[] data)
{
    X509Certificate2 certificate = LoadPrivateKey();
    RSA provider = certificate.GetRSAPrivateKey();   
    return provider.SignHash(data, ""SHA256"", RSASignaturePadding.Pkcs1);
}

This style is preferred as of .NET Framework 4.6 and above (@bartonjs, please correct me if I'm wrong in regards to .NET version).
","33","<c#><x509certificate><sha256><x509certificate2><pfx>","1","1","2","2019-09-12 15:49:03","","0","","5195739","","2019-09-11 07:37:20","2019-09-10 14:32:42",""
"57873061","SignedData giving Invalid algorithm specified.exception","I tried to sign and valid my signed data using myCert.pfx file private and public key. But while signing the data I am getting "" Invalid algorithm specified."" exception
.Net framework we are using is 4.5 and the code is as below
public static void CallMainMethod()
{
    string str = ""Sign and verify the data"";
    X509Certificate2 certificate = LoadPrivateKey();

    byte[] hashBytes = GetDataHash(str);
    byte[] signature = GetDigitalSignature(hashBytes);
} 

 private static X509Certificate2 LoadPrivateKey()
{
    return new X509Certificate2(@""d:\Keys\myCert.pfx"", ""Pass#@123"");
}

 private static byte[]  GetDataHash(string sampleData)
{
    //choose any hash algorithm
    SHA256Managed managedHash = new SHA256Managed();
    return managedHash.ComputeHash(Encoding.Unicode.GetBytes(sampleData));
}

private static byte[] GetDigitalSignature(byte[] data)
{
    X509Certificate2 certificate = LoadPrivateKey();
    RSACryptoServiceProvider provider = (RSACryptoServiceProvider)certificate.PrivateKey;   
    return provider.SignHash(data, ""SHA256"");
}

","While @Crypt32 gave the best answer (upgrade to .NET Framework 4.6 or better and use GetRSAPrivateKey() and the better version of SignData -- it's been out over 4 years at this point), if you really need to stay on net45, your easiest answer is to open the PFX with X509KeyStorageFlags.Exportable and copy the key into a better provider.
return new X509Certificate2(@""d:\Keys\myCert.pfx"", ""Pass#@123"", X509KeyStorageFlags.Exportable);

...
RSA legacyProv = (RSA)certificate.PrivateKey;
RSACryptoServiceProvider provider = new RSACryptoServiceProvider();
provider.ImportParameters(legacyProv.ExportParameters(true));
return provider.SignHash(data, ""SHA256"");

","33","<c#><x509certificate><sha256><x509certificate2><pfx>","1","0","2","2019-09-12 15:49:03","","0","","5195739","","2019-09-11 07:37:20","2019-09-10 14:32:42",""
"58440446","Compute HMAC_SHA256 in JavaScript?","I want to compute the SHA256 based HMAC for some key and a message in front-end using JavaScript. It's easily done in Python like so:
import hmac
h = hmac.new(b'key', b'message', 'sha256')
print(h.hexdigest())

I searched and found something in NodeJS but can't do the same thing in front-end (I mean in browser of the user), which I guess I need to bundle the required library and do the stuff but could not figure out how.
","npm i js-sha256 [link]
will install it on the domain of your choice, in node_modules/ and you can link it from there.


console.log(sha256.hmac('key', 'message'));
<script src=""https://cdnjs.cloudflare.com/ajax/libs/js-sha256/0.9.0/sha256.min.js""></script>



","33","<javascript><hash><frontend><sha256><hmac>","3","3","1","2019-10-17 21:06:11","58440607","4","","","","","2019-10-17 20:41:01","2019-10-17 21:05:38"
"58138220","How do I convert this JS signature generator function into Ruby?","I'am trying to integrate the Zoom SDK into my application and I am having trouble figuring out how to convert their example code for generating the signature into ruby.
Example Code -
const base64JS = require('js-base64');
const hmacSha256 = require('crypto-js/hmac-sha256');
const encBase64 = require('crypto-js/enc-base64');

function generateSignature(data) {
    let signature = '';
    const ts = new Date().getTime();
    const msg = base64JS.Base64.encode(data.apiKey + data.meetingNumber + ts + data.role);
    const hash = hmacSha256(msg, data.apiSecret);
    signature = base64JS.Base64.encodeURI(`${data.apiKey}.${data.meetingNumber}.${ts}.${data.role}.${encBase64.stringify(hash)}`);
    return signature;
}

const data = {apiKey: """" ,
apiSecret: """",
meetingNumber: 888,
role: 0}

console.log(generateSignature(data));

How would the generateSignature function look like in ruby? 
I've tried a few times but the outputted signature differed when I tried writing this in Ruby. I suspect that I'am encoding and decoding improperly.
This is the javascript code above that I modified slightly to cross reference
const base64JS = require('js-base64');
const hmacSha256 = require('crypto-js/hmac-sha256');
const encBase64 = require('crypto-js/enc-base64');

function generateSignature(data) {
  let signature = '';
  const ts = ""1569600658561""
  const msg = base64JS.Base64.encode(data.apiKey + data.meetingNumber + ts + data.role);

  console.log(msg); // This matches the ruby

  const hash = hmacSha256(msg, data.apiSecret);
  signature = base64JS.Base64.encodeURI(`${data.apiKey}.${data.meetingNumber}.${ts}.${data.role}.${encBase64.stringify(hash)}`);
  return signature;
}

data = {
  apiKey: 'api_key',
  apiSecret: 'secret',
  meetingNumber: '1000',
  role: '0'
}


console.log(generateSignature(data));

This is my attempt in ruby
class ZoomSignatureGenerator

  def self.generate
    data = {
      api_key: 'api_key',
      api_secret: 'secret',
      meeting_number: '1000',
      role: '0'
    }

    ts = ""1569600658561""
    msg = Base64.encode64(data[:api_key] + data[:meeting_number] + ts + data[:role]);
    puts(msg)
    hash = OpenSSL::HMAC.hexdigest(OpenSSL::Digest.new('sha256'), data[:api_secret], msg)
    signature = Base64.urlsafe_encode64(""#{data[:api_key]}.#{data[:meeting_number]}.#{ts}.#{data[:role]}.#{Base64.encode64(hash)}"");
    return signature
  end
end


I expected them to be the same output. But they end up being different.
Hope someone can help me :)
","","32","<javascript><ruby><sha256><hmac>","0","","0","2019-09-27 17:52:08","","1","","3982562","","2019-09-27 17:52:08","2019-09-27 16:17:42",""
"51671724","Struts2 Interceptor Conversion Error","I am trying to update a form where user information is diplayed  which has password field.
Password is SHA256 format,When I Submit the form
Struts2 throws the below error
InterceptorMapping: [conversionError] => [org.apache.struts2.interceptor.StrutsConversionErrorInterceptor]
In case the password is not SHA256 it works all well.
Any inputs why struts2 interceptor can not understand sha256 ?
","Problem Resolved there was one interceptor which whitelisted some special chars and since sha256 includes { character which was not included in the list and hence the exception
","32","<struts2><passwords><interceptor><sha256>","1","0","1","2018-08-03 12:34:38","","1","","","","","2018-08-03 11:33:28",""
"55824342","Is there any way to convert the hexcode back to SHA256 object?","How to convet hexcode produced from SHA256 back to the SHA256 object ?
digest = SHA256.new()      # digest empty
digest.update(str(data).encode())   # digest has string hashed
hex_code = digest.hexcode()

hexcode contains the digest of the data , now is there any way to convert the hexcode back to the SHA256 object ?
Is there any method to use the hexcode to generate the original digest object?
'print(digest) gives
 <Crypto.Hash.SHA256.SHA256Hash object at 0x7fc2e2ea4da0>
print(digest.hexcode()) gives
bc273cf180e376f52d8c8a7f6b6ffd5babb872629e5fcc4685fe5284887faee'

Is there any way to use the digest.hexcode() and generate the hash object ? 
","","32","<python><hash><digital-signature><sha256>","0","","0","2019-04-24 08:14:26","","3","1","6614992","","2019-04-24 08:14:26","2019-04-24 07:15:58",""
"52535743","AES decription fails on each 1024th block with 16 wrong bytes","I am trying to implement a reader is going to decrypt data and validate the data HMAC + SHA256 at the same time.
Decrypting the complete data as one block and validating it afterward works. 
The amount of data can be rather significant, so I don´t want to hold in it in an array.
The reader implementation works for the most part, but the result of every 1024th AES block is wrong.
func (r *mediaReader) Read(dst []byte) (n int, err error) {
    if m := len(dst); m%r.cbc.BlockSize() != 0 {
        m = (m / r.cbc.BlockSize()) * r.cbc.BlockSize()
        dst = dst[:m]
    }

    n, err = r.limitedReader.Read(dst)

    r.cbc.CryptBlocks(dst, dst)

    tmp := r.fileLength - int64(n)
    if tmp < 0 || err == io.EOF {
        n += int(tmp)
    }
    r.total += n

    r.fileLength -= int64(n)
    r.hash.Write(dst)
    if r.fileLength <= 0 || err == io.EOF {
        //validate
        mac := make([]byte, 10)
        nn, rr := r.fullReader.Read(mac)

        if rr != nil {
            return n, rr
        }

        if nn != 10 {
            return n, fmt.Errorf(""not enougth data remaining"")
        }

        if !hmac.Equal(mac, r.hash.Sum(nil)) {
            return n, fmt.Errorf(""invalid media hmac\n%v\n%v"", r.hash.Sum(nil)[:10], mac)
        }
        //SUCCESS
        return n, io.EOF
    }

    return n, err
}

The limitedReader uses the fullReader and ends 10 bytes before fullReader does. 
Snippet of mediaReader creation:
h := hmac.New(sha256.New, macKey)
h.Write(iv)

cbc := cipher.NewCBCDecrypter(block, iv)

media := &io.LimitedReader{R: fullReader, N: length - 10}

return &mediaReader{
    limitedReader: media,
    fullReader:    fullReader,
    hash:          h,
    fileLength:    fileLength,
    cbc:           cbc,
    total:         0,
}


16384-16399; 1 * 1024 * 16 (AES Blocksize); 16 wrong bytes
  32768-32783; 2 * 1024 * 16 (AES Blocksize); 16 wrong bytes
  49152-49167; 3 * 1024 * 16 (AES Blocksize); 16 wrong bytes ...

Does anyone recognize what I am doing wrong?
","","32","<arrays><go><encryption><sha256><hmac>","1","","0","2018-09-27 11:17:50","","1","","","","","2018-09-27 11:17:50",""
"33531913","Is this a good way to encrypt passwords in PHP?","$encrypted_pass = hash(""sha256"", $password. ""randomSalt"");

If not, what is a very good method to encrypt PHP passwords (without having to install additional plugins or modules, so I prefer simple methods)?
Thanks.
","","31","<php><encryption><passwords><sha256>","0","","0","2015-11-04 21:43:12","","4","","1816580","","2015-11-04 21:43:12","2015-11-04 21:00:20","2015-11-05 00:26:52"
"53530326","Can't Understand Sha256 In Blockchaining","I understand the sha256 function takes a string input and produces a hexadecimal output. I am unsure how the input is used exactly. So in a block in a block chain I am assuming the it uses the parent hash, the data and nonce as input. I think the parent hash and the data are maybe concatenated together and the nonce is used in the function somewhere else. Or maybe the nonce is the number of times the sha256 function is run to have the block solved with the previous output hash as the new input? Can someone please explain this properly to me as I have yet to find an answer yet?
","In Bitcoin, the following data is serialized (into one 80 byte value), then hashed twice using SHA256 to produce the Block Hash:

Version (4 bytes)
Previous Block Hash (32 bytes)
Merkle Root Hash (32 bytes)
Timestamp (4 bytes)
nBits (4 bytes)
nonce (4 bytes)

The merkle root is the root of a merkle tree of all the transactions in the block, the nBits describe the difficulty target that the block hash must meet in order to be considered valid, and the nonce may be changed by the miner each time the hashing function is done until a valid block hash is found.
Example
Grab a block (eg. block 3): Block 3 in json or Block 3 in hex
Concatenate (in this order, little endian, hex format) the version, previous block hash, merkle root, unix epoch time, difficulty target (bits), and nonce. You’ll see you can copy the first 160 characters from the Block 3 in hex link.
01000000bddd99ccfda39da1b108ce1a5d70038d0a967bacb68b6b63065f626a0000000044f672226090d85db9a9f2fbfe5f0f9609b387af7be5b7fbb7a1767c831c9e995dbe6649ffff001d05e0ed6d
Run the command:
echo 01000000bddd99ccfda39da1b108ce1a5d70038d0a967bacb68b6b63065f626a0000000044f672226090d85db9a9f2fbfe5f0f9609b387af7be5b7fbb7a1767c831c9e995dbe6649ffff001d05e0ed6d | xxd -r -p | openssl sha -sha256 | xxd -r -p | openssl sha -sha256

Reverse the output from

4944469562ae1c2c74d9a535e00b6f3e40ffbad4f2fda3895501b58200000000
to
0000000082b5015589a3fdf2d4baff403e6f0be035a5d9742c1cae6295464449
And there’s the block hash!
","31","<algorithm><function><blockchain><sha256>","-1","2","1","2018-11-29 02:56:54","","1","","","","","2018-11-29 00:56:24",""
"54728447","Blockchain Beginner: How do I validate my SHA-256 hash submission, by converting it to a blockchain.info address?","I really need help here ... I know this is simple ... but if someone could explain this like they are talking to a ten year old I'd appreciate it

I converted a JPEG to SHA-256 
I submitted that SHA-256 hash to the
blockchain using origin stamp 
Now, I want to manually convert my
original hash either from (Hex) or (Base64) into the ""Address"" given
to me by originstamp so I can view the transaction on blockchain.info
how do I do this? I CANNOT figure it out.

","","31","<timestamp><blockchain><sha256><trusted-timestamp><blockchain.info-api>","0","","0","2019-02-16 22:49:39","","2","","","","","2019-02-16 22:49:39",""
"52712687","Why does python install sha256 always fail?","System：win server 2008
python：3.5.3

","It's because Microsoft Visual C++ 14.0 is required, but is presumably not installed.
Get it with Microsoft Visual C++ Build Tools.
You can find it at http://landinghub.visualstudio.com/visual-cpp-build-tools.
","30","<python><sha256>","-5","1","1","2018-10-09 03:06:37","","4","","269970","","2018-10-09 02:59:27","2018-10-09 02:53:09",""
"56335216","What is meant by sha256-then-argon2id?","I am trying to authenticate passwords against hash records stored in a database. Each record looks something like this. The password that should match this record is p455W0rd.
$sha256-then-argon2id$v=19$m=8192,t=20,p=4$kfIEEdKK46MWK1XPSotv4g$1nGvnXr+vtQWNeuKCmlqOMukorvRG40ypGcAlPI0IkU

After doing some reading most of this seems easy to understand. All the parameters after the first are fairly obvious. But I don't understand what is meant by the first.
I assumed that sha256-then-argon2id meant that the SHA-256 hash of the password should be used as the input to the argon2 function, instead of the password itself. This turned out to be wrong. I would like to understand the meaning of this password hashing scheme. It seems to be very irregular and I don't see any answers online.
PS Here is my (failing) Java code based on what I assumed. Maybe I am just making a silly error somewhere.
import org.bouncycastle.crypto.generators.Argon2BytesGenerator;
import org.bouncycastle.crypto.params.Argon2Parameters;
import org.bouncycastle.crypto.digests.SHA256Digest;
import java.nio.charset.Charset;

public class Argon2Hasher {
    public static byte[] sha256ThenArgon2ID(String password,
                                            Charset enc,
                                            int version,
                                            int mem,
                                            int iter,
                                            int par,
                                            byte[] salt) {
        // get SHA256(password)
        SHA256Digest digest = new SHA256Digest();
        for (byte b : password.getBytes(enc)) digest.update(b);
        byte[] hash = new byte[digest.getDigestSize()];
        digest.doFinal(hash, 0);

        // get argon2id(hash)
        Argon2BytesGenerator gen = new Argon2BytesGenerator();
        gen.init(new Argon2Parameters.Builder(Argon2Parameters.ARGON2_id)
                                     .withVersion(version)
                                     .withMemoryAsKB(mem)
                                     .withIterations(iter)
                                     .withParallelism(par)
                                     .withSalt(salt).build());
        byte[] buffer = new byte[32];
        gen.generateBytes(hash, buffer);
        return buffer;
    }
}

","","30","<procedure><sha256><password-hash><argon2-ffi>","0","","0","2019-05-28 04:57:44","","0","","","","","2019-05-28 04:57:44",""
"47592025","Protect Generated PDF from changes","I need your help in securing the generated PDF from the method from any unexpected changes and tampers as I will be adding at the bottom of the generated PDFs,the image of the manager's signature. The application in located under a secured website (Https) and encryption and decryption is implemented in it. Only authorized users will be accessing the application and they will download different generated PDFs. I got a requirement to secure the PDF, where in my current code I am generating the PDF only. Similar sample code is below for generating the PDF similar to my code:
public void GeneratedPDF {
    Document document = new Document();

    try {
        PdfWriter.getInstance(document,
            new FileOutputStream(""CE.pdf""));

        document.open();
        document.add(new Paragraph(""Secured Document""));
        document.close(); 

    } catch (DocumentException e) {
        e.printStackTrace();
    } catch (FileNotFoundException e) {
        e.printStackTrace();
    }

}

I thought to add:
document.addTitle(""CE"");
document.addAuthor(""XYZ Company"");
document.addSubject(""TCE"");
document.addKeywords(CE"");
document.addCreator(""XYZ Company"");

I was given a suggestion to implement the SHA256 security, but still I am not sure whether it is beneficial to implement or not. So can you please assist?   
","","30","<java><pdf><itext><digital-signature><sha256>","0","","0","2017-12-02 19:09:59","","3","","2438318","","2017-12-02 19:09:59","2017-12-01 11:04:18",""
"51473734","Python Hashlib Returning Different Values","~~SOLUTION AT END~~
I need to check the integrity of two files sent over FTP. I have everything set up except SHA256 hashes. Let me explain it from code.
BLOCK_SIZE = 65536
hasher = hashlib.sha256()
with open('/home/pi/' + fname, ""rb"") as targ:
    buf = targ.read(BLOCK_SIZE)
    while len(buf) > 0:
        hasher.update(buf)
        buf = targ.read(BLOCK_SIZE)

checkfile = open(""osha256.txt"", ""w+"")
checkfile.write(hasher.hexdigest())

and 
hasher = hashlib.sha256()
with open(""/home/pi/"" + xr, ""rb"") as targ:
    buf = targ.read(BUF_SIZE)
    while len(buf) > 0:
        hasher.update(buf)
        buf = targ.read()

hashfile = open(""/home/pi/vercheck/sha256.txt"", ""w+"")
hashfile.write(str(""{0}"".format(hasher.hexdigest())))

First one returns hash value(?) of: c8a31cb076b21999bd2cdcfa5f446a7a6644de88037087112fa18bd90cc13984 
Second one returns hash value of:
e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
File names and directories are same.
Also
md5 = hashlib.md5()
with open('/home/pi/cd.jpg', ""rb"") as targ1:
    buf = targ1.read(bufsize)
    while len(buf) > 0:
        md5.update(buf)
        buf = targ1.read(bufsize)
    checkfile = open(""1md5.txt"", ""w+"")
    checkfile.write(md5.hexdigest())
## RETURNS e1d147695131c7682372e26a36c4f6fa

with open('/home/pi/cd.jpg', ""rb"") as targ1:
    buf = targ1.read(bufsize)
    while len(buf) > 0:
         md5.update(buf)
         buf = targ1.read(bufsize)
    checkfile = open(""2md5.txt"", ""w+"")
    checkfile.write(md5.hexdigest()
##RETURNS 3966cdd94eaf06d30c5e6f25eecb6015

EDIT
You can solve this by adding (in my case) another 
md5 = hahslib.md5() top of 
with open('/home/pi/cd.jpg', ""rb"") as targ1:
    buf = targ1.read(bufsize)
    while len(buf) > 0:
         md5.update(buf)
         buf = targ1.read(bufsize)
    checkfile = open(""2md5.txt"", ""w+"")
    checkfile.write(md5.hexdigest()

","","30","<python><md5><sha256><hashlib>","0","","0","2018-08-02 18:53:23","","3","","8244021","","2018-08-02 18:53:23","2018-07-23 07:36:56","2018-07-23 07:53:01"
"53392432","What does this ""note: see declaration of '_PyInitError'"" error mean when trying to package a C module using 'distutil'?","Following my previous question here, I would like to import this C/C++ implementation of sha256 into my python script (Python 3.7.0) and run some performance tests. 
From the official documentation it seems that one way of doing this is to use distutil built-in module of python to package this as a new module and then install it so that it becomes importable to any script. 
The first step I took was to download the sha256module.c code and save it into my current directory. In the same directory, I then created a setup.py with the following content that python's documentation recommends here.
setup.py:
from distutils.core import setup
from distutils.extension import Extension
setup(name='sha256_test1',
      version='1.0',
      description = 'This is a test sha256 function',
      ext_modules=[Extension('sha256', sources = ['sha256module.c'])],
      )

After creating the setup file, from command prompt and in the same directory as the setup I run python setup.py build. In the first place, I received ""Unable to find vcvarsall.bat"" error and based on the answer to this question I installed visual studio 2017 community version on my Win10 x64 operating system. The error is gone. But I received errors indicating lack of some other files that seemed necessary for packaging. They are listed as:
hashlib.h
coreconfig.h
pystrhex.h
python.h
structmember.h
tracemalloc.h
clinic/sha256module.c.h

I added them to the current directory and when I run python setup.py build again I get another error saying ""note: see declaration of '_PyInitError"" which I assumed might be from the lack of __init__.py so I created an empty one but it didn't work.
I am not sure if I am doing this all the way right. What do you think about this procedure?! Am I on the correct direction?! If yes please tell me how to tackle the error and if no please indicate why and where I am doing wrong.
","","29","<python><sha256><distutils>","1","","0","2018-11-20 11:53:01","","0","","","","","2018-11-20 11:53:01",""
"58438047","Same results for Encoding, but different results for hashing","I am trying to compare results of hashing in java and python. i have a snippet of code for java and python both giving same output for Encoding with UTF-8 but giving different(kind of ) results for Hash with sha256.
JAVA code:
String hash = ""hello"" 
byte[] test = hash.getBytes();
MessageDigest sha = MessageDigest.getInstance(""SHA-256"");
byte[] key = sha.digest(hash.getBytes());

output: test ==> [104, 101, 108, 108, 111]
 key ==> [44, -14, 77, -70, 95, -80, -93, 14, 38, -24, 59, 42, -59, -71, -30, -98, 27, 22, 30, 92, 31, -89, 66, 94, 115, 4, 51, 98, -109, -117, -104, 36]
Python code:
hash = ""hello""
test = list(bytearray(text.encode()))
m = hashlib.sha256()
m.update(hash.encode(""UTF-8""))
data = m.digest()
key = list(data)

output:  test ==> same as Java output
key ==> [44, 242, 77, 186, 95, 176, 163, 14, 38, 232, 59, 42, 197, 185, 226, 158, 27, 22, 30, 92, 31, 167, 66, 94, 115, 4, 51, 98, 147, 139, 152, 36]
","These are the same results.  You're just printing them differently, in a way that uses signed bytes instead of unsigned bytes for Java.
","29","<java><python-3.x><hash><sha256>","0","2","1","2019-10-17 17:43:04","","1","","","","","2019-10-17 17:40:08",""
"55584328","How to do a basic sha256 encryption that matches the results on (website in description)","I'm setting up a login validation function to compare user entered password against the one stored in db. The db passwords are sha256 then a salt is added to the front and then sha256 again. 
This is what I'm currently doing but it does some extra things apparently so I'm not getting just the basic sha256 for example like this website provides https://emn178.github.io/online-tools/sha256.html 
from passlib.hash import sha256_crypt
passwordCandidate = ""test""
passwordCandidate = sha256_crypt.encrypt(passwordCandidate)
print(passwordCandidate, file=sys.stderr)

What I want to get is:
9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08
What I'm getting is:
$5$rounds=535000$VZ4p1Kf9FmCL9Czc$.zvnilwPGcHhL54nq13LLrSxi0BXvSl0vW5C0zy5ya/
","This work with hashlib
import hashlib

passwordCandidate = ""test""
print(hashlib.sha256(passwordCandidate.encode()).hexdigest())

# print : 9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08

","29","<python-3.x><sha256>","1","1","1","2019-04-09 02:48:39","55584351","0","","5514478","","2019-04-09 02:48:39","2019-04-09 02:37:38",""
"58351751","Translating Java password hashing method to JS implementation","I would like to translate Java code password hashing used in Blynk IoT software that I can use in Express.js app. Thanks for any help!
Java code:
https://www.onlinegdb.com/HJe19lyFB
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;

public class Main {

    public static void main(String[] args){
        System.out.println(makeHash(""password"",""mail@gmail.com"")); 
    }

    private static final String SHA_256 = ""SHA-256"";

    private Main() {
        try {
            MessageDigest.getInstance(SHA_256);
        } catch (NoSuchAlgorithmException e) {
        }
    }

    public static String makeHash(String password, String salt) {
        try {
            MessageDigest md = MessageDigest.getInstance(SHA_256);
            md.update(password.getBytes(StandardCharsets.UTF_8));
            byte[] byteData = md.digest(makeHash(salt.toLowerCase()));
            return Base64.getEncoder().encodeToString(byteData);
        } catch (Exception e) {
            //ignore, will never happen.
        }
        return password;
    }

    private static byte[] makeHash(String val) throws NoSuchAlgorithmException {
        return MessageDigest.getInstance(SHA_256).digest(val.getBytes(StandardCharsets.UTF_8));
    }

}

Currently not working solution:
https://repl.it/@patryk0493/blynk-password-hashing
const btoa = require('btoa');
var util = require('util');
const KJUR = require('jsrsasign');

const password = 'password';
const email = 'mail@gmail.com';

const options = {""alg"": ""sha256"", ""prov"": ""cryptojs""}

makeHash = (str) => {
  const md = new KJUR.crypto.MessageDigest(options);
  return md.digestString(new util.TextEncoder().encode(str.toLowerCase()))
}

const md = new KJUR.crypto.MessageDigest(options);
md.updateString(new util.TextEncoder().encode(password));
const byteData = md.digest(makeHash(email.toLowerCase()));
const base64 = btoa(byteData)

console.log(base64);


","You can re-implement the Java password hashing using the standard Node.js crypto module:
const crypto = require('crypto');

const makeHash = (data) => {
  const hash = crypto.createHash('sha256');
  return hash.update(data, 'utf8');
}

const password = ""password"";
const salt = ""mail@gmail.com"";

const result = makeHash(password)
  .update(makeHash(salt).digest())
  .digest('base64')

console.log(result);

","28","<javascript><java><node.js><sha256><message-digest>","0","0","1","2019-10-12 07:37:54","58351916","0","","","","","2019-10-12 07:08:03",""
"55596128","How many values can hashlib.sha256(hashlib.sha256(str(x).encode()).digest()).hexdigest() have?","I am aware that for any x, 
int(hashlib.sha256(str(x).encode()).hexdigest(), 16) has 2**256 possible values. 
How many possible values does the following have then?
int(hashlib.sha256(hashlib.sha256(str().encode()).digest()).hexdigest(), 16)

I assume it has 2**256 possible values as it is a SHA-256 hash anyway.
","","28","<python><sha256>","0","","0","2019-04-09 15:22:13","","5","","476","","2019-04-09 15:22:13","2019-04-09 15:17:38",""
"56450574","Chilkat: sftp support for key exchange ciphers","I am developing a .NET Core application and need sFTP support including KexAlgorithm curve25519-sha256 cipher.  Does the .NET product provide support for this?
","Yes, Chilkat supports it...…...
","28","<sftp><sha256><chilkat><curve-25519>","0","0","1","2019-06-05 15:58:04","","0","","","","","2019-06-04 20:01:41",""
"54924791","How unique is sha256? Good enough to generate more unique results than 64 characters long unique number auto-incrementing primary index id in a db?","I would like to hash a numeric string because I do not want people to know the exact number for various security and other reasons. How about doing it so?
        $number = X; // get my number from wherever
        $secret     = mt_rand(); // or maybe another randomly generated secret!?
        $hash       = hash_hmac(""sha256"", $number, $secret); // or maybe another algo!?

So when I want to retrieve the number, I will just compare the hash generated with the hash returned from the app, which is already stored in the database, and I can lookup the number by this hash. Would this be unique enough to handle a number larger than 64 characters? And, yes, I am serious. This is for statistical data and it will get huge... huge numbers, most probably more than 64 characters long. 
Regards!
","","27","<php><hash><hashmap><sha256><secret-key>","0","","0","2019-02-28 11:35:04","","4","1","","","","2019-02-28 11:35:04",""
"53343753","Strange behaviour in php hash_hmac","I am creating a simple api in php.
$signature_string = ""MARCIGETapi/v1/test/636779232000000000FIXXISOFTRGllcyBpc3QgZWluIFRlc3Q=""
$new_sig = hash_hmac(""sha256"",  $signature_string, $api_key, false);
echo $new_sig;


24f305d19cad2e848b3407f64bc21ada0ff1978a2487a23f26aa35f3a1c8204a

Now explain me this:
$new_sig = hash_hmac(""sha256"", ""MARCIGETapi/v1/test/636779232000000000FIXXISOFTRGllcyBpc3QgZWluIFRlc3Q="" , $api_key, false);
echo $new_sig;


c1d2347e60a648838fd8a98a41174fc9a4b18371e18261931f3337951b8a6cdf

The second one is the expected one I was able to generate on the c# client.
","I`ve had the same problems in one of my projects.
Just try:
$new_sig = hash_hmac(""sha256"", trim($signatur_string,"" ""), $api_key);

","27","<php><sha256><hmac>","0","0","1","2018-11-16 19:04:56","53343936","4","","","","","2018-11-16 18:49:53",""
"49801036","In python3's hashlib, I keep getting a different digest when I run a text file through SHA256","Here's my code: 
# Instantiate hash function
filehash = hashlib.sha256()

# Calculate specified hash values
with fileinput.FileInput(files=(intake), mode='rb') as fintake:
    filehash.update(repr(fintake).encode(""utf-8""))

return filehash.hexdigest()

This seems like it should return the same value each time. I am using this to calculate the hash for a text file that contains the word ""Hello"".
Every time I run the code, it returns a different digest. E.g.
92220b5bd4b5370126ddce16c21bb91cc9c9c2e0a013c8a38bbdafbdb2322cbb
0bcb26341a564c07a98060f90df9df3ebad5129ef5c2d6afa26ba5a9d6d90302
58b3bee46210a1af0f9d454c56172e2b14664644acf59a0a54025c4e61c8e794
What am I doing wrong?
","","26","<python><python-3.x><sha256><hashlib>","0","","0","2018-04-12 16:03:01","","3","","1222951","","2018-04-12 16:03:01","2018-04-12 15:56:16",""
"58190321","Computing the SHA256 hash of a FileResponse objects content","I have a file for which I have computed its SHA256Sum and have verified it is correct.   
hash1 = computeSHA256(filepath)

I need to compute the hash again, but this time using the values inside response.streaming_content where response is a Django FileResponse object, which I have done as follows:
response = FileResponse(request, open(filepath, 'rb'), content_type='application/json')
content = b''.join(response.streaming_content)
h = hashlib.sha256()
h.update(str(content).encode('utf-8'))
hash2 = h.hexdigest()

This issue here is that hash1 != hash2. For example:
hash1 = 7836496a8e17dac5aad5dea15409b06558d0feaf6c39198eae620afebb1fa097
hash2 = 70a3e07b20e722652740e93702b70322d042b9710b3087228e70551ad8301086

Can anyone see where I have gone wrong to cause the two hash values to not be equal?
Note: the file is a Google Protobuf (.pbf) file, so is binary.
","","26","<python><django><hash><byte><sha256>","1","","0","2019-10-01 18:21:12","","1","","","","","2019-10-01 18:21:12",""
"53748442","Secret from Gogs hook (failing to get on python3)","I'm configuring a gogs hook, I have an API that receives this POST from push
e.g. 
secret: myS3cr3t
it's supposed that "" Secret will be sent as SHA256 HMAC hex digest of payload via  X-Gogs-Signature  header.""
then in python3 I got it like this:
message is the payload (json body) from the request and the key i set it on env var 
import hashlib
import hmac

def get_secret_signature(message, secret):
   signature = hmac.new(bytes(key, 'utf-8'), bytes(message, 'utf-8'), hashlib.sha256).hexdigest()
   return signature 

but when checking the hook is failing cause the signature sent in X-Gogs-Signature never match with the signature generated on python
even comparing the logic with jenkins gogs plugin:
public static String encode(String data, String key) throws Exception {
        final Charset asciiCs = Charset.forName(""UTF-8"");
        final Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
        final SecretKeySpec secret_key = new javax.crypto.spec.SecretKeySpec(asciiCs.encode(key).array(), ""HmacSHA256"");
        sha256_HMAC.init(secret_key);
        return Hex.encodeHexString(sha256_HMAC.doFinal(data.getBytes(""UTF-8"")));
}

I think it's the same logic in python, obviously shorter in python ;)
","It seems that the variable that had the payload was not escaping some characters, since I'm using the python framework Bottle this is the right way to get the payload:
payload = request._get_body_string()
gogs_signature = request.get_header('X-Gogs-Signature')

signature = get_secret_signature(payload, secret)
.
.
.
if gogs_signature != signature:
   print(""Signature error"")

def get_secret_signature(message, secret):
   signature = hmac.new(bytes(key, 'utf-8'), message, hashlib.sha256).hexdigest()
   return signature

","26","<python><python-3.x><sha256><hmac><gogs>","1","0","1","2018-12-13 00:20:38","53753321","0","","","","","2018-12-12 17:34:55",""
"56525665","PHP MD5 to HASH","
Apparently this is a duplicate but I can't find another one. Please help -
So I have run into an issue with a C++ Program we have that used my website and the program to login to the program, It uses check.php to encrypt the password into md5 and send it to the website to verify.
I have recently changed forum software and the website now uses hash sha256,
I cannot get it to encrypt the passwords correctly to send them to the website, Can anyone help, please.

The code section where I know I have to change md5 to something for hash.
    while($row = $result->fetch_assoc())
    {

        $password = $row['password'];
        $salt = $row['salt'];
        $plain_pass = $_GET['password'];
                $stored_pass = md5(md5($salt).md5($plain_pass));


        function Redirect($url, $permanent = false)
        {

Full code
<?php
$ini = parse_ini_file('config.ini');
$link = mysqli_connect($ini['db_host'],$ini['db_user'],$ini['db_password']);
$database = mysqli_select_db($link,$ini['db_name']);

$user = $_GET['username'];
$password = $_GET['password'];
$tables = $ini['nl2_users'];

$sql = ""SELECT * FROM "". ""nl2_users"" ."" WHERE username = '"". mysqli_real_escape_string($link,$user) .""'"" ;
$result = $link->query($sql);

if ($result->num_rows > 0) {
    // Outputting the rows
    while($row = $result->fetch_assoc())
    {

        $password = $row['password'];
        $salt = $row['salt'];
        $plain_pass = $_GET['password'];
        $stored_pass = md5(md5($salt).md5($plain_pass));

        function Redirect($url, $permanent = false)
        {
            if (headers_sent() === false)
            {
                header('Location: ' . $url, true, ($permanent === true) ? 301 : 302);
            }
        exit();
        }

        if($stored_pass != $row['password'])
        {
            echo ""0""; // Wrong pass, user exists
        }
        else
        {
            echo ""1""; // Correct pass
        }
    }
} 
else
{
    echo ""2""; // User doesn't exist
}




?>

","","24","<php><hash><md5><sha256>","0","","0","2019-06-10 12:38:00","","1","","11418185","","2019-06-10 12:38:00","2019-06-10 11:39:34","2019-06-10 11:44:02"
"53230792","Changing algorithm constants of a hash object created by hashlib","I am wondering if it is possible to modify (by parameter) the hash algorithms of python's hashlib library. For example, I would like to run sha256 with initial hashes that are different to the standard initial hashes of sha256.
Now the standard initial hashes are:
initHash = [0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A, 0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19]

I would like to modify this to my own purpose.
Currently, I can do this with the function I have written for sha256 by my own, but my code runs quite slower than hashlib. That is why I would like to use hashlib while having access to the parameters.
In other words, I'am asking to see if it is possible in hashlib to run a hash algorithm with non-standard user-defined algorithm constants.
","","24","<python-3.x><hash><sha256><hashlib>","1","","0","2018-11-10 11:51:08","","1","","10618020","","2018-11-10 11:51:08","2018-11-09 17:39:49",""
"56848781","how to get public key from X509Store using PublicKey.EncodedKeyValue.Format(true)","I'm new to this, I'm creating a webservice for our client that requires sign data using private key with an algorithm of SHA256withRSA in header. How can I produce public key using X509Certificate2's PublicKey.EncodedKeyValue.Format(true) property?
I've tried this: https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.x509certificates.publickey.encodedkeyvalue?view=netframework-4.8
string certSubject = ""CN=cnName"";
            X509Store my = new X509Store(StoreName.My, StoreLocation.CurrentUser);
            my.Open(OpenFlags.ReadOnly);
            foreach (X509Certificate2 x509 in my.Certificates)
            {
                if (x509.Subject.Contains(certSubject))
                {
                    RSACryptoServiceProvider publicCertifiedRSACryptoServiceProvider = x509.PublicKey.Key as RSACryptoServiceProvider;

                    string publickeyRAW = x509.PublicKey.EncodedKeyValue.Format(true);
                    Console.ReadLine();
                    break;
                }
            }

I'm expecting a string or byte for my final output, but this is what I'm getting: 
30 82 01 0a 02 82 01 01 00 9c 71 98 bc de 99 0b f7 b7 0a bf 79 f7 02 2a 0c c1 a0 45 10 6b 5c a0 d7 e5 02 1e 01 f9 3c d7 69 4e 7c ec ee 56 cf c2 88 74 fd bb fe 97 77 07 6b f7 85 ee 8d e6 1b 2f 8e 90 03 6e 4a f8 42 9e 10 e9 7d f7 1b bd dc ba 2b 38 8e 7b 5a c9 67 2e 87 a7 87 54 98 16 7a 67 aa c7 d7 6c f5 50 4c e6 7d 79 8c 46 f4 c6 39 57 b4 75 ef 8d d5 8d 3a 33 aa 5e b9 c3 48 6f eb 04 fe b0 86 b8 28 20 f3 57 44 1b 57 6f fd ce c0 15 f0 ff cf 73 72 a4 76 55 84 e9 c9 54 f1 3a fe 29 c0 be d4 0d 38 1c 73 1e 41 a5 d2 a5 f7 4c 9f 72 49 ba 28 5d a4 bf db cd 05 68 aa f8 62 66 e0 70 65 35 9f 56 64 48 f7 1b df d1 0e f6 2f e7 36 16 5b 1c ff d5 5a a5 97 63 de 8c 36 da 2c 9d 13 d2 72 09 c1 b6 48 de 8c 67 c1 64 2e 1d 39 cf cd 0c 88 67 3c e3 3c 17 eb 23 fe d2 47 6f 51 20 28 88 7e a7 22 b8 a8 a7 43 d4 5d 02 03 01 00 01

How can I decrypt or convert this to string?
","Based on your desired outcome you probably want
Convert.ToBase64String(x509.PublicKey.EncodedKeyValue.RawData);

","24","<c#><web-services><rsa><sha256>","0","0","1","2019-07-03 02:08:38","56862012","4","","238704","","2019-07-02 19:08:26","2019-07-02 08:56:48",""
"56472780","SHA256 generation different for file and content of this file","I use online SHA256 converters to calculate a hash for a given file. There, I have seen an effect I don't understand.
For testing purposes, I wanted to calculate the hash for a very simple file. I named it ""test.txt"", and its only content is the string ""abc"", followed by a new line (I just pressed enter). 
Now, when I put ""abc"" and newline into a SHA256 generator, I get the hash
edeaaff3f1774ad2888673770c6d64097e391bc362d7d6fb34982ddf0efd18cb
But when I put the complete file into the same generator, I get the hash
552bab6864c7a7b69a502ed1854b9245c0e1a30f008aaa0b281da62585fdb025
Where does the difference come from? I used this generator (in fact, I tried several ones, and they always yield the same result):
https://emn178.github.io/online-tools/sha256_checksum.html
Note that this different does not arise without newlines. If the file just contains the string ""abc"", the hash is
ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad
for the file as well as just for the content.
","The issue you are having could come from the character encoding of the new line.
In windows the new line is escaped with \r\n and in linux is escaped with \n.
These 2 have a different dec value (\r is 13 and \n is 10).
More info you can find here:
https://en.wikipedia.org/wiki/Newline
https://en.wikipedia.org/wiki/List_of_Unicode_characters
","24","<sha256>","3","2","2","2019-06-06 07:51:12","56473111","1","0","","","","2019-06-06 07:28:46",""
"56472780","SHA256 generation different for file and content of this file","I use online SHA256 converters to calculate a hash for a given file. There, I have seen an effect I don't understand.
For testing purposes, I wanted to calculate the hash for a very simple file. I named it ""test.txt"", and its only content is the string ""abc"", followed by a new line (I just pressed enter). 
Now, when I put ""abc"" and newline into a SHA256 generator, I get the hash
edeaaff3f1774ad2888673770c6d64097e391bc362d7d6fb34982ddf0efd18cb
But when I put the complete file into the same generator, I get the hash
552bab6864c7a7b69a502ed1854b9245c0e1a30f008aaa0b281da62585fdb025
Where does the difference come from? I used this generator (in fact, I tried several ones, and they always yield the same result):
https://emn178.github.io/online-tools/sha256_checksum.html
Note that this different does not arise without newlines. If the file just contains the string ""abc"", the hash is
ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad
for the file as well as just for the content.
","As noted in my comment, the difference is caused by how newline characters are represented across different operating systems (see details here):

On UNIX and UNIX-like systems, newlines are represented by a line feed character (\n).
On DOS and Windows systems, newlines are represented by a carriage return followed by a line feed character (\r\n).

Compare the following two commands and their output, corresponding to the SHA256 values in your question:
echo -en ""abc\n"" | sha256sum
edeaaff3f1774ad2888673770c6d64097e391bc362d7d6fb34982ddf0efd18cb

echo -en ""abc\r\n"" | sha256sum
552bab6864c7a7b69a502ed1854b9245c0e1a30f008aaa0b281da62585fdb025

","24","<sha256>","3","3","2","2019-06-06 07:51:12","56473111","1","0","","","","2019-06-06 07:28:46",""
"58639618","Flask sha256_crypt.verify returning `not a valid sha256_crypt hash`","I am using Flask for a web login page. I am trying to exploit sha256 password encryption, but I have no idea why line sha256_crypt.verify(password,pass_data) is throwing with the error in title.
Is there anything I am missing? If I can give more details please ask, maybe providing some instructions on how to debug. Thank you.
@app.route(""/login"", methods=[""GET"",""POST""])
def login():
   if request.method == ""POST"":
      username= str(request.form['username'])
      password = request.form.get('password')
      cursor = mydb.cursor(MySQLdb.cursors.DictCursor)
      cursor.execute(""SELECT * FROM user WHERE username ='""+ username +""'"")
      userdata = cursor.fetchone()
      usernamedata = userdata['username']
      passworddata = userdata['password']
      if usernamedata is None:
        flash(""Incorrect username"",""danger"")
        return render_template(""login.html"")
     else:
        for pass_data in passworddata:
            if sha256_crypt.verify(password,pass_data):
                flash(""You are now login"",""success"")
                return redirect(url_for('profile'))
            else:
                flash(""Incorrect password!"")
                return render_template(""login.html"")
   return render_template(""login.html"")

","Assuming passworddata is a string, doing for pass_data in passworddata will just loop over the letters of string. I think changing this:
for pass_data in passworddata:
    if sha256_crypt.verify(password,pass_data):
        flash(""You are now login"",""success"")
        return redirect(url_for('profile'))
    else:
        flash(""Incorrect password!"")
        return render_template(""login.html"")

to this:
if sha256_crypt.verify(password, passworddata):
    flash(""You are now login"",""success"")
    return redirect(url_for('profile'))
else:
    flash(""Incorrect password!"")
    return render_template(""login.html"")

should fix it.
Also, don't execute SQL like this!
cursor.execute(""SELECT * FROM user WHERE username ='""+ username +""'"")

It's very prone to SQL injection.
","24","<python><mysql><flask><sha256><password-encryption>","0","0","1","2019-10-31 13:59:02","","2","","3013538","","2019-10-31 13:59:02","2019-10-31 08:48:33",""
"55520541","convert hashed string value into SHA256","From the server, I am getting already hashed string value. 
What I need to do on a client side is to convert that hashed value into primary SHA256 and then(from another method) get from this SHA256 an original human-readable string. 
Can anybody share the code for that solution?
","SHA256 is a hashing algorithm, not an encryption algorithm.  Therefore, you cannot de-crypt a hash value to get the original value.
Here's a link from our friends at the Information Security Stack Exchange:
https://security.stackexchange.com/a/145287
","23","<c#><hash><sha256>","-1","0","1","2019-04-04 16:10:32","55520603","0","","","","","2019-04-04 16:06:45",""
"55985608","Parse authentification string from JSON on Arduino C++","I have some problem with parsing authentification string from JSON string.
I am using ArduinoJson library.
Short example:
I have class Foo with private String user and String key.
Input JSON string look like this:
{""user"":""Joe"",""key"":""252F10C83610EBCA1A059C0BAE8255EBA2F95BE4D1D7BCFA89D7248A82D9F111""}
and method void fromJson(String json)
like this:
class Foo
{
  private:
    String _user;
    String _key;

  public:
    /*constructors and etc*/

    void fromJson(String json)
    {
        DynamicJsonBuffer jsonBuffer;
        JsonObject &root = jsonBuffer.parseObject(json);

        if (!root.success())
        {
            Serial.println(""Falled fromJson!"");
            return;
        }
        const char *tmp;

        tmp = root[""user""];   
        _user = String(tmp);  // work correct

        tmp = root[""key""];
        _key = String(tmp);   // return null every time

    }
}

Does anyone have any idea what happened here and how to fix this bug?
Thank you!
","","23","<json><arduino><sha256><arduino-c++>","0","","0","2019-05-04 18:31:58","","0","","1413395","","2019-05-04 18:31:58","2019-05-04 18:26:36",""
"56839034","Converting digest + hmacsha256 nodejs code to c#","I am trying to recreate this nodejs code to c#. However, the results dont match up to the expected value. I think because I need to implement a digest function just like in nodejs. But I dont know how digest actually works
==========================================
Here is a code snippet from nodejs:
var shaBody = crypto.createHmac('SHA256', base64Key)
    .update(message);

var digestBody = shaBody.digest('base64');
console.log('Base64 Digest HMACSHA256 message: '+ digestBody);

==========================================
Here is the c# code:
byte[] secretkey = new Byte[64];
ASCIIEncoding encoding = new ASCIIEncoding();
string base64String = Convert.ToBase64String(encoding.GetBytes(authKey));
secretkey = Convert.FromBase64String(base64String);

byte[] requestBody = new Byte[64];
requestBody = 
Convert.FromBase64String(Convert.ToBase64String(encoding.GetBytes(body)));

using (HMACSHA256 hmac = new HMACSHA256(secretkey))
{
    byte[] hashValue = hmac.ComputeHash(requestBody);
    var hex = BitConverter.ToString(hashValue).Replace(""-"", 
"""").ToLower();
    string requestSignatureBase64String = 
Convert.ToBase64String(hashValue);

    Console.WriteLine(base64String);
    Console.WriteLine(hex);
    Console.WriteLine(requestSignatureBase64String);
}

","","22","<hash><sha256><hmac>","0","","0","2019-07-01 16:17:47","","1","","","","","2019-07-01 16:17:47",""
"51652586","How to read a file and check its hash value transparently in Python?","I need to read contents from a file. The sha256 digest is calculated previously. To make sure the file is unchanged, I want to calculate its sha256 digest again while reading, and check it against the previously calculated value. If the values don't match, I should be notified.
What is the pythonic way to do this? I posted working code below but there may be a better way or an existing library doing this.
","import hashlib
import io

class Sha256File:
    def __init__(self, fo, hashvalue):
        self._fo = fo
        self.hashvalue = hashvalue

    def __enter__(self):
        self._m = hashlib.sha256()
        return self

    def read(self, size=-1):
        b = self._fo.read(size)
        self._m.update(b)
        return b

    def __iter__(self):
        return self

    def __next__(self):
        b = self.read()
        if b == b'':
            raise StopIteration
        return b

    def __exit__(self, exc_type, exc_value, traceback):
        if exc_type is None:
            assert self._m.hexdigest() == self.hashvalue
        self._fo.close()

hashvalue = '5891b5b522d5df086d0ff0b110fbd9d21bb4fc7163af34d08286a2e846f6be03'

with Sha256File(io.BytesIO(b'hello\n'), hashvalue) as f:
    for line in f:
        print(line)

","22","<python><hash><io><sha256>","0","2","1","2018-08-02 11:32:27","","0","","","","","2018-08-02 11:32:27",""
"58191448","How to validate that an audio file uploaded to s3 correctly with sha 256 check sum using pre signed post url?","Here is the code to validate s3 upload using md5. How can this code be modified to support validation using sha 256? I am using boto 3 to get a pre signed post url . I am sending pre signed post function the md5 sum calculated for the file in local . After doing a successful post request , S3 validates that the md5 checksum is same as that calculated by amazon. I am also using signature version 4 for signing signatures. 
import requests
import logging
import boto3
from botocore.exceptions import ClientError
from botocore.client import Config


def create_presigned_post(bucket_name, object_name,
                          fields=None, conditions=None, expiration=3600):
    s3_client = boto3.client('s3', config=Config(signature_version='s3v4'))
    try:
        response = s3_client.generate_presigned_post(bucket_name,
                                                     object_name,
                                                     Fields=fields,
                                                     Conditions=conditions,
                                                     ExpiresIn=expiration)
    except ClientError as e:
        logging.error(e)
        return None
    return response


object_name = '/home/karthik/Desktop/SPOKE/check_sum_s3/SampleAudio_0.7mb.mp3'
import hashlib
import base64


def md5sum(filename):
    md5 = hashlib.md5()
    with open(filename, 'rb') as f:
        for chunk in iter(lambda: f.read(128 * md5.block_size), b''):
            md5.update(chunk)
    return base64.b64encode(md5.digest())


object_key = 'audio/{}.mp3'.format(""12345678"")
md5 = md5sum(object_name).decode(""utf-8"")
response = create_presigned_post('bucket', object_key, fields={

    'Content-MD5': str(md5)
},
                                 conditions=[

                                     [""starts-with"", ""$Content-MD5"", """"]
                                 ])
if response is None:
    exit(1)

with open(object_name, 'rb') as f:
    files = {'file': (object_name, f)}
    http_response = requests.post(response['url'], data=response['fields'], files=files)
    print(http_response.text)

","","20","<python-3.x><amazon-s3><md5><boto3><sha256>","0","","0","2019-10-01 19:54:11","","0","","","","","2019-10-01 19:54:11",""
"54451191","What data contained in this message, specifically, is used to verify the signature in this message assuming I have the correct public key?","I'm trying to validate this message using a public key that I know is good. If I had the code in php or c++, that would be perfect. Ideally, I just need to know the data that is being used from the message. 
Below is the sample message.
 -----BEGIN TR34_Sample_CA_KRD.p7b-----
MIIDcQYJKoZIhvcNAQcCoIIDYjCCA14CAQExADAPBgkqhkiG9w0BBwGgAgQAoIID
QjCCAz4wggImoAMCAQICBTQAAAAGMA0GCSqGSIb3DQEBCwUAMD8xCzAJBgNVBAYT
AlVTMRUwEwYDVQQKEwxUUjM0IFNhbXBsZXMxGTAXBgNVBAMTEFRSMzQgU2FtcGxl
IFJvb3QwHhcNMTAxMTAyMDAwMDAwWhcNMjUxMDI4MjM1OTU5WjBBMQswCQYDVQQG
EwJVUzEVMBMGA1UEChMMVFIzNCBTYW1wbGVzMRswGQYDVQQDExJUUjM0IFNhbXBs
ZSBDQSBLUkQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQD79+R/P7Ox
9NQVfsmKX8WFTDQpX8a4h29AWw437Z0+WkzplhwTpEcw5OiXqpJ2vSAw80UjuplX
8FZ7oFOpNOyVkj6zkF764ZygA5F4ycHwhGg+JScKc1YW5LoUpV38k7+shAh6Irwp
BxgwM0i+F6LGAVlF/ZoUcF18Q7qUgNdiP7tGjSS2EgRm+fCH49eJuCopHOF4uciv
4wGEp8uHaWIPTsxtIStFOPRumheKssvnrK7PHZEWTtDvWTNARH54UP99eT3EhRKI
TiDgneqACQljhHY1vtPpIXTfqYI4QdDviRLcInujDGgTM2hG2UEkjcDU8OLSWWWC
WO0aAhhHKeLbAgMBAAGjPzA9MA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFBI4
bs+2pm7a2/8Jb2W71bBQ+cwNMAsGA1UdDwQEAwIBBjANBgkqhkiG9w0BAQsFAAOC
AQEAayNCRdcgDRQYHWB6xs5zWNl10j2jA/IfVLjeuvemiMtc5QUiMkrdktC4EzF6
vZYa1B0QdXY5qMjWGF3MyN8GPgtdSQayH65BFhyRN1MaicsRmPch5VekqnqijJ6G
mYPwbGlDE0ygJTkoaDreEzZOv8Ikqn4dvCC9h5Fu778A2iAvD0bebvxheOONLJrD
b8mLffrBQLI5YprFYeKE9W0JrhqHjukAfhBZl8XXTRrH+XA8eCskJRjxczCbuboA
qHekeCL8hZ4ePWFfVdEKDFmIRz+lhIZnNj+upKdhKVZasHmNft4aGLpUtgApbM42
MyKEQH/1tzSYfWJcMh5AAE9l4TEA
-----END TR34_Sample_CA_KRD.p7b-----

","Answered my own question. Basically, it's the sequence tag and all the data under the sequence tag that's at the same level as the sequence tag containing the signature. Do not include the tags or data above it. Do not include the signature or the sequence tag of the signature. 
ASN.1 DECODED DATA
","19","<sha256>","-4","0","1","2019-02-18 15:32:02","","0","","","user2100815","2019-01-30 23:37:11","2019-01-30 23:34:58",""
"58438740","is it possible to find files and filepaths by only using a hash","is it possible to find a file by only inputting a hash (preferably sha256) and getting a filepath?
its also ok if i can immediately delete the file.
im trying to make like some sort of virus scan, i know this is not  good way is but its good enough for me.
i hope is can go something like this:
hash = 'hash'

path = find_file(hash, C:)

print(path)


i know this is not the best explanation but i hope someone can help me out.
its a school project and the time is tight.
thanks!
","It is only possible if the files you are searching through already have a hash associated with them. If not, you would first have to create a hash from each file's data and then check to see if that hash value matched the hash you were looking for.
","18","<python><python-3.x><hash><sha256>","-1","0","1","2019-10-17 19:16:26","","3","","","","","2019-10-17 18:29:16",""
"58492809","HMAC/SHA256 Content Hash Generate","Good afternoon everyone,
I am seeking information on how to properly generate a content hash using HMAC/SHA156 on my Wix.com site which uses Corvid for coding. I am very new to coding and would appreciate any feedback.
Here is my backend code: 
import { fetch } from 'wix-fetch';
import {wixData} from 'wix-data';
import * as HMAC from 'public/hmac';
import * as Core from 'public/core';
import * as Base64 from 'public/enc.base64';
import * as SHA256 from 'public/sha256';
import * as jquery from 'public/jquery';
import * as HmacSHA256 from 'public/hmac-sha256';
import * as CryptoJS from 'public/crypto-js';
import wixUsers from 'wix-users-backend';

$w.onReady(function () {

});


export function createLoyalty(customerInfo) {
    function conversion() {
    var secret = ""signature"";
    var string2Sign = body;
    var hash = CryptoJS.HmacSHA256(string2Sign, secret);
    var signature = CryptoJS.enc.Base64.stringify(hash);
    }
            const url = ""https://whisqr.com/api/v1.2/user/customer/"";

            const headers = {
                ""X-Public"": 'xxxxxxxAPI Public Keyxxxxxxx', //
                ""X-Hash"": ""signature"",
                ""Content-Type"": ""application/json"" //the content type
            };
            let body = {
                ""email"": ""email"",
                ""firstname"": ""firstName"",
                ""password"": ""password""
            };

            return fetch(url, {
                ""method"": ""POST"",
                ""timeout"": 0,
                ""headers"": headers,
                ""body"": JSON.stringify(body) //if there is a body
            })

}

Here is my form page code:
import {wixData} from 'wix-data';
import {fetch} from 'wix-fetch';
import {createLoyalty} from 'backend/Loyalty';
import wixLocation from 'wix-location';

$w.onReady(function () {

});

export function signupbtn_Click(event, $w) {
    let customerInfo = `${$w('#input3').value} ${$w('#input1').value} ${$w('#input4').value}`;
 createLoyalty(customerInfo)
          .then(loyalty => {
            console.log(""member created"");
            wixLocation.to(""/striking-pursuits/loyalty"")
                    }
     );
}

","","18","<hash><sha256><hmac><wixcode>","0","","0","2019-10-30 22:04:47","","1","","12221855","","2019-10-30 22:04:47","2019-10-21 19:15:59",""
"58167168","We have upgraded from ""SHA1"" to ""SHA2"", but still ""SHA1"" files are present on server. How to check and remove them?","We have upgraded from ""SHA1"" to ""SHA2"",How do I check if my SSL Certificate is using SHA1 or SHA2?
There are still SHA1 files present. There might be conflict because of them.
Also, how can I remove SHA1 files?
","","18","<ssl-certificate><sha1><sha256><sha2>","0","","0","2019-09-30 13:45:27","","0","","3440545","","2019-09-30 13:45:27","2019-09-30 11:38:36",""
"58466854","How do I generate a content hash using sha256 hash of the request body content, using the private api key with Wix Corvid","I am seeking any information attainable in reference to creating a content hash. I am very new to the coding world and would appreciate any feedback. I have searched the Wix API Documentation and am unable to find any information pertaining to this in the forum either. 
","","17","<hash><base64><sha256><wixcode>","0","","0","2019-10-19 18:35:30","","0","","","","","2019-10-19 18:35:30",""
"58481950","SHA256 fingerprint invalid public key error in Windows","I am trying to generate the fingerprint form Public Key (PK) to SHA-256, using the command as: 
ssh-keygen -lf C:/Users/UserName/.ssh/pk.asc. But got the error as:

C:/Users/UserName/.ssh/pk.asc is not a public key file.

I have generated the PublicKey using: GPG4Win, GNU privacy assistant Key Manger
Public Key Details:

Public key format:

Why is the ssh-keygen not recongnizing the generated public key. What might i am doing wrong while exporting Public Key from the GPG application?
","","17","<gnupg><sha256><ssh-keygen>","0","","0","2019-10-21 07:50:52","","0","","","","","2019-10-21 07:50:52",""
"58100295","How to calculating signature with SHA256 and HMAC in PHP","I need to calculate the signature using SHA 256 and HMAC in PHP to verify and match supplied signature in webhook. Below is an example in the documentation of our payment provider, I don't know how to achieve this in PHP.
joined_payload = “event_typeORDER.PAYMENT.RECEIVEDresourceamount10.8200resourcecurrencyEURresourcereference1400012634statecompleted""

signed_payload  = :crypto.hmac(:sha256, secret, joined_payload)
signature = Base.encode16(signed_payload, case: :lower)

This is what I have tried so far but no success
$original_sign = ""b34dc6cdc08066a34df0e24a6288a45ead05873229e8086b59f30d1a9d3cfdb2"";
$joined_payload = ""event_typeRDER.PAYMENT.CANCELLEDresourceamount5.00currencyEURreference31725statecancelled"";
$signed_payload = hash_hmac('sha256', $joined_payload, CLIENT_SECRET);
$generated_sign1 = base_convert($signed_payload,10,16);

","","15","<php><sha256><hmac>","0","","0","2019-09-25 14:05:59","","1","","","","","2019-09-25 14:05:59",""
"58159912","Feed data to message digest and save only first four bytes?","I know I can use java.security to get the digests for a message. But I'm having a hard time figuring out how I can feed the data to the message digest and then only save four bytes. The end goal would be to find collisions between two different hashes but I can't figure out how to properly get a hash of the data in the first place.
byte[] digest = md.digest(); 

How can I feed something to md.digest()?
","","14","<java><hash><sha256>","0","","0","2019-09-29 23:19:54","","1","","12140207","","2019-09-29 23:19:54","2019-09-29 23:11:32",""
"58330510","createHmac gives wrong hash","I've read many posts here but still struggle to solve my problem. I need to port a simple code from Python to Node.js:
import hmac
import hashlib
a = hashlib.sha256()
a.update('SECRET')
print a.hexdigest()

the result is 0917b13a9091915d54b6336f45909539cce452b3661b21f386418a257883b30a
It matches the hash I get on https://www.xorbin.com/tools/sha256-hash-calculator
My JS code currently looks like this:
var crypto = require('crypto');
console.log (crypto.createHmac('SHA256', 'SECRET').digest('hex'));

The result is different: 95ccedba61b3d42254e24e5e651e5141ac06a071479296924e6e25d0e7882859
How do I make them match? Thank you!!!
","","13","<javascript><sha256><hmac>","0","","0","2019-10-10 20:23:41","","1","","","","","2019-10-10 20:17:26",""
"57909632","Empty SHA256 in response of bundle upload Google API","When I try to upload app bundle via Google API in Python I got a response as: 

{  ""versionCode"": 32883,  ""sha1"":
  ""d9a0b910495dae60bab383f6caa510952f606aae"",  ""sha256"": """" }

and when I try to commit it I got 500 error with null message, it's my second problem.
My code is below: 
bundle = open('32883.aab','rb').read()
header = {'Authorization': 'Bearer ' + token,
'Content-Type':'application/octet-stream'
}
link = f'https://www.googleapis.com/upload/androidpublisher/v3/applications/{my_app}/edits/{edit_id}/bundles'
params = {'uploadType':'media'}
r = requests.post(link, headers=header, data=bundle, params=params)

What am I missing?
","","12","<api><google-api><sha256><google-console-developer>","0","","0","2019-09-12 20:42:51","","0","","10312071","","2019-09-12 20:42:51","2019-09-12 15:05:06",""
"58758712","How to hash sha256 a group of bytes + strings. (like Bitcoin)","I need to concatenate some values in bytes with some strings. But I get the error

TypeError: can't concat int to bytes

This are the values, very similar to a bitcoin transaction:
from_address = first_wallet['address'] # bytes
to_address = second_wallet['address']  # bytes
value = value  # int
fee = 1  # Hardcoded for now
date_created = str(datetime.utcnow().isoformat())
data = """"
public_key = first_wallet['public_key']  # bytes

transaction_hash = hashlib.sha256(from_address + to_address + str(value) ...)

if I transform them to strings like this, I get a new error.
transaction_hash = hashlib.sha256(str(from_address) + str(to_address) + str(value))


Unicode-objects must be encoded before hashing

How can I concatenate this and hash it?
","","11","<python><unicode><hash><sha256>","0","","0","2019-11-08 00:19:47","","1","","","","","2019-11-08 00:19:47","2019-11-08 00:29:26"
"55584697","I opened the csv file and it prints, but how do I get the specific column so that it can be encoded using hashlib?","The problem is that I need to open and import the given csv file, which as Name, address, password, city, ..... CC, CVV, Balance 
I need to encode CC and CVV to a different csv file. I cannot get the columns of the CC and CVV file to use it on the hashlib.sha256 (str(file[8]).encode().hexdigest().. 
I've tried pandas, now trying csv module, my instructor told me not to use pandas since it has too many functions. 
import csv
import os
import hashlib
import sys
from cryptography.fernet import Fernet
import pandas as pd 

with open('UserInfo2.csv', newline = '') as f:
    reader = csv.reader(f)
    with open('New_Test.csv', 'w+') as csvFile:
        new_card = csv.writer(csvFile)
i = 0
        while i <= 101:
            #print(i)
            for rows in f:
                csv_hash = csvFile.write(rows)

            i = i + 1    
def encrypt_string(hash_string):
    sha_signature = hashlib.sha256(hash_string.encode()).hexdigest()
    return sha_signature  
encrypt_string(csv_hash)            

Traceback (most recent call last):
  File "".\thirdtest.py"", line 38, in 
    encrypt_string(csv_hash)
  File "".\thirdtest.py"", line 36, in encrypt_string
    sha_signature = hashlib.sha256(hash_string.encode()).hexdigest()
AttributeError: 'int' object has no attribute 'encode'
","","10","<csv><encoding><sha256><hashlib>","0","","0","2019-04-09 03:28:50","","0","","","","","2019-04-09 03:28:50",""
"58529701","Trouble creating hash of a file that matches VirusTotal hash","I'm trying to create a SHA256 hash of a file in javascript that matches the one generated by uploading a file to https://www.virustotal.com
I've created a simplified example form here: https://codepen.io/alecdhuse/project/editor/XmWJWz using SubtleCrypto.digest().
The test file I am using is: https://www.gravatar.com/avatar/fa1e75c20502f7732fd8a23fed6d4fea
The code for the example is:
<html>
    <head>
      <meta charset=""UTF-8"">
    </head>

    <body>
      <div style="""">
        <input type=""file"" id=""file-input"" />
      </div>

      <div style=""margin-top:20px;"">
        <div>
          <textarea rows=""18"" cols=""80"" id=""output_text"" autocomplete=""off"" tabindex=""1""></textarea>
        </div>
      </div>
    </body>

    <script
      src=""https://code.jquery.com/jquery-3.4.1.min.js""
      integrity=""sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=""
      crossorigin=""anonymous""></script>

    <script type=""text/javascript"">
      function read_file(e) {
        var file = e.target.files[0];
        if (!file) {
          return;
        }
        var reader = new FileReader();
        reader.onload = function(e) {
          var contents = e.target.result;
          hash_file(contents);
        };
        reader.readAsText(file);
      }

    document.getElementById('file-input')
      .addEventListener('change', read_file, false);

      async function hash_file(file_text) {
        const digest_hex = await digest_message(file_text);
        $(""#output_text"").val(digest_hex);
      }

      async function digest_message(message) {
        const msgUint8 = new TextEncoder().encode(message);                           // encode as (utf-8) Uint8Array
        const hashBuffer = await crypto.subtle.digest('SHA-256', msgUint8);           // hash the message
        const hashArray = Array.from(new Uint8Array(hashBuffer));                     // convert buffer to byte array
        const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join(''); // convert bytes to hex string
        return hashHex;
      }

    </script>
</html>

However the hash generated by the above code does match the one generated by VirusTotal: https://www.virustotal.com/gui/file/a10cee61be30957936c20bcbaa812d030a9eb2c6cf28d4eedaa1caebfc9aa14b/detection
Any help is appreciated, thanks in advance.
","","8","<javascript><sha256>","0","","0","2019-10-23 19:20:56","","0","","","","","2019-10-23 19:20:56",""
